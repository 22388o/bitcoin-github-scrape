[
  {
    "sha": "cd2f4f35bba5c443f460fbbe99c7048a01ed9780",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZDJmNGYzNWJiYTVjNDQzZjQ2MGZiYmU5OWM3MDQ4YTAxZWQ5Nzgw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-08-13T13:34:05Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-08-13T13:34:26Z"
      },
      "message": "build: bump version to 0.17.0\n\nUpdate version after branching off.\n\nTree-SHA512: a2e2f82e7b50c0027edc8f382ad29429327edb81ca058abe3c35e049afcd5b7bcedae4545bfb59e8f7a1c8b9c97cfe550d8ae9275bd9e90cfadea22f7b835a2b",
      "tree": {
        "sha": "64a501e52aab9bef26c050320762c342cb0f0001",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/64a501e52aab9bef26c050320762c342cb0f0001"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cd2f4f35bba5c443f460fbbe99c7048a01ed9780",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJbcYjiAAoJEB5K7WKYbNJdamgIAKzpc/5uVBj9nlXk5eD5s/oM\nVTux1PDLuN52YMfTB5YzMAXb6abXh7cuFSE//Vmksn/r9fHuU6UuraebmL6nE+vr\nC0X3nJtNhd7NKx7kDOuK46cCfHwSEZgqaaKQ/9JWI9GflbF/jdtUdjUi09ff2rI4\n7zgLGfc+hBD5vNlGj7IJbo9DFyahOIgGUYxeDbJWAIf10xhIRaiP9LqbGJF+weU7\nLxJ54HHJG9NF4RhW+sxuPI5RGKFqM5CxUu9F5pVgsZWRUniLw4ywho52F1molH1X\nZxJZ9jfHst8nY0JoPMgHkgrGDyxULlZrOaXFaJ5hySOPyGAwHYLAYW6eePOeS8Y=\n=4kZm\n-----END PGP SIGNATURE-----",
        "payload": "tree 64a501e52aab9bef26c050320762c342cb0f0001\nparent 8a9ffec0a257da659ba54c5073bfc820986ae9c1\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1534167245 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1534167266 +0200\n\nbuild: bump version to 0.17.0\n\nUpdate version after branching off.\n\nTree-SHA512: a2e2f82e7b50c0027edc8f382ad29429327edb81ca058abe3c35e049afcd5b7bcedae4545bfb59e8f7a1c8b9c97cfe550d8ae9275bd9e90cfadea22f7b835a2b\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd2f4f35bba5c443f460fbbe99c7048a01ed9780",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cd2f4f35bba5c443f460fbbe99c7048a01ed9780",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd2f4f35bba5c443f460fbbe99c7048a01ed9780/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8a9ffec0a257da659ba54c5073bfc820986ae9c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a9ffec0a257da659ba54c5073bfc820986ae9c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8a9ffec0a257da659ba54c5073bfc820986ae9c1"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "44ca821a2a4a3c6e50cac5156b15e6cfd18b6c1e",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd2f4f35bba5c443f460fbbe99c7048a01ed9780/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd2f4f35bba5c443f460fbbe99c7048a01ed9780/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=cd2f4f35bba5c443f460fbbe99c7048a01ed9780",
        "patch": "@@ -1,10 +1,10 @@\n dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n AC_PREREQ([2.60])\n define(_CLIENT_VERSION_MAJOR, 0)\n-define(_CLIENT_VERSION_MINOR, 16)\n-define(_CLIENT_VERSION_REVISION, 99)\n+define(_CLIENT_VERSION_MINOR, 17)\n+define(_CLIENT_VERSION_REVISION, 0)\n define(_CLIENT_VERSION_BUILD, 0)\n-define(_CLIENT_VERSION_IS_RELEASE, false)\n+define(_CLIENT_VERSION_IS_RELEASE, true)\n define(_COPYRIGHT_YEAR, 2018)\n define(_COPYRIGHT_HOLDERS,[The %s developers])\n define(_COPYRIGHT_HOLDERS_SUBSTITUTION,[[Bitcoin Core]])"
      }
    ]
  },
  {
    "sha": "f0f745d8de9ab8fd18208671294063abf783cf90",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMGY3NDVkOGRlOWFiOGZkMTgyMDg2NzEyOTQwNjNhYmY3ODNjZjkw",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-08-13T14:04:04Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-08-13T14:04:04Z"
      },
      "message": "doc: regenerate manpages",
      "tree": {
        "sha": "ffb2f61c947aef5cb7f64db6cd0e2cb2abfc4270",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ffb2f61c947aef5cb7f64db6cd0e2cb2abfc4270"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f0f745d8de9ab8fd18208671294063abf783cf90",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJHBAABCAAxFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAltxj9QTHGZhbnF1YWtl\nQGdtYWlsLmNvbQAKCRAu659cwJUmwcX3D/oDq74Pv/WLsIc3JjK6K9e1/RAgCH/X\nvsG6/j/g3HBmPmx7P4JaKcrA25JKm/tMMJHYY5ywO7TixdWETK0FQHu1Bsgdyijc\nrne5s/B7hHWzvuKLLuPockPSqEKedqClwjGS5jQuzL11rHxT5r5ZFdee9fbYo7HC\nQyitGFxYvCinu1eK9jsw0KSIegyQSBR3jTLFh0oVIrbGelzE8ufkNKCZGVYqs3JB\ns59dG1qsDS3CHBrvBjacJr0tfL+UbS4igc4//EvN1Oa/eO7m4kzc9KJrs+Hk0mok\nvrnV+EIvAsMDGeA4ntK5BFkPat7Bew6bltMRwadW/geSp5s5XG3TPb8E4Y98U7zr\nbHvhJZWRTVSi+Bgp1UTz+NsdYTBKZOjTIH3PhoFKhrJrMcn84gjnp8v1kvr1XeZO\n1bsnb5srwFEzfMLwTxybs49htEQQZlad23pt81QPEbximkGJUj0rSxarlQcsEn8J\nOLnXlpHKtO6nq67po1NSzxrvfANlgjyCvbNPNXu8jkIytD3K+ObSF2wps6tCwqt5\n4pH/gyfAtqH9PzyMCgKa0crS5uNyuFHzyhToSXsilf/1cg3K4vZoq1fFrF8i9dr7\nckB7TestWy/aEu3O67Eg+JGMu0IYUS+PKaCgaBwj8HDPG5X0RTZD3Lil6gcLCTeK\n+WUhwOQUe4sI3g==\n=5FIk\n-----END PGP SIGNATURE-----",
        "payload": "tree ffb2f61c947aef5cb7f64db6cd0e2cb2abfc4270\nparent cd2f4f35bba5c443f460fbbe99c7048a01ed9780\nauthor fanquake <fanquake@gmail.com> 1534169044 +0800\ncommitter fanquake <fanquake@gmail.com> 1534169044 +0800\n\ndoc: regenerate manpages\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0f745d8de9ab8fd18208671294063abf783cf90",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f0f745d8de9ab8fd18208671294063abf783cf90",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0f745d8de9ab8fd18208671294063abf783cf90/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cd2f4f35bba5c443f460fbbe99c7048a01ed9780",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd2f4f35bba5c443f460fbbe99c7048a01ed9780",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cd2f4f35bba5c443f460fbbe99c7048a01ed9780"
      }
    ],
    "stats": {
      "total": 92,
      "additions": 46,
      "deletions": 46
    },
    "files": [
      {
        "sha": "ca7096b86cd8e2b39f699f2dee236331e4ee3175",
        "filename": "doc/man/bitcoin-cli.1",
        "status": "modified",
        "additions": 19,
        "deletions": 17,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0f745d8de9ab8fd18208671294063abf783cf90/doc/man/bitcoin-cli.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0f745d8de9ab8fd18208671294063abf783cf90/doc/man/bitcoin-cli.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-cli.1?ref=f0f745d8de9ab8fd18208671294063abf783cf90",
        "patch": "@@ -1,17 +1,21 @@\n .\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIN-CLI \"1\" \"July 2018\" \"bitcoin-cli v0.16.99.0\" \"User Commands\"\n+.TH BITCOIN-CLI \"1\" \"August 2018\" \"bitcoin-cli v0.17.0.0\" \"User Commands\"\n .SH NAME\n-bitcoin-cli \\- manual page for bitcoin-cli v0.16.99.0\n+bitcoin-cli \\- manual page for bitcoin-cli v0.17.0.0\n+.SH SYNOPSIS\n+.B bitcoin-cli\n+[\\fI\\,options\\/\\fR] \\fI\\,<command> \\/\\fR[\\fI\\,params\\/\\fR]  \\fI\\,Send command to Bitcoin Core\\/\\fR\n+.br\n+.B bitcoin-cli\n+[\\fI\\,options\\/\\fR] \\fI\\,-named <command> \\/\\fR[\\fI\\,name=value\\/\\fR]...  \\fI\\,Send command to Bitcoin Core (with named arguments)\\/\\fR\n+.br\n+.B bitcoin-cli\n+[\\fI\\,options\\/\\fR] \\fI\\,help                List commands\\/\\fR\n+.br\n+.B bitcoin-cli\n+[\\fI\\,options\\/\\fR] \\fI\\,help <command>      Get help for a command\\/\\fR\n .SH DESCRIPTION\n-Bitcoin Core RPC client version v0.16.99.0\n-.SS \"Usage:\"\n-.TP\n-bitcoin\\-cli [options] <command> [params]\n-Send command to Bitcoin Core\n-.IP\n-bitcoin\\-cli [options] \\fB\\-named\\fR <command> [name=value] ... Send command to Bitcoin Core (with named arguments)\n-bitcoin\\-cli [options] help                List commands\n-bitcoin\\-cli [options] help <command>      Get help for a command\n+Bitcoin Core RPC client version v0.17.0.0\n .SH OPTIONS\n .HP\n \\-?\n@@ -77,15 +81,13 @@ corresponding \\fB\\-wallet\\fR option passed to bitcoind)\n \\fB\\-stdin\\fR\n .IP\n Read extra arguments from standard input, one per line until EOF/Ctrl\\-D\n-(recommended for sensitive information such as passphrases).\n-When combined with \\fB\\-stdinrpcpass\\fR, the first line from standard\n-input is used for the RPC password.\n+(recommended for sensitive information such as passphrases). When\n+combined with \\fB\\-stdinrpcpass\\fR, the first line from standard input\n+is used for the RPC password.\n .HP\n \\fB\\-stdinrpcpass\\fR\n-.TP\n-Read RPC password from standard input as a single line.\n-When combined\n .IP\n+Read RPC password from standard input as a single line. When combined\n with \\fB\\-stdin\\fR, the first line from standard input is used for the\n RPC password.\n .HP"
      },
      {
        "sha": "eca771ad5b49235610671bbe0c01bb5609a58dca",
        "filename": "doc/man/bitcoin-qt.1",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0f745d8de9ab8fd18208671294063abf783cf90/doc/man/bitcoin-qt.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0f745d8de9ab8fd18208671294063abf783cf90/doc/man/bitcoin-qt.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-qt.1?ref=f0f745d8de9ab8fd18208671294063abf783cf90",
        "patch": "@@ -1,12 +1,12 @@\n .\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIN-QT \"1\" \"July 2018\" \"bitcoin-qt v0.16.99.0\" \"User Commands\"\n+.TH BITCOIN-QT \"1\" \"August 2018\" \"bitcoin-qt v0.17.0.0\" \"User Commands\"\n .SH NAME\n-bitcoin-qt \\- manual page for bitcoin-qt v0.16.99.0\n+bitcoin-qt \\- manual page for bitcoin-qt v0.17.0.0\n+.SH SYNOPSIS\n+.B bitcoin-qt\n+[\\fI\\,command-line options\\/\\fR]\n .SH DESCRIPTION\n-Bitcoin Core version v0.16.99.0 (64\\-bit)\n-Usage:\n-.IP\n-bitcoin\\-qt [command\\-line options]\n+Bitcoin Core version v0.17.0.0 (64\\-bit)\n .SH OPTIONS\n .HP\n \\-?\n@@ -23,9 +23,9 @@ long fork (%s in cmd is replaced by message)\n If this block is in the chain assume that it and its ancestors are valid\n and potentially skip their script verification (0 to verify all,\n default:\n-0000000000000000005214481d2d96f898e3d5416e43359c145944a909d242e0,\n+0000000000000000002e63058c023a9a1de233554f28c7b21380b6c9003f36a8,\n testnet:\n-0000000002e9e7b00e1f6dc5123a04aad68dd0f0968d8c7aa45f6640795c37b1)\n+0000000000000037a8cd3e06cd5edbfe9dd1dbcc5dacab279376ef7cfc2b4c75)\n .HP\n \\fB\\-blocknotify=\\fR<cmd>\n .IP\n@@ -108,7 +108,7 @@ blocks if a target size in MiB is provided. This mode is\n incompatible with \\fB\\-txindex\\fR and \\fB\\-rescan\\fR. Warning: Reverting this\n setting requires re\\-downloading the entire blockchain. (default:\n 0 = disable pruning blocks, 1 = allow manual pruning via RPC,\n->550 = automatically prune block files to stay under the\n+>=550 = automatically prune block files to stay under the\n specified target size in MiB)\n .HP\n \\fB\\-reindex\\fR"
      },
      {
        "sha": "1020a61b53dd655b88c788cb6eb000fc31c523a7",
        "filename": "doc/man/bitcoin-tx.1",
        "status": "modified",
        "additions": 9,
        "deletions": 10,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0f745d8de9ab8fd18208671294063abf783cf90/doc/man/bitcoin-tx.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0f745d8de9ab8fd18208671294063abf783cf90/doc/man/bitcoin-tx.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-tx.1?ref=f0f745d8de9ab8fd18208671294063abf783cf90",
        "patch": "@@ -1,16 +1,15 @@\n .\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIN-TX \"1\" \"July 2018\" \"bitcoin-tx v0.16.99.0\" \"User Commands\"\n+.TH BITCOIN-TX \"1\" \"August 2018\" \"bitcoin-tx v0.17.0.0\" \"User Commands\"\n .SH NAME\n-bitcoin-tx \\- manual page for bitcoin-tx v0.16.99.0\n+bitcoin-tx \\- manual page for bitcoin-tx v0.17.0.0\n+.SH SYNOPSIS\n+.B bitcoin-tx\n+[\\fI\\,options\\/\\fR] \\fI\\,<hex-tx> \\/\\fR[\\fI\\,commands\\/\\fR]  \\fI\\,Update hex-encoded bitcoin transaction\\/\\fR\n+.br\n+.B bitcoin-tx\n+[\\fI\\,options\\/\\fR] \\fI\\,-create \\/\\fR[\\fI\\,commands\\/\\fR]   \\fI\\,Create hex-encoded bitcoin transaction\\/\\fR\n .SH DESCRIPTION\n-Bitcoin Core bitcoin\\-tx utility version v0.16.99.0\n-.SS \"Usage:\"\n-.TP\n-bitcoin\\-tx [options] <hex\\-tx> [commands]\n-Update hex\\-encoded bitcoin transaction\n-.TP\n-bitcoin\\-tx [options] \\fB\\-create\\fR [commands]\n-Create hex\\-encoded bitcoin transaction\n+Bitcoin Core bitcoin\\-tx utility version v0.17.0.0\n .SH OPTIONS\n .HP\n \\-?"
      },
      {
        "sha": "63531fdb213f676436f2059966c96f6f88389f78",
        "filename": "doc/man/bitcoind.1",
        "status": "modified",
        "additions": 9,
        "deletions": 10,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0f745d8de9ab8fd18208671294063abf783cf90/doc/man/bitcoind.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0f745d8de9ab8fd18208671294063abf783cf90/doc/man/bitcoind.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoind.1?ref=f0f745d8de9ab8fd18208671294063abf783cf90",
        "patch": "@@ -1,13 +1,12 @@\n .\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIND \"1\" \"July 2018\" \"bitcoind v0.16.99.0\" \"User Commands\"\n+.TH BITCOIND \"1\" \"August 2018\" \"bitcoind v0.17.0.0\" \"User Commands\"\n .SH NAME\n-bitcoind \\- manual page for bitcoind v0.16.99.0\n+bitcoind \\- manual page for bitcoind v0.17.0.0\n+.SH SYNOPSIS\n+.B bitcoind\n+[\\fI\\,options\\/\\fR]                     \\fI\\,Start Bitcoin Core Daemon\\/\\fR\n .SH DESCRIPTION\n-Bitcoin Core Daemon version v0.16.99.0\n-.SS \"Usage:\"\n-.TP\n-bitcoind [options]\n-Start Bitcoin Core Daemon\n+Bitcoin Core Daemon version v0.17.0.0\n .SH OPTIONS\n .HP\n \\-?\n@@ -24,9 +23,9 @@ long fork (%s in cmd is replaced by message)\n If this block is in the chain assume that it and its ancestors are valid\n and potentially skip their script verification (0 to verify all,\n default:\n-0000000000000000005214481d2d96f898e3d5416e43359c145944a909d242e0,\n+0000000000000000002e63058c023a9a1de233554f28c7b21380b6c9003f36a8,\n testnet:\n-0000000002e9e7b00e1f6dc5123a04aad68dd0f0968d8c7aa45f6640795c37b1)\n+0000000000000037a8cd3e06cd5edbfe9dd1dbcc5dacab279376ef7cfc2b4c75)\n .HP\n \\fB\\-blocknotify=\\fR<cmd>\n .IP\n@@ -109,7 +108,7 @@ blocks if a target size in MiB is provided. This mode is\n incompatible with \\fB\\-txindex\\fR and \\fB\\-rescan\\fR. Warning: Reverting this\n setting requires re\\-downloading the entire blockchain. (default:\n 0 = disable pruning blocks, 1 = allow manual pruning via RPC,\n->550 = automatically prune block files to stay under the\n+>=550 = automatically prune block files to stay under the\n specified target size in MiB)\n .HP\n \\fB\\-reindex\\fR"
      }
    ]
  },
  {
    "sha": "ff41e479a0a3c2485f6116abcffa1bacbd86ca72",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZjQxZTQ3OWEwYTNjMjQ4NWY2MTE2YWJjZmZhMWJhY2JkODZjYTcy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-08-13T15:10:58Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-08-13T15:11:11Z"
      },
      "message": "Merge #13956: [0.17] doc: regenerate manpages\n\nf0f745d8de9ab8fd18208671294063abf783cf90 doc: regenerate manpages (fanquake)\n\nPull request description:\n\n  Done using: `contrib/devtools/gen-manpages.sh`\n\nTree-SHA512: 523b333768aa5ff289ceee3dbe627698f60c7b4624a1fe2812a40d99a5184aa2f6abd20fa467487918bbcbe1d88693c589456e75a5e747281333f75ab1f5f8b9",
      "tree": {
        "sha": "ffb2f61c947aef5cb7f64db6cd0e2cb2abfc4270",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ffb2f61c947aef5cb7f64db6cd0e2cb2abfc4270"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff41e479a0a3c2485f6116abcffa1bacbd86ca72",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJbcZ+PAAoJEB5K7WKYbNJdu2sIALFhw7TXMUtl2sC44DItRtuo\nGrcl2jnH5AAjL7WZq8psTEjcv1uj0TDrpu5TDI38GxlSvP3y/37TPUpnrqR7n0Uk\nCcaX/N/2p9oQCnNrjjzdy1wVdhnwbF+mOq88YOBWshVsdIbN6VLJIJ7hTJd4DQ16\nShGhUbNDQuhJzoNubMR1o3bAFefYU/dEDHaqB7LM2g1EyIREgh+lHUUabB+cxRNS\nrhVeKpymX68tMxoD0L6Vz07yAdBfxOqKQaeOGYvGPiwsGAE271ZgF5Ae4tkM52a8\nlFgKyW/LoJx0QEZke0Nw9B64EFKWs+ivRcxEtS02rOJZzGV+pXu3HNY2dC6y13A=\n=EFqm\n-----END PGP SIGNATURE-----",
        "payload": "tree ffb2f61c947aef5cb7f64db6cd0e2cb2abfc4270\nparent cd2f4f35bba5c443f460fbbe99c7048a01ed9780\nparent f0f745d8de9ab8fd18208671294063abf783cf90\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1534173058 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1534173071 +0200\n\nMerge #13956: [0.17] doc: regenerate manpages\n\nf0f745d8de9ab8fd18208671294063abf783cf90 doc: regenerate manpages (fanquake)\n\nPull request description:\n\n  Done using: `contrib/devtools/gen-manpages.sh`\n\nTree-SHA512: 523b333768aa5ff289ceee3dbe627698f60c7b4624a1fe2812a40d99a5184aa2f6abd20fa467487918bbcbe1d88693c589456e75a5e747281333f75ab1f5f8b9\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff41e479a0a3c2485f6116abcffa1bacbd86ca72",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ff41e479a0a3c2485f6116abcffa1bacbd86ca72",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff41e479a0a3c2485f6116abcffa1bacbd86ca72/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cd2f4f35bba5c443f460fbbe99c7048a01ed9780",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd2f4f35bba5c443f460fbbe99c7048a01ed9780",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cd2f4f35bba5c443f460fbbe99c7048a01ed9780"
      },
      {
        "sha": "f0f745d8de9ab8fd18208671294063abf783cf90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0f745d8de9ab8fd18208671294063abf783cf90",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f0f745d8de9ab8fd18208671294063abf783cf90"
      }
    ],
    "stats": {
      "total": 92,
      "additions": 46,
      "deletions": 46
    },
    "files": [
      {
        "sha": "ca7096b86cd8e2b39f699f2dee236331e4ee3175",
        "filename": "doc/man/bitcoin-cli.1",
        "status": "modified",
        "additions": 19,
        "deletions": 17,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff41e479a0a3c2485f6116abcffa1bacbd86ca72/doc/man/bitcoin-cli.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff41e479a0a3c2485f6116abcffa1bacbd86ca72/doc/man/bitcoin-cli.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-cli.1?ref=ff41e479a0a3c2485f6116abcffa1bacbd86ca72",
        "patch": "@@ -1,17 +1,21 @@\n .\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIN-CLI \"1\" \"July 2018\" \"bitcoin-cli v0.16.99.0\" \"User Commands\"\n+.TH BITCOIN-CLI \"1\" \"August 2018\" \"bitcoin-cli v0.17.0.0\" \"User Commands\"\n .SH NAME\n-bitcoin-cli \\- manual page for bitcoin-cli v0.16.99.0\n+bitcoin-cli \\- manual page for bitcoin-cli v0.17.0.0\n+.SH SYNOPSIS\n+.B bitcoin-cli\n+[\\fI\\,options\\/\\fR] \\fI\\,<command> \\/\\fR[\\fI\\,params\\/\\fR]  \\fI\\,Send command to Bitcoin Core\\/\\fR\n+.br\n+.B bitcoin-cli\n+[\\fI\\,options\\/\\fR] \\fI\\,-named <command> \\/\\fR[\\fI\\,name=value\\/\\fR]...  \\fI\\,Send command to Bitcoin Core (with named arguments)\\/\\fR\n+.br\n+.B bitcoin-cli\n+[\\fI\\,options\\/\\fR] \\fI\\,help                List commands\\/\\fR\n+.br\n+.B bitcoin-cli\n+[\\fI\\,options\\/\\fR] \\fI\\,help <command>      Get help for a command\\/\\fR\n .SH DESCRIPTION\n-Bitcoin Core RPC client version v0.16.99.0\n-.SS \"Usage:\"\n-.TP\n-bitcoin\\-cli [options] <command> [params]\n-Send command to Bitcoin Core\n-.IP\n-bitcoin\\-cli [options] \\fB\\-named\\fR <command> [name=value] ... Send command to Bitcoin Core (with named arguments)\n-bitcoin\\-cli [options] help                List commands\n-bitcoin\\-cli [options] help <command>      Get help for a command\n+Bitcoin Core RPC client version v0.17.0.0\n .SH OPTIONS\n .HP\n \\-?\n@@ -77,15 +81,13 @@ corresponding \\fB\\-wallet\\fR option passed to bitcoind)\n \\fB\\-stdin\\fR\n .IP\n Read extra arguments from standard input, one per line until EOF/Ctrl\\-D\n-(recommended for sensitive information such as passphrases).\n-When combined with \\fB\\-stdinrpcpass\\fR, the first line from standard\n-input is used for the RPC password.\n+(recommended for sensitive information such as passphrases). When\n+combined with \\fB\\-stdinrpcpass\\fR, the first line from standard input\n+is used for the RPC password.\n .HP\n \\fB\\-stdinrpcpass\\fR\n-.TP\n-Read RPC password from standard input as a single line.\n-When combined\n .IP\n+Read RPC password from standard input as a single line. When combined\n with \\fB\\-stdin\\fR, the first line from standard input is used for the\n RPC password.\n .HP"
      },
      {
        "sha": "eca771ad5b49235610671bbe0c01bb5609a58dca",
        "filename": "doc/man/bitcoin-qt.1",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff41e479a0a3c2485f6116abcffa1bacbd86ca72/doc/man/bitcoin-qt.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff41e479a0a3c2485f6116abcffa1bacbd86ca72/doc/man/bitcoin-qt.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-qt.1?ref=ff41e479a0a3c2485f6116abcffa1bacbd86ca72",
        "patch": "@@ -1,12 +1,12 @@\n .\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIN-QT \"1\" \"July 2018\" \"bitcoin-qt v0.16.99.0\" \"User Commands\"\n+.TH BITCOIN-QT \"1\" \"August 2018\" \"bitcoin-qt v0.17.0.0\" \"User Commands\"\n .SH NAME\n-bitcoin-qt \\- manual page for bitcoin-qt v0.16.99.0\n+bitcoin-qt \\- manual page for bitcoin-qt v0.17.0.0\n+.SH SYNOPSIS\n+.B bitcoin-qt\n+[\\fI\\,command-line options\\/\\fR]\n .SH DESCRIPTION\n-Bitcoin Core version v0.16.99.0 (64\\-bit)\n-Usage:\n-.IP\n-bitcoin\\-qt [command\\-line options]\n+Bitcoin Core version v0.17.0.0 (64\\-bit)\n .SH OPTIONS\n .HP\n \\-?\n@@ -23,9 +23,9 @@ long fork (%s in cmd is replaced by message)\n If this block is in the chain assume that it and its ancestors are valid\n and potentially skip their script verification (0 to verify all,\n default:\n-0000000000000000005214481d2d96f898e3d5416e43359c145944a909d242e0,\n+0000000000000000002e63058c023a9a1de233554f28c7b21380b6c9003f36a8,\n testnet:\n-0000000002e9e7b00e1f6dc5123a04aad68dd0f0968d8c7aa45f6640795c37b1)\n+0000000000000037a8cd3e06cd5edbfe9dd1dbcc5dacab279376ef7cfc2b4c75)\n .HP\n \\fB\\-blocknotify=\\fR<cmd>\n .IP\n@@ -108,7 +108,7 @@ blocks if a target size in MiB is provided. This mode is\n incompatible with \\fB\\-txindex\\fR and \\fB\\-rescan\\fR. Warning: Reverting this\n setting requires re\\-downloading the entire blockchain. (default:\n 0 = disable pruning blocks, 1 = allow manual pruning via RPC,\n->550 = automatically prune block files to stay under the\n+>=550 = automatically prune block files to stay under the\n specified target size in MiB)\n .HP\n \\fB\\-reindex\\fR"
      },
      {
        "sha": "1020a61b53dd655b88c788cb6eb000fc31c523a7",
        "filename": "doc/man/bitcoin-tx.1",
        "status": "modified",
        "additions": 9,
        "deletions": 10,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff41e479a0a3c2485f6116abcffa1bacbd86ca72/doc/man/bitcoin-tx.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff41e479a0a3c2485f6116abcffa1bacbd86ca72/doc/man/bitcoin-tx.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-tx.1?ref=ff41e479a0a3c2485f6116abcffa1bacbd86ca72",
        "patch": "@@ -1,16 +1,15 @@\n .\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIN-TX \"1\" \"July 2018\" \"bitcoin-tx v0.16.99.0\" \"User Commands\"\n+.TH BITCOIN-TX \"1\" \"August 2018\" \"bitcoin-tx v0.17.0.0\" \"User Commands\"\n .SH NAME\n-bitcoin-tx \\- manual page for bitcoin-tx v0.16.99.0\n+bitcoin-tx \\- manual page for bitcoin-tx v0.17.0.0\n+.SH SYNOPSIS\n+.B bitcoin-tx\n+[\\fI\\,options\\/\\fR] \\fI\\,<hex-tx> \\/\\fR[\\fI\\,commands\\/\\fR]  \\fI\\,Update hex-encoded bitcoin transaction\\/\\fR\n+.br\n+.B bitcoin-tx\n+[\\fI\\,options\\/\\fR] \\fI\\,-create \\/\\fR[\\fI\\,commands\\/\\fR]   \\fI\\,Create hex-encoded bitcoin transaction\\/\\fR\n .SH DESCRIPTION\n-Bitcoin Core bitcoin\\-tx utility version v0.16.99.0\n-.SS \"Usage:\"\n-.TP\n-bitcoin\\-tx [options] <hex\\-tx> [commands]\n-Update hex\\-encoded bitcoin transaction\n-.TP\n-bitcoin\\-tx [options] \\fB\\-create\\fR [commands]\n-Create hex\\-encoded bitcoin transaction\n+Bitcoin Core bitcoin\\-tx utility version v0.17.0.0\n .SH OPTIONS\n .HP\n \\-?"
      },
      {
        "sha": "63531fdb213f676436f2059966c96f6f88389f78",
        "filename": "doc/man/bitcoind.1",
        "status": "modified",
        "additions": 9,
        "deletions": 10,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff41e479a0a3c2485f6116abcffa1bacbd86ca72/doc/man/bitcoind.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff41e479a0a3c2485f6116abcffa1bacbd86ca72/doc/man/bitcoind.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoind.1?ref=ff41e479a0a3c2485f6116abcffa1bacbd86ca72",
        "patch": "@@ -1,13 +1,12 @@\n .\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIND \"1\" \"July 2018\" \"bitcoind v0.16.99.0\" \"User Commands\"\n+.TH BITCOIND \"1\" \"August 2018\" \"bitcoind v0.17.0.0\" \"User Commands\"\n .SH NAME\n-bitcoind \\- manual page for bitcoind v0.16.99.0\n+bitcoind \\- manual page for bitcoind v0.17.0.0\n+.SH SYNOPSIS\n+.B bitcoind\n+[\\fI\\,options\\/\\fR]                     \\fI\\,Start Bitcoin Core Daemon\\/\\fR\n .SH DESCRIPTION\n-Bitcoin Core Daemon version v0.16.99.0\n-.SS \"Usage:\"\n-.TP\n-bitcoind [options]\n-Start Bitcoin Core Daemon\n+Bitcoin Core Daemon version v0.17.0.0\n .SH OPTIONS\n .HP\n \\-?\n@@ -24,9 +23,9 @@ long fork (%s in cmd is replaced by message)\n If this block is in the chain assume that it and its ancestors are valid\n and potentially skip their script verification (0 to verify all,\n default:\n-0000000000000000005214481d2d96f898e3d5416e43359c145944a909d242e0,\n+0000000000000000002e63058c023a9a1de233554f28c7b21380b6c9003f36a8,\n testnet:\n-0000000002e9e7b00e1f6dc5123a04aad68dd0f0968d8c7aa45f6640795c37b1)\n+0000000000000037a8cd3e06cd5edbfe9dd1dbcc5dacab279376ef7cfc2b4c75)\n .HP\n \\fB\\-blocknotify=\\fR<cmd>\n .IP\n@@ -109,7 +108,7 @@ blocks if a target size in MiB is provided. This mode is\n incompatible with \\fB\\-txindex\\fR and \\fB\\-rescan\\fR. Warning: Reverting this\n setting requires re\\-downloading the entire blockchain. (default:\n 0 = disable pruning blocks, 1 = allow manual pruning via RPC,\n->550 = automatically prune block files to stay under the\n+>=550 = automatically prune block files to stay under the\n specified target size in MiB)\n .HP\n \\fB\\-reindex\\fR"
      }
    ]
  },
  {
    "sha": "8c4cd2bd895fe7467307867fefc3cd45a685367c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YzRjZDJiZDg5NWZlNzQ2NzMwNzg2N2ZlZmMzY2Q0NWE2ODUzNjdj",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-08-13T21:59:31Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-08-15T01:58:49Z"
      },
      "message": "Fix PSBT deserialization of 0-input transactions\n\n0-input transactions can be ambiguously deserialized as being witness\ntransactions. Since the unsigned transaction is never serialized as\na witness transaction as it has no witnesses, we should always\ndeserialize it as a non-witness transaction and set the serialization\nflags as such.\n\nAlso always serialize the unsigned transaction as a non-witness transaction.\n\nGitHub-Pull: #13960\nRebased-From: 43811e6",
      "tree": {
        "sha": "7f8dd38e219a0788e5a08c5ff31e6157ba01a353",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7f8dd38e219a0788e5a08c5ff31e6157ba01a353"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8c4cd2bd895fe7467307867fefc3cd45a685367c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJHBAABCAAxFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAltziR4THGZhbnF1YWtl\nQGdtYWlsLmNvbQAKCRAu659cwJUmweERD/9L3NQAEW/QWHNIAS4aZcOxXmYM21HE\nk6sx8i8VWuImqJuIKCpfJOMzwWaO4Lr/hj1YRoawRG1R3p/FAJFH4onSCFgeRNip\n44ZLX+AeP4Xkeh7i2xkGo3F/v8/cCpijOT4gjnerei5GF3A+ulzzw3shIdm40HMC\nmU8w4sVcut2elDoIIYZXCYhwMuJdAKCAJ1pYQBtrjvoCrWXC6AmaOQg2A+t/s34W\nEve5cDpNP5M4uWZc48zfG2qjV563FZXZkB923m1NaZoyLBER6G0v2Rl6Vc1bGqNO\nklBXfsFPQyaL/ggySJgnBcVtADiPXskCt993kVd2e6kK2eujCKoyHQzmYtyhI6wz\nhIUdVkYl98WgnZwLsOPKHpNnI+apHX3iR0Ye0/qHJ6F0rTKYfvFvzrQyRmejnS0O\n1VPO5RzR7BxYzqPxhuJiY83x2DR1mQetUpJKlLhtpXD8gDaxgRo+bj+rR7R/hna0\n0cnwCMy6WSQsawTTdu0jPAzS9jtrS96VgLLupqUZ6zLErbdkiCWr8BL0JTxIdapT\nzrroN2FTqmVETZZVYKhhg5TAh2rR7xzTwf/7kOd6n/3x5lgILpQDl3LcyNmBdoZW\nk4E1lQIm/fljp7sNdtDhGi3okdl26Lqo+iMutgWfzmphXbpu3/a+Uq5zsQ9Zhgpx\nVARcaSX0k0ABjA==\n=n+0O\n-----END PGP SIGNATURE-----",
        "payload": "tree 7f8dd38e219a0788e5a08c5ff31e6157ba01a353\nparent ff41e479a0a3c2485f6116abcffa1bacbd86ca72\nauthor Andrew Chow <achow101-github@achow101.com> 1534197571 -0700\ncommitter fanquake <fanquake@gmail.com> 1534298329 +0800\n\nFix PSBT deserialization of 0-input transactions\n\n0-input transactions can be ambiguously deserialized as being witness\ntransactions. Since the unsigned transaction is never serialized as\na witness transaction as it has no witnesses, we should always\ndeserialize it as a non-witness transaction and set the serialization\nflags as such.\n\nAlso always serialize the unsigned transaction as a non-witness transaction.\n\nGitHub-Pull: #13960\nRebased-From: 43811e6\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c4cd2bd895fe7467307867fefc3cd45a685367c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8c4cd2bd895fe7467307867fefc3cd45a685367c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c4cd2bd895fe7467307867fefc3cd45a685367c/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff41e479a0a3c2485f6116abcffa1bacbd86ca72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff41e479a0a3c2485f6116abcffa1bacbd86ca72",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff41e479a0a3c2485f6116abcffa1bacbd86ca72"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 8,
      "deletions": 3
    },
    "files": [
      {
        "sha": "86188cbb38d8c291478b71fa397d9506a5375147",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c4cd2bd895fe7467307867fefc3cd45a685367c/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c4cd2bd895fe7467307867fefc3cd45a685367c/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=8c4cd2bd895fe7467307867fefc3cd45a685367c",
        "patch": "@@ -547,7 +547,8 @@ struct PartiallySignedTransaction\n         SerializeToVector(s, PSBT_GLOBAL_UNSIGNED_TX);\n \n         // Write serialized tx to a stream\n-        SerializeToVector(s, *tx);\n+        OverrideStream<Stream> os(&s, s.GetType(), s.GetVersion() | SERIALIZE_TRANSACTION_NO_WITNESS);\n+        SerializeToVector(os, *tx);\n \n         // Write the unknown things\n         for (auto& entry : unknown) {\n@@ -601,7 +602,9 @@ struct PartiallySignedTransaction\n                         throw std::ios_base::failure(\"Global unsigned tx key is more than one byte type\");\n                     }\n                     CMutableTransaction mtx;\n-                    UnserializeFromVector(s, mtx);\n+                    // Set the stream to serialize with non-witness since this should always be non-witness\n+                    OverrideStream<Stream> os(&s, s.GetType(), s.GetVersion() | SERIALIZE_TRANSACTION_NO_WITNESS);\n+                    UnserializeFromVector(os, mtx);\n                     tx = std::move(mtx);\n                     // Make sure that all scriptSigs and scriptWitnesses are empty\n                     for (const CTxIn& txin : tx->vin) {"
      },
      {
        "sha": "096ebfc9c2eeb008546e112c658b924c23481927",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c4cd2bd895fe7467307867fefc3cd45a685367c/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c4cd2bd895fe7467307867fefc3cd45a685367c/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=8c4cd2bd895fe7467307867fefc3cd45a685367c",
        "patch": "@@ -61,6 +61,7 @@ class OverrideStream\n \n     int GetVersion() const { return nVersion; }\n     int GetType() const { return nType; }\n+    size_t size() const { return stream->size(); }\n };\n \n template<typename S>"
      },
      {
        "sha": "e81ea30ff95dc2861428fa1911f243844b5e646e",
        "filename": "test/functional/data/rpc_psbt.json",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c4cd2bd895fe7467307867fefc3cd45a685367c/test/functional/data/rpc_psbt.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c4cd2bd895fe7467307867fefc3cd45a685367c/test/functional/data/rpc_psbt.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/rpc_psbt.json?ref=8c4cd2bd895fe7467307867fefc3cd45a685367c",
        "patch": "@@ -24,7 +24,8 @@\n         \"cHNidP8BAKACAAAAAqsJSaCMWvfEm4IS9Bfi8Vqz9cM9zxU4IagTn4d6W3vkAAAAAAD+////qwlJoIxa98SbghL0F+LxWrP1wz3PFTghqBOfh3pbe+QBAAAAAP7///8CYDvqCwAAAAAZdqkUdopAu9dAy+gdmI5x3ipNXHE5ax2IrI4kAAAAAAAAGXapFG9GILVT+glechue4O/p+gOcykWXiKwAAAAAAAEHakcwRAIgR1lmF5fAGwNrJZKJSGhiGDR9iYZLcZ4ff89X0eURZYcCIFMJ6r9Wqk2Ikf/REf3xM286KdqGbX+EhtdVRs7tr5MZASEDXNxh/HupccC1AaZGoqg7ECy0OIEhfKaC3Ibi1z+ogpIAAQEgAOH1BQAAAAAXqRQ1RebjO4MsRwUPJNPuuTycA5SLx4cBBBYAFIXRNTfy4mVAWjTbr6nj3aAfuCMIAAAA\",\n         \"cHNidP8BAHUCAAAAASaBcTce3/KF6Tet7qSze3gADAVmy7OtZGQXE8pCFxv2AAAAAAD+////AtPf9QUAAAAAGXapFNDFmQPFusKGh2DpD9UhpGZap2UgiKwA4fUFAAAAABepFDVF5uM7gyxHBQ8k0+65PJwDlIvHh7MuEwAAAQD9pQEBAAAAAAECiaPHHqtNIOA3G7ukzGmPopXJRjr6Ljl/hTPMti+VZ+UBAAAAFxYAFL4Y0VKpsBIDna89p95PUzSe7LmF/////4b4qkOnHf8USIk6UwpyN+9rRgi7st0tAXHmOuxqSJC0AQAAABcWABT+Pp7xp0XpdNkCxDVZQ6vLNL1TU/////8CAMLrCwAAAAAZdqkUhc/xCX/Z4Ai7NK9wnGIZeziXikiIrHL++E4sAAAAF6kUM5cluiHv1irHU6m80GfWx6ajnQWHAkcwRAIgJxK+IuAnDzlPVoMR3HyppolwuAJf3TskAinwf4pfOiQCIAGLONfc0xTnNMkna9b7QPZzMlvEuqFEyADS8vAtsnZcASED0uFWdJQbrUqZY3LLh+GFbTZSYG2YVi/jnF6efkE/IQUCSDBFAiEA0SuFLYXc2WHS9fSrZgZU327tzHlMDDPOXMMJ/7X85Y0CIGczio4OFyXBl/saiK9Z9R5E5CVbIBZ8hoQDHAXR8lkqASECI7cr7vCWXRC+B3jv7NYfysb3mk6haTkzgHNEZPhPKrMAAAAAAQMEAQAAAAAAAA==\",\n         \"cHNidP8BAKACAAAAAqsJSaCMWvfEm4IS9Bfi8Vqz9cM9zxU4IagTn4d6W3vkAAAAAAD+////qwlJoIxa98SbghL0F+LxWrP1wz3PFTghqBOfh3pbe+QBAAAAAP7///8CYDvqCwAAAAAZdqkUdopAu9dAy+gdmI5x3ipNXHE5ax2IrI4kAAAAAAAAGXapFG9GILVT+glechue4O/p+gOcykWXiKwAAAAAAAEA3wIAAAABJoFxNx7f8oXpN63upLN7eAAMBWbLs61kZBcTykIXG/YAAAAAakcwRAIgcLIkUSPmv0dNYMW1DAQ9TGkaXSQ18Jo0p2YqncJReQoCIAEynKnazygL3zB0DsA5BCJCLIHLRYOUV663b8Eu3ZWzASECZX0RjTNXuOD0ws1G23s59tnDjZpwq8ubLeXcjb/kzjH+////AtPf9QUAAAAAGXapFNDFmQPFusKGh2DpD9UhpGZap2UgiKwA4fUFAAAAABepFDVF5uM7gyxHBQ8k0+65PJwDlIvHh7MuEwAAAQEgAOH1BQAAAAAXqRQ1RebjO4MsRwUPJNPuuTycA5SLx4cBBBYAFIXRNTfy4mVAWjTbr6nj3aAfuCMIACICAurVlmh8qAYEPtw94RbN8p1eklfBls0FXPaYyNAr8k6ZELSmumcAAACAAAAAgAIAAIAAIgIDlPYr6d8ZlSxVh3aK63aYBhrSxKJciU9H2MFitNchPQUQtKa6ZwAAAIABAACAAgAAgAA=\",\n-        \"cHNidP8BAFUCAAAAASeaIyOl37UfxF8iD6WLD8E+HjNCeSqF1+Ns1jM7XLw5AAAAAAD/////AaBa6gsAAAAAGXapFP/pwAYQl8w7Y28ssEYPpPxCfStFiKwAAAAAAAEBIJVe6gsAAAAAF6kUY0UgD2jRieGtwN8cTRbqjxTA2+uHIgIDsTQcy6doO2r08SOM1ul+cWfVafrEfx5I1HVBhENVvUZGMEMCIAQktY7/qqaU4VWepck7v9SokGQiQFXN8HC2dxRpRC0HAh9cjrD+plFtYLisszrWTt5g6Hhb+zqpS5m9+GFR25qaAQEEIgAgdx/RitRZZm3Unz1WTj28QvTIR3TjYK2haBao7UiNVoEBBUdSIQOxNBzLp2g7avTxI4zW6X5xZ9Vp+sR/HkjUdUGEQ1W9RiED3lXR4drIBeP4pYwfv5uUwC89uq/hJ/78pJlfJvggg71SriIGA7E0HMunaDtq9PEjjNbpfnFn1Wn6xH8eSNR1QYRDVb1GELSmumcAAACAAAAAgAQAAIAiBgPeVdHh2sgF4/iljB+/m5TALz26r+En/vykmV8m+CCDvRC0prpnAAAAgAAAAIAFAACAAAA=\"\n+        \"cHNidP8BAFUCAAAAASeaIyOl37UfxF8iD6WLD8E+HjNCeSqF1+Ns1jM7XLw5AAAAAAD/////AaBa6gsAAAAAGXapFP/pwAYQl8w7Y28ssEYPpPxCfStFiKwAAAAAAAEBIJVe6gsAAAAAF6kUY0UgD2jRieGtwN8cTRbqjxTA2+uHIgIDsTQcy6doO2r08SOM1ul+cWfVafrEfx5I1HVBhENVvUZGMEMCIAQktY7/qqaU4VWepck7v9SokGQiQFXN8HC2dxRpRC0HAh9cjrD+plFtYLisszrWTt5g6Hhb+zqpS5m9+GFR25qaAQEEIgAgdx/RitRZZm3Unz1WTj28QvTIR3TjYK2haBao7UiNVoEBBUdSIQOxNBzLp2g7avTxI4zW6X5xZ9Vp+sR/HkjUdUGEQ1W9RiED3lXR4drIBeP4pYwfv5uUwC89uq/hJ/78pJlfJvggg71SriIGA7E0HMunaDtq9PEjjNbpfnFn1Wn6xH8eSNR1QYRDVb1GELSmumcAAACAAAAAgAQAAIAiBgPeVdHh2sgF4/iljB+/m5TALz26r+En/vykmV8m+CCDvRC0prpnAAAAgAAAAIAFAACAAAA=\",\n+        \"cHNidP8BACoCAAAAAAFAQg8AAAAAABepFG6Rty1Vk+fUOR4v9E6R6YXDFkHwhwAAAAAAAA==\"\n     ],\n     \"creator\" : [\n         {"
      }
    ]
  },
  {
    "sha": "517010e30e4ac52868fcfd537b644515f3081f88",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MTcwMTBlMzBlNGFjNTI4NjhmY2ZkNTM3YjY0NDUxNWYzMDgxZjg4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-08-13T22:00:06Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-08-15T01:59:58Z"
      },
      "message": "Serialize non-witness utxo as a non-witness tx but always deserialize as witness\n\nStrip out the witnesses when serializing the non-witness utxo. However\nwitness serializations are allowed, so make sure we always deserialize\nas witness.\n\nGitHub-Pull: #13960\nRebased-From: bd19cc7",
      "tree": {
        "sha": "b7b378d36b2fcb5844b9c5309ca375019b416160",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b7b378d36b2fcb5844b9c5309ca375019b416160"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/517010e30e4ac52868fcfd537b644515f3081f88",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJHBAABCAAxFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAltziSwTHGZhbnF1YWtl\nQGdtYWlsLmNvbQAKCRAu659cwJUmweyRD/4+uhXnexJh342bGEYFKOKAYWYTHkbr\nrA6gGlyYGgOLXhCRNyqk1qYVioHA8tuXATf098WGFTDuaPjXUSfjouH2MhEFyUhN\nsjtAu3BxOp4CSNQVNuJyJZvqUupUboyPc4ti24yGZGXdB1neB8GSynEsuLk8rOxg\nLvF2KTYG7xo6VOxj6GUU7k+DvZ9uqND+kdFY6rNDRugfo+3B4yUzhYhAPNe6gOlF\nXyAxOef3o7AcUBWhZWwOZQjL3+nmxTvUZGYJ33DEspW4CdKH168CRUdaRhuC31X9\n966/W2kDPU5Dz0Ss9xQoaXRuh6MdXQCrr9mRJbVH5bvtCiR9QxGJKTAf0Ek+QAXb\nnC4i2OQSP1JjA2k7y95aGSzU4VwRK8h4uDLS0xNhc0eorQSsbRhywYfijfxO18rs\ny6QmD7ERr5qlqO0wL5+VHfIa+It3Pz8WskD8HOt4oKmSiXq8DKmj/+NbrCYXVX/O\nSaLtKilQPWzWC7A4znRz/PwbrlvWCHA3v+XPqbbMHM5wcPSUUpp1bHBg2QPvJVfF\nkFoFesCCsqGD7/+xtRz7gOYtELV9hXe/HWVKUj1xTuatOFYkOq2uegdOj4wKcpav\nLHp9sQI0TpXbYFZvt2SuciLaDvvqMyvZHqvT5O76ztF98hOwOg2Gg5msV7ArScfA\nsVqmcZY7T9yyqw==\n=Qulb\n-----END PGP SIGNATURE-----",
        "payload": "tree b7b378d36b2fcb5844b9c5309ca375019b416160\nparent 8c4cd2bd895fe7467307867fefc3cd45a685367c\nauthor Andrew Chow <achow101-github@achow101.com> 1534197606 -0700\ncommitter fanquake <fanquake@gmail.com> 1534298398 +0800\n\nSerialize non-witness utxo as a non-witness tx but always deserialize as witness\n\nStrip out the witnesses when serializing the non-witness utxo. However\nwitness serializations are allowed, so make sure we always deserialize\nas witness.\n\nGitHub-Pull: #13960\nRebased-From: bd19cc7\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/517010e30e4ac52868fcfd537b644515f3081f88",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/517010e30e4ac52868fcfd537b644515f3081f88",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/517010e30e4ac52868fcfd537b644515f3081f88/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8c4cd2bd895fe7467307867fefc3cd45a685367c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c4cd2bd895fe7467307867fefc3cd45a685367c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8c4cd2bd895fe7467307867fefc3cd45a685367c"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 7,
      "deletions": 2
    },
    "files": [
      {
        "sha": "80fda617e9d0002f92195ef051794b2b0efddff8",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/517010e30e4ac52868fcfd537b644515f3081f88/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/517010e30e4ac52868fcfd537b644515f3081f88/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=517010e30e4ac52868fcfd537b644515f3081f88",
        "patch": "@@ -223,7 +223,8 @@ struct PSBTInput\n         // If there is a non-witness utxo, then don't add the witness one.\n         if (non_witness_utxo) {\n             SerializeToVector(s, PSBT_IN_NON_WITNESS_UTXO);\n-            SerializeToVector(s, non_witness_utxo);\n+            OverrideStream<Stream> os(&s, s.GetType(), s.GetVersion() | SERIALIZE_TRANSACTION_NO_WITNESS);\n+            SerializeToVector(os, non_witness_utxo);\n         } else if (!witness_utxo.IsNull()) {\n             SerializeToVector(s, PSBT_IN_WITNESS_UTXO);\n             SerializeToVector(s, witness_utxo);\n@@ -297,13 +298,17 @@ struct PSBTInput\n             // Do stuff based on type\n             switch(type) {\n                 case PSBT_IN_NON_WITNESS_UTXO:\n+                {\n                     if (non_witness_utxo) {\n                         throw std::ios_base::failure(\"Duplicate Key, input non-witness utxo already provided\");\n                     } else if (key.size() != 1) {\n                         throw std::ios_base::failure(\"Non-witness utxo key is more than one byte type\");\n                     }\n-                    UnserializeFromVector(s, non_witness_utxo);\n+                    // Set the stream to unserialize with witness since this is always a valid network transaction\n+                    OverrideStream<Stream> os(&s, s.GetType(), s.GetVersion() & ~SERIALIZE_TRANSACTION_NO_WITNESS);\n+                    UnserializeFromVector(os, non_witness_utxo);\n                     break;\n+                }\n                 case PSBT_IN_WITNESS_UTXO:\n                     if (!witness_utxo.IsNull()) {\n                         throw std::ios_base::failure(\"Duplicate Key, input witness utxo already provided\");"
      }
    ]
  },
  {
    "sha": "ad6d845ac9d43aac663fa46912b49aaf837a1a9e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZDZkODQ1YWM5ZDQzYWFjNjYzZmE0NjkxMmI0OWFhZjgzN2ExYTll",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-08-08T21:18:55Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-08-15T02:00:13Z"
      },
      "message": "Additional sanity checks in SignPSBTInput\n\nGitHub-Pull: #13917\nRebased-From: 8254e99",
      "tree": {
        "sha": "43b86015049ff67a116b393fa26ac3d01e857951",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/43b86015049ff67a116b393fa26ac3d01e857951"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ad6d845ac9d43aac663fa46912b49aaf837a1a9e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJHBAABCAAxFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAltziV0THGZhbnF1YWtl\nQGdtYWlsLmNvbQAKCRAu659cwJUmwXgOEACJmihWdnYliOYzrjDKrBPNYbGmbw1q\nUQF/JyAcbneCQ3Ge43jfGU8EnTE5EVFgOqkJqejLIfXbIzDv8iUrTAuXOBq8tN7X\nQEePvQgdaY0pSAOR5qX3qilByin8Yxpql+N80ubfxFDL28YD622tBOgG8SMdlfch\nHWHX2qxMz4nGaBB+5QlXNXNaYUzgrqA5i0UoREquQl+0QWNHjCbMBSc6WdnWMUdC\nsZ4QOA8+qKFbUdVjnIar3AhS2KCHRVY5yWOT7/8lTiHaOonPST1jGgFCp8sLVeq6\nYCHHoL6phELRDIlyq0F1WHAeyrRr6PBA7z1pT10NZwlWcVkxVhkvkVTp0GWmaypE\n7ln3HwsYP7L9jgBVtQLdQyC1dPioOiWtV7eyCTc/yqmdnCe0mhN2CYPGCQRlo5EM\nLSBVA5cXTYbnQuOuGZVRJZFn23daLcEHO9m/SFXqkL03FajQd9d1T9a6CT2UwPlB\nn8394iivcQ2ZkzQT3apaZ3/fDVY6ppukGDhaEuDLp3LQ18rzhSXcvjkW19d6WCkf\nWtP8tDX7sPFS59BkWMzRt9+z2j93nUUKN+fu6+FiIqNMS4285KF47Yo7CJrW2kdn\no8BNU9i1g5xS/Y3dAbdWgoHau3zl1vwDXl7NC+AGh3RT8JSaRx2IAnPIs8+Nclcq\nxZ50Psq1DYAGHA==\n=EwlP\n-----END PGP SIGNATURE-----",
        "payload": "tree 43b86015049ff67a116b393fa26ac3d01e857951\nparent 517010e30e4ac52868fcfd537b644515f3081f88\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1533763135 -0700\ncommitter fanquake <fanquake@gmail.com> 1534298413 +0800\n\nAdditional sanity checks in SignPSBTInput\n\nGitHub-Pull: #13917\nRebased-From: 8254e99\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad6d845ac9d43aac663fa46912b49aaf837a1a9e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ad6d845ac9d43aac663fa46912b49aaf837a1a9e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad6d845ac9d43aac663fa46912b49aaf837a1a9e/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "517010e30e4ac52868fcfd537b644515f3081f88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/517010e30e4ac52868fcfd537b644515f3081f88",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/517010e30e4ac52868fcfd537b644515f3081f88"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 17,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1ab5051ff70bb6a44acb2e60af16a677c555bd46",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad6d845ac9d43aac663fa46912b49aaf837a1a9e/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad6d845ac9d43aac663fa46912b49aaf837a1a9e/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=ad6d845ac9d43aac663fa46912b49aaf837a1a9e",
        "patch": "@@ -244,17 +244,33 @@ bool SignPSBTInput(const SigningProvider& provider, const CMutableTransaction& t\n     input.FillSignatureData(sigdata);\n \n     // Get UTXO\n+    bool require_witness_sig = false;\n     CTxOut utxo;\n     if (input.non_witness_utxo) {\n+        // If we're taking our information from a non-witness UTXO, verify that it matches the prevout.\n+        if (input.non_witness_utxo->GetHash() != tx.vin[index].prevout.hash) return false;\n+        // If both witness and non-witness UTXO are provided, verify that they match. This check shouldn't\n+        // matter, as the PSBT deserializer enforces only one of both is provided, and the only way both\n+        // can be present is when they're added simultaneously by FillPSBT (in which case they always match).\n+        // Still, check in order to not rely on callers to enforce this.\n+        if (!input.witness_utxo.IsNull() && input.non_witness_utxo->vout[tx.vin[index].prevout.n] != input.witness_utxo) return false;\n         utxo = input.non_witness_utxo->vout[tx.vin[index].prevout.n];\n     } else if (!input.witness_utxo.IsNull()) {\n         utxo = input.witness_utxo;\n+        // When we're taking our information from a witness UTXO, we can't verify it is actually data from\n+        // the output being spent. This is safe in case a witness signature is produced (which includes this\n+        // information directly in the hash), but not for non-witness signatures. Remember that we require\n+        // a witness signature in this situation.\n+        require_witness_sig = true;\n     } else {\n         return false;\n     }\n \n     MutableTransactionSignatureCreator creator(&tx, index, utxo.nValue, sighash);\n+    sigdata.witness = false;\n     bool sig_complete = ProduceSignature(provider, creator, utxo.scriptPubKey, sigdata);\n+    // Verify that a witness signature was produced in case one was required.\n+    if (require_witness_sig && !sigdata.witness) return false;\n     input.FromSignatureData(sigdata);\n     return sig_complete;\n }"
      },
      {
        "sha": "7ade715ee292a2b04ad8da32483ef682789f1622",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad6d845ac9d43aac663fa46912b49aaf837a1a9e/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad6d845ac9d43aac663fa46912b49aaf837a1a9e/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=ad6d845ac9d43aac663fa46912b49aaf837a1a9e",
        "patch": "@@ -686,7 +686,7 @@ bool ProduceSignature(const SigningProvider& provider, const BaseSignatureCreato\n bool SignSignature(const SigningProvider &provider, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, const CAmount& amount, int nHashType);\n bool SignSignature(const SigningProvider &provider, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType);\n \n-/** Signs a PSBTInput */\n+/** Signs a PSBTInput, verifying that all provided data matches what is being signed. */\n bool SignPSBTInput(const SigningProvider& provider, const CMutableTransaction& tx, PSBTInput& input, SignatureData& sigdata, int index, int sighash = 1);\n \n /** Extract signature data from a transaction input, and insert it. */"
      }
    ]
  },
  {
    "sha": "dbaadc9ea92fd0e221c60584a5d1ca871fdd9c66",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYmFhZGM5ZWE5MmZkMGUyMjFjNjA1ODRhNWQxY2E4NzFmZGQ5YzY2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-08-08T21:27:20Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-08-15T02:01:01Z"
      },
      "message": "Only wipe wrong UTXO type data if overwritten by wallet\n\nGitHub-Pull: #13917\nRebased-From: c05712c",
      "tree": {
        "sha": "786da17e2210b98b63198b3540e3e4dde9c71a0f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/786da17e2210b98b63198b3540e3e4dde9c71a0f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dbaadc9ea92fd0e221c60584a5d1ca871fdd9c66",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJHBAABCAAxFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAltziW4THGZhbnF1YWtl\nQGdtYWlsLmNvbQAKCRAu659cwJUmwX7uD/9djZjHCp40V6D6MYoBEGCtILJE7YnR\n9f3hDzpuQNes1mjSbYZltCA04bmFceNgRHBGEV6kVLNICqXs5r6L/RJTj9ZJurNv\neOAELJpgzQeY9d3xRZP7BthN91Q55UtCwykE0jl9hogxQLkwtHyoNYAz1FMCVrI4\nFvsG4EoYXicBHYwXo1FRraU+sere22KnSqrzdXPeY8whI3rhDPFBYGPnRZk8mTsF\noiaRNdznUqpsog1shKqFGq5qklq91/6LQUbwscePZnw4p3SzuOFcWPkMARofmArz\nfb68PtZkj5jY3DQcEAFwJ+Rp5FBHH7R4y8B6w5EQnp5txRKD0g0K9LkBDkH96EEU\nM/sG+yP33YaOh611VNIbln+FXIGwhkKNuI+aubIu8Hee9GHNur8uhIM8Ohki6xuI\ng/0iq6c4JLy17XM90ewJ1YWKcatGH3Qt/MZpejlvbbEL3TBEHeZSWIcEi5ZQF9lE\ntn6b3EMdoy2q8QimM+ETh8e/LUUVUjjaMRqHb4zC0BO+DJhmpJMSReSrBs7HQF0g\nqYreywkMN3sLXxHMvYcfAFw7sIRLtSkamPMMs/YG/Haowz+elV5eEaaXbm2fCeTo\nSh0Q1vh9DYmkzRaZGAHeKCZ+38GVtqQT1ZTk1Nc9LJZmMkoskm6IMKbZ2vo52ME+\n1uYyOk/VGd4OuQ==\n=g+nm\n-----END PGP SIGNATURE-----",
        "payload": "tree 786da17e2210b98b63198b3540e3e4dde9c71a0f\nparent ad6d845ac9d43aac663fa46912b49aaf837a1a9e\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1533763640 -0700\ncommitter fanquake <fanquake@gmail.com> 1534298461 +0800\n\nOnly wipe wrong UTXO type data if overwritten by wallet\n\nGitHub-Pull: #13917\nRebased-From: c05712c\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbaadc9ea92fd0e221c60584a5d1ca871fdd9c66",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dbaadc9ea92fd0e221c60584a5d1ca871fdd9c66",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbaadc9ea92fd0e221c60584a5d1ca871fdd9c66/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ad6d845ac9d43aac663fa46912b49aaf837a1a9e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad6d845ac9d43aac663fa46912b49aaf837a1a9e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ad6d845ac9d43aac663fa46912b49aaf837a1a9e"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 9,
      "deletions": 6
    },
    "files": [
      {
        "sha": "92e6931645a65da396771fbe2fb48d25cd5073e8",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbaadc9ea92fd0e221c60584a5d1ca871fdd9c66/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbaadc9ea92fd0e221c60584a5d1ca871fdd9c66/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=dbaadc9ea92fd0e221c60584a5d1ca871fdd9c66",
        "patch": "@@ -4504,10 +4504,11 @@ bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, const C\n \n         // If we don't know about this input, skip it and let someone else deal with it\n         const uint256& txhash = txin.prevout.hash;\n-        const auto& it = pwallet->mapWallet.find(txhash);\n+        const auto it = pwallet->mapWallet.find(txhash);\n         if (it != pwallet->mapWallet.end()) {\n             const CWalletTx& wtx = it->second;\n             CTxOut utxo = wtx.tx->vout[txin.prevout.n];\n+            // Update both UTXOs from the wallet.\n             input.non_witness_utxo = wtx.tx;\n             input.witness_utxo = utxo;\n         }\n@@ -4524,11 +4525,13 @@ bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, const C\n             complete &= SignPSBTInput(PublicOnlySigningProvider(pwallet), *psbtx.tx, input, sigdata, i, sighash_type);\n         }\n \n-        // Drop the unnecessary UTXO\n-        if (sigdata.witness) {\n-            input.non_witness_utxo = nullptr;\n-        } else {\n-            input.witness_utxo.SetNull();\n+        if (it != pwallet->mapWallet.end()) {\n+            // Drop the unnecessary UTXO if we added both from the wallet.\n+            if (sigdata.witness) {\n+                input.non_witness_utxo = nullptr;\n+            } else {\n+                input.witness_utxo.SetNull();\n+            }\n         }\n \n         // Get public key paths"
      }
    ]
  },
  {
    "sha": "8935869487ffe858534d73c4929a4ee3d96ca6ac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OTM1ODY5NDg3ZmZlODU4NTM0ZDczYzQ5MjlhNGVlM2Q5NmNhNmFj",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-08-08T21:14:12Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-08-15T02:01:18Z"
      },
      "message": "Test that a non-witness script as witness utxo is not signed\n\nGitHub-Pull: #13917\nRebased-From: 7c8bffd",
      "tree": {
        "sha": "7a8ceec33e6a6db3c8a35e708c5d7fe62a28219e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7a8ceec33e6a6db3c8a35e708c5d7fe62a28219e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8935869487ffe858534d73c4929a4ee3d96ca6ac",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJHBAABCAAxFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAltziXwTHGZhbnF1YWtl\nQGdtYWlsLmNvbQAKCRAu659cwJUmwTTYEACsPnGsjohteEv8Rn//r1hfJtr3LqCF\npvKpIU/fpIIZO3NItNmGfrVxjpo5z7r1ORq6ExrTcRTcTV/a38tN35UhNaFa0Uj/\n6KcLmOe+XaCGuWMGI9xUB6vj3aDuoaoTtEs6qn3nYu2wF+E8XgoR/1AKV+XrsVR0\n3bEgZ6S42OMN5j0K4gqOKKOSqGLlEFsxC7EjtOf0r0oUUoAbBp9lB/DfmT1nUCjl\np0UoS9IFoJrWEm4IEiFf4/W+RNiyfmIKvyPkV6qBUAdT63DquW897C80+sjT+WKh\n7HAPEjpPVasulXdG+CVfX/hwYlkKXvHp5avbdXszCglWmj7USAbtTwANCjcO/ah5\nVzNAlv8BPFOpEMxP+FqQHuEjah2htS71OchR4JgIK+hzklgFhUkhqNaQQ82nHoJv\npl3Jc7HgwhMzaleVpyfpoLw5O1/PpkfFLJpSPRpngFoDnNqgO+W2LZg+sqi1N0na\nCHJ5o7QL1u49WjJ3leNYwLj/ZGhfx2jEcqfsq/TXh/HpE+LCKgZNSOdzJrE9t6UR\nB+X6vLii2Yt7oav1+0ZHnyJ9DHwyWDYdanAm0uZzeYlB3Lm3d+Kxw/oHG2Ns6biO\niyNGRjd9qtS7Pbfzpv2VLEAz9dZCFUsFrfCL7JxfbG6ZTutDKoYvnapuH70mgtMW\nRswvmrF2EP3bCA==\n=XzZ1\n-----END PGP SIGNATURE-----",
        "payload": "tree 7a8ceec33e6a6db3c8a35e708c5d7fe62a28219e\nparent dbaadc9ea92fd0e221c60584a5d1ca871fdd9c66\nauthor Andrew Chow <achow101-github@achow101.com> 1533762852 -0700\ncommitter fanquake <fanquake@gmail.com> 1534298478 +0800\n\nTest that a non-witness script as witness utxo is not signed\n\nGitHub-Pull: #13917\nRebased-From: 7c8bffd\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8935869487ffe858534d73c4929a4ee3d96ca6ac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8935869487ffe858534d73c4929a4ee3d96ca6ac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8935869487ffe858534d73c4929a4ee3d96ca6ac/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dbaadc9ea92fd0e221c60584a5d1ca871fdd9c66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbaadc9ea92fd0e221c60584a5d1ca871fdd9c66",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dbaadc9ea92fd0e221c60584a5d1ca871fdd9c66"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 25,
      "deletions": 2
    },
    "files": [
      {
        "sha": "7093af66d75c511292a5f6d1307d5821eca15458",
        "filename": "test/functional/data/rpc_psbt.json",
        "status": "modified",
        "additions": 25,
        "deletions": 2,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8935869487ffe858534d73c4929a4ee3d96ca6ac/test/functional/data/rpc_psbt.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8935869487ffe858534d73c4929a4ee3d96ca6ac/test/functional/data/rpc_psbt.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/rpc_psbt.json?ref=8935869487ffe858534d73c4929a4ee3d96ca6ac",
        "patch": "@@ -58,15 +58,38 @@\n             ],\n             \"psbt\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAABBEdSIQKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfyEC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtdSriIGApWDvzmuCmCXR60Zmt3WNPphCFWdbFzTm0whg/GrluB/ENkMak8AAACAAAAAgAAAAIAiBgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU21xDZDGpPAAAAgAAAAIABAACAAQMEAQAAAAABASAAwusLAAAAABepFLf1+vQOPUClpFmx2zU18rcvqSHohwEEIgAgjCNTFzdDtZXftKB7crqOQuN5fadOh/59nXSX47ICiQMBBUdSIQMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3CECOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNSriIGAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zENkMak8AAACAAAAAgAMAAIAiBgMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3BDZDGpPAAAAgAAAAIACAACAAQMEAQAAAAAiAgOppMN/WZbTqiXbrGtXCvBlA5RJKUJGCzVHU+2e7KWHcRDZDGpPAAAAgAAAAIAEAACAACICAn9jmXV9Lv9VoTatAsaEsYOLZVbl8bazQoKpS2tQBRCWENkMak8AAACAAAAAgAUAAIAA\",\n             \"result\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgf0cwRAIgdAGK1BgAl7hzMjwAFXILNoTMgSOJEEjn282bVa1nnJkCIHPTabdA4+tT3O+jOCPIBwUUylWn3ZVE8VfBZ5EyYRGMAQEDBAEAAAABBEdSIQKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfyEC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtdSriIGApWDvzmuCmCXR60Zmt3WNPphCFWdbFzTm0whg/GrluB/ENkMak8AAACAAAAAgAAAAIAiBgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU21xDZDGpPAAAAgAAAAIABAACAAAEBIADC6wsAAAAAF6kUt/X69A49QKWkWbHbNTXyty+pIeiHIgIDCJ3BDHrG21T5EymvYXMz2ziM6tDCMfcjN50bmQMLAtxHMEQCIGLrelVhB6fHP0WsSrWh3d9vcHX7EnWWmn84Pv/3hLyyAiAMBdu3Rw2/LwhVfdNWxzJcHtMJE+mWzThAlF2xIijaXwEBAwQBAAAAAQQiACCMI1MXN0O1ld+0oHtyuo5C43l9p06H/n2ddJfjsgKJAwEFR1IhAwidwQx6xttU+RMpr2FzM9s4jOrQwjH3IzedG5kDCwLcIQI63ZBPPW3PWd25BrDe4jUpt/+57VDl6GFRkmhgIh8Oc1KuIgYCOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnMQ2QxqTwAAAIAAAACAAwAAgCIGAwidwQx6xttU+RMpr2FzM9s4jOrQwjH3IzedG5kDCwLcENkMak8AAACAAAAAgAIAAIAAIgIDqaTDf1mW06ol26xrVwrwZQOUSSlCRgs1R1Ptnuylh3EQ2QxqTwAAAIAAAACABAAAgAAiAgJ/Y5l1fS7/VaE2rQLGhLGDi2VW5fG2s0KCqUtrUAUQlhDZDGpPAAAAgAAAAIAFAACAAA==\"\n+        },\n+        {\n+            \"privkeys\" : [\n+                \"cT7J9YpCwY3AVRFSjN6ukeEeWY6mhpbJPxRaDaP5QTdygQRxP9Au\",\n+                \"cNBc3SWUip9PPm1GjRoLEJT6T41iNzCYtD7qro84FMnM5zEqeJsE\"\n+            ],\n+            \"psbt\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAABBEdSIQKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfyEC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtdSriIGApWDvzmuCmCXR60Zmt3WNPphCFWdbFzTm0whg/GrluB/ENkMak8AAACAAAAAgAAAAIAiBgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU21xDZDGpPAAAAgAAAAIABAACAAQMEAQAAAAABASAAwusLAAAAABepFLf1+vQOPUClpFmx2zU18rcvqSHohwEEIgAgjCNTFzdDtZXftKB7crqOQuN5fadOh/59nXSX47ICiQMBBUdSIQMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3CECOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNSriIGAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zENkMak8AAACAAAAAgAMAAIAiBgMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3BDZDGpPAAAAgAAAAIACAACAAQMEAQAAAAAiAgOppMN/WZbTqiXbrGtXCvBlA5RJKUJGCzVHU+2e7KWHcRDZDGpPAAAAgAAAAIAEAACAACICAn9jmXV9Lv9VoTatAsaEsYOLZVbl8bazQoKpS2tQBRCWENkMak8AAACAAAAAgAUAAIAA\",\n+            \"result\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU210cwRAIgYxqYn+c4qSrQGYYCMxLBkhT+KAKznly8GsNniAbGksMCIDnbbDh70mdxbf2z1NjaULjoXSEzJrp8faqkwM5B65IjAQEDBAEAAAABBEdSIQKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfyEC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtdSriIGApWDvzmuCmCXR60Zmt3WNPphCFWdbFzTm0whg/GrluB/ENkMak8AAACAAAAAgAAAAIAiBgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU21xDZDGpPAAAAgAAAAIABAACAAAEBIADC6wsAAAAAF6kUt/X69A49QKWkWbHbNTXyty+pIeiHIgICOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNHMEQCIGX0W6WZi1mif/4ae+0BavHx+Q1Us6qPdFCqX1aiUQO9AiB/ckcDrR7blmgLKEtW1P/LiPf7dZ6rvgiqMPKbhROD0gEBAwQBAAAAAQQiACCMI1MXN0O1ld+0oHtyuo5C43l9p06H/n2ddJfjsgKJAwEFR1IhAwidwQx6xttU+RMpr2FzM9s4jOrQwjH3IzedG5kDCwLcIQI63ZBPPW3PWd25BrDe4jUpt/+57VDl6GFRkmhgIh8Oc1KuIgYCOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnMQ2QxqTwAAAIAAAACAAwAAgCIGAwidwQx6xttU+RMpr2FzM9s4jOrQwjH3IzedG5kDCwLcENkMak8AAACAAAAAgAIAAIAAIgIDqaTDf1mW06ol26xrVwrwZQOUSSlCRgs1R1Ptnuylh3EQ2QxqTwAAAIAAAACABAAAgAAiAgJ/Y5l1fS7/VaE2rQLGhLGDi2VW5fG2s0KCqUtrUAUQlhDZDGpPAAAAgAAAAIAFAACAAA==\"\n+        },\n+        {\n+            \"privkeys\" : [\n+                \"cT7J9YpCwY3AVRFSjN6ukeEeWY6mhpbJPxRaDaP5QTdygQRxP9Au\",\n+                \"cNBc3SWUip9PPm1GjRoLEJT6T41iNzCYtD7qro84FMnM5zEqeJsE\"\n+            ],\n+            \"psbt\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAABBEdSIQKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfyEC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtdSriIGApWDvzmuCmCXR60Zmt3WNPphCFWdbFzTm0whg/GrluB/ENkMak8AAACAAAAAgAAAAIAiBgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU21xDZDGpPAAAAgAAAAIABAACAAQMEAQAAAAABASAAwusLAAAAABepFLf1+vQOPUClpFmx2zU18rcvqSHohwEEIgAgjCNTFzdDtZXftKB7crqOQuN5fadOh/59nXSX47ICiQMBBUdSIQMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3CECOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNSriIGAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zENkMak8AAACAAAAAgAMAAIAiBgMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3BDZDGpPAAAAgAAAAIACAACAAQMEAQAAAAAiAgOppMN/WZbTqiXbrGtXCvBlA5RJKUJGCzVHU+2e7KWHcRDZDGpPAAAAgAAAAIAEAACAACICAn9jmXV9Lv9VoTatAsaEsYOLZVbl8bazQoKpS2tQBRCWENkMak8AAACAAAAAgAUAAIAA\",\n+            \"result\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU210cwRAIgYxqYn+c4qSrQGYYCMxLBkhT+KAKznly8GsNniAbGksMCIDnbbDh70mdxbf2z1NjaULjoXSEzJrp8faqkwM5B65IjAQEDBAEAAAABBEdSIQKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfyEC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtdSriIGApWDvzmuCmCXR60Zmt3WNPphCFWdbFzTm0whg/GrluB/ENkMak8AAACAAAAAgAAAAIAiBgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU21xDZDGpPAAAAgAAAAIABAACAAAEBIADC6wsAAAAAF6kUt/X69A49QKWkWbHbNTXyty+pIeiHIgICOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNHMEQCIGX0W6WZi1mif/4ae+0BavHx+Q1Us6qPdFCqX1aiUQO9AiB/ckcDrR7blmgLKEtW1P/LiPf7dZ6rvgiqMPKbhROD0gEBAwQBAAAAAQQiACCMI1MXN0O1ld+0oHtyuo5C43l9p06H/n2ddJfjsgKJAwEFR1IhAwidwQx6xttU+RMpr2FzM9s4jOrQwjH3IzedG5kDCwLcIQI63ZBPPW3PWd25BrDe4jUpt/+57VDl6GFRkmhgIh8Oc1KuIgYCOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnMQ2QxqTwAAAIAAAACAAwAAgCIGAwidwQx6xttU+RMpr2FzM9s4jOrQwjH3IzedG5kDCwLcENkMak8AAACAAAAAgAIAAIAAIgIDqaTDf1mW06ol26xrVwrwZQOUSSlCRgs1R1Ptnuylh3EQ2QxqTwAAAIAAAACABAAAgAAiAgJ/Y5l1fS7/VaE2rQLGhLGDi2VW5fG2s0KCqUtrUAUQlhDZDGpPAAAAgAAAAIAFAACAAA==\"\n+        },\n+        {\n+            \"privkeys\" : [\n+                \"cNBc3SWUip9PPm1GjRoLEJT6T41iNzCYtD7qro84FMnM5zEqeJsE\"\n+            ],\n+            \"psbt\" : \"cHNidP8BAKACAAAAAqsJSaCMWvfEm4IS9Bfi8Vqz9cM9zxU4IagTn4d6W3vkAAAAAAD+////qwlJoIxa98SbghL0F+LxWrP1wz3PFTghqBOfh3pbe+QBAAAAAP7///8CYDvqCwAAAAAZdqkUdopAu9dAy+gdmI5x3ipNXHE5ax2IrI4kAAAAAAAAGXapFG9GILVT+glechue4O/p+gOcykWXiKwAAAAAAAEBItPf9QUAAAAAGXapFNSO0xELlAFMsRS9Mtb00GbcdCVriKwAAQEgAOH1BQAAAAAXqRQ1RebjO4MsRwUPJNPuuTycA5SLx4cBBBYAFIXRNTfy4mVAWjTbr6nj3aAfuCMIACICAurVlmh8qAYEPtw94RbN8p1eklfBls0FXPaYyNAr8k6ZELSmumcAAACAAAAAgAIAAIAAIgIDlPYr6d8ZlSxVh3aK63aYBhrSxKJciU9H2MFitNchPQUQtKa6ZwAAAIABAACAAgAAgAA=\",\n+            \"result\" : \"cHNidP8BAKACAAAAAqsJSaCMWvfEm4IS9Bfi8Vqz9cM9zxU4IagTn4d6W3vkAAAAAAD+////qwlJoIxa98SbghL0F+LxWrP1wz3PFTghqBOfh3pbe+QBAAAAAP7///8CYDvqCwAAAAAZdqkUdopAu9dAy+gdmI5x3ipNXHE5ax2IrI4kAAAAAAAAGXapFG9GILVT+glechue4O/p+gOcykWXiKwAAAAAAAEBItPf9QUAAAAAGXapFNSO0xELlAFMsRS9Mtb00GbcdCVriKwAAQEgAOH1BQAAAAAXqRQ1RebjO4MsRwUPJNPuuTycA5SLx4cBBBYAFIXRNTfy4mVAWjTbr6nj3aAfuCMIACICAurVlmh8qAYEPtw94RbN8p1eklfBls0FXPaYyNAr8k6ZELSmumcAAACAAAAAgAIAAIAAIgIDlPYr6d8ZlSxVh3aK63aYBhrSxKJciU9H2MFitNchPQUQtKa6ZwAAAIABAACAAgAAgAA=\"\n         }\n     ],\n     \"combiner\" : [\n         {\n             \"combine\" : [\n                 \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgf0cwRAIgdAGK1BgAl7hzMjwAFXILNoTMgSOJEEjn282bVa1nnJkCIHPTabdA4+tT3O+jOCPIBwUUylWn3ZVE8VfBZ5EyYRGMAQEDBAEAAAABBEdSIQKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfyEC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtdSriIGApWDvzmuCmCXR60Zmt3WNPphCFWdbFzTm0whg/GrluB/ENkMak8AAACAAAAAgAAAAIAiBgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU21xDZDGpPAAAAgAAAAIABAACAAAEBIADC6wsAAAAAF6kUt/X69A49QKWkWbHbNTXyty+pIeiHIgIDCJ3BDHrG21T5EymvYXMz2ziM6tDCMfcjN50bmQMLAtxHMEQCIGLrelVhB6fHP0WsSrWh3d9vcHX7EnWWmn84Pv/3hLyyAiAMBdu3Rw2/LwhVfdNWxzJcHtMJE+mWzThAlF2xIijaXwEBAwQBAAAAAQQiACCMI1MXN0O1ld+0oHtyuo5C43l9p06H/n2ddJfjsgKJAwEFR1IhAwidwQx6xttU+RMpr2FzM9s4jOrQwjH3IzedG5kDCwLcIQI63ZBPPW3PWd25BrDe4jUpt/+57VDl6GFRkmhgIh8Oc1KuIgYCOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnMQ2QxqTwAAAIAAAACAAwAAgCIGAwidwQx6xttU+RMpr2FzM9s4jOrQwjH3IzedG5kDCwLcENkMak8AAACAAAAAgAIAAIAAIgIDqaTDf1mW06ol26xrVwrwZQOUSSlCRgs1R1Ptnuylh3EQ2QxqTwAAAIAAAACABAAAgAAiAgJ/Y5l1fS7/VaE2rQLGhLGDi2VW5fG2s0KCqUtrUAUQlhDZDGpPAAAAgAAAAIAFAACAAA==\",\n-                \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU210gwRQIhAPYQOLMI3B2oZaNIUnRvAVdyk0IIxtJEVDk82ZvfIhd3AiAFbmdaZ1ptCgK4WxTl4pB02KJam1dgvqKBb2YZEKAG6gEBAwQBAAAAAQRHUiEClYO/Oa4KYJdHrRma3dY0+mEIVZ1sXNObTCGD8auW4H8hAtq2H/SaFNtqfQKwzR+7ePxLGDErW05U2uTbovv+9TbXUq4iBgKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfxDZDGpPAAAAgAAAAIAAAACAIgYC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtcQ2QxqTwAAAIAAAACAAQAAgAABASAAwusLAAAAABepFLf1+vQOPUClpFmx2zU18rcvqSHohyICAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zRzBEAiBl9FulmYtZon/+GnvtAWrx8fkNVLOqj3RQql9WolEDvQIgf3JHA60e25ZoCyhLVtT/y4j3+3Weq74IqjDym4UTg9IBAQMEAQAAAAEEIgAgjCNTFzdDtZXftKB7crqOQuN5fadOh/59nXSX47ICiQMBBUdSIQMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3CECOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNSriIGAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zENkMak8AAACAAAAAgAMAAIAiBgMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3BDZDGpPAAAAgAAAAIACAACAACICA6mkw39ZltOqJdusa1cK8GUDlEkpQkYLNUdT7Z7spYdxENkMak8AAACAAAAAgAQAAIAAIgICf2OZdX0u/1WhNq0CxoSxg4tlVuXxtrNCgqlLa1AFEJYQ2QxqTwAAAIAAAACABQAAgAA=\"\n+                \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU210cwRAIgYxqYn+c4qSrQGYYCMxLBkhT+KAKznly8GsNniAbGksMCIDnbbDh70mdxbf2z1NjaULjoXSEzJrp8faqkwM5B65IjAQEDBAEAAAABBEdSIQKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfyEC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtdSriIGApWDvzmuCmCXR60Zmt3WNPphCFWdbFzTm0whg/GrluB/ENkMak8AAACAAAAAgAAAAIAiBgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU21xDZDGpPAAAAgAAAAIABAACAAAEBIADC6wsAAAAAF6kUt/X69A49QKWkWbHbNTXyty+pIeiHIgICOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNHMEQCIGX0W6WZi1mif/4ae+0BavHx+Q1Us6qPdFCqX1aiUQO9AiB/ckcDrR7blmgLKEtW1P/LiPf7dZ6rvgiqMPKbhROD0gEBAwQBAAAAAQQiACCMI1MXN0O1ld+0oHtyuo5C43l9p06H/n2ddJfjsgKJAwEFR1IhAwidwQx6xttU+RMpr2FzM9s4jOrQwjH3IzedG5kDCwLcIQI63ZBPPW3PWd25BrDe4jUpt/+57VDl6GFRkmhgIh8Oc1KuIgYCOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnMQ2QxqTwAAAIAAAACAAwAAgCIGAwidwQx6xttU+RMpr2FzM9s4jOrQwjH3IzedG5kDCwLcENkMak8AAACAAAAAgAIAAIAAIgIDqaTDf1mW06ol26xrVwrwZQOUSSlCRgs1R1Ptnuylh3EQ2QxqTwAAAIAAAACABAAAgAAiAgJ/Y5l1fS7/VaE2rQLGhLGDi2VW5fG2s0KCqUtrUAUQlhDZDGpPAAAAgAAAAIAFAACAAA==\"\n             ],\n-            \"result\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgf0cwRAIgdAGK1BgAl7hzMjwAFXILNoTMgSOJEEjn282bVa1nnJkCIHPTabdA4+tT3O+jOCPIBwUUylWn3ZVE8VfBZ5EyYRGMASICAtq2H/SaFNtqfQKwzR+7ePxLGDErW05U2uTbovv+9TbXSDBFAiEA9hA4swjcHahlo0hSdG8BV3KTQgjG0kRUOTzZm98iF3cCIAVuZ1pnWm0KArhbFOXikHTYolqbV2C+ooFvZhkQoAbqAQEDBAEAAAABBEdSIQKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfyEC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtdSriIGApWDvzmuCmCXR60Zmt3WNPphCFWdbFzTm0whg/GrluB/ENkMak8AAACAAAAAgAAAAIAiBgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU21xDZDGpPAAAAgAAAAIABAACAAAEBIADC6wsAAAAAF6kUt/X69A49QKWkWbHbNTXyty+pIeiHIgIDCJ3BDHrG21T5EymvYXMz2ziM6tDCMfcjN50bmQMLAtxHMEQCIGLrelVhB6fHP0WsSrWh3d9vcHX7EnWWmn84Pv/3hLyyAiAMBdu3Rw2/LwhVfdNWxzJcHtMJE+mWzThAlF2xIijaXwEiAgI63ZBPPW3PWd25BrDe4jUpt/+57VDl6GFRkmhgIh8Oc0cwRAIgZfRbpZmLWaJ//hp77QFq8fH5DVSzqo90UKpfVqJRA70CIH9yRwOtHtuWaAsoS1bU/8uI9/t1nqu+CKow8puFE4PSAQEDBAEAAAABBCIAIIwjUxc3Q7WV37Sge3K6jkLjeX2nTof+fZ10l+OyAokDAQVHUiEDCJ3BDHrG21T5EymvYXMz2ziM6tDCMfcjN50bmQMLAtwhAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zUq4iBgI63ZBPPW3PWd25BrDe4jUpt/+57VDl6GFRkmhgIh8OcxDZDGpPAAAAgAAAAIADAACAIgYDCJ3BDHrG21T5EymvYXMz2ziM6tDCMfcjN50bmQMLAtwQ2QxqTwAAAIAAAACAAgAAgAAiAgOppMN/WZbTqiXbrGtXCvBlA5RJKUJGCzVHU+2e7KWHcRDZDGpPAAAAgAAAAIAEAACAACICAn9jmXV9Lv9VoTatAsaEsYOLZVbl8bazQoKpS2tQBRCWENkMak8AAACAAAAAgAUAAIAA\"\n+            \"result\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgf0cwRAIgdAGK1BgAl7hzMjwAFXILNoTMgSOJEEjn282bVa1nnJkCIHPTabdA4+tT3O+jOCPIBwUUylWn3ZVE8VfBZ5EyYRGMASICAtq2H/SaFNtqfQKwzR+7ePxLGDErW05U2uTbovv+9TbXRzBEAiBjGpif5zipKtAZhgIzEsGSFP4oArOeXLwaw2eIBsaSwwIgOdtsOHvSZ3Ft/bPU2NpQuOhdITMmunx9qqTAzkHrkiMBAQMEAQAAAAEER1IhApWDvzmuCmCXR60Zmt3WNPphCFWdbFzTm0whg/GrluB/IQLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU211KuIgYClYO/Oa4KYJdHrRma3dY0+mEIVZ1sXNObTCGD8auW4H8Q2QxqTwAAAIAAAACAAAAAgCIGAtq2H/SaFNtqfQKwzR+7ePxLGDErW05U2uTbovv+9TbXENkMak8AAACAAAAAgAEAAIAAAQEgAMLrCwAAAAAXqRS39fr0Dj1ApaRZsds1NfK3L6kh6IciAgMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3EcwRAIgYut6VWEHp8c/RaxKtaHd329wdfsSdZaafzg+//eEvLICIAwF27dHDb8vCFV901bHMlwe0wkT6ZbNOECUXbEiKNpfASICAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zRzBEAiBl9FulmYtZon/+GnvtAWrx8fkNVLOqj3RQql9WolEDvQIgf3JHA60e25ZoCyhLVtT/y4j3+3Weq74IqjDym4UTg9IBAQMEAQAAAAEEIgAgjCNTFzdDtZXftKB7crqOQuN5fadOh/59nXSX47ICiQMBBUdSIQMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3CECOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNSriIGAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zENkMak8AAACAAAAAgAMAAIAiBgMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3BDZDGpPAAAAgAAAAIACAACAACICA6mkw39ZltOqJdusa1cK8GUDlEkpQkYLNUdT7Z7spYdxENkMak8AAACAAAAAgAQAAIAAIgICf2OZdX0u/1WhNq0CxoSxg4tlVuXxtrNCgqlLa1AFEJYQ2QxqTwAAAIAAAACABQAAgAA=\"\n         },\n         {\n             \"combine\" : ["
      }
    ]
  },
  {
    "sha": "0333914467466d22133e25b71ef330bb2c609958",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMzMzOTE0NDY3NDY2ZDIyMTMzZTI1YjcxZWYzMzBiYjJjNjA5OTU4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-08-08T23:14:01Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-08-15T02:01:32Z"
      },
      "message": "More tests of signer checks\n\nGitHub-Pull: #13917\nRebased-From: 5df6f08",
      "tree": {
        "sha": "ac8f348d939a1df2672253a166b437e9d3140597",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ac8f348d939a1df2672253a166b437e9d3140597"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0333914467466d22133e25b71ef330bb2c609958",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJHBAABCAAxFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAltziYYTHGZhbnF1YWtl\nQGdtYWlsLmNvbQAKCRAu659cwJUmwdKKD/wPVoRoCWpucmILUpZ2op8nWjDG13pC\nL8f/OZfp9eChIbe8KgNzlh7po2ZEOgN9Gu6GYHnT8ZLKv+aq8e2dUtL4hgNZAJ1w\nmUGtNELQKf74Qj/Ls27yZm1/QCjxlohJ8ltX09zGZhrW5VLplhjnOJzQk62UCQAW\nT+lvBfoMRpDAvx8YRze3pNmpBjiVyx4S+NF3MwFhtHS2PF04i2DCilV+2IsluREW\nVo+ONY4XaaIzR5l72ajgEe2c57gVsyMBw55CbFUMXlBuxjsqfnp+FoTAyAZgiayQ\noNeV1dwkOYkLGCZodW3V77tlzg2kuZLkmVEenWE+N1f1T6uNg5U3GvXAx5FJgcQa\n7pJznBmoIopawTWYbEO6k4OvujAi16Hw9JS/XSQib+MJXH5hKoBCliDzxZ64/6c2\nD7vVY0MMNpKGrXItpv374o4uSKrT8DOl5pjHYy7kjZVoufhmzHp2DbblA6pLJudh\nJkfOCgsK5jsPSfrX91MnF+kc28OJhj0nkuxArmKwjzbia7ihsnuHki2CZ8UId0lZ\nG22PDaktEGZCqkgVpBtwLjgcqRcEru1zfPoR0N82O86YUdD/6PzA0lc6rzuyEkBl\n7xEDxtkjrjlp8NMXLitPPlnNasg8x9Hr3gBI75uBwXi/wjeqq8Gk1+lQSP6o6CuS\nKEcFM/9avzJMRw==\n=vaNL\n-----END PGP SIGNATURE-----",
        "payload": "tree ac8f348d939a1df2672253a166b437e9d3140597\nparent 8935869487ffe858534d73c4929a4ee3d96ca6ac\nauthor Andrew Chow <achow101-github@achow101.com> 1533770041 -0700\ncommitter fanquake <fanquake@gmail.com> 1534298492 +0800\n\nMore tests of signer checks\n\nGitHub-Pull: #13917\nRebased-From: 5df6f08\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0333914467466d22133e25b71ef330bb2c609958",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0333914467466d22133e25b71ef330bb2c609958",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0333914467466d22133e25b71ef330bb2c609958/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8935869487ffe858534d73c4929a4ee3d96ca6ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8935869487ffe858534d73c4929a4ee3d96ca6ac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8935869487ffe858534d73c4929a4ee3d96ca6ac"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 28,
      "deletions": 2
    },
    "files": [
      {
        "sha": "9f970b49618df11744d1a90ebe25dbfcca6a1a2d",
        "filename": "test/functional/data/rpc_psbt.json",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0333914467466d22133e25b71ef330bb2c609958/test/functional/data/rpc_psbt.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0333914467466d22133e25b71ef330bb2c609958/test/functional/data/rpc_psbt.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/rpc_psbt.json?ref=0333914467466d22133e25b71ef330bb2c609958",
        "patch": "@@ -81,6 +81,30 @@\n             ],\n             \"psbt\" : \"cHNidP8BAKACAAAAAqsJSaCMWvfEm4IS9Bfi8Vqz9cM9zxU4IagTn4d6W3vkAAAAAAD+////qwlJoIxa98SbghL0F+LxWrP1wz3PFTghqBOfh3pbe+QBAAAAAP7///8CYDvqCwAAAAAZdqkUdopAu9dAy+gdmI5x3ipNXHE5ax2IrI4kAAAAAAAAGXapFG9GILVT+glechue4O/p+gOcykWXiKwAAAAAAAEBItPf9QUAAAAAGXapFNSO0xELlAFMsRS9Mtb00GbcdCVriKwAAQEgAOH1BQAAAAAXqRQ1RebjO4MsRwUPJNPuuTycA5SLx4cBBBYAFIXRNTfy4mVAWjTbr6nj3aAfuCMIACICAurVlmh8qAYEPtw94RbN8p1eklfBls0FXPaYyNAr8k6ZELSmumcAAACAAAAAgAIAAIAAIgIDlPYr6d8ZlSxVh3aK63aYBhrSxKJciU9H2MFitNchPQUQtKa6ZwAAAIABAACAAgAAgAA=\",\n             \"result\" : \"cHNidP8BAKACAAAAAqsJSaCMWvfEm4IS9Bfi8Vqz9cM9zxU4IagTn4d6W3vkAAAAAAD+////qwlJoIxa98SbghL0F+LxWrP1wz3PFTghqBOfh3pbe+QBAAAAAP7///8CYDvqCwAAAAAZdqkUdopAu9dAy+gdmI5x3ipNXHE5ax2IrI4kAAAAAAAAGXapFG9GILVT+glechue4O/p+gOcykWXiKwAAAAAAAEBItPf9QUAAAAAGXapFNSO0xELlAFMsRS9Mtb00GbcdCVriKwAAQEgAOH1BQAAAAAXqRQ1RebjO4MsRwUPJNPuuTycA5SLx4cBBBYAFIXRNTfy4mVAWjTbr6nj3aAfuCMIACICAurVlmh8qAYEPtw94RbN8p1eklfBls0FXPaYyNAr8k6ZELSmumcAAACAAAAAgAIAAIAAIgIDlPYr6d8ZlSxVh3aK63aYBhrSxKJciU9H2MFitNchPQUQtKa6ZwAAAIABAACAAgAAgAA=\"\n+        },\n+        {\n+            \"privkeys\" : [\n+                \"cT7J9YpCwY3AVRFSjN6ukeEeWY6mhpbJPxRaDaP5QTdygQRxP9Au\",\n+                \"cNBc3SWUip9PPm1GjRoLEJT6T41iNzCYtD7qro84FMnM5zEqeJsE\"\n+            ],\n+            \"psbt\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU210gwRQIhAPYQOLMI3B2oZaNIUnRvAVdyk0IIxtJEVDk82ZvfIhd3AiAFbmdaZ1ptCgK4WxTl4pB02KJam1dgvqKBb2YZEKAG6gEBAwQBAAAAAQRHUiEClYO/Oa4KYJdHrRma3dY0+mEIVZ1sXNObTCGD8auW4H8hAtq2H/SaFNtqfQKwzR+7ePxLGDErW05U2uTbovv+9TbXUq8iBgKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfxDZDGpPAAAAgAAAAIAAAACAIgYC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtcQ2QxqTwAAAIAAAACAAQAAgAABASAAwusLAAAAABepFLf1+vQOPUClpFmx2zU18rcvqSHohyICAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zRzBEAiBl9FulmYtZon/+GnvtAWrx8fkNVLOqj3RQql9WolEDvQIgf3JHA60e25ZoCyhLVtT/y4j3+3Weq74IqjDym4UTg9IBAQMEAQAAAAEEIgAgjCNTFzdDtZXftKB7crqOQuN5fadOh/59nXSX47ICiQMBBUdSIQMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3CECOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNSriIGAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zENkMak8AAACAAAAAgAMAAIAiBgMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3BDZDGpPAAAAgAAAAIACAACAACICA6mkw39ZltOqJdusa1cK8GUDlEkpQkYLNUdT7Z7spYdxENkMak8AAACAAAAAgAQAAIAAIgICf2OZdX0u/1WhNq0CxoSxg4tlVuXxtrNCgqlLa1AFEJYQ2QxqTwAAAIAAAACABQAAgAA=\",\n+            \"result\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU210gwRQIhAPYQOLMI3B2oZaNIUnRvAVdyk0IIxtJEVDk82ZvfIhd3AiAFbmdaZ1ptCgK4WxTl4pB02KJam1dgvqKBb2YZEKAG6gEBAwQBAAAAAQRHUiEClYO/Oa4KYJdHrRma3dY0+mEIVZ1sXNObTCGD8auW4H8hAtq2H/SaFNtqfQKwzR+7ePxLGDErW05U2uTbovv+9TbXUq8iBgKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfxDZDGpPAAAAgAAAAIAAAACAIgYC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtcQ2QxqTwAAAIAAAACAAQAAgAABASAAwusLAAAAABepFLf1+vQOPUClpFmx2zU18rcvqSHohyICAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zRzBEAiBl9FulmYtZon/+GnvtAWrx8fkNVLOqj3RQql9WolEDvQIgf3JHA60e25ZoCyhLVtT/y4j3+3Weq74IqjDym4UTg9IBAQMEAQAAAAEEIgAgjCNTFzdDtZXftKB7crqOQuN5fadOh/59nXSX47ICiQMBBUdSIQMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3CECOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNSriIGAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zENkMak8AAACAAAAAgAMAAIAiBgMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3BDZDGpPAAAAgAAAAIACAACAACICA6mkw39ZltOqJdusa1cK8GUDlEkpQkYLNUdT7Z7spYdxENkMak8AAACAAAAAgAQAAIAAIgICf2OZdX0u/1WhNq0CxoSxg4tlVuXxtrNCgqlLa1AFEJYQ2QxqTwAAAIAAAACABQAAgAA=\"\n+        },\n+        {\n+            \"privkeys\" : [\n+                \"cT7J9YpCwY3AVRFSjN6ukeEeWY6mhpbJPxRaDaP5QTdygQRxP9Au\",\n+                \"cNBc3SWUip9PPm1GjRoLEJT6T41iNzCYtD7qro84FMnM5zEqeJsE\"\n+            ],\n+            \"psbt\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU210gwRQIhAPYQOLMI3B2oZaNIUnRvAVdyk0IIxtJEVDk82ZvfIhd3AiAFbmdaZ1ptCgK4WxTl4pB02KJam1dgvqKBb2YZEKAG6gEBAwQBAAAAAQRHUiEClYO/Oa4KYJdHrRma3dY0+mEIVZ1sXNObTCGD8auW4H8hAtq2H/SaFNtqfQKwzR+7ePxLGDErW05U2uTbovv+9TbXUq4iBgKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfxDZDGpPAAAAgAAAAIAAAACAIgYC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtcQ2QxqTwAAAIAAAACAAQAAgAABASAAwusLAAAAABepFLf1+vQOPUClpFmx2zU18rcvqSHohyICAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zRzBEAiBl9FulmYtZon/+GnvtAWrx8fkNVLOqj3RQql9WolEDvQIgf3JHA60e25ZoCyhLVtT/y4j3+3Weq74IqjDym4UTg9IBAQMEAQAAAAEEIgAgjCNTFzdDtZXftKB7crqOQuN5fadOh/59nXSX47ICiQABBUdSIQMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3CECOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNSriIGAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zENkMak8AAACAAAAAgAMAAIAiBgMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3BDZDGpPAAAAgAAAAIACAACAACICA6mkw39ZltOqJdusa1cK8GUDlEkpQkYLNUdT7Z7spYdxENkMak8AAACAAAAAgAQAAIAAIgICf2OZdX0u/1WhNq0CxoSxg4tlVuXxtrNCgqlLa1AFEJYQ2QxqTwAAAIAAAACABQAAgAA=\",\n+            \"result\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU210gwRQIhAPYQOLMI3B2oZaNIUnRvAVdyk0IIxtJEVDk82ZvfIhd3AiAFbmdaZ1ptCgK4WxTl4pB02KJam1dgvqKBb2YZEKAG6gEBAwQBAAAAAQRHUiEClYO/Oa4KYJdHrRma3dY0+mEIVZ1sXNObTCGD8auW4H8hAtq2H/SaFNtqfQKwzR+7ePxLGDErW05U2uTbovv+9TbXUq4iBgKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfxDZDGpPAAAAgAAAAIAAAACAIgYC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtcQ2QxqTwAAAIAAAACAAQAAgAABASAAwusLAAAAABepFLf1+vQOPUClpFmx2zU18rcvqSHohyICAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zRzBEAiBl9FulmYtZon/+GnvtAWrx8fkNVLOqj3RQql9WolEDvQIgf3JHA60e25ZoCyhLVtT/y4j3+3Weq74IqjDym4UTg9IBAQMEAQAAAAEEIgAgjCNTFzdDtZXftKB7crqOQuN5fadOh/59nXSX47ICiQABBUdSIQMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3CECOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNSriIGAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zENkMak8AAACAAAAAgAMAAIAiBgMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3BDZDGpPAAAAgAAAAIACAACAACICA6mkw39ZltOqJdusa1cK8GUDlEkpQkYLNUdT7Z7spYdxENkMak8AAACAAAAAgAQAAIAAIgICf2OZdX0u/1WhNq0CxoSxg4tlVuXxtrNCgqlLa1AFEJYQ2QxqTwAAAIAAAACABQAAgAA=\"\n+        },\n+        {\n+            \"privkeys\" : [\n+                \"cT7J9YpCwY3AVRFSjN6ukeEeWY6mhpbJPxRaDaP5QTdygQRxP9Au\",\n+                \"cNBc3SWUip9PPm1GjRoLEJT6T41iNzCYtD7qro84FMnM5zEqeJsE\"\n+            ],\n+            \"psbt\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU210gwRQIhAPYQOLMI3B2oZaNIUnRvAVdyk0IIxtJEVDk82ZvfIhd3AiAFbmdaZ1ptCgK4WxTl4pB02KJam1dgvqKBb2YZEKAG6gEBAwQBAAAAAQRHUiEClYO/Oa4KYJdHrRma3dY0+mEIVZ1sXNObTCGD8auW4H8hAtq2H/SaFNtqfQKwzR+7ePxLGDErW05U2uTbovv+9TbXUq4iBgKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfxDZDGpPAAAAgAAAAIAAAACAIgYC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtcQ2QxqTwAAAIAAAACAAQAAgAABASAAwusLAAAAABepFLf1+vQOPUClpFmx2zU18rcvqSHohyICAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zRzBEAiBl9FulmYtZon/+GnvtAWrx8fkNVLOqj3RQql9WolEDvQIgf3JHA60e25ZoCyhLVtT/y4j3+3Weq74IqjDym4UTg9IBAQMEAQAAAAEEIgAgjCNTFzdDtZXftKB7crqOQuN5fadOh/59nXSX47ICiQMBBUdSIQMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3CECOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNSrSIGAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zENkMak8AAACAAAAAgAMAAIAiBgMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3BDZDGpPAAAAgAAAAIACAACAACICA6mkw39ZltOqJdusa1cK8GUDlEkpQkYLNUdT7Z7spYdxENkMak8AAACAAAAAgAQAAIAAIgICf2OZdX0u/1WhNq0CxoSxg4tlVuXxtrNCgqlLa1AFEJYQ2QxqTwAAAIAAAACABQAAgAA=\",\n+            \"result\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU210gwRQIhAPYQOLMI3B2oZaNIUnRvAVdyk0IIxtJEVDk82ZvfIhd3AiAFbmdaZ1ptCgK4WxTl4pB02KJam1dgvqKBb2YZEKAG6gEBAwQBAAAAAQRHUiEClYO/Oa4KYJdHrRma3dY0+mEIVZ1sXNObTCGD8auW4H8hAtq2H/SaFNtqfQKwzR+7ePxLGDErW05U2uTbovv+9TbXUq4iBgKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfxDZDGpPAAAAgAAAAIAAAACAIgYC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtcQ2QxqTwAAAIAAAACAAQAAgAABASAAwusLAAAAABepFLf1+vQOPUClpFmx2zU18rcvqSHohyICAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zRzBEAiBl9FulmYtZon/+GnvtAWrx8fkNVLOqj3RQql9WolEDvQIgf3JHA60e25ZoCyhLVtT/y4j3+3Weq74IqjDym4UTg9IBAQMEAQAAAAEEIgAgjCNTFzdDtZXftKB7crqOQuN5fadOh/59nXSX47ICiQMBBUdSIQMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3CECOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNSrSIGAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zENkMak8AAACAAAAAgAMAAIAiBgMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3BDZDGpPAAAAgAAAAIACAACAACICA6mkw39ZltOqJdusa1cK8GUDlEkpQkYLNUdT7Z7spYdxENkMak8AAACAAAAAgAQAAIAAIgICf2OZdX0u/1WhNq0CxoSxg4tlVuXxtrNCgqlLa1AFEJYQ2QxqTwAAAIAAAACABQAAgAA=\"\n         }\n     ],\n     \"combiner\" : ["
      },
      {
        "sha": "99c4131d616bf61b242406abd6f9f4ea19632173",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0333914467466d22133e25b71ef330bb2c609958/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0333914467466d22133e25b71ef330bb2c609958/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=0333914467466d22133e25b71ef330bb2c609958",
        "patch": "@@ -168,9 +168,11 @@ def run_test(self):\n \n         # Signer tests\n         for i, signer in enumerate(signers):\n+            self.nodes[2].createwallet(\"wallet{}\".format(i))\n+            wrpc = self.nodes[2].get_wallet_rpc(\"wallet{}\".format(i))\n             for key in signer['privkeys']:\n-                self.nodes[i].importprivkey(key)\n-            signed_tx = self.nodes[i].walletprocesspsbt(signer['psbt'])['psbt']\n+                wrpc.importprivkey(key)\n+            signed_tx = wrpc.walletprocesspsbt(signer['psbt'])['psbt']\n             assert_equal(signed_tx, signer['result'])\n \n         # Combiner test"
      }
    ]
  },
  {
    "sha": "4a2960f73eb0994a1f9a6c9f03b425c718434d53",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YTI5NjBmNzNlYjA5OTRhMWY5YTZjOWYwM2I0MjVjNzE4NDM0ZDUz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-08-15T13:33:17Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-08-15T13:33:21Z"
      },
      "message": "Merge #13976: [0.17] Backport #13960 & #13917\n\n0333914467466d22133e25b71ef330bb2c609958 More tests of signer checks (Andrew Chow)\n8935869487ffe858534d73c4929a4ee3d96ca6ac Test that a non-witness script as witness utxo is not signed (Andrew Chow)\ndbaadc9ea92fd0e221c60584a5d1ca871fdd9c66 Only wipe wrong UTXO type data if overwritten by wallet (Pieter Wuille)\nad6d845ac9d43aac663fa46912b49aaf837a1a9e Additional sanity checks in SignPSBTInput (Pieter Wuille)\n517010e30e4ac52868fcfd537b644515f3081f88 Serialize non-witness utxo as a non-witness tx but always deserialize as witness (Andrew Chow)\n8c4cd2bd895fe7467307867fefc3cd45a685367c Fix PSBT deserialization of 0-input transactions (Andrew Chow)\n\nPull request description:\n\n  Backports #13917 and #13960 to the 0.17 branch.\n\nTree-SHA512: b3853aff2a13a53aa0a390b6b4b0c539f0ef0d42f2c517e956efd0b135c74c4ddce6a1d00700849a58c696824fa95951d8cac6ca58b426e8dfcb8bb62f680b7c",
      "tree": {
        "sha": "ac8f348d939a1df2672253a166b437e9d3140597",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ac8f348d939a1df2672253a166b437e9d3140597"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4a2960f73eb0994a1f9a6c9f03b425c718434d53",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJbdCuhAAoJEB5K7WKYbNJdBy0H/iDLV85Xm3xBsF1DjPsuaPjZ\nUSuCdcZtWjVJbo6NgqRo0l2cx4OVp/T9oPPxHmVs1z3mzhi6K4x9dH0gjsyBDvRs\nMQI+K69RziKldgwSK47NpVNM/hOBoEsmLHQUPWImWmF8LhqVFDLcJDieJm+wljBb\nHGHSS7fLMeIc9K4t1g3VK+hX2xECJjLNL+S2FVxil06MUdqyeKeT9OnPaDY01a/1\nmGh64BoxvlYuLgyhsCj7j8wMGngiyi4BhLG8+8uITXqHEIFIiAYb9tSS+tqMX3L9\nY2WWIRD24nAIB7+W7npoLD6Hr8KEfZF9FQesaGFcUnbgBn3DdxCqkunF+rDD/5g=\n=5WIq\n-----END PGP SIGNATURE-----",
        "payload": "tree ac8f348d939a1df2672253a166b437e9d3140597\nparent ff41e479a0a3c2485f6116abcffa1bacbd86ca72\nparent 0333914467466d22133e25b71ef330bb2c609958\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1534339997 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1534340001 +0200\n\nMerge #13976: [0.17] Backport #13960 & #13917\n\n0333914467466d22133e25b71ef330bb2c609958 More tests of signer checks (Andrew Chow)\n8935869487ffe858534d73c4929a4ee3d96ca6ac Test that a non-witness script as witness utxo is not signed (Andrew Chow)\ndbaadc9ea92fd0e221c60584a5d1ca871fdd9c66 Only wipe wrong UTXO type data if overwritten by wallet (Pieter Wuille)\nad6d845ac9d43aac663fa46912b49aaf837a1a9e Additional sanity checks in SignPSBTInput (Pieter Wuille)\n517010e30e4ac52868fcfd537b644515f3081f88 Serialize non-witness utxo as a non-witness tx but always deserialize as witness (Andrew Chow)\n8c4cd2bd895fe7467307867fefc3cd45a685367c Fix PSBT deserialization of 0-input transactions (Andrew Chow)\n\nPull request description:\n\n  Backports #13917 and #13960 to the 0.17 branch.\n\nTree-SHA512: b3853aff2a13a53aa0a390b6b4b0c539f0ef0d42f2c517e956efd0b135c74c4ddce6a1d00700849a58c696824fa95951d8cac6ca58b426e8dfcb8bb62f680b7c\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a2960f73eb0994a1f9a6c9f03b425c718434d53",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4a2960f73eb0994a1f9a6c9f03b425c718434d53",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a2960f73eb0994a1f9a6c9f03b425c718434d53/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff41e479a0a3c2485f6116abcffa1bacbd86ca72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff41e479a0a3c2485f6116abcffa1bacbd86ca72",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff41e479a0a3c2485f6116abcffa1bacbd86ca72"
      },
      {
        "sha": "0333914467466d22133e25b71ef330bb2c609958",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0333914467466d22133e25b71ef330bb2c609958",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0333914467466d22133e25b71ef330bb2c609958"
      }
    ],
    "stats": {
      "total": 110,
      "additions": 94,
      "deletions": 16
    },
    "files": [
      {
        "sha": "1ab5051ff70bb6a44acb2e60af16a677c555bd46",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a2960f73eb0994a1f9a6c9f03b425c718434d53/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a2960f73eb0994a1f9a6c9f03b425c718434d53/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=4a2960f73eb0994a1f9a6c9f03b425c718434d53",
        "patch": "@@ -244,17 +244,33 @@ bool SignPSBTInput(const SigningProvider& provider, const CMutableTransaction& t\n     input.FillSignatureData(sigdata);\n \n     // Get UTXO\n+    bool require_witness_sig = false;\n     CTxOut utxo;\n     if (input.non_witness_utxo) {\n+        // If we're taking our information from a non-witness UTXO, verify that it matches the prevout.\n+        if (input.non_witness_utxo->GetHash() != tx.vin[index].prevout.hash) return false;\n+        // If both witness and non-witness UTXO are provided, verify that they match. This check shouldn't\n+        // matter, as the PSBT deserializer enforces only one of both is provided, and the only way both\n+        // can be present is when they're added simultaneously by FillPSBT (in which case they always match).\n+        // Still, check in order to not rely on callers to enforce this.\n+        if (!input.witness_utxo.IsNull() && input.non_witness_utxo->vout[tx.vin[index].prevout.n] != input.witness_utxo) return false;\n         utxo = input.non_witness_utxo->vout[tx.vin[index].prevout.n];\n     } else if (!input.witness_utxo.IsNull()) {\n         utxo = input.witness_utxo;\n+        // When we're taking our information from a witness UTXO, we can't verify it is actually data from\n+        // the output being spent. This is safe in case a witness signature is produced (which includes this\n+        // information directly in the hash), but not for non-witness signatures. Remember that we require\n+        // a witness signature in this situation.\n+        require_witness_sig = true;\n     } else {\n         return false;\n     }\n \n     MutableTransactionSignatureCreator creator(&tx, index, utxo.nValue, sighash);\n+    sigdata.witness = false;\n     bool sig_complete = ProduceSignature(provider, creator, utxo.scriptPubKey, sigdata);\n+    // Verify that a witness signature was produced in case one was required.\n+    if (require_witness_sig && !sigdata.witness) return false;\n     input.FromSignatureData(sigdata);\n     return sig_complete;\n }"
      },
      {
        "sha": "7ade715ee292a2b04ad8da32483ef682789f1622",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 13,
        "deletions": 5,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a2960f73eb0994a1f9a6c9f03b425c718434d53/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a2960f73eb0994a1f9a6c9f03b425c718434d53/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=4a2960f73eb0994a1f9a6c9f03b425c718434d53",
        "patch": "@@ -223,7 +223,8 @@ struct PSBTInput\n         // If there is a non-witness utxo, then don't add the witness one.\n         if (non_witness_utxo) {\n             SerializeToVector(s, PSBT_IN_NON_WITNESS_UTXO);\n-            SerializeToVector(s, non_witness_utxo);\n+            OverrideStream<Stream> os(&s, s.GetType(), s.GetVersion() | SERIALIZE_TRANSACTION_NO_WITNESS);\n+            SerializeToVector(os, non_witness_utxo);\n         } else if (!witness_utxo.IsNull()) {\n             SerializeToVector(s, PSBT_IN_WITNESS_UTXO);\n             SerializeToVector(s, witness_utxo);\n@@ -297,13 +298,17 @@ struct PSBTInput\n             // Do stuff based on type\n             switch(type) {\n                 case PSBT_IN_NON_WITNESS_UTXO:\n+                {\n                     if (non_witness_utxo) {\n                         throw std::ios_base::failure(\"Duplicate Key, input non-witness utxo already provided\");\n                     } else if (key.size() != 1) {\n                         throw std::ios_base::failure(\"Non-witness utxo key is more than one byte type\");\n                     }\n-                    UnserializeFromVector(s, non_witness_utxo);\n+                    // Set the stream to unserialize with witness since this is always a valid network transaction\n+                    OverrideStream<Stream> os(&s, s.GetType(), s.GetVersion() & ~SERIALIZE_TRANSACTION_NO_WITNESS);\n+                    UnserializeFromVector(os, non_witness_utxo);\n                     break;\n+                }\n                 case PSBT_IN_WITNESS_UTXO:\n                     if (!witness_utxo.IsNull()) {\n                         throw std::ios_base::failure(\"Duplicate Key, input witness utxo already provided\");\n@@ -547,7 +552,8 @@ struct PartiallySignedTransaction\n         SerializeToVector(s, PSBT_GLOBAL_UNSIGNED_TX);\n \n         // Write serialized tx to a stream\n-        SerializeToVector(s, *tx);\n+        OverrideStream<Stream> os(&s, s.GetType(), s.GetVersion() | SERIALIZE_TRANSACTION_NO_WITNESS);\n+        SerializeToVector(os, *tx);\n \n         // Write the unknown things\n         for (auto& entry : unknown) {\n@@ -601,7 +607,9 @@ struct PartiallySignedTransaction\n                         throw std::ios_base::failure(\"Global unsigned tx key is more than one byte type\");\n                     }\n                     CMutableTransaction mtx;\n-                    UnserializeFromVector(s, mtx);\n+                    // Set the stream to serialize with non-witness since this should always be non-witness\n+                    OverrideStream<Stream> os(&s, s.GetType(), s.GetVersion() | SERIALIZE_TRANSACTION_NO_WITNESS);\n+                    UnserializeFromVector(os, mtx);\n                     tx = std::move(mtx);\n                     // Make sure that all scriptSigs and scriptWitnesses are empty\n                     for (const CTxIn& txin : tx->vin) {\n@@ -678,7 +686,7 @@ bool ProduceSignature(const SigningProvider& provider, const BaseSignatureCreato\n bool SignSignature(const SigningProvider &provider, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, const CAmount& amount, int nHashType);\n bool SignSignature(const SigningProvider &provider, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType);\n \n-/** Signs a PSBTInput */\n+/** Signs a PSBTInput, verifying that all provided data matches what is being signed. */\n bool SignPSBTInput(const SigningProvider& provider, const CMutableTransaction& tx, PSBTInput& input, SignatureData& sigdata, int index, int sighash = 1);\n \n /** Extract signature data from a transaction input, and insert it. */"
      },
      {
        "sha": "096ebfc9c2eeb008546e112c658b924c23481927",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a2960f73eb0994a1f9a6c9f03b425c718434d53/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a2960f73eb0994a1f9a6c9f03b425c718434d53/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=4a2960f73eb0994a1f9a6c9f03b425c718434d53",
        "patch": "@@ -61,6 +61,7 @@ class OverrideStream\n \n     int GetVersion() const { return nVersion; }\n     int GetType() const { return nType; }\n+    size_t size() const { return stream->size(); }\n };\n \n template<typename S>"
      },
      {
        "sha": "92e6931645a65da396771fbe2fb48d25cd5073e8",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a2960f73eb0994a1f9a6c9f03b425c718434d53/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a2960f73eb0994a1f9a6c9f03b425c718434d53/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=4a2960f73eb0994a1f9a6c9f03b425c718434d53",
        "patch": "@@ -4504,10 +4504,11 @@ bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, const C\n \n         // If we don't know about this input, skip it and let someone else deal with it\n         const uint256& txhash = txin.prevout.hash;\n-        const auto& it = pwallet->mapWallet.find(txhash);\n+        const auto it = pwallet->mapWallet.find(txhash);\n         if (it != pwallet->mapWallet.end()) {\n             const CWalletTx& wtx = it->second;\n             CTxOut utxo = wtx.tx->vout[txin.prevout.n];\n+            // Update both UTXOs from the wallet.\n             input.non_witness_utxo = wtx.tx;\n             input.witness_utxo = utxo;\n         }\n@@ -4524,11 +4525,13 @@ bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, const C\n             complete &= SignPSBTInput(PublicOnlySigningProvider(pwallet), *psbtx.tx, input, sigdata, i, sighash_type);\n         }\n \n-        // Drop the unnecessary UTXO\n-        if (sigdata.witness) {\n-            input.non_witness_utxo = nullptr;\n-        } else {\n-            input.witness_utxo.SetNull();\n+        if (it != pwallet->mapWallet.end()) {\n+            // Drop the unnecessary UTXO if we added both from the wallet.\n+            if (sigdata.witness) {\n+                input.non_witness_utxo = nullptr;\n+            } else {\n+                input.witness_utxo.SetNull();\n+            }\n         }\n \n         // Get public key paths"
      },
      {
        "sha": "9f970b49618df11744d1a90ebe25dbfcca6a1a2d",
        "filename": "test/functional/data/rpc_psbt.json",
        "status": "modified",
        "additions": 51,
        "deletions": 3,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a2960f73eb0994a1f9a6c9f03b425c718434d53/test/functional/data/rpc_psbt.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a2960f73eb0994a1f9a6c9f03b425c718434d53/test/functional/data/rpc_psbt.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/rpc_psbt.json?ref=4a2960f73eb0994a1f9a6c9f03b425c718434d53",
        "patch": "@@ -24,7 +24,8 @@\n         \"cHNidP8BAKACAAAAAqsJSaCMWvfEm4IS9Bfi8Vqz9cM9zxU4IagTn4d6W3vkAAAAAAD+////qwlJoIxa98SbghL0F+LxWrP1wz3PFTghqBOfh3pbe+QBAAAAAP7///8CYDvqCwAAAAAZdqkUdopAu9dAy+gdmI5x3ipNXHE5ax2IrI4kAAAAAAAAGXapFG9GILVT+glechue4O/p+gOcykWXiKwAAAAAAAEHakcwRAIgR1lmF5fAGwNrJZKJSGhiGDR9iYZLcZ4ff89X0eURZYcCIFMJ6r9Wqk2Ikf/REf3xM286KdqGbX+EhtdVRs7tr5MZASEDXNxh/HupccC1AaZGoqg7ECy0OIEhfKaC3Ibi1z+ogpIAAQEgAOH1BQAAAAAXqRQ1RebjO4MsRwUPJNPuuTycA5SLx4cBBBYAFIXRNTfy4mVAWjTbr6nj3aAfuCMIAAAA\",\n         \"cHNidP8BAHUCAAAAASaBcTce3/KF6Tet7qSze3gADAVmy7OtZGQXE8pCFxv2AAAAAAD+////AtPf9QUAAAAAGXapFNDFmQPFusKGh2DpD9UhpGZap2UgiKwA4fUFAAAAABepFDVF5uM7gyxHBQ8k0+65PJwDlIvHh7MuEwAAAQD9pQEBAAAAAAECiaPHHqtNIOA3G7ukzGmPopXJRjr6Ljl/hTPMti+VZ+UBAAAAFxYAFL4Y0VKpsBIDna89p95PUzSe7LmF/////4b4qkOnHf8USIk6UwpyN+9rRgi7st0tAXHmOuxqSJC0AQAAABcWABT+Pp7xp0XpdNkCxDVZQ6vLNL1TU/////8CAMLrCwAAAAAZdqkUhc/xCX/Z4Ai7NK9wnGIZeziXikiIrHL++E4sAAAAF6kUM5cluiHv1irHU6m80GfWx6ajnQWHAkcwRAIgJxK+IuAnDzlPVoMR3HyppolwuAJf3TskAinwf4pfOiQCIAGLONfc0xTnNMkna9b7QPZzMlvEuqFEyADS8vAtsnZcASED0uFWdJQbrUqZY3LLh+GFbTZSYG2YVi/jnF6efkE/IQUCSDBFAiEA0SuFLYXc2WHS9fSrZgZU327tzHlMDDPOXMMJ/7X85Y0CIGczio4OFyXBl/saiK9Z9R5E5CVbIBZ8hoQDHAXR8lkqASECI7cr7vCWXRC+B3jv7NYfysb3mk6haTkzgHNEZPhPKrMAAAAAAQMEAQAAAAAAAA==\",\n         \"cHNidP8BAKACAAAAAqsJSaCMWvfEm4IS9Bfi8Vqz9cM9zxU4IagTn4d6W3vkAAAAAAD+////qwlJoIxa98SbghL0F+LxWrP1wz3PFTghqBOfh3pbe+QBAAAAAP7///8CYDvqCwAAAAAZdqkUdopAu9dAy+gdmI5x3ipNXHE5ax2IrI4kAAAAAAAAGXapFG9GILVT+glechue4O/p+gOcykWXiKwAAAAAAAEA3wIAAAABJoFxNx7f8oXpN63upLN7eAAMBWbLs61kZBcTykIXG/YAAAAAakcwRAIgcLIkUSPmv0dNYMW1DAQ9TGkaXSQ18Jo0p2YqncJReQoCIAEynKnazygL3zB0DsA5BCJCLIHLRYOUV663b8Eu3ZWzASECZX0RjTNXuOD0ws1G23s59tnDjZpwq8ubLeXcjb/kzjH+////AtPf9QUAAAAAGXapFNDFmQPFusKGh2DpD9UhpGZap2UgiKwA4fUFAAAAABepFDVF5uM7gyxHBQ8k0+65PJwDlIvHh7MuEwAAAQEgAOH1BQAAAAAXqRQ1RebjO4MsRwUPJNPuuTycA5SLx4cBBBYAFIXRNTfy4mVAWjTbr6nj3aAfuCMIACICAurVlmh8qAYEPtw94RbN8p1eklfBls0FXPaYyNAr8k6ZELSmumcAAACAAAAAgAIAAIAAIgIDlPYr6d8ZlSxVh3aK63aYBhrSxKJciU9H2MFitNchPQUQtKa6ZwAAAIABAACAAgAAgAA=\",\n-        \"cHNidP8BAFUCAAAAASeaIyOl37UfxF8iD6WLD8E+HjNCeSqF1+Ns1jM7XLw5AAAAAAD/////AaBa6gsAAAAAGXapFP/pwAYQl8w7Y28ssEYPpPxCfStFiKwAAAAAAAEBIJVe6gsAAAAAF6kUY0UgD2jRieGtwN8cTRbqjxTA2+uHIgIDsTQcy6doO2r08SOM1ul+cWfVafrEfx5I1HVBhENVvUZGMEMCIAQktY7/qqaU4VWepck7v9SokGQiQFXN8HC2dxRpRC0HAh9cjrD+plFtYLisszrWTt5g6Hhb+zqpS5m9+GFR25qaAQEEIgAgdx/RitRZZm3Unz1WTj28QvTIR3TjYK2haBao7UiNVoEBBUdSIQOxNBzLp2g7avTxI4zW6X5xZ9Vp+sR/HkjUdUGEQ1W9RiED3lXR4drIBeP4pYwfv5uUwC89uq/hJ/78pJlfJvggg71SriIGA7E0HMunaDtq9PEjjNbpfnFn1Wn6xH8eSNR1QYRDVb1GELSmumcAAACAAAAAgAQAAIAiBgPeVdHh2sgF4/iljB+/m5TALz26r+En/vykmV8m+CCDvRC0prpnAAAAgAAAAIAFAACAAAA=\"\n+        \"cHNidP8BAFUCAAAAASeaIyOl37UfxF8iD6WLD8E+HjNCeSqF1+Ns1jM7XLw5AAAAAAD/////AaBa6gsAAAAAGXapFP/pwAYQl8w7Y28ssEYPpPxCfStFiKwAAAAAAAEBIJVe6gsAAAAAF6kUY0UgD2jRieGtwN8cTRbqjxTA2+uHIgIDsTQcy6doO2r08SOM1ul+cWfVafrEfx5I1HVBhENVvUZGMEMCIAQktY7/qqaU4VWepck7v9SokGQiQFXN8HC2dxRpRC0HAh9cjrD+plFtYLisszrWTt5g6Hhb+zqpS5m9+GFR25qaAQEEIgAgdx/RitRZZm3Unz1WTj28QvTIR3TjYK2haBao7UiNVoEBBUdSIQOxNBzLp2g7avTxI4zW6X5xZ9Vp+sR/HkjUdUGEQ1W9RiED3lXR4drIBeP4pYwfv5uUwC89uq/hJ/78pJlfJvggg71SriIGA7E0HMunaDtq9PEjjNbpfnFn1Wn6xH8eSNR1QYRDVb1GELSmumcAAACAAAAAgAQAAIAiBgPeVdHh2sgF4/iljB+/m5TALz26r+En/vykmV8m+CCDvRC0prpnAAAAgAAAAIAFAACAAAA=\",\n+        \"cHNidP8BACoCAAAAAAFAQg8AAAAAABepFG6Rty1Vk+fUOR4v9E6R6YXDFkHwhwAAAAAAAA==\"\n     ],\n     \"creator\" : [\n         {\n@@ -57,15 +58,62 @@\n             ],\n             \"psbt\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAABBEdSIQKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfyEC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtdSriIGApWDvzmuCmCXR60Zmt3WNPphCFWdbFzTm0whg/GrluB/ENkMak8AAACAAAAAgAAAAIAiBgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU21xDZDGpPAAAAgAAAAIABAACAAQMEAQAAAAABASAAwusLAAAAABepFLf1+vQOPUClpFmx2zU18rcvqSHohwEEIgAgjCNTFzdDtZXftKB7crqOQuN5fadOh/59nXSX47ICiQMBBUdSIQMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3CECOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNSriIGAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zENkMak8AAACAAAAAgAMAAIAiBgMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3BDZDGpPAAAAgAAAAIACAACAAQMEAQAAAAAiAgOppMN/WZbTqiXbrGtXCvBlA5RJKUJGCzVHU+2e7KWHcRDZDGpPAAAAgAAAAIAEAACAACICAn9jmXV9Lv9VoTatAsaEsYOLZVbl8bazQoKpS2tQBRCWENkMak8AAACAAAAAgAUAAIAA\",\n             \"result\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgf0cwRAIgdAGK1BgAl7hzMjwAFXILNoTMgSOJEEjn282bVa1nnJkCIHPTabdA4+tT3O+jOCPIBwUUylWn3ZVE8VfBZ5EyYRGMAQEDBAEAAAABBEdSIQKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfyEC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtdSriIGApWDvzmuCmCXR60Zmt3WNPphCFWdbFzTm0whg/GrluB/ENkMak8AAACAAAAAgAAAAIAiBgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU21xDZDGpPAAAAgAAAAIABAACAAAEBIADC6wsAAAAAF6kUt/X69A49QKWkWbHbNTXyty+pIeiHIgIDCJ3BDHrG21T5EymvYXMz2ziM6tDCMfcjN50bmQMLAtxHMEQCIGLrelVhB6fHP0WsSrWh3d9vcHX7EnWWmn84Pv/3hLyyAiAMBdu3Rw2/LwhVfdNWxzJcHtMJE+mWzThAlF2xIijaXwEBAwQBAAAAAQQiACCMI1MXN0O1ld+0oHtyuo5C43l9p06H/n2ddJfjsgKJAwEFR1IhAwidwQx6xttU+RMpr2FzM9s4jOrQwjH3IzedG5kDCwLcIQI63ZBPPW3PWd25BrDe4jUpt/+57VDl6GFRkmhgIh8Oc1KuIgYCOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnMQ2QxqTwAAAIAAAACAAwAAgCIGAwidwQx6xttU+RMpr2FzM9s4jOrQwjH3IzedG5kDCwLcENkMak8AAACAAAAAgAIAAIAAIgIDqaTDf1mW06ol26xrVwrwZQOUSSlCRgs1R1Ptnuylh3EQ2QxqTwAAAIAAAACABAAAgAAiAgJ/Y5l1fS7/VaE2rQLGhLGDi2VW5fG2s0KCqUtrUAUQlhDZDGpPAAAAgAAAAIAFAACAAA==\"\n+        },\n+        {\n+            \"privkeys\" : [\n+                \"cT7J9YpCwY3AVRFSjN6ukeEeWY6mhpbJPxRaDaP5QTdygQRxP9Au\",\n+                \"cNBc3SWUip9PPm1GjRoLEJT6T41iNzCYtD7qro84FMnM5zEqeJsE\"\n+            ],\n+            \"psbt\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAABBEdSIQKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfyEC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtdSriIGApWDvzmuCmCXR60Zmt3WNPphCFWdbFzTm0whg/GrluB/ENkMak8AAACAAAAAgAAAAIAiBgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU21xDZDGpPAAAAgAAAAIABAACAAQMEAQAAAAABASAAwusLAAAAABepFLf1+vQOPUClpFmx2zU18rcvqSHohwEEIgAgjCNTFzdDtZXftKB7crqOQuN5fadOh/59nXSX47ICiQMBBUdSIQMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3CECOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNSriIGAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zENkMak8AAACAAAAAgAMAAIAiBgMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3BDZDGpPAAAAgAAAAIACAACAAQMEAQAAAAAiAgOppMN/WZbTqiXbrGtXCvBlA5RJKUJGCzVHU+2e7KWHcRDZDGpPAAAAgAAAAIAEAACAACICAn9jmXV9Lv9VoTatAsaEsYOLZVbl8bazQoKpS2tQBRCWENkMak8AAACAAAAAgAUAAIAA\",\n+            \"result\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU210cwRAIgYxqYn+c4qSrQGYYCMxLBkhT+KAKznly8GsNniAbGksMCIDnbbDh70mdxbf2z1NjaULjoXSEzJrp8faqkwM5B65IjAQEDBAEAAAABBEdSIQKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfyEC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtdSriIGApWDvzmuCmCXR60Zmt3WNPphCFWdbFzTm0whg/GrluB/ENkMak8AAACAAAAAgAAAAIAiBgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU21xDZDGpPAAAAgAAAAIABAACAAAEBIADC6wsAAAAAF6kUt/X69A49QKWkWbHbNTXyty+pIeiHIgICOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNHMEQCIGX0W6WZi1mif/4ae+0BavHx+Q1Us6qPdFCqX1aiUQO9AiB/ckcDrR7blmgLKEtW1P/LiPf7dZ6rvgiqMPKbhROD0gEBAwQBAAAAAQQiACCMI1MXN0O1ld+0oHtyuo5C43l9p06H/n2ddJfjsgKJAwEFR1IhAwidwQx6xttU+RMpr2FzM9s4jOrQwjH3IzedG5kDCwLcIQI63ZBPPW3PWd25BrDe4jUpt/+57VDl6GFRkmhgIh8Oc1KuIgYCOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnMQ2QxqTwAAAIAAAACAAwAAgCIGAwidwQx6xttU+RMpr2FzM9s4jOrQwjH3IzedG5kDCwLcENkMak8AAACAAAAAgAIAAIAAIgIDqaTDf1mW06ol26xrVwrwZQOUSSlCRgs1R1Ptnuylh3EQ2QxqTwAAAIAAAACABAAAgAAiAgJ/Y5l1fS7/VaE2rQLGhLGDi2VW5fG2s0KCqUtrUAUQlhDZDGpPAAAAgAAAAIAFAACAAA==\"\n+        },\n+        {\n+            \"privkeys\" : [\n+                \"cT7J9YpCwY3AVRFSjN6ukeEeWY6mhpbJPxRaDaP5QTdygQRxP9Au\",\n+                \"cNBc3SWUip9PPm1GjRoLEJT6T41iNzCYtD7qro84FMnM5zEqeJsE\"\n+            ],\n+            \"psbt\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAABBEdSIQKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfyEC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtdSriIGApWDvzmuCmCXR60Zmt3WNPphCFWdbFzTm0whg/GrluB/ENkMak8AAACAAAAAgAAAAIAiBgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU21xDZDGpPAAAAgAAAAIABAACAAQMEAQAAAAABASAAwusLAAAAABepFLf1+vQOPUClpFmx2zU18rcvqSHohwEEIgAgjCNTFzdDtZXftKB7crqOQuN5fadOh/59nXSX47ICiQMBBUdSIQMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3CECOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNSriIGAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zENkMak8AAACAAAAAgAMAAIAiBgMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3BDZDGpPAAAAgAAAAIACAACAAQMEAQAAAAAiAgOppMN/WZbTqiXbrGtXCvBlA5RJKUJGCzVHU+2e7KWHcRDZDGpPAAAAgAAAAIAEAACAACICAn9jmXV9Lv9VoTatAsaEsYOLZVbl8bazQoKpS2tQBRCWENkMak8AAACAAAAAgAUAAIAA\",\n+            \"result\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU210cwRAIgYxqYn+c4qSrQGYYCMxLBkhT+KAKznly8GsNniAbGksMCIDnbbDh70mdxbf2z1NjaULjoXSEzJrp8faqkwM5B65IjAQEDBAEAAAABBEdSIQKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfyEC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtdSriIGApWDvzmuCmCXR60Zmt3WNPphCFWdbFzTm0whg/GrluB/ENkMak8AAACAAAAAgAAAAIAiBgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU21xDZDGpPAAAAgAAAAIABAACAAAEBIADC6wsAAAAAF6kUt/X69A49QKWkWbHbNTXyty+pIeiHIgICOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNHMEQCIGX0W6WZi1mif/4ae+0BavHx+Q1Us6qPdFCqX1aiUQO9AiB/ckcDrR7blmgLKEtW1P/LiPf7dZ6rvgiqMPKbhROD0gEBAwQBAAAAAQQiACCMI1MXN0O1ld+0oHtyuo5C43l9p06H/n2ddJfjsgKJAwEFR1IhAwidwQx6xttU+RMpr2FzM9s4jOrQwjH3IzedG5kDCwLcIQI63ZBPPW3PWd25BrDe4jUpt/+57VDl6GFRkmhgIh8Oc1KuIgYCOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnMQ2QxqTwAAAIAAAACAAwAAgCIGAwidwQx6xttU+RMpr2FzM9s4jOrQwjH3IzedG5kDCwLcENkMak8AAACAAAAAgAIAAIAAIgIDqaTDf1mW06ol26xrVwrwZQOUSSlCRgs1R1Ptnuylh3EQ2QxqTwAAAIAAAACABAAAgAAiAgJ/Y5l1fS7/VaE2rQLGhLGDi2VW5fG2s0KCqUtrUAUQlhDZDGpPAAAAgAAAAIAFAACAAA==\"\n+        },\n+        {\n+            \"privkeys\" : [\n+                \"cNBc3SWUip9PPm1GjRoLEJT6T41iNzCYtD7qro84FMnM5zEqeJsE\"\n+            ],\n+            \"psbt\" : \"cHNidP8BAKACAAAAAqsJSaCMWvfEm4IS9Bfi8Vqz9cM9zxU4IagTn4d6W3vkAAAAAAD+////qwlJoIxa98SbghL0F+LxWrP1wz3PFTghqBOfh3pbe+QBAAAAAP7///8CYDvqCwAAAAAZdqkUdopAu9dAy+gdmI5x3ipNXHE5ax2IrI4kAAAAAAAAGXapFG9GILVT+glechue4O/p+gOcykWXiKwAAAAAAAEBItPf9QUAAAAAGXapFNSO0xELlAFMsRS9Mtb00GbcdCVriKwAAQEgAOH1BQAAAAAXqRQ1RebjO4MsRwUPJNPuuTycA5SLx4cBBBYAFIXRNTfy4mVAWjTbr6nj3aAfuCMIACICAurVlmh8qAYEPtw94RbN8p1eklfBls0FXPaYyNAr8k6ZELSmumcAAACAAAAAgAIAAIAAIgIDlPYr6d8ZlSxVh3aK63aYBhrSxKJciU9H2MFitNchPQUQtKa6ZwAAAIABAACAAgAAgAA=\",\n+            \"result\" : \"cHNidP8BAKACAAAAAqsJSaCMWvfEm4IS9Bfi8Vqz9cM9zxU4IagTn4d6W3vkAAAAAAD+////qwlJoIxa98SbghL0F+LxWrP1wz3PFTghqBOfh3pbe+QBAAAAAP7///8CYDvqCwAAAAAZdqkUdopAu9dAy+gdmI5x3ipNXHE5ax2IrI4kAAAAAAAAGXapFG9GILVT+glechue4O/p+gOcykWXiKwAAAAAAAEBItPf9QUAAAAAGXapFNSO0xELlAFMsRS9Mtb00GbcdCVriKwAAQEgAOH1BQAAAAAXqRQ1RebjO4MsRwUPJNPuuTycA5SLx4cBBBYAFIXRNTfy4mVAWjTbr6nj3aAfuCMIACICAurVlmh8qAYEPtw94RbN8p1eklfBls0FXPaYyNAr8k6ZELSmumcAAACAAAAAgAIAAIAAIgIDlPYr6d8ZlSxVh3aK63aYBhrSxKJciU9H2MFitNchPQUQtKa6ZwAAAIABAACAAgAAgAA=\"\n+        },\n+        {\n+            \"privkeys\" : [\n+                \"cT7J9YpCwY3AVRFSjN6ukeEeWY6mhpbJPxRaDaP5QTdygQRxP9Au\",\n+                \"cNBc3SWUip9PPm1GjRoLEJT6T41iNzCYtD7qro84FMnM5zEqeJsE\"\n+            ],\n+            \"psbt\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU210gwRQIhAPYQOLMI3B2oZaNIUnRvAVdyk0IIxtJEVDk82ZvfIhd3AiAFbmdaZ1ptCgK4WxTl4pB02KJam1dgvqKBb2YZEKAG6gEBAwQBAAAAAQRHUiEClYO/Oa4KYJdHrRma3dY0+mEIVZ1sXNObTCGD8auW4H8hAtq2H/SaFNtqfQKwzR+7ePxLGDErW05U2uTbovv+9TbXUq8iBgKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfxDZDGpPAAAAgAAAAIAAAACAIgYC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtcQ2QxqTwAAAIAAAACAAQAAgAABASAAwusLAAAAABepFLf1+vQOPUClpFmx2zU18rcvqSHohyICAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zRzBEAiBl9FulmYtZon/+GnvtAWrx8fkNVLOqj3RQql9WolEDvQIgf3JHA60e25ZoCyhLVtT/y4j3+3Weq74IqjDym4UTg9IBAQMEAQAAAAEEIgAgjCNTFzdDtZXftKB7crqOQuN5fadOh/59nXSX47ICiQMBBUdSIQMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3CECOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNSriIGAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zENkMak8AAACAAAAAgAMAAIAiBgMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3BDZDGpPAAAAgAAAAIACAACAACICA6mkw39ZltOqJdusa1cK8GUDlEkpQkYLNUdT7Z7spYdxENkMak8AAACAAAAAgAQAAIAAIgICf2OZdX0u/1WhNq0CxoSxg4tlVuXxtrNCgqlLa1AFEJYQ2QxqTwAAAIAAAACABQAAgAA=\",\n+            \"result\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU210gwRQIhAPYQOLMI3B2oZaNIUnRvAVdyk0IIxtJEVDk82ZvfIhd3AiAFbmdaZ1ptCgK4WxTl4pB02KJam1dgvqKBb2YZEKAG6gEBAwQBAAAAAQRHUiEClYO/Oa4KYJdHrRma3dY0+mEIVZ1sXNObTCGD8auW4H8hAtq2H/SaFNtqfQKwzR+7ePxLGDErW05U2uTbovv+9TbXUq8iBgKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfxDZDGpPAAAAgAAAAIAAAACAIgYC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtcQ2QxqTwAAAIAAAACAAQAAgAABASAAwusLAAAAABepFLf1+vQOPUClpFmx2zU18rcvqSHohyICAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zRzBEAiBl9FulmYtZon/+GnvtAWrx8fkNVLOqj3RQql9WolEDvQIgf3JHA60e25ZoCyhLVtT/y4j3+3Weq74IqjDym4UTg9IBAQMEAQAAAAEEIgAgjCNTFzdDtZXftKB7crqOQuN5fadOh/59nXSX47ICiQMBBUdSIQMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3CECOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNSriIGAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zENkMak8AAACAAAAAgAMAAIAiBgMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3BDZDGpPAAAAgAAAAIACAACAACICA6mkw39ZltOqJdusa1cK8GUDlEkpQkYLNUdT7Z7spYdxENkMak8AAACAAAAAgAQAAIAAIgICf2OZdX0u/1WhNq0CxoSxg4tlVuXxtrNCgqlLa1AFEJYQ2QxqTwAAAIAAAACABQAAgAA=\"\n+        },\n+        {\n+            \"privkeys\" : [\n+                \"cT7J9YpCwY3AVRFSjN6ukeEeWY6mhpbJPxRaDaP5QTdygQRxP9Au\",\n+                \"cNBc3SWUip9PPm1GjRoLEJT6T41iNzCYtD7qro84FMnM5zEqeJsE\"\n+            ],\n+            \"psbt\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU210gwRQIhAPYQOLMI3B2oZaNIUnRvAVdyk0IIxtJEVDk82ZvfIhd3AiAFbmdaZ1ptCgK4WxTl4pB02KJam1dgvqKBb2YZEKAG6gEBAwQBAAAAAQRHUiEClYO/Oa4KYJdHrRma3dY0+mEIVZ1sXNObTCGD8auW4H8hAtq2H/SaFNtqfQKwzR+7ePxLGDErW05U2uTbovv+9TbXUq4iBgKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfxDZDGpPAAAAgAAAAIAAAACAIgYC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtcQ2QxqTwAAAIAAAACAAQAAgAABASAAwusLAAAAABepFLf1+vQOPUClpFmx2zU18rcvqSHohyICAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zRzBEAiBl9FulmYtZon/+GnvtAWrx8fkNVLOqj3RQql9WolEDvQIgf3JHA60e25ZoCyhLVtT/y4j3+3Weq74IqjDym4UTg9IBAQMEAQAAAAEEIgAgjCNTFzdDtZXftKB7crqOQuN5fadOh/59nXSX47ICiQABBUdSIQMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3CECOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNSriIGAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zENkMak8AAACAAAAAgAMAAIAiBgMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3BDZDGpPAAAAgAAAAIACAACAACICA6mkw39ZltOqJdusa1cK8GUDlEkpQkYLNUdT7Z7spYdxENkMak8AAACAAAAAgAQAAIAAIgICf2OZdX0u/1WhNq0CxoSxg4tlVuXxtrNCgqlLa1AFEJYQ2QxqTwAAAIAAAACABQAAgAA=\",\n+            \"result\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU210gwRQIhAPYQOLMI3B2oZaNIUnRvAVdyk0IIxtJEVDk82ZvfIhd3AiAFbmdaZ1ptCgK4WxTl4pB02KJam1dgvqKBb2YZEKAG6gEBAwQBAAAAAQRHUiEClYO/Oa4KYJdHrRma3dY0+mEIVZ1sXNObTCGD8auW4H8hAtq2H/SaFNtqfQKwzR+7ePxLGDErW05U2uTbovv+9TbXUq4iBgKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfxDZDGpPAAAAgAAAAIAAAACAIgYC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtcQ2QxqTwAAAIAAAACAAQAAgAABASAAwusLAAAAABepFLf1+vQOPUClpFmx2zU18rcvqSHohyICAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zRzBEAiBl9FulmYtZon/+GnvtAWrx8fkNVLOqj3RQql9WolEDvQIgf3JHA60e25ZoCyhLVtT/y4j3+3Weq74IqjDym4UTg9IBAQMEAQAAAAEEIgAgjCNTFzdDtZXftKB7crqOQuN5fadOh/59nXSX47ICiQABBUdSIQMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3CECOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNSriIGAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zENkMak8AAACAAAAAgAMAAIAiBgMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3BDZDGpPAAAAgAAAAIACAACAACICA6mkw39ZltOqJdusa1cK8GUDlEkpQkYLNUdT7Z7spYdxENkMak8AAACAAAAAgAQAAIAAIgICf2OZdX0u/1WhNq0CxoSxg4tlVuXxtrNCgqlLa1AFEJYQ2QxqTwAAAIAAAACABQAAgAA=\"\n+        },\n+        {\n+            \"privkeys\" : [\n+                \"cT7J9YpCwY3AVRFSjN6ukeEeWY6mhpbJPxRaDaP5QTdygQRxP9Au\",\n+                \"cNBc3SWUip9PPm1GjRoLEJT6T41iNzCYtD7qro84FMnM5zEqeJsE\"\n+            ],\n+            \"psbt\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU210gwRQIhAPYQOLMI3B2oZaNIUnRvAVdyk0IIxtJEVDk82ZvfIhd3AiAFbmdaZ1ptCgK4WxTl4pB02KJam1dgvqKBb2YZEKAG6gEBAwQBAAAAAQRHUiEClYO/Oa4KYJdHrRma3dY0+mEIVZ1sXNObTCGD8auW4H8hAtq2H/SaFNtqfQKwzR+7ePxLGDErW05U2uTbovv+9TbXUq4iBgKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfxDZDGpPAAAAgAAAAIAAAACAIgYC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtcQ2QxqTwAAAIAAAACAAQAAgAABASAAwusLAAAAABepFLf1+vQOPUClpFmx2zU18rcvqSHohyICAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zRzBEAiBl9FulmYtZon/+GnvtAWrx8fkNVLOqj3RQql9WolEDvQIgf3JHA60e25ZoCyhLVtT/y4j3+3Weq74IqjDym4UTg9IBAQMEAQAAAAEEIgAgjCNTFzdDtZXftKB7crqOQuN5fadOh/59nXSX47ICiQMBBUdSIQMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3CECOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNSrSIGAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zENkMak8AAACAAAAAgAMAAIAiBgMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3BDZDGpPAAAAgAAAAIACAACAACICA6mkw39ZltOqJdusa1cK8GUDlEkpQkYLNUdT7Z7spYdxENkMak8AAACAAAAAgAQAAIAAIgICf2OZdX0u/1WhNq0CxoSxg4tlVuXxtrNCgqlLa1AFEJYQ2QxqTwAAAIAAAACABQAAgAA=\",\n+            \"result\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU210gwRQIhAPYQOLMI3B2oZaNIUnRvAVdyk0IIxtJEVDk82ZvfIhd3AiAFbmdaZ1ptCgK4WxTl4pB02KJam1dgvqKBb2YZEKAG6gEBAwQBAAAAAQRHUiEClYO/Oa4KYJdHrRma3dY0+mEIVZ1sXNObTCGD8auW4H8hAtq2H/SaFNtqfQKwzR+7ePxLGDErW05U2uTbovv+9TbXUq4iBgKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfxDZDGpPAAAAgAAAAIAAAACAIgYC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtcQ2QxqTwAAAIAAAACAAQAAgAABASAAwusLAAAAABepFLf1+vQOPUClpFmx2zU18rcvqSHohyICAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zRzBEAiBl9FulmYtZon/+GnvtAWrx8fkNVLOqj3RQql9WolEDvQIgf3JHA60e25ZoCyhLVtT/y4j3+3Weq74IqjDym4UTg9IBAQMEAQAAAAEEIgAgjCNTFzdDtZXftKB7crqOQuN5fadOh/59nXSX47ICiQMBBUdSIQMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3CECOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNSrSIGAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zENkMak8AAACAAAAAgAMAAIAiBgMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3BDZDGpPAAAAgAAAAIACAACAACICA6mkw39ZltOqJdusa1cK8GUDlEkpQkYLNUdT7Z7spYdxENkMak8AAACAAAAAgAQAAIAAIgICf2OZdX0u/1WhNq0CxoSxg4tlVuXxtrNCgqlLa1AFEJYQ2QxqTwAAAIAAAACABQAAgAA=\"\n         }\n     ],\n     \"combiner\" : [\n         {\n             \"combine\" : [\n                 \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgf0cwRAIgdAGK1BgAl7hzMjwAFXILNoTMgSOJEEjn282bVa1nnJkCIHPTabdA4+tT3O+jOCPIBwUUylWn3ZVE8VfBZ5EyYRGMAQEDBAEAAAABBEdSIQKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfyEC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtdSriIGApWDvzmuCmCXR60Zmt3WNPphCFWdbFzTm0whg/GrluB/ENkMak8AAACAAAAAgAAAAIAiBgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU21xDZDGpPAAAAgAAAAIABAACAAAEBIADC6wsAAAAAF6kUt/X69A49QKWkWbHbNTXyty+pIeiHIgIDCJ3BDHrG21T5EymvYXMz2ziM6tDCMfcjN50bmQMLAtxHMEQCIGLrelVhB6fHP0WsSrWh3d9vcHX7EnWWmn84Pv/3hLyyAiAMBdu3Rw2/LwhVfdNWxzJcHtMJE+mWzThAlF2xIijaXwEBAwQBAAAAAQQiACCMI1MXN0O1ld+0oHtyuo5C43l9p06H/n2ddJfjsgKJAwEFR1IhAwidwQx6xttU+RMpr2FzM9s4jOrQwjH3IzedG5kDCwLcIQI63ZBPPW3PWd25BrDe4jUpt/+57VDl6GFRkmhgIh8Oc1KuIgYCOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnMQ2QxqTwAAAIAAAACAAwAAgCIGAwidwQx6xttU+RMpr2FzM9s4jOrQwjH3IzedG5kDCwLcENkMak8AAACAAAAAgAIAAIAAIgIDqaTDf1mW06ol26xrVwrwZQOUSSlCRgs1R1Ptnuylh3EQ2QxqTwAAAIAAAACABAAAgAAiAgJ/Y5l1fS7/VaE2rQLGhLGDi2VW5fG2s0KCqUtrUAUQlhDZDGpPAAAAgAAAAIAFAACAAA==\",\n-                \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU210gwRQIhAPYQOLMI3B2oZaNIUnRvAVdyk0IIxtJEVDk82ZvfIhd3AiAFbmdaZ1ptCgK4WxTl4pB02KJam1dgvqKBb2YZEKAG6gEBAwQBAAAAAQRHUiEClYO/Oa4KYJdHrRma3dY0+mEIVZ1sXNObTCGD8auW4H8hAtq2H/SaFNtqfQKwzR+7ePxLGDErW05U2uTbovv+9TbXUq4iBgKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfxDZDGpPAAAAgAAAAIAAAACAIgYC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtcQ2QxqTwAAAIAAAACAAQAAgAABASAAwusLAAAAABepFLf1+vQOPUClpFmx2zU18rcvqSHohyICAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zRzBEAiBl9FulmYtZon/+GnvtAWrx8fkNVLOqj3RQql9WolEDvQIgf3JHA60e25ZoCyhLVtT/y4j3+3Weq74IqjDym4UTg9IBAQMEAQAAAAEEIgAgjCNTFzdDtZXftKB7crqOQuN5fadOh/59nXSX47ICiQMBBUdSIQMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3CECOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNSriIGAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zENkMak8AAACAAAAAgAMAAIAiBgMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3BDZDGpPAAAAgAAAAIACAACAACICA6mkw39ZltOqJdusa1cK8GUDlEkpQkYLNUdT7Z7spYdxENkMak8AAACAAAAAgAQAAIAAIgICf2OZdX0u/1WhNq0CxoSxg4tlVuXxtrNCgqlLa1AFEJYQ2QxqTwAAAIAAAACABQAAgAA=\"\n+                \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU210cwRAIgYxqYn+c4qSrQGYYCMxLBkhT+KAKznly8GsNniAbGksMCIDnbbDh70mdxbf2z1NjaULjoXSEzJrp8faqkwM5B65IjAQEDBAEAAAABBEdSIQKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfyEC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtdSriIGApWDvzmuCmCXR60Zmt3WNPphCFWdbFzTm0whg/GrluB/ENkMak8AAACAAAAAgAAAAIAiBgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU21xDZDGpPAAAAgAAAAIABAACAAAEBIADC6wsAAAAAF6kUt/X69A49QKWkWbHbNTXyty+pIeiHIgICOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNHMEQCIGX0W6WZi1mif/4ae+0BavHx+Q1Us6qPdFCqX1aiUQO9AiB/ckcDrR7blmgLKEtW1P/LiPf7dZ6rvgiqMPKbhROD0gEBAwQBAAAAAQQiACCMI1MXN0O1ld+0oHtyuo5C43l9p06H/n2ddJfjsgKJAwEFR1IhAwidwQx6xttU+RMpr2FzM9s4jOrQwjH3IzedG5kDCwLcIQI63ZBPPW3PWd25BrDe4jUpt/+57VDl6GFRkmhgIh8Oc1KuIgYCOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnMQ2QxqTwAAAIAAAACAAwAAgCIGAwidwQx6xttU+RMpr2FzM9s4jOrQwjH3IzedG5kDCwLcENkMak8AAACAAAAAgAIAAIAAIgIDqaTDf1mW06ol26xrVwrwZQOUSSlCRgs1R1Ptnuylh3EQ2QxqTwAAAIAAAACABAAAgAAiAgJ/Y5l1fS7/VaE2rQLGhLGDi2VW5fG2s0KCqUtrUAUQlhDZDGpPAAAAgAAAAIAFAACAAA==\"\n             ],\n-            \"result\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgf0cwRAIgdAGK1BgAl7hzMjwAFXILNoTMgSOJEEjn282bVa1nnJkCIHPTabdA4+tT3O+jOCPIBwUUylWn3ZVE8VfBZ5EyYRGMASICAtq2H/SaFNtqfQKwzR+7ePxLGDErW05U2uTbovv+9TbXSDBFAiEA9hA4swjcHahlo0hSdG8BV3KTQgjG0kRUOTzZm98iF3cCIAVuZ1pnWm0KArhbFOXikHTYolqbV2C+ooFvZhkQoAbqAQEDBAEAAAABBEdSIQKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfyEC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtdSriIGApWDvzmuCmCXR60Zmt3WNPphCFWdbFzTm0whg/GrluB/ENkMak8AAACAAAAAgAAAAIAiBgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU21xDZDGpPAAAAgAAAAIABAACAAAEBIADC6wsAAAAAF6kUt/X69A49QKWkWbHbNTXyty+pIeiHIgIDCJ3BDHrG21T5EymvYXMz2ziM6tDCMfcjN50bmQMLAtxHMEQCIGLrelVhB6fHP0WsSrWh3d9vcHX7EnWWmn84Pv/3hLyyAiAMBdu3Rw2/LwhVfdNWxzJcHtMJE+mWzThAlF2xIijaXwEiAgI63ZBPPW3PWd25BrDe4jUpt/+57VDl6GFRkmhgIh8Oc0cwRAIgZfRbpZmLWaJ//hp77QFq8fH5DVSzqo90UKpfVqJRA70CIH9yRwOtHtuWaAsoS1bU/8uI9/t1nqu+CKow8puFE4PSAQEDBAEAAAABBCIAIIwjUxc3Q7WV37Sge3K6jkLjeX2nTof+fZ10l+OyAokDAQVHUiEDCJ3BDHrG21T5EymvYXMz2ziM6tDCMfcjN50bmQMLAtwhAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zUq4iBgI63ZBPPW3PWd25BrDe4jUpt/+57VDl6GFRkmhgIh8OcxDZDGpPAAAAgAAAAIADAACAIgYDCJ3BDHrG21T5EymvYXMz2ziM6tDCMfcjN50bmQMLAtwQ2QxqTwAAAIAAAACAAgAAgAAiAgOppMN/WZbTqiXbrGtXCvBlA5RJKUJGCzVHU+2e7KWHcRDZDGpPAAAAgAAAAIAEAACAACICAn9jmXV9Lv9VoTatAsaEsYOLZVbl8bazQoKpS2tQBRCWENkMak8AAACAAAAAgAUAAIAA\"\n+            \"result\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgf0cwRAIgdAGK1BgAl7hzMjwAFXILNoTMgSOJEEjn282bVa1nnJkCIHPTabdA4+tT3O+jOCPIBwUUylWn3ZVE8VfBZ5EyYRGMASICAtq2H/SaFNtqfQKwzR+7ePxLGDErW05U2uTbovv+9TbXRzBEAiBjGpif5zipKtAZhgIzEsGSFP4oArOeXLwaw2eIBsaSwwIgOdtsOHvSZ3Ft/bPU2NpQuOhdITMmunx9qqTAzkHrkiMBAQMEAQAAAAEER1IhApWDvzmuCmCXR60Zmt3WNPphCFWdbFzTm0whg/GrluB/IQLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU211KuIgYClYO/Oa4KYJdHrRma3dY0+mEIVZ1sXNObTCGD8auW4H8Q2QxqTwAAAIAAAACAAAAAgCIGAtq2H/SaFNtqfQKwzR+7ePxLGDErW05U2uTbovv+9TbXENkMak8AAACAAAAAgAEAAIAAAQEgAMLrCwAAAAAXqRS39fr0Dj1ApaRZsds1NfK3L6kh6IciAgMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3EcwRAIgYut6VWEHp8c/RaxKtaHd329wdfsSdZaafzg+//eEvLICIAwF27dHDb8vCFV901bHMlwe0wkT6ZbNOECUXbEiKNpfASICAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zRzBEAiBl9FulmYtZon/+GnvtAWrx8fkNVLOqj3RQql9WolEDvQIgf3JHA60e25ZoCyhLVtT/y4j3+3Weq74IqjDym4UTg9IBAQMEAQAAAAEEIgAgjCNTFzdDtZXftKB7crqOQuN5fadOh/59nXSX47ICiQMBBUdSIQMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3CECOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNSriIGAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zENkMak8AAACAAAAAgAMAAIAiBgMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3BDZDGpPAAAAgAAAAIACAACAACICA6mkw39ZltOqJdusa1cK8GUDlEkpQkYLNUdT7Z7spYdxENkMak8AAACAAAAAgAQAAIAAIgICf2OZdX0u/1WhNq0CxoSxg4tlVuXxtrNCgqlLa1AFEJYQ2QxqTwAAAIAAAACABQAAgAA=\"\n         },\n         {\n             \"combine\" : ["
      },
      {
        "sha": "99c4131d616bf61b242406abd6f9f4ea19632173",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a2960f73eb0994a1f9a6c9f03b425c718434d53/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a2960f73eb0994a1f9a6c9f03b425c718434d53/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=4a2960f73eb0994a1f9a6c9f03b425c718434d53",
        "patch": "@@ -168,9 +168,11 @@ def run_test(self):\n \n         # Signer tests\n         for i, signer in enumerate(signers):\n+            self.nodes[2].createwallet(\"wallet{}\".format(i))\n+            wrpc = self.nodes[2].get_wallet_rpc(\"wallet{}\".format(i))\n             for key in signer['privkeys']:\n-                self.nodes[i].importprivkey(key)\n-            signed_tx = self.nodes[i].walletprocesspsbt(signer['psbt'])['psbt']\n+                wrpc.importprivkey(key)\n+            signed_tx = wrpc.walletprocesspsbt(signer['psbt'])['psbt']\n             assert_equal(signed_tx, signer['result'])\n \n         # Combiner test"
      }
    ]
  },
  {
    "sha": "3d827bee699abffe61d99099d9f7e813b4acc2a5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZDgyN2JlZTY5OWFiZmZlNjFkOTkwOTlkOWY3ZTgxM2I0YWNjMmE1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-08-16T10:02:09Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-08-16T10:02:23Z"
      },
      "message": "qt: Pre-rc1 translations update\n\nTree-SHA512: 11d0d6a23f47e428661b33fa175aa97cc6841452c0c55845fdb0a903a0b147cd6df65e8fdab8b98823bf411018d5d85006af8c2cf14597286e9e284764d15041",
      "tree": {
        "sha": "a3aa68d1ea062aff02be2eb62c9ecf78bdc81a10",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a3aa68d1ea062aff02be2eb62c9ecf78bdc81a10"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3d827bee699abffe61d99099d9f7e813b4acc2a5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJbdUuvAAoJEB5K7WKYbNJd6AkH/0cfyU1hhRw8Ka3fyB0HEnMl\nS1iSuL5xgaQq8iKEdflVVdlbHAUz/xQtfoiv7dr/+ywfQtyQssT9C3wNd2iufpy7\nwwLwHRC34NjImkBZsPL2esK4lvJ6mbV7AldV6ujXdyYWwq29Wfv0122UcN4OlYWL\n4Sll0r3nxhaDptqaXbHTVZ+4/5nAlNkqtBFmTGPrskKi9FgqMs/0Sabt4J5Jf283\n7DHkbttrFj3vJGj0cPDWIsIN/FOlg8sWXEGTE+xv4wQHWtL5lQxibOgJ8apahHpe\nUI9rg8vXM7g4BKZ8YcFLyAWePxI1fdeDycSk1NEZlcRKjjw3TrLgN3mn19qAIsE=\n=asz5\n-----END PGP SIGNATURE-----",
        "payload": "tree a3aa68d1ea062aff02be2eb62c9ecf78bdc81a10\nparent 4a2960f73eb0994a1f9a6c9f03b425c718434d53\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1534413729 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1534413743 +0200\n\nqt: Pre-rc1 translations update\n\nTree-SHA512: 11d0d6a23f47e428661b33fa175aa97cc6841452c0c55845fdb0a903a0b147cd6df65e8fdab8b98823bf411018d5d85006af8c2cf14597286e9e284764d15041\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d827bee699abffe61d99099d9f7e813b4acc2a5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3d827bee699abffe61d99099d9f7e813b4acc2a5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d827bee699abffe61d99099d9f7e813b4acc2a5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4a2960f73eb0994a1f9a6c9f03b425c718434d53",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a2960f73eb0994a1f9a6c9f03b425c718434d53",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4a2960f73eb0994a1f9a6c9f03b425c718434d53"
      }
    ],
    "stats": {
      "total": 188,
      "additions": 116,
      "deletions": 72
    },
    "files": [
      {
        "sha": "c7a2422c8a6b811b33870a30699bf36ea857373d",
        "filename": "src/qt/locale/bitcoin_da.ts",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_da.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_da.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_da.ts?ref=3d827bee699abffe61d99099d9f7e813b4acc2a5",
        "patch": "@@ -3199,6 +3199,10 @@ Note: Siden gebyret er kalkuleret p\u00e5 en per-byte basis, et gebyr p\u00e5 \"100 satos\n         <source>Error reading %s! All keys read correctly, but transaction data or address book entries might be missing or incorrect.</source>\n         <translation>Fejl under l\u00e6sning af %s! Alle n\u00f8gler blev l\u00e6st korrekt, men transaktionsdata eller indgange i adressebogen kan mangle eller v\u00e6re ukorrekte.</translation>\n     </message>\n+    <message>\n+        <source>Group outputs by address, selecting all or none, instead of selecting on a per-output basis. Privacy is improved as an address is only used once (unless someone sends to it after spending from it), but may result in slightly higher fees as suboptimal coin selection may result due to the added limitation (default: %u)</source>\n+        <translation>Grupp\u00e9r output efter adresse og v\u00e6lg alle eller ingen, i stedet for at v\u00e6lge p\u00e5 per-output-basis. H\u00f8jere sikring af privatliv, da en adresse kun bruges \u00e9n gang (med mindre nogen sender til en adresse efter den er brugt), men kan resultere i en anelse h\u00f8jere gebyrer, da ikke-optimal valg af output-adresser kan forekomme p\u00e5 grund af den tilf\u00f8jede begr\u00e6nsning (standard: %u)</translation>\n+    </message>\n     <message>\n         <source>Please check that your computer's date and time are correct! If your clock is wrong, %s will not work properly.</source>\n         <translation>Unders\u00f8g venligst at din computers dato og klokkeslet er korrekt indstillet! Hvis der er fejl i disse, vil %s ikke fungere korrekt.</translation>\n@@ -3339,6 +3343,10 @@ Note: Siden gebyret er kalkuleret p\u00e5 en per-byte basis, et gebyr p\u00e5 \"100 satos\n         <source>Invalid amount for -fallbackfee=&lt;amount&gt;: '%s'</source>\n         <translation>Ugyldigt bel\u00f8b for -fallbackfee=&lt;bel\u00f8b&gt;: \u201c%s\u201d</translation>\n     </message>\n+    <message>\n+        <source>Specified blocks directory \"%s\" does not exist.</source>\n+        <translation>Angivet blokmappe \u201c%s\u201d eksisterer ikke.</translation>\n+    </message>\n     <message>\n         <source>Upgrading txindex database</source>\n         <translation>Opgraderer txindex database</translation>\n@@ -3479,12 +3487,6 @@ Note: Siden gebyret er kalkuleret p\u00e5 en per-byte basis, et gebyr p\u00e5 \"100 satos\n         <source>Signing transaction failed</source>\n         <translation>Signering af transaktion mislykkedes</translation>\n     </message>\n-    <message>\n-        <source>Specified blocks directory \"%s\" does not exist.\n-</source>\n-        <translation>Specificeret blokke mappe \"%s\" eksisterer ikke. \n-</translation>\n-    </message>\n     <message>\n         <source>The transaction amount is too small to pay the fee</source>\n         <translation>Transaktionsbel\u00f8bet er for lille til at betale gebyret</translation>"
      },
      {
        "sha": "06c1a54d40b5efe4c3b14acf17801d905e24b7b6",
        "filename": "src/qt/locale/bitcoin_de.ts",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_de.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_de.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_de.ts?ref=3d827bee699abffe61d99099d9f7e813b4acc2a5",
        "patch": "@@ -3336,6 +3336,10 @@ Hinweis: Eine Geb\u00fchr von \"100 Satoshis pro kB\" bei einer Gr\u00f6\u00dfe der Transaktio\n         <source>Invalid amount for -fallbackfee=&lt;amount&gt;: '%s'</source>\n         <translation>Ung\u00fcltiger Betrag f\u00fcr -fallbackfee=&lt;amount&gt;: '%s'</translation>\n     </message>\n+    <message>\n+        <source>Specified blocks directory \"%s\" does not exist.</source>\n+        <translation>Angegebener Bl\u00f6cke-Ordner \"%s\" existiert nicht.</translation>\n+    </message>\n     <message>\n         <source>Upgrading txindex database</source>\n         <translation>Erneuern der txindex Datenbank</translation>\n@@ -3484,12 +3488,6 @@ Hinweis: Eine Geb\u00fchr von \"100 Satoshis pro kB\" bei einer Gr\u00f6\u00dfe der Transaktio\n         <source>Specified -walletdir \"%s\" is not a directory</source>\n         <translation>Angegebenes Verzeichniss \"%s\" ist kein Verzeichniss</translation>\n     </message>\n-    <message>\n-        <source>Specified blocks directory \"%s\" does not exist.\n-</source>\n-        <translation>Angegebenes 'blocks'-Verzeichnis \"%s\" existiert nicht.\n-</translation>\n-    </message>\n     <message>\n         <source>The transaction amount is too small to pay the fee</source>\n         <translation>Der Transaktionsbetrag ist zu niedrig, um die Geb\u00fchr zu bezahlen.</translation>"
      },
      {
        "sha": "ef4ac2d4aa797de872a17cb32b0daf700e674304",
        "filename": "src/qt/locale/bitcoin_el_GR.ts",
        "status": "modified",
        "additions": 37,
        "deletions": 1,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_el_GR.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_el_GR.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_el_GR.ts?ref=3d827bee699abffe61d99099d9f7e813b4acc2a5",
        "patch": "@@ -610,6 +610,14 @@\n         <source>Copy transaction ID</source>\n         <translation>\u0391\u03bd\u03c4\u03b9\u03b3\u03c1\u03b1\u03c6\u03ae \u03c4\u03b1\u03c5\u03c4\u03cc\u03c4\u03b7\u03c4\u03b1\u03c2 \u03c3\u03c5\u03bd\u03b1\u03bb\u03bb\u03b1\u03b3\u03ae\u03c2</translation>\n     </message>\n+    <message>\n+        <source>Copy quantity</source>\n+        <translation>\u0391\u03bd\u03c4\u03b9\u03b3\u03c1\u03b1\u03c6\u03ae \u03c0\u03bf\u03c3\u03cc\u03c4\u03b7\u03c4\u03b1\u03c2</translation>\n+    </message>\n+    <message>\n+        <source>Copy fee</source>\n+        <translation>\u0391\u03bd\u03c4\u03b9\u03b3\u03c1\u03b1\u03c6\u03ae \u03c4\u03b5\u03bb\u03ce\u03bd</translation>\n+    </message>\n     <message>\n         <source>yes</source>\n         <translation>\u03bd\u03b1\u03b9</translation>\n@@ -661,7 +669,27 @@\n         <source>Edit sending address</source>\n         <translation> \u0395\u03c0\u03b5\u03be\u03b5\u03c1\u03b3\u03b1\u03c3\u03af\u03b1 \u03b4\u03b9\u03b5\u03cd\u03b8\u03c5\u03bd\u03c3\u03b7\u03c2 \u03b1\u03c0\u03bf\u03c3\u03c4\u03bf\u03bb\u03ae\u03c2</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>The entered address \"%1\" is not a valid Bitcoin address.</source>\n+        <translation>\u0397 \u03b4\u03b9\u03b5\u03cd\u03b8\u03c5\u03bd\u03c3\u03b7 \"%1\" \u03b4\u03b5\u03bd \u03b5\u03af\u03bd\u03b1\u03b9 \u03ad\u03b3\u03ba\u03c5\u03c1\u03b7 Bitcoin \u03b4\u03b9\u03b5\u03cd\u03b8\u03c5\u03bd\u03c3\u03b7.</translation>\n+    </message>\n+    <message>\n+        <source>Address \"%1\" already exists as a receiving address with label \"%2\" and so cannot be added as a sending address.</source>\n+        <translation>\u0397 \u03b4\u03b9\u03b5\u03cd\u03b8\u03c5\u03bd\u03c3\u03b7 \"%1\"  \u03c5\u03c0\u03ac\u03c1\u03c7\u03b5\u03b9 \u03ae\u03b4\u03b7 \u03c9\u03c2 \u03b4\u03b9\u03b5\u03cd\u03b8\u03c5\u03bd\u03c3\u03b7\u03c2 \u03bb\u03ae\u03c8\u03b7\u03c2 \u03bc\u03b5 \u03b5\u03c4\u03b9\u03ba\u03ad\u03c4\u03b1 \"%2\" \u03ba\u03b1\u03b9 \u03b3\u03b9\u03b1\u03c5\u03c4\u03cc \u03c4\u03bf\u03bd \u03bb\u03cc\u03b3\u03bf \u03b4\u03b5\u03bd \u03bc\u03c0\u03bf\u03c1\u03b5\u03af \u03bd\u03b1 \u03c0\u03c1\u03bf\u03c3\u03c4\u03b5\u03b8\u03b5\u03af \u03c9\u03c2 \u03b4\u03b9\u03b5\u03cd\u03b8\u03c5\u03bd\u03c3\u03b7 \u03b1\u03c0\u03bf\u03c3\u03c4\u03bf\u03bb\u03ae\u03c2.</translation>\n+    </message>\n+    <message>\n+        <source>The entered address \"%1\" is already in the address book with label \"%2\".</source>\n+        <translation>\u0397 \u03b4\u03b9\u03b5\u03cd\u03b8\u03c5\u03bd\u03c3\u03b7 \"%1\" \u03b2\u03c1\u03af\u03c3\u03ba\u03b5\u03c4\u03b1\u03b9 \u03ae\u03b4\u03b7 \u03c3\u03c4\u03bf \u03b2\u03b9\u03b2\u03bb\u03af\u03bf \u03b4\u03b9\u03b5\u03c5\u03b8\u03cd\u03bd\u03c3\u03b5\u03c9\u03bd \u03bc\u03b5 \u03b5\u03c4\u03b9\u03ba\u03ad\u03c4\u03b1 \"%2\".</translation>\n+    </message>\n+    <message>\n+        <source>Could not unlock wallet.</source>\n+        <translation>\u0394\u03b5\u03bd \u03b5\u03af\u03bd\u03b1\u03b9 \u03b4\u03c5\u03bd\u03b1\u03c4\u03cc \u03c4\u03bf \u03be\u03b5\u03ba\u03bb\u03b5\u03af\u03b4\u03c9\u03bc\u03b1 \u03c4\u03bf\u03c5 \u03c0\u03bf\u03c1\u03c4\u03bf\u03c6\u03bf\u03bb\u03b9\u03bf\u03cd.</translation>\n+    </message>\n+    <message>\n+        <source>New key generation failed.</source>\n+        <translation>\u0397 \u03b4\u03b7\u03bc\u03b9\u03bf\u03c5\u03c1\u03b3\u03af\u03b1 \u03bd\u03ad\u03bf\u03c5 \u03ba\u03bb\u03b5\u03b9\u03b4\u03b9\u03bf\u03cd \u03b1\u03c0\u03ad\u03c4\u03c5\u03c7\u03b5.</translation>\n+    </message>\n+</context>\n <context>\n     <name>FreespaceChecker</name>\n     <message>\n@@ -1488,10 +1516,18 @@\n         <source>S&amp;end</source>\n         <translation>\u0391\u03c0\u03bf\u03c3\u03c4\u03bf\u03bb\u03ae</translation>\n     </message>\n+    <message>\n+        <source>Copy quantity</source>\n+        <translation>\u0391\u03bd\u03c4\u03b9\u03b3\u03c1\u03b1\u03c6\u03ae \u03c0\u03bf\u03c3\u03cc\u03c4\u03b7\u03c4\u03b1\u03c2</translation>\n+    </message>\n     <message>\n         <source>Copy amount</source>\n         <translation>\u0391\u03bd\u03c4\u03b9\u03b3\u03c1\u03b1\u03c6\u03ae \u03c0\u03bf\u03c3\u03bf\u03cd</translation>\n     </message>\n+    <message>\n+        <source>Copy fee</source>\n+        <translation>\u0391\u03bd\u03c4\u03b9\u03b3\u03c1\u03b1\u03c6\u03ae \u03c4\u03b5\u03bb\u03ce\u03bd</translation>\n+    </message>\n     <message>\n         <source>Transaction fee</source>\n         <translation>\u039a\u03cc\u03c3\u03c4\u03bf\u03c2 \u03c3\u03c5\u03bd\u03b1\u03bb\u03bb\u03b1\u03b3\u03ae\u03c2</translation>"
      },
      {
        "sha": "f55a7ce9c4cacdb1deb77e4de134fe845154187c",
        "filename": "src/qt/locale/bitcoin_es.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_es.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_es.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_es.ts?ref=3d827bee699abffe61d99099d9f7e813b4acc2a5",
        "patch": "@@ -3490,12 +3490,6 @@ Nota: Dado que la comisi\u00f3n se calcula por byte, una comisi\u00f3n de \"100 satoshis\n         <source>Specified -walletdir \"%s\" is not a directory</source>\n         <translation>El -walletdir \"%s\" indicado no es un directorio</translation>\n     </message>\n-    <message>\n-        <source>Specified blocks directory \"%s\" does not exist.\n-</source>\n-        <translation>El directorio de bloques especificado \"%s\" no existe.\n-</translation>\n-    </message>\n     <message>\n         <source>The transaction amount is too small to pay the fee</source>\n         <translation>Cantidad de la transacci\u00f3n demasiado peque\u00f1a para pagar la comisi\u00f3n</translation>"
      },
      {
        "sha": "8df48710252abad55642e7815094f1adad61c133",
        "filename": "src/qt/locale/bitcoin_fi.ts",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_fi.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_fi.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_fi.ts?ref=3d827bee699abffe61d99099d9f7e813b4acc2a5",
        "patch": "@@ -325,6 +325,14 @@\n         <source>Open &amp;URI...</source>\n         <translation>Avaa &amp;URI...</translation>\n     </message>\n+    <message>\n+        <source>Wallet:</source>\n+        <translation>Lompakko:</translation>\n+    </message>\n+    <message>\n+        <source>default wallet</source>\n+        <translation>oletuslompakko</translation>\n+    </message>\n     <message>\n         <source>Click to disable network activity.</source>\n         <translation>Paina poistaaksesi verkkoyhteysilmaisin k\u00e4yt\u00f6st\u00e4.</translation>\n@@ -345,6 +353,10 @@\n         <source>Reindexing blocks on disk...</source>\n         <translation>Ladataan lohkoindeksi\u00e4...</translation>\n     </message>\n+    <message>\n+        <source>Proxy is &lt;b&gt;enabled&lt;/b&gt;: %1</source>\n+        <translation>V\u00e4lipalvelin on &lt;b&gt;k\u00e4yt\u00f6ss\u00e4&lt;/b&gt;: %1</translation>\n+    </message>\n     <message>\n         <source>Send coins to a Bitcoin address</source>\n         <translation>L\u00e4het\u00e4 kolikoita Bitcoin-osoitteeseen</translation>\n@@ -441,6 +453,10 @@\n         <source>&amp;Command-line options</source>\n         <translation>&amp;Komentorivin valinnat</translation>\n     </message>\n+    <message numerus=\"yes\">\n+        <source>%n active connection(s) to Bitcoin network</source>\n+        <translation><numerusform>%n aktiivinen yhteys Bitcoin-verkkoon</numerusform><numerusform>%n aktiivista yhteytt\u00e4 Bitcoin-verkkoon</numerusform></translation>\n+    </message>\n     <message>\n         <source>Indexing blocks on disk...</source>\n         <translation>Ladataan lohkoindeksi\u00e4...</translation>\n@@ -449,6 +465,10 @@\n         <source>Processing blocks on disk...</source>\n         <translation>K\u00e4sitell\u00e4\u00e4n lohkoja levyll\u00e4...</translation>\n     </message>\n+    <message numerus=\"yes\">\n+        <source>Processed %n block(s) of transaction history.</source>\n+        <translation><numerusform>K\u00e4sitelty %n lohko rahansiirtohistoriasta.</numerusform><numerusform>K\u00e4sitelty %n lohkoa rahansiirtohistoriasta.</numerusform></translation>\n+    </message>\n     <message>\n         <source>%1 behind</source>\n         <translation>%1 j\u00e4ljess\u00e4</translation>\n@@ -1708,6 +1728,10 @@\n         <source>&amp;Unban</source>\n         <translation>&amp;Poista esto</translation>\n     </message>\n+    <message>\n+        <source>default wallet</source>\n+        <translation>oletuslompakko</translation>\n+    </message>\n     <message>\n         <source>Welcome to the %1 RPC console.</source>\n         <translation>Tervetuloa %1 RPC-konsoliin.</translation>"
      },
      {
        "sha": "5faba54d5b797165961b9c9dc99305dfed38fac8",
        "filename": "src/qt/locale/bitcoin_fr.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_fr.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_fr.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_fr.ts?ref=3d827bee699abffe61d99099d9f7e813b4acc2a5",
        "patch": "@@ -3479,12 +3479,6 @@ Note\u00a0: Les frais \u00e9tant calcul\u00e9s par octet, des frais de \u00ab\u2009100 satoshis par\n         <source>Signing transaction failed</source>\n         <translation>\u00c9chec de signature de la transaction</translation>\n     </message>\n-    <message>\n-        <source>Specified blocks directory \"%s\" does not exist.\n-</source>\n-        <translation>Le r\u00e9pertoire de blocs indiqu\u00e9 \u00ab\u00a0%s\u00a0\u00bb n\u2019existe pas.\n-</translation>\n-    </message>\n     <message>\n         <source>The transaction amount is too small to pay the fee</source>\n         <translation>Le montant de la transaction est trop bas pour que les frais soient pay\u00e9s</translation>"
      },
      {
        "sha": "284bdb39b5772232ed0160f8dd7c60c9231a62d9",
        "filename": "src/qt/locale/bitcoin_ja.ts",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_ja.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_ja.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ja.ts?ref=3d827bee699abffe61d99099d9f7e813b4acc2a5",
        "patch": "@@ -3199,6 +3199,10 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of \"100 satoshis p\n         <source>Error reading %s! All keys read correctly, but transaction data or address book entries might be missing or incorrect.</source>\n         <translation>%s \u306e\u8aad\u307f\u8fbc\u307f\u30a8\u30e9\u30fc! \u3059\u3079\u3066\u306e\u30ad\u30fc\u306f\u6b63\u3057\u304f\u8aad\u307f\u53d6\u308c\u307e\u3059\u304c\u3001\u53d6\u5f15\u30c7\u30fc\u30bf\u3084\u30a2\u30c9\u30ec\u30b9\u5e33\u306e\u30a8\u30f3\u30c8\u30ea\u304c\u5931\u308f\u308c\u305f\u304b\u3001\u6b63\u3057\u304f\u306a\u3044\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002</translation>\n     </message>\n+    <message>\n+        <source>Group outputs by address, selecting all or none, instead of selecting on a per-output basis. Privacy is improved as an address is only used once (unless someone sends to it after spending from it), but may result in slightly higher fees as suboptimal coin selection may result due to the added limitation (default: %u)</source>\n+        <translation>\u51fa\u529b\u3054\u3068\u3067\u306f\u306a\u304f\u3001\u30a2\u30c9\u30ec\u30b9\u5358\u4f4d\u306b\u51fa\u529b\u3092\u307e\u3068\u3081\u3066\u9078\u629e\u3057\u307e\u3059\u3002(\u5f8c\u304b\u3089\u307e\u305f\u305d\u306e\u30a2\u30c9\u30ec\u30b9\u306b\u652f\u6255\u308f\u308c\u306a\u3044\u9650\u308a)\u30a2\u30c9\u30ec\u30b9\u304c\u4e00\u5ea6\u3057\u304b\u4f7f\u7528\u3055\u308c\u306a\u3044\u305f\u3081\u30d7\u30e9\u30a4\u30d0\u30b7\u30fc\u304c\u5411\u4e0a\u3057\u307e\u3059\u3002\u305f\u3060\u3057\u8ffd\u52a0\u306e\u5236\u9650\u306b\u3088\u308a\u6700\u9069\u3067\u306f\u306a\u3044\u30b3\u30a4\u30f3\u9078\u629e\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306b\u3001\u308f\u305a\u304b\u306b\u9ad8\u3044\u624b\u6570\u6599\u3068\u306a\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002(\u521d\u671f\u5024: %u)</translation>\n+    </message>\n     <message>\n         <source>Please check that your computer's date and time are correct! If your clock is wrong, %s will not work properly.</source>\n         <translation>\u3042\u306a\u305f\u306ePC\u306e\u65e5\u4ed8\u3068\u6642\u523b\u304c\u6b63\u3057\u3044\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u4e0b\u3055\u3044\uff01 \u3082\u3057\u3042\u306a\u305f\u306e\u6642\u8a08\u304c\u6b63\u3057\u304f\u306a\u3051\u308c\u3070 %s \u304c\u6b63\u78ba\u306b\u52d5\u4f5c\u3057\u307e\u305b\u3093\u3002</translation>\n@@ -3340,6 +3344,10 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of \"100 satoshis p\n         <source>Invalid amount for -fallbackfee=&lt;amount&gt;: '%s'</source>\n         <translation>\u4e0d\u6b63\u306a\u984d -fallbackfee=&lt;amount&gt;: '%s'</translation>\n     </message>\n+    <message>\n+        <source>Specified blocks directory \"%s\" does not exist.</source>\n+        <translation>\u6307\u5b9a\u306e\u30d6\u30ed\u30c3\u30af\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\"%s\"\u306f\u5b58\u5728\u3057\u307e\u305b\u3093\uff61</translation>\n+    </message>\n     <message>\n         <source>Upgrading txindex database</source>\n         <translation>txindex \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u66f4\u65b0\u3057\u3066\u3044\u307e\u3059</translation>\n@@ -3480,12 +3488,6 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of \"100 satoshis p\n         <source>Signing transaction failed</source>\n         <translation>\u53d6\u5f15\u306e\u7f72\u540d\u306b\u5931\u6557\u3057\u307e\u3057\u305f</translation>\n     </message>\n-    <message>\n-        <source>Specified blocks directory \"%s\" does not exist.\n-</source>\n-        <translation>\u6307\u5b9a\u306e\u30d6\u30ed\u30c3\u30af\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\"%s\"\u304c\u5b58\u5728\u3057\u307e\u305b\u3093\uff61\n-</translation>\n-    </message>\n     <message>\n         <source>The transaction amount is too small to pay the fee</source>\n         <translation>\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u306e\u91d1\u984d\u304c\u5c0f\u3055\u3059\u304e\u3066\u624b\u6570\u6599\u3092\u652f\u6255\u3048\u307e\u305b\u3093</translation>"
      },
      {
        "sha": "9912cc76e2e3f6c108969fcf3486dcc78a9be86c",
        "filename": "src/qt/locale/bitcoin_ko_KR.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_ko_KR.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_ko_KR.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ko_KR.ts?ref=3d827bee699abffe61d99099d9f7e813b4acc2a5",
        "patch": "@@ -3488,11 +3488,6 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of \"100 satoshis p\n         <source>Specified -walletdir \"%s\" is not a directory</source>\n         <translation>\uc560\ub7ec: \uc9c0\uc815\ud55c \uc9c0\uac11 \ud3f4\ub354 \"%s\"\uc740 \ub514\ub809\ud1a0\ub9ac\uac00 \uc544\ub2d9\ub2c8\ub2e4.</translation>\n     </message>\n-    <message>\n-        <source>Specified blocks directory \"%s\" does not exist.\n-</source>\n-        <translation>\uc9c0\uc815\ud55c \ube14\ub85d \ud3f4\ub354 \"%s\"\ub294 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.</translation>\n-    </message>\n     <message>\n         <source>The transaction amount is too small to pay the fee</source>\n         <translation>\uac70\ub798\uc561\uc774 \uc218\uc218\ub8cc\ub97c \uc9c0\ubd88\ud558\uae30\uc5d4 \ub108\ubb34 \uc791\uc2b5\ub2c8\ub2e4</translation>"
      },
      {
        "sha": "747a62510fd1b3a794f92b00e7cc822cb6a412db",
        "filename": "src/qt/locale/bitcoin_nl.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_nl.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_nl.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_nl.ts?ref=3d827bee699abffe61d99099d9f7e813b4acc2a5",
        "patch": "@@ -3491,12 +3491,6 @@ Notitie: Omdat de vergoeding per byte wordt gerekend, zal een vergoeding van \"10\n         <source>Specified -walletdir \"%s\" is not a directory</source>\n         <translation>Opgegeven -walletdir \"%s\" is geen map</translation>\n     </message>\n-    <message>\n-        <source>Specified blocks directory \"%s\" does not exist.\n-</source>\n-        <translation>Opgegeven blocks map \"%s\" bestaat niet.\n-</translation>\n-    </message>\n     <message>\n         <source>The transaction amount is too small to pay the fee</source>\n         <translation>Het transactiebedrag is te klein om transactiekosten in rekening te brengen</translation>"
      },
      {
        "sha": "a1437b8808fb16b32b539d45abd4b94bf2f3881c",
        "filename": "src/qt/locale/bitcoin_pl.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_pl.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_pl.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_pl.ts?ref=3d827bee699abffe61d99099d9f7e813b4acc2a5",
        "patch": "@@ -3493,12 +3493,6 @@ Zwr\u00f3\u0107 uwag\u0119, \u017ce poprawnie zweryfikowana wiadomo\u015b\u0107 potwierdza to, \u017ce nadaw\n         <source>Specified -walletdir \"%s\" is not a directory</source>\n         <translation>Podany -walletdir \"%s\" nie jest katalogiem</translation>\n     </message>\n-    <message>\n-        <source>Specified blocks directory \"%s\" does not exist.\n-</source>\n-        <translation>Podany folder blok\u00f3w \"%s\" nie istnieje.\n-</translation>\n-    </message>\n     <message>\n         <source>The transaction amount is too small to pay the fee</source>\n         <translation>Zbyt niska kwota transakcji by zap\u0142aci\u0107 op\u0142at\u0119</translation>"
      },
      {
        "sha": "e964838d9f814d0e20395ba5cd7913c8d1090a86",
        "filename": "src/qt/locale/bitcoin_pt_BR.ts",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_pt_BR.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_pt_BR.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_pt_BR.ts?ref=3d827bee699abffe61d99099d9f7e813b4acc2a5",
        "patch": "@@ -3335,6 +3335,11 @@ Nota:  Como a taxa \u00e9 calculada por byte, uma taxa de \"100 satoshis por kB\" por\n         <source>Invalid amount for -fallbackfee=&lt;amount&gt;: '%s'</source>\n         <translation>Quantidade inv\u00e1lida para -fallbackfee=&lt;amount&gt;: '%s'</translation>\n     </message>\n+    <message>\n+        <source>Specified blocks directory \"%s\" does not exist.</source>\n+        <translation>\n+Diret\u00f3rio de blocos especificados \"%s\" n\u00e3o existe.</translation>\n+    </message>\n     <message>\n         <source>Upgrading txindex database</source>\n         <translation>Atualizando banco de dados txindex</translation>\n@@ -3487,12 +3492,6 @@ Nota:  Como a taxa \u00e9 calculada por byte, uma taxa de \"100 satoshis por kB\" por\n         <source>Specified -walletdir \"%s\" is not a directory</source>\n         <translation>O -walletdir \"%s\" especificado n\u00e3o \u00e9 um diret\u00f3rio</translation>\n     </message>\n-    <message>\n-        <source>Specified blocks directory \"%s\" does not exist.\n-</source>\n-        <translation>O diret\u00f3rio de blocos especificado \"%s\" n\u00e3o existe.\n-</translation>\n-    </message>\n     <message>\n         <source>The transaction amount is too small to pay the fee</source>\n         <translation>A quantidade da transa\u00e7\u00e3o \u00e9 pequena demais para  pagar a taxa</translation>"
      },
      {
        "sha": "503c15259b6be5191bf58b00bdb069a85a924c58",
        "filename": "src/qt/locale/bitcoin_ro_RO.ts",
        "status": "modified",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_ro_RO.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_ro_RO.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ro_RO.ts?ref=3d827bee699abffe61d99099d9f7e813b4acc2a5",
        "patch": "@@ -325,6 +325,14 @@\n         <source>Open &amp;URI...</source>\n         <translation>Deschide &amp;URI...</translation>\n     </message>\n+    <message>\n+        <source>Wallet:</source>\n+        <translation>Portofel:</translation>\n+    </message>\n+    <message>\n+        <source>default wallet</source>\n+        <translation>portofel implicit</translation>\n+    </message>\n     <message>\n         <source>Click to disable network activity.</source>\n         <translation>Click pentru a opri activitatea retelei.</translation>\n@@ -345,6 +353,10 @@\n         <source>Reindexing blocks on disk...</source>\n         <translation>Se reindexeaz\u0103 blocurile pe disc...</translation>\n     </message>\n+    <message>\n+        <source>Proxy is &lt;b&gt;enabled&lt;/b&gt;: %1</source>\n+        <translation>Proxy este&lt;b&gt;activat&lt;/b&gt;:%1</translation>\n+    </message>\n     <message>\n         <source>Send coins to a Bitcoin address</source>\n         <translation>Trimite monede c\u0103tre o adres\u0103 Bitcoin</translation>\n@@ -511,6 +523,12 @@\n         <source>Amount: %1\n </source>\n         <translation>Sum\u0103: %1\n+</translation>\n+    </message>\n+    <message>\n+        <source>Wallet: %1\n+</source>\n+        <translation>Portofel: %1\n </translation>\n     </message>\n     <message>\n@@ -745,6 +763,14 @@\n         <source>The entered address \"%1\" is not a valid Bitcoin address.</source>\n         <translation>Adresa introdus\u0103 \"%1\" nu este o adres\u0103 Bitcoin valid\u0103.</translation>\n     </message>\n+    <message>\n+        <source>Address \"%1\" already exists as a receiving address with label \"%2\" and so cannot be added as a sending address.</source>\n+        <translation>Adresa \"%1\" exista deja ca si adresa de primire cu eticheta \"%2\" si deci nu poate fi folosita ca si adresa de trimitere.</translation>\n+    </message>\n+    <message>\n+        <source>The entered address \"%1\" is already in the address book with label \"%2\".</source>\n+        <translation>Adresa introdusa \"%1\" este deja in lista de adrese cu eticheta \"%2\"</translation>\n+    </message>\n     <message>\n         <source>Could not unlock wallet.</source>\n         <translation>Portofelul nu a putut fi deblocat.</translation>\n@@ -1748,6 +1774,10 @@\n         <source>&amp;Unban</source>\n         <translation>&amp;Unban</translation>\n     </message>\n+    <message>\n+        <source>default wallet</source>\n+        <translation>portofel implicit</translation>\n+    </message>\n     <message>\n         <source>Welcome to the %1 RPC console.</source>\n         <translation>Bun venit la consola %1 RPC.</translation>"
      },
      {
        "sha": "6a69bfe63cf309a05a1a0b3bd85a78d9f6d64ca5",
        "filename": "src/qt/locale/bitcoin_sk.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_sk.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_sk.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_sk.ts?ref=3d827bee699abffe61d99099d9f7e813b4acc2a5",
        "patch": "@@ -3436,12 +3436,6 @@\n         <source>Specified -walletdir \"%s\" is not a directory</source>\n         <translation>Uveden\u00fd -walletdir \"%s\" nie je prie\u010dinok</translation>\n     </message>\n-    <message>\n-        <source>Specified blocks directory \"%s\" does not exist.\n-</source>\n-        <translation>Uveden\u00fd prie\u010dinok s d\u00e1tami \"%s\" neexistuje.\n-</translation>\n-    </message>\n     <message>\n         <source>The transaction amount is too small to pay the fee</source>\n         <translation>Suma transakcie je pr\u00edli\u0161 mal\u00e1 na zaplatenie poplatku</translation>"
      },
      {
        "sha": "1865a8483432732cde85d221231fb1f5ff9862a4",
        "filename": "src/qt/locale/bitcoin_uk.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_uk.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_uk.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_uk.ts?ref=3d827bee699abffe61d99099d9f7e813b4acc2a5",
        "patch": "@@ -3477,12 +3477,6 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of \"100 satoshis p\n         <source>Specified -walletdir \"%s\" is not a directory</source>\n         <translation>\u0412\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \u0448\u043b\u044f\u0445 -walletdir \"%s\"\u00a0\u043d\u0435 \u0454 \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u043e\u043c</translation>\n     </message>\n-    <message>\n-        <source>Specified blocks directory \"%s\" does not exist.\n-</source>\n-        <translation>\u0412\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \u0448\u043b\u044f\u0445 \u0434\u043e \u0431\u043b\u043e\u043a\u0456\u0432 \"%s\" \u043d\u0435 \u0456\u0441\u043d\u0443\u0454\n-</translation>\n-    </message>\n     <message>\n         <source>The transaction amount is too small to pay the fee</source>\n         <translation>\u041d\u0435\u043c\u043e\u0436\u043b\u0438\u0432\u043e \u0441\u043f\u043b\u0430\u0442\u0438\u0442\u0438 \u043a\u043e\u043c\u0456\u0441\u0456\u044e \u0456\u0437-\u0437\u0430 \u043c\u0430\u043b\u043e\u0457 \u0441\u0443\u043c\u0438 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0456\u0457</translation>"
      },
      {
        "sha": "0aa7964e396f77ece0b873bd37e67c62e8d17c8a",
        "filename": "src/qt/locale/bitcoin_zh_TW.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_zh_TW.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_zh_TW.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_zh_TW.ts?ref=3d827bee699abffe61d99099d9f7e813b4acc2a5",
        "patch": "@@ -3487,12 +3487,6 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of \"100 satoshis p\n         <source>Specified -walletdir \"%s\" is not a directory</source>\n         <translation>\u4ee5 -walletdir \u6307\u5b9a\u7684\u8def\u5f91 \"%s\" \u4e0d\u662f\u500b\u76ee\u9304</translation>\n     </message>\n-    <message>\n-        <source>Specified blocks directory \"%s\" does not exist.\n-</source>\n-        <translation>\u6307\u5b9a\u7684\u5340\u584a\u76ee\u9304 \"%s\" \u4e0d\u5b58\u5728\u3002\n-</translation>\n-    </message>\n     <message>\n         <source>The transaction amount is too small to pay the fee</source>\n         <translation>\u4ea4\u6613\u91d1\u984d\u592a\u5c11\u800c\u4ed8\u4e0d\u8d77\u624b\u7e8c\u8cbb</translation>"
      }
    ]
  },
  {
    "sha": "48c845902ac044af99ceb7cacc1ea3eacfaeb913",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OGM4NDU5MDJhYzA0NGFmOTljZWI3Y2FjYzFlYTNlYWNmYWViOTEz",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2018-08-17T22:49:53Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-08-19T18:41:18Z"
      },
      "message": "depends: fix qt determinism\n\nQt's configure grabs the path to xkb's data root during configure, but the\nbuild changes in 5.8 apparently broke the handling for cross builds. As a\nresult, the string embedded in the binary depends on whether or not some files\nare present in the builder's filesystem.\n\nThe \"-xkb-config-root\" configure setting is intended to allow manual overriding\nbut it is also broken. See: https://bugreports.qt.io/browse/QTBUG-60005\n\nThis has since been fixed upstream, so just hard-code the path for now. We can\ndrop this patch when we bump to a fixed Qt.\n\nAlso, fix the \"-qt-xkbcommon-x11\" config param which was renamed. This does not\nappear to affect build results, presumably because auto-detection is working,\nbut it does not hurt to be explicit.\n\nGithub-Pull: #14000\nRebased-From: de0b4fba2fb5270dcc8d851243af9187b8ef191a",
      "tree": {
        "sha": "11531118a760cda2189164581d052f69662d78eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/11531118a760cda2189164581d052f69662d78eb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/48c845902ac044af99ceb7cacc1ea3eacfaeb913",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48c845902ac044af99ceb7cacc1ea3eacfaeb913",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/48c845902ac044af99ceb7cacc1ea3eacfaeb913",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48c845902ac044af99ceb7cacc1ea3eacfaeb913/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3d827bee699abffe61d99099d9f7e813b4acc2a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d827bee699abffe61d99099d9f7e813b4acc2a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3d827bee699abffe61d99099d9f7e813b4acc2a5"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 29,
      "deletions": 2
    },
    "files": [
      {
        "sha": "65ecadb43b521c3fbc0b7c8db95ee77d1a52cb52",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48c845902ac044af99ceb7cacc1ea3eacfaeb913/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48c845902ac044af99ceb7cacc1ea3eacfaeb913/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=48c845902ac044af99ceb7cacc1ea3eacfaeb913",
        "patch": "@@ -8,7 +8,7 @@ $(package)_dependencies=openssl zlib\n $(package)_linux_dependencies=freetype fontconfig libxcb libX11 xproto libXext\n $(package)_build_subdir=qtbase\n $(package)_qt_libs=corelib network widgets gui plugins testlib\n-$(package)_patches=fix_qt_pkgconfig.patch mac-qmake.conf fix_configure_mac.patch fix_no_printer.patch fix_rcc_determinism.patch\n+$(package)_patches=fix_qt_pkgconfig.patch mac-qmake.conf fix_configure_mac.patch fix_no_printer.patch fix_rcc_determinism.patch xkb-default.patch\n \n $(package)_qttranslations_file_name=qttranslations-$($(package)_suffix)\n $(package)_qttranslations_sha256_hash=9822084f8e2d2939ba39f4af4c0c2320e45d5996762a9423f833055607604ed8\n@@ -83,7 +83,7 @@ $(package)_config_opts_darwin += -device-option MAC_TARGET=$(host)\n $(package)_config_opts_darwin += -device-option MAC_LD64_VERSION=$(LD64_VERSION)\n endif\n \n-$(package)_config_opts_linux  = -qt-xkbcommon\n+$(package)_config_opts_linux  = -qt-xkbcommon-x11\n $(package)_config_opts_linux += -qt-xcb\n $(package)_config_opts_linux += -system-freetype\n $(package)_config_opts_linux += -no-feature-sessionmanager\n@@ -136,6 +136,7 @@ define $(package)_preprocess_cmds\n   patch -p1 -i $($(package)_patch_dir)/fix_configure_mac.patch &&\\\n   patch -p1 -i $($(package)_patch_dir)/fix_no_printer.patch &&\\\n   patch -p1 -i $($(package)_patch_dir)/fix_rcc_determinism.patch &&\\\n+  patch -p1 -i $($(package)_patch_dir)/xkb-default.patch &&\\\n   echo \"!host_build: QMAKE_CFLAGS     += $($(package)_cflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n   echo \"!host_build: QMAKE_CXXFLAGS   += $($(package)_cxxflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n   echo \"!host_build: QMAKE_LFLAGS     += $($(package)_ldflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\"
      },
      {
        "sha": "165abf3e2e7a6d7cdbe7b960ec15dbcfaf0a9dfd",
        "filename": "depends/patches/qt/xkb-default.patch",
        "status": "added",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48c845902ac044af99ceb7cacc1ea3eacfaeb913/depends/patches/qt/xkb-default.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48c845902ac044af99ceb7cacc1ea3eacfaeb913/depends/patches/qt/xkb-default.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/xkb-default.patch?ref=48c845902ac044af99ceb7cacc1ea3eacfaeb913",
        "patch": "@@ -0,0 +1,26 @@\n+--- old/qtbase/src/gui/configure.pri\t2018-06-06 17:28:10.000000000 -0400\n++++ new/qtbase/src/gui/configure.pri\t2018-08-17 18:43:01.589384567 -0400\n+@@ -43,18 +43,11 @@\n+ }\n+\n+ defineTest(qtConfTest_xkbConfigRoot) {\n+-    qtConfTest_getPkgConfigVariable($${1}): return(true)\n+-\n+-    for (dir, $$list(\"/usr/share/X11/xkb\", \"/usr/local/share/X11/xkb\")) {\n+-        exists($$dir) {\n+-            $${1}.value = $$dir\n+-            export($${1}.value)\n+-            $${1}.cache += value\n+-            export($${1}.cache)\n+-            return(true)\n+-        }\n+-    }\n+-    return(false)\n++    $${1}.value = \"/usr/share/X11/xkb\"\n++    export($${1}.value)\n++    $${1}.cache += value\n++    export($${1}.cache)\n++    return(true)\n+ }\n+\n+ defineTest(qtConfTest_qpaDefaultPlatform) {"
      }
    ]
  },
  {
    "sha": "1ffd67f11fae8fba6c1f839164ad80224fc5ad1d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZmZkNjdmMTFmYWU4ZmJhNmMxZjgzOTE2NGFkODAyMjRmYzVhZDFk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-08-21T06:21:18Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-08-21T06:25:13Z"
      },
      "message": "Merge #14005: [0.17] depends: fix qt determinism\n\n48c845902ac044af99ceb7cacc1ea3eacfaeb913 depends: fix qt determinism (Cory Fields)\n\nPull request description:\n\n  Backport for rc2\n\nTree-SHA512: 990a1b32ca8c80b22595c4b19e801d5033e42b7e86da0f80028e708131a136f6383d7510dab8bd7cd12fe8533f73246fe78c72a8a22a54eb136b2bfada1e67ea",
      "tree": {
        "sha": "11531118a760cda2189164581d052f69662d78eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/11531118a760cda2189164581d052f69662d78eb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1ffd67f11fae8fba6c1f839164ad80224fc5ad1d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJbe7BJAAoJEB5K7WKYbNJd5/MH/34JQw0hDru19PVbAZKfk9F1\nViTXuamUpAOrtHr/zzuKcsFUo1FVFXj5ECA6TaJybhXuNnFAgw85xIvAxvSQGKdR\nGm40Ospuvh+uW1QLkRc1Ljq7nT8rc4HAx5QoVp3IJBXcBYkaTcdEkPyzeGe6C+w5\nDx0YhPBTug+9DODwYqxHVGvlRkEWtUdLa1HMkkQV421JvHWy3L6pVdDO4c/NBZ0E\nVX0PWEDD13GTioSVqa0XcP0mWAADZRSUNxkKy2QMSIAn71C4AM6x1h0QXhL1NPTM\nvRFBASBlnpzoAYKfn4zF542y8qATrsPjOJ06uRX2hCTk7TlNA8edQn3VJrdv3iA=\n=8XkH\n-----END PGP SIGNATURE-----",
        "payload": "tree 11531118a760cda2189164581d052f69662d78eb\nparent 3d827bee699abffe61d99099d9f7e813b4acc2a5\nparent 48c845902ac044af99ceb7cacc1ea3eacfaeb913\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1534832478 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1534832713 +0200\n\nMerge #14005: [0.17] depends: fix qt determinism\n\n48c845902ac044af99ceb7cacc1ea3eacfaeb913 depends: fix qt determinism (Cory Fields)\n\nPull request description:\n\n  Backport for rc2\n\nTree-SHA512: 990a1b32ca8c80b22595c4b19e801d5033e42b7e86da0f80028e708131a136f6383d7510dab8bd7cd12fe8533f73246fe78c72a8a22a54eb136b2bfada1e67ea\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ffd67f11fae8fba6c1f839164ad80224fc5ad1d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1ffd67f11fae8fba6c1f839164ad80224fc5ad1d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ffd67f11fae8fba6c1f839164ad80224fc5ad1d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3d827bee699abffe61d99099d9f7e813b4acc2a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d827bee699abffe61d99099d9f7e813b4acc2a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3d827bee699abffe61d99099d9f7e813b4acc2a5"
      },
      {
        "sha": "48c845902ac044af99ceb7cacc1ea3eacfaeb913",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48c845902ac044af99ceb7cacc1ea3eacfaeb913",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/48c845902ac044af99ceb7cacc1ea3eacfaeb913"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 29,
      "deletions": 2
    },
    "files": [
      {
        "sha": "65ecadb43b521c3fbc0b7c8db95ee77d1a52cb52",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ffd67f11fae8fba6c1f839164ad80224fc5ad1d/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ffd67f11fae8fba6c1f839164ad80224fc5ad1d/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=1ffd67f11fae8fba6c1f839164ad80224fc5ad1d",
        "patch": "@@ -8,7 +8,7 @@ $(package)_dependencies=openssl zlib\n $(package)_linux_dependencies=freetype fontconfig libxcb libX11 xproto libXext\n $(package)_build_subdir=qtbase\n $(package)_qt_libs=corelib network widgets gui plugins testlib\n-$(package)_patches=fix_qt_pkgconfig.patch mac-qmake.conf fix_configure_mac.patch fix_no_printer.patch fix_rcc_determinism.patch\n+$(package)_patches=fix_qt_pkgconfig.patch mac-qmake.conf fix_configure_mac.patch fix_no_printer.patch fix_rcc_determinism.patch xkb-default.patch\n \n $(package)_qttranslations_file_name=qttranslations-$($(package)_suffix)\n $(package)_qttranslations_sha256_hash=9822084f8e2d2939ba39f4af4c0c2320e45d5996762a9423f833055607604ed8\n@@ -83,7 +83,7 @@ $(package)_config_opts_darwin += -device-option MAC_TARGET=$(host)\n $(package)_config_opts_darwin += -device-option MAC_LD64_VERSION=$(LD64_VERSION)\n endif\n \n-$(package)_config_opts_linux  = -qt-xkbcommon\n+$(package)_config_opts_linux  = -qt-xkbcommon-x11\n $(package)_config_opts_linux += -qt-xcb\n $(package)_config_opts_linux += -system-freetype\n $(package)_config_opts_linux += -no-feature-sessionmanager\n@@ -136,6 +136,7 @@ define $(package)_preprocess_cmds\n   patch -p1 -i $($(package)_patch_dir)/fix_configure_mac.patch &&\\\n   patch -p1 -i $($(package)_patch_dir)/fix_no_printer.patch &&\\\n   patch -p1 -i $($(package)_patch_dir)/fix_rcc_determinism.patch &&\\\n+  patch -p1 -i $($(package)_patch_dir)/xkb-default.patch &&\\\n   echo \"!host_build: QMAKE_CFLAGS     += $($(package)_cflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n   echo \"!host_build: QMAKE_CXXFLAGS   += $($(package)_cxxflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n   echo \"!host_build: QMAKE_LFLAGS     += $($(package)_ldflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\"
      },
      {
        "sha": "165abf3e2e7a6d7cdbe7b960ec15dbcfaf0a9dfd",
        "filename": "depends/patches/qt/xkb-default.patch",
        "status": "added",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ffd67f11fae8fba6c1f839164ad80224fc5ad1d/depends/patches/qt/xkb-default.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ffd67f11fae8fba6c1f839164ad80224fc5ad1d/depends/patches/qt/xkb-default.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/xkb-default.patch?ref=1ffd67f11fae8fba6c1f839164ad80224fc5ad1d",
        "patch": "@@ -0,0 +1,26 @@\n+--- old/qtbase/src/gui/configure.pri\t2018-06-06 17:28:10.000000000 -0400\n++++ new/qtbase/src/gui/configure.pri\t2018-08-17 18:43:01.589384567 -0400\n+@@ -43,18 +43,11 @@\n+ }\n+\n+ defineTest(qtConfTest_xkbConfigRoot) {\n+-    qtConfTest_getPkgConfigVariable($${1}): return(true)\n+-\n+-    for (dir, $$list(\"/usr/share/X11/xkb\", \"/usr/local/share/X11/xkb\")) {\n+-        exists($$dir) {\n+-            $${1}.value = $$dir\n+-            export($${1}.value)\n+-            $${1}.cache += value\n+-            export($${1}.cache)\n+-            return(true)\n+-        }\n+-    }\n+-    return(false)\n++    $${1}.value = \"/usr/share/X11/xkb\"\n++    export($${1}.value)\n++    $${1}.cache += value\n++    export($${1}.cache)\n++    return(true)\n+ }\n+\n+ defineTest(qtConfTest_qpaDefaultPlatform) {"
      }
    ]
  },
  {
    "sha": "c6d905746b9017661f757ec131fbccb6caf75385",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNmQ5MDU3NDZiOTAxNzY2MWY3NTdlYzEzMWZiY2NiNmNhZjc1Mzg1",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-08-14T18:28:29Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-08-21T07:44:47Z"
      },
      "message": "Allow ConstructTransaction to not throw error with 0-input txn\n\nGithub-Pull: #13968\nRebased-From: 2252ec50085c151e7998ca9a30cda6a33ee862b6\nTree-SHA512: 1f9978ee25fbe9bb338af19d81b401fa531d314ac8288cdb21c1bf10459edea50b43e2d5e97c9bb5fe24c8db89363f8233c0a3d96066ed85f7bd6d2eb234aac0",
      "tree": {
        "sha": "1ee2272abb42f623743136ec5595c25e50bb1dc2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1ee2272abb42f623743136ec5595c25e50bb1dc2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c6d905746b9017661f757ec131fbccb6caf75385",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJbe8LvAAoJEB5K7WKYbNJdkpoIAIelox1SV/TiaRxPT+L4rD2V\nokY/4PAtfiklShJcglkT9/pHze7Sm1BgwBk8WJ6Ry9tqahpcMu2S4gEM4mvJD5uZ\nq5e3fXscaqjmnMSRv8HLkrLqpjCL/8xrbo1Vzvaj7P97mmAIhaboXWcBwMhj9Ziu\nYjEjb6XyGNpWwcITt94kOUiKIqkPYkShN4C0iVbLU2ETCu+eCdhLw8OFE07w7glp\n9fkVpLJe/5p2rrvvL5Jw7f32UDdeEaRpUyOe0EyHPgwsGNahKJ6lPuCTXPmmJ24M\nkdNd5qa5SO896DvKjHy0Jbl+kx0EVJek2MR75r9EF7Wo7dquIBbnbvvrdyiyNY0=\n=D+pw\n-----END PGP SIGNATURE-----",
        "payload": "tree 1ee2272abb42f623743136ec5595c25e50bb1dc2\nparent 1ffd67f11fae8fba6c1f839164ad80224fc5ad1d\nauthor Gregory Sanders <gsanders87@gmail.com> 1534271309 -0400\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1534837487 +0200\n\nAllow ConstructTransaction to not throw error with 0-input txn\n\nGithub-Pull: #13968\nRebased-From: 2252ec50085c151e7998ca9a30cda6a33ee862b6\nTree-SHA512: 1f9978ee25fbe9bb338af19d81b401fa531d314ac8288cdb21c1bf10459edea50b43e2d5e97c9bb5fe24c8db89363f8233c0a3d96066ed85f7bd6d2eb234aac0\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6d905746b9017661f757ec131fbccb6caf75385",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c6d905746b9017661f757ec131fbccb6caf75385",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6d905746b9017661f757ec131fbccb6caf75385/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1ffd67f11fae8fba6c1f839164ad80224fc5ad1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ffd67f11fae8fba6c1f839164ad80224fc5ad1d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1ffd67f11fae8fba6c1f839164ad80224fc5ad1d"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "314184ab066ef671087789300a23449598598e95",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6d905746b9017661f757ec131fbccb6caf75385/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6d905746b9017661f757ec131fbccb6caf75385/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=c6d905746b9017661f757ec131fbccb6caf75385",
        "patch": "@@ -436,7 +436,7 @@ CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniVal\n         }\n     }\n \n-    if (!rbf.isNull() && rbfOptIn != SignalsOptInRBF(rawTx)) {\n+    if (!rbf.isNull() && rawTx.vin.size() > 0 && rbfOptIn != SignalsOptInRBF(rawTx)) {\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter combination: Sequence number(s) contradict replaceable option\");\n     }\n "
      }
    ]
  },
  {
    "sha": "65e7a8b97f84beaa41a2a06e2d318614d6ece686",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NWU3YThiOTdmODRiZWFhNDFhMmEwNmUyZDMxODYxNGQ2ZWNlNjg2",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-08-15T01:12:33Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-08-21T07:44:51Z"
      },
      "message": "walletcreatefundedpsbt: remove duplicate replaceable arg\n\nGithub-Pull: #13968\nRebased-From: 1f18d7b591ffcc8bb9422a9b728bd9a0d8da6a2a\nTree-SHA512: 90391703181db6880a135c60aca792a9e92c4abcad26907cd6cb0a0378593fe45cf995a22ae142ea7de2767c72a9df444e918ff15e460ce19c0435163917d812",
      "tree": {
        "sha": "275bc81f10c952c18368c619373b3d7469d1b7db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/275bc81f10c952c18368c619373b3d7469d1b7db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65e7a8b97f84beaa41a2a06e2d318614d6ece686",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJbe8LzAAoJEB5K7WKYbNJdPusH/3BHK9FrPFjkwWdhEaSzcbgl\n4CavPDq5Nq/TgnW2qzAsXjlMXFU4LAHZn12QNP6qZoVw1KDxlSxhtWHqWxafqKYz\nHN9UlieBzc7gX48xmSvlCyKFU9ezHGy9ZcOQpfBHyjl6xqBY2BUXj1WQaOnBe8kQ\n2Y03x4l3lhbP7WwFytvWVVAbIy0rfdPdC+Y9A34qg5asFH+xWiRvvwm12fdtGtD4\nBbrQ5v08jywh/GQPj04E8lpOa0XVVomtP6UaETmSztX2vYCtzi1yAAA1d4ut28Ci\nJx8jhXAvjIGGphQLMxmr4/tqFbrGHyewI1Yvb3QEgseymv2q4p3wp2GH8vJ9dSc=\n=5ILK\n-----END PGP SIGNATURE-----",
        "payload": "tree 275bc81f10c952c18368c619373b3d7469d1b7db\nparent c6d905746b9017661f757ec131fbccb6caf75385\nauthor Gregory Sanders <gsanders87@gmail.com> 1534295553 -0400\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1534837491 +0200\n\nwalletcreatefundedpsbt: remove duplicate replaceable arg\n\nGithub-Pull: #13968\nRebased-From: 1f18d7b591ffcc8bb9422a9b728bd9a0d8da6a2a\nTree-SHA512: 90391703181db6880a135c60aca792a9e92c4abcad26907cd6cb0a0378593fe45cf995a22ae142ea7de2767c72a9df444e918ff15e460ce19c0435163917d812\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65e7a8b97f84beaa41a2a06e2d318614d6ece686",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/65e7a8b97f84beaa41a2a06e2d318614d6ece686",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65e7a8b97f84beaa41a2a06e2d318614d6ece686/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c6d905746b9017661f757ec131fbccb6caf75385",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6d905746b9017661f757ec131fbccb6caf75385",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c6d905746b9017661f757ec131fbccb6caf75385"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 9,
      "deletions": 12
    },
    "files": [
      {
        "sha": "c7f3e38ac098ed8d5a0cbb9635403286861c31db",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65e7a8b97f84beaa41a2a06e2d318614d6ece686/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65e7a8b97f84beaa41a2a06e2d318614d6ece686/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=65e7a8b97f84beaa41a2a06e2d318614d6ece686",
        "patch": "@@ -113,9 +113,8 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"walletcreatefundedpsbt\", 0, \"inputs\" },\n     { \"walletcreatefundedpsbt\", 1, \"outputs\" },\n     { \"walletcreatefundedpsbt\", 2, \"locktime\" },\n-    { \"walletcreatefundedpsbt\", 3, \"replaceable\" },\n-    { \"walletcreatefundedpsbt\", 4, \"options\" },\n-    { \"walletcreatefundedpsbt\", 5, \"bip32derivs\" },\n+    { \"walletcreatefundedpsbt\", 3, \"options\" },\n+    { \"walletcreatefundedpsbt\", 4, \"bip32derivs\" },\n     { \"walletprocesspsbt\", 1, \"sign\" },\n     { \"walletprocesspsbt\", 3, \"bip32derivs\" },\n     { \"createpsbt\", 0, \"inputs\" },"
      },
      {
        "sha": "0c03e7a896c7a9f8cfd0a900022e94b73300c340",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 9,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65e7a8b97f84beaa41a2a06e2d318614d6ece686/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65e7a8b97f84beaa41a2a06e2d318614d6ece686/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=65e7a8b97f84beaa41a2a06e2d318614d6ece686",
        "patch": "@@ -4648,7 +4648,7 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 2 || request.params.size() > 6)\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 5)\n         throw std::runtime_error(\n                             \"walletcreatefundedpsbt [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n},...] [{\\\"address\\\":amount},{\\\"data\\\":\\\"hex\\\"},...] ( locktime ) ( replaceable ) ( options bip32derivs )\\n\"\n                             \"\\nCreates and funds a transaction in the Partially Signed Transaction format. Inputs will be added if supplied inputs are not enough\\n\"\n@@ -4675,9 +4675,8 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n                             \"                             accepted as second parameter.\\n\"\n                             \"   ]\\n\"\n                             \"3. locktime                  (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs\\n\"\n-                            \"4. replaceable               (boolean, optional, default=false) Marks this transaction as BIP125 replaceable.\\n\"\n                             \"                             Allows this transaction to be replaced by a transaction with higher fees. If provided, it is an error if explicit sequence numbers are incompatible.\\n\"\n-                            \"5. options                 (object, optional)\\n\"\n+                            \"4. options                 (object, optional)\\n\"\n                             \"   {\\n\"\n                             \"     \\\"changeAddress\\\"          (string, optional, default pool address) The bitcoin address to receive the change\\n\"\n                             \"     \\\"changePosition\\\"         (numeric, optional, default random) The index of the change output\\n\"\n@@ -4699,7 +4698,7 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n                             \"         \\\"ECONOMICAL\\\"\\n\"\n                             \"         \\\"CONSERVATIVE\\\"\\n\"\n                             \"   }\\n\"\n-                            \"6. bip32derivs                    (boolean, optiona, default=false) If true, includes the BIP 32 derivation paths for public keys if we know them\\n\"\n+                            \"5. bip32derivs                    (boolean, optiona, default=false) If true, includes the BIP 32 derivation paths for public keys if we know them\\n\"\n                             \"\\nResult:\\n\"\n                             \"{\\n\"\n                             \"  \\\"psbt\\\": \\\"value\\\",        (string)  The resulting raw transaction (base64-encoded string)\\n\"\n@@ -4715,15 +4714,14 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n         UniValue::VARR,\n         UniValueType(), // ARR or OBJ, checked later\n         UniValue::VNUM,\n-        UniValue::VBOOL,\n         UniValue::VOBJ\n         }, true\n     );\n \n     CAmount fee;\n     int change_position;\n-    CMutableTransaction rawTx = ConstructTransaction(request.params[0], request.params[1], request.params[2], request.params[3]);\n-    FundTransaction(pwallet, rawTx, fee, change_position, request.params[4]);\n+    CMutableTransaction rawTx = ConstructTransaction(request.params[0], request.params[1], request.params[2], request.params[3][\"replaceable\"]);\n+    FundTransaction(pwallet, rawTx, fee, change_position, request.params[3]);\n \n     // Make a blank psbt\n     PartiallySignedTransaction psbtx;\n@@ -4740,7 +4738,7 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n     const CTransaction txConst(*psbtx.tx);\n \n     // Fill transaction with out data but don't sign\n-    bool bip32derivs = request.params[5].isNull() ? false : request.params[5].get_bool();\n+    bool bip32derivs = request.params[4].isNull() ? false : request.params[5].get_bool();\n     FillPSBT(pwallet, psbtx, &txConst, 1, false, bip32derivs);\n \n     // Serialize the PSBT\n@@ -4771,7 +4769,7 @@ static const CRPCCommand commands[] =\n     //  --------------------- ------------------------          -----------------------         ----------\n     { \"rawtransactions\",    \"fundrawtransaction\",               &fundrawtransaction,            {\"hexstring\",\"options\",\"iswitness\"} },\n     { \"wallet\",             \"walletprocesspsbt\",                &walletprocesspsbt,             {\"psbt\",\"sign\",\"sighashtype\",\"bip32derivs\"} },\n-    { \"wallet\",             \"walletcreatefundedpsbt\",           &walletcreatefundedpsbt,        {\"inputs\",\"outputs\",\"locktime\",\"replaceable\",\"options\",\"bip32derivs\"} },\n+    { \"wallet\",             \"walletcreatefundedpsbt\",           &walletcreatefundedpsbt,        {\"inputs\",\"outputs\",\"locktime\",\"options\",\"bip32derivs\"} },\n     { \"hidden\",             \"resendwallettransactions\",         &resendwallettransactions,      {} },\n     { \"wallet\",             \"abandontransaction\",               &abandontransaction,            {\"txid\"} },\n     { \"wallet\",             \"abortrescan\",                      &abortrescan,                   {} },"
      }
    ]
  },
  {
    "sha": "82e2b9cb25d62f709d443e8e9fb5d174eb29eab0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MmUyYjljYjI1ZDYyZjcwOWQ0NDNlOGU5ZmI1ZDE3NGViMjllYWIw",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-08-15T01:52:16Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-08-21T07:44:52Z"
      },
      "message": "QA: add basic walletcreatefunded optional arg test\n\nGithub-Pull: #13968\nRebased-From: 1f0c4282e961baea85d5f74d7493bd7459784391\nTree-SHA512: 1f8b10629a314f623d589801ef2e62724de2cd82a0e523e0ab25a285f92b76a3b31304c1c0418b1b611ec3ca0016016d1e6af410ac81a78449b875c4f89a46d7",
      "tree": {
        "sha": "d4437660e46535735eae02b41049e5c497de40fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d4437660e46535735eae02b41049e5c497de40fb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/82e2b9cb25d62f709d443e8e9fb5d174eb29eab0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJbe8L0AAoJEB5K7WKYbNJdUc4IAKmuxetLxuBD74n3S3N0uBL/\nt1JOOmD/5h9gVggOXd0qynHDUV5PmhtM9v+QVWz5IkPlI4mF/yQ+jDzGlv1HtDT8\nnzFkq4Ll5PfaN79gbbfjPMg8SBM9STt8DQTkhGH2q0l0RP3MGA6PUp/nTFgrQMqH\n7lYOgGeckaex7tq8VA6monuowNDBcJrvA2q6nSsf6/7n55xP403ACkf8d6XyYBHk\nH7/gfVdp90ASnFJ2cpdY/HtshAhgH6Po8n4kktgtGPquwGXtIS2M2Erj8ftB9nR8\nWB3NMSMKc+eFw/q6zc8mT9f2qje4rK5x5+TKJfT6JBKRJspmaF191hW+6EQdXRk=\n=Js09\n-----END PGP SIGNATURE-----",
        "payload": "tree d4437660e46535735eae02b41049e5c497de40fb\nparent 65e7a8b97f84beaa41a2a06e2d318614d6ece686\nauthor Gregory Sanders <gsanders87@gmail.com> 1534297936 -0400\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1534837492 +0200\n\nQA: add basic walletcreatefunded optional arg test\n\nGithub-Pull: #13968\nRebased-From: 1f0c4282e961baea85d5f74d7493bd7459784391\nTree-SHA512: 1f8b10629a314f623d589801ef2e62724de2cd82a0e523e0ab25a285f92b76a3b31304c1c0418b1b611ec3ca0016016d1e6af410ac81a78449b875c4f89a46d7\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82e2b9cb25d62f709d443e8e9fb5d174eb29eab0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/82e2b9cb25d62f709d443e8e9fb5d174eb29eab0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82e2b9cb25d62f709d443e8e9fb5d174eb29eab0/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "65e7a8b97f84beaa41a2a06e2d318614d6ece686",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65e7a8b97f84beaa41a2a06e2d318614d6ece686",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/65e7a8b97f84beaa41a2a06e2d318614d6ece686"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 29,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f847a01e59ea12424edc14bf7cad6d4c4a23636f",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82e2b9cb25d62f709d443e8e9fb5d174eb29eab0/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82e2b9cb25d62f709d443e8e9fb5d174eb29eab0/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=82e2b9cb25d62f709d443e8e9fb5d174eb29eab0",
        "patch": "@@ -11,6 +11,8 @@\n import json\n import os\n \n+MAX_BIP125_RBF_SEQUENCE = 0xfffffffd\n+\n # Create one-input, one-output, no-fee transaction:\n class PSBTTest(BitcoinTestFramework):\n \n@@ -135,6 +137,33 @@ def run_test(self):\n         self.nodes[0].generate(6)\n         self.sync_all()\n \n+        # Test additional args in walletcreatepsbt\n+        # Make sure both pre-included and funded inputs\n+        # have the correct sequence numbers based on\n+        # replaceable arg\n+        block_height = self.nodes[0].getblockcount()\n+        unspent = self.nodes[0].listunspent()[0]\n+        psbtx_info = self.nodes[0].walletcreatefundedpsbt([{\"txid\":unspent[\"txid\"], \"vout\":unspent[\"vout\"]}], [{self.nodes[2].getnewaddress():unspent[\"amount\"]+1}], block_height+2, {\"replaceable\":True})\n+        decoded_psbt = self.nodes[0].decodepsbt(psbtx_info[\"psbt\"])\n+        for tx_in in decoded_psbt[\"tx\"][\"vin\"]:\n+           assert_equal(tx_in[\"sequence\"], MAX_BIP125_RBF_SEQUENCE)\n+        assert_equal(decoded_psbt[\"tx\"][\"locktime\"], block_height+2)\n+\n+        # Same construction with only locktime set\n+        psbtx_info = self.nodes[0].walletcreatefundedpsbt([{\"txid\":unspent[\"txid\"], \"vout\":unspent[\"vout\"]}], [{self.nodes[2].getnewaddress():unspent[\"amount\"]+1}], block_height)\n+        decoded_psbt = self.nodes[0].decodepsbt(psbtx_info[\"psbt\"])\n+        for tx_in in decoded_psbt[\"tx\"][\"vin\"]:\n+            assert tx_in[\"sequence\"] > MAX_BIP125_RBF_SEQUENCE\n+        assert_equal(decoded_psbt[\"tx\"][\"locktime\"], block_height)\n+\n+        # Same construction without optional arguments\n+        psbtx_info = self.nodes[0].walletcreatefundedpsbt([{\"txid\":unspent[\"txid\"], \"vout\":unspent[\"vout\"]}], [{self.nodes[2].getnewaddress():unspent[\"amount\"]+1}])\n+        decoded_psbt = self.nodes[0].decodepsbt(psbtx_info[\"psbt\"])\n+        for tx_in in decoded_psbt[\"tx\"][\"vin\"]:\n+            assert tx_in[\"sequence\"] > MAX_BIP125_RBF_SEQUENCE\n+        assert_equal(decoded_psbt[\"tx\"][\"locktime\"], 0)\n+\n+\n         # BIP 174 Test Vectors\n \n         # Check that unknown values are just passed through"
      }
    ]
  },
  {
    "sha": "9833545d18c7e0884c4ab3a80b505be5b91c56af",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ODMzNTQ1ZDE4YzdlMDg4NGM0YWIzYTgwYjUwNWJlNWI5MWM1NmFm",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-08-20T16:57:06Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-08-21T07:44:53Z"
      },
      "message": "RPCTypeCheck bip32derivs arg in walletcreatefunded\n\nGithub-Pull: #13968\nRebased-From: faaac5caaab4d5131040292f4ef2404074ad268b\nTree-SHA512: 758c0c3e4435897d1a9b03ea93f1b2a1a1b64071eda9450f968acf537c172ee61acf9d962bc22ddb6de26e0ad39d9165cdee6f260bb5a95bf97b4003853f0874",
      "tree": {
        "sha": "0cd6b086963e1ce577e396686c5ef1b5adb3d892",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0cd6b086963e1ce577e396686c5ef1b5adb3d892"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9833545d18c7e0884c4ab3a80b505be5b91c56af",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJbe8L1AAoJEB5K7WKYbNJdknsIALRnoWSYugoAAsjKAl1pkkhv\nyya19PY9IretQIpBKvrcQpHtT6Qc2+yZS/oNJS0CJHld3ZZuvdpHwMTOm2Ijs905\nwWIr5XSuKqr9CM+sDaEj6qHnMWsm1RjDQkyqfYmW9ntZRIMH/LEBSoJLDvVvtnlk\n0JjfW/dsL5NzUbkyj0WEdpS5Xt1zEbnD/bFIli7MLGqGvh+DA2wG5iQijmqBpLSV\nhnWPbI2WWdATOQp8ervpXhgddU5I8jzAlukQQ62Zl+IDnwoWC2Af19duVwXT/Jzf\nNnwux4/ZrvSC1QEGTK5Zz05tZdKXWs45VojOjfkagUXqy+CcDe7vBCM3cqOcD+k=\n=dFD1\n-----END PGP SIGNATURE-----",
        "payload": "tree 0cd6b086963e1ce577e396686c5ef1b5adb3d892\nparent 82e2b9cb25d62f709d443e8e9fb5d174eb29eab0\nauthor Gregory Sanders <gsanders87@gmail.com> 1534784226 -0400\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1534837493 +0200\n\nRPCTypeCheck bip32derivs arg in walletcreatefunded\n\nGithub-Pull: #13968\nRebased-From: faaac5caaab4d5131040292f4ef2404074ad268b\nTree-SHA512: 758c0c3e4435897d1a9b03ea93f1b2a1a1b64071eda9450f968acf537c172ee61acf9d962bc22ddb6de26e0ad39d9165cdee6f260bb5a95bf97b4003853f0874\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9833545d18c7e0884c4ab3a80b505be5b91c56af",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9833545d18c7e0884c4ab3a80b505be5b91c56af",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9833545d18c7e0884c4ab3a80b505be5b91c56af/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "82e2b9cb25d62f709d443e8e9fb5d174eb29eab0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82e2b9cb25d62f709d443e8e9fb5d174eb29eab0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/82e2b9cb25d62f709d443e8e9fb5d174eb29eab0"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "bce19cfeb3425f2cc1543967fdb8051491f72de7",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9833545d18c7e0884c4ab3a80b505be5b91c56af/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9833545d18c7e0884c4ab3a80b505be5b91c56af/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=9833545d18c7e0884c4ab3a80b505be5b91c56af",
        "patch": "@@ -4714,7 +4714,8 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n         UniValue::VARR,\n         UniValueType(), // ARR or OBJ, checked later\n         UniValue::VNUM,\n-        UniValue::VOBJ\n+        UniValue::VOBJ,\n+        UniValue::VBOOL\n         }, true\n     );\n "
      }
    ]
  },
  {
    "sha": "3e4829af097b12f4255e9b04fa27c408850a783f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZTQ4MjlhZjA5N2IxMmY0MjU1ZTliMDRmYTI3YzQwODg1MGE3ODNm",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2018-08-21T06:55:24Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-08-22T13:29:22Z"
      },
      "message": "Bugfix: NSIS: Exclude Makefile* from docs\n\nOtherwise, the generated Makefile is included in the NSIS-installed documentation, which can lead to non-determinism (eg, if gawk is installed on some build VMs, but others only have mawk)\n\nGithub-Pull: #14018\nRebased-From: 8563341714a1ec452dd3304a39dd880face49c84\nTree-SHA512: 2d219a4a2027bcd7359b7320bafc6b7cd3bde3dcf9309ddd6198ff67407470025baa71e6d0ed3d6cec081834ddc9a0247043865eb26737e6fd0d2f09574f5932",
      "tree": {
        "sha": "37547bdbee137813186ffe573a1ebf9a9d445a57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/37547bdbee137813186ffe573a1ebf9a9d445a57"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3e4829af097b12f4255e9b04fa27c408850a783f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJbfWUyAAoJEB5K7WKYbNJdG1QIAIEyho8i24kMP57E4SDqiAlk\nP60vvVrfMXqUg5Yiu3ym+HwCJuCY3NyIjzDTGQr6+FaZWmjhIrvOW8PHu6kc2ug1\nYrMYZGPyevO9xs0gvJ7Uijemz1+XTXgqjKkc5ll4yJHX1HxwR0Vm6C3Obc14RpZs\nEu5bRkDqOUJrIyLIxeVJA3yOfpS3C4EamNGsBnuvD5x/eRgvLDr5e8OS0SrS2fNM\n1H01QxPJAXth6xaEs+2HypqAm+c/E9I9+nrjLDjJXsvMDb4F+LwheyEAuxmxendz\nPzLbxZLt/423nRAaoSyJ5ImafxCA5GIVDrH03A5ZpcmadTFN34FiaV+cOE/i0u8=\n=sIKd\n-----END PGP SIGNATURE-----",
        "payload": "tree 37547bdbee137813186ffe573a1ebf9a9d445a57\nparent 9833545d18c7e0884c4ab3a80b505be5b91c56af\nauthor Luke Dashjr <luke-jr+git@utopios.org> 1534834524 +0000\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1534944562 +0200\n\nBugfix: NSIS: Exclude Makefile* from docs\n\nOtherwise, the generated Makefile is included in the NSIS-installed documentation, which can lead to non-determinism (eg, if gawk is installed on some build VMs, but others only have mawk)\n\nGithub-Pull: #14018\nRebased-From: 8563341714a1ec452dd3304a39dd880face49c84\nTree-SHA512: 2d219a4a2027bcd7359b7320bafc6b7cd3bde3dcf9309ddd6198ff67407470025baa71e6d0ed3d6cec081834ddc9a0247043865eb26737e6fd0d2f09574f5932\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e4829af097b12f4255e9b04fa27c408850a783f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3e4829af097b12f4255e9b04fa27c408850a783f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e4829af097b12f4255e9b04fa27c408850a783f/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9833545d18c7e0884c4ab3a80b505be5b91c56af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9833545d18c7e0884c4ab3a80b505be5b91c56af",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9833545d18c7e0884c4ab3a80b505be5b91c56af"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b58a84e02d42f354dd6b965c51b0c47d8b738434",
        "filename": "share/setup.nsi.in",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e4829af097b12f4255e9b04fa27c408850a783f/share/setup.nsi.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e4829af097b12f4255e9b04fa27c408850a783f/share/setup.nsi.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/setup.nsi.in?ref=3e4829af097b12f4255e9b04fa27c408850a783f",
        "patch": "@@ -81,7 +81,7 @@ Section -Main SEC0000\n     File @abs_top_srcdir@/release/@BITCOIN_DAEMON_NAME@@EXEEXT@\n     File @abs_top_srcdir@/release/@BITCOIN_CLI_NAME@@EXEEXT@\n     SetOutPath $INSTDIR\\doc\n-    File /r @abs_top_srcdir@/doc\\*.*\n+    File /r /x Makefile* @abs_top_srcdir@/doc\\*.*\n     SetOutPath $INSTDIR\n     WriteRegStr HKCU \"${REGKEY}\\Components\" Main 1\n SectionEnd"
      }
    ]
  },
  {
    "sha": "b5ec6d4bf8a8ca18ca520e2f484e3ddd2d1138a3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNWVjNmQ0YmY4YThjYTE4Y2E1MjBlMmY0ODRlM2RkZDJkMTEzOGEz",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-08-24T22:01:27Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-08-27T17:43:55Z"
      },
      "message": "Docs: Fix help message typo optiona -> optional\n\nGithub-Pull: #14056\nRebased-From: 7d0a8ad3103200145ab2e73368c3b8345a66c15d",
      "tree": {
        "sha": "c506c068610e27798263734e8ed4a34c4c176777",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c506c068610e27798263734e8ed4a34c4c176777"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b5ec6d4bf8a8ca18ca520e2f484e3ddd2d1138a3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5ec6d4bf8a8ca18ca520e2f484e3ddd2d1138a3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b5ec6d4bf8a8ca18ca520e2f484e3ddd2d1138a3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5ec6d4bf8a8ca18ca520e2f484e3ddd2d1138a3/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3e4829af097b12f4255e9b04fa27c408850a783f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e4829af097b12f4255e9b04fa27c408850a783f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3e4829af097b12f4255e9b04fa27c408850a783f"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "cc6716d80d76f6742bd4eb858d3a7a38c18c7732",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5ec6d4bf8a8ca18ca520e2f484e3ddd2d1138a3/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5ec6d4bf8a8ca18ca520e2f484e3ddd2d1138a3/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=b5ec6d4bf8a8ca18ca520e2f484e3ddd2d1138a3",
        "patch": "@@ -4596,7 +4596,7 @@ UniValue walletprocesspsbt(const JSONRPCRequest& request)\n             \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n             \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n             \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n-            \"4. bip32derivs                    (boolean, optiona, default=false) If true, includes the BIP 32 derivation paths for public keys if we know them\\n\"\n+            \"4. bip32derivs                    (boolean, optional, default=false) If true, includes the BIP 32 derivation paths for public keys if we know them\\n\"\n \n             \"\\nResult:\\n\"\n             \"{\\n\"\n@@ -4698,7 +4698,7 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n                             \"         \\\"ECONOMICAL\\\"\\n\"\n                             \"         \\\"CONSERVATIVE\\\"\\n\"\n                             \"   }\\n\"\n-                            \"5. bip32derivs                    (boolean, optiona, default=false) If true, includes the BIP 32 derivation paths for public keys if we know them\\n\"\n+                            \"5. bip32derivs                    (boolean, optional, default=false) If true, includes the BIP 32 derivation paths for public keys if we know them\\n\"\n                             \"\\nResult:\\n\"\n                             \"{\\n\"\n                             \"  \\\"psbt\\\": \\\"value\\\",        (string)  The resulting raw transaction (base64-encoded string)\\n\""
      }
    ]
  },
  {
    "sha": "fab0fbefcf51f38aa858423017b545df6d098311",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWIwZmJlZmNmNTFmMzhhYTg1ODQyMzAxN2I1NDVkZjZkMDk4MzEx",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-08-26T14:18:39Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-08-27T17:44:14Z"
      },
      "message": "qa: Stop txindex thread before calling destructor\n\nGithub-Pull: #14071\nRebased-From: faf4a9b674186923f8c837e3621d147f504c1944",
      "tree": {
        "sha": "eb276341a3e8e18dbf05b467ed6ec518ab587afa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eb276341a3e8e18dbf05b467ed6ec518ab587afa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fab0fbefcf51f38aa858423017b545df6d098311",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab0fbefcf51f38aa858423017b545df6d098311",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fab0fbefcf51f38aa858423017b545df6d098311",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab0fbefcf51f38aa858423017b545df6d098311/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b5ec6d4bf8a8ca18ca520e2f484e3ddd2d1138a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5ec6d4bf8a8ca18ca520e2f484e3ddd2d1138a3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b5ec6d4bf8a8ca18ca520e2f484e3ddd2d1138a3"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2a160b9988c7562de5a57f50f4c5886d15070fb7",
        "filename": "src/test/txindex_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab0fbefcf51f38aa858423017b545df6d098311/src/test/txindex_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab0fbefcf51f38aa858423017b545df6d098311/src/test/txindex_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txindex_tests.cpp?ref=fab0fbefcf51f38aa858423017b545df6d098311",
        "patch": "@@ -61,6 +61,8 @@ BOOST_FIXTURE_TEST_CASE(txindex_initial_sync, TestChain100Setup)\n             BOOST_ERROR(\"Read incorrect tx\");\n         }\n     }\n+\n+    txindex.Stop(); // Stop thread before calling destructor\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "cf3d7f94c2efd15a9cb910ccee31505934d55641",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZjNkN2Y5NGMyZWZkMTVhOWNiOTEwY2NlZTMxNTA1OTM0ZDU1NjQx",
    "commit": {
      "author": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-08-26T13:41:57Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-08-27T17:44:41Z"
      },
      "message": "Use assert when running from multithreaded code as BOOST_CHECK_* are not thread safe\n\nGithub-Pull: #14069\nRebased-From: 737670c036e802e0fd8b51efffb41131d08f0204",
      "tree": {
        "sha": "142a976f1ff1e11805aa70a3857ffa53c20cbdad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/142a976f1ff1e11805aa70a3857ffa53c20cbdad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cf3d7f94c2efd15a9cb910ccee31505934d55641",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf3d7f94c2efd15a9cb910ccee31505934d55641",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cf3d7f94c2efd15a9cb910ccee31505934d55641",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf3d7f94c2efd15a9cb910ccee31505934d55641/comments",
    "author": {
      "login": "skeees",
      "id": 195769,
      "node_id": "MDQ6VXNlcjE5NTc2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skeees",
      "html_url": "https://github.com/skeees",
      "followers_url": "https://api.github.com/users/skeees/followers",
      "following_url": "https://api.github.com/users/skeees/following{/other_user}",
      "gists_url": "https://api.github.com/users/skeees/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skeees/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
      "organizations_url": "https://api.github.com/users/skeees/orgs",
      "repos_url": "https://api.github.com/users/skeees/repos",
      "events_url": "https://api.github.com/users/skeees/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skeees/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fab0fbefcf51f38aa858423017b545df6d098311",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab0fbefcf51f38aa858423017b545df6d098311",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fab0fbefcf51f38aa858423017b545df6d098311"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "2af0ab22da81f85df5ae981a55139a54a3bd451c",
        "filename": "src/test/scheduler_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf3d7f94c2efd15a9cb910ccee31505934d55641/src/test/scheduler_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf3d7f94c2efd15a9cb910ccee31505934d55641/src/test/scheduler_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/scheduler_tests.cpp?ref=cf3d7f94c2efd15a9cb910ccee31505934d55641",
        "patch": "@@ -138,11 +138,11 @@ BOOST_AUTO_TEST_CASE(singlethreadedscheduler_ordered)\n     // the callbacks should run in exactly the order in which they were enqueued\n     for (int i = 0; i < 100; ++i) {\n         queue1.AddToProcessQueue([i, &counter1]() {\n-            BOOST_CHECK_EQUAL(i, counter1++);\n+            assert(i == counter1++);\n         });\n \n         queue2.AddToProcessQueue([i, &counter2]() {\n-            BOOST_CHECK_EQUAL(i, counter2++);\n+            assert(i == counter2++);\n         });\n     }\n "
      }
    ]
  },
  {
    "sha": "5f71eac6345c716b4e0b7506fd77ca0d119341d2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZjcxZWFjNjM0NWM3MTZiNGUwYjc1MDZmZDc3Y2EwZDExOTM0MWQy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-08-28T09:57:38Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-08-28T09:58:19Z"
      },
      "message": "Merge #14084: [0.17] qa: Backports\n\ncf3d7f94c2efd15a9cb910ccee31505934d55641 Use assert when running from multithreaded code as BOOST_CHECK_* are not thread safe (Jesse Cohen)\nfab0fbefcf51f38aa858423017b545df6d098311 qa: Stop txindex thread before calling destructor (MarcoFalke)\nb5ec6d4bf8a8ca18ca520e2f484e3ddd2d1138a3 Docs: Fix help message typo optiona -> optional (Ben Woosley)\n\nPull request description:\n\n  Fixes to make the unit tests and bench pass with the thread sanitizer (beside the issue with fChecked https://github.com/bitcoin/bitcoin/issues/14058#issuecomment-416042917).\n\n  For testing: `./configure --with-sanitizers=undefined,thread && make -j 16 && ./src/test/test_bitcoin`\n\nTree-SHA512: 5cb85ecc278b719dba03240265e93424ed1a28671834da7590adab88c2d43c6e6cbf3269bbe2fd79e5ed3a85ec77a268e05301e7a7421cf6a97d413dddac6327",
      "tree": {
        "sha": "142a976f1ff1e11805aa70a3857ffa53c20cbdad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/142a976f1ff1e11805aa70a3857ffa53c20cbdad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f71eac6345c716b4e0b7506fd77ca0d119341d2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAluFHLsACgkQHkrtYphs\n0l26lQf/bkMVT/O6GzaqdktBLEAx4KrC62P+cZPh1RtAjB9cz6dNJMSdVlXLj7z9\nOgphlCZaLd6G/vJBaadcqF19xshVnKgmjkteQETULVVSgbCkUj+JffxtN6GOJY+p\nzx4NueTzC4xsutyYBKOsFJ9T9r3ViMfm0pjn0L7efHaJTZfdMm0ZXR+u+p9aYu8i\nVAkdW7KE+cj4B0Y+xhvj2wweix33xFMexrvtI8P4TXFnrHkWMeIhm7ZsDyyLVseJ\nMaTcX2A6yEwrys/w5ChInGYvUeSZHHbpDwT8EmdRUk2hVChQwLtkvNmNgfFkE948\nc3pE38bIk3KfE1Aa0+6iijMlb92MFw==\n=EjC2\n-----END PGP SIGNATURE-----",
        "payload": "tree 142a976f1ff1e11805aa70a3857ffa53c20cbdad\nparent 3e4829af097b12f4255e9b04fa27c408850a783f\nparent cf3d7f94c2efd15a9cb910ccee31505934d55641\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1535450258 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1535450299 +0200\n\nMerge #14084: [0.17] qa: Backports\n\ncf3d7f94c2efd15a9cb910ccee31505934d55641 Use assert when running from multithreaded code as BOOST_CHECK_* are not thread safe (Jesse Cohen)\nfab0fbefcf51f38aa858423017b545df6d098311 qa: Stop txindex thread before calling destructor (MarcoFalke)\nb5ec6d4bf8a8ca18ca520e2f484e3ddd2d1138a3 Docs: Fix help message typo optiona -> optional (Ben Woosley)\n\nPull request description:\n\n  Fixes to make the unit tests and bench pass with the thread sanitizer (beside the issue with fChecked https://github.com/bitcoin/bitcoin/issues/14058#issuecomment-416042917).\n\n  For testing: `./configure --with-sanitizers=undefined,thread && make -j 16 && ./src/test/test_bitcoin`\n\nTree-SHA512: 5cb85ecc278b719dba03240265e93424ed1a28671834da7590adab88c2d43c6e6cbf3269bbe2fd79e5ed3a85ec77a268e05301e7a7421cf6a97d413dddac6327\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f71eac6345c716b4e0b7506fd77ca0d119341d2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5f71eac6345c716b4e0b7506fd77ca0d119341d2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f71eac6345c716b4e0b7506fd77ca0d119341d2/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3e4829af097b12f4255e9b04fa27c408850a783f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e4829af097b12f4255e9b04fa27c408850a783f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3e4829af097b12f4255e9b04fa27c408850a783f"
      },
      {
        "sha": "cf3d7f94c2efd15a9cb910ccee31505934d55641",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf3d7f94c2efd15a9cb910ccee31505934d55641",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cf3d7f94c2efd15a9cb910ccee31505934d55641"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 6,
      "deletions": 4
    },
    "files": [
      {
        "sha": "2af0ab22da81f85df5ae981a55139a54a3bd451c",
        "filename": "src/test/scheduler_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f71eac6345c716b4e0b7506fd77ca0d119341d2/src/test/scheduler_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f71eac6345c716b4e0b7506fd77ca0d119341d2/src/test/scheduler_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/scheduler_tests.cpp?ref=5f71eac6345c716b4e0b7506fd77ca0d119341d2",
        "patch": "@@ -138,11 +138,11 @@ BOOST_AUTO_TEST_CASE(singlethreadedscheduler_ordered)\n     // the callbacks should run in exactly the order in which they were enqueued\n     for (int i = 0; i < 100; ++i) {\n         queue1.AddToProcessQueue([i, &counter1]() {\n-            BOOST_CHECK_EQUAL(i, counter1++);\n+            assert(i == counter1++);\n         });\n \n         queue2.AddToProcessQueue([i, &counter2]() {\n-            BOOST_CHECK_EQUAL(i, counter2++);\n+            assert(i == counter2++);\n         });\n     }\n "
      },
      {
        "sha": "2a160b9988c7562de5a57f50f4c5886d15070fb7",
        "filename": "src/test/txindex_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f71eac6345c716b4e0b7506fd77ca0d119341d2/src/test/txindex_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f71eac6345c716b4e0b7506fd77ca0d119341d2/src/test/txindex_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txindex_tests.cpp?ref=5f71eac6345c716b4e0b7506fd77ca0d119341d2",
        "patch": "@@ -61,6 +61,8 @@ BOOST_FIXTURE_TEST_CASE(txindex_initial_sync, TestChain100Setup)\n             BOOST_ERROR(\"Read incorrect tx\");\n         }\n     }\n+\n+    txindex.Stop(); // Stop thread before calling destructor\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "cc6716d80d76f6742bd4eb858d3a7a38c18c7732",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f71eac6345c716b4e0b7506fd77ca0d119341d2/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f71eac6345c716b4e0b7506fd77ca0d119341d2/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=5f71eac6345c716b4e0b7506fd77ca0d119341d2",
        "patch": "@@ -4596,7 +4596,7 @@ UniValue walletprocesspsbt(const JSONRPCRequest& request)\n             \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n             \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n             \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n-            \"4. bip32derivs                    (boolean, optiona, default=false) If true, includes the BIP 32 derivation paths for public keys if we know them\\n\"\n+            \"4. bip32derivs                    (boolean, optional, default=false) If true, includes the BIP 32 derivation paths for public keys if we know them\\n\"\n \n             \"\\nResult:\\n\"\n             \"{\\n\"\n@@ -4698,7 +4698,7 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n                             \"         \\\"ECONOMICAL\\\"\\n\"\n                             \"         \\\"CONSERVATIVE\\\"\\n\"\n                             \"   }\\n\"\n-                            \"5. bip32derivs                    (boolean, optiona, default=false) If true, includes the BIP 32 derivation paths for public keys if we know them\\n\"\n+                            \"5. bip32derivs                    (boolean, optional, default=false) If true, includes the BIP 32 derivation paths for public keys if we know them\\n\"\n                             \"\\nResult:\\n\"\n                             \"{\\n\"\n                             \"  \\\"psbt\\\": \\\"value\\\",        (string)  The resulting raw transaction (base64-encoded string)\\n\""
      }
    ]
  },
  {
    "sha": "2307a6eb2b9dbc4fd4c50f5463db5d79d32f6caf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMzA3YTZlYjJiOWRiYzRmZDRjNTBmNTQ2M2RiNWQ3OWQzMmY2Y2Fm",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-08-24T21:03:55Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-08-28T21:11:41Z"
      },
      "message": "fix walletcreatefundedpsbt deriv paths, add test\n\nGithub-Pull: #14055\nRebased-From: 61fe653bd919cb0533b2b9d6259bc86a4b2975c0\nTree-SHA512: 2f3edf62318fab4b405b47788096005f59cbe6ba4723fe51ce3b386539a58b7ea7369c31c3840c6baa76cdf6ba8f8440f977c36e2ee2916e711d7872bd1eadad",
      "tree": {
        "sha": "3bab849dface330706ffb8d5ac211a65ef0a755e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3bab849dface330706ffb8d5ac211a65ef0a755e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2307a6eb2b9dbc4fd4c50f5463db5d79d32f6caf",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAluFuo0ACgkQHkrtYphs\n0l2xdwf+PhXbpsM/YK653uelhAWkgLoEyfgmRADEcE0xXN8MeR7jZi97Nlcilc9c\ngakY+bbRrX2NMPJ50f1boBl36LBzNYc8kpjp36Dn/ubGH2/jYr3zX3qeX6657+2e\npJmTbEBsEdEsG/YufqC4fMkMRt4s2VN/22AzovVMUYxYfiCZIcx322yyTKoyicK2\nFbfACoLla+nq+o0FP2y/XeZuqgSYxTKwgPx+UgQf6K33mwnW96kXVGndNf7jH8DI\nYLVI4RpXAhf5KSGXuoHLdFP9sFW0VeDz2dpCnzhN0cH9mNku2LnCNJKnzitkra4K\noI4/0nYYxtd9zTOfG0LrVJYYdSffsw==\n=PEWY\n-----END PGP SIGNATURE-----",
        "payload": "tree 3bab849dface330706ffb8d5ac211a65ef0a755e\nparent 5f71eac6345c716b4e0b7506fd77ca0d119341d2\nauthor Gregory Sanders <gsanders87@gmail.com> 1535144635 -0400\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1535490701 +0200\n\nfix walletcreatefundedpsbt deriv paths, add test\n\nGithub-Pull: #14055\nRebased-From: 61fe653bd919cb0533b2b9d6259bc86a4b2975c0\nTree-SHA512: 2f3edf62318fab4b405b47788096005f59cbe6ba4723fe51ce3b386539a58b7ea7369c31c3840c6baa76cdf6ba8f8440f977c36e2ee2916e711d7872bd1eadad\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2307a6eb2b9dbc4fd4c50f5463db5d79d32f6caf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2307a6eb2b9dbc4fd4c50f5463db5d79d32f6caf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2307a6eb2b9dbc4fd4c50f5463db5d79d32f6caf/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5f71eac6345c716b4e0b7506fd77ca0d119341d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f71eac6345c716b4e0b7506fd77ca0d119341d2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f71eac6345c716b4e0b7506fd77ca0d119341d2"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 7,
      "deletions": 5
    },
    "files": [
      {
        "sha": "bb7ceb424c11fc3a4b1d81c74ae3decf479ca287",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2307a6eb2b9dbc4fd4c50f5463db5d79d32f6caf/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2307a6eb2b9dbc4fd4c50f5463db5d79d32f6caf/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=2307a6eb2b9dbc4fd4c50f5463db5d79d32f6caf",
        "patch": "@@ -4739,7 +4739,7 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n     const CTransaction txConst(*psbtx.tx);\n \n     // Fill transaction with out data but don't sign\n-    bool bip32derivs = request.params[4].isNull() ? false : request.params[5].get_bool();\n+    bool bip32derivs = request.params[4].isNull() ? false : request.params[4].get_bool();\n     FillPSBT(pwallet, psbtx, &txConst, 1, false, bip32derivs);\n \n     // Serialize the PSBT"
      },
      {
        "sha": "d558de5fe12addc9f8fce4a8aede98f5cb488f21",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2307a6eb2b9dbc4fd4c50f5463db5d79d32f6caf/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2307a6eb2b9dbc4fd4c50f5463db5d79d32f6caf/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=2307a6eb2b9dbc4fd4c50f5463db5d79d32f6caf",
        "patch": "@@ -143,17 +143,19 @@ def run_test(self):\n         # replaceable arg\n         block_height = self.nodes[0].getblockcount()\n         unspent = self.nodes[0].listunspent()[0]\n-        psbtx_info = self.nodes[0].walletcreatefundedpsbt([{\"txid\":unspent[\"txid\"], \"vout\":unspent[\"vout\"]}], [{self.nodes[2].getnewaddress():unspent[\"amount\"]+1}], block_height+2, {\"replaceable\":True})\n+        psbtx_info = self.nodes[0].walletcreatefundedpsbt([{\"txid\":unspent[\"txid\"], \"vout\":unspent[\"vout\"]}], [{self.nodes[2].getnewaddress():unspent[\"amount\"]+1}], block_height+2, {\"replaceable\":True}, False)\n         decoded_psbt = self.nodes[0].decodepsbt(psbtx_info[\"psbt\"])\n-        for tx_in in decoded_psbt[\"tx\"][\"vin\"]:\n+        for tx_in, psbt_in in zip(decoded_psbt[\"tx\"][\"vin\"], decoded_psbt[\"inputs\"]):\n            assert_equal(tx_in[\"sequence\"], MAX_BIP125_RBF_SEQUENCE)\n+           assert \"bip32_derivs\" not in psbt_in\n         assert_equal(decoded_psbt[\"tx\"][\"locktime\"], block_height+2)\n \n         # Same construction with only locktime set\n-        psbtx_info = self.nodes[0].walletcreatefundedpsbt([{\"txid\":unspent[\"txid\"], \"vout\":unspent[\"vout\"]}], [{self.nodes[2].getnewaddress():unspent[\"amount\"]+1}], block_height)\n+        psbtx_info = self.nodes[0].walletcreatefundedpsbt([{\"txid\":unspent[\"txid\"], \"vout\":unspent[\"vout\"]}], [{self.nodes[2].getnewaddress():unspent[\"amount\"]+1}], block_height, {}, True)\n         decoded_psbt = self.nodes[0].decodepsbt(psbtx_info[\"psbt\"])\n-        for tx_in in decoded_psbt[\"tx\"][\"vin\"]:\n+        for tx_in, psbt_in in zip(decoded_psbt[\"tx\"][\"vin\"], decoded_psbt[\"inputs\"]):\n             assert tx_in[\"sequence\"] > MAX_BIP125_RBF_SEQUENCE\n+            assert \"bip32_derivs\" in psbt_in\n         assert_equal(decoded_psbt[\"tx\"][\"locktime\"], block_height)\n \n         # Same construction without optional arguments"
      }
    ]
  },
  {
    "sha": "2936dbc557084be1b0cc16d73250a9f220871062",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOTM2ZGJjNTU3MDg0YmUxYjBjYzE2ZDczMjUwYTlmMjIwODcxMDYy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-08-29T09:02:14Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-09-05T18:39:36Z"
      },
      "message": "doc: Change documentation for =0 for non-boolean options\n\nPR #12713 changed the interpretation for negation of non-boolean options\n(e.g. -noconnect) to no longer set the option to 0, but to remove it\nfrom the options.\n\nI think this is better because it gets rid of the special meaning of\n'0'.\n\nHowever it needs to be documented. I attempt to do so in this PR.\nAddreses #14064.\n\nGithub-Pull: #14100\nRebased-From: e9a78e9b3b17e09f923f09c5aae0eda9dfd58e66",
      "tree": {
        "sha": "4582b21178ae45ca6ceab9c5e64f99d97da04fb9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4582b21178ae45ca6ceab9c5e64f99d97da04fb9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2936dbc557084be1b0cc16d73250a9f220871062",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2936dbc557084be1b0cc16d73250a9f220871062",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2936dbc557084be1b0cc16d73250a9f220871062",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2936dbc557084be1b0cc16d73250a9f220871062/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2307a6eb2b9dbc4fd4c50f5463db5d79d32f6caf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2307a6eb2b9dbc4fd4c50f5463db5d79d32f6caf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2307a6eb2b9dbc4fd4c50f5463db5d79d32f6caf"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "c16009a0baf4070bfd9b1773262d1753d37799fb",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2936dbc557084be1b0cc16d73250a9f220871062/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2936dbc557084be1b0cc16d73250a9f220871062/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2936dbc557084be1b0cc16d73250a9f220871062",
        "patch": "@@ -366,7 +366,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-datadir=<dir>\", \"Specify data directory\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-dbbatchsize\", strprintf(\"Maximum database write batch size in bytes (default: %u)\", nDefaultDbBatchSize), true, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-dbcache=<n>\", strprintf(\"Set database cache size in megabytes (%d to %d, default: %d)\", nMinDbCache, nMaxDbCache, nDefaultDbCache), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-debuglogfile=<file>\", strprintf(\"Specify location of debug log file. Relative paths will be prefixed by a net-specific datadir location. (0 to disable; default: %s)\", DEFAULT_DEBUGLOGFILE), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-debuglogfile=<file>\", strprintf(\"Specify location of debug log file. Relative paths will be prefixed by a net-specific datadir location. (-nodebuglogfile to disable; default: %s)\", DEFAULT_DEBUGLOGFILE), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-feefilter\", strprintf(\"Tell other nodes to filter invs to us by our mempool min fee (default: %u)\", DEFAULT_FEEFILTER), true, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-includeconf=<file>\", \"Specify additional configuration file, relative to the -datadir path (only useable from configuration file, not command line)\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-loadblock=<file>\", \"Imports blocks from external blk000??.dat file on startup\", false, OptionsCategory::OPTIONS);\n@@ -398,7 +398,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-banscore=<n>\", strprintf(\"Threshold for disconnecting misbehaving peers (default: %u)\", DEFAULT_BANSCORE_THRESHOLD), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-bantime=<n>\", strprintf(\"Number of seconds to keep misbehaving peers from reconnecting (default: %u)\", DEFAULT_MISBEHAVING_BANTIME), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-bind=<addr>\", \"Bind to given address and always listen on it. Use [host]:port notation for IPv6\", false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-connect=<ip>\", \"Connect only to the specified node; -connect=0 disables automatic connections (the rules for this peer are the same as for -addnode). This option can be specified multiple times to connect to multiple nodes.\", false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-connect=<ip>\", \"Connect only to the specified node; -noconnect disables automatic connections (the rules for this peer are the same as for -addnode). This option can be specified multiple times to connect to multiple nodes.\", false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-discover\", \"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\", false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-dns\", strprintf(\"Allow DNS lookups for -addnode, -seednode and -connect (default: %u)\", DEFAULT_NAME_LOOKUP), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-dnsseed\", \"Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect used)\", false, OptionsCategory::CONNECTION);\n@@ -412,12 +412,12 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-maxsendbuffer=<n>\", strprintf(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\", DEFAULT_MAXSENDBUFFER), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-maxtimeadjustment\", strprintf(\"Maximum allowed median peer time offset adjustment. Local perspective of time may be influenced by peers forward or backward by this amount. (default: %u seconds)\", DEFAULT_MAX_TIME_ADJUSTMENT), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-maxuploadtarget=<n>\", strprintf(\"Tries to keep outbound traffic under the given target (in MiB per 24h), 0 = no limit (default: %d)\", DEFAULT_MAX_UPLOAD_TARGET), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-onion=<ip:port>\", \"Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: -proxy)\", false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-onion=<ip:port>\", \"Use separate SOCKS5 proxy to reach peers via Tor hidden services, set -noonion to disable (default: -proxy)\", false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-onlynet=<net>\", \"Make outgoing connections only through network <net> (ipv4, ipv6 or onion). Incoming connections are not affected by this option. This option can be specified multiple times to allow multiple networks.\", false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-peerbloomfilters\", strprintf(\"Support filtering of blocks and transaction with bloom filters (default: %u)\", DEFAULT_PEERBLOOMFILTERS), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-permitbaremultisig\", strprintf(\"Relay non-P2SH multisig (default: %u)\", DEFAULT_PERMIT_BAREMULTISIG), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-port=<port>\", strprintf(\"Listen for connections on <port> (default: %u or testnet: %u)\", defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort()), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-proxy=<ip:port>\", \"Connect through SOCKS5 proxy\", false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-proxy=<ip:port>\", \"Connect through SOCKS5 proxy, set -noproxy to disable (default: disabled)\", false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-proxyrandomize\", strprintf(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\", DEFAULT_PROXYRANDOMIZE), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-seednode=<ip>\", \"Connect to a node to retrieve peer addresses, and disconnect. This option can be specified multiple times to connect to multiple nodes.\", false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-timeout=<n>\", strprintf(\"Specify connection timeout in milliseconds (minimum: 1, default: %d)\", DEFAULT_CONNECT_TIMEOUT), false, OptionsCategory::CONNECTION);\n@@ -465,7 +465,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT), true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-vbparams=deployment:start:end\", \"Use given start/end times for specified version bits deployment (regtest-only)\", true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-addrmantest\", \"Allows to test address relay on localhost\", true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-debug=<category>\", strprintf(\"Output debugging information (default: %u, supplying <category> is optional)\", 0) + \". \" +\n+    gArgs.AddArg(\"-debug=<category>\", \"Output debugging information (default: -nodebug, supplying <category> is optional). \"\n         \"If <category> is not supplied or if <category> = 1, output all debugging information. <category> can be: \" + ListLogCategories() + \".\", false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-debugexclude=<category>\", strprintf(\"Exclude debugging information for a category. Can be used in conjunction with -debug=1 to output debug logs for all categories except one or more specified categories.\"), false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-help-debug\", \"Show all debugging options (usage: --help -help-debug)\", false, OptionsCategory::DEBUG_TEST);\n@@ -478,7 +478,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-maxtxfee=<amt>\", strprintf(\"Maximum total fees (in %s) to use in a single wallet transaction or raw transaction; setting this too low may abort large transactions (default: %s)\",\n         CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MAXFEE)), false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-printpriority\", strprintf(\"Log transaction fee per kB when mining blocks (default: %u)\", DEFAULT_PRINTPRIORITY), true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -daemon. To disable logging to file, set debuglogfile=0)\", false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -daemon. To disable logging to file, set -nodebuglogfile)\", false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-shrinkdebugfile\", \"Shrink debug.log file on client startup (default: 1 when no -debug)\", false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-uacomment=<cmt>\", \"Append comment to the user agent string\", false, OptionsCategory::DEBUG_TEST);\n "
      }
    ]
  },
  {
    "sha": "6bfee8a8c2ad0c77d47bedc282a7838aab137508",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YmZlZThhOGMyYWQwYzc3ZDQ3YmVkYzI4MmE3ODM4YWFiMTM3NTA4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-09-05T18:47:27Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-09-05T18:50:53Z"
      },
      "message": "doc: Update v0.17.0.0 manpages",
      "tree": {
        "sha": "5584e3f1b9e06c57d29361bdda546faa90c34bd9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5584e3f1b9e06c57d29361bdda546faa90c34bd9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6bfee8a8c2ad0c77d47bedc282a7838aab137508",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bfee8a8c2ad0c77d47bedc282a7838aab137508",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6bfee8a8c2ad0c77d47bedc282a7838aab137508",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bfee8a8c2ad0c77d47bedc282a7838aab137508/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2936dbc557084be1b0cc16d73250a9f220871062",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2936dbc557084be1b0cc16d73250a9f220871062",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2936dbc557084be1b0cc16d73250a9f220871062"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 22,
      "deletions": 18
    },
    "files": [
      {
        "sha": "708e07c00ceeed0722d878060561accf1aadd8f2",
        "filename": "doc/man/bitcoin-cli.1",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bfee8a8c2ad0c77d47bedc282a7838aab137508/doc/man/bitcoin-cli.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bfee8a8c2ad0c77d47bedc282a7838aab137508/doc/man/bitcoin-cli.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-cli.1?ref=6bfee8a8c2ad0c77d47bedc282a7838aab137508",
        "patch": "@@ -1,5 +1,5 @@\n .\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIN-CLI \"1\" \"August 2018\" \"bitcoin-cli v0.17.0.0\" \"User Commands\"\n+.TH BITCOIN-CLI \"1\" \"September 2018\" \"bitcoin-cli v0.17.0.0\" \"User Commands\"\n .SH NAME\n bitcoin-cli \\- manual page for bitcoin-cli v0.17.0.0\n .SH SYNOPSIS"
      },
      {
        "sha": "ed347a817773c534f002848588adcd89397026ba",
        "filename": "doc/man/bitcoin-qt.1",
        "status": "modified",
        "additions": 10,
        "deletions": 8,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bfee8a8c2ad0c77d47bedc282a7838aab137508/doc/man/bitcoin-qt.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bfee8a8c2ad0c77d47bedc282a7838aab137508/doc/man/bitcoin-qt.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-qt.1?ref=6bfee8a8c2ad0c77d47bedc282a7838aab137508",
        "patch": "@@ -1,5 +1,5 @@\n .\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIN-QT \"1\" \"August 2018\" \"bitcoin-qt v0.17.0.0\" \"User Commands\"\n+.TH BITCOIN-QT \"1\" \"September 2018\" \"bitcoin-qt v0.17.0.0\" \"User Commands\"\n .SH NAME\n bitcoin-qt \\- manual page for bitcoin-qt v0.17.0.0\n .SH SYNOPSIS\n@@ -61,7 +61,8 @@ Set database cache size in megabytes (4 to 16384, default: 450)\n \\fB\\-debuglogfile=\\fR<file>\n .IP\n Specify location of debug log file. Relative paths will be prefixed by a\n-net\\-specific datadir location. (0 to disable; default: debug.log)\n+net\\-specific datadir location. (\\fB\\-nodebuglogfile\\fR to disable;\n+default: debug.log)\n .HP\n \\fB\\-includeconf=\\fR<file>\n .IP\n@@ -157,7 +158,7 @@ for IPv6\n .HP\n \\fB\\-connect=\\fR<ip>\n .IP\n-Connect only to the specified node; \\fB\\-connect\\fR=\\fI\\,0\\/\\fR disables automatic\n+Connect only to the specified node; \\fB\\-noconnect\\fR disables automatic\n connections (the rules for this peer are the same as for\n \\fB\\-addnode\\fR). This option can be specified multiple times to connect\n to multiple nodes.\n@@ -221,8 +222,8 @@ Tries to keep outbound traffic under the given target (in MiB per 24h),\n .HP\n \\fB\\-onion=\\fR<ip:port>\n .IP\n-Use separate SOCKS5 proxy to reach peers via Tor hidden services\n-(default: \\fB\\-proxy\\fR)\n+Use separate SOCKS5 proxy to reach peers via Tor hidden services, set\n+\\fB\\-noonion\\fR to disable (default: \\fB\\-proxy\\fR)\n .HP\n \\fB\\-onlynet=\\fR<net>\n .IP\n@@ -246,7 +247,8 @@ Listen for connections on <port> (default: 8333 or testnet: 18333)\n .HP\n \\fB\\-proxy=\\fR<ip:port>\n .IP\n-Connect through SOCKS5 proxy\n+Connect through SOCKS5 proxy, set \\fB\\-noproxy\\fR to disable (default:\n+disabled)\n .HP\n \\fB\\-proxyrandomize\\fR\n .IP\n@@ -418,7 +420,7 @@ Debugging/Testing options:\n .HP\n \\fB\\-debug=\\fR<category>\n .IP\n-Output debugging information (default: 0, supplying <category> is\n+Output debugging information (default: \\fB\\-nodebug\\fR, supplying <category> is\n optional). If <category> is not supplied or if <category> = 1,\n output all debugging information. <category> can be: net, tor,\n mempool, http, bench, zmq, db, rpc, estimatefee, addrman,\n@@ -452,7 +454,7 @@ transaction; setting this too low may abort large transactions\n \\fB\\-printtoconsole\\fR\n .IP\n Send trace/debug info to console (default: 1 when no \\fB\\-daemon\\fR. To disable\n-logging to file, set debuglogfile=0)\n+logging to file, set \\fB\\-nodebuglogfile\\fR)\n .HP\n \\fB\\-shrinkdebugfile\\fR\n .IP"
      },
      {
        "sha": "d97bc20d4386abdabda517ac5d9217bef9524dfe",
        "filename": "doc/man/bitcoin-tx.1",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bfee8a8c2ad0c77d47bedc282a7838aab137508/doc/man/bitcoin-tx.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bfee8a8c2ad0c77d47bedc282a7838aab137508/doc/man/bitcoin-tx.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-tx.1?ref=6bfee8a8c2ad0c77d47bedc282a7838aab137508",
        "patch": "@@ -1,5 +1,5 @@\n .\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIN-TX \"1\" \"August 2018\" \"bitcoin-tx v0.17.0.0\" \"User Commands\"\n+.TH BITCOIN-TX \"1\" \"September 2018\" \"bitcoin-tx v0.17.0.0\" \"User Commands\"\n .SH NAME\n bitcoin-tx \\- manual page for bitcoin-tx v0.17.0.0\n .SH SYNOPSIS"
      },
      {
        "sha": "2f4313bfadf48043c8c67965309acb345e9d4e3a",
        "filename": "doc/man/bitcoind.1",
        "status": "modified",
        "additions": 10,
        "deletions": 8,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bfee8a8c2ad0c77d47bedc282a7838aab137508/doc/man/bitcoind.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bfee8a8c2ad0c77d47bedc282a7838aab137508/doc/man/bitcoind.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoind.1?ref=6bfee8a8c2ad0c77d47bedc282a7838aab137508",
        "patch": "@@ -1,5 +1,5 @@\n .\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIND \"1\" \"August 2018\" \"bitcoind v0.17.0.0\" \"User Commands\"\n+.TH BITCOIND \"1\" \"September 2018\" \"bitcoind v0.17.0.0\" \"User Commands\"\n .SH NAME\n bitcoind \\- manual page for bitcoind v0.17.0.0\n .SH SYNOPSIS\n@@ -61,7 +61,8 @@ Set database cache size in megabytes (4 to 16384, default: 450)\n \\fB\\-debuglogfile=\\fR<file>\n .IP\n Specify location of debug log file. Relative paths will be prefixed by a\n-net\\-specific datadir location. (0 to disable; default: debug.log)\n+net\\-specific datadir location. (\\fB\\-nodebuglogfile\\fR to disable;\n+default: debug.log)\n .HP\n \\fB\\-includeconf=\\fR<file>\n .IP\n@@ -157,7 +158,7 @@ for IPv6\n .HP\n \\fB\\-connect=\\fR<ip>\n .IP\n-Connect only to the specified node; \\fB\\-connect\\fR=\\fI\\,0\\/\\fR disables automatic\n+Connect only to the specified node; \\fB\\-noconnect\\fR disables automatic\n connections (the rules for this peer are the same as for\n \\fB\\-addnode\\fR). This option can be specified multiple times to connect\n to multiple nodes.\n@@ -221,8 +222,8 @@ Tries to keep outbound traffic under the given target (in MiB per 24h),\n .HP\n \\fB\\-onion=\\fR<ip:port>\n .IP\n-Use separate SOCKS5 proxy to reach peers via Tor hidden services\n-(default: \\fB\\-proxy\\fR)\n+Use separate SOCKS5 proxy to reach peers via Tor hidden services, set\n+\\fB\\-noonion\\fR to disable (default: \\fB\\-proxy\\fR)\n .HP\n \\fB\\-onlynet=\\fR<net>\n .IP\n@@ -246,7 +247,8 @@ Listen for connections on <port> (default: 8333 or testnet: 18333)\n .HP\n \\fB\\-proxy=\\fR<ip:port>\n .IP\n-Connect through SOCKS5 proxy\n+Connect through SOCKS5 proxy, set \\fB\\-noproxy\\fR to disable (default:\n+disabled)\n .HP\n \\fB\\-proxyrandomize\\fR\n .IP\n@@ -418,7 +420,7 @@ Debugging/Testing options:\n .HP\n \\fB\\-debug=\\fR<category>\n .IP\n-Output debugging information (default: 0, supplying <category> is\n+Output debugging information (default: \\fB\\-nodebug\\fR, supplying <category> is\n optional). If <category> is not supplied or if <category> = 1,\n output all debugging information. <category> can be: net, tor,\n mempool, http, bench, zmq, db, rpc, estimatefee, addrman,\n@@ -452,7 +454,7 @@ transaction; setting this too low may abort large transactions\n \\fB\\-printtoconsole\\fR\n .IP\n Send trace/debug info to console (default: 1 when no \\fB\\-daemon\\fR. To disable\n-logging to file, set debuglogfile=0)\n+logging to file, set \\fB\\-nodebuglogfile\\fR)\n .HP\n \\fB\\-shrinkdebugfile\\fR\n .IP"
      }
    ]
  },
  {
    "sha": "6ba1f15432962f5f8092dd5e6b23cde823d4ddac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YmExZjE1NDMyOTYyZjVmODA5MmRkNWU2YjIzY2RlODIzZDRkZGFj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-09-06T09:21:31Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-09-06T09:22:00Z"
      },
      "message": "Merge #14152: [0.17] doc: Change documentation for =0 for non-boolean options\n\n6bfee8a8c2ad0c77d47bedc282a7838aab137508 doc: Update v0.17.0.0 manpages (MarcoFalke)\n2936dbc557084be1b0cc16d73250a9f220871062 doc: Change documentation for =0 for non-boolean options (Wladimir J. van der Laan)\n\nPull request description:\n\n  Github-Pull: #14100\n  Rebased-From: e9a78e9b3b17e09f923f09c5aae0eda9dfd58e66\n\n  Includes the bumped manpages.\n\nTree-SHA512: 73d2dadb45418882122313975c0ab0e9f58310697d996dd2edeb400ebe73b3a45f1157c8a7fe65ae1f53d9ce68a88aae7c701f3e82e0b4db4c9417b36ddfecc0",
      "tree": {
        "sha": "5584e3f1b9e06c57d29361bdda546faa90c34bd9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5584e3f1b9e06c57d29361bdda546faa90c34bd9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6ba1f15432962f5f8092dd5e6b23cde823d4ddac",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAluQ8bgACgkQHkrtYphs\n0l2lNQf9HwpDDJiBmWbZY8piWbyuzTsIbiKI1aOgyyDhoCaIj68iAwN6qm7M2nEo\nAowipzPcfTXNNxqKA/N0LYOAmU5okPD3/mBS3oMHBpz0YaKEufxBbbR/ijtS0yFF\n6cqqQz0HiOimsiV0vkIChIuKN+Hcgu5MQH/ATMQWmakYxfYliSBIPbd+yC49KcCj\nDyL68aOhCuVQpavytfoiVIH6zOQUUDCTHHIc8xZ11MR5DT6Ua0UNx5R5r4T4aDoU\noe1Dnp6zcQaT5VSdKvZQiy2YkHAVgzBPQg5AhREuicG3E8fM+i2oev93kX9pYrJG\n4GiVltAESUo63BelT03ajqUYKdGu5Q==\n=KMzL\n-----END PGP SIGNATURE-----",
        "payload": "tree 5584e3f1b9e06c57d29361bdda546faa90c34bd9\nparent 2307a6eb2b9dbc4fd4c50f5463db5d79d32f6caf\nparent 6bfee8a8c2ad0c77d47bedc282a7838aab137508\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1536225691 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1536225720 +0200\n\nMerge #14152: [0.17] doc: Change documentation for =0 for non-boolean options\n\n6bfee8a8c2ad0c77d47bedc282a7838aab137508 doc: Update v0.17.0.0 manpages (MarcoFalke)\n2936dbc557084be1b0cc16d73250a9f220871062 doc: Change documentation for =0 for non-boolean options (Wladimir J. van der Laan)\n\nPull request description:\n\n  Github-Pull: #14100\n  Rebased-From: e9a78e9b3b17e09f923f09c5aae0eda9dfd58e66\n\n  Includes the bumped manpages.\n\nTree-SHA512: 73d2dadb45418882122313975c0ab0e9f58310697d996dd2edeb400ebe73b3a45f1157c8a7fe65ae1f53d9ce68a88aae7c701f3e82e0b4db4c9417b36ddfecc0\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ba1f15432962f5f8092dd5e6b23cde823d4ddac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6ba1f15432962f5f8092dd5e6b23cde823d4ddac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ba1f15432962f5f8092dd5e6b23cde823d4ddac/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2307a6eb2b9dbc4fd4c50f5463db5d79d32f6caf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2307a6eb2b9dbc4fd4c50f5463db5d79d32f6caf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2307a6eb2b9dbc4fd4c50f5463db5d79d32f6caf"
      },
      {
        "sha": "6bfee8a8c2ad0c77d47bedc282a7838aab137508",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bfee8a8c2ad0c77d47bedc282a7838aab137508",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6bfee8a8c2ad0c77d47bedc282a7838aab137508"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 28,
      "deletions": 24
    },
    "files": [
      {
        "sha": "708e07c00ceeed0722d878060561accf1aadd8f2",
        "filename": "doc/man/bitcoin-cli.1",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ba1f15432962f5f8092dd5e6b23cde823d4ddac/doc/man/bitcoin-cli.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ba1f15432962f5f8092dd5e6b23cde823d4ddac/doc/man/bitcoin-cli.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-cli.1?ref=6ba1f15432962f5f8092dd5e6b23cde823d4ddac",
        "patch": "@@ -1,5 +1,5 @@\n .\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIN-CLI \"1\" \"August 2018\" \"bitcoin-cli v0.17.0.0\" \"User Commands\"\n+.TH BITCOIN-CLI \"1\" \"September 2018\" \"bitcoin-cli v0.17.0.0\" \"User Commands\"\n .SH NAME\n bitcoin-cli \\- manual page for bitcoin-cli v0.17.0.0\n .SH SYNOPSIS"
      },
      {
        "sha": "ed347a817773c534f002848588adcd89397026ba",
        "filename": "doc/man/bitcoin-qt.1",
        "status": "modified",
        "additions": 10,
        "deletions": 8,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ba1f15432962f5f8092dd5e6b23cde823d4ddac/doc/man/bitcoin-qt.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ba1f15432962f5f8092dd5e6b23cde823d4ddac/doc/man/bitcoin-qt.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-qt.1?ref=6ba1f15432962f5f8092dd5e6b23cde823d4ddac",
        "patch": "@@ -1,5 +1,5 @@\n .\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIN-QT \"1\" \"August 2018\" \"bitcoin-qt v0.17.0.0\" \"User Commands\"\n+.TH BITCOIN-QT \"1\" \"September 2018\" \"bitcoin-qt v0.17.0.0\" \"User Commands\"\n .SH NAME\n bitcoin-qt \\- manual page for bitcoin-qt v0.17.0.0\n .SH SYNOPSIS\n@@ -61,7 +61,8 @@ Set database cache size in megabytes (4 to 16384, default: 450)\n \\fB\\-debuglogfile=\\fR<file>\n .IP\n Specify location of debug log file. Relative paths will be prefixed by a\n-net\\-specific datadir location. (0 to disable; default: debug.log)\n+net\\-specific datadir location. (\\fB\\-nodebuglogfile\\fR to disable;\n+default: debug.log)\n .HP\n \\fB\\-includeconf=\\fR<file>\n .IP\n@@ -157,7 +158,7 @@ for IPv6\n .HP\n \\fB\\-connect=\\fR<ip>\n .IP\n-Connect only to the specified node; \\fB\\-connect\\fR=\\fI\\,0\\/\\fR disables automatic\n+Connect only to the specified node; \\fB\\-noconnect\\fR disables automatic\n connections (the rules for this peer are the same as for\n \\fB\\-addnode\\fR). This option can be specified multiple times to connect\n to multiple nodes.\n@@ -221,8 +222,8 @@ Tries to keep outbound traffic under the given target (in MiB per 24h),\n .HP\n \\fB\\-onion=\\fR<ip:port>\n .IP\n-Use separate SOCKS5 proxy to reach peers via Tor hidden services\n-(default: \\fB\\-proxy\\fR)\n+Use separate SOCKS5 proxy to reach peers via Tor hidden services, set\n+\\fB\\-noonion\\fR to disable (default: \\fB\\-proxy\\fR)\n .HP\n \\fB\\-onlynet=\\fR<net>\n .IP\n@@ -246,7 +247,8 @@ Listen for connections on <port> (default: 8333 or testnet: 18333)\n .HP\n \\fB\\-proxy=\\fR<ip:port>\n .IP\n-Connect through SOCKS5 proxy\n+Connect through SOCKS5 proxy, set \\fB\\-noproxy\\fR to disable (default:\n+disabled)\n .HP\n \\fB\\-proxyrandomize\\fR\n .IP\n@@ -418,7 +420,7 @@ Debugging/Testing options:\n .HP\n \\fB\\-debug=\\fR<category>\n .IP\n-Output debugging information (default: 0, supplying <category> is\n+Output debugging information (default: \\fB\\-nodebug\\fR, supplying <category> is\n optional). If <category> is not supplied or if <category> = 1,\n output all debugging information. <category> can be: net, tor,\n mempool, http, bench, zmq, db, rpc, estimatefee, addrman,\n@@ -452,7 +454,7 @@ transaction; setting this too low may abort large transactions\n \\fB\\-printtoconsole\\fR\n .IP\n Send trace/debug info to console (default: 1 when no \\fB\\-daemon\\fR. To disable\n-logging to file, set debuglogfile=0)\n+logging to file, set \\fB\\-nodebuglogfile\\fR)\n .HP\n \\fB\\-shrinkdebugfile\\fR\n .IP"
      },
      {
        "sha": "d97bc20d4386abdabda517ac5d9217bef9524dfe",
        "filename": "doc/man/bitcoin-tx.1",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ba1f15432962f5f8092dd5e6b23cde823d4ddac/doc/man/bitcoin-tx.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ba1f15432962f5f8092dd5e6b23cde823d4ddac/doc/man/bitcoin-tx.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-tx.1?ref=6ba1f15432962f5f8092dd5e6b23cde823d4ddac",
        "patch": "@@ -1,5 +1,5 @@\n .\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIN-TX \"1\" \"August 2018\" \"bitcoin-tx v0.17.0.0\" \"User Commands\"\n+.TH BITCOIN-TX \"1\" \"September 2018\" \"bitcoin-tx v0.17.0.0\" \"User Commands\"\n .SH NAME\n bitcoin-tx \\- manual page for bitcoin-tx v0.17.0.0\n .SH SYNOPSIS"
      },
      {
        "sha": "2f4313bfadf48043c8c67965309acb345e9d4e3a",
        "filename": "doc/man/bitcoind.1",
        "status": "modified",
        "additions": 10,
        "deletions": 8,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ba1f15432962f5f8092dd5e6b23cde823d4ddac/doc/man/bitcoind.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ba1f15432962f5f8092dd5e6b23cde823d4ddac/doc/man/bitcoind.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoind.1?ref=6ba1f15432962f5f8092dd5e6b23cde823d4ddac",
        "patch": "@@ -1,5 +1,5 @@\n .\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIND \"1\" \"August 2018\" \"bitcoind v0.17.0.0\" \"User Commands\"\n+.TH BITCOIND \"1\" \"September 2018\" \"bitcoind v0.17.0.0\" \"User Commands\"\n .SH NAME\n bitcoind \\- manual page for bitcoind v0.17.0.0\n .SH SYNOPSIS\n@@ -61,7 +61,8 @@ Set database cache size in megabytes (4 to 16384, default: 450)\n \\fB\\-debuglogfile=\\fR<file>\n .IP\n Specify location of debug log file. Relative paths will be prefixed by a\n-net\\-specific datadir location. (0 to disable; default: debug.log)\n+net\\-specific datadir location. (\\fB\\-nodebuglogfile\\fR to disable;\n+default: debug.log)\n .HP\n \\fB\\-includeconf=\\fR<file>\n .IP\n@@ -157,7 +158,7 @@ for IPv6\n .HP\n \\fB\\-connect=\\fR<ip>\n .IP\n-Connect only to the specified node; \\fB\\-connect\\fR=\\fI\\,0\\/\\fR disables automatic\n+Connect only to the specified node; \\fB\\-noconnect\\fR disables automatic\n connections (the rules for this peer are the same as for\n \\fB\\-addnode\\fR). This option can be specified multiple times to connect\n to multiple nodes.\n@@ -221,8 +222,8 @@ Tries to keep outbound traffic under the given target (in MiB per 24h),\n .HP\n \\fB\\-onion=\\fR<ip:port>\n .IP\n-Use separate SOCKS5 proxy to reach peers via Tor hidden services\n-(default: \\fB\\-proxy\\fR)\n+Use separate SOCKS5 proxy to reach peers via Tor hidden services, set\n+\\fB\\-noonion\\fR to disable (default: \\fB\\-proxy\\fR)\n .HP\n \\fB\\-onlynet=\\fR<net>\n .IP\n@@ -246,7 +247,8 @@ Listen for connections on <port> (default: 8333 or testnet: 18333)\n .HP\n \\fB\\-proxy=\\fR<ip:port>\n .IP\n-Connect through SOCKS5 proxy\n+Connect through SOCKS5 proxy, set \\fB\\-noproxy\\fR to disable (default:\n+disabled)\n .HP\n \\fB\\-proxyrandomize\\fR\n .IP\n@@ -418,7 +420,7 @@ Debugging/Testing options:\n .HP\n \\fB\\-debug=\\fR<category>\n .IP\n-Output debugging information (default: 0, supplying <category> is\n+Output debugging information (default: \\fB\\-nodebug\\fR, supplying <category> is\n optional). If <category> is not supplied or if <category> = 1,\n output all debugging information. <category> can be: net, tor,\n mempool, http, bench, zmq, db, rpc, estimatefee, addrman,\n@@ -452,7 +454,7 @@ transaction; setting this too low may abort large transactions\n \\fB\\-printtoconsole\\fR\n .IP\n Send trace/debug info to console (default: 1 when no \\fB\\-daemon\\fR. To disable\n-logging to file, set debuglogfile=0)\n+logging to file, set \\fB\\-nodebuglogfile\\fR)\n .HP\n \\fB\\-shrinkdebugfile\\fR\n .IP"
      },
      {
        "sha": "c16009a0baf4070bfd9b1773262d1753d37799fb",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ba1f15432962f5f8092dd5e6b23cde823d4ddac/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ba1f15432962f5f8092dd5e6b23cde823d4ddac/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=6ba1f15432962f5f8092dd5e6b23cde823d4ddac",
        "patch": "@@ -366,7 +366,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-datadir=<dir>\", \"Specify data directory\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-dbbatchsize\", strprintf(\"Maximum database write batch size in bytes (default: %u)\", nDefaultDbBatchSize), true, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-dbcache=<n>\", strprintf(\"Set database cache size in megabytes (%d to %d, default: %d)\", nMinDbCache, nMaxDbCache, nDefaultDbCache), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-debuglogfile=<file>\", strprintf(\"Specify location of debug log file. Relative paths will be prefixed by a net-specific datadir location. (0 to disable; default: %s)\", DEFAULT_DEBUGLOGFILE), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-debuglogfile=<file>\", strprintf(\"Specify location of debug log file. Relative paths will be prefixed by a net-specific datadir location. (-nodebuglogfile to disable; default: %s)\", DEFAULT_DEBUGLOGFILE), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-feefilter\", strprintf(\"Tell other nodes to filter invs to us by our mempool min fee (default: %u)\", DEFAULT_FEEFILTER), true, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-includeconf=<file>\", \"Specify additional configuration file, relative to the -datadir path (only useable from configuration file, not command line)\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-loadblock=<file>\", \"Imports blocks from external blk000??.dat file on startup\", false, OptionsCategory::OPTIONS);\n@@ -398,7 +398,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-banscore=<n>\", strprintf(\"Threshold for disconnecting misbehaving peers (default: %u)\", DEFAULT_BANSCORE_THRESHOLD), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-bantime=<n>\", strprintf(\"Number of seconds to keep misbehaving peers from reconnecting (default: %u)\", DEFAULT_MISBEHAVING_BANTIME), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-bind=<addr>\", \"Bind to given address and always listen on it. Use [host]:port notation for IPv6\", false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-connect=<ip>\", \"Connect only to the specified node; -connect=0 disables automatic connections (the rules for this peer are the same as for -addnode). This option can be specified multiple times to connect to multiple nodes.\", false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-connect=<ip>\", \"Connect only to the specified node; -noconnect disables automatic connections (the rules for this peer are the same as for -addnode). This option can be specified multiple times to connect to multiple nodes.\", false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-discover\", \"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\", false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-dns\", strprintf(\"Allow DNS lookups for -addnode, -seednode and -connect (default: %u)\", DEFAULT_NAME_LOOKUP), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-dnsseed\", \"Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect used)\", false, OptionsCategory::CONNECTION);\n@@ -412,12 +412,12 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-maxsendbuffer=<n>\", strprintf(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\", DEFAULT_MAXSENDBUFFER), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-maxtimeadjustment\", strprintf(\"Maximum allowed median peer time offset adjustment. Local perspective of time may be influenced by peers forward or backward by this amount. (default: %u seconds)\", DEFAULT_MAX_TIME_ADJUSTMENT), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-maxuploadtarget=<n>\", strprintf(\"Tries to keep outbound traffic under the given target (in MiB per 24h), 0 = no limit (default: %d)\", DEFAULT_MAX_UPLOAD_TARGET), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-onion=<ip:port>\", \"Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: -proxy)\", false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-onion=<ip:port>\", \"Use separate SOCKS5 proxy to reach peers via Tor hidden services, set -noonion to disable (default: -proxy)\", false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-onlynet=<net>\", \"Make outgoing connections only through network <net> (ipv4, ipv6 or onion). Incoming connections are not affected by this option. This option can be specified multiple times to allow multiple networks.\", false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-peerbloomfilters\", strprintf(\"Support filtering of blocks and transaction with bloom filters (default: %u)\", DEFAULT_PEERBLOOMFILTERS), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-permitbaremultisig\", strprintf(\"Relay non-P2SH multisig (default: %u)\", DEFAULT_PERMIT_BAREMULTISIG), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-port=<port>\", strprintf(\"Listen for connections on <port> (default: %u or testnet: %u)\", defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort()), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-proxy=<ip:port>\", \"Connect through SOCKS5 proxy\", false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-proxy=<ip:port>\", \"Connect through SOCKS5 proxy, set -noproxy to disable (default: disabled)\", false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-proxyrandomize\", strprintf(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\", DEFAULT_PROXYRANDOMIZE), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-seednode=<ip>\", \"Connect to a node to retrieve peer addresses, and disconnect. This option can be specified multiple times to connect to multiple nodes.\", false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-timeout=<n>\", strprintf(\"Specify connection timeout in milliseconds (minimum: 1, default: %d)\", DEFAULT_CONNECT_TIMEOUT), false, OptionsCategory::CONNECTION);\n@@ -465,7 +465,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT), true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-vbparams=deployment:start:end\", \"Use given start/end times for specified version bits deployment (regtest-only)\", true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-addrmantest\", \"Allows to test address relay on localhost\", true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-debug=<category>\", strprintf(\"Output debugging information (default: %u, supplying <category> is optional)\", 0) + \". \" +\n+    gArgs.AddArg(\"-debug=<category>\", \"Output debugging information (default: -nodebug, supplying <category> is optional). \"\n         \"If <category> is not supplied or if <category> = 1, output all debugging information. <category> can be: \" + ListLogCategories() + \".\", false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-debugexclude=<category>\", strprintf(\"Exclude debugging information for a category. Can be used in conjunction with -debug=1 to output debug logs for all categories except one or more specified categories.\"), false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-help-debug\", \"Show all debugging options (usage: --help -help-debug)\", false, OptionsCategory::DEBUG_TEST);\n@@ -478,7 +478,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-maxtxfee=<amt>\", strprintf(\"Maximum total fees (in %s) to use in a single wallet transaction or raw transaction; setting this too low may abort large transactions (default: %s)\",\n         CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MAXFEE)), false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-printpriority\", strprintf(\"Log transaction fee per kB when mining blocks (default: %u)\", DEFAULT_PRINTPRIORITY), true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -daemon. To disable logging to file, set debuglogfile=0)\", false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -daemon. To disable logging to file, set -nodebuglogfile)\", false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-shrinkdebugfile\", \"Shrink debug.log file on client startup (default: 1 when no -debug)\", false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-uacomment=<cmt>\", \"Append comment to the user agent string\", false, OptionsCategory::DEBUG_TEST);\n "
      }
    ]
  },
  {
    "sha": "83aafd5b3266ea2f6b7ff33d956548085dc63c32",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4M2FhZmQ1YjMyNjZlYTJmNmI3ZmYzM2Q5NTY1NDgwODVkYzYzYzMy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-08-30T11:04:19Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-09-06T11:54:01Z"
      },
      "message": "util: Report parse errors in configuration file\n\nReport errors while parsing the configuration file, instead of silently\nignoring them.\n\n    $ src/bitcoind -regtest\n    Error reading configuration file: parse error on line 22: nodebuglogfile, if you intended to specify a negated option, use nodebuglogfile=1 instead\n    $ src/bitcoind -regtest\n    Error reading configuration file: parse error on line 22: sdafsdfafs\n    $ src/bitcoind -regtest\n    Error reading configuration file: parse error on line 24: -nodebuglogfile=1, options in the configuration file must be specified without leading -\n\nGithub-Pull: #14105\nRebased-From: a66c0f78a941968340f030911765a84219908c4d\nTree-SHA512: 2b6be1ab643623e6ef9b53354820147a6c5d2baae3795ffe428fc60d8563ec00a68a379aee4029380f80f892abe23763afb1c75c32b60a13bffe7b82496bf2bb",
      "tree": {
        "sha": "2b2d93127b5c150d4ffb931d573e6f068f365c3e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2b2d93127b5c150d4ffb931d573e6f068f365c3e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/83aafd5b3266ea2f6b7ff33d956548085dc63c32",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAluRFVkACgkQHkrtYphs\n0l325Af+KvwIHkCxCPtGqL6aFrWwxjCMnWg9uUIPLzZW2RhtmKNiqQvYwoE4TY88\nYjJdYDLR7ovF/NDbGUgStrfI+lkzpA0RwLi2vmMU3tXmYbeNq3WMFz40ty/bZzzg\n42rYikI+lAy4Y6zZ61L+9OTcVaJ2Nfm/yQW5oYj64VuDUX4cz8nAeQ/kOl1CYJKL\n2PjpumWaBq2OeAeLfmOFfg2TSjeaJRWXnms7Wdc8ZxdBsonhYRuvf1sq4sbxn2P4\nqhRG3suGG25h+7IyJj3HHe+0HYTBiYgbd28tSWk7v2PbnEO/RMzYZlcWmFE5sgW9\nhw5S0nff//xON6LBxMJI19uw3zgcdw==\n=3/Pt\n-----END PGP SIGNATURE-----",
        "payload": "tree 2b2d93127b5c150d4ffb931d573e6f068f365c3e\nparent 6ba1f15432962f5f8092dd5e6b23cde823d4ddac\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1535627059 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1536234841 +0200\n\nutil: Report parse errors in configuration file\n\nReport errors while parsing the configuration file, instead of silently\nignoring them.\n\n    $ src/bitcoind -regtest\n    Error reading configuration file: parse error on line 22: nodebuglogfile, if you intended to specify a negated option, use nodebuglogfile=1 instead\n    $ src/bitcoind -regtest\n    Error reading configuration file: parse error on line 22: sdafsdfafs\n    $ src/bitcoind -regtest\n    Error reading configuration file: parse error on line 24: -nodebuglogfile=1, options in the configuration file must be specified without leading -\n\nGithub-Pull: #14105\nRebased-From: a66c0f78a941968340f030911765a84219908c4d\nTree-SHA512: 2b6be1ab643623e6ef9b53354820147a6c5d2baae3795ffe428fc60d8563ec00a68a379aee4029380f80f892abe23763afb1c75c32b60a13bffe7b82496bf2bb\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83aafd5b3266ea2f6b7ff33d956548085dc63c32",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/83aafd5b3266ea2f6b7ff33d956548085dc63c32",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83aafd5b3266ea2f6b7ff33d956548085dc63c32/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6ba1f15432962f5f8092dd5e6b23cde823d4ddac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ba1f15432962f5f8092dd5e6b23cde823d4ddac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6ba1f15432962f5f8092dd5e6b23cde823d4ddac"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 18,
      "deletions": 5
    },
    "files": [
      {
        "sha": "a391c5e857bf09ed09b8980734309204de9a60b1",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 5,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83aafd5b3266ea2f6b7ff33d956548085dc63c32/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83aafd5b3266ea2f6b7ff33d956548085dc63c32/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=83aafd5b3266ea2f6b7ff33d956548085dc63c32",
        "patch": "@@ -820,11 +820,11 @@ static std::string TrimString(const std::string& str, const std::string& pattern\n     return str.substr(front, end - front + 1);\n }\n \n-static std::vector<std::pair<std::string, std::string>> GetConfigOptions(std::istream& stream)\n+static bool GetConfigOptions(std::istream& stream, std::string& error, std::vector<std::pair<std::string, std::string>> &options)\n {\n-    std::vector<std::pair<std::string, std::string>> options;\n     std::string str, prefix;\n     std::string::size_type pos;\n+    int linenr = 1;\n     while (std::getline(stream, str)) {\n         if ((pos = str.find('#')) != std::string::npos) {\n             str = str.substr(0, pos);\n@@ -834,21 +834,34 @@ static std::vector<std::pair<std::string, std::string>> GetConfigOptions(std::is\n         if (!str.empty()) {\n             if (*str.begin() == '[' && *str.rbegin() == ']') {\n                 prefix = str.substr(1, str.size() - 2) + '.';\n+            } else if (*str.begin() == '-') {\n+                error = strprintf(\"parse error on line %i: %s, options in configuration file must be specified without leading -\", linenr, str);\n+                return false;\n             } else if ((pos = str.find('=')) != std::string::npos) {\n                 std::string name = prefix + TrimString(str.substr(0, pos), pattern);\n                 std::string value = TrimString(str.substr(pos + 1), pattern);\n                 options.emplace_back(name, value);\n+            } else {\n+                error = strprintf(\"parse error on line %i: %s\", linenr, str);\n+                if (str.size() >= 2 && str.substr(0, 2) == \"no\") {\n+                    error += strprintf(\", if you intended to specify a negated option, use %s=1 instead\", str);\n+                }\n+                return false;\n             }\n         }\n+        ++linenr;\n     }\n-    return options;\n+    return true;\n }\n \n bool ArgsManager::ReadConfigStream(std::istream& stream, std::string& error, bool ignore_invalid_keys)\n {\n     LOCK(cs_args);\n-\n-    for (const std::pair<std::string, std::string>& option : GetConfigOptions(stream)) {\n+    std::vector<std::pair<std::string, std::string>> options;\n+    if (!GetConfigOptions(stream, error, options)) {\n+        return false;\n+    }\n+    for (const std::pair<std::string, std::string>& option : options) {\n         std::string strKey = std::string(\"-\") + option.first;\n         std::string strValue = option.second;\n "
      }
    ]
  },
  {
    "sha": "eb202ea21de1fbcc32fb3db63fcce4135b7a2849",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYjIwMmVhMjFkZTFmYmNjMzJmYjNkYjYzZmNjZTQxMzViN2EyODQ5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-09-06T09:29:40Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-09-06T11:54:05Z"
      },
      "message": "test: Add test for config file parsing errors\n\nGithub-Pull: #14105\nRebased-From: ed2332aeffb071a3404be9cff8f9fb8a81a9fbfb\nTree-SHA512: 17fa88a2848f1c9c9c8a127b5ea4c45761ce8e06a609dd40f8e90bb9117d88c9d2c81e752c9c0f1a44ecadbb5bedd2973bc4548da2a6d463c789797191e85ab1",
      "tree": {
        "sha": "8a1f7e378287fc522c99b6a4b800bcb412943220",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8a1f7e378287fc522c99b6a4b800bcb412943220"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eb202ea21de1fbcc32fb3db63fcce4135b7a2849",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAluRFV0ACgkQHkrtYphs\n0l0b0gf9FIWuFw734Kk7b1InGDDXKXEY7dr+ksPDadPwA4kpQfq6iAw/fxFc6dkL\nNwm3BOmWdds2MAL7AEVCGRkNy4Tjfy3b0DB/MFghyCq4S30XLuupSLXtz4KKLnHu\nDCGbUhEhVCp7Bw/48RD9V5/sAeIsqjOyvjZBl8focp7Bv7bd0WKzhyKSTIH+qQni\nKqJtwiX8JS73s3mq2vCCzxJTkvOPDpv6Z61yRLQasRWJPURcwA28a5KAl+5dW4lf\n8MxvofqLLcKQRod8BnLbZtFBnfKobhndazQX6+wGBnAJMhtDh3pU1pNWZFh4QPsP\ni4bquVAUlg720iT88SNYv22rJOyKQw==\n=SGFC\n-----END PGP SIGNATURE-----",
        "payload": "tree 8a1f7e378287fc522c99b6a4b800bcb412943220\nparent 83aafd5b3266ea2f6b7ff33d956548085dc63c32\nauthor MarcoFalke <falke.marco@gmail.com> 1536226180 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1536234845 +0200\n\ntest: Add test for config file parsing errors\n\nGithub-Pull: #14105\nRebased-From: ed2332aeffb071a3404be9cff8f9fb8a81a9fbfb\nTree-SHA512: 17fa88a2848f1c9c9c8a127b5ea4c45761ce8e06a609dd40f8e90bb9117d88c9d2c81e752c9c0f1a44ecadbb5bedd2973bc4548da2a6d463c789797191e85ab1\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb202ea21de1fbcc32fb3db63fcce4135b7a2849",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eb202ea21de1fbcc32fb3db63fcce4135b7a2849",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb202ea21de1fbcc32fb3db63fcce4135b7a2849/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "83aafd5b3266ea2f6b7ff33d956548085dc63c32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83aafd5b3266ea2f6b7ff33d956548085dc63c32",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/83aafd5b3266ea2f6b7ff33d956548085dc63c32"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 21,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9be59b32b42ecf777c1f8be1922db3ea2b36e3c6",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb202ea21de1fbcc32fb3db63fcce4135b7a2849/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb202ea21de1fbcc32fb3db63fcce4135b7a2849/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=eb202ea21de1fbcc32fb3db63fcce4135b7a2849",
        "patch": "@@ -14,8 +14,29 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n+    def test_config_file_parser(self):\n+        # Assume node is stopped\n+\n+        inc_conf_file_path = os.path.join(self.nodes[0].datadir, 'include.conf')\n+        with open(os.path.join(self.nodes[0].datadir, 'bitcoin.conf'), 'a', encoding='utf-8') as conf:\n+            conf.write('includeconf={}\\n'.format(inc_conf_file_path))\n+\n+        with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n+            conf.write('-dash=1\\n')\n+        self.nodes[0].assert_start_raises_init_error(expected_msg='Error reading configuration file: parse error on line 1: -dash=1, options in configuration file must be specified without leading -')\n+\n+        with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n+            conf.write('nono\\n')\n+        self.nodes[0].assert_start_raises_init_error(expected_msg='Error reading configuration file: parse error on line 1: nono, if you intended to specify a negated option, use nono=1 instead')\n+\n+        with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n+            conf.write('')  # clear\n+\n     def run_test(self):\n         self.stop_node(0)\n+\n+        self.test_config_file_parser()\n+\n         # Remove the -datadir argument so it doesn't override the config file\n         self.nodes[0].args = [arg for arg in self.nodes[0].args if not arg.startswith(\"-datadir\")]\n "
      }
    ]
  },
  {
    "sha": "0f681cecadb9472b3d3ae2c1dd23d8173dc2e316",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZjY4MWNlY2FkYjk0NzJiM2QzYWUyYzFkZDIzZDgxNzNkYzJlMzE2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-08-28T21:09:36Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-09-06T12:51:54Z"
      },
      "message": "Add descriptor reference documentation\n\nGithub-Pull: #14096\nRebased-From: 9254ffcf2d910ecb0f9ecbeef6d40a2008a44870\nTree-SHA512: 1fc466177dbe3b57b0025c102b1e75e4b05544440819885da7a85b70d20329fc3f6f4cbf89d7d6a48881e6ad176d81f7396f02925586140e19468a2f28f3414e",
      "tree": {
        "sha": "0aceb983a21b0c244804f6a4a5609e1e7fe046cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0aceb983a21b0c244804f6a4a5609e1e7fe046cf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0f681cecadb9472b3d3ae2c1dd23d8173dc2e316",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAluRIuoACgkQHkrtYphs\n0l07NAgAxXvOT/A1XDvcXnejQdeTxA4fKw0wMe4SGXLdCaHRTlAECOQHekMLq92c\nequX10EqqPgflB4X+hym1Utu5fXWWPKMPYX7Iu8WYPe+areJNJv7WeO+M0yXrMsq\nhln2BMKrkopbMOQLw+J8BMRHfS63zR9y5DVggLB6Vgl/wNX8/phq6StRhfTEnrX1\nXLWS6dWqK2Z1UA83zh822/Q72DM2wmPO7KLPtSWw/4OQ/Hd+Ci1rUoENz/2lysp/\nhnlXySIx5+bA/UGNZhIbVkWr4NdO1GDyCMfxXLQX1SfA28OR8vYhTY1dxu4HcSkb\nuB30Sxf00ASU2IhGT/ZCBSJIBlyIgQ==\n=Udly\n-----END PGP SIGNATURE-----",
        "payload": "tree 0aceb983a21b0c244804f6a4a5609e1e7fe046cf\nparent eb202ea21de1fbcc32fb3db63fcce4135b7a2849\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1535490576 -0700\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1536238314 +0200\n\nAdd descriptor reference documentation\n\nGithub-Pull: #14096\nRebased-From: 9254ffcf2d910ecb0f9ecbeef6d40a2008a44870\nTree-SHA512: 1fc466177dbe3b57b0025c102b1e75e4b05544440819885da7a85b70d20329fc3f6f4cbf89d7d6a48881e6ad176d81f7396f02925586140e19468a2f28f3414e\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f681cecadb9472b3d3ae2c1dd23d8173dc2e316",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0f681cecadb9472b3d3ae2c1dd23d8173dc2e316",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f681cecadb9472b3d3ae2c1dd23d8173dc2e316/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eb202ea21de1fbcc32fb3db63fcce4135b7a2849",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb202ea21de1fbcc32fb3db63fcce4135b7a2849",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eb202ea21de1fbcc32fb3db63fcce4135b7a2849"
      }
    ],
    "stats": {
      "total": 124,
      "additions": 124,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c23ac06e8ff80b48043d5854f005c0f91f56d769",
        "filename": "doc/descriptors.md",
        "status": "added",
        "additions": 124,
        "deletions": 0,
        "changes": 124,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f681cecadb9472b3d3ae2c1dd23d8173dc2e316/doc/descriptors.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f681cecadb9472b3d3ae2c1dd23d8173dc2e316/doc/descriptors.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/descriptors.md?ref=0f681cecadb9472b3d3ae2c1dd23d8173dc2e316",
        "patch": "@@ -0,0 +1,124 @@\n+# Support for Output Descriptors in Bitcoin Core\n+\n+Since Bitcoin Core v0.17, there is support for Output Descriptors in the\n+`scantxoutset` RPC call. This is a simple language which can be used to\n+describe collections of output scripts.\n+\n+This document describes the language. For the specifics on usage for scanning\n+the UTXO set, see the `scantxoutset` RPC help.\n+\n+## Features\n+\n+Output descriptors currently support:\n+- Pay-to-pubkey scripts (P2PK), through the `pk` function.\n+- Pay-to-pubkey-hash scripts (P2PKH), through the `pkh` function.\n+- Pay-to-witness-pubkey-hash scripts (P2WPKH), through the `wpkh` function.\n+- Pay-to-script-hash scripts (P2SH), through the `sh` function.\n+- Pay-to-witness-script-hash scripts (P2WSH), through the `wsh` function.\n+- Multisig scripts, through the `multi` function.\n+- Any type of supported address through the `addr` function.\n+- Raw hex scripts through the `raw` function.\n+- Public keys (compressed and uncompressed) in hex notation, or BIP32 extended pubkeys with derivation paths.\n+\n+## Examples\n+\n+- `pk(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)` represents a P2PK output.\n+- `pkh(02c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5)` represents a P2PKH output.\n+- `wpkh(02f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9)` represents a P2WPKH output.\n+- `sh(wpkh(03fff97bd5755eeea420453a14355235d382f6472f8568a18b2f057a1460297556))` represents a P2SH-P2WPKH output.\n+- `combo(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)` represents a P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH output.\n+- `sh(wsh(pkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13)))` represents a (overly complicated) P2SH-P2WSH-P2PKH output.\n+- `multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc)` represents a bare *1-of-2* multisig.\n+- `sh(multi(2,022f01e5e15cca351daff3843fb70f3c2f0a1bdd05e5af888a67784ef3e10a2a01,03acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe))` represents a P2SH *2-of-2* multisig.\n+- `wsh(multi(2,03a0434d9e47f3c86235477c7b1ae6ae5d3442d49b1943c2b752a68e2a47e247c7,03774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb,03d01115d548e7561b15c38f004d734633687cf4419620095bc5b0f47070afe85a))` represents a P2WSH *2-of-3* multisig.\n+- `sh(wsh(multi(1,03f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8,03499fdf9e895e719cfd64e67f07d38e3226aa7b63678949e6e49b241a60e823e4,02d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e)))` represents a P2SH-P2WSH *1-of-3* multisig.\n+- `pk(xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8)` refers to a single P2PK output, using the public key part from the specified xpub.\n+- `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1'/2)` refers to a single P2PKH output, using child key *1'/2* of the specified xpub.\n+- `wsh(multi(1,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/1/0/*,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/0/*))` refers to a chain of *1-of-2* P2WSH multisig outputs, using public keys taken from two HD chains with corresponding derivation paths.\n+\n+## Reference\n+\n+Descriptors consist of several types of expressions. The top level expression is always a `SCRIPT`.\n+\n+`SCRIPT` expressions:\n+- `sh(SCRIPT)` (top level only): P2SH embed the argument.\n+- `wsh(SCRIPT)` (not inside another 'wsh'): P2WSH embed the argument.\n+- `pk(KEY)` (anywhere): P2PK output for the given public key.\n+- `pkh(KEY)` (anywhere): P2PKH output for the given public key (use `addr` if you only know the pubkey hash).\n+- `wpkh(KEY)` (not inside `wsh`): P2WPKH output for the given compressed pubkey.\n+- `combo(KEY)` (top level only): an alias for the collection of `pk(KEY)` and `pkh(KEY)`. If the key is compressed, it also includes `wpkh(KEY)` and `sh(wpkh(KEY))`.\n+- `multi(k,KEY_1,KEY_2,...,KEY_n)` (anywhere): k-of-n multisig script.\n+- `addr(ADDR)` (top level only): the script which ADDR expands to.\n+- `raw(HEX)` (top level only): the script whose hex encoding is HEX.\n+\n+`KEY` expressions:\n+- Hex encoded public keys (66 characters starting with `02` or `03`, or 130 characters starting with `04`).\n+  - Inside `wpkh` and `wsh`, only compressed public keys are permitted.\n+- [WIF](https://en.bitcoin.it/wiki/Wallet_import_format) encoded private keys may be specified instead of the corresponding public key, with the same meaning.\n+-`xpub` encoded extended public key or `xprv` encoded private key (as defined in [BIP 32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)).\n+  - Followed by zero or more `/NUM` unhardened and `/NUM'` hardened BIP32 derivation steps.\n+  - Optionally followed by a single `/*` or `/*'` final step to denote all (direct) unhardened or hardened children.\n+  - The usage of hardened derivation steps requires providing the private key.\n+  - Instead of a `'`, the suffix `h` can be used to denote hardened derivation.\n+\n+`ADDR` expressions are any type of supported address:\n+- P2PKH addresses (base58, of the form `1...`). Note that P2PKH addresses in descriptors cannot be used for P2PK outputs (use the `pk` function instead).\n+- P2SH addresses (base58, of the form `3...`, defined in [BIP 13](https://github.com/bitcoin/bips/blob/master/bip-0013.mediawiki)).\n+- Segwit addresses (bech32, of the form `bc1...`, defined in [BIP 173](https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki)).\n+\n+## Explanation\n+\n+### Single-key scripts\n+\n+Many single-key constructions are used in practice, generally including\n+P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH. Many more combinations are\n+imaginable, though they may not be optimal: P2SH-P2PK, P2SH-P2PKH,\n+P2WSH-P2PK, P2WSH-P2PKH, P2SH-P2WSH-P2PK, P2SH-P2WSH-P2PKH.\n+\n+To describe these, we model these as functions. The functions `pk`\n+(P2PK), `pkh` (P2PKH) and `wpkh` (P2WPKH) take as input a public key in\n+hexadecimal notation (which will be extended later), and return the\n+corresponding *scriptPubKey*. The functions `sh` (P2SH) and `wsh` (P2WSH)\n+take as input a script, and return the script describing P2SH and P2WSH\n+outputs with the input as embedded script. The names of the functions do\n+not contain \"p2\" for brevity.\n+\n+### Multisig\n+\n+Several pieces of software use multi-signature (multisig) scripts based\n+on Bitcoin's OP_CHECKMULTISIG opcode. To support these, we introduce the\n+`multi(k,key_1,key_2,...,key_n)` function. It represents a *k-of-n*\n+multisig policy, where any *k* out of the *n* provided public keys must\n+sign.\n+\n+### BIP32 derived keys and chains\n+\n+Most modern wallet software and hardware uses keys that are derived using\n+BIP32 (\"HD keys\"). We support these directly by permitting strings\n+consisting of an extended public key (commonly referred to as an *xpub*)\n+plus derivation path anywhere a public key is expected. The derivation\n+path consists of a sequence of 0 or more integers (in the range\n+*0..2<sup>31</sup>-1*) each optionally followed by `'` or `h`, and\n+separated by `/` characters. The string may optionally end with the\n+literal `/*` or `/*'` (or `/*h`) to refer to all unhardened or hardened\n+child keys instead.\n+\n+Whenever a public key is described using a hardened derivation step, the\n+script cannot be computed without access to the corresponding private\n+key.\n+\n+### Including private keys\n+\n+Often it is useful to communicate a description of scripts along with the\n+necessary private keys. For this reason, anywhere a public key or xpub is\n+supported, a private key in WIF format or xprv may be provided instead.\n+This is useful when private keys are necessary for hardened derivation\n+steps, or for dumping wallet descriptors including private key material.\n+\n+### Compatibility with old wallets\n+\n+In order to easily represent the sets of scripts currently supported by\n+existing Bitcoin Core wallets, a convenience function `combo` is\n+provided, which takes as input a public key, and constructs the P2PK,\n+P2PKH, P2WPKH, and P2SH-P2WPH scripts for that key. In case the key is\n+uncompressed, it only constructs P2PK and P2PKH."
      }
    ]
  },
  {
    "sha": "eece974d0a3b8049e73cc29a4d14efddc00101a3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZWNlOTc0ZDBhM2I4MDQ5ZTczY2MyOWE0ZDE0ZWZkZGMwMDEwMWEz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-08-28T21:11:11Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-09-06T12:51:59Z"
      },
      "message": "Adjust TODO link\n\nGithub-Pull: #14096\nRebased-From: 89709db7a2710456011eac9dcd6a60d5e87b97ae\nTree-SHA512: 0bf74e1179bee6e616d8fd2c125411ef30611d9aa3b32412025615a793abbc629a7b6d89a89ef05b11ac3541cc869c0caebba2d00942fdd6ab8d2e98d9b9caca",
      "tree": {
        "sha": "f7c8f73f6964b750aa4d0b541b61792f0d27831f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f7c8f73f6964b750aa4d0b541b61792f0d27831f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eece974d0a3b8049e73cc29a4d14efddc00101a3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAluRIu8ACgkQHkrtYphs\n0l2tvQf9EU2j7zXaxeWdatOKR70BrPCobH/G1SEDKB6DhI1yPWorqG0myC10f9OJ\nAvPPoUEkoMo26sV8acabgOBkyZxsch1W6SEe5RB3QAutYjg6WsZJDDAXEOcXXtXE\nMVBrN+YTstahEolWRN7Txsur24m0uKPzQnljb6qCvIN+J7TVfTLRVQfPKktVHUVt\ncjtjiA1s+RBBEWv9sUEjcyad31Zbc7s3K2NZArROs84QVMjB940n+HPRhhwfGfjL\n9yjDXo8uCcRONzLKDccgiPlgGWrA+pQmwqoS6WMCp/nvS3A0H5YhfbfV0pplyUrE\nom0sFkRchZRsis4Sp+EZxfnreYrhwA==\n=Th5t\n-----END PGP SIGNATURE-----",
        "payload": "tree f7c8f73f6964b750aa4d0b541b61792f0d27831f\nparent 0f681cecadb9472b3d3ae2c1dd23d8173dc2e316\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1535490671 -0700\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1536238319 +0200\n\nAdjust TODO link\n\nGithub-Pull: #14096\nRebased-From: 89709db7a2710456011eac9dcd6a60d5e87b97ae\nTree-SHA512: 0bf74e1179bee6e616d8fd2c125411ef30611d9aa3b32412025615a793abbc629a7b6d89a89ef05b11ac3541cc869c0caebba2d00942fdd6ab8d2e98d9b9caca\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eece974d0a3b8049e73cc29a4d14efddc00101a3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eece974d0a3b8049e73cc29a4d14efddc00101a3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eece974d0a3b8049e73cc29a4d14efddc00101a3/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0f681cecadb9472b3d3ae2c1dd23d8173dc2e316",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f681cecadb9472b3d3ae2c1dd23d8173dc2e316",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0f681cecadb9472b3d3ae2c1dd23d8173dc2e316"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "948553d9ab48dfa6887a4906de79d35fddc3768f",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eece974d0a3b8049e73cc29a4d14efddc00101a3/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eece974d0a3b8049e73cc29a4d14efddc00101a3/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=eece974d0a3b8049e73cc29a4d14efddc00101a3",
        "patch": "@@ -2045,7 +2045,7 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n             \"or more path elements separated by \\\"/\\\", and optionally ending in \\\"/*\\\" (unhardened), or \\\"/*'\\\" or \\\"/*h\\\" (hardened) to specify all\\n\"\n             \"unhardened or hardened child keys.\\n\"\n             \"In the latter case, a range needs to be specified by below if different from 1000.\\n\"\n-            \"For more information on output descriptors, see the documentation at TODO\\n\"\n+            \"For more information on output descriptors, see the documentation in the doc/descriptors.md file.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"action\\\"                       (string, required) The action to execute\\n\"\n             \"                                      \\\"start\\\" for starting a scan\\n\""
      }
    ]
  },
  {
    "sha": "465a583f9dcc2383eb20bbb98bffa66fe82f2cde",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NjVhNTgzZjlkY2MyMzgzZWIyMGJiYjk4YmZmYTY2ZmU4MmYyY2Rl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-09-05T17:59:02Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-09-06T12:52:00Z"
      },
      "message": "Replace duplcate reference with reference to reference doc\n\nGithub-Pull: #14096\nRebased-From: 2b5d6f8df24b381d35b75187c97ae0cc9f7c3ed0\nTree-SHA512: 79af808c581ebb17d60aab8322b1debcc4182480b84eaedcbfac1e67c8b543c61df22789095742d67d732dba35e7e5fad77912385b695f89fb0f44f75db11560",
      "tree": {
        "sha": "436cd09429fd9975b047e05e3b1551d38ab1dfba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/436cd09429fd9975b047e05e3b1551d38ab1dfba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/465a583f9dcc2383eb20bbb98bffa66fe82f2cde",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAluRIvAACgkQHkrtYphs\n0l03bggAtly99p1pB6bXCh3py6HWzJhInfo7AqrRVen8/v9XNp11vrmcupysIz6P\nibKuZT0N7UIdq6Ft4a804RfMAc5lWyyptiX6cpMK2VCbCmlc90/bbkMoEvBV52Wm\nqwpoyASu3vqSULbq0QP7blvXbfq6xwsRluwOXq+qaahxn8VbI0hxGupoIAsYZH27\n/SbEbRiT4vUTwJ4LTwsChuGujvSHje/2vvqQuWRTBLgHGo06kcxs/vvTviHbtkA4\nHYHrYx2Qo1I49s1690Nt4LGbYDNbl549mFZHHGbJ9cL8QQ6yHRsdpZSdLt9GpSF+\nkHcUZaGatZvfLBjgumtjdVOg7G3nnQ==\n=yn4b\n-----END PGP SIGNATURE-----",
        "payload": "tree 436cd09429fd9975b047e05e3b1551d38ab1dfba\nparent eece974d0a3b8049e73cc29a4d14efddc00101a3\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1536170342 -0700\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1536238320 +0200\n\nReplace duplcate reference with reference to reference doc\n\nGithub-Pull: #14096\nRebased-From: 2b5d6f8df24b381d35b75187c97ae0cc9f7c3ed0\nTree-SHA512: 79af808c581ebb17d60aab8322b1debcc4182480b84eaedcbfac1e67c8b543c61df22789095742d67d732dba35e7e5fad77912385b695f89fb0f44f75db11560\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/465a583f9dcc2383eb20bbb98bffa66fe82f2cde",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/465a583f9dcc2383eb20bbb98bffa66fe82f2cde",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/465a583f9dcc2383eb20bbb98bffa66fe82f2cde/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eece974d0a3b8049e73cc29a4d14efddc00101a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eece974d0a3b8049e73cc29a4d14efddc00101a3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eece974d0a3b8049e73cc29a4d14efddc00101a3"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 2,
      "deletions": 49
    },
    "files": [
      {
        "sha": "87e07369c7fe0c872c23c33ed64a175af79b9449",
        "filename": "src/script/descriptor.h",
        "status": "modified",
        "additions": 2,
        "deletions": 49,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/465a583f9dcc2383eb20bbb98bffa66fe82f2cde/src/script/descriptor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/465a583f9dcc2383eb20bbb98bffa66fe82f2cde/src/script/descriptor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.h?ref=465a583f9dcc2383eb20bbb98bffa66fe82f2cde",
        "patch": "@@ -22,55 +22,8 @@\n // they can be included inside by changing public keys to private keys (WIF\n // format), and changing xpubs by xprvs.\n //\n-// 1. Examples\n-//\n-// A P2PK descriptor with a fixed public key:\n-// - pk(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)\n-//\n-// A P2SH-P2WSH-P2PKH descriptor with a fixed public key:\n-// - sh(wsh(pkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13)))\n-//\n-// A bare 1-of-2 multisig descriptor:\n-// - multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc)\n-//\n-// A chain of P2PKH outputs (this needs the corresponding private key to derive):\n-// - pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1'/2/*)\n-//\n-// 2. Grammar description:\n-//\n-// X: xpub or xprv encoded extended key\n-// I: decimal encoded integer\n-// H: Hex encoded byte array\n-// A: Address in P2PKH, P2SH, or Bech32 encoding\n-//\n-// S (Scripts):\n-// * pk(P): Pay-to-pubkey (P2PK) output for public key P.\n-// * pkh(P): Pay-to-pubkey-hash (P2PKH) output for public key P.\n-// * wpkh(P): Pay-to-witness-pubkey-hash (P2WPKH) output for public key P.\n-// * sh(S): Pay-to-script-hash (P2SH) output for script S\n-// * wsh(S): Pay-to-witness-script-hash (P2WSH) output for script S\n-// * combo(P): combination of P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH for public key P.\n-// * multi(I,L): k-of-n multisig for given public keys\n-// * addr(A): Output to address\n-// * raw(H): scriptPubKey with raw bytes\n-//\n-// P (Public keys):\n-// * H: fixed public key (or WIF-encoded private key)\n-// * E: extended public key\n-// * E/*: (ranged) all unhardened direct children of an extended public key\n-// * E/*': (ranged) all hardened direct children of an extended public key\n-//\n-// L (Comma-separated lists of public keys):\n-// * P\n-// * L,P\n-//\n-// E (Extended public keys):\n-// * X\n-// * E/I: unhardened child\n-// * E/I': hardened child\n-// * E/Ih: hardened child (alternative notation)\n-//\n-// The top level is S.\n+// Reference documentation about the descriptor language can be found in\n+// doc/descriptors.md.\n \n /** Interface for parsed descriptor objects. */\n struct Descriptor {"
      }
    ]
  },
  {
    "sha": "fcdea8ad2ac1f4f55133fdf9047410631e9cc21f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmY2RlYThhZDJhYzFmNGY1NTEzM2ZkZjkwNDc0MTA2MzFlOWNjMjFm",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-09-11T04:09:57Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-09-11T04:09:57Z"
      },
      "message": "Drop the unnecessary UTXO based on the UTXOs present, not on earlier wallet things\n\nInstead of dropping the unnecessary UTXO based on whether the wallet did something,\ndo it based on whether two UTXOs are there.",
      "tree": {
        "sha": "9dda42817177ed32c05127e5b7632b614cf2317d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9dda42817177ed32c05127e5b7632b614cf2317d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fcdea8ad2ac1f4f55133fdf9047410631e9cc21f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fcdea8ad2ac1f4f55133fdf9047410631e9cc21f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fcdea8ad2ac1f4f55133fdf9047410631e9cc21f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fcdea8ad2ac1f4f55133fdf9047410631e9cc21f/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "465a583f9dcc2383eb20bbb98bffa66fe82f2cde",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/465a583f9dcc2383eb20bbb98bffa66fe82f2cde",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/465a583f9dcc2383eb20bbb98bffa66fe82f2cde"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "96e63dac230e0be1e5aa6c46cb95c594d56b04e4",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcdea8ad2ac1f4f55133fdf9047410631e9cc21f/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcdea8ad2ac1f4f55133fdf9047410631e9cc21f/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fcdea8ad2ac1f4f55133fdf9047410631e9cc21f",
        "patch": "@@ -4525,8 +4525,8 @@ bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, const C\n             complete &= SignPSBTInput(PublicOnlySigningProvider(pwallet), *psbtx.tx, input, sigdata, i, sighash_type);\n         }\n \n-        if (it != pwallet->mapWallet.end()) {\n-            // Drop the unnecessary UTXO if we added both from the wallet.\n+        // If both UTXO types are present, drop the unnecessary one.\n+        if (input.non_witness_utxo && !input.witness_utxo.IsNull()) {\n             if (sigdata.witness) {\n                 input.non_witness_utxo = nullptr;\n             } else {"
      }
    ]
  },
  {
    "sha": "fcefc6851a624b59bd1bb42d211ce69f85969880",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmY2VmYzY4NTFhNjI0YjU5YmQxYmI0MmQyMTFjZTY5Zjg1OTY5ODgw",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-09-11T04:11:00Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-09-11T04:11:00Z"
      },
      "message": "Convert non-witness UTXOs to witness if witness sig created\n\nIf a witness signature was created when a non-witness UTXO is used,\nconvert the non-witness UTXO to a witness one.",
      "tree": {
        "sha": "bba1b914079964cb51a1dbbba653202910978917",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bba1b914079964cb51a1dbbba653202910978917"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fcefc6851a624b59bd1bb42d211ce69f85969880",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fcefc6851a624b59bd1bb42d211ce69f85969880",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fcefc6851a624b59bd1bb42d211ce69f85969880",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fcefc6851a624b59bd1bb42d211ce69f85969880/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fcdea8ad2ac1f4f55133fdf9047410631e9cc21f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fcdea8ad2ac1f4f55133fdf9047410631e9cc21f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fcdea8ad2ac1f4f55133fdf9047410631e9cc21f"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 7,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b268e9a877c8145e7713b60915fcb7d130eed7ce",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcefc6851a624b59bd1bb42d211ce69f85969880/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcefc6851a624b59bd1bb42d211ce69f85969880/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fcefc6851a624b59bd1bb42d211ce69f85969880",
        "patch": "@@ -4525,6 +4525,13 @@ bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, const C\n             complete &= SignPSBTInput(PublicOnlySigningProvider(pwallet), *psbtx.tx, input, sigdata, i, sighash_type);\n         }\n \n+        if (sigdata.witness) {\n+            // Convert the non-witness utxo to witness\n+            if (input.witness_utxo.IsNull() && input.non_witness_utxo) {\n+                input.witness_utxo = input.non_witness_utxo->vout[txin.prevout.n];\n+            }\n+        }\n+\n         // If both UTXO types are present, drop the unnecessary one.\n         if (input.non_witness_utxo && !input.witness_utxo.IsNull()) {\n             if (sigdata.witness) {"
      }
    ]
  },
  {
    "sha": "833180f538c7fa16b097022c7c0d4b4d2f09688b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MzMxODBmNTM4YzdmYTE2YjA5NzAyMmM3YzBkNGI0ZDJmMDk2ODhi",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2018-09-17T20:13:37Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-09-17T20:14:31Z"
      },
      "message": "Fix crash bug with duplicate inputs within a transaction\n\nIntroduced by #9049",
      "tree": {
        "sha": "16d769295bd202615ccb84f94d62e18944b8f402",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/16d769295bd202615ccb84f94d62e18944b8f402"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/833180f538c7fa16b097022c7c0d4b4d2f09688b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/833180f538c7fa16b097022c7c0d4b4d2f09688b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/833180f538c7fa16b097022c7c0d4b4d2f09688b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/833180f538c7fa16b097022c7c0d4b4d2f09688b/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "465a583f9dcc2383eb20bbb98bffa66fe82f2cde",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/465a583f9dcc2383eb20bbb98bffa66fe82f2cde",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/465a583f9dcc2383eb20bbb98bffa66fe82f2cde"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d3908fc1d8e66500b319bfc23025c2c7ac7c7fb5",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/833180f538c7fa16b097022c7c0d4b4d2f09688b/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/833180f538c7fa16b097022c7c0d4b4d2f09688b/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=833180f538c7fa16b097022c7c0d4b4d2f09688b",
        "patch": "@@ -3130,7 +3130,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n \n     // Check transactions\n     for (const auto& tx : block.vtx)\n-        if (!CheckTransaction(*tx, state, false))\n+        if (!CheckTransaction(*tx, state, true))\n             return state.Invalid(false, state.GetRejectCode(), state.GetRejectReason(),\n                                  strprintf(\"Transaction check failed (tx hash %s) %s\", tx->GetHash().ToString(), state.GetDebugMessage()));\n "
      }
    ]
  },
  {
    "sha": "0d49c82edd4c2c92f8ebe215c057b0173a258d77",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZDQ5YzgyZWRkNGMyYzkyZjhlYmUyMTVjMDU3YjAxNzNhMjU4ZDc3",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2018-09-17T20:15:02Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-09-17T20:15:18Z"
      },
      "message": "[qa] backport: Test for duplicate inputs within a transaction",
      "tree": {
        "sha": "0d362c45d95f5cfe40116dac54c30472559cfddb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0d362c45d95f5cfe40116dac54c30472559cfddb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0d49c82edd4c2c92f8ebe215c057b0173a258d77",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d49c82edd4c2c92f8ebe215c057b0173a258d77",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0d49c82edd4c2c92f8ebe215c057b0173a258d77",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d49c82edd4c2c92f8ebe215c057b0173a258d77/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "833180f538c7fa16b097022c7c0d4b4d2f09688b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/833180f538c7fa16b097022c7c0d4b4d2f09688b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/833180f538c7fa16b097022c7c0d4b4d2f09688b"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 10,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1534f362e34252951d0ccb961682b3779149841d",
        "filename": "test/functional/p2p_invalid_block.py",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d49c82edd4c2c92f8ebe215c057b0173a258d77/test/functional/p2p_invalid_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d49c82edd4c2c92f8ebe215c057b0173a258d77/test/functional/p2p_invalid_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_block.py?ref=0d49c82edd4c2c92f8ebe215c057b0173a258d77",
        "patch": "@@ -81,6 +81,16 @@ def run_test(self):\n \n         node.p2p.send_blocks_and_test([block2], node, False, False, 16, b'bad-txns-duplicate')\n \n+        # Check transactions for duplicate inputs\n+        self.log.info(\"Test duplicate input block.\")\n+\n+        block2_orig.vtx[2].vin.append(block2_orig.vtx[2].vin[0])\n+        block2_orig.vtx[2].rehash()\n+        block2_orig.hashMerkleRoot = block2_orig.calc_merkle_root()\n+        block2_orig.rehash()\n+        block2_orig.solve()\n+        node.p2p.send_blocks_and_test([block2_orig], node, success=False, request_block=False, reject_reason=b'bad-txns-inputs-duplicate')\n+\n         self.log.info(\"Test very broken block.\")\n \n         block3 = create_block(tip, create_coinbase(height), block_time)"
      }
    ]
  },
  {
    "sha": "c64128df5882e8dc1f76ae7c1e998ed57b8645fe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNjQxMjhkZjU4ODJlOGRjMWY3NmFlN2MxZTk5OGVkNTdiODY0NWZl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-09-17T23:20:49Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-09-17T23:20:52Z"
      },
      "message": "Merge #14248: [0.17] Fix crash bug with duplicate inputs within a transaction\n\n0d49c82edd4c2c92f8ebe215c057b0173a258d77 [qa] backport: Test for duplicate inputs within a transaction (Suhas Daftuar)\n833180f538c7fa16b097022c7c0d4b4d2f09688b Fix crash bug with duplicate inputs within a transaction (Suhas Daftuar)\n\nPull request description:\n\n  This is a backport of #14247.\n\nTree-SHA512: 4d3b6244d501a48f56a728c571dac9a346019a671434edac943f4f535ef8f94ec6bfd569a0585ad5e23a6e488ecd7e0079510cbb10a2a22f576eb36d73accb0c",
      "tree": {
        "sha": "0d362c45d95f5cfe40116dac54c30472559cfddb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0d362c45d95f5cfe40116dac54c30472559cfddb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c64128df5882e8dc1f76ae7c1e998ed57b8645fe",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlugNtQACgkQHkrtYphs\n0l0tkwf/Q1Nm8eJTxsi5l2mArihfS6OSNDUWBAfghTmPrdNyZY+kZHG09I+xw/Zf\n5/cGxlmGOpXWOjLo+fglliVaGFT4toKlO2EJNRxGQdXgclxNCJ/CA8jD1cUoDEnb\nIhejIFBTfvX2/KUyQe/y1KzqJQWpz0AlohkYdpwfebPJI3pKEN3sXjr8+xIibVrN\nnDSZQOinhNzblVlMwipwo8iGGKdFT4SQDgWUpwqVQXE4zRGIGPecpP7PRybqjfSC\nqo8aFFejb5VnOTEutsMjGSLKEaaF8DrISOeyE7yRZ5dbypWYC/6++8vR4NzrtGgo\nrvnrthEA/DCLsSPR8FptRydCc3ENsQ==\n=8Ot4\n-----END PGP SIGNATURE-----",
        "payload": "tree 0d362c45d95f5cfe40116dac54c30472559cfddb\nparent 465a583f9dcc2383eb20bbb98bffa66fe82f2cde\nparent 0d49c82edd4c2c92f8ebe215c057b0173a258d77\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1537226449 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1537226452 +0200\n\nMerge #14248: [0.17] Fix crash bug with duplicate inputs within a transaction\n\n0d49c82edd4c2c92f8ebe215c057b0173a258d77 [qa] backport: Test for duplicate inputs within a transaction (Suhas Daftuar)\n833180f538c7fa16b097022c7c0d4b4d2f09688b Fix crash bug with duplicate inputs within a transaction (Suhas Daftuar)\n\nPull request description:\n\n  This is a backport of #14247.\n\nTree-SHA512: 4d3b6244d501a48f56a728c571dac9a346019a671434edac943f4f535ef8f94ec6bfd569a0585ad5e23a6e488ecd7e0079510cbb10a2a22f576eb36d73accb0c\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c64128df5882e8dc1f76ae7c1e998ed57b8645fe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c64128df5882e8dc1f76ae7c1e998ed57b8645fe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c64128df5882e8dc1f76ae7c1e998ed57b8645fe/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "465a583f9dcc2383eb20bbb98bffa66fe82f2cde",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/465a583f9dcc2383eb20bbb98bffa66fe82f2cde",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/465a583f9dcc2383eb20bbb98bffa66fe82f2cde"
      },
      {
        "sha": "0d49c82edd4c2c92f8ebe215c057b0173a258d77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d49c82edd4c2c92f8ebe215c057b0173a258d77",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0d49c82edd4c2c92f8ebe215c057b0173a258d77"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 11,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d3908fc1d8e66500b319bfc23025c2c7ac7c7fb5",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c64128df5882e8dc1f76ae7c1e998ed57b8645fe/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c64128df5882e8dc1f76ae7c1e998ed57b8645fe/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=c64128df5882e8dc1f76ae7c1e998ed57b8645fe",
        "patch": "@@ -3130,7 +3130,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n \n     // Check transactions\n     for (const auto& tx : block.vtx)\n-        if (!CheckTransaction(*tx, state, false))\n+        if (!CheckTransaction(*tx, state, true))\n             return state.Invalid(false, state.GetRejectCode(), state.GetRejectReason(),\n                                  strprintf(\"Transaction check failed (tx hash %s) %s\", tx->GetHash().ToString(), state.GetDebugMessage()));\n "
      },
      {
        "sha": "1534f362e34252951d0ccb961682b3779149841d",
        "filename": "test/functional/p2p_invalid_block.py",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c64128df5882e8dc1f76ae7c1e998ed57b8645fe/test/functional/p2p_invalid_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c64128df5882e8dc1f76ae7c1e998ed57b8645fe/test/functional/p2p_invalid_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_block.py?ref=c64128df5882e8dc1f76ae7c1e998ed57b8645fe",
        "patch": "@@ -81,6 +81,16 @@ def run_test(self):\n \n         node.p2p.send_blocks_and_test([block2], node, False, False, 16, b'bad-txns-duplicate')\n \n+        # Check transactions for duplicate inputs\n+        self.log.info(\"Test duplicate input block.\")\n+\n+        block2_orig.vtx[2].vin.append(block2_orig.vtx[2].vin[0])\n+        block2_orig.vtx[2].rehash()\n+        block2_orig.hashMerkleRoot = block2_orig.calc_merkle_root()\n+        block2_orig.rehash()\n+        block2_orig.solve()\n+        node.p2p.send_blocks_and_test([block2_orig], node, success=False, request_block=False, reject_reason=b'bad-txns-inputs-duplicate')\n+\n         self.log.info(\"Test very broken block.\")\n \n         block3 = create_block(tip, create_coinbase(height), block_time)"
      }
    ]
  },
  {
    "sha": "480d6bb07832576c7e861ef8d65405938605c5f8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ODBkNmJiMDc4MzI1NzZjN2U4NjFlZjhkNjU0MDU5Mzg2MDVjNWY4",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2018-09-28T12:58:39Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-09-29T12:24:02Z"
      },
      "message": "depends: fix bitcoin-qt back-compat with older freetype versions at runtime\n\nA few years ago, libfreetype introduced FT_Get_Font_Format() as an alias for\nFT_Get_X11_Font_Format(), but FT_Get_X11_Font_Format() was kept for abi\nbackwards-compatibility.\n\nOur qt bump to 5.9 introduced a call to FT_Get_Font_Format(). Replace it with\nFT_Get_X11_Font_Format() in order to remain compatibile with older freetype,\nwhich is still used by e.g. Ubuntu Trusty.\n\nGithub-Pull: #14348\nRebased-From: 430bf6c7a1a24a59050e7c9dac56b64b820edb43\nTree-SHA512: fd22b824e7251a7975d9e9222eff06d2b04ebf30e13aeccab580596c042b3abe2f62da1f0ef75106b0b171368ee1062ef2f459cfa435aa54826766a9005b80df",
      "tree": {
        "sha": "87b9d07bb69c9c51498aabe2257f0c44dc016eac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/87b9d07bb69c9c51498aabe2257f0c44dc016eac"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/480d6bb07832576c7e861ef8d65405938605c5f8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAluvbuIACgkQHkrtYphs\n0l32xQgAhwrgTmjYAZT8y2DhdJR8LFRbzHggfKThRBvPL7pDV3IF9u/GZPNwgtRp\nSyDXhDQl78k7f2YcENu91VJjMs1RMzjmVfCSsAjsp6PH7cpFangGIYlWY5l+MuM2\ntX+KuY3IZRrqNYZ2ReM3Xw3Xt5qg0rLKP/M9DhfSQrWWXcnvgXuZE0RCenQUMN24\n1TZ+86uaP+C4Jqf2Sc1oWVHv0ekFq9rFxxSA/hgFNQVLwYoMqthrh/MeIGJwj2fw\nfe4T5NyoA4P7MhRscEgsueNbLSV3g9dJhaF85lrbQKKKebhifL0f8VGgUYFv9M3Z\niRGBmFCwCfLMVbcjnGoDKFdkPMY5XA==\n=3gJo\n-----END PGP SIGNATURE-----",
        "payload": "tree 87b9d07bb69c9c51498aabe2257f0c44dc016eac\nparent c64128df5882e8dc1f76ae7c1e998ed57b8645fe\nauthor Cory Fields <cory-nospam-@coryfields.com> 1538139519 -0400\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1538223842 +0200\n\ndepends: fix bitcoin-qt back-compat with older freetype versions at runtime\n\nA few years ago, libfreetype introduced FT_Get_Font_Format() as an alias for\nFT_Get_X11_Font_Format(), but FT_Get_X11_Font_Format() was kept for abi\nbackwards-compatibility.\n\nOur qt bump to 5.9 introduced a call to FT_Get_Font_Format(). Replace it with\nFT_Get_X11_Font_Format() in order to remain compatibile with older freetype,\nwhich is still used by e.g. Ubuntu Trusty.\n\nGithub-Pull: #14348\nRebased-From: 430bf6c7a1a24a59050e7c9dac56b64b820edb43\nTree-SHA512: fd22b824e7251a7975d9e9222eff06d2b04ebf30e13aeccab580596c042b3abe2f62da1f0ef75106b0b171368ee1062ef2f459cfa435aa54826766a9005b80df\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/480d6bb07832576c7e861ef8d65405938605c5f8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/480d6bb07832576c7e861ef8d65405938605c5f8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/480d6bb07832576c7e861ef8d65405938605c5f8/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c64128df5882e8dc1f76ae7c1e998ed57b8645fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c64128df5882e8dc1f76ae7c1e998ed57b8645fe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c64128df5882e8dc1f76ae7c1e998ed57b8645fe"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "113b8dbc3b4b4f4a0b05ac2fd970522608f30dcd",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/480d6bb07832576c7e861ef8d65405938605c5f8/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/480d6bb07832576c7e861ef8d65405938605c5f8/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=480d6bb07832576c7e861ef8d65405938605c5f8",
        "patch": "@@ -119,6 +119,7 @@ define $(package)_extract_cmds\n endef\n \n define $(package)_preprocess_cmds\n+  sed -i.old \"s|FT_Get_Font_Format|FT_Get_X11_Font_Format|\" qtbase/src/platformsupport/fontdatabases/freetype/qfontengine_ft.cpp && \\\n   sed -i.old \"s|updateqm.commands = \\$$$$\\$$$$LRELEASE|updateqm.commands = $($(package)_extract_dir)/qttools/bin/lrelease|\" qttranslations/translations/translations.pro && \\\n   sed -i.old \"/updateqm.depends =/d\" qttranslations/translations/translations.pro && \\\n   sed -i.old \"s/src_plugins.depends = src_sql src_network/src_plugins.depends = src_network/\" qtbase/src/src.pro && \\"
      }
    ]
  },
  {
    "sha": "786825c719e40f8c73643fae4ea9e9dca454715f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ODY4MjVjNzE5ZTQwZjhjNzM2NDNmYWU0ZWE5ZTlkY2E0NTQ3MTVm",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-09-06T01:34:50Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-09-30T01:44:19Z"
      },
      "message": "doc: Update release-notes.md from upstream devwiki",
      "tree": {
        "sha": "996611d37ad7d9b26b09747cf20c4667a880721c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/996611d37ad7d9b26b09747cf20c4667a880721c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/786825c719e40f8c73643fae4ea9e9dca454715f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAluwKnMACgkQLuufXMCV\nJsGrXg/9GB7FbVp9KMVP4tLU5LZLq+YG40yUfBi8TCVdUMJHSnl4INA6clysJKJJ\n/fqCEa3ZgTymKp+rGxx50LjCq7HLFLM6DFfycXIZytz0lr/iXEgVAmnh6Y0ZRtra\nsrIMXkVUlV1B1At+UbvwGu7BTsL13e8G6kJR305FPqtBVXOq4LMC8rpzyDmoVOVa\nOsHFsnSf/IPhK6G5dKp8AJIpv1Lcm8gMIHqDksxjomBuDZCQ/Ya1R6ZrIfY+vczc\nD4Hbp1HIaw7zcbGBpD7BEzNi6TQP37VeJS9UK88eOvc6HyQKB//+R8snUNTUAgip\n7wc6FvRSrjwufRURxo3jpXGGEVYxfxNYzr6R8uYGT8MgNLnM/0z6GNMKlSyHcWW2\nVAYkedas94DldTJ0zNXE8j/uK5CYZW22Pkzn5Wgo5nnMnCj9xM6ZzQ/BYsN/uJfg\nTdTzpLTecP8KreoIBG6+ezh2yR39mrfatbC/wCyK/NEbgMYNpgXyn0UIG8CCY1Uq\nbWVMfylTSCYdEc25i+kxp8kTi0JNorR8B0rI9PwiLrRNnwrUp782aVm78vzptXJR\nN7y1XlylPKEq6G6rJVcZBi/9znuQtm95iegrJ44yq6ituZ4NoBwn4iz0rZRIxr8U\nrN8/MtuTX1ivlckk1ALmFbOx9vOJL/yjTHNM7rMgoL7oFODaNVk=\n=k9sQ\n-----END PGP SIGNATURE-----",
        "payload": "tree 996611d37ad7d9b26b09747cf20c4667a880721c\nparent c64128df5882e8dc1f76ae7c1e998ed57b8645fe\nauthor fanquake <fanquake@gmail.com> 1536197690 +0800\ncommitter fanquake <fanquake@gmail.com> 1538271859 +0800\n\ndoc: Update release-notes.md from upstream devwiki\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/786825c719e40f8c73643fae4ea9e9dca454715f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/786825c719e40f8c73643fae4ea9e9dca454715f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/786825c719e40f8c73643fae4ea9e9dca454715f/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c64128df5882e8dc1f76ae7c1e998ed57b8645fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c64128df5882e8dc1f76ae7c1e998ed57b8645fe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c64128df5882e8dc1f76ae7c1e998ed57b8645fe"
      }
    ],
    "stats": {
      "total": 916,
      "additions": 876,
      "deletions": 40
    },
    "files": [
      {
        "sha": "1b6e2f8e6cbeb56c69d7465755244df89f1b8961",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 876,
        "deletions": 40,
        "changes": 916,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/786825c719e40f8c73643fae4ea9e9dca454715f/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/786825c719e40f8c73643fae4ea9e9dca454715f/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=786825c719e40f8c73643fae4ea9e9dca454715f",
        "patch": "@@ -1,9 +1,9 @@\n (note: this is a temporary file, to be added-to by anybody, and moved to\n release-notes at release time)\n \n-Bitcoin Core version *version* is now available from:\n+Bitcoin Core version 0.17.0 is now available from:\n \n-  <https://bitcoincore.org/bin/bitcoin-core-*version*/>\n+  <https://bitcoincore.org/bin/bitcoin-core-0.17.0/>\n \n This is a new major version release, including new features, various bugfixes\n and performance improvements, as well as updated translations.\n@@ -24,7 +24,9 @@ shut down (which might take a few minutes for older versions), then run the\n installer (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on Mac)\n or `bitcoind`/`bitcoin-qt` (on Linux).\n \n-The first time you run version 0.15.0, your chainstate database will be converted to a\n+If your node has a txindex, the txindex db will be migrated the first time you run 0.17.0 or newer, which may take up to a few hours. Your node will not be functional until this migration completes.\n+\n+The first time you run version 0.15.0 or newer, your chainstate database will be converted to a\n new format, which will take anywhere from a few minutes to half an hour,\n depending on the speed of your machine.\n \n@@ -56,20 +58,28 @@ frequently tested on them.\n From 0.17.0 onwards macOS <10.10 is no longer supported. 0.17.0 is built using Qt 5.9.x, which doesn't\n support versions of macOS older than 10.10.\n \n+Known issues\n+============\n+\n+- Upgrading from 0.13.0 or older currently results in memory blow-up during the roll-back of blocks to the SegWit activation point. In these cases, a full `-reindex` is necessary.\n+\n+- The GUI suffers from visual glitches in the new MacOS dark mode. This has to do with our Qt theme handling and is not a new problem in 0.17.0, but is expected to be resolved in 0.17.1.\n+\n Notable changes\n ===============\n \n-Changed command-line options\n-----------------------------\n+Changed configuration options\n+-----------------------------\n \n - `-includeconf=<file>` can be used to include additional configuration files.\n   Only works inside the `bitcoin.conf` file, not inside included files or from\n   command-line. Multiple files may be included. Can be disabled from command-\n   line via `-noincludeconf`. Note that multi-argument commands like\n   `-includeconf` will override preceding `-noincludeconf`, i.e.\n-\n-    noincludeconf=1\n-    includeconf=relative.conf\n+  ```\n+  noincludeconf=1\n+  includeconf=relative.conf\n+  ```\n \n   as bitcoin.conf will still include `relative.conf`.\n \n@@ -78,27 +88,6 @@ GUI changes\n \n - Block storage can be limited under Preferences, in the Main tab. Undoing this setting requires downloading the full blockchain again. This mode is incompatible with -txindex and -rescan.\n \n-RPC changes\n-------------\n-\n-### Low-level changes\n-\n-- The `createrawtransaction` RPC will now accept an array or dictionary (kept for compatibility) for the `outputs` parameter. This means the order of transaction outputs can be specified by the client.\n-- The `fundrawtransaction` RPC will reject the previously deprecated `reserveChangeKey` option.\n-- `sendmany` now shuffles outputs to improve privacy, so any previously expected behavior with regards to output ordering can no longer be relied upon.\n-- The new RPC `testmempoolaccept` can be used to test acceptance of a transaction to the mempool without adding it.\n-- JSON transaction decomposition now includes a `weight` field which provides\n-  the transaction's exact weight. This is included in REST /rest/tx/ and\n-  /rest/block/ endpoints when in json mode. This is also included in `getblock`\n-  (with verbosity=2), `listsinceblock`, `listtransactions`, and\n-  `getrawtransaction` RPC commands.\n-- New `fees` field introduced in `getrawmempool`, `getmempoolancestors`, `getmempooldescendants` and\n-   `getmempoolentry` when verbosity is set to `true` with sub-fields `ancestor`, `base`, `modified`\n-   and `descendant` denominated in BTC. This new field deprecates previous fee fields, such as\n-   `fee`, `modifiedfee`, `ancestorfee` and `descendantfee`.\n-- The new RPC `getzmqnotifications` returns information about active ZMQ\n-  notifications.\n-\n External wallet files\n ---------------------\n \n@@ -133,10 +122,10 @@ This feature is currently only available through the RPC interface.\n \n Coin selection\n --------------\n-- A new `-avoidpartialspends` flag has been added (default=false). If enabled, the wallet will try to spend UTXO's that point at the same destination\n-  together. This is a privacy increase, as there will no longer be cases where a wallet will inadvertently spend only parts of the coins sent to\n-  the same address (note that if someone were to send coins to that address after it was used, those coins will still be included in future\n-  coin selections).\n+\n+### Partial spend avoidance\n+\n+When an address is paid multiple times the coins from those separate payments can be spent separately which hurts privacy due to linking otherwise separate addresses. A new `-avoidpartialspends` flag has been added (default=false). If enabled, the wallet will always spend existing UTXO to the same address together even if it results in higher fees. If someone were to send coins to an address after it was used, those coins will still be included in future coin selections.\n \n Configuration sections for testnet and regtest\n ----------------------------------------------\n@@ -155,9 +144,10 @@ prefixing the option with the network, such as:\n     [regtest]\n     mempoolsize=20\n \n-The `addnode=`, `connect=`, `port=`, `bind=`, `rpcport=`, `rpcbind=`\n-and `wallet=` options will only apply to mainnet when specified in the\n-configuration file, unless a network is specified.\n+If the following options are not in a section, they will only apply to mainnet:\n+`addnode=`, `connect=`, `port=`, `bind=`, `rpcport=`, `rpcbind=` and `wallet=`.\n+The options to choose a network (`regtest=` and `testnet=`) must be specified\n+outside of sections.\n \n 'label' and 'account' APIs for wallet\n -------------------------------------\n@@ -197,9 +187,112 @@ Here are the changes to RPC methods:\n | `listtransactions`     | The `account` named parameter has been renamed to `dummy`. If provided, the `dummy` parameter must be set to the string `*`, unless running with the `-deprecatedrpc=accounts` argument (in which case functionality is unchanged). |\n | `getbalance`           | `account`, `minconf` and `include_watchonly` parameters are deprecated, and can only be used if running with '-deprecatedrpc=accounts' |\n \n+BIP 174 Partially Signed Bitcoin Transactions support\n+-----------------------------------------------------\n+\n+[BIP 174 PSBT](https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki) is an interchange format for Bitcoin transactions that are not fully signed\n+yet, together with relevant metadata to help entities work towards signing it.\n+It is intended to simplify workflows where multiple parties need to cooperate to\n+produce a transaction. Examples include hardware wallets, multisig setups, and\n+[CoinJoin](https://bitcointalk.org/?topic=279249) transactions.\n+\n+### Overall workflow\n+\n+Overall, the construction of a fully signed Bitcoin transaction goes through the\n+following steps:\n+\n+- A **Creator** proposes a particular transaction to be created. He constructs\n+  a PSBT that contains certain inputs and outputs, but no additional metadata.\n+- For each input, an **Updater** adds information about the UTXOs being spent by\n+  the transaction to the PSBT.\n+- A potentially other Updater adds information about the scripts and public keys\n+  involved in each of the inputs (and possibly outputs) of the PSBT.\n+- **Signers** inspect the transaction and its metadata to decide whether they\n+  agree with the transaction. They can use amount information from the UTXOs\n+  to assess the values and fees involved. If they agree, they produce a\n+  partial signature for the inputs for which they have relevant key(s).\n+- A **Finalizer** is run for each input to convert the partial signatures and\n+  possibly script information into a final `scriptSig` and/or `scriptWitness`.\n+- An **Extractor** produces a valid Bitcoin transaction (in network format)\n+  from a PSBT for which all inputs are finalized.\n+\n+Generally, each of the above (excluding Creator and Extractor) will simply\n+add more and more data to a particular PSBT. In a naive workflow, they all have\n+to operate sequentially, passing the PSBT from one to the next, until the\n+Extractor can convert it to a real transaction. In order to permit parallel\n+operation, **Combiners** can be employed which merge metadata from different\n+PSBTs for the same unsigned transaction.\n+\n+The names above in bold are the names of the roles defined in BIP174. They're\n+useful in understanding the underlying steps, but in practice, software and\n+hardware implementations will typically implement multiple roles simultaneously.\n+\n+### RPCs\n+\n+- **`converttopsbt` (Creator)** is a utility RPC that converts an\n+  unsigned raw transaction to PSBT format. It ignores existing signatures.\n+- **`createpsbt` (Creator)** is a utility RPC that takes a list of inputs and\n+  outputs and converts them to a PSBT with no additional information. It is\n+  equivalent to calling `createrawtransaction` followed by `converttopsbt`.\n+- **`walletcreatefundedpsbt` (Creator, Updater)** is a wallet RPC that creates a\n+  PSBT with the specified inputs and outputs, adds additional inputs and change\n+  to it to balance it out, and adds relevant metadata. In particular, for inputs\n+  that the wallet knows about (counting towards its normal or watch-only\n+  balance), UTXO information will be added. For outputs and inputs with UTXO\n+  information present, key and script information will be added which the wallet\n+  knows about. It is equivalent to running `createrawtransaction`, followed by\n+  `fundrawtransaction`, and `converttopsbt`.\n+- **`walletprocesspsbt` (Updater, Signer, Finalizer)** is a wallet RPC that takes as\n+  input a PSBT, adds UTXO, key, and script data to inputs and outputs that miss\n+  it, and optionally signs inputs. Where possible it also finalizes the partial\n+  signatures.\n+- **`finalizepsbt` (Finalizer, Extractor)** is a utility RPC that finalizes any\n+  partial signatures, and if all inputs are finalized, converts the result to a\n+  fully signed transaction which can be broadcast with `sendrawtransaction`.\n+- **`combinepsbt` (Combiner)** is a utility RPC that implements a Combiner. It\n+  can be used at any point in the workflow to merge information added to\n+  different versions of the same PSBT. In particular it is useful to combine the\n+  output of multiple Updaters or Signers.\n+- **`decodepsbt`** is a diagnostic utility RPC which will show all information in\n+  a PSBT in human-readable form, as well as compute its eventual fee if known.\n+\n+Upgrading non-HD wallets to HD wallets\n+--------------------------------------\n+\n+Since Bitcoin Core 0.13.0, creating new BIP 32 Hierarchical Deterministic wallets has been supported by Bitcoin Core but old non-HD wallets could not be upgraded to HD. Now non-HD wallets can be upgraded to HD using the `-upgradewallet` command line option. This upgrade will result in the all keys in the keypool being marked as used and a new keypool generated. **A new backup must be made when this upgrade is performed.**\n+\n+Additionally, `-upgradewallet` can be used to upgraded from a non-split HD chain (all keys generated with `m/0'/0'/i'`) to a split HD chain (receiving keys generated with `'m/0'/0'/i'` and change keys generated with `m'/0'/1'/i'`). When this upgrade occurs, all keys already in the keypool will remain in the keypool to be used until all keys from before the upgrade are exhausted. This is to avoid issues with backups and downgrades when some keys may come from the change key keypool. Users can begin using the new split HD chain keypools by using the `newkeypool` RPC to mark all keys in the keypool as used and begin using a new keypool generated from the split HD chain.\n+\n+HD Master key rotation\n+----------------------\n+\n+A new RPC, `sethdseed`, has been introduced which allows users to set a new HD seed or set their own HD seed. This allows for a new HD seed to be used. **A new backup must be made when a new HD seed is set.**\n+\n Low-level RPC changes\n ---------------------\n \n+- The new RPC `scantxoutset` can be used to scan the UTXO set for entries\n+  that match certain output descriptors. Refer to the [output descriptors\n+  reference documentation](doc/descriptors.md) for more details. This call\n+  is similar to `listunspent` but does not use a wallet, meaning that the\n+  wallet can be disabled at compile or run time. This call is experimental,\n+  as such, is subject to changes or removal in future releases.\n+\n+- The `createrawtransaction` RPC will now accept an array or dictionary (kept for compatibility) for the `outputs` parameter. This means the order of transaction outputs can be specified by the client.\n+- The `fundrawtransaction` RPC will reject the previously deprecated `reserveChangeKey` option.\n+- `sendmany` now shuffles outputs to improve privacy, so any previously expected behavior with regards to output ordering can no longer be relied upon.\n+- The new RPC `testmempoolaccept` can be used to test acceptance of a transaction to the mempool without adding it.\n+- JSON transaction decomposition now includes a `weight` field which provides\n+  the transaction's exact weight. This is included in REST /rest/tx/ and\n+  /rest/block/ endpoints when in json mode. This is also included in `getblock`\n+  (with verbosity=2), `listsinceblock`, `listtransactions`, and\n+  `getrawtransaction` RPC commands.\n+- New `fees` field introduced in `getrawmempool`, `getmempoolancestors`, `getmempooldescendants` and\n+   `getmempoolentry` when verbosity is set to `true` with sub-fields `ancestor`, `base`, `modified`\n+   and `descendant` denominated in BTC. This new field deprecates previous fee fields, such as\n+   `fee`, `modifiedfee`, `ancestorfee` and `descendantfee`.\n+- The new RPC `getzmqnotifications` returns information about active ZMQ\n+  notifications.\n - When bitcoin is not started with any `-wallet=<path>` options, the name of\n   the default wallet returned by `getwalletinfo` and `listwallets` RPCs is\n   now the empty string `\"\"` instead of `\"wallet.dat\"`. If bitcoin is started\n@@ -224,6 +317,19 @@ Low-level RPC changes\n - The `getwalletinfo` RPC method now returns an `hdseedid` value, which is always the same as the incorrectly-named `hdmasterkeyid` value. `hdmasterkeyid` will be removed in V0.18.\n - The `getaddressinfo` RPC method now returns an `hdseedid` value, which is always the same as the incorrectly-named `hdmasterkeyid` value. `hdmasterkeyid` will be removed in V0.18.\n \n+- Parts of the `validateaddress` RPC method have been deprecated and moved to\n+  `getaddressinfo`. Clients must transition to using `getaddressinfo` to access\n+  this information before upgrading to v0.18. The following deprecated fields\n+  have moved to `getaddressinfo` and will only be shown with\n+  `-deprecatedrpc=validateaddress`: `ismine`, `iswatchonly`, `script`, `hex`,\n+  `pubkeys`, `sigsrequired`, `pubkey`, `addresses`, `embedded`, `iscompressed`,\n+  `account`, `timestamp`, `hdkeypath`, `hdmasterkeyid`.\n+- `signrawtransaction` is deprecated and will be fully removed in v0.18. To use\n+  `signrawtransaction` in v0.17, restart bitcoind with\n+  `-deprecatedrpc=signrawtransaction`. Projects should transition to using\n+  `signrawtransactionwithkey` and `signrawtransactionwithwallet` before\n+  upgrading to v0.18.\n+\n Other API changes\n -----------------\n \n@@ -255,18 +361,748 @@ Miner block size removed\n \n The `-blockmaxsize` option for miners to limit their blocks' sizes was\n deprecated in V0.15.1, and has now been removed. Miners should use the\n-`-blockmaxweight` option if they want to limit the weight of their blocks'\n-weights.\n+`-blockmaxweight` option if they want to limit the weight of their blocks.\n \n Python Support\n --------------\n \n Support for Python 2 has been discontinued for all test files and tools.\n \n+0.17.0 change log\n+=================\n+\n+### Consensus\n+- #12204 `3fa24bb` Fix overly eager BIP30 bypass (morcos)\n+\n+### Policy\n+- #12568 `ed6ae80` Allow dustrelayfee to be set to zero (luke-jr)\n+- #13120 `ca2a233` Treat segwit as always active (MarcoFalke)\n+- #13096 `062738c` Fix `MAX_STANDARD_TX_WEIGHT` check (jl2012)\n+\n+### Mining\n+- #12693 `df529dc` Remove unused variable in SortForBlock (drewx2)\n+- #12448 `84efa9a` Interrupt block generation on shutdown request (promag)\n+\n+### Block and transaction handling\n+- #12225 `67447ba` Mempool cleanups (sdaftuar)\n+- #12356 `fd65937` Fix 'mempool min fee not met' debug output (Empact)\n+- #12287 `bf3353d` Optimise lock behaviour for GuessVerificationProgress() (jonasschnelli)\n+- #11889 `47a7666` Drop extra script variable in ProduceSignature (ryanofsky)\n+- #11880 `d59b8d6` Stop special-casing phashBlock handling in validation for TBV (TheBlueMatt)\n+- #12431 `947c25e` Only call NotifyBlockTip when chainActive changes (jamesob)\n+- #12653 `534b8fa` Allow to optional specify the directory for the blocks storage (jonasschnelli)\n+- #12172 `3b62a91` Bugfix: RPC: savemempool: Don't save until LoadMempool() is finished (jtimon)\n+- #12167 `88430cb` Make segwit failure due to `CLEANSTACK` violation return a `SCRIPT_ERR_CLEANSTACK` error code (maaku)\n+- #12561 `24133b1` Check for block corruption in ConnectBlock() (sdaftuar)\n+- #11617 `1b5723e` Avoid lock: Call FlushStateToDisk(\u2026) regardless of fCheckForPruning (practicalswift)\n+- #11739 `0a8b7b4` Enforce `SCRIPT_VERIFY_P2SH` and `SCRIPT_VERIFY_WITNESS` from genesis (sdaftuar)\n+- #12885 `a49381d` Reduce implementation code inside CScript (sipa)\n+- #13032 `34dd1a6` Output values for \"min relay fee not met\" error (kristapsk)\n+- #13033 `a07e8ca` Build txindex in parallel with validation (jimpo)\n+- #13080 `66cc47b` Add compile time checking for ::mempool.cs runtime locking assertions (practicalswift)\n+- #13185 `08c1caf` Bugfix: the end of a reorged chain is invalid when connect fails (sipa)\n+- #11689 `0264836` Fix missing locking in CTxMemPool::check(\u2026) and CTxMemPool::setSanityCheck(\u2026) (practicalswift)\n+- #13011 `3c2a41a` Cache witness hash in CTransaction (MarcoFalke)\n+- #13191 `0de7cc8` Specialized double-SHA256 with 64 byte inputs with SSE4.1 and AVX2 (sipa)\n+- #13243 `ea263e1` Make reusable base class for auxiliary indices (jimpo)\n+- #13393 `a607d23` Enable double-SHA256-for-64-byte code on 32-bit x86 (sipa)\n+- #13428 `caabdea` validation: check the specified number of blocks (off-by-one) (kallewoof)\n+- #13438 `450055b` Improve coverage of SHA256 SelfTest code (sipa)\n+- #13431 `954f4a9` validation: count blocks correctly for check level < 3 (kallewoof)\n+- #13386 `3a3eabe` SHA256 implementations based on Intel SHA Extensions (sipa)\n+- #11658 `9a1ad2c` During IBD, when doing pruning, prune 10% extra to avoid pruning again soon after (luke-jr)\n+- #13794 `8ce55df` chainparams: Update with data from assumed valid chain (MarcoFalke)\n+- #13527 `e7ea858` Remove promiscuousmempoolflags (MarcoFalke)\n+\n+### P2P protocol and network code\n+- #12342 `eaeaa2d` Extend #11583 (\"Do not make it trivial for inbound peers to generate log entries\") to include \"version handshake timeout\" message (clemtaylor)\n+- #12218 `9a32114` Move misbehaving logging to net logging category (laanwj)\n+- #10387 `5c2aff8` Eventually connect to `NODE_NETWORK_LIMITED` peers (jonasschnelli)\n+- #9037 `a36834f` Add test-before-evict discipline to addrman (EthanHeilman)\n+- #12622 `e1d6e2a` Correct addrman logging (laanwj)\n+- #11962 `0a01843` add seed.bitcoin.sprovoost.nl to DNS seeds (Sjors)\n+- #12569 `23e7fe8` Increase signal-to-noise ratio in debug.log by adjusting log level when logging failed non-manual connect():s (practicalswift)\n+- #12855 `c199869` Minor accumulated cleanups (tjps)\n+- #13153 `ef46c99` Add missing newlines to debug logging (laanwj)\n+- #13162 `a174702` Don't incorrectly log that REJECT messages are unknown (jnewbery)\n+- #13151 `7f4db9a` Serve blocks directly from disk when possible (laanwj)\n+- #13134 `70d3541` Add option `-enablebip61` to configure sending of BIP61 notifications (laanwj)\n+- #13532 `7209fec` Log warning when deprecated network name 'tor' is used (wodry)\n+- #13615 `172f984` Remove unused interrupt from SendMessages (fanquake)\n+- #13417 `1e90862` Tighten scope in `net_processing` (skeees)\n+- #13298 `f8d470e` Bucketing INV delays (1 bucket) for incoming connections to hide tx time (naumenkogs)\n+- #13672 `0d8d6be` Modified `in_addr6` cast in CConman class to work with msvc (sipsorcery)\n+- #11637 `c575260` Remove dead service bits code (MarcoFalke)\n+- #13212 `a6f00ce` Fixed a race condition when disabling the network (lmanners)\n+- #13656 `1211b15` Remove the boost/algorithm/string/predicate.hpp dependency (251Labs)\n+- #13423 `f58674a` Thread safety annotations in `net_processing` (skeees)\n+- #13776 `7d36237` Add missing verification of IPv6 address in CNetAddr::GetIn6Addr(\u2026) (practicalswift)\n+- #13907 `48bf8ff` Introduce a maximum size for locators (gmaxwell)\n+- #13951 `8a9ffec` Hardcoded seeds update pre-0.17 branch (laanwj)\n+\n+### Wallet\n+- #12330 `2a30e67` Reduce scope of `cs_main` and `cs_wallet` locks in listtransactions (promag)\n+- #12298 `a1ffddb` Refactor HaveKeys to early return on false result (promag)\n+- #12282 `663911e` Disallow abandon of conflicted txes (MarcoFalke)\n+- #12333 `d405bee` Make CWallet::ListCoins atomic (promag)\n+- #12296 `8e6f9f4` Only fee-bump non-conflicted/non-confirmed txes (MarcoFalke)\n+- #11866 `6bb9c13` Do not un-mark fInMempool on wallet txn if ATMP fails (TheBlueMatt)\n+- #11882 `987a809` Disable default fallbackfee on mainnet (jonasschnelli)\n+- #9991 `4ca7c1e` listreceivedbyaddress Filter Address (NicolasDorier)\n+- #11687 `98bc27f` External wallet files (ryanofsky)\n+- #12658 `af88094` Sanitize some wallet serialization (sipa)\n+- #9680 `6acd870` Unify CWalletTx construction (ryanofsky)\n+- #10637 `e057589` Coin Selection with Murch's algorithm (achow101, Xekyo)\n+- #12408 `c39dd2e` Change output type globals to members (MarcoFalke)\n+- #12694 `9552dfb` Actually disable BnB when there are preset inputs (achow101)\n+- #11536 `cead84b` Rename account to label where appropriate (ryanofsky)\n+- #12709 `02b7e83` shuffle sendmany recipients ordering (instagibbs)\n+- #12699 `c948dc8` Shuffle transaction inputs before signing (instagibbs)\n+- #10762 `6d53663` Remove Wallet dependencies from init.cpp (jnewbery)\n+- #12857 `821980c` Avoid travis lint-include-guards error (ken2812221)\n+- #12702 `dab0d68` importprivkey: hint about importmulti (kallewoof)\n+- #12836 `9abdb7c` Make WalletInitInterface and DummyWalletInit private, fix nullptr deref (promag)\n+- #12785 `215158a` Initialize `m_last_block_processed` to nullptr (practicalswift)\n+- #12932 `8d651ae` Remove redundant lambda function arg in handleTransactionChanged (laanwj)\n+- #12749 `a84b056` feebumper: discard change outputs below discard rate (instagibbs)\n+- #12892 `9b3370d` introduce 'label' API for wallet (jnewbery)\n+- #12925 `6d3de17` Logprint the start of a rescan (jonasschnelli)\n+- #12888 `39439e5` debug log number of unknown wallet records on load (instagibbs)\n+- #12977 `434150a` Refactor `g_wallet_init_interface` to const reference (promag)\n+- #13017 `65d7083` Add wallets management functions (promag)\n+- #12953 `d1d54ae` Deprecate accounts (jnewbery)\n+- #12909 `476cb35` Make fee settings to be non-static members (MarcoFalke)\n+- #13002 `487dcbe` Do not treat bare multisig outputs as IsMine unless watched (sipa)\n+- #13028 `783bb64` Make vpwallets usage thread safe (promag)\n+- #12507 `2afdc29` Interrupt rescan on shutdown request (promag)\n+- #12729 `979150b` Get rid of ambiguous OutputType::NONE value (ryanofsky)\n+- #13079 `5778d44` Fix rescanblockchain rpc to properly report progress (Empact)\n+- #12560 `e03c0db` Upgrade path for non-HD wallets to HD (achow101)\n+- #13161 `7cc1bd3` Reset BerkeleyDB handle after connection fails (real-or-random)\n+- #13081 `0dec5b5` Add compile time checking for `cs_wallet` runtime locking assertions (practicalswift)\n+- #13127 `19a3a9e` Add Clang thread safety annotations for variables guarded by `cs_db` (practicalswift)\n+- #10740 `4cfe17c` `loadwallet` RPC - load wallet at runtime (jnewbery)\n+- #12924 `6738813` Fix hdmaster-key / seed-key confusion (scripted diff) (jnewbery)\n+- #13297 `d82c5d1` Fix incorrect comment for DeriveNewSeed (jnewbery)\n+- #13063 `6378eef` Use shared pointer to retain wallet instance (promag)\n+- #13142 `56fe3dc` Separate IsMine from solvability (sipa)\n+- #13194 `fd96d54` Remove template matching and pseudo opcodes (sipa)\n+- #13252 `c4cc8d9` Refactor ReserveKeyFromKeyPool for safety (Empact)\n+- #13058 `343d4e4` `createwallet` RPC - create new wallet at runtime (jnewbery)\n+- #13351 `2140f6c` Prevent segfault when sending to unspendable witness (MarcoFalke)\n+- #13060 `3f0f394` Remove getlabeladdress RPC (jnewbery)\n+- #13111 `000abbb` Add unloadwallet RPC (promag)\n+- #13160 `868cf43` Unlock spent outputs (promag)\n+- #13498 `f54f373` Fixups from account API deprecation (jnewbery)\n+- #13491 `61a044a` Improve handling of INVALID in IsMine (sipa)\n+- #13425 `028b0d9` Moving final scriptSig construction from CombineSignatures to ProduceSignature (PSBT signer logic) (achow101)\n+- #13564 `88a15eb` loadwallet shouldn't create new wallets (jnewbery)\n+- #12944 `619cd29` ScanforWalletTransactions should mark input txns as dirty (instagibbs)\n+- #13630 `d6b2235` Drop unused pindexRet arg to CMerkleTx::GetDepthInMainChain (Empact)\n+- #13566 `ad552a5` Fix get balance (jnewbery)\n+- #13500 `4a3e8c5` Decouple wallet version from client version (achow101)\n+- #13712 `aba2e66` Fix non-determinism in ParseHDKeypath(\u2026). Avoid using an uninitialized variable in path calculation (practicalswift)\n+- #9662 `6b6e854` Add createwallet \"disableprivatekeys\" option: a sane mode for watchonly-wallets (jonasschnelli)\n+- #13683 `e8c7434` Introduce assertion to document the assumption that cache and cache_used are always set in tandem (practicalswift)\n+- #12257 `5f7575e` Use destination groups instead of coins in coin select (kallewoof)\n+- #13773 `89a116d` Fix accidental use of the comma operator (practicalswift)\n+- #13805 `c88529a` Correctly limit output group size (sdaftuar)\n+- #12992 `26f59f5` Add wallet name to log messages (PierreRochard)\n+- #13667 `b81a8a5` Fix backupwallet for multiwallets (domob1812)\n+- #13657 `51c693d` assert to ensure accuracy of CMerkleTx::GetBlocksToMaturity (Empact)\n+- #13812 `9d86aad` sum ancestors rather than taking max in output groups (kallewoof)\n+- #13876 `8eb9870` Catch `filesystem_error` and raise `InitError` (MarcoFalke)\n+- #13808 `13d51a2` shuffle coins before grouping, where warranted (kallewoof)\n+- #13666 `2115cba` Always create signatures with Low R values (achow101)\n+- #13917 `0333914` Additional safety checks in PSBT signer (sipa)\n+- #13968 `65e7a8b` couple of walletcreatefundedpsbt fixes (instagibbs)\n+- #14055 `2307a6e` fix walletcreatefundedpsbt deriv paths, add test (instagibbs)\n+\n+### RPC and other APIs\n+- #12336 `3843780` Remove deprecated rpc options (jnewbery)\n+- #12193 `5dc00f6` Consistently use UniValue.pushKV instead of push_back(Pair()) (karel-3d) (MarcoFalke)\n+- #12409 `0cc45ed` Reject deprecated reserveChangeKey in fundrawtransaction (MarcoFalke)\n+- #10583 `8a98dfe` Split part of validateaddress into getaddressinfo (achow101)\n+- #10579 `ffc6e48` Split signrawtransaction into wallet and non-wallet RPC command (achow101)\n+- #12494 `e4ffcac` Declare CMutableTransaction a struct in rawtransaction.h (Empact)\n+- #12503 `0e26591` createmultisig no longer takes addresses (instagibbs)\n+- #12083 `228b086` Improve getchaintxstats test coverage (promag)\n+- #12479 `cd5e438` Add child transactions to getrawmempool verbose output (conscott)\n+- #11872 `702e8b7` createrawtransaction: Accept sorted outputs (MarcoFalke)\n+- #12700 `ebdf84c` Document RPC method aliasing (ryanofsky)\n+- #12727 `8ee5c7b` Remove unreachable help conditions in rpcwallet.cpp (lutangar)\n+- #12778 `b648974` Add username and ip logging for RPC method requests (GabrielDav)\n+- #12717 `ac898b6` rest: Handle utxo retrieval when ignoring the mempool (romanz)\n+- #12787 `cd99e5b` Adjust ifdef to avoid unreachable code (practicalswift)\n+- #11742 `18815b4` Add testmempoolaccept (MarcoFalke)\n+- #12942 `fefb817` Drop redundant testing of signrawtransaction prevtxs args (Empact)\n+- #11200 `5f2a399` Allow for aborting rescans in the GUI (achow101)\n+- #12791 `3a8a4dc` Expose a transaction's weight via RPC (TheBlueMatt)\n+- #12436 `6e67754` Adds a functional test to validate the transaction version number in the RPC output (251Labs)\n+- #12240 `6f8b345` Introduced a new `fees` structure that aggregates all sub-field fee types denominated in BTC (mryandao)\n+- #12321 `eac067a` p2wsh and p2sh-p2wsh address in decodescript (fivepiece)\n+- #13090 `17266a1` Remove Safe mode (achow101, laanwj)\n+- #12639 `7eb7076` Reduce `cs_main` lock in listunspent (promag)\n+- #10267 `7b966d9` New -includeconf argument for including external configuration files (kallewoof)\n+- #10757 `b9551d3` Introduce getblockstats to plot things (jtimon)\n+- #13288 `a589f53` Remove the need to include rpc/blockchain.cpp in order to put `GetDifficulty` under test (Empact)\n+- #13394 `e1f8dce` cli: Ignore libevent warnings (theuni)\n+- #13439 `3f398d7` Avoid \"duplicate\" return value for invalid submitblock (TheBlueMatt)\n+- #13570 `a247594` Add new \"getzmqnotifications\" method (domob1812)\n+- #13072 `b25a4c2` Update createmultisig RPC to support segwit (ajtowns)\n+- #12196 `8fceae0` Add scantxoutset RPC method (jonasschnelli)\n+- #13557 `b654723` BIP 174 PSBT Serializations and RPCs (achow101)\n+- #13697 `f030410` Support output descriptors in scantxoutset (sipa)\n+- #13927 `bced8ea` Use pushKV in some new PSBT RPCs (domob1812)\n+- #13918 `a9c56b6` Replace median fee rate with feerate percentiles in getblockstats (marcinja)\n+- #13721 `9f23c16` Bugfixes for BIP 174 combining and deserialization (achow101)\n+- #13960 `517010e` Fix PSBT deserialization of 0-input transactions (achow101)\n+\n+### GUI\n+- #12416 `c997f88` Fix Windows build errors introduced in #10498 (practicalswift)\n+- #11733 `e782099` Remove redundant locks (practicalswift)\n+- #12426 `bfa3911` Initialize members in WalletModel (MarcoFalke)\n+- #12489 `e117cfe` Bugfix: respect user defined configuration file (-conf) in QT settings (jonasschnelli)\n+- #12421 `be263fa` navigate to  transaction history page after send (Sjors)\n+- #12580 `ce56fdd` Show a transaction's virtual size in its details dialog (dooglus)\n+- #12501 `c8ea91a` Improved \"custom fee\" explanation in tooltip (randolf)\n+- #12616 `cff95a6` Set modal overlay hide button as default (promag)\n+- #12620 `8a43bdc` Remove TransactionTableModel::TxIDRole (promag)\n+- #12080 `56cc022` Add support to search the address book (promag)\n+- #12621 `2bac3e4` Avoid querying unnecessary model data when filtering transactions (promag)\n+- #12721 `e476826` remove \"new\" button during receive-mode in addressbook (jonasschnelli)\n+- #12723 `310dc61` Qt5: Warning users about invalid-BIP21 URI bitcoin:// (krab)\n+- #12610 `25cf18f` Multiwallet for the GUI (jonasschnelli)\n+- #12779 `f4353da` Remove unused method setupAmountWidget(\u2026) (practicalswift)\n+- #12795 `68484d6` do not truncate .dat extension for wallets in gui (instagibbs)\n+- #12870 `1d54004` make clean removes `src/qt/moc_` files (Sjors)\n+- #13055 `bdda14d` Don't log to console by default (laanwj)\n+- #13141 `57c57df` fixes broken link on readme (marcoagner)\n+- #12928 `ef006d9` Initialize non-static class members that were previously neither initialized where defined nor in constructor (practicalswift)\n+- #13158 `81c533c` Improve sendcoinsdialog readability (marcoagner)\n+- #11491 `40c34a0` Add proxy icon in statusbar (mess110)\n+- #13264 `2a7c53b` Satoshi unit (GreatSock)\n+- #13097 `e545503` Support wallets loaded dynamically (promag)\n+- #13284 `f8be434` fix visual \"overflow\" of amount input (brandonrninefive)\n+- #13275 `a315b79` use `[default wallet]` as name for wallet with no name (jonasschnelli)\n+- #13273 `3fd0c23` Qt/Bugfix: fix handling default wallet with no name (jonasschnelli)\n+- #13341 `25d2df2` Stop translating command line options (laanwj)\n+- #13043 `6e249e4` OptionsDialog: add prune setting (Sjors)\n+- #13506 `6579d80` load wallet in UI after possible init aborts (jonasschnelli)\n+- #13458 `dc53f7f` Drop qt4 support (laanwj)\n+- #13528 `b877c39` Move BitcoinGUI initializers to class, fix initializer order warning (laanwj)\n+- #13536 `baf3a3a` coincontrol: Remove unused qt4 workaround (MarcoFalke)\n+- #13537 `10ffca7` Peer table: Visualize inbound/outbound state for every row (wodry)\n+- #13791 `2c14c1f` Reject dialogs if key escape is pressed (promag)\n+\n+### Build system\n+- #12371 `c9ca4f6` Add gitian PGP key: akx20000 (ghost)\n+- #11966 `f4f4f51` clientversion: Use full commit hash for commit-based version descriptions (luke-jr)\n+- #12417 `ae0fbf0` Upgrade `mac_alias` to 2.0.7 (droark)\n+- #12444 `1f055ef` gitian: Bump descriptors for (0.)17 (theuni)\n+- #12402 `59e032b` expat 2.2.5, ccache 3.4.1, miniupnpc 2.0.20180203 (fanquake)\n+- #12029 `daa84b3` Add a makefile target for Doxygen documentation (Ov3rlo4d)\n+- #12466 `6645eaf` Only use `D_DARWIN_C_SOURCE` when building miniupnpc on darwin (fanquake)\n+- #11986 `765a3eb` zeromq 4.2.3 (fanquake)\n+- #12373 `f13d756` Add build support for profiling (murrayn)\n+- #12631 `a312e20` gitian: Alphabetize signing keys & add kallewoof key (kallewoof)\n+- #12607 `29fad97` Remove ccache (fanquake)\n+- #12625 `c4219ff` biplist 1.0.3 (fanquake)\n+- #12666 `05042d3` configure: UniValue 1.0.4 is required for pushKV(, bool) (luke-jr)\n+- #12678 `6324c68` Fix a few compilation issues with Clang 7 and -Werror (vasild)\n+- #12692 `de6bdfd` Add configure options for various -fsanitize flags (eklitzke)\n+- #12901 `7e23972` Show enabled sanitizers in configure output (practicalswift)\n+- #12899 `3076993` macOS: Prevent Xcode 9.3 build warnings (AkioNak)\n+- #12715 `8fd6243` Add 'make clean' rule (hkjn)\n+- #13133 `a024a18` Remove python2 from configure.ac (ken2812221)\n+- #13005 `cb088b1` Make --enable-debug to pick better options (practicalswift)\n+- #13254 `092b366` Remove improper `qt/moc_*` cleaning glob from the general Makefile (Empact)\n+- #13306 `f5a7733` split warnings out of CXXFLAGS (theuni)\n+- #13385 `7c7508c` Guard against accidental introduction of new Boost dependencies (practicalswift)\n+- #13041 `5779dc4` Add linter checking for accidental introduction of locale dependence (practicalswift)\n+- #13408 `70a03c6` crypto: cleanup sha256 build (theuni)\n+- #13435 `cf7ca60` When build fails due to lib missing, indicate which one (Empact)\n+- #13445 `8eb76f3` Reset default -g -O2 flags when enable debug (ken2812221)\n+- #13465 `81069a7` Avoid concurrency issue when make multiple target (ken2812221)\n+- #13454 `45c00f8` Make sure `LC_ALL=C` is set in all shell scripts (practicalswift)\n+- #13480 `31145a3` Avoid copies in range-for loops and add a warning to detect them (theuni)\n+- #13486 `66e1a08` Move rpc/util.cpp from libbitcoin-util to libbitcoin-server (ken2812221)\n+- #13580 `40334c7` Detect if char equals `int8_t` (ken2812221)\n+- #12788 `287e4ed` Tune wildcards for LIBSECP256K1 target (kallewoof)\n+- #13611 `b55f0c3` bugfix: Use `__cpuid_count` for gnu C to avoid gitian build fail (ken2812221)\n+- #12971 `a6d14b1` Upgrade Qt to 5.9.6 (TheCharlatan)\n+- #13543 `6c6a300` Add RISC-V support (laanwj)\n+- #13177 `dcb154e` GCC-7 and glibc-2.27 back compat code (ken2812221)\n+- #13659 `90b1c7e` add missing leveldb defines (theuni)\n+- #13368 `c0f1569` Update gitian-build.sh for docker (achow101)\n+- #13171 `19d8ca5` Change gitian-descriptors to use bionic instead (ken2812221)\n+- #13604 `75bea05` Add depends 32-bit arm support for bitcoin-qt (TheCharlatan)\n+- #13623 `9cdb19f` Migrate gitian-build.sh to python (ken2812221)\n+- #13689 `8c36432` disable Werror when building zmq (greenaddress)\n+- #13617 `cf7f9ae` release: Require macos 10.10+ (fanquake)\n+- #13750 `c883653` use MacOS friendly sed syntax in qt.mk (Sjors)\n+- #13095 `415f2bf` update `ax_boost_chrono`/`unit_test_framework` (fanquake)\n+- #13732 `e8ffec6` Fix Qt's rcc determinism (Fuzzbawls)\n+- #13782 `8284f1d` Fix osslsigncode compile issue in gitian-build (ken2812221)\n+- #13696 `2ab7208` Add aarch64 qt depends support for cross compiling bitcoin-qt (TheCharlatan)\n+- #13705 `b413ba0` Add format string linter (practicalswift)\n+- #14000 `48c8459` fix qt determinism (theuni)\n+- #14018 `3e4829a` Bugfix: NSIS: Exclude `Makefile*` from docs (luke-jr)\n+- #12906 `048ac83` Avoid `interface` keyword to fix windows gitian build (ryanofsky)\n+- #13314 `a9b6957` Fix FreeBSD build by including utilstrencodings.h (laanwj)\n+\n+### Tests and QA\n+- #12252 `8d57319` Require all tests to follow naming convention (ajtowns)\n+- #12295 `935eb8d` Enable flake8 warnings for all currently non-violated rules (practicalswift)\n+- #11858 `b4d8549` Prepare tests for Windows (MarcoFalke)\n+- #11771 `2dbc4a4` Change invalidtxrequest to use BitcoinTestFramework (jnewbery)\n+- #12200 `d09968f` Bind functional test nodes to 127.0.0.1 (Sjors)\n+- #12425 `26dc2da` Add some script tests (richardkiss)\n+- #12455 `23481fa` Fix bip68 sequence test to reflect updated rpc error message (Empact)\n+- #12477 `acd1e61` Plug memory leaks and stack-use-after-scope (MarcoFalke)\n+- #12443 `07090c5` Move common args to bitcoin.conf (MarcoFalke)\n+- #12570 `39dcac2` Add test cases for HexStr (`std::reverse_iterator` and corner cases) (kostaz)\n+- #12582 `6012f1c` Fix ListCoins test failure due to unset `g_wallet_allow_fallback_fee` (ryanofsky)\n+- #12516 `7f99964` Avoid unintentional unsigned integer wraparounds in tests (practicalswift)\n+- #12512 `955fd23` Don't test against the mempool min fee information in mempool_limit.py (Empact)\n+- #12600 `29088b1` Add a test for large tx output scripts with segwit input (richardkiss)\n+- #12627 `791c3ea` Fix some tests to work on native windows (MarcoFalke)\n+- #12405 `0f58d7f` travis: Full clone for git subtree check (MarcoFalke)\n+- #11772 `0630974` Change invalidblockrequest to use BitcoinTestFramework (jnewbery)\n+- #12681 `1846296` Fix ComputeTimeSmart test failure with `-DDEBUG_LOCKORDER` (ryanofsky)\n+- #12682 `9f04c8e` travis: Clone depth 1 unless `$check_doc` (MarcoFalke)\n+- #12710 `00d1680` Append scripts to new `test_list` array to fix bad assignment (jeffrade)\n+- #12720 `872c921` Avoiding 'file' function name from python2 (jeffrade)\n+- #12728 `4ba3d4f` rename TestNode to TestP2PConn in tests (jnewbery)\n+- #12746 `2405ce1` Remove unused argument `max_invalid` from `check_estimates(\u2026)` (practicalswift)\n+- #12718 `185d484` Require exact match in `assert_start_raises_init_eror` (jnewbery, MarcoFalke)\n+- #12076 `6d36f59` Use node.datadir instead of tmpdir in test framework (MarcoFalke)\n+- #12772 `b43aba8` ci: Bump travis timeout for make check to 50m (jnewbery)\n+- #12806 `18606eb` Fix function names in `feature_blocksdir` (MarcoFalke)\n+- #12811 `0d8fc8d` Make summary row bold-red if any test failed and show failed tests at end of table (laanwj)\n+- #12790 `490644d` Use blockmaxweight where tests previously had blockmaxsize (conscott)\n+- #11773 `f0f9732` Change `feature_block.py` to use BitcoinTestFramework (jnewbery)\n+- #12839 `40f4baf` Remove travis checkout depth (laanwj)\n+- #11817 `2a09a78` Change `feature_csv_activation.py` to use BitcoinTestFramework (jnewbery)\n+- #12284 `fa5825d` Remove assigned but never used local variables. Enable Travis checking for unused local variables (practicalswift)\n+- #12719 `9beded5` Add note about test suite naming convention in developer-notes.md (practicalswift)\n+- #12861 `c564424` Stop `feature_block.py` from blowing up memory (jnewbery)\n+- #12851 `648252e` travis: Run verify-commits only on cron jobs (MarcoFalke)\n+- #12853 `2106c4c` Match full plain text by default (MarcoFalke)\n+- #11818 `9a2db3b` I accidentally (deliberately) killed it (the ComparisonTestFramework) (jnewbery)\n+- #12766 `69310a3` Tidy up REST interface functional tests (romanz)\n+- #12849 `83c7533` Add logging in loops in `p2p_sendhears.py` (ccdle12)\n+- #12895 `d6f10b2` Add note about test suite name uniqueness requirement to developer notes (practicalswift)\n+- #12856 `27278df` Add Metaclass for BitcoinTestFramework (WillAyd)\n+- #12918 `6fc5a05` Assert on correct variable (kallewoof)\n+- #11878 `a04440f` Add Travis check for duplicate includes (practicalswift)\n+- #12917 `cf8073f` Windows fixups for functional tests (MarcoFalke)\n+- #12926 `dd1ca9e` Run unit tests in parallel (sipa)\n+- #12920 `b1fdfc1` Fix sign for expected values (kallewoof)\n+- #12947 `979f598` Wallet hd functional test speedup and clarification (instagibbs)\n+- #12993 `0d69921` Remove compatibility code not needed now when we're on Python 3 (practicalswift)\n+- #12996 `6a278e0` Remove redundant bytes(\u2026) calls (practicalswift)\n+- #12949 `6b46288` Avoid copies of CTransaction (MarcoFalke)\n+- #13007 `0d12570` Fix dangling wallet pointer in vpwallets (promag)\n+- #13048 `cac6d11` Fix `feature_block` flakiness (jnewbery)\n+- #12510 `d5b2e98` Add `rpc_bind` test to default-run tests (laanwj)\n+- #13022 `896a9d0` Attach node index to `test_node` AssertionError and print messages (jamesob)\n+- #13024 `018c7e5` Add rpcauth pair that generated by rpcauth.py (ken2812221)\n+- #13013 `a0079d4` bench: Amend `mempool_eviction` test for witness txs (MarcoFalke)\n+- #13051 `e074097` Normalize executable location (MarcoFalke)\n+- #13056 `106d929` Make rpcauth.py testable and add unit tests (nixbox)\n+- #13073 `a785bc3` add rpcauth-test to `AC_CONFIG_LINKS` to fix out-of-tree make check (laanwj)\n+- #12830 `25ad2f7` Clarify address book error messages, add tests (jamesob)\n+- #13082 `24106a8` don't test against min relay fee information in `mining_prioritisetransaction.py` (kristapsk)\n+- #13003 `8d045a0` Add test for orphan handling (MarcoFalke)\n+- #13105 `9e9b48d` Add --failfast option to functional test runner (jamesob)\n+- #13130 `3186ad4` Fix race in `rpc_deprecated.py` (jnewbery)\n+- #13136 `baf6b4e` Fix flake8 warnings in several wallet functional tests (jnewbery)\n+- #13094 `bf9b03d` Add test for 64-bit Windows PE, modify 32-bit test results (ken2812221)\n+- #13183 `9458b05` travis: New travis job for `check_docs` steps (glaksmono)\n+- #12265 `1834d4d` fundrawtransaction: lock watch-only shared address (kallewoof)\n+- #13188 `4a50ec0` Remove unused option --srcdir (MarcoFalke)\n+- #12755 `612ba35` Better stderr testing (jnewbery)\n+- #13198 `196c5a9` Avoid printing to console during cache creation (sdaftuar)\n+- #13075 `cb9bbf7` Remove 'account' API from wallet functional tests (jnewbery)\n+- #13221 `ffa86af` travis: Rename the build stage `check_doc` to `lint` (practicalswift)\n+- #13205 `3cbd25f` Remove spurious error log in `p2p_segwit.py` (jnewbery)\n+- #13291 `536120e` Don't include torcontrol.cpp into the test file (Empact)\n+- #13281 `2ac6315` Move linters to test/lint, add readme (MarcoFalke)\n+- #13215 `f8a29ca` travis: Build tests on ubuntu 18.04 with docker (ken2812221)\n+- #13349 `24f7011` bench: Don't return a bool from main (laanwj)\n+- #13347 `87a9d03` travis: Skip cache for lint stage (MarcoFalke)\n+- #13355 `0b1c0c4` Fix \"gmake check\" under OpenBSD 6.3 (probably `*BSD`): Avoid using GNU grep specific regexp handling (practicalswift)\n+- #13353 `d4f6dac` Fixup setting of PATH env var (MarcoFalke)\n+- #13352 `e24bf1c` Avoid checking reject code for now (MarcoFalke)\n+- #13383 `2722a1f` bench: Use non-throwing parsedouble(\u2026) instead of throwing boost::lexical_cast<double>(\u2026) (practicalswift)\n+- #13367 `264efdc` Increase includeconf test coverage (MarcoFalke)\n+- #13404 `3d3d8ae` speed up of `tx_validationcache_tests` by reusing of CTransaction (lucash-dev)\n+- #13421 `531a033` Remove `portseed_offset` from test runner (MarcoFalke)\n+- #13440 `5315660` Log as utf-8 (MarcoFalke)\n+- #13066 `fa4b906` Migrate verify-commits script to python, run in travis (ken2812221)\n+- #13447 `4b1edd3` travis: Increase `travis_wait` time while verifying commits (ken2812221)\n+- #13350 `f532d52` Add logging to provide anchor points when debugging p2p_sendheaders (lmanners)\n+- #13406 `4382f19` travis: Change mac goal to all deploy (ken2812221)\n+- #13457 `b222138` Drop variadic macro (MarcoFalke)\n+- #13512 `3a45493` mininode: Expose connection state through `is_connected` (MarcoFalke)\n+- #13496 `9ab4c2a` Harden lint-filenames.sh (wodry)\n+- #13219 `08516e0` bench: Add block assemble benchmark (MarcoFalke)\n+- #13530 `b1dc39d` bench: Add missing pow.h header (laanwj)\n+- #12686 `2643fa5` Add -ftrapv to CFLAGS and CXXFLAGS when --enable-debug is used. Enable -ftrapv in Travis (practicalswift)\n+- #12882 `d96bdd7` Make `test_bitcoin` pass under ThreadSanitzer (clang). Fix lock-order-inversion (potential deadlock) (practicalswift)\n+- #13535 `2328039` `wallet_basic`: Specify minimum required amount for listunspent (MarcoFalke)\n+- #13551 `c93c360` Fix incorrect documentation for test case `cuckoocache_hit_rate_ok` (practicalswift)\n+- #13563 `b330f3f` bench: Simplify coinselection (promag)\n+- #13517 `a6ed99a` Remove need to handle the network thread in tests (MarcoFalke)\n+- #13522 `686e97a` Fix `p2p_sendheaders` race (jnewbery)\n+- #13467 `3dc2dcf` Make `p2p_segwit` easier to debug (jnewbery)\n+- #13598 `0212187` bench: Fix incorrect behaviour in prevector.cpp (AkioNak)\n+- #13565 `b05ded1` Fix AreInputsStandard test to reference the proper scriptPubKey (Empact)\n+- #13145 `d3dae3d` Use common getPath method to create temp directory in tests (winder)\n+- #13645 `2ea7eb6` skip `rpc_zmq` functional test as necessary (jamesob)\n+- #13626 `8f1106d` Fix some TODOs in `p2p_segwit` (MarcoFalke)\n+- #13138 `8803c91` Remove accounts from `wallet_importprunedfunds.py` (jnewbery)\n+- #13663 `cbc9b50` Avoid read/write to default datadir (MarcoFalke)\n+- #13682 `f8a32a3` bench: Remove unused variable (practicalswift)\n+- #13638 `6fcdb5e` Use `MAX_SCRIPT_ELEMENT_SIZE` from script.py (domob1812)\n+- #13687 `9d26b69` travis: Check that ~/.bitcoin is never created (MarcoFalke)\n+- #13715 `e1260a7` fixes mininode's P2PConnection sending messages on closing transport (marcoagner)\n+- #13729 `aa9429a` travis: Avoid unnecessarily setting env variables on the lint build (Empact)\n+- #13747 `ab28b5b` Skip P2PConnection's `is_closing()` check when not available (domob1812)\n+- #13650 `7a9bca6` travis: Don't store debug info if --enable-debug is set (ken2812221)\n+- #13711 `f98d1e0` bench: Add benchmark for unserialize prevector (AkioNak)\n+- #13771 `365384f` travis: Retry to fetch docker image (MarcoFalke)\n+- #13806 `4d550ff` Fix `bench/block_assemble` assert failure (jamesob)\n+- #13779 `d25079a` travis: Improve readability of travis.yml and log outputs (scravy)\n+- #13822 `0fb9c87` bench: Make coinselection output groups pass eligibility filter (achow101)\n+- #13247 `e83d82a` Add tests to SingleThreadedSchedulerClient() and document the memory model (skeees)\n+- #13811 `660abc1` travis: Run `bench_bitcoin` once (MarcoFalke)\n+- #13837 `990e182` Extract `rpc_timewait` as test param (MarcoFalke)\n+- #13851 `9c4324d` fix locale for lint-shell (scravy)\n+- #13823 `489b51b` quote path in authproxy for external multiwallets (MarcoFalke)\n+- #13849 `2b67354` travis: Use only travis jobs: instead of mix of jobs+matrix (scravy)\n+- #13859 `2384323` Add emojis to `test_runner` path and wallet filename (MarcoFalke)\n+- #13916 `8ac7125` `wait_for_verack` by default (MarcoFalke)\n+- #13669 `f66e1c7` Cleanup `create_transaction` implementations (conscott)\n+- #13924 `09ada21` Simplify comparison in `rpc_blockchain.py` (domob1812)\n+- #13913 `a08533c` Remove redundant checkmempool/checkblockindex `extra_args` (MarcoFalke)\n+- #13915 `a04888a` Add test for max number of entries in locator (MarcoFalke)\n+- #13867 `1b04b55` Make extended tests pass on native Windows (MarcoFalke)\n+- #13944 `0df7a6c` Port usage of deprecated optparse module to argparse module (Kvaciral)\n+- #13928 `b8eb0df` blocktools enforce named args for amount (MarcoFalke)\n+- #13054 `bffb35f` Enable automatic detection of undefined names in Python tests scripts. Remove wildcard imports (practicalswift)\n+- #14069 `cf3d7f9` Use assert not `BOOST_CHECK_*` from multithreaded tests (skeees)\n+- #14071 `fab0fbe` Stop txindex thread before calling destructor (MarcoFalke)\n+\n+### Miscellaneous\n+- #11909 `8897135` contrib: Replace developer keys with list of pgp fingerprints (MarcoFalke)\n+- #12394 `fe53d5f` gitian-builder.sh: fix --setup doc, since lxc is default (Sjors)\n+- #12468 `294a766` Add missing newline in init.cpp log message (Aesti)\n+- #12308 `dcfe218` contrib: Add support for out-of-tree builds in gen-manpages.sh (laanwj)\n+- #12451 `aae64a2` Bump leveldb subtree (MarcoFalke)\n+- #12527 `d77b4a7` gitian-build.sh: fix signProg being recognized as two parameters (ken2812221)\n+- #12588 `d74b01d` utils: Remove deprecated pyzmq call from python zmq example (kosciej)\n+- #10271 `bc67982` Use `std::thread::hardware_concurrency`, instead of Boost, to determine available cores (fanquake)\n+- #12097 `14475e2` scripts: Lint-whitespace: use perl instead of grep -p (Sjors)\n+- #12098 `17c44b2` scripts: Lint-whitespace: add param to check last n commits (Sjors)\n+- #11900 `842f61a` script: Simplify checkminimalpush checks, add safety assert (instagibbs)\n+- #12567 `bb98aec` util: Print timestamp strings in logs using iso 8601 formatting (practicalswift)\n+- #12572 `d8d9162` script: Lint-whitespace: find errors more easily (AkioNak)\n+- #10694 `ae5bcc7` Remove redundant code in MutateTxSign(CMutableTransaction&, const std::string&) (practicalswift)\n+- #12659 `3d16f58` Improve Fatal LevelDB Log Messages (eklitzke)\n+- #12643 `0f0229d` util: Remove unused `sync_chain` (MarcoFalke)\n+- #12102 `7fb8fb4` Apply hardening measures in bitcoind systemd service file (Flowdalic)\n+- #12652 `55f490a` bitcoin-cli: Provide a better error message when bitcoind is not running (practicalswift)\n+- #12630 `c290508` Provide useful error message if datadir is not writable (murrayn)\n+- #11881 `624bee9` Remove Python2 support (jnewbery)\n+- #12821 `082e26c` contrib: Remove unused import string (MarcoFalke)\n+- #12829 `252c1b0` Python3 fixup (jnewbery)\n+- #12822 `ff48f62` Revert 7deba93bdc76616011a9f493cbc203d60084416f and fix expired-key-sigs properly (TheBlueMatt)\n+- #12820 `5e53b80` contrib: Fix check-doc script regexes (MarcoFalke)\n+- #12713 `4490871` Track negated options in the option parser (eklitzke)\n+- #12708 `b2e5fe8` Make verify-commits.sh test that merges are clean (sipa)\n+- #12891 `3190785` logging: Add lint-logs.sh to check for newline termination (jnewbery)\n+- #12923 `a7cbe38` util: Pass `pthread_self()` to `pthread_setschedparam` instead of 0 (laanwj)\n+- #12871 `fb17fae` Add shell script linting: Check for shellcheck warnings in shell scripts (practicalswift)\n+- #12970 `5df84de` logging: Bypass timestamp formatting when not logging (theuni)\n+- #12987 `fe8fa22` tests/tools: Enable additional Python flake8 rules for automatic linting via Travis (practicalswift)\n+- #12972 `0782508` Add python3 script shebang lint (ken2812221)\n+- #13004 `58bbc55` Print to console by default when not run with -daemon (practicalswift)\n+- #13039 `8b4081a` Add logging and error handling for file syncing (laanwj)\n+- #13020 `4741ca5` Consistently log CValidationState on call failure (Empact)\n+- #13031 `826acc9` Fix for utiltime to compile with msvc (sipsorcery)\n+- #13119 `81743b5` Remove script to clean up datadirs (MarcoFalke)\n+- #12954 `5a66642` util: Refactor logging code into a global object (jimpo)\n+- #12769 `35eb9d6` Add systemd service to bitcoind in debian package (ghost)\n+- #13146 `0bc980b` rpcauth: Make it possible to provide a custom password (laanwj)\n+- #13148 `b62b437` logging: Fix potential use-after-free in logprintstr(\u2026) (practicalswift)\n+- #13214 `0612d96` Enable Travis checking for two Python linting rules we are currently not violating (practicalswift)\n+- #13197 `6826989` util: Warn about ignored recursive -includeconf calls (kallewoof)\n+- #13176 `d9ebb63` Improve CRollingBloomFilter performance: replace modulus with FastMod (martinus)\n+- #13228 `d792e47` Add script to detect circular dependencies between source modules (sipa)\n+- #13320 `e08c130` Ensure gitian-build.sh uses bash (jhfrontz)\n+- #13301 `e4082d5` lint: Add linter to error on `#include <*.cpp>` (Empact)\n+- #13374 `56f6936` utils and libraries: checking for bitcoin address in translations (kaplanmaxe)\n+- #13230 `7c32b41` Simplify include analysis by enforcing the developer guide's include syntax (practicalswift)\n+- #13450 `32bf4c6` Add linter: Enforce the source code file naming convention described in the developer notes (practicalswift)\n+- #13479 `fa2ea37` contrib: Fix cve-2018-12356 by hardening the regex (loganaden)\n+- #13448 `a90ca40` Add linter: Make sure we explicitly open all text files using UTF-8 encoding in Python (practicalswift)\n+- #13494 `d67eff8` Follow-up to #13454: Fix broken build by exporting `LC_ALL=C` (practicalswift)\n+- #13510 `03f3925` Scripts and tools: Obsolete #!/bin/bash shebang (DesWurstes)\n+- #13577 `c9eb8d1` logging: Avoid nstart may be used uninitialized in appinitmain warning (mruddy)\n+- #13603 `453ae5e` bitcoin-tx: Stricter check for valid integers (domob1812)\n+- #13118 `c05c93c` RPCAuth Detection in Logs (Linrono)\n+- #13647 `4027ec1` Scripts and tools: Fix `BIND_NOW` check in security-check.py (conradoplg)\n+- #13692 `f5d166a` contrib: Clone core repo in gitian-build (MarcoFalke)\n+- #13699 `4c6d1b9` contrib: Correct version check (kallewoof)\n+- #13695 `dcc0cff` lint: Add linter for circular dependencies (Empact)\n+- #13733 `0d1ebf4` utils: Refactor argsmanager a little (AtsukiTak)\n+- #13714 `29b4ee6` contrib: Add lxc network setup for bionic host (ken2812221)\n+- #13764 `f8685f4` contrib: Fix test-security-check fail in ubuntu 18.04 (ken2812221)\n+- #13809 `77168f7` contrib: Remove debian and rpm subfolder (MarcoFalke)\n+- #13799 `230652c` Ignore unknown config file options; warn instead of error (sipa)\n+- #13894 `df9f712` shutdown: Stop threads before resetting ptrs (MarcoFalke)\n+- #13925 `71dec5c` Merge leveldb subtree (MarcoFalke)\n+- #13939 `ef86f26` lint: Make format string linter understand basic template parameter syntax (practicalswift)\n+- #14105 `eb202ea` util: Report parse errors in configuration file (laanwj)\n+- #12604 `9903537` Add DynamicMemoryUsage() to CDBWrapper to estimate LevelDB memory use (eklitzke)\n+- #12495 `047865e` Increase LevelDB `max_open_files` (eklitzke)\n+- #12784 `e80716d` Fix bug in memory usage calculation (unintended integer division) (practicalswift)\n+- #12618 `becd8dd` Set `SCHED_BATCH` priority on the loadblk thread (eklitzke)\n+- #12854 `5ca1509` Add P2P, Network, and Qt categories to the desktop icon (luke-jr)\n+- #11862 `4366f61` Network specific conf sections (ajtowns)\n+- #13441 `4a7e64f` Prevent shared conf files from failing with different available options in different binaries (achow101)\n+- #13471 `5eca4e8` For AVX2 code, also check for AVX, XSAVE, and OS support (sipa)\n+- #13503 `c655b2c` Document FreeBSD quirk. Fix FreeBSD build: Use std::min<int>(\u2026) to allow for compilation under certain FreeBSD versions (practicalswift)\n+- #13725 `07ce278` Fix bitcoin-cli --version (Empact)\n+\n+### Documentation\n+- #12306 `216f9a4` Improvements to UNIX documentation (axvr)\n+- #12309 `895fbd7` Explain how to update chainTxData in release process (laanwj)\n+- #12317 `85123be` Document method for reviewers to verify chainTxData (jnewbery)\n+- #12331 `d32528e` Properly alphabetize output of CLI --help option (murrayn)\n+- #12322 `c345148` Remove step making cloned repository world-writable for Windows build (murrayn)\n+- #12354 `b264528` add gpg key for fivepiece (fivepiece)\n+- #11761 `89005dd` initial QT documentation (Sjors)\n+- #12232 `fdc2188` Improve \"Turn Windows Features On or Off\" step (MCFX2)\n+- #12487 `4528f74` init: Remove translation for `-blockmaxsize` option help (laanwj)\n+- #12546 `a4a5fc7` Minor improvements to Compatibility Notes (randolf)\n+- #12434 `21e2670` dev-notes: Members should be initialized (MarcoFalke)\n+- #12452 `71f56da` clarified systemd installation instructions in init.md for Ubuntu users (DaveFromBinary)\n+- #12615 `1f93491` allow for SIGNER containing spaces (ken2812221)\n+- #12603 `85424d7` PeerLogicValidation interface (jamesob)\n+- #12581 `12ac2f0` Mention configure without wallet in FreeBSD instructions (dbolser)\n+- #12619 `8a709fb` Give hint about gitian not able to download (kallewoof)\n+- #12668 `de2fcaa` do update before fetching packages in WSL build guide (nvercamm)\n+- #12586 `e7721e6` Update osx brew install instruction (fanquake)\n+- #12760 `7466a26` Improve documentation on standard communication channels (jimpo)\n+- #12797 `0415b1e` init: Fix help message for checkblockindex (MarcoFalke)\n+- #12800 `2d97611` Add note about our preference for scoped enumerations (\"enum class\") (practicalswift)\n+- #12798 `174d016` Refer to witness reserved value as spec. in the BIP (MarcoFalke)\n+- #12759 `d3908e2` Improve formatting of developer notes (eklitzke)\n+- #12877 `2b54155` Use bitcoind in Tor documentation (knoxcard)\n+- #12896 `b15485e` Fix conflicting statements about initialization in developer notes (practicalswift)\n+- #12850 `319991d` add qrencode to brew install instructions (buddilla)\n+- #12007 `cd8e45b` Clarify the meaning of fee delta not being a fee rate in prioritisetransaction RPC (honzik666)\n+- #12927 `06ead15` fixed link, replaced QT with Qt (trulex)\n+- #12852 `ebd786b` devtools: Setup ots git integration (MarcoFalke)\n+- #12933 `3cf76c2` Refine header include policy (MarcoFalke)\n+- #12951 `6df0c6c` Fix comment in FindForkInGlobalIndex (jamesob)\n+- #12982 `a63b4e3` Fix inconsistent namespace formatting guidelines (ryanofsky)\n+- #13026 `9b3a67e` Fix include comment in src/interfaces/wallet.h (promag)\n+- #13012 `d1e3c5e` Add comments for chainparams.h, validation.cpp (jamesob)\n+- #13064 `569e381` List support for BIP173 in bips.md (sipa)\n+- #12997 `646b7f6` build-windows: Switch to Artful, since Zesty is EOL (MarcoFalke)\n+- #12384 `c5f7efe` Add version footnote to tor.md (Willtech)\n+- #13165 `627c376` Mention good first issue list in CONTRIBUTING.md (fanquake)\n+- #13295 `fb77310` Update OpenBSD build instructions for OpenBSD 6.3 (practicalswift)\n+- #13340 `3a8e3f4` remove leftover check-doc documentation (fanquake)\n+- #13346 `60f0358` update bitcoin-dot-org links in release-process.md (fanquake)\n+- #13372 `f014933` split FreeBSD build instructions out of build-unix.md (steverusso)\n+- #13366 `861de3b` Rename \u201cOS X\u201d to the newer \u201cmacOS\u201d convention (giulio92)\n+- #13369 `f8bcef3` update transifex doc link (mess110)\n+- #13312 `b22115d` Add a note about the source code filename naming convention (practicalswift)\n+- #13460 `1939536` Remove note to install all boost dev packages (MarcoFalke)\n+- #13476 `9501938` Fix incorrect shell quoting in FreeBSD build instructions (murrayn)\n+- #13402 `43fa355` Document validationinterace callback blocking deadlock potential (TheBlueMatt)\n+- #13488 `d6cf4bd` Improve readability of \"Squashing commits\" (wodry)\n+- #13531 `ee02deb` Clarify that mempool txiter is `const_iterator` (MarcoFalke)\n+- #13418 `01f9098` More precise explanation of parameter onlynet (wodry)\n+- #13592 `1756cb4` Modify policy to not translate command-line help (ken2812221)\n+- #13588 `b77c38e` Improve doc of options addnode, connect, seednode (wodry)\n+- #13614 `17e9106` Update command line help for -printtoconsole and -debuglogfile (satwo, fanquake)\n+- #13605 `8cc048e` corrected text to reflect new(er) process of specifying fingerprints (jhfrontz)\n+- #13481 `b641f60` Rewrite some validation docs as lock annotations (MarcoFalke)\n+- #13680 `30640f8` Remove outdated comment about miner ignoring CPFP (jamesob)\n+- #13625 `7146672` Add release notes for -printtoconsole and -debuglogfile changes (satwo)\n+- #13718 `f7f574d` Specify preferred Python string formatting technique (masonicboom)\n+- #12764 `10b9a81` Remove field in getblocktemplate help that has never been used (conscott)\n+- #13742 `d2186b3` Adjust bitcoincore.org links (MarcoFalke)\n+- #13706 `94dd89e` Minor improvements to release-process.md (MitchellCash)\n+- #13775 `ef4fac0` Remove newlines from error message (practicalswift)\n+- #13803 `feb7dd9` add note to contributor docs about warranted PR's (kallewoof)\n+- #13814 `67af7ef` Add BIP174 to list of implemented BIPs (sipa)\n+- #13835 `c1cba35` Fix memory consistency model in comment (skeees)\n+- #13824 `aa30e4b` Remove outdated net comment (MarcoFalke)\n+- #13853 `317477a` correct versions in dependencies.md (fanquake)\n+- #13872 `37ab117` Reformat -help output for help2man (real-or-random)\n+- #13717 `8c3c402` Link to python style guidelines from developer notes (masonicboom)\n+- #13895 `1cd5f2c` fix GetWarnings docs to reflect behavior (Empact)\n+- #13911 `3e3a50a` Revert translated string change, clarify wallet log messages (PierreRochard)\n+- #13908 `d6faea4` upgrade rescan time warning from minutes to >1 hour (masonicboom)\n+- #13905 `73a09b4` fixed bitcoin-cli -help output for help2man (hebasto)\n+- #14100 `2936dbc` Change documentation for =0 for non-boolean options (laanwj)\n+- #14096 `465a583` Add reference documentation for descriptors language (sipa)\n+- #12757 `0c5f67b` Clarify include guard naming convention (practicalswift)\n+- #13844 `d3325b0` Correct the help output for `-prune` (hebasto)\n+\n Credits\n =======\n \n Thanks to everyone who directly contributed to this release:\n \n-\n-As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/).\n+- 251\n+- 532479301\n+- Aaron Clauson\n+- Akio Nakamura\n+- Akira Takizawa\n+- Alex Morcos\n+- Alex Vear\n+- Alexey Ivanov\n+- Alin Rus\n+- Andrea Comand\n+- Andrew Chow\n+- Anthony Towns\n+- AtsukiTak\n+- Ben Woosley\n+- Bernhard M. Wiedemann\n+- Brandon Ruggles\n+- buddilla\n+- ccdle12\n+- Chris Moore\n+- Chun Kuan Lee\n+- Clem Taylor\n+- Conor Scott\n+- Conrado Gouvea\n+- Cory Fields\n+- Cristian Mircea Messel\n+- ctp-tsteenholdt\n+- Damian Williamson\n+- Dan Bolser\n+- Daniel Kraft\n+- Darko Jankovi\u0107\n+- DaveFromBinary\n+- David A. Harding\n+- DesWurstes\n+- Dimitris Apostolou\n+- donaloconnor\n+- Douglas Roark\n+- DrahtBot\n+- Drew Rasmussen\n+- e0\n+- Ernest Hemingway\n+- Ethan Heilman\n+- Evan Klitzke\n+- fanquake\n+- Felix Wolfsteller\n+- fivepiece\n+- Florian Schmaus\n+- Fuzzbawls\n+- Gabriel Davidian\n+- Giulio Lombardo\n+- Gleb\n+- Grady Laksmono\n+- GreatSock\n+- Gregory Maxwell\n+- Gregory Sanders\n+- Hennadii Stepanov\n+- Henrik Jonsson\n+- Indospace.io\n+- James O'Beirne\n+- Jan \u010capek\n+- Jeff Frontz\n+- Jeff Rade\n+- Jeremy Rubin\n+- JeremyRand\n+- Jesse Cohen\n+- Jim Posen\n+- joemphilips\n+- John Bampton\n+- John Newbery\n+- johnlow95\n+- Johnson Lau\n+- Jonas Nick\n+- Jonas Schnelli\n+- Jo\u00e3o Barbosa\n+- Jorge Tim\u00f3n\n+- Josh Hartshorn\n+- Julian Fleischer\n+- kallewoof\n+- Karel Bilek\n+- Karl-Johan Alm\n+- Ken Lee\n+- Kevin Pan\n+- Kosta Zertsekel\n+- Kristaps Kaupe\n+- Kvaciral\n+- Lawrence Nahum\n+- Linrono\n+- lmanners\n+- Loganaden Velvindron\n+- Lowell Manners\n+- lucash.dev@gmail.com\n+- Luke Dashjr\n+- lutangar\n+- Marcin Jachymiak\n+- marcoagner\n+- MarcoFalke\n+- Mark Erhardt\n+- Mark Friedenbach\n+- Martin Ankerl\n+- Mason Simon\n+- Matt Corallo\n+- Matteo Sumberaz\n+- Max Kaplan\n+- MeshCollider\n+- Micha\u0142 Zabielski\n+- Mitchell Cash\n+- mruddy\n+- mryandao\n+- murrayn\n+- Nick Vercammen\n+- Nicolas Dorier\n+- Nikolay Mitev\n+- okayplanet\n+- Pierre Rochard\n+- Pieter Wuille\n+- practicalswift\n+- Qasim Javed\n+- Randolf Richardson\n+- Richard Kiss\n+- Roman Zeyde\n+- Russell Yanofsky\n+- Samuel B. Atwood\n+- Sebastian Kung\n+- Sjors Provoost\n+- Steve Lee\n+- steverusso\n+- Suhas Daftuar\n+- Tamas Blummer\n+- TheCharlatan\n+- Thomas Kerin\n+- Thomas Snider\n+- Tim Ruffing\n+- Varunram\n+- Vasil Dimov\n+- Will Ayd\n+- William Robinson\n+- winder\n+- Wladimir J. van der Laan\n+- wodry\n+\n+And to those that reported security issues:\n+\n+- awemany (for CVE-2018-17144, previously credited as \"anonymous reporter\")\n+\n+As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/).\n\\ No newline at end of file"
      }
    ]
  },
  {
    "sha": "e1ed37edaedc85b8c3468bd9a726046344036243",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMWVkMzdlZGFlZGM4NWI4YzM0NjhiZDlhNzI2MDQ2MzQ0MDM2MjQz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-10-01T10:02:21Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-10-01T10:04:33Z"
      },
      "message": "Merge #14157: [0.17] doc: merge upstream release-notes from bitcoin-core/bitcoin-devwiki\n\n786825c719e40f8c73643fae4ea9e9dca454715f doc: Update release-notes.md from upstream devwiki (fanquake)\n\nPull request description:\n\n  sipa [suggested in IRC](https://botbot.me/freenode/bitcoin-core-dev/2018-09-06/?msg=104094793&page=1) that now would be a good time to merge the release notes from the [bitcoin-devwiki](https://github.com/bitcoin-core/bitcoin-devwiki).\n\nTree-SHA512: 6d9631e12147b4e64f5382a64cceb71b84ca21bdb3fc516248de79968f7f26e74ab5d569e3767018581bcda4d5b8c8ec103b1795929e98f7e9c4d6e95379f7de",
      "tree": {
        "sha": "ed973027ee9b576a5764b8b711a5a8f1c4107694",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ed973027ee9b576a5764b8b711a5a8f1c4107694"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e1ed37edaedc85b8c3468bd9a726046344036243",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlux8TEACgkQHkrtYphs\n0l0cLggAmUHlLgyqmq0kapVS+P8bcYH2exgmy5UPKGbsRHNPEXAZhtTASwa6c9I8\nImL9biwKJVkxb515eW72KO2J8FZ1N7dQT46ue3WzuBuLdXQejRbONGqi/2Bp9Akp\nD5XFN1s1eNjYFH1GBqUtEaP9OUaJHeIkH2tgUFIKrnOqi2+SYlckxK5jFUsyjHvF\niovCwqUzsHqgvHZY3WWMLn7timVMucV9lkQoRuvpSrCbywWsX3cLas6p8Vn56vMg\nd5kL0kKJIEywAkU7yMXvqRtqVIyu9h4X8CwSZN0DaJHrdFyx40tHBqS2RDX1icOw\n9fMEw5k6NfROUMCVjkshqE93eVyghA==\n=pEcE\n-----END PGP SIGNATURE-----",
        "payload": "tree ed973027ee9b576a5764b8b711a5a8f1c4107694\nparent 480d6bb07832576c7e861ef8d65405938605c5f8\nparent 786825c719e40f8c73643fae4ea9e9dca454715f\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1538388141 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1538388273 +0200\n\nMerge #14157: [0.17] doc: merge upstream release-notes from bitcoin-core/bitcoin-devwiki\n\n786825c719e40f8c73643fae4ea9e9dca454715f doc: Update release-notes.md from upstream devwiki (fanquake)\n\nPull request description:\n\n  sipa [suggested in IRC](https://botbot.me/freenode/bitcoin-core-dev/2018-09-06/?msg=104094793&page=1) that now would be a good time to merge the release notes from the [bitcoin-devwiki](https://github.com/bitcoin-core/bitcoin-devwiki).\n\nTree-SHA512: 6d9631e12147b4e64f5382a64cceb71b84ca21bdb3fc516248de79968f7f26e74ab5d569e3767018581bcda4d5b8c8ec103b1795929e98f7e9c4d6e95379f7de\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1ed37edaedc85b8c3468bd9a726046344036243",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e1ed37edaedc85b8c3468bd9a726046344036243",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1ed37edaedc85b8c3468bd9a726046344036243/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "480d6bb07832576c7e861ef8d65405938605c5f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/480d6bb07832576c7e861ef8d65405938605c5f8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/480d6bb07832576c7e861ef8d65405938605c5f8"
      },
      {
        "sha": "786825c719e40f8c73643fae4ea9e9dca454715f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/786825c719e40f8c73643fae4ea9e9dca454715f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/786825c719e40f8c73643fae4ea9e9dca454715f"
      }
    ],
    "stats": {
      "total": 916,
      "additions": 876,
      "deletions": 40
    },
    "files": [
      {
        "sha": "1b6e2f8e6cbeb56c69d7465755244df89f1b8961",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 876,
        "deletions": 40,
        "changes": 916,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1ed37edaedc85b8c3468bd9a726046344036243/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1ed37edaedc85b8c3468bd9a726046344036243/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=e1ed37edaedc85b8c3468bd9a726046344036243",
        "patch": "@@ -1,9 +1,9 @@\n (note: this is a temporary file, to be added-to by anybody, and moved to\n release-notes at release time)\n \n-Bitcoin Core version *version* is now available from:\n+Bitcoin Core version 0.17.0 is now available from:\n \n-  <https://bitcoincore.org/bin/bitcoin-core-*version*/>\n+  <https://bitcoincore.org/bin/bitcoin-core-0.17.0/>\n \n This is a new major version release, including new features, various bugfixes\n and performance improvements, as well as updated translations.\n@@ -24,7 +24,9 @@ shut down (which might take a few minutes for older versions), then run the\n installer (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on Mac)\n or `bitcoind`/`bitcoin-qt` (on Linux).\n \n-The first time you run version 0.15.0, your chainstate database will be converted to a\n+If your node has a txindex, the txindex db will be migrated the first time you run 0.17.0 or newer, which may take up to a few hours. Your node will not be functional until this migration completes.\n+\n+The first time you run version 0.15.0 or newer, your chainstate database will be converted to a\n new format, which will take anywhere from a few minutes to half an hour,\n depending on the speed of your machine.\n \n@@ -56,20 +58,28 @@ frequently tested on them.\n From 0.17.0 onwards macOS <10.10 is no longer supported. 0.17.0 is built using Qt 5.9.x, which doesn't\n support versions of macOS older than 10.10.\n \n+Known issues\n+============\n+\n+- Upgrading from 0.13.0 or older currently results in memory blow-up during the roll-back of blocks to the SegWit activation point. In these cases, a full `-reindex` is necessary.\n+\n+- The GUI suffers from visual glitches in the new MacOS dark mode. This has to do with our Qt theme handling and is not a new problem in 0.17.0, but is expected to be resolved in 0.17.1.\n+\n Notable changes\n ===============\n \n-Changed command-line options\n-----------------------------\n+Changed configuration options\n+-----------------------------\n \n - `-includeconf=<file>` can be used to include additional configuration files.\n   Only works inside the `bitcoin.conf` file, not inside included files or from\n   command-line. Multiple files may be included. Can be disabled from command-\n   line via `-noincludeconf`. Note that multi-argument commands like\n   `-includeconf` will override preceding `-noincludeconf`, i.e.\n-\n-    noincludeconf=1\n-    includeconf=relative.conf\n+  ```\n+  noincludeconf=1\n+  includeconf=relative.conf\n+  ```\n \n   as bitcoin.conf will still include `relative.conf`.\n \n@@ -78,27 +88,6 @@ GUI changes\n \n - Block storage can be limited under Preferences, in the Main tab. Undoing this setting requires downloading the full blockchain again. This mode is incompatible with -txindex and -rescan.\n \n-RPC changes\n-------------\n-\n-### Low-level changes\n-\n-- The `createrawtransaction` RPC will now accept an array or dictionary (kept for compatibility) for the `outputs` parameter. This means the order of transaction outputs can be specified by the client.\n-- The `fundrawtransaction` RPC will reject the previously deprecated `reserveChangeKey` option.\n-- `sendmany` now shuffles outputs to improve privacy, so any previously expected behavior with regards to output ordering can no longer be relied upon.\n-- The new RPC `testmempoolaccept` can be used to test acceptance of a transaction to the mempool without adding it.\n-- JSON transaction decomposition now includes a `weight` field which provides\n-  the transaction's exact weight. This is included in REST /rest/tx/ and\n-  /rest/block/ endpoints when in json mode. This is also included in `getblock`\n-  (with verbosity=2), `listsinceblock`, `listtransactions`, and\n-  `getrawtransaction` RPC commands.\n-- New `fees` field introduced in `getrawmempool`, `getmempoolancestors`, `getmempooldescendants` and\n-   `getmempoolentry` when verbosity is set to `true` with sub-fields `ancestor`, `base`, `modified`\n-   and `descendant` denominated in BTC. This new field deprecates previous fee fields, such as\n-   `fee`, `modifiedfee`, `ancestorfee` and `descendantfee`.\n-- The new RPC `getzmqnotifications` returns information about active ZMQ\n-  notifications.\n-\n External wallet files\n ---------------------\n \n@@ -133,10 +122,10 @@ This feature is currently only available through the RPC interface.\n \n Coin selection\n --------------\n-- A new `-avoidpartialspends` flag has been added (default=false). If enabled, the wallet will try to spend UTXO's that point at the same destination\n-  together. This is a privacy increase, as there will no longer be cases where a wallet will inadvertently spend only parts of the coins sent to\n-  the same address (note that if someone were to send coins to that address after it was used, those coins will still be included in future\n-  coin selections).\n+\n+### Partial spend avoidance\n+\n+When an address is paid multiple times the coins from those separate payments can be spent separately which hurts privacy due to linking otherwise separate addresses. A new `-avoidpartialspends` flag has been added (default=false). If enabled, the wallet will always spend existing UTXO to the same address together even if it results in higher fees. If someone were to send coins to an address after it was used, those coins will still be included in future coin selections.\n \n Configuration sections for testnet and regtest\n ----------------------------------------------\n@@ -155,9 +144,10 @@ prefixing the option with the network, such as:\n     [regtest]\n     mempoolsize=20\n \n-The `addnode=`, `connect=`, `port=`, `bind=`, `rpcport=`, `rpcbind=`\n-and `wallet=` options will only apply to mainnet when specified in the\n-configuration file, unless a network is specified.\n+If the following options are not in a section, they will only apply to mainnet:\n+`addnode=`, `connect=`, `port=`, `bind=`, `rpcport=`, `rpcbind=` and `wallet=`.\n+The options to choose a network (`regtest=` and `testnet=`) must be specified\n+outside of sections.\n \n 'label' and 'account' APIs for wallet\n -------------------------------------\n@@ -197,9 +187,112 @@ Here are the changes to RPC methods:\n | `listtransactions`     | The `account` named parameter has been renamed to `dummy`. If provided, the `dummy` parameter must be set to the string `*`, unless running with the `-deprecatedrpc=accounts` argument (in which case functionality is unchanged). |\n | `getbalance`           | `account`, `minconf` and `include_watchonly` parameters are deprecated, and can only be used if running with '-deprecatedrpc=accounts' |\n \n+BIP 174 Partially Signed Bitcoin Transactions support\n+-----------------------------------------------------\n+\n+[BIP 174 PSBT](https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki) is an interchange format for Bitcoin transactions that are not fully signed\n+yet, together with relevant metadata to help entities work towards signing it.\n+It is intended to simplify workflows where multiple parties need to cooperate to\n+produce a transaction. Examples include hardware wallets, multisig setups, and\n+[CoinJoin](https://bitcointalk.org/?topic=279249) transactions.\n+\n+### Overall workflow\n+\n+Overall, the construction of a fully signed Bitcoin transaction goes through the\n+following steps:\n+\n+- A **Creator** proposes a particular transaction to be created. He constructs\n+  a PSBT that contains certain inputs and outputs, but no additional metadata.\n+- For each input, an **Updater** adds information about the UTXOs being spent by\n+  the transaction to the PSBT.\n+- A potentially other Updater adds information about the scripts and public keys\n+  involved in each of the inputs (and possibly outputs) of the PSBT.\n+- **Signers** inspect the transaction and its metadata to decide whether they\n+  agree with the transaction. They can use amount information from the UTXOs\n+  to assess the values and fees involved. If they agree, they produce a\n+  partial signature for the inputs for which they have relevant key(s).\n+- A **Finalizer** is run for each input to convert the partial signatures and\n+  possibly script information into a final `scriptSig` and/or `scriptWitness`.\n+- An **Extractor** produces a valid Bitcoin transaction (in network format)\n+  from a PSBT for which all inputs are finalized.\n+\n+Generally, each of the above (excluding Creator and Extractor) will simply\n+add more and more data to a particular PSBT. In a naive workflow, they all have\n+to operate sequentially, passing the PSBT from one to the next, until the\n+Extractor can convert it to a real transaction. In order to permit parallel\n+operation, **Combiners** can be employed which merge metadata from different\n+PSBTs for the same unsigned transaction.\n+\n+The names above in bold are the names of the roles defined in BIP174. They're\n+useful in understanding the underlying steps, but in practice, software and\n+hardware implementations will typically implement multiple roles simultaneously.\n+\n+### RPCs\n+\n+- **`converttopsbt` (Creator)** is a utility RPC that converts an\n+  unsigned raw transaction to PSBT format. It ignores existing signatures.\n+- **`createpsbt` (Creator)** is a utility RPC that takes a list of inputs and\n+  outputs and converts them to a PSBT with no additional information. It is\n+  equivalent to calling `createrawtransaction` followed by `converttopsbt`.\n+- **`walletcreatefundedpsbt` (Creator, Updater)** is a wallet RPC that creates a\n+  PSBT with the specified inputs and outputs, adds additional inputs and change\n+  to it to balance it out, and adds relevant metadata. In particular, for inputs\n+  that the wallet knows about (counting towards its normal or watch-only\n+  balance), UTXO information will be added. For outputs and inputs with UTXO\n+  information present, key and script information will be added which the wallet\n+  knows about. It is equivalent to running `createrawtransaction`, followed by\n+  `fundrawtransaction`, and `converttopsbt`.\n+- **`walletprocesspsbt` (Updater, Signer, Finalizer)** is a wallet RPC that takes as\n+  input a PSBT, adds UTXO, key, and script data to inputs and outputs that miss\n+  it, and optionally signs inputs. Where possible it also finalizes the partial\n+  signatures.\n+- **`finalizepsbt` (Finalizer, Extractor)** is a utility RPC that finalizes any\n+  partial signatures, and if all inputs are finalized, converts the result to a\n+  fully signed transaction which can be broadcast with `sendrawtransaction`.\n+- **`combinepsbt` (Combiner)** is a utility RPC that implements a Combiner. It\n+  can be used at any point in the workflow to merge information added to\n+  different versions of the same PSBT. In particular it is useful to combine the\n+  output of multiple Updaters or Signers.\n+- **`decodepsbt`** is a diagnostic utility RPC which will show all information in\n+  a PSBT in human-readable form, as well as compute its eventual fee if known.\n+\n+Upgrading non-HD wallets to HD wallets\n+--------------------------------------\n+\n+Since Bitcoin Core 0.13.0, creating new BIP 32 Hierarchical Deterministic wallets has been supported by Bitcoin Core but old non-HD wallets could not be upgraded to HD. Now non-HD wallets can be upgraded to HD using the `-upgradewallet` command line option. This upgrade will result in the all keys in the keypool being marked as used and a new keypool generated. **A new backup must be made when this upgrade is performed.**\n+\n+Additionally, `-upgradewallet` can be used to upgraded from a non-split HD chain (all keys generated with `m/0'/0'/i'`) to a split HD chain (receiving keys generated with `'m/0'/0'/i'` and change keys generated with `m'/0'/1'/i'`). When this upgrade occurs, all keys already in the keypool will remain in the keypool to be used until all keys from before the upgrade are exhausted. This is to avoid issues with backups and downgrades when some keys may come from the change key keypool. Users can begin using the new split HD chain keypools by using the `newkeypool` RPC to mark all keys in the keypool as used and begin using a new keypool generated from the split HD chain.\n+\n+HD Master key rotation\n+----------------------\n+\n+A new RPC, `sethdseed`, has been introduced which allows users to set a new HD seed or set their own HD seed. This allows for a new HD seed to be used. **A new backup must be made when a new HD seed is set.**\n+\n Low-level RPC changes\n ---------------------\n \n+- The new RPC `scantxoutset` can be used to scan the UTXO set for entries\n+  that match certain output descriptors. Refer to the [output descriptors\n+  reference documentation](doc/descriptors.md) for more details. This call\n+  is similar to `listunspent` but does not use a wallet, meaning that the\n+  wallet can be disabled at compile or run time. This call is experimental,\n+  as such, is subject to changes or removal in future releases.\n+\n+- The `createrawtransaction` RPC will now accept an array or dictionary (kept for compatibility) for the `outputs` parameter. This means the order of transaction outputs can be specified by the client.\n+- The `fundrawtransaction` RPC will reject the previously deprecated `reserveChangeKey` option.\n+- `sendmany` now shuffles outputs to improve privacy, so any previously expected behavior with regards to output ordering can no longer be relied upon.\n+- The new RPC `testmempoolaccept` can be used to test acceptance of a transaction to the mempool without adding it.\n+- JSON transaction decomposition now includes a `weight` field which provides\n+  the transaction's exact weight. This is included in REST /rest/tx/ and\n+  /rest/block/ endpoints when in json mode. This is also included in `getblock`\n+  (with verbosity=2), `listsinceblock`, `listtransactions`, and\n+  `getrawtransaction` RPC commands.\n+- New `fees` field introduced in `getrawmempool`, `getmempoolancestors`, `getmempooldescendants` and\n+   `getmempoolentry` when verbosity is set to `true` with sub-fields `ancestor`, `base`, `modified`\n+   and `descendant` denominated in BTC. This new field deprecates previous fee fields, such as\n+   `fee`, `modifiedfee`, `ancestorfee` and `descendantfee`.\n+- The new RPC `getzmqnotifications` returns information about active ZMQ\n+  notifications.\n - When bitcoin is not started with any `-wallet=<path>` options, the name of\n   the default wallet returned by `getwalletinfo` and `listwallets` RPCs is\n   now the empty string `\"\"` instead of `\"wallet.dat\"`. If bitcoin is started\n@@ -224,6 +317,19 @@ Low-level RPC changes\n - The `getwalletinfo` RPC method now returns an `hdseedid` value, which is always the same as the incorrectly-named `hdmasterkeyid` value. `hdmasterkeyid` will be removed in V0.18.\n - The `getaddressinfo` RPC method now returns an `hdseedid` value, which is always the same as the incorrectly-named `hdmasterkeyid` value. `hdmasterkeyid` will be removed in V0.18.\n \n+- Parts of the `validateaddress` RPC method have been deprecated and moved to\n+  `getaddressinfo`. Clients must transition to using `getaddressinfo` to access\n+  this information before upgrading to v0.18. The following deprecated fields\n+  have moved to `getaddressinfo` and will only be shown with\n+  `-deprecatedrpc=validateaddress`: `ismine`, `iswatchonly`, `script`, `hex`,\n+  `pubkeys`, `sigsrequired`, `pubkey`, `addresses`, `embedded`, `iscompressed`,\n+  `account`, `timestamp`, `hdkeypath`, `hdmasterkeyid`.\n+- `signrawtransaction` is deprecated and will be fully removed in v0.18. To use\n+  `signrawtransaction` in v0.17, restart bitcoind with\n+  `-deprecatedrpc=signrawtransaction`. Projects should transition to using\n+  `signrawtransactionwithkey` and `signrawtransactionwithwallet` before\n+  upgrading to v0.18.\n+\n Other API changes\n -----------------\n \n@@ -255,18 +361,748 @@ Miner block size removed\n \n The `-blockmaxsize` option for miners to limit their blocks' sizes was\n deprecated in V0.15.1, and has now been removed. Miners should use the\n-`-blockmaxweight` option if they want to limit the weight of their blocks'\n-weights.\n+`-blockmaxweight` option if they want to limit the weight of their blocks.\n \n Python Support\n --------------\n \n Support for Python 2 has been discontinued for all test files and tools.\n \n+0.17.0 change log\n+=================\n+\n+### Consensus\n+- #12204 `3fa24bb` Fix overly eager BIP30 bypass (morcos)\n+\n+### Policy\n+- #12568 `ed6ae80` Allow dustrelayfee to be set to zero (luke-jr)\n+- #13120 `ca2a233` Treat segwit as always active (MarcoFalke)\n+- #13096 `062738c` Fix `MAX_STANDARD_TX_WEIGHT` check (jl2012)\n+\n+### Mining\n+- #12693 `df529dc` Remove unused variable in SortForBlock (drewx2)\n+- #12448 `84efa9a` Interrupt block generation on shutdown request (promag)\n+\n+### Block and transaction handling\n+- #12225 `67447ba` Mempool cleanups (sdaftuar)\n+- #12356 `fd65937` Fix 'mempool min fee not met' debug output (Empact)\n+- #12287 `bf3353d` Optimise lock behaviour for GuessVerificationProgress() (jonasschnelli)\n+- #11889 `47a7666` Drop extra script variable in ProduceSignature (ryanofsky)\n+- #11880 `d59b8d6` Stop special-casing phashBlock handling in validation for TBV (TheBlueMatt)\n+- #12431 `947c25e` Only call NotifyBlockTip when chainActive changes (jamesob)\n+- #12653 `534b8fa` Allow to optional specify the directory for the blocks storage (jonasschnelli)\n+- #12172 `3b62a91` Bugfix: RPC: savemempool: Don't save until LoadMempool() is finished (jtimon)\n+- #12167 `88430cb` Make segwit failure due to `CLEANSTACK` violation return a `SCRIPT_ERR_CLEANSTACK` error code (maaku)\n+- #12561 `24133b1` Check for block corruption in ConnectBlock() (sdaftuar)\n+- #11617 `1b5723e` Avoid lock: Call FlushStateToDisk(\u2026) regardless of fCheckForPruning (practicalswift)\n+- #11739 `0a8b7b4` Enforce `SCRIPT_VERIFY_P2SH` and `SCRIPT_VERIFY_WITNESS` from genesis (sdaftuar)\n+- #12885 `a49381d` Reduce implementation code inside CScript (sipa)\n+- #13032 `34dd1a6` Output values for \"min relay fee not met\" error (kristapsk)\n+- #13033 `a07e8ca` Build txindex in parallel with validation (jimpo)\n+- #13080 `66cc47b` Add compile time checking for ::mempool.cs runtime locking assertions (practicalswift)\n+- #13185 `08c1caf` Bugfix: the end of a reorged chain is invalid when connect fails (sipa)\n+- #11689 `0264836` Fix missing locking in CTxMemPool::check(\u2026) and CTxMemPool::setSanityCheck(\u2026) (practicalswift)\n+- #13011 `3c2a41a` Cache witness hash in CTransaction (MarcoFalke)\n+- #13191 `0de7cc8` Specialized double-SHA256 with 64 byte inputs with SSE4.1 and AVX2 (sipa)\n+- #13243 `ea263e1` Make reusable base class for auxiliary indices (jimpo)\n+- #13393 `a607d23` Enable double-SHA256-for-64-byte code on 32-bit x86 (sipa)\n+- #13428 `caabdea` validation: check the specified number of blocks (off-by-one) (kallewoof)\n+- #13438 `450055b` Improve coverage of SHA256 SelfTest code (sipa)\n+- #13431 `954f4a9` validation: count blocks correctly for check level < 3 (kallewoof)\n+- #13386 `3a3eabe` SHA256 implementations based on Intel SHA Extensions (sipa)\n+- #11658 `9a1ad2c` During IBD, when doing pruning, prune 10% extra to avoid pruning again soon after (luke-jr)\n+- #13794 `8ce55df` chainparams: Update with data from assumed valid chain (MarcoFalke)\n+- #13527 `e7ea858` Remove promiscuousmempoolflags (MarcoFalke)\n+\n+### P2P protocol and network code\n+- #12342 `eaeaa2d` Extend #11583 (\"Do not make it trivial for inbound peers to generate log entries\") to include \"version handshake timeout\" message (clemtaylor)\n+- #12218 `9a32114` Move misbehaving logging to net logging category (laanwj)\n+- #10387 `5c2aff8` Eventually connect to `NODE_NETWORK_LIMITED` peers (jonasschnelli)\n+- #9037 `a36834f` Add test-before-evict discipline to addrman (EthanHeilman)\n+- #12622 `e1d6e2a` Correct addrman logging (laanwj)\n+- #11962 `0a01843` add seed.bitcoin.sprovoost.nl to DNS seeds (Sjors)\n+- #12569 `23e7fe8` Increase signal-to-noise ratio in debug.log by adjusting log level when logging failed non-manual connect():s (practicalswift)\n+- #12855 `c199869` Minor accumulated cleanups (tjps)\n+- #13153 `ef46c99` Add missing newlines to debug logging (laanwj)\n+- #13162 `a174702` Don't incorrectly log that REJECT messages are unknown (jnewbery)\n+- #13151 `7f4db9a` Serve blocks directly from disk when possible (laanwj)\n+- #13134 `70d3541` Add option `-enablebip61` to configure sending of BIP61 notifications (laanwj)\n+- #13532 `7209fec` Log warning when deprecated network name 'tor' is used (wodry)\n+- #13615 `172f984` Remove unused interrupt from SendMessages (fanquake)\n+- #13417 `1e90862` Tighten scope in `net_processing` (skeees)\n+- #13298 `f8d470e` Bucketing INV delays (1 bucket) for incoming connections to hide tx time (naumenkogs)\n+- #13672 `0d8d6be` Modified `in_addr6` cast in CConman class to work with msvc (sipsorcery)\n+- #11637 `c575260` Remove dead service bits code (MarcoFalke)\n+- #13212 `a6f00ce` Fixed a race condition when disabling the network (lmanners)\n+- #13656 `1211b15` Remove the boost/algorithm/string/predicate.hpp dependency (251Labs)\n+- #13423 `f58674a` Thread safety annotations in `net_processing` (skeees)\n+- #13776 `7d36237` Add missing verification of IPv6 address in CNetAddr::GetIn6Addr(\u2026) (practicalswift)\n+- #13907 `48bf8ff` Introduce a maximum size for locators (gmaxwell)\n+- #13951 `8a9ffec` Hardcoded seeds update pre-0.17 branch (laanwj)\n+\n+### Wallet\n+- #12330 `2a30e67` Reduce scope of `cs_main` and `cs_wallet` locks in listtransactions (promag)\n+- #12298 `a1ffddb` Refactor HaveKeys to early return on false result (promag)\n+- #12282 `663911e` Disallow abandon of conflicted txes (MarcoFalke)\n+- #12333 `d405bee` Make CWallet::ListCoins atomic (promag)\n+- #12296 `8e6f9f4` Only fee-bump non-conflicted/non-confirmed txes (MarcoFalke)\n+- #11866 `6bb9c13` Do not un-mark fInMempool on wallet txn if ATMP fails (TheBlueMatt)\n+- #11882 `987a809` Disable default fallbackfee on mainnet (jonasschnelli)\n+- #9991 `4ca7c1e` listreceivedbyaddress Filter Address (NicolasDorier)\n+- #11687 `98bc27f` External wallet files (ryanofsky)\n+- #12658 `af88094` Sanitize some wallet serialization (sipa)\n+- #9680 `6acd870` Unify CWalletTx construction (ryanofsky)\n+- #10637 `e057589` Coin Selection with Murch's algorithm (achow101, Xekyo)\n+- #12408 `c39dd2e` Change output type globals to members (MarcoFalke)\n+- #12694 `9552dfb` Actually disable BnB when there are preset inputs (achow101)\n+- #11536 `cead84b` Rename account to label where appropriate (ryanofsky)\n+- #12709 `02b7e83` shuffle sendmany recipients ordering (instagibbs)\n+- #12699 `c948dc8` Shuffle transaction inputs before signing (instagibbs)\n+- #10762 `6d53663` Remove Wallet dependencies from init.cpp (jnewbery)\n+- #12857 `821980c` Avoid travis lint-include-guards error (ken2812221)\n+- #12702 `dab0d68` importprivkey: hint about importmulti (kallewoof)\n+- #12836 `9abdb7c` Make WalletInitInterface and DummyWalletInit private, fix nullptr deref (promag)\n+- #12785 `215158a` Initialize `m_last_block_processed` to nullptr (practicalswift)\n+- #12932 `8d651ae` Remove redundant lambda function arg in handleTransactionChanged (laanwj)\n+- #12749 `a84b056` feebumper: discard change outputs below discard rate (instagibbs)\n+- #12892 `9b3370d` introduce 'label' API for wallet (jnewbery)\n+- #12925 `6d3de17` Logprint the start of a rescan (jonasschnelli)\n+- #12888 `39439e5` debug log number of unknown wallet records on load (instagibbs)\n+- #12977 `434150a` Refactor `g_wallet_init_interface` to const reference (promag)\n+- #13017 `65d7083` Add wallets management functions (promag)\n+- #12953 `d1d54ae` Deprecate accounts (jnewbery)\n+- #12909 `476cb35` Make fee settings to be non-static members (MarcoFalke)\n+- #13002 `487dcbe` Do not treat bare multisig outputs as IsMine unless watched (sipa)\n+- #13028 `783bb64` Make vpwallets usage thread safe (promag)\n+- #12507 `2afdc29` Interrupt rescan on shutdown request (promag)\n+- #12729 `979150b` Get rid of ambiguous OutputType::NONE value (ryanofsky)\n+- #13079 `5778d44` Fix rescanblockchain rpc to properly report progress (Empact)\n+- #12560 `e03c0db` Upgrade path for non-HD wallets to HD (achow101)\n+- #13161 `7cc1bd3` Reset BerkeleyDB handle after connection fails (real-or-random)\n+- #13081 `0dec5b5` Add compile time checking for `cs_wallet` runtime locking assertions (practicalswift)\n+- #13127 `19a3a9e` Add Clang thread safety annotations for variables guarded by `cs_db` (practicalswift)\n+- #10740 `4cfe17c` `loadwallet` RPC - load wallet at runtime (jnewbery)\n+- #12924 `6738813` Fix hdmaster-key / seed-key confusion (scripted diff) (jnewbery)\n+- #13297 `d82c5d1` Fix incorrect comment for DeriveNewSeed (jnewbery)\n+- #13063 `6378eef` Use shared pointer to retain wallet instance (promag)\n+- #13142 `56fe3dc` Separate IsMine from solvability (sipa)\n+- #13194 `fd96d54` Remove template matching and pseudo opcodes (sipa)\n+- #13252 `c4cc8d9` Refactor ReserveKeyFromKeyPool for safety (Empact)\n+- #13058 `343d4e4` `createwallet` RPC - create new wallet at runtime (jnewbery)\n+- #13351 `2140f6c` Prevent segfault when sending to unspendable witness (MarcoFalke)\n+- #13060 `3f0f394` Remove getlabeladdress RPC (jnewbery)\n+- #13111 `000abbb` Add unloadwallet RPC (promag)\n+- #13160 `868cf43` Unlock spent outputs (promag)\n+- #13498 `f54f373` Fixups from account API deprecation (jnewbery)\n+- #13491 `61a044a` Improve handling of INVALID in IsMine (sipa)\n+- #13425 `028b0d9` Moving final scriptSig construction from CombineSignatures to ProduceSignature (PSBT signer logic) (achow101)\n+- #13564 `88a15eb` loadwallet shouldn't create new wallets (jnewbery)\n+- #12944 `619cd29` ScanforWalletTransactions should mark input txns as dirty (instagibbs)\n+- #13630 `d6b2235` Drop unused pindexRet arg to CMerkleTx::GetDepthInMainChain (Empact)\n+- #13566 `ad552a5` Fix get balance (jnewbery)\n+- #13500 `4a3e8c5` Decouple wallet version from client version (achow101)\n+- #13712 `aba2e66` Fix non-determinism in ParseHDKeypath(\u2026). Avoid using an uninitialized variable in path calculation (practicalswift)\n+- #9662 `6b6e854` Add createwallet \"disableprivatekeys\" option: a sane mode for watchonly-wallets (jonasschnelli)\n+- #13683 `e8c7434` Introduce assertion to document the assumption that cache and cache_used are always set in tandem (practicalswift)\n+- #12257 `5f7575e` Use destination groups instead of coins in coin select (kallewoof)\n+- #13773 `89a116d` Fix accidental use of the comma operator (practicalswift)\n+- #13805 `c88529a` Correctly limit output group size (sdaftuar)\n+- #12992 `26f59f5` Add wallet name to log messages (PierreRochard)\n+- #13667 `b81a8a5` Fix backupwallet for multiwallets (domob1812)\n+- #13657 `51c693d` assert to ensure accuracy of CMerkleTx::GetBlocksToMaturity (Empact)\n+- #13812 `9d86aad` sum ancestors rather than taking max in output groups (kallewoof)\n+- #13876 `8eb9870` Catch `filesystem_error` and raise `InitError` (MarcoFalke)\n+- #13808 `13d51a2` shuffle coins before grouping, where warranted (kallewoof)\n+- #13666 `2115cba` Always create signatures with Low R values (achow101)\n+- #13917 `0333914` Additional safety checks in PSBT signer (sipa)\n+- #13968 `65e7a8b` couple of walletcreatefundedpsbt fixes (instagibbs)\n+- #14055 `2307a6e` fix walletcreatefundedpsbt deriv paths, add test (instagibbs)\n+\n+### RPC and other APIs\n+- #12336 `3843780` Remove deprecated rpc options (jnewbery)\n+- #12193 `5dc00f6` Consistently use UniValue.pushKV instead of push_back(Pair()) (karel-3d) (MarcoFalke)\n+- #12409 `0cc45ed` Reject deprecated reserveChangeKey in fundrawtransaction (MarcoFalke)\n+- #10583 `8a98dfe` Split part of validateaddress into getaddressinfo (achow101)\n+- #10579 `ffc6e48` Split signrawtransaction into wallet and non-wallet RPC command (achow101)\n+- #12494 `e4ffcac` Declare CMutableTransaction a struct in rawtransaction.h (Empact)\n+- #12503 `0e26591` createmultisig no longer takes addresses (instagibbs)\n+- #12083 `228b086` Improve getchaintxstats test coverage (promag)\n+- #12479 `cd5e438` Add child transactions to getrawmempool verbose output (conscott)\n+- #11872 `702e8b7` createrawtransaction: Accept sorted outputs (MarcoFalke)\n+- #12700 `ebdf84c` Document RPC method aliasing (ryanofsky)\n+- #12727 `8ee5c7b` Remove unreachable help conditions in rpcwallet.cpp (lutangar)\n+- #12778 `b648974` Add username and ip logging for RPC method requests (GabrielDav)\n+- #12717 `ac898b6` rest: Handle utxo retrieval when ignoring the mempool (romanz)\n+- #12787 `cd99e5b` Adjust ifdef to avoid unreachable code (practicalswift)\n+- #11742 `18815b4` Add testmempoolaccept (MarcoFalke)\n+- #12942 `fefb817` Drop redundant testing of signrawtransaction prevtxs args (Empact)\n+- #11200 `5f2a399` Allow for aborting rescans in the GUI (achow101)\n+- #12791 `3a8a4dc` Expose a transaction's weight via RPC (TheBlueMatt)\n+- #12436 `6e67754` Adds a functional test to validate the transaction version number in the RPC output (251Labs)\n+- #12240 `6f8b345` Introduced a new `fees` structure that aggregates all sub-field fee types denominated in BTC (mryandao)\n+- #12321 `eac067a` p2wsh and p2sh-p2wsh address in decodescript (fivepiece)\n+- #13090 `17266a1` Remove Safe mode (achow101, laanwj)\n+- #12639 `7eb7076` Reduce `cs_main` lock in listunspent (promag)\n+- #10267 `7b966d9` New -includeconf argument for including external configuration files (kallewoof)\n+- #10757 `b9551d3` Introduce getblockstats to plot things (jtimon)\n+- #13288 `a589f53` Remove the need to include rpc/blockchain.cpp in order to put `GetDifficulty` under test (Empact)\n+- #13394 `e1f8dce` cli: Ignore libevent warnings (theuni)\n+- #13439 `3f398d7` Avoid \"duplicate\" return value for invalid submitblock (TheBlueMatt)\n+- #13570 `a247594` Add new \"getzmqnotifications\" method (domob1812)\n+- #13072 `b25a4c2` Update createmultisig RPC to support segwit (ajtowns)\n+- #12196 `8fceae0` Add scantxoutset RPC method (jonasschnelli)\n+- #13557 `b654723` BIP 174 PSBT Serializations and RPCs (achow101)\n+- #13697 `f030410` Support output descriptors in scantxoutset (sipa)\n+- #13927 `bced8ea` Use pushKV in some new PSBT RPCs (domob1812)\n+- #13918 `a9c56b6` Replace median fee rate with feerate percentiles in getblockstats (marcinja)\n+- #13721 `9f23c16` Bugfixes for BIP 174 combining and deserialization (achow101)\n+- #13960 `517010e` Fix PSBT deserialization of 0-input transactions (achow101)\n+\n+### GUI\n+- #12416 `c997f88` Fix Windows build errors introduced in #10498 (practicalswift)\n+- #11733 `e782099` Remove redundant locks (practicalswift)\n+- #12426 `bfa3911` Initialize members in WalletModel (MarcoFalke)\n+- #12489 `e117cfe` Bugfix: respect user defined configuration file (-conf) in QT settings (jonasschnelli)\n+- #12421 `be263fa` navigate to  transaction history page after send (Sjors)\n+- #12580 `ce56fdd` Show a transaction's virtual size in its details dialog (dooglus)\n+- #12501 `c8ea91a` Improved \"custom fee\" explanation in tooltip (randolf)\n+- #12616 `cff95a6` Set modal overlay hide button as default (promag)\n+- #12620 `8a43bdc` Remove TransactionTableModel::TxIDRole (promag)\n+- #12080 `56cc022` Add support to search the address book (promag)\n+- #12621 `2bac3e4` Avoid querying unnecessary model data when filtering transactions (promag)\n+- #12721 `e476826` remove \"new\" button during receive-mode in addressbook (jonasschnelli)\n+- #12723 `310dc61` Qt5: Warning users about invalid-BIP21 URI bitcoin:// (krab)\n+- #12610 `25cf18f` Multiwallet for the GUI (jonasschnelli)\n+- #12779 `f4353da` Remove unused method setupAmountWidget(\u2026) (practicalswift)\n+- #12795 `68484d6` do not truncate .dat extension for wallets in gui (instagibbs)\n+- #12870 `1d54004` make clean removes `src/qt/moc_` files (Sjors)\n+- #13055 `bdda14d` Don't log to console by default (laanwj)\n+- #13141 `57c57df` fixes broken link on readme (marcoagner)\n+- #12928 `ef006d9` Initialize non-static class members that were previously neither initialized where defined nor in constructor (practicalswift)\n+- #13158 `81c533c` Improve sendcoinsdialog readability (marcoagner)\n+- #11491 `40c34a0` Add proxy icon in statusbar (mess110)\n+- #13264 `2a7c53b` Satoshi unit (GreatSock)\n+- #13097 `e545503` Support wallets loaded dynamically (promag)\n+- #13284 `f8be434` fix visual \"overflow\" of amount input (brandonrninefive)\n+- #13275 `a315b79` use `[default wallet]` as name for wallet with no name (jonasschnelli)\n+- #13273 `3fd0c23` Qt/Bugfix: fix handling default wallet with no name (jonasschnelli)\n+- #13341 `25d2df2` Stop translating command line options (laanwj)\n+- #13043 `6e249e4` OptionsDialog: add prune setting (Sjors)\n+- #13506 `6579d80` load wallet in UI after possible init aborts (jonasschnelli)\n+- #13458 `dc53f7f` Drop qt4 support (laanwj)\n+- #13528 `b877c39` Move BitcoinGUI initializers to class, fix initializer order warning (laanwj)\n+- #13536 `baf3a3a` coincontrol: Remove unused qt4 workaround (MarcoFalke)\n+- #13537 `10ffca7` Peer table: Visualize inbound/outbound state for every row (wodry)\n+- #13791 `2c14c1f` Reject dialogs if key escape is pressed (promag)\n+\n+### Build system\n+- #12371 `c9ca4f6` Add gitian PGP key: akx20000 (ghost)\n+- #11966 `f4f4f51` clientversion: Use full commit hash for commit-based version descriptions (luke-jr)\n+- #12417 `ae0fbf0` Upgrade `mac_alias` to 2.0.7 (droark)\n+- #12444 `1f055ef` gitian: Bump descriptors for (0.)17 (theuni)\n+- #12402 `59e032b` expat 2.2.5, ccache 3.4.1, miniupnpc 2.0.20180203 (fanquake)\n+- #12029 `daa84b3` Add a makefile target for Doxygen documentation (Ov3rlo4d)\n+- #12466 `6645eaf` Only use `D_DARWIN_C_SOURCE` when building miniupnpc on darwin (fanquake)\n+- #11986 `765a3eb` zeromq 4.2.3 (fanquake)\n+- #12373 `f13d756` Add build support for profiling (murrayn)\n+- #12631 `a312e20` gitian: Alphabetize signing keys & add kallewoof key (kallewoof)\n+- #12607 `29fad97` Remove ccache (fanquake)\n+- #12625 `c4219ff` biplist 1.0.3 (fanquake)\n+- #12666 `05042d3` configure: UniValue 1.0.4 is required for pushKV(, bool) (luke-jr)\n+- #12678 `6324c68` Fix a few compilation issues with Clang 7 and -Werror (vasild)\n+- #12692 `de6bdfd` Add configure options for various -fsanitize flags (eklitzke)\n+- #12901 `7e23972` Show enabled sanitizers in configure output (practicalswift)\n+- #12899 `3076993` macOS: Prevent Xcode 9.3 build warnings (AkioNak)\n+- #12715 `8fd6243` Add 'make clean' rule (hkjn)\n+- #13133 `a024a18` Remove python2 from configure.ac (ken2812221)\n+- #13005 `cb088b1` Make --enable-debug to pick better options (practicalswift)\n+- #13254 `092b366` Remove improper `qt/moc_*` cleaning glob from the general Makefile (Empact)\n+- #13306 `f5a7733` split warnings out of CXXFLAGS (theuni)\n+- #13385 `7c7508c` Guard against accidental introduction of new Boost dependencies (practicalswift)\n+- #13041 `5779dc4` Add linter checking for accidental introduction of locale dependence (practicalswift)\n+- #13408 `70a03c6` crypto: cleanup sha256 build (theuni)\n+- #13435 `cf7ca60` When build fails due to lib missing, indicate which one (Empact)\n+- #13445 `8eb76f3` Reset default -g -O2 flags when enable debug (ken2812221)\n+- #13465 `81069a7` Avoid concurrency issue when make multiple target (ken2812221)\n+- #13454 `45c00f8` Make sure `LC_ALL=C` is set in all shell scripts (practicalswift)\n+- #13480 `31145a3` Avoid copies in range-for loops and add a warning to detect them (theuni)\n+- #13486 `66e1a08` Move rpc/util.cpp from libbitcoin-util to libbitcoin-server (ken2812221)\n+- #13580 `40334c7` Detect if char equals `int8_t` (ken2812221)\n+- #12788 `287e4ed` Tune wildcards for LIBSECP256K1 target (kallewoof)\n+- #13611 `b55f0c3` bugfix: Use `__cpuid_count` for gnu C to avoid gitian build fail (ken2812221)\n+- #12971 `a6d14b1` Upgrade Qt to 5.9.6 (TheCharlatan)\n+- #13543 `6c6a300` Add RISC-V support (laanwj)\n+- #13177 `dcb154e` GCC-7 and glibc-2.27 back compat code (ken2812221)\n+- #13659 `90b1c7e` add missing leveldb defines (theuni)\n+- #13368 `c0f1569` Update gitian-build.sh for docker (achow101)\n+- #13171 `19d8ca5` Change gitian-descriptors to use bionic instead (ken2812221)\n+- #13604 `75bea05` Add depends 32-bit arm support for bitcoin-qt (TheCharlatan)\n+- #13623 `9cdb19f` Migrate gitian-build.sh to python (ken2812221)\n+- #13689 `8c36432` disable Werror when building zmq (greenaddress)\n+- #13617 `cf7f9ae` release: Require macos 10.10+ (fanquake)\n+- #13750 `c883653` use MacOS friendly sed syntax in qt.mk (Sjors)\n+- #13095 `415f2bf` update `ax_boost_chrono`/`unit_test_framework` (fanquake)\n+- #13732 `e8ffec6` Fix Qt's rcc determinism (Fuzzbawls)\n+- #13782 `8284f1d` Fix osslsigncode compile issue in gitian-build (ken2812221)\n+- #13696 `2ab7208` Add aarch64 qt depends support for cross compiling bitcoin-qt (TheCharlatan)\n+- #13705 `b413ba0` Add format string linter (practicalswift)\n+- #14000 `48c8459` fix qt determinism (theuni)\n+- #14018 `3e4829a` Bugfix: NSIS: Exclude `Makefile*` from docs (luke-jr)\n+- #12906 `048ac83` Avoid `interface` keyword to fix windows gitian build (ryanofsky)\n+- #13314 `a9b6957` Fix FreeBSD build by including utilstrencodings.h (laanwj)\n+\n+### Tests and QA\n+- #12252 `8d57319` Require all tests to follow naming convention (ajtowns)\n+- #12295 `935eb8d` Enable flake8 warnings for all currently non-violated rules (practicalswift)\n+- #11858 `b4d8549` Prepare tests for Windows (MarcoFalke)\n+- #11771 `2dbc4a4` Change invalidtxrequest to use BitcoinTestFramework (jnewbery)\n+- #12200 `d09968f` Bind functional test nodes to 127.0.0.1 (Sjors)\n+- #12425 `26dc2da` Add some script tests (richardkiss)\n+- #12455 `23481fa` Fix bip68 sequence test to reflect updated rpc error message (Empact)\n+- #12477 `acd1e61` Plug memory leaks and stack-use-after-scope (MarcoFalke)\n+- #12443 `07090c5` Move common args to bitcoin.conf (MarcoFalke)\n+- #12570 `39dcac2` Add test cases for HexStr (`std::reverse_iterator` and corner cases) (kostaz)\n+- #12582 `6012f1c` Fix ListCoins test failure due to unset `g_wallet_allow_fallback_fee` (ryanofsky)\n+- #12516 `7f99964` Avoid unintentional unsigned integer wraparounds in tests (practicalswift)\n+- #12512 `955fd23` Don't test against the mempool min fee information in mempool_limit.py (Empact)\n+- #12600 `29088b1` Add a test for large tx output scripts with segwit input (richardkiss)\n+- #12627 `791c3ea` Fix some tests to work on native windows (MarcoFalke)\n+- #12405 `0f58d7f` travis: Full clone for git subtree check (MarcoFalke)\n+- #11772 `0630974` Change invalidblockrequest to use BitcoinTestFramework (jnewbery)\n+- #12681 `1846296` Fix ComputeTimeSmart test failure with `-DDEBUG_LOCKORDER` (ryanofsky)\n+- #12682 `9f04c8e` travis: Clone depth 1 unless `$check_doc` (MarcoFalke)\n+- #12710 `00d1680` Append scripts to new `test_list` array to fix bad assignment (jeffrade)\n+- #12720 `872c921` Avoiding 'file' function name from python2 (jeffrade)\n+- #12728 `4ba3d4f` rename TestNode to TestP2PConn in tests (jnewbery)\n+- #12746 `2405ce1` Remove unused argument `max_invalid` from `check_estimates(\u2026)` (practicalswift)\n+- #12718 `185d484` Require exact match in `assert_start_raises_init_eror` (jnewbery, MarcoFalke)\n+- #12076 `6d36f59` Use node.datadir instead of tmpdir in test framework (MarcoFalke)\n+- #12772 `b43aba8` ci: Bump travis timeout for make check to 50m (jnewbery)\n+- #12806 `18606eb` Fix function names in `feature_blocksdir` (MarcoFalke)\n+- #12811 `0d8fc8d` Make summary row bold-red if any test failed and show failed tests at end of table (laanwj)\n+- #12790 `490644d` Use blockmaxweight where tests previously had blockmaxsize (conscott)\n+- #11773 `f0f9732` Change `feature_block.py` to use BitcoinTestFramework (jnewbery)\n+- #12839 `40f4baf` Remove travis checkout depth (laanwj)\n+- #11817 `2a09a78` Change `feature_csv_activation.py` to use BitcoinTestFramework (jnewbery)\n+- #12284 `fa5825d` Remove assigned but never used local variables. Enable Travis checking for unused local variables (practicalswift)\n+- #12719 `9beded5` Add note about test suite naming convention in developer-notes.md (practicalswift)\n+- #12861 `c564424` Stop `feature_block.py` from blowing up memory (jnewbery)\n+- #12851 `648252e` travis: Run verify-commits only on cron jobs (MarcoFalke)\n+- #12853 `2106c4c` Match full plain text by default (MarcoFalke)\n+- #11818 `9a2db3b` I accidentally (deliberately) killed it (the ComparisonTestFramework) (jnewbery)\n+- #12766 `69310a3` Tidy up REST interface functional tests (romanz)\n+- #12849 `83c7533` Add logging in loops in `p2p_sendhears.py` (ccdle12)\n+- #12895 `d6f10b2` Add note about test suite name uniqueness requirement to developer notes (practicalswift)\n+- #12856 `27278df` Add Metaclass for BitcoinTestFramework (WillAyd)\n+- #12918 `6fc5a05` Assert on correct variable (kallewoof)\n+- #11878 `a04440f` Add Travis check for duplicate includes (practicalswift)\n+- #12917 `cf8073f` Windows fixups for functional tests (MarcoFalke)\n+- #12926 `dd1ca9e` Run unit tests in parallel (sipa)\n+- #12920 `b1fdfc1` Fix sign for expected values (kallewoof)\n+- #12947 `979f598` Wallet hd functional test speedup and clarification (instagibbs)\n+- #12993 `0d69921` Remove compatibility code not needed now when we're on Python 3 (practicalswift)\n+- #12996 `6a278e0` Remove redundant bytes(\u2026) calls (practicalswift)\n+- #12949 `6b46288` Avoid copies of CTransaction (MarcoFalke)\n+- #13007 `0d12570` Fix dangling wallet pointer in vpwallets (promag)\n+- #13048 `cac6d11` Fix `feature_block` flakiness (jnewbery)\n+- #12510 `d5b2e98` Add `rpc_bind` test to default-run tests (laanwj)\n+- #13022 `896a9d0` Attach node index to `test_node` AssertionError and print messages (jamesob)\n+- #13024 `018c7e5` Add rpcauth pair that generated by rpcauth.py (ken2812221)\n+- #13013 `a0079d4` bench: Amend `mempool_eviction` test for witness txs (MarcoFalke)\n+- #13051 `e074097` Normalize executable location (MarcoFalke)\n+- #13056 `106d929` Make rpcauth.py testable and add unit tests (nixbox)\n+- #13073 `a785bc3` add rpcauth-test to `AC_CONFIG_LINKS` to fix out-of-tree make check (laanwj)\n+- #12830 `25ad2f7` Clarify address book error messages, add tests (jamesob)\n+- #13082 `24106a8` don't test against min relay fee information in `mining_prioritisetransaction.py` (kristapsk)\n+- #13003 `8d045a0` Add test for orphan handling (MarcoFalke)\n+- #13105 `9e9b48d` Add --failfast option to functional test runner (jamesob)\n+- #13130 `3186ad4` Fix race in `rpc_deprecated.py` (jnewbery)\n+- #13136 `baf6b4e` Fix flake8 warnings in several wallet functional tests (jnewbery)\n+- #13094 `bf9b03d` Add test for 64-bit Windows PE, modify 32-bit test results (ken2812221)\n+- #13183 `9458b05` travis: New travis job for `check_docs` steps (glaksmono)\n+- #12265 `1834d4d` fundrawtransaction: lock watch-only shared address (kallewoof)\n+- #13188 `4a50ec0` Remove unused option --srcdir (MarcoFalke)\n+- #12755 `612ba35` Better stderr testing (jnewbery)\n+- #13198 `196c5a9` Avoid printing to console during cache creation (sdaftuar)\n+- #13075 `cb9bbf7` Remove 'account' API from wallet functional tests (jnewbery)\n+- #13221 `ffa86af` travis: Rename the build stage `check_doc` to `lint` (practicalswift)\n+- #13205 `3cbd25f` Remove spurious error log in `p2p_segwit.py` (jnewbery)\n+- #13291 `536120e` Don't include torcontrol.cpp into the test file (Empact)\n+- #13281 `2ac6315` Move linters to test/lint, add readme (MarcoFalke)\n+- #13215 `f8a29ca` travis: Build tests on ubuntu 18.04 with docker (ken2812221)\n+- #13349 `24f7011` bench: Don't return a bool from main (laanwj)\n+- #13347 `87a9d03` travis: Skip cache for lint stage (MarcoFalke)\n+- #13355 `0b1c0c4` Fix \"gmake check\" under OpenBSD 6.3 (probably `*BSD`): Avoid using GNU grep specific regexp handling (practicalswift)\n+- #13353 `d4f6dac` Fixup setting of PATH env var (MarcoFalke)\n+- #13352 `e24bf1c` Avoid checking reject code for now (MarcoFalke)\n+- #13383 `2722a1f` bench: Use non-throwing parsedouble(\u2026) instead of throwing boost::lexical_cast<double>(\u2026) (practicalswift)\n+- #13367 `264efdc` Increase includeconf test coverage (MarcoFalke)\n+- #13404 `3d3d8ae` speed up of `tx_validationcache_tests` by reusing of CTransaction (lucash-dev)\n+- #13421 `531a033` Remove `portseed_offset` from test runner (MarcoFalke)\n+- #13440 `5315660` Log as utf-8 (MarcoFalke)\n+- #13066 `fa4b906` Migrate verify-commits script to python, run in travis (ken2812221)\n+- #13447 `4b1edd3` travis: Increase `travis_wait` time while verifying commits (ken2812221)\n+- #13350 `f532d52` Add logging to provide anchor points when debugging p2p_sendheaders (lmanners)\n+- #13406 `4382f19` travis: Change mac goal to all deploy (ken2812221)\n+- #13457 `b222138` Drop variadic macro (MarcoFalke)\n+- #13512 `3a45493` mininode: Expose connection state through `is_connected` (MarcoFalke)\n+- #13496 `9ab4c2a` Harden lint-filenames.sh (wodry)\n+- #13219 `08516e0` bench: Add block assemble benchmark (MarcoFalke)\n+- #13530 `b1dc39d` bench: Add missing pow.h header (laanwj)\n+- #12686 `2643fa5` Add -ftrapv to CFLAGS and CXXFLAGS when --enable-debug is used. Enable -ftrapv in Travis (practicalswift)\n+- #12882 `d96bdd7` Make `test_bitcoin` pass under ThreadSanitzer (clang). Fix lock-order-inversion (potential deadlock) (practicalswift)\n+- #13535 `2328039` `wallet_basic`: Specify minimum required amount for listunspent (MarcoFalke)\n+- #13551 `c93c360` Fix incorrect documentation for test case `cuckoocache_hit_rate_ok` (practicalswift)\n+- #13563 `b330f3f` bench: Simplify coinselection (promag)\n+- #13517 `a6ed99a` Remove need to handle the network thread in tests (MarcoFalke)\n+- #13522 `686e97a` Fix `p2p_sendheaders` race (jnewbery)\n+- #13467 `3dc2dcf` Make `p2p_segwit` easier to debug (jnewbery)\n+- #13598 `0212187` bench: Fix incorrect behaviour in prevector.cpp (AkioNak)\n+- #13565 `b05ded1` Fix AreInputsStandard test to reference the proper scriptPubKey (Empact)\n+- #13145 `d3dae3d` Use common getPath method to create temp directory in tests (winder)\n+- #13645 `2ea7eb6` skip `rpc_zmq` functional test as necessary (jamesob)\n+- #13626 `8f1106d` Fix some TODOs in `p2p_segwit` (MarcoFalke)\n+- #13138 `8803c91` Remove accounts from `wallet_importprunedfunds.py` (jnewbery)\n+- #13663 `cbc9b50` Avoid read/write to default datadir (MarcoFalke)\n+- #13682 `f8a32a3` bench: Remove unused variable (practicalswift)\n+- #13638 `6fcdb5e` Use `MAX_SCRIPT_ELEMENT_SIZE` from script.py (domob1812)\n+- #13687 `9d26b69` travis: Check that ~/.bitcoin is never created (MarcoFalke)\n+- #13715 `e1260a7` fixes mininode's P2PConnection sending messages on closing transport (marcoagner)\n+- #13729 `aa9429a` travis: Avoid unnecessarily setting env variables on the lint build (Empact)\n+- #13747 `ab28b5b` Skip P2PConnection's `is_closing()` check when not available (domob1812)\n+- #13650 `7a9bca6` travis: Don't store debug info if --enable-debug is set (ken2812221)\n+- #13711 `f98d1e0` bench: Add benchmark for unserialize prevector (AkioNak)\n+- #13771 `365384f` travis: Retry to fetch docker image (MarcoFalke)\n+- #13806 `4d550ff` Fix `bench/block_assemble` assert failure (jamesob)\n+- #13779 `d25079a` travis: Improve readability of travis.yml and log outputs (scravy)\n+- #13822 `0fb9c87` bench: Make coinselection output groups pass eligibility filter (achow101)\n+- #13247 `e83d82a` Add tests to SingleThreadedSchedulerClient() and document the memory model (skeees)\n+- #13811 `660abc1` travis: Run `bench_bitcoin` once (MarcoFalke)\n+- #13837 `990e182` Extract `rpc_timewait` as test param (MarcoFalke)\n+- #13851 `9c4324d` fix locale for lint-shell (scravy)\n+- #13823 `489b51b` quote path in authproxy for external multiwallets (MarcoFalke)\n+- #13849 `2b67354` travis: Use only travis jobs: instead of mix of jobs+matrix (scravy)\n+- #13859 `2384323` Add emojis to `test_runner` path and wallet filename (MarcoFalke)\n+- #13916 `8ac7125` `wait_for_verack` by default (MarcoFalke)\n+- #13669 `f66e1c7` Cleanup `create_transaction` implementations (conscott)\n+- #13924 `09ada21` Simplify comparison in `rpc_blockchain.py` (domob1812)\n+- #13913 `a08533c` Remove redundant checkmempool/checkblockindex `extra_args` (MarcoFalke)\n+- #13915 `a04888a` Add test for max number of entries in locator (MarcoFalke)\n+- #13867 `1b04b55` Make extended tests pass on native Windows (MarcoFalke)\n+- #13944 `0df7a6c` Port usage of deprecated optparse module to argparse module (Kvaciral)\n+- #13928 `b8eb0df` blocktools enforce named args for amount (MarcoFalke)\n+- #13054 `bffb35f` Enable automatic detection of undefined names in Python tests scripts. Remove wildcard imports (practicalswift)\n+- #14069 `cf3d7f9` Use assert not `BOOST_CHECK_*` from multithreaded tests (skeees)\n+- #14071 `fab0fbe` Stop txindex thread before calling destructor (MarcoFalke)\n+\n+### Miscellaneous\n+- #11909 `8897135` contrib: Replace developer keys with list of pgp fingerprints (MarcoFalke)\n+- #12394 `fe53d5f` gitian-builder.sh: fix --setup doc, since lxc is default (Sjors)\n+- #12468 `294a766` Add missing newline in init.cpp log message (Aesti)\n+- #12308 `dcfe218` contrib: Add support for out-of-tree builds in gen-manpages.sh (laanwj)\n+- #12451 `aae64a2` Bump leveldb subtree (MarcoFalke)\n+- #12527 `d77b4a7` gitian-build.sh: fix signProg being recognized as two parameters (ken2812221)\n+- #12588 `d74b01d` utils: Remove deprecated pyzmq call from python zmq example (kosciej)\n+- #10271 `bc67982` Use `std::thread::hardware_concurrency`, instead of Boost, to determine available cores (fanquake)\n+- #12097 `14475e2` scripts: Lint-whitespace: use perl instead of grep -p (Sjors)\n+- #12098 `17c44b2` scripts: Lint-whitespace: add param to check last n commits (Sjors)\n+- #11900 `842f61a` script: Simplify checkminimalpush checks, add safety assert (instagibbs)\n+- #12567 `bb98aec` util: Print timestamp strings in logs using iso 8601 formatting (practicalswift)\n+- #12572 `d8d9162` script: Lint-whitespace: find errors more easily (AkioNak)\n+- #10694 `ae5bcc7` Remove redundant code in MutateTxSign(CMutableTransaction&, const std::string&) (practicalswift)\n+- #12659 `3d16f58` Improve Fatal LevelDB Log Messages (eklitzke)\n+- #12643 `0f0229d` util: Remove unused `sync_chain` (MarcoFalke)\n+- #12102 `7fb8fb4` Apply hardening measures in bitcoind systemd service file (Flowdalic)\n+- #12652 `55f490a` bitcoin-cli: Provide a better error message when bitcoind is not running (practicalswift)\n+- #12630 `c290508` Provide useful error message if datadir is not writable (murrayn)\n+- #11881 `624bee9` Remove Python2 support (jnewbery)\n+- #12821 `082e26c` contrib: Remove unused import string (MarcoFalke)\n+- #12829 `252c1b0` Python3 fixup (jnewbery)\n+- #12822 `ff48f62` Revert 7deba93bdc76616011a9f493cbc203d60084416f and fix expired-key-sigs properly (TheBlueMatt)\n+- #12820 `5e53b80` contrib: Fix check-doc script regexes (MarcoFalke)\n+- #12713 `4490871` Track negated options in the option parser (eklitzke)\n+- #12708 `b2e5fe8` Make verify-commits.sh test that merges are clean (sipa)\n+- #12891 `3190785` logging: Add lint-logs.sh to check for newline termination (jnewbery)\n+- #12923 `a7cbe38` util: Pass `pthread_self()` to `pthread_setschedparam` instead of 0 (laanwj)\n+- #12871 `fb17fae` Add shell script linting: Check for shellcheck warnings in shell scripts (practicalswift)\n+- #12970 `5df84de` logging: Bypass timestamp formatting when not logging (theuni)\n+- #12987 `fe8fa22` tests/tools: Enable additional Python flake8 rules for automatic linting via Travis (practicalswift)\n+- #12972 `0782508` Add python3 script shebang lint (ken2812221)\n+- #13004 `58bbc55` Print to console by default when not run with -daemon (practicalswift)\n+- #13039 `8b4081a` Add logging and error handling for file syncing (laanwj)\n+- #13020 `4741ca5` Consistently log CValidationState on call failure (Empact)\n+- #13031 `826acc9` Fix for utiltime to compile with msvc (sipsorcery)\n+- #13119 `81743b5` Remove script to clean up datadirs (MarcoFalke)\n+- #12954 `5a66642` util: Refactor logging code into a global object (jimpo)\n+- #12769 `35eb9d6` Add systemd service to bitcoind in debian package (ghost)\n+- #13146 `0bc980b` rpcauth: Make it possible to provide a custom password (laanwj)\n+- #13148 `b62b437` logging: Fix potential use-after-free in logprintstr(\u2026) (practicalswift)\n+- #13214 `0612d96` Enable Travis checking for two Python linting rules we are currently not violating (practicalswift)\n+- #13197 `6826989` util: Warn about ignored recursive -includeconf calls (kallewoof)\n+- #13176 `d9ebb63` Improve CRollingBloomFilter performance: replace modulus with FastMod (martinus)\n+- #13228 `d792e47` Add script to detect circular dependencies between source modules (sipa)\n+- #13320 `e08c130` Ensure gitian-build.sh uses bash (jhfrontz)\n+- #13301 `e4082d5` lint: Add linter to error on `#include <*.cpp>` (Empact)\n+- #13374 `56f6936` utils and libraries: checking for bitcoin address in translations (kaplanmaxe)\n+- #13230 `7c32b41` Simplify include analysis by enforcing the developer guide's include syntax (practicalswift)\n+- #13450 `32bf4c6` Add linter: Enforce the source code file naming convention described in the developer notes (practicalswift)\n+- #13479 `fa2ea37` contrib: Fix cve-2018-12356 by hardening the regex (loganaden)\n+- #13448 `a90ca40` Add linter: Make sure we explicitly open all text files using UTF-8 encoding in Python (practicalswift)\n+- #13494 `d67eff8` Follow-up to #13454: Fix broken build by exporting `LC_ALL=C` (practicalswift)\n+- #13510 `03f3925` Scripts and tools: Obsolete #!/bin/bash shebang (DesWurstes)\n+- #13577 `c9eb8d1` logging: Avoid nstart may be used uninitialized in appinitmain warning (mruddy)\n+- #13603 `453ae5e` bitcoin-tx: Stricter check for valid integers (domob1812)\n+- #13118 `c05c93c` RPCAuth Detection in Logs (Linrono)\n+- #13647 `4027ec1` Scripts and tools: Fix `BIND_NOW` check in security-check.py (conradoplg)\n+- #13692 `f5d166a` contrib: Clone core repo in gitian-build (MarcoFalke)\n+- #13699 `4c6d1b9` contrib: Correct version check (kallewoof)\n+- #13695 `dcc0cff` lint: Add linter for circular dependencies (Empact)\n+- #13733 `0d1ebf4` utils: Refactor argsmanager a little (AtsukiTak)\n+- #13714 `29b4ee6` contrib: Add lxc network setup for bionic host (ken2812221)\n+- #13764 `f8685f4` contrib: Fix test-security-check fail in ubuntu 18.04 (ken2812221)\n+- #13809 `77168f7` contrib: Remove debian and rpm subfolder (MarcoFalke)\n+- #13799 `230652c` Ignore unknown config file options; warn instead of error (sipa)\n+- #13894 `df9f712` shutdown: Stop threads before resetting ptrs (MarcoFalke)\n+- #13925 `71dec5c` Merge leveldb subtree (MarcoFalke)\n+- #13939 `ef86f26` lint: Make format string linter understand basic template parameter syntax (practicalswift)\n+- #14105 `eb202ea` util: Report parse errors in configuration file (laanwj)\n+- #12604 `9903537` Add DynamicMemoryUsage() to CDBWrapper to estimate LevelDB memory use (eklitzke)\n+- #12495 `047865e` Increase LevelDB `max_open_files` (eklitzke)\n+- #12784 `e80716d` Fix bug in memory usage calculation (unintended integer division) (practicalswift)\n+- #12618 `becd8dd` Set `SCHED_BATCH` priority on the loadblk thread (eklitzke)\n+- #12854 `5ca1509` Add P2P, Network, and Qt categories to the desktop icon (luke-jr)\n+- #11862 `4366f61` Network specific conf sections (ajtowns)\n+- #13441 `4a7e64f` Prevent shared conf files from failing with different available options in different binaries (achow101)\n+- #13471 `5eca4e8` For AVX2 code, also check for AVX, XSAVE, and OS support (sipa)\n+- #13503 `c655b2c` Document FreeBSD quirk. Fix FreeBSD build: Use std::min<int>(\u2026) to allow for compilation under certain FreeBSD versions (practicalswift)\n+- #13725 `07ce278` Fix bitcoin-cli --version (Empact)\n+\n+### Documentation\n+- #12306 `216f9a4` Improvements to UNIX documentation (axvr)\n+- #12309 `895fbd7` Explain how to update chainTxData in release process (laanwj)\n+- #12317 `85123be` Document method for reviewers to verify chainTxData (jnewbery)\n+- #12331 `d32528e` Properly alphabetize output of CLI --help option (murrayn)\n+- #12322 `c345148` Remove step making cloned repository world-writable for Windows build (murrayn)\n+- #12354 `b264528` add gpg key for fivepiece (fivepiece)\n+- #11761 `89005dd` initial QT documentation (Sjors)\n+- #12232 `fdc2188` Improve \"Turn Windows Features On or Off\" step (MCFX2)\n+- #12487 `4528f74` init: Remove translation for `-blockmaxsize` option help (laanwj)\n+- #12546 `a4a5fc7` Minor improvements to Compatibility Notes (randolf)\n+- #12434 `21e2670` dev-notes: Members should be initialized (MarcoFalke)\n+- #12452 `71f56da` clarified systemd installation instructions in init.md for Ubuntu users (DaveFromBinary)\n+- #12615 `1f93491` allow for SIGNER containing spaces (ken2812221)\n+- #12603 `85424d7` PeerLogicValidation interface (jamesob)\n+- #12581 `12ac2f0` Mention configure without wallet in FreeBSD instructions (dbolser)\n+- #12619 `8a709fb` Give hint about gitian not able to download (kallewoof)\n+- #12668 `de2fcaa` do update before fetching packages in WSL build guide (nvercamm)\n+- #12586 `e7721e6` Update osx brew install instruction (fanquake)\n+- #12760 `7466a26` Improve documentation on standard communication channels (jimpo)\n+- #12797 `0415b1e` init: Fix help message for checkblockindex (MarcoFalke)\n+- #12800 `2d97611` Add note about our preference for scoped enumerations (\"enum class\") (practicalswift)\n+- #12798 `174d016` Refer to witness reserved value as spec. in the BIP (MarcoFalke)\n+- #12759 `d3908e2` Improve formatting of developer notes (eklitzke)\n+- #12877 `2b54155` Use bitcoind in Tor documentation (knoxcard)\n+- #12896 `b15485e` Fix conflicting statements about initialization in developer notes (practicalswift)\n+- #12850 `319991d` add qrencode to brew install instructions (buddilla)\n+- #12007 `cd8e45b` Clarify the meaning of fee delta not being a fee rate in prioritisetransaction RPC (honzik666)\n+- #12927 `06ead15` fixed link, replaced QT with Qt (trulex)\n+- #12852 `ebd786b` devtools: Setup ots git integration (MarcoFalke)\n+- #12933 `3cf76c2` Refine header include policy (MarcoFalke)\n+- #12951 `6df0c6c` Fix comment in FindForkInGlobalIndex (jamesob)\n+- #12982 `a63b4e3` Fix inconsistent namespace formatting guidelines (ryanofsky)\n+- #13026 `9b3a67e` Fix include comment in src/interfaces/wallet.h (promag)\n+- #13012 `d1e3c5e` Add comments for chainparams.h, validation.cpp (jamesob)\n+- #13064 `569e381` List support for BIP173 in bips.md (sipa)\n+- #12997 `646b7f6` build-windows: Switch to Artful, since Zesty is EOL (MarcoFalke)\n+- #12384 `c5f7efe` Add version footnote to tor.md (Willtech)\n+- #13165 `627c376` Mention good first issue list in CONTRIBUTING.md (fanquake)\n+- #13295 `fb77310` Update OpenBSD build instructions for OpenBSD 6.3 (practicalswift)\n+- #13340 `3a8e3f4` remove leftover check-doc documentation (fanquake)\n+- #13346 `60f0358` update bitcoin-dot-org links in release-process.md (fanquake)\n+- #13372 `f014933` split FreeBSD build instructions out of build-unix.md (steverusso)\n+- #13366 `861de3b` Rename \u201cOS X\u201d to the newer \u201cmacOS\u201d convention (giulio92)\n+- #13369 `f8bcef3` update transifex doc link (mess110)\n+- #13312 `b22115d` Add a note about the source code filename naming convention (practicalswift)\n+- #13460 `1939536` Remove note to install all boost dev packages (MarcoFalke)\n+- #13476 `9501938` Fix incorrect shell quoting in FreeBSD build instructions (murrayn)\n+- #13402 `43fa355` Document validationinterace callback blocking deadlock potential (TheBlueMatt)\n+- #13488 `d6cf4bd` Improve readability of \"Squashing commits\" (wodry)\n+- #13531 `ee02deb` Clarify that mempool txiter is `const_iterator` (MarcoFalke)\n+- #13418 `01f9098` More precise explanation of parameter onlynet (wodry)\n+- #13592 `1756cb4` Modify policy to not translate command-line help (ken2812221)\n+- #13588 `b77c38e` Improve doc of options addnode, connect, seednode (wodry)\n+- #13614 `17e9106` Update command line help for -printtoconsole and -debuglogfile (satwo, fanquake)\n+- #13605 `8cc048e` corrected text to reflect new(er) process of specifying fingerprints (jhfrontz)\n+- #13481 `b641f60` Rewrite some validation docs as lock annotations (MarcoFalke)\n+- #13680 `30640f8` Remove outdated comment about miner ignoring CPFP (jamesob)\n+- #13625 `7146672` Add release notes for -printtoconsole and -debuglogfile changes (satwo)\n+- #13718 `f7f574d` Specify preferred Python string formatting technique (masonicboom)\n+- #12764 `10b9a81` Remove field in getblocktemplate help that has never been used (conscott)\n+- #13742 `d2186b3` Adjust bitcoincore.org links (MarcoFalke)\n+- #13706 `94dd89e` Minor improvements to release-process.md (MitchellCash)\n+- #13775 `ef4fac0` Remove newlines from error message (practicalswift)\n+- #13803 `feb7dd9` add note to contributor docs about warranted PR's (kallewoof)\n+- #13814 `67af7ef` Add BIP174 to list of implemented BIPs (sipa)\n+- #13835 `c1cba35` Fix memory consistency model in comment (skeees)\n+- #13824 `aa30e4b` Remove outdated net comment (MarcoFalke)\n+- #13853 `317477a` correct versions in dependencies.md (fanquake)\n+- #13872 `37ab117` Reformat -help output for help2man (real-or-random)\n+- #13717 `8c3c402` Link to python style guidelines from developer notes (masonicboom)\n+- #13895 `1cd5f2c` fix GetWarnings docs to reflect behavior (Empact)\n+- #13911 `3e3a50a` Revert translated string change, clarify wallet log messages (PierreRochard)\n+- #13908 `d6faea4` upgrade rescan time warning from minutes to >1 hour (masonicboom)\n+- #13905 `73a09b4` fixed bitcoin-cli -help output for help2man (hebasto)\n+- #14100 `2936dbc` Change documentation for =0 for non-boolean options (laanwj)\n+- #14096 `465a583` Add reference documentation for descriptors language (sipa)\n+- #12757 `0c5f67b` Clarify include guard naming convention (practicalswift)\n+- #13844 `d3325b0` Correct the help output for `-prune` (hebasto)\n+\n Credits\n =======\n \n Thanks to everyone who directly contributed to this release:\n \n-\n-As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/).\n+- 251\n+- 532479301\n+- Aaron Clauson\n+- Akio Nakamura\n+- Akira Takizawa\n+- Alex Morcos\n+- Alex Vear\n+- Alexey Ivanov\n+- Alin Rus\n+- Andrea Comand\n+- Andrew Chow\n+- Anthony Towns\n+- AtsukiTak\n+- Ben Woosley\n+- Bernhard M. Wiedemann\n+- Brandon Ruggles\n+- buddilla\n+- ccdle12\n+- Chris Moore\n+- Chun Kuan Lee\n+- Clem Taylor\n+- Conor Scott\n+- Conrado Gouvea\n+- Cory Fields\n+- Cristian Mircea Messel\n+- ctp-tsteenholdt\n+- Damian Williamson\n+- Dan Bolser\n+- Daniel Kraft\n+- Darko Jankovi\u0107\n+- DaveFromBinary\n+- David A. Harding\n+- DesWurstes\n+- Dimitris Apostolou\n+- donaloconnor\n+- Douglas Roark\n+- DrahtBot\n+- Drew Rasmussen\n+- e0\n+- Ernest Hemingway\n+- Ethan Heilman\n+- Evan Klitzke\n+- fanquake\n+- Felix Wolfsteller\n+- fivepiece\n+- Florian Schmaus\n+- Fuzzbawls\n+- Gabriel Davidian\n+- Giulio Lombardo\n+- Gleb\n+- Grady Laksmono\n+- GreatSock\n+- Gregory Maxwell\n+- Gregory Sanders\n+- Hennadii Stepanov\n+- Henrik Jonsson\n+- Indospace.io\n+- James O'Beirne\n+- Jan \u010capek\n+- Jeff Frontz\n+- Jeff Rade\n+- Jeremy Rubin\n+- JeremyRand\n+- Jesse Cohen\n+- Jim Posen\n+- joemphilips\n+- John Bampton\n+- John Newbery\n+- johnlow95\n+- Johnson Lau\n+- Jonas Nick\n+- Jonas Schnelli\n+- Jo\u00e3o Barbosa\n+- Jorge Tim\u00f3n\n+- Josh Hartshorn\n+- Julian Fleischer\n+- kallewoof\n+- Karel Bilek\n+- Karl-Johan Alm\n+- Ken Lee\n+- Kevin Pan\n+- Kosta Zertsekel\n+- Kristaps Kaupe\n+- Kvaciral\n+- Lawrence Nahum\n+- Linrono\n+- lmanners\n+- Loganaden Velvindron\n+- Lowell Manners\n+- lucash.dev@gmail.com\n+- Luke Dashjr\n+- lutangar\n+- Marcin Jachymiak\n+- marcoagner\n+- MarcoFalke\n+- Mark Erhardt\n+- Mark Friedenbach\n+- Martin Ankerl\n+- Mason Simon\n+- Matt Corallo\n+- Matteo Sumberaz\n+- Max Kaplan\n+- MeshCollider\n+- Micha\u0142 Zabielski\n+- Mitchell Cash\n+- mruddy\n+- mryandao\n+- murrayn\n+- Nick Vercammen\n+- Nicolas Dorier\n+- Nikolay Mitev\n+- okayplanet\n+- Pierre Rochard\n+- Pieter Wuille\n+- practicalswift\n+- Qasim Javed\n+- Randolf Richardson\n+- Richard Kiss\n+- Roman Zeyde\n+- Russell Yanofsky\n+- Samuel B. Atwood\n+- Sebastian Kung\n+- Sjors Provoost\n+- Steve Lee\n+- steverusso\n+- Suhas Daftuar\n+- Tamas Blummer\n+- TheCharlatan\n+- Thomas Kerin\n+- Thomas Snider\n+- Tim Ruffing\n+- Varunram\n+- Vasil Dimov\n+- Will Ayd\n+- William Robinson\n+- winder\n+- Wladimir J. van der Laan\n+- wodry\n+\n+And to those that reported security issues:\n+\n+- awemany (for CVE-2018-17144, previously credited as \"anonymous reporter\")\n+\n+As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/).\n\\ No newline at end of file"
      }
    ]
  },
  {
    "sha": "5b47b8efd48d233a5f7c12d1d7713dcd2f616255",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YjQ3YjhlZmQ0OGQyMzNhNWY3YzEyZDFkNzcxM2RjZDJmNjE2MjU1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-10-03T11:02:26Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-10-03T11:02:51Z"
      },
      "message": "doc: Clean out release notes after release 0.17.0\n\nTree-SHA512: 0b641fdf4cf4ac6a6f9f5c1b45d65c4449b0d7bb777ba57498e389840ba7a37bfc0569ce5e70f0ac998785fc4eea600ecf6f7c7d83d86513997f4033bcc14a5d",
      "tree": {
        "sha": "420a5548fdbc6dcea529341f03fd04e1e0e1529d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/420a5548fdbc6dcea529341f03fd04e1e0e1529d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5b47b8efd48d233a5f7c12d1d7713dcd2f616255",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlu0odsACgkQHkrtYphs\n0l2Gwgf+OUiRTqAskg4tUeA0cuhF+A8Ja6TjmVwKg2MY+c01FafI1oOYy5bGIm1C\nnfh6fY/ku8oFS8N2zwBku4gYebJs0m4KoWh5M250RWITFJPuF34x4eJqFMnaUF1Y\nTezTjZ9w774Wovy87CYGl8Q9X0XbGANwyv9vSuaRMp36Wc7SHM3XoXIvmKIzBxXJ\nMKpwWuRgJPraoxyBfQnqkd/I3Z8T/KEznrhbONS/wKONmApEsb21a/QcYUOY73gA\nLxzmhgM7PPNTAj7PqESun14QkBmcUIq9rsblsZ8XEVaDWCslDbeJUiEd4f1vXd22\nDX51Vzu8VSn0p6/SjVJ5zM08+P3KtA==\n=Queq\n-----END PGP SIGNATURE-----",
        "payload": "tree 420a5548fdbc6dcea529341f03fd04e1e0e1529d\nparent e1ed37edaedc85b8c3468bd9a726046344036243\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1538564546 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1538564571 +0200\n\ndoc: Clean out release notes after release 0.17.0\n\nTree-SHA512: 0b641fdf4cf4ac6a6f9f5c1b45d65c4449b0d7bb777ba57498e389840ba7a37bfc0569ce5e70f0ac998785fc4eea600ecf6f7c7d83d86513997f4033bcc14a5d\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b47b8efd48d233a5f7c12d1d7713dcd2f616255",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5b47b8efd48d233a5f7c12d1d7713dcd2f616255",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b47b8efd48d233a5f7c12d1d7713dcd2f616255/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e1ed37edaedc85b8c3468bd9a726046344036243",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1ed37edaedc85b8c3468bd9a726046344036243",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e1ed37edaedc85b8c3468bd9a726046344036243"
      }
    ],
    "stats": {
      "total": 1039,
      "additions": 9,
      "deletions": 1030
    },
    "files": [
      {
        "sha": "7f4ece80ade5eb548364150df72c810ee959e251",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 9,
        "deletions": 1030,
        "changes": 1039,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b47b8efd48d233a5f7c12d1d7713dcd2f616255/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b47b8efd48d233a5f7c12d1d7713dcd2f616255/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=5b47b8efd48d233a5f7c12d1d7713dcd2f616255",
        "patch": "@@ -1,9 +1,9 @@\n (note: this is a temporary file, to be added-to by anybody, and moved to\n release-notes at release time)\n \n-Bitcoin Core version 0.17.0 is now available from:\n+Bitcoin Core version 0.17.x is now available from:\n \n-  <https://bitcoincore.org/bin/bitcoin-core-0.17.0/>\n+  <https://bitcoincore.org/bin/bitcoin-core-0.17.x/>\n \n This is a new major version release, including new features, various bugfixes\n and performance improvements, as well as updated translations.\n@@ -61,1048 +61,27 @@ support versions of macOS older than 10.10.\n Known issues\n ============\n \n-- Upgrading from 0.13.0 or older currently results in memory blow-up during the roll-back of blocks to the SegWit activation point. In these cases, a full `-reindex` is necessary.\n-\n-- The GUI suffers from visual glitches in the new MacOS dark mode. This has to do with our Qt theme handling and is not a new problem in 0.17.0, but is expected to be resolved in 0.17.1.\n+...\n \n Notable changes\n ===============\n \n-Changed configuration options\n------------------------------\n-\n-- `-includeconf=<file>` can be used to include additional configuration files.\n-  Only works inside the `bitcoin.conf` file, not inside included files or from\n-  command-line. Multiple files may be included. Can be disabled from command-\n-  line via `-noincludeconf`. Note that multi-argument commands like\n-  `-includeconf` will override preceding `-noincludeconf`, i.e.\n-  ```\n-  noincludeconf=1\n-  includeconf=relative.conf\n-  ```\n-\n-  as bitcoin.conf will still include `relative.conf`.\n-\n-GUI changes\n------------\n-\n-- Block storage can be limited under Preferences, in the Main tab. Undoing this setting requires downloading the full blockchain again. This mode is incompatible with -txindex and -rescan.\n-\n-External wallet files\n----------------------\n-\n-The `-wallet=<path>` option now accepts full paths instead of requiring wallets\n-to be located in the -walletdir directory.\n-\n-Newly created wallet format\n----------------------------\n-\n-If `-wallet=<path>` is specified with a path that does not exist, it will now\n-create a wallet directory at the specified location (containing a wallet.dat\n-data file, a db.log file, and database/log.?????????? files) instead of just\n-creating a data file at the path and storing log files in the parent\n-directory. This should make backing up wallets more straightforward than\n-before because the specified wallet path can just be directly archived without\n-having to look in the parent directory for transaction log files.\n-\n-For backwards compatibility, wallet paths that are names of existing data files\n-in the `-walletdir` directory will continue to be accepted and interpreted the\n-same as before.\n-\n-Dynamic loading and creation of wallets\n----------------------------------------\n-\n-Previously, wallets could only be loaded or created at startup, by specifying `-wallet` parameters on the command line or in the bitcoin.conf file. It is now possible to load, create and unload wallets dynamically at runtime:\n-\n-- Existing wallets can be loaded by calling the `loadwallet` RPC. The wallet can be specified as file/directory basename (which must be located in the `walletdir` directory), or as an absolute path to a file/directory.\n-- New wallets can be created (and loaded) by calling the `createwallet` RPC. The provided name must not match a wallet file in the `walletdir` directory or the name of a wallet that is currently loaded.\n-- Loaded wallets can be unloaded by calling the `unloadwallet` RPC.\n-\n-This feature is currently only available through the RPC interface.\n-\n-Coin selection\n---------------\n-\n-### Partial spend avoidance\n-\n-When an address is paid multiple times the coins from those separate payments can be spent separately which hurts privacy due to linking otherwise separate addresses. A new `-avoidpartialspends` flag has been added (default=false). If enabled, the wallet will always spend existing UTXO to the same address together even if it results in higher fees. If someone were to send coins to an address after it was used, those coins will still be included in future coin selections.\n-\n-Configuration sections for testnet and regtest\n-----------------------------------------------\n-\n-It is now possible for a single configuration file to set different\n-options for different networks. This is done by using sections or by\n-prefixing the option with the network, such as:\n-\n-    main.uacomment=bitcoin\n-    test.uacomment=bitcoin-testnet\n-    regtest.uacomment=regtest\n-    [main]\n-    mempoolsize=300\n-    [test]\n-    mempoolsize=100\n-    [regtest]\n-    mempoolsize=20\n-\n-If the following options are not in a section, they will only apply to mainnet:\n-`addnode=`, `connect=`, `port=`, `bind=`, `rpcport=`, `rpcbind=` and `wallet=`.\n-The options to choose a network (`regtest=` and `testnet=`) must be specified\n-outside of sections.\n-\n-'label' and 'account' APIs for wallet\n--------------------------------------\n-\n-A new 'label' API has been introduced for the wallet. This is intended as a\n-replacement for the deprecated 'account' API. The 'account' can continue to\n-be used in V0.17 by starting bitcoind with the '-deprecatedrpc=accounts'\n-argument, and will be fully removed in V0.18.\n-\n-The label RPC methods mirror the account functionality, with the following functional differences:\n-\n-- Labels can be set on any address, not just receiving addresses. This functionality was previously only available through the GUI.\n-- Labels can be deleted by reassigning all addresses using the `setlabel` RPC method.\n-- There isn't support for sending transactions _from_ a label, or for determining which label a transaction was sent from.\n-- Labels do not have a balance.\n-\n-Here are the changes to RPC methods:\n-\n-| Deprecated Method       | New Method            | Notes       |\n-| :---------------------- | :-------------------- | :-----------|\n-| `getaccount`            | `getaddressinfo`      | `getaddressinfo` returns a json object with address information instead of just the name of the account as a string. |\n-| `getaccountaddress`     | n/a                   | There is no replacement for `getaccountaddress` since labels do not have an associated receive address. |\n-| `getaddressesbyaccount` | `getaddressesbylabel` | `getaddressesbylabel` returns a json object with the addresses as keys, instead of a list of strings. |\n-| `getreceivedbyaccount`  | `getreceivedbylabel`  | _no change in behavior_ |\n-| `listaccounts`          | `listlabels`          | `listlabels` does not return a balance or accept `minconf` and `watchonly` arguments. |\n-| `listreceivedbyaccount` | `listreceivedbylabel` | Both methods return new `label` fields, along with `account` fields for backward compatibility. |\n-| `move`                  | n/a                   | _no replacement_ |\n-| `sendfrom`              | n/a                   | _no replacement_ |\n-| `setaccount`            | `setlabel`            | Both methods now: <ul><li>allow assigning labels to any address, instead of raising an error if the address is not receiving address.<li>delete the previous label associated with an address when the final address using that label is reassigned to a different label, instead of making an implicit `getaccountaddress` call to ensure the previous label still has a receiving address. |\n-\n-| Changed Method         | Notes   |\n-| :--------------------- | :------ |\n-| `addmultisigaddress`   | Renamed `account` named parameter to `label`. Still accepts `account` for backward compatibility if running with '-deprecatedrpc=accounts'. |\n-| `getnewaddress`        | Renamed `account` named parameter to `label`. Still accepts `account` for backward compatibility. if running with '-deprecatedrpc=accounts' |\n-| `listunspent`          | Returns new `label` fields. `account` field will be returned for backward compatibility if running with '-deprecatedrpc=accounts' |\n-| `sendmany`             | The `account` named parameter has been renamed to `dummy`. If provided, the `dummy` parameter must be set to the empty string, unless running with the `-deprecatedrpc=accounts` argument (in which case functionality is unchanged). |\n-| `listtransactions`     | The `account` named parameter has been renamed to `dummy`. If provided, the `dummy` parameter must be set to the string `*`, unless running with the `-deprecatedrpc=accounts` argument (in which case functionality is unchanged). |\n-| `getbalance`           | `account`, `minconf` and `include_watchonly` parameters are deprecated, and can only be used if running with '-deprecatedrpc=accounts' |\n-\n-BIP 174 Partially Signed Bitcoin Transactions support\n------------------------------------------------------\n-\n-[BIP 174 PSBT](https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki) is an interchange format for Bitcoin transactions that are not fully signed\n-yet, together with relevant metadata to help entities work towards signing it.\n-It is intended to simplify workflows where multiple parties need to cooperate to\n-produce a transaction. Examples include hardware wallets, multisig setups, and\n-[CoinJoin](https://bitcointalk.org/?topic=279249) transactions.\n-\n-### Overall workflow\n-\n-Overall, the construction of a fully signed Bitcoin transaction goes through the\n-following steps:\n-\n-- A **Creator** proposes a particular transaction to be created. He constructs\n-  a PSBT that contains certain inputs and outputs, but no additional metadata.\n-- For each input, an **Updater** adds information about the UTXOs being spent by\n-  the transaction to the PSBT.\n-- A potentially other Updater adds information about the scripts and public keys\n-  involved in each of the inputs (and possibly outputs) of the PSBT.\n-- **Signers** inspect the transaction and its metadata to decide whether they\n-  agree with the transaction. They can use amount information from the UTXOs\n-  to assess the values and fees involved. If they agree, they produce a\n-  partial signature for the inputs for which they have relevant key(s).\n-- A **Finalizer** is run for each input to convert the partial signatures and\n-  possibly script information into a final `scriptSig` and/or `scriptWitness`.\n-- An **Extractor** produces a valid Bitcoin transaction (in network format)\n-  from a PSBT for which all inputs are finalized.\n-\n-Generally, each of the above (excluding Creator and Extractor) will simply\n-add more and more data to a particular PSBT. In a naive workflow, they all have\n-to operate sequentially, passing the PSBT from one to the next, until the\n-Extractor can convert it to a real transaction. In order to permit parallel\n-operation, **Combiners** can be employed which merge metadata from different\n-PSBTs for the same unsigned transaction.\n-\n-The names above in bold are the names of the roles defined in BIP174. They're\n-useful in understanding the underlying steps, but in practice, software and\n-hardware implementations will typically implement multiple roles simultaneously.\n+...\n \n-### RPCs\n-\n-- **`converttopsbt` (Creator)** is a utility RPC that converts an\n-  unsigned raw transaction to PSBT format. It ignores existing signatures.\n-- **`createpsbt` (Creator)** is a utility RPC that takes a list of inputs and\n-  outputs and converts them to a PSBT with no additional information. It is\n-  equivalent to calling `createrawtransaction` followed by `converttopsbt`.\n-- **`walletcreatefundedpsbt` (Creator, Updater)** is a wallet RPC that creates a\n-  PSBT with the specified inputs and outputs, adds additional inputs and change\n-  to it to balance it out, and adds relevant metadata. In particular, for inputs\n-  that the wallet knows about (counting towards its normal or watch-only\n-  balance), UTXO information will be added. For outputs and inputs with UTXO\n-  information present, key and script information will be added which the wallet\n-  knows about. It is equivalent to running `createrawtransaction`, followed by\n-  `fundrawtransaction`, and `converttopsbt`.\n-- **`walletprocesspsbt` (Updater, Signer, Finalizer)** is a wallet RPC that takes as\n-  input a PSBT, adds UTXO, key, and script data to inputs and outputs that miss\n-  it, and optionally signs inputs. Where possible it also finalizes the partial\n-  signatures.\n-- **`finalizepsbt` (Finalizer, Extractor)** is a utility RPC that finalizes any\n-  partial signatures, and if all inputs are finalized, converts the result to a\n-  fully signed transaction which can be broadcast with `sendrawtransaction`.\n-- **`combinepsbt` (Combiner)** is a utility RPC that implements a Combiner. It\n-  can be used at any point in the workflow to merge information added to\n-  different versions of the same PSBT. In particular it is useful to combine the\n-  output of multiple Updaters or Signers.\n-- **`decodepsbt`** is a diagnostic utility RPC which will show all information in\n-  a PSBT in human-readable form, as well as compute its eventual fee if known.\n-\n-Upgrading non-HD wallets to HD wallets\n---------------------------------------\n-\n-Since Bitcoin Core 0.13.0, creating new BIP 32 Hierarchical Deterministic wallets has been supported by Bitcoin Core but old non-HD wallets could not be upgraded to HD. Now non-HD wallets can be upgraded to HD using the `-upgradewallet` command line option. This upgrade will result in the all keys in the keypool being marked as used and a new keypool generated. **A new backup must be made when this upgrade is performed.**\n-\n-Additionally, `-upgradewallet` can be used to upgraded from a non-split HD chain (all keys generated with `m/0'/0'/i'`) to a split HD chain (receiving keys generated with `'m/0'/0'/i'` and change keys generated with `m'/0'/1'/i'`). When this upgrade occurs, all keys already in the keypool will remain in the keypool to be used until all keys from before the upgrade are exhausted. This is to avoid issues with backups and downgrades when some keys may come from the change key keypool. Users can begin using the new split HD chain keypools by using the `newkeypool` RPC to mark all keys in the keypool as used and begin using a new keypool generated from the split HD chain.\n-\n-HD Master key rotation\n-----------------------\n-\n-A new RPC, `sethdseed`, has been introduced which allows users to set a new HD seed or set their own HD seed. This allows for a new HD seed to be used. **A new backup must be made when a new HD seed is set.**\n-\n-Low-level RPC changes\n----------------------\n-\n-- The new RPC `scantxoutset` can be used to scan the UTXO set for entries\n-  that match certain output descriptors. Refer to the [output descriptors\n-  reference documentation](doc/descriptors.md) for more details. This call\n-  is similar to `listunspent` but does not use a wallet, meaning that the\n-  wallet can be disabled at compile or run time. This call is experimental,\n-  as such, is subject to changes or removal in future releases.\n-\n-- The `createrawtransaction` RPC will now accept an array or dictionary (kept for compatibility) for the `outputs` parameter. This means the order of transaction outputs can be specified by the client.\n-- The `fundrawtransaction` RPC will reject the previously deprecated `reserveChangeKey` option.\n-- `sendmany` now shuffles outputs to improve privacy, so any previously expected behavior with regards to output ordering can no longer be relied upon.\n-- The new RPC `testmempoolaccept` can be used to test acceptance of a transaction to the mempool without adding it.\n-- JSON transaction decomposition now includes a `weight` field which provides\n-  the transaction's exact weight. This is included in REST /rest/tx/ and\n-  /rest/block/ endpoints when in json mode. This is also included in `getblock`\n-  (with verbosity=2), `listsinceblock`, `listtransactions`, and\n-  `getrawtransaction` RPC commands.\n-- New `fees` field introduced in `getrawmempool`, `getmempoolancestors`, `getmempooldescendants` and\n-   `getmempoolentry` when verbosity is set to `true` with sub-fields `ancestor`, `base`, `modified`\n-   and `descendant` denominated in BTC. This new field deprecates previous fee fields, such as\n-   `fee`, `modifiedfee`, `ancestorfee` and `descendantfee`.\n-- The new RPC `getzmqnotifications` returns information about active ZMQ\n-  notifications.\n-- When bitcoin is not started with any `-wallet=<path>` options, the name of\n-  the default wallet returned by `getwalletinfo` and `listwallets` RPCs is\n-  now the empty string `\"\"` instead of `\"wallet.dat\"`. If bitcoin is started\n-  with any `-wallet=<path>` options, there is no change in behavior, and the\n-  name of any wallet is just its `<path>` string.\n-- Passing an empty string (`\"\"`) as the `address_type` parameter to\n-  `getnewaddress`, `getrawchangeaddress`, `addmultisigaddress`,\n-  `fundrawtransaction` RPCs is now an error. Previously, this would fall back\n-  to using the default address type. It is still possible to pass null or leave\n-  the parameter unset to use the default address type.\n-\n-- Bare multisig outputs to our keys are no longer automatically treated as\n-  incoming payments. As this feature was only available for multisig outputs for\n-  which you had all private keys in your wallet, there was generally no use for\n-  them compared to single-key schemes. Furthermore, no address format for such\n-  outputs is defined, and wallet software can't easily send to it. These outputs\n-  will no longer show up in `listtransactions`, `listunspent`, or contribute to\n-  your balance, unless they are explicitly watched (using `importaddress` or\n-  `importmulti` with hex script argument). `signrawtransaction*` also still\n-  works for them.\n-\n-- The `getwalletinfo` RPC method now returns an `hdseedid` value, which is always the same as the incorrectly-named `hdmasterkeyid` value. `hdmasterkeyid` will be removed in V0.18.\n-- The `getaddressinfo` RPC method now returns an `hdseedid` value, which is always the same as the incorrectly-named `hdmasterkeyid` value. `hdmasterkeyid` will be removed in V0.18.\n-\n-- Parts of the `validateaddress` RPC method have been deprecated and moved to\n-  `getaddressinfo`. Clients must transition to using `getaddressinfo` to access\n-  this information before upgrading to v0.18. The following deprecated fields\n-  have moved to `getaddressinfo` and will only be shown with\n-  `-deprecatedrpc=validateaddress`: `ismine`, `iswatchonly`, `script`, `hex`,\n-  `pubkeys`, `sigsrequired`, `pubkey`, `addresses`, `embedded`, `iscompressed`,\n-  `account`, `timestamp`, `hdkeypath`, `hdmasterkeyid`.\n-- `signrawtransaction` is deprecated and will be fully removed in v0.18. To use\n-  `signrawtransaction` in v0.17, restart bitcoind with\n-  `-deprecatedrpc=signrawtransaction`. Projects should transition to using\n-  `signrawtransactionwithkey` and `signrawtransactionwithwallet` before\n-  upgrading to v0.18.\n-\n-Other API changes\n------------------\n-\n-- The `inactivehdmaster` property in the `dumpwallet` output has been corrected to `inactivehdseed`\n-\n-### Logging\n-\n-- The log timestamp format is now ISO 8601 (e.g. \"2018-02-28T12:34:56Z\").\n-\n-- When running bitcoind with `-debug` but without `-daemon`, logging to stdout\n-  is now the default behavior. Setting `-printtoconsole=1` no longer implicitly\n-  disables logging to debug.log. Instead, logging to file can be explicitly disabled\n-  by setting `-debuglogfile=0`.\n-\n-Transaction index changes\n--------------------------\n-\n-The transaction index is now built separately from the main node procedure,\n-meaning the `-txindex` flag can be toggled without a full reindex. If bitcoind\n-is run with `-txindex` on a node that is already partially or fully synced\n-without one, the transaction index will be built in the background and become\n-available once caught up. When switching from running `-txindex` to running\n-without the flag, the transaction index database will *not* be deleted\n-automatically, meaning it could be turned back on at a later time without a full\n-resync.\n-\n-Miner block size removed\n-------------------------\n-\n-The `-blockmaxsize` option for miners to limit their blocks' sizes was\n-deprecated in V0.15.1, and has now been removed. Miners should use the\n-`-blockmaxweight` option if they want to limit the weight of their blocks.\n-\n-Python Support\n---------------\n-\n-Support for Python 2 has been discontinued for all test files and tools.\n-\n-0.17.0 change log\n+0.17.x change log\n =================\n \n-### Consensus\n-- #12204 `3fa24bb` Fix overly eager BIP30 bypass (morcos)\n-\n-### Policy\n-- #12568 `ed6ae80` Allow dustrelayfee to be set to zero (luke-jr)\n-- #13120 `ca2a233` Treat segwit as always active (MarcoFalke)\n-- #13096 `062738c` Fix `MAX_STANDARD_TX_WEIGHT` check (jl2012)\n-\n-### Mining\n-- #12693 `df529dc` Remove unused variable in SortForBlock (drewx2)\n-- #12448 `84efa9a` Interrupt block generation on shutdown request (promag)\n-\n-### Block and transaction handling\n-- #12225 `67447ba` Mempool cleanups (sdaftuar)\n-- #12356 `fd65937` Fix 'mempool min fee not met' debug output (Empact)\n-- #12287 `bf3353d` Optimise lock behaviour for GuessVerificationProgress() (jonasschnelli)\n-- #11889 `47a7666` Drop extra script variable in ProduceSignature (ryanofsky)\n-- #11880 `d59b8d6` Stop special-casing phashBlock handling in validation for TBV (TheBlueMatt)\n-- #12431 `947c25e` Only call NotifyBlockTip when chainActive changes (jamesob)\n-- #12653 `534b8fa` Allow to optional specify the directory for the blocks storage (jonasschnelli)\n-- #12172 `3b62a91` Bugfix: RPC: savemempool: Don't save until LoadMempool() is finished (jtimon)\n-- #12167 `88430cb` Make segwit failure due to `CLEANSTACK` violation return a `SCRIPT_ERR_CLEANSTACK` error code (maaku)\n-- #12561 `24133b1` Check for block corruption in ConnectBlock() (sdaftuar)\n-- #11617 `1b5723e` Avoid lock: Call FlushStateToDisk(\u2026) regardless of fCheckForPruning (practicalswift)\n-- #11739 `0a8b7b4` Enforce `SCRIPT_VERIFY_P2SH` and `SCRIPT_VERIFY_WITNESS` from genesis (sdaftuar)\n-- #12885 `a49381d` Reduce implementation code inside CScript (sipa)\n-- #13032 `34dd1a6` Output values for \"min relay fee not met\" error (kristapsk)\n-- #13033 `a07e8ca` Build txindex in parallel with validation (jimpo)\n-- #13080 `66cc47b` Add compile time checking for ::mempool.cs runtime locking assertions (practicalswift)\n-- #13185 `08c1caf` Bugfix: the end of a reorged chain is invalid when connect fails (sipa)\n-- #11689 `0264836` Fix missing locking in CTxMemPool::check(\u2026) and CTxMemPool::setSanityCheck(\u2026) (practicalswift)\n-- #13011 `3c2a41a` Cache witness hash in CTransaction (MarcoFalke)\n-- #13191 `0de7cc8` Specialized double-SHA256 with 64 byte inputs with SSE4.1 and AVX2 (sipa)\n-- #13243 `ea263e1` Make reusable base class for auxiliary indices (jimpo)\n-- #13393 `a607d23` Enable double-SHA256-for-64-byte code on 32-bit x86 (sipa)\n-- #13428 `caabdea` validation: check the specified number of blocks (off-by-one) (kallewoof)\n-- #13438 `450055b` Improve coverage of SHA256 SelfTest code (sipa)\n-- #13431 `954f4a9` validation: count blocks correctly for check level < 3 (kallewoof)\n-- #13386 `3a3eabe` SHA256 implementations based on Intel SHA Extensions (sipa)\n-- #11658 `9a1ad2c` During IBD, when doing pruning, prune 10% extra to avoid pruning again soon after (luke-jr)\n-- #13794 `8ce55df` chainparams: Update with data from assumed valid chain (MarcoFalke)\n-- #13527 `e7ea858` Remove promiscuousmempoolflags (MarcoFalke)\n-\n-### P2P protocol and network code\n-- #12342 `eaeaa2d` Extend #11583 (\"Do not make it trivial for inbound peers to generate log entries\") to include \"version handshake timeout\" message (clemtaylor)\n-- #12218 `9a32114` Move misbehaving logging to net logging category (laanwj)\n-- #10387 `5c2aff8` Eventually connect to `NODE_NETWORK_LIMITED` peers (jonasschnelli)\n-- #9037 `a36834f` Add test-before-evict discipline to addrman (EthanHeilman)\n-- #12622 `e1d6e2a` Correct addrman logging (laanwj)\n-- #11962 `0a01843` add seed.bitcoin.sprovoost.nl to DNS seeds (Sjors)\n-- #12569 `23e7fe8` Increase signal-to-noise ratio in debug.log by adjusting log level when logging failed non-manual connect():s (practicalswift)\n-- #12855 `c199869` Minor accumulated cleanups (tjps)\n-- #13153 `ef46c99` Add missing newlines to debug logging (laanwj)\n-- #13162 `a174702` Don't incorrectly log that REJECT messages are unknown (jnewbery)\n-- #13151 `7f4db9a` Serve blocks directly from disk when possible (laanwj)\n-- #13134 `70d3541` Add option `-enablebip61` to configure sending of BIP61 notifications (laanwj)\n-- #13532 `7209fec` Log warning when deprecated network name 'tor' is used (wodry)\n-- #13615 `172f984` Remove unused interrupt from SendMessages (fanquake)\n-- #13417 `1e90862` Tighten scope in `net_processing` (skeees)\n-- #13298 `f8d470e` Bucketing INV delays (1 bucket) for incoming connections to hide tx time (naumenkogs)\n-- #13672 `0d8d6be` Modified `in_addr6` cast in CConman class to work with msvc (sipsorcery)\n-- #11637 `c575260` Remove dead service bits code (MarcoFalke)\n-- #13212 `a6f00ce` Fixed a race condition when disabling the network (lmanners)\n-- #13656 `1211b15` Remove the boost/algorithm/string/predicate.hpp dependency (251Labs)\n-- #13423 `f58674a` Thread safety annotations in `net_processing` (skeees)\n-- #13776 `7d36237` Add missing verification of IPv6 address in CNetAddr::GetIn6Addr(\u2026) (practicalswift)\n-- #13907 `48bf8ff` Introduce a maximum size for locators (gmaxwell)\n-- #13951 `8a9ffec` Hardcoded seeds update pre-0.17 branch (laanwj)\n-\n-### Wallet\n-- #12330 `2a30e67` Reduce scope of `cs_main` and `cs_wallet` locks in listtransactions (promag)\n-- #12298 `a1ffddb` Refactor HaveKeys to early return on false result (promag)\n-- #12282 `663911e` Disallow abandon of conflicted txes (MarcoFalke)\n-- #12333 `d405bee` Make CWallet::ListCoins atomic (promag)\n-- #12296 `8e6f9f4` Only fee-bump non-conflicted/non-confirmed txes (MarcoFalke)\n-- #11866 `6bb9c13` Do not un-mark fInMempool on wallet txn if ATMP fails (TheBlueMatt)\n-- #11882 `987a809` Disable default fallbackfee on mainnet (jonasschnelli)\n-- #9991 `4ca7c1e` listreceivedbyaddress Filter Address (NicolasDorier)\n-- #11687 `98bc27f` External wallet files (ryanofsky)\n-- #12658 `af88094` Sanitize some wallet serialization (sipa)\n-- #9680 `6acd870` Unify CWalletTx construction (ryanofsky)\n-- #10637 `e057589` Coin Selection with Murch's algorithm (achow101, Xekyo)\n-- #12408 `c39dd2e` Change output type globals to members (MarcoFalke)\n-- #12694 `9552dfb` Actually disable BnB when there are preset inputs (achow101)\n-- #11536 `cead84b` Rename account to label where appropriate (ryanofsky)\n-- #12709 `02b7e83` shuffle sendmany recipients ordering (instagibbs)\n-- #12699 `c948dc8` Shuffle transaction inputs before signing (instagibbs)\n-- #10762 `6d53663` Remove Wallet dependencies from init.cpp (jnewbery)\n-- #12857 `821980c` Avoid travis lint-include-guards error (ken2812221)\n-- #12702 `dab0d68` importprivkey: hint about importmulti (kallewoof)\n-- #12836 `9abdb7c` Make WalletInitInterface and DummyWalletInit private, fix nullptr deref (promag)\n-- #12785 `215158a` Initialize `m_last_block_processed` to nullptr (practicalswift)\n-- #12932 `8d651ae` Remove redundant lambda function arg in handleTransactionChanged (laanwj)\n-- #12749 `a84b056` feebumper: discard change outputs below discard rate (instagibbs)\n-- #12892 `9b3370d` introduce 'label' API for wallet (jnewbery)\n-- #12925 `6d3de17` Logprint the start of a rescan (jonasschnelli)\n-- #12888 `39439e5` debug log number of unknown wallet records on load (instagibbs)\n-- #12977 `434150a` Refactor `g_wallet_init_interface` to const reference (promag)\n-- #13017 `65d7083` Add wallets management functions (promag)\n-- #12953 `d1d54ae` Deprecate accounts (jnewbery)\n-- #12909 `476cb35` Make fee settings to be non-static members (MarcoFalke)\n-- #13002 `487dcbe` Do not treat bare multisig outputs as IsMine unless watched (sipa)\n-- #13028 `783bb64` Make vpwallets usage thread safe (promag)\n-- #12507 `2afdc29` Interrupt rescan on shutdown request (promag)\n-- #12729 `979150b` Get rid of ambiguous OutputType::NONE value (ryanofsky)\n-- #13079 `5778d44` Fix rescanblockchain rpc to properly report progress (Empact)\n-- #12560 `e03c0db` Upgrade path for non-HD wallets to HD (achow101)\n-- #13161 `7cc1bd3` Reset BerkeleyDB handle after connection fails (real-or-random)\n-- #13081 `0dec5b5` Add compile time checking for `cs_wallet` runtime locking assertions (practicalswift)\n-- #13127 `19a3a9e` Add Clang thread safety annotations for variables guarded by `cs_db` (practicalswift)\n-- #10740 `4cfe17c` `loadwallet` RPC - load wallet at runtime (jnewbery)\n-- #12924 `6738813` Fix hdmaster-key / seed-key confusion (scripted diff) (jnewbery)\n-- #13297 `d82c5d1` Fix incorrect comment for DeriveNewSeed (jnewbery)\n-- #13063 `6378eef` Use shared pointer to retain wallet instance (promag)\n-- #13142 `56fe3dc` Separate IsMine from solvability (sipa)\n-- #13194 `fd96d54` Remove template matching and pseudo opcodes (sipa)\n-- #13252 `c4cc8d9` Refactor ReserveKeyFromKeyPool for safety (Empact)\n-- #13058 `343d4e4` `createwallet` RPC - create new wallet at runtime (jnewbery)\n-- #13351 `2140f6c` Prevent segfault when sending to unspendable witness (MarcoFalke)\n-- #13060 `3f0f394` Remove getlabeladdress RPC (jnewbery)\n-- #13111 `000abbb` Add unloadwallet RPC (promag)\n-- #13160 `868cf43` Unlock spent outputs (promag)\n-- #13498 `f54f373` Fixups from account API deprecation (jnewbery)\n-- #13491 `61a044a` Improve handling of INVALID in IsMine (sipa)\n-- #13425 `028b0d9` Moving final scriptSig construction from CombineSignatures to ProduceSignature (PSBT signer logic) (achow101)\n-- #13564 `88a15eb` loadwallet shouldn't create new wallets (jnewbery)\n-- #12944 `619cd29` ScanforWalletTransactions should mark input txns as dirty (instagibbs)\n-- #13630 `d6b2235` Drop unused pindexRet arg to CMerkleTx::GetDepthInMainChain (Empact)\n-- #13566 `ad552a5` Fix get balance (jnewbery)\n-- #13500 `4a3e8c5` Decouple wallet version from client version (achow101)\n-- #13712 `aba2e66` Fix non-determinism in ParseHDKeypath(\u2026). Avoid using an uninitialized variable in path calculation (practicalswift)\n-- #9662 `6b6e854` Add createwallet \"disableprivatekeys\" option: a sane mode for watchonly-wallets (jonasschnelli)\n-- #13683 `e8c7434` Introduce assertion to document the assumption that cache and cache_used are always set in tandem (practicalswift)\n-- #12257 `5f7575e` Use destination groups instead of coins in coin select (kallewoof)\n-- #13773 `89a116d` Fix accidental use of the comma operator (practicalswift)\n-- #13805 `c88529a` Correctly limit output group size (sdaftuar)\n-- #12992 `26f59f5` Add wallet name to log messages (PierreRochard)\n-- #13667 `b81a8a5` Fix backupwallet for multiwallets (domob1812)\n-- #13657 `51c693d` assert to ensure accuracy of CMerkleTx::GetBlocksToMaturity (Empact)\n-- #13812 `9d86aad` sum ancestors rather than taking max in output groups (kallewoof)\n-- #13876 `8eb9870` Catch `filesystem_error` and raise `InitError` (MarcoFalke)\n-- #13808 `13d51a2` shuffle coins before grouping, where warranted (kallewoof)\n-- #13666 `2115cba` Always create signatures with Low R values (achow101)\n-- #13917 `0333914` Additional safety checks in PSBT signer (sipa)\n-- #13968 `65e7a8b` couple of walletcreatefundedpsbt fixes (instagibbs)\n-- #14055 `2307a6e` fix walletcreatefundedpsbt deriv paths, add test (instagibbs)\n-\n-### RPC and other APIs\n-- #12336 `3843780` Remove deprecated rpc options (jnewbery)\n-- #12193 `5dc00f6` Consistently use UniValue.pushKV instead of push_back(Pair()) (karel-3d) (MarcoFalke)\n-- #12409 `0cc45ed` Reject deprecated reserveChangeKey in fundrawtransaction (MarcoFalke)\n-- #10583 `8a98dfe` Split part of validateaddress into getaddressinfo (achow101)\n-- #10579 `ffc6e48` Split signrawtransaction into wallet and non-wallet RPC command (achow101)\n-- #12494 `e4ffcac` Declare CMutableTransaction a struct in rawtransaction.h (Empact)\n-- #12503 `0e26591` createmultisig no longer takes addresses (instagibbs)\n-- #12083 `228b086` Improve getchaintxstats test coverage (promag)\n-- #12479 `cd5e438` Add child transactions to getrawmempool verbose output (conscott)\n-- #11872 `702e8b7` createrawtransaction: Accept sorted outputs (MarcoFalke)\n-- #12700 `ebdf84c` Document RPC method aliasing (ryanofsky)\n-- #12727 `8ee5c7b` Remove unreachable help conditions in rpcwallet.cpp (lutangar)\n-- #12778 `b648974` Add username and ip logging for RPC method requests (GabrielDav)\n-- #12717 `ac898b6` rest: Handle utxo retrieval when ignoring the mempool (romanz)\n-- #12787 `cd99e5b` Adjust ifdef to avoid unreachable code (practicalswift)\n-- #11742 `18815b4` Add testmempoolaccept (MarcoFalke)\n-- #12942 `fefb817` Drop redundant testing of signrawtransaction prevtxs args (Empact)\n-- #11200 `5f2a399` Allow for aborting rescans in the GUI (achow101)\n-- #12791 `3a8a4dc` Expose a transaction's weight via RPC (TheBlueMatt)\n-- #12436 `6e67754` Adds a functional test to validate the transaction version number in the RPC output (251Labs)\n-- #12240 `6f8b345` Introduced a new `fees` structure that aggregates all sub-field fee types denominated in BTC (mryandao)\n-- #12321 `eac067a` p2wsh and p2sh-p2wsh address in decodescript (fivepiece)\n-- #13090 `17266a1` Remove Safe mode (achow101, laanwj)\n-- #12639 `7eb7076` Reduce `cs_main` lock in listunspent (promag)\n-- #10267 `7b966d9` New -includeconf argument for including external configuration files (kallewoof)\n-- #10757 `b9551d3` Introduce getblockstats to plot things (jtimon)\n-- #13288 `a589f53` Remove the need to include rpc/blockchain.cpp in order to put `GetDifficulty` under test (Empact)\n-- #13394 `e1f8dce` cli: Ignore libevent warnings (theuni)\n-- #13439 `3f398d7` Avoid \"duplicate\" return value for invalid submitblock (TheBlueMatt)\n-- #13570 `a247594` Add new \"getzmqnotifications\" method (domob1812)\n-- #13072 `b25a4c2` Update createmultisig RPC to support segwit (ajtowns)\n-- #12196 `8fceae0` Add scantxoutset RPC method (jonasschnelli)\n-- #13557 `b654723` BIP 174 PSBT Serializations and RPCs (achow101)\n-- #13697 `f030410` Support output descriptors in scantxoutset (sipa)\n-- #13927 `bced8ea` Use pushKV in some new PSBT RPCs (domob1812)\n-- #13918 `a9c56b6` Replace median fee rate with feerate percentiles in getblockstats (marcinja)\n-- #13721 `9f23c16` Bugfixes for BIP 174 combining and deserialization (achow101)\n-- #13960 `517010e` Fix PSBT deserialization of 0-input transactions (achow101)\n-\n-### GUI\n-- #12416 `c997f88` Fix Windows build errors introduced in #10498 (practicalswift)\n-- #11733 `e782099` Remove redundant locks (practicalswift)\n-- #12426 `bfa3911` Initialize members in WalletModel (MarcoFalke)\n-- #12489 `e117cfe` Bugfix: respect user defined configuration file (-conf) in QT settings (jonasschnelli)\n-- #12421 `be263fa` navigate to  transaction history page after send (Sjors)\n-- #12580 `ce56fdd` Show a transaction's virtual size in its details dialog (dooglus)\n-- #12501 `c8ea91a` Improved \"custom fee\" explanation in tooltip (randolf)\n-- #12616 `cff95a6` Set modal overlay hide button as default (promag)\n-- #12620 `8a43bdc` Remove TransactionTableModel::TxIDRole (promag)\n-- #12080 `56cc022` Add support to search the address book (promag)\n-- #12621 `2bac3e4` Avoid querying unnecessary model data when filtering transactions (promag)\n-- #12721 `e476826` remove \"new\" button during receive-mode in addressbook (jonasschnelli)\n-- #12723 `310dc61` Qt5: Warning users about invalid-BIP21 URI bitcoin:// (krab)\n-- #12610 `25cf18f` Multiwallet for the GUI (jonasschnelli)\n-- #12779 `f4353da` Remove unused method setupAmountWidget(\u2026) (practicalswift)\n-- #12795 `68484d6` do not truncate .dat extension for wallets in gui (instagibbs)\n-- #12870 `1d54004` make clean removes `src/qt/moc_` files (Sjors)\n-- #13055 `bdda14d` Don't log to console by default (laanwj)\n-- #13141 `57c57df` fixes broken link on readme (marcoagner)\n-- #12928 `ef006d9` Initialize non-static class members that were previously neither initialized where defined nor in constructor (practicalswift)\n-- #13158 `81c533c` Improve sendcoinsdialog readability (marcoagner)\n-- #11491 `40c34a0` Add proxy icon in statusbar (mess110)\n-- #13264 `2a7c53b` Satoshi unit (GreatSock)\n-- #13097 `e545503` Support wallets loaded dynamically (promag)\n-- #13284 `f8be434` fix visual \"overflow\" of amount input (brandonrninefive)\n-- #13275 `a315b79` use `[default wallet]` as name for wallet with no name (jonasschnelli)\n-- #13273 `3fd0c23` Qt/Bugfix: fix handling default wallet with no name (jonasschnelli)\n-- #13341 `25d2df2` Stop translating command line options (laanwj)\n-- #13043 `6e249e4` OptionsDialog: add prune setting (Sjors)\n-- #13506 `6579d80` load wallet in UI after possible init aborts (jonasschnelli)\n-- #13458 `dc53f7f` Drop qt4 support (laanwj)\n-- #13528 `b877c39` Move BitcoinGUI initializers to class, fix initializer order warning (laanwj)\n-- #13536 `baf3a3a` coincontrol: Remove unused qt4 workaround (MarcoFalke)\n-- #13537 `10ffca7` Peer table: Visualize inbound/outbound state for every row (wodry)\n-- #13791 `2c14c1f` Reject dialogs if key escape is pressed (promag)\n-\n-### Build system\n-- #12371 `c9ca4f6` Add gitian PGP key: akx20000 (ghost)\n-- #11966 `f4f4f51` clientversion: Use full commit hash for commit-based version descriptions (luke-jr)\n-- #12417 `ae0fbf0` Upgrade `mac_alias` to 2.0.7 (droark)\n-- #12444 `1f055ef` gitian: Bump descriptors for (0.)17 (theuni)\n-- #12402 `59e032b` expat 2.2.5, ccache 3.4.1, miniupnpc 2.0.20180203 (fanquake)\n-- #12029 `daa84b3` Add a makefile target for Doxygen documentation (Ov3rlo4d)\n-- #12466 `6645eaf` Only use `D_DARWIN_C_SOURCE` when building miniupnpc on darwin (fanquake)\n-- #11986 `765a3eb` zeromq 4.2.3 (fanquake)\n-- #12373 `f13d756` Add build support for profiling (murrayn)\n-- #12631 `a312e20` gitian: Alphabetize signing keys & add kallewoof key (kallewoof)\n-- #12607 `29fad97` Remove ccache (fanquake)\n-- #12625 `c4219ff` biplist 1.0.3 (fanquake)\n-- #12666 `05042d3` configure: UniValue 1.0.4 is required for pushKV(, bool) (luke-jr)\n-- #12678 `6324c68` Fix a few compilation issues with Clang 7 and -Werror (vasild)\n-- #12692 `de6bdfd` Add configure options for various -fsanitize flags (eklitzke)\n-- #12901 `7e23972` Show enabled sanitizers in configure output (practicalswift)\n-- #12899 `3076993` macOS: Prevent Xcode 9.3 build warnings (AkioNak)\n-- #12715 `8fd6243` Add 'make clean' rule (hkjn)\n-- #13133 `a024a18` Remove python2 from configure.ac (ken2812221)\n-- #13005 `cb088b1` Make --enable-debug to pick better options (practicalswift)\n-- #13254 `092b366` Remove improper `qt/moc_*` cleaning glob from the general Makefile (Empact)\n-- #13306 `f5a7733` split warnings out of CXXFLAGS (theuni)\n-- #13385 `7c7508c` Guard against accidental introduction of new Boost dependencies (practicalswift)\n-- #13041 `5779dc4` Add linter checking for accidental introduction of locale dependence (practicalswift)\n-- #13408 `70a03c6` crypto: cleanup sha256 build (theuni)\n-- #13435 `cf7ca60` When build fails due to lib missing, indicate which one (Empact)\n-- #13445 `8eb76f3` Reset default -g -O2 flags when enable debug (ken2812221)\n-- #13465 `81069a7` Avoid concurrency issue when make multiple target (ken2812221)\n-- #13454 `45c00f8` Make sure `LC_ALL=C` is set in all shell scripts (practicalswift)\n-- #13480 `31145a3` Avoid copies in range-for loops and add a warning to detect them (theuni)\n-- #13486 `66e1a08` Move rpc/util.cpp from libbitcoin-util to libbitcoin-server (ken2812221)\n-- #13580 `40334c7` Detect if char equals `int8_t` (ken2812221)\n-- #12788 `287e4ed` Tune wildcards for LIBSECP256K1 target (kallewoof)\n-- #13611 `b55f0c3` bugfix: Use `__cpuid_count` for gnu C to avoid gitian build fail (ken2812221)\n-- #12971 `a6d14b1` Upgrade Qt to 5.9.6 (TheCharlatan)\n-- #13543 `6c6a300` Add RISC-V support (laanwj)\n-- #13177 `dcb154e` GCC-7 and glibc-2.27 back compat code (ken2812221)\n-- #13659 `90b1c7e` add missing leveldb defines (theuni)\n-- #13368 `c0f1569` Update gitian-build.sh for docker (achow101)\n-- #13171 `19d8ca5` Change gitian-descriptors to use bionic instead (ken2812221)\n-- #13604 `75bea05` Add depends 32-bit arm support for bitcoin-qt (TheCharlatan)\n-- #13623 `9cdb19f` Migrate gitian-build.sh to python (ken2812221)\n-- #13689 `8c36432` disable Werror when building zmq (greenaddress)\n-- #13617 `cf7f9ae` release: Require macos 10.10+ (fanquake)\n-- #13750 `c883653` use MacOS friendly sed syntax in qt.mk (Sjors)\n-- #13095 `415f2bf` update `ax_boost_chrono`/`unit_test_framework` (fanquake)\n-- #13732 `e8ffec6` Fix Qt's rcc determinism (Fuzzbawls)\n-- #13782 `8284f1d` Fix osslsigncode compile issue in gitian-build (ken2812221)\n-- #13696 `2ab7208` Add aarch64 qt depends support for cross compiling bitcoin-qt (TheCharlatan)\n-- #13705 `b413ba0` Add format string linter (practicalswift)\n-- #14000 `48c8459` fix qt determinism (theuni)\n-- #14018 `3e4829a` Bugfix: NSIS: Exclude `Makefile*` from docs (luke-jr)\n-- #12906 `048ac83` Avoid `interface` keyword to fix windows gitian build (ryanofsky)\n-- #13314 `a9b6957` Fix FreeBSD build by including utilstrencodings.h (laanwj)\n-\n-### Tests and QA\n-- #12252 `8d57319` Require all tests to follow naming convention (ajtowns)\n-- #12295 `935eb8d` Enable flake8 warnings for all currently non-violated rules (practicalswift)\n-- #11858 `b4d8549` Prepare tests for Windows (MarcoFalke)\n-- #11771 `2dbc4a4` Change invalidtxrequest to use BitcoinTestFramework (jnewbery)\n-- #12200 `d09968f` Bind functional test nodes to 127.0.0.1 (Sjors)\n-- #12425 `26dc2da` Add some script tests (richardkiss)\n-- #12455 `23481fa` Fix bip68 sequence test to reflect updated rpc error message (Empact)\n-- #12477 `acd1e61` Plug memory leaks and stack-use-after-scope (MarcoFalke)\n-- #12443 `07090c5` Move common args to bitcoin.conf (MarcoFalke)\n-- #12570 `39dcac2` Add test cases for HexStr (`std::reverse_iterator` and corner cases) (kostaz)\n-- #12582 `6012f1c` Fix ListCoins test failure due to unset `g_wallet_allow_fallback_fee` (ryanofsky)\n-- #12516 `7f99964` Avoid unintentional unsigned integer wraparounds in tests (practicalswift)\n-- #12512 `955fd23` Don't test against the mempool min fee information in mempool_limit.py (Empact)\n-- #12600 `29088b1` Add a test for large tx output scripts with segwit input (richardkiss)\n-- #12627 `791c3ea` Fix some tests to work on native windows (MarcoFalke)\n-- #12405 `0f58d7f` travis: Full clone for git subtree check (MarcoFalke)\n-- #11772 `0630974` Change invalidblockrequest to use BitcoinTestFramework (jnewbery)\n-- #12681 `1846296` Fix ComputeTimeSmart test failure with `-DDEBUG_LOCKORDER` (ryanofsky)\n-- #12682 `9f04c8e` travis: Clone depth 1 unless `$check_doc` (MarcoFalke)\n-- #12710 `00d1680` Append scripts to new `test_list` array to fix bad assignment (jeffrade)\n-- #12720 `872c921` Avoiding 'file' function name from python2 (jeffrade)\n-- #12728 `4ba3d4f` rename TestNode to TestP2PConn in tests (jnewbery)\n-- #12746 `2405ce1` Remove unused argument `max_invalid` from `check_estimates(\u2026)` (practicalswift)\n-- #12718 `185d484` Require exact match in `assert_start_raises_init_eror` (jnewbery, MarcoFalke)\n-- #12076 `6d36f59` Use node.datadir instead of tmpdir in test framework (MarcoFalke)\n-- #12772 `b43aba8` ci: Bump travis timeout for make check to 50m (jnewbery)\n-- #12806 `18606eb` Fix function names in `feature_blocksdir` (MarcoFalke)\n-- #12811 `0d8fc8d` Make summary row bold-red if any test failed and show failed tests at end of table (laanwj)\n-- #12790 `490644d` Use blockmaxweight where tests previously had blockmaxsize (conscott)\n-- #11773 `f0f9732` Change `feature_block.py` to use BitcoinTestFramework (jnewbery)\n-- #12839 `40f4baf` Remove travis checkout depth (laanwj)\n-- #11817 `2a09a78` Change `feature_csv_activation.py` to use BitcoinTestFramework (jnewbery)\n-- #12284 `fa5825d` Remove assigned but never used local variables. Enable Travis checking for unused local variables (practicalswift)\n-- #12719 `9beded5` Add note about test suite naming convention in developer-notes.md (practicalswift)\n-- #12861 `c564424` Stop `feature_block.py` from blowing up memory (jnewbery)\n-- #12851 `648252e` travis: Run verify-commits only on cron jobs (MarcoFalke)\n-- #12853 `2106c4c` Match full plain text by default (MarcoFalke)\n-- #11818 `9a2db3b` I accidentally (deliberately) killed it (the ComparisonTestFramework) (jnewbery)\n-- #12766 `69310a3` Tidy up REST interface functional tests (romanz)\n-- #12849 `83c7533` Add logging in loops in `p2p_sendhears.py` (ccdle12)\n-- #12895 `d6f10b2` Add note about test suite name uniqueness requirement to developer notes (practicalswift)\n-- #12856 `27278df` Add Metaclass for BitcoinTestFramework (WillAyd)\n-- #12918 `6fc5a05` Assert on correct variable (kallewoof)\n-- #11878 `a04440f` Add Travis check for duplicate includes (practicalswift)\n-- #12917 `cf8073f` Windows fixups for functional tests (MarcoFalke)\n-- #12926 `dd1ca9e` Run unit tests in parallel (sipa)\n-- #12920 `b1fdfc1` Fix sign for expected values (kallewoof)\n-- #12947 `979f598` Wallet hd functional test speedup and clarification (instagibbs)\n-- #12993 `0d69921` Remove compatibility code not needed now when we're on Python 3 (practicalswift)\n-- #12996 `6a278e0` Remove redundant bytes(\u2026) calls (practicalswift)\n-- #12949 `6b46288` Avoid copies of CTransaction (MarcoFalke)\n-- #13007 `0d12570` Fix dangling wallet pointer in vpwallets (promag)\n-- #13048 `cac6d11` Fix `feature_block` flakiness (jnewbery)\n-- #12510 `d5b2e98` Add `rpc_bind` test to default-run tests (laanwj)\n-- #13022 `896a9d0` Attach node index to `test_node` AssertionError and print messages (jamesob)\n-- #13024 `018c7e5` Add rpcauth pair that generated by rpcauth.py (ken2812221)\n-- #13013 `a0079d4` bench: Amend `mempool_eviction` test for witness txs (MarcoFalke)\n-- #13051 `e074097` Normalize executable location (MarcoFalke)\n-- #13056 `106d929` Make rpcauth.py testable and add unit tests (nixbox)\n-- #13073 `a785bc3` add rpcauth-test to `AC_CONFIG_LINKS` to fix out-of-tree make check (laanwj)\n-- #12830 `25ad2f7` Clarify address book error messages, add tests (jamesob)\n-- #13082 `24106a8` don't test against min relay fee information in `mining_prioritisetransaction.py` (kristapsk)\n-- #13003 `8d045a0` Add test for orphan handling (MarcoFalke)\n-- #13105 `9e9b48d` Add --failfast option to functional test runner (jamesob)\n-- #13130 `3186ad4` Fix race in `rpc_deprecated.py` (jnewbery)\n-- #13136 `baf6b4e` Fix flake8 warnings in several wallet functional tests (jnewbery)\n-- #13094 `bf9b03d` Add test for 64-bit Windows PE, modify 32-bit test results (ken2812221)\n-- #13183 `9458b05` travis: New travis job for `check_docs` steps (glaksmono)\n-- #12265 `1834d4d` fundrawtransaction: lock watch-only shared address (kallewoof)\n-- #13188 `4a50ec0` Remove unused option --srcdir (MarcoFalke)\n-- #12755 `612ba35` Better stderr testing (jnewbery)\n-- #13198 `196c5a9` Avoid printing to console during cache creation (sdaftuar)\n-- #13075 `cb9bbf7` Remove 'account' API from wallet functional tests (jnewbery)\n-- #13221 `ffa86af` travis: Rename the build stage `check_doc` to `lint` (practicalswift)\n-- #13205 `3cbd25f` Remove spurious error log in `p2p_segwit.py` (jnewbery)\n-- #13291 `536120e` Don't include torcontrol.cpp into the test file (Empact)\n-- #13281 `2ac6315` Move linters to test/lint, add readme (MarcoFalke)\n-- #13215 `f8a29ca` travis: Build tests on ubuntu 18.04 with docker (ken2812221)\n-- #13349 `24f7011` bench: Don't return a bool from main (laanwj)\n-- #13347 `87a9d03` travis: Skip cache for lint stage (MarcoFalke)\n-- #13355 `0b1c0c4` Fix \"gmake check\" under OpenBSD 6.3 (probably `*BSD`): Avoid using GNU grep specific regexp handling (practicalswift)\n-- #13353 `d4f6dac` Fixup setting of PATH env var (MarcoFalke)\n-- #13352 `e24bf1c` Avoid checking reject code for now (MarcoFalke)\n-- #13383 `2722a1f` bench: Use non-throwing parsedouble(\u2026) instead of throwing boost::lexical_cast<double>(\u2026) (practicalswift)\n-- #13367 `264efdc` Increase includeconf test coverage (MarcoFalke)\n-- #13404 `3d3d8ae` speed up of `tx_validationcache_tests` by reusing of CTransaction (lucash-dev)\n-- #13421 `531a033` Remove `portseed_offset` from test runner (MarcoFalke)\n-- #13440 `5315660` Log as utf-8 (MarcoFalke)\n-- #13066 `fa4b906` Migrate verify-commits script to python, run in travis (ken2812221)\n-- #13447 `4b1edd3` travis: Increase `travis_wait` time while verifying commits (ken2812221)\n-- #13350 `f532d52` Add logging to provide anchor points when debugging p2p_sendheaders (lmanners)\n-- #13406 `4382f19` travis: Change mac goal to all deploy (ken2812221)\n-- #13457 `b222138` Drop variadic macro (MarcoFalke)\n-- #13512 `3a45493` mininode: Expose connection state through `is_connected` (MarcoFalke)\n-- #13496 `9ab4c2a` Harden lint-filenames.sh (wodry)\n-- #13219 `08516e0` bench: Add block assemble benchmark (MarcoFalke)\n-- #13530 `b1dc39d` bench: Add missing pow.h header (laanwj)\n-- #12686 `2643fa5` Add -ftrapv to CFLAGS and CXXFLAGS when --enable-debug is used. Enable -ftrapv in Travis (practicalswift)\n-- #12882 `d96bdd7` Make `test_bitcoin` pass under ThreadSanitzer (clang). Fix lock-order-inversion (potential deadlock) (practicalswift)\n-- #13535 `2328039` `wallet_basic`: Specify minimum required amount for listunspent (MarcoFalke)\n-- #13551 `c93c360` Fix incorrect documentation for test case `cuckoocache_hit_rate_ok` (practicalswift)\n-- #13563 `b330f3f` bench: Simplify coinselection (promag)\n-- #13517 `a6ed99a` Remove need to handle the network thread in tests (MarcoFalke)\n-- #13522 `686e97a` Fix `p2p_sendheaders` race (jnewbery)\n-- #13467 `3dc2dcf` Make `p2p_segwit` easier to debug (jnewbery)\n-- #13598 `0212187` bench: Fix incorrect behaviour in prevector.cpp (AkioNak)\n-- #13565 `b05ded1` Fix AreInputsStandard test to reference the proper scriptPubKey (Empact)\n-- #13145 `d3dae3d` Use common getPath method to create temp directory in tests (winder)\n-- #13645 `2ea7eb6` skip `rpc_zmq` functional test as necessary (jamesob)\n-- #13626 `8f1106d` Fix some TODOs in `p2p_segwit` (MarcoFalke)\n-- #13138 `8803c91` Remove accounts from `wallet_importprunedfunds.py` (jnewbery)\n-- #13663 `cbc9b50` Avoid read/write to default datadir (MarcoFalke)\n-- #13682 `f8a32a3` bench: Remove unused variable (practicalswift)\n-- #13638 `6fcdb5e` Use `MAX_SCRIPT_ELEMENT_SIZE` from script.py (domob1812)\n-- #13687 `9d26b69` travis: Check that ~/.bitcoin is never created (MarcoFalke)\n-- #13715 `e1260a7` fixes mininode's P2PConnection sending messages on closing transport (marcoagner)\n-- #13729 `aa9429a` travis: Avoid unnecessarily setting env variables on the lint build (Empact)\n-- #13747 `ab28b5b` Skip P2PConnection's `is_closing()` check when not available (domob1812)\n-- #13650 `7a9bca6` travis: Don't store debug info if --enable-debug is set (ken2812221)\n-- #13711 `f98d1e0` bench: Add benchmark for unserialize prevector (AkioNak)\n-- #13771 `365384f` travis: Retry to fetch docker image (MarcoFalke)\n-- #13806 `4d550ff` Fix `bench/block_assemble` assert failure (jamesob)\n-- #13779 `d25079a` travis: Improve readability of travis.yml and log outputs (scravy)\n-- #13822 `0fb9c87` bench: Make coinselection output groups pass eligibility filter (achow101)\n-- #13247 `e83d82a` Add tests to SingleThreadedSchedulerClient() and document the memory model (skeees)\n-- #13811 `660abc1` travis: Run `bench_bitcoin` once (MarcoFalke)\n-- #13837 `990e182` Extract `rpc_timewait` as test param (MarcoFalke)\n-- #13851 `9c4324d` fix locale for lint-shell (scravy)\n-- #13823 `489b51b` quote path in authproxy for external multiwallets (MarcoFalke)\n-- #13849 `2b67354` travis: Use only travis jobs: instead of mix of jobs+matrix (scravy)\n-- #13859 `2384323` Add emojis to `test_runner` path and wallet filename (MarcoFalke)\n-- #13916 `8ac7125` `wait_for_verack` by default (MarcoFalke)\n-- #13669 `f66e1c7` Cleanup `create_transaction` implementations (conscott)\n-- #13924 `09ada21` Simplify comparison in `rpc_blockchain.py` (domob1812)\n-- #13913 `a08533c` Remove redundant checkmempool/checkblockindex `extra_args` (MarcoFalke)\n-- #13915 `a04888a` Add test for max number of entries in locator (MarcoFalke)\n-- #13867 `1b04b55` Make extended tests pass on native Windows (MarcoFalke)\n-- #13944 `0df7a6c` Port usage of deprecated optparse module to argparse module (Kvaciral)\n-- #13928 `b8eb0df` blocktools enforce named args for amount (MarcoFalke)\n-- #13054 `bffb35f` Enable automatic detection of undefined names in Python tests scripts. Remove wildcard imports (practicalswift)\n-- #14069 `cf3d7f9` Use assert not `BOOST_CHECK_*` from multithreaded tests (skeees)\n-- #14071 `fab0fbe` Stop txindex thread before calling destructor (MarcoFalke)\n-\n-### Miscellaneous\n-- #11909 `8897135` contrib: Replace developer keys with list of pgp fingerprints (MarcoFalke)\n-- #12394 `fe53d5f` gitian-builder.sh: fix --setup doc, since lxc is default (Sjors)\n-- #12468 `294a766` Add missing newline in init.cpp log message (Aesti)\n-- #12308 `dcfe218` contrib: Add support for out-of-tree builds in gen-manpages.sh (laanwj)\n-- #12451 `aae64a2` Bump leveldb subtree (MarcoFalke)\n-- #12527 `d77b4a7` gitian-build.sh: fix signProg being recognized as two parameters (ken2812221)\n-- #12588 `d74b01d` utils: Remove deprecated pyzmq call from python zmq example (kosciej)\n-- #10271 `bc67982` Use `std::thread::hardware_concurrency`, instead of Boost, to determine available cores (fanquake)\n-- #12097 `14475e2` scripts: Lint-whitespace: use perl instead of grep -p (Sjors)\n-- #12098 `17c44b2` scripts: Lint-whitespace: add param to check last n commits (Sjors)\n-- #11900 `842f61a` script: Simplify checkminimalpush checks, add safety assert (instagibbs)\n-- #12567 `bb98aec` util: Print timestamp strings in logs using iso 8601 formatting (practicalswift)\n-- #12572 `d8d9162` script: Lint-whitespace: find errors more easily (AkioNak)\n-- #10694 `ae5bcc7` Remove redundant code in MutateTxSign(CMutableTransaction&, const std::string&) (practicalswift)\n-- #12659 `3d16f58` Improve Fatal LevelDB Log Messages (eklitzke)\n-- #12643 `0f0229d` util: Remove unused `sync_chain` (MarcoFalke)\n-- #12102 `7fb8fb4` Apply hardening measures in bitcoind systemd service file (Flowdalic)\n-- #12652 `55f490a` bitcoin-cli: Provide a better error message when bitcoind is not running (practicalswift)\n-- #12630 `c290508` Provide useful error message if datadir is not writable (murrayn)\n-- #11881 `624bee9` Remove Python2 support (jnewbery)\n-- #12821 `082e26c` contrib: Remove unused import string (MarcoFalke)\n-- #12829 `252c1b0` Python3 fixup (jnewbery)\n-- #12822 `ff48f62` Revert 7deba93bdc76616011a9f493cbc203d60084416f and fix expired-key-sigs properly (TheBlueMatt)\n-- #12820 `5e53b80` contrib: Fix check-doc script regexes (MarcoFalke)\n-- #12713 `4490871` Track negated options in the option parser (eklitzke)\n-- #12708 `b2e5fe8` Make verify-commits.sh test that merges are clean (sipa)\n-- #12891 `3190785` logging: Add lint-logs.sh to check for newline termination (jnewbery)\n-- #12923 `a7cbe38` util: Pass `pthread_self()` to `pthread_setschedparam` instead of 0 (laanwj)\n-- #12871 `fb17fae` Add shell script linting: Check for shellcheck warnings in shell scripts (practicalswift)\n-- #12970 `5df84de` logging: Bypass timestamp formatting when not logging (theuni)\n-- #12987 `fe8fa22` tests/tools: Enable additional Python flake8 rules for automatic linting via Travis (practicalswift)\n-- #12972 `0782508` Add python3 script shebang lint (ken2812221)\n-- #13004 `58bbc55` Print to console by default when not run with -daemon (practicalswift)\n-- #13039 `8b4081a` Add logging and error handling for file syncing (laanwj)\n-- #13020 `4741ca5` Consistently log CValidationState on call failure (Empact)\n-- #13031 `826acc9` Fix for utiltime to compile with msvc (sipsorcery)\n-- #13119 `81743b5` Remove script to clean up datadirs (MarcoFalke)\n-- #12954 `5a66642` util: Refactor logging code into a global object (jimpo)\n-- #12769 `35eb9d6` Add systemd service to bitcoind in debian package (ghost)\n-- #13146 `0bc980b` rpcauth: Make it possible to provide a custom password (laanwj)\n-- #13148 `b62b437` logging: Fix potential use-after-free in logprintstr(\u2026) (practicalswift)\n-- #13214 `0612d96` Enable Travis checking for two Python linting rules we are currently not violating (practicalswift)\n-- #13197 `6826989` util: Warn about ignored recursive -includeconf calls (kallewoof)\n-- #13176 `d9ebb63` Improve CRollingBloomFilter performance: replace modulus with FastMod (martinus)\n-- #13228 `d792e47` Add script to detect circular dependencies between source modules (sipa)\n-- #13320 `e08c130` Ensure gitian-build.sh uses bash (jhfrontz)\n-- #13301 `e4082d5` lint: Add linter to error on `#include <*.cpp>` (Empact)\n-- #13374 `56f6936` utils and libraries: checking for bitcoin address in translations (kaplanmaxe)\n-- #13230 `7c32b41` Simplify include analysis by enforcing the developer guide's include syntax (practicalswift)\n-- #13450 `32bf4c6` Add linter: Enforce the source code file naming convention described in the developer notes (practicalswift)\n-- #13479 `fa2ea37` contrib: Fix cve-2018-12356 by hardening the regex (loganaden)\n-- #13448 `a90ca40` Add linter: Make sure we explicitly open all text files using UTF-8 encoding in Python (practicalswift)\n-- #13494 `d67eff8` Follow-up to #13454: Fix broken build by exporting `LC_ALL=C` (practicalswift)\n-- #13510 `03f3925` Scripts and tools: Obsolete #!/bin/bash shebang (DesWurstes)\n-- #13577 `c9eb8d1` logging: Avoid nstart may be used uninitialized in appinitmain warning (mruddy)\n-- #13603 `453ae5e` bitcoin-tx: Stricter check for valid integers (domob1812)\n-- #13118 `c05c93c` RPCAuth Detection in Logs (Linrono)\n-- #13647 `4027ec1` Scripts and tools: Fix `BIND_NOW` check in security-check.py (conradoplg)\n-- #13692 `f5d166a` contrib: Clone core repo in gitian-build (MarcoFalke)\n-- #13699 `4c6d1b9` contrib: Correct version check (kallewoof)\n-- #13695 `dcc0cff` lint: Add linter for circular dependencies (Empact)\n-- #13733 `0d1ebf4` utils: Refactor argsmanager a little (AtsukiTak)\n-- #13714 `29b4ee6` contrib: Add lxc network setup for bionic host (ken2812221)\n-- #13764 `f8685f4` contrib: Fix test-security-check fail in ubuntu 18.04 (ken2812221)\n-- #13809 `77168f7` contrib: Remove debian and rpm subfolder (MarcoFalke)\n-- #13799 `230652c` Ignore unknown config file options; warn instead of error (sipa)\n-- #13894 `df9f712` shutdown: Stop threads before resetting ptrs (MarcoFalke)\n-- #13925 `71dec5c` Merge leveldb subtree (MarcoFalke)\n-- #13939 `ef86f26` lint: Make format string linter understand basic template parameter syntax (practicalswift)\n-- #14105 `eb202ea` util: Report parse errors in configuration file (laanwj)\n-- #12604 `9903537` Add DynamicMemoryUsage() to CDBWrapper to estimate LevelDB memory use (eklitzke)\n-- #12495 `047865e` Increase LevelDB `max_open_files` (eklitzke)\n-- #12784 `e80716d` Fix bug in memory usage calculation (unintended integer division) (practicalswift)\n-- #12618 `becd8dd` Set `SCHED_BATCH` priority on the loadblk thread (eklitzke)\n-- #12854 `5ca1509` Add P2P, Network, and Qt categories to the desktop icon (luke-jr)\n-- #11862 `4366f61` Network specific conf sections (ajtowns)\n-- #13441 `4a7e64f` Prevent shared conf files from failing with different available options in different binaries (achow101)\n-- #13471 `5eca4e8` For AVX2 code, also check for AVX, XSAVE, and OS support (sipa)\n-- #13503 `c655b2c` Document FreeBSD quirk. Fix FreeBSD build: Use std::min<int>(\u2026) to allow for compilation under certain FreeBSD versions (practicalswift)\n-- #13725 `07ce278` Fix bitcoin-cli --version (Empact)\n-\n-### Documentation\n-- #12306 `216f9a4` Improvements to UNIX documentation (axvr)\n-- #12309 `895fbd7` Explain how to update chainTxData in release process (laanwj)\n-- #12317 `85123be` Document method for reviewers to verify chainTxData (jnewbery)\n-- #12331 `d32528e` Properly alphabetize output of CLI --help option (murrayn)\n-- #12322 `c345148` Remove step making cloned repository world-writable for Windows build (murrayn)\n-- #12354 `b264528` add gpg key for fivepiece (fivepiece)\n-- #11761 `89005dd` initial QT documentation (Sjors)\n-- #12232 `fdc2188` Improve \"Turn Windows Features On or Off\" step (MCFX2)\n-- #12487 `4528f74` init: Remove translation for `-blockmaxsize` option help (laanwj)\n-- #12546 `a4a5fc7` Minor improvements to Compatibility Notes (randolf)\n-- #12434 `21e2670` dev-notes: Members should be initialized (MarcoFalke)\n-- #12452 `71f56da` clarified systemd installation instructions in init.md for Ubuntu users (DaveFromBinary)\n-- #12615 `1f93491` allow for SIGNER containing spaces (ken2812221)\n-- #12603 `85424d7` PeerLogicValidation interface (jamesob)\n-- #12581 `12ac2f0` Mention configure without wallet in FreeBSD instructions (dbolser)\n-- #12619 `8a709fb` Give hint about gitian not able to download (kallewoof)\n-- #12668 `de2fcaa` do update before fetching packages in WSL build guide (nvercamm)\n-- #12586 `e7721e6` Update osx brew install instruction (fanquake)\n-- #12760 `7466a26` Improve documentation on standard communication channels (jimpo)\n-- #12797 `0415b1e` init: Fix help message for checkblockindex (MarcoFalke)\n-- #12800 `2d97611` Add note about our preference for scoped enumerations (\"enum class\") (practicalswift)\n-- #12798 `174d016` Refer to witness reserved value as spec. in the BIP (MarcoFalke)\n-- #12759 `d3908e2` Improve formatting of developer notes (eklitzke)\n-- #12877 `2b54155` Use bitcoind in Tor documentation (knoxcard)\n-- #12896 `b15485e` Fix conflicting statements about initialization in developer notes (practicalswift)\n-- #12850 `319991d` add qrencode to brew install instructions (buddilla)\n-- #12007 `cd8e45b` Clarify the meaning of fee delta not being a fee rate in prioritisetransaction RPC (honzik666)\n-- #12927 `06ead15` fixed link, replaced QT with Qt (trulex)\n-- #12852 `ebd786b` devtools: Setup ots git integration (MarcoFalke)\n-- #12933 `3cf76c2` Refine header include policy (MarcoFalke)\n-- #12951 `6df0c6c` Fix comment in FindForkInGlobalIndex (jamesob)\n-- #12982 `a63b4e3` Fix inconsistent namespace formatting guidelines (ryanofsky)\n-- #13026 `9b3a67e` Fix include comment in src/interfaces/wallet.h (promag)\n-- #13012 `d1e3c5e` Add comments for chainparams.h, validation.cpp (jamesob)\n-- #13064 `569e381` List support for BIP173 in bips.md (sipa)\n-- #12997 `646b7f6` build-windows: Switch to Artful, since Zesty is EOL (MarcoFalke)\n-- #12384 `c5f7efe` Add version footnote to tor.md (Willtech)\n-- #13165 `627c376` Mention good first issue list in CONTRIBUTING.md (fanquake)\n-- #13295 `fb77310` Update OpenBSD build instructions for OpenBSD 6.3 (practicalswift)\n-- #13340 `3a8e3f4` remove leftover check-doc documentation (fanquake)\n-- #13346 `60f0358` update bitcoin-dot-org links in release-process.md (fanquake)\n-- #13372 `f014933` split FreeBSD build instructions out of build-unix.md (steverusso)\n-- #13366 `861de3b` Rename \u201cOS X\u201d to the newer \u201cmacOS\u201d convention (giulio92)\n-- #13369 `f8bcef3` update transifex doc link (mess110)\n-- #13312 `b22115d` Add a note about the source code filename naming convention (practicalswift)\n-- #13460 `1939536` Remove note to install all boost dev packages (MarcoFalke)\n-- #13476 `9501938` Fix incorrect shell quoting in FreeBSD build instructions (murrayn)\n-- #13402 `43fa355` Document validationinterace callback blocking deadlock potential (TheBlueMatt)\n-- #13488 `d6cf4bd` Improve readability of \"Squashing commits\" (wodry)\n-- #13531 `ee02deb` Clarify that mempool txiter is `const_iterator` (MarcoFalke)\n-- #13418 `01f9098` More precise explanation of parameter onlynet (wodry)\n-- #13592 `1756cb4` Modify policy to not translate command-line help (ken2812221)\n-- #13588 `b77c38e` Improve doc of options addnode, connect, seednode (wodry)\n-- #13614 `17e9106` Update command line help for -printtoconsole and -debuglogfile (satwo, fanquake)\n-- #13605 `8cc048e` corrected text to reflect new(er) process of specifying fingerprints (jhfrontz)\n-- #13481 `b641f60` Rewrite some validation docs as lock annotations (MarcoFalke)\n-- #13680 `30640f8` Remove outdated comment about miner ignoring CPFP (jamesob)\n-- #13625 `7146672` Add release notes for -printtoconsole and -debuglogfile changes (satwo)\n-- #13718 `f7f574d` Specify preferred Python string formatting technique (masonicboom)\n-- #12764 `10b9a81` Remove field in getblocktemplate help that has never been used (conscott)\n-- #13742 `d2186b3` Adjust bitcoincore.org links (MarcoFalke)\n-- #13706 `94dd89e` Minor improvements to release-process.md (MitchellCash)\n-- #13775 `ef4fac0` Remove newlines from error message (practicalswift)\n-- #13803 `feb7dd9` add note to contributor docs about warranted PR's (kallewoof)\n-- #13814 `67af7ef` Add BIP174 to list of implemented BIPs (sipa)\n-- #13835 `c1cba35` Fix memory consistency model in comment (skeees)\n-- #13824 `aa30e4b` Remove outdated net comment (MarcoFalke)\n-- #13853 `317477a` correct versions in dependencies.md (fanquake)\n-- #13872 `37ab117` Reformat -help output for help2man (real-or-random)\n-- #13717 `8c3c402` Link to python style guidelines from developer notes (masonicboom)\n-- #13895 `1cd5f2c` fix GetWarnings docs to reflect behavior (Empact)\n-- #13911 `3e3a50a` Revert translated string change, clarify wallet log messages (PierreRochard)\n-- #13908 `d6faea4` upgrade rescan time warning from minutes to >1 hour (masonicboom)\n-- #13905 `73a09b4` fixed bitcoin-cli -help output for help2man (hebasto)\n-- #14100 `2936dbc` Change documentation for =0 for non-boolean options (laanwj)\n-- #14096 `465a583` Add reference documentation for descriptors language (sipa)\n-- #12757 `0c5f67b` Clarify include guard naming convention (practicalswift)\n-- #13844 `d3325b0` Correct the help output for `-prune` (hebasto)\n+...\n \n Credits\n =======\n \n Thanks to everyone who directly contributed to this release:\n \n-- 251\n-- 532479301\n-- Aaron Clauson\n-- Akio Nakamura\n-- Akira Takizawa\n-- Alex Morcos\n-- Alex Vear\n-- Alexey Ivanov\n-- Alin Rus\n-- Andrea Comand\n-- Andrew Chow\n-- Anthony Towns\n-- AtsukiTak\n-- Ben Woosley\n-- Bernhard M. Wiedemann\n-- Brandon Ruggles\n-- buddilla\n-- ccdle12\n-- Chris Moore\n-- Chun Kuan Lee\n-- Clem Taylor\n-- Conor Scott\n-- Conrado Gouvea\n-- Cory Fields\n-- Cristian Mircea Messel\n-- ctp-tsteenholdt\n-- Damian Williamson\n-- Dan Bolser\n-- Daniel Kraft\n-- Darko Jankovi\u0107\n-- DaveFromBinary\n-- David A. Harding\n-- DesWurstes\n-- Dimitris Apostolou\n-- donaloconnor\n-- Douglas Roark\n-- DrahtBot\n-- Drew Rasmussen\n-- e0\n-- Ernest Hemingway\n-- Ethan Heilman\n-- Evan Klitzke\n-- fanquake\n-- Felix Wolfsteller\n-- fivepiece\n-- Florian Schmaus\n-- Fuzzbawls\n-- Gabriel Davidian\n-- Giulio Lombardo\n-- Gleb\n-- Grady Laksmono\n-- GreatSock\n-- Gregory Maxwell\n-- Gregory Sanders\n-- Hennadii Stepanov\n-- Henrik Jonsson\n-- Indospace.io\n-- James O'Beirne\n-- Jan \u010capek\n-- Jeff Frontz\n-- Jeff Rade\n-- Jeremy Rubin\n-- JeremyRand\n-- Jesse Cohen\n-- Jim Posen\n-- joemphilips\n-- John Bampton\n-- John Newbery\n-- johnlow95\n-- Johnson Lau\n-- Jonas Nick\n-- Jonas Schnelli\n-- Jo\u00e3o Barbosa\n-- Jorge Tim\u00f3n\n-- Josh Hartshorn\n-- Julian Fleischer\n-- kallewoof\n-- Karel Bilek\n-- Karl-Johan Alm\n-- Ken Lee\n-- Kevin Pan\n-- Kosta Zertsekel\n-- Kristaps Kaupe\n-- Kvaciral\n-- Lawrence Nahum\n-- Linrono\n-- lmanners\n-- Loganaden Velvindron\n-- Lowell Manners\n-- lucash.dev@gmail.com\n-- Luke Dashjr\n-- lutangar\n-- Marcin Jachymiak\n-- marcoagner\n-- MarcoFalke\n-- Mark Erhardt\n-- Mark Friedenbach\n-- Martin Ankerl\n-- Mason Simon\n-- Matt Corallo\n-- Matteo Sumberaz\n-- Max Kaplan\n-- MeshCollider\n-- Micha\u0142 Zabielski\n-- Mitchell Cash\n-- mruddy\n-- mryandao\n-- murrayn\n-- Nick Vercammen\n-- Nicolas Dorier\n-- Nikolay Mitev\n-- okayplanet\n-- Pierre Rochard\n-- Pieter Wuille\n-- practicalswift\n-- Qasim Javed\n-- Randolf Richardson\n-- Richard Kiss\n-- Roman Zeyde\n-- Russell Yanofsky\n-- Samuel B. Atwood\n-- Sebastian Kung\n-- Sjors Provoost\n-- Steve Lee\n-- steverusso\n-- Suhas Daftuar\n-- Tamas Blummer\n-- TheCharlatan\n-- Thomas Kerin\n-- Thomas Snider\n-- Tim Ruffing\n-- Varunram\n-- Vasil Dimov\n-- Will Ayd\n-- William Robinson\n-- winder\n-- Wladimir J. van der Laan\n-- wodry\n+...\n \n And to those that reported security issues:\n \n-- awemany (for CVE-2018-17144, previously credited as \"anonymous reporter\")\n+...\n \n-As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/).\n\\ No newline at end of file\n+As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/)."
      }
    ]
  },
  {
    "sha": "89306ab0df93bfdf5630910bc20b1eccb7379172",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OTMwNmFiMGRmOTNiZmRmNTYzMDkxMGJjMjBiMWVjY2I3Mzc5MTcy",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-10-06T04:48:23Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-10-10T07:34:50Z"
      },
      "message": "[wallet] Restore ability to list incoming transactions by label\n\nBackport of PR 14411 to v0.17.\n\nThis change partially reverts #13075 and #14023.\n\nFixes #14382",
      "tree": {
        "sha": "e44f6391b1ecc4d5d906999e3c561b9d1997b0da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e44f6391b1ecc4d5d906999e3c561b9d1997b0da"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/89306ab0df93bfdf5630910bc20b1eccb7379172",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89306ab0df93bfdf5630910bc20b1eccb7379172",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/89306ab0df93bfdf5630910bc20b1eccb7379172",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89306ab0df93bfdf5630910bc20b1eccb7379172/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5b47b8efd48d233a5f7c12d1d7713dcd2f616255",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b47b8efd48d233a5f7c12d1d7713dcd2f616255",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5b47b8efd48d233a5f7c12d1d7713dcd2f616255"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 56,
      "deletions": 17
    },
    "files": [
      {
        "sha": "ea9a45347d23027cbdd16c658074d97f46f08491",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 17,
        "deletions": 1,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89306ab0df93bfdf5630910bc20b1eccb7379172/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89306ab0df93bfdf5630910bc20b1eccb7379172/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=89306ab0df93bfdf5630910bc20b1eccb7379172",
        "patch": "@@ -71,7 +71,23 @@ Notable changes\n 0.17.x change log\n =================\n \n-...\n+`listtransactions` label support\n+--------------------------------\n+\n+The `listtransactions` RPC `account` parameter which was deprecated in 0.17.0\n+and renamed to `dummy` has been un-deprecated and renamed again to `label`.\n+\n+When bitcoin is configured with the `-deprecatedrpc=accounts` setting, specifying\n+a label/account/dummy argument will return both outgoing and incoming\n+transactions. Without the `-deprecatedrpc=accounts` setting, it will only return\n+incoming transactions (because it used to be possible to create transactions\n+spending from specific accounts, but this is no longer possible with labels).\n+\n+When `-deprecatedrpc=accounts` is set, it's possible to pass the empty string \"\"\n+to list transactions that don't have any label. Without\n+`-deprecatedrpc=accounts`, passing the empty string is an error because returning\n+only non-labeled transactions is not generally useful behavior and can cause\n+confusion.\n \n Credits\n ======="
      },
      {
        "sha": "a3de6180596b2864b9b5ca3f288d760d83f3df1e",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 8,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89306ab0df93bfdf5630910bc20b1eccb7379172/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89306ab0df93bfdf5630910bc20b1eccb7379172/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=89306ab0df93bfdf5630910bc20b1eccb7379172",
        "patch": "@@ -1805,9 +1805,14 @@ static void ListTransactions(CWallet* const pwallet, const CWalletTx& wtx, const\n     bool fAllAccounts = (strAccount == std::string(\"*\"));\n     bool involvesWatchonly = wtx.IsFromMe(ISMINE_WATCH_ONLY);\n \n+    bool list_sent = fAllAccounts;\n+\n+    if (IsDeprecatedRPCEnabled(\"accounts\")) {\n+        list_sent |= strAccount == strSentAccount;\n+    }\n+\n     // Sent\n-    if ((!listSent.empty() || nFee != 0) && (fAllAccounts || strAccount == strSentAccount))\n-    {\n+    if (list_sent) {\n         for (const COutputEntry& s : listSent)\n         {\n             UniValue entry(UniValue::VOBJ);\n@@ -1901,12 +1906,14 @@ UniValue listtransactions(const JSONRPCRequest& request)\n \n     std::string help_text {};\n     if (!IsDeprecatedRPCEnabled(\"accounts\")) {\n-        help_text = \"listtransactions (dummy count skip include_watchonly)\\n\"\n-            \"\\nReturns up to 'count' most recent transactions skipping the first 'from' transactions for account 'account'.\\n\"\n+        help_text = \"listtransactions (label count skip include_watchonly)\\n\"\n+            \"\\nIf a label name is provided, this will return only incoming transactions paying to addresses with the specified label.\\n\"\n+            \"\\nReturns up to 'count' most recent transactions skipping the first 'from' transactions.\\n\"\n             \"Note that the \\\"account\\\" argument and \\\"otheraccount\\\" return value have been removed in V0.17. To use this RPC with an \\\"account\\\" argument, restart\\n\"\n             \"bitcoind with -deprecatedrpc=accounts\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"dummy\\\"    (string, optional) If set, should be \\\"*\\\" for backwards compatibility.\\n\"\n+            \"1. \\\"label\\\"    (string, optional) If set, should be a valid label name to return only incoming transactions\\n\"\n+            \"              with the specified label, or \\\"*\\\" to disable filtering and return all transactions.\\n\"\n             \"2. count          (numeric, optional, default=10) The number of transactions to return\\n\"\n             \"3. skip           (numeric, optional, default=0) The number of transactions to skip\\n\"\n             \"4. include_watchonly (bool, optional, default=false) Include transactions to watch-only addresses (see 'importaddress')\\n\"\n@@ -2012,8 +2019,8 @@ UniValue listtransactions(const JSONRPCRequest& request)\n     std::string strAccount = \"*\";\n     if (!request.params[0].isNull()) {\n         strAccount = request.params[0].get_str();\n-        if (!IsDeprecatedRPCEnabled(\"accounts\") && strAccount != \"*\") {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Dummy value must be set to \\\"*\\\"\");\n+        if (!IsDeprecatedRPCEnabled(\"accounts\") && strAccount.empty()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Label argument must be a valid label name or \\\"*\\\".\");\n         }\n     }\n     int nCount = 10;\n@@ -4801,7 +4808,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"listlockunspent\",                  &listlockunspent,               {} },\n     { \"wallet\",             \"listreceivedbyaddress\",            &listreceivedbyaddress,         {\"minconf\",\"include_empty\",\"include_watchonly\",\"address_filter\"} },\n     { \"wallet\",             \"listsinceblock\",                   &listsinceblock,                {\"blockhash\",\"target_confirmations\",\"include_watchonly\",\"include_removed\"} },\n-    { \"wallet\",             \"listtransactions\",                 &listtransactions,              {\"account|dummy\",\"count\",\"skip\",\"include_watchonly\"} },\n+    { \"wallet\",             \"listtransactions\",                 &listtransactions,              {\"account|label|dummy\",\"count\",\"skip\",\"include_watchonly\"} },\n     { \"wallet\",             \"listunspent\",                      &listunspent,                   {\"minconf\",\"maxconf\",\"addresses\",\"include_unsafe\",\"query_options\"} },\n     { \"wallet\",             \"listwallets\",                      &listwallets,                   {} },\n     { \"wallet\",             \"loadwallet\",                       &loadwallet,                    {\"filename\"} },"
      },
      {
        "sha": "fc406bc1db5a24ce8ab8b020a85c4efc020c3b76",
        "filename": "test/functional/wallet_import_rescan.py",
        "status": "modified",
        "additions": 20,
        "deletions": 5,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89306ab0df93bfdf5630910bc20b1eccb7379172/test/functional/wallet_import_rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89306ab0df93bfdf5630910bc20b1eccb7379172/test/functional/wallet_import_rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_import_rescan.py?ref=89306ab0df93bfdf5630910bc20b1eccb7379172",
        "patch": "@@ -46,11 +46,11 @@ def do_import(self, timestamp):\n \n         if self.call == Call.single:\n             if self.data == Data.address:\n-                response = self.try_rpc(self.node.importaddress, address=self.address[\"address\"], rescan=rescan)\n+                response = self.try_rpc(self.node.importaddress, address=self.address[\"address\"], label=self.label, rescan=rescan)\n             elif self.data == Data.pub:\n-                response = self.try_rpc(self.node.importpubkey, pubkey=self.address[\"pubkey\"], rescan=rescan)\n+                response = self.try_rpc(self.node.importpubkey, pubkey=self.address[\"pubkey\"], label=self.label, rescan=rescan)\n             elif self.data == Data.priv:\n-                response = self.try_rpc(self.node.importprivkey, privkey=self.key, rescan=rescan)\n+                response = self.try_rpc(self.node.importprivkey, privkey=self.key, label=self.label, rescan=rescan)\n             assert_equal(response, None)\n \n         elif self.call == Call.multi:\n@@ -61,18 +61,32 @@ def do_import(self, timestamp):\n                 \"timestamp\": timestamp + TIMESTAMP_WINDOW + (1 if self.rescan == Rescan.late_timestamp else 0),\n                 \"pubkeys\": [self.address[\"pubkey\"]] if self.data == Data.pub else [],\n                 \"keys\": [self.key] if self.data == Data.priv else [],\n+                \"label\": self.label,\n                 \"watchonly\": self.data != Data.priv\n             }], {\"rescan\": self.rescan in (Rescan.yes, Rescan.late_timestamp)})\n             assert_equal(response, [{\"success\": True}])\n \n     def check(self, txid=None, amount=None, confirmations=None):\n-        \"\"\"Verify that listreceivedbyaddress returns expected values.\"\"\"\n+        \"\"\"Verify that listtransactions/listreceivedbyaddress return expected values.\"\"\"\n+\n+        txs = self.node.listtransactions(label=self.label, count=10000, skip=0, include_watchonly=True)\n+        assert_equal(len(txs), self.expected_txs)\n \n         addresses = self.node.listreceivedbyaddress(minconf=0, include_watchonly=True, address_filter=self.address['address'])\n         if self.expected_txs:\n             assert_equal(len(addresses[0][\"txids\"]), self.expected_txs)\n \n         if txid is not None:\n+            tx, = [tx for tx in txs if tx[\"txid\"] == txid]\n+            assert_equal(tx[\"label\"], self.label)\n+            assert_equal(tx[\"address\"], self.address[\"address\"])\n+            assert_equal(tx[\"amount\"], amount)\n+            assert_equal(tx[\"category\"], \"receive\")\n+            assert_equal(tx[\"label\"], self.label)\n+            assert_equal(tx[\"txid\"], txid)\n+            assert_equal(tx[\"confirmations\"], confirmations)\n+            assert_equal(\"trusted\" not in tx, True)\n+\n             address, = [ad for ad in addresses if txid in ad[\"txids\"]]\n             assert_equal(address[\"address\"], self.address[\"address\"])\n             assert_equal(address[\"amount\"], self.expected_balance)\n@@ -124,7 +138,8 @@ def run_test(self):\n         # Create one transaction on node 0 with a unique amount for\n         # each possible type of wallet import RPC.\n         for i, variant in enumerate(IMPORT_VARIANTS):\n-            variant.address = self.nodes[1].getaddressinfo(self.nodes[1].getnewaddress())\n+            variant.label = \"label {} {}\".format(i, variant)\n+            variant.address = self.nodes[1].getaddressinfo(self.nodes[1].getnewaddress(variant.label))\n             variant.key = self.nodes[1].dumpprivkey(variant.address[\"address\"])\n             variant.initial_amount = 10 - (i + 1) / 4.0\n             variant.initial_txid = self.nodes[0].sendtoaddress(variant.address[\"address\"], variant.initial_amount)"
      },
      {
        "sha": "b0449f1aa4b2645d52f1548b18ef935b25ad04dd",
        "filename": "test/functional/wallet_listtransactions.py",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89306ab0df93bfdf5630910bc20b1eccb7379172/test/functional/wallet_listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89306ab0df93bfdf5630910bc20b1eccb7379172/test/functional/wallet_listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listtransactions.py?ref=89306ab0df93bfdf5630910bc20b1eccb7379172",
        "patch": "@@ -94,9 +94,10 @@ def run_test(self):\n         txid = self.nodes[1].sendtoaddress(multisig[\"address\"], 0.1)\n         self.nodes[1].generate(1)\n         self.sync_all()\n-        assert not [tx for tx in self.nodes[0].listtransactions(dummy=\"*\", count=100, skip=0, include_watchonly=False) if \"label\" in tx and tx[\"label\"] == \"watchonly\"]\n-        txs = [tx for tx in self.nodes[0].listtransactions(dummy=\"*\", count=100, skip=0, include_watchonly=True) if \"label\" in tx and tx['label'] == 'watchonly']\n-        assert_array_result(txs, {\"category\": \"receive\", \"amount\": Decimal(\"0.1\")}, {\"txid\": txid})\n+        assert len(self.nodes[0].listtransactions(label=\"watchonly\", count=100, skip=0, include_watchonly=False)) == 0\n+        assert_array_result(self.nodes[0].listtransactions(label=\"watchonly\", count=100, skip=0, include_watchonly=True),\n+                            {\"category\": \"receive\", \"amount\": Decimal(\"0.1\")},\n+                            {\"txid\": txid, \"label\": \"watchonly\"})\n \n         self.run_rbf_opt_in_test()\n "
      }
    ]
  },
  {
    "sha": "f7dbcaa72f184aabdac2fa1435a504ed001acd09",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmN2RiY2FhNzJmMTg0YWFiZGFjMmZhMTQzNWE1MDRlZDAwMWFjZDA5",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-10-13T08:15:08Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-10-18T08:06:31Z"
      },
      "message": "[doc] getblocktemplate: use SegWit in example",
      "tree": {
        "sha": "f276a8c979c3560f73f6a52b98a1c135725b2cca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f276a8c979c3560f73f6a52b98a1c135725b2cca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f7dbcaa72f184aabdac2fa1435a504ed001acd09",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAlvIPwcACgkQV/+b28ww\nEAk8jxAAgUWzW4TgXFzJCaTx8n+ztVcnFlXweYmXiqg2RiQoMRuqulFCC+iNGAqL\nPvQ9CG7vomlzBV155cevuMC/H7qE1/eE8ckCWbbj15IYXr1UYaOOk2trzoUs4uJ7\nAkTBaQ8U1lUtWqW2vVRa+WSS3AqtakmLWiihOgrrTl84oymafYk8EnkHinoQDXkb\nMN+5MRFf3lHr+APDniOg8KtPgzxzZtAfGINJVYQLFUMSZu6mkmw7cUU0EvqkTMPU\nnICwZ7mIYSN8I2KIZ4IH+s7m8Jw5U6xECb1TrPHiy+B2cnqu1a473m1rTVT3h+r2\nk8IeZvRosBVOIFw6MW2rA+W8GtOQ7BQoUbt9EHcZ0f8cNQRV+snQsiee5JZBoppA\na3dJxwwnTC0A70e1/D9Xxj5K/yBVCAI4BUxn075G+4oFP86jY8FcJDVrdgqO3j08\nw3C3EdOH7AjcXaaAlih73onY5BiqPtccifjRT+5Liv3gZcTPy9+noEffHjSbMld9\nz1pEEFAbdJRulN7/+iueJYhW8GYG3cBbFqBgEq4lWhWYpnT4aMmOp0/I1oqaM3nH\ne/0BvuICh/KPB7Lq0oDAD89NJfSlgwrdYZt/DOBFM2o7DYYMzuKJRyyDUAqYOgi1\nLXnp2H8wxN7KF3qad5gHzIFwQ5zrksDuW7lNjiUsoYVlaXZlsnY=\n=6oeN\n-----END PGP SIGNATURE-----",
        "payload": "tree f276a8c979c3560f73f6a52b98a1c135725b2cca\nparent 5b47b8efd48d233a5f7c12d1d7713dcd2f616255\nauthor Sjors Provoost <sjors@sprovoost.nl> 1539418508 +0900\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1539849991 +0700\n\n[doc] getblocktemplate: use SegWit in example\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7dbcaa72f184aabdac2fa1435a504ed001acd09",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f7dbcaa72f184aabdac2fa1435a504ed001acd09",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7dbcaa72f184aabdac2fa1435a504ed001acd09/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5b47b8efd48d233a5f7c12d1d7713dcd2f616255",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b47b8efd48d233a5f7c12d1d7713dcd2f616255",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5b47b8efd48d233a5f7c12d1d7713dcd2f616255"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "9da3c1493b1e65c8e05d3ed3511be19f19ea4ad7",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7dbcaa72f184aabdac2fa1435a504ed001acd09/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7dbcaa72f184aabdac2fa1435a504ed001acd09/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=f7dbcaa72f184aabdac2fa1435a504ed001acd09",
        "patch": "@@ -361,8 +361,8 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n             \"}\\n\"\n \n             \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getblocktemplate\", \"\")\n-            + HelpExampleRpc(\"getblocktemplate\", \"\")\n+            + HelpExampleCli(\"getblocktemplate\", \"{\\\"rules\\\": [\\\"segwit\\\"]}\")\n+            + HelpExampleRpc(\"getblocktemplate\", \"{\\\"rules\\\": [\\\"segwit\\\"]}\")\n          );\n \n     LOCK(cs_main);"
      }
    ]
  },
  {
    "sha": "1b5af2c177ee31109fdd710bc1f1f4f922cedaef",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYjVhZjJjMTc3ZWUzMTEwOWZkZDcxMGJjMWYxZjRmOTIyY2VkYWVm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-10-20T02:03:51Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-10-20T02:04:39Z"
      },
      "message": "Merge #14509: [0.17] doc: use SegWit in getblocktemplate example\n\nf7dbcaa72f [doc] getblocktemplate: use SegWit in example (Sjors Provoost)\n\nPull request description:\n\n  Backport of #14472\n\nTree-SHA512: ac0863b5f04abe2cbdbb44f376094aa6c224aecd6d3a87689a2bb5a939cb18503eab6e33bfb9814dd2129ddf1dae0118054afc8eb4c438bd390c172defab343b",
      "tree": {
        "sha": "f276a8c979c3560f73f6a52b98a1c135725b2cca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f276a8c979c3560f73f6a52b98a1c135725b2cca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1b5af2c177ee31109fdd710bc1f1f4f922cedaef",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEErGYmFy4AqCz/rolypjbpdjH3Z+AFAlvKjTcACgkQpjbpdjH3\nZ+CdxA//XEI7PSgnp2Duc+on2/APIi4i2VCM6kUs8rPk8/c68Nrg//lLTWtXWJja\n/84VVbjAsW459X7mrs14FxIaDrOnT3hf2MdrgCll2BXaSijH3YdOFTidGLEZCNUN\n7FC1z7JgBgfACTXgr+doOcQOhi6MCqoiDJfnAoI72IHEd0xPUpPD1hT5Elagv9/H\nA1LXwqlS629DmPh6X0wrtp/waHC0dSfzW6KR9+f+h15iXXmaHmRsaXTGNcYfZCqI\n2HrmHi5I8qGcFJp4zR9G7azWq34w5AO0WaV/SJXRFxLEPIuepvA8BJdhVXf2nKAX\nNZnwtK7zTN5L6AcMQ+K5iq8pGjK+VOYV10gOSWqd30yydU7M+/FAHwSAb2YMqyWY\nrr2eTQrwKMXwYwEJtzgzQAZojAJC/odIXHSV/mYcUrLGPcl0EqGdB3A+VjfCpzzH\nUkgHYP7orxtNEtebZGG5MEzhn6sIaeT0fo8z9LYkt974lON9OtBcHMeDHBzlZJVj\nMKjRy/m1NHoyokroq7uzoayAEQOZgcj3hx7AMH3foL25jKxKHT5MgZ0UQKMjd9Vm\nKPVTUbb9mTnrQYqWFDz9+7e7dpsSQ9fPuYWWF5khyClHPEV9OB1UvzqscsW8h8/4\nOIxj3EtWL71un+ekjYpdwPN2eToCGkwuiKwJCwkzZyojkaEE9HE=\n=vRUM\n-----END PGP SIGNATURE-----",
        "payload": "tree f276a8c979c3560f73f6a52b98a1c135725b2cca\nparent 5b47b8efd48d233a5f7c12d1d7713dcd2f616255\nparent f7dbcaa72f184aabdac2fa1435a504ed001acd09\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1540001031 -0700\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1540001079 -0700\n\nMerge #14509: [0.17] doc: use SegWit in getblocktemplate example\n\nf7dbcaa72f [doc] getblocktemplate: use SegWit in example (Sjors Provoost)\n\nPull request description:\n\n  Backport of #14472\n\nTree-SHA512: ac0863b5f04abe2cbdbb44f376094aa6c224aecd6d3a87689a2bb5a939cb18503eab6e33bfb9814dd2129ddf1dae0118054afc8eb4c438bd390c172defab343b\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b5af2c177ee31109fdd710bc1f1f4f922cedaef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1b5af2c177ee31109fdd710bc1f1f4f922cedaef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b5af2c177ee31109fdd710bc1f1f4f922cedaef/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5b47b8efd48d233a5f7c12d1d7713dcd2f616255",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b47b8efd48d233a5f7c12d1d7713dcd2f616255",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5b47b8efd48d233a5f7c12d1d7713dcd2f616255"
      },
      {
        "sha": "f7dbcaa72f184aabdac2fa1435a504ed001acd09",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7dbcaa72f184aabdac2fa1435a504ed001acd09",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f7dbcaa72f184aabdac2fa1435a504ed001acd09"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "9da3c1493b1e65c8e05d3ed3511be19f19ea4ad7",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b5af2c177ee31109fdd710bc1f1f4f922cedaef/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b5af2c177ee31109fdd710bc1f1f4f922cedaef/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=1b5af2c177ee31109fdd710bc1f1f4f922cedaef",
        "patch": "@@ -361,8 +361,8 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n             \"}\\n\"\n \n             \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getblocktemplate\", \"\")\n-            + HelpExampleRpc(\"getblocktemplate\", \"\")\n+            + HelpExampleCli(\"getblocktemplate\", \"{\\\"rules\\\": [\\\"segwit\\\"]}\")\n+            + HelpExampleRpc(\"getblocktemplate\", \"{\\\"rules\\\": [\\\"segwit\\\"]}\")\n          );\n \n     LOCK(cs_main);"
      }
    ]
  },
  {
    "sha": "06544faff0164051d2654d6aabb86f555fd2e86b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNjU0NGZhZmYwMTY0MDUxZDI2NTRkNmFhYmI4NmY1NTVmZDJlODZi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-08-21T23:23:21Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-25T02:01:31Z"
      },
      "message": "qa: Add TestNode::assert_debug_log\n\nGithub-Pull: #14024\nRebased-From: fa3e9f7627784ee00980590e5bf044a0e1249999",
      "tree": {
        "sha": "432e97ff9e6e406c376eb634acae18eb5041d67e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/432e97ff9e6e406c376eb634acae18eb5041d67e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/06544faff0164051d2654d6aabb86f555fd2e86b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06544faff0164051d2654d6aabb86f555fd2e86b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/06544faff0164051d2654d6aabb86f555fd2e86b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06544faff0164051d2654d6aabb86f555fd2e86b/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5b47b8efd48d233a5f7c12d1d7713dcd2f616255",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b47b8efd48d233a5f7c12d1d7713dcd2f616255",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5b47b8efd48d233a5f7c12d1d7713dcd2f616255"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 25,
      "deletions": 2
    },
    "files": [
      {
        "sha": "12bc62131f6579c83f3054acf55917200d50f93e",
        "filename": "test/functional/p2p_invalid_tx.py",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06544faff0164051d2654d6aabb86f555fd2e86b/test/functional/p2p_invalid_tx.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06544faff0164051d2654d6aabb86f555fd2e86b/test/functional/p2p_invalid_tx.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_tx.py?ref=06544faff0164051d2654d6aabb86f555fd2e86b",
        "patch": "@@ -136,11 +136,16 @@ def run_test(self):\n \n         # restart node with sending BIP61 messages disabled, check that it disconnects without sending the reject message\n         self.log.info('Test a transaction that is rejected, with BIP61 disabled')\n-        self.restart_node(0, ['-enablebip61=0','-persistmempool=0'])\n+        self.restart_node(0, ['-enablebip61=0', '-persistmempool=0'])\n         self.reconnect_p2p(num_connections=1)\n-        node.p2p.send_txs_and_test([tx1], node, success=False, expect_disconnect=True)\n+        with node.assert_debug_log(expected_msgs=[\n+                \"{} from peer=0 was not accepted: mandatory-script-verify-flag-failed (Invalid OP_IF construction) (code 16)\".format(tx1.hash),\n+                \"disconnecting peer=0\",\n+        ]):\n+            node.p2p.send_txs_and_test([tx1], node, success=False, expect_disconnect=True)\n         # send_txs_and_test will have waited for disconnect, so we can safely check that no reject has been received\n         assert_equal(node.p2p.reject_code_received, None)\n \n+\n if __name__ == '__main__':\n     InvalidTxRequestTest().main()"
      },
      {
        "sha": "a831fdcd5d2b606f6fbb8396d31f66aaed4a90e6",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06544faff0164051d2654d6aabb86f555fd2e86b/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06544faff0164051d2654d6aabb86f555fd2e86b/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=06544faff0164051d2654d6aabb86f555fd2e86b",
        "patch": "@@ -4,6 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Class for bitcoind node under test\"\"\"\n \n+import contextlib\n import decimal\n import errno\n from enum import Enum\n@@ -229,6 +230,23 @@ def is_node_stopped(self):\n     def wait_until_stopped(self, timeout=BITCOIND_PROC_WAIT_TIMEOUT):\n         wait_until(self.is_node_stopped, timeout=timeout)\n \n+    @contextlib.contextmanager\n+    def assert_debug_log(self, expected_msgs):\n+        debug_log = os.path.join(self.datadir, 'regtest', 'debug.log')\n+        with open(debug_log, encoding='utf-8') as dl:\n+            dl.seek(0, 2)\n+            prev_size = dl.tell()\n+        try:\n+            yield\n+        finally:\n+            with open(debug_log, encoding='utf-8') as dl:\n+                dl.seek(prev_size)\n+                log = dl.read()\n+            print_log = \" - \" + \"\\n - \".join(log.splitlines())\n+            for expected_msg in expected_msgs:\n+                if re.search(re.escape(expected_msg), log, flags=re.MULTILINE) is None:\n+                    self._raise_assertion_error('Expected message \"{}\" does not partially match log:\\n\\n{}\\n\\n'.format(expected_msg, print_log))\n+\n     def assert_start_raises_init_error(self, extra_args=None, expected_msg=None, match=ErrorMatch.FULL_TEXT, *args, **kwargs):\n         \"\"\"Attempt to start the node and expect it to raise an error.\n "
      }
    ]
  },
  {
    "sha": "b72fbabe17a8639ffab2ef02ff84d0ee66c30fae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNzJmYmFiZTE3YTg2MzlmZmFiMmVmMDJmZjg0ZDBlZTY2YzMwZmFl",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2018-09-13T20:59:31Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-25T02:01:40Z"
      },
      "message": "[qa] Use correct python index slices in example test\n\nGithub-Pull: #14215\nRebased-From: 9dcb6763fb6851df6572e75278a41029fbfe8809",
      "tree": {
        "sha": "6b50d1bd8ac5071364343d80fbe3236e056dffd1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6b50d1bd8ac5071364343d80fbe3236e056dffd1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b72fbabe17a8639ffab2ef02ff84d0ee66c30fae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b72fbabe17a8639ffab2ef02ff84d0ee66c30fae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b72fbabe17a8639ffab2ef02ff84d0ee66c30fae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b72fbabe17a8639ffab2ef02ff84d0ee66c30fae/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "06544faff0164051d2654d6aabb86f555fd2e86b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06544faff0164051d2654d6aabb86f555fd2e86b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/06544faff0164051d2654d6aabb86f555fd2e86b"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "3bdb3b4f1ca2ca83cd961b187ae46e7fbb446a6b",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b72fbabe17a8639ffab2ef02ff84d0ee66c30fae/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b72fbabe17a8639ffab2ef02ff84d0ee66c30fae/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=b72fbabe17a8639ffab2ef02ff84d0ee66c30fae",
        "patch": "@@ -111,7 +111,7 @@ def setup_network(self):\n         # sync_all() should not include node2, since we're not expecting it to\n         # sync.\n         connect_nodes(self.nodes[0], 1)\n-        self.sync_all([self.nodes[0:1]])\n+        self.sync_all([self.nodes[0:2]])\n \n     # Use setup_nodes() to customize the node start behaviour (for example if\n     # you don't want to start all nodes at the start of the test).\n@@ -135,7 +135,7 @@ def run_test(self):\n \n         # Generating a block on one of the nodes will get us out of IBD\n         blocks = [int(self.nodes[0].generate(nblocks=1)[0], 16)]\n-        self.sync_all([self.nodes[0:1]])\n+        self.sync_all([self.nodes[0:2]])\n \n         # Notice above how we called an RPC by calling a method with the same\n         # name on the node object. Notice also how we used a keyword argument"
      }
    ]
  },
  {
    "sha": "7ff32a6b985054558851fc451879309a56753bdd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZmYzMmE2Yjk4NTA1NDU1ODg1MWZjNDUxODc5MzA5YTU2NzUzYmRk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-08-24T18:02:43Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-25T02:01:47Z"
      },
      "message": "qa: Add some actual witness in rpc_rawtransaction\n\nGithub-Pull: #14052\nRebased-From: fae040010deda9404b15b214cec2a099fb831253",
      "tree": {
        "sha": "0657c6a563d9359550fe2124b24376c030e062a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0657c6a563d9359550fe2124b24376c030e062a0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7ff32a6b985054558851fc451879309a56753bdd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ff32a6b985054558851fc451879309a56753bdd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7ff32a6b985054558851fc451879309a56753bdd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ff32a6b985054558851fc451879309a56753bdd/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b72fbabe17a8639ffab2ef02ff84d0ee66c30fae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b72fbabe17a8639ffab2ef02ff84d0ee66c30fae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b72fbabe17a8639ffab2ef02ff84d0ee66c30fae"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8169f2b9814411e128811883aee86315ffbf08ed",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ff32a6b985054558851fc451879309a56753bdd/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ff32a6b985054558851fc451879309a56753bdd/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=7ff32a6b985054558851fc451879309a56753bdd",
        "patch": "@@ -358,7 +358,7 @@ def run_test(self):\n \n         # decoderawtransaction tests\n         # witness transaction\n-        encrawtx = \"010000000001010000000000000072c1a6a246ae63f74f931e8365e15a089c68d61900000000000000000000ffffffff0100e1f50500000000000000000000\"\n+        encrawtx = \"010000000001010000000000000072c1a6a246ae63f74f931e8365e15a089c68d61900000000000000000000ffffffff0100e1f50500000000000102616100000000\"\n         decrawtx = self.nodes[0].decoderawtransaction(encrawtx, True) # decode as witness transaction\n         assert_equal(decrawtx['vout'][0]['value'], Decimal('1.00000000'))\n         assert_raises_rpc_error(-22, 'TX decode failed', self.nodes[0].decoderawtransaction, encrawtx, False) # force decode as non-witness transaction"
      }
    ]
  },
  {
    "sha": "96dc93686237facede4b53e4962295ffd709c85e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NmRjOTM2ODYyMzdmYWNlZGU0YjUzZTQ5NjIyOTVmZmQ3MDljODVl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-08-29T15:50:04Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-25T02:01:54Z"
      },
      "message": "scripted-diff: Pass node into p2p_segwit acceptance tests\n\n-BEGIN VERIFY SCRIPT-\nsed -i --regexp-extended -e 's/(test_witness_block|test_transaction_acceptance)\\((self\\.nodes\\[.\\])\\.rpc/\\1(\\2/g' test/functional/p2p_segwit.py\n-END VERIFY SCRIPT-\n\nGithub-Pull: #14101\nRebased-From: 749ba35e7c9fbc21dbea27fd1be102b91313d132",
      "tree": {
        "sha": "769e47f25e95afd8f57b644e2a68b254200c1519",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/769e47f25e95afd8f57b644e2a68b254200c1519"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/96dc93686237facede4b53e4962295ffd709c85e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96dc93686237facede4b53e4962295ffd709c85e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/96dc93686237facede4b53e4962295ffd709c85e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96dc93686237facede4b53e4962295ffd709c85e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7ff32a6b985054558851fc451879309a56753bdd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ff32a6b985054558851fc451879309a56753bdd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7ff32a6b985054558851fc451879309a56753bdd"
      }
    ],
    "stats": {
      "total": 214,
      "additions": 107,
      "deletions": 107
    },
    "files": [
      {
        "sha": "82eacc84f4b02726e32616a81666410c86ff4537",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 107,
        "deletions": 107,
        "changes": 214,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96dc93686237facede4b53e4962295ffd709c85e/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96dc93686237facede4b53e4962295ffd709c85e/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=96dc93686237facede4b53e4962295ffd709c85e",
        "patch": "@@ -349,7 +349,7 @@ def test_unnecessary_witness_before_segwit_activation(self):\n         self.update_witness_block_with_transactions(block, [tx])\n         # Sending witness data before activation is not allowed (anti-spam\n         # rule).\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n         wait_until(lambda: 'reject' in self.test_node.last_message and self.test_node.last_message[\"reject\"].reason ==  b\"unexpected-witness\")\n \n         # But it should not be permanently marked bad...\n@@ -380,20 +380,20 @@ def test_block_relay(self):\n \n         self.test_node.announce_block_and_wait_for_getdata(block1, use_header=False)\n         assert(self.test_node.last_message[\"getdata\"].inv[0].type == blocktype)\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block1, True)\n+        test_witness_block(self.nodes[0], self.test_node, block1, True)\n \n         block2 = self.build_next_block(version=4)\n         block2.solve()\n \n         self.test_node.announce_block_and_wait_for_getdata(block2, use_header=True)\n         assert(self.test_node.last_message[\"getdata\"].inv[0].type == blocktype)\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block2, True)\n+        test_witness_block(self.nodes[0], self.test_node, block2, True)\n \n         block3 = self.build_next_block(version=(VB_TOP_BITS | (1 << 15)))\n         block3.solve()\n         self.test_node.announce_block_and_wait_for_getdata(block3, use_header=True)\n         assert(self.test_node.last_message[\"getdata\"].inv[0].type == blocktype)\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block3, True)\n+        test_witness_block(self.nodes[0], self.test_node, block3, True)\n \n         # Check that we can getdata for witness blocks or regular blocks,\n         # and the right thing happens.\n@@ -423,7 +423,7 @@ def test_block_relay(self):\n             # This gives us a witness commitment.\n             assert(len(block.vtx[0].wit.vtxinwit) == 1)\n             assert(len(block.vtx[0].wit.vtxinwit[0].scriptWitness.stack) == 1)\n-            test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+            test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n             # Now try to retrieve it...\n             rpc_block = self.nodes[0].getblock(block.hash, False)\n             non_wit_block = self.test_node.request_block(block.sha256, 2)\n@@ -640,11 +640,11 @@ def test_witness_tx_relay_before_segwit_activation(self):\n         # its from)\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n         assert_equal(len(self.nodes[1].getrawmempool()), 0)\n-        test_transaction_acceptance(self.nodes[0].rpc, self.old_node, tx, with_witness=True, accepted=False)\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=True, accepted=False)\n+        test_transaction_acceptance(self.nodes[0], self.old_node, tx, with_witness=True, accepted=False)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=True, accepted=False)\n \n         # But eliminating the witness should fix it\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=False, accepted=True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=False, accepted=True)\n \n         # Cleanup: mine the first transaction and update utxo\n         self.nodes[0].generate(1)\n@@ -674,7 +674,7 @@ def test_standardness_v0(self):\n         p2sh_tx.rehash()\n \n         # Mine it on test_node to create the confirmed output.\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2sh_tx, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, p2sh_tx, with_witness=True, accepted=True)\n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n \n@@ -689,7 +689,7 @@ def test_standardness_v0(self):\n \n         # This is always accepted, since the mempool policy is to consider segwit as always active\n         # and thus allow segwit outputs\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, tx, with_witness=True, accepted=True)\n \n         # Now create something that looks like a P2PKH output. This won't be spendable.\n         script_pubkey = CScript([OP_0, hash160(witness_hash)])\n@@ -701,7 +701,7 @@ def test_standardness_v0(self):\n         tx2.wit.vtxinwit[0].scriptWitness.stack = [witness_program]\n         tx2.rehash()\n \n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx2, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, tx2, with_witness=True, accepted=True)\n \n         # Now update self.utxo for later tests.\n         tx3 = CTransaction()\n@@ -723,7 +723,7 @@ def test_standardness_v0(self):\n             tx3.vout = [tx3_out]\n             tx3.rehash()\n             assert_equal(self.nodes[0].testmempoolaccept([bytes_to_hex_str(tx3.serialize_with_witness())]), [{'txid': tx3.hash, 'allowed': True}])\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx3, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx3, with_witness=True, accepted=True)\n \n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n@@ -760,10 +760,10 @@ def test_p2sh_witness(self):\n         tx.rehash()\n \n         # Verify mempool acceptance and block validity\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=False, accepted=True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=False, accepted=True)\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True, with_witness=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True, with_witness=True)\n         sync_blocks(self.nodes)\n \n         # Now test attempts to spend the output.\n@@ -777,12 +777,12 @@ def test_p2sh_witness(self):\n         # will require a witness to spend a witness program regardless of\n         # segwit activation.  Note that older bitcoind's that are not\n         # segwit-aware would also reject this for failing CLEANSTACK.\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, spend_tx, with_witness=False, accepted=False)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, spend_tx, with_witness=False, accepted=False)\n \n         # Try to put the witness script in the script_sig, should also fail.\n         spend_tx.vin[0].script_sig = CScript([p2wsh_pubkey, b'a'])\n         spend_tx.rehash()\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, spend_tx, with_witness=False, accepted=False)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, spend_tx, with_witness=False, accepted=False)\n \n         # Now put the witness script in the witness, should succeed after\n         # segwit activates.\n@@ -792,15 +792,15 @@ def test_p2sh_witness(self):\n         spend_tx.wit.vtxinwit[0].scriptWitness.stack = [b'a', witness_program]\n \n         # Verify mempool acceptance\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, spend_tx, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, spend_tx, with_witness=True, accepted=True)\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [spend_tx])\n \n         # If we're after activation, then sending this with witnesses should be valid.\n         # This no longer works before activation, because SCRIPT_VERIFY_WITNESS\n         # is always set.\n         # TODO: rewrite this test to make clear that it only works after activation.\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Update self.utxo\n         self.utxo.pop(0)\n@@ -821,7 +821,7 @@ def test_witness_commitments(self):\n         assert(msg_witness_block(block).serialize() != msg_block(block).serialize())\n \n         # This empty block should be valid.\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Try to tweak the nonce\n         block_2 = self.build_next_block()\n@@ -832,7 +832,7 @@ def test_witness_commitments(self):\n         assert(block_2.vtx[0].vout[-1] != block.vtx[0].vout[-1])\n \n         # This should also be valid.\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block_2, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block_2, accepted=True)\n \n         # Now test commitments with actual transactions\n         tx = CTransaction()\n@@ -864,7 +864,7 @@ def test_witness_commitments(self):\n         block_3.rehash()\n         block_3.solve()\n \n-        test_witness_block(self.nodes[0].rpc, self.test_node, block_3, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block_3, accepted=False)\n \n         # Add a different commitment with different nonce, but in the\n         # right location, and with some funds burned(!).\n@@ -878,7 +878,7 @@ def test_witness_commitments(self):\n         block_3.rehash()\n         assert(len(block_3.vtx[0].vout) == 4)  # 3 OP_returns\n         block_3.solve()\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block_3, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block_3, accepted=True)\n \n         # Finally test that a block with no witness transactions can\n         # omit the commitment.\n@@ -890,7 +890,7 @@ def test_witness_commitments(self):\n         block_4.vtx.append(tx3)\n         block_4.hashMerkleRoot = block_4.calc_merkle_root()\n         block_4.solve()\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block_4, with_witness=False, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block_4, with_witness=False, accepted=True)\n \n         # Update available utxo's for use in later test.\n         self.utxo.pop(0)\n@@ -930,11 +930,11 @@ def test_block_malleability(self):\n         # Change the nonce -- should not cause the block to be permanently\n         # failed\n         block.vtx[0].wit.vtxinwit[0].scriptWitness.stack = [ser_uint256(1)]\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Changing the witness reserved value doesn't change the block hash\n         block.vtx[0].wit.vtxinwit[0].scriptWitness.stack = [ser_uint256(0)]\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n     @subtest\n     def test_witness_block_size(self):\n@@ -998,7 +998,7 @@ def test_witness_block_size(self):\n         # limit\n         assert(len(block.serialize(True)) > 2 * 1024 * 1024)\n \n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Now resize the second transaction to make the block fit.\n         cur_length = len(block.vtx[-1].wit.vtxinwit[0].scriptWitness.stack[0])\n@@ -1008,7 +1008,7 @@ def test_witness_block_size(self):\n         block.solve()\n         assert(get_virtual_size(block) == MAX_BLOCK_BASE_SIZE)\n \n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Update available utxo's\n         self.utxo.pop(0)\n@@ -1071,7 +1071,7 @@ def test_extra_witness_data(self):\n         self.update_witness_block_with_transactions(block, [tx])\n \n         # Extra witness data should not be allowed.\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Try extra signature data.  Ok if we're not spending a witness output.\n         block.vtx[1].wit.vtxinwit = []\n@@ -1080,7 +1080,7 @@ def test_extra_witness_data(self):\n         add_witness_commitment(block)\n         block.solve()\n \n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Now try extra witness/signature data on an input that DOES require a\n         # witness\n@@ -1096,7 +1096,7 @@ def test_extra_witness_data(self):\n         self.update_witness_block_with_transactions(block, [tx2])\n \n         # This has extra witness data, so it should fail.\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Now get rid of the extra witness, but add extra scriptSig data\n         tx2.vin[0].scriptSig = CScript([OP_TRUE])\n@@ -1108,7 +1108,7 @@ def test_extra_witness_data(self):\n         block.solve()\n \n         # This has extra signature data for a witness input, so it should fail.\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Now get rid of the extra scriptsig on the witness input, and verify\n         # success (even with extra scriptsig data in the non-witness input)\n@@ -1117,7 +1117,7 @@ def test_extra_witness_data(self):\n         add_witness_commitment(block)\n         block.solve()\n \n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Update utxo for later tests\n         self.utxo.pop(0)\n@@ -1147,14 +1147,14 @@ def test_max_witness_push_length(self):\n         tx2.rehash()\n \n         self.update_witness_block_with_transactions(block, [tx, tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Now reduce the length of the stack element\n         tx2.wit.vtxinwit[0].scriptWitness.stack[0] = b'a' * (MAX_SCRIPT_ELEMENT_SIZE)\n \n         add_witness_commitment(block)\n         block.solve()\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Update the utxo for later tests\n         self.utxo.pop()\n@@ -1188,7 +1188,7 @@ def test_max_witness_program_length(self):\n \n         self.update_witness_block_with_transactions(block, [tx, tx2])\n \n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Try again with one less byte in the witness program\n         witness_program = CScript([b'a' * 520] * 19 + [OP_DROP] * 62 + [OP_TRUE])\n@@ -1203,7 +1203,7 @@ def test_max_witness_program_length(self):\n         tx2.rehash()\n         block.vtx = [block.vtx[0]]\n         self.update_witness_block_with_transactions(block, [tx, tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         self.utxo.pop()\n         self.utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n@@ -1227,7 +1227,7 @@ def test_witness_input_length(self):\n \n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Try various ways to spend tx that should all break.\n         # This \"broken\" transaction serializer will not normalize\n@@ -1262,15 +1262,15 @@ def serialize_with_witness(self):\n \n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Now try using a too short vtxinwit\n         tx2.wit.vtxinwit.pop()\n         tx2.wit.vtxinwit.pop()\n \n         block.vtx = [block.vtx[0]]\n         self.update_witness_block_with_transactions(block, [tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Now make one of the intermediate witnesses be incorrect\n         tx2.wit.vtxinwit.append(CTxInWitness())\n@@ -1279,13 +1279,13 @@ def serialize_with_witness(self):\n \n         block.vtx = [block.vtx[0]]\n         self.update_witness_block_with_transactions(block, [tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Fix the broken witness and the block should be accepted.\n         tx2.wit.vtxinwit[5].scriptWitness.stack = [b'a', witness_program]\n         block.vtx = [block.vtx[0]]\n         self.update_witness_block_with_transactions(block, [tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         self.utxo.pop()\n         self.utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n@@ -1314,11 +1314,11 @@ def test_tx_relay_after_segwit_activation(self):\n         # Verify that unnecessary witnesses are rejected.\n         self.test_node.announce_tx_and_wait_for_getdata(tx)\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=True, accepted=False)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=True, accepted=False)\n \n         # Verify that removing the witness succeeds.\n         self.test_node.announce_tx_and_wait_for_getdata(tx)\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=False, accepted=True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=False, accepted=True)\n \n         # Now try to add extra witness data to a valid witness tx.\n         witness_program = CScript([OP_TRUE])\n@@ -1343,24 +1343,24 @@ def test_tx_relay_after_segwit_activation(self):\n \n         # Node will not be blinded to the transaction\n         self.std_node.announce_tx_and_wait_for_getdata(tx3)\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx3, True, False, b'tx-size')\n+        test_transaction_acceptance(self.nodes[1], self.std_node, tx3, True, False, b'tx-size')\n         self.std_node.announce_tx_and_wait_for_getdata(tx3)\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx3, True, False, b'tx-size')\n+        test_transaction_acceptance(self.nodes[1], self.std_node, tx3, True, False, b'tx-size')\n \n         # Remove witness stuffing, instead add extra witness push on stack\n         tx3.vout[0] = CTxOut(tx2.vout[0].nValue - 1000, CScript([OP_TRUE, OP_DROP] * 15 + [OP_TRUE]))\n         tx3.wit.vtxinwit[0].scriptWitness.stack = [CScript([CScriptNum(1)]), witness_program]\n         tx3.rehash()\n \n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx2, with_witness=True, accepted=True)\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx3, with_witness=True, accepted=False)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx2, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx3, with_witness=True, accepted=False)\n \n         # Get rid of the extra witness, and verify acceptance.\n         tx3.wit.vtxinwit[0].scriptWitness.stack = [witness_program]\n         # Also check that old_node gets a tx announcement, even though this is\n         # a witness transaction.\n         self.old_node.wait_for_inv([CInv(1, tx2.sha256)])  # wait until tx2 was inv'ed\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx3, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx3, with_witness=True, accepted=True)\n         self.old_node.wait_for_inv([CInv(1, tx3.sha256)])\n \n         # Test that getrawtransaction returns correct witness information\n@@ -1400,7 +1400,7 @@ def test_segwit_versions(self):\n             tx.rehash()\n             block = self.build_next_block()\n             self.update_witness_block_with_transactions(block, [tx])\n-            test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+            test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n             self.utxo.pop(0)\n             for i in range(NUM_SEGWIT_VERSIONS):\n                 self.utxo.append(UTXO(tx.sha256, i, split_value))\n@@ -1417,8 +1417,8 @@ def test_segwit_versions(self):\n             tx.vin = [CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\")]\n             tx.vout = [CTxOut(self.utxo[0].nValue - 1000, script_pubkey)]\n             tx.rehash()\n-            test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx, with_witness=True, accepted=False)\n-            test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=True, accepted=True)\n+            test_transaction_acceptance(self.nodes[1], self.std_node, tx, with_witness=True, accepted=False)\n+            test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=True, accepted=True)\n             self.utxo.pop(0)\n             temp_utxo.append(UTXO(tx.sha256, 0, tx.vout[0].nValue))\n \n@@ -1437,8 +1437,8 @@ def test_segwit_versions(self):\n         tx2.rehash()\n         # Gets accepted to test_node, because standardness of outputs isn't\n         # checked with fRequireStandard\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx2, with_witness=True, accepted=True)\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx2, with_witness=True, accepted=False)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx2, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, tx2, with_witness=True, accepted=False)\n         temp_utxo.pop()  # last entry in temp_utxo was the output we just spent\n         temp_utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n \n@@ -1454,15 +1454,15 @@ def test_segwit_versions(self):\n         tx3.rehash()\n         # Spending a higher version witness output is not allowed by policy,\n         # even with fRequireStandard=false.\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx3, with_witness=True, accepted=False)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx3, with_witness=True, accepted=False)\n         self.test_node.sync_with_ping()\n         with mininode_lock:\n             assert(b\"reserved for soft-fork upgrades\" in self.test_node.last_message[\"reject\"].reason)\n \n         # Building a block with the transaction must be valid, however.\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx2, tx3])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n         sync_blocks(self.nodes)\n \n         # Add utxo to our list\n@@ -1480,7 +1480,7 @@ def test_premature_coinbase_witness_spend(self):\n         # This next line will rehash the coinbase and update the merkle\n         # root, and solve.\n         self.update_witness_block_with_transactions(block, [])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         spend_tx = CTransaction()\n         spend_tx.vin = [CTxIn(COutPoint(block.vtx[0].sha256, 0), b\"\")]\n@@ -1494,13 +1494,13 @@ def test_premature_coinbase_witness_spend(self):\n         sync_blocks(self.nodes)\n         block2 = self.build_next_block()\n         self.update_witness_block_with_transactions(block2, [spend_tx])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block2, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block2, accepted=False)\n \n         # Advancing one more block should allow the spend.\n         self.nodes[0].generate(1)\n         block2 = self.build_next_block()\n         self.update_witness_block_with_transactions(block2, [spend_tx])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block2, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block2, accepted=True)\n         sync_blocks(self.nodes)\n \n     @subtest\n@@ -1532,7 +1532,7 @@ def test_uncompressed_pubkey(self):\n         # Confirm it in a block.\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Now try to spend it. Send it to a P2WSH output, which we'll\n         # use in the next test.\n@@ -1551,11 +1551,11 @@ def test_uncompressed_pubkey(self):\n         tx2.rehash()\n \n         # Should fail policy test.\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx2, True, False, b'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx2, True, False, b'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n         # But passes consensus.\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Test 2: P2WSH\n         # Try to spend the P2WSH output created in last test.\n@@ -1571,11 +1571,11 @@ def test_uncompressed_pubkey(self):\n         sign_p2pk_witness_input(witness_program, tx3, 0, SIGHASH_ALL, tx2.vout[0].nValue, key)\n \n         # Should fail policy test.\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx3, True, False, b'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx3, True, False, b'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n         # But passes consensus.\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx3])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Test 3: P2SH(P2WSH)\n         # Try to spend the P2SH output created in the last test.\n@@ -1588,10 +1588,10 @@ def test_uncompressed_pubkey(self):\n         sign_p2pk_witness_input(witness_program, tx4, 0, SIGHASH_ALL, tx3.vout[0].nValue, key)\n \n         # Should fail policy test.\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx4, True, False, b'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx4, True, False, b'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx4])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Test 4: Uncompressed pubkeys should still be valid in non-segwit\n         # transactions.\n@@ -1603,10 +1603,10 @@ def test_uncompressed_pubkey(self):\n         tx5.vin[0].scriptSig = CScript([signature, pubkey])\n         tx5.rehash()\n         # Should pass policy and consensus.\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx5, True, True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx5, True, True)\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx5])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n         self.utxo.append(UTXO(tx5.sha256, 0, tx5.vout[0].nValue))\n \n     @subtest\n@@ -1626,11 +1626,11 @@ def test_signature_version_1(self):\n         tx.vout.append(CTxOut(self.utxo[0].nValue - 1000, script_pubkey))\n         tx.rehash()\n \n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=True, accepted=True)\n         # Mine this transaction in preparation for following tests.\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n         sync_blocks(self.nodes)\n         self.utxo.pop(0)\n \n@@ -1647,19 +1647,19 @@ def test_signature_version_1(self):\n                 # Too-large input value\n                 sign_p2pk_witness_input(witness_program, tx, 0, hashtype, prev_utxo.nValue + 1, key)\n                 self.update_witness_block_with_transactions(block, [tx])\n-                test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+                test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n                 # Too-small input value\n                 sign_p2pk_witness_input(witness_program, tx, 0, hashtype, prev_utxo.nValue - 1, key)\n                 block.vtx.pop()  # remove last tx\n                 self.update_witness_block_with_transactions(block, [tx])\n-                test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+                test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n                 # Now try correct value\n                 sign_p2pk_witness_input(witness_program, tx, 0, hashtype, prev_utxo.nValue, key)\n                 block.vtx.pop()\n                 self.update_witness_block_with_transactions(block, [tx])\n-                test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+                test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n                 prev_utxo = UTXO(tx.sha256, 0, tx.vout[0].nValue)\n \n@@ -1683,7 +1683,7 @@ def test_signature_version_1(self):\n \n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         block = self.build_next_block()\n         used_sighash_single_out_of_bounds = False\n@@ -1725,15 +1725,15 @@ def test_signature_version_1(self):\n             # Test the block periodically, if we're close to maxblocksize\n             if (get_virtual_size(block) > MAX_BLOCK_BASE_SIZE - 1000):\n                 self.update_witness_block_with_transactions(block, [])\n-                test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+                test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n                 block = self.build_next_block()\n \n         if (not used_sighash_single_out_of_bounds):\n             self.log.info(\"WARNING: this test run didn't attempt SIGHASH_SINGLE with out-of-bounds index value\")\n         # Test the transactions we've added to the block\n         if (len(block.vtx) > 1):\n             self.update_witness_block_with_transactions(block, [])\n-            test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+            test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Now test witness version 0 P2PKH transactions\n         pubkeyhash = hash160(pubkey)\n@@ -1755,7 +1755,7 @@ def test_signature_version_1(self):\n         tx2.vin[0].scriptSig = CScript([signature, pubkey])\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx, tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Move the signature to the witness.\n         block.vtx.pop()\n@@ -1765,7 +1765,7 @@ def test_signature_version_1(self):\n         tx2.rehash()\n \n         self.update_witness_block_with_transactions(block, [tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         temp_utxos.pop(0)\n \n@@ -1786,7 +1786,7 @@ def test_signature_version_1(self):\n             index += 1\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         for i in range(len(tx.vout)):\n             self.utxo.append(UTXO(tx.sha256, i, tx.vout[i].nValue))\n@@ -1808,7 +1808,7 @@ def test_non_standard_witness_blinding(self):\n         tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n         tx.vout.append(CTxOut(self.utxo[0].nValue - 1000, script_pubkey))\n         tx.rehash()\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, False, True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx, False, True)\n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n \n@@ -1825,18 +1825,18 @@ def test_non_standard_witness_blinding(self):\n         tx2.rehash()\n         # This will be rejected due to a policy check:\n         # No witness is allowed, since it is not a witness program but a p2sh program\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx2, True, False, b'bad-witness-nonstandard')\n+        test_transaction_acceptance(self.nodes[1], self.std_node, tx2, True, False, b'bad-witness-nonstandard')\n \n         # If we send without witness, it should be accepted.\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx2, False, True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, tx2, False, True)\n \n         # Now create a new anyone-can-spend utxo for the next test.\n         tx3 = CTransaction()\n         tx3.vin.append(CTxIn(COutPoint(tx2.sha256, 0), CScript([p2sh_program])))\n         tx3.vout.append(CTxOut(tx2.vout[0].nValue - 1000, CScript([OP_TRUE, OP_DROP] * 15 + [OP_TRUE])))\n         tx3.rehash()\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx2, False, True)\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx3, False, True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx2, False, True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx3, False, True)\n \n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n@@ -1872,7 +1872,7 @@ def test_non_standard_witness(self):\n             tx.vout.append(CTxOut(outputvalue, CScript([OP_HASH160, p2sh, OP_EQUAL])))\n         tx.rehash()\n         txid = tx.sha256\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=False, accepted=True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=False, accepted=True)\n \n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n@@ -1897,45 +1897,45 @@ def test_non_standard_witness(self):\n         # Testing native P2WSH\n         # Witness stack size, excluding witnessScript, over 100 is non-standard\n         p2wsh_txs[0].wit.vtxinwit[0].scriptWitness.stack = [pad] * 101 + [scripts[0]]\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2wsh_txs[0], True, False, b'bad-witness-nonstandard')\n+        test_transaction_acceptance(self.nodes[1], self.std_node, p2wsh_txs[0], True, False, b'bad-witness-nonstandard')\n         # Non-standard nodes should accept\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2wsh_txs[0], True, True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, p2wsh_txs[0], True, True)\n \n         # Stack element size over 80 bytes is non-standard\n         p2wsh_txs[1].wit.vtxinwit[0].scriptWitness.stack = [pad * 81] * 100 + [scripts[1]]\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2wsh_txs[1], True, False, b'bad-witness-nonstandard')\n+        test_transaction_acceptance(self.nodes[1], self.std_node, p2wsh_txs[1], True, False, b'bad-witness-nonstandard')\n         # Non-standard nodes should accept\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2wsh_txs[1], True, True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, p2wsh_txs[1], True, True)\n         # Standard nodes should accept if element size is not over 80 bytes\n         p2wsh_txs[1].wit.vtxinwit[0].scriptWitness.stack = [pad * 80] * 100 + [scripts[1]]\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2wsh_txs[1], True, True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, p2wsh_txs[1], True, True)\n \n         # witnessScript size at 3600 bytes is standard\n         p2wsh_txs[2].wit.vtxinwit[0].scriptWitness.stack = [pad, pad, scripts[2]]\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2wsh_txs[2], True, True)\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2wsh_txs[2], True, True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, p2wsh_txs[2], True, True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, p2wsh_txs[2], True, True)\n \n         # witnessScript size at 3601 bytes is non-standard\n         p2wsh_txs[3].wit.vtxinwit[0].scriptWitness.stack = [pad, pad, pad, scripts[3]]\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2wsh_txs[3], True, False, b'bad-witness-nonstandard')\n+        test_transaction_acceptance(self.nodes[1], self.std_node, p2wsh_txs[3], True, False, b'bad-witness-nonstandard')\n         # Non-standard nodes should accept\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2wsh_txs[3], True, True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, p2wsh_txs[3], True, True)\n \n         # Repeating the same tests with P2SH-P2WSH\n         p2sh_txs[0].wit.vtxinwit[0].scriptWitness.stack = [pad] * 101 + [scripts[0]]\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2sh_txs[0], True, False, b'bad-witness-nonstandard')\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2sh_txs[0], True, True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, p2sh_txs[0], True, False, b'bad-witness-nonstandard')\n+        test_transaction_acceptance(self.nodes[0], self.test_node, p2sh_txs[0], True, True)\n         p2sh_txs[1].wit.vtxinwit[0].scriptWitness.stack = [pad * 81] * 100 + [scripts[1]]\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2sh_txs[1], True, False, b'bad-witness-nonstandard')\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2sh_txs[1], True, True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, p2sh_txs[1], True, False, b'bad-witness-nonstandard')\n+        test_transaction_acceptance(self.nodes[0], self.test_node, p2sh_txs[1], True, True)\n         p2sh_txs[1].wit.vtxinwit[0].scriptWitness.stack = [pad * 80] * 100 + [scripts[1]]\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2sh_txs[1], True, True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, p2sh_txs[1], True, True)\n         p2sh_txs[2].wit.vtxinwit[0].scriptWitness.stack = [pad, pad, scripts[2]]\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2sh_txs[2], True, True)\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2sh_txs[2], True, True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, p2sh_txs[2], True, True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, p2sh_txs[2], True, True)\n         p2sh_txs[3].wit.vtxinwit[0].scriptWitness.stack = [pad, pad, pad, scripts[3]]\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2sh_txs[3], True, False, b'bad-witness-nonstandard')\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2sh_txs[3], True, True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, p2sh_txs[3], True, False, b'bad-witness-nonstandard')\n+        test_transaction_acceptance(self.nodes[0], self.test_node, p2sh_txs[3], True, True)\n \n         self.nodes[0].generate(1)  # Mine and clean up the mempool of non-standard node\n         # Valid but non-standard transactions in a block should be accepted by standard node\n@@ -2011,7 +2011,7 @@ def test_witness_sigops(self):\n \n         block_1 = self.build_next_block()\n         self.update_witness_block_with_transactions(block_1, [tx])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block_1, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block_1, accepted=True)\n \n         tx2 = CTransaction()\n         # If we try to spend the first n-1 outputs from tx, that should be\n@@ -2028,7 +2028,7 @@ def test_witness_sigops(self):\n \n         block_2 = self.build_next_block()\n         self.update_witness_block_with_transactions(block_2, [tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block_2, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block_2, accepted=False)\n \n         # Try dropping the last input in tx2, and add an output that has\n         # too many sigops (contributing to legacy sigop count).\n@@ -2041,14 +2041,14 @@ def test_witness_sigops(self):\n         tx2.rehash()\n         block_3 = self.build_next_block()\n         self.update_witness_block_with_transactions(block_3, [tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block_3, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block_3, accepted=False)\n \n         # If we drop the last checksig in this output, the tx should succeed.\n         block_4 = self.build_next_block()\n         tx2.vout[-1].scriptPubKey = CScript([OP_CHECKSIG] * (checksig_count - 1))\n         tx2.rehash()\n         self.update_witness_block_with_transactions(block_4, [tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block_4, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block_4, accepted=True)\n \n         # Reset the tip back down for the next test\n         sync_blocks(self.nodes)\n@@ -2064,7 +2064,7 @@ def test_witness_sigops(self):\n         tx2.wit.vtxinwit[-1].scriptWitness.stack = [witness_program_justright]\n         tx2.rehash()\n         self.update_witness_block_with_transactions(block_5, [tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block_5, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block_5, accepted=True)\n \n         # TODO: test p2sh sigop counting\n "
      }
    ]
  },
  {
    "sha": "73e538cf6a9df9a5ef57363e53fbeb01d1ade510",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3M2U1MzhjZjZhOWRmOWE1ZWY1NzM2M2U1M2ZiZWIwMWQxYWRlNTEw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-08-29T16:21:15Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-25T02:02:01Z"
      },
      "message": "scripted-diff: Use named arguments in feature_block\n\n-BEGIN VERIFY SCRIPT-\nsed -i --regexp-extended -e \"s/sync_blocks\\((.*?), (True|False), (1.?), /sync_blocks(\\1, success=\\2, reject_code=\\3, reject_reason=/g\" ./test/functional/feature_block.py\n-END VERIFY SCRIPT-\n\nGithub-Pull: #14101\nRebased-From: b4d33096734d787b0e1d754064039cbb64ce8d61",
      "tree": {
        "sha": "4f3f4fd76bc9c81d74fd74cbea64b4632390a8de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f3f4fd76bc9c81d74fd74cbea64b4632390a8de"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/73e538cf6a9df9a5ef57363e53fbeb01d1ade510",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73e538cf6a9df9a5ef57363e53fbeb01d1ade510",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/73e538cf6a9df9a5ef57363e53fbeb01d1ade510",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73e538cf6a9df9a5ef57363e53fbeb01d1ade510/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "96dc93686237facede4b53e4962295ffd709c85e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96dc93686237facede4b53e4962295ffd709c85e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/96dc93686237facede4b53e4962295ffd709c85e"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 38,
      "deletions": 38
    },
    "files": [
      {
        "sha": "e81ea12d0f835caba1cac39485f9afc78b8e1a93",
        "filename": "test/functional/feature_block.py",
        "status": "modified",
        "additions": 38,
        "deletions": 38,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73e538cf6a9df9a5ef57363e53fbeb01d1ade510/test/functional/feature_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73e538cf6a9df9a5ef57363e53fbeb01d1ade510/test/functional/feature_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_block.py?ref=73e538cf6a9df9a5ef57363e53fbeb01d1ade510",
        "patch": "@@ -169,7 +169,7 @@ def run_test(self):\n         self.log.info(\"Reject a block where the miner creates too much coinbase reward\")\n         self.move_tip(6)\n         b9 = self.next_block(9, spend=out[4], additional_coinbase_value=1)\n-        self.sync_blocks([b9], False, 16, b'bad-cb-amount', reconnect=True)\n+        self.sync_blocks([b9], success=False, reject_code=16, reject_reason=b'bad-cb-amount', reconnect=True)\n \n         # Create a fork that ends in a block with too much fee (the one that causes the reorg)\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n@@ -181,7 +181,7 @@ def run_test(self):\n         self.sync_blocks([b10], False)\n \n         b11 = self.next_block(11, spend=out[4], additional_coinbase_value=1)\n-        self.sync_blocks([b11], False, 16, b'bad-cb-amount', reconnect=True)\n+        self.sync_blocks([b11], success=False, reject_code=16, reject_reason=b'bad-cb-amount', reconnect=True)\n \n         # Try again, but with a valid fork first\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n@@ -194,7 +194,7 @@ def run_test(self):\n         b13 = self.next_block(13, spend=out[4])\n         self.save_spendable_output()\n         b14 = self.next_block(14, spend=out[5], additional_coinbase_value=1)\n-        self.sync_blocks([b12, b13, b14], False, 16, b'bad-cb-amount', reconnect=True)\n+        self.sync_blocks([b12, b13, b14], success=False, reject_code=16, reject_reason=b'bad-cb-amount', reconnect=True)\n \n         # New tip should be b13.\n         assert_equal(node.getbestblockhash(), b13.hash)\n@@ -213,7 +213,7 @@ def run_test(self):\n         self.log.info(\"Reject a block with too many checksigs\")\n         too_many_checksigs = CScript([OP_CHECKSIG] * (MAX_BLOCK_SIGOPS))\n         b16 = self.next_block(16, spend=out[6], script=too_many_checksigs)\n-        self.sync_blocks([b16], False, 16, b'bad-blk-sigops', reconnect=True)\n+        self.sync_blocks([b16], success=False, reject_code=16, reject_reason=b'bad-blk-sigops', reconnect=True)\n \n         # Attempt to spend a transaction created on a different fork\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n@@ -222,7 +222,7 @@ def run_test(self):\n         self.log.info(\"Reject a block with a spend from a re-org'ed out tx\")\n         self.move_tip(15)\n         b17 = self.next_block(17, spend=txout_b3)\n-        self.sync_blocks([b17], False, 16, b'bad-txns-inputs-missingorspent', reconnect=True)\n+        self.sync_blocks([b17], success=False, reject_code=16, reject_reason=b'bad-txns-inputs-missingorspent', reconnect=True)\n \n         # Attempt to spend a transaction created on a different fork (on a fork this time)\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n@@ -235,7 +235,7 @@ def run_test(self):\n         self.sync_blocks([b18], False)\n \n         b19 = self.next_block(19, spend=out[6])\n-        self.sync_blocks([b19], False, 16, b'bad-txns-inputs-missingorspent', reconnect=True)\n+        self.sync_blocks([b19], success=False, reject_code=16, reject_reason=b'bad-txns-inputs-missingorspent', reconnect=True)\n \n         # Attempt to spend a coinbase at depth too low\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n@@ -244,7 +244,7 @@ def run_test(self):\n         self.log.info(\"Reject a block spending an immature coinbase.\")\n         self.move_tip(15)\n         b20 = self.next_block(20, spend=out[7])\n-        self.sync_blocks([b20], False, 16, b'bad-txns-premature-spend-of-coinbase')\n+        self.sync_blocks([b20], success=False, reject_code=16, reject_reason=b'bad-txns-premature-spend-of-coinbase')\n \n         # Attempt to spend a coinbase at depth too low (on a fork this time)\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n@@ -257,7 +257,7 @@ def run_test(self):\n         self.sync_blocks([b21], False)\n \n         b22 = self.next_block(22, spend=out[5])\n-        self.sync_blocks([b22], False, 16, b'bad-txns-premature-spend-of-coinbase')\n+        self.sync_blocks([b22], success=False, reject_code=16, reject_reason=b'bad-txns-premature-spend-of-coinbase')\n \n         # Create a block on either side of MAX_BLOCK_BASE_SIZE and make sure its accepted/rejected\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n@@ -286,7 +286,7 @@ def run_test(self):\n         tx.vout = [CTxOut(0, script_output)]\n         b24 = self.update_block(24, [tx])\n         assert_equal(len(b24.serialize()), MAX_BLOCK_BASE_SIZE + 1)\n-        self.sync_blocks([b24], False, 16, b'bad-blk-length', reconnect=True)\n+        self.sync_blocks([b24], success=False, reject_code=16, reject_reason=b'bad-blk-length', reconnect=True)\n \n         b25 = self.next_block(25, spend=out[7])\n         self.sync_blocks([b25], False)\n@@ -304,7 +304,7 @@ def run_test(self):\n         # update_block causes the merkle root to get updated, even with no new\n         # transactions, and updates the required state.\n         b26 = self.update_block(26, [])\n-        self.sync_blocks([b26], False, 16, b'bad-cb-length', reconnect=True)\n+        self.sync_blocks([b26], success=False, reject_code=16, reject_reason=b'bad-cb-length', reconnect=True)\n \n         # Extend the b26 chain to make sure bitcoind isn't accepting b26\n         b27 = self.next_block(27, spend=out[7])\n@@ -316,7 +316,7 @@ def run_test(self):\n         b28.vtx[0].vin[0].scriptSig = b'\\x00' * 101\n         b28.vtx[0].rehash()\n         b28 = self.update_block(28, [])\n-        self.sync_blocks([b28], False, 16, b'bad-cb-length', reconnect=True)\n+        self.sync_blocks([b28], success=False, reject_code=16, reject_reason=b'bad-cb-length', reconnect=True)\n \n         # Extend the b28 chain to make sure bitcoind isn't accepting b28\n         b29 = self.next_block(29, spend=out[7])\n@@ -352,7 +352,7 @@ def run_test(self):\n         too_many_multisigs = CScript([OP_CHECKMULTISIG] * (MAX_BLOCK_SIGOPS // 20))\n         b32 = self.next_block(32, spend=out[9], script=too_many_multisigs)\n         assert_equal(get_legacy_sigopcount_block(b32), MAX_BLOCK_SIGOPS + 1)\n-        self.sync_blocks([b32], False, 16, b'bad-blk-sigops', reconnect=True)\n+        self.sync_blocks([b32], success=False, reject_code=16, reject_reason=b'bad-blk-sigops', reconnect=True)\n \n         # CHECKMULTISIGVERIFY\n         self.log.info(\"Accept a block with the max number of OP_CHECKMULTISIGVERIFY sigops\")\n@@ -365,7 +365,7 @@ def run_test(self):\n         self.log.info(\"Reject a block with too many OP_CHECKMULTISIGVERIFY sigops\")\n         too_many_multisigs = CScript([OP_CHECKMULTISIGVERIFY] * (MAX_BLOCK_SIGOPS // 20))\n         b34 = self.next_block(34, spend=out[10], script=too_many_multisigs)\n-        self.sync_blocks([b34], False, 16, b'bad-blk-sigops', reconnect=True)\n+        self.sync_blocks([b34], success=False, reject_code=16, reject_reason=b'bad-blk-sigops', reconnect=True)\n \n         # CHECKSIGVERIFY\n         self.log.info(\"Accept a block with the max number of OP_CHECKSIGVERIFY sigops\")\n@@ -378,7 +378,7 @@ def run_test(self):\n         self.log.info(\"Reject a block with too many OP_CHECKSIGVERIFY sigops\")\n         too_many_checksigs = CScript([OP_CHECKSIGVERIFY] * (MAX_BLOCK_SIGOPS))\n         b36 = self.next_block(36, spend=out[11], script=too_many_checksigs)\n-        self.sync_blocks([b36], False, 16, b'bad-blk-sigops', reconnect=True)\n+        self.sync_blocks([b36], success=False, reject_code=16, reject_reason=b'bad-blk-sigops', reconnect=True)\n \n         # Check spending of a transaction in a block which failed to connect\n         #\n@@ -395,12 +395,12 @@ def run_test(self):\n         txout_b37 = b37.vtx[1]\n         tx = self.create_and_sign_transaction(out[11], 0)\n         b37 = self.update_block(37, [tx])\n-        self.sync_blocks([b37], False, 16, b'bad-txns-inputs-missingorspent', reconnect=True)\n+        self.sync_blocks([b37], success=False, reject_code=16, reject_reason=b'bad-txns-inputs-missingorspent', reconnect=True)\n \n         # attempt to spend b37's first non-coinbase tx, at which point b37 was still considered valid\n         self.move_tip(35)\n         b38 = self.next_block(38, spend=txout_b37)\n-        self.sync_blocks([b38], False, 16, b'bad-txns-inputs-missingorspent', reconnect=True)\n+        self.sync_blocks([b38], success=False, reject_code=16, reject_reason=b'bad-txns-inputs-missingorspent', reconnect=True)\n \n         # Check P2SH SigOp counting\n         #\n@@ -492,7 +492,7 @@ def run_test(self):\n         tx.rehash()\n         new_txs.append(tx)\n         self.update_block(40, new_txs)\n-        self.sync_blocks([b40], False, 16, b'bad-blk-sigops', reconnect=True)\n+        self.sync_blocks([b40], success=False, reject_code=16, reject_reason=b'bad-blk-sigops', reconnect=True)\n \n         # same as b40, but one less sigop\n         self.log.info(\"Accept a block with the max number of P2SH sigops\")\n@@ -555,7 +555,7 @@ def run_test(self):\n         self.block_heights[b45.sha256] = self.block_heights[self.tip.sha256] + 1\n         self.tip = b45\n         self.blocks[45] = b45\n-        self.sync_blocks([b45], False, 16, b'bad-cb-missing', reconnect=True)\n+        self.sync_blocks([b45], success=False, reject_code=16, reject_reason=b'bad-cb-missing', reconnect=True)\n \n         self.log.info(\"Reject a block with no transactions\")\n         self.move_tip(44)\n@@ -570,7 +570,7 @@ def run_test(self):\n         self.tip = b46\n         assert 46 not in self.blocks\n         self.blocks[46] = b46\n-        self.sync_blocks([b46], False, 16, b'bad-blk-length', reconnect=True)\n+        self.sync_blocks([b46], success=False, reject_code=16, reject_reason=b'bad-blk-length', reconnect=True)\n \n         self.log.info(\"Reject a block with invalid work\")\n         self.move_tip(44)\n@@ -593,7 +593,7 @@ def run_test(self):\n         b49 = self.next_block(49)\n         b49.hashMerkleRoot += 1\n         b49.solve()\n-        self.sync_blocks([b49], False, 16, b'bad-txnmrklroot', reconnect=True)\n+        self.sync_blocks([b49], success=False, reject_code=16, reject_reason=b'bad-txnmrklroot', reconnect=True)\n \n         self.log.info(\"Reject a block with incorrect POW limit\")\n         self.move_tip(44)\n@@ -607,15 +607,15 @@ def run_test(self):\n         b51 = self.next_block(51)\n         cb2 = create_coinbase(51, self.coinbase_pubkey)\n         b51 = self.update_block(51, [cb2])\n-        self.sync_blocks([b51], False, 16, b'bad-cb-multiple', reconnect=True)\n+        self.sync_blocks([b51], success=False, reject_code=16, reject_reason=b'bad-cb-multiple', reconnect=True)\n \n         self.log.info(\"Reject a block with duplicate transactions\")\n         # Note: txns have to be in the right position in the merkle tree to trigger this error\n         self.move_tip(44)\n         b52 = self.next_block(52, spend=out[15])\n         tx = self.create_tx(b52.vtx[1], 0, 1)\n         b52 = self.update_block(52, [tx, tx])\n-        self.sync_blocks([b52], False, 16, b'bad-txns-duplicate', reconnect=True)\n+        self.sync_blocks([b52], success=False, reject_code=16, reject_reason=b'bad-txns-duplicate', reconnect=True)\n \n         # Test block timestamps\n         #  -> b31 (8) -> b33 (9) -> b35 (10) -> b39 (11) -> b42 (12) -> b43 (13) -> b53 (14) -> b55 (15)\n@@ -682,7 +682,7 @@ def run_test(self):\n         assert_equal(len(b56.vtx), 3)\n         b56 = self.update_block(56, [tx1])\n         assert_equal(b56.hash, b57.hash)\n-        self.sync_blocks([b56], False, 16, b'bad-txns-duplicate', reconnect=True)\n+        self.sync_blocks([b56], success=False, reject_code=16, reject_reason=b'bad-txns-duplicate', reconnect=True)\n \n         # b57p2 - a good block with 6 tx'es, don't submit until end\n         self.move_tip(55)\n@@ -702,7 +702,7 @@ def run_test(self):\n         assert_equal(b56p2.hash, b57p2.hash)\n         assert_equal(len(b56p2.vtx), 6)\n         b56p2 = self.update_block(\"b56p2\", [tx3, tx4])\n-        self.sync_blocks([b56p2], False, 16, b'bad-txns-duplicate', reconnect=True)\n+        self.sync_blocks([b56p2], success=False, reject_code=16, reject_reason=b'bad-txns-duplicate', reconnect=True)\n \n         self.move_tip(\"57p2\")\n         self.sync_blocks([b57p2], True)\n@@ -727,15 +727,15 @@ def run_test(self):\n         tx.vout.append(CTxOut(0, b\"\"))\n         tx.calc_sha256()\n         b58 = self.update_block(58, [tx])\n-        self.sync_blocks([b58], False, 16, b'bad-txns-inputs-missingorspent', reconnect=True)\n+        self.sync_blocks([b58], success=False, reject_code=16, reject_reason=b'bad-txns-inputs-missingorspent', reconnect=True)\n \n         # tx with output value > input value\n         self.log.info(\"Reject a block with a transaction with outputs > inputs\")\n         self.move_tip(57)\n         b59 = self.next_block(59)\n         tx = self.create_and_sign_transaction(out[17], 51 * COIN)\n         b59 = self.update_block(59, [tx])\n-        self.sync_blocks([b59], False, 16, b'bad-txns-in-belowout', reconnect=True)\n+        self.sync_blocks([b59], success=False, reject_code=16, reject_reason=b'bad-txns-in-belowout', reconnect=True)\n \n         # reset to good chain\n         self.move_tip(57)\n@@ -759,7 +759,7 @@ def run_test(self):\n         b61.vtx[0].rehash()\n         b61 = self.update_block(61, [])\n         assert_equal(b60.vtx[0].serialize(), b61.vtx[0].serialize())\n-        self.sync_blocks([b61], False, 16, b'bad-txns-BIP30', reconnect=True)\n+        self.sync_blocks([b61], success=False, reject_code=16, reject_reason=b'bad-txns-BIP30', reconnect=True)\n \n         # Test tx.isFinal is properly rejected (not an exhaustive tx.isFinal test, that should be in data-driven transaction tests)\n         #\n@@ -776,7 +776,7 @@ def run_test(self):\n         assert(tx.vin[0].nSequence < 0xffffffff)\n         tx.calc_sha256()\n         b62 = self.update_block(62, [tx])\n-        self.sync_blocks([b62], False, 16, b'bad-txns-nonfinal')\n+        self.sync_blocks([b62], success=False, reject_code=16, reject_reason=b'bad-txns-nonfinal')\n \n         # Test a non-final coinbase is also rejected\n         #\n@@ -790,7 +790,7 @@ def run_test(self):\n         b63.vtx[0].vin[0].nSequence = 0xDEADBEEF\n         b63.vtx[0].rehash()\n         b63 = self.update_block(63, [])\n-        self.sync_blocks([b63], False, 16, b'bad-txns-nonfinal')\n+        self.sync_blocks([b63], success=False, reject_code=16, reject_reason=b'bad-txns-nonfinal')\n \n         #  This checks that a block with a bloated VARINT between the block_header and the array of tx such that\n         #  the block is > MAX_BLOCK_BASE_SIZE with the bloated varint, but <= MAX_BLOCK_BASE_SIZE without the bloated varint,\n@@ -824,7 +824,7 @@ def run_test(self):\n         tx.vin.append(CTxIn(COutPoint(b64a.vtx[1].sha256, 0)))\n         b64a = self.update_block(\"64a\", [tx])\n         assert_equal(len(b64a.serialize()), MAX_BLOCK_BASE_SIZE + 8)\n-        self.sync_blocks([b64a], False, 1, b'error parsing message')\n+        self.sync_blocks([b64a], success=False, reject_code=1, reject_reason=b'error parsing message')\n \n         # bitcoind doesn't disconnect us for sending a bloated block, but if we subsequently\n         # resend the header message, it won't send us the getdata message again. Just\n@@ -866,7 +866,7 @@ def run_test(self):\n         tx1 = self.create_and_sign_transaction(out[20], out[20].vout[0].nValue)\n         tx2 = self.create_and_sign_transaction(tx1, 1)\n         b66 = self.update_block(66, [tx2, tx1])\n-        self.sync_blocks([b66], False, 16, b'bad-txns-inputs-missingorspent', reconnect=True)\n+        self.sync_blocks([b66], success=False, reject_code=16, reject_reason=b'bad-txns-inputs-missingorspent', reconnect=True)\n \n         # Attempt to double-spend a transaction created in a block\n         #\n@@ -881,7 +881,7 @@ def run_test(self):\n         tx2 = self.create_and_sign_transaction(tx1, 1)\n         tx3 = self.create_and_sign_transaction(tx1, 2)\n         b67 = self.update_block(67, [tx1, tx2, tx3])\n-        self.sync_blocks([b67], False, 16, b'bad-txns-inputs-missingorspent', reconnect=True)\n+        self.sync_blocks([b67], success=False, reject_code=16, reject_reason=b'bad-txns-inputs-missingorspent', reconnect=True)\n \n         # More tests of block subsidy\n         #\n@@ -900,7 +900,7 @@ def run_test(self):\n         b68 = self.next_block(68, additional_coinbase_value=10)\n         tx = self.create_and_sign_transaction(out[20], out[20].vout[0].nValue - 9)\n         b68 = self.update_block(68, [tx])\n-        self.sync_blocks([b68], False, 16, b'bad-cb-amount', reconnect=True)\n+        self.sync_blocks([b68], success=False, reject_code=16, reject_reason=b'bad-cb-amount', reconnect=True)\n \n         self.log.info(\"Accept a block claiming the correct subsidy in the coinbase transaction\")\n         self.move_tip(65)\n@@ -924,7 +924,7 @@ def run_test(self):\n         tx.vin.append(CTxIn(COutPoint(bogus_tx.sha256, 0), b\"\", 0xffffffff))\n         tx.vout.append(CTxOut(1, b\"\"))\n         b70 = self.update_block(70, [tx])\n-        self.sync_blocks([b70], False, 16, b'bad-txns-inputs-missingorspent', reconnect=True)\n+        self.sync_blocks([b70], success=False, reject_code=16, reject_reason=b'bad-txns-inputs-missingorspent', reconnect=True)\n \n         # Test accepting an invalid block which has the same hash as a valid one (via merkle tree tricks)\n         #\n@@ -949,7 +949,7 @@ def run_test(self):\n         assert_equal(b72.sha256, b71.sha256)\n \n         self.move_tip(71)\n-        self.sync_blocks([b71], False, 16, b'bad-txns-duplicate', reconnect=True)\n+        self.sync_blocks([b71], success=False, reject_code=16, reject_reason=b'bad-txns-duplicate', reconnect=True)\n \n         self.move_tip(72)\n         self.sync_blocks([b72], True)\n@@ -987,7 +987,7 @@ def run_test(self):\n         tx = self.create_and_sign_transaction(out[22], 1, CScript(a))\n         b73 = self.update_block(73, [tx])\n         assert_equal(get_legacy_sigopcount_block(b73), MAX_BLOCK_SIGOPS + 1)\n-        self.sync_blocks([b73], False, 16, b'bad-blk-sigops', reconnect=True)\n+        self.sync_blocks([b73], success=False, reject_code=16, reject_reason=b'bad-blk-sigops', reconnect=True)\n \n         # b74/75 - if we push an invalid script element, all prevous sigops are counted,\n         #          but sigops after the element are not counted.\n@@ -1011,7 +1011,7 @@ def run_test(self):\n         a[MAX_BLOCK_SIGOPS + 4] = 0xff\n         tx = self.create_and_sign_transaction(out[22], 1, CScript(a))\n         b74 = self.update_block(74, [tx])\n-        self.sync_blocks([b74], False, 16, b'bad-blk-sigops', reconnect=True)\n+        self.sync_blocks([b74], success=False, reject_code=16, reject_reason=b'bad-blk-sigops', reconnect=True)\n \n         self.move_tip(72)\n         b75 = self.next_block(75)\n@@ -1160,7 +1160,7 @@ def run_test(self):\n         b89a = self.next_block(\"89a\", spend=out[32])\n         tx = self.create_tx(tx1, 0, 0, CScript([OP_TRUE]))\n         b89a = self.update_block(\"89a\", [tx])\n-        self.sync_blocks([b89a], False, 16, b'bad-txns-inputs-missingorspent', reconnect=True)\n+        self.sync_blocks([b89a], success=False, reject_code=16, reject_reason=b'bad-txns-inputs-missingorspent', reconnect=True)\n \n         self.log.info(\"Test a re-org of one week's worth of blocks (1088 blocks)\")\n "
      }
    ]
  },
  {
    "sha": "168efeaca6bbb9158f7731f5d72ae75b2320ca2c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNjhlZmVhY2E2YmJiOTE1OGY3NzMxZjVkNzJhZTc1YjIzMjBjYTJj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-08-29T16:42:46Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-25T02:02:08Z"
      },
      "message": "qa: Use named args in some tests\n\nGithub-Pull: #14101\nRebased-From: fa782a308dbe7bc579c122f63c1c65666fc85e91",
      "tree": {
        "sha": "1171a3c47ed131dd2a672810762db878e36982ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1171a3c47ed131dd2a672810762db878e36982ee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/168efeaca6bbb9158f7731f5d72ae75b2320ca2c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/168efeaca6bbb9158f7731f5d72ae75b2320ca2c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/168efeaca6bbb9158f7731f5d72ae75b2320ca2c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/168efeaca6bbb9158f7731f5d72ae75b2320ca2c/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "73e538cf6a9df9a5ef57363e53fbeb01d1ade510",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73e538cf6a9df9a5ef57363e53fbeb01d1ade510",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/73e538cf6a9df9a5ef57363e53fbeb01d1ade510"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "a5d1ec3e8727dc4c315e4a927948d0f360b484d2",
        "filename": "test/functional/p2p_invalid_block.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/168efeaca6bbb9158f7731f5d72ae75b2320ca2c/test/functional/p2p_invalid_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/168efeaca6bbb9158f7731f5d72ae75b2320ca2c/test/functional/p2p_invalid_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_block.py?ref=168efeaca6bbb9158f7731f5d72ae75b2320ca2c",
        "patch": "@@ -42,7 +42,7 @@ def run_test(self):\n         # Save the coinbase for later\n         block1 = block\n         tip = block.sha256\n-        node.p2p.send_blocks_and_test([block1], node, True)\n+        node.p2p.send_blocks_and_test([block1], node, success=True)\n \n         self.log.info(\"Mature the block.\")\n         node.generate(100)\n@@ -79,7 +79,7 @@ def run_test(self):\n         assert_equal(orig_hash, block2.rehash())\n         assert(block2_orig.vtx != block2.vtx)\n \n-        node.p2p.send_blocks_and_test([block2], node, False, False, 16, b'bad-txns-duplicate')\n+        node.p2p.send_blocks_and_test([block2], node, success=False, request_block=False, reject_code=16, reject_reason=b'bad-txns-duplicate')\n \n         # Check transactions for duplicate inputs\n         self.log.info(\"Test duplicate input block.\")\n@@ -102,7 +102,7 @@ def run_test(self):\n         block3.rehash()\n         block3.solve()\n \n-        node.p2p.send_blocks_and_test([block3], node, False, False, 16, b'bad-cb-amount')\n+        node.p2p.send_blocks_and_test([block3], node, success=False, request_block=False, reject_code=16, reject_reason=b'bad-cb-amount')\n \n if __name__ == '__main__':\n     InvalidBlockRequestTest().main()"
      },
      {
        "sha": "45dc2928d335ea449fb8faee3299897bff10fd6c",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/168efeaca6bbb9158f7731f5d72ae75b2320ca2c/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/168efeaca6bbb9158f7731f5d72ae75b2320ca2c/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=168efeaca6bbb9158f7731f5d72ae75b2320ca2c",
        "patch": "@@ -119,7 +119,7 @@ def get_virtual_size(witness_block):\n     vsize = int((3 * base_size + total_size + 3) / 4)\n     return vsize\n \n-def test_transaction_acceptance(rpc, p2p, tx, with_witness, accepted, reason=None):\n+def test_transaction_acceptance(node, p2p, tx, with_witness, accepted, reason=None):\n     \"\"\"Send a transaction to the node and check that it's accepted to the mempool\n \n     - Submit the transaction over the p2p interface\n@@ -129,13 +129,13 @@ def test_transaction_acceptance(rpc, p2p, tx, with_witness, accepted, reason=Non\n         tx_message = msg_witness_tx(tx)\n     p2p.send_message(tx_message)\n     p2p.sync_with_ping()\n-    assert_equal(tx.hash in rpc.getrawmempool(), accepted)\n+    assert_equal(tx.hash in node.getrawmempool(), accepted)\n     if (reason is not None and not accepted):\n         # Check the rejection reason as well.\n         with mininode_lock:\n             assert_equal(p2p.last_message[\"reject\"].reason, reason)\n \n-def test_witness_block(rpc, p2p, block, accepted, with_witness=True, reason=None):\n+def test_witness_block(node, p2p, block, accepted, with_witness=True, reason=None):\n     \"\"\"Send a block to the node and check that it's accepted\n \n     - Submit the block over the p2p interface\n@@ -145,7 +145,7 @@ def test_witness_block(rpc, p2p, block, accepted, with_witness=True, reason=None\n     else:\n         p2p.send_message(msg_block(block))\n     p2p.sync_with_ping()\n-    assert_equal(rpc.getbestblockhash() == block.hash, accepted)\n+    assert_equal(node.getbestblockhash() == block.hash, accepted)\n     if (reason is not None and not accepted):\n         # Check the rejection reason as well.\n         with mininode_lock:"
      },
      {
        "sha": "034e83aaae643ead1fb91a84531fd41265844ec1",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/168efeaca6bbb9158f7731f5d72ae75b2320ca2c/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/168efeaca6bbb9158f7731f5d72ae75b2320ca2c/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=168efeaca6bbb9158f7731f5d72ae75b2320ca2c",
        "patch": "@@ -482,7 +482,7 @@ def on_reject(self, message):\n         self.reject_code_received = message.code\n         self.reject_reason_received = message.reason\n \n-    def send_blocks_and_test(self, blocks, rpc, success=True, request_block=True, reject_code=None, reject_reason=None, timeout=60):\n+    def send_blocks_and_test(self, blocks, node, *, success=True, request_block=True, reject_code=None, reject_reason=None, timeout=60):\n         \"\"\"Send blocks to test node and test whether the tip advances.\n \n          - add all blocks to our block_store\n@@ -508,16 +508,16 @@ def send_blocks_and_test(self, blocks, rpc, success=True, request_block=True, re\n             wait_until(lambda: blocks[-1].sha256 in self.getdata_requests, timeout=timeout, lock=mininode_lock)\n \n         if success:\n-            wait_until(lambda: rpc.getbestblockhash() == blocks[-1].hash, timeout=timeout)\n+            wait_until(lambda: node.getbestblockhash() == blocks[-1].hash, timeout=timeout)\n         else:\n-            assert rpc.getbestblockhash() != blocks[-1].hash\n+            assert node.getbestblockhash() != blocks[-1].hash\n \n         if reject_code is not None:\n             wait_until(lambda: self.reject_code_received == reject_code, lock=mininode_lock)\n         if reject_reason is not None:\n             wait_until(lambda: self.reject_reason_received == reject_reason, lock=mininode_lock)\n \n-    def send_txs_and_test(self, txs, rpc, success=True, expect_disconnect=False, reject_code=None, reject_reason=None):\n+    def send_txs_and_test(self, txs, node, *, success=True, expect_disconnect=False, reject_code=None, reject_reason=None):\n         \"\"\"Send txs to test node and test whether they're accepted to the mempool.\n \n          - add all txs to our tx_store\n@@ -541,7 +541,7 @@ def send_txs_and_test(self, txs, rpc, success=True, expect_disconnect=False, rej\n         else:\n             self.sync_with_ping()\n \n-        raw_mempool = rpc.getrawmempool()\n+        raw_mempool = node.getrawmempool()\n         if success:\n             # Check that all txs are now in the mempool\n             for tx in txs:"
      }
    ]
  },
  {
    "sha": "24d796a6cc96ac351377355000bdb248b718bc7b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNGQ3OTZhNmNjOTZhYzM1MTM3NzM1NTAwMGJkYjI0OGI3MThiYzdi",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-08-22T00:33:34Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-25T02:02:15Z"
      },
      "message": "test: Add tests for RPC help\n\nGithub-Pull: #14020\nRebased-From: 6af6d9b23dae4edd20c3dad49c835caabf3909b5",
      "tree": {
        "sha": "52000297812bd47216628d1e6790cced6beffb0c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/52000297812bd47216628d1e6790cced6beffb0c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/24d796a6cc96ac351377355000bdb248b718bc7b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24d796a6cc96ac351377355000bdb248b718bc7b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/24d796a6cc96ac351377355000bdb248b718bc7b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24d796a6cc96ac351377355000bdb248b718bc7b/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "168efeaca6bbb9158f7731f5d72ae75b2320ca2c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/168efeaca6bbb9158f7731f5d72ae75b2320ca2c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/168efeaca6bbb9158f7731f5d72ae75b2320ca2c"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 32,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e878ded2580a18a247c3be3899e3241825835629",
        "filename": "test/functional/rpc_help.py",
        "status": "added",
        "additions": 31,
        "deletions": 0,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24d796a6cc96ac351377355000bdb248b718bc7b/test/functional/rpc_help.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24d796a6cc96ac351377355000bdb248b718bc7b/test/functional/rpc_help.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_help.py?ref=24d796a6cc96ac351377355000bdb248b718bc7b",
        "patch": "@@ -0,0 +1,31 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test RPC help output.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+\n+class HelpRpcTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+\n+        # wrong argument count\n+        assert_raises_rpc_error(-1, 'help', node.help, 'foo', 'bar')\n+\n+        # invalid argument\n+        assert_raises_rpc_error(-1, 'JSON value is not a string as expected', node.help, 0)\n+\n+        # help of unknown command\n+        assert_equal(node.help('foo'), 'help: unknown command: foo')\n+\n+        # command titles\n+        titles = [line[3:-3] for line in node.help().splitlines() if line.startswith('==')]\n+        assert_equal(titles, ['Blockchain', 'Control', 'Generating', 'Mining', 'Network', 'Rawtransactions', 'Util', 'Wallet', 'Zmq'])\n+\n+if __name__ == '__main__':\n+    HelpRpcTest().main()"
      },
      {
        "sha": "13c687fd927518641ce17ac64db8c0aea5353d5d",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24d796a6cc96ac351377355000bdb248b718bc7b/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24d796a6cc96ac351377355000bdb248b718bc7b/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=24d796a6cc96ac351377355000bdb248b718bc7b",
        "patch": "@@ -152,6 +152,7 @@\n     'p2p_node_network_limited.py',\n     'feature_blocksdir.py',\n     'feature_config_args.py',\n+    'rpc_help.py',\n     'feature_help.py',\n     # Don't append tests at the end to avoid merge conflicts\n     # Put them in a random line within the section that fits their approximate run-time"
      }
    ]
  },
  {
    "sha": "8bc1badadae684e218600fe1e9a05f726120aacb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YmMxYmFkYWRhZTY4NGUyMTg2MDBmZTFlOWEwNWY3MjYxMjBhYWNi",
    "commit": {
      "author": {
        "name": "Kvaciral",
        "email": "kvaciral@protonmail.com",
        "date": "2018-08-31T20:30:26Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-25T02:02:21Z"
      },
      "message": "Test rpc_help.py failed: Check whether ZMQ is enabled or not.\n\nGithub-Pull: #14122\nRebased-From: 8dfc2f30dea6bde0f74d23691377f248966011ab",
      "tree": {
        "sha": "32bf67cf2545a63c7735ffd7c0ad04b8e5c8afb2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/32bf67cf2545a63c7735ffd7c0ad04b8e5c8afb2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8bc1badadae684e218600fe1e9a05f726120aacb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8bc1badadae684e218600fe1e9a05f726120aacb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8bc1badadae684e218600fe1e9a05f726120aacb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8bc1badadae684e218600fe1e9a05f726120aacb/comments",
    "author": {
      "login": "Kvaciral",
      "id": 864811,
      "node_id": "MDQ6VXNlcjg2NDgxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/864811?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Kvaciral",
      "html_url": "https://github.com/Kvaciral",
      "followers_url": "https://api.github.com/users/Kvaciral/followers",
      "following_url": "https://api.github.com/users/Kvaciral/following{/other_user}",
      "gists_url": "https://api.github.com/users/Kvaciral/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Kvaciral/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Kvaciral/subscriptions",
      "organizations_url": "https://api.github.com/users/Kvaciral/orgs",
      "repos_url": "https://api.github.com/users/Kvaciral/repos",
      "events_url": "https://api.github.com/users/Kvaciral/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Kvaciral/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "24d796a6cc96ac351377355000bdb248b718bc7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24d796a6cc96ac351377355000bdb248b718bc7b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/24d796a6cc96ac351377355000bdb248b718bc7b"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 15,
      "deletions": 4
    },
    "files": [
      {
        "sha": "ceca40527f04a5b3af18b21eb396c126ab2ab1a3",
        "filename": "test/functional/rpc_help.py",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8bc1badadae684e218600fe1e9a05f726120aacb/test/functional/rpc_help.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8bc1badadae684e218600fe1e9a05f726120aacb/test/functional/rpc_help.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_help.py?ref=8bc1badadae684e218600fe1e9a05f726120aacb",
        "patch": "@@ -4,7 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test RPC help output.\"\"\"\n \n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import BitcoinTestFramework, is_zmq_enabled\n from test_framework.util import assert_equal, assert_raises_rpc_error\n \n class HelpRpcTest(BitcoinTestFramework):\n@@ -25,7 +25,13 @@ def run_test(self):\n \n         # command titles\n         titles = [line[3:-3] for line in node.help().splitlines() if line.startswith('==')]\n-        assert_equal(titles, ['Blockchain', 'Control', 'Generating', 'Mining', 'Network', 'Rawtransactions', 'Util', 'Wallet', 'Zmq'])\n+\n+        components = ['Blockchain', 'Control', 'Generating', 'Mining', 'Network', 'Rawtransactions', 'Util', 'Wallet']\n+\n+        if is_zmq_enabled(self):\n+            components.append('Zmq')\n+\n+        assert_equal(titles, components)\n \n if __name__ == '__main__':\n     HelpRpcTest().main()"
      },
      {
        "sha": "0e76b525707c0fa2441fa328c8806f39dcfaeb8c",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8bc1badadae684e218600fe1e9a05f726120aacb/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8bc1badadae684e218600fe1e9a05f726120aacb/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=8bc1badadae684e218600fe1e9a05f726120aacb",
        "patch": "@@ -488,8 +488,13 @@ def skip_if_no_py3_zmq():\n \n def skip_if_no_bitcoind_zmq(test_instance):\n     \"\"\"Skip the running test if bitcoind has not been compiled with zmq support.\"\"\"\n+    if not is_zmq_enabled(test_instance):\n+        raise SkipTest(\"bitcoind has not been built with zmq enabled.\")\n+\n+\n+def is_zmq_enabled(test_instance):\n+    \"\"\"Checks whether zmq is enabled or not.\"\"\"\n     config = configparser.ConfigParser()\n     config.read_file(open(test_instance.options.configfile))\n \n-    if not config[\"components\"].getboolean(\"ENABLE_ZMQ\"):\n-        raise SkipTest(\"bitcoind has not been built with zmq enabled.\")\n+    return config[\"components\"].getboolean(\"ENABLE_ZMQ\")"
      }
    ]
  },
  {
    "sha": "86fadee9904198ca706d706a8545ee908e830dfa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NmZhZGVlOTkwNDE5OGNhNzA2ZDcwNmE4NTQ1ZWU5MDhlODMwZGZh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-09-10T20:58:15Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-25T02:02:28Z"
      },
      "message": "qa: Premine to deterministic address with -disablewallet\n\nGithub-Pull: #14180\nRebased-From: faa669cbcd1fc799517b523b0f850e01b11bf40a",
      "tree": {
        "sha": "22fd53b4aae057c4308ad0cd5e4398046cbf79ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/22fd53b4aae057c4308ad0cd5e4398046cbf79ec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/86fadee9904198ca706d706a8545ee908e830dfa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86fadee9904198ca706d706a8545ee908e830dfa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/86fadee9904198ca706d706a8545ee908e830dfa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86fadee9904198ca706d706a8545ee908e830dfa/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8bc1badadae684e218600fe1e9a05f726120aacb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8bc1badadae684e218600fe1e9a05f726120aacb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8bc1badadae684e218600fe1e9a05f726120aacb"
      }
    ],
    "stats": {
      "total": 181,
      "additions": 122,
      "deletions": 59
    },
    "files": [
      {
        "sha": "bc6cd4bdcf0e3224541c667c6b138f3f093e0603",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=86fadee9904198ca706d706a8545ee908e830dfa",
        "patch": "@@ -168,6 +168,11 @@ def transact_and_mine(self, numblocks, mining_node):\n                     newmem.append(utx)\n             self.memutxo = newmem\n \n+    def import_deterministic_coinbase_privkeys(self):\n+        self.start_nodes()\n+        super().import_deterministic_coinbase_privkeys()\n+        self.stop_nodes()\n+\n     def run_test(self):\n         self.log.info(\"This test is time consuming, please be patient\")\n         self.log.info(\"Splitting inputs so we can generate tx's\")"
      },
      {
        "sha": "745cc9e4fcdd2acbdf8aad2d7e7df39d3a8f9a54",
        "filename": "test/functional/interface_zmq.py",
        "status": "modified",
        "additions": 11,
        "deletions": 2,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/interface_zmq.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/interface_zmq.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_zmq.py?ref=86fadee9904198ca706d706a8545ee908e830dfa",
        "patch": "@@ -40,6 +40,13 @@ def set_test_params(self):\n     def setup_nodes(self):\n         skip_if_no_py3_zmq()\n         skip_if_no_bitcoind_zmq(self)\n+\n+        # Import keys\n+        self.add_nodes(self.num_nodes)\n+        self.start_nodes()\n+        super().import_deterministic_coinbase_privkeys()\n+        self.stop_nodes()\n+\n         import zmq\n \n         # Initialize ZMQ context and socket.\n@@ -59,10 +66,12 @@ def setup_nodes(self):\n         self.rawblock = ZMQSubscriber(socket, b\"rawblock\")\n         self.rawtx = ZMQSubscriber(socket, b\"rawtx\")\n \n-        self.extra_args = [[\"-zmqpub%s=%s\" % (sub.topic.decode(), address) for sub in [self.hashblock, self.hashtx, self.rawblock, self.rawtx]], []]\n-        self.add_nodes(self.num_nodes, self.extra_args)\n+        self.nodes[0].extra_args = [\"-zmqpub%s=%s\" % (sub.topic.decode(), address) for sub in [self.hashblock, self.hashtx, self.rawblock, self.rawtx]]\n         self.start_nodes()\n \n+    def import_deterministic_coinbase_privkeys(self):\n+        pass\n+\n     def run_test(self):\n         try:\n             self._zmq_test()"
      },
      {
        "sha": "e2ac76aac4f7de8ac4cf1bbfcb5e58f68fb5841a",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=86fadee9904198ca706d706a8545ee908e830dfa",
        "patch": "@@ -34,7 +34,7 @@ def chain_transaction(self, node, parent_txid, vout, value, fee, num_outputs):\n         return (txid, send_value)\n \n     def run_test(self):\n-        ''' Mine some blocks and have them mature. '''\n+        # Mine some blocks and have them mature.\n         self.nodes[0].generate(101)\n         utxo = self.nodes[0].listunspent(10)\n         txid = utxo[0]['txid']"
      },
      {
        "sha": "fced5ac29d11c9d9f1e0db4973d0670a86ea2c56",
        "filename": "test/functional/mining_getblocktemplate_longpoll.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/mining_getblocktemplate_longpoll.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/mining_getblocktemplate_longpoll.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_getblocktemplate_longpoll.py?ref=86fadee9904198ca706d706a8545ee908e830dfa",
        "patch": "@@ -70,4 +70,3 @@ def run_test(self):\n \n if __name__ == '__main__':\n     GetBlockTemplateLPTest().main()\n-"
      },
      {
        "sha": "c8144bba71fe8f456aa5929200eff1b07fcf13b1",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=86fadee9904198ca706d706a8545ee908e830dfa",
        "patch": "@@ -47,9 +47,10 @@\n class BlockchainTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n-        self.extra_args = [['-stopatheight=207', '-prune=1']]\n \n     def run_test(self):\n+        self.restart_node(0, extra_args=['-stopatheight=207', '-prune=1'])  # Set extra args with pruning after rescan is complete\n+\n         self._test_getblockchaininfo()\n         self._test_getchaintxstats()\n         self._test_gettxoutsetinfo()\n@@ -169,7 +170,7 @@ def _test_gettxoutsetinfo(self):\n         assert_equal(res['transactions'], 200)\n         assert_equal(res['height'], 200)\n         assert_equal(res['txouts'], 200)\n-        assert_equal(res['bogosize'], 17000),\n+        assert_equal(res['bogosize'], 15000),\n         assert_equal(res['bestblock'], node.getblockhash(200))\n         size = res['disk_size']\n         assert size > 6400"
      },
      {
        "sha": "afb098395320f3f172013d71c68e7ce19601c0c4",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 18,
        "deletions": 3,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=86fadee9904198ca706d706a8545ee908e830dfa",
        "patch": "@@ -158,6 +158,7 @@ def main(self):\n                 raise SkipTest(\"--usecli specified but test does not support using CLI\")\n             self.setup_chain()\n             self.setup_network()\n+            self.import_deterministic_coinbase_privkeys()\n             self.run_test()\n             success = TestStatus.PASSED\n         except JSONRPCException as e:\n@@ -247,6 +248,19 @@ def setup_nodes(self):\n         self.add_nodes(self.num_nodes, extra_args)\n         self.start_nodes()\n \n+    def import_deterministic_coinbase_privkeys(self):\n+        if self.setup_clean_chain:\n+            return\n+\n+        for n in self.nodes:\n+            try:\n+                n.getwalletinfo()\n+            except JSONRPCException as e:\n+                assert str(e).startswith('Method not found')\n+                continue\n+\n+            n.importprivkey(n.get_deterministic_priv_key()[1])\n+\n     def run_test(self):\n         \"\"\"Tests must override this method to define test logic\"\"\"\n         raise NotImplementedError\n@@ -415,7 +429,7 @@ def _initialize_chain(self):\n             # Create cache directories, run bitcoinds:\n             for i in range(MAX_NODES):\n                 datadir = initialize_datadir(self.options.cachedir, i)\n-                args = [self.options.bitcoind, \"-datadir=\" + datadir]\n+                args = [self.options.bitcoind, \"-datadir=\" + datadir, '-disablewallet']\n                 if i > 0:\n                     args.append(\"-connect=127.0.0.1:\" + str(p2p_port(0)))\n                 self.nodes.append(TestNode(i, get_datadir_path(self.options.cachedir, i), extra_conf=[\"bind=127.0.0.1\"], extra_args=[], rpchost=None, timewait=self.rpc_timewait, bitcoind=self.options.bitcoind, bitcoin_cli=self.options.bitcoincli, mocktime=self.mocktime, coverage_dir=None))\n@@ -439,7 +453,7 @@ def _initialize_chain(self):\n                 for peer in range(4):\n                     for j in range(25):\n                         set_node_times(self.nodes, block_time)\n-                        self.nodes[peer].generate(1)\n+                        self.nodes[peer].generatetoaddress(1, self.nodes[peer].get_deterministic_priv_key()[0])\n                         block_time += 10 * 60\n                     # Must sync before next peer starts generating blocks\n                     sync_blocks(self.nodes)\n@@ -453,8 +467,9 @@ def cache_path(n, *paths):\n                 return os.path.join(get_datadir_path(self.options.cachedir, n), \"regtest\", *paths)\n \n             for i in range(MAX_NODES):\n+                os.rmdir(cache_path(i, 'wallets'))  # Remove empty wallets dir\n                 for entry in os.listdir(cache_path(i)):\n-                    if entry not in ['wallets', 'chainstate', 'blocks']:\n+                    if entry not in ['chainstate', 'blocks']:\n                         os.remove(cache_path(i, entry))\n \n         for i in range(self.num_nodes):"
      },
      {
        "sha": "908dda94c579076cfffa2759e5669cc7f730c63c",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=86fadee9904198ca706d706a8545ee908e830dfa",
        "patch": "@@ -97,6 +97,22 @@ def __init__(self, i, datadir, *, rpchost, timewait, bitcoind, bitcoin_cli, mock\n \n         self.p2ps = []\n \n+    def get_deterministic_priv_key(self):\n+        \"\"\"Return a deterministic priv key in base58, that only depends on the node's index\"\"\"\n+        PRIV_KEYS = [\n+            # adress , privkey\n+            ('mjTkW3DjgyZck4KbiRusZsqTgaYTxdSz6z', 'cVpF924EspNh8KjYsfhgY96mmxvT6DgdWiTYMtMjuM74hJaU5psW'),\n+            ('msX6jQXvxiNhx3Q62PKeLPrhrqZQdSimTg', 'cUxsWyKyZ9MAQTaAhUQWJmBbSvHMwSmuv59KgxQV7oZQU3PXN3KE'),\n+            ('mnonCMyH9TmAsSj3M59DsbH8H63U3RKoFP', 'cTrh7dkEAeJd6b3MRX9bZK8eRmNqVCMH3LSUkE3dSFDyzjU38QxK'),\n+            ('mqJupas8Dt2uestQDvV2NH3RU8uZh2dqQR', 'cVuKKa7gbehEQvVq717hYcbE9Dqmq7KEBKqWgWrYBa2CKKrhtRim'),\n+            ('msYac7Rvd5ywm6pEmkjyxhbCDKqWsVeYws', 'cQDCBuKcjanpXDpCqacNSjYfxeQj8G6CAtH1Dsk3cXyqLNC4RPuh'),\n+            ('n2rnuUnwLgXqf9kk2kjvVm8R5BZK1yxQBi', 'cQakmfPSLSqKHyMFGwAqKHgWUiofJCagVGhiB4KCainaeCSxeyYq'),\n+            ('myzuPxRwsf3vvGzEuzPfK9Nf2RfwauwYe6', 'cQMpDLJwA8DBe9NcQbdoSb1BhmFxVjWD5gRyrLZCtpuF9Zi3a9RK'),\n+            ('mumwTaMtbxEPUswmLBBN3vM9oGRtGBrys8', 'cSXmRKXVcoouhNNVpcNKFfxsTsToY5pvB9DVsFksF1ENunTzRKsy'),\n+            ('mpV7aGShMkJCZgbW7F6iZgrvuPHjZjH9qg', 'cSoXt6tm3pqy43UMabY6eUTmR3eSUYFtB2iNQDGgb3VUnRsQys2k'),\n+        ]\n+        return PRIV_KEYS[self.index]\n+\n     def _node_msg(self, msg: str) -> str:\n         \"\"\"Return a modified msg that identifies this node by its index as a debugging aid.\"\"\"\n         return \"[node %d] %s\" % (self.index, msg)"
      },
      {
        "sha": "bebaea79566e229946577cef45309a2b3f20fd2e",
        "filename": "test/functional/wallet_dump.py",
        "status": "modified",
        "additions": 52,
        "deletions": 48,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/wallet_dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/wallet_dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_dump.py?ref=86fadee9904198ca706d706a8545ee908e830dfa",
        "patch": "@@ -29,50 +29,54 @@ def read_dump(file_name, addrs, script_addrs, hd_master_addr_old):\n             # only read non comment lines\n             if line[0] != \"#\" and len(line) > 10:\n                 # split out some data\n-                key_label, comment = line.split(\"#\")\n-                # key = key_label.split(\" \")[0]\n-                keytype = key_label.split(\" \")[2]\n-                if len(comment) > 1:\n-                    addr_keypath = comment.split(\" addr=\")[1]\n-                    addr = addr_keypath.split(\" \")[0]\n+                key_date_label, comment = line.split(\"#\")\n+                key_date_label = key_date_label.split(\" \")\n+                # key = key_date_label[0]\n+                date = key_date_label[1]\n+                keytype = key_date_label[2]\n+                if not len(comment) or date.startswith('1970'):\n+                    continue\n+\n+                addr_keypath = comment.split(\" addr=\")[1]\n+                addr = addr_keypath.split(\" \")[0]\n+                keypath = None\n+                if keytype == \"inactivehdseed=1\":\n+                    # ensure the old master is still available\n+                    assert (hd_master_addr_old == addr)\n+                elif keytype == \"hdseed=1\":\n+                    # ensure we have generated a new hd master key\n+                    assert (hd_master_addr_old != addr)\n+                    hd_master_addr_ret = addr\n+                elif keytype == \"script=1\":\n+                    # scripts don't have keypaths\n                     keypath = None\n-                    if keytype == \"inactivehdseed=1\":\n-                        # ensure the old master is still available\n-                        assert(hd_master_addr_old == addr)\n-                    elif keytype == \"hdseed=1\":\n-                        # ensure we have generated a new hd master key\n-                        assert(hd_master_addr_old != addr)\n-                        hd_master_addr_ret = addr\n-                    elif keytype == \"script=1\":\n-                        # scripts don't have keypaths\n-                        keypath = None\n-                    else:\n-                        keypath = addr_keypath.rstrip().split(\"hdkeypath=\")[1]\n-\n-                    # count key types\n-                    for addrObj in addrs:\n-                        if addrObj['address'] == addr.split(\",\")[0] and addrObj['hdkeypath'] == keypath and keytype == \"label=\":\n-                            # a labeled entry in the wallet should contain both a native address\n-                            # and the p2sh-p2wpkh address that was added at wallet setup\n-                            if len(addr.split(\",\")) == 2:\n-                                addr_list = addr.split(\",\")\n-                                # the entry should be of the first key in the wallet\n-                                assert_equal(addrs[0]['address'], addr_list[0])\n-                                witness_addr_ret = addr_list[1]\n-                            found_addr += 1\n-                            break\n-                        elif keytype == \"change=1\":\n-                            found_addr_chg += 1\n-                            break\n-                        elif keytype == \"reserve=1\":\n-                            found_addr_rsv += 1\n-                            break\n-\n-                    # count scripts\n-                    for script_addr in script_addrs:\n-                        if script_addr == addr.rstrip() and keytype == \"script=1\":\n-                            found_script_addr += 1\n-                            break\n+                else:\n+                    keypath = addr_keypath.rstrip().split(\"hdkeypath=\")[1]\n+\n+                # count key types\n+                for addrObj in addrs:\n+                    if addrObj['address'] == addr.split(\",\")[0] and addrObj['hdkeypath'] == keypath and keytype == \"label=\":\n+                        # a labeled entry in the wallet should contain both a native address\n+                        # and the p2sh-p2wpkh address that was added at wallet setup\n+                        if len(addr.split(\",\")) == 2:\n+                            addr_list = addr.split(\",\")\n+                            # the entry should be of the first key in the wallet\n+                            assert_equal(addrs[0]['address'], addr_list[0])\n+                            witness_addr_ret = addr_list[1]\n+                        found_addr += 1\n+                        break\n+                    elif keytype == \"change=1\":\n+                        found_addr_chg += 1\n+                        break\n+                    elif keytype == \"reserve=1\":\n+                        found_addr_rsv += 1\n+                        break\n+\n+                # count scripts\n+                for script_addr in script_addrs:\n+                    if script_addr == addr.rstrip() and keytype == \"script=1\":\n+                        found_script_addr += 1\n+                        break\n \n         return found_addr, found_script_addr, found_addr_chg, found_addr_rsv, hd_master_addr_ret, witness_addr_ret\n \n@@ -116,9 +120,9 @@ def run_test(self):\n             read_dump(wallet_unenc_dump, addrs, script_addrs, None)\n         assert_equal(found_addr, test_addr_count)  # all keys must be in the dump\n         assert_equal(found_script_addr, 2)  # all scripts must be in the dump\n-        assert_equal(found_addr_chg, 50)  # 50 blocks where mined\n-        assert_equal(found_addr_rsv, 90*2) # 90 keys plus 100% internal keys\n-        assert_equal(witness_addr_ret, witness_addr) # p2sh-p2wsh address added to the first key\n+        assert_equal(found_addr_chg, 0)  # 0 blocks where mined\n+        assert_equal(found_addr_rsv, 90 * 2)  # 90 keys plus 100% internal keys\n+        assert_equal(witness_addr_ret, witness_addr)  # p2sh-p2wsh address added to the first key\n \n         #encrypt wallet, restart, unlock and dump\n         self.nodes[0].node_encrypt_wallet('test')\n@@ -132,8 +136,8 @@ def run_test(self):\n             read_dump(wallet_enc_dump, addrs, script_addrs, hd_master_addr_unenc)\n         assert_equal(found_addr, test_addr_count)\n         assert_equal(found_script_addr, 2)\n-        assert_equal(found_addr_chg, 90*2 + 50)  # old reserve keys are marked as change now\n-        assert_equal(found_addr_rsv, 90*2)\n+        assert_equal(found_addr_chg, 90 * 2)  # old reserve keys are marked as change now\n+        assert_equal(found_addr_rsv, 90 * 2)\n         assert_equal(witness_addr_ret, witness_addr)\n \n         # Overwriting should fail"
      },
      {
        "sha": "bb8dee0022a32165e67be28c089069bbf990d8eb",
        "filename": "test/functional/wallet_import_rescan.py",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/wallet_import_rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/wallet_import_rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_import_rescan.py?ref=86fadee9904198ca706d706a8545ee908e830dfa",
        "patch": "@@ -116,10 +116,19 @@ def setup_network(self):\n                 extra_args[i] += [\"-prune=1\"]\n \n         self.add_nodes(self.num_nodes, extra_args=extra_args)\n+\n+        # Import keys\n+        self.start_nodes(extra_args=[[]] * self.num_nodes)\n+        super().import_deterministic_coinbase_privkeys()\n+        self.stop_nodes()\n+\n         self.start_nodes()\n         for i in range(1, self.num_nodes):\n             connect_nodes(self.nodes[i], 0)\n \n+    def import_deterministic_coinbase_privkeys(self):\n+        pass\n+\n     def run_test(self):\n         # Create one transaction on node 0 with a unique amount for\n         # each possible type of wallet import RPC."
      },
      {
        "sha": "554cd61daa2de6b14b2afa6b86fa13f31441f247",
        "filename": "test/functional/wallet_listreceivedby.py",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/wallet_listreceivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/wallet_listreceivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listreceivedby.py?ref=86fadee9904198ca706d706a8545ee908e830dfa",
        "patch": "@@ -18,6 +18,11 @@ class ReceivedByTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n \n+    def import_deterministic_coinbase_privkeys(self):\n+        assert_equal(0, len(self.nodes[1].listreceivedbyaddress(minconf=0, include_empty=True, include_watchonly=True)))\n+        super().import_deterministic_coinbase_privkeys()\n+        self.num_cb_reward_addresses = len(self.nodes[1].listreceivedbyaddress(minconf=0, include_empty=True, include_watchonly=True))\n+\n     def run_test(self):\n         # Generate block to get out of IBD\n         self.nodes[0].generate(1)\n@@ -64,7 +69,7 @@ def run_test(self):\n         assert_raises_rpc_error(-4, \"address_filter parameter was invalid\", self.nodes[1].listreceivedbyaddress, minconf=0, include_empty=True, include_watchonly=True, address_filter=\"bamboozling\")\n         # Another address receive money\n         res = self.nodes[1].listreceivedbyaddress(0, True, True)\n-        assert_equal(len(res), 2)  # Right now 2 entries\n+        assert_equal(len(res), 2 + self.num_cb_reward_addresses)  # Right now 2 entries\n         other_addr = self.nodes[1].getnewaddress()\n         txid2 = self.nodes[0].sendtoaddress(other_addr, 0.1)\n         self.nodes[0].generate(1)\n@@ -81,7 +86,7 @@ def run_test(self):\n         assert_equal(len(res), 1)\n         # Should be two entries though without filter\n         res = self.nodes[1].listreceivedbyaddress(0, True, True)\n-        assert_equal(len(res), 3)  # Became 3 entries\n+        assert_equal(len(res), 3 + self.num_cb_reward_addresses)  # Became 3 entries\n \n         # Not on random addr\n         other_addr = self.nodes[0].getnewaddress()  # note on node[0]! just a random addr"
      }
    ]
  },
  {
    "sha": "f7adb32e383bbbdb473eb470e4a6872b582cac80",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmN2FkYjMyZTM4M2JiYmRiNDczZWI0NzBlNGE2ODcyYjU4MmNhYzgw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-09-09T17:32:37Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-25T02:02:36Z"
      },
      "message": "qa: Run all tests even if wallet is not compiled\n\nGithub-Pull: #14180\nRebased-From: fac95398366f644911b58f1605e6bc37fb76782d",
      "tree": {
        "sha": "4d59469a75a5e7b2fd91412c356a7c1501222a77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d59469a75a5e7b2fd91412c356a7c1501222a77"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f7adb32e383bbbdb473eb470e4a6872b582cac80",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7adb32e383bbbdb473eb470e4a6872b582cac80",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f7adb32e383bbbdb473eb470e4a6872b582cac80",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7adb32e383bbbdb473eb470e4a6872b582cac80/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "86fadee9904198ca706d706a8545ee908e830dfa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86fadee9904198ca706d706a8545ee908e830dfa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/86fadee9904198ca706d706a8545ee908e830dfa"
      }
    ],
    "stats": {
      "total": 458,
      "additions": 383,
      "deletions": 75
    },
    "files": [
      {
        "sha": "8f78a9d7bf393499774ff8ed4af4ae43029105d2",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -67,10 +67,11 @@ def custom_function():\n     # self.log.info(\"running custom_function\")  # Oops! Can't run self.log outside the BitcoinTestFramework\n     pass\n \n+\n class ExampleTest(BitcoinTestFramework):\n     # Each functional test is a subclass of the BitcoinTestFramework class.\n \n-    # Override the set_test_params(), add_options(), setup_chain(), setup_network()\n+    # Override the set_test_params(), skip_test_if_missing_module(), add_options(), setup_chain(), setup_network()\n     # and setup_nodes() methods to customize the test setup as required.\n \n     def set_test_params(self):\n@@ -84,6 +85,9 @@ def set_test_params(self):\n \n         # self.log.info(\"I've finished set_test_params\")  # Oops! Can't run self.log before run_test()\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     # Use add_options() to add specific command-line options for your test.\n     # In practice this is not used very much, since the tests are mostly written\n     # to be run in automated environments without command-line options."
      },
      {
        "sha": "8466f851caed1b496994ccd3027732d46c90092c",
        "filename": "test/functional/feature_bip68_sequence.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_bip68_sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_bip68_sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bip68_sequence.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -25,6 +25,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[], [\"-acceptnonstdtxn=0\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.relayfee = self.nodes[0].getnetworkinfo()[\"relayfee\"]\n "
      },
      {
        "sha": "a1ded5200c3ab2e49194b24245565fe1034da2f4",
        "filename": "test/functional/feature_block.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_block.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -75,6 +75,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.extra_args = [[]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         node = self.nodes[0]  # convenience reference to the node\n "
      },
      {
        "sha": "1296cdb497eb39143ed4fdb788d7de66b13aafd0",
        "filename": "test/functional/feature_blocksdir.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_blocksdir.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_blocksdir.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_blocksdir.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -16,6 +16,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.stop_node(0)\n         shutil.rmtree(self.nodes[0].datadir)"
      },
      {
        "sha": "9a53b62abdb5d81b013c8134ca026bd8d50b6935",
        "filename": "test/functional/feature_cltv.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_cltv.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -57,6 +57,9 @@ def set_test_params(self):\n         self.extra_args = [['-whitelist=127.0.0.1']]\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.nodes[0].add_p2p_connection(P2PInterface())\n "
      },
      {
        "sha": "1124119e2bc971e91c7afcf986a37da9069fc483",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -14,6 +14,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def test_config_file_parser(self):\n         # Assume node is stopped\n "
      },
      {
        "sha": "a2796efa2a396bfd3f58a7366963cb3d551fc941",
        "filename": "test/functional/feature_csv_activation.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_csv_activation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_csv_activation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_csv_activation.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -145,6 +145,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.extra_args = [['-whitelist=127.0.0.1', '-blockversion=4', '-addresstype=legacy']]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def generate_blocks(self, number, version, test_blocks=None):\n         if test_blocks is None:\n             test_blocks = []"
      },
      {
        "sha": "ae1eacf2d7bdd8c989ff25d75d2e29443dc861b6",
        "filename": "test/functional/feature_dbcrash.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_dbcrash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_dbcrash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dbcrash.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -63,6 +63,9 @@ def set_test_params(self):\n         self.node3_args = [\"-blockmaxweight=4000000\"]\n         self.extra_args = [self.node0_args, self.node1_args, self.node2_args, self.node3_args]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.add_nodes(self.num_nodes, extra_args=self.extra_args)\n         self.start_nodes()"
      },
      {
        "sha": "f9e1ef0231bfe40a10f8fc758dc296d2cfb3f71c",
        "filename": "test/functional/feature_dersig.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_dersig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_dersig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dersig.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -45,6 +45,9 @@ def set_test_params(self):\n         self.extra_args = [['-whitelist=127.0.0.1']]\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.nodes[0].add_p2p_connection(P2PInterface())\n "
      },
      {
        "sha": "aaab4279b5f0467cfb2705894bd2aad53d0f6251",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -126,6 +126,9 @@ class EstimateFeeTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 3\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         \"\"\"\n         We'll setup the network to have 3 nodes that all mine with different parameters."
      },
      {
        "sha": "a74c413440fd6a7c01b0c0a170cf00ca54d2d8d7",
        "filename": "test/functional/feature_logging.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_logging.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_logging.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_logging.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -15,6 +15,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def relative_log_path(self, name):\n         return os.path.join(self.nodes[0].datadir, \"regtest\", name)\n "
      },
      {
        "sha": "87c318de9a06a25603282ff88dd12f57e2296fd0",
        "filename": "test/functional/feature_maxuploadtarget.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_maxuploadtarget.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -40,6 +40,9 @@ def set_test_params(self):\n         # Cache for utxos, as the listunspent may take a long time later in the test\n         self.utxo_cache = []\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # Before we connect anything, we first set the time on the node\n         # to be in the past, otherwise things break because the CNode"
      },
      {
        "sha": "5d180c2244d0405d8a3bf82852bbee1a334f6e6b",
        "filename": "test/functional/feature_minchainwork.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_minchainwork.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_minchainwork.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_minchainwork.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -31,6 +31,9 @@ def set_test_params(self):\n         self.extra_args = [[], [\"-minimumchainwork=0x65\"], [\"-minimumchainwork=0x65\"]]\n         self.node_min_work = [0, 101, 101]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         # This test relies on the chain setup being:\n         # node0 <- node1 <- node2"
      },
      {
        "sha": "25a7329a0d1f516c3a70f025ae7ef39ac0994330",
        "filename": "test/functional/feature_notifications.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_notifications.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_notifications.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_notifications.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -13,6 +13,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.alert_filename = os.path.join(self.options.tmpdir, \"alert.txt\")\n         self.block_filename = os.path.join(self.options.tmpdir, \"blocks.txt\")"
      },
      {
        "sha": "a79cc3d34bf48b6bb48e12ef950b9e14bd2068a6",
        "filename": "test/functional/feature_nulldummy.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_nulldummy.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -44,9 +44,12 @@ def set_test_params(self):\n         # normal segwit activation here (and don't use the default always-on behaviour).\n         self.extra_args = [['-whitelist=127.0.0.1', '-vbparams=segwit:0:999999999999', '-addresstype=legacy', \"-deprecatedrpc=addwitnessaddress\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.address = self.nodes[0].getnewaddress()\n-        self.ms_address = self.nodes[0].addmultisigaddress(1,[self.address])['address']\n+        self.ms_address = self.nodes[0].addmultisigaddress(1, [self.address])['address']\n         self.wit_address = self.nodes[0].addwitnessaddress(self.address)\n         self.wit_ms_address = self.nodes[0].addmultisigaddress(1, [self.address], '', 'p2sh-segwit')['address']\n "
      },
      {
        "sha": "772151dc4ba1f5649c3ecf5ac35b18278b9de878",
        "filename": "test/functional/feature_pruning.py",
        "status": "modified",
        "additions": 12,
        "deletions": 7,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_pruning.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -33,15 +33,20 @@ def set_test_params(self):\n \n         # Create nodes 0 and 1 to mine.\n         # Create node 2 to test pruning.\n-        self.full_node_default_args = [\"-maxreceivebuffer=20000\", \"-checkblocks=5\", \"-limitdescendantcount=100\", \"-limitdescendantsize=5000\", \"-limitancestorcount=100\", \"-limitancestorsize=5000\" ]\n+        self.full_node_default_args = [\"-maxreceivebuffer=20000\", \"-checkblocks=5\", \"-limitdescendantcount=100\", \"-limitdescendantsize=5000\", \"-limitancestorcount=100\", \"-limitancestorsize=5000\"]\n         # Create nodes 3 and 4 to test manual pruning (they will be re-started with manual pruning later)\n         # Create nodes 5 to test wallet in prune mode, but do not connect\n-        self.extra_args = [self.full_node_default_args,\n-                           self.full_node_default_args,\n-                           [\"-maxreceivebuffer=20000\", \"-prune=550\"],\n-                           [\"-maxreceivebuffer=20000\"],\n-                           [\"-maxreceivebuffer=20000\"],\n-                           [\"-prune=550\"]]\n+        self.extra_args = [\n+            self.full_node_default_args,\n+            self.full_node_default_args,\n+            [\"-maxreceivebuffer=20000\", \"-prune=550\"],\n+            [\"-maxreceivebuffer=20000\"],\n+            [\"-maxreceivebuffer=20000\"],\n+            [\"-prune=550\"],\n+        ]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n \n     def setup_network(self):\n         self.setup_nodes()"
      },
      {
        "sha": "d78d75dbade14f4c014e7663e7a922319b560abd",
        "filename": "test/functional/feature_rbf.py",
        "status": "modified",
        "additions": 17,
        "deletions": 8,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_rbf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_rbf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_rbf.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -61,17 +61,26 @@ def make_utxo(node, amount, confirmed=True, scriptPubKey=CScript([1])):\n \n     return COutPoint(int(txid, 16), 0)\n \n-class ReplaceByFeeTest(BitcoinTestFramework):\n \n+class ReplaceByFeeTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n-        self.extra_args= [[\"-maxorphantx=1000\",\n-                           \"-whitelist=127.0.0.1\",\n-                           \"-limitancestorcount=50\",\n-                           \"-limitancestorsize=101\",\n-                           \"-limitdescendantcount=200\",\n-                           \"-limitdescendantsize=101\"],\n-                           [\"-mempoolreplacement=0\"]]\n+        self.extra_args = [\n+            [\n+                \"-maxorphantx=1000\",\n+                \"-whitelist=127.0.0.1\",\n+                \"-limitancestorcount=50\",\n+                \"-limitancestorsize=101\",\n+                \"-limitdescendantcount=200\",\n+                \"-limitdescendantsize=101\",\n+            ],\n+            [\n+                \"-mempoolreplacement=0\",\n+            ],\n+        ]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n \n     def run_test(self):\n         # Leave IBD"
      },
      {
        "sha": "3727eeaeae9dde18e13f9727233fc772aa3e23ed",
        "filename": "test/functional/feature_reindex.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_reindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_reindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_reindex.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -18,6 +18,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def reindex(self, justchainstate=False):\n         self.nodes[0].generate(3)\n         blockcount = self.nodes[0].getblockcount()"
      },
      {
        "sha": "2cbfc26e899f4fd83a8dc08a533b00beead62616",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 24,
        "deletions": 3,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -46,9 +46,30 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n         # This test tests SegWit both pre and post-activation, so use the normal BIP9 activation.\n-        self.extra_args = [[\"-rpcserialversion=0\", \"-vbparams=segwit:0:999999999999\", \"-addresstype=legacy\", \"-deprecatedrpc=addwitnessaddress\"],\n-                           [\"-blockversion=4\", \"-rpcserialversion=1\", \"-vbparams=segwit:0:999999999999\", \"-addresstype=legacy\", \"-deprecatedrpc=addwitnessaddress\"],\n-                           [\"-blockversion=536870915\", \"-vbparams=segwit:0:999999999999\", \"-addresstype=legacy\", \"-deprecatedrpc=addwitnessaddress\"]]\n+        self.extra_args = [\n+            [\n+                \"-rpcserialversion=0\",\n+                \"-vbparams=segwit:0:999999999999\",\n+                \"-addresstype=legacy\",\n+                \"-deprecatedrpc=addwitnessaddress\",\n+            ],\n+            [\n+                \"-blockversion=4\",\n+                \"-rpcserialversion=1\",\n+                \"-vbparams=segwit:0:999999999999\",\n+                \"-addresstype=legacy\",\n+                \"-deprecatedrpc=addwitnessaddress\",\n+            ],\n+            [\n+                \"-blockversion=536870915\",\n+                \"-vbparams=segwit:0:999999999999\",\n+                \"-addresstype=legacy\",\n+                \"-deprecatedrpc=addwitnessaddress\",\n+            ],\n+        ]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n \n     def setup_network(self):\n         super().setup_network()"
      },
      {
        "sha": "cf77720437e4c714fb26960f71f73999c2d68253",
        "filename": "test/functional/feature_versionbits_warning.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_versionbits_warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_versionbits_warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_versionbits_warning.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -31,6 +31,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.alert_filename = os.path.join(self.options.tmpdir, \"alert.txt\")\n         # Open and close to create zero-length file"
      },
      {
        "sha": "f311858beeb017b137a739beed9a5bb5636b7e4d",
        "filename": "test/functional/interface_bitcoin_cli.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/interface_bitcoin_cli.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/interface_bitcoin_cli.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_bitcoin_cli.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -12,6 +12,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         \"\"\"Main test logic\"\"\"\n "
      },
      {
        "sha": "afa9de580f0309922fb7e720b0dacf654b3090f5",
        "filename": "test/functional/interface_rest.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/interface_rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/interface_rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_rest.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -43,6 +43,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[\"-rest\"], []]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def test_rest_request(self, uri, http_method='GET', req_type=ReqType.JSON, body='', status=200, ret_type=RetType.JSON):\n         rest_uri = '/rest' + uri\n         if req_type == ReqType.JSON:"
      },
      {
        "sha": "c853ba7e3f8d14c4b47c27ed7a5fea78a242d50e",
        "filename": "test/functional/interface_zmq.py",
        "status": "modified",
        "additions": 12,
        "deletions": 9,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/interface_zmq.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/interface_zmq.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_zmq.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -5,15 +5,16 @@\n \"\"\"Test the ZMQ notification interface.\"\"\"\n import struct\n \n-from test_framework.test_framework import (\n-    BitcoinTestFramework, skip_if_no_bitcoind_zmq, skip_if_no_py3_zmq)\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.messages import CTransaction\n-from test_framework.util import (assert_equal,\n-                                 bytes_to_hex_str,\n-                                 hash256,\n-                                )\n+from test_framework.util import (\n+    assert_equal,\n+    bytes_to_hex_str,\n+    hash256,\n+)\n from io import BytesIO\n \n+\n class ZMQSubscriber:\n     def __init__(self, socket, topic):\n         self.sequence = 0\n@@ -37,10 +38,12 @@ class ZMQTest (BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n \n-    def setup_nodes(self):\n-        skip_if_no_py3_zmq()\n-        skip_if_no_bitcoind_zmq(self)\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_py3_zmq()\n+        self.skip_if_no_bitcoind_zmq()\n+        self.skip_if_no_wallet()\n \n+    def setup_nodes(self):\n         # Import keys\n         self.add_nodes(self.num_nodes)\n         self.start_nodes()"
      },
      {
        "sha": "8847777ba7b308e97c0f5c86cae7d925571d278b",
        "filename": "test/functional/mempool_accept.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mempool_accept.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mempool_accept.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_accept.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -40,6 +40,9 @@ def set_test_params(self):\n             '-acceptnonstdtxn=0',  # Try to mimic main-net\n         ]] * self.num_nodes\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def check_mempool_result(self, result_expected, *args, **kwargs):\n         \"\"\"Wrapper to check result of testmempoolaccept on node_0's mempool\"\"\"\n         result_test = self.nodes[0].testmempoolaccept(*args, **kwargs)"
      },
      {
        "sha": "c0918893cdc9a11d3cdd19634f94fdb4494bcf14",
        "filename": "test/functional/mempool_limit.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_limit.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -15,6 +15,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [[\"-maxmempool=5\", \"-spendzeroconfchange=0\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         txouts = gen_return_txouts()\n         relayfee = self.nodes[0].getnetworkinfo()['relayfee']"
      },
      {
        "sha": "9336547a6b42ba94ea030f986ac72499f8abf9e8",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -18,6 +18,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[\"-maxorphantx=1000\"], [\"-maxorphantx=1000\", \"-limitancestorcount=5\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     # Build a transaction that spends parent_txid:vout\n     # Return amount sent\n     def chain_transaction(self, node, parent_txid, vout, value, fee, num_outputs):"
      },
      {
        "sha": "b4e9d967fd6ccf696a01d2c5be06806143fad1b9",
        "filename": "test/functional/mempool_persist.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mempool_persist.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mempool_persist.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_persist.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -47,6 +47,9 @@ def set_test_params(self):\n         self.num_nodes = 3\n         self.extra_args = [[], [\"-persistmempool=0\"], []]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         chain_height = self.nodes[0].getblockcount()\n         assert_equal(chain_height, 200)"
      },
      {
        "sha": "123f0b4c28b7507ede041d8cfd1f99635c256761",
        "filename": "test/functional/mempool_reorg.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mempool_reorg.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mempool_reorg.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_reorg.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -17,6 +17,9 @@ class MempoolCoinbaseTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     alert_filename = None  # Set by setup_network\n \n     def run_test(self):"
      },
      {
        "sha": "d035ca907a5d778619c0c696993d0e61f9c9ccd0",
        "filename": "test/functional/mempool_resurrect.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mempool_resurrect.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mempool_resurrect.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_resurrect.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -13,6 +13,9 @@ class MempoolCoinbaseTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         node0_address = self.nodes[0].getnewaddress()\n         # Spend block 1/2/3's coinbase transactions"
      },
      {
        "sha": "854d506f0dd712d4cfaf8f6371e1fa6d6684d22f",
        "filename": "test/functional/mempool_spend_coinbase.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mempool_spend_coinbase.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mempool_spend_coinbase.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_spend_coinbase.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -21,6 +21,9 @@ class MempoolSpendCoinbaseTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         chain_height = self.nodes[0].getblockcount()\n         assert_equal(chain_height, 200)"
      },
      {
        "sha": "5b53df832ae62584bce6c4c7cf99a126beaf880a",
        "filename": "test/functional/mining_basic.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mining_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mining_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_basic.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -31,6 +31,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = False\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         node = self.nodes[0]\n "
      },
      {
        "sha": "7d27a2a83a98b3d2fe689e1a155029f38cf473aa",
        "filename": "test/functional/mining_getblocktemplate_longpoll.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mining_getblocktemplate_longpoll.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mining_getblocktemplate_longpoll.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_getblocktemplate_longpoll.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -28,6 +28,9 @@ class GetBlockTemplateLPTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.log.info(\"Warning: this test will take about 70 seconds in the best case. Be patient.\")\n         self.nodes[0].generate(10)"
      },
      {
        "sha": "92590717f3c4dac5f4a3fb8c9a7a97bd3cb9403f",
        "filename": "test/functional/mining_prioritisetransaction.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mining_prioritisetransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mining_prioritisetransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_prioritisetransaction.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -16,6 +16,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[\"-printpriority=1\"], [\"-printpriority=1\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # Test `prioritisetransaction` required parameters\n         assert_raises_rpc_error(-1, \"prioritisetransaction\", self.nodes[0].prioritisetransaction)"
      },
      {
        "sha": "3a5bdf806b29174152181baa74e463f61eaffb2d",
        "filename": "test/functional/p2p_compactblocks.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_compactblocks.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -102,6 +102,9 @@ def set_test_params(self):\n         self.extra_args = [[\"-vbparams=segwit:0:0\"], [\"-vbparams=segwit:0:999999999999\", \"-txindex\", \"-deprecatedrpc=addwitnessaddress\"]]\n         self.utxos = []\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def build_block_on_tip(self, node, segwit=False):\n         height = node.getblockcount()\n         tip = node.getbestblockhash()"
      },
      {
        "sha": "d589519e450048fba34f6e610d52d2aeb4a145fe",
        "filename": "test/functional/p2p_feefilter.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_feefilter.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -42,6 +42,9 @@ class FeeFilterTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         node1 = self.nodes[1]\n         node0 = self.nodes[0]"
      },
      {
        "sha": "884fb4b063335024baa779dddc871b065bf1967e",
        "filename": "test/functional/p2p_fingerprint.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_fingerprint.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_fingerprint.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_fingerprint.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -30,6 +30,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     # Build a chain of blocks on top of given one\n     def build_chain(self, nblocks, prev_hash, prev_height, prev_median_time):\n         blocks = []"
      },
      {
        "sha": "0a7b83ed73bcad4e72b51b34cce8715d50964872",
        "filename": "test/functional/p2p_invalid_block.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_invalid_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_invalid_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_block.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -24,6 +24,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.extra_args = [[\"-whitelist=127.0.0.1\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # Add p2p connection to node0\n         node = self.nodes[0]  # convenience reference to the node"
      },
      {
        "sha": "4cc43a4fa4eee7631f376d0451faaf02140fcd3c",
        "filename": "test/functional/p2p_invalid_locator.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_invalid_locator.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_invalid_locator.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_locator.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -15,6 +15,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = False\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         node = self.nodes[0]  # convenience reference to the node\n         node.generate(1)  # Get node out of IBD"
      },
      {
        "sha": "5cf0a75ab239cd6f731ea9bdd497c3e7081b8437",
        "filename": "test/functional/p2p_invalid_tx.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_invalid_tx.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_invalid_tx.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_tx.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -26,6 +26,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def bootstrap_p2p(self, *, num_connections=1):\n         \"\"\"Add a P2P connection to the node.\n "
      },
      {
        "sha": "05354d17e1c62788ea2386f61a06b9759aeb232f",
        "filename": "test/functional/p2p_leak.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_leak.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_leak.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_leak.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -93,6 +93,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [['-banscore=' + str(banscore)]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         no_version_bannode = self.nodes[0].add_p2p_connection(CNodeNoVersionBan(), send_version=False, wait_for_verack=False)\n         no_version_idlenode = self.nodes[0].add_p2p_connection(CNodeNoVersionIdle(), send_version=False, wait_for_verack=False)"
      },
      {
        "sha": "ef9c71dc02d105d8ec71c6c19662d55cee29a9db",
        "filename": "test/functional/p2p_node_network_limited.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_node_network_limited.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_node_network_limited.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_node_network_limited.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -34,6 +34,9 @@ def set_test_params(self):\n         self.num_nodes = 3\n         self.extra_args = [['-prune=550', '-addrmantest'], [], []]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def disconnect_all(self):\n         disconnect_nodes(self.nodes[0], 1)\n         disconnect_nodes(self.nodes[1], 0)"
      },
      {
        "sha": "f5ff646978a96dd01a24e52a8ebfb5f91529a459",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -198,6 +198,9 @@ def set_test_params(self):\n         # This test tests SegWit both pre and post-activation, so use the normal BIP9 activation.\n         self.extra_args = [[\"-whitelist=127.0.0.1\", \"-vbparams=segwit:0:999999999999\"], [\"-whitelist=127.0.0.1\", \"-acceptnonstdtxn=0\", \"-vbparams=segwit:0:999999999999\"], [\"-whitelist=127.0.0.1\", \"-vbparams=segwit:0:0\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.setup_nodes()\n         connect_nodes(self.nodes[0], 1)"
      },
      {
        "sha": "9a782c0bb9938cbf1d9c35d5ae7dea1e47d312c8",
        "filename": "test/functional/p2p_sendheaders.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_sendheaders.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -208,6 +208,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def mine_blocks(self, count):\n         \"\"\"Mine count blocks and return the new tip.\"\"\"\n "
      },
      {
        "sha": "232274f59eaecc792f06ba096c8e5d12df253c1d",
        "filename": "test/functional/p2p_unrequested_blocks.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_unrequested_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_unrequested_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_unrequested_blocks.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -66,6 +66,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[], [\"-minimumchainwork=0x10\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         # Node0 will be used to test behavior of processing unrequested blocks\n         # from peers which are not whitelisted, while Node1 will be used for"
      },
      {
        "sha": "00317a2c08823276bfa8824e8725e2cece40cd08",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -48,6 +48,9 @@ class BlockchainTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.restart_node(0, extra_args=['-stopatheight=207', '-prune=1'])  # Set extra args with pruning after rescan is complete\n "
      },
      {
        "sha": "3cc35a7b9a4e01978d00681ec20d707cfcb4e4a6",
        "filename": "test/functional/rpc_createmultisig.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_createmultisig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_createmultisig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_createmultisig.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -12,8 +12,11 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def get_keys(self):\n-        node0,node1,node2 = self.nodes\n+        node0, node1, node2 = self.nodes\n         self.add = [node1.getnewaddress() for _ in range(self.nkeys)]\n         self.pub = [node1.getaddressinfo(a)[\"pubkey\"] for a in self.add]\n         self.priv = [node1.dumpprivkey(a) for a in self.add]"
      },
      {
        "sha": "cd6e5511c4a596fd0efed495eb182d16dc4f66fc",
        "filename": "test/functional/rpc_deprecated.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_deprecated.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_deprecated.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_deprecated.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -12,6 +12,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.extra_args = [[], [\"-deprecatedrpc=validateaddress\", \"-deprecatedrpc=accounts\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # This test should be used to verify correct behaviour of deprecated\n         # RPC methods with and without the -deprecatedrpc flags. For example:"
      },
      {
        "sha": "daa890ab15620eadecd95369bad549a31b31aa82",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -29,6 +29,9 @@ def set_test_params(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self, split=False):\n         self.setup_nodes()\n "
      },
      {
        "sha": "bc19c60dde0834ad7ade58015e7cf5ae28fd7a21",
        "filename": "test/functional/rpc_getchaintips.py",
        "status": "modified",
        "additions": 10,
        "deletions": 7,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_getchaintips.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_getchaintips.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_getchaintips.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -17,15 +17,18 @@ class GetChainTipsTest (BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n \n-    def run_test (self):\n-        tips = self.nodes[0].getchaintips ()\n-        assert_equal (len (tips), 1)\n-        assert_equal (tips[0]['branchlen'], 0)\n-        assert_equal (tips[0]['height'], 200)\n-        assert_equal (tips[0]['status'], 'active')\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        tips = self.nodes[0].getchaintips()\n+        assert_equal(len(tips), 1)\n+        assert_equal(tips[0]['branchlen'], 0)\n+        assert_equal(tips[0]['height'], 200)\n+        assert_equal(tips[0]['status'], 'active')\n \n         # Split the network and build two chains of different lengths.\n-        self.split_network ()\n+        self.split_network()\n         self.nodes[0].generate(10)\n         self.nodes[2].generate(20)\n         self.sync_all([self.nodes[:2], self.nodes[2:]])"
      },
      {
        "sha": "be096af892c3375b6fbc3765409b00adbf62ca72",
        "filename": "test/functional/rpc_help.py",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_help.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_help.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_help.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -4,9 +4,10 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test RPC help output.\"\"\"\n \n-from test_framework.test_framework import BitcoinTestFramework, is_zmq_enabled\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, assert_raises_rpc_error\n \n+\n class HelpRpcTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n@@ -26,12 +27,16 @@ def run_test(self):\n         # command titles\n         titles = [line[3:-3] for line in node.help().splitlines() if line.startswith('==')]\n \n-        components = ['Blockchain', 'Control', 'Generating', 'Mining', 'Network', 'Rawtransactions', 'Util', 'Wallet']\n+        components = ['Blockchain', 'Control', 'Generating', 'Mining', 'Network', 'Rawtransactions', 'Util']\n+\n+        if self.is_wallet_compiled():\n+            components.append('Wallet')\n \n-        if is_zmq_enabled(self):\n+        if self.is_zmq_compiled():\n             components.append('Zmq')\n \n         assert_equal(titles, components)\n \n+\n if __name__ == '__main__':\n     HelpRpcTest().main()"
      },
      {
        "sha": "84f7cd05fb403f8887f8164f89280b6267332385",
        "filename": "test/functional/rpc_invalidateblock.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_invalidateblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_invalidateblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_invalidateblock.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -14,6 +14,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.setup_nodes()\n "
      },
      {
        "sha": "f383b82bb5e67c00a4fbae556f01efe9be875a56",
        "filename": "test/functional/rpc_preciousblock.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_preciousblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_preciousblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_preciousblock.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -38,6 +38,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.setup_nodes()\n "
      },
      {
        "sha": "7f2c0c1bd4d04db4aaf0d056d6588dd73eb1fdc4",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -20,6 +20,9 @@ def set_test_params(self):\n         self.setup_clean_chain = False\n         self.num_nodes = 3\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # Create and fund a raw tx for sending 10 BTC\n         psbtx1 = self.nodes[0].walletcreatefundedpsbt([], {self.nodes[2].getnewaddress():10})['psbt']"
      },
      {
        "sha": "d86b546c7d14c5f3806ae07e7c5eee5e91c89b25",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -44,6 +44,9 @@ def set_test_params(self):\n         self.num_nodes = 3\n         self.extra_args = [[\"-addresstype=legacy\"], [\"-addresstype=legacy\"], [\"-addresstype=legacy\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self, split=False):\n         super().setup_network()\n         connect_nodes_bi(self.nodes, 0, 2)"
      },
      {
        "sha": "96f9ccdbdbce1c7278033b2793b5838398f08156",
        "filename": "test/functional/rpc_scantxoutset.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_scantxoutset.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_scantxoutset.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_scantxoutset.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -14,6 +14,10 @@ class ScantxoutsetTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.log.info(\"Mining blocks...\")\n         self.nodes[0].generate(110)"
      },
      {
        "sha": "ad0e29b4515633c660745d8e00eb37ac062a48a0",
        "filename": "test/functional/rpc_signmessage.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_signmessage.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_signmessage.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signmessage.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -13,6 +13,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [[\"-addresstype=legacy\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         message = 'This is just a test message'\n "
      },
      {
        "sha": "035f10e6bcdcf9d5e360a94895177ce9e32dfa26",
        "filename": "test/functional/rpc_signrawtransaction.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_signrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_signrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signrawtransaction.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -14,6 +14,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [[\"-deprecatedrpc=signrawtransaction\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def successful_signing_test(self):\n         \"\"\"Create and sign a valid raw transaction with one input.\n "
      },
      {
        "sha": "867ba25022a6766b2ed6606c8426f40780a7941b",
        "filename": "test/functional/rpc_txoutproof.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_txoutproof.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_txoutproof.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_txoutproof.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -15,6 +15,9 @@ def set_test_params(self):\n         # Nodes 0/1 are \"wallet\" nodes, Nodes 2/3 are used for testing\n         self.extra_args = [[], [], [], [\"-txindex\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.setup_nodes()\n         connect_nodes(self.nodes[0], 1)"
      },
      {
        "sha": "bfa6b06f67f2e264fa9dad7eca8f57114f308795",
        "filename": "test/functional/rpc_zmq.py",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_zmq.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_zmq.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_zmq.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -4,8 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test for the ZMQ RPC methods.\"\"\"\n \n-from test_framework.test_framework import (\n-    BitcoinTestFramework, skip_if_no_py3_zmq, skip_if_no_bitcoind_zmq)\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n \n \n@@ -17,9 +16,11 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_py3_zmq()\n+        self.skip_if_no_bitcoind_zmq()\n+\n     def run_test(self):\n-        skip_if_no_py3_zmq()\n-        skip_if_no_bitcoind_zmq(self)\n         self._test_getzmqnotifications()\n \n     def _test_getzmqnotifications(self):"
      },
      {
        "sha": "57c985b2a2f1972236bf89f122c1fb5772fd5051",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 49,
        "deletions": 22,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -44,6 +44,13 @@ class TestStatus(Enum):\n TEST_EXIT_SKIPPED = 77\n \n \n+class SkipTest(Exception):\n+    \"\"\"This exception is raised to skip a test\"\"\"\n+\n+    def __init__(self, message):\n+        self.message = message\n+\n+\n class BitcoinTestMetaClass(type):\n     \"\"\"Metaclass for BitcoinTestFramework.\n \n@@ -156,6 +163,7 @@ def main(self):\n         try:\n             if self.options.usecli and not self.supports_cli:\n                 raise SkipTest(\"--usecli specified but test does not support using CLI\")\n+            self.skip_test_if_missing_module()\n             self.setup_chain()\n             self.setup_network()\n             self.import_deterministic_coinbase_privkeys()\n@@ -221,6 +229,10 @@ def add_options(self, parser):\n         \"\"\"Override this method to add command-line options to the test\"\"\"\n         pass\n \n+    def skip_test_if_missing_module(self):\n+        \"\"\"Override this method to skip a test if a module is not compiled\"\"\"\n+        pass\n+\n     def setup_chain(self):\n         \"\"\"Override this method to customize blockchain setup\"\"\"\n         self.log.info(\"Initializing test directory \" + self.options.tmpdir)\n@@ -486,30 +498,45 @@ def _initialize_chain_clean(self):\n         for i in range(self.num_nodes):\n             initialize_datadir(self.options.tmpdir, i)\n \n+    def skip_if_no_py3_zmq(self):\n+        \"\"\"Attempt to import the zmq package and skip the test if the import fails.\"\"\"\n+        try:\n+            import zmq  # noqa\n+        except ImportError:\n+            raise SkipTest(\"python3-zmq module not available.\")\n+\n+    def skip_if_no_bitcoind_zmq(self):\n+        \"\"\"Skip the running test if bitcoind has not been compiled with zmq support.\"\"\"\n+        if not self.is_zmq_compiled():\n+            raise SkipTest(\"bitcoind has not been built with zmq enabled.\")\n+\n+    def skip_if_no_wallet(self):\n+        \"\"\"Skip the running test if wallet has not been compiled.\"\"\"\n+        if not self.is_wallet_compiled():\n+            raise SkipTest(\"wallet has not been compiled.\")\n+\n+    def skip_if_no_cli(self):\n+        \"\"\"Skip the running test if bitcoin-cli has not been compiled.\"\"\"\n+        if not self.is_cli_compiled():\n+            raise SkipTest(\"bitcoin-cli has not been compiled.\")\n+\n+    def is_cli_compiled(self):\n+        \"\"\"Checks whether bitcoin-cli was compiled.\"\"\"\n+        config = configparser.ConfigParser()\n+        config.read_file(open(self.options.configfile))\n \n-class SkipTest(Exception):\n-    \"\"\"This exception is raised to skip a test\"\"\"\n-    def __init__(self, message):\n-        self.message = message\n-\n-\n-def skip_if_no_py3_zmq():\n-    \"\"\"Attempt to import the zmq package and skip the test if the import fails.\"\"\"\n-    try:\n-        import zmq  # noqa\n-    except ImportError:\n-        raise SkipTest(\"python3-zmq module not available.\")\n-\n+        return config[\"components\"].getboolean(\"ENABLE_UTILS\")\n \n-def skip_if_no_bitcoind_zmq(test_instance):\n-    \"\"\"Skip the running test if bitcoind has not been compiled with zmq support.\"\"\"\n-    if not is_zmq_enabled(test_instance):\n-        raise SkipTest(\"bitcoind has not been built with zmq enabled.\")\n+    def is_wallet_compiled(self):\n+        \"\"\"Checks whether the wallet module was compiled.\"\"\"\n+        config = configparser.ConfigParser()\n+        config.read_file(open(self.options.configfile))\n \n+        return config[\"components\"].getboolean(\"ENABLE_WALLET\")\n \n-def is_zmq_enabled(test_instance):\n-    \"\"\"Checks whether zmq is enabled or not.\"\"\"\n-    config = configparser.ConfigParser()\n-    config.read_file(open(test_instance.options.configfile))\n+    def is_zmq_compiled(self):\n+        \"\"\"Checks whether the zmq module was compiled.\"\"\"\n+        config = configparser.ConfigParser()\n+        config.read_file(open(self.options.configfile))\n \n-    return config[\"components\"].getboolean(\"ENABLE_ZMQ\")\n+        return config[\"components\"].getboolean(\"ENABLE_ZMQ\")"
      },
      {
        "sha": "37b378e9ca87477a0a120f9031b5998569be4437",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -236,8 +236,6 @@ def main():\n \n     logging.debug(\"Temporary test directory at %s\" % tmpdir)\n \n-    enable_wallet = config[\"components\"].getboolean(\"ENABLE_WALLET\")\n-    enable_utils = config[\"components\"].getboolean(\"ENABLE_UTILS\")\n     enable_bitcoind = config[\"components\"].getboolean(\"ENABLE_BITCOIND\")\n \n     if config[\"environment\"][\"EXEEXT\"] == \".exe\" and not args.force:\n@@ -246,9 +244,9 @@ def main():\n         print(\"Tests currently disabled on Windows by default. Use --force option to enable\")\n         sys.exit(0)\n \n-    if not (enable_wallet and enable_utils and enable_bitcoind):\n-        print(\"No functional tests to run. Wallet, utils, and bitcoind must all be enabled\")\n-        print(\"Rerun `configure` with -enable-wallet, -with-utils and -with-daemon and rerun make\")\n+    if not enable_bitcoind:\n+        print(\"No functional tests to run.\")\n+        print(\"Rerun ./configure with --with-daemon and then make\")\n         sys.exit(0)\n \n     # Build list of tests"
      },
      {
        "sha": "e5ac2c8bd45971c5673d765f84dd5620e03666fc",
        "filename": "test/functional/wallet_abandonconflict.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_abandonconflict.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -20,6 +20,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[\"-minrelaytxfee=0.00001\"], []]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.nodes[1].generate(100)\n         sync_blocks(self.nodes)"
      },
      {
        "sha": "9b398ef346c510a87e842e4687d79a1eed9a4fb6",
        "filename": "test/functional/wallet_address_types.py",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_address_types.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_address_types.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_address_types.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -63,6 +63,7 @@\n     sync_mempools,\n )\n \n+\n class AddressTypeTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 6\n@@ -72,9 +73,12 @@ def set_test_params(self):\n             [\"-addresstype=p2sh-segwit\", \"-changetype=bech32\"],\n             [\"-addresstype=bech32\"],\n             [\"-changetype=p2sh-segwit\"],\n-            []\n+            [],\n         ]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.setup_nodes()\n "
      },
      {
        "sha": "32ec385fa1264c0df62fb64d0d274048acacaf0a",
        "filename": "test/functional/wallet_backup.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_backup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_backup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_backup.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -45,6 +45,9 @@ def set_test_params(self):\n         # nodes 1, 2,3 are spenders, let's give them a keypool=100\n         self.extra_args = [[\"-keypool=100\"], [\"-keypool=100\"], [\"-keypool=100\"], []]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self, split=False):\n         self.setup_nodes()\n         connect_nodes(self.nodes[0], 3)"
      },
      {
        "sha": "4079d054914b637d998a076d33d7e84e53242f99",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -23,6 +23,9 @@ def set_test_params(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.add_nodes(4)\n         self.start_node(0)"
      },
      {
        "sha": "b9fe6c66c5096fcdda378999ca95ab67ec223818",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -31,8 +31,13 @@ class BumpFeeTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n-        self.extra_args = [[\"-deprecatedrpc=addwitnessaddress\", \"-walletrbf={}\".format(i)]\n-                           for i in range(self.num_nodes)]\n+        self.extra_args = [[\n+            \"-deprecatedrpc=addwitnessaddress\",\n+            \"-walletrbf={}\".format(i),\n+        ] for i in range(self.num_nodes)]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n \n     def run_test(self):\n         # Encrypt wallet for test_locked_wallet_fails test"
      },
      {
        "sha": "34ff52525579b55710370dfe49df6e011ddce928",
        "filename": "test/functional/wallet_disableprivatekeys.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_disableprivatekeys.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_disableprivatekeys.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_disableprivatekeys.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -17,6 +17,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.supports_cli = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         node = self.nodes[0]\n         self.log.info(\"Test disableprivatekeys creation.\")"
      },
      {
        "sha": "db731b2a346227a22b77d70ca7435ccc6403dc24",
        "filename": "test/functional/wallet_dump.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_dump.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -87,6 +87,9 @@ def set_test_params(self):\n         self.extra_args = [[\"-keypool=90\", \"-addresstype=legacy\", \"-deprecatedrpc=addwitnessaddress\"]]\n         self.rpc_timeout = 120\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self, split=False):\n         self.add_nodes(self.num_nodes, extra_args=self.extra_args)\n         self.start_nodes()"
      },
      {
        "sha": "d8c27b09d96e643624b948b386e1d157c9a75d41",
        "filename": "test/functional/wallet_encryption.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_encryption.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_encryption.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_encryption.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -19,6 +19,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         passphrase = \"WalletPassphrase\"\n         passphrase2 = \"SecondWalletPassphrase\""
      },
      {
        "sha": "0c67982bbeb2930bdd0b3afd1796deb269baae63",
        "filename": "test/functional/wallet_fallbackfee.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_fallbackfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_fallbackfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_fallbackfee.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -11,6 +11,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.nodes[0].generate(101)\n "
      },
      {
        "sha": "9d61483868819137a0e8091e0c0ca298e6cad0b4",
        "filename": "test/functional/wallet_groups.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_groups.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_groups.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_groups.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -23,7 +23,10 @@ def set_test_params(self):\n         self.extra_args = [[], [], ['-avoidpartialspends']]\n         self.rpc_timewait = 120\n \n-    def run_test (self):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n         # Mine some coins\n         self.nodes[0].generate(110)\n "
      },
      {
        "sha": "48e71f6c40baf22d8062b16c9c471b3c08136981",
        "filename": "test/functional/wallet_hd.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_hd.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -21,6 +21,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[], ['-keypool=0']]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # Make sure can't switch off usehd after wallet creation\n         self.stop_node(1)"
      },
      {
        "sha": "aa4e37ed602ca659ed04a92ab15af3440d3885b3",
        "filename": "test/functional/wallet_import_rescan.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_import_rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_import_rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_import_rescan.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -109,6 +109,9 @@ class ImportRescanTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2 + len(IMPORT_NODES)\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         extra_args = [[\"-addresstype=legacy\"] for _ in range(self.num_nodes)]\n         for i, import_node in enumerate(IMPORT_NODES, 2):"
      },
      {
        "sha": "3dd296d603fcaacb732fdc6fc0b59751425e2cb9",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -12,6 +12,9 @@ def set_test_params(self):\n         self.extra_args = [[\"-addresstype=legacy\"], [\"-addresstype=legacy\"]]\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.setup_nodes()\n "
      },
      {
        "sha": "26b181db339b5a5daec285510d96929aba9a08e9",
        "filename": "test/functional/wallet_importprunedfunds.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_importprunedfunds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_importprunedfunds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importprunedfunds.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -16,6 +16,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.log.info(\"Mining blocks...\")\n         self.nodes[0].generate(101)"
      },
      {
        "sha": "acc336e4d5f78080121f8d544b120b476191848a",
        "filename": "test/functional/wallet_keypool.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -13,6 +13,9 @@ class KeyPoolTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         nodes = self.nodes\n         addr_before_encrypting = nodes[0].getnewaddress()"
      },
      {
        "sha": "f1a441c399733bb3f3f0da0d5f4f4109785722ff",
        "filename": "test/functional/wallet_keypool_topup.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_keypool_topup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_keypool_topup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool_topup.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -27,6 +27,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[], ['-keypool=100']]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         wallet_path = os.path.join(self.nodes[1].datadir, \"regtest\", \"wallets\", \"wallet.dat\")\n         wallet_backup_path = os.path.join(self.nodes[1].datadir, \"wallet.bak\")"
      },
      {
        "sha": "6f9123a0892acebdbcec0f221e36d07aecd76365",
        "filename": "test/functional/wallet_labels.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_labels.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_labels.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_labels.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -30,6 +30,9 @@ def setup_network(self):\n         \"\"\"Don't connect nodes.\"\"\"\n         self.setup_nodes()\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         \"\"\"Run the test twice - once using the accounts API and once using the labels API.\"\"\"\n         self.log.info(\"Test accounts API\")"
      },
      {
        "sha": "3485c4470f6b2a42de323785d5c4ff5b5c956568",
        "filename": "test/functional/wallet_listreceivedby.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_listreceivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_listreceivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listreceivedby.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -23,6 +23,9 @@ def import_deterministic_coinbase_privkeys(self):\n         super().import_deterministic_coinbase_privkeys()\n         self.num_cb_reward_addresses = len(self.nodes[1].listreceivedbyaddress(minconf=0, include_empty=True, include_watchonly=True))\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # Generate block to get out of IBD\n         self.nodes[0].generate(1)"
      },
      {
        "sha": "53e671cd3b0ac1172a3b5eaba8511ba04e4606d8",
        "filename": "test/functional/wallet_listsinceblock.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_listsinceblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_listsinceblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listsinceblock.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -12,6 +12,9 @@ def set_test_params(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.nodes[2].generate(101)\n         self.sync_all()"
      },
      {
        "sha": "5a17395abdb82dde8f3d9c3d35c5aadea26db49b",
        "filename": "test/functional/wallet_listtransactions.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listtransactions.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -27,6 +27,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.enable_mocktime()\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # Simple send, 0 to 1:\n         txid = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.1)"
      },
      {
        "sha": "435821ec4804d9e4c05e4d2cb4e98c126bf2784f",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -23,6 +23,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.supports_cli = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         node = self.nodes[0]\n "
      },
      {
        "sha": "00bf58d7096597d47aa78405871923b131b65cad",
        "filename": "test/functional/wallet_resendwallettransactions.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_resendwallettransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_resendwallettransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_resendwallettransactions.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -12,6 +12,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [['--walletbroadcast=false']]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # Should raise RPC_WALLET_ERROR (-4) if walletbroadcast is disabled.\n         assert_raises_rpc_error(-4, \"Error: Wallet transaction broadcasting is disabled with -walletbroadcast\", self.nodes[0].resendwallettransactions)"
      },
      {
        "sha": "d78c105c174903e2a290fc5ca94a559047cffd03",
        "filename": "test/functional/wallet_txn_clone.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_clone.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -16,6 +16,9 @@ class TxnMallTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def add_options(self, parser):\n         parser.add_argument(\"--mineblock\", dest=\"mine_block\", default=False, action=\"store_true\",\n                             help=\"Test double-spend of 1-confirmed transaction\")"
      },
      {
        "sha": "f114d5ab688890f352ac14be07086f4e70268eeb",
        "filename": "test/functional/wallet_txn_doublespend.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_doublespend.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -18,6 +18,9 @@ class TxnMallTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def add_options(self, parser):\n         parser.add_argument(\"--mineblock\", dest=\"mine_block\", default=False, action=\"store_true\",\n                             help=\"Test double-spend of 1-confirmed transaction\")"
      },
      {
        "sha": "adebff360a5ae7f6d77801091007f6868fd54829",
        "filename": "test/functional/wallet_zapwallettxes.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_zapwallettxes.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -26,6 +26,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.log.info(\"Mining blocks...\")\n         self.nodes[0].generate(1)"
      }
    ]
  },
  {
    "sha": "29899ecd366748c541be15a330f64ce68c948432",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOTg5OWVjZDM2Njc0OGM1NDFiZTE1YTMzMGY2NGNlNjhjOTQ4NDMy",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-08-14T09:26:30Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-25T02:02:42Z"
      },
      "message": "Import CInv from correct module\n\nGithub-Pull: #13965\nRebased-From: a9cf5c9623ad547d9aeebea2b51c2afcfc0f3f4f",
      "tree": {
        "sha": "42fd88d2d03b145e0c7ad40ec71632be404a9829",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/42fd88d2d03b145e0c7ad40ec71632be404a9829"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/29899ecd366748c541be15a330f64ce68c948432",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29899ecd366748c541be15a330f64ce68c948432",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/29899ecd366748c541be15a330f64ce68c948432",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29899ecd366748c541be15a330f64ce68c948432/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f7adb32e383bbbdb473eb470e4a6872b582cac80"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8d954b70f6cf7f36b19d0ce8c8c28a39f66eda63",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29899ecd366748c541be15a330f64ce68c948432/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29899ecd366748c541be15a330f64ce68c948432/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=29899ecd366748c541be15a330f64ce68c948432",
        "patch": "@@ -15,8 +15,8 @@\n \n # Avoid wildcard * imports if possible\n from test_framework.blocktools import (create_block, create_coinbase)\n+from test_framework.messages import CInv\n from test_framework.mininode import (\n-    CInv,\n     P2PInterface,\n     mininode_lock,\n     msg_block,"
      }
    ]
  },
  {
    "sha": "5f51fd6d5966a052addd7e91f74ec66cd5777b37",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZjUxZmQ2ZDU5NjZhMDUyYWRkZDdlOTFmNzRlYzY2Y2Q1Nzc3YjM3",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-09-06T13:59:42Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-25T02:03:04Z"
      },
      "message": "doc/descriptors.md tweaks\n\nAdd some implementation details, and tweak phrasing in examples section to be\nmore explicit about how script expressions are used for matching.\n\nGithub-Pull: #14161\nRebased-From: eb494125624eb3d311c6b2e45ce403c61faddd62",
      "tree": {
        "sha": "52afd9db908f3cbf1b75ac494adea6dbe144f205",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/52afd9db908f3cbf1b75ac494adea6dbe144f205"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f51fd6d5966a052addd7e91f74ec66cd5777b37",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f51fd6d5966a052addd7e91f74ec66cd5777b37",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5f51fd6d5966a052addd7e91f74ec66cd5777b37",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f51fd6d5966a052addd7e91f74ec66cd5777b37/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29899ecd366748c541be15a330f64ce68c948432",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29899ecd366748c541be15a330f64ce68c948432",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29899ecd366748c541be15a330f64ce68c948432"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 25,
      "deletions": 17
    },
    "files": [
      {
        "sha": "d97e838d7ed5d79d0d27696c868c2806d2898c75",
        "filename": "doc/descriptors.md",
        "status": "modified",
        "additions": 25,
        "deletions": 17,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f51fd6d5966a052addd7e91f74ec66cd5777b37/doc/descriptors.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f51fd6d5966a052addd7e91f74ec66cd5777b37/doc/descriptors.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/descriptors.md?ref=5f51fd6d5966a052addd7e91f74ec66cd5777b37",
        "patch": "@@ -22,19 +22,19 @@ Output descriptors currently support:\n \n ## Examples\n \n-- `pk(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)` represents a P2PK output.\n-- `pkh(02c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5)` represents a P2PKH output.\n-- `wpkh(02f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9)` represents a P2WPKH output.\n-- `sh(wpkh(03fff97bd5755eeea420453a14355235d382f6472f8568a18b2f057a1460297556))` represents a P2SH-P2WPKH output.\n-- `combo(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)` represents a P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH output.\n-- `sh(wsh(pkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13)))` represents a (overly complicated) P2SH-P2WSH-P2PKH output.\n-- `multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc)` represents a bare *1-of-2* multisig.\n-- `sh(multi(2,022f01e5e15cca351daff3843fb70f3c2f0a1bdd05e5af888a67784ef3e10a2a01,03acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe))` represents a P2SH *2-of-2* multisig.\n-- `wsh(multi(2,03a0434d9e47f3c86235477c7b1ae6ae5d3442d49b1943c2b752a68e2a47e247c7,03774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb,03d01115d548e7561b15c38f004d734633687cf4419620095bc5b0f47070afe85a))` represents a P2WSH *2-of-3* multisig.\n-- `sh(wsh(multi(1,03f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8,03499fdf9e895e719cfd64e67f07d38e3226aa7b63678949e6e49b241a60e823e4,02d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e)))` represents a P2SH-P2WSH *1-of-3* multisig.\n-- `pk(xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8)` refers to a single P2PK output, using the public key part from the specified xpub.\n-- `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1'/2)` refers to a single P2PKH output, using child key *1'/2* of the specified xpub.\n-- `wsh(multi(1,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/1/0/*,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/0/*))` refers to a chain of *1-of-2* P2WSH multisig outputs, using public keys taken from two HD chains with corresponding derivation paths.\n+- `pk(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)` matches a P2PK output with the specified public key.\n+- `pkh(02c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5)` matches a P2PKH output with the specified public key.\n+- `wpkh(02f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9)` matches a P2WPKH output with the specified public key.\n+- `sh(wpkh(03fff97bd5755eeea420453a14355235d382f6472f8568a18b2f057a1460297556))` matches a P2SH-P2WPKH output with the specified public key.\n+- `combo(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)` matches any P2PK, P2PKH, P2WPKH, or P2SH-P2WPKH output with the specified public key.\n+- `sh(wsh(pkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13)))` matches an (overly complicated) P2SH-P2WSH-P2PKH output with the specified public key.\n+- `multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc)` matches a bare *1-of-2* multisig output with keys in the specified order.\n+- `sh(multi(2,022f01e5e15cca351daff3843fb70f3c2f0a1bdd05e5af888a67784ef3e10a2a01,03acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe))` matches a P2SH *2-of-2* multisig output with keys in the specified order.\n+- `wsh(multi(2,03a0434d9e47f3c86235477c7b1ae6ae5d3442d49b1943c2b752a68e2a47e247c7,03774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb,03d01115d548e7561b15c38f004d734633687cf4419620095bc5b0f47070afe85a))` matches a P2WSH *2-of-3* multisig output with keys in the specified order.\n+- `sh(wsh(multi(1,03f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8,03499fdf9e895e719cfd64e67f07d38e3226aa7b63678949e6e49b241a60e823e4,02d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e)))` matches a P2SH-P2WSH *1-of-3* multisig output with keys in the specified order.\n+- `pk(xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8)` matches a P2PK output with the public key of the specified xpub.\n+- `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1'/2)` matches a P2PKH output with child key *1'/2* of the specified xpub.\n+- `wsh(multi(1,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/1/0/*,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/0/0/*))` matches any *1-of-2* P2WSH multisig output where the first multisig key is the *1/0/`i`* child of the first specified xpub and the second multisig key is the *0/0/`i`* child of the second specified xpub, and `i` is any number in a configurable range (`0-1000` by default).\n \n ## Reference\n \n@@ -91,6 +91,14 @@ on Bitcoin's OP_CHECKMULTISIG opcode. To support these, we introduce the\n multisig policy, where any *k* out of the *n* provided public keys must\n sign.\n \n+Key order is significant. A `multi()` expression will only match multisig\n+scripts with keys in the specified order. Also, to prevent a combinatorial\n+explosion of the search space, if more than one `multi()` key arguments is a\n+BIP32 wildcard path ending in `/*` or `*'`, the `multi()` expression only\n+matches multisig scripts with the `i`th child key from each wildcard path in\n+lockstep, rather than scripts with any combination of child keys from each\n+wildcard path.\n+\n ### BIP32 derived keys and chains\n \n Most modern wallet software and hardware uses keys that are derived using\n@@ -101,7 +109,7 @@ path consists of a sequence of 0 or more integers (in the range\n *0..2<sup>31</sup>-1*) each optionally followed by `'` or `h`, and\n separated by `/` characters. The string may optionally end with the\n literal `/*` or `/*'` (or `/*h`) to refer to all unhardened or hardened\n-child keys instead.\n+child keys in a configurable range (by default `0-1000`, inclusive).\n \n Whenever a public key is described using a hardened derivation step, the\n script cannot be computed without access to the corresponding private\n@@ -119,6 +127,6 @@ steps, or for dumping wallet descriptors including private key material.\n \n In order to easily represent the sets of scripts currently supported by\n existing Bitcoin Core wallets, a convenience function `combo` is\n-provided, which takes as input a public key, and constructs the P2PK,\n-P2PKH, P2WPKH, and P2SH-P2WPH scripts for that key. In case the key is\n-uncompressed, it only constructs P2PK and P2PKH.\n+provided, which takes as input a public key, and matches P2PK,\n+P2PKH, P2WPKH, or P2SH-P2WPH scripts for that key. In case the key is\n+uncompressed, it only matches the P2PK or P2PKH scripts.\n\\ No newline at end of file"
      }
    ]
  },
  {
    "sha": "703a24418ccecd9e78d629808a1f8d6a8b410c77",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MDNhMjQ0MThjY2VjZDllNzhkNjI5ODA4YTFmOGQ2YThiNDEwYzc3",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-10-17T15:41:22Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-25T02:03:08Z"
      },
      "message": "descriptors.md: Refer to descriptors as describing instead of matching\n\nGithub-Pull: #14161\nRebased-From: eeeaa29214ab99e7f491b21d21bf362a86a48305",
      "tree": {
        "sha": "9a5fa324b7d2af4ef7360c89bd9af55243160d7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a5fa324b7d2af4ef7360c89bd9af55243160d7f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/703a24418ccecd9e78d629808a1f8d6a8b410c77",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/703a24418ccecd9e78d629808a1f8d6a8b410c77",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/703a24418ccecd9e78d629808a1f8d6a8b410c77",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/703a24418ccecd9e78d629808a1f8d6a8b410c77/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5f51fd6d5966a052addd7e91f74ec66cd5777b37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f51fd6d5966a052addd7e91f74ec66cd5777b37",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f51fd6d5966a052addd7e91f74ec66cd5777b37"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 24,
      "deletions": 23
    },
    "files": [
      {
        "sha": "47e15e0502d1fbd5788b8c9c32ab54601abff2e4",
        "filename": "doc/descriptors.md",
        "status": "modified",
        "additions": 24,
        "deletions": 23,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/703a24418ccecd9e78d629808a1f8d6a8b410c77/doc/descriptors.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/703a24418ccecd9e78d629808a1f8d6a8b410c77/doc/descriptors.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/descriptors.md?ref=703a24418ccecd9e78d629808a1f8d6a8b410c77",
        "patch": "@@ -22,19 +22,19 @@ Output descriptors currently support:\n \n ## Examples\n \n-- `pk(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)` matches a P2PK output with the specified public key.\n-- `pkh(02c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5)` matches a P2PKH output with the specified public key.\n-- `wpkh(02f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9)` matches a P2WPKH output with the specified public key.\n-- `sh(wpkh(03fff97bd5755eeea420453a14355235d382f6472f8568a18b2f057a1460297556))` matches a P2SH-P2WPKH output with the specified public key.\n-- `combo(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)` matches any P2PK, P2PKH, P2WPKH, or P2SH-P2WPKH output with the specified public key.\n-- `sh(wsh(pkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13)))` matches an (overly complicated) P2SH-P2WSH-P2PKH output with the specified public key.\n-- `multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc)` matches a bare *1-of-2* multisig output with keys in the specified order.\n-- `sh(multi(2,022f01e5e15cca351daff3843fb70f3c2f0a1bdd05e5af888a67784ef3e10a2a01,03acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe))` matches a P2SH *2-of-2* multisig output with keys in the specified order.\n-- `wsh(multi(2,03a0434d9e47f3c86235477c7b1ae6ae5d3442d49b1943c2b752a68e2a47e247c7,03774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb,03d01115d548e7561b15c38f004d734633687cf4419620095bc5b0f47070afe85a))` matches a P2WSH *2-of-3* multisig output with keys in the specified order.\n-- `sh(wsh(multi(1,03f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8,03499fdf9e895e719cfd64e67f07d38e3226aa7b63678949e6e49b241a60e823e4,02d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e)))` matches a P2SH-P2WSH *1-of-3* multisig output with keys in the specified order.\n-- `pk(xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8)` matches a P2PK output with the public key of the specified xpub.\n-- `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1'/2)` matches a P2PKH output with child key *1'/2* of the specified xpub.\n-- `wsh(multi(1,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/1/0/*,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/0/0/*))` matches any *1-of-2* P2WSH multisig output where the first multisig key is the *1/0/`i`* child of the first specified xpub and the second multisig key is the *0/0/`i`* child of the second specified xpub, and `i` is any number in a configurable range (`0-1000` by default).\n+- `pk(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)` describes a P2PK output with the specified public key.\n+- `pkh(02c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5)` describes a P2PKH output with the specified public key.\n+- `wpkh(02f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9)` describes a P2WPKH output with the specified public key.\n+- `sh(wpkh(03fff97bd5755eeea420453a14355235d382f6472f8568a18b2f057a1460297556))` describes a P2SH-P2WPKH output with the specified public key.\n+- `combo(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)` describes any P2PK, P2PKH, P2WPKH, or P2SH-P2WPKH output with the specified public key.\n+- `sh(wsh(pkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13)))` describes an (overly complicated) P2SH-P2WSH-P2PKH output with the specified public key.\n+- `multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc)` describes a bare *1-of-2* multisig output with keys in the specified order.\n+- `sh(multi(2,022f01e5e15cca351daff3843fb70f3c2f0a1bdd05e5af888a67784ef3e10a2a01,03acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe))` describes a P2SH *2-of-2* multisig output with keys in the specified order.\n+- `wsh(multi(2,03a0434d9e47f3c86235477c7b1ae6ae5d3442d49b1943c2b752a68e2a47e247c7,03774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb,03d01115d548e7561b15c38f004d734633687cf4419620095bc5b0f47070afe85a))` describes a P2WSH *2-of-3* multisig output with keys in the specified order.\n+- `sh(wsh(multi(1,03f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8,03499fdf9e895e719cfd64e67f07d38e3226aa7b63678949e6e49b241a60e823e4,02d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e)))` describes a P2SH-P2WSH *1-of-3* multisig output with keys in the specified order.\n+- `pk(xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8)` describes a P2PK output with the public key of the specified xpub.\n+- `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1'/2)` describes a P2PKH output with child key *1'/2* of the specified xpub.\n+- `wsh(multi(1,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/1/0/*,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/0/0/*))` describes a set of *1-of-2* P2WSH multisig outputs where the first multisig key is the *1/0/`i`* child of the first specified xpub and the second multisig key is the *0/0/`i`* child of the second specified xpub, and `i` is any number in a configurable range (`0-1000` by default).\n \n ## Reference\n \n@@ -91,13 +91,14 @@ on Bitcoin's OP_CHECKMULTISIG opcode. To support these, we introduce the\n multisig policy, where any *k* out of the *n* provided public keys must\n sign.\n \n-Key order is significant. A `multi()` expression will only match multisig\n-scripts with keys in the specified order. Also, to prevent a combinatorial\n-explosion of the search space, if more than one `multi()` key arguments is a\n-BIP32 wildcard path ending in `/*` or `*'`, the `multi()` expression only\n-matches multisig scripts with the `i`th child key from each wildcard path in\n-lockstep, rather than scripts with any combination of child keys from each\n-wildcard path.\n+Key order is significant. A `multi()` expression describes a multisig script\n+with keys in the specified order, and in a search for TXOs, it will not match\n+outputs with multisig scriptPubKeys that have the same keys in a different\n+order. Also, to prevent a combinatorial explosion of the search space, if more\n+than one of the `multi()` key arguments is a BIP32 wildcard path ending in `/*`\n+or `*'`, the `multi()` expression only matches multisig scripts with the `i`th\n+child key from each wildcard path in lockstep, rather than scripts with any\n+combination of child keys from each wildcard path.\n \n ### BIP32 derived keys and chains\n \n@@ -127,6 +128,6 @@ steps, or for dumping wallet descriptors including private key material.\n \n In order to easily represent the sets of scripts currently supported by\n existing Bitcoin Core wallets, a convenience function `combo` is\n-provided, which takes as input a public key, and matches P2PK,\n-P2PKH, P2WPKH, or P2SH-P2WPH scripts for that key. In case the key is\n-uncompressed, it only matches the P2PK or P2PKH scripts.\n\\ No newline at end of file\n+provided, which takes as input a public key, and describes a set of P2PK,\n+P2PKH, P2WPKH, and P2SH-P2WPH scripts for that key. In case the key is\n+uncompressed, the set only includes P2PK and P2PKH scripts.\n\\ No newline at end of file"
      }
    ]
  },
  {
    "sha": "9461f98c534ab64ae404085ffb309ec276e3c902",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NDYxZjk4YzUzNGFiNjRhZTQwNDA4NWZmYjMwOWVjMjc2ZTNjOTAy",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-08-20T19:24:55Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-25T02:03:20Z"
      },
      "message": "Disable wallet and address book Qt tests on macOS minimal platform\n\nmacOS Qt minimal platform is frequently broken, and these are currently failing\nwith Qt 5.11.1.\n\nThe tests do pass when run on the full cocoa platform\n(with `test_bitcoin-qt -platform cocoa`).\n\nGithub-Pull: #14011\nRebased-From: a3197c5294df4711bab0ff6dcdd061ceab115c7d",
      "tree": {
        "sha": "4d3b654cc5d8f7d5cd0bbf99625347cfbac87816",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d3b654cc5d8f7d5cd0bbf99625347cfbac87816"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9461f98c534ab64ae404085ffb309ec276e3c902",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9461f98c534ab64ae404085ffb309ec276e3c902",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9461f98c534ab64ae404085ffb309ec276e3c902",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9461f98c534ab64ae404085ffb309ec276e3c902/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "703a24418ccecd9e78d629808a1f8d6a8b410c77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/703a24418ccecd9e78d629808a1f8d6a8b410c77",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/703a24418ccecd9e78d629808a1f8d6a8b410c77"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 23,
      "deletions": 0
    },
    "files": [
      {
        "sha": "35258460441f428803d52f795017694baf95800f",
        "filename": "src/qt/test/addressbooktests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9461f98c534ab64ae404085ffb309ec276e3c902/src/qt/test/addressbooktests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9461f98c534ab64ae404085ffb309ec276e3c902/src/qt/test/addressbooktests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/addressbooktests.cpp?ref=9461f98c534ab64ae404085ffb309ec276e3c902",
        "patch": "@@ -17,6 +17,7 @@\n #include <key_io.h>\n #include <wallet/wallet.h>\n \n+#include <QApplication>\n #include <QTimer>\n #include <QMessageBox>\n \n@@ -139,5 +140,16 @@ void TestAddAddressesToSendBook()\n \n void AddressBookTests::addressBookTests()\n {\n+#ifdef Q_OS_MAC\n+    if (QApplication::platformName() == \"minimal\") {\n+        // Disable for mac on \"minimal\" platform to avoid crashes inside the Qt\n+        // framework when it tries to look up unimplemented cocoa functions,\n+        // and fails to handle returned nulls\n+        // (https://bugreports.qt.io/browse/QTBUG-49686).\n+        QWARN(\"Skipping AddressBookTests on mac build with 'minimal' platform set due to Qt bugs. To run AppTests, invoke \"\n+              \"with 'test_bitcoin-qt -platform cocoa' on mac, or else use a linux or windows build.\");\n+        return;\n+    }\n+#endif\n     TestAddAddressesToSendBook();\n }"
      },
      {
        "sha": "9598d64845c30f0e505b257a1310961d0afb8a1c",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9461f98c534ab64ae404085ffb309ec276e3c902/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9461f98c534ab64ae404085ffb309ec276e3c902/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=9461f98c534ab64ae404085ffb309ec276e3c902",
        "patch": "@@ -243,5 +243,16 @@ void TestGUI()\n \n void WalletTests::walletTests()\n {\n+#ifdef Q_OS_MAC\n+    if (QApplication::platformName() == \"minimal\") {\n+        // Disable for mac on \"minimal\" platform to avoid crashes inside the Qt\n+        // framework when it tries to look up unimplemented cocoa functions,\n+        // and fails to handle returned nulls\n+        // (https://bugreports.qt.io/browse/QTBUG-49686).\n+        QWARN(\"Skipping WalletTests on mac build with 'minimal' platform set due to Qt bugs. To run AppTests, invoke \"\n+              \"with 'test_bitcoin-qt -platform cocoa' on mac, or else use a linux or windows build.\");\n+        return;\n+    }\n+#endif\n     TestGUI();\n }"
      }
    ]
  },
  {
    "sha": "eb2cc84a31fb923b2b25b979682904cb81edec7e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYjJjYzg0YTMxZmI5MjNiMmIyNWI5Nzk2ODI5MDRjYjgxZWRlYzdl",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-10-18T18:44:22Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-10-25T13:49:36Z"
      },
      "message": "[macOS] Remove DS_Store WindowBounds bytes object\n\nGithub-Pull: #14416\nRebased-From: 43719e0a3411e6a08e04908332cb44adfa00c6a2\nTree-SHA512: 0b5987abf34a8c62c3f704c4ca3c9837a23fbce11954740461833099157db94418886001993f9f1a0b3252c923bd049bc1e1d0f99d04205c889270755a8cd245",
      "tree": {
        "sha": "ba60ade2d11754d338b8800a718603d10f621c4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba60ade2d11754d338b8800a718603d10f621c4f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eb2cc84a31fb923b2b25b979682904cb81edec7e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlvRyfAACgkQHkrtYphs\n0l0Eowf/cFRX9+ztZmHevxww2HRG3RxgeDQ0ilgSBHTRZBBSbfSOEa6UOPenw51I\nxwRdZFoHEXi1sSOsgPaaappoeU0MJY1oeBzPdp2RPgrH/NBni0drsBuOqG64r1a0\niylMEnzQGA39HT4ozqiQoA/IgmslXt97/K8c6nHY5Ns92ScZpRWSnB95GWGA6Bpy\np34JtkmFi2cNFUbMzgJvENWe8jQXAx5CZ4Q7h4S3KW38oRQ9bR+gpg2UwoIhj7LR\nJHY/i47fSKaVzMh5a9ucw1ajXzeUNeVM9jJFR7wkz6eL0tMkhOKQAuN470N7f6Ly\nBvi46hWhndsItVzjS+56A7211oO1SA==\n=74Vn\n-----END PGP SIGNATURE-----",
        "payload": "tree ba60ade2d11754d338b8800a718603d10f621c4f\nparent 1b5af2c177ee31109fdd710bc1f1f4f922cedaef\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1539888262 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1540475376 +0200\n\n[macOS] Remove DS_Store WindowBounds bytes object\n\nGithub-Pull: #14416\nRebased-From: 43719e0a3411e6a08e04908332cb44adfa00c6a2\nTree-SHA512: 0b5987abf34a8c62c3f704c4ca3c9837a23fbce11954740461833099157db94418886001993f9f1a0b3252c923bd049bc1e1d0f99d04205c889270755a8cd245\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb2cc84a31fb923b2b25b979682904cb81edec7e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eb2cc84a31fb923b2b25b979682904cb81edec7e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb2cc84a31fb923b2b25b979682904cb81edec7e/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1b5af2c177ee31109fdd710bc1f1f4f922cedaef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b5af2c177ee31109fdd710bc1f1f4f922cedaef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1b5af2c177ee31109fdd710bc1f1f4f922cedaef"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "c29f83a91e52b90f0a0eb726f247d308ce2b2dc3",
        "filename": "contrib/macdeploy/custom_dsstore.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb2cc84a31fb923b2b25b979682904cb81edec7e/contrib/macdeploy/custom_dsstore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb2cc84a31fb923b2b25b979682904cb81edec7e/contrib/macdeploy/custom_dsstore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/custom_dsstore.py?ref=eb2cc84a31fb923b2b25b979682904cb81edec7e",
        "patch": "@@ -13,7 +13,7 @@\n ds = DSStore.open(output_file, 'w+')\n ds['.']['bwsp'] = {\n     'ShowStatusBar': False,\n-    'WindowBounds': b'{{300, 280}, {500, 343}}',\n+    'WindowBounds': '{{300, 280}, {500, 343}}',\n     'ContainerShowSidebar': False,\n     'SidebarWidth': 0,\n     'ShowTabView': False,"
      }
    ]
  },
  {
    "sha": "248e5ec348979c2d299b04adf93deaafd2b3b2b7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNDhlNWVjMzQ4OTc5YzJkMjk5YjA0YWRmOTNkZWFhZmQyYjNiMmI3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-10-25T20:54:20Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-10-25T20:55:23Z"
      },
      "message": "doc: Update release notes for 0.17.0.1",
      "tree": {
        "sha": "70c92f27f380a0b238ea02a34f25536194887235",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/70c92f27f380a0b238ea02a34f25536194887235"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/248e5ec348979c2d299b04adf93deaafd2b3b2b7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/248e5ec348979c2d299b04adf93deaafd2b3b2b7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/248e5ec348979c2d299b04adf93deaafd2b3b2b7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/248e5ec348979c2d299b04adf93deaafd2b3b2b7/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eb2cc84a31fb923b2b25b979682904cb81edec7e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb2cc84a31fb923b2b25b979682904cb81edec7e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eb2cc84a31fb923b2b25b979682904cb81edec7e"
      }
    ],
    "stats": {
      "total": 79,
      "additions": 17,
      "deletions": 62
    },
    "files": [
      {
        "sha": "6fac959e6088aa8405b8aee6b478c710fb7824d5",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 17,
        "deletions": 62,
        "changes": 79,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/248e5ec348979c2d299b04adf93deaafd2b3b2b7/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/248e5ec348979c2d299b04adf93deaafd2b3b2b7/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=248e5ec348979c2d299b04adf93deaafd2b3b2b7",
        "patch": "@@ -1,9 +1,6 @@\n-(note: this is a temporary file, to be added-to by anybody, and moved to\n-release-notes at release time)\n+Bitcoin Core version 0.17.0.1 is now available from:\n \n-Bitcoin Core version 0.17.x is now available from:\n-\n-  <https://bitcoincore.org/bin/bitcoin-core-0.17.x/>\n+  <https://bitcoincore.org/bin/bitcoin-core-0.17.0.1/>\n \n This is a new major version release, including new features, various bugfixes\n and performance improvements, as well as updated translations.\n@@ -16,72 +13,30 @@ To receive security and update notifications, please subscribe to:\n \n   <https://bitcoincore.org/en/list/announcements/join/>\n \n-How to Upgrade\n-==============\n-\n-If you are running an older version, shut it down. Wait until it has completely\n-shut down (which might take a few minutes for older versions), then run the\n-installer (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on Mac)\n-or `bitcoind`/`bitcoin-qt` (on Linux).\n-\n-If your node has a txindex, the txindex db will be migrated the first time you run 0.17.0 or newer, which may take up to a few hours. Your node will not be functional until this migration completes.\n-\n-The first time you run version 0.15.0 or newer, your chainstate database will be converted to a\n-new format, which will take anywhere from a few minutes to half an hour,\n-depending on the speed of your machine.\n-\n-Note that the block database format also changed in version 0.8.0 and there is no\n-automatic upgrade code from before version 0.8 to version 0.15.0. Upgrading\n-directly from 0.7.x and earlier without redownloading the blockchain is not supported.\n-However, as usual, old wallet versions are still supported.\n-\n-Downgrading warning\n--------------------\n-\n-The chainstate database for this release is not compatible with previous\n-releases, so if you run 0.15 and then decide to switch back to any\n-older version, you will need to run the old release with the `-reindex-chainstate`\n-option to rebuild the chainstate data structures in the old format.\n-\n-If your node has pruning enabled, this will entail re-downloading and\n-processing the entire blockchain.\n-\n-Compatibility\n-==============\n-\n-Bitcoin Core is extensively tested on multiple operating systems using\n-the Linux kernel, macOS 10.10+, and Windows 7 and newer (Windows XP is not supported).\n-\n-Bitcoin Core should also work on most other Unix-like systems but is not\n-frequently tested on them.\n-\n-From 0.17.0 onwards macOS <10.10 is no longer supported. 0.17.0 is built using Qt 5.9.x, which doesn't\n-support versions of macOS older than 10.10.\n-\n-Known issues\n-============\n-\n-...\n-\n Notable changes\n ===============\n \n-...\n+An issue was solved with OSX dmg generation, affecting OSX 10.12 to 10.14,\n+which could cause Finder to crash on install.\n \n-0.17.x change log\n-=================\n+There are no significant changes for other operating systems.\n \n-...\n+0.17.0.1 change log\n+===================\n+\n+### Build system\n+- #14416 `eb2cc84` Fix OSX dmg issue (10.12 to 10.14) (jonasschnelli)\n+\n+### Documentation\n+- #14509 `1b5af2c` [0.17] doc: use SegWit in getblocktemplate example (Sjors)\n \n Credits\n =======\n \n Thanks to everyone who directly contributed to this release:\n \n-...\n-\n-And to those that reported security issues:\n-\n-...\n+- Jonas Schnelli\n+- Pieter Wuille\n+- Sjors Provoost\n+- Wladimir J. van der Laan\n \n-As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/)."
      }
    ]
  },
  {
    "sha": "dc4923a71bf64bd48708c7e4bd33765cdae68fdf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYzQ5MjNhNzFiZjY0YmQ0ODcwOGM3ZTRiZDMzNzY1Y2RhZTY4ZmRm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-10-25T20:54:58Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-10-25T23:24:38Z"
      },
      "message": "build: Bump version for 0.17.0.1",
      "tree": {
        "sha": "ac1e8de6524695a6bfc16eb4f1d0f4abc9b30db2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ac1e8de6524695a6bfc16eb4f1d0f4abc9b30db2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dc4923a71bf64bd48708c7e4bd33765cdae68fdf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc4923a71bf64bd48708c7e4bd33765cdae68fdf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dc4923a71bf64bd48708c7e4bd33765cdae68fdf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc4923a71bf64bd48708c7e4bd33765cdae68fdf/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "248e5ec348979c2d299b04adf93deaafd2b3b2b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/248e5ec348979c2d299b04adf93deaafd2b3b2b7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/248e5ec348979c2d299b04adf93deaafd2b3b2b7"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "812e0a82696e172e6b5ec39f87529e3c04b8d1f2",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc4923a71bf64bd48708c7e4bd33765cdae68fdf/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc4923a71bf64bd48708c7e4bd33765cdae68fdf/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=dc4923a71bf64bd48708c7e4bd33765cdae68fdf",
        "patch": "@@ -3,7 +3,7 @@ AC_PREREQ([2.60])\n define(_CLIENT_VERSION_MAJOR, 0)\n define(_CLIENT_VERSION_MINOR, 17)\n define(_CLIENT_VERSION_REVISION, 0)\n-define(_CLIENT_VERSION_BUILD, 0)\n+define(_CLIENT_VERSION_BUILD, 1)\n define(_CLIENT_VERSION_IS_RELEASE, true)\n define(_COPYRIGHT_YEAR, 2018)\n define(_COPYRIGHT_HOLDERS,[The %s developers])"
      },
      {
        "sha": "b8ca0300044c649cb6c06ea9c187eae03973915f",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc4923a71bf64bd48708c7e4bd33765cdae68fdf/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc4923a71bf64bd48708c7e4bd33765cdae68fdf/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=dc4923a71bf64bd48708c7e4bd33765cdae68fdf",
        "patch": "@@ -16,7 +16,7 @@ To receive security and update notifications, please subscribe to:\n Notable changes\n ===============\n \n-An issue was solved with OSX dmg generation, affecting OSX 10.12 to 10.14,\n+An issue was solved with OSX dmg generation, affecting macOS 10.12 to 10.14,\n which could cause Finder to crash on install.\n \n There are no significant changes for other operating systems."
      }
    ]
  },
  {
    "sha": "f9fc08c5f86fc3c1cfb922d347eec01b695c677a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOWZjMDhjNWY4NmZjM2MxY2ZiOTIyZDM0N2VlYzAxYjY5NWM2Nzdh",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-10-26T01:47:51Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-10-26T01:47:51Z"
      },
      "message": "travis: Pin flake8 version to 3.5.0",
      "tree": {
        "sha": "0b2c10616778f5fe1d724bb5ceb971088909afb9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b2c10616778f5fe1d724bb5ceb971088909afb9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f9fc08c5f86fc3c1cfb922d347eec01b695c677a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAlvSckcACgkQLuufXMCV\nJsFEPQ//SXBI/LQ79jrW3So5ai8Gr4gNTR9CS2KKpu+kFmDSo6cnGj0ZUcybPah2\n8v4u/mI1gWyG1Sx+bnlZ/xpzgOY0yZXqE806i3rvVK5yrRnrabm0PzlMwC+hFefH\nTQBUUxRVLIv6Sd936vKCnHsjIyaUjlnTkashaQefT1vJ0vVgvo+pG5EQww+ESRHI\nWTTOxfAW2PQpij3HEPLLdbJgy8BaKgvyxeHkdDSu34qWlp8R7HLJ6kah6jWJS/2P\nTX9w6VrPKxiTB1/5IvvfK7nqaFdjea79j0Sdq8+D6g+lsndfRBUUyDoMGR8eZ1zs\nKIaxWSYTQDJufJAoOOD0rKKBgPdr+6Y/qftzs4wVd9YXGhUcT5S1XqJcdDZO9/oD\nGQUlfEEGlomiYGP+LxU4fzy7esoay8v8JPz/+PxLIr7Roh9qruZBDhLhX/l+p/wI\n0wtw86URrtmLrDA7Jb+ZrrB2aWqEqwb6IlGcqAM1T7I1MKH2+4RXJFi4dwAg43iY\nV4NFqrVu/mM+uPSZ2Oo7ChNQs1861Sf1V6C/RxJup9JzZU4dO50peeZQ5OREABUn\nU6mFFHWWp4zKKjRRkC8vMo872U/MXo08d05N0VWhn9KRWou+js6XxQMVA/w/z7+5\n8NIitveveaj4DTSMapsfy5kUQSK2pl3XWbRi/HKOlHIrf7dmClo=\n=70mb\n-----END PGP SIGNATURE-----",
        "payload": "tree 0b2c10616778f5fe1d724bb5ceb971088909afb9\nparent eb2cc84a31fb923b2b25b979682904cb81edec7e\nauthor fanquake <fanquake@gmail.com> 1540518471 +0800\ncommitter fanquake <fanquake@gmail.com> 1540518471 +0800\n\ntravis: Pin flake8 version to 3.5.0\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9fc08c5f86fc3c1cfb922d347eec01b695c677a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f9fc08c5f86fc3c1cfb922d347eec01b695c677a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9fc08c5f86fc3c1cfb922d347eec01b695c677a/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eb2cc84a31fb923b2b25b979682904cb81edec7e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb2cc84a31fb923b2b25b979682904cb81edec7e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eb2cc84a31fb923b2b25b979682904cb81edec7e"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d1772e43e57298b1f9f7e23e7408c0a85fa3684a",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9fc08c5f86fc3c1cfb922d347eec01b695c677a/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9fc08c5f86fc3c1cfb922d347eec01b695c677a/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=f9fc08c5f86fc3c1cfb922d347eec01b695c677a",
        "patch": "@@ -148,7 +148,7 @@ jobs:\n       language: python\n       python: '3.6'\n       install:\n-        - travis_retry pip install flake8\n+        - travis_retry pip install flake8==3.5.0\n       before_script:\n         - git fetch --unshallow\n       script:"
      }
    ]
  },
  {
    "sha": "f13041f17b08d95365ae5f14f1be1962b965ff45",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMTMwNDFmMTdiMDhkOTUzNjVhZTVmMTRmMWJlMTk2MmI5NjVmZjQ1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-26T02:09:46Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-26T02:09:50Z"
      },
      "message": "Merge #14579: [0.17] travis: Pin flake8 version to 3.5.0\n\nf9fc08c5f8 travis: Pin flake8 version to 3.5.0 (fanquake)\n\nPull request description:\n\n  Pin flake8 version to 3.5.0 to fix the linters.\n\nTree-SHA512: 4f06d0aacbdfbbc6d090790aeea5185f2a61259381e586f4015bc0f8c0d0c8fec6156343a9587b8605bc776b39c080bd6584e6e9b685eaba3d90a58c726ac469",
      "tree": {
        "sha": "0b2c10616778f5fe1d724bb5ceb971088909afb9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b2c10616778f5fe1d724bb5ceb971088909afb9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f13041f17b08d95365ae5f14f1be1962b965ff45",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJb0nduAAoJENLqSFDnUoslclsQAI6UVN2rfS6H9Ess1MO934nu\nR9m4gCX76xjAFZrKsmBXh6+dOPBbg+ScFVXusYdXPEXSqduFhBJS61iwwDnBhlST\ndUfNqbqzKugIgePzymGdXZ4IGkwc4JCKy8FT90Xupl+TGfO/bWVN6zC8fGD3w5nA\nNZ/EdhtUBHWyseVsUhMrxrya//4sTOy3SCbg1diGAGmjhBJvAWQwjoDCklVpLaQh\nX+qvImBq77FJgTyLxFY8+Lv5q7mm7Ki0H/aDZq85RW+e1f+byMli2knQ9bQM58Oj\nYeOZzrRcGakgiXzpn1m24yUwlEWIY4ANUXkux6rIaRfmHLdonCLwDifvoaRtmRYz\nYPaDYMF3XOgs7i8dc1Hk5G937hCgNNaBHbtiKAuwBkH/Z5EVmiAOkVqILymPZdSL\nygz0f05rFX3km+0ncGQFrJgbquiDOud51mq3UU5sHJc+dkmDSQ51l5FTJkAOPeRZ\nrQvpeyr+TydEwT49tHSImJN9fD3h7A/n2VkQ4jpOeW0jr9E0aDOpCAKOLI4YoVRJ\nOwclSq02WEmBW4I7B45Ich+8jjPDWSYl7S2vQvb+46E/HR3fJ16s/Bc4AMHrs3Jt\n9+NzgtGkNB6X/lZlanE8G2d4XbIoXuO7av2f3z+PfrPSmk8uzX3VlTE1pNMZ3Jz/\nSlR++9u39XY/bBByOovQ\n=1/jr\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIPKqNLNQdzb1AdsZJfnj1EuExcO8iyGDm1jPhetzzqv1CP/wEBwzcMmP+lGf\nn8RKzt3W6nkI8QRb0ndw8AgfO1zPuupgswCD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wED+ZwTTkY8sUEFZLwCD6\n/zMI8BD3bZENRNe14yvgUlG9c7LICPEEW9J3cPAIkbbv9y0MKxcAg9/jDS75DI4p\nKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5jb23/8BBE3aYJ\npUc82iokJq3eb6UkCPEEW9J3cPAIZMVlHVoQd5oAg9/jDS75DI4uLWh0dHBzOi8v\nYWxpY2UuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ/AQlz5irQCk54U8\nzUIdYAbCRQjxBFvSd2/wCDNigfQNnxnYAIPf4w0u+QyOIyJodHRwczovL2J0Yy5j\nYWxlbmRhci5jYXRhbGxheHkuY29t\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 0b2c10616778f5fe1d724bb5ceb971088909afb9\nparent eb2cc84a31fb923b2b25b979682904cb81edec7e\nparent f9fc08c5f86fc3c1cfb922d347eec01b695c677a\nauthor MarcoFalke <falke.marco@gmail.com> 1540519786 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1540519790 -0400\n\nMerge #14579: [0.17] travis: Pin flake8 version to 3.5.0\n\nf9fc08c5f8 travis: Pin flake8 version to 3.5.0 (fanquake)\n\nPull request description:\n\n  Pin flake8 version to 3.5.0 to fix the linters.\n\nTree-SHA512: 4f06d0aacbdfbbc6d090790aeea5185f2a61259381e586f4015bc0f8c0d0c8fec6156343a9587b8605bc776b39c080bd6584e6e9b685eaba3d90a58c726ac469\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f13041f17b08d95365ae5f14f1be1962b965ff45",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f13041f17b08d95365ae5f14f1be1962b965ff45",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f13041f17b08d95365ae5f14f1be1962b965ff45/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eb2cc84a31fb923b2b25b979682904cb81edec7e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb2cc84a31fb923b2b25b979682904cb81edec7e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eb2cc84a31fb923b2b25b979682904cb81edec7e"
      },
      {
        "sha": "f9fc08c5f86fc3c1cfb922d347eec01b695c677a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9fc08c5f86fc3c1cfb922d347eec01b695c677a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f9fc08c5f86fc3c1cfb922d347eec01b695c677a"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d1772e43e57298b1f9f7e23e7408c0a85fa3684a",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f13041f17b08d95365ae5f14f1be1962b965ff45/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f13041f17b08d95365ae5f14f1be1962b965ff45/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=f13041f17b08d95365ae5f14f1be1962b965ff45",
        "patch": "@@ -148,7 +148,7 @@ jobs:\n       language: python\n       python: '3.6'\n       install:\n-        - travis_retry pip install flake8\n+        - travis_retry pip install flake8==3.5.0\n       before_script:\n         - git fetch --unshallow\n       script:"
      }
    ]
  },
  {
    "sha": "1476554d3b1db5352c0de1de7524864d4bce3aac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNDc2NTU0ZDNiMWRiNTM1MmMwZGUxZGU3NTI0ODY0ZDRiY2UzYWFj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-10-26T09:53:27Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-10-26T10:01:33Z"
      },
      "message": "Merge #14576: Release 0.17.0.1\n\ndc4923a71bf64bd48708c7e4bd33765cdae68fdf build: Bump version for 0.17.0.1 (Wladimir J. van der Laan)\n248e5ec348979c2d299b04adf93deaafd2b3b2b7 doc: Update release notes for 0.17.0.1 (Wladimir J. van der Laan)\n\nPull request description:\n\n  Update release notes and bump version\n\nTree-SHA512: b1c3f77150d89450735c2a82cb5d859b11e7463cc3370c46f847a6f7b22318114cf4d3254eb3f6b15dc7204bc43d052781f97d02ef5a76d102d5d42a762be964",
      "tree": {
        "sha": "ad1355529099682b8a509af7f18c594d2c2587e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ad1355529099682b8a509af7f18c594d2c2587e0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1476554d3b1db5352c0de1de7524864d4bce3aac",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlvS5f0ACgkQHkrtYphs\n0l0cEAf+JjReJGG9FkvyMfz9HbAdtv8kR4sSDZmn8o2c4Ve7flHbsbjklMGy0jPX\nrdKbDU+nhqplLdnLMwvPxFHVCWt5vUbxVFN2zKTqmbO1dr2WxwlrAMUXL0GMyVNs\nUdOaVBFgnnr1KlIHHmOZmthaqFpQy9sQEBXikcpusbgMeCTX82Vm4Y3rSnG1weHH\nqrwHXY+RdUJSoX9q1OhULQwEH3dIhAoiW2qbhNyTmGhBAI3/8WNF5a1cBJJzMigO\nV7K+Yzh2V4xhV0m1VKOFyjc6tIQGUBOEctZfV13DyCyeEL1bXPSi6SDQ7pJ9SZ+A\nmt7uV394nahyiwyMiMo4tzCndc2Mlg==\n=g81D\n-----END PGP SIGNATURE-----",
        "payload": "tree ad1355529099682b8a509af7f18c594d2c2587e0\nparent f13041f17b08d95365ae5f14f1be1962b965ff45\nparent dc4923a71bf64bd48708c7e4bd33765cdae68fdf\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1540547607 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1540548093 +0200\n\nMerge #14576: Release 0.17.0.1\n\ndc4923a71bf64bd48708c7e4bd33765cdae68fdf build: Bump version for 0.17.0.1 (Wladimir J. van der Laan)\n248e5ec348979c2d299b04adf93deaafd2b3b2b7 doc: Update release notes for 0.17.0.1 (Wladimir J. van der Laan)\n\nPull request description:\n\n  Update release notes and bump version\n\nTree-SHA512: b1c3f77150d89450735c2a82cb5d859b11e7463cc3370c46f847a6f7b22318114cf4d3254eb3f6b15dc7204bc43d052781f97d02ef5a76d102d5d42a762be964\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1476554d3b1db5352c0de1de7524864d4bce3aac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1476554d3b1db5352c0de1de7524864d4bce3aac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1476554d3b1db5352c0de1de7524864d4bce3aac/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f13041f17b08d95365ae5f14f1be1962b965ff45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f13041f17b08d95365ae5f14f1be1962b965ff45",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f13041f17b08d95365ae5f14f1be1962b965ff45"
      },
      {
        "sha": "dc4923a71bf64bd48708c7e4bd33765cdae68fdf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc4923a71bf64bd48708c7e4bd33765cdae68fdf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dc4923a71bf64bd48708c7e4bd33765cdae68fdf"
      }
    ],
    "stats": {
      "total": 81,
      "additions": 18,
      "deletions": 63
    },
    "files": [
      {
        "sha": "812e0a82696e172e6b5ec39f87529e3c04b8d1f2",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1476554d3b1db5352c0de1de7524864d4bce3aac/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1476554d3b1db5352c0de1de7524864d4bce3aac/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=1476554d3b1db5352c0de1de7524864d4bce3aac",
        "patch": "@@ -3,7 +3,7 @@ AC_PREREQ([2.60])\n define(_CLIENT_VERSION_MAJOR, 0)\n define(_CLIENT_VERSION_MINOR, 17)\n define(_CLIENT_VERSION_REVISION, 0)\n-define(_CLIENT_VERSION_BUILD, 0)\n+define(_CLIENT_VERSION_BUILD, 1)\n define(_CLIENT_VERSION_IS_RELEASE, true)\n define(_COPYRIGHT_YEAR, 2018)\n define(_COPYRIGHT_HOLDERS,[The %s developers])"
      },
      {
        "sha": "b8ca0300044c649cb6c06ea9c187eae03973915f",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 17,
        "deletions": 62,
        "changes": 79,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1476554d3b1db5352c0de1de7524864d4bce3aac/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1476554d3b1db5352c0de1de7524864d4bce3aac/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=1476554d3b1db5352c0de1de7524864d4bce3aac",
        "patch": "@@ -1,9 +1,6 @@\n-(note: this is a temporary file, to be added-to by anybody, and moved to\n-release-notes at release time)\n+Bitcoin Core version 0.17.0.1 is now available from:\n \n-Bitcoin Core version 0.17.x is now available from:\n-\n-  <https://bitcoincore.org/bin/bitcoin-core-0.17.x/>\n+  <https://bitcoincore.org/bin/bitcoin-core-0.17.0.1/>\n \n This is a new major version release, including new features, various bugfixes\n and performance improvements, as well as updated translations.\n@@ -16,72 +13,30 @@ To receive security and update notifications, please subscribe to:\n \n   <https://bitcoincore.org/en/list/announcements/join/>\n \n-How to Upgrade\n-==============\n-\n-If you are running an older version, shut it down. Wait until it has completely\n-shut down (which might take a few minutes for older versions), then run the\n-installer (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on Mac)\n-or `bitcoind`/`bitcoin-qt` (on Linux).\n-\n-If your node has a txindex, the txindex db will be migrated the first time you run 0.17.0 or newer, which may take up to a few hours. Your node will not be functional until this migration completes.\n-\n-The first time you run version 0.15.0 or newer, your chainstate database will be converted to a\n-new format, which will take anywhere from a few minutes to half an hour,\n-depending on the speed of your machine.\n-\n-Note that the block database format also changed in version 0.8.0 and there is no\n-automatic upgrade code from before version 0.8 to version 0.15.0. Upgrading\n-directly from 0.7.x and earlier without redownloading the blockchain is not supported.\n-However, as usual, old wallet versions are still supported.\n-\n-Downgrading warning\n--------------------\n-\n-The chainstate database for this release is not compatible with previous\n-releases, so if you run 0.15 and then decide to switch back to any\n-older version, you will need to run the old release with the `-reindex-chainstate`\n-option to rebuild the chainstate data structures in the old format.\n-\n-If your node has pruning enabled, this will entail re-downloading and\n-processing the entire blockchain.\n-\n-Compatibility\n-==============\n-\n-Bitcoin Core is extensively tested on multiple operating systems using\n-the Linux kernel, macOS 10.10+, and Windows 7 and newer (Windows XP is not supported).\n-\n-Bitcoin Core should also work on most other Unix-like systems but is not\n-frequently tested on them.\n-\n-From 0.17.0 onwards macOS <10.10 is no longer supported. 0.17.0 is built using Qt 5.9.x, which doesn't\n-support versions of macOS older than 10.10.\n-\n-Known issues\n-============\n-\n-...\n-\n Notable changes\n ===============\n \n-...\n+An issue was solved with OSX dmg generation, affecting macOS 10.12 to 10.14,\n+which could cause Finder to crash on install.\n \n-0.17.x change log\n-=================\n+There are no significant changes for other operating systems.\n \n-...\n+0.17.0.1 change log\n+===================\n+\n+### Build system\n+- #14416 `eb2cc84` Fix OSX dmg issue (10.12 to 10.14) (jonasschnelli)\n+\n+### Documentation\n+- #14509 `1b5af2c` [0.17] doc: use SegWit in getblocktemplate example (Sjors)\n \n Credits\n =======\n \n Thanks to everyone who directly contributed to this release:\n \n-...\n-\n-And to those that reported security issues:\n-\n-...\n+- Jonas Schnelli\n+- Pieter Wuille\n+- Sjors Provoost\n+- Wladimir J. van der Laan\n \n-As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/)."
      }
    ]
  },
  {
    "sha": "f046d846aecacd79a83d82903e0b71577529d75c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMDQ2ZDg0NmFlY2FjZDc5YTgzZDgyOTAzZTBiNzE1Nzc1MjlkNzVj",
    "commit": {
      "author": {
        "name": "David A. Harding",
        "email": "dave@dtrt.org",
        "date": "2018-10-27T16:20:43Z"
      },
      "committer": {
        "name": "David A. Harding",
        "email": "dave@dtrt.org",
        "date": "2018-10-27T16:20:43Z"
      },
      "message": "Docs/Release notes: 0.17.0.1 is a minor release",
      "tree": {
        "sha": "790eaaeedf4f8276dfa0df8171642800ff0257e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/790eaaeedf4f8276dfa0df8171642800ff0257e8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f046d846aecacd79a83d82903e0b71577529d75c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEgxUkqkMp0LnoXjCr2dtBqWwiadMFAlvUkHsACgkQ2dtBqWwi\nadPyxw//UWIzO7v0Wuaa8JxIjWT2hWrJlvW6iaG+4fMsUgwLyny3Z06LhOn3Bn0a\ny7xx14andtkCqg+PfyyX6ntgd/bcx/PikaegzpP9hktyFFyEwtAc3ZduZZwyOCaw\n1AFOspv/aP48HGyUn3eyDeefZL92QG9lY81rGky7QZx7QokXfx1ppImR+LIjZ/Ff\nXW5uWYNl2MdBBTr/VCd1TeEKykL3KVA1oDOBnj0nLTYecT0icKWo4lXkRjqF312U\nJHARnJ1SHO8ATRudE4prH+MzpxDgmzFHSlZbDdv/UipkP+eb8V1iAtrmx6HMCIQh\n8wrXnSu5LQdZ+NYVn4P5AbI3lcAQ5GljgrZxK6ZdmvUla6BB4M5bzXR9RUCYTZ4W\n3X1QbrbNLEoTcvx2zspM8+9NZ9KNw3ijvk0n9rPQhDD2yqCz/sEzu/0epjfbrlG6\nyyd2hQcydrFWYe62yEXk/qG5ZvnN4ZzvX48J3J3dN9zcPbGCP6EBmRqKAW7E96jm\nEdjk6TGXY3Ep5yohVEDTUr4rVVZp+ynxwCtLIr9uWVIcAUeC4QmOIFWFZfyvIWh7\nNxhceLlXKGBTcH+UGbJJdzRtZ5vjtDs429C5Epk/yPCO0+hV1BELOiSDrO6OhPQa\nvw+QilcalI89OYK7nK8UMPkjOvknQm0IepqUF8uvDczKPg/7pKY=\n=E9ZP\n-----END PGP SIGNATURE-----",
        "payload": "tree 790eaaeedf4f8276dfa0df8171642800ff0257e8\nparent 1476554d3b1db5352c0de1de7524864d4bce3aac\nauthor David A. Harding <dave@dtrt.org> 1540657243 -0400\ncommitter David A. Harding <dave@dtrt.org> 1540657243 -0400\n\nDocs/Release notes: 0.17.0.1 is a minor release\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f046d846aecacd79a83d82903e0b71577529d75c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f046d846aecacd79a83d82903e0b71577529d75c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f046d846aecacd79a83d82903e0b71577529d75c/comments",
    "author": {
      "login": "harding",
      "id": 61096,
      "node_id": "MDQ6VXNlcjYxMDk2",
      "avatar_url": "https://avatars.githubusercontent.com/u/61096?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/harding",
      "html_url": "https://github.com/harding",
      "followers_url": "https://api.github.com/users/harding/followers",
      "following_url": "https://api.github.com/users/harding/following{/other_user}",
      "gists_url": "https://api.github.com/users/harding/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/harding/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/harding/subscriptions",
      "organizations_url": "https://api.github.com/users/harding/orgs",
      "repos_url": "https://api.github.com/users/harding/repos",
      "events_url": "https://api.github.com/users/harding/events{/privacy}",
      "received_events_url": "https://api.github.com/users/harding/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "harding",
      "id": 61096,
      "node_id": "MDQ6VXNlcjYxMDk2",
      "avatar_url": "https://avatars.githubusercontent.com/u/61096?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/harding",
      "html_url": "https://github.com/harding",
      "followers_url": "https://api.github.com/users/harding/followers",
      "following_url": "https://api.github.com/users/harding/following{/other_user}",
      "gists_url": "https://api.github.com/users/harding/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/harding/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/harding/subscriptions",
      "organizations_url": "https://api.github.com/users/harding/orgs",
      "repos_url": "https://api.github.com/users/harding/repos",
      "events_url": "https://api.github.com/users/harding/events{/privacy}",
      "received_events_url": "https://api.github.com/users/harding/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1476554d3b1db5352c0de1de7524864d4bce3aac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1476554d3b1db5352c0de1de7524864d4bce3aac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1476554d3b1db5352c0de1de7524864d4bce3aac"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "92db7dac7d7e55ada749f50c2c5737b3ee50ff0e",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f046d846aecacd79a83d82903e0b71577529d75c/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f046d846aecacd79a83d82903e0b71577529d75c/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=f046d846aecacd79a83d82903e0b71577529d75c",
        "patch": "@@ -2,8 +2,7 @@ Bitcoin Core version 0.17.0.1 is now available from:\n \n   <https://bitcoincore.org/bin/bitcoin-core-0.17.0.1/>\n \n-This is a new major version release, including new features, various bugfixes\n-and performance improvements, as well as updated translations.\n+This release provides a minor bug fix for 0.17.0.\n \n Please report bugs using the issue tracker at GitHub:\n "
      }
    ]
  },
  {
    "sha": "76dd5257f9b5705734481569c39bf115d4cb973d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NmRkNTI1N2Y5YjU3MDU3MzQ0ODE1NjljMzliZjExNWQ0Y2I5NzNk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-28T10:43:52Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-28T10:44:08Z"
      },
      "message": "Merge #14566: 0.17: qa backports\n\n9461f98c53 Disable wallet and address book Qt tests on macOS minimal platform (Russell Yanofsky)\n703a24418c descriptors.md: Refer to descriptors as describing instead of matching (Russell Yanofsky)\n5f51fd6d59 doc/descriptors.md tweaks (Russell Yanofsky)\n29899ecd36 Import CInv from correct module (Chun Kuan Lee)\nf7adb32e38 qa: Run all tests even if wallet is not compiled (MarcoFalke)\n86fadee990 qa: Premine to deterministic address with -disablewallet (MarcoFalke)\n8bc1badada Test rpc_help.py failed: Check whether ZMQ is enabled or not. (Kvaciral)\n24d796a6cc test: Add tests for RPC help (Jo\u00e3o Barbosa)\n168efeaca6 qa: Use named args in some tests (MarcoFalke)\n73e538cf6a scripted-diff: Use named arguments in feature_block (MarcoFalke)\n96dc936862 scripted-diff: Pass node into p2p_segwit acceptance tests (MarcoFalke)\n7ff32a6b98 qa: Add some actual witness in rpc_rawtransaction (MarcoFalke)\nb72fbabe17 [qa] Use correct python index slices in example test (Suhas Daftuar)\n06544faff0 qa: Add TestNode::assert_debug_log (MarcoFalke)\n\nPull request description:\n\n  Just the test and doc changes from #14328 to prevent that one from piling up.\n\nTree-SHA512: 51c1e66d346cbf51bc67b2f365448620dd9992ba4ef70592c5eb489cd50a047dab8179c86db2cafe161d8b2aa04498cc760fb5deb7eef49b39272911c74227a9",
      "tree": {
        "sha": "f39e9f1b9df4435483cc25684a28fba7b98c8016",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f39e9f1b9df4435483cc25684a28fba7b98c8016"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/76dd5257f9b5705734481569c39bf115d4cb973d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJb1ZL5AAoJENLqSFDnUoslIg4P/Al07kNyb0qaMxWKlyZDLlMv\nX1GigELKnxD7v7givRFptQI2F/BUJELIdUZcPX9x2u8wqO6WqxKCLezXJxLWJ239\nvRcBfg2L3ZMj0MzLSFj+Fgs9qokPxyNjGvDLpOyMuY9lAKaW5TbocNrZuqw+CTKY\n00iZAfjKC6W/wZ/MNGW5c81/m4/cToHq+R6F8FIqC8JHxtpow2L+K9Ot7LnPhcpk\nTPySvhl9o6MY6au+LKCDfTRRmDzaxDItRe/MxU2LNrmHPMEQQrGpGfvyym/jdthX\niOgwAlC8+6drSA0DWQtHUMnXiV6nUlobVS7VReMk6HDiYfXxiD3OhXRd8UGGc+Rg\nl8JQhHI2l+imnS9Nm5zWtbxrFLLdLJ+CGOKBoS5h5WUYGzix0gEUxJZaQcis7MBz\nVLiPv2IJiduPxnyI2nWKwSE1jvAwTFcLt9xUloPt+yNfEmZFUxMtiozIj7cuv86Z\n8EfEUVRFofuOQqdieDKNsbYtToTAPWCDATUut+GdddWrBjCLEhUIfbVqC4dnYU59\n8RPPPHabvFlmmvEvVU/OosZg2XIld8ncTqaiBpO7EhK4m6aOSVRF11lB+F/3aOgj\nJqhJIx7Q4K3iRwQvEDz1go3Q+VBGbS9/jVG47jmWFCmReHonMrfAzU4Gy7jlbVoq\nO9PKOzO8fCeZkjKwJxQz\n=6Wlp\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIIqRjAVS4pH+W8Pw+EEk7LnEll4pry8ntDucD7bP7itlCP/wECQCBhxAWFpq\n5e+7h69k5gwI8QRb1ZL88AgPEDIcDrH7tACD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wELPgj4kRQhp/Vw1vgV9hFasI8QRb1ZL7\n8AiJhnLl6jSpgQCD3+MNLvkMjiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVuZGFyLm9w\nZW50aW1lc3RhbXBzLm9yZ//wENUDoVVwttcwAaXsagmfAqcI8QRb1ZL78AhVrKiE\nnp7BdACD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIub3BlbnRp\nbWVzdGFtcHMub3Jn8BD6Ufa4R0VP3APm6PpfA1UkCPAQ7Je8x4PyKrAQNDwaMdOv\nCAjxBFvVkvzwCDn+WDAnC8DCAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxl\nbmRhci5ldGVybml0eXdhbGwuY29t\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree f39e9f1b9df4435483cc25684a28fba7b98c8016\nparent 1476554d3b1db5352c0de1de7524864d4bce3aac\nparent 9461f98c534ab64ae404085ffb309ec276e3c902\nauthor MarcoFalke <falke.marco@gmail.com> 1540723432 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1540723448 -0400\n\nMerge #14566: 0.17: qa backports\n\n9461f98c53 Disable wallet and address book Qt tests on macOS minimal platform (Russell Yanofsky)\n703a24418c descriptors.md: Refer to descriptors as describing instead of matching (Russell Yanofsky)\n5f51fd6d59 doc/descriptors.md tweaks (Russell Yanofsky)\n29899ecd36 Import CInv from correct module (Chun Kuan Lee)\nf7adb32e38 qa: Run all tests even if wallet is not compiled (MarcoFalke)\n86fadee990 qa: Premine to deterministic address with -disablewallet (MarcoFalke)\n8bc1badada Test rpc_help.py failed: Check whether ZMQ is enabled or not. (Kvaciral)\n24d796a6cc test: Add tests for RPC help (Jo\u00e3o Barbosa)\n168efeaca6 qa: Use named args in some tests (MarcoFalke)\n73e538cf6a scripted-diff: Use named arguments in feature_block (MarcoFalke)\n96dc936862 scripted-diff: Pass node into p2p_segwit acceptance tests (MarcoFalke)\n7ff32a6b98 qa: Add some actual witness in rpc_rawtransaction (MarcoFalke)\nb72fbabe17 [qa] Use correct python index slices in example test (Suhas Daftuar)\n06544faff0 qa: Add TestNode::assert_debug_log (MarcoFalke)\n\nPull request description:\n\n  Just the test and doc changes from #14328 to prevent that one from piling up.\n\nTree-SHA512: 51c1e66d346cbf51bc67b2f365448620dd9992ba4ef70592c5eb489cd50a047dab8179c86db2cafe161d8b2aa04498cc760fb5deb7eef49b39272911c74227a9\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76dd5257f9b5705734481569c39bf115d4cb973d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/76dd5257f9b5705734481569c39bf115d4cb973d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76dd5257f9b5705734481569c39bf115d4cb973d/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1476554d3b1db5352c0de1de7524864d4bce3aac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1476554d3b1db5352c0de1de7524864d4bce3aac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1476554d3b1db5352c0de1de7524864d4bce3aac"
      },
      {
        "sha": "9461f98c534ab64ae404085ffb309ec276e3c902",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9461f98c534ab64ae404085ffb309ec276e3c902",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9461f98c534ab64ae404085ffb309ec276e3c902"
      }
    ],
    "stats": {
      "total": 1077,
      "additions": 773,
      "deletions": 304
    },
    "files": [
      {
        "sha": "47e15e0502d1fbd5788b8c9c32ab54601abff2e4",
        "filename": "doc/descriptors.md",
        "status": "modified",
        "additions": 25,
        "deletions": 16,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/doc/descriptors.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/doc/descriptors.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/descriptors.md?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -22,19 +22,19 @@ Output descriptors currently support:\n \n ## Examples\n \n-- `pk(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)` represents a P2PK output.\n-- `pkh(02c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5)` represents a P2PKH output.\n-- `wpkh(02f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9)` represents a P2WPKH output.\n-- `sh(wpkh(03fff97bd5755eeea420453a14355235d382f6472f8568a18b2f057a1460297556))` represents a P2SH-P2WPKH output.\n-- `combo(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)` represents a P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH output.\n-- `sh(wsh(pkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13)))` represents a (overly complicated) P2SH-P2WSH-P2PKH output.\n-- `multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc)` represents a bare *1-of-2* multisig.\n-- `sh(multi(2,022f01e5e15cca351daff3843fb70f3c2f0a1bdd05e5af888a67784ef3e10a2a01,03acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe))` represents a P2SH *2-of-2* multisig.\n-- `wsh(multi(2,03a0434d9e47f3c86235477c7b1ae6ae5d3442d49b1943c2b752a68e2a47e247c7,03774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb,03d01115d548e7561b15c38f004d734633687cf4419620095bc5b0f47070afe85a))` represents a P2WSH *2-of-3* multisig.\n-- `sh(wsh(multi(1,03f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8,03499fdf9e895e719cfd64e67f07d38e3226aa7b63678949e6e49b241a60e823e4,02d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e)))` represents a P2SH-P2WSH *1-of-3* multisig.\n-- `pk(xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8)` refers to a single P2PK output, using the public key part from the specified xpub.\n-- `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1'/2)` refers to a single P2PKH output, using child key *1'/2* of the specified xpub.\n-- `wsh(multi(1,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/1/0/*,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/0/*))` refers to a chain of *1-of-2* P2WSH multisig outputs, using public keys taken from two HD chains with corresponding derivation paths.\n+- `pk(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)` describes a P2PK output with the specified public key.\n+- `pkh(02c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5)` describes a P2PKH output with the specified public key.\n+- `wpkh(02f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9)` describes a P2WPKH output with the specified public key.\n+- `sh(wpkh(03fff97bd5755eeea420453a14355235d382f6472f8568a18b2f057a1460297556))` describes a P2SH-P2WPKH output with the specified public key.\n+- `combo(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)` describes any P2PK, P2PKH, P2WPKH, or P2SH-P2WPKH output with the specified public key.\n+- `sh(wsh(pkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13)))` describes an (overly complicated) P2SH-P2WSH-P2PKH output with the specified public key.\n+- `multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc)` describes a bare *1-of-2* multisig output with keys in the specified order.\n+- `sh(multi(2,022f01e5e15cca351daff3843fb70f3c2f0a1bdd05e5af888a67784ef3e10a2a01,03acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe))` describes a P2SH *2-of-2* multisig output with keys in the specified order.\n+- `wsh(multi(2,03a0434d9e47f3c86235477c7b1ae6ae5d3442d49b1943c2b752a68e2a47e247c7,03774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb,03d01115d548e7561b15c38f004d734633687cf4419620095bc5b0f47070afe85a))` describes a P2WSH *2-of-3* multisig output with keys in the specified order.\n+- `sh(wsh(multi(1,03f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8,03499fdf9e895e719cfd64e67f07d38e3226aa7b63678949e6e49b241a60e823e4,02d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e)))` describes a P2SH-P2WSH *1-of-3* multisig output with keys in the specified order.\n+- `pk(xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8)` describes a P2PK output with the public key of the specified xpub.\n+- `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1'/2)` describes a P2PKH output with child key *1'/2* of the specified xpub.\n+- `wsh(multi(1,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/1/0/*,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/0/0/*))` describes a set of *1-of-2* P2WSH multisig outputs where the first multisig key is the *1/0/`i`* child of the first specified xpub and the second multisig key is the *0/0/`i`* child of the second specified xpub, and `i` is any number in a configurable range (`0-1000` by default).\n \n ## Reference\n \n@@ -91,6 +91,15 @@ on Bitcoin's OP_CHECKMULTISIG opcode. To support these, we introduce the\n multisig policy, where any *k* out of the *n* provided public keys must\n sign.\n \n+Key order is significant. A `multi()` expression describes a multisig script\n+with keys in the specified order, and in a search for TXOs, it will not match\n+outputs with multisig scriptPubKeys that have the same keys in a different\n+order. Also, to prevent a combinatorial explosion of the search space, if more\n+than one of the `multi()` key arguments is a BIP32 wildcard path ending in `/*`\n+or `*'`, the `multi()` expression only matches multisig scripts with the `i`th\n+child key from each wildcard path in lockstep, rather than scripts with any\n+combination of child keys from each wildcard path.\n+\n ### BIP32 derived keys and chains\n \n Most modern wallet software and hardware uses keys that are derived using\n@@ -101,7 +110,7 @@ path consists of a sequence of 0 or more integers (in the range\n *0..2<sup>31</sup>-1*) each optionally followed by `'` or `h`, and\n separated by `/` characters. The string may optionally end with the\n literal `/*` or `/*'` (or `/*h`) to refer to all unhardened or hardened\n-child keys instead.\n+child keys in a configurable range (by default `0-1000`, inclusive).\n \n Whenever a public key is described using a hardened derivation step, the\n script cannot be computed without access to the corresponding private\n@@ -119,6 +128,6 @@ steps, or for dumping wallet descriptors including private key material.\n \n In order to easily represent the sets of scripts currently supported by\n existing Bitcoin Core wallets, a convenience function `combo` is\n-provided, which takes as input a public key, and constructs the P2PK,\n+provided, which takes as input a public key, and describes a set of P2PK,\n P2PKH, P2WPKH, and P2SH-P2WPH scripts for that key. In case the key is\n-uncompressed, it only constructs P2PK and P2PKH.\n+uncompressed, the set only includes P2PK and P2PKH scripts.\n\\ No newline at end of file"
      },
      {
        "sha": "35258460441f428803d52f795017694baf95800f",
        "filename": "src/qt/test/addressbooktests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/src/qt/test/addressbooktests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/src/qt/test/addressbooktests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/addressbooktests.cpp?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -17,6 +17,7 @@\n #include <key_io.h>\n #include <wallet/wallet.h>\n \n+#include <QApplication>\n #include <QTimer>\n #include <QMessageBox>\n \n@@ -139,5 +140,16 @@ void TestAddAddressesToSendBook()\n \n void AddressBookTests::addressBookTests()\n {\n+#ifdef Q_OS_MAC\n+    if (QApplication::platformName() == \"minimal\") {\n+        // Disable for mac on \"minimal\" platform to avoid crashes inside the Qt\n+        // framework when it tries to look up unimplemented cocoa functions,\n+        // and fails to handle returned nulls\n+        // (https://bugreports.qt.io/browse/QTBUG-49686).\n+        QWARN(\"Skipping AddressBookTests on mac build with 'minimal' platform set due to Qt bugs. To run AppTests, invoke \"\n+              \"with 'test_bitcoin-qt -platform cocoa' on mac, or else use a linux or windows build.\");\n+        return;\n+    }\n+#endif\n     TestAddAddressesToSendBook();\n }"
      },
      {
        "sha": "9598d64845c30f0e505b257a1310961d0afb8a1c",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -243,5 +243,16 @@ void TestGUI()\n \n void WalletTests::walletTests()\n {\n+#ifdef Q_OS_MAC\n+    if (QApplication::platformName() == \"minimal\") {\n+        // Disable for mac on \"minimal\" platform to avoid crashes inside the Qt\n+        // framework when it tries to look up unimplemented cocoa functions,\n+        // and fails to handle returned nulls\n+        // (https://bugreports.qt.io/browse/QTBUG-49686).\n+        QWARN(\"Skipping WalletTests on mac build with 'minimal' platform set due to Qt bugs. To run AppTests, invoke \"\n+              \"with 'test_bitcoin-qt -platform cocoa' on mac, or else use a linux or windows build.\");\n+        return;\n+    }\n+#endif\n     TestGUI();\n }"
      },
      {
        "sha": "8d954b70f6cf7f36b19d0ce8c8c28a39f66eda63",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -15,8 +15,8 @@\n \n # Avoid wildcard * imports if possible\n from test_framework.blocktools import (create_block, create_coinbase)\n+from test_framework.messages import CInv\n from test_framework.mininode import (\n-    CInv,\n     P2PInterface,\n     mininode_lock,\n     msg_block,\n@@ -67,10 +67,11 @@ def custom_function():\n     # self.log.info(\"running custom_function\")  # Oops! Can't run self.log outside the BitcoinTestFramework\n     pass\n \n+\n class ExampleTest(BitcoinTestFramework):\n     # Each functional test is a subclass of the BitcoinTestFramework class.\n \n-    # Override the set_test_params(), add_options(), setup_chain(), setup_network()\n+    # Override the set_test_params(), skip_test_if_missing_module(), add_options(), setup_chain(), setup_network()\n     # and setup_nodes() methods to customize the test setup as required.\n \n     def set_test_params(self):\n@@ -84,6 +85,9 @@ def set_test_params(self):\n \n         # self.log.info(\"I've finished set_test_params\")  # Oops! Can't run self.log before run_test()\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     # Use add_options() to add specific command-line options for your test.\n     # In practice this is not used very much, since the tests are mostly written\n     # to be run in automated environments without command-line options.\n@@ -111,7 +115,7 @@ def setup_network(self):\n         # sync_all() should not include node2, since we're not expecting it to\n         # sync.\n         connect_nodes(self.nodes[0], 1)\n-        self.sync_all([self.nodes[0:1]])\n+        self.sync_all([self.nodes[0:2]])\n \n     # Use setup_nodes() to customize the node start behaviour (for example if\n     # you don't want to start all nodes at the start of the test).\n@@ -135,7 +139,7 @@ def run_test(self):\n \n         # Generating a block on one of the nodes will get us out of IBD\n         blocks = [int(self.nodes[0].generate(nblocks=1)[0], 16)]\n-        self.sync_all([self.nodes[0:1]])\n+        self.sync_all([self.nodes[0:2]])\n \n         # Notice above how we called an RPC by calling a method with the same\n         # name on the node object. Notice also how we used a keyword argument"
      },
      {
        "sha": "8466f851caed1b496994ccd3027732d46c90092c",
        "filename": "test/functional/feature_bip68_sequence.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_bip68_sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_bip68_sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bip68_sequence.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -25,6 +25,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[], [\"-acceptnonstdtxn=0\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.relayfee = self.nodes[0].getnetworkinfo()[\"relayfee\"]\n "
      },
      {
        "sha": "a1ded5200c3ab2e49194b24245565fe1034da2f4",
        "filename": "test/functional/feature_block.py",
        "status": "modified",
        "additions": 41,
        "deletions": 38,
        "changes": 79,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_block.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -75,6 +75,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.extra_args = [[]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         node = self.nodes[0]  # convenience reference to the node\n \n@@ -169,7 +172,7 @@ def run_test(self):\n         self.log.info(\"Reject a block where the miner creates too much coinbase reward\")\n         self.move_tip(6)\n         b9 = self.next_block(9, spend=out[4], additional_coinbase_value=1)\n-        self.sync_blocks([b9], False, 16, b'bad-cb-amount', reconnect=True)\n+        self.sync_blocks([b9], success=False, reject_code=16, reject_reason=b'bad-cb-amount', reconnect=True)\n \n         # Create a fork that ends in a block with too much fee (the one that causes the reorg)\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n@@ -181,7 +184,7 @@ def run_test(self):\n         self.sync_blocks([b10], False)\n \n         b11 = self.next_block(11, spend=out[4], additional_coinbase_value=1)\n-        self.sync_blocks([b11], False, 16, b'bad-cb-amount', reconnect=True)\n+        self.sync_blocks([b11], success=False, reject_code=16, reject_reason=b'bad-cb-amount', reconnect=True)\n \n         # Try again, but with a valid fork first\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n@@ -194,7 +197,7 @@ def run_test(self):\n         b13 = self.next_block(13, spend=out[4])\n         self.save_spendable_output()\n         b14 = self.next_block(14, spend=out[5], additional_coinbase_value=1)\n-        self.sync_blocks([b12, b13, b14], False, 16, b'bad-cb-amount', reconnect=True)\n+        self.sync_blocks([b12, b13, b14], success=False, reject_code=16, reject_reason=b'bad-cb-amount', reconnect=True)\n \n         # New tip should be b13.\n         assert_equal(node.getbestblockhash(), b13.hash)\n@@ -213,7 +216,7 @@ def run_test(self):\n         self.log.info(\"Reject a block with too many checksigs\")\n         too_many_checksigs = CScript([OP_CHECKSIG] * (MAX_BLOCK_SIGOPS))\n         b16 = self.next_block(16, spend=out[6], script=too_many_checksigs)\n-        self.sync_blocks([b16], False, 16, b'bad-blk-sigops', reconnect=True)\n+        self.sync_blocks([b16], success=False, reject_code=16, reject_reason=b'bad-blk-sigops', reconnect=True)\n \n         # Attempt to spend a transaction created on a different fork\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n@@ -222,7 +225,7 @@ def run_test(self):\n         self.log.info(\"Reject a block with a spend from a re-org'ed out tx\")\n         self.move_tip(15)\n         b17 = self.next_block(17, spend=txout_b3)\n-        self.sync_blocks([b17], False, 16, b'bad-txns-inputs-missingorspent', reconnect=True)\n+        self.sync_blocks([b17], success=False, reject_code=16, reject_reason=b'bad-txns-inputs-missingorspent', reconnect=True)\n \n         # Attempt to spend a transaction created on a different fork (on a fork this time)\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n@@ -235,7 +238,7 @@ def run_test(self):\n         self.sync_blocks([b18], False)\n \n         b19 = self.next_block(19, spend=out[6])\n-        self.sync_blocks([b19], False, 16, b'bad-txns-inputs-missingorspent', reconnect=True)\n+        self.sync_blocks([b19], success=False, reject_code=16, reject_reason=b'bad-txns-inputs-missingorspent', reconnect=True)\n \n         # Attempt to spend a coinbase at depth too low\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n@@ -244,7 +247,7 @@ def run_test(self):\n         self.log.info(\"Reject a block spending an immature coinbase.\")\n         self.move_tip(15)\n         b20 = self.next_block(20, spend=out[7])\n-        self.sync_blocks([b20], False, 16, b'bad-txns-premature-spend-of-coinbase')\n+        self.sync_blocks([b20], success=False, reject_code=16, reject_reason=b'bad-txns-premature-spend-of-coinbase')\n \n         # Attempt to spend a coinbase at depth too low (on a fork this time)\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n@@ -257,7 +260,7 @@ def run_test(self):\n         self.sync_blocks([b21], False)\n \n         b22 = self.next_block(22, spend=out[5])\n-        self.sync_blocks([b22], False, 16, b'bad-txns-premature-spend-of-coinbase')\n+        self.sync_blocks([b22], success=False, reject_code=16, reject_reason=b'bad-txns-premature-spend-of-coinbase')\n \n         # Create a block on either side of MAX_BLOCK_BASE_SIZE and make sure its accepted/rejected\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n@@ -286,7 +289,7 @@ def run_test(self):\n         tx.vout = [CTxOut(0, script_output)]\n         b24 = self.update_block(24, [tx])\n         assert_equal(len(b24.serialize()), MAX_BLOCK_BASE_SIZE + 1)\n-        self.sync_blocks([b24], False, 16, b'bad-blk-length', reconnect=True)\n+        self.sync_blocks([b24], success=False, reject_code=16, reject_reason=b'bad-blk-length', reconnect=True)\n \n         b25 = self.next_block(25, spend=out[7])\n         self.sync_blocks([b25], False)\n@@ -304,7 +307,7 @@ def run_test(self):\n         # update_block causes the merkle root to get updated, even with no new\n         # transactions, and updates the required state.\n         b26 = self.update_block(26, [])\n-        self.sync_blocks([b26], False, 16, b'bad-cb-length', reconnect=True)\n+        self.sync_blocks([b26], success=False, reject_code=16, reject_reason=b'bad-cb-length', reconnect=True)\n \n         # Extend the b26 chain to make sure bitcoind isn't accepting b26\n         b27 = self.next_block(27, spend=out[7])\n@@ -316,7 +319,7 @@ def run_test(self):\n         b28.vtx[0].vin[0].scriptSig = b'\\x00' * 101\n         b28.vtx[0].rehash()\n         b28 = self.update_block(28, [])\n-        self.sync_blocks([b28], False, 16, b'bad-cb-length', reconnect=True)\n+        self.sync_blocks([b28], success=False, reject_code=16, reject_reason=b'bad-cb-length', reconnect=True)\n \n         # Extend the b28 chain to make sure bitcoind isn't accepting b28\n         b29 = self.next_block(29, spend=out[7])\n@@ -352,7 +355,7 @@ def run_test(self):\n         too_many_multisigs = CScript([OP_CHECKMULTISIG] * (MAX_BLOCK_SIGOPS // 20))\n         b32 = self.next_block(32, spend=out[9], script=too_many_multisigs)\n         assert_equal(get_legacy_sigopcount_block(b32), MAX_BLOCK_SIGOPS + 1)\n-        self.sync_blocks([b32], False, 16, b'bad-blk-sigops', reconnect=True)\n+        self.sync_blocks([b32], success=False, reject_code=16, reject_reason=b'bad-blk-sigops', reconnect=True)\n \n         # CHECKMULTISIGVERIFY\n         self.log.info(\"Accept a block with the max number of OP_CHECKMULTISIGVERIFY sigops\")\n@@ -365,7 +368,7 @@ def run_test(self):\n         self.log.info(\"Reject a block with too many OP_CHECKMULTISIGVERIFY sigops\")\n         too_many_multisigs = CScript([OP_CHECKMULTISIGVERIFY] * (MAX_BLOCK_SIGOPS // 20))\n         b34 = self.next_block(34, spend=out[10], script=too_many_multisigs)\n-        self.sync_blocks([b34], False, 16, b'bad-blk-sigops', reconnect=True)\n+        self.sync_blocks([b34], success=False, reject_code=16, reject_reason=b'bad-blk-sigops', reconnect=True)\n \n         # CHECKSIGVERIFY\n         self.log.info(\"Accept a block with the max number of OP_CHECKSIGVERIFY sigops\")\n@@ -378,7 +381,7 @@ def run_test(self):\n         self.log.info(\"Reject a block with too many OP_CHECKSIGVERIFY sigops\")\n         too_many_checksigs = CScript([OP_CHECKSIGVERIFY] * (MAX_BLOCK_SIGOPS))\n         b36 = self.next_block(36, spend=out[11], script=too_many_checksigs)\n-        self.sync_blocks([b36], False, 16, b'bad-blk-sigops', reconnect=True)\n+        self.sync_blocks([b36], success=False, reject_code=16, reject_reason=b'bad-blk-sigops', reconnect=True)\n \n         # Check spending of a transaction in a block which failed to connect\n         #\n@@ -395,12 +398,12 @@ def run_test(self):\n         txout_b37 = b37.vtx[1]\n         tx = self.create_and_sign_transaction(out[11], 0)\n         b37 = self.update_block(37, [tx])\n-        self.sync_blocks([b37], False, 16, b'bad-txns-inputs-missingorspent', reconnect=True)\n+        self.sync_blocks([b37], success=False, reject_code=16, reject_reason=b'bad-txns-inputs-missingorspent', reconnect=True)\n \n         # attempt to spend b37's first non-coinbase tx, at which point b37 was still considered valid\n         self.move_tip(35)\n         b38 = self.next_block(38, spend=txout_b37)\n-        self.sync_blocks([b38], False, 16, b'bad-txns-inputs-missingorspent', reconnect=True)\n+        self.sync_blocks([b38], success=False, reject_code=16, reject_reason=b'bad-txns-inputs-missingorspent', reconnect=True)\n \n         # Check P2SH SigOp counting\n         #\n@@ -492,7 +495,7 @@ def run_test(self):\n         tx.rehash()\n         new_txs.append(tx)\n         self.update_block(40, new_txs)\n-        self.sync_blocks([b40], False, 16, b'bad-blk-sigops', reconnect=True)\n+        self.sync_blocks([b40], success=False, reject_code=16, reject_reason=b'bad-blk-sigops', reconnect=True)\n \n         # same as b40, but one less sigop\n         self.log.info(\"Accept a block with the max number of P2SH sigops\")\n@@ -555,7 +558,7 @@ def run_test(self):\n         self.block_heights[b45.sha256] = self.block_heights[self.tip.sha256] + 1\n         self.tip = b45\n         self.blocks[45] = b45\n-        self.sync_blocks([b45], False, 16, b'bad-cb-missing', reconnect=True)\n+        self.sync_blocks([b45], success=False, reject_code=16, reject_reason=b'bad-cb-missing', reconnect=True)\n \n         self.log.info(\"Reject a block with no transactions\")\n         self.move_tip(44)\n@@ -570,7 +573,7 @@ def run_test(self):\n         self.tip = b46\n         assert 46 not in self.blocks\n         self.blocks[46] = b46\n-        self.sync_blocks([b46], False, 16, b'bad-blk-length', reconnect=True)\n+        self.sync_blocks([b46], success=False, reject_code=16, reject_reason=b'bad-blk-length', reconnect=True)\n \n         self.log.info(\"Reject a block with invalid work\")\n         self.move_tip(44)\n@@ -593,7 +596,7 @@ def run_test(self):\n         b49 = self.next_block(49)\n         b49.hashMerkleRoot += 1\n         b49.solve()\n-        self.sync_blocks([b49], False, 16, b'bad-txnmrklroot', reconnect=True)\n+        self.sync_blocks([b49], success=False, reject_code=16, reject_reason=b'bad-txnmrklroot', reconnect=True)\n \n         self.log.info(\"Reject a block with incorrect POW limit\")\n         self.move_tip(44)\n@@ -607,15 +610,15 @@ def run_test(self):\n         b51 = self.next_block(51)\n         cb2 = create_coinbase(51, self.coinbase_pubkey)\n         b51 = self.update_block(51, [cb2])\n-        self.sync_blocks([b51], False, 16, b'bad-cb-multiple', reconnect=True)\n+        self.sync_blocks([b51], success=False, reject_code=16, reject_reason=b'bad-cb-multiple', reconnect=True)\n \n         self.log.info(\"Reject a block with duplicate transactions\")\n         # Note: txns have to be in the right position in the merkle tree to trigger this error\n         self.move_tip(44)\n         b52 = self.next_block(52, spend=out[15])\n         tx = self.create_tx(b52.vtx[1], 0, 1)\n         b52 = self.update_block(52, [tx, tx])\n-        self.sync_blocks([b52], False, 16, b'bad-txns-duplicate', reconnect=True)\n+        self.sync_blocks([b52], success=False, reject_code=16, reject_reason=b'bad-txns-duplicate', reconnect=True)\n \n         # Test block timestamps\n         #  -> b31 (8) -> b33 (9) -> b35 (10) -> b39 (11) -> b42 (12) -> b43 (13) -> b53 (14) -> b55 (15)\n@@ -682,7 +685,7 @@ def run_test(self):\n         assert_equal(len(b56.vtx), 3)\n         b56 = self.update_block(56, [tx1])\n         assert_equal(b56.hash, b57.hash)\n-        self.sync_blocks([b56], False, 16, b'bad-txns-duplicate', reconnect=True)\n+        self.sync_blocks([b56], success=False, reject_code=16, reject_reason=b'bad-txns-duplicate', reconnect=True)\n \n         # b57p2 - a good block with 6 tx'es, don't submit until end\n         self.move_tip(55)\n@@ -702,7 +705,7 @@ def run_test(self):\n         assert_equal(b56p2.hash, b57p2.hash)\n         assert_equal(len(b56p2.vtx), 6)\n         b56p2 = self.update_block(\"b56p2\", [tx3, tx4])\n-        self.sync_blocks([b56p2], False, 16, b'bad-txns-duplicate', reconnect=True)\n+        self.sync_blocks([b56p2], success=False, reject_code=16, reject_reason=b'bad-txns-duplicate', reconnect=True)\n \n         self.move_tip(\"57p2\")\n         self.sync_blocks([b57p2], True)\n@@ -727,15 +730,15 @@ def run_test(self):\n         tx.vout.append(CTxOut(0, b\"\"))\n         tx.calc_sha256()\n         b58 = self.update_block(58, [tx])\n-        self.sync_blocks([b58], False, 16, b'bad-txns-inputs-missingorspent', reconnect=True)\n+        self.sync_blocks([b58], success=False, reject_code=16, reject_reason=b'bad-txns-inputs-missingorspent', reconnect=True)\n \n         # tx with output value > input value\n         self.log.info(\"Reject a block with a transaction with outputs > inputs\")\n         self.move_tip(57)\n         b59 = self.next_block(59)\n         tx = self.create_and_sign_transaction(out[17], 51 * COIN)\n         b59 = self.update_block(59, [tx])\n-        self.sync_blocks([b59], False, 16, b'bad-txns-in-belowout', reconnect=True)\n+        self.sync_blocks([b59], success=False, reject_code=16, reject_reason=b'bad-txns-in-belowout', reconnect=True)\n \n         # reset to good chain\n         self.move_tip(57)\n@@ -759,7 +762,7 @@ def run_test(self):\n         b61.vtx[0].rehash()\n         b61 = self.update_block(61, [])\n         assert_equal(b60.vtx[0].serialize(), b61.vtx[0].serialize())\n-        self.sync_blocks([b61], False, 16, b'bad-txns-BIP30', reconnect=True)\n+        self.sync_blocks([b61], success=False, reject_code=16, reject_reason=b'bad-txns-BIP30', reconnect=True)\n \n         # Test tx.isFinal is properly rejected (not an exhaustive tx.isFinal test, that should be in data-driven transaction tests)\n         #\n@@ -776,7 +779,7 @@ def run_test(self):\n         assert(tx.vin[0].nSequence < 0xffffffff)\n         tx.calc_sha256()\n         b62 = self.update_block(62, [tx])\n-        self.sync_blocks([b62], False, 16, b'bad-txns-nonfinal')\n+        self.sync_blocks([b62], success=False, reject_code=16, reject_reason=b'bad-txns-nonfinal')\n \n         # Test a non-final coinbase is also rejected\n         #\n@@ -790,7 +793,7 @@ def run_test(self):\n         b63.vtx[0].vin[0].nSequence = 0xDEADBEEF\n         b63.vtx[0].rehash()\n         b63 = self.update_block(63, [])\n-        self.sync_blocks([b63], False, 16, b'bad-txns-nonfinal')\n+        self.sync_blocks([b63], success=False, reject_code=16, reject_reason=b'bad-txns-nonfinal')\n \n         #  This checks that a block with a bloated VARINT between the block_header and the array of tx such that\n         #  the block is > MAX_BLOCK_BASE_SIZE with the bloated varint, but <= MAX_BLOCK_BASE_SIZE without the bloated varint,\n@@ -824,7 +827,7 @@ def run_test(self):\n         tx.vin.append(CTxIn(COutPoint(b64a.vtx[1].sha256, 0)))\n         b64a = self.update_block(\"64a\", [tx])\n         assert_equal(len(b64a.serialize()), MAX_BLOCK_BASE_SIZE + 8)\n-        self.sync_blocks([b64a], False, 1, b'error parsing message')\n+        self.sync_blocks([b64a], success=False, reject_code=1, reject_reason=b'error parsing message')\n \n         # bitcoind doesn't disconnect us for sending a bloated block, but if we subsequently\n         # resend the header message, it won't send us the getdata message again. Just\n@@ -866,7 +869,7 @@ def run_test(self):\n         tx1 = self.create_and_sign_transaction(out[20], out[20].vout[0].nValue)\n         tx2 = self.create_and_sign_transaction(tx1, 1)\n         b66 = self.update_block(66, [tx2, tx1])\n-        self.sync_blocks([b66], False, 16, b'bad-txns-inputs-missingorspent', reconnect=True)\n+        self.sync_blocks([b66], success=False, reject_code=16, reject_reason=b'bad-txns-inputs-missingorspent', reconnect=True)\n \n         # Attempt to double-spend a transaction created in a block\n         #\n@@ -881,7 +884,7 @@ def run_test(self):\n         tx2 = self.create_and_sign_transaction(tx1, 1)\n         tx3 = self.create_and_sign_transaction(tx1, 2)\n         b67 = self.update_block(67, [tx1, tx2, tx3])\n-        self.sync_blocks([b67], False, 16, b'bad-txns-inputs-missingorspent', reconnect=True)\n+        self.sync_blocks([b67], success=False, reject_code=16, reject_reason=b'bad-txns-inputs-missingorspent', reconnect=True)\n \n         # More tests of block subsidy\n         #\n@@ -900,7 +903,7 @@ def run_test(self):\n         b68 = self.next_block(68, additional_coinbase_value=10)\n         tx = self.create_and_sign_transaction(out[20], out[20].vout[0].nValue - 9)\n         b68 = self.update_block(68, [tx])\n-        self.sync_blocks([b68], False, 16, b'bad-cb-amount', reconnect=True)\n+        self.sync_blocks([b68], success=False, reject_code=16, reject_reason=b'bad-cb-amount', reconnect=True)\n \n         self.log.info(\"Accept a block claiming the correct subsidy in the coinbase transaction\")\n         self.move_tip(65)\n@@ -924,7 +927,7 @@ def run_test(self):\n         tx.vin.append(CTxIn(COutPoint(bogus_tx.sha256, 0), b\"\", 0xffffffff))\n         tx.vout.append(CTxOut(1, b\"\"))\n         b70 = self.update_block(70, [tx])\n-        self.sync_blocks([b70], False, 16, b'bad-txns-inputs-missingorspent', reconnect=True)\n+        self.sync_blocks([b70], success=False, reject_code=16, reject_reason=b'bad-txns-inputs-missingorspent', reconnect=True)\n \n         # Test accepting an invalid block which has the same hash as a valid one (via merkle tree tricks)\n         #\n@@ -949,7 +952,7 @@ def run_test(self):\n         assert_equal(b72.sha256, b71.sha256)\n \n         self.move_tip(71)\n-        self.sync_blocks([b71], False, 16, b'bad-txns-duplicate', reconnect=True)\n+        self.sync_blocks([b71], success=False, reject_code=16, reject_reason=b'bad-txns-duplicate', reconnect=True)\n \n         self.move_tip(72)\n         self.sync_blocks([b72], True)\n@@ -987,7 +990,7 @@ def run_test(self):\n         tx = self.create_and_sign_transaction(out[22], 1, CScript(a))\n         b73 = self.update_block(73, [tx])\n         assert_equal(get_legacy_sigopcount_block(b73), MAX_BLOCK_SIGOPS + 1)\n-        self.sync_blocks([b73], False, 16, b'bad-blk-sigops', reconnect=True)\n+        self.sync_blocks([b73], success=False, reject_code=16, reject_reason=b'bad-blk-sigops', reconnect=True)\n \n         # b74/75 - if we push an invalid script element, all prevous sigops are counted,\n         #          but sigops after the element are not counted.\n@@ -1011,7 +1014,7 @@ def run_test(self):\n         a[MAX_BLOCK_SIGOPS + 4] = 0xff\n         tx = self.create_and_sign_transaction(out[22], 1, CScript(a))\n         b74 = self.update_block(74, [tx])\n-        self.sync_blocks([b74], False, 16, b'bad-blk-sigops', reconnect=True)\n+        self.sync_blocks([b74], success=False, reject_code=16, reject_reason=b'bad-blk-sigops', reconnect=True)\n \n         self.move_tip(72)\n         b75 = self.next_block(75)\n@@ -1160,7 +1163,7 @@ def run_test(self):\n         b89a = self.next_block(\"89a\", spend=out[32])\n         tx = self.create_tx(tx1, 0, 0, CScript([OP_TRUE]))\n         b89a = self.update_block(\"89a\", [tx])\n-        self.sync_blocks([b89a], False, 16, b'bad-txns-inputs-missingorspent', reconnect=True)\n+        self.sync_blocks([b89a], success=False, reject_code=16, reject_reason=b'bad-txns-inputs-missingorspent', reconnect=True)\n \n         self.log.info(\"Test a re-org of one week's worth of blocks (1088 blocks)\")\n "
      },
      {
        "sha": "1296cdb497eb39143ed4fdb788d7de66b13aafd0",
        "filename": "test/functional/feature_blocksdir.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_blocksdir.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_blocksdir.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_blocksdir.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -16,6 +16,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.stop_node(0)\n         shutil.rmtree(self.nodes[0].datadir)"
      },
      {
        "sha": "9a53b62abdb5d81b013c8134ca026bd8d50b6935",
        "filename": "test/functional/feature_cltv.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_cltv.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -57,6 +57,9 @@ def set_test_params(self):\n         self.extra_args = [['-whitelist=127.0.0.1']]\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.nodes[0].add_p2p_connection(P2PInterface())\n "
      },
      {
        "sha": "1124119e2bc971e91c7afcf986a37da9069fc483",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -14,6 +14,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def test_config_file_parser(self):\n         # Assume node is stopped\n "
      },
      {
        "sha": "a2796efa2a396bfd3f58a7366963cb3d551fc941",
        "filename": "test/functional/feature_csv_activation.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_csv_activation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_csv_activation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_csv_activation.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -145,6 +145,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.extra_args = [['-whitelist=127.0.0.1', '-blockversion=4', '-addresstype=legacy']]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def generate_blocks(self, number, version, test_blocks=None):\n         if test_blocks is None:\n             test_blocks = []"
      },
      {
        "sha": "ae1eacf2d7bdd8c989ff25d75d2e29443dc861b6",
        "filename": "test/functional/feature_dbcrash.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_dbcrash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_dbcrash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dbcrash.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -63,6 +63,9 @@ def set_test_params(self):\n         self.node3_args = [\"-blockmaxweight=4000000\"]\n         self.extra_args = [self.node0_args, self.node1_args, self.node2_args, self.node3_args]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.add_nodes(self.num_nodes, extra_args=self.extra_args)\n         self.start_nodes()"
      },
      {
        "sha": "f9e1ef0231bfe40a10f8fc758dc296d2cfb3f71c",
        "filename": "test/functional/feature_dersig.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_dersig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_dersig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dersig.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -45,6 +45,9 @@ def set_test_params(self):\n         self.extra_args = [['-whitelist=127.0.0.1']]\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.nodes[0].add_p2p_connection(P2PInterface())\n "
      },
      {
        "sha": "aaab4279b5f0467cfb2705894bd2aad53d0f6251",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -126,6 +126,9 @@ class EstimateFeeTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 3\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         \"\"\"\n         We'll setup the network to have 3 nodes that all mine with different parameters.\n@@ -168,6 +171,11 @@ def transact_and_mine(self, numblocks, mining_node):\n                     newmem.append(utx)\n             self.memutxo = newmem\n \n+    def import_deterministic_coinbase_privkeys(self):\n+        self.start_nodes()\n+        super().import_deterministic_coinbase_privkeys()\n+        self.stop_nodes()\n+\n     def run_test(self):\n         self.log.info(\"This test is time consuming, please be patient\")\n         self.log.info(\"Splitting inputs so we can generate tx's\")"
      },
      {
        "sha": "a74c413440fd6a7c01b0c0a170cf00ca54d2d8d7",
        "filename": "test/functional/feature_logging.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_logging.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_logging.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_logging.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -15,6 +15,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def relative_log_path(self, name):\n         return os.path.join(self.nodes[0].datadir, \"regtest\", name)\n "
      },
      {
        "sha": "87c318de9a06a25603282ff88dd12f57e2296fd0",
        "filename": "test/functional/feature_maxuploadtarget.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_maxuploadtarget.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -40,6 +40,9 @@ def set_test_params(self):\n         # Cache for utxos, as the listunspent may take a long time later in the test\n         self.utxo_cache = []\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # Before we connect anything, we first set the time on the node\n         # to be in the past, otherwise things break because the CNode"
      },
      {
        "sha": "5d180c2244d0405d8a3bf82852bbee1a334f6e6b",
        "filename": "test/functional/feature_minchainwork.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_minchainwork.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_minchainwork.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_minchainwork.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -31,6 +31,9 @@ def set_test_params(self):\n         self.extra_args = [[], [\"-minimumchainwork=0x65\"], [\"-minimumchainwork=0x65\"]]\n         self.node_min_work = [0, 101, 101]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         # This test relies on the chain setup being:\n         # node0 <- node1 <- node2"
      },
      {
        "sha": "25a7329a0d1f516c3a70f025ae7ef39ac0994330",
        "filename": "test/functional/feature_notifications.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_notifications.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_notifications.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_notifications.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -13,6 +13,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.alert_filename = os.path.join(self.options.tmpdir, \"alert.txt\")\n         self.block_filename = os.path.join(self.options.tmpdir, \"blocks.txt\")"
      },
      {
        "sha": "a79cc3d34bf48b6bb48e12ef950b9e14bd2068a6",
        "filename": "test/functional/feature_nulldummy.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_nulldummy.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -44,9 +44,12 @@ def set_test_params(self):\n         # normal segwit activation here (and don't use the default always-on behaviour).\n         self.extra_args = [['-whitelist=127.0.0.1', '-vbparams=segwit:0:999999999999', '-addresstype=legacy', \"-deprecatedrpc=addwitnessaddress\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.address = self.nodes[0].getnewaddress()\n-        self.ms_address = self.nodes[0].addmultisigaddress(1,[self.address])['address']\n+        self.ms_address = self.nodes[0].addmultisigaddress(1, [self.address])['address']\n         self.wit_address = self.nodes[0].addwitnessaddress(self.address)\n         self.wit_ms_address = self.nodes[0].addmultisigaddress(1, [self.address], '', 'p2sh-segwit')['address']\n "
      },
      {
        "sha": "772151dc4ba1f5649c3ecf5ac35b18278b9de878",
        "filename": "test/functional/feature_pruning.py",
        "status": "modified",
        "additions": 12,
        "deletions": 7,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_pruning.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -33,15 +33,20 @@ def set_test_params(self):\n \n         # Create nodes 0 and 1 to mine.\n         # Create node 2 to test pruning.\n-        self.full_node_default_args = [\"-maxreceivebuffer=20000\", \"-checkblocks=5\", \"-limitdescendantcount=100\", \"-limitdescendantsize=5000\", \"-limitancestorcount=100\", \"-limitancestorsize=5000\" ]\n+        self.full_node_default_args = [\"-maxreceivebuffer=20000\", \"-checkblocks=5\", \"-limitdescendantcount=100\", \"-limitdescendantsize=5000\", \"-limitancestorcount=100\", \"-limitancestorsize=5000\"]\n         # Create nodes 3 and 4 to test manual pruning (they will be re-started with manual pruning later)\n         # Create nodes 5 to test wallet in prune mode, but do not connect\n-        self.extra_args = [self.full_node_default_args,\n-                           self.full_node_default_args,\n-                           [\"-maxreceivebuffer=20000\", \"-prune=550\"],\n-                           [\"-maxreceivebuffer=20000\"],\n-                           [\"-maxreceivebuffer=20000\"],\n-                           [\"-prune=550\"]]\n+        self.extra_args = [\n+            self.full_node_default_args,\n+            self.full_node_default_args,\n+            [\"-maxreceivebuffer=20000\", \"-prune=550\"],\n+            [\"-maxreceivebuffer=20000\"],\n+            [\"-maxreceivebuffer=20000\"],\n+            [\"-prune=550\"],\n+        ]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n \n     def setup_network(self):\n         self.setup_nodes()"
      },
      {
        "sha": "d78d75dbade14f4c014e7663e7a922319b560abd",
        "filename": "test/functional/feature_rbf.py",
        "status": "modified",
        "additions": 17,
        "deletions": 8,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_rbf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_rbf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_rbf.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -61,17 +61,26 @@ def make_utxo(node, amount, confirmed=True, scriptPubKey=CScript([1])):\n \n     return COutPoint(int(txid, 16), 0)\n \n-class ReplaceByFeeTest(BitcoinTestFramework):\n \n+class ReplaceByFeeTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n-        self.extra_args= [[\"-maxorphantx=1000\",\n-                           \"-whitelist=127.0.0.1\",\n-                           \"-limitancestorcount=50\",\n-                           \"-limitancestorsize=101\",\n-                           \"-limitdescendantcount=200\",\n-                           \"-limitdescendantsize=101\"],\n-                           [\"-mempoolreplacement=0\"]]\n+        self.extra_args = [\n+            [\n+                \"-maxorphantx=1000\",\n+                \"-whitelist=127.0.0.1\",\n+                \"-limitancestorcount=50\",\n+                \"-limitancestorsize=101\",\n+                \"-limitdescendantcount=200\",\n+                \"-limitdescendantsize=101\",\n+            ],\n+            [\n+                \"-mempoolreplacement=0\",\n+            ],\n+        ]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n \n     def run_test(self):\n         # Leave IBD"
      },
      {
        "sha": "3727eeaeae9dde18e13f9727233fc772aa3e23ed",
        "filename": "test/functional/feature_reindex.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_reindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_reindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_reindex.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -18,6 +18,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def reindex(self, justchainstate=False):\n         self.nodes[0].generate(3)\n         blockcount = self.nodes[0].getblockcount()"
      },
      {
        "sha": "2cbfc26e899f4fd83a8dc08a533b00beead62616",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 24,
        "deletions": 3,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -46,9 +46,30 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n         # This test tests SegWit both pre and post-activation, so use the normal BIP9 activation.\n-        self.extra_args = [[\"-rpcserialversion=0\", \"-vbparams=segwit:0:999999999999\", \"-addresstype=legacy\", \"-deprecatedrpc=addwitnessaddress\"],\n-                           [\"-blockversion=4\", \"-rpcserialversion=1\", \"-vbparams=segwit:0:999999999999\", \"-addresstype=legacy\", \"-deprecatedrpc=addwitnessaddress\"],\n-                           [\"-blockversion=536870915\", \"-vbparams=segwit:0:999999999999\", \"-addresstype=legacy\", \"-deprecatedrpc=addwitnessaddress\"]]\n+        self.extra_args = [\n+            [\n+                \"-rpcserialversion=0\",\n+                \"-vbparams=segwit:0:999999999999\",\n+                \"-addresstype=legacy\",\n+                \"-deprecatedrpc=addwitnessaddress\",\n+            ],\n+            [\n+                \"-blockversion=4\",\n+                \"-rpcserialversion=1\",\n+                \"-vbparams=segwit:0:999999999999\",\n+                \"-addresstype=legacy\",\n+                \"-deprecatedrpc=addwitnessaddress\",\n+            ],\n+            [\n+                \"-blockversion=536870915\",\n+                \"-vbparams=segwit:0:999999999999\",\n+                \"-addresstype=legacy\",\n+                \"-deprecatedrpc=addwitnessaddress\",\n+            ],\n+        ]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n \n     def setup_network(self):\n         super().setup_network()"
      },
      {
        "sha": "cf77720437e4c714fb26960f71f73999c2d68253",
        "filename": "test/functional/feature_versionbits_warning.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_versionbits_warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_versionbits_warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_versionbits_warning.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -31,6 +31,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.alert_filename = os.path.join(self.options.tmpdir, \"alert.txt\")\n         # Open and close to create zero-length file"
      },
      {
        "sha": "f311858beeb017b137a739beed9a5bb5636b7e4d",
        "filename": "test/functional/interface_bitcoin_cli.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/interface_bitcoin_cli.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/interface_bitcoin_cli.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_bitcoin_cli.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -12,6 +12,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         \"\"\"Main test logic\"\"\"\n "
      },
      {
        "sha": "afa9de580f0309922fb7e720b0dacf654b3090f5",
        "filename": "test/functional/interface_rest.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/interface_rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/interface_rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_rest.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -43,6 +43,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[\"-rest\"], []]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def test_rest_request(self, uri, http_method='GET', req_type=ReqType.JSON, body='', status=200, ret_type=RetType.JSON):\n         rest_uri = '/rest' + uri\n         if req_type == ReqType.JSON:"
      },
      {
        "sha": "c853ba7e3f8d14c4b47c27ed7a5fea78a242d50e",
        "filename": "test/functional/interface_zmq.py",
        "status": "modified",
        "additions": 22,
        "deletions": 10,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/interface_zmq.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/interface_zmq.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_zmq.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -5,15 +5,16 @@\n \"\"\"Test the ZMQ notification interface.\"\"\"\n import struct\n \n-from test_framework.test_framework import (\n-    BitcoinTestFramework, skip_if_no_bitcoind_zmq, skip_if_no_py3_zmq)\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.messages import CTransaction\n-from test_framework.util import (assert_equal,\n-                                 bytes_to_hex_str,\n-                                 hash256,\n-                                )\n+from test_framework.util import (\n+    assert_equal,\n+    bytes_to_hex_str,\n+    hash256,\n+)\n from io import BytesIO\n \n+\n class ZMQSubscriber:\n     def __init__(self, socket, topic):\n         self.sequence = 0\n@@ -37,9 +38,18 @@ class ZMQTest (BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_py3_zmq()\n+        self.skip_if_no_bitcoind_zmq()\n+        self.skip_if_no_wallet()\n+\n     def setup_nodes(self):\n-        skip_if_no_py3_zmq()\n-        skip_if_no_bitcoind_zmq(self)\n+        # Import keys\n+        self.add_nodes(self.num_nodes)\n+        self.start_nodes()\n+        super().import_deterministic_coinbase_privkeys()\n+        self.stop_nodes()\n+\n         import zmq\n \n         # Initialize ZMQ context and socket.\n@@ -59,10 +69,12 @@ def setup_nodes(self):\n         self.rawblock = ZMQSubscriber(socket, b\"rawblock\")\n         self.rawtx = ZMQSubscriber(socket, b\"rawtx\")\n \n-        self.extra_args = [[\"-zmqpub%s=%s\" % (sub.topic.decode(), address) for sub in [self.hashblock, self.hashtx, self.rawblock, self.rawtx]], []]\n-        self.add_nodes(self.num_nodes, self.extra_args)\n+        self.nodes[0].extra_args = [\"-zmqpub%s=%s\" % (sub.topic.decode(), address) for sub in [self.hashblock, self.hashtx, self.rawblock, self.rawtx]]\n         self.start_nodes()\n \n+    def import_deterministic_coinbase_privkeys(self):\n+        pass\n+\n     def run_test(self):\n         try:\n             self._zmq_test()"
      },
      {
        "sha": "8847777ba7b308e97c0f5c86cae7d925571d278b",
        "filename": "test/functional/mempool_accept.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/mempool_accept.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/mempool_accept.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_accept.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -40,6 +40,9 @@ def set_test_params(self):\n             '-acceptnonstdtxn=0',  # Try to mimic main-net\n         ]] * self.num_nodes\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def check_mempool_result(self, result_expected, *args, **kwargs):\n         \"\"\"Wrapper to check result of testmempoolaccept on node_0's mempool\"\"\"\n         result_test = self.nodes[0].testmempoolaccept(*args, **kwargs)"
      },
      {
        "sha": "c0918893cdc9a11d3cdd19634f94fdb4494bcf14",
        "filename": "test/functional/mempool_limit.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_limit.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -15,6 +15,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [[\"-maxmempool=5\", \"-spendzeroconfchange=0\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         txouts = gen_return_txouts()\n         relayfee = self.nodes[0].getnetworkinfo()['relayfee']"
      },
      {
        "sha": "9336547a6b42ba94ea030f986ac72499f8abf9e8",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -18,6 +18,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[\"-maxorphantx=1000\"], [\"-maxorphantx=1000\", \"-limitancestorcount=5\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     # Build a transaction that spends parent_txid:vout\n     # Return amount sent\n     def chain_transaction(self, node, parent_txid, vout, value, fee, num_outputs):\n@@ -34,7 +37,7 @@ def chain_transaction(self, node, parent_txid, vout, value, fee, num_outputs):\n         return (txid, send_value)\n \n     def run_test(self):\n-        ''' Mine some blocks and have them mature. '''\n+        # Mine some blocks and have them mature.\n         self.nodes[0].generate(101)\n         utxo = self.nodes[0].listunspent(10)\n         txid = utxo[0]['txid']"
      },
      {
        "sha": "b4e9d967fd6ccf696a01d2c5be06806143fad1b9",
        "filename": "test/functional/mempool_persist.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/mempool_persist.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/mempool_persist.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_persist.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -47,6 +47,9 @@ def set_test_params(self):\n         self.num_nodes = 3\n         self.extra_args = [[], [\"-persistmempool=0\"], []]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         chain_height = self.nodes[0].getblockcount()\n         assert_equal(chain_height, 200)"
      },
      {
        "sha": "123f0b4c28b7507ede041d8cfd1f99635c256761",
        "filename": "test/functional/mempool_reorg.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/mempool_reorg.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/mempool_reorg.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_reorg.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -17,6 +17,9 @@ class MempoolCoinbaseTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     alert_filename = None  # Set by setup_network\n \n     def run_test(self):"
      },
      {
        "sha": "d035ca907a5d778619c0c696993d0e61f9c9ccd0",
        "filename": "test/functional/mempool_resurrect.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/mempool_resurrect.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/mempool_resurrect.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_resurrect.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -13,6 +13,9 @@ class MempoolCoinbaseTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         node0_address = self.nodes[0].getnewaddress()\n         # Spend block 1/2/3's coinbase transactions"
      },
      {
        "sha": "854d506f0dd712d4cfaf8f6371e1fa6d6684d22f",
        "filename": "test/functional/mempool_spend_coinbase.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/mempool_spend_coinbase.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/mempool_spend_coinbase.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_spend_coinbase.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -21,6 +21,9 @@ class MempoolSpendCoinbaseTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         chain_height = self.nodes[0].getblockcount()\n         assert_equal(chain_height, 200)"
      },
      {
        "sha": "5b53df832ae62584bce6c4c7cf99a126beaf880a",
        "filename": "test/functional/mining_basic.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/mining_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/mining_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_basic.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -31,6 +31,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = False\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         node = self.nodes[0]\n "
      },
      {
        "sha": "7d27a2a83a98b3d2fe689e1a155029f38cf473aa",
        "filename": "test/functional/mining_getblocktemplate_longpoll.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/mining_getblocktemplate_longpoll.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/mining_getblocktemplate_longpoll.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_getblocktemplate_longpoll.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -28,6 +28,9 @@ class GetBlockTemplateLPTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.log.info(\"Warning: this test will take about 70 seconds in the best case. Be patient.\")\n         self.nodes[0].generate(10)\n@@ -70,4 +73,3 @@ def run_test(self):\n \n if __name__ == '__main__':\n     GetBlockTemplateLPTest().main()\n-"
      },
      {
        "sha": "92590717f3c4dac5f4a3fb8c9a7a97bd3cb9403f",
        "filename": "test/functional/mining_prioritisetransaction.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/mining_prioritisetransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/mining_prioritisetransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_prioritisetransaction.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -16,6 +16,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[\"-printpriority=1\"], [\"-printpriority=1\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # Test `prioritisetransaction` required parameters\n         assert_raises_rpc_error(-1, \"prioritisetransaction\", self.nodes[0].prioritisetransaction)"
      },
      {
        "sha": "3a5bdf806b29174152181baa74e463f61eaffb2d",
        "filename": "test/functional/p2p_compactblocks.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/p2p_compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/p2p_compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_compactblocks.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -102,6 +102,9 @@ def set_test_params(self):\n         self.extra_args = [[\"-vbparams=segwit:0:0\"], [\"-vbparams=segwit:0:999999999999\", \"-txindex\", \"-deprecatedrpc=addwitnessaddress\"]]\n         self.utxos = []\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def build_block_on_tip(self, node, segwit=False):\n         height = node.getblockcount()\n         tip = node.getbestblockhash()"
      },
      {
        "sha": "d589519e450048fba34f6e610d52d2aeb4a145fe",
        "filename": "test/functional/p2p_feefilter.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/p2p_feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/p2p_feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_feefilter.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -42,6 +42,9 @@ class FeeFilterTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         node1 = self.nodes[1]\n         node0 = self.nodes[0]"
      },
      {
        "sha": "884fb4b063335024baa779dddc871b065bf1967e",
        "filename": "test/functional/p2p_fingerprint.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/p2p_fingerprint.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/p2p_fingerprint.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_fingerprint.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -30,6 +30,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     # Build a chain of blocks on top of given one\n     def build_chain(self, nblocks, prev_hash, prev_height, prev_median_time):\n         blocks = []"
      },
      {
        "sha": "0a7b83ed73bcad4e72b51b34cce8715d50964872",
        "filename": "test/functional/p2p_invalid_block.py",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/p2p_invalid_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/p2p_invalid_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_block.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -24,6 +24,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.extra_args = [[\"-whitelist=127.0.0.1\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # Add p2p connection to node0\n         node = self.nodes[0]  # convenience reference to the node\n@@ -42,7 +45,7 @@ def run_test(self):\n         # Save the coinbase for later\n         block1 = block\n         tip = block.sha256\n-        node.p2p.send_blocks_and_test([block1], node, True)\n+        node.p2p.send_blocks_and_test([block1], node, success=True)\n \n         self.log.info(\"Mature the block.\")\n         node.generate(100)\n@@ -79,7 +82,7 @@ def run_test(self):\n         assert_equal(orig_hash, block2.rehash())\n         assert(block2_orig.vtx != block2.vtx)\n \n-        node.p2p.send_blocks_and_test([block2], node, False, False, 16, b'bad-txns-duplicate')\n+        node.p2p.send_blocks_and_test([block2], node, success=False, request_block=False, reject_code=16, reject_reason=b'bad-txns-duplicate')\n \n         # Check transactions for duplicate inputs\n         self.log.info(\"Test duplicate input block.\")\n@@ -102,7 +105,7 @@ def run_test(self):\n         block3.rehash()\n         block3.solve()\n \n-        node.p2p.send_blocks_and_test([block3], node, False, False, 16, b'bad-cb-amount')\n+        node.p2p.send_blocks_and_test([block3], node, success=False, request_block=False, reject_code=16, reject_reason=b'bad-cb-amount')\n \n if __name__ == '__main__':\n     InvalidBlockRequestTest().main()"
      },
      {
        "sha": "4cc43a4fa4eee7631f376d0451faaf02140fcd3c",
        "filename": "test/functional/p2p_invalid_locator.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/p2p_invalid_locator.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/p2p_invalid_locator.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_locator.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -15,6 +15,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = False\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         node = self.nodes[0]  # convenience reference to the node\n         node.generate(1)  # Get node out of IBD"
      },
      {
        "sha": "5cf0a75ab239cd6f731ea9bdd497c3e7081b8437",
        "filename": "test/functional/p2p_invalid_tx.py",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/p2p_invalid_tx.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/p2p_invalid_tx.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_tx.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -26,6 +26,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def bootstrap_p2p(self, *, num_connections=1):\n         \"\"\"Add a P2P connection to the node.\n \n@@ -136,11 +139,16 @@ def run_test(self):\n \n         # restart node with sending BIP61 messages disabled, check that it disconnects without sending the reject message\n         self.log.info('Test a transaction that is rejected, with BIP61 disabled')\n-        self.restart_node(0, ['-enablebip61=0','-persistmempool=0'])\n+        self.restart_node(0, ['-enablebip61=0', '-persistmempool=0'])\n         self.reconnect_p2p(num_connections=1)\n-        node.p2p.send_txs_and_test([tx1], node, success=False, expect_disconnect=True)\n+        with node.assert_debug_log(expected_msgs=[\n+                \"{} from peer=0 was not accepted: mandatory-script-verify-flag-failed (Invalid OP_IF construction) (code 16)\".format(tx1.hash),\n+                \"disconnecting peer=0\",\n+        ]):\n+            node.p2p.send_txs_and_test([tx1], node, success=False, expect_disconnect=True)\n         # send_txs_and_test will have waited for disconnect, so we can safely check that no reject has been received\n         assert_equal(node.p2p.reject_code_received, None)\n \n+\n if __name__ == '__main__':\n     InvalidTxRequestTest().main()"
      },
      {
        "sha": "05354d17e1c62788ea2386f61a06b9759aeb232f",
        "filename": "test/functional/p2p_leak.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/p2p_leak.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/p2p_leak.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_leak.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -93,6 +93,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [['-banscore=' + str(banscore)]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         no_version_bannode = self.nodes[0].add_p2p_connection(CNodeNoVersionBan(), send_version=False, wait_for_verack=False)\n         no_version_idlenode = self.nodes[0].add_p2p_connection(CNodeNoVersionIdle(), send_version=False, wait_for_verack=False)"
      },
      {
        "sha": "ef9c71dc02d105d8ec71c6c19662d55cee29a9db",
        "filename": "test/functional/p2p_node_network_limited.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/p2p_node_network_limited.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/p2p_node_network_limited.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_node_network_limited.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -34,6 +34,9 @@ def set_test_params(self):\n         self.num_nodes = 3\n         self.extra_args = [['-prune=550', '-addrmantest'], [], []]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def disconnect_all(self):\n         disconnect_nodes(self.nodes[0], 1)\n         disconnect_nodes(self.nodes[1], 0)"
      },
      {
        "sha": "f5ff646978a96dd01a24e52a8ebfb5f91529a459",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 114,
        "deletions": 111,
        "changes": 225,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -119,7 +119,7 @@ def get_virtual_size(witness_block):\n     vsize = int((3 * base_size + total_size + 3) / 4)\n     return vsize\n \n-def test_transaction_acceptance(rpc, p2p, tx, with_witness, accepted, reason=None):\n+def test_transaction_acceptance(node, p2p, tx, with_witness, accepted, reason=None):\n     \"\"\"Send a transaction to the node and check that it's accepted to the mempool\n \n     - Submit the transaction over the p2p interface\n@@ -129,13 +129,13 @@ def test_transaction_acceptance(rpc, p2p, tx, with_witness, accepted, reason=Non\n         tx_message = msg_witness_tx(tx)\n     p2p.send_message(tx_message)\n     p2p.sync_with_ping()\n-    assert_equal(tx.hash in rpc.getrawmempool(), accepted)\n+    assert_equal(tx.hash in node.getrawmempool(), accepted)\n     if (reason is not None and not accepted):\n         # Check the rejection reason as well.\n         with mininode_lock:\n             assert_equal(p2p.last_message[\"reject\"].reason, reason)\n \n-def test_witness_block(rpc, p2p, block, accepted, with_witness=True, reason=None):\n+def test_witness_block(node, p2p, block, accepted, with_witness=True, reason=None):\n     \"\"\"Send a block to the node and check that it's accepted\n \n     - Submit the block over the p2p interface\n@@ -145,7 +145,7 @@ def test_witness_block(rpc, p2p, block, accepted, with_witness=True, reason=None\n     else:\n         p2p.send_message(msg_block(block))\n     p2p.sync_with_ping()\n-    assert_equal(rpc.getbestblockhash() == block.hash, accepted)\n+    assert_equal(node.getbestblockhash() == block.hash, accepted)\n     if (reason is not None and not accepted):\n         # Check the rejection reason as well.\n         with mininode_lock:\n@@ -198,6 +198,9 @@ def set_test_params(self):\n         # This test tests SegWit both pre and post-activation, so use the normal BIP9 activation.\n         self.extra_args = [[\"-whitelist=127.0.0.1\", \"-vbparams=segwit:0:999999999999\"], [\"-whitelist=127.0.0.1\", \"-acceptnonstdtxn=0\", \"-vbparams=segwit:0:999999999999\"], [\"-whitelist=127.0.0.1\", \"-vbparams=segwit:0:0\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.setup_nodes()\n         connect_nodes(self.nodes[0], 1)\n@@ -349,7 +352,7 @@ def test_unnecessary_witness_before_segwit_activation(self):\n         self.update_witness_block_with_transactions(block, [tx])\n         # Sending witness data before activation is not allowed (anti-spam\n         # rule).\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n         wait_until(lambda: 'reject' in self.test_node.last_message and self.test_node.last_message[\"reject\"].reason ==  b\"unexpected-witness\")\n \n         # But it should not be permanently marked bad...\n@@ -380,20 +383,20 @@ def test_block_relay(self):\n \n         self.test_node.announce_block_and_wait_for_getdata(block1, use_header=False)\n         assert(self.test_node.last_message[\"getdata\"].inv[0].type == blocktype)\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block1, True)\n+        test_witness_block(self.nodes[0], self.test_node, block1, True)\n \n         block2 = self.build_next_block(version=4)\n         block2.solve()\n \n         self.test_node.announce_block_and_wait_for_getdata(block2, use_header=True)\n         assert(self.test_node.last_message[\"getdata\"].inv[0].type == blocktype)\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block2, True)\n+        test_witness_block(self.nodes[0], self.test_node, block2, True)\n \n         block3 = self.build_next_block(version=(VB_TOP_BITS | (1 << 15)))\n         block3.solve()\n         self.test_node.announce_block_and_wait_for_getdata(block3, use_header=True)\n         assert(self.test_node.last_message[\"getdata\"].inv[0].type == blocktype)\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block3, True)\n+        test_witness_block(self.nodes[0], self.test_node, block3, True)\n \n         # Check that we can getdata for witness blocks or regular blocks,\n         # and the right thing happens.\n@@ -423,7 +426,7 @@ def test_block_relay(self):\n             # This gives us a witness commitment.\n             assert(len(block.vtx[0].wit.vtxinwit) == 1)\n             assert(len(block.vtx[0].wit.vtxinwit[0].scriptWitness.stack) == 1)\n-            test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+            test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n             # Now try to retrieve it...\n             rpc_block = self.nodes[0].getblock(block.hash, False)\n             non_wit_block = self.test_node.request_block(block.sha256, 2)\n@@ -640,11 +643,11 @@ def test_witness_tx_relay_before_segwit_activation(self):\n         # its from)\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n         assert_equal(len(self.nodes[1].getrawmempool()), 0)\n-        test_transaction_acceptance(self.nodes[0].rpc, self.old_node, tx, with_witness=True, accepted=False)\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=True, accepted=False)\n+        test_transaction_acceptance(self.nodes[0], self.old_node, tx, with_witness=True, accepted=False)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=True, accepted=False)\n \n         # But eliminating the witness should fix it\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=False, accepted=True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=False, accepted=True)\n \n         # Cleanup: mine the first transaction and update utxo\n         self.nodes[0].generate(1)\n@@ -674,7 +677,7 @@ def test_standardness_v0(self):\n         p2sh_tx.rehash()\n \n         # Mine it on test_node to create the confirmed output.\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2sh_tx, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, p2sh_tx, with_witness=True, accepted=True)\n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n \n@@ -689,7 +692,7 @@ def test_standardness_v0(self):\n \n         # This is always accepted, since the mempool policy is to consider segwit as always active\n         # and thus allow segwit outputs\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, tx, with_witness=True, accepted=True)\n \n         # Now create something that looks like a P2PKH output. This won't be spendable.\n         script_pubkey = CScript([OP_0, hash160(witness_hash)])\n@@ -701,7 +704,7 @@ def test_standardness_v0(self):\n         tx2.wit.vtxinwit[0].scriptWitness.stack = [witness_program]\n         tx2.rehash()\n \n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx2, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, tx2, with_witness=True, accepted=True)\n \n         # Now update self.utxo for later tests.\n         tx3 = CTransaction()\n@@ -723,7 +726,7 @@ def test_standardness_v0(self):\n             tx3.vout = [tx3_out]\n             tx3.rehash()\n             assert_equal(self.nodes[0].testmempoolaccept([bytes_to_hex_str(tx3.serialize_with_witness())]), [{'txid': tx3.hash, 'allowed': True}])\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx3, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx3, with_witness=True, accepted=True)\n \n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n@@ -760,10 +763,10 @@ def test_p2sh_witness(self):\n         tx.rehash()\n \n         # Verify mempool acceptance and block validity\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=False, accepted=True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=False, accepted=True)\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True, with_witness=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True, with_witness=True)\n         sync_blocks(self.nodes)\n \n         # Now test attempts to spend the output.\n@@ -777,12 +780,12 @@ def test_p2sh_witness(self):\n         # will require a witness to spend a witness program regardless of\n         # segwit activation.  Note that older bitcoind's that are not\n         # segwit-aware would also reject this for failing CLEANSTACK.\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, spend_tx, with_witness=False, accepted=False)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, spend_tx, with_witness=False, accepted=False)\n \n         # Try to put the witness script in the script_sig, should also fail.\n         spend_tx.vin[0].script_sig = CScript([p2wsh_pubkey, b'a'])\n         spend_tx.rehash()\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, spend_tx, with_witness=False, accepted=False)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, spend_tx, with_witness=False, accepted=False)\n \n         # Now put the witness script in the witness, should succeed after\n         # segwit activates.\n@@ -792,15 +795,15 @@ def test_p2sh_witness(self):\n         spend_tx.wit.vtxinwit[0].scriptWitness.stack = [b'a', witness_program]\n \n         # Verify mempool acceptance\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, spend_tx, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, spend_tx, with_witness=True, accepted=True)\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [spend_tx])\n \n         # If we're after activation, then sending this with witnesses should be valid.\n         # This no longer works before activation, because SCRIPT_VERIFY_WITNESS\n         # is always set.\n         # TODO: rewrite this test to make clear that it only works after activation.\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Update self.utxo\n         self.utxo.pop(0)\n@@ -821,7 +824,7 @@ def test_witness_commitments(self):\n         assert(msg_witness_block(block).serialize() != msg_block(block).serialize())\n \n         # This empty block should be valid.\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Try to tweak the nonce\n         block_2 = self.build_next_block()\n@@ -832,7 +835,7 @@ def test_witness_commitments(self):\n         assert(block_2.vtx[0].vout[-1] != block.vtx[0].vout[-1])\n \n         # This should also be valid.\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block_2, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block_2, accepted=True)\n \n         # Now test commitments with actual transactions\n         tx = CTransaction()\n@@ -864,7 +867,7 @@ def test_witness_commitments(self):\n         block_3.rehash()\n         block_3.solve()\n \n-        test_witness_block(self.nodes[0].rpc, self.test_node, block_3, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block_3, accepted=False)\n \n         # Add a different commitment with different nonce, but in the\n         # right location, and with some funds burned(!).\n@@ -878,7 +881,7 @@ def test_witness_commitments(self):\n         block_3.rehash()\n         assert(len(block_3.vtx[0].vout) == 4)  # 3 OP_returns\n         block_3.solve()\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block_3, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block_3, accepted=True)\n \n         # Finally test that a block with no witness transactions can\n         # omit the commitment.\n@@ -890,7 +893,7 @@ def test_witness_commitments(self):\n         block_4.vtx.append(tx3)\n         block_4.hashMerkleRoot = block_4.calc_merkle_root()\n         block_4.solve()\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block_4, with_witness=False, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block_4, with_witness=False, accepted=True)\n \n         # Update available utxo's for use in later test.\n         self.utxo.pop(0)\n@@ -930,11 +933,11 @@ def test_block_malleability(self):\n         # Change the nonce -- should not cause the block to be permanently\n         # failed\n         block.vtx[0].wit.vtxinwit[0].scriptWitness.stack = [ser_uint256(1)]\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Changing the witness reserved value doesn't change the block hash\n         block.vtx[0].wit.vtxinwit[0].scriptWitness.stack = [ser_uint256(0)]\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n     @subtest\n     def test_witness_block_size(self):\n@@ -998,7 +1001,7 @@ def test_witness_block_size(self):\n         # limit\n         assert(len(block.serialize(True)) > 2 * 1024 * 1024)\n \n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Now resize the second transaction to make the block fit.\n         cur_length = len(block.vtx[-1].wit.vtxinwit[0].scriptWitness.stack[0])\n@@ -1008,7 +1011,7 @@ def test_witness_block_size(self):\n         block.solve()\n         assert(get_virtual_size(block) == MAX_BLOCK_BASE_SIZE)\n \n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Update available utxo's\n         self.utxo.pop(0)\n@@ -1071,7 +1074,7 @@ def test_extra_witness_data(self):\n         self.update_witness_block_with_transactions(block, [tx])\n \n         # Extra witness data should not be allowed.\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Try extra signature data.  Ok if we're not spending a witness output.\n         block.vtx[1].wit.vtxinwit = []\n@@ -1080,7 +1083,7 @@ def test_extra_witness_data(self):\n         add_witness_commitment(block)\n         block.solve()\n \n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Now try extra witness/signature data on an input that DOES require a\n         # witness\n@@ -1096,7 +1099,7 @@ def test_extra_witness_data(self):\n         self.update_witness_block_with_transactions(block, [tx2])\n \n         # This has extra witness data, so it should fail.\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Now get rid of the extra witness, but add extra scriptSig data\n         tx2.vin[0].scriptSig = CScript([OP_TRUE])\n@@ -1108,7 +1111,7 @@ def test_extra_witness_data(self):\n         block.solve()\n \n         # This has extra signature data for a witness input, so it should fail.\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Now get rid of the extra scriptsig on the witness input, and verify\n         # success (even with extra scriptsig data in the non-witness input)\n@@ -1117,7 +1120,7 @@ def test_extra_witness_data(self):\n         add_witness_commitment(block)\n         block.solve()\n \n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Update utxo for later tests\n         self.utxo.pop(0)\n@@ -1147,14 +1150,14 @@ def test_max_witness_push_length(self):\n         tx2.rehash()\n \n         self.update_witness_block_with_transactions(block, [tx, tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Now reduce the length of the stack element\n         tx2.wit.vtxinwit[0].scriptWitness.stack[0] = b'a' * (MAX_SCRIPT_ELEMENT_SIZE)\n \n         add_witness_commitment(block)\n         block.solve()\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Update the utxo for later tests\n         self.utxo.pop()\n@@ -1188,7 +1191,7 @@ def test_max_witness_program_length(self):\n \n         self.update_witness_block_with_transactions(block, [tx, tx2])\n \n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Try again with one less byte in the witness program\n         witness_program = CScript([b'a' * 520] * 19 + [OP_DROP] * 62 + [OP_TRUE])\n@@ -1203,7 +1206,7 @@ def test_max_witness_program_length(self):\n         tx2.rehash()\n         block.vtx = [block.vtx[0]]\n         self.update_witness_block_with_transactions(block, [tx, tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         self.utxo.pop()\n         self.utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n@@ -1227,7 +1230,7 @@ def test_witness_input_length(self):\n \n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Try various ways to spend tx that should all break.\n         # This \"broken\" transaction serializer will not normalize\n@@ -1262,15 +1265,15 @@ def serialize_with_witness(self):\n \n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Now try using a too short vtxinwit\n         tx2.wit.vtxinwit.pop()\n         tx2.wit.vtxinwit.pop()\n \n         block.vtx = [block.vtx[0]]\n         self.update_witness_block_with_transactions(block, [tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Now make one of the intermediate witnesses be incorrect\n         tx2.wit.vtxinwit.append(CTxInWitness())\n@@ -1279,13 +1282,13 @@ def serialize_with_witness(self):\n \n         block.vtx = [block.vtx[0]]\n         self.update_witness_block_with_transactions(block, [tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Fix the broken witness and the block should be accepted.\n         tx2.wit.vtxinwit[5].scriptWitness.stack = [b'a', witness_program]\n         block.vtx = [block.vtx[0]]\n         self.update_witness_block_with_transactions(block, [tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         self.utxo.pop()\n         self.utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n@@ -1314,11 +1317,11 @@ def test_tx_relay_after_segwit_activation(self):\n         # Verify that unnecessary witnesses are rejected.\n         self.test_node.announce_tx_and_wait_for_getdata(tx)\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=True, accepted=False)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=True, accepted=False)\n \n         # Verify that removing the witness succeeds.\n         self.test_node.announce_tx_and_wait_for_getdata(tx)\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=False, accepted=True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=False, accepted=True)\n \n         # Now try to add extra witness data to a valid witness tx.\n         witness_program = CScript([OP_TRUE])\n@@ -1343,24 +1346,24 @@ def test_tx_relay_after_segwit_activation(self):\n \n         # Node will not be blinded to the transaction\n         self.std_node.announce_tx_and_wait_for_getdata(tx3)\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx3, True, False, b'tx-size')\n+        test_transaction_acceptance(self.nodes[1], self.std_node, tx3, True, False, b'tx-size')\n         self.std_node.announce_tx_and_wait_for_getdata(tx3)\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx3, True, False, b'tx-size')\n+        test_transaction_acceptance(self.nodes[1], self.std_node, tx3, True, False, b'tx-size')\n \n         # Remove witness stuffing, instead add extra witness push on stack\n         tx3.vout[0] = CTxOut(tx2.vout[0].nValue - 1000, CScript([OP_TRUE, OP_DROP] * 15 + [OP_TRUE]))\n         tx3.wit.vtxinwit[0].scriptWitness.stack = [CScript([CScriptNum(1)]), witness_program]\n         tx3.rehash()\n \n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx2, with_witness=True, accepted=True)\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx3, with_witness=True, accepted=False)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx2, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx3, with_witness=True, accepted=False)\n \n         # Get rid of the extra witness, and verify acceptance.\n         tx3.wit.vtxinwit[0].scriptWitness.stack = [witness_program]\n         # Also check that old_node gets a tx announcement, even though this is\n         # a witness transaction.\n         self.old_node.wait_for_inv([CInv(1, tx2.sha256)])  # wait until tx2 was inv'ed\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx3, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx3, with_witness=True, accepted=True)\n         self.old_node.wait_for_inv([CInv(1, tx3.sha256)])\n \n         # Test that getrawtransaction returns correct witness information\n@@ -1400,7 +1403,7 @@ def test_segwit_versions(self):\n             tx.rehash()\n             block = self.build_next_block()\n             self.update_witness_block_with_transactions(block, [tx])\n-            test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+            test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n             self.utxo.pop(0)\n             for i in range(NUM_SEGWIT_VERSIONS):\n                 self.utxo.append(UTXO(tx.sha256, i, split_value))\n@@ -1417,8 +1420,8 @@ def test_segwit_versions(self):\n             tx.vin = [CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\")]\n             tx.vout = [CTxOut(self.utxo[0].nValue - 1000, script_pubkey)]\n             tx.rehash()\n-            test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx, with_witness=True, accepted=False)\n-            test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=True, accepted=True)\n+            test_transaction_acceptance(self.nodes[1], self.std_node, tx, with_witness=True, accepted=False)\n+            test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=True, accepted=True)\n             self.utxo.pop(0)\n             temp_utxo.append(UTXO(tx.sha256, 0, tx.vout[0].nValue))\n \n@@ -1437,8 +1440,8 @@ def test_segwit_versions(self):\n         tx2.rehash()\n         # Gets accepted to test_node, because standardness of outputs isn't\n         # checked with fRequireStandard\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx2, with_witness=True, accepted=True)\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx2, with_witness=True, accepted=False)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx2, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, tx2, with_witness=True, accepted=False)\n         temp_utxo.pop()  # last entry in temp_utxo was the output we just spent\n         temp_utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n \n@@ -1454,15 +1457,15 @@ def test_segwit_versions(self):\n         tx3.rehash()\n         # Spending a higher version witness output is not allowed by policy,\n         # even with fRequireStandard=false.\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx3, with_witness=True, accepted=False)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx3, with_witness=True, accepted=False)\n         self.test_node.sync_with_ping()\n         with mininode_lock:\n             assert(b\"reserved for soft-fork upgrades\" in self.test_node.last_message[\"reject\"].reason)\n \n         # Building a block with the transaction must be valid, however.\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx2, tx3])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n         sync_blocks(self.nodes)\n \n         # Add utxo to our list\n@@ -1480,7 +1483,7 @@ def test_premature_coinbase_witness_spend(self):\n         # This next line will rehash the coinbase and update the merkle\n         # root, and solve.\n         self.update_witness_block_with_transactions(block, [])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         spend_tx = CTransaction()\n         spend_tx.vin = [CTxIn(COutPoint(block.vtx[0].sha256, 0), b\"\")]\n@@ -1494,13 +1497,13 @@ def test_premature_coinbase_witness_spend(self):\n         sync_blocks(self.nodes)\n         block2 = self.build_next_block()\n         self.update_witness_block_with_transactions(block2, [spend_tx])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block2, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block2, accepted=False)\n \n         # Advancing one more block should allow the spend.\n         self.nodes[0].generate(1)\n         block2 = self.build_next_block()\n         self.update_witness_block_with_transactions(block2, [spend_tx])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block2, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block2, accepted=True)\n         sync_blocks(self.nodes)\n \n     @subtest\n@@ -1532,7 +1535,7 @@ def test_uncompressed_pubkey(self):\n         # Confirm it in a block.\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Now try to spend it. Send it to a P2WSH output, which we'll\n         # use in the next test.\n@@ -1551,11 +1554,11 @@ def test_uncompressed_pubkey(self):\n         tx2.rehash()\n \n         # Should fail policy test.\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx2, True, False, b'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx2, True, False, b'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n         # But passes consensus.\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Test 2: P2WSH\n         # Try to spend the P2WSH output created in last test.\n@@ -1571,11 +1574,11 @@ def test_uncompressed_pubkey(self):\n         sign_p2pk_witness_input(witness_program, tx3, 0, SIGHASH_ALL, tx2.vout[0].nValue, key)\n \n         # Should fail policy test.\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx3, True, False, b'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx3, True, False, b'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n         # But passes consensus.\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx3])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Test 3: P2SH(P2WSH)\n         # Try to spend the P2SH output created in the last test.\n@@ -1588,10 +1591,10 @@ def test_uncompressed_pubkey(self):\n         sign_p2pk_witness_input(witness_program, tx4, 0, SIGHASH_ALL, tx3.vout[0].nValue, key)\n \n         # Should fail policy test.\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx4, True, False, b'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx4, True, False, b'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx4])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Test 4: Uncompressed pubkeys should still be valid in non-segwit\n         # transactions.\n@@ -1603,10 +1606,10 @@ def test_uncompressed_pubkey(self):\n         tx5.vin[0].scriptSig = CScript([signature, pubkey])\n         tx5.rehash()\n         # Should pass policy and consensus.\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx5, True, True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx5, True, True)\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx5])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n         self.utxo.append(UTXO(tx5.sha256, 0, tx5.vout[0].nValue))\n \n     @subtest\n@@ -1626,11 +1629,11 @@ def test_signature_version_1(self):\n         tx.vout.append(CTxOut(self.utxo[0].nValue - 1000, script_pubkey))\n         tx.rehash()\n \n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=True, accepted=True)\n         # Mine this transaction in preparation for following tests.\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n         sync_blocks(self.nodes)\n         self.utxo.pop(0)\n \n@@ -1647,19 +1650,19 @@ def test_signature_version_1(self):\n                 # Too-large input value\n                 sign_p2pk_witness_input(witness_program, tx, 0, hashtype, prev_utxo.nValue + 1, key)\n                 self.update_witness_block_with_transactions(block, [tx])\n-                test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+                test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n                 # Too-small input value\n                 sign_p2pk_witness_input(witness_program, tx, 0, hashtype, prev_utxo.nValue - 1, key)\n                 block.vtx.pop()  # remove last tx\n                 self.update_witness_block_with_transactions(block, [tx])\n-                test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+                test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n                 # Now try correct value\n                 sign_p2pk_witness_input(witness_program, tx, 0, hashtype, prev_utxo.nValue, key)\n                 block.vtx.pop()\n                 self.update_witness_block_with_transactions(block, [tx])\n-                test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+                test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n                 prev_utxo = UTXO(tx.sha256, 0, tx.vout[0].nValue)\n \n@@ -1683,7 +1686,7 @@ def test_signature_version_1(self):\n \n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         block = self.build_next_block()\n         used_sighash_single_out_of_bounds = False\n@@ -1725,15 +1728,15 @@ def test_signature_version_1(self):\n             # Test the block periodically, if we're close to maxblocksize\n             if (get_virtual_size(block) > MAX_BLOCK_BASE_SIZE - 1000):\n                 self.update_witness_block_with_transactions(block, [])\n-                test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+                test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n                 block = self.build_next_block()\n \n         if (not used_sighash_single_out_of_bounds):\n             self.log.info(\"WARNING: this test run didn't attempt SIGHASH_SINGLE with out-of-bounds index value\")\n         # Test the transactions we've added to the block\n         if (len(block.vtx) > 1):\n             self.update_witness_block_with_transactions(block, [])\n-            test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+            test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Now test witness version 0 P2PKH transactions\n         pubkeyhash = hash160(pubkey)\n@@ -1755,7 +1758,7 @@ def test_signature_version_1(self):\n         tx2.vin[0].scriptSig = CScript([signature, pubkey])\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx, tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Move the signature to the witness.\n         block.vtx.pop()\n@@ -1765,7 +1768,7 @@ def test_signature_version_1(self):\n         tx2.rehash()\n \n         self.update_witness_block_with_transactions(block, [tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         temp_utxos.pop(0)\n \n@@ -1786,7 +1789,7 @@ def test_signature_version_1(self):\n             index += 1\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         for i in range(len(tx.vout)):\n             self.utxo.append(UTXO(tx.sha256, i, tx.vout[i].nValue))\n@@ -1808,7 +1811,7 @@ def test_non_standard_witness_blinding(self):\n         tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n         tx.vout.append(CTxOut(self.utxo[0].nValue - 1000, script_pubkey))\n         tx.rehash()\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, False, True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx, False, True)\n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n \n@@ -1825,18 +1828,18 @@ def test_non_standard_witness_blinding(self):\n         tx2.rehash()\n         # This will be rejected due to a policy check:\n         # No witness is allowed, since it is not a witness program but a p2sh program\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx2, True, False, b'bad-witness-nonstandard')\n+        test_transaction_acceptance(self.nodes[1], self.std_node, tx2, True, False, b'bad-witness-nonstandard')\n \n         # If we send without witness, it should be accepted.\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx2, False, True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, tx2, False, True)\n \n         # Now create a new anyone-can-spend utxo for the next test.\n         tx3 = CTransaction()\n         tx3.vin.append(CTxIn(COutPoint(tx2.sha256, 0), CScript([p2sh_program])))\n         tx3.vout.append(CTxOut(tx2.vout[0].nValue - 1000, CScript([OP_TRUE, OP_DROP] * 15 + [OP_TRUE])))\n         tx3.rehash()\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx2, False, True)\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx3, False, True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx2, False, True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx3, False, True)\n \n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n@@ -1872,7 +1875,7 @@ def test_non_standard_witness(self):\n             tx.vout.append(CTxOut(outputvalue, CScript([OP_HASH160, p2sh, OP_EQUAL])))\n         tx.rehash()\n         txid = tx.sha256\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=False, accepted=True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=False, accepted=True)\n \n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n@@ -1897,45 +1900,45 @@ def test_non_standard_witness(self):\n         # Testing native P2WSH\n         # Witness stack size, excluding witnessScript, over 100 is non-standard\n         p2wsh_txs[0].wit.vtxinwit[0].scriptWitness.stack = [pad] * 101 + [scripts[0]]\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2wsh_txs[0], True, False, b'bad-witness-nonstandard')\n+        test_transaction_acceptance(self.nodes[1], self.std_node, p2wsh_txs[0], True, False, b'bad-witness-nonstandard')\n         # Non-standard nodes should accept\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2wsh_txs[0], True, True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, p2wsh_txs[0], True, True)\n \n         # Stack element size over 80 bytes is non-standard\n         p2wsh_txs[1].wit.vtxinwit[0].scriptWitness.stack = [pad * 81] * 100 + [scripts[1]]\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2wsh_txs[1], True, False, b'bad-witness-nonstandard')\n+        test_transaction_acceptance(self.nodes[1], self.std_node, p2wsh_txs[1], True, False, b'bad-witness-nonstandard')\n         # Non-standard nodes should accept\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2wsh_txs[1], True, True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, p2wsh_txs[1], True, True)\n         # Standard nodes should accept if element size is not over 80 bytes\n         p2wsh_txs[1].wit.vtxinwit[0].scriptWitness.stack = [pad * 80] * 100 + [scripts[1]]\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2wsh_txs[1], True, True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, p2wsh_txs[1], True, True)\n \n         # witnessScript size at 3600 bytes is standard\n         p2wsh_txs[2].wit.vtxinwit[0].scriptWitness.stack = [pad, pad, scripts[2]]\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2wsh_txs[2], True, True)\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2wsh_txs[2], True, True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, p2wsh_txs[2], True, True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, p2wsh_txs[2], True, True)\n \n         # witnessScript size at 3601 bytes is non-standard\n         p2wsh_txs[3].wit.vtxinwit[0].scriptWitness.stack = [pad, pad, pad, scripts[3]]\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2wsh_txs[3], True, False, b'bad-witness-nonstandard')\n+        test_transaction_acceptance(self.nodes[1], self.std_node, p2wsh_txs[3], True, False, b'bad-witness-nonstandard')\n         # Non-standard nodes should accept\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2wsh_txs[3], True, True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, p2wsh_txs[3], True, True)\n \n         # Repeating the same tests with P2SH-P2WSH\n         p2sh_txs[0].wit.vtxinwit[0].scriptWitness.stack = [pad] * 101 + [scripts[0]]\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2sh_txs[0], True, False, b'bad-witness-nonstandard')\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2sh_txs[0], True, True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, p2sh_txs[0], True, False, b'bad-witness-nonstandard')\n+        test_transaction_acceptance(self.nodes[0], self.test_node, p2sh_txs[0], True, True)\n         p2sh_txs[1].wit.vtxinwit[0].scriptWitness.stack = [pad * 81] * 100 + [scripts[1]]\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2sh_txs[1], True, False, b'bad-witness-nonstandard')\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2sh_txs[1], True, True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, p2sh_txs[1], True, False, b'bad-witness-nonstandard')\n+        test_transaction_acceptance(self.nodes[0], self.test_node, p2sh_txs[1], True, True)\n         p2sh_txs[1].wit.vtxinwit[0].scriptWitness.stack = [pad * 80] * 100 + [scripts[1]]\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2sh_txs[1], True, True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, p2sh_txs[1], True, True)\n         p2sh_txs[2].wit.vtxinwit[0].scriptWitness.stack = [pad, pad, scripts[2]]\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2sh_txs[2], True, True)\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2sh_txs[2], True, True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, p2sh_txs[2], True, True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, p2sh_txs[2], True, True)\n         p2sh_txs[3].wit.vtxinwit[0].scriptWitness.stack = [pad, pad, pad, scripts[3]]\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2sh_txs[3], True, False, b'bad-witness-nonstandard')\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2sh_txs[3], True, True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, p2sh_txs[3], True, False, b'bad-witness-nonstandard')\n+        test_transaction_acceptance(self.nodes[0], self.test_node, p2sh_txs[3], True, True)\n \n         self.nodes[0].generate(1)  # Mine and clean up the mempool of non-standard node\n         # Valid but non-standard transactions in a block should be accepted by standard node\n@@ -2011,7 +2014,7 @@ def test_witness_sigops(self):\n \n         block_1 = self.build_next_block()\n         self.update_witness_block_with_transactions(block_1, [tx])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block_1, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block_1, accepted=True)\n \n         tx2 = CTransaction()\n         # If we try to spend the first n-1 outputs from tx, that should be\n@@ -2028,7 +2031,7 @@ def test_witness_sigops(self):\n \n         block_2 = self.build_next_block()\n         self.update_witness_block_with_transactions(block_2, [tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block_2, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block_2, accepted=False)\n \n         # Try dropping the last input in tx2, and add an output that has\n         # too many sigops (contributing to legacy sigop count).\n@@ -2041,14 +2044,14 @@ def test_witness_sigops(self):\n         tx2.rehash()\n         block_3 = self.build_next_block()\n         self.update_witness_block_with_transactions(block_3, [tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block_3, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block_3, accepted=False)\n \n         # If we drop the last checksig in this output, the tx should succeed.\n         block_4 = self.build_next_block()\n         tx2.vout[-1].scriptPubKey = CScript([OP_CHECKSIG] * (checksig_count - 1))\n         tx2.rehash()\n         self.update_witness_block_with_transactions(block_4, [tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block_4, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block_4, accepted=True)\n \n         # Reset the tip back down for the next test\n         sync_blocks(self.nodes)\n@@ -2064,7 +2067,7 @@ def test_witness_sigops(self):\n         tx2.wit.vtxinwit[-1].scriptWitness.stack = [witness_program_justright]\n         tx2.rehash()\n         self.update_witness_block_with_transactions(block_5, [tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block_5, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block_5, accepted=True)\n \n         # TODO: test p2sh sigop counting\n "
      },
      {
        "sha": "9a782c0bb9938cbf1d9c35d5ae7dea1e47d312c8",
        "filename": "test/functional/p2p_sendheaders.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/p2p_sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/p2p_sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_sendheaders.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -208,6 +208,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def mine_blocks(self, count):\n         \"\"\"Mine count blocks and return the new tip.\"\"\"\n "
      },
      {
        "sha": "232274f59eaecc792f06ba096c8e5d12df253c1d",
        "filename": "test/functional/p2p_unrequested_blocks.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/p2p_unrequested_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/p2p_unrequested_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_unrequested_blocks.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -66,6 +66,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[], [\"-minimumchainwork=0x10\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         # Node0 will be used to test behavior of processing unrequested blocks\n         # from peers which are not whitelisted, while Node1 will be used for"
      },
      {
        "sha": "00317a2c08823276bfa8824e8725e2cece40cd08",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -47,9 +47,13 @@\n class BlockchainTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n-        self.extra_args = [['-stopatheight=207', '-prune=1']]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n \n     def run_test(self):\n+        self.restart_node(0, extra_args=['-stopatheight=207', '-prune=1'])  # Set extra args with pruning after rescan is complete\n+\n         self._test_getblockchaininfo()\n         self._test_getchaintxstats()\n         self._test_gettxoutsetinfo()\n@@ -169,7 +173,7 @@ def _test_gettxoutsetinfo(self):\n         assert_equal(res['transactions'], 200)\n         assert_equal(res['height'], 200)\n         assert_equal(res['txouts'], 200)\n-        assert_equal(res['bogosize'], 17000),\n+        assert_equal(res['bogosize'], 15000),\n         assert_equal(res['bestblock'], node.getblockhash(200))\n         size = res['disk_size']\n         assert size > 6400"
      },
      {
        "sha": "3cc35a7b9a4e01978d00681ec20d707cfcb4e4a6",
        "filename": "test/functional/rpc_createmultisig.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_createmultisig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_createmultisig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_createmultisig.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -12,8 +12,11 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def get_keys(self):\n-        node0,node1,node2 = self.nodes\n+        node0, node1, node2 = self.nodes\n         self.add = [node1.getnewaddress() for _ in range(self.nkeys)]\n         self.pub = [node1.getaddressinfo(a)[\"pubkey\"] for a in self.add]\n         self.priv = [node1.dumpprivkey(a) for a in self.add]"
      },
      {
        "sha": "cd6e5511c4a596fd0efed495eb182d16dc4f66fc",
        "filename": "test/functional/rpc_deprecated.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_deprecated.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_deprecated.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_deprecated.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -12,6 +12,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.extra_args = [[], [\"-deprecatedrpc=validateaddress\", \"-deprecatedrpc=accounts\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # This test should be used to verify correct behaviour of deprecated\n         # RPC methods with and without the -deprecatedrpc flags. For example:"
      },
      {
        "sha": "daa890ab15620eadecd95369bad549a31b31aa82",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -29,6 +29,9 @@ def set_test_params(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self, split=False):\n         self.setup_nodes()\n "
      },
      {
        "sha": "bc19c60dde0834ad7ade58015e7cf5ae28fd7a21",
        "filename": "test/functional/rpc_getchaintips.py",
        "status": "modified",
        "additions": 10,
        "deletions": 7,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_getchaintips.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_getchaintips.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_getchaintips.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -17,15 +17,18 @@ class GetChainTipsTest (BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n \n-    def run_test (self):\n-        tips = self.nodes[0].getchaintips ()\n-        assert_equal (len (tips), 1)\n-        assert_equal (tips[0]['branchlen'], 0)\n-        assert_equal (tips[0]['height'], 200)\n-        assert_equal (tips[0]['status'], 'active')\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        tips = self.nodes[0].getchaintips()\n+        assert_equal(len(tips), 1)\n+        assert_equal(tips[0]['branchlen'], 0)\n+        assert_equal(tips[0]['height'], 200)\n+        assert_equal(tips[0]['status'], 'active')\n \n         # Split the network and build two chains of different lengths.\n-        self.split_network ()\n+        self.split_network()\n         self.nodes[0].generate(10)\n         self.nodes[2].generate(20)\n         self.sync_all([self.nodes[:2], self.nodes[2:]])"
      },
      {
        "sha": "be096af892c3375b6fbc3765409b00adbf62ca72",
        "filename": "test/functional/rpc_help.py",
        "status": "added",
        "additions": 42,
        "deletions": 0,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_help.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_help.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_help.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -0,0 +1,42 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test RPC help output.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+\n+\n+class HelpRpcTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+\n+        # wrong argument count\n+        assert_raises_rpc_error(-1, 'help', node.help, 'foo', 'bar')\n+\n+        # invalid argument\n+        assert_raises_rpc_error(-1, 'JSON value is not a string as expected', node.help, 0)\n+\n+        # help of unknown command\n+        assert_equal(node.help('foo'), 'help: unknown command: foo')\n+\n+        # command titles\n+        titles = [line[3:-3] for line in node.help().splitlines() if line.startswith('==')]\n+\n+        components = ['Blockchain', 'Control', 'Generating', 'Mining', 'Network', 'Rawtransactions', 'Util']\n+\n+        if self.is_wallet_compiled():\n+            components.append('Wallet')\n+\n+        if self.is_zmq_compiled():\n+            components.append('Zmq')\n+\n+        assert_equal(titles, components)\n+\n+\n+if __name__ == '__main__':\n+    HelpRpcTest().main()"
      },
      {
        "sha": "84f7cd05fb403f8887f8164f89280b6267332385",
        "filename": "test/functional/rpc_invalidateblock.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_invalidateblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_invalidateblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_invalidateblock.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -14,6 +14,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.setup_nodes()\n "
      },
      {
        "sha": "f383b82bb5e67c00a4fbae556f01efe9be875a56",
        "filename": "test/functional/rpc_preciousblock.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_preciousblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_preciousblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_preciousblock.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -38,6 +38,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.setup_nodes()\n "
      },
      {
        "sha": "7f2c0c1bd4d04db4aaf0d056d6588dd73eb1fdc4",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -20,6 +20,9 @@ def set_test_params(self):\n         self.setup_clean_chain = False\n         self.num_nodes = 3\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # Create and fund a raw tx for sending 10 BTC\n         psbtx1 = self.nodes[0].walletcreatefundedpsbt([], {self.nodes[2].getnewaddress():10})['psbt']"
      },
      {
        "sha": "d86b546c7d14c5f3806ae07e7c5eee5e91c89b25",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -44,6 +44,9 @@ def set_test_params(self):\n         self.num_nodes = 3\n         self.extra_args = [[\"-addresstype=legacy\"], [\"-addresstype=legacy\"], [\"-addresstype=legacy\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self, split=False):\n         super().setup_network()\n         connect_nodes_bi(self.nodes, 0, 2)\n@@ -358,7 +361,7 @@ def run_test(self):\n \n         # decoderawtransaction tests\n         # witness transaction\n-        encrawtx = \"010000000001010000000000000072c1a6a246ae63f74f931e8365e15a089c68d61900000000000000000000ffffffff0100e1f50500000000000000000000\"\n+        encrawtx = \"010000000001010000000000000072c1a6a246ae63f74f931e8365e15a089c68d61900000000000000000000ffffffff0100e1f50500000000000102616100000000\"\n         decrawtx = self.nodes[0].decoderawtransaction(encrawtx, True) # decode as witness transaction\n         assert_equal(decrawtx['vout'][0]['value'], Decimal('1.00000000'))\n         assert_raises_rpc_error(-22, 'TX decode failed', self.nodes[0].decoderawtransaction, encrawtx, False) # force decode as non-witness transaction"
      },
      {
        "sha": "96f9ccdbdbce1c7278033b2793b5838398f08156",
        "filename": "test/functional/rpc_scantxoutset.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_scantxoutset.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_scantxoutset.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_scantxoutset.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -14,6 +14,10 @@ class ScantxoutsetTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.log.info(\"Mining blocks...\")\n         self.nodes[0].generate(110)"
      },
      {
        "sha": "ad0e29b4515633c660745d8e00eb37ac062a48a0",
        "filename": "test/functional/rpc_signmessage.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_signmessage.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_signmessage.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signmessage.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -13,6 +13,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [[\"-addresstype=legacy\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         message = 'This is just a test message'\n "
      },
      {
        "sha": "035f10e6bcdcf9d5e360a94895177ce9e32dfa26",
        "filename": "test/functional/rpc_signrawtransaction.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_signrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_signrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signrawtransaction.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -14,6 +14,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [[\"-deprecatedrpc=signrawtransaction\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def successful_signing_test(self):\n         \"\"\"Create and sign a valid raw transaction with one input.\n "
      },
      {
        "sha": "867ba25022a6766b2ed6606c8426f40780a7941b",
        "filename": "test/functional/rpc_txoutproof.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_txoutproof.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_txoutproof.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_txoutproof.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -15,6 +15,9 @@ def set_test_params(self):\n         # Nodes 0/1 are \"wallet\" nodes, Nodes 2/3 are used for testing\n         self.extra_args = [[], [], [], [\"-txindex\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.setup_nodes()\n         connect_nodes(self.nodes[0], 1)"
      },
      {
        "sha": "bfa6b06f67f2e264fa9dad7eca8f57114f308795",
        "filename": "test/functional/rpc_zmq.py",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_zmq.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_zmq.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_zmq.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -4,8 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test for the ZMQ RPC methods.\"\"\"\n \n-from test_framework.test_framework import (\n-    BitcoinTestFramework, skip_if_no_py3_zmq, skip_if_no_bitcoind_zmq)\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n \n \n@@ -17,9 +16,11 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_py3_zmq()\n+        self.skip_if_no_bitcoind_zmq()\n+\n     def run_test(self):\n-        skip_if_no_py3_zmq()\n-        skip_if_no_bitcoind_zmq(self)\n         self._test_getzmqnotifications()\n \n     def _test_getzmqnotifications(self):"
      },
      {
        "sha": "034e83aaae643ead1fb91a84531fd41265844ec1",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -482,7 +482,7 @@ def on_reject(self, message):\n         self.reject_code_received = message.code\n         self.reject_reason_received = message.reason\n \n-    def send_blocks_and_test(self, blocks, rpc, success=True, request_block=True, reject_code=None, reject_reason=None, timeout=60):\n+    def send_blocks_and_test(self, blocks, node, *, success=True, request_block=True, reject_code=None, reject_reason=None, timeout=60):\n         \"\"\"Send blocks to test node and test whether the tip advances.\n \n          - add all blocks to our block_store\n@@ -508,16 +508,16 @@ def send_blocks_and_test(self, blocks, rpc, success=True, request_block=True, re\n             wait_until(lambda: blocks[-1].sha256 in self.getdata_requests, timeout=timeout, lock=mininode_lock)\n \n         if success:\n-            wait_until(lambda: rpc.getbestblockhash() == blocks[-1].hash, timeout=timeout)\n+            wait_until(lambda: node.getbestblockhash() == blocks[-1].hash, timeout=timeout)\n         else:\n-            assert rpc.getbestblockhash() != blocks[-1].hash\n+            assert node.getbestblockhash() != blocks[-1].hash\n \n         if reject_code is not None:\n             wait_until(lambda: self.reject_code_received == reject_code, lock=mininode_lock)\n         if reject_reason is not None:\n             wait_until(lambda: self.reject_reason_received == reject_reason, lock=mininode_lock)\n \n-    def send_txs_and_test(self, txs, rpc, success=True, expect_disconnect=False, reject_code=None, reject_reason=None):\n+    def send_txs_and_test(self, txs, node, *, success=True, expect_disconnect=False, reject_code=None, reject_reason=None):\n         \"\"\"Send txs to test node and test whether they're accepted to the mempool.\n \n          - add all txs to our tx_store\n@@ -541,7 +541,7 @@ def send_txs_and_test(self, txs, rpc, success=True, expect_disconnect=False, rej\n         else:\n             self.sync_with_ping()\n \n-        raw_mempool = rpc.getrawmempool()\n+        raw_mempool = node.getrawmempool()\n         if success:\n             # Check that all txs are now in the mempool\n             for tx in txs:"
      },
      {
        "sha": "57c985b2a2f1972236bf89f122c1fb5772fd5051",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 67,
        "deletions": 20,
        "changes": 87,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -44,6 +44,13 @@ class TestStatus(Enum):\n TEST_EXIT_SKIPPED = 77\n \n \n+class SkipTest(Exception):\n+    \"\"\"This exception is raised to skip a test\"\"\"\n+\n+    def __init__(self, message):\n+        self.message = message\n+\n+\n class BitcoinTestMetaClass(type):\n     \"\"\"Metaclass for BitcoinTestFramework.\n \n@@ -156,8 +163,10 @@ def main(self):\n         try:\n             if self.options.usecli and not self.supports_cli:\n                 raise SkipTest(\"--usecli specified but test does not support using CLI\")\n+            self.skip_test_if_missing_module()\n             self.setup_chain()\n             self.setup_network()\n+            self.import_deterministic_coinbase_privkeys()\n             self.run_test()\n             success = TestStatus.PASSED\n         except JSONRPCException as e:\n@@ -220,6 +229,10 @@ def add_options(self, parser):\n         \"\"\"Override this method to add command-line options to the test\"\"\"\n         pass\n \n+    def skip_test_if_missing_module(self):\n+        \"\"\"Override this method to skip a test if a module is not compiled\"\"\"\n+        pass\n+\n     def setup_chain(self):\n         \"\"\"Override this method to customize blockchain setup\"\"\"\n         self.log.info(\"Initializing test directory \" + self.options.tmpdir)\n@@ -247,6 +260,19 @@ def setup_nodes(self):\n         self.add_nodes(self.num_nodes, extra_args)\n         self.start_nodes()\n \n+    def import_deterministic_coinbase_privkeys(self):\n+        if self.setup_clean_chain:\n+            return\n+\n+        for n in self.nodes:\n+            try:\n+                n.getwalletinfo()\n+            except JSONRPCException as e:\n+                assert str(e).startswith('Method not found')\n+                continue\n+\n+            n.importprivkey(n.get_deterministic_priv_key()[1])\n+\n     def run_test(self):\n         \"\"\"Tests must override this method to define test logic\"\"\"\n         raise NotImplementedError\n@@ -415,7 +441,7 @@ def _initialize_chain(self):\n             # Create cache directories, run bitcoinds:\n             for i in range(MAX_NODES):\n                 datadir = initialize_datadir(self.options.cachedir, i)\n-                args = [self.options.bitcoind, \"-datadir=\" + datadir]\n+                args = [self.options.bitcoind, \"-datadir=\" + datadir, '-disablewallet']\n                 if i > 0:\n                     args.append(\"-connect=127.0.0.1:\" + str(p2p_port(0)))\n                 self.nodes.append(TestNode(i, get_datadir_path(self.options.cachedir, i), extra_conf=[\"bind=127.0.0.1\"], extra_args=[], rpchost=None, timewait=self.rpc_timewait, bitcoind=self.options.bitcoind, bitcoin_cli=self.options.bitcoincli, mocktime=self.mocktime, coverage_dir=None))\n@@ -439,7 +465,7 @@ def _initialize_chain(self):\n                 for peer in range(4):\n                     for j in range(25):\n                         set_node_times(self.nodes, block_time)\n-                        self.nodes[peer].generate(1)\n+                        self.nodes[peer].generatetoaddress(1, self.nodes[peer].get_deterministic_priv_key()[0])\n                         block_time += 10 * 60\n                     # Must sync before next peer starts generating blocks\n                     sync_blocks(self.nodes)\n@@ -453,8 +479,9 @@ def cache_path(n, *paths):\n                 return os.path.join(get_datadir_path(self.options.cachedir, n), \"regtest\", *paths)\n \n             for i in range(MAX_NODES):\n+                os.rmdir(cache_path(i, 'wallets'))  # Remove empty wallets dir\n                 for entry in os.listdir(cache_path(i)):\n-                    if entry not in ['wallets', 'chainstate', 'blocks']:\n+                    if entry not in ['chainstate', 'blocks']:\n                         os.remove(cache_path(i, entry))\n \n         for i in range(self.num_nodes):\n@@ -471,25 +498,45 @@ def _initialize_chain_clean(self):\n         for i in range(self.num_nodes):\n             initialize_datadir(self.options.tmpdir, i)\n \n+    def skip_if_no_py3_zmq(self):\n+        \"\"\"Attempt to import the zmq package and skip the test if the import fails.\"\"\"\n+        try:\n+            import zmq  # noqa\n+        except ImportError:\n+            raise SkipTest(\"python3-zmq module not available.\")\n+\n+    def skip_if_no_bitcoind_zmq(self):\n+        \"\"\"Skip the running test if bitcoind has not been compiled with zmq support.\"\"\"\n+        if not self.is_zmq_compiled():\n+            raise SkipTest(\"bitcoind has not been built with zmq enabled.\")\n+\n+    def skip_if_no_wallet(self):\n+        \"\"\"Skip the running test if wallet has not been compiled.\"\"\"\n+        if not self.is_wallet_compiled():\n+            raise SkipTest(\"wallet has not been compiled.\")\n+\n+    def skip_if_no_cli(self):\n+        \"\"\"Skip the running test if bitcoin-cli has not been compiled.\"\"\"\n+        if not self.is_cli_compiled():\n+            raise SkipTest(\"bitcoin-cli has not been compiled.\")\n+\n+    def is_cli_compiled(self):\n+        \"\"\"Checks whether bitcoin-cli was compiled.\"\"\"\n+        config = configparser.ConfigParser()\n+        config.read_file(open(self.options.configfile))\n \n-class SkipTest(Exception):\n-    \"\"\"This exception is raised to skip a test\"\"\"\n-    def __init__(self, message):\n-        self.message = message\n-\n+        return config[\"components\"].getboolean(\"ENABLE_UTILS\")\n \n-def skip_if_no_py3_zmq():\n-    \"\"\"Attempt to import the zmq package and skip the test if the import fails.\"\"\"\n-    try:\n-        import zmq  # noqa\n-    except ImportError:\n-        raise SkipTest(\"python3-zmq module not available.\")\n+    def is_wallet_compiled(self):\n+        \"\"\"Checks whether the wallet module was compiled.\"\"\"\n+        config = configparser.ConfigParser()\n+        config.read_file(open(self.options.configfile))\n \n+        return config[\"components\"].getboolean(\"ENABLE_WALLET\")\n \n-def skip_if_no_bitcoind_zmq(test_instance):\n-    \"\"\"Skip the running test if bitcoind has not been compiled with zmq support.\"\"\"\n-    config = configparser.ConfigParser()\n-    config.read_file(open(test_instance.options.configfile))\n+    def is_zmq_compiled(self):\n+        \"\"\"Checks whether the zmq module was compiled.\"\"\"\n+        config = configparser.ConfigParser()\n+        config.read_file(open(self.options.configfile))\n \n-    if not config[\"components\"].getboolean(\"ENABLE_ZMQ\"):\n-        raise SkipTest(\"bitcoind has not been built with zmq enabled.\")\n+        return config[\"components\"].getboolean(\"ENABLE_ZMQ\")"
      },
      {
        "sha": "908dda94c579076cfffa2759e5669cc7f730c63c",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -4,6 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Class for bitcoind node under test\"\"\"\n \n+import contextlib\n import decimal\n import errno\n from enum import Enum\n@@ -96,6 +97,22 @@ def __init__(self, i, datadir, *, rpchost, timewait, bitcoind, bitcoin_cli, mock\n \n         self.p2ps = []\n \n+    def get_deterministic_priv_key(self):\n+        \"\"\"Return a deterministic priv key in base58, that only depends on the node's index\"\"\"\n+        PRIV_KEYS = [\n+            # adress , privkey\n+            ('mjTkW3DjgyZck4KbiRusZsqTgaYTxdSz6z', 'cVpF924EspNh8KjYsfhgY96mmxvT6DgdWiTYMtMjuM74hJaU5psW'),\n+            ('msX6jQXvxiNhx3Q62PKeLPrhrqZQdSimTg', 'cUxsWyKyZ9MAQTaAhUQWJmBbSvHMwSmuv59KgxQV7oZQU3PXN3KE'),\n+            ('mnonCMyH9TmAsSj3M59DsbH8H63U3RKoFP', 'cTrh7dkEAeJd6b3MRX9bZK8eRmNqVCMH3LSUkE3dSFDyzjU38QxK'),\n+            ('mqJupas8Dt2uestQDvV2NH3RU8uZh2dqQR', 'cVuKKa7gbehEQvVq717hYcbE9Dqmq7KEBKqWgWrYBa2CKKrhtRim'),\n+            ('msYac7Rvd5ywm6pEmkjyxhbCDKqWsVeYws', 'cQDCBuKcjanpXDpCqacNSjYfxeQj8G6CAtH1Dsk3cXyqLNC4RPuh'),\n+            ('n2rnuUnwLgXqf9kk2kjvVm8R5BZK1yxQBi', 'cQakmfPSLSqKHyMFGwAqKHgWUiofJCagVGhiB4KCainaeCSxeyYq'),\n+            ('myzuPxRwsf3vvGzEuzPfK9Nf2RfwauwYe6', 'cQMpDLJwA8DBe9NcQbdoSb1BhmFxVjWD5gRyrLZCtpuF9Zi3a9RK'),\n+            ('mumwTaMtbxEPUswmLBBN3vM9oGRtGBrys8', 'cSXmRKXVcoouhNNVpcNKFfxsTsToY5pvB9DVsFksF1ENunTzRKsy'),\n+            ('mpV7aGShMkJCZgbW7F6iZgrvuPHjZjH9qg', 'cSoXt6tm3pqy43UMabY6eUTmR3eSUYFtB2iNQDGgb3VUnRsQys2k'),\n+        ]\n+        return PRIV_KEYS[self.index]\n+\n     def _node_msg(self, msg: str) -> str:\n         \"\"\"Return a modified msg that identifies this node by its index as a debugging aid.\"\"\"\n         return \"[node %d] %s\" % (self.index, msg)\n@@ -229,6 +246,23 @@ def is_node_stopped(self):\n     def wait_until_stopped(self, timeout=BITCOIND_PROC_WAIT_TIMEOUT):\n         wait_until(self.is_node_stopped, timeout=timeout)\n \n+    @contextlib.contextmanager\n+    def assert_debug_log(self, expected_msgs):\n+        debug_log = os.path.join(self.datadir, 'regtest', 'debug.log')\n+        with open(debug_log, encoding='utf-8') as dl:\n+            dl.seek(0, 2)\n+            prev_size = dl.tell()\n+        try:\n+            yield\n+        finally:\n+            with open(debug_log, encoding='utf-8') as dl:\n+                dl.seek(prev_size)\n+                log = dl.read()\n+            print_log = \" - \" + \"\\n - \".join(log.splitlines())\n+            for expected_msg in expected_msgs:\n+                if re.search(re.escape(expected_msg), log, flags=re.MULTILINE) is None:\n+                    self._raise_assertion_error('Expected message \"{}\" does not partially match log:\\n\\n{}\\n\\n'.format(expected_msg, print_log))\n+\n     def assert_start_raises_init_error(self, extra_args=None, expected_msg=None, match=ErrorMatch.FULL_TEXT, *args, **kwargs):\n         \"\"\"Attempt to start the node and expect it to raise an error.\n "
      },
      {
        "sha": "37b378e9ca87477a0a120f9031b5998569be4437",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -152,6 +152,7 @@\n     'p2p_node_network_limited.py',\n     'feature_blocksdir.py',\n     'feature_config_args.py',\n+    'rpc_help.py',\n     'feature_help.py',\n     # Don't append tests at the end to avoid merge conflicts\n     # Put them in a random line within the section that fits their approximate run-time\n@@ -235,8 +236,6 @@ def main():\n \n     logging.debug(\"Temporary test directory at %s\" % tmpdir)\n \n-    enable_wallet = config[\"components\"].getboolean(\"ENABLE_WALLET\")\n-    enable_utils = config[\"components\"].getboolean(\"ENABLE_UTILS\")\n     enable_bitcoind = config[\"components\"].getboolean(\"ENABLE_BITCOIND\")\n \n     if config[\"environment\"][\"EXEEXT\"] == \".exe\" and not args.force:\n@@ -245,9 +244,9 @@ def main():\n         print(\"Tests currently disabled on Windows by default. Use --force option to enable\")\n         sys.exit(0)\n \n-    if not (enable_wallet and enable_utils and enable_bitcoind):\n-        print(\"No functional tests to run. Wallet, utils, and bitcoind must all be enabled\")\n-        print(\"Rerun `configure` with -enable-wallet, -with-utils and -with-daemon and rerun make\")\n+    if not enable_bitcoind:\n+        print(\"No functional tests to run.\")\n+        print(\"Rerun ./configure with --with-daemon and then make\")\n         sys.exit(0)\n \n     # Build list of tests"
      },
      {
        "sha": "e5ac2c8bd45971c5673d765f84dd5620e03666fc",
        "filename": "test/functional/wallet_abandonconflict.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_abandonconflict.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -20,6 +20,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[\"-minrelaytxfee=0.00001\"], []]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.nodes[1].generate(100)\n         sync_blocks(self.nodes)"
      },
      {
        "sha": "9b398ef346c510a87e842e4687d79a1eed9a4fb6",
        "filename": "test/functional/wallet_address_types.py",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_address_types.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_address_types.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_address_types.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -63,6 +63,7 @@\n     sync_mempools,\n )\n \n+\n class AddressTypeTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 6\n@@ -72,9 +73,12 @@ def set_test_params(self):\n             [\"-addresstype=p2sh-segwit\", \"-changetype=bech32\"],\n             [\"-addresstype=bech32\"],\n             [\"-changetype=p2sh-segwit\"],\n-            []\n+            [],\n         ]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.setup_nodes()\n "
      },
      {
        "sha": "32ec385fa1264c0df62fb64d0d274048acacaf0a",
        "filename": "test/functional/wallet_backup.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_backup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_backup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_backup.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -45,6 +45,9 @@ def set_test_params(self):\n         # nodes 1, 2,3 are spenders, let's give them a keypool=100\n         self.extra_args = [[\"-keypool=100\"], [\"-keypool=100\"], [\"-keypool=100\"], []]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self, split=False):\n         self.setup_nodes()\n         connect_nodes(self.nodes[0], 3)"
      },
      {
        "sha": "4079d054914b637d998a076d33d7e84e53242f99",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -23,6 +23,9 @@ def set_test_params(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.add_nodes(4)\n         self.start_node(0)"
      },
      {
        "sha": "b9fe6c66c5096fcdda378999ca95ab67ec223818",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -31,8 +31,13 @@ class BumpFeeTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n-        self.extra_args = [[\"-deprecatedrpc=addwitnessaddress\", \"-walletrbf={}\".format(i)]\n-                           for i in range(self.num_nodes)]\n+        self.extra_args = [[\n+            \"-deprecatedrpc=addwitnessaddress\",\n+            \"-walletrbf={}\".format(i),\n+        ] for i in range(self.num_nodes)]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n \n     def run_test(self):\n         # Encrypt wallet for test_locked_wallet_fails test"
      },
      {
        "sha": "34ff52525579b55710370dfe49df6e011ddce928",
        "filename": "test/functional/wallet_disableprivatekeys.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_disableprivatekeys.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_disableprivatekeys.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_disableprivatekeys.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -17,6 +17,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.supports_cli = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         node = self.nodes[0]\n         self.log.info(\"Test disableprivatekeys creation.\")"
      },
      {
        "sha": "db731b2a346227a22b77d70ca7435ccc6403dc24",
        "filename": "test/functional/wallet_dump.py",
        "status": "modified",
        "additions": 55,
        "deletions": 48,
        "changes": 103,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_dump.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -29,50 +29,54 @@ def read_dump(file_name, addrs, script_addrs, hd_master_addr_old):\n             # only read non comment lines\n             if line[0] != \"#\" and len(line) > 10:\n                 # split out some data\n-                key_label, comment = line.split(\"#\")\n-                # key = key_label.split(\" \")[0]\n-                keytype = key_label.split(\" \")[2]\n-                if len(comment) > 1:\n-                    addr_keypath = comment.split(\" addr=\")[1]\n-                    addr = addr_keypath.split(\" \")[0]\n+                key_date_label, comment = line.split(\"#\")\n+                key_date_label = key_date_label.split(\" \")\n+                # key = key_date_label[0]\n+                date = key_date_label[1]\n+                keytype = key_date_label[2]\n+                if not len(comment) or date.startswith('1970'):\n+                    continue\n+\n+                addr_keypath = comment.split(\" addr=\")[1]\n+                addr = addr_keypath.split(\" \")[0]\n+                keypath = None\n+                if keytype == \"inactivehdseed=1\":\n+                    # ensure the old master is still available\n+                    assert (hd_master_addr_old == addr)\n+                elif keytype == \"hdseed=1\":\n+                    # ensure we have generated a new hd master key\n+                    assert (hd_master_addr_old != addr)\n+                    hd_master_addr_ret = addr\n+                elif keytype == \"script=1\":\n+                    # scripts don't have keypaths\n                     keypath = None\n-                    if keytype == \"inactivehdseed=1\":\n-                        # ensure the old master is still available\n-                        assert(hd_master_addr_old == addr)\n-                    elif keytype == \"hdseed=1\":\n-                        # ensure we have generated a new hd master key\n-                        assert(hd_master_addr_old != addr)\n-                        hd_master_addr_ret = addr\n-                    elif keytype == \"script=1\":\n-                        # scripts don't have keypaths\n-                        keypath = None\n-                    else:\n-                        keypath = addr_keypath.rstrip().split(\"hdkeypath=\")[1]\n-\n-                    # count key types\n-                    for addrObj in addrs:\n-                        if addrObj['address'] == addr.split(\",\")[0] and addrObj['hdkeypath'] == keypath and keytype == \"label=\":\n-                            # a labeled entry in the wallet should contain both a native address\n-                            # and the p2sh-p2wpkh address that was added at wallet setup\n-                            if len(addr.split(\",\")) == 2:\n-                                addr_list = addr.split(\",\")\n-                                # the entry should be of the first key in the wallet\n-                                assert_equal(addrs[0]['address'], addr_list[0])\n-                                witness_addr_ret = addr_list[1]\n-                            found_addr += 1\n-                            break\n-                        elif keytype == \"change=1\":\n-                            found_addr_chg += 1\n-                            break\n-                        elif keytype == \"reserve=1\":\n-                            found_addr_rsv += 1\n-                            break\n-\n-                    # count scripts\n-                    for script_addr in script_addrs:\n-                        if script_addr == addr.rstrip() and keytype == \"script=1\":\n-                            found_script_addr += 1\n-                            break\n+                else:\n+                    keypath = addr_keypath.rstrip().split(\"hdkeypath=\")[1]\n+\n+                # count key types\n+                for addrObj in addrs:\n+                    if addrObj['address'] == addr.split(\",\")[0] and addrObj['hdkeypath'] == keypath and keytype == \"label=\":\n+                        # a labeled entry in the wallet should contain both a native address\n+                        # and the p2sh-p2wpkh address that was added at wallet setup\n+                        if len(addr.split(\",\")) == 2:\n+                            addr_list = addr.split(\",\")\n+                            # the entry should be of the first key in the wallet\n+                            assert_equal(addrs[0]['address'], addr_list[0])\n+                            witness_addr_ret = addr_list[1]\n+                        found_addr += 1\n+                        break\n+                    elif keytype == \"change=1\":\n+                        found_addr_chg += 1\n+                        break\n+                    elif keytype == \"reserve=1\":\n+                        found_addr_rsv += 1\n+                        break\n+\n+                # count scripts\n+                for script_addr in script_addrs:\n+                    if script_addr == addr.rstrip() and keytype == \"script=1\":\n+                        found_script_addr += 1\n+                        break\n \n         return found_addr, found_script_addr, found_addr_chg, found_addr_rsv, hd_master_addr_ret, witness_addr_ret\n \n@@ -83,6 +87,9 @@ def set_test_params(self):\n         self.extra_args = [[\"-keypool=90\", \"-addresstype=legacy\", \"-deprecatedrpc=addwitnessaddress\"]]\n         self.rpc_timeout = 120\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self, split=False):\n         self.add_nodes(self.num_nodes, extra_args=self.extra_args)\n         self.start_nodes()\n@@ -116,9 +123,9 @@ def run_test(self):\n             read_dump(wallet_unenc_dump, addrs, script_addrs, None)\n         assert_equal(found_addr, test_addr_count)  # all keys must be in the dump\n         assert_equal(found_script_addr, 2)  # all scripts must be in the dump\n-        assert_equal(found_addr_chg, 50)  # 50 blocks where mined\n-        assert_equal(found_addr_rsv, 90*2) # 90 keys plus 100% internal keys\n-        assert_equal(witness_addr_ret, witness_addr) # p2sh-p2wsh address added to the first key\n+        assert_equal(found_addr_chg, 0)  # 0 blocks where mined\n+        assert_equal(found_addr_rsv, 90 * 2)  # 90 keys plus 100% internal keys\n+        assert_equal(witness_addr_ret, witness_addr)  # p2sh-p2wsh address added to the first key\n \n         #encrypt wallet, restart, unlock and dump\n         self.nodes[0].node_encrypt_wallet('test')\n@@ -132,8 +139,8 @@ def run_test(self):\n             read_dump(wallet_enc_dump, addrs, script_addrs, hd_master_addr_unenc)\n         assert_equal(found_addr, test_addr_count)\n         assert_equal(found_script_addr, 2)\n-        assert_equal(found_addr_chg, 90*2 + 50)  # old reserve keys are marked as change now\n-        assert_equal(found_addr_rsv, 90*2)\n+        assert_equal(found_addr_chg, 90 * 2)  # old reserve keys are marked as change now\n+        assert_equal(found_addr_rsv, 90 * 2)\n         assert_equal(witness_addr_ret, witness_addr)\n \n         # Overwriting should fail"
      },
      {
        "sha": "d8c27b09d96e643624b948b386e1d157c9a75d41",
        "filename": "test/functional/wallet_encryption.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_encryption.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_encryption.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_encryption.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -19,6 +19,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         passphrase = \"WalletPassphrase\"\n         passphrase2 = \"SecondWalletPassphrase\""
      },
      {
        "sha": "0c67982bbeb2930bdd0b3afd1796deb269baae63",
        "filename": "test/functional/wallet_fallbackfee.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_fallbackfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_fallbackfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_fallbackfee.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -11,6 +11,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.nodes[0].generate(101)\n "
      },
      {
        "sha": "9d61483868819137a0e8091e0c0ca298e6cad0b4",
        "filename": "test/functional/wallet_groups.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_groups.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_groups.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_groups.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -23,7 +23,10 @@ def set_test_params(self):\n         self.extra_args = [[], [], ['-avoidpartialspends']]\n         self.rpc_timewait = 120\n \n-    def run_test (self):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n         # Mine some coins\n         self.nodes[0].generate(110)\n "
      },
      {
        "sha": "48e71f6c40baf22d8062b16c9c471b3c08136981",
        "filename": "test/functional/wallet_hd.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_hd.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -21,6 +21,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[], ['-keypool=0']]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # Make sure can't switch off usehd after wallet creation\n         self.stop_node(1)"
      },
      {
        "sha": "aa4e37ed602ca659ed04a92ab15af3440d3885b3",
        "filename": "test/functional/wallet_import_rescan.py",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_import_rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_import_rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_import_rescan.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -109,17 +109,29 @@ class ImportRescanTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2 + len(IMPORT_NODES)\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         extra_args = [[\"-addresstype=legacy\"] for _ in range(self.num_nodes)]\n         for i, import_node in enumerate(IMPORT_NODES, 2):\n             if import_node.prune:\n                 extra_args[i] += [\"-prune=1\"]\n \n         self.add_nodes(self.num_nodes, extra_args=extra_args)\n+\n+        # Import keys\n+        self.start_nodes(extra_args=[[]] * self.num_nodes)\n+        super().import_deterministic_coinbase_privkeys()\n+        self.stop_nodes()\n+\n         self.start_nodes()\n         for i in range(1, self.num_nodes):\n             connect_nodes(self.nodes[i], 0)\n \n+    def import_deterministic_coinbase_privkeys(self):\n+        pass\n+\n     def run_test(self):\n         # Create one transaction on node 0 with a unique amount for\n         # each possible type of wallet import RPC."
      },
      {
        "sha": "3dd296d603fcaacb732fdc6fc0b59751425e2cb9",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -12,6 +12,9 @@ def set_test_params(self):\n         self.extra_args = [[\"-addresstype=legacy\"], [\"-addresstype=legacy\"]]\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.setup_nodes()\n "
      },
      {
        "sha": "26b181db339b5a5daec285510d96929aba9a08e9",
        "filename": "test/functional/wallet_importprunedfunds.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_importprunedfunds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_importprunedfunds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importprunedfunds.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -16,6 +16,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.log.info(\"Mining blocks...\")\n         self.nodes[0].generate(101)"
      },
      {
        "sha": "acc336e4d5f78080121f8d544b120b476191848a",
        "filename": "test/functional/wallet_keypool.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -13,6 +13,9 @@ class KeyPoolTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         nodes = self.nodes\n         addr_before_encrypting = nodes[0].getnewaddress()"
      },
      {
        "sha": "f1a441c399733bb3f3f0da0d5f4f4109785722ff",
        "filename": "test/functional/wallet_keypool_topup.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_keypool_topup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_keypool_topup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool_topup.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -27,6 +27,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[], ['-keypool=100']]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         wallet_path = os.path.join(self.nodes[1].datadir, \"regtest\", \"wallets\", \"wallet.dat\")\n         wallet_backup_path = os.path.join(self.nodes[1].datadir, \"wallet.bak\")"
      },
      {
        "sha": "6f9123a0892acebdbcec0f221e36d07aecd76365",
        "filename": "test/functional/wallet_labels.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_labels.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_labels.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_labels.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -30,6 +30,9 @@ def setup_network(self):\n         \"\"\"Don't connect nodes.\"\"\"\n         self.setup_nodes()\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         \"\"\"Run the test twice - once using the accounts API and once using the labels API.\"\"\"\n         self.log.info(\"Test accounts API\")"
      },
      {
        "sha": "3485c4470f6b2a42de323785d5c4ff5b5c956568",
        "filename": "test/functional/wallet_listreceivedby.py",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_listreceivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_listreceivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listreceivedby.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -18,6 +18,14 @@ class ReceivedByTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n \n+    def import_deterministic_coinbase_privkeys(self):\n+        assert_equal(0, len(self.nodes[1].listreceivedbyaddress(minconf=0, include_empty=True, include_watchonly=True)))\n+        super().import_deterministic_coinbase_privkeys()\n+        self.num_cb_reward_addresses = len(self.nodes[1].listreceivedbyaddress(minconf=0, include_empty=True, include_watchonly=True))\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # Generate block to get out of IBD\n         self.nodes[0].generate(1)\n@@ -64,7 +72,7 @@ def run_test(self):\n         assert_raises_rpc_error(-4, \"address_filter parameter was invalid\", self.nodes[1].listreceivedbyaddress, minconf=0, include_empty=True, include_watchonly=True, address_filter=\"bamboozling\")\n         # Another address receive money\n         res = self.nodes[1].listreceivedbyaddress(0, True, True)\n-        assert_equal(len(res), 2)  # Right now 2 entries\n+        assert_equal(len(res), 2 + self.num_cb_reward_addresses)  # Right now 2 entries\n         other_addr = self.nodes[1].getnewaddress()\n         txid2 = self.nodes[0].sendtoaddress(other_addr, 0.1)\n         self.nodes[0].generate(1)\n@@ -81,7 +89,7 @@ def run_test(self):\n         assert_equal(len(res), 1)\n         # Should be two entries though without filter\n         res = self.nodes[1].listreceivedbyaddress(0, True, True)\n-        assert_equal(len(res), 3)  # Became 3 entries\n+        assert_equal(len(res), 3 + self.num_cb_reward_addresses)  # Became 3 entries\n \n         # Not on random addr\n         other_addr = self.nodes[0].getnewaddress()  # note on node[0]! just a random addr"
      },
      {
        "sha": "53e671cd3b0ac1172a3b5eaba8511ba04e4606d8",
        "filename": "test/functional/wallet_listsinceblock.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_listsinceblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_listsinceblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listsinceblock.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -12,6 +12,9 @@ def set_test_params(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.nodes[2].generate(101)\n         self.sync_all()"
      },
      {
        "sha": "5a17395abdb82dde8f3d9c3d35c5aadea26db49b",
        "filename": "test/functional/wallet_listtransactions.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listtransactions.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -27,6 +27,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.enable_mocktime()\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # Simple send, 0 to 1:\n         txid = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.1)"
      },
      {
        "sha": "435821ec4804d9e4c05e4d2cb4e98c126bf2784f",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -23,6 +23,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.supports_cli = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         node = self.nodes[0]\n "
      },
      {
        "sha": "00bf58d7096597d47aa78405871923b131b65cad",
        "filename": "test/functional/wallet_resendwallettransactions.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_resendwallettransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_resendwallettransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_resendwallettransactions.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -12,6 +12,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [['--walletbroadcast=false']]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # Should raise RPC_WALLET_ERROR (-4) if walletbroadcast is disabled.\n         assert_raises_rpc_error(-4, \"Error: Wallet transaction broadcasting is disabled with -walletbroadcast\", self.nodes[0].resendwallettransactions)"
      },
      {
        "sha": "d78c105c174903e2a290fc5ca94a559047cffd03",
        "filename": "test/functional/wallet_txn_clone.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_clone.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -16,6 +16,9 @@ class TxnMallTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def add_options(self, parser):\n         parser.add_argument(\"--mineblock\", dest=\"mine_block\", default=False, action=\"store_true\",\n                             help=\"Test double-spend of 1-confirmed transaction\")"
      },
      {
        "sha": "f114d5ab688890f352ac14be07086f4e70268eeb",
        "filename": "test/functional/wallet_txn_doublespend.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_doublespend.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -18,6 +18,9 @@ class TxnMallTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def add_options(self, parser):\n         parser.add_argument(\"--mineblock\", dest=\"mine_block\", default=False, action=\"store_true\",\n                             help=\"Test double-spend of 1-confirmed transaction\")"
      },
      {
        "sha": "adebff360a5ae7f6d77801091007f6868fd54829",
        "filename": "test/functional/wallet_zapwallettxes.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_zapwallettxes.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -26,6 +26,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.log.info(\"Mining blocks...\")\n         self.nodes[0].generate(1)"
      }
    ]
  },
  {
    "sha": "9e87d82e7f0696a40d08c6e4cff3f040a447ece5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZTg3ZDgyZTdmMDY5NmE0MGQwOGM2ZTRjZmYzZjA0MGE0NDdlY2U1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-28T10:48:13Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-28T10:48:16Z"
      },
      "message": "Merge #14589: Docs/Release notes: 0.17.0.1 is a minor release\n\nf046d846ae Docs/Release notes: 0.17.0.1 is a minor release (David A. Harding)\n\nPull request description:\n\n  Suggested by @jnewbery in https://github.com/bitcoin-core/bitcoincore.org/pull/624#pullrequestreview-169055865\n\nTree-SHA512: 7e3068febaaf13cc31ef48e56ac7c36450fb1fb115e9940af603bb7cb740e93702e69be0eaaf06ff19866837bf29b4f08c1d9e3e55d98a65746a89a0dcab2b69",
      "tree": {
        "sha": "dba0ebc3e8d9e712de6778af0c9c59e3fac55dca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dba0ebc3e8d9e712de6778af0c9c59e3fac55dca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9e87d82e7f0696a40d08c6e4cff3f040a447ece5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJb1ZPwAAoJENLqSFDnUoslVS0P/iEs3+56M7GE2aXXeoXkqAfA\nzuaYuXny3omlFBY7d5SyL0Epc5p9huINzK7jPzD59/Ykv1LwhC5xIYRrGh+moDhx\nOVzUl7NHY5l5c84wkVHN+MUFTkJyqECxCq0ZC4q+CdYstHYU8tc6DpHK9H0au03u\neYGnEuIrs9lpSu29O8ccVNSC/ygs9qC9/UgNf4bHWeELTkmOvqR+0osDwG1yOeaX\n7sISZWqbDyNFdJ0Vc/FFrvqyFmBgggVhZpu6ICjvmtbXwnVNprKirl/Q1nxKrP58\nyKCygOj9Rke4RPWQhSj7bdwzibFElkPC0hEgWEBk5spMSEc4MHJbU2gSj2XGQLV/\n5sss6gBrsMAT3pd2fThPO8GULNgddbDydiA/l+ELlCJjvwPUyV6l5gx1dPWjdukX\nuZtUhO0arW+pFdrUYjXPbY45tvCmKInBpDGdsIPdMkWAgzQC2TvSQPl5HnVOWw4V\n7Ud1zMyRf05Bnd53a2eo+tGCEW+N1mqHQNAoB9hnkmQ6NS+KCc2Dz8VEUucRspwz\nmsrG+hEy/GLMxiDlGNksmLo1HcPdQ1hUG4FBfme1UnCyGQGxB1YmHkpKGBl3zw8M\ndo76FifxkH6mEUlNW0148ERMdhreW6m/5SZUozt/plgWz3/1h5g/8PQ71hUkrGIR\nkzLU1fi7XSUveqizmw8Y\n=BNEd\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIKGcbxYL9IHdIURdaDIOXhkoIWxbAS00bl8WrVcpZboyCP/wEChha2baMJh+\n1QX1voVDkTII8QRb1ZPy8AhCWXrwgQEFEACD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEE//Nz5HRmc7lmcOpBOL\np6sI8QRb1ZPy8Ahf6DpebGlDvgCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMu\nY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQXchXGKNE9ElRF70eFw0vhAjx\nBFvVk/PwCHKU9/nFXvNlAIPf4w0u+QyOIyJodHRwczovL2J0Yy5jYWxlbmRhci5j\nYXRhbGxheHkuY29t8BCaStVn1XB2BeAx72GJYbp3CPAQbP/RPpA6VXEOLo/iL9xf\nbQjxBFvVk/PwCDe1ngwEB8Q3AIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxl\nbmRhci5ldGVybml0eXdhbGwuY29t\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree dba0ebc3e8d9e712de6778af0c9c59e3fac55dca\nparent 76dd5257f9b5705734481569c39bf115d4cb973d\nparent f046d846aecacd79a83d82903e0b71577529d75c\nauthor MarcoFalke <falke.marco@gmail.com> 1540723693 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1540723696 -0400\n\nMerge #14589: Docs/Release notes: 0.17.0.1 is a minor release\n\nf046d846ae Docs/Release notes: 0.17.0.1 is a minor release (David A. Harding)\n\nPull request description:\n\n  Suggested by @jnewbery in https://github.com/bitcoin-core/bitcoincore.org/pull/624#pullrequestreview-169055865\n\nTree-SHA512: 7e3068febaaf13cc31ef48e56ac7c36450fb1fb115e9940af603bb7cb740e93702e69be0eaaf06ff19866837bf29b4f08c1d9e3e55d98a65746a89a0dcab2b69\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e87d82e7f0696a40d08c6e4cff3f040a447ece5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9e87d82e7f0696a40d08c6e4cff3f040a447ece5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e87d82e7f0696a40d08c6e4cff3f040a447ece5/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "76dd5257f9b5705734481569c39bf115d4cb973d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76dd5257f9b5705734481569c39bf115d4cb973d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/76dd5257f9b5705734481569c39bf115d4cb973d"
      },
      {
        "sha": "f046d846aecacd79a83d82903e0b71577529d75c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f046d846aecacd79a83d82903e0b71577529d75c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f046d846aecacd79a83d82903e0b71577529d75c"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "92db7dac7d7e55ada749f50c2c5737b3ee50ff0e",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e87d82e7f0696a40d08c6e4cff3f040a447ece5/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e87d82e7f0696a40d08c6e4cff3f040a447ece5/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=9e87d82e7f0696a40d08c6e4cff3f040a447ece5",
        "patch": "@@ -2,8 +2,7 @@ Bitcoin Core version 0.17.0.1 is now available from:\n \n   <https://bitcoincore.org/bin/bitcoin-core-0.17.0.1/>\n \n-This is a new major version release, including new features, various bugfixes\n-and performance improvements, as well as updated translations.\n+This release provides a minor bug fix for 0.17.0.\n \n Please report bugs using the issue tracker at GitHub:\n "
      }
    ]
  },
  {
    "sha": "0242b5afa4ebb381d3a59a7246348a50d3a7fdbe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMjQyYjVhZmE0ZWJiMzgxZDNhNTlhNzI0NjM0OGE1MGQzYTdmZGJl",
    "commit": {
      "author": {
        "name": "Tim Ruffing",
        "email": "crypto@timruffing.de",
        "date": "2018-10-05T08:24:52Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-11-06T08:03:28Z"
      },
      "message": "qt: Revert \"Force TLS1.0+ for SSL connections\"\n\nThis reverts commit 15e26a6a9afe299b9ca6fced73b876644365879b, whose\npurpose was to tweak the Qt configuration to force TLS, i.e., to\ndisable SSLv3, in Qt versions >= 5.5. However, the default behavior\nof Qt >= 5.4 is to disable SSLv3 anyway [1], so the configuration\ntweak is redundant.\n\nWith Qt 5.11.2, the configuration tweak is not only redundant but in\nfact provokes a deadlock (#14359) due to Qt 5.11.2 being incompatible\nwith OpenSSL 1.1.1 [2]. Since the deadlock occurs at the early startup\nstage of bitcoin-qt, it renders bitcoin-qt entirely non-functional\nwhen compiled against OpenSSL 1.1.1 and Qt 5.11.2 (and possible future\ncombinations of OpenSSL and Qt versions).\n\nThis commit fixes #14359 by removing the redundant code.\n\n[1] https://code.qt.io/cgit/qt/qtbase.git/commit/?id=3fd2d9eff8c1f948306ee5fbfe364ccded1c4b84\n[2] https://bugreports.qt.io/browse/QTBUG-70956\n\nGithub-Pull: #14403\nRebased-From: 7d173c4cd1885ff5bcf9e5f8f7f712138dd8a445\nTree-SHA512: 71a34b13202c834c5ca73bcb9b70efff26c34e1aac3b954f098620b62c2be53a8e319929c4764a5b5cc5d0dd163ff70f4eb3a4f1f608363b7d23d1b16b25ddc7",
      "tree": {
        "sha": "4d30b2b8cb933ed122b3c0eb5f37e51d7ad1e207",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d30b2b8cb933ed122b3c0eb5f37e51d7ad1e207"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0242b5afa4ebb381d3a59a7246348a50d3a7fdbe",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlvhStAACgkQHkrtYphs\n0l3TPgf9ErkbTIwJ55fqhbJdLYL/tw1TrF8TDCxIiDqeQW/FeJTJwfax0iEPssS9\na2qH9LZjvsJHJFk6h22ejmFoenAXuUSPVHUE+nhZ0z5dAI8LlP897zWD3csJLzOG\ntLH0jQwNpTXKuXk8s85uVKblGwWtMhBgZvIX8+Wgway/PAZwPFOhnfEeGjitCqp6\nPUQcDmD0cVcWoocIuvZXZy10QSEWmqE81j/CEV8v6fkhMwjiXzlC75CQdnryWHDv\nMKxYjVfxegYjInqZYLifVceqmXV7EdeABludosVYbcOn4qyWickfEEmGR5PUkSXb\n+T39spvBVrqXbl4wpYsVs8hdzzcuPw==\n=i41+\n-----END PGP SIGNATURE-----",
        "payload": "tree 4d30b2b8cb933ed122b3c0eb5f37e51d7ad1e207\nparent 9e87d82e7f0696a40d08c6e4cff3f040a447ece5\nauthor Tim Ruffing <crypto@timruffing.de> 1538727892 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1541491408 +0100\n\nqt: Revert \"Force TLS1.0+ for SSL connections\"\n\nThis reverts commit 15e26a6a9afe299b9ca6fced73b876644365879b, whose\npurpose was to tweak the Qt configuration to force TLS, i.e., to\ndisable SSLv3, in Qt versions >= 5.5. However, the default behavior\nof Qt >= 5.4 is to disable SSLv3 anyway [1], so the configuration\ntweak is redundant.\n\nWith Qt 5.11.2, the configuration tweak is not only redundant but in\nfact provokes a deadlock (#14359) due to Qt 5.11.2 being incompatible\nwith OpenSSL 1.1.1 [2]. Since the deadlock occurs at the early startup\nstage of bitcoin-qt, it renders bitcoin-qt entirely non-functional\nwhen compiled against OpenSSL 1.1.1 and Qt 5.11.2 (and possible future\ncombinations of OpenSSL and Qt versions).\n\nThis commit fixes #14359 by removing the redundant code.\n\n[1] https://code.qt.io/cgit/qt/qtbase.git/commit/?id=3fd2d9eff8c1f948306ee5fbfe364ccded1c4b84\n[2] https://bugreports.qt.io/browse/QTBUG-70956\n\nGithub-Pull: #14403\nRebased-From: 7d173c4cd1885ff5bcf9e5f8f7f712138dd8a445\nTree-SHA512: 71a34b13202c834c5ca73bcb9b70efff26c34e1aac3b954f098620b62c2be53a8e319929c4764a5b5cc5d0dd163ff70f4eb3a4f1f608363b7d23d1b16b25ddc7\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0242b5afa4ebb381d3a59a7246348a50d3a7fdbe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0242b5afa4ebb381d3a59a7246348a50d3a7fdbe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0242b5afa4ebb381d3a59a7246348a50d3a7fdbe/comments",
    "author": {
      "login": "real-or-random",
      "id": 1071625,
      "node_id": "MDQ6VXNlcjEwNzE2MjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1071625?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/real-or-random",
      "html_url": "https://github.com/real-or-random",
      "followers_url": "https://api.github.com/users/real-or-random/followers",
      "following_url": "https://api.github.com/users/real-or-random/following{/other_user}",
      "gists_url": "https://api.github.com/users/real-or-random/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/real-or-random/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/real-or-random/subscriptions",
      "organizations_url": "https://api.github.com/users/real-or-random/orgs",
      "repos_url": "https://api.github.com/users/real-or-random/repos",
      "events_url": "https://api.github.com/users/real-or-random/events{/privacy}",
      "received_events_url": "https://api.github.com/users/real-or-random/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9e87d82e7f0696a40d08c6e4cff3f040a447ece5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e87d82e7f0696a40d08c6e4cff3f040a447ece5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9e87d82e7f0696a40d08c6e4cff3f040a447ece5"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 0,
      "deletions": 8
    },
    "files": [
      {
        "sha": "edb6e9bc8173bb497bbd6b75a8f06c534fd59e49",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0242b5afa4ebb381d3a59a7246348a50d3a7fdbe/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0242b5afa4ebb381d3a59a7246348a50d3a7fdbe/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=0242b5afa4ebb381d3a59a7246348a50d3a7fdbe",
        "patch": "@@ -50,7 +50,6 @@\n #include <QThread>\n #include <QTimer>\n #include <QTranslator>\n-#include <QSslConfiguration>\n \n #if defined(QT_STATICPLUGIN)\n #include <QtPlugin>\n@@ -576,13 +575,6 @@ int main(int argc, char *argv[])\n #ifdef Q_OS_MAC\n     QApplication::setAttribute(Qt::AA_DontShowIconsInMenus);\n #endif\n-#if QT_VERSION >= 0x050500\n-    // Because of the POODLE attack it is recommended to disable SSLv3 (https://disablessl3.com/),\n-    // so set SSL protocols to TLS1.0+.\n-    QSslConfiguration sslconf = QSslConfiguration::defaultConfiguration();\n-    sslconf.setProtocol(QSsl::TlsV1_0OrLater);\n-    QSslConfiguration::setDefaultConfiguration(sslconf);\n-#endif\n \n     // Register meta types used for QMetaObject::invokeMethod\n     qRegisterMetaType< bool* >();"
      }
    ]
  },
  {
    "sha": "b0e88b89149f2aaf7c2eb23524655461214130ee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMGU4OGI4OTE0OWYyYWFmN2MyZWIyMzUyNDY1NTQ2MTIxNDEzMGVl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-11-06T08:16:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-11-06T08:16:49Z"
      },
      "message": "Merge #14666: qt: Revert \"Force TLS1.0+ for SSL connections\" (0.17)\n\n0242b5afa4ebb381d3a59a7246348a50d3a7fdbe qt: Revert \"Force TLS1.0+ for SSL connections\" (Tim Ruffing)\n\nPull request description:\n\n  backports #14403 which fixes a crash on FC29\n\nTree-SHA512: 71a34b13202c834c5ca73bcb9b70efff26c34e1aac3b954f098620b62c2be53a8e319929c4764a5b5cc5d0dd163ff70f4eb3a4f1f608363b7d23d1b16b25ddc7",
      "tree": {
        "sha": "4d30b2b8cb933ed122b3c0eb5f37e51d7ad1e207",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d30b2b8cb933ed122b3c0eb5f37e51d7ad1e207"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b0e88b89149f2aaf7c2eb23524655461214130ee",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlvhTfEACgkQHkrtYphs\n0l0dbgf6Ag9Oc/+4OWdV/lB0D3mw2kp+Vri748gNR8A6f8g0liWWcdTZxp9xhoWW\neH1AfuwFduJ2/N2von4MUT9z058ocwCSoZ9WHCd/o9wq43BqEgBZr3b60Cqhp5ad\nkge7q5XtTy8+kkZoVQlDbrJbVJPnqLsBmoiEdQKInVjXxg4YGeeTqrywP+gUDxKw\nuy6v9I+UsQOL+E6XkHCp9KAjZC2C7MJr75IEGw1nrLN1DxrSzoUa7IoB4rbNUWKe\nHnH0Bsbm5JEhFgGSqNgjvoAo2bfGXMiTukzbuLB+yd4IpDR4b5WaxmMBaDI3wkv8\n1b0xOyFqVNlFP4lVMhKYcopzJ3TuqQ==\n=zlgy\n-----END PGP SIGNATURE-----",
        "payload": "tree 4d30b2b8cb933ed122b3c0eb5f37e51d7ad1e207\nparent 9e87d82e7f0696a40d08c6e4cff3f040a447ece5\nparent 0242b5afa4ebb381d3a59a7246348a50d3a7fdbe\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1541492204 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1541492209 +0100\n\nMerge #14666: qt: Revert \"Force TLS1.0+ for SSL connections\" (0.17)\n\n0242b5afa4ebb381d3a59a7246348a50d3a7fdbe qt: Revert \"Force TLS1.0+ for SSL connections\" (Tim Ruffing)\n\nPull request description:\n\n  backports #14403 which fixes a crash on FC29\n\nTree-SHA512: 71a34b13202c834c5ca73bcb9b70efff26c34e1aac3b954f098620b62c2be53a8e319929c4764a5b5cc5d0dd163ff70f4eb3a4f1f608363b7d23d1b16b25ddc7\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0e88b89149f2aaf7c2eb23524655461214130ee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b0e88b89149f2aaf7c2eb23524655461214130ee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0e88b89149f2aaf7c2eb23524655461214130ee/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9e87d82e7f0696a40d08c6e4cff3f040a447ece5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e87d82e7f0696a40d08c6e4cff3f040a447ece5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9e87d82e7f0696a40d08c6e4cff3f040a447ece5"
      },
      {
        "sha": "0242b5afa4ebb381d3a59a7246348a50d3a7fdbe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0242b5afa4ebb381d3a59a7246348a50d3a7fdbe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0242b5afa4ebb381d3a59a7246348a50d3a7fdbe"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 0,
      "deletions": 8
    },
    "files": [
      {
        "sha": "edb6e9bc8173bb497bbd6b75a8f06c534fd59e49",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0e88b89149f2aaf7c2eb23524655461214130ee/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0e88b89149f2aaf7c2eb23524655461214130ee/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=b0e88b89149f2aaf7c2eb23524655461214130ee",
        "patch": "@@ -50,7 +50,6 @@\n #include <QThread>\n #include <QTimer>\n #include <QTranslator>\n-#include <QSslConfiguration>\n \n #if defined(QT_STATICPLUGIN)\n #include <QtPlugin>\n@@ -576,13 +575,6 @@ int main(int argc, char *argv[])\n #ifdef Q_OS_MAC\n     QApplication::setAttribute(Qt::AA_DontShowIconsInMenus);\n #endif\n-#if QT_VERSION >= 0x050500\n-    // Because of the POODLE attack it is recommended to disable SSLv3 (https://disablessl3.com/),\n-    // so set SSL protocols to TLS1.0+.\n-    QSslConfiguration sslconf = QSslConfiguration::defaultConfiguration();\n-    sslconf.setProtocol(QSsl::TlsV1_0OrLater);\n-    QSslConfiguration::setDefaultConfiguration(sslconf);\n-#endif\n \n     // Register meta types used for QMetaObject::invokeMethod\n     qRegisterMetaType< bool* >();"
      }
    ]
  },
  {
    "sha": "1e49fe450dbb0c258776526dba3ee583461d42ff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZTQ5ZmU0NTBkYmIwYzI1ODc3NjUyNmRiYTNlZTU4MzQ2MWQ0MmZm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-11-06T08:43:00Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-11-06T08:43:57Z"
      },
      "message": "doc: Clean out release notes after 0.17.0.1\n\nTree-SHA512: c04192e3b93537f4b37f5ea55fd455b26dd7d902da3b5f8b59ef6fa4590cf413b72fc11bba330a8fd7fa3938b09e6c1d35171806ab5ce85d6b99681953c291a5",
      "tree": {
        "sha": "a01e96c8ca12ff9c24a37679441d8b3396313d23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a01e96c8ca12ff9c24a37679441d8b3396313d23"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e49fe450dbb0c258776526dba3ee583461d42ff",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlvhVE0ACgkQHkrtYphs\n0l0MyAgAlaqbwb3CPh7zpWWNdE6m+qtu5vI9AjcO9XCXlSYs8MRKPL7QTESECohg\n681j24wb9AYF3PEnxztJL4eaxtGV2GNDzyZXzmAeCYRZFuOzqzGRq2d+BIuKRRfz\ndPVqWKZDA8RH3pOaqYTaX1OM1Z9JSdhXtgUXzCk5FY+4aMmD2DDhb3XloSYuhTQv\nI0S8p20+otc1CEfuLORG40cP2wJaIqZG5fVI630DQ0nP4vwkDDXSpbj56t08EVvH\nqEXqDAvNHv+NGGw9zjZb6x/3/+dk3gGaaGvCWB3oKTLxhWP+zNtGXLD8apWa9/Cp\nFVS3fX93zT4RzXlSd1BffjYxrDEXIw==\n=/5Oi\n-----END PGP SIGNATURE-----",
        "payload": "tree a01e96c8ca12ff9c24a37679441d8b3396313d23\nparent b0e88b89149f2aaf7c2eb23524655461214130ee\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1541493780 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1541493837 +0100\n\ndoc: Clean out release notes after 0.17.0.1\n\nTree-SHA512: c04192e3b93537f4b37f5ea55fd455b26dd7d902da3b5f8b59ef6fa4590cf413b72fc11bba330a8fd7fa3938b09e6c1d35171806ab5ce85d6b99681953c291a5\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e49fe450dbb0c258776526dba3ee583461d42ff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1e49fe450dbb0c258776526dba3ee583461d42ff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e49fe450dbb0c258776526dba3ee583461d42ff/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b0e88b89149f2aaf7c2eb23524655461214130ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0e88b89149f2aaf7c2eb23524655461214130ee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b0e88b89149f2aaf7c2eb23524655461214130ee"
      }
    ],
    "stats": {
      "total": 82,
      "additions": 64,
      "deletions": 18
    },
    "files": [
      {
        "sha": "7f4ece80ade5eb548364150df72c810ee959e251",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 64,
        "deletions": 18,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e49fe450dbb0c258776526dba3ee583461d42ff/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e49fe450dbb0c258776526dba3ee583461d42ff/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=1e49fe450dbb0c258776526dba3ee583461d42ff",
        "patch": "@@ -1,8 +1,12 @@\n-Bitcoin Core version 0.17.0.1 is now available from:\n+(note: this is a temporary file, to be added-to by anybody, and moved to\n+release-notes at release time)\n \n-  <https://bitcoincore.org/bin/bitcoin-core-0.17.0.1/>\n+Bitcoin Core version 0.17.x is now available from:\n \n-This release provides a minor bug fix for 0.17.0.\n+  <https://bitcoincore.org/bin/bitcoin-core-0.17.x/>\n+\n+This is a new major version release, including new features, various bugfixes\n+and performance improvements, as well as updated translations.\n \n Please report bugs using the issue tracker at GitHub:\n \n@@ -12,30 +16,72 @@ To receive security and update notifications, please subscribe to:\n \n   <https://bitcoincore.org/en/list/announcements/join/>\n \n-Notable changes\n-===============\n+How to Upgrade\n+==============\n+\n+If you are running an older version, shut it down. Wait until it has completely\n+shut down (which might take a few minutes for older versions), then run the\n+installer (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on Mac)\n+or `bitcoind`/`bitcoin-qt` (on Linux).\n+\n+If your node has a txindex, the txindex db will be migrated the first time you run 0.17.0 or newer, which may take up to a few hours. Your node will not be functional until this migration completes.\n+\n+The first time you run version 0.15.0 or newer, your chainstate database will be converted to a\n+new format, which will take anywhere from a few minutes to half an hour,\n+depending on the speed of your machine.\n+\n+Note that the block database format also changed in version 0.8.0 and there is no\n+automatic upgrade code from before version 0.8 to version 0.15.0. Upgrading\n+directly from 0.7.x and earlier without redownloading the blockchain is not supported.\n+However, as usual, old wallet versions are still supported.\n+\n+Downgrading warning\n+-------------------\n+\n+The chainstate database for this release is not compatible with previous\n+releases, so if you run 0.15 and then decide to switch back to any\n+older version, you will need to run the old release with the `-reindex-chainstate`\n+option to rebuild the chainstate data structures in the old format.\n+\n+If your node has pruning enabled, this will entail re-downloading and\n+processing the entire blockchain.\n \n-An issue was solved with OSX dmg generation, affecting macOS 10.12 to 10.14,\n-which could cause Finder to crash on install.\n+Compatibility\n+==============\n \n-There are no significant changes for other operating systems.\n+Bitcoin Core is extensively tested on multiple operating systems using\n+the Linux kernel, macOS 10.10+, and Windows 7 and newer (Windows XP is not supported).\n \n-0.17.0.1 change log\n-===================\n+Bitcoin Core should also work on most other Unix-like systems but is not\n+frequently tested on them.\n \n-### Build system\n-- #14416 `eb2cc84` Fix OSX dmg issue (10.12 to 10.14) (jonasschnelli)\n+From 0.17.0 onwards macOS <10.10 is no longer supported. 0.17.0 is built using Qt 5.9.x, which doesn't\n+support versions of macOS older than 10.10.\n \n-### Documentation\n-- #14509 `1b5af2c` [0.17] doc: use SegWit in getblocktemplate example (Sjors)\n+Known issues\n+============\n+\n+...\n+\n+Notable changes\n+===============\n+\n+...\n+\n+0.17.x change log\n+=================\n+\n+...\n \n Credits\n =======\n \n Thanks to everyone who directly contributed to this release:\n \n-- Jonas Schnelli\n-- Pieter Wuille\n-- Sjors Provoost\n-- Wladimir J. van der Laan\n+...\n+\n+And to those that reported security issues:\n+\n+...\n \n+As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/)."
      }
    ]
  },
  {
    "sha": "5150accdd2a7c7f0edf964d56bd7d34b5f740cdc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MTUwYWNjZGQyYTdjN2YwZWRmOTY0ZDU2YmQ3ZDM0YjVmNzQwY2Rj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-11-10T11:45:39Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-11-10T11:45:44Z"
      },
      "message": "Merge #14441: [wallet] Backport(0.17): Restore ability to list incoming transactions by label\n\n89306ab0df93bfdf5630910bc20b1eccb7379172 [wallet] Restore ability to list incoming transactions by label (Russell Yanofsky)\n\nPull request description:\n\n  Backport of PR #14411 to v0.17.\n\n  This change partially reverts #13075 and #14023.\n\n  Fixes #14382\n\nTree-SHA512: 1f8300e1a79e826cd706561265b8788deef505fa510be1a76ed9a62e5fca37cf6a741423ac0e5de2a36d6e8b9f25f141885455aacacbbf6474814e6eae406a27",
      "tree": {
        "sha": "3f85d39b7547cdfef45bf0da99fc0629b1ec81e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3f85d39b7547cdfef45bf0da99fc0629b1ec81e2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5150accdd2a7c7f0edf964d56bd7d34b5f740cdc",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlvmxOgACgkQHkrtYphs\n0l2knwf/VSDhASLEZbt7SebSZ4CTJLPTKtfp2JSE496pLRYJa8O/wQiZaTEyk3XM\n8leP7crKEB02Zyn1C4WvjtH/fkuChkvMUfBiaS8mIfdACpHx0Nb4w12gXqLTDaz9\ngiz3fwpmOYJ678uYpPTGoipPwEQDPXYSAHkeWvuzswBuwa94xrNsPNcTzKzVDUlO\nHeansEvbUMSk2vtOlVuptn21IRqKbdeoHM4RVSPHVbIFU0IjAyekqy+ttqGkY2WP\npH2y7/BDgFbuDo73MZpMAxoMBEdgb70IoRcbZ8s2rS+DsUzsmf+4yyuMYqQaC9kB\nJuuIwMF60NWvUeiaNjNcb65E8TQQIg==\n=35XF\n-----END PGP SIGNATURE-----",
        "payload": "tree 3f85d39b7547cdfef45bf0da99fc0629b1ec81e2\nparent 1e49fe450dbb0c258776526dba3ee583461d42ff\nparent 89306ab0df93bfdf5630910bc20b1eccb7379172\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1541850339 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1541850344 +0100\n\nMerge #14441: [wallet] Backport(0.17): Restore ability to list incoming transactions by label\n\n89306ab0df93bfdf5630910bc20b1eccb7379172 [wallet] Restore ability to list incoming transactions by label (Russell Yanofsky)\n\nPull request description:\n\n  Backport of PR #14411 to v0.17.\n\n  This change partially reverts #13075 and #14023.\n\n  Fixes #14382\n\nTree-SHA512: 1f8300e1a79e826cd706561265b8788deef505fa510be1a76ed9a62e5fca37cf6a741423ac0e5de2a36d6e8b9f25f141885455aacacbbf6474814e6eae406a27\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5150accdd2a7c7f0edf964d56bd7d34b5f740cdc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5150accdd2a7c7f0edf964d56bd7d34b5f740cdc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5150accdd2a7c7f0edf964d56bd7d34b5f740cdc/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1e49fe450dbb0c258776526dba3ee583461d42ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e49fe450dbb0c258776526dba3ee583461d42ff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1e49fe450dbb0c258776526dba3ee583461d42ff"
      },
      {
        "sha": "89306ab0df93bfdf5630910bc20b1eccb7379172",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89306ab0df93bfdf5630910bc20b1eccb7379172",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/89306ab0df93bfdf5630910bc20b1eccb7379172"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 56,
      "deletions": 17
    },
    "files": [
      {
        "sha": "ea9a45347d23027cbdd16c658074d97f46f08491",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 17,
        "deletions": 1,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5150accdd2a7c7f0edf964d56bd7d34b5f740cdc/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5150accdd2a7c7f0edf964d56bd7d34b5f740cdc/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=5150accdd2a7c7f0edf964d56bd7d34b5f740cdc",
        "patch": "@@ -71,7 +71,23 @@ Notable changes\n 0.17.x change log\n =================\n \n-...\n+`listtransactions` label support\n+--------------------------------\n+\n+The `listtransactions` RPC `account` parameter which was deprecated in 0.17.0\n+and renamed to `dummy` has been un-deprecated and renamed again to `label`.\n+\n+When bitcoin is configured with the `-deprecatedrpc=accounts` setting, specifying\n+a label/account/dummy argument will return both outgoing and incoming\n+transactions. Without the `-deprecatedrpc=accounts` setting, it will only return\n+incoming transactions (because it used to be possible to create transactions\n+spending from specific accounts, but this is no longer possible with labels).\n+\n+When `-deprecatedrpc=accounts` is set, it's possible to pass the empty string \"\"\n+to list transactions that don't have any label. Without\n+`-deprecatedrpc=accounts`, passing the empty string is an error because returning\n+only non-labeled transactions is not generally useful behavior and can cause\n+confusion.\n \n Credits\n ======="
      },
      {
        "sha": "a3de6180596b2864b9b5ca3f288d760d83f3df1e",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 8,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5150accdd2a7c7f0edf964d56bd7d34b5f740cdc/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5150accdd2a7c7f0edf964d56bd7d34b5f740cdc/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=5150accdd2a7c7f0edf964d56bd7d34b5f740cdc",
        "patch": "@@ -1805,9 +1805,14 @@ static void ListTransactions(CWallet* const pwallet, const CWalletTx& wtx, const\n     bool fAllAccounts = (strAccount == std::string(\"*\"));\n     bool involvesWatchonly = wtx.IsFromMe(ISMINE_WATCH_ONLY);\n \n+    bool list_sent = fAllAccounts;\n+\n+    if (IsDeprecatedRPCEnabled(\"accounts\")) {\n+        list_sent |= strAccount == strSentAccount;\n+    }\n+\n     // Sent\n-    if ((!listSent.empty() || nFee != 0) && (fAllAccounts || strAccount == strSentAccount))\n-    {\n+    if (list_sent) {\n         for (const COutputEntry& s : listSent)\n         {\n             UniValue entry(UniValue::VOBJ);\n@@ -1901,12 +1906,14 @@ UniValue listtransactions(const JSONRPCRequest& request)\n \n     std::string help_text {};\n     if (!IsDeprecatedRPCEnabled(\"accounts\")) {\n-        help_text = \"listtransactions (dummy count skip include_watchonly)\\n\"\n-            \"\\nReturns up to 'count' most recent transactions skipping the first 'from' transactions for account 'account'.\\n\"\n+        help_text = \"listtransactions (label count skip include_watchonly)\\n\"\n+            \"\\nIf a label name is provided, this will return only incoming transactions paying to addresses with the specified label.\\n\"\n+            \"\\nReturns up to 'count' most recent transactions skipping the first 'from' transactions.\\n\"\n             \"Note that the \\\"account\\\" argument and \\\"otheraccount\\\" return value have been removed in V0.17. To use this RPC with an \\\"account\\\" argument, restart\\n\"\n             \"bitcoind with -deprecatedrpc=accounts\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"dummy\\\"    (string, optional) If set, should be \\\"*\\\" for backwards compatibility.\\n\"\n+            \"1. \\\"label\\\"    (string, optional) If set, should be a valid label name to return only incoming transactions\\n\"\n+            \"              with the specified label, or \\\"*\\\" to disable filtering and return all transactions.\\n\"\n             \"2. count          (numeric, optional, default=10) The number of transactions to return\\n\"\n             \"3. skip           (numeric, optional, default=0) The number of transactions to skip\\n\"\n             \"4. include_watchonly (bool, optional, default=false) Include transactions to watch-only addresses (see 'importaddress')\\n\"\n@@ -2012,8 +2019,8 @@ UniValue listtransactions(const JSONRPCRequest& request)\n     std::string strAccount = \"*\";\n     if (!request.params[0].isNull()) {\n         strAccount = request.params[0].get_str();\n-        if (!IsDeprecatedRPCEnabled(\"accounts\") && strAccount != \"*\") {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Dummy value must be set to \\\"*\\\"\");\n+        if (!IsDeprecatedRPCEnabled(\"accounts\") && strAccount.empty()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Label argument must be a valid label name or \\\"*\\\".\");\n         }\n     }\n     int nCount = 10;\n@@ -4801,7 +4808,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"listlockunspent\",                  &listlockunspent,               {} },\n     { \"wallet\",             \"listreceivedbyaddress\",            &listreceivedbyaddress,         {\"minconf\",\"include_empty\",\"include_watchonly\",\"address_filter\"} },\n     { \"wallet\",             \"listsinceblock\",                   &listsinceblock,                {\"blockhash\",\"target_confirmations\",\"include_watchonly\",\"include_removed\"} },\n-    { \"wallet\",             \"listtransactions\",                 &listtransactions,              {\"account|dummy\",\"count\",\"skip\",\"include_watchonly\"} },\n+    { \"wallet\",             \"listtransactions\",                 &listtransactions,              {\"account|label|dummy\",\"count\",\"skip\",\"include_watchonly\"} },\n     { \"wallet\",             \"listunspent\",                      &listunspent,                   {\"minconf\",\"maxconf\",\"addresses\",\"include_unsafe\",\"query_options\"} },\n     { \"wallet\",             \"listwallets\",                      &listwallets,                   {} },\n     { \"wallet\",             \"loadwallet\",                       &loadwallet,                    {\"filename\"} },"
      },
      {
        "sha": "b6e3a4bcd5bd9d4b31ccedb9dfb0ee48ff3eb363",
        "filename": "test/functional/wallet_import_rescan.py",
        "status": "modified",
        "additions": 20,
        "deletions": 5,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5150accdd2a7c7f0edf964d56bd7d34b5f740cdc/test/functional/wallet_import_rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5150accdd2a7c7f0edf964d56bd7d34b5f740cdc/test/functional/wallet_import_rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_import_rescan.py?ref=5150accdd2a7c7f0edf964d56bd7d34b5f740cdc",
        "patch": "@@ -46,11 +46,11 @@ def do_import(self, timestamp):\n \n         if self.call == Call.single:\n             if self.data == Data.address:\n-                response = self.try_rpc(self.node.importaddress, address=self.address[\"address\"], rescan=rescan)\n+                response = self.try_rpc(self.node.importaddress, address=self.address[\"address\"], label=self.label, rescan=rescan)\n             elif self.data == Data.pub:\n-                response = self.try_rpc(self.node.importpubkey, pubkey=self.address[\"pubkey\"], rescan=rescan)\n+                response = self.try_rpc(self.node.importpubkey, pubkey=self.address[\"pubkey\"], label=self.label, rescan=rescan)\n             elif self.data == Data.priv:\n-                response = self.try_rpc(self.node.importprivkey, privkey=self.key, rescan=rescan)\n+                response = self.try_rpc(self.node.importprivkey, privkey=self.key, label=self.label, rescan=rescan)\n             assert_equal(response, None)\n \n         elif self.call == Call.multi:\n@@ -61,18 +61,32 @@ def do_import(self, timestamp):\n                 \"timestamp\": timestamp + TIMESTAMP_WINDOW + (1 if self.rescan == Rescan.late_timestamp else 0),\n                 \"pubkeys\": [self.address[\"pubkey\"]] if self.data == Data.pub else [],\n                 \"keys\": [self.key] if self.data == Data.priv else [],\n+                \"label\": self.label,\n                 \"watchonly\": self.data != Data.priv\n             }], {\"rescan\": self.rescan in (Rescan.yes, Rescan.late_timestamp)})\n             assert_equal(response, [{\"success\": True}])\n \n     def check(self, txid=None, amount=None, confirmations=None):\n-        \"\"\"Verify that listreceivedbyaddress returns expected values.\"\"\"\n+        \"\"\"Verify that listtransactions/listreceivedbyaddress return expected values.\"\"\"\n+\n+        txs = self.node.listtransactions(label=self.label, count=10000, skip=0, include_watchonly=True)\n+        assert_equal(len(txs), self.expected_txs)\n \n         addresses = self.node.listreceivedbyaddress(minconf=0, include_watchonly=True, address_filter=self.address['address'])\n         if self.expected_txs:\n             assert_equal(len(addresses[0][\"txids\"]), self.expected_txs)\n \n         if txid is not None:\n+            tx, = [tx for tx in txs if tx[\"txid\"] == txid]\n+            assert_equal(tx[\"label\"], self.label)\n+            assert_equal(tx[\"address\"], self.address[\"address\"])\n+            assert_equal(tx[\"amount\"], amount)\n+            assert_equal(tx[\"category\"], \"receive\")\n+            assert_equal(tx[\"label\"], self.label)\n+            assert_equal(tx[\"txid\"], txid)\n+            assert_equal(tx[\"confirmations\"], confirmations)\n+            assert_equal(\"trusted\" not in tx, True)\n+\n             address, = [ad for ad in addresses if txid in ad[\"txids\"]]\n             assert_equal(address[\"address\"], self.address[\"address\"])\n             assert_equal(address[\"amount\"], self.expected_balance)\n@@ -136,7 +150,8 @@ def run_test(self):\n         # Create one transaction on node 0 with a unique amount for\n         # each possible type of wallet import RPC.\n         for i, variant in enumerate(IMPORT_VARIANTS):\n-            variant.address = self.nodes[1].getaddressinfo(self.nodes[1].getnewaddress())\n+            variant.label = \"label {} {}\".format(i, variant)\n+            variant.address = self.nodes[1].getaddressinfo(self.nodes[1].getnewaddress(variant.label))\n             variant.key = self.nodes[1].dumpprivkey(variant.address[\"address\"])\n             variant.initial_amount = 10 - (i + 1) / 4.0\n             variant.initial_txid = self.nodes[0].sendtoaddress(variant.address[\"address\"], variant.initial_amount)"
      },
      {
        "sha": "00a6b9c393f2e79fc33a3eb6f85e7611f497c0a2",
        "filename": "test/functional/wallet_listtransactions.py",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5150accdd2a7c7f0edf964d56bd7d34b5f740cdc/test/functional/wallet_listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5150accdd2a7c7f0edf964d56bd7d34b5f740cdc/test/functional/wallet_listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listtransactions.py?ref=5150accdd2a7c7f0edf964d56bd7d34b5f740cdc",
        "patch": "@@ -97,9 +97,10 @@ def run_test(self):\n         txid = self.nodes[1].sendtoaddress(multisig[\"address\"], 0.1)\n         self.nodes[1].generate(1)\n         self.sync_all()\n-        assert not [tx for tx in self.nodes[0].listtransactions(dummy=\"*\", count=100, skip=0, include_watchonly=False) if \"label\" in tx and tx[\"label\"] == \"watchonly\"]\n-        txs = [tx for tx in self.nodes[0].listtransactions(dummy=\"*\", count=100, skip=0, include_watchonly=True) if \"label\" in tx and tx['label'] == 'watchonly']\n-        assert_array_result(txs, {\"category\": \"receive\", \"amount\": Decimal(\"0.1\")}, {\"txid\": txid})\n+        assert len(self.nodes[0].listtransactions(label=\"watchonly\", count=100, skip=0, include_watchonly=False)) == 0\n+        assert_array_result(self.nodes[0].listtransactions(label=\"watchonly\", count=100, skip=0, include_watchonly=True),\n+                            {\"category\": \"receive\", \"amount\": Decimal(\"0.1\")},\n+                            {\"txid\": txid, \"label\": \"watchonly\"})\n \n         self.run_rbf_opt_in_test()\n "
      }
    ]
  },
  {
    "sha": "bb9069555120474a53caf55027c2bdc1d4cf383c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjkwNjk1NTUxMjA0NzRhNTNjYWY1NTAyN2MyYmRjMWQ0Y2YzODNj",
    "commit": {
      "author": {
        "name": "gustavonalle",
        "email": "gustavonalle@gmail.com",
        "date": "2018-09-24T15:10:23Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-11-28T20:35:05Z"
      },
      "message": "[wallet] Ensure wallet is unlocked before signing\n\nGithub-Pull: #14310\nRebased-From: db15805668e923c3493d77122d20926496cf6a1a",
      "tree": {
        "sha": "247163a2cc82c868fccc54334ff7df9b38099e90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/247163a2cc82c868fccc54334ff7df9b38099e90"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb9069555120474a53caf55027c2bdc1d4cf383c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb9069555120474a53caf55027c2bdc1d4cf383c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb9069555120474a53caf55027c2bdc1d4cf383c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb9069555120474a53caf55027c2bdc1d4cf383c/comments",
    "author": null,
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5150accdd2a7c7f0edf964d56bd7d34b5f740cdc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5150accdd2a7c7f0edf964d56bd7d34b5f740cdc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5150accdd2a7c7f0edf964d56bd7d34b5f740cdc"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 11,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9ddd21126ada64d4a3e6b3aa982d006314031a50",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb9069555120474a53caf55027c2bdc1d4cf383c/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb9069555120474a53caf55027c2bdc1d4cf383c/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=bb9069555120474a53caf55027c2bdc1d4cf383c",
        "patch": "@@ -3732,6 +3732,8 @@ UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n \n     // Sign the transaction\n     LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n     return SignTransaction(mtx, request.params[1], pwallet, false, request.params[2]);\n }\n "
      },
      {
        "sha": "823892a3498afcfc260953c651bedce63d0fb373",
        "filename": "test/functional/rpc_signrawtransaction.py",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb9069555120474a53caf55027c2bdc1d4cf383c/test/functional/rpc_signrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb9069555120474a53caf55027c2bdc1d4cf383c/test/functional/rpc_signrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signrawtransaction.py?ref=bb9069555120474a53caf55027c2bdc1d4cf383c",
        "patch": "@@ -49,6 +49,14 @@ def successful_signing_test(self):\n         rawTxSigned2 = self.nodes[0].signrawtransaction(rawTx, inputs, privKeys)\n         assert_equal(rawTxSigned, rawTxSigned2)\n \n+    def test_with_lock_outputs(self):\n+        \"\"\"Test correct error reporting when trying to sign a locked output\"\"\"\n+        self.nodes[0].encryptwallet(\"password\")\n+        self.restart_node(0)\n+        rawTx = '020000000156b958f78e3f24e0b2f4e4db1255426b0902027cb37e3ddadb52e37c3557dddb0000000000ffffffff01c0a6b929010000001600149a2ee8c77140a053f36018ac8124a6ececc1668a00000000'\n+\n+        assert_raises_rpc_error(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].signrawtransactionwithwallet, rawTx)\n+\n     def script_verification_error_test(self):\n         \"\"\"Create and sign a raw transaction with valid (vin 0), invalid (vin 1) and one missing (vin 2) input script.\n \n@@ -150,6 +158,7 @@ def script_verification_error_test(self):\n     def run_test(self):\n         self.successful_signing_test()\n         self.script_verification_error_test()\n+        self.test_with_lock_outputs()\n \n \n if __name__ == '__main__':"
      }
    ]
  },
  {
    "sha": "85aacc41ba3c4350faaf42582151776a47c6cf5c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NWFhY2M0MWJhM2M0MzUwZmFhZjQyNTgyMTUxNzc2YTQ3YzZjZjVj",
    "commit": {
      "author": {
        "name": "Walter",
        "email": "s.heinhuis@outlook.com",
        "date": "2018-09-20T11:57:29Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-11-28T20:35:05Z"
      },
      "message": "Add autogen.sh in ARM Cross-compilation\n\nautogen for the config files was missing.\n\nGithub-Pull: #14276\nRebased-From: 52beb9ed8876e3129360197ac632c1b59f910c55",
      "tree": {
        "sha": "d753bb3e8d230cd14621c2f12acb9fccb9929010",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d753bb3e8d230cd14621c2f12acb9fccb9929010"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/85aacc41ba3c4350faaf42582151776a47c6cf5c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85aacc41ba3c4350faaf42582151776a47c6cf5c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/85aacc41ba3c4350faaf42582151776a47c6cf5c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85aacc41ba3c4350faaf42582151776a47c6cf5c/comments",
    "author": null,
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bb9069555120474a53caf55027c2bdc1d4cf383c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb9069555120474a53caf55027c2bdc1d4cf383c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb9069555120474a53caf55027c2bdc1d4cf383c"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4a09bed2b2327ed39501eedad3262f8fee49ede6",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85aacc41ba3c4350faaf42582151776a47c6cf5c/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85aacc41ba3c4350faaf42582151776a47c6cf5c/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=85aacc41ba3c4350faaf42582151776a47c6cf5c",
        "patch": "@@ -279,6 +279,7 @@ To build executables for ARM:\n     cd depends\n     make HOST=arm-linux-gnueabihf NO_QT=1\n     cd ..\n+    ./autogen.sh\n     ./configure --prefix=$PWD/depends/arm-linux-gnueabihf --enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\n     make\n "
      }
    ]
  },
  {
    "sha": "94065024c7ad049a3750102d8cdccf9d1ac73ee4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NDA2NTAyNGM3YWQwNDlhMzc1MDEwMmQ4Y2RjY2Y5ZDFhYzczZWU0",
    "commit": {
      "author": {
        "name": "Kaz Wesley",
        "email": "kaz@lambdaverse.org",
        "date": "2018-11-07T20:36:23Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-11-28T20:35:05Z"
      },
      "message": "add a test demonstrating an overflow in a deserialization edge case\n\nAlso add a test that the highest legal index is accepted.\n\nGithub-Pull: #14685\nRebased-From: 051faf7e9d4e32142f95f7adb31d2f53f656cb66",
      "tree": {
        "sha": "410b4ff43aac7eb592783514871a2684146779fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/410b4ff43aac7eb592783514871a2684146779fb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/94065024c7ad049a3750102d8cdccf9d1ac73ee4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94065024c7ad049a3750102d8cdccf9d1ac73ee4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/94065024c7ad049a3750102d8cdccf9d1ac73ee4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94065024c7ad049a3750102d8cdccf9d1ac73ee4/comments",
    "author": {
      "login": "kazcw",
      "id": 1047859,
      "node_id": "MDQ6VXNlcjEwNDc4NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1047859?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kazcw",
      "html_url": "https://github.com/kazcw",
      "followers_url": "https://api.github.com/users/kazcw/followers",
      "following_url": "https://api.github.com/users/kazcw/following{/other_user}",
      "gists_url": "https://api.github.com/users/kazcw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kazcw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kazcw/subscriptions",
      "organizations_url": "https://api.github.com/users/kazcw/orgs",
      "repos_url": "https://api.github.com/users/kazcw/repos",
      "events_url": "https://api.github.com/users/kazcw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kazcw/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "85aacc41ba3c4350faaf42582151776a47c6cf5c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85aacc41ba3c4350faaf42582151776a47c6cf5c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/85aacc41ba3c4350faaf42582151776a47c6cf5c"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 45,
      "deletions": 0
    },
    "files": [
      {
        "sha": "df62c5ac92164940299df2ccb6e0c3972bcb71d5",
        "filename": "src/test/blockencodings_tests.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 0,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94065024c7ad049a3750102d8cdccf9d1ac73ee4/src/test/blockencodings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94065024c7ad049a3750102d8cdccf9d1ac73ee4/src/test/blockencodings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockencodings_tests.cpp?ref=94065024c7ad049a3750102d8cdccf9d1ac73ee4",
        "patch": "@@ -344,4 +344,49 @@ BOOST_AUTO_TEST_CASE(TransactionsRequestSerializationTest) {\n     BOOST_CHECK_EQUAL(req1.indexes[3], req2.indexes[3]);\n }\n \n+BOOST_AUTO_TEST_CASE(TransactionsRequestDeserializationMaxTest) {\n+    // Check that the highest legal index is decoded correctly\n+    BlockTransactionsRequest req0;\n+    req0.blockhash = InsecureRand256();\n+    req0.indexes.resize(1);\n+    req0.indexes[0] = 0xffff;\n+    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n+    stream << req0;\n+\n+    BlockTransactionsRequest req1;\n+    stream >> req1;\n+    BOOST_CHECK_EQUAL(req0.indexes.size(), req1.indexes.size());\n+    BOOST_CHECK_EQUAL(req0.indexes[0], req1.indexes[0]);\n+}\n+\n+BOOST_AUTO_TEST_CASE(TransactionsRequestDeserializationOverflowTest) {\n+    // Any set of index deltas that starts with N values that sum to (0x10000 - N)\n+    // causes the edge-case overflow that was originally not checked for. Such\n+    // a request cannot be created by serializing a real BlockTransactionsRequest\n+    // due to the overflow, so here we'll serialize from raw deltas.\n+    BlockTransactionsRequest req0;\n+    req0.blockhash = InsecureRand256();\n+    req0.indexes.resize(3);\n+    req0.indexes[0] = 0x7000;\n+    req0.indexes[1] = 0x10000 - 0x7000 - 2;\n+    req0.indexes[2] = 0;\n+    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n+    stream << req0.blockhash;\n+    WriteCompactSize(stream, req0.indexes.size());\n+    WriteCompactSize(stream, req0.indexes[0]);\n+    WriteCompactSize(stream, req0.indexes[1]);\n+    WriteCompactSize(stream, req0.indexes[2]);\n+\n+    BlockTransactionsRequest req1;\n+    try {\n+        stream >> req1;\n+        // before patch: deserialize above succeeds and this check fails, demonstrating the overflow\n+        BOOST_CHECK(req1.indexes[1] < req1.indexes[2]);\n+        // this shouldn't be reachable before or after patch\n+        BOOST_CHECK(0);\n+    } catch(std::ios_base::failure &) {\n+        // deserialize should fail\n+    }\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "5331ad0506fa1e13a70613309532588b2cc74bb5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MzMxYWQwNTA2ZmExZTEzYTcwNjEzMzA5NTMyNTg4YjJjYzc0YmI1",
    "commit": {
      "author": {
        "name": "Kaz Wesley",
        "email": "kaz@lambdaverse.org",
        "date": "2018-11-07T20:39:44Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-11-28T20:35:05Z"
      },
      "message": "fix a deserialization overflow edge case\n\nA specially-constructed BlockTransactionsRequest can overflow in\ndeserialization in a way that is currently harmless.\n\nGithub-Pull: #14685\nRebased-From: 6bed4b374daf26233e96fa7863d4324a5bfa99c2",
      "tree": {
        "sha": "f4ce9f62d0548d2a50c13e4f3b4cc97a33758b1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f4ce9f62d0548d2a50c13e4f3b4cc97a33758b1b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5331ad0506fa1e13a70613309532588b2cc74bb5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5331ad0506fa1e13a70613309532588b2cc74bb5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5331ad0506fa1e13a70613309532588b2cc74bb5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5331ad0506fa1e13a70613309532588b2cc74bb5/comments",
    "author": {
      "login": "kazcw",
      "id": 1047859,
      "node_id": "MDQ6VXNlcjEwNDc4NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1047859?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kazcw",
      "html_url": "https://github.com/kazcw",
      "followers_url": "https://api.github.com/users/kazcw/followers",
      "following_url": "https://api.github.com/users/kazcw/following{/other_user}",
      "gists_url": "https://api.github.com/users/kazcw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kazcw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kazcw/subscriptions",
      "organizations_url": "https://api.github.com/users/kazcw/orgs",
      "repos_url": "https://api.github.com/users/kazcw/repos",
      "events_url": "https://api.github.com/users/kazcw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kazcw/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "94065024c7ad049a3750102d8cdccf9d1ac73ee4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94065024c7ad049a3750102d8cdccf9d1ac73ee4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/94065024c7ad049a3750102d8cdccf9d1ac73ee4"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "4bfe538250ced3f9d595eb80c2f381dad2e29167",
        "filename": "src/blockencodings.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5331ad0506fa1e13a70613309532588b2cc74bb5/src/blockencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5331ad0506fa1e13a70613309532588b2cc74bb5/src/blockencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.h?ref=5331ad0506fa1e13a70613309532588b2cc74bb5",
        "patch": "@@ -52,12 +52,12 @@ class BlockTransactionsRequest {\n                 }\n             }\n \n-            uint16_t offset = 0;\n+            int32_t offset = 0;\n             for (size_t j = 0; j < indexes.size(); j++) {\n-                if (uint64_t(indexes[j]) + uint64_t(offset) > std::numeric_limits<uint16_t>::max())\n+                if (int32_t(indexes[j]) + offset > std::numeric_limits<uint16_t>::max())\n                     throw std::ios_base::failure(\"indexes overflowed 16 bits\");\n                 indexes[j] = indexes[j] + offset;\n-                offset = indexes[j] + 1;\n+                offset = int32_t(indexes[j]) + 1;\n             }\n         } else {\n             for (size_t i = 0; i < indexes.size(); i++) {"
      }
    ]
  },
  {
    "sha": "2f9fd2932164eb86005e91cffcc66d2d79322db0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZjlmZDI5MzIxNjRlYjg2MDA1ZTkxY2ZmY2M2NmQyZDc5MzIyZGIw",
    "commit": {
      "author": {
        "name": "Kaz Wesley",
        "email": "kaz@lambdaverse.org",
        "date": "2018-11-13T20:40:22Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-11-28T20:35:05Z"
      },
      "message": "disallow oversized CBlockHeaderAndShortTxIDs\n\nOtherwise we'd reply with a bogus BlockTransactionsRequest trying to\nrequest indexes with overflowed deltas.\n\nGithub-Pull: #14685\nRebased-From: b08af10fb299dc3fdcd1f022619fb112c72e5d8e",
      "tree": {
        "sha": "954aa0c9eb715e0a6f056b8824525a9df5ffb6e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/954aa0c9eb715e0a6f056b8824525a9df5ffb6e2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2f9fd2932164eb86005e91cffcc66d2d79322db0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f9fd2932164eb86005e91cffcc66d2d79322db0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2f9fd2932164eb86005e91cffcc66d2d79322db0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f9fd2932164eb86005e91cffcc66d2d79322db0/comments",
    "author": {
      "login": "kazcw",
      "id": 1047859,
      "node_id": "MDQ6VXNlcjEwNDc4NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1047859?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kazcw",
      "html_url": "https://github.com/kazcw",
      "followers_url": "https://api.github.com/users/kazcw/followers",
      "following_url": "https://api.github.com/users/kazcw/following{/other_user}",
      "gists_url": "https://api.github.com/users/kazcw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kazcw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kazcw/subscriptions",
      "organizations_url": "https://api.github.com/users/kazcw/orgs",
      "repos_url": "https://api.github.com/users/kazcw/repos",
      "events_url": "https://api.github.com/users/kazcw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kazcw/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5331ad0506fa1e13a70613309532588b2cc74bb5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5331ad0506fa1e13a70613309532588b2cc74bb5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5331ad0506fa1e13a70613309532588b2cc74bb5"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0c2b83ebcfafec942725fb5accc0236e2088f0ba",
        "filename": "src/blockencodings.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9fd2932164eb86005e91cffcc66d2d79322db0/src/blockencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9fd2932164eb86005e91cffcc66d2d79322db0/src/blockencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.h?ref=2f9fd2932164eb86005e91cffcc66d2d79322db0",
        "patch": "@@ -186,6 +186,9 @@ class CBlockHeaderAndShortTxIDs {\n \n         READWRITE(prefilledtxn);\n \n+        if (BlockTxCount() > std::numeric_limits<uint16_t>::max())\n+            throw std::ios_base::failure(\"indexes overflowed 16 bits\");\n+\n         if (ser_action.ForRead())\n             FillShortTxIDSelector();\n     }"
      }
    ]
  },
  {
    "sha": "60f7a97930ccec01d008036cb98f1304eeca7525",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MGY3YTk3OTMwY2NlYzAxZDAwODAzNmNiOThmMTMwNGVlY2E3NTI1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-22T03:36:23Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-11-28T20:35:05Z"
      },
      "message": "qa: Add test to ensure node can generate all help texts at runtime\n\nGithub-Pull: #14658\nRebased-From: bbbbb3f8850907d413db4715c10ef6df055234f6",
      "tree": {
        "sha": "8f47105b0c53b7cb11e17be44066e75db50bc2c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8f47105b0c53b7cb11e17be44066e75db50bc2c4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/60f7a97930ccec01d008036cb98f1304eeca7525",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60f7a97930ccec01d008036cb98f1304eeca7525",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/60f7a97930ccec01d008036cb98f1304eeca7525",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60f7a97930ccec01d008036cb98f1304eeca7525/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2f9fd2932164eb86005e91cffcc66d2d79322db0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f9fd2932164eb86005e91cffcc66d2d79322db0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2f9fd2932164eb86005e91cffcc66d2d79322db0"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 15,
      "deletions": 0
    },
    "files": [
      {
        "sha": "78d6e78aed21a6289a15a6bace6ec9a8f5d559b4",
        "filename": "test/functional/rpc_help.py",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60f7a97930ccec01d008036cb98f1304eeca7525/test/functional/rpc_help.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60f7a97930ccec01d008036cb98f1304eeca7525/test/functional/rpc_help.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_help.py?ref=60f7a97930ccec01d008036cb98f1304eeca7525",
        "patch": "@@ -7,12 +7,18 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, assert_raises_rpc_error\n \n+import os\n+\n \n class HelpRpcTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n \n     def run_test(self):\n+        self.test_categories()\n+        self.dump_help()\n+\n+    def test_categories(self):\n         node = self.nodes[0]\n \n         # wrong argument count\n@@ -37,6 +43,15 @@ def run_test(self):\n \n         assert_equal(titles, components)\n \n+    def dump_help(self):\n+        dump_dir = os.path.join(self.options.tmpdir, 'rpc_help_dump')\n+        os.mkdir(dump_dir)\n+        calls = [line.split(' ', 1)[0] for line in self.nodes[0].help().splitlines() if line and not line.startswith('==')]\n+        for call in calls:\n+            with open(os.path.join(dump_dir, call), 'w', encoding='utf-8') as f:\n+                # Make sure the node can generate the help at runtime without crashing\n+                f.write(self.nodes[0].help(call))\n+\n \n if __name__ == '__main__':\n     HelpRpcTest().main()"
      }
    ]
  },
  {
    "sha": "96f15e8bb3ca92d61030074c5499d07d8f89a92c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NmYxNWU4YmIzY2E5MmQ2MTAzMDA3NGM1NDk5ZDA3ZDhmODlhOTJj",
    "commit": {
      "author": {
        "name": "fridokus",
        "email": "oskar.fridell@gmail.com",
        "date": "2018-11-01T15:11:29Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-11-28T20:35:05Z"
      },
      "message": "Tests: Fix a comment\n\nGithub-Pull: #14632\nRebased-From: 086fc835718555bb332a807fe5794cb6cb4d1fef",
      "tree": {
        "sha": "ac22425e68d6d92cad6590f31f031a8c391b9954",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ac22425e68d6d92cad6590f31f031a8c391b9954"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/96f15e8bb3ca92d61030074c5499d07d8f89a92c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96f15e8bb3ca92d61030074c5499d07d8f89a92c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/96f15e8bb3ca92d61030074c5499d07d8f89a92c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96f15e8bb3ca92d61030074c5499d07d8f89a92c/comments",
    "author": {
      "login": "raxomukus",
      "id": 8929540,
      "node_id": "MDQ6VXNlcjg5Mjk1NDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8929540?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/raxomukus",
      "html_url": "https://github.com/raxomukus",
      "followers_url": "https://api.github.com/users/raxomukus/followers",
      "following_url": "https://api.github.com/users/raxomukus/following{/other_user}",
      "gists_url": "https://api.github.com/users/raxomukus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/raxomukus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/raxomukus/subscriptions",
      "organizations_url": "https://api.github.com/users/raxomukus/orgs",
      "repos_url": "https://api.github.com/users/raxomukus/repos",
      "events_url": "https://api.github.com/users/raxomukus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/raxomukus/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "60f7a97930ccec01d008036cb98f1304eeca7525",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60f7a97930ccec01d008036cb98f1304eeca7525",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/60f7a97930ccec01d008036cb98f1304eeca7525"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 2,
      "deletions": 3
    },
    "files": [
      {
        "sha": "845beb551efdde104618f99b376087597240ee18",
        "filename": "test/functional/mempool_resurrect.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96f15e8bb3ca92d61030074c5499d07d8f89a92c/test/functional/mempool_resurrect.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96f15e8bb3ca92d61030074c5499d07d8f89a92c/test/functional/mempool_resurrect.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_resurrect.py?ref=96f15e8bb3ca92d61030074c5499d07d8f89a92c",
        "patch": "@@ -47,12 +47,11 @@ def run_test(self):\n             tx = self.nodes[0].gettransaction(txid)\n             assert(tx[\"confirmations\"] > 0)\n \n-        # Use invalidateblock to re-org back; all transactions should\n-        # end up unconfirmed and back in the mempool\n+        # Use invalidateblock to re-org back\n         for node in self.nodes:\n             node.invalidateblock(blocks[0])\n \n-        # mempool should be empty, all txns confirmed\n+        # All txns should be back in mempool with 0 confirmations\n         assert_equal(set(self.nodes[0].getrawmempool()), set(spends1_id+spends2_id))\n         for txid in spends1_id+spends2_id:\n             tx = self.nodes[0].gettransaction(txid)"
      }
    ]
  },
  {
    "sha": "91fa15aaebdf99fb0d1e2d811f765a5dd3fc3a93",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MWZhMTVhYWViZGY5OWZiMGQxZTJkODExZjc2NWE1ZGQzZmMzYTkz",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-06-27T16:06:44Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-11-28T20:35:05Z"
      },
      "message": "wallet: Avoid potential use of unitialized value bnb_used in CWallet::CreateTransaction(...)\n\nGithub-Pull: #13546\nRebased-From: a23a7f60aa07de52d23ff1f2034fc43926ec3520",
      "tree": {
        "sha": "1a4279e1ca10e32f4c4f4a16ab04f82531c9ed30",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1a4279e1ca10e32f4c4f4a16ab04f82531c9ed30"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/91fa15aaebdf99fb0d1e2d811f765a5dd3fc3a93",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91fa15aaebdf99fb0d1e2d811f765a5dd3fc3a93",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/91fa15aaebdf99fb0d1e2d811f765a5dd3fc3a93",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91fa15aaebdf99fb0d1e2d811f765a5dd3fc3a93/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "96f15e8bb3ca92d61030074c5499d07d8f89a92c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96f15e8bb3ca92d61030074c5499d07d8f89a92c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/96f15e8bb3ca92d61030074c5499d07d8f89a92c"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1a14d7af07cb40595a0e41b0b71c8ebb5c125dc4",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91fa15aaebdf99fb0d1e2d811f765a5dd3fc3a93/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91fa15aaebdf99fb0d1e2d811f765a5dd3fc3a93/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=91fa15aaebdf99fb0d1e2d811f765a5dd3fc3a93",
        "patch": "@@ -2846,6 +2846,8 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CTransac\n                             return false;\n                         }\n                     }\n+                } else {\n+                    bnb_used = false;\n                 }\n \n                 const CAmount nChange = nValueIn - nValueToSelect;"
      }
    ]
  },
  {
    "sha": "fb9ad043f8b82c7d507ee729121658073eb894f8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYjlhZDA0M2Y4YjgyYzdkNTA3ZWU3MjkxMjE2NTgwNzNlYjg5NGY4",
    "commit": {
      "author": {
        "name": "Eric Scrivner",
        "email": "eric.t.scrivner@gmail.com",
        "date": "2018-10-06T17:11:38Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-11-28T20:35:05Z"
      },
      "message": "Fix listreceivedbyaddress not taking address as a string\n\nFixes #14173. Add the patch in #14173 and include a regression test.\n\nGithub-Pull: #14417\nRebased-From: d4d70eda339f6f74390b56edd4021e928bb588a7",
      "tree": {
        "sha": "733d16ab8acec7c30812a9a782cb58e8243390a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/733d16ab8acec7c30812a9a782cb58e8243390a8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb9ad043f8b82c7d507ee729121658073eb894f8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb9ad043f8b82c7d507ee729121658073eb894f8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fb9ad043f8b82c7d507ee729121658073eb894f8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb9ad043f8b82c7d507ee729121658073eb894f8/comments",
    "author": {
      "login": "etscrivner",
      "id": 69561,
      "node_id": "MDQ6VXNlcjY5NTYx",
      "avatar_url": "https://avatars.githubusercontent.com/u/69561?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/etscrivner",
      "html_url": "https://github.com/etscrivner",
      "followers_url": "https://api.github.com/users/etscrivner/followers",
      "following_url": "https://api.github.com/users/etscrivner/following{/other_user}",
      "gists_url": "https://api.github.com/users/etscrivner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/etscrivner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/etscrivner/subscriptions",
      "organizations_url": "https://api.github.com/users/etscrivner/orgs",
      "repos_url": "https://api.github.com/users/etscrivner/repos",
      "events_url": "https://api.github.com/users/etscrivner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/etscrivner/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "91fa15aaebdf99fb0d1e2d811f765a5dd3fc3a93",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91fa15aaebdf99fb0d1e2d811f765a5dd3fc3a93",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/91fa15aaebdf99fb0d1e2d811f765a5dd3fc3a93"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "9fa0420160ee686a7c79abdbe25179cb9af6651b",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb9ad043f8b82c7d507ee729121658073eb894f8/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb9ad043f8b82c7d507ee729121658073eb894f8/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=fb9ad043f8b82c7d507ee729121658073eb894f8",
        "patch": "@@ -45,7 +45,6 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"listreceivedbyaddress\", 0, \"minconf\" },\n     { \"listreceivedbyaddress\", 1, \"include_empty\" },\n     { \"listreceivedbyaddress\", 2, \"include_watchonly\" },\n-    { \"listreceivedbyaddress\", 3, \"address_filter\" },\n     { \"listreceivedbyaccount\", 0, \"minconf\" },\n     { \"listreceivedbyaccount\", 1, \"include_empty\" },\n     { \"listreceivedbyaccount\", 2, \"include_watchonly\" },"
      },
      {
        "sha": "9e8667c60010477aadfbabdd8da075029e144965",
        "filename": "test/functional/wallet_listreceivedby.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb9ad043f8b82c7d507ee729121658073eb894f8/test/functional/wallet_listreceivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb9ad043f8b82c7d507ee729121658073eb894f8/test/functional/wallet_listreceivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listreceivedby.py?ref=fb9ad043f8b82c7d507ee729121658073eb894f8",
        "patch": "@@ -68,6 +68,10 @@ def run_test(self):\n         res = self.nodes[1].listreceivedbyaddress(minconf=0, include_empty=True, include_watchonly=True, address_filter=addr)\n         assert_array_result(res, {\"address\": addr}, expected)\n         assert_equal(len(res), 1)\n+        # Test for regression on CLI calls with address string (#14173)\n+        cli_res = self.nodes[1].cli.listreceivedbyaddress(0, True, True, addr)\n+        assert_array_result(cli_res, {\"address\": addr}, expected)\n+        assert_equal(len(cli_res), 1)\n         # Error on invalid address\n         assert_raises_rpc_error(-4, \"address_filter parameter was invalid\", self.nodes[1].listreceivedbyaddress, minconf=0, include_empty=True, include_watchonly=True, address_filter=\"bamboozling\")\n         # Another address receive money"
      }
    ]
  },
  {
    "sha": "7edebedef10457dfc3062f52b180c91f332d69f0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZWRlYmVkZWYxMDQ1N2RmYzMwNjJmNTJiMTgwYzkxZjMzMmQ2OWYw",
    "commit": {
      "author": {
        "name": "Jon Layton",
        "email": "me@jonl.io",
        "date": "2018-11-03T10:03:50Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-11-28T20:35:05Z"
      },
      "message": "build: Remove illegal spacing in darwin.mk\n\nGithub-Pull: #14647\nRebased-From: 63c74d2d3abcb685c773c3ad1414da6ad062a55d",
      "tree": {
        "sha": "3f7df14a7a108e94c60b10f1de3b93976047b24c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3f7df14a7a108e94c60b10f1de3b93976047b24c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7edebedef10457dfc3062f52b180c91f332d69f0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7edebedef10457dfc3062f52b180c91f332d69f0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7edebedef10457dfc3062f52b180c91f332d69f0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7edebedef10457dfc3062f52b180c91f332d69f0/comments",
    "author": {
      "login": "ch4ot1c",
      "id": 2287825,
      "node_id": "MDQ6VXNlcjIyODc4MjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2287825?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ch4ot1c",
      "html_url": "https://github.com/ch4ot1c",
      "followers_url": "https://api.github.com/users/ch4ot1c/followers",
      "following_url": "https://api.github.com/users/ch4ot1c/following{/other_user}",
      "gists_url": "https://api.github.com/users/ch4ot1c/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ch4ot1c/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ch4ot1c/subscriptions",
      "organizations_url": "https://api.github.com/users/ch4ot1c/orgs",
      "repos_url": "https://api.github.com/users/ch4ot1c/repos",
      "events_url": "https://api.github.com/users/ch4ot1c/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ch4ot1c/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fb9ad043f8b82c7d507ee729121658073eb894f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb9ad043f8b82c7d507ee729121658073eb894f8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fb9ad043f8b82c7d507ee729121658073eb894f8"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "c7671c1548b777aa7db26d303e15d04cfc019642",
        "filename": "depends/builders/darwin.mk",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7edebedef10457dfc3062f52b180c91f332d69f0/depends/builders/darwin.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7edebedef10457dfc3062f52b180c91f332d69f0/depends/builders/darwin.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/builders/darwin.mk?ref=7edebedef10457dfc3062f52b180c91f332d69f0",
        "patch": "@@ -1,13 +1,13 @@\n-build_darwin_CC: = $(shell xcrun -f clang)\n-build_darwin_CXX: = $(shell xcrun -f clang++)\n-build_darwin_AR: = $(shell xcrun -f ar)\n-build_darwin_RANLIB: = $(shell xcrun -f ranlib)\n-build_darwin_STRIP: = $(shell xcrun -f strip)\n-build_darwin_OTOOL: = $(shell xcrun -f otool)\n-build_darwin_NM: = $(shell xcrun -f nm)\n+build_darwin_CC:=$(shell xcrun -f clang)\n+build_darwin_CXX:=$(shell xcrun -f clang++)\n+build_darwin_AR:=$(shell xcrun -f ar)\n+build_darwin_RANLIB:=$(shell xcrun -f ranlib)\n+build_darwin_STRIP:=$(shell xcrun -f strip)\n+build_darwin_OTOOL:=$(shell xcrun -f otool)\n+build_darwin_NM:=$(shell xcrun -f nm)\n build_darwin_INSTALL_NAME_TOOL:=$(shell xcrun -f install_name_tool)\n-build_darwin_SHA256SUM = shasum -a 256\n-build_darwin_DOWNLOAD = curl --location --fail --connect-timeout $(DOWNLOAD_CONNECT_TIMEOUT) --retry $(DOWNLOAD_RETRIES) -o\n+build_darwin_SHA256SUM=shasum -a 256\n+build_darwin_DOWNLOAD=curl --location --fail --connect-timeout $(DOWNLOAD_CONNECT_TIMEOUT) --retry $(DOWNLOAD_RETRIES) -o\n \n #darwin host on darwin builder. overrides darwin host preferences.\n darwin_CC=$(shell xcrun -f clang) -mmacosx-version-min=$(OSX_MIN_VERSION)"
      }
    ]
  },
  {
    "sha": "ec71f06a8d8f3d476542880673c6814e3311c9fe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYzcxZjA2YThkOGYzZDQ3NjU0Mjg4MDY3M2M2ODE0ZTMzMTFjOWZl",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-11-09T13:57:13Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-11-28T20:35:05Z"
      },
      "message": "build: Add bitcoin-tx.exe into Windows installer\n\nGithub-Pull: #14698\nRebased-From: 5c5902acc515c8f46ad73222cd57a29c4c13b92c",
      "tree": {
        "sha": "0c51f133360c4b8f6fca79d8f914fd68e8b8c6bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0c51f133360c4b8f6fca79d8f914fd68e8b8c6bd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ec71f06a8d8f3d476542880673c6814e3311c9fe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec71f06a8d8f3d476542880673c6814e3311c9fe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ec71f06a8d8f3d476542880673c6814e3311c9fe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec71f06a8d8f3d476542880673c6814e3311c9fe/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7edebedef10457dfc3062f52b180c91f332d69f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7edebedef10457dfc3062f52b180c91f332d69f0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7edebedef10457dfc3062f52b180c91f332d69f0"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8972c47f4fe3e57eb7ce2182892d45ad5af5919f",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec71f06a8d8f3d476542880673c6814e3311c9fe/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec71f06a8d8f3d476542880673c6814e3311c9fe/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=ec71f06a8d8f3d476542880673c6814e3311c9fe",
        "patch": "@@ -19,6 +19,7 @@ endif\n BITCOIND_BIN=$(top_builddir)/src/$(BITCOIN_DAEMON_NAME)$(EXEEXT)\n BITCOIN_QT_BIN=$(top_builddir)/src/qt/$(BITCOIN_GUI_NAME)$(EXEEXT)\n BITCOIN_CLI_BIN=$(top_builddir)/src/$(BITCOIN_CLI_NAME)$(EXEEXT)\n+BITCOIN_TX_BIN=$(top_builddir)/src/$(BITCOIN_TX_NAME)$(EXEEXT)\n BITCOIN_WIN_INSTALLER=$(PACKAGE)-$(PACKAGE_VERSION)-win$(WINDOWS_BITS)-setup$(EXEEXT)\n \n empty :=\n@@ -74,6 +75,7 @@ $(BITCOIN_WIN_INSTALLER): all-recursive\n \tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM) $(BITCOIND_BIN) $(top_builddir)/release\n \tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM) $(BITCOIN_QT_BIN) $(top_builddir)/release\n \tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM) $(BITCOIN_CLI_BIN) $(top_builddir)/release\n+\tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM) $(BITCOIN_TX_BIN) $(top_builddir)/release\n \t@test -f $(MAKENSIS) && $(MAKENSIS) -V2 $(top_builddir)/share/setup.nsi || \\\n \t  echo error: could not build $@\n \t@echo built $@\n@@ -167,6 +169,9 @@ $(BITCOIND_BIN): FORCE\n $(BITCOIN_CLI_BIN): FORCE\n \t$(MAKE) -C src $(@F)\n \n+$(BITCOIN_TX_BIN): FORCE\n+\t$(MAKE) -C src $(@F)\n+\n if USE_LCOV\n LCOV_FILTER_PATTERN=-p \"/usr/include/\" -p \"src/leveldb/\" -p \"src/bench/\" -p \"src/univalue\" -p \"src/crypto/ctaes\" -p \"src/secp256k1\"\n "
      },
      {
        "sha": "6542370f97e77f0b523ff0e50e62c18a5061bd64",
        "filename": "share/setup.nsi.in",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec71f06a8d8f3d476542880673c6814e3311c9fe/share/setup.nsi.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec71f06a8d8f3d476542880673c6814e3311c9fe/share/setup.nsi.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/setup.nsi.in?ref=ec71f06a8d8f3d476542880673c6814e3311c9fe",
        "patch": "@@ -80,6 +80,7 @@ Section -Main SEC0000\n     SetOutPath $INSTDIR\\daemon\n     File @abs_top_srcdir@/release/@BITCOIN_DAEMON_NAME@@EXEEXT@\n     File @abs_top_srcdir@/release/@BITCOIN_CLI_NAME@@EXEEXT@\n+    File @abs_top_srcdir@/release/@BITCOIN_TX_NAME@@EXEEXT@\n     SetOutPath $INSTDIR\\doc\n     File /r /x Makefile* @abs_top_srcdir@/doc\\*.*\n     SetOutPath $INSTDIR"
      }
    ]
  },
  {
    "sha": "542651cfb408d10e6eaaa24ad985c95e51f88f75",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NDI2NTFjZmI0MDhkMTBlNmVhYWEyNGFkOTg1Yzk1ZTUxZjg4Zjc1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-11-20T23:31:18Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-11-28T20:35:05Z"
      },
      "message": "travis: Remove deprecated sudo",
      "tree": {
        "sha": "6d1bce64f12a47f4a301c7e63b0904a31814eadf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6d1bce64f12a47f4a301c7e63b0904a31814eadf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/542651cfb408d10e6eaaa24ad985c95e51f88f75",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/542651cfb408d10e6eaaa24ad985c95e51f88f75",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/542651cfb408d10e6eaaa24ad985c95e51f88f75",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/542651cfb408d10e6eaaa24ad985c95e51f88f75/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ec71f06a8d8f3d476542880673c6814e3311c9fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec71f06a8d8f3d476542880673c6814e3311c9fe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ec71f06a8d8f3d476542880673c6814e3311c9fe"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 0,
      "deletions": 2
    },
    "files": [
      {
        "sha": "91b5af0f31624c8ce2a505d807251ec4d1d9f272",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/542651cfb408d10e6eaaa24ad985c95e51f88f75/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/542651cfb408d10e6eaaa24ad985c95e51f88f75/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=542651cfb408d10e6eaaa24ad985c95e51f88f75",
        "patch": "@@ -1,4 +1,3 @@\n-sudo: required\n dist: trusty\n os: linux\n language: minimal\n@@ -143,7 +142,6 @@ jobs:\n         BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports --enable-werror\"\n     - stage: lint\n       env:\n-      sudo: false\n       cache: false\n       language: python\n       python: '3.6'"
      }
    ]
  },
  {
    "sha": "9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZjU1NjYyMmM1N2QzZjdhMGZkYzhlMzgwN2ZkNzk4ZWU0YjVhMmZl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-11-28T20:57:47Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-11-28T20:58:18Z"
      },
      "message": "Merge #14328: [0.17] Backports\n\n542651cfb4 travis: Remove deprecated sudo (MarcoFalke)\nec71f06a8d build: Add bitcoin-tx.exe into Windows installer (Chun Kuan Lee)\n7edebedef1 build: Remove illegal spacing in darwin.mk (Jon Layton)\nfb9ad043f8 Fix listreceivedbyaddress not taking address as a string (Eric Scrivner)\n91fa15aaeb wallet: Avoid potential use of unitialized value bnb_used in CWallet::CreateTransaction(...) (practicalswift)\n96f15e8bb3 Tests: Fix a comment (fridokus)\n60f7a97930 qa: Add test to ensure node can generate all help texts at runtime (MarcoFalke)\n2f9fd29321 disallow oversized CBlockHeaderAndShortTxIDs (Kaz Wesley)\n5331ad0506 fix a deserialization overflow edge case (Kaz Wesley)\n94065024c7 add a test demonstrating an overflow in a deserialization edge case (Kaz Wesley)\n85aacc41ba Add autogen.sh in ARM Cross-compilation (Walter)\nbb90695551 [wallet] Ensure wallet is unlocked before signing (gustavonalle)\n\nPull request description:\n\nTree-SHA512: d82813134e5fc5437fe690127a4701d7ba66bf27799d7ecb1fbc2cc4dd81b6b3f708c1f314b725e8a3a6525ffa388299e277157f784f762256e01afb24822b25",
      "tree": {
        "sha": "6d1bce64f12a47f4a301c7e63b0904a31814eadf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6d1bce64f12a47f4a301c7e63b0904a31814eadf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJb/wFqAAoJENLqSFDnUoslMqcP/0n0WMGDlh8cvH2gm8I2dmB8\nExAw/NZqVSpgyK5EfdG9UzD297GxQKJfMg91K6in66/chAzN7vHdn0rfrFmQJzF/\n3K+mBTOv07dGUAEX5/e+AcIUar3jK42C2ODeumx3hwMZFCeTq/KRnItlxXa2uo0F\nm0ZVoCx/tDp8h7mRdwi9DvW6dOrl3JIRYBdm7iJjoLNSc66zOx3ASjGxtWLrT32r\n1RDzf/SiCgutc+BIdLnrfIH7Iv7YsMvEkQoAOwJ6lnP+hAPUrWP7EVY6Cqggo3uV\nM7YBNLmjnnODeissX8WYia5D9QwUSXuxdYRnCiJbWZgOOVVy56YVXm0WUZ1j+hd/\n66Guv57Z6VRK86+L6cSHQAtpd6gxAcfXAbOibBG1351c4BjZxdeg1JL0R6vu6ZQG\nBa206nPCTtdquvdXH1EeuJKGNkyk+dg0A7w5W5aitNyZ5g91eD+hx9lYSMuag2fh\nQRTZJhqXA0iOLiVGT+lTQB30pSal+GBcqXn+e/rqBVDNPPy4jZ7aE9I2Xr813xu2\n71ezifsEuUIxk19X0E6Hy+Su9HXHGkurC+6JPcDTX5ST+vvXxiFOxB4J8DSXepFi\nSKkyuw1YG08ydaP9pCXWxgYo97L2ufrrfjnlsafFB9H++XGZrkCXM0OoiqRko6WJ\nXIfsJQd8AeB6ceIzJL64\n=BcRf\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIP5YT5A0/zILOgqgxfm+0yfjfRf4ZtSz9NhiuB0FtJgRCP/wED2b9oeSj7j2\nDLm+hKEBAK8I8CAntHibj0AzBD48emBryaZUnsZ2LzfRbeoZqnDV01dQqQjxBFv/\nAW3wCFnF9jh1jfY8AIPf4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRh\nci5vcGVudGltZXN0YW1wcy5vcmf/8BBW7NVK3fdzq0txd6XqgvYHCPAQti30XjVc\nPcMX0qfz0125igjxBFv/AW3wCOYTCyONdh0sAIPf4w0u+QyOKShodHRwczovL2Zp\nbm5leS5jYWxlbmRhci5ldGVybml0eXdhbGwuY29t//AQ57T9dkjGM+ulEI1s2Vmh\nFAjwIFBcNPeX65F4tC4vPykKDbsb+yoNdSvYQbTSZPCP5lTeCPEEW/8BbPAIqUMN\nIPpbMSsAg9/jDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGlt\nZXN0YW1wcy5vcmfwEPPntNxFMgIL6vfxprmXdzkI8QRb/wFs8Ag2pypPfm3oDwCD\n3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5kYXIuY2F0YWxsYXh5LmNvbQ==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 6d1bce64f12a47f4a301c7e63b0904a31814eadf\nparent 5150accdd2a7c7f0edf964d56bd7d34b5f740cdc\nparent 542651cfb408d10e6eaaa24ad985c95e51f88f75\nauthor MarcoFalke <falke.marco@gmail.com> 1543438667 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1543438698 -0500\n\nMerge #14328: [0.17] Backports\n\n542651cfb4 travis: Remove deprecated sudo (MarcoFalke)\nec71f06a8d build: Add bitcoin-tx.exe into Windows installer (Chun Kuan Lee)\n7edebedef1 build: Remove illegal spacing in darwin.mk (Jon Layton)\nfb9ad043f8 Fix listreceivedbyaddress not taking address as a string (Eric Scrivner)\n91fa15aaeb wallet: Avoid potential use of unitialized value bnb_used in CWallet::CreateTransaction(...) (practicalswift)\n96f15e8bb3 Tests: Fix a comment (fridokus)\n60f7a97930 qa: Add test to ensure node can generate all help texts at runtime (MarcoFalke)\n2f9fd29321 disallow oversized CBlockHeaderAndShortTxIDs (Kaz Wesley)\n5331ad0506 fix a deserialization overflow edge case (Kaz Wesley)\n94065024c7 add a test demonstrating an overflow in a deserialization edge case (Kaz Wesley)\n85aacc41ba Add autogen.sh in ARM Cross-compilation (Walter)\nbb90695551 [wallet] Ensure wallet is unlocked before signing (gustavonalle)\n\nPull request description:\n\nTree-SHA512: d82813134e5fc5437fe690127a4701d7ba66bf27799d7ecb1fbc2cc4dd81b6b3f708c1f314b725e8a3a6525ffa388299e277157f784f762256e01afb24822b25\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5150accdd2a7c7f0edf964d56bd7d34b5f740cdc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5150accdd2a7c7f0edf964d56bd7d34b5f740cdc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5150accdd2a7c7f0edf964d56bd7d34b5f740cdc"
      },
      {
        "sha": "542651cfb408d10e6eaaa24ad985c95e51f88f75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/542651cfb408d10e6eaaa24ad985c95e51f88f75",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/542651cfb408d10e6eaaa24ad985c95e51f88f75"
      }
    ],
    "stats": {
      "total": 119,
      "additions": 101,
      "deletions": 18
    },
    "files": [
      {
        "sha": "91b5af0f31624c8ce2a505d807251ec4d1d9f272",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe",
        "patch": "@@ -1,4 +1,3 @@\n-sudo: required\n dist: trusty\n os: linux\n language: minimal\n@@ -143,7 +142,6 @@ jobs:\n         BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports --enable-werror\"\n     - stage: lint\n       env:\n-      sudo: false\n       cache: false\n       language: python\n       python: '3.6'"
      },
      {
        "sha": "8972c47f4fe3e57eb7ce2182892d45ad5af5919f",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe",
        "patch": "@@ -19,6 +19,7 @@ endif\n BITCOIND_BIN=$(top_builddir)/src/$(BITCOIN_DAEMON_NAME)$(EXEEXT)\n BITCOIN_QT_BIN=$(top_builddir)/src/qt/$(BITCOIN_GUI_NAME)$(EXEEXT)\n BITCOIN_CLI_BIN=$(top_builddir)/src/$(BITCOIN_CLI_NAME)$(EXEEXT)\n+BITCOIN_TX_BIN=$(top_builddir)/src/$(BITCOIN_TX_NAME)$(EXEEXT)\n BITCOIN_WIN_INSTALLER=$(PACKAGE)-$(PACKAGE_VERSION)-win$(WINDOWS_BITS)-setup$(EXEEXT)\n \n empty :=\n@@ -74,6 +75,7 @@ $(BITCOIN_WIN_INSTALLER): all-recursive\n \tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM) $(BITCOIND_BIN) $(top_builddir)/release\n \tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM) $(BITCOIN_QT_BIN) $(top_builddir)/release\n \tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM) $(BITCOIN_CLI_BIN) $(top_builddir)/release\n+\tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM) $(BITCOIN_TX_BIN) $(top_builddir)/release\n \t@test -f $(MAKENSIS) && $(MAKENSIS) -V2 $(top_builddir)/share/setup.nsi || \\\n \t  echo error: could not build $@\n \t@echo built $@\n@@ -167,6 +169,9 @@ $(BITCOIND_BIN): FORCE\n $(BITCOIN_CLI_BIN): FORCE\n \t$(MAKE) -C src $(@F)\n \n+$(BITCOIN_TX_BIN): FORCE\n+\t$(MAKE) -C src $(@F)\n+\n if USE_LCOV\n LCOV_FILTER_PATTERN=-p \"/usr/include/\" -p \"src/leveldb/\" -p \"src/bench/\" -p \"src/univalue\" -p \"src/crypto/ctaes\" -p \"src/secp256k1\"\n "
      },
      {
        "sha": "c7671c1548b777aa7db26d303e15d04cfc019642",
        "filename": "depends/builders/darwin.mk",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe/depends/builders/darwin.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe/depends/builders/darwin.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/builders/darwin.mk?ref=9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe",
        "patch": "@@ -1,13 +1,13 @@\n-build_darwin_CC: = $(shell xcrun -f clang)\n-build_darwin_CXX: = $(shell xcrun -f clang++)\n-build_darwin_AR: = $(shell xcrun -f ar)\n-build_darwin_RANLIB: = $(shell xcrun -f ranlib)\n-build_darwin_STRIP: = $(shell xcrun -f strip)\n-build_darwin_OTOOL: = $(shell xcrun -f otool)\n-build_darwin_NM: = $(shell xcrun -f nm)\n+build_darwin_CC:=$(shell xcrun -f clang)\n+build_darwin_CXX:=$(shell xcrun -f clang++)\n+build_darwin_AR:=$(shell xcrun -f ar)\n+build_darwin_RANLIB:=$(shell xcrun -f ranlib)\n+build_darwin_STRIP:=$(shell xcrun -f strip)\n+build_darwin_OTOOL:=$(shell xcrun -f otool)\n+build_darwin_NM:=$(shell xcrun -f nm)\n build_darwin_INSTALL_NAME_TOOL:=$(shell xcrun -f install_name_tool)\n-build_darwin_SHA256SUM = shasum -a 256\n-build_darwin_DOWNLOAD = curl --location --fail --connect-timeout $(DOWNLOAD_CONNECT_TIMEOUT) --retry $(DOWNLOAD_RETRIES) -o\n+build_darwin_SHA256SUM=shasum -a 256\n+build_darwin_DOWNLOAD=curl --location --fail --connect-timeout $(DOWNLOAD_CONNECT_TIMEOUT) --retry $(DOWNLOAD_RETRIES) -o\n \n #darwin host on darwin builder. overrides darwin host preferences.\n darwin_CC=$(shell xcrun -f clang) -mmacosx-version-min=$(OSX_MIN_VERSION)"
      },
      {
        "sha": "4a09bed2b2327ed39501eedad3262f8fee49ede6",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe",
        "patch": "@@ -279,6 +279,7 @@ To build executables for ARM:\n     cd depends\n     make HOST=arm-linux-gnueabihf NO_QT=1\n     cd ..\n+    ./autogen.sh\n     ./configure --prefix=$PWD/depends/arm-linux-gnueabihf --enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\n     make\n "
      },
      {
        "sha": "6542370f97e77f0b523ff0e50e62c18a5061bd64",
        "filename": "share/setup.nsi.in",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe/share/setup.nsi.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe/share/setup.nsi.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/setup.nsi.in?ref=9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe",
        "patch": "@@ -80,6 +80,7 @@ Section -Main SEC0000\n     SetOutPath $INSTDIR\\daemon\n     File @abs_top_srcdir@/release/@BITCOIN_DAEMON_NAME@@EXEEXT@\n     File @abs_top_srcdir@/release/@BITCOIN_CLI_NAME@@EXEEXT@\n+    File @abs_top_srcdir@/release/@BITCOIN_TX_NAME@@EXEEXT@\n     SetOutPath $INSTDIR\\doc\n     File /r /x Makefile* @abs_top_srcdir@/doc\\*.*\n     SetOutPath $INSTDIR"
      },
      {
        "sha": "0c2b83ebcfafec942725fb5accc0236e2088f0ba",
        "filename": "src/blockencodings.h",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe/src/blockencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe/src/blockencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.h?ref=9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe",
        "patch": "@@ -52,12 +52,12 @@ class BlockTransactionsRequest {\n                 }\n             }\n \n-            uint16_t offset = 0;\n+            int32_t offset = 0;\n             for (size_t j = 0; j < indexes.size(); j++) {\n-                if (uint64_t(indexes[j]) + uint64_t(offset) > std::numeric_limits<uint16_t>::max())\n+                if (int32_t(indexes[j]) + offset > std::numeric_limits<uint16_t>::max())\n                     throw std::ios_base::failure(\"indexes overflowed 16 bits\");\n                 indexes[j] = indexes[j] + offset;\n-                offset = indexes[j] + 1;\n+                offset = int32_t(indexes[j]) + 1;\n             }\n         } else {\n             for (size_t i = 0; i < indexes.size(); i++) {\n@@ -186,6 +186,9 @@ class CBlockHeaderAndShortTxIDs {\n \n         READWRITE(prefilledtxn);\n \n+        if (BlockTxCount() > std::numeric_limits<uint16_t>::max())\n+            throw std::ios_base::failure(\"indexes overflowed 16 bits\");\n+\n         if (ser_action.ForRead())\n             FillShortTxIDSelector();\n     }"
      },
      {
        "sha": "9fa0420160ee686a7c79abdbe25179cb9af6651b",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe",
        "patch": "@@ -45,7 +45,6 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"listreceivedbyaddress\", 0, \"minconf\" },\n     { \"listreceivedbyaddress\", 1, \"include_empty\" },\n     { \"listreceivedbyaddress\", 2, \"include_watchonly\" },\n-    { \"listreceivedbyaddress\", 3, \"address_filter\" },\n     { \"listreceivedbyaccount\", 0, \"minconf\" },\n     { \"listreceivedbyaccount\", 1, \"include_empty\" },\n     { \"listreceivedbyaccount\", 2, \"include_watchonly\" },"
      },
      {
        "sha": "df62c5ac92164940299df2ccb6e0c3972bcb71d5",
        "filename": "src/test/blockencodings_tests.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 0,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe/src/test/blockencodings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe/src/test/blockencodings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockencodings_tests.cpp?ref=9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe",
        "patch": "@@ -344,4 +344,49 @@ BOOST_AUTO_TEST_CASE(TransactionsRequestSerializationTest) {\n     BOOST_CHECK_EQUAL(req1.indexes[3], req2.indexes[3]);\n }\n \n+BOOST_AUTO_TEST_CASE(TransactionsRequestDeserializationMaxTest) {\n+    // Check that the highest legal index is decoded correctly\n+    BlockTransactionsRequest req0;\n+    req0.blockhash = InsecureRand256();\n+    req0.indexes.resize(1);\n+    req0.indexes[0] = 0xffff;\n+    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n+    stream << req0;\n+\n+    BlockTransactionsRequest req1;\n+    stream >> req1;\n+    BOOST_CHECK_EQUAL(req0.indexes.size(), req1.indexes.size());\n+    BOOST_CHECK_EQUAL(req0.indexes[0], req1.indexes[0]);\n+}\n+\n+BOOST_AUTO_TEST_CASE(TransactionsRequestDeserializationOverflowTest) {\n+    // Any set of index deltas that starts with N values that sum to (0x10000 - N)\n+    // causes the edge-case overflow that was originally not checked for. Such\n+    // a request cannot be created by serializing a real BlockTransactionsRequest\n+    // due to the overflow, so here we'll serialize from raw deltas.\n+    BlockTransactionsRequest req0;\n+    req0.blockhash = InsecureRand256();\n+    req0.indexes.resize(3);\n+    req0.indexes[0] = 0x7000;\n+    req0.indexes[1] = 0x10000 - 0x7000 - 2;\n+    req0.indexes[2] = 0;\n+    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n+    stream << req0.blockhash;\n+    WriteCompactSize(stream, req0.indexes.size());\n+    WriteCompactSize(stream, req0.indexes[0]);\n+    WriteCompactSize(stream, req0.indexes[1]);\n+    WriteCompactSize(stream, req0.indexes[2]);\n+\n+    BlockTransactionsRequest req1;\n+    try {\n+        stream >> req1;\n+        // before patch: deserialize above succeeds and this check fails, demonstrating the overflow\n+        BOOST_CHECK(req1.indexes[1] < req1.indexes[2]);\n+        // this shouldn't be reachable before or after patch\n+        BOOST_CHECK(0);\n+    } catch(std::ios_base::failure &) {\n+        // deserialize should fail\n+    }\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "9ddd21126ada64d4a3e6b3aa982d006314031a50",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe",
        "patch": "@@ -3732,6 +3732,8 @@ UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n \n     // Sign the transaction\n     LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+\n     return SignTransaction(mtx, request.params[1], pwallet, false, request.params[2]);\n }\n "
      },
      {
        "sha": "1a14d7af07cb40595a0e41b0b71c8ebb5c125dc4",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe",
        "patch": "@@ -2846,6 +2846,8 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CTransac\n                             return false;\n                         }\n                     }\n+                } else {\n+                    bnb_used = false;\n                 }\n \n                 const CAmount nChange = nValueIn - nValueToSelect;"
      },
      {
        "sha": "845beb551efdde104618f99b376087597240ee18",
        "filename": "test/functional/mempool_resurrect.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe/test/functional/mempool_resurrect.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe/test/functional/mempool_resurrect.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_resurrect.py?ref=9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe",
        "patch": "@@ -47,12 +47,11 @@ def run_test(self):\n             tx = self.nodes[0].gettransaction(txid)\n             assert(tx[\"confirmations\"] > 0)\n \n-        # Use invalidateblock to re-org back; all transactions should\n-        # end up unconfirmed and back in the mempool\n+        # Use invalidateblock to re-org back\n         for node in self.nodes:\n             node.invalidateblock(blocks[0])\n \n-        # mempool should be empty, all txns confirmed\n+        # All txns should be back in mempool with 0 confirmations\n         assert_equal(set(self.nodes[0].getrawmempool()), set(spends1_id+spends2_id))\n         for txid in spends1_id+spends2_id:\n             tx = self.nodes[0].gettransaction(txid)"
      },
      {
        "sha": "78d6e78aed21a6289a15a6bace6ec9a8f5d559b4",
        "filename": "test/functional/rpc_help.py",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe/test/functional/rpc_help.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe/test/functional/rpc_help.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_help.py?ref=9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe",
        "patch": "@@ -7,12 +7,18 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, assert_raises_rpc_error\n \n+import os\n+\n \n class HelpRpcTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n \n     def run_test(self):\n+        self.test_categories()\n+        self.dump_help()\n+\n+    def test_categories(self):\n         node = self.nodes[0]\n \n         # wrong argument count\n@@ -37,6 +43,15 @@ def run_test(self):\n \n         assert_equal(titles, components)\n \n+    def dump_help(self):\n+        dump_dir = os.path.join(self.options.tmpdir, 'rpc_help_dump')\n+        os.mkdir(dump_dir)\n+        calls = [line.split(' ', 1)[0] for line in self.nodes[0].help().splitlines() if line and not line.startswith('==')]\n+        for call in calls:\n+            with open(os.path.join(dump_dir, call), 'w', encoding='utf-8') as f:\n+                # Make sure the node can generate the help at runtime without crashing\n+                f.write(self.nodes[0].help(call))\n+\n \n if __name__ == '__main__':\n     HelpRpcTest().main()"
      },
      {
        "sha": "823892a3498afcfc260953c651bedce63d0fb373",
        "filename": "test/functional/rpc_signrawtransaction.py",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe/test/functional/rpc_signrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe/test/functional/rpc_signrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signrawtransaction.py?ref=9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe",
        "patch": "@@ -49,6 +49,14 @@ def successful_signing_test(self):\n         rawTxSigned2 = self.nodes[0].signrawtransaction(rawTx, inputs, privKeys)\n         assert_equal(rawTxSigned, rawTxSigned2)\n \n+    def test_with_lock_outputs(self):\n+        \"\"\"Test correct error reporting when trying to sign a locked output\"\"\"\n+        self.nodes[0].encryptwallet(\"password\")\n+        self.restart_node(0)\n+        rawTx = '020000000156b958f78e3f24e0b2f4e4db1255426b0902027cb37e3ddadb52e37c3557dddb0000000000ffffffff01c0a6b929010000001600149a2ee8c77140a053f36018ac8124a6ececc1668a00000000'\n+\n+        assert_raises_rpc_error(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].signrawtransactionwithwallet, rawTx)\n+\n     def script_verification_error_test(self):\n         \"\"\"Create and sign a raw transaction with valid (vin 0), invalid (vin 1) and one missing (vin 2) input script.\n \n@@ -150,6 +158,7 @@ def script_verification_error_test(self):\n     def run_test(self):\n         self.successful_signing_test()\n         self.script_verification_error_test()\n+        self.test_with_lock_outputs()\n \n \n if __name__ == '__main__':"
      },
      {
        "sha": "9e8667c60010477aadfbabdd8da075029e144965",
        "filename": "test/functional/wallet_listreceivedby.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe/test/functional/wallet_listreceivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe/test/functional/wallet_listreceivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listreceivedby.py?ref=9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe",
        "patch": "@@ -68,6 +68,10 @@ def run_test(self):\n         res = self.nodes[1].listreceivedbyaddress(minconf=0, include_empty=True, include_watchonly=True, address_filter=addr)\n         assert_array_result(res, {\"address\": addr}, expected)\n         assert_equal(len(res), 1)\n+        # Test for regression on CLI calls with address string (#14173)\n+        cli_res = self.nodes[1].cli.listreceivedbyaddress(0, True, True, addr)\n+        assert_array_result(cli_res, {\"address\": addr}, expected)\n+        assert_equal(len(cli_res), 1)\n         # Error on invalid address\n         assert_raises_rpc_error(-4, \"address_filter parameter was invalid\", self.nodes[1].listreceivedbyaddress, minconf=0, include_empty=True, include_watchonly=True, address_filter=\"bamboozling\")\n         # Another address receive money"
      }
    ]
  },
  {
    "sha": "df5131bd41ea86c5b404cd6091284d9ac62368e7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZjUxMzFiZDQxZWE4NmM1YjQwNGNkNjA5MTI4NGQ5YWM2MjM2OGU3",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-10-28T13:35:52Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-11-29T03:43:20Z"
      },
      "message": "gui: explicitly disable \"Dark Mode\" appearance on macOS\n\nGithub-Pull: #14593\nRebased-From: cf2f4306fe26305b24bba8833af845ada3a42ec8",
      "tree": {
        "sha": "08a15663e769473aa501c40220b680507db9aa8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/08a15663e769473aa501c40220b680507db9aa8f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df5131bd41ea86c5b404cd6091284d9ac62368e7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAlv/YJwACgkQLuufXMCV\nJsFfzA//Ylm0pmWEU1dC9fyo/HTE9mLU0H5Sd6VN/+V2kdd0l4Gc8Up8Mfd97WbI\nePKJ5e8ylTDh4OW59kd56fnZ44nPW6vZPtKPq1z8YNRNEWjVAwYq62G01enw+d1I\njKLPF6DAl4NNhHcJPLH8EgjzEYnZznoPltoYuRX/Q4ie8qJh7N5So+CE1aGlVtcc\nKDpCV67uWPeuXWbv1ZjIhfIFesDVUdtQGy9FXobNuCt/JjChMBeqpK02pc04G9EQ\nouCJovwZOQOixeuO6wg/fTL8qzwrnKAORHpO12syG3W+e3vPD8W7qsi9DCd1uHpZ\ne/aDVKmvvc3opfH0BuJuwUmFx0LiJHJKSIFj3tE2q9EWq+Byr5WIMh6WRecLMGH4\nPAa2DBwVe9iDRW8LEgNAi2yHLnncQAdILe00+7kkkg9bfE5MeK+SY8CGFGUPi6CQ\nNUEidFEY7YmiaA//JX+eQTz2tieRrDZ3+REeDiq5Xuf3BtQgUsyRwxD0QG1B2FLQ\nzco8T1CXupbnH2YnKx7ZzKE6Y9wWJ8t6mEk+0+zQGR+y69vVS+OlyRCvOARIoerG\nzvbCudlW6jpXK9Y2COza/wngCUP7PCWMRjdSfWv+iIRcCZWkFAcvysm7SRg49Zao\npxGFd4o9bodZESye5W5tS+EbO/vXrp+yrXyKEj3gZZHzJQSpPSY=\n=Ij2/\n-----END PGP SIGNATURE-----",
        "payload": "tree 08a15663e769473aa501c40220b680507db9aa8f\nparent 9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe\nauthor fanquake <fanquake@gmail.com> 1540733752 +0800\ncommitter fanquake <fanquake@gmail.com> 1543463000 +0800\n\ngui: explicitly disable \"Dark Mode\" appearance on macOS\n\nGithub-Pull: #14593\nRebased-From: cf2f4306fe26305b24bba8833af845ada3a42ec8\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df5131bd41ea86c5b404cd6091284d9ac62368e7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/df5131bd41ea86c5b404cd6091284d9ac62368e7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df5131bd41ea86c5b404cd6091284d9ac62368e7/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0c0335a1e84bf21395e4e39ad19154569dd16223",
        "filename": "share/qt/Info.plist.in",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df5131bd41ea86c5b404cd6091284d9ac62368e7/share/qt/Info.plist.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df5131bd41ea86c5b404cd6091284d9ac62368e7/share/qt/Info.plist.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/qt/Info.plist.in?ref=df5131bd41ea86c5b404cd6091284d9ac62368e7",
        "patch": "@@ -99,6 +99,9 @@\n \n   <key>LSAppNapIsDisabled</key>\n     <string>True</string>\n+\n+  <key>NSRequiresAquaSystemAppearance</key>\n+    <string>True</string>\n   \n   <key>LSApplicationCategoryType</key>\n     <string>public.app-category.finance</string>"
      }
    ]
  },
  {
    "sha": "de5e48a46150834a98faf181aded0a9f7a5188eb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZTVlNDhhNDYxNTA4MzRhOThmYWYxODFhZGVkMGE5ZjdhNTE4OGVi",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2018-10-28T22:42:36Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-11-29T03:50:17Z"
      },
      "message": "Bugfix: RPC: Add address_type named param for createmultisig\n\nGithub-Pull: #14596\nRebased-From: d8bf1071cf819fb4e848bb832af8199f084e0434",
      "tree": {
        "sha": "87ff9ec763bc675abb05ace7225132b69dc76f8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/87ff9ec763bc675abb05ace7225132b69dc76f8b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/de5e48a46150834a98faf181aded0a9f7a5188eb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAlv/YhIACgkQLuufXMCV\nJsG5URAArRvMolKvRYlMLL48Cfu+myDxHDFUnCZXleHBebwVcxH4lSwbO98nhwWQ\nTXRYtYorSfpMKQgVHlZhqvBh6LbKESC3apHbKrZYVP1jKmzAPTd8ttyvAha8GP9W\nGRgYG5wq1h0+6Dj3urh5BcdKNXecv/D1gwGPVKQEWsNIr6pyW7mqamP1EOGDjbeL\nb6dV0a9TE25yDAdK3n2VP48bprHa53Z2DcAohO8yOh15AMicc6oDwKgv3EiFKBUK\nbI2eBTPOAHNg75o+L/pgW1zWkflU7n+FoaLFl7ns60c3bhrGciiL7smwqJU+hfxi\n20xvcXuwYRQXOubuC6QEGWhdpvuelFt66lFlVaR4V7cyZf6YGer2WCYSx3lV3i4R\nhNsq2DLeZMI8eRAJvr5Fy5SWQlxbXZnQwl2oJk8hEvkqZZr8iPaCvGsxpCVdNZ5D\nOK2I14ikmJ0ZPgjoomnzW7XWcbEc+8TlPKuzSb1akn7TV1OvCdI9SJUKFmzXIhUC\nYA8H3ECVPYmLckXUd9hqacadNdR5x9kftCdGKv7gqITHeg40M5BDAwLJKxtJQhk2\nfp3aVIgrhTlo6+mNXUEbWBGvt/zuT1Pg5Qh9IFAufkjusDoOV/mctqodWNKbqLZq\nDYwVJuGDuBlJiwIs5CqR36BI/3lzbz+CmkQ2h130//1Uy7yrdzg=\n=u6iq\n-----END PGP SIGNATURE-----",
        "payload": "tree 87ff9ec763bc675abb05ace7225132b69dc76f8b\nparent df5131bd41ea86c5b404cd6091284d9ac62368e7\nauthor Luke Dashjr <luke-jr+git@utopios.org> 1540766556 +0000\ncommitter fanquake <fanquake@gmail.com> 1543463417 +0800\n\nBugfix: RPC: Add address_type named param for createmultisig\n\nGithub-Pull: #14596\nRebased-From: d8bf1071cf819fb4e848bb832af8199f084e0434\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de5e48a46150834a98faf181aded0a9f7a5188eb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/de5e48a46150834a98faf181aded0a9f7a5188eb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de5e48a46150834a98faf181aded0a9f7a5188eb/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "df5131bd41ea86c5b404cd6091284d9ac62368e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df5131bd41ea86c5b404cd6091284d9ac62368e7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/df5131bd41ea86c5b404cd6091284d9ac62368e7"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "88d662878ee1f3dc799b8d9dea0b47db48f06ec8",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de5e48a46150834a98faf181aded0a9f7a5188eb/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de5e48a46150834a98faf181aded0a9f7a5188eb/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=de5e48a46150834a98faf181aded0a9f7a5188eb",
        "patch": "@@ -474,7 +474,7 @@ static const CRPCCommand commands[] =\n     { \"control\",            \"getmemoryinfo\",          &getmemoryinfo,          {\"mode\"} },\n     { \"control\",            \"logging\",                &logging,                {\"include\", \"exclude\"}},\n     { \"util\",               \"validateaddress\",        &validateaddress,        {\"address\"} }, /* uses wallet if enabled */\n-    { \"util\",               \"createmultisig\",         &createmultisig,         {\"nrequired\",\"keys\"} },\n+    { \"util\",               \"createmultisig\",         &createmultisig,         {\"nrequired\",\"keys\",\"address_type\"} },\n     { \"util\",               \"verifymessage\",          &verifymessage,          {\"address\",\"signature\",\"message\"} },\n     { \"util\",               \"signmessagewithprivkey\", &signmessagewithprivkey, {\"privkey\",\"message\"} },\n "
      }
    ]
  },
  {
    "sha": "5782fdcd8c516fd8cc236beefbd9c91e03957f6a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NzgyZmRjZDhjNTE2ZmQ4Y2MyMzZiZWVmYmQ5YzkxZTAzOTU3ZjZh",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-11-08T15:33:05Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-11-29T03:51:47Z"
      },
      "message": "Throw error if CPubKey is invalid during PSBT keypath serialization\n\nGithub-Pull: #14690\nRebased-From: 4e4de10f69d5d705256cadfb15d76314dff16e77",
      "tree": {
        "sha": "8f386aa14bdeebe6a1fcee43595a5824a67529d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8f386aa14bdeebe6a1fcee43595a5824a67529d9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5782fdcd8c516fd8cc236beefbd9c91e03957f6a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAlv/YmMACgkQLuufXMCV\nJsGmKhAAmevvRkFbkymBfKBIfZ3SPm6gPtdiZd1z5axa/rs2VfGCLhvMXc02Xlr+\nfYxl3iaK8yuhN9k/6RxBG06UiSdzxT9QW+qvMJ3DAt/wn+qe/V/5dXfsZ4ZSRx4X\nk+apcLZjZMbB0cBlPVaH7oYbg0Mi1xwFTKnYzgG6Lg2Yt/+9vaSjWP8Akwo3pvpf\nGwIdNhe9ZZnqJzBEzOnMfq4YYwYQZj4wvc0WeNcbHw92XrRWamA3no9r8LkVbusZ\njlJk60WB50vHWkn1vd0NxcwX/hYa93nI1qRbYsuOAhRU3goCx0H/BvKmNTtApjwI\nawjHNlB+kd9BsY31ZBbqpl60ndyZqLKcFk8LF4Mw1st4rPIwtytW9KxoyJb8M3jJ\n/hKQadz+oZo6cmX8OGGnAJt/JvpJAAW4iykAHr6m8dC3k0DLAuKDgIkpgeuk+/7B\nBckt8gyio9ZiLzDYehDdnTe/duJYtzxqxon5mGX80ZfoyooE5WnE/HO3459LbLAM\n+lGaya7YNRE9GNsOpaJv5aauy3EPkN4XsH5TM7FnDflbI0AG3tUD8wS5heQ1murx\nDO5OX50Xg/KHgBKsxS10nxIWjDdoyJQ/hnRCoDq2inULyh6bgqIiPZ6JzMK/FPc0\nT22X1MuHW/J0hwXKyvOj1FCSZjTdW+X7ulsTsYV5rXPXId+SrqY=\n=rTZK\n-----END PGP SIGNATURE-----",
        "payload": "tree 8f386aa14bdeebe6a1fcee43595a5824a67529d9\nparent de5e48a46150834a98faf181aded0a9f7a5188eb\nauthor Gregory Sanders <gsanders87@gmail.com> 1541691185 -0500\ncommitter fanquake <fanquake@gmail.com> 1543463507 +0800\n\nThrow error if CPubKey is invalid during PSBT keypath serialization\n\nGithub-Pull: #14690\nRebased-From: 4e4de10f69d5d705256cadfb15d76314dff16e77\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5782fdcd8c516fd8cc236beefbd9c91e03957f6a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5782fdcd8c516fd8cc236beefbd9c91e03957f6a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5782fdcd8c516fd8cc236beefbd9c91e03957f6a/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "de5e48a46150834a98faf181aded0a9f7a5188eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de5e48a46150834a98faf181aded0a9f7a5188eb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/de5e48a46150834a98faf181aded0a9f7a5188eb"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "245b15410fac053ff73b783aff70281c516c1111",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5782fdcd8c516fd8cc236beefbd9c91e03957f6a/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5782fdcd8c516fd8cc236beefbd9c91e03957f6a/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=5782fdcd8c516fd8cc236beefbd9c91e03957f6a",
        "patch": "@@ -188,6 +188,9 @@ template<typename Stream>\n void SerializeHDKeypaths(Stream& s, const std::map<CPubKey, std::vector<uint32_t>>& hd_keypaths, uint8_t type)\n {\n     for (auto keypath_pair : hd_keypaths) {\n+        if (!keypath_pair.first.IsValid()) {\n+            throw std::ios_base::failure(\"Invalid CPubKey being serialized\");\n+        }\n         SerializeToVector(s, type, MakeSpan(keypath_pair.first));\n         WriteCompactSize(s, keypath_pair.second.size() * sizeof(uint32_t));\n         for (auto& path : keypath_pair.second) {"
      }
    ]
  },
  {
    "sha": "6f04264bbba18dd82157e2f5b8384e2f2b0969f2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZjA0MjY0YmJiYTE4ZGQ4MjE1N2UyZjViODM4NGUyZjJiMDk2OWYy",
    "commit": {
      "author": {
        "name": "Kaz Wesley",
        "email": "kaz@lambdaverse.org",
        "date": "2018-11-14T19:53:27Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-11-29T10:32:05Z"
      },
      "message": "fix uninitialized read when stringifying an addrLocal\n\nReachable from either place where SetIP is used when our best-guess\naddrLocal for a peer is IPv4, but the peer tells us it's reaching us at\nan IPv6 address.\n\nIn that case, SetIP turns an IPv4 address into an IPv6 address without\nsetting the scopeId, which is subsequently read in GetSockAddr during\nCNetAddr::ToStringIP and passed to getnameinfo. Fix by ensuring every\nconstructor initializes the scopeId field with something.\n\nGithub-Pull: #14728\nRebased-From: b7b36decaf878a8c1dcfdb4a27196c730043474b",
      "tree": {
        "sha": "ca25b888c9882c33fb5e88d6a1e45b788bc5760a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ca25b888c9882c33fb5e88d6a1e45b788bc5760a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6f04264bbba18dd82157e2f5b8384e2f2b0969f2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAlv/wDgACgkQLuufXMCV\nJsFA5Q//ZmGXx4/xOulTfZxFdObinTVeGFZbTDGmkKTC2BgGAF3LbQGdeJJZT3/5\nvIlUz+MOyBMHgHurRO7EyPK2nlbrPvK3pyqBvszfBi7fCQN2YnIhcLt+qfB6r06v\nB9Tf0yFDQebIabGblzL5E8ly/RGtp341aowJsh+JNc9LSYy9r8UrKBk3FiL9EJyL\ni7OQAbtA5lRQhrH7OXdW7QofnngGx3IoSA+6eEr2Z+A0sWdjzjtOs32UqVdOMGZp\nG2MONW6mnXPhWJexR9um+h2/22smGBPpwgtlgY/dHjYpkk5oU3VkmMvySLMJB9/Y\nxhAsJ+B/LL9IUsNnxvlCwJQgxFIOhtN36Nf/VBqNaAG4EwOFWjSPChYUmeAwMffe\nb3mr00lhAwGEtekixTgFUflgWm4XRGRiMk4XhnuHmbBZEtCEWlwVWErfk5L3hLOy\nUt+fpvvMiHrwEcrlLFRyGMKntPZ+6bm6cZR7k2RChOgp7k9wJXWeyuW/qPo8CfeK\nyhvijXzYV7eQQKtSsHBSd6vIRNNJwP2+Egcxfl40A6aqt2FR80+9BvsRj7hwkgOI\nXJ//GQnE85AY/D9lAx7P3xlz8jE92RYirPcY/5morjWU8CYO+dPHIVvT3gVxvIpR\n0x+Fl0RuD8LMHE7gnLsOAM5d3SrzA3PMnMM6opfA7Y73cfbH0iM=\n=W24q\n-----END PGP SIGNATURE-----",
        "payload": "tree ca25b888c9882c33fb5e88d6a1e45b788bc5760a\nparent 5782fdcd8c516fd8cc236beefbd9c91e03957f6a\nauthor Kaz Wesley <kaz@lambdaverse.org> 1542225207 -0800\ncommitter fanquake <fanquake@gmail.com> 1543487525 +0800\n\nfix uninitialized read when stringifying an addrLocal\n\nReachable from either place where SetIP is used when our best-guess\naddrLocal for a peer is IPv4, but the peer tells us it's reaching us at\nan IPv6 address.\n\nIn that case, SetIP turns an IPv4 address into an IPv6 address without\nsetting the scopeId, which is subsequently read in GetSockAddr during\nCNetAddr::ToStringIP and passed to getnameinfo. Fix by ensuring every\nconstructor initializes the scopeId field with something.\n\nGithub-Pull: #14728\nRebased-From: b7b36decaf878a8c1dcfdb4a27196c730043474b\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f04264bbba18dd82157e2f5b8384e2f2b0969f2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6f04264bbba18dd82157e2f5b8384e2f2b0969f2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f04264bbba18dd82157e2f5b8384e2f2b0969f2/comments",
    "author": {
      "login": "kazcw",
      "id": 1047859,
      "node_id": "MDQ6VXNlcjEwNDc4NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1047859?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kazcw",
      "html_url": "https://github.com/kazcw",
      "followers_url": "https://api.github.com/users/kazcw/followers",
      "following_url": "https://api.github.com/users/kazcw/following{/other_user}",
      "gists_url": "https://api.github.com/users/kazcw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kazcw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kazcw/subscriptions",
      "organizations_url": "https://api.github.com/users/kazcw/orgs",
      "repos_url": "https://api.github.com/users/kazcw/repos",
      "events_url": "https://api.github.com/users/kazcw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kazcw/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5782fdcd8c516fd8cc236beefbd9c91e03957f6a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5782fdcd8c516fd8cc236beefbd9c91e03957f6a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5782fdcd8c516fd8cc236beefbd9c91e03957f6a"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "9c6daefef688fa640cc52a2b5d6a837880292763",
        "filename": "src/netaddress.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f04264bbba18dd82157e2f5b8384e2f2b0969f2/src/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f04264bbba18dd82157e2f5b8384e2f2b0969f2/src/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.cpp?ref=6f04264bbba18dd82157e2f5b8384e2f2b0969f2",
        "patch": "@@ -17,7 +17,6 @@ static const unsigned char g_internal_prefix[] = { 0xFD, 0x6B, 0x88, 0xC0, 0x87,\n CNetAddr::CNetAddr()\n {\n     memset(ip, 0, sizeof(ip));\n-    scopeId = 0;\n }\n \n void CNetAddr::SetIP(const CNetAddr& ipIn)"
      },
      {
        "sha": "dc55d8b1a8c0b0a1a8d0745322d980f76fec05a2",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f04264bbba18dd82157e2f5b8384e2f2b0969f2/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f04264bbba18dd82157e2f5b8384e2f2b0969f2/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=6f04264bbba18dd82157e2f5b8384e2f2b0969f2",
        "patch": "@@ -33,7 +33,7 @@ class CNetAddr\n {\n     protected:\n         unsigned char ip[16]; // in network byte order\n-        uint32_t scopeId; // for scoped/link-local ipv6 addresses\n+        uint32_t scopeId{0}; // for scoped/link-local ipv6 addresses\n \n     public:\n         CNetAddr();"
      }
    ]
  },
  {
    "sha": "b90157891aabbfbc5162081d4ae66dc0fb05b291",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOTAxNTc4OTFhYWJiZmJjNTE2MjA4MWQ0YWU2NmRjMGZiMDViMjkx",
    "commit": {
      "author": {
        "name": "Kaz Wesley",
        "email": "kaz@lambdaverse.org",
        "date": "2018-11-15T20:34:46Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-11-29T10:32:48Z"
      },
      "message": "add test demonstrating addrLocal UB\n\nGithub-Pull: #14728\nRebased-From: 8ebbef016928811756e46b9086067d1c826797a8",
      "tree": {
        "sha": "29d06cec15fa1069b11d16906f6500ed55799282",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/29d06cec15fa1069b11d16906f6500ed55799282"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b90157891aabbfbc5162081d4ae66dc0fb05b291",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAlv/wGMACgkQLuufXMCV\nJsGfvQ//f6xpMmKstKD1kkpGwc/ndtqPFC6cqYYqx80+nJ8C3IHSFaoXAUrZX12c\n5lkh+ORuJBoBNZWNbc6sSnUWVLxWncO/JD2FXTdjkLBj15qm5RI4qZpB7ce4E9kX\n3Gn7cHNMsj7Pw40uAxqpPi+8YkG0DPobG84WIBJbC8mDuV2PeKaQX1H6kYjAYHZi\nVGMTBCycikMNkPvrhvb+Okp7Kxpe+aP/Ii4GHhpVgaZ73ORYbolUo5AQeSynPgMu\no56y0EzKJUbndZ9BsEUTUI7naj6xFAVhAEEvYZh2sBD5Eu12XRc7q8Ldn89XxqCj\nGDIq92nMIFhByAsPrvE66WE6xdNoMcSmvX+UIeByEXJISQPwz8mJ7IdfFLMjtL7t\nl5crQBI7xK8xyYxePozvjeui+TdV3kO4aqZGeo3YmuOL0RC3Zlv+Ozdri2Uo54YV\n9IkLlmxVabQ/PGAxh2xaENz9/Z10sioc6C6UwNz2+EhP3iR3djUDIZu/Ozg/8VRs\nrscUIsL2l2jUdUt9Mo1tLY8k+zvFmjLSXlIu/1z9xIfNpO2nl4q8ms4DHb1cErbU\nwZVKjY/FPQLRSUy7D5ULQkY3XiqmBJFAbrfYpz0iEdU3ktfgIZX2xMi9Peqs1+Ft\n78OBZxMD75FYcJTwYFnEZWURvPFiJ7KVQDTG926RK7agWtFCiXg=\n=lHev\n-----END PGP SIGNATURE-----",
        "payload": "tree 29d06cec15fa1069b11d16906f6500ed55799282\nparent 6f04264bbba18dd82157e2f5b8384e2f2b0969f2\nauthor Kaz Wesley <kaz@lambdaverse.org> 1542314086 -0800\ncommitter fanquake <fanquake@gmail.com> 1543487568 +0800\n\nadd test demonstrating addrLocal UB\n\nGithub-Pull: #14728\nRebased-From: 8ebbef016928811756e46b9086067d1c826797a8\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b90157891aabbfbc5162081d4ae66dc0fb05b291",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b90157891aabbfbc5162081d4ae66dc0fb05b291",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b90157891aabbfbc5162081d4ae66dc0fb05b291/comments",
    "author": {
      "login": "kazcw",
      "id": 1047859,
      "node_id": "MDQ6VXNlcjEwNDc4NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1047859?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kazcw",
      "html_url": "https://github.com/kazcw",
      "followers_url": "https://api.github.com/users/kazcw/followers",
      "following_url": "https://api.github.com/users/kazcw/following{/other_user}",
      "gists_url": "https://api.github.com/users/kazcw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kazcw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kazcw/subscriptions",
      "organizations_url": "https://api.github.com/users/kazcw/orgs",
      "repos_url": "https://api.github.com/users/kazcw/repos",
      "events_url": "https://api.github.com/users/kazcw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kazcw/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6f04264bbba18dd82157e2f5b8384e2f2b0969f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f04264bbba18dd82157e2f5b8384e2f2b0969f2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6f04264bbba18dd82157e2f5b8384e2f2b0969f2"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 38,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ae4841de5a31b0a0027b87b5f3edd2fbe1d2d0fa",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 0,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b90157891aabbfbc5162081d4ae66dc0fb05b291/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b90157891aabbfbc5162081d4ae66dc0fb05b291/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=b90157891aabbfbc5162081d4ae66dc0fb05b291",
        "patch": "@@ -189,4 +189,42 @@ BOOST_AUTO_TEST_CASE(cnode_simple_test)\n     BOOST_CHECK(pnode2->fFeeler == false);\n }\n \n+// prior to PR #14728, this test triggers an undefined behavior\n+BOOST_AUTO_TEST_CASE(ipv4_peer_with_ipv6_addrMe_test)\n+{\n+    // set up local addresses; all that's necessary to reproduce the bug is\n+    // that a normal IPv4 address is among the entries, but if this address is\n+    // !IsRoutable the undefined behavior is easier to trigger deterministically\n+    {\n+        LOCK(cs_mapLocalHost);\n+        in_addr ipv4AddrLocal;\n+        ipv4AddrLocal.s_addr = 0x0100007f;\n+        CNetAddr addr = CNetAddr(ipv4AddrLocal);\n+        LocalServiceInfo lsi;\n+        lsi.nScore = 23;\n+        lsi.nPort = 42;\n+        mapLocalHost[addr] = lsi;\n+    }\n+\n+    // create a peer with an IPv4 address\n+    in_addr ipv4AddrPeer;\n+    ipv4AddrPeer.s_addr = 0xa0b0c001;\n+    CAddress addr = CAddress(CService(ipv4AddrPeer, 7777), NODE_NETWORK);\n+    std::unique_ptr<CNode> pnode = MakeUnique<CNode>(0, NODE_NETWORK, 0, INVALID_SOCKET, addr, 0, 0, CAddress{}, std::string{}, false);\n+    pnode->fSuccessfullyConnected.store(true);\n+\n+    // the peer claims to be reaching us via IPv6\n+    in6_addr ipv6AddrLocal;\n+    memset(ipv6AddrLocal.s6_addr, 0, 16);\n+    ipv6AddrLocal.s6_addr[0] = 0xcc;\n+    CAddress addrLocal = CAddress(CService(ipv6AddrLocal, 7777), NODE_NETWORK);\n+    pnode->SetAddrLocal(addrLocal);\n+\n+    // before patch, this causes undefined behavior detectable with clang's -fsanitize=memory\n+    AdvertiseLocal(&*pnode);\n+\n+    // suppress no-checks-run warning; if this test fails, it's by triggering a sanitizer\n+    BOOST_CHECK(1);\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "9666dbaf09519dfa53ced9b903cc2f4100c58ec2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NjY2ZGJhZjA5NTE5ZGZhNTNjZWQ5YjkwM2NjMmY0MTAwYzU4ZWMy",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-10-31T10:42:01Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-11-29T10:34:15Z"
      },
      "message": "rpc: Make HTTP RPC debug logging more informative\n\nGithub-Pull: #14618\nRebased-From: 991248649b76a5a071e1360a700f3e2ecf3e1e1f",
      "tree": {
        "sha": "347b8a36273e490a54a4785fd779c4b2dd465d7e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/347b8a36273e490a54a4785fd779c4b2dd465d7e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9666dbaf09519dfa53ced9b903cc2f4100c58ec2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAlv/wLoACgkQLuufXMCV\nJsGfyQ//dbsZHvn4CDaGBJtnbV6Bi2lTbdRInCmErR2/nPWonvdN1ruIukb3TYJt\nziUfo0JXJNEEwEfIaK03QD5lOrET3Z9Pgg0lD66P4VHPq0lCJSGSQwfeu20A5Y74\nL8Zrl1B18HPzc5WjPWsK5iPGEjNtrV2HslxkdnBKU0DE+1CcMgqH9SSIBOgXRWJK\nwiAaEBfLyqadovpYNCeeOzZkGOuVbsu0vYXVrd4mZmngzVJ6eD4y2GE6YbdySA8I\nL62yGEY2cWG6ToLjOHCpb1q1AhLCIMOeXO6fvUc7n5ZnNJbB+iBFOm/HROnbLieG\nJ73f5Jj1KKxUJ4Mj23JYX86p9KiupoFFb2lJuSmqRxYMFewWpDwzzywxs6SKfOtp\nrtLKnaLeFUsJJ0xCSEYdf/Nf8kdUVC967zhiQoykidcrul2yqSflVwYJ1CuFalll\n618JafLgMP71uqnOOLnTioXqFBpat3AdWpaQho9sDfMJ0PouCBDjnqUdg5sLTr9Z\nqjGX36D5qw4JXHzSBPwcX5vhWgWDHMT4dSt2Bz22SznDloDdWPG9TUFr37ltdOtO\nqWhTRAYnDMygfA0tjRcuyQmgOsfFkxlivzLPPNre9bejZlcCc9CTHUHettdRexX3\n1eeyDOt05e+Ky6vbLRE3z7WBXEjET/i5ownbhtoLeJBYuQWBwBI=\n=z3b4\n-----END PGP SIGNATURE-----",
        "payload": "tree 347b8a36273e490a54a4785fd779c4b2dd465d7e\nparent b90157891aabbfbc5162081d4ae66dc0fb05b291\nauthor practicalswift <practicalswift@users.noreply.github.com> 1540982521 +0100\ncommitter fanquake <fanquake@gmail.com> 1543487655 +0800\n\nrpc: Make HTTP RPC debug logging more informative\n\nGithub-Pull: #14618\nRebased-From: 991248649b76a5a071e1360a700f3e2ecf3e1e1f\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9666dbaf09519dfa53ced9b903cc2f4100c58ec2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9666dbaf09519dfa53ced9b903cc2f4100c58ec2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9666dbaf09519dfa53ced9b903cc2f4100c58ec2/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b90157891aabbfbc5162081d4ae66dc0fb05b291",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b90157891aabbfbc5162081d4ae66dc0fb05b291",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b90157891aabbfbc5162081d4ae66dc0fb05b291"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 7,
      "deletions": 3
    },
    "files": [
      {
        "sha": "b3befbe46532a9c40d84163822e6c3f7bb4ae0ff",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9666dbaf09519dfa53ced9b903cc2f4100c58ec2/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9666dbaf09519dfa53ced9b903cc2f4100c58ec2/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=9666dbaf09519dfa53ced9b903cc2f4100c58ec2",
        "patch": "@@ -224,21 +224,25 @@ static void http_request_cb(struct evhttp_request* req, void* arg)\n     }\n     std::unique_ptr<HTTPRequest> hreq(new HTTPRequest(req));\n \n-    LogPrint(BCLog::HTTP, \"Received a %s request for %s from %s\\n\",\n-             RequestMethodString(hreq->GetRequestMethod()), hreq->GetURI(), hreq->GetPeer().ToString());\n-\n     // Early address-based allow check\n     if (!ClientAllowed(hreq->GetPeer())) {\n+        LogPrint(BCLog::HTTP, \"HTTP request from %s rejected: Client network is not allowed RPC access\\n\",\n+                 hreq->GetPeer().ToString());\n         hreq->WriteReply(HTTP_FORBIDDEN);\n         return;\n     }\n \n     // Early reject unknown HTTP methods\n     if (hreq->GetRequestMethod() == HTTPRequest::UNKNOWN) {\n+        LogPrint(BCLog::HTTP, \"HTTP request from %s rejected: Unknown HTTP request method\\n\",\n+                 hreq->GetPeer().ToString());\n         hreq->WriteReply(HTTP_BADMETHOD);\n         return;\n     }\n \n+    LogPrint(BCLog::HTTP, \"Received a %s request for %s from %s\\n\",\n+             RequestMethodString(hreq->GetRequestMethod()), SanitizeString(hreq->GetURI()).substr(0, 100), hreq->GetPeer().ToString());\n+\n     // Find registered handler for prefix\n     std::string strURI = hreq->GetURI();\n     std::string path;"
      }
    ]
  },
  {
    "sha": "79358817e53ac0a7afa64c747115d492a74e3155",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OTM1ODgxN2U1M2FjMGE3YWZhNjRjNzQ3MTE1ZDQ5MmE3NGUzMTU1",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-11-01T16:03:32Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-11-29T10:34:58Z"
      },
      "message": "Add SAFE_CHARS[SAFE_CHARS_URI]: Chars allowed in URIs (RFC 3986)\n\nGithub-Pull: #14618\nRebased-From: ab8c6f24d28ea1d1e6258cf316b4b97a0baf2377",
      "tree": {
        "sha": "33d3b3466e6cc288be8719f928b49f90d51b367c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/33d3b3466e6cc288be8719f928b49f90d51b367c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/79358817e53ac0a7afa64c747115d492a74e3155",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAlv/wOYACgkQLuufXMCV\nJsHy+BAAgxjD7455XKAeNSk2R1vwFKG2hbeNar4eughcfWATqmyNEzjW9VOHf4El\nuZ92wPqy0Uo2DxudzJYCwxKlH6OzFmuuUC0o5azh9VISzfB3vv2hU+mgtU6LeAw7\n0PDzNjmkUVxvSD9YPvphbAosSAgGimka2jM9GDdhgkLQX4BFYsBV53Kp7In5Na3X\nXMrSuFCfB9CX1E0zyuEcxJgZbyrakRVyaYGgQXgwH3x6qqY0i1Z2LM2ESRxDqiCI\nmZMsSl1/GV3/kN5EPVpF4qSg6z8vgMjDdN3s1DmmNBqvQN/kfAugMbc02CFvJ/QE\nkUXzF+lqIlMT9uHCCGsfywFU6gnOk1h262Mlug4m94vX5gLVfHR6kmKterDLjg5U\n9s+HyiP5+DgsgUR5FbASgbRvIGIGZm9XQVFi3hFrFSf9sa+kfTT2gETMC1i2t+ga\n2yjuTfMOCgOdMcOUc8xhsh1O0krVQOAXlxO6cHpgBtUH6MXhF3EBiPgsekawwT2P\nt/v7JVNHrgGpoZrVtCPa3T+0iWPx78PfBqU3w/G+b9Fv/7q1VeFmXqctjMLuK8Cf\n9OTmCJPoU/sDElrFHGh6iTvDYGoM4qFNtPHaYtqSLxFEKnChlAxpC7l4REEtzQqo\n2lGKmjjoB0i4jzXYz4mzsIgiaJKQlUoZWAjoUaXLF2GYvKdeREQ=\n=B2GW\n-----END PGP SIGNATURE-----",
        "payload": "tree 33d3b3466e6cc288be8719f928b49f90d51b367c\nparent 9666dbaf09519dfa53ced9b903cc2f4100c58ec2\nauthor practicalswift <practicalswift@users.noreply.github.com> 1541088212 +0100\ncommitter fanquake <fanquake@gmail.com> 1543487698 +0800\n\nAdd SAFE_CHARS[SAFE_CHARS_URI]: Chars allowed in URIs (RFC 3986)\n\nGithub-Pull: #14618\nRebased-From: ab8c6f24d28ea1d1e6258cf316b4b97a0baf2377\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79358817e53ac0a7afa64c747115d492a74e3155",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/79358817e53ac0a7afa64c747115d492a74e3155",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79358817e53ac0a7afa64c747115d492a74e3155/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9666dbaf09519dfa53ced9b903cc2f4100c58ec2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9666dbaf09519dfa53ced9b903cc2f4100c58ec2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9666dbaf09519dfa53ced9b903cc2f4100c58ec2"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "2a76d0d46a6c1bdf367217e345cba4b3173e5d8e",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/79358817e53ac0a7afa64c747115d492a74e3155/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/79358817e53ac0a7afa64c747115d492a74e3155/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=79358817e53ac0a7afa64c747115d492a74e3155",
        "patch": "@@ -241,7 +241,7 @@ static void http_request_cb(struct evhttp_request* req, void* arg)\n     }\n \n     LogPrint(BCLog::HTTP, \"Received a %s request for %s from %s\\n\",\n-             RequestMethodString(hreq->GetRequestMethod()), SanitizeString(hreq->GetURI()).substr(0, 100), hreq->GetPeer().ToString());\n+             RequestMethodString(hreq->GetRequestMethod()), SanitizeString(hreq->GetURI(), SAFE_CHARS_URI).substr(0, 100), hreq->GetPeer().ToString());\n \n     // Find registered handler for prefix\n     std::string strURI = hreq->GetURI();"
      },
      {
        "sha": "3c6e333a625d3aed89bdb83fe2adac7f5d8cfeca",
        "filename": "src/utilstrencodings.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/79358817e53ac0a7afa64c747115d492a74e3155/src/utilstrencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/79358817e53ac0a7afa64c747115d492a74e3155/src/utilstrencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.cpp?ref=79358817e53ac0a7afa64c747115d492a74e3155",
        "patch": "@@ -19,6 +19,7 @@ static const std::string SAFE_CHARS[] =\n     CHARS_ALPHA_NUM + \" .,;-_/:?@()\", // SAFE_CHARS_DEFAULT\n     CHARS_ALPHA_NUM + \" .,;-_?@\", // SAFE_CHARS_UA_COMMENT\n     CHARS_ALPHA_NUM + \".-_\", // SAFE_CHARS_FILENAME\n+    CHARS_ALPHA_NUM + \"!*'();:@&=+$,/?#[]-_.~%\", // SAFE_CHARS_URI\n };\n \n std::string SanitizeString(const std::string& str, int rule)"
      },
      {
        "sha": "0a06bc3f85256af2f5054a5b72a13b5c8613e094",
        "filename": "src/utilstrencodings.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/79358817e53ac0a7afa64c747115d492a74e3155/src/utilstrencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/79358817e53ac0a7afa64c747115d492a74e3155/src/utilstrencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.h?ref=79358817e53ac0a7afa64c747115d492a74e3155",
        "patch": "@@ -25,6 +25,7 @@ enum SafeChars\n     SAFE_CHARS_DEFAULT, //!< The full set of allowed chars\n     SAFE_CHARS_UA_COMMENT, //!< BIP-0014 subset\n     SAFE_CHARS_FILENAME, //!< Chars allowed in filenames\n+    SAFE_CHARS_URI, //!< Chars allowed in URIs (RFC 3986)\n };\n \n /**"
      }
    ]
  },
  {
    "sha": "f9db08e8ca6821147e12db772d15de106d8c8375",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOWRiMDhlOGNhNjgyMTE0N2UxMmRiNzcyZDE1ZGUxMDZkOGM4Mzc1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-11-09T20:58:19Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-11-30T14:40:57Z"
      },
      "message": "qa: Avoid race in p2p_invalid_block by waiting for the block request\n\nGithub-Pull: #14700\nRebased-From: fa2156820877caf70fc09c7e6244b7cde6ebaf29",
      "tree": {
        "sha": "2e447104b02d7e42e7c3efeae19d197841d7696e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2e447104b02d7e42e7c3efeae19d197841d7696e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f9db08e8ca6821147e12db772d15de106d8c8375",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAlwBTBoACgkQLuufXMCV\nJsHxDg//VYg+PR/cFkClpvW5tllR9RgNLs98UGPmY8eSzlcDIo7X6ct6OjNYXSMk\noss52v546cjR791xe3twjeR4NRRGtjMD+Kj2sx0qmKpyw8WnG+IcrzOF0Ed50rU5\n9e+6Wqqp/Cqd2LGjy24ern600UrOs7/aPAjXYBHekR1obnXfpUk/QENm9hWjMHdx\n9P4BKY72wlwChoawxV69h5v5icwhgIHXEjW2xgtfdt4jpb9EirJvKmvERsiwy+5Z\npaMFAbdINVD1c6jxHPg0dyXhIVDz7w6mXOqL4A95192YOjtPhPqzFK1nxNe7Op1/\nAhyubaUN6lx5Ux70PPodys5NsYPT19fWkO/4/jCbAixQbH1m4NDf+50+YE/qflSX\n0iDoExRp2boj19Sqrcf8B8wWHFBxKDZ0xAYpVoirjMPU4JfmowXAQxmay7EW+dCy\n7bf7LJUdAZRebFuKxpylysovcyCBgFTqOUwbVOgd5gRmODZ9yj+rKhrMxsWsjtHl\nqYbkdBe+zNJ/xZ1lsth4qE/e5Ga+C5CVViQ1/eJW9ZvuZ/l5cYgGTU1cA4Tf0ETW\nCJlPq/+0dlUREx8RIPZc/41kPqA2BiMywvmGhSJXXGR3uwhTmxLyBd0BUAVHUvI0\nNX9suh0LEXIehqy6zwKbijSxBmZXE5N+RvXdvVUwobSpLYP1ZW4=\n=KVeV\n-----END PGP SIGNATURE-----",
        "payload": "tree 2e447104b02d7e42e7c3efeae19d197841d7696e\nparent 79358817e53ac0a7afa64c747115d492a74e3155\nauthor MarcoFalke <falke.marco@gmail.com> 1541797099 -0500\ncommitter fanquake <fanquake@gmail.com> 1543588857 +0800\n\nqa: Avoid race in p2p_invalid_block by waiting for the block request\n\nGithub-Pull: #14700\nRebased-From: fa2156820877caf70fc09c7e6244b7cde6ebaf29\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9db08e8ca6821147e12db772d15de106d8c8375",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f9db08e8ca6821147e12db772d15de106d8c8375",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9db08e8ca6821147e12db772d15de106d8c8375/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "79358817e53ac0a7afa64c747115d492a74e3155",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79358817e53ac0a7afa64c747115d492a74e3155",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/79358817e53ac0a7afa64c747115d492a74e3155"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "a46b0a02a68c953a857d807cc0f5436d4dd16ae2",
        "filename": "test/functional/p2p_invalid_block.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9db08e8ca6821147e12db772d15de106d8c8375/test/functional/p2p_invalid_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9db08e8ca6821147e12db772d15de106d8c8375/test/functional/p2p_invalid_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_block.py?ref=f9db08e8ca6821147e12db772d15de106d8c8375",
        "patch": "@@ -80,9 +80,9 @@ def run_test(self):\n         block2.vtx.append(tx2)\n         assert_equal(block2.hashMerkleRoot, block2.calc_merkle_root())\n         assert_equal(orig_hash, block2.rehash())\n-        assert(block2_orig.vtx != block2.vtx)\n+        assert block2_orig.vtx != block2.vtx\n \n-        node.p2p.send_blocks_and_test([block2], node, success=False, request_block=False, reject_code=16, reject_reason=b'bad-txns-duplicate')\n+        node.p2p.send_blocks_and_test([block2], node, success=False, reject_code=16, reject_reason=b'bad-txns-duplicate')\n \n         # Check transactions for duplicate inputs\n         self.log.info(\"Test duplicate input block.\")\n@@ -92,7 +92,7 @@ def run_test(self):\n         block2_orig.hashMerkleRoot = block2_orig.calc_merkle_root()\n         block2_orig.rehash()\n         block2_orig.solve()\n-        node.p2p.send_blocks_and_test([block2_orig], node, success=False, request_block=False, reject_reason=b'bad-txns-inputs-duplicate')\n+        node.p2p.send_blocks_and_test([block2_orig], node, success=False, reject_reason=b'bad-txns-inputs-duplicate')\n \n         self.log.info(\"Test very broken block.\")\n \n@@ -105,7 +105,7 @@ def run_test(self):\n         block3.rehash()\n         block3.solve()\n \n-        node.p2p.send_blocks_and_test([block3], node, success=False, request_block=False, reject_code=16, reject_reason=b'bad-cb-amount')\n+        node.p2p.send_blocks_and_test([block3], node, success=False, reject_code=16, reject_reason=b'bad-cb-amount')\n \n if __name__ == '__main__':\n     InvalidBlockRequestTest().main()"
      }
    ]
  },
  {
    "sha": "d8bc0ce1da1c3f95ba927f3a1ef357c5e2ead02d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOGJjMGNlMWRhMWMzZjk1YmE5MjdmM2ExZWYzNTdjNWUyZWFkMDJk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-11-30T15:38:40Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-11-30T15:39:27Z"
      },
      "message": "Merge #14835: [0.17] Further Backports\n\nf9db08e8ca qa: Avoid race in p2p_invalid_block by waiting for the block request (MarcoFalke)\n79358817e5 Add SAFE_CHARS[SAFE_CHARS_URI]: Chars allowed in URIs (RFC 3986) (practicalswift)\n9666dbaf09 rpc: Make HTTP RPC debug logging more informative (practicalswift)\nb90157891a add test demonstrating addrLocal UB (Kaz Wesley)\n6f04264bbb fix uninitialized read when stringifying an addrLocal (Kaz Wesley)\n5782fdcd8c Throw error if CPubKey is invalid during PSBT keypath serialization (Gregory Sanders)\nde5e48a461 Bugfix: RPC: Add address_type named param for createmultisig (Luke Dashjr)\ndf5131bd41 gui: explicitly disable \"Dark Mode\" appearance on macOS (fanquake)\n\nPull request description:\n\n  Backports #14593, #14596, #14618, #14690 and #14728 to the 0.17 branch.\n\nTree-SHA512: fcda4b75fcb71bb80cc8bde2a2b98ff5c0239dfa754ac980b1a91a90409502ac7678326399a4fc03a773074339dbf8b3d11750c91fe4302741a954745acfcca1",
      "tree": {
        "sha": "2e447104b02d7e42e7c3efeae19d197841d7696e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2e447104b02d7e42e7c3efeae19d197841d7696e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d8bc0ce1da1c3f95ba927f3a1ef357c5e2ead02d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcAVmvAAoJENLqSFDnUoslV5YP/1zoX6WO4XBNbApvzP0nMrrX\nPWZ1O5s8CtN3CHIouTemDV0Wz8+RhmwBf0U4LUEioIlebvcKkPN0FFBPaR3jnPQJ\nVdpnUld8zuUkmfIcm8BEryQs0j3xDn0Kt6bdIM4eyxnzCED0HaGtYdbNXS+ok9zb\nwCjsOZ/YpMiAkErVASoRMle0perOYwR/6PwPNACcL1XiWXq5muQi1hV1MIundAwV\nGwgYlafxJ8rRtEoGIMee/UvBamLA1DmdZ5ntP8oZFXauVinwbecdqhBJwqMANcH0\nqrcjMYNT6HmpkHBSmCy4H/14p2ccH8d57J4nebbiVIpACX6Xr6lsoATHruQCHQNn\nDrNeC0AXa9o8qMO3+IR7cS3jeNBB7wpjzl0brUU37VMVrxQd6gTb8rl3cx8dpWIz\njXdG4IXfycqIH5BukTJ78UncJCFivQLe/uaxeFT08ijDTFeE6mp6sv/LBbAM0qeh\n8uA5jaH3N7bgoMAuiVLWJDof8PLm2wYquFd7ANuc1rAYqV6DiUzevZ2w+IznaiLX\n5QIoidiGofI4/AU7Rk1FadSONmw8MviSoDQQAiu3WUJ4FnZtmjUOshla2jqjIdYp\nAEIzS8SdmGYzeLOrCgEXahxMJg5LYZ9YcNFFtR868h5ODxUXzV9t9lrHcbDgJ2vv\ntXEJxtnUvmqqWtG3TAvu\n=yAnN\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIPu7mSry4bJlx5ZUsJuMC3fENrLkqs4WJsjFCoikD8x9CP/wECpjTKzIOfQX\nLq95y/pSNUwI8QRcAVmx8AhbaQKFHdrKQwCD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEF9B5iAbMXfMUrnKyRiF\nXMgI8BCCFyvQrC4xcxwK5Pe7wCZuCPEEXAFZsvAIWR42iPbxH7MAg9/jDS75DI4p\nKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5jb23/8BBzzoKk\n8WcH8GWRhw4kXdJXCPEEXAFZsvAIHzM2chxBdSMAg9/jDS75DI4jImh0dHBzOi8v\nYnRjLmNhbGVuZGFyLmNhdGFsbGF4eS5jb23wELjwv5OCixBoWtPEVYNgKpQI8QRc\nAVmx8AiW2/LiKn32FACD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5k\nYXIub3BlbnRpbWVzdGFtcHMub3Jn\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 2e447104b02d7e42e7c3efeae19d197841d7696e\nparent 9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe\nparent f9db08e8ca6821147e12db772d15de106d8c8375\nauthor MarcoFalke <falke.marco@gmail.com> 1543592320 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1543592367 -0500\n\nMerge #14835: [0.17] Further Backports\n\nf9db08e8ca qa: Avoid race in p2p_invalid_block by waiting for the block request (MarcoFalke)\n79358817e5 Add SAFE_CHARS[SAFE_CHARS_URI]: Chars allowed in URIs (RFC 3986) (practicalswift)\n9666dbaf09 rpc: Make HTTP RPC debug logging more informative (practicalswift)\nb90157891a add test demonstrating addrLocal UB (Kaz Wesley)\n6f04264bbb fix uninitialized read when stringifying an addrLocal (Kaz Wesley)\n5782fdcd8c Throw error if CPubKey is invalid during PSBT keypath serialization (Gregory Sanders)\nde5e48a461 Bugfix: RPC: Add address_type named param for createmultisig (Luke Dashjr)\ndf5131bd41 gui: explicitly disable \"Dark Mode\" appearance on macOS (fanquake)\n\nPull request description:\n\n  Backports #14593, #14596, #14618, #14690 and #14728 to the 0.17 branch.\n\nTree-SHA512: fcda4b75fcb71bb80cc8bde2a2b98ff5c0239dfa754ac980b1a91a90409502ac7678326399a4fc03a773074339dbf8b3d11750c91fe4302741a954745acfcca1\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8bc0ce1da1c3f95ba927f3a1ef357c5e2ead02d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d8bc0ce1da1c3f95ba927f3a1ef357c5e2ead02d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8bc0ce1da1c3f95ba927f3a1ef357c5e2ead02d/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9f556622c57d3f7a0fdc8e3807fd798ee4b5a2fe"
      },
      {
        "sha": "f9db08e8ca6821147e12db772d15de106d8c8375",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9db08e8ca6821147e12db772d15de106d8c8375",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f9db08e8ca6821147e12db772d15de106d8c8375"
      }
    ],
    "stats": {
      "total": 69,
      "additions": 59,
      "deletions": 10
    },
    "files": [
      {
        "sha": "0c0335a1e84bf21395e4e39ad19154569dd16223",
        "filename": "share/qt/Info.plist.in",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8bc0ce1da1c3f95ba927f3a1ef357c5e2ead02d/share/qt/Info.plist.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8bc0ce1da1c3f95ba927f3a1ef357c5e2ead02d/share/qt/Info.plist.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/qt/Info.plist.in?ref=d8bc0ce1da1c3f95ba927f3a1ef357c5e2ead02d",
        "patch": "@@ -99,6 +99,9 @@\n \n   <key>LSAppNapIsDisabled</key>\n     <string>True</string>\n+\n+  <key>NSRequiresAquaSystemAppearance</key>\n+    <string>True</string>\n   \n   <key>LSApplicationCategoryType</key>\n     <string>public.app-category.finance</string>"
      },
      {
        "sha": "2a76d0d46a6c1bdf367217e345cba4b3173e5d8e",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8bc0ce1da1c3f95ba927f3a1ef357c5e2ead02d/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8bc0ce1da1c3f95ba927f3a1ef357c5e2ead02d/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=d8bc0ce1da1c3f95ba927f3a1ef357c5e2ead02d",
        "patch": "@@ -224,21 +224,25 @@ static void http_request_cb(struct evhttp_request* req, void* arg)\n     }\n     std::unique_ptr<HTTPRequest> hreq(new HTTPRequest(req));\n \n-    LogPrint(BCLog::HTTP, \"Received a %s request for %s from %s\\n\",\n-             RequestMethodString(hreq->GetRequestMethod()), hreq->GetURI(), hreq->GetPeer().ToString());\n-\n     // Early address-based allow check\n     if (!ClientAllowed(hreq->GetPeer())) {\n+        LogPrint(BCLog::HTTP, \"HTTP request from %s rejected: Client network is not allowed RPC access\\n\",\n+                 hreq->GetPeer().ToString());\n         hreq->WriteReply(HTTP_FORBIDDEN);\n         return;\n     }\n \n     // Early reject unknown HTTP methods\n     if (hreq->GetRequestMethod() == HTTPRequest::UNKNOWN) {\n+        LogPrint(BCLog::HTTP, \"HTTP request from %s rejected: Unknown HTTP request method\\n\",\n+                 hreq->GetPeer().ToString());\n         hreq->WriteReply(HTTP_BADMETHOD);\n         return;\n     }\n \n+    LogPrint(BCLog::HTTP, \"Received a %s request for %s from %s\\n\",\n+             RequestMethodString(hreq->GetRequestMethod()), SanitizeString(hreq->GetURI(), SAFE_CHARS_URI).substr(0, 100), hreq->GetPeer().ToString());\n+\n     // Find registered handler for prefix\n     std::string strURI = hreq->GetURI();\n     std::string path;"
      },
      {
        "sha": "9c6daefef688fa640cc52a2b5d6a837880292763",
        "filename": "src/netaddress.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8bc0ce1da1c3f95ba927f3a1ef357c5e2ead02d/src/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8bc0ce1da1c3f95ba927f3a1ef357c5e2ead02d/src/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.cpp?ref=d8bc0ce1da1c3f95ba927f3a1ef357c5e2ead02d",
        "patch": "@@ -17,7 +17,6 @@ static const unsigned char g_internal_prefix[] = { 0xFD, 0x6B, 0x88, 0xC0, 0x87,\n CNetAddr::CNetAddr()\n {\n     memset(ip, 0, sizeof(ip));\n-    scopeId = 0;\n }\n \n void CNetAddr::SetIP(const CNetAddr& ipIn)"
      },
      {
        "sha": "dc55d8b1a8c0b0a1a8d0745322d980f76fec05a2",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8bc0ce1da1c3f95ba927f3a1ef357c5e2ead02d/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8bc0ce1da1c3f95ba927f3a1ef357c5e2ead02d/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=d8bc0ce1da1c3f95ba927f3a1ef357c5e2ead02d",
        "patch": "@@ -33,7 +33,7 @@ class CNetAddr\n {\n     protected:\n         unsigned char ip[16]; // in network byte order\n-        uint32_t scopeId; // for scoped/link-local ipv6 addresses\n+        uint32_t scopeId{0}; // for scoped/link-local ipv6 addresses\n \n     public:\n         CNetAddr();"
      },
      {
        "sha": "88d662878ee1f3dc799b8d9dea0b47db48f06ec8",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8bc0ce1da1c3f95ba927f3a1ef357c5e2ead02d/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8bc0ce1da1c3f95ba927f3a1ef357c5e2ead02d/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=d8bc0ce1da1c3f95ba927f3a1ef357c5e2ead02d",
        "patch": "@@ -474,7 +474,7 @@ static const CRPCCommand commands[] =\n     { \"control\",            \"getmemoryinfo\",          &getmemoryinfo,          {\"mode\"} },\n     { \"control\",            \"logging\",                &logging,                {\"include\", \"exclude\"}},\n     { \"util\",               \"validateaddress\",        &validateaddress,        {\"address\"} }, /* uses wallet if enabled */\n-    { \"util\",               \"createmultisig\",         &createmultisig,         {\"nrequired\",\"keys\"} },\n+    { \"util\",               \"createmultisig\",         &createmultisig,         {\"nrequired\",\"keys\",\"address_type\"} },\n     { \"util\",               \"verifymessage\",          &verifymessage,          {\"address\",\"signature\",\"message\"} },\n     { \"util\",               \"signmessagewithprivkey\", &signmessagewithprivkey, {\"privkey\",\"message\"} },\n "
      },
      {
        "sha": "245b15410fac053ff73b783aff70281c516c1111",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8bc0ce1da1c3f95ba927f3a1ef357c5e2ead02d/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8bc0ce1da1c3f95ba927f3a1ef357c5e2ead02d/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=d8bc0ce1da1c3f95ba927f3a1ef357c5e2ead02d",
        "patch": "@@ -188,6 +188,9 @@ template<typename Stream>\n void SerializeHDKeypaths(Stream& s, const std::map<CPubKey, std::vector<uint32_t>>& hd_keypaths, uint8_t type)\n {\n     for (auto keypath_pair : hd_keypaths) {\n+        if (!keypath_pair.first.IsValid()) {\n+            throw std::ios_base::failure(\"Invalid CPubKey being serialized\");\n+        }\n         SerializeToVector(s, type, MakeSpan(keypath_pair.first));\n         WriteCompactSize(s, keypath_pair.second.size() * sizeof(uint32_t));\n         for (auto& path : keypath_pair.second) {"
      },
      {
        "sha": "ae4841de5a31b0a0027b87b5f3edd2fbe1d2d0fa",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 0,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8bc0ce1da1c3f95ba927f3a1ef357c5e2ead02d/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8bc0ce1da1c3f95ba927f3a1ef357c5e2ead02d/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=d8bc0ce1da1c3f95ba927f3a1ef357c5e2ead02d",
        "patch": "@@ -189,4 +189,42 @@ BOOST_AUTO_TEST_CASE(cnode_simple_test)\n     BOOST_CHECK(pnode2->fFeeler == false);\n }\n \n+// prior to PR #14728, this test triggers an undefined behavior\n+BOOST_AUTO_TEST_CASE(ipv4_peer_with_ipv6_addrMe_test)\n+{\n+    // set up local addresses; all that's necessary to reproduce the bug is\n+    // that a normal IPv4 address is among the entries, but if this address is\n+    // !IsRoutable the undefined behavior is easier to trigger deterministically\n+    {\n+        LOCK(cs_mapLocalHost);\n+        in_addr ipv4AddrLocal;\n+        ipv4AddrLocal.s_addr = 0x0100007f;\n+        CNetAddr addr = CNetAddr(ipv4AddrLocal);\n+        LocalServiceInfo lsi;\n+        lsi.nScore = 23;\n+        lsi.nPort = 42;\n+        mapLocalHost[addr] = lsi;\n+    }\n+\n+    // create a peer with an IPv4 address\n+    in_addr ipv4AddrPeer;\n+    ipv4AddrPeer.s_addr = 0xa0b0c001;\n+    CAddress addr = CAddress(CService(ipv4AddrPeer, 7777), NODE_NETWORK);\n+    std::unique_ptr<CNode> pnode = MakeUnique<CNode>(0, NODE_NETWORK, 0, INVALID_SOCKET, addr, 0, 0, CAddress{}, std::string{}, false);\n+    pnode->fSuccessfullyConnected.store(true);\n+\n+    // the peer claims to be reaching us via IPv6\n+    in6_addr ipv6AddrLocal;\n+    memset(ipv6AddrLocal.s6_addr, 0, 16);\n+    ipv6AddrLocal.s6_addr[0] = 0xcc;\n+    CAddress addrLocal = CAddress(CService(ipv6AddrLocal, 7777), NODE_NETWORK);\n+    pnode->SetAddrLocal(addrLocal);\n+\n+    // before patch, this causes undefined behavior detectable with clang's -fsanitize=memory\n+    AdvertiseLocal(&*pnode);\n+\n+    // suppress no-checks-run warning; if this test fails, it's by triggering a sanitizer\n+    BOOST_CHECK(1);\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "3c6e333a625d3aed89bdb83fe2adac7f5d8cfeca",
        "filename": "src/utilstrencodings.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8bc0ce1da1c3f95ba927f3a1ef357c5e2ead02d/src/utilstrencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8bc0ce1da1c3f95ba927f3a1ef357c5e2ead02d/src/utilstrencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.cpp?ref=d8bc0ce1da1c3f95ba927f3a1ef357c5e2ead02d",
        "patch": "@@ -19,6 +19,7 @@ static const std::string SAFE_CHARS[] =\n     CHARS_ALPHA_NUM + \" .,;-_/:?@()\", // SAFE_CHARS_DEFAULT\n     CHARS_ALPHA_NUM + \" .,;-_?@\", // SAFE_CHARS_UA_COMMENT\n     CHARS_ALPHA_NUM + \".-_\", // SAFE_CHARS_FILENAME\n+    CHARS_ALPHA_NUM + \"!*'();:@&=+$,/?#[]-_.~%\", // SAFE_CHARS_URI\n };\n \n std::string SanitizeString(const std::string& str, int rule)"
      },
      {
        "sha": "0a06bc3f85256af2f5054a5b72a13b5c8613e094",
        "filename": "src/utilstrencodings.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8bc0ce1da1c3f95ba927f3a1ef357c5e2ead02d/src/utilstrencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8bc0ce1da1c3f95ba927f3a1ef357c5e2ead02d/src/utilstrencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.h?ref=d8bc0ce1da1c3f95ba927f3a1ef357c5e2ead02d",
        "patch": "@@ -25,6 +25,7 @@ enum SafeChars\n     SAFE_CHARS_DEFAULT, //!< The full set of allowed chars\n     SAFE_CHARS_UA_COMMENT, //!< BIP-0014 subset\n     SAFE_CHARS_FILENAME, //!< Chars allowed in filenames\n+    SAFE_CHARS_URI, //!< Chars allowed in URIs (RFC 3986)\n };\n \n /**"
      },
      {
        "sha": "a46b0a02a68c953a857d807cc0f5436d4dd16ae2",
        "filename": "test/functional/p2p_invalid_block.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8bc0ce1da1c3f95ba927f3a1ef357c5e2ead02d/test/functional/p2p_invalid_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8bc0ce1da1c3f95ba927f3a1ef357c5e2ead02d/test/functional/p2p_invalid_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_block.py?ref=d8bc0ce1da1c3f95ba927f3a1ef357c5e2ead02d",
        "patch": "@@ -80,9 +80,9 @@ def run_test(self):\n         block2.vtx.append(tx2)\n         assert_equal(block2.hashMerkleRoot, block2.calc_merkle_root())\n         assert_equal(orig_hash, block2.rehash())\n-        assert(block2_orig.vtx != block2.vtx)\n+        assert block2_orig.vtx != block2.vtx\n \n-        node.p2p.send_blocks_and_test([block2], node, success=False, request_block=False, reject_code=16, reject_reason=b'bad-txns-duplicate')\n+        node.p2p.send_blocks_and_test([block2], node, success=False, reject_code=16, reject_reason=b'bad-txns-duplicate')\n \n         # Check transactions for duplicate inputs\n         self.log.info(\"Test duplicate input block.\")\n@@ -92,7 +92,7 @@ def run_test(self):\n         block2_orig.hashMerkleRoot = block2_orig.calc_merkle_root()\n         block2_orig.rehash()\n         block2_orig.solve()\n-        node.p2p.send_blocks_and_test([block2_orig], node, success=False, request_block=False, reject_reason=b'bad-txns-inputs-duplicate')\n+        node.p2p.send_blocks_and_test([block2_orig], node, success=False, reject_reason=b'bad-txns-inputs-duplicate')\n \n         self.log.info(\"Test very broken block.\")\n \n@@ -105,7 +105,7 @@ def run_test(self):\n         block3.rehash()\n         block3.solve()\n \n-        node.p2p.send_blocks_and_test([block3], node, success=False, request_block=False, reject_code=16, reject_reason=b'bad-cb-amount')\n+        node.p2p.send_blocks_and_test([block3], node, success=False, reject_code=16, reject_reason=b'bad-cb-amount')\n \n if __name__ == '__main__':\n     InvalidBlockRequestTest().main()"
      }
    ]
  },
  {
    "sha": "53dcf2b407f8a2b4ebe372a8f28b7ba073b9eda7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1M2RjZjJiNDA3ZjhhMmI0ZWJlMzcyYThmMjhiN2JhMDczYjllZGE3",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-10-03T05:40:47Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-11-30T16:08:35Z"
      },
      "message": "Remove stale comment in CalculateMaximumSignedInputSize",
      "tree": {
        "sha": "ea43c1ff3f5887abe355002750bad9ba02fd291e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ea43c1ff3f5887abe355002750bad9ba02fd291e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/53dcf2b407f8a2b4ebe372a8f28b7ba073b9eda7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53dcf2b407f8a2b4ebe372a8f28b7ba073b9eda7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/53dcf2b407f8a2b4ebe372a8f28b7ba073b9eda7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53dcf2b407f8a2b4ebe372a8f28b7ba073b9eda7/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d8bc0ce1da1c3f95ba927f3a1ef357c5e2ead02d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8bc0ce1da1c3f95ba927f3a1ef357c5e2ead02d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8bc0ce1da1c3f95ba927f3a1ef357c5e2ead02d"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 0,
      "deletions": 2
    },
    "files": [
      {
        "sha": "2ad82b2e0770ac42ffc6e4d897bcca9576f81e27",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53dcf2b407f8a2b4ebe372a8f28b7ba073b9eda7/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53dcf2b407f8a2b4ebe372a8f28b7ba073b9eda7/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=53dcf2b407f8a2b4ebe372a8f28b7ba073b9eda7",
        "patch": "@@ -1607,8 +1607,6 @@ int CalculateMaximumSignedInputSize(const CTxOut& txout, const CWallet* wallet,\n     CMutableTransaction txn;\n     txn.vin.push_back(CTxIn(COutPoint()));\n     if (!wallet->DummySignInput(txn.vin[0], txout, use_max_sig)) {\n-        // This should never happen, because IsAllFromMe(ISMINE_SPENDABLE)\n-        // implies that we can sign for every input.\n         return -1;\n     }\n     return GetVirtualTransactionInputSize(txn.vin[0]);"
      }
    ]
  },
  {
    "sha": "2a5cc40dc428e9024142ebebeaa97a3a3a4a1fa6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYTVjYzQwZGM0MjhlOTAyNDE0MmViZWJlYWE5N2EzYTNhNGExZmE2",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-10-03T05:41:03Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-11-30T16:08:41Z"
      },
      "message": "CreateTransaction: Assume minimum p2sh-p2wpkh spend size for unknown change",
      "tree": {
        "sha": "1cfbfb58fae07c7e98770e426da469873bd79906",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1cfbfb58fae07c7e98770e426da469873bd79906"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2a5cc40dc428e9024142ebebeaa97a3a3a4a1fa6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a5cc40dc428e9024142ebebeaa97a3a3a4a1fa6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2a5cc40dc428e9024142ebebeaa97a3a3a4a1fa6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a5cc40dc428e9024142ebebeaa97a3a3a4a1fa6/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "53dcf2b407f8a2b4ebe372a8f28b7ba073b9eda7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53dcf2b407f8a2b4ebe372a8f28b7ba073b9eda7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/53dcf2b407f8a2b4ebe372a8f28b7ba073b9eda7"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 59,
      "deletions": 1
    },
    "files": [
      {
        "sha": "c474547b7e4ab8a819fb03a5663423ca9efa57d3",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 44,
        "deletions": 0,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a5cc40dc428e9024142ebebeaa97a3a3a4a1fa6/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a5cc40dc428e9024142ebebeaa97a3a3a4a1fa6/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=2a5cc40dc428e9024142ebebeaa97a3a3a4a1fa6",
        "patch": "@@ -16,6 +16,7 @@\n #include <validation.h>\n #include <wallet/coincontrol.h>\n #include <wallet/test/wallet_test_fixture.h>\n+#include <policy/policy.h>\n \n #include <boost/test/unit_test.hpp>\n #include <univalue.h>\n@@ -374,4 +375,47 @@ BOOST_FIXTURE_TEST_CASE(wallet_disableprivkeys, TestChain100Setup)\n     BOOST_CHECK(!wallet->GetKeyFromPool(pubkey, false));\n }\n \n+// Explicit calculation which is used to test the wallet constant\n+// We get the same virtual size due to rounding(weight/4) for both use_max_sig values\n+static size_t CalculateNestedKeyhashInputSize(bool use_max_sig)\n+{\n+    // Generate ephemeral valid pubkey\n+    CKey key;\n+    key.MakeNewKey(true);\n+    CPubKey pubkey = key.GetPubKey();\n+\n+    // Generate pubkey hash\n+    uint160 key_hash(Hash160(pubkey.begin(), pubkey.end()));\n+\n+    // Create inner-script to enter into keystore. Key hash can't be 0...\n+    CScript inner_script = CScript() << OP_0 << std::vector<unsigned char>(key_hash.begin(), key_hash.end());\n+\n+    // Create outer P2SH script for the output\n+    uint160 script_id(Hash160(inner_script.begin(), inner_script.end()));\n+    CScript script_pubkey = CScript() << OP_HASH160 << std::vector<unsigned char>(script_id.begin(), script_id.end()) << OP_EQUAL;\n+\n+    // Add inner-script to key store and key to watchonly\n+    CBasicKeyStore keystore;\n+    keystore.AddCScript(inner_script);\n+    keystore.AddKeyPubKey(key, pubkey);\n+\n+    // Fill in dummy signatures for fee calculation.\n+    SignatureData sig_data;\n+\n+    if (!ProduceSignature(keystore, use_max_sig ? DUMMY_MAXIMUM_SIGNATURE_CREATOR : DUMMY_SIGNATURE_CREATOR, script_pubkey, sig_data)) {\n+        // We're hand-feeding it correct arguments; shouldn't happen\n+        assert(false);\n+    }\n+\n+    CTxIn tx_in;\n+    UpdateInput(tx_in, sig_data);\n+    return (size_t)GetVirtualTransactionInputSize(tx_in);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(dummy_input_size_test, TestChain100Setup)\n+{\n+    BOOST_CHECK_EQUAL(CalculateNestedKeyhashInputSize(false), DUMMY_NESTED_P2WPKH_INPUT_SIZE);\n+    BOOST_CHECK_EQUAL(CalculateNestedKeyhashInputSize(true), DUMMY_NESTED_P2WPKH_INPUT_SIZE);\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "060325921f5ab9c4e14278eee0a46da83a16fbb2",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a5cc40dc428e9024142ebebeaa97a3a3a4a1fa6/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a5cc40dc428e9024142ebebeaa97a3a3a4a1fa6/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=2a5cc40dc428e9024142ebebeaa97a3a3a4a1fa6",
        "patch": "@@ -2830,7 +2830,14 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CTransac\n                 if (pick_new_inputs) {\n                     nValueIn = 0;\n                     setCoins.clear();\n-                    coin_selection_params.change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+                    int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+                    // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n+                    // as lower-bound to allow BnB to do it's thing\n+                    if (change_spend_size == -1) {\n+                        coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n+                    } else {\n+                        coin_selection_params.change_spend_size = (size_t)change_spend_size;\n+                    }\n                     coin_selection_params.effective_fee = nFeeRateNeeded;\n                     if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, coin_control, coin_selection_params, bnb_used))\n                     {"
      },
      {
        "sha": "7b791ae4164d130b2b33e029f6a42b311de80d6e",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a5cc40dc428e9024142ebebeaa97a3a3a4a1fa6/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a5cc40dc428e9024142ebebeaa97a3a3a4a1fa6/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=2a5cc40dc428e9024142ebebeaa97a3a3a4a1fa6",
        "patch": "@@ -64,6 +64,9 @@ static const bool DEFAULT_WALLET_RBF = false;\n static const bool DEFAULT_WALLETBROADCAST = true;\n static const bool DEFAULT_DISABLE_WALLET = false;\n \n+//! Pre-calculated constants for input size estimation in *virtual size*\n+static constexpr size_t DUMMY_NESTED_P2WPKH_INPUT_SIZE = 91;\n+\n class CBlockIndex;\n class CCoinControl;\n class COutput;"
      },
      {
        "sha": "7c8c6c9af0930d9816f635979c9f1d889f0ad875",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a5cc40dc428e9024142ebebeaa97a3a3a4a1fa6/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a5cc40dc428e9024142ebebeaa97a3a3a4a1fa6/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=2a5cc40dc428e9024142ebebeaa97a3a3a4a1fa6",
        "patch": "@@ -169,6 +169,10 @@ def run_test(self):\n         assert_equal(decoded_psbt[\"tx\"][\"locktime\"], 0)\n \n \n+        # Make sure change address wallet does not have P2SH innerscript access to results in success\n+        # when attempting BnB coin selection\n+        self.nodes[0].walletcreatefundedpsbt([], [{self.nodes[2].getnewaddress():unspent[\"amount\"]+1}], block_height+2, {\"changeAddress\":self.nodes[1].getnewaddress()}, False)\n+\n         # BIP 174 Test Vectors\n \n         # Check that unknown values are just passed through"
      }
    ]
  },
  {
    "sha": "67225e2fd7f1e62586aa7bb7bd2ce265e249f295",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NzIyNWUyZmQ3ZjFlNjI1ODZhYTdiYjdiZDJjZTI2NWUyNDlmMjk1",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-11-29T18:30:08Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-11-30T16:25:20Z"
      },
      "message": "[tests] Add wallet_balance.py\n\nAdds a test specifically to test the wallet's getbalance and\ngetunconfirmedbalance RPCs.\n\nGithub-Pull: #14845\nRebased-From: c1825b9d398b31967887c459c0fad9cf56cf95c6",
      "tree": {
        "sha": "08d42d23f54398033c5a299063472549f3775cad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/08d42d23f54398033c5a299063472549f3775cad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/67225e2fd7f1e62586aa7bb7bd2ce265e249f295",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67225e2fd7f1e62586aa7bb7bd2ce265e249f295",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/67225e2fd7f1e62586aa7bb7bd2ce265e249f295",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67225e2fd7f1e62586aa7bb7bd2ce265e249f295/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d8bc0ce1da1c3f95ba927f3a1ef357c5e2ead02d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8bc0ce1da1c3f95ba927f3a1ef357c5e2ead02d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8bc0ce1da1c3f95ba927f3a1ef357c5e2ead02d"
      }
    ],
    "stats": {
      "total": 147,
      "additions": 134,
      "deletions": 13
    },
    "files": [
      {
        "sha": "0befab6c64a5fa312fbfccc8e9f26bbc666eba0e",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67225e2fd7f1e62586aa7bb7bd2ce265e249f295/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67225e2fd7f1e62586aa7bb7bd2ce265e249f295/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=67225e2fd7f1e62586aa7bb7bd2ce265e249f295",
        "patch": "@@ -124,6 +124,7 @@\n     'wallet_importprunedfunds.py',\n     'rpc_zmq.py',\n     'rpc_signmessage.py',\n+    'wallet_balance.py',\n     'feature_nulldummy.py',\n     'mempool_accept.py',\n     'wallet_import_rescan.py',"
      },
      {
        "sha": "05c97e03405bb56e5e6b091f3d7f6cc21c7e62c2",
        "filename": "test/functional/wallet_balance.py",
        "status": "added",
        "additions": 133,
        "deletions": 0,
        "changes": 133,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67225e2fd7f1e62586aa7bb7bd2ce265e249f295/test/functional/wallet_balance.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67225e2fd7f1e62586aa7bb7bd2ce265e249f295/test/functional/wallet_balance.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_balance.py?ref=67225e2fd7f1e62586aa7bb7bd2ce265e249f295",
        "patch": "@@ -0,0 +1,133 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the wallet balance RPC methods.\"\"\"\n+from decimal import Decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+\n+RANDOM_COINBASE_ADDRESS = 'mneYUmWYsuk7kySiURxCi3AGxrAqZxLgPZ'\n+\n+def create_transactions(node, address, amt, fees):\n+    # Create and sign raw transactions from node to address for amt.\n+    # Creates a transaction for each fee and returns an array\n+    # of the raw transactions.\n+    utxos = node.listunspent(0)\n+\n+    # Create transactions\n+    inputs = []\n+    ins_total = 0\n+    for utxo in utxos:\n+        inputs.append({\"txid\": utxo[\"txid\"], \"vout\": utxo[\"vout\"]})\n+        ins_total += utxo['amount']\n+        if ins_total > amt:\n+            break\n+\n+    txs = []\n+    for fee in fees:\n+        outputs = {address: amt, node.getrawchangeaddress(): ins_total - amt - fee}\n+        raw_tx = node.createrawtransaction(inputs, outputs, 0, True)\n+        raw_tx = node.signrawtransactionwithwallet(raw_tx)\n+        txs.append(raw_tx)\n+\n+    return txs\n+\n+class WalletTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        # Check that nodes don't own any UTXOs\n+        assert_equal(len(self.nodes[0].listunspent()), 0)\n+        assert_equal(len(self.nodes[1].listunspent()), 0)\n+\n+        self.log.info(\"Mining one block for each node\")\n+\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+        self.nodes[1].generate(1)\n+        self.nodes[1].generatetoaddress(100, RANDOM_COINBASE_ADDRESS)\n+        self.sync_all()\n+\n+        assert_equal(self.nodes[0].getbalance(), 50)\n+        assert_equal(self.nodes[1].getbalance(), 50)\n+\n+        self.log.info(\"Test getbalance with different arguments\")\n+        assert_equal(self.nodes[0].getbalance(\"*\"), 50)\n+        assert_equal(self.nodes[0].getbalance(\"*\", 1), 50)\n+        assert_equal(self.nodes[0].getbalance(\"*\", 1, True), 50)\n+        assert_equal(self.nodes[0].getbalance(minconf=1), 50)\n+\n+        # Send 40 BTC from 0 to 1 and 60 BTC from 1 to 0.\n+        txs = create_transactions(self.nodes[0], self.nodes[1].getnewaddress(), 40, [Decimal('0.01')])\n+        self.nodes[0].sendrawtransaction(txs[0]['hex'])\n+        self.nodes[1].sendrawtransaction(txs[0]['hex'])  # sending on both nodes is faster than waiting for propagation\n+\n+        self.sync_all()\n+        txs = create_transactions(self.nodes[1], self.nodes[0].getnewaddress(), 60, [Decimal('0.01'), Decimal('0.02')])\n+        self.nodes[1].sendrawtransaction(txs[0]['hex'])\n+        self.nodes[0].sendrawtransaction(txs[0]['hex'])  # sending on both nodes is faster than waiting for propagation\n+        self.sync_all()\n+\n+        # First argument of getbalance must be set to \"*\"\n+        assert_raises_rpc_error(-32, \"dummy first argument must be excluded or set to \\\"*\\\"\", self.nodes[1].getbalance, \"\")\n+\n+        self.log.info(\"Test getbalance and getunconfirmedbalance with unconfirmed inputs\")\n+\n+        # getbalance without any arguments includes unconfirmed transactions, but not untrusted transactions\n+        assert_equal(self.nodes[0].getbalance(), Decimal('9.99'))  # change from node 0's send\n+        assert_equal(self.nodes[1].getbalance(), Decimal('29.99'))  # change from node 1's send\n+        # Same with minconf=0\n+        assert_equal(self.nodes[0].getbalance(minconf=0), Decimal('9.99'))\n+        assert_equal(self.nodes[1].getbalance(minconf=0), Decimal('29.99'))\n+        # getbalance with a minconf incorrectly excludes coins that have been spent more recently than the minconf blocks ago\n+        # TODO: fix getbalance tracking of coin spentness depth\n+        assert_equal(self.nodes[0].getbalance(minconf=1), Decimal('0'))\n+        assert_equal(self.nodes[1].getbalance(minconf=1), Decimal('0'))\n+        # getunconfirmedbalance\n+        assert_equal(self.nodes[0].getunconfirmedbalance(), Decimal('60'))  # output of node 1's spend\n+        assert_equal(self.nodes[1].getunconfirmedbalance(), Decimal('0'))  # Doesn't include output of node 0's send since it was spent\n+\n+        # Node 1 bumps the transaction fee and resends\n+        self.nodes[1].sendrawtransaction(txs[1]['hex'])\n+        self.sync_all()\n+\n+        self.log.info(\"Test getbalance and getunconfirmedbalance with conflicted unconfirmed inputs\")\n+\n+        assert_equal(self.nodes[0].getwalletinfo()[\"unconfirmed_balance\"], Decimal('60'))  # output of node 1's send\n+        assert_equal(self.nodes[0].getunconfirmedbalance(), Decimal('60'))\n+        assert_equal(self.nodes[1].getwalletinfo()[\"unconfirmed_balance\"], Decimal('0'))  # Doesn't include output of node 0's send since it was spent\n+        assert_equal(self.nodes[1].getunconfirmedbalance(), Decimal('0'))\n+\n+        self.nodes[1].generatetoaddress(1, RANDOM_COINBASE_ADDRESS)\n+        self.sync_all()\n+\n+        # balances are correct after the transactions are confirmed\n+        assert_equal(self.nodes[0].getbalance(), Decimal('69.99'))  # node 1's send plus change from node 0's send\n+        assert_equal(self.nodes[1].getbalance(), Decimal('29.98'))  # change from node 0's send\n+\n+        # Send total balance away from node 1\n+        txs = create_transactions(self.nodes[1], self.nodes[0].getnewaddress(), Decimal('29.97'), [Decimal('0.01')])\n+        self.nodes[1].sendrawtransaction(txs[0]['hex'])\n+        self.nodes[1].generatetoaddress(2, RANDOM_COINBASE_ADDRESS)\n+        self.sync_all()\n+\n+        # getbalance with a minconf incorrectly excludes coins that have been spent more recently than the minconf blocks ago\n+        # TODO: fix getbalance tracking of coin spentness depth\n+        # getbalance with minconf=3 should still show the old balance\n+        assert_equal(self.nodes[1].getbalance(minconf=3), Decimal('0'))\n+\n+        # getbalance with minconf=2 will show the new balance.\n+        assert_equal(self.nodes[1].getbalance(minconf=2), Decimal('0'))\n+\n+if __name__ == '__main__':\n+    WalletTest().main()"
      },
      {
        "sha": "d8ab390afa621c9ee0003744eb7249b65dd5a5e8",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 0,
        "deletions": 13,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67225e2fd7f1e62586aa7bb7bd2ce265e249f295/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67225e2fd7f1e62586aa7bb7bd2ce265e249f295/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=67225e2fd7f1e62586aa7bb7bd2ce265e249f295",
        "patch": "@@ -67,15 +67,6 @@ def run_test(self):\n         assert_equal(self.nodes[1].getbalance(), 50)\n         assert_equal(self.nodes[2].getbalance(), 0)\n \n-        # Check getbalance with different arguments\n-        assert_equal(self.nodes[0].getbalance(\"*\"), 50)\n-        assert_equal(self.nodes[0].getbalance(\"*\", 1), 50)\n-        assert_equal(self.nodes[0].getbalance(\"*\", 1, True), 50)\n-        assert_equal(self.nodes[0].getbalance(minconf=1), 50)\n-\n-        # first argument of getbalance must be excluded or set to \"*\"\n-        assert_raises_rpc_error(-32, \"dummy first argument must be excluded or set to \\\"*\\\"\", self.nodes[0].getbalance, \"\")\n-\n         # Check that only first and second nodes have UTXOs\n         utxos = self.nodes[0].listunspent()\n         assert_equal(len(utxos), 1)\n@@ -242,10 +233,6 @@ def run_test(self):\n \n         assert(txid1 in self.nodes[3].getrawmempool())\n \n-        # Exercise balance rpcs\n-        assert_equal(self.nodes[0].getwalletinfo()[\"unconfirmed_balance\"], 1)\n-        assert_equal(self.nodes[0].getunconfirmedbalance(), 1)\n-\n         # check if we can list zero value tx as available coins\n         # 1. create raw_tx\n         # 2. hex-changed one output to 0.0"
      }
    ]
  },
  {
    "sha": "252844329f17480e18609b6d7b3ace37a5265c20",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNTI4NDQzMjlmMTc0ODBlMTg2MDliNmQ3YjNhY2UzN2E1MjY1YzIw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-11-30T16:50:09Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-11-30T16:50:20Z"
      },
      "message": "Merge #14852: 0.17 backport: [tests] Add wallet_balance.py\n\n67225e2fd7 [tests] Add wallet_balance.py (John Newbery)\n\nPull request description:\n\nTree-SHA512: 5a8707ddc7e11ac0b7b7dc27a73668acc7ff53f832d94a85930a28329ec5271da2b469e2b51d66746fa6ab54aa0221d49d215ec3434ea619352fcbacbb252883",
      "tree": {
        "sha": "08d42d23f54398033c5a299063472549f3775cad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/08d42d23f54398033c5a299063472549f3775cad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/252844329f17480e18609b6d7b3ace37a5265c20",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcAWpMAAoJENLqSFDnUoslUWwP/0Z9AdK13EydvjZ55cLsFTSH\nyvbZdoK1ETlvoqBPFC0Kw2Y72gNBmcFxvMSiSmsVKpCxwkDTOARaE7CKB1pxevG4\nWuYIpekDkMYbsLHkKMWdNKR0w3yv6teOcFpmf3pjD7ZvMDap2/Ddu2hAV9ikPLdw\nwLogf4eg9Hs94O80t/ujP5x071KZdJv7N37uxm4vnv5fpwJsop1gPGlm5UwFDlpb\n0vwSyV3MqrdUAp0YGxcqZa3ROFINjvM/E/MGb1gu6mPhxSoZVxehhazYpB+gmVsp\nlfyp2dFoEVdXCvGRU7zjTn6Q9lKo1LJ3J6p/BpHIoTsoOlBollzaC73+FiD+HRzg\nsNDiUxuvPGOpJj6jOwndL3TmtaIom89nqPk//cbIBiLxun/5iZmfI8mZe65ADKa9\nf8YDmTdlvYjeISfMxjlmncJGKLXiCToNCafMsE2qxRwnq/tSbpX0/NBXUGtYS/av\ny79vCDJyxP9H+E/ruv/TtzdaSKGm5YVFCFaoRPNWoh+CDTJd8UA966AxaR2eKudb\npOG3Rox1u2RQCXVntmjosl+FDMfj8S6mClaGhYhqkRezwAdhL2lye6Lk6WTMYvnb\nwhcK/kznHolAOTGNO/yln5CDH5GqSo/KQlV9WcUYna67uh4W3oSJBYWEVJiKkKyQ\ndfWWfoO9xLDZX9iWTOxS\n=wBVB\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIKd/zTMUrcRMgD1aY9MCHpDf2DbyNo0qzUSl5FEY0HHtCP/wEAmeoKAWM5rv\nLdZ+xMJgvsAI8QRcAWpO8AianLJFMfYcpgCD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEH8v+X5d4K25fw3KsCT60coI8BC7WMTY\nuQkpQ03WV+MgK3B2CPEEXAFqT/AIwKNPXil+hz0Ag9/jDS75DI4pKGh0dHBzOi8v\nZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5jb23/8BCDM1FQrq6PCj2ALyDy\noC3aCPEEXAFqTvAIwgzqpOciagkAg9/jDS75DI4uLWh0dHBzOi8vYWxpY2UuYnRj\nLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ/AQukOcVRooVdH4KVYi+0HMFgjw\nIDLMkVXyfkY+xJQ1SQFvenLe7XbcaN4RnuJUBATabhZBCPEEXAFqT/AIcZPZCjIn\npvAAg9/jDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0\nYW1wcy5vcmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 08d42d23f54398033c5a299063472549f3775cad\nparent d8bc0ce1da1c3f95ba927f3a1ef357c5e2ead02d\nparent 67225e2fd7f1e62586aa7bb7bd2ce265e249f295\nauthor MarcoFalke <falke.marco@gmail.com> 1543596609 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1543596620 -0500\n\nMerge #14852: 0.17 backport: [tests] Add wallet_balance.py\n\n67225e2fd7 [tests] Add wallet_balance.py (John Newbery)\n\nPull request description:\n\nTree-SHA512: 5a8707ddc7e11ac0b7b7dc27a73668acc7ff53f832d94a85930a28329ec5271da2b469e2b51d66746fa6ab54aa0221d49d215ec3434ea619352fcbacbb252883\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/252844329f17480e18609b6d7b3ace37a5265c20",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/252844329f17480e18609b6d7b3ace37a5265c20",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/252844329f17480e18609b6d7b3ace37a5265c20/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d8bc0ce1da1c3f95ba927f3a1ef357c5e2ead02d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8bc0ce1da1c3f95ba927f3a1ef357c5e2ead02d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8bc0ce1da1c3f95ba927f3a1ef357c5e2ead02d"
      },
      {
        "sha": "67225e2fd7f1e62586aa7bb7bd2ce265e249f295",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67225e2fd7f1e62586aa7bb7bd2ce265e249f295",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/67225e2fd7f1e62586aa7bb7bd2ce265e249f295"
      }
    ],
    "stats": {
      "total": 147,
      "additions": 134,
      "deletions": 13
    },
    "files": [
      {
        "sha": "0befab6c64a5fa312fbfccc8e9f26bbc666eba0e",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/252844329f17480e18609b6d7b3ace37a5265c20/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/252844329f17480e18609b6d7b3ace37a5265c20/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=252844329f17480e18609b6d7b3ace37a5265c20",
        "patch": "@@ -124,6 +124,7 @@\n     'wallet_importprunedfunds.py',\n     'rpc_zmq.py',\n     'rpc_signmessage.py',\n+    'wallet_balance.py',\n     'feature_nulldummy.py',\n     'mempool_accept.py',\n     'wallet_import_rescan.py',"
      },
      {
        "sha": "05c97e03405bb56e5e6b091f3d7f6cc21c7e62c2",
        "filename": "test/functional/wallet_balance.py",
        "status": "added",
        "additions": 133,
        "deletions": 0,
        "changes": 133,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/252844329f17480e18609b6d7b3ace37a5265c20/test/functional/wallet_balance.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/252844329f17480e18609b6d7b3ace37a5265c20/test/functional/wallet_balance.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_balance.py?ref=252844329f17480e18609b6d7b3ace37a5265c20",
        "patch": "@@ -0,0 +1,133 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the wallet balance RPC methods.\"\"\"\n+from decimal import Decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+\n+RANDOM_COINBASE_ADDRESS = 'mneYUmWYsuk7kySiURxCi3AGxrAqZxLgPZ'\n+\n+def create_transactions(node, address, amt, fees):\n+    # Create and sign raw transactions from node to address for amt.\n+    # Creates a transaction for each fee and returns an array\n+    # of the raw transactions.\n+    utxos = node.listunspent(0)\n+\n+    # Create transactions\n+    inputs = []\n+    ins_total = 0\n+    for utxo in utxos:\n+        inputs.append({\"txid\": utxo[\"txid\"], \"vout\": utxo[\"vout\"]})\n+        ins_total += utxo['amount']\n+        if ins_total > amt:\n+            break\n+\n+    txs = []\n+    for fee in fees:\n+        outputs = {address: amt, node.getrawchangeaddress(): ins_total - amt - fee}\n+        raw_tx = node.createrawtransaction(inputs, outputs, 0, True)\n+        raw_tx = node.signrawtransactionwithwallet(raw_tx)\n+        txs.append(raw_tx)\n+\n+    return txs\n+\n+class WalletTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        # Check that nodes don't own any UTXOs\n+        assert_equal(len(self.nodes[0].listunspent()), 0)\n+        assert_equal(len(self.nodes[1].listunspent()), 0)\n+\n+        self.log.info(\"Mining one block for each node\")\n+\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+        self.nodes[1].generate(1)\n+        self.nodes[1].generatetoaddress(100, RANDOM_COINBASE_ADDRESS)\n+        self.sync_all()\n+\n+        assert_equal(self.nodes[0].getbalance(), 50)\n+        assert_equal(self.nodes[1].getbalance(), 50)\n+\n+        self.log.info(\"Test getbalance with different arguments\")\n+        assert_equal(self.nodes[0].getbalance(\"*\"), 50)\n+        assert_equal(self.nodes[0].getbalance(\"*\", 1), 50)\n+        assert_equal(self.nodes[0].getbalance(\"*\", 1, True), 50)\n+        assert_equal(self.nodes[0].getbalance(minconf=1), 50)\n+\n+        # Send 40 BTC from 0 to 1 and 60 BTC from 1 to 0.\n+        txs = create_transactions(self.nodes[0], self.nodes[1].getnewaddress(), 40, [Decimal('0.01')])\n+        self.nodes[0].sendrawtransaction(txs[0]['hex'])\n+        self.nodes[1].sendrawtransaction(txs[0]['hex'])  # sending on both nodes is faster than waiting for propagation\n+\n+        self.sync_all()\n+        txs = create_transactions(self.nodes[1], self.nodes[0].getnewaddress(), 60, [Decimal('0.01'), Decimal('0.02')])\n+        self.nodes[1].sendrawtransaction(txs[0]['hex'])\n+        self.nodes[0].sendrawtransaction(txs[0]['hex'])  # sending on both nodes is faster than waiting for propagation\n+        self.sync_all()\n+\n+        # First argument of getbalance must be set to \"*\"\n+        assert_raises_rpc_error(-32, \"dummy first argument must be excluded or set to \\\"*\\\"\", self.nodes[1].getbalance, \"\")\n+\n+        self.log.info(\"Test getbalance and getunconfirmedbalance with unconfirmed inputs\")\n+\n+        # getbalance without any arguments includes unconfirmed transactions, but not untrusted transactions\n+        assert_equal(self.nodes[0].getbalance(), Decimal('9.99'))  # change from node 0's send\n+        assert_equal(self.nodes[1].getbalance(), Decimal('29.99'))  # change from node 1's send\n+        # Same with minconf=0\n+        assert_equal(self.nodes[0].getbalance(minconf=0), Decimal('9.99'))\n+        assert_equal(self.nodes[1].getbalance(minconf=0), Decimal('29.99'))\n+        # getbalance with a minconf incorrectly excludes coins that have been spent more recently than the minconf blocks ago\n+        # TODO: fix getbalance tracking of coin spentness depth\n+        assert_equal(self.nodes[0].getbalance(minconf=1), Decimal('0'))\n+        assert_equal(self.nodes[1].getbalance(minconf=1), Decimal('0'))\n+        # getunconfirmedbalance\n+        assert_equal(self.nodes[0].getunconfirmedbalance(), Decimal('60'))  # output of node 1's spend\n+        assert_equal(self.nodes[1].getunconfirmedbalance(), Decimal('0'))  # Doesn't include output of node 0's send since it was spent\n+\n+        # Node 1 bumps the transaction fee and resends\n+        self.nodes[1].sendrawtransaction(txs[1]['hex'])\n+        self.sync_all()\n+\n+        self.log.info(\"Test getbalance and getunconfirmedbalance with conflicted unconfirmed inputs\")\n+\n+        assert_equal(self.nodes[0].getwalletinfo()[\"unconfirmed_balance\"], Decimal('60'))  # output of node 1's send\n+        assert_equal(self.nodes[0].getunconfirmedbalance(), Decimal('60'))\n+        assert_equal(self.nodes[1].getwalletinfo()[\"unconfirmed_balance\"], Decimal('0'))  # Doesn't include output of node 0's send since it was spent\n+        assert_equal(self.nodes[1].getunconfirmedbalance(), Decimal('0'))\n+\n+        self.nodes[1].generatetoaddress(1, RANDOM_COINBASE_ADDRESS)\n+        self.sync_all()\n+\n+        # balances are correct after the transactions are confirmed\n+        assert_equal(self.nodes[0].getbalance(), Decimal('69.99'))  # node 1's send plus change from node 0's send\n+        assert_equal(self.nodes[1].getbalance(), Decimal('29.98'))  # change from node 0's send\n+\n+        # Send total balance away from node 1\n+        txs = create_transactions(self.nodes[1], self.nodes[0].getnewaddress(), Decimal('29.97'), [Decimal('0.01')])\n+        self.nodes[1].sendrawtransaction(txs[0]['hex'])\n+        self.nodes[1].generatetoaddress(2, RANDOM_COINBASE_ADDRESS)\n+        self.sync_all()\n+\n+        # getbalance with a minconf incorrectly excludes coins that have been spent more recently than the minconf blocks ago\n+        # TODO: fix getbalance tracking of coin spentness depth\n+        # getbalance with minconf=3 should still show the old balance\n+        assert_equal(self.nodes[1].getbalance(minconf=3), Decimal('0'))\n+\n+        # getbalance with minconf=2 will show the new balance.\n+        assert_equal(self.nodes[1].getbalance(minconf=2), Decimal('0'))\n+\n+if __name__ == '__main__':\n+    WalletTest().main()"
      },
      {
        "sha": "d8ab390afa621c9ee0003744eb7249b65dd5a5e8",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 0,
        "deletions": 13,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/252844329f17480e18609b6d7b3ace37a5265c20/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/252844329f17480e18609b6d7b3ace37a5265c20/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=252844329f17480e18609b6d7b3ace37a5265c20",
        "patch": "@@ -67,15 +67,6 @@ def run_test(self):\n         assert_equal(self.nodes[1].getbalance(), 50)\n         assert_equal(self.nodes[2].getbalance(), 0)\n \n-        # Check getbalance with different arguments\n-        assert_equal(self.nodes[0].getbalance(\"*\"), 50)\n-        assert_equal(self.nodes[0].getbalance(\"*\", 1), 50)\n-        assert_equal(self.nodes[0].getbalance(\"*\", 1, True), 50)\n-        assert_equal(self.nodes[0].getbalance(minconf=1), 50)\n-\n-        # first argument of getbalance must be excluded or set to \"*\"\n-        assert_raises_rpc_error(-32, \"dummy first argument must be excluded or set to \\\"*\\\"\", self.nodes[0].getbalance, \"\")\n-\n         # Check that only first and second nodes have UTXOs\n         utxos = self.nodes[0].listunspent()\n         assert_equal(len(utxos), 1)\n@@ -242,10 +233,6 @@ def run_test(self):\n \n         assert(txid1 in self.nodes[3].getrawmempool())\n \n-        # Exercise balance rpcs\n-        assert_equal(self.nodes[0].getwalletinfo()[\"unconfirmed_balance\"], 1)\n-        assert_equal(self.nodes[0].getunconfirmedbalance(), 1)\n-\n         # check if we can list zero value tx as available coins\n         # 1. create raw_tx\n         # 2. hex-changed one output to 0.0"
      }
    ]
  },
  {
    "sha": "924cf794e1f45993213b72aea3704b151eb10b8d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MjRjZjc5NGUxZjQ1OTkzMjEzYjcyYWVhMzcwNGIxNTFlYjEwYjhk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-11-30T21:09:47Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-11-30T21:09:53Z"
      },
      "message": "Merge #14851: [backport] fix assert crash when specified change output spend size is unknown\n\n2a5cc40dc4 CreateTransaction: Assume minimum p2sh-p2wpkh spend size for unknown change (Gregory Sanders)\n53dcf2b407 Remove stale comment in CalculateMaximumSignedInputSize (Gregory Sanders)\n\nPull request description:\n\n  backport of #14380\n\nTree-SHA512: 42e261bd797d1938f8e041ccd10073ecd1d72695e2e4ce322e5a3ce262647e32108b01dde73361b6d2ac36438522ab3c4cd58ca072194f25011132437430cd27",
      "tree": {
        "sha": "e2473a30eec5f3bc68c046e8be981522387ca442",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e2473a30eec5f3bc68c046e8be981522387ca442"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/924cf794e1f45993213b72aea3704b151eb10b8d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcAachAAoJENLqSFDnUosl3FUP/3ra/PQ5o+LwhdVJPeMKxq4F\nst/1DZurrF6FOTjhh1kW0rtvFSE1iEqOeuDOzGGrEgELF8ybU2qZWLB7czvZtnip\nbx0PrMExayvX++0nD/WjYZUytyMu8yuDuDGYlxqPi5sel1rGb4W4a4YjAHeXd/Zy\nAqZ6uYuuyhiGfT9LLym4T1uN/rGymZpQCSBhVTFG2mEeCknRywFd3X1QVJ10jP4R\nrTASKA6JoN20pdln+52VtbNpKs8XS6+bN/jXb8PQ1Mzd7YvMDYfNDIImUUmRQnZg\nlpnpFk1GMk1YGf4bZtXVb4eEoGbuQXT4FTvwv9eG0npPhyRrJ9bfYJyUwykp5dVU\nmwtzkyG6Tg+tPnW3DvF1c9E81CgsRx2gioA3rP4VgUI3bkxkA2PdPrqbqUDfh+wj\nwKuM8HSWSOg4m84AlUzYlhtxTzCimUgwwaJzP+zTGa5orb54HYJEb9sMYG+tPDgY\nLyHwH5s1BpHftvmGWEBpnCkLNqfaWFKD3HkWxoT3gd0Y9NUeWMWIAVyYL+ZUg1xz\neehH1QQUxO46K34AOBkPI+pKte8fiFPRdLS5yBFCbPSx69GKOlgo1rGRz13QvCKk\nYD2rEWMkXGeBG/XD/VEBVXU8Mx3wenNy2b1ywR+27MOmaKIJedl3GS4VaBSKqfwI\nqvSd1CYHoSZKYE7Ttyvl\n=vpd1\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIBVco6uznEAOXN8vlHll4SDk6x8j0ZhpO5UpKHw73KlDCP/wECqewxEF+izg\ncsla6HdOORgI8BDeXddCMh1ax3a+QX+TZb8TCPEEXAGnJfAISzqnEyFJfqYAg9/j\nDS75DI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5jb23/\n8BBAXrchzhLmOlfpNBCOrnQqCPEg2DOoeCPHA2UzaockxqnS0OrNgWpeoAacdPLP\nXfvaFXAI8QRcAack8AhbgFZWhaQxAgCD3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2Fs\nZW5kYXIuY2F0YWxsYXh5LmNvbf/wEJsV/nAsUKNS4/IlTctBJMII8QRcAack8Ajv\nFTa2oiFCTACD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIub3Bl\nbnRpbWVzdGFtcHMub3Jn8BDrU/7XIMBXjJZDjQXoXXpdCPEEXAGnJPAIbG6ZsyDf\nd8oAg9/jDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0\nYW1wcy5vcmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree e2473a30eec5f3bc68c046e8be981522387ca442\nparent 252844329f17480e18609b6d7b3ace37a5265c20\nparent 2a5cc40dc428e9024142ebebeaa97a3a3a4a1fa6\nauthor MarcoFalke <falke.marco@gmail.com> 1543612187 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1543612193 -0500\n\nMerge #14851: [backport] fix assert crash when specified change output spend size is unknown\n\n2a5cc40dc4 CreateTransaction: Assume minimum p2sh-p2wpkh spend size for unknown change (Gregory Sanders)\n53dcf2b407 Remove stale comment in CalculateMaximumSignedInputSize (Gregory Sanders)\n\nPull request description:\n\n  backport of #14380\n\nTree-SHA512: 42e261bd797d1938f8e041ccd10073ecd1d72695e2e4ce322e5a3ce262647e32108b01dde73361b6d2ac36438522ab3c4cd58ca072194f25011132437430cd27\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/924cf794e1f45993213b72aea3704b151eb10b8d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/924cf794e1f45993213b72aea3704b151eb10b8d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/924cf794e1f45993213b72aea3704b151eb10b8d/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "252844329f17480e18609b6d7b3ace37a5265c20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/252844329f17480e18609b6d7b3ace37a5265c20",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/252844329f17480e18609b6d7b3ace37a5265c20"
      },
      {
        "sha": "2a5cc40dc428e9024142ebebeaa97a3a3a4a1fa6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a5cc40dc428e9024142ebebeaa97a3a3a4a1fa6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2a5cc40dc428e9024142ebebeaa97a3a3a4a1fa6"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 59,
      "deletions": 3
    },
    "files": [
      {
        "sha": "c474547b7e4ab8a819fb03a5663423ca9efa57d3",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 44,
        "deletions": 0,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/924cf794e1f45993213b72aea3704b151eb10b8d/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/924cf794e1f45993213b72aea3704b151eb10b8d/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=924cf794e1f45993213b72aea3704b151eb10b8d",
        "patch": "@@ -16,6 +16,7 @@\n #include <validation.h>\n #include <wallet/coincontrol.h>\n #include <wallet/test/wallet_test_fixture.h>\n+#include <policy/policy.h>\n \n #include <boost/test/unit_test.hpp>\n #include <univalue.h>\n@@ -374,4 +375,47 @@ BOOST_FIXTURE_TEST_CASE(wallet_disableprivkeys, TestChain100Setup)\n     BOOST_CHECK(!wallet->GetKeyFromPool(pubkey, false));\n }\n \n+// Explicit calculation which is used to test the wallet constant\n+// We get the same virtual size due to rounding(weight/4) for both use_max_sig values\n+static size_t CalculateNestedKeyhashInputSize(bool use_max_sig)\n+{\n+    // Generate ephemeral valid pubkey\n+    CKey key;\n+    key.MakeNewKey(true);\n+    CPubKey pubkey = key.GetPubKey();\n+\n+    // Generate pubkey hash\n+    uint160 key_hash(Hash160(pubkey.begin(), pubkey.end()));\n+\n+    // Create inner-script to enter into keystore. Key hash can't be 0...\n+    CScript inner_script = CScript() << OP_0 << std::vector<unsigned char>(key_hash.begin(), key_hash.end());\n+\n+    // Create outer P2SH script for the output\n+    uint160 script_id(Hash160(inner_script.begin(), inner_script.end()));\n+    CScript script_pubkey = CScript() << OP_HASH160 << std::vector<unsigned char>(script_id.begin(), script_id.end()) << OP_EQUAL;\n+\n+    // Add inner-script to key store and key to watchonly\n+    CBasicKeyStore keystore;\n+    keystore.AddCScript(inner_script);\n+    keystore.AddKeyPubKey(key, pubkey);\n+\n+    // Fill in dummy signatures for fee calculation.\n+    SignatureData sig_data;\n+\n+    if (!ProduceSignature(keystore, use_max_sig ? DUMMY_MAXIMUM_SIGNATURE_CREATOR : DUMMY_SIGNATURE_CREATOR, script_pubkey, sig_data)) {\n+        // We're hand-feeding it correct arguments; shouldn't happen\n+        assert(false);\n+    }\n+\n+    CTxIn tx_in;\n+    UpdateInput(tx_in, sig_data);\n+    return (size_t)GetVirtualTransactionInputSize(tx_in);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(dummy_input_size_test, TestChain100Setup)\n+{\n+    BOOST_CHECK_EQUAL(CalculateNestedKeyhashInputSize(false), DUMMY_NESTED_P2WPKH_INPUT_SIZE);\n+    BOOST_CHECK_EQUAL(CalculateNestedKeyhashInputSize(true), DUMMY_NESTED_P2WPKH_INPUT_SIZE);\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "060325921f5ab9c4e14278eee0a46da83a16fbb2",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/924cf794e1f45993213b72aea3704b151eb10b8d/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/924cf794e1f45993213b72aea3704b151eb10b8d/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=924cf794e1f45993213b72aea3704b151eb10b8d",
        "patch": "@@ -1607,8 +1607,6 @@ int CalculateMaximumSignedInputSize(const CTxOut& txout, const CWallet* wallet,\n     CMutableTransaction txn;\n     txn.vin.push_back(CTxIn(COutPoint()));\n     if (!wallet->DummySignInput(txn.vin[0], txout, use_max_sig)) {\n-        // This should never happen, because IsAllFromMe(ISMINE_SPENDABLE)\n-        // implies that we can sign for every input.\n         return -1;\n     }\n     return GetVirtualTransactionInputSize(txn.vin[0]);\n@@ -2832,7 +2830,14 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CTransac\n                 if (pick_new_inputs) {\n                     nValueIn = 0;\n                     setCoins.clear();\n-                    coin_selection_params.change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+                    int change_spend_size = CalculateMaximumSignedInputSize(change_prototype_txout, this);\n+                    // If the wallet doesn't know how to sign change output, assume p2sh-p2wpkh\n+                    // as lower-bound to allow BnB to do it's thing\n+                    if (change_spend_size == -1) {\n+                        coin_selection_params.change_spend_size = DUMMY_NESTED_P2WPKH_INPUT_SIZE;\n+                    } else {\n+                        coin_selection_params.change_spend_size = (size_t)change_spend_size;\n+                    }\n                     coin_selection_params.effective_fee = nFeeRateNeeded;\n                     if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, coin_control, coin_selection_params, bnb_used))\n                     {"
      },
      {
        "sha": "7b791ae4164d130b2b33e029f6a42b311de80d6e",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/924cf794e1f45993213b72aea3704b151eb10b8d/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/924cf794e1f45993213b72aea3704b151eb10b8d/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=924cf794e1f45993213b72aea3704b151eb10b8d",
        "patch": "@@ -64,6 +64,9 @@ static const bool DEFAULT_WALLET_RBF = false;\n static const bool DEFAULT_WALLETBROADCAST = true;\n static const bool DEFAULT_DISABLE_WALLET = false;\n \n+//! Pre-calculated constants for input size estimation in *virtual size*\n+static constexpr size_t DUMMY_NESTED_P2WPKH_INPUT_SIZE = 91;\n+\n class CBlockIndex;\n class CCoinControl;\n class COutput;"
      },
      {
        "sha": "7c8c6c9af0930d9816f635979c9f1d889f0ad875",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/924cf794e1f45993213b72aea3704b151eb10b8d/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/924cf794e1f45993213b72aea3704b151eb10b8d/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=924cf794e1f45993213b72aea3704b151eb10b8d",
        "patch": "@@ -169,6 +169,10 @@ def run_test(self):\n         assert_equal(decoded_psbt[\"tx\"][\"locktime\"], 0)\n \n \n+        # Make sure change address wallet does not have P2SH innerscript access to results in success\n+        # when attempting BnB coin selection\n+        self.nodes[0].walletcreatefundedpsbt([], [{self.nodes[2].getnewaddress():unspent[\"amount\"]+1}], block_height+2, {\"changeAddress\":self.nodes[1].getnewaddress()}, False)\n+\n         # BIP 174 Test Vectors\n \n         # Check that unknown values are just passed through"
      }
    ]
  },
  {
    "sha": "3362a95be360dd798c32fc0184c0fe67da6ef43a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMzYyYTk1YmUzNjBkZDc5OGMzMmZjMDE4NGMwZmU2N2RhNmVmNDNh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-12-01T17:31:12Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-12-01T17:31:14Z"
      },
      "message": "Merge #14196: [0.17][psbt] always drop the unnecessary utxo and convert non-witness utxo to witness when necessary\n\nfcefc6851a Convert non-witness UTXOs to witness if witness sig created (Andrew Chow)\nfcdea8ad2a Drop the unnecessary UTXO based on the UTXOs present, not on earlier wallet things (Andrew Chow)\n\nPull request description:\n\n  When we sign an input in a psbt that has a non-witness utxo but a witness signature is produced, we will now replace the non-witness utxo with the corresponding witness utxo. Furthermore, we should make sure that the correct UTXO type is used based on what UTXOs are there, not based on earlier wallet behavior.\n\n  Note that this is PR'd to the 0.17 branch because the code here no longer exists in master.\n\nTree-SHA512: 882e9e4e9b77d6ac1743c35c0d59023aad6f4f19193398f97f2c6b81f6627d74e5220b1d674a0edba1ff2fc2a7f61afbf838d3faf0a964fccd3dee97c631aa47",
      "tree": {
        "sha": "59c19ab6de01fa8cddc164445fc573034d6b68ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/59c19ab6de01fa8cddc164445fc573034d6b68ce"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3362a95be360dd798c32fc0184c0fe67da6ef43a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcAsViAAoJENLqSFDnUoslbogQAJB1pIOxW+qir7GMBEdPK4qY\nN7YeGnMZVxi0vtnRvzgcnT4tIsHgdZyzNFYxSWuU5Uia/xttgwnxTlFVOneU9GwL\ngB2yRsaBISpMBc7QJTqg9YVDFJrTGuhThLv+KNiRV88wes2t7OkT5Mn7AqASoYeX\neOxgb6jukwGWujET5CpDiYVqd9E1qVy/wRhemng7dVLJkcXRXZyAI3Snyb0FHanw\nIYAIi9m/bv+/eS0QVNqlRL+JsUSnFJhZGChGcvTNvYTw8vIsXiKM6C5H5QsLdZa5\nAUICqwNKmPfSC+OH2THwewd4fWJ/mlrZRk8VA7jw7WgUanWGslY9024ugJqA7rH6\nym8VrMa+cmWS1kqaTBrsulTDmfmjJ9xMb5FbcYOKoFRssZZsn99s7EV0qnhVsROR\no+P0FiIEC/dAvzgvYfQEBvOiOaQqA8f1nX587oI9WCarC14A+Ub2Qtn4vjwhAUuA\n+GmX7HVJyDhGBGK5GjLWp9Xvo6Hm7IXzb17C8LIo+8gUjomcPWNr8VPLgw9EYhXv\n3R66CvSuQD8hDHTwKrbzygBllYiincavdE+nSI0Sxf2KUUtr9EFHev/AZ72wQQTs\nDuDb6eqI8gBRQ6fgl6zB4YFDryCmVmHbhDoHvOneZQZclEQKSe2YIPJPiZ6GlV8A\n53KzMiYowUSxkuqW07fm\n=JIxz\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIB2XAe+yF5bMwMmfvEXuZTEu3v1L7cpi7PhG2O3ct/yCCP/wEIzqxrwslpG3\nX861paY49Y0I8QRcAsVk8AhM3ldnItwN8QCD3+MNLvkMji4taHR0cHM6Ly9hbGlj\nZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQo536jydWBdj3QxC8\n2vahZwjxBFwCxWXwCBpCsSXxB3XZAIPf4w0u+QyOIyJodHRwczovL2J0Yy5jYWxl\nbmRhci5jYXRhbGxheHkuY29t//AQpGzdXFCQ9gp6WpRERu+CAAjwEFn2rBFJa53T\nXP4svMSDqOgI8QRcAsVl8AgcuvtK2W0XEQCD3+MNLvkMjikoaHR0cHM6Ly9maW5u\nZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbfAQ5Ue0Lb8e0ac9gnQDAco9Zwjx\nBFwCxWXwCCJ/cpGbnmvcAIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMuY2FsZW5k\nYXIub3BlbnRpbWVzdGFtcHMub3Jn\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 59c19ab6de01fa8cddc164445fc573034d6b68ce\nparent 924cf794e1f45993213b72aea3704b151eb10b8d\nparent fcefc6851a624b59bd1bb42d211ce69f85969880\nauthor MarcoFalke <falke.marco@gmail.com> 1543685472 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1543685474 -0500\n\nMerge #14196: [0.17][psbt] always drop the unnecessary utxo and convert non-witness utxo to witness when necessary\n\nfcefc6851a Convert non-witness UTXOs to witness if witness sig created (Andrew Chow)\nfcdea8ad2a Drop the unnecessary UTXO based on the UTXOs present, not on earlier wallet things (Andrew Chow)\n\nPull request description:\n\n  When we sign an input in a psbt that has a non-witness utxo but a witness signature is produced, we will now replace the non-witness utxo with the corresponding witness utxo. Furthermore, we should make sure that the correct UTXO type is used based on what UTXOs are there, not based on earlier wallet behavior.\n\n  Note that this is PR'd to the 0.17 branch because the code here no longer exists in master.\n\nTree-SHA512: 882e9e4e9b77d6ac1743c35c0d59023aad6f4f19193398f97f2c6b81f6627d74e5220b1d674a0edba1ff2fc2a7f61afbf838d3faf0a964fccd3dee97c631aa47\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3362a95be360dd798c32fc0184c0fe67da6ef43a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3362a95be360dd798c32fc0184c0fe67da6ef43a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3362a95be360dd798c32fc0184c0fe67da6ef43a/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "924cf794e1f45993213b72aea3704b151eb10b8d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/924cf794e1f45993213b72aea3704b151eb10b8d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/924cf794e1f45993213b72aea3704b151eb10b8d"
      },
      {
        "sha": "fcefc6851a624b59bd1bb42d211ce69f85969880",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fcefc6851a624b59bd1bb42d211ce69f85969880",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fcefc6851a624b59bd1bb42d211ce69f85969880"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 9,
      "deletions": 2
    },
    "files": [
      {
        "sha": "0a9242327b6150df36da002b723af3d0c0e1d3e4",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3362a95be360dd798c32fc0184c0fe67da6ef43a/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3362a95be360dd798c32fc0184c0fe67da6ef43a/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=3362a95be360dd798c32fc0184c0fe67da6ef43a",
        "patch": "@@ -4534,8 +4534,15 @@ bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, const C\n             complete &= SignPSBTInput(PublicOnlySigningProvider(pwallet), *psbtx.tx, input, sigdata, i, sighash_type);\n         }\n \n-        if (it != pwallet->mapWallet.end()) {\n-            // Drop the unnecessary UTXO if we added both from the wallet.\n+        if (sigdata.witness) {\n+            // Convert the non-witness utxo to witness\n+            if (input.witness_utxo.IsNull() && input.non_witness_utxo) {\n+                input.witness_utxo = input.non_witness_utxo->vout[txin.prevout.n];\n+            }\n+        }\n+\n+        // If both UTXO types are present, drop the unnecessary one.\n+        if (input.non_witness_utxo && !input.witness_utxo.IsNull()) {\n             if (sigdata.witness) {\n                 input.non_witness_utxo = nullptr;\n             } else {"
      }
    ]
  },
  {
    "sha": "a3fe125490978a684528c40fc9a15ccdfdf2c92a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphM2ZlMTI1NDkwOTc4YTY4NDUyOGM0MGZjOWExNWNjZGZkZjJjOTJh",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-10-03T00:33:31Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-12-03T18:32:58Z"
      },
      "message": "check that a separator is found for psbt inputs, outputs, and global map\n\nGithub-Pull: #14377\nRebased-From: 4fb3388db95f408566e43ebb9736842cfbff0a7d",
      "tree": {
        "sha": "8a12ce2b26210bf1bc1d666420e6674158561763",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8a12ce2b26210bf1bc1d666420e6674158561763"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a3fe125490978a684528c40fc9a15ccdfdf2c92a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3fe125490978a684528c40fc9a15ccdfdf2c92a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a3fe125490978a684528c40fc9a15ccdfdf2c92a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3fe125490978a684528c40fc9a15ccdfdf2c92a/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3362a95be360dd798c32fc0184c0fe67da6ef43a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3362a95be360dd798c32fc0184c0fe67da6ef43a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3362a95be360dd798c32fc0184c0fe67da6ef43a"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 29,
      "deletions": 4
    },
    "files": [
      {
        "sha": "2b45df85a06f31bb93783e260c169cff45743b22",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 27,
        "deletions": 3,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3fe125490978a684528c40fc9a15ccdfdf2c92a/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3fe125490978a684528c40fc9a15ccdfdf2c92a/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=a3fe125490978a684528c40fc9a15ccdfdf2c92a",
        "patch": "@@ -286,14 +286,18 @@ struct PSBTInput\n     template <typename Stream>\n     inline void Unserialize(Stream& s) {\n         // Read loop\n+        bool found_sep = false;\n         while(!s.empty()) {\n             // Read\n             std::vector<unsigned char> key;\n             s >> key;\n \n             // the key is empty if that was actually a separator byte\n             // This is a special case for key lengths 0 as those are not allowed (except for separator)\n-            if (key.empty()) return;\n+            if (key.empty()) {\n+                found_sep = true;\n+                break;\n+            }\n \n             // First byte of key is the type\n             unsigned char type = key[0];\n@@ -408,6 +412,10 @@ struct PSBTInput\n                     break;\n             }\n         }\n+\n+        if (!found_sep) {\n+            throw std::ios_base::failure(\"Separator is missing at the end of an input map\");\n+        }\n     }\n \n     template <typename Stream>\n@@ -461,14 +469,18 @@ struct PSBTOutput\n     template <typename Stream>\n     inline void Unserialize(Stream& s) {\n         // Read loop\n+        bool found_sep = false;\n         while(!s.empty()) {\n             // Read\n             std::vector<unsigned char> key;\n             s >> key;\n \n             // the key is empty if that was actually a separator byte\n             // This is a special case for key lengths 0 as those are not allowed (except for separator)\n-            if (key.empty()) return;\n+            if (key.empty()) {\n+                found_sep = true;\n+                break;\n+            }\n \n             // First byte of key is the type\n             unsigned char type = key[0];\n@@ -513,6 +525,10 @@ struct PSBTOutput\n                 }\n             }\n         }\n+\n+        if (!found_sep) {\n+            throw std::ios_base::failure(\"Separator is missing at the end of an output map\");\n+        }\n     }\n \n     template <typename Stream>\n@@ -588,14 +604,18 @@ struct PartiallySignedTransaction\n         }\n \n         // Read global data\n+        bool found_sep = false;\n         while(!s.empty()) {\n             // Read\n             std::vector<unsigned char> key;\n             s >> key;\n \n             // the key is empty if that was actually a separator byte\n             // This is a special case for key lengths 0 as those are not allowed (except for separator)\n-            if (key.empty()) break;\n+            if (key.empty()) {\n+                found_sep = true;\n+                break;\n+            }\n \n             // First byte of key is the type\n             unsigned char type = key[0];\n@@ -635,6 +655,10 @@ struct PartiallySignedTransaction\n             }\n         }\n \n+        if (!found_sep) {\n+            throw std::ios_base::failure(\"Separator is missing at the end of the global map\");\n+        }\n+\n         // Make sure that we got an unsigned tx\n         if (!tx) {\n             throw std::ios_base::failure(\"No unsigned transcation was provided\");"
      },
      {
        "sha": "bff5f23e25ba9e86c461ba18b244a0ed4d6f8f0a",
        "filename": "test/functional/data/rpc_psbt.json",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3fe125490978a684528c40fc9a15ccdfdf2c92a/test/functional/data/rpc_psbt.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3fe125490978a684528c40fc9a15ccdfdf2c92a/test/functional/data/rpc_psbt.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/rpc_psbt.json?ref=a3fe125490978a684528c40fc9a15ccdfdf2c92a",
        "patch": "@@ -17,7 +17,8 @@\n         \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAABB9oARzBEAiB0AYrUGACXuHMyPAAVcgs2hMyBI4kQSOfbzZtVrWecmQIgc9Npt0Dj61Pc76M4I8gHBRTKVafdlUTxV8FnkTJhEYwBSDBFAiEA9hA4swjcHahlo0hSdG8BV3KTQgjG0kRUOTzZm98iF3cCIAVuZ1pnWm0KArhbFOXikHTYolqbV2C+ooFvZhkQoAbqAUdSIQKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfyEC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtdSrgABASAAwusLAAAAABepFLf1+vQOPUClpFmx2zU18rcvqSHohwEHIyIAIIwjUxc3Q7WV37Sge3K6jkLjeX2nTof+fZ10l+OyAokDAQjaBABHMEQCIGLrelVhB6fHP0WsSrWh3d9vcHX7EnWWmn84Pv/3hLyyAiAMBdu3Rw2/LwhVfdNWxzJcHtMJE+mWzThAlF2xIijaXwFHMEQCIGX0W6WZi1mif/4ae+0BavHx+Q1Us6qPdFCqX1aiUQO9AiB/ckcDrR7blmgLKEtW1P/LiPf7dZ6rvgiqMPKbhROD0gFHUiEDCJ3BDHrG21T5EymvYXMz2ziM6tDCMfcjN50bmQMLAtwhAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zUq4AIQIDqaTDf1mW06ol26xrVwrwZQOUSSlCRgs1R1PtnuylhxDZDGpPAAAAgAAAAIAEAACAACICAn9jmXV9Lv9VoTatAsaEsYOLZVbl8bazQoKpS2tQBRCWENkMak8AAACAAAAAgAUAAIAA\",\n         \"cHNidP8BAHMCAAAAATAa6YblFqHsisW0vGVz0y+DtGXiOtdhZ9aLOOcwtNvbAAAAAAD/////AnR7AQAAAAAAF6kUA6oXrogrXQ1Usl1jEE5P/s57nqKHYEOZOwAAAAAXqRS5IbG6b3IuS/qDtlV6MTmYakLsg4cAAAAAAAEBHwDKmjsAAAAAFgAU0tlLZK4IWH7vyO6xh8YB6Tn5A3wCAwABAAAAAAEAFgAUYunpgv/zTdgjlhAxawkM0qO3R8sAAQAiACCHa62DLx0WgBXtQSMqnqZaGBXZ7xPA74dZ9ktbKyeKZQEBJVEhA7fOI6AcW0vwCmQlN836uzFbZoMyhnR471EwnSvVf4qHUa4A\",\n         \"cHNidP8BAHMCAAAAATAa6YblFqHsisW0vGVz0y+DtGXiOtdhZ9aLOOcwtNvbAAAAAAD/////AnR7AQAAAAAAF6kUA6oXrogrXQ1Usl1jEE5P/s57nqKHYEOZOwAAAAAXqRS5IbG6b3IuS/qDtlV6MTmYakLsg4cAAAAAAAEBHwDKmjsAAAAAFgAU0tlLZK4IWH7vyO6xh8YB6Tn5A3wAAgAAFgAUYunpgv/zTdgjlhAxawkM0qO3R8sAAQAiACCHa62DLx0WgBXtQSMqnqZaGBXZ7xPA74dZ9ktbKyeKZQEBJVEhA7fOI6AcW0vwCmQlN836uzFbZoMyhnR471EwnSvVf4qHUa4A\",\n-        \"cHNidP8BAHMCAAAAATAa6YblFqHsisW0vGVz0y+DtGXiOtdhZ9aLOOcwtNvbAAAAAAD/////AnR7AQAAAAAAF6kUA6oXrogrXQ1Usl1jEE5P/s57nqKHYEOZOwAAAAAXqRS5IbG6b3IuS/qDtlV6MTmYakLsg4cAAAAAAAEBHwDKmjsAAAAAFgAU0tlLZK4IWH7vyO6xh8YB6Tn5A3wAAQAWABRi6emC//NN2COWEDFrCQzSo7dHywABACIAIIdrrYMvHRaAFe1BIyqeploYFdnvE8Dvh1n2S1srJ4plIQEAJVEhA7fOI6AcW0vwCmQlN836uzFbZoMyhnR471EwnSvVf4qHUa4A\"\n+        \"cHNidP8BAHMCAAAAATAa6YblFqHsisW0vGVz0y+DtGXiOtdhZ9aLOOcwtNvbAAAAAAD/////AnR7AQAAAAAAF6kUA6oXrogrXQ1Usl1jEE5P/s57nqKHYEOZOwAAAAAXqRS5IbG6b3IuS/qDtlV6MTmYakLsg4cAAAAAAAEBHwDKmjsAAAAAFgAU0tlLZK4IWH7vyO6xh8YB6Tn5A3wAAQAWABRi6emC//NN2COWEDFrCQzSo7dHywABACIAIIdrrYMvHRaAFe1BIyqeploYFdnvE8Dvh1n2S1srJ4plIQEAJVEhA7fOI6AcW0vwCmQlN836uzFbZoMyhnR471EwnSvVf4qHUa4A\",\n+        \"cHNidP8BAHMCAAAAAbiWoY6pOQepFsEGhUPXaulX9rvye2NH+NrdlAHg+WgpAQAAAAD/////AkBLTAAAAAAAF6kUqWwXCcLM5BN2zoNqMNT5qMlIi7+HQEtMAAAAAAAXqRSVF/in2XNxAlN1OSxkyp0z+Wtg2YcAAAAAAAEBIBNssgAAAAAAF6kUamsvautR8hRlMRY6OKNTx03DK96HAQcXFgAUo8u1LWpHprjt/uENAwBpGZD0UH0BCGsCRzBEAiAONfH3DYiw67ZbylrsxCF/XXpVwyWBRgofyRbPslzvwgIgIKCsWw5sHSIPh1icNvcVLZLHWj6NA7Dk+4Os2pOnMbQBIQPGStfYHPtyhpV7zIWtn0Q4GXv5gK1zy/tnJ+cBXu4iiwABABYAFMwmJQEz+HDpBEEabxJ5PogPsqZRAAEAFgAUyCrGc3h3FYCmiIspbv2pSTKZ5jU\"\n     ],\n     \"valid\" : [\n         \"cHNidP8BAHUCAAAAASaBcTce3/KF6Tet7qSze3gADAVmy7OtZGQXE8pCFxv2AAAAAAD+////AtPf9QUAAAAAGXapFNDFmQPFusKGh2DpD9UhpGZap2UgiKwA4fUFAAAAABepFDVF5uM7gyxHBQ8k0+65PJwDlIvHh7MuEwAAAQD9pQEBAAAAAAECiaPHHqtNIOA3G7ukzGmPopXJRjr6Ljl/hTPMti+VZ+UBAAAAFxYAFL4Y0VKpsBIDna89p95PUzSe7LmF/////4b4qkOnHf8USIk6UwpyN+9rRgi7st0tAXHmOuxqSJC0AQAAABcWABT+Pp7xp0XpdNkCxDVZQ6vLNL1TU/////8CAMLrCwAAAAAZdqkUhc/xCX/Z4Ai7NK9wnGIZeziXikiIrHL++E4sAAAAF6kUM5cluiHv1irHU6m80GfWx6ajnQWHAkcwRAIgJxK+IuAnDzlPVoMR3HyppolwuAJf3TskAinwf4pfOiQCIAGLONfc0xTnNMkna9b7QPZzMlvEuqFEyADS8vAtsnZcASED0uFWdJQbrUqZY3LLh+GFbTZSYG2YVi/jnF6efkE/IQUCSDBFAiEA0SuFLYXc2WHS9fSrZgZU327tzHlMDDPOXMMJ/7X85Y0CIGczio4OFyXBl/saiK9Z9R5E5CVbIBZ8hoQDHAXR8lkqASECI7cr7vCWXRC+B3jv7NYfysb3mk6haTkzgHNEZPhPKrMAAAAAAAAA\","
      }
    ]
  },
  {
    "sha": "cfdd6b2f6c01c5c8dbe4691cc84c65b9705784c3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZmRkNmIyZjZjMDFjNWM4ZGJlNDY5MWNjODRjNjViOTcwNTc4NGMz",
    "commit": {
      "author": {
        "name": "Glenn Willen",
        "email": "gwillen@nerdnet.org",
        "date": "2018-10-26T22:18:52Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-12-03T18:34:20Z"
      },
      "message": "More concise conversion of CDataStream to string\n\nUse .str() instead of .data() and .size() when converting CDataStream to\na string. Uses std::string, avoiding conversion to a C string.\n\nGithub-Pull: #14588\nRebased-From: fe5d22bc676f158e8d567d71edb3451118759d62",
      "tree": {
        "sha": "5188ca63db09af206ea0b003b0de95ec5b88032d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5188ca63db09af206ea0b003b0de95ec5b88032d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cfdd6b2f6c01c5c8dbe4691cc84c65b9705784c3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfdd6b2f6c01c5c8dbe4691cc84c65b9705784c3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cfdd6b2f6c01c5c8dbe4691cc84c65b9705784c3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfdd6b2f6c01c5c8dbe4691cc84c65b9705784c3/comments",
    "author": {
      "login": "gwillen",
      "id": 458997,
      "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gwillen",
      "html_url": "https://github.com/gwillen",
      "followers_url": "https://api.github.com/users/gwillen/followers",
      "following_url": "https://api.github.com/users/gwillen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gwillen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gwillen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
      "organizations_url": "https://api.github.com/users/gwillen/orgs",
      "repos_url": "https://api.github.com/users/gwillen/repos",
      "events_url": "https://api.github.com/users/gwillen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gwillen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a3fe125490978a684528c40fc9a15ccdfdf2c92a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3fe125490978a684528c40fc9a15ccdfdf2c92a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a3fe125490978a684528c40fc9a15ccdfdf2c92a"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "2fdbe381455b211602761a74aefbd7176294b9b5",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfdd6b2f6c01c5c8dbe4691cc84c65b9705784c3/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfdd6b2f6c01c5c8dbe4691cc84c65b9705784c3/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=cfdd6b2f6c01c5c8dbe4691cc84c65b9705784c3",
        "patch": "@@ -1662,10 +1662,10 @@ UniValue finalizepsbt(const JSONRPCRequest& request)\n             mtx.vin[i].scriptWitness = psbtx.inputs[i].final_script_witness;\n         }\n         ssTx << mtx;\n-        result.pushKV(\"hex\", HexStr(ssTx.begin(), ssTx.end()));\n+        result.pushKV(\"hex\", HexStr(ssTx.str()));\n     } else {\n         ssTx << psbtx;\n-        result.pushKV(\"psbt\", EncodeBase64((unsigned char*)ssTx.data(), ssTx.size()));\n+        result.pushKV(\"psbt\", EncodeBase64(ssTx.str()));\n     }\n     result.pushKV(\"complete\", complete);\n "
      },
      {
        "sha": "c5cc277c4a5f9c60db0d41dac6b7d836b546ab08",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfdd6b2f6c01c5c8dbe4691cc84c65b9705784c3/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfdd6b2f6c01c5c8dbe4691cc84c65b9705784c3/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=cfdd6b2f6c01c5c8dbe4691cc84c65b9705784c3",
        "patch": "@@ -4649,7 +4649,7 @@ UniValue walletprocesspsbt(const JSONRPCRequest& request)\n     UniValue result(UniValue::VOBJ);\n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n     ssTx << psbtx;\n-    result.pushKV(\"psbt\", EncodeBase64((unsigned char*)ssTx.data(), ssTx.size()));\n+    result.pushKV(\"psbt\", EncodeBase64(ssTx.str()));\n     result.pushKV(\"complete\", complete);\n \n     return result;\n@@ -4763,7 +4763,7 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n     ssTx << psbtx;\n \n     UniValue result(UniValue::VOBJ);\n-    result.pushKV(\"psbt\", EncodeBase64((unsigned char*)ssTx.data(), ssTx.size()));\n+    result.pushKV(\"psbt\", EncodeBase64(ssTx.str()));\n     result.pushKV(\"fee\", ValueFromAmount(fee));\n     result.pushKV(\"changepos\", change_position);\n     return result;"
      }
    ]
  },
  {
    "sha": "a9eab081d5a31cec3138685fef21e428f833db03",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOWVhYjA4MWQ1YTMxY2VjMzEzODY4NWZlZjIxZTQyOGY4MzNkYjAz",
    "commit": {
      "author": {
        "name": "Glenn Willen",
        "email": "gwillen@nerdnet.org",
        "date": "2018-10-26T22:24:55Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-12-03T18:34:57Z"
      },
      "message": "Remove redundant txConst parameter to FillPSBT\n\nGithub-Pull: #14588\nRebased-From: 4f3f5cb4b142f0fcb36241fa33b52a257901dbee",
      "tree": {
        "sha": "b21f22ed0b6b68752a968f7569c824f6654b6844",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b21f22ed0b6b68752a968f7569c824f6654b6844"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a9eab081d5a31cec3138685fef21e428f833db03",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9eab081d5a31cec3138685fef21e428f833db03",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a9eab081d5a31cec3138685fef21e428f833db03",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9eab081d5a31cec3138685fef21e428f833db03/comments",
    "author": {
      "login": "gwillen",
      "id": 458997,
      "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gwillen",
      "html_url": "https://github.com/gwillen",
      "followers_url": "https://api.github.com/users/gwillen/followers",
      "following_url": "https://api.github.com/users/gwillen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gwillen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gwillen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
      "organizations_url": "https://api.github.com/users/gwillen/orgs",
      "repos_url": "https://api.github.com/users/gwillen/repos",
      "events_url": "https://api.github.com/users/gwillen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gwillen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cfdd6b2f6c01c5c8dbe4691cc84c65b9705784c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfdd6b2f6c01c5c8dbe4691cc84c65b9705784c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cfdd6b2f6c01c5c8dbe4691cc84c65b9705784c3"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 9,
      "deletions": 21
    },
    "files": [
      {
        "sha": "24df23edd13473335cb1b002bfcc88cc82664242",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 15,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9eab081d5a31cec3138685fef21e428f833db03/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9eab081d5a31cec3138685fef21e428f833db03/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=a9eab081d5a31cec3138685fef21e428f833db03",
        "patch": "@@ -4502,13 +4502,13 @@ void AddKeypathToMap(const CWallet* pwallet, const CKeyID& keyID, std::map<CPubK\n     hd_keypaths.emplace(vchPubKey, keypath);\n }\n \n-bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, const CTransaction* txConst, int sighash_type, bool sign, bool bip32derivs)\n+bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, int sighash_type, bool sign, bool bip32derivs)\n {\n     LOCK(pwallet->cs_wallet);\n     // Get all of the previous transactions\n     bool complete = true;\n-    for (unsigned int i = 0; i < txConst->vin.size(); ++i) {\n-        const CTxIn& txin = txConst->vin[i];\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        const CTxIn& txin = psbtx.tx->vin[i];\n         PSBTInput& input = psbtx.inputs.at(i);\n \n         // If we don't know about this input, skip it and let someone else deal with it\n@@ -4559,8 +4559,8 @@ bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, const C\n     }\n \n     // Fill in the bip32 keypaths and redeemscripts for the outputs so that hardware wallets can identify change\n-    for (unsigned int i = 0; i < txConst->vout.size(); ++i) {\n-        const CTxOut& out = txConst->vout.at(i);\n+    for (unsigned int i = 0; i < psbtx.tx->vout.size(); ++i) {\n+        const CTxOut& out = psbtx.tx->vout.at(i);\n         PSBTOutput& psbt_out = psbtx.outputs.at(i);\n \n         // Dummy tx so we can use ProduceSignature to get stuff out\n@@ -4637,14 +4637,10 @@ UniValue walletprocesspsbt(const JSONRPCRequest& request)\n     // Get the sighash type\n     int nHashType = ParseSighashString(request.params[2]);\n \n-    // Use CTransaction for the constant parts of the\n-    // transaction to avoid rehashing.\n-    const CTransaction txConst(*psbtx.tx);\n-\n     // Fill transaction with our data and also sign\n     bool sign = request.params[1].isNull() ? true : request.params[1].get_bool();\n     bool bip32derivs = request.params[3].isNull() ? false : request.params[3].get_bool();\n-    bool complete = FillPSBT(pwallet, psbtx, &txConst, nHashType, sign, bip32derivs);\n+    bool complete = FillPSBT(pwallet, psbtx, nHashType, sign, bip32derivs);\n \n     UniValue result(UniValue::VOBJ);\n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n@@ -4750,13 +4746,9 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n         psbtx.outputs.push_back(PSBTOutput());\n     }\n \n-    // Use CTransaction for the constant parts of the\n-    // transaction to avoid rehashing.\n-    const CTransaction txConst(*psbtx.tx);\n-\n     // Fill transaction with out data but don't sign\n     bool bip32derivs = request.params[4].isNull() ? false : request.params[4].get_bool();\n-    FillPSBT(pwallet, psbtx, &txConst, 1, false, bip32derivs);\n+    FillPSBT(pwallet, psbtx, 1, false, bip32derivs);\n \n     // Serialize the PSBT\n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);"
      },
      {
        "sha": "54477ef3a6ddb310dd97e38f89f9e7da03a89fd3",
        "filename": "src/wallet/rpcwallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9eab081d5a31cec3138685fef21e428f833db03/src/wallet/rpcwallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9eab081d5a31cec3138685fef21e428f833db03/src/wallet/rpcwallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.h?ref=a9eab081d5a31cec3138685fef21e428f833db03",
        "patch": "@@ -30,5 +30,5 @@ bool EnsureWalletIsAvailable(CWallet *, bool avoidException);\n \n UniValue getaddressinfo(const JSONRPCRequest& request);\n UniValue signrawtransactionwithwallet(const JSONRPCRequest& request);\n-bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, const CTransaction* txConst, int sighash_type = 1, bool sign = true, bool bip32derivs = false);\n+bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, int sighash_type = 1, bool sign = true, bool bip32derivs = false);\n #endif //BITCOIN_WALLET_RPCWALLET_H"
      },
      {
        "sha": "94b5f2f374cebf33bcd079512182309e23a4e94d",
        "filename": "src/wallet/test/psbt_wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9eab081d5a31cec3138685fef21e428f833db03/src/wallet/test/psbt_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9eab081d5a31cec3138685fef21e428f833db03/src/wallet/test/psbt_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/psbt_wallet_tests.cpp?ref=a9eab081d5a31cec3138685fef21e428f833db03",
        "patch": "@@ -59,12 +59,8 @@ BOOST_AUTO_TEST_CASE(psbt_updater_test)\n     CDataStream ssData(ParseHex(\"70736274ff01009a020000000258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f000000000000000000\"), SER_NETWORK, PROTOCOL_VERSION);\n     ssData >> psbtx;\n \n-    // Use CTransaction for the constant parts of the\n-    // transaction to avoid rehashing.\n-    const CTransaction txConst(*psbtx.tx);\n-\n     // Fill transaction with our data\n-    FillPSBT(&m_wallet, psbtx, &txConst, 1, false, true);\n+    FillPSBT(&m_wallet, psbtx, 1, false, true);\n \n     // Get the final tx\n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);"
      }
    ]
  },
  {
    "sha": "70ee1f8709a54a9aeac004d8589faa08f665587a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MGVlMWY4NzA5YTU0YTlhZWFjMDA0ZDg1ODlmYWEwOGY2NjU1ODdh",
    "commit": {
      "author": {
        "name": "Glenn Willen",
        "email": "gwillen@nerdnet.org",
        "date": "2018-10-26T22:26:16Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-12-03T18:35:34Z"
      },
      "message": "New PartiallySignedTransaction constructor from CTransction\n\nNew constructor that creates a PartiallySignedTransaction from a\nCTransaction, automatically sizing the inputs and outputs vectors for\nconvenience.\n\nGithub-Pull: #14588\nRebased-From: 65166d4cf828909dc4bc49dd68a58103d015f1fd",
      "tree": {
        "sha": "e4354a95bd1d8e8737fb5dd50e11fc3e436308fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e4354a95bd1d8e8737fb5dd50e11fc3e436308fb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/70ee1f8709a54a9aeac004d8589faa08f665587a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70ee1f8709a54a9aeac004d8589faa08f665587a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/70ee1f8709a54a9aeac004d8589faa08f665587a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70ee1f8709a54a9aeac004d8589faa08f665587a/comments",
    "author": {
      "login": "gwillen",
      "id": 458997,
      "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gwillen",
      "html_url": "https://github.com/gwillen",
      "followers_url": "https://api.github.com/users/gwillen/followers",
      "following_url": "https://api.github.com/users/gwillen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gwillen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gwillen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
      "organizations_url": "https://api.github.com/users/gwillen/orgs",
      "repos_url": "https://api.github.com/users/gwillen/repos",
      "events_url": "https://api.github.com/users/gwillen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gwillen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a9eab081d5a31cec3138685fef21e428f833db03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9eab081d5a31cec3138685fef21e428f833db03",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a9eab081d5a31cec3138685fef21e428f833db03"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "190c0bf6878bf239db96eebb37432b3cebeb293d",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70ee1f8709a54a9aeac004d8589faa08f665587a/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70ee1f8709a54a9aeac004d8589faa08f665587a/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=70ee1f8709a54a9aeac004d8589faa08f665587a",
        "patch": "@@ -491,6 +491,12 @@ bool IsSolvable(const SigningProvider& provider, const CScript& script)\n     return false;\n }\n \n+PartiallySignedTransaction::PartiallySignedTransaction(const CTransaction& tx) : tx(tx)\n+{\n+    inputs.resize(tx.vin.size());\n+    outputs.resize(tx.vout.size());\n+}\n+\n bool PartiallySignedTransaction::IsNull() const\n {\n     return !tx && inputs.empty() && outputs.empty() && unknown.empty();"
      },
      {
        "sha": "79cd6dc53f8b69c66b75ce077bf41f8e1506cc3b",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70ee1f8709a54a9aeac004d8589faa08f665587a/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70ee1f8709a54a9aeac004d8589faa08f665587a/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=70ee1f8709a54a9aeac004d8589faa08f665587a",
        "patch": "@@ -550,6 +550,7 @@ struct PartiallySignedTransaction\n     bool IsSane() const;\n     PartiallySignedTransaction() {}\n     PartiallySignedTransaction(const PartiallySignedTransaction& psbt_in) : tx(psbt_in.tx), inputs(psbt_in.inputs), outputs(psbt_in.outputs), unknown(psbt_in.unknown) {}\n+    explicit PartiallySignedTransaction(const CTransaction& tx);\n \n     // Only checks if they refer to the same transaction\n     friend bool operator==(const PartiallySignedTransaction& a, const PartiallySignedTransaction &b)"
      },
      {
        "sha": "ec103c67637c7c78cc868ff8dccd93accd7a7cd8",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 8,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70ee1f8709a54a9aeac004d8589faa08f665587a/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70ee1f8709a54a9aeac004d8589faa08f665587a/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=70ee1f8709a54a9aeac004d8589faa08f665587a",
        "patch": "@@ -4737,14 +4737,7 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n     FundTransaction(pwallet, rawTx, fee, change_position, request.params[3]);\n \n     // Make a blank psbt\n-    PartiallySignedTransaction psbtx;\n-    psbtx.tx = rawTx;\n-    for (unsigned int i = 0; i < rawTx.vin.size(); ++i) {\n-        psbtx.inputs.push_back(PSBTInput());\n-    }\n-    for (unsigned int i = 0; i < rawTx.vout.size(); ++i) {\n-        psbtx.outputs.push_back(PSBTOutput());\n-    }\n+    PartiallySignedTransaction psbtx(rawTx);\n \n     // Fill transaction with out data but don't sign\n     bool bip32derivs = request.params[4].isNull() ? false : request.params[4].get_bool();"
      }
    ]
  },
  {
    "sha": "39ece4fc2807b3442759d879985146ac0de9742d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOWVjZTRmYzI4MDdiMzQ0Mjc1OWQ4Nzk5ODUxNDZhYzBkZTk3NDJk",
    "commit": {
      "author": {
        "name": "Glenn Willen",
        "email": "gwillen@nerdnet.org",
        "date": "2018-10-26T22:28:48Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-12-03T18:36:08Z"
      },
      "message": "Add bool PSBTInputSigned\n\nRefactor out a \"PSBTInputSigned\" function to check if a PSBT is signed,\nfor use in subsequent commits.\n\nAlso improve a related comment.\n\nGitHub-Pull: #14588\nRebased-From: 53e6fffb8f5b10f94708d33d667a67cb91c2d09d",
      "tree": {
        "sha": "d1cf0af99a4d6bdca38f67f0fb7b05b686aff61d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d1cf0af99a4d6bdca38f67f0fb7b05b686aff61d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/39ece4fc2807b3442759d879985146ac0de9742d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39ece4fc2807b3442759d879985146ac0de9742d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/39ece4fc2807b3442759d879985146ac0de9742d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39ece4fc2807b3442759d879985146ac0de9742d/comments",
    "author": {
      "login": "gwillen",
      "id": 458997,
      "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gwillen",
      "html_url": "https://github.com/gwillen",
      "followers_url": "https://api.github.com/users/gwillen/followers",
      "following_url": "https://api.github.com/users/gwillen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gwillen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gwillen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
      "organizations_url": "https://api.github.com/users/gwillen/orgs",
      "repos_url": "https://api.github.com/users/gwillen/repos",
      "events_url": "https://api.github.com/users/gwillen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gwillen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "70ee1f8709a54a9aeac004d8589faa08f665587a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70ee1f8709a54a9aeac004d8589faa08f665587a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/70ee1f8709a54a9aeac004d8589faa08f665587a"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 14,
      "deletions": 4
    },
    "files": [
      {
        "sha": "5df39f9ba4abb93b54eabebebbfd60779bd90b71",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/39ece4fc2807b3442759d879985146ac0de9742d/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/39ece4fc2807b3442759d879985146ac0de9742d/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=39ece4fc2807b3442759d879985146ac0de9742d",
        "patch": "@@ -1643,13 +1643,16 @@ UniValue finalizepsbt(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n     }\n \n-    // Get all of the previous transactions\n+    // Finalize input signatures -- in case we have partial signatures that add up to a complete\n+    //   signature, but have not combined them yet (e.g. because the combiner that created this\n+    //   PartiallySignedTransaction did not understand them), this will combine them into a final\n+    //   script.\n     bool complete = true;\n     for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n         PSBTInput& input = psbtx.inputs.at(i);\n \n         SignatureData sigdata;\n-        complete &= SignPSBTInput(DUMMY_SIGNING_PROVIDER, *psbtx.tx, input, sigdata, i, 1);\n+        complete &= SignPSBTInput(DUMMY_SIGNING_PROVIDER, *psbtx.tx, input, sigdata, i, SIGHASH_ALL);\n     }\n \n     UniValue result(UniValue::VOBJ);"
      },
      {
        "sha": "945e1623551c223690457caff7d68a8e55e35679",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/39ece4fc2807b3442759d879985146ac0de9742d/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/39ece4fc2807b3442759d879985146ac0de9742d/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=39ece4fc2807b3442759d879985146ac0de9742d",
        "patch": "@@ -233,10 +233,14 @@ bool ProduceSignature(const SigningProvider& provider, const BaseSignatureCreato\n     return sigdata.complete;\n }\n \n+bool PSBTInputSigned(PSBTInput& input)\n+{\n+    return !input.final_script_sig.empty() || !input.final_script_witness.IsNull();\n+}\n+\n bool SignPSBTInput(const SigningProvider& provider, const CMutableTransaction& tx, PSBTInput& input, SignatureData& sigdata, int index, int sighash)\n {\n-    // if this input has a final scriptsig or scriptwitness, don't do anything with it\n-    if (!input.final_script_sig.empty() || !input.final_script_witness.IsNull()) {\n+    if (PSBTInputSigned(input)) {\n         return true;\n     }\n "
      },
      {
        "sha": "ebc742c09d1dd6c7281eaf46a8c4bbfe1ce908d8",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/39ece4fc2807b3442759d879985146ac0de9742d/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/39ece4fc2807b3442759d879985146ac0de9742d/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=39ece4fc2807b3442759d879985146ac0de9742d",
        "patch": "@@ -714,6 +714,9 @@ bool ProduceSignature(const SigningProvider& provider, const BaseSignatureCreato\n bool SignSignature(const SigningProvider &provider, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, const CAmount& amount, int nHashType);\n bool SignSignature(const SigningProvider &provider, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType);\n \n+/** Checks whether a PSBTInput is already signed. */\n+bool PSBTInputSigned(PSBTInput& input);\n+\n /** Signs a PSBTInput, verifying that all provided data matches what is being signed. */\n bool SignPSBTInput(const SigningProvider& provider, const CMutableTransaction& tx, PSBTInput& input, SignatureData& sigdata, int index, int sighash = 1);\n "
      }
    ]
  },
  {
    "sha": "ad94165db91c0416634459e18f173c5cd063dc55",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZDk0MTY1ZGI5MWMwNDE2NjM0NDU5ZTE4ZjE3M2M1Y2QwNjNkYzU1",
    "commit": {
      "author": {
        "name": "Glenn Willen",
        "email": "gwillen@nerdnet.org",
        "date": "2018-10-26T22:30:50Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-12-03T18:36:37Z"
      },
      "message": "Simplify arguments to SignPSBTInput\n\nRemove redundant arguments to SignPSBTInput -- since it needs several\nbits of the PartiallySignedTransaction, pass in a reference instead of\ndoing it piecemeal. This saves us having to pass in both a PSBTInput and\nits index, as well as having to pass in the CTransaction. Also avoid\nredundantly passing the sighash_type, which is contained in the\nPSBTInput already.\n\nGithub-Pull: #14588\nRebased-From: 0f5bda2bd941686620ef0eb90bd7ed973cc7ef73",
      "tree": {
        "sha": "ba753d1419aa89bc6f44a74d70f3af4d74650b54",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba753d1419aa89bc6f44a74d70f3af4d74650b54"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ad94165db91c0416634459e18f173c5cd063dc55",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad94165db91c0416634459e18f173c5cd063dc55",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ad94165db91c0416634459e18f173c5cd063dc55",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad94165db91c0416634459e18f173c5cd063dc55/comments",
    "author": {
      "login": "gwillen",
      "id": 458997,
      "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gwillen",
      "html_url": "https://github.com/gwillen",
      "followers_url": "https://api.github.com/users/gwillen/followers",
      "following_url": "https://api.github.com/users/gwillen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gwillen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gwillen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
      "organizations_url": "https://api.github.com/users/gwillen/orgs",
      "repos_url": "https://api.github.com/users/gwillen/repos",
      "events_url": "https://api.github.com/users/gwillen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gwillen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "39ece4fc2807b3442759d879985146ac0de9742d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39ece4fc2807b3442759d879985146ac0de9742d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/39ece4fc2807b3442759d879985146ac0de9742d"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 10,
      "deletions": 9
    },
    "files": [
      {
        "sha": "7de3638f4e2ac4d0e6b74610956274852170555c",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad94165db91c0416634459e18f173c5cd063dc55/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad94165db91c0416634459e18f173c5cd063dc55/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=ad94165db91c0416634459e18f173c5cd063dc55",
        "patch": "@@ -1649,10 +1649,8 @@ UniValue finalizepsbt(const JSONRPCRequest& request)\n     //   script.\n     bool complete = true;\n     for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n-        PSBTInput& input = psbtx.inputs.at(i);\n-\n         SignatureData sigdata;\n-        complete &= SignPSBTInput(DUMMY_SIGNING_PROVIDER, *psbtx.tx, input, sigdata, i, SIGHASH_ALL);\n+        complete &= SignPSBTInput(DUMMY_SIGNING_PROVIDER, psbtx, sigdata, i, SIGHASH_ALL);\n     }\n \n     UniValue result(UniValue::VOBJ);"
      },
      {
        "sha": "8bc142f6e1e0e4b5a07ebd287656e024bf7ed9c5",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad94165db91c0416634459e18f173c5cd063dc55/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad94165db91c0416634459e18f173c5cd063dc55/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=ad94165db91c0416634459e18f173c5cd063dc55",
        "patch": "@@ -238,8 +238,11 @@ bool PSBTInputSigned(PSBTInput& input)\n     return !input.final_script_sig.empty() || !input.final_script_witness.IsNull();\n }\n \n-bool SignPSBTInput(const SigningProvider& provider, const CMutableTransaction& tx, PSBTInput& input, SignatureData& sigdata, int index, int sighash)\n+bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, SignatureData& sigdata, int index, int sighash)\n {\n+    PSBTInput& input = psbt.inputs.at(index);\n+    const CMutableTransaction& tx = *psbt.tx;\n+\n     if (PSBTInputSigned(input)) {\n         return true;\n     }"
      },
      {
        "sha": "f24d77cb310c861d6ad2fb1ddd8daae95c517ef4",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad94165db91c0416634459e18f173c5cd063dc55/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad94165db91c0416634459e18f173c5cd063dc55/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=ad94165db91c0416634459e18f173c5cd063dc55",
        "patch": "@@ -718,7 +718,7 @@ bool SignSignature(const SigningProvider &provider, const CTransaction& txFrom,\n bool PSBTInputSigned(PSBTInput& input);\n \n /** Signs a PSBTInput, verifying that all provided data matches what is being signed. */\n-bool SignPSBTInput(const SigningProvider& provider, const CMutableTransaction& tx, PSBTInput& input, SignatureData& sigdata, int index, int sighash = 1);\n+bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, SignatureData& sigdata, int index, int sighash = SIGHASH_ALL);\n \n /** Extract signature data from a transaction input, and insert it. */\n SignatureData DataFromTransaction(const CMutableTransaction& tx, unsigned int nIn, const CTxOut& txout);"
      },
      {
        "sha": "926902708a848725d0fe17c6c1470f997169b41f",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad94165db91c0416634459e18f173c5cd063dc55/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad94165db91c0416634459e18f173c5cd063dc55/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=ad94165db91c0416634459e18f173c5cd063dc55",
        "patch": "@@ -4529,9 +4529,9 @@ bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, int sig\n \n         SignatureData sigdata;\n         if (sign) {\n-            complete &= SignPSBTInput(*pwallet, *psbtx.tx, input, sigdata, i, sighash_type);\n+            complete &= SignPSBTInput(*pwallet, psbtx, sigdata, i, sighash_type);\n         } else {\n-            complete &= SignPSBTInput(PublicOnlySigningProvider(pwallet), *psbtx.tx, input, sigdata, i, sighash_type);\n+            complete &= SignPSBTInput(PublicOnlySigningProvider(pwallet), psbtx, sigdata, i, sighash_type);\n         }\n \n         if (sigdata.witness) {"
      },
      {
        "sha": "abd7750874632beb6dd179ae0a3ab72c4c682e6a",
        "filename": "src/wallet/rpcwallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad94165db91c0416634459e18f173c5cd063dc55/src/wallet/rpcwallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad94165db91c0416634459e18f173c5cd063dc55/src/wallet/rpcwallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.h?ref=ad94165db91c0416634459e18f173c5cd063dc55",
        "patch": "@@ -30,5 +30,5 @@ bool EnsureWalletIsAvailable(CWallet *, bool avoidException);\n \n UniValue getaddressinfo(const JSONRPCRequest& request);\n UniValue signrawtransactionwithwallet(const JSONRPCRequest& request);\n-bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, int sighash_type = 1, bool sign = true, bool bip32derivs = false);\n+bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, int sighash_type = 1 /* SIGHASH_ALL */, bool sign = true, bool bip32derivs = false);\n #endif //BITCOIN_WALLET_RPCWALLET_H"
      },
      {
        "sha": "8d46718a7dc0d78dde5850de360fa09f0d476942",
        "filename": "src/wallet/test/psbt_wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad94165db91c0416634459e18f173c5cd063dc55/src/wallet/test/psbt_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad94165db91c0416634459e18f173c5cd063dc55/src/wallet/test/psbt_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/psbt_wallet_tests.cpp?ref=ad94165db91c0416634459e18f173c5cd063dc55",
        "patch": "@@ -60,7 +60,7 @@ BOOST_AUTO_TEST_CASE(psbt_updater_test)\n     ssData >> psbtx;\n \n     // Fill transaction with our data\n-    FillPSBT(&m_wallet, psbtx, 1, false, true);\n+    FillPSBT(&m_wallet, psbtx, SIGHASH_ALL, false, true);\n \n     // Get the final tx\n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);"
      }
    ]
  },
  {
    "sha": "db445d4e5a25ff13de014dbbf43bb99cde8b8769",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYjQ0NWQ0ZTVhMjVmZjEzZGUwMTRkYmJmNDNiYjk5Y2RlOGI4NzY5",
    "commit": {
      "author": {
        "name": "Glenn Willen",
        "email": "gwillen@nerdnet.org",
        "date": "2018-10-26T22:31:41Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-12-03T18:37:08Z"
      },
      "message": "Refactor PSBTInput signing to enforce invariant\n\nRefactor the process of PSBTInput signing to enforce the invariant that\na PSBTInput always has _either_ a witness_utxo or a non_witness_utxo,\nnever both.\n\nThis simplifies the logic of SignPSBTInput slightly, since it no longer\nhas to deal with the \"both\" case. When calling it, we now give it, in\norder of preference: (1) whichever of the utxo fields was already\npresent in the PSBT we received, or (2) if neither, the\nnon_witness_utxo field, which is just a copy of the input transaction,\nwhich we get from the wallet.\n\nSignPSBTInput no longer has to remove one of the two fields; instead, it\nwill check if we have a witness signature, and if so, it will replace\nthe non_witness_utxo with the witness_utxo (which is smaller, as it is\njust a copy of the output being spent.)\n\nAdd PSBTInput::IsSane checks in two more places, which checks for\nboth utxo fields being present; we will now give an RPC error early on\nif we are supplied such a malformed PSBT to fill in.\n\nAlso add a check to FillPSBT, to avoid touching any input that is\nalready signed. (This is now redundant, since we should no longer\npotentially harm an already-signed input, but it's harmless.)\n\nfixes #14473\n\nGithub-Pull: #14588",
      "tree": {
        "sha": "133cfa34c9677e5d5c2554c0283164c4fa2fea50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/133cfa34c9677e5d5c2554c0283164c4fa2fea50"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/db445d4e5a25ff13de014dbbf43bb99cde8b8769",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db445d4e5a25ff13de014dbbf43bb99cde8b8769",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/db445d4e5a25ff13de014dbbf43bb99cde8b8769",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db445d4e5a25ff13de014dbbf43bb99cde8b8769/comments",
    "author": {
      "login": "gwillen",
      "id": 458997,
      "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gwillen",
      "html_url": "https://github.com/gwillen",
      "followers_url": "https://api.github.com/users/gwillen/followers",
      "following_url": "https://api.github.com/users/gwillen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gwillen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gwillen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
      "organizations_url": "https://api.github.com/users/gwillen/orgs",
      "repos_url": "https://api.github.com/users/gwillen/repos",
      "events_url": "https://api.github.com/users/gwillen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gwillen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ad94165db91c0416634459e18f173c5cd063dc55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad94165db91c0416634459e18f173c5cd063dc55",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ad94165db91c0416634459e18f173c5cd063dc55"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 37,
      "deletions": 25
    },
    "files": [
      {
        "sha": "f97d6a25332cea24777d105e596a3082e4a66346",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 7,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db445d4e5a25ff13de014dbbf43bb99cde8b8769/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db445d4e5a25ff13de014dbbf43bb99cde8b8769/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=db445d4e5a25ff13de014dbbf43bb99cde8b8769",
        "patch": "@@ -253,15 +253,19 @@ bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction&\n     // Get UTXO\n     bool require_witness_sig = false;\n     CTxOut utxo;\n+\n+    // Verify input sanity, which checks that at most one of witness or non-witness utxos is provided.\n+    if (!input.IsSane()) {\n+        return false;\n+    }\n+\n     if (input.non_witness_utxo) {\n         // If we're taking our information from a non-witness UTXO, verify that it matches the prevout.\n-        if (input.non_witness_utxo->GetHash() != tx.vin[index].prevout.hash) return false;\n-        // If both witness and non-witness UTXO are provided, verify that they match. This check shouldn't\n-        // matter, as the PSBT deserializer enforces only one of both is provided, and the only way both\n-        // can be present is when they're added simultaneously by FillPSBT (in which case they always match).\n-        // Still, check in order to not rely on callers to enforce this.\n-        if (!input.witness_utxo.IsNull() && input.non_witness_utxo->vout[tx.vin[index].prevout.n] != input.witness_utxo) return false;\n-        utxo = input.non_witness_utxo->vout[tx.vin[index].prevout.n];\n+        COutPoint prevout = tx.vin[index].prevout;\n+        if (input.non_witness_utxo->GetHash() != prevout.hash) {\n+            return false;\n+        }\n+        utxo = input.non_witness_utxo->vout[prevout.n];\n     } else if (!input.witness_utxo.IsNull()) {\n         utxo = input.witness_utxo;\n         // When we're taking our information from a witness UTXO, we can't verify it is actually data from\n@@ -279,6 +283,13 @@ bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction&\n     // Verify that a witness signature was produced in case one was required.\n     if (require_witness_sig && !sigdata.witness) return false;\n     input.FromSignatureData(sigdata);\n+\n+    // If we have a witness signature, use the smaller witness UTXO.\n+    if (sigdata.witness) {\n+        input.witness_utxo = utxo;\n+        input.non_witness_utxo = nullptr;\n+    }\n+\n     return sig_complete;\n }\n "
      },
      {
        "sha": "6400b4470ffe0cda83a545b28181ddc938d9870c",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 18,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db445d4e5a25ff13de014dbbf43bb99cde8b8769/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db445d4e5a25ff13de014dbbf43bb99cde8b8769/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=db445d4e5a25ff13de014dbbf43bb99cde8b8769",
        "patch": "@@ -4511,15 +4511,25 @@ bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, int sig\n         const CTxIn& txin = psbtx.tx->vin[i];\n         PSBTInput& input = psbtx.inputs.at(i);\n \n-        // If we don't know about this input, skip it and let someone else deal with it\n-        const uint256& txhash = txin.prevout.hash;\n-        const auto it = pwallet->mapWallet.find(txhash);\n-        if (it != pwallet->mapWallet.end()) {\n-            const CWalletTx& wtx = it->second;\n-            CTxOut utxo = wtx.tx->vout[txin.prevout.n];\n-            // Update both UTXOs from the wallet.\n-            input.non_witness_utxo = wtx.tx;\n-            input.witness_utxo = utxo;\n+        if (PSBTInputSigned(input)) {\n+            continue;\n+        }\n+\n+        // Verify input looks sane. This will check that we have at most one uxto, witness or non-witness.\n+        if (!input.IsSane()) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"PSBT input is not sane.\");\n+        }\n+\n+        // If we have no utxo, grab it from the wallet.\n+        if (!input.non_witness_utxo && input.witness_utxo.IsNull()) {\n+            const uint256& txhash = txin.prevout.hash;\n+            const auto it = pwallet->mapWallet.find(txhash);\n+            if (it != pwallet->mapWallet.end()) {\n+                const CWalletTx& wtx = it->second;\n+                // We only need the non_witness_utxo, which is a superset of the witness_utxo.\n+                //   The signing code will switch to the smaller witness_utxo if this is ok.\n+                input.non_witness_utxo = wtx.tx;\n+            }\n         }\n \n         // Get the Sighash type\n@@ -4541,15 +4551,6 @@ bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, int sig\n             }\n         }\n \n-        // If both UTXO types are present, drop the unnecessary one.\n-        if (input.non_witness_utxo && !input.witness_utxo.IsNull()) {\n-            if (sigdata.witness) {\n-                input.non_witness_utxo = nullptr;\n-            } else {\n-                input.witness_utxo.SetNull();\n-            }\n-        }\n-\n         // Get public key paths\n         if (bip32derivs) {\n             for (const auto& pubkey_it : sigdata.misc_pubkeys) {"
      }
    ]
  },
  {
    "sha": "ff56bb9b44387f7e20ae7de59087cf19ea216726",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZjU2YmI5YjQ0Mzg3ZjdlMjBhZTdkZTU5MDg3Y2YxOWVhMjE2NzI2",
    "commit": {
      "author": {
        "name": "Glenn Willen",
        "email": "gwillen@nerdnet.org",
        "date": "2018-10-30T07:41:19Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-12-03T18:37:22Z"
      },
      "message": "Add regression test for PSBT signing bug #14473\n\nGithub-Pull: #14588\nRebased-From: e13fea975d5e4ae961faba36379a1cdaf9e50c1c",
      "tree": {
        "sha": "993c57d9fe4689d3e14dcba795361a3ec2308e4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/993c57d9fe4689d3e14dcba795361a3ec2308e4c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff56bb9b44387f7e20ae7de59087cf19ea216726",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff56bb9b44387f7e20ae7de59087cf19ea216726",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ff56bb9b44387f7e20ae7de59087cf19ea216726",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff56bb9b44387f7e20ae7de59087cf19ea216726/comments",
    "author": {
      "login": "gwillen",
      "id": 458997,
      "node_id": "MDQ6VXNlcjQ1ODk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gwillen",
      "html_url": "https://github.com/gwillen",
      "followers_url": "https://api.github.com/users/gwillen/followers",
      "following_url": "https://api.github.com/users/gwillen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gwillen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gwillen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions",
      "organizations_url": "https://api.github.com/users/gwillen/orgs",
      "repos_url": "https://api.github.com/users/gwillen/repos",
      "events_url": "https://api.github.com/users/gwillen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gwillen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "db445d4e5a25ff13de014dbbf43bb99cde8b8769",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db445d4e5a25ff13de014dbbf43bb99cde8b8769",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/db445d4e5a25ff13de014dbbf43bb99cde8b8769"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 7,
      "deletions": 0
    },
    "files": [
      {
        "sha": "92132addba4aef32dac7174a6b446d3c37479f07",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff56bb9b44387f7e20ae7de59087cf19ea216726/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff56bb9b44387f7e20ae7de59087cf19ea216726/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=ff56bb9b44387f7e20ae7de59087cf19ea216726",
        "patch": "@@ -168,6 +168,13 @@ def run_test(self):\n             assert tx_in[\"sequence\"] > MAX_BIP125_RBF_SEQUENCE\n         assert_equal(decoded_psbt[\"tx\"][\"locktime\"], 0)\n \n+        # Regression test for 14473 (mishandling of already-signed witness transaction):\n+        psbtx_info = self.nodes[0].walletcreatefundedpsbt([{\"txid\":unspent[\"txid\"], \"vout\":unspent[\"vout\"]}], [{self.nodes[2].getnewaddress():unspent[\"amount\"]+1}])\n+        complete_psbt = self.nodes[0].walletprocesspsbt(psbtx_info[\"psbt\"])\n+        double_processed_psbt = self.nodes[0].walletprocesspsbt(complete_psbt[\"psbt\"])\n+        assert_equal(complete_psbt, double_processed_psbt)\n+        # We don't care about the decode result, but decoding must succeed.\n+        self.nodes[0].decodepsbt(double_processed_psbt[\"psbt\"])\n \n         # Make sure change address wallet does not have P2SH innerscript access to results in success\n         # when attempting BnB coin selection"
      }
    ]
  },
  {
    "sha": "7bee41452bee4d10ab075999580853bdc3431e8b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YmVlNDE0NTJiZWU0ZDEwYWIwNzU5OTk1ODA4NTNiZGMzNDMxZThi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-09-20T18:43:06Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-12-03T18:37:52Z"
      },
      "message": "Add test for conversion from non-witness to witness UTXO\n\nGithub-Pull: #14197\nRebased-From: 862d159d635c1de219d94e030b186a745fe28eb9",
      "tree": {
        "sha": "0fa4809b3d6c3bebb0a49a63cb45ea5d560af0de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0fa4809b3d6c3bebb0a49a63cb45ea5d560af0de"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7bee41452bee4d10ab075999580853bdc3431e8b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bee41452bee4d10ab075999580853bdc3431e8b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7bee41452bee4d10ab075999580853bdc3431e8b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bee41452bee4d10ab075999580853bdc3431e8b/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff56bb9b44387f7e20ae7de59087cf19ea216726",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff56bb9b44387f7e20ae7de59087cf19ea216726",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff56bb9b44387f7e20ae7de59087cf19ea216726"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 46,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a31719088f8211b621b8d32b78853f41675fcb7a",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 46,
        "deletions": 1,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7bee41452bee4d10ab075999580853bdc3431e8b/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7bee41452bee4d10ab075999580853bdc3431e8b/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=7bee41452bee4d10ab075999580853bdc3431e8b",
        "patch": "@@ -6,7 +6,7 @@\n \"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_raises_rpc_error, find_output\n+from test_framework.util import assert_equal, assert_raises_rpc_error, find_output, disconnect_nodes, connect_nodes_bi, sync_blocks\n \n import json\n import os\n@@ -23,6 +23,45 @@ def set_test_params(self):\n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n+    def test_utxo_conversion(self):\n+        mining_node = self.nodes[2]\n+        offline_node = self.nodes[0]\n+        online_node = self.nodes[1]\n+\n+        # Disconnect offline node from others\n+        disconnect_nodes(offline_node, 1)\n+        disconnect_nodes(online_node, 0)\n+        disconnect_nodes(offline_node, 2)\n+        disconnect_nodes(mining_node, 0)\n+\n+        # Mine a transaction that credits the offline address\n+        offline_addr = offline_node.getnewaddress(address_type=\"p2sh-segwit\")\n+        online_addr = online_node.getnewaddress(address_type=\"p2sh-segwit\")\n+        online_node.importaddress(offline_addr, \"\", False)\n+        mining_node.sendtoaddress(address=offline_addr, amount=1.0)\n+        mining_node.generate(nblocks=1)\n+        sync_blocks([mining_node, online_node])\n+\n+        # Construct an unsigned PSBT on the online node (who doesn't know the output is Segwit, so will include a non-witness UTXO)\n+        utxos = online_node.listunspent(addresses=[offline_addr])\n+        raw = online_node.createrawtransaction([{\"txid\":utxos[0][\"txid\"], \"vout\":utxos[0][\"vout\"]}],[{online_addr:0.9999}])\n+        psbt = online_node.walletprocesspsbt(online_node.converttopsbt(raw))[\"psbt\"]\n+        assert(\"non_witness_utxo\" in mining_node.decodepsbt(psbt)[\"inputs\"][0])\n+\n+        # Have the offline node sign the PSBT (which will update the UTXO to segwit)\n+        signed_psbt = offline_node.walletprocesspsbt(psbt)[\"psbt\"]\n+        assert(\"witness_utxo\" in mining_node.decodepsbt(signed_psbt)[\"inputs\"][0])\n+\n+        # Make sure we can mine the resulting transaction\n+        txid = mining_node.sendrawtransaction(mining_node.finalizepsbt(signed_psbt)[\"hex\"])\n+        mining_node.generate(1)\n+        sync_blocks([mining_node, online_node])\n+        assert_equal(online_node.gettxout(txid,0)[\"confirmations\"], 1)\n+\n+        # Reconnect\n+        connect_nodes_bi(self.nodes, 0, 1)\n+        connect_nodes_bi(self.nodes, 0, 2)\n+\n     def run_test(self):\n         # Create and fund a raw tx for sending 10 BTC\n         psbtx1 = self.nodes[0].walletcreatefundedpsbt([], {self.nodes[2].getnewaddress():10})['psbt']\n@@ -235,6 +274,12 @@ def run_test(self):\n             extracted = self.nodes[2].finalizepsbt(extractor['extract'], True)['hex']\n             assert_equal(extracted, extractor['result'])\n \n+        # Unload extra wallets\n+        for i, signer in enumerate(signers):\n+            self.nodes[2].unloadwallet(\"wallet{}\".format(i))\n+\n+        self.test_utxo_conversion()\n+\n \n if __name__ == '__main__':\n     PSBTTest().main()"
      }
    ]
  },
  {
    "sha": "5d12143c730c3dcd11bb9dce16ed43a15a16eea2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZDEyMTQzYzczMGMzZGNkMTFiYjlkY2UxNmVkNDNhMTVhMTZlZWEy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-12-05T15:35:24Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-12-05T15:35:31Z"
      },
      "message": "Merge #14780: PSBT backports to 0.17\n\n7bee41452b Add test for conversion from non-witness to witness UTXO (Pieter Wuille)\nff56bb9b44 Add regression test for PSBT signing bug #14473 (Glenn Willen)\ndb445d4e5a Refactor PSBTInput signing to enforce invariant (Glenn Willen)\nad94165db9 Simplify arguments to SignPSBTInput (Glenn Willen)\n39ece4fc28 Add bool PSBTInputSigned (Glenn Willen)\n70ee1f8709 New PartiallySignedTransaction constructor from CTransction (Glenn Willen)\na9eab081d5 Remove redundant txConst parameter to FillPSBT (Glenn Willen)\ncfdd6b2f6c More concise conversion of CDataStream to string (Glenn Willen)\na3fe125490 check that a separator is found for psbt inputs, outputs, and global map (Andrew Chow)\n\nPull request description:\n\n  This is a backport of #14588, #14377, and #14197's test to 0.17.\n\nTree-SHA512: 07535ec69a878a63b549e5e463345e233f34662dff805202614cf2ffc896c6d1981363e6d06d02db2e02d815075ad8ebdc5f93f637052cff8c8cbe6c8dfa096a",
      "tree": {
        "sha": "0fa4809b3d6c3bebb0a49a63cb45ea5d560af0de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0fa4809b3d6c3bebb0a49a63cb45ea5d560af0de"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5d12143c730c3dcd11bb9dce16ed43a15a16eea2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcB/BDAAoJENLqSFDnUoslNboP/Ru5uBGuZ55TMd5vAxuHAq/z\nLIVV4YsH/WQDqqO8mxEQOXJyvkylT49u9zvwCRKG5wuk+YRIDQqMeH2fRL379AN/\n8kSKob26X73712aUFiSNqvYhB+R7bCiJITifCQKrd+J8yJMT/gKaXk88Y49wo0UD\nsQ6g/nqSGBYGTDbR3mf0nuzaSCLT59Msjv698lUKwtspYpJln4ZjqJ2RGwdKtxYn\nEfMmnEVd/upQUIouzzNVgGIMeR+QRRvi+JihSqfgd8mg7lPJlpXQx/dHO1NdyJWT\nMe2XHuF3x6IIgXVnDJCB7tJx5Qu2ltfliYrD9jjjtQnJN6RuRdtSiOeVtSo3WYGN\n3aQnnMGuJRNF6raBZaA5QxfQJmxqOtRQ3t8x0C9jDcTGYEBP3MPxxcmb494nc8vQ\ntjV/IbhA2+m0J9fPe7XE4rImtArL8SOa07n4OeLMSy5Fm0tp1dD6ZMMX38mCznNN\ny/+xkwewQD0obPDWtB7C0qHdTptXSdub9s+l7AuA0n8+vCXBqOeItirE2jh4IX46\nHLRhN0xIbH8zzz9YO18Ak7qMQuTeFI2Q1Mv2w2J/kxOQUB29vlO0v+wLj+C9W184\n85lXaelcfaqWAvim62s6bfRnFeCHuBnlXJ1trqtNJoTjqPSxqqdPGvSa6tphwtev\nJY/xW0AH+/0gpQvNK80j\n=bAls\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIJn8e5zQbC4BdpubXH5D6sTmeB+ibv9IMbE8tv4ro9swCP/wEImk5GlwG935\nb2nlVJPAhIUI8BBEcy4yi3SnzScLEZXsoLc2CPEEXAfwR/AIszjTd57ZoGcAg9/j\nDS75DI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5jb23/\n8BCLXSVkB89NHvEPP/qx0YqDCPEEXAfwR/AI9778GsPrhPMAg9/jDS75DI4uLWh0\ndHBzOi8vYWxpY2UuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEKXQ\nzOUROpsd6mSTGSqwuvsI8QRcB/BH8AhAySeb7FWMJgCD3+MNLvkMjiMiaHR0cHM6\nLy9idGMuY2FsZW5kYXIuY2F0YWxsYXh5LmNvbfAQp0pEWhBpn4QXySynvbYqiQjx\nIE+fLgqz3o6cwblMcpHWaMlgwoJZe0Rqn93utj1OU8ToCPEEXAfwR/AIdJbF4xfp\nrWYAg9/jDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0\nYW1wcy5vcmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 0fa4809b3d6c3bebb0a49a63cb45ea5d560af0de\nparent 3362a95be360dd798c32fc0184c0fe67da6ef43a\nparent 7bee41452bee4d10ab075999580853bdc3431e8b\nauthor MarcoFalke <falke.marco@gmail.com> 1544024124 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1544024131 -0500\n\nMerge #14780: PSBT backports to 0.17\n\n7bee41452b Add test for conversion from non-witness to witness UTXO (Pieter Wuille)\nff56bb9b44 Add regression test for PSBT signing bug #14473 (Glenn Willen)\ndb445d4e5a Refactor PSBTInput signing to enforce invariant (Glenn Willen)\nad94165db9 Simplify arguments to SignPSBTInput (Glenn Willen)\n39ece4fc28 Add bool PSBTInputSigned (Glenn Willen)\n70ee1f8709 New PartiallySignedTransaction constructor from CTransction (Glenn Willen)\na9eab081d5 Remove redundant txConst parameter to FillPSBT (Glenn Willen)\ncfdd6b2f6c More concise conversion of CDataStream to string (Glenn Willen)\na3fe125490 check that a separator is found for psbt inputs, outputs, and global map (Andrew Chow)\n\nPull request description:\n\n  This is a backport of #14588, #14377, and #14197's test to 0.17.\n\nTree-SHA512: 07535ec69a878a63b549e5e463345e233f34662dff805202614cf2ffc896c6d1981363e6d06d02db2e02d815075ad8ebdc5f93f637052cff8c8cbe6c8dfa096a\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d12143c730c3dcd11bb9dce16ed43a15a16eea2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5d12143c730c3dcd11bb9dce16ed43a15a16eea2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d12143c730c3dcd11bb9dce16ed43a15a16eea2/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3362a95be360dd798c32fc0184c0fe67da6ef43a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3362a95be360dd798c32fc0184c0fe67da6ef43a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3362a95be360dd798c32fc0184c0fe67da6ef43a"
      },
      {
        "sha": "7bee41452bee4d10ab075999580853bdc3431e8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bee41452bee4d10ab075999580853bdc3431e8b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7bee41452bee4d10ab075999580853bdc3431e8b"
      }
    ],
    "stats": {
      "total": 234,
      "additions": 161,
      "deletions": 73
    },
    "files": [
      {
        "sha": "7de3638f4e2ac4d0e6b74610956274852170555c",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d12143c730c3dcd11bb9dce16ed43a15a16eea2/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d12143c730c3dcd11bb9dce16ed43a15a16eea2/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=5d12143c730c3dcd11bb9dce16ed43a15a16eea2",
        "patch": "@@ -1643,13 +1643,14 @@ UniValue finalizepsbt(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n     }\n \n-    // Get all of the previous transactions\n+    // Finalize input signatures -- in case we have partial signatures that add up to a complete\n+    //   signature, but have not combined them yet (e.g. because the combiner that created this\n+    //   PartiallySignedTransaction did not understand them), this will combine them into a final\n+    //   script.\n     bool complete = true;\n     for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n-        PSBTInput& input = psbtx.inputs.at(i);\n-\n         SignatureData sigdata;\n-        complete &= SignPSBTInput(DUMMY_SIGNING_PROVIDER, *psbtx.tx, input, sigdata, i, 1);\n+        complete &= SignPSBTInput(DUMMY_SIGNING_PROVIDER, psbtx, sigdata, i, SIGHASH_ALL);\n     }\n \n     UniValue result(UniValue::VOBJ);\n@@ -1662,10 +1663,10 @@ UniValue finalizepsbt(const JSONRPCRequest& request)\n             mtx.vin[i].scriptWitness = psbtx.inputs[i].final_script_witness;\n         }\n         ssTx << mtx;\n-        result.pushKV(\"hex\", HexStr(ssTx.begin(), ssTx.end()));\n+        result.pushKV(\"hex\", HexStr(ssTx.str()));\n     } else {\n         ssTx << psbtx;\n-        result.pushKV(\"psbt\", EncodeBase64((unsigned char*)ssTx.data(), ssTx.size()));\n+        result.pushKV(\"psbt\", EncodeBase64(ssTx.str()));\n     }\n     result.pushKV(\"complete\", complete);\n "
      },
      {
        "sha": "f97d6a25332cea24777d105e596a3082e4a66346",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 10,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d12143c730c3dcd11bb9dce16ed43a15a16eea2/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d12143c730c3dcd11bb9dce16ed43a15a16eea2/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=5d12143c730c3dcd11bb9dce16ed43a15a16eea2",
        "patch": "@@ -233,10 +233,17 @@ bool ProduceSignature(const SigningProvider& provider, const BaseSignatureCreato\n     return sigdata.complete;\n }\n \n-bool SignPSBTInput(const SigningProvider& provider, const CMutableTransaction& tx, PSBTInput& input, SignatureData& sigdata, int index, int sighash)\n+bool PSBTInputSigned(PSBTInput& input)\n {\n-    // if this input has a final scriptsig or scriptwitness, don't do anything with it\n-    if (!input.final_script_sig.empty() || !input.final_script_witness.IsNull()) {\n+    return !input.final_script_sig.empty() || !input.final_script_witness.IsNull();\n+}\n+\n+bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, SignatureData& sigdata, int index, int sighash)\n+{\n+    PSBTInput& input = psbt.inputs.at(index);\n+    const CMutableTransaction& tx = *psbt.tx;\n+\n+    if (PSBTInputSigned(input)) {\n         return true;\n     }\n \n@@ -246,15 +253,19 @@ bool SignPSBTInput(const SigningProvider& provider, const CMutableTransaction& t\n     // Get UTXO\n     bool require_witness_sig = false;\n     CTxOut utxo;\n+\n+    // Verify input sanity, which checks that at most one of witness or non-witness utxos is provided.\n+    if (!input.IsSane()) {\n+        return false;\n+    }\n+\n     if (input.non_witness_utxo) {\n         // If we're taking our information from a non-witness UTXO, verify that it matches the prevout.\n-        if (input.non_witness_utxo->GetHash() != tx.vin[index].prevout.hash) return false;\n-        // If both witness and non-witness UTXO are provided, verify that they match. This check shouldn't\n-        // matter, as the PSBT deserializer enforces only one of both is provided, and the only way both\n-        // can be present is when they're added simultaneously by FillPSBT (in which case they always match).\n-        // Still, check in order to not rely on callers to enforce this.\n-        if (!input.witness_utxo.IsNull() && input.non_witness_utxo->vout[tx.vin[index].prevout.n] != input.witness_utxo) return false;\n-        utxo = input.non_witness_utxo->vout[tx.vin[index].prevout.n];\n+        COutPoint prevout = tx.vin[index].prevout;\n+        if (input.non_witness_utxo->GetHash() != prevout.hash) {\n+            return false;\n+        }\n+        utxo = input.non_witness_utxo->vout[prevout.n];\n     } else if (!input.witness_utxo.IsNull()) {\n         utxo = input.witness_utxo;\n         // When we're taking our information from a witness UTXO, we can't verify it is actually data from\n@@ -272,6 +283,13 @@ bool SignPSBTInput(const SigningProvider& provider, const CMutableTransaction& t\n     // Verify that a witness signature was produced in case one was required.\n     if (require_witness_sig && !sigdata.witness) return false;\n     input.FromSignatureData(sigdata);\n+\n+    // If we have a witness signature, use the smaller witness UTXO.\n+    if (sigdata.witness) {\n+        input.witness_utxo = utxo;\n+        input.non_witness_utxo = nullptr;\n+    }\n+\n     return sig_complete;\n }\n \n@@ -491,6 +509,12 @@ bool IsSolvable(const SigningProvider& provider, const CScript& script)\n     return false;\n }\n \n+PartiallySignedTransaction::PartiallySignedTransaction(const CTransaction& tx) : tx(tx)\n+{\n+    inputs.resize(tx.vin.size());\n+    outputs.resize(tx.vout.size());\n+}\n+\n bool PartiallySignedTransaction::IsNull() const\n {\n     return !tx && inputs.empty() && outputs.empty() && unknown.empty();"
      },
      {
        "sha": "f24d77cb310c861d6ad2fb1ddd8daae95c517ef4",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 32,
        "deletions": 4,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d12143c730c3dcd11bb9dce16ed43a15a16eea2/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d12143c730c3dcd11bb9dce16ed43a15a16eea2/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=5d12143c730c3dcd11bb9dce16ed43a15a16eea2",
        "patch": "@@ -286,14 +286,18 @@ struct PSBTInput\n     template <typename Stream>\n     inline void Unserialize(Stream& s) {\n         // Read loop\n+        bool found_sep = false;\n         while(!s.empty()) {\n             // Read\n             std::vector<unsigned char> key;\n             s >> key;\n \n             // the key is empty if that was actually a separator byte\n             // This is a special case for key lengths 0 as those are not allowed (except for separator)\n-            if (key.empty()) return;\n+            if (key.empty()) {\n+                found_sep = true;\n+                break;\n+            }\n \n             // First byte of key is the type\n             unsigned char type = key[0];\n@@ -408,6 +412,10 @@ struct PSBTInput\n                     break;\n             }\n         }\n+\n+        if (!found_sep) {\n+            throw std::ios_base::failure(\"Separator is missing at the end of an input map\");\n+        }\n     }\n \n     template <typename Stream>\n@@ -461,14 +469,18 @@ struct PSBTOutput\n     template <typename Stream>\n     inline void Unserialize(Stream& s) {\n         // Read loop\n+        bool found_sep = false;\n         while(!s.empty()) {\n             // Read\n             std::vector<unsigned char> key;\n             s >> key;\n \n             // the key is empty if that was actually a separator byte\n             // This is a special case for key lengths 0 as those are not allowed (except for separator)\n-            if (key.empty()) return;\n+            if (key.empty()) {\n+                found_sep = true;\n+                break;\n+            }\n \n             // First byte of key is the type\n             unsigned char type = key[0];\n@@ -513,6 +525,10 @@ struct PSBTOutput\n                 }\n             }\n         }\n+\n+        if (!found_sep) {\n+            throw std::ios_base::failure(\"Separator is missing at the end of an output map\");\n+        }\n     }\n \n     template <typename Stream>\n@@ -534,6 +550,7 @@ struct PartiallySignedTransaction\n     bool IsSane() const;\n     PartiallySignedTransaction() {}\n     PartiallySignedTransaction(const PartiallySignedTransaction& psbt_in) : tx(psbt_in.tx), inputs(psbt_in.inputs), outputs(psbt_in.outputs), unknown(psbt_in.unknown) {}\n+    explicit PartiallySignedTransaction(const CTransaction& tx);\n \n     // Only checks if they refer to the same transaction\n     friend bool operator==(const PartiallySignedTransaction& a, const PartiallySignedTransaction &b)\n@@ -588,14 +605,18 @@ struct PartiallySignedTransaction\n         }\n \n         // Read global data\n+        bool found_sep = false;\n         while(!s.empty()) {\n             // Read\n             std::vector<unsigned char> key;\n             s >> key;\n \n             // the key is empty if that was actually a separator byte\n             // This is a special case for key lengths 0 as those are not allowed (except for separator)\n-            if (key.empty()) break;\n+            if (key.empty()) {\n+                found_sep = true;\n+                break;\n+            }\n \n             // First byte of key is the type\n             unsigned char type = key[0];\n@@ -635,6 +656,10 @@ struct PartiallySignedTransaction\n             }\n         }\n \n+        if (!found_sep) {\n+            throw std::ios_base::failure(\"Separator is missing at the end of the global map\");\n+        }\n+\n         // Make sure that we got an unsigned tx\n         if (!tx) {\n             throw std::ios_base::failure(\"No unsigned transcation was provided\");\n@@ -689,8 +714,11 @@ bool ProduceSignature(const SigningProvider& provider, const BaseSignatureCreato\n bool SignSignature(const SigningProvider &provider, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, const CAmount& amount, int nHashType);\n bool SignSignature(const SigningProvider &provider, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType);\n \n+/** Checks whether a PSBTInput is already signed. */\n+bool PSBTInputSigned(PSBTInput& input);\n+\n /** Signs a PSBTInput, verifying that all provided data matches what is being signed. */\n-bool SignPSBTInput(const SigningProvider& provider, const CMutableTransaction& tx, PSBTInput& input, SignatureData& sigdata, int index, int sighash = 1);\n+bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, SignatureData& sigdata, int index, int sighash = SIGHASH_ALL);\n \n /** Extract signature data from a transaction input, and insert it. */\n SignatureData DataFromTransaction(const CMutableTransaction& tx, unsigned int nIn, const CTxOut& txout);"
      },
      {
        "sha": "6400b4470ffe0cda83a545b28181ddc938d9870c",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 45,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d12143c730c3dcd11bb9dce16ed43a15a16eea2/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d12143c730c3dcd11bb9dce16ed43a15a16eea2/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=5d12143c730c3dcd11bb9dce16ed43a15a16eea2",
        "patch": "@@ -4502,24 +4502,34 @@ void AddKeypathToMap(const CWallet* pwallet, const CKeyID& keyID, std::map<CPubK\n     hd_keypaths.emplace(vchPubKey, keypath);\n }\n \n-bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, const CTransaction* txConst, int sighash_type, bool sign, bool bip32derivs)\n+bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, int sighash_type, bool sign, bool bip32derivs)\n {\n     LOCK(pwallet->cs_wallet);\n     // Get all of the previous transactions\n     bool complete = true;\n-    for (unsigned int i = 0; i < txConst->vin.size(); ++i) {\n-        const CTxIn& txin = txConst->vin[i];\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        const CTxIn& txin = psbtx.tx->vin[i];\n         PSBTInput& input = psbtx.inputs.at(i);\n \n-        // If we don't know about this input, skip it and let someone else deal with it\n-        const uint256& txhash = txin.prevout.hash;\n-        const auto it = pwallet->mapWallet.find(txhash);\n-        if (it != pwallet->mapWallet.end()) {\n-            const CWalletTx& wtx = it->second;\n-            CTxOut utxo = wtx.tx->vout[txin.prevout.n];\n-            // Update both UTXOs from the wallet.\n-            input.non_witness_utxo = wtx.tx;\n-            input.witness_utxo = utxo;\n+        if (PSBTInputSigned(input)) {\n+            continue;\n+        }\n+\n+        // Verify input looks sane. This will check that we have at most one uxto, witness or non-witness.\n+        if (!input.IsSane()) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"PSBT input is not sane.\");\n+        }\n+\n+        // If we have no utxo, grab it from the wallet.\n+        if (!input.non_witness_utxo && input.witness_utxo.IsNull()) {\n+            const uint256& txhash = txin.prevout.hash;\n+            const auto it = pwallet->mapWallet.find(txhash);\n+            if (it != pwallet->mapWallet.end()) {\n+                const CWalletTx& wtx = it->second;\n+                // We only need the non_witness_utxo, which is a superset of the witness_utxo.\n+                //   The signing code will switch to the smaller witness_utxo if this is ok.\n+                input.non_witness_utxo = wtx.tx;\n+            }\n         }\n \n         // Get the Sighash type\n@@ -4529,9 +4539,9 @@ bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, const C\n \n         SignatureData sigdata;\n         if (sign) {\n-            complete &= SignPSBTInput(*pwallet, *psbtx.tx, input, sigdata, i, sighash_type);\n+            complete &= SignPSBTInput(*pwallet, psbtx, sigdata, i, sighash_type);\n         } else {\n-            complete &= SignPSBTInput(PublicOnlySigningProvider(pwallet), *psbtx.tx, input, sigdata, i, sighash_type);\n+            complete &= SignPSBTInput(PublicOnlySigningProvider(pwallet), psbtx, sigdata, i, sighash_type);\n         }\n \n         if (sigdata.witness) {\n@@ -4541,15 +4551,6 @@ bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, const C\n             }\n         }\n \n-        // If both UTXO types are present, drop the unnecessary one.\n-        if (input.non_witness_utxo && !input.witness_utxo.IsNull()) {\n-            if (sigdata.witness) {\n-                input.non_witness_utxo = nullptr;\n-            } else {\n-                input.witness_utxo.SetNull();\n-            }\n-        }\n-\n         // Get public key paths\n         if (bip32derivs) {\n             for (const auto& pubkey_it : sigdata.misc_pubkeys) {\n@@ -4559,8 +4560,8 @@ bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, const C\n     }\n \n     // Fill in the bip32 keypaths and redeemscripts for the outputs so that hardware wallets can identify change\n-    for (unsigned int i = 0; i < txConst->vout.size(); ++i) {\n-        const CTxOut& out = txConst->vout.at(i);\n+    for (unsigned int i = 0; i < psbtx.tx->vout.size(); ++i) {\n+        const CTxOut& out = psbtx.tx->vout.at(i);\n         PSBTOutput& psbt_out = psbtx.outputs.at(i);\n \n         // Dummy tx so we can use ProduceSignature to get stuff out\n@@ -4637,19 +4638,15 @@ UniValue walletprocesspsbt(const JSONRPCRequest& request)\n     // Get the sighash type\n     int nHashType = ParseSighashString(request.params[2]);\n \n-    // Use CTransaction for the constant parts of the\n-    // transaction to avoid rehashing.\n-    const CTransaction txConst(*psbtx.tx);\n-\n     // Fill transaction with our data and also sign\n     bool sign = request.params[1].isNull() ? true : request.params[1].get_bool();\n     bool bip32derivs = request.params[3].isNull() ? false : request.params[3].get_bool();\n-    bool complete = FillPSBT(pwallet, psbtx, &txConst, nHashType, sign, bip32derivs);\n+    bool complete = FillPSBT(pwallet, psbtx, nHashType, sign, bip32derivs);\n \n     UniValue result(UniValue::VOBJ);\n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n     ssTx << psbtx;\n-    result.pushKV(\"psbt\", EncodeBase64((unsigned char*)ssTx.data(), ssTx.size()));\n+    result.pushKV(\"psbt\", EncodeBase64(ssTx.str()));\n     result.pushKV(\"complete\", complete);\n \n     return result;\n@@ -4741,29 +4738,18 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n     FundTransaction(pwallet, rawTx, fee, change_position, request.params[3]);\n \n     // Make a blank psbt\n-    PartiallySignedTransaction psbtx;\n-    psbtx.tx = rawTx;\n-    for (unsigned int i = 0; i < rawTx.vin.size(); ++i) {\n-        psbtx.inputs.push_back(PSBTInput());\n-    }\n-    for (unsigned int i = 0; i < rawTx.vout.size(); ++i) {\n-        psbtx.outputs.push_back(PSBTOutput());\n-    }\n-\n-    // Use CTransaction for the constant parts of the\n-    // transaction to avoid rehashing.\n-    const CTransaction txConst(*psbtx.tx);\n+    PartiallySignedTransaction psbtx(rawTx);\n \n     // Fill transaction with out data but don't sign\n     bool bip32derivs = request.params[4].isNull() ? false : request.params[4].get_bool();\n-    FillPSBT(pwallet, psbtx, &txConst, 1, false, bip32derivs);\n+    FillPSBT(pwallet, psbtx, 1, false, bip32derivs);\n \n     // Serialize the PSBT\n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n     ssTx << psbtx;\n \n     UniValue result(UniValue::VOBJ);\n-    result.pushKV(\"psbt\", EncodeBase64((unsigned char*)ssTx.data(), ssTx.size()));\n+    result.pushKV(\"psbt\", EncodeBase64(ssTx.str()));\n     result.pushKV(\"fee\", ValueFromAmount(fee));\n     result.pushKV(\"changepos\", change_position);\n     return result;"
      },
      {
        "sha": "abd7750874632beb6dd179ae0a3ab72c4c682e6a",
        "filename": "src/wallet/rpcwallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d12143c730c3dcd11bb9dce16ed43a15a16eea2/src/wallet/rpcwallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d12143c730c3dcd11bb9dce16ed43a15a16eea2/src/wallet/rpcwallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.h?ref=5d12143c730c3dcd11bb9dce16ed43a15a16eea2",
        "patch": "@@ -30,5 +30,5 @@ bool EnsureWalletIsAvailable(CWallet *, bool avoidException);\n \n UniValue getaddressinfo(const JSONRPCRequest& request);\n UniValue signrawtransactionwithwallet(const JSONRPCRequest& request);\n-bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, const CTransaction* txConst, int sighash_type = 1, bool sign = true, bool bip32derivs = false);\n+bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, int sighash_type = 1 /* SIGHASH_ALL */, bool sign = true, bool bip32derivs = false);\n #endif //BITCOIN_WALLET_RPCWALLET_H"
      },
      {
        "sha": "8d46718a7dc0d78dde5850de360fa09f0d476942",
        "filename": "src/wallet/test/psbt_wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d12143c730c3dcd11bb9dce16ed43a15a16eea2/src/wallet/test/psbt_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d12143c730c3dcd11bb9dce16ed43a15a16eea2/src/wallet/test/psbt_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/psbt_wallet_tests.cpp?ref=5d12143c730c3dcd11bb9dce16ed43a15a16eea2",
        "patch": "@@ -59,12 +59,8 @@ BOOST_AUTO_TEST_CASE(psbt_updater_test)\n     CDataStream ssData(ParseHex(\"70736274ff01009a020000000258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f000000000000000000\"), SER_NETWORK, PROTOCOL_VERSION);\n     ssData >> psbtx;\n \n-    // Use CTransaction for the constant parts of the\n-    // transaction to avoid rehashing.\n-    const CTransaction txConst(*psbtx.tx);\n-\n     // Fill transaction with our data\n-    FillPSBT(&m_wallet, psbtx, &txConst, 1, false, true);\n+    FillPSBT(&m_wallet, psbtx, SIGHASH_ALL, false, true);\n \n     // Get the final tx\n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);"
      },
      {
        "sha": "bff5f23e25ba9e86c461ba18b244a0ed4d6f8f0a",
        "filename": "test/functional/data/rpc_psbt.json",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d12143c730c3dcd11bb9dce16ed43a15a16eea2/test/functional/data/rpc_psbt.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d12143c730c3dcd11bb9dce16ed43a15a16eea2/test/functional/data/rpc_psbt.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/rpc_psbt.json?ref=5d12143c730c3dcd11bb9dce16ed43a15a16eea2",
        "patch": "@@ -17,7 +17,8 @@\n         \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAABB9oARzBEAiB0AYrUGACXuHMyPAAVcgs2hMyBI4kQSOfbzZtVrWecmQIgc9Npt0Dj61Pc76M4I8gHBRTKVafdlUTxV8FnkTJhEYwBSDBFAiEA9hA4swjcHahlo0hSdG8BV3KTQgjG0kRUOTzZm98iF3cCIAVuZ1pnWm0KArhbFOXikHTYolqbV2C+ooFvZhkQoAbqAUdSIQKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfyEC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtdSrgABASAAwusLAAAAABepFLf1+vQOPUClpFmx2zU18rcvqSHohwEHIyIAIIwjUxc3Q7WV37Sge3K6jkLjeX2nTof+fZ10l+OyAokDAQjaBABHMEQCIGLrelVhB6fHP0WsSrWh3d9vcHX7EnWWmn84Pv/3hLyyAiAMBdu3Rw2/LwhVfdNWxzJcHtMJE+mWzThAlF2xIijaXwFHMEQCIGX0W6WZi1mif/4ae+0BavHx+Q1Us6qPdFCqX1aiUQO9AiB/ckcDrR7blmgLKEtW1P/LiPf7dZ6rvgiqMPKbhROD0gFHUiEDCJ3BDHrG21T5EymvYXMz2ziM6tDCMfcjN50bmQMLAtwhAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zUq4AIQIDqaTDf1mW06ol26xrVwrwZQOUSSlCRgs1R1PtnuylhxDZDGpPAAAAgAAAAIAEAACAACICAn9jmXV9Lv9VoTatAsaEsYOLZVbl8bazQoKpS2tQBRCWENkMak8AAACAAAAAgAUAAIAA\",\n         \"cHNidP8BAHMCAAAAATAa6YblFqHsisW0vGVz0y+DtGXiOtdhZ9aLOOcwtNvbAAAAAAD/////AnR7AQAAAAAAF6kUA6oXrogrXQ1Usl1jEE5P/s57nqKHYEOZOwAAAAAXqRS5IbG6b3IuS/qDtlV6MTmYakLsg4cAAAAAAAEBHwDKmjsAAAAAFgAU0tlLZK4IWH7vyO6xh8YB6Tn5A3wCAwABAAAAAAEAFgAUYunpgv/zTdgjlhAxawkM0qO3R8sAAQAiACCHa62DLx0WgBXtQSMqnqZaGBXZ7xPA74dZ9ktbKyeKZQEBJVEhA7fOI6AcW0vwCmQlN836uzFbZoMyhnR471EwnSvVf4qHUa4A\",\n         \"cHNidP8BAHMCAAAAATAa6YblFqHsisW0vGVz0y+DtGXiOtdhZ9aLOOcwtNvbAAAAAAD/////AnR7AQAAAAAAF6kUA6oXrogrXQ1Usl1jEE5P/s57nqKHYEOZOwAAAAAXqRS5IbG6b3IuS/qDtlV6MTmYakLsg4cAAAAAAAEBHwDKmjsAAAAAFgAU0tlLZK4IWH7vyO6xh8YB6Tn5A3wAAgAAFgAUYunpgv/zTdgjlhAxawkM0qO3R8sAAQAiACCHa62DLx0WgBXtQSMqnqZaGBXZ7xPA74dZ9ktbKyeKZQEBJVEhA7fOI6AcW0vwCmQlN836uzFbZoMyhnR471EwnSvVf4qHUa4A\",\n-        \"cHNidP8BAHMCAAAAATAa6YblFqHsisW0vGVz0y+DtGXiOtdhZ9aLOOcwtNvbAAAAAAD/////AnR7AQAAAAAAF6kUA6oXrogrXQ1Usl1jEE5P/s57nqKHYEOZOwAAAAAXqRS5IbG6b3IuS/qDtlV6MTmYakLsg4cAAAAAAAEBHwDKmjsAAAAAFgAU0tlLZK4IWH7vyO6xh8YB6Tn5A3wAAQAWABRi6emC//NN2COWEDFrCQzSo7dHywABACIAIIdrrYMvHRaAFe1BIyqeploYFdnvE8Dvh1n2S1srJ4plIQEAJVEhA7fOI6AcW0vwCmQlN836uzFbZoMyhnR471EwnSvVf4qHUa4A\"\n+        \"cHNidP8BAHMCAAAAATAa6YblFqHsisW0vGVz0y+DtGXiOtdhZ9aLOOcwtNvbAAAAAAD/////AnR7AQAAAAAAF6kUA6oXrogrXQ1Usl1jEE5P/s57nqKHYEOZOwAAAAAXqRS5IbG6b3IuS/qDtlV6MTmYakLsg4cAAAAAAAEBHwDKmjsAAAAAFgAU0tlLZK4IWH7vyO6xh8YB6Tn5A3wAAQAWABRi6emC//NN2COWEDFrCQzSo7dHywABACIAIIdrrYMvHRaAFe1BIyqeploYFdnvE8Dvh1n2S1srJ4plIQEAJVEhA7fOI6AcW0vwCmQlN836uzFbZoMyhnR471EwnSvVf4qHUa4A\",\n+        \"cHNidP8BAHMCAAAAAbiWoY6pOQepFsEGhUPXaulX9rvye2NH+NrdlAHg+WgpAQAAAAD/////AkBLTAAAAAAAF6kUqWwXCcLM5BN2zoNqMNT5qMlIi7+HQEtMAAAAAAAXqRSVF/in2XNxAlN1OSxkyp0z+Wtg2YcAAAAAAAEBIBNssgAAAAAAF6kUamsvautR8hRlMRY6OKNTx03DK96HAQcXFgAUo8u1LWpHprjt/uENAwBpGZD0UH0BCGsCRzBEAiAONfH3DYiw67ZbylrsxCF/XXpVwyWBRgofyRbPslzvwgIgIKCsWw5sHSIPh1icNvcVLZLHWj6NA7Dk+4Os2pOnMbQBIQPGStfYHPtyhpV7zIWtn0Q4GXv5gK1zy/tnJ+cBXu4iiwABABYAFMwmJQEz+HDpBEEabxJ5PogPsqZRAAEAFgAUyCrGc3h3FYCmiIspbv2pSTKZ5jU\"\n     ],\n     \"valid\" : [\n         \"cHNidP8BAHUCAAAAASaBcTce3/KF6Tet7qSze3gADAVmy7OtZGQXE8pCFxv2AAAAAAD+////AtPf9QUAAAAAGXapFNDFmQPFusKGh2DpD9UhpGZap2UgiKwA4fUFAAAAABepFDVF5uM7gyxHBQ8k0+65PJwDlIvHh7MuEwAAAQD9pQEBAAAAAAECiaPHHqtNIOA3G7ukzGmPopXJRjr6Ljl/hTPMti+VZ+UBAAAAFxYAFL4Y0VKpsBIDna89p95PUzSe7LmF/////4b4qkOnHf8USIk6UwpyN+9rRgi7st0tAXHmOuxqSJC0AQAAABcWABT+Pp7xp0XpdNkCxDVZQ6vLNL1TU/////8CAMLrCwAAAAAZdqkUhc/xCX/Z4Ai7NK9wnGIZeziXikiIrHL++E4sAAAAF6kUM5cluiHv1irHU6m80GfWx6ajnQWHAkcwRAIgJxK+IuAnDzlPVoMR3HyppolwuAJf3TskAinwf4pfOiQCIAGLONfc0xTnNMkna9b7QPZzMlvEuqFEyADS8vAtsnZcASED0uFWdJQbrUqZY3LLh+GFbTZSYG2YVi/jnF6efkE/IQUCSDBFAiEA0SuFLYXc2WHS9fSrZgZU327tzHlMDDPOXMMJ/7X85Y0CIGczio4OFyXBl/saiK9Z9R5E5CVbIBZ8hoQDHAXR8lkqASECI7cr7vCWXRC+B3jv7NYfysb3mk6haTkzgHNEZPhPKrMAAAAAAAAA\","
      },
      {
        "sha": "a31719088f8211b621b8d32b78853f41675fcb7a",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 53,
        "deletions": 1,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d12143c730c3dcd11bb9dce16ed43a15a16eea2/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d12143c730c3dcd11bb9dce16ed43a15a16eea2/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=5d12143c730c3dcd11bb9dce16ed43a15a16eea2",
        "patch": "@@ -6,7 +6,7 @@\n \"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_raises_rpc_error, find_output\n+from test_framework.util import assert_equal, assert_raises_rpc_error, find_output, disconnect_nodes, connect_nodes_bi, sync_blocks\n \n import json\n import os\n@@ -23,6 +23,45 @@ def set_test_params(self):\n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n+    def test_utxo_conversion(self):\n+        mining_node = self.nodes[2]\n+        offline_node = self.nodes[0]\n+        online_node = self.nodes[1]\n+\n+        # Disconnect offline node from others\n+        disconnect_nodes(offline_node, 1)\n+        disconnect_nodes(online_node, 0)\n+        disconnect_nodes(offline_node, 2)\n+        disconnect_nodes(mining_node, 0)\n+\n+        # Mine a transaction that credits the offline address\n+        offline_addr = offline_node.getnewaddress(address_type=\"p2sh-segwit\")\n+        online_addr = online_node.getnewaddress(address_type=\"p2sh-segwit\")\n+        online_node.importaddress(offline_addr, \"\", False)\n+        mining_node.sendtoaddress(address=offline_addr, amount=1.0)\n+        mining_node.generate(nblocks=1)\n+        sync_blocks([mining_node, online_node])\n+\n+        # Construct an unsigned PSBT on the online node (who doesn't know the output is Segwit, so will include a non-witness UTXO)\n+        utxos = online_node.listunspent(addresses=[offline_addr])\n+        raw = online_node.createrawtransaction([{\"txid\":utxos[0][\"txid\"], \"vout\":utxos[0][\"vout\"]}],[{online_addr:0.9999}])\n+        psbt = online_node.walletprocesspsbt(online_node.converttopsbt(raw))[\"psbt\"]\n+        assert(\"non_witness_utxo\" in mining_node.decodepsbt(psbt)[\"inputs\"][0])\n+\n+        # Have the offline node sign the PSBT (which will update the UTXO to segwit)\n+        signed_psbt = offline_node.walletprocesspsbt(psbt)[\"psbt\"]\n+        assert(\"witness_utxo\" in mining_node.decodepsbt(signed_psbt)[\"inputs\"][0])\n+\n+        # Make sure we can mine the resulting transaction\n+        txid = mining_node.sendrawtransaction(mining_node.finalizepsbt(signed_psbt)[\"hex\"])\n+        mining_node.generate(1)\n+        sync_blocks([mining_node, online_node])\n+        assert_equal(online_node.gettxout(txid,0)[\"confirmations\"], 1)\n+\n+        # Reconnect\n+        connect_nodes_bi(self.nodes, 0, 1)\n+        connect_nodes_bi(self.nodes, 0, 2)\n+\n     def run_test(self):\n         # Create and fund a raw tx for sending 10 BTC\n         psbtx1 = self.nodes[0].walletcreatefundedpsbt([], {self.nodes[2].getnewaddress():10})['psbt']\n@@ -168,6 +207,13 @@ def run_test(self):\n             assert tx_in[\"sequence\"] > MAX_BIP125_RBF_SEQUENCE\n         assert_equal(decoded_psbt[\"tx\"][\"locktime\"], 0)\n \n+        # Regression test for 14473 (mishandling of already-signed witness transaction):\n+        psbtx_info = self.nodes[0].walletcreatefundedpsbt([{\"txid\":unspent[\"txid\"], \"vout\":unspent[\"vout\"]}], [{self.nodes[2].getnewaddress():unspent[\"amount\"]+1}])\n+        complete_psbt = self.nodes[0].walletprocesspsbt(psbtx_info[\"psbt\"])\n+        double_processed_psbt = self.nodes[0].walletprocesspsbt(complete_psbt[\"psbt\"])\n+        assert_equal(complete_psbt, double_processed_psbt)\n+        # We don't care about the decode result, but decoding must succeed.\n+        self.nodes[0].decodepsbt(double_processed_psbt[\"psbt\"])\n \n         # Make sure change address wallet does not have P2SH innerscript access to results in success\n         # when attempting BnB coin selection\n@@ -228,6 +274,12 @@ def run_test(self):\n             extracted = self.nodes[2].finalizepsbt(extractor['extract'], True)['hex']\n             assert_equal(extracted, extractor['result'])\n \n+        # Unload extra wallets\n+        for i, signer in enumerate(signers):\n+            self.nodes[2].unloadwallet(\"wallet{}\".format(i))\n+\n+        self.test_utxo_conversion()\n+\n \n if __name__ == '__main__':\n     PSBTTest().main()"
      }
    ]
  },
  {
    "sha": "7a590d8390ef2158509c4fc08b84dac71f59e1fb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YTU5MGQ4MzkwZWYyMTU4NTA5YzRmYzA4Yjg0ZGFjNzFmNTllMWZi",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-09-30T02:09:15Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-12-05T22:38:57Z"
      },
      "message": "fix converttopsbt permitsigdata arg, add basic test\n\nGithub-Pull: #14356\nRebased-From: 88a79cb436b30b39d37d139da723f5a31e9d161b",
      "tree": {
        "sha": "f476f0184ede38f5a2277797fea93dd6defc9feb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f476f0184ede38f5a2277797fea93dd6defc9feb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7a590d8390ef2158509c4fc08b84dac71f59e1fb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a590d8390ef2158509c4fc08b84dac71f59e1fb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7a590d8390ef2158509c4fc08b84dac71f59e1fb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a590d8390ef2158509c4fc08b84dac71f59e1fb/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5d12143c730c3dcd11bb9dce16ed43a15a16eea2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d12143c730c3dcd11bb9dce16ed43a15a16eea2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5d12143c730c3dcd11bb9dce16ed43a15a16eea2"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0925b1c0cf24868e7f430284e5cea0cebbc85589",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a590d8390ef2158509c4fc08b84dac71f59e1fb/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a590d8390ef2158509c4fc08b84dac71f59e1fb/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=7a590d8390ef2158509c4fc08b84dac71f59e1fb",
        "patch": "@@ -1778,7 +1778,7 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n \n     // Remove all scriptSigs and scriptWitnesses from inputs\n     for (CTxIn& input : tx.vin) {\n-        if ((!input.scriptSig.empty() || !input.scriptWitness.IsNull()) && (request.params[1].isNull() || (!request.params[1].isNull() && request.params[1].get_bool()))) {\n+        if ((!input.scriptSig.empty() || !input.scriptWitness.IsNull()) && !permitsigdata) {\n             throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"Inputs must not have scriptSigs and scriptWitnesses\");\n         }\n         input.scriptSig.clear();"
      },
      {
        "sha": "ef895dd13a57a659c196b29b540d4054a405b81e",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a590d8390ef2158509c4fc08b84dac71f59e1fb/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a590d8390ef2158509c4fc08b84dac71f59e1fb/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=7a590d8390ef2158509c4fc08b84dac71f59e1fb",
        "patch": "@@ -146,6 +146,9 @@ def run_test(self):\n         # Make sure that a psbt with signatures cannot be converted\n         signedtx = self.nodes[0].signrawtransactionwithwallet(rawtx['hex'])\n         assert_raises_rpc_error(-22, \"TX decode failed\", self.nodes[0].converttopsbt, signedtx['hex'])\n+        assert_raises_rpc_error(-22, \"TX decode failed\", self.nodes[0].converttopsbt, signedtx['hex'], False)\n+        # Unless we allow it to convert and strip signatures\n+        self.nodes[0].converttopsbt(signedtx['hex'], True)\n \n         # Explicilty allow converting non-empty txs\n         new_psbt = self.nodes[0].converttopsbt(rawtx['hex'])"
      }
    ]
  },
  {
    "sha": "75b5d8c4ead9c41f08fe53f9fffd3ffc984d6684",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NWI1ZDhjNGVhZDljNDFmMDhmZTUzZjlmZmZkM2ZmYzk4NGQ2Njg0",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-10-09T23:32:27Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-12-05T23:14:10Z"
      },
      "message": "rpc: Fix wallet unload during walletpassphrase timeout\n\nGithub-Pull: #14453\nRebased-From: 321decf",
      "tree": {
        "sha": "482970be8585033416454a9a4eb08d7d1fb226f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/482970be8585033416454a9a4eb08d7d1fb226f4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/75b5d8c4ead9c41f08fe53f9fffd3ffc984d6684",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75b5d8c4ead9c41f08fe53f9fffd3ffc984d6684",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/75b5d8c4ead9c41f08fe53f9fffd3ffc984d6684",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75b5d8c4ead9c41f08fe53f9fffd3ffc984d6684/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5d12143c730c3dcd11bb9dce16ed43a15a16eea2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d12143c730c3dcd11bb9dce16ed43a15a16eea2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5d12143c730c3dcd11bb9dce16ed43a15a16eea2"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 12,
      "deletions": 8
    },
    "files": [
      {
        "sha": "193da765513c3b0e4f647e9690ac56d0e88a29c3",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 8,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75b5d8c4ead9c41f08fe53f9fffd3ffc984d6684/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75b5d8c4ead9c41f08fe53f9fffd3ffc984d6684/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=75b5d8c4ead9c41f08fe53f9fffd3ffc984d6684",
        "patch": "@@ -2546,13 +2546,6 @@ static UniValue keypoolrefill(const JSONRPCRequest& request)\n }\n \n \n-static void LockWallet(CWallet* pWallet)\n-{\n-    LOCK(pWallet->cs_wallet);\n-    pWallet->nRelockTime = 0;\n-    pWallet->Lock();\n-}\n-\n static UniValue walletpassphrase(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n@@ -2622,7 +2615,18 @@ static UniValue walletpassphrase(const JSONRPCRequest& request)\n     pwallet->TopUpKeyPool();\n \n     pwallet->nRelockTime = GetTime() + nSleepTime;\n-    RPCRunLater(strprintf(\"lockwallet(%s)\", pwallet->GetName()), std::bind(LockWallet, pwallet), nSleepTime);\n+\n+    // Keep a weak pointer to the wallet so that it is possible to unload the\n+    // wallet before the following callback is called. If a valid shared pointer\n+    // is acquired in the callback then the wallet is still loaded.\n+    std::weak_ptr<CWallet> weak_wallet = wallet;\n+    RPCRunLater(strprintf(\"lockwallet(%s)\", pwallet->GetName()), [weak_wallet] {\n+        if (auto shared_wallet = weak_wallet.lock()) {\n+            LOCK(shared_wallet->cs_wallet);\n+            shared_wallet->Lock();\n+            shared_wallet->nRelockTime = 0;\n+        }\n+    }, nSleepTime);\n \n     return NullUniValue;\n }"
      }
    ]
  },
  {
    "sha": "6042dfe008e7ad2c3495d1e9c484c7f2e256f04c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MDQyZGZlMDA4ZTdhZDJjMzQ5NWQxZTljNDg0YzdmMmUyNTZmMDRj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-12-06T10:38:52Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-12-06T10:41:25Z"
      },
      "message": "build: bump version to 0.17.1\n\nAlso update man pages.\n\nTree-SHA512: 826f3c9ad1e49902ee2f1710a4329388c0a9298a359971f21130bf8f390d4a7b744d010f04eb109666ceb28d0053b9fa7ec088caaa4e4cc38509526457086d40",
      "tree": {
        "sha": "95170a998bf4e79d08e5ab39bdf86227e53b50eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/95170a998bf4e79d08e5ab39bdf86227e53b50eb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6042dfe008e7ad2c3495d1e9c484c7f2e256f04c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlwI/NUACgkQHkrtYphs\n0l1ZLwgAmfV98BERLLWrVlJS3M+jdDHjDpbWHfqsts5Ura62GzUmfezq7zaveba0\nYdo/KghikrPTJZigtaVpj2uVgaTmmQIP5z8vZNz53vIuT+dyvx9mrLu9pbmfw/lH\njcTjxge5ulAtyxgb2zAPWD3saDZd7zv/u2trKudwX+LnkOX2KEc5ku2Z7STWr9zX\ntrEdJwTLJgbNatbbGhIhS18Mww1DpMVc4+0heLdKeOihImx8UwSm/SjPSrQbeSca\n7qkf3M6XtpQ99pncYjm3fcvRBr0z8pmCRFVSGM8doxpBTtMEFokCIjMcD8s4gi+i\nXovYWqTeWu/2hsHPkzaDUr/aaPH/1g==\n=jZkf\n-----END PGP SIGNATURE-----",
        "payload": "tree 95170a998bf4e79d08e5ab39bdf86227e53b50eb\nparent 5d12143c730c3dcd11bb9dce16ed43a15a16eea2\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1544092732 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1544092885 +0100\n\nbuild: bump version to 0.17.1\n\nAlso update man pages.\n\nTree-SHA512: 826f3c9ad1e49902ee2f1710a4329388c0a9298a359971f21130bf8f390d4a7b744d010f04eb109666ceb28d0053b9fa7ec088caaa4e4cc38509526457086d40\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6042dfe008e7ad2c3495d1e9c484c7f2e256f04c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6042dfe008e7ad2c3495d1e9c484c7f2e256f04c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6042dfe008e7ad2c3495d1e9c484c7f2e256f04c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5d12143c730c3dcd11bb9dce16ed43a15a16eea2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d12143c730c3dcd11bb9dce16ed43a15a16eea2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5d12143c730c3dcd11bb9dce16ed43a15a16eea2"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 16,
      "deletions": 16
    },
    "files": [
      {
        "sha": "9cc01a4028b808eaa76fef2ee85a2a3a8ee503f4",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6042dfe008e7ad2c3495d1e9c484c7f2e256f04c/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6042dfe008e7ad2c3495d1e9c484c7f2e256f04c/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=6042dfe008e7ad2c3495d1e9c484c7f2e256f04c",
        "patch": "@@ -2,8 +2,8 @@ dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n AC_PREREQ([2.60])\n define(_CLIENT_VERSION_MAJOR, 0)\n define(_CLIENT_VERSION_MINOR, 17)\n-define(_CLIENT_VERSION_REVISION, 0)\n-define(_CLIENT_VERSION_BUILD, 1)\n+define(_CLIENT_VERSION_REVISION, 1)\n+define(_CLIENT_VERSION_BUILD, 0)\n define(_CLIENT_VERSION_IS_RELEASE, true)\n define(_COPYRIGHT_YEAR, 2018)\n define(_COPYRIGHT_HOLDERS,[The %s developers])"
      },
      {
        "sha": "9f8cb5cafffda8b58bba73df2a820bf4f78069d5",
        "filename": "doc/man/bitcoin-cli.1",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6042dfe008e7ad2c3495d1e9c484c7f2e256f04c/doc/man/bitcoin-cli.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6042dfe008e7ad2c3495d1e9c484c7f2e256f04c/doc/man/bitcoin-cli.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-cli.1?ref=6042dfe008e7ad2c3495d1e9c484c7f2e256f04c",
        "patch": "@@ -1,7 +1,7 @@\n .\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIN-CLI \"1\" \"September 2018\" \"bitcoin-cli v0.17.0.0\" \"User Commands\"\n+.TH BITCOIN-CLI \"1\" \"December 2018\" \"bitcoin-cli v0.17.1.0\" \"User Commands\"\n .SH NAME\n-bitcoin-cli \\- manual page for bitcoin-cli v0.17.0.0\n+bitcoin-cli \\- manual page for bitcoin-cli v0.17.1.0\n .SH SYNOPSIS\n .B bitcoin-cli\n [\\fI\\,options\\/\\fR] \\fI\\,<command> \\/\\fR[\\fI\\,params\\/\\fR]  \\fI\\,Send command to Bitcoin Core\\/\\fR\n@@ -15,7 +15,7 @@ bitcoin-cli \\- manual page for bitcoin-cli v0.17.0.0\n .B bitcoin-cli\n [\\fI\\,options\\/\\fR] \\fI\\,help <command>      Get help for a command\\/\\fR\n .SH DESCRIPTION\n-Bitcoin Core RPC client version v0.17.0.0\n+Bitcoin Core RPC client version v0.17.1.0\n .SH OPTIONS\n .HP\n \\-?"
      },
      {
        "sha": "a94bd84b39fd6f0316ea8402acdb6533e0ea91c8",
        "filename": "doc/man/bitcoin-qt.1",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6042dfe008e7ad2c3495d1e9c484c7f2e256f04c/doc/man/bitcoin-qt.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6042dfe008e7ad2c3495d1e9c484c7f2e256f04c/doc/man/bitcoin-qt.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-qt.1?ref=6042dfe008e7ad2c3495d1e9c484c7f2e256f04c",
        "patch": "@@ -1,12 +1,12 @@\n .\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIN-QT \"1\" \"September 2018\" \"bitcoin-qt v0.17.0.0\" \"User Commands\"\n+.TH BITCOIN-QT \"1\" \"December 2018\" \"bitcoin-qt v0.17.1.0\" \"User Commands\"\n .SH NAME\n-bitcoin-qt \\- manual page for bitcoin-qt v0.17.0.0\n+bitcoin-qt \\- manual page for bitcoin-qt v0.17.1.0\n .SH SYNOPSIS\n .B bitcoin-qt\n [\\fI\\,command-line options\\/\\fR]\n .SH DESCRIPTION\n-Bitcoin Core version v0.17.0.0 (64\\-bit)\n+Bitcoin Core version v0.17.1.0 (64\\-bit)\n .SH OPTIONS\n .HP\n \\-?\n@@ -88,7 +88,7 @@ Do not keep transactions in the mempool longer than <n> hours (default:\n .HP\n \\fB\\-par=\\fR<n>\n .IP\n-Set the number of script verification threads (\\fB\\-8\\fR to 16, 0 = auto, <0 =\n+Set the number of script verification threads (\\fB\\-6\\fR to 16, 0 = auto, <0 =\n leave that many cores free, default: 0)\n .HP\n \\fB\\-persistmempool\\fR"
      },
      {
        "sha": "10f8231c689748f9d15875f08aa38dbc61f114d9",
        "filename": "doc/man/bitcoin-tx.1",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6042dfe008e7ad2c3495d1e9c484c7f2e256f04c/doc/man/bitcoin-tx.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6042dfe008e7ad2c3495d1e9c484c7f2e256f04c/doc/man/bitcoin-tx.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-tx.1?ref=6042dfe008e7ad2c3495d1e9c484c7f2e256f04c",
        "patch": "@@ -1,15 +1,15 @@\n .\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIN-TX \"1\" \"September 2018\" \"bitcoin-tx v0.17.0.0\" \"User Commands\"\n+.TH BITCOIN-TX \"1\" \"December 2018\" \"bitcoin-tx v0.17.1.0\" \"User Commands\"\n .SH NAME\n-bitcoin-tx \\- manual page for bitcoin-tx v0.17.0.0\n+bitcoin-tx \\- manual page for bitcoin-tx v0.17.1.0\n .SH SYNOPSIS\n .B bitcoin-tx\n [\\fI\\,options\\/\\fR] \\fI\\,<hex-tx> \\/\\fR[\\fI\\,commands\\/\\fR]  \\fI\\,Update hex-encoded bitcoin transaction\\/\\fR\n .br\n .B bitcoin-tx\n [\\fI\\,options\\/\\fR] \\fI\\,-create \\/\\fR[\\fI\\,commands\\/\\fR]   \\fI\\,Create hex-encoded bitcoin transaction\\/\\fR\n .SH DESCRIPTION\n-Bitcoin Core bitcoin\\-tx utility version v0.17.0.0\n+Bitcoin Core bitcoin\\-tx utility version v0.17.1.0\n .SH OPTIONS\n .HP\n \\-?"
      },
      {
        "sha": "01bd67160c2d611cb0c986d95c7f7a00d4f7ab07",
        "filename": "doc/man/bitcoind.1",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6042dfe008e7ad2c3495d1e9c484c7f2e256f04c/doc/man/bitcoind.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6042dfe008e7ad2c3495d1e9c484c7f2e256f04c/doc/man/bitcoind.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoind.1?ref=6042dfe008e7ad2c3495d1e9c484c7f2e256f04c",
        "patch": "@@ -1,12 +1,12 @@\n .\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIND \"1\" \"September 2018\" \"bitcoind v0.17.0.0\" \"User Commands\"\n+.TH BITCOIND \"1\" \"December 2018\" \"bitcoind v0.17.1.0\" \"User Commands\"\n .SH NAME\n-bitcoind \\- manual page for bitcoind v0.17.0.0\n+bitcoind \\- manual page for bitcoind v0.17.1.0\n .SH SYNOPSIS\n .B bitcoind\n [\\fI\\,options\\/\\fR]                     \\fI\\,Start Bitcoin Core Daemon\\/\\fR\n .SH DESCRIPTION\n-Bitcoin Core Daemon version v0.17.0.0\n+Bitcoin Core Daemon version v0.17.1.0\n .SH OPTIONS\n .HP\n \\-?\n@@ -88,7 +88,7 @@ Do not keep transactions in the mempool longer than <n> hours (default:\n .HP\n \\fB\\-par=\\fR<n>\n .IP\n-Set the number of script verification threads (\\fB\\-8\\fR to 16, 0 = auto, <0 =\n+Set the number of script verification threads (\\fB\\-6\\fR to 16, 0 = auto, <0 =\n leave that many cores free, default: 0)\n .HP\n \\fB\\-persistmempool\\fR"
      }
    ]
  },
  {
    "sha": "dcb032dcdf8e8300a84ae8ec6cfde0da5381f56f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkY2IwMzJkY2RmOGU4MzAwYTg0YWU4ZWM2Y2ZkZTBkYTUzODFmNTZm",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-10-19T22:10:49Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-12-06T11:45:18Z"
      },
      "message": "qa: Ensure wallet unload during walletpassphrase timeout\n\n0.17 branch doesn't include #12493 which changed encryptwallet behavior. For that\nreason the test is adjusted.\n\nGithub-Pull: #14453\nRebased-From: 8907df9",
      "tree": {
        "sha": "afb2505a7f514b113e46fcf9dd16d62e26913096",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/afb2505a7f514b113e46fcf9dd16d62e26913096"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dcb032dcdf8e8300a84ae8ec6cfde0da5381f56f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcb032dcdf8e8300a84ae8ec6cfde0da5381f56f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dcb032dcdf8e8300a84ae8ec6cfde0da5381f56f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcb032dcdf8e8300a84ae8ec6cfde0da5381f56f/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "75b5d8c4ead9c41f08fe53f9fffd3ffc984d6684",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75b5d8c4ead9c41f08fe53f9fffd3ffc984d6684",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/75b5d8c4ead9c41f08fe53f9fffd3ffc984d6684"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f53172639cc9b9d72aedb627b9fa717a28678b45",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dcb032dcdf8e8300a84ae8ec6cfde0da5381f56f/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dcb032dcdf8e8300a84ae8ec6cfde0da5381f56f/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=dcb032dcdf8e8300a84ae8ec6cfde0da5381f56f",
        "patch": "@@ -8,6 +8,7 @@\n \"\"\"\n import os\n import shutil\n+import time\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.test_node import ErrorMatch\n@@ -262,7 +263,15 @@ def wallet_file(name):\n         assert 'w1' not in self.nodes[0].listwallets()\n \n         # Successfully unload the wallet referenced by the request endpoint\n+        # Also ensure unload works during walletpassphrase timeout\n+        wallets = node.listwallets()\n+        w2.encryptwallet('test')\n+        self.restart_node(0, ['-wallet={}'.format(wallet) for wallet in wallets])\n+        w1 = node.get_wallet_rpc(wallet_names[0])\n+        w2 = node.get_wallet_rpc(wallet_names[1])\n+        w2.walletpassphrase('test', 1)\n         w2.unloadwallet()\n+        time.sleep(1.1)\n         assert 'w2' not in self.nodes[0].listwallets()\n \n         # Successfully unload all wallets"
      }
    ]
  },
  {
    "sha": "8b8b3a9a5fd9d65d8ed0933352fad808327e0bf3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YjhiM2E5YTVmZDlkNjVkOGVkMDkzMzM1MmZhZDgwODMyN2UwYmYz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-12-06T14:18:16Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-12-06T14:18:39Z"
      },
      "message": "Merge #14878: 0.17: Further backports\n\n7a590d8390ef2158509c4fc08b84dac71f59e1fb fix converttopsbt permitsigdata arg, add basic test (Gregory Sanders)\n\nPull request description:\n\n  Ooff, we missed some backports that were tagged.\n\n  Checked:\n\n  * In 7a590d8 (clean cherry-pick): The test changes fail without the code changes\n\nTree-SHA512: 9996886113dfcd8efa91f5436bc0f3507c81579861543611367bc3403868019fb1e45832c3f994f12278edb1c0c850e21f2f88e46a6981f45a11c4d61dcedaf9",
      "tree": {
        "sha": "f96ce79eb55ba17b6ea01e035fd6bd679d3ac064",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f96ce79eb55ba17b6ea01e035fd6bd679d3ac064"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8b8b3a9a5fd9d65d8ed0933352fad808327e0bf3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlwJL78ACgkQHkrtYphs\n0l0azggAiOS50wgju+YFNfGDxgN8DnwyKxENVYmbAWNO14daAdupd81NI7i+eePp\ng0Y/Q/EwxemII/FdFOWo2H9TOZL6Hr7lXbfOUk8Wz+JwH1emMA66O0wDTMxygVi+\nC8wH+/q3n+9L/cBUlpi8hdu0dsS+I6r7bI8K1zNXDOezVqinws3JJ5l5YtmJp7s8\n7Xg07E5AA/hsprpdc/8RHlA+SqAqfvDpLg0qCugMD/UZua/reXCyQzfPhnPbY1mz\nIKxlZf+EEzmbekDZldIW9mHEwnYLKEi65oVzd7xh05Og5vRxONYH31O+3fFe1sBE\nCfVNcUxtgxbBPA83gJdiZ4i9iShWpQ==\n=r70I\n-----END PGP SIGNATURE-----",
        "payload": "tree f96ce79eb55ba17b6ea01e035fd6bd679d3ac064\nparent 6042dfe008e7ad2c3495d1e9c484c7f2e256f04c\nparent 7a590d8390ef2158509c4fc08b84dac71f59e1fb\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1544105896 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1544105919 +0100\n\nMerge #14878: 0.17: Further backports\n\n7a590d8390ef2158509c4fc08b84dac71f59e1fb fix converttopsbt permitsigdata arg, add basic test (Gregory Sanders)\n\nPull request description:\n\n  Ooff, we missed some backports that were tagged.\n\n  Checked:\n\n  * In 7a590d8 (clean cherry-pick): The test changes fail without the code changes\n\nTree-SHA512: 9996886113dfcd8efa91f5436bc0f3507c81579861543611367bc3403868019fb1e45832c3f994f12278edb1c0c850e21f2f88e46a6981f45a11c4d61dcedaf9\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b8b3a9a5fd9d65d8ed0933352fad808327e0bf3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8b8b3a9a5fd9d65d8ed0933352fad808327e0bf3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b8b3a9a5fd9d65d8ed0933352fad808327e0bf3/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6042dfe008e7ad2c3495d1e9c484c7f2e256f04c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6042dfe008e7ad2c3495d1e9c484c7f2e256f04c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6042dfe008e7ad2c3495d1e9c484c7f2e256f04c"
      },
      {
        "sha": "7a590d8390ef2158509c4fc08b84dac71f59e1fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a590d8390ef2158509c4fc08b84dac71f59e1fb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7a590d8390ef2158509c4fc08b84dac71f59e1fb"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0925b1c0cf24868e7f430284e5cea0cebbc85589",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b8b3a9a5fd9d65d8ed0933352fad808327e0bf3/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b8b3a9a5fd9d65d8ed0933352fad808327e0bf3/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=8b8b3a9a5fd9d65d8ed0933352fad808327e0bf3",
        "patch": "@@ -1778,7 +1778,7 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n \n     // Remove all scriptSigs and scriptWitnesses from inputs\n     for (CTxIn& input : tx.vin) {\n-        if ((!input.scriptSig.empty() || !input.scriptWitness.IsNull()) && (request.params[1].isNull() || (!request.params[1].isNull() && request.params[1].get_bool()))) {\n+        if ((!input.scriptSig.empty() || !input.scriptWitness.IsNull()) && !permitsigdata) {\n             throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"Inputs must not have scriptSigs and scriptWitnesses\");\n         }\n         input.scriptSig.clear();"
      },
      {
        "sha": "ef895dd13a57a659c196b29b540d4054a405b81e",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b8b3a9a5fd9d65d8ed0933352fad808327e0bf3/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b8b3a9a5fd9d65d8ed0933352fad808327e0bf3/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=8b8b3a9a5fd9d65d8ed0933352fad808327e0bf3",
        "patch": "@@ -146,6 +146,9 @@ def run_test(self):\n         # Make sure that a psbt with signatures cannot be converted\n         signedtx = self.nodes[0].signrawtransactionwithwallet(rawtx['hex'])\n         assert_raises_rpc_error(-22, \"TX decode failed\", self.nodes[0].converttopsbt, signedtx['hex'])\n+        assert_raises_rpc_error(-22, \"TX decode failed\", self.nodes[0].converttopsbt, signedtx['hex'], False)\n+        # Unless we allow it to convert and strip signatures\n+        self.nodes[0].converttopsbt(signedtx['hex'], True)\n \n         # Explicilty allow converting non-empty txs\n         new_psbt = self.nodes[0].converttopsbt(rawtx['hex'])"
      }
    ]
  },
  {
    "sha": "abae8aeff1cb3e501aa28e58d82254afc72c4e66",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYmFlOGFlZmYxY2IzZTUwMWFhMjhlNThkODIyNTRhZmM3MmM0ZTY2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-12-06T18:07:21Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-12-06T18:07:25Z"
      },
      "message": "Merge #14880: 0.17: Backport #14453\n\ndcb032dcdf qa: Ensure wallet unload during walletpassphrase timeout (Jo\u00e3o Barbosa)\n75b5d8c4ea rpc: Fix wallet unload during walletpassphrase timeout (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  Backport #14453 to 0.17\n\nTree-SHA512: fce0adccbb07b6635bb773a71beb4a9b814bceb77bbe7bbc5bcb7d151aabb1148c791622f58c990afe202012ca1971cd466cb536fc6f37e22cdc58738720b593",
      "tree": {
        "sha": "5518f0980754997c94b2cce94763aed5e0683621",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5518f0980754997c94b2cce94763aed5e0683621"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/abae8aeff1cb3e501aa28e58d82254afc72c4e66",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcCWVdAAoJENLqSFDnUosl0/kQAJrwD6+vhNBuuywFn63XpN/B\nV6YY3P8vkcxTPj2LQra9MZCuuRQYa68175ZbaJgd2qP+JbasMq6UwrkhZdr3CYoN\nsfblQIB3ARpu6noLbW49KMiijfH3wKIAB5ssFuG0nRqkknwnNtwRENStcRRBUXdD\nUmETwwC5MRQe3mftli4Kvuf6F98dVFnzp4wYRLc7uVIaED/AEPS69HcJNJIdM6hd\nd4i02Avmxl2Omtpo/A5Jvl7785xTeYvAP3bnOruEvUYX8+RoJmn8QVdFyHxHKf1E\nS833oE0afz/0ZVBSTsXQyUQISu0AZb2IPsnBdUuTpnkkNt/9qWK1LeWWJBRuBt6Q\neLSE3/koRWXNNa9pyLu561zFx0QOQXjVUm1oBW63oLh4V3L94y2D1EBau5KzFwxR\njd5vt3g2eu30jkBYaiUUbKKNVf/VmqYf7GpUjaBc2p9W8WfZ39Q9LHI6CnvtJ9LM\ntIA5EcWkgbEMqczxBCPfbKE16OACX73HXimdp7tV2y2hx/2ASjAdQurQ88UT9BmV\nmqMHS2mqdehlX5bZXno4nHb3mmj54cXCnmTuNgrQVN4t8NA1i9/HN6Xzq8+ENJBL\nDF1BZP5J68JCBUAHiqAk+T/ikS8c6EkPercbTACN/TspH0rUYiVSpO2dZH3jVKGv\nPhUY+OGQPj+kQ2L64POU\n=Vknw\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIFUCA4eAKEdC0q79FalzEPl3i5YK9QGsv8+fv/Z7OGC9CP/wEHncteUMUmIm\nl1K5KIQMF2MI8QRcCWVf8Ai9+jfscuqrYQCD3+MNLvkMji4taHR0cHM6Ly9hbGlj\nZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQ0vcfjNx6n57NutOT\nhp/KXwjwECsw9mlLIuTfQQAu0wu2i6QI8QRcCWVf8Agq+K2Z2MnV+ACD3+MNLvkM\njikoaHR0cHM6Ly9maW5uZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbf/wENXV\n+hq6jyOrj4fjTfkAUVEI8QRcCWVf8AiwGWY4m4rYLACD3+MNLvkMjiwraHR0cHM6\nLy9ib2IuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ/AQ72Rhbw0sFcVG\nrr5NZt0wXQjxBFwJZV/wCAF26FOpkQIqAIPf4w0u+QyOIyJodHRwczovL2J0Yy5j\nYWxlbmRhci5jYXRhbGxheHkuY29t\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 5518f0980754997c94b2cce94763aed5e0683621\nparent 8b8b3a9a5fd9d65d8ed0933352fad808327e0bf3\nparent dcb032dcdf8e8300a84ae8ec6cfde0da5381f56f\nauthor MarcoFalke <falke.marco@gmail.com> 1544119641 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1544119645 -0500\n\nMerge #14880: 0.17: Backport #14453\n\ndcb032dcdf qa: Ensure wallet unload during walletpassphrase timeout (Jo\u00e3o Barbosa)\n75b5d8c4ea rpc: Fix wallet unload during walletpassphrase timeout (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  Backport #14453 to 0.17\n\nTree-SHA512: fce0adccbb07b6635bb773a71beb4a9b814bceb77bbe7bbc5bcb7d151aabb1148c791622f58c990afe202012ca1971cd466cb536fc6f37e22cdc58738720b593\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/abae8aeff1cb3e501aa28e58d82254afc72c4e66",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/abae8aeff1cb3e501aa28e58d82254afc72c4e66",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/abae8aeff1cb3e501aa28e58d82254afc72c4e66/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8b8b3a9a5fd9d65d8ed0933352fad808327e0bf3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b8b3a9a5fd9d65d8ed0933352fad808327e0bf3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8b8b3a9a5fd9d65d8ed0933352fad808327e0bf3"
      },
      {
        "sha": "dcb032dcdf8e8300a84ae8ec6cfde0da5381f56f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcb032dcdf8e8300a84ae8ec6cfde0da5381f56f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dcb032dcdf8e8300a84ae8ec6cfde0da5381f56f"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 21,
      "deletions": 8
    },
    "files": [
      {
        "sha": "193da765513c3b0e4f647e9690ac56d0e88a29c3",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 8,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abae8aeff1cb3e501aa28e58d82254afc72c4e66/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abae8aeff1cb3e501aa28e58d82254afc72c4e66/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=abae8aeff1cb3e501aa28e58d82254afc72c4e66",
        "patch": "@@ -2546,13 +2546,6 @@ static UniValue keypoolrefill(const JSONRPCRequest& request)\n }\n \n \n-static void LockWallet(CWallet* pWallet)\n-{\n-    LOCK(pWallet->cs_wallet);\n-    pWallet->nRelockTime = 0;\n-    pWallet->Lock();\n-}\n-\n static UniValue walletpassphrase(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n@@ -2622,7 +2615,18 @@ static UniValue walletpassphrase(const JSONRPCRequest& request)\n     pwallet->TopUpKeyPool();\n \n     pwallet->nRelockTime = GetTime() + nSleepTime;\n-    RPCRunLater(strprintf(\"lockwallet(%s)\", pwallet->GetName()), std::bind(LockWallet, pwallet), nSleepTime);\n+\n+    // Keep a weak pointer to the wallet so that it is possible to unload the\n+    // wallet before the following callback is called. If a valid shared pointer\n+    // is acquired in the callback then the wallet is still loaded.\n+    std::weak_ptr<CWallet> weak_wallet = wallet;\n+    RPCRunLater(strprintf(\"lockwallet(%s)\", pwallet->GetName()), [weak_wallet] {\n+        if (auto shared_wallet = weak_wallet.lock()) {\n+            LOCK(shared_wallet->cs_wallet);\n+            shared_wallet->Lock();\n+            shared_wallet->nRelockTime = 0;\n+        }\n+    }, nSleepTime);\n \n     return NullUniValue;\n }"
      },
      {
        "sha": "f53172639cc9b9d72aedb627b9fa717a28678b45",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abae8aeff1cb3e501aa28e58d82254afc72c4e66/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abae8aeff1cb3e501aa28e58d82254afc72c4e66/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=abae8aeff1cb3e501aa28e58d82254afc72c4e66",
        "patch": "@@ -8,6 +8,7 @@\n \"\"\"\n import os\n import shutil\n+import time\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.test_node import ErrorMatch\n@@ -262,7 +263,15 @@ def wallet_file(name):\n         assert 'w1' not in self.nodes[0].listwallets()\n \n         # Successfully unload the wallet referenced by the request endpoint\n+        # Also ensure unload works during walletpassphrase timeout\n+        wallets = node.listwallets()\n+        w2.encryptwallet('test')\n+        self.restart_node(0, ['-wallet={}'.format(wallet) for wallet in wallets])\n+        w1 = node.get_wallet_rpc(wallet_names[0])\n+        w2 = node.get_wallet_rpc(wallet_names[1])\n+        w2.walletpassphrase('test', 1)\n         w2.unloadwallet()\n+        time.sleep(1.1)\n         assert 'w2' not in self.nodes[0].listwallets()\n \n         # Successfully unload all wallets"
      }
    ]
  },
  {
    "sha": "89a9a9d9385bbf291849874adc33a270b28fcac4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OWE5YTlkOTM4NWJiZjI5MTg0OTg3NGFkYzMzYTI3MGIyOGZjYWM0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-10-06T10:33:24Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2018-12-06T21:30:22Z"
      },
      "message": "Stop requiring imported pubkey to sign non-PKH schemes\n\nGithub-Pull: #14424\nRebased-From: 2f6b466aeb6d4c88ab2e0e8b2a402be0743608b5",
      "tree": {
        "sha": "5e13e8251c5348d02462524eb9f9120c9975d611",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5e13e8251c5348d02462524eb9f9120c9975d611"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/89a9a9d9385bbf291849874adc33a270b28fcac4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89a9a9d9385bbf291849874adc33a270b28fcac4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/89a9a9d9385bbf291849874adc33a270b28fcac4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89a9a9d9385bbf291849874adc33a270b28fcac4/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6042dfe008e7ad2c3495d1e9c484c7f2e256f04c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6042dfe008e7ad2c3495d1e9c484c7f2e256f04c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6042dfe008e7ad2c3495d1e9c484c7f2e256f04c"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "a95a8609b3cf8f51e48c81199a764a480dc34c73",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89a9a9d9385bbf291849874adc33a270b28fcac4/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89a9a9d9385bbf291849874adc33a270b28fcac4/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=89a9a9d9385bbf291849874adc33a270b28fcac4",
        "patch": "@@ -69,15 +69,15 @@ static bool GetPubKey(const SigningProvider& provider, SignatureData& sigdata, c\n     return false;\n }\n \n-static bool CreateSig(const BaseSignatureCreator& creator, SignatureData& sigdata, const SigningProvider& provider, std::vector<unsigned char>& sig_out, const CKeyID& keyid, const CScript& scriptcode, SigVersion sigversion)\n+static bool CreateSig(const BaseSignatureCreator& creator, SignatureData& sigdata, const SigningProvider& provider, std::vector<unsigned char>& sig_out, const CPubKey& pubkey, const CScript& scriptcode, SigVersion sigversion)\n {\n+    CKeyID keyid = pubkey.GetID();\n     const auto it = sigdata.signatures.find(keyid);\n     if (it != sigdata.signatures.end()) {\n         sig_out = it->second.second;\n         return true;\n     }\n-    CPubKey pubkey;\n-    GetPubKey(provider, sigdata, keyid, pubkey);\n+    sigdata.misc_pubkeys.emplace(keyid, pubkey);\n     if (creator.CreateSig(provider, sig_out, keyid, scriptcode, sigversion)) {\n         auto i = sigdata.signatures.emplace(keyid, SigPair(pubkey, sig_out));\n         assert(i.second);\n@@ -111,15 +111,15 @@ static bool SignStep(const SigningProvider& provider, const BaseSignatureCreator\n     case TX_WITNESS_UNKNOWN:\n         return false;\n     case TX_PUBKEY:\n-        if (!CreateSig(creator, sigdata, provider, sig, CPubKey(vSolutions[0]).GetID(), scriptPubKey, sigversion)) return false;\n+        if (!CreateSig(creator, sigdata, provider, sig, CPubKey(vSolutions[0]), scriptPubKey, sigversion)) return false;\n         ret.push_back(std::move(sig));\n         return true;\n     case TX_PUBKEYHASH: {\n         CKeyID keyID = CKeyID(uint160(vSolutions[0]));\n-        if (!CreateSig(creator, sigdata, provider, sig, keyID, scriptPubKey, sigversion)) return false;\n-        ret.push_back(std::move(sig));\n         CPubKey pubkey;\n         GetPubKey(provider, sigdata, keyID, pubkey);\n+        if (!CreateSig(creator, sigdata, provider, sig, pubkey, scriptPubKey, sigversion)) return false;\n+        ret.push_back(std::move(sig));\n         ret.push_back(ToByteVector(pubkey));\n         return true;\n     }\n@@ -135,7 +135,7 @@ static bool SignStep(const SigningProvider& provider, const BaseSignatureCreator\n         ret.push_back(valtype()); // workaround CHECKMULTISIG bug\n         for (size_t i = 1; i < vSolutions.size() - 1; ++i) {\n             CPubKey pubkey = CPubKey(vSolutions[i]);\n-            if (ret.size() < required + 1 && CreateSig(creator, sigdata, provider, sig, pubkey.GetID(), scriptPubKey, sigversion)) {\n+            if (ret.size() < required + 1 && CreateSig(creator, sigdata, provider, sig, pubkey, scriptPubKey, sigversion)) {\n                 ret.push_back(std::move(sig));\n             }\n         }"
      }
    ]
  },
  {
    "sha": "c6e4a1fca5e5386b535e568b144f10bb3e1e0c2c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNmU0YTFmY2E1ZTUzODZiNTM1ZTU2OGIxNDRmMTBiYjNlMWUwYzJj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-12-06T22:35:06Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-12-06T23:10:06Z"
      },
      "message": "Merge #14889: [0.17] Backport #14424 (Stop requiring imported pubkey to sign non-PKH schemes)\n\n89a9a9d9385bbf291849874adc33a270b28fcac4 Stop requiring imported pubkey to sign non-PKH schemes (Pieter Wuille)\n\nPull request description:\n\n  Github-Pull: #14424\n  Rebased-From: 2f6b466aeb6d4c88ab2e0e8b2a402be0743608b5\n\nTree-SHA512: 1ea10dee66626f04918f197cd7c4949a836fa49c8f676f276b2328f8d79389059db7b30fc04d4c4bf8209f6a8d21f3ea49a017ddc7623eca6b7e6efc2fe0d749",
      "tree": {
        "sha": "bcb9d462721143b47c15923820d8710cb4dc4688",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bcb9d462721143b47c15923820d8710cb4dc4688"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c6e4a1fca5e5386b535e568b144f10bb3e1e0c2c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlwJrE4ACgkQHkrtYphs\n0l3MxQf/fwOBqnk90XCwTs9ywxYtna7/wzw2uI8YnxuhTZzlcZPhokie9S9CpEhO\nBX/CXC0j77HvrBdGcd1saytIpWCDyMFAaukTpBMXuVZVaVXat+h26OgFz9PvT8L2\nVSSP4DEFsKJTjR54Cz3LhZ+Eo5FVcw5u3hF4fptVEtxYw2VtTFtppr2MxaOo0sxE\nUDSw+9x7R7jCeNXCtmpqhseYLJApKWGPaKFhSeBH9YHG7IIJx9WMbOeNr8JNdryX\nbd+XZAapURi1RyE7Q2A/QG1IFo9xBI+xvwJDkQ0tNeMj1+9kkkueExB7GYcXbz9e\nHCvKI8xOGmKMOLvBIEpJOiSL5sDMCQ==\n=mttm\n-----END PGP SIGNATURE-----",
        "payload": "tree bcb9d462721143b47c15923820d8710cb4dc4688\nparent abae8aeff1cb3e501aa28e58d82254afc72c4e66\nparent 89a9a9d9385bbf291849874adc33a270b28fcac4\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1544135706 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1544137806 +0100\n\nMerge #14889: [0.17] Backport #14424 (Stop requiring imported pubkey to sign non-PKH schemes)\n\n89a9a9d9385bbf291849874adc33a270b28fcac4 Stop requiring imported pubkey to sign non-PKH schemes (Pieter Wuille)\n\nPull request description:\n\n  Github-Pull: #14424\n  Rebased-From: 2f6b466aeb6d4c88ab2e0e8b2a402be0743608b5\n\nTree-SHA512: 1ea10dee66626f04918f197cd7c4949a836fa49c8f676f276b2328f8d79389059db7b30fc04d4c4bf8209f6a8d21f3ea49a017ddc7623eca6b7e6efc2fe0d749\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6e4a1fca5e5386b535e568b144f10bb3e1e0c2c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c6e4a1fca5e5386b535e568b144f10bb3e1e0c2c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6e4a1fca5e5386b535e568b144f10bb3e1e0c2c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "abae8aeff1cb3e501aa28e58d82254afc72c4e66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/abae8aeff1cb3e501aa28e58d82254afc72c4e66",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/abae8aeff1cb3e501aa28e58d82254afc72c4e66"
      },
      {
        "sha": "89a9a9d9385bbf291849874adc33a270b28fcac4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89a9a9d9385bbf291849874adc33a270b28fcac4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/89a9a9d9385bbf291849874adc33a270b28fcac4"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "a95a8609b3cf8f51e48c81199a764a480dc34c73",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6e4a1fca5e5386b535e568b144f10bb3e1e0c2c/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6e4a1fca5e5386b535e568b144f10bb3e1e0c2c/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=c6e4a1fca5e5386b535e568b144f10bb3e1e0c2c",
        "patch": "@@ -69,15 +69,15 @@ static bool GetPubKey(const SigningProvider& provider, SignatureData& sigdata, c\n     return false;\n }\n \n-static bool CreateSig(const BaseSignatureCreator& creator, SignatureData& sigdata, const SigningProvider& provider, std::vector<unsigned char>& sig_out, const CKeyID& keyid, const CScript& scriptcode, SigVersion sigversion)\n+static bool CreateSig(const BaseSignatureCreator& creator, SignatureData& sigdata, const SigningProvider& provider, std::vector<unsigned char>& sig_out, const CPubKey& pubkey, const CScript& scriptcode, SigVersion sigversion)\n {\n+    CKeyID keyid = pubkey.GetID();\n     const auto it = sigdata.signatures.find(keyid);\n     if (it != sigdata.signatures.end()) {\n         sig_out = it->second.second;\n         return true;\n     }\n-    CPubKey pubkey;\n-    GetPubKey(provider, sigdata, keyid, pubkey);\n+    sigdata.misc_pubkeys.emplace(keyid, pubkey);\n     if (creator.CreateSig(provider, sig_out, keyid, scriptcode, sigversion)) {\n         auto i = sigdata.signatures.emplace(keyid, SigPair(pubkey, sig_out));\n         assert(i.second);\n@@ -111,15 +111,15 @@ static bool SignStep(const SigningProvider& provider, const BaseSignatureCreator\n     case TX_WITNESS_UNKNOWN:\n         return false;\n     case TX_PUBKEY:\n-        if (!CreateSig(creator, sigdata, provider, sig, CPubKey(vSolutions[0]).GetID(), scriptPubKey, sigversion)) return false;\n+        if (!CreateSig(creator, sigdata, provider, sig, CPubKey(vSolutions[0]), scriptPubKey, sigversion)) return false;\n         ret.push_back(std::move(sig));\n         return true;\n     case TX_PUBKEYHASH: {\n         CKeyID keyID = CKeyID(uint160(vSolutions[0]));\n-        if (!CreateSig(creator, sigdata, provider, sig, keyID, scriptPubKey, sigversion)) return false;\n-        ret.push_back(std::move(sig));\n         CPubKey pubkey;\n         GetPubKey(provider, sigdata, keyID, pubkey);\n+        if (!CreateSig(creator, sigdata, provider, sig, pubkey, scriptPubKey, sigversion)) return false;\n+        ret.push_back(std::move(sig));\n         ret.push_back(ToByteVector(pubkey));\n         return true;\n     }\n@@ -135,7 +135,7 @@ static bool SignStep(const SigningProvider& provider, const BaseSignatureCreator\n         ret.push_back(valtype()); // workaround CHECKMULTISIG bug\n         for (size_t i = 1; i < vSolutions.size() - 1; ++i) {\n             CPubKey pubkey = CPubKey(vSolutions[i]);\n-            if (ret.size() < required + 1 && CreateSig(creator, sigdata, provider, sig, pubkey.GetID(), scriptPubKey, sigversion)) {\n+            if (ret.size() < required + 1 && CreateSig(creator, sigdata, provider, sig, pubkey, scriptPubKey, sigversion)) {\n                 ret.push_back(std::move(sig));\n             }\n         }"
      }
    ]
  },
  {
    "sha": "ef70f9b52b851c7997a9f1a0834714e3eebc1fd8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZjcwZjliNTJiODUxYzc5OTdhOWYxYTA4MzQ3MTRlM2VlYmMxZmQ4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-12-06T23:29:28Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-12-06T23:29:45Z"
      },
      "message": "doc: Fill in authors and changelog for 0.17.1 release notes\n\nTree-SHA512: dc23ae43e81ad379b48bb8dc6da21cde647a7edc778563b8b8266dfe84d9baa70bf4565915e276ea0e14aa96ce677547494da0aadeebfcc961f53430c7bb84ea",
      "tree": {
        "sha": "c9362ca615855ce0d7f27fe99d4ccbbd55bb00b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c9362ca615855ce0d7f27fe99d4ccbbd55bb00b3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ef70f9b52b851c7997a9f1a0834714e3eebc1fd8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlwJsOkACgkQHkrtYphs\n0l1pkQf9ElAXveYnn6VpFvdlV3uxp0vR0ktXbxvtiKeJUTkFNE1MJczWtvBDzF47\nHcM1hYFw9dKwaFi3ePSaHk2xUtXQlRe5RJXcjNhz1azNOzAGxHod8yRdtKf/L/gW\n3PlbJkVSdPNKREFHwlIH5tsGbH5Q5ga7o6nuKNnffkVYmTfSZYAgk+pLw011HIHH\nYr2AkkVi40/pIBibmPrNSK0Q47c7aYmxj4T8bTXW4csLakl4suQ/B083ethy5jtq\nXnfmKlONj6pk6E/uGYwRkdBhBNyurbZm7GbjGJK0yRxm6QcjRomka6VV8uuX6VeL\napJKxu+6xORwZFscbefNf5x7tU16+w==\n=SdKK\n-----END PGP SIGNATURE-----",
        "payload": "tree c9362ca615855ce0d7f27fe99d4ccbbd55bb00b3\nparent c6e4a1fca5e5386b535e568b144f10bb3e1e0c2c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1544138968 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1544138985 +0100\n\ndoc: Fill in authors and changelog for 0.17.1 release notes\n\nTree-SHA512: dc23ae43e81ad379b48bb8dc6da21cde647a7edc778563b8b8266dfe84d9baa70bf4565915e276ea0e14aa96ce677547494da0aadeebfcc961f53430c7bb84ea\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef70f9b52b851c7997a9f1a0834714e3eebc1fd8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ef70f9b52b851c7997a9f1a0834714e3eebc1fd8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef70f9b52b851c7997a9f1a0834714e3eebc1fd8/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c6e4a1fca5e5386b535e568b144f10bb3e1e0c2c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6e4a1fca5e5386b535e568b144f10bb3e1e0c2c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c6e4a1fca5e5386b535e568b144f10bb3e1e0c2c"
      }
    ],
    "stats": {
      "total": 101,
      "additions": 81,
      "deletions": 20
    },
    "files": [
      {
        "sha": "816c3594c6f672d00a0ee471cc27febce3387fd8",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 81,
        "deletions": 20,
        "changes": 101,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef70f9b52b851c7997a9f1a0834714e3eebc1fd8/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef70f9b52b851c7997a9f1a0834714e3eebc1fd8/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=ef70f9b52b851c7997a9f1a0834714e3eebc1fd8",
        "patch": "@@ -1,9 +1,6 @@\n-(note: this is a temporary file, to be added-to by anybody, and moved to\n-release-notes at release time)\n+Bitcoin Core version 0.17.1 is now available from:\n \n-Bitcoin Core version 0.17.x is now available from:\n-\n-  <https://bitcoincore.org/bin/bitcoin-core-0.17.x/>\n+  <https://bitcoincore.org/bin/bitcoin-core-0.17.1/>\n \n This is a new major version release, including new features, various bugfixes\n and performance improvements, as well as updated translations.\n@@ -58,19 +55,9 @@ frequently tested on them.\n From 0.17.0 onwards macOS <10.10 is no longer supported. 0.17.0 is built using Qt 5.9.x, which doesn't\n support versions of macOS older than 10.10.\n \n-Known issues\n-============\n-\n-...\n-\n Notable changes\n ===============\n \n-...\n-\n-0.17.x change log\n-=================\n-\n `listtransactions` label support\n --------------------------------\n \n@@ -89,15 +76,89 @@ to list transactions that don't have any label. Without\n only non-labeled transactions is not generally useful behavior and can cause\n confusion.\n \n+0.17.1 change log\n+=================\n+\n+### P2P protocol and network code\n+- #14685 `9406502` Fix a deserialization overflow edge case (kazcw)\n+- #14728 `b901578` Fix uninitialized read when stringifying an addrLocal (kazcw)\n+\n+### Wallet\n+- #14441 `5150acc` Restore ability to list incoming transactions by label (jnewbery)\n+- #13546 `91fa15a` Fix use of uninitialized value `bnb_used` in CWallet::CreateTransaction(\u2026) (practicalswift)\n+- #14310 `bb90695` Ensure wallet is unlocked before signing (gustavonalle)\n+- #14690 `5782fdc` Throw error if CPubKey is invalid during PSBT keypath serialization (instagibbs)\n+- #14852 `2528443` backport: [tests] Add `wallet_balance.py` (MarcoFalke)\n+- #14196 `3362a95` psbt: always drop the unnecessary utxo and convert non-witness utxo to witness when necessary (achow101)\n+- #14588 `70ee1f8` Refactor PSBT signing logic to enforce invariant and fix signing bug (gwillen)\n+- #14424 `89a9a9d` Stop requiring imported pubkey to sign non-PKH schemes (sipa, MeshCollider)\n+\n+### RPC and other APIs\n+- #14417 `fb9ad04` Fix listreceivedbyaddress not taking address as a string (etscrivner)\n+- #14596 `de5e48a` Bugfix: RPC: Add `address_type` named param for createmultisig (luke-jr)\n+- #14618 `9666dba` Make HTTP RPC debug logging more informative (practicalswift)\n+- #14197 `7bee414` [psbt] Convert non-witness UTXOs to witness if witness sig created (achow101)\n+- #14377 `a3fe125` Check that a separator is found for psbt inputs, outputs, and global map (achow101)\n+- #14356 `7a590d8` Fix converttopsbt permitsigdata arg, add basic test (instagibbs)\n+- #14453 `75b5d8c` Fix wallet unload during walletpassphrase timeout (promag)\n+\n+### GUI\n+- #14403 `0242b5a` Revert \"Force TLS1.0+ for SSL connections\" (real-or-random)\n+- #14593 `df5131b` Explicitly disable \"Dark Mode\" appearance on macOS (fanquake)\n+\n+### Build system\n+- #14647 `7edebed` Remove illegal spacing in darwin.mk (ch4ot1c)\n+- #14698 `ec71f06` Add bitcoin-tx.exe into Windows installer (ken2812221)\n+\n+### Tests and QA\n+- #13965 `29899ec` Fix extended functional tests fail (ken2812221)\n+- #14011 `9461f98` Disable wallet and address book Qt tests on macOS minimal platform (ryanofsky)\n+- #14180 `86fadee` Run all tests even if wallet is not compiled (MarcoFalke)\n+- #14122 `8bc1bad` Test `rpc_help.py` failed: Check whether ZMQ is enabled or not (Kvaciral)\n+- #14101 `96dc936` Use named args in validation acceptance tests (MarcoFalke)\n+- #14020 `24d796a` Add tests for RPC help (promag)\n+- #14052 `7ff32a6` Add some actual witness in `rpc_rawtransaction` (MarcoFalke)\n+- #14215 `b72fbab` Use correct python index slices in example test (sdaftuar)\n+- #14024 `06544fa` Add `TestNode::assert_debug_log` (MarcoFalke)\n+- #14658 `60f7a97` Add test to ensure node can generate all rpc help texts at runtime (MarcoFalke)\n+- #14632 `96f15e8` Fix a comment (fridokus)\n+- #14700 `f9db08e` Avoid race in `p2p_invalid_block` by waiting for the block request (MarcoFalke)\n+- #14845 `67225e2` Add `wallet_balance.py` (jnewbery)\n+\n+### Documentation\n+- #14161 `5f51fd6` doc/descriptors.md tweaks (ryanofsky)\n+- #14276 `85aacc4` Add autogen.sh in ARM Cross-compilation (walterwhite81)\n+\n Credits\n =======\n \n Thanks to everyone who directly contributed to this release:\n \n-...\n-\n-And to those that reported security issues:\n-\n-...\n+- Andrew Chow\n+- Chun Kuan Lee\n+- David A. Harding\n+- Eric Scrivner\n+- fanquake\n+- fridokus\n+- Glenn Willen\n+- Gregory Sanders\n+- gustavonalle\n+- John Newbery\n+- Jon Layton\n+- Jonas Schnelli\n+- Jo\u00e3o Barbosa\n+- Kaz Wesley\n+- Kvaciral\n+- Luke Dashjr\n+- MarcoFalke\n+- MeshCollider\n+- Pieter Wuille\n+- practicalswift\n+- Russell Yanofsky\n+- Sjors Provoost\n+- Suhas Daftuar\n+- Tim Ruffing\n+- Walter\n+- Wladimir J. van der Laan\n \n As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/)."
      }
    ]
  },
  {
    "sha": "46c162df478f3b71bef8217f214ccf202576b733",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NmMxNjJkZjQ3OGYzYjcxYmVmODIxN2YyMTRjY2YyMDI1NzZiNzMz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-12-06T21:13:53Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-12-07T16:36:29Z"
      },
      "message": "rpc: Avoid creating non-standard raw transactions\n\nGithub-Pull: #14890\nRebased-From: fa4c8679ed94f215ce895938f7c3c169a2ce101e",
      "tree": {
        "sha": "67f0870b84846c6033dae9d4c9319b5047c04fb2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/67f0870b84846c6033dae9d4c9319b5047c04fb2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/46c162df478f3b71bef8217f214ccf202576b733",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46c162df478f3b71bef8217f214ccf202576b733",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/46c162df478f3b71bef8217f214ccf202576b733",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46c162df478f3b71bef8217f214ccf202576b733/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ef70f9b52b851c7997a9f1a0834714e3eebc1fd8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef70f9b52b851c7997a9f1a0834714e3eebc1fd8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ef70f9b52b851c7997a9f1a0834714e3eebc1fd8"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 19,
      "deletions": 16
    },
    "files": [
      {
        "sha": "391e744c904d7fa17e62c5c185b7e9122942b25f",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 3,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46c162df478f3b71bef8217f214ccf202576b733/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46c162df478f3b71bef8217f214ccf202576b733/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=46c162df478f3b71bef8217f214ccf202576b733",
        "patch": "@@ -396,7 +396,6 @@ CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniVal\n         rawTx.vin.push_back(in);\n     }\n \n-    std::set<CTxDestination> destinations;\n     if (!outputs_is_obj) {\n         // Translate array of key-value pairs into dict\n         UniValue outputs_dict = UniValue(UniValue::VOBJ);\n@@ -412,8 +411,17 @@ CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniVal\n         }\n         outputs = std::move(outputs_dict);\n     }\n+\n+    // Duplicate checking\n+    std::set<CTxDestination> destinations;\n+    bool has_data{false};\n+\n     for (const std::string& name_ : outputs.getKeys()) {\n         if (name_ == \"data\") {\n+            if (has_data) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, duplicate key: data\");\n+            }\n+            has_data = true;\n             std::vector<unsigned char> data = ParseHexV(outputs[name_].getValStr(), \"Data\");\n \n             CTxOut out(0, CScript() << OP_RETURN << data);\n@@ -465,7 +473,8 @@ static UniValue createrawtransaction(const JSONRPCRequest& request)\n             \"       } \\n\"\n             \"       ,...\\n\"\n             \"     ]\\n\"\n-            \"2. \\\"outputs\\\"               (array, required) a json array with outputs (key-value pairs)\\n\"\n+            \"2. \\\"outputs\\\"               (array, required) a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+            \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n             \"   [\\n\"\n             \"    {\\n\"\n             \"      \\\"address\\\": x.xxx,    (obj, optional) A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\\n\"\n@@ -1690,7 +1699,8 @@ UniValue createpsbt(const JSONRPCRequest& request)\n                             \"       } \\n\"\n                             \"       ,...\\n\"\n                             \"     ]\\n\"\n-                            \"2. \\\"outputs\\\"               (array, required) a json array with outputs (key-value pairs)\\n\"\n+                            \"2. \\\"outputs\\\"               (array, required) a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                            \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n                             \"   [\\n\"\n                             \"    {\\n\"\n                             \"      \\\"address\\\": x.xxx,    (obj, optional) A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\\n\""
      },
      {
        "sha": "943bbf3137c173000a6ea1e56a78f488c0cd35b7",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46c162df478f3b71bef8217f214ccf202576b733/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46c162df478f3b71bef8217f214ccf202576b733/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=46c162df478f3b71bef8217f214ccf202576b733",
        "patch": "@@ -122,9 +122,6 @@ BOOST_AUTO_TEST_CASE(rpc_createraw_op_return)\n {\n     BOOST_CHECK_NO_THROW(CallRPC(\"createrawtransaction [{\\\"txid\\\":\\\"a3b807410df0b60fcb9736768df5823938b2f838694939ba45f3c0a1bff150ed\\\",\\\"vout\\\":0}] {\\\"data\\\":\\\"68656c6c6f776f726c64\\\"}\"));\n \n-    // Allow more than one data transaction output\n-    BOOST_CHECK_NO_THROW(CallRPC(\"createrawtransaction [{\\\"txid\\\":\\\"a3b807410df0b60fcb9736768df5823938b2f838694939ba45f3c0a1bff150ed\\\",\\\"vout\\\":0}] {\\\"data\\\":\\\"68656c6c6f776f726c64\\\",\\\"data\\\":\\\"68656c6c6f776f726c64\\\"}\"));\n-\n     // Key not \"data\" (bad address)\n     BOOST_CHECK_THROW(CallRPC(\"createrawtransaction [{\\\"txid\\\":\\\"a3b807410df0b60fcb9736768df5823938b2f838694939ba45f3c0a1bff150ed\\\",\\\"vout\\\":0}] {\\\"somedata\\\":\\\"68656c6c6f776f726c64\\\"}\"), std::runtime_error);\n "
      },
      {
        "sha": "e02171ec40fe6789c3b52f9fd379ad08cd8822a4",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46c162df478f3b71bef8217f214ccf202576b733/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46c162df478f3b71bef8217f214ccf202576b733/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=46c162df478f3b71bef8217f214ccf202576b733",
        "patch": "@@ -4680,7 +4680,8 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n                             \"       } \\n\"\n                             \"       ,...\\n\"\n                             \"     ]\\n\"\n-                            \"2. \\\"outputs\\\"               (array, required) a json array with outputs (key-value pairs)\\n\"\n+                            \"2. \\\"outputs\\\"               (array, required) a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                            \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n                             \"   [\\n\"\n                             \"    {\\n\"\n                             \"      \\\"address\\\": x.xxx,    (obj, optional) A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\\n\""
      },
      {
        "sha": "c62e04fe14754141aae1d5f0ec43622da0c66c17",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 4,
        "deletions": 9,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46c162df478f3b71bef8217f214ccf202576b733/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46c162df478f3b71bef8217f214ccf202576b733/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=46c162df478f3b71bef8217f214ccf202576b733",
        "patch": "@@ -99,6 +99,8 @@ def run_test(self):\n         assert_raises_rpc_error(-3, \"Amount out of range\", self.nodes[0].createrawtransaction, [], {address: -1})\n         assert_raises_rpc_error(-8, \"Invalid parameter, duplicated address: %s\" % address, self.nodes[0].createrawtransaction, [], multidict([(address, 1), (address, 1)]))\n         assert_raises_rpc_error(-8, \"Invalid parameter, duplicated address: %s\" % address, self.nodes[0].createrawtransaction, [], [{address: 1}, {address: 1}])\n+        assert_raises_rpc_error(-8, \"Invalid parameter, duplicate key: data\", self.nodes[0].createrawtransaction, [], [{\"data\": 'aa'}, {\"data\": \"bb\"}])\n+        assert_raises_rpc_error(-8, \"Invalid parameter, duplicate key: data\", self.nodes[0].createrawtransaction, [], multidict([(\"data\", 'aa'), (\"data\", \"bb\")]))\n         assert_raises_rpc_error(-8, \"Invalid parameter, key-value pair must contain exactly one key\", self.nodes[0].createrawtransaction, [], [{'a': 1, 'b': 2}])\n         assert_raises_rpc_error(-8, \"Invalid parameter, key-value pair not an object as expected\", self.nodes[0].createrawtransaction, [], [['key-value pair1'], ['2']])\n \n@@ -126,19 +128,12 @@ def run_test(self):\n             bytes_to_hex_str(tx.serialize()),\n             self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs=[{address: 99}, {address2: 99}]),\n         )\n-        # Two data outputs\n-        tx.deserialize(BytesIO(hex_str_to_bytes(self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs=multidict([('data', '99'), ('data', '99')])))))\n-        assert_equal(len(tx.vout), 2)\n-        assert_equal(\n-            bytes_to_hex_str(tx.serialize()),\n-            self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs=[{'data': '99'}, {'data': '99'}]),\n-        )\n         # Multiple mixed outputs\n-        tx.deserialize(BytesIO(hex_str_to_bytes(self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs=multidict([(address, 99), ('data', '99'), ('data', '99')])))))\n+        tx.deserialize(BytesIO(hex_str_to_bytes(self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs=multidict([(address, 99), (address2, 99), ('data', '99')])))))\n         assert_equal(len(tx.vout), 3)\n         assert_equal(\n             bytes_to_hex_str(tx.serialize()),\n-            self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs=[{address: 99}, {'data': '99'}, {'data': '99'}]),\n+            self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs=[{address: 99}, {address2: 99}, {'data': '99'}]),\n         )\n \n         for type in [\"bech32\", \"p2sh-segwit\", \"legacy\"]:"
      }
    ]
  },
  {
    "sha": "ae1b6756c96f78985e88fa5b0c68ccad90f5e259",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZTFiNjc1NmM5NmY3ODk4NWU4OGZhNWIwYzY4Y2NhZDkwZjVlMjU5",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-11-07T16:24:34Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-12-09T14:32:45Z"
      },
      "message": "importmulti: Don't add internal addresses to address book\n\nGithub-Pull: #14679\nRebased-From: 7afddfa8cefd01249ad59cf2370e7cec90b34f6f",
      "tree": {
        "sha": "ce7f269cd36cc48dee7b00272d86dc0203af1ecc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ce7f269cd36cc48dee7b00272d86dc0203af1ecc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ae1b6756c96f78985e88fa5b0c68ccad90f5e259",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAlwNJ48ACgkQLuufXMCV\nJsFCAw//VzzFjcWOOzjAgefU51lpR6J1jDUzhXZj6HLlETLjuuAV3egTXGq/qi3H\nCmHCPN7q30rkgbAt0v/NTkcTZK+UBtOItyCqMnMYFnlG8HlEECoLdB8yjYS7puAZ\nzT9oTdtDEAOlJ0HWjMtaT5GI5s362dQ7G0Ult5zA+VUN7OI3HYIuKyczG9ISxKD3\nogwJ2cd+93lZbnAPJRBFq+WQOBkxeShtDFVWrHj/Ic030Qcp2Gik+yEDoUo5Z2Vy\nh+OyWJTbqrMAgggdKq7OSEvjbwpwbr6IhSAHYZnXUzrXOaETSR6Fjb9YhdS8syXx\nF8+aJ41H94j7SLfxE1kP8rdMFCKy5ComU9xteS534koPPKOqYXjIPSWZr4lx88t7\nmH3M7U3HRxRiiYP/t8K6J5y5Ny40+sZmY+U68CCpHo+0HcbfTsNqAW01dNlP8vog\nMlN7Rcu4woEN3olzHWkVoPdHKdvHX4xH/KnSbaPB0xNkWXwRVWruUrpHXuxaWHw9\nMSAAf8n5nJOzqDHwpeXee93aHI1qHekdcpO9eLpiQ6OPIOhqD+gsFV+NYExVywGB\n/v6yDaFXWDZsUJ+9qRtoN2ttlUHHFovmuJlfuahTI6qBHDs+76EgihmuNytq1Q8m\nmhxUJ+LXllel0R2FJZhgVSoJ/UjHOBuAwmZolosxfQc7+7uytlw=\n=gyar\n-----END PGP SIGNATURE-----",
        "payload": "tree ce7f269cd36cc48dee7b00272d86dc0203af1ecc\nparent ef70f9b52b851c7997a9f1a0834714e3eebc1fd8\nauthor Gregory Sanders <gsanders87@gmail.com> 1541607874 -0500\ncommitter fanquake <fanquake@gmail.com> 1544365965 +0800\n\nimportmulti: Don't add internal addresses to address book\n\nGithub-Pull: #14679\nRebased-From: 7afddfa8cefd01249ad59cf2370e7cec90b34f6f\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae1b6756c96f78985e88fa5b0c68ccad90f5e259",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ae1b6756c96f78985e88fa5b0c68ccad90f5e259",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae1b6756c96f78985e88fa5b0c68ccad90f5e259/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ef70f9b52b851c7997a9f1a0834714e3eebc1fd8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef70f9b52b851c7997a9f1a0834714e3eebc1fd8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ef70f9b52b851c7997a9f1a0834714e3eebc1fd8"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 8,
      "deletions": 6
    },
    "files": [
      {
        "sha": "a55c539733cc2369f3eb142b3b808fc980c1fb4f",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae1b6756c96f78985e88fa5b0c68ccad90f5e259/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae1b6756c96f78985e88fa5b0c68ccad90f5e259/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=ae1b6756c96f78985e88fa5b0c68ccad90f5e259",
        "patch": "@@ -996,8 +996,9 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n                     throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n                 }\n \n-                // add to address book or update label\n-                if (IsValidDestination(pubkey_dest)) {\n+                // if not internal add to address book or update label\n+                if (!internal) {\n+                    assert(IsValidDestination(pubkey_dest));\n                     pwallet->SetAddressBook(pubkey_dest, label, \"receive\");\n                 }\n \n@@ -1148,7 +1149,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n             \"      \\\"redeemscript\\\": \\\"<script>\\\"                            , (string, optional) Allowed only if the scriptPubKey is a P2SH address or a P2SH scriptPubKey\\n\"\n             \"      \\\"pubkeys\\\": [\\\"<pubKey>\\\", ... ]                         , (array, optional) Array of strings giving pubkeys that must occur in the output or redeemscript\\n\"\n             \"      \\\"keys\\\": [\\\"<key>\\\", ... ]                               , (array, optional) Array of strings giving private keys whose corresponding public keys must occur in the output or redeemscript\\n\"\n-            \"      \\\"internal\\\": <true>                                    , (boolean, optional, default: false) Stating whether matching outputs should be treated as not incoming payments\\n\"\n+            \"      \\\"internal\\\": <true>                                    , (boolean, optional, default: false) Stating whether matching outputs should be treated as not incoming payments aka change\\n\"\n             \"      \\\"watchonly\\\": <true>                                   , (boolean, optional, default: false) Stating whether matching outputs should be considered watched even when they're not spendable, only allowed if keys are empty\\n\"\n             \"      \\\"label\\\": <label>                                      , (string, optional, default: '') Label to assign to the address (aka account name, for now), only allowed with internal=false\\n\"\n             \"    }\\n\""
      },
      {
        "sha": "e6dd8b6ddbbf35055fdfd26d5f653a4a7d20d235",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae1b6756c96f78985e88fa5b0c68ccad90f5e259/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae1b6756c96f78985e88fa5b0c68ccad90f5e259/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=ae1b6756c96f78985e88fa5b0c68ccad90f5e259",
        "patch": "@@ -40,7 +40,7 @@ def run_test (self):\n \n         # RPC importmulti -----------------------------------------------\n \n-        # Bitcoin Address\n+        # Bitcoin Address (implicit non-internal)\n         self.log.info(\"Should import an address\")\n         address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n@@ -98,15 +98,16 @@ def run_test (self):\n         assert_equal('timestamp' in address_assert, False)\n \n \n-        # Address + Public key + !Internal\n+        # Address + Public key + !Internal(explicit)\n         self.log.info(\"Should import an address with public key\")\n         address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n             },\n             \"timestamp\": \"now\",\n-            \"pubkeys\": [ address['pubkey'] ]\n+            \"pubkeys\": [ address['pubkey'] ],\n+            \"internal\": False\n         }])\n         assert_equal(result[0]['success'], True)\n         address_assert = self.nodes[1].getaddressinfo(address['address'])"
      }
    ]
  },
  {
    "sha": "a057cc08fddd6503c682a2110092fce259346eae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMDU3Y2MwOGZkZGQ2NTAzYzY4MmEyMTEwMDkyZmNlMjU5MzQ2ZWFl",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2018-12-24T11:12:23Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2018-12-24T11:12:44Z"
      },
      "message": "Merge #14900: [backport] #14679 importmulti: Don't add internal addresses to address book\n\nae1b6756c importmulti: Don't add internal addresses to address book (Gregory Sanders)\n\nPull request description:\n\nTree-SHA512: 749e4864862bc3402a0fad200578804ce6577b4d954fd3e741191b4c941df28d54f98422f90e7fdf9bdf9c01e53ec36cf970e61d22ccc0478771285dd8cef6a0",
      "tree": {
        "sha": "ce7f269cd36cc48dee7b00272d86dc0203af1ecc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ce7f269cd36cc48dee7b00272d86dc0203af1ecc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a057cc08fddd6503c682a2110092fce259346eae",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEygOILLH8BntdOs/k0wARbhyHWj0FAlwgvywACgkQ0wARbhyH\nWj3gMxAAuyirU/d6XkdF3TvYDsV/zGJ7ED9VdWy2v9dgepfWdtzL3LNN3plbFKEw\n7Mw8HggKuGFK4Kw5B9+g1alZfJdn+PRDFaVOuW9+TLAp7ZsnWrKOaBYEIDZ+n2cV\n/Lardi+kpZ6JiO1ALQlnrEcYAs4c0jGlOnyaRigoMoyRRuFDCsi8fLnzIFVP9OLa\nHuym26nrqM/SP7kDuvg0c67Kwuniwd44H5+H+IK4Qz3ATf455pTTyC5HTpJjY96Q\n0VB4WTrKIDteWVjDzCj+w6XdIn9zT3e062yIv8qVJUxTe9gfNJdi9oO/UQ7rTAtz\nnhUd9xYN9SxJREYW88pHsNG1azJtrC2Tj+sN61o56B5L1J7bXLFBKU9KCvRVW5JY\nYfw7jA4EcftsHpMJsKs8iqKU0u/wbpxi4FqDZ9foOt/O2B92odLk8zL0qtSQP+9Y\niSp5JSxCfdshFlF7VShL7sMAyhdez9mnt29sOMUsktglnG8KQ7oNanA3zud7xe0e\niNl8zlU+ZQNLSmjMjjUnH0ith2roccH5B8k7HXM/DuA2mCh6boFpsFdcPcjKg8Sw\ncdVaFZNP/uXLrwKS5v94Uk28d5n/WOkChIJ0sOPUJL69Rei5w780lVx4qJkQ3bn0\nQwYMmkTczjwomutKDtvhZIxzuiIh+/yZFzKm5jdCCvGpliFFeGs=\n=R9GH\n-----END PGP SIGNATURE-----",
        "payload": "tree ce7f269cd36cc48dee7b00272d86dc0203af1ecc\nparent ef70f9b52b851c7997a9f1a0834714e3eebc1fd8\nparent ae1b6756c96f78985e88fa5b0c68ccad90f5e259\nauthor MeshCollider <dobsonsa68@gmail.com> 1545649943 +1300\ncommitter MeshCollider <dobsonsa68@gmail.com> 1545649964 +1300\n\nMerge #14900: [backport] #14679 importmulti: Don't add internal addresses to address book\n\nae1b6756c importmulti: Don't add internal addresses to address book (Gregory Sanders)\n\nPull request description:\n\nTree-SHA512: 749e4864862bc3402a0fad200578804ce6577b4d954fd3e741191b4c941df28d54f98422f90e7fdf9bdf9c01e53ec36cf970e61d22ccc0478771285dd8cef6a0\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a057cc08fddd6503c682a2110092fce259346eae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a057cc08fddd6503c682a2110092fce259346eae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a057cc08fddd6503c682a2110092fce259346eae/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ef70f9b52b851c7997a9f1a0834714e3eebc1fd8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef70f9b52b851c7997a9f1a0834714e3eebc1fd8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ef70f9b52b851c7997a9f1a0834714e3eebc1fd8"
      },
      {
        "sha": "ae1b6756c96f78985e88fa5b0c68ccad90f5e259",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae1b6756c96f78985e88fa5b0c68ccad90f5e259",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ae1b6756c96f78985e88fa5b0c68ccad90f5e259"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 8,
      "deletions": 6
    },
    "files": [
      {
        "sha": "a55c539733cc2369f3eb142b3b808fc980c1fb4f",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a057cc08fddd6503c682a2110092fce259346eae/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a057cc08fddd6503c682a2110092fce259346eae/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=a057cc08fddd6503c682a2110092fce259346eae",
        "patch": "@@ -996,8 +996,9 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n                     throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n                 }\n \n-                // add to address book or update label\n-                if (IsValidDestination(pubkey_dest)) {\n+                // if not internal add to address book or update label\n+                if (!internal) {\n+                    assert(IsValidDestination(pubkey_dest));\n                     pwallet->SetAddressBook(pubkey_dest, label, \"receive\");\n                 }\n \n@@ -1148,7 +1149,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n             \"      \\\"redeemscript\\\": \\\"<script>\\\"                            , (string, optional) Allowed only if the scriptPubKey is a P2SH address or a P2SH scriptPubKey\\n\"\n             \"      \\\"pubkeys\\\": [\\\"<pubKey>\\\", ... ]                         , (array, optional) Array of strings giving pubkeys that must occur in the output or redeemscript\\n\"\n             \"      \\\"keys\\\": [\\\"<key>\\\", ... ]                               , (array, optional) Array of strings giving private keys whose corresponding public keys must occur in the output or redeemscript\\n\"\n-            \"      \\\"internal\\\": <true>                                    , (boolean, optional, default: false) Stating whether matching outputs should be treated as not incoming payments\\n\"\n+            \"      \\\"internal\\\": <true>                                    , (boolean, optional, default: false) Stating whether matching outputs should be treated as not incoming payments aka change\\n\"\n             \"      \\\"watchonly\\\": <true>                                   , (boolean, optional, default: false) Stating whether matching outputs should be considered watched even when they're not spendable, only allowed if keys are empty\\n\"\n             \"      \\\"label\\\": <label>                                      , (string, optional, default: '') Label to assign to the address (aka account name, for now), only allowed with internal=false\\n\"\n             \"    }\\n\""
      },
      {
        "sha": "e6dd8b6ddbbf35055fdfd26d5f653a4a7d20d235",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a057cc08fddd6503c682a2110092fce259346eae/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a057cc08fddd6503c682a2110092fce259346eae/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=a057cc08fddd6503c682a2110092fce259346eae",
        "patch": "@@ -40,7 +40,7 @@ def run_test (self):\n \n         # RPC importmulti -----------------------------------------------\n \n-        # Bitcoin Address\n+        # Bitcoin Address (implicit non-internal)\n         self.log.info(\"Should import an address\")\n         address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n@@ -98,15 +98,16 @@ def run_test (self):\n         assert_equal('timestamp' in address_assert, False)\n \n \n-        # Address + Public key + !Internal\n+        # Address + Public key + !Internal(explicit)\n         self.log.info(\"Should import an address with public key\")\n         address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n             },\n             \"timestamp\": \"now\",\n-            \"pubkeys\": [ address['pubkey'] ]\n+            \"pubkeys\": [ address['pubkey'] ],\n+            \"internal\": False\n         }])\n         assert_equal(result[0]['success'], True)\n         address_assert = self.nodes[1].getaddressinfo(address['address'])"
      }
    ]
  },
  {
    "sha": "e11856515e7c1b7ca4b67041ba51b117df173a11",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMTE4NTY1MTVlN2MxYjdjYTRiNjcwNDFiYTUxYjExN2RmMTczYTEx",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-12-24T12:06:06Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-12-24T12:06:32Z"
      },
      "message": "Merge #14893: 0.17 [Backport 14890] rpc: Avoid creating non-standard raw transactions\n\n46c162df47 rpc: Avoid creating non-standard raw transactions (MarcoFalke)\n\nPull request description:\n\nTree-SHA512: f34678637c8b6559e5c0c2790b682af562479239b92be96e0d41806bade136866f9748487a021eb8c62b6a5027b0a1a2cbdee930243eac93edabef60cbd54eac",
      "tree": {
        "sha": "40f4fc6e29178dd724640995bc1f9a7ce09d2d32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/40f4fc6e29178dd724640995bc1f9a7ce09d2d32"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e11856515e7c1b7ca4b67041ba51b117df173a11",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcIMvJAAoJENLqSFDnUoslHFEP/1Wkl+HLeksRt2x7UjGkjmoj\n3iQWvR37N0eUKlCT1KD05HP8mQ0a7TZq6RGRwGXuiWg4Vx4OaF63rJigAcAlURnm\nK9+OH8yrrGViJ0hfg284RU/CO+bweXkPcFVEugj64rKGCFlJfO1jnUYAK+hWS12f\neI8k4W6d3YCSinQwT/hW8yaxHF1JyJFzd+5DVQVi+lfKjTh2OOyqyw0ZqUSZjmrk\n37Mkh9JK8orMy++QAfsXAIwM0dhc2E2guex+J6hr2VTp89A0oBDrHEOWVI2qMvRT\ndUzybrRlgWYTWUGiQU/pPckyHhuLhRRT/qbC6Hgfw12069KVkBTN5+7xTCzz7rz7\nR3zy6XzDw8kjhli0ctvsz8fbGBuB7/FNy+NGKaeth1x7c8BGa5OcHbHVnmt5buW1\nwylvt/gEgCShNMBm6y99EUKDWHq0AmMFeM8LSbRUDtaej5X8w9kIxklj3eo/+iS9\ndAJ2dGKcX2AlwrzsOlnyuTakT2E2/jfLvyDHoNxDLzE6ZLbT5FsRZvmtk0O0dEz2\n4wwcwfT9JGeWho/jc+uFXcSrYTvF+h7RLurPf1NB3hnrOLCl/0GZZacAMILmpzsA\nsACX4PPOvzcl7VK6fzpZ5sZsNVLBL3SuOhvsEPVBvW/Ll6+Dsbv+awRuNnas43UN\neIw0hDYGwwdeXbcomTqq\n=1ErQ\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwINc3UetleOZslmbTQL6kYVvLNgyrnffqEk0GI0XfZK97CP/wEAUVSx0GmGXW\ntoOKH6yqpgQI8QRcIMvL8Ah29++GYwfQkACD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEDlP+t/9UfxjG7Q4dh1/eD4I8BC7S8jV\nlI53PXG+i7LA0JB9CPEEXCDLy/AIEDbGxMdF4TYAg9/jDS75DI4pKGh0dHBzOi8v\nZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5jb23/8BBs56ssocb0LCLHoGCC\n7YY7CPEEXCDLy/AIT5yLO/lp6SYAg9/jDS75DI4uLWh0dHBzOi8vYWxpY2UuYnRj\nLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ/AQ/cf01KHg7F+haKpcE76jpQjx\nBFwgy8vwCBWaMdOK1e4oAIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMuY2FsZW5k\nYXIub3BlbnRpbWVzdGFtcHMub3Jn\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 40f4fc6e29178dd724640995bc1f9a7ce09d2d32\nparent a057cc08fddd6503c682a2110092fce259346eae\nparent 46c162df478f3b71bef8217f214ccf202576b733\nauthor MarcoFalke <falke.marco@gmail.com> 1545653166 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1545653192 +0100\n\nMerge #14893: 0.17 [Backport 14890] rpc: Avoid creating non-standard raw transactions\n\n46c162df47 rpc: Avoid creating non-standard raw transactions (MarcoFalke)\n\nPull request description:\n\nTree-SHA512: f34678637c8b6559e5c0c2790b682af562479239b92be96e0d41806bade136866f9748487a021eb8c62b6a5027b0a1a2cbdee930243eac93edabef60cbd54eac\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e11856515e7c1b7ca4b67041ba51b117df173a11",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e11856515e7c1b7ca4b67041ba51b117df173a11",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e11856515e7c1b7ca4b67041ba51b117df173a11/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a057cc08fddd6503c682a2110092fce259346eae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a057cc08fddd6503c682a2110092fce259346eae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a057cc08fddd6503c682a2110092fce259346eae"
      },
      {
        "sha": "46c162df478f3b71bef8217f214ccf202576b733",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46c162df478f3b71bef8217f214ccf202576b733",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/46c162df478f3b71bef8217f214ccf202576b733"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 19,
      "deletions": 16
    },
    "files": [
      {
        "sha": "391e744c904d7fa17e62c5c185b7e9122942b25f",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 3,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e11856515e7c1b7ca4b67041ba51b117df173a11/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e11856515e7c1b7ca4b67041ba51b117df173a11/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=e11856515e7c1b7ca4b67041ba51b117df173a11",
        "patch": "@@ -396,7 +396,6 @@ CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniVal\n         rawTx.vin.push_back(in);\n     }\n \n-    std::set<CTxDestination> destinations;\n     if (!outputs_is_obj) {\n         // Translate array of key-value pairs into dict\n         UniValue outputs_dict = UniValue(UniValue::VOBJ);\n@@ -412,8 +411,17 @@ CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniVal\n         }\n         outputs = std::move(outputs_dict);\n     }\n+\n+    // Duplicate checking\n+    std::set<CTxDestination> destinations;\n+    bool has_data{false};\n+\n     for (const std::string& name_ : outputs.getKeys()) {\n         if (name_ == \"data\") {\n+            if (has_data) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, duplicate key: data\");\n+            }\n+            has_data = true;\n             std::vector<unsigned char> data = ParseHexV(outputs[name_].getValStr(), \"Data\");\n \n             CTxOut out(0, CScript() << OP_RETURN << data);\n@@ -465,7 +473,8 @@ static UniValue createrawtransaction(const JSONRPCRequest& request)\n             \"       } \\n\"\n             \"       ,...\\n\"\n             \"     ]\\n\"\n-            \"2. \\\"outputs\\\"               (array, required) a json array with outputs (key-value pairs)\\n\"\n+            \"2. \\\"outputs\\\"               (array, required) a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+            \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n             \"   [\\n\"\n             \"    {\\n\"\n             \"      \\\"address\\\": x.xxx,    (obj, optional) A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\\n\"\n@@ -1690,7 +1699,8 @@ UniValue createpsbt(const JSONRPCRequest& request)\n                             \"       } \\n\"\n                             \"       ,...\\n\"\n                             \"     ]\\n\"\n-                            \"2. \\\"outputs\\\"               (array, required) a json array with outputs (key-value pairs)\\n\"\n+                            \"2. \\\"outputs\\\"               (array, required) a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                            \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n                             \"   [\\n\"\n                             \"    {\\n\"\n                             \"      \\\"address\\\": x.xxx,    (obj, optional) A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\\n\""
      },
      {
        "sha": "943bbf3137c173000a6ea1e56a78f488c0cd35b7",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e11856515e7c1b7ca4b67041ba51b117df173a11/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e11856515e7c1b7ca4b67041ba51b117df173a11/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=e11856515e7c1b7ca4b67041ba51b117df173a11",
        "patch": "@@ -122,9 +122,6 @@ BOOST_AUTO_TEST_CASE(rpc_createraw_op_return)\n {\n     BOOST_CHECK_NO_THROW(CallRPC(\"createrawtransaction [{\\\"txid\\\":\\\"a3b807410df0b60fcb9736768df5823938b2f838694939ba45f3c0a1bff150ed\\\",\\\"vout\\\":0}] {\\\"data\\\":\\\"68656c6c6f776f726c64\\\"}\"));\n \n-    // Allow more than one data transaction output\n-    BOOST_CHECK_NO_THROW(CallRPC(\"createrawtransaction [{\\\"txid\\\":\\\"a3b807410df0b60fcb9736768df5823938b2f838694939ba45f3c0a1bff150ed\\\",\\\"vout\\\":0}] {\\\"data\\\":\\\"68656c6c6f776f726c64\\\",\\\"data\\\":\\\"68656c6c6f776f726c64\\\"}\"));\n-\n     // Key not \"data\" (bad address)\n     BOOST_CHECK_THROW(CallRPC(\"createrawtransaction [{\\\"txid\\\":\\\"a3b807410df0b60fcb9736768df5823938b2f838694939ba45f3c0a1bff150ed\\\",\\\"vout\\\":0}] {\\\"somedata\\\":\\\"68656c6c6f776f726c64\\\"}\"), std::runtime_error);\n "
      },
      {
        "sha": "e02171ec40fe6789c3b52f9fd379ad08cd8822a4",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e11856515e7c1b7ca4b67041ba51b117df173a11/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e11856515e7c1b7ca4b67041ba51b117df173a11/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=e11856515e7c1b7ca4b67041ba51b117df173a11",
        "patch": "@@ -4680,7 +4680,8 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n                             \"       } \\n\"\n                             \"       ,...\\n\"\n                             \"     ]\\n\"\n-                            \"2. \\\"outputs\\\"               (array, required) a json array with outputs (key-value pairs)\\n\"\n+                            \"2. \\\"outputs\\\"               (array, required) a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                            \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n                             \"   [\\n\"\n                             \"    {\\n\"\n                             \"      \\\"address\\\": x.xxx,    (obj, optional) A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\\n\""
      },
      {
        "sha": "c62e04fe14754141aae1d5f0ec43622da0c66c17",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 4,
        "deletions": 9,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e11856515e7c1b7ca4b67041ba51b117df173a11/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e11856515e7c1b7ca4b67041ba51b117df173a11/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=e11856515e7c1b7ca4b67041ba51b117df173a11",
        "patch": "@@ -99,6 +99,8 @@ def run_test(self):\n         assert_raises_rpc_error(-3, \"Amount out of range\", self.nodes[0].createrawtransaction, [], {address: -1})\n         assert_raises_rpc_error(-8, \"Invalid parameter, duplicated address: %s\" % address, self.nodes[0].createrawtransaction, [], multidict([(address, 1), (address, 1)]))\n         assert_raises_rpc_error(-8, \"Invalid parameter, duplicated address: %s\" % address, self.nodes[0].createrawtransaction, [], [{address: 1}, {address: 1}])\n+        assert_raises_rpc_error(-8, \"Invalid parameter, duplicate key: data\", self.nodes[0].createrawtransaction, [], [{\"data\": 'aa'}, {\"data\": \"bb\"}])\n+        assert_raises_rpc_error(-8, \"Invalid parameter, duplicate key: data\", self.nodes[0].createrawtransaction, [], multidict([(\"data\", 'aa'), (\"data\", \"bb\")]))\n         assert_raises_rpc_error(-8, \"Invalid parameter, key-value pair must contain exactly one key\", self.nodes[0].createrawtransaction, [], [{'a': 1, 'b': 2}])\n         assert_raises_rpc_error(-8, \"Invalid parameter, key-value pair not an object as expected\", self.nodes[0].createrawtransaction, [], [['key-value pair1'], ['2']])\n \n@@ -126,19 +128,12 @@ def run_test(self):\n             bytes_to_hex_str(tx.serialize()),\n             self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs=[{address: 99}, {address2: 99}]),\n         )\n-        # Two data outputs\n-        tx.deserialize(BytesIO(hex_str_to_bytes(self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs=multidict([('data', '99'), ('data', '99')])))))\n-        assert_equal(len(tx.vout), 2)\n-        assert_equal(\n-            bytes_to_hex_str(tx.serialize()),\n-            self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs=[{'data': '99'}, {'data': '99'}]),\n-        )\n         # Multiple mixed outputs\n-        tx.deserialize(BytesIO(hex_str_to_bytes(self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs=multidict([(address, 99), ('data', '99'), ('data', '99')])))))\n+        tx.deserialize(BytesIO(hex_str_to_bytes(self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs=multidict([(address, 99), (address2, 99), ('data', '99')])))))\n         assert_equal(len(tx.vout), 3)\n         assert_equal(\n             bytes_to_hex_str(tx.serialize()),\n-            self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs=[{address: 99}, {'data': '99'}, {'data': '99'}]),\n+            self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs=[{address: 99}, {address2: 99}, {'data': '99'}]),\n         )\n \n         for type in [\"bech32\", \"p2sh-segwit\", \"legacy\"]:"
      }
    ]
  },
  {
    "sha": "fd616d8d08c61daf13671fbb744c74eb23980901",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZDYxNmQ4ZDA4YzYxZGFmMTM2NzFmYmI3NDRjNzRlYjIzOTgwOTAx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-12-25T09:20:46Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-12-25T09:21:54Z"
      },
      "message": "doc: Clean out release notes post-0.17.1\n\nTree-SHA512: 0cd6e97156da2dea9a9b557083d8140c17f85f6e718d5fcb73aa67460480b6437b665fad147bf4eacd13570aeb25a29f28c35b7fb0365ae630b2edf05901a431",
      "tree": {
        "sha": "a308169066446759f9e9726def1f865d07a0e2ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a308169066446759f9e9726def1f865d07a0e2ba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fd616d8d08c61daf13671fbb744c74eb23980901",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlwh9rIACgkQHkrtYphs\n0l3PAAgA0G29CDEIb5D/CO8iWMYBybyQ1leeF72SbXDflUfzjZBgXP9TtGhGLEIF\nD8JMFIJgdJQnBBsMbl8yYsTqisucW0B9HFvnrSPGPxAkY0ttFcytE1Y4f/TsDWD3\nJZHu9+bTyoaJR10QDvpQFX1GwD+zjO5L1yEYUJi6VPpEB06BmjMw6dWMXbuCDY+z\nL2ykioTJWRovdnBA/TKHxde+YW9F4kADGoKKp5E1dF/k98bIHm2Ta7brLlnGhRWj\n+8tirtnhHwsolR6U2k/n6dgoRzlor463phJYt6m3DKxjYwq/pZT4kA3bY4/NyXMq\nPztDI3bqpaIvX8D+kkT0HHR3peLmJA==\n=PlkF\n-----END PGP SIGNATURE-----",
        "payload": "tree a308169066446759f9e9726def1f865d07a0e2ba\nparent e11856515e7c1b7ca4b67041ba51b117df173a11\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1545729646 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1545729714 +0100\n\ndoc: Clean out release notes post-0.17.1\n\nTree-SHA512: 0cd6e97156da2dea9a9b557083d8140c17f85f6e718d5fcb73aa67460480b6437b665fad147bf4eacd13570aeb25a29f28c35b7fb0365ae630b2edf05901a431\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd616d8d08c61daf13671fbb744c74eb23980901",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fd616d8d08c61daf13671fbb744c74eb23980901",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd616d8d08c61daf13671fbb744c74eb23980901/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e11856515e7c1b7ca4b67041ba51b117df173a11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e11856515e7c1b7ca4b67041ba51b117df173a11",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e11856515e7c1b7ca4b67041ba51b117df173a11"
      }
    ],
    "stats": {
      "total": 105,
      "additions": 9,
      "deletions": 96
    },
    "files": [
      {
        "sha": "9540a31dacd9b5aad710bafe1ff7ab20a1c9910e",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 9,
        "deletions": 96,
        "changes": 105,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd616d8d08c61daf13671fbb744c74eb23980901/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd616d8d08c61daf13671fbb744c74eb23980901/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=fd616d8d08c61daf13671fbb744c74eb23980901",
        "patch": "@@ -1,6 +1,6 @@\n-Bitcoin Core version 0.17.1 is now available from:\n+Bitcoin Core version 0.17.x is now available from:\n \n-  <https://bitcoincore.org/bin/bitcoin-core-0.17.1/>\n+  <https://bitcoincore.org/bin/bitcoin-core-0.17.x/>\n \n This is a new major version release, including new features, various bugfixes\n and performance improvements, as well as updated translations.\n@@ -21,7 +21,9 @@ shut down (which might take a few minutes for older versions), then run the\n installer (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on Mac)\n or `bitcoind`/`bitcoin-qt` (on Linux).\n \n-If your node has a txindex, the txindex db will be migrated the first time you run 0.17.0 or newer, which may take up to a few hours. Your node will not be functional until this migration completes.\n+If your node has a txindex, the txindex db will be migrated the first time you\n+run 0.17.0 or newer, which may take up to a few hours. Your node will not be\n+functional until this migration completes.\n \n The first time you run version 0.15.0 or newer, your chainstate database will be converted to a\n new format, which will take anywhere from a few minutes to half an hour,\n@@ -58,107 +60,18 @@ support versions of macOS older than 10.10.\n Notable changes\n ===============\n \n-`listtransactions` label support\n---------------------------------\n+(todo)\n \n-The `listtransactions` RPC `account` parameter which was deprecated in 0.17.0\n-and renamed to `dummy` has been un-deprecated and renamed again to `label`.\n-\n-When bitcoin is configured with the `-deprecatedrpc=accounts` setting, specifying\n-a label/account/dummy argument will return both outgoing and incoming\n-transactions. Without the `-deprecatedrpc=accounts` setting, it will only return\n-incoming transactions (because it used to be possible to create transactions\n-spending from specific accounts, but this is no longer possible with labels).\n-\n-When `-deprecatedrpc=accounts` is set, it's possible to pass the empty string \"\"\n-to list transactions that don't have any label. Without\n-`-deprecatedrpc=accounts`, passing the empty string is an error because returning\n-only non-labeled transactions is not generally useful behavior and can cause\n-confusion.\n-\n-0.17.1 change log\n+0.17.x change log\n =================\n \n-### P2P protocol and network code\n-- #14685 `9406502` Fix a deserialization overflow edge case (kazcw)\n-- #14728 `b901578` Fix uninitialized read when stringifying an addrLocal (kazcw)\n-\n-### Wallet\n-- #14441 `5150acc` Restore ability to list incoming transactions by label (jnewbery)\n-- #13546 `91fa15a` Fix use of uninitialized value `bnb_used` in CWallet::CreateTransaction(\u2026) (practicalswift)\n-- #14310 `bb90695` Ensure wallet is unlocked before signing (gustavonalle)\n-- #14690 `5782fdc` Throw error if CPubKey is invalid during PSBT keypath serialization (instagibbs)\n-- #14852 `2528443` backport: [tests] Add `wallet_balance.py` (MarcoFalke)\n-- #14196 `3362a95` psbt: always drop the unnecessary utxo and convert non-witness utxo to witness when necessary (achow101)\n-- #14588 `70ee1f8` Refactor PSBT signing logic to enforce invariant and fix signing bug (gwillen)\n-- #14424 `89a9a9d` Stop requiring imported pubkey to sign non-PKH schemes (sipa, MeshCollider)\n-\n-### RPC and other APIs\n-- #14417 `fb9ad04` Fix listreceivedbyaddress not taking address as a string (etscrivner)\n-- #14596 `de5e48a` Bugfix: RPC: Add `address_type` named param for createmultisig (luke-jr)\n-- #14618 `9666dba` Make HTTP RPC debug logging more informative (practicalswift)\n-- #14197 `7bee414` [psbt] Convert non-witness UTXOs to witness if witness sig created (achow101)\n-- #14377 `a3fe125` Check that a separator is found for psbt inputs, outputs, and global map (achow101)\n-- #14356 `7a590d8` Fix converttopsbt permitsigdata arg, add basic test (instagibbs)\n-- #14453 `75b5d8c` Fix wallet unload during walletpassphrase timeout (promag)\n-\n-### GUI\n-- #14403 `0242b5a` Revert \"Force TLS1.0+ for SSL connections\" (real-or-random)\n-- #14593 `df5131b` Explicitly disable \"Dark Mode\" appearance on macOS (fanquake)\n-\n-### Build system\n-- #14647 `7edebed` Remove illegal spacing in darwin.mk (ch4ot1c)\n-- #14698 `ec71f06` Add bitcoin-tx.exe into Windows installer (ken2812221)\n-\n-### Tests and QA\n-- #13965 `29899ec` Fix extended functional tests fail (ken2812221)\n-- #14011 `9461f98` Disable wallet and address book Qt tests on macOS minimal platform (ryanofsky)\n-- #14180 `86fadee` Run all tests even if wallet is not compiled (MarcoFalke)\n-- #14122 `8bc1bad` Test `rpc_help.py` failed: Check whether ZMQ is enabled or not (Kvaciral)\n-- #14101 `96dc936` Use named args in validation acceptance tests (MarcoFalke)\n-- #14020 `24d796a` Add tests for RPC help (promag)\n-- #14052 `7ff32a6` Add some actual witness in `rpc_rawtransaction` (MarcoFalke)\n-- #14215 `b72fbab` Use correct python index slices in example test (sdaftuar)\n-- #14024 `06544fa` Add `TestNode::assert_debug_log` (MarcoFalke)\n-- #14658 `60f7a97` Add test to ensure node can generate all rpc help texts at runtime (MarcoFalke)\n-- #14632 `96f15e8` Fix a comment (fridokus)\n-- #14700 `f9db08e` Avoid race in `p2p_invalid_block` by waiting for the block request (MarcoFalke)\n-- #14845 `67225e2` Add `wallet_balance.py` (jnewbery)\n-\n-### Documentation\n-- #14161 `5f51fd6` doc/descriptors.md tweaks (ryanofsky)\n-- #14276 `85aacc4` Add autogen.sh in ARM Cross-compilation (walterwhite81)\n+(todo)\n \n Credits\n =======\n \n Thanks to everyone who directly contributed to this release:\n \n-- Andrew Chow\n-- Chun Kuan Lee\n-- David A. Harding\n-- Eric Scrivner\n-- fanquake\n-- fridokus\n-- Glenn Willen\n-- Gregory Sanders\n-- gustavonalle\n-- John Newbery\n-- Jon Layton\n-- Jonas Schnelli\n-- Jo\u00e3o Barbosa\n-- Kaz Wesley\n-- Kvaciral\n-- Luke Dashjr\n-- MarcoFalke\n-- MeshCollider\n-- Pieter Wuille\n-- practicalswift\n-- Russell Yanofsky\n-- Sjors Provoost\n-- Suhas Daftuar\n-- Tim Ruffing\n-- Walter\n-- Wladimir J. van der Laan\n+(todo)\n \n As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/)."
      }
    ]
  },
  {
    "sha": "b138b4abffd368b6fe2015147d144699ca975109",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMTM4YjRhYmZmZDM2OGI2ZmUyMDE1MTQ3ZDE0NDY5OWNhOTc1MTA5",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-12-13T04:05:45Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-12-29T09:31:34Z"
      },
      "message": "doc: update NetBSD build instructions for 8.0\n\nGithub-Pull: #14944\nRebased-From: be5ca825a38bc71c3a79ef35335e9c2e597ad225",
      "tree": {
        "sha": "f500ebf009048080e838bede342de5d1d5ffd9e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f500ebf009048080e838bede342de5d1d5ffd9e6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b138b4abffd368b6fe2015147d144699ca975109",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAlwnPxgACgkQLuufXMCV\nJsE6qxAAiR7evJ/xy+b8c52DLTqe3jZG6PBKrwXrvOpP+TyR68MyUe/Rd/d5OjbQ\n+q/WrE4zq37YRZNBtvnPemxNWuJpHvSbdH72eOm7JIk5/9WG1yXYW9ep+3uOfv03\nHce1lfEhtHpnFVkpePa9QeSt/8VJyDT3j1+WAmyxV+0AtyMfXSlPA+YJS1iSA06V\nfm4Bx2lvBxSw/xnJL1ujMxsbKT7z9Zby7616jfYX3nhbn0GLfnFbwgpzz+wCTpuG\ngQY/iq+H2JS6u0AYOVpr/Iic0G9MqzcpevCDSz89n8Vz/hIiG72paJL+htm3Ke4o\ni8aXgquZ8GDysz5r6JwewNuaQdaWU8MOjmQacrjvf8GVlls4AB8njCd1ra2UEAe0\nqt2TcPYMk0Jatdh0VOOh74xah6H08phDP8FSNXk20C19yuIfzgog+v43u/IY1Ng6\nzDi0pJnUG2hiFV812A/Pjr7rS3ffcBRt3LSK5zxWpxETGCwLB81rvdOKW3/XloIH\nX5ung90Ok4KsWzFBjb3cakH6MJPwJO4gH+97d59WJt+F/JAix2L6OG6CTlUpFegH\ngziqmmnuSK+MtSamnIT27FgHAjwt3ljk7hTezRSyE2zxNGtNa7thAf5jhGF0COts\nuwVwkiU4vXquqFBu1bLbRPJYM7QQBprgwr6eY+VuH265Bu5vNgg=\n=d3wA\n-----END PGP SIGNATURE-----",
        "payload": "tree f500ebf009048080e838bede342de5d1d5ffd9e6\nparent fd616d8d08c61daf13671fbb744c74eb23980901\nauthor fanquake <fanquake@gmail.com> 1544673945 +0800\ncommitter fanquake <fanquake@gmail.com> 1546075894 +0800\n\ndoc: update NetBSD build instructions for 8.0\n\nGithub-Pull: #14944\nRebased-From: be5ca825a38bc71c3a79ef35335e9c2e597ad225\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b138b4abffd368b6fe2015147d144699ca975109",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b138b4abffd368b6fe2015147d144699ca975109",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b138b4abffd368b6fe2015147d144699ca975109/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fd616d8d08c61daf13671fbb744c74eb23980901",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd616d8d08c61daf13671fbb744c74eb23980901",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fd616d8d08c61daf13671fbb744c74eb23980901"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 41,
      "deletions": 11
    },
    "files": [
      {
        "sha": "ab422f6aa7e90056bea6a789e6b1f6b940600133",
        "filename": "doc/build-netbsd.md",
        "status": "modified",
        "additions": 41,
        "deletions": 11,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b138b4abffd368b6fe2015147d144699ca975109/doc/build-netbsd.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b138b4abffd368b6fe2015147d144699ca975109/doc/build-netbsd.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-netbsd.md?ref=b138b4abffd368b6fe2015147d144699ca975109",
        "patch": "@@ -1,6 +1,6 @@\n NetBSD build guide\n ======================\n-(updated for NetBSD 7.0)\n+(updated for NetBSD 8.0)\n \n This guide describes how to build bitcoind and command-line utilities on NetBSD.\n \n@@ -15,35 +15,65 @@ You will need the following modules, which can be installed via pkgsrc or pkgin:\n autoconf\n automake\n boost\n-db4\n git\n gmake\n libevent\n libtool\n-python27\n-```\n+pkg-config\n+python37\n \n-Download the source code:\n-```\n-git clone https://github.com/bitcoin/bitcoin\n+git clone https://github.com/bitcoin/bitcoin.git\n ```\n \n See [dependencies.md](dependencies.md) for a complete overview.\n \n+### Building BerkeleyDB\n+\n+BerkeleyDB is only necessary for the wallet functionality. To skip this, pass\n+`--disable-wallet` to `./configure` and skip to the next section.\n+\n+It is recommended to use Berkeley DB 4.8. You cannot use the BerkeleyDB library\n+from ports, for the same reason as boost above (g++/libstd++ incompatibility).\n+If you have to build it yourself, you can use [the installation script included\n+in contrib/](/contrib/install_db4.sh) like so:\n+\n+```shell\n+./contrib/install_db4.sh `pwd`\n+```\n+\n+from the root of the repository. Then set `BDB_PREFIX` for the next section:\n+\n+```shell\n+export BDB_PREFIX=\"$PWD/db4\"\n+```\n+\n ### Building Bitcoin Core\n \n **Important**: Use `gmake` (the non-GNU `make` will exit with an error).\n \n With wallet:\n ```\n ./autogen.sh\n-./configure CPPFLAGS=\"-I/usr/pkg/include\" LDFLAGS=\"-L/usr/pkg/lib\" BOOST_CPPFLAGS=\"-I/usr/pkg/include\" BOOST_LDFLAGS=\"-L/usr/pkg/lib\"\n-gmake\n+./configure --with-gui=no CPPFLAGS=\"-I/usr/pkg/include\" \\\n+    LDFLAGS=\"-L/usr/pkg/lib\" \\\n+    BOOST_CPPFLAGS=\"-I/usr/pkg/include\" \\\n+    BOOST_LDFLAGS=\"-L/usr/pkg/lib\" \\\n+    BDB_LIBS=\"-L${BDB_PREFIX}/lib -ldb_cxx-4.8\" \\\n+    BDB_CFLAGS=\"-I${BDB_PREFIX}/include\"\n ```\n \n Without wallet:\n ```\n ./autogen.sh\n-./configure --disable-wallet CPPFLAGS=\"-I/usr/pkg/include\" LDFLAGS=\"-L/usr/pkg/lib\" BOOST_CPPFLAGS=\"-I/usr/pkg/include\" BOOST_LDFLAGS=\"-L/usr/pkg/lib\"\n-gmake\n+./configure --with-gui=no --disable-wallet \\\n+    CPPFLAGS=\"-I/usr/pkg/include\" \\\n+    LDFLAGS=\"-L/usr/pkg/lib\" \\\n+    BOOST_CPPFLAGS=\"-I/usr/pkg/include\" \\\n+    BOOST_LDFLAGS=\"-L/usr/pkg/lib\"\n+```\n+\n+Build and run the tests:\n+```bash\n+gmake # use -jX here for parallelism\n+gmake check\n ```"
      }
    ]
  },
  {
    "sha": "fa941016e8c19cb9c750bd776eed7481d8a7e32c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTk0MTAxNmU4YzE5Y2I5Yzc1MGJkNzc2ZWVkNzQ4MWQ4YTdlMzJj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-12-29T12:45:14Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-12-29T12:45:23Z"
      },
      "message": "Merge #15055: [0.17] Backport #14944\n\nb138b4abff doc: update NetBSD build instructions for 8.0 (fanquake)\n\nPull request description:\n\n  Backports #14944 to the 0.17 branch.\n\nTree-SHA512: b169ff9c42cca3573b972b43adaf0556d5a198a755cd4c1a69c4c557b7cab6cf977c24d575c8802869d157d2bb0dff76c5d7f1e7647a58a4670f252614dab421",
      "tree": {
        "sha": "f500ebf009048080e838bede342de5d1d5ffd9e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f500ebf009048080e838bede342de5d1d5ffd9e6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa941016e8c19cb9c750bd776eed7481d8a7e32c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJcJ2xjAAoJENLqSFDnUoslP8EQAJvBtiogMT8DcCVNVaGcYTlO\nIGMFYTAaWmTnImFWmftVBQg57FyDcacSXLy/qwIfWdic/G2wzQkpDhuYQ2GNQk1O\n31i7ujvQxbp70xGgMGEsurkoOaH7eTeHRXny6+AxvnEjjSol/F5F+h0YMiXS2w+U\nhSfg/2u77Me5pYCtXWeFbz4go8o6FaVUanys/eNA0MWL8Wxkas+1IQ2Fc02wtbmy\ni9SZzIT0Hcad8vKLwZFJIHxaky1C//y51JJe+wC0qN7t9aazpHZC204Hyrq6UHpx\nwfCo+7CPn8a0gOHGAgWv4xF2CNa61MyaSGuZY6C20l/ydzvPx7p8S9yzEOV6H/K1\nSRuJOZdC/wsVsEz+fRulWUdOWdEGehD0irNcEeT2ox5uZyj+16JBLBkto+8ulRLc\nBs4kP8qZWaC3Wog7NXqietP25Z+VJ1DyVB9HMB8BQyv9ekRHIYsSJwe0VVdZ/xII\nICL3xwwlM7/SL/JbxVz+ISt1b+gBZOmrPbZ8qiiT7GCB174CnWcWOXfRVA8oA4rD\nTYSClV/L+Btj4xT8BcDLgNWNs11+ixJ+kRKD81n7Oy/2cp0q35AL/tCTkuRZFeFt\nSvn5hcLZYChjcquSocZWMrCtjjzTTFO92Y6Yh+fpT2mHs39iiqTHWIietZwlq1z7\ngD112QI+1Uxkah6s4VBI\n=WEgN\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIEkJLJugj7WGfVWWj7Ofv7dLZ+PLkyKA+t+yoyIUp58+CP/wECQC1FpbNAAc\nZkEPS/EmB6QI8QRcJ2xm8AijsxmaUzYfQgCD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEHjmmDT3L36vyPZzIyHK3wsI8BALIWJE\nxCa8LgV671Jc4eIYCPEEXCdsZvAIzM4Hc7O3XysAg9/jDS75DI4pKGh0dHBzOi8v\nZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5jb23/8BCzdmvqFWCZJoGVZ5/o\n9Ld5CPAgOQCOaZ6Qzdws+EC8AlI1VBTJ6sqTCosyF4q9khHlHkwI8QRcJ2xn8AiL\nMSktWEkrMACD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIub3Bl\nbnRpbWVzdGFtcHMub3Jn8BDSk1Uo/tXrrcACE0g8VSg4CPEEXCdsZ/AIxg3RkV0W\nX7MAg9/jDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0\nYW1wcy5vcmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree f500ebf009048080e838bede342de5d1d5ffd9e6\nparent fd616d8d08c61daf13671fbb744c74eb23980901\nparent b138b4abffd368b6fe2015147d144699ca975109\nauthor MarcoFalke <falke.marco@gmail.com> 1546087514 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1546087523 +0100\n\nMerge #15055: [0.17] Backport #14944\n\nb138b4abff doc: update NetBSD build instructions for 8.0 (fanquake)\n\nPull request description:\n\n  Backports #14944 to the 0.17 branch.\n\nTree-SHA512: b169ff9c42cca3573b972b43adaf0556d5a198a755cd4c1a69c4c557b7cab6cf977c24d575c8802869d157d2bb0dff76c5d7f1e7647a58a4670f252614dab421\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa941016e8c19cb9c750bd776eed7481d8a7e32c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa941016e8c19cb9c750bd776eed7481d8a7e32c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa941016e8c19cb9c750bd776eed7481d8a7e32c/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fd616d8d08c61daf13671fbb744c74eb23980901",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd616d8d08c61daf13671fbb744c74eb23980901",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fd616d8d08c61daf13671fbb744c74eb23980901"
      },
      {
        "sha": "b138b4abffd368b6fe2015147d144699ca975109",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b138b4abffd368b6fe2015147d144699ca975109",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b138b4abffd368b6fe2015147d144699ca975109"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 41,
      "deletions": 11
    },
    "files": [
      {
        "sha": "ab422f6aa7e90056bea6a789e6b1f6b940600133",
        "filename": "doc/build-netbsd.md",
        "status": "modified",
        "additions": 41,
        "deletions": 11,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa941016e8c19cb9c750bd776eed7481d8a7e32c/doc/build-netbsd.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa941016e8c19cb9c750bd776eed7481d8a7e32c/doc/build-netbsd.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-netbsd.md?ref=fa941016e8c19cb9c750bd776eed7481d8a7e32c",
        "patch": "@@ -1,6 +1,6 @@\n NetBSD build guide\n ======================\n-(updated for NetBSD 7.0)\n+(updated for NetBSD 8.0)\n \n This guide describes how to build bitcoind and command-line utilities on NetBSD.\n \n@@ -15,35 +15,65 @@ You will need the following modules, which can be installed via pkgsrc or pkgin:\n autoconf\n automake\n boost\n-db4\n git\n gmake\n libevent\n libtool\n-python27\n-```\n+pkg-config\n+python37\n \n-Download the source code:\n-```\n-git clone https://github.com/bitcoin/bitcoin\n+git clone https://github.com/bitcoin/bitcoin.git\n ```\n \n See [dependencies.md](dependencies.md) for a complete overview.\n \n+### Building BerkeleyDB\n+\n+BerkeleyDB is only necessary for the wallet functionality. To skip this, pass\n+`--disable-wallet` to `./configure` and skip to the next section.\n+\n+It is recommended to use Berkeley DB 4.8. You cannot use the BerkeleyDB library\n+from ports, for the same reason as boost above (g++/libstd++ incompatibility).\n+If you have to build it yourself, you can use [the installation script included\n+in contrib/](/contrib/install_db4.sh) like so:\n+\n+```shell\n+./contrib/install_db4.sh `pwd`\n+```\n+\n+from the root of the repository. Then set `BDB_PREFIX` for the next section:\n+\n+```shell\n+export BDB_PREFIX=\"$PWD/db4\"\n+```\n+\n ### Building Bitcoin Core\n \n **Important**: Use `gmake` (the non-GNU `make` will exit with an error).\n \n With wallet:\n ```\n ./autogen.sh\n-./configure CPPFLAGS=\"-I/usr/pkg/include\" LDFLAGS=\"-L/usr/pkg/lib\" BOOST_CPPFLAGS=\"-I/usr/pkg/include\" BOOST_LDFLAGS=\"-L/usr/pkg/lib\"\n-gmake\n+./configure --with-gui=no CPPFLAGS=\"-I/usr/pkg/include\" \\\n+    LDFLAGS=\"-L/usr/pkg/lib\" \\\n+    BOOST_CPPFLAGS=\"-I/usr/pkg/include\" \\\n+    BOOST_LDFLAGS=\"-L/usr/pkg/lib\" \\\n+    BDB_LIBS=\"-L${BDB_PREFIX}/lib -ldb_cxx-4.8\" \\\n+    BDB_CFLAGS=\"-I${BDB_PREFIX}/include\"\n ```\n \n Without wallet:\n ```\n ./autogen.sh\n-./configure --disable-wallet CPPFLAGS=\"-I/usr/pkg/include\" LDFLAGS=\"-L/usr/pkg/lib\" BOOST_CPPFLAGS=\"-I/usr/pkg/include\" BOOST_LDFLAGS=\"-L/usr/pkg/lib\"\n-gmake\n+./configure --with-gui=no --disable-wallet \\\n+    CPPFLAGS=\"-I/usr/pkg/include\" \\\n+    LDFLAGS=\"-L/usr/pkg/lib\" \\\n+    BOOST_CPPFLAGS=\"-I/usr/pkg/include\" \\\n+    BOOST_LDFLAGS=\"-L/usr/pkg/lib\"\n+```\n+\n+Build and run the tests:\n+```bash\n+gmake # use -jX here for parallelism\n+gmake check\n ```"
      }
    ]
  },
  {
    "sha": "23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMzMzMGY2ZTQwNmJjOWFmZDFmYTU2MGUxZThiY2RiYmFiMjNhNGE0",
    "commit": {
      "author": {
        "name": "NullFunctor",
        "email": "nullfunctor@bitcoinv.org",
        "date": "2018-12-30T16:28:38Z"
      },
      "committer": {
        "name": "NullFunctor",
        "email": "nullfunctor@bitcoinv.org",
        "date": "2018-12-30T16:28:38Z"
      },
      "message": "new VBR feature",
      "tree": {
        "sha": "ff1e24ea57ea939b2a3ce0a4c9471bf26ddb7474",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ff1e24ea57ea939b2a3ce0a4c9471bf26ddb7474"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "fa941016e8c19cb9c750bd776eed7481d8a7e32c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa941016e8c19cb9c750bd776eed7481d8a7e32c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa941016e8c19cb9c750bd776eed7481d8a7e32c"
      }
    ],
    "stats": {
      "total": 4355,
      "additions": 1150,
      "deletions": 3205
    },
    "files": [
      {
        "sha": "f5ade3f734f118c31511205d87e991501b303b5c",
        "filename": ".gitignore",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.gitignore?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -36,6 +36,8 @@ src/config/stamp-h1\n share/setup.nsi\n share/qt/Info.plist\n \n+db4*\n+\n src/univalue/gen\n \n src/qt/*.moc\n@@ -110,6 +112,7 @@ win32-build\n test/config.ini\n test/cache/*\n \n+\n !src/leveldb*/Makefile\n \n /doc/doxygen/"
      },
      {
        "sha": "fb4b53bacdce22025480ee0e9de6fd3a7640a0cc",
        "filename": ".vscode/launch.json",
        "status": "added",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/.vscode/launch.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/.vscode/launch.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.vscode/launch.json?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -0,0 +1,30 @@\n+{\n+    // Use IntelliSense to learn about possible attributes.\n+    // Hover to view descriptions of existing attributes.\n+    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\n+    \"version\": \"0.2.0\",\n+    \"configurations\": [\n+\n+        {\n+            \"name\": \"(gdb) Launch\",\n+            \"type\": \"cppdbg\",\n+            \"request\": \"launch\",\n+            \"program\": \"${workspaceFolder}/src/qt/bitcoin-qt\",\n+            \"args\": [],\n+            \"stopAtEntry\": false,\n+            \"cwd\": \"${workspaceFolder}\",\n+            \"environment\": [],\n+            \"externalConsole\": false,\n+            \"MIMode\": \"gdb\",\n+            \"setupCommands\": [\n+                {\n+                    \"description\": \"Enable pretty-printing for gdb\",\n+                    \"text\": \"-enable-pretty-printing\",\n+                    \"ignoreFailures\": true\n+                }\n+            ],\n+            \"MIMode\":\"lldb\",\n+            \"miDebuggerPath\": \"/Applications/Xcode.app/Contents/Developer/usr/bin/lldb-mi\",\n+        }\n+    ]\n+}\n\\ No newline at end of file"
      },
      {
        "sha": "d82636a30fba19e88286bc61d2954df3ca3584bd",
        "filename": ".vscode/settings.json",
        "status": "added",
        "additions": 67,
        "deletions": 0,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/.vscode/settings.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/.vscode/settings.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.vscode/settings.json?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -0,0 +1,67 @@\n+{\n+    \"files.associations\": {\n+        \"cctype\": \"cpp\",\n+        \"clocale\": \"cpp\",\n+        \"cmath\": \"cpp\",\n+        \"csignal\": \"cpp\",\n+        \"cstdarg\": \"cpp\",\n+        \"cstddef\": \"cpp\",\n+        \"cstdio\": \"cpp\",\n+        \"cstdlib\": \"cpp\",\n+        \"cstring\": \"cpp\",\n+        \"ctime\": \"cpp\",\n+        \"cwchar\": \"cpp\",\n+        \"cwctype\": \"cpp\",\n+        \"array\": \"cpp\",\n+        \"atomic\": \"cpp\",\n+        \"hash_map\": \"cpp\",\n+        \"hash_set\": \"cpp\",\n+        \"*.tcc\": \"cpp\",\n+        \"bitset\": \"cpp\",\n+        \"chrono\": \"cpp\",\n+        \"complex\": \"cpp\",\n+        \"condition_variable\": \"cpp\",\n+        \"cstdint\": \"cpp\",\n+        \"deque\": \"cpp\",\n+        \"list\": \"cpp\",\n+        \"unordered_map\": \"cpp\",\n+        \"unordered_set\": \"cpp\",\n+        \"vector\": \"cpp\",\n+        \"exception\": \"cpp\",\n+        \"fstream\": \"cpp\",\n+        \"functional\": \"cpp\",\n+        \"future\": \"cpp\",\n+        \"initializer_list\": \"cpp\",\n+        \"iomanip\": \"cpp\",\n+        \"iosfwd\": \"cpp\",\n+        \"iostream\": \"cpp\",\n+        \"istream\": \"cpp\",\n+        \"limits\": \"cpp\",\n+        \"memory\": \"cpp\",\n+        \"mutex\": \"cpp\",\n+        \"new\": \"cpp\",\n+        \"numeric\": \"cpp\",\n+        \"optional\": \"cpp\",\n+        \"ostream\": \"cpp\",\n+        \"ratio\": \"cpp\",\n+        \"sstream\": \"cpp\",\n+        \"stdexcept\": \"cpp\",\n+        \"streambuf\": \"cpp\",\n+        \"string_view\": \"cpp\",\n+        \"system_error\": \"cpp\",\n+        \"thread\": \"cpp\",\n+        \"cinttypes\": \"cpp\",\n+        \"type_traits\": \"cpp\",\n+        \"tuple\": \"cpp\",\n+        \"typeindex\": \"cpp\",\n+        \"typeinfo\": \"cpp\",\n+        \"utility\": \"cpp\",\n+        \"strstream\": \"cpp\",\n+        \"__config\": \"cpp\",\n+        \"__nullptr\": \"cpp\",\n+        \"algorithm\": \"cpp\",\n+        \"cfenv\": \"cpp\",\n+        \"hashtable\": \"cpp\",\n+        \"string\": \"cpp\"\n+    }\n+}\n\\ No newline at end of file"
      },
      {
        "sha": "75e5fb5702fdf2a41c4cf83615751c66aeca185c",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -1,14 +1,14 @@\n dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n AC_PREREQ([2.60])\n define(_CLIENT_VERSION_MAJOR, 0)\n-define(_CLIENT_VERSION_MINOR, 17)\n+define(_CLIENT_VERSION_MINOR, 1)\n define(_CLIENT_VERSION_REVISION, 1)\n define(_CLIENT_VERSION_BUILD, 0)\n define(_CLIENT_VERSION_IS_RELEASE, true)\n define(_COPYRIGHT_YEAR, 2018)\n define(_COPYRIGHT_HOLDERS,[The %s developers])\n-define(_COPYRIGHT_HOLDERS_SUBSTITUTION,[[Bitcoin Core]])\n-AC_INIT([Bitcoin Core],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[https://github.com/bitcoin/bitcoin/issues],[bitcoin],[https://bitcoincore.org/])\n+define(_COPYRIGHT_HOLDERS_SUBSTITUTION,[[BitcoinV Core]])\n+AC_INIT([BitcoinV Core],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[https://github.com/bitcoinVBR/bitcoinV/issues],[bitcoin],[https://bitcoinv.org/])\n AC_CONFIG_SRCDIR([src/validation.cpp])\n AC_CONFIG_HEADERS([src/config/bitcoin-config.h])\n AC_CONFIG_AUX_DIR([build-aux])"
      },
      {
        "sha": "72d6e9d2cb628dd899452529087b7bccefe731d7",
        "filename": "contrib/init/bitcoind.conf",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/contrib/init/bitcoind.conf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/contrib/init/bitcoind.conf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/init/bitcoind.conf?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -1,4 +1,4 @@\n-description \"Bitcoin Core Daemon\"\n+description \"BitcoinV Core Daemon\"\n \n start on runlevel [2345]\n stop on starting rc RUNLEVEL=[016]"
      },
      {
        "sha": "c4dec2f7243cd0289429742c4e4537c7d4aefb2b",
        "filename": "contrib/init/bitcoind.openrc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/contrib/init/bitcoind.openrc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/contrib/init/bitcoind.openrc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/init/bitcoind.openrc?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -18,7 +18,7 @@ BITCOIND_BIN=${BITCOIND_BIN:-/usr/bin/bitcoind}\n BITCOIND_NICE=${BITCOIND_NICE:-${NICELEVEL:-0}}\n BITCOIND_OPTS=\"${BITCOIND_OPTS:-${BITCOIN_OPTS}}\"\n \n-name=\"Bitcoin Core Daemon\"\n+name=\"BitcoinV Core Daemon\"\n description=\"Bitcoin cryptocurrency P2P network daemon\"\n \n command=\"/usr/bin/bitcoind\""
      },
      {
        "sha": "43e0b3a6176545edfa2897dbacecfc0ebb450f8a",
        "filename": "contrib/qos/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/contrib/qos/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/contrib/qos/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/qos/README.md?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -1,5 +1,5 @@\n ### QoS (Quality of service) ###\n \n-This is a Linux bash script that will set up tc to limit the outgoing bandwidth for connections to the Bitcoin network. It limits outbound TCP traffic with a source or destination port of 8333, but not if the destination IP is within a LAN.\n+This is a Linux bash script that will set up tc to limit the outgoing bandwidth for connections to the Bitcoin network. It limits outbound TCP traffic with a source or destination port of 9333, but not if the destination IP is within a LAN.\n \n This means one can have an always-on bitcoind instance running, and another local bitcoind/bitcoin-qt instance which connects to this node and receives blocks from it."
      },
      {
        "sha": "3978f75eeec37aa84d35e68e7ce2ae6f3a0f6d31",
        "filename": "contrib/qos/tc.sh",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/contrib/qos/tc.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/contrib/qos/tc.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/qos/tc.sh?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -45,16 +45,16 @@ fi\n #\tret=$?\n #done\n \n-#limit outgoing traffic to and from port 8333. but not when dealing with a host on the local network\n+#limit outgoing traffic to and from port 9333. but not when dealing with a host on the local network\n #\t(defined by $LOCALNET_V4 and $LOCALNET_V6)\n #\t--set-mark marks packages matching these criteria with the number \"2\" (v4)\n #\t--set-mark marks packages matching these criteria with the number \"4\" (v6)\n #\tthese packets are filtered by the tc filter with \"handle 2\"\n #\tthis filter sends the packages into the 1:11 class, and this class is limited to ${LIMIT}\n-iptables -t mangle -A OUTPUT -p tcp -m tcp --dport 8333 ! -d ${LOCALNET_V4} -j MARK --set-mark 0x2\n-iptables -t mangle -A OUTPUT -p tcp -m tcp --sport 8333 ! -d ${LOCALNET_V4} -j MARK --set-mark 0x2\n+iptables -t mangle -A OUTPUT -p tcp -m tcp --dport 9333 ! -d ${LOCALNET_V4} -j MARK --set-mark 0x2\n+iptables -t mangle -A OUTPUT -p tcp -m tcp --sport 9333 ! -d ${LOCALNET_V4} -j MARK --set-mark 0x2\n \n if [ ! -z \"${LOCALNET_V6}\" ] ; then\n-\tip6tables -t mangle -A OUTPUT -p tcp -m tcp --dport 8333 ! -d ${LOCALNET_V6} -j MARK --set-mark 0x4\n-\tip6tables -t mangle -A OUTPUT -p tcp -m tcp --sport 8333 ! -d ${LOCALNET_V6} -j MARK --set-mark 0x4\n+\tip6tables -t mangle -A OUTPUT -p tcp -m tcp --dport 9333 ! -d ${LOCALNET_V6} -j MARK --set-mark 0x4\n+\tip6tables -t mangle -A OUTPUT -p tcp -m tcp --sport 9333 ! -d ${LOCALNET_V6} -j MARK --set-mark 0x4\n fi"
      },
      {
        "sha": "6c89ba42893412b6844883068be94074e7080ae0",
        "filename": "contrib/seeds/generate-seeds.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/contrib/seeds/generate-seeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/contrib/seeds/generate-seeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/generate-seeds.py?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -128,10 +128,10 @@ def main():\n     g.write(' * IPv4 as well as onion addresses are wrapped inside an IPv6 address accordingly.\\n')\n     g.write(' */\\n')\n     with open(os.path.join(indir,'nodes_main.txt'), 'r', encoding=\"utf8\") as f:\n-        process_nodes(g, f, 'pnSeed6_main', 8333)\n+        process_nodes(g, f, 'pnSeed6_main', 9333)\n     g.write('\\n')\n     with open(os.path.join(indir,'nodes_test.txt'), 'r', encoding=\"utf8\") as f:\n-        process_nodes(g, f, 'pnSeed6_test', 18333)\n+        process_nodes(g, f, 'pnSeed6_test', 19333)\n     g.write('#endif // BITCOIN_CHAINPARAMSSEEDS_H\\n')\n \n if __name__ == '__main__':"
      },
      {
        "sha": "31b9eb08744d1f79dc95a540a377b79ddbb016ea",
        "filename": "contrib/seeds/nodes_main.txt",
        "status": "modified",
        "additions": 1,
        "deletions": 1268,
        "changes": 1269,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/contrib/seeds/nodes_main.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/contrib/seeds/nodes_main.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/nodes_main.txt?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -1,1268 +1 @@\n-2.132.100.47:8333\n-5.1.97.4:8333\n-5.39.174.116:8333\n-5.45.79.14:8333\n-5.53.16.133:8333\n-5.101.139.166:8333\n-5.178.78.139:8333\n-5.189.176.17:8333\n-5.228.64.71:8333\n-8.18.38.122:8333\n-13.115.96.63:8333\n-14.2.124.84:8333\n-14.3.170.1:8333\n-23.94.28.250:8333\n-23.111.172.106:8333\n-23.125.224.84:8333\n-23.152.0.108:8333\n-23.175.0.222:8333\n-23.229.16.234:8333\n-23.233.6.70:8333\n-24.142.34.253:8333\n-24.171.203.87:8333\n-24.188.200.170:8333\n-24.216.65.41:8333\n-24.227.69.146:8333\n-27.33.11.193:8333\n-31.24.11.139:8333\n-31.28.10.13:8333\n-31.165.17.164:8333\n-31.179.204.142:8333\n-31.186.96.186:8333\n-31.210.172.21:8333\n-31.211.102.129:62734\n-34.217.122.178:8333\n-35.230.64.29:8333\n-35.231.225.42:8333\n-36.3.172.13:8333\n-36.251.163.42:8333\n-37.136.97.246:8333\n-37.153.1.150:8333\n-37.153.1.157:8333\n-37.228.92.110:8333\n-37.252.14.22:8333\n-38.27.101.224:8333\n-38.102.134.85:8333\n-38.104.225.30:8333\n-43.229.76.38:8333\n-45.40.132.57:8333\n-45.45.34.122:8333\n-45.48.177.222:8333\n-46.19.34.236:8333\n-46.28.66.196:8333\n-46.28.204.21:8333\n-46.28.205.161:8333\n-46.30.42.144:8333\n-46.138.139.195:8333\n-46.165.245.221:8333\n-46.166.129.155:8333\n-46.166.160.52:8333\n-46.166.160.56:8333\n-46.188.44.82:8333\n-46.188.126.74:8333\n-46.229.165.145:8333\n-46.229.168.201:8333\n-46.229.238.187:8333\n-47.54.204.246:8333\n-47.74.128.138:8333\n-47.94.224.99:8333\n-47.97.96.198:8333\n-47.187.36.48:8333\n-47.218.16.81:8333\n-47.223.66.222:8333\n-47.254.128.15:8333\n-50.31.170.53:8333\n-50.35.67.146:8333\n-50.76.96.230:8333\n-50.82.177.142:8333\n-51.15.3.46:8333\n-51.175.141.243:8333\n-52.144.47.153:8333\n-52.232.38.122:8333\n-54.38.192.164:8333\n-54.85.65.6:8333\n-54.91.227.188:8333\n-58.180.36.14:8333\n-59.106.208.68:8333\n-60.70.73.26:8333\n-61.160.234.57:8333\n-62.43.198.56:8333\n-62.45.0.15:8333\n-62.107.200.30:8333\n-62.133.194.2:8333\n-62.138.3.224:8333\n-62.146.70.216:8333\n-64.78.163.10:8333\n-64.120.110.2:8333\n-64.131.160.31:8333\n-66.18.172.16:8333\n-66.85.74.242:8333\n-66.110.132.10:8333\n-66.114.33.90:8333\n-66.180.64.95:8333\n-66.222.164.188:8333\n-67.11.139.67:8333\n-67.43.191.118:8333\n-67.61.137.157:8333\n-67.193.184.12:8333\n-67.210.228.203:8333\n-67.215.12.43:8333\n-67.253.72.119:8333\n-68.201.228.6:8333\n-68.202.128.19:8333\n-69.30.218.226:8333\n-69.61.35.175:8333\n-69.61.171.22:8333\n-69.125.194.25:8333\n-70.35.98.12:8333\n-70.103.171.66:8333\n-70.172.252.29:8333\n-71.34.96.135:8333\n-71.68.48.149:8333\n-71.93.161.162:8333\n-71.162.192.5:8333\n-72.11.174.71:8333\n-72.50.240.124:8333\n-72.70.32.215:8333\n-72.211.196.232:8333\n-72.234.112.22:8333\n-72.253.237.0:8333\n-73.241.192.40:8333\n-74.15.230.112:8333\n-74.83.79.52:8333\n-74.126.14.27:8333\n-75.76.137.164:8333\n-76.64.166.230:8333\n-76.191.79.98:8333\n-77.37.170.106:8333\n-77.70.107.83:8333\n-77.95.226.194:8333\n-77.111.172.134:8333\n-77.163.136.136:8333\n-77.203.13.57:8333\n-77.239.37.12:8333\n-77.240.168.19:8333\n-77.244.219.164:8333\n-78.31.67.156:8333\n-78.34.2.126:8333\n-78.108.187.246:8333\n-78.109.163.153:8333\n-79.28.205.145:8333\n-79.66.70.89:8333\n-79.132.230.144:8333\n-80.209.224.79:8333\n-80.211.252.104:8333\n-80.229.28.60:8333\n-81.7.13.84:8333\n-81.7.16.182:8333\n-81.18.224.62:8333\n-81.171.27.138:8333\n-81.187.80.221:8333\n-81.217.112.225:8333\n-81.245.141.6:8333\n-82.43.171.91:8333\n-82.102.10.251:8333\n-82.118.234.178:8333\n-82.144.197.93:8333\n-82.161.109.190:8333\n-82.193.102.228:8333\n-82.193.109.199:8333\n-82.199.102.10:8333\n-82.212.130.94:8333\n-82.213.208.16:8333\n-82.217.67.17:8333\n-82.221.108.27:8333\n-82.221.133.174:8333\n-83.55.130.30:8333\n-83.77.39.46:8333\n-83.137.41.10:8333\n-83.149.70.48:8333\n-83.151.233.218:8333\n-83.162.43.154:8333\n-83.164.131.243:8333\n-83.221.11.7:8333\n-83.243.128.13:8333\n-84.16.38.218:8333\n-84.38.3.249:8333\n-84.75.26.172:8333\n-84.200.106.128:8333\n-84.212.250.219:8333\n-84.215.134.195:8333\n-84.245.27.209:8333\n-84.254.40.152:8333\n-84.255.193.28:8333\n-85.10.112.194:8333\n-85.93.2.76:54382\n-85.94.172.33:8333\n-85.129.0.126:8333\n-85.145.168.159:8333\n-85.170.238.26:8333\n-85.195.232.197:8333\n-85.214.68.122:8333\n-85.214.235.137:8333\n-85.218.48.146:8333\n-85.220.165.205:8333\n-85.229.134.98:8333\n-85.241.49.242:8333\n-86.25.32.77:8333\n-86.41.89.170:8333\n-86.50.143.43:8333\n-86.61.67.183:8333\n-86.137.26.210:8333\n-86.177.194.215:8333\n-87.157.177.58:8333\n-87.224.163.66:8333\n-87.236.196.169:8333\n-87.246.46.132:8333\n-88.99.64.76:8333\n-89.1.100.49:8333\n-89.10.155.88:8333\n-89.27.59.246:8333\n-89.163.132.73:8333\n-89.179.240.131:8333\n-89.205.81.5:8333\n-89.212.75.6:8333\n-89.217.130.147:8333\n-89.230.96.42:8333\n-89.248.172.10:8333\n-90.46.57.17:8333\n-90.110.11.101:8333\n-90.240.37.163:8333\n-91.65.4.21:8333\n-91.65.192.159:8333\n-91.83.237.185:8333\n-91.110.125.26:8333\n-91.121.160.59:8333\n-91.135.0.187:8333\n-91.143.109.68:8333\n-91.195.42.134:8333\n-91.221.70.137:8333\n-92.35.132.5:8333\n-92.42.37.141:8333\n-92.54.16.144:8333\n-92.62.34.184:8333\n-92.186.231.240:8333\n-93.123.80.47:8333\n-93.170.13.15:8333\n-93.171.201.68:8333\n-93.179.197.152:8333\n-93.190.206.151:8333\n-93.191.131.177:8333\n-93.208.132.214:8333\n-94.104.97.247:8333\n-94.156.35.8:8333\n-94.199.173.113:8333\n-95.42.2.113:8333\n-95.94.225.61:8333\n-95.154.237.24:8333\n-95.158.39.64:8333\n-95.163.71.126:8333\n-95.163.106.139:8333\n-95.208.163.214:8333\n-95.213.143.13:8333\n-95.226.77.108:8333\n-96.3.74.66:8333\n-96.23.128.65:8333\n-96.27.8.242:8333\n-96.27.129.94:8333\n-96.126.100.148:8333\n-97.74.6.105:8333\n-97.116.160.102:8333\n-98.7.64.249:8333\n-98.10.106.49:8333\n-98.25.197.125:8333\n-98.29.7.103:8333\n-98.127.130.17:8333\n-99.224.192.201:8333\n-101.190.172.209:8333\n-103.35.151.76:8334\n-103.74.193.127:8333\n-103.80.133.191:8333\n-103.80.168.57:8333\n-103.99.168.102:8333\n-103.194.42.10:8333\n-104.168.101.207:8333\n-104.200.67.162:8333\n-104.207.132.42:8333\n-104.237.4.202:8333\n-107.155.72.108:8333\n-107.183.37.162:8333\n-108.175.3.18:8333\n-108.220.192.57:8333\n-109.61.102.5:8333\n-109.206.177.21:8333\n-109.237.111.156:8333\n-115.68.47.82:8333\n-116.88.75.110:8333\n-118.67.201.40:8333\n-119.28.4.230:8333\n-119.28.130.210:8333\n-120.31.143.167:8333\n-120.220.14.92:8333\n-120.220.14.93:8333\n-124.18.133.220:8333\n-126.207.39.22:8333\n-128.77.37.214:8333\n-128.125.100.2:8333\n-129.158.74.237:8333\n-129.213.32.176:8333\n-131.113.41.119:8333\n-131.113.41.125:8333\n-131.114.10.233:8333\n-131.188.40.191:8333\n-131.188.42.36:8333\n-134.0.112.92:8333\n-134.3.26.190:8333\n-135.23.196.24:8333\n-135.84.207.4:8333\n-136.59.129.125:8333\n-136.61.239.7:8333\n-137.117.164.18:8333\n-139.130.41.82:8333\n-141.134.71.188:8333\n-141.213.6.57:8333\n-141.223.82.139:8333\n-142.0.130.49:8333\n-142.0.130.53:8333\n-144.118.141.232:8333\n-148.66.58.146:8333\n-150.95.130.17:8333\n-150.187.36.233:8333\n-150.249.76.102:8333\n-153.125.129.187:8333\n-153.125.224.107:8333\n-154.48.236.250:8887\n-154.66.207.126:8333\n-155.143.140.186:8333\n-157.131.142.164:8333\n-158.64.79.182:8333\n-158.85.93.163:8333\n-158.140.128.239:8333\n-158.174.131.171:8333\n-159.8.4.19:8333\n-159.217.144.68:8333\n-159.217.144.252:8333\n-159.253.47.202:8333\n-162.155.64.226:8333\n-162.222.100.118:8333\n-162.255.168.27:8333\n-162.255.168.30:8333\n-163.158.228.125:8333\n-165.227.96.38:8333\n-169.229.238.17:8333\n-171.25.165.145:8333\n-171.33.177.9:8333\n-172.72.228.93:8333\n-172.96.161.244:8333\n-172.102.228.150:8333\n-172.118.136.98:8333\n-173.46.65.8:8333\n-173.212.193.35:8333\n-173.239.33.85:8333\n-173.243.64.48:8333\n-174.115.129.37:8333\n-176.12.6.59:8333\n-176.107.184.29:8333\n-176.123.10.192:8333\n-176.126.167.10:8333\n-176.185.235.163:8333\n-176.223.130.254:8333\n-178.0.71.136:8333\n-178.12.32.39:8333\n-178.85.64.212:8333\n-178.124.162.209:8333\n-178.128.192.21:8333\n-178.151.133.56:8333\n-178.193.96.201:8333\n-178.248.200.126:8333\n-178.254.7.88:8333\n-180.233.106.171:8333\n-181.166.168.210:8333\n-183.66.227.70:12060\n-183.111.108.56:8333\n-184.70.33.190:8333\n-184.105.70.100:8333\n-184.105.70.101:8333\n-185.12.7.38:8333\n-185.21.216.134:8333\n-185.25.48.184:8333\n-185.25.48.217:8333\n-185.25.60.199:8333\n-185.28.76.179:8333\n-185.35.139.54:8333\n-185.44.78.208:8333\n-185.47.132.55:8333\n-185.51.128.27:8333\n-185.59.100.107:8333\n-185.67.175.75:8333\n-185.67.204.76:8333\n-185.67.204.80:8333\n-185.70.105.74:8339\n-185.85.3.140:8333\n-185.86.15.23:8333\n-185.86.15.25:8333\n-185.102.71.6:8333\n-185.117.74.21:8333\n-185.121.173.223:8333\n-185.128.40.122:8333\n-185.145.131.218:8333\n-185.147.237.169:8333\n-185.162.128.83:8333\n-185.165.76.220:8333\n-185.172.165.130:8333\n-185.177.5.4:8333\n-185.183.131.75:8333\n-185.186.208.208:8333\n-185.215.224.22:8333\n-185.224.80.108:8333\n-185.225.16.4:8333\n-185.243.112.214:8333\n-185.244.193.18:8333\n-185.248.160.66:8333\n-186.19.136.144:8333\n-188.68.38.243:8333\n-188.68.240.89:8333\n-188.134.6.84:8333\n-188.134.77.121:8333\n-188.138.1.43:8333\n-188.217.9.168:8333\n-190.2.133.91:8333\n-190.184.198.34:8333\n-190.211.204.68:8333\n-192.139.35.143:8333\n-192.162.100.156:8333\n-192.162.101.250:8333\n-192.206.202.6:8333\n-192.207.12.244:8333\n-192.207.12.245:8333\n-192.228.101.157:8333\n-193.112.192.73:8333\n-193.170.166.12:8333\n-194.15.231.236:8333\n-194.165.16.33:8333\n-194.181.80.77:8333\n-194.186.160.253:8333\n-194.247.13.7:8333\n-194.247.13.32:8333\n-195.0.203.21:8333\n-195.38.168.114:8333\n-195.43.141.28:8333\n-195.95.225.248:8333\n-195.123.224.7:8333\n-195.154.235.79:8333\n-195.169.99.82:8333\n-195.201.0.81:8333\n-197.155.6.43:8333\n-198.44.231.160:6333\n-198.58.102.35:8333\n-198.137.202.175:8333\n-199.127.224.50:8333\n-199.182.129.26:8333\n-199.188.204.102:8333\n-199.188.204.155:8333\n-199.244.49.224:8333\n-199.249.230.37:15738\n-200.83.123.46:8333\n-200.109.67.71:8333\n-200.122.128.185:8333\n-202.153.199.182:8333\n-202.159.136.54:8333\n-202.168.16.232:8333\n-203.11.71.1:8333\n-203.162.80.219:8333\n-203.178.143.13:8333\n-204.15.11.4:8333\n-206.125.169.162:8333\n-206.174.55.164:8333\n-207.182.146.18:8333\n-208.93.66.198:8333\n-208.98.196.249:8333\n-208.107.224.202:8333\n-208.110.65.114:8333\n-208.118.235.190:8333\n-209.122.208.131:8333\n-209.126.110.198:8333\n-209.131.238.80:8333\n-212.56.108.81:8333\n-212.73.150.132:8333\n-212.77.224.145:8333\n-212.85.90.194:8333\n-212.92.101.30:8333\n-212.112.133.92:8333\n-212.227.132.167:8333\n-213.10.100.182:8333\n-213.57.240.69:8333\n-213.91.205.134:8333\n-213.125.67.108:8333\n-213.152.161.170:45893\n-213.155.3.216:8333\n-213.180.70.138:8333\n-213.185.226.225:8333\n-216.71.203.79:8333\n-216.194.164.211:8333\n-216.240.168.226:8333\n-217.20.130.72:8333\n-217.23.9.180:8333\n-217.64.47.138:8333\n-217.169.14.90:8333\n-218.245.1.205:8333\n-220.130.128.58:8333\n-220.133.39.61:8333\n-222.239.193.116:8333\n-222.239.193.120:8333\n-[2001:0:4137:9e76:1cbd:3bc0:ade7:bf44]:8333\n-[2001:0:4137:9e76:2046:150d:8d65:de4]:8333\n-[2001:0:4137:9e76:2c99:3f36:d003:f47a]:8333\n-[2001:0:4137:9e76:34b6:3910:a3dc:7bfa]:8333\n-[2001:0:4137:9e76:3cec:2b5:525b:fb3c]:8333\n-[2001:0:53aa:64c:c5:235d:a10d:e0]:8333\n-[2001:0:53aa:64c:cbc:5ace:a625:39d1]:8333\n-[2001:0:5ef5:79fb:38e5:36c1:d0ee:5d98]:8333\n-[2001:0:5ef5:79fb:3c5c:c6c:39cf:69d3]:8333\n-[2001:0:5ef5:79fb:896:ef4:ba63:8d15]:8333\n-[2001:0:9d38:6ab8:106a:2112:e06b:b881]:8333\n-[2001:0:9d38:6ab8:1c99:1655:e782:9340]:8333\n-[2001:0:9d38:6ab8:20cd:1cd9:54e6:5a6e]:8333\n-[2001:0:9d38:6ab8:245e:2b3:a300:317e]:8333\n-[2001:0:9d38:6ab8:2814:215c:88e3:4ee0]:8333\n-[2001:0:9d38:6ab8:30ac:3a51:b2da:712d]:8333\n-[2001:0:9d38:6ab8:34a6:eeb:c3ed:5be7]:8333\n-[2001:0:9d38:6ab8:c2f:16d5:525a:107e]:8333\n-[2001:0:9d38:6ab8:cb1:2557:431c:f3e1]:8333\n-[2001:0:9d38:6abd:1056:290d:a671:3d90]:8333\n-[2001:0:9d38:6abd:1865:14fe:d0a7:1f72]:8333\n-[2001:0:9d38:6abd:2c3c:3006:a486:93c3]:8333\n-[2001:0:9d38:6abd:2c73:3313:f21a:96da]:8333\n-[2001:0:9d38:6abd:3050:fbff:a250:3386]:8333\n-[2001:0:9d38:6abd:3828:494:fdaa:56cd]:8333\n-[2001:0:9d38:6abd:454:187d:3e75:b00b]:8333\n-[2001:0:9d38:78cf:c2c:1dcc:fa42:41a3]:8333\n-[2001:0:9d38:90d7:1c4a:20d4:4daa:eb5a]:8333\n-[2001:0:9d38:90d7:1ca7:1612:9a18:31e5]:8333\n-[2001:0:9d38:90d7:24c8:3a0a:a68d:f799]:8333\n-[2001:0:9d38:90d7:2837:324e:d0cb:9f45]:22475\n-[2001:0:9d38:90d7:28c1:361e:a69c:b099]:8333\n-[2001:0:9d38:90d7:30fe:1c89:d0b4:4d18]:8333\n-[2001:0:9d38:90d7:3474:1df1:e732:e5e3]:8333\n-[2001:0:9d38:90d7:34a8:fb1:88e3:fb19]:8333\n-[2001:0:9d38:90d7:3c19:3d23:d0b4:f831]:18652\n-[2001:0:9d38:90d7:3c45:2342:d0cb:d6ca]:8333\n-[2001:0:9d38:90d7:3c5f:3105:d0b4:60b6]:8333\n-[2001:0:9d38:90d7:8a1:2fb:d0cb:1e8f]:8333\n-[2001:0:9d38:90d7:a3:36e0:e020:53fa]:8333\n-[2001:0:9d38:90d7:eb:3b30:d0a4:aa5]:8333\n-[2001:0:9d38:953c:104e:8af:b3aa:f300]:8333\n-[2001:0:9d38:953c:1434:71f:b850:bab1]:8333\n-[2001:0:9d38:953c:144a:36e8:519a:bb69]:8333\n-[2001:0:9d38:953c:20fc:26ef:ed26:c737]:8333\n-[2001:0:9d38:953c:454:120:88e8:2fb]:8333\n-[2001:0:9d38:953c:801:1620:bc22:95bc]:8333\n-[2001:0:9d38:953c:8a0:1fdb:ab00:bc2]:8333\n-[2001:0:9d38:953c:cf6:3d48:4386:4937]:8333\n-[2001:13d8:1c01:1000::8]:8333\n-[2001:1620:923:0:75be:ed92:1a01:641]:8333\n-[2001:1680:101:8c::1]:8333\n-[2001:1970:5ae2:2b00:30bd:7910:c84:7a8f]:8333\n-[2001:1970:5d56:aa01:1e75:8ff:fead:da48]:8333\n-[2001:19f0:300:1045:225:90ff:fec9:29b3]:8333\n-[2001:19f0:5:1f93:5400:1ff:fe7a:c65a]:8333\n-[2001:19f0:6c01:4bd:5400:1ff:fe76:4db6]:8333\n-[2001:19f0:ac01:2fb:5400:ff:fe5b:c3ff]:8333\n-[2001:1a48:7:af1a:75f8:2c47:3285:d50e]:8333\n-[2001:1af8:4010:a094:3333::8c38]:8333\n-[2001:1af8:4070:a016:3333::5afb]:8333\n-[2001:1af8:4700:a071:4444::e26e]:8333\n-[2001:200:0:8801:5054:ff:fef2:1d0]:8333\n-[2001:4128:6135:2010:21e:bff:fee8:a3c0]:8333\n-[2001:41d0:1000:1f98::]:8333\n-[2001:41d0:1004:18c7::]:8333\n-[2001:41d0:1004:19dc::]:18555\n-[2001:41d0:1004:1f7c::]:8333\n-[2001:41d0:1008:2bed::]:8333\n-[2001:41d0:1:45d8::1]:8333\n-[2001:41d0:1:5395::1]:8333\n-[2001:41d0:1:85d3::1]:8333\n-[2001:41d0:1:8649::1]:8333\n-[2001:41d0:1:8b26::1]:8333\n-[2001:41d0:1:a5b8::1]:8333\n-[2001:41d0:1:ab6b::1]:8333\n-[2001:41d0:1:d227::]:8333\n-[2001:41d0:1:f897::1]:8333\n-[2001:41d0:1:f932::1]:8333\n-[2001:41d0:2:34b7::1]:8333\n-[2001:41d0:2:4975::]:8333\n-[2001:41d0:2:5c22::]:8333\n-[2001:41d0:2:84d4::1]:8333\n-[2001:41d0:2:ab38::]:8333\n-[2001:41d0:2:c33c::]:8333\n-[2001:41d0:303:193b::]:8333\n-[2001:41d0:303:2505::1a]:8333\n-[2001:41d0:303:41db::]:58333\n-[2001:41d0:303:4c68::]:8333\n-[2001:41d0:303:508::]:8333\n-[2001:41d0:303:6767::]:8333\n-[2001:41d0:303:68cd::]:8333\n-[2001:41d0:602:17a4::]:8333\n-[2001:41d0:602:1842::]:8333\n-[2001:41d0:602:3b7::]:8333\n-[2001:41d0:602:898::]:8333\n-[2001:41d0:602:b1a::]:8333\n-[2001:41d0:800:135::]:8333\n-[2001:41d0:800:3d3::]:8333\n-[2001:41d0:8:101d::1]:8333\n-[2001:41d0:8:1b29::]:8333\n-[2001:41d0:8:3f74::1]:8333\n-[2001:41d0:8:43a0::]:8333\n-[2001:41d0:8:bb32::1]:8333\n-[2001:41d0:8:bed3::]:8333\n-[2001:41d0:8:c67c::]:8333\n-[2001:41d0:8:ca2d::]:8333\n-[2001:41d0:8:d444::1]:8333\n-[2001:41d0:8:ddb::1]:8333\n-[2001:41d0:8:ea86::1]:8333\n-[2001:41d0:a:1220::1]:8333\n-[2001:41d0:a:27ed::1]:8333\n-[2001:41d0:a:296c::]:8139\n-[2001:41d0:a:2b18::1]:8333\n-[2001:41d0:a:405c::]:8333\n-[2001:41d0:a:42df::]:8312\n-[2001:41d0:a:4c49::aca:7929]:8333\n-[2001:41d0:a:6927::1]:8333\n-[2001:41d0:a:69a2::1]:8333\n-[2001:41d0:a:6a87::1]:8333\n-[2001:41d0:a:6c29::1]:8333\n-[2001:41d0:a:6c7d::1]:8333\n-[2001:41d0:a:f243::1]:8333\n-[2001:41d0:a:f9cd::1]:8333\n-[2001:41d0:d:dc9::]:8333\n-[2001:41d0:e:1146::1]:8333\n-[2001:41d0:e:126::1]:8333\n-[2001:41d0:e:12aa::1]:8333\n-[2001:41d0:e:1388::1]:8333\n-[2001:41d0:e:ec5::1]:8333\n-[2001:41f0:0:4:62:6974:636f:696e]:8333\n-[2001:470:18:be4::2]:8333\n-[2001:470:1c62:b170:bbff:53f1:edbf:99df]:42434\n-[2001:470:1f06:15b4::2]:8333\n-[2001:470:1f06:cea::2]:8333\n-[2001:470:1f07:803:20c:29ff:fe2d:5879]:8333\n-[2001:470:1f08:3cc::2]:8333\n-[2001:470:1f0a:18dd::2]:8333\n-[2001:470:1f15:11f8::10]:8333\n-[2001:470:1f15:cf7::14]:8333\n-[2001:470:1f17:b5::10]:8333\n-[2001:470:1f1a:172::2]:8333\n-[2001:470:1f1b:5a6:216:3eff:fe24:1162]:8333\n-[2001:470:28:365::7]:8333\n-[2001:470:41:6::2]:8333\n-[2001:470:6c80:101::1]:8333\n-[2001:470:6c80:3::1]:8333\n-[2001:470:7:63e::2]:8333\n-[2001:470:7:b74::2]:8333\n-[2001:470:8:bd3:4d25:ca57:a5b7:c6c4]:8333\n-[2001:470:a:c13::2]:8333\n-[2001:470:c144:cafe::23]:8333\n-[2001:470:c3c4:100:100::202]:8333\n-[2001:470:e696::1]:8333\n-[2001:48f8:1003::3ba]:8333\n-[2001:48f8:9015:1422:3dc0:fcf2:772f:57bc]:8333\n-[2001:4ba0:babe:832::]:8333\n-[2001:628:22a0:9::12]:8333\n-[2001:638:a000:4140::ffff:191]:8333\n-[2001:638:a000:4142::ff10:bed6]:8333\n-[2001:67c:21ec:1000::a]:8333\n-[2001:8d8:90b:c000::21:2fc0]:8333\n-[2001:8d8:91c:9200::5c:d425]:8333\n-[2001:980:231b:1:8e89:a5ff:fee3:f8be]:8333\n-[2001:980:ade8:1:14fc:fd6d:608c:f669]:8333\n-[2001:981:bdbd:1:c506:7d38:4b47:da15]:8333\n-[2001:982:27f2:1:7271:bcff:fe94:d5bb]:8333\n-[2001:984:26b5::1]:8333\n-[2001:984:aec7:1:dcb7:29a:7eda:b9a2]:8333\n-[2001:985:79af:20::35]:8333\n-[2001:985:cb69:0:20c:29ff:feaf:dd5e]:8333\n-[2001:b011:300d:1870:9c87:d4ff:fe9c:2d0f]:8333\n-[2001:b030:2422::208d]:8333\n-[2001:bc8:31d7:100::1]:8333\n-[2001:bc8:323c:100::]:8333\n-[2001:bc8:33ac:19ff::26]:8333\n-[2001:bc8:399f:f000::1]:8333\n-[2001:bc8:3dc1:100::142]:8333\n-[2001:bc8:4400:2000::463b]:8333\n-[2001:bc8:4400:2400::1b35]:8333\n-[2001:bc8:4700:2000::5823]:8333\n-[2001:da8:8001:2303:1cf4:4466:3f1a:7edb]:8333\n-[2001:da8:d800:741:652d:52db:5713:4515]:8333\n-[2002:17e5:10ea::17e5:10ea]:8333\n-[2002:1f2b:8cbe::1f2b:8cbe]:8333\n-[2002:2f59:30f3::2f59:30f3]:8333\n-[2002:2f5a:562a::2f5a:562a]:8333\n-[2002:3e92:46d8::3e92:46d8]:8333\n-[2002:3f62:e6bb::3f62:e6bb]:8333\n-[2002:404e:a30a::404e:a30a]:8333\n-[2002:43db:9616::43db:9616]:8333\n-[2002:43e5:a1fa::43e5:a1fa]:8333\n-[2002:5266:afb::5266:afb]:8333\n-[2002:5dbd:91a9::5dbd:91a9]:8333\n-[2002:627e:333d::627e:333d]:8333\n-[2002:6b9b:486c::6b9b:486c]:8333\n-[2002:6dcb:7cba::6dcb:7cba]:8333\n-[2002:7cf8:e33e::7cf8:e33e]:8333\n-[2002:8e00:8231::8e00:8231]:8333\n-[2002:8e00:8233::8e00:8233]:8333\n-[2002:b07e:a70a::b07e:a70a]:8333\n-[2002:b2c9:e6fc:10:3d5c:e3ad:813:9c46]:8333\n-[2002:b4b2:3612::b4b2:3612]:8333\n-[2002:b610:1ca2::b610:1ca2]:8333\n-[2002:b610:1ca3::b610:1ca3]:8333\n-[2002:b845:3322::1]:8333\n-[2002:b946:694a::b946:694a]:8339\n-[2002:b960:5e18::b960:5e18]:8333\n-[2002:c23f:8fc5::c23f:8fc5]:8333\n-[2002:c2a5:1021::c2a5:1021]:8333\n-[2002:c62c:e7a0::c62c:e7a0]:6333\n-[2002:ca99:c7b6::ca99:c7b6]:8333\n-[2002:d035:2734::d035:2734]:8333\n-[2002:d06e:5d1a::d06e:5d1a]:8333\n-[2002:d8da:b949::d8da:b949]:8333\n-[2400:2410:a960:4800:18be:d624:7018:cd2f]:8333\n-[2400:6180:0:d0::3e1:b001]:8333\n-[2400:6180:0:d0::5cd2:a001]:8333\n-[2400:6180:0:d1::4c6:8001]:8333\n-[2400:6180:100:d0::797:a001]:8333\n-[2400:8500:1302:817:150:95:130:17]:8333\n-[2401:1800:7800:106:be76:4eff:fe1c:1879]:8333\n-[2401:3900:2:1::2]:8333\n-[2401:a400:3200:5600:3c16:2deb:abce:70cd]:8333\n-[2401:b140::43:100]:8333\n-[2401:b140::43:102]:8333\n-[2402:1f00:8100:21c::]:8333\n-[2403:bd80:c000:1:103:202:216:182]:8333\n-[2405:6580:c5c0:1700:6cd2:b72e:740e:4311]:8333\n-[2405:800:1000:1:1000::2001]:8333\n-[2405:9800:b560:96d:630:c28e:a79a:a182]:8333\n-[2405:aa00:2::40]:8333\n-[2409:10:ca20:1df0:224:e8ff:fe1f:60d9]:8333\n-[2600:1f16:625:e00:269a:3452:2edf:1011]:8333\n-[2600:1f16:625:e00:7bc:5879:4463:15dd]:8333\n-[2600:1f16:625:e00:a28b:5a16:849c:fe41]:8333\n-[2600:1f16:625:e00:a70f:e728:e8e1:2c2e]:8333\n-[2600:3c00::f03c:91ff:fe0c:4d74]:8333\n-[2600:3c00::f03c:91ff:fe2b:bf38]:8333\n-[2600:3c00::f03c:91ff:fe91:3e49]:8333\n-[2600:3c00::f03c:91ff:feb6:19f2]:8333\n-[2600:3c01::f03c:91ff:fe91:6a29]:8333\n-[2600:3c01::f03c:91ff:fed8:85a2]:8333\n-[2600:3c01::f03c:91ff:fed8:db38]:8333\n-[2600:3c03::f03c:91ff:fe28:1445]:8333\n-[2601:147:4300:e61::30c]:8333\n-[2601:147:4300:e61::f91]:8333\n-[2601:186:c100:6bcd:16bd:cea1:235d:1c19]:8333\n-[2601:18d:4600:5f32:20e7:b3ff:fecf:a99]:8333\n-[2601:240:4601:ecee:309a:f9de:b64d:87df]:8333\n-[2601:240:8100:256b:20c:29ff:fe5e:d707]:8333\n-[2601:646:c202:5301:101b:a096:efba:c10a]:8333\n-[2601:807:8000:9508:9993:d2b3:1a:8225]:8333\n-[2601:c8:4100:770:c37:807b:98cc:bd7e]:8333\n-[2602:100:6154:d6e3:2c91:d0de:b032:b0a4]:8333\n-[2602:100:6154:d6e3::60]:8333\n-[2602:61:786c:2c00::1]:8333\n-[2602:ff83:fff:fffe::75]:8333\n-[2602:ff83:fff:fffe::76]:8333\n-[2603:3005:3000:5000:bc5a:72ac:36e9:175e]:8333\n-[2604:0:c1:100:6bc1:f98a:97f9:3845]:8333\n-[2604:2d80:c808:857b:8d6:9e1c:7131:4bea]:8333\n-[2604:4080:1008:0:96de:80ff:fe62:e650]:8333\n-[2604:4300:a:104:b699:baff:feaa:5109]:8333\n-[2604:5500:c226:7f00:2d96:ed64:ce45:9a6]:8333\n-[2604:8d80:100::adf3:4030]:8333\n-[2604:a880:2:d0::22f8:e001]:8333\n-[2604:a880:2:d0::22f8:f001]:8333\n-[2604:a880:2:d0::22f9:1]:8333\n-[2604:a880:2:d0::22f9:1001]:8333\n-[2604:a880:2:d0::22f9:c001]:8333\n-[2604:a880:2:d0::22f9:d001]:8333\n-[2604:a880:2:d0::22f9:e001]:8333\n-[2604:a880:2:d0::22fa:1001]:8333\n-[2604:a880:2:d0::22fa:2001]:8333\n-[2604:a880:2:d0::22fa:3001]:8333\n-[2604:a880:2:d0::38:f001]:8333\n-[2604:a880:2:d0::662:c001]:8333\n-[2604:a880:400:d0::1ac4:b001]:8333\n-[2604:a880:400:d0::2004:4001]:8333\n-[2604:a880:400:d0::2004:5001]:8333\n-[2604:a880:400:d0::2004:6001]:8333\n-[2604:a880:400:d0::2004:d001]:8333\n-[2604:a880:400:d0::2004:e001]:8333\n-[2604:a880:400:d0::2005:1]:8333\n-[2604:a880:400:d0::2005:2001]:8333\n-[2604:a880:400:d0::2005:3001]:8333\n-[2604:a880:400:d0::cd7:4001]:8333\n-[2604:a880:400:d1::729:b001]:8333\n-[2604:a880:800:a1::11a9:8001]:8333\n-[2604:a880:800:a1::59:9001]:8333\n-[2604:a880:800:a1::cbb:f001]:8333\n-[2604:a880:800:a1::ee8:e001]:8333\n-[2604:a880:cad:d0::370:f001]:8333\n-[2604:a880:cad:d0::a52:6001]:8333\n-[2605:4d00::50]:8333\n-[2605:9880:0:1cf:225:90ff:fec9:29b3]:8333\n-[2605:9880:0:3::8333]:8333\n-[2605:9880:201:17::4b7c]:8333\n-[2605:a000:4a87:9501:d613:fbf8:1e82:8d3c]:8333\n-[2605:a000:f343:b700:5054:ff:fea7:131]:8333\n-[2605:a601:a41:1a00:a00:27ff:fefc:4759]:8333\n-[2605:ae00:203::203]:8333\n-[2605:c000:2a0a:1::102]:8333\n-[2605:e000:1c00:80e8:984e:a697:97a3:50ed]:8333\n-[2605:e000:1c0d:437b:5054:ff:fe1b:2913]:8333\n-[2605:e000:9093:a700:9853:4464:5f78:c484]:8333\n-[2605:f700:100:400::104e:43bd]:8333\n-[2605:f700:100:400::131:5b54]:8333\n-[2605:f700:100:c10:5575:8e73:b07c:bf5a]:8333\n-[2606:6000:c149:8830:5054:ff:fe78:66ff]:8333\n-[2607:1c00:a:6:3c1c:1b0d:ba4:8ea9]:8333\n-[2607:1c00:a:6::1000]:8333\n-[2607:5300:120:a04::]:8333\n-[2607:5300:203:2fac::]:8333\n-[2607:5300:203:408::]:8333\n-[2607:5300:203:6bc::]:18333\n-[2607:5300:203:8d::]:8333\n-[2607:5300:60:10aa::1]:8333\n-[2607:5300:60:122a::1]:8333\n-[2607:5300:60:13bb::1]:8333\n-[2607:5300:60:3ddf::]:8333\n-[2607:5300:60:5735::]:8333\n-[2607:5300:60:714::1]:8333\n-[2607:5300:60:981::1]:8333\n-[2607:5300:60:cff1::]:28633\n-[2607:9280:b:73b:250:56ff:fe21:bf32]:8333\n-[2607:f178:0:8::106]:8333\n-[2607:f1c0:823:af00::35:bbd1]:8333\n-[2607:f2c0:f00e:300:201:2eff:fe67:9130]:8333\n-[2607:fa18:0:beef::c012]:8333\n-[2607:ff28:1:7::176e:c4a5]:8333\n-[2607:ff28:1:7::65af:9afb]:8333\n-[2620:71:4000:0:192:30:120:110]:8333\n-[2801:84:0:1034:76d4:35ff:fe7f:5033]:8333\n-[2803:1500:1200:c487::1]:8333\n-[2804:14c:6582:60f0::1]:8333\n-[2804:14d:baa6:962c:486:47f6:c161:a79d]:8333\n-[2a00:13a0:3015:1:85:14:79:26]:8333\n-[2a00:16d8:c::5b6a:c261]:8333\n-[2a00:1768:2001:24::148:218]:8333\n-[2a00:1838:36:2c::ed85]:8333\n-[2a00:1a28:1157:2f8::946a]:8333\n-[2a00:1c48:6:203:a60:6eff:fe44:8086]:8333\n-[2a00:1f40:2::1126]:8333\n-[2a00:7c80:0:5d::1d0e]:8333\n-[2a00:8a60:e012:a00::21]:8333\n-[2a00:ab00:603:84::3]:8333\n-[2a00:bbe0:cc:0:6651:6ff:fe0e:9418]:8333\n-[2a00:ca8:a1f:3025:4121:5ca1:3b:4469]:8333\n-[2a00:ca8:a1f:9091:945e:80a3:830a:78cf]:8333\n-[2a01:238:433c:5300:7a61:3e1a:27f4:9dc2]:8333\n-[2a01:4240:a21:983b::c0a8:32]:8333\n-[2a01:488:66:1000:53a9:21b8:0:1]:8333\n-[2a01:4d60:3:1:5::1]:8333\n-[2a01:4f8:10a:3524::2]:8333\n-[2a01:4f8:10b:362::2]:8333\n-[2a01:4f8:10b:d50::2]:8333\n-[2a01:4f8:10b:f44::2]:8333\n-[2a01:4f8:120:1391::2]:8333\n-[2a01:4f8:120:70a3::2]:8333\n-[2a01:4f8:120:93f8::2]:8333\n-[2a01:4f8:121:2385::2]:8333\n-[2a01:4f8:130:71d2::2]:8333\n-[2a01:4f8:130:7422::2]:8333\n-[2a01:4f8:13a:124f::2]:8333\n-[2a01:4f8:13a:1dcb::2]:8333\n-[2a01:4f8:13a:708::2]:21775\n-[2a01:4f8:13a:723::2]:8333\n-[2a01:4f8:13b:109e::2]:8333\n-[2a01:4f8:13b:1a9e::201]:8333\n-[2a01:4f8:13b:271c::2]:10731\n-[2a01:4f8:13b:2d42::2]:8333\n-[2a01:4f8:13b:2d94::2]:8333\n-[2a01:4f8:13b:3810::2]:8333\n-[2a01:4f8:13b:3da8::2]:8333\n-[2a01:4f8:13b:41e6::2]:8333\n-[2a01:4f8:13b:4281::2]:8333\n-[2a01:4f8:13b:5c7::2]:8333\n-[2a01:4f8:13b:81::2]:8333\n-[2a01:4f8:140:236a:cafe::5]:8333\n-[2a01:4f8:140:324e::2]:8333\n-[2a01:4f8:140:5329::102]:8333\n-[2a01:4f8:140:5329::50:109]:8333\n-[2a01:4f8:140:931a::2]:8333\n-[2a01:4f8:140:93b0::2]:8333\n-[2a01:4f8:141:47::2]:8333\n-[2a01:4f8:150:53a4::4]:8333\n-[2a01:4f8:150:72ee::4202]:8333\n-[2a01:4f8:160:41f0::1:33]:8333\n-[2a01:4f8:160:4443::2]:8333\n-[2a01:4f8:160:6092:d7bd:a39:3e52:b65d]:8333\n-[2a01:4f8:160:60aa::2]:8333\n-[2a01:4f8:160:636e::2]:8333\n-[2a01:4f8:161:6091::2]:8333\n-[2a01:4f8:161:6111::2]:8333\n-[2a01:4f8:161:812e::2]:8333\n-[2a01:4f8:162:2c6::2]:8333\n-[2a01:4f8:162:33ac::2]:8333\n-[2a01:4f8:171:1c3::2]:8333\n-[2a01:4f8:171:2bdc::2]:8333\n-[2a01:4f8:171:3248::2]:8333\n-[2a01:4f8:171:4dc::2]:8333\n-[2a01:4f8:171:d09::2]:8333\n-[2a01:4f8:171:d4a::2]:8333\n-[2a01:4f8:171:e0d::2]:8333\n-[2a01:4f8:171:ecd::2]:8333\n-[2a01:4f8:172:1823::2]:8333\n-[2a01:4f8:173:1622::2]:8333\n-[2a01:4f8:190:50b6::2]:8333\n-[2a01:4f8:190:5176::123]:8333\n-[2a01:4f8:191:268::2]:8333\n-[2a01:4f8:192:216c::2]:8333\n-[2a01:4f8:192:628a::83]:8333\n-[2a01:4f8:1c0c:77af::1]:8333\n-[2a01:4f8:200:1012::2]:8333\n-[2a01:4f8:200:442d::2]:8333\n-[2a01:4f8:201:1113::2]:8333\n-[2a01:4f8:201:4f0::2]:8333\n-[2a01:4f8:201:53cc::2]:8333\n-[2a01:4f8:201:8026::1337]:8333\n-[2a01:4f8:201:8026::2]:8333\n-[2a01:4f8:202:32c6::2]:8333\n-[2a01:4f8:211:309::2]:8333\n-[2a01:4f8:211:f08::2]:8333\n-[2a01:4f8:212:1e16::2]:8333\n-[2a01:4f8:221:1808::2]:15000\n-[2a01:4f8:221:2e18::2]:8333\n-[2a01:4f8:221:2fcf::2]:8333\n-[2a01:4f8:221:3441::2]:8333\n-[2a01:4f8:221:3452::2]:8333\n-[2a01:4f8:221:39c1::2]:8335\n-[2a01:4f8:221:3c82::2]:8333\n-[2a01:4f8:221:3c82:fea1::666]:8333\n-[2a01:4f8:221:6cd::2]:8333\n-[2a01:4f8:221:801::2]:8333\n-[2a01:4f8:221:f59::2]:8333\n-[2a01:4f8:a0:6147::2]:8333\n-[2a01:4f8:c0c:4268::2]:8333\n-[2a01:4f8:c0c:56a5::2]:8333\n-[2a01:4f8:c17:e00::2]:8333\n-[2a01:4f9:2a:10d4::2]:8333\n-[2a01:4f9:2a:1827::2]:8333\n-[2a01:4f9:2a:192c::2]:8333\n-[2a01:4f9:2a:1c87::2]:8333\n-[2a01:4f9:2a:2510::2]:8333\n-[2a01:4f9:2a:2518::2]:8333\n-[2a01:4f9:2a:2585::2]:8333\n-[2a01:4f9:2a:2698::2]:8333\n-[2a01:4f9:2a:2d0a::2]:8333\n-[2a01:4f9:2a:2d17::2]:8333\n-[2a01:4f9:2a:347::2]:8333\n-[2a01:4f9:2a:650::2]:8333\n-[2a01:4f9:2a:d54::2]:8333\n-[2a01:4f9:c010:12e7::1]:8333\n-[2a01:4f9:c010:1736::1]:8333\n-[2a01:5d00:1:4b6:d2bf:9cff:fe45:b834]:8333\n-[2a01:79c:cebe:70cc:1a03:73ff:fe48:e691]:8333\n-[2a01:7a0:2:1374::7]:8333\n-[2a01:7a7:2:1218:ec4:7aff:fe83:83c4]:8333\n-[2a01:7a7:2:1288:ea39:35ff:fef0:c429]:8333\n-[2a01:7c8:aaba:18:5054:ff:fe2b:df20]:8333\n-[2a01:7c8:fffa:50e:3035:741b:be02:b5de]:8333\n-[2a01:be00:10:201:0:80:cece:1]:8333\n-[2a01:cb00:5be:d500:227:eff:fe28:c565]:8333\n-[2a01:cb00:b3:d300:9276:8a8c:74bf:2a88]:8333\n-[2a01:cb14:b8:a500:dd9d:80f5:d305:68f9]:8333\n-[2a01:e0a:20:9120:7c3f:5643:9978:1825]:8333\n-[2a01:e0a:d:6ea0:56:deab:1b2f:300b]:8333\n-[2a01:e34:ec16:93f0:725d:d8d2:bb90:eabf]:8333\n-[2a01:e34:ee33:1640:c418:3c3a:8ff6:3eab]:8333\n-[2a01:e34:eed7:6670:28c0:183c:7783:7dc3]:8333\n-[2a01:e35:2f7d:a0b0:59c2:3c8a:95a2:c4d1]:8333\n-[2a01:e35:87ba:d0c0:75a2:9f39:efcb:f59f]:8333\n-[2a02:120b:c3c5:cef0:ec82:a43d:4d6:dc2]:8333\n-[2a02:120b:c3d1:f2d0:eea8:6bff:fefc:2265]:8333\n-[2a02:168:404c:0:eea8:6bff:fef3:7d5c]:8333\n-[2a02:180:1:1::517:10b6]:8333\n-[2a02:180:1:1::5b8f:538c]:8333\n-[2a02:1b8:10:147::2]:8333\n-[2a02:2168:d05:2c00:216:3eff:fef7:a099]:8333\n-[2a02:2528:503:2::14]:8333\n-[2a02:2528:fa:1400::1]:8333\n-[2a02:2770:17:0:21a:4aff:fe7b:175f]:8333\n-[2a02:2770:5:0:21a:4aff:fe44:8370]:8333\n-[2a02:2808:5401:0:225:90ff:fe4e:ee42]:8333\n-[2a02:390:9000:0:218:7dff:fe10:be33]:8333\n-[2a02:750:7:c11:5054:ff:fe43:eb81]:8333\n-[2a02:7aa0:1619::590:eba2]:8333\n-[2a02:7b40:3e4d:9ed9::1]:8333\n-[2a02:7b40:50d1:e04f::1]:8333\n-[2a02:7b40:5928:f9e::1]:8333\n-[2a02:7b40:592f:a590::1]:8333\n-[2a02:7b40:b0df:82fe::1]:8333\n-[2a02:7b40:b0df:8925::1]:8333\n-[2a02:7b40:b0df:8b41::1]:8333\n-[2a02:7b40:b0df:8d57::1]:8333\n-[2a02:7b40:d418:6fcd::1]:8333\n-[2a02:8108:2340:1c18:7a:231e:1430:7f12]:8333\n-[2a02:8108:9c3f:dd18:922b:34ff:fe30:ac42]:8333\n-[2a02:810d:8a40:36f8:9af2:b3ff:fee8:6d7a]:8333\n-[2a02:8388:e301:7180:201:2eff:fe82:b3cc]:8333\n-[2a02:908:213:54a0:39bf:d4aa:60b2:d9c3]:8333\n-[2a02:908:4f0:7e1c:5054:ff:feb7:ce4b]:8333\n-[2a02:930:1:0:250:56ff:fe8e:2819]:8333\n-[2a02:a80:0:2052::2]:8333\n-[2a02:c205:0:5145::1]:8333\n-[2a02:c205:2008:272::1]:8333\n-[2a02:c205:2010:6230::1]:8333\n-[2a02:c205:2016:4327::1]:8333\n-[2a02:c205:2017:2116::1]:8333\n-[2a02:c205:2018:1754::1]:8333\n-[2a02:c205:2018:8229::1]:8333\n-[2a02:c205:3002:2787::1]:8333\n-[2a02:c205:3002:6525::1]:8333\n-[2a02:c207:0:3829::1]:8333\n-[2a02:c207:2007:4699::1]:8333\n-[2a02:c207:2009:213::1]:8333\n-[2a02:c207:2010:7751::1]:8333\n-[2a02:c207:2012:4826::1]:8333\n-[2a02:c207:2014:4199::1]:8333\n-[2a02:c207:2014:5639::1]:8333\n-[2a02:c207:2014:9913::1]:18333\n-[2a02:c207:2015:3799::1]:8333\n-[2a02:c207:2015:3926::1]:8333\n-[2a02:c207:2015:5919::1]:8333\n-[2a02:c207:2015:6681::1]:8333\n-[2a02:c207:2016:2394::1]:8333\n-[2a02:c207:2016:9375::1]:8333\n-[2a02:c207:2017:1988::1]:8333\n-[2a02:c207:2017:3720::1]:8333\n-[2a02:c207:2017:4486::1]:8333\n-[2a02:c207:2017:4708::1]:8333\n-[2a02:c207:2017:5828::1]:8333\n-[2a02:c207:2017:7320::1]:8333\n-[2a02:c207:2017:8175::1]:8333\n-[2a02:c207:2017:8998::1]:8333\n-[2a02:c207:2018:1462::1]:8333\n-[2a02:c207:2018:3094::1]:8333\n-[2a02:c207:2018:3275::1]:8333\n-[2a02:c207:2018:3710::1]:8333\n-[2a02:c207:2018:4790::1]:8333\n-[2a02:c207:2018:7407::1]:8333\n-[2a02:c207:2019:1067::1]:8333\n-[2a02:c207:2019:1425::1]:8333\n-[2a02:c207:2019:2041::1]:8333\n-[2a02:c207:2019:248::1]:8333\n-[2a02:c207:2019:3592::1]:8333\n-[2a02:c207:3001:9320::1]:8333\n-[2a02:c207:3002:1287::1]:8333\n-[2a02:c207:3002:4187::1]:8333\n-[2a02:c207:3002:5642::1]:8333\n-[2a02:c207:3002:7150::1]:8333\n-[2a02:c207:3002:7222::1]:8333\n-[2a02:c207:3002:7610::1]:8333\n-[2a02:c207:3002:8456::1]:8333\n-[2a02:ce80:0:20::1]:8333\n-[2a02:e00:fff0:1b9::1]:8333\n-[2a02:e00:fff0:1b9::a]:8333\n-[2a02:e00:fff0:1e2::1]:8333\n-[2a03:b0c0:1:d0::69:3001]:8333\n-[2a03:b0c0:2:d0::3ba:b001]:8333\n-[2a03:b0c0:2:d0::8ce:4001]:8333\n-[2a03:b0c0:3:d0::116:5001]:8333\n-[2a03:b0c0:3:d0::12a:1]:8333\n-[2a03:b0c0:3:d0::23fb:6001]:8333\n-[2a03:b0c0:3:d0::409:1001]:8333\n-[2a03:b0c0:3:d0::44b8:9001]:8333\n-[2a03:b0c0:3:d0::44b8:a001]:8333\n-[2a03:b0c0:3:d0::44b8:e001]:8333\n-[2a03:b0c0:3:d0::44b8:f001]:8333\n-[2a03:b0c0:3:d0::44b9:1]:8333\n-[2a03:b0c0:3:d0::44b9:1001]:8333\n-[2a03:b0c0:3:d0::44b9:2001]:8333\n-[2a03:b0c0:3:d0::44b9:4001]:8333\n-[2a03:b0c0:3:d0::5e48:d001]:8333\n-[2a03:ee40:0:294:250:56ff:fe8d:4ad7]:8333\n-[2a04:2180:1:c:f000::15]:8333\n-[2a07:440:2000:20::ca0:1817]:8333\n-[2a0a:c800:1:1::4]:8333\n-226eupdnaouu4h2v.onion:8333\n-23wdfqkzttmenvki.onion:8333\n-2bfsxzluysybysnr.onion:8333\n-2f4xg7m3g6vtxqcd.onion:8333\n-2i5i6kvxoggngz67.onion:8333\n-336lqgffb4tg5gpm.onion:8333\n-342ouaetvqzgepjx.onion:8333\n-3mutzniftca5w7ou.onion:8333\n-3qpbpt4gkp3dxn2r.onion:8333\n-3r44ddzjitznyahw.onion:8333\n-3xucqntxp5ddoaz5.onion:8333\n-44walnmvlhcqa3c2.onion:8333\n-4ehtdyvvzhbbo6c5.onion:8333\n-4jekbh7cdlfda3ve.onion:8333\n-4mewwo2bfxk6lg3f.onion:8333\n-53tsjt6zq3iasv5q.onion:8333\n-546esc6botbjfbxb.onion:8333\n-55zzzsk7iqv6p3ew.onion:8333\n-56stijc6kcgw6flk.onion:8333\n-5elzwcg4xysogalo.onion:8333\n-5f4ysqk4eed4jcvj.onion:8333\n-5k3oxus2laabmyip.onion:8333\n-5ptuzplawb3svsos.onion:8333\n-5rmpsrrdb3vpfgzh.onion:8333\n-5wnkqzjzjehmq7hn.onion:8333\n-5xxsqhppii22pges.onion:8333\n-5ygszbkbbauzjx7m.onion:8333\n-5z2she4d6fvrdnme.onion:8333\n-64qrhyxglyjjhkne.onion:8333\n-6kn76kajckqg22ao.onion:8333\n-6m2iqgnqjxh7ulyk.onion:8333\n-6wcfnbb3vmaw6cwa.onion:8333\n-6zynxbbupfmnvc3g.onion:8333\n-7sns7raurpmllybi.onion:8333\n-7whaszg22pdkvfck.onion:8333\n-a3a6plzycomx5gqw.onion:8333\n-acs7hylaadjkt7mk.onion:8333\n-agpwcvixadbinyet.onion:8333\n-ajqvsylg5xd5vs3y.onion:8333\n-aktfeaqkbnk52bfx.onion:8333\n-albsennsmbsgxls3.onion:8333\n-alruzrdz7xcek67f.onion:8333\n-am6aq3dluz3njcnt.onion:8333\n-aoefyxgnpgaiw2xg.onion:8333\n-ap2frg2maqxpmkkd.onion:8333\n-ap4zz4imxbdl6plr.onion:8333\n-apbbvhk32myudnyy.onion:8333\n-arlocvowxtnlbpo3.onion:8333\n-b5d6etfljm2lje5y.onion:8333\n-bdwvcwafzpssqckj.onion:8333\n-brwqezn6le54w2bb.onion:8333\n-bxxvkb7czrxtvz2c.onion:8333\n-c2tpqkaz4ihjzwgb.onion:8333\n-cgcv32rbbbjyyzow.onion:8333\n-ckkqplgkzof45h2y.onion:8333\n-cpyfqbs4fs3vnbpf.onion:8333\n-ctzuzxnvla5xvb7z.onion:8333\n-cw4iqvcdy67b5tpw.onion:8333\n-cyvpgt25274i5b7c.onion:8333\n-dmudsr7x7edvyglt.onion:8333\n-dsbn53f2dwphv5mx.onion:8333\n-dssqdj6pxnzkth6i.onion:8333\n-e3zbephvcqmzcqkr.onion:8333\n-e63i7c7qazbdtjma.onion:8333\n-eiuaj2qjvbn737ph.onion:8333\n-ep2mjzox3kvb6ax4.onion:8333\n-eyvfxeefr4eokefr.onion:8333\n-f3nfioh27j2xlfe5.onion:8333\n-f5ezxphghknfbrtg.onion:8333\n-faewczjuzs4wfxhv.onion:8333\n-fefisckqu5raqe3c.onion:8333\n-fgbss353vsvandn7.onion:8333\n-fnlkrowsyrfeub6s.onion:8333\n-fno4aakpl6sg6y47.onion:8333\n-fnpnjdk24pzgcplx.onion:8333\n-foe4ymjz4hjhowud.onion:8333\n-fql436nz7qdis3nk.onion:8333\n-frhfucww5vghf7cv.onion:8333\n-frrxefv5dir5hm7l.onion:8333\n-fuckerolyuv7ebla.onion:8333\n-fz6nsij6jiyuwlsc.onion:8333\n-g4qfwcu5wm7ze5lg.onion:8333\n-gb5ypqt63du3wfhn.onion:8333\n-gcydj5id3jcxybzr.onion:8333\n-gfvnnnwcddfzosav.onion:8333\n-golevvyaydsduuw2.onion:8333\n-gq4su6stjnosqu67.onion:8333\n-hb4oreglor5x3xoa.onion:8333\n-hbuair37dxnblurw.onion:8333\n-hda7fvzq3voh7mu6.onion:8333\n-hnvk3pgvieyixyc2.onion:8333\n-ifwxwunja4pgwydg.onion:8333\n-ijmbmziunbszzxtj.onion:8333\n-in7r5ieo7ogkxbne.onion:8333\n-inysvhakrulg6lts.onion:8333\n-iwrwbwss7lfalfg4.onion:8333\n-ja7dmgkri7fi47xk.onion:8333\n-jtksnokusbzms7wl.onion:8333\n-jwxyqhp42cmwhqf3.onion:8333\n-jxrfatqtcevzwywz.onion:8333\n-jy6mvzb2ntutiye6.onion:8333\n-jydquxzliej6dm24.onion:8333\n-k2gdzvryrx7v6ksw.onion:8333\n-kkdas3qebkosygu5.onion:8333\n-kswfyurnglm65u7b.onion:8333\n-l2pruzr3mnhieuug.onion:8333\n-lgkgcd4brjmhrqna.onion:8333\n-lgkvbvro67jomosw.onion:8333\n-llljnatksfgtlhko.onion:8333\n-mdpt6w5sjwcnxtwy.onion:8333\n-mhjcepzc4gyadw2w.onion:8333\n-mn744hbioayn3ojs.onion:8333\n-mpakpgzu7umgu3ze.onion:8333\n-mvomwfdddqfqg3lq.onion:8333\n-mx5kdfxwowc3ymzg.onion:8333\n-n4m32zcp5hvomkt4.onion:8333\n-n73steqcmjz5hwni.onion:8333\n-nc2bgkhqohrmwbxr.onion:8333\n-nc6zlswwqqg7c5yz.onion:8333\n-nrrfwdmrm3imuebn.onion:8333\n-nrrmkgmulpgsbwlt.onion:8333\n-o2tku2dbsd6iumch.onion:8333\n-o72zyzrv77ea2bwu.onion:8333\n-ohgwa5y65z4eem7b.onion:8333\n-olvdu57g7rxwpcr4.onion:8333\n-onlzo775ogdpjn5x.onion:8333\n-otshttbd6v2k3jlz.onion:8333\n-owr5tm7ygw62z4vl.onion:8333\n-pcfhsdqzs6q63ryu.onion:8333\n-pffwqxvuldeq55zc.onion:8333\n-pgnz7kwc36rcucpu.onion:8333\n-ph4g7b4jsyuntvr4.onion:8333\n-pjghcivzkoersesd.onion:8333\n-pu7w3jfyrzp7sxsi.onion:8333\n-pxvkjp6sfb2f7foe.onion:8333\n-qaxm5spmx5d2k3up.onion:8333\n-qepth54daysmpy5y.onion:8333\n-qj6irqn2i73edff5.onion:8333\n-qjpejfzlwqqnzsol.onion:8333\n-qxe3bqjmrcepxpx4.onion:8333\n-rlonjm7ui6fdyz4h.onion:8333\n-rs635ss24ymwyqkw.onion:8333\n-sgiitogeoqslvkjv.onion:8333\n-spidernetimmmkth.onion:8333\n-tb7qlicrt6rdzxzd.onion:8333\n-thbjka62axzuwtnt.onion:8333\n-toguvy5upyuctudx.onion:8333\n-u7mpvxotmnqntyn5.onion:8333\n-uccmw67l4kgl646y.onion:8333\n-ueo6royc3775ioq7.onion:8333\n-ujsb2qcjk4t6234z.onion:8333\n-uub43p3artmornv5.onion:8333\n-uvb55mwvuy22mgm2.onion:8333\n-uzzyjgqlf47ackbr.onion:8333\n-v5fgr3fnz3nw663t.onion:8333\n-v5zs2sgjyr3glh6c.onion:8333\n-vk3qjdehyy4dwcxw.onion:8333\n-voy6xbvejox4xbax.onion:8333\n-vuiw75kgpcqke4mv.onion:8333\n-w3q47ucyajtfic76.onion:8333\n-wg6vwmbrzyyzapun.onion:8333\n-wgpfwxgy2dowienn.onion:8333\n-wjtmvsznvdclncau.onion:8333\n-xab45bpmmrl5g3by.onion:8333\n-xdlu3ujzieheouo7.onion:8333\n-xgykmaa2jjay7cfu.onion:8333\n-xnlu3tvakngy7tkp.onion:8333\n-xsn5icce45gs3qy7.onion:8333\n-ydonogjpjd3me45v.onion:8333\n-ykn7vof37bavxetd.onion:8333\n-yl525dwhvqis7ryc.onion:8333\n-yrbaccpbyge6xaba.onion:8333\n-yyuxafli7fqdizhq.onion:8333\n-z33nukt7ngik3cpe.onion:8333\n-zon2bbc2q2ihqt4c.onion:8333\n-zqjvtxskxonu4kzv.onion:8333\n+192.168.100.12:9333\n\\ No newline at end of file"
      },
      {
        "sha": "26962b2d7dcfb188d81661f8c367d215f58b5fe4",
        "filename": "contrib/verifybinaries/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/contrib/verifybinaries/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/contrib/verifybinaries/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifybinaries/README.md?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -5,7 +5,7 @@\n Make sure you obtain the proper release signing key and verify the fingerprint with several independent sources.\n \n ```sh\n-$ gpg --fingerprint \"Bitcoin Core binary release signing key\"\n+$ gpg --fingerprint \"BitcoinV Core binary release signing key\"\n pub   4096R/36C2E964 2015-06-24 [expires: 2017-02-13]\n       Key fingerprint = 01EA 5486 DE18 A882 D4C2  6845 90C8 019E 36C2 E964\n uid                  Wladimir J. van der Laan (Bitcoin Core binary release signing key) <laanwj@gmail.com>"
      },
      {
        "sha": "a44e00556c2a247a9d63cc29ab6f84be583dd7d0",
        "filename": "doc/Doxyfile.in",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/doc/Doxyfile.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/doc/Doxyfile.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/Doxyfile.in?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -32,7 +32,7 @@ DOXYFILE_ENCODING      = UTF-8\n # title of most generated pages and in a few other places.\n # The default value is: My Project.\n \n-PROJECT_NAME           = \"Bitcoin Core\"\n+PROJECT_NAME           = \"BitcoinV Core\"\n \n # The PROJECT_NUMBER tag can be used to enter a project or revision number. This\n # could be handy for archiving the generated documentation or if some version"
      },
      {
        "sha": "58bb05c4d7713752769da082ab47ee3350d92b48",
        "filename": "doc/REST-interface.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/doc/REST-interface.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/doc/REST-interface.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/REST-interface.md?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -91,7 +91,7 @@ Only supports JSON as output format.\n * bytes : (numeric) size of the TX mempool in bytes\n * usage : (numeric) total TX mempool memory usage\n * maxmempool : (numeric) maximum memory usage for the mempool in bytes\n-* mempoolminfee : (numeric) minimum feerate (BTC per KB) for tx to be accepted\n+* mempoolminfee : (numeric) minimum feerate (BTCV per KB) for tx to be accepted\n \n `GET /rest/mempool/contents.json`\n "
      },
      {
        "sha": "5bf2d6b59b870fb5678e55936ab2b47300a4682b",
        "filename": "doc/build-netbsd.md",
        "status": "modified",
        "additions": 11,
        "deletions": 41,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/doc/build-netbsd.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/doc/build-netbsd.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-netbsd.md?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -1,6 +1,6 @@\n NetBSD build guide\n ======================\n-(updated for NetBSD 8.0)\n+(updated for NetBSD 7.0)\n \n This guide describes how to build bitcoind and command-line utilities on NetBSD.\n \n@@ -15,65 +15,35 @@ You will need the following modules, which can be installed via pkgsrc or pkgin:\n autoconf\n automake\n boost\n+db4\n git\n gmake\n libevent\n libtool\n-pkg-config\n-python37\n-\n-git clone https://github.com/bitcoin/bitcoin.git\n+python27\n ```\n \n-See [dependencies.md](dependencies.md) for a complete overview.\n-\n-### Building BerkeleyDB\n-\n-BerkeleyDB is only necessary for the wallet functionality. To skip this, pass\n-`--disable-wallet` to `./configure` and skip to the next section.\n-\n-It is recommended to use Berkeley DB 4.8. You cannot use the BerkeleyDB library\n-from ports, for the same reason as boost above (g++/libstd++ incompatibility).\n-If you have to build it yourself, you can use [the installation script included\n-in contrib/](/contrib/install_db4.sh) like so:\n-\n-```shell\n-./contrib/install_db4.sh `pwd`\n+Download the source code:\n ```\n-\n-from the root of the repository. Then set `BDB_PREFIX` for the next section:\n-\n-```shell\n-export BDB_PREFIX=\"$PWD/db4\"\n+git clone https://github.com/bitcoin/bitcoin\n ```\n \n+See [dependencies.md](dependencies.md) for a complete overview.\n+\n ### Building Bitcoin Core\n \n **Important**: Use `gmake` (the non-GNU `make` will exit with an error).\n \n With wallet:\n ```\n ./autogen.sh\n-./configure --with-gui=no CPPFLAGS=\"-I/usr/pkg/include\" \\\n-    LDFLAGS=\"-L/usr/pkg/lib\" \\\n-    BOOST_CPPFLAGS=\"-I/usr/pkg/include\" \\\n-    BOOST_LDFLAGS=\"-L/usr/pkg/lib\" \\\n-    BDB_LIBS=\"-L${BDB_PREFIX}/lib -ldb_cxx-4.8\" \\\n-    BDB_CFLAGS=\"-I${BDB_PREFIX}/include\"\n+./configure CPPFLAGS=\"-I/usr/pkg/include\" LDFLAGS=\"-L/usr/pkg/lib\" BOOST_CPPFLAGS=\"-I/usr/pkg/include\" BOOST_LDFLAGS=\"-L/usr/pkg/lib\"\n+gmake\n ```\n \n Without wallet:\n ```\n ./autogen.sh\n-./configure --with-gui=no --disable-wallet \\\n-    CPPFLAGS=\"-I/usr/pkg/include\" \\\n-    LDFLAGS=\"-L/usr/pkg/lib\" \\\n-    BOOST_CPPFLAGS=\"-I/usr/pkg/include\" \\\n-    BOOST_LDFLAGS=\"-L/usr/pkg/lib\"\n-```\n-\n-Build and run the tests:\n-```bash\n-gmake # use -jX here for parallelism\n-gmake check\n+./configure --disable-wallet CPPFLAGS=\"-I/usr/pkg/include\" LDFLAGS=\"-L/usr/pkg/lib\" BOOST_CPPFLAGS=\"-I/usr/pkg/include\" BOOST_LDFLAGS=\"-L/usr/pkg/lib\"\n+gmake\n ```"
      },
      {
        "sha": "f865b6c8927b7d2f237ae3ad07c07202e7a348b5",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -53,8 +53,8 @@ Build Bitcoin Core\n     You can disable the GUI build by passing `--without-gui` to configure.\n \n         ./autogen.sh\n-        ./configure\n-        make\n+        ./configure --enable-debug\n+        make -j8\n \n 3.  It is recommended to build and run the unit tests:\n "
      },
      {
        "sha": "cea8a41b54767232f0dadbadf404a42d8fe56f1b",
        "filename": "doc/man/bitcoin-qt.1",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/doc/man/bitcoin-qt.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/doc/man/bitcoin-qt.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-qt.1?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -243,7 +243,7 @@ Relay non\\-P2SH multisig (default: 1)\n .HP\n \\fB\\-port=\\fR<port>\n .IP\n-Listen for connections on <port> (default: 8333 or testnet: 18333)\n+Listen for connections on <port> (default: 9333 or testnet: 19333)\n .HP\n \\fB\\-proxy=\\fR<ip:port>\n .IP\n@@ -319,15 +319,15 @@ Do not load the wallet and disable wallet RPC calls\n .HP\n \\fB\\-discardfee=\\fR<amt>\n .IP\n-The fee rate (in BTC/kB) that indicates your tolerance for discarding\n+The fee rate (in BTCV/kB) that indicates your tolerance for discarding\n change by adding it to the fee (default: 0.0001). Note: An output\n is discarded if it is dust at this rate, but we will always\n discard up to the dust relay fee and a discard fee above that is\n limited by the fee estimate for the longest target\n .HP\n \\fB\\-fallbackfee=\\fR<amt>\n .IP\n-A fee rate (in BTC/kB) that will be used when fee estimation has\n+A fee rate (in BTCV/kB) that will be used when fee estimation has\n insufficient data (default: 0.0002)\n .HP\n \\fB\\-keypool=\\fR<n>\n@@ -336,12 +336,12 @@ Set key pool size to <n> (default: 1000)\n .HP\n \\fB\\-mintxfee=\\fR<amt>\n .IP\n-Fees (in BTC/kB) smaller than this are considered zero fee for\n+Fees (in BTCV/kB) smaller than this are considered zero fee for\n transaction creation (default: 0.00001)\n .HP\n \\fB\\-paytxfee=\\fR<amt>\n .IP\n-Fee (in BTC/kB) to add to transactions you send (default: 0.00)\n+Fee (in BTCV/kB) to add to transactions you send (default: 0.00)\n .HP\n \\fB\\-rescan\\fR\n .IP\n@@ -447,7 +447,7 @@ Prepend debug output with timestamp (default: 1)\n .HP\n \\fB\\-maxtxfee=\\fR<amt>\n .IP\n-Maximum total fees (in BTC) to use in a single wallet transaction or raw\n+Maximum total fees (in BTCV) to use in a single wallet transaction or raw\n transaction; setting this too low may abort large transactions\n (default: 0.10)\n .HP\n@@ -492,7 +492,7 @@ Enable transaction replacement in the memory pool (default: 1)\n .HP\n \\fB\\-minrelaytxfee=\\fR<amt>\n .IP\n-Fees (in BTC/kB) smaller than this are considered zero fee for relaying,\n+Fees (in BTCV/kB) smaller than this are considered zero fee for relaying,\n mining and transaction creation (default: 0.00001)\n .HP\n \\fB\\-whitelistforcerelay\\fR\n@@ -513,7 +513,7 @@ Set maximum BIP141 block weight (default: 3996000)\n .HP\n \\fB\\-blockmintxfee=\\fR<amt>\n .IP\n-Set lowest fee rate (in BTC/kB) for transactions to be included in block\n+Set lowest fee rate (in BTCV/kB) for transactions to be included in block\n creation. (default: 0.00001)\n .PP\n RPC server options:"
      },
      {
        "sha": "05a64ef205f99f8002ed83540c9164517c4a3d84",
        "filename": "doc/man/bitcoind.1",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/doc/man/bitcoind.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/doc/man/bitcoind.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoind.1?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -243,7 +243,7 @@ Relay non\\-P2SH multisig (default: 1)\n .HP\n \\fB\\-port=\\fR<port>\n .IP\n-Listen for connections on <port> (default: 8333 or testnet: 18333)\n+Listen for connections on <port> (default: 9333 or testnet: 19333)\n .HP\n \\fB\\-proxy=\\fR<ip:port>\n .IP\n@@ -319,15 +319,15 @@ Do not load the wallet and disable wallet RPC calls\n .HP\n \\fB\\-discardfee=\\fR<amt>\n .IP\n-The fee rate (in BTC/kB) that indicates your tolerance for discarding\n+The fee rate (in BTCV/kB) that indicates your tolerance for discarding\n change by adding it to the fee (default: 0.0001). Note: An output\n is discarded if it is dust at this rate, but we will always\n discard up to the dust relay fee and a discard fee above that is\n limited by the fee estimate for the longest target\n .HP\n \\fB\\-fallbackfee=\\fR<amt>\n .IP\n-A fee rate (in BTC/kB) that will be used when fee estimation has\n+A fee rate (in BTCV/kB) that will be used when fee estimation has\n insufficient data (default: 0.0002)\n .HP\n \\fB\\-keypool=\\fR<n>\n@@ -336,12 +336,12 @@ Set key pool size to <n> (default: 1000)\n .HP\n \\fB\\-mintxfee=\\fR<amt>\n .IP\n-Fees (in BTC/kB) smaller than this are considered zero fee for\n+Fees (in BTCV/kB) smaller than this are considered zero fee for\n transaction creation (default: 0.00001)\n .HP\n \\fB\\-paytxfee=\\fR<amt>\n .IP\n-Fee (in BTC/kB) to add to transactions you send (default: 0.00)\n+Fee (in BTCV/kB) to add to transactions you send (default: 0.00)\n .HP\n \\fB\\-rescan\\fR\n .IP\n@@ -447,7 +447,7 @@ Prepend debug output with timestamp (default: 1)\n .HP\n \\fB\\-maxtxfee=\\fR<amt>\n .IP\n-Maximum total fees (in BTC) to use in a single wallet transaction or raw\n+Maximum total fees (in BTCV) to use in a single wallet transaction or raw\n transaction; setting this too low may abort large transactions\n (default: 0.10)\n .HP\n@@ -492,7 +492,7 @@ Enable transaction replacement in the memory pool (default: 1)\n .HP\n \\fB\\-minrelaytxfee=\\fR<amt>\n .IP\n-Fees (in BTC/kB) smaller than this are considered zero fee for relaying,\n+Fees (in BTCV/kB) smaller than this are considered zero fee for relaying,\n mining and transaction creation (default: 0.00001)\n .HP\n \\fB\\-whitelistforcerelay\\fR\n@@ -513,7 +513,7 @@ Set maximum BIP141 block weight (default: 3996000)\n .HP\n \\fB\\-blockmintxfee=\\fR<amt>\n .IP\n-Set lowest fee rate (in BTC/kB) for transactions to be included in block\n+Set lowest fee rate (in BTCV/kB) for transactions to be included in block\n creation. (default: 0.00001)\n .PP\n RPC server options:"
      },
      {
        "sha": "816c3594c6f672d00a0ee471cc27febce3387fd8",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 96,
        "deletions": 9,
        "changes": 105,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -1,6 +1,6 @@\n-Bitcoin Core version 0.17.x is now available from:\n+Bitcoin Core version 0.17.1 is now available from:\n \n-  <https://bitcoincore.org/bin/bitcoin-core-0.17.x/>\n+  <https://bitcoincore.org/bin/bitcoin-core-0.17.1/>\n \n This is a new major version release, including new features, various bugfixes\n and performance improvements, as well as updated translations.\n@@ -21,9 +21,7 @@ shut down (which might take a few minutes for older versions), then run the\n installer (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on Mac)\n or `bitcoind`/`bitcoin-qt` (on Linux).\n \n-If your node has a txindex, the txindex db will be migrated the first time you\n-run 0.17.0 or newer, which may take up to a few hours. Your node will not be\n-functional until this migration completes.\n+If your node has a txindex, the txindex db will be migrated the first time you run 0.17.0 or newer, which may take up to a few hours. Your node will not be functional until this migration completes.\n \n The first time you run version 0.15.0 or newer, your chainstate database will be converted to a\n new format, which will take anywhere from a few minutes to half an hour,\n@@ -60,18 +58,107 @@ support versions of macOS older than 10.10.\n Notable changes\n ===============\n \n-(todo)\n+`listtransactions` label support\n+--------------------------------\n \n-0.17.x change log\n+The `listtransactions` RPC `account` parameter which was deprecated in 0.17.0\n+and renamed to `dummy` has been un-deprecated and renamed again to `label`.\n+\n+When bitcoin is configured with the `-deprecatedrpc=accounts` setting, specifying\n+a label/account/dummy argument will return both outgoing and incoming\n+transactions. Without the `-deprecatedrpc=accounts` setting, it will only return\n+incoming transactions (because it used to be possible to create transactions\n+spending from specific accounts, but this is no longer possible with labels).\n+\n+When `-deprecatedrpc=accounts` is set, it's possible to pass the empty string \"\"\n+to list transactions that don't have any label. Without\n+`-deprecatedrpc=accounts`, passing the empty string is an error because returning\n+only non-labeled transactions is not generally useful behavior and can cause\n+confusion.\n+\n+0.17.1 change log\n =================\n \n-(todo)\n+### P2P protocol and network code\n+- #14685 `9406502` Fix a deserialization overflow edge case (kazcw)\n+- #14728 `b901578` Fix uninitialized read when stringifying an addrLocal (kazcw)\n+\n+### Wallet\n+- #14441 `5150acc` Restore ability to list incoming transactions by label (jnewbery)\n+- #13546 `91fa15a` Fix use of uninitialized value `bnb_used` in CWallet::CreateTransaction(\u2026) (practicalswift)\n+- #14310 `bb90695` Ensure wallet is unlocked before signing (gustavonalle)\n+- #14690 `5782fdc` Throw error if CPubKey is invalid during PSBT keypath serialization (instagibbs)\n+- #14852 `2528443` backport: [tests] Add `wallet_balance.py` (MarcoFalke)\n+- #14196 `3362a95` psbt: always drop the unnecessary utxo and convert non-witness utxo to witness when necessary (achow101)\n+- #14588 `70ee1f8` Refactor PSBT signing logic to enforce invariant and fix signing bug (gwillen)\n+- #14424 `89a9a9d` Stop requiring imported pubkey to sign non-PKH schemes (sipa, MeshCollider)\n+\n+### RPC and other APIs\n+- #14417 `fb9ad04` Fix listreceivedbyaddress not taking address as a string (etscrivner)\n+- #14596 `de5e48a` Bugfix: RPC: Add `address_type` named param for createmultisig (luke-jr)\n+- #14618 `9666dba` Make HTTP RPC debug logging more informative (practicalswift)\n+- #14197 `7bee414` [psbt] Convert non-witness UTXOs to witness if witness sig created (achow101)\n+- #14377 `a3fe125` Check that a separator is found for psbt inputs, outputs, and global map (achow101)\n+- #14356 `7a590d8` Fix converttopsbt permitsigdata arg, add basic test (instagibbs)\n+- #14453 `75b5d8c` Fix wallet unload during walletpassphrase timeout (promag)\n+\n+### GUI\n+- #14403 `0242b5a` Revert \"Force TLS1.0+ for SSL connections\" (real-or-random)\n+- #14593 `df5131b` Explicitly disable \"Dark Mode\" appearance on macOS (fanquake)\n+\n+### Build system\n+- #14647 `7edebed` Remove illegal spacing in darwin.mk (ch4ot1c)\n+- #14698 `ec71f06` Add bitcoin-tx.exe into Windows installer (ken2812221)\n+\n+### Tests and QA\n+- #13965 `29899ec` Fix extended functional tests fail (ken2812221)\n+- #14011 `9461f98` Disable wallet and address book Qt tests on macOS minimal platform (ryanofsky)\n+- #14180 `86fadee` Run all tests even if wallet is not compiled (MarcoFalke)\n+- #14122 `8bc1bad` Test `rpc_help.py` failed: Check whether ZMQ is enabled or not (Kvaciral)\n+- #14101 `96dc936` Use named args in validation acceptance tests (MarcoFalke)\n+- #14020 `24d796a` Add tests for RPC help (promag)\n+- #14052 `7ff32a6` Add some actual witness in `rpc_rawtransaction` (MarcoFalke)\n+- #14215 `b72fbab` Use correct python index slices in example test (sdaftuar)\n+- #14024 `06544fa` Add `TestNode::assert_debug_log` (MarcoFalke)\n+- #14658 `60f7a97` Add test to ensure node can generate all rpc help texts at runtime (MarcoFalke)\n+- #14632 `96f15e8` Fix a comment (fridokus)\n+- #14700 `f9db08e` Avoid race in `p2p_invalid_block` by waiting for the block request (MarcoFalke)\n+- #14845 `67225e2` Add `wallet_balance.py` (jnewbery)\n+\n+### Documentation\n+- #14161 `5f51fd6` doc/descriptors.md tweaks (ryanofsky)\n+- #14276 `85aacc4` Add autogen.sh in ARM Cross-compilation (walterwhite81)\n \n Credits\n =======\n \n Thanks to everyone who directly contributed to this release:\n \n-(todo)\n+- Andrew Chow\n+- Chun Kuan Lee\n+- David A. Harding\n+- Eric Scrivner\n+- fanquake\n+- fridokus\n+- Glenn Willen\n+- Gregory Sanders\n+- gustavonalle\n+- John Newbery\n+- Jon Layton\n+- Jonas Schnelli\n+- Jo\u00e3o Barbosa\n+- Kaz Wesley\n+- Kvaciral\n+- Luke Dashjr\n+- MarcoFalke\n+- MeshCollider\n+- Pieter Wuille\n+- practicalswift\n+- Russell Yanofsky\n+- Sjors Provoost\n+- Suhas Daftuar\n+- Tim Ruffing\n+- Walter\n+- Wladimir J. van der Laan\n \n As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/)."
      },
      {
        "sha": "be2727addbcc7406d3a5c69f440bf8e528695cb3",
        "filename": "share/examples/bitcoin.conf",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/share/examples/bitcoin.conf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/share/examples/bitcoin.conf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/examples/bitcoin.conf?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -44,11 +44,11 @@\n \n # Use as many addnode= settings as you like to connect to specific peers\n #addnode=69.164.218.197\n-#addnode=10.0.0.2:8333\n+#addnode=10.0.0.2:9333\n \n # Alternatively use as many connect= settings as you like to connect ONLY to specific peers\n #connect=69.164.218.197\n-#connect=10.0.0.1:8333\n+#connect=10.0.0.1:9333\n \n # Listening mode, enabled by default except when 'connect' is being used\n #listen=1"
      },
      {
        "sha": "0608cdd1f4a5bcf6f57187948acd2fd059c680b9",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -185,6 +185,7 @@ BITCOIN_CORE_H = \\\n   utiltime.h \\\n   validation.h \\\n   validationinterface.h \\\n+  variable_block_reward.h \\\n   versionbits.h \\\n   walletinitinterface.h \\\n   wallet/coincontrol.h \\\n@@ -255,6 +256,7 @@ libbitcoin_server_a_SOURCES = \\\n   ui_interface.cpp \\\n   validation.cpp \\\n   validationinterface.cpp \\\n+  variable_block_reward.cpp \\\n   versionbits.cpp \\\n   $(BITCOIN_CORE_H)\n \n@@ -376,6 +378,8 @@ libbitcoin_common_a_SOURCES = \\\n   base58.cpp \\\n   bech32.cpp \\\n   chainparams.cpp \\\n+  chain.cpp \\\n+  pow.cpp \\  \n   coins.cpp \\\n   compressor.cpp \\\n   core_read.cpp \\"
      },
      {
        "sha": "d8a2a263a5fc1b0a0f313231d99756c7ea5e0470",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -547,6 +547,7 @@ class CAddrMan\n         Check();\n         if (nAdd) {\n             LogPrint(BCLog::ADDRMAN, \"Added %i addresses from %s: %i tried, %i new\\n\", nAdd, source.ToString(), nTried, nNew);\n+            printf(\"Added %i addresses from %s: %i tried, %i new\\n\", nAdd, source.ToString().c_str(), nTried, nNew);\n         }\n         return nAdd > 0;\n     }"
      },
      {
        "sha": "3ce79c62bd27f997569e927a1f740fce6f0abe8a",
        "filename": "src/amount.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/amount.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/amount.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/amount.h?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -17,13 +17,13 @@ static const CAmount CENT = 1000000;\n /** No amount larger than this (in satoshi) is valid.\n  *\n  * Note that this constant is *not* the total money supply, which in Bitcoin\n- * currently happens to be less than 21,000,000 BTC for various reasons, but\n+ * currently happens to be less than 21,000,000,000 BTCV for various reasons, but\n  * rather a sanity check. As this sanity check is used by consensus-critical\n  * validation code, the exact value of the MAX_MONEY constant is consensus\n  * critical; in unusual circumstances like a(nother) overflow bug that allowed\n  * for the creation of coins out of thin air modification could lead to a fork.\n  * */\n-static const CAmount MAX_MONEY = 21000000 * COIN;\n+static const CAmount MAX_MONEY = 21000000000 * COIN;\n inline bool MoneyRange(const CAmount& nValue) { return (nValue >= 0 && nValue <= MAX_MONEY); }\n \n #endif //  BITCOIN_AMOUNT_H"
      },
      {
        "sha": "600c7e0f6196fd6cc9fa6ba298047bdf10236ec8",
        "filename": "src/arith_uint256.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/arith_uint256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/arith_uint256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/arith_uint256.cpp?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -1,3 +1,4 @@\n+// Copyright (c) 2018 The BitcoinV Core developers\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2018 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n@@ -260,3 +261,8 @@ arith_uint256 UintToArith256(const uint256 &a)\n         b.pn[x] = ReadLE32(a.begin() + x*4);\n     return b;\n }\n+\n+uint32_t get_32bit_word_from_uint256(const uint256 &a)\n+{\n+    return ReadLE32(a.begin());\n+}"
      },
      {
        "sha": "bb2a2f8438e834a3772b0a3f8993025dbdaca163",
        "filename": "src/arith_uint256.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/arith_uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/arith_uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/arith_uint256.h?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -1,3 +1,4 @@\n+// Copyright (c) 2018 The BitcoinV Core developers\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2018 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n@@ -285,4 +286,6 @@ class arith_uint256 : public base_uint<256> {\n uint256 ArithToUint256(const arith_uint256 &);\n arith_uint256 UintToArith256(const uint256 &);\n \n+uint32_t get_32bit_word_from_uint256(const uint256 &a);\n+\n #endif // BITCOIN_ARITH_UINT256_H"
      },
      {
        "sha": "131ace9bfdcd5200fa06d3eccb3b4889e96cacb5",
        "filename": "src/bitcoin-cli-res.rc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/bitcoin-cli-res.rc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/bitcoin-cli-res.rc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli-res.rc?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -16,7 +16,7 @@ BEGIN\n     BEGIN\n         BLOCK \"040904E4\" // U.S. English - multilingual (hex)\n         BEGIN\n-            VALUE \"CompanyName\",        \"Bitcoin\"\n+            VALUE \"CompanyName\",        \"BitcoinV\"\n             VALUE \"FileDescription\",    \"bitcoin-cli (JSON-RPC client for \" PACKAGE_NAME \")\"\n             VALUE \"FileVersion\",        VER_FILEVERSION_STR\n             VALUE \"InternalName\",       \"bitcoin-cli\""
      },
      {
        "sha": "b29587f5b57370060017fef249968e735bcb39c5",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 127,
        "deletions": 54,
        "changes": 181,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -1,11 +1,12 @@\n+// Copyright (c) 2018 The BitcoinV Core developers\n // Copyright (c) 2010 Satoshi Nakamoto\n // Copyright (c) 2009-2018 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <chainparams.h>\n #include <consensus/merkle.h>\n-\n+#include \"pow.h\"\n #include <tinyformat.h>\n #include <util.h>\n #include <utilstrencodings.h>\n@@ -14,6 +15,7 @@\n \n #include <chainparamsseeds.h>\n \n+\n static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesisOutputScript, uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)\n {\n     CMutableTransaction txNew;\n@@ -46,9 +48,12 @@ static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesi\n  *     CTxOut(nValue=50.00000000, scriptPubKey=0x5F1DF16B2B704C8A578D0B)\n  *   vMerkleTree: 4a5e1e\n  */\n+// $ date --date='@1544800000'\n+// Fri Dec 14 09:06:40 CST 2018\n+\n static CBlock CreateGenesisBlock(uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)\n-{\n-    const char* pszTimestamp = \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\";\n+{  \n+    const char* pszTimestamp = \"Keep the little guys mining, here is bitcoinV - 14/Dec/2018\";\n     const CScript genesisOutputScript = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n     return CreateGenesisBlock(pszTimestamp, genesisOutputScript, nTime, nNonce, nBits, nVersion, genesisReward);\n }\n@@ -74,19 +79,21 @@ class CMainParams : public CChainParams {\n public:\n     CMainParams() {\n         strNetworkID = \"main\";\n-        consensus.nSubsidyHalvingInterval = 210000;\n+        consensus.nSubsidyHalvingInterval = 2100000; // #blocks before halving occurs. every 4 years\n         consensus.BIP16Exception = uint256S(\"0x00000000000002dc756eebf4f49723ed8d30cc28a5f108eb94b1ba88ac4f9c22\");\n         consensus.BIP34Height = 227931;\n         consensus.BIP34Hash = uint256S(\"0x000000000000024b89b42a942fe0d9fea3bb44ab7bd1b19115dd6a759c0808b8\");\n         consensus.BIP65Height = 388381; // 000000000000000004c2b624ed5d7756c508d90fd0da2c7c679febfa6c4735f0\n         consensus.BIP66Height = 363725; // 00000000000000000379eaa19dce8c9b722d46ae6a57c2f1a988119488b50931\n-        consensus.powLimit = uint256S(\"00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n-        consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n-        consensus.nPowTargetSpacing = 10 * 60;\n+        consensus.powLimit = uint256S(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n+        consensus.nPowTargetTimespan = 10 * 60; // difficulty update time in seconds\n+        consensus.nPowTargetSpacing = 1 * 60; // block time in seconds\n         consensus.fPowAllowMinDifficultyBlocks = false;\n         consensus.fPowNoRetargeting = false;\n-        consensus.nRuleChangeActivationThreshold = 1916; // 95% of 2016\n-        consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n+        \n+        consensus.nMinerConfirmationWindow = consensus.nPowTargetTimespan / consensus.nPowTargetSpacing;\n+        consensus.nRuleChangeActivationThreshold = (uint32_t)(0.95*consensus.nMinerConfirmationWindow);\n+\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n@@ -101,11 +108,16 @@ class CMainParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = 1479168000; // November 15th, 2016.\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = 1510704000; // November 15th, 2017.\n \n+        // nMinimumChainWork is a value that is updated at every release. It is retrieved from the Debug command\n+        //            getblockchaininfo \n+        // RPC of a node that is up at the time of release. nMinimumChainWork is updated at the same time as assumevalid. \n+        // It is calculated by summing the work done in each block which is calculated by doing 2^256/(target+1)\n+\n         // The best chain should have at least this much work.\n-        consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000028822fef1c230963535a90d\");\n+        consensus.nMinimumChainWork = uint256S(\"0000000000000000000000000000000000000000000000000000000000010001\");\n \n         // By default assume that the signatures in ancestors of this block are valid.\n-        consensus.defaultAssumeValid = uint256S(\"0x0000000000000000002e63058c023a9a1de233554f28c7b21380b6c9003f36a8\"); //534292\n+        consensus.defaultAssumeValid = uint256S(\"00009a004b86c066b21aaffe2325a2bf5cb80ccf572c137cb24086cc83ca0542\");\n \n         /**\n          * The message start string is designed to be unlikely to occur in normal data.\n@@ -116,26 +128,58 @@ class CMainParams : public CChainParams {\n         pchMessageStart[1] = 0xbe;\n         pchMessageStart[2] = 0xb4;\n         pchMessageStart[3] = 0xd9;\n-        nDefaultPort = 8333;\n+        nDefaultPort = 9333;\n         nPruneAfterHeight = 100000;\n \n-        genesis = CreateGenesisBlock(1231006505, 2083236893, 0x1d00ffff, 1, 50 * COIN);\n+        uint32_t nTime=1544800000;\n+        uint32_t nNonce=485334016;\n+        \n+        // Difficulty bits:\n+        // Using following formula target can be obtained from any block. For example if a target packed in a block appears as 0x1b0404cb its hexadecimal version will look as following:\n+        // 0x0404cb * 2**(8*(0x1b - 3)) = 0x00000000000404CB000000000000000000000000000000000000000000000000\n+\n+        genesis = CreateGenesisBlock(nTime, nNonce, 0x1f00ffff, 1, 50 * COIN);\n+\n+        // while(!CheckProofOfWork(genesis.GetHash(), genesis.nBits, consensus)){ \n+        //     ++genesis.nNonce;          \n+        // }\n+\n+\n         consensus.hashGenesisBlock = genesis.GetHash();\n-        assert(consensus.hashGenesisBlock == uint256S(\"0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\"));\n-        assert(genesis.hashMerkleRoot == uint256S(\"0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"));\n-\n-        // Note that of those which support the service bits prefix, most only support a subset of\n-        // possible options.\n-        // This is fine at runtime as we'll fall back to using them as a oneshot if they don't support the\n-        // service bits we want, but we should get them updated to support all service bits wanted by any\n-        // release ASAP to avoid it where possible.\n-        vSeeds.emplace_back(\"seed.bitcoin.sipa.be\"); // Pieter Wuille, only supports x1, x5, x9, and xd\n-        vSeeds.emplace_back(\"dnsseed.bluematt.me\"); // Matt Corallo, only supports x9\n-        vSeeds.emplace_back(\"dnsseed.bitcoin.dashjr.org\"); // Luke Dashjr\n-        vSeeds.emplace_back(\"seed.bitcoinstats.com\"); // Christian Decker, supports x1 - xf\n-        vSeeds.emplace_back(\"seed.bitcoin.jonasschnelli.ch\"); // Jonas Schnelli, only supports x1, x5, x9, and xd\n-        vSeeds.emplace_back(\"seed.btc.petertodd.org\"); // Peter Todd, only supports x1, x5, x9, and xd\n-        vSeeds.emplace_back(\"seed.bitcoin.sprovoost.nl\"); // Sjors Provoost\n+        std::cout << \"consensus.hashGenesisBlock: \" << consensus.hashGenesisBlock.ToString() << std::endl;\n+        std::cout << \"genesis.hashMerkleRoot: \" << genesis.hashMerkleRoot.ToString() << std::endl;   \n+        std::cout << \"genesis.nNonce: \" << genesis.nNonce << std::endl;\n+        // consensus.hashGenesisBlock: c12a6d0e08a807bbdcfef151cdcb6e2f7c5d6ac66f6e1de22e1c950e25c6a183\n+        // genesis.hashMerkleRoot:     c41041da878b479cd4e0537bf00525f1738c42e36e30b9214a7bfa7358fe89d0\n+                                                         \n+        assert(consensus.hashGenesisBlock == uint256S(\"0x00009a004b86c066b21aaffe2325a2bf5cb80ccf572c137cb24086cc83ca0542\"));\n+        assert(genesis.hashMerkleRoot == uint256S(\"0xc41041da878b479cd4e0537bf00525f1738c42e36e30b9214a7bfa7358fe89d0\"));\n+\n+\n+        // The domains listed in chainparams.cpp are for DNS seeders. DNS seeders are not nodes themselves, \n+        // but rather are DNS servers that serve the IP addresses of nodes that are available to be connected \n+        // to. These can be connected to for both a normal connection and just one to retrieve more IP addresses \n+        // of nodes. These are only used for first time boot up.\n+        vSeeds.emplace_back(\"seed1.bitcoinv.org\");\n+        vSeeds.emplace_back(\"seed2.bitcoinv.org\");\n+        vSeeds.emplace_back(\"seed3.bitcoinv.org\");\n+        vSeeds.emplace_back(\"seed4.bitcoinv.org\");\n+\n+        vSeeds.emplace_back(\"seed1.bitcoinv.io\");\n+        vSeeds.emplace_back(\"seed2.bitcoinv.io\");\n+        vSeeds.emplace_back(\"seed3.bitcoinv.io\");\n+        vSeeds.emplace_back(\"seed4.bitcoinv.io\");\n+\n+        vSeeds.emplace_back(\"seed1.bitcoinvbr.org\");\n+        vSeeds.emplace_back(\"seed2.bitcoinvbr.org\");\n+        vSeeds.emplace_back(\"seed3.bitcoinvbr.org\");\n+        vSeeds.emplace_back(\"seed4.bitcoinvbr.org\");\n+\n+        vSeeds.emplace_back(\"seed1.bitcoinvbr.com\");\n+        vSeeds.emplace_back(\"seed2.bitcoinvbr.com\");\n+        vSeeds.emplace_back(\"seed3.bitcoinvbr.com\");\n+        vSeeds.emplace_back(\"seed4.bitcoinvbr.com\");\n+\n \n         base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,0);\n         base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,5);\n@@ -153,27 +197,18 @@ class CMainParams : public CChainParams {\n \n         checkpointData = {\n             {\n-                { 11111, uint256S(\"0x0000000069e244f73d78e8fd29ba2fd2ed618bd6fa2ee92559f542fdb26e7c1d\")},\n-                { 33333, uint256S(\"0x000000002dd5588a74784eaa7ab0507a18ad16a236e7b1ce69f00d7ddfb5d0a6\")},\n-                { 74000, uint256S(\"0x0000000000573993a3c9e41ce34471c079dcf5f52a0e824a81e7f953b8661a20\")},\n-                {105000, uint256S(\"0x00000000000291ce28027faea320c8d2b054b2e0fe44a773f3eefb151d6bdc97\")},\n-                {134444, uint256S(\"0x00000000000005b12ffd4cd315cd34ffd4a594f430ac814c91184a0d42d2b0fe\")},\n-                {168000, uint256S(\"0x000000000000099e61ea72015e79632f216fe6cb33d7899acb35b75c8303b763\")},\n-                {193000, uint256S(\"0x000000000000059f452a5f7340de6682a977387c17010ff6e6c3bd83ca8b1317\")},\n-                {210000, uint256S(\"0x000000000000048b95347e83192f69cf0366076336c639f9b7228e9ba171342e\")},\n-                {216116, uint256S(\"0x00000000000001b4f4b433e81ee46494af945cf96014816a4e2370f11b23df4e\")},\n-                {225430, uint256S(\"0x00000000000001c108384350f74090433e7fcf79a606b8e797f065b130575932\")},\n-                {250000, uint256S(\"0x000000000000003887df1f29024b06fc2200b55f8af8f35453d7be294df2d214\")},\n-                {279000, uint256S(\"0x0000000000000001ae8c72a0b0c301f67e3afca10e819efa9041e458e9bd7e40\")},\n-                {295000, uint256S(\"0x00000000000000004d9b4ef50f0f9d686fd69db2e03af35a100370c64632a983\")},\n+                {   0, uint256S(\"0009a004b86c066b21aaffe2325a2bf5cb80ccf572c137cb24086cc83ca0542\")},\n+                { 237, uint256S(\"00000221ffbb7ffb69bb2d719d691a15b1080d0a267dbd3d7050246ee936f4a3\")},\n+                { 598, uint256S(\"00000402df52f21af77410b178295c554c04774065553942ecc7a43ebe808567\")},\n+                \n             }\n         };\n \n         chainTxData = ChainTxData{\n-            // Data from rpc: getchaintxstats 4096 0000000000000000002e63058c023a9a1de233554f28c7b21380b6c9003f36a8\n-            /* nTime    */ 1532884444,\n-            /* nTxCount */ 331282217,\n-            /* dTxRate  */ 2.4\n+            // type     getchaintxstats    in debug console\n+            /* nTime    */ 1544800000,\n+            /* nTxCount */ 1,\n+            /* dTxRate  */ 0.9900000\n         };\n \n         /* disable fallback fee on mainnet */\n@@ -225,13 +260,32 @@ class CTestNetParams : public CChainParams {\n         pchMessageStart[1] = 0x11;\n         pchMessageStart[2] = 0x09;\n         pchMessageStart[3] = 0x07;\n-        nDefaultPort = 18333;\n+        nDefaultPort = 19333;\n         nPruneAfterHeight = 1000;\n \n-        genesis = CreateGenesisBlock(1296688602, 414098458, 0x1d00ffff, 1, 50 * COIN);\n+        uint32_t nTime=1544800000;\n+        uint32_t nNonce=485334016;\n+        \n+        // Difficulty bits:\n+        // Using following formula target can be obtained from any block. For example if a target packed in a block appears as 0x1b0404cb its hexadecimal version will look as following:\n+        // 0x0404cb * 2**(8*(0x1b - 3)) = 0x00000000000404CB000000000000000000000000000000000000000000000000\n+\n+        genesis = CreateGenesisBlock(nTime, nNonce, 0x1f00ffff, 1, 50 * COIN);\n+\n+        // while(!CheckProofOfWork(genesis.GetHash(), genesis.nBits, consensus)){ \n+        //     ++genesis.nNonce;          \n+        // }\n+\n+\n         consensus.hashGenesisBlock = genesis.GetHash();\n-        assert(consensus.hashGenesisBlock == uint256S(\"0x000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943\"));\n-        assert(genesis.hashMerkleRoot == uint256S(\"0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"));\n+        std::cout << \"consensus.hashGenesisBlock: \" << consensus.hashGenesisBlock.ToString() << std::endl;\n+        std::cout << \"genesis.hashMerkleRoot: \" << genesis.hashMerkleRoot.ToString() << std::endl;   \n+        std::cout << \"genesis.nNonce: \" << genesis.nNonce << std::endl;\n+        // consensus.hashGenesisBlock: c12a6d0e08a807bbdcfef151cdcb6e2f7c5d6ac66f6e1de22e1c950e25c6a183\n+        // genesis.hashMerkleRoot:     c41041da878b479cd4e0537bf00525f1738c42e36e30b9214a7bfa7358fe89d0\n+                                                         \n+        assert(consensus.hashGenesisBlock == uint256S(\"0x00009a004b86c066b21aaffe2325a2bf5cb80ccf572c137cb24086cc83ca0542\"));\n+        assert(genesis.hashMerkleRoot == uint256S(\"0xc41041da878b479cd4e0537bf00525f1738c42e36e30b9214a7bfa7358fe89d0\"));\n \n         vFixedSeeds.clear();\n         vSeeds.clear();\n@@ -258,7 +312,7 @@ class CTestNetParams : public CChainParams {\n \n         checkpointData = {\n             {\n-                {546, uint256S(\"000000002a936ca763904c3c35fce2f3556c559c0214345d31b1bcebf76acb70\")},\n+                {1, uint256S(\"0x00009a004b86c066b21aaffe2325a2bf5cb80ccf572c137cb24086cc83ca0542\")},\n             }\n         };\n \n@@ -317,10 +371,29 @@ class CRegTestParams : public CChainParams {\n         nDefaultPort = 18444;\n         nPruneAfterHeight = 1000;\n \n-        genesis = CreateGenesisBlock(1296688602, 2, 0x207fffff, 1, 50 * COIN);\n+        uint32_t nTime=1544800000;\n+        uint32_t nNonce=485334016;\n+        \n+        // Difficulty bits:\n+        // Using following formula target can be obtained from any block. For example if a target packed in a block appears as 0x1b0404cb its hexadecimal version will look as following:\n+        // 0x0404cb * 2**(8*(0x1b - 3)) = 0x00000000000404CB000000000000000000000000000000000000000000000000\n+\n+        genesis = CreateGenesisBlock(nTime, nNonce, 0x1f00ffff, 1, 50 * COIN);\n+\n+        // while(!CheckProofOfWork(genesis.GetHash(), genesis.nBits, consensus)){ \n+        //     ++genesis.nNonce;          \n+        // }\n+\n+\n         consensus.hashGenesisBlock = genesis.GetHash();\n-        assert(consensus.hashGenesisBlock == uint256S(\"0x0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"));\n-        assert(genesis.hashMerkleRoot == uint256S(\"0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"));\n+        std::cout << \"consensus.hashGenesisBlock: \" << consensus.hashGenesisBlock.ToString() << std::endl;\n+        std::cout << \"genesis.hashMerkleRoot: \" << genesis.hashMerkleRoot.ToString() << std::endl;   \n+        std::cout << \"genesis.nNonce: \" << genesis.nNonce << std::endl;\n+        // consensus.hashGenesisBlock: c12a6d0e08a807bbdcfef151cdcb6e2f7c5d6ac66f6e1de22e1c950e25c6a183\n+        // genesis.hashMerkleRoot:     c41041da878b479cd4e0537bf00525f1738c42e36e30b9214a7bfa7358fe89d0\n+                                                         \n+        assert(consensus.hashGenesisBlock == uint256S(\"0x00009a004b86c066b21aaffe2325a2bf5cb80ccf572c137cb24086cc83ca0542\"));\n+        assert(genesis.hashMerkleRoot == uint256S(\"0xc41041da878b479cd4e0537bf00525f1738c42e36e30b9214a7bfa7358fe89d0\"));\n \n         vFixedSeeds.clear(); //!< Regtest mode doesn't have any fixed seeds.\n         vSeeds.clear();      //!< Regtest mode doesn't have any DNS seeds.\n@@ -331,7 +404,7 @@ class CRegTestParams : public CChainParams {\n \n         checkpointData = {\n             {\n-                {0, uint256S(\"0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\")},\n+                {0, uint256S(\"0x00009a004b86c066b21aaffe2325a2bf5cb80ccf572c137cb24086cc83ca0542\")},\n             }\n         };\n "
      },
      {
        "sha": "d622772b65a2ab59a0f58c423ee753ac0aa70a0e",
        "filename": "src/chainparamsseeds.h",
        "status": "modified",
        "additions": 8,
        "deletions": 1275,
        "changes": 1283,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/chainparamsseeds.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/chainparamsseeds.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsseeds.h?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4"
      },
      {
        "sha": "fc4f2c1b7baf3fbb590cff2415a466a24287b290",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 8,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -1,3 +1,4 @@\n+// Copyright (c) 2018 The BitcoinV Core developers\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2018 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n@@ -96,7 +97,7 @@ void BlockAssembler::resetBlock()\n     nFees = 0;\n }\n \n-std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& scriptPubKeyIn, bool fMineWitnessTx)\n+std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& scriptPubKeyIn, uint64_t extra_subsidy, bool fMineWitnessTx)\n {\n     int64_t nTimeStart = GetTimeMicros();\n \n@@ -153,11 +154,19 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n \n     // Create coinbase transaction.\n     CMutableTransaction coinbaseTx;\n+\n+    if (extra_subsidy < 1)\n+    {\n+        extra_subsidy = 1;\n+    }\n+    //std::cout << \"Miner Requesting a BLOCK REWARD of: \" << std::dec << GetBlockSubsidy(nHeight, chainparams.GetConsensus()) * extra_subsidy << std::endl;\n+    \n+\n     coinbaseTx.vin.resize(1);\n     coinbaseTx.vin[0].prevout.SetNull();\n     coinbaseTx.vout.resize(1);\n     coinbaseTx.vout[0].scriptPubKey = scriptPubKeyIn;\n-    coinbaseTx.vout[0].nValue = nFees + GetBlockSubsidy(nHeight, chainparams.GetConsensus());\n+    coinbaseTx.vout[0].nValue = nFees + GetBlockSubsidy(nHeight, chainparams.GetConsensus()) * extra_subsidy;\n     coinbaseTx.vin[0].scriptSig = CScript() << nHeight << OP_0;\n     pblock->vtx[0] = MakeTransactionRef(std::move(coinbaseTx));\n     pblocktemplate->vchCoinbaseCommitment = GenerateCoinbaseCommitment(*pblock, pindexPrev, chainparams.GetConsensus());\n@@ -436,12 +445,12 @@ void BlockAssembler::addPackageTxs(int &nPackagesSelected, int &nDescendantsUpda\n void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned int& nExtraNonce)\n {\n     // Update nExtraNonce\n-    static uint256 hashPrevBlock;\n-    if (hashPrevBlock != pblock->hashPrevBlock)\n-    {\n-        nExtraNonce = 0;\n-        hashPrevBlock = pblock->hashPrevBlock;\n-    }\n+    // static uint256 hashPrevBlock;\n+    // if (hashPrevBlock != pblock->hashPrevBlock)\n+    // {\n+    //     nExtraNonce = 0;\n+    //     hashPrevBlock = pblock->hashPrevBlock;\n+    // }\n     ++nExtraNonce;\n     unsigned int nHeight = pindexPrev->nHeight+1; // Height first in coinbase required for block.version=2\n     CMutableTransaction txCoinbase(*pblock->vtx[0]);"
      },
      {
        "sha": "52a2bbf14f71af9ab9a0dd2b2a1155bcf62b7f6e",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -1,3 +1,4 @@\n+// Copyright (c) 2018 The BitcoinV Core developers\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2018 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n@@ -157,7 +158,7 @@ class BlockAssembler\n     BlockAssembler(const CChainParams& params, const Options& options);\n \n     /** Construct a new block template with coinbase to scriptPubKeyIn */\n-    std::unique_ptr<CBlockTemplate> CreateNewBlock(const CScript& scriptPubKeyIn, bool fMineWitnessTx=true);\n+    std::unique_ptr<CBlockTemplate> CreateNewBlock(const CScript& scriptPubKeyIn, uint64_t extra_subsidy=0, bool fMineWitnessTx=true);\n \n private:\n     // utility functions"
      },
      {
        "sha": "0fd67c43e14fb6cf32d6638beb5184952745e755",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 13,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -1,3 +1,4 @@\n+// Copyright (c) 2018 The BitcoinV Core developers\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2018 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n@@ -1637,7 +1638,8 @@ void CConnman::ThreadDNSAddressSeed()\n             std::vector<CNetAddr> vIPs;\n             std::vector<CAddress> vAdd;\n             ServiceFlags requiredServiceBits = GetDesirableServiceFlags(NODE_NONE);\n-            std::string host = strprintf(\"x%x.%s\", requiredServiceBits, seed);\n+            //std::string host = strprintf(\"x%x.%s\", requiredServiceBits, seed);\n+            std::string host = strprintf(\"%s\", seed);\n             CNetAddr resolveSource;\n             if (!resolveSource.SetInternal(host)) {\n                 continue;\n@@ -1665,17 +1667,6 @@ void CConnman::ThreadDNSAddressSeed()\n     LogPrintf(\"%d addresses found from DNS seeds\\n\", found);\n }\n \n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n void CConnman::DumpAddresses()\n {\n     int64_t nStart = GetTimeMillis();\n@@ -1796,7 +1787,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n         // Choose an address to connect to based on most recently seen\n         //\n         CAddress addrConnect;\n-\n+ \n         // Only connect out to one peer per network group (/16 for IPv4).\n         int nOutbound = 0;\n         std::set<std::vector<unsigned char> > setConnected;"
      },
      {
        "sha": "b1c6911ebed0058927f6b2a1727171777ba3522f",
        "filename": "src/policy/feerate.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/policy/feerate.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/policy/feerate.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/feerate.cpp?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -1,3 +1,4 @@\n+// Copyright (c) 2018 The BitcoinV Core developers\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2018 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n@@ -7,7 +8,7 @@\n \n #include <tinyformat.h>\n \n-const std::string CURRENCY_UNIT = \"BTC\";\n+const std::string CURRENCY_UNIT = \"BTCV\";\n \n CFeeRate::CFeeRate(const CAmount& nFeePaid, size_t nBytes_)\n {"
      },
      {
        "sha": "df0b356cea05ce5fbcac347691880494c0a60c7d",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -1,3 +1,4 @@\n+// Copyright (c) 2018 The BitcoinV Core developers\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2018 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n@@ -573,7 +574,7 @@ void CBlockPolicyEstimator::processTransaction(const CTxMemPoolEntry& entry, boo\n     }\n     trackedTxs++;\n \n-    // Feerates are stored and reported as BTC-per-kb:\n+    // Feerates are stored and reported as BTCV-per-kb:\n     CFeeRate feeRate(entry.GetFee(), entry.GetTxSize());\n \n     mapMemPoolTxs[hash].blockHeight = txHeight;\n@@ -603,7 +604,7 @@ bool CBlockPolicyEstimator::processBlockTx(unsigned int nBlockHeight, const CTxM\n         return false;\n     }\n \n-    // Feerates are stored and reported as BTC-per-kb:\n+    // Feerates are stored and reported as BTCV-per-kb:\n     CFeeRate feeRate(entry->GetFee(), entry->GetTxSize());\n \n     feeStats->Record(blocksToConfirm, (double)feeRate.GetFeePerK());"
      },
      {
        "sha": "137af2f14ecd0fc1ae4e6436632829d7ecdb2b70",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 1,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -1,3 +1,4 @@\n+// Copyright (c) 2018 The BitcoinV Core developers\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2018 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n@@ -9,6 +10,7 @@\n #include <chain.h>\n #include <primitives/block.h>\n #include <uint256.h>\n+#include <variable_block_reward.h>\n \n unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params& params)\n {\n@@ -76,7 +78,7 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&\n     bool fNegative;\n     bool fOverflow;\n     arith_uint256 bnTarget;\n-\n+ \n     bnTarget.SetCompact(nBits, &fNegative, &fOverflow);\n \n     // Check range\n@@ -89,3 +91,26 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&\n \n     return true;\n }\n+\n+bool CheckProofOfWork(int height, uint256 hash, CBlock &block, const Consensus::Params& params)\n+{\n+\n+    if ( !CheckProofOfWork( hash, block.nBits, params) )\n+    {\n+        return false;\n+    }\n+\n+\n+    // now check for VBR\n+    CAmount maxAllowedSubsidy = GetBlockSubsidyVBR( height, params, block, false);\n+\n+    uint64_t miners_specified_subsidy = block.vtx[0]->vout[0].nValue;\n+\n+    if ( miners_specified_subsidy <= maxAllowedSubsidy )\n+    {\n+        // miner's specified block rewad is ok, not too big.\n+        return true;\n+    }\n+\n+    return false;\n+}"
      },
      {
        "sha": "2287617dc5bfdd02d5c02538164bfea3708d0e95",
        "filename": "src/pow.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/pow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/pow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.h?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -1,3 +1,4 @@\n+// Copyright (c) 2018 The BitcoinV Core developers\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2018 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n@@ -7,6 +8,7 @@\n #define BITCOIN_POW_H\n \n #include <consensus/params.h>\n+#include <primitives/block.h>\n \n #include <stdint.h>\n \n@@ -19,5 +21,6 @@ unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nF\n \n /** Check whether a block hash satisfies the proof-of-work requirement specified by nBits */\n bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&);\n+bool CheckProofOfWork(int height, uint256 hash, CBlock &block, const Consensus::Params& params);\n \n #endif // BITCOIN_POW_H"
      },
      {
        "sha": "6755e9d2075664977d2dbd62d91f118e79f5dc4f",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -1,3 +1,4 @@\n+// Copyright (c) 2018 The BitcoinV Core developers\n // Copyright (c) 2011-2018 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n@@ -234,7 +235,7 @@ void BitcoinGUI::createActions()\n     tabGroup->addAction(overviewAction);\n \n     sendCoinsAction = new QAction(platformStyle->SingleColorIcon(\":/icons/send\"), tr(\"&Send\"), this);\n-    sendCoinsAction->setStatusTip(tr(\"Send coins to a Bitcoin address\"));\n+    sendCoinsAction->setStatusTip(tr(\"Send coins to a BitcoinV address\"));\n     sendCoinsAction->setToolTip(sendCoinsAction->statusTip());\n     sendCoinsAction->setCheckable(true);\n     sendCoinsAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_2));\n@@ -245,7 +246,7 @@ void BitcoinGUI::createActions()\n     sendCoinsMenuAction->setToolTip(sendCoinsMenuAction->statusTip());\n \n     receiveCoinsAction = new QAction(platformStyle->SingleColorIcon(\":/icons/receiving_addresses\"), tr(\"&Receive\"), this);\n-    receiveCoinsAction->setStatusTip(tr(\"Request payments (generates QR codes and bitcoin: URIs)\"));\n+    receiveCoinsAction->setStatusTip(tr(\"Request payments (generates QR codes and bitcoinV: URIs)\"));\n     receiveCoinsAction->setToolTip(receiveCoinsAction->statusTip());\n     receiveCoinsAction->setCheckable(true);\n     receiveCoinsAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_3));\n@@ -305,9 +306,9 @@ void BitcoinGUI::createActions()\n     changePassphraseAction = new QAction(platformStyle->TextColorIcon(\":/icons/key\"), tr(\"&Change Passphrase...\"), this);\n     changePassphraseAction->setStatusTip(tr(\"Change the passphrase used for wallet encryption\"));\n     signMessageAction = new QAction(platformStyle->TextColorIcon(\":/icons/edit\"), tr(\"Sign &message...\"), this);\n-    signMessageAction->setStatusTip(tr(\"Sign messages with your Bitcoin addresses to prove you own them\"));\n+    signMessageAction->setStatusTip(tr(\"Sign messages with your BitcoinV addresses to prove you own them\"));\n     verifyMessageAction = new QAction(platformStyle->TextColorIcon(\":/icons/verify\"), tr(\"&Verify message...\"), this);\n-    verifyMessageAction->setStatusTip(tr(\"Verify messages to ensure they were signed with specified Bitcoin addresses\"));\n+    verifyMessageAction->setStatusTip(tr(\"Verify messages to ensure they were signed with specified BitcoinV addresses\"));\n \n     openRPCConsoleAction = new QAction(platformStyle->TextColorIcon(\":/icons/debugwindow\"), tr(\"&Debug window\"), this);\n     openRPCConsoleAction->setStatusTip(tr(\"Open debugging and diagnostic console\"));\n@@ -324,7 +325,7 @@ void BitcoinGUI::createActions()\n \n     showHelpMessageAction = new QAction(platformStyle->TextColorIcon(\":/icons/info\"), tr(\"&Command-line options\"), this);\n     showHelpMessageAction->setMenuRole(QAction::NoRole);\n-    showHelpMessageAction->setStatusTip(tr(\"Show the %1 help message to get a list with possible Bitcoin command-line options\").arg(tr(PACKAGE_NAME)));\n+    showHelpMessageAction->setStatusTip(tr(\"Show the %1 help message to get a list with possible BitcoinV command-line options\").arg(tr(PACKAGE_NAME)));\n \n     connect(quitAction, SIGNAL(triggered()), qApp, SLOT(quit()));\n     connect(aboutAction, SIGNAL(triggered()), this, SLOT(aboutClicked()));\n@@ -732,7 +733,7 @@ void BitcoinGUI::updateNetworkState()\n     QString tooltip;\n \n     if (m_node.getNetworkActive()) {\n-        tooltip = tr(\"%n active connection(s) to Bitcoin network\", \"\", count) + QString(\".<br>\") + tr(\"Click to disable network activity.\");\n+        tooltip = tr(\"%n active connection(s) to BitcoinV network\", \"\", count) + QString(\".<br>\") + tr(\"Click to disable network activity.\");\n     } else {\n         tooltip = tr(\"Network activity disabled.\") + QString(\"<br>\") + tr(\"Click to enable network activity again.\");\n         icon = \":/icons/network_disabled\";\n@@ -876,7 +877,7 @@ void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate, double nVer\n \n void BitcoinGUI::message(const QString &title, const QString &message, unsigned int style, bool *ret)\n {\n-    QString strTitle = tr(\"Bitcoin\"); // default title\n+    QString strTitle = tr(\"BitcoinV\"); // default title\n     // Default to information icon\n     int nMBoxIcon = QMessageBox::Information;\n     int nNotifyIcon = Notificator::Information;"
      },
      {
        "sha": "115b33d9ba43c9ff5c038099bf0e0bde6b55609c",
        "filename": "src/qt/bitcoinstrings.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/qt/bitcoinstrings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/qt/bitcoinstrings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinstrings.cpp?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -9,7 +9,7 @@\n #define UNUSED\n #endif\n static const char UNUSED *bitcoin_strings[] = {\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Bitcoin Core\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"BitcoinV Core\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"The %s developers\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"-maxtxfee is set very high! Fees this large could be paid on a single \""
      },
      {
        "sha": "6d60cd59e3544c4096740f83cd64236142bbf716",
        "filename": "src/qt/bitcoinunits.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/qt/bitcoinunits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/qt/bitcoinunits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.cpp?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -1,3 +1,4 @@\n+// Copyright (c) 2018 The BitcoinV Core developers\n // Copyright (c) 2011-2018 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n@@ -42,9 +43,9 @@ QString BitcoinUnits::longName(int unit)\n {\n     switch(unit)\n     {\n-    case BTC: return QString(\"BTC\");\n-    case mBTC: return QString(\"mBTC\");\n-    case uBTC: return QString::fromUtf8(\"\u00b5BTC (bits)\");\n+    case BTC: return QString(\"BTCV\");\n+    case mBTC: return QString(\"mBTCV\");\n+    case uBTC: return QString::fromUtf8(\"\u00b5BTCV (bits)\");\n     case SAT: return QString(\"Satoshi (sat)\");\n     default: return QString(\"???\");\n     }\n@@ -64,9 +65,9 @@ QString BitcoinUnits::description(int unit)\n {\n     switch(unit)\n     {\n-    case BTC: return QString(\"Bitcoins\");\n-    case mBTC: return QString(\"Milli-Bitcoins (1 / 1\" THIN_SP_UTF8 \"000)\");\n-    case uBTC: return QString(\"Micro-Bitcoins (bits) (1 / 1\" THIN_SP_UTF8 \"000\" THIN_SP_UTF8 \"000)\");\n+    case BTC: return QString(\"BitcoinVs\");\n+    case mBTC: return QString(\"Milli-BitcoinVs (1 / 1\" THIN_SP_UTF8 \"000)\");\n+    case uBTC: return QString(\"Micro-BitcoinVs (bits) (1 / 1\" THIN_SP_UTF8 \"000\" THIN_SP_UTF8 \"000)\");\n     case SAT: return QString(\"Satoshi (sat) (1 / 100\" THIN_SP_UTF8 \"000\" THIN_SP_UTF8 \"000)\");\n     default: return QString(\"???\");\n     }"
      },
      {
        "sha": "0f58ab2c3ed3ac1386d7dbfecf72b5ec2dde631e",
        "filename": "src/qt/forms/coincontroldialog.ui",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/qt/forms/coincontroldialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/qt/forms/coincontroldialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/coincontroldialog.ui?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -132,7 +132,7 @@\n           <enum>Qt::ActionsContextMenu</enum>\n          </property>\n          <property name=\"text\">\n-          <string notr=\"true\">0.00 BTC</string>\n+          <string notr=\"true\">0.00 BTCV</string>\n          </property>\n          <property name=\"textInteractionFlags\">\n           <set>Qt::LinksAccessibleByMouse|Qt::TextSelectableByKeyboard|Qt::TextSelectableByMouse</set>\n@@ -212,7 +212,7 @@\n           <enum>Qt::ActionsContextMenu</enum>\n          </property>\n          <property name=\"text\">\n-          <string notr=\"true\">0.00 BTC</string>\n+          <string notr=\"true\">0.00 BTCV</string>\n          </property>\n          <property name=\"textInteractionFlags\">\n           <set>Qt::LinksAccessibleByMouse|Qt::TextSelectableByKeyboard|Qt::TextSelectableByMouse</set>\n@@ -257,7 +257,7 @@\n           <enum>Qt::ActionsContextMenu</enum>\n          </property>\n          <property name=\"text\">\n-          <string notr=\"true\">0.00 BTC</string>\n+          <string notr=\"true\">0.00 BTCV</string>\n          </property>\n          <property name=\"textInteractionFlags\">\n           <set>Qt::LinksAccessibleByMouse|Qt::TextSelectableByKeyboard|Qt::TextSelectableByMouse</set>\n@@ -292,7 +292,7 @@\n           <enum>Qt::ActionsContextMenu</enum>\n          </property>\n          <property name=\"text\">\n-          <string notr=\"true\">0.00 BTC</string>\n+          <string notr=\"true\">0.00 BTCV</string>\n          </property>\n          <property name=\"textInteractionFlags\">\n           <set>Qt::LinksAccessibleByMouse|Qt::TextSelectableByKeyboard|Qt::TextSelectableByMouse</set>"
      },
      {
        "sha": "cdfff1823a3b56b7a6809dce1c7e3193b63a3a54",
        "filename": "src/qt/forms/overviewpage.ui",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/qt/forms/overviewpage.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/qt/forms/overviewpage.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/overviewpage.ui?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -129,7 +129,7 @@\n                <string>Unconfirmed transactions to watch-only addresses</string>\n               </property>\n               <property name=\"text\">\n-               <string notr=\"true\">0.000\u2009000\u200900 BTC</string>\n+               <string notr=\"true\">0.000\u2009000\u200900 BTCV</string>\n               </property>\n               <property name=\"alignment\">\n                <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>\n@@ -154,7 +154,7 @@\n                <string>Total of transactions that have yet to be confirmed, and do not yet count toward the spendable balance</string>\n               </property>\n               <property name=\"text\">\n-               <string notr=\"true\">0.000\u2009000\u200900 BTC</string>\n+               <string notr=\"true\">0.000\u2009000\u200900 BTCV</string>\n               </property>\n               <property name=\"alignment\">\n                <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>\n@@ -179,7 +179,7 @@\n                <string>Mined balance in watch-only addresses that has not yet matured</string>\n               </property>\n               <property name=\"text\">\n-               <string notr=\"true\">0.000\u2009000\u200900 BTC</string>\n+               <string notr=\"true\">0.000\u2009000\u200900 BTCV</string>\n               </property>\n               <property name=\"alignment\">\n                <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>\n@@ -237,7 +237,7 @@\n                <string>Mined balance that has not yet matured</string>\n               </property>\n               <property name=\"text\">\n-               <string notr=\"true\">0.000\u2009000\u200900 BTC</string>\n+               <string notr=\"true\">0.000\u2009000\u200900 BTCV</string>\n               </property>\n               <property name=\"alignment\">\n                <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>\n@@ -282,7 +282,7 @@\n                <string>Your current total balance</string>\n               </property>\n               <property name=\"text\">\n-               <string notr=\"true\">0.000\u2009000\u200900 BTC</string>\n+               <string notr=\"true\">0.000\u2009000\u200900 BTCV</string>\n               </property>\n               <property name=\"alignment\">\n                <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>\n@@ -307,7 +307,7 @@\n                <string>Current total balance in watch-only addresses</string>\n               </property>\n               <property name=\"text\">\n-               <string notr=\"true\">0.000\u2009000\u200900 BTC</string>\n+               <string notr=\"true\">0.000\u2009000\u200900 BTCV</string>\n               </property>\n               <property name=\"alignment\">\n                <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>\n@@ -349,7 +349,7 @@\n                <string>Your current spendable balance</string>\n               </property>\n               <property name=\"text\">\n-               <string notr=\"true\">0.000\u2009000\u200900 BTC</string>\n+               <string notr=\"true\">0.000\u2009000\u200900 BTCV</string>\n               </property>\n               <property name=\"alignment\">\n                <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>\n@@ -374,7 +374,7 @@\n                <string>Your current balance in watch-only addresses</string>\n               </property>\n               <property name=\"text\">\n-               <string notr=\"true\">0.000\u2009000\u200900 BTC</string>\n+               <string notr=\"true\">0.000\u2009000\u200900 BTCV</string>\n               </property>\n               <property name=\"alignment\">\n                <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>"
      },
      {
        "sha": "a104e42a967e3feee41ee741cfcc1cf84403ecbe",
        "filename": "src/qt/forms/sendcoinsdialog.ui",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/qt/forms/sendcoinsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/qt/forms/sendcoinsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/sendcoinsdialog.ui?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -324,7 +324,7 @@\n                   <enum>Qt::ActionsContextMenu</enum>\n                  </property>\n                  <property name=\"text\">\n-                  <string notr=\"true\">0.00 BTC</string>\n+                  <string notr=\"true\">0.00 BTCV</string>\n                  </property>\n                  <property name=\"textInteractionFlags\">\n                   <set>Qt::LinksAccessibleByMouse|Qt::TextSelectableByKeyboard|Qt::TextSelectableByMouse</set>\n@@ -404,7 +404,7 @@\n                   <enum>Qt::ActionsContextMenu</enum>\n                  </property>\n                  <property name=\"text\">\n-                  <string notr=\"true\">0.00 BTC</string>\n+                  <string notr=\"true\">0.00 BTCV</string>\n                  </property>\n                  <property name=\"textInteractionFlags\">\n                   <set>Qt::LinksAccessibleByMouse|Qt::TextSelectableByKeyboard|Qt::TextSelectableByMouse</set>\n@@ -455,7 +455,7 @@\n                   <enum>Qt::ActionsContextMenu</enum>\n                  </property>\n                  <property name=\"text\">\n-                  <string notr=\"true\">0.00 BTC</string>\n+                  <string notr=\"true\">0.00 BTCV</string>\n                  </property>\n                  <property name=\"textInteractionFlags\">\n                   <set>Qt::LinksAccessibleByMouse|Qt::TextSelectableByKeyboard|Qt::TextSelectableByMouse</set>\n@@ -484,7 +484,7 @@\n                   <enum>Qt::ActionsContextMenu</enum>\n                  </property>\n                  <property name=\"text\">\n-                  <string notr=\"true\">0.00 BTC</string>\n+                  <string notr=\"true\">0.00 BTCV</string>\n                  </property>\n                  <property name=\"textInteractionFlags\">\n                   <set>Qt::LinksAccessibleByMouse|Qt::TextSelectableByKeyboard|Qt::TextSelectableByMouse</set>\n@@ -1249,7 +1249,7 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of \"100 satoshis p\n           <cursorShape>IBeamCursor</cursorShape>\n          </property>\n          <property name=\"text\">\n-          <string notr=\"true\">123.456 BTC</string>\n+          <string notr=\"true\">123.456 BTCV</string>\n          </property>\n          <property name=\"textInteractionFlags\">\n           <set>Qt::LinksAccessibleByMouse|Qt::TextSelectableByKeyboard|Qt::TextSelectableByMouse</set>"
      },
      {
        "sha": "f0d2a2705bf4693829e1658e0dcd27390de56be0",
        "filename": "src/qt/guiconstants.h",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/qt/guiconstants.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/qt/guiconstants.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiconstants.h?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -1,3 +1,4 @@\n+// Copyright (c) 2018 The BitcoinV Core developers\n // Copyright (c) 2011-2018 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n@@ -46,9 +47,9 @@ static const int MAX_URI_LENGTH = 255;\n /* Number of frames in spinner animation */\n #define SPINNER_FRAMES 36\n \n-#define QAPP_ORG_NAME \"Bitcoin\"\n-#define QAPP_ORG_DOMAIN \"bitcoin.org\"\n-#define QAPP_APP_NAME_DEFAULT \"Bitcoin-Qt\"\n-#define QAPP_APP_NAME_TESTNET \"Bitcoin-Qt-testnet\"\n+#define QAPP_ORG_NAME \"BitcoinV\"\n+#define QAPP_ORG_DOMAIN \"bitcoinV.org\"\n+#define QAPP_APP_NAME_DEFAULT \"BitcoinV-Qt\"\n+#define QAPP_APP_NAME_TESTNET \"BitcoinV-Qt-testnet\"\n \n #endif // BITCOIN_QT_GUICONSTANTS_H"
      },
      {
        "sha": "5459a4bff5192e36cab0226a068ef27c88a93e50",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -1,3 +1,4 @@\n+// Copyright (c) 2018 The BitcoinV Core developers\n // Copyright (c) 2011-2018 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n@@ -112,7 +113,7 @@ void setupAddressWidget(QValidatedLineEdit *widget, QWidget *parent)\n     widget->setFont(fixedPitchFont());\n     // We don't want translators to use own addresses in translations\n     // and this is the only place, where this address is supplied.\n-    widget->setPlaceholderText(QObject::tr(\"Enter a Bitcoin address (e.g. %1)\").arg(\n+    widget->setPlaceholderText(QObject::tr(\"Enter a BitcoinV address (e.g. %1)\").arg(\n         QString::fromStdString(DummyAddress(Params()))));\n     widget->setValidator(new BitcoinAddressEntryValidator(parent));\n     widget->setCheckValidator(new BitcoinAddressCheckValidator(parent));\n@@ -183,7 +184,7 @@ bool parseBitcoinURI(QString uri, SendCoinsRecipient *out)\n \n QString formatBitcoinURI(const SendCoinsRecipient &info)\n {\n-    QString ret = QString(\"bitcoin:%1\").arg(info.address);\n+    QString ret = QString(\"bitcoinV:%1\").arg(info.address);\n     int paramCount = 0;\n \n     if (info.amount)\n@@ -669,9 +670,9 @@ bool SetStartOnSystemStartup(bool fAutoStart)\n         optionFile << \"[Desktop Entry]\\n\";\n         optionFile << \"Type=Application\\n\";\n         if (chain == CBaseChainParams::MAIN)\n-            optionFile << \"Name=Bitcoin\\n\";\n+            optionFile << \"Name=BitcoinV\\n\";\n         else\n-            optionFile << strprintf(\"Name=Bitcoin (%s)\\n\", chain);\n+            optionFile << strprintf(\"Name=BitcoinV (%s)\\n\", chain);\n         optionFile << \"Exec=\" << pszExePath << strprintf(\" -min -testnet=%d -regtest=%d\\n\", gArgs.GetBoolArg(\"-testnet\", false), gArgs.GetBoolArg(\"-regtest\", false));\n         optionFile << \"Terminal=false\\n\";\n         optionFile << \"Hidden=false\\n\";"
      },
      {
        "sha": "2c37c353e801144358b5d7aa9985738f8f56a97b",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -1,3 +1,4 @@\n+// Copyright (c) 2018 The BitcoinV Core developers\n // Copyright (c) 2011-2018 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n@@ -128,7 +129,7 @@ Intro::Intro(QWidget *parent) :\n         .arg(tr(PACKAGE_NAME))\n         .arg(BLOCK_CHAIN_SIZE)\n         .arg(2009)\n-        .arg(tr(\"Bitcoin\"))\n+        .arg(tr(\"BitcoinV\"))\n     );\n     ui->lblExplanation2->setText(ui->lblExplanation2->text().arg(tr(PACKAGE_NAME)));\n \n@@ -147,7 +148,7 @@ Intro::Intro(QWidget *parent) :\n     }\n     requiredSpace += CHAIN_STATE_SIZE;\n     ui->sizeWarningLabel->setText(\n-        tr(\"%1 will download and store a copy of the Bitcoin block chain.\").arg(tr(PACKAGE_NAME)) + \" \" +\n+        tr(\"%1 will download and store a copy of the BitcoinV block chain.\").arg(tr(PACKAGE_NAME)) + \" \" +\n         storageRequiresMsg.arg(requiredSpace) + \" \" +\n         tr(\"The wallet will also be stored in this directory.\")\n     );"
      },
      {
        "sha": "d1c9339f1baf778c8ecf61768d57792f8b2455bf",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -1,3 +1,4 @@\n+// Copyright (c) 2018 The BitcoinV Core developers\n // Copyright (c) 2011-2018 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n@@ -235,7 +236,7 @@ void OverviewPage::setWalletModel(WalletModel *model)\n         connect(model, SIGNAL(notifyWatchonlyChanged(bool)), this, SLOT(updateWatchOnlyLabels(bool)));\n     }\n \n-    // update the display unit, to not use the default (\"BTC\")\n+    // update the display unit, to not use the default (\"BTCV\")\n     updateDisplayUnit();\n }\n "
      },
      {
        "sha": "d102d3d2797d6175dfe96c6afc0045a2b96757c7",
        "filename": "src/qt/res/bitcoin-qt-res.rc",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/qt/res/bitcoin-qt-res.rc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/qt/res/bitcoin-qt-res.rc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/bitcoin-qt-res.rc?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -19,13 +19,13 @@ BEGIN\n     BEGIN\n         BLOCK \"040904E4\" // U.S. English - multilingual (hex)\n         BEGIN\n-            VALUE \"CompanyName\",        \"Bitcoin\"\n-            VALUE \"FileDescription\",    PACKAGE_NAME \" (GUI node for Bitcoin)\"\n+            VALUE \"CompanyName\",        \"BitcoinV\"\n+            VALUE \"FileDescription\",    PACKAGE_NAME \" (GUI node for BitcoinV)\"\n             VALUE \"FileVersion\",        VER_FILEVERSION_STR\n-            VALUE \"InternalName\",       \"bitcoin-qt\"\n+            VALUE \"InternalName\",       \"bitcoinV-qt\"\n             VALUE \"LegalCopyright\",     COPYRIGHT_STR\n             VALUE \"LegalTrademarks1\",   \"Distributed under the MIT software license, see the accompanying file COPYING or http://www.opensource.org/licenses/mit-license.php.\"\n-            VALUE \"OriginalFilename\",   \"bitcoin-qt.exe\"\n+            VALUE \"OriginalFilename\",   \"bitcoinV-qt.exe\"\n             VALUE \"ProductName\",        PACKAGE_NAME\n             VALUE \"ProductVersion\",     VER_PRODUCTVERSION_STR\n         END"
      },
      {
        "sha": "98afeb5a9c33715339747a59e2ff118dcb1ce723",
        "filename": "src/qt/res/icons/bitcoin.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/qt/res/icons/bitcoin.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/qt/res/icons/bitcoin.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/bitcoin.png?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4"
      },
      {
        "sha": "9c774fc26067cce78ac927bd3153a72a57d3984d",
        "filename": "src/qt/sendcoinsentry.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/qt/sendcoinsentry.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/qt/sendcoinsentry.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.cpp?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -1,3 +1,4 @@\n+// Copyright (c) 2018 The BitcoinV Core developers\n // Copyright (c) 2011-2018 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n@@ -106,7 +107,7 @@ void SendCoinsEntry::clear()\n     ui->memoTextLabel_s->clear();\n     ui->payAmount_s->clear();\n \n-    // update the display unit, to not use the default (\"BTC\")\n+    // update the display unit, to not use the default (\"BTCV\")\n     updateDisplayUnit();\n }\n "
      },
      {
        "sha": "c388a7fd96bee329957308e045913c5a95cc0698",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -1,3 +1,4 @@\n+// Copyright (c) 2018 The BitcoinV Core developers\n // Copyright (c) 2010 Satoshi Nakamoto\n // Copyright (c) 2009-2018 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n@@ -29,6 +30,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"setmocktime\", 0, \"timestamp\" },\n     { \"generate\", 0, \"nblocks\" },\n     { \"generate\", 1, \"maxtries\" },\n+    { \"generate\", 2, \"extra_subsidy\" },\n     { \"generatetoaddress\", 0, \"nblocks\" },\n     { \"generatetoaddress\", 2, \"maxtries\" },\n     { \"getnetworkhashps\", 0, \"nblocks\" },"
      },
      {
        "sha": "986d4a7316ae78e77861726467ae5563a3672441",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 460,
        "deletions": 387,
        "changes": 847,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -1,3 +1,4 @@\n+// Copyright (c) 2018 The BitcoinV Core developers\n // Copyright (c) 2010 Satoshi Nakamoto\n // Copyright (c) 2009-2018 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n@@ -10,7 +11,6 @@\n #include <consensus/params.h>\n #include <consensus/validation.h>\n #include <core_io.h>\n-#include <validation.h>\n #include <key_io.h>\n #include <miner.h>\n #include <net.h>\n@@ -23,12 +23,15 @@\n #include <txmempool.h>\n #include <util.h>\n #include <utilstrencodings.h>\n+#include <validation.h>\n #include <validationinterface.h>\n #include <warnings.h>\n \n #include <memory>\n #include <stdint.h>\n \n+static UniValue getblocktemplate(const JSONRPCRequest& request);\n+\n unsigned int ParseConfirmTarget(const UniValue& value)\n {\n     int target = value.get_int();\n@@ -44,8 +47,9 @@ unsigned int ParseConfirmTarget(const UniValue& value)\n  * or from the last difficulty change if 'lookup' is nonpositive.\n  * If 'height' is nonnegative, compute the estimate at the time when a given block was found.\n  */\n-static UniValue GetNetworkHashPS(int lookup, int height) {\n-    CBlockIndex *pb = chainActive.Tip();\n+static UniValue GetNetworkHashPS(int lookup, int height)\n+{\n+    CBlockIndex* pb = chainActive.Tip();\n \n     if (height >= 0 && height < chainActive.Height())\n         pb = chainActive[height];\n@@ -61,7 +65,7 @@ static UniValue GetNetworkHashPS(int lookup, int height) {\n     if (lookup > pb->nHeight)\n         lookup = pb->nHeight;\n \n-    CBlockIndex *pb0 = pb;\n+    CBlockIndex* pb0 = pb;\n     int64_t minTime = pb0->GetBlockTime();\n     int64_t maxTime = minTime;\n     for (int i = 0; i < lookup; i++) {\n@@ -94,63 +98,150 @@ static UniValue getnetworkhashps(const JSONRPCRequest& request)\n             \"2. height      (numeric, optional, default=-1) To estimate at the time of the given height.\\n\"\n             \"\\nResult:\\n\"\n             \"x             (numeric) Hashes per second estimated\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getnetworkhashps\", \"\")\n-            + HelpExampleRpc(\"getnetworkhashps\", \"\")\n-       );\n+            \"\\nExamples:\\n\" +\n+            HelpExampleCli(\"getnetworkhashps\", \"\") + HelpExampleRpc(\"getnetworkhashps\", \"\"));\n \n     LOCK(cs_main);\n     return GetNetworkHashPS(!request.params[0].isNull() ? request.params[0].get_int() : 120, !request.params[1].isNull() ? request.params[1].get_int() : -1);\n }\n \n-UniValue generateBlocks(std::shared_ptr<CReserveScript> coinbaseScript, int nGenerate, uint64_t nMaxTries, bool keepScript)\n+\n+#include <pthread.h>\n+#include <stdio.h>\n+\n+\n+struct MINING_WORK_PARAMS_t {\n+    std::shared_ptr<CReserveScript> coinbaseScript;\n+    int nGenerate;\n+    uint64_t nMaxTries;\n+    uint64_t extra_subsidy;\n+    bool keepScript;\n+    UniValue blockHashes;\n+    int thread_num;\n+};\n+\n+\n+#include <atomic>\n+#include <thread>\n+\n+std::atomic<bool> block_found(false);\n+\n+void* mining_thread(void* params);\n+void* mining_thread(void* params)\n {\n+    MINING_WORK_PARAMS_t* mining_params = (MINING_WORK_PARAMS_t*)params;\n+\n+    std::shared_ptr<CReserveScript> coinbaseScript = mining_params->coinbaseScript;\n+    int nGenerate = mining_params->nGenerate;\n+    uint64_t nMaxTries = mining_params->nMaxTries;\n+    uint64_t extra_subsidy = mining_params->extra_subsidy;\n+    bool keepScript = mining_params->keepScript;\n+    int thread_num = mining_params->thread_num;\n+\n     static const int nInnerLoopCount = 0x10000;\n     int nHeightEnd = 0;\n     int nHeight = 0;\n \n-    {   // Don't keep cs_main locked\n+    { // Don't keep cs_main locked\n         LOCK(cs_main);\n         nHeight = chainActive.Height();\n-        nHeightEnd = nHeight+nGenerate;\n+        nHeightEnd = nHeight + nGenerate;\n     }\n-    unsigned int nExtraNonce = 0;\n+    unsigned int nExtraNonce = 1 << thread_num; // give each thread a different randomness\n     UniValue blockHashes(UniValue::VARR);\n-    while (nHeight < nHeightEnd && !ShutdownRequested())\n-    {\n-        std::unique_ptr<CBlockTemplate> pblocktemplate(BlockAssembler(Params()).CreateNewBlock(coinbaseScript->reserveScript));\n+    while (nHeight < nHeightEnd && !ShutdownRequested()) {\n+        std::unique_ptr<CBlockTemplate> pblocktemplate(BlockAssembler(Params()).CreateNewBlock(coinbaseScript->reserveScript, extra_subsidy));\n         if (!pblocktemplate.get())\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"Couldn't create new block\");\n-        CBlock *pblock = &pblocktemplate->block;\n+        CBlock* pblock = &pblocktemplate->block;\n         {\n             LOCK(cs_main);\n             IncrementExtraNonce(pblock, chainActive.Tip(), nExtraNonce);\n         }\n-        while (nMaxTries > 0 && pblock->nNonce < nInnerLoopCount && !CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus())) {\n+        //while (nMaxTries > 0 && pblock->nNonce < nInnerLoopCount && !CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus())) {\n+        while (nMaxTries > 0 && pblock->nNonce < nInnerLoopCount && !CheckProofOfWork(nHeight, pblock->GetHash(), *pblock, Params().GetConsensus())) {\n             ++pblock->nNonce;\n             --nMaxTries;\n+\n+            if (true == block_found) {\n+                break;\n+            }\n+        }\n+        if (true == block_found) {\n+            break;\n         }\n         if (nMaxTries == 0) {\n             break;\n         }\n         if (pblock->nNonce == nInnerLoopCount) {\n             continue;\n         }\n+\n         std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(*pblock);\n-        if (!ProcessNewBlock(Params(), shared_pblock, true, nullptr))\n-            throw JSONRPCError(RPC_INTERNAL_ERROR, \"ProcessNewBlock, block not accepted\");\n+        if (!ProcessNewBlock(Params(), shared_pblock, true, nullptr)) {\n+            pthread_exit((void*)(nullptr));\n+        }\n         ++nHeight;\n         blockHashes.push_back(pblock->GetHash().GetHex());\n \n         //mark script as important because it was used at least for one coinbase output if the script came from the wallet\n-        if (keepScript)\n-        {\n+        if (keepScript) {\n             coinbaseScript->KeepScript();\n         }\n     }\n-    return blockHashes;\n+\n+\n+    if (true == block_found) {\n+        pthread_exit((void*)(nullptr));\n+    }\n+\n+    // signal thread that block was found.\n+    block_found = true;\n+\n+    mining_params->blockHashes = blockHashes;\n+\n+    pthread_exit((void*)(&mining_params->blockHashes));\n+}\n+\n+UniValue generateBlocks(std::shared_ptr<CReserveScript> coinbaseScript, int nGenerate, uint64_t nMaxTries, uint64_t extra_subsidy, bool keepScript)\n+{\n+    void* status = 0;\n+    MINING_WORK_PARAMS_t mining_params;\n+\n+    mining_params.coinbaseScript = coinbaseScript;\n+    mining_params.nGenerate = nGenerate;\n+    mining_params.nMaxTries = nMaxTries;\n+    mining_params.extra_subsidy = extra_subsidy;\n+    mining_params.keepScript = keepScript;\n+    mining_params.blockHashes = 0;\n+\n+\n+    unsigned concurentThreadsSupported = std::thread::hardware_concurrency();\n+\n+    // Only cpu miners need all threads on to look for extra block reward\n+    if ( extra_subsidy == 0 )\n+    {\n+        concurentThreadsSupported = 1;\n+    }\n+\n+    pthread_t tids[concurentThreadsSupported];\n+    std::cout << \"concurentThreadsSupported \" << std::dec << concurentThreadsSupported << std::endl;\n+\n+    block_found = false;\n+\n+    for (int n = 0; n < concurentThreadsSupported; n++) {\n+        mining_params.thread_num = n;\n+        pthread_create(&tids[n], NULL, mining_thread, &mining_params);\n+    }\n+\n+    for (int n = 0; n < concurentThreadsSupported; n++) {\n+        pthread_join(tids[n], &status);\n+    }\n+\n+    return mining_params.blockHashes;\n }\n \n+\n static UniValue generatetoaddress(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n@@ -164,9 +255,8 @@ static UniValue generatetoaddress(const JSONRPCRequest& request)\n             \"\\nResult:\\n\"\n             \"[ blockhashes ]     (array) hashes of blocks generated\\n\"\n             \"\\nExamples:\\n\"\n-            \"\\nGenerate 11 blocks to myaddress\\n\"\n-            + HelpExampleCli(\"generatetoaddress\", \"11 \\\"myaddress\\\"\")\n-        );\n+            \"\\nGenerate 11 blocks to myaddress\\n\" +\n+            HelpExampleCli(\"generatetoaddress\", \"11 \\\"myaddress\\\"\"));\n \n     int nGenerate = request.params[0].get_int();\n     uint64_t nMaxTries = 1000000;\n@@ -182,7 +272,7 @@ static UniValue generatetoaddress(const JSONRPCRequest& request)\n     std::shared_ptr<CReserveScript> coinbaseScript = std::make_shared<CReserveScript>();\n     coinbaseScript->reserveScript = GetScriptForDestination(destination);\n \n-    return generateBlocks(coinbaseScript, nGenerate, nMaxTries, false);\n+    return generateBlocks(coinbaseScript, nGenerate, nMaxTries, 0, false);\n }\n \n static UniValue getmininginfo(const JSONRPCRequest& request)\n@@ -202,23 +292,21 @@ static UniValue getmininginfo(const JSONRPCRequest& request)\n             \"  \\\"chain\\\": \\\"xxxx\\\",           (string) current network name as defined in BIP70 (main, test, regtest)\\n\"\n             \"  \\\"warnings\\\": \\\"...\\\"          (string) any network and blockchain warnings\\n\"\n             \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getmininginfo\", \"\")\n-            + HelpExampleRpc(\"getmininginfo\", \"\")\n-        );\n+            \"\\nExamples:\\n\" +\n+            HelpExampleCli(\"getmininginfo\", \"\") + HelpExampleRpc(\"getmininginfo\", \"\"));\n \n \n     LOCK(cs_main);\n \n     UniValue obj(UniValue::VOBJ);\n-    obj.pushKV(\"blocks\",           (int)chainActive.Height());\n+    obj.pushKV(\"blocks\", (int)chainActive.Height());\n     obj.pushKV(\"currentblockweight\", (uint64_t)nLastBlockWeight);\n-    obj.pushKV(\"currentblocktx\",   (uint64_t)nLastBlockTx);\n-    obj.pushKV(\"difficulty\",       (double)GetDifficulty(chainActive.Tip()));\n-    obj.pushKV(\"networkhashps\",    getnetworkhashps(request));\n-    obj.pushKV(\"pooledtx\",         (uint64_t)mempool.size());\n-    obj.pushKV(\"chain\",            Params().NetworkIDString());\n-    obj.pushKV(\"warnings\",         GetWarnings(\"statusbar\"));\n+    obj.pushKV(\"currentblocktx\", (uint64_t)nLastBlockTx);\n+    obj.pushKV(\"difficulty\", (double)GetDifficulty(chainActive.Tip()));\n+    obj.pushKV(\"networkhashps\", getnetworkhashps(request));\n+    obj.pushKV(\"pooledtx\", (uint64_t)mempool.size());\n+    obj.pushKV(\"chain\", Params().NetworkIDString());\n+    obj.pushKV(\"warnings\", GetWarnings(\"statusbar\"));\n     return obj;\n }\n \n@@ -240,10 +328,8 @@ static UniValue prioritisetransaction(const JSONRPCRequest& request)\n             \"                  considers the transaction as it would have paid a higher (or lower) fee.\\n\"\n             \"\\nResult:\\n\"\n             \"true              (boolean) Returns true\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"prioritisetransaction\", \"\\\"txid\\\" 0.0 10000\")\n-            + HelpExampleRpc(\"prioritisetransaction\", \"\\\"txid\\\", 0.0, 10000\")\n-        );\n+            \"\\nExamples:\\n\" +\n+            HelpExampleCli(\"prioritisetransaction\", \"\\\"txid\\\" 0.0 10000\") + HelpExampleRpc(\"prioritisetransaction\", \"\\\"txid\\\", 0.0, 10000\"));\n \n     LOCK(cs_main);\n \n@@ -267,8 +353,7 @@ static UniValue BIP22ValidationResult(const CValidationState& state)\n \n     if (state.IsError())\n         throw JSONRPCError(RPC_VERIFY_ERROR, FormatStateMessage(state));\n-    if (state.IsInvalid())\n-    {\n+    if (state.IsInvalid()) {\n         std::string strRejectReason = state.GetRejectReason();\n         if (strRejectReason.empty())\n             return \"rejected\";\n@@ -278,7 +363,8 @@ static UniValue BIP22ValidationResult(const CValidationState& state)\n     return \"valid?\";\n }\n \n-static std::string gbt_vb_name(const Consensus::DeploymentPos pos) {\n+static std::string gbt_vb_name(const Consensus::DeploymentPos pos)\n+{\n     const struct VBDeploymentInfo& vbinfo = VersionBitsDeploymentInfo[pos];\n     std::string s = vbinfo.name;\n     if (!vbinfo.gbt_force) {\n@@ -287,7 +373,289 @@ static std::string gbt_vb_name(const Consensus::DeploymentPos pos) {\n     return s;\n }\n \n-static UniValue getblocktemplate(const JSONRPCRequest& request)\n+\n+class submitblock_StateCatcher : public CValidationInterface\n+{\n+public:\n+    uint256 hash;\n+    bool found;\n+    CValidationState state;\n+\n+    explicit submitblock_StateCatcher(const uint256& hashIn) : hash(hashIn), found(false), state() {}\n+\n+protected:\n+    void BlockChecked(const CBlock& block, const CValidationState& stateIn) override\n+    {\n+        if (block.GetHash() != hash)\n+            return;\n+        found = true;\n+        state = stateIn;\n+    }\n+};\n+\n+static UniValue submitblock(const JSONRPCRequest& request)\n+{\n+    // We allow 2 arguments for compliance with BIP22. Argument 2 is ignored.\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"submitblock \\\"hexdata\\\"  ( \\\"dummy\\\" )\\n\"\n+            \"\\nAttempts to submit new block to network.\\n\"\n+            \"See https://en.bitcoin.it/wiki/BIP_0022 for full specification.\\n\"\n+\n+            \"\\nArguments\\n\"\n+            \"1. \\\"hexdata\\\"        (string, required) the hex-encoded block data to submit\\n\"\n+            \"2. \\\"dummy\\\"          (optional) dummy value, for compatibility with BIP22. This value is ignored.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\nExamples:\\n\" +\n+            HelpExampleCli(\"submitblock\", \"\\\"mydata\\\"\") + HelpExampleRpc(\"submitblock\", \"\\\"mydata\\\"\"));\n+    }\n+\n+    std::shared_ptr<CBlock> blockptr = std::make_shared<CBlock>();\n+    CBlock& block = *blockptr;\n+    if (!DecodeHexBlk(block, request.params[0].get_str())) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"Block decode failed\");\n+    }\n+\n+    if (block.vtx.empty() || !block.vtx[0]->IsCoinBase()) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"Block does not start with a coinbase\");\n+    }\n+\n+    uint256 hash = block.GetHash();\n+    {\n+        LOCK(cs_main);\n+        const CBlockIndex* pindex = LookupBlockIndex(hash);\n+        if (pindex) {\n+            if (pindex->IsValid(BLOCK_VALID_SCRIPTS)) {\n+                return \"duplicate\";\n+            }\n+            if (pindex->nStatus & BLOCK_FAILED_MASK) {\n+                return \"duplicate-invalid\";\n+            }\n+        }\n+    }\n+\n+    {\n+        LOCK(cs_main);\n+        const CBlockIndex* pindex = LookupBlockIndex(block.hashPrevBlock);\n+        if (pindex) {\n+            UpdateUncommittedBlockStructures(block, pindex, Params().GetConsensus());\n+        }\n+    }\n+\n+    bool new_block;\n+    submitblock_StateCatcher sc(block.GetHash());\n+    RegisterValidationInterface(&sc);\n+    bool accepted = ProcessNewBlock(Params(), blockptr, /* fForceProcessing */ true, /* fNewBlock */ &new_block);\n+    UnregisterValidationInterface(&sc);\n+    if (!new_block) {\n+        if (!accepted) {\n+            // TODO Maybe pass down fNewBlock to AcceptBlockHeader, so it is properly set to true in this case?\n+            return \"invalid\";\n+        }\n+        return \"duplicate\";\n+    }\n+    if (!sc.found) {\n+        return \"inconclusive\";\n+    }\n+    return BIP22ValidationResult(sc.state);\n+}\n+\n+static UniValue estimatefee(const JSONRPCRequest& request)\n+{\n+    throw JSONRPCError(RPC_METHOD_DEPRECATED, \"estimatefee was removed in v0.17.\\n\"\n+                                              \"Clients should use estimatesmartfee.\");\n+}\n+\n+static UniValue estimatesmartfee(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw std::runtime_error(\n+            \"estimatesmartfee conf_target (\\\"estimate_mode\\\")\\n\"\n+            \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n+            \"confirmation within conf_target blocks if possible and return the number of blocks\\n\"\n+            \"for which the estimate is valid. Uses virtual transaction size as defined\\n\"\n+            \"in BIP 141 (witness data is discounted).\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. conf_target     (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n+            \"2. \\\"estimate_mode\\\" (string, optional, default=CONSERVATIVE) The fee estimate mode.\\n\"\n+            \"                   Whether to return a more conservative estimate which also satisfies\\n\"\n+            \"                   a longer history. A conservative estimate potentially returns a\\n\"\n+            \"                   higher feerate and is more likely to be sufficient for the desired\\n\"\n+            \"                   target, but is not as responsive to short term drops in the\\n\"\n+            \"                   prevailing fee market.  Must be one of:\\n\"\n+            \"       \\\"UNSET\\\" (defaults to CONSERVATIVE)\\n\"\n+            \"       \\\"ECONOMICAL\\\"\\n\"\n+            \"       \\\"CONSERVATIVE\\\"\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"feerate\\\" : x.x,     (numeric, optional) estimate fee rate in \" +\n+            CURRENCY_UNIT + \"/kB\\n\"\n+                            \"  \\\"errors\\\": [ str... ] (json array of strings, optional) Errors encountered during processing\\n\"\n+                            \"  \\\"blocks\\\" : n         (numeric) block number where estimate was found\\n\"\n+                            \"}\\n\"\n+                            \"\\n\"\n+                            \"The request target will be clamped between 2 and the highest target\\n\"\n+                            \"fee estimation is able to return based on how long it has been running.\\n\"\n+                            \"An error is returned if not enough transactions and blocks\\n\"\n+                            \"have been observed to make an estimate for any number of blocks.\\n\"\n+                            \"\\nExample:\\n\" +\n+            HelpExampleCli(\"estimatesmartfee\", \"6\"));\n+\n+    RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VSTR});\n+    RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n+    unsigned int conf_target = ParseConfirmTarget(request.params[0]);\n+    bool conservative = true;\n+    if (!request.params[1].isNull()) {\n+        FeeEstimateMode fee_mode;\n+        if (!FeeModeFromString(request.params[1].get_str(), fee_mode)) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid estimate_mode parameter\");\n+        }\n+        if (fee_mode == FeeEstimateMode::ECONOMICAL) conservative = false;\n+    }\n+\n+    UniValue result(UniValue::VOBJ);\n+    UniValue errors(UniValue::VARR);\n+    FeeCalculation feeCalc;\n+    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(conf_target, &feeCalc, conservative);\n+    if (feeRate != CFeeRate(0)) {\n+        result.pushKV(\"feerate\", ValueFromAmount(feeRate.GetFeePerK()));\n+    } else {\n+        errors.push_back(\"Insufficient data or no feerate found\");\n+        result.pushKV(\"errors\", errors);\n+    }\n+    result.pushKV(\"blocks\", feeCalc.returnedTarget);\n+    return result;\n+}\n+\n+static UniValue estimaterawfee(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw std::runtime_error(\n+            \"estimaterawfee conf_target (threshold)\\n\"\n+            \"\\nWARNING: This interface is unstable and may disappear or change!\\n\"\n+            \"\\nWARNING: This is an advanced API call that is tightly coupled to the specific\\n\"\n+            \"         implementation of fee estimation. The parameters it can be called with\\n\"\n+            \"         and the results it returns will change if the internal implementation changes.\\n\"\n+            \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n+            \"confirmation within conf_target blocks if possible. Uses virtual transaction size as\\n\"\n+            \"defined in BIP 141 (witness data is discounted).\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. conf_target (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n+            \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n+            \"               confirmed within conf_target in order to consider those feerates as high enough and proceed to check\\n\"\n+            \"               lower buckets.  Default: 0.95\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"short\\\" : {            (json object, optional) estimate for short time horizon\\n\"\n+            \"      \\\"feerate\\\" : x.x,        (numeric, optional) estimate fee rate in \" +\n+            CURRENCY_UNIT + \"/kB\\n\"\n+                            \"      \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n+                            \"      \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n+                            \"      \\\"pass\\\" : {              (json object, optional) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n+                            \"          \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n+                            \"          \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n+                            \"          \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n+                            \"          \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n+                            \"          \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n+                            \"          \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+                            \"      },\\n\"\n+                            \"      \\\"fail\\\" : { ... },       (json object, optional) information about the highest range of feerates to fail to meet the threshold\\n\"\n+                            \"      \\\"errors\\\":  [ str... ]   (json array of strings, optional) Errors encountered during processing\\n\"\n+                            \"  },\\n\"\n+                            \"  \\\"medium\\\" : { ... },    (json object, optional) estimate for medium time horizon\\n\"\n+                            \"  \\\"long\\\" : { ... }       (json object) estimate for long time horizon\\n\"\n+                            \"}\\n\"\n+                            \"\\n\"\n+                            \"Results are returned for any horizon which tracks blocks up to the confirmation target.\\n\"\n+                            \"\\nExample:\\n\" +\n+            HelpExampleCli(\"estimaterawfee\", \"6 0.9\"));\n+\n+    RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM}, true);\n+    RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n+    unsigned int conf_target = ParseConfirmTarget(request.params[0]);\n+    double threshold = 0.95;\n+    if (!request.params[1].isNull()) {\n+        threshold = request.params[1].get_real();\n+    }\n+    if (threshold < 0 || threshold > 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid threshold\");\n+    }\n+\n+    UniValue result(UniValue::VOBJ);\n+\n+    for (FeeEstimateHorizon horizon : {FeeEstimateHorizon::SHORT_HALFLIFE, FeeEstimateHorizon::MED_HALFLIFE, FeeEstimateHorizon::LONG_HALFLIFE}) {\n+        CFeeRate feeRate;\n+        EstimationResult buckets;\n+\n+        // Only output results for horizons which track the target\n+        if (conf_target > ::feeEstimator.HighestTargetTracked(horizon)) continue;\n+\n+        feeRate = ::feeEstimator.estimateRawFee(conf_target, threshold, horizon, &buckets);\n+        UniValue horizon_result(UniValue::VOBJ);\n+        UniValue errors(UniValue::VARR);\n+        UniValue passbucket(UniValue::VOBJ);\n+        passbucket.pushKV(\"startrange\", round(buckets.pass.start));\n+        passbucket.pushKV(\"endrange\", round(buckets.pass.end));\n+        passbucket.pushKV(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0);\n+        passbucket.pushKV(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0);\n+        passbucket.pushKV(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0);\n+        passbucket.pushKV(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0);\n+        UniValue failbucket(UniValue::VOBJ);\n+        failbucket.pushKV(\"startrange\", round(buckets.fail.start));\n+        failbucket.pushKV(\"endrange\", round(buckets.fail.end));\n+        failbucket.pushKV(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0);\n+        failbucket.pushKV(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0);\n+        failbucket.pushKV(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0);\n+        failbucket.pushKV(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0);\n+\n+        // CFeeRate(0) is used to indicate error as a return value from estimateRawFee\n+        if (feeRate != CFeeRate(0)) {\n+            horizon_result.pushKV(\"feerate\", ValueFromAmount(feeRate.GetFeePerK()));\n+            horizon_result.pushKV(\"decay\", buckets.decay);\n+            horizon_result.pushKV(\"scale\", (int)buckets.scale);\n+            horizon_result.pushKV(\"pass\", passbucket);\n+            // buckets.fail.start == -1 indicates that all buckets passed, there is no fail bucket to output\n+            if (buckets.fail.start != -1) horizon_result.pushKV(\"fail\", failbucket);\n+        } else {\n+            // Output only information that is still meaningful in the event of error\n+            horizon_result.pushKV(\"decay\", buckets.decay);\n+            horizon_result.pushKV(\"scale\", (int)buckets.scale);\n+            horizon_result.pushKV(\"fail\", failbucket);\n+            errors.push_back(\"Insufficient data or no feerate found which meets threshold\");\n+            horizon_result.pushKV(\"errors\", errors);\n+        }\n+        result.pushKV(StringForFeeEstimateHorizon(horizon), horizon_result);\n+    }\n+    return result;\n+}\n+\n+static const CRPCCommand commands[] =\n+    {\n+        //  category              name                      actor (function)         argNames\n+        //  --------------------- ------------------------  -----------------------  ----------\n+        {\"mining\", \"getnetworkhashps\", &getnetworkhashps, {\"nblocks\", \"height\"}},\n+        {\"mining\", \"getmininginfo\", &getmininginfo, {}},\n+        {\"mining\", \"prioritisetransaction\", &prioritisetransaction, {\"txid\", \"dummy\", \"fee_delta\"}},\n+        {\"mining\", \"getblocktemplate\", &getblocktemplate, {\"template_request\"}},\n+        {\"mining\", \"submitblock\", &submitblock, {\"hexdata\", \"dummy\"}},\n+\n+\n+        {\"generating\", \"generatetoaddress\", &generatetoaddress, {\"nblocks\", \"address\", \"maxtries\"}},\n+\n+        {\"hidden\", \"estimatefee\", &estimatefee, {}},\n+        {\"util\", \"estimatesmartfee\", &estimatesmartfee, {\"conf_target\", \"estimate_mode\"}},\n+\n+        {\"hidden\", \"estimaterawfee\", &estimaterawfee, {\"conf_target\", \"threshold\"}},\n+};\n+\n+void RegisterMiningRPCCommands(CRPCTable& t)\n+{\n+    for (unsigned int vcidx = 0; vcidx < ARRAYLEN(commands); vcidx++)\n+        t.appendCommand(commands[vcidx].name, &commands[vcidx]);\n+}\n+\n+\n+UniValue getblocktemplate(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() > 1)\n         throw std::runtime_error(\n@@ -360,33 +728,27 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n             \"  \\\"height\\\" : n                      (numeric) The height of the next block\\n\"\n             \"}\\n\"\n \n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getblocktemplate\", \"{\\\"rules\\\": [\\\"segwit\\\"]}\")\n-            + HelpExampleRpc(\"getblocktemplate\", \"{\\\"rules\\\": [\\\"segwit\\\"]}\")\n-         );\n+            \"\\nExamples:\\n\" +\n+            HelpExampleCli(\"getblocktemplate\", \"{\\\"rules\\\": [\\\"segwit\\\"]}\") + HelpExampleRpc(\"getblocktemplate\", \"{\\\"rules\\\": [\\\"segwit\\\"]}\"));\n \n     LOCK(cs_main);\n \n     std::string strMode = \"template\";\n     UniValue lpval = NullUniValue;\n     std::set<std::string> setClientRules;\n     int64_t nMaxVersionPreVB = -1;\n-    if (!request.params[0].isNull())\n-    {\n+    if (!request.params[0].isNull()) {\n         const UniValue& oparam = request.params[0].get_obj();\n         const UniValue& modeval = find_value(oparam, \"mode\");\n         if (modeval.isStr())\n             strMode = modeval.get_str();\n-        else if (modeval.isNull())\n-        {\n+        else if (modeval.isNull()) {\n             /* Do nothing */\n-        }\n-        else\n+        } else\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid mode\");\n         lpval = find_value(oparam, \"longpollid\");\n \n-        if (strMode == \"proposal\")\n-        {\n+        if (strMode == \"proposal\") {\n             const UniValue& dataval = find_value(oparam, \"data\");\n             if (!dataval.isStr())\n                 throw JSONRPCError(RPC_TYPE_ERROR, \"Missing data String key for proposal\");\n@@ -432,7 +794,7 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n     if (strMode != \"template\")\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid mode\");\n \n-    if(!g_connman)\n+    if (!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n     if (g_connman->GetNodeCount(CConnman::CONNECTIONS_ALL) == 0)\n@@ -443,23 +805,19 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n \n     static unsigned int nTransactionsUpdatedLast;\n \n-    if (!lpval.isNull())\n-    {\n+    if (!lpval.isNull()) {\n         // Wait to respond until either the best block changes, OR a minute has passed and there are more transactions\n         uint256 hashWatchedChain;\n         std::chrono::steady_clock::time_point checktxtime;\n         unsigned int nTransactionsUpdatedLastLP;\n \n-        if (lpval.isStr())\n-        {\n+        if (lpval.isStr()) {\n             // Format: <hashBestChain><nTransactionsUpdatedLast>\n             std::string lpstr = lpval.get_str();\n \n             hashWatchedChain.SetHex(lpstr.substr(0, 64));\n             nTransactionsUpdatedLastLP = atoi64(lpstr.substr(64));\n-        }\n-        else\n-        {\n+        } else {\n             // NOTE: Spec does not specify behaviour for non-string longpollid, but this makes testing easier\n             hashWatchedChain = chainActive.Tip()->GetBlockHash();\n             nTransactionsUpdatedLastLP = nTransactionsUpdatedLast;\n@@ -471,10 +829,8 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n             checktxtime = std::chrono::steady_clock::now() + std::chrono::minutes(1);\n \n             WaitableLock lock(g_best_block_mutex);\n-            while (g_best_block == hashWatchedChain && IsRPCRunning())\n-            {\n-                if (g_best_block_cv.wait_until(lock, checktxtime) == std::cv_status::timeout)\n-                {\n+            while (g_best_block == hashWatchedChain && IsRPCRunning()) {\n+                if (g_best_block_cv.wait_until(lock, checktxtime) == std::cv_status::timeout) {\n                     // Timeout: Check transactions for update\n                     if (mempool.GetTransactionsUpdated() != nTransactionsUpdatedLastLP)\n                         break;\n@@ -504,8 +860,7 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n     static bool fLastTemplateSupportsSegwit = true;\n     if (pindexPrev != chainActive.Tip() ||\n         (mempool.GetTransactionsUpdated() != nTransactionsUpdatedLast && GetTime() - nStart > 5) ||\n-        fLastTemplateSupportsSegwit != fSupportsSegwit)\n-    {\n+        fLastTemplateSupportsSegwit != fSupportsSegwit) {\n         // Clear pindexPrev so future calls make a new block, despite any failures from here on\n         pindexPrev = nullptr;\n \n@@ -517,7 +872,7 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n \n         // Create new block\n         CScript scriptDummy = CScript() << OP_TRUE;\n-        pblocktemplate = BlockAssembler(Params()).CreateNewBlock(scriptDummy, fSupportsSegwit);\n+        pblocktemplate = BlockAssembler(Params()).CreateNewBlock(scriptDummy, 0, fSupportsSegwit);\n         if (!pblocktemplate)\n             throw JSONRPCError(RPC_OUT_OF_MEMORY, \"Out of memory\");\n \n@@ -535,7 +890,8 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n     // NOTE: If at some point we support pre-segwit miners post-segwit-activation, this needs to take segwit support into consideration\n     const bool fPreSegWit = (ThresholdState::ACTIVE != VersionBitsState(pindexPrev, consensusParams, Consensus::DEPLOYMENT_SEGWIT, versionbitscache));\n \n-    UniValue aCaps(UniValue::VARR); aCaps.push_back(\"proposal\");\n+    UniValue aCaps(UniValue::VARR);\n+    aCaps.push_back(\"proposal\");\n \n     UniValue transactions(UniValue::VARR);\n     std::map<uint256, int64_t> setTxIndex;\n@@ -555,8 +911,7 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n         entry.pushKV(\"hash\", tx.GetWitnessHash().GetHex());\n \n         UniValue deps(UniValue::VARR);\n-        for (const CTxIn &in : tx.vin)\n-        {\n+        for (const CTxIn& in : tx.vin) {\n             if (setTxIndex.count(in.prevout.hash))\n                 deps.push_back(setTxIndex[in.prevout.hash]);\n         }\n@@ -594,40 +949,38 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n         Consensus::DeploymentPos pos = Consensus::DeploymentPos(j);\n         ThresholdState state = VersionBitsState(pindexPrev, consensusParams, pos, versionbitscache);\n         switch (state) {\n-            case ThresholdState::DEFINED:\n-            case ThresholdState::FAILED:\n-                // Not exposed to GBT at all\n-                break;\n-            case ThresholdState::LOCKED_IN:\n-                // Ensure bit is set in block version\n-                pblock->nVersion |= VersionBitsMask(consensusParams, pos);\n-                // FALL THROUGH to get vbavailable set...\n-            case ThresholdState::STARTED:\n-            {\n-                const struct VBDeploymentInfo& vbinfo = VersionBitsDeploymentInfo[pos];\n-                vbavailable.pushKV(gbt_vb_name(pos), consensusParams.vDeployments[pos].bit);\n-                if (setClientRules.find(vbinfo.name) == setClientRules.end()) {\n-                    if (!vbinfo.gbt_force) {\n-                        // If the client doesn't support this, don't indicate it in the [default] version\n-                        pblock->nVersion &= ~VersionBitsMask(consensusParams, pos);\n-                    }\n+        case ThresholdState::DEFINED:\n+        case ThresholdState::FAILED:\n+            // Not exposed to GBT at all\n+            break;\n+        case ThresholdState::LOCKED_IN:\n+            // Ensure bit is set in block version\n+            pblock->nVersion |= VersionBitsMask(consensusParams, pos);\n+            // FALL THROUGH to get vbavailable set...\n+        case ThresholdState::STARTED: {\n+            const struct VBDeploymentInfo& vbinfo = VersionBitsDeploymentInfo[pos];\n+            vbavailable.pushKV(gbt_vb_name(pos), consensusParams.vDeployments[pos].bit);\n+            if (setClientRules.find(vbinfo.name) == setClientRules.end()) {\n+                if (!vbinfo.gbt_force) {\n+                    // If the client doesn't support this, don't indicate it in the [default] version\n+                    pblock->nVersion &= ~VersionBitsMask(consensusParams, pos);\n                 }\n-                break;\n             }\n-            case ThresholdState::ACTIVE:\n-            {\n-                // Add to rules only\n-                const struct VBDeploymentInfo& vbinfo = VersionBitsDeploymentInfo[pos];\n-                aRules.push_back(gbt_vb_name(pos));\n-                if (setClientRules.find(vbinfo.name) == setClientRules.end()) {\n-                    // Not supported by the client; make sure it's safe to proceed\n-                    if (!vbinfo.gbt_force) {\n-                        // If we do anything other than throw an exception here, be sure version/force isn't sent to old clients\n-                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Support for '%s' rule requires explicit client support\", vbinfo.name));\n-                    }\n+            break;\n+        }\n+        case ThresholdState::ACTIVE: {\n+            // Add to rules only\n+            const struct VBDeploymentInfo& vbinfo = VersionBitsDeploymentInfo[pos];\n+            aRules.push_back(gbt_vb_name(pos));\n+            if (setClientRules.find(vbinfo.name) == setClientRules.end()) {\n+                // Not supported by the client; make sure it's safe to proceed\n+                if (!vbinfo.gbt_force) {\n+                    // If we do anything other than throw an exception here, be sure version/force isn't sent to old clients\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Support for '%s' rule requires explicit client support\", vbinfo.name));\n                 }\n-                break;\n             }\n+            break;\n+        }\n         }\n     }\n     result.pushKV(\"version\", pblock->nVersion);\n@@ -649,7 +1002,7 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n     result.pushKV(\"coinbasevalue\", (int64_t)pblock->vtx[0]->vout[0].nValue);\n     result.pushKV(\"longpollid\", chainActive.Tip()->GetBlockHash().GetHex() + i64tostr(nTransactionsUpdatedLast));\n     result.pushKV(\"target\", hashTarget.GetHex());\n-    result.pushKV(\"mintime\", (int64_t)pindexPrev->GetMedianTimePast()+1);\n+    result.pushKV(\"mintime\", (int64_t)pindexPrev->GetMedianTimePast() + 1);\n     result.pushKV(\"mutable\", aMutable);\n     result.pushKV(\"noncerange\", \"00000000ffffffff\");\n     int64_t nSigOpLimit = MAX_BLOCK_SIGOPS_COST;\n@@ -667,291 +1020,11 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n     }\n     result.pushKV(\"curtime\", pblock->GetBlockTime());\n     result.pushKV(\"bits\", strprintf(\"%08x\", pblock->nBits));\n-    result.pushKV(\"height\", (int64_t)(pindexPrev->nHeight+1));\n+    result.pushKV(\"height\", (int64_t)(pindexPrev->nHeight + 1));\n \n     if (!pblocktemplate->vchCoinbaseCommitment.empty() && fSupportsSegwit) {\n         result.pushKV(\"default_witness_commitment\", HexStr(pblocktemplate->vchCoinbaseCommitment.begin(), pblocktemplate->vchCoinbaseCommitment.end()));\n     }\n \n     return result;\n }\n-\n-class submitblock_StateCatcher : public CValidationInterface\n-{\n-public:\n-    uint256 hash;\n-    bool found;\n-    CValidationState state;\n-\n-    explicit submitblock_StateCatcher(const uint256 &hashIn) : hash(hashIn), found(false), state() {}\n-\n-protected:\n-    void BlockChecked(const CBlock& block, const CValidationState& stateIn) override {\n-        if (block.GetHash() != hash)\n-            return;\n-        found = true;\n-        state = stateIn;\n-    }\n-};\n-\n-static UniValue submitblock(const JSONRPCRequest& request)\n-{\n-    // We allow 2 arguments for compliance with BIP22. Argument 2 is ignored.\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n-        throw std::runtime_error(\n-            \"submitblock \\\"hexdata\\\"  ( \\\"dummy\\\" )\\n\"\n-            \"\\nAttempts to submit new block to network.\\n\"\n-            \"See https://en.bitcoin.it/wiki/BIP_0022 for full specification.\\n\"\n-\n-            \"\\nArguments\\n\"\n-            \"1. \\\"hexdata\\\"        (string, required) the hex-encoded block data to submit\\n\"\n-            \"2. \\\"dummy\\\"          (optional) dummy value, for compatibility with BIP22. This value is ignored.\\n\"\n-            \"\\nResult:\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"submitblock\", \"\\\"mydata\\\"\")\n-            + HelpExampleRpc(\"submitblock\", \"\\\"mydata\\\"\")\n-        );\n-    }\n-\n-    std::shared_ptr<CBlock> blockptr = std::make_shared<CBlock>();\n-    CBlock& block = *blockptr;\n-    if (!DecodeHexBlk(block, request.params[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"Block decode failed\");\n-    }\n-\n-    if (block.vtx.empty() || !block.vtx[0]->IsCoinBase()) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"Block does not start with a coinbase\");\n-    }\n-\n-    uint256 hash = block.GetHash();\n-    {\n-        LOCK(cs_main);\n-        const CBlockIndex* pindex = LookupBlockIndex(hash);\n-        if (pindex) {\n-            if (pindex->IsValid(BLOCK_VALID_SCRIPTS)) {\n-                return \"duplicate\";\n-            }\n-            if (pindex->nStatus & BLOCK_FAILED_MASK) {\n-                return \"duplicate-invalid\";\n-            }\n-        }\n-    }\n-\n-    {\n-        LOCK(cs_main);\n-        const CBlockIndex* pindex = LookupBlockIndex(block.hashPrevBlock);\n-        if (pindex) {\n-            UpdateUncommittedBlockStructures(block, pindex, Params().GetConsensus());\n-        }\n-    }\n-\n-    bool new_block;\n-    submitblock_StateCatcher sc(block.GetHash());\n-    RegisterValidationInterface(&sc);\n-    bool accepted = ProcessNewBlock(Params(), blockptr, /* fForceProcessing */ true, /* fNewBlock */ &new_block);\n-    UnregisterValidationInterface(&sc);\n-    if (!new_block) {\n-        if (!accepted) {\n-            // TODO Maybe pass down fNewBlock to AcceptBlockHeader, so it is properly set to true in this case?\n-            return \"invalid\";\n-        }\n-        return \"duplicate\";\n-    }\n-    if (!sc.found) {\n-        return \"inconclusive\";\n-    }\n-    return BIP22ValidationResult(sc.state);\n-}\n-\n-static UniValue estimatefee(const JSONRPCRequest& request)\n-{\n-    throw JSONRPCError(RPC_METHOD_DEPRECATED, \"estimatefee was removed in v0.17.\\n\"\n-        \"Clients should use estimatesmartfee.\");\n-}\n-\n-static UniValue estimatesmartfee(const JSONRPCRequest& request)\n-{\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n-        throw std::runtime_error(\n-            \"estimatesmartfee conf_target (\\\"estimate_mode\\\")\\n\"\n-            \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n-            \"confirmation within conf_target blocks if possible and return the number of blocks\\n\"\n-            \"for which the estimate is valid. Uses virtual transaction size as defined\\n\"\n-            \"in BIP 141 (witness data is discounted).\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. conf_target     (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n-            \"2. \\\"estimate_mode\\\" (string, optional, default=CONSERVATIVE) The fee estimate mode.\\n\"\n-            \"                   Whether to return a more conservative estimate which also satisfies\\n\"\n-            \"                   a longer history. A conservative estimate potentially returns a\\n\"\n-            \"                   higher feerate and is more likely to be sufficient for the desired\\n\"\n-            \"                   target, but is not as responsive to short term drops in the\\n\"\n-            \"                   prevailing fee market.  Must be one of:\\n\"\n-            \"       \\\"UNSET\\\" (defaults to CONSERVATIVE)\\n\"\n-            \"       \\\"ECONOMICAL\\\"\\n\"\n-            \"       \\\"CONSERVATIVE\\\"\\n\"\n-            \"\\nResult:\\n\"\n-            \"{\\n\"\n-            \"  \\\"feerate\\\" : x.x,     (numeric, optional) estimate fee rate in \" + CURRENCY_UNIT + \"/kB\\n\"\n-            \"  \\\"errors\\\": [ str... ] (json array of strings, optional) Errors encountered during processing\\n\"\n-            \"  \\\"blocks\\\" : n         (numeric) block number where estimate was found\\n\"\n-            \"}\\n\"\n-            \"\\n\"\n-            \"The request target will be clamped between 2 and the highest target\\n\"\n-            \"fee estimation is able to return based on how long it has been running.\\n\"\n-            \"An error is returned if not enough transactions and blocks\\n\"\n-            \"have been observed to make an estimate for any number of blocks.\\n\"\n-            \"\\nExample:\\n\"\n-            + HelpExampleCli(\"estimatesmartfee\", \"6\")\n-            );\n-\n-    RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VSTR});\n-    RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n-    unsigned int conf_target = ParseConfirmTarget(request.params[0]);\n-    bool conservative = true;\n-    if (!request.params[1].isNull()) {\n-        FeeEstimateMode fee_mode;\n-        if (!FeeModeFromString(request.params[1].get_str(), fee_mode)) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid estimate_mode parameter\");\n-        }\n-        if (fee_mode == FeeEstimateMode::ECONOMICAL) conservative = false;\n-    }\n-\n-    UniValue result(UniValue::VOBJ);\n-    UniValue errors(UniValue::VARR);\n-    FeeCalculation feeCalc;\n-    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(conf_target, &feeCalc, conservative);\n-    if (feeRate != CFeeRate(0)) {\n-        result.pushKV(\"feerate\", ValueFromAmount(feeRate.GetFeePerK()));\n-    } else {\n-        errors.push_back(\"Insufficient data or no feerate found\");\n-        result.pushKV(\"errors\", errors);\n-    }\n-    result.pushKV(\"blocks\", feeCalc.returnedTarget);\n-    return result;\n-}\n-\n-static UniValue estimaterawfee(const JSONRPCRequest& request)\n-{\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n-        throw std::runtime_error(\n-            \"estimaterawfee conf_target (threshold)\\n\"\n-            \"\\nWARNING: This interface is unstable and may disappear or change!\\n\"\n-            \"\\nWARNING: This is an advanced API call that is tightly coupled to the specific\\n\"\n-            \"         implementation of fee estimation. The parameters it can be called with\\n\"\n-            \"         and the results it returns will change if the internal implementation changes.\\n\"\n-            \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n-            \"confirmation within conf_target blocks if possible. Uses virtual transaction size as\\n\"\n-            \"defined in BIP 141 (witness data is discounted).\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. conf_target (numeric) Confirmation target in blocks (1 - 1008)\\n\"\n-            \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n-            \"               confirmed within conf_target in order to consider those feerates as high enough and proceed to check\\n\"\n-            \"               lower buckets.  Default: 0.95\\n\"\n-            \"\\nResult:\\n\"\n-            \"{\\n\"\n-            \"  \\\"short\\\" : {            (json object, optional) estimate for short time horizon\\n\"\n-            \"      \\\"feerate\\\" : x.x,        (numeric, optional) estimate fee rate in \" + CURRENCY_UNIT + \"/kB\\n\"\n-            \"      \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n-            \"      \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n-            \"      \\\"pass\\\" : {              (json object, optional) information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n-            \"          \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n-            \"          \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n-            \"          \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n-            \"          \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n-            \"          \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n-            \"          \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n-            \"      },\\n\"\n-            \"      \\\"fail\\\" : { ... },       (json object, optional) information about the highest range of feerates to fail to meet the threshold\\n\"\n-            \"      \\\"errors\\\":  [ str... ]   (json array of strings, optional) Errors encountered during processing\\n\"\n-            \"  },\\n\"\n-            \"  \\\"medium\\\" : { ... },    (json object, optional) estimate for medium time horizon\\n\"\n-            \"  \\\"long\\\" : { ... }       (json object) estimate for long time horizon\\n\"\n-            \"}\\n\"\n-            \"\\n\"\n-            \"Results are returned for any horizon which tracks blocks up to the confirmation target.\\n\"\n-            \"\\nExample:\\n\"\n-            + HelpExampleCli(\"estimaterawfee\", \"6 0.9\")\n-            );\n-\n-    RPCTypeCheck(request.params, {UniValue::VNUM, UniValue::VNUM}, true);\n-    RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n-    unsigned int conf_target = ParseConfirmTarget(request.params[0]);\n-    double threshold = 0.95;\n-    if (!request.params[1].isNull()) {\n-        threshold = request.params[1].get_real();\n-    }\n-    if (threshold < 0 || threshold > 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid threshold\");\n-    }\n-\n-    UniValue result(UniValue::VOBJ);\n-\n-    for (FeeEstimateHorizon horizon : {FeeEstimateHorizon::SHORT_HALFLIFE, FeeEstimateHorizon::MED_HALFLIFE, FeeEstimateHorizon::LONG_HALFLIFE}) {\n-        CFeeRate feeRate;\n-        EstimationResult buckets;\n-\n-        // Only output results for horizons which track the target\n-        if (conf_target > ::feeEstimator.HighestTargetTracked(horizon)) continue;\n-\n-        feeRate = ::feeEstimator.estimateRawFee(conf_target, threshold, horizon, &buckets);\n-        UniValue horizon_result(UniValue::VOBJ);\n-        UniValue errors(UniValue::VARR);\n-        UniValue passbucket(UniValue::VOBJ);\n-        passbucket.pushKV(\"startrange\", round(buckets.pass.start));\n-        passbucket.pushKV(\"endrange\", round(buckets.pass.end));\n-        passbucket.pushKV(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0);\n-        passbucket.pushKV(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0);\n-        passbucket.pushKV(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0);\n-        passbucket.pushKV(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0);\n-        UniValue failbucket(UniValue::VOBJ);\n-        failbucket.pushKV(\"startrange\", round(buckets.fail.start));\n-        failbucket.pushKV(\"endrange\", round(buckets.fail.end));\n-        failbucket.pushKV(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0);\n-        failbucket.pushKV(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0);\n-        failbucket.pushKV(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0);\n-        failbucket.pushKV(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0);\n-\n-        // CFeeRate(0) is used to indicate error as a return value from estimateRawFee\n-        if (feeRate != CFeeRate(0)) {\n-            horizon_result.pushKV(\"feerate\", ValueFromAmount(feeRate.GetFeePerK()));\n-            horizon_result.pushKV(\"decay\", buckets.decay);\n-            horizon_result.pushKV(\"scale\", (int)buckets.scale);\n-            horizon_result.pushKV(\"pass\", passbucket);\n-            // buckets.fail.start == -1 indicates that all buckets passed, there is no fail bucket to output\n-            if (buckets.fail.start != -1) horizon_result.pushKV(\"fail\", failbucket);\n-        } else {\n-            // Output only information that is still meaningful in the event of error\n-            horizon_result.pushKV(\"decay\", buckets.decay);\n-            horizon_result.pushKV(\"scale\", (int)buckets.scale);\n-            horizon_result.pushKV(\"fail\", failbucket);\n-            errors.push_back(\"Insufficient data or no feerate found which meets threshold\");\n-            horizon_result.pushKV(\"errors\",errors);\n-        }\n-        result.pushKV(StringForFeeEstimateHorizon(horizon), horizon_result);\n-    }\n-    return result;\n-}\n-\n-static const CRPCCommand commands[] =\n-{ //  category              name                      actor (function)         argNames\n-  //  --------------------- ------------------------  -----------------------  ----------\n-    { \"mining\",             \"getnetworkhashps\",       &getnetworkhashps,       {\"nblocks\",\"height\"} },\n-    { \"mining\",             \"getmininginfo\",          &getmininginfo,          {} },\n-    { \"mining\",             \"prioritisetransaction\",  &prioritisetransaction,  {\"txid\",\"dummy\",\"fee_delta\"} },\n-    { \"mining\",             \"getblocktemplate\",       &getblocktemplate,       {\"template_request\"} },\n-    { \"mining\",             \"submitblock\",            &submitblock,            {\"hexdata\",\"dummy\"} },\n-\n-\n-    { \"generating\",         \"generatetoaddress\",      &generatetoaddress,      {\"nblocks\",\"address\",\"maxtries\"} },\n-\n-    { \"hidden\",             \"estimatefee\",            &estimatefee,            {} },\n-    { \"util\",               \"estimatesmartfee\",       &estimatesmartfee,       {\"conf_target\", \"estimate_mode\"} },\n-\n-    { \"hidden\",             \"estimaterawfee\",         &estimaterawfee,         {\"conf_target\", \"threshold\"} },\n-};\n-\n-void RegisterMiningRPCCommands(CRPCTable &t)\n-{\n-    for (unsigned int vcidx = 0; vcidx < ARRAYLEN(commands); vcidx++)\n-        t.appendCommand(commands[vcidx].name, &commands[vcidx]);\n-}"
      },
      {
        "sha": "bb570bc843e58385fc178952f9c2643e5e617395",
        "filename": "src/rpc/mining.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/rpc/mining.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/rpc/mining.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.h?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -1,3 +1,4 @@\n+// Copyright (c) 2018 The BitcoinV Core developers\n // Copyright (c) 2017 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n@@ -10,7 +11,7 @@\n #include <univalue.h>\n \n /** Generate blocks (mine) */\n-UniValue generateBlocks(std::shared_ptr<CReserveScript> coinbaseScript, int nGenerate, uint64_t nMaxTries, bool keepScript);\n+UniValue generateBlocks(std::shared_ptr<CReserveScript> coinbaseScript, int nGenerate, uint64_t nMaxTries, uint64_t extra_subsidy, bool keepScript);\n \n /** Check bounds on a command line confirm target */\n unsigned int ParseConfirmTarget(const UniValue& value);"
      },
      {
        "sha": "a52ecbc50a242dd30d8f082e1664432b054192b9",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -1,3 +1,4 @@\n+// Copyright (c) 2018 The BitcoinV Core developers\n // Copyright (c) 2009-2018 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n@@ -207,8 +208,8 @@ static UniValue addnode(const JSONRPCRequest& request)\n             \"1. \\\"node\\\"     (string, required) The node (see getpeerinfo for nodes)\\n\"\n             \"2. \\\"command\\\"  (string, required) 'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node once\\n\"\n             \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"addnode\", \"\\\"192.168.0.6:8333\\\" \\\"onetry\\\"\")\n-            + HelpExampleRpc(\"addnode\", \"\\\"192.168.0.6:8333\\\", \\\"onetry\\\"\")\n+            + HelpExampleCli(\"addnode\", \"\\\"192.168.0.6:9333\\\" \\\"onetry\\\"\")\n+            + HelpExampleRpc(\"addnode\", \"\\\"192.168.0.6:9333\\\", \\\"onetry\\\"\")\n         );\n \n     if(!g_connman)\n@@ -249,9 +250,9 @@ static UniValue disconnectnode(const JSONRPCRequest& request)\n             \"1. \\\"address\\\"     (string, optional) The IP address/port of the node\\n\"\n             \"2. \\\"nodeid\\\"      (number, optional) The node ID (see getpeerinfo for node IDs)\\n\"\n             \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"disconnectnode\", \"\\\"192.168.0.6:8333\\\"\")\n+            + HelpExampleCli(\"disconnectnode\", \"\\\"192.168.0.6:9333\\\"\")\n             + HelpExampleCli(\"disconnectnode\", \"\\\"\\\" 1\")\n-            + HelpExampleRpc(\"disconnectnode\", \"\\\"192.168.0.6:8333\\\"\")\n+            + HelpExampleRpc(\"disconnectnode\", \"\\\"192.168.0.6:9333\\\"\")\n             + HelpExampleRpc(\"disconnectnode\", \"\\\"\\\", 1\")\n         );\n \n@@ -296,7 +297,7 @@ static UniValue getaddednodeinfo(const JSONRPCRequest& request)\n             \"    \\\"connected\\\" : true|false,          (boolean) If connected\\n\"\n             \"    \\\"addresses\\\" : [                    (list of objects) Only when connected = true\\n\"\n             \"       {\\n\"\n-            \"         \\\"address\\\" : \\\"192.168.0.201:8333\\\",  (string) The bitcoin server IP and port we're connected to\\n\"\n+            \"         \\\"address\\\" : \\\"192.168.0.201:9333\\\",  (string) The bitcoin server IP and port we're connected to\\n\"\n             \"         \\\"connected\\\" : \\\"outbound\\\"           (string) connection, inbound or outbound\\n\"\n             \"       }\\n\"\n             \"     ]\\n\""
      },
      {
        "sha": "0925b1c0cf24868e7f430284e5cea0cebbc85589",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 13,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -396,6 +396,7 @@ CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniVal\n         rawTx.vin.push_back(in);\n     }\n \n+    std::set<CTxDestination> destinations;\n     if (!outputs_is_obj) {\n         // Translate array of key-value pairs into dict\n         UniValue outputs_dict = UniValue(UniValue::VOBJ);\n@@ -411,17 +412,8 @@ CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniVal\n         }\n         outputs = std::move(outputs_dict);\n     }\n-\n-    // Duplicate checking\n-    std::set<CTxDestination> destinations;\n-    bool has_data{false};\n-\n     for (const std::string& name_ : outputs.getKeys()) {\n         if (name_ == \"data\") {\n-            if (has_data) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, duplicate key: data\");\n-            }\n-            has_data = true;\n             std::vector<unsigned char> data = ParseHexV(outputs[name_].getValStr(), \"Data\");\n \n             CTxOut out(0, CScript() << OP_RETURN << data);\n@@ -473,8 +465,7 @@ static UniValue createrawtransaction(const JSONRPCRequest& request)\n             \"       } \\n\"\n             \"       ,...\\n\"\n             \"     ]\\n\"\n-            \"2. \\\"outputs\\\"               (array, required) a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n-            \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+            \"2. \\\"outputs\\\"               (array, required) a json array with outputs (key-value pairs)\\n\"\n             \"   [\\n\"\n             \"    {\\n\"\n             \"      \\\"address\\\": x.xxx,    (obj, optional) A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\\n\"\n@@ -1699,8 +1690,7 @@ UniValue createpsbt(const JSONRPCRequest& request)\n                             \"       } \\n\"\n                             \"       ,...\\n\"\n                             \"     ]\\n\"\n-                            \"2. \\\"outputs\\\"               (array, required) a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n-                            \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                            \"2. \\\"outputs\\\"               (array, required) a json array with outputs (key-value pairs)\\n\"\n                             \"   [\\n\"\n                             \"    {\\n\"\n                             \"      \\\"address\\\": x.xxx,    (obj, optional) A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\\n\""
      },
      {
        "sha": "d126acc372d2f1020d8726139461b4f39106227e",
        "filename": "src/test/amount_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/test/amount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/test/amount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/amount_tests.cpp?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -1,3 +1,4 @@\n+// Copyright (c) 2018 The BitcoinV Core developers\n // Copyright (c) 2016-2018 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n@@ -102,7 +103,7 @@ BOOST_AUTO_TEST_CASE(ToStringTest)\n {\n     CFeeRate feeRate;\n     feeRate = CFeeRate(1);\n-    BOOST_CHECK_EQUAL(feeRate.ToString(), \"0.00000001 BTC/kB\");\n+    BOOST_CHECK_EQUAL(feeRate.ToString(), \"0.00000001 BTCV/kB\");\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "b1cea733aebe5a7606cbd3da99ffd6f71151d1d5",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -1,3 +1,4 @@\n+// Copyright (c) 2018 The BitcoinV Core developers\n // Copyright (c) 2012-2018 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n@@ -94,13 +95,13 @@ BOOST_AUTO_TEST_CASE(caddrdb_read)\n     addrmanUncorrupted.MakeDeterministic();\n \n     CService addr1, addr2, addr3;\n-    Lookup(\"250.7.1.1\", addr1, 8333, false);\n+    Lookup(\"250.7.1.1\", addr1, 9333, false);\n     Lookup(\"250.7.2.2\", addr2, 9999, false);\n     Lookup(\"250.7.3.3\", addr3, 9999, false);\n \n     // Add three addresses to new table.\n     CService source;\n-    Lookup(\"252.5.1.1\", source, 8333, false);\n+    Lookup(\"252.5.1.1\", source, 9333, false);\n     addrmanUncorrupted.Add(CAddress(addr1, NODE_NONE), source);\n     addrmanUncorrupted.Add(CAddress(addr2, NODE_NONE), source);\n     addrmanUncorrupted.Add(CAddress(addr3, NODE_NONE), source);"
      },
      {
        "sha": "a49796d6f485e9c63048faae443d288b3f0518a3",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -122,6 +122,9 @@ BOOST_AUTO_TEST_CASE(rpc_createraw_op_return)\n {\n     BOOST_CHECK_NO_THROW(CallRPC(\"createrawtransaction [{\\\"txid\\\":\\\"a3b807410df0b60fcb9736768df5823938b2f838694939ba45f3c0a1bff150ed\\\",\\\"vout\\\":0}] {\\\"data\\\":\\\"68656c6c6f776f726c64\\\"}\"));\n \n+    // Allow more than one data transaction output\n+    BOOST_CHECK_NO_THROW(CallRPC(\"createrawtransaction [{\\\"txid\\\":\\\"a3b807410df0b60fcb9736768df5823938b2f838694939ba45f3c0a1bff150ed\\\",\\\"vout\\\":0}] {\\\"data\\\":\\\"68656c6c6f776f726c64\\\",\\\"data\\\":\\\"68656c6c6f776f726c64\\\"}\"));\n+\n     // Key not \"data\" (bad address)\n     BOOST_CHECK_THROW(CallRPC(\"createrawtransaction [{\\\"txid\\\":\\\"a3b807410df0b60fcb9736768df5823938b2f838694939ba45f3c0a1bff150ed\\\",\\\"vout\\\":0}] {\\\"somedata\\\":\\\"68656c6c6f776f726c64\\\"}\"), std::runtime_error);\n "
      },
      {
        "sha": "ebd436b5ad08b4594c6f756961cbc05511b33c97",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -1,3 +1,4 @@\n+// Copyright (c) 2018 The BitcoinV Core developers\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2018 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n@@ -710,7 +711,7 @@ fs::path GetDefaultDataDir()\n     // Unix: ~/.bitcoin\n #ifdef WIN32\n     // Windows\n-    return GetSpecialFolderPath(CSIDL_APPDATA) / \"Bitcoin\";\n+    return GetSpecialFolderPath(CSIDL_APPDATA) / \"BitcoinV\";\n #else\n     fs::path pathRet;\n     char* pszHome = getenv(\"HOME\");\n@@ -720,10 +721,10 @@ fs::path GetDefaultDataDir()\n         pathRet = fs::path(pszHome);\n #ifdef MAC_OSX\n     // Mac\n-    return pathRet / \"Library/Application Support/Bitcoin\";\n+    return pathRet / \"Library/Application Support/BitcoinV\";\n #else\n     // Unix\n-    return pathRet / \".bitcoin\";\n+    return pathRet / \".bitcoinV\";\n #endif\n #endif\n }\n@@ -1222,8 +1223,8 @@ std::string CopyrightHolders(const std::string& strPrefix)\n     std::string strCopyrightHolders = strPrefix + strprintf(_(COPYRIGHT_HOLDERS), _(COPYRIGHT_HOLDERS_SUBSTITUTION));\n \n     // Check for untranslated substitution to make sure Bitcoin Core copyright is not removed by accident\n-    if (strprintf(COPYRIGHT_HOLDERS, COPYRIGHT_HOLDERS_SUBSTITUTION).find(\"Bitcoin Core\") == std::string::npos) {\n-        strCopyrightHolders += \"\\n\" + strPrefix + \"The Bitcoin Core developers\";\n+    if (strprintf(COPYRIGHT_HOLDERS, COPYRIGHT_HOLDERS_SUBSTITUTION).find(\"BitcoinV Core\") == std::string::npos) {\n+        strCopyrightHolders += \"\\n\" + strPrefix + \"The BitcoinV Core developers\";\n     }\n     return strCopyrightHolders;\n }"
      },
      {
        "sha": "f36289073c52c2294046a81e415feda759f25829",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 8,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -1,3 +1,4 @@\n+// Copyright (c) 2018 The BitcoinV Core developers\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2018 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n@@ -39,6 +40,7 @@\n #include <utilmoneystr.h>\n #include <utilstrencodings.h>\n #include <validationinterface.h>\n+#include <variable_block_reward.h>\n #include <warnings.h>\n \n #include <future>\n@@ -941,7 +943,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n         // Remove conflicting transactions from the mempool\n         for (CTxMemPool::txiter it : allConflicting)\n         {\n-            LogPrint(BCLog::MEMPOOL, \"replacing tx %s with %s for %s BTC additional fees, %d delta bytes\\n\",\n+            LogPrint(BCLog::MEMPOOL, \"replacing tx %s with %s for %s BTCV additional fees, %d delta bytes\\n\",\n                     it->GetTx().GetHash().ToString(),\n                     hash.ToString(),\n                     FormatMoney(nModifiedFees - nConflictingFees),\n@@ -2050,13 +2052,6 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n     int64_t nTime3 = GetTimeMicros(); nTimeConnect += nTime3 - nTime2;\n     LogPrint(BCLog::BENCH, \"      - Connect %u transactions: %.2fms (%.3fms/tx, %.3fms/txin) [%.2fs (%.2fms/blk)]\\n\", (unsigned)block.vtx.size(), MILLI * (nTime3 - nTime2), MILLI * (nTime3 - nTime2) / block.vtx.size(), nInputs <= 1 ? 0 : MILLI * (nTime3 - nTime2) / (nInputs-1), nTimeConnect * MICRO, nTimeConnect * MILLI / nBlocksTotal);\n \n-    CAmount blockReward = nFees + GetBlockSubsidy(pindex->nHeight, chainparams.GetConsensus());\n-    if (block.vtx[0]->GetValueOut() > blockReward)\n-        return state.DoS(100,\n-                         error(\"ConnectBlock(): coinbase pays too much (actual=%d vs limit=%d)\",\n-                               block.vtx[0]->GetValueOut(), blockReward),\n-                               REJECT_INVALID, \"bad-cb-amount\");\n-\n     if (!control.Wait())\n         return state.DoS(100, error(\"%s: CheckQueue failed\", __func__), REJECT_INVALID, \"block-validation-failed\");\n     int64_t nTime4 = GetTimeMicros(); nTimeVerify += nTime4 - nTime2;\n@@ -2074,6 +2069,19 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n     }\n \n     assert(pindex->phashBlock);\n+\n+\n+    // This is where VBR (Variable Block Reward kicks in).\n+    CAmount subsidyReward = GetBlockSubsidyVBR(pindex->nHeight, chainparams.GetConsensus(), block, false);\n+\n+\n+    CAmount blockReward = nFees + subsidyReward;\n+    if (block.vtx[0]->GetValueOut() > blockReward)\n+        return state.DoS(100,\n+                         error(\"ConnectBlock(): coinbase pays too much (actual=%d vs limit=%d)\",\n+                               block.vtx[0]->GetValueOut(), blockReward),\n+                               REJECT_INVALID, \"bad-cb-amount\");\n+\n     // add this block to the view's block chain\n     view.SetBestBlock(pindex->GetBlockHash());\n "
      },
      {
        "sha": "a576695632e21036aa024adf3638c1a6519e8685",
        "filename": "src/variable_block_reward.cpp",
        "status": "added",
        "additions": 92,
        "deletions": 0,
        "changes": 92,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/variable_block_reward.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/variable_block_reward.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/variable_block_reward.cpp?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -0,0 +1,92 @@\n+// Copyright (c) 2018 The BitcoinV Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#include <iostream>\n+\n+#include \"variable_block_reward.h\"\n+#include <amount.h>\n+#include <consensus/params.h>\n+#include <primitives/block.h>\n+\n+#include <arith_uint256.h>\n+\n+static uint32_t get_num_consecutive_ones(uint32_t a, uint32_t b);\n+static uint32_t get_max_extra_subsidy_allowed(uint32_t num_consecutive_ones);\n+\n+CAmount GetBlockSubsidyVBR(int nHeight, const Consensus::Params& consensusParams, const CBlock &block, bool print)\n+{\n+    int halvings = nHeight / consensusParams.nSubsidyHalvingInterval;\n+    // Force block reward to zero when right shift is undefined.\n+    if (halvings >= 64)\n+        return 0;\n+\n+\n+    uint32_t prev_hash_0 = get_32bit_word_from_uint256(block.hashPrevBlock);\n+\n+    uint32_t merkle_root_0 = get_32bit_word_from_uint256(block.hashMerkleRoot);\n+\n+    // count num of matching bits starting from right.\n+    uint32_t consec_ones = get_num_consecutive_ones(prev_hash_0, merkle_root_0);\n+\n+    uint32_t extra_subsidy = get_max_extra_subsidy_allowed(consec_ones);\n+\n+    if (print)\n+    {\n+      std::cout << \"block.hashPrevBlock: \" << block.hashPrevBlock.ToString() << std::endl;\n+      std::cout << \"prev_hash_0: \" << std::hex << prev_hash_0 << std::endl;   \n+\n+      std::cout << \"block.hashMerkleRoot: \" << block.hashMerkleRoot.ToString() << std::endl;\n+      std::cout << \"merkle_root_0: \" << std::hex << merkle_root_0 << std::endl; \n+\n+      std::cout << \"# bits match: \" << consec_ones << std::endl;\n+    }\n+\n+\n+    CAmount nSubsidy = (50 * extra_subsidy) * COIN;\n+    // Subsidy is cut in half every XXXX blocks which will occur approximately every 4 years.\n+    nSubsidy >>= halvings;\n+    return nSubsidy;\n+}\n+\n+// count num of matching bits starting from right.\n+uint32_t get_num_consecutive_ones(uint32_t a, uint32_t b)\n+{\n+    //std::cout << \"a: \" << std::hex << a << std::endl; \n+    //std::cout << \"b: \" << std::hex << b << std::endl; \n+    // xnor gives a '1' if they match\n+    uint32_t reg = ~(a ^ b);\n+    //std::cout << \"---------------reg: \" << reg << std::endl;\n+    uint32_t num = 0;\n+    for (int n=0; n<32; n++)\n+    {\n+        if ( (reg & (1<<n)) > 0 )\n+        {\n+            num++;\n+        }\n+        else\n+        {\n+            break;\n+        }\n+    }\n+\n+    return num;\n+}\n+\n+// The more the consecutive bits, the bigger the BlockReward\n+uint32_t get_max_extra_subsidy_allowed(uint32_t num_consecutive_ones)\n+{\n+    if ( num_consecutive_ones <= 0)\n+    {\n+        return 0;\n+    }\n+\n+    uint64_t max_allowed = 1 << (num_consecutive_ones);\n+\n+    // max extra reward is about 1 million times regular block reward\n+    if ( max_allowed >= (1 << 20) )\n+    {\n+        max_allowed = (1 << 20);\n+    }\n+\n+    return max_allowed;\n+}"
      },
      {
        "sha": "4c73f4d81c6fb8156143b9a9185f8bdc3310ee2d",
        "filename": "src/variable_block_reward.h",
        "status": "added",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/variable_block_reward.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/variable_block_reward.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/variable_block_reward.h?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -0,0 +1,11 @@\n+// Copyright (c) 2018 The BitcoinV Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\n+\n+#include <amount.h>\n+#include <consensus/params.h>\n+#include <primitives/block.h>\n+\n+CAmount GetBlockSubsidyVBR(int nHeight, const Consensus::Params& consensusParams, const CBlock &block, bool print);"
      },
      {
        "sha": "5800e75827cb82d099fafa08a7e5601639b8f7de",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -996,9 +996,8 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n                     throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n                 }\n \n-                // if not internal add to address book or update label\n-                if (!internal) {\n-                    assert(IsValidDestination(pubkey_dest));\n+                // add to address book or update label\n+                if (IsValidDestination(pubkey_dest)) {\n                     pwallet->SetAddressBook(pubkey_dest, label, \"receive\");\n                 }\n \n@@ -1149,7 +1148,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n             \"      \\\"redeemscript\\\": \\\"<script>\\\"                            , (string, optional) Allowed only if the scriptPubKey is a P2SH address or a P2SH scriptPubKey\\n\"\n             \"      \\\"pubkeys\\\": [\\\"<pubKey>\\\", ... ]                         , (array, optional) Array of strings giving pubkeys that must occur in the output or redeemscript\\n\"\n             \"      \\\"keys\\\": [\\\"<key>\\\", ... ]                               , (array, optional) Array of strings giving private keys whose corresponding public keys must occur in the output or redeemscript\\n\"\n-            \"      \\\"internal\\\": <true>                                    , (boolean, optional, default: false) Stating whether matching outputs should be treated as not incoming payments aka change\\n\"\n+            \"      \\\"internal\\\": <true>                                    , (boolean, optional, default: false) Stating whether matching outputs should be treated as not incoming payments\\n\"\n             \"      \\\"watchonly\\\": <true>                                   , (boolean, optional, default: false) Stating whether matching outputs should be considered watched even when they're not spendable, only allowed if keys are empty\\n\"\n             \"      \\\"label\\\": <label>                                      , (string, optional, default: '') Label to assign to the address (aka account name, for now), only allowed with internal=false\\n\"\n             \"    }\\n\""
      },
      {
        "sha": "dba6dc0becfe3b12a280249bba1a114ee2560cd8",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 4,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -1,3 +1,4 @@\n+// Copyright (c) 2018 The BitcoinV Core developers\n // Copyright (c) 2010 Satoshi Nakamoto\n // Copyright (c) 2009-2018 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n@@ -3902,13 +3903,14 @@ UniValue generate(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3) {\n         throw std::runtime_error(\n             \"generate nblocks ( maxtries )\\n\"\n             \"\\nMine up to nblocks blocks immediately (before the RPC call returns) to an address in the wallet.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. nblocks      (numeric, required) How many blocks are generated immediately.\\n\"\n             \"2. maxtries     (numeric, optional) How many iterations to try (default = 1000000).\\n\"\n+            \"3. extra_subsidy (Variable Block Reward). Specify as power of 2 to acheive best possible reward. Defaults to regular bitcoin block reward if not specified.\\n\"\n             \"\\nResult:\\n\"\n             \"[ blockhashes ]     (array) hashes of blocks generated\\n\"\n             \"\\nExamples:\\n\"\n@@ -3923,6 +3925,12 @@ UniValue generate(const JSONRPCRequest& request)\n         max_tries = request.params[1].get_int();\n     }\n \n+    // don't forget to update 'static const CRPCConvertParam vRPCConvertParams[] = ' in client.cpp\n+    uint64_t extra_subsidy = 0; // defaults to regular bitcoin payout, always optional to increase.\n+    if (!request.params[2].isNull()) {\n+        extra_subsidy = request.params[2].get_int();\n+    }    \n+\n     std::shared_ptr<CReserveScript> coinbase_script;\n     pwallet->GetScriptForMining(coinbase_script);\n \n@@ -3936,7 +3944,7 @@ UniValue generate(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INTERNAL_ERROR, \"No coinbase script available\");\n     }\n \n-    return generateBlocks(coinbase_script, num_generate, max_tries, true);\n+    return generateBlocks(coinbase_script, num_generate, max_tries, extra_subsidy, true);\n }\n \n UniValue rescanblockchain(const JSONRPCRequest& request)\n@@ -4680,8 +4688,7 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n                             \"       } \\n\"\n                             \"       ,...\\n\"\n                             \"     ]\\n\"\n-                            \"2. \\\"outputs\\\"               (array, required) a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n-                            \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                            \"2. \\\"outputs\\\"               (array, required) a json array with outputs (key-value pairs)\\n\"\n                             \"   [\\n\"\n                             \"    {\\n\"\n                             \"      \\\"address\\\": x.xxx,    (obj, optional) A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\\n\""
      },
      {
        "sha": "c418b960a347172aa6289a55e8dc6410696b7570",
        "filename": "test/functional/feature_proxy.py",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/test/functional/feature_proxy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/test/functional/feature_proxy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_proxy.py?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -1,4 +1,5 @@\n #!/usr/bin/env python3\n+# Copyright (c) 2018 The BitcoinV Core developers\n # Copyright (c) 2015-2018 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n@@ -120,24 +121,24 @@ def node_test(self, node, proxies, auth, test_onion=True):\n \n         if test_onion:\n             # Test: outgoing onion connection through node\n-            node.addnode(\"bitcoinostk4e4re.onion:8333\", \"onetry\")\n+            node.addnode(\"bitcoinostk4e4re.onion:9333\", \"onetry\")\n             cmd = proxies[2].queue.get()\n             assert(isinstance(cmd, Socks5Command))\n             assert_equal(cmd.atyp, AddressType.DOMAINNAME)\n             assert_equal(cmd.addr, b\"bitcoinostk4e4re.onion\")\n-            assert_equal(cmd.port, 8333)\n+            assert_equal(cmd.port, 9333)\n             if not auth:\n                 assert_equal(cmd.username, None)\n                 assert_equal(cmd.password, None)\n             rv.append(cmd)\n \n         # Test: outgoing DNS name connection through node\n-        node.addnode(\"node.noumenon:8333\", \"onetry\")\n+        node.addnode(\"node.noumenon:9333\", \"onetry\")\n         cmd = proxies[3].queue.get()\n         assert(isinstance(cmd, Socks5Command))\n         assert_equal(cmd.atyp, AddressType.DOMAINNAME)\n         assert_equal(cmd.addr, b\"node.noumenon\")\n-        assert_equal(cmd.port, 8333)\n+        assert_equal(cmd.port, 9333)\n         if not auth:\n             assert_equal(cmd.username, None)\n             assert_equal(cmd.password, None)"
      },
      {
        "sha": "da94712ef96b71d86ca76f22b686ca0a54510315",
        "filename": "test/functional/interface_bitcoin_cli.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/test/functional/interface_bitcoin_cli.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/test/functional/interface_bitcoin_cli.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_bitcoin_cli.py?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -1,4 +1,5 @@\n #!/usr/bin/env python3\n+# Copyright (c) 2018 The BitcoinV Core developers\n # Copyright (c) 2017-2018 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n@@ -19,7 +20,7 @@ def run_test(self):\n         \"\"\"Main test logic\"\"\"\n \n         cli_response = self.nodes[0].cli(\"-version\").send_cli()\n-        assert(\"Bitcoin Core RPC client version\" in cli_response)\n+        assert(\"BitcoinV Core RPC client version\" in cli_response)\n \n         self.log.info(\"Compare responses from gewalletinfo RPC and `bitcoin-cli getwalletinfo`\")\n         cli_response = self.nodes[0].cli.getwalletinfo()"
      },
      {
        "sha": "d86b546c7d14c5f3806ae07e7c5eee5e91c89b25",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -99,8 +99,6 @@ def run_test(self):\n         assert_raises_rpc_error(-3, \"Amount out of range\", self.nodes[0].createrawtransaction, [], {address: -1})\n         assert_raises_rpc_error(-8, \"Invalid parameter, duplicated address: %s\" % address, self.nodes[0].createrawtransaction, [], multidict([(address, 1), (address, 1)]))\n         assert_raises_rpc_error(-8, \"Invalid parameter, duplicated address: %s\" % address, self.nodes[0].createrawtransaction, [], [{address: 1}, {address: 1}])\n-        assert_raises_rpc_error(-8, \"Invalid parameter, duplicate key: data\", self.nodes[0].createrawtransaction, [], [{\"data\": 'aa'}, {\"data\": \"bb\"}])\n-        assert_raises_rpc_error(-8, \"Invalid parameter, duplicate key: data\", self.nodes[0].createrawtransaction, [], multidict([(\"data\", 'aa'), (\"data\", \"bb\")]))\n         assert_raises_rpc_error(-8, \"Invalid parameter, key-value pair must contain exactly one key\", self.nodes[0].createrawtransaction, [], [{'a': 1, 'b': 2}])\n         assert_raises_rpc_error(-8, \"Invalid parameter, key-value pair not an object as expected\", self.nodes[0].createrawtransaction, [], [['key-value pair1'], ['2']])\n \n@@ -128,12 +126,19 @@ def run_test(self):\n             bytes_to_hex_str(tx.serialize()),\n             self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs=[{address: 99}, {address2: 99}]),\n         )\n+        # Two data outputs\n+        tx.deserialize(BytesIO(hex_str_to_bytes(self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs=multidict([('data', '99'), ('data', '99')])))))\n+        assert_equal(len(tx.vout), 2)\n+        assert_equal(\n+            bytes_to_hex_str(tx.serialize()),\n+            self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs=[{'data': '99'}, {'data': '99'}]),\n+        )\n         # Multiple mixed outputs\n-        tx.deserialize(BytesIO(hex_str_to_bytes(self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs=multidict([(address, 99), (address2, 99), ('data', '99')])))))\n+        tx.deserialize(BytesIO(hex_str_to_bytes(self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs=multidict([(address, 99), ('data', '99'), ('data', '99')])))))\n         assert_equal(len(tx.vout), 3)\n         assert_equal(\n             bytes_to_hex_str(tx.serialize()),\n-            self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs=[{address: 99}, {address2: 99}, {'data': '99'}]),\n+            self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs=[{address: 99}, {'data': '99'}, {'data': '99'}]),\n         )\n \n         for type in [\"bech32\", \"p2sh-segwit\", \"legacy\"]:"
      },
      {
        "sha": "b979dcce669976cc2af61ca52f1402a7250c38b8",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -1,4 +1,5 @@\n #!/usr/bin/env python3\n+# Copyright (c) 2018 The BitcoinV Core developers\n # Copyright (c) 2014-2018 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n@@ -29,10 +30,10 @@ def assert_fee_amount(fee, tx_size, fee_per_kB):\n     \"\"\"Assert the fee was in range\"\"\"\n     target_fee = round(tx_size * fee_per_kB / 1000, 8)\n     if fee < target_fee:\n-        raise AssertionError(\"Fee of %s BTC too low! (Should be %s BTC)\" % (str(fee), str(target_fee)))\n+        raise AssertionError(\"Fee of %s BTCV too low! (Should be %s BTCV)\" % (str(fee), str(target_fee)))\n     # allow the wallet's estimation to be at most 2 bytes off\n     if fee > (tx_size + 2) * fee_per_kB / 1000:\n-        raise AssertionError(\"Fee of %s BTC too high! (Should be %s BTC)\" % (str(fee), str(target_fee)))\n+        raise AssertionError(\"Fee of %s BTCV too high! (Should be %s BTCV)\" % (str(fee), str(target_fee)))\n \n def assert_equal(thing1, thing2, *args):\n     if thing1 != thing2 or any(thing1 != arg for arg in args):\n@@ -173,7 +174,7 @@ def assert_array_result(object_array, to_match, expected, should_not_find=False)\n ###################\n \n def check_json_precision():\n-    \"\"\"Make sure json library being used does not lose precision converting BTC values\"\"\"\n+    \"\"\"Make sure json library being used does not lose precision converting BTCV values\"\"\"\n     n = Decimal(\"20000000.00000003\")\n     satoshis = int(json.loads(json.dumps(float(n))) * 1.0e8)\n     if satoshis != 2000000000000003:"
      },
      {
        "sha": "3dd296d603fcaacb732fdc6fc0b59751425e2cb9",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "patch": "@@ -40,7 +40,7 @@ def run_test (self):\n \n         # RPC importmulti -----------------------------------------------\n \n-        # Bitcoin Address (implicit non-internal)\n+        # Bitcoin Address\n         self.log.info(\"Should import an address\")\n         address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n@@ -98,16 +98,15 @@ def run_test (self):\n         assert_equal('timestamp' in address_assert, False)\n \n \n-        # Address + Public key + !Internal(explicit)\n+        # Address + Public key + !Internal\n         self.log.info(\"Should import an address with public key\")\n         address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n             },\n             \"timestamp\": \"now\",\n-            \"pubkeys\": [ address['pubkey'] ],\n-            \"internal\": False\n+            \"pubkeys\": [ address['pubkey'] ]\n         }])\n         assert_equal(result[0]['success'], True)\n         address_assert = self.nodes[1].getaddressinfo(address['address'])"
      }
    ]
  },
  {
    "sha": "6eafe31bea7c2a071a0859aa3ded90379c21ee25",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZWFmZTMxYmVhN2MyYTA3MWEwODU5YWEzZGVkOTAzNzljMjFlZTI1",
    "commit": {
      "author": {
        "name": "NullFunctor",
        "email": "nullfunctor@bitcoinv.org",
        "date": "2018-12-30T16:57:55Z"
      },
      "committer": {
        "name": "NullFunctor",
        "email": "nullfunctor@bitcoinv.org",
        "date": "2018-12-30T16:57:55Z"
      },
      "message": "VBR feature",
      "tree": {
        "sha": "39eccf932d99fdb8d22bb08a291f5428cca58009",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/39eccf932d99fdb8d22bb08a291f5428cca58009"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6eafe31bea7c2a071a0859aa3ded90379c21ee25",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6eafe31bea7c2a071a0859aa3ded90379c21ee25",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6eafe31bea7c2a071a0859aa3ded90379c21ee25",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6eafe31bea7c2a071a0859aa3ded90379c21ee25/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2741b2b6f4688ee46caaa48b51c74a110320d50d"
      }
    ],
    "stats": {
      "total": 35475,
      "additions": 11120,
      "deletions": 24355
    },
    "files": [
      {
        "sha": "f5ade3f734f118c31511205d87e991501b303b5c",
        "filename": ".gitignore",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.gitignore?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -36,6 +36,8 @@ src/config/stamp-h1\n share/setup.nsi\n share/qt/Info.plist\n \n+db4*\n+\n src/univalue/gen\n \n src/qt/*.moc\n@@ -110,12 +112,10 @@ win32-build\n test/config.ini\n test/cache/*\n \n+\n !src/leveldb*/Makefile\n \n /doc/doxygen/\n \n libbitcoinconsensus.pc\n contrib/devtools/split-debug.sh\n-\n-# Output from running db4 installation\n-db4/"
      },
      {
        "sha": "fb4b53bacdce22025480ee0e9de6fd3a7640a0cc",
        "filename": ".vscode/launch.json",
        "status": "added",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/.vscode/launch.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/.vscode/launch.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.vscode/launch.json?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -0,0 +1,30 @@\n+{\n+    // Use IntelliSense to learn about possible attributes.\n+    // Hover to view descriptions of existing attributes.\n+    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\n+    \"version\": \"0.2.0\",\n+    \"configurations\": [\n+\n+        {\n+            \"name\": \"(gdb) Launch\",\n+            \"type\": \"cppdbg\",\n+            \"request\": \"launch\",\n+            \"program\": \"${workspaceFolder}/src/qt/bitcoin-qt\",\n+            \"args\": [],\n+            \"stopAtEntry\": false,\n+            \"cwd\": \"${workspaceFolder}\",\n+            \"environment\": [],\n+            \"externalConsole\": false,\n+            \"MIMode\": \"gdb\",\n+            \"setupCommands\": [\n+                {\n+                    \"description\": \"Enable pretty-printing for gdb\",\n+                    \"text\": \"-enable-pretty-printing\",\n+                    \"ignoreFailures\": true\n+                }\n+            ],\n+            \"MIMode\":\"lldb\",\n+            \"miDebuggerPath\": \"/Applications/Xcode.app/Contents/Developer/usr/bin/lldb-mi\",\n+        }\n+    ]\n+}\n\\ No newline at end of file"
      },
      {
        "sha": "d82636a30fba19e88286bc61d2954df3ca3584bd",
        "filename": ".vscode/settings.json",
        "status": "added",
        "additions": 67,
        "deletions": 0,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/.vscode/settings.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/.vscode/settings.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.vscode/settings.json?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -0,0 +1,67 @@\n+{\n+    \"files.associations\": {\n+        \"cctype\": \"cpp\",\n+        \"clocale\": \"cpp\",\n+        \"cmath\": \"cpp\",\n+        \"csignal\": \"cpp\",\n+        \"cstdarg\": \"cpp\",\n+        \"cstddef\": \"cpp\",\n+        \"cstdio\": \"cpp\",\n+        \"cstdlib\": \"cpp\",\n+        \"cstring\": \"cpp\",\n+        \"ctime\": \"cpp\",\n+        \"cwchar\": \"cpp\",\n+        \"cwctype\": \"cpp\",\n+        \"array\": \"cpp\",\n+        \"atomic\": \"cpp\",\n+        \"hash_map\": \"cpp\",\n+        \"hash_set\": \"cpp\",\n+        \"*.tcc\": \"cpp\",\n+        \"bitset\": \"cpp\",\n+        \"chrono\": \"cpp\",\n+        \"complex\": \"cpp\",\n+        \"condition_variable\": \"cpp\",\n+        \"cstdint\": \"cpp\",\n+        \"deque\": \"cpp\",\n+        \"list\": \"cpp\",\n+        \"unordered_map\": \"cpp\",\n+        \"unordered_set\": \"cpp\",\n+        \"vector\": \"cpp\",\n+        \"exception\": \"cpp\",\n+        \"fstream\": \"cpp\",\n+        \"functional\": \"cpp\",\n+        \"future\": \"cpp\",\n+        \"initializer_list\": \"cpp\",\n+        \"iomanip\": \"cpp\",\n+        \"iosfwd\": \"cpp\",\n+        \"iostream\": \"cpp\",\n+        \"istream\": \"cpp\",\n+        \"limits\": \"cpp\",\n+        \"memory\": \"cpp\",\n+        \"mutex\": \"cpp\",\n+        \"new\": \"cpp\",\n+        \"numeric\": \"cpp\",\n+        \"optional\": \"cpp\",\n+        \"ostream\": \"cpp\",\n+        \"ratio\": \"cpp\",\n+        \"sstream\": \"cpp\",\n+        \"stdexcept\": \"cpp\",\n+        \"streambuf\": \"cpp\",\n+        \"string_view\": \"cpp\",\n+        \"system_error\": \"cpp\",\n+        \"thread\": \"cpp\",\n+        \"cinttypes\": \"cpp\",\n+        \"type_traits\": \"cpp\",\n+        \"tuple\": \"cpp\",\n+        \"typeindex\": \"cpp\",\n+        \"typeinfo\": \"cpp\",\n+        \"utility\": \"cpp\",\n+        \"strstream\": \"cpp\",\n+        \"__config\": \"cpp\",\n+        \"__nullptr\": \"cpp\",\n+        \"algorithm\": \"cpp\",\n+        \"cfenv\": \"cpp\",\n+        \"hashtable\": \"cpp\",\n+        \"string\": \"cpp\"\n+    }\n+}\n\\ No newline at end of file"
      },
      {
        "sha": "3d5dc3221bb1303afb08d50734c2a0fcd511d8ad",
        "filename": "CONTRIBUTING.md",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/CONTRIBUTING.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/CONTRIBUTING.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/CONTRIBUTING.md?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -67,8 +67,6 @@ If a particular commit references another issue, please add the reference. For\n example: `refs #1234` or `fixes #4321`. Using the `fixes` or `closes` keywords\n will cause the corresponding issue to be closed when the pull request is merged.\n \n-Commit messages should never contain any `@` mentions.\n-\n Please refer to the [Git manual](https://git-scm.com/doc) for more information\n about Git.\n \n@@ -137,10 +135,6 @@ before it will be merged. The basic squashing workflow is shown below.\n     # Save and quit.\n     git push -f # (force push to GitHub)\n \n-Please update the resulting commit message if needed, it should read as a\n-coherent message. In most cases this means that you should not just list the\n-interim commits.\n-\n If you have problems with squashing (or other workflows with `git`), you can\n alternatively enable \"Allow edits from maintainers\" in the right GitHub\n sidebar and ask for help in the pull request."
      },
      {
        "sha": "8972c47f4fe3e57eb7ce2182892d45ad5af5919f",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -173,7 +173,7 @@ $(BITCOIN_TX_BIN): FORCE\n \t$(MAKE) -C src $(@F)\n \n if USE_LCOV\n-LCOV_FILTER_PATTERN=-p \"/usr/include/\" -p \"/usr/lib/\" -p \"src/leveldb/\" -p \"src/bench/\" -p \"src/univalue\" -p \"src/crypto/ctaes\" -p \"src/secp256k1\"\n+LCOV_FILTER_PATTERN=-p \"/usr/include/\" -p \"src/leveldb/\" -p \"src/bench/\" -p \"src/univalue\" -p \"src/crypto/ctaes\" -p \"src/secp256k1\"\n \n baseline.info:\n \t$(LCOV) -c -i -d $(abs_builddir)/src -o $@\n@@ -299,5 +299,5 @@ clean-docs:\n \n clean-local: clean-docs\n \trm -rf coverage_percent.txt test_bitcoin.coverage/ total.coverage/ test/tmp/ cache/ $(OSX_APP)\n-\trm -rf test/functional/__pycache__ test/functional/test_framework/__pycache__ test/cache share/rpcauth/__pycache__\n+\trm -rf test/functional/__pycache__ test/functional/test_framework/__pycache__ test/cache\n "
      },
      {
        "sha": "55b85da977abb40e677180b272a84ecd2ca41541",
        "filename": "README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README.md?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -31,8 +31,7 @@ The `master` branch is regularly built and tested, but is not guaranteed to be\n completely stable. [Tags](https://github.com/bitcoin/bitcoin/tags) are created\n regularly to indicate new official, stable release versions of Bitcoin Core.\n \n-The contribution workflow is described in [CONTRIBUTING.md](CONTRIBUTING.md)\n-and useful hints for developers can be found in [doc/developer-notes.md](doc/developer-notes.md).\n+The contribution workflow is described in [CONTRIBUTING.md](CONTRIBUTING.md).\n \n Testing\n -------"
      },
      {
        "sha": "05df8621d2056f772c6d411e79ee34d12d06cd07",
        "filename": "build-aux/m4/bitcoin_qt.m4",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/build-aux/m4/bitcoin_qt.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/build-aux/m4/bitcoin_qt.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_qt.m4?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -276,7 +276,7 @@ AC_DEFUN([_BITCOIN_QT_CHECK_QT5],[\n       #endif\n     ]],\n     [[\n-      #if QT_VERSION < 0x050200 || QT_VERSION_MAJOR < 5\n+      #if QT_VERSION < 0x050000 || QT_VERSION_MAJOR < 5\n       choke\n       #endif\n     ]])],"
      },
      {
        "sha": "d5aa22c05e9cbaa41e409e590c01ab3c67802685",
        "filename": "build_msvc/.gitignore",
        "status": "removed",
        "additions": 0,
        "deletions": 11,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/build_msvc/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/build_msvc/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/.gitignore?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "patch": "@@ -1,11 +0,0 @@\n-# Build directories\n-Debug/*\n-Release/*\n-.vs\n-packages/*\n-*/Obj\n-*/Debug\n-*/Release\n-*/x64\n-*.vcxproj.user\n-*.vcxproj"
      },
      {
        "sha": "63c5babf350fc6c2121d69753772b3250b197cf0",
        "filename": "build_msvc/README.md",
        "status": "removed",
        "additions": 0,
        "deletions": 49,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/build_msvc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/build_msvc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/README.md?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "patch": "@@ -1,49 +0,0 @@\n-Building Bitcoin Core with Visual Studio\n-========================================\n-\n-Introduction\n----------------------\n-Solution and project files to build the Bitcoin Core applications (except Qt dependent ones) with Visual Studio 2017 can be found in the build_msvc directory.\n-\n-Building with Visual Studio is an alternative to the Linux based [cross-compiler build](https://github.com/bitcoin/bitcoin/blob/master/doc/build-windows.md).\n-\n-Dependencies\n----------------------\n-A number of [open source libraries](https://github.com/bitcoin/bitcoin/blob/master/doc/dependencies.md) are required in order to be able to build Bitcoin.\n-\n-Options for installing the dependencies in a Visual Studio compatible manner are:\n-\n-- Use Microsoft's [vcpkg](https://docs.microsoft.com/en-us/cpp/vcpkg) to download the source packages and build locally. This is the recommended approach.\n-- Download the source code, build each dependency, add the required include paths, link libraries and binary tools to the Visual Studio project files.\n-- Use [nuget](https://www.nuget.org/) packages with the understanding that any binary files have been compiled by an untrusted third party.\n-\n-The external dependencies required for the Visual Studio build are (see the [dependencies doc](https://github.com/bitcoin/bitcoin/blob/master/doc/dependencies.md) for versions):\n-\n-- Berkeley DB,\n-- OpenSSL,\n-- Boost,\n-- libevent,\n-- ZeroMQ\n-\n-Additional dependencies required from the [bitcoin-core](https://github.com/bitcoin-core) github repository are:\n-- SECP256K1,\n-- LevelDB\n-\n-Building\n----------------------\n-The instructions below use `vcpkg` to install the dependencies.\n-\n-- Clone `vcpkg` from the [github repository](https://github.com/Microsoft/vcpkg) and install as per the instructions in the main README.md.\n-- Install the required packages (replace x64 with x86 as required):\n-\n-```\n-    PS >.\\vcpkg install --triplet x64-windows-static boost-filesystem boost-signals2 boost-test libevent openssl zeromq berkeleydb secp256k1 leveldb\n-```\n-\n-- Use Python to generate *.vcxproj from Makefile\n-\n-```\n-    PS >python msvc-autogen.py\n-```\n-\n-- Build in Visual Studio."
      },
      {
        "sha": "b987a337c0c890b08238aa618f6db61156b96a03",
        "filename": "build_msvc/bench_bitcoin/bench_bitcoin.vcxproj",
        "status": "removed",
        "additions": 0,
        "deletions": 217,
        "changes": 217,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/build_msvc/bench_bitcoin/bench_bitcoin.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/build_msvc/bench_bitcoin/bench_bitcoin.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bench_bitcoin/bench_bitcoin.vcxproj?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "patch": "@@ -1,217 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"utf-8\"?>\n-<Project DefaultTargets=\"Build\" ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n-  <Import Label=\"configInitTarget\" Project=\"..\\common.init.vcxproj\" />\n-  <ItemGroup Label=\"ProjectConfigurations\">\n-    <ProjectConfiguration Include=\"Debug|Win32\">\n-      <Configuration>Debug</Configuration>\n-      <Platform>Win32</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Release|Win32\">\n-      <Configuration>Release</Configuration>\n-      <Platform>Win32</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Debug|x64\">\n-      <Configuration>Debug</Configuration>\n-      <Platform>x64</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Release|x64\">\n-      <Configuration>Release</Configuration>\n-      <Platform>x64</Platform>\n-    </ProjectConfiguration>\n-  </ItemGroup>\n-  <ItemGroup>\n-    <ClCompile Include=\"..\\..\\src\\bench\\base58.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\bench\\bech32.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\bench\\bench.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\bench\\bench_bitcoin.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\bench\\ccoins_caching.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\bench\\checkblock.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\bench\\checkqueue.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\bench\\coin_selection.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\bench\\crypto_hash.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\bench\\examples.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\bench\\lockedpool.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\bench\\mempool_eviction.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\bench\\merkle_root.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\bench\\rollingbloom.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\bench\\verify_script.cpp\" />\n-  </ItemGroup>\n-  <ItemGroup>\n-    <ProjectReference Include=\"..\\libbitcoinconsensus\\libbitcoinconsensus.vcxproj\">\n-      <Project>{2b384fa8-9ee1-4544-93cb-0d733c25e8ce}</Project>\n-    </ProjectReference>\n-    <ProjectReference Include=\"..\\libbitcoin_common\\libbitcoin_common.vcxproj\">\n-      <Project>{7c87e378-df58-482e-aa2f-1bc129bc19ce}</Project>\n-    </ProjectReference>\n-    <ProjectReference Include=\"..\\libbitcoin_crypto\\libbitcoin_crypto.vcxproj\">\n-      <Project>{6190199c-6cf4-4dad-bfbd-93fa72a760c1}</Project>\n-    </ProjectReference>\n-    <ProjectReference Include=\"..\\libbitcoin_server\\libbitcoin_server.vcxproj\">\n-      <Project>{460fee33-1fe1-483f-b3bf-931ff8e969a5}</Project>\n-    </ProjectReference>\n-    <ProjectReference Include=\"..\\libbitcoin_util\\libbitcoin_util.vcxproj\">\n-      <Project>{b53a5535-ee9d-4c6f-9a26-f79ee3bc3754}</Project>\n-    </ProjectReference>\n-    <ProjectReference Include=\"..\\libbitcoin_wallet\\libbitcoin_wallet.vcxproj\">\n-      <Project>{93b86837-b543-48a5-a89b-7c87abb77df2}</Project>\n-    </ProjectReference>\n-    <ProjectReference Include=\"..\\libbitcoin_zmq\\libbitcoin_zmq.vcxproj\">\n-      <Project>{792d487f-f14c-49fc-a9de-3fc150f31c3f}</Project>\n-    </ProjectReference>\n-    <ProjectReference Include=\"..\\libunivalue\\libunivalue.vcxproj\">\n-      <Project>{5724ba7d-a09a-4ba8-800b-c4c1561b3d69}</Project>\n-    </ProjectReference>\n-  </ItemGroup>\n-  <PropertyGroup Label=\"Globals\">\n-    <VCProjectVersion>15.0</VCProjectVersion>\n-    <ProjectGuid>{1125654E-E1B2-4431-8B5C-62EA9A2FEECB}</ProjectGuid>\n-    <Keyword>Win32Proj</Keyword>\n-    <RootNamespace>bench_bitcoin</RootNamespace>\n-    <VcpkgTriplet Condition=\"'$(Platform)'=='Win32'\">x86-windows-static</VcpkgTriplet>\n-    <VcpkgTriplet Condition=\"'$(Platform)'=='x64'\">x64-windows-static</VcpkgTriplet>\n-  </PropertyGroup>\n-  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.Default.props\" />\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\" Label=\"Configuration\">\n-    <ConfigurationType>Application</ConfigurationType>\n-    <UseDebugLibraries>true</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\" Label=\"Configuration\">\n-    <ConfigurationType>Application</ConfigurationType>\n-    <UseDebugLibraries>false</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <WholeProgramOptimization>true</WholeProgramOptimization>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\" Label=\"Configuration\">\n-    <ConfigurationType>Application</ConfigurationType>\n-    <UseDebugLibraries>true</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\" Label=\"Configuration\">\n-    <ConfigurationType>Application</ConfigurationType>\n-    <UseDebugLibraries>false</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <WholeProgramOptimization>true</WholeProgramOptimization>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n-  <ImportGroup Label=\"ExtensionSettings\">\n-  </ImportGroup>\n-  <ImportGroup Label=\"Shared\">\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <PropertyGroup Label=\"UserMacros\" />\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <LinkIncremental>false</LinkIncremental>\n-    <Linkage-secp256k1>static</Linkage-secp256k1>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <LinkIncremental>true</LinkIncremental>\n-    <Linkage-secp256k1>static</Linkage-secp256k1>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <LinkIncremental>true</LinkIncremental>\n-    <Linkage-secp256k1>static</Linkage-secp256k1>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <LinkIncremental>false</LinkIncremental>\n-    <Linkage-secp256k1>static</Linkage-secp256k1>\n-  </PropertyGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>MaxSpeed</Optimization>\n-      <FunctionLevelLinking>true</FunctionLevelLinking>\n-      <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>NOMINMAX;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n-      <OptimizeReferences>true</OptimizeReferences>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-      <AdditionalDependencies>crypt32.lib;Iphlpapi.lib;ws2_32.lib;Shlwapi.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;odbccp32.lib;%(AdditionalDependencies)</AdditionalDependencies>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>Disabled</Optimization>\n-      <PreprocessorDefinitions>NOMINMAX;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-      <AdditionalDependencies>crypt32.lib;Iphlpapi.lib;ws2_32.lib;Shlwapi.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;odbccp32.lib;%(AdditionalDependencies)</AdditionalDependencies>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>Disabled</Optimization>\n-      <PreprocessorDefinitions>NOMINMAX;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-      <AdditionalDependencies>crypt32.lib;Iphlpapi.lib;ws2_32.lib;Shlwapi.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;odbccp32.lib;%(AdditionalDependencies)</AdditionalDependencies>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>MaxSpeed</Optimization>\n-      <FunctionLevelLinking>true</FunctionLevelLinking>\n-      <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>NOMINMAX;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n-      <OptimizeReferences>true</OptimizeReferences>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-      <AdditionalDependencies>crypt32.lib;Iphlpapi.lib;ws2_32.lib;Shlwapi.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;odbccp32.lib;%(AdditionalDependencies)</AdditionalDependencies>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <Target Name=\"RawBenchHeaderGen\" BeforeTargets=\"PrepareForBuild\">\n-    <PropertyGroup>\n-      <ErrorText>There was an error executing the raw bench header generation task.</ErrorText>\n-    </PropertyGroup>\n-    <ItemGroup>\n-      <RawBenchFile Include=\"..\\..\\src\\bench\\data\\*.raw\" />\n-    </ItemGroup>\n-    <HeaderFromHexdump RawFilePath=\"%(RawBenchFile.FullPath)\" HeaderFilePath=\"%(RawBenchFile.FullPath).h\" SourceHeader=\"static unsigned const char %(RawBenchFile.Filename)[] = {\" SourceFooter=\"};\" />\n-  </Target>\n-  <Import Label=\"configTarget\" Project=\"..\\common.vcxproj\" />\n-  <Import Label=\"hexdumpTarget\" Project=\"..\\msbuild\\tasks\\hexdump.targets\" />\n-</Project>"
      },
      {
        "sha": "32f0354fad5eb0fddc4791eef1c52c79238be2b8",
        "filename": "build_msvc/bitcoin-cli/bitcoin-cli.vcxproj",
        "status": "removed",
        "additions": 0,
        "deletions": 180,
        "changes": 180,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/build_msvc/bitcoin-cli/bitcoin-cli.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/build_msvc/bitcoin-cli/bitcoin-cli.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin-cli/bitcoin-cli.vcxproj?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "patch": "@@ -1,180 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"utf-8\"?>\n-<Project DefaultTargets=\"Build\" ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n-  <Import Label=\"configInitTarget\" Project=\"..\\common.init.vcxproj\" />\n-  <ItemGroup Label=\"ProjectConfigurations\">\n-    <ProjectConfiguration Include=\"Debug|Win32\">\n-      <Configuration>Debug</Configuration>\n-      <Platform>Win32</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Release|Win32\">\n-      <Configuration>Release</Configuration>\n-      <Platform>Win32</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Debug|x64\">\n-      <Configuration>Debug</Configuration>\n-      <Platform>x64</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Release|x64\">\n-      <Configuration>Release</Configuration>\n-      <Platform>x64</Platform>\n-    </ProjectConfiguration>\n-  </ItemGroup>\n-  <ItemGroup>\n-    <ClCompile Include=\"..\\..\\src\\bitcoin-cli.cpp\" />\n-  </ItemGroup>\n-  <ItemGroup>\n-    <None Include=\"packages.config\" />\n-  </ItemGroup>\n-  <ItemGroup>\n-    <ProjectReference Include=\"..\\libbitcoin_cli\\libbitcoin_cli.vcxproj\">\n-      <Project>{0667528c-d734-4009-adf9-c0d6c4a5a5a6}</Project>\n-    </ProjectReference>\n-    <ProjectReference Include=\"..\\libbitcoin_crypto\\libbitcoin_crypto.vcxproj\">\n-      <Project>{6190199c-6cf4-4dad-bfbd-93fa72a760c1}</Project>\n-    </ProjectReference>\n-    <ProjectReference Include=\"..\\libbitcoin_util\\libbitcoin_util.vcxproj\">\n-      <Project>{b53a5535-ee9d-4c6f-9a26-f79ee3bc3754}</Project>\n-    </ProjectReference>\n-    <ProjectReference Include=\"..\\libunivalue\\libunivalue.vcxproj\">\n-      <Project>{5724ba7d-a09a-4ba8-800b-c4c1561b3d69}</Project>\n-    </ProjectReference>\n-  </ItemGroup>\n-  <PropertyGroup Label=\"Globals\">\n-    <VCProjectVersion>15.0</VCProjectVersion>\n-    <ProjectGuid>{0B2D7431-F876-4A58-87BF-F748338CD3BF}</ProjectGuid>\n-    <Keyword>Win32Proj</Keyword>\n-    <RootNamespace>bitcoincli</RootNamespace>\n-    <VcpkgTriplet Condition=\"'$(Platform)'=='Win32'\">x86-windows-static</VcpkgTriplet>\n-    <VcpkgTriplet Condition=\"'$(Platform)'=='x64'\">x64-windows-static</VcpkgTriplet>\n-  </PropertyGroup>\n-  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.Default.props\" />\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\" Label=\"Configuration\">\n-    <ConfigurationType>Application</ConfigurationType>\n-    <UseDebugLibraries>true</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\" Label=\"Configuration\">\n-    <ConfigurationType>Application</ConfigurationType>\n-    <UseDebugLibraries>false</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <WholeProgramOptimization>true</WholeProgramOptimization>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\" Label=\"Configuration\">\n-    <ConfigurationType>Application</ConfigurationType>\n-    <UseDebugLibraries>true</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\" Label=\"Configuration\">\n-    <ConfigurationType>Application</ConfigurationType>\n-    <UseDebugLibraries>false</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <WholeProgramOptimization>true</WholeProgramOptimization>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n-  <ImportGroup Label=\"ExtensionSettings\">\n-  </ImportGroup>\n-  <ImportGroup Label=\"Shared\">\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <PropertyGroup Label=\"UserMacros\" />\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <LinkIncremental>false</LinkIncremental>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <LinkIncremental>true</LinkIncremental>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <LinkIncremental>true</LinkIncremental>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <LinkIncremental>false</LinkIncremental>\n-  </PropertyGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>MaxSpeed</Optimization>\n-      <FunctionLevelLinking>true</FunctionLevelLinking>\n-      <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n-      <OptimizeReferences>true</OptimizeReferences>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-      <AdditionalDependencies>crypt32.lib;Iphlpapi.lib;ws2_32.lib;Shlwapi.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;odbccp32.lib;%(AdditionalDependencies)</AdditionalDependencies>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>Disabled</Optimization>\n-      <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-      <AdditionalDependencies>crypt32.lib;Iphlpapi.lib;ws2_32.lib;Shlwapi.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;odbccp32.lib;%(AdditionalDependencies)</AdditionalDependencies>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>Disabled</Optimization>\n-      <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-      <AdditionalDependencies>crypt32.lib;Iphlpapi.lib;ws2_32.lib;Shlwapi.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;odbccp32.lib;%(AdditionalDependencies)</AdditionalDependencies>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>MaxSpeed</Optimization>\n-      <FunctionLevelLinking>true</FunctionLevelLinking>\n-      <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n-      <OptimizeReferences>true</OptimizeReferences>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-      <AdditionalDependencies>crypt32.lib;Iphlpapi.lib;ws2_32.lib;Shlwapi.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;odbccp32.lib;%(AdditionalDependencies)</AdditionalDependencies>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <Import Label=\"configTarget\" Project=\"..\\common.vcxproj\" />\n-</Project>"
      },
      {
        "sha": "a9fae6b739975cc3dd35551ac0689c118ca92e43",
        "filename": "build_msvc/bitcoin-tx/bitcoin-tx.vcxproj",
        "status": "removed",
        "additions": 0,
        "deletions": 180,
        "changes": 180,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/build_msvc/bitcoin-tx/bitcoin-tx.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/build_msvc/bitcoin-tx/bitcoin-tx.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin-tx/bitcoin-tx.vcxproj?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "patch": "@@ -1,180 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"utf-8\"?>\n-<Project DefaultTargets=\"Build\" ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n-  <Import Label=\"configInitTarget\" Project=\"..\\common.init.vcxproj\" />\n-  <ItemGroup Label=\"ProjectConfigurations\">\n-    <ProjectConfiguration Include=\"Debug|Win32\">\n-      <Configuration>Debug</Configuration>\n-      <Platform>Win32</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Release|Win32\">\n-      <Configuration>Release</Configuration>\n-      <Platform>Win32</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Debug|x64\">\n-      <Configuration>Debug</Configuration>\n-      <Platform>x64</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Release|x64\">\n-      <Configuration>Release</Configuration>\n-      <Platform>x64</Platform>\n-    </ProjectConfiguration>\n-  </ItemGroup>\n-  <ItemGroup>\n-    <ClCompile Include=\"..\\..\\src\\bitcoin-tx.cpp\" />\n-  </ItemGroup>\n-  <ItemGroup>\n-    <ProjectReference Include=\"..\\libbitcoinconsensus\\libbitcoinconsensus.vcxproj\">\n-      <Project>{2b384fa8-9ee1-4544-93cb-0d733c25e8ce}</Project>\n-    </ProjectReference>\n-    <ProjectReference Include=\"..\\libbitcoin_common\\libbitcoin_common.vcxproj\">\n-      <Project>{7c87e378-df58-482e-aa2f-1bc129bc19ce}</Project>\n-    </ProjectReference>\n-    <ProjectReference Include=\"..\\libbitcoin_crypto\\libbitcoin_crypto.vcxproj\">\n-      <Project>{6190199c-6cf4-4dad-bfbd-93fa72a760c1}</Project>\n-    </ProjectReference>\n-    <ProjectReference Include=\"..\\libbitcoin_util\\libbitcoin_util.vcxproj\">\n-      <Project>{b53a5535-ee9d-4c6f-9a26-f79ee3bc3754}</Project>\n-    </ProjectReference>\n-    <ProjectReference Include=\"..\\libunivalue\\libunivalue.vcxproj\">\n-      <Project>{5724ba7d-a09a-4ba8-800b-c4c1561b3d69}</Project>\n-    </ProjectReference>\n-  </ItemGroup>\n-  <PropertyGroup Label=\"Globals\">\n-    <VCProjectVersion>15.0</VCProjectVersion>\n-    <ProjectGuid>{D3022AF6-AD33-4CE3-B358-87CB6A1B29CF}</ProjectGuid>\n-    <Keyword>Win32Proj</Keyword>\n-    <RootNamespace>bitcointx</RootNamespace>\n-    <VcpkgTriplet Condition=\"'$(Platform)'=='Win32'\">x86-windows-static</VcpkgTriplet>\n-    <VcpkgTriplet Condition=\"'$(Platform)'=='x64'\">x64-windows-static</VcpkgTriplet>\n-  </PropertyGroup>\n-  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.Default.props\" />\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\" Label=\"Configuration\">\n-    <ConfigurationType>Application</ConfigurationType>\n-    <UseDebugLibraries>true</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\" Label=\"Configuration\">\n-    <ConfigurationType>Application</ConfigurationType>\n-    <UseDebugLibraries>false</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <WholeProgramOptimization>true</WholeProgramOptimization>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\" Label=\"Configuration\">\n-    <ConfigurationType>Application</ConfigurationType>\n-    <UseDebugLibraries>true</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\" Label=\"Configuration\">\n-    <ConfigurationType>Application</ConfigurationType>\n-    <UseDebugLibraries>false</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <WholeProgramOptimization>true</WholeProgramOptimization>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n-  <ImportGroup Label=\"ExtensionSettings\">\n-  </ImportGroup>\n-  <ImportGroup Label=\"Shared\">\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <PropertyGroup Label=\"UserMacros\" />\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <LinkIncremental>false</LinkIncremental>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <LinkIncremental>true</LinkIncremental>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <LinkIncremental>true</LinkIncremental>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <LinkIncremental>false</LinkIncremental>\n-  </PropertyGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>MaxSpeed</Optimization>\n-      <FunctionLevelLinking>true</FunctionLevelLinking>\n-      <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n-      <OptimizeReferences>true</OptimizeReferences>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-      <AdditionalDependencies>crypt32.lib;Iphlpapi.lib;ws2_32.lib;Shlwapi.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;odbccp32.lib;%(AdditionalDependencies)</AdditionalDependencies>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>Disabled</Optimization>\n-      <PreprocessorDefinitions>HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-      <AdditionalDependencies>crypt32.lib;Iphlpapi.lib;ws2_32.lib;Shlwapi.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;odbccp32.lib;%(AdditionalDependencies)</AdditionalDependencies>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>Disabled</Optimization>\n-      <PreprocessorDefinitions>HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-      <AdditionalDependencies>crypt32.lib;Iphlpapi.lib;ws2_32.lib;Shlwapi.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;odbccp32.lib;%(AdditionalDependencies)</AdditionalDependencies>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>MaxSpeed</Optimization>\n-      <FunctionLevelLinking>true</FunctionLevelLinking>\n-      <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n-      <OptimizeReferences>true</OptimizeReferences>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-      <AdditionalDependencies>crypt32.lib;Iphlpapi.lib;ws2_32.lib;Shlwapi.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;odbccp32.lib;%(AdditionalDependencies)</AdditionalDependencies>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <Import Label=\"configTarget\" Project=\"..\\common.vcxproj\" />\n-</Project>"
      },
      {
        "sha": "32068d81f6b85140fc838534b9e26782bbaaa6a3",
        "filename": "build_msvc/bitcoin.sln",
        "status": "removed",
        "additions": 0,
        "deletions": 172,
        "changes": 172,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/build_msvc/bitcoin.sln",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/build_msvc/bitcoin.sln",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin.sln?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "patch": "@@ -1,172 +0,0 @@\n-\ufeffMicrosoft Visual Studio Solution File, Format Version 12.00\n-# Visual Studio 15\n-VisualStudioVersion = 15.0.27130.2027\n-MinimumVisualStudioVersion = 10.0.40219.1\n-Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"libbitcoin_consensus\", \"libbitcoinconsensus\\libbitcoinconsensus.vcxproj\", \"{2B384FA8-9EE1-4544-93CB-0D733C25E8CE}\"\n-EndProject\n-Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"test_libbitcoinconsensus\", \"testconsensus\\testconsensus.vcxproj\", \"{E78473E9-B850-456C-9120-276301E04C06}\"\n-EndProject\n-Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"bitcoind\", \"bitcoind\\bitcoind.vcxproj\", \"{D4513DDF-6013-44DC-ADCC-12EAF6D1F038}\"\n-EndProject\n-Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"libbitcoin_util\", \"libbitcoin_util\\libbitcoin_util.vcxproj\", \"{B53A5535-EE9D-4C6F-9A26-F79EE3BC3754}\"\n-EndProject\n-Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"libbitcoin_common\", \"libbitcoin_common\\libbitcoin_common.vcxproj\", \"{7C87E378-DF58-482E-AA2F-1BC129BC19CE}\"\n-EndProject\n-Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"libbitcoin_crypto\", \"libbitcoin_crypto\\libbitcoin_crypto.vcxproj\", \"{6190199C-6CF4-4DAD-BFBD-93FA72A760C1}\"\n-EndProject\n-Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"libbitcoin_server\", \"libbitcoin_server\\libbitcoin_server.vcxproj\", \"{460FEE33-1FE1-483F-B3BF-931FF8E969A5}\"\n-EndProject\n-Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"libunivalue\", \"libunivalue\\libunivalue.vcxproj\", \"{5724BA7D-A09A-4BA8-800B-C4C1561B3D69}\"\n-EndProject\n-Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"libbitcoin_wallet\", \"libbitcoin_wallet\\libbitcoin_wallet.vcxproj\", \"{93B86837-B543-48A5-A89B-7C87ABB77DF2}\"\n-EndProject\n-Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"libbitcoin_zmq\", \"libbitcoin_zmq\\libbitcoin_zmq.vcxproj\", \"{792D487F-F14C-49FC-A9DE-3FC150F31C3F}\"\n-EndProject\n-Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"test_bitcoin\", \"test_bitcoin\\test_bitcoin.vcxproj\", \"{A56B73DB-D46D-4882-8374-1FE3FFA08F07}\"\n-EndProject\n-Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"libbitcoin_cli\", \"libbitcoin_cli\\libbitcoin_cli.vcxproj\", \"{0667528C-D734-4009-ADF9-C0D6C4A5A5A6}\"\n-EndProject\n-Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"bitcoin-cli\", \"bitcoin-cli\\bitcoin-cli.vcxproj\", \"{0B2D7431-F876-4A58-87BF-F748338CD3BF}\"\n-EndProject\n-Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"bench_bitcoin\", \"bench_bitcoin\\bench_bitcoin.vcxproj\", \"{1125654E-E1B2-4431-8B5C-62EA9A2FEECB}\"\n-EndProject\n-Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"bitcoin-tx\", \"bitcoin-tx\\bitcoin-tx.vcxproj\", \"{D3022AF6-AD33-4CE3-B358-87CB6A1B29CF}\"\n-EndProject\n-Global\n-    GlobalSection(SolutionConfigurationPlatforms) = preSolution\n-        Debug|x64 = Debug|x64\n-        Debug|x86 = Debug|x86\n-        Release|x64 = Release|x64\n-        Release|x86 = Release|x86\n-    EndGlobalSection\n-    GlobalSection(ProjectConfigurationPlatforms) = postSolution\n-        {2B384FA8-9EE1-4544-93CB-0D733C25E8CE}.Debug|x64.ActiveCfg = Debug|x64\n-        {2B384FA8-9EE1-4544-93CB-0D733C25E8CE}.Debug|x64.Build.0 = Debug|x64\n-        {2B384FA8-9EE1-4544-93CB-0D733C25E8CE}.Debug|x86.ActiveCfg = Debug|Win32\n-        {2B384FA8-9EE1-4544-93CB-0D733C25E8CE}.Debug|x86.Build.0 = Debug|Win32\n-        {2B384FA8-9EE1-4544-93CB-0D733C25E8CE}.Release|x64.ActiveCfg = Release|x64\n-        {2B384FA8-9EE1-4544-93CB-0D733C25E8CE}.Release|x64.Build.0 = Release|x64\n-        {2B384FA8-9EE1-4544-93CB-0D733C25E8CE}.Release|x86.ActiveCfg = Release|Win32\n-        {2B384FA8-9EE1-4544-93CB-0D733C25E8CE}.Release|x86.Build.0 = Release|Win32\n-        {E78473E9-B850-456C-9120-276301E04C06}.Debug|x64.ActiveCfg = Debug|x64\n-        {E78473E9-B850-456C-9120-276301E04C06}.Debug|x64.Build.0 = Debug|x64\n-        {E78473E9-B850-456C-9120-276301E04C06}.Debug|x86.ActiveCfg = Debug|Win32\n-        {E78473E9-B850-456C-9120-276301E04C06}.Debug|x86.Build.0 = Debug|Win32\n-        {E78473E9-B850-456C-9120-276301E04C06}.Release|x64.ActiveCfg = Release|x64\n-        {E78473E9-B850-456C-9120-276301E04C06}.Release|x64.Build.0 = Release|x64\n-        {E78473E9-B850-456C-9120-276301E04C06}.Release|x86.ActiveCfg = Release|Win32\n-        {E78473E9-B850-456C-9120-276301E04C06}.Release|x86.Build.0 = Release|Win32\n-        {D4513DDF-6013-44DC-ADCC-12EAF6D1F038}.Debug|x64.ActiveCfg = Debug|x64\n-        {D4513DDF-6013-44DC-ADCC-12EAF6D1F038}.Debug|x64.Build.0 = Debug|x64\n-        {D4513DDF-6013-44DC-ADCC-12EAF6D1F038}.Debug|x86.ActiveCfg = Debug|Win32\n-        {D4513DDF-6013-44DC-ADCC-12EAF6D1F038}.Debug|x86.Build.0 = Debug|Win32\n-        {D4513DDF-6013-44DC-ADCC-12EAF6D1F038}.Release|x64.ActiveCfg = Release|x64\n-        {D4513DDF-6013-44DC-ADCC-12EAF6D1F038}.Release|x64.Build.0 = Release|x64\n-        {D4513DDF-6013-44DC-ADCC-12EAF6D1F038}.Release|x86.ActiveCfg = Release|Win32\n-        {D4513DDF-6013-44DC-ADCC-12EAF6D1F038}.Release|x86.Build.0 = Release|Win32\n-        {B53A5535-EE9D-4C6F-9A26-F79EE3BC3754}.Debug|x64.ActiveCfg = Debug|x64\n-        {B53A5535-EE9D-4C6F-9A26-F79EE3BC3754}.Debug|x64.Build.0 = Debug|x64\n-        {B53A5535-EE9D-4C6F-9A26-F79EE3BC3754}.Debug|x86.ActiveCfg = Debug|Win32\n-        {B53A5535-EE9D-4C6F-9A26-F79EE3BC3754}.Debug|x86.Build.0 = Debug|Win32\n-        {B53A5535-EE9D-4C6F-9A26-F79EE3BC3754}.Release|x64.ActiveCfg = Release|x64\n-        {B53A5535-EE9D-4C6F-9A26-F79EE3BC3754}.Release|x64.Build.0 = Release|x64\n-        {B53A5535-EE9D-4C6F-9A26-F79EE3BC3754}.Release|x86.ActiveCfg = Release|Win32\n-        {B53A5535-EE9D-4C6F-9A26-F79EE3BC3754}.Release|x86.Build.0 = Release|Win32\n-        {7C87E378-DF58-482E-AA2F-1BC129BC19CE}.Debug|x64.ActiveCfg = Debug|x64\n-        {7C87E378-DF58-482E-AA2F-1BC129BC19CE}.Debug|x64.Build.0 = Debug|x64\n-        {7C87E378-DF58-482E-AA2F-1BC129BC19CE}.Debug|x86.ActiveCfg = Debug|Win32\n-        {7C87E378-DF58-482E-AA2F-1BC129BC19CE}.Debug|x86.Build.0 = Debug|Win32\n-        {7C87E378-DF58-482E-AA2F-1BC129BC19CE}.Release|x64.ActiveCfg = Release|x64\n-        {7C87E378-DF58-482E-AA2F-1BC129BC19CE}.Release|x64.Build.0 = Release|x64\n-        {7C87E378-DF58-482E-AA2F-1BC129BC19CE}.Release|x86.ActiveCfg = Release|Win32\n-        {7C87E378-DF58-482E-AA2F-1BC129BC19CE}.Release|x86.Build.0 = Release|Win32\n-        {6190199C-6CF4-4DAD-BFBD-93FA72A760C1}.Debug|x64.ActiveCfg = Debug|x64\n-        {6190199C-6CF4-4DAD-BFBD-93FA72A760C1}.Debug|x64.Build.0 = Debug|x64\n-        {6190199C-6CF4-4DAD-BFBD-93FA72A760C1}.Debug|x86.ActiveCfg = Debug|Win32\n-        {6190199C-6CF4-4DAD-BFBD-93FA72A760C1}.Debug|x86.Build.0 = Debug|Win32\n-        {6190199C-6CF4-4DAD-BFBD-93FA72A760C1}.Release|x64.ActiveCfg = Release|x64\n-        {6190199C-6CF4-4DAD-BFBD-93FA72A760C1}.Release|x64.Build.0 = Release|x64\n-        {6190199C-6CF4-4DAD-BFBD-93FA72A760C1}.Release|x86.ActiveCfg = Release|Win32\n-        {6190199C-6CF4-4DAD-BFBD-93FA72A760C1}.Release|x86.Build.0 = Release|Win32\n-        {460FEE33-1FE1-483F-B3BF-931FF8E969A5}.Debug|x64.ActiveCfg = Debug|x64\n-        {460FEE33-1FE1-483F-B3BF-931FF8E969A5}.Debug|x64.Build.0 = Debug|x64\n-        {460FEE33-1FE1-483F-B3BF-931FF8E969A5}.Debug|x86.ActiveCfg = Debug|Win32\n-        {460FEE33-1FE1-483F-B3BF-931FF8E969A5}.Debug|x86.Build.0 = Debug|Win32\n-        {460FEE33-1FE1-483F-B3BF-931FF8E969A5}.Release|x64.ActiveCfg = Release|x64\n-        {460FEE33-1FE1-483F-B3BF-931FF8E969A5}.Release|x64.Build.0 = Release|x64\n-        {460FEE33-1FE1-483F-B3BF-931FF8E969A5}.Release|x86.ActiveCfg = Release|Win32\n-        {460FEE33-1FE1-483F-B3BF-931FF8E969A5}.Release|x86.Build.0 = Release|Win32\n-        {5724BA7D-A09A-4BA8-800B-C4C1561B3D69}.Debug|x64.ActiveCfg = Debug|x64\n-        {5724BA7D-A09A-4BA8-800B-C4C1561B3D69}.Debug|x64.Build.0 = Debug|x64\n-        {5724BA7D-A09A-4BA8-800B-C4C1561B3D69}.Debug|x86.ActiveCfg = Debug|Win32\n-        {5724BA7D-A09A-4BA8-800B-C4C1561B3D69}.Debug|x86.Build.0 = Debug|Win32\n-        {5724BA7D-A09A-4BA8-800B-C4C1561B3D69}.Release|x64.ActiveCfg = Release|x64\n-        {5724BA7D-A09A-4BA8-800B-C4C1561B3D69}.Release|x64.Build.0 = Release|x64\n-        {5724BA7D-A09A-4BA8-800B-C4C1561B3D69}.Release|x86.ActiveCfg = Release|Win32\n-        {5724BA7D-A09A-4BA8-800B-C4C1561B3D69}.Release|x86.Build.0 = Release|Win32\n-        {93B86837-B543-48A5-A89B-7C87ABB77DF2}.Debug|x64.ActiveCfg = Debug|x64\n-        {93B86837-B543-48A5-A89B-7C87ABB77DF2}.Debug|x64.Build.0 = Debug|x64\n-        {93B86837-B543-48A5-A89B-7C87ABB77DF2}.Debug|x86.ActiveCfg = Debug|Win32\n-        {93B86837-B543-48A5-A89B-7C87ABB77DF2}.Debug|x86.Build.0 = Debug|Win32\n-        {93B86837-B543-48A5-A89B-7C87ABB77DF2}.Release|x64.ActiveCfg = Release|x64\n-        {93B86837-B543-48A5-A89B-7C87ABB77DF2}.Release|x64.Build.0 = Release|x64\n-        {93B86837-B543-48A5-A89B-7C87ABB77DF2}.Release|x86.ActiveCfg = Release|Win32\n-        {93B86837-B543-48A5-A89B-7C87ABB77DF2}.Release|x86.Build.0 = Release|Win32\n-        {792D487F-F14C-49FC-A9DE-3FC150F31C3F}.Debug|x64.ActiveCfg = Debug|x64\n-        {792D487F-F14C-49FC-A9DE-3FC150F31C3F}.Debug|x64.Build.0 = Debug|x64\n-        {792D487F-F14C-49FC-A9DE-3FC150F31C3F}.Debug|x86.ActiveCfg = Debug|Win32\n-        {792D487F-F14C-49FC-A9DE-3FC150F31C3F}.Debug|x86.Build.0 = Debug|Win32\n-        {792D487F-F14C-49FC-A9DE-3FC150F31C3F}.Release|x64.ActiveCfg = Release|x64\n-        {792D487F-F14C-49FC-A9DE-3FC150F31C3F}.Release|x64.Build.0 = Release|x64\n-        {792D487F-F14C-49FC-A9DE-3FC150F31C3F}.Release|x86.ActiveCfg = Release|Win32\n-        {792D487F-F14C-49FC-A9DE-3FC150F31C3F}.Release|x86.Build.0 = Release|Win32\n-        {A56B73DB-D46D-4882-8374-1FE3FFA08F07}.Debug|x64.ActiveCfg = Debug|x64\n-        {A56B73DB-D46D-4882-8374-1FE3FFA08F07}.Debug|x64.Build.0 = Debug|x64\n-        {A56B73DB-D46D-4882-8374-1FE3FFA08F07}.Debug|x86.ActiveCfg = Debug|Win32\n-        {A56B73DB-D46D-4882-8374-1FE3FFA08F07}.Debug|x86.Build.0 = Debug|Win32\n-        {A56B73DB-D46D-4882-8374-1FE3FFA08F07}.Release|x64.ActiveCfg = Release|x64\n-        {A56B73DB-D46D-4882-8374-1FE3FFA08F07}.Release|x64.Build.0 = Release|x64\n-        {A56B73DB-D46D-4882-8374-1FE3FFA08F07}.Release|x86.ActiveCfg = Release|Win32\n-        {A56B73DB-D46D-4882-8374-1FE3FFA08F07}.Release|x86.Build.0 = Release|Win32\n-        {0667528C-D734-4009-ADF9-C0D6C4A5A5A6}.Debug|x64.ActiveCfg = Debug|x64\n-        {0667528C-D734-4009-ADF9-C0D6C4A5A5A6}.Debug|x64.Build.0 = Debug|x64\n-        {0667528C-D734-4009-ADF9-C0D6C4A5A5A6}.Debug|x86.ActiveCfg = Debug|Win32\n-        {0667528C-D734-4009-ADF9-C0D6C4A5A5A6}.Debug|x86.Build.0 = Debug|Win32\n-        {0667528C-D734-4009-ADF9-C0D6C4A5A5A6}.Release|x64.ActiveCfg = Release|x64\n-        {0667528C-D734-4009-ADF9-C0D6C4A5A5A6}.Release|x64.Build.0 = Release|x64\n-        {0667528C-D734-4009-ADF9-C0D6C4A5A5A6}.Release|x86.ActiveCfg = Release|Win32\n-        {0667528C-D734-4009-ADF9-C0D6C4A5A5A6}.Release|x86.Build.0 = Release|Win32\n-        {0B2D7431-F876-4A58-87BF-F748338CD3BF}.Debug|x64.ActiveCfg = Debug|x64\n-        {0B2D7431-F876-4A58-87BF-F748338CD3BF}.Debug|x64.Build.0 = Debug|x64\n-        {0B2D7431-F876-4A58-87BF-F748338CD3BF}.Debug|x86.ActiveCfg = Debug|Win32\n-        {0B2D7431-F876-4A58-87BF-F748338CD3BF}.Debug|x86.Build.0 = Debug|Win32\n-        {0B2D7431-F876-4A58-87BF-F748338CD3BF}.Release|x64.ActiveCfg = Release|x64\n-        {0B2D7431-F876-4A58-87BF-F748338CD3BF}.Release|x64.Build.0 = Release|x64\n-        {0B2D7431-F876-4A58-87BF-F748338CD3BF}.Release|x86.ActiveCfg = Release|Win32\n-        {0B2D7431-F876-4A58-87BF-F748338CD3BF}.Release|x86.Build.0 = Release|Win32\n-        {1125654E-E1B2-4431-8B5C-62EA9A2FEECB}.Debug|x64.ActiveCfg = Debug|x64\n-        {1125654E-E1B2-4431-8B5C-62EA9A2FEECB}.Debug|x64.Build.0 = Debug|x64\n-        {1125654E-E1B2-4431-8B5C-62EA9A2FEECB}.Debug|x86.ActiveCfg = Debug|Win32\n-        {1125654E-E1B2-4431-8B5C-62EA9A2FEECB}.Debug|x86.Build.0 = Debug|Win32\n-        {1125654E-E1B2-4431-8B5C-62EA9A2FEECB}.Release|x64.ActiveCfg = Release|x64\n-        {1125654E-E1B2-4431-8B5C-62EA9A2FEECB}.Release|x64.Build.0 = Release|x64\n-        {1125654E-E1B2-4431-8B5C-62EA9A2FEECB}.Release|x86.ActiveCfg = Release|Win32\n-        {1125654E-E1B2-4431-8B5C-62EA9A2FEECB}.Release|x86.Build.0 = Release|Win32\n-        {D3022AF6-AD33-4CE3-B358-87CB6A1B29CF}.Debug|x64.ActiveCfg = Debug|x64\n-        {D3022AF6-AD33-4CE3-B358-87CB6A1B29CF}.Debug|x64.Build.0 = Debug|x64\n-        {D3022AF6-AD33-4CE3-B358-87CB6A1B29CF}.Debug|x86.ActiveCfg = Debug|Win32\n-        {D3022AF6-AD33-4CE3-B358-87CB6A1B29CF}.Debug|x86.Build.0 = Debug|Win32\n-        {D3022AF6-AD33-4CE3-B358-87CB6A1B29CF}.Release|x64.ActiveCfg = Release|x64\n-        {D3022AF6-AD33-4CE3-B358-87CB6A1B29CF}.Release|x64.Build.0 = Release|x64\n-        {D3022AF6-AD33-4CE3-B358-87CB6A1B29CF}.Release|x86.ActiveCfg = Release|Win32\n-        {D3022AF6-AD33-4CE3-B358-87CB6A1B29CF}.Release|x86.Build.0 = Release|Win32\n-    EndGlobalSection\n-    GlobalSection(SolutionProperties) = preSolution\n-        HideSolutionNode = FALSE\n-    EndGlobalSection\n-    GlobalSection(ExtensibilityGlobals) = postSolution\n-                SolutionGuid = {4ABD1207-9A90-4EC9-A8EB-203638A2605D}\n-                        SolutionGuid = {2FB733C9-24CB-4BA5-A26B-F43DAD7996B7}\n-                                SolutionGuid = {D0CAE2D0-8DB1-4A0B-80EE-800AA6C64323}\n-        SolutionGuid = {DA7D16A6-E5F0-45B3-B194-C3FE64F1BFCD}\n-    EndGlobalSection"
      },
      {
        "sha": "4ac27dae3f9f7b0a0215d77be6b8d2a06d559720",
        "filename": "build_msvc/bitcoin_config.h",
        "status": "removed",
        "additions": 0,
        "deletions": 424,
        "changes": 424,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/build_msvc/bitcoin_config.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/build_msvc/bitcoin_config.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin_config.h?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "patch": "@@ -1,424 +0,0 @@\n-#ifndef BITCOIN_BITCOIN_CONFIG_H\n-#define BITCOIN_BITCOIN_CONFIG_H\n-\n-/* Define if building universal (internal helper macro) */\n-/* #undef AC_APPLE_UNIVERSAL_BUILD */\n-\n-/* Version Build */\n-#define CLIENT_VERSION_BUILD 0\n-\n-/* Version is release */\n-#define CLIENT_VERSION_IS_RELEASE false\n-\n-/* Major version */\n-#define CLIENT_VERSION_MAJOR 1\n-\n-/* Minor version */\n-#define CLIENT_VERSION_MINOR 17\n-\n-/* Build revision */\n-#define CLIENT_VERSION_REVISION 99\n-\n-/* Copyright holder(s) before %s replacement */\n-#define COPYRIGHT_HOLDERS \"The %s developers\"\n-\n-/* Copyright holder(s) */\n-#define COPYRIGHT_HOLDERS_FINAL \"The Bitcoin Core developers\"\n-\n-/* Replacement for %s in copyright holders string */\n-#define COPYRIGHT_HOLDERS_SUBSTITUTION \"Bitcoin Core\"\n-\n-/* Copyright year */\n-#define COPYRIGHT_YEAR 2018\n-\n-/* Define to 1 to enable wallet functions */\n-#define ENABLE_WALLET 1\n-\n-/* Define to 1 to enable ZMQ functions */\n-#define ENABLE_ZMQ 1\n-\n-/* parameter and return value type for __fdelt_chk */\n-/* #undef FDELT_TYPE */\n-\n-/* define if the Boost library is available */\n-#define HAVE_BOOST /**/\n-\n-/* define if the Boost::Chrono library is available */\n-#define HAVE_BOOST_CHRONO /**/\n-\n-/* define if the Boost::Filesystem library is available */\n-#define HAVE_BOOST_FILESYSTEM /**/\n-\n-/* define if the Boost::PROGRAM_OPTIONS library is available */\n-#define HAVE_BOOST_PROGRAM_OPTIONS /**/\n-\n-/* define if the Boost::System library is available */\n-#define HAVE_BOOST_SYSTEM /**/\n-\n-/* define if the Boost::Thread library is available */\n-#define HAVE_BOOST_THREAD /**/\n-\n-/* define if the Boost::Unit_Test_Framework library is available */\n-#define HAVE_BOOST_UNIT_TEST_FRAMEWORK /**/\n-\n-/* Define to 1 if you have the <byteswap.h> header file. */\n-/* #undef HAVE_BYTESWAP_H */\n-\n-/* Define this symbol if the consensus lib has been built */\n-#define HAVE_CONSENSUS_LIB 1\n-\n-/* define if the compiler supports basic C++11 syntax */\n-#define HAVE_CXX11 1\n-\n-/* Define to 1 if you have the declaration of `be16toh', and to 0 if you\n-   don't. */\n-#define HAVE_DECL_BE16TOH 0\n-\n-/* Define to 1 if you have the declaration of `be32toh', and to 0 if you\n-   don't. */\n-#define HAVE_DECL_BE32TOH 0\n-\n-/* Define to 1 if you have the declaration of `be64toh', and to 0 if you\n-   don't. */\n-#define HAVE_DECL_BE64TOH 0\n-\n-/* Define to 1 if you have the declaration of `bswap_16', and to 0 if you\n-   don't. */\n-#define HAVE_DECL_BSWAP_16 0\n-\n-/* Define to 1 if you have the declaration of `bswap_32', and to 0 if you\n-   don't. */\n-#define HAVE_DECL_BSWAP_32 0\n-\n-/* Define to 1 if you have the declaration of `bswap_64', and to 0 if you\n-   don't. */\n-#define HAVE_DECL_BSWAP_64 0\n-\n-/* Define to 1 if you have the declaration of `daemon', and to 0 if you don't.\n-   */\n-#define HAVE_DECL_DAEMON 0\n-\n-/* Define to 1 if you have the declaration of `EVP_MD_CTX_new', and to 0 if\n-   you don't. */\n-//#define HAVE_DECL_EVP_MD_CTX_NEW 1\n-\n-/* Define to 1 if you have the declaration of `htobe16', and to 0 if you\n-   don't. */\n-#define HAVE_DECL_HTOBE16 0\n-\n-/* Define to 1 if you have the declaration of `htobe32', and to 0 if you\n-   don't. */\n-#define HAVE_DECL_HTOBE32 0\n-\n-/* Define to 1 if you have the declaration of `htobe64', and to 0 if you\n-   don't. */\n-#define HAVE_DECL_HTOBE64 0\n-\n-/* Define to 1 if you have the declaration of `htole16', and to 0 if you\n-   don't. */\n-#define HAVE_DECL_HTOLE16 0\n-\n-/* Define to 1 if you have the declaration of `htole32', and to 0 if you\n-   don't. */\n-#define HAVE_DECL_HTOLE32 0\n-\n-/* Define to 1 if you have the declaration of `htole64', and to 0 if you\n-   don't. */\n-#define HAVE_DECL_HTOLE64 0\n-\n-/* Define to 1 if you have the declaration of `le16toh', and to 0 if you\n-   don't. */\n-#define HAVE_DECL_LE16TOH 0\n-\n-/* Define to 1 if you have the declaration of `le32toh', and to 0 if you\n-   don't. */\n-#define HAVE_DECL_LE32TOH 0\n-\n-/* Define to 1 if you have the declaration of `le64toh', and to 0 if you\n-   don't. */\n-#define HAVE_DECL_LE64TOH 0\n-\n-/* Define to 1 if you have the declaration of `strerror_r', and to 0 if you\n-   don't. */\n-#define HAVE_DECL_STRERROR_R 0\n-\n-/* Define to 1 if you have the declaration of `strnlen', and to 0 if you\n-   don't. */\n-#define HAVE_DECL_STRNLEN 1\n-\n-/* Define to 1 if you have the declaration of `__builtin_clz', and to 0 if you\n-   don't. */\n-//#define HAVE_DECL___BUILTIN_CLZ 1\n-\n-/* Define to 1 if you have the declaration of `__builtin_clzl', and to 0 if\n-   you don't. */\n-//#define HAVE_DECL___BUILTIN_CLZL 1\n-\n-/* Define to 1 if you have the declaration of `__builtin_clzll', and to 0 if\n-   you don't. */\n-//#define HAVE_DECL___BUILTIN_CLZLL 1\n-\n-/* Define to 1 if you have the <dlfcn.h> header file. */\n-/* #undef HAVE_DLFCN_H */\n-\n-/* Define to 1 if you have the <endian.h> header file. */\n-/* #undef HAVE_ENDIAN_H */\n-\n-/* Define to 1 if the system has the `dllexport' function attribute */\n-#define HAVE_FUNC_ATTRIBUTE_DLLEXPORT 1\n-\n-/* Define to 1 if the system has the `dllimport' function attribute */\n-#define HAVE_FUNC_ATTRIBUTE_DLLIMPORT 1\n-\n-/* Define to 1 if the system has the `visibility' function attribute */\n-#define HAVE_FUNC_ATTRIBUTE_VISIBILITY 1\n-\n-/* Define this symbol if the BSD getentropy system call is available */\n-/* #undef HAVE_GETENTROPY */\n-\n-/* Define this symbol if the BSD getentropy system call is available with\n-   sys/random.h */\n-/* #undef HAVE_GETENTROPY_RAND */\n-\n-/* Define to 1 if you have the <inttypes.h> header file. */\n-#define HAVE_INTTYPES_H 1\n-\n-/* Define to 1 if you have the `advapi32' library (-ladvapi32). */\n-#define HAVE_LIBADVAPI32 1\n-\n-/* Define to 1 if you have the `comctl32' library (-lcomctl32). */\n-#define HAVE_LIBCOMCTL32 1\n-\n-/* Define to 1 if you have the `comdlg32' library (-lcomdlg32). */\n-#define HAVE_LIBCOMDLG32 1\n-\n-/* Define to 1 if you have the `crypt32' library (-lcrypt32). */\n-#define HAVE_LIBCRYPT32 1\n-\n-/* Define to 1 if you have the `gdi32' library (-lgdi32). */\n-#define HAVE_LIBGDI32 1\n-\n-/* Define to 1 if you have the `imm32' library (-limm32). */\n-#define HAVE_LIBIMM32 1\n-\n-/* Define to 1 if you have the `iphlpapi' library (-liphlpapi). */\n-#define HAVE_LIBIPHLPAPI 1\n-\n-/* Define to 1 if you have the `kernel32' library (-lkernel32). */\n-#define HAVE_LIBKERNEL32 1\n-\n-/* Define to 1 if you have the `mingwthrd' library (-lmingwthrd). */\n-#define HAVE_LIBMINGWTHRD 1\n-\n-/* Define to 1 if you have the `mswsock' library (-lmswsock). */\n-#define HAVE_LIBMSWSOCK 1\n-\n-/* Define to 1 if you have the `ole32' library (-lole32). */\n-#define HAVE_LIBOLE32 1\n-\n-/* Define to 1 if you have the `oleaut32' library (-loleaut32). */\n-#define HAVE_LIBOLEAUT32 1\n-\n-/* Define to 1 if you have the `rpcrt4' library (-lrpcrt4). */\n-#define HAVE_LIBRPCRT4 1\n-\n-/* Define to 1 if you have the `rt' library (-lrt). */\n-/* #undef HAVE_LIBRT */\n-\n-/* Define to 1 if you have the `shell32' library (-lshell32). */\n-#define HAVE_LIBSHELL32 1\n-\n-/* Define to 1 if you have the `shlwapi' library (-lshlwapi). */\n-#define HAVE_LIBSHLWAPI 1\n-\n-/* Define to 1 if you have the `ssp' library (-lssp). */\n-#define HAVE_LIBSSP 1\n-\n-/* Define to 1 if you have the `user32' library (-luser32). */\n-#define HAVE_LIBUSER32 1\n-\n-/* Define to 1 if you have the `uuid' library (-luuid). */\n-#define HAVE_LIBUUID 1\n-\n-/* Define to 1 if you have the `winmm' library (-lwinmm). */\n-#define HAVE_LIBWINMM 1\n-\n-/* Define to 1 if you have the `winspool' library (-lwinspool). */\n-#define HAVE_LIBWINSPOOL 1\n-\n-/* Define to 1 if you have the `ws2_32' library (-lws2_32). */\n-#define HAVE_LIBWS2_32 1\n-\n-/* Define to 1 if you have the `z ' library (-lz ). */\n-#define HAVE_LIBZ_ 1\n-\n-/* Define this symbol if you have malloc_info */\n-/* #undef HAVE_MALLOC_INFO */\n-\n-/* Define this symbol if you have mallopt with M_ARENA_MAX */\n-/* #undef HAVE_MALLOPT_ARENA_MAX */\n-\n-/* Define to 1 if you have the <memory.h> header file. */\n-#define HAVE_MEMORY_H 1\n-\n-/* Define to 1 if you have the <miniupnpc/miniupnpc.h> header file. */\n-#define HAVE_MINIUPNPC_MINIUPNPC_H 1\n-\n-/* Define to 1 if you have the <miniupnpc/miniwget.h> header file. */\n-#define HAVE_MINIUPNPC_MINIWGET_H 1\n-\n-/* Define to 1 if you have the <miniupnpc/upnpcommands.h> header file. */\n-#define HAVE_MINIUPNPC_UPNPCOMMANDS_H 1\n-\n-/* Define to 1 if you have the <miniupnpc/upnperrors.h> header file. */\n-#define HAVE_MINIUPNPC_UPNPERRORS_H 1\n-\n-/* Define this symbol if you have MSG_DONTWAIT */\n-/* #undef HAVE_MSG_DONTWAIT */\n-\n-/* Define this symbol if you have MSG_NOSIGNAL */\n-/* #undef HAVE_MSG_NOSIGNAL */\n-\n-/* Define if you have POSIX threads libraries and header files. */\n-//#define HAVE_PTHREAD 1\n-\n-/* Have PTHREAD_PRIO_INHERIT. */\n-//#define HAVE_PTHREAD_PRIO_INHERIT 1\n-\n-/* Define to 1 if you have the <stdint.h> header file. */\n-#define HAVE_STDINT_H 1\n-\n-/* Define to 1 if you have the <stdio.h> header file. */\n-#define HAVE_STDIO_H 1\n-\n-/* Define to 1 if you have the <stdlib.h> header file. */\n-#define HAVE_STDLIB_H 1\n-\n-/* Define to 1 if you have the `strerror_r' function. */\n-/* #undef HAVE_STRERROR_R */\n-\n-/* Define to 1 if you have the <strings.h> header file. */\n-#define HAVE_STRINGS_H 1\n-\n-/* Define to 1 if you have the <string.h> header file. */\n-#define HAVE_STRING_H 1\n-\n-/* Define this symbol if the BSD sysctl(KERN_ARND) is available */\n-/* #undef HAVE_SYSCTL_ARND */\n-\n-/* Define to 1 if you have the <sys/endian.h> header file. */\n-/* #undef HAVE_SYS_ENDIAN_H */\n-\n-/* Define this symbol if the Linux getrandom system call is available */\n-/* #undef HAVE_SYS_GETRANDOM */\n-\n-/* Define to 1 if you have the <sys/prctl.h> header file. */\n-/* #undef HAVE_SYS_PRCTL_H */\n-\n-/* Define to 1 if you have the <sys/select.h> header file. */\n-/* #undef HAVE_SYS_SELECT_H */\n-\n-/* Define to 1 if you have the <sys/stat.h> header file. */\n-#define HAVE_SYS_STAT_H 1\n-\n-/* Define to 1 if you have the <sys/types.h> header file. */\n-#define HAVE_SYS_TYPES_H 1\n-\n-/* Define to 1 if you have the <unistd.h> header file. */\n-//#define HAVE_UNISTD_H 1\n-\n-/* Define if the visibility attribute is supported. */\n-#define HAVE_VISIBILITY_ATTRIBUTE 1\n-\n-/* Define this symbol if boost sleep works */\n-/* #undef HAVE_WORKING_BOOST_SLEEP */\n-\n-/* Define this symbol if boost sleep_for works */\n-#define HAVE_WORKING_BOOST_SLEEP_FOR 1\n-\n-/* Define to the sub-directory where libtool stores uninstalled libraries. */\n-#define LT_OBJDIR \".libs/\"\n-\n-/* Define to the address where bug reports for this package should be sent. */\n-#define PACKAGE_BUGREPORT \"https://github.com/bitcoin/bitcoin/issues\"\n-\n-/* Define to the full name of this package. */\n-#define PACKAGE_NAME \"Bitcoin Core\"\n-\n-/* Define to the full name and version of this package. */\n-#define PACKAGE_STRING \"Bitcoin Core 0.17.99\"\n-\n-/* Define to the one symbol short name of this package. */\n-#define PACKAGE_TARNAME \"bitcoin\"\n-\n-/* Define to the home page for this package. */\n-#define PACKAGE_URL \"https://bitcoincore.org/\"\n-\n-/* Define to the version of this package. */\n-#define PACKAGE_VERSION \"0.17.99\"\n-\n-/* Define to necessary symbol if this constant uses a non-standard name on\n-   your system. */\n-/* #undef PTHREAD_CREATE_JOINABLE */\n-\n-/* Define this symbol if the qt platform is cocoa */\n-/* #undef QT_QPA_PLATFORM_COCOA */\n-\n-/* Define this symbol if the minimal qt platform exists */\n-#define QT_QPA_PLATFORM_MINIMAL 1\n-\n-/* Define this symbol if the qt platform is windows */\n-#define QT_QPA_PLATFORM_WINDOWS 1\n-\n-/* Define this symbol if the qt platform is xcb */\n-/* #undef QT_QPA_PLATFORM_XCB */\n-\n-/* Define this symbol if qt plugins are static */\n-#define QT_STATICPLUGIN 1\n-\n-/* Define to 1 if you have the ANSI C header files. */\n-#define STDC_HEADERS 1\n-\n-/* Define to 1 if strerror_r returns char *. */\n-/* #undef STRERROR_R_CHAR_P */\n-\n-/* Define this symbol to build in assembly routines */\n-//#define USE_ASM 1\n-\n-/* Define this symbol if coverage is enabled */\n-/* #undef USE_COVERAGE */\n-\n-/* Define if dbus support should be compiled in */\n-/* #undef USE_DBUS */\n-\n-/* Define if QR support should be compiled in */\n-//#define USE_QRCODE 1\n-\n-/* UPnP support not compiled if undefined, otherwise value (0 or 1) determines\n-   default state */\n-//#define USE_UPNP 0\n-\n-/* Define WORDS_BIGENDIAN to 1 if your processor stores words with the most\n-   significant byte first (like Motorola and SPARC, unlike Intel). */\n-#if defined AC_APPLE_UNIVERSAL_BUILD\n-# if defined __BIG_ENDIAN__\n-#  define WORDS_BIGENDIAN 1\n-# endif\n-#else\n-# ifndef WORDS_BIGENDIAN\n-/* #  undef WORDS_BIGENDIAN */\n-# endif\n-#endif\n-\n-/* Enable large inode numbers on Mac OS X 10.5.  */\n-#ifndef _DARWIN_USE_64_BIT_INODE\n-# define _DARWIN_USE_64_BIT_INODE 1\n-#endif\n-\n-/* Number of bits in a file offset, on hosts where this is settable. */\n-#define _FILE_OFFSET_BITS 64\n-\n-/* Define for large files, on AIX-style hosts. */\n-/* #undef _LARGE_FILES */\n-\n-#endif //BITCOIN_BITCOIN_CONFIG_H"
      },
      {
        "sha": "bb43d9821e215d0b36cc4450c7572e0f7ec5054e",
        "filename": "build_msvc/bitcoind/bitcoind.vcxproj",
        "status": "removed",
        "additions": 0,
        "deletions": 185,
        "changes": 185,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/build_msvc/bitcoind/bitcoind.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/build_msvc/bitcoind/bitcoind.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoind/bitcoind.vcxproj?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "patch": "@@ -1,185 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"utf-8\"?>\n-<Project DefaultTargets=\"Build\" ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n-  <Import Label=\"configInitTarget\" Project=\"..\\common.init.vcxproj\" />\n-  <ItemGroup Label=\"ProjectConfigurations\">\n-    <ProjectConfiguration Include=\"Debug|Win32\">\n-      <Configuration>Debug</Configuration>\n-      <Platform>Win32</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Release|Win32\">\n-      <Configuration>Release</Configuration>\n-      <Platform>Win32</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Debug|x64\">\n-      <Configuration>Debug</Configuration>\n-      <Platform>x64</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Release|x64\">\n-      <Configuration>Release</Configuration>\n-      <Platform>x64</Platform>\n-    </ProjectConfiguration>\n-  </ItemGroup>\n-  <PropertyGroup Label=\"Globals\">\n-    <VCProjectVersion>15.0</VCProjectVersion>\n-    <ProjectGuid>{D4513DDF-6013-44DC-ADCC-12EAF6D1F038}</ProjectGuid>\n-    <Keyword>Win32Proj</Keyword>\n-    <RootNamespace>bitcoind</RootNamespace>\n-    <VcpkgTriplet Condition=\"'$(Platform)'=='Win32'\">x86-windows-static</VcpkgTriplet>\n-    <VcpkgTriplet Condition=\"'$(Platform)'=='x64'\">x64-windows-static</VcpkgTriplet>\n-  </PropertyGroup>\n-  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.Default.props\" />\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\" Label=\"Configuration\">\n-    <ConfigurationType>Application</ConfigurationType>\n-    <UseDebugLibraries>true</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\" Label=\"Configuration\">\n-    <ConfigurationType>Application</ConfigurationType>\n-    <UseDebugLibraries>false</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <WholeProgramOptimization>true</WholeProgramOptimization>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\" Label=\"Configuration\">\n-    <ConfigurationType>Application</ConfigurationType>\n-    <UseDebugLibraries>true</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\" Label=\"Configuration\">\n-    <ConfigurationType>Application</ConfigurationType>\n-    <UseDebugLibraries>false</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <WholeProgramOptimization>true</WholeProgramOptimization>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n-  <ImportGroup Label=\"ExtensionSettings\">\n-  </ImportGroup>\n-  <ImportGroup Label=\"Shared\">\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <PropertyGroup Label=\"UserMacros\" />\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>Disabled</Optimization>\n-      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-      <AdditionalDependencies>crypt32.lib;Iphlpapi.lib;ws2_32.lib;Shlwapi.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;odbccp32.lib;%(AdditionalDependencies)</AdditionalDependencies>\n-      <SuppressStartupBanner>false</SuppressStartupBanner>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>Disabled</Optimization>\n-      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-      <AdditionalDependencies>crypt32.lib;Iphlpapi.lib;ws2_32.lib;Shlwapi.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;odbccp32.lib;%(AdditionalDependencies)</AdditionalDependencies>\n-      <SuppressStartupBanner>false</SuppressStartupBanner>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>MaxSpeed</Optimization>\n-      <FunctionLevelLinking>true</FunctionLevelLinking>\n-      <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n-      <OptimizeReferences>true</OptimizeReferences>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-      <AdditionalLibraryDirectories>\n-      </AdditionalLibraryDirectories>\n-      <AdditionalDependencies>crypt32.lib;Iphlpapi.lib;ws2_32.lib;Shlwapi.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;odbccp32.lib;%(AdditionalDependencies)</AdditionalDependencies>\n-      <SuppressStartupBanner>false</SuppressStartupBanner>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>MaxSpeed</Optimization>\n-      <FunctionLevelLinking>true</FunctionLevelLinking>\n-      <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n-      <OptimizeReferences>true</OptimizeReferences>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-      <AdditionalLibraryDirectories>\n-      </AdditionalLibraryDirectories>\n-      <AdditionalDependencies>crypt32.lib;Iphlpapi.lib;ws2_32.lib;Shlwapi.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;odbccp32.lib;%(AdditionalDependencies)</AdditionalDependencies>\n-      <SuppressStartupBanner>false</SuppressStartupBanner>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemGroup>\n-    <ClCompile Include=\"..\\..\\src\\bitcoind.cpp\" />\n-  </ItemGroup>\n-  <ItemGroup>\n-    <ProjectReference Include=\"..\\libbitcoinconsensus\\libbitcoinconsensus.vcxproj\">\n-      <Project>{2b384fa8-9ee1-4544-93cb-0d733c25e8ce}</Project>\n-    </ProjectReference>\n-    <ProjectReference Include=\"..\\libbitcoin_common\\libbitcoin_common.vcxproj\">\n-      <Project>{7c87e378-df58-482e-aa2f-1bc129bc19ce}</Project>\n-    </ProjectReference>\n-    <ProjectReference Include=\"..\\libbitcoin_crypto\\libbitcoin_crypto.vcxproj\">\n-      <Project>{6190199c-6cf4-4dad-bfbd-93fa72a760c1}</Project>\n-    </ProjectReference>\n-    <ProjectReference Include=\"..\\libbitcoin_server\\libbitcoin_server.vcxproj\">\n-      <Project>{460fee33-1fe1-483f-b3bf-931ff8e969a5}</Project>\n-    </ProjectReference>\n-    <ProjectReference Include=\"..\\libbitcoin_util\\libbitcoin_util.vcxproj\">\n-      <Project>{b53a5535-ee9d-4c6f-9a26-f79ee3bc3754}</Project>\n-    </ProjectReference>\n-    <ProjectReference Include=\"..\\libbitcoin_wallet\\libbitcoin_wallet.vcxproj\">\n-      <Project>{93b86837-b543-48a5-a89b-7c87abb77df2}</Project>\n-    </ProjectReference>\n-    <ProjectReference Include=\"..\\libbitcoin_zmq\\libbitcoin_zmq.vcxproj\">\n-      <Project>{792d487f-f14c-49fc-a9de-3fc150f31c3f}</Project>\n-    </ProjectReference>\n-    <ProjectReference Include=\"..\\libunivalue\\libunivalue.vcxproj\">\n-      <Project>{5724ba7d-a09a-4ba8-800b-c4c1561b3d69}</Project>\n-    </ProjectReference>\n-  </ItemGroup>\n-  <Import Label=\"configTarget\" Project=\"..\\common.vcxproj\" />\n-</Project>"
      },
      {
        "sha": "c3c0f665c244229ead4288ddc16ad7ebc5f8b60b",
        "filename": "build_msvc/common.init.vcxproj",
        "status": "removed",
        "additions": 0,
        "deletions": 14,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/build_msvc/common.init.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/build_msvc/common.init.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/common.init.vcxproj?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "patch": "@@ -1,14 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"utf-8\"?>\n-<Project ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n-      <PropertyGroup Condition=\"'$(WindowsTargetPlatformVersion)'=='' and !Exists('$(WindowsSdkDir)\\DesignTime\\CommonConfiguration\\Neutral\\Windows.props')\">\n-        <WindowsTargetPlatformVersion_10 Condition=\"'$(WindowsTargetPlatformVersion_10)' == ''\">$(Registry:HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows\\v10.0@ProductVersion)</WindowsTargetPlatformVersion_10>\n-        <WindowsTargetPlatformVersion_10 Condition=\"'$(WindowsTargetPlatformVersion_10)' == ''\">$(Registry:HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\Microsoft SDKs\\Windows\\v10.0@ProductVersion)</WindowsTargetPlatformVersion_10>\n-        <!-- Sometimes the version in the registry has to .0 suffix, and sometimes it doesn't. Check and add it -->\n-        <WindowsTargetPlatformVersion_10 Condition=\"'$(WindowsTargetPlatformVersion_10)' != '' and !$(WindowsTargetPlatformVersion_10.EndsWith('.0'))\">$(WindowsTargetPlatformVersion_10).0</WindowsTargetPlatformVersion_10>\n-\n-        <WindowsTargetPlatformVersion>$(WindowsTargetPlatformVersion_10)</WindowsTargetPlatformVersion>\n-    </PropertyGroup>\n-    <PropertyGroup>\n-        <Platform Condition=\"'$(Platform)' == ''\">Win32</Platform>\n-    </PropertyGroup>\n-</Project>\n\\ No newline at end of file"
      },
      {
        "sha": "5c87026efe69468eeb11848ca0674165301e8470",
        "filename": "build_msvc/common.vcxproj",
        "status": "removed",
        "additions": 0,
        "deletions": 20,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/build_msvc/common.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/build_msvc/common.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/common.vcxproj?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "patch": "@@ -1,20 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"utf-8\"?>\n-<Project ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n-  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" />\n-  <PropertyGroup>\n-      <BuildDependsOn>\n-          CopyConfig;\n-          $(BuildDependsOn);\n-      </BuildDependsOn>\n-  </PropertyGroup>\n-  <Target Name=\"CopyConfig\"\n-          Inputs=\"$(MSBuildThisFileDirectory)bitcoin_config.h\"\n-          Outputs=\"$(MSBuildThisFileDirectory)..\\src\\config\\bitcoin-config.h\">\n-      <Copy SourceFiles=\"$(MSBuildThisFileDirectory)bitcoin_config.h\" DestinationFiles=\"$(MSBuildThisFileDirectory)..\\src\\config\\bitcoin-config.h\" />\n-  </Target>\n-  <ItemDefinitionGroup>\n-    <ClCompile>\n-      <AdditionalOptions>/utf-8 %(AdditionalOptions)</AdditionalOptions>\n-    </ClCompile>\n-  </ItemDefinitionGroup>\n-</Project>\n\\ No newline at end of file"
      },
      {
        "sha": "b7265054fbf61d522d8bccc30731a764b7910e58",
        "filename": "build_msvc/libbitcoin_cli/libbitcoin_cli.vcxproj.in",
        "status": "removed",
        "additions": 0,
        "deletions": 162,
        "changes": 162,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/build_msvc/libbitcoin_cli/libbitcoin_cli.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/build_msvc/libbitcoin_cli/libbitcoin_cli.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_cli/libbitcoin_cli.vcxproj.in?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "patch": "@@ -1,162 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"utf-8\"?>\n-<Project DefaultTargets=\"Build\" ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n-  <Import Label=\"configInitTarget\" Project=\"..\\common.init.vcxproj\" />\n-  <ItemGroup Label=\"ProjectConfigurations\">\n-    <ProjectConfiguration Include=\"Debug|Win32\">\n-      <Configuration>Debug</Configuration>\n-      <Platform>Win32</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Release|Win32\">\n-      <Configuration>Release</Configuration>\n-      <Platform>Win32</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Debug|x64\">\n-      <Configuration>Debug</Configuration>\n-      <Platform>x64</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Release|x64\">\n-      <Configuration>Release</Configuration>\n-      <Platform>x64</Platform>\n-    </ProjectConfiguration>\n-  </ItemGroup>\n-  <ItemGroup>\n-@SOURCE_FILES@\n-  </ItemGroup>\n-  <ItemGroup>\n-    <None Include=\"packages.config\" />\n-  </ItemGroup>\n-  <PropertyGroup Label=\"Globals\">\n-    <VCProjectVersion>15.0</VCProjectVersion>\n-    <ProjectGuid>{0667528C-D734-4009-ADF9-C0D6C4A5A5A6}</ProjectGuid>\n-    <Keyword>Win32Proj</Keyword>\n-    <RootNamespace>libbitcoin_cli</RootNamespace>\n-    <VcpkgTriplet Condition=\"'$(Platform)'=='Win32'\">x86-windows-static</VcpkgTriplet>\n-    <VcpkgTriplet Condition=\"'$(Platform)'=='x64'\">x64-windows-static</VcpkgTriplet>\n-  </PropertyGroup>\n-  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.Default.props\" />\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\" Label=\"Configuration\">\n-    <ConfigurationType>StaticLibrary</ConfigurationType>\n-    <UseDebugLibraries>true</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\" Label=\"Configuration\">\n-    <ConfigurationType>StaticLibrary</ConfigurationType>\n-    <UseDebugLibraries>false</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <WholeProgramOptimization>true</WholeProgramOptimization>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\" Label=\"Configuration\">\n-    <ConfigurationType>StaticLibrary</ConfigurationType>\n-    <UseDebugLibraries>true</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\" Label=\"Configuration\">\n-    <ConfigurationType>StaticLibrary</ConfigurationType>\n-    <UseDebugLibraries>false</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <WholeProgramOptimization>true</WholeProgramOptimization>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n-  <ImportGroup Label=\"ExtensionSettings\">\n-  </ImportGroup>\n-  <ImportGroup Label=\"Shared\">\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <PropertyGroup Label=\"UserMacros\" />\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <LinkIncremental>false</LinkIncremental>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <LinkIncremental>true</LinkIncremental>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <LinkIncremental>true</LinkIncremental>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <LinkIncremental>false</LinkIncremental>\n-  </PropertyGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>MaxSpeed</Optimization>\n-      <FunctionLevelLinking>true</FunctionLevelLinking>\n-      <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n-      <OptimizeReferences>true</OptimizeReferences>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>Disabled</Optimization>\n-      <PreprocessorDefinitions>_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>Disabled</Optimization>\n-      <PreprocessorDefinitions>_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>MaxSpeed</Optimization>\n-      <FunctionLevelLinking>true</FunctionLevelLinking>\n-      <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n-      <OptimizeReferences>true</OptimizeReferences>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <Import Label=\"configTarget\" Project=\"..\\common.vcxproj\" />\n-</Project>"
      },
      {
        "sha": "42145c15ad7e8074a6be39985002a6ac8cc36b2e",
        "filename": "build_msvc/libbitcoin_common/libbitcoin_common.vcxproj.in",
        "status": "removed",
        "additions": 0,
        "deletions": 174,
        "changes": 174,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/build_msvc/libbitcoin_common/libbitcoin_common.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/build_msvc/libbitcoin_common/libbitcoin_common.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_common/libbitcoin_common.vcxproj.in?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "patch": "@@ -1,174 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"utf-8\"?>\n-<Project DefaultTargets=\"Build\" ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n-  <Import Label=\"configInitTarget\" Project=\"..\\common.init.vcxproj\" />\n-  <ItemGroup Label=\"ProjectConfigurations\">\n-    <ProjectConfiguration Include=\"Debug|Win32\">\n-      <Configuration>Debug</Configuration>\n-      <Platform>Win32</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Release|Win32\">\n-      <Configuration>Release</Configuration>\n-      <Platform>Win32</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Debug|x64\">\n-      <Configuration>Debug</Configuration>\n-      <Platform>x64</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Release|x64\">\n-      <Configuration>Release</Configuration>\n-      <Platform>x64</Platform>\n-    </ProjectConfiguration>\n-  </ItemGroup>\n-  <PropertyGroup Label=\"Globals\">\n-    <VCProjectVersion>15.0</VCProjectVersion>\n-    <ProjectGuid>{7C87E378-DF58-482E-AA2F-1BC129BC19CE}</ProjectGuid>\n-    <Keyword>Win32Proj</Keyword>\n-    <RootNamespace>libbitcoin_common</RootNamespace>\n-    <VcpkgTriplet Condition=\"'$(Platform)'=='Win32'\">x86-windows-static</VcpkgTriplet>\n-    <VcpkgTriplet Condition=\"'$(Platform)'=='x64'\">x64-windows-static</VcpkgTriplet>\n-  </PropertyGroup>\n-  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.Default.props\" />\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\" Label=\"Configuration\">\n-    <ConfigurationType>StaticLibrary</ConfigurationType>\n-    <UseDebugLibraries>true</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\" Label=\"Configuration\">\n-    <ConfigurationType>StaticLibrary</ConfigurationType>\n-    <UseDebugLibraries>false</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <WholeProgramOptimization>true</WholeProgramOptimization>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\" Label=\"Configuration\">\n-    <ConfigurationType>StaticLibrary</ConfigurationType>\n-    <UseDebugLibraries>true</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\" Label=\"Configuration\">\n-    <ConfigurationType>StaticLibrary</ConfigurationType>\n-    <UseDebugLibraries>false</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <WholeProgramOptimization>true</WholeProgramOptimization>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n-  <ImportGroup Label=\"ExtensionSettings\">\n-  </ImportGroup>\n-  <ImportGroup Label=\"Shared\">\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <PropertyGroup Label=\"UserMacros\" />\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <LinkIncremental>true</LinkIncremental>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <LinkIncremental>true</LinkIncremental>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <LinkIncremental>false</LinkIncremental>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <LinkIncremental>false</LinkIncremental>\n-  </PropertyGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>Disabled</Optimization>\n-      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n-      <SuppressStartupBanner>false</SuppressStartupBanner>\n-      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-      <AdditionalLibraryDirectories>\n-      </AdditionalLibraryDirectories>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>Disabled</Optimization>\n-      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n-      <SuppressStartupBanner>false</SuppressStartupBanner>\n-      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-      <AdditionalLibraryDirectories>\n-      </AdditionalLibraryDirectories>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>MaxSpeed</Optimization>\n-      <FunctionLevelLinking>true</FunctionLevelLinking>\n-      <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n-      <SuppressStartupBanner>false</SuppressStartupBanner>\n-      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n-      <OptimizeReferences>true</OptimizeReferences>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-      <AdditionalLibraryDirectories>\n-      </AdditionalLibraryDirectories>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>MaxSpeed</Optimization>\n-      <FunctionLevelLinking>true</FunctionLevelLinking>\n-      <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n-      <SuppressStartupBanner>false</SuppressStartupBanner>\n-      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n-      <OptimizeReferences>true</OptimizeReferences>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-      <AdditionalLibraryDirectories>\n-      </AdditionalLibraryDirectories>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemGroup>\n-@SOURCE_FILES@\n-  </ItemGroup>\n-  <ItemGroup>\n-    <None Include=\"packages.config\" />\n-  </ItemGroup>\n-  <Import Label=\"configTarget\" Project=\"..\\common.vcxproj\" />\n-</Project>"
      },
      {
        "sha": "a05125723a82ab8b72844a11e821f38b587284e9",
        "filename": "build_msvc/libbitcoin_crypto/libbitcoin_crypto.vcxproj.in",
        "status": "removed",
        "additions": 0,
        "deletions": 157,
        "changes": 157,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/build_msvc/libbitcoin_crypto/libbitcoin_crypto.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/build_msvc/libbitcoin_crypto/libbitcoin_crypto.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_crypto/libbitcoin_crypto.vcxproj.in?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "patch": "@@ -1,157 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"utf-8\"?>\n-<Project DefaultTargets=\"Build\" ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n-  <Import Label=\"configInitTarget\" Project=\"..\\common.init.vcxproj\" />\n-  <ItemGroup Label=\"ProjectConfigurations\">\n-    <ProjectConfiguration Include=\"Debug|Win32\">\n-      <Configuration>Debug</Configuration>\n-      <Platform>Win32</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Release|Win32\">\n-      <Configuration>Release</Configuration>\n-      <Platform>Win32</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Debug|x64\">\n-      <Configuration>Debug</Configuration>\n-      <Platform>x64</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Release|x64\">\n-      <Configuration>Release</Configuration>\n-      <Platform>x64</Platform>\n-    </ProjectConfiguration>\n-  </ItemGroup>\n-  <PropertyGroup Label=\"Globals\">\n-    <VCProjectVersion>15.0</VCProjectVersion>\n-    <ProjectGuid>{6190199C-6CF4-4DAD-BFBD-93FA72A760C1}</ProjectGuid>\n-    <Keyword>Win32Proj</Keyword>\n-    <RootNamespace>libbitcoin_crypto</RootNamespace>\n-  </PropertyGroup>\n-  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.Default.props\" />\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\" Label=\"Configuration\">\n-    <ConfigurationType>StaticLibrary</ConfigurationType>\n-    <UseDebugLibraries>true</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\" Label=\"Configuration\">\n-    <ConfigurationType>StaticLibrary</ConfigurationType>\n-    <UseDebugLibraries>false</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <WholeProgramOptimization>true</WholeProgramOptimization>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\" Label=\"Configuration\">\n-    <ConfigurationType>StaticLibrary</ConfigurationType>\n-    <UseDebugLibraries>true</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\" Label=\"Configuration\">\n-    <ConfigurationType>StaticLibrary</ConfigurationType>\n-    <UseDebugLibraries>false</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <WholeProgramOptimization>true</WholeProgramOptimization>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n-  <ImportGroup Label=\"ExtensionSettings\">\n-  </ImportGroup>\n-  <ImportGroup Label=\"Shared\">\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <PropertyGroup Label=\"UserMacros\" />\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <LinkIncremental>true</LinkIncremental>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <LinkIncremental>true</LinkIncremental>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <LinkIncremental>false</LinkIncremental>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <LinkIncremental>false</LinkIncremental>\n-  </PropertyGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>Disabled</Optimization>\n-      <PreprocessorDefinitions>_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>Disabled</Optimization>\n-      <PreprocessorDefinitions>WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>MaxSpeed</Optimization>\n-      <FunctionLevelLinking>true</FunctionLevelLinking>\n-      <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n-      <OptimizeReferences>true</OptimizeReferences>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>MaxSpeed</Optimization>\n-      <FunctionLevelLinking>true</FunctionLevelLinking>\n-      <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n-      <OptimizeReferences>true</OptimizeReferences>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemGroup>\n-@SOURCE_FILES@\n-  </ItemGroup>\n-  <Import Label=\"configTarget\" Project=\"..\\common.vcxproj\" />\n-</Project>"
      },
      {
        "sha": "2e8ecb2d2c338d611e1051a9aa0d52e7385dd752",
        "filename": "build_msvc/libbitcoin_qt/libbitcoin_qt.vcxproj",
        "status": "removed",
        "additions": 0,
        "deletions": 955,
        "changes": 955,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/build_msvc/libbitcoin_qt/libbitcoin_qt.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/build_msvc/libbitcoin_qt/libbitcoin_qt.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_qt/libbitcoin_qt.vcxproj?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "patch": "@@ -1,955 +0,0 @@\n-\ufeff<?xml version=\"1.0\" encoding=\"utf-8\"?>\n-<Project DefaultTargets=\"Build\" ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n-  <Import Label=\"configInitTarget\" Project=\"..\\common.init.vcxproj\" />\n-  <ItemGroup Label=\"ProjectConfigurations\">\n-    <ProjectConfiguration Include=\"Debug|Win32\">\n-      <Configuration>Debug</Configuration>\n-      <Platform>Win32</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Release|Win32\">\n-      <Configuration>Release</Configuration>\n-      <Platform>Win32</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Debug|x64\">\n-      <Configuration>Debug</Configuration>\n-      <Platform>x64</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Release|x64\">\n-      <Configuration>Release</Configuration>\n-      <Platform>x64</Platform>\n-    </ProjectConfiguration>\n-  </ItemGroup>\n-  <PropertyGroup Label=\"Globals\">\n-    <VCProjectVersion>15.0</VCProjectVersion>\n-    <VcpkgTriplet Condition=\"'$(Platform)'=='Win32'\">x86-windows-static</VcpkgTriplet>\n-    <VcpkgTriplet Condition=\"'$(Platform)'=='x64'\">x64-windows-static</VcpkgTriplet>\n-    <ProjectGuid>{2B4ABFF8-D1FD-4845-88C9-1F3C0A6512BF}</ProjectGuid>\n-  </PropertyGroup>\n-  <ItemGroup>\n-    <CustomBuild Include=\"..\\..\\src\\qt\\bitcoin.qrc\">\n-      <Command>\"$(QTDIR)\\bincc.exe\" -name bitcoin \"%(Fullpath)\" -o .\\GeneratedFiles\\qrc_bitcoin.cpp</Command>\n-      <Message>Qt rcc generation for %(Identity)</Message>\n-      <Outputs>.\\GeneratedFiles\\qrc_bitcoin.cpp</Outputs>\n-      <AdditionalInputs>(QTDIR)\\bincc.exe</AdditionalInputs>\n-    </CustomBuild>\n-    <CustomBuild Include=\"..\\..\\src\\qt\\bitcoin_locale.qrc\">\n-      <Command>\"$(QTDIR)\\bincc.exe\" -name bitcoin_locale \"%(Fullpath)\" -o .\\GeneratedFiles\\qrc_bitcoin_locale.cpp</Command>\n-      <Message>Qt rcc generation for %(Identity)</Message>\n-      <Outputs>.\\GeneratedFiles\\qrc_bitcoin_locale.cpp</Outputs>\n-      <AdditionalInputs>(QTDIR)\\bincc.exe</AdditionalInputs>\n-    </CustomBuild>\n-    <None Include=\"..\\..\\src\\qt\\forms\\addressbookpage.ui\" />\n-    <None Include=\"..\\..\\src\\qt\\forms\\askpassphrasedialog.ui\" />\n-    <None Include=\"..\\..\\src\\qt\\forms\\coincontroldialog.ui\" />\n-    <None Include=\"..\\..\\src\\qt\\forms\\debugwindow.ui\" />\n-    <None Include=\"..\\..\\src\\qt\\forms\\editaddressdialog.ui\" />\n-    <None Include=\"..\\..\\src\\qt\\forms\\helpmessagedialog.ui\" />\n-    <None Include=\"..\\..\\src\\qt\\forms\\intro.ui\" />\n-    <None Include=\"..\\..\\src\\qt\\forms\\modaloverlay.ui\" />\n-    <None Include=\"..\\..\\src\\qt\\forms\\openuridialog.ui\" />\n-    <None Include=\"..\\..\\src\\qt\\forms\\optionsdialog.ui\" />\n-    <None Include=\"..\\..\\src\\qt\\forms\\overviewpage.ui\" />\n-    <None Include=\"..\\..\\src\\qt\\formseceivecoinsdialog.ui\" />\n-    <None Include=\"..\\..\\src\\qt\\formseceiverequestdialog.ui\" />\n-    <None Include=\"..\\..\\src\\qt\\forms\\sendcoinsdialog.ui\" />\n-    <None Include=\"..\\..\\src\\qt\\forms\\sendcoinsentry.ui\" />\n-    <None Include=\"..\\..\\src\\qt\\forms\\signverifymessagedialog.ui\" />\n-    <None Include=\"..\\..\\src\\qt\\forms\\transactiondescdialog.ui\" />\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_af.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_af_ZA.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_ar.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_be_BY.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_bg.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_bg_BG.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_ca%40valencia.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_ca.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_ca_ES.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_cs.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_cy.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_da.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_de.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_el.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_el_GR.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_en.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_en_GB.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_eo.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_es.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_es_AR.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_es_CL.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_es_CO.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_es_DO.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_es_ES.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_es_MX.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_es_UY.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_es_VE.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_et.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_et_EE.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_eu_ES.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_fa.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_fa_IR.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_fi.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_fr.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_fr_CA.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_fr_FR.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_gl.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_he.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_hi_IN.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_hr.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_hu.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_id_ID.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_it.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_it_IT.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_ja.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_ka.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_kk_KZ.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_ko_KR.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_ku_IQ.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_ky.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_la.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_lt.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_lv_LV.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_mk_MK.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_mn.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_ms_MY.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_nb.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_ne.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_nl.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_pam.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_pl.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_pt_BR.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_pt_PT.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_ro.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_ro_RO.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_ru.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_ru_RU.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_sk.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_sl_SI.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_sq.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_sr%40latin.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_sr.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_sv.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_ta.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_th_TH.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_tr.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_tr_TR.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_uk.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_ur_PK.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_uz%40Cyrl.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_vi.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_vi_VN.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_zh.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_zh_CN.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_zh_HK.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qt\\locale\\bitcoin_zh_TW.ts\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <CustomBuild Include=\"..\\..\\src\\qt\\paymentrequest.proto\">\n-      <FileType>Document</FileType>\n-      <Command>F:\\Dependencies\\protobuf-cpp-3.4.1\\protobuf-3.4.1\\cmake\\build\\vs\\Debug\\protoc.exe --proto_path=%(RootDir)%(Directory) %(Fullpath) --cpp_out=.\\GeneratedFiles</Command>\n-      <Message>ProtoBuf source generation %(RootDir)%(Directory) %(Filename)</Message>\n-      <Outputs>.\\GeneratedFiles\\%(Filename).pb.h;.\\GeneratedFiles\\(%Filename).pb.cc</Outputs>\n-      <AdditionalInputs>F:\\Dependencies\\protobuf-cpp-3.4.1\\protobuf-3.4.1\\cmake\\build\\vs\\Debug\\protoc.exe</AdditionalInputs>\n-      <LinkObjects>false</LinkObjects>\n-      <Command Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">F:\\deps\\protobuf\\protobuf-3.4.1\\cmake\\build\\vs\\Debug\\protoc.exe --proto_path=%(RootDir)%(Directory) %(Fullpath) --cpp_out=.\\GeneratedFiles</Command>\n-      <AdditionalInputs Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">F:\\deps\\protobuf\\protobuf-3.4.1\\cmake\\build\\vs\\Debug\\protoc.exe</AdditionalInputs>\n-    </CustomBuild>\n-    <None Include=\"..\\..\\src\\qt\\macdockiconhandler.mm\" />\n-    <None Include=\"..\\..\\src\\qt\\macnotificationhandler.mm\" />\n-    <None Include=\"..\\..\\src\\qtes\\icons\\bitcoin.icns\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qtes\\src\\bitcoin.svg\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qtes\\src\\clock_0.svg\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qtes\\src\\clock_1.svg\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qtes\\src\\clock_2.svg\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qtes\\src\\clock_3.svg\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qtes\\src\\clock_4.svg\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qtes\\src\\connect-0.svg\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qtes\\src\\connect-1.svg\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qtes\\src\\connect-2.svg\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qtes\\src\\connect-3.svg\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qtes\\src\\connect-4.svg\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qtes\\src\\hd_disabled.svg\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qtes\\src\\hd_enabled.svg\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qtes\\src\\mine.svg\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qtes\\src\\network_disabled.svg\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qtes\\src\\qt.svg\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qtes\\src\\transaction0.svg\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qtes\\src\\tx_in.svg\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qtes\\src\\tx_inout.svg\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"..\\..\\src\\qtes\\src\\verify.svg\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </None>\n-    <None Include=\"GeneratedFiles\\bitcoin.moc\" />\n-    <None Include=\"GeneratedFiles\\bitcoinamountfield.moc\" />\n-    <None Include=\"GeneratedFiles\\intro.moc\" />\n-    <None Include=\"GeneratedFiles\\overviewpage.moc\" />\n-    <None Include=\"GeneratedFilespcconsole.moc\" />\n-  </ItemGroup>\n-  <ItemGroup>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\about.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\about_qt.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\add.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\address-book.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\bitcoin.ico\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\bitcoin.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\bitcoin_testnet.ico\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\chevron.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\clock1.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\clock2.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\clock3.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\clock4.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\clock5.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\configure.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\connect0.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\connect1.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\connect2.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\connect3.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\connect4.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\debugwindow.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\edit.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\editcopy.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\editpaste.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\export.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\eye.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\eye_minus.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\eye_plus.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\filesave.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\fontbigger.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\fontsmaller.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\hd_disabled.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\hd_enabled.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\history.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\info.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\key.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\lock_closed.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\lock_open.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\network_disabled.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\open.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\overview.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\quit.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\iconseceive.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\iconsemove.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\send.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\synced.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\transaction0.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\transaction2.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\transaction_abandoned.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\transaction_conflicted.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\tx_inout.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\tx_input.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\tx_mined.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\tx_output.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\verify.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\icons\\warning.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-000.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-001.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-002.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-003.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-004.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-005.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-006.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-007.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-008.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-009.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-010.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-011.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-012.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-013.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-014.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-015.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-016.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-017.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-018.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-019.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-020.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-021.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-022.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-023.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-024.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-025.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-026.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-027.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-028.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-029.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-030.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-031.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-032.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-033.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-034.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\movies\\spinner-035.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-    <Image Include=\"..\\..\\src\\qtes\\src\\spinner.png\">\n-      <DeploymentContent>true</DeploymentContent>\n-    </Image>\n-  </ItemGroup>\n-  <ItemGroup>\n-    <ClCompile Include=\"GeneratedFiles\\qrc_bitcoin.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\qrc_bitcoin_locale.cpp\" />\n-    <CustomBuild Include=\"..\\..\\src\\qt\\bitcoin.cpp\">\n-      <Command>\"$(QTDIR)\\bin\\moc.exe\" \"%(Fullpath)\" -o .\\GeneratedFiles\\%(Filename).moc $(MOC_DEF)</Command>\n-      <Message>Qt moc generation for %(Identity)</Message>\n-      <Outputs>.\\GeneratedFiles\\%(Filename).moc</Outputs>\n-      <AdditionalInputs>(QTDIR)\\bin\\moc.exe</AdditionalInputs>\n-    </CustomBuild>\n-    <CustomBuild Include=\"..\\..\\src\\qt\\bitcoinamountfield.cpp\">\n-      <Command>\"$(QTDIR)\\bin\\moc.exe\" \"%(Fullpath)\" -o .\\GeneratedFiles\\%(Filename).moc $(MOC_DEF)</Command>\n-      <Message>Qt moc generation for %(Identity)</Message>\n-      <Outputs>.\\GeneratedFiles\\%(Filename).moc</Outputs>\n-      <AdditionalInputs>(QTDIR)\\bin\\moc.exe</AdditionalInputs>\n-    </CustomBuild>\n-    <CustomBuild Include=\"..\\..\\src\\qt\\intro.cpp\">\n-      <Command>\"$(QTDIR)\\bin\\moc.exe\" \"%(Fullpath)\" -o .\\GeneratedFiles\\%(Filename).moc $(MOC_DEF)</Command>\n-      <Message>Qt moc generation for %(Identity)</Message>\n-      <Outputs>.\\GeneratedFiles\\%(Filename).moc</Outputs>\n-      <AdditionalInputs>(QTDIR)\\bin\\moc.exe</AdditionalInputs>\n-    </CustomBuild>\n-    <CustomBuild Include=\"..\\..\\src\\qt\\overviewpage.cpp\">\n-      <Command>\"$(QTDIR)\\bin\\moc.exe\" \"%(Fullpath)\" -o .\\GeneratedFiles\\%(Filename).moc $(MOC_DEF)</Command>\n-      <Message>Qt moc generation for %(Identity)</Message>\n-      <Outputs>.\\GeneratedFiles\\%(Filename).moc</Outputs>\n-      <AdditionalInputs>(QTDIR)\\bin\\moc.exe</AdditionalInputs>\n-    </CustomBuild>\n-    <CustomBuild Include=\"..\\..\\src\\qtpcconsole.cpp\">\n-      <Command>\"$(QTDIR)\\bin\\moc.exe\" \"%(Fullpath)\" -o .\\GeneratedFiles\\%(Filename).moc $(MOC_DEF)</Command>\n-      <Message>Qt moc generation for %(Identity)</Message>\n-      <Outputs>.\\GeneratedFiles\\%(Filename).moc</Outputs>\n-      <AdditionalInputs>(QTDIR)\\bin\\moc.exe</AdditionalInputs>\n-    </CustomBuild>\n-    <ClCompile Include=\"GeneratedFiles\\moc_addressbookpage.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_addresstablemodel.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_askpassphrasedialog.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_bantablemodel.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_bitcoinaddressvalidator.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_bitcoinamountfield.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_bitcoingui.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_bitcoinunits.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_callback.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_clientmodel.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_coincontroldialog.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_coincontroltreewidget.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_csvmodelwriter.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_editaddressdialog.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_guiconstants.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_guiutil.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_intro.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_macdockiconhandler.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_macnotificationhandler.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_modaloverlay.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_networkstyle.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_notificator.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_openuridialog.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_optionsdialog.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_optionsmodel.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_overviewpage.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_paymentrequestplus.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_paymentserver.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_peertablemodel.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_platformstyle.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_qvalidatedlineedit.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_qvaluecombobox.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_receivecoinsdialog.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_receiverequestdialog.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_recentrequeststablemodel.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_rpcconsole.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_sendcoinsdialog.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_sendcoinsentry.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_signverifymessagedialog.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_splashscreen.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_trafficgraphwidget.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_transactiondesc.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_transactiondescdialog.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_transactionfilterproxy.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_transactionrecord.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_transactiontablemodel.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_transactionview.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_utilitydialog.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_walletframe.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_walletmodel.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_walletmodeltransaction.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_walletview.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\moc_winshutdownmonitor.cpp\" />\n-    <ClCompile Include=\"GeneratedFiles\\paymentrequest.pb.cc\" />\n-  </ItemGroup>\n-  <ItemGroup>\n-    <ClInclude Include=\"GeneratedFiles\\paymentrequest.pb.h\" />\n-    <ClInclude Include=\"GeneratedFiles\\ui_addressbookpage.h\" />\n-    <ClInclude Include=\"GeneratedFiles\\ui_askpassphrasedialog.h\" />\n-    <ClInclude Include=\"GeneratedFiles\\ui_coincontroldialog.h\" />\n-    <ClInclude Include=\"GeneratedFiles\\ui_debugwindow.h\" />\n-    <ClInclude Include=\"GeneratedFiles\\ui_editaddressdialog.h\" />\n-    <ClInclude Include=\"GeneratedFiles\\ui_helpmessagedialog.h\" />\n-    <ClInclude Include=\"GeneratedFiles\\ui_intro.h\" />\n-    <ClInclude Include=\"GeneratedFiles\\ui_modaloverlay.h\" />\n-    <ClInclude Include=\"GeneratedFiles\\ui_openuridialog.h\" />\n-    <ClInclude Include=\"GeneratedFiles\\ui_optionsdialog.h\" />\n-    <ClInclude Include=\"GeneratedFiles\\ui_overviewpage.h\" />\n-    <ClInclude Include=\"GeneratedFiles\\ui_receivecoinsdialog.h\" />\n-    <ClInclude Include=\"GeneratedFiles\\ui_receiverequestdialog.h\" />\n-    <ClInclude Include=\"GeneratedFiles\\ui_sendcoinsdialog.h\" />\n-    <ClInclude Include=\"GeneratedFiles\\ui_sendcoinsentry.h\" />\n-    <ClInclude Include=\"GeneratedFiles\\ui_signverifymessagedialog.h\" />\n-    <ClInclude Include=\"GeneratedFiles\\ui_transactiondescdialog.h\" />\n-  </ItemGroup>\n-  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.Default.props\" />\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\" Label=\"Configuration\">\n-    <ConfigurationType>StaticLibrary</ConfigurationType>\n-    <UseDebugLibraries>true</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\" Label=\"Configuration\">\n-    <ConfigurationType>StaticLibrary</ConfigurationType>\n-    <UseDebugLibraries>false</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <WholeProgramOptimization>true</WholeProgramOptimization>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\" Label=\"Configuration\">\n-    <ConfigurationType>StaticLibrary</ConfigurationType>\n-    <UseDebugLibraries>true</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\" Label=\"Configuration\">\n-    <ConfigurationType>StaticLibrary</ConfigurationType>\n-    <UseDebugLibraries>false</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <WholeProgramOptimization>true</WholeProgramOptimization>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n-  <ImportGroup Label=\"ExtensionSettings\">\n-  </ImportGroup>\n-  <ImportGroup Label=\"Shared\">\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <PropertyGroup Label=\"UserMacros\" />\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <LinkIncremental>false</LinkIncremental>\n-    <Linkage-protobuf>static</Linkage-protobuf>\n-    <CustomBuildBeforeTargets>ClCompile</CustomBuildBeforeTargets>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <LinkIncremental>true</LinkIncremental>\n-    <Linkage-protobuf>static</Linkage-protobuf>\n-    <CustomBuildBeforeTargets>ClCompile</CustomBuildBeforeTargets>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <LinkIncremental>true</LinkIncremental>\n-    <Linkage-protobuf>static</Linkage-protobuf>\n-    <CustomBuildBeforeTargets>ClCompile</CustomBuildBeforeTargets>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <LinkIncremental>false</LinkIncremental>\n-    <Linkage-protobuf>static</Linkage-protobuf>\n-    <CustomBuildBeforeTargets>ClCompile</CustomBuildBeforeTargets>\n-  </PropertyGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>Disabled</Optimization>\n-      <FunctionLevelLinking>true</FunctionLevelLinking>\n-      <IntrinsicFunctions>false</IntrinsicFunctions>\n-      <PreprocessorDefinitions>_X86_;WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>.\\GeneratedFiles;..\\..\\src;..\\..\\src\\univalue\\include;.\\QtGenerated\\mocheaders</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n-      <OptimizeReferences>true</OptimizeReferences>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>Disabled</Optimization>\n-      <PreprocessorDefinitions>_X86_;WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>.\\GeneratedFiles;..\\..\\src;..\\..\\src\\univalue\\include;.\\QtGenerated\\mocheaders</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>Disabled</Optimization>\n-      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>.\\GeneratedFiles;..\\..\\src;..\\..\\src\\univalue\\include;.\\QtGenerated\\mocheaders</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>MaxSpeed</Optimization>\n-      <FunctionLevelLinking>true</FunctionLevelLinking>\n-      <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>.\\GeneratedFiles;..\\..\\src;..\\..\\src\\univalue\\include;.\\QtGenerated\\mocheaders</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n-      <OptimizeReferences>true</OptimizeReferences>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <Import Label=\"configTarget\" Project=\"..\\common.vcxproj\" />\n-  <Target Name=\"QtHeadersMocCodeGeneration\" BeforeTargets=\"PrepareForBuild\">\n-    <PropertyGroup>\n-      <ErrorText>There was an error executing the Qt headers moc code generation tasks.</ErrorText>\n-    </PropertyGroup>\n-    <ItemGroup>\n-      <QtMocHeaderFiles Include=\"..\\..\\src\\qt\\*.h\" />\n-    </ItemGroup>\n-    <Exec Command=\"$(QTDIR)\\bin\\moc.exe &quot;%(QtMocHeaderFiles.Identity)&quot; -o .\\GeneratedFiles\\moc_%(Filename).cpp $(MOC_DEF)\" />\n-  </Target>\n-  <Target Name=\"QtFormsCodeGeneration\" BeforeTargets=\"PrepareForBuild\">\n-    <PropertyGroup>\n-      <ErrorText>There was an error executing the Qt forms code generation tasks.</ErrorText>\n-    </PropertyGroup>\n-    <ItemGroup>\n-      <QtFormFiles Include=\"..\\..\\src\\qt\\forms\\*.ui\" />\n-    </ItemGroup>\n-    <Exec Command=\"$(QTDIR)\\bin\\uic.exe &quot;%(QtFormFiles.Identity)&quot; -o .\\GeneratedFiles\\ui_%(Filename).h\" />\n-  </Target>\n-  <Target Name=\"QtLocaleCodeGeneration\" BeforeTargets=\"PrepareForBuild\">\n-    <PropertyGroup>\n-      <ErrorText>There was an error executing the Qt local code generation tasks.</ErrorText>\n-    </PropertyGroup>\n-    <ItemGroup>\n-      <QtLocaleFiles Include=\"..\\..\\src\\qt\\locale\\*.ts\" />\n-    </ItemGroup>\n-    <Exec Command=\"$(QTDIR)\\bin\\lrelease.exe &quot;%(QtLocaleFiles.Identity)&quot; -qm ..\\..\\src\\qt\\locale\\%(Filename).qm\" />\n-  </Target>\n-  <ImportGroup Label=\"ExtensionTargets\">\n-    <!--<Import Label=\"berkleyDbTarget\" Project=\"f:\\deps\\db-4.8.30\\db.targets\" />\n-    <Import Label=\"opensslTarget\" Project=\"f:\\deps\\openssl\\1.0.2\\openssl.targets\" />\n-    <Import Label=\"qtTarget\" Project=\"F:\\deps\\qt\\5.9.2-git-ssl\\vc141-x86elease\\qt.targets\" />\n-    <Import Label=\"protobufTarget\" Project=\"f:\\deps\\protobuf\\protobuf.targets\" />-->\n-  </ImportGroup>\n-  <ProjectExtensions>\n-    <VisualStudio>\n-      <UserProperties MocDir=\".\\GeneratedFiles\" UicDir=\".\\GeneratedFiles\" RccDir=\".\\GeneratedFiles\" lupdateOptions=\"\" lupdateOnBuild=\"0\" lreleaseOptions=\"\" Qt5Version_x0020_Win32=\"5.9.1_vs140_x86\" Qt5Version_x0020_x64=\"5.9.1_vs140_x86\" MocOptions=\"DUNICODE -DWIN32 -DQT_DLL -DQT_CORE_LIB -DQT_GUI_LIB -DQT_WIDGETS_LIB &quot;-I.\\GeneratedFiles&quot; &quot;-I.&quot; &quot;-I$(QTDIR)\\include&quot; &quot;-I$(QTDIR)\\include\\QtCore&quot; &quot;-I$(QTDIR)\\include\\QtGui&quot; &quot;-I$(QTDIR)\\include\\QtWidgets&quot;\" />\n-    </VisualStudio>\n-  </ProjectExtensions>\n-</Project>"
      },
      {
        "sha": "0a165d0b75ea9d338c9e5aeeb12b4129deeb0299",
        "filename": "build_msvc/libbitcoin_server/libbitcoin_server.vcxproj.in",
        "status": "removed",
        "additions": 0,
        "deletions": 172,
        "changes": 172,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/build_msvc/libbitcoin_server/libbitcoin_server.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/build_msvc/libbitcoin_server/libbitcoin_server.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_server/libbitcoin_server.vcxproj.in?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "patch": "@@ -1,172 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"utf-8\"?>\n-<Project DefaultTargets=\"Build\" ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n-  <Import Label=\"configInitTarget\" Project=\"..\\common.init.vcxproj\" />\n-  <ItemGroup Label=\"ProjectConfigurations\">\n-    <ProjectConfiguration Include=\"Debug|Win32\">\n-      <Configuration>Debug</Configuration>\n-      <Platform>Win32</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Release|Win32\">\n-      <Configuration>Release</Configuration>\n-      <Platform>Win32</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Debug|x64\">\n-      <Configuration>Debug</Configuration>\n-      <Platform>x64</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Release|x64\">\n-      <Configuration>Release</Configuration>\n-      <Platform>x64</Platform>\n-    </ProjectConfiguration>\n-  </ItemGroup>\n-  <PropertyGroup Label=\"Globals\">\n-    <VCProjectVersion>15.0</VCProjectVersion>\n-    <ProjectGuid>{460FEE33-1FE1-483F-B3BF-931FF8E969A5}</ProjectGuid>\n-    <Keyword>Win32Proj</Keyword>\n-    <RootNamespace>libbitcoin_server</RootNamespace>\n-    <VcpkgTriplet Condition=\"'$(Platform)'=='Win32'\">x86-windows-static</VcpkgTriplet>\n-    <VcpkgTriplet Condition=\"'$(Platform)'=='x64'\">x64-windows-static</VcpkgTriplet>\n-  </PropertyGroup>\n-  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.Default.props\" />\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\" Label=\"Configuration\">\n-    <ConfigurationType>StaticLibrary</ConfigurationType>\n-    <UseDebugLibraries>true</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\" Label=\"Configuration\">\n-    <ConfigurationType>StaticLibrary</ConfigurationType>\n-    <UseDebugLibraries>false</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <WholeProgramOptimization>true</WholeProgramOptimization>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\" Label=\"Configuration\">\n-    <ConfigurationType>StaticLibrary</ConfigurationType>\n-    <UseDebugLibraries>true</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\" Label=\"Configuration\">\n-    <ConfigurationType>StaticLibrary</ConfigurationType>\n-    <UseDebugLibraries>false</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <WholeProgramOptimization>true</WholeProgramOptimization>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n-  <ImportGroup Label=\"ExtensionSettings\">\n-  </ImportGroup>\n-  <ImportGroup Label=\"Shared\">\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <PropertyGroup Label=\"UserMacros\" />\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <LinkIncremental>true</LinkIncremental>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <LinkIncremental>true</LinkIncremental>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <LinkIncremental>false</LinkIncremental>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <LinkIncremental>false</LinkIncremental>\n-  </PropertyGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>Disabled</Optimization>\n-      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>Disabled</Optimization>\n-      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n-      <SuppressStartupBanner>false</SuppressStartupBanner>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>MaxSpeed</Optimization>\n-      <FunctionLevelLinking>true</FunctionLevelLinking>\n-      <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n-      <OptimizeReferences>true</OptimizeReferences>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>MaxSpeed</Optimization>\n-      <FunctionLevelLinking>true</FunctionLevelLinking>\n-      <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n-      <OptimizeReferences>true</OptimizeReferences>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemGroup>\n-    <ClCompile Include=\"..\\..\\src\\rpc\\net.cpp\">\n-      <ObjectFileName Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">$(IntDir)\\netrpc.obj</ObjectFileName>\n-      <ObjectFileName Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">$(IntDir)\\netrpc.obj</ObjectFileName>\n-      <ObjectFileName Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">$(IntDir)\\netrpc.obj</ObjectFileName>\n-      <ObjectFileName Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">$(IntDir)\\netrpc.obj</ObjectFileName>\n-    </ClCompile>\n-@SOURCE_FILES@\n-  </ItemGroup>\n-  <ItemGroup>\n-    <None Include=\"packages.config\" />\n-  </ItemGroup>\n-  <ItemGroup>\n-    <ClInclude Include=\"..\\..\\srcpcegister.h\" />\n-  </ItemGroup>\n-  <Import Label=\"configTarget\" Project=\"..\\common.vcxproj\" />\n-</Project>\n\\ No newline at end of file"
      },
      {
        "sha": "dc17c98e98cfda1a11a4c7d23d989c4ba687f212",
        "filename": "build_msvc/libbitcoin_util/libbitcoin_util.vcxproj.in",
        "status": "removed",
        "additions": 0,
        "deletions": 180,
        "changes": 180,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/build_msvc/libbitcoin_util/libbitcoin_util.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/build_msvc/libbitcoin_util/libbitcoin_util.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_util/libbitcoin_util.vcxproj.in?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "patch": "@@ -1,180 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"utf-8\"?>\n-<Project DefaultTargets=\"Build\" ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n-  <Import Label=\"configInitTarget\" Project=\"..\\common.init.vcxproj\" />\n-  <ItemGroup Label=\"ProjectConfigurations\">\n-    <ProjectConfiguration Include=\"Debug|Win32\">\n-      <Configuration>Debug</Configuration>\n-      <Platform>Win32</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Release|Win32\">\n-      <Configuration>Release</Configuration>\n-      <Platform>Win32</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Debug|x64\">\n-      <Configuration>Debug</Configuration>\n-      <Platform>x64</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Release|x64\">\n-      <Configuration>Release</Configuration>\n-      <Platform>x64</Platform>\n-    </ProjectConfiguration>\n-  </ItemGroup>\n-  <PropertyGroup Label=\"Globals\">\n-    <VCProjectVersion>15.0</VCProjectVersion>\n-    <ProjectGuid>{B53A5535-EE9D-4C6F-9A26-F79EE3BC3754}</ProjectGuid>\n-    <Keyword>Win32Proj</Keyword>\n-    <RootNamespace>libbitcoin_util</RootNamespace>\n-    <ProjectName>libbitcoin_util</ProjectName>\n-    <VcpkgTriplet Condition=\"'$(Platform)'=='Win32'\">x86-windows-static</VcpkgTriplet>\n-    <VcpkgTriplet Condition=\"'$(Platform)'=='x64'\">x64-windows-static</VcpkgTriplet>\n-  </PropertyGroup>\n-  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.Default.props\" />\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\" Label=\"Configuration\">\n-    <ConfigurationType>StaticLibrary</ConfigurationType>\n-    <UseDebugLibraries>true</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\" Label=\"Configuration\">\n-    <ConfigurationType>StaticLibrary</ConfigurationType>\n-    <UseDebugLibraries>false</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <WholeProgramOptimization>true</WholeProgramOptimization>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\" Label=\"Configuration\">\n-    <ConfigurationType>StaticLibrary</ConfigurationType>\n-    <UseDebugLibraries>true</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\" Label=\"Configuration\">\n-    <ConfigurationType>StaticLibrary</ConfigurationType>\n-    <UseDebugLibraries>false</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <WholeProgramOptimization>true</WholeProgramOptimization>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n-  <ImportGroup Label=\"ExtensionSettings\">\n-  </ImportGroup>\n-  <ImportGroup Label=\"Shared\">\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <PropertyGroup Label=\"UserMacros\" />\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <LinkIncremental>true</LinkIncremental>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <LinkIncremental>true</LinkIncremental>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <LinkIncremental>false</LinkIncremental>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <LinkIncremental>false</LinkIncremental>\n-  </PropertyGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>Disabled</Optimization>\n-      <PreprocessorDefinitions>HAVE_CONFIG_H;WIN32;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-      <AdditionalLibraryDirectories>\n-      </AdditionalLibraryDirectories>\n-    </Link>\n-    <ProjectReference>\n-      <LinkLibraryDependencies>false</LinkLibraryDependencies>\n-    </ProjectReference>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>Disabled</Optimization>\n-      <PreprocessorDefinitions>HAVE_CONFIG_H;WIN32;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-      <AdditionalLibraryDirectories>\n-      </AdditionalLibraryDirectories>\n-    </Link>\n-    <ProjectReference>\n-      <LinkLibraryDependencies>false</LinkLibraryDependencies>\n-    </ProjectReference>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>MaxSpeed</Optimization>\n-      <FunctionLevelLinking>true</FunctionLevelLinking>\n-      <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>HAVE_CONFIG_H;WIN32;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n-      <OptimizeReferences>true</OptimizeReferences>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-      <AdditionalLibraryDirectories>\n-      </AdditionalLibraryDirectories>\n-    </Link>\n-    <ProjectReference>\n-      <LinkLibraryDependencies>false</LinkLibraryDependencies>\n-    </ProjectReference>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>MaxSpeed</Optimization>\n-      <FunctionLevelLinking>true</FunctionLevelLinking>\n-      <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>HAVE_CONFIG_H;WIN32;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n-      <OptimizeReferences>true</OptimizeReferences>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-      <AdditionalLibraryDirectories>\n-      </AdditionalLibraryDirectories>\n-    </Link>\n-    <ProjectReference>\n-      <LinkLibraryDependencies>false</LinkLibraryDependencies>\n-    </ProjectReference>\n-  </ItemDefinitionGroup>\n-  <ItemGroup>\n-@SOURCE_FILES@\n-  </ItemGroup>\n-  <Import Label=\"configTarget\" Project=\"..\\common.vcxproj\" />\n-</Project>"
      },
      {
        "sha": "1bb7be6f7f9c711e7db5633bcd73c8f1e6fdcae8",
        "filename": "build_msvc/libbitcoin_wallet/libbitcoin_wallet.vcxproj.in",
        "status": "removed",
        "additions": 0,
        "deletions": 166,
        "changes": 166,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/build_msvc/libbitcoin_wallet/libbitcoin_wallet.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/build_msvc/libbitcoin_wallet/libbitcoin_wallet.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_wallet/libbitcoin_wallet.vcxproj.in?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "patch": "@@ -1,166 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"utf-8\"?>\n-<Project DefaultTargets=\"Build\" ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n-  <Import Label=\"configInitTarget\" Project=\"..\\common.init.vcxproj\" />\n-  <ItemGroup Label=\"ProjectConfigurations\">\n-    <ProjectConfiguration Include=\"Debug|Win32\">\n-      <Configuration>Debug</Configuration>\n-      <Platform>Win32</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Release|Win32\">\n-      <Configuration>Release</Configuration>\n-      <Platform>Win32</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Debug|x64\">\n-      <Configuration>Debug</Configuration>\n-      <Platform>x64</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Release|x64\">\n-      <Configuration>Release</Configuration>\n-      <Platform>x64</Platform>\n-    </ProjectConfiguration>\n-  </ItemGroup>\n-  <ItemGroup>\n-@SOURCE_FILES@\n-  </ItemGroup>\n-  <ItemGroup>\n-    <None Include=\"packages.config\" />\n-  </ItemGroup>\n-  <PropertyGroup Label=\"Globals\">\n-    <VCProjectVersion>15.0</VCProjectVersion>\n-    <ProjectGuid>{93B86837-B543-48A5-A89B-7C87ABB77DF2}</ProjectGuid>\n-    <Keyword>Win32Proj</Keyword>\n-    <RootNamespace>libbitcoin_wallet</RootNamespace>\n-    <VcpkgTriplet Condition=\"'$(Platform)'=='Win32'\">x86-windows-static</VcpkgTriplet>\n-    <VcpkgTriplet Condition=\"'$(Platform)'=='x64'\">x64-windows-static</VcpkgTriplet>\n-  </PropertyGroup>\n-  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.Default.props\" />\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\" Label=\"Configuration\">\n-    <ConfigurationType>StaticLibrary</ConfigurationType>\n-    <UseDebugLibraries>true</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\" Label=\"Configuration\">\n-    <ConfigurationType>StaticLibrary</ConfigurationType>\n-    <UseDebugLibraries>false</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <WholeProgramOptimization>true</WholeProgramOptimization>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\" Label=\"Configuration\">\n-    <ConfigurationType>StaticLibrary</ConfigurationType>\n-    <UseDebugLibraries>true</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\" Label=\"Configuration\">\n-    <ConfigurationType>StaticLibrary</ConfigurationType>\n-    <UseDebugLibraries>false</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <WholeProgramOptimization>true</WholeProgramOptimization>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n-  <ImportGroup Label=\"ExtensionSettings\">\n-  </ImportGroup>\n-  <ImportGroup Label=\"Shared\">\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <PropertyGroup Label=\"UserMacros\" />\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <LinkIncremental>true</LinkIncremental>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <LinkIncremental>true</LinkIncremental>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <LinkIncremental>false</LinkIncremental>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <LinkIncremental>false</LinkIncremental>\n-  </PropertyGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>Disabled</Optimization>\n-      <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\wallet;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n-      <AdditionalOptions>/bigobj %(AdditionalOptions)</AdditionalOptions>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>Disabled</Optimization>\n-      <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\wallet;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n-      <AdditionalOptions>/bigobj %(AdditionalOptions)</AdditionalOptions>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>MaxSpeed</Optimization>\n-      <FunctionLevelLinking>true</FunctionLevelLinking>\n-      <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\wallet;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n-      <AdditionalOptions>/bigobj %(AdditionalOptions)</AdditionalOptions>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n-      <OptimizeReferences>true</OptimizeReferences>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>MaxSpeed</Optimization>\n-      <FunctionLevelLinking>true</FunctionLevelLinking>\n-      <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\wallet;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n-      <AdditionalOptions>/bigobj %(AdditionalOptions)</AdditionalOptions>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n-      <OptimizeReferences>true</OptimizeReferences>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <Import Label=\"configTarget\" Project=\"..\\common.vcxproj\" />\n-</Project>"
      },
      {
        "sha": "e396c1ad0c11bd8a43fff35361bf9b75e80d53d5",
        "filename": "build_msvc/libbitcoin_zmq/libbitcoin_zmq.vcxproj.in",
        "status": "removed",
        "additions": 0,
        "deletions": 166,
        "changes": 166,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/build_msvc/libbitcoin_zmq/libbitcoin_zmq.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/build_msvc/libbitcoin_zmq/libbitcoin_zmq.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_zmq/libbitcoin_zmq.vcxproj.in?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "patch": "@@ -1,166 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"utf-8\"?>\n-<Project DefaultTargets=\"Build\" ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n-  <Import Label=\"configInitTarget\" Project=\"..\\common.init.vcxproj\" />\n-  <ItemGroup Label=\"ProjectConfigurations\">\n-    <ProjectConfiguration Include=\"Debug|Win32\">\n-      <Configuration>Debug</Configuration>\n-      <Platform>Win32</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Release|Win32\">\n-      <Configuration>Release</Configuration>\n-      <Platform>Win32</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Debug|x64\">\n-      <Configuration>Debug</Configuration>\n-      <Platform>x64</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Release|x64\">\n-      <Configuration>Release</Configuration>\n-      <Platform>x64</Platform>\n-    </ProjectConfiguration>\n-  </ItemGroup>\n-  <ItemGroup>\n-@SOURCE_FILES@\n-  </ItemGroup>\n-  <ItemGroup>\n-    <None Include=\"packages.config\" />\n-  </ItemGroup>\n-  <PropertyGroup Label=\"Globals\">\n-    <VCProjectVersion>15.0</VCProjectVersion>\n-    <ProjectGuid>{792D487F-F14C-49FC-A9DE-3FC150F31C3F}</ProjectGuid>\n-    <Keyword>Win32Proj</Keyword>\n-    <RootNamespace>libbitcoin_zmq</RootNamespace>\n-    <VcpkgTriplet Condition=\"'$(Platform)'=='Win32'\">x86-windows-static</VcpkgTriplet>\n-    <VcpkgTriplet Condition=\"'$(Platform)'=='x64'\">x64-windows-static</VcpkgTriplet>\n-  </PropertyGroup>\n-  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.Default.props\" />\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\" Label=\"Configuration\">\n-    <ConfigurationType>StaticLibrary</ConfigurationType>\n-    <UseDebugLibraries>true</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\" Label=\"Configuration\">\n-    <ConfigurationType>StaticLibrary</ConfigurationType>\n-    <UseDebugLibraries>false</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <WholeProgramOptimization>true</WholeProgramOptimization>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\" Label=\"Configuration\">\n-    <ConfigurationType>StaticLibrary</ConfigurationType>\n-    <UseDebugLibraries>true</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\" Label=\"Configuration\">\n-    <ConfigurationType>StaticLibrary</ConfigurationType>\n-    <UseDebugLibraries>false</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <WholeProgramOptimization>true</WholeProgramOptimization>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n-  <ImportGroup Label=\"ExtensionSettings\">\n-  </ImportGroup>\n-  <ImportGroup Label=\"Shared\">\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <PropertyGroup Label=\"UserMacros\" />\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <LinkIncremental>true</LinkIncremental>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <LinkIncremental>true</LinkIncremental>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <LinkIncremental>false</LinkIncremental>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <LinkIncremental>false</LinkIncremental>\n-  </PropertyGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>Disabled</Optimization>\n-      <PreprocessorDefinitions>NOMINMAX;ZMQ_STATIC;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n-      <SuppressStartupBanner>false</SuppressStartupBanner>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>Disabled</Optimization>\n-      <PreprocessorDefinitions>NOMINMAX;ZMQ_STATIC;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n-      <SuppressStartupBanner>false</SuppressStartupBanner>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>MaxSpeed</Optimization>\n-      <FunctionLevelLinking>true</FunctionLevelLinking>\n-      <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>NOMINMAX;ZMQ_STATIC;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n-      <SuppressStartupBanner>false</SuppressStartupBanner>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n-      <OptimizeReferences>true</OptimizeReferences>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>MaxSpeed</Optimization>\n-      <FunctionLevelLinking>true</FunctionLevelLinking>\n-      <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>NOMINMAX;ZMQ_STATIC;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n-      <SuppressStartupBanner>false</SuppressStartupBanner>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n-      <OptimizeReferences>true</OptimizeReferences>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <Import Label=\"configTarget\" Project=\"..\\common.vcxproj\" />\n-</Project>"
      },
      {
        "sha": "2c6c0a8b7c59397147b997dbc15f4bc2f9445e6c",
        "filename": "build_msvc/libbitcoinconsensus/libbitcoinconsensus.vcxproj",
        "status": "removed",
        "additions": 0,
        "deletions": 199,
        "changes": 199,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/build_msvc/libbitcoinconsensus/libbitcoinconsensus.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/build_msvc/libbitcoinconsensus/libbitcoinconsensus.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoinconsensus/libbitcoinconsensus.vcxproj?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "patch": "@@ -1,199 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"utf-8\"?>\n-<Project DefaultTargets=\"Build\" ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n-  <Import Label=\"configInitTarget\" Project=\"..\\common.init.vcxproj\" />\n-  <ItemGroup Label=\"ProjectConfigurations\">\n-    <ProjectConfiguration Include=\"Debug|Win32\">\n-      <Configuration>Debug</Configuration>\n-      <Platform>Win32</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Release|Win32\">\n-      <Configuration>Release</Configuration>\n-      <Platform>Win32</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Debug|x64\">\n-      <Configuration>Debug</Configuration>\n-      <Platform>x64</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Release|x64\">\n-      <Configuration>Release</Configuration>\n-      <Platform>x64</Platform>\n-    </ProjectConfiguration>\n-  </ItemGroup>\n-  <ItemGroup>\n-    <ClCompile Include=\"..\\..\\src\\arith_uint256.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\consensus\\merkle.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\crypto\\aes.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\crypto\\chacha20.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\crypto\\hmac_sha256.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\crypto\\hmac_sha512.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\crypto\\ripemd160.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\crypto\\sha1.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\crypto\\sha256.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\crypto\\sha256_sse4.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\crypto\\sha512.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\hash.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\primitives\\block.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\primitives\\transaction.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\pubkey.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\script\\bitcoinconsensus.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\script\\interpreter.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\script\\script.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\script\\script_error.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\uint256.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\util\\strencodings.cpp\" />\n-  </ItemGroup>\n-  <ItemGroup>\n-    <None Include=\"packages.config\" />\n-  </ItemGroup>\n-  <PropertyGroup Label=\"Globals\">\n-    <VCProjectVersion>15.0</VCProjectVersion>\n-    <ProjectGuid>{2B384FA8-9EE1-4544-93CB-0D733C25E8CE}</ProjectGuid>\n-    <Keyword>Win32Proj</Keyword>\n-    <RootNamespace>bitcoind</RootNamespace>\n-    <ProjectName>libbitcoin_consensus</ProjectName>\n-    <VcpkgTriplet Condition=\"'$(Platform)'=='Win32'\">x86-windows-static</VcpkgTriplet>\n-    <VcpkgTriplet Condition=\"'$(Platform)'=='x64'\">x64-windows-static</VcpkgTriplet>\n-  </PropertyGroup>\n-  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.Default.props\" />\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\" Label=\"Configuration\">\n-    <ConfigurationType>StaticLibrary</ConfigurationType>\n-    <UseDebugLibraries>true</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\" Label=\"Configuration\">\n-    <ConfigurationType>StaticLibrary</ConfigurationType>\n-    <UseDebugLibraries>false</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <WholeProgramOptimization>true</WholeProgramOptimization>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\" Label=\"Configuration\">\n-    <ConfigurationType>StaticLibrary</ConfigurationType>\n-    <UseDebugLibraries>true</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\" Label=\"Configuration\">\n-    <ConfigurationType>StaticLibrary</ConfigurationType>\n-    <UseDebugLibraries>false</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <WholeProgramOptimization>true</WholeProgramOptimization>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n-  <ImportGroup Label=\"ExtensionSettings\">\n-  </ImportGroup>\n-  <ImportGroup Label=\"Shared\">\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <PropertyGroup Label=\"UserMacros\" />\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <LinkIncremental>true</LinkIncremental>\n-    <Linkage-secp256k1>\n-    </Linkage-secp256k1>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <LinkIncremental>true</LinkIncremental>\n-    <Linkage-secp256k1>\n-    </Linkage-secp256k1>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <LinkIncremental>true</LinkIncremental>\n-    <Linkage-secp256k1>\n-    </Linkage-secp256k1>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <LinkIncremental>true</LinkIncremental>\n-    <Linkage-secp256k1>\n-    </Linkage-secp256k1>\n-  </PropertyGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>Disabled</Optimization>\n-      <PreprocessorDefinitions>WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>false</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;</AdditionalIncludeDirectories>\n-      <ExceptionHandling>Sync</ExceptionHandling>\n-      <SuppressStartupBanner>false</SuppressStartupBanner>\n-      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>Disabled</Optimization>\n-      <PreprocessorDefinitions>WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>false</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;</AdditionalIncludeDirectories>\n-      <ExceptionHandling>Sync</ExceptionHandling>\n-      <SuppressStartupBanner>false</SuppressStartupBanner>\n-      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>MaxSpeed</Optimization>\n-      <FunctionLevelLinking>true</FunctionLevelLinking>\n-      <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>false</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;</AdditionalIncludeDirectories>\n-      <ExceptionHandling>Sync</ExceptionHandling>\n-      <SuppressStartupBanner>false</SuppressStartupBanner>\n-      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n-      <OptimizeReferences>true</OptimizeReferences>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>MaxSpeed</Optimization>\n-      <FunctionLevelLinking>true</FunctionLevelLinking>\n-      <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>false</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;</AdditionalIncludeDirectories>\n-      <ExceptionHandling>Sync</ExceptionHandling>\n-      <SuppressStartupBanner>false</SuppressStartupBanner>\n-      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n-      <OptimizeReferences>true</OptimizeReferences>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <Import Label=\"configTarget\" Project=\"..\\common.vcxproj\" />\n-</Project>\n\\ No newline at end of file"
      },
      {
        "sha": "57d469debf0d1b19f7f4373a620d38c61212ab3b",
        "filename": "build_msvc/libunivalue/libunivalue.vcxproj",
        "status": "removed",
        "additions": 0,
        "deletions": 160,
        "changes": 160,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/build_msvc/libunivalue/libunivalue.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/build_msvc/libunivalue/libunivalue.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libunivalue/libunivalue.vcxproj?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "patch": "@@ -1,160 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"utf-8\"?>\n-<Project DefaultTargets=\"Build\" ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n-  <Import Label=\"configInitTarget\" Project=\"..\\common.init.vcxproj\" />\n-  <ItemGroup Label=\"ProjectConfigurations\">\n-    <ProjectConfiguration Include=\"Debug|Win32\">\n-      <Configuration>Debug</Configuration>\n-      <Platform>Win32</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Release|Win32\">\n-      <Configuration>Release</Configuration>\n-      <Platform>Win32</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Debug|x64\">\n-      <Configuration>Debug</Configuration>\n-      <Platform>x64</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Release|x64\">\n-      <Configuration>Release</Configuration>\n-      <Platform>x64</Platform>\n-    </ProjectConfiguration>\n-  </ItemGroup>\n-  <ItemGroup>\n-    <ClCompile Include=\"..\\..\\src\\univalue\\lib\\univalue.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\univalue\\lib\\univalue_get.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\univalue\\lib\\univalue_read.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\univalue\\lib\\univalue_write.cpp\" />\n-  </ItemGroup>\n-  <PropertyGroup Label=\"Globals\">\n-    <VCProjectVersion>15.0</VCProjectVersion>\n-    <ProjectGuid>{5724BA7D-A09A-4BA8-800B-C4C1561B3D69}</ProjectGuid>\n-    <Keyword>Win32Proj</Keyword>\n-    <RootNamespace>libunivalue</RootNamespace>\n-  </PropertyGroup>\n-  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.Default.props\" />\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\" Label=\"Configuration\">\n-    <ConfigurationType>StaticLibrary</ConfigurationType>\n-    <UseDebugLibraries>true</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\" Label=\"Configuration\">\n-    <ConfigurationType>StaticLibrary</ConfigurationType>\n-    <UseDebugLibraries>false</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <WholeProgramOptimization>true</WholeProgramOptimization>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\" Label=\"Configuration\">\n-    <ConfigurationType>StaticLibrary</ConfigurationType>\n-    <UseDebugLibraries>true</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\" Label=\"Configuration\">\n-    <ConfigurationType>StaticLibrary</ConfigurationType>\n-    <UseDebugLibraries>false</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <WholeProgramOptimization>true</WholeProgramOptimization>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n-  <ImportGroup Label=\"ExtensionSettings\">\n-  </ImportGroup>\n-  <ImportGroup Label=\"Shared\">\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <PropertyGroup Label=\"UserMacros\" />\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <LinkIncremental>true</LinkIncremental>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <LinkIncremental>true</LinkIncremental>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <LinkIncremental>false</LinkIncremental>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <LinkIncremental>false</LinkIncremental>\n-  </PropertyGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>Disabled</Optimization>\n-      <PreprocessorDefinitions>WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>Disabled</Optimization>\n-      <PreprocessorDefinitions>_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>MaxSpeed</Optimization>\n-      <FunctionLevelLinking>true</FunctionLevelLinking>\n-      <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n-      <OptimizeReferences>true</OptimizeReferences>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>MaxSpeed</Optimization>\n-      <FunctionLevelLinking>true</FunctionLevelLinking>\n-      <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src\\univalue\\include;</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n-      <OptimizeReferences>true</OptimizeReferences>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <Import Label=\"configTarget\" Project=\"..\\common.vcxproj\" />\n-</Project>"
      },
      {
        "sha": "12868a987418158684c5aa5dd6eceef6b7116ba3",
        "filename": "build_msvc/msbuild/tasks/hexdump.targets",
        "status": "removed",
        "additions": 0,
        "deletions": 53,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/build_msvc/msbuild/tasks/hexdump.targets",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/build_msvc/msbuild/tasks/hexdump.targets",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/msbuild/tasks/hexdump.targets?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "patch": "@@ -1,53 +0,0 @@\n-<Project ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n-  <UsingTask\n-    TaskName=\"HeaderFromHexdump\"\n-    TaskFactory=\"CodeTaskFactory\"\n-    AssemblyFile=\"$(MSBuildToolsPath)\\Microsoft.Build.Tasks.Core.dll\" >\n-    <ParameterGroup>\n-        <RawFilePath Required=\"true\" />\n-        <HeaderFilePath Required=\"true\" />\n-        <SourceHeader Required=\"true\" />\n-        <SourceFooter Required=\"true\" />\n-    </ParameterGroup>\n-    <Task>\n-      <Using Namespace=\"System\"/>\n-      <Using Namespace=\"System.IO\"/>\n-      <Code Type=\"Fragment\" Language=\"cs\">\n-<![CDATA[\n-Log.LogMessage(\"msbuild inline hexdump task for \" + RawFilePath + \".\");\n-if(File.Exists(RawFilePath) == false) {\n-    Log.LogError(\"hexdump task could not locate \" + RawFilePath + \".\");\n-}\n-else {\n-    FileInfo inFileInfo = new FileInfo(RawFilePath);\n-    FileInfo outFileInfo = new FileInfo(HeaderFilePath);\n-\n-    if (outFileInfo.Exists == false || inFileInfo.LastWriteTime > outFileInfo.LastWriteTime)\n-    {\n-      using (Stream inStm = File.OpenRead(RawFilePath))\n-      {\n-          using (StreamWriter sw = new StreamWriter(HeaderFilePath))\n-          {\n-              sw.WriteLine(SourceHeader);\n-              int count = 0;\n-              int rawChar = inStm.ReadByte();\n-              while(rawChar != -1)\n-              {\n-                  sw.Write(\"0x{0:x2}, \", rawChar);\n-                  count++;\n-                  if(count % 8 == 0)\n-                  {\n-                      sw.WriteLine();\n-                  }\n-                  rawChar = inStm.ReadByte();\n-              }\n-              sw.WriteLine(SourceFooter);\n-          }\n-      }\n-   }\n-}\n-]]>\n-      </Code>\n-    </Task>\n-  </UsingTask>\n-</Project>\n\\ No newline at end of file"
      },
      {
        "sha": "f351532f9d40ff10c7692b3090fae58f459295c9",
        "filename": "build_msvc/msvc-autogen.py",
        "status": "removed",
        "additions": 0,
        "deletions": 63,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/build_msvc/msvc-autogen.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/build_msvc/msvc-autogen.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/msvc-autogen.py?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "patch": "@@ -1,63 +0,0 @@\n-#!/usr/bin/env python3\n-\n-import os\n-import re\n-\n-SOURCE_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'src'))\n-\n-libs = [\n-    'libbitcoin_cli',\n-    'libbitcoin_common',\n-    'libbitcoin_crypto',\n-    'libbitcoin_server',\n-    'libbitcoin_util',\n-    'libbitcoin_wallet',\n-    'libbitcoin_zmq',\n-]\n-\n-ignore_list = [\n-]\n-\n-lib_sources = {}\n-\n-\n-def parse_makefile(makefile):\n-    with open(makefile, 'r', encoding='utf-8') as file:\n-        current_lib = ''\n-        for line in file.read().splitlines():\n-            if current_lib:\n-                source = line.split()[0]\n-                if source.endswith('.cpp') and not source.startswith('$') and source not in ignore_list:\n-                    source_filename = source.replace('/', '\\\\')\n-                    object_filename = source.replace('/', '_')[:-4] + \".obj\"\n-                    lib_sources[current_lib].append((source_filename, object_filename))\n-                if not line.endswith('\\\\'):\n-                    current_lib = ''\n-                continue\n-            for lib in libs:\n-                _lib = lib.replace('-', '_')\n-                if re.search(_lib + '.*_SOURCES \\\\= \\\\\\\\', line):\n-                    current_lib = lib\n-                    lib_sources[current_lib] = []\n-                    break\n-\n-\n-def main():\n-    for makefile_name in os.listdir(SOURCE_DIR):\n-        if 'Makefile' in makefile_name:\n-            parse_makefile(os.path.join(SOURCE_DIR, makefile_name))\n-    for key, value in lib_sources.items():\n-        vcxproj_filename = os.path.abspath(os.path.join(os.path.dirname(__file__), key, key + '.vcxproj'))\n-        content = ''\n-        for source_filename, object_filename in value:\n-            content += '    <ClCompile Include=\"..\\\\..\\\\src\\\\' + source_filename + '\">\\n'\n-            content += '      <ObjectFileName>$(IntDir)' + object_filename + '</ObjectFileName>\\n'\n-            content += '    </ClCompile>\\n'\n-        with open(vcxproj_filename + '.in', 'r', encoding='utf-8') as vcxproj_in_file:\n-            with open(vcxproj_filename, 'w', encoding='utf-8') as vcxproj_file:\n-                vcxproj_file.write(vcxproj_in_file.read().replace(\n-                    '@SOURCE_FILES@\\n', content))\n-\n-\n-if __name__ == '__main__':\n-    main()"
      },
      {
        "sha": "b2d4c118f32120a133636330b02ba443ee94af3a",
        "filename": "build_msvc/test_bitcoin-qt/test_bitcoin-qt.vcxproj",
        "status": "removed",
        "additions": 0,
        "deletions": 146,
        "changes": 146,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/build_msvc/test_bitcoin-qt/test_bitcoin-qt.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/build_msvc/test_bitcoin-qt/test_bitcoin-qt.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/test_bitcoin-qt/test_bitcoin-qt.vcxproj?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "patch": "@@ -1,146 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"utf-8\"?>\n-<Project DefaultTargets=\"Build\" ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n-  <Import Label=\"configInitTarget\" Project=\"..\\common.init.vcxproj\" />\n-  <ItemGroup Label=\"ProjectConfigurations\">\n-    <ProjectConfiguration Include=\"Debug|Win32\">\n-      <Configuration>Debug</Configuration>\n-      <Platform>Win32</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Release|Win32\">\n-      <Configuration>Release</Configuration>\n-      <Platform>Win32</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Debug|x64\">\n-      <Configuration>Debug</Configuration>\n-      <Platform>x64</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Release|x64\">\n-      <Configuration>Release</Configuration>\n-      <Platform>x64</Platform>\n-    </ProjectConfiguration>\n-  </ItemGroup>\n-  <PropertyGroup Label=\"Globals\">\n-    <VCProjectVersion>15.0</VCProjectVersion>\n-    <ProjectGuid>{51201D5E-D939-4854-AE9D-008F03FF518E}</ProjectGuid>\n-    <Keyword>Win32Proj</Keyword>\n-    <RootNamespace>test_bitcoinqt</RootNamespace>\n-  </PropertyGroup>\n-  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.Default.props\" />\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\" Label=\"Configuration\">\n-    <ConfigurationType>Application</ConfigurationType>\n-    <UseDebugLibraries>true</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\" Label=\"Configuration\">\n-    <ConfigurationType>Application</ConfigurationType>\n-    <UseDebugLibraries>false</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <WholeProgramOptimization>true</WholeProgramOptimization>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\" Label=\"Configuration\">\n-    <ConfigurationType>Application</ConfigurationType>\n-    <UseDebugLibraries>true</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\" Label=\"Configuration\">\n-    <ConfigurationType>Application</ConfigurationType>\n-    <UseDebugLibraries>false</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <WholeProgramOptimization>true</WholeProgramOptimization>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n-  <ImportGroup Label=\"ExtensionSettings\">\n-  </ImportGroup>\n-  <ImportGroup Label=\"Shared\">\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <PropertyGroup Label=\"UserMacros\" />\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <LinkIncremental>false</LinkIncremental>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <LinkIncremental>true</LinkIncremental>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <LinkIncremental>true</LinkIncremental>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <LinkIncremental>false</LinkIncremental>\n-  </PropertyGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>MaxSpeed</Optimization>\n-      <FunctionLevelLinking>true</FunctionLevelLinking>\n-      <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n-      <OptimizeReferences>true</OptimizeReferences>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>Disabled</Optimization>\n-      <PreprocessorDefinitions>WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>Disabled</Optimization>\n-      <PreprocessorDefinitions>_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>MaxSpeed</Optimization>\n-      <FunctionLevelLinking>true</FunctionLevelLinking>\n-      <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n-      <OptimizeReferences>true</OptimizeReferences>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <Import Label=\"configTarget\" Project=\"..\\common.vcxproj\" />\n-</Project>"
      },
      {
        "sha": "2316e473aa1f50ebfd770e1aef5bdeed3c437850",
        "filename": "build_msvc/test_bitcoin/test_bitcoin.vcxproj",
        "status": "removed",
        "additions": 0,
        "deletions": 207,
        "changes": 207,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/build_msvc/test_bitcoin/test_bitcoin.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/build_msvc/test_bitcoin/test_bitcoin.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/test_bitcoin/test_bitcoin.vcxproj?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "patch": "@@ -1,207 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"utf-8\"?>\n-<Project DefaultTargets=\"Build\" ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n-  <Import Label=\"configInitTarget\" Project=\"..\\common.init.vcxproj\" />\n-  <ItemGroup Label=\"ProjectConfigurations\">\n-    <ProjectConfiguration Include=\"Debug|Win32\">\n-      <Configuration>Debug</Configuration>\n-      <Platform>Win32</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Release|Win32\">\n-      <Configuration>Release</Configuration>\n-      <Platform>Win32</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Debug|x64\">\n-      <Configuration>Debug</Configuration>\n-      <Platform>x64</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Release|x64\">\n-      <Configuration>Release</Configuration>\n-      <Platform>x64</Platform>\n-    </ProjectConfiguration>\n-  </ItemGroup>\n-  <ItemGroup>\n-    <ClCompile Include=\"..\\..\\src\\test\\*_tests.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\wallet\\test\\*_tests.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\test\\test_bitcoin.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\test\\test_bitcoin_main.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\wallet\\test\\*_fixture.cpp\" />\n-  </ItemGroup>\n-  <ItemGroup>\n-    <ProjectReference Include=\"..\\libbitcoinconsensus\\libbitcoinconsensus.vcxproj\">\n-      <Project>{2b384fa8-9ee1-4544-93cb-0d733c25e8ce}</Project>\n-    </ProjectReference>\n-    <ProjectReference Include=\"..\\libbitcoin_cli\\libbitcoin_cli.vcxproj\">\n-      <Project>{0667528c-d734-4009-adf9-c0d6c4a5a5a6}</Project>\n-    </ProjectReference>\n-    <ProjectReference Include=\"..\\libbitcoin_common\\libbitcoin_common.vcxproj\">\n-      <Project>{7c87e378-df58-482e-aa2f-1bc129bc19ce}</Project>\n-    </ProjectReference>\n-    <ProjectReference Include=\"..\\libbitcoin_crypto\\libbitcoin_crypto.vcxproj\">\n-      <Project>{6190199c-6cf4-4dad-bfbd-93fa72a760c1}</Project>\n-    </ProjectReference>\n-    <ProjectReference Include=\"..\\libbitcoin_server\\libbitcoin_server.vcxproj\">\n-      <Project>{460fee33-1fe1-483f-b3bf-931ff8e969a5}</Project>\n-    </ProjectReference>\n-    <ProjectReference Include=\"..\\libbitcoin_util\\libbitcoin_util.vcxproj\">\n-      <Project>{b53a5535-ee9d-4c6f-9a26-f79ee3bc3754}</Project>\n-    </ProjectReference>\n-    <ProjectReference Include=\"..\\libbitcoin_wallet\\libbitcoin_wallet.vcxproj\">\n-      <Project>{93b86837-b543-48a5-a89b-7c87abb77df2}</Project>\n-    </ProjectReference>\n-    <ProjectReference Include=\"..\\libbitcoin_zmq\\libbitcoin_zmq.vcxproj\">\n-      <Project>{792d487f-f14c-49fc-a9de-3fc150f31c3f}</Project>\n-    </ProjectReference>\n-    <ProjectReference Include=\"..\\libunivalue\\libunivalue.vcxproj\">\n-      <Project>{5724ba7d-a09a-4ba8-800b-c4c1561b3d69}</Project>\n-    </ProjectReference>\n-  </ItemGroup>\n-  <PropertyGroup Label=\"Globals\">\n-    <VCProjectVersion>15.0</VCProjectVersion>\n-    <ProjectGuid>{A56B73DB-D46D-4882-8374-1FE3FFA08F07}</ProjectGuid>\n-    <Keyword>Win32Proj</Keyword>\n-    <RootNamespace>test_bitcoin</RootNamespace>\n-    <VcpkgTriplet Condition=\"'$(Platform)'=='Win32'\">x86-windows-static</VcpkgTriplet>\n-    <VcpkgTriplet Condition=\"'$(Platform)'=='x64'\">x64-windows-static</VcpkgTriplet>\n-  </PropertyGroup>\n-  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.Default.props\" />\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\" Label=\"Configuration\">\n-    <ConfigurationType>Application</ConfigurationType>\n-    <UseDebugLibraries>true</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\" Label=\"Configuration\">\n-    <ConfigurationType>Application</ConfigurationType>\n-    <UseDebugLibraries>false</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <WholeProgramOptimization>true</WholeProgramOptimization>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\" Label=\"Configuration\">\n-    <ConfigurationType>Application</ConfigurationType>\n-    <UseDebugLibraries>true</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\" Label=\"Configuration\">\n-    <ConfigurationType>Application</ConfigurationType>\n-    <UseDebugLibraries>false</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <WholeProgramOptimization>true</WholeProgramOptimization>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n-  <ImportGroup Label=\"ExtensionSettings\">\n-  </ImportGroup>\n-  <ImportGroup Label=\"Shared\">\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <PropertyGroup Label=\"UserMacros\" />\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <LinkIncremental>true</LinkIncremental>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <LinkIncremental>true</LinkIncremental>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <LinkIncremental>false</LinkIncremental>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <LinkIncremental>false</LinkIncremental>\n-  </PropertyGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>Disabled</Optimization>\n-      <PreprocessorDefinitions>_CRT_SECURE_NO_WARNINGS;NOMINMAX;WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\test;</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-      <SuppressStartupBanner>false</SuppressStartupBanner>\n-      <AdditionalDependencies>boost_test_exec_monitor-vc140-mt-gd.lib;crypt32.lib;Iphlpapi.lib;ws2_32.lib;Shlwapi.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;odbccp32.lib;%(AdditionalDependencies)</AdditionalDependencies>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>Disabled</Optimization>\n-      <PreprocessorDefinitions>_CRT_SECURE_NO_WARNINGS;NOMINMAX;WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\test;</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-      <AdditionalDependencies>boost_test_exec_monitor-vc140-mt-gd.lib;crypt32.lib;Iphlpapi.lib;ws2_32.lib;Shlwapi.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;odbccp32.lib;%(AdditionalDependencies)</AdditionalDependencies>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>MaxSpeed</Optimization>\n-      <FunctionLevelLinking>true</FunctionLevelLinking>\n-      <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>_CRT_SECURE_NO_WARNINGS;NOMINMAX;WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\test;</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n-      <OptimizeReferences>true</OptimizeReferences>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-      <AdditionalDependencies>boost_test_exec_monitor-vc140-mt.lib;crypt32.lib;Iphlpapi.lib;ws2_32.lib;Shlwapi.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;odbccp32.lib;%(AdditionalDependencies)</AdditionalDependencies>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>MaxSpeed</Optimization>\n-      <FunctionLevelLinking>true</FunctionLevelLinking>\n-      <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>_CRT_SECURE_NO_WARNINGS;NOMINMAX;WIN32;HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\test;</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n-      <OptimizeReferences>true</OptimizeReferences>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-      <AdditionalDependencies>boost_test_exec_monitor-vc140-mt.lib;crypt32.lib;Iphlpapi.lib;ws2_32.lib;Shlwapi.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;odbccp32.lib;%(AdditionalDependencies)</AdditionalDependencies>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <Target Name=\"RawBenchHeaderGen\" BeforeTargets=\"PrepareForBuild\">\n-    <PropertyGroup>\n-      <ErrorText>There was an error executing the JSON test header generation task.</ErrorText>\n-    </PropertyGroup>\n-    <ItemGroup>\n-      <JsonTestFile Include=\"..\\..\\src\\test\\data\\*.json\" />\n-    </ItemGroup>\n-    <HeaderFromHexdump RawFilePath=\"%(JsonTestFile.FullPath)\" HeaderFilePath=\"%(JsonTestFile.FullPath).h\" SourceHeader=\"namespace json_tests{ static unsigned const char %(JsonTestFile.Filename)[] = {\" SourceFooter=\"};}\" />\n-  </Target>\n-  <Import Label=\"configTarget\" Project=\"..\\common.vcxproj\" />\n-  <Import Label=\"hexdumpTarget\" Project=\"..\\msbuild\\tasks\\hexdump.targets\" />\n-</Project>"
      },
      {
        "sha": "0068f588cc8b878c39ba1d039173d5bd1982036a",
        "filename": "build_msvc/testconsensus/testconsensus.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 50,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/build_msvc/testconsensus/testconsensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/build_msvc/testconsensus/testconsensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/testconsensus/testconsensus.cpp?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "patch": "@@ -1,50 +0,0 @@\n-#include <iostream>\n-\n-// bitcoin includes.\n-#include <..\\src\\script\\bitcoinconsensus.h>\n-#include <..\\src\\primitives\\transaction.h>\n-#include <..\\src\\script\\script.h>\n-#include <..\\src\\streams.h>\n-#include <..\\src\\version.h>\n-\n-CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CScriptWitness& scriptWitness, int nValue = 0)\n-{\n-    CMutableTransaction txSpend;\n-    txSpend.nVersion = 1;\n-    txSpend.nLockTime = 0;\n-    txSpend.vin.resize(1);\n-    txSpend.vout.resize(1);\n-    txSpend.vin[0].scriptWitness = scriptWitness;\n-    txSpend.vin[0].prevout.hash = uint256();\n-    txSpend.vin[0].prevout.n = 0;\n-    txSpend.vin[0].scriptSig = scriptSig;\n-    txSpend.vin[0].nSequence = CTxIn::SEQUENCE_FINAL;\n-    txSpend.vout[0].scriptPubKey = CScript();\n-    txSpend.vout[0].nValue = nValue;\n-\n-    return txSpend;\n-}\n-\n-int main()\n-{\n-    std::cout << \"bitcoinconsensus version: \" << bitcoinconsensus_version() << std::endl;\n-\n-    CScript pubKeyScript;\n-    pubKeyScript << OP_1 << OP_0 << OP_1;\n-\n-    int amount = 0; // 600000000;\n-\n-    CScript scriptSig;\n-    CScriptWitness scriptWitness;\n-    CTransaction vanillaSpendTx = BuildSpendingTransaction(scriptSig, scriptWitness, amount);\n-    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n-    stream << vanillaSpendTx;\n-\n-    bitcoinconsensus_error err;\n-    auto op0Result = bitcoinconsensus_verify_script_with_amount(pubKeyScript.data(), pubKeyScript.size(), amount, (const unsigned char*)&stream[0], stream.size(), 0, bitcoinconsensus_SCRIPT_FLAGS_VERIFY_ALL, &err);\n-    std::cout << \"Op0 result: \" << op0Result << \", error code \" << err << std::endl;\n-\n-    getchar();\n-\n-    return 0;\n-}"
      },
      {
        "sha": "d73988df1cb8407c320d99f9ee3571376f3d5bb1",
        "filename": "build_msvc/testconsensus/testconsensus.vcxproj",
        "status": "removed",
        "additions": 0,
        "deletions": 173,
        "changes": 173,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/build_msvc/testconsensus/testconsensus.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/build_msvc/testconsensus/testconsensus.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/testconsensus/testconsensus.vcxproj?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "patch": "@@ -1,173 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"utf-8\"?>\n-<Project DefaultTargets=\"Build\" ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n-  <Import Label=\"configInitTarget\" Project=\"..\\common.init.vcxproj\" />\n-  <ItemGroup Label=\"ProjectConfigurations\">\n-    <ProjectConfiguration Include=\"Debug|Win32\">\n-      <Configuration>Debug</Configuration>\n-      <Platform>Win32</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Release|Win32\">\n-      <Configuration>Release</Configuration>\n-      <Platform>Win32</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Debug|x64\">\n-      <Configuration>Debug</Configuration>\n-      <Platform>x64</Platform>\n-    </ProjectConfiguration>\n-    <ProjectConfiguration Include=\"Release|x64\">\n-      <Configuration>Release</Configuration>\n-      <Platform>x64</Platform>\n-    </ProjectConfiguration>\n-  </ItemGroup>\n-  <PropertyGroup Label=\"Globals\">\n-    <VCProjectVersion>15.0</VCProjectVersion>\n-    <ProjectGuid>{E78473E9-B850-456C-9120-276301E04C06}</ProjectGuid>\n-    <Keyword>Win32Proj</Keyword>\n-    <RootNamespace>testconsensus</RootNamespace>\n-    <ProjectName>test_libbitcoinconsensus</ProjectName>\n-    <VcpkgTriplet Condition=\"'$(Platform)'=='Win32'\">x86-windows-static</VcpkgTriplet>\n-    <VcpkgTriplet Condition=\"'$(Platform)'=='x64'\">x64-windows-static</VcpkgTriplet>\n-  </PropertyGroup>\n-  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.Default.props\" />\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\" Label=\"Configuration\">\n-    <ConfigurationType>Application</ConfigurationType>\n-    <UseDebugLibraries>true</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\" Label=\"Configuration\">\n-    <ConfigurationType>Application</ConfigurationType>\n-    <UseDebugLibraries>false</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <WholeProgramOptimization>true</WholeProgramOptimization>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\" Label=\"Configuration\">\n-    <ConfigurationType>Application</ConfigurationType>\n-    <UseDebugLibraries>true</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\" Label=\"Configuration\">\n-    <ConfigurationType>Application</ConfigurationType>\n-    <UseDebugLibraries>false</UseDebugLibraries>\n-    <PlatformToolset>v141</PlatformToolset>\n-    <WholeProgramOptimization>true</WholeProgramOptimization>\n-    <CharacterSet>Unicode</CharacterSet>\n-  </PropertyGroup>\n-  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n-  <ImportGroup Label=\"ExtensionSettings\">\n-  </ImportGroup>\n-  <ImportGroup Label=\"Shared\">\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <ImportGroup Label=\"PropertySheets\" Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <Import Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\" Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" />\n-  </ImportGroup>\n-  <PropertyGroup Label=\"UserMacros\" />\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <LinkIncremental>true</LinkIncremental>\n-    <Linkage-secp256k1>static</Linkage-secp256k1>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <LinkIncremental>true</LinkIncremental>\n-    <Linkage-secp256k1>static</Linkage-secp256k1>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <LinkIncremental>false</LinkIncremental>\n-    <Linkage-secp256k1>static</Linkage-secp256k1>\n-  </PropertyGroup>\n-  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <LinkIncremental>false</LinkIncremental>\n-  </PropertyGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>Disabled</Optimization>\n-      <PreprocessorDefinitions>HAVE_CONFIG_H;WIN32;_SCL_SECURE_NO_WARNINGS;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src\\;</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>Disabled</Optimization>\n-      <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src\\;</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-      <DataExecutionPrevention>true</DataExecutionPrevention>\n-      <AdditionalDependencies>kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;odbccp32.lib;%(AdditionalDependencies)</AdditionalDependencies>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>MaxSpeed</Optimization>\n-      <FunctionLevelLinking>true</FunctionLevelLinking>\n-      <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>HAVE_CONFIG_H;_SCL_SECURE_NO_WARNINGS;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src\\;</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n-      <OptimizeReferences>true</OptimizeReferences>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n-    <ClCompile>\n-      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <WarningLevel>Level3</WarningLevel>\n-      <Optimization>MaxSpeed</Optimization>\n-      <FunctionLevelLinking>true</FunctionLevelLinking>\n-      <IntrinsicFunctions>true</IntrinsicFunctions>\n-      <PreprocessorDefinitions>HAVE_CONFIG_H;WIN32;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <SDLCheck>true</SDLCheck>\n-      <AdditionalIncludeDirectories>..\\..\\src\\;</AdditionalIncludeDirectories>\n-      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n-    </ClCompile>\n-    <Link>\n-      <SubSystem>Console</SubSystem>\n-      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n-      <OptimizeReferences>true</OptimizeReferences>\n-      <GenerateDebugInformation>true</GenerateDebugInformation>\n-    </Link>\n-  </ItemDefinitionGroup>\n-  <ItemGroup>\n-    <ClCompile Include=\"testconsensus.cpp\" />\n-  </ItemGroup>\n-  <ItemGroup>\n-    <ProjectReference Include=\"..\\libbitcoinconsensus\\libbitcoinconsensus.vcxproj\">\n-      <Project>{2b384fa8-9ee1-4544-93cb-0d733c25e8ce}</Project>\n-    </ProjectReference>\n-    <ProjectReference Include=\"..\\libbitcoin_util\\libbitcoin_util.vcxproj\">\n-      <Project>{b53a5535-ee9d-4c6f-9a26-f79ee3bc3754}</Project>\n-    </ProjectReference>\n-  </ItemGroup>\n-  <Import Label=\"configTarget\" Project=\"..\\common.vcxproj\" />\n-</Project>"
      },
      {
        "sha": "75e5fb5702fdf2a41c4cf83615751c66aeca185c",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 16,
        "deletions": 92,
        "changes": 108,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -1,15 +1,14 @@\n dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n AC_PREREQ([2.60])\n define(_CLIENT_VERSION_MAJOR, 0)\n-define(_CLIENT_VERSION_MINOR, 17)\n-define(_CLIENT_VERSION_REVISION, 99)\n+define(_CLIENT_VERSION_MINOR, 1)\n+define(_CLIENT_VERSION_REVISION, 1)\n define(_CLIENT_VERSION_BUILD, 0)\n-define(_CLIENT_VERSION_RC, 0)\n-define(_CLIENT_VERSION_IS_RELEASE, false)\n+define(_CLIENT_VERSION_IS_RELEASE, true)\n define(_COPYRIGHT_YEAR, 2018)\n define(_COPYRIGHT_HOLDERS,[The %s developers])\n-define(_COPYRIGHT_HOLDERS_SUBSTITUTION,[[Bitcoin Core]])\n-AC_INIT([Bitcoin Core],m4_join([.], _CLIENT_VERSION_MAJOR, _CLIENT_VERSION_MINOR, _CLIENT_VERSION_REVISION, m4_if(_CLIENT_VERSION_BUILD, [0], [], _CLIENT_VERSION_BUILD))m4_if(_CLIENT_VERSION_RC, [0], [], [rc]_CLIENT_VERSION_RC),[https://github.com/bitcoin/bitcoin/issues],[bitcoin],[https://bitcoincore.org/])\n+define(_COPYRIGHT_HOLDERS_SUBSTITUTION,[[BitcoinV Core]])\n+AC_INIT([BitcoinV Core],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[https://github.com/bitcoinVBR/bitcoinV/issues],[bitcoin],[https://bitcoinv.org/])\n AC_CONFIG_SRCDIR([src/validation.cpp])\n AC_CONFIG_HEADERS([src/config/bitcoin-config.h])\n AC_CONFIG_AUX_DIR([build-aux])\n@@ -131,12 +130,6 @@ AC_ARG_ENABLE(gui-tests,\n     [use_gui_tests=$enableval],\n     [use_gui_tests=$use_tests])\n \n-AC_ARG_WITH([rapidcheck],\n-  [AS_HELP_STRING([--with-rapidcheck],\n-  [enable RapidCheck property based tests (default is yes if librapidcheck is found)])],\n-  [use_rapidcheck=$withval],\n-  [use_rapidcheck=auto])\n-\n AC_ARG_ENABLE(bench,\n     AS_HELP_STRING([--disable-bench],[do not compile benchmarks (default is to compile)]),\n     [use_bench=$enableval],\n@@ -210,11 +203,6 @@ AC_ARG_ENABLE([zmq],\n   [disable ZMQ notifications])],\n   [use_zmq=$enableval],\n   [use_zmq=yes])\n-AC_ARG_ENABLE([bip70],\n-  [AS_HELP_STRING([--disable-bip70],\n-  [disable BIP70 (payment protocol) support in GUI (enabled by default)])],\n-  [enable_bip70=$enableval],\n-  [enable_bip70=auto])\n \n AC_ARG_WITH([protoc-bindir],[AS_HELP_STRING([--with-protoc-bindir=BIN_DIR],[specify protoc bin path])], [protoc_bin_path=$withval], [])\n \n@@ -315,7 +303,6 @@ if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n   AX_CHECK_COMPILE_FLAG([-Wformat-security],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wformat-security\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wthread-safety-analysis],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wthread-safety-analysis\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wrange-loop-analysis],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wrange-loop-analysis\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wredundant-decls],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wredundant-decls\"],,[[$CXXFLAG_WERROR]])\n \n   ## Some compilers (gcc) ignore unknown -Wno-* options, but warn about all\n   ## unknown options if any other warning is produced. Test the -Wfoo case, and\n@@ -412,18 +399,6 @@ AC_ARG_WITH([utils],\n   [build_bitcoin_utils=$withval],\n   [build_bitcoin_utils=yes])\n \n-AC_ARG_ENABLE([util-cli],\n-  [AS_HELP_STRING([--enable-util-cli],\n-  [build bitcoin-cli])],\n-  [build_bitcoin_cli=$enableval],\n-  [build_bitcoin_cli=$build_bitcoin_utils])\n-\n-AC_ARG_ENABLE([util-tx],\n-  [AS_HELP_STRING([--enable-util-tx],\n-  [build bitcoin-tx])],\n-  [build_bitcoin_tx=$enableval],\n-  [build_bitcoin_tx=$build_bitcoin_utils])\n-\n AC_ARG_WITH([libs],\n   [AS_HELP_STRING([--with-libs],\n   [build libraries (default=yes)])],\n@@ -751,10 +726,6 @@ fi\n \n AC_CHECK_HEADERS([endian.h sys/endian.h byteswap.h stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h sys/select.h sys/prctl.h])\n \n-AC_CHECK_DECLS([getifaddrs, freeifaddrs],,,\n-    [#include <sys/types.h>\n-    #include <ifaddrs.h>]\n-)\n AC_CHECK_DECLS([strnlen])\n \n # Check for daemon(3), unrelated to --with-daemon (although used by it)\n@@ -904,7 +875,7 @@ BITCOIN_QT_INIT\n dnl sets $bitcoin_enable_qt, $bitcoin_enable_qt_test, $bitcoin_enable_qt_dbus\n BITCOIN_QT_CONFIGURE([$use_pkgconfig])\n \n-if test x$build_bitcoin_cli$build_bitcoin_tx$build_bitcoind$bitcoin_enable_qt$use_tests$use_bench = xnononononono; then\n+if test x$build_bitcoin_utils$build_bitcoind$bitcoin_enable_qt$use_tests$use_bench = xnonononono; then\n     use_boost=no\n else\n     use_boost=yes\n@@ -1088,13 +1059,11 @@ if test x$use_pkgconfig = xyes; then\n     [\n       PKG_CHECK_MODULES([SSL], [libssl],, [AC_MSG_ERROR(openssl not found.)])\n       PKG_CHECK_MODULES([CRYPTO], [libcrypto],,[AC_MSG_ERROR(libcrypto not found.)])\n-      if test x$enable_bip70 != xno; then\n-        BITCOIN_QT_CHECK([PKG_CHECK_MODULES([PROTOBUF], [protobuf], [have_protobuf=yes], [have_protobuf=no])])\n-      fi\n+      BITCOIN_QT_CHECK([PKG_CHECK_MODULES([PROTOBUF], [protobuf], [have_protobuf=yes], [BITCOIN_QT_FAIL(libprotobuf not found)])])\n       if test x$use_qr != xno; then\n         BITCOIN_QT_CHECK([PKG_CHECK_MODULES([QR], [libqrencode], [have_qrencode=yes], [have_qrencode=no])])\n       fi\n-      if test x$build_bitcoin_cli$build_bitcoin_tx$build_bitcoind$bitcoin_enable_qt$use_tests != xnonononono; then\n+      if test x$build_bitcoin_utils$build_bitcoind$bitcoin_enable_qt$use_tests != xnononono; then\n         PKG_CHECK_MODULES([EVENT], [libevent],, [AC_MSG_ERROR(libevent not found.)])\n         if test x$TARGET_OS != xwindows; then\n           PKG_CHECK_MODULES([EVENT_PTHREADS], [libevent_pthreads],, [AC_MSG_ERROR(libevent_pthreads not found.)])\n@@ -1119,7 +1088,7 @@ else\n   AC_CHECK_HEADER([openssl/ssl.h],, AC_MSG_ERROR(libssl headers missing),)\n   AC_CHECK_LIB([ssl],         [main],SSL_LIBS=-lssl, AC_MSG_ERROR(libssl missing))\n \n-  if test x$build_bitcoin_cli$build_bitcoin_tx$build_bitcoind$bitcoin_enable_qt$use_tests != xnonononono; then\n+  if test x$build_bitcoin_utils$build_bitcoind$bitcoin_enable_qt$use_tests != xnononono; then\n     AC_CHECK_HEADER([event2/event.h],, AC_MSG_ERROR(libevent headers missing),)\n     AC_CHECK_LIB([event],[main],EVENT_LIBS=-levent,AC_MSG_ERROR(libevent missing))\n     if test x$TARGET_OS != xwindows; then\n@@ -1150,9 +1119,7 @@ else\n     esac\n   fi\n \n-  if test x$enable_bip70 != xno; then\n-    BITCOIN_QT_CHECK(AC_CHECK_LIB([protobuf] ,[main],[PROTOBUF_LIBS=-lprotobuf], [have_protobuf=no]))\n-  fi\n+  BITCOIN_QT_CHECK(AC_CHECK_LIB([protobuf] ,[main],[PROTOBUF_LIBS=-lprotobuf], BITCOIN_QT_FAIL(libprotobuf not found)))\n   if test x$use_qr != xno; then\n     BITCOIN_QT_CHECK([AC_CHECK_LIB([qrencode], [main],[QR_LIBS=-lqrencode], [have_qrencode=no])])\n     BITCOIN_QT_CHECK([AC_CHECK_HEADER([qrencode.h],, have_qrencode=no)])\n@@ -1166,27 +1133,11 @@ AC_CHECK_DECLS([EVP_MD_CTX_new],,,[AC_INCLUDES_DEFAULT\n ])\n CXXFLAGS=\"${save_CXXFLAGS}\"\n \n-dnl RapidCheck Property Based Testing\n-\n-enable_property_tests=no\n-if test \"x$use_rapidcheck\" = xauto; then\n-    AC_CHECK_HEADERS([rapidcheck.h], [enable_property_tests=yes])\n-elif test \"x$use_rapidcheck\" != xno; then\n-    enable_property_tests=yes\n-fi\n-\n-RAPIDCHECK_LIBS=\n-if test \"x$enable_property_tests\" = xyes; then\n-   RAPIDCHECK_LIBS=-lrapidcheck\n-fi\n-AC_SUBST(RAPIDCHECK_LIBS)\n-AM_CONDITIONAL([ENABLE_PROPERTY_TESTS], [test x$enable_property_tests = xyes])\n-\n dnl univalue check\n \n need_bundled_univalue=yes\n \n-if test x$build_bitcoin_cli$build_bitcoin_tx$build_bitcoind$bitcoin_enable_qt$use_tests$use_bench = xnononononono; then\n+if test x$build_bitcoin_utils$build_bitcoind$bitcoin_enable_qt$use_tests$use_bench = xnonononono; then\n   need_bundled_univalue=no\n else\n \n@@ -1230,23 +1181,15 @@ AM_CONDITIONAL([EMBEDDED_UNIVALUE],[test x$need_bundled_univalue = xyes])\n AC_SUBST(UNIVALUE_CFLAGS)\n AC_SUBST(UNIVALUE_LIBS)\n \n-\n-if test x$have_protobuf != xno &&\n-   test x$enable_bip70 != xno; then\n-  BITCOIN_QT_PATH_PROGS([PROTOC], [protoc],$protoc_bin_path)\n-fi\n+BITCOIN_QT_PATH_PROGS([PROTOC], [protoc],$protoc_bin_path)\n \n AC_MSG_CHECKING([whether to build bitcoind])\n AM_CONDITIONAL([BUILD_BITCOIND], [test x$build_bitcoind = xyes])\n AC_MSG_RESULT($build_bitcoind)\n \n-AC_MSG_CHECKING([whether to build bitcoin-cli])\n-AM_CONDITIONAL([BUILD_BITCOIN_CLI], [test x$build_bitcoin_cli = xyes])\n-AC_MSG_RESULT($build_bitcoin_cli)\n-\n-AC_MSG_CHECKING([whether to build bitcoin-tx])\n-AM_CONDITIONAL([BUILD_BITCOIN_TX], [test x$build_bitcoin_tx = xyes])\n-AC_MSG_RESULT($build_bitcoin_tx)\n+AC_MSG_CHECKING([whether to build utils (bitcoin-cli bitcoin-tx)])\n+AM_CONDITIONAL([BUILD_BITCOIN_UTILS], [test x$build_bitcoin_utils = xyes])\n+AC_MSG_RESULT($build_bitcoin_utils)\n \n AC_MSG_CHECKING([whether to build libraries])\n AM_CONDITIONAL([BUILD_BITCOIN_LIBS], [test x$build_bitcoin_libs = xyes])\n@@ -1352,23 +1295,6 @@ if test x$bitcoin_enable_qt != xno; then\n   else\n     AC_MSG_RESULT([no])\n   fi\n-\n-  AC_MSG_CHECKING([whether to build BIP70 support])\n-  if test x$have_protobuf = xno; then\n-    if test x$enable_bip70 = xyes; then\n-      AC_MSG_ERROR(protobuf missing)\n-    fi\n-    enable_bip70=no\n-    AC_MSG_RESULT(no)\n-  else\n-    if test x$enable_bip70 != xno; then\n-      AC_DEFINE([ENABLE_BIP70],[1],[Define if BIP70 support should be compiled in])\n-      enable_bip70=yes\n-      AC_MSG_RESULT([yes])\n-    else\n-      AC_MSG_RESULT([no])\n-    fi\n-  fi\n fi\n \n AM_CONDITIONAL([ENABLE_ZMQ], [test \"x$use_zmq\" = \"xyes\"])\n@@ -1389,7 +1315,7 @@ else\n   AC_MSG_RESULT([no])\n fi\n \n-if test x$build_bitcoin_cli$build_bitcoin_tx$build_bitcoin_libs$build_bitcoind$bitcoin_enable_qt$use_bench$use_tests = xnonononononono; then\n+if test x$build_bitcoin_utils$build_bitcoin_libs$build_bitcoind$bitcoin_enable_qt$use_bench$use_tests = xnononononono; then\n   AC_MSG_ERROR([No targets! Please specify at least one of: --with-utils --with-libs --with-daemon --with-gui --enable-bench or --enable-tests])\n fi\n \n@@ -1400,7 +1326,6 @@ AM_CONDITIONAL([ENABLE_WALLET],[test x$enable_wallet = xyes])\n AM_CONDITIONAL([ENABLE_TESTS],[test x$BUILD_TEST = xyes])\n AM_CONDITIONAL([ENABLE_QT],[test x$bitcoin_enable_qt = xyes])\n AM_CONDITIONAL([ENABLE_QT_TESTS],[test x$BUILD_TEST_QT = xyes])\n-AM_CONDITIONAL([ENABLE_BIP70],[test x$enable_bip70 = xyes])\n AM_CONDITIONAL([ENABLE_BENCH],[test x$use_bench = xyes])\n AM_CONDITIONAL([USE_QRCODE], [test x$use_qr = xyes])\n AM_CONDITIONAL([USE_LCOV],[test x$use_lcov = xyes])\n@@ -1535,7 +1460,6 @@ echo \"Options used to compile and link:\"\n echo \"  with wallet   = $enable_wallet\"\n echo \"  with gui / qt = $bitcoin_enable_qt\"\n if test x$bitcoin_enable_qt != xno; then\n-    echo \"    with bip70  = $enable_bip70\"\n     echo \"    with qr     = $use_qr\"\n fi\n echo \"  with zmq      = $use_zmq\""
      },
      {
        "sha": "21cca7d9acfe4b8458b2946fbb04fd35d367a032",
        "filename": "contrib/debian/copyright",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/debian/copyright",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/debian/copyright",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/copyright?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -96,7 +96,7 @@ Comment: Site: https://bitcointalk.org/?topic=1756.0\n Files: src/qt/res/icons/proxy.png\n        src/qt/res/src/proxy.svg\n Copyright: Cristian Mircea Messel\n-License: public-domain\n+Licese: public-domain\n \n \n License: Expat"
      },
      {
        "sha": "77e845a9b4976c2ae1f7438e734b9bb9bad9fa49",
        "filename": "contrib/devtools/clang-format-diff.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/devtools/clang-format-diff.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/devtools/clang-format-diff.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/clang-format-diff.py?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -109,7 +109,7 @@ def main():\n     match = re.search('^\\+\\+\\+\\ (.*?/){%s}(\\S*)' % args.p, line)\n     if match:\n       filename = match.group(2)\n-    if filename is None:\n+    if filename == None:\n       continue\n \n     if args.regex is not None:"
      },
      {
        "sha": "c5fcddea043d558e4ef9052fa1fc433f813599fb",
        "filename": "contrib/devtools/copyright_header.py",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/devtools/copyright_header.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/devtools/copyright_header.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/copyright_header.py?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -15,32 +15,35 @@\n ################################################################################\n \n EXCLUDE = [\n+    # libsecp256k1:\n+    'src/secp256k1/include/secp256k1.h',\n+    'src/secp256k1/include/secp256k1_ecdh.h',\n+    'src/secp256k1/include/secp256k1_recovery.h',\n+    'src/secp256k1/include/secp256k1_schnorr.h',\n+    'src/secp256k1/src/java/org_bitcoin_NativeSecp256k1.c',\n+    'src/secp256k1/src/java/org_bitcoin_NativeSecp256k1.h',\n+    'src/secp256k1/src/java/org_bitcoin_Secp256k1Context.c',\n+    'src/secp256k1/src/java/org_bitcoin_Secp256k1Context.h',\n+    # univalue:\n+    'src/univalue/test/object.cpp',\n+    'src/univalue/lib/univalue_escapes.h',\n     # auto generated:\n     'src/qt/bitcoinstrings.cpp',\n     'src/chainparamsseeds.h',\n     # other external copyrights:\n     'src/tinyformat.h',\n+    'src/leveldb/util/env_win.cc',\n+    'src/crypto/ctaes/bench.c',\n     'test/functional/test_framework/bignum.py',\n     # python init:\n     '*__init__.py',\n ]\n EXCLUDE_COMPILED = re.compile('|'.join([fnmatch.translate(m) for m in EXCLUDE]))\n \n-EXCLUDE_DIRS = [\n-    # git subtrees\n-    \"src/crypto/ctaes/\",\n-    \"src/leveldb/\",\n-    \"src/secp256k1/\",\n-    \"src/univalue/\",\n-]\n-\n INCLUDE = ['*.h', '*.cpp', '*.cc', '*.c', '*.py']\n INCLUDE_COMPILED = re.compile('|'.join([fnmatch.translate(m) for m in INCLUDE]))\n \n def applies_to_file(filename):\n-    for excluded_dir in EXCLUDE_DIRS:\n-        if filename.startswith(excluded_dir):\n-            return False\n     return ((EXCLUDE_COMPILED.match(filename) is None) and\n             (INCLUDE_COMPILED.match(filename) is not None))\n \n@@ -78,7 +81,7 @@ def get_filenames_to_examine():\n ANY_COPYRIGHT_COMPILED = re.compile(ANY_COPYRIGHT_STYLE_OR_YEAR_STYLE)\n \n def compile_copyright_regex(copyright_style, year_style, name):\n-    return re.compile('%s %s,? %s' % (copyright_style, year_style, name))\n+    return re.compile('%s %s %s' % (copyright_style, year_style, name))\n \n EXPECTED_HOLDER_NAMES = [\n     \"Satoshi Nakamoto\\n\",\n@@ -104,9 +107,6 @@ def compile_copyright_regex(copyright_style, year_style, name):\n     \"Jan-Klaas Kollhof\\n\",\n     \"Sam Rushing\\n\",\n     \"ArtForz -- public domain half-a-node\\n\",\n-    \"Intel Corporation\",\n-    \"The Zcash developers\",\n-    \"Jeremy Rubin\",\n ]\n \n DOMINANT_STYLE_COMPILED = {}\n@@ -491,7 +491,7 @@ def get_git_change_year_range(filename):\n \n def file_already_has_core_copyright(file_lines):\n     index, _ = get_updatable_copyright_line(file_lines)\n-    return index is not None\n+    return index != None\n \n ################################################################################\n # insert header execution"
      },
      {
        "sha": "4e90f85f5033db4c6e9ec23204a66e9c62398491",
        "filename": "contrib/devtools/github-merge.py",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/devtools/github-merge.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/devtools/github-merge.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/github-merge.py?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -14,6 +14,7 @@\n \n # In case of a clean merge that is accepted by the user, the local branch with\n # name $BRANCH is overwritten with the merged result, and optionally pushed.\n+from __future__ import division,print_function,unicode_literals\n import os\n from sys import stdin,stdout,stderr\n import argparse\n@@ -22,7 +23,10 @@\n import sys\n import json\n import codecs\n-from urllib.request import Request, urlopen\n+try:\n+    from urllib.request import Request,urlopen\n+except:\n+    from urllib2 import Request,urlopen\n \n # External tools (can be overridden using environment)\n GIT = os.getenv('GIT','git')"
      },
      {
        "sha": "8b1f41f7e127a1bed803e15d5dce0c98c489cf21",
        "filename": "contrib/devtools/optimize-pngs.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/devtools/optimize-pngs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/devtools/optimize-pngs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/optimize-pngs.py?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -27,7 +27,7 @@ def content_hash(filename):\n pngcrush = 'pngcrush'\n git = 'git'\n folders = [\"src/qt/res/movies\", \"src/qt/res/icons\", \"share/pixmaps\"]\n-basePath = subprocess.check_output([git, 'rev-parse', '--show-toplevel'], universal_newlines=True, encoding='utf8').rstrip('\\n')\n+basePath = subprocess.check_output([git, 'rev-parse', '--show-toplevel'], universal_newlines=True).rstrip('\\n')\n totalSaveBytes = 0\n noHashChange = True\n \n@@ -50,7 +50,7 @@ def content_hash(filename):\n                 sys.exit(0)\n \n             #verify\n-            if \"Not a PNG file\" in subprocess.check_output([pngcrush, \"-n\", \"-v\", file_path], stderr=subprocess.STDOUT, universal_newlines=True, encoding='utf8'):\n+            if \"Not a PNG file\" in subprocess.check_output([pngcrush, \"-n\", \"-v\", file_path], stderr=subprocess.STDOUT, universal_newlines=True):\n                 print(\"PNG file \"+file+\" is corrupted after crushing, check out pngcursh version\")\n                 sys.exit(1)\n "
      },
      {
        "sha": "57af1c10663708a8d4acb4e65771ebc2874c1a13",
        "filename": "contrib/devtools/security-check.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/devtools/security-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/devtools/security-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/security-check.py?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -86,7 +86,7 @@ def check_ELF_RELRO(executable):\n         # This does not affect security: the permission flags of the GNU_RELRO program header are ignored, the PT_LOAD header determines the effective permissions.\n         # However, the dynamic linker need to write to this area so these are RW.\n         # Glibc itself takes care of mprotecting this area R after relocations are finished.\n-        # See also https://marc.info/?l=binutils&m=1498883354122353\n+        # See also http://permalink.gmane.org/gmane.comp.gnu.binutils/71347\n         if typ == 'GNU_RELRO':\n             have_gnu_relro = True\n "
      },
      {
        "sha": "6808e77da7314dcf17dec669e93594bc41c09f43",
        "filename": "contrib/devtools/symbol-check.py",
        "status": "modified",
        "additions": 17,
        "deletions": 31,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/devtools/symbol-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/devtools/symbol-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/symbol-check.py?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -36,18 +36,17 @@\n #   (glibc)    GLIBC_2_11\n #\n MAX_VERSIONS = {\n-'GCC':       (4,4,0),\n-'CXXABI':    (1,3,3),\n-'GLIBCXX':   (3,4,13),\n-'GLIBC':     (2,11),\n-'LIBATOMIC': (1,0)\n+'GCC':     (4,4,0),\n+'CXXABI':  (1,3,3),\n+'GLIBCXX': (3,4,13),\n+'GLIBC':   (2,11)\n }\n # See here for a description of _IO_stdin_used:\n # https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=634261#109\n \n # Ignore symbols that are exported as part of every executable\n IGNORE_EXPORTS = {\n-'_edata', '_end', '__end__', '_init', '__bss_start', '__bss_start__', '_bss_end__', '__bss_end__', '_fini', '_IO_stdin_used', 'stdin', 'stdout', 'stderr'\n+'_edata', '_end', '_init', '__bss_start', '_fini', '_IO_stdin_used', 'stdin', 'stdout', 'stderr'\n }\n READELF_CMD = os.getenv('READELF', '/usr/bin/readelf')\n CPPFILT_CMD = os.getenv('CPPFILT', '/usr/bin/c++filt')\n@@ -60,12 +59,8 @@\n 'libanl.so.1', # DNS resolve\n 'libm.so.6', # math library\n 'librt.so.1', # real-time (clock)\n-'libatomic.so.1',\n 'ld-linux-x86-64.so.2', # 64-bit dynamic linker\n 'ld-linux.so.2', # 32-bit dynamic linker\n-'ld-linux-aarch64.so.1', # 64-bit ARM dynamic linker\n-'ld-linux-armhf.so.3', # 32-bit ARM dynamic linker\n-'ld-linux-riscv64-lp64d.so.1', # 64-bit RISC-V dynamic linker\n # bitcoin-qt only\n 'libX11-xcb.so.1', # part of X11\n 'libX11.so.6', # part of X11\n@@ -74,13 +69,7 @@\n 'libfreetype.so.6', # font parsing\n 'libdl.so.2' # programming interface to dynamic linker\n }\n-ARCH_MIN_GLIBC_VER = {\n-'80386':  (2,1),\n-'X86-64': (2,2,5),\n-'ARM':    (2,4),\n-'AArch64':(2,17),\n-'RISC-V': (2,27)\n-}\n+\n class CPPFilt(object):\n     '''\n     Demangle C++ symbol names.\n@@ -105,25 +94,23 @@ def read_symbols(executable, imports=True):\n     Parse an ELF executable and return a list of (symbol,version) tuples\n     for dynamic, imported symbols.\n     '''\n-    p = subprocess.Popen([READELF_CMD, '--dyn-syms', '-W', '-h', executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n+    p = subprocess.Popen([READELF_CMD, '--dyn-syms', '-W', executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n     (stdout, stderr) = p.communicate()\n     if p.returncode:\n         raise IOError('Could not read symbols for %s: %s' % (executable, stderr.strip()))\n     syms = []\n     for line in stdout.splitlines():\n         line = line.split()\n-        if 'Machine:' in line:\n-            arch = line[-1]\n         if len(line)>7 and re.match('[0-9]+:$', line[0]):\n             (sym, _, version) = line[7].partition('@')\n             is_import = line[6] == 'UND'\n             if version.startswith('@'):\n                 version = version[1:]\n             if is_import == imports:\n-                syms.append((sym, version, arch))\n+                syms.append((sym, version))\n     return syms\n \n-def check_version(max_versions, version, arch):\n+def check_version(max_versions, version):\n     if '_' in version:\n         (lib, _, ver) = version.rpartition('_')\n     else:\n@@ -132,7 +119,7 @@ def check_version(max_versions, version, arch):\n     ver = tuple([int(x) for x in ver.split('.')])\n     if not lib in max_versions:\n         return False\n-    return ver <= max_versions[lib] or lib == 'GLIBC' and ver <= ARCH_MIN_GLIBC_VER[arch]\n+    return ver <= max_versions[lib]\n \n def read_libraries(filename):\n     p = subprocess.Popen([READELF_CMD, '-d', '-W', filename], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n@@ -155,17 +142,16 @@ def read_libraries(filename):\n     retval = 0\n     for filename in sys.argv[1:]:\n         # Check imported symbols\n-        for sym,version,arch in read_symbols(filename, True):\n-            if version and not check_version(MAX_VERSIONS, version, arch):\n+        for sym,version in read_symbols(filename, True):\n+            if version and not check_version(MAX_VERSIONS, version):\n                 print('%s: symbol %s from unsupported version %s' % (filename, cppfilt(sym), version))\n                 retval = 1\n         # Check exported symbols\n-        if arch != 'RISC-V':\n-            for sym,version,arch in read_symbols(filename, False):\n-                if sym in IGNORE_EXPORTS:\n-                    continue\n-                print('%s: export of symbol %s not allowed' % (filename, cppfilt(sym)))\n-                retval = 1\n+        for sym,version in read_symbols(filename, False):\n+            if sym in IGNORE_EXPORTS:\n+                continue\n+            print('%s: export of symbol %s not allowed' % (filename, cppfilt(sym)))\n+            retval = 1\n         # Check dependency libraries\n         for library_name in read_libraries(filename):\n             if library_name not in ALLOWED_LIBRARIES:"
      },
      {
        "sha": "f0098cfcdf9cc58b7d92358d3569c3f43c6816fa",
        "filename": "contrib/devtools/update-translations.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/devtools/update-translations.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/devtools/update-translations.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/update-translations.py?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -125,7 +125,7 @@ def escape_cdata(text):\n     return text\n \n def contains_bitcoin_addr(text, errors):\n-    if text is not None and ADDRESS_REGEXP.search(text) is not None:\n+    if text != None and ADDRESS_REGEXP.search(text) != None:\n         errors.append('Translation \"%s\" contains a bitcoin address. This will be removed.' % (text))\n         return True\n     return False"
      },
      {
        "sha": "5b8db1e73d3ea42ad0387ba8038071c884710dd9",
        "filename": "contrib/gitian-build.py",
        "status": "modified",
        "additions": 4,
        "deletions": 15,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/gitian-build.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/gitian-build.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-build.py?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -65,14 +65,14 @@ def build():\n         print('\\nCompiling ' + args.version + ' Windows')\n         subprocess.check_call(['bin/gbuild', '-j', args.jobs, '-m', args.memory, '--commit', 'bitcoin='+args.commit, '--url', 'bitcoin='+args.url, '../bitcoin/contrib/gitian-descriptors/gitian-win.yml'])\n         subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-win-unsigned', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-win.yml'])\n-        subprocess.check_call('mv build/out/bitcoin-*-win-unsigned.tar.gz inputs/', shell=True)\n+        subprocess.check_call('mv build/out/bitcoin-*-win-unsigned.tar.gz inputs/bitcoin-win-unsigned.tar.gz', shell=True)\n         subprocess.check_call('mv build/out/bitcoin-*.zip build/out/bitcoin-*.exe ../bitcoin-binaries/'+args.version, shell=True)\n \n     if args.macos:\n         print('\\nCompiling ' + args.version + ' MacOS')\n         subprocess.check_call(['bin/gbuild', '-j', args.jobs, '-m', args.memory, '--commit', 'bitcoin='+args.commit, '--url', 'bitcoin='+args.url, '../bitcoin/contrib/gitian-descriptors/gitian-osx.yml'])\n         subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-osx-unsigned', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-osx.yml'])\n-        subprocess.check_call('mv build/out/bitcoin-*-osx-unsigned.tar.gz inputs/', shell=True)\n+        subprocess.check_call('mv build/out/bitcoin-*-osx-unsigned.tar.gz inputs/bitcoin-osx-unsigned.tar.gz', shell=True)\n         subprocess.check_call('mv build/out/bitcoin-*.tar.gz build/out/bitcoin-*.dmg ../bitcoin-binaries/'+args.version, shell=True)\n \n     os.chdir(workdir)\n@@ -92,15 +92,13 @@ def sign():\n \n     if args.windows:\n         print('\\nSigning ' + args.version + ' Windows')\n-        subprocess.check_call('cp inputs/bitcoin-' + args.version + '-win-unsigned.tar.gz inputs/bitcoin-win-unsigned.tar.gz', shell=True)\n         subprocess.check_call(['bin/gbuild', '-i', '--commit', 'signature='+args.commit, '../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml'])\n         subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-win-signed', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml'])\n         subprocess.check_call('mv build/out/bitcoin-*win64-setup.exe ../bitcoin-binaries/'+args.version, shell=True)\n         subprocess.check_call('mv build/out/bitcoin-*win32-setup.exe ../bitcoin-binaries/'+args.version, shell=True)\n \n     if args.macos:\n         print('\\nSigning ' + args.version + ' MacOS')\n-        subprocess.check_call('cp inputs/bitcoin-' + args.version + '-osx-unsigned.tar.gz inputs/bitcoin-osx-unsigned.tar.gz', shell=True)\n         subprocess.check_call(['bin/gbuild', '-i', '--commit', 'signature='+args.commit, '../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml'])\n         subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-osx-signed', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml'])\n         subprocess.check_call('mv build/out/bitcoin-osx-signed.dmg ../bitcoin-binaries/'+args.version+'/bitcoin-'+args.version+'-osx.dmg', shell=True)\n@@ -137,7 +135,6 @@ def main():\n \n     parser = argparse.ArgumentParser(usage='%(prog)s [options] signer version')\n     parser.add_argument('-c', '--commit', action='store_true', dest='commit', help='Indicate that the version argument is for a commit or branch')\n-    parser.add_argument('-p', '--pull', action='store_true', dest='pull', help='Indicate that the version argument is the number of a github repository pull request')\n     parser.add_argument('-u', '--url', dest='url', default='https://github.com/bitcoin/bitcoin', help='Specify the URL of the repository. Default is %(default)s')\n     parser.add_argument('-v', '--verify', action='store_true', dest='verify', help='Verify the Gitian build')\n     parser.add_argument('-b', '--build', action='store_true', dest='build', help='Do a Gitian build')\n@@ -172,7 +169,7 @@ def main():\n \n     args.sign_prog = 'true' if args.detach_sign else 'gpg --detach-sign'\n \n-    # Set environment variable USE_LXC or USE_DOCKER, let gitian-builder know that we use lxc or docker\n+    # Set enviroment variable USE_LXC or USE_DOCKER, let gitian-builder know that we use lxc or docker\n     if args.docker:\n         os.environ['USE_DOCKER'] = '1'\n     elif not args.kvm:\n@@ -199,21 +196,13 @@ def main():\n         exit(1)\n \n     # Add leading 'v' for tags\n-    if args.commit and args.pull:\n-        raise Exception('Cannot have both commit and pull')\n     args.commit = ('' if args.commit else 'v') + args.version\n+    print(args.commit)\n \n     if args.setup:\n         setup()\n \n     os.chdir('bitcoin')\n-    if args.pull:\n-        subprocess.check_call(['git', 'fetch', args.url, 'refs/pull/'+args.version+'/merge'])\n-        os.chdir('../gitian-builder/inputs/bitcoin')\n-        subprocess.check_call(['git', 'fetch', args.url, 'refs/pull/'+args.version+'/merge'])\n-        args.commit = subprocess.check_output(['git', 'show', '-s', '--format=%H', 'FETCH_HEAD'], universal_newlines=True, encoding='utf8').strip()\n-        args.version = 'pull-' + args.version\n-    print(args.commit)\n     subprocess.check_call(['git', 'fetch'])\n     subprocess.check_call(['git', 'checkout', args.commit])\n     os.chdir(workdir)"
      },
      {
        "sha": "4255fb0c9a96bc54e18580f52e29f98476093639",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 27,
        "deletions": 25,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -1,5 +1,5 @@\n ---\n-name: \"bitcoin-linux-0.18\"\n+name: \"bitcoin-linux-0.17\"\n enable_cache: true\n suites:\n - \"bionic\"\n@@ -8,19 +8,15 @@ architectures:\n packages:\n - \"curl\"\n - \"g++-aarch64-linux-gnu\"\n-- \"g++-8-aarch64-linux-gnu\"\n-- \"gcc-8-aarch64-linux-gnu\"\n+- \"g++-7-aarch64-linux-gnu\"\n+- \"gcc-7-aarch64-linux-gnu\"\n - \"binutils-aarch64-linux-gnu\"\n - \"g++-arm-linux-gnueabihf\"\n-- \"g++-8-arm-linux-gnueabihf\"\n-- \"gcc-8-arm-linux-gnueabihf\"\n+- \"g++-7-arm-linux-gnueabihf\"\n+- \"gcc-7-arm-linux-gnueabihf\"\n - \"binutils-arm-linux-gnueabihf\"\n-- \"g++-riscv64-linux-gnu\"\n-- \"g++-8-riscv64-linux-gnu\"\n-- \"gcc-8-riscv64-linux-gnu\"\n-- \"binutils-riscv64-linux-gnu\"\n-- \"g++-8-multilib\"\n-- \"gcc-8-multilib\"\n+- \"g++-7-multilib\"\n+- \"gcc-7-multilib\"\n - \"binutils-gold\"\n - \"git\"\n - \"pkg-config\"\n@@ -38,9 +34,9 @@ files: []\n script: |\n \n   WRAP_DIR=$HOME/wrapped\n-  HOSTS=\"i686-pc-linux-gnu x86_64-linux-gnu arm-linux-gnueabihf aarch64-linux-gnu riscv64-linux-gnu\"\n+  HOSTS=\"i686-pc-linux-gnu x86_64-linux-gnu arm-linux-gnueabihf aarch64-linux-gnu\"\n   CONFIGFLAGS=\"--enable-glibc-back-compat --enable-reduce-exports --disable-bench --disable-gui-tests\"\n-  FAKETIME_HOST_PROGS=\"gcc g++\"\n+  FAKETIME_HOST_PROGS=\"\"\n   FAKETIME_PROGS=\"date ar ranlib nm\"\n   HOST_CFLAGS=\"-O2 -g\"\n   HOST_CXXFLAGS=\"-O2 -g\"\n@@ -73,15 +69,12 @@ script: |\n   function create_per-host_faketime_wrappers {\n   for i in $HOSTS; do\n     for prog in ${FAKETIME_HOST_PROGS}; do\n-        if which ${i}-${prog}-8\n-        then\n-            echo '#!/usr/bin/env bash' > ${WRAP_DIR}/${i}-${prog}\n-            echo \"REAL=\\`which -a ${i}-${prog}-8 | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\\`\" >> ${WRAP_DIR}/${i}-${prog}\n-            echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${i}-${prog}\n-            echo \"export FAKETIME=\\\"$1\\\"\" >> ${WRAP_DIR}/${i}-${prog}\n-            echo \"\\$REAL \\$@\" >> $WRAP_DIR/${i}-${prog}\n-            chmod +x ${WRAP_DIR}/${i}-${prog}\n-        fi\n+        echo '#!/usr/bin/env bash' > ${WRAP_DIR}/${i}-${prog}\n+        echo \"REAL=\\`which -a ${i}-${prog} | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\\`\" >> ${WRAP_DIR}/${i}-${prog}\n+        echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${i}-${prog}\n+        echo \"export FAKETIME=\\\"$1\\\"\" >> ${WRAP_DIR}/${i}-${prog}\n+        echo \"\\$REAL \\$@\" >> $WRAP_DIR/${i}-${prog}\n+        chmod +x ${WRAP_DIR}/${i}-${prog}\n     done\n   done\n   }\n@@ -107,7 +100,7 @@ script: |\n   rm -f ${WRAP_DIR}/${prog}\n   cat << EOF > ${WRAP_DIR}/${prog}\n   #!/usr/bin/env bash\n-  REAL=\"`which -a ${prog}-8 | grep -v ${WRAP_DIR}/${prog} | head -1`\"\n+  REAL=\"`which -a ${prog} | grep -v ${WRAP_DIR}/${prog} | head -1`\"\n   for var in \"\\$@\"\n   do\n     if [ \"\\$var\" = \"-m32\" ]; then\n@@ -173,15 +166,24 @@ script: |\n     CONFIG_SITE=${BASEPREFIX}/${i}/share/config.site ./configure --prefix=/ --disable-ccache --disable-maintainer-mode --disable-dependency-tracking ${CONFIGFLAGS} CFLAGS=\"${HOST_CFLAGS}\" CXXFLAGS=\"${HOST_CXXFLAGS}\" LDFLAGS=\"${HOST_LDFLAGS}\"\n     make ${MAKEOPTS}\n     make ${MAKEOPTS} -C src check-security\n-    make ${MAKEOPTS} -C src check-symbols\n+\n+    #TODO: This is a quick hack that disables symbol checking for arm.\n+    #      Instead, we should investigate why these are popping up.\n+    #      For aarch64, we'll need to bump up the min GLIBC version, as the abi\n+    #      support wasn't introduced until 2.17.\n+    case $i in\n+       aarch64-*) : ;;\n+       arm-*) : ;;\n+       *) make ${MAKEOPTS} -C src check-symbols ;;\n+    esac\n+\n     make install DESTDIR=${INSTALLPATH}\n     cd installed\n     find . -name \"lib*.la\" -delete\n     find . -name \"lib*.a\" -delete\n     rm -rf ${DISTNAME}/lib/pkgconfig\n     find ${DISTNAME}/bin -type f -executable -exec ../contrib/devtools/split-debug.sh {} {} {}.dbg \\;\n     find ${DISTNAME}/lib -type f -exec ../contrib/devtools/split-debug.sh {} {} {}.dbg \\;\n-    cp ../doc/README.md ${DISTNAME}/\n     find ${DISTNAME} -not -name \"*.dbg\" | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}.tar.gz\n     find ${DISTNAME} -name \"*.dbg\" | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}-debug.tar.gz\n     cd ../../"
      },
      {
        "sha": "fb59cf671b3fc2871573d3f4d9c3ed022b645199",
        "filename": "contrib/gitian-descriptors/gitian-osx.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/gitian-descriptors/gitian-osx.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/gitian-descriptors/gitian-osx.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx.yml?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -1,5 +1,5 @@\n ---\n-name: \"bitcoin-osx-0.18\"\n+name: \"bitcoin-osx-0.17\"\n enable_cache: true\n suites:\n - \"bionic\""
      },
      {
        "sha": "2d48170649cecd2d9646753c329d0fdc56bb5e59",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -1,5 +1,5 @@\n ---\n-name: \"bitcoin-win-0.18\"\n+name: \"bitcoin-win-0.17\"\n enable_cache: true\n suites:\n - \"bionic\""
      },
      {
        "sha": "8d3e57c5268cfc6af2f5ec11b7342cffaf61abec",
        "filename": "contrib/init/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/init/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/init/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/init/README.md?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -5,7 +5,7 @@ Upstart: bitcoind.conf\n OpenRC:  bitcoind.openrc\n          bitcoind.openrcconf\n CentOS:  bitcoind.init\n-macOS:   org.bitcoin.bitcoind.plist\n+macOS:    org.bitcoin.bitcoind.plist\n ```\n have been made available to assist packagers in creating node packages here.\n "
      },
      {
        "sha": "72d6e9d2cb628dd899452529087b7bccefe731d7",
        "filename": "contrib/init/bitcoind.conf",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/init/bitcoind.conf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/init/bitcoind.conf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/init/bitcoind.conf?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -1,4 +1,4 @@\n-description \"Bitcoin Core Daemon\"\n+description \"BitcoinV Core Daemon\"\n \n start on runlevel [2345]\n stop on starting rc RUNLEVEL=[016]"
      },
      {
        "sha": "c4dec2f7243cd0289429742c4e4537c7d4aefb2b",
        "filename": "contrib/init/bitcoind.openrc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/init/bitcoind.openrc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/init/bitcoind.openrc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/init/bitcoind.openrc?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -18,7 +18,7 @@ BITCOIND_BIN=${BITCOIND_BIN:-/usr/bin/bitcoind}\n BITCOIND_NICE=${BITCOIND_NICE:-${NICELEVEL:-0}}\n BITCOIND_OPTS=\"${BITCOIND_OPTS:-${BITCOIN_OPTS}}\"\n \n-name=\"Bitcoin Core Daemon\"\n+name=\"BitcoinV Core Daemon\"\n description=\"Bitcoin cryptocurrency P2P network daemon\"\n \n command=\"/usr/bin/bitcoind\""
      },
      {
        "sha": "4f74e67f2faafdc0b35210ceebb9838c8520a314",
        "filename": "contrib/install_db4.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/install_db4.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/install_db4.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/install_db4.sh?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -51,7 +51,7 @@ http_get() {\n   if [ -f \"${2}\" ]; then\n     echo \"File ${2} already exists; not downloading again\"\n   elif check_exists curl; then\n-    curl --insecure --retry 5 \"${1}\" -o \"${2}\"\n+    curl --insecure \"${1}\" -o \"${2}\"\n   else\n     wget --no-check-certificate \"${1}\" -O \"${2}\"\n   fi"
      },
      {
        "sha": "b6ead4a166a92a2e29c049be45c1cb97fd06e750",
        "filename": "contrib/linearize/linearize-data.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/linearize/linearize-data.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/linearize/linearize-data.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/linearize-data.py?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -7,6 +7,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #\n \n+from __future__ import print_function, division\n import struct\n import re\n import os"
      },
      {
        "sha": "911c3c959dd2539ae8fd54c0ec7e3f30d305474d",
        "filename": "contrib/linearize/linearize-hashes.py",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/linearize/linearize-hashes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/linearize/linearize-hashes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/linearize-hashes.py?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -7,7 +7,11 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #\n \n-from http.client import HttpConnection\n+from __future__ import print_function\n+try: # Python 3\n+    import http.client as httplib\n+except ImportError: # Python 2\n+    import httplib\n import json\n import re\n import base64\n@@ -27,7 +31,7 @@ def __init__(self, host, port, username, password):\n         authpair = \"%s:%s\" % (username, password)\n         authpair = authpair.encode('utf-8')\n         self.authhdr = b\"Basic \" + base64.b64encode(authpair)\n-        self.conn = HttpConnection(host, port=port, timeout=30)\n+        self.conn = httplib.HTTPConnection(host, port=port, timeout=30)\n \n     def execute(self, obj):\n         try:"
      },
      {
        "sha": "43e0b3a6176545edfa2897dbacecfc0ebb450f8a",
        "filename": "contrib/qos/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/qos/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/qos/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/qos/README.md?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -1,5 +1,5 @@\n ### QoS (Quality of service) ###\n \n-This is a Linux bash script that will set up tc to limit the outgoing bandwidth for connections to the Bitcoin network. It limits outbound TCP traffic with a source or destination port of 8333, but not if the destination IP is within a LAN.\n+This is a Linux bash script that will set up tc to limit the outgoing bandwidth for connections to the Bitcoin network. It limits outbound TCP traffic with a source or destination port of 9333, but not if the destination IP is within a LAN.\n \n This means one can have an always-on bitcoind instance running, and another local bitcoind/bitcoin-qt instance which connects to this node and receives blocks from it."
      },
      {
        "sha": "3978f75eeec37aa84d35e68e7ce2ae6f3a0f6d31",
        "filename": "contrib/qos/tc.sh",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/qos/tc.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/qos/tc.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/qos/tc.sh?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -1,5 +1,3 @@\n-#!/usr/bin/env bash\n-#\n # Copyright (c) 2017 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n@@ -47,16 +45,16 @@ fi\n #\tret=$?\n #done\n \n-#limit outgoing traffic to and from port 8333. but not when dealing with a host on the local network\n+#limit outgoing traffic to and from port 9333. but not when dealing with a host on the local network\n #\t(defined by $LOCALNET_V4 and $LOCALNET_V6)\n #\t--set-mark marks packages matching these criteria with the number \"2\" (v4)\n #\t--set-mark marks packages matching these criteria with the number \"4\" (v6)\n #\tthese packets are filtered by the tc filter with \"handle 2\"\n #\tthis filter sends the packages into the 1:11 class, and this class is limited to ${LIMIT}\n-iptables -t mangle -A OUTPUT -p tcp -m tcp --dport 8333 ! -d ${LOCALNET_V4} -j MARK --set-mark 0x2\n-iptables -t mangle -A OUTPUT -p tcp -m tcp --sport 8333 ! -d ${LOCALNET_V4} -j MARK --set-mark 0x2\n+iptables -t mangle -A OUTPUT -p tcp -m tcp --dport 9333 ! -d ${LOCALNET_V4} -j MARK --set-mark 0x2\n+iptables -t mangle -A OUTPUT -p tcp -m tcp --sport 9333 ! -d ${LOCALNET_V4} -j MARK --set-mark 0x2\n \n if [ ! -z \"${LOCALNET_V6}\" ] ; then\n-\tip6tables -t mangle -A OUTPUT -p tcp -m tcp --dport 8333 ! -d ${LOCALNET_V6} -j MARK --set-mark 0x4\n-\tip6tables -t mangle -A OUTPUT -p tcp -m tcp --sport 8333 ! -d ${LOCALNET_V6} -j MARK --set-mark 0x4\n+\tip6tables -t mangle -A OUTPUT -p tcp -m tcp --dport 9333 ! -d ${LOCALNET_V6} -j MARK --set-mark 0x4\n+\tip6tables -t mangle -A OUTPUT -p tcp -m tcp --sport 9333 ! -d ${LOCALNET_V6} -j MARK --set-mark 0x4\n fi"
      },
      {
        "sha": "6c89ba42893412b6844883068be94074e7080ae0",
        "filename": "contrib/seeds/generate-seeds.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/seeds/generate-seeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/seeds/generate-seeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/generate-seeds.py?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -128,10 +128,10 @@ def main():\n     g.write(' * IPv4 as well as onion addresses are wrapped inside an IPv6 address accordingly.\\n')\n     g.write(' */\\n')\n     with open(os.path.join(indir,'nodes_main.txt'), 'r', encoding=\"utf8\") as f:\n-        process_nodes(g, f, 'pnSeed6_main', 8333)\n+        process_nodes(g, f, 'pnSeed6_main', 9333)\n     g.write('\\n')\n     with open(os.path.join(indir,'nodes_test.txt'), 'r', encoding=\"utf8\") as f:\n-        process_nodes(g, f, 'pnSeed6_test', 18333)\n+        process_nodes(g, f, 'pnSeed6_test', 19333)\n     g.write('#endif // BITCOIN_CHAINPARAMSSEEDS_H\\n')\n \n if __name__ == '__main__':"
      },
      {
        "sha": "31b9eb08744d1f79dc95a540a377b79ddbb016ea",
        "filename": "contrib/seeds/nodes_main.txt",
        "status": "modified",
        "additions": 1,
        "deletions": 1268,
        "changes": 1269,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/seeds/nodes_main.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/seeds/nodes_main.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/nodes_main.txt?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -1,1268 +1 @@\n-2.132.100.47:8333\n-5.1.97.4:8333\n-5.39.174.116:8333\n-5.45.79.14:8333\n-5.53.16.133:8333\n-5.101.139.166:8333\n-5.178.78.139:8333\n-5.189.176.17:8333\n-5.228.64.71:8333\n-8.18.38.122:8333\n-13.115.96.63:8333\n-14.2.124.84:8333\n-14.3.170.1:8333\n-23.94.28.250:8333\n-23.111.172.106:8333\n-23.125.224.84:8333\n-23.152.0.108:8333\n-23.175.0.222:8333\n-23.229.16.234:8333\n-23.233.6.70:8333\n-24.142.34.253:8333\n-24.171.203.87:8333\n-24.188.200.170:8333\n-24.216.65.41:8333\n-24.227.69.146:8333\n-27.33.11.193:8333\n-31.24.11.139:8333\n-31.28.10.13:8333\n-31.165.17.164:8333\n-31.179.204.142:8333\n-31.186.96.186:8333\n-31.210.172.21:8333\n-31.211.102.129:62734\n-34.217.122.178:8333\n-35.230.64.29:8333\n-35.231.225.42:8333\n-36.3.172.13:8333\n-36.251.163.42:8333\n-37.136.97.246:8333\n-37.153.1.150:8333\n-37.153.1.157:8333\n-37.228.92.110:8333\n-37.252.14.22:8333\n-38.27.101.224:8333\n-38.102.134.85:8333\n-38.104.225.30:8333\n-43.229.76.38:8333\n-45.40.132.57:8333\n-45.45.34.122:8333\n-45.48.177.222:8333\n-46.19.34.236:8333\n-46.28.66.196:8333\n-46.28.204.21:8333\n-46.28.205.161:8333\n-46.30.42.144:8333\n-46.138.139.195:8333\n-46.165.245.221:8333\n-46.166.129.155:8333\n-46.166.160.52:8333\n-46.166.160.56:8333\n-46.188.44.82:8333\n-46.188.126.74:8333\n-46.229.165.145:8333\n-46.229.168.201:8333\n-46.229.238.187:8333\n-47.54.204.246:8333\n-47.74.128.138:8333\n-47.94.224.99:8333\n-47.97.96.198:8333\n-47.187.36.48:8333\n-47.218.16.81:8333\n-47.223.66.222:8333\n-47.254.128.15:8333\n-50.31.170.53:8333\n-50.35.67.146:8333\n-50.76.96.230:8333\n-50.82.177.142:8333\n-51.15.3.46:8333\n-51.175.141.243:8333\n-52.144.47.153:8333\n-52.232.38.122:8333\n-54.38.192.164:8333\n-54.85.65.6:8333\n-54.91.227.188:8333\n-58.180.36.14:8333\n-59.106.208.68:8333\n-60.70.73.26:8333\n-61.160.234.57:8333\n-62.43.198.56:8333\n-62.45.0.15:8333\n-62.107.200.30:8333\n-62.133.194.2:8333\n-62.138.3.224:8333\n-62.146.70.216:8333\n-64.78.163.10:8333\n-64.120.110.2:8333\n-64.131.160.31:8333\n-66.18.172.16:8333\n-66.85.74.242:8333\n-66.110.132.10:8333\n-66.114.33.90:8333\n-66.180.64.95:8333\n-66.222.164.188:8333\n-67.11.139.67:8333\n-67.43.191.118:8333\n-67.61.137.157:8333\n-67.193.184.12:8333\n-67.210.228.203:8333\n-67.215.12.43:8333\n-67.253.72.119:8333\n-68.201.228.6:8333\n-68.202.128.19:8333\n-69.30.218.226:8333\n-69.61.35.175:8333\n-69.61.171.22:8333\n-69.125.194.25:8333\n-70.35.98.12:8333\n-70.103.171.66:8333\n-70.172.252.29:8333\n-71.34.96.135:8333\n-71.68.48.149:8333\n-71.93.161.162:8333\n-71.162.192.5:8333\n-72.11.174.71:8333\n-72.50.240.124:8333\n-72.70.32.215:8333\n-72.211.196.232:8333\n-72.234.112.22:8333\n-72.253.237.0:8333\n-73.241.192.40:8333\n-74.15.230.112:8333\n-74.83.79.52:8333\n-74.126.14.27:8333\n-75.76.137.164:8333\n-76.64.166.230:8333\n-76.191.79.98:8333\n-77.37.170.106:8333\n-77.70.107.83:8333\n-77.95.226.194:8333\n-77.111.172.134:8333\n-77.163.136.136:8333\n-77.203.13.57:8333\n-77.239.37.12:8333\n-77.240.168.19:8333\n-77.244.219.164:8333\n-78.31.67.156:8333\n-78.34.2.126:8333\n-78.108.187.246:8333\n-78.109.163.153:8333\n-79.28.205.145:8333\n-79.66.70.89:8333\n-79.132.230.144:8333\n-80.209.224.79:8333\n-80.211.252.104:8333\n-80.229.28.60:8333\n-81.7.13.84:8333\n-81.7.16.182:8333\n-81.18.224.62:8333\n-81.171.27.138:8333\n-81.187.80.221:8333\n-81.217.112.225:8333\n-81.245.141.6:8333\n-82.43.171.91:8333\n-82.102.10.251:8333\n-82.118.234.178:8333\n-82.144.197.93:8333\n-82.161.109.190:8333\n-82.193.102.228:8333\n-82.193.109.199:8333\n-82.199.102.10:8333\n-82.212.130.94:8333\n-82.213.208.16:8333\n-82.217.67.17:8333\n-82.221.108.27:8333\n-82.221.133.174:8333\n-83.55.130.30:8333\n-83.77.39.46:8333\n-83.137.41.10:8333\n-83.149.70.48:8333\n-83.151.233.218:8333\n-83.162.43.154:8333\n-83.164.131.243:8333\n-83.221.11.7:8333\n-83.243.128.13:8333\n-84.16.38.218:8333\n-84.38.3.249:8333\n-84.75.26.172:8333\n-84.200.106.128:8333\n-84.212.250.219:8333\n-84.215.134.195:8333\n-84.245.27.209:8333\n-84.254.40.152:8333\n-84.255.193.28:8333\n-85.10.112.194:8333\n-85.93.2.76:54382\n-85.94.172.33:8333\n-85.129.0.126:8333\n-85.145.168.159:8333\n-85.170.238.26:8333\n-85.195.232.197:8333\n-85.214.68.122:8333\n-85.214.235.137:8333\n-85.218.48.146:8333\n-85.220.165.205:8333\n-85.229.134.98:8333\n-85.241.49.242:8333\n-86.25.32.77:8333\n-86.41.89.170:8333\n-86.50.143.43:8333\n-86.61.67.183:8333\n-86.137.26.210:8333\n-86.177.194.215:8333\n-87.157.177.58:8333\n-87.224.163.66:8333\n-87.236.196.169:8333\n-87.246.46.132:8333\n-88.99.64.76:8333\n-89.1.100.49:8333\n-89.10.155.88:8333\n-89.27.59.246:8333\n-89.163.132.73:8333\n-89.179.240.131:8333\n-89.205.81.5:8333\n-89.212.75.6:8333\n-89.217.130.147:8333\n-89.230.96.42:8333\n-89.248.172.10:8333\n-90.46.57.17:8333\n-90.110.11.101:8333\n-90.240.37.163:8333\n-91.65.4.21:8333\n-91.65.192.159:8333\n-91.83.237.185:8333\n-91.110.125.26:8333\n-91.121.160.59:8333\n-91.135.0.187:8333\n-91.143.109.68:8333\n-91.195.42.134:8333\n-91.221.70.137:8333\n-92.35.132.5:8333\n-92.42.37.141:8333\n-92.54.16.144:8333\n-92.62.34.184:8333\n-92.186.231.240:8333\n-93.123.80.47:8333\n-93.170.13.15:8333\n-93.171.201.68:8333\n-93.179.197.152:8333\n-93.190.206.151:8333\n-93.191.131.177:8333\n-93.208.132.214:8333\n-94.104.97.247:8333\n-94.156.35.8:8333\n-94.199.173.113:8333\n-95.42.2.113:8333\n-95.94.225.61:8333\n-95.154.237.24:8333\n-95.158.39.64:8333\n-95.163.71.126:8333\n-95.163.106.139:8333\n-95.208.163.214:8333\n-95.213.143.13:8333\n-95.226.77.108:8333\n-96.3.74.66:8333\n-96.23.128.65:8333\n-96.27.8.242:8333\n-96.27.129.94:8333\n-96.126.100.148:8333\n-97.74.6.105:8333\n-97.116.160.102:8333\n-98.7.64.249:8333\n-98.10.106.49:8333\n-98.25.197.125:8333\n-98.29.7.103:8333\n-98.127.130.17:8333\n-99.224.192.201:8333\n-101.190.172.209:8333\n-103.35.151.76:8334\n-103.74.193.127:8333\n-103.80.133.191:8333\n-103.80.168.57:8333\n-103.99.168.102:8333\n-103.194.42.10:8333\n-104.168.101.207:8333\n-104.200.67.162:8333\n-104.207.132.42:8333\n-104.237.4.202:8333\n-107.155.72.108:8333\n-107.183.37.162:8333\n-108.175.3.18:8333\n-108.220.192.57:8333\n-109.61.102.5:8333\n-109.206.177.21:8333\n-109.237.111.156:8333\n-115.68.47.82:8333\n-116.88.75.110:8333\n-118.67.201.40:8333\n-119.28.4.230:8333\n-119.28.130.210:8333\n-120.31.143.167:8333\n-120.220.14.92:8333\n-120.220.14.93:8333\n-124.18.133.220:8333\n-126.207.39.22:8333\n-128.77.37.214:8333\n-128.125.100.2:8333\n-129.158.74.237:8333\n-129.213.32.176:8333\n-131.113.41.119:8333\n-131.113.41.125:8333\n-131.114.10.233:8333\n-131.188.40.191:8333\n-131.188.42.36:8333\n-134.0.112.92:8333\n-134.3.26.190:8333\n-135.23.196.24:8333\n-135.84.207.4:8333\n-136.59.129.125:8333\n-136.61.239.7:8333\n-137.117.164.18:8333\n-139.130.41.82:8333\n-141.134.71.188:8333\n-141.213.6.57:8333\n-141.223.82.139:8333\n-142.0.130.49:8333\n-142.0.130.53:8333\n-144.118.141.232:8333\n-148.66.58.146:8333\n-150.95.130.17:8333\n-150.187.36.233:8333\n-150.249.76.102:8333\n-153.125.129.187:8333\n-153.125.224.107:8333\n-154.48.236.250:8887\n-154.66.207.126:8333\n-155.143.140.186:8333\n-157.131.142.164:8333\n-158.64.79.182:8333\n-158.85.93.163:8333\n-158.140.128.239:8333\n-158.174.131.171:8333\n-159.8.4.19:8333\n-159.217.144.68:8333\n-159.217.144.252:8333\n-159.253.47.202:8333\n-162.155.64.226:8333\n-162.222.100.118:8333\n-162.255.168.27:8333\n-162.255.168.30:8333\n-163.158.228.125:8333\n-165.227.96.38:8333\n-169.229.238.17:8333\n-171.25.165.145:8333\n-171.33.177.9:8333\n-172.72.228.93:8333\n-172.96.161.244:8333\n-172.102.228.150:8333\n-172.118.136.98:8333\n-173.46.65.8:8333\n-173.212.193.35:8333\n-173.239.33.85:8333\n-173.243.64.48:8333\n-174.115.129.37:8333\n-176.12.6.59:8333\n-176.107.184.29:8333\n-176.123.10.192:8333\n-176.126.167.10:8333\n-176.185.235.163:8333\n-176.223.130.254:8333\n-178.0.71.136:8333\n-178.12.32.39:8333\n-178.85.64.212:8333\n-178.124.162.209:8333\n-178.128.192.21:8333\n-178.151.133.56:8333\n-178.193.96.201:8333\n-178.248.200.126:8333\n-178.254.7.88:8333\n-180.233.106.171:8333\n-181.166.168.210:8333\n-183.66.227.70:12060\n-183.111.108.56:8333\n-184.70.33.190:8333\n-184.105.70.100:8333\n-184.105.70.101:8333\n-185.12.7.38:8333\n-185.21.216.134:8333\n-185.25.48.184:8333\n-185.25.48.217:8333\n-185.25.60.199:8333\n-185.28.76.179:8333\n-185.35.139.54:8333\n-185.44.78.208:8333\n-185.47.132.55:8333\n-185.51.128.27:8333\n-185.59.100.107:8333\n-185.67.175.75:8333\n-185.67.204.76:8333\n-185.67.204.80:8333\n-185.70.105.74:8339\n-185.85.3.140:8333\n-185.86.15.23:8333\n-185.86.15.25:8333\n-185.102.71.6:8333\n-185.117.74.21:8333\n-185.121.173.223:8333\n-185.128.40.122:8333\n-185.145.131.218:8333\n-185.147.237.169:8333\n-185.162.128.83:8333\n-185.165.76.220:8333\n-185.172.165.130:8333\n-185.177.5.4:8333\n-185.183.131.75:8333\n-185.186.208.208:8333\n-185.215.224.22:8333\n-185.224.80.108:8333\n-185.225.16.4:8333\n-185.243.112.214:8333\n-185.244.193.18:8333\n-185.248.160.66:8333\n-186.19.136.144:8333\n-188.68.38.243:8333\n-188.68.240.89:8333\n-188.134.6.84:8333\n-188.134.77.121:8333\n-188.138.1.43:8333\n-188.217.9.168:8333\n-190.2.133.91:8333\n-190.184.198.34:8333\n-190.211.204.68:8333\n-192.139.35.143:8333\n-192.162.100.156:8333\n-192.162.101.250:8333\n-192.206.202.6:8333\n-192.207.12.244:8333\n-192.207.12.245:8333\n-192.228.101.157:8333\n-193.112.192.73:8333\n-193.170.166.12:8333\n-194.15.231.236:8333\n-194.165.16.33:8333\n-194.181.80.77:8333\n-194.186.160.253:8333\n-194.247.13.7:8333\n-194.247.13.32:8333\n-195.0.203.21:8333\n-195.38.168.114:8333\n-195.43.141.28:8333\n-195.95.225.248:8333\n-195.123.224.7:8333\n-195.154.235.79:8333\n-195.169.99.82:8333\n-195.201.0.81:8333\n-197.155.6.43:8333\n-198.44.231.160:6333\n-198.58.102.35:8333\n-198.137.202.175:8333\n-199.127.224.50:8333\n-199.182.129.26:8333\n-199.188.204.102:8333\n-199.188.204.155:8333\n-199.244.49.224:8333\n-199.249.230.37:15738\n-200.83.123.46:8333\n-200.109.67.71:8333\n-200.122.128.185:8333\n-202.153.199.182:8333\n-202.159.136.54:8333\n-202.168.16.232:8333\n-203.11.71.1:8333\n-203.162.80.219:8333\n-203.178.143.13:8333\n-204.15.11.4:8333\n-206.125.169.162:8333\n-206.174.55.164:8333\n-207.182.146.18:8333\n-208.93.66.198:8333\n-208.98.196.249:8333\n-208.107.224.202:8333\n-208.110.65.114:8333\n-208.118.235.190:8333\n-209.122.208.131:8333\n-209.126.110.198:8333\n-209.131.238.80:8333\n-212.56.108.81:8333\n-212.73.150.132:8333\n-212.77.224.145:8333\n-212.85.90.194:8333\n-212.92.101.30:8333\n-212.112.133.92:8333\n-212.227.132.167:8333\n-213.10.100.182:8333\n-213.57.240.69:8333\n-213.91.205.134:8333\n-213.125.67.108:8333\n-213.152.161.170:45893\n-213.155.3.216:8333\n-213.180.70.138:8333\n-213.185.226.225:8333\n-216.71.203.79:8333\n-216.194.164.211:8333\n-216.240.168.226:8333\n-217.20.130.72:8333\n-217.23.9.180:8333\n-217.64.47.138:8333\n-217.169.14.90:8333\n-218.245.1.205:8333\n-220.130.128.58:8333\n-220.133.39.61:8333\n-222.239.193.116:8333\n-222.239.193.120:8333\n-[2001:0:4137:9e76:1cbd:3bc0:ade7:bf44]:8333\n-[2001:0:4137:9e76:2046:150d:8d65:de4]:8333\n-[2001:0:4137:9e76:2c99:3f36:d003:f47a]:8333\n-[2001:0:4137:9e76:34b6:3910:a3dc:7bfa]:8333\n-[2001:0:4137:9e76:3cec:2b5:525b:fb3c]:8333\n-[2001:0:53aa:64c:c5:235d:a10d:e0]:8333\n-[2001:0:53aa:64c:cbc:5ace:a625:39d1]:8333\n-[2001:0:5ef5:79fb:38e5:36c1:d0ee:5d98]:8333\n-[2001:0:5ef5:79fb:3c5c:c6c:39cf:69d3]:8333\n-[2001:0:5ef5:79fb:896:ef4:ba63:8d15]:8333\n-[2001:0:9d38:6ab8:106a:2112:e06b:b881]:8333\n-[2001:0:9d38:6ab8:1c99:1655:e782:9340]:8333\n-[2001:0:9d38:6ab8:20cd:1cd9:54e6:5a6e]:8333\n-[2001:0:9d38:6ab8:245e:2b3:a300:317e]:8333\n-[2001:0:9d38:6ab8:2814:215c:88e3:4ee0]:8333\n-[2001:0:9d38:6ab8:30ac:3a51:b2da:712d]:8333\n-[2001:0:9d38:6ab8:34a6:eeb:c3ed:5be7]:8333\n-[2001:0:9d38:6ab8:c2f:16d5:525a:107e]:8333\n-[2001:0:9d38:6ab8:cb1:2557:431c:f3e1]:8333\n-[2001:0:9d38:6abd:1056:290d:a671:3d90]:8333\n-[2001:0:9d38:6abd:1865:14fe:d0a7:1f72]:8333\n-[2001:0:9d38:6abd:2c3c:3006:a486:93c3]:8333\n-[2001:0:9d38:6abd:2c73:3313:f21a:96da]:8333\n-[2001:0:9d38:6abd:3050:fbff:a250:3386]:8333\n-[2001:0:9d38:6abd:3828:494:fdaa:56cd]:8333\n-[2001:0:9d38:6abd:454:187d:3e75:b00b]:8333\n-[2001:0:9d38:78cf:c2c:1dcc:fa42:41a3]:8333\n-[2001:0:9d38:90d7:1c4a:20d4:4daa:eb5a]:8333\n-[2001:0:9d38:90d7:1ca7:1612:9a18:31e5]:8333\n-[2001:0:9d38:90d7:24c8:3a0a:a68d:f799]:8333\n-[2001:0:9d38:90d7:2837:324e:d0cb:9f45]:22475\n-[2001:0:9d38:90d7:28c1:361e:a69c:b099]:8333\n-[2001:0:9d38:90d7:30fe:1c89:d0b4:4d18]:8333\n-[2001:0:9d38:90d7:3474:1df1:e732:e5e3]:8333\n-[2001:0:9d38:90d7:34a8:fb1:88e3:fb19]:8333\n-[2001:0:9d38:90d7:3c19:3d23:d0b4:f831]:18652\n-[2001:0:9d38:90d7:3c45:2342:d0cb:d6ca]:8333\n-[2001:0:9d38:90d7:3c5f:3105:d0b4:60b6]:8333\n-[2001:0:9d38:90d7:8a1:2fb:d0cb:1e8f]:8333\n-[2001:0:9d38:90d7:a3:36e0:e020:53fa]:8333\n-[2001:0:9d38:90d7:eb:3b30:d0a4:aa5]:8333\n-[2001:0:9d38:953c:104e:8af:b3aa:f300]:8333\n-[2001:0:9d38:953c:1434:71f:b850:bab1]:8333\n-[2001:0:9d38:953c:144a:36e8:519a:bb69]:8333\n-[2001:0:9d38:953c:20fc:26ef:ed26:c737]:8333\n-[2001:0:9d38:953c:454:120:88e8:2fb]:8333\n-[2001:0:9d38:953c:801:1620:bc22:95bc]:8333\n-[2001:0:9d38:953c:8a0:1fdb:ab00:bc2]:8333\n-[2001:0:9d38:953c:cf6:3d48:4386:4937]:8333\n-[2001:13d8:1c01:1000::8]:8333\n-[2001:1620:923:0:75be:ed92:1a01:641]:8333\n-[2001:1680:101:8c::1]:8333\n-[2001:1970:5ae2:2b00:30bd:7910:c84:7a8f]:8333\n-[2001:1970:5d56:aa01:1e75:8ff:fead:da48]:8333\n-[2001:19f0:300:1045:225:90ff:fec9:29b3]:8333\n-[2001:19f0:5:1f93:5400:1ff:fe7a:c65a]:8333\n-[2001:19f0:6c01:4bd:5400:1ff:fe76:4db6]:8333\n-[2001:19f0:ac01:2fb:5400:ff:fe5b:c3ff]:8333\n-[2001:1a48:7:af1a:75f8:2c47:3285:d50e]:8333\n-[2001:1af8:4010:a094:3333::8c38]:8333\n-[2001:1af8:4070:a016:3333::5afb]:8333\n-[2001:1af8:4700:a071:4444::e26e]:8333\n-[2001:200:0:8801:5054:ff:fef2:1d0]:8333\n-[2001:4128:6135:2010:21e:bff:fee8:a3c0]:8333\n-[2001:41d0:1000:1f98::]:8333\n-[2001:41d0:1004:18c7::]:8333\n-[2001:41d0:1004:19dc::]:18555\n-[2001:41d0:1004:1f7c::]:8333\n-[2001:41d0:1008:2bed::]:8333\n-[2001:41d0:1:45d8::1]:8333\n-[2001:41d0:1:5395::1]:8333\n-[2001:41d0:1:85d3::1]:8333\n-[2001:41d0:1:8649::1]:8333\n-[2001:41d0:1:8b26::1]:8333\n-[2001:41d0:1:a5b8::1]:8333\n-[2001:41d0:1:ab6b::1]:8333\n-[2001:41d0:1:d227::]:8333\n-[2001:41d0:1:f897::1]:8333\n-[2001:41d0:1:f932::1]:8333\n-[2001:41d0:2:34b7::1]:8333\n-[2001:41d0:2:4975::]:8333\n-[2001:41d0:2:5c22::]:8333\n-[2001:41d0:2:84d4::1]:8333\n-[2001:41d0:2:ab38::]:8333\n-[2001:41d0:2:c33c::]:8333\n-[2001:41d0:303:193b::]:8333\n-[2001:41d0:303:2505::1a]:8333\n-[2001:41d0:303:41db::]:58333\n-[2001:41d0:303:4c68::]:8333\n-[2001:41d0:303:508::]:8333\n-[2001:41d0:303:6767::]:8333\n-[2001:41d0:303:68cd::]:8333\n-[2001:41d0:602:17a4::]:8333\n-[2001:41d0:602:1842::]:8333\n-[2001:41d0:602:3b7::]:8333\n-[2001:41d0:602:898::]:8333\n-[2001:41d0:602:b1a::]:8333\n-[2001:41d0:800:135::]:8333\n-[2001:41d0:800:3d3::]:8333\n-[2001:41d0:8:101d::1]:8333\n-[2001:41d0:8:1b29::]:8333\n-[2001:41d0:8:3f74::1]:8333\n-[2001:41d0:8:43a0::]:8333\n-[2001:41d0:8:bb32::1]:8333\n-[2001:41d0:8:bed3::]:8333\n-[2001:41d0:8:c67c::]:8333\n-[2001:41d0:8:ca2d::]:8333\n-[2001:41d0:8:d444::1]:8333\n-[2001:41d0:8:ddb::1]:8333\n-[2001:41d0:8:ea86::1]:8333\n-[2001:41d0:a:1220::1]:8333\n-[2001:41d0:a:27ed::1]:8333\n-[2001:41d0:a:296c::]:8139\n-[2001:41d0:a:2b18::1]:8333\n-[2001:41d0:a:405c::]:8333\n-[2001:41d0:a:42df::]:8312\n-[2001:41d0:a:4c49::aca:7929]:8333\n-[2001:41d0:a:6927::1]:8333\n-[2001:41d0:a:69a2::1]:8333\n-[2001:41d0:a:6a87::1]:8333\n-[2001:41d0:a:6c29::1]:8333\n-[2001:41d0:a:6c7d::1]:8333\n-[2001:41d0:a:f243::1]:8333\n-[2001:41d0:a:f9cd::1]:8333\n-[2001:41d0:d:dc9::]:8333\n-[2001:41d0:e:1146::1]:8333\n-[2001:41d0:e:126::1]:8333\n-[2001:41d0:e:12aa::1]:8333\n-[2001:41d0:e:1388::1]:8333\n-[2001:41d0:e:ec5::1]:8333\n-[2001:41f0:0:4:62:6974:636f:696e]:8333\n-[2001:470:18:be4::2]:8333\n-[2001:470:1c62:b170:bbff:53f1:edbf:99df]:42434\n-[2001:470:1f06:15b4::2]:8333\n-[2001:470:1f06:cea::2]:8333\n-[2001:470:1f07:803:20c:29ff:fe2d:5879]:8333\n-[2001:470:1f08:3cc::2]:8333\n-[2001:470:1f0a:18dd::2]:8333\n-[2001:470:1f15:11f8::10]:8333\n-[2001:470:1f15:cf7::14]:8333\n-[2001:470:1f17:b5::10]:8333\n-[2001:470:1f1a:172::2]:8333\n-[2001:470:1f1b:5a6:216:3eff:fe24:1162]:8333\n-[2001:470:28:365::7]:8333\n-[2001:470:41:6::2]:8333\n-[2001:470:6c80:101::1]:8333\n-[2001:470:6c80:3::1]:8333\n-[2001:470:7:63e::2]:8333\n-[2001:470:7:b74::2]:8333\n-[2001:470:8:bd3:4d25:ca57:a5b7:c6c4]:8333\n-[2001:470:a:c13::2]:8333\n-[2001:470:c144:cafe::23]:8333\n-[2001:470:c3c4:100:100::202]:8333\n-[2001:470:e696::1]:8333\n-[2001:48f8:1003::3ba]:8333\n-[2001:48f8:9015:1422:3dc0:fcf2:772f:57bc]:8333\n-[2001:4ba0:babe:832::]:8333\n-[2001:628:22a0:9::12]:8333\n-[2001:638:a000:4140::ffff:191]:8333\n-[2001:638:a000:4142::ff10:bed6]:8333\n-[2001:67c:21ec:1000::a]:8333\n-[2001:8d8:90b:c000::21:2fc0]:8333\n-[2001:8d8:91c:9200::5c:d425]:8333\n-[2001:980:231b:1:8e89:a5ff:fee3:f8be]:8333\n-[2001:980:ade8:1:14fc:fd6d:608c:f669]:8333\n-[2001:981:bdbd:1:c506:7d38:4b47:da15]:8333\n-[2001:982:27f2:1:7271:bcff:fe94:d5bb]:8333\n-[2001:984:26b5::1]:8333\n-[2001:984:aec7:1:dcb7:29a:7eda:b9a2]:8333\n-[2001:985:79af:20::35]:8333\n-[2001:985:cb69:0:20c:29ff:feaf:dd5e]:8333\n-[2001:b011:300d:1870:9c87:d4ff:fe9c:2d0f]:8333\n-[2001:b030:2422::208d]:8333\n-[2001:bc8:31d7:100::1]:8333\n-[2001:bc8:323c:100::]:8333\n-[2001:bc8:33ac:19ff::26]:8333\n-[2001:bc8:399f:f000::1]:8333\n-[2001:bc8:3dc1:100::142]:8333\n-[2001:bc8:4400:2000::463b]:8333\n-[2001:bc8:4400:2400::1b35]:8333\n-[2001:bc8:4700:2000::5823]:8333\n-[2001:da8:8001:2303:1cf4:4466:3f1a:7edb]:8333\n-[2001:da8:d800:741:652d:52db:5713:4515]:8333\n-[2002:17e5:10ea::17e5:10ea]:8333\n-[2002:1f2b:8cbe::1f2b:8cbe]:8333\n-[2002:2f59:30f3::2f59:30f3]:8333\n-[2002:2f5a:562a::2f5a:562a]:8333\n-[2002:3e92:46d8::3e92:46d8]:8333\n-[2002:3f62:e6bb::3f62:e6bb]:8333\n-[2002:404e:a30a::404e:a30a]:8333\n-[2002:43db:9616::43db:9616]:8333\n-[2002:43e5:a1fa::43e5:a1fa]:8333\n-[2002:5266:afb::5266:afb]:8333\n-[2002:5dbd:91a9::5dbd:91a9]:8333\n-[2002:627e:333d::627e:333d]:8333\n-[2002:6b9b:486c::6b9b:486c]:8333\n-[2002:6dcb:7cba::6dcb:7cba]:8333\n-[2002:7cf8:e33e::7cf8:e33e]:8333\n-[2002:8e00:8231::8e00:8231]:8333\n-[2002:8e00:8233::8e00:8233]:8333\n-[2002:b07e:a70a::b07e:a70a]:8333\n-[2002:b2c9:e6fc:10:3d5c:e3ad:813:9c46]:8333\n-[2002:b4b2:3612::b4b2:3612]:8333\n-[2002:b610:1ca2::b610:1ca2]:8333\n-[2002:b610:1ca3::b610:1ca3]:8333\n-[2002:b845:3322::1]:8333\n-[2002:b946:694a::b946:694a]:8339\n-[2002:b960:5e18::b960:5e18]:8333\n-[2002:c23f:8fc5::c23f:8fc5]:8333\n-[2002:c2a5:1021::c2a5:1021]:8333\n-[2002:c62c:e7a0::c62c:e7a0]:6333\n-[2002:ca99:c7b6::ca99:c7b6]:8333\n-[2002:d035:2734::d035:2734]:8333\n-[2002:d06e:5d1a::d06e:5d1a]:8333\n-[2002:d8da:b949::d8da:b949]:8333\n-[2400:2410:a960:4800:18be:d624:7018:cd2f]:8333\n-[2400:6180:0:d0::3e1:b001]:8333\n-[2400:6180:0:d0::5cd2:a001]:8333\n-[2400:6180:0:d1::4c6:8001]:8333\n-[2400:6180:100:d0::797:a001]:8333\n-[2400:8500:1302:817:150:95:130:17]:8333\n-[2401:1800:7800:106:be76:4eff:fe1c:1879]:8333\n-[2401:3900:2:1::2]:8333\n-[2401:a400:3200:5600:3c16:2deb:abce:70cd]:8333\n-[2401:b140::43:100]:8333\n-[2401:b140::43:102]:8333\n-[2402:1f00:8100:21c::]:8333\n-[2403:bd80:c000:1:103:202:216:182]:8333\n-[2405:6580:c5c0:1700:6cd2:b72e:740e:4311]:8333\n-[2405:800:1000:1:1000::2001]:8333\n-[2405:9800:b560:96d:630:c28e:a79a:a182]:8333\n-[2405:aa00:2::40]:8333\n-[2409:10:ca20:1df0:224:e8ff:fe1f:60d9]:8333\n-[2600:1f16:625:e00:269a:3452:2edf:1011]:8333\n-[2600:1f16:625:e00:7bc:5879:4463:15dd]:8333\n-[2600:1f16:625:e00:a28b:5a16:849c:fe41]:8333\n-[2600:1f16:625:e00:a70f:e728:e8e1:2c2e]:8333\n-[2600:3c00::f03c:91ff:fe0c:4d74]:8333\n-[2600:3c00::f03c:91ff:fe2b:bf38]:8333\n-[2600:3c00::f03c:91ff:fe91:3e49]:8333\n-[2600:3c00::f03c:91ff:feb6:19f2]:8333\n-[2600:3c01::f03c:91ff:fe91:6a29]:8333\n-[2600:3c01::f03c:91ff:fed8:85a2]:8333\n-[2600:3c01::f03c:91ff:fed8:db38]:8333\n-[2600:3c03::f03c:91ff:fe28:1445]:8333\n-[2601:147:4300:e61::30c]:8333\n-[2601:147:4300:e61::f91]:8333\n-[2601:186:c100:6bcd:16bd:cea1:235d:1c19]:8333\n-[2601:18d:4600:5f32:20e7:b3ff:fecf:a99]:8333\n-[2601:240:4601:ecee:309a:f9de:b64d:87df]:8333\n-[2601:240:8100:256b:20c:29ff:fe5e:d707]:8333\n-[2601:646:c202:5301:101b:a096:efba:c10a]:8333\n-[2601:807:8000:9508:9993:d2b3:1a:8225]:8333\n-[2601:c8:4100:770:c37:807b:98cc:bd7e]:8333\n-[2602:100:6154:d6e3:2c91:d0de:b032:b0a4]:8333\n-[2602:100:6154:d6e3::60]:8333\n-[2602:61:786c:2c00::1]:8333\n-[2602:ff83:fff:fffe::75]:8333\n-[2602:ff83:fff:fffe::76]:8333\n-[2603:3005:3000:5000:bc5a:72ac:36e9:175e]:8333\n-[2604:0:c1:100:6bc1:f98a:97f9:3845]:8333\n-[2604:2d80:c808:857b:8d6:9e1c:7131:4bea]:8333\n-[2604:4080:1008:0:96de:80ff:fe62:e650]:8333\n-[2604:4300:a:104:b699:baff:feaa:5109]:8333\n-[2604:5500:c226:7f00:2d96:ed64:ce45:9a6]:8333\n-[2604:8d80:100::adf3:4030]:8333\n-[2604:a880:2:d0::22f8:e001]:8333\n-[2604:a880:2:d0::22f8:f001]:8333\n-[2604:a880:2:d0::22f9:1]:8333\n-[2604:a880:2:d0::22f9:1001]:8333\n-[2604:a880:2:d0::22f9:c001]:8333\n-[2604:a880:2:d0::22f9:d001]:8333\n-[2604:a880:2:d0::22f9:e001]:8333\n-[2604:a880:2:d0::22fa:1001]:8333\n-[2604:a880:2:d0::22fa:2001]:8333\n-[2604:a880:2:d0::22fa:3001]:8333\n-[2604:a880:2:d0::38:f001]:8333\n-[2604:a880:2:d0::662:c001]:8333\n-[2604:a880:400:d0::1ac4:b001]:8333\n-[2604:a880:400:d0::2004:4001]:8333\n-[2604:a880:400:d0::2004:5001]:8333\n-[2604:a880:400:d0::2004:6001]:8333\n-[2604:a880:400:d0::2004:d001]:8333\n-[2604:a880:400:d0::2004:e001]:8333\n-[2604:a880:400:d0::2005:1]:8333\n-[2604:a880:400:d0::2005:2001]:8333\n-[2604:a880:400:d0::2005:3001]:8333\n-[2604:a880:400:d0::cd7:4001]:8333\n-[2604:a880:400:d1::729:b001]:8333\n-[2604:a880:800:a1::11a9:8001]:8333\n-[2604:a880:800:a1::59:9001]:8333\n-[2604:a880:800:a1::cbb:f001]:8333\n-[2604:a880:800:a1::ee8:e001]:8333\n-[2604:a880:cad:d0::370:f001]:8333\n-[2604:a880:cad:d0::a52:6001]:8333\n-[2605:4d00::50]:8333\n-[2605:9880:0:1cf:225:90ff:fec9:29b3]:8333\n-[2605:9880:0:3::8333]:8333\n-[2605:9880:201:17::4b7c]:8333\n-[2605:a000:4a87:9501:d613:fbf8:1e82:8d3c]:8333\n-[2605:a000:f343:b700:5054:ff:fea7:131]:8333\n-[2605:a601:a41:1a00:a00:27ff:fefc:4759]:8333\n-[2605:ae00:203::203]:8333\n-[2605:c000:2a0a:1::102]:8333\n-[2605:e000:1c00:80e8:984e:a697:97a3:50ed]:8333\n-[2605:e000:1c0d:437b:5054:ff:fe1b:2913]:8333\n-[2605:e000:9093:a700:9853:4464:5f78:c484]:8333\n-[2605:f700:100:400::104e:43bd]:8333\n-[2605:f700:100:400::131:5b54]:8333\n-[2605:f700:100:c10:5575:8e73:b07c:bf5a]:8333\n-[2606:6000:c149:8830:5054:ff:fe78:66ff]:8333\n-[2607:1c00:a:6:3c1c:1b0d:ba4:8ea9]:8333\n-[2607:1c00:a:6::1000]:8333\n-[2607:5300:120:a04::]:8333\n-[2607:5300:203:2fac::]:8333\n-[2607:5300:203:408::]:8333\n-[2607:5300:203:6bc::]:18333\n-[2607:5300:203:8d::]:8333\n-[2607:5300:60:10aa::1]:8333\n-[2607:5300:60:122a::1]:8333\n-[2607:5300:60:13bb::1]:8333\n-[2607:5300:60:3ddf::]:8333\n-[2607:5300:60:5735::]:8333\n-[2607:5300:60:714::1]:8333\n-[2607:5300:60:981::1]:8333\n-[2607:5300:60:cff1::]:28633\n-[2607:9280:b:73b:250:56ff:fe21:bf32]:8333\n-[2607:f178:0:8::106]:8333\n-[2607:f1c0:823:af00::35:bbd1]:8333\n-[2607:f2c0:f00e:300:201:2eff:fe67:9130]:8333\n-[2607:fa18:0:beef::c012]:8333\n-[2607:ff28:1:7::176e:c4a5]:8333\n-[2607:ff28:1:7::65af:9afb]:8333\n-[2620:71:4000:0:192:30:120:110]:8333\n-[2801:84:0:1034:76d4:35ff:fe7f:5033]:8333\n-[2803:1500:1200:c487::1]:8333\n-[2804:14c:6582:60f0::1]:8333\n-[2804:14d:baa6:962c:486:47f6:c161:a79d]:8333\n-[2a00:13a0:3015:1:85:14:79:26]:8333\n-[2a00:16d8:c::5b6a:c261]:8333\n-[2a00:1768:2001:24::148:218]:8333\n-[2a00:1838:36:2c::ed85]:8333\n-[2a00:1a28:1157:2f8::946a]:8333\n-[2a00:1c48:6:203:a60:6eff:fe44:8086]:8333\n-[2a00:1f40:2::1126]:8333\n-[2a00:7c80:0:5d::1d0e]:8333\n-[2a00:8a60:e012:a00::21]:8333\n-[2a00:ab00:603:84::3]:8333\n-[2a00:bbe0:cc:0:6651:6ff:fe0e:9418]:8333\n-[2a00:ca8:a1f:3025:4121:5ca1:3b:4469]:8333\n-[2a00:ca8:a1f:9091:945e:80a3:830a:78cf]:8333\n-[2a01:238:433c:5300:7a61:3e1a:27f4:9dc2]:8333\n-[2a01:4240:a21:983b::c0a8:32]:8333\n-[2a01:488:66:1000:53a9:21b8:0:1]:8333\n-[2a01:4d60:3:1:5::1]:8333\n-[2a01:4f8:10a:3524::2]:8333\n-[2a01:4f8:10b:362::2]:8333\n-[2a01:4f8:10b:d50::2]:8333\n-[2a01:4f8:10b:f44::2]:8333\n-[2a01:4f8:120:1391::2]:8333\n-[2a01:4f8:120:70a3::2]:8333\n-[2a01:4f8:120:93f8::2]:8333\n-[2a01:4f8:121:2385::2]:8333\n-[2a01:4f8:130:71d2::2]:8333\n-[2a01:4f8:130:7422::2]:8333\n-[2a01:4f8:13a:124f::2]:8333\n-[2a01:4f8:13a:1dcb::2]:8333\n-[2a01:4f8:13a:708::2]:21775\n-[2a01:4f8:13a:723::2]:8333\n-[2a01:4f8:13b:109e::2]:8333\n-[2a01:4f8:13b:1a9e::201]:8333\n-[2a01:4f8:13b:271c::2]:10731\n-[2a01:4f8:13b:2d42::2]:8333\n-[2a01:4f8:13b:2d94::2]:8333\n-[2a01:4f8:13b:3810::2]:8333\n-[2a01:4f8:13b:3da8::2]:8333\n-[2a01:4f8:13b:41e6::2]:8333\n-[2a01:4f8:13b:4281::2]:8333\n-[2a01:4f8:13b:5c7::2]:8333\n-[2a01:4f8:13b:81::2]:8333\n-[2a01:4f8:140:236a:cafe::5]:8333\n-[2a01:4f8:140:324e::2]:8333\n-[2a01:4f8:140:5329::102]:8333\n-[2a01:4f8:140:5329::50:109]:8333\n-[2a01:4f8:140:931a::2]:8333\n-[2a01:4f8:140:93b0::2]:8333\n-[2a01:4f8:141:47::2]:8333\n-[2a01:4f8:150:53a4::4]:8333\n-[2a01:4f8:150:72ee::4202]:8333\n-[2a01:4f8:160:41f0::1:33]:8333\n-[2a01:4f8:160:4443::2]:8333\n-[2a01:4f8:160:6092:d7bd:a39:3e52:b65d]:8333\n-[2a01:4f8:160:60aa::2]:8333\n-[2a01:4f8:160:636e::2]:8333\n-[2a01:4f8:161:6091::2]:8333\n-[2a01:4f8:161:6111::2]:8333\n-[2a01:4f8:161:812e::2]:8333\n-[2a01:4f8:162:2c6::2]:8333\n-[2a01:4f8:162:33ac::2]:8333\n-[2a01:4f8:171:1c3::2]:8333\n-[2a01:4f8:171:2bdc::2]:8333\n-[2a01:4f8:171:3248::2]:8333\n-[2a01:4f8:171:4dc::2]:8333\n-[2a01:4f8:171:d09::2]:8333\n-[2a01:4f8:171:d4a::2]:8333\n-[2a01:4f8:171:e0d::2]:8333\n-[2a01:4f8:171:ecd::2]:8333\n-[2a01:4f8:172:1823::2]:8333\n-[2a01:4f8:173:1622::2]:8333\n-[2a01:4f8:190:50b6::2]:8333\n-[2a01:4f8:190:5176::123]:8333\n-[2a01:4f8:191:268::2]:8333\n-[2a01:4f8:192:216c::2]:8333\n-[2a01:4f8:192:628a::83]:8333\n-[2a01:4f8:1c0c:77af::1]:8333\n-[2a01:4f8:200:1012::2]:8333\n-[2a01:4f8:200:442d::2]:8333\n-[2a01:4f8:201:1113::2]:8333\n-[2a01:4f8:201:4f0::2]:8333\n-[2a01:4f8:201:53cc::2]:8333\n-[2a01:4f8:201:8026::1337]:8333\n-[2a01:4f8:201:8026::2]:8333\n-[2a01:4f8:202:32c6::2]:8333\n-[2a01:4f8:211:309::2]:8333\n-[2a01:4f8:211:f08::2]:8333\n-[2a01:4f8:212:1e16::2]:8333\n-[2a01:4f8:221:1808::2]:15000\n-[2a01:4f8:221:2e18::2]:8333\n-[2a01:4f8:221:2fcf::2]:8333\n-[2a01:4f8:221:3441::2]:8333\n-[2a01:4f8:221:3452::2]:8333\n-[2a01:4f8:221:39c1::2]:8335\n-[2a01:4f8:221:3c82::2]:8333\n-[2a01:4f8:221:3c82:fea1::666]:8333\n-[2a01:4f8:221:6cd::2]:8333\n-[2a01:4f8:221:801::2]:8333\n-[2a01:4f8:221:f59::2]:8333\n-[2a01:4f8:a0:6147::2]:8333\n-[2a01:4f8:c0c:4268::2]:8333\n-[2a01:4f8:c0c:56a5::2]:8333\n-[2a01:4f8:c17:e00::2]:8333\n-[2a01:4f9:2a:10d4::2]:8333\n-[2a01:4f9:2a:1827::2]:8333\n-[2a01:4f9:2a:192c::2]:8333\n-[2a01:4f9:2a:1c87::2]:8333\n-[2a01:4f9:2a:2510::2]:8333\n-[2a01:4f9:2a:2518::2]:8333\n-[2a01:4f9:2a:2585::2]:8333\n-[2a01:4f9:2a:2698::2]:8333\n-[2a01:4f9:2a:2d0a::2]:8333\n-[2a01:4f9:2a:2d17::2]:8333\n-[2a01:4f9:2a:347::2]:8333\n-[2a01:4f9:2a:650::2]:8333\n-[2a01:4f9:2a:d54::2]:8333\n-[2a01:4f9:c010:12e7::1]:8333\n-[2a01:4f9:c010:1736::1]:8333\n-[2a01:5d00:1:4b6:d2bf:9cff:fe45:b834]:8333\n-[2a01:79c:cebe:70cc:1a03:73ff:fe48:e691]:8333\n-[2a01:7a0:2:1374::7]:8333\n-[2a01:7a7:2:1218:ec4:7aff:fe83:83c4]:8333\n-[2a01:7a7:2:1288:ea39:35ff:fef0:c429]:8333\n-[2a01:7c8:aaba:18:5054:ff:fe2b:df20]:8333\n-[2a01:7c8:fffa:50e:3035:741b:be02:b5de]:8333\n-[2a01:be00:10:201:0:80:cece:1]:8333\n-[2a01:cb00:5be:d500:227:eff:fe28:c565]:8333\n-[2a01:cb00:b3:d300:9276:8a8c:74bf:2a88]:8333\n-[2a01:cb14:b8:a500:dd9d:80f5:d305:68f9]:8333\n-[2a01:e0a:20:9120:7c3f:5643:9978:1825]:8333\n-[2a01:e0a:d:6ea0:56:deab:1b2f:300b]:8333\n-[2a01:e34:ec16:93f0:725d:d8d2:bb90:eabf]:8333\n-[2a01:e34:ee33:1640:c418:3c3a:8ff6:3eab]:8333\n-[2a01:e34:eed7:6670:28c0:183c:7783:7dc3]:8333\n-[2a01:e35:2f7d:a0b0:59c2:3c8a:95a2:c4d1]:8333\n-[2a01:e35:87ba:d0c0:75a2:9f39:efcb:f59f]:8333\n-[2a02:120b:c3c5:cef0:ec82:a43d:4d6:dc2]:8333\n-[2a02:120b:c3d1:f2d0:eea8:6bff:fefc:2265]:8333\n-[2a02:168:404c:0:eea8:6bff:fef3:7d5c]:8333\n-[2a02:180:1:1::517:10b6]:8333\n-[2a02:180:1:1::5b8f:538c]:8333\n-[2a02:1b8:10:147::2]:8333\n-[2a02:2168:d05:2c00:216:3eff:fef7:a099]:8333\n-[2a02:2528:503:2::14]:8333\n-[2a02:2528:fa:1400::1]:8333\n-[2a02:2770:17:0:21a:4aff:fe7b:175f]:8333\n-[2a02:2770:5:0:21a:4aff:fe44:8370]:8333\n-[2a02:2808:5401:0:225:90ff:fe4e:ee42]:8333\n-[2a02:390:9000:0:218:7dff:fe10:be33]:8333\n-[2a02:750:7:c11:5054:ff:fe43:eb81]:8333\n-[2a02:7aa0:1619::590:eba2]:8333\n-[2a02:7b40:3e4d:9ed9::1]:8333\n-[2a02:7b40:50d1:e04f::1]:8333\n-[2a02:7b40:5928:f9e::1]:8333\n-[2a02:7b40:592f:a590::1]:8333\n-[2a02:7b40:b0df:82fe::1]:8333\n-[2a02:7b40:b0df:8925::1]:8333\n-[2a02:7b40:b0df:8b41::1]:8333\n-[2a02:7b40:b0df:8d57::1]:8333\n-[2a02:7b40:d418:6fcd::1]:8333\n-[2a02:8108:2340:1c18:7a:231e:1430:7f12]:8333\n-[2a02:8108:9c3f:dd18:922b:34ff:fe30:ac42]:8333\n-[2a02:810d:8a40:36f8:9af2:b3ff:fee8:6d7a]:8333\n-[2a02:8388:e301:7180:201:2eff:fe82:b3cc]:8333\n-[2a02:908:213:54a0:39bf:d4aa:60b2:d9c3]:8333\n-[2a02:908:4f0:7e1c:5054:ff:feb7:ce4b]:8333\n-[2a02:930:1:0:250:56ff:fe8e:2819]:8333\n-[2a02:a80:0:2052::2]:8333\n-[2a02:c205:0:5145::1]:8333\n-[2a02:c205:2008:272::1]:8333\n-[2a02:c205:2010:6230::1]:8333\n-[2a02:c205:2016:4327::1]:8333\n-[2a02:c205:2017:2116::1]:8333\n-[2a02:c205:2018:1754::1]:8333\n-[2a02:c205:2018:8229::1]:8333\n-[2a02:c205:3002:2787::1]:8333\n-[2a02:c205:3002:6525::1]:8333\n-[2a02:c207:0:3829::1]:8333\n-[2a02:c207:2007:4699::1]:8333\n-[2a02:c207:2009:213::1]:8333\n-[2a02:c207:2010:7751::1]:8333\n-[2a02:c207:2012:4826::1]:8333\n-[2a02:c207:2014:4199::1]:8333\n-[2a02:c207:2014:5639::1]:8333\n-[2a02:c207:2014:9913::1]:18333\n-[2a02:c207:2015:3799::1]:8333\n-[2a02:c207:2015:3926::1]:8333\n-[2a02:c207:2015:5919::1]:8333\n-[2a02:c207:2015:6681::1]:8333\n-[2a02:c207:2016:2394::1]:8333\n-[2a02:c207:2016:9375::1]:8333\n-[2a02:c207:2017:1988::1]:8333\n-[2a02:c207:2017:3720::1]:8333\n-[2a02:c207:2017:4486::1]:8333\n-[2a02:c207:2017:4708::1]:8333\n-[2a02:c207:2017:5828::1]:8333\n-[2a02:c207:2017:7320::1]:8333\n-[2a02:c207:2017:8175::1]:8333\n-[2a02:c207:2017:8998::1]:8333\n-[2a02:c207:2018:1462::1]:8333\n-[2a02:c207:2018:3094::1]:8333\n-[2a02:c207:2018:3275::1]:8333\n-[2a02:c207:2018:3710::1]:8333\n-[2a02:c207:2018:4790::1]:8333\n-[2a02:c207:2018:7407::1]:8333\n-[2a02:c207:2019:1067::1]:8333\n-[2a02:c207:2019:1425::1]:8333\n-[2a02:c207:2019:2041::1]:8333\n-[2a02:c207:2019:248::1]:8333\n-[2a02:c207:2019:3592::1]:8333\n-[2a02:c207:3001:9320::1]:8333\n-[2a02:c207:3002:1287::1]:8333\n-[2a02:c207:3002:4187::1]:8333\n-[2a02:c207:3002:5642::1]:8333\n-[2a02:c207:3002:7150::1]:8333\n-[2a02:c207:3002:7222::1]:8333\n-[2a02:c207:3002:7610::1]:8333\n-[2a02:c207:3002:8456::1]:8333\n-[2a02:ce80:0:20::1]:8333\n-[2a02:e00:fff0:1b9::1]:8333\n-[2a02:e00:fff0:1b9::a]:8333\n-[2a02:e00:fff0:1e2::1]:8333\n-[2a03:b0c0:1:d0::69:3001]:8333\n-[2a03:b0c0:2:d0::3ba:b001]:8333\n-[2a03:b0c0:2:d0::8ce:4001]:8333\n-[2a03:b0c0:3:d0::116:5001]:8333\n-[2a03:b0c0:3:d0::12a:1]:8333\n-[2a03:b0c0:3:d0::23fb:6001]:8333\n-[2a03:b0c0:3:d0::409:1001]:8333\n-[2a03:b0c0:3:d0::44b8:9001]:8333\n-[2a03:b0c0:3:d0::44b8:a001]:8333\n-[2a03:b0c0:3:d0::44b8:e001]:8333\n-[2a03:b0c0:3:d0::44b8:f001]:8333\n-[2a03:b0c0:3:d0::44b9:1]:8333\n-[2a03:b0c0:3:d0::44b9:1001]:8333\n-[2a03:b0c0:3:d0::44b9:2001]:8333\n-[2a03:b0c0:3:d0::44b9:4001]:8333\n-[2a03:b0c0:3:d0::5e48:d001]:8333\n-[2a03:ee40:0:294:250:56ff:fe8d:4ad7]:8333\n-[2a04:2180:1:c:f000::15]:8333\n-[2a07:440:2000:20::ca0:1817]:8333\n-[2a0a:c800:1:1::4]:8333\n-226eupdnaouu4h2v.onion:8333\n-23wdfqkzttmenvki.onion:8333\n-2bfsxzluysybysnr.onion:8333\n-2f4xg7m3g6vtxqcd.onion:8333\n-2i5i6kvxoggngz67.onion:8333\n-336lqgffb4tg5gpm.onion:8333\n-342ouaetvqzgepjx.onion:8333\n-3mutzniftca5w7ou.onion:8333\n-3qpbpt4gkp3dxn2r.onion:8333\n-3r44ddzjitznyahw.onion:8333\n-3xucqntxp5ddoaz5.onion:8333\n-44walnmvlhcqa3c2.onion:8333\n-4ehtdyvvzhbbo6c5.onion:8333\n-4jekbh7cdlfda3ve.onion:8333\n-4mewwo2bfxk6lg3f.onion:8333\n-53tsjt6zq3iasv5q.onion:8333\n-546esc6botbjfbxb.onion:8333\n-55zzzsk7iqv6p3ew.onion:8333\n-56stijc6kcgw6flk.onion:8333\n-5elzwcg4xysogalo.onion:8333\n-5f4ysqk4eed4jcvj.onion:8333\n-5k3oxus2laabmyip.onion:8333\n-5ptuzplawb3svsos.onion:8333\n-5rmpsrrdb3vpfgzh.onion:8333\n-5wnkqzjzjehmq7hn.onion:8333\n-5xxsqhppii22pges.onion:8333\n-5ygszbkbbauzjx7m.onion:8333\n-5z2she4d6fvrdnme.onion:8333\n-64qrhyxglyjjhkne.onion:8333\n-6kn76kajckqg22ao.onion:8333\n-6m2iqgnqjxh7ulyk.onion:8333\n-6wcfnbb3vmaw6cwa.onion:8333\n-6zynxbbupfmnvc3g.onion:8333\n-7sns7raurpmllybi.onion:8333\n-7whaszg22pdkvfck.onion:8333\n-a3a6plzycomx5gqw.onion:8333\n-acs7hylaadjkt7mk.onion:8333\n-agpwcvixadbinyet.onion:8333\n-ajqvsylg5xd5vs3y.onion:8333\n-aktfeaqkbnk52bfx.onion:8333\n-albsennsmbsgxls3.onion:8333\n-alruzrdz7xcek67f.onion:8333\n-am6aq3dluz3njcnt.onion:8333\n-aoefyxgnpgaiw2xg.onion:8333\n-ap2frg2maqxpmkkd.onion:8333\n-ap4zz4imxbdl6plr.onion:8333\n-apbbvhk32myudnyy.onion:8333\n-arlocvowxtnlbpo3.onion:8333\n-b5d6etfljm2lje5y.onion:8333\n-bdwvcwafzpssqckj.onion:8333\n-brwqezn6le54w2bb.onion:8333\n-bxxvkb7czrxtvz2c.onion:8333\n-c2tpqkaz4ihjzwgb.onion:8333\n-cgcv32rbbbjyyzow.onion:8333\n-ckkqplgkzof45h2y.onion:8333\n-cpyfqbs4fs3vnbpf.onion:8333\n-ctzuzxnvla5xvb7z.onion:8333\n-cw4iqvcdy67b5tpw.onion:8333\n-cyvpgt25274i5b7c.onion:8333\n-dmudsr7x7edvyglt.onion:8333\n-dsbn53f2dwphv5mx.onion:8333\n-dssqdj6pxnzkth6i.onion:8333\n-e3zbephvcqmzcqkr.onion:8333\n-e63i7c7qazbdtjma.onion:8333\n-eiuaj2qjvbn737ph.onion:8333\n-ep2mjzox3kvb6ax4.onion:8333\n-eyvfxeefr4eokefr.onion:8333\n-f3nfioh27j2xlfe5.onion:8333\n-f5ezxphghknfbrtg.onion:8333\n-faewczjuzs4wfxhv.onion:8333\n-fefisckqu5raqe3c.onion:8333\n-fgbss353vsvandn7.onion:8333\n-fnlkrowsyrfeub6s.onion:8333\n-fno4aakpl6sg6y47.onion:8333\n-fnpnjdk24pzgcplx.onion:8333\n-foe4ymjz4hjhowud.onion:8333\n-fql436nz7qdis3nk.onion:8333\n-frhfucww5vghf7cv.onion:8333\n-frrxefv5dir5hm7l.onion:8333\n-fuckerolyuv7ebla.onion:8333\n-fz6nsij6jiyuwlsc.onion:8333\n-g4qfwcu5wm7ze5lg.onion:8333\n-gb5ypqt63du3wfhn.onion:8333\n-gcydj5id3jcxybzr.onion:8333\n-gfvnnnwcddfzosav.onion:8333\n-golevvyaydsduuw2.onion:8333\n-gq4su6stjnosqu67.onion:8333\n-hb4oreglor5x3xoa.onion:8333\n-hbuair37dxnblurw.onion:8333\n-hda7fvzq3voh7mu6.onion:8333\n-hnvk3pgvieyixyc2.onion:8333\n-ifwxwunja4pgwydg.onion:8333\n-ijmbmziunbszzxtj.onion:8333\n-in7r5ieo7ogkxbne.onion:8333\n-inysvhakrulg6lts.onion:8333\n-iwrwbwss7lfalfg4.onion:8333\n-ja7dmgkri7fi47xk.onion:8333\n-jtksnokusbzms7wl.onion:8333\n-jwxyqhp42cmwhqf3.onion:8333\n-jxrfatqtcevzwywz.onion:8333\n-jy6mvzb2ntutiye6.onion:8333\n-jydquxzliej6dm24.onion:8333\n-k2gdzvryrx7v6ksw.onion:8333\n-kkdas3qebkosygu5.onion:8333\n-kswfyurnglm65u7b.onion:8333\n-l2pruzr3mnhieuug.onion:8333\n-lgkgcd4brjmhrqna.onion:8333\n-lgkvbvro67jomosw.onion:8333\n-llljnatksfgtlhko.onion:8333\n-mdpt6w5sjwcnxtwy.onion:8333\n-mhjcepzc4gyadw2w.onion:8333\n-mn744hbioayn3ojs.onion:8333\n-mpakpgzu7umgu3ze.onion:8333\n-mvomwfdddqfqg3lq.onion:8333\n-mx5kdfxwowc3ymzg.onion:8333\n-n4m32zcp5hvomkt4.onion:8333\n-n73steqcmjz5hwni.onion:8333\n-nc2bgkhqohrmwbxr.onion:8333\n-nc6zlswwqqg7c5yz.onion:8333\n-nrrfwdmrm3imuebn.onion:8333\n-nrrmkgmulpgsbwlt.onion:8333\n-o2tku2dbsd6iumch.onion:8333\n-o72zyzrv77ea2bwu.onion:8333\n-ohgwa5y65z4eem7b.onion:8333\n-olvdu57g7rxwpcr4.onion:8333\n-onlzo775ogdpjn5x.onion:8333\n-otshttbd6v2k3jlz.onion:8333\n-owr5tm7ygw62z4vl.onion:8333\n-pcfhsdqzs6q63ryu.onion:8333\n-pffwqxvuldeq55zc.onion:8333\n-pgnz7kwc36rcucpu.onion:8333\n-ph4g7b4jsyuntvr4.onion:8333\n-pjghcivzkoersesd.onion:8333\n-pu7w3jfyrzp7sxsi.onion:8333\n-pxvkjp6sfb2f7foe.onion:8333\n-qaxm5spmx5d2k3up.onion:8333\n-qepth54daysmpy5y.onion:8333\n-qj6irqn2i73edff5.onion:8333\n-qjpejfzlwqqnzsol.onion:8333\n-qxe3bqjmrcepxpx4.onion:8333\n-rlonjm7ui6fdyz4h.onion:8333\n-rs635ss24ymwyqkw.onion:8333\n-sgiitogeoqslvkjv.onion:8333\n-spidernetimmmkth.onion:8333\n-tb7qlicrt6rdzxzd.onion:8333\n-thbjka62axzuwtnt.onion:8333\n-toguvy5upyuctudx.onion:8333\n-u7mpvxotmnqntyn5.onion:8333\n-uccmw67l4kgl646y.onion:8333\n-ueo6royc3775ioq7.onion:8333\n-ujsb2qcjk4t6234z.onion:8333\n-uub43p3artmornv5.onion:8333\n-uvb55mwvuy22mgm2.onion:8333\n-uzzyjgqlf47ackbr.onion:8333\n-v5fgr3fnz3nw663t.onion:8333\n-v5zs2sgjyr3glh6c.onion:8333\n-vk3qjdehyy4dwcxw.onion:8333\n-voy6xbvejox4xbax.onion:8333\n-vuiw75kgpcqke4mv.onion:8333\n-w3q47ucyajtfic76.onion:8333\n-wg6vwmbrzyyzapun.onion:8333\n-wgpfwxgy2dowienn.onion:8333\n-wjtmvsznvdclncau.onion:8333\n-xab45bpmmrl5g3by.onion:8333\n-xdlu3ujzieheouo7.onion:8333\n-xgykmaa2jjay7cfu.onion:8333\n-xnlu3tvakngy7tkp.onion:8333\n-xsn5icce45gs3qy7.onion:8333\n-ydonogjpjd3me45v.onion:8333\n-ykn7vof37bavxetd.onion:8333\n-yl525dwhvqis7ryc.onion:8333\n-yrbaccpbyge6xaba.onion:8333\n-yyuxafli7fqdizhq.onion:8333\n-z33nukt7ngik3cpe.onion:8333\n-zon2bbc2q2ihqt4c.onion:8333\n-zqjvtxskxonu4kzv.onion:8333\n+192.168.100.12:9333\n\\ No newline at end of file"
      },
      {
        "sha": "83624f443a7f9f71ba2a1f1c2dbc3d3a8297bc7d",
        "filename": "contrib/testgen/README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/testgen/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/testgen/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/testgen/README.md?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -4,5 +4,5 @@ Utilities to generate test vectors for the data-driven Bitcoin tests.\n \n Usage: \n \n-    PYTHONPATH=../../test/functional/test_framework ./gen_key_io_test_vectors.py valid 50 > ../../src/test/data/key_io_keys_valid.json\n-    PYTHONPATH=../../test/functional/test_framework ./gen_key_io_test_vectors.py invalid 50 > ../../src/test/data/key_io_keys_invalid.json\n+    gen_base58_test_vectors.py valid 50 > ../../src/test/data/base58_keys_valid.json\n+    gen_base58_test_vectors.py invalid 50 > ../../src/test/data/base58_keys_invalid.json\n\\ No newline at end of file"
      },
      {
        "sha": "c76de5ce750e3d328a83c5d407e74bf901bb9d85",
        "filename": "contrib/testgen/gen_base58_test_vectors.py",
        "status": "added",
        "additions": 132,
        "deletions": 0,
        "changes": 132,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/testgen/gen_base58_test_vectors.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/testgen/gen_base58_test_vectors.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/testgen/gen_base58_test_vectors.py?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -0,0 +1,132 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2012-2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+'''\n+Generate valid and invalid base58 address and private key test vectors.\n+\n+Usage:\n+    gen_base58_test_vectors.py valid 50 > ../../src/test/data/base58_keys_valid.json\n+    gen_base58_test_vectors.py invalid 50 > ../../src/test/data/base58_keys_invalid.json\n+'''\n+# 2012 Wladimir J. van der Laan\n+# Released under MIT License\n+import os\n+from itertools import islice\n+from base58 import b58encode_chk, b58decode_chk, b58chars\n+import random\n+from binascii import b2a_hex\n+\n+# key types\n+PUBKEY_ADDRESS = 0\n+SCRIPT_ADDRESS = 5\n+PUBKEY_ADDRESS_TEST = 111\n+SCRIPT_ADDRESS_TEST = 196\n+PRIVKEY = 128\n+PRIVKEY_TEST = 239\n+\n+metadata_keys = ['isPrivkey', 'isTestnet', 'addrType', 'isCompressed']\n+# templates for valid sequences\n+templates = [\n+  # prefix, payload_size, suffix, metadata\n+  #                                  None = N/A\n+  ((PUBKEY_ADDRESS,),      20, (),   (False, False, 'pubkey', None)),\n+  ((SCRIPT_ADDRESS,),      20, (),   (False, False, 'script',  None)),\n+  ((PUBKEY_ADDRESS_TEST,), 20, (),   (False, True,  'pubkey', None)),\n+  ((SCRIPT_ADDRESS_TEST,), 20, (),   (False, True,  'script',  None)),\n+  ((PRIVKEY,),             32, (),   (True,  False, None,  False)),\n+  ((PRIVKEY,),             32, (1,), (True,  False, None,  True)),\n+  ((PRIVKEY_TEST,),        32, (),   (True,  True,  None,  False)),\n+  ((PRIVKEY_TEST,),        32, (1,), (True,  True,  None,  True))\n+]\n+\n+def is_valid(v):\n+    '''Check vector v for validity'''\n+    result = b58decode_chk(v)\n+    if result is None:\n+        return False\n+    for template in templates:\n+        prefix = bytearray(template[0])\n+        suffix = bytearray(template[2])\n+        if result.startswith(prefix) and result.endswith(suffix):\n+            if (len(result) - len(prefix) - len(suffix)) == template[1]:\n+                return True\n+    return False\n+\n+def gen_valid_vectors():\n+    '''Generate valid test vectors'''\n+    while True:\n+        for template in templates:\n+            prefix = bytearray(template[0])\n+            payload = bytearray(os.urandom(template[1]))\n+            suffix = bytearray(template[2])\n+            rv = b58encode_chk(prefix + payload + suffix)\n+            assert is_valid(rv)\n+            metadata = {x: y for x, y in zip(metadata_keys,template[3]) if y is not None}\n+            hexrepr = b2a_hex(payload)\n+            if isinstance(hexrepr, bytes):\n+                hexrepr = hexrepr.decode('utf8')\n+            yield (rv, hexrepr, metadata)\n+\n+def gen_invalid_vector(template, corrupt_prefix, randomize_payload_size, corrupt_suffix):\n+    '''Generate possibly invalid vector'''\n+    if corrupt_prefix:\n+        prefix = os.urandom(1)\n+    else:\n+        prefix = bytearray(template[0])\n+\n+    if randomize_payload_size:\n+        payload = os.urandom(max(int(random.expovariate(0.5)), 50))\n+    else:\n+        payload = os.urandom(template[1])\n+\n+    if corrupt_suffix:\n+        suffix = os.urandom(len(template[2]))\n+    else:\n+        suffix = bytearray(template[2])\n+\n+    return b58encode_chk(prefix + payload + suffix)\n+\n+def randbool(p = 0.5):\n+    '''Return True with P(p)'''\n+    return random.random() < p\n+\n+def gen_invalid_vectors():\n+    '''Generate invalid test vectors'''\n+    # start with some manual edge-cases\n+    yield \"\",\n+    yield \"x\",\n+    while True:\n+        # kinds of invalid vectors:\n+        #   invalid prefix\n+        #   invalid payload length\n+        #   invalid (randomized) suffix (add random data)\n+        #   corrupt checksum\n+        for template in templates:\n+            val = gen_invalid_vector(template, randbool(0.2), randbool(0.2), randbool(0.2))\n+            if random.randint(0,10)<1: # line corruption\n+                if randbool(): # add random character to end\n+                    val += random.choice(b58chars)\n+                else: # replace random character in the middle\n+                    n = random.randint(0, len(val))\n+                    val = val[0:n] + random.choice(b58chars) + val[n+1:]\n+            if not is_valid(val):\n+                yield val,\n+\n+if __name__ == '__main__':\n+    import sys\n+    import json\n+    iters = {'valid':gen_valid_vectors, 'invalid':gen_invalid_vectors}\n+    try:\n+        uiter = iters[sys.argv[1]]\n+    except IndexError:\n+        uiter = gen_valid_vectors\n+    try:\n+        count = int(sys.argv[2])\n+    except IndexError:\n+        count = 0\n+\n+    data = list(islice(uiter(), count))\n+    json.dump(data, sys.stdout, sort_keys=True, indent=4)\n+    sys.stdout.write('\\n')\n+"
      },
      {
        "sha": "a00acb1f41fe478fd332ba1deab7729dbaf19be1",
        "filename": "contrib/testgen/gen_key_io_test_vectors.py",
        "status": "removed",
        "additions": 0,
        "deletions": 249,
        "changes": 249,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/contrib/testgen/gen_key_io_test_vectors.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/contrib/testgen/gen_key_io_test_vectors.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/testgen/gen_key_io_test_vectors.py?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "patch": "@@ -1,249 +0,0 @@\n-#!/usr/bin/env python3\n-# Copyright (c) 2012-2018 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-'''\n-Generate valid and invalid base58 address and private key test vectors.\n-\n-Usage:\n-    PYTHONPATH=../../test/functional/test_framework ./gen_key_io_test_vectors.py valid 50 > ../../src/test/data/key_io_valid.json\n-    PYTHONPATH=../../test/functional/test_framework ./gen_key_io_test_vectors.py invalid 50 > ../../src/test/data/key_io_invalid.json\n-'''\n-# 2012 Wladimir J. van der Laan\n-# Released under MIT License\n-import os\n-from itertools import islice\n-from base58 import b58encode_chk, b58decode_chk, b58chars\n-import random\n-from binascii import b2a_hex\n-from segwit_addr import bech32_encode, decode, convertbits, CHARSET\n-\n-# key types\n-PUBKEY_ADDRESS = 0\n-SCRIPT_ADDRESS = 5\n-PUBKEY_ADDRESS_TEST = 111\n-SCRIPT_ADDRESS_TEST = 196\n-PUBKEY_ADDRESS_REGTEST = 111\n-SCRIPT_ADDRESS_REGTEST = 196\n-PRIVKEY = 128\n-PRIVKEY_TEST = 239\n-PRIVKEY_REGTEST = 239\n-\n-# script\n-OP_0 = 0x00\n-OP_1 = 0x51\n-OP_2 = 0x52\n-OP_16 = 0x60\n-OP_DUP = 0x76\n-OP_EQUAL = 0x87\n-OP_EQUALVERIFY = 0x88\n-OP_HASH160 = 0xa9\n-OP_CHECKSIG = 0xac\n-pubkey_prefix = (OP_DUP, OP_HASH160, 20)\n-pubkey_suffix = (OP_EQUALVERIFY, OP_CHECKSIG)\n-script_prefix = (OP_HASH160, 20)\n-script_suffix = (OP_EQUAL,)\n-p2wpkh_prefix = (OP_0, 20)\n-p2wsh_prefix = (OP_0, 32)\n-\n-metadata_keys = ['isPrivkey', 'chain', 'isCompressed', 'tryCaseFlip']\n-# templates for valid sequences\n-templates = [\n-  # prefix, payload_size, suffix, metadata, output_prefix, output_suffix\n-  #                                  None = N/A\n-  ((PUBKEY_ADDRESS,),         20, (),   (False, 'main',    None,  None), pubkey_prefix, pubkey_suffix),\n-  ((SCRIPT_ADDRESS,),         20, (),   (False, 'main',    None,  None), script_prefix, script_suffix),\n-  ((PUBKEY_ADDRESS_TEST,),    20, (),   (False, 'test',    None,  None), pubkey_prefix, pubkey_suffix),\n-  ((SCRIPT_ADDRESS_TEST,),    20, (),   (False, 'test',    None,  None), script_prefix, script_suffix),\n-  ((PUBKEY_ADDRESS_REGTEST,), 20, (),   (False, 'regtest', None,  None), pubkey_prefix, pubkey_suffix),\n-  ((SCRIPT_ADDRESS_REGTEST,), 20, (),   (False, 'regtest', None,  None), script_prefix, script_suffix),\n-  ((PRIVKEY,),                32, (),   (True,  'main',    False, None), (),            ()),\n-  ((PRIVKEY,),                32, (1,), (True,  'main',    True,  None), (),            ()),\n-  ((PRIVKEY_TEST,),           32, (),   (True,  'test',    False, None), (),            ()),\n-  ((PRIVKEY_TEST,),           32, (1,), (True,  'test',    True,  None), (),            ()),\n-  ((PRIVKEY_REGTEST,),        32, (),   (True,  'regtest', False, None), (),            ()),\n-  ((PRIVKEY_REGTEST,),        32, (1,), (True,  'regtest', True,  None), (),            ())\n-]\n-# templates for valid bech32 sequences\n-bech32_templates = [\n-  # hrp, version, witprog_size, metadata, output_prefix\n-  ('bc',    0, 20, (False, 'main',    None, True), p2wpkh_prefix),\n-  ('bc',    0, 32, (False, 'main',    None, True), p2wsh_prefix),\n-  ('bc',    1,  2, (False, 'main',    None, True), (OP_1, 2)),\n-  ('tb',    0, 20, (False, 'test',    None, True), p2wpkh_prefix),\n-  ('tb',    0, 32, (False, 'test',    None, True), p2wsh_prefix),\n-  ('tb',    2, 16, (False, 'test',    None, True), (OP_2, 16)),\n-  ('bcrt',  0, 20, (False, 'regtest', None, True), p2wpkh_prefix),\n-  ('bcrt',  0, 32, (False, 'regtest', None, True), p2wsh_prefix),\n-  ('bcrt', 16, 40, (False, 'regtest', None, True), (OP_16, 40))\n-]\n-# templates for invalid bech32 sequences\n-bech32_ng_templates = [\n-  # hrp, version, witprog_size, invalid_bech32, invalid_checksum, invalid_char\n-  ('tc',    0, 20, False, False, False),\n-  ('tb',   17, 32, False, False, False),\n-  ('bcrt',  3,  1, False, False, False),\n-  ('bc',   15, 41, False, False, False),\n-  ('tb',    0, 16, False, False, False),\n-  ('bcrt',  0, 32, True,  False, False),\n-  ('bc',    0, 16, True,  False, False),\n-  ('tb',    0, 32, False, True,  False),\n-  ('bcrt',  0, 20, False, False, True)\n-]\n-\n-def is_valid(v):\n-    '''Check vector v for validity'''\n-    if len(set(v) - set(b58chars)) > 0:\n-        return is_valid_bech32(v)\n-    result = b58decode_chk(v)\n-    if result is None:\n-        return is_valid_bech32(v)\n-    for template in templates:\n-        prefix = bytearray(template[0])\n-        suffix = bytearray(template[2])\n-        if result.startswith(prefix) and result.endswith(suffix):\n-            if (len(result) - len(prefix) - len(suffix)) == template[1]:\n-                return True\n-    return is_valid_bech32(v)\n-\n-def is_valid_bech32(v):\n-    '''Check vector v for bech32 validity'''\n-    for hrp in ['bc', 'tb', 'bcrt']:\n-        if decode(hrp, v) != (None, None):\n-            return True\n-    return False\n-\n-def gen_valid_base58_vector(template):\n-    '''Generate valid base58 vector'''\n-    prefix = bytearray(template[0])\n-    payload = bytearray(os.urandom(template[1]))\n-    suffix = bytearray(template[2])\n-    dst_prefix = bytearray(template[4])\n-    dst_suffix = bytearray(template[5])\n-    rv = b58encode_chk(prefix + payload + suffix)\n-    return rv, dst_prefix + payload + dst_suffix\n-\n-def gen_valid_bech32_vector(template):\n-    '''Generate valid bech32 vector'''\n-    hrp = template[0]\n-    witver = template[1]\n-    witprog = bytearray(os.urandom(template[2]))\n-    dst_prefix = bytearray(template[4])\n-    rv = bech32_encode(hrp, [witver] + convertbits(witprog, 8, 5))\n-    return rv, dst_prefix + witprog\n-\n-def gen_valid_vectors():\n-    '''Generate valid test vectors'''\n-    glist = [gen_valid_base58_vector, gen_valid_bech32_vector]\n-    tlist = [templates, bech32_templates]\n-    while True:\n-        for template, valid_vector_generator in [(t, g) for g, l in zip(glist, tlist) for t in l]:\n-            rv, payload = valid_vector_generator(template)\n-            assert is_valid(rv)\n-            metadata = {x: y for x, y in zip(metadata_keys,template[3]) if y is not None}\n-            hexrepr = b2a_hex(payload)\n-            if isinstance(hexrepr, bytes):\n-                hexrepr = hexrepr.decode('utf8')\n-            yield (rv, hexrepr, metadata)\n-\n-def gen_invalid_base58_vector(template):\n-    '''Generate possibly invalid vector'''\n-    # kinds of invalid vectors:\n-    #   invalid prefix\n-    #   invalid payload length\n-    #   invalid (randomized) suffix (add random data)\n-    #   corrupt checksum\n-    corrupt_prefix = randbool(0.2)\n-    randomize_payload_size = randbool(0.2)\n-    corrupt_suffix = randbool(0.2)\n-\n-    if corrupt_prefix:\n-        prefix = os.urandom(1)\n-    else:\n-        prefix = bytearray(template[0])\n-\n-    if randomize_payload_size:\n-        payload = os.urandom(max(int(random.expovariate(0.5)), 50))\n-    else:\n-        payload = os.urandom(template[1])\n-\n-    if corrupt_suffix:\n-        suffix = os.urandom(len(template[2]))\n-    else:\n-        suffix = bytearray(template[2])\n-\n-    val = b58encode_chk(prefix + payload + suffix)\n-    if random.randint(0,10)<1: # line corruption\n-        if randbool(): # add random character to end\n-            val += random.choice(b58chars)\n-        else: # replace random character in the middle\n-            n = random.randint(0, len(val))\n-            val = val[0:n] + random.choice(b58chars) + val[n+1:]\n-\n-    return val\n-\n-def gen_invalid_bech32_vector(template):\n-    '''Generate possibly invalid bech32 vector'''\n-    no_data = randbool(0.1)\n-    to_upper = randbool(0.1)\n-    hrp = template[0]\n-    witver = template[1]\n-    witprog = bytearray(os.urandom(template[2]))\n-\n-    if no_data:\n-        rv = bech32_encode(hrp, [])\n-    else:\n-        data = [witver] + convertbits(witprog, 8, 5)\n-        if template[3] and not no_data:\n-            if template[2] % 5 in {2, 4}:\n-                data[-1] |= 1\n-            else:\n-                data.append(0)\n-        rv = bech32_encode(hrp, data)\n-\n-    if template[4]:\n-        i = len(rv) - random.randrange(1, 7)\n-        rv = rv[:i] + random.choice(CHARSET.replace(rv[i], '')) + rv[i + 1:]\n-    if template[5]:\n-        i = len(hrp) + 1 + random.randrange(0, len(rv) - len(hrp) - 4)\n-        rv = rv[:i] + rv[i:i + 4].upper() + rv[i + 4:]\n-\n-    if to_upper:\n-        rv = rv.swapcase()\n-\n-    return rv\n-\n-def randbool(p = 0.5):\n-    '''Return True with P(p)'''\n-    return random.random() < p\n-\n-def gen_invalid_vectors():\n-    '''Generate invalid test vectors'''\n-    # start with some manual edge-cases\n-    yield \"\",\n-    yield \"x\",\n-    glist = [gen_invalid_base58_vector, gen_invalid_bech32_vector]\n-    tlist = [templates, bech32_ng_templates]\n-    while True:\n-        for template, invalid_vector_generator in [(t, g) for g, l in zip(glist, tlist) for t in l]:\n-            val = invalid_vector_generator(template)\n-            if not is_valid(val):\n-                yield val,\n-\n-if __name__ == '__main__':\n-    import sys\n-    import json\n-    iters = {'valid':gen_valid_vectors, 'invalid':gen_invalid_vectors}\n-    try:\n-        uiter = iters[sys.argv[1]]\n-    except IndexError:\n-        uiter = gen_valid_vectors\n-    try:\n-        count = int(sys.argv[2])\n-    except IndexError:\n-        count = 0\n-\n-    data = list(islice(uiter(), count))\n-    json.dump(data, sys.stdout, sort_keys=True, indent=4)\n-    sys.stdout.write('\\n')\n-"
      },
      {
        "sha": "aa805ad1b96b962c4eb571732cba4edfb08728db",
        "filename": "contrib/verify-commits/README.md",
        "status": "modified",
        "additions": 4,
        "deletions": 13,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/verify-commits/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/verify-commits/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/README.md?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -3,7 +3,7 @@ Tooling for verification of PGP signed commits\n \n This is an incomplete work in progress, but currently includes a pre-push hook\n script (`pre-push-hook.sh`) for maintainers to ensure that their own commits\n-are PGP signed (nearly always merge commits), as well as a Python 3 script to verify\n+are PGP signed (nearly always merge commits), as well as a script to verify\n commits against a trusted keys list.\n \n \n@@ -17,11 +17,9 @@ be backdoored. Instead, you need to use a trusted version of verify-commits\n prior to checkout to make sure you're checking out only code signed by trusted\n keys:\n \n- ```sh\n- git fetch origin && \\\n- ./contrib/verify-commits/verify-commits.py origin/master && \\\n- git checkout origin/master\n- ```\n+    git fetch origin && \\\n+      ./contrib/verify-commits/verify-commits.py origin/master && \\\n+      git checkout origin/master\n \n Note that the above isn't a good UI/UX yet, and needs significant improvements\n to make it more convenient and reduce the chance of errors; pull-reqs\n@@ -35,13 +33,6 @@ Configuration files\n * `trusted-keys`: This file should contain a \\n-delimited list of all PGP fingerprints of authorized commit signers (primary, not subkeys).\n * `allow-revsig-commits`: This file should contain a \\n-delimited list of git commit hashes. See next section for more info.\n \n-Import trusted keys\n--------------------\n-In order to check the commit signatures you must add the trusted PGP keys to your machine. This can be done in Linux by running\n-```sh\n-gpg --recv-keys $(<contrib/verify-commits/trusted-keys)\n-```\n-\n Key expiry/revocation\n ---------------------\n "
      },
      {
        "sha": "5610692616e1dd228252f4abc58f3d1a66cefaa0",
        "filename": "contrib/verify-commits/trusted-keys",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/verify-commits/trusted-keys",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/verify-commits/trusted-keys",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/trusted-keys?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -2,4 +2,3 @@\n 133EAC179436F14A5CF1B794860FEB804E669320\n 32EE5C4C3FA15CCADB46ABE529D4BCB6416F53EC\n B8B3F1C0E58C15DB6A81D30C3648A882F4316B9B\n-CA03882CB1FC067B5D3ACFE4D300116E1C875A3D"
      },
      {
        "sha": "a9e4977715208f398183b28e80c9db36571daf91",
        "filename": "contrib/verify-commits/verify-commits.py",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/verify-commits/verify-commits.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/verify-commits/verify-commits.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/verify-commits.py?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -91,7 +91,7 @@ def main():\n     no_sha1 = True\n     prev_commit = \"\"\n     initial_commit = current_commit\n-    branch = subprocess.check_output([GIT, 'show', '-s', '--format=%H', initial_commit], universal_newlines=True, encoding='utf8').splitlines()[0]\n+    branch = subprocess.check_output([GIT, 'show', '-s', '--format=%H', initial_commit], universal_newlines=True).splitlines()[0]\n \n     # Iterate through commits\n     while True:\n@@ -112,7 +112,7 @@ def main():\n             if prev_commit != \"\":\n                 print(\"No parent of {} was signed with a trusted key!\".format(prev_commit), file=sys.stderr)\n                 print(\"Parents are:\", file=sys.stderr)\n-                parents = subprocess.check_output([GIT, 'show', '-s', '--format=format:%P', prev_commit], universal_newlines=True, encoding='utf8').splitlines()[0].split(' ')\n+                parents = subprocess.check_output([GIT, 'show', '-s', '--format=format:%P', prev_commit], universal_newlines=True).splitlines()[0].split(' ')\n                 for parent in parents:\n                     subprocess.call([GIT, 'show', '-s', parent], stdout=sys.stderr)\n             else:\n@@ -122,25 +122,25 @@ def main():\n         # Check the Tree-SHA512\n         if (verify_tree or prev_commit == \"\") and current_commit not in incorrect_sha512_allowed:\n             tree_hash = tree_sha512sum(current_commit)\n-            if (\"Tree-SHA512: {}\".format(tree_hash)) not in subprocess.check_output([GIT, 'show', '-s', '--format=format:%B', current_commit], universal_newlines=True, encoding='utf8').splitlines():\n+            if (\"Tree-SHA512: {}\".format(tree_hash)) not in subprocess.check_output([GIT, 'show', '-s', '--format=format:%B', current_commit], universal_newlines=True).splitlines():\n                 print(\"Tree-SHA512 did not match for commit \" + current_commit, file=sys.stderr)\n                 sys.exit(1)\n \n         # Merge commits should only have two parents\n-        parents = subprocess.check_output([GIT, 'show', '-s', '--format=format:%P', current_commit], universal_newlines=True, encoding='utf8').splitlines()[0].split(' ')\n+        parents = subprocess.check_output([GIT, 'show', '-s', '--format=format:%P', current_commit], universal_newlines=True).splitlines()[0].split(' ')\n         if len(parents) > 2:\n             print(\"Commit {} is an octopus merge\".format(current_commit), file=sys.stderr)\n             sys.exit(1)\n \n         # Check that the merge commit is clean\n-        commit_time = int(subprocess.check_output([GIT, 'show', '-s', '--format=format:%ct', current_commit], universal_newlines=True, encoding='utf8').splitlines()[0])\n+        commit_time = int(subprocess.check_output([GIT, 'show', '-s', '--format=format:%ct', current_commit], universal_newlines=True).splitlines()[0])\n         check_merge = commit_time > time.time() - args.clean_merge * 24 * 60 * 60  # Only check commits in clean_merge days\n         allow_unclean = current_commit in unclean_merge_allowed\n         if len(parents) == 2 and check_merge and not allow_unclean:\n-            current_tree = subprocess.check_output([GIT, 'show', '--format=%T', current_commit], universal_newlines=True, encoding='utf8').splitlines()[0]\n+            current_tree = subprocess.check_output([GIT, 'show', '--format=%T', current_commit], universal_newlines=True).splitlines()[0]\n             subprocess.call([GIT, 'checkout', '--force', '--quiet', parents[0]])\n-            subprocess.call([GIT, 'merge', '--no-ff', '--quiet', '--no-gpg-sign', parents[1]], stdout=subprocess.DEVNULL)\n-            recreated_tree = subprocess.check_output([GIT, 'show', '--format=format:%T', 'HEAD'], universal_newlines=True, encoding='utf8').splitlines()[0]\n+            subprocess.call([GIT, 'merge', '--no-ff', '--quiet', parents[1]], stdout=subprocess.DEVNULL)\n+            recreated_tree = subprocess.check_output([GIT, 'show', '--format=format:%T', 'HEAD'], universal_newlines=True).splitlines()[0]\n             if current_tree != recreated_tree:\n                 print(\"Merge commit {} is not clean\".format(current_commit), file=sys.stderr)\n                 subprocess.call([GIT, 'diff', current_commit])"
      },
      {
        "sha": "26962b2d7dcfb188d81661f8c367d215f58b5fe4",
        "filename": "contrib/verifybinaries/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/verifybinaries/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/verifybinaries/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifybinaries/README.md?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -5,7 +5,7 @@\n Make sure you obtain the proper release signing key and verify the fingerprint with several independent sources.\n \n ```sh\n-$ gpg --fingerprint \"Bitcoin Core binary release signing key\"\n+$ gpg --fingerprint \"BitcoinV Core binary release signing key\"\n pub   4096R/36C2E964 2015-06-24 [expires: 2017-02-13]\n       Key fingerprint = 01EA 5486 DE18 A882 D4C2  6845 90C8 019E 36C2 E964\n uid                  Wladimir J. van der Laan (Bitcoin Core binary release signing key) <laanwj@gmail.com>"
      },
      {
        "sha": "20763e935d1030278549c2f8f4ddad6ae2645ebb",
        "filename": "contrib/zmq/zmq_sub.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/zmq/zmq_sub.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/zmq/zmq_sub.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/zmq/zmq_sub.py?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -42,7 +42,6 @@ def __init__(self):\n         self.zmqContext = zmq.asyncio.Context()\n \n         self.zmqSubSocket = self.zmqContext.socket(zmq.SUB)\n-        self.zmqSubSocket.setsockopt(zmq.RCVHWM, 0)\n         self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"hashblock\")\n         self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"hashtx\")\n         self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"rawblock\")"
      },
      {
        "sha": "7e608c1a50f02e6598bc82b9e0e3395dfac68af9",
        "filename": "contrib/zmq/zmq_sub3.4.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/zmq/zmq_sub3.4.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/contrib/zmq/zmq_sub3.4.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/zmq/zmq_sub3.4.py?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -46,7 +46,6 @@ def __init__(self):\n         self.zmqContext = zmq.asyncio.Context()\n \n         self.zmqSubSocket = self.zmqContext.socket(zmq.SUB)\n-        self.zmqSubSocket.setsockopt(zmq.RCVHWM, 0)\n         self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"hashblock\")\n         self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"hashtx\")\n         self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"rawblock\")"
      },
      {
        "sha": "3686aaf1f877e1916256eed0ca7032307bc792f9",
        "filename": "depends/Makefile",
        "status": "modified",
        "additions": 1,
        "deletions": 8,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/depends/Makefile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/depends/Makefile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/Makefile?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -5,7 +5,6 @@ WORK_PATH = $(BASEDIR)/work\n BASE_CACHE ?= $(BASEDIR)/built\n SDK_PATH ?= $(BASEDIR)/SDKs\n NO_QT ?=\n-RAPIDCHECK ?=\n NO_WALLET ?=\n NO_UPNP ?=\n FALLBACK_DOWNLOAD_PATH ?= https://bitcoincore.org/depends-sources\n@@ -15,7 +14,7 @@ HOST ?= $(BUILD)\n PATCHES_PATH = $(BASEDIR)/patches\n BASEDIR = $(CURDIR)\n HASH_LENGTH:=11\n-DOWNLOAD_CONNECT_TIMEOUT:=30\n+DOWNLOAD_CONNECT_TIMEOUT:=10\n DOWNLOAD_RETRIES:=3\n HOST_ID_SALT ?= salt\n BUILD_ID_SALT ?= salt\n@@ -94,19 +93,13 @@ qt_packages_$(NO_QT) = $(qt_packages) $(qt_$(host_os)_packages) $(qt_$(host_arch\n wallet_packages_$(NO_WALLET) = $(wallet_packages)\n upnp_packages_$(NO_UPNP) = $(upnp_packages)\n \n-rapidcheck_packages_$(RAPIDCHECK) = $(rapidcheck_packages)\n-\n packages += $($(host_arch)_$(host_os)_packages) $($(host_os)_packages) $(qt_packages_) $(wallet_packages_) $(upnp_packages_)\n native_packages += $($(host_arch)_$(host_os)_native_packages) $($(host_os)_native_packages)\n \n ifneq ($(qt_packages_),)\n native_packages += $(qt_native_packages)\n endif\n \n-ifeq ($(rapidcheck_packages_),)\n-packages += $(rapidcheck_packages)\n-endif\n-\n all_packages = $(packages) $(native_packages)\n \n meta_depends = Makefile funcs.mk builders/default.mk hosts/default.mk hosts/$(host_os).mk builders/$(build_os).mk"
      },
      {
        "sha": "fd343f701017c00e015de2fded2c3deccee84c6c",
        "filename": "depends/README.md",
        "status": "modified",
        "additions": 9,
        "deletions": 19,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/depends/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/depends/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/README.md?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -30,38 +30,29 @@ Common `host-platform-triplets` for cross compilation are:\n \n No other options are needed, the paths are automatically configured.\n \n-### Install the required dependencies: Ubuntu & Debian\n+Install the required dependencies: Ubuntu & Debian\n+--------------------------------------------------\n \n-#### For macOS cross compilation\n+For macOS cross compilation:\n \n     sudo apt-get install curl librsvg2-bin libtiff-tools bsdmainutils cmake imagemagick libcap-dev libz-dev libbz2-dev python-setuptools\n \n-#### For Win32/Win64 cross compilation\n+For Win32/Win64 cross compilation:\n \n - see [build-windows.md](../doc/build-windows.md#cross-compilation-for-ubuntu-and-windows-subsystem-for-linux)\n \n-#### For linux (including i386, ARM) cross compilation\n+For linux (including i386, ARM) cross compilation:\n \n-Common linux dependencies:\n-\n-    sudo apt-get install make automake cmake curl g++-multilib libtool binutils-gold bsdmainutils pkg-config python3\n-\n-For linux ARM cross compilation:\n-\n-    sudo apt-get install g++-arm-linux-gnueabihf binutils-arm-linux-gnueabihf\n-\n-For linux AARCH64 cross compilation:\n-\n-    sudo apt-get install g++-aarch64-linux-gnu binutils-aarch64-linux-gnu\n+    sudo apt-get install curl g++-aarch64-linux-gnu g++-4.8-aarch64-linux-gnu gcc-4.8-aarch64-linux-gnu binutils-aarch64-linux-gnu g++-arm-linux-gnueabihf g++-4.8-arm-linux-gnueabihf gcc-4.8-arm-linux-gnueabihf binutils-arm-linux-gnueabihf g++-4.8-multilib gcc-4.8-multilib binutils-gold bsdmainutils\n \n For linux RISC-V 64-bit cross compilation (there are no packages for 32-bit):\n \n-    sudo apt-get install g++-riscv64-linux-gnu binutils-riscv64-linux-gnu\n+    sudo apt-get install curl g++-riscv64-linux-gnu binutils-riscv64-linux-gnu\n \n RISC-V known issue: gcc-7.3.0 and gcc-7.3.1 result in a broken `test_bitcoin` executable (see https://github.com/bitcoin/bitcoin/pull/13543),\n this is apparently fixed in gcc-8.1.0.\n \n-### Dependency Options\n+Dependency Options:\n The following can be set when running make: make FOO=bar\n \n     SOURCES_PATH: downloaded sources will be placed here\n@@ -72,14 +63,13 @@ The following can be set when running make: make FOO=bar\n     NO_WALLET: Don't download/build/cache libs needed to enable the wallet\n     NO_UPNP: Don't download/build/cache packages needed for enabling upnp\n     DEBUG: disable some optimizations and enable more runtime checking\n-    RAPIDCHECK: build rapidcheck (experimental)\n     HOST_ID_SALT: Optional salt to use when generating host package ids\n     BUILD_ID_SALT: Optional salt to use when generating build package ids\n \n If some packages are not built, for example `make NO_WALLET=1`, the appropriate\n options will be passed to bitcoin's configure. In this case, `--disable-wallet`.\n \n-### Additional targets\n+Additional targets:\n \n     download: run 'make download' to fetch all sources without building them\n     download-osx: run 'make download-osx' to fetch all sources needed for macOS builds"
      },
      {
        "sha": "8444dc26f27b26dd1cd489f276be2b31e4c1886e",
        "filename": "depends/config.site.in",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/depends/config.site.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/depends/config.site.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.site.in?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -61,12 +61,9 @@ fi\n CPPFLAGS=\"-I$depends_prefix/include/ $CPPFLAGS\"\n LDFLAGS=\"-L$depends_prefix/lib $LDFLAGS\"\n \n-if test -n \"@CC@\" -a -z \"${CC}\"; then\n-  CC=\"@CC@\"\n-fi\n-if test -n \"@CXX@\" -a -z \"${CXX}\"; then\n-  CXX=\"@CXX@\"\n-fi\n+CC=\"@CC@\"\n+CXX=\"@CXX@\"\n+OBJC=\"${CC}\"\n PYTHONPATH=$depends_prefix/native/lib/python/dist-packages:$PYTHONPATH\n \n if test -n \"@AR@\"; then"
      },
      {
        "sha": "acbc60eea3e8ace144fbfd2ea13cd16772eb8134",
        "filename": "depends/packages/expat.mk",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/depends/packages/expat.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/depends/packages/expat.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/expat.mk?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -1,11 +1,11 @@\n package=expat\n-$(package)_version=2.2.6\n-$(package)_download_path=https://github.com/libexpat/libexpat/releases/download/R_2_2_6/\n+$(package)_version=2.2.5\n+$(package)_download_path=https://github.com/libexpat/libexpat/releases/download/R_2_2_5/\n $(package)_file_name=$(package)-$($(package)_version).tar.bz2\n-$(package)_sha256_hash=17b43c2716d521369f82fc2dc70f359860e90fa440bea65b3b85f0b246ea81f2\n+$(package)_sha256_hash=d9dc32efba7e74f788fcc4f212a43216fc37cf5f23f4c2339664d473353aedf6\n \n define $(package)_set_vars\n-$(package)_config_opts=--disable-static --without-docbook\n+$(package)_config_opts=--disable-static\n endef\n \n define $(package)_config_cmds"
      },
      {
        "sha": "76b025c463189870a0865d7b22a3ede02d839b79",
        "filename": "depends/packages/freetype.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/depends/packages/freetype.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/depends/packages/freetype.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/freetype.mk?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -5,7 +5,7 @@ $(package)_file_name=$(package)-$($(package)_version).tar.bz2\n $(package)_sha256_hash=3a3bb2c4e15ffb433f2032f50a5b5a92558206822e22bfe8cbe339af4aa82f88\n \n define $(package)_set_vars\n-  $(package)_config_opts=--without-zlib --without-png --without-harfbuzz --without-bzip2 --disable-static\n+  $(package)_config_opts=--without-zlib --without-png --disable-static\n   $(package)_config_opts_linux=--with-pic\n endef\n "
      },
      {
        "sha": "fc60323b1c918a8229f8ba4b04d63310b4d98ec5",
        "filename": "depends/packages/libICE.mk",
        "status": "added",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/depends/packages/libICE.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/depends/packages/libICE.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/libICE.mk?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -0,0 +1,23 @@\n+package=libICE\n+$(package)_version=1.0.9\n+$(package)_download_path=http://xorg.freedesktop.org/releases/individual/lib/\n+$(package)_file_name=$(package)-$($(package)_version).tar.bz2\n+$(package)_sha256_hash=8f7032f2c1c64352b5423f6b48a8ebdc339cc63064af34d66a6c9aa79759e202\n+$(package)_dependencies=xtrans xproto\n+\n+define $(package)_set_vars\n+  $(package)_config_opts=--disable-static --disable-docs --disable-specs --without-xsltproc\n+  $(package)_config_opts_linux=--with-pic\n+endef\n+\n+define $(package)_config_cmds\n+  $($(package)_autoconf)\n+endef\n+\n+define $(package)_build_cmds\n+  $(MAKE)\n+endef\n+\n+define $(package)_stage_cmds\n+  $(MAKE) DESTDIR=$($(package)_staging_dir) install\n+endef"
      },
      {
        "sha": "0f9307ca76acb8edb8dc892cefc046627f111654",
        "filename": "depends/packages/libSM.mk",
        "status": "added",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/depends/packages/libSM.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/depends/packages/libSM.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/libSM.mk?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -0,0 +1,23 @@\n+package=libSM\n+$(package)_version=1.2.2\n+$(package)_download_path=http://xorg.freedesktop.org/releases/individual/lib/\n+$(package)_file_name=$(package)-$($(package)_version).tar.bz2\n+$(package)_sha256_hash=0baca8c9f5d934450a70896c4ad38d06475521255ca63b717a6510fdb6e287bd\n+$(package)_dependencies=xtrans xproto libICE\n+\n+define $(package)_set_vars\n+  $(package)_config_opts=--without-libuuid  --without-xsltproc  --disable-docs --disable-static\n+  $(package)_config_opts_linux=--with-pic\n+endef\n+\n+define $(package)_config_cmds\n+  $($(package)_autoconf)\n+endef\n+\n+define $(package)_build_cmds\n+  $(MAKE)\n+endef\n+\n+define $(package)_stage_cmds\n+  $(MAKE) DESTDIR=$($(package)_staging_dir) install\n+endef"
      },
      {
        "sha": "178d592ee63ff9d0f74de6029b4c7becdc850367",
        "filename": "depends/packages/libX11.mk",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/depends/packages/libX11.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/depends/packages/libX11.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/libX11.mk?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -10,10 +10,6 @@ $(package)_config_opts=--disable-xkb --disable-static\n $(package)_config_opts_linux=--with-pic\n endef\n \n-define $(package)_preprocess_cmds\n-  cp -f $(BASEDIR)/config.guess $(BASEDIR)/config.sub .\n-endef\n-\n define $(package)_config_cmds\n   $($(package)_autoconf)\n endef"
      },
      {
        "sha": "e87df2e4de6760ace30d169b24c83ee0b7cfc7dd",
        "filename": "depends/packages/libXau.mk",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/depends/packages/libXau.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/depends/packages/libXau.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/libXau.mk?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -10,10 +10,6 @@ define $(package)_set_vars\n   $(package)_config_opts_linux=--with-pic\n endef\n \n-define $(package)_preprocess_cmds\n-  cp -f $(BASEDIR)/config.guess $(BASEDIR)/config.sub .\n-endef\n-\n define $(package)_config_cmds\n   $($(package)_autoconf)\n endef"
      },
      {
        "sha": "4db836066f96e37cf7834fcf10de4da331b1fbe1",
        "filename": "depends/packages/libXext.mk",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/depends/packages/libXext.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/depends/packages/libXext.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/libXext.mk?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -9,10 +9,6 @@ define $(package)_set_vars\n   $(package)_config_opts=--disable-static\n endef\n \n-define $(package)_preprocess_cmds\n-  cp -f $(BASEDIR)/config.guess $(BASEDIR)/config.sub .\n-endef\n-\n define $(package)_config_cmds\n   $($(package)_autoconf)\n endef"
      },
      {
        "sha": "28f2bd6f25343de809c9b2c568bd88b778bb26ec",
        "filename": "depends/packages/libxcb.mk",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/depends/packages/libxcb.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/depends/packages/libxcb.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/libxcb.mk?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -10,7 +10,6 @@ $(package)_config_opts=--disable-static\n endef\n \n define $(package)_preprocess_cmds\n-  cp -f $(BASEDIR)/config.guess $(BASEDIR)/config.sub build-aux &&\\\n   sed \"s/pthread-stubs//\" -i configure\n endef\n "
      },
      {
        "sha": "5fe6f98da244ffc2b4de0c67ab89b6be311be3cf",
        "filename": "depends/packages/packages.mk",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/depends/packages/packages.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/depends/packages/packages.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/packages.mk?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -5,8 +5,6 @@ qt_packages = qrencode protobuf zlib\n \n qt_linux_packages:=qt expat dbus libxcb xcb_proto libXau xproto freetype fontconfig libX11 xextproto libXext xtrans\n \n-rapidcheck_packages = rapidcheck\n-\n qt_darwin_packages=qt\n qt_mingw32_packages=qt\n "
      },
      {
        "sha": "54d3fd924519be2ed612830e24c3baf25629c7fa",
        "filename": "depends/packages/protobuf.mk",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/depends/packages/protobuf.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/depends/packages/protobuf.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/protobuf.mk?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -11,11 +11,6 @@ define $(package)_set_vars\n   $(package)_config_opts_linux=--with-pic\n endef\n \n-define $(package)_preprocess_cmds\n-   cp -f $(BASEDIR)/config.guess $(BASEDIR)/config.sub . &&\\\n-   cp -f $(BASEDIR)/config.guess $(BASEDIR)/config.sub gtest/build-aux\n-endef\n-\n define $(package)_config_cmds\n   $($(package)_autoconf)\n endef"
      },
      {
        "sha": "44fdf1c2952b6188b25ddfe56d2b4f1c71d1c07f",
        "filename": "depends/packages/qrencode.mk",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/depends/packages/qrencode.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/depends/packages/qrencode.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qrencode.mk?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -9,10 +9,6 @@ $(package)_config_opts=--disable-shared -without-tools --disable-sdltest\n $(package)_config_opts_linux=--with-pic\n endef\n \n-define $(package)_preprocess_cmds\n-  cp -f $(BASEDIR)/config.guess $(BASEDIR)/config.sub use\n-endef\n-\n define $(package)_config_cmds\n   $($(package)_autoconf)\n endef"
      },
      {
        "sha": "113b8dbc3b4b4f4a0b05ac2fd970522608f30dcd",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 5,
        "deletions": 20,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -1,20 +1,20 @@\n PACKAGE=qt\n-$(package)_version=5.9.7\n+$(package)_version=5.9.6\n $(package)_download_path=https://download.qt.io/official_releases/qt/5.9/$($(package)_version)/submodules\n $(package)_suffix=opensource-src-$($(package)_version).tar.xz\n $(package)_file_name=qtbase-$($(package)_suffix)\n-$(package)_sha256_hash=36dd9574f006eaa1e5af780e4b33d11fe39d09fd7c12f3b9d83294174bd28f00\n+$(package)_sha256_hash=eed620cb268b199bd83b3fc6a471c51d51e1dc2dbb5374fc97a0cc75facbe36f\n $(package)_dependencies=openssl zlib\n $(package)_linux_dependencies=freetype fontconfig libxcb libX11 xproto libXext\n $(package)_build_subdir=qtbase\n $(package)_qt_libs=corelib network widgets gui plugins testlib\n-$(package)_patches=fix_qt_pkgconfig.patch mac-qmake.conf fix_configure_mac.patch fix_no_printer.patch fix_rcc_determinism.patch fix_riscv64_arch.patch xkb-default.patch\n+$(package)_patches=fix_qt_pkgconfig.patch mac-qmake.conf fix_configure_mac.patch fix_no_printer.patch fix_rcc_determinism.patch xkb-default.patch\n \n $(package)_qttranslations_file_name=qttranslations-$($(package)_suffix)\n-$(package)_qttranslations_sha256_hash=b36da7d93c3ab6fca56b32053bb73bc619c8b192bb89b74e3bcde2705f1c2a14\n+$(package)_qttranslations_sha256_hash=9822084f8e2d2939ba39f4af4c0c2320e45d5996762a9423f833055607604ed8\n \n $(package)_qttools_file_name=qttools-$($(package)_suffix)\n-$(package)_qttools_sha256_hash=d62e0f70d99645d6704dbb8976fb2222443061743689943d40970c52c49367a1\n+$(package)_qttools_sha256_hash=50e75417ec0c74bb8b1989d1d8e981ee83690dce7dfc0c2169f7c00f397e5117\n \n $(package)_extra_sources  = $($(package)_qttranslations_file_name)\n $(package)_extra_sources += $($(package)_qttools_file_name)\n@@ -27,7 +27,6 @@ $(package)_config_opts += -c++std c++11\n $(package)_config_opts += -confirm-license\n $(package)_config_opts += -dbus-runtime\n $(package)_config_opts += -hostprefix $(build_prefix)\n-$(package)_config_opts += -no-compile-examples\n $(package)_config_opts += -no-cups\n $(package)_config_opts += -no-egl\n $(package)_config_opts += -no-eglfs\n@@ -65,25 +64,13 @@ $(package)_config_opts += -prefix $(host_prefix)\n $(package)_config_opts += -qt-libpng\n $(package)_config_opts += -qt-libjpeg\n $(package)_config_opts += -qt-pcre\n-$(package)_config_opts += -qt-harfbuzz\n $(package)_config_opts += -system-zlib\n $(package)_config_opts += -static\n $(package)_config_opts += -silent\n $(package)_config_opts += -v\n-$(package)_config_opts += -no-feature-dial\n-$(package)_config_opts += -no-feature-ftp\n-$(package)_config_opts += -no-feature-lcdnumber\n-$(package)_config_opts += -no-feature-pdf\n $(package)_config_opts += -no-feature-printer\n $(package)_config_opts += -no-feature-printdialog\n $(package)_config_opts += -no-feature-concurrent\n-$(package)_config_opts += -no-feature-sql\n-$(package)_config_opts += -no-feature-statemachine\n-$(package)_config_opts += -no-feature-syntaxhighlighter\n-$(package)_config_opts += -no-feature-textbrowser\n-$(package)_config_opts += -no-feature-textodfwriter\n-$(package)_config_opts += -no-feature-udpsocket\n-$(package)_config_opts += -no-feature-wizard\n $(package)_config_opts += -no-feature-xml\n \n ifneq ($(build_os),darwin)\n@@ -106,7 +93,6 @@ $(package)_config_opts_arm_linux += -platform linux-g++ -xplatform bitcoin-linux\n $(package)_config_opts_i686_linux  = -xplatform linux-g++-32\n $(package)_config_opts_x86_64_linux = -xplatform linux-g++-64\n $(package)_config_opts_aarch64_linux = -xplatform linux-aarch64-gnu-g++\n-$(package)_config_opts_riscv64_linux = -platform linux-g++ -xplatform bitcoin-linux-g++\n $(package)_config_opts_mingw32  = -no-opengl -xplatform win32-g++ -device-option CROSS_COMPILE=\"$(host)-\"\n $(package)_build_env  = QT_RCC_TEST=1\n $(package)_build_env += QT_RCC_SOURCE_DATE_OVERRIDE=1\n@@ -155,7 +141,6 @@ define $(package)_preprocess_cmds\n   echo \"!host_build: QMAKE_CFLAGS     += $($(package)_cflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n   echo \"!host_build: QMAKE_CXXFLAGS   += $($(package)_cxxflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n   echo \"!host_build: QMAKE_LFLAGS     += $($(package)_ldflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n-  patch -p1 -i $($(package)_patch_dir)/fix_riscv64_arch.patch &&\\\n   echo \"QMAKE_LINK_OBJECT_MAX = 10\" >> qtbase/mkspecs/win32-g++/qmake.conf &&\\\n   echo \"QMAKE_LINK_OBJECT_SCRIPT = object_script\" >> qtbase/mkspecs/win32-g++/qmake.conf &&\\\n   sed -i.old \"s|QMAKE_CFLAGS            = |!host_build: QMAKE_CFLAGS            = $($(package)_cflags) $($(package)_cppflags) |\" qtbase/mkspecs/win32-g++/qmake.conf && \\"
      },
      {
        "sha": "19cf1cae2ec83e95b7a1d00b33476346c9ff199f",
        "filename": "depends/packages/rapidcheck.mk",
        "status": "removed",
        "additions": 0,
        "deletions": 18,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/depends/packages/rapidcheck.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/depends/packages/rapidcheck.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/rapidcheck.mk?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "patch": "@@ -1,18 +0,0 @@\n-package=rapidcheck\n-$(package)_version=10fc0cb\n-$(package)_download_path=https://github.com/MarcoFalke/rapidcheck/archive\n-$(package)_file_name=$(package)-$($(package)_version).tar.gz\n-$(package)_sha256_hash=9640926223c00af45bce4c7df8b756b5458a89b2ba74cfe3e404467f13ce26df\n-\n-define $(package)_config_cmds\n-  cmake -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=true .\n-endef\n-\n-define $(package)_build_cmds\n-  $(MAKE) && \\\n-  mkdir -p $($(package)_staging_dir)$(host_prefix)/include && \\\n-  cp -a include/* $($(package)_staging_dir)$(host_prefix)/include/ && \\\n-  cp -a extras/boost_test/include/rapidcheck/* $($(package)_staging_dir)$(host_prefix)/include/rapidcheck/ && \\\n-  mkdir -p $($(package)_staging_dir)$(host_prefix)/lib && \\\n-  cp -a librapidcheck.a $($(package)_staging_dir)$(host_prefix)/lib/\n-endef"
      },
      {
        "sha": "50a90b26850ac87de0c74d2822a6590d9a9b9e8e",
        "filename": "depends/packages/xproto.mk",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/depends/packages/xproto.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/depends/packages/xproto.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/xproto.mk?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -8,10 +8,6 @@ define $(package)_set_vars\n $(package)_config_opts=--disable-shared\n endef\n \n-define $(package)_preprocess_cmds\n-  cp -f $(BASEDIR)/config.guess $(BASEDIR)/config.sub .\n-endef\n-\n define $(package)_config_cmds\n   $($(package)_autoconf)\n endef"
      },
      {
        "sha": "99eefa6d5ea24b2d2f4e5ecf38b07390432a8549",
        "filename": "depends/packages/xtrans.mk",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/depends/packages/xtrans.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/depends/packages/xtrans.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/xtrans.mk?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -9,10 +9,6 @@ define $(package)_set_vars\n $(package)_config_opts_linux=--with-pic --disable-static\n endef\n \n-define $(package)_preprocess_cmds\n-  cp -f $(BASEDIR)/config.guess $(BASEDIR)/config.sub .\n-endef\n-\n define $(package)_config_cmds\n   $($(package)_autoconf)\n endef"
      },
      {
        "sha": "d5fd1f39ab8a6ca197124e8dc0b19d708bfd385c",
        "filename": "depends/packages/zeromq.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/depends/packages/zeromq.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/depends/packages/zeromq.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/zeromq.mk?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -1,8 +1,8 @@\n package=zeromq\n-$(package)_version=4.2.5\n+$(package)_version=4.2.3\n $(package)_download_path=https://github.com/zeromq/libzmq/releases/download/v$($(package)_version)/\n $(package)_file_name=$(package)-$($(package)_version).tar.gz\n-$(package)_sha256_hash=cc9090ba35713d59bb2f7d7965f877036c49c5558ea0c290b0dcc6f2a17e489f\n+$(package)_sha256_hash=8f1e2b2aade4dbfde98d82366d61baef2f62e812530160d2e6d0a5bb24e40bc0\n $(package)_patches=0001-fix-build-with-older-mingw64.patch 0002-disable-pthread_set_name_np.patch\n \n define $(package)_set_vars"
      },
      {
        "sha": "e7f29f01f9cd7f250b86bbd038175aa6a0fb35b0",
        "filename": "depends/patches/qt/fix_riscv64_arch.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 14,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/depends/patches/qt/fix_riscv64_arch.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/depends/patches/qt/fix_riscv64_arch.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/fix_riscv64_arch.patch?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "patch": "@@ -1,14 +0,0 @@\n-diff --git a/qtbase/src/3rdparty/double-conversion/include/double-conversion/utils.h b/qtbase/src/3rdparty/double-conversion/include/double-conversion/utils.h\n-index 20bfd36..93729fa 100644\n---- a/qtbase/src/3rdparty/double-conversion/include/double-conversion/utils.h\n-+++ b/qtbase/src/3rdparty/double-conversion/include/double-conversion/utils.h\n-@@ -65,7 +65,8 @@\n-     defined(__sparc__) || defined(__sparc) || defined(__s390__) || \\\n-     defined(__SH4__) || defined(__alpha__) || \\\n-     defined(_MIPS_ARCH_MIPS32R2) || \\\n--    defined(__AARCH64EL__)\n-+    defined(__AARCH64EL__) || defined(__aarch64__) || \\\n-+    defined(__riscv)\n- #define DOUBLE_CONVERSION_CORRECT_DOUBLE_OPERATIONS 1\n- #elif defined(_M_IX86) || defined(__i386__) || defined(__i386)\n- #if defined(_WIN32)"
      },
      {
        "sha": "a6c508fb8a1e6c14e61c28ac2299fdcf7823d181",
        "filename": "depends/patches/zeromq/0001-fix-build-with-older-mingw64.patch",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/depends/patches/zeromq/0001-fix-build-with-older-mingw64.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/depends/patches/zeromq/0001-fix-build-with-older-mingw64.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/zeromq/0001-fix-build-with-older-mingw64.patch?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -1,17 +1,17 @@\n-From f6866b0f166ad168618aae64c7fbee8775d3eb23 Mon Sep 17 00:00:00 2001\n-From: mruddy <6440430+mruddy@users.noreply.github.com>\n-Date: Sat, 30 Jun 2018 09:44:58 -0400\n+From 1a159c128c69a42d90819375c06a39994f3fbfc1 Mon Sep 17 00:00:00 2001\n+From: Cory Fields <cory-nospam-@coryfields.com>\n+Date: Tue, 28 Nov 2017 20:33:25 -0500\n Subject: [PATCH] fix build with older mingw64\n \n ---\n  src/windows.hpp | 7 +++++++\n  1 file changed, 7 insertions(+)\n \n diff --git a/src/windows.hpp b/src/windows.hpp\n-index 6c3839fd..2c32ec79 100644\n+index 99e889d..e69038e 100644\n --- a/src/windows.hpp\n +++ b/src/windows.hpp\n-@@ -58,6 +58,13 @@\n+@@ -55,6 +55,13 @@\n  #include <winsock2.h>\n  #include <windows.h>\n  #include <mswsock.h>\n@@ -23,8 +23,8 @@ index 6c3839fd..2c32ec79 100644\n +#include <ws2ipdef.h>\n +#endif\n  #include <iphlpapi.h>\n- \n+\n  #if !defined __MINGW32__\n--- \n-2.17.1\n+--\n+2.7.4\n "
      },
      {
        "sha": "d220b54f3ecdbae3605be72dbcd0c6b2c5ee85f7",
        "filename": "depends/patches/zeromq/0002-disable-pthread_set_name_np.patch",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/depends/patches/zeromq/0002-disable-pthread_set_name_np.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/depends/patches/zeromq/0002-disable-pthread_set_name_np.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/zeromq/0002-disable-pthread_set_name_np.patch?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -1,6 +1,6 @@\n-From c9bbdd6581d07acfe8971e4bcebe278a3676cf03 Mon Sep 17 00:00:00 2001\n-From: mruddy <6440430+mruddy@users.noreply.github.com>\n-Date: Sat, 30 Jun 2018 09:57:18 -0400\n+From 6e6b47d5ab381c3df3b30bb0b0a6cf210dfb1eba Mon Sep 17 00:00:00 2001\n+From: Cory Fields <cory-nospam-@coryfields.com>\n+Date: Mon, 5 Mar 2018 14:22:05 -0500\n Subject: [PATCH] disable pthread_set_name_np\n \n pthread_set_name_np adds a Glibc requirement on >= 2.12.\n@@ -9,27 +9,27 @@ pthread_set_name_np adds a Glibc requirement on >= 2.12.\n  1 file changed, 3 insertions(+), 1 deletion(-)\n \n diff --git a/src/thread.cpp b/src/thread.cpp\n-index a1086b0c..9943f354 100644\n+index 4fc59c3e..c3fdfd46 100644\n --- a/src/thread.cpp\n +++ b/src/thread.cpp\n-@@ -307,7 +307,7 @@ void zmq::thread_t::setThreadName (const char *name_)\n+@@ -220,7 +220,7 @@ void zmq::thread_t::setThreadName(const char *name_)\n   */\n      if (!name_)\n          return;\n -\n +#if 0\n  #if defined(ZMQ_HAVE_PTHREAD_SETNAME_1)\n-     int rc = pthread_setname_np (name_);\n-     if (rc)\n-@@ -323,6 +323,8 @@ void zmq::thread_t::setThreadName (const char *name_)\n+     int rc = pthread_setname_np(name_);\n+     if(rc) return;\n+@@ -233,6 +233,8 @@ void zmq::thread_t::setThreadName(const char *name_)\n  #elif defined(ZMQ_HAVE_PTHREAD_SET_NAME)\n-     pthread_set_name_np (descriptor, name_);\n+     pthread_set_name_np(descriptor, name_);\n  #endif\n +#endif\n +    return;\n  }\n  \n  #endif\n -- \n-2.17.1\n+2.11.1\n "
      },
      {
        "sha": "a44e00556c2a247a9d63cc29ab6f84be583dd7d0",
        "filename": "doc/Doxyfile.in",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/doc/Doxyfile.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/doc/Doxyfile.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/Doxyfile.in?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -32,7 +32,7 @@ DOXYFILE_ENCODING      = UTF-8\n # title of most generated pages and in a few other places.\n # The default value is: My Project.\n \n-PROJECT_NAME           = \"Bitcoin Core\"\n+PROJECT_NAME           = \"BitcoinV Core\"\n \n # The PROJECT_NUMBER tag can be used to enter a project or revision number. This\n # could be handy for archiving the generated documentation or if some version"
      },
      {
        "sha": "59df541567fbcb5b195e3f4fc294f9111d5ba48a",
        "filename": "doc/JSON-RPC-interface.md",
        "status": "removed",
        "additions": 0,
        "deletions": 38,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/doc/JSON-RPC-interface.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/doc/JSON-RPC-interface.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/JSON-RPC-interface.md?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "patch": "@@ -1,38 +0,0 @@\n-# JSON-RPC Interface\n-\n-The headless daemon `bitcoind` has the JSON-RPC API enabled by default, the GUI\n-`bitcoin-qt` has it disabled by default. This can be changed with the `-server`\n-option. In the GUI it is possible to execute RPC methods in the Debug Console\n-Dialog.\n-\n-## RPC consistency guarantees\n-\n-State that can be queried via RPCs is guaranteed to be at least up-to-date with\n-the chain state immediately prior to the call's execution. However, the state\n-returned by RPCs that reflect the mempool may not be up-to-date with the\n-current mempool state.\n-\n-### Transaction Pool\n-\n-The mempool state returned via an RPC is consistent with itself and with the\n-chain state at the time of the call. Thus, the mempool state only encompasses\n-transactions that are considered mine-able by the node at the time of the RPC.\n-\n-The mempool state returned via an RPC reflects all effects of mempool and chain\n-state related RPCs that returned prior to this call.\n-\n-### Wallet\n-\n-The wallet state returned via an RPC is consistent with itself and with the\n-chain state at the time of the call.\n-\n-Wallet RPCs will return the latest chain state consistent with prior non-wallet\n-RPCs. The effects of all blocks (and transactions in blocks) at the time of the\n-call is reflected in the state of all wallet transactions. For example, if a\n-block contains transactions that conflicted with mempool transactions, the\n-wallet would reflect the removal of these mempool transactions in the state.\n-\n-However, the wallet may not be up-to-date with the current state of the mempool\n-or the state of the mempool by an RPC that returned before this RPC. For\n-example, a wallet transaction that was BIP-125-replaced in the mempool prior to\n-this RPC may not yet be reflected as such in this RPC response."
      },
      {
        "sha": "5ffff825b43a9b8c1c4ac53ec9cd3410ab03b8ef",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -3,7 +3,7 @@ Bitcoin Core\n \n Setup\n ---------------------\n-Bitcoin Core is the original Bitcoin client and it builds the backbone of the network. It downloads and, by default, stores the entire history of Bitcoin transactions, which requires a few hundred gigabytes of disk space. Depending on the speed of your computer and network connection, the synchronization process can take anywhere from a few hours to a day or more.\n+Bitcoin Core is the original Bitcoin client and it builds the backbone of the network. It downloads and, by default, stores the entire history of Bitcoin transactions (which is currently more than 100 GBs); depending on the speed of your computer and network connection, the synchronization process can take anywhere from a few hours to a day or more.\n \n To download Bitcoin Core, visit [bitcoincore.org](https://bitcoincore.org/en/releases/).\n \n@@ -30,7 +30,7 @@ Drag Bitcoin Core to your applications folder, and then run Bitcoin Core.\n \n * See the documentation at the [Bitcoin Wiki](https://en.bitcoin.it/wiki/Main_Page)\n for help and more information.\n-* Ask for help on [#bitcoin](http://webchat.freenode.net?channels=bitcoin) on Freenode. If you don't have an IRC client, use [webchat here](http://webchat.freenode.net?channels=bitcoin).\n+* Ask for help on [#bitcoin](http://webchat.freenode.net?channels=bitcoin) on Freenode. If you don't have an IRC client use [webchat here](http://webchat.freenode.net?channels=bitcoin).\n * Ask for help on the [BitcoinTalk](https://bitcointalk.org/) forums, in the [Technical Support board](https://bitcointalk.org/index.php?board=4.0).\n \n Building\n@@ -56,7 +56,6 @@ The Bitcoin repo's [root README](/README.md) contains relevant information on th\n - [Translation Process](translation_process.md)\n - [Translation Strings Policy](translation_strings_policy.md)\n - [Travis CI](travis-ci.md)\n-- [JSON-RPC Interface](JSON-RPC-interface.md)\n - [Unauthenticated REST Interface](REST-interface.md)\n - [Shared Libraries](shared-libraries.md)\n - [BIPS](bips.md)\n@@ -65,19 +64,17 @@ The Bitcoin repo's [root README](/README.md) contains relevant information on th\n \n ### Resources\n * Discuss on the [BitcoinTalk](https://bitcointalk.org/) forums, in the [Development & Technical Discussion board](https://bitcointalk.org/index.php?board=6.0).\n-* Discuss project-specific development on #bitcoin-core-dev on Freenode. If you don't have an IRC client, use [webchat here](http://webchat.freenode.net/?channels=bitcoin-core-dev).\n-* Discuss general Bitcoin development on #bitcoin-dev on Freenode. If you don't have an IRC client, use [webchat here](http://webchat.freenode.net/?channels=bitcoin-dev).\n+* Discuss project-specific development on #bitcoin-core-dev on Freenode. If you don't have an IRC client use [webchat here](http://webchat.freenode.net/?channels=bitcoin-core-dev).\n+* Discuss general Bitcoin development on #bitcoin-dev on Freenode. If you don't have an IRC client use [webchat here](http://webchat.freenode.net/?channels=bitcoin-dev).\n \n ### Miscellaneous\n - [Assets Attribution](assets-attribution.md)\n-- [bitcoin.conf Configuration File](bitcoin-conf.md)\n - [Files](files.md)\n - [Fuzz-testing](fuzzing.md)\n - [Reduce Traffic](reduce-traffic.md)\n - [Tor Support](tor.md)\n - [Init Scripts (systemd/upstart/openrc)](init.md)\n - [ZMQ](zmq.md)\n-- [PSBT support](psbt.md)\n \n License\n ---------------------"
      },
      {
        "sha": "58bb05c4d7713752769da082ab47ee3350d92b48",
        "filename": "doc/REST-interface.md",
        "status": "modified",
        "additions": 1,
        "deletions": 7,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/doc/REST-interface.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/doc/REST-interface.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/REST-interface.md?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -6,12 +6,6 @@ The REST API can be enabled with the `-rest` option.\n The interface runs on the same port as the JSON-RPC interface, by default port 8332 for mainnet, port 18332 for testnet,\n and port 18443 for regtest.\n \n-REST Interface consistency guarantees\n--------------------------------------\n-\n-The [same guarantees as for the RPC Interface](/doc/JSON-RPC-interface.md#rpc-consistency-guarantees)\n-apply.\n-\n Supported API\n -------------\n \n@@ -97,7 +91,7 @@ Only supports JSON as output format.\n * bytes : (numeric) size of the TX mempool in bytes\n * usage : (numeric) total TX mempool memory usage\n * maxmempool : (numeric) maximum memory usage for the mempool in bytes\n-* mempoolminfee : (numeric) minimum feerate (BTC per KB) for tx to be accepted\n+* mempoolminfee : (numeric) minimum feerate (BTCV per KB) for tx to be accepted\n \n `GET /rest/mempool/contents.json`\n "
      },
      {
        "sha": "88ecb8fe6523f7a5d7234eaf963128d1400919d6",
        "filename": "doc/bitcoin-conf.md",
        "status": "removed",
        "additions": 0,
        "deletions": 37,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/doc/bitcoin-conf.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/doc/bitcoin-conf.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bitcoin-conf.md?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "patch": "@@ -1,37 +0,0 @@\n-# `bitcoin.conf` Configuration File\n-\n-The configuration file is used by `bitcoind`, `bitcoin-qt` and `bitcoin-cli`.\n-\n-All command-line options (except for `-?`, `-help`, `-version` and `-conf`) may be specified in a configuration file, and all configuration file options (except for `includeconf`) may also be specified on the command line. Command-line options override values set in the configuration file and configuration file options override values set in the GUI.\n-\n-## Configuration File Format\n-\n-The configuration file is a plain text file and consists of `option=value` entries, one per line. Leading and trailing whitespaces are removed.\n-\n-In contrast to the command-line usage:\n-- an option must be specified without leading `-`;\n-- a value of the given option is mandatory; e.g., `testnet=1` (for chain selection options), `noconnect=1` (for negated options).\n-\n-### Blank lines\n-\n-Blank lines are allowed and ignored by the parser.\n-\n-### Comments\n-\n-A comment starts with a number sign (`#`) and extends to the end of the line. All comments are ignored by the parser.\n-\n-Comments may appear in two ways:\n-- on their own on an otherwise empty line (_preferable_);\n-- after an `option=value` entry.\n-\n-### Network specific options\n-\n-Network specific options can be:\n-- placed into sections with headers `[main]` (not `[mainnet]`), `[test]` (not `[testnet]`) or `[regtest]`;\n-- prefixed with a chain name; e.g., `regtest.maxmempool=100`.\n-\n-## Configuration File Path\n-\n-The configuration file is not automatically created; you can create it using your favorite text editor. By default, the configuration file name is `bitcoin.conf` and it is located in the Bitcoin data directory, but both the Bitcoin data directory and the configuration file path may be changed using the `-datadir` and `-conf` command-line options.\n-\n-The `includeconf=<file>` option in the `bitcoin.conf` file can be used to include additional configuration files."
      },
      {
        "sha": "48746ce0c2ca444afd21a68ab0828cb09beade13",
        "filename": "doc/build-freebsd.md",
        "status": "modified",
        "additions": 1,
        "deletions": 19,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/doc/build-freebsd.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/doc/build-freebsd.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-freebsd.md?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -14,12 +14,6 @@ You will need the following dependencies, which can be installed as root via pkg\n pkg install autoconf automake boost-libs git gmake libevent libtool openssl pkgconf\n ```\n \n-In order to run the test suite (recommended), you will need to have Python 3 installed:\n-\n-```\n-pkg install python3\n-```\n-\n For the wallet (optional):\n ```\n ./contrib/install_db4.sh `pwd`\n@@ -35,29 +29,17 @@ git clone https://github.com/bitcoin/bitcoin\n \n ## Building Bitcoin Core\n \n-**Important**: Use `gmake` (the non-GNU `make` will exit with an error):\n+**Important**: Use `gmake` (the non-GNU `make` will exit with an error).\n \n ```\n ./autogen.sh\n \n ./configure                  # to build with wallet OR\n ./configure --disable-wallet # to build without wallet\n-```\n-\n-followed by either:\n \n-```\n gmake\n ```\n \n-to build without testing, or\n-\n-```\n-gmake check\n-```\n-\n-to also run the test suite (recommended, if Python 3 is installed).\n-\n *Note on debugging*: The version of `gdb` installed by default is [ancient and considered harmful](https://wiki.freebsd.org/GdbRetirement).\n It is not suitable for debugging a multi-threaded C++ program, not even for getting backtraces. Please install the package `gdb` and\n use the versioned gdb command (e.g. `gdb7111`)."
      },
      {
        "sha": "5bf2d6b59b870fb5678e55936ab2b47300a4682b",
        "filename": "doc/build-netbsd.md",
        "status": "modified",
        "additions": 11,
        "deletions": 41,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/doc/build-netbsd.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/doc/build-netbsd.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-netbsd.md?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -1,6 +1,6 @@\n NetBSD build guide\n ======================\n-(updated for NetBSD 8.0)\n+(updated for NetBSD 7.0)\n \n This guide describes how to build bitcoind and command-line utilities on NetBSD.\n \n@@ -15,65 +15,35 @@ You will need the following modules, which can be installed via pkgsrc or pkgin:\n autoconf\n automake\n boost\n+db4\n git\n gmake\n libevent\n libtool\n-pkg-config\n-python37\n-\n-git clone https://github.com/bitcoin/bitcoin.git\n+python27\n ```\n \n-See [dependencies.md](dependencies.md) for a complete overview.\n-\n-### Building BerkeleyDB\n-\n-BerkeleyDB is only necessary for the wallet functionality. To skip this, pass\n-`--disable-wallet` to `./configure` and skip to the next section.\n-\n-It is recommended to use Berkeley DB 4.8. You cannot use the BerkeleyDB library\n-from ports, for the same reason as boost above (g++/libstd++ incompatibility).\n-If you have to build it yourself, you can use [the installation script included\n-in contrib/](/contrib/install_db4.sh) like so:\n-\n-```shell\n-./contrib/install_db4.sh `pwd`\n+Download the source code:\n ```\n-\n-from the root of the repository. Then set `BDB_PREFIX` for the next section:\n-\n-```shell\n-export BDB_PREFIX=\"$PWD/db4\"\n+git clone https://github.com/bitcoin/bitcoin\n ```\n \n+See [dependencies.md](dependencies.md) for a complete overview.\n+\n ### Building Bitcoin Core\n \n **Important**: Use `gmake` (the non-GNU `make` will exit with an error).\n \n With wallet:\n ```\n ./autogen.sh\n-./configure --with-gui=no CPPFLAGS=\"-I/usr/pkg/include\" \\\n-    LDFLAGS=\"-L/usr/pkg/lib\" \\\n-    BOOST_CPPFLAGS=\"-I/usr/pkg/include\" \\\n-    BOOST_LDFLAGS=\"-L/usr/pkg/lib\" \\\n-    BDB_LIBS=\"-L${BDB_PREFIX}/lib -ldb_cxx-4.8\" \\\n-    BDB_CFLAGS=\"-I${BDB_PREFIX}/include\"\n+./configure CPPFLAGS=\"-I/usr/pkg/include\" LDFLAGS=\"-L/usr/pkg/lib\" BOOST_CPPFLAGS=\"-I/usr/pkg/include\" BOOST_LDFLAGS=\"-L/usr/pkg/lib\"\n+gmake\n ```\n \n Without wallet:\n ```\n ./autogen.sh\n-./configure --with-gui=no --disable-wallet \\\n-    CPPFLAGS=\"-I/usr/pkg/include\" \\\n-    LDFLAGS=\"-L/usr/pkg/lib\" \\\n-    BOOST_CPPFLAGS=\"-I/usr/pkg/include\" \\\n-    BOOST_LDFLAGS=\"-L/usr/pkg/lib\"\n-```\n-\n-Build and run the tests:\n-```bash\n-gmake # use -jX here for parallelism\n-gmake check\n+./configure --disable-wallet CPPFLAGS=\"-I/usr/pkg/include\" LDFLAGS=\"-L/usr/pkg/lib\" BOOST_CPPFLAGS=\"-I/usr/pkg/include\" BOOST_LDFLAGS=\"-L/usr/pkg/lib\"\n+gmake\n ```"
      },
      {
        "sha": "63288acf16108d1d69515152812cc58efbeb3d9b",
        "filename": "doc/build-openbsd.md",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/doc/build-openbsd.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/doc/build-openbsd.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-openbsd.md?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -1,6 +1,6 @@\n OpenBSD build guide\n ======================\n-(updated for OpenBSD 6.4)\n+(updated for OpenBSD 6.3)\n \n This guide describes how to build bitcoind and command-line utilities on OpenBSD.\n \n@@ -14,7 +14,7 @@ Run the following as root to install the base dependencies for building:\n ```bash\n pkg_add git gmake libevent libtool boost\n pkg_add autoconf # (select highest version, e.g. 2.69)\n-pkg_add automake # (select highest version, e.g. 1.16)\n+pkg_add automake # (select highest version, e.g. 1.15)\n pkg_add python # (select highest version, e.g. 3.6)\n \n git clone https://github.com/bitcoin/bitcoin.git\n@@ -36,7 +36,7 @@ BerkeleyDB is only necessary for the wallet functionality. To skip this, pass\n It is recommended to use Berkeley DB 4.8. You cannot use the BerkeleyDB library\n from ports, for the same reason as boost above (g++/libstd++ incompatibility).\n If you have to build it yourself, you can use [the installation script included\n-in contrib/](/contrib/install_db4.sh) like so:\n+in contrib/](/contrib/install_db4.sh) like so\n \n ```shell\n ./contrib/install_db4.sh `pwd` CC=cc CXX=c++\n@@ -60,8 +60,8 @@ Preparation:\n export AUTOCONF_VERSION=2.69\n \n # Replace this with the automake version that you installed. Include only\n-# the major and minor parts of the version: use \"1.16\" for \"automake-1.16.1\".\n-export AUTOMAKE_VERSION=1.16\n+# the major and minor parts of the version: use \"1.15\" for \"automake-1.15.1\".\n+export AUTOMAKE_VERSION=1.15\n \n ./autogen.sh\n ```\n@@ -94,7 +94,7 @@ The standard ulimit restrictions in OpenBSD are very strict:\n \n     data(kbytes)         1572864\n \n-This is, unfortunately, in some cases not enough to compile some `.cpp` files in the project,\n+This, unfortunately, in some cases not enough to compile some `.cpp` files in the project,\n (see issue [#6658](https://github.com/bitcoin/bitcoin/issues/6658)).\n If your user is in the `staff` group the limit can be raised with:\n "
      },
      {
        "sha": "f865b6c8927b7d2f237ae3ad07c07202e7a348b5",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 9,
        "deletions": 20,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -20,28 +20,28 @@ Dependencies\n \n See [dependencies.md](dependencies.md) for a complete overview.\n \n-If you want to build the disk image with `make deploy` (.dmg / optional), you need RSVG:\n+If you want to build the disk image with `make deploy` (.dmg / optional), you need RSVG\n \n     brew install librsvg\n \n Berkeley DB\n -----------\n It is recommended to use Berkeley DB 4.8. If you have to build it yourself,\n you can use [the installation script included in contrib/](/contrib/install_db4.sh)\n-like so:\n+like so\n \n ```shell\n ./contrib/install_db4.sh .\n ```\n \n from the root of the repository.\n \n-**Note**: You only need Berkeley DB if the wallet is enabled (see [*Disable-wallet mode*](/doc/build-osx.md#disable-wallet-mode)).\n+**Note**: You only need Berkeley DB if the wallet is enabled (see the section *Disable-Wallet mode* below).\n \n Build Bitcoin Core\n ------------------------\n \n-1. Clone the Bitcoin Core source code:\n+1. Clone the Bitcoin Core source code and cd into `bitcoin`\n \n         git clone https://github.com/bitcoin/bitcoin\n         cd bitcoin\n@@ -53,8 +53,8 @@ Build Bitcoin Core\n     You can disable the GUI build by passing `--without-gui` to configure.\n \n         ./autogen.sh\n-        ./configure\n-        make\n+        ./configure --enable-debug\n+        make -j8\n \n 3.  It is recommended to build and run the unit tests:\n \n@@ -64,29 +64,18 @@ Build Bitcoin Core\n \n         make deploy\n \n-Disable-wallet mode\n---------------------\n-When the intention is to run only a P2P node without a wallet, Bitcoin Core may be compiled in\n-disable-wallet mode with:\n-\n-    ./configure --disable-wallet\n-\n-In this case there is no dependency on Berkeley DB 4.8.\n-\n-Mining is also possible in disable-wallet mode using the `getblocktemplate` RPC call.\n-\n Running\n -------\n \n Bitcoin Core is now available at `./src/bitcoind`\n \n-Before running, you may create an empty configuration file:\n+Before running, it's recommended that you create an RPC configuration file.\n \n-    touch \"/Users/${USER}/Library/Application Support/Bitcoin/bitcoin.conf\"\n+    echo -e \"rpcuser=bitcoinrpc\\nrpcpassword=$(xxd -l 16 -p /dev/urandom)\" > \"/Users/${USER}/Library/Application Support/Bitcoin/bitcoin.conf\"\n \n     chmod 600 \"/Users/${USER}/Library/Application Support/Bitcoin/bitcoin.conf\"\n \n-The first time you run bitcoind, it will start downloading the blockchain. This process could take many hours, or even days on slower than average systems.\n+The first time you run bitcoind, it will start downloading the blockchain. This process could take several hours.\n \n You can monitor the download process by looking at the debug.log file:\n "
      },
      {
        "sha": "4a09bed2b2327ed39501eedad3262f8fee49ede6",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -6,8 +6,8 @@ Some notes on how to build Bitcoin Core in Unix.\n \n Note\n ---------------------\n-Always use absolute paths to configure and compile Bitcoin Core and the dependencies.\n-For example, when specifying the path of the dependency:\n+Always use absolute paths to configure and compile Bitcoin Core and the dependencies,\n+for example, when specifying the path of the dependency:\n \n \t../dist/configure --enable-cxx --disable-shared --with-pic --prefix=$BDB_PREFIX\n \n@@ -24,7 +24,7 @@ make\n make install # optional\n ```\n \n-This will build bitcoin-qt as well, if the dependencies are met.\n+This will build bitcoin-qt as well if the dependencies are met.\n \n Dependencies\n ---------------------\n@@ -47,7 +47,7 @@ Optional dependencies:\n  protobuf    | Payments in GUI  | Data interchange format used for payment protocol (only needed when GUI enabled)\n  libqrencode | QR codes in GUI  | Optional for generating QR codes (only needed when GUI enabled)\n  univalue    | Utility          | JSON parsing and encoding (bundled version will be used unless --with-system-univalue passed to configure)\n- libzmq3     | ZMQ notification | Optional, allows generating ZMQ notifications (requires ZMQ version >= 4.0.0)\n+ libzmq3     | ZMQ notification | Optional, allows generating ZMQ notifications (requires ZMQ version >= 4.x)\n \n For the versions used, see [dependencies.md](dependencies.md)\n \n@@ -70,11 +70,7 @@ tuned to conserve memory with additional CXXFLAGS:\n \n Build requirements:\n \n-    sudo apt-get install build-essential libtool autotools-dev automake pkg-config bsdmainutils python3\n-\n-Now, you can either build from self-compiled [depends](/depends/README.md) or install the required dependencies:\n-\n-    sudo apt-get install libssl-dev libevent-dev libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev\n+    sudo apt-get install build-essential libtool autotools-dev automake pkg-config libssl-dev libevent-dev bsdmainutils python3 libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev\n \n BerkeleyDB is required for the wallet.\n \n@@ -87,22 +83,21 @@ You can add the repository and install using the following commands:\n     sudo apt-get install libdb4.8-dev libdb4.8++-dev\n \n Ubuntu and Debian have their own libdb-dev and libdb++-dev packages, but these will install\n-BerkeleyDB 5.1 or later. This will break binary wallet compatibility with the distributed executables, which\n+BerkeleyDB 5.1 or later, which break binary wallet compatibility with the distributed executables which\n are based on BerkeleyDB 4.8. If you do not care about wallet compatibility,\n pass `--with-incompatible-bdb` to configure.\n \n-To build Bitcoin Core without wallet, see [*Disable-wallet mode*](/doc/build-unix.md#disable-wallet-mode)\n-\n+See the section \"Disable-wallet mode\" to build Bitcoin Core without wallet.\n \n Optional (see --with-miniupnpc and --enable-upnp-default):\n \n     sudo apt-get install libminiupnpc-dev\n \n-ZMQ dependencies (provides ZMQ API):\n+ZMQ dependencies (provides ZMQ API 4.x):\n \n     sudo apt-get install libzmq3-dev\n \n-GUI dependencies:\n+#### Dependencies for the GUI\n \n If you want to build bitcoin-qt, make sure that the required packages for Qt development\n are installed. Qt 5 is necessary to build the GUI.\n@@ -162,15 +157,15 @@ Berkeley DB\n -----------\n It is recommended to use Berkeley DB 4.8. If you have to build it yourself,\n you can use [the installation script included in contrib/](/contrib/install_db4.sh)\n-like so:\n+like so\n \n ```shell\n ./contrib/install_db4.sh `pwd`\n ```\n \n from the root of the repository.\n \n-**Note**: You only need Berkeley DB if the wallet is enabled (see [*Disable-wallet mode*](/doc/build-unix.md#disable-wallet-mode)).\n+**Note**: You only need Berkeley DB if the wallet is enabled (see the section *Disable-Wallet mode* below).\n \n Boost\n -----\n@@ -194,7 +189,9 @@ Hardening Flags:\n \n \n Hardening enables the following features:\n-* _Position Independent Executable_: Build position independent code to take advantage of Address Space Layout Randomization\n+\n+* Position Independent Executable\n+    Build position independent code to take advantage of Address Space Layout Randomization\n     offered by some kernels. Attackers who can cause execution of code at an arbitrary memory\n     location are thwarted if they don't know where anything useful is located.\n     The stack and heap are randomly located by default, but this allows the code section to be\n@@ -212,7 +209,8 @@ Hardening enables the following features:\n      TYPE\n     ET_DYN\n \n-* _Non-executable Stack_: If the stack is executable then trivial stack-based buffer overflow exploits are possible if\n+* Non-executable Stack\n+    If the stack is executable then trivial stack-based buffer overflow exploits are possible if\n     vulnerable buffers are found. By default, Bitcoin Core should be built with a non-executable stack,\n     but if one of the libraries it uses asks for an executable stack or someone makes a mistake\n     and uses a compiler extension which requires an executable stack, it will silently build an\n@@ -236,7 +234,8 @@ disable-wallet mode with:\n \n In this case there is no dependency on Berkeley DB 4.8.\n \n-Mining is also possible in disable-wallet mode using the `getblocktemplate` RPC call.\n+Mining is also possible in disable-wallet mode, but only using the `getblocktemplate` RPC\n+call not `getwork`.\n \n Additional Configure Flags\n --------------------------\n@@ -286,3 +285,4 @@ To build executables for ARM:\n \n \n For further documentation on the depends system see [README.md](../depends/README.md) in the depends directory.\n+"
      },
      {
        "sha": "12adadacdc149604d88bc7623c5ae1b52bf1d3ca",
        "filename": "doc/build-windows.md",
        "status": "modified",
        "additions": 11,
        "deletions": 19,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/doc/build-windows.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/doc/build-windows.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-windows.md?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -5,15 +5,15 @@ Below are some notes on how to build Bitcoin Core for Windows.\n \n The options known to work for building Bitcoin Core on Windows are:\n \n-* On Linux, using the [Mingw-w64](https://mingw-w64.org/doku.php) cross compiler tool chain. Ubuntu Bionic 18.04 is required\n+* On Linux using the [Mingw-w64](https://mingw-w64.org/doku.php) cross compiler tool chain. Ubuntu Bionic 18.04 is required\n and is the platform used to build the Bitcoin Core Windows release binaries.\n-* On Windows, using [Windows\n+* On Windows using [Windows\n Subsystem for Linux (WSL)](https://msdn.microsoft.com/commandline/wsl/about) and the Mingw-w64 cross compiler tool chain.\n \n Other options which may work, but which have not been extensively tested are (please contribute instructions):\n \n-* On Windows, using a POSIX compatibility layer application such as [cygwin](http://www.cygwin.com/) or [msys2](http://www.msys2.org/).\n-* On Windows, using a native compiler tool chain such as [Visual Studio](https://www.visualstudio.com).\n+* On Windows using a POSIX compatibility layer application such as [cygwin](http://www.cygwin.com/) or [msys2](http://www.msys2.org/).\n+* On Windows using a native compiler tool chain such as [Visual Studio](https://www.visualstudio.com).\n \n Installing Windows Subsystem for Linux\n ---------------------------------------\n@@ -65,15 +65,11 @@ A host toolchain (`build-essential`) is necessary because some dependency\n packages (such as `protobuf`) need to build host utilities that are used in the\n build process.\n \n-See [dependencies.md](dependencies.md) for a complete overview.\n-\n-If you want to build the windows installer with `make deploy` you need [NSIS](https://nsis.sourceforge.io/Main_Page):\n-\n-    sudo apt install nsis\n+See also: [dependencies.md](dependencies.md).\n \n ## Building for 64-bit Windows\n \n-The first step is to install the mingw-w64 cross-compilation tool chain:\n+The first step is to install the mingw-w64 cross-compilation tool chain.\n \n     sudo apt install g++-mingw-w64-x86-64\n \n@@ -85,13 +81,13 @@ Once the toolchain is installed the build steps are common:\n \n Note that for WSL the Bitcoin Core source path MUST be somewhere in the default mount file system, for\n example /usr/src/bitcoin, AND not under /mnt/d/. If this is not the case the dependency autoconf scripts will fail.\n-This means you cannot use a directory that is located directly on the host Windows file system to perform the build.\n+This means you cannot use a directory that located directly on the host Windows file system to perform the build.\n \n Acquire the source in the usual way:\n \n     git clone https://github.com/bitcoin/bitcoin.git\n \n-Once the source code is ready the build steps are below:\n+Once the source code is ready the build steps are below.\n \n     PATH=$(echo \"$PATH\" | sed -e 's/:\\/mnt.*//g') # strip out problematic Windows %PATH% imported var\n     cd depends\n@@ -137,22 +133,18 @@ Installation\n -------------\n \n After building using the Windows subsystem it can be useful to copy the compiled\n-executables to a directory on the Windows drive in the same directory structure\n+executables to a directory on the windows drive in the same directory structure\n as they appear in the release `.zip` archive. This can be done in the following\n way. This will install to `c:\\workspace\\bitcoin`, for example:\n \n     make install DESTDIR=/mnt/c/workspace/bitcoin\n \n-You can also create an installer using:\n-\n-    make deploy\n-\n Footnotes\n ---------\n \n-<a name=\"footnote1\">1</a>: Starting from Ubuntu Xenial 16.04, both the 32 and 64 bit Mingw-w64 packages install two different\n+<a name=\"footnote1\">1</a>: Starting from Ubuntu Xenial 16.04 both the 32 and 64 bit Mingw-w64 packages install two different\n compiler options to allow a choice between either posix or win32 threads. The default option is win32 threads which is the more\n efficient since it will result in binary code that links directly with the Windows kernel32.lib. Unfortunately, the headers\n-required to support win32 threads conflict with some of the classes in the C++11 standard library, in particular std::mutex.\n+required to support win32 threads conflict with some of the classes in the C++11 standard library in particular std::mutex.\n It's not possible to build the Bitcoin Core code using the win32 version of the Mingw-w64 cross compilers (at least not without\n modifying headers in the Bitcoin Core source code)."
      },
      {
        "sha": "3fc7aecba8a40d7a48723e9e5e3fc43ab6d1a0d5",
        "filename": "doc/dependencies.md",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/doc/dependencies.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/doc/dependencies.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dependencies.md?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -3,15 +3,15 @@ Dependencies\n \n These are the dependencies currently used by Bitcoin Core. You can find instructions for installing them in the `build-*.md` file for your platform.\n \n-| Dependency | Version used | Minimum required | CVEs | Shared | [Bundled Qt library](https://doc.qt.io/qt-5/configure-options.html#third-party-libraries) |\n+| Dependency | Version used | Minimum required | CVEs | Shared | [Bundled Qt library](https://doc.qt.io/qt-5/configure-options.html) |\n | --- | --- | --- | --- | --- | --- |\n-| Berkeley DB | [4.8.30](https://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html) | 4.8.x | No |  |  |\n+| Berkeley DB | [4.8.30](http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html) | 4.8.x | No |  |  |\n | Boost | [1.64.0](https://www.boost.org/users/download/) | [1.47.0](https://github.com/bitcoin/bitcoin/pull/8920) | No |  |  |\n | Clang |  | [3.3+](https://llvm.org/releases/download.html) (C++11 support) |  |  |  |\n | D-Bus | [1.10.18](https://cgit.freedesktop.org/dbus/dbus/tree/NEWS?h=dbus-1.10) |  | No | Yes |  |\n-| Expat | [2.2.6](https://libexpat.github.io/) |  | No | Yes |  |\n+| Expat | [2.2.5](https://libexpat.github.io/) |  | No | Yes |  |\n | fontconfig | [2.12.1](https://www.freedesktop.org/software/fontconfig/release/) |  | No | Yes |  |\n-| FreeType | [2.7.1](https://download.savannah.gnu.org/releases/freetype) |  | No |  |  |\n+| FreeType | [2.7.1](http://download.savannah.gnu.org/releases/freetype) |  | No |  |  |\n | GCC |  | [4.8+](https://gcc.gnu.org/) (C++11 support) |  |  |  |\n | HarfBuzz-NG |  |  |  |  |  |\n | libevent | [2.1.8-stable](https://github.com/libevent/libevent/releases) | 2.0.22 | No |  |  |\n@@ -23,8 +23,8 @@ These are the dependencies currently used by Bitcoin Core. You can find instruct\n | protobuf | [2.6.1](https://github.com/google/protobuf/releases) |  | No |  |  |\n | Python (tests) |  | [3.4](https://www.python.org/downloads) |  |  |  |\n | qrencode | [3.4.4](https://fukuchi.org/works/qrencode) |  | No |  |  |\n-| Qt | [5.9.7](https://download.qt.io/official_releases/qt/) | [5.2](https://github.com/bitcoin/bitcoin/pull/14725) | No |  |  |\n+| Qt | [5.9.6](https://download.qt.io/official_releases/qt/) | 5.x | No |  |  |\n | XCB |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk#L87) (Linux only) |\n | xkbcommon |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk#L86) (Linux only) |\n-| ZeroMQ | [4.2.5](https://github.com/zeromq/libzmq/releases) | 4.0.0 | No |  |  |\n+| ZeroMQ | [4.2.3](https://github.com/zeromq/libzmq/releases) |  | No |  |  |\n | zlib | [1.2.11](https://zlib.net/) |  |  |  | No |"
      },
      {
        "sha": "47e15e0502d1fbd5788b8c9c32ab54601abff2e4",
        "filename": "doc/descriptors.md",
        "status": "modified",
        "additions": 16,
        "deletions": 54,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/doc/descriptors.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/doc/descriptors.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/descriptors.md?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -34,7 +34,6 @@ Output descriptors currently support:\n - `sh(wsh(multi(1,03f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8,03499fdf9e895e719cfd64e67f07d38e3226aa7b63678949e6e49b241a60e823e4,02d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e)))` describes a P2SH-P2WSH *1-of-3* multisig output with keys in the specified order.\n - `pk(xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8)` describes a P2PK output with the public key of the specified xpub.\n - `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1'/2)` describes a P2PKH output with child key *1'/2* of the specified xpub.\n-- `pkh([d34db33f/44'/0'/0']xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL/1/*)` describes a set of P2PKH outputs, but additionally specifies that the specified xpub is a child of a master with fingerprint `d34db33f`, and derived using path `44'/0'/0'`.\n - `wsh(multi(1,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/1/0/*,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/0/0/*))` describes a set of *1-of-2* P2WSH multisig outputs where the first multisig key is the *1/0/`i`* child of the first specified xpub and the second multisig key is the *0/0/`i`* child of the second specified xpub, and `i` is any number in a configurable range (`0-1000` by default).\n \n ## Reference\n@@ -53,26 +52,19 @@ Descriptors consist of several types of expressions. The top level expression is\n - `raw(HEX)` (top level only): the script whose hex encoding is HEX.\n \n `KEY` expressions:\n-- Optionally, key origin information, consisting of:\n-  - An open bracket `[`\n-  - Exactly 8 hex characters for the fingerprint of the key where the derivation starts (see BIP32 for details)\n-  - Followed by zero or more `/NUM` or `/NUM'` path elements to indicate unhardened or hardened derivation steps between the fingerprint and the key or xpub/xprv root that follows\n-  - A closing bracket `]`\n-- Followed by the actual key, which is either:\n-  - Hex encoded public keys (either 66 characters starting with `02` or `03` for a compressed pubkey, or 130 characters starting with `04` for an uncompressed pubkey).\n-    - Inside `wpkh` and `wsh`, only compressed public keys are permitted.\n-  - [WIF](https://en.bitcoin.it/wiki/Wallet_import_format) encoded private keys may be specified instead of the corresponding public key, with the same meaning.\n-  - `xpub` encoded extended public key or `xprv` encoded extended private key (as defined in [BIP 32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)).\n-    - Followed by zero or more `/NUM` unhardened and `/NUM'` hardened BIP32 derivation steps.\n-    - Optionally followed by a single `/*` or `/*'` final step to denote all (direct) unhardened or hardened children.\n-    - The usage of hardened derivation steps requires providing the private key.\n-\n-(Anywhere a `'` suffix is permitted to denote hardened derivation, the suffix `h` can be used instead.)\n+- Hex encoded public keys (66 characters starting with `02` or `03`, or 130 characters starting with `04`).\n+  - Inside `wpkh` and `wsh`, only compressed public keys are permitted.\n+- [WIF](https://en.bitcoin.it/wiki/Wallet_import_format) encoded private keys may be specified instead of the corresponding public key, with the same meaning.\n+-`xpub` encoded extended public key or `xprv` encoded private key (as defined in [BIP 32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)).\n+  - Followed by zero or more `/NUM` unhardened and `/NUM'` hardened BIP32 derivation steps.\n+  - Optionally followed by a single `/*` or `/*'` final step to denote all (direct) unhardened or hardened children.\n+  - The usage of hardened derivation steps requires providing the private key.\n+  - Instead of a `'`, the suffix `h` can be used to denote hardened derivation.\n \n `ADDR` expressions are any type of supported address:\n-- P2PKH addresses (base58, of the form `1...` for mainnet or `[nm]...` for testnet). Note that P2PKH addresses in descriptors cannot be used for P2PK outputs (use the `pk` function instead).\n-- P2SH addresses (base58, of the form `3...` for mainnet or `2...` for testnet, defined in [BIP 13](https://github.com/bitcoin/bips/blob/master/bip-0013.mediawiki)).\n-- Segwit addresses (bech32, of the form `bc1...` for mainnet or `tb1...` for testnet, defined in [BIP 173](https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki)).\n+- P2PKH addresses (base58, of the form `1...`). Note that P2PKH addresses in descriptors cannot be used for P2PK outputs (use the `pk` function instead).\n+- P2SH addresses (base58, of the form `3...`, defined in [BIP 13](https://github.com/bitcoin/bips/blob/master/bip-0013.mediawiki)).\n+- Segwit addresses (bech32, of the form `bc1...`, defined in [BIP 173](https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki)).\n \n ## Explanation\n \n@@ -84,9 +76,10 @@ imaginable, though they may not be optimal: P2SH-P2PK, P2SH-P2PKH,\n P2WSH-P2PK, P2WSH-P2PKH, P2SH-P2WSH-P2PK, P2SH-P2WSH-P2PKH.\n \n To describe these, we model these as functions. The functions `pk`\n-(P2PK), `pkh` (P2PKH) and `wpkh` (P2WPKH) take as input a `KEY` expression, and return the\n+(P2PK), `pkh` (P2PKH) and `wpkh` (P2WPKH) take as input a public key in\n+hexadecimal notation (which will be extended later), and return the\n corresponding *scriptPubKey*. The functions `sh` (P2SH) and `wsh` (P2WSH)\n-take as input a `SCRIPT` expression, and return the script describing P2SH and P2WSH\n+take as input a script, and return the script describing P2SH and P2WSH\n outputs with the input as embedded script. The names of the functions do\n not contain \"p2\" for brevity.\n \n@@ -95,7 +88,7 @@ not contain \"p2\" for brevity.\n Several pieces of software use multi-signature (multisig) scripts based\n on Bitcoin's OP_CHECKMULTISIG opcode. To support these, we introduce the\n `multi(k,key_1,key_2,...,key_n)` function. It represents a *k-of-n*\n-multisig policy, where any *k* out of the *n* provided `KEY` expressions must\n+multisig policy, where any *k* out of the *n* provided public keys must\n sign.\n \n Key order is significant. A `multi()` expression describes a multisig script\n@@ -123,37 +116,6 @@ Whenever a public key is described using a hardened derivation step, the\n script cannot be computed without access to the corresponding private\n key.\n \n-### Key origin identification\n-\n-In order to describe scripts whose signing keys reside on another device,\n-it may be necessary to identify the master key and derivation path an\n-xpub was derived with.\n-\n-For example, when following BIP44, it would be useful to describe a\n-change chain directly as `xpub.../44'/0'/0'/1/*` where `xpub...`\n-corresponds with the master key `m`. Unfortunately, since there are\n-hardened derivation steps that follow the xpub, this descriptor does not\n-let you compute scripts without access to the corresponding private keys.\n-Instead, it should be written as `xpub.../1/*`, where xpub corresponds to\n-`m/44'/0'/0'`.\n-\n-When interacting with a hardware device, it may be necessary to include\n-the entire path from the master down. [BIP174](https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki) standardizes this by\n-providing the master key *fingerprint* (first 32 bit of the Hash160 of\n-the master pubkey), plus all derivation steps. To support constructing\n-these, we permit providing this key origin information inside the\n-descriptor language, even though it does not affect the actual\n-scriptPubKeys it refers to.\n-\n-Every public key can be prefixed by an 8-character hexadecimal\n-fingerprint plus optional derivation steps (hardened and unhardened)\n-surrounded by brackets, identifying the master and derivation path the key or xpub\n-that follows was derived with.\n-\n-Note that the fingerprint of the parent only serves as a fast way to detect\n-parent and child nodes in software, and software must be willing to deal with\n-collisions.\n-\n ### Including private keys\n \n Often it is useful to communicate a description of scripts along with the\n@@ -168,4 +130,4 @@ In order to easily represent the sets of scripts currently supported by\n existing Bitcoin Core wallets, a convenience function `combo` is\n provided, which takes as input a public key, and describes a set of P2PK,\n P2PKH, P2WPKH, and P2SH-P2WPH scripts for that key. In case the key is\n-uncompressed, the set only includes P2PK and P2PKH scripts.\n+uncompressed, the set only includes P2PK and P2PKH scripts.\n\\ No newline at end of file"
      },
      {
        "sha": "da8384c53791426589057f577c6fa250a463c6ce",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 6,
        "deletions": 47,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -28,8 +28,6 @@ Developer Notes\n     - [Strings and formatting](#strings-and-formatting)\n     - [Variable names](#variable-names)\n     - [Threads and synchronization](#threads-and-synchronization)\n-    - [Scripts](#scripts)\n-        - [Shebang](#shebang)\n     - [Source code organization](#source-code-organization)\n     - [GUI](#gui)\n     - [Subtrees](#subtrees)\n@@ -71,7 +69,7 @@ tool to clean up patches automatically before submission.\n - **Symbol naming conventions**. These are preferred in new code, but are not\n required when doing so would need changes to significant pieces of existing\n code.\n-  - Variable (including function arguments) and namespace names are all lowercase, and may use `_` to\n+  - Variable and namespace names are all lowercase, and may use `_` to\n     separate words (snake_case).\n     - Class member variables have a `m_` prefix.\n     - Global variables have a `g_` prefix.\n@@ -441,11 +439,6 @@ General C++\n \n   - *Rationale*: This avoids memory and resource leaks, and ensures exception safety\n \n-- Use `MakeUnique()` to construct objects owned by `unique_ptr`s\n-\n-  - *Rationale*: `MakeUnique` is concise and ensures exception safety in complex expressions.\n-    `MakeUnique` is a temporary project local implementation of `std::make_unique` (C++14).\n-\n C++ data structures\n --------------------\n \n@@ -519,7 +512,7 @@ Strings and formatting\n   - *Rationale*: These functions do overflow checking, and avoid pesky locale issues.\n \n - Avoid using locale dependent functions if possible. You can use the provided\n-  [`lint-locale-dependence.sh`](/test/lint/lint-locale-dependence.sh)\n+  [`lint-locale-dependence.sh`](/contrib/devtools/lint-locale-dependence.sh)\n   to check for accidental use of locale dependent functions.\n \n   - *Rationale*: Unnecessary locale dependence can cause bugs that are very tricky to isolate and fix.\n@@ -604,31 +597,6 @@ TRY_LOCK(cs_vNodes, lockNodes);\n }\n ```\n \n-Scripts\n---------------------------\n-\n-### Shebang\n-\n-- Use `#!/usr/bin/env bash` instead of obsolete `#!/bin/bash`.\n-\n-  - [*Rationale*](https://github.com/dylanaraps/pure-bash-bible#shebang):\n-\n-    `#!/bin/bash` assumes it is always installed to /bin/ which can cause issues;\n-\n-    `#!/usr/bin/env bash` searches the user's PATH to find the bash binary.\n-\n-  OK:\n-\n-```bash\n-#!/usr/bin/env bash\n-```\n-\n-  Wrong:\n-\n-```bash\n-#!/bin/bash\n-```\n-\n Source code organization\n --------------------------\n \n@@ -732,16 +700,16 @@ Current subtrees include:\n   - Upstream at https://github.com/google/leveldb ; Maintained by Google, but\n     open important PRs to Core to avoid delay.\n   - **Note**: Follow the instructions in [Upgrading LevelDB](#upgrading-leveldb) when\n-    merging upstream changes to the LevelDB subtree.\n+    merging upstream changes to the leveldb subtree.\n \n - src/libsecp256k1\n-  - Upstream at https://github.com/bitcoin-core/secp256k1/ ; actively maintained by Core contributors.\n+  - Upstream at https://github.com/bitcoin-core/secp256k1/ ; actively maintaned by Core contributors.\n \n - src/crypto/ctaes\n   - Upstream at https://github.com/bitcoin-core/ctaes ; actively maintained by Core contributors.\n \n - src/univalue\n-  - Upstream at https://github.com/bitcoin-core/univalue ; actively maintained by Core contributors, deviates from upstream https://github.com/jgarzik/univalue\n+  - Upstream at https://github.com/jgarzik/univalue ; report important PRs to Core to avoid delay.\n \n Upgrading LevelDB\n ---------------------\n@@ -854,16 +822,7 @@ To create a scripted-diff:\n     - `-BEGIN VERIFY SCRIPT-`\n     - `-END VERIFY SCRIPT-`\n \n-The scripted-diff is verified by the tool `test/lint/commit-script-check.sh`. The tool's default behavior when supplied\n-with a commit is to verify all scripted-diffs from the beginning of time up to said commit. Internally, the tool passes\n-the first supplied argument to `git rev-list --reverse` to determine which commits to verify script-diffs for, ignoring\n-commits that don't conform to the commit message format described above.\n-\n-For development, it might be more convenient to verify all scripted-diffs in a range `A..B`, for example:\n-\n-```bash\n-test/lint/commit-script-check.sh origin/master..HEAD\n-```\n+The scripted-diff is verified by the tool `test/lint/commit-script-check.sh`\n \n Commit [`bb81e173`](https://github.com/bitcoin/bitcoin/commit/bb81e173) is an example of a scripted-diff.\n "
      },
      {
        "sha": "5657b1e6cbebb7d3424836b56bff78036017e7b2",
        "filename": "doc/files.md",
        "status": "modified",
        "additions": 22,
        "deletions": 23,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/doc/files.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/doc/files.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/files.md?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -1,26 +1,25 @@\n-Filename            | Description\n---------------------|----------------------------------------------------------------------------------------------------------------------------\n-banlist.dat         | stores the IPs/Subnets of banned nodes\n-bitcoin.conf        | contains configuration settings for bitcoind or bitcoin-qt\n-bitcoind.pid        | stores the process id of bitcoind while running\n-blocks/blk000??.dat | block data (custom, 128 MiB per file); since 0.8.0\n-blocks/rev000??.dat | block undo data (custom); since 0.8.0 (format changed since pre-0.8)\n-blocks/index/*      | block index (LevelDB); since 0.8.0\n-chainstate/*        | blockchain state database (LevelDB); since 0.8.0\n-database/*          | BDB database environment; only used for wallet since 0.8.0; moved to wallets/ directory on new installs since 0.16.0\n-db.log              | wallet database log file; moved to wallets/ directory on new installs since 0.16.0\n-debug.log           | contains debug information and general logging generated by bitcoind or bitcoin-qt\n-fee_estimates.dat   | stores statistics used to estimate minimum transaction fees and priorities required for confirmation; since 0.10.0\n-indexes/txindex/*   | optional transaction index database (LevelDB); since 0.17.0\n-mempool.dat         | dump of the mempool's transactions; since 0.14.0\n-peers.dat           | peer IP address database (custom format); since 0.7.0\n-wallet.dat          | personal wallet (BDB) with keys and transactions; moved to wallets/ directory on new installs since 0.16.0\n-wallets/database/*  | BDB database environment; used for wallets since 0.16.0\n-wallets/db.log      | wallet database log file; since 0.16.0\n-wallets/wallet.dat  | personal wallet (BDB) with keys and transactions; since 0.16.0\n-.cookie             | session RPC authentication cookie (written at start when cookie authentication is used, deleted on shutdown): since 0.12.0\n-onion_private_key   | cached Tor hidden service private key for `-listenonion`: since 0.12.0\n-guisettings.ini.bak | backup of former GUI settings after `-resetguisettings` is used\n+\n+* banlist.dat: stores the IPs/Subnets of banned nodes\n+* bitcoin.conf: contains configuration settings for bitcoind or bitcoin-qt\n+* bitcoind.pid: stores the process id of bitcoind while running\n+* blocks/blk000??.dat: block data (custom, 128 MiB per file); since 0.8.0\n+* blocks/rev000??.dat; block undo data (custom); since 0.8.0 (format changed since pre-0.8)\n+* blocks/index/*; block index (LevelDB); since 0.8.0\n+* chainstate/*; block chain state database (LevelDB); since 0.8.0\n+* database/*: BDB database environment; only used for wallet since 0.8.0; moved to wallets/ directory on new installs since 0.16.0\n+* db.log: wallet database log file; moved to wallets/ directory on new installs since 0.16.0\n+* debug.log: contains debug information and general logging generated by bitcoind or bitcoin-qt\n+* fee_estimates.dat: stores statistics used to estimate minimum transaction fees and priorities required for confirmation; since 0.10.0\n+* indexes/txindex/*: optional transaction index database (LevelDB); since 0.17.0\n+* mempool.dat: dump of the mempool's transactions; since 0.14.0.\n+* peers.dat: peer IP address database (custom format); since 0.7.0\n+* wallet.dat: personal wallet (BDB) with keys and transactions; moved to wallets/ directory on new installs since 0.16.0\n+* wallets/database/*: BDB database environment; used for wallets since 0.16.0\n+* wallets/db.log: wallet database log file; since 0.16.0\n+* wallets/wallet.dat: personal wallet (BDB) with keys and transactions; since 0.16.0\n+* .cookie: session RPC authentication cookie (written at start when cookie authentication is used, deleted on shutdown): since 0.12.0\n+* onion_private_key: cached Tor hidden service private key for `-listenonion`: since 0.12.0\n+* guisettings.ini.bak: backup of former GUI settings after `-resetguisettings` is used\n \n Only used in pre-0.8.0\n ---------------------"
      },
      {
        "sha": "239b74e4e1d75ec50532c0214337d3b4c66501fd",
        "filename": "doc/init.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/doc/init.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/doc/init.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/init.md?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -22,7 +22,7 @@ Configuration\n \n At a bare minimum, bitcoind requires that the rpcpassword setting be set\n when running as a daemon.  If the configuration file does not exist or this\n-setting is not set, bitcoind will shut down promptly after startup.\n+setting is not set, bitcoind will shutdown promptly after startup.\n \n This password does not have to be remembered or typed as it is mostly used\n as a fixed token that bitcoind and client programs read from the configuration"
      },
      {
        "sha": "08ff4d6ac1d5cc1135ee6c38d54d17fcfd7252eb",
        "filename": "doc/man/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/doc/man/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/doc/man/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/Makefile.am?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -8,10 +8,6 @@ if ENABLE_QT\n   dist_man1_MANS+=bitcoin-qt.1\n endif\n \n-if BUILD_BITCOIN_CLI\n-  dist_man1_MANS+=bitcoin-cli.1\n-endif\n-\n-if BUILD_BITCOIN_TX\n-  dist_man1_MANS+=bitcoin-tx.1\n+if BUILD_BITCOIN_UTILS\n+  dist_man1_MANS+=bitcoin-cli.1 bitcoin-tx.1\n endif"
      },
      {
        "sha": "9f8cb5cafffda8b58bba73df2a820bf4f78069d5",
        "filename": "doc/man/bitcoin-cli.1",
        "status": "modified",
        "additions": 19,
        "deletions": 17,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/doc/man/bitcoin-cli.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/doc/man/bitcoin-cli.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-cli.1?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -1,17 +1,21 @@\n .\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIN-CLI \"1\" \"July 2018\" \"bitcoin-cli v0.16.99.0\" \"User Commands\"\n+.TH BITCOIN-CLI \"1\" \"December 2018\" \"bitcoin-cli v0.17.1.0\" \"User Commands\"\n .SH NAME\n-bitcoin-cli \\- manual page for bitcoin-cli v0.16.99.0\n+bitcoin-cli \\- manual page for bitcoin-cli v0.17.1.0\n+.SH SYNOPSIS\n+.B bitcoin-cli\n+[\\fI\\,options\\/\\fR] \\fI\\,<command> \\/\\fR[\\fI\\,params\\/\\fR]  \\fI\\,Send command to Bitcoin Core\\/\\fR\n+.br\n+.B bitcoin-cli\n+[\\fI\\,options\\/\\fR] \\fI\\,-named <command> \\/\\fR[\\fI\\,name=value\\/\\fR]...  \\fI\\,Send command to Bitcoin Core (with named arguments)\\/\\fR\n+.br\n+.B bitcoin-cli\n+[\\fI\\,options\\/\\fR] \\fI\\,help                List commands\\/\\fR\n+.br\n+.B bitcoin-cli\n+[\\fI\\,options\\/\\fR] \\fI\\,help <command>      Get help for a command\\/\\fR\n .SH DESCRIPTION\n-Bitcoin Core RPC client version v0.16.99.0\n-.SS \"Usage:\"\n-.TP\n-bitcoin\\-cli [options] <command> [params]\n-Send command to Bitcoin Core\n-.IP\n-bitcoin\\-cli [options] \\fB\\-named\\fR <command> [name=value] ... Send command to Bitcoin Core (with named arguments)\n-bitcoin\\-cli [options] help                List commands\n-bitcoin\\-cli [options] help <command>      Get help for a command\n+Bitcoin Core RPC client version v0.17.1.0\n .SH OPTIONS\n .HP\n \\-?\n@@ -77,15 +81,13 @@ corresponding \\fB\\-wallet\\fR option passed to bitcoind)\n \\fB\\-stdin\\fR\n .IP\n Read extra arguments from standard input, one per line until EOF/Ctrl\\-D\n-(recommended for sensitive information such as passphrases).\n-When combined with \\fB\\-stdinrpcpass\\fR, the first line from standard\n-input is used for the RPC password.\n+(recommended for sensitive information such as passphrases). When\n+combined with \\fB\\-stdinrpcpass\\fR, the first line from standard input\n+is used for the RPC password.\n .HP\n \\fB\\-stdinrpcpass\\fR\n-.TP\n-Read RPC password from standard input as a single line.\n-When combined\n .IP\n+Read RPC password from standard input as a single line. When combined\n with \\fB\\-stdin\\fR, the first line from standard input is used for the\n RPC password.\n .HP"
      },
      {
        "sha": "cea8a41b54767232f0dadbadf404a42d8fe56f1b",
        "filename": "doc/man/bitcoin-qt.1",
        "status": "modified",
        "additions": 27,
        "deletions": 25,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/doc/man/bitcoin-qt.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/doc/man/bitcoin-qt.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-qt.1?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -1,12 +1,12 @@\n .\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIN-QT \"1\" \"July 2018\" \"bitcoin-qt v0.16.99.0\" \"User Commands\"\n+.TH BITCOIN-QT \"1\" \"December 2018\" \"bitcoin-qt v0.17.1.0\" \"User Commands\"\n .SH NAME\n-bitcoin-qt \\- manual page for bitcoin-qt v0.16.99.0\n+bitcoin-qt \\- manual page for bitcoin-qt v0.17.1.0\n+.SH SYNOPSIS\n+.B bitcoin-qt\n+[\\fI\\,command-line options\\/\\fR]\n .SH DESCRIPTION\n-Bitcoin Core version v0.16.99.0 (64\\-bit)\n-Usage:\n-.IP\n-bitcoin\\-qt [command\\-line options]\n+Bitcoin Core version v0.17.1.0 (64\\-bit)\n .SH OPTIONS\n .HP\n \\-?\n@@ -23,9 +23,9 @@ long fork (%s in cmd is replaced by message)\n If this block is in the chain assume that it and its ancestors are valid\n and potentially skip their script verification (0 to verify all,\n default:\n-0000000000000000005214481d2d96f898e3d5416e43359c145944a909d242e0,\n+0000000000000000002e63058c023a9a1de233554f28c7b21380b6c9003f36a8,\n testnet:\n-0000000002e9e7b00e1f6dc5123a04aad68dd0f0968d8c7aa45f6640795c37b1)\n+0000000000000037a8cd3e06cd5edbfe9dd1dbcc5dacab279376ef7cfc2b4c75)\n .HP\n \\fB\\-blocknotify=\\fR<cmd>\n .IP\n@@ -61,7 +61,8 @@ Set database cache size in megabytes (4 to 16384, default: 450)\n \\fB\\-debuglogfile=\\fR<file>\n .IP\n Specify location of debug log file. Relative paths will be prefixed by a\n-net\\-specific datadir location. (0 to disable; default: debug.log)\n+net\\-specific datadir location. (\\fB\\-nodebuglogfile\\fR to disable;\n+default: debug.log)\n .HP\n \\fB\\-includeconf=\\fR<file>\n .IP\n@@ -87,7 +88,7 @@ Do not keep transactions in the mempool longer than <n> hours (default:\n .HP\n \\fB\\-par=\\fR<n>\n .IP\n-Set the number of script verification threads (\\fB\\-8\\fR to 16, 0 = auto, <0 =\n+Set the number of script verification threads (\\fB\\-6\\fR to 16, 0 = auto, <0 =\n leave that many cores free, default: 0)\n .HP\n \\fB\\-persistmempool\\fR\n@@ -108,7 +109,7 @@ blocks if a target size in MiB is provided. This mode is\n incompatible with \\fB\\-txindex\\fR and \\fB\\-rescan\\fR. Warning: Reverting this\n setting requires re\\-downloading the entire blockchain. (default:\n 0 = disable pruning blocks, 1 = allow manual pruning via RPC,\n->550 = automatically prune block files to stay under the\n+>=550 = automatically prune block files to stay under the\n specified target size in MiB)\n .HP\n \\fB\\-reindex\\fR\n@@ -157,7 +158,7 @@ for IPv6\n .HP\n \\fB\\-connect=\\fR<ip>\n .IP\n-Connect only to the specified node; \\fB\\-connect\\fR=\\fI\\,0\\/\\fR disables automatic\n+Connect only to the specified node; \\fB\\-noconnect\\fR disables automatic\n connections (the rules for this peer are the same as for\n \\fB\\-addnode\\fR). This option can be specified multiple times to connect\n to multiple nodes.\n@@ -221,8 +222,8 @@ Tries to keep outbound traffic under the given target (in MiB per 24h),\n .HP\n \\fB\\-onion=\\fR<ip:port>\n .IP\n-Use separate SOCKS5 proxy to reach peers via Tor hidden services\n-(default: \\fB\\-proxy\\fR)\n+Use separate SOCKS5 proxy to reach peers via Tor hidden services, set\n+\\fB\\-noonion\\fR to disable (default: \\fB\\-proxy\\fR)\n .HP\n \\fB\\-onlynet=\\fR<net>\n .IP\n@@ -242,11 +243,12 @@ Relay non\\-P2SH multisig (default: 1)\n .HP\n \\fB\\-port=\\fR<port>\n .IP\n-Listen for connections on <port> (default: 8333 or testnet: 18333)\n+Listen for connections on <port> (default: 9333 or testnet: 19333)\n .HP\n \\fB\\-proxy=\\fR<ip:port>\n .IP\n-Connect through SOCKS5 proxy\n+Connect through SOCKS5 proxy, set \\fB\\-noproxy\\fR to disable (default:\n+disabled)\n .HP\n \\fB\\-proxyrandomize\\fR\n .IP\n@@ -317,15 +319,15 @@ Do not load the wallet and disable wallet RPC calls\n .HP\n \\fB\\-discardfee=\\fR<amt>\n .IP\n-The fee rate (in BTC/kB) that indicates your tolerance for discarding\n+The fee rate (in BTCV/kB) that indicates your tolerance for discarding\n change by adding it to the fee (default: 0.0001). Note: An output\n is discarded if it is dust at this rate, but we will always\n discard up to the dust relay fee and a discard fee above that is\n limited by the fee estimate for the longest target\n .HP\n \\fB\\-fallbackfee=\\fR<amt>\n .IP\n-A fee rate (in BTC/kB) that will be used when fee estimation has\n+A fee rate (in BTCV/kB) that will be used when fee estimation has\n insufficient data (default: 0.0002)\n .HP\n \\fB\\-keypool=\\fR<n>\n@@ -334,12 +336,12 @@ Set key pool size to <n> (default: 1000)\n .HP\n \\fB\\-mintxfee=\\fR<amt>\n .IP\n-Fees (in BTC/kB) smaller than this are considered zero fee for\n+Fees (in BTCV/kB) smaller than this are considered zero fee for\n transaction creation (default: 0.00001)\n .HP\n \\fB\\-paytxfee=\\fR<amt>\n .IP\n-Fee (in BTC/kB) to add to transactions you send (default: 0.00)\n+Fee (in BTCV/kB) to add to transactions you send (default: 0.00)\n .HP\n \\fB\\-rescan\\fR\n .IP\n@@ -418,7 +420,7 @@ Debugging/Testing options:\n .HP\n \\fB\\-debug=\\fR<category>\n .IP\n-Output debugging information (default: 0, supplying <category> is\n+Output debugging information (default: \\fB\\-nodebug\\fR, supplying <category> is\n optional). If <category> is not supplied or if <category> = 1,\n output all debugging information. <category> can be: net, tor,\n mempool, http, bench, zmq, db, rpc, estimatefee, addrman,\n@@ -445,14 +447,14 @@ Prepend debug output with timestamp (default: 1)\n .HP\n \\fB\\-maxtxfee=\\fR<amt>\n .IP\n-Maximum total fees (in BTC) to use in a single wallet transaction or raw\n+Maximum total fees (in BTCV) to use in a single wallet transaction or raw\n transaction; setting this too low may abort large transactions\n (default: 0.10)\n .HP\n \\fB\\-printtoconsole\\fR\n .IP\n Send trace/debug info to console (default: 1 when no \\fB\\-daemon\\fR. To disable\n-logging to file, set debuglogfile=0)\n+logging to file, set \\fB\\-nodebuglogfile\\fR)\n .HP\n \\fB\\-shrinkdebugfile\\fR\n .IP\n@@ -490,7 +492,7 @@ Enable transaction replacement in the memory pool (default: 1)\n .HP\n \\fB\\-minrelaytxfee=\\fR<amt>\n .IP\n-Fees (in BTC/kB) smaller than this are considered zero fee for relaying,\n+Fees (in BTCV/kB) smaller than this are considered zero fee for relaying,\n mining and transaction creation (default: 0.00001)\n .HP\n \\fB\\-whitelistforcerelay\\fR\n@@ -511,7 +513,7 @@ Set maximum BIP141 block weight (default: 3996000)\n .HP\n \\fB\\-blockmintxfee=\\fR<amt>\n .IP\n-Set lowest fee rate (in BTC/kB) for transactions to be included in block\n+Set lowest fee rate (in BTCV/kB) for transactions to be included in block\n creation. (default: 0.00001)\n .PP\n RPC server options:"
      },
      {
        "sha": "10f8231c689748f9d15875f08aa38dbc61f114d9",
        "filename": "doc/man/bitcoin-tx.1",
        "status": "modified",
        "additions": 9,
        "deletions": 10,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/doc/man/bitcoin-tx.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/doc/man/bitcoin-tx.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-tx.1?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -1,16 +1,15 @@\n .\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIN-TX \"1\" \"July 2018\" \"bitcoin-tx v0.16.99.0\" \"User Commands\"\n+.TH BITCOIN-TX \"1\" \"December 2018\" \"bitcoin-tx v0.17.1.0\" \"User Commands\"\n .SH NAME\n-bitcoin-tx \\- manual page for bitcoin-tx v0.16.99.0\n+bitcoin-tx \\- manual page for bitcoin-tx v0.17.1.0\n+.SH SYNOPSIS\n+.B bitcoin-tx\n+[\\fI\\,options\\/\\fR] \\fI\\,<hex-tx> \\/\\fR[\\fI\\,commands\\/\\fR]  \\fI\\,Update hex-encoded bitcoin transaction\\/\\fR\n+.br\n+.B bitcoin-tx\n+[\\fI\\,options\\/\\fR] \\fI\\,-create \\/\\fR[\\fI\\,commands\\/\\fR]   \\fI\\,Create hex-encoded bitcoin transaction\\/\\fR\n .SH DESCRIPTION\n-Bitcoin Core bitcoin\\-tx utility version v0.16.99.0\n-.SS \"Usage:\"\n-.TP\n-bitcoin\\-tx [options] <hex\\-tx> [commands]\n-Update hex\\-encoded bitcoin transaction\n-.TP\n-bitcoin\\-tx [options] \\fB\\-create\\fR [commands]\n-Create hex\\-encoded bitcoin transaction\n+Bitcoin Core bitcoin\\-tx utility version v0.17.1.0\n .SH OPTIONS\n .HP\n \\-?"
      },
      {
        "sha": "05a64ef205f99f8002ed83540c9164517c4a3d84",
        "filename": "doc/man/bitcoind.1",
        "status": "modified",
        "additions": 27,
        "deletions": 26,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/doc/man/bitcoind.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/doc/man/bitcoind.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoind.1?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -1,13 +1,12 @@\n .\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIND \"1\" \"July 2018\" \"bitcoind v0.16.99.0\" \"User Commands\"\n+.TH BITCOIND \"1\" \"December 2018\" \"bitcoind v0.17.1.0\" \"User Commands\"\n .SH NAME\n-bitcoind \\- manual page for bitcoind v0.16.99.0\n+bitcoind \\- manual page for bitcoind v0.17.1.0\n+.SH SYNOPSIS\n+.B bitcoind\n+[\\fI\\,options\\/\\fR]                     \\fI\\,Start Bitcoin Core Daemon\\/\\fR\n .SH DESCRIPTION\n-Bitcoin Core Daemon version v0.16.99.0\n-.SS \"Usage:\"\n-.TP\n-bitcoind [options]\n-Start Bitcoin Core Daemon\n+Bitcoin Core Daemon version v0.17.1.0\n .SH OPTIONS\n .HP\n \\-?\n@@ -24,9 +23,9 @@ long fork (%s in cmd is replaced by message)\n If this block is in the chain assume that it and its ancestors are valid\n and potentially skip their script verification (0 to verify all,\n default:\n-0000000000000000005214481d2d96f898e3d5416e43359c145944a909d242e0,\n+0000000000000000002e63058c023a9a1de233554f28c7b21380b6c9003f36a8,\n testnet:\n-0000000002e9e7b00e1f6dc5123a04aad68dd0f0968d8c7aa45f6640795c37b1)\n+0000000000000037a8cd3e06cd5edbfe9dd1dbcc5dacab279376ef7cfc2b4c75)\n .HP\n \\fB\\-blocknotify=\\fR<cmd>\n .IP\n@@ -62,7 +61,8 @@ Set database cache size in megabytes (4 to 16384, default: 450)\n \\fB\\-debuglogfile=\\fR<file>\n .IP\n Specify location of debug log file. Relative paths will be prefixed by a\n-net\\-specific datadir location. (0 to disable; default: debug.log)\n+net\\-specific datadir location. (\\fB\\-nodebuglogfile\\fR to disable;\n+default: debug.log)\n .HP\n \\fB\\-includeconf=\\fR<file>\n .IP\n@@ -88,7 +88,7 @@ Do not keep transactions in the mempool longer than <n> hours (default:\n .HP\n \\fB\\-par=\\fR<n>\n .IP\n-Set the number of script verification threads (\\fB\\-8\\fR to 16, 0 = auto, <0 =\n+Set the number of script verification threads (\\fB\\-6\\fR to 16, 0 = auto, <0 =\n leave that many cores free, default: 0)\n .HP\n \\fB\\-persistmempool\\fR\n@@ -109,7 +109,7 @@ blocks if a target size in MiB is provided. This mode is\n incompatible with \\fB\\-txindex\\fR and \\fB\\-rescan\\fR. Warning: Reverting this\n setting requires re\\-downloading the entire blockchain. (default:\n 0 = disable pruning blocks, 1 = allow manual pruning via RPC,\n->550 = automatically prune block files to stay under the\n+>=550 = automatically prune block files to stay under the\n specified target size in MiB)\n .HP\n \\fB\\-reindex\\fR\n@@ -158,7 +158,7 @@ for IPv6\n .HP\n \\fB\\-connect=\\fR<ip>\n .IP\n-Connect only to the specified node; \\fB\\-connect\\fR=\\fI\\,0\\/\\fR disables automatic\n+Connect only to the specified node; \\fB\\-noconnect\\fR disables automatic\n connections (the rules for this peer are the same as for\n \\fB\\-addnode\\fR). This option can be specified multiple times to connect\n to multiple nodes.\n@@ -222,8 +222,8 @@ Tries to keep outbound traffic under the given target (in MiB per 24h),\n .HP\n \\fB\\-onion=\\fR<ip:port>\n .IP\n-Use separate SOCKS5 proxy to reach peers via Tor hidden services\n-(default: \\fB\\-proxy\\fR)\n+Use separate SOCKS5 proxy to reach peers via Tor hidden services, set\n+\\fB\\-noonion\\fR to disable (default: \\fB\\-proxy\\fR)\n .HP\n \\fB\\-onlynet=\\fR<net>\n .IP\n@@ -243,11 +243,12 @@ Relay non\\-P2SH multisig (default: 1)\n .HP\n \\fB\\-port=\\fR<port>\n .IP\n-Listen for connections on <port> (default: 8333 or testnet: 18333)\n+Listen for connections on <port> (default: 9333 or testnet: 19333)\n .HP\n \\fB\\-proxy=\\fR<ip:port>\n .IP\n-Connect through SOCKS5 proxy\n+Connect through SOCKS5 proxy, set \\fB\\-noproxy\\fR to disable (default:\n+disabled)\n .HP\n \\fB\\-proxyrandomize\\fR\n .IP\n@@ -318,15 +319,15 @@ Do not load the wallet and disable wallet RPC calls\n .HP\n \\fB\\-discardfee=\\fR<amt>\n .IP\n-The fee rate (in BTC/kB) that indicates your tolerance for discarding\n+The fee rate (in BTCV/kB) that indicates your tolerance for discarding\n change by adding it to the fee (default: 0.0001). Note: An output\n is discarded if it is dust at this rate, but we will always\n discard up to the dust relay fee and a discard fee above that is\n limited by the fee estimate for the longest target\n .HP\n \\fB\\-fallbackfee=\\fR<amt>\n .IP\n-A fee rate (in BTC/kB) that will be used when fee estimation has\n+A fee rate (in BTCV/kB) that will be used when fee estimation has\n insufficient data (default: 0.0002)\n .HP\n \\fB\\-keypool=\\fR<n>\n@@ -335,12 +336,12 @@ Set key pool size to <n> (default: 1000)\n .HP\n \\fB\\-mintxfee=\\fR<amt>\n .IP\n-Fees (in BTC/kB) smaller than this are considered zero fee for\n+Fees (in BTCV/kB) smaller than this are considered zero fee for\n transaction creation (default: 0.00001)\n .HP\n \\fB\\-paytxfee=\\fR<amt>\n .IP\n-Fee (in BTC/kB) to add to transactions you send (default: 0.00)\n+Fee (in BTCV/kB) to add to transactions you send (default: 0.00)\n .HP\n \\fB\\-rescan\\fR\n .IP\n@@ -419,7 +420,7 @@ Debugging/Testing options:\n .HP\n \\fB\\-debug=\\fR<category>\n .IP\n-Output debugging information (default: 0, supplying <category> is\n+Output debugging information (default: \\fB\\-nodebug\\fR, supplying <category> is\n optional). If <category> is not supplied or if <category> = 1,\n output all debugging information. <category> can be: net, tor,\n mempool, http, bench, zmq, db, rpc, estimatefee, addrman,\n@@ -446,14 +447,14 @@ Prepend debug output with timestamp (default: 1)\n .HP\n \\fB\\-maxtxfee=\\fR<amt>\n .IP\n-Maximum total fees (in BTC) to use in a single wallet transaction or raw\n+Maximum total fees (in BTCV) to use in a single wallet transaction or raw\n transaction; setting this too low may abort large transactions\n (default: 0.10)\n .HP\n \\fB\\-printtoconsole\\fR\n .IP\n Send trace/debug info to console (default: 1 when no \\fB\\-daemon\\fR. To disable\n-logging to file, set debuglogfile=0)\n+logging to file, set \\fB\\-nodebuglogfile\\fR)\n .HP\n \\fB\\-shrinkdebugfile\\fR\n .IP\n@@ -491,7 +492,7 @@ Enable transaction replacement in the memory pool (default: 1)\n .HP\n \\fB\\-minrelaytxfee=\\fR<amt>\n .IP\n-Fees (in BTC/kB) smaller than this are considered zero fee for relaying,\n+Fees (in BTCV/kB) smaller than this are considered zero fee for relaying,\n mining and transaction creation (default: 0.00001)\n .HP\n \\fB\\-whitelistforcerelay\\fR\n@@ -512,7 +513,7 @@ Set maximum BIP141 block weight (default: 3996000)\n .HP\n \\fB\\-blockmintxfee=\\fR<amt>\n .IP\n-Set lowest fee rate (in BTC/kB) for transactions to be included in block\n+Set lowest fee rate (in BTCV/kB) for transactions to be included in block\n creation. (default: 0.00001)\n .PP\n RPC server options:"
      },
      {
        "sha": "560b45ef312653319576f3538dc96ecc42f3e717",
        "filename": "doc/psbt.md",
        "status": "removed",
        "additions": 0,
        "deletions": 132,
        "changes": 132,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/doc/psbt.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/doc/psbt.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/psbt.md?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "patch": "@@ -1,132 +0,0 @@\n-# PSBT Howto for Bitcoin Core\n-\n-Since Bitcoin Core 0.17, an RPC interface exists for Partially Signed Bitcoin\n-Transactions (PSBTs, as specified in\n-[BIP 174](https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki)).\n-\n-This document describes the overall workflow for producing signed transactions\n-through the use of PSBT, and the specific RPC commands used in typical\n-scenarios.\n-\n-## PSBT in general\n-\n-PSBT is an interchange format for Bitcoin transactions that are not fully signed\n-yet, together with relevant metadata to help entities work towards signing it.\n-It is intended to simplify workflows where multiple parties need to cooperate to\n-produce a transaction. Examples include hardware wallets, multisig setups, and\n-[CoinJoin](https://bitcointalk.org/?topic=279249) transactions.\n-\n-### Overall workflow\n-\n-Overall, the construction of a fully signed Bitcoin transaction goes through the\n-following steps:\n-\n-- A **Creator** proposes a particular transaction to be created. They construct\n-  a PSBT that contains certain inputs and outputs, but no additional metadata.\n-- For each input, an **Updater** adds information about the UTXOs being spent by\n-  the transaction to the PSBT. They also add information about the scripts and\n-  public keys involved in each of the inputs (and possibly outputs) of the PSBT.\n-- **Signers** inspect the transaction and its metadata to decide whether they\n-  agree with the transaction. They can use amount information from the UTXOs\n-  to assess the values and fees involved. If they agree, they produce a\n-  partial signature for the inputs for which they have relevant key(s).\n-- A **Finalizer** is run for each input to convert the partial signatures and\n-  possibly script information into a final `scriptSig` and/or `scriptWitness`.\n-- An **Extractor** produces a valid Bitcoin transaction (in network format)\n-  from a PSBT for which all inputs are finalized.\n-\n-Generally, each of the above (excluding Creator and Extractor) will simply\n-add more and more data to a particular PSBT, until all inputs are fully signed.\n-In a naive workflow, they all have to operate sequentially, passing the PSBT\n-from one to the next, until the Extractor can convert it to a real transaction.\n-In order to permit parallel operation, **Combiners** can be employed which merge\n-metadata from different PSBTs for the same unsigned transaction.\n-\n-The names above in bold are the names of the roles defined in BIP174. They're\n-useful in understanding the underlying steps, but in practice, software and\n-hardware implementations will typically implement multiple roles simultaneously.\n-\n-## PSBT in Bitcoin Core\n-\n-### RPCs\n-\n-- **`converttopsbt` (Creator)** is a utility RPC that converts an\n-  unsigned raw transaction to PSBT format. It ignores existing signatures.\n-- **`createpsbt` (Creator)** is a utility RPC that takes a list of inputs and\n-  outputs and converts them to a PSBT with no additional information. It is\n-  equivalent to calling `createrawtransaction` followed by `converttopsbt`.\n-- **`walletcreatefundedpsbt` (Creator, Updater)** is a wallet RPC that creates a\n-  PSBT with the specified inputs and outputs, adds additional inputs and change\n-  to it to balance it out, and adds relevant metadata. In particular, for inputs\n-  that the wallet knows about (counting towards its normal or watch-only\n-  balance), UTXO information will be added. For outputs and inputs with UTXO\n-  information present, key and script information will be added which the wallet\n-  knows about. It is equivalent to running `createrawtransaction`, followed by\n-  `fundrawtransaction`, and `converttopsbt`.\n-- **`walletprocesspsbt` (Updater, Signer, Finalizer)** is a wallet RPC that takes as\n-  input a PSBT, adds UTXO, key, and script data to inputs and outputs that miss\n-  it, and optionally signs inputs. Where possible it also finalizes the partial\n-  signatures.\n-- **`finalizepsbt` (Finalizer, Extractor)** is a utility RPC that finalizes any\n-  partial signatures, and if all inputs are finalized, converts the result to a\n-  fully signed transaction which can be broadcast with `sendrawtransaction`.\n-- **`combinepsbt` (Combiner)** is a utility RPC that implements a Combiner. It\n-  can be used at any point in the workflow to merge information added to\n-  different versions of the same PSBT. In particular it is useful to combine the\n-  output of multiple Updaters or Signers.\n-- **`decodepsbt`** is a diagnostic utility RPC which will show all information in\n-  a PSBT in human-readable form, as well as compute its eventual fee if known.\n-\n-### Workflows\n-\n-#### Multisig with multiple Bitcoin Core instances\n-\n-Alice, Bob, and Carol want to create a 2-of-3 multisig address. They're all using\n-Bitcoin Core. We assume their wallets only contain the multisig funds. In case\n-they also have a personal wallet, this can be accomplished through the\n-multiwallet feature - possibly resulting in a need to add `-rpcwallet=name` to\n-the command line in case `bitcoin-cli` is used.\n-\n-Setup:\n-- All three call `getnewaddress` to create a new address; call these addresses\n-  *Aalice*, *Abob*, and *Acarol*.\n-- All three call `getaddressinfo \"X\"`, with *X* their respective address, and\n-  remember the corresponding public keys. Call these public keys *Kalice*,\n-  *Kbob*, and *Kcarol*.\n-- All three now run `addmultisigaddress 2 [\"Kalice\",\"Kbob\",\"Kcarol\"]` to teach\n-  their wallet about the multisig script. Call the address produced by this\n-  command *Amulti*. They may be required to explicitly specify the same\n-  addresstype option each, to avoid constructing different versions due to\n-  differences in configuration.\n-- They also run `importaddress \"Amulti\" \"\" false` to make their wallets treat\n-  payments to *Amulti* as contributing to the watch-only balance.\n-- Others can verify the produced address by running\n-  `createmultisig 2 [\"Kalice\",\"Kbob\",\"Kcarol\"]`, and expecting *Amulti* as\n-  output. Again, it may be necessary to explicitly specify the addresstype\n-  in order to get a result that matches. This command won't enable them to\n-  initiate transactions later, however.\n-- They can now give out *Amulti* as address others can pay to.\n-\n-Later, when *V* BTC has been received on *Amulti*, and Bob and Carol want to\n-move the coins in their entirety to address *Asend*, with no change. Alice\n-does not need to be involved.\n-- One of them - let's assume Carol here - initiates the creation. She runs\n-  `walletcreatefundedpsbt [] {\"Asend\":V} 0 {\"subtractFeeFromOutputs\":[0], \"includeWatching\":true}`.\n-  We call the resulting PSBT *P*. *P* does not contain any signatures.\n-- Carol needs to sign the transaction herself. In order to do so, she runs\n-  `walletprocesspsbt \"P\"`, and gives the resulting PSBT *P2* to Bob.\n-- Bob inspects the PSBT using `decodepsbt \"P2\"` to determine if the transaction\n-  has indeed just the expected input, and an output to *Asend*, and the fee is\n-  reasonable. If he agrees, he calls `walletprocesspsbt \"P2\"` to sign. The\n-  resulting PSBT *P3* contains both Carol's and Bob's signature.\n-- Now anyone can call `finalizepsbt \"P3\"` to extract a fully signed transaction\n-  *T*.\n-- Finally anyone can broadcast the transaction using `sendrawtransaction \"T\"`.\n-\n-In case there are more signers, it may be advantageous to let them all sign in\n-parallel, rather than passing the PSBT from one signer to the next one. In the\n-above example this would translate to Carol handing a copy of *P* to each signer\n-separately. They can then all invoke `walletprocesspsbt \"P\"`, and end up with\n-their individually-signed PSBT structures. They then all send those back to\n-Carol (or anyone) who can combine them using `combinepsbt`. The last two steps\n-(`finalizepsbt` and `sendrawtransaction`) remain unchanged."
      },
      {
        "sha": "2cc5ab49fbf8b4bedc3b4f9cff27f627b5459c3d",
        "filename": "doc/release-notes-14060.md",
        "status": "removed",
        "additions": 0,
        "deletions": 21,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/doc/release-notes-14060.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/doc/release-notes-14060.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-14060.md?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "patch": "@@ -1,21 +0,0 @@\n-Configuration\n--------------\n-\n-The outbound message high water mark of the ZMQ PUB sockets are now\n-configurable via the options:\n-\n-`-zmqpubhashtxhwm=n`\n-\n-`-zmqpubhashblockhwm=n`\n-\n-`-zmqpubrawblockhwm=n`\n-\n-`-zmqpubrawtxhwm=n`\n-\n-Each high water mark value must be an integer greater than or equal to 0.\n-The high water mark limits the maximum number of messages that ZMQ will\n-queue in memory for any single subscriber. A value of 0 means no limit.\n-When not specified, the default value continues to be 1000.\n-When a ZMQ PUB socket reaches its high water mark for a subscriber, then\n-additional messages to the subscriber are dropped until the number of\n-queued messages again falls below the high water mark value."
      },
      {
        "sha": "bb8c0a623eede8ea09aa93c8a79284e6151bf432",
        "filename": "doc/release-notes-14477.md",
        "status": "removed",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/doc/release-notes-14477.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/doc/release-notes-14477.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-14477.md?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "patch": "@@ -1,5 +0,0 @@\n-Miscellaneous RPC changes\n-------------\n-\n-- `getaddressinfo` now reports `solvable`, a boolean indicating whether all information necessary for signing is present in the wallet (ignoring private keys).\n-- `getaddressinfo`, `listunspent`, and `scantxoutset` have a new output field `desc`, an output descriptor that encapsulates all signing information and key paths for the address (only available when `solvable` is true for `getaddressinfo` and `listunspent`)."
      },
      {
        "sha": "38d76fee460553734f9b7d03f93cebe3f0ee7162",
        "filename": "doc/release-notes-14565.md",
        "status": "removed",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/doc/release-notes-14565.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/doc/release-notes-14565.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-14565.md?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "patch": "@@ -1,5 +0,0 @@\n-Low-level RPC changes\n----------------------\n-\n-The `importmulti` RPC will now contain a new per-request `warnings` field with strings\n-that explain when fields are being ignored or inconsistant, if any."
      },
      {
        "sha": "75faad99060f59fcb33a7f8fd0696a1c98d5363f",
        "filename": "doc/release-notes-pr13381.md",
        "status": "removed",
        "additions": 0,
        "deletions": 29,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/doc/release-notes-pr13381.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/doc/release-notes-pr13381.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-pr13381.md?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "patch": "@@ -1,29 +0,0 @@\n-RPC importprivkey: new label behavior\n--------------------------------------\n-\n-Previously, `importprivkey` automatically added the default empty label\n-(\"\") to all addresses associated with the imported private key.  Now it\n-defaults to using any existing label for those addresses.  For example:\n-\n-- Old behavior: you import a watch-only address with the label \"cold\n-  wallet\".  Later, you import the corresponding private key using the\n-  default settings.  The address's label is changed from \"cold wallet\"\n-  to \"\".\n-\n-- New behavior: you import a watch-only address with the label \"cold\n-  wallet\".  Later, you import the corresponding private key using the\n-  default settings.  The address's label remains \"cold wallet\".\n-\n-In both the previous and current case, if you directly specify a label\n-during the import, that label will override whatever previous label the\n-addresses may have had.  Also in both cases, if none of the addresses\n-previously had a label, they will still receive the default empty label\n-(\"\").  Examples:\n-\n-- You import a watch-only address with the label \"temporary\".  Later you\n-  import the corresponding private key with the label \"final\".  The\n-  address's label will be changed to \"final\".\n-\n-- You use the default settings to import a private key for an address that\n-  was not previously in the wallet.  Its addresses will receive the default\n-  empty label (\"\")."
      },
      {
        "sha": "816c3594c6f672d00a0ee471cc27febce3387fd8",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 98,
        "deletions": 158,
        "changes": 256,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -1,9 +1,6 @@\n-(note: this is a temporary file, to be added-to by anybody, and moved to\n-release-notes at release time)\n+Bitcoin Core version 0.17.1 is now available from:\n \n-Bitcoin Core version *version* is now available from:\n-\n-  <https://bitcoincore.org/bin/bitcoin-core-*version*/>\n+  <https://bitcoincore.org/bin/bitcoin-core-0.17.1/>\n \n This is a new major version release, including new features, various bugfixes\n and performance improvements, as well as updated translations.\n@@ -24,7 +21,9 @@ shut down (which might take a few minutes for older versions), then run the\n installer (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on Mac)\n or `bitcoind`/`bitcoin-qt` (on Linux).\n \n-The first time you run version 0.15.0, your chainstate database will be converted to a\n+If your node has a txindex, the txindex db will be migrated the first time you run 0.17.0 or newer, which may take up to a few hours. Your node will not be functional until this migration completes.\n+\n+The first time you run version 0.15.0 or newer, your chainstate database will be converted to a\n new format, which will take anywhere from a few minutes to half an hour,\n depending on the speed of your machine.\n \n@@ -53,172 +52,113 @@ the Linux kernel, macOS 10.10+, and Windows 7 and newer (Windows XP is not suppo\n Bitcoin Core should also work on most other Unix-like systems but is not\n frequently tested on them.\n \n-From 0.17.0 onwards, macOS <10.10 is no longer supported.  0.17.0 is\n-built using Qt 5.9.x, which doesn't support versions of macOS older than\n-10.10.  Additionally, Bitcoin Core does not yet change appearance when\n-macOS \"dark mode\" is activated.\n-\n-In addition to previously-supported CPU platforms, this release's\n-pre-compiled distribution also provides binaries for the RISC-V\n-platform.\n+From 0.17.0 onwards macOS <10.10 is no longer supported. 0.17.0 is built using Qt 5.9.x, which doesn't\n+support versions of macOS older than 10.10.\n \n Notable changes\n ===============\n \n-Mining\n-------\n-\n-- Calls to `getblocktemplate` will fail if the segwit rule is not specified.\n-  Calling `getblocktemplate` without segwit specified is almost certainly\n-  a misconfiguration since doing so results in lower rewards for the miner.\n-\n-Command line option changes\n----------------------------\n-\n-The `-enablebip61` command line option (introduced in Bitcoin Core 0.17.0) is\n-used to toggle sending of BIP 61 reject messages. Reject messages have no use\n-case on the P2P network and are only logged for debugging by most network\n-nodes. The option will now by default be off for improved privacy and security\n-as well as reduced upload usage. The option can explicitly be turned on for\n-local-network debugging purposes.\n-\n-Documentation\n--------------\n-\n-- A new short\n-  [document](https://github.com/bitcoin/bitcoin/blob/master/doc/JSON-RPC-interface.md)\n-  about the JSON-RPC interface describes cases where the results of an\n-  RPC might contain inconsistencies between data sourced from different\n-  subsystems, such as wallet state and mempool state.  A note is added\n-  to the [REST interface documentation](https://github.com/bitcoin/bitcoin/blob/master/doc/REST-interface.md)\n-  indicating that the same rules apply.\n-\n-- A new [document](https://github.com/bitcoin/bitcoin/blob/master/doc/bitcoin-conf.md)\n-  about the `bitcoin.conf` file describes how to use it to configure\n-  Bitcoin Core.\n-\n-- A new document introduces Bitcoin Core's BIP174\n-  [Partially-Signed Bitcoin Transactions (PSBT)](https://github.com/bitcoin/bitcoin/blob/master/doc/psbt.md)\n-  interface, which is used to allow multiple programs to collaboratively\n-  work to create, sign, and broadcast new transactions.  This is useful\n-  for offline (cold storage) wallets, multisig wallets, coinjoin\n-  implementations, and many other cases where two or more programs need\n-  to interact to generate a complete transaction.\n-\n-- The [output script descriptor](https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md)\n-  documentation has been updated with information about new features in\n-  this still-developing language for describing the output scripts that\n-  a wallet or other program wants to receive notifications for, such as\n-  which addresses it wants to know received payments.  The language is\n-  currently used in the `scantxoutset` RPC and is expected to be adapted\n-  to other RPCs and to the underlying wallet structure.\n-\n-Build system changes\n---------------------\n-\n-- A new `--disable-bip70` option may be passed to `./configure` to\n-  prevent Bitcoin-Qt from being built with support for the BIP70 payment\n-  protocol or from linking libssl.  As the payment protocol has exposed\n-  Bitcoin Core to libssl vulnerabilities in the past, builders who don't\n-  need BIP70 support are encouraged to use this option to reduce their\n-  exposure to future vulnerabilities.\n-\n-Deprecated or removed RPCs\n---------------------------\n-\n-- The `signrawtransaction` RPC is removed after being deprecated and\n-  hidden behind a special configuration option in version 0.17.0.\n-\n-- The 'account' API is removed after being deprecated in v0.17.  The\n-  'label' API was introduced in v0.17 as a replacement for accounts.\n-  See the [release notes from v0.17](https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.17.0.md#label-and-account-apis-for-wallet)\n-  for a full description of the changes from the 'account' API to the\n-  'label' API.\n-\n-- The `addwitnessaddress` RPC is removed after being deprecated in\n-  version 0.13.0.\n-\n-- The wallet's `generate` RPC method is deprecated and will be fully\n-  removed in a subsequent major version.  This RPC is only used for\n-  testing, but its implementation reached across multiple subsystems\n-  (wallet and mining), so it is being deprecated to simplify the\n-  wallet-node interface.  Projects that are using `generate` for testing\n-  purposes should transition to using the `generatetoaddress` RPC, which\n-  does not require or use the wallet component. Calling\n-  `generatetoaddress` with an address returned by the `getnewaddress`\n-  RPC gives the same functionality as the old `generate` RPC.  To\n-  continue using `generate` in this version, restart bitcoind with the\n-  `-deprecatedrpc=generate` configuration option.\n-\n-New RPCs\n---------\n-\n-- A new `getnodeaddresses` RPC returns peer addresses known to this\n-  node. It may be used to find nodes to connect to without using a DNS\n-  seeder.\n-\n-- A new `listwalletdir` RPC returns a list of wallets in the wallet\n-  directory (either the default wallet directory or the directory\n-  configured by the `-walletdir` parameter).\n-\n-Updated RPCs\n-------------\n-\n-Note: some low-level RPC changes mainly useful for testing are described\n-in the Low-level Changes section below.\n-\n-- The `getpeerinfo` RPC now returns an additional \"minfeefilter\" field\n-  set to the peer's BIP133 fee filter.  You can use this to detect that\n-  you have peers that are willing to accept transactions below the\n-  default minimum relay fee.\n-\n-- The mempool RPCs, such as `getrawmempool` with `verbose=true`, now\n-  return an additional \"bip125-replaceable\" value indicating whether the\n-  transaction (or its unconfirmed ancestors) opts-in to asking nodes and\n-  miners to replace it with a higher-feerate transaction spending any of\n-  the same inputs.\n-\n-- The `settxfee` RPC previously silently ignored attempts to set the fee\n-  below the allowed minimums.  It now prints a warning.  The special\n-  value of \"0\" may still be used to request the minimum value.\n-\n-- The `getaddressinfo` RPC now provides an `ischange` field indicating\n-  whether the wallet used the address in a change output.\n-\n-- The `importmulti` RPC has been updated to support P2WSH, P2WPKH,\n-  P2SH-P2WPKH, and P2SH-P2WSH. Requests for P2WSH and P2SH-P2WSH accept\n-  an additional `witnessscript` parameter.\n-\n-- See the [Mining](#mining) section for changes to `getblocktemplate`.\n-\n-Low-level changes\n-=================\n+`listtransactions` label support\n+--------------------------------\n \n-RPC\n----\n+The `listtransactions` RPC `account` parameter which was deprecated in 0.17.0\n+and renamed to `dummy` has been un-deprecated and renamed again to `label`.\n \n-- The `submitblock` RPC previously returned the reason a rejected block\n-  was invalid the first time it processed that block but returned a\n-  generic \"duplicate\" rejection message on subsequent occasions it\n-  processed the same block.  It now always returns the fundamental\n-  reason for rejecting an invalid block and only returns \"duplicate\" for\n-  valid blocks it has already accepted.\n+When bitcoin is configured with the `-deprecatedrpc=accounts` setting, specifying\n+a label/account/dummy argument will return both outgoing and incoming\n+transactions. Without the `-deprecatedrpc=accounts` setting, it will only return\n+incoming transactions (because it used to be possible to create transactions\n+spending from specific accounts, but this is no longer possible with labels).\n \n-- A new `submitheader` RPC allows submitting block headers independently\n-  from their block.  This is likely only useful for testing.\n+When `-deprecatedrpc=accounts` is set, it's possible to pass the empty string \"\"\n+to list transactions that don't have any label. Without\n+`-deprecatedrpc=accounts`, passing the empty string is an error because returning\n+only non-labeled transactions is not generally useful behavior and can cause\n+confusion.\n \n-Configuration\n--------------\n+0.17.1 change log\n+=================\n \n-- The `-usehd` configuration option was removed in version 0.16. From\n-  that version onwards, all new wallets created are hierarchical\n-  deterministic wallets. This release makes specifying `-usehd` an\n-  invalid configuration option.\n+### P2P protocol and network code\n+- #14685 `9406502` Fix a deserialization overflow edge case (kazcw)\n+- #14728 `b901578` Fix uninitialized read when stringifying an addrLocal (kazcw)\n+\n+### Wallet\n+- #14441 `5150acc` Restore ability to list incoming transactions by label (jnewbery)\n+- #13546 `91fa15a` Fix use of uninitialized value `bnb_used` in CWallet::CreateTransaction(\u2026) (practicalswift)\n+- #14310 `bb90695` Ensure wallet is unlocked before signing (gustavonalle)\n+- #14690 `5782fdc` Throw error if CPubKey is invalid during PSBT keypath serialization (instagibbs)\n+- #14852 `2528443` backport: [tests] Add `wallet_balance.py` (MarcoFalke)\n+- #14196 `3362a95` psbt: always drop the unnecessary utxo and convert non-witness utxo to witness when necessary (achow101)\n+- #14588 `70ee1f8` Refactor PSBT signing logic to enforce invariant and fix signing bug (gwillen)\n+- #14424 `89a9a9d` Stop requiring imported pubkey to sign non-PKH schemes (sipa, MeshCollider)\n+\n+### RPC and other APIs\n+- #14417 `fb9ad04` Fix listreceivedbyaddress not taking address as a string (etscrivner)\n+- #14596 `de5e48a` Bugfix: RPC: Add `address_type` named param for createmultisig (luke-jr)\n+- #14618 `9666dba` Make HTTP RPC debug logging more informative (practicalswift)\n+- #14197 `7bee414` [psbt] Convert non-witness UTXOs to witness if witness sig created (achow101)\n+- #14377 `a3fe125` Check that a separator is found for psbt inputs, outputs, and global map (achow101)\n+- #14356 `7a590d8` Fix converttopsbt permitsigdata arg, add basic test (instagibbs)\n+- #14453 `75b5d8c` Fix wallet unload during walletpassphrase timeout (promag)\n+\n+### GUI\n+- #14403 `0242b5a` Revert \"Force TLS1.0+ for SSL connections\" (real-or-random)\n+- #14593 `df5131b` Explicitly disable \"Dark Mode\" appearance on macOS (fanquake)\n+\n+### Build system\n+- #14647 `7edebed` Remove illegal spacing in darwin.mk (ch4ot1c)\n+- #14698 `ec71f06` Add bitcoin-tx.exe into Windows installer (ken2812221)\n+\n+### Tests and QA\n+- #13965 `29899ec` Fix extended functional tests fail (ken2812221)\n+- #14011 `9461f98` Disable wallet and address book Qt tests on macOS minimal platform (ryanofsky)\n+- #14180 `86fadee` Run all tests even if wallet is not compiled (MarcoFalke)\n+- #14122 `8bc1bad` Test `rpc_help.py` failed: Check whether ZMQ is enabled or not (Kvaciral)\n+- #14101 `96dc936` Use named args in validation acceptance tests (MarcoFalke)\n+- #14020 `24d796a` Add tests for RPC help (promag)\n+- #14052 `7ff32a6` Add some actual witness in `rpc_rawtransaction` (MarcoFalke)\n+- #14215 `b72fbab` Use correct python index slices in example test (sdaftuar)\n+- #14024 `06544fa` Add `TestNode::assert_debug_log` (MarcoFalke)\n+- #14658 `60f7a97` Add test to ensure node can generate all rpc help texts at runtime (MarcoFalke)\n+- #14632 `96f15e8` Fix a comment (fridokus)\n+- #14700 `f9db08e` Avoid race in `p2p_invalid_block` by waiting for the block request (MarcoFalke)\n+- #14845 `67225e2` Add `wallet_balance.py` (jnewbery)\n+\n+### Documentation\n+- #14161 `5f51fd6` doc/descriptors.md tweaks (ryanofsky)\n+- #14276 `85aacc4` Add autogen.sh in ARM Cross-compilation (walterwhite81)\n \n Credits\n =======\n \n Thanks to everyone who directly contributed to this release:\n \n+- Andrew Chow\n+- Chun Kuan Lee\n+- David A. Harding\n+- Eric Scrivner\n+- fanquake\n+- fridokus\n+- Glenn Willen\n+- Gregory Sanders\n+- gustavonalle\n+- John Newbery\n+- Jon Layton\n+- Jonas Schnelli\n+- Jo\u00e3o Barbosa\n+- Kaz Wesley\n+- Kvaciral\n+- Luke Dashjr\n+- MarcoFalke\n+- MeshCollider\n+- Pieter Wuille\n+- practicalswift\n+- Russell Yanofsky\n+- Sjors Provoost\n+- Suhas Daftuar\n+- Tim Ruffing\n+- Walter\n+- Wladimir J. van der Laan\n \n As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/)."
      },
      {
        "sha": "8259152f0ba1de062268f7da0d93a01cb9166e83",
        "filename": "doc/release-notes/release-notes-0.14.3.md",
        "status": "removed",
        "additions": 0,
        "deletions": 118,
        "changes": 118,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/doc/release-notes/release-notes-0.14.3.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/doc/release-notes/release-notes-0.14.3.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.14.3.md?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "patch": "@@ -1,118 +0,0 @@\n-Bitcoin Core version *0.14.3* is now available from:\n-\n-  <https://bitcoin.org/bin/bitcoin-core-0.14.3/>\n-\n-This is a new minor version release, including various bugfixes and\n-performance improvements.\n-\n-Please report bugs using the issue tracker at github:\n-\n-  <https://github.com/bitcoin/bitcoin/issues>\n-\n-To receive security and update notifications, please subscribe to:\n-\n-  <https://bitcoincore.org/en/list/announcements/join/>\n-\n-Compatibility\n-==============\n-\n-Bitcoin Core is extensively tested on multiple operating systems using\n-the Linux kernel, macOS 10.8+, and Windows Vista and later.\n-\n-Microsoft ended support for Windows XP on [April 8th, 2014](https://www.microsoft.com/en-us/WindowsForBusiness/end-of-xp-support),\n-No attempt is made to prevent installing or running the software on Windows XP, you\n-can still do so at your own risk but be aware that there are known instabilities and issues.\n-Please do not report issues about Windows XP to the issue tracker.\n-\n-Bitcoin Core should also work on most other Unix-like systems but is not\n-frequently tested on them.\n-\n-Notable changes\n-===============\n-\n-Denial-of-Service vulnerability CVE-2018-17144\n- -------------------------------\n-\n-A denial-of-service vulnerability exploitable by miners has been discovered in\n-Bitcoin Core versions 0.14.0 up to 0.16.2. It is recommended to upgrade any of\n-the vulnerable versions to 0.14.3, 0.15.2 or 0.16.3 as soon as possible.\n-\n-Known Bugs\n-==========\n-\n-Since 0.14.0 the approximate transaction fee shown in Bitcoin-Qt when using coin\n-control and smart fee estimation does not reflect any change in target from the\n-smart fee slider. It will only present an approximate fee calculated using the\n-default target. The fee calculated using the correct target is still applied to\n-the transaction and shown in the final send confirmation dialog.\n-\n-0.14.3 Change log\n-=================\n-\n-Detailed release notes follow. This overview includes changes that affect\n-behavior, not code moves, refactors and string updates. For convenience in locating\n-the code changes and accompanying discussion, both the pull request and\n-git merge commit are mentioned.\n-\n-### Consensus\n-- #14247 `52965fb` Fix crash bug with duplicate inputs within a transaction (TheBlueMatt, sdaftuar)\n- \n-### RPC and other APIs\n-\n-- #10445 `87a21d5` Fix: make CCoinsViewDbCursor::Seek work for missing keys (Pieter Wuille, Gregory Maxwell)\n-- #9853 Return correct error codes in setban(), fundrawtransaction(), removeprunedfunds(), bumpfee(), blockchain.cpp (John Newbery)\n-\n-\n-### P2P protocol and network code\n-\n-- #10234 `d289b56` [net] listbanned RPC and QT should show correct banned subnets (John Newbery)\n-\n-### Build system\n-\n-\n-### Miscellaneous\n-\n-- #10451 `3612219` contrib/init/bitcoind.openrcconf: Don't disable wallet by default (Luke Dashjr)\n-- #10250 `e23cef0` Fix some empty vector references (Pieter Wuille)\n-- #10196 `d28d583` PrioritiseTransaction updates the mempool tx counter (Suhas Daftuar)\n-- #9497 `e207342` Fix CCheckQueue IsIdle (potential) race condition and remove dangerous constructors. (Jeremy Rubin)\n-\n-### GUI\n-\n-- #9481 `7abe7bb` Give fallback fee a reasonable indent (Luke Dashjr)\n-- #9481 `3e4d7bf` Qt/Send: Figure a decent warning colour from theme (Luke Dashjr)\n-- #9481 `e207342` Show more significant warning if we fall back to the default fee (Jonas Schnelli)\n-\n-### Wallet\n-\n-- #10308 `28b8b8b` Securely erase potentially sensitive keys/values (tjps)\n-- #10265 `ff13f59` Make sure pindex is non-null before possibly referencing in LogPrintf call. (Karl-Johan Alm)\n-\n-Credits\n-=======\n-\n-Thanks to everyone who directly contributed to this release:\n-\n-- Cory Fields\n-- CryptAxe\n-- fanquake\n-- Jeremy Rubin\n-- John Newbery\n-- Jonas Schnelli\n-- Gregory Maxwell\n-- Karl-Johan Alm\n-- Luke Dashjr\n-- MarcoFalke\n-- Matt Corallo\n-- Mikerah\n-- Pieter Wuille\n-- practicalswift\n-- Suhas Daftuar\n-- Thomas Snider\n-- Tjps\n-- Wladimir J. van der Laan\n-\n-And to those that reported security issues:\n-\n-- awemany (for CVE-2018-17144, previously credited as \"anonymous reporter\")\n-"
      },
      {
        "sha": "1f5827905120efd902472fbb0dba39b19be3c68f",
        "filename": "doc/release-notes/release-notes-0.15.2.md",
        "status": "removed",
        "additions": 0,
        "deletions": 118,
        "changes": 118,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/doc/release-notes/release-notes-0.15.2.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/doc/release-notes/release-notes-0.15.2.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.15.2.md?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "patch": "@@ -1,118 +0,0 @@\n-Bitcoin Core version *0.15.2* is now available from:\n-\n-  <https://bitcoincore.org/bin/bitcoin-core-0.15.2/>\n-\n-This is a new minor version release, including various bugfixes and\n-performance improvements, as well as updated translations.\n-\n-Please report bugs using the issue tracker at GitHub:\n-\n-  <https://github.com/bitcoin/bitcoin/issues>\n-\n-To receive security and update notifications, please subscribe to:\n-\n-  <https://bitcoincore.org/en/list/announcements/join/>\n-\n-How to Upgrade\n-==============\n-\n-If you are running an older version, shut it down. Wait until it has completely\n-shut down (which might take a few minutes for older versions), then run the \n-installer (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on Mac)\n-or `bitcoind`/`bitcoin-qt` (on Linux).\n-\n-The first time you run version 0.15.0 or higher, your chainstate database will\n-be converted to a new format, which will take anywhere from a few minutes to\n-half an hour, depending on the speed of your machine.\n-\n-The file format of `fee_estimates.dat` changed in version 0.15.0. Hence, a\n-downgrade from version 0.15 or upgrade to version 0.15 will cause all fee\n-estimates to be discarded.\n-\n-Note that the block database format also changed in version 0.8.0 and there is no\n-automatic upgrade code from before version 0.8 to version 0.15.0. Upgrading\n-directly from 0.7.x and earlier without redownloading the blockchain is not supported.\n-However, as usual, old wallet versions are still supported.\n-\n-Downgrading warning\n--------------------\n-\n-The chainstate database for this release is not compatible with previous\n-releases, so if you run 0.15 and then decide to switch back to any\n-older version, you will need to run the old release with the `-reindex-chainstate`\n-option to rebuild the chainstate data structures in the old format.\n-\n-If your node has pruning enabled, this will entail re-downloading and\n-processing the entire blockchain.\n-\n-Compatibility\n-==============\n-\n-Bitcoin Core is extensively tested on multiple operating systems using\n-the Linux kernel, macOS 10.8+, and Windows Vista and later. Windows XP is not supported.\n-\n-Bitcoin Core should also work on most other Unix-like systems but is not\n-frequently tested on them.\n-\n-\n-Notable changes\n-===============\n-\n-Denial-of-Service vulnerability CVE-2018-17144\n--------------------------------\n-\n-A denial-of-service vulnerability exploitable by miners has been discovered in\n-Bitcoin Core versions 0.14.0 up to 0.16.2. It is recommended to upgrade any of\n-the vulnerable versions to 0.15.2 or 0.16.3 as soon as possible.\n-\n-0.15.2 Change log\n-=================\n-\n-### Build system\n-\n-- #11995 `9bb1a16` depends: Fix Qt build with XCode 9.2(fanquake)\n-- #12946 `93b9a61` depends: Fix Qt build with XCode 9.3(fanquake)\n-- #13544 `9fd3e00` depends: Update Qt download url (fanquake)\n-- #11847 `cb7ef31` Make boost::multi_index comparators const (sdaftuar)\n-\n-### Consensus\n-- #14247 `4b8a3f5` Fix crash bug with duplicate inputs within a transaction (TheBlueMatt, sdaftuar)\n- \n-### RPC\n-- #11676 `7af2457` contrib/init: Update openrc-run filename (Luke Dashjr)\n-- #11277 `7026845` Fix uninitialized URI in batch RPC requests (Russell Yanofsky)\n- \n-### Wallet\n-- #11289 `3f1db56` Wrap dumpwallet warning and note scripts aren't dumped (MeshCollider)\n-- #11289 `42ea47d` Add wallet backup text to import*, add* and dumpwallet RPCs (MeshCollider)\n-- #11590 `6372a75` [Wallet] always show help-line of wallet encryption calls (Jonas Schnelli)\n-\n-### bitcoin-tx\n-\n-- #11554 `a69cc07` Sanity-check script sizes in bitcoin-tx (TheBlueMatt)\n-\n-### Tests\n-- #11277 `3a6cdd4` Add test for multiwallet batch RPC calls (Russell Yanofsky)\n-- #11647 `1c8c7f8` Add missing batch rpc calls to python coverage logs (Russell Yanofsky)\n-- #11277 `1036c43` Add missing multiwallet rpc calls to python coverage logs (Russell Yanofsky)\n-- #11277 `305f768` Limit AuthServiceProxyWrapper.\\_\\_getattr\\_\\_ wrapping (Russell Yanofsky)\n-- #11277 `2eea279` Make AuthServiceProxy.\\_batch method usable (Russell Yanofsky)\n-\n-Credits\n-=======\n-\n-Thanks to everyone who directly contributed to this release:\n-\n-- fanquake\n-- Jonas Schnelli\n-- Luke Dashjr\n-- Matt Corallo\n-- MeshCollider\n-- Russell Yanofsky\n-- Suhas Daftuar\n-- Wladimir J. van der Laan\n-\n-And to those that reported security issues:\n-\n-- awemany (for CVE-2018-17144, previously credited as \"anonymous reporter\")\n-"
      },
      {
        "sha": "2e52d309c2324dbb51c76ce0ade4ea363b3d766b",
        "filename": "doc/release-notes/release-notes-0.16.3.md",
        "status": "removed",
        "additions": 0,
        "deletions": 88,
        "changes": 88,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/doc/release-notes/release-notes-0.16.3.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/doc/release-notes/release-notes-0.16.3.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.16.3.md?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "patch": "@@ -1,88 +0,0 @@\n-Bitcoin Core version 0.16.3 is now available from:\n-\n-  <https://bitcoincore.org/bin/bitcoin-core-0.16.3/>\n-\n-This is a new minor version release, with various bugfixes.\n-\n-Please report bugs using the issue tracker at GitHub:\n-\n-  <https://github.com/bitcoin/bitcoin/issues>\n-\n-To receive security and update notifications, please subscribe to:\n-\n-  <https://bitcoincore.org/en/list/announcements/join/>\n-\n-How to Upgrade\n-==============\n-\n-If you are running an older version, shut it down. Wait until it has completely\n-shut down (which might take a few minutes for older versions), then run the\n-installer (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on Mac)\n-or `bitcoind`/`bitcoin-qt` (on Linux).\n-\n-The first time you run version 0.15.0 or newer, your chainstate database will be converted to a\n-new format, which will take anywhere from a few minutes to half an hour,\n-depending on the speed of your machine.\n-\n-Note that the block database format also changed in version 0.8.0 and there is no\n-automatic upgrade code from before version 0.8 to version 0.15.0 or higher. Upgrading\n-directly from 0.7.x and earlier without re-downloading the blockchain is not supported.\n-However, as usual, old wallet versions are still supported.\n-\n-Downgrading warning\n--------------------\n-\n-Wallets created in 0.16 and later are not compatible with versions prior to 0.16\n-and will not work if you try to use newly created wallets in older versions. Existing\n-wallets that were created with older versions are not affected by this.\n-\n-Compatibility\n-==============\n-\n-Bitcoin Core is extensively tested on multiple operating systems using\n-the Linux kernel, macOS 10.8+, and Windows Vista and later. Windows XP is not supported.\n-\n-Bitcoin Core should also work on most other Unix-like systems but is not\n-frequently tested on them.\n-\n-Notable changes\n-===============\n-\n-Denial-of-Service vulnerability\n--------------------------------\n-\n-A denial-of-service vulnerability (CVE-2018-17144) exploitable by miners has\n-been discovered in Bitcoin Core versions 0.14.0 up to 0.16.2. It is recommended\n-to upgrade any of the vulnerable versions to 0.16.3 as soon as possible.\n-\n-0.16.3 change log\n-------------------\n-\n-### Consensus\n-- #14249 `696b936` Fix crash bug with duplicate inputs within a transaction (TheBlueMatt, sdaftuar)\n-\n-### RPC and other APIs\n-- #13547 `212ef1f` Make `signrawtransaction*` give an error when amount is needed but missing (ajtowns)\n-\n-### Miscellaneous\n-- #13655 `1cdbea7` bitcoinconsensus: invalid flags error should be set to `bitcoinconsensus_err` (afk11)\n-\n-### Documentation\n-- #13844 `11b9dbb` correct the help output for -prune (hebasto)\n-\n-Credits\n-=======\n-\n-Thanks to everyone who directly contributed to this release:\n-\n-- Anthony Towns\n-- Hennadii Stepanov\n-- Matt Corallo\n-- Suhas Daftuar\n-- Thomas Kerin\n-- Wladimir J. van der Laan\n-\n-And to those that reported security issues:\n-\n-- (anonymous reporter)\n-"
      },
      {
        "sha": "92db7dac7d7e55ada749f50c2c5737b3ee50ff0e",
        "filename": "doc/release-notes/release-notes-0.17.0.1.md",
        "status": "removed",
        "additions": 0,
        "deletions": 41,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/doc/release-notes/release-notes-0.17.0.1.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/doc/release-notes/release-notes-0.17.0.1.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.17.0.1.md?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "patch": "@@ -1,41 +0,0 @@\n-Bitcoin Core version 0.17.0.1 is now available from:\n-\n-  <https://bitcoincore.org/bin/bitcoin-core-0.17.0.1/>\n-\n-This release provides a minor bug fix for 0.17.0.\n-\n-Please report bugs using the issue tracker at GitHub:\n-\n-  <https://github.com/bitcoin/bitcoin/issues>\n-\n-To receive security and update notifications, please subscribe to:\n-\n-  <https://bitcoincore.org/en/list/announcements/join/>\n-\n-Notable changes\n-===============\n-\n-An issue was solved with OSX dmg generation, affecting macOS 10.12 to 10.14,\n-which could cause Finder to crash on install.\n-\n-There are no significant changes for other operating systems.\n-\n-0.17.0.1 change log\n-===================\n-\n-### Build system\n-- #14416 `eb2cc84` Fix OSX dmg issue (10.12 to 10.14) (jonasschnelli)\n-\n-### Documentation\n-- #14509 `1b5af2c` [0.17] doc: use SegWit in getblocktemplate example (Sjors)\n-\n-Credits\n-=======\n-\n-Thanks to everyone who directly contributed to this release:\n-\n-- Jonas Schnelli\n-- Pieter Wuille\n-- Sjors Provoost\n-- Wladimir J. van der Laan\n-"
      },
      {
        "sha": "418d7ba5f9b9d7a2d9b7ec884aae8e26ad8a2b23",
        "filename": "doc/release-notes/release-notes-0.17.0.md",
        "status": "removed",
        "additions": 0,
        "deletions": 1105,
        "changes": 1105,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/doc/release-notes/release-notes-0.17.0.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/doc/release-notes/release-notes-0.17.0.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.17.0.md?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "patch": "@@ -1,1105 +0,0 @@\n-Bitcoin Core version 0.17.0 is now available from:\n-\n-  <https://bitcoincore.org/bin/bitcoin-core-0.17.0/>\n-\n-This is a new major version release, including new features, various bugfixes\n-and performance improvements, as well as updated translations.\n-\n-Please report bugs using the issue tracker at GitHub:\n-\n-  <https://github.com/bitcoin/bitcoin/issues>\n-\n-To receive security and update notifications, please subscribe to:\n-\n-  <https://bitcoincore.org/en/list/announcements/join/>\n-\n-How to Upgrade\n-==============\n-\n-If you are running an older version, shut it down. Wait until it has completely\n-shut down (which might take a few minutes for older versions), then run the\n-installer (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on Mac)\n-or `bitcoind`/`bitcoin-qt` (on Linux).\n-\n-If your node has a txindex, the txindex db will be migrated the first time you run 0.17.0 or newer, which may take up to a few hours. Your node will not be functional until this migration completes.\n-\n-The first time you run version 0.15.0 or newer, your chainstate database will be converted to a\n-new format, which will take anywhere from a few minutes to half an hour,\n-depending on the speed of your machine.\n-\n-Note that the block database format also changed in version 0.8.0 and there is no\n-automatic upgrade code from before version 0.8 to version 0.15.0. Upgrading\n-directly from 0.7.x and earlier without redownloading the blockchain is not supported.\n-However, as usual, old wallet versions are still supported.\n-\n-Downgrading warning\n--------------------\n-\n-The chainstate database for this release is not compatible with previous\n-releases, so if you run 0.15 and then decide to switch back to any\n-older version, you will need to run the old release with the `-reindex-chainstate`\n-option to rebuild the chainstate data structures in the old format.\n-\n-If your node has pruning enabled, this will entail re-downloading and\n-processing the entire blockchain.\n-\n-Compatibility\n-==============\n-\n-Bitcoin Core is extensively tested on multiple operating systems using\n-the Linux kernel, macOS 10.10+, and Windows 7 and newer (Windows XP is not supported).\n-\n-Bitcoin Core should also work on most other Unix-like systems but is not\n-frequently tested on them.\n-\n-From 0.17.0 onwards macOS <10.10 is no longer supported. 0.17.0 is built using Qt 5.9.x, which doesn't\n-support versions of macOS older than 10.10.\n-\n-Known issues\n-============\n-\n-- Upgrading from 0.13.0 or older currently results in memory blow-up during the roll-back of blocks to the SegWit activation point. In these cases, a full `-reindex` is necessary.\n-\n-- The GUI suffers from visual glitches in the new MacOS dark mode. This has to do with our Qt theme handling and is not a new problem in 0.17.0, but is expected to be resolved in 0.17.1.\n-\n-Notable changes\n-===============\n-\n-Changed configuration options\n------------------------------\n-\n-- `-includeconf=<file>` can be used to include additional configuration files.\n-  Only works inside the `bitcoin.conf` file, not inside included files or from\n-  command-line. Multiple files may be included. Can be disabled from command-\n-  line via `-noincludeconf`. Note that multi-argument commands like\n-  `-includeconf` will override preceding `-noincludeconf`, i.e.\n-  ```\n-  noincludeconf=1\n-  includeconf=relative.conf\n-  ```\n-\n-  as bitcoin.conf will still include `relative.conf`.\n-\n-GUI changes\n------------\n-\n-- Block storage can be limited under Preferences, in the Main tab. Undoing this setting requires downloading the full blockchain again. This mode is incompatible with -txindex and -rescan.\n-\n-External wallet files\n----------------------\n-\n-The `-wallet=<path>` option now accepts full paths instead of requiring wallets\n-to be located in the -walletdir directory.\n-\n-Newly created wallet format\n----------------------------\n-\n-If `-wallet=<path>` is specified with a path that does not exist, it will now\n-create a wallet directory at the specified location (containing a wallet.dat\n-data file, a db.log file, and database/log.?????????? files) instead of just\n-creating a data file at the path and storing log files in the parent\n-directory. This should make backing up wallets more straightforward than\n-before because the specified wallet path can just be directly archived without\n-having to look in the parent directory for transaction log files.\n-\n-For backwards compatibility, wallet paths that are names of existing data files\n-in the `-walletdir` directory will continue to be accepted and interpreted the\n-same as before.\n-\n-Dynamic loading and creation of wallets\n----------------------------------------\n-\n-Previously, wallets could only be loaded or created at startup, by specifying `-wallet` parameters on the command line or in the bitcoin.conf file. It is now possible to load, create and unload wallets dynamically at runtime:\n-\n-- Existing wallets can be loaded by calling the `loadwallet` RPC. The wallet can be specified as file/directory basename (which must be located in the `walletdir` directory), or as an absolute path to a file/directory.\n-- New wallets can be created (and loaded) by calling the `createwallet` RPC. The provided name must not match a wallet file in the `walletdir` directory or the name of a wallet that is currently loaded.\n-- Loaded wallets can be unloaded by calling the `unloadwallet` RPC.\n-\n-This feature is currently only available through the RPC interface.\n-\n-Coin selection\n---------------\n-\n-### Partial spend avoidance\n-\n-When an address is paid multiple times the coins from those separate payments can be spent separately which hurts privacy due to linking otherwise separate addresses. A new `-avoidpartialspends` flag has been added (default=false). If enabled, the wallet will always spend existing UTXO to the same address together even if it results in higher fees. If someone were to send coins to an address after it was used, those coins will still be included in future coin selections.\n-\n-Configuration sections for testnet and regtest\n-----------------------------------------------\n-\n-It is now possible for a single configuration file to set different\n-options for different networks. This is done by using sections or by\n-prefixing the option with the network, such as:\n-\n-    main.uacomment=bitcoin\n-    test.uacomment=bitcoin-testnet\n-    regtest.uacomment=regtest\n-    [main]\n-    mempoolsize=300\n-    [test]\n-    mempoolsize=100\n-    [regtest]\n-    mempoolsize=20\n-\n-If the following options are not in a section, they will only apply to mainnet:\n-`addnode=`, `connect=`, `port=`, `bind=`, `rpcport=`, `rpcbind=` and `wallet=`.\n-The options to choose a network (`regtest=` and `testnet=`) must be specified\n-outside of sections.\n-\n-'label' and 'account' APIs for wallet\n--------------------------------------\n-\n-A new 'label' API has been introduced for the wallet. This is intended as a\n-replacement for the deprecated 'account' API. The 'account' can continue to\n-be used in V0.17 by starting bitcoind with the '-deprecatedrpc=accounts'\n-argument, and will be fully removed in V0.18.\n-\n-The label RPC methods mirror the account functionality, with the following functional differences:\n-\n-- Labels can be set on any address, not just receiving addresses. This functionality was previously only available through the GUI.\n-- Labels can be deleted by reassigning all addresses using the `setlabel` RPC method.\n-- There isn't support for sending transactions _from_ a label, or for determining which label a transaction was sent from.\n-- Labels do not have a balance.\n-\n-Here are the changes to RPC methods:\n-\n-| Deprecated Method       | New Method            | Notes       |\n-| :---------------------- | :-------------------- | :-----------|\n-| `getaccount`            | `getaddressinfo`      | `getaddressinfo` returns a json object with address information instead of just the name of the account as a string. |\n-| `getaccountaddress`     | n/a                   | There is no replacement for `getaccountaddress` since labels do not have an associated receive address. |\n-| `getaddressesbyaccount` | `getaddressesbylabel` | `getaddressesbylabel` returns a json object with the addresses as keys, instead of a list of strings. |\n-| `getreceivedbyaccount`  | `getreceivedbylabel`  | _no change in behavior_ |\n-| `listaccounts`          | `listlabels`          | `listlabels` does not return a balance or accept `minconf` and `watchonly` arguments. |\n-| `listreceivedbyaccount` | `listreceivedbylabel` | Both methods return new `label` fields, along with `account` fields for backward compatibility. |\n-| `move`                  | n/a                   | _no replacement_ |\n-| `sendfrom`              | n/a                   | _no replacement_ |\n-| `setaccount`            | `setlabel`            | Both methods now: <ul><li>allow assigning labels to any address, instead of raising an error if the address is not receiving address.<li>delete the previous label associated with an address when the final address using that label is reassigned to a different label, instead of making an implicit `getaccountaddress` call to ensure the previous label still has a receiving address. |\n-\n-| Changed Method         | Notes   |\n-| :--------------------- | :------ |\n-| `addmultisigaddress`   | Renamed `account` named parameter to `label`. Still accepts `account` for backward compatibility if running with '-deprecatedrpc=accounts'. |\n-| `getnewaddress`        | Renamed `account` named parameter to `label`. Still accepts `account` for backward compatibility. if running with '-deprecatedrpc=accounts' |\n-| `listunspent`          | Returns new `label` fields. `account` field will be returned for backward compatibility if running with '-deprecatedrpc=accounts' |\n-| `sendmany`             | The `account` named parameter has been renamed to `dummy`. If provided, the `dummy` parameter must be set to the empty string, unless running with the `-deprecatedrpc=accounts` argument (in which case functionality is unchanged). |\n-| `listtransactions`     | The `account` named parameter has been renamed to `dummy`. If provided, the `dummy` parameter must be set to the string `*`, unless running with the `-deprecatedrpc=accounts` argument (in which case functionality is unchanged). |\n-| `getbalance`           | `account`, `minconf` and `include_watchonly` parameters are deprecated, and can only be used if running with '-deprecatedrpc=accounts' |\n-\n-BIP 174 Partially Signed Bitcoin Transactions support\n------------------------------------------------------\n-\n-[BIP 174 PSBT](https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki) is an interchange format for Bitcoin transactions that are not fully signed\n-yet, together with relevant metadata to help entities work towards signing it.\n-It is intended to simplify workflows where multiple parties need to cooperate to\n-produce a transaction. Examples include hardware wallets, multisig setups, and\n-[CoinJoin](https://bitcointalk.org/?topic=279249) transactions.\n-\n-### Overall workflow\n-\n-Overall, the construction of a fully signed Bitcoin transaction goes through the\n-following steps:\n-\n-- A **Creator** proposes a particular transaction to be created. He constructs\n-  a PSBT that contains certain inputs and outputs, but no additional metadata.\n-- For each input, an **Updater** adds information about the UTXOs being spent by\n-  the transaction to the PSBT.\n-- A potentially other Updater adds information about the scripts and public keys\n-  involved in each of the inputs (and possibly outputs) of the PSBT.\n-- **Signers** inspect the transaction and its metadata to decide whether they\n-  agree with the transaction. They can use amount information from the UTXOs\n-  to assess the values and fees involved. If they agree, they produce a\n-  partial signature for the inputs for which they have relevant key(s).\n-- A **Finalizer** is run for each input to convert the partial signatures and\n-  possibly script information into a final `scriptSig` and/or `scriptWitness`.\n-- An **Extractor** produces a valid Bitcoin transaction (in network format)\n-  from a PSBT for which all inputs are finalized.\n-\n-Generally, each of the above (excluding Creator and Extractor) will simply\n-add more and more data to a particular PSBT. In a naive workflow, they all have\n-to operate sequentially, passing the PSBT from one to the next, until the\n-Extractor can convert it to a real transaction. In order to permit parallel\n-operation, **Combiners** can be employed which merge metadata from different\n-PSBTs for the same unsigned transaction.\n-\n-The names above in bold are the names of the roles defined in BIP174. They're\n-useful in understanding the underlying steps, but in practice, software and\n-hardware implementations will typically implement multiple roles simultaneously.\n-\n-### RPCs\n-\n-- **`converttopsbt` (Creator)** is a utility RPC that converts an\n-  unsigned raw transaction to PSBT format. It ignores existing signatures.\n-- **`createpsbt` (Creator)** is a utility RPC that takes a list of inputs and\n-  outputs and converts them to a PSBT with no additional information. It is\n-  equivalent to calling `createrawtransaction` followed by `converttopsbt`.\n-- **`walletcreatefundedpsbt` (Creator, Updater)** is a wallet RPC that creates a\n-  PSBT with the specified inputs and outputs, adds additional inputs and change\n-  to it to balance it out, and adds relevant metadata. In particular, for inputs\n-  that the wallet knows about (counting towards its normal or watch-only\n-  balance), UTXO information will be added. For outputs and inputs with UTXO\n-  information present, key and script information will be added which the wallet\n-  knows about. It is equivalent to running `createrawtransaction`, followed by\n-  `fundrawtransaction`, and `converttopsbt`.\n-- **`walletprocesspsbt` (Updater, Signer, Finalizer)** is a wallet RPC that takes as\n-  input a PSBT, adds UTXO, key, and script data to inputs and outputs that miss\n-  it, and optionally signs inputs. Where possible it also finalizes the partial\n-  signatures.\n-- **`finalizepsbt` (Finalizer, Extractor)** is a utility RPC that finalizes any\n-  partial signatures, and if all inputs are finalized, converts the result to a\n-  fully signed transaction which can be broadcast with `sendrawtransaction`.\n-- **`combinepsbt` (Combiner)** is a utility RPC that implements a Combiner. It\n-  can be used at any point in the workflow to merge information added to\n-  different versions of the same PSBT. In particular it is useful to combine the\n-  output of multiple Updaters or Signers.\n-- **`decodepsbt`** is a diagnostic utility RPC which will show all information in\n-  a PSBT in human-readable form, as well as compute its eventual fee if known.\n-\n-Upgrading non-HD wallets to HD wallets\n---------------------------------------\n-\n-Since Bitcoin Core 0.13.0, creating new BIP 32 Hierarchical Deterministic wallets has been supported by Bitcoin Core but old non-HD wallets could not be upgraded to HD. Now non-HD wallets can be upgraded to HD using the `-upgradewallet` command line option. This upgrade will result in the all keys in the keypool being marked as used and a new keypool generated. **A new backup must be made when this upgrade is performed.**\n-\n-Additionally, `-upgradewallet` can be used to upgraded from a non-split HD chain (all keys generated with `m/0'/0'/i'`) to a split HD chain (receiving keys generated with `'m/0'/0'/i'` and change keys generated with `m'/0'/1'/i'`). When this upgrade occurs, all keys already in the keypool will remain in the keypool to be used until all keys from before the upgrade are exhausted. This is to avoid issues with backups and downgrades when some keys may come from the change key keypool. Users can begin using the new split HD chain keypools by using the `newkeypool` RPC to mark all keys in the keypool as used and begin using a new keypool generated from the split HD chain.\n-\n-HD Master key rotation\n-----------------------\n-\n-A new RPC, `sethdseed`, has been introduced which allows users to set a new HD seed or set their own HD seed. This allows for a new HD seed to be used. **A new backup must be made when a new HD seed is set.**\n-\n-Low-level RPC changes\n----------------------\n-\n-- The new RPC `scantxoutset` can be used to scan the UTXO set for entries\n-  that match certain output descriptors. Refer to the [output descriptors\n-  reference documentation](/doc/descriptors.md) for more details. This call\n-  is similar to `listunspent` but does not use a wallet, meaning that the\n-  wallet can be disabled at compile or run time. This call is experimental,\n-  as such, is subject to changes or removal in future releases.\n-\n-- The `createrawtransaction` RPC will now accept an array or dictionary (kept for compatibility) for the `outputs` parameter. This means the order of transaction outputs can be specified by the client.\n-- The `fundrawtransaction` RPC will reject the previously deprecated `reserveChangeKey` option.\n-- `sendmany` now shuffles outputs to improve privacy, so any previously expected behavior with regards to output ordering can no longer be relied upon.\n-- The new RPC `testmempoolaccept` can be used to test acceptance of a transaction to the mempool without adding it.\n-- JSON transaction decomposition now includes a `weight` field which provides\n-  the transaction's exact weight. This is included in REST /rest/tx/ and\n-  /rest/block/ endpoints when in json mode. This is also included in `getblock`\n-  (with verbosity=2), `listsinceblock`, `listtransactions`, and\n-  `getrawtransaction` RPC commands.\n-- New `fees` field introduced in `getrawmempool`, `getmempoolancestors`, `getmempooldescendants` and\n-   `getmempoolentry` when verbosity is set to `true` with sub-fields `ancestor`, `base`, `modified`\n-   and `descendant` denominated in BTC. This new field deprecates previous fee fields, such as\n-   `fee`, `modifiedfee`, `ancestorfee` and `descendantfee`.\n-- The new RPC `getzmqnotifications` returns information about active ZMQ\n-  notifications.\n-- When bitcoin is not started with any `-wallet=<path>` options, the name of\n-  the default wallet returned by `getwalletinfo` and `listwallets` RPCs is\n-  now the empty string `\"\"` instead of `\"wallet.dat\"`. If bitcoin is started\n-  with any `-wallet=<path>` options, there is no change in behavior, and the\n-  name of any wallet is just its `<path>` string.\n-- Passing an empty string (`\"\"`) as the `address_type` parameter to\n-  `getnewaddress`, `getrawchangeaddress`, `addmultisigaddress`,\n-  `fundrawtransaction` RPCs is now an error. Previously, this would fall back\n-  to using the default address type. It is still possible to pass null or leave\n-  the parameter unset to use the default address type.\n-\n-- Bare multisig outputs to our keys are no longer automatically treated as\n-  incoming payments. As this feature was only available for multisig outputs for\n-  which you had all private keys in your wallet, there was generally no use for\n-  them compared to single-key schemes. Furthermore, no address format for such\n-  outputs is defined, and wallet software can't easily send to it. These outputs\n-  will no longer show up in `listtransactions`, `listunspent`, or contribute to\n-  your balance, unless they are explicitly watched (using `importaddress` or\n-  `importmulti` with hex script argument). `signrawtransaction*` also still\n-  works for them.\n-\n-- The `getwalletinfo` RPC method now returns an `hdseedid` value, which is always the same as the incorrectly-named `hdmasterkeyid` value. `hdmasterkeyid` will be removed in V0.18.\n-- The `getaddressinfo` RPC method now returns an `hdseedid` value, which is always the same as the incorrectly-named `hdmasterkeyid` value. `hdmasterkeyid` will be removed in V0.18.\n-\n-- Parts of the `validateaddress` RPC method have been deprecated and moved to\n-  `getaddressinfo`. Clients must transition to using `getaddressinfo` to access\n-  this information before upgrading to v0.18. The following deprecated fields\n-  have moved to `getaddressinfo` and will only be shown with\n-  `-deprecatedrpc=validateaddress`: `ismine`, `iswatchonly`, `script`, `hex`,\n-  `pubkeys`, `sigsrequired`, `pubkey`, `addresses`, `embedded`, `iscompressed`,\n-  `account`, `timestamp`, `hdkeypath`, `hdmasterkeyid`.\n-- `signrawtransaction` is deprecated and will be fully removed in v0.18. To use\n-  `signrawtransaction` in v0.17, restart bitcoind with\n-  `-deprecatedrpc=signrawtransaction`. Projects should transition to using\n-  `signrawtransactionwithkey` and `signrawtransactionwithwallet` before\n-  upgrading to v0.18.\n-\n-Other API changes\n------------------\n-\n-- The `inactivehdmaster` property in the `dumpwallet` output has been corrected to `inactivehdseed`\n-\n-### Logging\n-\n-- The log timestamp format is now ISO 8601 (e.g. \"2018-02-28T12:34:56Z\").\n-\n-- When running bitcoind with `-debug` but without `-daemon`, logging to stdout\n-  is now the default behavior. Setting `-printtoconsole=1` no longer implicitly\n-  disables logging to debug.log. Instead, logging to file can be explicitly disabled\n-  by setting `-debuglogfile=0`.\n-\n-Transaction index changes\n--------------------------\n-\n-The transaction index is now built separately from the main node procedure,\n-meaning the `-txindex` flag can be toggled without a full reindex. If bitcoind\n-is run with `-txindex` on a node that is already partially or fully synced\n-without one, the transaction index will be built in the background and become\n-available once caught up. When switching from running `-txindex` to running\n-without the flag, the transaction index database will *not* be deleted\n-automatically, meaning it could be turned back on at a later time without a full\n-resync.\n-\n-Miner block size removed\n-------------------------\n-\n-The `-blockmaxsize` option for miners to limit their blocks' sizes was\n-deprecated in V0.15.1, and has now been removed. Miners should use the\n-`-blockmaxweight` option if they want to limit the weight of their blocks.\n-\n-Python Support\n---------------\n-\n-Support for Python 2 has been discontinued for all test files and tools.\n-\n-0.17.0 change log\n-=================\n-\n-### Consensus\n-- #12204 `3fa24bb` Fix overly eager BIP30 bypass (morcos)\n-\n-### Policy\n-- #12568 `ed6ae80` Allow dustrelayfee to be set to zero (luke-jr)\n-- #13120 `ca2a233` Treat segwit as always active (MarcoFalke)\n-- #13096 `062738c` Fix `MAX_STANDARD_TX_WEIGHT` check (jl2012)\n-\n-### Mining\n-- #12693 `df529dc` Remove unused variable in SortForBlock (drewx2)\n-- #12448 `84efa9a` Interrupt block generation on shutdown request (promag)\n-\n-### Block and transaction handling\n-- #12225 `67447ba` Mempool cleanups (sdaftuar)\n-- #12356 `fd65937` Fix 'mempool min fee not met' debug output (Empact)\n-- #12287 `bf3353d` Optimise lock behaviour for GuessVerificationProgress() (jonasschnelli)\n-- #11889 `47a7666` Drop extra script variable in ProduceSignature (ryanofsky)\n-- #11880 `d59b8d6` Stop special-casing phashBlock handling in validation for TBV (TheBlueMatt)\n-- #12431 `947c25e` Only call NotifyBlockTip when chainActive changes (jamesob)\n-- #12653 `534b8fa` Allow to optional specify the directory for the blocks storage (jonasschnelli)\n-- #12172 `3b62a91` Bugfix: RPC: savemempool: Don't save until LoadMempool() is finished (jtimon)\n-- #12167 `88430cb` Make segwit failure due to `CLEANSTACK` violation return a `SCRIPT_ERR_CLEANSTACK` error code (maaku)\n-- #12561 `24133b1` Check for block corruption in ConnectBlock() (sdaftuar)\n-- #11617 `1b5723e` Avoid lock: Call FlushStateToDisk(\u2026) regardless of fCheckForPruning (practicalswift)\n-- #11739 `0a8b7b4` Enforce `SCRIPT_VERIFY_P2SH` and `SCRIPT_VERIFY_WITNESS` from genesis (sdaftuar)\n-- #12885 `a49381d` Reduce implementation code inside CScript (sipa)\n-- #13032 `34dd1a6` Output values for \"min relay fee not met\" error (kristapsk)\n-- #13033 `a07e8ca` Build txindex in parallel with validation (jimpo)\n-- #13080 `66cc47b` Add compile time checking for ::mempool.cs runtime locking assertions (practicalswift)\n-- #13185 `08c1caf` Bugfix: the end of a reorged chain is invalid when connect fails (sipa)\n-- #11689 `0264836` Fix missing locking in CTxMemPool::check(\u2026) and CTxMemPool::setSanityCheck(\u2026) (practicalswift)\n-- #13011 `3c2a41a` Cache witness hash in CTransaction (MarcoFalke)\n-- #13191 `0de7cc8` Specialized double-SHA256 with 64 byte inputs with SSE4.1 and AVX2 (sipa)\n-- #13243 `ea263e1` Make reusable base class for auxiliary indices (jimpo)\n-- #13393 `a607d23` Enable double-SHA256-for-64-byte code on 32-bit x86 (sipa)\n-- #13428 `caabdea` validation: check the specified number of blocks (off-by-one) (kallewoof)\n-- #13438 `450055b` Improve coverage of SHA256 SelfTest code (sipa)\n-- #13431 `954f4a9` validation: count blocks correctly for check level < 3 (kallewoof)\n-- #13386 `3a3eabe` SHA256 implementations based on Intel SHA Extensions (sipa)\n-- #11658 `9a1ad2c` During IBD, when doing pruning, prune 10% extra to avoid pruning again soon after (luke-jr)\n-- #13794 `8ce55df` chainparams: Update with data from assumed valid chain (MarcoFalke)\n-- #13527 `e7ea858` Remove promiscuousmempoolflags (MarcoFalke)\n-\n-### P2P protocol and network code\n-- #12342 `eaeaa2d` Extend #11583 (\"Do not make it trivial for inbound peers to generate log entries\") to include \"version handshake timeout\" message (clemtaylor)\n-- #12218 `9a32114` Move misbehaving logging to net logging category (laanwj)\n-- #10387 `5c2aff8` Eventually connect to `NODE_NETWORK_LIMITED` peers (jonasschnelli)\n-- #9037 `a36834f` Add test-before-evict discipline to addrman (EthanHeilman)\n-- #12622 `e1d6e2a` Correct addrman logging (laanwj)\n-- #11962 `0a01843` add seed.bitcoin.sprovoost.nl to DNS seeds (Sjors)\n-- #12569 `23e7fe8` Increase signal-to-noise ratio in debug.log by adjusting log level when logging failed non-manual connect():s (practicalswift)\n-- #12855 `c199869` Minor accumulated cleanups (tjps)\n-- #13153 `ef46c99` Add missing newlines to debug logging (laanwj)\n-- #13162 `a174702` Don't incorrectly log that REJECT messages are unknown (jnewbery)\n-- #13151 `7f4db9a` Serve blocks directly from disk when possible (laanwj)\n-- #13134 `70d3541` Add option `-enablebip61` to configure sending of BIP61 notifications (laanwj)\n-- #13532 `7209fec` Log warning when deprecated network name 'tor' is used (wodry)\n-- #13615 `172f984` Remove unused interrupt from SendMessages (fanquake)\n-- #13417 `1e90862` Tighten scope in `net_processing` (skeees)\n-- #13298 `f8d470e` Bucketing INV delays (1 bucket) for incoming connections to hide tx time (naumenkogs)\n-- #13672 `0d8d6be` Modified `in_addr6` cast in CConman class to work with msvc (sipsorcery)\n-- #11637 `c575260` Remove dead service bits code (MarcoFalke)\n-- #13212 `a6f00ce` Fixed a race condition when disabling the network (lmanners)\n-- #13656 `1211b15` Remove the boost/algorithm/string/predicate.hpp dependency (251Labs)\n-- #13423 `f58674a` Thread safety annotations in `net_processing` (skeees)\n-- #13776 `7d36237` Add missing verification of IPv6 address in CNetAddr::GetIn6Addr(\u2026) (practicalswift)\n-- #13907 `48bf8ff` Introduce a maximum size for locators (gmaxwell)\n-- #13951 `8a9ffec` Hardcoded seeds update pre-0.17 branch (laanwj)\n-\n-### Wallet\n-- #12330 `2a30e67` Reduce scope of `cs_main` and `cs_wallet` locks in listtransactions (promag)\n-- #12298 `a1ffddb` Refactor HaveKeys to early return on false result (promag)\n-- #12282 `663911e` Disallow abandon of conflicted txes (MarcoFalke)\n-- #12333 `d405bee` Make CWallet::ListCoins atomic (promag)\n-- #12296 `8e6f9f4` Only fee-bump non-conflicted/non-confirmed txes (MarcoFalke)\n-- #11866 `6bb9c13` Do not un-mark fInMempool on wallet txn if ATMP fails (TheBlueMatt)\n-- #11882 `987a809` Disable default fallbackfee on mainnet (jonasschnelli)\n-- #9991 `4ca7c1e` listreceivedbyaddress Filter Address (NicolasDorier)\n-- #11687 `98bc27f` External wallet files (ryanofsky)\n-- #12658 `af88094` Sanitize some wallet serialization (sipa)\n-- #9680 `6acd870` Unify CWalletTx construction (ryanofsky)\n-- #10637 `e057589` Coin Selection with Murch's algorithm (achow101, Xekyo)\n-- #12408 `c39dd2e` Change output type globals to members (MarcoFalke)\n-- #12694 `9552dfb` Actually disable BnB when there are preset inputs (achow101)\n-- #11536 `cead84b` Rename account to label where appropriate (ryanofsky)\n-- #12709 `02b7e83` shuffle sendmany recipients ordering (instagibbs)\n-- #12699 `c948dc8` Shuffle transaction inputs before signing (instagibbs)\n-- #10762 `6d53663` Remove Wallet dependencies from init.cpp (jnewbery)\n-- #12857 `821980c` Avoid travis lint-include-guards error (ken2812221)\n-- #12702 `dab0d68` importprivkey: hint about importmulti (kallewoof)\n-- #12836 `9abdb7c` Make WalletInitInterface and DummyWalletInit private, fix nullptr deref (promag)\n-- #12785 `215158a` Initialize `m_last_block_processed` to nullptr (practicalswift)\n-- #12932 `8d651ae` Remove redundant lambda function arg in handleTransactionChanged (laanwj)\n-- #12749 `a84b056` feebumper: discard change outputs below discard rate (instagibbs)\n-- #12892 `9b3370d` introduce 'label' API for wallet (jnewbery)\n-- #12925 `6d3de17` Logprint the start of a rescan (jonasschnelli)\n-- #12888 `39439e5` debug log number of unknown wallet records on load (instagibbs)\n-- #12977 `434150a` Refactor `g_wallet_init_interface` to const reference (promag)\n-- #13017 `65d7083` Add wallets management functions (promag)\n-- #12953 `d1d54ae` Deprecate accounts (jnewbery)\n-- #12909 `476cb35` Make fee settings to be non-static members (MarcoFalke)\n-- #13002 `487dcbe` Do not treat bare multisig outputs as IsMine unless watched (sipa)\n-- #13028 `783bb64` Make vpwallets usage thread safe (promag)\n-- #12507 `2afdc29` Interrupt rescan on shutdown request (promag)\n-- #12729 `979150b` Get rid of ambiguous OutputType::NONE value (ryanofsky)\n-- #13079 `5778d44` Fix rescanblockchain rpc to properly report progress (Empact)\n-- #12560 `e03c0db` Upgrade path for non-HD wallets to HD (achow101)\n-- #13161 `7cc1bd3` Reset BerkeleyDB handle after connection fails (real-or-random)\n-- #13081 `0dec5b5` Add compile time checking for `cs_wallet` runtime locking assertions (practicalswift)\n-- #13127 `19a3a9e` Add Clang thread safety annotations for variables guarded by `cs_db` (practicalswift)\n-- #10740 `4cfe17c` `loadwallet` RPC - load wallet at runtime (jnewbery)\n-- #12924 `6738813` Fix hdmaster-key / seed-key confusion (scripted diff) (jnewbery)\n-- #13297 `d82c5d1` Fix incorrect comment for DeriveNewSeed (jnewbery)\n-- #13063 `6378eef` Use shared pointer to retain wallet instance (promag)\n-- #13142 `56fe3dc` Separate IsMine from solvability (sipa)\n-- #13194 `fd96d54` Remove template matching and pseudo opcodes (sipa)\n-- #13252 `c4cc8d9` Refactor ReserveKeyFromKeyPool for safety (Empact)\n-- #13058 `343d4e4` `createwallet` RPC - create new wallet at runtime (jnewbery)\n-- #13351 `2140f6c` Prevent segfault when sending to unspendable witness (MarcoFalke)\n-- #13060 `3f0f394` Remove getlabeladdress RPC (jnewbery)\n-- #13111 `000abbb` Add unloadwallet RPC (promag)\n-- #13160 `868cf43` Unlock spent outputs (promag)\n-- #13498 `f54f373` Fixups from account API deprecation (jnewbery)\n-- #13491 `61a044a` Improve handling of INVALID in IsMine (sipa)\n-- #13425 `028b0d9` Moving final scriptSig construction from CombineSignatures to ProduceSignature (PSBT signer logic) (achow101)\n-- #13564 `88a15eb` loadwallet shouldn't create new wallets (jnewbery)\n-- #12944 `619cd29` ScanforWalletTransactions should mark input txns as dirty (instagibbs)\n-- #13630 `d6b2235` Drop unused pindexRet arg to CMerkleTx::GetDepthInMainChain (Empact)\n-- #13566 `ad552a5` Fix get balance (jnewbery)\n-- #13500 `4a3e8c5` Decouple wallet version from client version (achow101)\n-- #13712 `aba2e66` Fix non-determinism in ParseHDKeypath(\u2026). Avoid using an uninitialized variable in path calculation (practicalswift)\n-- #9662 `6b6e854` Add createwallet \"disableprivatekeys\" option: a sane mode for watchonly-wallets (jonasschnelli)\n-- #13683 `e8c7434` Introduce assertion to document the assumption that cache and cache_used are always set in tandem (practicalswift)\n-- #12257 `5f7575e` Use destination groups instead of coins in coin select (kallewoof)\n-- #13773 `89a116d` Fix accidental use of the comma operator (practicalswift)\n-- #13805 `c88529a` Correctly limit output group size (sdaftuar)\n-- #12992 `26f59f5` Add wallet name to log messages (PierreRochard)\n-- #13667 `b81a8a5` Fix backupwallet for multiwallets (domob1812)\n-- #13657 `51c693d` assert to ensure accuracy of CMerkleTx::GetBlocksToMaturity (Empact)\n-- #13812 `9d86aad` sum ancestors rather than taking max in output groups (kallewoof)\n-- #13876 `8eb9870` Catch `filesystem_error` and raise `InitError` (MarcoFalke)\n-- #13808 `13d51a2` shuffle coins before grouping, where warranted (kallewoof)\n-- #13666 `2115cba` Always create signatures with Low R values (achow101)\n-- #13917 `0333914` Additional safety checks in PSBT signer (sipa)\n-- #13968 `65e7a8b` couple of walletcreatefundedpsbt fixes (instagibbs)\n-- #14055 `2307a6e` fix walletcreatefundedpsbt deriv paths, add test (instagibbs)\n-\n-### RPC and other APIs\n-- #12336 `3843780` Remove deprecated rpc options (jnewbery)\n-- #12193 `5dc00f6` Consistently use UniValue.pushKV instead of push_back(Pair()) (karel-3d) (MarcoFalke)\n-- #12409 `0cc45ed` Reject deprecated reserveChangeKey in fundrawtransaction (MarcoFalke)\n-- #10583 `8a98dfe` Split part of validateaddress into getaddressinfo (achow101)\n-- #10579 `ffc6e48` Split signrawtransaction into wallet and non-wallet RPC command (achow101)\n-- #12494 `e4ffcac` Declare CMutableTransaction a struct in rawtransaction.h (Empact)\n-- #12503 `0e26591` createmultisig no longer takes addresses (instagibbs)\n-- #12083 `228b086` Improve getchaintxstats test coverage (promag)\n-- #12479 `cd5e438` Add child transactions to getrawmempool verbose output (conscott)\n-- #11872 `702e8b7` createrawtransaction: Accept sorted outputs (MarcoFalke)\n-- #12700 `ebdf84c` Document RPC method aliasing (ryanofsky)\n-- #12727 `8ee5c7b` Remove unreachable help conditions in rpcwallet.cpp (lutangar)\n-- #12778 `b648974` Add username and ip logging for RPC method requests (GabrielDav)\n-- #12717 `ac898b6` rest: Handle utxo retrieval when ignoring the mempool (romanz)\n-- #12787 `cd99e5b` Adjust ifdef to avoid unreachable code (practicalswift)\n-- #11742 `18815b4` Add testmempoolaccept (MarcoFalke)\n-- #12942 `fefb817` Drop redundant testing of signrawtransaction prevtxs args (Empact)\n-- #11200 `5f2a399` Allow for aborting rescans in the GUI (achow101)\n-- #12791 `3a8a4dc` Expose a transaction's weight via RPC (TheBlueMatt)\n-- #12436 `6e67754` Adds a functional test to validate the transaction version number in the RPC output (251Labs)\n-- #12240 `6f8b345` Introduced a new `fees` structure that aggregates all sub-field fee types denominated in BTC (mryandao)\n-- #12321 `eac067a` p2wsh and p2sh-p2wsh address in decodescript (fivepiece)\n-- #13090 `17266a1` Remove Safe mode (achow101, laanwj)\n-- #12639 `7eb7076` Reduce `cs_main` lock in listunspent (promag)\n-- #10267 `7b966d9` New -includeconf argument for including external configuration files (kallewoof)\n-- #10757 `b9551d3` Introduce getblockstats to plot things (jtimon)\n-- #13288 `a589f53` Remove the need to include rpc/blockchain.cpp in order to put `GetDifficulty` under test (Empact)\n-- #13394 `e1f8dce` cli: Ignore libevent warnings (theuni)\n-- #13439 `3f398d7` Avoid \"duplicate\" return value for invalid submitblock (TheBlueMatt)\n-- #13570 `a247594` Add new \"getzmqnotifications\" method (domob1812)\n-- #13072 `b25a4c2` Update createmultisig RPC to support segwit (ajtowns)\n-- #12196 `8fceae0` Add scantxoutset RPC method (jonasschnelli)\n-- #13557 `b654723` BIP 174 PSBT Serializations and RPCs (achow101)\n-- #13697 `f030410` Support output descriptors in scantxoutset (sipa)\n-- #13927 `bced8ea` Use pushKV in some new PSBT RPCs (domob1812)\n-- #13918 `a9c56b6` Replace median fee rate with feerate percentiles in getblockstats (marcinja)\n-- #13721 `9f23c16` Bugfixes for BIP 174 combining and deserialization (achow101)\n-- #13960 `517010e` Fix PSBT deserialization of 0-input transactions (achow101)\n-\n-### GUI\n-- #12416 `c997f88` Fix Windows build errors introduced in #10498 (practicalswift)\n-- #11733 `e782099` Remove redundant locks (practicalswift)\n-- #12426 `bfa3911` Initialize members in WalletModel (MarcoFalke)\n-- #12489 `e117cfe` Bugfix: respect user defined configuration file (-conf) in QT settings (jonasschnelli)\n-- #12421 `be263fa` navigate to  transaction history page after send (Sjors)\n-- #12580 `ce56fdd` Show a transaction's virtual size in its details dialog (dooglus)\n-- #12501 `c8ea91a` Improved \"custom fee\" explanation in tooltip (randolf)\n-- #12616 `cff95a6` Set modal overlay hide button as default (promag)\n-- #12620 `8a43bdc` Remove TransactionTableModel::TxIDRole (promag)\n-- #12080 `56cc022` Add support to search the address book (promag)\n-- #12621 `2bac3e4` Avoid querying unnecessary model data when filtering transactions (promag)\n-- #12721 `e476826` remove \"new\" button during receive-mode in addressbook (jonasschnelli)\n-- #12723 `310dc61` Qt5: Warning users about invalid-BIP21 URI bitcoin:// (krab)\n-- #12610 `25cf18f` Multiwallet for the GUI (jonasschnelli)\n-- #12779 `f4353da` Remove unused method setupAmountWidget(\u2026) (practicalswift)\n-- #12795 `68484d6` do not truncate .dat extension for wallets in gui (instagibbs)\n-- #12870 `1d54004` make clean removes `src/qt/moc_` files (Sjors)\n-- #13055 `bdda14d` Don't log to console by default (laanwj)\n-- #13141 `57c57df` fixes broken link on readme (marcoagner)\n-- #12928 `ef006d9` Initialize non-static class members that were previously neither initialized where defined nor in constructor (practicalswift)\n-- #13158 `81c533c` Improve sendcoinsdialog readability (marcoagner)\n-- #11491 `40c34a0` Add proxy icon in statusbar (mess110)\n-- #13264 `2a7c53b` Satoshi unit (GreatSock)\n-- #13097 `e545503` Support wallets loaded dynamically (promag)\n-- #13284 `f8be434` fix visual \"overflow\" of amount input (brandonrninefive)\n-- #13275 `a315b79` use `[default wallet]` as name for wallet with no name (jonasschnelli)\n-- #13273 `3fd0c23` Qt/Bugfix: fix handling default wallet with no name (jonasschnelli)\n-- #13341 `25d2df2` Stop translating command line options (laanwj)\n-- #13043 `6e249e4` OptionsDialog: add prune setting (Sjors)\n-- #13506 `6579d80` load wallet in UI after possible init aborts (jonasschnelli)\n-- #13458 `dc53f7f` Drop qt4 support (laanwj)\n-- #13528 `b877c39` Move BitcoinGUI initializers to class, fix initializer order warning (laanwj)\n-- #13536 `baf3a3a` coincontrol: Remove unused qt4 workaround (MarcoFalke)\n-- #13537 `10ffca7` Peer table: Visualize inbound/outbound state for every row (wodry)\n-- #13791 `2c14c1f` Reject dialogs if key escape is pressed (promag)\n-\n-### Build system\n-- #12371 `c9ca4f6` Add gitian PGP key: akx20000 (ghost)\n-- #11966 `f4f4f51` clientversion: Use full commit hash for commit-based version descriptions (luke-jr)\n-- #12417 `ae0fbf0` Upgrade `mac_alias` to 2.0.7 (droark)\n-- #12444 `1f055ef` gitian: Bump descriptors for (0.)17 (theuni)\n-- #12402 `59e032b` expat 2.2.5, ccache 3.4.1, miniupnpc 2.0.20180203 (fanquake)\n-- #12029 `daa84b3` Add a makefile target for Doxygen documentation (Ov3rlo4d)\n-- #12466 `6645eaf` Only use `D_DARWIN_C_SOURCE` when building miniupnpc on darwin (fanquake)\n-- #11986 `765a3eb` zeromq 4.2.3 (fanquake)\n-- #12373 `f13d756` Add build support for profiling (murrayn)\n-- #12631 `a312e20` gitian: Alphabetize signing keys & add kallewoof key (kallewoof)\n-- #12607 `29fad97` Remove ccache (fanquake)\n-- #12625 `c4219ff` biplist 1.0.3 (fanquake)\n-- #12666 `05042d3` configure: UniValue 1.0.4 is required for pushKV(, bool) (luke-jr)\n-- #12678 `6324c68` Fix a few compilation issues with Clang 7 and -Werror (vasild)\n-- #12692 `de6bdfd` Add configure options for various -fsanitize flags (eklitzke)\n-- #12901 `7e23972` Show enabled sanitizers in configure output (practicalswift)\n-- #12899 `3076993` macOS: Prevent Xcode 9.3 build warnings (AkioNak)\n-- #12715 `8fd6243` Add 'make clean' rule (hkjn)\n-- #13133 `a024a18` Remove python2 from configure.ac (ken2812221)\n-- #13005 `cb088b1` Make --enable-debug to pick better options (practicalswift)\n-- #13254 `092b366` Remove improper `qt/moc_*` cleaning glob from the general Makefile (Empact)\n-- #13306 `f5a7733` split warnings out of CXXFLAGS (theuni)\n-- #13385 `7c7508c` Guard against accidental introduction of new Boost dependencies (practicalswift)\n-- #13041 `5779dc4` Add linter checking for accidental introduction of locale dependence (practicalswift)\n-- #13408 `70a03c6` crypto: cleanup sha256 build (theuni)\n-- #13435 `cf7ca60` When build fails due to lib missing, indicate which one (Empact)\n-- #13445 `8eb76f3` Reset default -g -O2 flags when enable debug (ken2812221)\n-- #13465 `81069a7` Avoid concurrency issue when make multiple target (ken2812221)\n-- #13454 `45c00f8` Make sure `LC_ALL=C` is set in all shell scripts (practicalswift)\n-- #13480 `31145a3` Avoid copies in range-for loops and add a warning to detect them (theuni)\n-- #13486 `66e1a08` Move rpc/util.cpp from libbitcoin-util to libbitcoin-server (ken2812221)\n-- #13580 `40334c7` Detect if char equals `int8_t` (ken2812221)\n-- #12788 `287e4ed` Tune wildcards for LIBSECP256K1 target (kallewoof)\n-- #13611 `b55f0c3` bugfix: Use `__cpuid_count` for gnu C to avoid gitian build fail (ken2812221)\n-- #12971 `a6d14b1` Upgrade Qt to 5.9.6 (TheCharlatan)\n-- #13543 `6c6a300` Add RISC-V support (laanwj)\n-- #13177 `dcb154e` GCC-7 and glibc-2.27 back compat code (ken2812221)\n-- #13659 `90b1c7e` add missing leveldb defines (theuni)\n-- #13368 `c0f1569` Update gitian-build.sh for docker (achow101)\n-- #13171 `19d8ca5` Change gitian-descriptors to use bionic instead (ken2812221)\n-- #13604 `75bea05` Add depends 32-bit arm support for bitcoin-qt (TheCharlatan)\n-- #13623 `9cdb19f` Migrate gitian-build.sh to python (ken2812221)\n-- #13689 `8c36432` disable Werror when building zmq (greenaddress)\n-- #13617 `cf7f9ae` release: Require macos 10.10+ (fanquake)\n-- #13750 `c883653` use MacOS friendly sed syntax in qt.mk (Sjors)\n-- #13095 `415f2bf` update `ax_boost_chrono`/`unit_test_framework` (fanquake)\n-- #13732 `e8ffec6` Fix Qt's rcc determinism (Fuzzbawls)\n-- #13782 `8284f1d` Fix osslsigncode compile issue in gitian-build (ken2812221)\n-- #13696 `2ab7208` Add aarch64 qt depends support for cross compiling bitcoin-qt (TheCharlatan)\n-- #13705 `b413ba0` Add format string linter (practicalswift)\n-- #14000 `48c8459` fix qt determinism (theuni)\n-- #14018 `3e4829a` Bugfix: NSIS: Exclude `Makefile*` from docs (luke-jr)\n-- #12906 `048ac83` Avoid `interface` keyword to fix windows gitian build (ryanofsky)\n-- #13314 `a9b6957` Fix FreeBSD build by including utilstrencodings.h (laanwj)\n-\n-### Tests and QA\n-- #12252 `8d57319` Require all tests to follow naming convention (ajtowns)\n-- #12295 `935eb8d` Enable flake8 warnings for all currently non-violated rules (practicalswift)\n-- #11858 `b4d8549` Prepare tests for Windows (MarcoFalke)\n-- #11771 `2dbc4a4` Change invalidtxrequest to use BitcoinTestFramework (jnewbery)\n-- #12200 `d09968f` Bind functional test nodes to 127.0.0.1 (Sjors)\n-- #12425 `26dc2da` Add some script tests (richardkiss)\n-- #12455 `23481fa` Fix bip68 sequence test to reflect updated rpc error message (Empact)\n-- #12477 `acd1e61` Plug memory leaks and stack-use-after-scope (MarcoFalke)\n-- #12443 `07090c5` Move common args to bitcoin.conf (MarcoFalke)\n-- #12570 `39dcac2` Add test cases for HexStr (`std::reverse_iterator` and corner cases) (kostaz)\n-- #12582 `6012f1c` Fix ListCoins test failure due to unset `g_wallet_allow_fallback_fee` (ryanofsky)\n-- #12516 `7f99964` Avoid unintentional unsigned integer wraparounds in tests (practicalswift)\n-- #12512 `955fd23` Don't test against the mempool min fee information in mempool_limit.py (Empact)\n-- #12600 `29088b1` Add a test for large tx output scripts with segwit input (richardkiss)\n-- #12627 `791c3ea` Fix some tests to work on native windows (MarcoFalke)\n-- #12405 `0f58d7f` travis: Full clone for git subtree check (MarcoFalke)\n-- #11772 `0630974` Change invalidblockrequest to use BitcoinTestFramework (jnewbery)\n-- #12681 `1846296` Fix ComputeTimeSmart test failure with `-DDEBUG_LOCKORDER` (ryanofsky)\n-- #12682 `9f04c8e` travis: Clone depth 1 unless `$check_doc` (MarcoFalke)\n-- #12710 `00d1680` Append scripts to new `test_list` array to fix bad assignment (jeffrade)\n-- #12720 `872c921` Avoiding 'file' function name from python2 (jeffrade)\n-- #12728 `4ba3d4f` rename TestNode to TestP2PConn in tests (jnewbery)\n-- #12746 `2405ce1` Remove unused argument `max_invalid` from `check_estimates(\u2026)` (practicalswift)\n-- #12718 `185d484` Require exact match in `assert_start_raises_init_eror` (jnewbery, MarcoFalke)\n-- #12076 `6d36f59` Use node.datadir instead of tmpdir in test framework (MarcoFalke)\n-- #12772 `b43aba8` ci: Bump travis timeout for make check to 50m (jnewbery)\n-- #12806 `18606eb` Fix function names in `feature_blocksdir` (MarcoFalke)\n-- #12811 `0d8fc8d` Make summary row bold-red if any test failed and show failed tests at end of table (laanwj)\n-- #12790 `490644d` Use blockmaxweight where tests previously had blockmaxsize (conscott)\n-- #11773 `f0f9732` Change `feature_block.py` to use BitcoinTestFramework (jnewbery)\n-- #12839 `40f4baf` Remove travis checkout depth (laanwj)\n-- #11817 `2a09a78` Change `feature_csv_activation.py` to use BitcoinTestFramework (jnewbery)\n-- #12284 `fa5825d` Remove assigned but never used local variables. Enable Travis checking for unused local variables (practicalswift)\n-- #12719 `9beded5` Add note about test suite naming convention in developer-notes.md (practicalswift)\n-- #12861 `c564424` Stop `feature_block.py` from blowing up memory (jnewbery)\n-- #12851 `648252e` travis: Run verify-commits only on cron jobs (MarcoFalke)\n-- #12853 `2106c4c` Match full plain text by default (MarcoFalke)\n-- #11818 `9a2db3b` I accidentally (deliberately) killed it (the ComparisonTestFramework) (jnewbery)\n-- #12766 `69310a3` Tidy up REST interface functional tests (romanz)\n-- #12849 `83c7533` Add logging in loops in `p2p_sendhears.py` (ccdle12)\n-- #12895 `d6f10b2` Add note about test suite name uniqueness requirement to developer notes (practicalswift)\n-- #12856 `27278df` Add Metaclass for BitcoinTestFramework (WillAyd)\n-- #12918 `6fc5a05` Assert on correct variable (kallewoof)\n-- #11878 `a04440f` Add Travis check for duplicate includes (practicalswift)\n-- #12917 `cf8073f` Windows fixups for functional tests (MarcoFalke)\n-- #12926 `dd1ca9e` Run unit tests in parallel (sipa)\n-- #12920 `b1fdfc1` Fix sign for expected values (kallewoof)\n-- #12947 `979f598` Wallet hd functional test speedup and clarification (instagibbs)\n-- #12993 `0d69921` Remove compatibility code not needed now when we're on Python 3 (practicalswift)\n-- #12996 `6a278e0` Remove redundant bytes(\u2026) calls (practicalswift)\n-- #12949 `6b46288` Avoid copies of CTransaction (MarcoFalke)\n-- #13007 `0d12570` Fix dangling wallet pointer in vpwallets (promag)\n-- #13048 `cac6d11` Fix `feature_block` flakiness (jnewbery)\n-- #12510 `d5b2e98` Add `rpc_bind` test to default-run tests (laanwj)\n-- #13022 `896a9d0` Attach node index to `test_node` AssertionError and print messages (jamesob)\n-- #13024 `018c7e5` Add rpcauth pair that generated by rpcauth.py (ken2812221)\n-- #13013 `a0079d4` bench: Amend `mempool_eviction` test for witness txs (MarcoFalke)\n-- #13051 `e074097` Normalize executable location (MarcoFalke)\n-- #13056 `106d929` Make rpcauth.py testable and add unit tests (nixbox)\n-- #13073 `a785bc3` add rpcauth-test to `AC_CONFIG_LINKS` to fix out-of-tree make check (laanwj)\n-- #12830 `25ad2f7` Clarify address book error messages, add tests (jamesob)\n-- #13082 `24106a8` don't test against min relay fee information in `mining_prioritisetransaction.py` (kristapsk)\n-- #13003 `8d045a0` Add test for orphan handling (MarcoFalke)\n-- #13105 `9e9b48d` Add --failfast option to functional test runner (jamesob)\n-- #13130 `3186ad4` Fix race in `rpc_deprecated.py` (jnewbery)\n-- #13136 `baf6b4e` Fix flake8 warnings in several wallet functional tests (jnewbery)\n-- #13094 `bf9b03d` Add test for 64-bit Windows PE, modify 32-bit test results (ken2812221)\n-- #13183 `9458b05` travis: New travis job for `check_docs` steps (glaksmono)\n-- #12265 `1834d4d` fundrawtransaction: lock watch-only shared address (kallewoof)\n-- #13188 `4a50ec0` Remove unused option --srcdir (MarcoFalke)\n-- #12755 `612ba35` Better stderr testing (jnewbery)\n-- #13198 `196c5a9` Avoid printing to console during cache creation (sdaftuar)\n-- #13075 `cb9bbf7` Remove 'account' API from wallet functional tests (jnewbery)\n-- #13221 `ffa86af` travis: Rename the build stage `check_doc` to `lint` (practicalswift)\n-- #13205 `3cbd25f` Remove spurious error log in `p2p_segwit.py` (jnewbery)\n-- #13291 `536120e` Don't include torcontrol.cpp into the test file (Empact)\n-- #13281 `2ac6315` Move linters to test/lint, add readme (MarcoFalke)\n-- #13215 `f8a29ca` travis: Build tests on ubuntu 18.04 with docker (ken2812221)\n-- #13349 `24f7011` bench: Don't return a bool from main (laanwj)\n-- #13347 `87a9d03` travis: Skip cache for lint stage (MarcoFalke)\n-- #13355 `0b1c0c4` Fix \"gmake check\" under OpenBSD 6.3 (probably `*BSD`): Avoid using GNU grep specific regexp handling (practicalswift)\n-- #13353 `d4f6dac` Fixup setting of PATH env var (MarcoFalke)\n-- #13352 `e24bf1c` Avoid checking reject code for now (MarcoFalke)\n-- #13383 `2722a1f` bench: Use non-throwing parsedouble(\u2026) instead of throwing boost::lexical_cast<double>(\u2026) (practicalswift)\n-- #13367 `264efdc` Increase includeconf test coverage (MarcoFalke)\n-- #13404 `3d3d8ae` speed up of `tx_validationcache_tests` by reusing of CTransaction (lucash-dev)\n-- #13421 `531a033` Remove `portseed_offset` from test runner (MarcoFalke)\n-- #13440 `5315660` Log as utf-8 (MarcoFalke)\n-- #13066 `fa4b906` Migrate verify-commits script to python, run in travis (ken2812221)\n-- #13447 `4b1edd3` travis: Increase `travis_wait` time while verifying commits (ken2812221)\n-- #13350 `f532d52` Add logging to provide anchor points when debugging p2p_sendheaders (lmanners)\n-- #13406 `4382f19` travis: Change mac goal to all deploy (ken2812221)\n-- #13457 `b222138` Drop variadic macro (MarcoFalke)\n-- #13512 `3a45493` mininode: Expose connection state through `is_connected` (MarcoFalke)\n-- #13496 `9ab4c2a` Harden lint-filenames.sh (wodry)\n-- #13219 `08516e0` bench: Add block assemble benchmark (MarcoFalke)\n-- #13530 `b1dc39d` bench: Add missing pow.h header (laanwj)\n-- #12686 `2643fa5` Add -ftrapv to CFLAGS and CXXFLAGS when --enable-debug is used. Enable -ftrapv in Travis (practicalswift)\n-- #12882 `d96bdd7` Make `test_bitcoin` pass under ThreadSanitzer (clang). Fix lock-order-inversion (potential deadlock) (practicalswift)\n-- #13535 `2328039` `wallet_basic`: Specify minimum required amount for listunspent (MarcoFalke)\n-- #13551 `c93c360` Fix incorrect documentation for test case `cuckoocache_hit_rate_ok` (practicalswift)\n-- #13563 `b330f3f` bench: Simplify coinselection (promag)\n-- #13517 `a6ed99a` Remove need to handle the network thread in tests (MarcoFalke)\n-- #13522 `686e97a` Fix `p2p_sendheaders` race (jnewbery)\n-- #13467 `3dc2dcf` Make `p2p_segwit` easier to debug (jnewbery)\n-- #13598 `0212187` bench: Fix incorrect behaviour in prevector.cpp (AkioNak)\n-- #13565 `b05ded1` Fix AreInputsStandard test to reference the proper scriptPubKey (Empact)\n-- #13145 `d3dae3d` Use common getPath method to create temp directory in tests (winder)\n-- #13645 `2ea7eb6` skip `rpc_zmq` functional test as necessary (jamesob)\n-- #13626 `8f1106d` Fix some TODOs in `p2p_segwit` (MarcoFalke)\n-- #13138 `8803c91` Remove accounts from `wallet_importprunedfunds.py` (jnewbery)\n-- #13663 `cbc9b50` Avoid read/write to default datadir (MarcoFalke)\n-- #13682 `f8a32a3` bench: Remove unused variable (practicalswift)\n-- #13638 `6fcdb5e` Use `MAX_SCRIPT_ELEMENT_SIZE` from script.py (domob1812)\n-- #13687 `9d26b69` travis: Check that ~/.bitcoin is never created (MarcoFalke)\n-- #13715 `e1260a7` fixes mininode's P2PConnection sending messages on closing transport (marcoagner)\n-- #13729 `aa9429a` travis: Avoid unnecessarily setting env variables on the lint build (Empact)\n-- #13747 `ab28b5b` Skip P2PConnection's `is_closing()` check when not available (domob1812)\n-- #13650 `7a9bca6` travis: Don't store debug info if --enable-debug is set (ken2812221)\n-- #13711 `f98d1e0` bench: Add benchmark for unserialize prevector (AkioNak)\n-- #13771 `365384f` travis: Retry to fetch docker image (MarcoFalke)\n-- #13806 `4d550ff` Fix `bench/block_assemble` assert failure (jamesob)\n-- #13779 `d25079a` travis: Improve readability of travis.yml and log outputs (scravy)\n-- #13822 `0fb9c87` bench: Make coinselection output groups pass eligibility filter (achow101)\n-- #13247 `e83d82a` Add tests to SingleThreadedSchedulerClient() and document the memory model (skeees)\n-- #13811 `660abc1` travis: Run `bench_bitcoin` once (MarcoFalke)\n-- #13837 `990e182` Extract `rpc_timewait` as test param (MarcoFalke)\n-- #13851 `9c4324d` fix locale for lint-shell (scravy)\n-- #13823 `489b51b` quote path in authproxy for external multiwallets (MarcoFalke)\n-- #13849 `2b67354` travis: Use only travis jobs: instead of mix of jobs+matrix (scravy)\n-- #13859 `2384323` Add emojis to `test_runner` path and wallet filename (MarcoFalke)\n-- #13916 `8ac7125` `wait_for_verack` by default (MarcoFalke)\n-- #13669 `f66e1c7` Cleanup `create_transaction` implementations (conscott)\n-- #13924 `09ada21` Simplify comparison in `rpc_blockchain.py` (domob1812)\n-- #13913 `a08533c` Remove redundant checkmempool/checkblockindex `extra_args` (MarcoFalke)\n-- #13915 `a04888a` Add test for max number of entries in locator (MarcoFalke)\n-- #13867 `1b04b55` Make extended tests pass on native Windows (MarcoFalke)\n-- #13944 `0df7a6c` Port usage of deprecated optparse module to argparse module (Kvaciral)\n-- #13928 `b8eb0df` blocktools enforce named args for amount (MarcoFalke)\n-- #13054 `bffb35f` Enable automatic detection of undefined names in Python tests scripts. Remove wildcard imports (practicalswift)\n-- #14069 `cf3d7f9` Use assert not `BOOST_CHECK_*` from multithreaded tests (skeees)\n-- #14071 `fab0fbe` Stop txindex thread before calling destructor (MarcoFalke)\n-\n-### Miscellaneous\n-- #11909 `8897135` contrib: Replace developer keys with list of pgp fingerprints (MarcoFalke)\n-- #12394 `fe53d5f` gitian-builder.sh: fix --setup doc, since lxc is default (Sjors)\n-- #12468 `294a766` Add missing newline in init.cpp log message (Aesti)\n-- #12308 `dcfe218` contrib: Add support for out-of-tree builds in gen-manpages.sh (laanwj)\n-- #12451 `aae64a2` Bump leveldb subtree (MarcoFalke)\n-- #12527 `d77b4a7` gitian-build.sh: fix signProg being recognized as two parameters (ken2812221)\n-- #12588 `d74b01d` utils: Remove deprecated pyzmq call from python zmq example (kosciej)\n-- #10271 `bc67982` Use `std::thread::hardware_concurrency`, instead of Boost, to determine available cores (fanquake)\n-- #12097 `14475e2` scripts: Lint-whitespace: use perl instead of grep -p (Sjors)\n-- #12098 `17c44b2` scripts: Lint-whitespace: add param to check last n commits (Sjors)\n-- #11900 `842f61a` script: Simplify checkminimalpush checks, add safety assert (instagibbs)\n-- #12567 `bb98aec` util: Print timestamp strings in logs using iso 8601 formatting (practicalswift)\n-- #12572 `d8d9162` script: Lint-whitespace: find errors more easily (AkioNak)\n-- #10694 `ae5bcc7` Remove redundant code in MutateTxSign(CMutableTransaction&, const std::string&) (practicalswift)\n-- #12659 `3d16f58` Improve Fatal LevelDB Log Messages (eklitzke)\n-- #12643 `0f0229d` util: Remove unused `sync_chain` (MarcoFalke)\n-- #12102 `7fb8fb4` Apply hardening measures in bitcoind systemd service file (Flowdalic)\n-- #12652 `55f490a` bitcoin-cli: Provide a better error message when bitcoind is not running (practicalswift)\n-- #12630 `c290508` Provide useful error message if datadir is not writable (murrayn)\n-- #11881 `624bee9` Remove Python2 support (jnewbery)\n-- #12821 `082e26c` contrib: Remove unused import string (MarcoFalke)\n-- #12829 `252c1b0` Python3 fixup (jnewbery)\n-- #12822 `ff48f62` Revert 7deba93bdc76616011a9f493cbc203d60084416f and fix expired-key-sigs properly (TheBlueMatt)\n-- #12820 `5e53b80` contrib: Fix check-doc script regexes (MarcoFalke)\n-- #12713 `4490871` Track negated options in the option parser (eklitzke)\n-- #12708 `b2e5fe8` Make verify-commits.sh test that merges are clean (sipa)\n-- #12891 `3190785` logging: Add lint-logs.sh to check for newline termination (jnewbery)\n-- #12923 `a7cbe38` util: Pass `pthread_self()` to `pthread_setschedparam` instead of 0 (laanwj)\n-- #12871 `fb17fae` Add shell script linting: Check for shellcheck warnings in shell scripts (practicalswift)\n-- #12970 `5df84de` logging: Bypass timestamp formatting when not logging (theuni)\n-- #12987 `fe8fa22` tests/tools: Enable additional Python flake8 rules for automatic linting via Travis (practicalswift)\n-- #12972 `0782508` Add python3 script shebang lint (ken2812221)\n-- #13004 `58bbc55` Print to console by default when not run with -daemon (practicalswift)\n-- #13039 `8b4081a` Add logging and error handling for file syncing (laanwj)\n-- #13020 `4741ca5` Consistently log CValidationState on call failure (Empact)\n-- #13031 `826acc9` Fix for utiltime to compile with msvc (sipsorcery)\n-- #13119 `81743b5` Remove script to clean up datadirs (MarcoFalke)\n-- #12954 `5a66642` util: Refactor logging code into a global object (jimpo)\n-- #12769 `35eb9d6` Add systemd service to bitcoind in debian package (ghost)\n-- #13146 `0bc980b` rpcauth: Make it possible to provide a custom password (laanwj)\n-- #13148 `b62b437` logging: Fix potential use-after-free in logprintstr(\u2026) (practicalswift)\n-- #13214 `0612d96` Enable Travis checking for two Python linting rules we are currently not violating (practicalswift)\n-- #13197 `6826989` util: Warn about ignored recursive -includeconf calls (kallewoof)\n-- #13176 `d9ebb63` Improve CRollingBloomFilter performance: replace modulus with FastMod (martinus)\n-- #13228 `d792e47` Add script to detect circular dependencies between source modules (sipa)\n-- #13320 `e08c130` Ensure gitian-build.sh uses bash (jhfrontz)\n-- #13301 `e4082d5` lint: Add linter to error on `#include <*.cpp>` (Empact)\n-- #13374 `56f6936` utils and libraries: checking for bitcoin address in translations (kaplanmaxe)\n-- #13230 `7c32b41` Simplify include analysis by enforcing the developer guide's include syntax (practicalswift)\n-- #13450 `32bf4c6` Add linter: Enforce the source code file naming convention described in the developer notes (practicalswift)\n-- #13479 `fa2ea37` contrib: Fix cve-2018-12356 by hardening the regex (loganaden)\n-- #13448 `a90ca40` Add linter: Make sure we explicitly open all text files using UTF-8 encoding in Python (practicalswift)\n-- #13494 `d67eff8` Follow-up to #13454: Fix broken build by exporting `LC_ALL=C` (practicalswift)\n-- #13510 `03f3925` Scripts and tools: Obsolete #!/bin/bash shebang (DesWurstes)\n-- #13577 `c9eb8d1` logging: Avoid nstart may be used uninitialized in appinitmain warning (mruddy)\n-- #13603 `453ae5e` bitcoin-tx: Stricter check for valid integers (domob1812)\n-- #13118 `c05c93c` RPCAuth Detection in Logs (Linrono)\n-- #13647 `4027ec1` Scripts and tools: Fix `BIND_NOW` check in security-check.py (conradoplg)\n-- #13692 `f5d166a` contrib: Clone core repo in gitian-build (MarcoFalke)\n-- #13699 `4c6d1b9` contrib: Correct version check (kallewoof)\n-- #13695 `dcc0cff` lint: Add linter for circular dependencies (Empact)\n-- #13733 `0d1ebf4` utils: Refactor argsmanager a little (AtsukiTak)\n-- #13714 `29b4ee6` contrib: Add lxc network setup for bionic host (ken2812221)\n-- #13764 `f8685f4` contrib: Fix test-security-check fail in ubuntu 18.04 (ken2812221)\n-- #13809 `77168f7` contrib: Remove debian and rpm subfolder (MarcoFalke)\n-- #13799 `230652c` Ignore unknown config file options; warn instead of error (sipa)\n-- #13894 `df9f712` shutdown: Stop threads before resetting ptrs (MarcoFalke)\n-- #13925 `71dec5c` Merge leveldb subtree (MarcoFalke)\n-- #13939 `ef86f26` lint: Make format string linter understand basic template parameter syntax (practicalswift)\n-- #14105 `eb202ea` util: Report parse errors in configuration file (laanwj)\n-- #12604 `9903537` Add DynamicMemoryUsage() to CDBWrapper to estimate LevelDB memory use (eklitzke)\n-- #12495 `047865e` Increase LevelDB `max_open_files` (eklitzke)\n-- #12784 `e80716d` Fix bug in memory usage calculation (unintended integer division) (practicalswift)\n-- #12618 `becd8dd` Set `SCHED_BATCH` priority on the loadblk thread (eklitzke)\n-- #12854 `5ca1509` Add P2P, Network, and Qt categories to the desktop icon (luke-jr)\n-- #11862 `4366f61` Network specific conf sections (ajtowns)\n-- #13441 `4a7e64f` Prevent shared conf files from failing with different available options in different binaries (achow101)\n-- #13471 `5eca4e8` For AVX2 code, also check for AVX, XSAVE, and OS support (sipa)\n-- #13503 `c655b2c` Document FreeBSD quirk. Fix FreeBSD build: Use std::min<int>(\u2026) to allow for compilation under certain FreeBSD versions (practicalswift)\n-- #13725 `07ce278` Fix bitcoin-cli --version (Empact)\n-\n-### Documentation\n-- #12306 `216f9a4` Improvements to UNIX documentation (axvr)\n-- #12309 `895fbd7` Explain how to update chainTxData in release process (laanwj)\n-- #12317 `85123be` Document method for reviewers to verify chainTxData (jnewbery)\n-- #12331 `d32528e` Properly alphabetize output of CLI --help option (murrayn)\n-- #12322 `c345148` Remove step making cloned repository world-writable for Windows build (murrayn)\n-- #12354 `b264528` add gpg key for fivepiece (fivepiece)\n-- #11761 `89005dd` initial QT documentation (Sjors)\n-- #12232 `fdc2188` Improve \"Turn Windows Features On or Off\" step (MCFX2)\n-- #12487 `4528f74` init: Remove translation for `-blockmaxsize` option help (laanwj)\n-- #12546 `a4a5fc7` Minor improvements to Compatibility Notes (randolf)\n-- #12434 `21e2670` dev-notes: Members should be initialized (MarcoFalke)\n-- #12452 `71f56da` clarified systemd installation instructions in init.md for Ubuntu users (DaveFromBinary)\n-- #12615 `1f93491` allow for SIGNER containing spaces (ken2812221)\n-- #12603 `85424d7` PeerLogicValidation interface (jamesob)\n-- #12581 `12ac2f0` Mention configure without wallet in FreeBSD instructions (dbolser)\n-- #12619 `8a709fb` Give hint about gitian not able to download (kallewoof)\n-- #12668 `de2fcaa` do update before fetching packages in WSL build guide (nvercamm)\n-- #12586 `e7721e6` Update osx brew install instruction (fanquake)\n-- #12760 `7466a26` Improve documentation on standard communication channels (jimpo)\n-- #12797 `0415b1e` init: Fix help message for checkblockindex (MarcoFalke)\n-- #12800 `2d97611` Add note about our preference for scoped enumerations (\"enum class\") (practicalswift)\n-- #12798 `174d016` Refer to witness reserved value as spec. in the BIP (MarcoFalke)\n-- #12759 `d3908e2` Improve formatting of developer notes (eklitzke)\n-- #12877 `2b54155` Use bitcoind in Tor documentation (knoxcard)\n-- #12896 `b15485e` Fix conflicting statements about initialization in developer notes (practicalswift)\n-- #12850 `319991d` add qrencode to brew install instructions (buddilla)\n-- #12007 `cd8e45b` Clarify the meaning of fee delta not being a fee rate in prioritisetransaction RPC (honzik666)\n-- #12927 `06ead15` fixed link, replaced QT with Qt (trulex)\n-- #12852 `ebd786b` devtools: Setup ots git integration (MarcoFalke)\n-- #12933 `3cf76c2` Refine header include policy (MarcoFalke)\n-- #12951 `6df0c6c` Fix comment in FindForkInGlobalIndex (jamesob)\n-- #12982 `a63b4e3` Fix inconsistent namespace formatting guidelines (ryanofsky)\n-- #13026 `9b3a67e` Fix include comment in src/interfaces/wallet.h (promag)\n-- #13012 `d1e3c5e` Add comments for chainparams.h, validation.cpp (jamesob)\n-- #13064 `569e381` List support for BIP173 in bips.md (sipa)\n-- #12997 `646b7f6` build-windows: Switch to Artful, since Zesty is EOL (MarcoFalke)\n-- #12384 `c5f7efe` Add version footnote to tor.md (Willtech)\n-- #13165 `627c376` Mention good first issue list in CONTRIBUTING.md (fanquake)\n-- #13295 `fb77310` Update OpenBSD build instructions for OpenBSD 6.3 (practicalswift)\n-- #13340 `3a8e3f4` remove leftover check-doc documentation (fanquake)\n-- #13346 `60f0358` update bitcoin-dot-org links in release-process.md (fanquake)\n-- #13372 `f014933` split FreeBSD build instructions out of build-unix.md (steverusso)\n-- #13366 `861de3b` Rename \u201cOS X\u201d to the newer \u201cmacOS\u201d convention (giulio92)\n-- #13369 `f8bcef3` update transifex doc link (mess110)\n-- #13312 `b22115d` Add a note about the source code filename naming convention (practicalswift)\n-- #13460 `1939536` Remove note to install all boost dev packages (MarcoFalke)\n-- #13476 `9501938` Fix incorrect shell quoting in FreeBSD build instructions (murrayn)\n-- #13402 `43fa355` Document validationinterace callback blocking deadlock potential (TheBlueMatt)\n-- #13488 `d6cf4bd` Improve readability of \"Squashing commits\" (wodry)\n-- #13531 `ee02deb` Clarify that mempool txiter is `const_iterator` (MarcoFalke)\n-- #13418 `01f9098` More precise explanation of parameter onlynet (wodry)\n-- #13592 `1756cb4` Modify policy to not translate command-line help (ken2812221)\n-- #13588 `b77c38e` Improve doc of options addnode, connect, seednode (wodry)\n-- #13614 `17e9106` Update command line help for -printtoconsole and -debuglogfile (satwo, fanquake)\n-- #13605 `8cc048e` corrected text to reflect new(er) process of specifying fingerprints (jhfrontz)\n-- #13481 `b641f60` Rewrite some validation docs as lock annotations (MarcoFalke)\n-- #13680 `30640f8` Remove outdated comment about miner ignoring CPFP (jamesob)\n-- #13625 `7146672` Add release notes for -printtoconsole and -debuglogfile changes (satwo)\n-- #13718 `f7f574d` Specify preferred Python string formatting technique (masonicboom)\n-- #12764 `10b9a81` Remove field in getblocktemplate help that has never been used (conscott)\n-- #13742 `d2186b3` Adjust bitcoincore.org links (MarcoFalke)\n-- #13706 `94dd89e` Minor improvements to release-process.md (MitchellCash)\n-- #13775 `ef4fac0` Remove newlines from error message (practicalswift)\n-- #13803 `feb7dd9` add note to contributor docs about warranted PR's (kallewoof)\n-- #13814 `67af7ef` Add BIP174 to list of implemented BIPs (sipa)\n-- #13835 `c1cba35` Fix memory consistency model in comment (skeees)\n-- #13824 `aa30e4b` Remove outdated net comment (MarcoFalke)\n-- #13853 `317477a` correct versions in dependencies.md (fanquake)\n-- #13872 `37ab117` Reformat -help output for help2man (real-or-random)\n-- #13717 `8c3c402` Link to python style guidelines from developer notes (masonicboom)\n-- #13895 `1cd5f2c` fix GetWarnings docs to reflect behavior (Empact)\n-- #13911 `3e3a50a` Revert translated string change, clarify wallet log messages (PierreRochard)\n-- #13908 `d6faea4` upgrade rescan time warning from minutes to >1 hour (masonicboom)\n-- #13905 `73a09b4` fixed bitcoin-cli -help output for help2man (hebasto)\n-- #14100 `2936dbc` Change documentation for =0 for non-boolean options (laanwj)\n-- #14096 `465a583` Add reference documentation for descriptors language (sipa)\n-- #12757 `0c5f67b` Clarify include guard naming convention (practicalswift)\n-- #13844 `d3325b0` Correct the help output for `-prune` (hebasto)\n-\n-Credits\n-=======\n-\n-Thanks to everyone who directly contributed to this release:\n-\n-- 251\n-- 532479301\n-- Aaron Clauson\n-- Akio Nakamura\n-- Akira Takizawa\n-- Alex Morcos\n-- Alex Vear\n-- Alexey Ivanov\n-- Alin Rus\n-- Andrea Comand\n-- Andrew Chow\n-- Anthony Towns\n-- AtsukiTak\n-- Ben Woosley\n-- Bernhard M. Wiedemann\n-- Brandon Ruggles\n-- buddilla\n-- ccdle12\n-- Chris Moore\n-- Chun Kuan Lee\n-- Clem Taylor\n-- Conor Scott\n-- Conrado Gouvea\n-- Cory Fields\n-- Cristian Mircea Messel\n-- ctp-tsteenholdt\n-- Damian Williamson\n-- Dan Bolser\n-- Daniel Kraft\n-- Darko Jankovi\u0107\n-- DaveFromBinary\n-- David A. Harding\n-- DesWurstes\n-- Dimitris Apostolou\n-- donaloconnor\n-- Douglas Roark\n-- DrahtBot\n-- Drew Rasmussen\n-- e0\n-- Ernest Hemingway\n-- Ethan Heilman\n-- Evan Klitzke\n-- fanquake\n-- Felix Wolfsteller\n-- fivepiece\n-- Florian Schmaus\n-- Fuzzbawls\n-- Gabriel Davidian\n-- Giulio Lombardo\n-- Gleb\n-- Grady Laksmono\n-- GreatSock\n-- Gregory Maxwell\n-- Gregory Sanders\n-- Hennadii Stepanov\n-- Henrik Jonsson\n-- Indospace.io\n-- James O'Beirne\n-- Jan \u010capek\n-- Jeff Frontz\n-- Jeff Rade\n-- Jeremy Rubin\n-- JeremyRand\n-- Jesse Cohen\n-- Jim Posen\n-- joemphilips\n-- John Bampton\n-- John Newbery\n-- johnlow95\n-- Johnson Lau\n-- Jonas Nick\n-- Jonas Schnelli\n-- Jo\u00e3o Barbosa\n-- Jorge Tim\u00f3n\n-- Josh Hartshorn\n-- Julian Fleischer\n-- kallewoof\n-- Karel Bilek\n-- Karl-Johan Alm\n-- Ken Lee\n-- Kevin Pan\n-- Kosta Zertsekel\n-- Kristaps Kaupe\n-- Kvaciral\n-- Lawrence Nahum\n-- Linrono\n-- lmanners\n-- Loganaden Velvindron\n-- Lowell Manners\n-- lucash.dev@gmail.com\n-- Luke Dashjr\n-- lutangar\n-- Marcin Jachymiak\n-- marcoagner\n-- MarcoFalke\n-- Mark Erhardt\n-- Mark Friedenbach\n-- Martin Ankerl\n-- Mason Simon\n-- Matt Corallo\n-- Matteo Sumberaz\n-- Max Kaplan\n-- MeshCollider\n-- Micha\u0142 Zabielski\n-- Mitchell Cash\n-- mruddy\n-- mryandao\n-- murrayn\n-- Nick Vercammen\n-- Nicolas Dorier\n-- Nikolay Mitev\n-- okayplanet\n-- Pierre Rochard\n-- Pieter Wuille\n-- practicalswift\n-- Qasim Javed\n-- Randolf Richardson\n-- Richard Kiss\n-- Roman Zeyde\n-- Russell Yanofsky\n-- Samuel B. Atwood\n-- Sebastian Kung\n-- Sjors Provoost\n-- Steve Lee\n-- steverusso\n-- Suhas Daftuar\n-- Tamas Blummer\n-- TheCharlatan\n-- Thomas Kerin\n-- Thomas Snider\n-- Tim Ruffing\n-- Varunram\n-- Vasil Dimov\n-- Will Ayd\n-- William Robinson\n-- winder\n-- Wladimir J. van der Laan\n-- wodry\n-\n-And to those that reported security issues:\n-\n-- awemany (for CVE-2018-17144, previously credited as \"anonymous reporter\")\n-\n-As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/)."
      },
      {
        "sha": "b1e50e03912d3fb837b75286e161ac8a9fb6d308",
        "filename": "doc/release-notes/release-notes-0.17.1.md",
        "status": "removed",
        "additions": 0,
        "deletions": 168,
        "changes": 168,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/doc/release-notes/release-notes-0.17.1.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/doc/release-notes/release-notes-0.17.1.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.17.1.md?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "patch": "@@ -1,168 +0,0 @@\n-Bitcoin Core version 0.17.1 is now available from:\n-\n-  <https://bitcoincore.org/bin/bitcoin-core-0.17.1/>\n-\n-or through BitTorrent:\n-\n-    magnet:?xt=urn:btih:c56c87ccfaa8e6fbccc90d549121e61efd97cb6f&dn=bitcoin-core-0.17.1&tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80&tr=udp%3A%2F%2Ftracker.opentrackr.org%3A1337&tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969&tr=udp%3A%2F%2Ftracker.leechers-paradise.org%3A6969&tr=udp%3A%2F%2Fzer0day.ch%3A1337&tr=udp%3A%2F%2Fexplodie.org%3A6969    \n-\n-This is a new minor version release, with various bugfixes\n-and performance improvements, as well as updated translations.\n-\n-Please report bugs using the issue tracker at GitHub:\n-\n-  <https://github.com/bitcoin/bitcoin/issues>\n-\n-To receive security and update notifications, please subscribe to:\n-\n-  <https://bitcoincore.org/en/list/announcements/join/>\n-\n-How to Upgrade\n-==============\n-\n-If you are running an older version, shut it down. Wait until it has completely\n-shut down (which might take a few minutes for older versions), then run the\n-installer (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on Mac)\n-or `bitcoind`/`bitcoin-qt` (on Linux).\n-\n-If your node has a txindex, the txindex db will be migrated the first time you run 0.17.0 or newer, which may take up to a few hours. Your node will not be functional until this migration completes.\n-\n-The first time you run version 0.15.0 or newer, your chainstate database will be converted to a\n-new format, which will take anywhere from a few minutes to half an hour,\n-depending on the speed of your machine.\n-\n-Note that the block database format also changed in version 0.8.0 and there is no\n-automatic upgrade code from before version 0.8 to version 0.15.0. Upgrading\n-directly from 0.7.x and earlier without redownloading the blockchain is not supported.\n-However, as usual, old wallet versions are still supported.\n-\n-Downgrading warning\n--------------------\n-\n-The chainstate database for this release is not compatible with previous\n-releases, so if you run 0.15 and then decide to switch back to any\n-older version, you will need to run the old release with the `-reindex-chainstate`\n-option to rebuild the chainstate data structures in the old format.\n-\n-If your node has pruning enabled, this will entail re-downloading and\n-processing the entire blockchain.\n-\n-Compatibility\n-==============\n-\n-Bitcoin Core is extensively tested on multiple operating systems using\n-the Linux kernel, macOS 10.10+, and Windows 7 and newer (Windows XP is not supported).\n-\n-Bitcoin Core should also work on most other Unix-like systems but is not\n-frequently tested on them.\n-\n-From 0.17.0 onwards macOS <10.10 is no longer supported. 0.17.0 is built using Qt 5.9.x, which doesn't\n-support versions of macOS older than 10.10.\n-\n-Notable changes\n-===============\n-\n-`listtransactions` label support\n---------------------------------\n-\n-The `listtransactions` RPC `account` parameter which was deprecated in 0.17.0\n-and renamed to `dummy` has been un-deprecated and renamed again to `label`.\n-\n-When bitcoin is configured with the `-deprecatedrpc=accounts` setting, specifying\n-a label/account/dummy argument will return both outgoing and incoming\n-transactions. Without the `-deprecatedrpc=accounts` setting, it will only return\n-incoming transactions (because it used to be possible to create transactions\n-spending from specific accounts, but this is no longer possible with labels).\n-\n-When `-deprecatedrpc=accounts` is set, it's possible to pass the empty string \"\"\n-to list transactions that don't have any label. Without\n-`-deprecatedrpc=accounts`, passing the empty string is an error because returning\n-only non-labeled transactions is not generally useful behavior and can cause\n-confusion.\n-\n-0.17.1 change log\n-=================\n-\n-### P2P protocol and network code\n-- #14685 `9406502` Fix a deserialization overflow edge case (kazcw)\n-- #14728 `b901578` Fix uninitialized read when stringifying an addrLocal (kazcw)\n-\n-### Wallet\n-- #14441 `5150acc` Restore ability to list incoming transactions by label (jnewbery)\n-- #13546 `91fa15a` Fix use of uninitialized value `bnb_used` in CWallet::CreateTransaction(\u2026) (practicalswift)\n-- #14310 `bb90695` Ensure wallet is unlocked before signing (gustavonalle)\n-- #14690 `5782fdc` Throw error if CPubKey is invalid during PSBT keypath serialization (instagibbs)\n-- #14852 `2528443` backport: [tests] Add `wallet_balance.py` (MarcoFalke)\n-- #14196 `3362a95` psbt: always drop the unnecessary utxo and convert non-witness utxo to witness when necessary (achow101)\n-- #14588 `70ee1f8` Refactor PSBT signing logic to enforce invariant and fix signing bug (gwillen)\n-- #14424 `89a9a9d` Stop requiring imported pubkey to sign non-PKH schemes (sipa, MeshCollider)\n-\n-### RPC and other APIs\n-- #14417 `fb9ad04` Fix listreceivedbyaddress not taking address as a string (etscrivner)\n-- #14596 `de5e48a` Bugfix: RPC: Add `address_type` named param for createmultisig (luke-jr)\n-- #14618 `9666dba` Make HTTP RPC debug logging more informative (practicalswift)\n-- #14197 `7bee414` [psbt] Convert non-witness UTXOs to witness if witness sig created (achow101)\n-- #14377 `a3fe125` Check that a separator is found for psbt inputs, outputs, and global map (achow101)\n-- #14356 `7a590d8` Fix converttopsbt permitsigdata arg, add basic test (instagibbs)\n-- #14453 `75b5d8c` Fix wallet unload during walletpassphrase timeout (promag)\n-\n-### GUI\n-- #14403 `0242b5a` Revert \"Force TLS1.0+ for SSL connections\" (real-or-random)\n-- #14593 `df5131b` Explicitly disable \"Dark Mode\" appearance on macOS (fanquake)\n-\n-### Build system\n-- #14647 `7edebed` Remove illegal spacing in darwin.mk (ch4ot1c)\n-- #14698 `ec71f06` Add bitcoin-tx.exe into Windows installer (ken2812221)\n-\n-### Tests and QA\n-- #13965 `29899ec` Fix extended functional tests fail (ken2812221)\n-- #14011 `9461f98` Disable wallet and address book Qt tests on macOS minimal platform (ryanofsky)\n-- #14180 `86fadee` Run all tests even if wallet is not compiled (MarcoFalke)\n-- #14122 `8bc1bad` Test `rpc_help.py` failed: Check whether ZMQ is enabled or not (Kvaciral)\n-- #14101 `96dc936` Use named args in validation acceptance tests (MarcoFalke)\n-- #14020 `24d796a` Add tests for RPC help (promag)\n-- #14052 `7ff32a6` Add some actual witness in `rpc_rawtransaction` (MarcoFalke)\n-- #14215 `b72fbab` Use correct python index slices in example test (sdaftuar)\n-- #14024 `06544fa` Add `TestNode::assert_debug_log` (MarcoFalke)\n-- #14658 `60f7a97` Add test to ensure node can generate all rpc help texts at runtime (MarcoFalke)\n-- #14632 `96f15e8` Fix a comment (fridokus)\n-- #14700 `f9db08e` Avoid race in `p2p_invalid_block` by waiting for the block request (MarcoFalke)\n-- #14845 `67225e2` Add `wallet_balance.py` (jnewbery)\n-\n-### Documentation\n-- #14161 `5f51fd6` doc/descriptors.md tweaks (ryanofsky)\n-- #14276 `85aacc4` Add autogen.sh in ARM Cross-compilation (walterwhite81)\n-\n-Credits\n-=======\n-\n-Thanks to everyone who directly contributed to this release:\n-\n-- Andrew Chow\n-- Chun Kuan Lee\n-- David A. Harding\n-- Eric Scrivner\n-- fanquake\n-- fridokus\n-- Glenn Willen\n-- Gregory Sanders\n-- gustavonalle\n-- John Newbery\n-- Jon Layton\n-- Jonas Schnelli\n-- Jo\u00e3o Barbosa\n-- Kaz Wesley\n-- Kvaciral\n-- Luke Dashjr\n-- MarcoFalke\n-- MeshCollider\n-- Pieter Wuille\n-- practicalswift\n-- Russell Yanofsky\n-- Sjors Provoost\n-- Suhas Daftuar\n-- Tim Ruffing\n-- Walter\n-- Wladimir J. van der Laan\n-\n-As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/)."
      },
      {
        "sha": "3ba622ee6db1cff63e240081768ead51703410c6",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -6,12 +6,11 @@ Before every release candidate:\n * Update translations (ping wumpus on IRC) see [translation_process.md](https://github.com/bitcoin/bitcoin/blob/master/doc/translation_process.md#synchronising-translations).\n \n * Update manpages, see [gen-manpages.sh](https://github.com/bitcoin/bitcoin/blob/master/contrib/devtools/README.md#gen-manpagessh).\n-* Update release candidate version in `configure.ac` (`CLIENT_VERSION_RC`)\n \n Before every minor and major release:\n \n * Update [bips.md](bips.md) to account for changes since the last release.\n-* Update version in `configure.ac` (don't forget to set `CLIENT_VERSION_IS_RELEASE` to `true`) (don't forget to set `CLIENT_VERSION_RC` to `0`)\n+* Update version in `configure.ac` (don't forget to set `CLIENT_VERSION_IS_RELEASE` to `true`)\n * Write release notes (see below)\n * Update `src/chainparams.cpp` nMinimumChainWork with information from the getblockchaininfo rpc.\n * Update `src/chainparams.cpp` defaultAssumeValid with information from the getblockhash rpc.\n@@ -87,7 +86,7 @@ Ensure gitian-builder is up-to-date:\n     pushd ./gitian-builder\n     mkdir -p inputs\n     wget -P inputs https://bitcoincore.org/cfields/osslsigncode-Backports-to-1.7.1.patch\n-    wget -P inputs https://downloads.sourceforge.net/project/osslsigncode/osslsigncode/osslsigncode-1.7.1.tar.gz\n+    wget -P inputs http://downloads.sourceforge.net/project/osslsigncode/osslsigncode/osslsigncode-1.7.1.tar.gz\n     popd\n \n Create the macOS SDK tarball, see the [macOS readme](README_osx.md) for details, and copy it into the inputs directory.\n@@ -297,8 +296,6 @@ bitcoin.org (see below for bitcoin.org update instructions).\n \n   - bitcoincore.org blog post\n \n-  - bitcoincore.org RPC documentation update\n-\n   - Update title of #bitcoin on Freenode IRC\n \n   - Optionally twitter, reddit /r/Bitcoin, ... but this will usually sort out itself"
      },
      {
        "sha": "2d0676c89aaf0d6090de3b1be5dd6c623a0da7c2",
        "filename": "doc/tor.md",
        "status": "modified",
        "additions": 6,
        "deletions": 11,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/doc/tor.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/doc/tor.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/tor.md?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -93,7 +93,7 @@ API, to create and destroy 'ephemeral' hidden services programmatically.\n Bitcoin Core has been updated to make use of this.\n \n This means that if Tor is running (and proper authentication has been configured),\n-Bitcoin Core automatically creates a hidden service to listen on. This will positively\n+Bitcoin Core automatically creates a hidden service to listen on. This will positively \n affect the number of available .onion nodes.\n \n This new feature is enabled by default if Bitcoin Core is listening (`-listen`), and\n@@ -102,20 +102,15 @@ and, if not disabled, configured using the `-torcontrol` and `-torpassword` sett\n To show verbose debugging information, pass `-debug=tor`.\n \n Connecting to Tor's control socket API requires one of two authentication methods to be\n-configured. It also requires the control socket to be enabled, e.g. put `ControlPort 9051`\n-in `torrc` config file. For cookie authentication the user running bitcoind must have read\n-access to the `CookieAuthFile` specified in Tor configuration. In some cases this is\n+configured. For cookie authentication the user running bitcoind must have write access\n+to the `CookieAuthFile` specified in Tor configuration. In some cases, this is\n preconfigured and the creation of a hidden service is automatic. If permission problems\n are seen with `-debug=tor` they can be resolved by adding both the user running Tor and\n the user running bitcoind to the same group and setting permissions appropriately. On\n Debian-based systems the user running bitcoind can be added to the debian-tor group,\n-which has the appropriate permissions.\n-\n-An alternative authentication method is the use\n-of the `-torpassword=password` option. The `password` is the clear text form that\n-was used when generating the hashed password for the `HashedControlPassword` option\n-in the tor configuration file. The hashed password can be obtained with the command\n-`tor --hash-password password` (read the tor manual for more details).\n+which has the appropriate permissions. An alternative authentication method is the use\n+of the `-torpassword` flag and a `hash-password` which can be enabled and specified in\n+Tor configuration.\n \n ## 4. Privacy recommendations\n "
      },
      {
        "sha": "5d67df9d22117513c21580f7559d00517b3dcc82",
        "filename": "doc/zmq.md",
        "status": "modified",
        "additions": 3,
        "deletions": 16,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/doc/zmq.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/doc/zmq.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/zmq.md?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -33,10 +33,8 @@ buffering or reassembly.\n \n ## Prerequisites\n \n-The ZeroMQ feature in Bitcoin Core requires the ZeroMQ API >= 4.0.0\n-[libzmq](https://github.com/zeromq/libzmq/releases).\n-For version information, see [dependencies.md](dependencies.md).\n-Typically, it is packaged by distributions as something like\n+The ZeroMQ feature in Bitcoin Core requires ZeroMQ API version 4.x or\n+newer. Typically, it is packaged by distributions as something like\n *libzmq3-dev*. The C++ wrapper for ZeroMQ is *not* needed.\n \n In order to run the example Python client scripts in contrib/ one must\n@@ -66,21 +64,10 @@ Currently, the following notifications are supported:\n The socket type is PUB and the address must be a valid ZeroMQ socket\n address. The same address can be used in more than one notification.\n \n-The option to set the PUB socket's outbound message high water mark\n-(SNDHWM) may be set individually for each notification:\n-\n-    -zmqpubhashtxhwm=n\n-    -zmqpubhashblockhwm=n\n-    -zmqpubrawblockhwm=n\n-    -zmqpubrawtxhwm=n\n-\n-The high water mark value must be an integer greater than or equal to 0.\n-\n For instance:\n \n     $ bitcoind -zmqpubhashtx=tcp://127.0.0.1:28332 \\\n-               -zmqpubrawtx=ipc:///tmp/bitcoind.tx.raw \\\n-               -zmqpubhashtxhwm=10000\n+               -zmqpubrawtx=ipc:///tmp/bitcoind.tx.raw\n \n Each PUB notification has a topic and body, where the header\n corresponds to the notification type. For instance, for the"
      },
      {
        "sha": "be2727addbcc7406d3a5c69f440bf8e528695cb3",
        "filename": "share/examples/bitcoin.conf",
        "status": "modified",
        "additions": 12,
        "deletions": 9,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/share/examples/bitcoin.conf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/share/examples/bitcoin.conf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/examples/bitcoin.conf?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -44,11 +44,11 @@\n \n # Use as many addnode= settings as you like to connect to specific peers\n #addnode=69.164.218.197\n-#addnode=10.0.0.2:8333\n+#addnode=10.0.0.2:9333\n \n # Alternatively use as many connect= settings as you like to connect ONLY to specific peers\n #connect=69.164.218.197\n-#connect=10.0.0.1:8333\n+#connect=10.0.0.1:9333\n \n # Listening mode, enabled by default except when 'connect' is being used\n #listen=1\n@@ -71,9 +71,12 @@\n # is .cookie and found in the `-datadir` being used for bitcoind. This option is typically used\n # when the server and client are run as the same user.\n #\n-# If not, you must set rpcuser and rpcpassword to secure the JSON-RPC API.\n+# If not, you must set rpcuser and rpcpassword to secure the JSON-RPC api. The first\n+# method(DEPRECATED) is to set this pair for the server and client:\n+#rpcuser=Ulysseys\n+#rpcpassword=YourSuperGreatPasswordNumber_DO_NOT_USE_THIS_OR_YOU_WILL_GET_ROBBED_385593\n #\n-# The config option `rpcauth` can be added to server startup argument. It is set at initialization time\n+# The second method `rpcauth` can be added to server startup argument. It is set at initialization time\n # using the output from the script in share/rpcauth/rpcauth.py after providing a username:\n #\n # ./share/rpcauth/rpcauth.py alice\n@@ -113,21 +116,21 @@\n # running on another host using this option:\n #rpcconnect=127.0.0.1\n \n-# Wallet options\n-\n # Create transactions that have enough fees so they are likely to begin confirmation within n blocks (default: 6).\n # This setting is over-ridden by the -paytxfee option.\n #txconfirmtarget=n\n \n-# Pay a transaction fee every time you send bitcoins.\n-#paytxfee=0.000x\n-\n # Miscellaneous options\n \n # Pre-generate this many public/private key pairs, so wallet backups will be valid for\n # both prior transactions and several dozen future transactions.\n #keypool=100\n \n+# Pay an optional transaction fee every time you send bitcoins.  Transactions with fees\n+# are more likely than free transactions to be included in generated blocks, so may\n+# be validated sooner.\n+#paytxfee=0.00\n+\n # Enable pruning to reduce storage requirements by deleting old blocks. \n # This mode is incompatible with -txindex and -rescan.\n # 0 = default (no pruning)."
      },
      {
        "sha": "0c0335a1e84bf21395e4e39ad19154569dd16223",
        "filename": "share/qt/Info.plist.in",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/share/qt/Info.plist.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/share/qt/Info.plist.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/qt/Info.plist.in?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -17,7 +17,7 @@\n   <string>APPL</string>\n \n   <key>CFBundleGetInfoString</key>\n-  <string>@CLIENT_VERSION_MAJOR@.@CLIENT_VERSION_MINOR@.@CLIENT_VERSION_REVISION@.@CLIENT_VERSION_BUILD@, Copyright \u00a9 2009-@COPYRIGHT_YEAR@ @COPYRIGHT_HOLDERS_FINAL@</string>\n+  <string>@CLIENT_VERSION_MAJOR@.@CLIENT_VERSION_MINOR@.@CLIENT_VERSION_REVISION@, Copyright \u00a9 2009-@COPYRIGHT_YEAR@ @COPYRIGHT_HOLDERS_FINAL@</string>\n \n   <key>CFBundleShortVersionString</key>\n   <string>@CLIENT_VERSION_MAJOR@.@CLIENT_VERSION_MINOR@.@CLIENT_VERSION_REVISION@</string>\n@@ -97,6 +97,9 @@\n   <key>NSHighResolutionCapable</key>\n     <string>True</string>\n \n+  <key>LSAppNapIsDisabled</key>\n+    <string>True</string>\n+\n   <key>NSRequiresAquaSystemAppearance</key>\n     <string>True</string>\n   "
      },
      {
        "sha": "20d16f0a974f5b6c179b495de0fd3eb1bd6bfce8",
        "filename": "share/rpcauth/README.md",
        "status": "modified",
        "additions": 6,
        "deletions": 10,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/share/rpcauth/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/share/rpcauth/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/rpcauth/README.md?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -3,16 +3,12 @@ RPC Tools\n \n ### [RPCAuth](/share/rpcauth) ###\n \n-```\n-usage: rpcauth.py [-h] username [password]\n+Create login credentials for a JSON-RPC user.\n \n-Create login credentials for a JSON-RPC user\n+Usage:\n \n-positional arguments:\n-  username    the username for authentication\n-  password    leave empty to generate a random password or specify \"-\" to\n-              prompt for password\n+    ./rpcauth.py <username>\n \n-optional arguments:\n-  -h, --help  show this help message and exit\n-  ```\n+in which case the script will generate a password. To specify a custom password do:\n+\n+    ./rpcauth.py <username> <password>"
      },
      {
        "sha": "13bef3d37a7adf1208a085d9dc6133f7ee1c8344",
        "filename": "share/rpcauth/rpcauth.py",
        "status": "modified",
        "additions": 24,
        "deletions": 23,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/share/rpcauth/rpcauth.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/share/rpcauth/rpcauth.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/rpcauth/rpcauth.py?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -3,44 +3,45 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-from argparse import ArgumentParser\n-from base64 import urlsafe_b64encode\n-from binascii import hexlify\n-from getpass import getpass\n-from os import urandom\n-\n+import sys\n+import os\n+from random import SystemRandom\n+import base64\n import hmac\n \n-def generate_salt(size):\n-    \"\"\"Create size byte hex salt\"\"\"\n-    return hexlify(urandom(size)).decode()\n+def generate_salt():\n+    # This uses os.urandom() underneath\n+    cryptogen = SystemRandom()\n+\n+    # Create 16 byte hex salt\n+    salt_sequence = [cryptogen.randrange(256) for _ in range(16)]\n+    return ''.join([format(r, 'x') for r in salt_sequence])\n \n def generate_password():\n     \"\"\"Create 32 byte b64 password\"\"\"\n-    return urlsafe_b64encode(urandom(32)).decode('utf-8')\n+    return base64.urlsafe_b64encode(os.urandom(32)).decode('utf-8')\n \n def password_to_hmac(salt, password):\n     m = hmac.new(bytearray(salt, 'utf-8'), bytearray(password, 'utf-8'), 'SHA256')\n     return m.hexdigest()\n \n def main():\n-    parser = ArgumentParser(description='Create login credentials for a JSON-RPC user')\n-    parser.add_argument('username', help='the username for authentication')\n-    parser.add_argument('password', help='leave empty to generate a random password or specify \"-\" to prompt for password', nargs='?')\n-    args = parser.parse_args()\n+    if len(sys.argv) < 2:\n+        sys.stderr.write('Please include username (and an optional password, will generate one if not provided) as an argument.\\n')\n+        sys.exit(0)\n \n-    if not args.password:\n-        args.password = generate_password()\n-    elif args.password == '-':\n-        args.password = getpass()\n+    username = sys.argv[1]\n \n-    # Create 16 byte hex salt\n-    salt = generate_salt(16)\n-    password_hmac = password_to_hmac(salt, args.password)\n+    salt = generate_salt()\n+    if len(sys.argv) > 2:\n+        password = sys.argv[2]\n+    else:\n+        password = generate_password()\n+    password_hmac = password_to_hmac(salt, password)\n \n     print('String to be appended to bitcoin.conf:')\n-    print('rpcauth={0}:{1}${2}'.format(args.username, salt, password_hmac))\n-    print('Your password:\\n{0}'.format(args.password))\n+    print('rpcauth={0}:{1}${2}'.format(username, salt, password_hmac))\n+    print('Your password:\\n{0}'.format(password))\n \n if __name__ == '__main__':\n     main()"
      },
      {
        "sha": "0608cdd1f4a5bcf6f57187948acd2fd059c680b9",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 21,
        "deletions": 38,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -83,24 +83,19 @@ if BUILD_BITCOIND\n   bin_PROGRAMS += bitcoind\n endif\n \n-if BUILD_BITCOIN_CLI\n-  bin_PROGRAMS += bitcoin-cli\n-endif\n-if BUILD_BITCOIN_TX\n-  bin_PROGRAMS += bitcoin-tx\n+if BUILD_BITCOIN_UTILS\n+  bin_PROGRAMS += bitcoin-cli bitcoin-tx\n endif\n \n .PHONY: FORCE check-symbols check-security\n # bitcoin core #\n BITCOIN_CORE_H = \\\n   addrdb.h \\\n   addrman.h \\\n-  attributes.h \\\n   base58.h \\\n   bech32.h \\\n   bloom.h \\\n   blockencodings.h \\\n-  blockfilter.h \\\n   chain.h \\\n   chainparams.h \\\n   chainparamsbase.h \\\n@@ -126,7 +121,6 @@ BITCOIN_CORE_H = \\\n   index/txindex.h \\\n   indirectmap.h \\\n   init.h \\\n-  interfaces/chain.h \\\n   interfaces/handler.h \\\n   interfaces/node.h \\\n   interfaces/wallet.h \\\n@@ -185,15 +179,14 @@ BITCOIN_CORE_H = \\\n   txmempool.h \\\n   ui_interface.h \\\n   undo.h \\\n-  util/bytevectorhash.h \\\n-  util/system.h \\\n-  util/memory.h \\\n-  util/moneystr.h \\\n-  util/time.h \\\n+  util.h \\\n+  utilmemory.h \\\n+  utilmoneystr.h \\\n+  utiltime.h \\\n   validation.h \\\n   validationinterface.h \\\n+  variable_block_reward.h \\\n   versionbits.h \\\n-  versionbitsinfo.h \\\n   walletinitinterface.h \\\n   wallet/coincontrol.h \\\n   wallet/crypter.h \\\n@@ -227,17 +220,13 @@ libbitcoin_server_a_SOURCES = \\\n   addrman.cpp \\\n   bloom.cpp \\\n   blockencodings.cpp \\\n-  blockfilter.cpp \\\n   chain.cpp \\\n   checkpoints.cpp \\\n   consensus/tx_verify.cpp \\\n   httprpc.cpp \\\n   httpserver.cpp \\\n   index/base.cpp \\\n   index/txindex.cpp \\\n-  interfaces/chain.cpp \\\n-  interfaces/handler.cpp \\\n-  interfaces/node.cpp \\\n   init.cpp \\\n   dbwrapper.cpp \\\n   merkleblock.cpp \\\n@@ -267,13 +256,10 @@ libbitcoin_server_a_SOURCES = \\\n   ui_interface.cpp \\\n   validation.cpp \\\n   validationinterface.cpp \\\n+  variable_block_reward.cpp \\\n   versionbits.cpp \\\n   $(BITCOIN_CORE_H)\n \n-if !ENABLE_WALLET\n-libbitcoin_server_a_SOURCES += dummywallet.cpp\n-endif\n-\n if ENABLE_ZMQ\n libbitcoin_zmq_a_CPPFLAGS = $(BITCOIN_INCLUDES) $(ZMQ_CFLAGS)\n libbitcoin_zmq_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n@@ -325,9 +311,7 @@ crypto_libbitcoin_crypto_base_a_SOURCES = \\\n   crypto/sha256.cpp \\\n   crypto/sha256.h \\\n   crypto/sha512.cpp \\\n-  crypto/sha512.h \\\n-  crypto/siphash.cpp \\\n-  crypto/siphash.h\n+  crypto/sha512.h\n \n if USE_ASM\n crypto_libbitcoin_crypto_base_a_SOURCES += crypto/sha256_sse4.cpp\n@@ -383,8 +367,8 @@ libbitcoin_consensus_a_SOURCES = \\\n   tinyformat.h \\\n   uint256.cpp \\\n   uint256.h \\\n-  util/strencodings.cpp \\\n-  util/strencodings.h \\\n+  utilstrencodings.cpp \\\n+  utilstrencodings.h \\\n   version.h\n \n # common: shared between bitcoind, and bitcoin-qt and non-server tools\n@@ -394,6 +378,8 @@ libbitcoin_common_a_SOURCES = \\\n   base58.cpp \\\n   bech32.cpp \\\n   chainparams.cpp \\\n+  chain.cpp \\\n+  pow.cpp \\  \n   coins.cpp \\\n   compressor.cpp \\\n   core_read.cpp \\\n@@ -410,7 +396,6 @@ libbitcoin_common_a_SOURCES = \\\n   script/ismine.cpp \\\n   script/sign.cpp \\\n   script/standard.cpp \\\n-  versionbitsinfo.cpp \\\n   warnings.cpp \\\n   $(BITCOIN_CORE_H)\n \n@@ -427,17 +412,18 @@ libbitcoin_util_a_SOURCES = \\\n   compat/glibcxx_sanity.cpp \\\n   compat/strnlen.cpp \\\n   fs.cpp \\\n+  interfaces/handler.cpp \\\n+  interfaces/node.cpp \\\n   logging.cpp \\\n   random.cpp \\\n   rpc/protocol.cpp \\\n   support/cleanse.cpp \\\n   sync.cpp \\\n   threadinterrupt.cpp \\\n-  util/bytevectorhash.cpp \\\n-  util/system.cpp \\\n-  util/moneystr.cpp \\\n-  util/strencodings.cpp \\\n-  util/time.cpp \\\n+  util.cpp \\\n+  utilmoneystr.cpp \\\n+  utilstrencodings.cpp \\\n+  utiltime.cpp \\\n   $(BITCOIN_CORE_H)\n \n if GLIBC_BACK_COMPAT\n@@ -468,7 +454,6 @@ endif\n bitcoind_LDADD = \\\n   $(LIBBITCOIN_SERVER) \\\n   $(LIBBITCOIN_WALLET) \\\n-  $(LIBBITCOIN_SERVER) \\\n   $(LIBBITCOIN_COMMON) \\\n   $(LIBUNIVALUE) \\\n   $(LIBBITCOIN_UTIL) \\\n@@ -480,7 +465,7 @@ bitcoind_LDADD = \\\n   $(LIBMEMENV) \\\n   $(LIBSECP256K1)\n \n-bitcoind_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS) $(ZMQ_LIBS)\n+bitcoind_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS) $(ZMQ_LIBS)\n \n # bitcoin-cli binary #\n bitcoin_cli_SOURCES = bitcoin-cli.cpp\n@@ -498,7 +483,7 @@ bitcoin_cli_LDADD = \\\n   $(LIBBITCOIN_UTIL) \\\n   $(LIBBITCOIN_CRYPTO)\n \n-bitcoin_cli_LDADD += $(BOOST_LIBS) $(CRYPTO_LIBS) $(EVENT_LIBS)\n+bitcoin_cli_LDADD += $(BOOST_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(EVENT_LIBS)\n #\n \n # bitcoin-tx binary #\n@@ -595,11 +580,9 @@ if HARDEN\n \t$(AM_V_at) READELF=$(READELF) OBJDUMP=$(OBJDUMP) $(top_srcdir)/contrib/devtools/security-check.py < $(bin_PROGRAMS)\n endif\n \n-if ENABLE_BIP70\n %.pb.cc %.pb.h: %.proto\n \t@test -f $(PROTOC)\n \t$(AM_V_GEN) $(PROTOC) --cpp_out=$(@D) --proto_path=$(<D) $<\n-endif\n \n if EMBEDDED_LEVELDB\n include Makefile.leveldb.include"
      },
      {
        "sha": "f5293585a0bab25eb98610537f6028aee75ee2d0",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -18,12 +18,10 @@ bench_bench_bitcoin_SOURCES = \\\n   bench/block_assemble.cpp \\\n   bench/checkblock.cpp \\\n   bench/checkqueue.cpp \\\n-  bench/duplicate_inputs.cpp \\\n   bench/examples.cpp \\\n   bench/rollingbloom.cpp \\\n   bench/crypto_hash.cpp \\\n   bench/ccoins_caching.cpp \\\n-  bench/gcs_filter.cpp \\\n   bench/merkle_root.cpp \\\n   bench/mempool_eviction.cpp \\\n   bench/verify_script.cpp \\\n@@ -57,7 +55,7 @@ if ENABLE_WALLET\n bench_bench_bitcoin_SOURCES += bench/coin_selection.cpp\n endif\n \n-bench_bench_bitcoin_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS)\n+bench_bench_bitcoin_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)\n bench_bench_bitcoin_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n \n CLEAN_BITCOIN_BENCH = bench/*.gcda bench/*.gcno $(GENERATED_BENCH_FILES)"
      },
      {
        "sha": "c7a19631359b643754d6225fe58c3af5cabf25ae",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 7,
        "deletions": 25,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -122,6 +122,7 @@ QT_MOC_CPP = \\\n   qt/moc_bitcoinamountfield.cpp \\\n   qt/moc_bitcoingui.cpp \\\n   qt/moc_bitcoinunits.cpp \\\n+  qt/moc_callback.cpp \\\n   qt/moc_clientmodel.cpp \\\n   qt/moc_coincontroldialog.cpp \\\n   qt/moc_coincontroltreewidget.cpp \\\n@@ -162,12 +163,12 @@ QT_MOC_CPP = \\\n \n BITCOIN_MM = \\\n   qt/macdockiconhandler.mm \\\n-  qt/macnotificationhandler.mm \\\n-  qt/macos_appnap.mm\n+  qt/macnotificationhandler.mm\n \n QT_MOC = \\\n   qt/bitcoin.moc \\\n   qt/bitcoinamountfield.moc \\\n+  qt/callback.moc \\\n   qt/intro.moc \\\n   qt/overviewpage.moc \\\n   qt/rpcconsole.moc\n@@ -177,15 +178,9 @@ QT_QRC = qt/bitcoin.qrc\n QT_QRC_LOCALE_CPP = qt/qrc_bitcoin_locale.cpp\n QT_QRC_LOCALE = qt/bitcoin_locale.qrc\n \n-if ENABLE_BIP70\n PROTOBUF_CC = qt/paymentrequest.pb.cc\n PROTOBUF_H = qt/paymentrequest.pb.h\n PROTOBUF_PROTO = qt/paymentrequest.proto\n-else\n-PROTOBUF_CC =\n-PROTOBUF_H =\n-PROTOBUF_PROTO =\n-endif\n \n BITCOIN_QT_H = \\\n   qt/addressbookpage.h \\\n@@ -196,6 +191,7 @@ BITCOIN_QT_H = \\\n   qt/bitcoinamountfield.h \\\n   qt/bitcoingui.h \\\n   qt/bitcoinunits.h \\\n+  qt/callback.h \\\n   qt/clientmodel.h \\\n   qt/coincontroldialog.h \\\n   qt/coincontroltreewidget.h \\\n@@ -206,7 +202,6 @@ BITCOIN_QT_H = \\\n   qt/intro.h \\\n   qt/macdockiconhandler.h \\\n   qt/macnotificationhandler.h \\\n-  qt/macos_appnap.h \\\n   qt/modaloverlay.h \\\n   qt/networkstyle.h \\\n   qt/notificator.h \\\n@@ -335,6 +330,7 @@ BITCOIN_QT_WALLET_CPP = \\\n   qt/editaddressdialog.cpp \\\n   qt/openuridialog.cpp \\\n   qt/overviewpage.cpp \\\n+  qt/paymentrequestplus.cpp \\\n   qt/paymentserver.cpp \\\n   qt/receivecoinsdialog.cpp \\\n   qt/receiverequestdialog.cpp \\\n@@ -353,19 +349,13 @@ BITCOIN_QT_WALLET_CPP = \\\n   qt/walletmodeltransaction.cpp \\\n   qt/walletview.cpp\n \n-BITCOIN_QT_WALLET_BIP70_CPP = \\\n-  qt/paymentrequestplus.cpp\n-\n BITCOIN_QT_CPP = $(BITCOIN_QT_BASE_CPP)\n if TARGET_WINDOWS\n BITCOIN_QT_CPP += $(BITCOIN_QT_WINDOWS_CPP)\n endif\n if ENABLE_WALLET\n BITCOIN_QT_CPP += $(BITCOIN_QT_WALLET_CPP)\n-if ENABLE_BIP70\n-BITCOIN_QT_CPP += $(BITCOIN_QT_WALLET_BIP70_CPP)\n-endif # ENABLE_BIP70\n-endif # ENABLE_WALLET\n+endif\n \n RES_IMAGES =\n \n@@ -419,16 +409,8 @@ if ENABLE_ZMQ\n qt_bitcoin_qt_LDADD += $(LIBBITCOIN_ZMQ) $(ZMQ_LIBS)\n endif\n qt_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CONSENSUS) $(LIBBITCOIN_CRYPTO) $(LIBUNIVALUE) $(LIBLEVELDB) $(LIBLEVELDB_SSE42) $(LIBMEMENV) \\\n-  $(BOOST_LIBS) $(QT_LIBS) $(QT_DBUS_LIBS) $(QR_LIBS) $(PROTOBUF_LIBS) $(BDB_LIBS) $(MINIUPNPC_LIBS) $(LIBSECP256K1) \\\n+  $(BOOST_LIBS) $(QT_LIBS) $(QT_DBUS_LIBS) $(QR_LIBS) $(PROTOBUF_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(LIBSECP256K1) \\\n   $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)\n-if ENABLE_BIP70\n-qt_bitcoin_qt_LDADD += $(SSL_LIBS)\n-else\n-if TARGET_WINDOWS\n-qt_bitcoin_qt_LDADD += $(SSL_LIBS)\n-endif\n-endif\n-qt_bitcoin_qt_LDADD += $(CRYPTO_LIBS)\n qt_bitcoin_qt_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(QT_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n qt_bitcoin_qt_LIBTOOLFLAGS = $(AM_LIBTOOLFLAGS) --tag CXX\n "
      },
      {
        "sha": "4b14212b2ebaf1d1595a959b94e55c5f46d5a8b7",
        "filename": "src/Makefile.qttest.include",
        "status": "modified",
        "additions": 4,
        "deletions": 10,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/Makefile.qttest.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/Makefile.qttest.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qttest.include?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -13,12 +13,9 @@ TEST_QT_MOC_CPP = \\\n if ENABLE_WALLET\n TEST_QT_MOC_CPP += \\\n   qt/test/moc_addressbooktests.cpp \\\n+  qt/test/moc_paymentservertests.cpp \\\n   qt/test/moc_wallettests.cpp\n-if ENABLE_BIP70\n-TEST_QT_MOC_CPP += \\\n-  qt/test/moc_paymentservertests.cpp\n-endif # ENABLE_BIP70\n-endif # ENABLE_WALLET\n+endif\n \n TEST_QT_H = \\\n   qt/test/addressbooktests.h \\\n@@ -51,13 +48,10 @@ qt_test_test_bitcoin_qt_SOURCES = \\\n if ENABLE_WALLET\n qt_test_test_bitcoin_qt_SOURCES += \\\n   qt/test/addressbooktests.cpp \\\n+  qt/test/paymentservertests.cpp \\\n   qt/test/wallettests.cpp \\\n   wallet/test/wallet_test_fixture.cpp\n-if ENABLE_BIP70\n-qt_test_test_bitcoin_qt_SOURCES += \\\n-  qt/test/paymentservertests.cpp\n-endif # ENABLE_BIP70\n-endif # ENABLE_WALLET\n+endif\n \n nodist_qt_test_test_bitcoin_qt_SOURCES = $(TEST_QT_MOC_CPP)\n "
      },
      {
        "sha": "6f401636f525ff7bb4e67a2d6f38230b6721ce17",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 5,
        "deletions": 38,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -8,9 +8,7 @@ TEST_SRCDIR = test\n TEST_BINARY=test/test_bitcoin$(EXEEXT)\n \n JSON_TEST_FILES = \\\n-  test/data/script_tests.json \\\n   test/data/base58_encode_decode.json \\\n-  test/data/blockfilters.json \\\n   test/data/key_io_valid.json \\\n   test/data/key_io_invalid.json \\\n   test/data/script_tests.json \\\n@@ -41,7 +39,6 @@ BITCOIN_TESTS =\\\n   test/bip32_tests.cpp \\\n   test/blockchain_tests.cpp \\\n   test/blockencodings_tests.cpp \\\n-  test/blockfilter_tests.cpp \\\n   test/bloom_tests.cpp \\\n   test/bswap_tests.cpp \\\n   test/checkqueue_tests.cpp \\\n@@ -51,7 +48,6 @@ BITCOIN_TESTS =\\\n   test/cuckoocache_tests.cpp \\\n   test/denialofservice_tests.cpp \\\n   test/descriptor_tests.cpp \\\n-  test/fs_tests.cpp \\\n   test/getarg_tests.cpp \\\n   test/hash_tests.cpp \\\n   test/key_io_tests.cpp \\\n@@ -85,7 +81,6 @@ BITCOIN_TESTS =\\\n   test/sigopcount_tests.cpp \\\n   test/skiplist_tests.cpp \\\n   test/streams_tests.cpp \\\n-  test/sync_tests.cpp \\\n   test/timedata_tests.cpp \\\n   test/torcontrol_tests.cpp \\\n   test/transaction_tests.cpp \\\n@@ -97,28 +92,17 @@ BITCOIN_TESTS =\\\n   test/validation_block_tests.cpp \\\n   test/versionbits_tests.cpp\n \n-if ENABLE_PROPERTY_TESTS\n-BITCOIN_TESTS += \\\n-  test/key_properties.cpp\n-\n-BITCOIN_TEST_SUITE += \\\n-  test/gen/crypto_gen.cpp \\\n-  test/gen/crypto_gen.h\n-endif\n-\n if ENABLE_WALLET\n BITCOIN_TESTS += \\\n+  wallet/test/accounting_tests.cpp \\\n   wallet/test/psbt_wallet_tests.cpp \\\n   wallet/test/wallet_tests.cpp \\\n   wallet/test/wallet_crypto_tests.cpp \\\n-  wallet/test/coinselector_tests.cpp \\\n-  wallet/test/init_tests.cpp\n+  wallet/test/coinselector_tests.cpp\n \n BITCOIN_TEST_SUITE += \\\n   wallet/test/wallet_test_fixture.cpp \\\n-  wallet/test/wallet_test_fixture.h \\\n-  wallet/test/init_test_fixture.cpp \\\n-  wallet/test/init_test_fixture.h\n+  wallet/test/wallet_test_fixture.h\n endif\n \n test_test_bitcoin_SOURCES = $(BITCOIN_TEST_SUITE) $(BITCOIN_TESTS) $(JSON_TEST_FILES) $(RAW_TEST_FILES)\n@@ -132,7 +116,7 @@ test_test_bitcoin_LDADD += $(LIBBITCOIN_SERVER) $(LIBBITCOIN_CLI) $(LIBBITCOIN_C\n   $(LIBLEVELDB) $(LIBLEVELDB_SSE42) $(LIBMEMENV) $(BOOST_LIBS) $(BOOST_UNIT_TEST_FRAMEWORK_LIB) $(LIBSECP256K1) $(EVENT_LIBS) $(EVENT_PTHREADS_LIBS)\n test_test_bitcoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n \n-test_test_bitcoin_LDADD += $(BDB_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(RAPIDCHECK_LIBS)\n+test_test_bitcoin_LDADD += $(LIBBITCOIN_CONSENSUS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS)\n test_test_bitcoin_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS) -static\n \n if ENABLE_ZMQ\n@@ -165,19 +149,11 @@ nodist_test_test_bitcoin_SOURCES = $(GENERATED_TEST_FILES)\n \n $(BITCOIN_TESTS): $(GENERATED_TEST_FILES)\n \n-CLEAN_BITCOIN_TEST = test/*.gcda test/*.gcno $(GENERATED_TEST_FILES) $(BITCOIN_TESTS:=.log)\n+CLEAN_BITCOIN_TEST = test/*.gcda test/*.gcno $(GENERATED_TEST_FILES)\n \n CLEANFILES += $(CLEAN_BITCOIN_TEST)\n \n-if TARGET_WINDOWS\n bitcoin_test: $(TEST_BINARY)\n-else\n-if ENABLE_BENCH\n-bitcoin_test: $(TEST_BINARY) $(BENCH_BINARY)\n-else\n-bitcoin_test: $(TEST_BINARY)\n-endif\n-endif\n \n bitcoin_test_check: $(TEST_BINARY) FORCE\n \t$(MAKE) check-TESTS TESTS=$^\n@@ -186,19 +162,10 @@ bitcoin_test_clean : FORCE\n \trm -f $(CLEAN_BITCOIN_TEST) $(test_test_bitcoin_OBJECTS) $(TEST_BINARY)\n \n check-local: $(BITCOIN_TESTS:.cpp=.cpp.test)\n-if BUILD_BITCOIN_TX\n \t@echo \"Running test/util/bitcoin-util-test.py...\"\n \t$(PYTHON) $(top_builddir)/test/util/bitcoin-util-test.py\n-endif\n \t@echo \"Running test/util/rpcauth-test.py...\"\n \t$(PYTHON) $(top_builddir)/test/util/rpcauth-test.py\n-if TARGET_WINDOWS\n-else\n-if ENABLE_BENCH\n-\t@echo \"Running bench/bench_bitcoin -evals=1 -scaling=0...\"\n-\t$(BENCH_BINARY) -evals=1 -scaling=0 > /dev/null\n-endif\n-endif\n \t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C secp256k1 check\n if EMBEDDED_UNIVALUE\n \t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C univalue check"
      },
      {
        "sha": "3eae2b512782d1e7b7b12a834c07b59bdda34c1b",
        "filename": "src/addrdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/addrdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/addrdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -12,7 +12,7 @@\n #include <random.h>\n #include <streams.h>\n #include <tinyformat.h>\n-#include <util/system.h>\n+#include <util.h>\n \n namespace {\n "
      },
      {
        "sha": "093b263ab39f31f62d2dcb2ea3749205839be2bb",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 16,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -11,22 +11,22 @@\n \n int CAddrInfo::GetTriedBucket(const uint256& nKey) const\n {\n-    uint64_t hash1 = (CHashWriter(SER_GETHASH, 0) << nKey << GetKey()).GetCheapHash();\n-    uint64_t hash2 = (CHashWriter(SER_GETHASH, 0) << nKey << GetGroup() << (hash1 % ADDRMAN_TRIED_BUCKETS_PER_GROUP)).GetCheapHash();\n+    uint64_t hash1 = (CHashWriter(SER_GETHASH, 0) << nKey << GetKey()).GetHash().GetCheapHash();\n+    uint64_t hash2 = (CHashWriter(SER_GETHASH, 0) << nKey << GetGroup() << (hash1 % ADDRMAN_TRIED_BUCKETS_PER_GROUP)).GetHash().GetCheapHash();\n     return hash2 % ADDRMAN_TRIED_BUCKET_COUNT;\n }\n \n int CAddrInfo::GetNewBucket(const uint256& nKey, const CNetAddr& src) const\n {\n     std::vector<unsigned char> vchSourceGroupKey = src.GetGroup();\n-    uint64_t hash1 = (CHashWriter(SER_GETHASH, 0) << nKey << GetGroup() << vchSourceGroupKey).GetCheapHash();\n-    uint64_t hash2 = (CHashWriter(SER_GETHASH, 0) << nKey << vchSourceGroupKey << (hash1 % ADDRMAN_NEW_BUCKETS_PER_SOURCE_GROUP)).GetCheapHash();\n+    uint64_t hash1 = (CHashWriter(SER_GETHASH, 0) << nKey << GetGroup() << vchSourceGroupKey).GetHash().GetCheapHash();\n+    uint64_t hash2 = (CHashWriter(SER_GETHASH, 0) << nKey << vchSourceGroupKey << (hash1 % ADDRMAN_NEW_BUCKETS_PER_SOURCE_GROUP)).GetHash().GetCheapHash();\n     return hash2 % ADDRMAN_NEW_BUCKET_COUNT;\n }\n \n int CAddrInfo::GetBucketPosition(const uint256 &nKey, bool fNew, int nBucket) const\n {\n-    uint64_t hash1 = (CHashWriter(SER_GETHASH, 0) << nKey << (fNew ? 'N' : 'K') << nBucket << GetKey()).GetCheapHash();\n+    uint64_t hash1 = (CHashWriter(SER_GETHASH, 0) << nKey << (fNew ? 'N' : 'K') << nBucket << GetKey()).GetHash().GetCheapHash();\n     return hash1 % ADDRMAN_BUCKET_SIZE;\n }\n \n@@ -217,7 +217,7 @@ void CAddrMan::Good_(const CService& addr, bool test_before_evict, int64_t nTime\n         return;\n \n     // find a bucket it is in now\n-    int nRnd = insecure_rand.randrange(ADDRMAN_NEW_BUCKET_COUNT);\n+    int nRnd = RandomInt(ADDRMAN_NEW_BUCKET_COUNT);\n     int nUBucket = -1;\n     for (unsigned int n = 0; n < ADDRMAN_NEW_BUCKET_COUNT; n++) {\n         int nB = (n + nRnd) % ADDRMAN_NEW_BUCKET_COUNT;\n@@ -291,7 +291,7 @@ bool CAddrMan::Add_(const CAddress& addr, const CNetAddr& source, int64_t nTimeP\n         int nFactor = 1;\n         for (int n = 0; n < pinfo->nRefCount; n++)\n             nFactor *= 2;\n-        if (nFactor > 1 && (insecure_rand.randrange(nFactor) != 0))\n+        if (nFactor > 1 && (RandomInt(nFactor) != 0))\n             return false;\n     } else {\n         pinfo = Create(addr, source, &nId);\n@@ -356,37 +356,37 @@ CAddrInfo CAddrMan::Select_(bool newOnly)\n \n     // Use a 50% chance for choosing between tried and new table entries.\n     if (!newOnly &&\n-       (nTried > 0 && (nNew == 0 || insecure_rand.randbool() == 0))) {\n+       (nTried > 0 && (nNew == 0 || RandomInt(2) == 0))) {\n         // use a tried node\n         double fChanceFactor = 1.0;\n         while (1) {\n-            int nKBucket = insecure_rand.randrange(ADDRMAN_TRIED_BUCKET_COUNT);\n-            int nKBucketPos = insecure_rand.randrange(ADDRMAN_BUCKET_SIZE);\n+            int nKBucket = RandomInt(ADDRMAN_TRIED_BUCKET_COUNT);\n+            int nKBucketPos = RandomInt(ADDRMAN_BUCKET_SIZE);\n             while (vvTried[nKBucket][nKBucketPos] == -1) {\n                 nKBucket = (nKBucket + insecure_rand.randbits(ADDRMAN_TRIED_BUCKET_COUNT_LOG2)) % ADDRMAN_TRIED_BUCKET_COUNT;\n                 nKBucketPos = (nKBucketPos + insecure_rand.randbits(ADDRMAN_BUCKET_SIZE_LOG2)) % ADDRMAN_BUCKET_SIZE;\n             }\n             int nId = vvTried[nKBucket][nKBucketPos];\n             assert(mapInfo.count(nId) == 1);\n             CAddrInfo& info = mapInfo[nId];\n-            if (insecure_rand.randbits(30) < fChanceFactor * info.GetChance() * (1 << 30))\n+            if (RandomInt(1 << 30) < fChanceFactor * info.GetChance() * (1 << 30))\n                 return info;\n             fChanceFactor *= 1.2;\n         }\n     } else {\n         // use a new node\n         double fChanceFactor = 1.0;\n         while (1) {\n-            int nUBucket = insecure_rand.randrange(ADDRMAN_NEW_BUCKET_COUNT);\n-            int nUBucketPos = insecure_rand.randrange(ADDRMAN_BUCKET_SIZE);\n+            int nUBucket = RandomInt(ADDRMAN_NEW_BUCKET_COUNT);\n+            int nUBucketPos = RandomInt(ADDRMAN_BUCKET_SIZE);\n             while (vvNew[nUBucket][nUBucketPos] == -1) {\n                 nUBucket = (nUBucket + insecure_rand.randbits(ADDRMAN_NEW_BUCKET_COUNT_LOG2)) % ADDRMAN_NEW_BUCKET_COUNT;\n                 nUBucketPos = (nUBucketPos + insecure_rand.randbits(ADDRMAN_BUCKET_SIZE_LOG2)) % ADDRMAN_BUCKET_SIZE;\n             }\n             int nId = vvNew[nUBucket][nUBucketPos];\n             assert(mapInfo.count(nId) == 1);\n             CAddrInfo& info = mapInfo[nId];\n-            if (insecure_rand.randbits(30) < fChanceFactor * info.GetChance() * (1 << 30))\n+            if (RandomInt(1 << 30) < fChanceFactor * info.GetChance() * (1 << 30))\n                 return info;\n             fChanceFactor *= 1.2;\n         }\n@@ -482,7 +482,7 @@ void CAddrMan::GetAddr_(std::vector<CAddress>& vAddr)\n         if (vAddr.size() >= nNodes)\n             break;\n \n-        int nRndPos = insecure_rand.randrange(vRandom.size() - n) + n;\n+        int nRndPos = RandomInt(vRandom.size() - n) + n;\n         SwapRandom(n, nRndPos);\n         assert(mapInfo.count(vRandom[n]) == 1);\n \n@@ -530,6 +530,10 @@ void CAddrMan::SetServices_(const CService& addr, ServiceFlags nServices)\n     info.nServices = nServices;\n }\n \n+int CAddrMan::RandomInt(int nMax){\n+    return GetRandInt(nMax);\n+}\n+\n void CAddrMan::ResolveCollisions_()\n {\n     for (std::set<int>::iterator it = m_tried_collisions.begin(); it != m_tried_collisions.end();) {\n@@ -589,7 +593,7 @@ CAddrInfo CAddrMan::SelectTriedCollision_()\n     std::set<int>::iterator it = m_tried_collisions.begin();\n \n     // Selects a random element from m_tried_collisions\n-    std::advance(it, insecure_rand.randrange(m_tried_collisions.size()));\n+    std::advance(it, GetRandInt(m_tried_collisions.size()));\n     int id_new = *it;\n \n     // If id_new not found in mapInfo remove it from m_tried_collisions"
      },
      {
        "sha": "d8a2a263a5fc1b0a0f313231d99756c7ea5e0470",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 32,
        "deletions": 29,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -11,7 +11,7 @@\n #include <random.h>\n #include <sync.h>\n #include <timedata.h>\n-#include <util/system.h>\n+#include <util.h>\n \n #include <map>\n #include <set>\n@@ -187,37 +187,36 @@ class CAddrInfo : public CAddress\n  */\n class CAddrMan\n {\n-protected:\n+private:\n     //! critical section to protect the inner data structures\n     mutable CCriticalSection cs;\n \n-private:\n     //! last used nId\n-    int nIdCount GUARDED_BY(cs);\n+    int nIdCount;\n \n     //! table with information about all nIds\n-    std::map<int, CAddrInfo> mapInfo GUARDED_BY(cs);\n+    std::map<int, CAddrInfo> mapInfo;\n \n     //! find an nId based on its network address\n-    std::map<CNetAddr, int> mapAddr GUARDED_BY(cs);\n+    std::map<CNetAddr, int> mapAddr;\n \n     //! randomly-ordered vector of all nIds\n-    std::vector<int> vRandom GUARDED_BY(cs);\n+    std::vector<int> vRandom;\n \n     // number of \"tried\" entries\n-    int nTried GUARDED_BY(cs);\n+    int nTried;\n \n     //! list of \"tried\" buckets\n-    int vvTried[ADDRMAN_TRIED_BUCKET_COUNT][ADDRMAN_BUCKET_SIZE] GUARDED_BY(cs);\n+    int vvTried[ADDRMAN_TRIED_BUCKET_COUNT][ADDRMAN_BUCKET_SIZE];\n \n     //! number of (unique) \"new\" entries\n-    int nNew GUARDED_BY(cs);\n+    int nNew;\n \n     //! list of \"new\" buckets\n-    int vvNew[ADDRMAN_NEW_BUCKET_COUNT][ADDRMAN_BUCKET_SIZE] GUARDED_BY(cs);\n+    int vvNew[ADDRMAN_NEW_BUCKET_COUNT][ADDRMAN_BUCKET_SIZE];\n \n     //! last time Good was called (memory only)\n-    int64_t nLastGood GUARDED_BY(cs);\n+    int64_t nLastGood;\n \n     //! Holds addrs inserted into tried table that collide with existing entries. Test-before-evict discipline used to resolve these collisions.\n     std::set<int> m_tried_collisions;\n@@ -230,55 +229,58 @@ class CAddrMan\n     FastRandomContext insecure_rand;\n \n     //! Find an entry.\n-    CAddrInfo* Find(const CNetAddr& addr, int *pnId = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    CAddrInfo* Find(const CNetAddr& addr, int *pnId = nullptr);\n \n     //! find an entry, creating it if necessary.\n     //! nTime and nServices of the found node are updated, if necessary.\n-    CAddrInfo* Create(const CAddress &addr, const CNetAddr &addrSource, int *pnId = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    CAddrInfo* Create(const CAddress &addr, const CNetAddr &addrSource, int *pnId = nullptr);\n \n     //! Swap two elements in vRandom.\n-    void SwapRandom(unsigned int nRandomPos1, unsigned int nRandomPos2) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    void SwapRandom(unsigned int nRandomPos1, unsigned int nRandomPos2);\n \n     //! Move an entry from the \"new\" table(s) to the \"tried\" table\n-    void MakeTried(CAddrInfo& info, int nId) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    void MakeTried(CAddrInfo& info, int nId);\n \n     //! Delete an entry. It must not be in tried, and have refcount 0.\n-    void Delete(int nId) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    void Delete(int nId);\n \n     //! Clear a position in a \"new\" table. This is the only place where entries are actually deleted.\n-    void ClearNew(int nUBucket, int nUBucketPos) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    void ClearNew(int nUBucket, int nUBucketPos);\n \n     //! Mark an entry \"good\", possibly moving it from \"new\" to \"tried\".\n-    void Good_(const CService &addr, bool test_before_evict, int64_t time) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    void Good_(const CService &addr, bool test_before_evict, int64_t time);\n \n     //! Add an entry to the \"new\" table.\n-    bool Add_(const CAddress &addr, const CNetAddr& source, int64_t nTimePenalty) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    bool Add_(const CAddress &addr, const CNetAddr& source, int64_t nTimePenalty);\n \n     //! Mark an entry as attempted to connect.\n-    void Attempt_(const CService &addr, bool fCountFailure, int64_t nTime) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    void Attempt_(const CService &addr, bool fCountFailure, int64_t nTime);\n \n     //! Select an address to connect to, if newOnly is set to true, only the new table is selected from.\n-    CAddrInfo Select_(bool newOnly) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    CAddrInfo Select_(bool newOnly);\n \n     //! See if any to-be-evicted tried table entries have been tested and if so resolve the collisions.\n-    void ResolveCollisions_() EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    void ResolveCollisions_();\n \n     //! Return a random to-be-evicted tried table address.\n-    CAddrInfo SelectTriedCollision_() EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    CAddrInfo SelectTriedCollision_();\n+\n+    //! Wraps GetRandInt to allow tests to override RandomInt and make it determinismistic.\n+    virtual int RandomInt(int nMax);\n \n #ifdef DEBUG_ADDRMAN\n     //! Perform consistency check. Returns an error code or zero.\n-    int Check_() EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    int Check_();\n #endif\n \n     //! Select several addresses at once.\n-    void GetAddr_(std::vector<CAddress> &vAddr) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    void GetAddr_(std::vector<CAddress> &vAddr);\n \n     //! Mark an entry as currently-connected-to.\n-    void Connected_(const CService &addr, int64_t nTime) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    void Connected_(const CService &addr, int64_t nTime);\n \n     //! Update an entry's service bits.\n-    void SetServices_(const CService &addr, ServiceFlags nServices) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    void SetServices_(const CService &addr, ServiceFlags nServices);\n \n public:\n     /**\n@@ -470,7 +472,7 @@ class CAddrMan\n     {\n         LOCK(cs);\n         std::vector<int>().swap(vRandom);\n-        nKey = insecure_rand.rand256();\n+        nKey = GetRandHash();\n         for (size_t bucket = 0; bucket < ADDRMAN_NEW_BUCKET_COUNT; bucket++) {\n             for (size_t entry = 0; entry < ADDRMAN_BUCKET_SIZE; entry++) {\n                 vvNew[bucket][entry] = -1;\n@@ -545,6 +547,7 @@ class CAddrMan\n         Check();\n         if (nAdd) {\n             LogPrint(BCLog::ADDRMAN, \"Added %i addresses from %s: %i tried, %i new\\n\", nAdd, source.ToString(), nTried, nNew);\n+            printf(\"Added %i addresses from %s: %i tried, %i new\\n\", nAdd, source.ToString().c_str(), nTried, nNew);\n         }\n         return nAdd > 0;\n     }"
      },
      {
        "sha": "3ce79c62bd27f997569e927a1f740fce6f0abe8a",
        "filename": "src/amount.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/amount.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/amount.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/amount.h?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -12,17 +12,18 @@\n typedef int64_t CAmount;\n \n static const CAmount COIN = 100000000;\n+static const CAmount CENT = 1000000;\n \n /** No amount larger than this (in satoshi) is valid.\n  *\n  * Note that this constant is *not* the total money supply, which in Bitcoin\n- * currently happens to be less than 21,000,000 BTC for various reasons, but\n+ * currently happens to be less than 21,000,000,000 BTCV for various reasons, but\n  * rather a sanity check. As this sanity check is used by consensus-critical\n  * validation code, the exact value of the MAX_MONEY constant is consensus\n  * critical; in unusual circumstances like a(nother) overflow bug that allowed\n  * for the creation of coins out of thin air modification could lead to a fork.\n  * */\n-static const CAmount MAX_MONEY = 21000000 * COIN;\n+static const CAmount MAX_MONEY = 21000000000 * COIN;\n inline bool MoneyRange(const CAmount& nValue) { return (nValue >= 0 && nValue <= MAX_MONEY); }\n \n #endif //  BITCOIN_AMOUNT_H"
      },
      {
        "sha": "600c7e0f6196fd6cc9fa6ba298047bdf10236ec8",
        "filename": "src/arith_uint256.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/arith_uint256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/arith_uint256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/arith_uint256.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -1,3 +1,4 @@\n+// Copyright (c) 2018 The BitcoinV Core developers\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2018 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n@@ -6,7 +7,7 @@\n #include <arith_uint256.h>\n \n #include <uint256.h>\n-#include <util/strencodings.h>\n+#include <utilstrencodings.h>\n #include <crypto/common.h>\n \n #include <stdio.h>\n@@ -176,7 +177,7 @@ unsigned int base_uint<BITS>::bits() const\n     for (int pos = WIDTH - 1; pos >= 0; pos--) {\n         if (pn[pos]) {\n             for (int nbits = 31; nbits > 0; nbits--) {\n-                if (pn[pos] & 1U << nbits)\n+                if (pn[pos] & 1 << nbits)\n                     return 32 * pos + nbits + 1;\n             }\n             return 32 * pos + 1;\n@@ -260,3 +261,8 @@ arith_uint256 UintToArith256(const uint256 &a)\n         b.pn[x] = ReadLE32(a.begin() + x*4);\n     return b;\n }\n+\n+uint32_t get_32bit_word_from_uint256(const uint256 &a)\n+{\n+    return ReadLE32(a.begin());\n+}"
      },
      {
        "sha": "bb2a2f8438e834a3772b0a3f8993025dbdaca163",
        "filename": "src/arith_uint256.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/arith_uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/arith_uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/arith_uint256.h?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -1,3 +1,4 @@\n+// Copyright (c) 2018 The BitcoinV Core developers\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2018 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n@@ -8,7 +9,6 @@\n \n #include <assert.h>\n #include <cstring>\n-#include <limits>\n #include <stdexcept>\n #include <stdint.h>\n #include <string>\n@@ -190,7 +190,7 @@ class base_uint\n     {\n         // prefix operator\n         int i = 0;\n-        while (i < WIDTH && --pn[i] == std::numeric_limits<uint32_t>::max())\n+        while (i < WIDTH && --pn[i] == (uint32_t)-1)\n             i++;\n         return *this;\n     }\n@@ -286,4 +286,6 @@ class arith_uint256 : public base_uint<256> {\n uint256 ArithToUint256(const arith_uint256 &);\n arith_uint256 UintToArith256(const uint256 &);\n \n+uint32_t get_32bit_word_from_uint256(const uint256 &a);\n+\n #endif // BITCOIN_ARITH_UINT256_H"
      },
      {
        "sha": "45099bd8b88025cb1e77bc6648f086660bf025dc",
        "filename": "src/attributes.h",
        "status": "removed",
        "additions": 0,
        "deletions": 22,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/src/attributes.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/src/attributes.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/attributes.h?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "patch": "@@ -1,22 +0,0 @@\n-// Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2018 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_ATTRIBUTES_H\n-#define BITCOIN_ATTRIBUTES_H\n-\n-#if defined(__has_cpp_attribute)\n-#  if __has_cpp_attribute(nodiscard)\n-#    define NODISCARD [[nodiscard]]\n-#  endif\n-#endif\n-#ifndef NODISCARD\n-#  if defined(_MSC_VER) && _MSC_VER >= 1700\n-#    define NODISCARD _Check_return_\n-#  else\n-#    define NODISCARD __attribute__((warn_unused_result))\n-#  endif\n-#endif\n-\n-#endif // BITCOIN_ATTRIBUTES_H"
      },
      {
        "sha": "7020c240553282a57605114667e381c19d403d35",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -6,7 +6,6 @@\n \n #include <hash.h>\n #include <uint256.h>\n-#include <util/strencodings.h>\n \n #include <assert.h>\n #include <string.h>\n@@ -35,7 +34,7 @@ static const int8_t mapBase58[256] = {\n bool DecodeBase58(const char* psz, std::vector<unsigned char>& vch)\n {\n     // Skip leading spaces.\n-    while (*psz && IsSpace(*psz))\n+    while (*psz && isspace(*psz))\n         psz++;\n     // Skip and count leading '1's.\n     int zeroes = 0;\n@@ -49,7 +48,7 @@ bool DecodeBase58(const char* psz, std::vector<unsigned char>& vch)\n     std::vector<unsigned char> b256(size);\n     // Process the characters.\n     static_assert(sizeof(mapBase58)/sizeof(mapBase58[0]) == 256, \"mapBase58.size() should be 256\"); // guarantee not out of range\n-    while (*psz && !IsSpace(*psz)) {\n+    while (*psz && !isspace(*psz)) {\n         // Decode base58 character\n         int carry = mapBase58[(uint8_t)*psz];\n         if (carry == -1)  // Invalid b58 character\n@@ -65,7 +64,7 @@ bool DecodeBase58(const char* psz, std::vector<unsigned char>& vch)\n         psz++;\n     }\n     // Skip trailing spaces.\n-    while (IsSpace(*psz))\n+    while (isspace(*psz))\n         psz++;\n     if (*psz != 0)\n         return false;"
      },
      {
        "sha": "9d3f90652ea85692c99f042d4d233c5ae68ad8cd",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -14,8 +14,6 @@\n #ifndef BITCOIN_BASE58_H\n #define BITCOIN_BASE58_H\n \n-#include <attributes.h>\n-\n #include <string>\n #include <vector>\n \n@@ -35,13 +33,13 @@ std::string EncodeBase58(const std::vector<unsigned char>& vch);\n  * return true if decoding is successful.\n  * psz cannot be nullptr.\n  */\n-NODISCARD bool DecodeBase58(const char* psz, std::vector<unsigned char>& vchRet);\n+bool DecodeBase58(const char* psz, std::vector<unsigned char>& vchRet);\n \n /**\n  * Decode a base58-encoded string (str) into a byte vector (vchRet).\n  * return true if decoding is successful.\n  */\n-NODISCARD bool DecodeBase58(const std::string& str, std::vector<unsigned char>& vchRet);\n+bool DecodeBase58(const std::string& str, std::vector<unsigned char>& vchRet);\n \n /**\n  * Encode a byte vector into a base58-encoded string, including checksum\n@@ -52,12 +50,12 @@ std::string EncodeBase58Check(const std::vector<unsigned char>& vchIn);\n  * Decode a base58-encoded string (psz) that includes a checksum into a byte\n  * vector (vchRet), return true if decoding is successful\n  */\n-NODISCARD bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet);\n+bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet);\n \n /**\n  * Decode a base58-encoded string (str) that includes a checksum into a byte\n  * vector (vchRet), return true if decoding is successful\n  */\n-NODISCARD bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet);\n+bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet);\n \n #endif // BITCOIN_BASE58_H"
      },
      {
        "sha": "c55f22b9b75f1aa2ee6e5403aacd8b261daae943",
        "filename": "src/bech32.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/bech32.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/bech32.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bech32.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -62,7 +62,7 @@ uint32_t PolyMod(const data& v)\n     // v, it corresponds to x^2 + v0*x + v1 mod g(x). As 1 mod g(x) = 1, that is the starting value\n     // for `c`.\n     uint32_t c = 1;\n-    for (const auto v_i : v) {\n+    for (auto v_i : v) {\n         // We want to update `c` to correspond to a polynomial with one extra term. If the initial\n         // value of `c` consists of the coefficients of c(x) = f(x) mod g(x), we modify it to\n         // correspond to c'(x) = (f(x) * x + v_i) mod g(x), where v_i is the next input to\n@@ -149,7 +149,7 @@ std::string Encode(const std::string& hrp, const data& values) {\n     data combined = Cat(values, checksum);\n     std::string ret = hrp + '1';\n     ret.reserve(ret.size() + combined.size());\n-    for (const auto c : combined) {\n+    for (auto c : combined) {\n         ret += CHARSET[c];\n     }\n     return ret;"
      },
      {
        "sha": "a555376e401b8c86cefe61399438915cdf66c63d",
        "filename": "src/bench/base58.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/bench/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/bench/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/base58.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -49,7 +49,7 @@ static void Base58Decode(benchmark::State& state)\n     const char* addr = \"17VZNX1SN5NtKa8UQFxwQbFeFc3iqRYhem\";\n     std::vector<unsigned char> vch;\n     while (state.KeepRunning()) {\n-        (void) DecodeBase58(addr, vch);\n+        DecodeBase58(addr, vch);\n     }\n }\n "
      },
      {
        "sha": "8b80e173918c566f3e7c5a7626e12532e71db764",
        "filename": "src/bench/bech32.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/bench/bech32.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/bench/bech32.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bech32.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -6,7 +6,7 @@\n \n #include <validation.h>\n #include <bech32.h>\n-#include <util/strencodings.h>\n+#include <utilstrencodings.h>\n \n #include <vector>\n #include <string>"
      },
      {
        "sha": "603b858e544286709eeb10eb4d4c16df8a1026ed",
        "filename": "src/bench/bench_bitcoin.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/bench/bench_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/bench/bench_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench_bitcoin.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -7,14 +7,12 @@\n #include <crypto/sha256.h>\n #include <key.h>\n #include <random.h>\n-#include <util/system.h>\n-#include <util/strencodings.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n #include <validation.h>\n \n #include <memory>\n \n-const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n-\n static const int64_t DEFAULT_BENCH_EVALUATIONS = 5;\n static const char* DEFAULT_BENCH_FILTER = \".*\";\n static const char* DEFAULT_BENCH_SCALING = \"1.0\";\n@@ -82,7 +80,7 @@ int main(int argc, char** argv)\n         return EXIT_FAILURE;\n     }\n \n-    std::unique_ptr<benchmark::Printer> printer = MakeUnique<benchmark::ConsolePrinter>();\n+    std::unique_ptr<benchmark::Printer> printer(new benchmark::ConsolePrinter());\n     std::string printer_arg = gArgs.GetArg(\"-printer\", DEFAULT_BENCH_PRINTER);\n     if (\"plot\" == printer_arg) {\n         printer.reset(new benchmark::PlotlyPrinter("
      },
      {
        "sha": "804120961500c5b8a83a8a1c2a63c3c9061142e6",
        "filename": "src/bench/block_assemble.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/bench/block_assemble.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/bench/block_assemble.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/block_assemble.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -7,14 +7,13 @@\n #include <coins.h>\n #include <consensus/merkle.h>\n #include <consensus/validation.h>\n-#include <crypto/sha256.h>\n #include <miner.h>\n #include <policy/policy.h>\n #include <pow.h>\n #include <scheduler.h>\n #include <txdb.h>\n #include <txmempool.h>\n-#include <util/time.h>\n+#include <utiltime.h>\n #include <validation.h>\n #include <validationinterface.h>\n \n@@ -27,7 +26,7 @@ static std::shared_ptr<CBlock> PrepareBlock(const CScript& coinbase_scriptPubKey\n {\n     auto block = std::make_shared<CBlock>(\n         BlockAssembler{Params()}\n-            .CreateNewBlock(coinbase_scriptPubKey)\n+            .CreateNewBlock(coinbase_scriptPubKey, /* fMineWitnessTx */ true)\n             ->block);\n \n     block->nTime = ::chainActive.Tip()->GetMedianTimePast() + 1;\n@@ -42,8 +41,7 @@ static CTxIn MineBlock(const CScript& coinbase_scriptPubKey)\n     auto block = PrepareBlock(coinbase_scriptPubKey);\n \n     while (!CheckProofOfWork(block->GetHash(), block->nBits, Params().GetConsensus())) {\n-        ++block->nNonce;\n-        assert(block->nNonce);\n+        assert(++block->nNonce);\n     }\n \n     bool processed{ProcessNewBlock(Params(), block, true, nullptr)};\n@@ -78,7 +76,7 @@ static void AssembleBlock(benchmark::State& state)\n         ::pcoinsTip.reset(new CCoinsViewCache(pcoinsdbview.get()));\n \n         const CChainParams& chainparams = Params();\n-        thread_group.create_thread(std::bind(&CScheduler::serviceQueue, &scheduler));\n+        thread_group.create_thread(boost::bind(&CScheduler::serviceQueue, &scheduler));\n         GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n         LoadGenesisBlock(chainparams);\n         CValidationState state;"
      },
      {
        "sha": "db303eeead0650c44d9a49213f29ca5b647693bf",
        "filename": "src/bench/ccoins_caching.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 13,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/bench/ccoins_caching.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/bench/ccoins_caching.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/ccoins_caching.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -12,8 +12,8 @@\n // FIXME: Dedup with SetupDummyInputs in test/transaction_tests.cpp.\n //\n // Helper: create two dummy transactions, each with\n-// two outputs.  The first has 11 and 50 COIN outputs\n-// paid to a TX_PUBKEY, the second 21 and 22 COIN outputs\n+// two outputs.  The first has 11 and 50 CENT outputs\n+// paid to a TX_PUBKEY, the second 21 and 22 CENT outputs\n // paid to a TX_PUBKEYHASH.\n //\n static std::vector<CMutableTransaction>\n@@ -31,18 +31,18 @@ SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsViewCache& coinsRet)\n \n     // Create some dummy input transactions\n     dummyTransactions[0].vout.resize(2);\n-    dummyTransactions[0].vout[0].nValue = 11 * COIN;\n+    dummyTransactions[0].vout[0].nValue = 11 * CENT;\n     dummyTransactions[0].vout[0].scriptPubKey << ToByteVector(key[0].GetPubKey()) << OP_CHECKSIG;\n-    dummyTransactions[0].vout[1].nValue = 50 * COIN;\n+    dummyTransactions[0].vout[1].nValue = 50 * CENT;\n     dummyTransactions[0].vout[1].scriptPubKey << ToByteVector(key[1].GetPubKey()) << OP_CHECKSIG;\n-    AddCoins(coinsRet, CTransaction(dummyTransactions[0]), 0);\n+    AddCoins(coinsRet, dummyTransactions[0], 0);\n \n     dummyTransactions[1].vout.resize(2);\n-    dummyTransactions[1].vout[0].nValue = 21 * COIN;\n+    dummyTransactions[1].vout[0].nValue = 21 * CENT;\n     dummyTransactions[1].vout[0].scriptPubKey = GetScriptForDestination(key[2].GetPubKey().GetID());\n-    dummyTransactions[1].vout[1].nValue = 22 * COIN;\n+    dummyTransactions[1].vout[1].nValue = 22 * CENT;\n     dummyTransactions[1].vout[1].scriptPubKey = GetScriptForDestination(key[3].GetPubKey().GetID());\n-    AddCoins(coinsRet, CTransaction(dummyTransactions[1]), 0);\n+    AddCoins(coinsRet, dummyTransactions[1], 0);\n \n     return dummyTransactions;\n }\n@@ -72,16 +72,15 @@ static void CCoinsCaching(benchmark::State& state)\n     t1.vin[2].prevout.n = 1;\n     t1.vin[2].scriptSig << std::vector<unsigned char>(65, 0) << std::vector<unsigned char>(33, 4);\n     t1.vout.resize(2);\n-    t1.vout[0].nValue = 90 * COIN;\n+    t1.vout[0].nValue = 90 * CENT;\n     t1.vout[0].scriptPubKey << OP_1;\n \n     // Benchmark.\n-    const CTransaction tx_1(t1);\n     while (state.KeepRunning()) {\n-        bool success = AreInputsStandard(tx_1, coins);\n+        bool success = AreInputsStandard(t1, coins);\n         assert(success);\n-        CAmount value = coins.GetValueIn(tx_1);\n-        assert(value == (50 + 21 + 22) * COIN);\n+        CAmount value = coins.GetValueIn(t1);\n+        assert(value == (50 + 21 + 22) * CENT);\n     }\n }\n "
      },
      {
        "sha": "acbb72257bccb23936d69718445efd6c1f007c9b",
        "filename": "src/bench/checkblock.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 8,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/bench/checkblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/bench/checkblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/checkblock.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -20,23 +20,22 @@ namespace block_bench {\n static void DeserializeBlockTest(benchmark::State& state)\n {\n     CDataStream stream((const char*)block_bench::block413567,\n-            (const char*)block_bench::block413567 + sizeof(block_bench::block413567),\n+            (const char*)&block_bench::block413567[sizeof(block_bench::block413567)],\n             SER_NETWORK, PROTOCOL_VERSION);\n     char a = '\\0';\n     stream.write(&a, 1); // Prevent compaction\n \n     while (state.KeepRunning()) {\n         CBlock block;\n         stream >> block;\n-        bool rewound = stream.Rewind(sizeof(block_bench::block413567));\n-        assert(rewound);\n+        assert(stream.Rewind(sizeof(block_bench::block413567)));\n     }\n }\n \n static void DeserializeAndCheckBlockTest(benchmark::State& state)\n {\n     CDataStream stream((const char*)block_bench::block413567,\n-            (const char*)block_bench::block413567 + sizeof(block_bench::block413567),\n+            (const char*)&block_bench::block413567[sizeof(block_bench::block413567)],\n             SER_NETWORK, PROTOCOL_VERSION);\n     char a = '\\0';\n     stream.write(&a, 1); // Prevent compaction\n@@ -46,12 +45,10 @@ static void DeserializeAndCheckBlockTest(benchmark::State& state)\n     while (state.KeepRunning()) {\n         CBlock block; // Note that CBlock caches its checked state, so we need to recreate it here\n         stream >> block;\n-        bool rewound = stream.Rewind(sizeof(block_bench::block413567));\n-        assert(rewound);\n+        assert(stream.Rewind(sizeof(block_bench::block413567)));\n \n         CValidationState validationState;\n-        bool checked = CheckBlock(block, validationState, chainParams->GetConsensus());\n-        assert(checked);\n+        assert(CheckBlock(block, validationState, chainParams->GetConsensus()));\n     }\n }\n "
      },
      {
        "sha": "79689f6e0bb7f0c73f124087284266a5375aba90",
        "filename": "src/bench/checkqueue.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/bench/checkqueue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/bench/checkqueue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/checkqueue.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -3,7 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <bench/bench.h>\n-#include <util/system.h>\n+#include <util.h>\n #include <validation.h>\n #include <checkqueue.h>\n #include <prevector.h>"
      },
      {
        "sha": "0a6f5d85eaeec7f39fada3912912e79d2192ac88",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 21,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -3,20 +3,25 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <bench/bench.h>\n-#include <interfaces/chain.h>\n-#include <wallet/coinselection.h>\n #include <wallet/wallet.h>\n+#include <wallet/coinselection.h>\n \n #include <set>\n \n-static void addCoin(const CAmount& nValue, const CWallet& wallet, std::vector<std::unique_ptr<CWalletTx>>& wtxs)\n+static void addCoin(const CAmount& nValue, const CWallet& wallet, std::vector<OutputGroup>& groups)\n {\n+    int nInput = 0;\n+\n     static int nextLockTime = 0;\n     CMutableTransaction tx;\n     tx.nLockTime = nextLockTime++; // so all transactions get different hashes\n-    tx.vout.resize(1);\n-    tx.vout[0].nValue = nValue;\n-    wtxs.push_back(MakeUnique<CWalletTx>(&wallet, MakeTransactionRef(std::move(tx))));\n+    tx.vout.resize(nInput + 1);\n+    tx.vout[nInput].nValue = nValue;\n+    CWalletTx* wtx = new CWalletTx(&wallet, MakeTransactionRef(std::move(tx)));\n+\n+    int nAge = 6 * 24;\n+    COutput output(wtx, nInput, nAge, true /* spendable */, true /* solvable */, true /* safe */);\n+    groups.emplace_back(output.GetInputCoin(), 6, false, 0, 0);\n }\n \n // Simple benchmark for wallet coin selection. Note that it maybe be necessary\n@@ -28,23 +33,15 @@ static void addCoin(const CAmount& nValue, const CWallet& wallet, std::vector<st\n // (https://github.com/bitcoin/bitcoin/issues/7883#issuecomment-224807484)\n static void CoinSelection(benchmark::State& state)\n {\n-    auto chain = interfaces::MakeChain();\n-    const CWallet wallet(*chain, WalletLocation(), WalletDatabase::CreateDummy());\n-    std::vector<std::unique_ptr<CWalletTx>> wtxs;\n+    const CWallet wallet(\"dummy\", WalletDatabase::CreateDummy());\n     LOCK(wallet.cs_wallet);\n \n     // Add coins.\n-    for (int i = 0; i < 1000; ++i) {\n-        addCoin(1000 * COIN, wallet, wtxs);\n-    }\n-    addCoin(3 * COIN, wallet, wtxs);\n-\n-    // Create groups\n     std::vector<OutputGroup> groups;\n-    for (const auto& wtx : wtxs) {\n-        COutput output(wtx.get(), 0 /* iIn */, 6 * 24 /* nDepthIn */, true /* spendable */, true /* solvable */, true /* safe */);\n-        groups.emplace_back(output.GetInputCoin(), 6, false, 0, 0);\n+    for (int i = 0; i < 1000; ++i) {\n+        addCoin(1000 * COIN, wallet, groups);\n     }\n+    addCoin(3 * COIN, wallet, groups);\n \n     const CoinEligibilityFilter filter_standard(1, 6, 0);\n     const CoinSelectionParams coin_selection_params(true, 34, 148, CFeeRate(0), 0);\n@@ -60,8 +57,7 @@ static void CoinSelection(benchmark::State& state)\n }\n \n typedef std::set<CInputCoin> CoinSet;\n-static auto testChain = interfaces::MakeChain();\n-static const CWallet testWallet(*testChain, WalletLocation(), WalletDatabase::CreateDummy());\n+static const CWallet testWallet(\"dummy\", WalletDatabase::CreateDummy());\n std::vector<std::unique_ptr<CWalletTx>> wtxn;\n \n // Copied from src/wallet/test/coinselector_tests.cpp\n@@ -70,7 +66,7 @@ static void add_coin(const CAmount& nValue, int nInput, std::vector<OutputGroup>\n     CMutableTransaction tx;\n     tx.vout.resize(nInput + 1);\n     tx.vout[nInput].nValue = nValue;\n-    std::unique_ptr<CWalletTx> wtx = MakeUnique<CWalletTx>(&testWallet, MakeTransactionRef(std::move(tx)));\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n     set.emplace_back(COutput(wtx.get(), nInput, 0, true, true, true).GetInputCoin(), 0, true, 0, 0);\n     wtxn.emplace_back(std::move(wtx));\n }"
      },
      {
        "sha": "bab22f5984839619e4699c71dc653af6582b97b6",
        "filename": "src/bench/crypto_hash.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/bench/crypto_hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/bench/crypto_hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/crypto_hash.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -9,12 +9,11 @@\n #include <hash.h>\n #include <random.h>\n #include <uint256.h>\n-#include <util/time.h>\n+#include <utiltime.h>\n #include <crypto/ripemd160.h>\n #include <crypto/sha1.h>\n #include <crypto/sha256.h>\n #include <crypto/sha512.h>\n-#include <crypto/siphash.h>\n \n /* Number of bytes to hash per iteration */\n static const uint64_t BUFFER_SIZE = 1000*1000;\n@@ -81,16 +80,18 @@ static void SipHash_32b(benchmark::State& state)\n static void FastRandom_32bit(benchmark::State& state)\n {\n     FastRandomContext rng(true);\n+    uint32_t x = 0;\n     while (state.KeepRunning()) {\n-        rng.rand32();\n+        x += rng.rand32();\n     }\n }\n \n static void FastRandom_1bit(benchmark::State& state)\n {\n     FastRandomContext rng(true);\n+    uint32_t x = 0;\n     while (state.KeepRunning()) {\n-        rng.randbool();\n+        x += rng.randbool();\n     }\n }\n "
      },
      {
        "sha": "e0854e2c62cfab029d557770fc07f661ce2902dd",
        "filename": "src/bench/duplicate_inputs.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 100,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/src/bench/duplicate_inputs.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/src/bench/duplicate_inputs.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/duplicate_inputs.cpp?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "patch": "@@ -1,100 +0,0 @@\n-// Copyright (c) 2011-2018 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include <bench/bench.h>\n-#include <chainparams.h>\n-#include <coins.h>\n-#include <consensus/merkle.h>\n-#include <consensus/validation.h>\n-#include <miner.h>\n-#include <policy/policy.h>\n-#include <pow.h>\n-#include <scheduler.h>\n-#include <txdb.h>\n-#include <txmempool.h>\n-#include <util/time.h>\n-#include <validation.h>\n-#include <validationinterface.h>\n-\n-#include <boost/thread.hpp>\n-\n-#include <list>\n-#include <vector>\n-\n-\n-static void DuplicateInputs(benchmark::State& state)\n-{\n-    const CScript SCRIPT_PUB{CScript(OP_TRUE)};\n-\n-    // Switch to regtest so we can mine faster\n-    // Also segwit is active, so we can include witness transactions\n-    SelectParams(CBaseChainParams::REGTEST);\n-\n-    InitScriptExecutionCache();\n-\n-    boost::thread_group thread_group;\n-    CScheduler scheduler;\n-    const CChainParams& chainparams = Params();\n-    {\n-        ::pblocktree.reset(new CBlockTreeDB(1 << 20, true));\n-        ::pcoinsdbview.reset(new CCoinsViewDB(1 << 23, true));\n-        ::pcoinsTip.reset(new CCoinsViewCache(pcoinsdbview.get()));\n-\n-        thread_group.create_thread(std::bind(&CScheduler::serviceQueue, &scheduler));\n-        GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n-        LoadGenesisBlock(chainparams);\n-        CValidationState cvstate;\n-        ActivateBestChain(cvstate, chainparams);\n-        assert(::chainActive.Tip() != nullptr);\n-        const bool witness_enabled{IsWitnessEnabled(::chainActive.Tip(), chainparams.GetConsensus())};\n-        assert(witness_enabled);\n-    }\n-\n-    CBlock block{};\n-    CMutableTransaction coinbaseTx{};\n-    CMutableTransaction naughtyTx{};\n-\n-    CBlockIndex* pindexPrev = ::chainActive.Tip();\n-    assert(pindexPrev != nullptr);\n-    block.nBits = GetNextWorkRequired(pindexPrev, &block, chainparams.GetConsensus());\n-    block.nNonce = 0;\n-    auto nHeight = pindexPrev->nHeight + 1;\n-\n-    // Make a coinbase TX\n-    coinbaseTx.vin.resize(1);\n-    coinbaseTx.vin[0].prevout.SetNull();\n-    coinbaseTx.vout.resize(1);\n-    coinbaseTx.vout[0].scriptPubKey = SCRIPT_PUB;\n-    coinbaseTx.vout[0].nValue = GetBlockSubsidy(nHeight, chainparams.GetConsensus());\n-    coinbaseTx.vin[0].scriptSig = CScript() << nHeight << OP_0;\n-\n-\n-    naughtyTx.vout.resize(1);\n-    naughtyTx.vout[0].nValue = 0;\n-    naughtyTx.vout[0].scriptPubKey = SCRIPT_PUB;\n-\n-    uint64_t n_inputs = (((MAX_BLOCK_SERIALIZED_SIZE / WITNESS_SCALE_FACTOR) - (CTransaction(coinbaseTx).GetTotalSize() + CTransaction(naughtyTx).GetTotalSize())) / 41) - 100;\n-    for (uint64_t x = 0; x < (n_inputs - 1); ++x) {\n-        naughtyTx.vin.emplace_back(GetRandHash(), 0, CScript(), 0);\n-    }\n-    naughtyTx.vin.emplace_back(naughtyTx.vin.back());\n-\n-    block.vtx.push_back(MakeTransactionRef(std::move(coinbaseTx)));\n-    block.vtx.push_back(MakeTransactionRef(std::move(naughtyTx)));\n-\n-    block.hashMerkleRoot = BlockMerkleRoot(block);\n-\n-    while (state.KeepRunning()) {\n-        CValidationState cvstate{};\n-        assert(!CheckBlock(block, cvstate, chainparams.GetConsensus(), false, false));\n-        assert(cvstate.GetRejectReason() == \"bad-txns-inputs-duplicate\");\n-    }\n-\n-    thread_group.interrupt_all();\n-    thread_group.join_all();\n-    GetMainSignals().FlushBackgroundCallbacks();\n-    GetMainSignals().UnregisterBackgroundSignalScheduler();\n-}\n-\n-BENCHMARK(DuplicateInputs, 10);"
      },
      {
        "sha": "6d95e05ef6986d0855137e1867a2ab9fdc2a8a10",
        "filename": "src/bench/examples.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/bench/examples.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/bench/examples.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/examples.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -4,7 +4,7 @@\n \n #include <bench/bench.h>\n #include <validation.h>\n-#include <util/time.h>\n+#include <utiltime.h>\n \n // Sanity test: this should loop ten times, and\n // min/max/average should be close to 100ms."
      },
      {
        "sha": "535ad35571b09dd2baf45eaf692949fc6920abca",
        "filename": "src/bench/gcs_filter.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 43,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/src/bench/gcs_filter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/src/bench/gcs_filter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/gcs_filter.cpp?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "patch": "@@ -1,43 +0,0 @@\n-// Copyright (c) 2018 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include <bench/bench.h>\n-#include <blockfilter.h>\n-\n-static void ConstructGCSFilter(benchmark::State& state)\n-{\n-    GCSFilter::ElementSet elements;\n-    for (int i = 0; i < 10000; ++i) {\n-        GCSFilter::Element element(32);\n-        element[0] = static_cast<unsigned char>(i);\n-        element[1] = static_cast<unsigned char>(i >> 8);\n-        elements.insert(std::move(element));\n-    }\n-\n-    uint64_t siphash_k0 = 0;\n-    while (state.KeepRunning()) {\n-        GCSFilter filter({siphash_k0, 0, 20, 1 << 20}, elements);\n-\n-        siphash_k0++;\n-    }\n-}\n-\n-static void MatchGCSFilter(benchmark::State& state)\n-{\n-    GCSFilter::ElementSet elements;\n-    for (int i = 0; i < 10000; ++i) {\n-        GCSFilter::Element element(32);\n-        element[0] = static_cast<unsigned char>(i);\n-        element[1] = static_cast<unsigned char>(i >> 8);\n-        elements.insert(std::move(element));\n-    }\n-    GCSFilter filter({0, 0, 20, 1 << 20}, elements);\n-\n-    while (state.KeepRunning()) {\n-        filter.Match(GCSFilter::Element());\n-    }\n-}\n-\n-BENCHMARK(ConstructGCSFilter, 1000);\n-BENCHMARK(MatchGCSFilter, 50 * 1000);"
      },
      {
        "sha": "0ec7c158ccbb38318f84a436936488826df1bd99",
        "filename": "src/bench/mempool_eviction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/bench/mempool_eviction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/bench/mempool_eviction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/mempool_eviction.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -16,7 +16,7 @@ static void AddTx(const CTransactionRef& tx, const CAmount& nFee, CTxMemPool& po\n     bool spendsCoinbase = false;\n     unsigned int sigOpCost = 4;\n     LockPoints lp;\n-    pool.addUnchecked(CTxMemPoolEntry(\n+    pool.addUnchecked(tx->GetHash(), CTxMemPoolEntry(\n                                          tx, nFee, nTime, nHeight,\n                                          spendsCoinbase, sigOpCost, lp));\n }\n@@ -127,7 +127,7 @@ static void MempoolEviction(benchmark::State& state)\n         AddTx(tx6_r, 1100LL, pool);\n         AddTx(tx7_r, 9000LL, pool);\n         pool.TrimToSize(pool.DynamicMemoryUsage() * 3 / 4);\n-        pool.TrimToSize(GetVirtualTransactionSize(*tx1_r));\n+        pool.TrimToSize(GetVirtualTransactionSize(tx1));\n     }\n }\n "
      },
      {
        "sha": "8cc404b9e229a125d4f9320671b0d770a40e2bdb",
        "filename": "src/bench/prevector.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 9,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/bench/prevector.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/bench/prevector.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/prevector.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -2,21 +2,13 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <compat.h>\n #include <prevector.h>\n #include <serialize.h>\n #include <streams.h>\n-#include <type_traits>\n \n #include <bench/bench.h>\n \n-// GCC 4.8 is missing some C++11 type_traits,\n-// https://www.gnu.org/software/gcc/gcc-5/changes.html\n-#if defined(__GNUC__) && !defined(__clang__) && __GNUC__ < 5\n-#define IS_TRIVIALLY_CONSTRUCTIBLE std::has_trivial_default_constructor\n-#else\n-#define IS_TRIVIALLY_CONSTRUCTIBLE std::is_trivially_default_constructible\n-#endif\n-\n struct nontrivial_t {\n     int x;\n     nontrivial_t() :x(-1) {}"
      },
      {
        "sha": "43e7635047396bb5a1305679009f87bd3ceea50d",
        "filename": "src/bench/rollingbloom.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/bench/rollingbloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/bench/rollingbloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/rollingbloom.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -12,6 +12,7 @@ static void RollingBloom(benchmark::State& state)\n     CRollingBloomFilter filter(120000, 0.000001);\n     std::vector<unsigned char> data(32);\n     uint32_t count = 0;\n+    uint64_t match = 0;\n     while (state.KeepRunning()) {\n         count++;\n         data[0] = count;\n@@ -24,7 +25,7 @@ static void RollingBloom(benchmark::State& state)\n         data[1] = count >> 16;\n         data[2] = count >> 8;\n         data[3] = count;\n-        filter.contains(data);\n+        match += filter.contains(data);\n     }\n }\n "
      },
      {
        "sha": "131ace9bfdcd5200fa06d3eccb3b4889e96cacb5",
        "filename": "src/bitcoin-cli-res.rc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/bitcoin-cli-res.rc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/bitcoin-cli-res.rc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli-res.rc?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -16,7 +16,7 @@ BEGIN\n     BEGIN\n         BLOCK \"040904E4\" // U.S. English - multilingual (hex)\n         BEGIN\n-            VALUE \"CompanyName\",        \"Bitcoin\"\n+            VALUE \"CompanyName\",        \"BitcoinV\"\n             VALUE \"FileDescription\",    \"bitcoin-cli (JSON-RPC client for \" PACKAGE_NAME \")\"\n             VALUE \"FileVersion\",        VER_FILEVERSION_STR\n             VALUE \"InternalName\",       \"bitcoin-cli\""
      },
      {
        "sha": "db713f58d25fa5e5e5555ceffb174b6102a41f81",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -12,21 +12,18 @@\n #include <fs.h>\n #include <rpc/client.h>\n #include <rpc/protocol.h>\n-#include <util/system.h>\n-#include <util/strencodings.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n \n #include <memory>\n #include <stdio.h>\n-#include <tuple>\n \n #include <event2/buffer.h>\n #include <event2/keyvalq_struct.h>\n #include <support/events.h>\n \n #include <univalue.h>\n \n-const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n-\n static const char DEFAULT_RPCCONNECT[] = \"127.0.0.1\";\n static const int DEFAULT_HTTP_CLIENT_TIMEOUT=900;\n static const bool DEFAULT_NAMED=false;\n@@ -36,7 +33,6 @@ static void SetupCliArgs()\n {\n     const auto defaultBaseParams = CreateBaseChainParams(CBaseChainParams::MAIN);\n     const auto testnetBaseParams = CreateBaseChainParams(CBaseChainParams::TESTNET);\n-    const auto regtestBaseParams = CreateBaseChainParams(CBaseChainParams::REGTEST);\n \n     gArgs.AddArg(\"-?\", \"This help message\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-version\", \"Print version and exit\", false, OptionsCategory::OPTIONS);\n@@ -47,12 +43,12 @@ static void SetupCliArgs()\n     gArgs.AddArg(\"-named\", strprintf(\"Pass named instead of positional arguments (default: %s)\", DEFAULT_NAMED), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-rpcclienttimeout=<n>\", strprintf(\"Timeout in seconds during HTTP requests, or 0 for no timeout. (default: %d)\", DEFAULT_HTTP_CLIENT_TIMEOUT), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-rpcconnect=<ip>\", strprintf(\"Send commands to node running on <ip> (default: %s)\", DEFAULT_RPCCONNECT), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-rpccookiefile=<loc>\", \"Location of the auth cookie. Relative paths will be prefixed by a net-specific datadir location. (default: data dir)\", false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-rpccookiefile=<loc>\", _(\"Location of the auth cookie. Relative paths will be prefixed by a net-specific datadir location. (default: data dir)\"), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-rpcpassword=<pw>\", \"Password for JSON-RPC connections\", false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-rpcport=<port>\", strprintf(\"Connect to JSON-RPC on <port> (default: %u, testnet: %u, regtest: %u)\", defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort(), regtestBaseParams->RPCPort()), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-rpcport=<port>\", strprintf(\"Connect to JSON-RPC on <port> (default: %u or testnet: %u)\", defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort()), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-rpcuser=<user>\", \"Username for JSON-RPC connections\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-rpcwait\", \"Wait for RPC server to start\", false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-rpcwallet=<walletname>\", \"Send RPC for non-default wallet on RPC server (needs to exactly match corresponding -wallet option passed to bitcoind). This changes the RPC endpoint used, e.g. http://127.0.0.1:8332/wallet/<walletname>\", false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-rpcwallet=<walletname>\", \"Send RPC for non-default wallet on RPC server (needs to exactly match corresponding -wallet option passed to bitcoind)\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-stdin\", \"Read extra arguments from standard input, one per line until EOF/Ctrl-D (recommended for sensitive information such as passphrases). When combined with -stdinrpcpass, the first line from standard input is used for the RPC password.\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-stdinrpcpass\", \"Read RPC password from standard input as a single line. When combined with -stdin, the first line from standard input is used for the RPC password.\", false, OptionsCategory::OPTIONS);\n \n@@ -140,6 +136,11 @@ static int AppInitRPC(int argc, char* argv[])\n         fprintf(stderr, \"Error: %s\\n\", e.what());\n         return EXIT_FAILURE;\n     }\n+    if (gArgs.GetBoolArg(\"-rpcssl\", false))\n+    {\n+        fprintf(stderr, \"Error: SSL mode for RPC (-rpcssl) is no longer supported.\\n\");\n+        return EXIT_FAILURE;\n+    }\n     return CONTINUE_EXECUTION;\n }\n \n@@ -492,6 +493,9 @@ static int CommandLineRPC(int argc, char *argv[])\n             }\n         } while (fWait);\n     }\n+    catch (const boost::thread_interrupted&) {\n+        throw;\n+    }\n     catch (const std::exception& e) {\n         strPrint = std::string(\"error: \") + e.what();\n         nRet = EXIT_FAILURE;\n@@ -509,10 +513,6 @@ static int CommandLineRPC(int argc, char *argv[])\n \n int main(int argc, char* argv[])\n {\n-#ifdef WIN32\n-    util::WinCmdLineArgs winArgs;\n-    std::tie(argc, argv) = winArgs.get();\n-#endif\n     SetupEnvironment();\n     if (!SetupNetworking()) {\n         fprintf(stderr, \"Error: Initializing networking failed\\n\");"
      },
      {
        "sha": "5fef4724c98f2cf00ae4aeec008c4cf94a2a4eca",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 15,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -18,9 +18,9 @@\n #include <script/script.h>\n #include <script/sign.h>\n #include <univalue.h>\n-#include <util/system.h>\n-#include <util/moneystr.h>\n-#include <util/strencodings.h>\n+#include <util.h>\n+#include <utilmoneystr.h>\n+#include <utilstrencodings.h>\n \n #include <memory>\n #include <stdio.h>\n@@ -31,8 +31,6 @@ static bool fCreateBlank;\n static std::map<std::string,UniValue> registers;\n static const int CONTINUE_EXECUTION=-1;\n \n-const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n-\n static void SetupBitcoinTxArgs()\n {\n     gArgs.AddArg(\"-?\", \"This help message\", false, OptionsCategory::OPTIONS);\n@@ -240,10 +238,10 @@ static void MutateTxAddInput(CMutableTransaction& tx, const std::string& strInpu\n         throw std::runtime_error(\"TX input missing separator\");\n \n     // extract and validate TXID\n-    uint256 txid;\n-    if (!ParseHashStr(vStrInputParts[0], txid)) {\n+    std::string strTxid = vStrInputParts[0];\n+    if ((strTxid.size() != 64) || !IsHex(strTxid))\n         throw std::runtime_error(\"invalid TX input txid\");\n-    }\n+    uint256 txid(uint256S(strTxid));\n \n     static const unsigned int minTxOutSz = 9;\n     static const unsigned int maxVout = MAX_BLOCK_WEIGHT / (WITNESS_SCALE_FACTOR * minTxOutSz);\n@@ -255,7 +253,7 @@ static void MutateTxAddInput(CMutableTransaction& tx, const std::string& strInpu\n         throw std::runtime_error(\"invalid TX input vout '\" + strVout + \"'\");\n \n     // extract the optional sequence number\n-    uint32_t nSequenceIn = CTxIn::SEQUENCE_FINAL;\n+    uint32_t nSequenceIn=std::numeric_limits<unsigned int>::max();\n     if (vStrInputParts.size() > 2)\n         nSequenceIn = std::stoul(vStrInputParts[2]);\n \n@@ -356,7 +354,7 @@ static void MutateTxAddOutMultiSig(CMutableTransaction& tx, const std::string& s\n     if (vStrInputParts.size() < numkeys + 3)\n         throw std::runtime_error(\"incorrect number of multisig pubkeys\");\n \n-    if (required < 1 || required > MAX_PUBKEYS_PER_MULTISIG || numkeys < 1 || numkeys > MAX_PUBKEYS_PER_MULTISIG || numkeys < required)\n+    if (required < 1 || required > 20 || numkeys < 1 || numkeys > 20 || numkeys < required)\n         throw std::runtime_error(\"multisig parameter mismatch. Required \" \\\n                             + std::to_string(required) + \" of \" + std::to_string(numkeys) + \"signatures.\");\n \n@@ -385,7 +383,7 @@ static void MutateTxAddOutMultiSig(CMutableTransaction& tx, const std::string& s\n     CScript scriptPubKey = GetScriptForMultisig(required, pubkeys);\n \n     if (bSegWit) {\n-        for (const CPubKey& pubkey : pubkeys) {\n+        for (CPubKey& pubkey : pubkeys) {\n             if (!pubkey.IsCompressed()) {\n                 throw std::runtime_error(\"Uncompressed pubkeys are not useable for SegWit outputs\");\n             }\n@@ -590,10 +588,7 @@ static void MutateTxSign(CMutableTransaction& tx, const std::string& flagStr)\n             if (!prevOut.checkObject(types))\n                 throw std::runtime_error(\"prevtxs internal object typecheck fail\");\n \n-            uint256 txid;\n-            if (!ParseHashStr(prevOut[\"txid\"].get_str(), txid)) {\n-                throw std::runtime_error(\"txid must be hexadecimal string (not '\" + prevOut[\"txid\"].get_str() + \"')\");\n-            }\n+            uint256 txid = ParseHashStr(prevOut[\"txid\"].get_str(), \"txid\");\n \n             const int nOut = prevOut[\"vout\"].get_int();\n             if (nOut < 0)\n@@ -820,6 +815,10 @@ static int CommandLineRawTx(int argc, char* argv[])\n \n         OutputTx(tx);\n     }\n+\n+    catch (const boost::thread_interrupted&) {\n+        throw;\n+    }\n     catch (const std::exception& e) {\n         strPrint = std::string(\"error: \") + e.what();\n         nRet = EXIT_FAILURE;"
      },
      {
        "sha": "06f8622426fe1ec93e9f998b10c937980a0b5f55",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 15,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -11,21 +11,18 @@\n #include <clientversion.h>\n #include <compat.h>\n #include <fs.h>\n-#include <interfaces/chain.h>\n #include <rpc/server.h>\n #include <init.h>\n #include <noui.h>\n #include <shutdown.h>\n-#include <util/system.h>\n+#include <util.h>\n #include <httpserver.h>\n #include <httprpc.h>\n-#include <util/strencodings.h>\n+#include <utilstrencodings.h>\n #include <walletinitinterface.h>\n \n #include <stdio.h>\n \n-const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n-\n /* Introduction text for doxygen: */\n \n /*! \\mainpage Developer documentation\n@@ -59,9 +56,6 @@ static void WaitForShutdown()\n //\n static bool AppInit(int argc, char* argv[])\n {\n-    InitInterfaces interfaces;\n-    interfaces.chain = interfaces::MakeChain();\n-\n     bool fRet = false;\n \n     //\n@@ -81,7 +75,7 @@ static bool AppInit(int argc, char* argv[])\n \n         if (gArgs.IsArgSet(\"-version\"))\n         {\n-            strUsage += FormatParagraph(LicenseInfo()) + \"\\n\";\n+            strUsage += FormatParagraph(LicenseInfo());\n         }\n         else\n         {\n@@ -168,7 +162,7 @@ static bool AppInit(int argc, char* argv[])\n             // If locking the data directory failed, exit immediately\n             return false;\n         }\n-        fRet = AppInitMain(interfaces);\n+        fRet = AppInitMain();\n     }\n     catch (const std::exception& e) {\n         PrintExceptionContinue(&e, \"AppInit()\");\n@@ -182,17 +176,13 @@ static bool AppInit(int argc, char* argv[])\n     } else {\n         WaitForShutdown();\n     }\n-    Shutdown(interfaces);\n+    Shutdown();\n \n     return fRet;\n }\n \n int main(int argc, char* argv[])\n {\n-#ifdef WIN32\n-    util::WinCmdLineArgs winArgs;\n-    std::tie(argc, argv) = winArgs.get();\n-#endif\n     SetupEnvironment();\n \n     // Connect bitcoind signal handlers"
      },
      {
        "sha": "b17ff3507d9e76682492e108fc12ec99656fb140",
        "filename": "src/blockencodings.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/blockencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/blockencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -6,13 +6,12 @@\n #include <consensus/consensus.h>\n #include <consensus/validation.h>\n #include <chainparams.h>\n-#include <crypto/sha256.h>\n-#include <crypto/siphash.h>\n+#include <hash.h>\n #include <random.h>\n #include <streams.h>\n #include <txmempool.h>\n #include <validation.h>\n-#include <util/system.h>\n+#include <util.h>\n \n #include <unordered_map>\n \n@@ -163,7 +162,7 @@ ReadStatus PartiallyDownloadedBlock::InitData(const CBlockHeaderAndShortTxIDs& c\n             break;\n     }\n \n-    LogPrint(BCLog::CMPCTBLOCK, \"Initialized PartiallyDownloadedBlock for block %s using a cmpctblock of size %lu\\n\", cmpctblock.header.GetHash().ToString(), GetSerializeSize(cmpctblock, PROTOCOL_VERSION));\n+    LogPrint(BCLog::CMPCTBLOCK, \"Initialized PartiallyDownloadedBlock for block %s using a cmpctblock of size %lu\\n\", cmpctblock.header.GetHash().ToString(), GetSerializeSize(cmpctblock, SER_NETWORK, PROTOCOL_VERSION));\n \n     return READ_STATUS_OK;\n }"
      },
      {
        "sha": "bcf24047ffd4ccbb3e0c900c32460aeafe93ed69",
        "filename": "src/blockfilter.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 278,
        "changes": 278,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/src/blockfilter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/src/blockfilter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockfilter.cpp?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "patch": "@@ -1,278 +0,0 @@\n-// Copyright (c) 2018 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include <blockfilter.h>\n-#include <crypto/siphash.h>\n-#include <hash.h>\n-#include <primitives/transaction.h>\n-#include <script/script.h>\n-#include <streams.h>\n-\n-/// SerType used to serialize parameters in GCS filter encoding.\n-static constexpr int GCS_SER_TYPE = SER_NETWORK;\n-\n-/// Protocol version used to serialize parameters in GCS filter encoding.\n-static constexpr int GCS_SER_VERSION = 0;\n-\n-template <typename OStream>\n-static void GolombRiceEncode(BitStreamWriter<OStream>& bitwriter, uint8_t P, uint64_t x)\n-{\n-    // Write quotient as unary-encoded: q 1's followed by one 0.\n-    uint64_t q = x >> P;\n-    while (q > 0) {\n-        int nbits = q <= 64 ? static_cast<int>(q) : 64;\n-        bitwriter.Write(~0ULL, nbits);\n-        q -= nbits;\n-    }\n-    bitwriter.Write(0, 1);\n-\n-    // Write the remainder in P bits. Since the remainder is just the bottom\n-    // P bits of x, there is no need to mask first.\n-    bitwriter.Write(x, P);\n-}\n-\n-template <typename IStream>\n-static uint64_t GolombRiceDecode(BitStreamReader<IStream>& bitreader, uint8_t P)\n-{\n-    // Read unary-encoded quotient: q 1's followed by one 0.\n-    uint64_t q = 0;\n-    while (bitreader.Read(1) == 1) {\n-        ++q;\n-    }\n-\n-    uint64_t r = bitreader.Read(P);\n-\n-    return (q << P) + r;\n-}\n-\n-// Map a value x that is uniformly distributed in the range [0, 2^64) to a\n-// value uniformly distributed in [0, n) by returning the upper 64 bits of\n-// x * n.\n-//\n-// See: https://lemire.me/blog/2016/06/27/a-fast-alternative-to-the-modulo-reduction/\n-static uint64_t MapIntoRange(uint64_t x, uint64_t n)\n-{\n-#ifdef __SIZEOF_INT128__\n-    return (static_cast<unsigned __int128>(x) * static_cast<unsigned __int128>(n)) >> 64;\n-#else\n-    // To perform the calculation on 64-bit numbers without losing the\n-    // result to overflow, split the numbers into the most significant and\n-    // least significant 32 bits and perform multiplication piece-wise.\n-    //\n-    // See: https://stackoverflow.com/a/26855440\n-    uint64_t x_hi = x >> 32;\n-    uint64_t x_lo = x & 0xFFFFFFFF;\n-    uint64_t n_hi = n >> 32;\n-    uint64_t n_lo = n & 0xFFFFFFFF;\n-\n-    uint64_t ac = x_hi * n_hi;\n-    uint64_t ad = x_hi * n_lo;\n-    uint64_t bc = x_lo * n_hi;\n-    uint64_t bd = x_lo * n_lo;\n-\n-    uint64_t mid34 = (bd >> 32) + (bc & 0xFFFFFFFF) + (ad & 0xFFFFFFFF);\n-    uint64_t upper64 = ac + (bc >> 32) + (ad >> 32) + (mid34 >> 32);\n-    return upper64;\n-#endif\n-}\n-\n-uint64_t GCSFilter::HashToRange(const Element& element) const\n-{\n-    uint64_t hash = CSipHasher(m_params.m_siphash_k0, m_params.m_siphash_k1)\n-        .Write(element.data(), element.size())\n-        .Finalize();\n-    return MapIntoRange(hash, m_F);\n-}\n-\n-std::vector<uint64_t> GCSFilter::BuildHashedSet(const ElementSet& elements) const\n-{\n-    std::vector<uint64_t> hashed_elements;\n-    hashed_elements.reserve(elements.size());\n-    for (const Element& element : elements) {\n-        hashed_elements.push_back(HashToRange(element));\n-    }\n-    std::sort(hashed_elements.begin(), hashed_elements.end());\n-    return hashed_elements;\n-}\n-\n-GCSFilter::GCSFilter(const Params& params)\n-    : m_params(params), m_N(0), m_F(0), m_encoded{0}\n-{}\n-\n-GCSFilter::GCSFilter(const Params& params, std::vector<unsigned char> encoded_filter)\n-    : m_params(params), m_encoded(std::move(encoded_filter))\n-{\n-    VectorReader stream(GCS_SER_TYPE, GCS_SER_VERSION, m_encoded, 0);\n-\n-    uint64_t N = ReadCompactSize(stream);\n-    m_N = static_cast<uint32_t>(N);\n-    if (m_N != N) {\n-        throw std::ios_base::failure(\"N must be <2^32\");\n-    }\n-    m_F = static_cast<uint64_t>(m_N) * static_cast<uint64_t>(m_params.m_M);\n-\n-    // Verify that the encoded filter contains exactly N elements. If it has too much or too little\n-    // data, a std::ios_base::failure exception will be raised.\n-    BitStreamReader<VectorReader> bitreader(stream);\n-    for (uint64_t i = 0; i < m_N; ++i) {\n-        GolombRiceDecode(bitreader, m_params.m_P);\n-    }\n-    if (!stream.empty()) {\n-        throw std::ios_base::failure(\"encoded_filter contains excess data\");\n-    }\n-}\n-\n-GCSFilter::GCSFilter(const Params& params, const ElementSet& elements)\n-    : m_params(params)\n-{\n-    size_t N = elements.size();\n-    m_N = static_cast<uint32_t>(N);\n-    if (m_N != N) {\n-        throw std::invalid_argument(\"N must be <2^32\");\n-    }\n-    m_F = static_cast<uint64_t>(m_N) * static_cast<uint64_t>(m_params.m_M);\n-\n-    CVectorWriter stream(GCS_SER_TYPE, GCS_SER_VERSION, m_encoded, 0);\n-\n-    WriteCompactSize(stream, m_N);\n-\n-    if (elements.empty()) {\n-        return;\n-    }\n-\n-    BitStreamWriter<CVectorWriter> bitwriter(stream);\n-\n-    uint64_t last_value = 0;\n-    for (uint64_t value : BuildHashedSet(elements)) {\n-        uint64_t delta = value - last_value;\n-        GolombRiceEncode(bitwriter, m_params.m_P, delta);\n-        last_value = value;\n-    }\n-\n-    bitwriter.Flush();\n-}\n-\n-bool GCSFilter::MatchInternal(const uint64_t* element_hashes, size_t size) const\n-{\n-    VectorReader stream(GCS_SER_TYPE, GCS_SER_VERSION, m_encoded, 0);\n-\n-    // Seek forward by size of N\n-    uint64_t N = ReadCompactSize(stream);\n-    assert(N == m_N);\n-\n-    BitStreamReader<VectorReader> bitreader(stream);\n-\n-    uint64_t value = 0;\n-    size_t hashes_index = 0;\n-    for (uint32_t i = 0; i < m_N; ++i) {\n-        uint64_t delta = GolombRiceDecode(bitreader, m_params.m_P);\n-        value += delta;\n-\n-        while (true) {\n-            if (hashes_index == size) {\n-                return false;\n-            } else if (element_hashes[hashes_index] == value) {\n-                return true;\n-            } else if (element_hashes[hashes_index] > value) {\n-                break;\n-            }\n-\n-            hashes_index++;\n-        }\n-    }\n-\n-    return false;\n-}\n-\n-bool GCSFilter::Match(const Element& element) const\n-{\n-    uint64_t query = HashToRange(element);\n-    return MatchInternal(&query, 1);\n-}\n-\n-bool GCSFilter::MatchAny(const ElementSet& elements) const\n-{\n-    const std::vector<uint64_t> queries = BuildHashedSet(elements);\n-    return MatchInternal(queries.data(), queries.size());\n-}\n-\n-static GCSFilter::ElementSet BasicFilterElements(const CBlock& block,\n-                                                 const CBlockUndo& block_undo)\n-{\n-    GCSFilter::ElementSet elements;\n-\n-    for (const CTransactionRef& tx : block.vtx) {\n-        for (const CTxOut& txout : tx->vout) {\n-            const CScript& script = txout.scriptPubKey;\n-            if (script.empty() || script[0] == OP_RETURN) continue;\n-            elements.emplace(script.begin(), script.end());\n-        }\n-    }\n-\n-    for (const CTxUndo& tx_undo : block_undo.vtxundo) {\n-        for (const Coin& prevout : tx_undo.vprevout) {\n-            const CScript& script = prevout.out.scriptPubKey;\n-            if (script.empty()) continue;\n-            elements.emplace(script.begin(), script.end());\n-        }\n-    }\n-\n-    return elements;\n-}\n-\n-BlockFilter::BlockFilter(BlockFilterType filter_type, const uint256& block_hash,\n-                         std::vector<unsigned char> filter)\n-    : m_filter_type(filter_type), m_block_hash(block_hash)\n-{\n-    GCSFilter::Params params;\n-    if (!BuildParams(params)) {\n-        throw std::invalid_argument(\"unknown filter_type\");\n-    }\n-    m_filter = GCSFilter(params, std::move(filter));\n-}\n-\n-BlockFilter::BlockFilter(BlockFilterType filter_type, const CBlock& block, const CBlockUndo& block_undo)\n-    : m_filter_type(filter_type), m_block_hash(block.GetHash())\n-{\n-    GCSFilter::Params params;\n-    if (!BuildParams(params)) {\n-        throw std::invalid_argument(\"unknown filter_type\");\n-    }\n-    m_filter = GCSFilter(params, BasicFilterElements(block, block_undo));\n-}\n-\n-bool BlockFilter::BuildParams(GCSFilter::Params& params) const\n-{\n-    switch (m_filter_type) {\n-    case BlockFilterType::BASIC:\n-        params.m_siphash_k0 = m_block_hash.GetUint64(0);\n-        params.m_siphash_k1 = m_block_hash.GetUint64(1);\n-        params.m_P = BASIC_FILTER_P;\n-        params.m_M = BASIC_FILTER_M;\n-        return true;\n-    }\n-\n-    return false;\n-}\n-\n-uint256 BlockFilter::GetHash() const\n-{\n-    const std::vector<unsigned char>& data = GetEncodedFilter();\n-\n-    uint256 result;\n-    CHash256().Write(data.data(), data.size()).Finalize(result.begin());\n-    return result;\n-}\n-\n-uint256 BlockFilter::ComputeHeader(const uint256& prev_header) const\n-{\n-    const uint256& filter_hash = GetHash();\n-\n-    uint256 result;\n-    CHash256()\n-        .Write(filter_hash.begin(), filter_hash.size())\n-        .Write(prev_header.begin(), prev_header.size())\n-        .Finalize(result.begin());\n-    return result;\n-}"
      },
      {
        "sha": "4d1f51dd60e4e838f4b3235c7813f7faf5664311",
        "filename": "src/blockfilter.h",
        "status": "removed",
        "additions": 0,
        "deletions": 156,
        "changes": 156,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/src/blockfilter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/src/blockfilter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockfilter.h?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "patch": "@@ -1,156 +0,0 @@\n-// Copyright (c) 2018 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_BLOCKFILTER_H\n-#define BITCOIN_BLOCKFILTER_H\n-\n-#include <stdint.h>\n-#include <unordered_set>\n-#include <vector>\n-\n-#include <primitives/block.h>\n-#include <serialize.h>\n-#include <uint256.h>\n-#include <undo.h>\n-#include <util/bytevectorhash.h>\n-\n-/**\n- * This implements a Golomb-coded set as defined in BIP 158. It is a\n- * compact, probabilistic data structure for testing set membership.\n- */\n-class GCSFilter\n-{\n-public:\n-    typedef std::vector<unsigned char> Element;\n-    typedef std::unordered_set<Element, ByteVectorHash> ElementSet;\n-\n-    struct Params\n-    {\n-        uint64_t m_siphash_k0;\n-        uint64_t m_siphash_k1;\n-        uint8_t m_P;  //!< Golomb-Rice coding parameter\n-        uint32_t m_M;  //!< Inverse false positive rate\n-\n-        Params(uint64_t siphash_k0 = 0, uint64_t siphash_k1 = 0, uint8_t P = 0, uint32_t M = 1)\n-            : m_siphash_k0(siphash_k0), m_siphash_k1(siphash_k1), m_P(P), m_M(M)\n-        {}\n-    };\n-\n-private:\n-    Params m_params;\n-    uint32_t m_N;  //!< Number of elements in the filter\n-    uint64_t m_F;  //!< Range of element hashes, F = N * M\n-    std::vector<unsigned char> m_encoded;\n-\n-    /** Hash a data element to an integer in the range [0, N * M). */\n-    uint64_t HashToRange(const Element& element) const;\n-\n-    std::vector<uint64_t> BuildHashedSet(const ElementSet& elements) const;\n-\n-    /** Helper method used to implement Match and MatchAny */\n-    bool MatchInternal(const uint64_t* sorted_element_hashes, size_t size) const;\n-\n-public:\n-\n-    /** Constructs an empty filter. */\n-    explicit GCSFilter(const Params& params = Params());\n-\n-    /** Reconstructs an already-created filter from an encoding. */\n-    GCSFilter(const Params& params, std::vector<unsigned char> encoded_filter);\n-\n-    /** Builds a new filter from the params and set of elements. */\n-    GCSFilter(const Params& params, const ElementSet& elements);\n-\n-    uint32_t GetN() const { return m_N; }\n-    const Params& GetParams() const { return m_params; }\n-    const std::vector<unsigned char>& GetEncoded() const { return m_encoded; }\n-\n-    /**\n-     * Checks if the element may be in the set. False positives are possible\n-     * with probability 1/M.\n-     */\n-    bool Match(const Element& element) const;\n-\n-    /**\n-     * Checks if any of the given elements may be in the set. False positives\n-     * are possible with probability 1/M per element checked. This is more\n-     * efficient that checking Match on multiple elements separately.\n-     */\n-    bool MatchAny(const ElementSet& elements) const;\n-};\n-\n-constexpr uint8_t BASIC_FILTER_P = 19;\n-constexpr uint32_t BASIC_FILTER_M = 784931;\n-\n-enum BlockFilterType : uint8_t\n-{\n-    BASIC = 0,\n-};\n-\n-/**\n- * Complete block filter struct as defined in BIP 157. Serialization matches\n- * payload of \"cfilter\" messages.\n- */\n-class BlockFilter\n-{\n-private:\n-    BlockFilterType m_filter_type;\n-    uint256 m_block_hash;\n-    GCSFilter m_filter;\n-\n-    bool BuildParams(GCSFilter::Params& params) const;\n-\n-public:\n-\n-    BlockFilter() = default;\n-\n-    //! Reconstruct a BlockFilter from parts.\n-    BlockFilter(BlockFilterType filter_type, const uint256& block_hash,\n-                std::vector<unsigned char> filter);\n-\n-    //! Construct a new BlockFilter of the specified type from a block.\n-    BlockFilter(BlockFilterType filter_type, const CBlock& block, const CBlockUndo& block_undo);\n-\n-    BlockFilterType GetFilterType() const { return m_filter_type; }\n-    const uint256& GetBlockHash() const { return m_block_hash; }\n-    const GCSFilter& GetFilter() const { return m_filter; }\n-\n-    const std::vector<unsigned char>& GetEncodedFilter() const\n-    {\n-        return m_filter.GetEncoded();\n-    }\n-\n-    //! Compute the filter hash.\n-    uint256 GetHash() const;\n-\n-    //! Compute the filter header given the previous one.\n-    uint256 ComputeHeader(const uint256& prev_header) const;\n-\n-    template <typename Stream>\n-    void Serialize(Stream& s) const {\n-        s << m_block_hash\n-          << static_cast<uint8_t>(m_filter_type)\n-          << m_filter.GetEncoded();\n-    }\n-\n-    template <typename Stream>\n-    void Unserialize(Stream& s) {\n-        std::vector<unsigned char> encoded_filter;\n-        uint8_t filter_type;\n-\n-        s >> m_block_hash\n-          >> filter_type\n-          >> encoded_filter;\n-\n-        m_filter_type = static_cast<BlockFilterType>(filter_type);\n-\n-        GCSFilter::Params params;\n-        if (!BuildParams(params)) {\n-            throw std::ios_base::failure(\"unknown filter_type\");\n-        }\n-        m_filter = GCSFilter(params, std::move(encoded_filter));\n-    }\n-};\n-\n-#endif // BITCOIN_BLOCKFILTER_H"
      },
      {
        "sha": "24eebe2e3e3a98364cef50dd842e6bd2d879d7eb",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 3,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -38,6 +38,17 @@ CBloomFilter::CBloomFilter(const unsigned int nElements, const double nFPRate, c\n {\n }\n \n+// Private constructor used by CRollingBloomFilter\n+CBloomFilter::CBloomFilter(const unsigned int nElements, const double nFPRate, const unsigned int nTweakIn) :\n+    vData((unsigned int)(-1  / LN2SQUARED * nElements * log(nFPRate)) / 8),\n+    isFull(false),\n+    isEmpty(true),\n+    nHashFuncs((unsigned int)(vData.size() * 8 / nElements * LN2)),\n+    nTweak(nTweakIn),\n+    nFlags(BLOOM_UPDATE_NONE)\n+{\n+}\n+\n inline unsigned int CBloomFilter::Hash(unsigned int nHashNum, const std::vector<unsigned char>& vDataToHash) const\n {\n     // 0xFBA4C795 chosen as it guarantees a reasonable bit difference between nHashNum values.\n@@ -153,11 +164,11 @@ bool CBloomFilter::IsRelevantAndUpdate(const CTransaction& tx)\n                     insert(COutPoint(hash, i));\n                 else if ((nFlags & BLOOM_UPDATE_MASK) == BLOOM_UPDATE_P2PUBKEY_ONLY)\n                 {\n+                    txnouttype type;\n                     std::vector<std::vector<unsigned char> > vSolutions;\n-                    txnouttype type = Solver(txout.scriptPubKey, vSolutions);\n-                    if (type == TX_PUBKEY || type == TX_MULTISIG) {\n+                    if (Solver(txout.scriptPubKey, type, vSolutions) &&\n+                            (type == TX_PUBKEY || type == TX_MULTISIG))\n                         insert(COutPoint(hash, i));\n-                    }\n                 }\n                 break;\n             }"
      },
      {
        "sha": "e136fcebfcb42f3935169602b68a11ed3903ece9",
        "filename": "src/bloom.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/bloom.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/bloom.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.h?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -53,6 +53,10 @@ class CBloomFilter\n \n     unsigned int Hash(unsigned int nHashNum, const std::vector<unsigned char>& vDataToHash) const;\n \n+    // Private constructor for CRollingBloomFilter, no restrictions on size\n+    CBloomFilter(const unsigned int nElements, const double nFPRate, const unsigned int nTweak);\n+    friend class CRollingBloomFilter;\n+\n public:\n     /**\n      * Creates a new bloom filter which will provide the given fp rate when filled with the given number of elements"
      },
      {
        "sha": "01011d54f19bc5bf81a4df75f7ba89dae0af9b21",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 1,
        "deletions": 10,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -117,7 +117,7 @@ struct CDiskBlockPos\n \n     std::string ToString() const\n     {\n-        return strprintf(\"CDiskBlockPos(nFile=%i, nPos=%i)\", nFile, nPos);\n+        return strprintf(\"CBlockDiskPos(nFile=%i, nPos=%i)\", nFile, nPos);\n     }\n \n };\n@@ -294,15 +294,6 @@ class CBlockIndex\n         return *phashBlock;\n     }\n \n-    /**\n-     * Check whether this block's and all previous blocks' transactions have been\n-     * downloaded (and stored to disk) at some point.\n-     *\n-     * Does not imply the transactions are consensus-valid (ConnectTip might fail)\n-     * Does not imply the transactions are still stored on disk. (IsBlockPruned might return true)\n-     */\n-    bool HaveTxsDownloaded() const { return nChainTx != 0; }\n-\n     int64_t GetBlockTime() const\n     {\n         return (int64_t)nTime;"
      },
      {
        "sha": "b29587f5b57370060017fef249968e735bcb39c5",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 152,
        "deletions": 107,
        "changes": 259,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -1,21 +1,20 @@\n+// Copyright (c) 2018 The BitcoinV Core developers\n // Copyright (c) 2010 Satoshi Nakamoto\n // Copyright (c) 2009-2018 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <chainparams.h>\n-\n-#include <chainparamsseeds.h>\n #include <consensus/merkle.h>\n+#include \"pow.h\"\n #include <tinyformat.h>\n-#include <util/system.h>\n-#include <util/strencodings.h>\n-#include <versionbitsinfo.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n \n #include <assert.h>\n \n-#include <boost/algorithm/string/classification.hpp>\n-#include <boost/algorithm/string/split.hpp>\n+#include <chainparamsseeds.h>\n+\n \n static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesisOutputScript, uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)\n {\n@@ -49,33 +48,52 @@ static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesi\n  *     CTxOut(nValue=50.00000000, scriptPubKey=0x5F1DF16B2B704C8A578D0B)\n  *   vMerkleTree: 4a5e1e\n  */\n+// $ date --date='@1544800000'\n+// Fri Dec 14 09:06:40 CST 2018\n+\n static CBlock CreateGenesisBlock(uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)\n-{\n-    const char* pszTimestamp = \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\";\n+{  \n+    const char* pszTimestamp = \"Keep the little guys mining, here is bitcoinV - 14/Dec/2018\";\n     const CScript genesisOutputScript = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n     return CreateGenesisBlock(pszTimestamp, genesisOutputScript, nTime, nNonce, nBits, nVersion, genesisReward);\n }\n \n+void CChainParams::UpdateVersionBitsParameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout)\n+{\n+    consensus.vDeployments[d].nStartTime = nStartTime;\n+    consensus.vDeployments[d].nTimeout = nTimeout;\n+}\n+\n /**\n  * Main network\n  */\n+/**\n+ * What makes a good checkpoint block?\n+ * + Is surrounded by blocks with reasonable timestamps\n+ *   (no blocks before with a timestamp after, none after with\n+ *    timestamp before)\n+ * + Contains no strange transactions\n+ */\n+\n class CMainParams : public CChainParams {\n public:\n     CMainParams() {\n         strNetworkID = \"main\";\n-        consensus.nSubsidyHalvingInterval = 210000;\n+        consensus.nSubsidyHalvingInterval = 2100000; // #blocks before halving occurs. every 4 years\n         consensus.BIP16Exception = uint256S(\"0x00000000000002dc756eebf4f49723ed8d30cc28a5f108eb94b1ba88ac4f9c22\");\n         consensus.BIP34Height = 227931;\n         consensus.BIP34Hash = uint256S(\"0x000000000000024b89b42a942fe0d9fea3bb44ab7bd1b19115dd6a759c0808b8\");\n         consensus.BIP65Height = 388381; // 000000000000000004c2b624ed5d7756c508d90fd0da2c7c679febfa6c4735f0\n         consensus.BIP66Height = 363725; // 00000000000000000379eaa19dce8c9b722d46ae6a57c2f1a988119488b50931\n-        consensus.powLimit = uint256S(\"00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n-        consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n-        consensus.nPowTargetSpacing = 10 * 60;\n+        consensus.powLimit = uint256S(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n+        consensus.nPowTargetTimespan = 10 * 60; // difficulty update time in seconds\n+        consensus.nPowTargetSpacing = 1 * 60; // block time in seconds\n         consensus.fPowAllowMinDifficultyBlocks = false;\n         consensus.fPowNoRetargeting = false;\n-        consensus.nRuleChangeActivationThreshold = 1916; // 95% of 2016\n-        consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n+        \n+        consensus.nMinerConfirmationWindow = consensus.nPowTargetTimespan / consensus.nPowTargetSpacing;\n+        consensus.nRuleChangeActivationThreshold = (uint32_t)(0.95*consensus.nMinerConfirmationWindow);\n+\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n@@ -90,11 +108,16 @@ class CMainParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = 1479168000; // November 15th, 2016.\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = 1510704000; // November 15th, 2017.\n \n+        // nMinimumChainWork is a value that is updated at every release. It is retrieved from the Debug command\n+        //            getblockchaininfo \n+        // RPC of a node that is up at the time of release. nMinimumChainWork is updated at the same time as assumevalid. \n+        // It is calculated by summing the work done in each block which is calculated by doing 2^256/(target+1)\n+\n         // The best chain should have at least this much work.\n-        consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000028822fef1c230963535a90d\");\n+        consensus.nMinimumChainWork = uint256S(\"0000000000000000000000000000000000000000000000000000000000010001\");\n \n         // By default assume that the signatures in ancestors of this block are valid.\n-        consensus.defaultAssumeValid = uint256S(\"0x0000000000000000002e63058c023a9a1de233554f28c7b21380b6c9003f36a8\"); //534292\n+        consensus.defaultAssumeValid = uint256S(\"00009a004b86c066b21aaffe2325a2bf5cb80ccf572c137cb24086cc83ca0542\");\n \n         /**\n          * The message start string is designed to be unlikely to occur in normal data.\n@@ -105,26 +128,58 @@ class CMainParams : public CChainParams {\n         pchMessageStart[1] = 0xbe;\n         pchMessageStart[2] = 0xb4;\n         pchMessageStart[3] = 0xd9;\n-        nDefaultPort = 8333;\n+        nDefaultPort = 9333;\n         nPruneAfterHeight = 100000;\n \n-        genesis = CreateGenesisBlock(1231006505, 2083236893, 0x1d00ffff, 1, 50 * COIN);\n+        uint32_t nTime=1544800000;\n+        uint32_t nNonce=485334016;\n+        \n+        // Difficulty bits:\n+        // Using following formula target can be obtained from any block. For example if a target packed in a block appears as 0x1b0404cb its hexadecimal version will look as following:\n+        // 0x0404cb * 2**(8*(0x1b - 3)) = 0x00000000000404CB000000000000000000000000000000000000000000000000\n+\n+        genesis = CreateGenesisBlock(nTime, nNonce, 0x1f00ffff, 1, 50 * COIN);\n+\n+        // while(!CheckProofOfWork(genesis.GetHash(), genesis.nBits, consensus)){ \n+        //     ++genesis.nNonce;          \n+        // }\n+\n+\n         consensus.hashGenesisBlock = genesis.GetHash();\n-        assert(consensus.hashGenesisBlock == uint256S(\"0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\"));\n-        assert(genesis.hashMerkleRoot == uint256S(\"0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"));\n-\n-        // Note that of those which support the service bits prefix, most only support a subset of\n-        // possible options.\n-        // This is fine at runtime as we'll fall back to using them as a oneshot if they don't support the\n-        // service bits we want, but we should get them updated to support all service bits wanted by any\n-        // release ASAP to avoid it where possible.\n-        vSeeds.emplace_back(\"seed.bitcoin.sipa.be\"); // Pieter Wuille, only supports x1, x5, x9, and xd\n-        vSeeds.emplace_back(\"dnsseed.bluematt.me\"); // Matt Corallo, only supports x9\n-        vSeeds.emplace_back(\"dnsseed.bitcoin.dashjr.org\"); // Luke Dashjr\n-        vSeeds.emplace_back(\"seed.bitcoinstats.com\"); // Christian Decker, supports x1 - xf\n-        vSeeds.emplace_back(\"seed.bitcoin.jonasschnelli.ch\"); // Jonas Schnelli, only supports x1, x5, x9, and xd\n-        vSeeds.emplace_back(\"seed.btc.petertodd.org\"); // Peter Todd, only supports x1, x5, x9, and xd\n-        vSeeds.emplace_back(\"seed.bitcoin.sprovoost.nl\"); // Sjors Provoost\n+        std::cout << \"consensus.hashGenesisBlock: \" << consensus.hashGenesisBlock.ToString() << std::endl;\n+        std::cout << \"genesis.hashMerkleRoot: \" << genesis.hashMerkleRoot.ToString() << std::endl;   \n+        std::cout << \"genesis.nNonce: \" << genesis.nNonce << std::endl;\n+        // consensus.hashGenesisBlock: c12a6d0e08a807bbdcfef151cdcb6e2f7c5d6ac66f6e1de22e1c950e25c6a183\n+        // genesis.hashMerkleRoot:     c41041da878b479cd4e0537bf00525f1738c42e36e30b9214a7bfa7358fe89d0\n+                                                         \n+        assert(consensus.hashGenesisBlock == uint256S(\"0x00009a004b86c066b21aaffe2325a2bf5cb80ccf572c137cb24086cc83ca0542\"));\n+        assert(genesis.hashMerkleRoot == uint256S(\"0xc41041da878b479cd4e0537bf00525f1738c42e36e30b9214a7bfa7358fe89d0\"));\n+\n+\n+        // The domains listed in chainparams.cpp are for DNS seeders. DNS seeders are not nodes themselves, \n+        // but rather are DNS servers that serve the IP addresses of nodes that are available to be connected \n+        // to. These can be connected to for both a normal connection and just one to retrieve more IP addresses \n+        // of nodes. These are only used for first time boot up.\n+        vSeeds.emplace_back(\"seed1.bitcoinv.org\");\n+        vSeeds.emplace_back(\"seed2.bitcoinv.org\");\n+        vSeeds.emplace_back(\"seed3.bitcoinv.org\");\n+        vSeeds.emplace_back(\"seed4.bitcoinv.org\");\n+\n+        vSeeds.emplace_back(\"seed1.bitcoinv.io\");\n+        vSeeds.emplace_back(\"seed2.bitcoinv.io\");\n+        vSeeds.emplace_back(\"seed3.bitcoinv.io\");\n+        vSeeds.emplace_back(\"seed4.bitcoinv.io\");\n+\n+        vSeeds.emplace_back(\"seed1.bitcoinvbr.org\");\n+        vSeeds.emplace_back(\"seed2.bitcoinvbr.org\");\n+        vSeeds.emplace_back(\"seed3.bitcoinvbr.org\");\n+        vSeeds.emplace_back(\"seed4.bitcoinvbr.org\");\n+\n+        vSeeds.emplace_back(\"seed1.bitcoinvbr.com\");\n+        vSeeds.emplace_back(\"seed2.bitcoinvbr.com\");\n+        vSeeds.emplace_back(\"seed3.bitcoinvbr.com\");\n+        vSeeds.emplace_back(\"seed4.bitcoinvbr.com\");\n+\n \n         base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,0);\n         base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,5);\n@@ -142,27 +197,18 @@ class CMainParams : public CChainParams {\n \n         checkpointData = {\n             {\n-                { 11111, uint256S(\"0x0000000069e244f73d78e8fd29ba2fd2ed618bd6fa2ee92559f542fdb26e7c1d\")},\n-                { 33333, uint256S(\"0x000000002dd5588a74784eaa7ab0507a18ad16a236e7b1ce69f00d7ddfb5d0a6\")},\n-                { 74000, uint256S(\"0x0000000000573993a3c9e41ce34471c079dcf5f52a0e824a81e7f953b8661a20\")},\n-                {105000, uint256S(\"0x00000000000291ce28027faea320c8d2b054b2e0fe44a773f3eefb151d6bdc97\")},\n-                {134444, uint256S(\"0x00000000000005b12ffd4cd315cd34ffd4a594f430ac814c91184a0d42d2b0fe\")},\n-                {168000, uint256S(\"0x000000000000099e61ea72015e79632f216fe6cb33d7899acb35b75c8303b763\")},\n-                {193000, uint256S(\"0x000000000000059f452a5f7340de6682a977387c17010ff6e6c3bd83ca8b1317\")},\n-                {210000, uint256S(\"0x000000000000048b95347e83192f69cf0366076336c639f9b7228e9ba171342e\")},\n-                {216116, uint256S(\"0x00000000000001b4f4b433e81ee46494af945cf96014816a4e2370f11b23df4e\")},\n-                {225430, uint256S(\"0x00000000000001c108384350f74090433e7fcf79a606b8e797f065b130575932\")},\n-                {250000, uint256S(\"0x000000000000003887df1f29024b06fc2200b55f8af8f35453d7be294df2d214\")},\n-                {279000, uint256S(\"0x0000000000000001ae8c72a0b0c301f67e3afca10e819efa9041e458e9bd7e40\")},\n-                {295000, uint256S(\"0x00000000000000004d9b4ef50f0f9d686fd69db2e03af35a100370c64632a983\")},\n+                {   0, uint256S(\"0009a004b86c066b21aaffe2325a2bf5cb80ccf572c137cb24086cc83ca0542\")},\n+                { 237, uint256S(\"00000221ffbb7ffb69bb2d719d691a15b1080d0a267dbd3d7050246ee936f4a3\")},\n+                { 598, uint256S(\"00000402df52f21af77410b178295c554c04774065553942ecc7a43ebe808567\")},\n+                \n             }\n         };\n \n         chainTxData = ChainTxData{\n-            // Data from rpc: getchaintxstats 4096 0000000000000000002e63058c023a9a1de233554f28c7b21380b6c9003f36a8\n-            /* nTime    */ 1532884444,\n-            /* nTxCount */ 331282217,\n-            /* dTxRate  */ 2.4\n+            // type     getchaintxstats    in debug console\n+            /* nTime    */ 1544800000,\n+            /* nTxCount */ 1,\n+            /* dTxRate  */ 0.9900000\n         };\n \n         /* disable fallback fee on mainnet */\n@@ -214,13 +260,32 @@ class CTestNetParams : public CChainParams {\n         pchMessageStart[1] = 0x11;\n         pchMessageStart[2] = 0x09;\n         pchMessageStart[3] = 0x07;\n-        nDefaultPort = 18333;\n+        nDefaultPort = 19333;\n         nPruneAfterHeight = 1000;\n \n-        genesis = CreateGenesisBlock(1296688602, 414098458, 0x1d00ffff, 1, 50 * COIN);\n+        uint32_t nTime=1544800000;\n+        uint32_t nNonce=485334016;\n+        \n+        // Difficulty bits:\n+        // Using following formula target can be obtained from any block. For example if a target packed in a block appears as 0x1b0404cb its hexadecimal version will look as following:\n+        // 0x0404cb * 2**(8*(0x1b - 3)) = 0x00000000000404CB000000000000000000000000000000000000000000000000\n+\n+        genesis = CreateGenesisBlock(nTime, nNonce, 0x1f00ffff, 1, 50 * COIN);\n+\n+        // while(!CheckProofOfWork(genesis.GetHash(), genesis.nBits, consensus)){ \n+        //     ++genesis.nNonce;          \n+        // }\n+\n+\n         consensus.hashGenesisBlock = genesis.GetHash();\n-        assert(consensus.hashGenesisBlock == uint256S(\"0x000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943\"));\n-        assert(genesis.hashMerkleRoot == uint256S(\"0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"));\n+        std::cout << \"consensus.hashGenesisBlock: \" << consensus.hashGenesisBlock.ToString() << std::endl;\n+        std::cout << \"genesis.hashMerkleRoot: \" << genesis.hashMerkleRoot.ToString() << std::endl;   \n+        std::cout << \"genesis.nNonce: \" << genesis.nNonce << std::endl;\n+        // consensus.hashGenesisBlock: c12a6d0e08a807bbdcfef151cdcb6e2f7c5d6ac66f6e1de22e1c950e25c6a183\n+        // genesis.hashMerkleRoot:     c41041da878b479cd4e0537bf00525f1738c42e36e30b9214a7bfa7358fe89d0\n+                                                         \n+        assert(consensus.hashGenesisBlock == uint256S(\"0x00009a004b86c066b21aaffe2325a2bf5cb80ccf572c137cb24086cc83ca0542\"));\n+        assert(genesis.hashMerkleRoot == uint256S(\"0xc41041da878b479cd4e0537bf00525f1738c42e36e30b9214a7bfa7358fe89d0\"));\n \n         vFixedSeeds.clear();\n         vSeeds.clear();\n@@ -247,7 +312,7 @@ class CTestNetParams : public CChainParams {\n \n         checkpointData = {\n             {\n-                {546, uint256S(\"000000002a936ca763904c3c35fce2f3556c559c0214345d31b1bcebf76acb70\")},\n+                {1, uint256S(\"0x00009a004b86c066b21aaffe2325a2bf5cb80ccf572c137cb24086cc83ca0542\")},\n             }\n         };\n \n@@ -268,7 +333,7 @@ class CTestNetParams : public CChainParams {\n  */\n class CRegTestParams : public CChainParams {\n public:\n-    explicit CRegTestParams(const ArgsManager& args) {\n+    CRegTestParams() {\n         strNetworkID = \"regtest\";\n         consensus.nSubsidyHalvingInterval = 150;\n         consensus.BIP16Exception = uint256();\n@@ -306,12 +371,29 @@ class CRegTestParams : public CChainParams {\n         nDefaultPort = 18444;\n         nPruneAfterHeight = 1000;\n \n-        UpdateVersionBitsParametersFromArgs(args);\n+        uint32_t nTime=1544800000;\n+        uint32_t nNonce=485334016;\n+        \n+        // Difficulty bits:\n+        // Using following formula target can be obtained from any block. For example if a target packed in a block appears as 0x1b0404cb its hexadecimal version will look as following:\n+        // 0x0404cb * 2**(8*(0x1b - 3)) = 0x00000000000404CB000000000000000000000000000000000000000000000000\n+\n+        genesis = CreateGenesisBlock(nTime, nNonce, 0x1f00ffff, 1, 50 * COIN);\n+\n+        // while(!CheckProofOfWork(genesis.GetHash(), genesis.nBits, consensus)){ \n+        //     ++genesis.nNonce;          \n+        // }\n+\n \n-        genesis = CreateGenesisBlock(1296688602, 2, 0x207fffff, 1, 50 * COIN);\n         consensus.hashGenesisBlock = genesis.GetHash();\n-        assert(consensus.hashGenesisBlock == uint256S(\"0x0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"));\n-        assert(genesis.hashMerkleRoot == uint256S(\"0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"));\n+        std::cout << \"consensus.hashGenesisBlock: \" << consensus.hashGenesisBlock.ToString() << std::endl;\n+        std::cout << \"genesis.hashMerkleRoot: \" << genesis.hashMerkleRoot.ToString() << std::endl;   \n+        std::cout << \"genesis.nNonce: \" << genesis.nNonce << std::endl;\n+        // consensus.hashGenesisBlock: c12a6d0e08a807bbdcfef151cdcb6e2f7c5d6ac66f6e1de22e1c950e25c6a183\n+        // genesis.hashMerkleRoot:     c41041da878b479cd4e0537bf00525f1738c42e36e30b9214a7bfa7358fe89d0\n+                                                         \n+        assert(consensus.hashGenesisBlock == uint256S(\"0x00009a004b86c066b21aaffe2325a2bf5cb80ccf572c137cb24086cc83ca0542\"));\n+        assert(genesis.hashMerkleRoot == uint256S(\"0xc41041da878b479cd4e0537bf00525f1738c42e36e30b9214a7bfa7358fe89d0\"));\n \n         vFixedSeeds.clear(); //!< Regtest mode doesn't have any fixed seeds.\n         vSeeds.clear();      //!< Regtest mode doesn't have any DNS seeds.\n@@ -322,7 +404,7 @@ class CRegTestParams : public CChainParams {\n \n         checkpointData = {\n             {\n-                {0, uint256S(\"0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\")},\n+                {0, uint256S(\"0x00009a004b86c066b21aaffe2325a2bf5cb80ccf572c137cb24086cc83ca0542\")},\n             }\n         };\n \n@@ -343,65 +425,23 @@ class CRegTestParams : public CChainParams {\n         /* enable fallback fee on regtest */\n         m_fallback_fee_enabled = true;\n     }\n-\n-    /**\n-     * Allows modifying the Version Bits regtest parameters.\n-     */\n-    void UpdateVersionBitsParameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout)\n-    {\n-        consensus.vDeployments[d].nStartTime = nStartTime;\n-        consensus.vDeployments[d].nTimeout = nTimeout;\n-    }\n-    void UpdateVersionBitsParametersFromArgs(const ArgsManager& args);\n };\n \n-void CRegTestParams::UpdateVersionBitsParametersFromArgs(const ArgsManager& args)\n-{\n-    if (!args.IsArgSet(\"-vbparams\")) return;\n-\n-    for (const std::string& strDeployment : args.GetArgs(\"-vbparams\")) {\n-        std::vector<std::string> vDeploymentParams;\n-        boost::split(vDeploymentParams, strDeployment, boost::is_any_of(\":\"));\n-        if (vDeploymentParams.size() != 3) {\n-            throw std::runtime_error(\"Version bits parameters malformed, expecting deployment:start:end\");\n-        }\n-        int64_t nStartTime, nTimeout;\n-        if (!ParseInt64(vDeploymentParams[1], &nStartTime)) {\n-            throw std::runtime_error(strprintf(\"Invalid nStartTime (%s)\", vDeploymentParams[1]));\n-        }\n-        if (!ParseInt64(vDeploymentParams[2], &nTimeout)) {\n-            throw std::runtime_error(strprintf(\"Invalid nTimeout (%s)\", vDeploymentParams[2]));\n-        }\n-        bool found = false;\n-        for (int j=0; j < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; ++j) {\n-            if (vDeploymentParams[0] == VersionBitsDeploymentInfo[j].name) {\n-                UpdateVersionBitsParameters(Consensus::DeploymentPos(j), nStartTime, nTimeout);\n-                found = true;\n-                LogPrintf(\"Setting version bits activation parameters for %s to start=%ld, timeout=%ld\\n\", vDeploymentParams[0], nStartTime, nTimeout);\n-                break;\n-            }\n-        }\n-        if (!found) {\n-            throw std::runtime_error(strprintf(\"Invalid deployment (%s)\", vDeploymentParams[0]));\n-        }\n-    }\n-}\n-\n-static std::unique_ptr<const CChainParams> globalChainParams;\n+static std::unique_ptr<CChainParams> globalChainParams;\n \n const CChainParams &Params() {\n     assert(globalChainParams);\n     return *globalChainParams;\n }\n \n-std::unique_ptr<const CChainParams> CreateChainParams(const std::string& chain)\n+std::unique_ptr<CChainParams> CreateChainParams(const std::string& chain)\n {\n     if (chain == CBaseChainParams::MAIN)\n         return std::unique_ptr<CChainParams>(new CMainParams());\n     else if (chain == CBaseChainParams::TESTNET)\n         return std::unique_ptr<CChainParams>(new CTestNetParams());\n     else if (chain == CBaseChainParams::REGTEST)\n-        return std::unique_ptr<CChainParams>(new CRegTestParams(gArgs));\n+        return std::unique_ptr<CChainParams>(new CRegTestParams());\n     throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n }\n \n@@ -410,3 +450,8 @@ void SelectParams(const std::string& network)\n     SelectBaseParams(network);\n     globalChainParams = CreateChainParams(network);\n }\n+\n+void UpdateVersionBitsParameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout)\n+{\n+    globalChainParams->UpdateVersionBitsParameters(d, nStartTime, nTimeout);\n+}"
      },
      {
        "sha": "722e52ff40f5099b5ae7d83fa27a412c5f433f01",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -80,6 +80,7 @@ class CChainParams\n     const std::vector<SeedSpec6>& FixedSeeds() const { return vFixedSeeds; }\n     const CCheckpointData& Checkpoints() const { return checkpointData; }\n     const ChainTxData& TxData() const { return chainTxData; }\n+    void UpdateVersionBitsParameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout);\n protected:\n     CChainParams() {}\n \n@@ -106,7 +107,7 @@ class CChainParams\n  * @returns a CChainParams* of the chosen chain.\n  * @throws a std::runtime_error if the chain is not supported.\n  */\n-std::unique_ptr<const CChainParams> CreateChainParams(const std::string& chain);\n+std::unique_ptr<CChainParams> CreateChainParams(const std::string& chain);\n \n /**\n  * Return the currently selected parameters. This won't change after app\n@@ -120,4 +121,9 @@ const CChainParams &Params();\n  */\n void SelectParams(const std::string& chain);\n \n+/**\n+ * Allows modifying the Version Bits regtest parameters.\n+ */\n+void UpdateVersionBitsParameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout);\n+\n #endif // BITCOIN_CHAINPARAMS_H"
      },
      {
        "sha": "e9e8ce03b4192d4500e0cd8a4c7d9a6eee7de7ab",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -6,8 +6,8 @@\n #include <chainparamsbase.h>\n \n #include <tinyformat.h>\n-#include <util/system.h>\n-#include <util/memory.h>\n+#include <util.h>\n+#include <utilmemory.h>\n \n #include <assert.h>\n \n@@ -20,7 +20,6 @@ void SetupChainParamsBaseOptions()\n     gArgs.AddArg(\"-regtest\", \"Enter regression test mode, which uses a special chain in which blocks can be solved instantly. \"\n                                    \"This is intended for regression testing tools and app development.\", true, OptionsCategory::CHAINPARAMS);\n     gArgs.AddArg(\"-testnet\", \"Use the test chain\", false, OptionsCategory::CHAINPARAMS);\n-    gArgs.AddArg(\"-vbparams=deployment:start:end\", \"Use given start/end times for specified version bits deployment (regtest-only)\", true, OptionsCategory::CHAINPARAMS);\n }\n \n static std::unique_ptr<CBaseChainParams> globalChainBaseParams;"
      },
      {
        "sha": "d622772b65a2ab59a0f58c423ee753ac0aa70a0e",
        "filename": "src/chainparamsseeds.h",
        "status": "modified",
        "additions": 8,
        "deletions": 1275,
        "changes": 1283,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/chainparamsseeds.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/chainparamsseeds.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsseeds.h?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "da1036acfbf6bb67cee732085bcf366c5abd5b13",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -6,7 +6,6 @@\n \n #include <consensus/consensus.h>\n #include <random.h>\n-#include <version.h>\n \n bool CCoinsView::GetCoin(const COutPoint &outpoint, Coin &coin) const { return false; }\n uint256 CCoinsView::GetBestBlock() const { return uint256(); }\n@@ -245,7 +244,7 @@ bool CCoinsViewCache::HaveInputs(const CTransaction& tx) const\n     return true;\n }\n \n-static const size_t MIN_TRANSACTION_OUTPUT_WEIGHT = WITNESS_SCALE_FACTOR * ::GetSerializeSize(CTxOut(), PROTOCOL_VERSION);\n+static const size_t MIN_TRANSACTION_OUTPUT_WEIGHT = WITNESS_SCALE_FACTOR * ::GetSerializeSize(CTxOut(), SER_NETWORK, PROTOCOL_VERSION);\n static const size_t MAX_OUTPUTS_PER_BLOCK = MAX_BLOCK_WEIGHT / MIN_TRANSACTION_OUTPUT_WEIGHT;\n \n const Coin& AccessByTxid(const CCoinsViewCache& view, const uint256& txid)"
      },
      {
        "sha": "41a422f485bbf1e080fc1e2f99dacd4e5ed00760",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -9,7 +9,7 @@\n #include <primitives/transaction.h>\n #include <compressor.h>\n #include <core_memusage.h>\n-#include <crypto/siphash.h>\n+#include <hash.h>\n #include <memusage.h>\n #include <serialize.h>\n #include <uint256.h>\n@@ -285,8 +285,8 @@ class CCoinsViewCache : public CCoinsViewBacked\n      * Note that lightweight clients may not know anything besides the hash of previous transactions,\n      * so may not be able to calculate this.\n      *\n-     * @param[in] tx    transaction for which we are checking input total\n-     * @return  Sum of value of all inputs (scriptSigs)\n+     * @param[in] tx\ttransaction for which we are checking input total\n+     * @return\tSum of value of all inputs (scriptSigs)\n      */\n     CAmount GetValueIn(const CTransaction& tx) const;\n "
      },
      {
        "sha": "19f9813fd482c6fba4fb8e1d64d55dd04b757dcb",
        "filename": "src/compat.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/compat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/compat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat.h?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -10,6 +10,16 @@\n #include <config/bitcoin-config.h>\n #endif\n \n+#include <type_traits>\n+\n+// GCC 4.8 is missing some C++11 type_traits,\n+// https://www.gnu.org/software/gcc/gcc-5/changes.html\n+#if defined(__GNUC__) && __GNUC__ < 5\n+#define IS_TRIVIALLY_CONSTRUCTIBLE std::is_trivial\n+#else\n+#define IS_TRIVIALLY_CONSTRUCTIBLE std::is_trivially_constructible\n+#endif\n+\n #ifdef WIN32\n #ifdef _WIN32_WINNT\n #undef _WIN32_WINNT"
      },
      {
        "sha": "a88a0ba8d4e194f384100a773673f74f3f2fa636",
        "filename": "src/compat/glibc_compat.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/compat/glibc_compat.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/compat/glibc_compat.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/glibc_compat.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -67,8 +67,6 @@ __asm(\".symver log2f_old,log2f@GLIBC_2.2.5\");\n __asm(\".symver log2f_old,log2f@GLIBC_2.4\");\n #elif defined(__aarch64__)\n __asm(\".symver log2f_old,log2f@GLIBC_2.17\");\n-#elif defined(__riscv)\n-__asm(\".symver log2f_old,log2f@GLIBC_2.27\");\n #endif\n extern \"C\" float __wrap_log2f(float x)\n {"
      },
      {
        "sha": "2a87a936b153725e65c167e87a40a4b2175edbaa",
        "filename": "src/consensus/merkle.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/consensus/merkle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/consensus/merkle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/merkle.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -4,7 +4,7 @@\n \n #include <consensus/merkle.h>\n #include <hash.h>\n-#include <util/strencodings.h>\n+#include <utilstrencodings.h>\n \n /*     WARNING! If you're reading this because you're learning about crypto\n        and/or designing a new system that will use merkle trees, keep in mind"
      },
      {
        "sha": "be73d0a2f9f60305d20f8b91668a78271197f26c",
        "filename": "src/consensus/tx_verify.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/consensus/tx_verify.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/consensus/tx_verify.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/tx_verify.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -12,7 +12,7 @@\n // TODO remove the following dependencies\n #include <chain.h>\n #include <coins.h>\n-#include <util/moneystr.h>\n+#include <utilmoneystr.h>\n \n bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n {\n@@ -164,7 +164,7 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fChe\n     if (tx.vout.empty())\n         return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vout-empty\");\n     // Size limits (this doesn't take the witness into account, as that hasn't been checked for malleability)\n-    if (::GetSerializeSize(tx, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * WITNESS_SCALE_FACTOR > MAX_BLOCK_WEIGHT)\n+    if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * WITNESS_SCALE_FACTOR > MAX_BLOCK_WEIGHT)\n         return state.DoS(100, false, REJECT_INVALID, \"bad-txns-oversize\");\n \n     // Check for negative or overflow output values"
      },
      {
        "sha": "008eda69b2d2b2b27a620c68002ad6efa5285274",
        "filename": "src/consensus/validation.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/consensus/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/consensus/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/validation.h?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -95,16 +95,16 @@ class CValidationState {\n // weight = (stripped_size * 3) + total_size.\n static inline int64_t GetTransactionWeight(const CTransaction& tx)\n {\n-    return ::GetSerializeSize(tx, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(tx, PROTOCOL_VERSION);\n+    return ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n }\n static inline int64_t GetBlockWeight(const CBlock& block)\n {\n-    return ::GetSerializeSize(block, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(block, PROTOCOL_VERSION);\n+    return ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION);\n }\n static inline int64_t GetTransactionInputWeight(const CTxIn& txin)\n {\n     // scriptWitness size is added here because witnesses and txins are split up in segwit serialization.\n-    return ::GetSerializeSize(txin, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(txin, PROTOCOL_VERSION) + ::GetSerializeSize(txin.scriptWitness.stack, PROTOCOL_VERSION);\n+    return ::GetSerializeSize(txin, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(txin, SER_NETWORK, PROTOCOL_VERSION) + ::GetSerializeSize(txin.scriptWitness.stack, SER_NETWORK, PROTOCOL_VERSION);\n }\n \n #endif // BITCOIN_CONSENSUS_VALIDATION_H"
      },
      {
        "sha": "ee323a22eed51029ff638a8f1661573069b05170",
        "filename": "src/core_io.h",
        "status": "modified",
        "additions": 4,
        "deletions": 16,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/core_io.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/core_io.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_io.h?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -6,13 +6,11 @@\n #define BITCOIN_CORE_IO_H\n \n #include <amount.h>\n-#include <attributes.h>\n \n #include <string>\n #include <vector>\n \n class CBlock;\n-class CBlockHeader;\n class CScript;\n class CTransaction;\n struct CMutableTransaction;\n@@ -23,21 +21,11 @@ class UniValue;\n // core_read.cpp\n CScript ParseScript(const std::string& s);\n std::string ScriptToAsmStr(const CScript& script, const bool fAttemptSighashDecode = false);\n-NODISCARD bool DecodeHexTx(CMutableTransaction& tx, const std::string& hex_tx, bool try_no_witness = false, bool try_witness = true);\n-NODISCARD bool DecodeHexBlk(CBlock&, const std::string& strHexBlk);\n-bool DecodeHexBlockHeader(CBlockHeader&, const std::string& hex_header);\n-\n-/**\n- * Parse a hex string into 256 bits\n- * @param[in] strHex a hex-formatted, 64-character string\n- * @param[out] result the result of the parasing\n- * @returns true if successful, false if not\n- *\n- * @see ParseHashV for an RPC-oriented version of this\n- */\n-bool ParseHashStr(const std::string& strHex, uint256& result);\n+bool DecodeHexTx(CMutableTransaction& tx, const std::string& hex_tx, bool try_no_witness = false, bool try_witness = true);\n+bool DecodeHexBlk(CBlock&, const std::string& strHexBlk);\n+uint256 ParseHashStr(const std::string&, const std::string& strName);\n std::vector<unsigned char> ParseHexUV(const UniValue& v, const std::string& strName);\n-NODISCARD bool DecodePSBT(PartiallySignedTransaction& psbt, const std::string& base64_tx, std::string& error);\n+bool DecodePSBT(PartiallySignedTransaction& psbt, const std::string& base64_tx, std::string& error);\n int ParseSighashString(const UniValue& sighash);\n \n // core_write.cpp"
      },
      {
        "sha": "a5df45aba194f751796903ed24e68f86d3dcf2d4",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 20,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -11,8 +11,8 @@\n #include <serialize.h>\n #include <streams.h>\n #include <univalue.h>\n-#include <util/system.h>\n-#include <util/strencodings.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n #include <version.h>\n \n #include <boost/algorithm/string/classification.hpp>\n@@ -145,20 +145,6 @@ bool DecodeHexTx(CMutableTransaction& tx, const std::string& hex_tx, bool try_no\n     return false;\n }\n \n-bool DecodeHexBlockHeader(CBlockHeader& header, const std::string& hex_header)\n-{\n-    if (!IsHex(hex_header)) return false;\n-\n-    const std::vector<unsigned char> header_data{ParseHex(hex_header)};\n-    CDataStream ser_header(header_data, SER_NETWORK, PROTOCOL_VERSION);\n-    try {\n-        ser_header >> header;\n-    } catch (const std::exception&) {\n-        return false;\n-    }\n-    return true;\n-}\n-\n bool DecodeHexBlk(CBlock& block, const std::string& strHexBlk)\n {\n     if (!IsHex(strHexBlk))\n@@ -193,13 +179,14 @@ bool DecodePSBT(PartiallySignedTransaction& psbt, const std::string& base64_tx,\n     return true;\n }\n \n-bool ParseHashStr(const std::string& strHex, uint256& result)\n+uint256 ParseHashStr(const std::string& strHex, const std::string& strName)\n {\n-    if ((strHex.size() != 64) || !IsHex(strHex))\n-        return false;\n+    if (!IsHex(strHex)) // Note: IsHex(\"\") is false\n+        throw std::runtime_error(strName + \" must be hexadecimal string (not '\" + strHex + \"')\");\n \n+    uint256 result;\n     result.SetHex(strHex);\n-    return true;\n+    return result;\n }\n \n std::vector<unsigned char> ParseHexUV(const UniValue& v, const std::string& strName)"
      },
      {
        "sha": "6331a3d880d167041885c59c105e79b0d1ef503e",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -12,9 +12,9 @@\n #include <serialize.h>\n #include <streams.h>\n #include <univalue.h>\n-#include <util/system.h>\n-#include <util/moneystr.h>\n-#include <util/strencodings.h>\n+#include <util.h>\n+#include <utilmoneystr.h>\n+#include <utilstrencodings.h>\n \n UniValue ValueFromAmount(const CAmount& amount)\n {\n@@ -141,7 +141,8 @@ void ScriptToUniv(const CScript& script, UniValue& out, bool include_address)\n     out.pushKV(\"hex\", HexStr(script.begin(), script.end()));\n \n     std::vector<std::vector<unsigned char>> solns;\n-    txnouttype type = Solver(script, solns);\n+    txnouttype type;\n+    Solver(script, type, solns);\n     out.pushKV(\"type\", GetTxnOutputType(type));\n \n     CTxDestination address;\n@@ -181,7 +182,7 @@ void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry,\n     entry.pushKV(\"txid\", tx.GetHash().GetHex());\n     entry.pushKV(\"hash\", tx.GetWitnessHash().GetHex());\n     entry.pushKV(\"version\", tx.nVersion);\n-    entry.pushKV(\"size\", (int)::GetSerializeSize(tx, PROTOCOL_VERSION));\n+    entry.pushKV(\"size\", (int)::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION));\n     entry.pushKV(\"vsize\", (GetTransactionWeight(tx) + WITNESS_SCALE_FACTOR - 1) / WITNESS_SCALE_FACTOR);\n     entry.pushKV(\"weight\", GetTransactionWeight(tx));\n     entry.pushKV(\"locktime\", (int64_t)tx.nLockTime);"
      },
      {
        "sha": "e81957111ad26b85e3faf17edf0a1268cc5995c9",
        "filename": "src/crypto/siphash.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 173,
        "changes": 173,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/src/crypto/siphash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/src/crypto/siphash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/siphash.cpp?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "patch": "@@ -1,173 +0,0 @@\n-// Copyright (c) 2016-2018 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include <crypto/siphash.h>\n-\n-#define ROTL(x, b) (uint64_t)(((x) << (b)) | ((x) >> (64 - (b))))\n-\n-#define SIPROUND do { \\\n-    v0 += v1; v1 = ROTL(v1, 13); v1 ^= v0; \\\n-    v0 = ROTL(v0, 32); \\\n-    v2 += v3; v3 = ROTL(v3, 16); v3 ^= v2; \\\n-    v0 += v3; v3 = ROTL(v3, 21); v3 ^= v0; \\\n-    v2 += v1; v1 = ROTL(v1, 17); v1 ^= v2; \\\n-    v2 = ROTL(v2, 32); \\\n-} while (0)\n-\n-CSipHasher::CSipHasher(uint64_t k0, uint64_t k1)\n-{\n-    v[0] = 0x736f6d6570736575ULL ^ k0;\n-    v[1] = 0x646f72616e646f6dULL ^ k1;\n-    v[2] = 0x6c7967656e657261ULL ^ k0;\n-    v[3] = 0x7465646279746573ULL ^ k1;\n-    count = 0;\n-    tmp = 0;\n-}\n-\n-CSipHasher& CSipHasher::Write(uint64_t data)\n-{\n-    uint64_t v0 = v[0], v1 = v[1], v2 = v[2], v3 = v[3];\n-\n-    assert(count % 8 == 0);\n-\n-    v3 ^= data;\n-    SIPROUND;\n-    SIPROUND;\n-    v0 ^= data;\n-\n-    v[0] = v0;\n-    v[1] = v1;\n-    v[2] = v2;\n-    v[3] = v3;\n-\n-    count += 8;\n-    return *this;\n-}\n-\n-CSipHasher& CSipHasher::Write(const unsigned char* data, size_t size)\n-{\n-    uint64_t v0 = v[0], v1 = v[1], v2 = v[2], v3 = v[3];\n-    uint64_t t = tmp;\n-    int c = count;\n-\n-    while (size--) {\n-        t |= ((uint64_t)(*(data++))) << (8 * (c % 8));\n-        c++;\n-        if ((c & 7) == 0) {\n-            v3 ^= t;\n-            SIPROUND;\n-            SIPROUND;\n-            v0 ^= t;\n-            t = 0;\n-        }\n-    }\n-\n-    v[0] = v0;\n-    v[1] = v1;\n-    v[2] = v2;\n-    v[3] = v3;\n-    count = c;\n-    tmp = t;\n-\n-    return *this;\n-}\n-\n-uint64_t CSipHasher::Finalize() const\n-{\n-    uint64_t v0 = v[0], v1 = v[1], v2 = v[2], v3 = v[3];\n-\n-    uint64_t t = tmp | (((uint64_t)count) << 56);\n-\n-    v3 ^= t;\n-    SIPROUND;\n-    SIPROUND;\n-    v0 ^= t;\n-    v2 ^= 0xFF;\n-    SIPROUND;\n-    SIPROUND;\n-    SIPROUND;\n-    SIPROUND;\n-    return v0 ^ v1 ^ v2 ^ v3;\n-}\n-\n-uint64_t SipHashUint256(uint64_t k0, uint64_t k1, const uint256& val)\n-{\n-    /* Specialized implementation for efficiency */\n-    uint64_t d = val.GetUint64(0);\n-\n-    uint64_t v0 = 0x736f6d6570736575ULL ^ k0;\n-    uint64_t v1 = 0x646f72616e646f6dULL ^ k1;\n-    uint64_t v2 = 0x6c7967656e657261ULL ^ k0;\n-    uint64_t v3 = 0x7465646279746573ULL ^ k1 ^ d;\n-\n-    SIPROUND;\n-    SIPROUND;\n-    v0 ^= d;\n-    d = val.GetUint64(1);\n-    v3 ^= d;\n-    SIPROUND;\n-    SIPROUND;\n-    v0 ^= d;\n-    d = val.GetUint64(2);\n-    v3 ^= d;\n-    SIPROUND;\n-    SIPROUND;\n-    v0 ^= d;\n-    d = val.GetUint64(3);\n-    v3 ^= d;\n-    SIPROUND;\n-    SIPROUND;\n-    v0 ^= d;\n-    v3 ^= ((uint64_t)4) << 59;\n-    SIPROUND;\n-    SIPROUND;\n-    v0 ^= ((uint64_t)4) << 59;\n-    v2 ^= 0xFF;\n-    SIPROUND;\n-    SIPROUND;\n-    SIPROUND;\n-    SIPROUND;\n-    return v0 ^ v1 ^ v2 ^ v3;\n-}\n-\n-uint64_t SipHashUint256Extra(uint64_t k0, uint64_t k1, const uint256& val, uint32_t extra)\n-{\n-    /* Specialized implementation for efficiency */\n-    uint64_t d = val.GetUint64(0);\n-\n-    uint64_t v0 = 0x736f6d6570736575ULL ^ k0;\n-    uint64_t v1 = 0x646f72616e646f6dULL ^ k1;\n-    uint64_t v2 = 0x6c7967656e657261ULL ^ k0;\n-    uint64_t v3 = 0x7465646279746573ULL ^ k1 ^ d;\n-\n-    SIPROUND;\n-    SIPROUND;\n-    v0 ^= d;\n-    d = val.GetUint64(1);\n-    v3 ^= d;\n-    SIPROUND;\n-    SIPROUND;\n-    v0 ^= d;\n-    d = val.GetUint64(2);\n-    v3 ^= d;\n-    SIPROUND;\n-    SIPROUND;\n-    v0 ^= d;\n-    d = val.GetUint64(3);\n-    v3 ^= d;\n-    SIPROUND;\n-    SIPROUND;\n-    v0 ^= d;\n-    d = (((uint64_t)36) << 56) | extra;\n-    v3 ^= d;\n-    SIPROUND;\n-    SIPROUND;\n-    v0 ^= d;\n-    v2 ^= 0xFF;\n-    SIPROUND;\n-    SIPROUND;\n-    SIPROUND;\n-    SIPROUND;\n-    return v0 ^ v1 ^ v2 ^ v3;\n-}"
      },
      {
        "sha": "b312f913f9360abe5295afcbc737489ff9ab4450",
        "filename": "src/crypto/siphash.h",
        "status": "removed",
        "additions": 0,
        "deletions": 47,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/src/crypto/siphash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/src/crypto/siphash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/siphash.h?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "patch": "@@ -1,47 +0,0 @@\n-// Copyright (c) 2016-2018 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_CRYPTO_SIPHASH_H\n-#define BITCOIN_CRYPTO_SIPHASH_H\n-\n-#include <stdint.h>\n-\n-#include <uint256.h>\n-\n-/** SipHash-2-4 */\n-class CSipHasher\n-{\n-private:\n-    uint64_t v[4];\n-    uint64_t tmp;\n-    int count;\n-\n-public:\n-    /** Construct a SipHash calculator initialized with 128-bit key (k0, k1) */\n-    CSipHasher(uint64_t k0, uint64_t k1);\n-    /** Hash a 64-bit integer worth of data\n-     *  It is treated as if this was the little-endian interpretation of 8 bytes.\n-     *  This function can only be used when a multiple of 8 bytes have been written so far.\n-     */\n-    CSipHasher& Write(uint64_t data);\n-    /** Hash arbitrary bytes. */\n-    CSipHasher& Write(const unsigned char* data, size_t size);\n-    /** Compute the 64-bit SipHash-2-4 of the data written so far. The object remains untouched. */\n-    uint64_t Finalize() const;\n-};\n-\n-/** Optimized SipHash-2-4 implementation for uint256.\n- *\n- *  It is identical to:\n- *    SipHasher(k0, k1)\n- *      .Write(val.GetUint64(0))\n- *      .Write(val.GetUint64(1))\n- *      .Write(val.GetUint64(2))\n- *      .Write(val.GetUint64(3))\n- *      .Finalize()\n- */\n-uint64_t SipHashUint256(uint64_t k0, uint64_t k1, const uint256& val);\n-uint64_t SipHashUint256Extra(uint64_t k0, uint64_t k1, const uint256& val, uint32_t extra);\n-\n-#endif // BITCOIN_CRYPTO_SIPHASH_H"
      },
      {
        "sha": "15f687396128169d5554bac860961e1e31a38c2d",
        "filename": "src/cuckoocache.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/cuckoocache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/cuckoocache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/cuckoocache.h?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -397,15 +397,15 @@ class cache\n         std::array<uint32_t, 8> locs = compute_hashes(e);\n         // Make sure we have not already inserted this element\n         // If we have, make sure that it does not get deleted\n-        for (const uint32_t loc : locs)\n+        for (uint32_t loc : locs)\n             if (table[loc] == e) {\n                 please_keep(loc);\n                 epoch_flags[loc] = last_epoch;\n                 return;\n             }\n         for (uint8_t depth = 0; depth < depth_limit; ++depth) {\n             // First try to insert to an empty slot, if one exists\n-            for (const uint32_t loc : locs) {\n+            for (uint32_t loc : locs) {\n                 if (!collection_flags.bit_is_set(loc))\n                     continue;\n                 table[loc] = std::move(e);\n@@ -467,7 +467,7 @@ class cache\n     inline bool contains(const Element& e, const bool erase) const\n     {\n         std::array<uint32_t, 8> locs = compute_hashes(e);\n-        for (const uint32_t loc : locs)\n+        for (uint32_t loc : locs)\n             if (table[loc] == e) {\n                 if (erase)\n                     allow_erase(loc);"
      },
      {
        "sha": "f5fb71580004f3a3dae94600551acbf8a0318446",
        "filename": "src/dbwrapper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/dbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/dbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -78,7 +78,7 @@ static void SetMaxOpenFiles(leveldb::Options *options) {\n     // do not interfere with select() loops. On 64-bit Unix hosts this value is\n     // also OK, because up to that amount LevelDB will use an mmap\n     // implementation that does not use extra file descriptors (the fds are\n-    // closed after being mmap'ed).\n+    // closed after being mmaped).\n     //\n     // Increasing the value beyond the default is dangerous because LevelDB will\n     // fall back to a non-mmap implementation when the file count is too large."
      },
      {
        "sha": "52f9efe17c834442b2fe581bfcdf4dbeed8d8e36",
        "filename": "src/dbwrapper.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/dbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/dbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.h?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -9,8 +9,8 @@\n #include <fs.h>\n #include <serialize.h>\n #include <streams.h>\n-#include <util/system.h>\n-#include <util/strencodings.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n #include <version.h>\n \n #include <leveldb/db.h>"
      },
      {
        "sha": "9211a7596b8a47d10362809d2534d2c29cad9623",
        "filename": "src/dummywallet.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 55,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/src/dummywallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/src/dummywallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dummywallet.cpp?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "patch": "@@ -1,55 +0,0 @@\n-// Copyright (c) 2018 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include <stdio.h>\n-#include <util/system.h>\n-#include <walletinitinterface.h>\n-\n-class CWallet;\n-\n-class DummyWalletInit : public WalletInitInterface {\n-public:\n-\n-    bool HasWalletSupport() const override {return false;}\n-    void AddWalletOptions() const override;\n-    bool ParameterInteraction() const override {return true;}\n-    void Construct(InitInterfaces& interfaces) const override {LogPrintf(\"No wallet support compiled in!\\n\");}\n-};\n-\n-void DummyWalletInit::AddWalletOptions() const\n-{\n-    std::vector<std::string> opts = {\"-addresstype\", \"-changetype\", \"-disablewallet\", \"-discardfee=<amt>\", \"-fallbackfee=<amt>\",\n-        \"-keypool=<n>\", \"-mintxfee=<amt>\", \"-paytxfee=<amt>\", \"-rescan\", \"-salvagewallet\", \"-spendzeroconfchange\",  \"-txconfirmtarget=<n>\",\n-        \"-upgradewallet\", \"-wallet=<path>\", \"-walletbroadcast\", \"-walletdir=<dir>\", \"-walletnotify=<cmd>\", \"-walletrbf\", \"-zapwallettxes=<mode>\",\n-        \"-dblogsize=<n>\", \"-flushwallet\", \"-privdb\", \"-walletrejectlongchains\"};\n-    gArgs.AddHiddenArgs(opts);\n-}\n-\n-const WalletInitInterface& g_wallet_init_interface = DummyWalletInit();\n-\n-fs::path GetWalletDir()\n-{\n-    throw std::logic_error(\"Wallet function called in non-wallet build.\");\n-}\n-\n-std::vector<fs::path> ListWalletDir()\n-{\n-    throw std::logic_error(\"Wallet function called in non-wallet build.\");\n-}\n-\n-std::vector<std::shared_ptr<CWallet>> GetWallets()\n-{\n-    throw std::logic_error(\"Wallet function called in non-wallet build.\");\n-}\n-\n-namespace interfaces {\n-\n-class Wallet;\n-\n-std::unique_ptr<Wallet> MakeWallet(const std::shared_ptr<CWallet>& wallet)\n-{\n-    throw std::logic_error(\"Wallet function called in non-wallet build.\");\n-}\n-\n-} // namespace interfaces"
      },
      {
        "sha": "570ed3e2ee2c6828475bae26bc44539f7e8e8567",
        "filename": "src/fs.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 206,
        "changes": 208,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/fs.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/fs.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/fs.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -1,219 +1,15 @@\n #include <fs.h>\n \n-#ifndef WIN32\n-#include <fcntl.h>\n-#else\n-#define NOMINMAX\n-#include <codecvt>\n-#include <windows.h>\n-#endif\n-\n namespace fsbridge {\n \n FILE *fopen(const fs::path& p, const char *mode)\n {\n-#ifndef WIN32\n     return ::fopen(p.string().c_str(), mode);\n-#else\n-    std::wstring_convert<std::codecvt_utf8_utf16<wchar_t>,wchar_t> utf8_cvt;\n-    return ::_wfopen(p.wstring().c_str(), utf8_cvt.from_bytes(mode).c_str());\n-#endif\n-}\n-\n-#ifndef WIN32\n-\n-static std::string GetErrorReason() {\n-    return std::strerror(errno);\n-}\n-\n-FileLock::FileLock(const fs::path& file)\n-{\n-    fd = open(file.string().c_str(), O_RDWR);\n-    if (fd == -1) {\n-        reason = GetErrorReason();\n-    }\n-}\n-\n-FileLock::~FileLock()\n-{\n-    if (fd != -1) {\n-        close(fd);\n-    }\n-}\n-\n-bool FileLock::TryLock()\n-{\n-    if (fd == -1) {\n-        return false;\n-    }\n-    struct flock lock;\n-    lock.l_type = F_WRLCK;\n-    lock.l_whence = SEEK_SET;\n-    lock.l_start = 0;\n-    lock.l_len = 0;\n-    if (fcntl(fd, F_SETLK, &lock) == -1) {\n-        reason = GetErrorReason();\n-        return false;\n-    }\n-    return true;\n-}\n-#else\n-\n-static std::string GetErrorReason() {\n-    wchar_t* err;\n-    FormatMessageW(FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS,\n-        nullptr, GetLastError(), MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), reinterpret_cast<WCHAR*>(&err), 0, nullptr);\n-    std::wstring err_str(err);\n-    LocalFree(err);\n-    return std::wstring_convert<std::codecvt_utf8_utf16<wchar_t>>().to_bytes(err_str);\n-}\n-\n-FileLock::FileLock(const fs::path& file)\n-{\n-    hFile = CreateFileW(file.wstring().c_str(),  GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE,\n-        nullptr, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, nullptr);\n-    if (hFile == INVALID_HANDLE_VALUE) {\n-        reason = GetErrorReason();\n-    }\n-}\n-\n-FileLock::~FileLock()\n-{\n-    if (hFile != INVALID_HANDLE_VALUE) {\n-        CloseHandle(hFile);\n-    }\n-}\n-\n-bool FileLock::TryLock()\n-{\n-    if (hFile == INVALID_HANDLE_VALUE) {\n-        return false;\n-    }\n-    _OVERLAPPED overlapped = {0};\n-    if (!LockFileEx(hFile, LOCKFILE_EXCLUSIVE_LOCK | LOCKFILE_FAIL_IMMEDIATELY, 0, std::numeric_limits<DWORD>::max(), std::numeric_limits<DWORD>::max(), &overlapped)) {\n-        reason = GetErrorReason();\n-        return false;\n-    }\n-    return true;\n-}\n-#endif\n-\n-std::string get_filesystem_error_message(const fs::filesystem_error& e)\n-{\n-#ifndef WIN32\n-    return e.what();\n-#else\n-    // Convert from Multi Byte to utf-16\n-    std::string mb_string(e.what());\n-    int size = MultiByteToWideChar(CP_ACP, 0, mb_string.c_str(), mb_string.size(), nullptr, 0);\n-\n-    std::wstring utf16_string(size, L'\\0');\n-    MultiByteToWideChar(CP_ACP, 0, mb_string.c_str(), mb_string.size(), &*utf16_string.begin(), size);\n-    // Convert from utf-16 to utf-8\n-    return std::wstring_convert<std::codecvt_utf8_utf16<wchar_t>, wchar_t>().to_bytes(utf16_string);\n-#endif\n-}\n-\n-#ifdef WIN32\n-#ifdef __GLIBCXX__\n-\n-// reference: https://github.com/gcc-mirror/gcc/blob/gcc-7_3_0-release/libstdc%2B%2B-v3/include/std/fstream#L270\n-\n-static std::string openmodeToStr(std::ios_base::openmode mode)\n-{\n-    switch (mode & ~std::ios_base::ate) {\n-    case std::ios_base::out:\n-    case std::ios_base::out | std::ios_base::trunc:\n-        return \"w\";\n-    case std::ios_base::out | std::ios_base::app:\n-    case std::ios_base::app:\n-        return \"a\";\n-    case std::ios_base::in:\n-        return \"r\";\n-    case std::ios_base::in | std::ios_base::out:\n-        return \"r+\";\n-    case std::ios_base::in | std::ios_base::out | std::ios_base::trunc:\n-        return \"w+\";\n-    case std::ios_base::in | std::ios_base::out | std::ios_base::app:\n-    case std::ios_base::in | std::ios_base::app:\n-        return \"a+\";\n-    case std::ios_base::out | std::ios_base::binary:\n-    case std::ios_base::out | std::ios_base::trunc | std::ios_base::binary:\n-        return \"wb\";\n-    case std::ios_base::out | std::ios_base::app | std::ios_base::binary:\n-    case std::ios_base::app | std::ios_base::binary:\n-        return \"ab\";\n-    case std::ios_base::in | std::ios_base::binary:\n-        return \"rb\";\n-    case std::ios_base::in | std::ios_base::out | std::ios_base::binary:\n-        return \"r+b\";\n-    case std::ios_base::in | std::ios_base::out | std::ios_base::trunc | std::ios_base::binary:\n-        return \"w+b\";\n-    case std::ios_base::in | std::ios_base::out | std::ios_base::app | std::ios_base::binary:\n-    case std::ios_base::in | std::ios_base::app | std::ios_base::binary:\n-        return \"a+b\";\n-    default:\n-        return std::string();\n-    }\n }\n \n-void ifstream::open(const fs::path& p, std::ios_base::openmode mode)\n+FILE *freopen(const fs::path& p, const char *mode, FILE *stream)\n {\n-    close();\n-    m_file = fsbridge::fopen(p, openmodeToStr(mode).c_str());\n-    if (m_file == nullptr) {\n-        return;\n-    }\n-    m_filebuf = __gnu_cxx::stdio_filebuf<char>(m_file, mode);\n-    rdbuf(&m_filebuf);\n-    if (mode & std::ios_base::ate) {\n-        seekg(0, std::ios_base::end);\n-    }\n+    return ::freopen(p.string().c_str(), mode, stream);\n }\n \n-void ifstream::close()\n-{\n-    if (m_file != nullptr) {\n-        m_filebuf.close();\n-        fclose(m_file);\n-    }\n-    m_file = nullptr;\n-}\n-\n-void ofstream::open(const fs::path& p, std::ios_base::openmode mode)\n-{\n-    close();\n-    m_file = fsbridge::fopen(p, openmodeToStr(mode).c_str());\n-    if (m_file == nullptr) {\n-        return;\n-    }\n-    m_filebuf = __gnu_cxx::stdio_filebuf<char>(m_file, mode);\n-    rdbuf(&m_filebuf);\n-    if (mode & std::ios_base::ate) {\n-        seekp(0, std::ios_base::end);\n-    }\n-}\n-\n-void ofstream::close()\n-{\n-    if (m_file != nullptr) {\n-        m_filebuf.close();\n-        fclose(m_file);\n-    }\n-    m_file = nullptr;\n-}\n-#else // __GLIBCXX__\n-\n-static_assert(sizeof(*fs::path().BOOST_FILESYSTEM_C_STR) == sizeof(wchar_t),\n-    \"Warning: This build is using boost::filesystem ofstream and ifstream \"\n-    \"implementations which will fail to open paths containing multibyte \"\n-    \"characters. You should delete this static_assert to ignore this warning, \"\n-    \"or switch to a different C++ standard library like the Microsoft C++ \"\n-    \"Standard Library (where boost uses non-standard extensions to construct \"\n-    \"stream objects with wide filenames), or the GNU libstdc++ library (where \"\n-    \"a more complicated workaround has been implemented above).\");\n-\n-#endif // __GLIBCXX__\n-#endif // WIN32\n-\n } // fsbridge"
      },
      {
        "sha": "abb4be254b8fa00f76a43fcaf99b54f310cc3254",
        "filename": "src/fs.h",
        "status": "modified",
        "additions": 2,
        "deletions": 73,
        "changes": 75,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/fs.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/fs.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/fs.h?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -7,89 +7,18 @@\n \n #include <stdio.h>\n #include <string>\n-#if defined WIN32 && defined __GLIBCXX__\n-#include <ext/stdio_filebuf.h>\n-#endif\n \n #include <boost/filesystem.hpp>\n #include <boost/filesystem/fstream.hpp>\n+#include <boost/filesystem/detail/utf8_codecvt_facet.hpp>\n \n /** Filesystem operations and types */\n namespace fs = boost::filesystem;\n \n /** Bridge operations to C stdio */\n namespace fsbridge {\n     FILE *fopen(const fs::path& p, const char *mode);\n-\n-    class FileLock\n-    {\n-    public:\n-        FileLock() = delete;\n-        FileLock(const FileLock&) = delete;\n-        FileLock(FileLock&&) = delete;\n-        explicit FileLock(const fs::path& file);\n-        ~FileLock();\n-        bool TryLock();\n-        std::string GetReason() { return reason; }\n-\n-    private:\n-        std::string reason;\n-#ifndef WIN32\n-        int fd = -1;\n-#else\n-        void* hFile = (void*)-1; // INVALID_HANDLE_VALUE\n-#endif\n-    };\n-\n-    std::string get_filesystem_error_message(const fs::filesystem_error& e);\n-\n-    // GNU libstdc++ specific workaround for opening UTF-8 paths on Windows.\n-    //\n-    // On Windows, it is only possible to reliably access multibyte file paths through\n-    // `wchar_t` APIs, not `char` APIs. But because the C++ standard doesn't\n-    // require ifstream/ofstream `wchar_t` constructors, and the GNU library doesn't\n-    // provide them (in contrast to the Microsoft C++ library, see\n-    // https://stackoverflow.com/questions/821873/how-to-open-an-stdfstream-ofstream-or-ifstream-with-a-unicode-filename/822032#822032),\n-    // Boost is forced to fall back to `char` constructors which may not work properly.\n-    //\n-    // Work around this issue by creating stream objects with `_wfopen` in\n-    // combination with `__gnu_cxx::stdio_filebuf`. This workaround can be removed\n-    // with an upgrade to C++17, where streams can be constructed directly from\n-    // `std::filesystem::path` objects.\n-\n-#if defined WIN32 && defined __GLIBCXX__\n-    class ifstream : public std::istream\n-    {\n-    public:\n-        ifstream() = default;\n-        explicit ifstream(const fs::path& p, std::ios_base::openmode mode = std::ios_base::in) { open(p, mode); }\n-        ~ifstream() { close(); }\n-        void open(const fs::path& p, std::ios_base::openmode mode = std::ios_base::in);\n-        bool is_open() { return m_filebuf.is_open(); }\n-        void close();\n-\n-    private:\n-        __gnu_cxx::stdio_filebuf<char> m_filebuf;\n-        FILE* m_file = nullptr;\n-    };\n-    class ofstream : public std::ostream\n-    {\n-    public:\n-        ofstream() = default;\n-        explicit ofstream(const fs::path& p, std::ios_base::openmode mode = std::ios_base::out) { open(p, mode); }\n-        ~ofstream() { close(); }\n-        void open(const fs::path& p, std::ios_base::openmode mode = std::ios_base::out);\n-        bool is_open() { return m_filebuf.is_open(); }\n-        void close();\n-\n-    private:\n-        __gnu_cxx::stdio_filebuf<char> m_filebuf;\n-        FILE* m_file = nullptr;\n-    };\n-#else  // !(WIN32 && __GLIBCXX__)\n-    typedef fs::ifstream ifstream;\n-    typedef fs::ofstream ofstream;\n-#endif // WIN32 && __GLIBCXX__\n+    FILE *freopen(const fs::path& p, const char *mode, FILE *stream);\n };\n \n #endif // BITCOIN_FS_H"
      },
      {
        "sha": "c049eea716d2a33d5dabf563109221533b8c78e9",
        "filename": "src/hash.cpp",
        "status": "modified",
        "additions": 168,
        "deletions": 0,
        "changes": 168,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -77,3 +77,171 @@ void BIP32Hash(const ChainCode &chainCode, unsigned int nChild, unsigned char he\n     num[3] = (nChild >>  0) & 0xFF;\n     CHMAC_SHA512(chainCode.begin(), chainCode.size()).Write(&header, 1).Write(data, 32).Write(num, 4).Finalize(output);\n }\n+\n+#define ROTL(x, b) (uint64_t)(((x) << (b)) | ((x) >> (64 - (b))))\n+\n+#define SIPROUND do { \\\n+    v0 += v1; v1 = ROTL(v1, 13); v1 ^= v0; \\\n+    v0 = ROTL(v0, 32); \\\n+    v2 += v3; v3 = ROTL(v3, 16); v3 ^= v2; \\\n+    v0 += v3; v3 = ROTL(v3, 21); v3 ^= v0; \\\n+    v2 += v1; v1 = ROTL(v1, 17); v1 ^= v2; \\\n+    v2 = ROTL(v2, 32); \\\n+} while (0)\n+\n+CSipHasher::CSipHasher(uint64_t k0, uint64_t k1)\n+{\n+    v[0] = 0x736f6d6570736575ULL ^ k0;\n+    v[1] = 0x646f72616e646f6dULL ^ k1;\n+    v[2] = 0x6c7967656e657261ULL ^ k0;\n+    v[3] = 0x7465646279746573ULL ^ k1;\n+    count = 0;\n+    tmp = 0;\n+}\n+\n+CSipHasher& CSipHasher::Write(uint64_t data)\n+{\n+    uint64_t v0 = v[0], v1 = v[1], v2 = v[2], v3 = v[3];\n+\n+    assert(count % 8 == 0);\n+\n+    v3 ^= data;\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= data;\n+\n+    v[0] = v0;\n+    v[1] = v1;\n+    v[2] = v2;\n+    v[3] = v3;\n+\n+    count += 8;\n+    return *this;\n+}\n+\n+CSipHasher& CSipHasher::Write(const unsigned char* data, size_t size)\n+{\n+    uint64_t v0 = v[0], v1 = v[1], v2 = v[2], v3 = v[3];\n+    uint64_t t = tmp;\n+    int c = count;\n+\n+    while (size--) {\n+        t |= ((uint64_t)(*(data++))) << (8 * (c % 8));\n+        c++;\n+        if ((c & 7) == 0) {\n+            v3 ^= t;\n+            SIPROUND;\n+            SIPROUND;\n+            v0 ^= t;\n+            t = 0;\n+        }\n+    }\n+\n+    v[0] = v0;\n+    v[1] = v1;\n+    v[2] = v2;\n+    v[3] = v3;\n+    count = c;\n+    tmp = t;\n+\n+    return *this;\n+}\n+\n+uint64_t CSipHasher::Finalize() const\n+{\n+    uint64_t v0 = v[0], v1 = v[1], v2 = v[2], v3 = v[3];\n+\n+    uint64_t t = tmp | (((uint64_t)count) << 56);\n+\n+    v3 ^= t;\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= t;\n+    v2 ^= 0xFF;\n+    SIPROUND;\n+    SIPROUND;\n+    SIPROUND;\n+    SIPROUND;\n+    return v0 ^ v1 ^ v2 ^ v3;\n+}\n+\n+uint64_t SipHashUint256(uint64_t k0, uint64_t k1, const uint256& val)\n+{\n+    /* Specialized implementation for efficiency */\n+    uint64_t d = val.GetUint64(0);\n+\n+    uint64_t v0 = 0x736f6d6570736575ULL ^ k0;\n+    uint64_t v1 = 0x646f72616e646f6dULL ^ k1;\n+    uint64_t v2 = 0x6c7967656e657261ULL ^ k0;\n+    uint64_t v3 = 0x7465646279746573ULL ^ k1 ^ d;\n+\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= d;\n+    d = val.GetUint64(1);\n+    v3 ^= d;\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= d;\n+    d = val.GetUint64(2);\n+    v3 ^= d;\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= d;\n+    d = val.GetUint64(3);\n+    v3 ^= d;\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= d;\n+    v3 ^= ((uint64_t)4) << 59;\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= ((uint64_t)4) << 59;\n+    v2 ^= 0xFF;\n+    SIPROUND;\n+    SIPROUND;\n+    SIPROUND;\n+    SIPROUND;\n+    return v0 ^ v1 ^ v2 ^ v3;\n+}\n+\n+uint64_t SipHashUint256Extra(uint64_t k0, uint64_t k1, const uint256& val, uint32_t extra)\n+{\n+    /* Specialized implementation for efficiency */\n+    uint64_t d = val.GetUint64(0);\n+\n+    uint64_t v0 = 0x736f6d6570736575ULL ^ k0;\n+    uint64_t v1 = 0x646f72616e646f6dULL ^ k1;\n+    uint64_t v2 = 0x6c7967656e657261ULL ^ k0;\n+    uint64_t v3 = 0x7465646279746573ULL ^ k1 ^ d;\n+\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= d;\n+    d = val.GetUint64(1);\n+    v3 ^= d;\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= d;\n+    d = val.GetUint64(2);\n+    v3 ^= d;\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= d;\n+    d = val.GetUint64(3);\n+    v3 ^= d;\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= d;\n+    d = (((uint64_t)36) << 56) | extra;\n+    v3 ^= d;\n+    SIPROUND;\n+    SIPROUND;\n+    v0 ^= d;\n+    v2 ^= 0xFF;\n+    SIPROUND;\n+    SIPROUND;\n+    SIPROUND;\n+    SIPROUND;\n+    return v0 ^ v1 ^ v2 ^ v3;\n+}"
      },
      {
        "sha": "3534a400b3ca5cf4a4af35a108d90a75e04f72a6",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 35,
        "deletions": 10,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -6,7 +6,6 @@\n #ifndef BITCOIN_HASH_H\n #define BITCOIN_HASH_H\n \n-#include <crypto/common.h>\n #include <crypto/ripemd160.h>\n #include <crypto/sha256.h>\n #include <prevector.h>\n@@ -139,15 +138,6 @@ class CHashWriter\n         return result;\n     }\n \n-    /**\n-     * Returns the first 64 bits from the resulting hash.\n-     */\n-    inline uint64_t GetCheapHash() {\n-        unsigned char result[CHash256::OUTPUT_SIZE];\n-        ctx.Finalize(result);\n-        return ReadLE64(result);\n-    }\n-\n     template<typename T>\n     CHashWriter& operator<<(const T& obj) {\n         // Serialize to this stream\n@@ -204,4 +194,39 @@ unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char\n \n void BIP32Hash(const ChainCode &chainCode, unsigned int nChild, unsigned char header, const unsigned char data[32], unsigned char output[64]);\n \n+/** SipHash-2-4 */\n+class CSipHasher\n+{\n+private:\n+    uint64_t v[4];\n+    uint64_t tmp;\n+    int count;\n+\n+public:\n+    /** Construct a SipHash calculator initialized with 128-bit key (k0, k1) */\n+    CSipHasher(uint64_t k0, uint64_t k1);\n+    /** Hash a 64-bit integer worth of data\n+     *  It is treated as if this was the little-endian interpretation of 8 bytes.\n+     *  This function can only be used when a multiple of 8 bytes have been written so far.\n+     */\n+    CSipHasher& Write(uint64_t data);\n+    /** Hash arbitrary bytes. */\n+    CSipHasher& Write(const unsigned char* data, size_t size);\n+    /** Compute the 64-bit SipHash-2-4 of the data written so far. The object remains untouched. */\n+    uint64_t Finalize() const;\n+};\n+\n+/** Optimized SipHash-2-4 implementation for uint256.\n+ *\n+ *  It is identical to:\n+ *    SipHasher(k0, k1)\n+ *      .Write(val.GetUint64(0))\n+ *      .Write(val.GetUint64(1))\n+ *      .Write(val.GetUint64(2))\n+ *      .Write(val.GetUint64(3))\n+ *      .Finalize()\n+ */\n+uint64_t SipHashUint256(uint64_t k0, uint64_t k1, const uint256& val);\n+uint64_t SipHashUint256Extra(uint64_t k0, uint64_t k1, const uint256& val, uint32_t extra);\n+\n #endif // BITCOIN_HASH_H"
      },
      {
        "sha": "46cd890f30c7891ad32cbfa4ff4526f995df58ae",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 14,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -11,10 +11,9 @@\n #include <rpc/server.h>\n #include <random.h>\n #include <sync.h>\n-#include <util/system.h>\n-#include <util/strencodings.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n #include <ui_interface.h>\n-#include <walletinitinterface.h>\n #include <crypto/hmac_sha256.h>\n #include <stdio.h>\n \n@@ -31,7 +30,7 @@ static const char* WWW_AUTH_HEADER_DATA = \"Basic realm=\\\"jsonrpc\\\"\";\n class HTTPRPCTimer : public RPCTimerBase\n {\n public:\n-    HTTPRPCTimer(struct event_base* eventBase, std::function<void()>& func, int64_t millis) :\n+    HTTPRPCTimer(struct event_base* eventBase, std::function<void(void)>& func, int64_t millis) :\n         ev(eventBase, false, func)\n     {\n         struct timeval tv;\n@@ -53,7 +52,7 @@ class HTTPRPCTimerInterface : public RPCTimerInterface\n     {\n         return \"HTTP\";\n     }\n-    RPCTimerBase* NewTimer(std::function<void()>& func, int64_t millis) override\n+    RPCTimerBase* NewTimer(std::function<void(void)>& func, int64_t millis) override\n     {\n         return new HTTPRPCTimer(base, func, millis);\n     }\n@@ -241,12 +240,12 @@ bool StartHTTPRPC()\n         return false;\n \n     RegisterHTTPHandler(\"/\", true, HTTPReq_JSONRPC);\n-    if (g_wallet_init_interface.HasWalletSupport()) {\n-        RegisterHTTPHandler(\"/wallet/\", false, HTTPReq_JSONRPC);\n-    }\n-    struct event_base* eventBase = EventBase();\n-    assert(eventBase);\n-    httpRPCTimerInterface = MakeUnique<HTTPRPCTimerInterface>(eventBase);\n+#ifdef ENABLE_WALLET\n+    // ifdef can be removed once we switch to better endpoint support and API versioning\n+    RegisterHTTPHandler(\"/wallet/\", false, HTTPReq_JSONRPC);\n+#endif\n+    assert(EventBase());\n+    httpRPCTimerInterface = MakeUnique<HTTPRPCTimerInterface>(EventBase());\n     RPCSetTimerInterface(httpRPCTimerInterface.get());\n     return true;\n }\n@@ -260,9 +259,9 @@ void StopHTTPRPC()\n {\n     LogPrint(BCLog::RPC, \"Stopping HTTP RPC server\\n\");\n     UnregisterHTTPHandler(\"/\", true);\n-    if (g_wallet_init_interface.HasWalletSupport()) {\n-        UnregisterHTTPHandler(\"/wallet/\", false);\n-    }\n+#ifdef ENABLE_WALLET\n+    UnregisterHTTPHandler(\"/wallet/\", false);\n+#endif\n     if (httpRPCTimerInterface) {\n         RPCUnsetTimerInterface(httpRPCTimerInterface.get());\n         httpRPCTimerInterface.reset();"
      },
      {
        "sha": "193f8d617a7418e0ae5de701a7fde314c3b069aa",
        "filename": "src/httprpc.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/httprpc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/httprpc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.h?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -23,7 +23,7 @@ void StopHTTPRPC();\n /** Start HTTP REST subsystem.\n  * Precondition; HTTP and RPC has been started.\n  */\n-void StartREST();\n+bool StartREST();\n /** Interrupt RPC REST subsystem.\n  */\n void InterruptREST();"
      },
      {
        "sha": "2a76d0d46a6c1bdf367217e345cba4b3173e5d8e",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 47,
        "deletions": 34,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -6,11 +6,10 @@\n \n #include <chainparamsbase.h>\n #include <compat.h>\n-#include <util/system.h>\n-#include <util/strencodings.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n #include <netbase.h>\n #include <rpc/protocol.h> // For HTTP status codes\n-#include <shutdown.h>\n #include <sync.h>\n #include <ui_interface.h>\n \n@@ -22,6 +21,7 @@\n #include <sys/types.h>\n #include <sys/stat.h>\n #include <signal.h>\n+#include <future>\n \n #include <event2/thread.h>\n #include <event2/buffer.h>\n@@ -69,7 +69,7 @@ class WorkQueue\n {\n private:\n     /** Mutex protects entire object */\n-    Mutex cs;\n+    std::mutex cs;\n     std::condition_variable cond;\n     std::deque<std::unique_ptr<WorkItem>> queue;\n     bool running;\n@@ -88,7 +88,7 @@ class WorkQueue\n     /** Enqueue a work item */\n     bool Enqueue(WorkItem* item)\n     {\n-        LOCK(cs);\n+        std::unique_lock<std::mutex> lock(cs);\n         if (queue.size() >= maxDepth) {\n             return false;\n         }\n@@ -102,7 +102,7 @@ class WorkQueue\n         while (true) {\n             std::unique_ptr<WorkItem> i;\n             {\n-                WAIT_LOCK(cs, lock);\n+                std::unique_lock<std::mutex> lock(cs);\n                 while (running && queue.empty())\n                     cond.wait(lock);\n                 if (!running)\n@@ -116,7 +116,7 @@ class WorkQueue\n     /** Interrupt and exit loops */\n     void Interrupt()\n     {\n-        LOCK(cs);\n+        std::unique_lock<std::mutex> lock(cs);\n         running = false;\n         cond.notify_all();\n     }\n@@ -296,37 +296,33 @@ static bool ThreadHTTP(struct event_base* base)\n /** Bind HTTP server to specified addresses */\n static bool HTTPBindAddresses(struct evhttp* http)\n {\n-    int http_port = gArgs.GetArg(\"-rpcport\", BaseParams().RPCPort());\n+    int defaultPort = gArgs.GetArg(\"-rpcport\", BaseParams().RPCPort());\n     std::vector<std::pair<std::string, uint16_t> > endpoints;\n \n     // Determine what addresses to bind to\n-    if (!(gArgs.IsArgSet(\"-rpcallowip\") && gArgs.IsArgSet(\"-rpcbind\"))) { // Default to loopback if not allowing external IPs\n-        endpoints.push_back(std::make_pair(\"::1\", http_port));\n-        endpoints.push_back(std::make_pair(\"127.0.0.1\", http_port));\n-        if (gArgs.IsArgSet(\"-rpcallowip\")) {\n-            LogPrintf(\"WARNING: option -rpcallowip was specified without -rpcbind; this doesn't usually make sense\\n\");\n-        }\n+    if (!gArgs.IsArgSet(\"-rpcallowip\")) { // Default to loopback if not allowing external IPs\n+        endpoints.push_back(std::make_pair(\"::1\", defaultPort));\n+        endpoints.push_back(std::make_pair(\"127.0.0.1\", defaultPort));\n         if (gArgs.IsArgSet(\"-rpcbind\")) {\n             LogPrintf(\"WARNING: option -rpcbind was ignored because -rpcallowip was not specified, refusing to allow everyone to connect\\n\");\n         }\n     } else if (gArgs.IsArgSet(\"-rpcbind\")) { // Specific bind address\n         for (const std::string& strRPCBind : gArgs.GetArgs(\"-rpcbind\")) {\n-            int port = http_port;\n+            int port = defaultPort;\n             std::string host;\n             SplitHostPort(strRPCBind, port, host);\n             endpoints.push_back(std::make_pair(host, port));\n         }\n+    } else { // No specific bind address specified, bind to any\n+        endpoints.push_back(std::make_pair(\"::\", defaultPort));\n+        endpoints.push_back(std::make_pair(\"0.0.0.0\", defaultPort));\n     }\n \n     // Bind addresses\n     for (std::vector<std::pair<std::string, uint16_t> >::iterator i = endpoints.begin(); i != endpoints.end(); ++i) {\n         LogPrint(BCLog::HTTP, \"Binding RPC on address %s port %i\\n\", i->first, i->second);\n         evhttp_bound_socket *bind_handle = evhttp_bind_socket_with_handle(http, i->first.empty() ? nullptr : i->first.c_str(), i->second);\n         if (bind_handle) {\n-            CNetAddr addr;\n-            if (i->first.empty() || (LookupHost(i->first.c_str(), addr, false) && addr.IsBindAny())) {\n-                LogPrintf(\"WARNING: the RPC server is not safe to expose to untrusted networks such as the public internet\\n\");\n-            }\n             boundSockets.push_back(bind_handle);\n         } else {\n             LogPrintf(\"Binding RPC on address %s port %i failed.\\n\", i->first, i->second);\n@@ -360,6 +356,13 @@ bool InitHTTPServer()\n     if (!InitHTTPAllowList())\n         return false;\n \n+    if (gArgs.GetBoolArg(\"-rpcssl\", false)) {\n+        uiInterface.ThreadSafeMessageBox(\n+            \"SSL mode for RPC (-rpcssl) is no longer supported.\",\n+            \"\", CClientUIInterface::MSG_ERROR);\n+        return false;\n+    }\n+\n     // Redirect libevent's logging to our own log\n     event_set_log_callback(&libevent_log_cb);\n     // Update libevent's log handling. Returns false if our version of\n@@ -421,14 +424,17 @@ bool UpdateHTTPServerLogging(bool enable) {\n }\n \n std::thread threadHTTP;\n+std::future<bool> threadResult;\n static std::vector<std::thread> g_thread_http_workers;\n \n void StartHTTPServer()\n {\n     LogPrint(BCLog::HTTP, \"Starting HTTP server\\n\");\n     int rpcThreads = std::max((long)gArgs.GetArg(\"-rpcthreads\", DEFAULT_HTTP_THREADS), 1L);\n     LogPrintf(\"HTTP: starting %d worker threads\\n\", rpcThreads);\n-    threadHTTP = std::thread(ThreadHTTP, eventBase);\n+    std::packaged_task<bool(event_base*)> task(ThreadHTTP);\n+    threadResult = task.get_future();\n+    threadHTTP = std::thread(std::move(task), eventBase);\n \n     for (int i = 0; i < rpcThreads; i++) {\n         g_thread_http_workers.emplace_back(HTTPWorkQueueRun, workQueue);\n@@ -439,6 +445,10 @@ void InterruptHTTPServer()\n {\n     LogPrint(BCLog::HTTP, \"Interrupting HTTP server\\n\");\n     if (eventHTTP) {\n+        // Unlisten sockets\n+        for (evhttp_bound_socket *socket : boundSockets) {\n+            evhttp_del_accept_socket(eventHTTP, socket);\n+        }\n         // Reject requests on current connections\n         evhttp_set_gencb(eventHTTP, http_reject_request_cb, nullptr);\n     }\n@@ -458,14 +468,20 @@ void StopHTTPServer()\n         delete workQueue;\n         workQueue = nullptr;\n     }\n-    // Unlisten sockets, these are what make the event loop running, which means\n-    // that after this and all connections are closed the event loop will quit.\n-    for (evhttp_bound_socket *socket : boundSockets) {\n-        evhttp_del_accept_socket(eventHTTP, socket);\n-    }\n-    boundSockets.clear();\n     if (eventBase) {\n         LogPrint(BCLog::HTTP, \"Waiting for HTTP event thread to exit\\n\");\n+        // Exit the event loop as soon as there are no active events.\n+        event_base_loopexit(eventBase, nullptr);\n+        // Give event loop a few seconds to exit (to send back last RPC responses), then break it\n+        // Before this was solved with event_base_loopexit, but that didn't work as expected in\n+        // at least libevent 2.0.21 and always introduced a delay. In libevent\n+        // master that appears to be solved, so in the future that solution\n+        // could be used again (if desirable).\n+        // (see discussion in https://github.com/bitcoin/bitcoin/pull/6990)\n+        if (threadResult.valid() && threadResult.wait_for(std::chrono::milliseconds(2000)) == std::future_status::timeout) {\n+            LogPrintf(\"HTTP event loop did not exit within allotted time, sending loopbreak\\n\");\n+            event_base_loopbreak(eventBase);\n+        }\n         threadHTTP.join();\n     }\n     if (eventHTTP) {\n@@ -493,7 +509,7 @@ static void httpevent_callback_fn(evutil_socket_t, short, void* data)\n         delete self;\n }\n \n-HTTPEvent::HTTPEvent(struct event_base* base, bool _deleteWhenTriggered, const std::function<void()>& _handler):\n+HTTPEvent::HTTPEvent(struct event_base* base, bool _deleteWhenTriggered, const std::function<void(void)>& _handler):\n     deleteWhenTriggered(_deleteWhenTriggered), handler(_handler)\n {\n     ev = event_new(base, -1, 0, httpevent_callback_fn, this);\n@@ -524,7 +540,7 @@ HTTPRequest::~HTTPRequest()\n     // evhttpd cleans up the request, as long as a reply was sent.\n }\n \n-std::pair<bool, std::string> HTTPRequest::GetHeader(const std::string& hdr) const\n+std::pair<bool, std::string> HTTPRequest::GetHeader(const std::string& hdr)\n {\n     const struct evkeyvalq* headers = evhttp_request_get_input_headers(req);\n     assert(headers);\n@@ -570,9 +586,6 @@ void HTTPRequest::WriteHeader(const std::string& hdr, const std::string& value)\n void HTTPRequest::WriteReply(int nStatus, const std::string& strReply)\n {\n     assert(!replySent && req);\n-    if (ShutdownRequested()) {\n-        WriteHeader(\"Connection\", \"close\");\n-    }\n     // Send event to main http thread to send reply message\n     struct evbuffer* evb = evhttp_request_get_output_buffer(req);\n     assert(evb);\n@@ -597,7 +610,7 @@ void HTTPRequest::WriteReply(int nStatus, const std::string& strReply)\n     req = nullptr; // transferred back to main thread\n }\n \n-CService HTTPRequest::GetPeer() const\n+CService HTTPRequest::GetPeer()\n {\n     evhttp_connection* con = evhttp_request_get_connection(req);\n     CService peer;\n@@ -611,12 +624,12 @@ CService HTTPRequest::GetPeer() const\n     return peer;\n }\n \n-std::string HTTPRequest::GetURI() const\n+std::string HTTPRequest::GetURI()\n {\n     return evhttp_request_get_uri(req);\n }\n \n-HTTPRequest::RequestMethod HTTPRequest::GetRequestMethod() const\n+HTTPRequest::RequestMethod HTTPRequest::GetRequestMethod()\n {\n     switch (evhttp_request_get_command(req)) {\n     case EVHTTP_REQ_GET:"
      },
      {
        "sha": "fa7cc4a5d393ba01468885f50978fa1d53dca20e",
        "filename": "src/httpserver.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/httpserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/httpserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.h?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -74,21 +74,21 @@ class HTTPRequest\n \n     /** Get requested URI.\n      */\n-    std::string GetURI() const;\n+    std::string GetURI();\n \n     /** Get CService (address:ip) for the origin of the http request.\n      */\n-    CService GetPeer() const;\n+    CService GetPeer();\n \n     /** Get request method.\n      */\n-    RequestMethod GetRequestMethod() const;\n+    RequestMethod GetRequestMethod();\n \n     /**\n      * Get the request header specified by hdr, or an empty string.\n      * Return a pair (isPresent,string).\n      */\n-    std::pair<bool, std::string> GetHeader(const std::string& hdr) const;\n+    std::pair<bool, std::string> GetHeader(const std::string& hdr);\n \n     /**\n      * Read request body.\n@@ -134,7 +134,7 @@ class HTTPEvent\n      * deleteWhenTriggered deletes this event object after the event is triggered (and the handler called)\n      * handler is the handler to call when the event is triggered.\n      */\n-    HTTPEvent(struct event_base* base, bool deleteWhenTriggered, const std::function<void()>& handler);\n+    HTTPEvent(struct event_base* base, bool deleteWhenTriggered, const std::function<void(void)>& handler);\n     ~HTTPEvent();\n \n     /** Trigger the event. If tv is 0, trigger it immediately. Otherwise trigger it after\n@@ -143,7 +143,7 @@ class HTTPEvent\n     void trigger(struct timeval* tv);\n \n     bool deleteWhenTriggered;\n-    std::function<void()> handler;\n+    std::function<void(void)> handler;\n private:\n     struct event* ev;\n };"
      },
      {
        "sha": "788f7adccd9f14b8087dabefa230a07a21f2c0b1",
        "filename": "src/index/base.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/index/base.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/index/base.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -7,7 +7,7 @@\n #include <shutdown.h>\n #include <tinyformat.h>\n #include <ui_interface.h>\n-#include <util/system.h>\n+#include <util.h>\n #include <validation.h>\n #include <warnings.h>\n \n@@ -65,7 +65,7 @@ bool BaseIndex::Init()\n     return true;\n }\n \n-static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev)\n {\n     AssertLockHeld(cs_main);\n "
      },
      {
        "sha": "c85030e18e64a7d67d64104f348fdd8e7ff7f009",
        "filename": "src/index/txindex.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/index/txindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/index/txindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -5,7 +5,7 @@\n #include <index/txindex.h>\n #include <shutdown.h>\n #include <ui_interface.h>\n-#include <util/system.h>\n+#include <util.h>\n #include <validation.h>\n \n #include <boost/thread.hpp>\n@@ -250,7 +250,7 @@ bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n     vPos.reserve(block.vtx.size());\n     for (const auto& tx : block.vtx) {\n         vPos.emplace_back(tx->GetHash(), pos);\n-        pos.nTxOffset += ::GetSerializeSize(*tx, CLIENT_VERSION);\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n     }\n     return m_db->WriteTxs(vPos);\n }"
      },
      {
        "sha": "c16009a0baf4070bfd9b1773262d1753d37799fb",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 125,
        "deletions": 115,
        "changes": 240,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -19,7 +19,6 @@\n #include <fs.h>\n #include <httpserver.h>\n #include <httprpc.h>\n-#include <interfaces/chain.h>\n #include <index/txindex.h>\n #include <key.h>\n #include <validation.h>\n@@ -33,7 +32,6 @@\n #include <rpc/server.h>\n #include <rpc/register.h>\n #include <rpc/blockchain.h>\n-#include <rpc/util.h>\n #include <script/standard.h>\n #include <script/sigcache.h>\n #include <scheduler.h>\n@@ -43,8 +41,8 @@\n #include <txmempool.h>\n #include <torcontrol.h>\n #include <ui_interface.h>\n-#include <util/system.h>\n-#include <util/moneystr.h>\n+#include <util.h>\n+#include <utilmoneystr.h>\n #include <validationinterface.h>\n #include <warnings.h>\n #include <walletinitinterface.h>\n@@ -53,17 +51,17 @@\n \n #ifndef WIN32\n #include <signal.h>\n-#include <sys/stat.h>\n #endif\n \n #include <boost/algorithm/string/classification.hpp>\n #include <boost/algorithm/string/replace.hpp>\n #include <boost/algorithm/string/split.hpp>\n+#include <boost/bind.hpp>\n+#include <boost/interprocess/sync/file_lock.hpp>\n #include <boost/thread.hpp>\n #include <openssl/crypto.h>\n \n #if ENABLE_ZMQ\n-#include <zmq/zmqabstractnotifier.h>\n #include <zmq/zmqnotificationinterface.h>\n #include <zmq/zmqrpc.h>\n #endif\n@@ -76,6 +74,33 @@ static const bool DEFAULT_STOPAFTERBLOCKIMPORT = false;\n std::unique_ptr<CConnman> g_connman;\n std::unique_ptr<PeerLogicValidation> peerLogic;\n \n+#if !(ENABLE_WALLET)\n+class DummyWalletInit : public WalletInitInterface {\n+public:\n+\n+    void AddWalletOptions() const override;\n+    bool ParameterInteraction() const override {return true;}\n+    void RegisterRPC(CRPCTable &) const override {}\n+    bool Verify() const override {return true;}\n+    bool Open() const override {LogPrintf(\"No wallet support compiled in!\\n\"); return true;}\n+    void Start(CScheduler& scheduler) const override {}\n+    void Flush() const override {}\n+    void Stop() const override {}\n+    void Close() const override {}\n+};\n+\n+void DummyWalletInit::AddWalletOptions() const\n+{\n+    std::vector<std::string> opts = {\"-addresstype\", \"-changetype\", \"-disablewallet\", \"-discardfee=<amt>\", \"-fallbackfee=<amt>\",\n+        \"-keypool=<n>\", \"-mintxfee=<amt>\", \"-paytxfee=<amt>\", \"-rescan\", \"-salvagewallet\", \"-spendzeroconfchange\",  \"-txconfirmtarget=<n>\",\n+        \"-upgradewallet\", \"-wallet=<path>\", \"-walletbroadcast\", \"-walletdir=<dir>\", \"-walletnotify=<cmd>\", \"-walletrbf\", \"-zapwallettxes=<mode>\",\n+        \"-dblogsize=<n>\", \"-flushwallet\", \"-privdb\", \"-walletrejectlongchains\"};\n+    gArgs.AddHiddenArgs(opts);\n+}\n+\n+const WalletInitInterface& g_wallet_init_interface = DummyWalletInit();\n+#endif\n+\n #ifdef WIN32\n // Win32 LevelDB doesn't use filedescriptors, and the ones used for\n // accessing block files don't count towards the fd_set size limit\n@@ -158,7 +183,7 @@ void Interrupt()\n     }\n }\n \n-void Shutdown(InitInterfaces& interfaces)\n+void Shutdown()\n {\n     LogPrintf(\"%s: In progress...\\n\", __func__);\n     static CCriticalSection cs_Shutdown;\n@@ -177,9 +202,7 @@ void Shutdown(InitInterfaces& interfaces)\n     StopREST();\n     StopRPC();\n     StopHTTPServer();\n-    for (const auto& client : interfaces.chain_clients) {\n-        client->flush();\n-    }\n+    g_wallet_init_interface.Flush();\n     StopMapPort();\n \n     // Because these depend on each-other, we make sure that neither can be\n@@ -242,9 +265,7 @@ void Shutdown(InitInterfaces& interfaces)\n         pcoinsdbview.reset();\n         pblocktree.reset();\n     }\n-    for (const auto& client : interfaces.chain_clients) {\n-        client->stop();\n-    }\n+    g_wallet_init_interface.Stop();\n \n #if ENABLE_ZMQ\n     if (g_zmq_notification_interface) {\n@@ -264,7 +285,7 @@ void Shutdown(InitInterfaces& interfaces)\n     UnregisterAllValidationInterfaces();\n     GetMainSignals().UnregisterBackgroundSignalScheduler();\n     GetMainSignals().UnregisterWithMempoolSignals(mempool);\n-    interfaces.chain_clients.clear();\n+    g_wallet_init_interface.Close();\n     globalVerifyHandle.reset();\n     ECC_Stop();\n     LogPrintf(\"%s: done\\n\", __func__);\n@@ -307,12 +328,12 @@ static void registerSignalHandler(int signal, void(*handler)(int))\n \n static void OnRPCStarted()\n {\n-    uiInterface.NotifyBlockTip_connect(&RPCNotifyBlockChange);\n+    uiInterface.NotifyBlockTip.connect(&RPCNotifyBlockChange);\n }\n \n static void OnRPCStopped()\n {\n-    uiInterface.NotifyBlockTip_disconnect(&RPCNotifyBlockChange);\n+    uiInterface.NotifyBlockTip.disconnect(&RPCNotifyBlockChange);\n     RPCNotifyBlockChange(false, nullptr);\n     g_best_block_cv.notify_all();\n     LogPrint(BCLog::RPC, \"RPC stopped.\\n\");\n@@ -322,14 +343,12 @@ void SetupServerArgs()\n {\n     const auto defaultBaseParams = CreateBaseChainParams(CBaseChainParams::MAIN);\n     const auto testnetBaseParams = CreateBaseChainParams(CBaseChainParams::TESTNET);\n-    const auto regtestBaseParams = CreateBaseChainParams(CBaseChainParams::REGTEST);\n     const auto defaultChainParams = CreateChainParams(CBaseChainParams::MAIN);\n     const auto testnetChainParams = CreateChainParams(CBaseChainParams::TESTNET);\n-    const auto regtestChainParams = CreateChainParams(CBaseChainParams::REGTEST);\n \n     // Hidden Options\n-    std::vector<std::string> hidden_args = {\"-h\", \"-help\",\n-        \"-dbcrashratio\", \"-forcecompactdb\",\n+    std::vector<std::string> hidden_args = {\"-rpcssl\", \"-benchmark\", \"-h\", \"-help\", \"-socks\", \"-tor\", \"-debugnet\", \"-whitelistalwaysrelay\",\n+        \"-prematurewitness\", \"-walletprematurewitness\", \"-promiscuousmempoolflags\", \"-blockminsize\", \"-dbcrashratio\", \"-forcecompactdb\", \"-usehd\",\n         // GUI args. These will be overwritten by SetupUIArgs for the GUI\n         \"-allowselfsignedrootcertificates\", \"-choosedatadir\", \"-lang=<lang>\", \"-min\", \"-resetguisettings\", \"-rootcertificates=<file>\", \"-splash\", \"-uiplatform\"};\n \n@@ -367,7 +386,7 @@ void SetupServerArgs()\n             \"Warning: Reverting this setting requires re-downloading the entire blockchain. \"\n             \"(default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, >=%u = automatically prune block files to stay under the specified target size in MiB)\", MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-reindex\", \"Rebuild chain state and block index from the blk*.dat files on disk\", false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-reindex-chainstate\", \"Rebuild chain state from the currently indexed blocks. When in pruning mode or if blocks on disk might be corrupted, use full -reindex instead.\", false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-reindex-chainstate\", \"Rebuild chain state from the currently indexed blocks\", false, OptionsCategory::OPTIONS);\n #ifndef WIN32\n     gArgs.AddArg(\"-sysperms\", \"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)\", false, OptionsCategory::OPTIONS);\n #else\n@@ -397,12 +416,11 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-onlynet=<net>\", \"Make outgoing connections only through network <net> (ipv4, ipv6 or onion). Incoming connections are not affected by this option. This option can be specified multiple times to allow multiple networks.\", false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-peerbloomfilters\", strprintf(\"Support filtering of blocks and transaction with bloom filters (default: %u)\", DEFAULT_PEERBLOOMFILTERS), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-permitbaremultisig\", strprintf(\"Relay non-P2SH multisig (default: %u)\", DEFAULT_PERMIT_BAREMULTISIG), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-port=<port>\", strprintf(\"Listen for connections on <port> (default: %u, testnet: %u, regtest: %u)\", defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort(), regtestChainParams->GetDefaultPort()), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-port=<port>\", strprintf(\"Listen for connections on <port> (default: %u or testnet: %u)\", defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort()), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-proxy=<ip:port>\", \"Connect through SOCKS5 proxy, set -noproxy to disable (default: disabled)\", false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-proxyrandomize\", strprintf(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\", DEFAULT_PROXYRANDOMIZE), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-seednode=<ip>\", \"Connect to a node to retrieve peer addresses, and disconnect. This option can be specified multiple times to connect to multiple nodes.\", false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-timeout=<n>\", strprintf(\"Specify connection timeout in milliseconds (minimum: 1, default: %d)\", DEFAULT_CONNECT_TIMEOUT), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-peertimeout=<n>\", strprintf(\"Specify p2p connection timeout in seconds. This option determines the amount of time a peer may be inactive before the connection to it is dropped. (minimum: 1, default: %d)\", DEFAULT_PEER_CONNECT_TIMEOUT), true, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-torcontrol=<ip>:<port>\", strprintf(\"Tor control port to use if onion listening enabled (default: %s)\", DEFAULT_TOR_CONTROL), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-torpassword=<pass>\", \"Tor control port password (default: empty)\", false, OptionsCategory::CONNECTION);\n #ifdef USE_UPNP\n@@ -425,32 +443,17 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-zmqpubhashtx=<address>\", \"Enable publish hash transaction in <address>\", false, OptionsCategory::ZMQ);\n     gArgs.AddArg(\"-zmqpubrawblock=<address>\", \"Enable publish raw block in <address>\", false, OptionsCategory::ZMQ);\n     gArgs.AddArg(\"-zmqpubrawtx=<address>\", \"Enable publish raw transaction in <address>\", false, OptionsCategory::ZMQ);\n-    gArgs.AddArg(\"-zmqpubhashblockhwm=<n>\", strprintf(\"Set publish hash block outbound message high water mark (default: %d)\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM), false, OptionsCategory::ZMQ);\n-    gArgs.AddArg(\"-zmqpubhashtxhwm=<n>\", strprintf(\"Set publish hash transaction outbound message high water mark (default: %d)\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM), false, OptionsCategory::ZMQ);\n-    gArgs.AddArg(\"-zmqpubrawblockhwm=<n>\", strprintf(\"Set publish raw block outbound message high water mark (default: %d)\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM), false, OptionsCategory::ZMQ);\n-    gArgs.AddArg(\"-zmqpubrawtxhwm=<n>\", strprintf(\"Set publish raw transaction outbound message high water mark (default: %d)\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM), false, OptionsCategory::ZMQ);\n #else\n     hidden_args.emplace_back(\"-zmqpubhashblock=<address>\");\n     hidden_args.emplace_back(\"-zmqpubhashtx=<address>\");\n     hidden_args.emplace_back(\"-zmqpubrawblock=<address>\");\n     hidden_args.emplace_back(\"-zmqpubrawtx=<address>\");\n-    hidden_args.emplace_back(\"-zmqpubhashblockhwm=<n>\");\n-    hidden_args.emplace_back(\"-zmqpubhashtxhwm=<n>\");\n-    hidden_args.emplace_back(\"-zmqpubrawblockhwm=<n>\");\n-    hidden_args.emplace_back(\"-zmqpubrawtxhwm=<n>\");\n #endif\n \n     gArgs.AddArg(\"-checkblocks=<n>\", strprintf(\"How many blocks to check at startup (default: %u, 0 = all)\", DEFAULT_CHECKBLOCKS), true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-checklevel=<n>\", strprintf(\"How thorough the block verification of -checkblocks is: \"\n-        \"level 0 reads the blocks from disk, \"\n-        \"level 1 verifies block validity, \"\n-        \"level 2 verifies undo data, \"\n-        \"level 3 checks disconnection of tip blocks, \"\n-        \"and level 4 tries to reconnect the blocks, \"\n-        \"each level includes the checks of the previous levels \"\n-        \"(0-4, default: %u)\", DEFAULT_CHECKLEVEL), true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-checkblockindex\", strprintf(\"Do a full consistency check for mapBlockIndex, setBlockIndexCandidates, chainActive and mapBlocksUnlinked occasionally. (default: %u, regtest: %u)\", defaultChainParams->DefaultConsistencyChecks(), regtestChainParams->DefaultConsistencyChecks()), true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-checkmempool=<n>\", strprintf(\"Run checks every <n> transactions (default: %u, regtest: %u)\", defaultChainParams->DefaultConsistencyChecks(), regtestChainParams->DefaultConsistencyChecks()), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-checklevel=<n>\", strprintf(\"How thorough the block verification of -checkblocks is (0-4, default: %u)\", DEFAULT_CHECKLEVEL), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-checkblockindex\", strprintf(\"Do a full consistency check for mapBlockIndex, setBlockIndexCandidates, chainActive and mapBlocksUnlinked occasionally. (default: %u)\", defaultChainParams->DefaultConsistencyChecks()), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-checkmempool=<n>\", strprintf(\"Run checks every <n> transactions (default: %u)\", defaultChainParams->DefaultConsistencyChecks()), true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-checkpoints\", strprintf(\"Disable expensive verification for known chain history (default: %u)\", DEFAULT_CHECKPOINTS_ENABLED), true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-deprecatedrpc=<method>\", \"Allows deprecated RPC method(s) to be used\", true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-dropmessagestest=<n>\", \"Randomly drop 1 of every <n> network messages\", true, OptionsCategory::DEBUG_TEST);\n@@ -460,11 +463,12 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-limitancestorsize=<n>\", strprintf(\"Do not accept transactions whose size with all in-mempool ancestors exceeds <n> kilobytes (default: %u)\", DEFAULT_ANCESTOR_SIZE_LIMIT), true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT), true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-vbparams=deployment:start:end\", \"Use given start/end times for specified version bits deployment (regtest-only)\", true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-addrmantest\", \"Allows to test address relay on localhost\", true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-debug=<category>\", \"Output debugging information (default: -nodebug, supplying <category> is optional). \"\n         \"If <category> is not supplied or if <category> = 1, output all debugging information. <category> can be: \" + ListLogCategories() + \".\", false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-debugexclude=<category>\", strprintf(\"Exclude debugging information for a category. Can be used in conjunction with -debug=1 to output debug logs for all categories except one or more specified categories.\"), false, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-help-debug\", \"Print help message with debugging options and exit\", false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-help-debug\", \"Show all debugging options (usage: --help -help-debug)\", false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-logips\", strprintf(\"Include IP addresses in debug output (default: %u)\", DEFAULT_LOGIPS), false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-logtimestamps\", strprintf(\"Prepend debug output with timestamp (default: %u)\", DEFAULT_LOGTIMESTAMPS), false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-logtimemicros\", strprintf(\"Add microsecond precision to debug timestamps (default: %u)\", DEFAULT_LOGTIMEMICROS), true, OptionsCategory::DEBUG_TEST);\n@@ -499,11 +503,11 @@ void SetupServerArgs()\n \n     gArgs.AddArg(\"-rest\", strprintf(\"Accept public REST requests (default: %u)\", DEFAULT_REST_ENABLE), false, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpcallowip=<ip>\", \"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\", false, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcauth=<userpw>\", \"Username and HMAC-SHA-256 hashed password for JSON-RPC connections. The field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A canonical python script is included in share/rpcauth. The client then connects normally using the rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This option can be specified multiple times\", false, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcbind=<addr>[:port]\", \"Bind to given address to listen for JSON-RPC connections. Do not expose the RPC server to untrusted networks such as the public internet! This option is ignored unless -rpcallowip is also passed. Port is optional and overrides -rpcport. Use [host]:port notation for IPv6. This option can be specified multiple times (default: 127.0.0.1 and ::1 i.e., localhost)\", false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcauth=<userpw>\", \"Username and hashed password for JSON-RPC connections. The field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A canonical python script is included in share/rpcauth. The client then connects normally using the rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This option can be specified multiple times\", false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcbind=<addr>[:port]\", \"Bind to given address to listen for JSON-RPC connections. This option is ignored unless -rpcallowip is also passed. Port is optional and overrides -rpcport. Use [host]:port notation for IPv6. This option can be specified multiple times (default: 127.0.0.1 and ::1 i.e., localhost, or if -rpcallowip has been specified, 0.0.0.0 and :: i.e., all addresses)\", false, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpccookiefile=<loc>\", \"Location of the auth cookie. Relative paths will be prefixed by a net-specific datadir location. (default: data dir)\", false, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpcpassword=<pw>\", \"Password for JSON-RPC connections\", false, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcport=<port>\", strprintf(\"Listen for JSON-RPC connections on <port> (default: %u, testnet: %u, regtest: %u)\", defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort(), regtestBaseParams->RPCPort()), false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcport=<port>\", strprintf(\"Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)\", defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort()), false, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpcserialversion\", strprintf(\"Sets the serialization of raw transaction or block hex returned in non-verbose mode, non-segwit(0) or segwit(1) (default: %d)\", DEFAULT_RPC_SERIALIZE_VERSION), false, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpcservertimeout=<n>\", strprintf(\"Timeout during HTTP requests (default: %d)\", DEFAULT_HTTP_SERVER_TIMEOUT), true, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpcthreads=<n>\", strprintf(\"Set the number of threads to service RPC calls (default: %d)\", DEFAULT_HTTP_THREADS), false, OptionsCategory::RPC);\n@@ -557,17 +561,17 @@ static void BlockNotifyCallback(bool initialSync, const CBlockIndex *pBlockIndex\n }\n \n static bool fHaveGenesis = false;\n-static Mutex g_genesis_wait_mutex;\n-static std::condition_variable g_genesis_wait_cv;\n+static CWaitableCriticalSection cs_GenesisWait;\n+static CConditionVariable condvar_GenesisWait;\n \n static void BlockNotifyGenesisWait(bool, const CBlockIndex *pBlockIndex)\n {\n     if (pBlockIndex != nullptr) {\n         {\n-            LOCK(g_genesis_wait_mutex);\n+            WaitableLock lock_GenesisWait(cs_GenesisWait);\n             fHaveGenesis = true;\n         }\n-        g_genesis_wait_cv.notify_all();\n+        condvar_GenesisWait.notify_all();\n     }\n }\n \n@@ -705,7 +709,7 @@ static void ThreadImport(std::vector<fs::path> vImportFiles)\n  *  Ensure that Bitcoin is running in a usable environment with all\n  *  necessary library support.\n  */\n-static bool InitSanityCheck()\n+static bool InitSanityCheck(void)\n {\n     if(!ECC_InitSanityCheck()) {\n         InitError(\"Elliptic curve cryptography sanity check failure. Aborting.\");\n@@ -732,7 +736,8 @@ static bool AppInitServers()\n     StartRPC();\n     if (!StartHTTPRPC())\n         return false;\n-    if (gArgs.GetBoolArg(\"-rest\", DEFAULT_REST_ENABLE)) StartREST();\n+    if (gArgs.GetBoolArg(\"-rest\", DEFAULT_REST_ENABLE) && !StartREST())\n+        return false;\n     StartHTTPServer();\n     return true;\n }\n@@ -803,15 +808,7 @@ void InitParameterInteraction()\n     // Warn if network-specific options (-addnode, -connect, etc) are\n     // specified in default section of config file, but not overridden\n     // on the command line or in this network's section of the config file.\n-    std::string network = gArgs.GetChainName();\n-    for (const auto& arg : gArgs.GetUnsuitableSectionOnlyArgs()) {\n-        InitWarning(strprintf(_(\"Config setting for %s only applied on %s network when in [%s] section.\"), arg, network, network));\n-    }\n-\n-    // Warn if unrecognized section name are present in the config file.\n-    for (const auto& section : gArgs.GetUnrecognizedSections()) {\n-        InitWarning(strprintf(_(\"Section [%s] is not recognized.\"), section));\n-    }\n+    gArgs.WarnForSectionOnlyArgs();\n }\n \n static std::string ResolveErrMsg(const char * const optname, const std::string& strBind)\n@@ -856,7 +853,6 @@ int nMaxConnections;\n int nUserMaxConnections;\n int nFD;\n ServiceFlags nLocalServices = ServiceFlags(NODE_NETWORK | NODE_NETWORK_LIMITED);\n-int64_t peer_connect_timeout;\n \n } // namespace\n \n@@ -984,6 +980,25 @@ bool AppInitParameterInteraction()\n         }\n     }\n \n+    // Check for -debugnet\n+    if (gArgs.GetBoolArg(\"-debugnet\", false))\n+        InitWarning(_(\"Unsupported argument -debugnet ignored, use -debug=net.\"));\n+    // Check for -socks - as this is a privacy risk to continue, exit here\n+    if (gArgs.IsArgSet(\"-socks\"))\n+        return InitError(_(\"Unsupported argument -socks found. Setting SOCKS version isn't possible anymore, only SOCKS5 proxies are supported.\"));\n+    // Check for -tor - as this is a privacy risk to continue, exit here\n+    if (gArgs.GetBoolArg(\"-tor\", false))\n+        return InitError(_(\"Unsupported argument -tor found, use -onion.\"));\n+\n+    if (gArgs.GetBoolArg(\"-benchmark\", false))\n+        InitWarning(_(\"Unsupported argument -benchmark ignored, use -debug=bench.\"));\n+\n+    if (gArgs.GetBoolArg(\"-whitelistalwaysrelay\", false))\n+        InitWarning(_(\"Unsupported argument -whitelistalwaysrelay ignored, use -whitelistrelay and/or -whitelistforcerelay.\"));\n+\n+    if (gArgs.IsArgSet(\"-blockminsize\"))\n+        InitWarning(\"Unsupported argument -blockminsize ignored.\");\n+\n     // Checkmempool and checkblockindex default to true in regtest mode\n     int ratio = std::min<int>(std::max<int>(gArgs.GetArg(\"-checkmempool\", chainparams.DefaultConsistencyChecks() ? 1 : 0), 0), 1000000);\n     if (ratio != 0) {\n@@ -1055,14 +1070,8 @@ bool AppInitParameterInteraction()\n     }\n \n     nConnectTimeout = gArgs.GetArg(\"-timeout\", DEFAULT_CONNECT_TIMEOUT);\n-    if (nConnectTimeout <= 0) {\n+    if (nConnectTimeout <= 0)\n         nConnectTimeout = DEFAULT_CONNECT_TIMEOUT;\n-    }\n-\n-    peer_connect_timeout = gArgs.GetArg(\"-peertimeout\", DEFAULT_PEER_CONNECT_TIMEOUT);\n-    if (peer_connect_timeout <= 0) {\n-        return InitError(\"peertimeout cannot be configured with a negative value.\");\n-    }\n \n     if (gArgs.IsArgSet(\"-minrelaytxfee\")) {\n         CAmount n = 0;\n@@ -1130,6 +1139,39 @@ bool AppInitParameterInteraction()\n         fEnableReplacement = (std::find(vstrReplacementModes.begin(), vstrReplacementModes.end(), \"fee\") != vstrReplacementModes.end());\n     }\n \n+    if (gArgs.IsArgSet(\"-vbparams\")) {\n+        // Allow overriding version bits parameters for testing\n+        if (!chainparams.MineBlocksOnDemand()) {\n+            return InitError(\"Version bits parameters may only be overridden on regtest.\");\n+        }\n+        for (const std::string& strDeployment : gArgs.GetArgs(\"-vbparams\")) {\n+            std::vector<std::string> vDeploymentParams;\n+            boost::split(vDeploymentParams, strDeployment, boost::is_any_of(\":\"));\n+            if (vDeploymentParams.size() != 3) {\n+                return InitError(\"Version bits parameters malformed, expecting deployment:start:end\");\n+            }\n+            int64_t nStartTime, nTimeout;\n+            if (!ParseInt64(vDeploymentParams[1], &nStartTime)) {\n+                return InitError(strprintf(\"Invalid nStartTime (%s)\", vDeploymentParams[1]));\n+            }\n+            if (!ParseInt64(vDeploymentParams[2], &nTimeout)) {\n+                return InitError(strprintf(\"Invalid nTimeout (%s)\", vDeploymentParams[2]));\n+            }\n+            bool found = false;\n+            for (int j=0; j<(int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; ++j)\n+            {\n+                if (vDeploymentParams[0].compare(VersionBitsDeploymentInfo[j].name) == 0) {\n+                    UpdateVersionBitsParameters(Consensus::DeploymentPos(j), nStartTime, nTimeout);\n+                    found = true;\n+                    LogPrintf(\"Setting version bits activation parameters for %s to start=%ld, timeout=%ld\\n\", vDeploymentParams[0], nStartTime, nTimeout);\n+                    break;\n+                }\n+            }\n+            if (!found) {\n+                return InitError(strprintf(\"Invalid deployment (%s)\", vDeploymentParams[0]));\n+            }\n+        }\n+    }\n     return true;\n }\n \n@@ -1179,7 +1221,7 @@ bool AppInitLockDataDirectory()\n     return true;\n }\n \n-bool AppInitMain(InitInterfaces& interfaces)\n+bool AppInitMain()\n {\n     const CChainParams& chainparams = Params();\n     // ********************************************************* Step 4a: application initialization\n@@ -1202,19 +1244,7 @@ bool AppInitMain(InitInterfaces& interfaces)\n         LogPrintf(\"Startup time: %s\\n\", FormatISO8601DateTime(GetTime()));\n     LogPrintf(\"Default data directory %s\\n\", GetDefaultDataDir().string());\n     LogPrintf(\"Using data directory %s\\n\", GetDataDir().string());\n-\n-    // Only log conf file usage message if conf file actually exists.\n-    fs::path config_file_path = GetConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME));\n-    if (fs::exists(config_file_path)) {\n-        LogPrintf(\"Config file: %s\\n\", config_file_path.string());\n-    } else if (gArgs.IsArgSet(\"-conf\")) {\n-        // Warn if no conf file exists at path provided by user\n-        InitWarning(strprintf(_(\"The specified config file %s does not exist\\n\"), config_file_path.string()));\n-    } else {\n-        // Not categorizing as \"Warning\" because it's the default behavior\n-        LogPrintf(\"Config file: %s (not found, skipping)\\n\", config_file_path.string());\n-    }\n-\n+    LogPrintf(\"Using config file %s\\n\", GetConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME)).string());\n     LogPrintf(\"Using at most %i automatic connections (%i file descriptors available)\\n\", nMaxConnections, nFD);\n \n     // Warn about relative -datadir path.\n@@ -1236,26 +1266,17 @@ bool AppInitMain(InitInterfaces& interfaces)\n     }\n \n     // Start the lightweight task scheduler thread\n-    CScheduler::Function serviceLoop = std::bind(&CScheduler::serviceQueue, &scheduler);\n-    threadGroup.create_thread(std::bind(&TraceThread<CScheduler::Function>, \"scheduler\", serviceLoop));\n+    CScheduler::Function serviceLoop = boost::bind(&CScheduler::serviceQueue, &scheduler);\n+    threadGroup.create_thread(boost::bind(&TraceThread<CScheduler::Function>, \"scheduler\", serviceLoop));\n \n     GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n     GetMainSignals().RegisterWithMempoolSignals(mempool);\n \n-    // Create client interfaces for wallets that are supposed to be loaded\n-    // according to -wallet and -disablewallet options. This only constructs\n-    // the interfaces, it doesn't load wallet data. Wallets actually get loaded\n-    // when load() and start() interface methods are called below.\n-    g_wallet_init_interface.Construct(interfaces);\n-\n     /* Register RPC commands regardless of -server setting so they will be\n      * available in the GUI RPC console even if external calls are disabled.\n      */\n     RegisterAllCoreRPCCommands(tableRPC);\n-    for (const auto& client : interfaces.chain_clients) {\n-        client->registerRpcs();\n-    }\n-    g_rpc_interfaces = &interfaces;\n+    g_wallet_init_interface.RegisterRPC(tableRPC);\n #if ENABLE_ZMQ\n     RegisterZMQRPCCommands(tableRPC);\n #endif\n@@ -1267,17 +1288,13 @@ bool AppInitMain(InitInterfaces& interfaces)\n      */\n     if (gArgs.GetBoolArg(\"-server\", false))\n     {\n-        uiInterface.InitMessage_connect(SetRPCWarmupStatus);\n+        uiInterface.InitMessage.connect(SetRPCWarmupStatus);\n         if (!AppInitServers())\n             return InitError(_(\"Unable to start HTTP server. See debug log for details.\"));\n     }\n \n     // ********************************************************* Step 5: verify wallet database integrity\n-    for (const auto& client : interfaces.chain_clients) {\n-        if (!client->verify()) {\n-            return false;\n-        }\n-    }\n+    if (!g_wallet_init_interface.Verify()) return false;\n \n     // ********************************************************* Step 6: network initialization\n     // Note that we absolutely cannot open any actual connections\n@@ -1596,11 +1613,7 @@ bool AppInitMain(InitInterfaces& interfaces)\n     }\n \n     // ********************************************************* Step 9: load wallet\n-    for (const auto& client : interfaces.chain_clients) {\n-        if (!client->load()) {\n-            return false;\n-        }\n-    }\n+    if (!g_wallet_init_interface.Open()) return false;\n \n     // ********************************************************* Step 10: data directory maintenance\n \n@@ -1632,31 +1645,31 @@ bool AppInitMain(InitInterfaces& interfaces)\n     // Either install a handler to notify us when genesis activates, or set fHaveGenesis directly.\n     // No locking, as this happens before any background thread is started.\n     if (chainActive.Tip() == nullptr) {\n-        uiInterface.NotifyBlockTip_connect(BlockNotifyGenesisWait);\n+        uiInterface.NotifyBlockTip.connect(BlockNotifyGenesisWait);\n     } else {\n         fHaveGenesis = true;\n     }\n \n     if (gArgs.IsArgSet(\"-blocknotify\"))\n-        uiInterface.NotifyBlockTip_connect(BlockNotifyCallback);\n+        uiInterface.NotifyBlockTip.connect(BlockNotifyCallback);\n \n     std::vector<fs::path> vImportFiles;\n     for (const std::string& strFile : gArgs.GetArgs(\"-loadblock\")) {\n         vImportFiles.push_back(strFile);\n     }\n \n-    threadGroup.create_thread(std::bind(&ThreadImport, vImportFiles));\n+    threadGroup.create_thread(boost::bind(&ThreadImport, vImportFiles));\n \n     // Wait for genesis block to be processed\n     {\n-        WAIT_LOCK(g_genesis_wait_mutex, lock);\n+        WaitableLock lock(cs_GenesisWait);\n         // We previously could hang here if StartShutdown() is called prior to\n         // ThreadImport getting started, so instead we just wait on a timer to\n         // check ShutdownRequested() regularly.\n         while (!fHaveGenesis && !ShutdownRequested()) {\n-            g_genesis_wait_cv.wait_for(lock, std::chrono::milliseconds(500));\n+            condvar_GenesisWait.wait_for(lock, std::chrono::milliseconds(500));\n         }\n-        uiInterface.NotifyBlockTip_disconnect(BlockNotifyGenesisWait);\n+        uiInterface.NotifyBlockTip.disconnect(BlockNotifyGenesisWait);\n     }\n \n     if (ShutdownRequested()) {\n@@ -1700,7 +1713,6 @@ bool AppInitMain(InitInterfaces& interfaces)\n \n     connOptions.nMaxOutboundTimeframe = nMaxOutboundTimeframe;\n     connOptions.nMaxOutboundLimit = nMaxOutboundLimit;\n-    connOptions.m_peer_connect_timeout = peer_connect_timeout;\n \n     for (const std::string& strBind : gArgs.GetArgs(\"-bind\")) {\n         CService addrBind;\n@@ -1747,9 +1759,7 @@ bool AppInitMain(InitInterfaces& interfaces)\n     SetRPCWarmupFinished();\n     uiInterface.InitMessage(_(\"Done loading\"));\n \n-    for (const auto& client : interfaces.chain_clients) {\n-        client->start(scheduler);\n-    }\n+    g_wallet_init_interface.Start(scheduler);\n \n     return true;\n }"
      },
      {
        "sha": "0c85d3c9dc84989324b37371d30a834973abca53",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 7,
        "deletions": 13,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -8,19 +8,13 @@\n \n #include <memory>\n #include <string>\n-#include <util/system.h>\n+#include <util.h>\n \n-namespace interfaces {\n-class Chain;\n-class ChainClient;\n-} // namespace interfaces\n+class CScheduler;\n+class CWallet;\n \n-//! Pointers to interfaces used during init and destroyed on shutdown.\n-struct InitInterfaces\n-{\n-    std::unique_ptr<interfaces::Chain> chain;\n-    std::vector<std::unique_ptr<interfaces::ChainClient>> chain_clients;\n-};\n+class WalletInitInterface;\n+extern const WalletInitInterface& g_wallet_init_interface;\n \n namespace boost\n {\n@@ -29,7 +23,7 @@ class thread_group;\n \n /** Interrupt threads */\n void Interrupt();\n-void Shutdown(InitInterfaces& interfaces);\n+void Shutdown();\n //!Initialize the logging infrastructure\n void InitLogging();\n //!Parameter interaction: change current parameters depending on various rules\n@@ -63,7 +57,7 @@ bool AppInitLockDataDirectory();\n  * @note This should only be done after daemonization. Call Shutdown() if this function fails.\n  * @pre Parameters should be parsed and config file should be read, AppInitLockDataDirectory should have been called.\n  */\n-bool AppInitMain(InitInterfaces& interfaces);\n+bool AppInitMain();\n \n /**\n  * Setup the arguments for gArgs"
      },
      {
        "sha": "e93b91d23ceadcc929bd720a5a612cf10aec845e",
        "filename": "src/interfaces/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/interfaces/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/interfaces/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/README.md?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -4,7 +4,7 @@ The following interfaces are defined here:\n \n * [`Chain`](chain.h) \u2014 used by wallet to access blockchain and mempool state. Added in [#10973](https://github.com/bitcoin/bitcoin/pull/10973).\n \n-* [`ChainClient`](chain.h) \u2014 used by node to start & stop `Chain` clients. Added in [#10973](https://github.com/bitcoin/bitcoin/pull/10973).\n+* [`Chain::Client`](chain.h) \u2014 used by node to start & stop `Chain` clients. Added in [#10973](https://github.com/bitcoin/bitcoin/pull/10973).\n \n * [`Node`](node.h) \u2014 used by GUI to start & stop bitcoin node. Added in [#10244](https://github.com/bitcoin/bitcoin/pull/10244).\n "
      },
      {
        "sha": "2571a91031f98c3c475b7957fe746c7a9e49ab6c",
        "filename": "src/interfaces/chain.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 44,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "patch": "@@ -1,44 +0,0 @@\n-// Copyright (c) 2018 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include <interfaces/chain.h>\n-\n-#include <sync.h>\n-#include <util/system.h>\n-#include <validation.h>\n-\n-#include <memory>\n-#include <utility>\n-\n-namespace interfaces {\n-namespace {\n-\n-class LockImpl : public Chain::Lock\n-{\n-};\n-\n-class LockingStateImpl : public LockImpl, public UniqueLock<CCriticalSection>\n-{\n-    using UniqueLock::UniqueLock;\n-};\n-\n-class ChainImpl : public Chain\n-{\n-public:\n-    std::unique_ptr<Chain::Lock> lock(bool try_lock) override\n-    {\n-        auto result = MakeUnique<LockingStateImpl>(::cs_main, \"cs_main\", __FILE__, __LINE__, try_lock);\n-        if (try_lock && result && !*result) return {};\n-        // std::move necessary on some compilers due to conversion from\n-        // LockingStateImpl to Lock pointer\n-        return std::move(result);\n-    }\n-    std::unique_ptr<Chain::Lock> assumeLocked() override { return MakeUnique<LockImpl>(); }\n-};\n-\n-} // namespace\n-\n-std::unique_ptr<Chain> MakeChain() { return MakeUnique<ChainImpl>(); }\n-\n-} // namespace interfaces"
      },
      {
        "sha": "fe5658de4b73c78ff2f14080b78b0f1fc6c16d23",
        "filename": "src/interfaces/chain.h",
        "status": "removed",
        "additions": 0,
        "deletions": 84,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d",
        "patch": "@@ -1,84 +0,0 @@\n-// Copyright (c) 2018 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_INTERFACES_CHAIN_H\n-#define BITCOIN_INTERFACES_CHAIN_H\n-\n-#include <memory>\n-#include <string>\n-#include <vector>\n-\n-class CScheduler;\n-\n-namespace interfaces {\n-\n-//! Interface for giving wallet processes access to blockchain state.\n-class Chain\n-{\n-public:\n-    virtual ~Chain() {}\n-\n-    //! Interface for querying locked chain state, used by legacy code that\n-    //! assumes state won't change between calls. New code should avoid using\n-    //! the Lock interface and instead call higher-level Chain methods\n-    //! that return more information so the chain doesn't need to stay locked\n-    //! between calls.\n-    class Lock\n-    {\n-    public:\n-        virtual ~Lock() {}\n-    };\n-\n-    //! Return Lock interface. Chain is locked when this is called, and\n-    //! unlocked when the returned interface is freed.\n-    virtual std::unique_ptr<Lock> lock(bool try_lock = false) = 0;\n-\n-    //! Return Lock interface assuming chain is already locked. This\n-    //! method is temporary and is only used in a few places to avoid changing\n-    //! behavior while code is transitioned to use the Chain::Lock interface.\n-    virtual std::unique_ptr<Lock> assumeLocked() = 0;\n-};\n-\n-//! Interface to let node manage chain clients (wallets, or maybe tools for\n-//! monitoring and analysis in the future).\n-class ChainClient\n-{\n-public:\n-    virtual ~ChainClient() {}\n-\n-    //! Register rpcs.\n-    virtual void registerRpcs() = 0;\n-\n-    //! Check for errors before loading.\n-    virtual bool verify() = 0;\n-\n-    //! Load saved state.\n-    virtual bool load() = 0;\n-\n-    //! Start client execution and provide a scheduler.\n-    virtual void start(CScheduler& scheduler) = 0;\n-\n-    //! Save state to disk.\n-    virtual void flush() = 0;\n-\n-    //! Shut down client.\n-    virtual void stop() = 0;\n-};\n-\n-//! Return implementation of Chain interface.\n-std::unique_ptr<Chain> MakeChain();\n-\n-//! Return implementation of ChainClient interface for a wallet client. This\n-//! function will be undefined in builds where ENABLE_WALLET is false.\n-//!\n-//! Currently, wallets are the only chain clients. But in the future, other\n-//! types of chain clients could be added, such as tools for monitoring,\n-//! analysis, or fee estimation. These clients need to expose their own\n-//! MakeXXXClient functions returning their implementations of the ChainClient\n-//! interface.\n-std::unique_ptr<ChainClient> MakeWalletClient(Chain& chain, std::vector<std::string> wallet_filenames);\n-\n-} // namespace interfaces\n-\n-#endif // BITCOIN_INTERFACES_CHAIN_H"
      },
      {
        "sha": "80f461f4d377de829ef3405ea0f3a17b19b147d5",
        "filename": "src/interfaces/handler.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/interfaces/handler.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/interfaces/handler.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/handler.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -4,7 +4,7 @@\n \n #include <interfaces/handler.h>\n \n-#include <util/memory.h>\n+#include <utilmemory.h>\n \n #include <boost/signals2/connection.hpp>\n #include <utility>\n@@ -15,7 +15,7 @@ namespace {\n class HandlerImpl : public Handler\n {\n public:\n-    explicit HandlerImpl(boost::signals2::connection connection) : m_connection(std::move(connection)) {}\n+    HandlerImpl(boost::signals2::connection connection) : m_connection(std::move(connection)) {}\n \n     void disconnect() override { m_connection.disconnect(); }\n "
      },
      {
        "sha": "106dd38f60f7f7df2c13c69f655566f9b5bd6fd0",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 38,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -9,7 +9,6 @@\n #include <chain.h>\n #include <chainparams.h>\n #include <init.h>\n-#include <interfaces/chain.h>\n #include <interfaces/handler.h>\n #include <interfaces/wallet.h>\n #include <net.h>\n@@ -26,32 +25,30 @@\n #include <sync.h>\n #include <txmempool.h>\n #include <ui_interface.h>\n-#include <util/system.h>\n+#include <util.h>\n #include <validation.h>\n #include <warnings.h>\n \n #if defined(HAVE_CONFIG_H)\n #include <config/bitcoin-config.h>\n #endif\n+#ifdef ENABLE_WALLET\n+#include <wallet/fees.h>\n+#include <wallet/wallet.h>\n+#define CHECK_WALLET(x) x\n+#else\n+#define CHECK_WALLET(x) throw std::logic_error(\"Wallet function called in non-wallet build.\")\n+#endif\n \n #include <atomic>\n+#include <boost/thread/thread.hpp>\n #include <univalue.h>\n \n-class CWallet;\n-fs::path GetWalletDir();\n-std::vector<fs::path> ListWalletDir();\n-std::vector<std::shared_ptr<CWallet>> GetWallets();\n-\n namespace interfaces {\n-\n-class Wallet;\n-\n namespace {\n \n class NodeImpl : public Node\n {\n-public:\n-    NodeImpl() { m_interfaces.chain = MakeChain(); }\n     bool parseParameters(int argc, const char* const argv[], std::string& error) override\n     {\n         return gArgs.ParseParameters(argc, argv, error);\n@@ -70,11 +67,11 @@ class NodeImpl : public Node\n         return AppInitBasicSetup() && AppInitParameterInteraction() && AppInitSanityChecks() &&\n                AppInitLockDataDirectory();\n     }\n-    bool appInitMain() override { return AppInitMain(m_interfaces); }\n+    bool appInitMain() override { return AppInitMain(); }\n     void appShutdown() override\n     {\n         Interrupt();\n-        Shutdown(m_interfaces);\n+        Shutdown();\n     }\n     void startShutdown() override { StartShutdown(); }\n     bool shutdownRequested() override { return ShutdownRequested(); }\n@@ -222,78 +219,70 @@ class NodeImpl : public Node\n         LOCK(::cs_main);\n         return ::pcoinsTip->GetCoin(output, coin);\n     }\n-    std::string getWalletDir() override\n-    {\n-        return GetWalletDir().string();\n-    }\n-    std::vector<std::string> listWalletDir() override\n-    {\n-        std::vector<std::string> paths;\n-        for (auto& path : ListWalletDir()) {\n-            paths.push_back(path.string());\n-        }\n-        return paths;\n-    }\n     std::vector<std::unique_ptr<Wallet>> getWallets() override\n     {\n+#ifdef ENABLE_WALLET\n         std::vector<std::unique_ptr<Wallet>> wallets;\n         for (const std::shared_ptr<CWallet>& wallet : GetWallets()) {\n             wallets.emplace_back(MakeWallet(wallet));\n         }\n         return wallets;\n+#else\n+        throw std::logic_error(\"Node::getWallets() called in non-wallet build.\");\n+#endif\n     }\n     std::unique_ptr<Handler> handleInitMessage(InitMessageFn fn) override\n     {\n-        return MakeHandler(::uiInterface.InitMessage_connect(fn));\n+        return MakeHandler(::uiInterface.InitMessage.connect(fn));\n     }\n     std::unique_ptr<Handler> handleMessageBox(MessageBoxFn fn) override\n     {\n-        return MakeHandler(::uiInterface.ThreadSafeMessageBox_connect(fn));\n+        return MakeHandler(::uiInterface.ThreadSafeMessageBox.connect(fn));\n     }\n     std::unique_ptr<Handler> handleQuestion(QuestionFn fn) override\n     {\n-        return MakeHandler(::uiInterface.ThreadSafeQuestion_connect(fn));\n+        return MakeHandler(::uiInterface.ThreadSafeQuestion.connect(fn));\n     }\n     std::unique_ptr<Handler> handleShowProgress(ShowProgressFn fn) override\n     {\n-        return MakeHandler(::uiInterface.ShowProgress_connect(fn));\n+        return MakeHandler(::uiInterface.ShowProgress.connect(fn));\n     }\n     std::unique_ptr<Handler> handleLoadWallet(LoadWalletFn fn) override\n     {\n-        return MakeHandler(::uiInterface.LoadWallet_connect([fn](std::shared_ptr<CWallet> wallet) { fn(MakeWallet(wallet)); }));\n+        CHECK_WALLET(\n+            return MakeHandler(::uiInterface.LoadWallet.connect([fn](std::shared_ptr<CWallet> wallet) { fn(MakeWallet(wallet)); })));\n     }\n     std::unique_ptr<Handler> handleNotifyNumConnectionsChanged(NotifyNumConnectionsChangedFn fn) override\n     {\n-        return MakeHandler(::uiInterface.NotifyNumConnectionsChanged_connect(fn));\n+        return MakeHandler(::uiInterface.NotifyNumConnectionsChanged.connect(fn));\n     }\n     std::unique_ptr<Handler> handleNotifyNetworkActiveChanged(NotifyNetworkActiveChangedFn fn) override\n     {\n-        return MakeHandler(::uiInterface.NotifyNetworkActiveChanged_connect(fn));\n+        return MakeHandler(::uiInterface.NotifyNetworkActiveChanged.connect(fn));\n     }\n     std::unique_ptr<Handler> handleNotifyAlertChanged(NotifyAlertChangedFn fn) override\n     {\n-        return MakeHandler(::uiInterface.NotifyAlertChanged_connect(fn));\n+        return MakeHandler(::uiInterface.NotifyAlertChanged.connect(fn));\n     }\n     std::unique_ptr<Handler> handleBannedListChanged(BannedListChangedFn fn) override\n     {\n-        return MakeHandler(::uiInterface.BannedListChanged_connect(fn));\n+        return MakeHandler(::uiInterface.BannedListChanged.connect(fn));\n     }\n     std::unique_ptr<Handler> handleNotifyBlockTip(NotifyBlockTipFn fn) override\n     {\n-        return MakeHandler(::uiInterface.NotifyBlockTip_connect([fn](bool initial_download, const CBlockIndex* block) {\n+        return MakeHandler(::uiInterface.NotifyBlockTip.connect([fn](bool initial_download, const CBlockIndex* block) {\n             fn(initial_download, block->nHeight, block->GetBlockTime(),\n                 GuessVerificationProgress(Params().TxData(), block));\n         }));\n     }\n     std::unique_ptr<Handler> handleNotifyHeaderTip(NotifyHeaderTipFn fn) override\n     {\n         return MakeHandler(\n-            ::uiInterface.NotifyHeaderTip_connect([fn](bool initial_download, const CBlockIndex* block) {\n+            ::uiInterface.NotifyHeaderTip.connect([fn](bool initial_download, const CBlockIndex* block) {\n                 fn(initial_download, block->nHeight, block->GetBlockTime(),\n                     GuessVerificationProgress(Params().TxData(), block));\n             }));\n     }\n-    InitInterfaces m_interfaces;\n };\n \n } // namespace"
      },
      {
        "sha": "8185c015a9ab3ba5cdd9638da35bfbfff48810b9",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -173,12 +173,6 @@ class Node\n     //! Get unspent outputs associated with a transaction.\n     virtual bool getUnspentOutput(const COutPoint& output, Coin& coin) = 0;\n \n-    //! Return default wallet directory.\n-    virtual std::string getWalletDir() = 0;\n-\n-    //! Return available wallets in wallet directory.\n-    virtual std::vector<std::string> listWalletDir() = 0;\n-\n     //! Return interfaces for accessing wallets (if any).\n     virtual std::vector<std::unique_ptr<Wallet>> getWallets() = 0;\n "
      },
      {
        "sha": "55a6f771e55235a8bc2c99a17456ae395a38f2ab",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 50,
        "deletions": 104,
        "changes": 154,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -7,56 +7,44 @@\n #include <amount.h>\n #include <chain.h>\n #include <consensus/validation.h>\n-#include <init.h>\n-#include <interfaces/chain.h>\n #include <interfaces/handler.h>\n #include <net.h>\n #include <policy/feerate.h>\n #include <policy/fees.h>\n #include <policy/policy.h>\n #include <primitives/transaction.h>\n-#include <rpc/server.h>\n-#include <scheduler.h>\n #include <script/ismine.h>\n #include <script/standard.h>\n #include <support/allocators/secure.h>\n #include <sync.h>\n #include <timedata.h>\n #include <ui_interface.h>\n #include <uint256.h>\n-#include <util/system.h>\n #include <validation.h>\n #include <wallet/feebumper.h>\n #include <wallet/fees.h>\n-#include <wallet/rpcwallet.h>\n #include <wallet/wallet.h>\n-#include <wallet/walletutil.h>\n-\n-#include <memory>\n-#include <string>\n-#include <utility>\n-#include <vector>\n \n namespace interfaces {\n namespace {\n \n class PendingWalletTxImpl : public PendingWalletTx\n {\n public:\n-    explicit PendingWalletTxImpl(CWallet& wallet) : m_wallet(wallet), m_key(&wallet) {}\n+    PendingWalletTxImpl(CWallet& wallet) : m_wallet(wallet), m_key(&wallet) {}\n \n     const CTransaction& get() override { return *m_tx; }\n \n     int64_t getVirtualSize() override { return GetVirtualTransactionSize(*m_tx); }\n \n     bool commit(WalletValueMap value_map,\n         WalletOrderForm order_form,\n+        std::string from_account,\n         std::string& reject_reason) override\n     {\n-        auto locked_chain = m_wallet.chain().lock();\n-        LOCK(m_wallet.cs_wallet);\n+        LOCK2(cs_main, m_wallet.cs_wallet);\n         CValidationState state;\n-        if (!m_wallet.CommitTransaction(m_tx, std::move(value_map), std::move(order_form), m_key, g_connman.get(), state)) {\n+        if (!m_wallet.CommitTransaction(m_tx, std::move(value_map), std::move(order_form), std::move(from_account), m_key, g_connman.get(), state)) {\n             reject_reason = state.GetRejectReason();\n             return false;\n         }\n@@ -69,7 +57,7 @@ class PendingWalletTxImpl : public PendingWalletTx\n };\n \n //! Construct wallet tx struct.\n-WalletTx MakeWalletTx(interfaces::Chain::Lock& locked_chain, CWallet& wallet, const CWalletTx& wtx)\n+WalletTx MakeWalletTx(CWallet& wallet, const CWalletTx& wtx)\n {\n     WalletTx result;\n     result.tx = wtx.tx;\n@@ -87,7 +75,7 @@ WalletTx MakeWalletTx(interfaces::Chain::Lock& locked_chain, CWallet& wallet, co\n                                                       IsMine(wallet, result.txout_address.back()) :\n                                                       ISMINE_NO);\n     }\n-    result.credit = wtx.GetCredit(locked_chain, ISMINE_ALL);\n+    result.credit = wtx.GetCredit(ISMINE_ALL);\n     result.debit = wtx.GetDebit(ISMINE_ALL);\n     result.change = wtx.GetChange();\n     result.time = wtx.GetTxTime();\n@@ -97,45 +85,39 @@ WalletTx MakeWalletTx(interfaces::Chain::Lock& locked_chain, CWallet& wallet, co\n }\n \n //! Construct wallet tx status struct.\n-WalletTxStatus MakeWalletTxStatus(interfaces::Chain::Lock& locked_chain, const CWalletTx& wtx)\n+WalletTxStatus MakeWalletTxStatus(const CWalletTx& wtx)\n {\n-    LockAnnotation lock(::cs_main); // Temporary, for CheckFinalTx below. Removed in upcoming commit.\n-\n     WalletTxStatus result;\n     auto mi = ::mapBlockIndex.find(wtx.hashBlock);\n     CBlockIndex* block = mi != ::mapBlockIndex.end() ? mi->second : nullptr;\n     result.block_height = (block ? block->nHeight : std::numeric_limits<int>::max());\n-    result.blocks_to_maturity = wtx.GetBlocksToMaturity(locked_chain);\n-    result.depth_in_main_chain = wtx.GetDepthInMainChain(locked_chain);\n+    result.blocks_to_maturity = wtx.GetBlocksToMaturity();\n+    result.depth_in_main_chain = wtx.GetDepthInMainChain();\n     result.time_received = wtx.nTimeReceived;\n     result.lock_time = wtx.tx->nLockTime;\n     result.is_final = CheckFinalTx(*wtx.tx);\n-    result.is_trusted = wtx.IsTrusted(locked_chain);\n+    result.is_trusted = wtx.IsTrusted();\n     result.is_abandoned = wtx.isAbandoned();\n     result.is_coinbase = wtx.IsCoinBase();\n-    result.is_in_main_chain = wtx.IsInMainChain(locked_chain);\n+    result.is_in_main_chain = wtx.IsInMainChain();\n     return result;\n }\n \n //! Construct wallet TxOut struct.\n-WalletTxOut MakeWalletTxOut(interfaces::Chain::Lock& locked_chain,\n-    CWallet& wallet,\n-    const CWalletTx& wtx,\n-    int n,\n-    int depth) EXCLUSIVE_LOCKS_REQUIRED(wallet.cs_wallet)\n+WalletTxOut MakeWalletTxOut(CWallet& wallet, const CWalletTx& wtx, int n, int depth)\n {\n     WalletTxOut result;\n     result.txout = wtx.tx->vout[n];\n     result.time = wtx.GetTxTime();\n     result.depth_in_main_chain = depth;\n-    result.is_spent = wallet.IsSpent(locked_chain, wtx.GetHash(), n);\n+    result.is_spent = wallet.IsSpent(wtx.GetHash(), n);\n     return result;\n }\n \n class WalletImpl : public Wallet\n {\n public:\n-    explicit WalletImpl(const std::shared_ptr<CWallet>& wallet) : m_shared_wallet(wallet), m_wallet(*wallet.get()) {}\n+    WalletImpl(const std::shared_ptr<CWallet>& wallet) : m_shared_wallet(wallet), m_wallet(*wallet.get()) {}\n \n     bool encryptWallet(const SecureString& wallet_passphrase) override\n     {\n@@ -216,26 +198,22 @@ class WalletImpl : public Wallet\n     }\n     void lockCoin(const COutPoint& output) override\n     {\n-        auto locked_chain = m_wallet.chain().lock();\n-        LOCK(m_wallet.cs_wallet);\n+        LOCK2(cs_main, m_wallet.cs_wallet);\n         return m_wallet.LockCoin(output);\n     }\n     void unlockCoin(const COutPoint& output) override\n     {\n-        auto locked_chain = m_wallet.chain().lock();\n-        LOCK(m_wallet.cs_wallet);\n+        LOCK2(cs_main, m_wallet.cs_wallet);\n         return m_wallet.UnlockCoin(output);\n     }\n     bool isLockedCoin(const COutPoint& output) override\n     {\n-        auto locked_chain = m_wallet.chain().lock();\n-        LOCK(m_wallet.cs_wallet);\n+        LOCK2(cs_main, m_wallet.cs_wallet);\n         return m_wallet.IsLockedCoin(output.hash, output.n);\n     }\n     void listLockedCoins(std::vector<COutPoint>& outputs) override\n     {\n-        auto locked_chain = m_wallet.chain().lock();\n-        LOCK(m_wallet.cs_wallet);\n+        LOCK2(cs_main, m_wallet.cs_wallet);\n         return m_wallet.ListLockedCoins(outputs);\n     }\n     std::unique_ptr<PendingWalletTx> createTransaction(const std::vector<CRecipient>& recipients,\n@@ -245,10 +223,9 @@ class WalletImpl : public Wallet\n         CAmount& fee,\n         std::string& fail_reason) override\n     {\n-        auto locked_chain = m_wallet.chain().lock();\n-        LOCK(m_wallet.cs_wallet);\n+        LOCK2(cs_main, m_wallet.cs_wallet);\n         auto pending = MakeUnique<PendingWalletTxImpl>(m_wallet);\n-        if (!m_wallet.CreateTransaction(*locked_chain, recipients, pending->m_tx, pending->m_key, fee, change_pos,\n+        if (!m_wallet.CreateTransaction(recipients, pending->m_tx, pending->m_key, fee, change_pos,\n                 fail_reason, coin_control, sign)) {\n             return {};\n         }\n@@ -257,9 +234,8 @@ class WalletImpl : public Wallet\n     bool transactionCanBeAbandoned(const uint256& txid) override { return m_wallet.TransactionCanBeAbandoned(txid); }\n     bool abandonTransaction(const uint256& txid) override\n     {\n-        auto locked_chain = m_wallet.chain().lock();\n-        LOCK(m_wallet.cs_wallet);\n-        return m_wallet.AbandonTransaction(*locked_chain, txid);\n+        LOCK2(cs_main, m_wallet.cs_wallet);\n+        return m_wallet.AbandonTransaction(txid);\n     }\n     bool transactionCanBeBumped(const uint256& txid) override\n     {\n@@ -287,8 +263,7 @@ class WalletImpl : public Wallet\n     }\n     CTransactionRef getTx(const uint256& txid) override\n     {\n-        auto locked_chain = m_wallet.chain().lock();\n-        LOCK(m_wallet.cs_wallet);\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n         auto mi = m_wallet.mapWallet.find(txid);\n         if (mi != m_wallet.mapWallet.end()) {\n             return mi->second.tx;\n@@ -297,30 +272,29 @@ class WalletImpl : public Wallet\n     }\n     WalletTx getWalletTx(const uint256& txid) override\n     {\n-        auto locked_chain = m_wallet.chain().lock();\n-        LOCK(m_wallet.cs_wallet);\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n         auto mi = m_wallet.mapWallet.find(txid);\n         if (mi != m_wallet.mapWallet.end()) {\n-            return MakeWalletTx(*locked_chain, m_wallet, mi->second);\n+            return MakeWalletTx(m_wallet, mi->second);\n         }\n         return {};\n     }\n     std::vector<WalletTx> getWalletTxs() override\n     {\n-        auto locked_chain = m_wallet.chain().lock();\n-        LOCK(m_wallet.cs_wallet);\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n         std::vector<WalletTx> result;\n         result.reserve(m_wallet.mapWallet.size());\n         for (const auto& entry : m_wallet.mapWallet) {\n-            result.emplace_back(MakeWalletTx(*locked_chain, m_wallet, entry.second));\n+            result.emplace_back(MakeWalletTx(m_wallet, entry.second));\n         }\n         return result;\n     }\n     bool tryGetTxStatus(const uint256& txid,\n         interfaces::WalletTxStatus& tx_status,\n-        int& num_blocks) override\n+        int& num_blocks,\n+        int64_t& adjusted_time) override\n     {\n-        auto locked_chain = m_wallet.chain().lock(true /* try_lock */);\n+        TRY_LOCK(::cs_main, locked_chain);\n         if (!locked_chain) {\n             return false;\n         }\n@@ -333,24 +307,26 @@ class WalletImpl : public Wallet\n             return false;\n         }\n         num_blocks = ::chainActive.Height();\n-        tx_status = MakeWalletTxStatus(*locked_chain, mi->second);\n+        adjusted_time = GetAdjustedTime();\n+        tx_status = MakeWalletTxStatus(mi->second);\n         return true;\n     }\n     WalletTx getWalletTxDetails(const uint256& txid,\n         WalletTxStatus& tx_status,\n         WalletOrderForm& order_form,\n         bool& in_mempool,\n-        int& num_blocks) override\n+        int& num_blocks,\n+        int64_t& adjusted_time) override\n     {\n-        auto locked_chain = m_wallet.chain().lock();\n-        LOCK(m_wallet.cs_wallet);\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n         auto mi = m_wallet.mapWallet.find(txid);\n         if (mi != m_wallet.mapWallet.end()) {\n             num_blocks = ::chainActive.Height();\n+            adjusted_time = GetAdjustedTime();\n             in_mempool = mi->second.InMempool();\n             order_form = mi->second.vOrderForm;\n-            tx_status = MakeWalletTxStatus(*locked_chain, mi->second);\n-            return MakeWalletTx(*locked_chain, m_wallet, mi->second);\n+            tx_status = MakeWalletTxStatus(mi->second);\n+            return MakeWalletTx(m_wallet, mi->second);\n         }\n         return {};\n     }\n@@ -370,7 +346,7 @@ class WalletImpl : public Wallet\n     }\n     bool tryGetBalances(WalletBalances& balances, int& num_blocks) override\n     {\n-        auto locked_chain = m_wallet.chain().lock(true /* try_lock */);\n+        TRY_LOCK(cs_main, locked_chain);\n         if (!locked_chain) return false;\n         TRY_LOCK(m_wallet.cs_wallet, locked_wallet);\n         if (!locked_wallet) {\n@@ -387,55 +363,49 @@ class WalletImpl : public Wallet\n     }\n     isminetype txinIsMine(const CTxIn& txin) override\n     {\n-        auto locked_chain = m_wallet.chain().lock();\n-        LOCK(m_wallet.cs_wallet);\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n         return m_wallet.IsMine(txin);\n     }\n     isminetype txoutIsMine(const CTxOut& txout) override\n     {\n-        auto locked_chain = m_wallet.chain().lock();\n-        LOCK(m_wallet.cs_wallet);\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n         return m_wallet.IsMine(txout);\n     }\n     CAmount getDebit(const CTxIn& txin, isminefilter filter) override\n     {\n-        auto locked_chain = m_wallet.chain().lock();\n-        LOCK(m_wallet.cs_wallet);\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n         return m_wallet.GetDebit(txin, filter);\n     }\n     CAmount getCredit(const CTxOut& txout, isminefilter filter) override\n     {\n-        auto locked_chain = m_wallet.chain().lock();\n-        LOCK(m_wallet.cs_wallet);\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n         return m_wallet.GetCredit(txout, filter);\n     }\n     CoinsList listCoins() override\n     {\n-        auto locked_chain = m_wallet.chain().lock();\n-        LOCK(m_wallet.cs_wallet);\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n         CoinsList result;\n-        for (const auto& entry : m_wallet.ListCoins(*locked_chain)) {\n+        for (const auto& entry : m_wallet.ListCoins()) {\n             auto& group = result[entry.first];\n             for (const auto& coin : entry.second) {\n-                group.emplace_back(COutPoint(coin.tx->GetHash(), coin.i),\n-                    MakeWalletTxOut(*locked_chain, m_wallet, *coin.tx, coin.i, coin.nDepth));\n+                group.emplace_back(\n+                    COutPoint(coin.tx->GetHash(), coin.i), MakeWalletTxOut(m_wallet, *coin.tx, coin.i, coin.nDepth));\n             }\n         }\n         return result;\n     }\n     std::vector<WalletTxOut> getCoins(const std::vector<COutPoint>& outputs) override\n     {\n-        auto locked_chain = m_wallet.chain().lock();\n-        LOCK(m_wallet.cs_wallet);\n+        LOCK2(::cs_main, m_wallet.cs_wallet);\n         std::vector<WalletTxOut> result;\n         result.reserve(outputs.size());\n         for (const auto& output : outputs) {\n             result.emplace_back();\n             auto it = m_wallet.mapWallet.find(output.hash);\n             if (it != m_wallet.mapWallet.end()) {\n-                int depth = it->second.GetDepthInMainChain(*locked_chain);\n+                int depth = it->second.GetDepthInMainChain();\n                 if (depth >= 0) {\n-                    result.back() = MakeWalletTxOut(*locked_chain, m_wallet, it->second, output.n, depth);\n+                    result.back() = MakeWalletTxOut(m_wallet, it->second, output.n, depth);\n                 }\n             }\n         }\n@@ -491,32 +461,8 @@ class WalletImpl : public Wallet\n     CWallet& m_wallet;\n };\n \n-class WalletClientImpl : public ChainClient\n-{\n-public:\n-    WalletClientImpl(Chain& chain, std::vector<std::string> wallet_filenames)\n-        : m_chain(chain), m_wallet_filenames(std::move(wallet_filenames))\n-    {\n-    }\n-    void registerRpcs() override { return RegisterWalletRPCCommands(::tableRPC); }\n-    bool verify() override { return VerifyWallets(m_chain, m_wallet_filenames); }\n-    bool load() override { return LoadWallets(m_chain, m_wallet_filenames); }\n-    void start(CScheduler& scheduler) override { return StartWallets(scheduler); }\n-    void flush() override { return FlushWallets(); }\n-    void stop() override { return StopWallets(); }\n-    ~WalletClientImpl() override { UnloadWallets(); }\n-\n-    Chain& m_chain;\n-    std::vector<std::string> m_wallet_filenames;\n-};\n-\n } // namespace\n \n std::unique_ptr<Wallet> MakeWallet(const std::shared_ptr<CWallet>& wallet) { return MakeUnique<WalletImpl>(wallet); }\n \n-std::unique_ptr<ChainClient> MakeWalletClient(Chain& chain, std::vector<std::string> wallet_filenames)\n-{\n-    return MakeUnique<WalletClientImpl>(chain, std::move(wallet_filenames));\n-}\n-\n } // namespace interfaces"
      },
      {
        "sha": "ae54d424426649cab986bf8f16c8e00d5435f095",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -178,14 +178,16 @@ class Wallet\n     //! Try to get updated status for a particular transaction, if possible without blocking.\n     virtual bool tryGetTxStatus(const uint256& txid,\n         WalletTxStatus& tx_status,\n-        int& num_blocks) = 0;\n+        int& num_blocks,\n+        int64_t& adjusted_time) = 0;\n \n     //! Get transaction details.\n     virtual WalletTx getWalletTxDetails(const uint256& txid,\n         WalletTxStatus& tx_status,\n         WalletOrderForm& order_form,\n         bool& in_mempool,\n-        int& num_blocks) = 0;\n+        int& num_blocks,\n+        int64_t& adjusted_time) = 0;\n \n     //! Get balances.\n     virtual WalletBalances getBalances() = 0;\n@@ -287,6 +289,7 @@ class PendingWalletTx\n     //! Send pending transaction and commit to wallet.\n     virtual bool commit(WalletValueMap value_map,\n         WalletOrderForm order_form,\n+        std::string from_account,\n         std::string& reject_reason) = 0;\n };\n \n@@ -364,8 +367,8 @@ struct WalletTxOut\n     bool is_spent = false;\n };\n \n-//! Return implementation of Wallet interface. This function is defined in\n-//! dummywallet.cpp and throws if the wallet component is not compiled.\n+//! Return implementation of Wallet interface. This function will be undefined\n+//! in builds where ENABLE_WALLET is false.\n std::unique_ptr<Wallet> MakeWallet(const std::shared_ptr<CWallet>& wallet);\n \n } // namespace interfaces"
      },
      {
        "sha": "df452cd3302ee6aff363b8fc8ea328b69d8bfb55",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -89,7 +89,7 @@ static int ec_privkey_import_der(const secp256k1_context* ctx, unsigned char *ou\n  * will be set to the number of bytes used in the buffer.\n  * key32 must point to a 32-byte raw private key.\n  */\n-static int ec_privkey_export_der(const secp256k1_context *ctx, unsigned char *privkey, size_t *privkeylen, const unsigned char *key32, bool compressed) {\n+static int ec_privkey_export_der(const secp256k1_context *ctx, unsigned char *privkey, size_t *privkeylen, const unsigned char *key32, int compressed) {\n     assert(*privkeylen >= CKey::PRIVATE_KEY_SIZE);\n     secp256k1_pubkey pubkey;\n     size_t pubkeylen = 0;\n@@ -170,7 +170,7 @@ CPrivKey CKey::GetPrivKey() const {\n     size_t privkeylen;\n     privkey.resize(PRIVATE_KEY_SIZE);\n     privkeylen = PRIVATE_KEY_SIZE;\n-    ret = ec_privkey_export_der(secp256k1_context_sign, privkey.data(), &privkeylen, begin(), fCompressed);\n+    ret = ec_privkey_export_der(secp256k1_context_sign, privkey.data(), &privkeylen, begin(), fCompressed ? SECP256K1_EC_COMPRESSED : SECP256K1_EC_UNCOMPRESSED);\n     assert(ret);\n     privkey.resize(privkeylen);\n     return privkey;"
      },
      {
        "sha": "a3baa421e63051614b606ff0dfc47d9d12985c6e",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -181,12 +181,12 @@ struct CExtKey {\n };\n \n /** Initialize the elliptic curve support. May not be called twice without calling ECC_Stop first. */\n-void ECC_Start();\n+void ECC_Start(void);\n \n /** Deinitialize the elliptic curve support. No-op if ECC_Start wasn't called first. */\n-void ECC_Stop();\n+void ECC_Stop(void);\n \n /** Check that required EC support is available at runtime. */\n-bool ECC_InitSanityCheck();\n+bool ECC_InitSanityCheck(void);\n \n #endif // BITCOIN_KEY_H"
      },
      {
        "sha": "5c5e2dc03191dbdfcedca1334a226033c7ee3736",
        "filename": "src/key_io.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/key_io.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/key_io.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key_io.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -7,7 +7,7 @@\n #include <base58.h>\n #include <bech32.h>\n #include <script/script.h>\n-#include <util/strencodings.h>\n+#include <utilstrencodings.h>\n \n #include <boost/variant/apply_visitor.hpp>\n #include <boost/variant/static_visitor.hpp>\n@@ -24,7 +24,7 @@ class DestinationEncoder : public boost::static_visitor<std::string>\n     const CChainParams& m_params;\n \n public:\n-    explicit DestinationEncoder(const CChainParams& params) : m_params(params) {}\n+    DestinationEncoder(const CChainParams& params) : m_params(params) {}\n \n     std::string operator()(const CKeyID& id) const\n     {"
      },
      {
        "sha": "b2012a04bb7abe0a2f222e090d7e3db98b922eb3",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -5,7 +5,7 @@\n \n #include <keystore.h>\n \n-#include <util/system.h>\n+#include <util.h>\n \n void CBasicKeyStore::ImplicitlyLearnRelatedKeyScripts(const CPubKey& pubkey)\n {"
      },
      {
        "sha": "e8e22cbf97e850dd666203c5fbc803ab1935b361",
        "filename": "src/logging.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/logging.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/logging.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -4,7 +4,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <logging.h>\n-#include <util/time.h>\n+#include <utiltime.h>\n \n const char * const DEFAULT_DEBUGLOGFILE = \"debug.log\";\n \n@@ -219,13 +219,13 @@ void BCLog::Logger::LogPrintStr(const std::string &str)\n             // reopen the log file, if requested\n             if (m_reopen_file) {\n                 m_reopen_file = false;\n-                FILE* new_fileout = fsbridge::fopen(m_file_path, \"a\");\n-                if (new_fileout) {\n-                    setbuf(new_fileout, nullptr); // unbuffered\n-                    fclose(m_fileout);\n-                    m_fileout = new_fileout;\n+                m_fileout = fsbridge::freopen(m_file_path, \"a\", m_fileout);\n+                if (!m_fileout) {\n+                    return;\n                 }\n+                setbuf(m_fileout, nullptr); // unbuffered\n             }\n+\n             FileWriteStr(strTimestamped, m_fileout);\n         }\n     }\n@@ -245,7 +245,7 @@ void BCLog::Logger::ShrinkDebugFile()\n     size_t log_size = 0;\n     try {\n         log_size = fs::file_size(m_file_path);\n-    } catch (const fs::filesystem_error&) {}\n+    } catch (boost::filesystem::filesystem_error &) {}\n \n     // If debug.log file is more than 10% bigger the RECENT_DEBUG_HISTORY_SIZE\n     // trim it down by saving only the last RECENT_DEBUG_HISTORY_SIZE bytes"
      },
      {
        "sha": "6400b131c2d6b20f6996fb85d3e2be2e8059b908",
        "filename": "src/logging.h",
        "status": "modified",
        "additions": 33,
        "deletions": 22,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/logging.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/logging.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.h?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -125,31 +125,42 @@ std::vector<CLogCategoryActive> ListActiveLogCategories();\n /** Return true if str parses as a log category and set the flag */\n bool GetLogCategory(BCLog::LogFlags& flag, const std::string& str);\n \n-// Be conservative when using LogPrintf/error or other things which\n-// unconditionally log to debug.log! It should not be the case that an inbound\n-// peer can fill up a user's disk with debug.log entries.\n+/** Get format string from VA_ARGS for error reporting */\n+template<typename... Args> std::string FormatStringFromLogArgs(const char *fmt, const Args&... args) { return fmt; }\n \n-template <typename... Args>\n-static inline void LogPrintf(const char* fmt, const Args&... args)\n+static inline void MarkUsed() {}\n+template<typename T, typename... Args> static inline void MarkUsed(const T& t, const Args&... args)\n {\n-    if (g_logger->Enabled()) {\n-        std::string log_msg;\n-        try {\n-            log_msg = tfm::format(fmt, args...);\n-        } catch (tinyformat::format_error& fmterr) {\n-            /* Original format string will have newline so don't add one here */\n-            log_msg = \"Error \\\"\" + std::string(fmterr.what()) + \"\\\" while formatting log message: \" + fmt;\n-        }\n-        g_logger->LogPrintStr(log_msg);\n-    }\n+    (void)t;\n+    MarkUsed(args...);\n }\n \n-template <typename... Args>\n-static inline void LogPrint(const BCLog::LogFlags& category, const Args&... args)\n-{\n-    if (LogAcceptCategory((category))) {\n-        LogPrintf(args...);\n-    }\n-}\n+// Be conservative when using LogPrintf/error or other things which\n+// unconditionally log to debug.log! It should not be the case that an inbound\n+// peer can fill up a user's disk with debug.log entries.\n+\n+#ifdef USE_COVERAGE\n+#define LogPrintf(...) do { MarkUsed(__VA_ARGS__); } while(0)\n+#define LogPrint(category, ...) do { MarkUsed(__VA_ARGS__); } while(0)\n+#else\n+#define LogPrintf(...) do { \\\n+    if (g_logger->Enabled()) { \\\n+        std::string _log_msg_; /* Unlikely name to avoid shadowing variables */ \\\n+        try { \\\n+            _log_msg_ = tfm::format(__VA_ARGS__); \\\n+        } catch (tinyformat::format_error &fmterr) { \\\n+            /* Original format string will have newline so don't add one here */ \\\n+            _log_msg_ = \"Error \\\"\" + std::string(fmterr.what()) + \"\\\" while formatting log message: \" + FormatStringFromLogArgs(__VA_ARGS__); \\\n+        } \\\n+        g_logger->LogPrintStr(_log_msg_); \\\n+    } \\\n+} while(0)\n+\n+#define LogPrint(category, ...) do { \\\n+    if (LogAcceptCategory((category))) { \\\n+        LogPrintf(__VA_ARGS__); \\\n+    } \\\n+} while(0)\n+#endif\n \n #endif // BITCOIN_LOGGING_H"
      },
      {
        "sha": "7bbc45d38abdbd4770db6e5dcb9460213e1228fb",
        "filename": "src/merkleblock.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/merkleblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/merkleblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -7,7 +7,7 @@\n \n #include <hash.h>\n #include <consensus/consensus.h>\n-#include <util/strencodings.h>\n+#include <utilstrencodings.h>\n \n \n CMerkleBlock::CMerkleBlock(const CBlock& block, CBloomFilter* filter, const std::set<uint256>* txids)"
      },
      {
        "sha": "fc4f2c1b7baf3fbb590cff2415a466a24287b290",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 13,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -1,3 +1,4 @@\n+// Copyright (c) 2018 The BitcoinV Core developers\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2018 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n@@ -21,8 +22,8 @@\n #include <primitives/transaction.h>\n #include <script/standard.h>\n #include <timedata.h>\n-#include <util/system.h>\n-#include <util/moneystr.h>\n+#include <util.h>\n+#include <utilmoneystr.h>\n #include <validationinterface.h>\n \n #include <algorithm>\n@@ -70,8 +71,9 @@ static BlockAssembler::Options DefaultOptions()\n     // If -blockmaxweight is not given, limit to DEFAULT_BLOCK_MAX_WEIGHT\n     BlockAssembler::Options options;\n     options.nBlockMaxWeight = gArgs.GetArg(\"-blockmaxweight\", DEFAULT_BLOCK_MAX_WEIGHT);\n-    CAmount n = 0;\n-    if (gArgs.IsArgSet(\"-blockmintxfee\") && ParseMoney(gArgs.GetArg(\"-blockmintxfee\", \"\"), n)) {\n+    if (gArgs.IsArgSet(\"-blockmintxfee\")) {\n+        CAmount n = 0;\n+        ParseMoney(gArgs.GetArg(\"-blockmintxfee\", \"\"), n);\n         options.blockMinFeeRate = CFeeRate(n);\n     } else {\n         options.blockMinFeeRate = CFeeRate(DEFAULT_BLOCK_MIN_TX_FEE);\n@@ -95,7 +97,7 @@ void BlockAssembler::resetBlock()\n     nFees = 0;\n }\n \n-std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& scriptPubKeyIn)\n+std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& scriptPubKeyIn, uint64_t extra_subsidy, bool fMineWitnessTx)\n {\n     int64_t nTimeStart = GetTimeMicros();\n \n@@ -139,7 +141,7 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     // not activated.\n     // TODO: replace this with a call to main to assess validity of a mempool\n     // transaction (which in most cases can be a no-op).\n-    fIncludeWitness = IsWitnessEnabled(pindexPrev, chainparams.GetConsensus());\n+    fIncludeWitness = IsWitnessEnabled(pindexPrev, chainparams.GetConsensus()) && fMineWitnessTx;\n \n     int nPackagesSelected = 0;\n     int nDescendantsUpdated = 0;\n@@ -152,11 +154,19 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n \n     // Create coinbase transaction.\n     CMutableTransaction coinbaseTx;\n+\n+    if (extra_subsidy < 1)\n+    {\n+        extra_subsidy = 1;\n+    }\n+    //std::cout << \"Miner Requesting a BLOCK REWARD of: \" << std::dec << GetBlockSubsidy(nHeight, chainparams.GetConsensus()) * extra_subsidy << std::endl;\n+    \n+\n     coinbaseTx.vin.resize(1);\n     coinbaseTx.vin[0].prevout.SetNull();\n     coinbaseTx.vout.resize(1);\n     coinbaseTx.vout[0].scriptPubKey = scriptPubKeyIn;\n-    coinbaseTx.vout[0].nValue = nFees + GetBlockSubsidy(nHeight, chainparams.GetConsensus());\n+    coinbaseTx.vout[0].nValue = nFees + GetBlockSubsidy(nHeight, chainparams.GetConsensus()) * extra_subsidy;\n     coinbaseTx.vin[0].scriptSig = CScript() << nHeight << OP_0;\n     pblock->vtx[0] = MakeTransactionRef(std::move(coinbaseTx));\n     pblocktemplate->vchCoinbaseCommitment = GenerateCoinbaseCommitment(*pblock, pindexPrev, chainparams.GetConsensus());\n@@ -435,12 +445,12 @@ void BlockAssembler::addPackageTxs(int &nPackagesSelected, int &nDescendantsUpda\n void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned int& nExtraNonce)\n {\n     // Update nExtraNonce\n-    static uint256 hashPrevBlock;\n-    if (hashPrevBlock != pblock->hashPrevBlock)\n-    {\n-        nExtraNonce = 0;\n-        hashPrevBlock = pblock->hashPrevBlock;\n-    }\n+    // static uint256 hashPrevBlock;\n+    // if (hashPrevBlock != pblock->hashPrevBlock)\n+    // {\n+    //     nExtraNonce = 0;\n+    //     hashPrevBlock = pblock->hashPrevBlock;\n+    // }\n     ++nExtraNonce;\n     unsigned int nHeight = pindexPrev->nHeight+1; // Height first in coinbase required for block.version=2\n     CMutableTransaction txCoinbase(*pblock->vtx[0]);"
      },
      {
        "sha": "52a2bbf14f71af9ab9a0dd2b2a1155bcf62b7f6e",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -1,3 +1,4 @@\n+// Copyright (c) 2018 The BitcoinV Core developers\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2018 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n@@ -157,7 +158,7 @@ class BlockAssembler\n     BlockAssembler(const CChainParams& params, const Options& options);\n \n     /** Construct a new block template with coinbase to scriptPubKeyIn */\n-    std::unique_ptr<CBlockTemplate> CreateNewBlock(const CScript& scriptPubKeyIn);\n+    std::unique_ptr<CBlockTemplate> CreateNewBlock(const CScript& scriptPubKeyIn, uint64_t extra_subsidy=0, bool fMineWitnessTx=true);\n \n private:\n     // utility functions"
      },
      {
        "sha": "0fd67c43e14fb6cf32d6638beb5184952745e755",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 267,
        "deletions": 286,
        "changes": 553,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -1,3 +1,4 @@\n+// Copyright (c) 2018 The BitcoinV Core developers\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2018 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n@@ -18,7 +19,7 @@\n #include <netbase.h>\n #include <scheduler.h>\n #include <ui_interface.h>\n-#include <util/strencodings.h>\n+#include <utilstrencodings.h>\n \n #ifdef WIN32\n #include <string.h>\n@@ -82,8 +83,8 @@ bool fDiscover = true;\n bool fListen = true;\n bool fRelayTxes = true;\n CCriticalSection cs_mapLocalHost;\n-std::map<CNetAddr, LocalServiceInfo> mapLocalHost GUARDED_BY(cs_mapLocalHost);\n-static bool vfLimited[NET_MAX] GUARDED_BY(cs_mapLocalHost) = {};\n+std::map<CNetAddr, LocalServiceInfo> mapLocalHost;\n+static bool vfLimited[NET_MAX] = {};\n std::string strSubVersion;\n \n limitedmap<uint256, int64_t> mapAlreadyAskedFor(MAX_INV_SZ);\n@@ -134,12 +135,11 @@ static std::vector<CAddress> convertSeed6(const std::vector<SeedSpec6> &vSeedsIn\n     const int64_t nOneWeek = 7*24*60*60;\n     std::vector<CAddress> vSeedsOut;\n     vSeedsOut.reserve(vSeedsIn.size());\n-    FastRandomContext rng;\n     for (const auto& seed_in : vSeedsIn) {\n         struct in6_addr ip;\n         memcpy(&ip, seed_in.addr, sizeof(ip));\n         CAddress addr(CService(ip, seed_in.port), GetDesirableServiceFlags(NODE_NONE));\n-        addr.nTime = GetTime() - rng.randrange(nOneWeek) - nOneWeek;\n+        addr.nTime = GetTime() - GetRand(nOneWeek) - nOneWeek;\n         vSeedsOut.push_back(addr);\n     }\n     return vSeedsOut;\n@@ -190,16 +190,16 @@ void AdvertiseLocal(CNode *pnode)\n         // If discovery is enabled, sometimes give our peer the address it\n         // tells us that it sees us as in case it has a better idea of our\n         // address than we do.\n-        FastRandomContext rng;\n         if (IsPeerAddrLocalGood(pnode) && (!addrLocal.IsRoutable() ||\n-             rng.randbits((GetnScore(addrLocal) > LOCAL_MANUAL) ? 3 : 1) == 0))\n+             GetRand((GetnScore(addrLocal) > LOCAL_MANUAL) ? 8:2) == 0))\n         {\n             addrLocal.SetIP(pnode->GetAddrLocal());\n         }\n         if (addrLocal.IsRoutable() || gArgs.GetBoolArg(\"-addrmantest\", false))\n         {\n             LogPrint(BCLog::NET, \"AdvertiseLocal: advertising address %s\\n\", addrLocal.ToString());\n-            pnode->PushAddress(addrLocal, rng);\n+            FastRandomContext insecure_rand;\n+            pnode->PushAddress(addrLocal, insecure_rand);\n         }\n     }\n }\n@@ -345,7 +345,7 @@ CNode* CConnman::FindNode(const CService& addr)\n bool CConnman::CheckIncomingNonce(uint64_t nonce)\n {\n     LOCK(cs_vNodes);\n-    for (const CNode* pnode : vNodes) {\n+    for (CNode* pnode : vNodes) {\n         if (!pnode->fSuccessfullyConnected && !pnode->fInbound && pnode->GetLocalNonce() == nonce)\n             return false;\n     }\n@@ -716,10 +716,6 @@ void CNode::copyStats(CNodeStats &stats)\n         X(nRecvBytes);\n     }\n     X(fWhitelisted);\n-    {\n-        LOCK(cs_feeFilter);\n-        X(minFeeFilter);\n-    }\n \n     // It is common for nodes with good ping times to suddenly become lagged,\n     // due to a new block arriving or other large transfer.\n@@ -878,7 +874,16 @@ const uint256& CNetMessage::GetMessageHash() const\n     return data_hash;\n }\n \n-size_t CConnman::SocketSendData(CNode *pnode) const EXCLUSIVE_LOCKS_REQUIRED(pnode->cs_vSend)\n+\n+\n+\n+\n+\n+\n+\n+\n+// requires LOCK(cs_vSend)\n+size_t CConnman::SocketSendData(CNode *pnode) const\n {\n     auto it = pnode->vSendMsg.begin();\n     size_t nSentSize = 0;\n@@ -1006,7 +1011,6 @@ bool CConnman::AttemptToEvictConnection()\n                 continue;\n             if (node->fDisconnect)\n                 continue;\n-            LOCK(node->cs_filter);\n             NodeEvictionCandidate candidate = {node->GetId(), node->nTimeConnected, node->nMinPingUsecTime,\n                                                node->nLastBlockTime, node->nLastTXTime,\n                                                HasAllDesirableServiceFlags(node->nServices),\n@@ -1149,322 +1153,310 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     }\n }\n \n-void CConnman::DisconnectNodes()\n+void CConnman::ThreadSocketHandler()\n {\n+    unsigned int nPrevNodeCount = 0;\n+    while (!interruptNet)\n     {\n-        LOCK(cs_vNodes);\n+        //\n+        // Disconnect nodes\n+        //\n+        {\n+            LOCK(cs_vNodes);\n \n-        if (!fNetworkActive) {\n-            // Disconnect any connected nodes\n-            for (CNode* pnode : vNodes) {\n-                if (!pnode->fDisconnect) {\n-                    LogPrint(BCLog::NET, \"Network not active, dropping peer=%d\\n\", pnode->GetId());\n-                    pnode->fDisconnect = true;\n+            if (!fNetworkActive) {\n+                // Disconnect any connected nodes\n+                for (CNode* pnode : vNodes) {\n+                    if (!pnode->fDisconnect) {\n+                        LogPrint(BCLog::NET, \"Network not active, dropping peer=%d\\n\", pnode->GetId());\n+                        pnode->fDisconnect = true;\n+                    }\n                 }\n             }\n-        }\n \n-        // Disconnect unused nodes\n-        std::vector<CNode*> vNodesCopy = vNodes;\n-        for (CNode* pnode : vNodesCopy)\n-        {\n-            if (pnode->fDisconnect)\n+            // Disconnect unused nodes\n+            std::vector<CNode*> vNodesCopy = vNodes;\n+            for (CNode* pnode : vNodesCopy)\n             {\n-                // remove from vNodes\n-                vNodes.erase(remove(vNodes.begin(), vNodes.end(), pnode), vNodes.end());\n+                if (pnode->fDisconnect)\n+                {\n+                    // remove from vNodes\n+                    vNodes.erase(remove(vNodes.begin(), vNodes.end(), pnode), vNodes.end());\n \n-                // release outbound grant (if any)\n-                pnode->grantOutbound.Release();\n+                    // release outbound grant (if any)\n+                    pnode->grantOutbound.Release();\n \n-                // close socket and cleanup\n-                pnode->CloseSocketDisconnect();\n+                    // close socket and cleanup\n+                    pnode->CloseSocketDisconnect();\n \n-                // hold in disconnected pool until all refs are released\n-                pnode->Release();\n-                vNodesDisconnected.push_back(pnode);\n+                    // hold in disconnected pool until all refs are released\n+                    pnode->Release();\n+                    vNodesDisconnected.push_back(pnode);\n+                }\n             }\n         }\n-    }\n-    {\n-        // Delete disconnected nodes\n-        std::list<CNode*> vNodesDisconnectedCopy = vNodesDisconnected;\n-        for (CNode* pnode : vNodesDisconnectedCopy)\n         {\n-            // wait until threads are done using it\n-            if (pnode->GetRefCount() <= 0) {\n-                bool fDelete = false;\n-                {\n-                    TRY_LOCK(pnode->cs_inventory, lockInv);\n-                    if (lockInv) {\n-                        TRY_LOCK(pnode->cs_vSend, lockSend);\n-                        if (lockSend) {\n-                            fDelete = true;\n+            // Delete disconnected nodes\n+            std::list<CNode*> vNodesDisconnectedCopy = vNodesDisconnected;\n+            for (CNode* pnode : vNodesDisconnectedCopy)\n+            {\n+                // wait until threads are done using it\n+                if (pnode->GetRefCount() <= 0) {\n+                    bool fDelete = false;\n+                    {\n+                        TRY_LOCK(pnode->cs_inventory, lockInv);\n+                        if (lockInv) {\n+                            TRY_LOCK(pnode->cs_vSend, lockSend);\n+                            if (lockSend) {\n+                                fDelete = true;\n+                            }\n                         }\n                     }\n-                }\n-                if (fDelete) {\n-                    vNodesDisconnected.remove(pnode);\n-                    DeleteNode(pnode);\n+                    if (fDelete) {\n+                        vNodesDisconnected.remove(pnode);\n+                        DeleteNode(pnode);\n+                    }\n                 }\n             }\n         }\n-    }\n-}\n-\n-void CConnman::NotifyNumConnectionsChanged()\n-{\n-    size_t vNodesSize;\n-    {\n-        LOCK(cs_vNodes);\n-        vNodesSize = vNodes.size();\n-    }\n-    if(vNodesSize != nPrevNodeCount) {\n-        nPrevNodeCount = vNodesSize;\n-        if(clientInterface)\n-            clientInterface->NotifyNumConnectionsChanged(vNodesSize);\n-    }\n-}\n-\n-void CConnman::InactivityCheck(CNode *pnode)\n-{\n-    int64_t nTime = GetSystemTimeInSeconds();\n-    if (nTime - pnode->nTimeConnected > m_peer_connect_timeout)\n-    {\n-        if (pnode->nLastRecv == 0 || pnode->nLastSend == 0)\n-        {\n-            LogPrint(BCLog::NET, \"socket no message in first %i seconds, %d %d from %d\\n\", m_peer_connect_timeout, pnode->nLastRecv != 0, pnode->nLastSend != 0, pnode->GetId());\n-            pnode->fDisconnect = true;\n-        }\n-        else if (nTime - pnode->nLastSend > TIMEOUT_INTERVAL)\n-        {\n-            LogPrintf(\"socket sending timeout: %is\\n\", nTime - pnode->nLastSend);\n-            pnode->fDisconnect = true;\n-        }\n-        else if (nTime - pnode->nLastRecv > (pnode->nVersion > BIP0031_VERSION ? TIMEOUT_INTERVAL : 90*60))\n-        {\n-            LogPrintf(\"socket receive timeout: %is\\n\", nTime - pnode->nLastRecv);\n-            pnode->fDisconnect = true;\n-        }\n-        else if (pnode->nPingNonceSent && pnode->nPingUsecStart + TIMEOUT_INTERVAL * 1000000 < GetTimeMicros())\n+        size_t vNodesSize;\n         {\n-            LogPrintf(\"ping timeout: %fs\\n\", 0.000001 * (GetTimeMicros() - pnode->nPingUsecStart));\n-            pnode->fDisconnect = true;\n+            LOCK(cs_vNodes);\n+            vNodesSize = vNodes.size();\n         }\n-        else if (!pnode->fSuccessfullyConnected)\n-        {\n-            LogPrint(BCLog::NET, \"version handshake timeout from %d\\n\", pnode->GetId());\n-            pnode->fDisconnect = true;\n+        if(vNodesSize != nPrevNodeCount) {\n+            nPrevNodeCount = vNodesSize;\n+            if(clientInterface)\n+                clientInterface->NotifyNumConnectionsChanged(nPrevNodeCount);\n         }\n-    }\n-}\n \n-void CConnman::SocketHandler()\n-{\n-    //\n-    // Find which sockets have data to receive\n-    //\n-    struct timeval timeout;\n-    timeout.tv_sec  = 0;\n-    timeout.tv_usec = 50000; // frequency to poll pnode->vSend\n-\n-    fd_set fdsetRecv;\n-    fd_set fdsetSend;\n-    fd_set fdsetError;\n-    FD_ZERO(&fdsetRecv);\n-    FD_ZERO(&fdsetSend);\n-    FD_ZERO(&fdsetError);\n-    SOCKET hSocketMax = 0;\n-    bool have_fds = false;\n+        //\n+        // Find which sockets have data to receive\n+        //\n+        struct timeval timeout;\n+        timeout.tv_sec  = 0;\n+        timeout.tv_usec = 50000; // frequency to poll pnode->vSend\n+\n+        fd_set fdsetRecv;\n+        fd_set fdsetSend;\n+        fd_set fdsetError;\n+        FD_ZERO(&fdsetRecv);\n+        FD_ZERO(&fdsetSend);\n+        FD_ZERO(&fdsetError);\n+        SOCKET hSocketMax = 0;\n+        bool have_fds = false;\n \n-    for (const ListenSocket& hListenSocket : vhListenSocket) {\n-        FD_SET(hListenSocket.socket, &fdsetRecv);\n-        hSocketMax = std::max(hSocketMax, hListenSocket.socket);\n-        have_fds = true;\n-    }\n+        for (const ListenSocket& hListenSocket : vhListenSocket) {\n+            FD_SET(hListenSocket.socket, &fdsetRecv);\n+            hSocketMax = std::max(hSocketMax, hListenSocket.socket);\n+            have_fds = true;\n+        }\n \n-    {\n-        LOCK(cs_vNodes);\n-        for (CNode* pnode : vNodes)\n         {\n-            // Implement the following logic:\n-            // * If there is data to send, select() for sending data. As this only\n-            //   happens when optimistic write failed, we choose to first drain the\n-            //   write buffer in this case before receiving more. This avoids\n-            //   needlessly queueing received data, if the remote peer is not themselves\n-            //   receiving data. This means properly utilizing TCP flow control signalling.\n-            // * Otherwise, if there is space left in the receive buffer, select() for\n-            //   receiving data.\n-            // * Hand off all complete messages to the processor, to be handled without\n-            //   blocking here.\n-\n-            bool select_recv = !pnode->fPauseRecv;\n-            bool select_send;\n+            LOCK(cs_vNodes);\n+            for (CNode* pnode : vNodes)\n             {\n-                LOCK(pnode->cs_vSend);\n-                select_send = !pnode->vSendMsg.empty();\n-            }\n+                // Implement the following logic:\n+                // * If there is data to send, select() for sending data. As this only\n+                //   happens when optimistic write failed, we choose to first drain the\n+                //   write buffer in this case before receiving more. This avoids\n+                //   needlessly queueing received data, if the remote peer is not themselves\n+                //   receiving data. This means properly utilizing TCP flow control signalling.\n+                // * Otherwise, if there is space left in the receive buffer, select() for\n+                //   receiving data.\n+                // * Hand off all complete messages to the processor, to be handled without\n+                //   blocking here.\n+\n+                bool select_recv = !pnode->fPauseRecv;\n+                bool select_send;\n+                {\n+                    LOCK(pnode->cs_vSend);\n+                    select_send = !pnode->vSendMsg.empty();\n+                }\n \n-            LOCK(pnode->cs_hSocket);\n-            if (pnode->hSocket == INVALID_SOCKET)\n-                continue;\n+                LOCK(pnode->cs_hSocket);\n+                if (pnode->hSocket == INVALID_SOCKET)\n+                    continue;\n \n-            FD_SET(pnode->hSocket, &fdsetError);\n-            hSocketMax = std::max(hSocketMax, pnode->hSocket);\n-            have_fds = true;\n+                FD_SET(pnode->hSocket, &fdsetError);\n+                hSocketMax = std::max(hSocketMax, pnode->hSocket);\n+                have_fds = true;\n \n-            if (select_send) {\n-                FD_SET(pnode->hSocket, &fdsetSend);\n-                continue;\n-            }\n-            if (select_recv) {\n-                FD_SET(pnode->hSocket, &fdsetRecv);\n+                if (select_send) {\n+                    FD_SET(pnode->hSocket, &fdsetSend);\n+                    continue;\n+                }\n+                if (select_recv) {\n+                    FD_SET(pnode->hSocket, &fdsetRecv);\n+                }\n             }\n         }\n-    }\n \n-    int nSelect = select(have_fds ? hSocketMax + 1 : 0,\n-                         &fdsetRecv, &fdsetSend, &fdsetError, &timeout);\n-    if (interruptNet)\n-        return;\n+        int nSelect = select(have_fds ? hSocketMax + 1 : 0,\n+                             &fdsetRecv, &fdsetSend, &fdsetError, &timeout);\n+        if (interruptNet)\n+            return;\n \n-    if (nSelect == SOCKET_ERROR)\n-    {\n-        if (have_fds)\n+        if (nSelect == SOCKET_ERROR)\n         {\n-            int nErr = WSAGetLastError();\n-            LogPrintf(\"socket select error %s\\n\", NetworkErrorString(nErr));\n-            for (unsigned int i = 0; i <= hSocketMax; i++)\n-                FD_SET(i, &fdsetRecv);\n+            if (have_fds)\n+            {\n+                int nErr = WSAGetLastError();\n+                LogPrintf(\"socket select error %s\\n\", NetworkErrorString(nErr));\n+                for (unsigned int i = 0; i <= hSocketMax; i++)\n+                    FD_SET(i, &fdsetRecv);\n+            }\n+            FD_ZERO(&fdsetSend);\n+            FD_ZERO(&fdsetError);\n+            if (!interruptNet.sleep_for(std::chrono::milliseconds(timeout.tv_usec/1000)))\n+                return;\n         }\n-        FD_ZERO(&fdsetSend);\n-        FD_ZERO(&fdsetError);\n-        if (!interruptNet.sleep_for(std::chrono::milliseconds(timeout.tv_usec/1000)))\n-            return;\n-    }\n \n-    //\n-    // Accept new connections\n-    //\n-    for (const ListenSocket& hListenSocket : vhListenSocket)\n-    {\n-        if (hListenSocket.socket != INVALID_SOCKET && FD_ISSET(hListenSocket.socket, &fdsetRecv))\n+        //\n+        // Accept new connections\n+        //\n+        for (const ListenSocket& hListenSocket : vhListenSocket)\n         {\n-            AcceptConnection(hListenSocket);\n+            if (hListenSocket.socket != INVALID_SOCKET && FD_ISSET(hListenSocket.socket, &fdsetRecv))\n+            {\n+                AcceptConnection(hListenSocket);\n+            }\n         }\n-    }\n-\n-    //\n-    // Service each socket\n-    //\n-    std::vector<CNode*> vNodesCopy;\n-    {\n-        LOCK(cs_vNodes);\n-        vNodesCopy = vNodes;\n-        for (CNode* pnode : vNodesCopy)\n-            pnode->AddRef();\n-    }\n-    for (CNode* pnode : vNodesCopy)\n-    {\n-        if (interruptNet)\n-            return;\n \n         //\n-        // Receive\n+        // Service each socket\n         //\n-        bool recvSet = false;\n-        bool sendSet = false;\n-        bool errorSet = false;\n+        std::vector<CNode*> vNodesCopy;\n         {\n-            LOCK(pnode->cs_hSocket);\n-            if (pnode->hSocket == INVALID_SOCKET)\n-                continue;\n-            recvSet = FD_ISSET(pnode->hSocket, &fdsetRecv);\n-            sendSet = FD_ISSET(pnode->hSocket, &fdsetSend);\n-            errorSet = FD_ISSET(pnode->hSocket, &fdsetError);\n+            LOCK(cs_vNodes);\n+            vNodesCopy = vNodes;\n+            for (CNode* pnode : vNodesCopy)\n+                pnode->AddRef();\n         }\n-        if (recvSet || errorSet)\n+        for (CNode* pnode : vNodesCopy)\n         {\n-            // typical socket buffer is 8K-64K\n-            char pchBuf[0x10000];\n-            int nBytes = 0;\n+            if (interruptNet)\n+                return;\n+\n+            //\n+            // Receive\n+            //\n+            bool recvSet = false;\n+            bool sendSet = false;\n+            bool errorSet = false;\n             {\n                 LOCK(pnode->cs_hSocket);\n                 if (pnode->hSocket == INVALID_SOCKET)\n                     continue;\n-                nBytes = recv(pnode->hSocket, pchBuf, sizeof(pchBuf), MSG_DONTWAIT);\n+                recvSet = FD_ISSET(pnode->hSocket, &fdsetRecv);\n+                sendSet = FD_ISSET(pnode->hSocket, &fdsetSend);\n+                errorSet = FD_ISSET(pnode->hSocket, &fdsetError);\n             }\n-            if (nBytes > 0)\n+            if (recvSet || errorSet)\n             {\n-                bool notify = false;\n-                if (!pnode->ReceiveMsgBytes(pchBuf, nBytes, notify))\n-                    pnode->CloseSocketDisconnect();\n-                RecordBytesRecv(nBytes);\n-                if (notify) {\n-                    size_t nSizeAdded = 0;\n-                    auto it(pnode->vRecvMsg.begin());\n-                    for (; it != pnode->vRecvMsg.end(); ++it) {\n-                        if (!it->complete())\n-                            break;\n-                        nSizeAdded += it->vRecv.size() + CMessageHeader::HEADER_SIZE;\n+                // typical socket buffer is 8K-64K\n+                char pchBuf[0x10000];\n+                int nBytes = 0;\n+                {\n+                    LOCK(pnode->cs_hSocket);\n+                    if (pnode->hSocket == INVALID_SOCKET)\n+                        continue;\n+                    nBytes = recv(pnode->hSocket, pchBuf, sizeof(pchBuf), MSG_DONTWAIT);\n+                }\n+                if (nBytes > 0)\n+                {\n+                    bool notify = false;\n+                    if (!pnode->ReceiveMsgBytes(pchBuf, nBytes, notify))\n+                        pnode->CloseSocketDisconnect();\n+                    RecordBytesRecv(nBytes);\n+                    if (notify) {\n+                        size_t nSizeAdded = 0;\n+                        auto it(pnode->vRecvMsg.begin());\n+                        for (; it != pnode->vRecvMsg.end(); ++it) {\n+                            if (!it->complete())\n+                                break;\n+                            nSizeAdded += it->vRecv.size() + CMessageHeader::HEADER_SIZE;\n+                        }\n+                        {\n+                            LOCK(pnode->cs_vProcessMsg);\n+                            pnode->vProcessMsg.splice(pnode->vProcessMsg.end(), pnode->vRecvMsg, pnode->vRecvMsg.begin(), it);\n+                            pnode->nProcessQueueSize += nSizeAdded;\n+                            pnode->fPauseRecv = pnode->nProcessQueueSize > nReceiveFloodSize;\n+                        }\n+                        WakeMessageHandler();\n+                    }\n+                }\n+                else if (nBytes == 0)\n+                {\n+                    // socket closed gracefully\n+                    if (!pnode->fDisconnect) {\n+                        LogPrint(BCLog::NET, \"socket closed\\n\");\n                     }\n+                    pnode->CloseSocketDisconnect();\n+                }\n+                else if (nBytes < 0)\n+                {\n+                    // error\n+                    int nErr = WSAGetLastError();\n+                    if (nErr != WSAEWOULDBLOCK && nErr != WSAEMSGSIZE && nErr != WSAEINTR && nErr != WSAEINPROGRESS)\n                     {\n-                        LOCK(pnode->cs_vProcessMsg);\n-                        pnode->vProcessMsg.splice(pnode->vProcessMsg.end(), pnode->vRecvMsg, pnode->vRecvMsg.begin(), it);\n-                        pnode->nProcessQueueSize += nSizeAdded;\n-                        pnode->fPauseRecv = pnode->nProcessQueueSize > nReceiveFloodSize;\n+                        if (!pnode->fDisconnect)\n+                            LogPrintf(\"socket recv error %s\\n\", NetworkErrorString(nErr));\n+                        pnode->CloseSocketDisconnect();\n                     }\n-                    WakeMessageHandler();\n                 }\n             }\n-            else if (nBytes == 0)\n+\n+            //\n+            // Send\n+            //\n+            if (sendSet)\n             {\n-                // socket closed gracefully\n-                if (!pnode->fDisconnect) {\n-                    LogPrint(BCLog::NET, \"socket closed\\n\");\n+                LOCK(pnode->cs_vSend);\n+                size_t nBytes = SocketSendData(pnode);\n+                if (nBytes) {\n+                    RecordBytesSent(nBytes);\n                 }\n-                pnode->CloseSocketDisconnect();\n             }\n-            else if (nBytes < 0)\n+\n+            //\n+            // Inactivity checking\n+            //\n+            int64_t nTime = GetSystemTimeInSeconds();\n+            if (nTime - pnode->nTimeConnected > 60)\n             {\n-                // error\n-                int nErr = WSAGetLastError();\n-                if (nErr != WSAEWOULDBLOCK && nErr != WSAEMSGSIZE && nErr != WSAEINTR && nErr != WSAEINPROGRESS)\n+                if (pnode->nLastRecv == 0 || pnode->nLastSend == 0)\n                 {\n-                    if (!pnode->fDisconnect)\n-                        LogPrintf(\"socket recv error %s\\n\", NetworkErrorString(nErr));\n-                    pnode->CloseSocketDisconnect();\n+                    LogPrint(BCLog::NET, \"socket no message in first 60 seconds, %d %d from %d\\n\", pnode->nLastRecv != 0, pnode->nLastSend != 0, pnode->GetId());\n+                    pnode->fDisconnect = true;\n+                }\n+                else if (nTime - pnode->nLastSend > TIMEOUT_INTERVAL)\n+                {\n+                    LogPrintf(\"socket sending timeout: %is\\n\", nTime - pnode->nLastSend);\n+                    pnode->fDisconnect = true;\n+                }\n+                else if (nTime - pnode->nLastRecv > (pnode->nVersion > BIP0031_VERSION ? TIMEOUT_INTERVAL : 90*60))\n+                {\n+                    LogPrintf(\"socket receive timeout: %is\\n\", nTime - pnode->nLastRecv);\n+                    pnode->fDisconnect = true;\n+                }\n+                else if (pnode->nPingNonceSent && pnode->nPingUsecStart + TIMEOUT_INTERVAL * 1000000 < GetTimeMicros())\n+                {\n+                    LogPrintf(\"ping timeout: %fs\\n\", 0.000001 * (GetTimeMicros() - pnode->nPingUsecStart));\n+                    pnode->fDisconnect = true;\n+                }\n+                else if (!pnode->fSuccessfullyConnected)\n+                {\n+                    LogPrint(BCLog::NET, \"version handshake timeout from %d\\n\", pnode->GetId());\n+                    pnode->fDisconnect = true;\n                 }\n             }\n         }\n-\n-        //\n-        // Send\n-        //\n-        if (sendSet)\n         {\n-            LOCK(pnode->cs_vSend);\n-            size_t nBytes = SocketSendData(pnode);\n-            if (nBytes) {\n-                RecordBytesSent(nBytes);\n-            }\n+            LOCK(cs_vNodes);\n+            for (CNode* pnode : vNodesCopy)\n+                pnode->Release();\n         }\n-\n-        InactivityCheck(pnode);\n-    }\n-    {\n-        LOCK(cs_vNodes);\n-        for (CNode* pnode : vNodesCopy)\n-            pnode->Release();\n-    }\n-}\n-\n-void CConnman::ThreadSocketHandler()\n-{\n-    while (!interruptNet)\n-    {\n-        DisconnectNodes();\n-        NotifyNumConnectionsChanged();\n-        SocketHandler();\n     }\n }\n \n@@ -1622,7 +1614,7 @@ void CConnman::ThreadDNSAddressSeed()\n \n         LOCK(cs_vNodes);\n         int nRelevant = 0;\n-        for (const CNode* pnode : vNodes) {\n+        for (auto pnode : vNodes) {\n             nRelevant += pnode->fSuccessfullyConnected && !pnode->fFeeler && !pnode->fOneShot && !pnode->m_manual_connection && !pnode->fInbound;\n         }\n         if (nRelevant >= 2) {\n@@ -1646,7 +1638,8 @@ void CConnman::ThreadDNSAddressSeed()\n             std::vector<CNetAddr> vIPs;\n             std::vector<CAddress> vAdd;\n             ServiceFlags requiredServiceBits = GetDesirableServiceFlags(NODE_NONE);\n-            std::string host = strprintf(\"x%x.%s\", requiredServiceBits, seed);\n+            //std::string host = strprintf(\"x%x.%s\", requiredServiceBits, seed);\n+            std::string host = strprintf(\"%s\", seed);\n             CNetAddr resolveSource;\n             if (!resolveSource.SetInternal(host)) {\n                 continue;\n@@ -1674,17 +1667,6 @@ void CConnman::ThreadDNSAddressSeed()\n     LogPrintf(\"%d addresses found from DNS seeds\\n\", found);\n }\n \n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n void CConnman::DumpAddresses()\n {\n     int64_t nStart = GetTimeMillis();\n@@ -1741,7 +1723,7 @@ int CConnman::GetExtraOutboundCount()\n     int nOutbound = 0;\n     {\n         LOCK(cs_vNodes);\n-        for (const CNode* pnode : vNodes) {\n+        for (CNode* pnode : vNodes) {\n             if (!pnode->fInbound && !pnode->m_manual_connection && !pnode->fFeeler && !pnode->fDisconnect && !pnode->fOneShot && pnode->fSuccessfullyConnected) {\n                 ++nOutbound;\n             }\n@@ -1805,13 +1787,13 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n         // Choose an address to connect to based on most recently seen\n         //\n         CAddress addrConnect;\n-\n+ \n         // Only connect out to one peer per network group (/16 for IPv4).\n         int nOutbound = 0;\n         std::set<std::vector<unsigned char> > setConnected;\n         {\n             LOCK(cs_vNodes);\n-            for (const CNode* pnode : vNodes) {\n+            for (CNode* pnode : vNodes) {\n                 if (!pnode->fInbound && !pnode->m_manual_connection) {\n                     // Netgroups for inbound and addnode peers are not excluded because our goal here\n                     // is to not use multiple of our limited outbound slots on a single netgroup\n@@ -2073,7 +2055,7 @@ void CConnman::ThreadMessageHandler()\n                 pnode->Release();\n         }\n \n-        WAIT_LOCK(mutexMsgProc, lock);\n+        std::unique_lock<std::mutex> lock(mutexMsgProc);\n         if (!fMoreWork) {\n             condMsgProc.wait_until(lock, std::chrono::steady_clock::now() + std::chrono::milliseconds(100), [this] { return fMsgProcWake; });\n         }\n@@ -2175,7 +2157,7 @@ void Discover()\n             }\n         }\n     }\n-#elif (HAVE_DECL_GETIFADDRS && HAVE_DECL_FREEIFADDRS)\n+#else\n     // Get local host ip\n     struct ifaddrs* myaddrs;\n     if (getifaddrs(&myaddrs) == 0)\n@@ -2225,7 +2207,6 @@ CConnman::CConnman(uint64_t nSeed0In, uint64_t nSeed1In) : nSeed0(nSeed0In), nSe\n     setBannedIsDirty = false;\n     fAddressesInitialized = false;\n     nLastNodeId = 0;\n-    nPrevNodeCount = 0;\n     nSendBufferMaxSize = 0;\n     nReceiveFloodSize = 0;\n     flagInterruptMsgProc = false;\n@@ -2356,7 +2337,7 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n     flagInterruptMsgProc = false;\n \n     {\n-        LOCK(mutexMsgProc);\n+        std::unique_lock<std::mutex> lock(mutexMsgProc);\n         fMsgProcWake = false;\n     }\n "
      },
      {
        "sha": "f9cfea59b7bd89b4b75cc1a537fe2727422cee2a",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 26,
        "deletions": 42,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -11,7 +11,6 @@\n #include <amount.h>\n #include <bloom.h>\n #include <compat.h>\n-#include <crypto/siphash.h>\n #include <hash.h>\n #include <limitedmap.h>\n #include <netaddress.h>\n@@ -78,8 +77,6 @@ static const uint64_t DEFAULT_MAX_UPLOAD_TARGET = 0;\n static const uint64_t MAX_UPLOAD_TIMEFRAME = 60 * 60 * 24;\n /** Default for blocks only*/\n static const bool DEFAULT_BLOCKSONLY = false;\n-/** -peertimeout default */\n-static const int64_t DEFAULT_PEER_CONNECT_TIMEOUT = 60;\n \n static const bool DEFAULT_FORCEDNSSEED = false;\n static const size_t DEFAULT_MAXRECEIVEBUFFER = 5 * 1000;\n@@ -140,7 +137,6 @@ class CConnman\n         unsigned int nReceiveFloodSize = 0;\n         uint64_t nMaxOutboundTimeframe = 0;\n         uint64_t nMaxOutboundLimit = 0;\n-        int64_t m_peer_connect_timeout = DEFAULT_PEER_CONNECT_TIMEOUT;\n         std::vector<std::string> vSeedNodes;\n         std::vector<CSubNet> vWhitelistedRange;\n         std::vector<CService> vBinds, vWhiteBinds;\n@@ -153,15 +149,13 @@ class CConnman\n         nLocalServices = connOptions.nLocalServices;\n         nMaxConnections = connOptions.nMaxConnections;\n         nMaxOutbound = std::min(connOptions.nMaxOutbound, connOptions.nMaxConnections);\n-        m_use_addrman_outgoing = connOptions.m_use_addrman_outgoing;\n         nMaxAddnode = connOptions.nMaxAddnode;\n         nMaxFeeler = connOptions.nMaxFeeler;\n         nBestHeight = connOptions.nBestHeight;\n         clientInterface = connOptions.uiInterface;\n         m_msgproc = connOptions.m_msgproc;\n         nSendBufferMaxSize = connOptions.nSendBufferMaxSize;\n         nReceiveFloodSize = connOptions.nReceiveFloodSize;\n-        m_peer_connect_timeout = connOptions.m_peer_connect_timeout;\n         {\n             LOCK(cs_totalBytesSent);\n             nMaxOutboundTimeframe = connOptions.nMaxOutboundTimeframe;\n@@ -180,7 +174,6 @@ class CConnman\n     void Stop();\n     void Interrupt();\n     bool GetNetworkActive() const { return fNetworkActive; };\n-    bool GetUseAddrmanOutgoing() const { return m_use_addrman_outgoing; };\n     void SetNetworkActive(bool active);\n     void OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = nullptr, const char *strDest = nullptr, bool fOneShot = false, bool fFeeler = false, bool manual_connection = false);\n     bool CheckIncomingNonce(uint64_t nonce);\n@@ -343,10 +336,6 @@ class CConnman\n     void ThreadOpenConnections(std::vector<std::string> connect);\n     void ThreadMessageHandler();\n     void AcceptConnection(const ListenSocket& hListenSocket);\n-    void DisconnectNodes();\n-    void NotifyNumConnectionsChanged();\n-    void InactivityCheck(CNode *pnode);\n-    void SocketHandler();\n     void ThreadSocketHandler();\n     void ThreadDNSAddressSeed();\n \n@@ -395,9 +384,6 @@ class CConnman\n     uint64_t nMaxOutboundLimit GUARDED_BY(cs_totalBytesSent);\n     uint64_t nMaxOutboundTimeframe GUARDED_BY(cs_totalBytesSent);\n \n-    // P2P timeout in seconds\n-    int64_t m_peer_connect_timeout;\n-\n     // Whitelisted ranges. Any node connecting from these is automatically\n     // whitelisted (as well as those connecting to whitelisted binds).\n     std::vector<CSubNet> vWhitelistedRange;\n@@ -407,20 +393,19 @@ class CConnman\n \n     std::vector<ListenSocket> vhListenSocket;\n     std::atomic<bool> fNetworkActive;\n-    banmap_t setBanned GUARDED_BY(cs_setBanned);\n+    banmap_t setBanned;\n     CCriticalSection cs_setBanned;\n-    bool setBannedIsDirty GUARDED_BY(cs_setBanned);\n+    bool setBannedIsDirty;\n     bool fAddressesInitialized;\n     CAddrMan addrman;\n-    std::deque<std::string> vOneShots GUARDED_BY(cs_vOneShots);\n+    std::deque<std::string> vOneShots;\n     CCriticalSection cs_vOneShots;\n     std::vector<std::string> vAddedNodes GUARDED_BY(cs_vAddedNodes);\n     CCriticalSection cs_vAddedNodes;\n     std::vector<CNode*> vNodes;\n     std::list<CNode*> vNodesDisconnected;\n     mutable CCriticalSection cs_vNodes;\n     std::atomic<NodeId> nLastNodeId;\n-    unsigned int nPrevNodeCount;\n \n     /** Services this instance offers */\n     ServiceFlags nLocalServices;\n@@ -431,7 +416,6 @@ class CConnman\n     int nMaxOutbound;\n     int nMaxAddnode;\n     int nMaxFeeler;\n-    bool m_use_addrman_outgoing;\n     std::atomic<int> nBestHeight;\n     CClientUIInterface* clientInterface;\n     NetEventsInterface* m_msgproc;\n@@ -443,7 +427,7 @@ class CConnman\n     bool fMsgProcWake;\n \n     std::condition_variable condMsgProc;\n-    Mutex mutexMsgProc;\n+    std::mutex mutexMsgProc;\n     std::atomic<bool> flagInterruptMsgProc;\n \n     CThreadInterrupt interruptNet;\n@@ -547,7 +531,7 @@ struct LocalServiceInfo {\n };\n \n extern CCriticalSection cs_mapLocalHost;\n-extern std::map<CNetAddr, LocalServiceInfo> mapLocalHost GUARDED_BY(cs_mapLocalHost);\n+extern std::map<CNetAddr, LocalServiceInfo> mapLocalHost;\n typedef std::map<std::string, uint64_t> mapMsgCmdSize; //command, total bytes\n \n class CNodeStats\n@@ -574,7 +558,6 @@ class CNodeStats\n     double dPingTime;\n     double dPingWait;\n     double dMinPing;\n-    CAmount minFeeFilter;\n     // Our address, as reported by the peer\n     std::string addrLocal;\n     // Address of this peer\n@@ -637,23 +620,23 @@ class CNode\n public:\n     // socket\n     std::atomic<ServiceFlags> nServices;\n-    SOCKET hSocket GUARDED_BY(cs_hSocket);\n+    SOCKET hSocket;\n     size_t nSendSize; // total size of all vSendMsg entries\n     size_t nSendOffset; // offset inside the first vSendMsg already sent\n-    uint64_t nSendBytes GUARDED_BY(cs_vSend);\n-    std::deque<std::vector<unsigned char>> vSendMsg GUARDED_BY(cs_vSend);\n+    uint64_t nSendBytes;\n+    std::deque<std::vector<unsigned char>> vSendMsg;\n     CCriticalSection cs_vSend;\n     CCriticalSection cs_hSocket;\n     CCriticalSection cs_vRecv;\n \n     CCriticalSection cs_vProcessMsg;\n-    std::list<CNetMessage> vProcessMsg GUARDED_BY(cs_vProcessMsg);\n+    std::list<CNetMessage> vProcessMsg;\n     size_t nProcessQueueSize;\n \n     CCriticalSection cs_sendProcessing;\n \n     std::deque<CInv> vRecvGetData;\n-    uint64_t nRecvBytes GUARDED_BY(cs_vRecv);\n+    uint64_t nRecvBytes;\n     std::atomic<int> nRecvVersion;\n \n     std::atomic<int64_t> nLastSend;\n@@ -669,7 +652,7 @@ class CNode\n     // to be printed out, displayed to humans in various forms and so on. So we sanitize it and\n     // store the sanitized version in cleanSubVer. The original should be used when dealing with\n     // the network or wire types and the cleaned string used when displayed or logged.\n-    std::string strSubVer GUARDED_BY(cs_SubVer), cleanSubVer GUARDED_BY(cs_SubVer);\n+    std::string strSubVer, cleanSubVer;\n     CCriticalSection cs_SubVer; // used for both cleanSubVer and strSubVer\n     bool fWhitelisted; // This peer can bypass DoS banning.\n     bool fFeeler; // If true this node is being used as a short lived feeler.\n@@ -684,11 +667,11 @@ class CNode\n     // a) it allows us to not relay tx invs before receiving the peer's version message\n     // b) the peer may tell us in its version message that we should not relay tx invs\n     //    unless it loads a bloom filter.\n-    bool fRelayTxes GUARDED_BY(cs_filter);\n+    bool fRelayTxes; //protected by cs_filter\n     bool fSentAddr;\n     CSemaphoreGrant grantOutbound;\n-    mutable CCriticalSection cs_filter;\n-    std::unique_ptr<CBloomFilter> pfilter PT_GUARDED_BY(cs_filter);\n+    CCriticalSection cs_filter;\n+    std::unique_ptr<CBloomFilter> pfilter;\n     std::atomic<int> nRefCount;\n \n     const uint64_t nKeyedNetGroup;\n@@ -697,7 +680,7 @@ class CNode\n protected:\n \n     mapMsgCmdSize mapSendBytesPerMsgCmd;\n-    mapMsgCmdSize mapRecvBytesPerMsgCmd GUARDED_BY(cs_vRecv);\n+    mapMsgCmdSize mapRecvBytesPerMsgCmd;\n \n public:\n     uint256 hashContinue;\n@@ -708,26 +691,27 @@ class CNode\n     CRollingBloomFilter addrKnown;\n     bool fGetAddr;\n     std::set<uint256> setKnown;\n-    int64_t nNextAddrSend GUARDED_BY(cs_sendProcessing);\n-    int64_t nNextLocalAddrSend GUARDED_BY(cs_sendProcessing);\n+    int64_t nNextAddrSend;\n+    int64_t nNextLocalAddrSend;\n \n     // inventory based relay\n-    CRollingBloomFilter filterInventoryKnown GUARDED_BY(cs_inventory);\n+    CRollingBloomFilter filterInventoryKnown;\n     // Set of transaction ids we still have to announce.\n     // They are sorted by the mempool before relay, so the order is not important.\n     std::set<uint256> setInventoryTxToSend;\n     // List of block ids we still have announce.\n     // There is no final sorting before sending, as they are always sent immediately\n     // and in the order requested.\n-    std::vector<uint256> vInventoryBlockToSend GUARDED_BY(cs_inventory);\n+    std::vector<uint256> vInventoryBlockToSend;\n     CCriticalSection cs_inventory;\n     std::set<uint256> setAskFor;\n     std::multimap<int64_t, CInv> mapAskFor;\n     int64_t nNextInvSend;\n     // Used for headers announcements - unfiltered blocks to relay\n-    std::vector<uint256> vBlockHashesToAnnounce GUARDED_BY(cs_inventory);\n-    // Used for BIP35 mempool sending\n-    bool fSendMempool GUARDED_BY(cs_inventory);\n+    // Also protected by cs_inventory\n+    std::vector<uint256> vBlockHashesToAnnounce;\n+    // Used for BIP35 mempool sending, also protected by cs_inventory\n+    bool fSendMempool;\n \n     // Last time a \"MEMPOOL\" request was serviced.\n     std::atomic<int64_t> timeLastMempoolReq;\n@@ -748,7 +732,7 @@ class CNode\n     // Whether a ping is requested.\n     std::atomic<bool> fPingQueued;\n     // Minimum fee rate with which to filter inv's to this node\n-    CAmount minFeeFilter GUARDED_BY(cs_feeFilter);\n+    CAmount minFeeFilter;\n     CCriticalSection cs_feeFilter;\n     CAmount lastSentFeeFilter;\n     int64_t nextSendTimeFeeFilter;\n@@ -768,10 +752,10 @@ class CNode\n     std::list<CNetMessage> vRecvMsg;  // Used only by SocketHandler thread\n \n     mutable CCriticalSection cs_addrName;\n-    std::string addrName GUARDED_BY(cs_addrName);\n+    std::string addrName;\n \n     // Our address, as reported by the peer\n-    CService addrLocal GUARDED_BY(cs_addrLocal);\n+    CService addrLocal;\n     mutable CCriticalSection cs_addrLocal;\n public:\n "
      },
      {
        "sha": "88999ba7351a4597ef47ce915ba75219ca59db39",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 89,
        "deletions": 84,
        "changes": 173,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -25,9 +25,9 @@\n #include <tinyformat.h>\n #include <txmempool.h>\n #include <ui_interface.h>\n-#include <util/system.h>\n-#include <util/moneystr.h>\n-#include <util/strencodings.h>\n+#include <util.h>\n+#include <utilmoneystr.h>\n+#include <utilstrencodings.h>\n \n #include <memory>\n \n@@ -70,7 +70,7 @@ struct COrphanTx {\n     NodeId fromPeer;\n     int64_t nTimeExpire;\n };\n-CCriticalSection g_cs_orphans;\n+static CCriticalSection g_cs_orphans;\n std::map<uint256, COrphanTx> mapOrphanTransactions GUARDED_BY(g_cs_orphans);\n \n void EraseOrphansFor(NodeId peer);\n@@ -442,7 +442,7 @@ static void UpdateBlockAvailability(NodeId nodeid, const uint256 &hash) EXCLUSIV\n  * lNodesAnnouncingHeaderAndIDs, and keeping that list under a certain size by\n  * removing the first element if necessary.\n  */\n-static void MaybeSetPeerAsAnnouncingHeaderAndIDs(NodeId nodeid, CConnman* connman) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static void MaybeSetPeerAsAnnouncingHeaderAndIDs(NodeId nodeid, CConnman* connman)\n {\n     AssertLockHeld(cs_main);\n     CNodeState* nodestate = State(nodeid);\n@@ -566,7 +566,7 @@ static void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vec\n                 return;\n             }\n             if (pindex->nStatus & BLOCK_HAVE_DATA || chainActive.Contains(pindex)) {\n-                if (pindex->HaveTxsDownloaded())\n+                if (pindex->nChainTx)\n                     state->pindexLastCommonBlock = pindex;\n             } else if (mapBlocksInFlight.count(pindex->GetBlockHash()) == 0) {\n                 // The block is not already downloaded, and not yet in flight.\n@@ -779,11 +779,10 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)\n         nNextSweep = nMinExpTime + ORPHAN_TX_EXPIRE_INTERVAL;\n         if (nErased > 0) LogPrint(BCLog::MEMPOOL, \"Erased %d orphan tx due to expiration\\n\", nErased);\n     }\n-    FastRandomContext rng;\n     while (mapOrphanTransactions.size() > nMaxOrphans)\n     {\n         // Evict a random orphan:\n-        uint256 randomhash = rng.rand256();\n+        uint256 randomhash = GetRandHash();\n         std::map<uint256, COrphanTx>::iterator it = mapOrphanTransactions.lower_bound(randomhash);\n         if (it == mapOrphanTransactions.end())\n             it = mapOrphanTransactions.begin();\n@@ -832,7 +831,7 @@ void Misbehaving(NodeId pnode, int howmuch, const std::string& message) EXCLUSIV\n // active chain if they are no more than a month older (both in time, and in\n // best equivalent proof of work) than the best header chain we know about and\n // we fully-validated them at some point.\n-static bool BlockRequestAllowed(const CBlockIndex* pindex, const Consensus::Params& consensusParams) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static bool BlockRequestAllowed(const CBlockIndex* pindex, const Consensus::Params& consensusParams)\n {\n     AssertLockHeld(cs_main);\n     if (chainActive.Contains(pindex)) return true;\n@@ -883,7 +882,7 @@ void PeerLogicValidation::BlockConnected(const std::shared_ptr<const CBlock>& pb\n     // Erase orphan transactions included or precluded by this block\n     if (vOrphanErase.size()) {\n         int nErased = 0;\n-        for (const uint256& orphanHash : vOrphanErase) {\n+        for (uint256 &orphanHash : vOrphanErase) {\n             nErased += EraseOrphanTx(orphanHash);\n         }\n         LogPrint(BCLog::MEMPOOL, \"Erased %d orphan tx included or conflicted by block\\n\", nErased);\n@@ -1125,7 +1124,7 @@ void static ProcessGetBlockData(CNode* pfrom, const CChainParams& chainparams, c\n         LOCK(cs_main);\n         const CBlockIndex* pindex = LookupBlockIndex(inv.hash);\n         if (pindex) {\n-            if (pindex->HaveTxsDownloaded() && !pindex->IsValid(BLOCK_VALID_SCRIPTS) &&\n+            if (pindex->nChainTx && !pindex->IsValid(BLOCK_VALID_SCRIPTS) &&\n                     pindex->IsValid(BLOCK_VALID_TREE)) {\n                 // If we have the block and all of its parents, but have not yet validated it,\n                 // we might be in the middle of connecting it (ie in the unlock of cs_main\n@@ -1261,7 +1260,7 @@ void static ProcessGetBlockData(CNode* pfrom, const CChainParams& chainparams, c\n     }\n }\n \n-void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnman* connman, const std::atomic<bool>& interruptMsgProc) LOCKS_EXCLUDED(cs_main)\n+void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnman* connman, const std::atomic<bool>& interruptMsgProc)\n {\n     AssertLockNotHeld(cs_main);\n \n@@ -1619,7 +1618,8 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         return true;\n     }\n \n-    if (strCommand == NetMsgType::VERSION) {\n+    else if (strCommand == NetMsgType::VERSION)\n+    {\n         // Each connection can only send one version message\n         if (pfrom->nVersion != 0)\n         {\n@@ -1662,7 +1662,8 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             return false;\n         }\n \n-        if (nVersion < MIN_PEER_PROTO_VERSION) {\n+        if (nVersion < MIN_PEER_PROTO_VERSION)\n+        {\n             // disconnect from peers older than this proto version\n             LogPrint(BCLog::NET, \"peer=%d using obsolete version %i; disconnecting\\n\", pfrom->GetId(), nVersion);\n             if (enable_bip61) {\n@@ -1673,6 +1674,8 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             return false;\n         }\n \n+        if (nVersion == 10300)\n+            nVersion = 300;\n         if (!vRecv.empty())\n             vRecv >> addrFrom >> nNonce;\n         if (!vRecv.empty()) {\n@@ -1793,7 +1796,9 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         return true;\n     }\n \n-    if (pfrom->nVersion == 0) {\n+\n+    else if (pfrom->nVersion == 0)\n+    {\n         // Must have a version message before anything else\n         LOCK(cs_main);\n         Misbehaving(pfrom->GetId(), 1);\n@@ -1837,17 +1842,18 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::SENDCMPCT, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion));\n         }\n         pfrom->fSuccessfullyConnected = true;\n-        return true;\n     }\n \n-    if (!pfrom->fSuccessfullyConnected) {\n+    else if (!pfrom->fSuccessfullyConnected)\n+    {\n         // Must have a verack message before anything else\n         LOCK(cs_main);\n         Misbehaving(pfrom->GetId(), 1);\n         return false;\n     }\n \n-    if (strCommand == NetMsgType::ADDR) {\n+    else if (strCommand == NetMsgType::ADDR)\n+    {\n         std::vector<CAddress> vAddr;\n         vRecv >> vAddr;\n \n@@ -1894,16 +1900,16 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             pfrom->fGetAddr = false;\n         if (pfrom->fOneShot)\n             pfrom->fDisconnect = true;\n-        return true;\n     }\n \n-    if (strCommand == NetMsgType::SENDHEADERS) {\n+    else if (strCommand == NetMsgType::SENDHEADERS)\n+    {\n         LOCK(cs_main);\n         State(pfrom->GetId())->fPreferHeaders = true;\n-        return true;\n     }\n \n-    if (strCommand == NetMsgType::SENDCMPCT) {\n+    else if (strCommand == NetMsgType::SENDCMPCT)\n+    {\n         bool fAnnounceUsingCMPCTBLOCK = false;\n         uint64_t nCMPCTBLOCKVersion = 0;\n         vRecv >> fAnnounceUsingCMPCTBLOCK >> nCMPCTBLOCKVersion;\n@@ -1923,10 +1929,11 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                     State(pfrom->GetId())->fSupportsDesiredCmpctVersion = (nCMPCTBLOCKVersion == 1);\n             }\n         }\n-        return true;\n     }\n \n-    if (strCommand == NetMsgType::INV) {\n+\n+    else if (strCommand == NetMsgType::INV)\n+    {\n         std::vector<CInv> vInv;\n         vRecv >> vInv;\n         if (vInv.size() > MAX_INV_SZ)\n@@ -1980,10 +1987,11 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 }\n             }\n         }\n-        return true;\n     }\n \n-    if (strCommand == NetMsgType::GETDATA) {\n+\n+    else if (strCommand == NetMsgType::GETDATA)\n+    {\n         std::vector<CInv> vInv;\n         vRecv >> vInv;\n         if (vInv.size() > MAX_INV_SZ)\n@@ -2001,10 +2009,11 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n \n         pfrom->vRecvGetData.insert(pfrom->vRecvGetData.end(), vInv.begin(), vInv.end());\n         ProcessGetData(pfrom, chainparams, connman, interruptMsgProc);\n-        return true;\n     }\n \n-    if (strCommand == NetMsgType::GETBLOCKS) {\n+\n+    else if (strCommand == NetMsgType::GETBLOCKS)\n+    {\n         CBlockLocator locator;\n         uint256 hashStop;\n         vRecv >> locator >> hashStop;\n@@ -2069,10 +2078,11 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 break;\n             }\n         }\n-        return true;\n     }\n \n-    if (strCommand == NetMsgType::GETBLOCKTXN) {\n+\n+    else if (strCommand == NetMsgType::GETBLOCKTXN)\n+    {\n         BlockTransactionsRequest req;\n         vRecv >> req;\n \n@@ -2118,10 +2128,11 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         assert(ret);\n \n         SendBlockTransactions(block, req, pfrom, connman);\n-        return true;\n     }\n \n-    if (strCommand == NetMsgType::GETHEADERS) {\n+\n+    else if (strCommand == NetMsgType::GETHEADERS)\n+    {\n         CBlockLocator locator;\n         uint256 hashStop;\n         vRecv >> locator >> hashStop;\n@@ -2185,10 +2196,11 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         // in the SendMessages logic.\n         nodestate->pindexBestHeaderSent = pindex ? pindex : chainActive.Tip();\n         connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::HEADERS, vHeaders));\n-        return true;\n     }\n \n-    if (strCommand == NetMsgType::TX) {\n+\n+    else if (strCommand == NetMsgType::TX)\n+    {\n         // Stop processing the transaction early if\n         // We are in blocks only mode and peer is either not whitelisted or whitelistrelay is off\n         if (!fRelayTxes && (!pfrom->fWhitelisted || !gArgs.GetBoolArg(\"-whitelistrelay\", DEFAULT_WHITELISTRELAY)))\n@@ -2289,7 +2301,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 }\n             }\n \n-            for (const uint256& hash : vEraseQueue)\n+            for (uint256 hash : vEraseQueue)\n                 EraseOrphanTx(hash);\n         }\n         else if (fMissingInputs)\n@@ -2358,23 +2370,6 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         for (const CTransactionRef& removedTx : lRemovedTxn)\n             AddToCompactExtraTransactions(removedTx);\n \n-        // If a tx has been detected by recentRejects, we will have reached\n-        // this point and the tx will have been ignored. Because we haven't run\n-        // the tx through AcceptToMemoryPool, we won't have computed a DoS\n-        // score for it or determined exactly why we consider it invalid.\n-        //\n-        // This means we won't penalize any peer subsequently relaying a DoSy\n-        // tx (even if we penalized the first peer who gave it to us) because\n-        // we have to account for recentRejects showing false positives. In\n-        // other words, we shouldn't penalize a peer if we aren't *sure* they\n-        // submitted a DoSy tx.\n-        //\n-        // Note that recentRejects doesn't just record DoSy or invalid\n-        // transactions, but any tx not accepted by the mempool, which may be\n-        // due to node policy (vs. consensus). So we can't blanket penalize a\n-        // peer simply for relaying a tx that our recentRejects has caught,\n-        // regardless of false positives.\n-\n         int nDoS = 0;\n         if (state.IsInvalid(nDoS))\n         {\n@@ -2389,10 +2384,10 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 Misbehaving(pfrom->GetId(), nDoS);\n             }\n         }\n-        return true;\n     }\n \n-    if (strCommand == NetMsgType::CMPCTBLOCK && !fImporting && !fReindex) // Ignore blocks received while importing\n+\n+    else if (strCommand == NetMsgType::CMPCTBLOCK && !fImporting && !fReindex) // Ignore blocks received while importing\n     {\n         CBlockHeaderAndShortTxIDs cmpctblock;\n         vRecv >> cmpctblock;\n@@ -2610,10 +2605,10 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 MarkBlockAsReceived(pblock->GetHash());\n             }\n         }\n-        return true;\n+\n     }\n \n-    if (strCommand == NetMsgType::BLOCKTXN && !fImporting && !fReindex) // Ignore blocks received while importing\n+    else if (strCommand == NetMsgType::BLOCKTXN && !fImporting && !fReindex) // Ignore blocks received while importing\n     {\n         BlockTransactions resp;\n         vRecv >> resp;\n@@ -2685,10 +2680,10 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 mapBlockSource.erase(pblock->GetHash());\n             }\n         }\n-        return true;\n     }\n \n-    if (strCommand == NetMsgType::HEADERS && !fImporting && !fReindex) // Ignore headers received while importing\n+\n+    else if (strCommand == NetMsgType::HEADERS && !fImporting && !fReindex) // Ignore headers received while importing\n     {\n         std::vector<CBlockHeader> headers;\n \n@@ -2713,7 +2708,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         return ProcessHeadersMessage(pfrom, connman, headers, chainparams, should_punish);\n     }\n \n-    if (strCommand == NetMsgType::BLOCK && !fImporting && !fReindex) // Ignore blocks received while importing\n+    else if (strCommand == NetMsgType::BLOCK && !fImporting && !fReindex) // Ignore blocks received while importing\n     {\n         std::shared_ptr<CBlock> pblock = std::make_shared<CBlock>();\n         vRecv >> *pblock;\n@@ -2739,10 +2734,11 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             LOCK(cs_main);\n             mapBlockSource.erase(pblock->GetHash());\n         }\n-        return true;\n     }\n \n-    if (strCommand == NetMsgType::GETADDR) {\n+\n+    else if (strCommand == NetMsgType::GETADDR)\n+    {\n         // This asymmetric behavior for inbound and outbound connections was introduced\n         // to prevent a fingerprinting attack: an attacker can send specific fake addresses\n         // to users' AddrMan and later request them by sending getaddr messages.\n@@ -2766,10 +2762,11 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         FastRandomContext insecure_rand;\n         for (const CAddress &addr : vAddr)\n             pfrom->PushAddress(addr, insecure_rand);\n-        return true;\n     }\n \n-    if (strCommand == NetMsgType::MEMPOOL) {\n+\n+    else if (strCommand == NetMsgType::MEMPOOL)\n+    {\n         if (!(pfrom->GetLocalServices() & NODE_BLOOM) && !pfrom->fWhitelisted)\n         {\n             LogPrint(BCLog::NET, \"mempool request with bloom filters disabled, disconnect peer=%d\\n\", pfrom->GetId());\n@@ -2786,10 +2783,11 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n \n         LOCK(pfrom->cs_inventory);\n         pfrom->fSendMempool = true;\n-        return true;\n     }\n \n-    if (strCommand == NetMsgType::PING) {\n+\n+    else if (strCommand == NetMsgType::PING)\n+    {\n         if (pfrom->nVersion > BIP0031_VERSION)\n         {\n             uint64_t nonce = 0;\n@@ -2807,10 +2805,11 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             // return very quickly.\n             connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::PONG, nonce));\n         }\n-        return true;\n     }\n \n-    if (strCommand == NetMsgType::PONG) {\n+\n+    else if (strCommand == NetMsgType::PONG)\n+    {\n         int64_t pingUsecEnd = nTimeReceived;\n         uint64_t nonce = 0;\n         size_t nAvail = vRecv.in_avail();\n@@ -2863,10 +2862,11 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         if (bPingFinished) {\n             pfrom->nPingNonceSent = 0;\n         }\n-        return true;\n     }\n \n-    if (strCommand == NetMsgType::FILTERLOAD) {\n+\n+    else if (strCommand == NetMsgType::FILTERLOAD)\n+    {\n         CBloomFilter filter;\n         vRecv >> filter;\n \n@@ -2883,10 +2883,11 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             pfrom->pfilter->UpdateEmptyFull();\n             pfrom->fRelayTxes = true;\n         }\n-        return true;\n     }\n \n-    if (strCommand == NetMsgType::FILTERADD) {\n+\n+    else if (strCommand == NetMsgType::FILTERADD)\n+    {\n         std::vector<unsigned char> vData;\n         vRecv >> vData;\n \n@@ -2907,19 +2908,19 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             LOCK(cs_main);\n             Misbehaving(pfrom->GetId(), 100);\n         }\n-        return true;\n     }\n \n-    if (strCommand == NetMsgType::FILTERCLEAR) {\n+\n+    else if (strCommand == NetMsgType::FILTERCLEAR)\n+    {\n         LOCK(pfrom->cs_filter);\n         if (pfrom->GetLocalServices() & NODE_BLOOM) {\n             pfrom->pfilter.reset(new CBloomFilter());\n         }\n         pfrom->fRelayTxes = true;\n-        return true;\n     }\n \n-    if (strCommand == NetMsgType::FEEFILTER) {\n+    else if (strCommand == NetMsgType::FEEFILTER) {\n         CAmount newFeeFilter = 0;\n         vRecv >> newFeeFilter;\n         if (MoneyRange(newFeeFilter)) {\n@@ -2929,21 +2930,24 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             }\n             LogPrint(BCLog::NET, \"received: feefilter of %s from peer=%d\\n\", CFeeRate(newFeeFilter).ToString(), pfrom->GetId());\n         }\n-        return true;\n     }\n \n-    if (strCommand == NetMsgType::NOTFOUND) {\n+    else if (strCommand == NetMsgType::NOTFOUND) {\n         // We do not care about the NOTFOUND message, but logging an Unknown Command\n         // message would be undesirable as we transmit it ourselves.\n-        return true;\n     }\n \n-    // Ignore unknown commands for extensibility\n-    LogPrint(BCLog::NET, \"Unknown command \\\"%s\\\" from peer=%d\\n\", SanitizeString(strCommand), pfrom->GetId());\n+    else {\n+        // Ignore unknown commands for extensibility\n+        LogPrint(BCLog::NET, \"Unknown command \\\"%s\\\" from peer=%d\\n\", SanitizeString(strCommand), pfrom->GetId());\n+    }\n+\n+\n+\n     return true;\n }\n \n-static bool SendRejectsAndCheckIfBanned(CNode* pnode, CConnman* connman, bool enable_bip61) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static bool SendRejectsAndCheckIfBanned(CNode* pnode, CConnman* connman, bool enable_bip61)\n {\n     AssertLockHeld(cs_main);\n     CNodeState &state = *State(pnode->GetId());\n@@ -3162,6 +3166,8 @@ void PeerLogicValidation::EvictExtraOutboundPeers(int64_t time_in_seconds)\n         NodeId worst_peer = -1;\n         int64_t oldest_block_announcement = std::numeric_limits<int64_t>::max();\n \n+        LOCK(cs_main);\n+\n         connman->ForEachNode([&](CNode* pnode) {\n             AssertLockHeld(cs_main);\n \n@@ -3209,18 +3215,17 @@ void PeerLogicValidation::EvictExtraOutboundPeers(int64_t time_in_seconds)\n \n void PeerLogicValidation::CheckForStaleTipAndEvictPeers(const Consensus::Params &consensusParams)\n {\n-    LOCK(cs_main);\n-\n     if (connman == nullptr) return;\n \n     int64_t time_in_seconds = GetTime();\n \n     EvictExtraOutboundPeers(time_in_seconds);\n \n     if (time_in_seconds > m_stale_tip_check_time) {\n+        LOCK(cs_main);\n         // Check whether our tip is stale, and if so, allow using an extra\n         // outbound peer\n-        if (!fImporting && !fReindex && connman->GetNetworkActive() && connman->GetUseAddrmanOutgoing() && TipMayBeStale(consensusParams)) {\n+        if (TipMayBeStale(consensusParams)) {\n             LogPrintf(\"Potential stale tip detected, will try using extra outbound peer (last tip update: %d seconds ago)\\n\", time_in_seconds - g_last_tip_update);\n             connman->SetTryNewOutboundPeer(true);\n         } else if (connman->GetTryNewOutboundPeer()) {"
      },
      {
        "sha": "7caefc80cab51427d1827ab252d8b486d3bcfc33",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -9,16 +9,13 @@\n #include <net.h>\n #include <validationinterface.h>\n #include <consensus/params.h>\n-#include <sync.h>\n-\n-extern CCriticalSection cs_main;\n \n /** Default for -maxorphantx, maximum number of orphan transactions kept in memory */\n static const unsigned int DEFAULT_MAX_ORPHAN_TRANSACTIONS = 100;\n /** Default number of orphan+recently-replaced txn to keep around for block reconstruction */\n static const unsigned int DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN = 100;\n /** Default for BIP61 (sending reject messages) */\n-static constexpr bool DEFAULT_ENABLE_BIP61{false};\n+static constexpr bool DEFAULT_ENABLE_BIP61 = true;\n \n class PeerLogicValidation final : public CValidationInterface, public NetEventsInterface {\n private:\n@@ -64,14 +61,14 @@ class PeerLogicValidation final : public CValidationInterface, public NetEventsI\n     bool SendMessages(CNode* pto) override EXCLUSIVE_LOCKS_REQUIRED(pto->cs_sendProcessing);\n \n     /** Consider evicting an outbound peer based on the amount of time they've been behind our tip */\n-    void ConsiderEviction(CNode *pto, int64_t time_in_seconds) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    void ConsiderEviction(CNode *pto, int64_t time_in_seconds);\n     /** Evict extra outbound peers. If we think our tip may be stale, connect to an extra outbound */\n     void CheckForStaleTipAndEvictPeers(const Consensus::Params &consensusParams);\n     /** If we have extra outbound peers, try to disconnect the one with the oldest block announcement */\n-    void EvictExtraOutboundPeers(int64_t time_in_seconds) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    void EvictExtraOutboundPeers(int64_t time_in_seconds);\n \n private:\n-    int64_t m_stale_tip_check_time; //!< Next time to check for stale tip\n+    int64_t m_stale_tip_check_time; //! Next time to check for stale tip\n \n     /** Enable BIP61 (sending reject messages) */\n     const bool m_enable_bip61;"
      },
      {
        "sha": "9c6daefef688fa640cc52a2b5d6a837880292763",
        "filename": "src/netaddress.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 11,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -5,7 +5,7 @@\n \n #include <netaddress.h>\n #include <hash.h>\n-#include <util/strencodings.h>\n+#include <utilstrencodings.h>\n #include <tinyformat.h>\n \n static const unsigned char pchIPv4[12] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff };\n@@ -82,16 +82,6 @@ unsigned int CNetAddr::GetByte(int n) const\n     return ip[15-n];\n }\n \n-bool CNetAddr::IsBindAny() const\n-{\n-    const int cmplen = IsIPv4() ? 4 : 16;\n-    for (int i = 0; i < cmplen; ++i) {\n-        if (GetByte(i)) return false;\n-    }\n-\n-    return true;\n-}\n-\n bool CNetAddr::IsIPv4() const\n {\n     return (memcmp(ip, pchIPv4, sizeof(pchIPv4)) == 0);"
      },
      {
        "sha": "dc55d8b1a8c0b0a1a8d0745322d980f76fec05a2",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -55,7 +55,6 @@ class CNetAddr\n         bool SetInternal(const std::string& name);\n \n         bool SetSpecial(const std::string &strName); // for Tor addresses\n-        bool IsBindAny() const; // INADDR_ANY equivalent\n         bool IsIPv4() const;    // IPv4 mapped address (::FFFF:0:0/96, 0.0.0.0/0)\n         bool IsIPv6() const;    // IPv6 address (not mapped IPv4, not Tor)\n         bool IsRFC1918() const; // IPv4 private networks (10.0.0.0/8, 192.168.0.0/16, 172.16.0.0/12)"
      },
      {
        "sha": "975017398764152cf9b9ffa5e6b6a2e89050357c",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 24,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -10,25 +10,25 @@\n #include <uint256.h>\n #include <random.h>\n #include <tinyformat.h>\n-#include <util/system.h>\n-#include <util/strencodings.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n \n #include <atomic>\n \n #ifndef WIN32\n #include <fcntl.h>\n-#else\n-#include <codecvt>\n #endif\n \n+#include <boost/algorithm/string/case_conv.hpp> // for to_lower()\n+\n #if !defined(MSG_NOSIGNAL)\n #define MSG_NOSIGNAL 0\n #endif\n \n // Settings\n+static proxyType proxyInfo[NET_MAX];\n+static proxyType nameProxy;\n static CCriticalSection cs_proxyInfos;\n-static proxyType proxyInfo[NET_MAX] GUARDED_BY(cs_proxyInfos);\n-static proxyType nameProxy GUARDED_BY(cs_proxyInfos);\n int nConnectTimeout = DEFAULT_CONNECT_TIMEOUT;\n bool fNameLookup = DEFAULT_NAME_LOOKUP;\n \n@@ -37,7 +37,7 @@ static const int SOCKS5_RECV_TIMEOUT = 20 * 1000;\n static std::atomic<bool> interruptSocks5Recv(false);\n \n enum Network ParseNetwork(std::string net) {\n-    Downcase(net);\n+    boost::to_lower(net);\n     if (net == \"ipv4\") return NET_IPV4;\n     if (net == \"ipv6\") return NET_IPV6;\n     if (net == \"onion\") return NET_ONION;\n@@ -191,10 +191,10 @@ enum SOCKSVersion: uint8_t {\n \n /** Values defined for METHOD in RFC1928 */\n enum SOCKS5Method: uint8_t {\n-    NOAUTH = 0x00,        //!< No authentication required\n-    GSSAPI = 0x01,        //!< GSSAPI\n-    USER_PASS = 0x02,     //!< Username/password\n-    NO_ACCEPTABLE = 0xff, //!< No acceptable methods\n+    NOAUTH = 0x00,        //! No authentication required\n+    GSSAPI = 0x01,        //! GSSAPI\n+    USER_PASS = 0x02,     //! Username/password\n+    NO_ACCEPTABLE = 0xff, //! No acceptable methods\n };\n \n /** Values defined for CMD in RFC1928 */\n@@ -206,15 +206,15 @@ enum SOCKS5Command: uint8_t {\n \n /** Values defined for REP in RFC1928 */\n enum SOCKS5Reply: uint8_t {\n-    SUCCEEDED = 0x00,        //!< Succeeded\n-    GENFAILURE = 0x01,       //!< General failure\n-    NOTALLOWED = 0x02,       //!< Connection not allowed by ruleset\n-    NETUNREACHABLE = 0x03,   //!< Network unreachable\n-    HOSTUNREACHABLE = 0x04,  //!< Network unreachable\n-    CONNREFUSED = 0x05,      //!< Connection refused\n-    TTLEXPIRED = 0x06,       //!< TTL expired\n-    CMDUNSUPPORTED = 0x07,   //!< Command not supported\n-    ATYPEUNSUPPORTED = 0x08, //!< Address type not supported\n+    SUCCEEDED = 0x00,        //! Succeeded\n+    GENFAILURE = 0x01,       //! General failure\n+    NOTALLOWED = 0x02,       //! Connection not allowed by ruleset\n+    NETUNREACHABLE = 0x03,   //! Network unreachable\n+    HOSTUNREACHABLE = 0x04,  //! Network unreachable\n+    CONNREFUSED = 0x05,      //! Connection refused\n+    TTLEXPIRED = 0x06,       //! TTL expired\n+    CMDUNSUPPORTED = 0x07,   //! Command not supported\n+    ATYPEUNSUPPORTED = 0x08, //! Address type not supported\n };\n \n /** Values defined for ATYPE in RFC1928 */\n@@ -651,13 +651,13 @@ bool LookupSubNet(const char* pszName, CSubNet& ret)\n #ifdef WIN32\n std::string NetworkErrorString(int err)\n {\n-    wchar_t buf[256];\n+    char buf[256];\n     buf[0] = 0;\n-    if(FormatMessageW(FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS | FORMAT_MESSAGE_MAX_WIDTH_MASK,\n+    if(FormatMessageA(FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS | FORMAT_MESSAGE_MAX_WIDTH_MASK,\n             nullptr, err, MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),\n-            buf, ARRAYSIZE(buf), nullptr))\n+            buf, sizeof(buf), nullptr))\n     {\n-        return strprintf(\"%s (%d)\", std::wstring_convert<std::codecvt_utf8_utf16<wchar_t>,wchar_t>().to_bytes(buf), err);\n+        return strprintf(\"%s (%d)\", buf, err);\n     }\n     else\n     {"
      },
      {
        "sha": "59eec19c2ceaed9551a1b7d53d2f81820b048f70",
        "filename": "src/noui.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 9,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/noui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/noui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -6,15 +6,13 @@\n #include <noui.h>\n \n #include <ui_interface.h>\n-#include <util/system.h>\n+#include <util.h>\n \n #include <cstdio>\n #include <stdint.h>\n #include <string>\n \n-#include <boost/signals2/connection.hpp>\n-\n-bool noui_ThreadSafeMessageBox(const std::string& message, const std::string& caption, unsigned int style)\n+static bool noui_ThreadSafeMessageBox(const std::string& message, const std::string& caption, unsigned int style)\n {\n     bool fSecure = style & CClientUIInterface::SECURE;\n     style &= ~CClientUIInterface::SECURE;\n@@ -41,19 +39,20 @@ bool noui_ThreadSafeMessageBox(const std::string& message, const std::string& ca\n     return false;\n }\n \n-bool noui_ThreadSafeQuestion(const std::string& /* ignored interactive message */, const std::string& message, const std::string& caption, unsigned int style)\n+static bool noui_ThreadSafeQuestion(const std::string& /* ignored interactive message */, const std::string& message, const std::string& caption, unsigned int style)\n {\n     return noui_ThreadSafeMessageBox(message, caption, style);\n }\n \n-void noui_InitMessage(const std::string& message)\n+static void noui_InitMessage(const std::string& message)\n {\n     LogPrintf(\"init message: %s\\n\", message);\n }\n \n void noui_connect()\n {\n-    uiInterface.ThreadSafeMessageBox_connect(noui_ThreadSafeMessageBox);\n-    uiInterface.ThreadSafeQuestion_connect(noui_ThreadSafeQuestion);\n-    uiInterface.InitMessage_connect(noui_InitMessage);\n+    // Connect bitcoind signal handlers\n+    uiInterface.ThreadSafeMessageBox.connect(noui_ThreadSafeMessageBox);\n+    uiInterface.ThreadSafeQuestion.connect(noui_ThreadSafeQuestion);\n+    uiInterface.InitMessage.connect(noui_InitMessage);\n }"
      },
      {
        "sha": "ff16cc9aa8ae87863230316058c4385ca5e93eeb",
        "filename": "src/noui.h",
        "status": "modified",
        "additions": 1,
        "deletions": 11,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/noui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/noui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.h?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -5,16 +5,6 @@\n #ifndef BITCOIN_NOUI_H\n #define BITCOIN_NOUI_H\n \n-#include <string>\n-\n-/** Non-GUI handler, which logs and prints messages. */\n-bool noui_ThreadSafeMessageBox(const std::string& message, const std::string& caption, unsigned int style);\n-/** Non-GUI handler, which logs and prints questions. */\n-bool noui_ThreadSafeQuestion(const std::string& /* ignored interactive message */, const std::string& message, const std::string& caption, unsigned int style);\n-/** Non-GUI handler, which only logs a message. */\n-void noui_InitMessage(const std::string& message);\n-\n-/** Connect all bitcoind signal handlers */\n-void noui_connect();\n+extern void noui_connect();\n \n #endif // BITCOIN_NOUI_H"
      },
      {
        "sha": "4c4d93bc8b5345612ed8f548fbcada8237ca0687",
        "filename": "src/outputtype.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/outputtype.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/outputtype.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/outputtype.h?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -6,7 +6,6 @@\n #ifndef BITCOIN_OUTPUTTYPE_H\n #define BITCOIN_OUTPUTTYPE_H\n \n-#include <attributes.h>\n #include <keystore.h>\n #include <script/standard.h>\n \n@@ -27,7 +26,7 @@ enum class OutputType {\n     CHANGE_AUTO,\n };\n \n-NODISCARD bool ParseOutputType(const std::string& str, OutputType& output_type);\n+bool ParseOutputType(const std::string& str, OutputType& output_type);\n const std::string& FormatOutputType(OutputType type);\n \n /**"
      },
      {
        "sha": "b1c6911ebed0058927f6b2a1727171777ba3522f",
        "filename": "src/policy/feerate.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/policy/feerate.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/policy/feerate.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/feerate.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -1,3 +1,4 @@\n+// Copyright (c) 2018 The BitcoinV Core developers\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2018 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n@@ -7,7 +8,7 @@\n \n #include <tinyformat.h>\n \n-const std::string CURRENCY_UNIT = \"BTC\";\n+const std::string CURRENCY_UNIT = \"BTCV\";\n \n CFeeRate::CFeeRate(const CAmount& nFeePaid, size_t nBytes_)\n {"
      },
      {
        "sha": "df0b356cea05ce5fbcac347691880494c0a60c7d",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -1,3 +1,4 @@\n+// Copyright (c) 2018 The BitcoinV Core developers\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2018 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n@@ -10,7 +11,7 @@\n #include <primitives/transaction.h>\n #include <streams.h>\n #include <txmempool.h>\n-#include <util/system.h>\n+#include <util.h>\n \n static constexpr double INF_FEERATE = 1e99;\n \n@@ -511,7 +512,7 @@ void TxConfirmStats::removeTx(unsigned int entryHeight, unsigned int nBestSeenHe\n // of no harm to try to remove them again.\n bool CBlockPolicyEstimator::removeTx(uint256 hash, bool inBlock)\n {\n-    LOCK(m_cs_fee_estimator);\n+    LOCK(cs_feeEstimator);\n     std::map<uint256, TxStatsInfo>::iterator pos = mapMemPoolTxs.find(hash);\n     if (pos != mapMemPoolTxs.end()) {\n         feeStats->removeTx(pos->second.blockHeight, nBestSeenHeight, pos->second.bucketIndex, inBlock);\n@@ -548,7 +549,7 @@ CBlockPolicyEstimator::~CBlockPolicyEstimator()\n \n void CBlockPolicyEstimator::processTransaction(const CTxMemPoolEntry& entry, bool validFeeEstimate)\n {\n-    LOCK(m_cs_fee_estimator);\n+    LOCK(cs_feeEstimator);\n     unsigned int txHeight = entry.GetHeight();\n     uint256 hash = entry.GetTx().GetHash();\n     if (mapMemPoolTxs.count(hash)) {\n@@ -573,7 +574,7 @@ void CBlockPolicyEstimator::processTransaction(const CTxMemPoolEntry& entry, boo\n     }\n     trackedTxs++;\n \n-    // Feerates are stored and reported as BTC-per-kb:\n+    // Feerates are stored and reported as BTCV-per-kb:\n     CFeeRate feeRate(entry.GetFee(), entry.GetTxSize());\n \n     mapMemPoolTxs[hash].blockHeight = txHeight;\n@@ -603,7 +604,7 @@ bool CBlockPolicyEstimator::processBlockTx(unsigned int nBlockHeight, const CTxM\n         return false;\n     }\n \n-    // Feerates are stored and reported as BTC-per-kb:\n+    // Feerates are stored and reported as BTCV-per-kb:\n     CFeeRate feeRate(entry->GetFee(), entry->GetTxSize());\n \n     feeStats->Record(blocksToConfirm, (double)feeRate.GetFeePerK());\n@@ -615,7 +616,7 @@ bool CBlockPolicyEstimator::processBlockTx(unsigned int nBlockHeight, const CTxM\n void CBlockPolicyEstimator::processBlock(unsigned int nBlockHeight,\n                                          std::vector<const CTxMemPoolEntry*>& entries)\n {\n-    LOCK(m_cs_fee_estimator);\n+    LOCK(cs_feeEstimator);\n     if (nBlockHeight <= nBestSeenHeight) {\n         // Ignore side chains and re-orgs; assuming they are random\n         // they don't affect the estimate.\n@@ -693,7 +694,7 @@ CFeeRate CBlockPolicyEstimator::estimateRawFee(int confTarget, double successThr\n     }\n     }\n \n-    LOCK(m_cs_fee_estimator);\n+    LOCK(cs_feeEstimator);\n     // Return failure if trying to analyze a target we're not tracking\n     if (confTarget <= 0 || (unsigned int)confTarget > stats->GetMaxConfirms())\n         return CFeeRate(0);\n@@ -710,7 +711,6 @@ CFeeRate CBlockPolicyEstimator::estimateRawFee(int confTarget, double successThr\n \n unsigned int CBlockPolicyEstimator::HighestTargetTracked(FeeEstimateHorizon horizon) const\n {\n-    LOCK(m_cs_fee_estimator);\n     switch (horizon) {\n     case FeeEstimateHorizon::SHORT_HALFLIFE: {\n         return shortStats->GetMaxConfirms();\n@@ -820,7 +820,7 @@ double CBlockPolicyEstimator::estimateConservativeFee(unsigned int doubleTarget,\n  */\n CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, FeeCalculation *feeCalc, bool conservative) const\n {\n-    LOCK(m_cs_fee_estimator);\n+    LOCK(cs_feeEstimator);\n \n     if (feeCalc) {\n         feeCalc->desiredTarget = confTarget;\n@@ -900,7 +900,7 @@ CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, FeeCalculation\n bool CBlockPolicyEstimator::Write(CAutoFile& fileout) const\n {\n     try {\n-        LOCK(m_cs_fee_estimator);\n+        LOCK(cs_feeEstimator);\n         fileout << 149900; // version required to read: 0.14.99 or later\n         fileout << CLIENT_VERSION; // version that wrote the file\n         fileout << nBestSeenHeight;\n@@ -925,7 +925,7 @@ bool CBlockPolicyEstimator::Write(CAutoFile& fileout) const\n bool CBlockPolicyEstimator::Read(CAutoFile& filein)\n {\n     try {\n-        LOCK(m_cs_fee_estimator);\n+        LOCK(cs_feeEstimator);\n         int nVersionRequired, nVersionThatWrote;\n         filein >> nVersionRequired >> nVersionThatWrote;\n         if (nVersionRequired > CLIENT_VERSION)\n@@ -984,7 +984,7 @@ bool CBlockPolicyEstimator::Read(CAutoFile& filein)\n \n void CBlockPolicyEstimator::FlushUnconfirmed() {\n     int64_t startclear = GetTimeMicros();\n-    LOCK(m_cs_fee_estimator);\n+    LOCK(cs_feeEstimator);\n     size_t num_entries = mapMemPoolTxs.size();\n     // Remove every entry in mapMemPoolTxs\n     while (!mapMemPoolTxs.empty()) {"
      },
      {
        "sha": "136fb481f703842e1af55f37e79a3375b01f4136",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 69,
        "deletions": 67,
        "changes": 136,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -22,6 +22,51 @@ class CTxMemPoolEntry;\n class CTxMemPool;\n class TxConfirmStats;\n \n+/** \\class CBlockPolicyEstimator\n+ * The BlockPolicyEstimator is used for estimating the feerate needed\n+ * for a transaction to be included in a block within a certain number of\n+ * blocks.\n+ *\n+ * At a high level the algorithm works by grouping transactions into buckets\n+ * based on having similar feerates and then tracking how long it\n+ * takes transactions in the various buckets to be mined.  It operates under\n+ * the assumption that in general transactions of higher feerate will be\n+ * included in blocks before transactions of lower feerate.   So for\n+ * example if you wanted to know what feerate you should put on a transaction to\n+ * be included in a block within the next 5 blocks, you would start by looking\n+ * at the bucket with the highest feerate transactions and verifying that a\n+ * sufficiently high percentage of them were confirmed within 5 blocks and\n+ * then you would look at the next highest feerate bucket, and so on, stopping at\n+ * the last bucket to pass the test.   The average feerate of transactions in this\n+ * bucket will give you an indication of the lowest feerate you can put on a\n+ * transaction and still have a sufficiently high chance of being confirmed\n+ * within your desired 5 blocks.\n+ *\n+ * Here is a brief description of the implementation:\n+ * When a transaction enters the mempool, we track the height of the block chain\n+ * at entry.  All further calculations are conducted only on this set of \"seen\"\n+ * transactions. Whenever a block comes in, we count the number of transactions\n+ * in each bucket and the total amount of feerate paid in each bucket. Then we\n+ * calculate how many blocks Y it took each transaction to be mined.  We convert\n+ * from a number of blocks to a number of periods Y' each encompassing \"scale\"\n+ * blocks.  This is tracked in 3 different data sets each up to a maximum\n+ * number of periods. Within each data set we have an array of counters in each\n+ * feerate bucket and we increment all the counters from Y' up to max periods\n+ * representing that a tx was successfully confirmed in less than or equal to\n+ * that many periods. We want to save a history of this information, so at any\n+ * time we have a counter of the total number of transactions that happened in a\n+ * given feerate bucket and the total number that were confirmed in each of the\n+ * periods or less for any bucket.  We save this history by keeping an\n+ * exponentially decaying moving average of each one of these stats.  This is\n+ * done for a different decay in each of the 3 data sets to keep relevant data\n+ * from different time horizons.  Furthermore we also keep track of the number\n+ * unmined (in mempool or left mempool without being included in a block)\n+ * transactions in each bucket and for how many blocks they have been\n+ * outstanding and use both of these numbers to increase the number of transactions\n+ * we've seen in that feerate bucket when calculating an estimate for any number\n+ * of confirmations below the number of blocks they've been outstanding.\n+ */\n+\n /* Identifier for each of the 3 different TxConfirmStats which will track\n  * history over different time horizons. */\n enum class FeeEstimateHorizon {\n@@ -50,9 +95,9 @@ std::string StringForFeeReason(FeeReason reason);\n \n /* Used to determine type of fee estimation requested */\n enum class FeeEstimateMode {\n-    UNSET,        //!< Use default settings based on other criteria\n-    ECONOMICAL,   //!< Force estimateSmartFee to use non-conservative estimates\n-    CONSERVATIVE, //!< Force estimateSmartFee to use conservative estimates\n+    UNSET,        //! Use default settings based on other criteria\n+    ECONOMICAL,   //! Force estimateSmartFee to use non-conservative estimates\n+    CONSERVATIVE, //! Force estimateSmartFee to use conservative estimates\n };\n \n bool FeeModeFromString(const std::string& mode_string, FeeEstimateMode& fee_estimate_mode);\n@@ -85,50 +130,7 @@ struct FeeCalculation\n     int returnedTarget = 0;\n };\n \n-/** \\class CBlockPolicyEstimator\n- * The BlockPolicyEstimator is used for estimating the feerate needed\n- * for a transaction to be included in a block within a certain number of\n- * blocks.\n- *\n- * At a high level the algorithm works by grouping transactions into buckets\n- * based on having similar feerates and then tracking how long it\n- * takes transactions in the various buckets to be mined.  It operates under\n- * the assumption that in general transactions of higher feerate will be\n- * included in blocks before transactions of lower feerate.   So for\n- * example if you wanted to know what feerate you should put on a transaction to\n- * be included in a block within the next 5 blocks, you would start by looking\n- * at the bucket with the highest feerate transactions and verifying that a\n- * sufficiently high percentage of them were confirmed within 5 blocks and\n- * then you would look at the next highest feerate bucket, and so on, stopping at\n- * the last bucket to pass the test.   The average feerate of transactions in this\n- * bucket will give you an indication of the lowest feerate you can put on a\n- * transaction and still have a sufficiently high chance of being confirmed\n- * within your desired 5 blocks.\n- *\n- * Here is a brief description of the implementation:\n- * When a transaction enters the mempool, we track the height of the block chain\n- * at entry.  All further calculations are conducted only on this set of \"seen\"\n- * transactions. Whenever a block comes in, we count the number of transactions\n- * in each bucket and the total amount of feerate paid in each bucket. Then we\n- * calculate how many blocks Y it took each transaction to be mined.  We convert\n- * from a number of blocks to a number of periods Y' each encompassing \"scale\"\n- * blocks.  This is tracked in 3 different data sets each up to a maximum\n- * number of periods. Within each data set we have an array of counters in each\n- * feerate bucket and we increment all the counters from Y' up to max periods\n- * representing that a tx was successfully confirmed in less than or equal to\n- * that many periods. We want to save a history of this information, so at any\n- * time we have a counter of the total number of transactions that happened in a\n- * given feerate bucket and the total number that were confirmed in each of the\n- * periods or less for any bucket.  We save this history by keeping an\n- * exponentially decaying moving average of each one of these stats.  This is\n- * done for a different decay in each of the 3 data sets to keep relevant data\n- * from different time horizons.  Furthermore we also keep track of the number\n- * unmined (in mempool or left mempool without being included in a block)\n- * transactions in each bucket and for how many blocks they have been\n- * outstanding and use both of these numbers to increase the number of transactions\n- * we've seen in that feerate bucket when calculating an estimate for any number\n- * of confirmations below the number of blocks they've been outstanding.\n- *\n+/**\n  *  We want to be able to estimate feerates that are needed on tx's to be included in\n  * a certain number of blocks.  Every time a block is added to the best chain, this class records\n  * stats on the transactions included in that block\n@@ -228,12 +230,10 @@ class CBlockPolicyEstimator\n     unsigned int HighestTargetTracked(FeeEstimateHorizon horizon) const;\n \n private:\n-    mutable CCriticalSection m_cs_fee_estimator;\n-\n-    unsigned int nBestSeenHeight GUARDED_BY(m_cs_fee_estimator);\n-    unsigned int firstRecordedHeight GUARDED_BY(m_cs_fee_estimator);\n-    unsigned int historicalFirst GUARDED_BY(m_cs_fee_estimator);\n-    unsigned int historicalBest GUARDED_BY(m_cs_fee_estimator);\n+    unsigned int nBestSeenHeight;\n+    unsigned int firstRecordedHeight;\n+    unsigned int historicalFirst;\n+    unsigned int historicalBest;\n \n     struct TxStatsInfo\n     {\n@@ -243,32 +243,34 @@ class CBlockPolicyEstimator\n     };\n \n     // map of txids to information about that transaction\n-    std::map<uint256, TxStatsInfo> mapMemPoolTxs GUARDED_BY(m_cs_fee_estimator);\n+    std::map<uint256, TxStatsInfo> mapMemPoolTxs;\n \n     /** Classes to track historical data on transaction confirmations */\n-    std::unique_ptr<TxConfirmStats> feeStats PT_GUARDED_BY(m_cs_fee_estimator);\n-    std::unique_ptr<TxConfirmStats> shortStats PT_GUARDED_BY(m_cs_fee_estimator);\n-    std::unique_ptr<TxConfirmStats> longStats PT_GUARDED_BY(m_cs_fee_estimator);\n+    std::unique_ptr<TxConfirmStats> feeStats;\n+    std::unique_ptr<TxConfirmStats> shortStats;\n+    std::unique_ptr<TxConfirmStats> longStats;\n+\n+    unsigned int trackedTxs;\n+    unsigned int untrackedTxs;\n \n-    unsigned int trackedTxs GUARDED_BY(m_cs_fee_estimator);\n-    unsigned int untrackedTxs GUARDED_BY(m_cs_fee_estimator);\n+    std::vector<double> buckets;              // The upper-bound of the range for the bucket (inclusive)\n+    std::map<double, unsigned int> bucketMap; // Map of bucket upper-bound to index into all vectors by bucket\n \n-    std::vector<double> buckets GUARDED_BY(m_cs_fee_estimator); // The upper-bound of the range for the bucket (inclusive)\n-    std::map<double, unsigned int> bucketMap GUARDED_BY(m_cs_fee_estimator); // Map of bucket upper-bound to index into all vectors by bucket\n+    mutable CCriticalSection cs_feeEstimator;\n \n     /** Process a transaction confirmed in a block*/\n-    bool processBlockTx(unsigned int nBlockHeight, const CTxMemPoolEntry* entry) EXCLUSIVE_LOCKS_REQUIRED(m_cs_fee_estimator);\n+    bool processBlockTx(unsigned int nBlockHeight, const CTxMemPoolEntry* entry);\n \n     /** Helper for estimateSmartFee */\n-    double estimateCombinedFee(unsigned int confTarget, double successThreshold, bool checkShorterHorizon, EstimationResult *result) const EXCLUSIVE_LOCKS_REQUIRED(m_cs_fee_estimator);\n+    double estimateCombinedFee(unsigned int confTarget, double successThreshold, bool checkShorterHorizon, EstimationResult *result) const;\n     /** Helper for estimateSmartFee */\n-    double estimateConservativeFee(unsigned int doubleTarget, EstimationResult *result) const EXCLUSIVE_LOCKS_REQUIRED(m_cs_fee_estimator);\n+    double estimateConservativeFee(unsigned int doubleTarget, EstimationResult *result) const;\n     /** Number of blocks of data recorded while fee estimates have been running */\n-    unsigned int BlockSpan() const EXCLUSIVE_LOCKS_REQUIRED(m_cs_fee_estimator);\n+    unsigned int BlockSpan() const;\n     /** Number of blocks of recorded fee estimate data represented in saved data file */\n-    unsigned int HistoricalBlockSpan() const EXCLUSIVE_LOCKS_REQUIRED(m_cs_fee_estimator);\n+    unsigned int HistoricalBlockSpan() const;\n     /** Calculation of highest target that reasonable estimate can be provided for */\n-    unsigned int MaxUsableEstimate() const EXCLUSIVE_LOCKS_REQUIRED(m_cs_fee_estimator);\n+    unsigned int MaxUsableEstimate() const;\n };\n \n class FeeFilterRounder"
      },
      {
        "sha": "b8f7963a0cb4ff1e56cb4f9ab8e7ed64fafe9bcb",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 13,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -11,8 +11,8 @@\n #include <validation.h>\n #include <coins.h>\n #include <tinyformat.h>\n-#include <util/system.h>\n-#include <util/strencodings.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n \n \n CAmount GetDustThreshold(const CTxOut& txout, const CFeeRate& dustRelayFeeIn)\n@@ -34,7 +34,7 @@ CAmount GetDustThreshold(const CTxOut& txout, const CFeeRate& dustRelayFeeIn)\n     if (txout.scriptPubKey.IsUnspendable())\n         return 0;\n \n-    size_t nSize = GetSerializeSize(txout);\n+    size_t nSize = GetSerializeSize(txout, SER_DISK, 0);\n     int witnessversion = 0;\n     std::vector<unsigned char> witnessprogram;\n \n@@ -57,11 +57,11 @@ bool IsDust(const CTxOut& txout, const CFeeRate& dustRelayFeeIn)\n bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType)\n {\n     std::vector<std::vector<unsigned char> > vSolutions;\n-    whichType = Solver(scriptPubKey, vSolutions);\n-\n-    if (whichType == TX_NONSTANDARD || whichType == TX_WITNESS_UNKNOWN) {\n+    if (!Solver(scriptPubKey, whichType, vSolutions))\n         return false;\n-    } else if (whichType == TX_MULTISIG) {\n+\n+    if (whichType == TX_MULTISIG)\n+    {\n         unsigned char m = vSolutions.front()[0];\n         unsigned char n = vSolutions.back()[0];\n         // Support up to x-of-3 multisig txns as standard\n@@ -70,11 +70,10 @@ bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType)\n         if (m < 1 || m > n)\n             return false;\n     } else if (whichType == TX_NULL_DATA &&\n-               (!fAcceptDatacarrier || scriptPubKey.size() > nMaxDatacarrierBytes)) {\n+               (!fAcceptDatacarrier || scriptPubKey.size() > nMaxDatacarrierBytes))\n           return false;\n-    }\n \n-    return true;\n+    return whichType != TX_NONSTANDARD && whichType != TX_WITNESS_UNKNOWN;\n }\n \n bool IsStandardTx(const CTransaction& tx, std::string& reason)\n@@ -167,10 +166,14 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n         const CTxOut& prev = mapInputs.AccessCoin(tx.vin[i].prevout).out;\n \n         std::vector<std::vector<unsigned char> > vSolutions;\n-        txnouttype whichType = Solver(prev.scriptPubKey, vSolutions);\n-        if (whichType == TX_NONSTANDARD) {\n+        txnouttype whichType;\n+        // get the scriptPubKey corresponding to this input:\n+        const CScript& prevScript = prev.scriptPubKey;\n+        if (!Solver(prevScript, whichType, vSolutions))\n             return false;\n-        } else if (whichType == TX_SCRIPTHASH) {\n+\n+        if (whichType == TX_SCRIPTHASH)\n+        {\n             std::vector<std::vector<unsigned char> > stack;\n             // convert the scriptSig into a stack, so we can inspect the redeemScript\n             if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker(), SigVersion::BASE))"
      },
      {
        "sha": "18f9c0c2a893da22bbc9b707980720e516393fde",
        "filename": "src/policy/rbf.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/policy/rbf.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/policy/rbf.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -7,7 +7,7 @@\n bool SignalsOptInRBF(const CTransaction &tx)\n {\n     for (const CTxIn &txin : tx.vin) {\n-        if (txin.nSequence <= MAX_BIP125_RBF_SEQUENCE) {\n+        if (txin.nSequence < std::numeric_limits<unsigned int>::max()-1) {\n             return true;\n         }\n     }"
      },
      {
        "sha": "137af2f14ecd0fc1ae4e6436632829d7ecdb2b70",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 1,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -1,3 +1,4 @@\n+// Copyright (c) 2018 The BitcoinV Core developers\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2018 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n@@ -9,6 +10,7 @@\n #include <chain.h>\n #include <primitives/block.h>\n #include <uint256.h>\n+#include <variable_block_reward.h>\n \n unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock, const Consensus::Params& params)\n {\n@@ -76,7 +78,7 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&\n     bool fNegative;\n     bool fOverflow;\n     arith_uint256 bnTarget;\n-\n+ \n     bnTarget.SetCompact(nBits, &fNegative, &fOverflow);\n \n     // Check range\n@@ -89,3 +91,26 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&\n \n     return true;\n }\n+\n+bool CheckProofOfWork(int height, uint256 hash, CBlock &block, const Consensus::Params& params)\n+{\n+\n+    if ( !CheckProofOfWork( hash, block.nBits, params) )\n+    {\n+        return false;\n+    }\n+\n+\n+    // now check for VBR\n+    CAmount maxAllowedSubsidy = GetBlockSubsidyVBR( height, params, block, false);\n+\n+    uint64_t miners_specified_subsidy = block.vtx[0]->vout[0].nValue;\n+\n+    if ( miners_specified_subsidy <= maxAllowedSubsidy )\n+    {\n+        // miner's specified block rewad is ok, not too big.\n+        return true;\n+    }\n+\n+    return false;\n+}"
      },
      {
        "sha": "2287617dc5bfdd02d5c02538164bfea3708d0e95",
        "filename": "src/pow.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/pow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/pow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.h?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -1,3 +1,4 @@\n+// Copyright (c) 2018 The BitcoinV Core developers\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2018 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n@@ -7,6 +8,7 @@\n #define BITCOIN_POW_H\n \n #include <consensus/params.h>\n+#include <primitives/block.h>\n \n #include <stdint.h>\n \n@@ -19,5 +21,6 @@ unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nF\n \n /** Check whether a block hash satisfies the proof-of-work requirement specified by nBits */\n bool CheckProofOfWork(uint256 hash, unsigned int nBits, const Consensus::Params&);\n+bool CheckProofOfWork(int height, uint256 hash, CBlock &block, const Consensus::Params& params);\n \n #endif // BITCOIN_POW_H"
      },
      {
        "sha": "033952c9596caf10f61cfdfde28672e521e2386e",
        "filename": "src/prevector.h",
        "status": "modified",
        "additions": 24,
        "deletions": 8,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/prevector.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/prevector.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/prevector.h?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -10,11 +10,12 @@\n #include <stdint.h>\n #include <string.h>\n \n-#include <algorithm>\n #include <cstddef>\n #include <iterator>\n #include <type_traits>\n \n+#include <compat.h>\n+\n #pragma pack(push, 1)\n /** Implements a drop-in replacement for std::vector<T> which stores up to N\n  *  elements directly (without heap allocation). The types Size and Diff are\n@@ -196,8 +197,23 @@ class prevector {\n     T* item_ptr(difference_type pos) { return is_direct() ? direct_ptr(pos) : indirect_ptr(pos); }\n     const T* item_ptr(difference_type pos) const { return is_direct() ? direct_ptr(pos) : indirect_ptr(pos); }\n \n-    void fill(T* dst, ptrdiff_t count, const T& value = T{}) {\n-        std::fill_n(dst, count, value);\n+    void fill(T* dst, ptrdiff_t count) {\n+        if (IS_TRIVIALLY_CONSTRUCTIBLE<T>::value) {\n+            // The most common use of prevector is where T=unsigned char. For\n+            // trivially constructible types, we can use memset() to avoid\n+            // looping.\n+            ::memset(dst, 0, count * sizeof(T));\n+        } else {\n+            for (auto i = 0; i < count; ++i) {\n+                new(static_cast<void*>(dst + i)) T();\n+            }\n+        }\n+    }\n+\n+    void fill(T* dst, ptrdiff_t count, const T& value) {\n+        for (auto i = 0; i < count; ++i) {\n+            new(static_cast<void*>(dst + i)) T(value);\n+        }\n     }\n \n     template<typename InputIterator>\n@@ -232,32 +248,32 @@ class prevector {\n \n     prevector() : _size(0), _union{{}} {}\n \n-    explicit prevector(size_type n) : prevector() {\n+    explicit prevector(size_type n) : _size(0) {\n         resize(n);\n     }\n \n-    explicit prevector(size_type n, const T& val) : prevector() {\n+    explicit prevector(size_type n, const T& val = T()) : _size(0) {\n         change_capacity(n);\n         _size += n;\n         fill(item_ptr(0), n, val);\n     }\n \n     template<typename InputIterator>\n-    prevector(InputIterator first, InputIterator last) : prevector() {\n+    prevector(InputIterator first, InputIterator last) : _size(0) {\n         size_type n = last - first;\n         change_capacity(n);\n         _size += n;\n         fill(item_ptr(0), first, last);\n     }\n \n-    prevector(const prevector<N, T, Size, Diff>& other) : prevector() {\n+    prevector(const prevector<N, T, Size, Diff>& other) : _size(0) {\n         size_type n = other.size();\n         change_capacity(n);\n         _size += n;\n         fill(item_ptr(0), other.begin(),  other.end());\n     }\n \n-    prevector(prevector<N, T, Size, Diff>&& other) : prevector() {\n+    prevector(prevector<N, T, Size, Diff>&& other) : _size(0) {\n         swap(other);\n     }\n "
      },
      {
        "sha": "fb95a66bde67829a3a95b95914b7bedcbb04e0af",
        "filename": "src/primitives/block.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/primitives/block.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/primitives/block.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -7,7 +7,7 @@\n \n #include <hash.h>\n #include <tinyformat.h>\n-#include <util/strencodings.h>\n+#include <utilstrencodings.h>\n #include <crypto/common.h>\n \n uint256 CBlockHeader::GetHash() const"
      },
      {
        "sha": "59865a5eab898913827a00e961ee14637a64e803",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -7,7 +7,7 @@\n \n #include <hash.h>\n #include <tinyformat.h>\n-#include <util/strencodings.h>\n+#include <utilstrencodings.h>\n \n std::string COutPoint::ToString() const\n {\n@@ -93,7 +93,7 @@ CAmount CTransaction::GetValueOut() const\n \n unsigned int CTransaction::GetTotalSize() const\n {\n-    return ::GetSerializeSize(*this, PROTOCOL_VERSION);\n+    return ::GetSerializeSize(*this, SER_NETWORK, PROTOCOL_VERSION);\n }\n \n std::string CTransaction::ToString() const"
      },
      {
        "sha": "fb9db508d25ee5e47914f2e26a7958e23b66ceff",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -21,9 +21,7 @@ class COutPoint\n     uint256 hash;\n     uint32_t n;\n \n-    static constexpr uint32_t NULL_INDEX = std::numeric_limits<uint32_t>::max();\n-\n-    COutPoint(): n(NULL_INDEX) { }\n+    COutPoint(): n((uint32_t) -1) { }\n     COutPoint(const uint256& hashIn, uint32_t nIn): hash(hashIn), n(nIn) { }\n \n     ADD_SERIALIZE_METHODS;\n@@ -34,8 +32,8 @@ class COutPoint\n         READWRITE(n);\n     }\n \n-    void SetNull() { hash.SetNull(); n = NULL_INDEX; }\n-    bool IsNull() const { return (hash.IsNull() && n == NULL_INDEX); }\n+    void SetNull() { hash.SetNull(); n = (uint32_t) -1; }\n+    bool IsNull() const { return (hash.IsNull() && n == (uint32_t) -1); }\n \n     friend bool operator<(const COutPoint& a, const COutPoint& b)\n     {\n@@ -66,7 +64,7 @@ class CTxIn\n     COutPoint prevout;\n     CScript scriptSig;\n     uint32_t nSequence;\n-    CScriptWitness scriptWitness; //!< Only serialized through CTransaction\n+    CScriptWitness scriptWitness; //! Only serialized through CTransaction\n \n     /* Setting nSequence to this value for every input in a transaction\n      * disables nLockTime. */\n@@ -75,7 +73,7 @@ class CTxIn\n     /* Below flags apply in the context of BIP 68*/\n     /* If this flag set, CTxIn::nSequence is NOT interpreted as a\n      * relative lock-time. */\n-    static const uint32_t SEQUENCE_LOCKTIME_DISABLE_FLAG = (1U << 31);\n+    static const uint32_t SEQUENCE_LOCKTIME_DISABLE_FLAG = (1 << 31);\n \n     /* If CTxIn::nSequence encodes a relative lock-time and this flag\n      * is set, the relative lock-time has units of 512 seconds,"
      },
      {
        "sha": "b4fc9def1fd96f69430013f91c15721dd0855fe1",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -5,8 +5,8 @@\n \n #include <protocol.h>\n \n-#include <util/system.h>\n-#include <util/strencodings.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n \n #ifndef WIN32\n # include <arpa/inet.h>"
      },
      {
        "sha": "3ec538b4f43dd35f4829e798e311ad41b1b8eec9",
        "filename": "src/qt/README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/README.md?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -64,8 +64,8 @@ Represents the view to a single wallet.\n * `callback.h`\n * `guiconstants.h`: UI colors, app name, etc\n * `guiutil.h`: several helper functions\n-* `macdockiconhandler.(h/mm)`: macOS dock icon handler\n-* `macnotificationhandler.(h/mm)`: display notifications in macOS\n+* `macdockiconhandler.(h/cpp)`\n+* `macdockiconhandler.(h/cpp)`: display notifications in macOS\n \n ## Contribute\n "
      },
      {
        "sha": "e1d9b1addf9ce7c0440931eecd06554bac684e35",
        "filename": "src/qt/addressbookpage.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/addressbookpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/addressbookpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -85,7 +85,7 @@ AddressBookPage::AddressBookPage(const PlatformStyle *platformStyle, Mode _mode,\n         case SendingTab: setWindowTitle(tr(\"Choose the address to send coins to\")); break;\n         case ReceivingTab: setWindowTitle(tr(\"Choose the address to receive coins with\")); break;\n         }\n-        connect(ui->tableView, &QTableView::doubleClicked, this, &QDialog::accept);\n+        connect(ui->tableView, SIGNAL(doubleClicked(QModelIndex)), this, SLOT(accept()));\n         ui->tableView->setEditTriggers(QAbstractItemView::NoEditTriggers);\n         ui->tableView->setFocus();\n         ui->closeButton->setText(tr(\"C&hoose\"));\n@@ -129,14 +129,14 @@ AddressBookPage::AddressBookPage(const PlatformStyle *platformStyle, Mode _mode,\n     contextMenu->addSeparator();\n \n     // Connect signals for context menu actions\n-    connect(copyAddressAction, &QAction::triggered, this, &AddressBookPage::on_copyAddress_clicked);\n-    connect(copyLabelAction, &QAction::triggered, this, &AddressBookPage::onCopyLabelAction);\n-    connect(editAction, &QAction::triggered, this, &AddressBookPage::onEditAction);\n-    connect(deleteAction, &QAction::triggered, this, &AddressBookPage::on_deleteAddress_clicked);\n+    connect(copyAddressAction, SIGNAL(triggered()), this, SLOT(on_copyAddress_clicked()));\n+    connect(copyLabelAction, SIGNAL(triggered()), this, SLOT(onCopyLabelAction()));\n+    connect(editAction, SIGNAL(triggered()), this, SLOT(onEditAction()));\n+    connect(deleteAction, SIGNAL(triggered()), this, SLOT(on_deleteAddress_clicked()));\n \n-    connect(ui->tableView, &QWidget::customContextMenuRequested, this, &AddressBookPage::contextualMenu);\n+    connect(ui->tableView, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(contextualMenu(QPoint)));\n \n-    connect(ui->closeButton, &QPushButton::clicked, this, &QDialog::accept);\n+    connect(ui->closeButton, SIGNAL(clicked()), this, SLOT(accept()));\n }\n \n AddressBookPage::~AddressBookPage()\n@@ -154,7 +154,7 @@ void AddressBookPage::setModel(AddressTableModel *_model)\n     proxyModel = new AddressBookSortFilterProxyModel(type, this);\n     proxyModel->setSourceModel(_model);\n \n-    connect(ui->searchLineEdit, &QLineEdit::textChanged, proxyModel, &QSortFilterProxyModel::setFilterWildcard);\n+    connect(ui->searchLineEdit, SIGNAL(textChanged(QString)), proxyModel, SLOT(setFilterWildcard(QString)));\n \n     ui->tableView->setModel(proxyModel);\n     ui->tableView->sortByColumn(0, Qt::AscendingOrder);\n@@ -163,11 +163,11 @@ void AddressBookPage::setModel(AddressTableModel *_model)\n     ui->tableView->horizontalHeader()->setSectionResizeMode(AddressTableModel::Label, QHeaderView::Stretch);\n     ui->tableView->horizontalHeader()->setSectionResizeMode(AddressTableModel::Address, QHeaderView::ResizeToContents);\n \n-    connect(ui->tableView->selectionModel(), &QItemSelectionModel::selectionChanged,\n-        this, &AddressBookPage::selectionChanged);\n+    connect(ui->tableView->selectionModel(), SIGNAL(selectionChanged(QItemSelection,QItemSelection)),\n+        this, SLOT(selectionChanged()));\n \n     // Select row for newly created address\n-    connect(_model, &AddressTableModel::rowsInserted, this, &AddressBookPage::selectNewAddress);\n+    connect(_model, SIGNAL(rowsInserted(QModelIndex,int,int)), this, SLOT(selectNewAddress(QModelIndex,int,int)));\n \n     selectionChanged();\n }"
      },
      {
        "sha": "380a3ddb84c3208ba9fda363300b992e82b17698",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -71,7 +71,7 @@ class AddressTablePriv\n     QList<AddressTableEntry> cachedAddressTable;\n     AddressTableModel *parent;\n \n-    explicit AddressTablePriv(AddressTableModel *_parent):\n+    AddressTablePriv(AddressTableModel *_parent):\n         parent(_parent) {}\n \n     void refreshAddressTable(interfaces::Wallet& wallet)"
      },
      {
        "sha": "812d2251e16f40a338981307d5b962689591e086",
        "filename": "src/qt/askpassphrasedialog.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/askpassphrasedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/askpassphrasedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/askpassphrasedialog.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -70,10 +70,10 @@ AskPassphraseDialog::AskPassphraseDialog(Mode _mode, QWidget *parent) :\n             break;\n     }\n     textChanged();\n-    connect(ui->toggleShowPasswordButton, &QPushButton::toggled, this, &AskPassphraseDialog::toggleShowPassword);\n-    connect(ui->passEdit1, &QLineEdit::textChanged, this, &AskPassphraseDialog::textChanged);\n-    connect(ui->passEdit2, &QLineEdit::textChanged, this, &AskPassphraseDialog::textChanged);\n-    connect(ui->passEdit3, &QLineEdit::textChanged, this, &AskPassphraseDialog::textChanged);\n+    connect(ui->toggleShowPasswordButton, SIGNAL(toggled(bool)), this, SLOT(toggleShowPassword(bool)));\n+    connect(ui->passEdit1, SIGNAL(textChanged(QString)), this, SLOT(textChanged()));\n+    connect(ui->passEdit2, SIGNAL(textChanged(QString)), this, SLOT(textChanged()));\n+    connect(ui->passEdit3, SIGNAL(textChanged(QString)), this, SLOT(textChanged()));\n }\n \n AskPassphraseDialog::~AskPassphraseDialog()\n@@ -123,15 +123,16 @@ void AskPassphraseDialog::accept()\n                 {\n                     QMessageBox::warning(this, tr(\"Wallet encrypted\"),\n                                          \"<qt>\" +\n-                                         tr(\"Your wallet is now encrypted. \"\n+                                         tr(\"%1 will close now to finish the encryption process. \"\n                                          \"Remember that encrypting your wallet cannot fully protect \"\n-                                         \"your bitcoins from being stolen by malware infecting your computer.\") +\n+                                         \"your bitcoins from being stolen by malware infecting your computer.\").arg(tr(PACKAGE_NAME)) +\n                                          \"<br><br><b>\" +\n                                          tr(\"IMPORTANT: Any previous backups you have made of your wallet file \"\n                                          \"should be replaced with the newly generated, encrypted wallet file. \"\n                                          \"For security reasons, previous backups of the unencrypted wallet file \"\n                                          \"will become useless as soon as you start using the new, encrypted wallet.\") +\n                                          \"</b></qt>\");\n+                    QApplication::quit();\n                 }\n                 else\n                 {\n@@ -152,15 +153,14 @@ void AskPassphraseDialog::accept()\n         }\n         } break;\n     case Unlock:\n-        try {\n-            if (!model->setWalletLocked(false, oldpass)) {\n-                QMessageBox::critical(this, tr(\"Wallet unlock failed\"),\n-                                      tr(\"The passphrase entered for the wallet decryption was incorrect.\"));\n-            } else {\n-                QDialog::accept(); // Success\n-            }\n-        } catch (const std::runtime_error& e) {\n-            QMessageBox::critical(this, tr(\"Wallet unlock failed\"), e.what());\n+        if(!model->setWalletLocked(false, oldpass))\n+        {\n+            QMessageBox::critical(this, tr(\"Wallet unlock failed\"),\n+                                  tr(\"The passphrase entered for the wallet decryption was incorrect.\"));\n+        }\n+        else\n+        {\n+            QDialog::accept(); // Success\n         }\n         break;\n     case Decrypt:"
      },
      {
        "sha": "97348aad2b03c7e3790d0d4394f73f1fc0545aa6",
        "filename": "src/qt/bantablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/bantablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/bantablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bantablemodel.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "patch": "@@ -10,7 +10,7 @@\n \n #include <interfaces/node.h>\n #include <sync.h>\n-#include <util/time.h>\n+#include <utiltime.h>\n \n #include <QDebug>\n #include <QList>"
      },
      {
        "sha": "edb6e9bc8173bb497bbd6b75a8f06c534fd59e49",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "6726019a3f27104bb9922757d9c43ad0f650ad62",
        "filename": "src/qt/bitcoinamountfield.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 56,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/bitcoinamountfield.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/bitcoinamountfield.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "f93579c4927fcf269de5795918673b49e2e0bb15",
        "filename": "src/qt/bitcoinamountfield.h",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/bitcoinamountfield.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/bitcoinamountfield.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.h?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "6755e9d2075664977d2dbd62d91f118e79f5dc4f",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 125,
        "deletions": 192,
        "changes": 317,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "c14265cc9c04299d5c29c8c0c2bc49c6103d3406",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 11,
        "deletions": 30,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "115b33d9ba43c9ff5c038099bf0e0bde6b55609c",
        "filename": "src/qt/bitcoinstrings.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/bitcoinstrings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/bitcoinstrings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinstrings.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "6d60cd59e3544c4096740f83cd64236142bbf716",
        "filename": "src/qt/bitcoinunits.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/bitcoinunits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/bitcoinunits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "da6b0c4c2e3c5363f120e279b7292082a25be983",
        "filename": "src/qt/callback.h",
        "status": "added",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/callback.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/callback.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/callback.h?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "7154ac14be6326c7b2e198da1756afb3c5f1a0ac",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 14,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "ed7ecbf73b3a75e74ee20c02531d86518933e49e",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "ca3598334d741bbdcbc98ccf35ba8cea5cc63c7b",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 34,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "9c3f6a46a2178f6e0cc9922174adb9ed2a08cc5b",
        "filename": "src/qt/coincontroldialog.h",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/coincontroldialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/coincontroldialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.h?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "0f58ab2c3ed3ac1386d7dbfecf72b5ec2dde631e",
        "filename": "src/qt/forms/coincontroldialog.ui",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/forms/coincontroldialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/forms/coincontroldialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/coincontroldialog.ui?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "695ed61228a4007283da4f7d3be95b21be0c02e0",
        "filename": "src/qt/forms/debugwindow.ui",
        "status": "modified",
        "additions": 18,
        "deletions": 50,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/forms/debugwindow.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/forms/debugwindow.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/debugwindow.ui?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "cdfff1823a3b56b7a6809dce1c7e3193b63a3a54",
        "filename": "src/qt/forms/overviewpage.ui",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/forms/overviewpage.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/forms/overviewpage.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/overviewpage.ui?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "a104e42a967e3feee41ee741cfcc1cf84403ecbe",
        "filename": "src/qt/forms/sendcoinsdialog.ui",
        "status": "modified",
        "additions": 43,
        "deletions": 8,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/forms/sendcoinsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/forms/sendcoinsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/sendcoinsdialog.ui?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "f0d2a2705bf4693829e1658e0dcd27390de56be0",
        "filename": "src/qt/guiconstants.h",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/guiconstants.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/guiconstants.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiconstants.h?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "5459a4bff5192e36cab0226a068ef27c88a93e50",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 56,
        "deletions": 50,
        "changes": 106,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "011827e13426f1345d5d66bba3a6af8ff13f98c0",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "2c37c353e801144358b5d7aa9985738f8f56a97b",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "c7a2422c8a6b811b33870a30699bf36ea857373d",
        "filename": "src/qt/locale/bitcoin_da.ts",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/locale/bitcoin_da.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/locale/bitcoin_da.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_da.ts?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "06c1a54d40b5efe4c3b14acf17801d905e24b7b6",
        "filename": "src/qt/locale/bitcoin_de.ts",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/locale/bitcoin_de.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/locale/bitcoin_de.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_de.ts?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "ef4ac2d4aa797de872a17cb32b0daf700e674304",
        "filename": "src/qt/locale/bitcoin_el_GR.ts",
        "status": "modified",
        "additions": 37,
        "deletions": 1,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/locale/bitcoin_el_GR.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/locale/bitcoin_el_GR.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_el_GR.ts?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "f55a7ce9c4cacdb1deb77e4de134fe845154187c",
        "filename": "src/qt/locale/bitcoin_es.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/locale/bitcoin_es.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/locale/bitcoin_es.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_es.ts?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "8df48710252abad55642e7815094f1adad61c133",
        "filename": "src/qt/locale/bitcoin_fi.ts",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/locale/bitcoin_fi.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/locale/bitcoin_fi.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_fi.ts?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "5faba54d5b797165961b9c9dc99305dfed38fac8",
        "filename": "src/qt/locale/bitcoin_fr.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/locale/bitcoin_fr.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/locale/bitcoin_fr.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_fr.ts?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "284bdb39b5772232ed0160f8dd7c60c9231a62d9",
        "filename": "src/qt/locale/bitcoin_ja.ts",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/locale/bitcoin_ja.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/locale/bitcoin_ja.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ja.ts?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "9912cc76e2e3f6c108969fcf3486dcc78a9be86c",
        "filename": "src/qt/locale/bitcoin_ko_KR.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/locale/bitcoin_ko_KR.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/locale/bitcoin_ko_KR.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ko_KR.ts?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "747a62510fd1b3a794f92b00e7cc822cb6a412db",
        "filename": "src/qt/locale/bitcoin_nl.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/locale/bitcoin_nl.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/locale/bitcoin_nl.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_nl.ts?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "a1437b8808fb16b32b539d45abd4b94bf2f3881c",
        "filename": "src/qt/locale/bitcoin_pl.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/locale/bitcoin_pl.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/locale/bitcoin_pl.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_pl.ts?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "e964838d9f814d0e20395ba5cd7913c8d1090a86",
        "filename": "src/qt/locale/bitcoin_pt_BR.ts",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/locale/bitcoin_pt_BR.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/locale/bitcoin_pt_BR.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_pt_BR.ts?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "503c15259b6be5191bf58b00bdb069a85a924c58",
        "filename": "src/qt/locale/bitcoin_ro_RO.ts",
        "status": "modified",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/locale/bitcoin_ro_RO.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/locale/bitcoin_ro_RO.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ro_RO.ts?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "6a69bfe63cf309a05a1a0b3bd85a78d9f6d64ca5",
        "filename": "src/qt/locale/bitcoin_sk.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/locale/bitcoin_sk.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/locale/bitcoin_sk.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_sk.ts?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "1865a8483432732cde85d221231fb1f5ff9862a4",
        "filename": "src/qt/locale/bitcoin_uk.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/locale/bitcoin_uk.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/locale/bitcoin_uk.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_uk.ts?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "0aa7964e396f77ece0b873bd37e67c62e8d17c8a",
        "filename": "src/qt/locale/bitcoin_zh_TW.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/locale/bitcoin_zh_TW.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/locale/bitcoin_zh_TW.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_zh_TW.ts?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "1c28593d4af1089e2716a4d6716a570e0d1551d4",
        "filename": "src/qt/macdockiconhandler.h",
        "status": "modified",
        "additions": 19,
        "deletions": 2,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/macdockiconhandler.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/macdockiconhandler.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/macdockiconhandler.h?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "b9ad191da774f238635ccde852b35fa6a8cefc57",
        "filename": "src/qt/macdockiconhandler.mm",
        "status": "modified",
        "additions": 91,
        "deletions": 9,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/macdockiconhandler.mm",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/macdockiconhandler.mm",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/macdockiconhandler.mm?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "23993adc2ebebbc736b34b75b8085e215746b8dd",
        "filename": "src/qt/macnotificationhandler.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/macnotificationhandler.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/macnotificationhandler.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/macnotificationhandler.h?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "0e04d50baa4645315c3fe02e436b2facb510289a",
        "filename": "src/qt/macnotificationhandler.mm",
        "status": "modified",
        "additions": 19,
        "deletions": 4,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/macnotificationhandler.mm",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/macnotificationhandler.mm",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/macnotificationhandler.mm?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "8c2cd840b01c8738e94a58188aff008adc3d2be3",
        "filename": "src/qt/macos_appnap.h",
        "status": "removed",
        "additions": 0,
        "deletions": 24,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/src/qt/macos_appnap.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/src/qt/macos_appnap.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/macos_appnap.h?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d"
      },
      {
        "sha": "22a88782abe39d978ee6f4207c81f5df3b54e338",
        "filename": "src/qt/macos_appnap.mm",
        "status": "removed",
        "additions": 0,
        "deletions": 71,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741b2b6f4688ee46caaa48b51c74a110320d50d/src/qt/macos_appnap.mm",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741b2b6f4688ee46caaa48b51c74a110320d50d/src/qt/macos_appnap.mm",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/macos_appnap.mm?ref=2741b2b6f4688ee46caaa48b51c74a110320d50d"
      },
      {
        "sha": "dec9d78326dbe25423f89036f387d372c8c132d0",
        "filename": "src/qt/modaloverlay.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/modaloverlay.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/modaloverlay.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/modaloverlay.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "fd3b13276cd3d8d41ded6bbd189b39f622d229d2",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 45,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "63f758c52b8d90affe6a6141feb22d125b64eae6",
        "filename": "src/qt/optionsdialog.h",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/optionsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/optionsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.h?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "d1c9339f1baf778c8ecf61768d57792f8b2455bf",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 27,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "944bcc8ad0ba12bdb15b6bb2d8aa0fe15078b661",
        "filename": "src/qt/paymentrequestplus.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/paymentrequestplus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/paymentrequestplus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "5bf2bb8a0eb208914bb14026d235c6ef61629908",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 141,
        "deletions": 169,
        "changes": 310,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "d335db9c85fad95ace3ef7e69f812de2dc2dbcd3",
        "filename": "src/qt/paymentserver.h",
        "status": "modified",
        "additions": 15,
        "deletions": 29,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/paymentserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/paymentserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.h?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "715fc8b5e0228e65eb68e6b2c58b706d1730f8b7",
        "filename": "src/qt/peertablemodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/peertablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/peertablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "de42490361696a963d7b24b83def3e373fcf32ae",
        "filename": "src/qt/qvalidatedlineedit.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/qvalidatedlineedit.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/qvalidatedlineedit.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/qvalidatedlineedit.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "c2c0e84d6565302c137e28edb336d8e9ae68d2ce",
        "filename": "src/qt/qvaluecombobox.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/qvaluecombobox.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/qvaluecombobox.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/qvaluecombobox.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "12de189229d7a19d97f8079227ac9046b9687ae5",
        "filename": "src/qt/receivecoinsdialog.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/receivecoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/receivecoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "5bc5568e9a8b42faa54c426d17d4b11750e83782",
        "filename": "src/qt/receiverequestdialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/receiverequestdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/receiverequestdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receiverequestdialog.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "f0d2aba370d305761c24af5042418452824070bb",
        "filename": "src/qt/recentrequeststablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/recentrequeststablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/recentrequeststablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.cpp?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "d102d3d2797d6175dfe96c6afc0045a2b96757c7",
        "filename": "src/qt/res/bitcoin-qt-res.rc",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/res/bitcoin-qt-res.rc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/res/bitcoin-qt-res.rc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/bitcoin-qt-res.rc?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "98afeb5a9c33715339747a59e2ff118dcb1ce723",
        "filename": "src/qt/res/icons/bitcoin.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/res/icons/bitcoin.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/res/icons/bitcoin.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/bitcoin.png?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "76e36e4f3140e4eade09e31c0eaae98353fe43ec",
        "filename": "src/qt/res/movies/makespinner.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/res/movies/makespinner.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eafe31bea7c2a071a0859aa3ded90379c21ee25/src/qt/res/movies/makespinner.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/movies/makespinner.sh?ref=6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      }
    ]
  },
  {
    "sha": "d498293a82c6b5d8c8d35540324f8a7e76acc6b2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNDk4MjkzYTgyYzZiNWQ4YzhkMzU1NDAzMjRmOGE3ZTc2YWNjNmIy",
    "commit": {
      "author": {
        "name": "BitcoinV",
        "email": "45887994+bitcoinVBR@users.noreply.github.com",
        "date": "2018-12-30T17:00:21Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2018-12-30T17:00:21Z"
      },
      "message": "Merge branch 'master' into feature_VBR",
      "tree": {
        "sha": "97e35ea101aa0fe48383e558ab78d83d7f9c8f33",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/97e35ea101aa0fe48383e558ab78d83d7f9c8f33"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d498293a82c6b5d8c8d35540324f8a7e76acc6b2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcKPmlCRBK7hj4Ov3rIwAAdHIIAFpnhPKGKRKs+PCqUNGf8R9N\nHoVMnzfHBWqrbUJ8jc5dwJyCsDHBROp0KIYfO2PTshdvAioqyM0OdQv72uRm2KyL\nlq3CIeCvQBwPhD4vq/b8NrkbZpaCrIlfZS0gG2kxcVBsxQWwRN3y22xYIp9AJk2q\nL27LQsqewhVyJsYM3KZpuuppoUugeSPMfcjr2D2wJRDaGl98IOCud/kuiyfer22f\nQVSzH02tTq7WrsHEesyOvGatiRF5OChsSWFCBbVNNho+T9rmuExGtKhP4FKbv1iK\npEm+CfN40FPcuRJml8UqSuYkpdP1/7/wmMvGyAAZCpe55bcysE0VjdInL30i+uQ=\n=2A7D\n-----END PGP SIGNATURE-----\n",
        "payload": "tree 97e35ea101aa0fe48383e558ab78d83d7f9c8f33\nparent 23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4\nparent 6eafe31bea7c2a071a0859aa3ded90379c21ee25\nauthor BitcoinV <45887994+bitcoinVBR@users.noreply.github.com> 1546189221 -0600\ncommitter GitHub <noreply@github.com> 1546189221 -0600\n\nMerge branch 'master' into feature_VBR"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d498293a82c6b5d8c8d35540324f8a7e76acc6b2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d498293a82c6b5d8c8d35540324f8a7e76acc6b2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d498293a82c6b5d8c8d35540324f8a7e76acc6b2/comments",
    "author": null,
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/23330f6e406bc9afd1fa560e1e8bcdbbab23a4a4"
      },
      {
        "sha": "6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      }
    ],
    "stats": {
      "total": 292,
      "additions": 292,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2aebf1cd5425d992920379594c60ca04bb4ae3ba",
        "filename": ".appveyor.yml",
        "status": "added",
        "additions": 58,
        "deletions": 0,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d498293a82c6b5d8c8d35540324f8a7e76acc6b2/.appveyor.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d498293a82c6b5d8c8d35540324f8a7e76acc6b2/.appveyor.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.appveyor.yml?ref=d498293a82c6b5d8c8d35540324f8a7e76acc6b2",
        "patch": "@@ -0,0 +1,58 @@\n+version: '{branch}.{build}'\n+skip_tags: true\n+image: Visual Studio 2017\n+configuration: Release\n+platform: x64\n+clone_depth: 5\n+environment:\n+  APPVEYOR_SAVE_CACHE_ON_ERROR: true\n+  CLCACHE_SERVER: 1\n+  PACKAGES: boost-filesystem boost-signals2 boost-test libevent openssl zeromq berkeleydb secp256k1 leveldb\n+  PATH: 'C:\\Python37-x64;C:\\Python37-x64\\Scripts;%PATH%'\n+  PYTHONUTF8: 1\n+cache:\n+- C:\\tools\\vcpkg\\installed\n+- C:\\Users\\appveyor\\clcache\n+install:\n+- cmd: pip install --quiet git+https://github.com/frerich/clcache.git@v4.2.0\n+# Disable zmq test for now since python zmq library on Windows would cause Access violation sometimes.\n+# - cmd: pip install zmq\n+- cmd: vcpkg install --triplet %PLATFORM%-windows-static %PACKAGES% > NUL\n+- cmd: del /s /q C:\\Tools\\vcpkg\\installed\\%PLATFORM%-windows-static\\debug # Remove unused debug library\n+before_build:\n+- ps:  clcache -M 536870912\n+- cmd: python build_msvc\\msvc-autogen.py\n+- ps:  $files = (Get-ChildItem -Recurse | where {$_.extension -eq \".vcxproj\"}).FullName\n+- ps:  for (${i} = 0; ${i} -lt ${files}.length; ${i}++) {\n+           ${content} = (Get-Content ${files}[${i}]);\n+           ${content} = ${content}.Replace(\"</RuntimeLibrary>\", \"</RuntimeLibrary><DebugInformationFormat>None</DebugInformationFormat>\");\n+           ${content} = ${content}.Replace(\"<WholeProgramOptimization>true\", \"<WholeProgramOptimization>false\");\n+           ${content} = ${content}.Replace(\"NDEBUG;\", \"\");\n+           Set-Content ${files}[${i}] ${content};\n+       }\n+- ps:  Start-Process clcache-server\n+- ps:  fsutil behavior set disablelastaccess 0 # Enable Access time feature on Windows (for clcache)\n+build_script:\n+- cmd: msbuild /p:TrackFileAccess=false /p:CLToolExe=clcache.exe build_msvc\\bitcoin.sln /m /v:q /nowarn:C4244;C4267;C4715 /nologo\n+after_build:\n+- ps:  fsutil behavior set disablelastaccess 1 # Disable Access time feature on Windows (better performance)\n+- ps:  clcache -z\n+before_test:\n+- ps:  ${conf_ini} = (Get-Content([IO.Path]::Combine(${env:APPVEYOR_BUILD_FOLDER}, \"test\", \"config.ini.in\")))\n+- ps:  ${conf_ini} = ${conf_ini}.Replace(\"@abs_top_srcdir@\", ${env:APPVEYOR_BUILD_FOLDER})\n+- ps:  ${conf_ini} = ${conf_ini}.Replace(\"@abs_top_builddir@\", ${env:APPVEYOR_BUILD_FOLDER})\n+- ps:  ${conf_ini} = ${conf_ini}.Replace(\"@EXEEXT@\", \".exe\")\n+- ps:  ${conf_ini} = ${conf_ini}.Replace(\"@ENABLE_WALLET_TRUE@\", \"\")\n+- ps:  ${conf_ini} = ${conf_ini}.Replace(\"@BUILD_BITCOIN_CLI_TRUE@\", \"\")\n+- ps:  ${conf_ini} = ${conf_ini}.Replace(\"@BUILD_BITCOIND_TRUE@\", \"\")\n+- ps:  ${conf_ini} = ${conf_ini}.Replace(\"@ENABLE_ZMQ_TRUE@\", \"\")\n+- ps:  ${utf8} = New-Object System.Text.UTF8Encoding ${false}\n+- ps:  '[IO.File]::WriteAllLines([IO.Path]::Combine(${env:APPVEYOR_BUILD_FOLDER}, \"test\", \"config.ini\"), ${conf_ini}, ${utf8})'\n+- ps:  move \"build_msvc\\${env:PLATFORM}\\${env:CONFIGURATION}\\*.exe\" src\n+test_script:\n+- cmd: src\\test_bitcoin.exe -k stdout -e stdout 2> NUL\n+- cmd: src\\bench_bitcoin.exe -evals=1 -scaling=0 > NUL\n+- ps:  python test\\util\\bitcoin-util-test.py\n+- cmd: python test\\util\\rpcauth-test.py\n+- cmd: python test\\functional\\test_runner.py --ci --force --quiet --combinedlogslen=4000 --failfast\n+deploy: off"
      },
      {
        "sha": "00d5478c4e6501dc6acae6d31a70ef05d2e11d0e",
        "filename": ".github/PULL_REQUEST_TEMPLATE.md",
        "status": "added",
        "additions": 31,
        "deletions": 0,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d498293a82c6b5d8c8d35540324f8a7e76acc6b2/.github/PULL_REQUEST_TEMPLATE.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d498293a82c6b5d8c8d35540324f8a7e76acc6b2/.github/PULL_REQUEST_TEMPLATE.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.github/PULL_REQUEST_TEMPLATE.md?ref=d498293a82c6b5d8c8d35540324f8a7e76acc6b2",
        "patch": "@@ -0,0 +1,31 @@\n+Pull requests without a rationale and clear improvement may be closed\n+immediately.\n+\n+Please provide clear motivation for your patch and explain how it improves\n+Bitcoin Core user experience or Bitcoin Core developer experience\n+significantly.\n+\n+* Any test improvements or new tests that improve coverage are always welcome.\n+* All other changes should have accompanying unit tests (see `src/test/`) or\n+  functional tests (see `test/`). Contributors should note which tests cover\n+  modified code. If no tests exist for a region of modified code, new tests\n+  should accompany the change.\n+* Bug fixes are most welcome when they come with steps to reproduce or an\n+  explanation of the potential issue as well as reasoning for the way the bug\n+  was fixed.\n+* Features are welcome, but might be rejected due to design or scope issues.\n+  If a feature is based on a lot of dependencies, contributors should first\n+  consider building the system outside of Bitcoin Core, if possible.\n+* Refactoring changes are only accepted if they are required for a feature or\n+  bug fix or otherwise improve developer experience significantly. For example,\n+  most \"code style\" refactoring changes require a thorough explanation why they\n+  are useful, what downsides they have and why they *significantly* improve\n+  developer experience or avoid serious programming bugs. Note that code style\n+  is often a subjective matter. Unless they are explicitly mentioned to be\n+  preferred in the [developer notes](/doc/developer-notes.md), stylistic code\n+  changes are usually rejected.\n+\n+Bitcoin Core has a thorough review process and even the most trivial change\n+needs to pass a lot of eyes and requires non-zero or even substantial time\n+effort to review. There is a huge lack of active reviewers on the project, so\n+patches often sit for a long time."
      },
      {
        "sha": "7bcbb3808b5089efd99f8473833c9576236b8357",
        "filename": ".python-version",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d498293a82c6b5d8c8d35540324f8a7e76acc6b2/.python-version",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d498293a82c6b5d8c8d35540324f8a7e76acc6b2/.python-version",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.python-version?ref=d498293a82c6b5d8c8d35540324f8a7e76acc6b2",
        "patch": "@@ -0,0 +1 @@\n+3.4.9"
      },
      {
        "sha": "21d1b9cc03aea1599db7dd258c945f5bce240067",
        "filename": ".travis/README.md",
        "status": "added",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d498293a82c6b5d8c8d35540324f8a7e76acc6b2/.travis/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d498293a82c6b5d8c8d35540324f8a7e76acc6b2/.travis/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis/README.md?ref=d498293a82c6b5d8c8d35540324f8a7e76acc6b2",
        "patch": "@@ -0,0 +1,8 @@\n+## travis build scripts\n+\n+The `.travis` directory contains scripts for each build step in each build stage.\n+Currently the travis build defines two stages `lint` and `test`. Each stage has\n+it's own [lifecycle](https://docs.travis-ci.com/user/customizing-the-build/#the-build-lifecycle).\n+Every script in here is named and numbered according to which stage and lifecycle\n+step it belongs to.\n+"
      },
      {
        "sha": "723e7c56f1d9e7817b0913219c9747c6f02a6b8c",
        "filename": ".travis/lint_04_install.sh",
        "status": "added",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d498293a82c6b5d8c8d35540324f8a7e76acc6b2/.travis/lint_04_install.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d498293a82c6b5d8c8d35540324f8a7e76acc6b2/.travis/lint_04_install.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis/lint_04_install.sh?ref=d498293a82c6b5d8c8d35540324f8a7e76acc6b2",
        "patch": "@@ -0,0 +1,11 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+export LC_ALL=C\n+\n+travis_retry pip install codespell==1.13.0\n+travis_retry pip install flake8==3.5.0\n+travis_retry pip install vulture==0.29"
      },
      {
        "sha": "28bcbb47f748986c8e95bb87abd5a45faef75e1b",
        "filename": ".travis/lint_05_before_script.sh",
        "status": "added",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d498293a82c6b5d8c8d35540324f8a7e76acc6b2/.travis/lint_05_before_script.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d498293a82c6b5d8c8d35540324f8a7e76acc6b2/.travis/lint_05_before_script.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis/lint_05_before_script.sh?ref=d498293a82c6b5d8c8d35540324f8a7e76acc6b2",
        "patch": "@@ -0,0 +1,9 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+export LC_ALL=C\n+\n+git fetch --unshallow"
      },
      {
        "sha": "701e6d8005c8f9a1b27bce308b0aad65e2b46d99",
        "filename": ".travis/lint_06_script.sh",
        "status": "added",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d498293a82c6b5d8c8d35540324f8a7e76acc6b2/.travis/lint_06_script.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d498293a82c6b5d8c8d35540324f8a7e76acc6b2/.travis/lint_06_script.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis/lint_06_script.sh?ref=d498293a82c6b5d8c8d35540324f8a7e76acc6b2",
        "patch": "@@ -0,0 +1,25 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+export LC_ALL=C\n+\n+if [ \"$TRAVIS_EVENT_TYPE\" = \"pull_request\" ]; then\n+  test/lint/commit-script-check.sh $TRAVIS_COMMIT_RANGE\n+fi\n+\n+test/lint/git-subtree-check.sh src/crypto/ctaes\n+test/lint/git-subtree-check.sh src/secp256k1\n+test/lint/git-subtree-check.sh src/univalue\n+test/lint/git-subtree-check.sh src/leveldb\n+test/lint/check-doc.py\n+test/lint/check-rpc-mappings.py .\n+test/lint/lint-all.sh\n+\n+if [ \"$TRAVIS_REPO_SLUG\" = \"bitcoin/bitcoin\" -a \"$TRAVIS_EVENT_TYPE\" = \"cron\" ]; then\n+    git log --merges --before=\"2 days ago\" -1 --format='%H' > ./contrib/verify-commits/trusted-sha512-root-commit\n+    while read -r LINE; do travis_retry gpg --keyserver hkp://subset.pool.sks-keyservers.net --recv-keys $LINE; done < contrib/verify-commits/trusted-keys &&\n+    travis_wait 50 contrib/verify-commits/verify-commits.py --clean-merge=2;\n+fi"
      },
      {
        "sha": "3c9fcf3f983ae0cd200bc86a9b10b603ee3e6a4f",
        "filename": ".travis/test_03_before_install.sh",
        "status": "added",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d498293a82c6b5d8c8d35540324f8a7e76acc6b2/.travis/test_03_before_install.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d498293a82c6b5d8c8d35540324f8a7e76acc6b2/.travis/test_03_before_install.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis/test_03_before_install.sh?ref=d498293a82c6b5d8c8d35540324f8a7e76acc6b2",
        "patch": "@@ -0,0 +1,27 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+export LC_ALL=C.UTF-8\n+\n+PATH=$(echo $PATH | tr ':' \"\\n\" | sed '/\\/opt\\/python/d' | tr \"\\n\" \":\" | sed \"s|::|:|g\")\n+# Add llvm-symbolizer directory to PATH. Needed to get symbolized stack traces from the sanitizers.\n+PATH=$PATH:/usr/lib/llvm-6.0/bin/\n+export PATH\n+\n+BEGIN_FOLD () {\n+  echo \"\"\n+  CURRENT_FOLD_NAME=$1\n+  echo \"travis_fold:start:${CURRENT_FOLD_NAME}\"\n+}\n+\n+END_FOLD () {\n+  RET=$?\n+  echo \"travis_fold:end:${CURRENT_FOLD_NAME}\"\n+  if [ $RET != 0 ]; then\n+    echo \"${CURRENT_FOLD_NAME} failed with status code ${RET}\"\n+  fi\n+}\n+"
      },
      {
        "sha": "a111387f10712b4d741c4524964614a26edb45ad",
        "filename": ".travis/test_04_install.sh",
        "status": "added",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d498293a82c6b5d8c8d35540324f8a7e76acc6b2/.travis/test_04_install.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d498293a82c6b5d8c8d35540324f8a7e76acc6b2/.travis/test_04_install.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis/test_04_install.sh?ref=d498293a82c6b5d8c8d35540324f8a7e76acc6b2",
        "patch": "@@ -0,0 +1,33 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+export LC_ALL=C.UTF-8\n+\n+travis_retry docker pull \"$DOCKER_NAME_TAG\"\n+mkdir -p \"${TRAVIS_BUILD_DIR}/sanitizer-output/\"\n+export ASAN_OPTIONS=\"\"\n+export LSAN_OPTIONS=\"suppressions=${TRAVIS_BUILD_DIR}/test/sanitizer_suppressions/lsan\"\n+export TSAN_OPTIONS=\"suppressions=${TRAVIS_BUILD_DIR}/test/sanitizer_suppressions/tsan:log_path=${TRAVIS_BUILD_DIR}/sanitizer-output/tsan\"\n+export UBSAN_OPTIONS=\"suppressions=${TRAVIS_BUILD_DIR}/test/sanitizer_suppressions/ubsan:print_stacktrace=1:halt_on_error=1\"\n+env | grep -E '^(BITCOIN_CONFIG|CCACHE_|WINEDEBUG|LC_ALL|BOOST_TEST_RANDOM|CONFIG_SHELL|(ASAN|LSAN|TSAN|UBSAN)_OPTIONS)' | tee /tmp/env\n+if [[ $HOST = *-mingw32 ]]; then\n+  DOCKER_ADMIN=\"--cap-add SYS_ADMIN\"\n+elif [[ $BITCOIN_CONFIG = *--with-sanitizers=*address* ]]; then # If ran with (ASan + LSan), Docker needs access to ptrace (https://github.com/google/sanitizers/issues/764)\n+  DOCKER_ADMIN=\"--cap-add SYS_PTRACE\"\n+fi\n+DOCKER_ID=$(docker run $DOCKER_ADMIN -idt --mount type=bind,src=$TRAVIS_BUILD_DIR,dst=$TRAVIS_BUILD_DIR --mount type=bind,src=$CCACHE_DIR,dst=$CCACHE_DIR -w $TRAVIS_BUILD_DIR --env-file /tmp/env $DOCKER_NAME_TAG)\n+\n+DOCKER_EXEC () {\n+  docker exec $DOCKER_ID bash -c \"cd $PWD && $*\"\n+}\n+\n+if [ -n \"$DPKG_ADD_ARCH\" ]; then\n+  DOCKER_EXEC dpkg --add-architecture \"$DPKG_ADD_ARCH\"\n+fi\n+\n+travis_retry DOCKER_EXEC apt-get update\n+travis_retry DOCKER_EXEC apt-get install --no-install-recommends --no-upgrade -qq $PACKAGES $DOCKER_PACKAGES\n+"
      },
      {
        "sha": "70caee979c14002d1b58de9814b69289cff6c007",
        "filename": ".travis/test_05_before_script.sh",
        "status": "added",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d498293a82c6b5d8c8d35540324f8a7e76acc6b2/.travis/test_05_before_script.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d498293a82c6b5d8c8d35540324f8a7e76acc6b2/.travis/test_05_before_script.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis/test_05_before_script.sh?ref=d498293a82c6b5d8c8d35540324f8a7e76acc6b2",
        "patch": "@@ -0,0 +1,25 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+export LC_ALL=C.UTF-8\n+\n+DOCKER_EXEC echo \\> \\$HOME/.bitcoin  # Make sure default datadir does not exist and is never read by creating a dummy file\n+\n+mkdir -p depends/SDKs depends/sdk-sources\n+\n+if [ -n \"$OSX_SDK\" -a ! -f depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz ]; then\n+  curl --location --fail $SDK_URL/MacOSX${OSX_SDK}.sdk.tar.gz -o depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz\n+fi\n+if [ -n \"$OSX_SDK\" -a -f depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz ]; then\n+  tar -C depends/SDKs -xf depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz\n+fi\n+if [[ $HOST = *-mingw32 ]]; then\n+  DOCKER_EXEC update-alternatives --set $HOST-g++ \\$\\(which $HOST-g++-posix\\)\n+fi\n+if [ -z \"$NO_DEPENDS\" ]; then\n+  DOCKER_EXEC CONFIG_SHELL= make $MAKEJOBS -C depends HOST=$HOST $DEP_OPTS\n+fi\n+"
      },
      {
        "sha": "618aa2c3b6ee88705868df5231b3890e8fd2bb5e",
        "filename": ".travis/test_06_script.sh",
        "status": "added",
        "additions": 64,
        "deletions": 0,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d498293a82c6b5d8c8d35540324f8a7e76acc6b2/.travis/test_06_script.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d498293a82c6b5d8c8d35540324f8a7e76acc6b2/.travis/test_06_script.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis/test_06_script.sh?ref=d498293a82c6b5d8c8d35540324f8a7e76acc6b2",
        "patch": "@@ -0,0 +1,64 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+export LC_ALL=C.UTF-8\n+\n+TRAVIS_COMMIT_LOG=$(git log --format=fuller -1)\n+export TRAVIS_COMMIT_LOG\n+\n+OUTDIR=$BASE_OUTDIR/$TRAVIS_PULL_REQUEST/$TRAVIS_JOB_NUMBER-$HOST\n+BITCOIN_CONFIG_ALL=\"--disable-dependency-tracking --prefix=$TRAVIS_BUILD_DIR/depends/$HOST --bindir=$OUTDIR/bin --libdir=$OUTDIR/lib\"\n+if [ -z \"$NO_DEPENDS\" ]; then\n+  DOCKER_EXEC ccache --max-size=$CCACHE_SIZE\n+fi\n+\n+BEGIN_FOLD autogen\n+if [ -n \"$CONFIG_SHELL\" ]; then\n+  DOCKER_EXEC \"$CONFIG_SHELL\" -c \"./autogen.sh\"\n+else\n+  DOCKER_EXEC ./autogen.sh\n+fi\n+END_FOLD\n+\n+mkdir build\n+cd build || (echo \"could not enter build directory\"; exit 1)\n+\n+BEGIN_FOLD configure\n+DOCKER_EXEC ../configure --cache-file=config.cache $BITCOIN_CONFIG_ALL $BITCOIN_CONFIG || ( cat config.log && false)\n+END_FOLD\n+\n+BEGIN_FOLD distdir\n+DOCKER_EXEC make distdir VERSION=$HOST\n+END_FOLD\n+\n+cd \"bitcoin-$HOST\" || (echo \"could not enter distdir bitcoin-$HOST\"; exit 1)\n+\n+BEGIN_FOLD configure\n+DOCKER_EXEC ./configure --cache-file=../config.cache $BITCOIN_CONFIG_ALL $BITCOIN_CONFIG || ( cat config.log && false)\n+END_FOLD\n+\n+set -o errtrace\n+trap 'DOCKER_EXEC \"cat ${TRAVIS_BUILD_DIR}/sanitizer-output/* 2> /dev/null\"' ERR\n+\n+BEGIN_FOLD build\n+DOCKER_EXEC make $MAKEJOBS $GOAL || ( echo \"Build failure. Verbose build follows.\" && DOCKER_EXEC make $GOAL V=1 ; false )\n+END_FOLD\n+\n+if [ \"$RUN_UNIT_TESTS\" = \"true\" ]; then\n+  BEGIN_FOLD unit-tests\n+  DOCKER_EXEC LD_LIBRARY_PATH=$TRAVIS_BUILD_DIR/depends/$HOST/lib make $MAKEJOBS check VERBOSE=1\n+  END_FOLD\n+fi\n+\n+if [ \"$TRAVIS_EVENT_TYPE\" = \"cron\" ]; then\n+  extended=\"--extended --exclude feature_pruning\"\n+fi\n+\n+if [ \"$RUN_FUNCTIONAL_TESTS\" = \"true\" ]; then\n+  BEGIN_FOLD functional-tests\n+  DOCKER_EXEC test/functional/test_runner.py --ci --combinedlogslen=4000 --coverage --quiet --failfast ${extended} ${FUNCTIONAL_TESTS_CONFIG}\n+  END_FOLD\n+fi"
      }
    ]
  },
  {
    "sha": "e191af6504d04640fb0fa1983fa6d121d2f486ae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMTkxYWY2NTA0ZDA0NjQwZmIwZmExOTgzZmE2ZDEyMWQyZjQ4NmFl",
    "commit": {
      "author": {
        "name": "BitcoinV",
        "email": "45887994+bitcoinVBR@users.noreply.github.com",
        "date": "2018-12-30T17:02:00Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2018-12-30T17:02:00Z"
      },
      "message": "Merge pull request #1 from bitcoinVBR/feature_VBR\n\nFeature vbr",
      "tree": {
        "sha": "97e35ea101aa0fe48383e558ab78d83d7f9c8f33",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/97e35ea101aa0fe48383e558ab78d83d7f9c8f33"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e191af6504d04640fb0fa1983fa6d121d2f486ae",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcKPoICRBK7hj4Ov3rIwAAdHIIACFDpyELAPFnY61mhTnEp1dX\nLyFNVPNOqc4BEu6LhMBXjtKjSs2wClsmYIaj1W7YkxQ7OpOeXtsQmIIEWhOWggj8\nhp38gB5w+4VrlQ05uHd3UJDVKsObFyhdo7aNDywJLKA3eE8EBoRHAm30rFTyoJlf\njFyR8Zx7BgHyzGqx9KVHDPL8GJlwjtRqwtG2N6oxW/2cf+AhOPMTzmY1POSCXp76\nhX5DAnQXOQiHs3COQ734brd3Xrx2q9UQIqUQlIsVvpHr5xCbjicf4RGAmmTNj3XZ\nOC9z0vDkAtgUOkxu9T+pHgCNQ3aAjWtJzBrrUzYR2X5sIFdUvATv51R57COigj0=\n=JtpI\n-----END PGP SIGNATURE-----\n",
        "payload": "tree 97e35ea101aa0fe48383e558ab78d83d7f9c8f33\nparent 6eafe31bea7c2a071a0859aa3ded90379c21ee25\nparent d498293a82c6b5d8c8d35540324f8a7e76acc6b2\nauthor BitcoinV <45887994+bitcoinVBR@users.noreply.github.com> 1546189320 -0600\ncommitter GitHub <noreply@github.com> 1546189320 -0600\n\nMerge pull request #1 from bitcoinVBR/feature_VBR\n\nFeature vbr"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e191af6504d04640fb0fa1983fa6d121d2f486ae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e191af6504d04640fb0fa1983fa6d121d2f486ae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e191af6504d04640fb0fa1983fa6d121d2f486ae/comments",
    "author": null,
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6eafe31bea7c2a071a0859aa3ded90379c21ee25",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6eafe31bea7c2a071a0859aa3ded90379c21ee25"
      },
      {
        "sha": "d498293a82c6b5d8c8d35540324f8a7e76acc6b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d498293a82c6b5d8c8d35540324f8a7e76acc6b2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d498293a82c6b5d8c8d35540324f8a7e76acc6b2"
      }
    ],
    "stats": {
      "total": 136,
      "additions": 85,
      "deletions": 51
    },
    "files": [
      {
        "sha": "91b5af0f31624c8ce2a505d807251ec4d1d9f272",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 85,
        "deletions": 51,
        "changes": 136,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e191af6504d04640fb0fa1983fa6d121d2f486ae/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e191af6504d04640fb0fa1983fa6d121d2f486ae/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=e191af6504d04640fb0fa1983fa6d121d2f486ae",
        "patch": "@@ -1,21 +1,22 @@\n-dist: xenial\n+dist: trusty\n os: linux\n language: minimal\n cache:\n   ccache: true\n   directories:\n-    - depends/built\n-    - depends/sdk-sources\n-    - $HOME/.ccache\n+  - depends/built\n+  - depends/sdk-sources\n+  - $HOME/.ccache\n stages:\n   - lint\n   - test\n env:\n   global:\n     - MAKEJOBS=-j3\n-    - RUN_UNIT_TESTS=true\n-    - RUN_FUNCTIONAL_TESTS=true\n+    - RUN_TESTS=false\n+    - RUN_BENCH=false  # Set to true for any one job that has debug enabled, to quickly check bench is not crashing or hitting assertions\n     - DOCKER_NAME_TAG=ubuntu:18.04\n+    - LC_ALL=C.UTF-8\n     - BOOST_TEST_RANDOM=1$TRAVIS_BUILD_ID\n     - CCACHE_SIZE=100M\n     - CCACHE_TEMPDIR=/tmp/.ccache-temp\n@@ -26,61 +27,80 @@ env:\n     - WINEDEBUG=fixme-all\n     - DOCKER_PACKAGES=\"build-essential libtool autotools-dev automake pkg-config bsdmainutils curl git ca-certificates ccache\"\n before_install:\n-  - set -o errexit; source .travis/test_03_before_install.sh\n+    - export PATH=$(echo $PATH | tr ':' \"\\n\" | sed '/\\/opt\\/python/d' | tr \"\\n\" \":\" | sed \"s|::|:|g\")\n+    - BEGIN_FOLD () { echo \"\"; CURRENT_FOLD_NAME=$1; echo \"travis_fold:start:${CURRENT_FOLD_NAME}\"; }\n+    - END_FOLD () { RET=$?; echo \"travis_fold:end:${CURRENT_FOLD_NAME}\"; return $RET; }\n install:\n-  - set -o errexit; source .travis/test_04_install.sh\n+    - travis_retry docker pull $DOCKER_NAME_TAG\n+    - env | grep -E '^(CCACHE_|WINEDEBUG|LC_ALL|BOOST_TEST_RANDOM|CONFIG_SHELL)' | tee /tmp/env\n+    - if [[ $HOST = *-mingw32 ]]; then DOCKER_ADMIN=\"--cap-add SYS_ADMIN\"; fi\n+    - DOCKER_ID=$(docker run $DOCKER_ADMIN -idt --mount type=bind,src=$TRAVIS_BUILD_DIR,dst=$TRAVIS_BUILD_DIR --mount type=bind,src=$CCACHE_DIR,dst=$CCACHE_DIR -w $TRAVIS_BUILD_DIR --env-file /tmp/env $DOCKER_NAME_TAG)\n+    - DOCKER_EXEC () { docker exec $DOCKER_ID bash -c \"cd $PWD && $*\"; }\n+    - if [ -n \"$DPKG_ADD_ARCH\" ]; then DOCKER_EXEC dpkg --add-architecture \"$DPKG_ADD_ARCH\" ; fi\n+    - travis_retry DOCKER_EXEC apt-get update\n+    - travis_retry DOCKER_EXEC apt-get install --no-install-recommends --no-upgrade -qq $PACKAGES $DOCKER_PACKAGES\n before_script:\n-  - set -o errexit; source .travis/test_05_before_script.sh\n+    - DOCKER_EXEC echo \\> \\$HOME/.bitcoin  # Make sure default datadir does not exist and is never read by creating a dummy file\n+    - mkdir -p depends/SDKs depends/sdk-sources\n+    - if [ -n \"$OSX_SDK\" -a ! -f depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz ]; then curl --location --fail $SDK_URL/MacOSX${OSX_SDK}.sdk.tar.gz -o depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz; fi\n+    - if [ -n \"$OSX_SDK\" -a -f depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz ]; then tar -C depends/SDKs -xf depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz; fi\n+    - if [[ $HOST = *-mingw32 ]]; then DOCKER_EXEC update-alternatives --set $HOST-g++ \\$\\(which $HOST-g++-posix\\); fi\n+    - if [ -z \"$NO_DEPENDS\" ]; then DOCKER_EXEC CONFIG_SHELL= make $MAKEJOBS -C depends HOST=$HOST $DEP_OPTS; fi\n script:\n-  - if [ $SECONDS -gt 1200 ]; then set +o errexit; echo \"Travis early exit to cache current state\"; false; else set -o errexit; source .travis/test_06_script.sh; fi\n+    - export TRAVIS_COMMIT_LOG=`git log --format=fuller -1`\n+    - OUTDIR=$BASE_OUTDIR/$TRAVIS_PULL_REQUEST/$TRAVIS_JOB_NUMBER-$HOST\n+    - BITCOIN_CONFIG_ALL=\"--disable-dependency-tracking --prefix=$TRAVIS_BUILD_DIR/depends/$HOST --bindir=$OUTDIR/bin --libdir=$OUTDIR/lib\"\n+    - if [ -z \"$NO_DEPENDS\" ]; then DOCKER_EXEC ccache --max-size=$CCACHE_SIZE; fi\n+    - BEGIN_FOLD autogen; test -n \"$CONFIG_SHELL\" && DOCKER_EXEC \"$CONFIG_SHELL\" -c \"./autogen.sh\" || DOCKER_EXEC ./autogen.sh; END_FOLD\n+    - mkdir build && cd build\n+    - BEGIN_FOLD configure; DOCKER_EXEC ../configure --cache-file=config.cache $BITCOIN_CONFIG_ALL $BITCOIN_CONFIG || ( cat config.log && false); END_FOLD\n+    - BEGIN_FOLD distdir; DOCKER_EXEC make distdir VERSION=$HOST; END_FOLD\n+    - cd bitcoin-$HOST\n+    - BEGIN_FOLD configure; DOCKER_EXEC ./configure --cache-file=../config.cache $BITCOIN_CONFIG_ALL $BITCOIN_CONFIG || ( cat config.log && false); END_FOLD\n+    - BEGIN_FOLD build; DOCKER_EXEC make $MAKEJOBS $GOAL || ( echo \"Build failure. Verbose build follows.\" && DOCKER_EXEC make $GOAL V=1 ; false ); END_FOLD\n+    - if [ \"$RUN_TESTS\" = \"true\" ]; then BEGIN_FOLD unit-tests; DOCKER_EXEC LD_LIBRARY_PATH=$TRAVIS_BUILD_DIR/depends/$HOST/lib make $MAKEJOBS check VERBOSE=1; END_FOLD; fi\n+    - if [ \"$RUN_BENCH\" = \"true\" ]; then BEGIN_FOLD bench; DOCKER_EXEC LD_LIBRARY_PATH=$TRAVIS_BUILD_DIR/depends/$HOST/lib $OUTDIR/bin/bench_bitcoin -scaling=0.001 ; END_FOLD; fi\n+    - if [ \"$TRAVIS_EVENT_TYPE\" = \"cron\" ]; then extended=\"--extended --exclude feature_pruning,feature_dbcrash\"; fi\n+    - if [ \"$RUN_TESTS\" = \"true\" ]; then BEGIN_FOLD functional-tests; DOCKER_EXEC test/functional/test_runner.py --combinedlogslen=4000 --coverage --quiet --failfast ${extended}; END_FOLD; fi\n after_script:\n-  - echo $TRAVIS_COMMIT_RANGE\n-  - echo $TRAVIS_COMMIT_LOG\n+    - echo $TRAVIS_COMMIT_RANGE\n+    - echo $TRAVIS_COMMIT_LOG\n jobs:\n   include:\n-# lint stage\n-    - stage: lint\n-      env:\n-      cache: false\n-      language: python\n-      python: '3.4' # Oldest supported version according to doc/dependencies.md\n-      install:\n-        - set -o errexit; source .travis/lint_04_install.sh\n-      before_script:\n-        - set -o errexit; source .travis/lint_05_before_script.sh\n-      script:\n-        - set -o errexit; source .travis/lint_06_script.sh\n # ARM\n     - stage: test\n       env: >-\n         HOST=arm-linux-gnueabihf\n-        PACKAGES=\"python3 g++-arm-linux-gnueabihf\"\n-        RUN_UNIT_TESTS=false\n-        RUN_FUNCTIONAL_TESTS=false\n+        PACKAGES=\"g++-arm-linux-gnueabihf\"\n+        DEP_OPTS=\"NO_QT=1\"\n         GOAL=\"install\"\n-        # -Wno-psabi is to disable ABI warnings: \"note: parameter passing for argument of type ... changed in GCC 7.1\"\n-        # This could be removed once the ABI change warning does not show up by default\n-        BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports CXXFLAGS=-Wno-psabi\"\n+        BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n # Win32\n     - stage: test\n       env: >-\n         HOST=i686-w64-mingw32\n         DPKG_ADD_ARCH=\"i386\"\n+        DEP_OPTS=\"NO_QT=1\"\n         PACKAGES=\"python3 nsis g++-mingw-w64-i686 wine-binfmt wine32\"\n-        GOAL=\"deploy\"\n-        BITCOIN_CONFIG=\"--enable-reduce-exports --disable-gui-tests\"\n+        RUN_TESTS=true\n+        GOAL=\"install\"\n+        BITCOIN_CONFIG=\"--enable-reduce-exports\"\n # Win64\n     - stage: test\n       env: >-\n         HOST=x86_64-w64-mingw32\n+        DEP_OPTS=\"NO_QT=1\"\n         PACKAGES=\"python3 nsis g++-mingw-w64-x86-64 wine-binfmt wine64\"\n-        GOAL=\"deploy\"\n-        BITCOIN_CONFIG=\"--enable-reduce-exports --disable-gui-tests\"\n+        RUN_TESTS=true\n+        GOAL=\"install\"\n+        BITCOIN_CONFIG=\"--enable-reduce-exports\"\n # 32-bit + dash\n     - stage: test\n       env: >-\n         HOST=i686-pc-linux-gnu\n         PACKAGES=\"g++-multilib python3-zmq\"\n+        DEP_OPTS=\"NO_QT=1\"\n+        RUN_TESTS=true\n         GOAL=\"install\"\n         BITCOIN_CONFIG=\"--enable-zmq --enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\"\n         CONFIG_SHELL=\"/bin/dash\"\n@@ -90,32 +110,26 @@ jobs:\n         HOST=x86_64-unknown-linux-gnu\n         PACKAGES=\"python3-zmq qtbase5-dev qttools5-dev-tools protobuf-compiler libdbus-1-dev libharfbuzz-dev libprotobuf-dev\"\n         DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1 ALLOW_HOST_PACKAGES=1\"\n+        RUN_TESTS=true\n+        RUN_BENCH=true\n         GOAL=\"install\"\n         BITCOIN_CONFIG=\"--enable-zmq --with-gui=qt5 --enable-glibc-back-compat --enable-reduce-exports --enable-debug CXXFLAGS=\\\"-g0 -O2\\\"\"\n-# x86_64 Linux (xenial, no depends, only system libs, sanitizers: thread (TSan))\n-    - stage: test\n-      env: >-\n-        HOST=x86_64-unknown-linux-gnu\n-        DOCKER_NAME_TAG=ubuntu:16.04\n-        PACKAGES=\"clang llvm python3-zmq qtbase5-dev qttools5-dev-tools libssl-dev libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libprotobuf-dev protobuf-compiler libqrencode-dev\"\n-        NO_DEPENDS=1\n-        GOAL=\"install\"\n-        BITCOIN_CONFIG=\"--enable-zmq --disable-wallet --with-gui=qt5 CPPFLAGS=-DDEBUG_LOCKORDER --with-sanitizers=thread --disable-hardening --disable-asm CC=clang CXX=clang++\"\n-# x86_64 Linux (no depends, only system libs, sanitizers: address/leak (ASan + LSan) + undefined (UBSan) + integer)\n+# x86_64 Linux (Qt5 & system libs)\n     - stage: test\n       env: >-\n         HOST=x86_64-unknown-linux-gnu\n-        PACKAGES=\"clang llvm python3-zmq qtbase5-dev qttools5-dev-tools libssl1.0-dev libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libprotobuf-dev protobuf-compiler libqrencode-dev\"\n+        PACKAGES=\"python3-zmq qtbase5-dev qttools5-dev-tools libssl1.0-dev libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libprotobuf-dev protobuf-compiler libqrencode-dev\"\n         NO_DEPENDS=1\n-        FUNCTIONAL_TESTS_CONFIG=\"--exclude wallet_multiwallet.py\" # Temporarily suppress ASan heap-use-after-free (see issue #14163)\n+        RUN_TESTS=true\n         GOAL=\"install\"\n-        BITCOIN_CONFIG=\"--enable-zmq --with-incompatible-bdb --with-gui=qt5 CPPFLAGS=-DDEBUG_LOCKORDER --with-sanitizers=address,integer,undefined CC=clang CXX=clang++\"\n+        BITCOIN_CONFIG=\"--enable-zmq --with-incompatible-bdb --enable-glibc-back-compat --enable-reduce-exports --with-gui=qt5 CPPFLAGS=-DDEBUG_LOCKORDER\"\n # x86_64 Linux, No wallet\n     - stage: test\n       env: >-\n         HOST=x86_64-unknown-linux-gnu\n-        PACKAGES=\"python3-zmq\"\n+        PACKAGES=\"python3\"\n         DEP_OPTS=\"NO_WALLET=1\"\n+        RUN_TESTS=true\n         GOAL=\"install\"\n         BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n # Cross-Mac\n@@ -124,7 +138,27 @@ jobs:\n         HOST=x86_64-apple-darwin14\n         PACKAGES=\"cmake imagemagick libcap-dev librsvg2-bin libz-dev libbz2-dev libtiff-tools python-dev python3-setuptools-git\"\n         OSX_SDK=10.11\n-        RUN_UNIT_TESTS=false\n-        RUN_FUNCTIONAL_TESTS=false\n-        GOAL=\"deploy\"\n+        GOAL=\"all deploy\"\n         BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports --enable-werror\"\n+    - stage: lint\n+      env:\n+      cache: false\n+      language: python\n+      python: '3.6'\n+      install:\n+        - travis_retry pip install flake8==3.5.0\n+      before_script:\n+        - git fetch --unshallow\n+      script:\n+        - if [ \"$TRAVIS_EVENT_TYPE\" = \"pull_request\" ]; then test/lint/commit-script-check.sh $TRAVIS_COMMIT_RANGE; fi\n+        - test/lint/git-subtree-check.sh src/crypto/ctaes\n+        - test/lint/git-subtree-check.sh src/secp256k1\n+        - test/lint/git-subtree-check.sh src/univalue\n+        - test/lint/git-subtree-check.sh src/leveldb\n+        - test/lint/check-doc.py\n+        - test/lint/check-rpc-mappings.py .\n+        - test/lint/lint-all.sh\n+        - if [ \"$TRAVIS_REPO_SLUG\" = \"bitcoin/bitcoin\" -a \"$TRAVIS_EVENT_TYPE\" = \"cron\" ]; then\n+              while read LINE; do travis_retry gpg --keyserver hkp://subset.pool.sks-keyservers.net --recv-keys $LINE; done < contrib/verify-commits/trusted-keys &&\n+              travis_wait 50 contrib/verify-commits/verify-commits.py;\n+          fi"
      }
    ]
  },
  {
    "sha": "7a5b7e7d96f20475e8610e63f3b3589e08029e2f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YTViN2U3ZDk2ZjIwNDc1ZTg2MTBlNjNmM2IzNTg5ZTA4MDI5ZTJm",
    "commit": {
      "author": {
        "name": "BitcoinV",
        "email": "45887994+bitcoinVBR@users.noreply.github.com",
        "date": "2018-12-30T17:17:01Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2018-12-30T17:17:01Z"
      },
      "message": "Update README.md",
      "tree": {
        "sha": "13bf0b8f514f7b35bedcf4bb95e3e7756c1f40cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/13bf0b8f514f7b35bedcf4bb95e3e7756c1f40cc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7a5b7e7d96f20475e8610e63f3b3589e08029e2f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcKP2NCRBK7hj4Ov3rIwAAdHIIAAgzwMBuhVGqJo0Zc/QAtbCv\n+lNREEAme61jFXbh6fsLU/Nq7tUPm/mmAFUIQZ84cDGq8SNj+47y+3idTqKWtovl\ndPnAIV8PPDY4owOjH1/COvc2/dz15AcMql3cIRkYP1OVHS7vvR8/JUHlXyYCrpkB\nGrPfqWdX5JdL0d4iOmIB6a4hEm6qkQiX4tTCWYysNrV9dnveow4aF+F2h5gHdtY/\nnZQQBzx2mlEgBqp+EaQrKH2kx8Qv947BSqV9gmv2+dwiCAmgCiHYVjUGo4UjZpY1\n2zMq5VieP7sIAE27+gpJ4ay9jUyhM+1VvsE1zY0nKxn443T+Xp43vv8esE9qXn0=\n=wenQ\n-----END PGP SIGNATURE-----\n",
        "payload": "tree 13bf0b8f514f7b35bedcf4bb95e3e7756c1f40cc\nparent e191af6504d04640fb0fa1983fa6d121d2f486ae\nauthor BitcoinV <45887994+bitcoinVBR@users.noreply.github.com> 1546190221 -0600\ncommitter GitHub <noreply@github.com> 1546190221 -0600\n\nUpdate README.md"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a5b7e7d96f20475e8610e63f3b3589e08029e2f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7a5b7e7d96f20475e8610e63f3b3589e08029e2f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a5b7e7d96f20475e8610e63f3b3589e08029e2f/comments",
    "author": null,
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e191af6504d04640fb0fa1983fa6d121d2f486ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e191af6504d04640fb0fa1983fa6d121d2f486ae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e191af6504d04640fb0fa1983fa6d121d2f486ae"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 6,
      "deletions": 32
    },
    "files": [
      {
        "sha": "94f6927b9af06969a18d415e4b370d58bdc86146",
        "filename": "README.md",
        "status": "modified",
        "additions": 6,
        "deletions": 32,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a5b7e7d96f20475e8610e63f3b3589e08029e2f/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a5b7e7d96f20475e8610e63f3b3589e08029e2f/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README.md?ref=7a5b7e7d96f20475e8610e63f3b3589e08029e2f",
        "patch": "@@ -1,35 +1,23 @@\n-Bitcoin Core integration/staging tree\n-=====================================\n \n-[![Build Status](https://travis-ci.org/bitcoin/bitcoin.svg?branch=master)](https://travis-ci.org/bitcoin/bitcoin)\n+http://www.bitcoinV.org\n \n-https://bitcoincore.org\n-\n-What is Bitcoin?\n+What is BitcoinV?\n ----------------\n \n-Bitcoin is an experimental digital currency that enables instant payments to\n-anyone, anywhere in the world. Bitcoin uses peer-to-peer technology to operate\n-with no central authority: managing transactions and issuing money are carried\n-out collectively by the network. Bitcoin Core is the name of open source\n-software which enables the use of this currency.\n-\n-For more information, as well as an immediately useable, binary version of\n-the Bitcoin Core software, see https://bitcoincore.org/en/download/, or read the\n-[original whitepaper](https://bitcoincore.org/bitcoin.pdf).\n+The original Bitcoin (BTC) is no longer decentralized. BitcoinV (Variable Block Rewards) solves this problem by providing incentive to the original CPU and GPU miners. Miners that secure the blockchain beyond the current difficulty level are rewarded more block rewards. Block rewards can vary from the standard block reward up to 1 MILLION times the standard block reward! Mining now becomes very interesting for an individual miner, the JACKPOT is waiting to be mined! These JACKPOT block rewards keep the blockchain decentralized and more secure.\n \n License\n -------\n \n-Bitcoin Core is released under the terms of the MIT license. See [COPYING](COPYING) for more\n+BitcoinV Core is released under the terms of the MIT license. See [COPYING](COPYING) for more\n information or see https://opensource.org/licenses/MIT.\n \n Development Process\n -------------------\n \n The `master` branch is regularly built and tested, but is not guaranteed to be\n-completely stable. [Tags](https://github.com/bitcoin/bitcoin/tags) are created\n-regularly to indicate new official, stable release versions of Bitcoin Core.\n+completely stable. [Tags](https://github.com/bitcoinVBR/bitcoinV/tags) are created\n+regularly to indicate new official, stable release versions of BitcoinV Core.\n \n The contribution workflow is described in [CONTRIBUTING.md](CONTRIBUTING.md).\n \n@@ -60,17 +48,3 @@ Changes should be tested by somebody other than the developer who wrote the\n code. This is especially important for large or high-risk changes. It is useful\n to add a test plan to the pull request description if testing the changes is\n not straightforward.\n-\n-Translations\n-------------\n-\n-Changes to translations as well as new translations can be submitted to\n-[Bitcoin Core's Transifex page](https://www.transifex.com/projects/p/bitcoin/).\n-\n-Translations are periodically pulled from Transifex and merged into the git repository. See the\n-[translation process](doc/translation_process.md) for details on how this works.\n-\n-**Important**: We do not accept translation changes as GitHub pull requests because the next\n-pull from Transifex would automatically overwrite them again.\n-\n-Translators should also subscribe to the [mailing list](https://groups.google.com/forum/#!forum/bitcoin-translators)."
      }
    ]
  },
  {
    "sha": "793b04af6b7e197c74b8d09ab7e100f4732b63b0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OTNiMDRhZjZiN2UxOTdjNzRiOGQwOWFiN2UxMDBmNDczMmI2M2Iw",
    "commit": {
      "author": {
        "name": "NullFunctor",
        "email": "nullfunctor@bitcoinv.org",
        "date": "2019-01-01T00:01:36Z"
      },
      "committer": {
        "name": "NullFunctor",
        "email": "nullfunctor@bitcoinv.org",
        "date": "2019-01-01T00:01:36Z"
      },
      "message": "easy miner",
      "tree": {
        "sha": "21a81f40b7a2c34801f9d2634dd1fbbc390c8412",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/21a81f40b7a2c34801f9d2634dd1fbbc390c8412"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/793b04af6b7e197c74b8d09ab7e100f4732b63b0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/793b04af6b7e197c74b8d09ab7e100f4732b63b0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/793b04af6b7e197c74b8d09ab7e100f4732b63b0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/793b04af6b7e197c74b8d09ab7e100f4732b63b0/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "7a5b7e7d96f20475e8610e63f3b3589e08029e2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a5b7e7d96f20475e8610e63f3b3589e08029e2f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7a5b7e7d96f20475e8610e63f3b3589e08029e2f"
      }
    ],
    "stats": {
      "total": 703,
      "additions": 702,
      "deletions": 1
    },
    "files": [
      {
        "sha": "14472570b410689fd7fcec4f0debdf53ab350af4",
        "filename": ".vscode/settings.json",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/793b04af6b7e197c74b8d09ab7e100f4732b63b0/.vscode/settings.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/793b04af6b7e197c74b8d09ab7e100f4732b63b0/.vscode/settings.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.vscode/settings.json?ref=793b04af6b7e197c74b8d09ab7e100f4732b63b0",
        "patch": "@@ -62,6 +62,9 @@\n         \"algorithm\": \"cpp\",\n         \"cfenv\": \"cpp\",\n         \"hashtable\": \"cpp\",\n-        \"string\": \"cpp\"\n+        \"string\": \"cpp\",\n+        \"stack\": \"cpp\",\n+        \"variant\": \"cpp\",\n+        \"__split_buffer\": \"cpp\"\n     }\n }\n\\ No newline at end of file"
      },
      {
        "sha": "016851896dc39ec7fea2c8c091d44684d92ce7af",
        "filename": "contrib/bitcoin-qt.pro",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/793b04af6b7e197c74b8d09ab7e100f4732b63b0/contrib/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/793b04af6b7e197c74b8d09ab7e100f4732b63b0/contrib/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/bitcoin-qt.pro?ref=793b04af6b7e197c74b8d09ab7e100f4732b63b0",
        "patch": "@@ -6,6 +6,7 @@ FORMS += \\\n     ../src/qt/forms/editaddressdialog.ui \\\n     ../src/qt/forms/helpmessagedialog.ui \\\n     ../src/qt/forms/intro.ui \\\n+    ../src/qt/forms/miner.ui \\\n     ../src/qt/forms/openuridialog.ui \\\n     ../src/qt/forms/optionsdialog.ui \\\n     ../src/qt/forms/overviewpage.ui \\"
      },
      {
        "sha": "8e9796fd2943130bddd6268cecf60f6afc806109",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/793b04af6b7e197c74b8d09ab7e100f4732b63b0/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/793b04af6b7e197c74b8d09ab7e100f4732b63b0/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=793b04af6b7e197c74b8d09ab7e100f4732b63b0",
        "patch": "@@ -1,3 +1,4 @@\n+# Copyright (c) 2019 The BitcoinV Core developers\n # Copyright (c) 2013-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n@@ -132,6 +133,7 @@ QT_MOC_CPP = \\\n   qt/moc_intro.cpp \\\n   qt/moc_macdockiconhandler.cpp \\\n   qt/moc_macnotificationhandler.cpp \\\n+  qt/moc_minerview.cpp \\ \n   qt/moc_modaloverlay.cpp \\\n   qt/moc_notificator.cpp \\\n   qt/moc_openuridialog.cpp \\\n@@ -202,6 +204,7 @@ BITCOIN_QT_H = \\\n   qt/intro.h \\\n   qt/macdockiconhandler.h \\\n   qt/macnotificationhandler.h \\\n+  qt/minerview.h \\\n   qt/modaloverlay.h \\\n   qt/networkstyle.h \\\n   qt/notificator.h \\\n@@ -328,6 +331,7 @@ BITCOIN_QT_WALLET_CPP = \\\n   qt/coincontroldialog.cpp \\\n   qt/coincontroltreewidget.cpp \\\n   qt/editaddressdialog.cpp \\\n+  qt/minerview.cpp \\\n   qt/openuridialog.cpp \\\n   qt/overviewpage.cpp \\\n   qt/paymentrequestplus.cpp \\"
      },
      {
        "sha": "37b1e1676986dd53de08ec2c07bfcd2f4c290e0f",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/793b04af6b7e197c74b8d09ab7e100f4732b63b0/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/793b04af6b7e197c74b8d09ab7e100f4732b63b0/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=793b04af6b7e197c74b8d09ab7e100f4732b63b0",
        "patch": "@@ -1,3 +1,4 @@\n+// Copyright (c) 2019 The BitcoinV Core developers\n // Copyright (c) 2018 The BitcoinV Core developers\n // Copyright (c) 2011-2018 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n@@ -263,6 +264,13 @@ void BitcoinGUI::createActions()\n     historyAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_4));\n     tabGroup->addAction(historyAction);\n \n+    minerAction = new QAction(platformStyle->SingleColorIcon(\":/icons/tx_mined\"), tr(\"&Miner\"), this);\n+    minerAction->setStatusTip(tr(\"Easy miner\"));\n+    minerAction->setToolTip(minerAction->statusTip());\n+    minerAction->setCheckable(true);\n+    minerAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_C));\n+    tabGroup->addAction(minerAction);\n+\n #ifdef ENABLE_WALLET\n     // These showNormalIfMinimized are needed because Send Coins and Receive Coins\n     // can be triggered from the tray menu, and need to show the GUI to be useful.\n@@ -278,6 +286,7 @@ void BitcoinGUI::createActions()\n     connect(receiveCoinsMenuAction, SIGNAL(triggered()), this, SLOT(gotoReceiveCoinsPage()));\n     connect(historyAction, SIGNAL(triggered()), this, SLOT(showNormalIfMinimized()));\n     connect(historyAction, SIGNAL(triggered()), this, SLOT(gotoHistoryPage()));\n+    connect(minerAction, SIGNAL(triggered()), this, SLOT(gotoMinerPage())); // this triggers the mine pane to show when miner icon is clicked\n #endif // ENABLE_WALLET\n \n     quitAction = new QAction(platformStyle->TextColorIcon(\":/icons/quit\"), tr(\"E&xit\"), this);\n@@ -413,6 +422,7 @@ void BitcoinGUI::createToolBars()\n         toolbar->addAction(sendCoinsAction);\n         toolbar->addAction(receiveCoinsAction);\n         toolbar->addAction(historyAction);\n+        toolbar->addAction(minerAction); // This makes the tab appear on the GUI\n         overviewAction->setChecked(true);\n \n #ifdef ENABLE_WALLET\n@@ -688,6 +698,12 @@ void BitcoinGUI::gotoOverviewPage()\n     if (walletFrame) walletFrame->gotoOverviewPage();\n }\n \n+void BitcoinGUI::gotoMinerPage()\n+{\n+    minerAction->setChecked(true);\n+    if (walletFrame) walletFrame->gotoMinerPage();\n+}\n+\n void BitcoinGUI::gotoHistoryPage()\n {\n     historyAction->setChecked(true);"
      },
      {
        "sha": "f6ae4687658b53fe8f247976a8fe03bcaa06cc4c",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/793b04af6b7e197c74b8d09ab7e100f4732b63b0/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/793b04af6b7e197c74b8d09ab7e100f4732b63b0/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=793b04af6b7e197c74b8d09ab7e100f4732b63b0",
        "patch": "@@ -1,3 +1,4 @@\n+// Copyright (c) 2019 The BitcoinV Core developers\n // Copyright (c) 2011-2018 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n@@ -103,6 +104,7 @@ class BitcoinGUI : public QMainWindow\n     QMenuBar* appMenuBar = nullptr;\n     QToolBar* appToolBar = nullptr;\n     QAction* overviewAction = nullptr;\n+    QAction* minerAction = nullptr;\n     QAction* historyAction = nullptr;\n     QAction* quitAction = nullptr;\n     QAction* sendCoinsAction = nullptr;\n@@ -222,6 +224,8 @@ private Q_SLOTS:\n #ifdef ENABLE_WALLET\n     /** Switch to overview (home) page */\n     void gotoOverviewPage();\n+    /** Switch to miner page */\n+    void gotoMinerPage();\n     /** Switch to history (transactions) page */\n     void gotoHistoryPage();\n     /** Switch to receive coins page */"
      },
      {
        "sha": "20c5e3b9885ee8d17e385fa540270f07cf4f1076",
        "filename": "src/qt/forms/miner.ui",
        "status": "added",
        "additions": 293,
        "deletions": 0,
        "changes": 293,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/793b04af6b7e197c74b8d09ab7e100f4732b63b0/src/qt/forms/miner.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/793b04af6b7e197c74b8d09ab7e100f4732b63b0/src/qt/forms/miner.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/miner.ui?ref=793b04af6b7e197c74b8d09ab7e100f4732b63b0",
        "patch": "@@ -0,0 +1,293 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<ui version=\"4.0\">\n+ <class>Miner</class>\n+ <widget class=\"QDialog\" name=\"Intro\">\n+  <property name=\"geometry\">\n+   <rect>\n+    <x>0</x>\n+    <y>0</y>\n+    <width>674</width>\n+    <height>415</height>\n+   </rect>\n+  </property>\n+  <property name=\"windowTitle\">\n+   <string>Welcome</string>\n+  </property>\n+  <layout class=\"QVBoxLayout\" name=\"verticalLayout\">\n+   <item>\n+    <widget class=\"QLabel\" name=\"welcomeLabel\">\n+     <property name=\"styleSheet\">\n+      <string notr=\"true\">QLabel { font-style:italic; }</string>\n+     </property>\n+     <property name=\"text\">\n+      <string>Welcome to %1.</string>\n+     </property>\n+     <property name=\"wordWrap\">\n+      <bool>true</bool>\n+     </property>\n+    </widget>\n+   </item>\n+   <item>\n+    <spacer name=\"verticalSpacer_4\">\n+     <property name=\"orientation\">\n+      <enum>Qt::Vertical</enum>\n+     </property>\n+     <property name=\"sizeType\">\n+      <enum>QSizePolicy::Minimum</enum>\n+     </property>\n+     <property name=\"sizeHint\" stdset=\"0\">\n+      <size>\n+       <width>20</width>\n+       <height>15</height>\n+      </size>\n+     </property>\n+    </spacer>\n+   </item>\n+   <item>\n+    <widget class=\"QLabel\" name=\"storageLabel\">\n+     <property name=\"text\">\n+      <string>As this is the first time the program is launched, you can choose where %1 will store its data.</string>\n+     </property>\n+     <property name=\"wordWrap\">\n+      <bool>true</bool>\n+     </property>\n+    </widget>\n+   </item>\n+   <item>\n+    <widget class=\"QLabel\" name=\"sizeWarningLabel\">\n+     <property name=\"wordWrap\">\n+      <bool>true</bool>\n+     </property>\n+    </widget>\n+   </item>\n+   <item>\n+    <widget class=\"QRadioButton\" name=\"dataDirDefault\">\n+     <property name=\"text\">\n+      <string>Use the default data directory</string>\n+     </property>\n+    </widget>\n+   </item>\n+   <item>\n+    <widget class=\"QRadioButton\" name=\"dataDirCustom\">\n+     <property name=\"text\">\n+      <string>Use a custom data directory:</string>\n+     </property>\n+    </widget>\n+   </item>\n+   <item>\n+    <layout class=\"QHBoxLayout\" name=\"horizontalLayout\">\n+     <property name=\"spacing\">\n+      <number>0</number>\n+     </property>\n+     <property name=\"sizeConstraint\">\n+      <enum>QLayout::SetDefaultConstraint</enum>\n+     </property>\n+     <item>\n+      <spacer name=\"horizontalSpacer\">\n+       <property name=\"orientation\">\n+        <enum>Qt::Horizontal</enum>\n+       </property>\n+       <property name=\"sizeType\">\n+        <enum>QSizePolicy::Fixed</enum>\n+       </property>\n+       <property name=\"sizeHint\" stdset=\"0\">\n+        <size>\n+         <width>60</width>\n+         <height>20</height>\n+        </size>\n+       </property>\n+      </spacer>\n+     </item>\n+     <item>\n+      <layout class=\"QVBoxLayout\" name=\"verticalLayout_2\">\n+       <property name=\"sizeConstraint\">\n+        <enum>QLayout::SetDefaultConstraint</enum>\n+       </property>\n+       <item>\n+        <layout class=\"QHBoxLayout\" name=\"horizontalLayout_2\">\n+         <item>\n+          <widget class=\"QLineEdit\" name=\"dataDirectory\"/>\n+         </item>\n+         <item>\n+          <widget class=\"QPushButton\" name=\"ellipsisButton\">\n+           <property name=\"sizePolicy\">\n+            <sizepolicy hsizetype=\"Minimum\" vsizetype=\"Fixed\">\n+             <horstretch>0</horstretch>\n+             <verstretch>0</verstretch>\n+            </sizepolicy>\n+           </property>\n+           <property name=\"maximumSize\">\n+            <size>\n+             <width>30</width>\n+             <height>16777215</height>\n+            </size>\n+           </property>\n+           <property name=\"text\">\n+            <string notr=\"true\">\u2026</string>\n+           </property>\n+           <property name=\"autoDefault\">\n+            <bool>false</bool>\n+           </property>\n+          </widget>\n+         </item>\n+        </layout>\n+       </item>\n+       <item>\n+        <spacer name=\"verticalSpacer_3\">\n+         <property name=\"orientation\">\n+          <enum>Qt::Vertical</enum>\n+         </property>\n+         <property name=\"sizeType\">\n+          <enum>QSizePolicy::Fixed</enum>\n+         </property>\n+         <property name=\"sizeHint\" stdset=\"0\">\n+          <size>\n+           <width>20</width>\n+           <height>5</height>\n+          </size>\n+         </property>\n+        </spacer>\n+       </item>\n+       <item>\n+        <widget class=\"QLabel\" name=\"freeSpace\">\n+         <property name=\"sizePolicy\">\n+          <sizepolicy hsizetype=\"Preferred\" vsizetype=\"Expanding\">\n+           <horstretch>1</horstretch>\n+           <verstretch>0</verstretch>\n+          </sizepolicy>\n+         </property>\n+         <property name=\"text\">\n+          <string/>\n+         </property>\n+         <property name=\"wordWrap\">\n+          <bool>true</bool>\n+         </property>\n+        </widget>\n+       </item>\n+       <item>\n+        <spacer name=\"verticalSpacer_2\">\n+         <property name=\"orientation\">\n+          <enum>Qt::Vertical</enum>\n+         </property>\n+         <property name=\"sizeType\">\n+          <enum>QSizePolicy::Fixed</enum>\n+         </property>\n+         <property name=\"sizeHint\" stdset=\"0\">\n+          <size>\n+           <width>20</width>\n+           <height>5</height>\n+          </size>\n+         </property>\n+        </spacer>\n+       </item>\n+       <item>\n+        <widget class=\"QLabel\" name=\"errorMessage\">\n+         <property name=\"sizePolicy\">\n+          <sizepolicy hsizetype=\"Preferred\" vsizetype=\"Expanding\">\n+           <horstretch>0</horstretch>\n+           <verstretch>0</verstretch>\n+          </sizepolicy>\n+         </property>\n+         <property name=\"textFormat\">\n+          <enum>Qt::RichText</enum>\n+         </property>\n+         <property name=\"wordWrap\">\n+          <bool>true</bool>\n+         </property>\n+        </widget>\n+       </item>\n+      </layout>\n+     </item>\n+    </layout>\n+   </item>\n+   <item>\n+    <widget class=\"QLabel\" name=\"lblExplanation1\">\n+     <property name=\"text\">\n+      <string>When you click OK, %1 will begin to download and process the full %4 block chain (%2GB) starting with the earliest transactions in %3 when %4 initially launched.</string>\n+     </property>\n+     <property name=\"wordWrap\">\n+      <bool>true</bool>\n+     </property>\n+    </widget>\n+   </item>\n+   <item>\n+    <widget class=\"QLabel\" name=\"lblExplanation2\">\n+     <property name=\"text\">\n+      <string>This initial synchronisation is very demanding, and may expose hardware problems with your computer that had previously gone unnoticed. Each time you run %1, it will continue downloading where it left off.</string>\n+     </property>\n+     <property name=\"wordWrap\">\n+      <bool>true</bool>\n+     </property>\n+    </widget>\n+   </item>\n+   <item>\n+    <widget class=\"QLabel\" name=\"lblExplanation3\">\n+     <property name=\"text\">\n+      <string>If you have chosen to limit block chain storage (pruning), the historical data must still be downloaded and processed, but will be deleted afterward to keep your disk usage low.</string>\n+     </property>\n+     <property name=\"wordWrap\">\n+      <bool>true</bool>\n+     </property>\n+    </widget>\n+   </item>\n+   <item>\n+    <spacer name=\"verticalSpacer\">\n+     <property name=\"orientation\">\n+      <enum>Qt::Vertical</enum>\n+     </property>\n+     <property name=\"sizeHint\" stdset=\"0\">\n+      <size>\n+       <width>20</width>\n+       <height>40</height>\n+      </size>\n+     </property>\n+    </spacer>\n+   </item>\n+   <item>\n+    <widget class=\"QDialogButtonBox\" name=\"buttonBox\">\n+     <property name=\"orientation\">\n+      <enum>Qt::Horizontal</enum>\n+     </property>\n+     <property name=\"standardButtons\">\n+      <set>QDialogButtonBox::Cancel|QDialogButtonBox::Ok</set>\n+     </property>\n+    </widget>\n+   </item>\n+  </layout>\n+ </widget>\n+ <resources/>\n+ <connections>\n+  <connection>\n+   <sender>buttonBox</sender>\n+   <signal>accepted()</signal>\n+   <receiver>Intro</receiver>\n+   <slot>accept()</slot>\n+   <hints>\n+    <hint type=\"sourcelabel\">\n+     <x>20</x>\n+     <y>20</y>\n+    </hint>\n+    <hint type=\"destinationlabel\">\n+     <x>20</x>\n+     <y>20</y>\n+    </hint>\n+   </hints>\n+  </connection>\n+  <connection>\n+   <sender>buttonBox</sender>\n+   <signal>rejected()</signal>\n+   <receiver>Intro</receiver>\n+   <slot>reject()</slot>\n+   <hints>\n+    <hint type=\"sourcelabel\">\n+     <x>20</x>\n+     <y>20</y>\n+    </hint>\n+    <hint type=\"destinationlabel\">\n+     <x>20</x>\n+     <y>20</y>\n+    </hint>\n+   </hints>\n+  </connection>\n+ </connections>\n+</ui>"
      },
      {
        "sha": "525fcdde5c091136a3a3dafe4b4e2c334ff04385",
        "filename": "src/qt/minerview.cpp",
        "status": "added",
        "additions": 270,
        "deletions": 0,
        "changes": 270,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/793b04af6b7e197c74b8d09ab7e100f4732b63b0/src/qt/minerview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/793b04af6b7e197c74b8d09ab7e100f4732b63b0/src/qt/minerview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/minerview.cpp?ref=793b04af6b7e197c74b8d09ab7e100f4732b63b0",
        "patch": "@@ -0,0 +1,270 @@\n+// Copyright (c) 2019 The BitcoinV Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <qt/minerview.h>\n+\n+#include <qt/addresstablemodel.h>\n+#include <qt/bitcoinunits.h>\n+#include <qt/csvmodelwriter.h>\n+#include <qt/editaddressdialog.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/platformstyle.h>\n+#include <qt/sendcoinsdialog.h>\n+#include <qt/transactiondescdialog.h>\n+#include <qt/transactionfilterproxy.h>\n+#include <qt/transactionrecord.h>\n+#include <qt/transactiontablemodel.h>\n+#include <qt/walletmodel.h>\n+\n+#include <ui_interface.h>\n+\n+#include <QComboBox>\n+#include <QDateTimeEdit>\n+#include <QDesktopServices>\n+#include <QDoubleValidator>\n+#include <QHBoxLayout>\n+#include <QHeaderView>\n+#include <QLabel>\n+#include <QLineEdit>\n+#include <QMenu>\n+#include <QPoint>\n+#include <QScrollBar>\n+#include <QSignalMapper>\n+#include <QTableView>\n+#include <QTimer>\n+#include <QUrl>\n+#include <QVBoxLayout>\n+#include <QTextEdit>\n+\n+#include <rpc/server.h>\n+#include <rpc/client.h>\n+#include <univalue/include/univalue.h>\n+\n+#include <pthread.h>\n+#include <stdio.h>\n+#include <atomic>\n+#include <thread>\n+#include <unistd.h>\n+\n+MinerView::MinerView(const PlatformStyle *platformStyle, QWidget *parent) :\n+    QWidget(parent), m_minerView(0), m_mining_active{false},\n+    m_mining_type{STANDARD}\n+{\n+    // Build filter row\n+    setContentsMargins(0,0,0,0);\n+\n+    QHBoxLayout *hlayout = new QHBoxLayout();\n+    hlayout->setContentsMargins(0,0,0,0);\n+\n+    if (platformStyle->getUseExtraSpacing()) {\n+        hlayout->setSpacing(5);\n+        hlayout->addSpacing(26);\n+    } else {\n+        hlayout->setSpacing(0);\n+        hlayout->addSpacing(23);\n+    }\n+\n+\n+    m_mine_type = new QComboBox(this);\n+    if (platformStyle->getUseExtraSpacing()) {\n+        m_mine_type->setFixedWidth(251);\n+    } else {\n+        m_mine_type->setFixedWidth(250);\n+    }\n+    m_mine_type->addItem(tr(\"Mine Standard Block Rewards\"), STANDARD);\n+    m_mine_type->addItem(tr(\"Mine Random Block Rewards\"), RANDOM_BLOCK_REWARD);\n+    m_mine_type->addItem(tr(\"Mine JACKPOT Block Rewards\"), JACKPOT_BLOCK_REWARD);\n+    hlayout->addWidget(m_mine_type);\n+\n+\n+\n+    // Delay before filtering transactions in ms\n+    static const int input_filter_delay = 200;\n+\n+\n+    QVBoxLayout *vlayout = new QVBoxLayout(this);\n+    vlayout->setContentsMargins(0,0,0,0);\n+    vlayout->setSpacing(0);\n+\n+    //QTableView *view = new QTableView(this);\n+    m_minerView = new QTextEdit();\n+\n+\n+    vlayout->addLayout(hlayout);\n+    vlayout->addWidget(m_minerView);\n+    vlayout->setSpacing(0);\n+\n+\n+\n+    m_minerView->installEventFilter(this);\n+\n+\n+    m_minerView->setObjectName(\"minerView\");\n+\n+    // Create the button, make \"this\" the parent\n+    m_button = new QPushButton(\"START\", this);\n+    // set size and location of the button\n+    m_button->setGeometry(QRect(QPoint(100, 100), QSize(200, 50)));\n+    m_button->setFixedWidth(150);\n+\n+    hlayout->addWidget(m_button);\n+ \n+    // Connect button signal to appropriate slot\n+    connect(m_button, SIGNAL (released()), this, SLOT (handleButton()));\n+\n+    connect(m_mine_type, SIGNAL (activated(int)), this, SLOT (handleMineType(int)));\n+\n+}\n+\n+\n+std::atomic<bool> stop_mining(false);\n+\n+void* mining_thread_gui(void* params);\n+void* mining_thread_gui(void* params)\n+{\n+    MinerView::Mining_Type_t mining_type =  *((MinerView::Mining_Type_t*)params);\n+\n+\n+    std::vector<std::string> strParams;\n+    bool is_random_enabled = false;\n+\n+    if ( MinerView::RANDOM_BLOCK_REWARD == mining_type )\n+    {\n+        strParams.push_back(std::string(\"1\"));\n+        is_random_enabled = true;\n+    }\n+    else if ( MinerView::JACKPOT_BLOCK_REWARD == mining_type )\n+    {\n+        strParams.push_back(std::string(\"1\"));\n+        strParams.push_back(std::string(\"10000000\"));\n+        uint32_t million = 1<<20;\n+        \n+        strParams.push_back(std::string(std::to_string(million)));\n+    }\n+    else\n+    {\n+        // default to standard\n+        strParams.push_back(std::string(\"1\"));\n+        strParams.push_back(std::string(\"10000000\"));\n+    }\n+\n+    UniValue par = RPCConvertValues(std::string(\"generate\"), strParams);\n+\n+    stop_mining = false;\n+    JSONRPCRequest req;\n+    req.params = par;\n+    req.strMethod = \"generate\";\n+    req.URI = \"/wallet/\";\n+\n+    uint32_t n = 0;\n+\n+    while ( true ) {\n+\n+        // RPC call to do the mining\n+        ::tableRPC.execute(req);\n+\n+        std::cout << \"running...\" << std::endl;\n+\n+\n+        if (true == stop_mining) {\n+            break;\n+        }\n+\n+        if (is_random_enabled)\n+        {\n+            std::vector<std::string> strParams;\n+\n+\n+            strParams.push_back(std::string(\"1\"));\n+            strParams.push_back(std::string(\"10000000\"));\n+            strParams.push_back(std::to_string(1<<n));\n+\n+            UniValue par = RPCConvertValues(std::string(\"generate\"), strParams);\n+\n+            req.params = par;\n+            req.strMethod = \"generate\";\n+            req.URI = \"/wallet/\";\n+\n+            // don't go more than a million times the block reward, the blockchain won't accept it if you do.\n+            n = (n+1)%20;\n+        }\n+\n+    }\n+\n+\n+    pthread_exit((void*)(nullptr));\n+\n+}\n+\n+void start_mining( JSONRPCRequest* mining_params )\n+{\n+    void* status = 0;\n+\n+    pthread_t tids[1];\n+    std::cout << \"Mining started \" << std::endl;\n+\n+    pthread_create(&tids[0], NULL, mining_thread_gui, (void *)mining_params);\n+\n+    return;\n+}\n+\n+\n+ void MinerView::handleButton()\n+ {\n+     \n+     if (m_mining_active)\n+     {\n+        // stop mining\n+        stop_mining = true;\n+\n+        // now the user needs to see the START button\n+        m_button->setText(\"START\");\n+     }\n+     else\n+     {\n+         // start mining\n+        if ( RANDOM_BLOCK_REWARD == m_mining_type )\n+        {\n+            m_minerView->setText(\"Mining for a RANDOM BLOCK REWARD\");\n+            m_minerView->show();\n+        }\n+        else if ( JACKPOT_BLOCK_REWARD == m_mining_type )\n+        {\n+            m_minerView->setText(\"Mining for the JACKPOT BLOCK REWARD\");\n+            m_minerView->show();\n+        }\n+        else\n+        {\n+            // default to standard\n+            m_mining_type = STANDARD;\n+            m_minerView->setText(\"Mining for the STANDARD BLOCK REWARD\");\n+            m_minerView->show();\n+        }\n+\n+        stop_mining = false;\n+\n+        // now the user needs to see the STOP button\n+        m_button->setText(\"STOP\");\n+\n+\n+        //// Start the thread to do the mining.\n+        pthread_t tids[1];\n+        pthread_create(&tids[0], NULL, mining_thread_gui, (void *)&m_mining_type);\n+\n+\n+     }\n+\n+     m_mining_active = !m_mining_active;\n+     \n+ }\n+\n+void MinerView::handleMineType(int type)\n+{\n+    if (type >=0 && type <= 2)\n+    {\n+        m_mining_type = (Mining_Type_t)type;\n+    }\n+\n+    return;\n+}"
      },
      {
        "sha": "3608ed68533b4f79a5efce568505bde56733f526",
        "filename": "src/qt/minerview.h",
        "status": "added",
        "additions": 74,
        "deletions": 0,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/793b04af6b7e197c74b8d09ab7e100f4732b63b0/src/qt/minerview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/793b04af6b7e197c74b8d09ab7e100f4732b63b0/src/qt/minerview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/minerview.h?ref=793b04af6b7e197c74b8d09ab7e100f4732b63b0",
        "patch": "@@ -0,0 +1,74 @@\n+// Copyright (c) 2019 The BitcoinV Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_QT_MINERVIEW_H\n+#define BITCOIN_QT_MINERVIEW_H\n+\n+#include <qt/guiutil.h>\n+\n+#include <uint256.h>\n+\n+#include <QWidget>\n+#include <QKeyEvent>\n+\n+ #include <QMainWindow>\n+ #include <QPushButton>\n+ #include <QTextEdit>\n+\n+class PlatformStyle;\n+class TransactionFilterProxy;\n+class WalletModel;\n+\n+QT_BEGIN_NAMESPACE\n+class QComboBox;\n+class QDateTimeEdit;\n+class QFrame;\n+class QLineEdit;\n+class QMenu;\n+class QModelIndex;\n+class QSignalMapper;\n+class QTableView;\n+QT_END_NAMESPACE\n+\n+/** Widget showing the transaction list for a wallet, including a filter row.\n+    Using the filter row, the user can view or export a subset of the transactions.\n+  */\n+class MinerView : public QWidget\n+{\n+    Q_OBJECT\n+\n+public:\n+    explicit MinerView(const PlatformStyle *platformStyle, QWidget *parent = 0);\n+\n+   void setModel(WalletModel *model);\n+\n+    // Date ranges for filter\n+    enum Mining_Type_t\n+    {\n+        STANDARD,\n+        RANDOM_BLOCK_REWARD,\n+        JACKPOT_BLOCK_REWARD,\n+    };\n+\n+\n+\n+ private Q_SLOTS:\n+    void handleButton();\n+    void handleMineType(int);\n+\n+\n+ private:\n+ \n+    QTextEdit *m_minerView;\n+\n+    QPushButton *m_button;\n+    bool m_mining_active;\n+\n+    QComboBox *m_mine_type;\n+\n+    Mining_Type_t m_mining_type;\n+\n+};\n+\n+#endif // BITCOIN_QT_MINERVIEW_H"
      },
      {
        "sha": "93f9ec1a937f062ab6cc5176432edbfa2eb091d1",
        "filename": "src/qt/res/icons/bitcoin.ico",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/793b04af6b7e197c74b8d09ab7e100f4732b63b0/src/qt/res/icons/bitcoin.ico",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/793b04af6b7e197c74b8d09ab7e100f4732b63b0/src/qt/res/icons/bitcoin.ico",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/bitcoin.ico?ref=793b04af6b7e197c74b8d09ab7e100f4732b63b0"
      },
      {
        "sha": "8c0e8cddbdf0383c4b914102c0088ca7ec3c5eed",
        "filename": "src/qt/walletframe.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/793b04af6b7e197c74b8d09ab7e100f4732b63b0/src/qt/walletframe.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/793b04af6b7e197c74b8d09ab7e100f4732b63b0/src/qt/walletframe.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletframe.cpp?ref=793b04af6b7e197c74b8d09ab7e100f4732b63b0",
        "patch": "@@ -1,3 +1,4 @@\n+// Copyright (c) 2019 The BitcoinV Core developers\n // Copyright (c) 2011-2018 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n@@ -130,6 +131,13 @@ void WalletFrame::gotoOverviewPage()\n         i.value()->gotoOverviewPage();\n }\n \n+void WalletFrame::gotoMinerPage()\n+{\n+    QMap<QString, WalletView*>::const_iterator i;\n+    for (i = mapWalletViews.constBegin(); i != mapWalletViews.constEnd(); ++i)\n+        i.value()->gotoMinerPage();\n+}\n+\n void WalletFrame::gotoHistoryPage()\n {\n     QMap<QString, WalletView*>::const_iterator i;"
      },
      {
        "sha": "548f3e45edf25fa7877096a92016969753e63cae",
        "filename": "src/qt/walletframe.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/793b04af6b7e197c74b8d09ab7e100f4732b63b0/src/qt/walletframe.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/793b04af6b7e197c74b8d09ab7e100f4732b63b0/src/qt/walletframe.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletframe.h?ref=793b04af6b7e197c74b8d09ab7e100f4732b63b0",
        "patch": "@@ -1,3 +1,4 @@\n+// Copyright (c) 2019 The BitcoinV Core developers\n // Copyright (c) 2011-2017 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n@@ -65,6 +66,8 @@ class WalletFrame : public QFrame\n public Q_SLOTS:\n     /** Switch to overview (home) page */\n     void gotoOverviewPage();\n+    /** Switch to Miner page */\n+    void gotoMinerPage();\n     /** Switch to history (transactions) page */\n     void gotoHistoryPage();\n     /** Switch to receive coins page */"
      },
      {
        "sha": "4abb99e5cb7485577505f33b0a75d754fd2d95e3",
        "filename": "src/qt/walletview.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/793b04af6b7e197c74b8d09ab7e100f4732b63b0/src/qt/walletview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/793b04af6b7e197c74b8d09ab7e100f4732b63b0/src/qt/walletview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.cpp?ref=793b04af6b7e197c74b8d09ab7e100f4732b63b0",
        "patch": "@@ -1,3 +1,4 @@\n+// Copyright (c) 2019 The BitcoinV Core developers\n // Copyright (c) 2011-2018 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n@@ -17,6 +18,7 @@\n #include <qt/signverifymessagedialog.h>\n #include <qt/transactiontablemodel.h>\n #include <qt/transactionview.h>\n+#include <qt/minerview.h>\n #include <qt/walletmodel.h>\n \n #include <interfaces/node.h>\n@@ -39,6 +41,17 @@ WalletView::WalletView(const PlatformStyle *_platformStyle, QWidget *parent):\n     // Create tabs\n     overviewPage = new OverviewPage(platformStyle);\n \n+    //--------------------------------------\n+    {\n+    minerPage = new QWidget(this);\n+    QVBoxLayout *vbox = new QVBoxLayout();\n+    QHBoxLayout *hbox_buttons = new QHBoxLayout();\n+    minerView = new MinerView(platformStyle, this);\n+    vbox->addWidget(minerView);\n+\n+    minerPage->setLayout(vbox);\n+    }\n+    //--------------------------------------\n     transactionsPage = new QWidget(this);\n     QVBoxLayout *vbox = new QVBoxLayout();\n     QHBoxLayout *hbox_buttons = new QHBoxLayout();\n@@ -64,6 +77,7 @@ WalletView::WalletView(const PlatformStyle *_platformStyle, QWidget *parent):\n     addWidget(transactionsPage);\n     addWidget(receiveCoinsPage);\n     addWidget(sendCoinsPage);\n+    addWidget(minerPage);\n \n     // Clicking on a transaction on the overview pre-selects the transaction on the transaction history page\n     connect(overviewPage, SIGNAL(transactionClicked(QModelIndex)), transactionView, SLOT(focusTransaction(QModelIndex)));\n@@ -181,6 +195,11 @@ void WalletView::gotoOverviewPage()\n     setCurrentWidget(overviewPage);\n }\n \n+void WalletView::gotoMinerPage()\n+{\n+    setCurrentWidget(minerPage);\n+}\n+\n void WalletView::gotoHistoryPage()\n {\n     setCurrentWidget(transactionsPage);"
      },
      {
        "sha": "24011172db7717fcbd4ebf5f31ac9ad8c78690af",
        "filename": "src/qt/walletview.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/793b04af6b7e197c74b8d09ab7e100f4732b63b0/src/qt/walletview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/793b04af6b7e197c74b8d09ab7e100f4732b63b0/src/qt/walletview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.h?ref=793b04af6b7e197c74b8d09ab7e100f4732b63b0",
        "patch": "@@ -1,3 +1,4 @@\n+// Copyright (c) 2019 The BitcoinV Core developers\n // Copyright (c) 2011-2018 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n@@ -17,6 +18,7 @@ class ReceiveCoinsDialog;\n class SendCoinsDialog;\n class SendCoinsRecipient;\n class TransactionView;\n+class MinerView;\n class WalletModel;\n class AddressBookPage;\n \n@@ -60,20 +62,24 @@ class WalletView : public QStackedWidget\n     WalletModel *walletModel;\n \n     OverviewPage *overviewPage;\n+    QWidget *minerPage;\n     QWidget *transactionsPage;\n     ReceiveCoinsDialog *receiveCoinsPage;\n     SendCoinsDialog *sendCoinsPage;\n     AddressBookPage *usedSendingAddressesPage;\n     AddressBookPage *usedReceivingAddressesPage;\n \n     TransactionView *transactionView;\n+    MinerView *minerView;\n \n     QProgressDialog *progressDialog;\n     const PlatformStyle *platformStyle;\n \n public Q_SLOTS:\n     /** Switch to overview (home) page */\n     void gotoOverviewPage();\n+    /** Switch to Miner page */\n+    void gotoMinerPage();\n     /** Switch to history (transactions) page */\n     void gotoHistoryPage();\n     /** Switch to receive coins page */"
      }
    ]
  },
  {
    "sha": "5dbb5877121b1f8ad15f317498622bb449114268",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZGJiNTg3NzEyMWIxZjhhZDE1ZjMxNzQ5ODYyMmJiNDQ5MTE0MjY4",
    "commit": {
      "author": {
        "name": "BitcoinV",
        "email": "45887994+bitcoinVBR@users.noreply.github.com",
        "date": "2019-01-01T00:04:23Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2019-01-01T00:04:23Z"
      },
      "message": "Merge pull request #2 from bitcoinVBR/easy_miner\n\neasy miner",
      "tree": {
        "sha": "21a81f40b7a2c34801f9d2634dd1fbbc390c8412",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/21a81f40b7a2c34801f9d2634dd1fbbc390c8412"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5dbb5877121b1f8ad15f317498622bb449114268",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcKq6HCRBK7hj4Ov3rIwAAdHIIAISfrixMFk7/eX6ZoPeXeHHu\n/v2jZaufYGQrNI1EoX2617F1xJ6T9FtowS0NKMujnTfFsC3w6weAZ1xD+/F04hrG\nH+4yTRPoA7y+zhgY6QCyuuzpnS350+v1qCWrRFsjUFd6Rx51smK+T6RL+l92GNGK\nZ4Q2HbhN79uDcJZTiIYPPh8muaZMc7MOoGw+qDzcL++O/foPKzW/yhDDY2TSgMts\nY0byEpfvVVM5sHDE1zIs4d3TrhSogaZxTxmIZ7Wuti66nwPhdYqM+7TQJFbjQ+y2\n1t7Mp5SSEMzjMh8zLIF1GaqRH7UkqtcIWEmQ+P8ULbH/yO52dRNRgbsPBLLSZkU=\n=5FwF\n-----END PGP SIGNATURE-----\n",
        "payload": "tree 21a81f40b7a2c34801f9d2634dd1fbbc390c8412\nparent 7a5b7e7d96f20475e8610e63f3b3589e08029e2f\nparent 793b04af6b7e197c74b8d09ab7e100f4732b63b0\nauthor BitcoinV <45887994+bitcoinVBR@users.noreply.github.com> 1546301063 -0600\ncommitter GitHub <noreply@github.com> 1546301063 -0600\n\nMerge pull request #2 from bitcoinVBR/easy_miner\n\neasy miner"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5dbb5877121b1f8ad15f317498622bb449114268",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5dbb5877121b1f8ad15f317498622bb449114268",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5dbb5877121b1f8ad15f317498622bb449114268/comments",
    "author": null,
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7a5b7e7d96f20475e8610e63f3b3589e08029e2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a5b7e7d96f20475e8610e63f3b3589e08029e2f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7a5b7e7d96f20475e8610e63f3b3589e08029e2f"
      },
      {
        "sha": "793b04af6b7e197c74b8d09ab7e100f4732b63b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/793b04af6b7e197c74b8d09ab7e100f4732b63b0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/793b04af6b7e197c74b8d09ab7e100f4732b63b0"
      }
    ],
    "stats": {
      "total": 703,
      "additions": 702,
      "deletions": 1
    },
    "files": [
      {
        "sha": "14472570b410689fd7fcec4f0debdf53ab350af4",
        "filename": ".vscode/settings.json",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5dbb5877121b1f8ad15f317498622bb449114268/.vscode/settings.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5dbb5877121b1f8ad15f317498622bb449114268/.vscode/settings.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.vscode/settings.json?ref=5dbb5877121b1f8ad15f317498622bb449114268",
        "patch": "@@ -62,6 +62,9 @@\n         \"algorithm\": \"cpp\",\n         \"cfenv\": \"cpp\",\n         \"hashtable\": \"cpp\",\n-        \"string\": \"cpp\"\n+        \"string\": \"cpp\",\n+        \"stack\": \"cpp\",\n+        \"variant\": \"cpp\",\n+        \"__split_buffer\": \"cpp\"\n     }\n }\n\\ No newline at end of file"
      },
      {
        "sha": "016851896dc39ec7fea2c8c091d44684d92ce7af",
        "filename": "contrib/bitcoin-qt.pro",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5dbb5877121b1f8ad15f317498622bb449114268/contrib/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5dbb5877121b1f8ad15f317498622bb449114268/contrib/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/bitcoin-qt.pro?ref=5dbb5877121b1f8ad15f317498622bb449114268",
        "patch": "@@ -6,6 +6,7 @@ FORMS += \\\n     ../src/qt/forms/editaddressdialog.ui \\\n     ../src/qt/forms/helpmessagedialog.ui \\\n     ../src/qt/forms/intro.ui \\\n+    ../src/qt/forms/miner.ui \\\n     ../src/qt/forms/openuridialog.ui \\\n     ../src/qt/forms/optionsdialog.ui \\\n     ../src/qt/forms/overviewpage.ui \\"
      },
      {
        "sha": "8e9796fd2943130bddd6268cecf60f6afc806109",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5dbb5877121b1f8ad15f317498622bb449114268/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5dbb5877121b1f8ad15f317498622bb449114268/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=5dbb5877121b1f8ad15f317498622bb449114268",
        "patch": "@@ -1,3 +1,4 @@\n+# Copyright (c) 2019 The BitcoinV Core developers\n # Copyright (c) 2013-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n@@ -132,6 +133,7 @@ QT_MOC_CPP = \\\n   qt/moc_intro.cpp \\\n   qt/moc_macdockiconhandler.cpp \\\n   qt/moc_macnotificationhandler.cpp \\\n+  qt/moc_minerview.cpp \\ \n   qt/moc_modaloverlay.cpp \\\n   qt/moc_notificator.cpp \\\n   qt/moc_openuridialog.cpp \\\n@@ -202,6 +204,7 @@ BITCOIN_QT_H = \\\n   qt/intro.h \\\n   qt/macdockiconhandler.h \\\n   qt/macnotificationhandler.h \\\n+  qt/minerview.h \\\n   qt/modaloverlay.h \\\n   qt/networkstyle.h \\\n   qt/notificator.h \\\n@@ -328,6 +331,7 @@ BITCOIN_QT_WALLET_CPP = \\\n   qt/coincontroldialog.cpp \\\n   qt/coincontroltreewidget.cpp \\\n   qt/editaddressdialog.cpp \\\n+  qt/minerview.cpp \\\n   qt/openuridialog.cpp \\\n   qt/overviewpage.cpp \\\n   qt/paymentrequestplus.cpp \\"
      },
      {
        "sha": "37b1e1676986dd53de08ec2c07bfcd2f4c290e0f",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5dbb5877121b1f8ad15f317498622bb449114268/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5dbb5877121b1f8ad15f317498622bb449114268/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=5dbb5877121b1f8ad15f317498622bb449114268",
        "patch": "@@ -1,3 +1,4 @@\n+// Copyright (c) 2019 The BitcoinV Core developers\n // Copyright (c) 2018 The BitcoinV Core developers\n // Copyright (c) 2011-2018 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n@@ -263,6 +264,13 @@ void BitcoinGUI::createActions()\n     historyAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_4));\n     tabGroup->addAction(historyAction);\n \n+    minerAction = new QAction(platformStyle->SingleColorIcon(\":/icons/tx_mined\"), tr(\"&Miner\"), this);\n+    minerAction->setStatusTip(tr(\"Easy miner\"));\n+    minerAction->setToolTip(minerAction->statusTip());\n+    minerAction->setCheckable(true);\n+    minerAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_C));\n+    tabGroup->addAction(minerAction);\n+\n #ifdef ENABLE_WALLET\n     // These showNormalIfMinimized are needed because Send Coins and Receive Coins\n     // can be triggered from the tray menu, and need to show the GUI to be useful.\n@@ -278,6 +286,7 @@ void BitcoinGUI::createActions()\n     connect(receiveCoinsMenuAction, SIGNAL(triggered()), this, SLOT(gotoReceiveCoinsPage()));\n     connect(historyAction, SIGNAL(triggered()), this, SLOT(showNormalIfMinimized()));\n     connect(historyAction, SIGNAL(triggered()), this, SLOT(gotoHistoryPage()));\n+    connect(minerAction, SIGNAL(triggered()), this, SLOT(gotoMinerPage())); // this triggers the mine pane to show when miner icon is clicked\n #endif // ENABLE_WALLET\n \n     quitAction = new QAction(platformStyle->TextColorIcon(\":/icons/quit\"), tr(\"E&xit\"), this);\n@@ -413,6 +422,7 @@ void BitcoinGUI::createToolBars()\n         toolbar->addAction(sendCoinsAction);\n         toolbar->addAction(receiveCoinsAction);\n         toolbar->addAction(historyAction);\n+        toolbar->addAction(minerAction); // This makes the tab appear on the GUI\n         overviewAction->setChecked(true);\n \n #ifdef ENABLE_WALLET\n@@ -688,6 +698,12 @@ void BitcoinGUI::gotoOverviewPage()\n     if (walletFrame) walletFrame->gotoOverviewPage();\n }\n \n+void BitcoinGUI::gotoMinerPage()\n+{\n+    minerAction->setChecked(true);\n+    if (walletFrame) walletFrame->gotoMinerPage();\n+}\n+\n void BitcoinGUI::gotoHistoryPage()\n {\n     historyAction->setChecked(true);"
      },
      {
        "sha": "f6ae4687658b53fe8f247976a8fe03bcaa06cc4c",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5dbb5877121b1f8ad15f317498622bb449114268/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5dbb5877121b1f8ad15f317498622bb449114268/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=5dbb5877121b1f8ad15f317498622bb449114268",
        "patch": "@@ -1,3 +1,4 @@\n+// Copyright (c) 2019 The BitcoinV Core developers\n // Copyright (c) 2011-2018 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n@@ -103,6 +104,7 @@ class BitcoinGUI : public QMainWindow\n     QMenuBar* appMenuBar = nullptr;\n     QToolBar* appToolBar = nullptr;\n     QAction* overviewAction = nullptr;\n+    QAction* minerAction = nullptr;\n     QAction* historyAction = nullptr;\n     QAction* quitAction = nullptr;\n     QAction* sendCoinsAction = nullptr;\n@@ -222,6 +224,8 @@ private Q_SLOTS:\n #ifdef ENABLE_WALLET\n     /** Switch to overview (home) page */\n     void gotoOverviewPage();\n+    /** Switch to miner page */\n+    void gotoMinerPage();\n     /** Switch to history (transactions) page */\n     void gotoHistoryPage();\n     /** Switch to receive coins page */"
      },
      {
        "sha": "20c5e3b9885ee8d17e385fa540270f07cf4f1076",
        "filename": "src/qt/forms/miner.ui",
        "status": "added",
        "additions": 293,
        "deletions": 0,
        "changes": 293,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5dbb5877121b1f8ad15f317498622bb449114268/src/qt/forms/miner.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5dbb5877121b1f8ad15f317498622bb449114268/src/qt/forms/miner.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/miner.ui?ref=5dbb5877121b1f8ad15f317498622bb449114268",
        "patch": "@@ -0,0 +1,293 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<ui version=\"4.0\">\n+ <class>Miner</class>\n+ <widget class=\"QDialog\" name=\"Intro\">\n+  <property name=\"geometry\">\n+   <rect>\n+    <x>0</x>\n+    <y>0</y>\n+    <width>674</width>\n+    <height>415</height>\n+   </rect>\n+  </property>\n+  <property name=\"windowTitle\">\n+   <string>Welcome</string>\n+  </property>\n+  <layout class=\"QVBoxLayout\" name=\"verticalLayout\">\n+   <item>\n+    <widget class=\"QLabel\" name=\"welcomeLabel\">\n+     <property name=\"styleSheet\">\n+      <string notr=\"true\">QLabel { font-style:italic; }</string>\n+     </property>\n+     <property name=\"text\">\n+      <string>Welcome to %1.</string>\n+     </property>\n+     <property name=\"wordWrap\">\n+      <bool>true</bool>\n+     </property>\n+    </widget>\n+   </item>\n+   <item>\n+    <spacer name=\"verticalSpacer_4\">\n+     <property name=\"orientation\">\n+      <enum>Qt::Vertical</enum>\n+     </property>\n+     <property name=\"sizeType\">\n+      <enum>QSizePolicy::Minimum</enum>\n+     </property>\n+     <property name=\"sizeHint\" stdset=\"0\">\n+      <size>\n+       <width>20</width>\n+       <height>15</height>\n+      </size>\n+     </property>\n+    </spacer>\n+   </item>\n+   <item>\n+    <widget class=\"QLabel\" name=\"storageLabel\">\n+     <property name=\"text\">\n+      <string>As this is the first time the program is launched, you can choose where %1 will store its data.</string>\n+     </property>\n+     <property name=\"wordWrap\">\n+      <bool>true</bool>\n+     </property>\n+    </widget>\n+   </item>\n+   <item>\n+    <widget class=\"QLabel\" name=\"sizeWarningLabel\">\n+     <property name=\"wordWrap\">\n+      <bool>true</bool>\n+     </property>\n+    </widget>\n+   </item>\n+   <item>\n+    <widget class=\"QRadioButton\" name=\"dataDirDefault\">\n+     <property name=\"text\">\n+      <string>Use the default data directory</string>\n+     </property>\n+    </widget>\n+   </item>\n+   <item>\n+    <widget class=\"QRadioButton\" name=\"dataDirCustom\">\n+     <property name=\"text\">\n+      <string>Use a custom data directory:</string>\n+     </property>\n+    </widget>\n+   </item>\n+   <item>\n+    <layout class=\"QHBoxLayout\" name=\"horizontalLayout\">\n+     <property name=\"spacing\">\n+      <number>0</number>\n+     </property>\n+     <property name=\"sizeConstraint\">\n+      <enum>QLayout::SetDefaultConstraint</enum>\n+     </property>\n+     <item>\n+      <spacer name=\"horizontalSpacer\">\n+       <property name=\"orientation\">\n+        <enum>Qt::Horizontal</enum>\n+       </property>\n+       <property name=\"sizeType\">\n+        <enum>QSizePolicy::Fixed</enum>\n+       </property>\n+       <property name=\"sizeHint\" stdset=\"0\">\n+        <size>\n+         <width>60</width>\n+         <height>20</height>\n+        </size>\n+       </property>\n+      </spacer>\n+     </item>\n+     <item>\n+      <layout class=\"QVBoxLayout\" name=\"verticalLayout_2\">\n+       <property name=\"sizeConstraint\">\n+        <enum>QLayout::SetDefaultConstraint</enum>\n+       </property>\n+       <item>\n+        <layout class=\"QHBoxLayout\" name=\"horizontalLayout_2\">\n+         <item>\n+          <widget class=\"QLineEdit\" name=\"dataDirectory\"/>\n+         </item>\n+         <item>\n+          <widget class=\"QPushButton\" name=\"ellipsisButton\">\n+           <property name=\"sizePolicy\">\n+            <sizepolicy hsizetype=\"Minimum\" vsizetype=\"Fixed\">\n+             <horstretch>0</horstretch>\n+             <verstretch>0</verstretch>\n+            </sizepolicy>\n+           </property>\n+           <property name=\"maximumSize\">\n+            <size>\n+             <width>30</width>\n+             <height>16777215</height>\n+            </size>\n+           </property>\n+           <property name=\"text\">\n+            <string notr=\"true\">\u2026</string>\n+           </property>\n+           <property name=\"autoDefault\">\n+            <bool>false</bool>\n+           </property>\n+          </widget>\n+         </item>\n+        </layout>\n+       </item>\n+       <item>\n+        <spacer name=\"verticalSpacer_3\">\n+         <property name=\"orientation\">\n+          <enum>Qt::Vertical</enum>\n+         </property>\n+         <property name=\"sizeType\">\n+          <enum>QSizePolicy::Fixed</enum>\n+         </property>\n+         <property name=\"sizeHint\" stdset=\"0\">\n+          <size>\n+           <width>20</width>\n+           <height>5</height>\n+          </size>\n+         </property>\n+        </spacer>\n+       </item>\n+       <item>\n+        <widget class=\"QLabel\" name=\"freeSpace\">\n+         <property name=\"sizePolicy\">\n+          <sizepolicy hsizetype=\"Preferred\" vsizetype=\"Expanding\">\n+           <horstretch>1</horstretch>\n+           <verstretch>0</verstretch>\n+          </sizepolicy>\n+         </property>\n+         <property name=\"text\">\n+          <string/>\n+         </property>\n+         <property name=\"wordWrap\">\n+          <bool>true</bool>\n+         </property>\n+        </widget>\n+       </item>\n+       <item>\n+        <spacer name=\"verticalSpacer_2\">\n+         <property name=\"orientation\">\n+          <enum>Qt::Vertical</enum>\n+         </property>\n+         <property name=\"sizeType\">\n+          <enum>QSizePolicy::Fixed</enum>\n+         </property>\n+         <property name=\"sizeHint\" stdset=\"0\">\n+          <size>\n+           <width>20</width>\n+           <height>5</height>\n+          </size>\n+         </property>\n+        </spacer>\n+       </item>\n+       <item>\n+        <widget class=\"QLabel\" name=\"errorMessage\">\n+         <property name=\"sizePolicy\">\n+          <sizepolicy hsizetype=\"Preferred\" vsizetype=\"Expanding\">\n+           <horstretch>0</horstretch>\n+           <verstretch>0</verstretch>\n+          </sizepolicy>\n+         </property>\n+         <property name=\"textFormat\">\n+          <enum>Qt::RichText</enum>\n+         </property>\n+         <property name=\"wordWrap\">\n+          <bool>true</bool>\n+         </property>\n+        </widget>\n+       </item>\n+      </layout>\n+     </item>\n+    </layout>\n+   </item>\n+   <item>\n+    <widget class=\"QLabel\" name=\"lblExplanation1\">\n+     <property name=\"text\">\n+      <string>When you click OK, %1 will begin to download and process the full %4 block chain (%2GB) starting with the earliest transactions in %3 when %4 initially launched.</string>\n+     </property>\n+     <property name=\"wordWrap\">\n+      <bool>true</bool>\n+     </property>\n+    </widget>\n+   </item>\n+   <item>\n+    <widget class=\"QLabel\" name=\"lblExplanation2\">\n+     <property name=\"text\">\n+      <string>This initial synchronisation is very demanding, and may expose hardware problems with your computer that had previously gone unnoticed. Each time you run %1, it will continue downloading where it left off.</string>\n+     </property>\n+     <property name=\"wordWrap\">\n+      <bool>true</bool>\n+     </property>\n+    </widget>\n+   </item>\n+   <item>\n+    <widget class=\"QLabel\" name=\"lblExplanation3\">\n+     <property name=\"text\">\n+      <string>If you have chosen to limit block chain storage (pruning), the historical data must still be downloaded and processed, but will be deleted afterward to keep your disk usage low.</string>\n+     </property>\n+     <property name=\"wordWrap\">\n+      <bool>true</bool>\n+     </property>\n+    </widget>\n+   </item>\n+   <item>\n+    <spacer name=\"verticalSpacer\">\n+     <property name=\"orientation\">\n+      <enum>Qt::Vertical</enum>\n+     </property>\n+     <property name=\"sizeHint\" stdset=\"0\">\n+      <size>\n+       <width>20</width>\n+       <height>40</height>\n+      </size>\n+     </property>\n+    </spacer>\n+   </item>\n+   <item>\n+    <widget class=\"QDialogButtonBox\" name=\"buttonBox\">\n+     <property name=\"orientation\">\n+      <enum>Qt::Horizontal</enum>\n+     </property>\n+     <property name=\"standardButtons\">\n+      <set>QDialogButtonBox::Cancel|QDialogButtonBox::Ok</set>\n+     </property>\n+    </widget>\n+   </item>\n+  </layout>\n+ </widget>\n+ <resources/>\n+ <connections>\n+  <connection>\n+   <sender>buttonBox</sender>\n+   <signal>accepted()</signal>\n+   <receiver>Intro</receiver>\n+   <slot>accept()</slot>\n+   <hints>\n+    <hint type=\"sourcelabel\">\n+     <x>20</x>\n+     <y>20</y>\n+    </hint>\n+    <hint type=\"destinationlabel\">\n+     <x>20</x>\n+     <y>20</y>\n+    </hint>\n+   </hints>\n+  </connection>\n+  <connection>\n+   <sender>buttonBox</sender>\n+   <signal>rejected()</signal>\n+   <receiver>Intro</receiver>\n+   <slot>reject()</slot>\n+   <hints>\n+    <hint type=\"sourcelabel\">\n+     <x>20</x>\n+     <y>20</y>\n+    </hint>\n+    <hint type=\"destinationlabel\">\n+     <x>20</x>\n+     <y>20</y>\n+    </hint>\n+   </hints>\n+  </connection>\n+ </connections>\n+</ui>"
      },
      {
        "sha": "525fcdde5c091136a3a3dafe4b4e2c334ff04385",
        "filename": "src/qt/minerview.cpp",
        "status": "added",
        "additions": 270,
        "deletions": 0,
        "changes": 270,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5dbb5877121b1f8ad15f317498622bb449114268/src/qt/minerview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5dbb5877121b1f8ad15f317498622bb449114268/src/qt/minerview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/minerview.cpp?ref=5dbb5877121b1f8ad15f317498622bb449114268",
        "patch": "@@ -0,0 +1,270 @@\n+// Copyright (c) 2019 The BitcoinV Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <qt/minerview.h>\n+\n+#include <qt/addresstablemodel.h>\n+#include <qt/bitcoinunits.h>\n+#include <qt/csvmodelwriter.h>\n+#include <qt/editaddressdialog.h>\n+#include <qt/optionsmodel.h>\n+#include <qt/platformstyle.h>\n+#include <qt/sendcoinsdialog.h>\n+#include <qt/transactiondescdialog.h>\n+#include <qt/transactionfilterproxy.h>\n+#include <qt/transactionrecord.h>\n+#include <qt/transactiontablemodel.h>\n+#include <qt/walletmodel.h>\n+\n+#include <ui_interface.h>\n+\n+#include <QComboBox>\n+#include <QDateTimeEdit>\n+#include <QDesktopServices>\n+#include <QDoubleValidator>\n+#include <QHBoxLayout>\n+#include <QHeaderView>\n+#include <QLabel>\n+#include <QLineEdit>\n+#include <QMenu>\n+#include <QPoint>\n+#include <QScrollBar>\n+#include <QSignalMapper>\n+#include <QTableView>\n+#include <QTimer>\n+#include <QUrl>\n+#include <QVBoxLayout>\n+#include <QTextEdit>\n+\n+#include <rpc/server.h>\n+#include <rpc/client.h>\n+#include <univalue/include/univalue.h>\n+\n+#include <pthread.h>\n+#include <stdio.h>\n+#include <atomic>\n+#include <thread>\n+#include <unistd.h>\n+\n+MinerView::MinerView(const PlatformStyle *platformStyle, QWidget *parent) :\n+    QWidget(parent), m_minerView(0), m_mining_active{false},\n+    m_mining_type{STANDARD}\n+{\n+    // Build filter row\n+    setContentsMargins(0,0,0,0);\n+\n+    QHBoxLayout *hlayout = new QHBoxLayout();\n+    hlayout->setContentsMargins(0,0,0,0);\n+\n+    if (platformStyle->getUseExtraSpacing()) {\n+        hlayout->setSpacing(5);\n+        hlayout->addSpacing(26);\n+    } else {\n+        hlayout->setSpacing(0);\n+        hlayout->addSpacing(23);\n+    }\n+\n+\n+    m_mine_type = new QComboBox(this);\n+    if (platformStyle->getUseExtraSpacing()) {\n+        m_mine_type->setFixedWidth(251);\n+    } else {\n+        m_mine_type->setFixedWidth(250);\n+    }\n+    m_mine_type->addItem(tr(\"Mine Standard Block Rewards\"), STANDARD);\n+    m_mine_type->addItem(tr(\"Mine Random Block Rewards\"), RANDOM_BLOCK_REWARD);\n+    m_mine_type->addItem(tr(\"Mine JACKPOT Block Rewards\"), JACKPOT_BLOCK_REWARD);\n+    hlayout->addWidget(m_mine_type);\n+\n+\n+\n+    // Delay before filtering transactions in ms\n+    static const int input_filter_delay = 200;\n+\n+\n+    QVBoxLayout *vlayout = new QVBoxLayout(this);\n+    vlayout->setContentsMargins(0,0,0,0);\n+    vlayout->setSpacing(0);\n+\n+    //QTableView *view = new QTableView(this);\n+    m_minerView = new QTextEdit();\n+\n+\n+    vlayout->addLayout(hlayout);\n+    vlayout->addWidget(m_minerView);\n+    vlayout->setSpacing(0);\n+\n+\n+\n+    m_minerView->installEventFilter(this);\n+\n+\n+    m_minerView->setObjectName(\"minerView\");\n+\n+    // Create the button, make \"this\" the parent\n+    m_button = new QPushButton(\"START\", this);\n+    // set size and location of the button\n+    m_button->setGeometry(QRect(QPoint(100, 100), QSize(200, 50)));\n+    m_button->setFixedWidth(150);\n+\n+    hlayout->addWidget(m_button);\n+ \n+    // Connect button signal to appropriate slot\n+    connect(m_button, SIGNAL (released()), this, SLOT (handleButton()));\n+\n+    connect(m_mine_type, SIGNAL (activated(int)), this, SLOT (handleMineType(int)));\n+\n+}\n+\n+\n+std::atomic<bool> stop_mining(false);\n+\n+void* mining_thread_gui(void* params);\n+void* mining_thread_gui(void* params)\n+{\n+    MinerView::Mining_Type_t mining_type =  *((MinerView::Mining_Type_t*)params);\n+\n+\n+    std::vector<std::string> strParams;\n+    bool is_random_enabled = false;\n+\n+    if ( MinerView::RANDOM_BLOCK_REWARD == mining_type )\n+    {\n+        strParams.push_back(std::string(\"1\"));\n+        is_random_enabled = true;\n+    }\n+    else if ( MinerView::JACKPOT_BLOCK_REWARD == mining_type )\n+    {\n+        strParams.push_back(std::string(\"1\"));\n+        strParams.push_back(std::string(\"10000000\"));\n+        uint32_t million = 1<<20;\n+        \n+        strParams.push_back(std::string(std::to_string(million)));\n+    }\n+    else\n+    {\n+        // default to standard\n+        strParams.push_back(std::string(\"1\"));\n+        strParams.push_back(std::string(\"10000000\"));\n+    }\n+\n+    UniValue par = RPCConvertValues(std::string(\"generate\"), strParams);\n+\n+    stop_mining = false;\n+    JSONRPCRequest req;\n+    req.params = par;\n+    req.strMethod = \"generate\";\n+    req.URI = \"/wallet/\";\n+\n+    uint32_t n = 0;\n+\n+    while ( true ) {\n+\n+        // RPC call to do the mining\n+        ::tableRPC.execute(req);\n+\n+        std::cout << \"running...\" << std::endl;\n+\n+\n+        if (true == stop_mining) {\n+            break;\n+        }\n+\n+        if (is_random_enabled)\n+        {\n+            std::vector<std::string> strParams;\n+\n+\n+            strParams.push_back(std::string(\"1\"));\n+            strParams.push_back(std::string(\"10000000\"));\n+            strParams.push_back(std::to_string(1<<n));\n+\n+            UniValue par = RPCConvertValues(std::string(\"generate\"), strParams);\n+\n+            req.params = par;\n+            req.strMethod = \"generate\";\n+            req.URI = \"/wallet/\";\n+\n+            // don't go more than a million times the block reward, the blockchain won't accept it if you do.\n+            n = (n+1)%20;\n+        }\n+\n+    }\n+\n+\n+    pthread_exit((void*)(nullptr));\n+\n+}\n+\n+void start_mining( JSONRPCRequest* mining_params )\n+{\n+    void* status = 0;\n+\n+    pthread_t tids[1];\n+    std::cout << \"Mining started \" << std::endl;\n+\n+    pthread_create(&tids[0], NULL, mining_thread_gui, (void *)mining_params);\n+\n+    return;\n+}\n+\n+\n+ void MinerView::handleButton()\n+ {\n+     \n+     if (m_mining_active)\n+     {\n+        // stop mining\n+        stop_mining = true;\n+\n+        // now the user needs to see the START button\n+        m_button->setText(\"START\");\n+     }\n+     else\n+     {\n+         // start mining\n+        if ( RANDOM_BLOCK_REWARD == m_mining_type )\n+        {\n+            m_minerView->setText(\"Mining for a RANDOM BLOCK REWARD\");\n+            m_minerView->show();\n+        }\n+        else if ( JACKPOT_BLOCK_REWARD == m_mining_type )\n+        {\n+            m_minerView->setText(\"Mining for the JACKPOT BLOCK REWARD\");\n+            m_minerView->show();\n+        }\n+        else\n+        {\n+            // default to standard\n+            m_mining_type = STANDARD;\n+            m_minerView->setText(\"Mining for the STANDARD BLOCK REWARD\");\n+            m_minerView->show();\n+        }\n+\n+        stop_mining = false;\n+\n+        // now the user needs to see the STOP button\n+        m_button->setText(\"STOP\");\n+\n+\n+        //// Start the thread to do the mining.\n+        pthread_t tids[1];\n+        pthread_create(&tids[0], NULL, mining_thread_gui, (void *)&m_mining_type);\n+\n+\n+     }\n+\n+     m_mining_active = !m_mining_active;\n+     \n+ }\n+\n+void MinerView::handleMineType(int type)\n+{\n+    if (type >=0 && type <= 2)\n+    {\n+        m_mining_type = (Mining_Type_t)type;\n+    }\n+\n+    return;\n+}"
      },
      {
        "sha": "3608ed68533b4f79a5efce568505bde56733f526",
        "filename": "src/qt/minerview.h",
        "status": "added",
        "additions": 74,
        "deletions": 0,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5dbb5877121b1f8ad15f317498622bb449114268/src/qt/minerview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5dbb5877121b1f8ad15f317498622bb449114268/src/qt/minerview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/minerview.h?ref=5dbb5877121b1f8ad15f317498622bb449114268",
        "patch": "@@ -0,0 +1,74 @@\n+// Copyright (c) 2019 The BitcoinV Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_QT_MINERVIEW_H\n+#define BITCOIN_QT_MINERVIEW_H\n+\n+#include <qt/guiutil.h>\n+\n+#include <uint256.h>\n+\n+#include <QWidget>\n+#include <QKeyEvent>\n+\n+ #include <QMainWindow>\n+ #include <QPushButton>\n+ #include <QTextEdit>\n+\n+class PlatformStyle;\n+class TransactionFilterProxy;\n+class WalletModel;\n+\n+QT_BEGIN_NAMESPACE\n+class QComboBox;\n+class QDateTimeEdit;\n+class QFrame;\n+class QLineEdit;\n+class QMenu;\n+class QModelIndex;\n+class QSignalMapper;\n+class QTableView;\n+QT_END_NAMESPACE\n+\n+/** Widget showing the transaction list for a wallet, including a filter row.\n+    Using the filter row, the user can view or export a subset of the transactions.\n+  */\n+class MinerView : public QWidget\n+{\n+    Q_OBJECT\n+\n+public:\n+    explicit MinerView(const PlatformStyle *platformStyle, QWidget *parent = 0);\n+\n+   void setModel(WalletModel *model);\n+\n+    // Date ranges for filter\n+    enum Mining_Type_t\n+    {\n+        STANDARD,\n+        RANDOM_BLOCK_REWARD,\n+        JACKPOT_BLOCK_REWARD,\n+    };\n+\n+\n+\n+ private Q_SLOTS:\n+    void handleButton();\n+    void handleMineType(int);\n+\n+\n+ private:\n+ \n+    QTextEdit *m_minerView;\n+\n+    QPushButton *m_button;\n+    bool m_mining_active;\n+\n+    QComboBox *m_mine_type;\n+\n+    Mining_Type_t m_mining_type;\n+\n+};\n+\n+#endif // BITCOIN_QT_MINERVIEW_H"
      },
      {
        "sha": "93f9ec1a937f062ab6cc5176432edbfa2eb091d1",
        "filename": "src/qt/res/icons/bitcoin.ico",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5dbb5877121b1f8ad15f317498622bb449114268/src/qt/res/icons/bitcoin.ico",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5dbb5877121b1f8ad15f317498622bb449114268/src/qt/res/icons/bitcoin.ico",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/bitcoin.ico?ref=5dbb5877121b1f8ad15f317498622bb449114268"
      },
      {
        "sha": "8c0e8cddbdf0383c4b914102c0088ca7ec3c5eed",
        "filename": "src/qt/walletframe.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5dbb5877121b1f8ad15f317498622bb449114268/src/qt/walletframe.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5dbb5877121b1f8ad15f317498622bb449114268/src/qt/walletframe.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletframe.cpp?ref=5dbb5877121b1f8ad15f317498622bb449114268",
        "patch": "@@ -1,3 +1,4 @@\n+// Copyright (c) 2019 The BitcoinV Core developers\n // Copyright (c) 2011-2018 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n@@ -130,6 +131,13 @@ void WalletFrame::gotoOverviewPage()\n         i.value()->gotoOverviewPage();\n }\n \n+void WalletFrame::gotoMinerPage()\n+{\n+    QMap<QString, WalletView*>::const_iterator i;\n+    for (i = mapWalletViews.constBegin(); i != mapWalletViews.constEnd(); ++i)\n+        i.value()->gotoMinerPage();\n+}\n+\n void WalletFrame::gotoHistoryPage()\n {\n     QMap<QString, WalletView*>::const_iterator i;"
      },
      {
        "sha": "548f3e45edf25fa7877096a92016969753e63cae",
        "filename": "src/qt/walletframe.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5dbb5877121b1f8ad15f317498622bb449114268/src/qt/walletframe.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5dbb5877121b1f8ad15f317498622bb449114268/src/qt/walletframe.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletframe.h?ref=5dbb5877121b1f8ad15f317498622bb449114268",
        "patch": "@@ -1,3 +1,4 @@\n+// Copyright (c) 2019 The BitcoinV Core developers\n // Copyright (c) 2011-2017 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n@@ -65,6 +66,8 @@ class WalletFrame : public QFrame\n public Q_SLOTS:\n     /** Switch to overview (home) page */\n     void gotoOverviewPage();\n+    /** Switch to Miner page */\n+    void gotoMinerPage();\n     /** Switch to history (transactions) page */\n     void gotoHistoryPage();\n     /** Switch to receive coins page */"
      },
      {
        "sha": "4abb99e5cb7485577505f33b0a75d754fd2d95e3",
        "filename": "src/qt/walletview.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5dbb5877121b1f8ad15f317498622bb449114268/src/qt/walletview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5dbb5877121b1f8ad15f317498622bb449114268/src/qt/walletview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.cpp?ref=5dbb5877121b1f8ad15f317498622bb449114268",
        "patch": "@@ -1,3 +1,4 @@\n+// Copyright (c) 2019 The BitcoinV Core developers\n // Copyright (c) 2011-2018 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n@@ -17,6 +18,7 @@\n #include <qt/signverifymessagedialog.h>\n #include <qt/transactiontablemodel.h>\n #include <qt/transactionview.h>\n+#include <qt/minerview.h>\n #include <qt/walletmodel.h>\n \n #include <interfaces/node.h>\n@@ -39,6 +41,17 @@ WalletView::WalletView(const PlatformStyle *_platformStyle, QWidget *parent):\n     // Create tabs\n     overviewPage = new OverviewPage(platformStyle);\n \n+    //--------------------------------------\n+    {\n+    minerPage = new QWidget(this);\n+    QVBoxLayout *vbox = new QVBoxLayout();\n+    QHBoxLayout *hbox_buttons = new QHBoxLayout();\n+    minerView = new MinerView(platformStyle, this);\n+    vbox->addWidget(minerView);\n+\n+    minerPage->setLayout(vbox);\n+    }\n+    //--------------------------------------\n     transactionsPage = new QWidget(this);\n     QVBoxLayout *vbox = new QVBoxLayout();\n     QHBoxLayout *hbox_buttons = new QHBoxLayout();\n@@ -64,6 +77,7 @@ WalletView::WalletView(const PlatformStyle *_platformStyle, QWidget *parent):\n     addWidget(transactionsPage);\n     addWidget(receiveCoinsPage);\n     addWidget(sendCoinsPage);\n+    addWidget(minerPage);\n \n     // Clicking on a transaction on the overview pre-selects the transaction on the transaction history page\n     connect(overviewPage, SIGNAL(transactionClicked(QModelIndex)), transactionView, SLOT(focusTransaction(QModelIndex)));\n@@ -181,6 +195,11 @@ void WalletView::gotoOverviewPage()\n     setCurrentWidget(overviewPage);\n }\n \n+void WalletView::gotoMinerPage()\n+{\n+    setCurrentWidget(minerPage);\n+}\n+\n void WalletView::gotoHistoryPage()\n {\n     setCurrentWidget(transactionsPage);"
      },
      {
        "sha": "24011172db7717fcbd4ebf5f31ac9ad8c78690af",
        "filename": "src/qt/walletview.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5dbb5877121b1f8ad15f317498622bb449114268/src/qt/walletview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5dbb5877121b1f8ad15f317498622bb449114268/src/qt/walletview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.h?ref=5dbb5877121b1f8ad15f317498622bb449114268",
        "patch": "@@ -1,3 +1,4 @@\n+// Copyright (c) 2019 The BitcoinV Core developers\n // Copyright (c) 2011-2018 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n@@ -17,6 +18,7 @@ class ReceiveCoinsDialog;\n class SendCoinsDialog;\n class SendCoinsRecipient;\n class TransactionView;\n+class MinerView;\n class WalletModel;\n class AddressBookPage;\n \n@@ -60,20 +62,24 @@ class WalletView : public QStackedWidget\n     WalletModel *walletModel;\n \n     OverviewPage *overviewPage;\n+    QWidget *minerPage;\n     QWidget *transactionsPage;\n     ReceiveCoinsDialog *receiveCoinsPage;\n     SendCoinsDialog *sendCoinsPage;\n     AddressBookPage *usedSendingAddressesPage;\n     AddressBookPage *usedReceivingAddressesPage;\n \n     TransactionView *transactionView;\n+    MinerView *minerView;\n \n     QProgressDialog *progressDialog;\n     const PlatformStyle *platformStyle;\n \n public Q_SLOTS:\n     /** Switch to overview (home) page */\n     void gotoOverviewPage();\n+    /** Switch to Miner page */\n+    void gotoMinerPage();\n     /** Switch to history (transactions) page */\n     void gotoHistoryPage();\n     /** Switch to receive coins page */"
      }
    ]
  },
  {
    "sha": "9a96df276762b06e463006afd74379e338ca5023",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YTk2ZGYyNzY3NjJiMDZlNDYzMDA2YWZkNzQzNzllMzM4Y2E1MDIz",
    "commit": {
      "author": {
        "name": "NullFunctor",
        "email": "nullfunctor@bitcoinv.org",
        "date": "2019-01-01T04:10:40Z"
      },
      "committer": {
        "name": "NullFunctor",
        "email": "nullfunctor@bitcoinv.org",
        "date": "2019-01-01T04:10:40Z"
      },
      "message": "difficulty adjustment",
      "tree": {
        "sha": "76b11f5c64ee9f7cd30d5a7fadf1466b5b997739",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/76b11f5c64ee9f7cd30d5a7fadf1466b5b997739"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9a96df276762b06e463006afd74379e338ca5023",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a96df276762b06e463006afd74379e338ca5023",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9a96df276762b06e463006afd74379e338ca5023",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a96df276762b06e463006afd74379e338ca5023/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "793b04af6b7e197c74b8d09ab7e100f4732b63b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/793b04af6b7e197c74b8d09ab7e100f4732b63b0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/793b04af6b7e197c74b8d09ab7e100f4732b63b0"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "2cb1c7c69fc504bc70fd865153dc9a8508d62e86",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a96df276762b06e463006afd74379e338ca5023/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a96df276762b06e463006afd74379e338ca5023/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=9a96df276762b06e463006afd74379e338ca5023",
        "patch": "@@ -86,7 +86,7 @@ class CMainParams : public CChainParams {\n         consensus.BIP65Height = 388381; // 000000000000000004c2b624ed5d7756c508d90fd0da2c7c679febfa6c4735f0\n         consensus.BIP66Height = 363725; // 00000000000000000379eaa19dce8c9b722d46ae6a57c2f1a988119488b50931\n         consensus.powLimit = uint256S(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n-        consensus.nPowTargetTimespan = 10 * 60; // difficulty update time in seconds\n+        consensus.nPowTargetTimespan = 24 * 60 * 60; // difficulty update time in seconds\n         consensus.nPowTargetSpacing = 1 * 60; // block time in seconds\n         consensus.fPowAllowMinDifficultyBlocks = false;\n         consensus.fPowNoRetargeting = false;"
      }
    ]
  },
  {
    "sha": "5bebb64d98f53973242e0b83648c1ba936673de9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YmViYjY0ZDk4ZjUzOTczMjQyZTBiODM2NDhjMWJhOTM2NjczZGU5",
    "commit": {
      "author": {
        "name": "BitcoinV",
        "email": "45887994+bitcoinVBR@users.noreply.github.com",
        "date": "2019-01-01T04:11:38Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2019-01-01T04:11:38Z"
      },
      "message": "Merge pull request #3 from bitcoinVBR/easy_miner\n\ndifficulty adjustment",
      "tree": {
        "sha": "76b11f5c64ee9f7cd30d5a7fadf1466b5b997739",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/76b11f5c64ee9f7cd30d5a7fadf1466b5b997739"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5bebb64d98f53973242e0b83648c1ba936673de9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcKuh6CRBK7hj4Ov3rIwAAdHIIAE/zZFiPwdj6ZOOPh+SdqUQt\nX5W4vP6MJp3Ey8CTCNrvVhLtadEEP6KmgMff+aKYh9LG9VzV2PlmOuM8hirPwoox\nRxoik1MiZbO3Sl72iiQVTtpkqgv+9vH+/vdZu2rcQoARZqQNVc65UHL+2ao8ECiQ\nxlvM1sxDirvWVFIcLHGOJoJb+9jT5+hgPsOyydw/PLU6cdcHqmKtnpj3yv9Q6dmk\nscFPtwO5yfSyD7pP/NEfZqKi/kKQ4+JD25QzEBbsqGDApWzq6vNhQ7eJPSkrVfch\n/TTKX4uc+24HrX59jS5DmTiNajri2gv/NpSda9pUJYuBlfhXdrRhQEbPBmLAoG4=\n=Ba+7\n-----END PGP SIGNATURE-----\n",
        "payload": "tree 76b11f5c64ee9f7cd30d5a7fadf1466b5b997739\nparent 5dbb5877121b1f8ad15f317498622bb449114268\nparent 9a96df276762b06e463006afd74379e338ca5023\nauthor BitcoinV <45887994+bitcoinVBR@users.noreply.github.com> 1546315898 -0600\ncommitter GitHub <noreply@github.com> 1546315898 -0600\n\nMerge pull request #3 from bitcoinVBR/easy_miner\n\ndifficulty adjustment"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bebb64d98f53973242e0b83648c1ba936673de9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5bebb64d98f53973242e0b83648c1ba936673de9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bebb64d98f53973242e0b83648c1ba936673de9/comments",
    "author": null,
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5dbb5877121b1f8ad15f317498622bb449114268",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5dbb5877121b1f8ad15f317498622bb449114268",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5dbb5877121b1f8ad15f317498622bb449114268"
      },
      {
        "sha": "9a96df276762b06e463006afd74379e338ca5023",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a96df276762b06e463006afd74379e338ca5023",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9a96df276762b06e463006afd74379e338ca5023"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "2cb1c7c69fc504bc70fd865153dc9a8508d62e86",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5bebb64d98f53973242e0b83648c1ba936673de9/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5bebb64d98f53973242e0b83648c1ba936673de9/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=5bebb64d98f53973242e0b83648c1ba936673de9",
        "patch": "@@ -86,7 +86,7 @@ class CMainParams : public CChainParams {\n         consensus.BIP65Height = 388381; // 000000000000000004c2b624ed5d7756c508d90fd0da2c7c679febfa6c4735f0\n         consensus.BIP66Height = 363725; // 00000000000000000379eaa19dce8c9b722d46ae6a57c2f1a988119488b50931\n         consensus.powLimit = uint256S(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n-        consensus.nPowTargetTimespan = 10 * 60; // difficulty update time in seconds\n+        consensus.nPowTargetTimespan = 24 * 60 * 60; // difficulty update time in seconds\n         consensus.nPowTargetSpacing = 1 * 60; // block time in seconds\n         consensus.fPowAllowMinDifficultyBlocks = false;\n         consensus.fPowNoRetargeting = false;"
      }
    ]
  },
  {
    "sha": "5d81e22ba165762a12b88cb1d206d382b2796c7e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZDgxZTIyYmExNjU3NjJhMTJiODhjYjFkMjA2ZDM4MmIyNzk2Yzdl",
    "commit": {
      "author": {
        "name": "NullFunctor",
        "email": "nullfunctor@bitcoinv.org",
        "date": "2019-01-01T05:08:11Z"
      },
      "committer": {
        "name": "NullFunctor",
        "email": "nullfunctor@bitcoinv.org",
        "date": "2019-01-01T05:08:11Z"
      },
      "message": "cleanup",
      "tree": {
        "sha": "8289278f13dfc76b0f68c6ae98b6ee4c6afb5175",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8289278f13dfc76b0f68c6ae98b6ee4c6afb5175"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5d81e22ba165762a12b88cb1d206d382b2796c7e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d81e22ba165762a12b88cb1d206d382b2796c7e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5d81e22ba165762a12b88cb1d206d382b2796c7e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d81e22ba165762a12b88cb1d206d382b2796c7e/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "5bebb64d98f53973242e0b83648c1ba936673de9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bebb64d98f53973242e0b83648c1ba936673de9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5bebb64d98f53973242e0b83648c1ba936673de9"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "617b8e8a0d941493cc8ae026f0baee462aa08e6d",
        "filename": "src/qt/minerview.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d81e22ba165762a12b88cb1d206d382b2796c7e/src/qt/minerview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d81e22ba165762a12b88cb1d206d382b2796c7e/src/qt/minerview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/minerview.cpp?ref=5d81e22ba165762a12b88cb1d206d382b2796c7e",
        "patch": "@@ -46,6 +46,7 @@\n #include <atomic>\n #include <thread>\n #include <unistd.h>\n+#include <iostream>\n \n MinerView::MinerView(const PlatformStyle *platformStyle, QWidget *parent) :\n     QWidget(parent), m_minerView(0), m_mining_active{false},"
      }
    ]
  }
]