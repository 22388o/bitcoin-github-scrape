[
  {
    "sha": "faee2656a8de3979ec7392d32dbd3a9a5776befb",
    "node_id": "C_kwDOABII59oAKGZhZWUyNjU2YThkZTM5NzllYzczOTJkMzJkYmQzYTlhNTc3NmJlZmI",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-12-02T16:09:36Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-12-02T16:38:18Z"
      },
      "message": "doc: Document optional result fields in getpeerinfo\n\nCan be reviewed with --ignore-all-space --word-diff-regex=.",
      "tree": {
        "sha": "63b70b762ca741bb8fa9921fbcf75559a8435ea7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/63b70b762ca741bb8fa9921fbcf75559a8435ea7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faee2656a8de3979ec7392d32dbd3a9a5776befb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgisgwAlKWQwB4oFiYUFMUbQP0I9+fKjGpaqZvD0XTVU0BuSRO/pYMlG5Uckv2/\njob+xEr/hdHYGAZ1u+LlYysqTJYlWInWfpK87KLgYDY2DYRk36Jsbj4x2rjbOXie\nmnfWOF9Nva3qnssHvd7UGSnDFINmc7V2Jz9hfYzMSv3T2lk8zHJG9BFihzIVAU1d\nR5gjuPuioOxgZqEa1cSP3YDiq+ufcr3OZdtRP0HpHkwg1Lf25gUFen+8XrgNHiMj\nRI7lPcxol8nUoC2399b6J2hL3oOsI8h1Z/EuaH1IOH2d1yg9IaiTLP3Z/yBkIX0Q\nqOFGUqwuuwGUK3iw2CGNuwLDnfuo7ELL093+fiP+VYk6MGJ7D4NJe+pop2hSz9YS\nKm3nkDRQgfiV6amzM/n92r5fSCtzUwdxorOtZrlvHlxMVHD7B+KccvlRteNK8yb1\n1XJ27JsApWaIEybXCf31hyYEFLp7O4UVTMq1M3XjLusyiPlu22BlMFk1bmwPqq02\nqp9PbpiT\n=UcaT\n-----END PGP SIGNATURE-----",
        "payload": "tree 63b70b762ca741bb8fa9921fbcf75559a8435ea7\nparent 26a1147ce56083d7aa820ac115c16b01e47d911c\nauthor MarcoFalke <falke.marco@gmail.com> 1638461376 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1638463098 +0100\n\ndoc: Document optional result fields in getpeerinfo\n\nCan be reviewed with --ignore-all-space --word-diff-regex=.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faee2656a8de3979ec7392d32dbd3a9a5776befb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faee2656a8de3979ec7392d32dbd3a9a5776befb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faee2656a8de3979ec7392d32dbd3a9a5776befb/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "26a1147ce56083d7aa820ac115c16b01e47d911c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26a1147ce56083d7aa820ac115c16b01e47d911c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/26a1147ce56083d7aa820ac115c16b01e47d911c"
      }
    ],
    "stats": {
      "total": 147,
      "additions": 74,
      "deletions": 73
    },
    "files": [
      {
        "sha": "021e6ae3206a5d5b7d2b86f767fee183881c8589",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 74,
        "deletions": 73,
        "changes": 147,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faee2656a8de3979ec7392d32dbd3a9a5776befb/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faee2656a8de3979ec7392d32dbd3a9a5776befb/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=faee2656a8de3979ec7392d32dbd3a9a5776befb",
        "patch": "@@ -106,82 +106,83 @@ static RPCHelpMan ping()\n \n static RPCHelpMan getpeerinfo()\n {\n-    return RPCHelpMan{\"getpeerinfo\",\n-                \"\\nReturns data about each connected network node as a json array of objects.\\n\",\n-                {},\n-                RPCResult{\n-                    RPCResult::Type::ARR, \"\", \"\",\n+    return RPCHelpMan{\n+        \"getpeerinfo\",\n+        \"\\nReturns data about each connected network node as a json array of objects.\\n\",\n+        {},\n+        RPCResult{\n+            RPCResult::Type::ARR, \"\", \"\",\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\",\n+                {\n                     {\n-                        {RPCResult::Type::OBJ, \"\", \"\",\n-                        {\n-                            {\n-                            {RPCResult::Type::NUM, \"id\", \"Peer index\"},\n-                            {RPCResult::Type::STR, \"addr\", \"(host:port) The IP address and port of the peer\"},\n-                            {RPCResult::Type::STR, \"addrbind\", /* optional */ true, \"(ip:port) Bind address of the connection to the peer\"},\n-                            {RPCResult::Type::STR, \"addrlocal\", /* optional */ true, \"(ip:port) Local address as reported by the peer\"},\n-                            {RPCResult::Type::STR, \"network\", \"Network (\" + Join(GetNetworkNames(/* append_unroutable */ true), \", \") + \")\"},\n-                            {RPCResult::Type::NUM, \"mapped_as\", /* optional */ true, \"The AS in the BGP route to the peer used for diversifying\\n\"\n-                                                                \"peer selection (only available if the asmap config flag is set)\"},\n-                            {RPCResult::Type::STR_HEX, \"services\", \"The services offered\"},\n-                            {RPCResult::Type::ARR, \"servicesnames\", \"the services offered, in human-readable form\",\n-                            {\n-                                {RPCResult::Type::STR, \"SERVICE_NAME\", \"the service name if it is recognised\"}\n-                            }},\n-                            {RPCResult::Type::BOOL, \"relaytxes\", \"Whether peer has asked us to relay transactions to it\"},\n-                            {RPCResult::Type::NUM_TIME, \"lastsend\", \"The \" + UNIX_EPOCH_TIME + \" of the last send\"},\n-                            {RPCResult::Type::NUM_TIME, \"lastrecv\", \"The \" + UNIX_EPOCH_TIME + \" of the last receive\"},\n-                            {RPCResult::Type::NUM_TIME, \"last_transaction\", \"The \" + UNIX_EPOCH_TIME + \" of the last valid transaction received from this peer\"},\n-                            {RPCResult::Type::NUM_TIME, \"last_block\", \"The \" + UNIX_EPOCH_TIME + \" of the last block received from this peer\"},\n-                            {RPCResult::Type::NUM, \"bytessent\", \"The total bytes sent\"},\n-                            {RPCResult::Type::NUM, \"bytesrecv\", \"The total bytes received\"},\n-                            {RPCResult::Type::NUM_TIME, \"conntime\", \"The \" + UNIX_EPOCH_TIME + \" of the connection\"},\n-                            {RPCResult::Type::NUM, \"timeoffset\", \"The time offset in seconds\"},\n-                            {RPCResult::Type::NUM, \"pingtime\", /* optional */ true, \"ping time (if available)\"},\n-                            {RPCResult::Type::NUM, \"minping\", /* optional */ true, \"minimum observed ping time (if any at all)\"},\n-                            {RPCResult::Type::NUM, \"pingwait\", /* optional */ true, \"ping wait (if non-zero)\"},\n-                            {RPCResult::Type::NUM, \"version\", \"The peer version, such as 70001\"},\n-                            {RPCResult::Type::STR, \"subver\", \"The string version\"},\n-                            {RPCResult::Type::BOOL, \"inbound\", \"Inbound (true) or Outbound (false)\"},\n-                            {RPCResult::Type::BOOL, \"bip152_hb_to\", \"Whether we selected peer as (compact blocks) high-bandwidth peer\"},\n-                            {RPCResult::Type::BOOL, \"bip152_hb_from\", \"Whether peer selected us as (compact blocks) high-bandwidth peer\"},\n-                            {RPCResult::Type::NUM, \"startingheight\", \"The starting height (block) of the peer\"},\n-                            {RPCResult::Type::NUM, \"synced_headers\", \"The last header we have in common with this peer\"},\n-                            {RPCResult::Type::NUM, \"synced_blocks\", \"The last block we have in common with this peer\"},\n-                            {RPCResult::Type::ARR, \"inflight\", \"\",\n-                            {\n-                                {RPCResult::Type::NUM, \"n\", \"The heights of blocks we're currently asking from this peer\"},\n-                            }},\n-                            {RPCResult::Type::BOOL, \"addr_relay_enabled\", \"Whether we participate in address relay with this peer\"},\n-                            {RPCResult::Type::NUM, \"addr_processed\", \"The total number of addresses processed, excluding those dropped due to rate limiting\"},\n-                            {RPCResult::Type::NUM, \"addr_rate_limited\", \"The total number of addresses dropped due to rate limiting\"},\n-                            {RPCResult::Type::ARR, \"permissions\", \"Any special permissions that have been granted to this peer\",\n-                            {\n-                                {RPCResult::Type::STR, \"permission_type\", Join(NET_PERMISSIONS_DOC, \",\\n\") + \".\\n\"},\n-                            }},\n-                            {RPCResult::Type::NUM, \"minfeefilter\", \"The minimum fee rate for transactions this peer accepts\"},\n-                            {RPCResult::Type::OBJ_DYN, \"bytessent_per_msg\", \"\",\n-                            {\n-                                {RPCResult::Type::NUM, \"msg\", \"The total bytes sent aggregated by message type\\n\"\n-                                                              \"When a message type is not listed in this json object, the bytes sent are 0.\\n\"\n-                                                              \"Only known message types can appear as keys in the object.\"}\n-                            }},\n-                            {RPCResult::Type::OBJ_DYN, \"bytesrecv_per_msg\", \"\",\n-                            {\n-                                {RPCResult::Type::NUM, \"msg\", \"The total bytes received aggregated by message type\\n\"\n-                                                              \"When a message type is not listed in this json object, the bytes received are 0.\\n\"\n-                                                              \"Only known message types can appear as keys in the object and all bytes received\\n\"\n-                                                              \"of unknown message types are listed under '\"+NET_MESSAGE_COMMAND_OTHER+\"'.\"}\n-                            }},\n-                            {RPCResult::Type::STR, \"connection_type\", \"Type of connection: \\n\" + Join(CONNECTION_TYPE_DOC, \",\\n\") + \".\\n\"\n-                                                                      \"Please note this output is unlikely to be stable in upcoming releases as we iterate to\\n\"\n-                                                                      \"best capture connection behaviors.\"},\n-                        }},\n+                    {RPCResult::Type::NUM, \"id\", \"Peer index\"},\n+                    {RPCResult::Type::STR, \"addr\", \"(host:port) The IP address and port of the peer\"},\n+                    {RPCResult::Type::STR, \"addrbind\", /* optional */ true, \"(ip:port) Bind address of the connection to the peer\"},\n+                    {RPCResult::Type::STR, \"addrlocal\", /* optional */ true, \"(ip:port) Local address as reported by the peer\"},\n+                    {RPCResult::Type::STR, \"network\", \"Network (\" + Join(GetNetworkNames(/* append_unroutable */ true), \", \") + \")\"},\n+                    {RPCResult::Type::NUM, \"mapped_as\", /* optional */ true, \"The AS in the BGP route to the peer used for diversifying\\n\"\n+                                                        \"peer selection (only available if the asmap config flag is set)\"},\n+                    {RPCResult::Type::STR_HEX, \"services\", \"The services offered\"},\n+                    {RPCResult::Type::ARR, \"servicesnames\", \"the services offered, in human-readable form\",\n+                    {\n+                        {RPCResult::Type::STR, \"SERVICE_NAME\", \"the service name if it is recognised\"}\n                     }},\n-                },\n-                RPCExamples{\n-                    HelpExampleCli(\"getpeerinfo\", \"\")\n+                    {RPCResult::Type::BOOL, \"relaytxes\", \"Whether peer has asked us to relay transactions to it\"},\n+                    {RPCResult::Type::NUM_TIME, \"lastsend\", \"The \" + UNIX_EPOCH_TIME + \" of the last send\"},\n+                    {RPCResult::Type::NUM_TIME, \"lastrecv\", \"The \" + UNIX_EPOCH_TIME + \" of the last receive\"},\n+                    {RPCResult::Type::NUM_TIME, \"last_transaction\", \"The \" + UNIX_EPOCH_TIME + \" of the last valid transaction received from this peer\"},\n+                    {RPCResult::Type::NUM_TIME, \"last_block\", \"The \" + UNIX_EPOCH_TIME + \" of the last block received from this peer\"},\n+                    {RPCResult::Type::NUM, \"bytessent\", \"The total bytes sent\"},\n+                    {RPCResult::Type::NUM, \"bytesrecv\", \"The total bytes received\"},\n+                    {RPCResult::Type::NUM_TIME, \"conntime\", \"The \" + UNIX_EPOCH_TIME + \" of the connection\"},\n+                    {RPCResult::Type::NUM, \"timeoffset\", \"The time offset in seconds\"},\n+                    {RPCResult::Type::NUM, \"pingtime\", /* optional */ true, \"ping time (if available)\"},\n+                    {RPCResult::Type::NUM, \"minping\", /* optional */ true, \"minimum observed ping time (if any at all)\"},\n+                    {RPCResult::Type::NUM, \"pingwait\", /* optional */ true, \"ping wait (if non-zero)\"},\n+                    {RPCResult::Type::NUM, \"version\", \"The peer version, such as 70001\"},\n+                    {RPCResult::Type::STR, \"subver\", \"The string version\"},\n+                    {RPCResult::Type::BOOL, \"inbound\", \"Inbound (true) or Outbound (false)\"},\n+                    {RPCResult::Type::BOOL, \"bip152_hb_to\", \"Whether we selected peer as (compact blocks) high-bandwidth peer\"},\n+                    {RPCResult::Type::BOOL, \"bip152_hb_from\", \"Whether peer selected us as (compact blocks) high-bandwidth peer\"},\n+                    {RPCResult::Type::NUM, \"startingheight\", /*optional=*/true, \"The starting height (block) of the peer\"},\n+                    {RPCResult::Type::NUM, \"synced_headers\", /*optional=*/true, \"The last header we have in common with this peer\"},\n+                    {RPCResult::Type::NUM, \"synced_blocks\", /*optional=*/true, \"The last block we have in common with this peer\"},\n+                    {RPCResult::Type::ARR, \"inflight\", /*optional=*/true, \"\",\n+                    {\n+                        {RPCResult::Type::NUM, \"n\", \"The heights of blocks we're currently asking from this peer\"},\n+                    }},\n+                    {RPCResult::Type::BOOL, \"addr_relay_enabled\", /*optional=*/true, \"Whether we participate in address relay with this peer\"},\n+                    {RPCResult::Type::NUM, \"addr_processed\", /*optional=*/true, \"The total number of addresses processed, excluding those dropped due to rate limiting\"},\n+                    {RPCResult::Type::NUM, \"addr_rate_limited\", /*optional=*/true, \"The total number of addresses dropped due to rate limiting\"},\n+                    {RPCResult::Type::ARR, \"permissions\", \"Any special permissions that have been granted to this peer\",\n+                    {\n+                        {RPCResult::Type::STR, \"permission_type\", Join(NET_PERMISSIONS_DOC, \",\\n\") + \".\\n\"},\n+                    }},\n+                    {RPCResult::Type::NUM, \"minfeefilter\", \"The minimum fee rate for transactions this peer accepts\"},\n+                    {RPCResult::Type::OBJ_DYN, \"bytessent_per_msg\", \"\",\n+                    {\n+                        {RPCResult::Type::NUM, \"msg\", \"The total bytes sent aggregated by message type\\n\"\n+                                                      \"When a message type is not listed in this json object, the bytes sent are 0.\\n\"\n+                                                      \"Only known message types can appear as keys in the object.\"}\n+                    }},\n+                    {RPCResult::Type::OBJ_DYN, \"bytesrecv_per_msg\", \"\",\n+                    {\n+                        {RPCResult::Type::NUM, \"msg\", \"The total bytes received aggregated by message type\\n\"\n+                                                      \"When a message type is not listed in this json object, the bytes received are 0.\\n\"\n+                                                      \"Only known message types can appear as keys in the object and all bytes received\\n\"\n+                                                      \"of unknown message types are listed under '\"+NET_MESSAGE_COMMAND_OTHER+\"'.\"}\n+                    }},\n+                    {RPCResult::Type::STR, \"connection_type\", \"Type of connection: \\n\" + Join(CONNECTION_TYPE_DOC, \",\\n\") + \".\\n\"\n+                                                              \"Please note this output is unlikely to be stable in upcoming releases as we iterate to\\n\"\n+                                                              \"best capture connection behaviors.\"},\n+                }},\n+            }},\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"getpeerinfo\", \"\")\n             + HelpExampleRpc(\"getpeerinfo\", \"\")\n-                },\n+        },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n     NodeContext& node = EnsureAnyNodeContext(request.context);"
      }
    ]
  },
  {
    "sha": "fab6c43b40773555b3f919c1403b8f3f48e92d5c",
    "node_id": "C_kwDOABII59oAKGZhYjZjNDNiNDA3NzM1NTViM2Y5MTljMTQwM2I4ZjNmNDhlOTJkNWM",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-12-02T18:23:29Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-12-02T18:22:35Z"
      },
      "message": "doc: Document optional result fields in validateaddress\n\nCan be reviewed with --ignore-all-space --word-diff-regex=.",
      "tree": {
        "sha": "76bf16a27b6f750b55f2c114e6eb3b86e2f577f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/76bf16a27b6f750b55f2c114e6eb3b86e2f577f4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fab6c43b40773555b3f919c1403b8f3f48e92d5c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhhWAv9EKAmt8UC6H6js/5zUA+M2cz7N0Umss7EFnOlo9romDFHItr3Yw1UZD2H\n5mCvYQXvurx3lHyQYgT+iYHS9bmmsB56OAoJPc2yG0gwIbyY8yc6/+GxNXD2cdyO\n4wXyNKJORcL/1gJeQolmoH/MjvLg04LSy4QXS4xBB2+2UavFnXQ/cogo+QcP5xk0\nGGTC0mRGJVez7QsqvOJOHOthVtx784jmxNz4XJlmcJG4nWZiQNahTeuL533oisQb\nzxXqzn4mSYk5mlpc8ky8CqOhfKGD6AAgPLoFexWSIpGq62ikl2IuwyvupXdZZC9E\nUDlJqaJMLD9F5tkQAzYlSZ0Z6k9Q2HVdi7D/bQs9MX5FgvH2uVc0Cttt4mSWev8O\nid8bhDqccG213Nac0cvvoiv2e1A0xeCglIfPlc3IB7zNS4zV2EdJbjLqEzaQtil2\nRyCRcDR97X40/ThP55q+ZIPZ7eA9bNhbiDlJfseWEUj6vHJcpzlDWDT504BDfZtn\n5nIWDQg2\n=iuJD\n-----END PGP SIGNATURE-----",
        "payload": "tree 76bf16a27b6f750b55f2c114e6eb3b86e2f577f4\nparent faee2656a8de3979ec7392d32dbd3a9a5776befb\nauthor MarcoFalke <falke.marco@gmail.com> 1638469409 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1638469355 +0100\n\ndoc: Document optional result fields in validateaddress\n\nCan be reviewed with --ignore-all-space --word-diff-regex=.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab6c43b40773555b3f919c1403b8f3f48e92d5c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fab6c43b40773555b3f919c1403b8f3f48e92d5c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab6c43b40773555b3f919c1403b8f3f48e92d5c/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "faee2656a8de3979ec7392d32dbd3a9a5776befb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faee2656a8de3979ec7392d32dbd3a9a5776befb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faee2656a8de3979ec7392d32dbd3a9a5776befb"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 26,
      "deletions": 25
    },
    "files": [
      {
        "sha": "2c05fc39fd9249824332e19027d1eef3d042e4b5",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 25,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab6c43b40773555b3f919c1403b8f3f48e92d5c/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab6c43b40773555b3f919c1403b8f3f48e92d5c/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=fab6c43b40773555b3f919c1403b8f3f48e92d5c",
        "patch": "@@ -36,32 +36,33 @@\n \n static RPCHelpMan validateaddress()\n {\n-    return RPCHelpMan{\"validateaddress\",\n-                \"\\nReturn information about the given bitcoin address.\\n\",\n-                {\n-                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address to validate\"},\n-                },\n-                RPCResult{\n-                    RPCResult::Type::OBJ, \"\", \"\",\n+    return RPCHelpMan{\n+        \"validateaddress\",\n+        \"\\nReturn information about the given bitcoin address.\\n\",\n+        {\n+            {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address to validate\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                {RPCResult::Type::BOOL, \"isvalid\", \"If the address is valid or not\"},\n+                {RPCResult::Type::STR, \"address\", /* optional */ true, \"The bitcoin address validated\"},\n+                {RPCResult::Type::STR_HEX, \"scriptPubKey\", /* optional */ true, \"The hex-encoded scriptPubKey generated by the address\"},\n+                {RPCResult::Type::BOOL, \"isscript\", /* optional */ true, \"If the key is a script\"},\n+                {RPCResult::Type::BOOL, \"iswitness\", /* optional */ true, \"If the address is a witness address\"},\n+                {RPCResult::Type::NUM, \"witness_version\", /* optional */ true, \"The version number of the witness program\"},\n+                {RPCResult::Type::STR_HEX, \"witness_program\", /* optional */ true, \"The hex value of the witness program\"},\n+                {RPCResult::Type::STR, \"error\", /* optional */ true, \"Error message, if any\"},\n+                {RPCResult::Type::ARR, \"error_locations\", /*optional=*/true, \"Indices of likely error locations in address, if known (e.g. Bech32 errors)\",\n                     {\n-                        {RPCResult::Type::BOOL, \"isvalid\", \"If the address is valid or not\"},\n-                        {RPCResult::Type::STR, \"address\", /* optional */ true, \"The bitcoin address validated\"},\n-                        {RPCResult::Type::STR_HEX, \"scriptPubKey\", /* optional */ true, \"The hex-encoded scriptPubKey generated by the address\"},\n-                        {RPCResult::Type::BOOL, \"isscript\", /* optional */ true, \"If the key is a script\"},\n-                        {RPCResult::Type::BOOL, \"iswitness\", /* optional */ true, \"If the address is a witness address\"},\n-                        {RPCResult::Type::NUM, \"witness_version\", /* optional */ true, \"The version number of the witness program\"},\n-                        {RPCResult::Type::STR_HEX, \"witness_program\", /* optional */ true, \"The hex value of the witness program\"},\n-                        {RPCResult::Type::STR, \"error\", /* optional */ true, \"Error message, if any\"},\n-                        {RPCResult::Type::ARR, \"error_locations\", \"Indices of likely error locations in address, if known (e.g. Bech32 errors)\",\n-                            {\n-                                {RPCResult::Type::NUM, \"index\", \"index of a potential error\"},\n-                            }},\n-                    }\n-                },\n-                RPCExamples{\n-                    HelpExampleCli(\"validateaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"\") +\n-                    HelpExampleRpc(\"validateaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"\")\n-                },\n+                        {RPCResult::Type::NUM, \"index\", \"index of a potential error\"},\n+                    }},\n+            }\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"validateaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"\") +\n+            HelpExampleRpc(\"validateaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"\")\n+        },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n     std::string error_msg;"
      }
    ]
  }
]