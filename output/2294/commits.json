[
  {
    "sha": "fa28f0ee8adf2631398b68eeca3d04a61ade2f0e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTI4ZjBlZThhZGYyNjMxMzk4YjY4ZWVjYTNkMDRhNjFhZGUyZjBl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-02-10T18:01:30Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-02-14T20:13:12Z"
      },
      "message": "Change progress bar from block-based to time-based\n\nThis is less confusing to most people, and doesn't rely on estimates\nof the total number of blocks received from other nodes.",
      "tree": {
        "sha": "416a47ce688776625a5d1c5573e42432bd1151f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/416a47ce688776625a5d1c5573e42432bd1151f4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa28f0ee8adf2631398b68eeca3d04a61ade2f0e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa28f0ee8adf2631398b68eeca3d04a61ade2f0e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa28f0ee8adf2631398b68eeca3d04a61ade2f0e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa28f0ee8adf2631398b68eeca3d04a61ade2f0e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f50706796b7786a7d85ad0baea81b709ae3ed683",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f50706796b7786a7d85ad0baea81b709ae3ed683",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f50706796b7786a7d85ad0baea81b709ae3ed683"
      }
    ],
    "stats": {
      "total": 89,
      "additions": 42,
      "deletions": 47
    },
    "files": [
      {
        "sha": "635e0cb34be127f2a2c2f38b1f121c856a55f3ba",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 46,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa28f0ee8adf2631398b68eeca3d04a61ade2f0e/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa28f0ee8adf2631398b68eeca3d04a61ade2f0e/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=fa28f0ee8adf2631398b68eeca3d04a61ade2f0e",
        "patch": "@@ -67,7 +67,8 @@ BitcoinGUI::BitcoinGUI(QWidget *parent):\n     aboutQtAction(0),\n     trayIcon(0),\n     notificator(0),\n-    rpcConsole(0)\n+    rpcConsole(0),\n+    prevBlocks(0)\n {\n     resize(850, 550);\n     setWindowTitle(tr(\"Bitcoin\") + \" - \" + tr(\"Wallet\"));\n@@ -527,52 +528,17 @@ void BitcoinGUI::setNumBlocks(int count, int nTotalBlocks)\n         importText = tr(\"Reindexing blocks on disk...\");\n     }\n \n-    if(count < nTotalBlocks)\n-    {\n-        int nRemainingBlocks = nTotalBlocks - count;\n-        float nPercentageDone = count / (nTotalBlocks * 0.01f);\n-\n-        progressBarLabel->setText(importText);\n-        progressBarLabel->setVisible(true);\n-        progressBar->setFormat(tr(\"~%n block(s) remaining\", \"\", nRemainingBlocks));\n-        progressBar->setMaximum(nTotalBlocks);\n-        progressBar->setValue(count);\n-        progressBar->setVisible(true);\n-\n-        tooltip = tr(\"Processed %1 of %2 blocks of transaction history (%3% done).\").arg(count).arg(nTotalBlocks).arg(nPercentageDone, 0, 'f', 2);\n-    }\n-    else\n-    {\n-        progressBarLabel->setVisible(false);\n-\n-        progressBar->setVisible(false);\n-        tooltip = tr(\"Processed %1 blocks of transaction history.\").arg(count);\n-    }\n-\n     QDateTime lastBlockDate = clientModel->getLastBlockDate();\n-    int secs = lastBlockDate.secsTo(QDateTime::currentDateTime());\n-    QString text;\n+    QDateTime currentDate = QDateTime::currentDateTime();\n+    int secs = lastBlockDate.secsTo(currentDate);\n \n-    // Represent time from last generated block in human readable text\n-    if(secs <= 0)\n-    {\n-        // Fully up to date. Leave text empty.\n-    }\n-    else if(secs < 60)\n-    {\n-        text = tr(\"%n second(s) ago\",\"\",secs);\n-    }\n-    else if(secs < 60*60)\n-    {\n-        text = tr(\"%n minute(s) ago\",\"\",secs/60);\n-    }\n-    else if(secs < 24*60*60)\n+    if(count < nTotalBlocks)\n     {\n-        text = tr(\"%n hour(s) ago\",\"\",secs/(60*60));\n+        tooltip = tr(\"Processed %1 of %2 (estimated) blocks of transaction history.\").arg(count).arg(nTotalBlocks);\n     }\n     else\n     {\n-        text = tr(\"%n day(s) ago\",\"\",secs/(60*60*24));\n+        tooltip = tr(\"Processed %1 blocks of transaction history.\").arg(count);\n     }\n \n     // Set icon state: spinning if catching up, tick otherwise\n@@ -582,20 +548,46 @@ void BitcoinGUI::setNumBlocks(int count, int nTotalBlocks)\n         labelBlocksIcon->setPixmap(QIcon(\":/icons/synced\").pixmap(STATUSBAR_ICONSIZE, STATUSBAR_ICONSIZE));\n \n         overviewPage->showOutOfSyncWarning(false);\n+\n+        progressBarLabel->setVisible(false);\n+        progressBar->setVisible(false);\n     }\n     else\n     {\n+        // Represent time from last generated block in human readable text\n+        QString timeBehindText;\n+        if(secs < 48*60*60)\n+        {\n+            timeBehindText = tr(\"%n hour(s)\",\"\",secs/(60*60));\n+        }\n+        else if(secs < 14*24*60*60)\n+        {\n+            timeBehindText = tr(\"%n day(s)\",\"\",secs/(24*60*60));\n+        }\n+        else\n+        {\n+            timeBehindText = tr(\"%n week(s)\",\"\",secs/(7*24*60*60));\n+        }\n+\n+        progressBarLabel->setText(importText);\n+        progressBarLabel->setVisible(true);\n+        progressBar->setFormat(tr(\"%1 behind\").arg(timeBehindText));\n+        progressBar->setMaximum(totalSecs);\n+        progressBar->setValue(totalSecs - secs);\n+        progressBar->setVisible(true);\n+\n         tooltip = tr(\"Catching up...\") + QString(\"<br>\") + tooltip;\n         labelBlocksIcon->setMovie(syncIconMovie);\n-        syncIconMovie->start();\n+        if(count != prevBlocks)\n+            syncIconMovie->jumpToNextFrame();\n+        prevBlocks = count;\n \n         overviewPage->showOutOfSyncWarning(true);\n-    }\n \n-    if(!text.isEmpty())\n-    {\n         tooltip += QString(\"<br>\");\n-        tooltip += tr(\"Last received block was generated %1.\").arg(text);\n+        tooltip += tr(\"Last received block was generated %1 ago.\").arg(timeBehindText);\n+        tooltip += QString(\"<br>\");\n+        tooltip += tr(\"Transactions after this will not yet be visible.\");\n     }\n \n     // Don't word-wrap this (fixed-width) tooltip"
      },
      {
        "sha": "0726db7f9c872afd986ac600136297b233cf58b2",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa28f0ee8adf2631398b68eeca3d04a61ade2f0e/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa28f0ee8adf2631398b68eeca3d04a61ade2f0e/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=fa28f0ee8adf2631398b68eeca3d04a61ade2f0e",
        "patch": "@@ -98,6 +98,8 @@ class BitcoinGUI : public QMainWindow\n     RPCConsole *rpcConsole;\n \n     QMovie *syncIconMovie;\n+    /** Keep track of previous number of blocks, to detect progress */\n+    int prevBlocks;\n \n     /** Create the main UI actions. */\n     void createActions();"
      },
      {
        "sha": "5f3368c30a1ce94adc56229f12cfde4f6c259a84",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa28f0ee8adf2631398b68eeca3d04a61ade2f0e/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa28f0ee8adf2631398b68eeca3d04a61ade2f0e/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=fa28f0ee8adf2631398b68eeca3d04a61ade2f0e",
        "patch": "@@ -54,6 +54,7 @@ QDateTime ClientModel::getLastBlockDate() const\n         return QDateTime::fromTime_t(1231006505); // Genesis block's time\n }\n \n+\n void ClientModel::updateTimer()\n {\n     // Some quantities (such as number of blocks) change so fast that we don't want to be notified for each change."
      },
      {
        "sha": "92417834ec1817681d9a6a732e59afb03e46a91a",
        "filename": "src/qt/guiconstants.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa28f0ee8adf2631398b68eeca3d04a61ade2f0e/src/qt/guiconstants.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa28f0ee8adf2631398b68eeca3d04a61ade2f0e/src/qt/guiconstants.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiconstants.h?ref=fa28f0ee8adf2631398b68eeca3d04a61ade2f0e",
        "patch": "@@ -2,7 +2,7 @@\n #define GUICONSTANTS_H\n \n /* Milliseconds between model updates */\n-static const int MODEL_UPDATE_DELAY = 500;\n+static const int MODEL_UPDATE_DELAY = 250;\n \n /* AskPassphraseDialog -- Maximum passphrase length */\n static const int MAX_PASSPHRASE_SIZE = 1024;"
      }
    ]
  },
  {
    "sha": "097d13f1374388a175af4681e49b15bc39429795",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOTdkMTNmMTM3NDM4OGExNzVhZjQ2ODFlNDliMTViYzM5NDI5Nzk1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-02-10T18:46:42Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-02-14T20:13:12Z"
      },
      "message": "Transactions-based verification progress",
      "tree": {
        "sha": "3fc4e2285dee84edad761543c046d4df805ef8d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3fc4e2285dee84edad761543c046d4df805ef8d6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/097d13f1374388a175af4681e49b15bc39429795",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/097d13f1374388a175af4681e49b15bc39429795",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/097d13f1374388a175af4681e49b15bc39429795",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/097d13f1374388a175af4681e49b15bc39429795/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa28f0ee8adf2631398b68eeca3d04a61ade2f0e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa28f0ee8adf2631398b68eeca3d04a61ade2f0e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa28f0ee8adf2631398b68eeca3d04a61ade2f0e"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 41,
      "deletions": 2
    },
    "files": [
      {
        "sha": "b922fc44ef1bbfa361d1c66d2d9c3d8ab132b586",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 0,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/097d13f1374388a175af4681e49b15bc39429795/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/097d13f1374388a175af4681e49b15bc39429795/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=097d13f1374388a175af4681e49b15bc39429795",
        "patch": "@@ -34,6 +34,11 @@ namespace Checkpoints\n         (216116, uint256(\"0x00000000000001b4f4b433e81ee46494af945cf96014816a4e2370f11b23df4e\"))\n         ;\n \n+    static const int64 nTimeLastCheckpoint = 1357902690;\n+    static const int64 nTransactionsLastCheckpoint = 11011160;\n+    static const double fTransactionsPerDay = 50500;\n+    static const double fSigcheckVerificationFactor = 15.0;\n+\n     static MapCheckpoints mapCheckpointsTestnet =\n         boost::assign::map_list_of\n         ( 546, uint256(\"000000002a936ca763904c3c35fce2f3556c559c0214345d31b1bcebf76acb70\"))\n@@ -51,6 +56,32 @@ namespace Checkpoints\n         return hash == i->second;\n     }\n \n+    double GuessVerificationProgress(CBlockIndex *pindex) {\n+        int64 nNow = time(NULL);\n+\n+        double fWorkBefore = 0.0;\n+        double fWorkAfter = 0.0;\n+\n+        if (pindex->nTime <= nTimeLastCheckpoint) {\n+            double nCheapBefore = pindex->nChainTx;\n+            double nCheapAfter = nTransactionsLastCheckpoint - pindex->nChainTx;\n+            double nExpensiveAfter = (nNow - nTimeLastCheckpoint)/86400.0*fTransactionsPerDay;\n+            fWorkBefore = nCheapBefore;\n+            fWorkAfter = nCheapAfter + nExpensiveAfter*fSigcheckVerificationFactor;\n+            // printf(\"before checkpoint: nCheapBefore=%f nCheapAfter=%f nExpensiveAfter=%f\\n\", nCheapBefore, nCheapAfter, nExpensiveAfter);\n+        } else {\n+            double nCheapBefore = nTransactionsLastCheckpoint;\n+            double nExpensiveBefore = pindex->nChainTx - nTransactionsLastCheckpoint;\n+            double nExpensiveAfter = (nNow - pindex->nTime)/86400.0*fTransactionsPerDay;\n+            fWorkBefore = nCheapBefore + nExpensiveBefore*fSigcheckVerificationFactor;\n+            fWorkAfter = nExpensiveAfter*fSigcheckVerificationFactor;\n+            // printf(\"after checkpoint: nCheapBefore=%f nExpensiveBefore=%f nExpensiveAfter=%f\\n\", nCheapBefore, nExpensiveBefore, nExpensiveAfter);\n+        }\n+\n+        // printf(\"guess: %g%%\\n\", 100.0*fWorkBefore / (fWorkBefore + fWorkAfter));\n+        return (fWorkBefore / (fWorkBefore + fWorkAfter));\n+    }\n+\n     int GetTotalBlocksEstimate()\n     {\n         if (!GetBoolArg(\"-checkpoints\", true))"
      },
      {
        "sha": "dcfb44e10f6c206da19594a91fce7d75d7d9f73e",
        "filename": "src/checkpoints.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/097d13f1374388a175af4681e49b15bc39429795/src/checkpoints.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/097d13f1374388a175af4681e49b15bc39429795/src/checkpoints.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.h?ref=097d13f1374388a175af4681e49b15bc39429795",
        "patch": "@@ -22,6 +22,8 @@ namespace Checkpoints\n \n     // Returns last CBlockIndex* in mapBlockIndex that is a checkpoint\n     CBlockIndex* GetLastCheckpoint(const std::map<uint256, CBlockIndex*>& mapBlockIndex);\n+\n+    double GuessVerificationProgress(CBlockIndex *pindex);\n }\n \n #endif"
      },
      {
        "sha": "16bc0a47de66410808c20f742e8208260d44ec86",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/097d13f1374388a175af4681e49b15bc39429795/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/097d13f1374388a175af4681e49b15bc39429795/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=097d13f1374388a175af4681e49b15bc39429795",
        "patch": "@@ -572,8 +572,8 @@ void BitcoinGUI::setNumBlocks(int count, int nTotalBlocks)\n         progressBarLabel->setText(importText);\n         progressBarLabel->setVisible(true);\n         progressBar->setFormat(tr(\"%1 behind\").arg(timeBehindText));\n-        progressBar->setMaximum(totalSecs);\n-        progressBar->setValue(totalSecs - secs);\n+        progressBar->setMaximum(1000000000);\n+        progressBar->setValue(clientModel->getVerificationProgress() * 1000000000.0 + 0.5);\n         progressBar->setVisible(true);\n \n         tooltip = tr(\"Catching up...\") + QString(\"<br>\") + tooltip;"
      },
      {
        "sha": "858fbe241f07e2cf7dd6f75c728fa9e6b04b0649",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/097d13f1374388a175af4681e49b15bc39429795/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/097d13f1374388a175af4681e49b15bc39429795/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=097d13f1374388a175af4681e49b15bc39429795",
        "patch": "@@ -6,6 +6,7 @@\n \n #include \"alert.h\"\n #include \"main.h\"\n+#include \"checkpoints.h\"\n #include \"ui_interface.h\"\n \n #include <QDateTime>\n@@ -54,6 +55,10 @@ QDateTime ClientModel::getLastBlockDate() const\n         return QDateTime::fromTime_t(1231006505); // Genesis block's time\n }\n \n+double ClientModel::getVerificationProgress() const\n+{\n+    return Checkpoints::GuessVerificationProgress(pindexBest);\n+}\n \n void ClientModel::updateTimer()\n {"
      },
      {
        "sha": "a3fe92048c7e2490d1a0ec77904aa3ba0ba5e088",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/097d13f1374388a175af4681e49b15bc39429795/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/097d13f1374388a175af4681e49b15bc39429795/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=097d13f1374388a175af4681e49b15bc39429795",
        "patch": "@@ -34,6 +34,7 @@ class ClientModel : public QObject\n     int getNumBlocks() const;\n     int getNumBlocksAtStartup();\n \n+    double getVerificationProgress() const;\n     QDateTime getLastBlockDate() const;\n \n     //! Return true if client connected to testnet"
      }
    ]
  },
  {
    "sha": "100d0c570f2c07c8c8b0993f5c5f69ae1e528270",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMDBkMGM1NzBmMmMwN2M4YzhiMDk5M2Y1YzVmNjlhZTFlNTI4Mjcw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-02-13T11:37:08Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-02-14T20:13:12Z"
      },
      "message": "Refactor testnet checkpoints",
      "tree": {
        "sha": "3806a7fba8e3bad7bcfcab20c91f29f8a058a315",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3806a7fba8e3bad7bcfcab20c91f29f8a058a315"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/100d0c570f2c07c8c8b0993f5c5f69ae1e528270",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/100d0c570f2c07c8c8b0993f5c5f69ae1e528270",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/100d0c570f2c07c8c8b0993f5c5f69ae1e528270",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/100d0c570f2c07c8c8b0993f5c5f69ae1e528270/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "097d13f1374388a175af4681e49b15bc39429795",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/097d13f1374388a175af4681e49b15bc39429795",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/097d13f1374388a175af4681e49b15bc39429795"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 39,
      "deletions": 22
    },
    "files": [
      {
        "sha": "2c5ec922cbaf88cea03d1b001ebfe4573964ec53",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 22,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/100d0c570f2c07c8c8b0993f5c5f69ae1e528270/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/100d0c570f2c07c8c8b0993f5c5f69ae1e528270/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=100d0c570f2c07c8c8b0993f5c5f69ae1e528270",
        "patch": "@@ -14,14 +14,21 @@ namespace Checkpoints\n {\n     typedef std::map<int, uint256> MapCheckpoints;\n \n-    //\n+    static const double fSigcheckVerificationFactor = 15.0;\n+\n+    struct CCheckpointData {\n+        MapCheckpoints mapCheckpoints;\n+        int64 nTimeLastCheckpoint;\n+        int64 nTransactionsLastCheckpoint;\n+        double fTransactionsPerDay;\n+    };\n+\n     // What makes a good checkpoint block?\n     // + Is surrounded by blocks with reasonable timestamps\n     //   (no blocks before with a timestamp after, none after with\n     //    timestamp before)\n     // + Contains no strange transactions\n-    //\n-    static MapCheckpoints mapCheckpoints =\n+    static const CCheckpointData checkpoints = {\n         boost::assign::map_list_of\n         ( 11111, uint256(\"0x0000000069e244f73d78e8fd29ba2fd2ed618bd6fa2ee92559f542fdb26e7c1d\"))\n         ( 33333, uint256(\"0x000000002dd5588a74784eaa7ab0507a18ad16a236e7b1ce69f00d7ddfb5d0a6\"))\n@@ -31,25 +38,33 @@ namespace Checkpoints\n         (168000, uint256(\"0x000000000000099e61ea72015e79632f216fe6cb33d7899acb35b75c8303b763\"))\n         (193000, uint256(\"0x000000000000059f452a5f7340de6682a977387c17010ff6e6c3bd83ca8b1317\"))\n         (210000, uint256(\"0x000000000000048b95347e83192f69cf0366076336c639f9b7228e9ba171342e\"))\n-        (216116, uint256(\"0x00000000000001b4f4b433e81ee46494af945cf96014816a4e2370f11b23df4e\"))\n-        ;\n+        (216116, uint256(\"0x00000000000001b4f4b433e81ee46494af945cf96014816a4e2370f11b23df4e\")),\n+        1357902690, // UNIX timestamp of last checkpoint\n+        11011160, // total number of transactions between genesis and last checkpoint\n+        50500.0 // estimated number of transactions per day after checkpoint\n+    };\n \n-    static const int64 nTimeLastCheckpoint = 1357902690;\n-    static const int64 nTransactionsLastCheckpoint = 11011160;\n-    static const double fTransactionsPerDay = 50500;\n-    static const double fSigcheckVerificationFactor = 15.0;\n-\n-    static MapCheckpoints mapCheckpointsTestnet =\n+    static const CCheckpointData checkpointsTestnet = {\n         boost::assign::map_list_of\n-        ( 546, uint256(\"000000002a936ca763904c3c35fce2f3556c559c0214345d31b1bcebf76acb70\"))\n-        ;\n+        ( 546, uint256(\"000000002a936ca763904c3c35fce2f3556c559c0214345d31b1bcebf76acb70\")),\n+        1338180505,\n+        16341,\n+        300\n+    };\n+\n+    const CCheckpointData &Checkpoints() {\n+        if (fTestNet)\n+            return checkpointsTestnet;\n+        else\n+            return checkpoints;\n+    }\n \n     bool CheckBlock(int nHeight, const uint256& hash)\n     {\n         if (!GetBoolArg(\"-checkpoints\", true))\n             return true;\n \n-        MapCheckpoints& checkpoints = (fTestNet ? mapCheckpointsTestnet : mapCheckpoints);\n+        const MapCheckpoints& checkpoints = Checkpoints().mapCheckpoints;\n \n         MapCheckpoints::const_iterator i = checkpoints.find(nHeight);\n         if (i == checkpoints.end()) return true;\n@@ -62,17 +77,19 @@ namespace Checkpoints\n         double fWorkBefore = 0.0;\n         double fWorkAfter = 0.0;\n \n-        if (pindex->nTime <= nTimeLastCheckpoint) {\n+        const CCheckpointData &data = Checkpoints();\n+\n+        if (pindex->nTime <= data.nTimeLastCheckpoint) {\n             double nCheapBefore = pindex->nChainTx;\n-            double nCheapAfter = nTransactionsLastCheckpoint - pindex->nChainTx;\n-            double nExpensiveAfter = (nNow - nTimeLastCheckpoint)/86400.0*fTransactionsPerDay;\n+            double nCheapAfter = data.nTransactionsLastCheckpoint - pindex->nChainTx;\n+            double nExpensiveAfter = (nNow - data.nTimeLastCheckpoint)/86400.0*data.fTransactionsPerDay;\n             fWorkBefore = nCheapBefore;\n             fWorkAfter = nCheapAfter + nExpensiveAfter*fSigcheckVerificationFactor;\n             // printf(\"before checkpoint: nCheapBefore=%f nCheapAfter=%f nExpensiveAfter=%f\\n\", nCheapBefore, nCheapAfter, nExpensiveAfter);\n         } else {\n-            double nCheapBefore = nTransactionsLastCheckpoint;\n-            double nExpensiveBefore = pindex->nChainTx - nTransactionsLastCheckpoint;\n-            double nExpensiveAfter = (nNow - pindex->nTime)/86400.0*fTransactionsPerDay;\n+            double nCheapBefore = data.nTransactionsLastCheckpoint;\n+            double nExpensiveBefore = pindex->nChainTx - data.nTransactionsLastCheckpoint;\n+            double nExpensiveAfter = (nNow - pindex->nTime)/86400.0*data.fTransactionsPerDay;\n             fWorkBefore = nCheapBefore + nExpensiveBefore*fSigcheckVerificationFactor;\n             fWorkAfter = nExpensiveAfter*fSigcheckVerificationFactor;\n             // printf(\"after checkpoint: nCheapBefore=%f nExpensiveBefore=%f nExpensiveAfter=%f\\n\", nCheapBefore, nExpensiveBefore, nExpensiveAfter);\n@@ -87,7 +104,7 @@ namespace Checkpoints\n         if (!GetBoolArg(\"-checkpoints\", true))\n             return 0;\n \n-        MapCheckpoints& checkpoints = (fTestNet ? mapCheckpointsTestnet : mapCheckpoints);\n+        const MapCheckpoints& checkpoints = Checkpoints().mapCheckpoints;\n \n         return checkpoints.rbegin()->first;\n     }\n@@ -97,7 +114,7 @@ namespace Checkpoints\n         if (!GetBoolArg(\"-checkpoints\", true))\n             return NULL;\n \n-        MapCheckpoints& checkpoints = (fTestNet ? mapCheckpointsTestnet : mapCheckpoints);\n+        const MapCheckpoints& checkpoints = Checkpoints().mapCheckpoints;\n \n         BOOST_REVERSE_FOREACH(const MapCheckpoints::value_type& i, checkpoints)\n         {"
      }
    ]
  }
]