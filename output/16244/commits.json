[
  {
    "sha": "1aecdf2063cbe28d4715ae5ae1a7e51b860c9f4d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYWVjZGYyMDYzY2JlMjhkNDcxNWFlNWFlMWE3ZTUxYjg2MGM5ZjRk",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-05-24T21:13:13Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-09T23:50:16Z"
      },
      "message": "Move wallet creation out of the createwallet rpc into its own function",
      "tree": {
        "sha": "80c6305c3d76181614f9501cf2409b08336e3c23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/80c6305c3d76181614f9501cf2409b08336e3c23"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1aecdf2063cbe28d4715ae5ae1a7e51b860c9f4d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1aecdf2063cbe28d4715ae5ae1a7e51b860c9f4d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1aecdf2063cbe28d4715ae5ae1a7e51b860c9f4d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1aecdf2063cbe28d4715ae5ae1a7e51b860c9f4d/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "357488f660a570dc97d969ae92e026854d167142",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/357488f660a570dc97d969ae92e026854d167142",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/357488f660a570dc97d969ae92e026854d167142"
      }
    ],
    "stats": {
      "total": 128,
      "additions": 82,
      "deletions": 46
    },
    "files": [
      {
        "sha": "723614e3bc69f76d000e3a07ab87399f7e4c43cd",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 46,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1aecdf2063cbe28d4715ae5ae1a7e51b860c9f4d/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1aecdf2063cbe28d4715ae5ae1a7e51b860c9f4d/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=1aecdf2063cbe28d4715ae5ae1a7e51b860c9f4d",
        "patch": "@@ -2677,17 +2677,12 @@ static UniValue createwallet(const JSONRPCRequest& request)\n         },\n     }.Check(request);\n \n-    std::string error;\n-    std::string warning;\n-\n     uint64_t flags = 0;\n     if (!request.params[1].isNull() && request.params[1].get_bool()) {\n         flags |= WALLET_FLAG_DISABLE_PRIVATE_KEYS;\n     }\n \n-    bool create_blank = false; // Indicate that the wallet is actually supposed to be blank and not just blank to make it encrypted\n     if (!request.params[2].isNull() && request.params[2].get_bool()) {\n-        create_blank = true;\n         flags |= WALLET_FLAG_BLANK_WALLET;\n     }\n     SecureString passphrase;\n@@ -2698,55 +2693,24 @@ static UniValue createwallet(const JSONRPCRequest& request)\n             // Empty string is invalid\n             throw JSONRPCError(RPC_WALLET_ENCRYPTION_FAILED, \"Cannot encrypt a wallet with a blank password\");\n         }\n-        // Born encrypted wallets need to be blank first so that wallet creation doesn't make any unencrypted keys\n-        flags |= WALLET_FLAG_BLANK_WALLET;\n     }\n \n     if (!request.params[4].isNull() && request.params[4].get_bool()) {\n         flags |= WALLET_FLAG_AVOID_REUSE;\n     }\n \n-    WalletLocation location(request.params[0].get_str());\n-    if (location.Exists()) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet \" + location.GetName() + \" already exists.\");\n-    }\n-\n-    // Wallet::Verify will check if we're trying to create a wallet with a duplication name.\n-    if (!CWallet::Verify(*g_rpc_interfaces->chain, location, false, error, warning)) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet file verification failed: \" + error);\n-    }\n-\n-    std::shared_ptr<CWallet> const wallet = CWallet::CreateWalletFromFile(*g_rpc_interfaces->chain, location, flags);\n-    if (!wallet) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet creation failed.\");\n-    }\n-\n-    // Encrypt the wallet if there's a passphrase\n-    if (!passphrase.empty() && !(flags & WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n-        if (!wallet->EncryptWallet(passphrase)) {\n-            throw JSONRPCError(RPC_WALLET_ENCRYPTION_FAILED, \"Error: Wallet created but failed to encrypt.\");\n-        }\n-\n-        if (!create_blank) {\n-            // Unlock the wallet\n-            if (!wallet->Unlock(passphrase)) {\n-                throw JSONRPCError(RPC_WALLET_ENCRYPTION_FAILED, \"Error: Wallet was encrypted but could not be unlocked\");\n-            }\n-\n-            // Set a seed for the wallet\n-            CPubKey master_pub_key = wallet->GenerateNewSeed();\n-            wallet->SetHDSeed(master_pub_key);\n-            wallet->NewKeyPool();\n-\n-            // Relock the wallet\n-            wallet->Lock();\n-        }\n+    std::string error;\n+    std::string warning;\n+    WalletCreationStatus status;\n+    std::shared_ptr<CWallet> wallet = CreateWallet(*g_rpc_interfaces->chain, request.params[0].get_str(), error, warning, status, passphrase, flags);\n+    if (status == WalletCreationStatus::CREATION_FAILED) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, error);\n+    } else if (status == WalletCreationStatus::ENCRYPTION_FAILED) {\n+        throw JSONRPCError(RPC_WALLET_ENCRYPTION_FAILED, error);\n+    } else if (status != WalletCreationStatus::SUCCESS) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet creation failed\");\n     }\n \n-    AddWallet(wallet);\n-\n-    wallet->postInitProcess();\n-\n     UniValue obj(UniValue::VOBJ);\n     obj.pushKV(\"name\", wallet->GetName());\n     obj.pushKV(\"warning\", warning);"
      },
      {
        "sha": "e444e4fbb1ed8e0ac82700ae0151a9737c80857d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 64,
        "deletions": 0,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1aecdf2063cbe28d4715ae5ae1a7e51b860c9f4d/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1aecdf2063cbe28d4715ae5ae1a7e51b860c9f4d/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=1aecdf2063cbe28d4715ae5ae1a7e51b860c9f4d",
        "patch": "@@ -160,6 +160,70 @@ std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string&\n     return LoadWallet(chain, WalletLocation(name), error, warning);\n }\n \n+std::shared_ptr<CWallet> CreateWallet(interfaces::Chain& chain, const std::string& name, std::string& error, std::string& warning, WalletCreationStatus& status, const SecureString& passphrase, uint64_t wallet_creation_flags)\n+{\n+    // Indicate that the wallet is actually supposed to be blank and not just blank to make it encrypted\n+    bool create_blank = (wallet_creation_flags & WALLET_FLAG_BLANK_WALLET);\n+\n+    // Born encrypted wallets need to be created blank first.\n+    if (!passphrase.empty()) {\n+        wallet_creation_flags |= WALLET_FLAG_BLANK_WALLET;\n+    }\n+\n+    // Check the wallet file location\n+    WalletLocation location(name);\n+    if (location.Exists()) {\n+        error = \"Wallet \" + location.GetName() + \" already exists.\";\n+        status = WalletCreationStatus::CREATION_FAILED;\n+        return nullptr;\n+    }\n+\n+    // Wallet::Verify will check if we're trying to create a wallet with a duplicate name.\n+    std::string wallet_error;\n+    if (!CWallet::Verify(chain, location, false, wallet_error, warning)) {\n+        error = \"Wallet file verification failed: \" + wallet_error;\n+        status = WalletCreationStatus::CREATION_FAILED;\n+        return nullptr;\n+    }\n+\n+    // Make the wallet\n+    std::shared_ptr<CWallet> wallet = CWallet::CreateWalletFromFile(chain, location, wallet_creation_flags);\n+    if (!wallet) {\n+        error = \"Wallet creation failed\";\n+        status = WalletCreationStatus::CREATION_FAILED;\n+        return nullptr;\n+    }\n+\n+    // Encrypt the wallet\n+    if (!passphrase.empty() && !(wallet_creation_flags & WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+        if (!wallet->EncryptWallet(passphrase)) {\n+            error = \"Error: Wallet created but failed to encrypt.\";\n+            status = WalletCreationStatus::ENCRYPTION_FAILED;\n+            return nullptr;\n+        }\n+        if (!create_blank) {\n+            // Unlock the wallet\n+            if (!wallet->Unlock(passphrase)) {\n+                error = \"Error: Wallet was encrypted but could not be unlocked\";\n+                status = WalletCreationStatus::ENCRYPTION_FAILED;\n+                return nullptr;\n+            }\n+\n+            // Set a seed for the wallet\n+            CPubKey master_pub_key = wallet->GenerateNewSeed();\n+            wallet->SetHDSeed(master_pub_key);\n+            wallet->NewKeyPool();\n+\n+            // Relock the wallet\n+            wallet->Lock();\n+        }\n+    }\n+    AddWallet(wallet);\n+    wallet->postInitProcess();\n+    status = WalletCreationStatus::SUCCESS;\n+    return wallet;\n+}\n+\n const uint32_t BIP32_HARDENED_KEY_LIMIT = 0x80000000;\n \n const uint256 CMerkleTx::ABANDON_HASH(uint256S(\"0000000000000000000000000000000000000000000000000000000000000001\"));"
      },
      {
        "sha": "b4357fb2ef32e1e871599ade55271856ec2cc125",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1aecdf2063cbe28d4715ae5ae1a7e51b860c9f4d/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1aecdf2063cbe28d4715ae5ae1a7e51b860c9f4d/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=1aecdf2063cbe28d4715ae5ae1a7e51b860c9f4d",
        "patch": "@@ -49,6 +49,14 @@ std::vector<std::shared_ptr<CWallet>> GetWallets();\n std::shared_ptr<CWallet> GetWallet(const std::string& name);\n std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const WalletLocation& location, std::string& error, std::string& warning);\n \n+enum WalletCreationStatus {\n+    SUCCESS,\n+    CREATION_FAILED,\n+    ENCRYPTION_FAILED\n+};\n+\n+std::shared_ptr<CWallet> CreateWallet(interfaces::Chain& chain, const std::string& name, std::string& error, std::string& warning, WalletCreationStatus& status, const SecureString& passphrase, uint64_t wallet_creation_flags);\n+\n //! Default for -keypool\n static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n //! -paytxfee default"
      }
    ]
  }
]