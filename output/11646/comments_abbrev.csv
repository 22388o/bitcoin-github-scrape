laanwj,2017-11-09T16:53:58Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/11646#issuecomment-343218402,343218402,
MarcoFalke,2017-11-09T17:02:53Z,"utACK bb3f030c5559a5053c45cbd0bfebdc3f26703033. (They have the same precision on my system, anyway)",https://github.com/bitcoin/bitcoin/pull/11646#issuecomment-343221417,343221417,
theuni,2017-11-09T18:13:00Z,"Sure, I went back and forth on which to prefer. In practice, I suspect they'll usually be the same anyway.\n\nAs a data point, while testing libstdc++/libc++/mingw, linux and osx, The only (compile-time) difference I observed between clocks was with libc++. It was the same for osx/linux:\n```\nhigh res precision: nanosecond\nsteady precision: nanosecond\nsystem precision: microsecond\n```\",https://github.com/bitcoin/bitcoin/pull/11646#issuecomment-343242338,343242338,
TheBlueMatt,2017-11-09T18:20:07Z,"I don't believe they can be the same - it seems like most non-windows platforms have a non-steady high_precision_clock, meaning you will get different results there...\n\nOn November 9, 2017 1:13:12 PM EST, Cory Fields <notifications@github.com> wrote:\n>Sure, I went back and forth on which to prefer. In practice, I suspect\n>they'll usually be the same anyway.\n>\n>As a data point, while testing ",https://github.com/bitcoin/bitcoin/pull/11646#issuecomment-343244477,343244477,
theuni,2017-11-09T22:32:15Z,utACK 620bae34cfe10e20daa0dcec7e4b9ffee8dfd397,https://github.com/bitcoin/bitcoin/pull/11646#issuecomment-343313704,343313704,
laanwj,2017-11-10T07:21:03Z,utACK 620bae3,https://github.com/bitcoin/bitcoin/pull/11646#issuecomment-343394018,343394018,
laanwj,2017-11-10T07:24:23Z,"This is kind of amusing; seems the person that introduced high_resolution_clock in the first place, Howard Hinnant, has second thought about it:\n\n> I would not be opposed to deprecating high_resolution_clock, with the intent to remove it after a suitable period of deprecation. The reality is that it is always a typedef to either steady_clock or system_clock, and the programmer is better off ch",https://github.com/bitcoin/bitcoin/pull/11646#issuecomment-343394563,343394563,
laanwj,2017-11-09T17:07:31Z,"Thinking about it, I'm not sure I like the static assert here - do we really prefer the benchmarks to not compile to them compiling with possibly lower precision? Normally a runtime warning would be enough for these kind of things.",https://github.com/bitcoin/bitcoin/pull/11646#discussion_r150025712,150025712,src/bench/bench.h
TheBlueMatt,2017-11-09T17:29:37Z,"I was figuring that since its (AFAIK) always the case that the steady_clock has microsecond precision it wasnt a big deal....would use a static_warning if possible, but I guess I could do a runtime print if we prefer that.",https://github.com/bitcoin/bitcoin/pull/11646#discussion_r150031653,150031653,src/bench/bench.h
laanwj,2017-11-09T17:59:07Z,"Don't care whether it's a runtime or compile-time warning.\nIt's just that I already predict complaints coming from someone building on some obscure platform that has lower precision, who probably doesn't even care about the benchmarks but just that the project doesn't build.",https://github.com/bitcoin/bitcoin/pull/11646#discussion_r150039503,150039503,src/bench/bench.h
TheBlueMatt,2017-11-09T18:06:28Z,"OK, I moved it to a runtime print.",https://github.com/bitcoin/bitcoin/pull/11646#discussion_r150041198,150041198,src/bench/bench.h
theuni,2017-11-09T18:20:54Z,Print to stderr to avoid breaking csv parsing?,https://github.com/bitcoin/bitcoin/pull/11646#discussion_r150044834,150044834,src/bench/bench.cpp
theuni,2017-11-09T18:28:46Z,comment is stale now,https://github.com/bitcoin/bitcoin/pull/11646#discussion_r150046844,150046844,src/bench/bench.h
MarcoFalke,2017-11-13T20:54:51Z,"I assume you meant to invert that condition, i.e. print the warning when our period is **not** less_equal micro-precision.",https://github.com/bitcoin/bitcoin/pull/11646#discussion_r150661773,150661773,src/bench/bench.cpp
