[
  {
    "sha": "620bae34cfe10e20daa0dcec7e4b9ffee8dfd397",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MjBiYWUzNGNmZTEwZTIwZGFhMGRjZWM3ZTRiOWZmZWU4ZGZkMzk3",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-11-09T16:48:13Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-11-09T19:36:11Z"
      },
      "message": "Require a steady clock for bench with at least micro precision",
      "tree": {
        "sha": "6963a58641a5777c3f9734a5f7440b268e3ee049",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6963a58641a5777c3f9734a5f7440b268e3ee049"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/620bae34cfe10e20daa0dcec7e4b9ffee8dfd397",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/620bae34cfe10e20daa0dcec7e4b9ffee8dfd397",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/620bae34cfe10e20daa0dcec7e4b9ffee8dfd397",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/620bae34cfe10e20daa0dcec7e4b9ffee8dfd397/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9e9e31aa10190bcf9136280946e49d893262f7f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e9e31aa10190bcf9136280946e49d893262f7f8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9e9e31aa10190bcf9136280946e49d893262f7f8"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "4c5a036773d8afdef0ac5cb3a76803f56e87ffa6",
        "filename": "src/bench/bench.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/620bae34cfe10e20daa0dcec7e4b9ffee8dfd397/src/bench/bench.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/620bae34cfe10e20daa0dcec7e4b9ffee8dfd397/src/bench/bench.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.cpp?ref=620bae34cfe10e20daa0dcec7e4b9ffee8dfd397",
        "patch": "@@ -23,6 +23,9 @@ void\n benchmark::BenchRunner::RunAll(benchmark::duration elapsedTimeForOne)\n {\n     perf_init();\n+    if (std::ratio_less_equal<benchmark::clock::period, std::micro>::value) {\n+        std::cerr << \"WARNING: Clock precision is worse than microsecond - benchmarks may be less accurate!\\n\";\n+    }\n     std::cout << \"#Benchmark\" << \",\" << \"count\" << \",\" << \"min(ns)\" << \",\" << \"max(ns)\" << \",\" << \"average(ns)\" << \",\"\n               << \"min_cycles\" << \",\" << \"max_cycles\" << \",\" << \"average_cycles\" << \"\\n\";\n "
      },
      {
        "sha": "ab5c3d5604d22962f90df7588c0e3047cea076a5",
        "filename": "src/bench/bench.h",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/620bae34cfe10e20daa0dcec7e4b9ffee8dfd397/src/bench/bench.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/620bae34cfe10e20daa0dcec7e4b9ffee8dfd397/src/bench/bench.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.h?ref=620bae34cfe10e20daa0dcec7e4b9ffee8dfd397",
        "patch": "@@ -37,13 +37,11 @@ BENCHMARK(CODE_TO_TIME);\n  */\n  \n namespace benchmark {\n-    // On many systems, the high_resolution_clock offers no better resolution than the steady_clock.\n-    // If that's the case, prefer the steady_clock.\n+    // In case high_resolution_clock is steady, prefer that, otherwise use steady_clock.\n     struct best_clock {\n         using hi_res_clock = std::chrono::high_resolution_clock;\n         using steady_clock = std::chrono::steady_clock;\n-        static constexpr bool steady_is_high_res = std::ratio_less_equal<steady_clock::period, hi_res_clock::period>::value;\n-        using type = std::conditional<steady_is_high_res, steady_clock, hi_res_clock>::type;\n+        using type = std::conditional<hi_res_clock::is_steady, hi_res_clock, steady_clock>::type;\n     };\n     using clock = best_clock::type;\n     using time_point = clock::time_point;"
      }
    ]
  }
]