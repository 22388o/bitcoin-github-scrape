[
  {
    "sha": "4e44f5bac4481d49ac53c458dcc5ca48e8b28414",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZTQ0ZjViYWM0NDgxZDQ5YWM1M2M0NThkY2M1Y2E0OGU4YjI4NDE0",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2021-06-06T20:13:00Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2021-06-09T16:34:21Z"
      },
      "message": "test: Correct outstanding -Werror=sign-compare errors\n\ne.g.:\nIn file included from /usr/local/include/boost/test/test_tools.hpp:46:\n/usr/local/include/boost/test/tools/old/impl.hpp:107:17: error: comparison of integers of different signs: 'const unsigned int' and 'const int' [-Werror,-Wsign-compare]\n    return left == right;\n           ~~~~ ^  ~~~~~\n/usr/local/include/boost/test/tools/old/impl.hpp:130:16: note: in instantiation of function template specialization 'boost::test_tools::tt_detail::equal_impl<unsigned int, int>' requested here\n        return equal_impl( left, right );\n               ^\n/usr/local/include/boost/test/tools/old/impl.hpp:145:16: note: in instantiation of function template specialization 'boost::test_tools::tt_detail::equal_impl_frwd::call_impl<unsigned int, int>' requested here\n        return call_impl( left, right, left_is_array() );\n               ^\n/usr/local/include/boost/test/tools/old/impl.hpp:92:50: note: in instantiation of function template specialization 'boost::test_tools::tt_detail::equal_impl_frwd::operator()<unsigned int, int>' requested here\nBOOST_PP_REPEAT( BOOST_TEST_MAX_PREDICATE_ARITY, IMPL_FRWD, _ )\n                                                 ^\n/usr/local/include/boost/preprocessor/repetition/repeat.hpp:30:26: note: expanded from macro 'BOOST_PP_REPEAT'\n                         ^\n/usr/local/include/boost/preprocessor/cat.hpp:22:32: note: expanded from macro 'BOOST_PP_CAT'\n                               ^\n/usr/local/include/boost/preprocessor/cat.hpp:29:34: note: expanded from macro 'BOOST_PP_CAT_I'\n                                 ^\n<scratch space>:153:1: note: expanded from here\nBOOST_PP_REPEAT_1\n^\ntest/streams_tests.cpp:122:5: note: in instantiation of function template specialization 'boost::test_tools::tt_detail::check_frwd<boost::test_tools::tt_detail::equal_impl_frwd, unsigned int, int>' requested here\n    BOOST_CHECK_EQUAL(varint, 54321);\n    ^\n\n/usr/local/include/boost/test/tools/old/impl.hpp:107:17: error: comparison of integers of different signs: 'const unsigned long long' and 'const long' [-Werror,-Wsign-compare]\n    return left == right;\n           ~~~~ ^  ~~~~~\n/usr/local/include/boost/test/tools/old/impl.hpp:130:16: note: in instantiation of function template specialization 'boost::test_tools::tt_detail::equal_impl<unsigned long long, long>' requested here\n        return equal_impl( left, right );\n               ^\n/usr/local/include/boost/test/tools/old/impl.hpp:145:16: note: in instantiation of function template specialization 'boost::test_tools::tt_detail::equal_impl_frwd::call_impl<unsigned long long, long>' requested here\n        return call_impl( left, right, left_is_array() );\n               ^\n/usr/local/include/boost/test/tools/old/impl.hpp:92:50: note: in instantiation of function template specialization 'boost::test_tools::tt_detail::equal_impl_frwd::operator()<unsigned long long, long>' requested here\nBOOST_PP_REPEAT( BOOST_TEST_MAX_PREDICATE_ARITY, IMPL_FRWD, _ )\n                                                 ^\n/usr/local/include/boost/preprocessor/repetition/repeat.hpp:30:26: note: expanded from macro 'BOOST_PP_REPEAT'\n                         ^\n/usr/local/include/boost/preprocessor/cat.hpp:22:32: note: expanded from macro 'BOOST_PP_CAT'\n                               ^\n/usr/local/include/boost/preprocessor/cat.hpp:29:34: note: expanded from macro 'BOOST_PP_CAT_I'\n                                 ^\n<scratch space>:161:1: note: expanded from here\nBOOST_PP_REPEAT_1\n^\ntest/serfloat_tests.cpp:41:5: note: in instantiation of function template specialization 'boost::test_tools::tt_detail::check_frwd<boost::test_tools::tt_detail::equal_impl_frwd, unsigned long long, long>' requested here\n    BOOST_CHECK_EQUAL(TestDouble(std::numeric_limits<double>::infinity()), 0x7ff0000000000000);\n    ^",
      "tree": {
        "sha": "59f8f31bbe9e64e83511a89cfc8230abd67d2b26",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/59f8f31bbe9e64e83511a89cfc8230abd67d2b26"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4e44f5bac4481d49ac53c458dcc5ca48e8b28414",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQEcBAABCgAGBQJgwO2RAAoJEG7l83hfeLNFbxwH/jLOXi14FE1sVi+T1c7/gygm\nUgJVaFUoAFtPFkcEffyxGxex2eRk5RYiUzJmZupU9w/O5/HDq0euidJsOYGBDAZH\nWMLwJd3jNx643u2pe7HZCM6uQgEBwO7a/8zC+BYaKiS0GvlmhzWQVRHQoZEnn8aX\nEzrvj/E5mjnpJ//BTeCjARxZNyl/gXb39rAz/2Ttqdt2PpprlrCp2NZjgsjFjOoC\njiVdw9abg8o/t5BOvevA70BB/8QQjVlYOZc8dnS0OLVpUdCokd/9JaHtyK+VlozS\nSK/bp2p+VRnpKKk2pgGWAV9TPmy4FylKx062MqvxXBoSwJjhXKR5hVIMqEtoCzo=\n=Ule4\n-----END PGP SIGNATURE-----",
        "payload": "tree 59f8f31bbe9e64e83511a89cfc8230abd67d2b26\nparent 93e38d5c06d9b32326585121b46bb59041d7cfed\nauthor Ben Woosley <ben.woosley@gmail.com> 1623010380 -0400\ncommitter Ben Woosley <ben.woosley@gmail.com> 1623256461 -0400\n\ntest: Correct outstanding -Werror=sign-compare errors\n\ne.g.:\nIn file included from /usr/local/include/boost/test/test_tools.hpp:46:\n/usr/local/include/boost/test/tools/old/impl.hpp:107:17: error: comparison of integers of different signs: 'const unsigned int' and 'const int' [-Werror,-Wsign-compare]\n    return left == right;\n           ~~~~ ^  ~~~~~\n/usr/local/include/boost/test/tools/old/impl.hpp:130:16: note: in instantiation of function template specialization 'boost::test_tools::tt_detail::equal_impl<unsigned int, int>' requested here\n        return equal_impl( left, right );\n               ^\n/usr/local/include/boost/test/tools/old/impl.hpp:145:16: note: in instantiation of function template specialization 'boost::test_tools::tt_detail::equal_impl_frwd::call_impl<unsigned int, int>' requested here\n        return call_impl( left, right, left_is_array() );\n               ^\n/usr/local/include/boost/test/tools/old/impl.hpp:92:50: note: in instantiation of function template specialization 'boost::test_tools::tt_detail::equal_impl_frwd::operator()<unsigned int, int>' requested here\nBOOST_PP_REPEAT( BOOST_TEST_MAX_PREDICATE_ARITY, IMPL_FRWD, _ )\n                                                 ^\n/usr/local/include/boost/preprocessor/repetition/repeat.hpp:30:26: note: expanded from macro 'BOOST_PP_REPEAT'\n                         ^\n/usr/local/include/boost/preprocessor/cat.hpp:22:32: note: expanded from macro 'BOOST_PP_CAT'\n                               ^\n/usr/local/include/boost/preprocessor/cat.hpp:29:34: note: expanded from macro 'BOOST_PP_CAT_I'\n                                 ^\n<scratch space>:153:1: note: expanded from here\nBOOST_PP_REPEAT_1\n^\ntest/streams_tests.cpp:122:5: note: in instantiation of function template specialization 'boost::test_tools::tt_detail::check_frwd<boost::test_tools::tt_detail::equal_impl_frwd, unsigned int, int>' requested here\n    BOOST_CHECK_EQUAL(varint, 54321);\n    ^\n\n/usr/local/include/boost/test/tools/old/impl.hpp:107:17: error: comparison of integers of different signs: 'const unsigned long long' and 'const long' [-Werror,-Wsign-compare]\n    return left == right;\n           ~~~~ ^  ~~~~~\n/usr/local/include/boost/test/tools/old/impl.hpp:130:16: note: in instantiation of function template specialization 'boost::test_tools::tt_detail::equal_impl<unsigned long long, long>' requested here\n        return equal_impl( left, right );\n               ^\n/usr/local/include/boost/test/tools/old/impl.hpp:145:16: note: in instantiation of function template specialization 'boost::test_tools::tt_detail::equal_impl_frwd::call_impl<unsigned long long, long>' requested here\n        return call_impl( left, right, left_is_array() );\n               ^\n/usr/local/include/boost/test/tools/old/impl.hpp:92:50: note: in instantiation of function template specialization 'boost::test_tools::tt_detail::equal_impl_frwd::operator()<unsigned long long, long>' requested here\nBOOST_PP_REPEAT( BOOST_TEST_MAX_PREDICATE_ARITY, IMPL_FRWD, _ )\n                                                 ^\n/usr/local/include/boost/preprocessor/repetition/repeat.hpp:30:26: note: expanded from macro 'BOOST_PP_REPEAT'\n                         ^\n/usr/local/include/boost/preprocessor/cat.hpp:22:32: note: expanded from macro 'BOOST_PP_CAT'\n                               ^\n/usr/local/include/boost/preprocessor/cat.hpp:29:34: note: expanded from macro 'BOOST_PP_CAT_I'\n                                 ^\n<scratch space>:161:1: note: expanded from here\nBOOST_PP_REPEAT_1\n^\ntest/serfloat_tests.cpp:41:5: note: in instantiation of function template specialization 'boost::test_tools::tt_detail::check_frwd<boost::test_tools::tt_detail::equal_impl_frwd, unsigned long long, long>' requested here\n    BOOST_CHECK_EQUAL(TestDouble(std::numeric_limits<double>::infinity()), 0x7ff0000000000000);\n    ^\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e44f5bac4481d49ac53c458dcc5ca48e8b28414",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4e44f5bac4481d49ac53c458dcc5ca48e8b28414",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e44f5bac4481d49ac53c458dcc5ca48e8b28414/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "93e38d5c06d9b32326585121b46bb59041d7cfed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93e38d5c06d9b32326585121b46bb59041d7cfed",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/93e38d5c06d9b32326585121b46bb59041d7cfed"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "7876c0bcdaf66e8aa34ce165fbb96d7fb9072100",
        "filename": "src/test/serfloat_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e44f5bac4481d49ac53c458dcc5ca48e8b28414/src/test/serfloat_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e44f5bac4481d49ac53c458dcc5ca48e8b28414/src/test/serfloat_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/serfloat_tests.cpp?ref=4e44f5bac4481d49ac53c458dcc5ca48e8b28414",
        "patch": "@@ -36,9 +36,9 @@ uint64_t TestDouble(double f) {\n } // namespace\n \n BOOST_AUTO_TEST_CASE(double_serfloat_tests) {\n-    BOOST_CHECK_EQUAL(TestDouble(0.0), 0);\n+    BOOST_CHECK_EQUAL(TestDouble(0.0), 0U);\n     BOOST_CHECK_EQUAL(TestDouble(-0.0), 0x8000000000000000);\n-    BOOST_CHECK_EQUAL(TestDouble(std::numeric_limits<double>::infinity()), 0x7ff0000000000000);\n+    BOOST_CHECK_EQUAL(TestDouble(std::numeric_limits<double>::infinity()), 0x7ff0000000000000U);\n     BOOST_CHECK_EQUAL(TestDouble(-std::numeric_limits<double>::infinity()), 0xfff0000000000000);\n     BOOST_CHECK_EQUAL(TestDouble(0.5), 0x3fe0000000000000ULL);\n     BOOST_CHECK_EQUAL(TestDouble(1.0), 0x3ff0000000000000ULL);\n@@ -48,8 +48,8 @@ BOOST_AUTO_TEST_CASE(double_serfloat_tests) {\n \n     // Roundtrip test on IEC559-compatible systems\n     if (std::numeric_limits<double>::is_iec559) {\n-        BOOST_CHECK_EQUAL(sizeof(double), 8);\n-        BOOST_CHECK_EQUAL(sizeof(uint64_t), 8);\n+        BOOST_CHECK_EQUAL(sizeof(double), 8U);\n+        BOOST_CHECK_EQUAL(sizeof(uint64_t), 8U);\n         // Test extreme values\n         TestDouble(std::numeric_limits<double>::min());\n         TestDouble(-std::numeric_limits<double>::min());"
      },
      {
        "sha": "acd0151e1a134db484731c7bdf8fa46f100fe737",
        "filename": "src/test/streams_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e44f5bac4481d49ac53c458dcc5ca48e8b28414/src/test/streams_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e44f5bac4481d49ac53c458dcc5ca48e8b28414/src/test/streams_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/streams_tests.cpp?ref=4e44f5bac4481d49ac53c458dcc5ca48e8b28414",
        "patch": "@@ -119,7 +119,7 @@ BOOST_AUTO_TEST_CASE(streams_vector_reader_rvalue)\n     uint32_t varint = 0;\n     // Deserialize into r-value\n     reader >> VARINT(varint);\n-    BOOST_CHECK_EQUAL(varint, 54321);\n+    BOOST_CHECK_EQUAL(varint, 54321U);\n     BOOST_CHECK(reader.empty());\n }\n "
      }
    ]
  }
]