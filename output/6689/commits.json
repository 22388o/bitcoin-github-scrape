[
  {
    "sha": "2cb8ee9ac7fb4d2600305a61400ab5e8a200b722",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyY2I4ZWU5YWM3ZmI0ZDI2MDAzMDVhNjE0MDBhYjVlOGEyMDBiNzIy",
    "commit": {
      "author": {
        "name": "Pavel Vasin",
        "email": "pavel@vasin.nl",
        "date": "2015-06-30T20:10:27Z"
      },
      "committer": {
        "name": "Pavel Vasin",
        "email": "pavel@vasin.nl",
        "date": "2015-07-16T09:31:36Z"
      },
      "message": "remove unused inv from ConnectTip()",
      "tree": {
        "sha": "7c558aa45a178e9d968a6968e508e90d427566d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7c558aa45a178e9d968a6968e508e90d427566d8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2cb8ee9ac7fb4d2600305a61400ab5e8a200b722",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2cb8ee9ac7fb4d2600305a61400ab5e8a200b722",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2cb8ee9ac7fb4d2600305a61400ab5e8a200b722",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2cb8ee9ac7fb4d2600305a61400ab5e8a200b722/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "ed789ceade71f19f04340a4041d7d3ef43c44086",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed789ceade71f19f04340a4041d7d3ef43c44086",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ed789ceade71f19f04340a4041d7d3ef43c44086"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "fb90d7578c7e683d56377b87bc853c22346ada87",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2cb8ee9ac7fb4d2600305a61400ab5e8a200b722/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2cb8ee9ac7fb4d2600305a61400ab5e8a200b722/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=2cb8ee9ac7fb4d2600305a61400ab5e8a200b722",
        "patch": "@@ -2059,15 +2059,14 @@ bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew, CBlock *\n     LogPrint(\"bench\", \"  - Load block from disk: %.2fms [%.2fs]\\n\", (nTime2 - nTime1) * 0.001, nTimeReadFromDisk * 0.000001);\n     {\n         CCoinsViewCache view(pcoinsTip);\n-        CInv inv(MSG_BLOCK, pindexNew->GetBlockHash());\n         bool rv = ConnectBlock(*pblock, state, pindexNew, view);\n         GetMainSignals().BlockChecked(*pblock, state);\n         if (!rv) {\n             if (state.IsInvalid())\n                 InvalidBlockFound(pindexNew, state);\n             return error(\"ConnectTip(): ConnectBlock %s failed\", pindexNew->GetBlockHash().ToString());\n         }\n-        mapBlockSource.erase(inv.hash);\n+        mapBlockSource.erase(pindexNew->GetBlockHash());\n         nTime3 = GetTimeMicros(); nTimeConnectTotal += nTime3 - nTime2;\n         LogPrint(\"bench\", \"  - Connect total: %.2fms [%.2fs]\\n\", (nTime3 - nTime2) * 0.001, nTimeConnectTotal * 0.000001);\n         assert(view.Flush());"
      }
    ]
  },
  {
    "sha": "dca6040a8625bfdb905f3aa99e44bb31e84352b9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkY2E2MDQwYTg2MjViZmRiOTA1ZjNhYTk5ZTQ0YmIzMWU4NDM1MmI5",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-07-09T11:23:44Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-07-16T09:54:28Z"
      },
      "message": "[Qt] remove std namespace polution from code",
      "tree": {
        "sha": "4e4fb1d727cdb5fa669caa4c819071bf3ac40fe4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4e4fb1d727cdb5fa669caa4c819071bf3ac40fe4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dca6040a8625bfdb905f3aa99e44bb31e84352b9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dca6040a8625bfdb905f3aa99e44bb31e84352b9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dca6040a8625bfdb905f3aa99e44bb31e84352b9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dca6040a8625bfdb905f3aa99e44bb31e84352b9/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "ed789ceade71f19f04340a4041d7d3ef43c44086",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed789ceade71f19f04340a4041d7d3ef43c44086",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ed789ceade71f19f04340a4041d7d3ef43c44086"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 11,
      "deletions": 20
    },
    "files": [
      {
        "sha": "778dbcb1ca3dc760f7a54dbcf0a2f1fbc7a22bbe",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dca6040a8625bfdb905f3aa99e44bb31e84352b9/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dca6040a8625bfdb905f3aa99e44bb31e84352b9/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=dca6040a8625bfdb905f3aa99e44bb31e84352b9",
        "patch": "@@ -30,7 +30,6 @@\n #include <QTreeWidget>\n #include <QTreeWidgetItem>\n \n-using namespace std;\n QList<CAmount> CoinControlDialog::payAmounts;\n CCoinControl* CoinControlDialog::coinControl = new CCoinControl();\n bool CoinControlDialog::fSubtractFeeFromAmount = false;\n@@ -442,7 +441,7 @@ QString CoinControlDialog::getPriorityLabel(double dPriority, double mempoolEsti\n // shows count of locked unspent outputs\n void CoinControlDialog::updateLabelLocked()\n {\n-    vector<COutPoint> vOutpts;\n+    std::vector<COutPoint> vOutpts;\n     model->listLockedCoins(vOutpts);\n     if (vOutpts.size() > 0)\n     {\n@@ -467,7 +466,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n \n         if (amount > 0)\n         {\n-            CTxOut txout(amount, (CScript)vector<unsigned char>(24, 0));\n+            CTxOut txout(amount, (CScript)std::vector<unsigned char>(24, 0));\n             txDummy.vout.push_back(txout);\n             if (txout.IsDust(::minRelayTxFee))\n                fDust = true;\n@@ -487,8 +486,8 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     int nQuantityUncompressed   = 0;\n     bool fAllowFree             = false;\n \n-    vector<COutPoint> vCoinControl;\n-    vector<COutput>   vOutputs;\n+    std::vector<COutPoint> vCoinControl;\n+    std::vector<COutput>   vOutputs;\n     coinControl->ListSelected(vCoinControl);\n     model->getOutputs(vCoinControl, vOutputs);\n \n@@ -568,7 +567,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n             // Never create dust outputs; if we would, just add the dust to the fee.\n             if (nChange > 0 && nChange < CENT)\n             {\n-                CTxOut txout(nChange, (CScript)vector<unsigned char>(24, 0));\n+                CTxOut txout(nChange, (CScript)std::vector<unsigned char>(24, 0));\n                 if (txout.IsDust(::minRelayTxFee))\n                 {\n                     if (CoinControlDialog::fSubtractFeeFromAmount) // dust-change will be raised until no dust\n@@ -687,10 +686,10 @@ void CoinControlDialog::updateView()\n     int nDisplayUnit = model->getOptionsModel()->getDisplayUnit();\n     double mempoolEstimatePriority = mempool.estimatePriority(nTxConfirmTarget);\n \n-    map<QString, vector<COutput> > mapCoins;\n+    std::map<QString, std::vector<COutput> > mapCoins;\n     model->listCoins(mapCoins);\n \n-    BOOST_FOREACH(const PAIRTYPE(QString, vector<COutput>)& coins, mapCoins) {\n+    BOOST_FOREACH(const PAIRTYPE(QString, std::vector<COutput>)& coins, mapCoins) {\n         QTreeWidgetItem *itemWalletAddress = new QTreeWidgetItem();\n         itemWalletAddress->setCheckState(COLUMN_CHECKBOX, Qt::Unchecked);\n         QString sWalletAddress = coins.first;"
      },
      {
        "sha": "78a783dea4680c6e17a34e1fea4c79cf53560380",
        "filename": "src/qt/paymentrequestplus.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dca6040a8625bfdb905f3aa99e44bb31e84352b9/src/qt/paymentrequestplus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dca6040a8625bfdb905f3aa99e44bb31e84352b9/src/qt/paymentrequestplus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.cpp?ref=dca6040a8625bfdb905f3aa99e44bb31e84352b9",
        "patch": "@@ -19,8 +19,6 @@\n #include <QDebug>\n #include <QSslCertificate>\n \n-using namespace std;\n-\n class SSLVerifyError : public std::runtime_error\n {\n public:\n@@ -49,7 +47,7 @@ bool PaymentRequestPlus::parse(const QByteArray& data)\n     return true;\n }\n \n-bool PaymentRequestPlus::SerializeToString(string* output) const\n+bool PaymentRequestPlus::SerializeToString(std::string* output) const\n {\n     return paymentRequest.SerializeToString(output);\n }"
      },
      {
        "sha": "6481b0046e7603ba6d8fb2d97431f5202c9acf0c",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dca6040a8625bfdb905f3aa99e44bb31e84352b9/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dca6040a8625bfdb905f3aa99e44bb31e84352b9/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=dca6040a8625bfdb905f3aa99e44bb31e84352b9",
        "patch": "@@ -46,8 +46,6 @@\n #include <QUrlQuery>\n #endif\n \n-using namespace std;\n-\n const int BITCOIN_IPC_CONNECT_TIMEOUT = 1000; // milliseconds\n const QString BITCOIN_IPC_PREFIX(\"bitcoin:\");\n // BIP70 payment protocol messages\n@@ -647,7 +645,7 @@ void PaymentServer::fetchPaymentACK(CWallet* wallet, SendCoinsRecipient recipien\n     // Create a new refund address, or re-use:\n     QString account = tr(\"Refund from %1\").arg(recipient.authenticatedMerchant);\n     std::string strAccount = account.toStdString();\n-    set<CTxDestination> refundAddresses = wallet->GetAccountAddresses(strAccount);\n+    std::set<CTxDestination> refundAddresses = wallet->GetAccountAddresses(strAccount);\n     if (!refundAddresses.empty()) {\n         CScript s = GetScriptForDestination(*refundAddresses.begin());\n         payments::Output* refund_to = payment.add_refund_to();"
      },
      {
        "sha": "af78a51d0fc3f58e6397ab3a11e971dd6e16d93c",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dca6040a8625bfdb905f3aa99e44bb31e84352b9/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dca6040a8625bfdb905f3aa99e44bb31e84352b9/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=dca6040a8625bfdb905f3aa99e44bb31e84352b9",
        "patch": "@@ -21,8 +21,6 @@\n #include <stdint.h>\n #include <string>\n \n-using namespace std;\n-\n QString TransactionDesc::FormatTxStatus(const CWalletTx& wtx)\n {\n     AssertLockHeld(cs_main);\n@@ -243,14 +241,14 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n     strHTML += \"<b>\" + tr(\"Transaction ID\") + \":</b> \" + TransactionRecord::formatSubTxId(wtx.GetHash(), rec->idx) + \"<br>\";\n \n     // Message from normal bitcoin:URI (bitcoin:123...?message=example)\n-    Q_FOREACH (const PAIRTYPE(string, string)& r, wtx.vOrderForm)\n+    Q_FOREACH (const PAIRTYPE(std::string, std::string)& r, wtx.vOrderForm)\n         if (r.first == \"Message\")\n             strHTML += \"<br><b>\" + tr(\"Message\") + \":</b><br>\" + GUIUtil::HtmlEscape(r.second, true) + \"<br>\";\n \n     //\n     // PaymentRequest info:\n     //\n-    Q_FOREACH (const PAIRTYPE(string, string)& r, wtx.vOrderForm)\n+    Q_FOREACH (const PAIRTYPE(std::string, std::string)& r, wtx.vOrderForm)\n     {\n         if (r.first == \"PaymentRequest\")\n         {"
      },
      {
        "sha": "168a0255ffd39abbc5d6ec95236ec8a55621bcf0",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dca6040a8625bfdb905f3aa99e44bb31e84352b9/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dca6040a8625bfdb905f3aa99e44bb31e84352b9/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=dca6040a8625bfdb905f3aa99e44bb31e84352b9",
        "patch": "@@ -25,8 +25,6 @@\n #include <QSet>\n #include <QTimer>\n \n-using namespace std;\n-\n WalletModel::WalletModel(CWallet *wallet, OptionsModel *optionsModel, QObject *parent) :\n     QObject(parent), wallet(wallet), optionsModel(optionsModel), addressTableModel(0),\n     transactionTableModel(0),"
      }
    ]
  },
  {
    "sha": "b01981e758b9d2a26dc8588431412e3e81727968",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMDE5ODFlNzU4YjlkMmEyNmRjODU4ODQzMTQxMmUzZTgxNzI3OTY4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-17T05:38:02Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-17T06:38:42Z"
      },
      "message": "Merge pull request #6430\n\n3361edd doc: Add NBitcoin to bitcoinconsensus examples (Braydon Fuller)\nb1bac4e Add description for bitcoinconsensus_ERR_OK (Braydon Fuller)\nc156ada doc: add documentation for shared library libbitcoinconsensus (Braydon Fuller)",
      "tree": {
        "sha": "217be996dc4fcd0c5770d74c89b7f4aaca68dfa5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/217be996dc4fcd0c5770d74c89b7f4aaca68dfa5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b01981e758b9d2a26dc8588431412e3e81727968",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVqKLyAAoJEHSBCwEjRsmmPLcIAJUaBBlxLJ/C3hRx743pmaj+\nqOfuDx+/Zz68da+c2kERFg0n112SsQj47hzqmxJ+Y/7HDWMKHVi5dD00/pIwNn09\nvkKgmyUwU19l999BfbN56mpj03mBktwFh84ZkKcPnUG2+4Uka3JHkBZxup0wkr3V\nD+CPEvClnrGAnx+qcuO/P/r79RNboOEyVxprWO88lbEIxuDlqP2kryfPdoqaxAu2\nZv2ffjNzR8yF6PloPT7F3yGMHOzJOtPXq+fWuP8hDpX8D/Af/RrCqQiFeMx+lTxN\n9M8sqcdO/GB8BeGTQigGLWrW/MDzJkY+JTgU/pjn90Q7jn4G5u5F3JrWJjX4E5w=\n=8meP\n-----END PGP SIGNATURE-----",
        "payload": "tree 217be996dc4fcd0c5770d74c89b7f4aaca68dfa5\nparent ed789ceade71f19f04340a4041d7d3ef43c44086\nparent 3361edd01046aab137928d1e6e2468dbfc4b946e\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1437111482 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1437115122 +0200\n\nMerge pull request #6430\n\n3361edd doc: Add NBitcoin to bitcoinconsensus examples (Braydon Fuller)\nb1bac4e Add description for bitcoinconsensus_ERR_OK (Braydon Fuller)\nc156ada doc: add documentation for shared library libbitcoinconsensus (Braydon Fuller)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b01981e758b9d2a26dc8588431412e3e81727968",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b01981e758b9d2a26dc8588431412e3e81727968",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b01981e758b9d2a26dc8588431412e3e81727968/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ed789ceade71f19f04340a4041d7d3ef43c44086",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed789ceade71f19f04340a4041d7d3ef43c44086",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ed789ceade71f19f04340a4041d7d3ef43c44086"
      },
      {
        "sha": "3361edd01046aab137928d1e6e2468dbfc4b946e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3361edd01046aab137928d1e6e2468dbfc4b946e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3361edd01046aab137928d1e6e2468dbfc4b946e"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 43,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7b0c39d3834f53722b7f6773810d982cad077b53",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b01981e758b9d2a26dc8588431412e3e81727968/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b01981e758b9d2a26dc8588431412e3e81727968/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=b01981e758b9d2a26dc8588431412e3e81727968",
        "patch": "@@ -58,6 +58,7 @@ The Bitcoin repo's [root README](https://github.com/bitcoin/bitcoin/blob/master/\n - [Translation Strings Policy](translation_strings_policy.md)\n - [Unit Tests](unit-tests.md)\n - [Unauthenticated REST Interface](REST-interface.md)\n+- [Shared Libraries](shared-libraries.md)\n - [BIPS](bips.md)\n - [Dnsseed Policy](dnsseed-policy.md)\n "
      },
      {
        "sha": "1fc32112ceabc6c9fa93a3cd9a363c4b08e69c58",
        "filename": "doc/shared-libraries.md",
        "status": "added",
        "additions": 42,
        "deletions": 0,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b01981e758b9d2a26dc8588431412e3e81727968/doc/shared-libraries.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b01981e758b9d2a26dc8588431412e3e81727968/doc/shared-libraries.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/shared-libraries.md?ref=b01981e758b9d2a26dc8588431412e3e81727968",
        "patch": "@@ -0,0 +1,42 @@\n+Shared Libraries\n+================\n+\n+## bitcoinconsensus\n+\n+The purpose of this library is to make the verification functionality that is critical to Bitcoin's consensus available to other applications, e.g. to language bindings.\n+\n+### API\n+\n+The interface is defined in the C header `bitcoinconsensus.h` located in  `src/script/bitcoinconsensus.h`.\n+\n+#### Version\n+\n+`bitcoinconsensus_version` returns an `unsigned int` with the the API version *(currently at an experimental `0`)*.\n+\n+#### Script Validation\n+\n+`bitcoinconsensus_verify_script` returns an `int` with the status of the verification. It will be `1` if the input script correctly spends the previous output `scriptPubKey`.\n+\n+##### Parameters\n+- `const unsigned char *scriptPubKey` - The previous output script that encumbers spending.\n+- `unsigned int scriptPubKeyLen` - The number of bytes for the `scriptPubKey`.\n+- `const unsigned char *txTo` - The transaction with the input that is spending the previous output.\n+- `unsigned int txToLen` - The number of bytes for the `txTo`.\n+- `unsigned int nIn` - The index of the input in `txTo` that spends the `scriptPubKey`.\n+- `unsigned int flags` - The script validation flags *(see below)*.\n+- `bitcoinconsensus_error* err` - Will have the error/success code for the operation *(see below)*.\n+\n+##### Script Flags\n+- `bitcoinconsensus_SCRIPT_FLAGS_VERIFY_NONE`\n+- `bitcoinconsensus_SCRIPT_FLAGS_VERIFY_P2SH` - Evaluate P2SH ([BIP16](https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki)) subscripts\n+- `bitcoinconsensus_SCRIPT_FLAGS_VERIFY_DERSIG` - Enforce strict DER ([BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)) compliance\n+\n+##### Errors\n+- `bitcoinconsensus_ERR_OK` - No errors with input parameters *(see the return value of `bitcoinconsensus_verify_script` for the verification status)*\n+- `bitcoinconsensus_ERR_TX_INDEX` - An invalid index for `txTo`\n+- `bitcoinconsensus_ERR_TX_SIZE_MISMATCH` - `txToLen` did not match with the size of `txTo`\n+- `bitcoinconsensus_ERR_DESERIALIZE` - An error deserializing `txTo`\n+\n+### Example Implementations\n+- [NBitcoin](https://github.com/NicolasDorier/NBitcoin/blob/master/NBitcoin/Script.cs#L814) (.NET Bindings)\n+- [node-libbitcoinconsensus](https://github.com/bitpay/node-libbitcoinconsensus) (Node.js Bindings)"
      }
    ]
  },
  {
    "sha": "059b3525c444ea35f5c017425b75ac2254a3f5f2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNTliMzUyNWM0NDRlYTM1ZjVjMDE3NDI1Yjc1YWMyMjU0YTNmNWYy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-17T06:41:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-17T06:42:19Z"
      },
      "message": "Merge pull request #6434\n\n83b48c8 configure --enable-debug changes (Gavin Andresen)",
      "tree": {
        "sha": "687982941816dd302d3434f2e47ecbbe222d4514",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/687982941816dd302d3434f2e47ecbbe222d4514"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/059b3525c444ea35f5c017425b75ac2254a3f5f2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVqKPLAAoJEHSBCwEjRsmmZYcIALIIa+/FCWW3uDqziBl9YKCS\nwiMT/zo1/2+EE+VQS9ttTj8PmLAbC+1TVGTAa1i6EUrVr3pIvEWrto/RPVIEx7C8\nyxbeBuP8fgxreW8UfXTH0yIFT6VSo8hJ0vZkqOqP71IsU1SeaG1ZUO3dFDdD0EEF\nvsT/kxQY+KaMfJ/n/1ssvx/kzMr3nskULwac7z5w2Nyx6J/1lILdSrBWaMwdbSFM\nYQO4OXf+zOIEI+Ae2OMUHYWMkiQ/9JtBuPQuqP8S5QyNF+VbUnxDJHM1QoKZ5q98\nbk3WqqDewb9VwoFFeiq6jZZ/U+qbfAr6d3NeLDrOKe0rBCNNgSPgW7ZYWlAExOs=\n=76E0\n-----END PGP SIGNATURE-----",
        "payload": "tree 687982941816dd302d3434f2e47ecbbe222d4514\nparent b01981e758b9d2a26dc8588431412e3e81727968\nparent 83b48c89718e7b3fc2b180be992446a068f7fdcc\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1437115304 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1437115339 +0200\n\nMerge pull request #6434\n\n83b48c8 configure --enable-debug changes (Gavin Andresen)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/059b3525c444ea35f5c017425b75ac2254a3f5f2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/059b3525c444ea35f5c017425b75ac2254a3f5f2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/059b3525c444ea35f5c017425b75ac2254a3f5f2/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b01981e758b9d2a26dc8588431412e3e81727968",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b01981e758b9d2a26dc8588431412e3e81727968",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b01981e758b9d2a26dc8588431412e3e81727968"
      },
      {
        "sha": "83b48c89718e7b3fc2b180be992446a068f7fdcc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83b48c89718e7b3fc2b180be992446a068f7fdcc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/83b48c89718e7b3fc2b180be992446a068f7fdcc"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "7f90b5f395cb8948bbe3a13d801cc3b9718e9174",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/059b3525c444ea35f5c017425b75ac2254a3f5f2/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/059b3525c444ea35f5c017425b75ac2254a3f5f2/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=059b3525c444ea35f5c017425b75ac2254a3f5f2",
        "patch": "@@ -147,12 +147,13 @@ AC_ARG_ENABLE([debug],\n     [enable_debug=no])\n \n if test \"x$enable_debug\" = xyes; then\n+    CPPFLAGS=\"$CPPFLAGS -DDEBUG -DDEBUG_LOCKORDER\"\n     if test \"x$GCC\" = xyes; then\n-        CFLAGS=\"-g3 -O0 -DDEBUG\"\n+        CFLAGS=\"$CFLAGS -g3 -O0\"\n     fi\n     \n     if test \"x$GXX\" = xyes; then\n-        CXXFLAGS=\"-g3 -O0 -DDEBUG\"\n+        CXXFLAGS=\"$CXXFLAGS -g3 -O0\"\n     fi\n fi \n "
      }
    ]
  },
  {
    "sha": "7ed3d932941f1f50e8dc271728624b9d1de27d91",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZWQzZDkzMjk0MWYxZjUwZThkYzI3MTcyODYyNGI5ZDFkZTI3ZDkx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-17T06:55:21Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-17T06:55:28Z"
      },
      "message": "Merge pull request #6442\n\n6d6cec3 Create centaur1-key.pgp (centaur1)",
      "tree": {
        "sha": "b829b59b541011a9dcfb712e25124cfe8fd70ecf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b829b59b541011a9dcfb712e25124cfe8fd70ecf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7ed3d932941f1f50e8dc271728624b9d1de27d91",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVqKbgAAoJEHSBCwEjRsmmd/EH/A18Tw+cWvnP8si2t3h2Q+Hp\npT1lFgyYBesW28S22Wae47TMjDpJtghSstdYgdquD9eKWY7Rc7edBCwDAXPh03eI\n5g230IMgq3/XnWmY/YdJcFebGJ261a2s/Dw0zwjhPA+hZ35J/lm4IFrpCWXhIQS9\nHBpb8+ffZ1Dv9FFvd1sa+BLolfihsBdmmZNITmPbCYoMlL34oVnUdtgwpp9kZRx7\naUqNASjUaWYKTfyKaJMz03yJcR3tgYclPMLr11Te88YhcXWKorQJOxsixh2ffB7S\nemeU7LtP98BJFLjL4tFtLZsxu5T2pUuSyriiD4SWgaU/rr3lczUprHs/5heXMhw=\n=LEdo\n-----END PGP SIGNATURE-----",
        "payload": "tree b829b59b541011a9dcfb712e25124cfe8fd70ecf\nparent 059b3525c444ea35f5c017425b75ac2254a3f5f2\nparent 6d6cec383823e59db62072000636aad76cf48273\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1437116121 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1437116128 +0200\n\nMerge pull request #6442\n\n6d6cec3 Create centaur1-key.pgp (centaur1)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ed3d932941f1f50e8dc271728624b9d1de27d91",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7ed3d932941f1f50e8dc271728624b9d1de27d91",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ed3d932941f1f50e8dc271728624b9d1de27d91/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "059b3525c444ea35f5c017425b75ac2254a3f5f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/059b3525c444ea35f5c017425b75ac2254a3f5f2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/059b3525c444ea35f5c017425b75ac2254a3f5f2"
      },
      {
        "sha": "6d6cec383823e59db62072000636aad76cf48273",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d6cec383823e59db62072000636aad76cf48273",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6d6cec383823e59db62072000636aad76cf48273"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 30,
      "deletions": 0
    },
    "files": [
      {
        "sha": "71a42e514881bc6383531ea2c82c93998453245e",
        "filename": "contrib/gitian-downloader/centaur1-key.pgp",
        "status": "added",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ed3d932941f1f50e8dc271728624b9d1de27d91/contrib/gitian-downloader/centaur1-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ed3d932941f1f50e8dc271728624b9d1de27d91/contrib/gitian-downloader/centaur1-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-downloader/centaur1-key.pgp?ref=7ed3d932941f1f50e8dc271728624b9d1de27d91",
        "patch": "@@ -0,0 +1,30 @@\n+-----BEGIN PGP PUBLIC KEY BLOCK-----\n+Version: GnuPG v1.4.12 (GNU/Linux)\n+\n+mQENBFTjy20BCAC7q/tpPQ9tdEALpDqe8kpVAT5ysOJDLDeFEE1J5O8NuDFuibiN\n+XYkb2nAt4Vdr23in9z0LAiTSgr7znndnab/rOSn6pXbXQfLTHrSnAeClTHVQVPSq\n+m5kNg1vWvNxFtIpZ/fGsc6LLmIHxdgeLn+NOpvNx7RzF/N5ctX51vMxMUeDq3daZ\n+tLneJVRj5tXHRJcjW62cyiNFasYAZ3JC8wjwzr0SOndc7kygbEVCTWNkTAGd1Lax\n+KSJW6TjhBPK7j+RljS5nfx/Tf+OG4AoA7/53593YL7Shfx8rwWVIeF4nS6efFnuf\n+eIj+aS5haGyFvNgw8DE7QUCrPiUxeA8wuXu7ABEBAAG0H2NlbnRhdXIgPGNlbnRh\n+dXJAcGhvbmVib29rLmNvbT6JATgEEwECACIFAlTjy20CGwMGCwkIBwMCBhUIAgkK\n+CwQWAgMBAh4BAheAAAoJEP+V+qlxaXQF8r4IAKnE8D9AOTdM/YvYxpCeI6ndEUUs\n+8NcotpbIBJ67vr1Dsot7Ee0PrmIYOiInA+T81lPUDecJYrnemVefhquiyJ5VJ4/d\n+z2zUKBfxjeOsj/PHgcowVxMco8fNEWQa2fZX6X8RVADIsUnIIwpRFVUcbssK/3xJ\n+k46vjWwYNQywht/ZgFBesOgywyz5GozmwrK6TixJxKk8M69GFz2fHhJjp1bxDZuk\n+Rs3YmWeOcCasoJ6GbvIboKQSPHGyEOCqIuiBL63YMa0n1FU0ooDteNZ04eRinIhc\n+fo9JC66fQrUFn8CmmRTtdZOrZ/efYjQtfLAunCkzSM3p6DE9u4Y7d8E5Ar65AQ0E\n+VOPLbQEIANhxtouZuQmw+k89toBWXw75s+csxKHKZuhw8QntaFyFYq3IOnIeV1sK\n+PRENkWsqDInjEM8k9eZ6pnS11EQ1rrFffss+mprTbL3I4S489tJETYZKHrmmox7h\n+ustRi5eXBEmGeKW0mqpb/9r4okpTaIfs+EJ4C9jj0ghWkqU0acyzanJiUY/0R46F\n+vPfGfHnhZ5TAl3eiL0H2JkF6taG8K1XOLemahdZHE9wJh0ZFWnDDkA1l6j2rtYga\n+jEi/ucOp5GkmumxbFiVgponDBqBpsscRrCV6SbZs9gz3dQNgqe5A3CKGZRuVCY6s\n+djRJelgqCF5+dV0fAT0oF3C/3E5KAgcAEQEAAYkBHwQYAQIACQUCVOPLbQIbDAAK\n+CRD/lfqpcWl0BUSxCACjEFwQSHcfZINWD+KdNMayxyHQlBwsEDX+xQkgnn+/Q3hW\n+9VI3SSSfFV3ustlUa3IaNHwuWzsrSqG6mLG47LAQ6vPAWVh723gVCpyJf42Oms/e\n+qeyn0f/PT/6RuNMXQeHbfddmRp4PFjyKOms5Bmf3oi4t4JSvOS4yABBBKzhDQYC9\n+e+qv6Y1sDYpSiCxstQLzIHKiB5bfZ8Szfk09EyyLdqLGkiB0MFhHoXWwQxKiLVc+\n+xNFj2a/jw0rQVgN5DZgHBWU5WqvS5CWIczi+2S9MFI26iBhCn3urZToaaQ/DObqC\n+qmekFrJ/GOj5vB1Mm014lWjG2X3EovLZ1XkgWI7W\n+=vtNZ\n+-----END PGP PUBLIC KEY BLOCK-----"
      }
    ]
  },
  {
    "sha": "fe3fe547f747b909f66a28cef6addfea3e1606e2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZTNmZTU0N2Y3NDdiOTA5ZjY2YTI4Y2VmNmFkZGZlYTNlMTYwNmUy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-17T06:59:50Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-17T07:01:11Z"
      },
      "message": "Merge pull request #6439\n\n09d4ddf Updated URL location of netinstall for Debian (\u0e3ftcDrak)",
      "tree": {
        "sha": "a80cd3f874e277bc4e835cb63ba7f476e9c79051",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a80cd3f874e277bc4e835cb63ba7f476e9c79051"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fe3fe547f747b909f66a28cef6addfea3e1606e2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVqKg3AAoJEHSBCwEjRsmmZSwIAKVnyBMSCqUHdzrODE7cqfoP\nBqiR/t4idReXcfpHFm2wxi+oxh2bD0BFKMDpaLGzbP8KYH7Q+sjsk/HCrjyJC6Fe\ng+hkui+TLDFeqh2JIody614a/BLP5gSOFDMd9cWTH3C4l40wvDAP88hgYxDnhnMf\nVWTfUXVW6DcOu9I7NRknGAVoeAHBQv77Rl2W4hvBo0z1+Kz2YyL6xWfB3CF8KIzh\nKskhPHbD7FprnjwFvT49sKKTr8lgct7itsk3pZiNNi51TT3UttI6qVOw0LM3IZ7q\n6q+gnRzTUTvrjwLR8/4LZD3RlCMvwbLcVK8T0OozHILecNEWUKhBPk5u2UaE7no=\n=wMYc\n-----END PGP SIGNATURE-----",
        "payload": "tree a80cd3f874e277bc4e835cb63ba7f476e9c79051\nparent 7ed3d932941f1f50e8dc271728624b9d1de27d91\nparent 09d4ddf1c5841b757c2676d508a68baa2dbdc4c7\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1437116390 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1437116471 +0200\n\nMerge pull request #6439\n\n09d4ddf Updated URL location of netinstall for Debian (\u0e3ftcDrak)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe3fe547f747b909f66a28cef6addfea3e1606e2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fe3fe547f747b909f66a28cef6addfea3e1606e2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe3fe547f747b909f66a28cef6addfea3e1606e2/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7ed3d932941f1f50e8dc271728624b9d1de27d91",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ed3d932941f1f50e8dc271728624b9d1de27d91",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7ed3d932941f1f50e8dc271728624b9d1de27d91"
      },
      {
        "sha": "09d4ddf1c5841b757c2676d508a68baa2dbdc4c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/09d4ddf1c5841b757c2676d508a68baa2dbdc4c7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/09d4ddf1c5841b757c2676d508a68baa2dbdc4c7"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "630b3c04a7bafc67a601b9792d1b2bcbaf15506c",
        "filename": "doc/gitian-building.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe3fe547f747b909f66a28cef6addfea3e1606e2/doc/gitian-building.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe3fe547f747b909f66a28cef6addfea3e1606e2/doc/gitian-building.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building.md?ref=fe3fe547f747b909f66a28cef6addfea3e1606e2",
        "patch": "@@ -74,7 +74,7 @@ In the VirtualBox GUI click \"Create\" and choose the following parameters in the\n - Disk size: at least 40GB; as low as 20GB *may* be possible, but better to err on the safe side \n - Push the `Create` button\n \n-Get the [Debian 7.8 net installer](http://cdimage.debian.org/debian-cd/7.8.0/amd64/iso-cd/debian-7.8.0-amd64-netinst.iso) (a more recent minor version should also work, see also [Debian Network installation](https://www.debian.org/CD/netinst/)).\n+Get the [Debian 7.8 net installer](http://cdimage.debian.org/cdimage/archive/7.8.0/amd64/iso-cd/debian-7.8.0-amd64-netinst.iso) (a more recent minor version should also work, see also [Debian Network installation](https://www.debian.org/CD/netinst/)).\n This DVD image can be validated using a SHA256 hashing tool, for example on\n Unixy OSes by entering the following in a terminal:\n "
      }
    ]
  },
  {
    "sha": "dcc495e011ff09e54f7c8ddebfc5b73f084de1ea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkY2M0OTVlMDExZmYwOWU1NGY3YzhkZGViZmM1YjczZjA4NGRlMWVh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-17T18:52:03Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-17T20:02:45Z"
      },
      "message": "Merge pull request #6372\n\ne3c4297 Update Linearize tool to support Windows paths (Paul Georgiou)",
      "tree": {
        "sha": "aab5b7a6bfd055a88eda8a75d173e29c149be2d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aab5b7a6bfd055a88eda8a75d173e29c149be2d3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dcc495e011ff09e54f7c8ddebfc5b73f084de1ea",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVqV9mAAoJEHSBCwEjRsmm394IALo6XNrwG2P8Vw8OTtwvfDsd\nk38bkgCUiExmtZDZP5pm64AnJEyAF4dXmtvBUEUF+EGJqSFQpkhFyM0qGeix1Zs6\nWIJKnzlWwYp7Xd/6L2wJ/vK5Xp5AObVi6COI28lrwpX4sgu1W26Y3UkPytTuZlxe\n3062eKZ8BibIhRw2OWDMRqnb9RJ+o8i6W0tLgv1cR07cMduUhNTj5FK0TXuGBfqC\nOQM1R00xGtz43Ic7T6Wag0e4IOI5cLvVXT6h1dath03uslDMXxzC9Q91Iqol09RD\nqXjGQe2OSd1Ve0xCnQowpk64KxE+ZQjQ9MapL7c82O4v6KZk8mWayhn0Vtnq+R0=\n=HLoK\n-----END PGP SIGNATURE-----",
        "payload": "tree aab5b7a6bfd055a88eda8a75d173e29c149be2d3\nparent fe3fe547f747b909f66a28cef6addfea3e1606e2\nparent e3c42973b2f6fb1ceb277b2681e8ebccd6b588df\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1437159123 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1437163365 +0200\n\nMerge pull request #6372\n\ne3c4297 Update Linearize tool to support Windows paths (Paul Georgiou)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcc495e011ff09e54f7c8ddebfc5b73f084de1ea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dcc495e011ff09e54f7c8ddebfc5b73f084de1ea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcc495e011ff09e54f7c8ddebfc5b73f084de1ea/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fe3fe547f747b909f66a28cef6addfea3e1606e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe3fe547f747b909f66a28cef6addfea3e1606e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fe3fe547f747b909f66a28cef6addfea3e1606e2"
      },
      {
        "sha": "e3c42973b2f6fb1ceb277b2681e8ebccd6b588df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3c42973b2f6fb1ceb277b2681e8ebccd6b588df",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e3c42973b2f6fb1ceb277b2681e8ebccd6b588df"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 10,
      "deletions": 8
    },
    "files": [
      {
        "sha": "06f278f3b3c710ed237ee81b1357970b583bd457",
        "filename": "contrib/linearize/README.md",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dcc495e011ff09e54f7c8ddebfc5b73f084de1ea/contrib/linearize/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dcc495e011ff09e54f7c8ddebfc5b73f084de1ea/contrib/linearize/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/README.md?ref=dcc495e011ff09e54f7c8ddebfc5b73f084de1ea",
        "patch": "@@ -3,7 +3,7 @@ Construct a linear, no-fork, best version of the blockchain.\n \n ## Step 1: Download hash list\n \n-   $ ./linearize-hashes.py linearize.cfg > hashlist.txt\n+    $ ./linearize-hashes.py linearize.cfg > hashlist.txt\n \n Required configuration file settings for linearize-hashes:\n * RPC: rpcuser, rpcpassword\n@@ -14,7 +14,7 @@ Optional config file setting for linearize-hashes:\n \n ## Step 2: Copy local block data\n \n-   $ ./linearize-data.py linearize.cfg\n+    $ ./linearize-data.py linearize.cfg\n \n Required configuration file settings:\n * \"input\": bitcoind blocks/ directory containing blkNNNNN.dat\n@@ -26,7 +26,7 @@ output.\n \n Optional config file setting for linearize-data:\n * \"netmagic\": network magic number\n-* \"max_out_sz\": maximum output file size (default 1000*1000*1000)\n+* \"max_out_sz\": maximum output file size (default `1000*1000*1000`)\n * \"split_timestamp\": Split files when a new month is first seen, in addition to\n reaching a maximum file size.\n * \"file_timestamp\": Set each file's last-modified time to that of the"
      },
      {
        "sha": "0f6fde2a6e05216873f29cb8ec47d416f5c484d3",
        "filename": "contrib/linearize/linearize-data.py",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dcc495e011ff09e54f7c8ddebfc5b73f084de1ea/contrib/linearize/linearize-data.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dcc495e011ff09e54f7c8ddebfc5b73f084de1ea/contrib/linearize/linearize-data.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/linearize-data.py?ref=dcc495e011ff09e54f7c8ddebfc5b73f084de1ea",
        "patch": "@@ -12,6 +12,7 @@\n import struct\n import re\n import os\n+import os.path\n import base64\n import httplib\n import sys\n@@ -115,19 +116,20 @@ def __init__(self, settings, blkindex, blkmap):\n \t\t\tself.setFileTime = True\n \t\tif settings['split_timestamp'] != 0:\n \t\t\tself.timestampSplit = True\n-        # Extents and cache for out-of-order blocks\n+\t\t# Extents and cache for out-of-order blocks\n \t\tself.blockExtents = {}\n \t\tself.outOfOrderData = {}\n \t\tself.outOfOrderSize = 0 # running total size for items in outOfOrderData\n \n \tdef writeBlock(self, inhdr, blk_hdr, rawblock):\n-\t\tif not self.fileOutput and ((self.outsz + self.inLen) > self.maxOutSz):\n+\t\tblockSizeOnDisk = len(inhdr) + len(blk_hdr) + len(rawblock)\n+\t\tif not self.fileOutput and ((self.outsz + blockSizeOnDisk) > self.maxOutSz):\n \t\t\tself.outF.close()\n \t\t\tif self.setFileTime:\n \t\t\t\tos.utime(outFname, (int(time.time()), highTS))\n \t\t\tself.outF = None\n \t\t\tself.outFname = None\n-\t\t\tself.outFn = outFn + 1\n+\t\t\tself.outFn = self.outFn + 1\n \t\t\tself.outsz = 0\n \n \t\t(blkDate, blkTS) = get_blk_dt(blk_hdr)\n@@ -147,7 +149,7 @@ def writeBlock(self, inhdr, blk_hdr, rawblock):\n \t\t\tif self.fileOutput:\n \t\t\t\toutFname = self.settings['output_file']\n \t\t\telse:\n-\t\t\t\toutFname = \"%s/blk%05d.dat\" % (self.settings['output'], outFn)\n+\t\t\t\toutFname = os.path.join(self.settings['output'], \"blk%05d.dat\" % self.outFn)\n \t\t\tprint(\"Output file \" + outFname)\n \t\t\tself.outF = open(outFname, \"wb\")\n \n@@ -165,7 +167,7 @@ def writeBlock(self, inhdr, blk_hdr, rawblock):\n \t\t\t\t\t(self.blkCountIn, self.blkCountOut, len(self.blkindex), 100.0 * self.blkCountOut / len(self.blkindex)))\n \n \tdef inFileName(self, fn):\n-\t\treturn \"%s/blk%05d.dat\" % (self.settings['input'], fn)\n+\t\treturn os.path.join(self.settings['input'], \"blk%05d.dat\" % fn)\n \n \tdef fetchBlock(self, extent):\n \t\t'''Fetch block contents from disk given extents'''"
      }
    ]
  },
  {
    "sha": "e061e2778d592826970483e0844308c4e9a12626",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMDYxZTI3NzhkNTkyODI2OTcwNDgzZTA4NDQzMDhjNGU5YTEyNjI2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-18T05:42:23Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-18T07:03:59Z"
      },
      "message": "rpc: Make ValueFromAmount always return 8 decimals\n\nThis is the format that was always returned to JSON clients.\nThe difference was not noticed before, because VREAL values\nare post-processed by univalue.\n\nBy implementing the functionality directly it breaks the dependency\nof rpcserver on utilmoneystr. FormatMoney is now only used for debugging\npurposes.\n\nTo test, port over the formatting tests from util_tests.cpp to\nrpc_tests.cpp.",
      "tree": {
        "sha": "9ef8f2de0cd1fb78a22675c24fa26d751117daae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9ef8f2de0cd1fb78a22675c24fa26d751117daae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e061e2778d592826970483e0844308c4e9a12626",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e061e2778d592826970483e0844308c4e9a12626",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e061e2778d592826970483e0844308c4e9a12626",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e061e2778d592826970483e0844308c4e9a12626/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dcc495e011ff09e54f7c8ddebfc5b73f084de1ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcc495e011ff09e54f7c8ddebfc5b73f084de1ea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dcc495e011ff09e54f7c8ddebfc5b73f084de1ea"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 29,
      "deletions": 2
    },
    "files": [
      {
        "sha": "c5402e0dfae50caf394bb01e0e4d599a1213a268",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e061e2778d592826970483e0844308c4e9a12626/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e061e2778d592826970483e0844308c4e9a12626/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=e061e2778d592826970483e0844308c4e9a12626",
        "patch": "@@ -11,7 +11,6 @@\n #include \"sync.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n-#include \"utilmoneystr.h\"\n #include \"utilstrencodings.h\"\n #ifdef ENABLE_WALLET\n #include \"wallet/wallet.h\"\n@@ -133,7 +132,12 @@ CAmount AmountFromValue(const UniValue& value)\n \n UniValue ValueFromAmount(const CAmount& amount)\n {\n-    return UniValue(UniValue::VREAL, FormatMoney(amount));\n+    bool sign = amount < 0;\n+    int64_t n_abs = (sign ? -amount : amount);\n+    int64_t quotient = n_abs / COIN;\n+    int64_t remainder = n_abs % COIN;\n+    return UniValue(UniValue::VNUM,\n+            strprintf(\"%s%d.%08d\", sign ? \"-\" : \"\", quotient, remainder));\n }\n \n uint256 ParseHashV(const UniValue& v, string strName)"
      },
      {
        "sha": "7946b02855d38837d04c9cec390abcf18aa86be8",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e061e2778d592826970483e0844308c4e9a12626/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e061e2778d592826970483e0844308c4e9a12626/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=e061e2778d592826970483e0844308c4e9a12626",
        "patch": "@@ -120,6 +120,29 @@ BOOST_AUTO_TEST_CASE(rpc_format_monetary_values)\n     BOOST_CHECK(ValueFromAmount(100000000LL).write() == \"1.00000000\");\n     BOOST_CHECK(ValueFromAmount(2099999999999990LL).write() == \"20999999.99999990\");\n     BOOST_CHECK(ValueFromAmount(2099999999999999LL).write() == \"20999999.99999999\");\n+\n+    BOOST_CHECK_EQUAL(ValueFromAmount(0).write(), \"0.00000000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount((COIN/10000)*123456789).write(), \"12345.67890000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(-COIN).write(), \"-1.00000000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(-COIN/10).write(), \"-0.10000000\");\n+\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN*100000000).write(), \"100000000.00000000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN*10000000).write(), \"10000000.00000000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN*1000000).write(), \"1000000.00000000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN*100000).write(), \"100000.00000000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN*10000).write(), \"10000.00000000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN*1000).write(), \"1000.00000000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN*100).write(), \"100.00000000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN*10).write(), \"10.00000000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN).write(), \"1.00000000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN/10).write(), \"0.10000000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN/100).write(), \"0.01000000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN/1000).write(), \"0.00100000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN/10000).write(), \"0.00010000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN/100000).write(), \"0.00001000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN/1000000).write(), \"0.00000100\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN/10000000).write(), \"0.00000010\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN/100000000).write(), \"0.00000001\");\n }\n \n static UniValue ValueFromString(const std::string &str)"
      }
    ]
  },
  {
    "sha": "7650449a6777710cf818d41862626164da0cd412",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NjUwNDQ5YTY3Nzc3MTBjZjgxOGQ0MTg2MjYyNjE2NGRhMGNkNDEy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-18T05:44:19Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-18T07:04:18Z"
      },
      "message": "univalue: Avoid unnecessary roundtrip through double for numbers\n\nJSON makes no distinction between numbers and reals, and our code\ndoesn't need to do so either.\n\nThis removes VREAL, as well as its specific post-processing in\n`UniValue::write`. Non-monetary amounts do not need to be forcibly\nformatted with 8 decimals, so the extra roundtrip was unnecessary\n(and potentially loses precision).",
      "tree": {
        "sha": "ddb32fd03bd9df82961ea176810b50faba133a23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ddb32fd03bd9df82961ea176810b50faba133a23"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7650449a6777710cf818d41862626164da0cd412",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7650449a6777710cf818d41862626164da0cd412",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7650449a6777710cf818d41862626164da0cd412",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7650449a6777710cf818d41862626164da0cd412/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e061e2778d592826970483e0844308c4e9a12626",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e061e2778d592826970483e0844308c4e9a12626",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e061e2778d592826970483e0844308c4e9a12626"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 9,
      "deletions": 17
    },
    "files": [
      {
        "sha": "b0cde7268e03cc9eb5a017d2ef89256462cb766e",
        "filename": "qa/rpc-tests/rest.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7650449a6777710cf818d41862626164da0cd412/qa/rpc-tests/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7650449a6777710cf818d41862626164da0cd412/qa/rpc-tests/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rest.py?ref=7650449a6777710cf818d41862626164da0cd412",
        "patch": "@@ -14,6 +14,7 @@\n import binascii\n import json\n import StringIO\n+import decimal\n \n try:\n     import http.client as httplib\n@@ -243,7 +244,7 @@ def run_test(self):\n         response_header_json = http_get_call(url.hostname, url.port, '/rest/headers/1/'+bb_hash+self.FORMAT_SEPARATOR+\"json\", \"\", True)\n         assert_equal(response_header_json.status, 200)\n         response_header_json_str = response_header_json.read()\n-        json_obj = json.loads(response_header_json_str)\n+        json_obj = json.loads(response_header_json_str, parse_float=decimal.Decimal)\n         assert_equal(len(json_obj), 1) #ensure that there is one header in the json response\n         assert_equal(json_obj[0]['hash'], bb_hash) #request/response hash should be the same\n "
      },
      {
        "sha": "201fc5eba83755953fc47b4fe1585bd54d8552fc",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7650449a6777710cf818d41862626164da0cd412/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7650449a6777710cf818d41862626164da0cd412/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=7650449a6777710cf818d41862626164da0cd412",
        "patch": "@@ -120,7 +120,7 @@ void RPCTypeCheckObj(const UniValue& o,\n \n CAmount AmountFromValue(const UniValue& value)\n {\n-    if (!value.isReal() && !value.isNum())\n+    if (!value.isNum())\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Amount is not a number\");\n     CAmount amount;\n     if (!ParseFixedPoint(value.getValStr(), 8, &amount))"
      },
      {
        "sha": "67cb9b9623257c93018b5ce8feec7a3e6fa33b59",
        "filename": "src/test/univalue_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7650449a6777710cf818d41862626164da0cd412/src/test/univalue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7650449a6777710cf818d41862626164da0cd412/src/test/univalue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/univalue_tests.cpp?ref=7650449a6777710cf818d41862626164da0cd412",
        "patch": "@@ -49,7 +49,7 @@ BOOST_AUTO_TEST_CASE(univalue_constructor)\n \n     double vd = -7.21;\n     UniValue v7(vd);\n-    BOOST_CHECK(v7.isReal());\n+    BOOST_CHECK(v7.isNum());\n     BOOST_CHECK_EQUAL(v7.getValStr(), \"-7.21\");\n \n     string vs(\"yawn\");\n@@ -127,7 +127,7 @@ BOOST_AUTO_TEST_CASE(univalue_set)\n     BOOST_CHECK_EQUAL(v.getValStr(), \"zum\");\n \n     BOOST_CHECK(v.setFloat(-1.01));\n-    BOOST_CHECK(v.isReal());\n+    BOOST_CHECK(v.isNum());\n     BOOST_CHECK_EQUAL(v.getValStr(), \"-1.01\");\n \n     BOOST_CHECK(v.setInt((int)1023));\n@@ -272,7 +272,7 @@ BOOST_AUTO_TEST_CASE(univalue_object)\n     objTypes[\"distance\"] = UniValue::VNUM;\n     objTypes[\"time\"] = UniValue::VNUM;\n     objTypes[\"calories\"] = UniValue::VNUM;\n-    objTypes[\"temperature\"] = UniValue::VREAL;\n+    objTypes[\"temperature\"] = UniValue::VNUM;\n     objTypes[\"cat1\"] = UniValue::VNUM;\n     objTypes[\"cat2\"] = UniValue::VNUM;\n     BOOST_CHECK(obj.checkObject(objTypes));"
      },
      {
        "sha": "1d49a2cfc9e65680535e43a07b9dfdfb4cbf244a",
        "filename": "src/univalue/univalue.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7650449a6777710cf818d41862626164da0cd412/src/univalue/univalue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7650449a6777710cf818d41862626164da0cd412/src/univalue/univalue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/univalue.cpp?ref=7650449a6777710cf818d41862626164da0cd412",
        "patch": "@@ -86,7 +86,7 @@ bool UniValue::setFloat(double val)\n     oss << std::setprecision(16) << val;\n \n     bool ret = setNumStr(oss.str());\n-    typ = VREAL;\n+    typ = VNUM;\n     return ret;\n }\n \n@@ -210,7 +210,6 @@ const char *uvTypeName(UniValue::VType t)\n     case UniValue::VARR: return \"array\";\n     case UniValue::VSTR: return \"string\";\n     case UniValue::VNUM: return \"number\";\n-    case UniValue::VREAL: return \"number\";\n     }\n \n     // not reached\n@@ -280,7 +279,7 @@ int64_t UniValue::get_int64() const\n \n double UniValue::get_real() const\n {\n-    if (typ != VREAL && typ != VNUM)\n+    if (typ != VNUM)\n         throw std::runtime_error(\"JSON value is not a number as expected\");\n     double retval;\n     if (!ParseDouble(getValStr(), &retval))"
      },
      {
        "sha": "4742b56f3d566d50d7588b035f38fb886f762f2d",
        "filename": "src/univalue/univalue.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7650449a6777710cf818d41862626164da0cd412/src/univalue/univalue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7650449a6777710cf818d41862626164da0cd412/src/univalue/univalue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/univalue.h?ref=7650449a6777710cf818d41862626164da0cd412",
        "patch": "@@ -16,7 +16,7 @@\n \n class UniValue {\n public:\n-    enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VREAL, VBOOL, };\n+    enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VBOOL, };\n \n     UniValue() { typ = VNULL; }\n     UniValue(UniValue::VType initialType, const std::string& initialStr = \"\") {\n@@ -78,7 +78,6 @@ class UniValue {\n     bool isBool() const { return (typ == VBOOL); }\n     bool isStr() const { return (typ == VSTR); }\n     bool isNum() const { return (typ == VNUM); }\n-    bool isReal() const { return (typ == VREAL); }\n     bool isArray() const { return (typ == VARR); }\n     bool isObject() const { return (typ == VOBJ); }\n "
      },
      {
        "sha": "bce3997af77c404f563c2414ecc27ebf10e77171",
        "filename": "src/univalue/univalue_write.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7650449a6777710cf818d41862626164da0cd412/src/univalue/univalue_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7650449a6777710cf818d41862626164da0cd412/src/univalue/univalue_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/univalue_write.cpp?ref=7650449a6777710cf818d41862626164da0cd412",
        "patch": "@@ -61,13 +61,6 @@ string UniValue::write(unsigned int prettyIndent,\n     case VSTR:\n         s += \"\\\"\" + json_escape(val) + \"\\\"\";\n         break;\n-    case VREAL:\n-        {\n-            std::stringstream ss;\n-            ss << std::showpoint << std::fixed << std::setprecision(8) << get_real();\n-            s += ss.str();\n-        }\n-        break;\n     case VNUM:\n         s += val;\n         break;"
      }
    ]
  },
  {
    "sha": "ec249d4a1d572a17dd010464fe3ead532a8b1b70",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYzI0OWQ0YTFkNTcyYTE3ZGQwMTA0NjRmZTNlYWQ1MzJhOGIxYjcw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-18T06:16:21Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-18T07:04:18Z"
      },
      "message": "util: use locale-independent parsing in ParseDouble\n\nUse locale-indepent C++ based parsing instead of C's strtod,\nwhich checks for different input based on the user's locale.\nFixes #6443.",
      "tree": {
        "sha": "26bb1be16831c3e74a13975c661c3d6cb4b7b561",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/26bb1be16831c3e74a13975c661c3d6cb4b7b561"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ec249d4a1d572a17dd010464fe3ead532a8b1b70",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec249d4a1d572a17dd010464fe3ead532a8b1b70",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ec249d4a1d572a17dd010464fe3ead532a8b1b70",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec249d4a1d572a17dd010464fe3ead532a8b1b70/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7650449a6777710cf818d41862626164da0cd412",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7650449a6777710cf818d41862626164da0cd412",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7650449a6777710cf818d41862626164da0cd412"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 6,
      "deletions": 5
    },
    "files": [
      {
        "sha": "1f7a2cae2ced7a2e70314c6367b53ffeae8ac81f",
        "filename": "src/utilstrencodings.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec249d4a1d572a17dd010464fe3ead532a8b1b70/src/utilstrencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec249d4a1d572a17dd010464fe3ead532a8b1b70/src/utilstrencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.cpp?ref=ec249d4a1d572a17dd010464fe3ead532a8b1b70",
        "patch": "@@ -464,11 +464,12 @@ bool ParseDouble(const std::string& str, double *out)\n         return false;\n     if (str.size() >= 2 && str[0] == '0' && str[1] == 'x') // No hexadecimal floats allowed\n         return false;\n-    char *endp = NULL;\n-    errno = 0; // strtod will not set errno if valid\n-    double n = strtod(str.c_str(), &endp);\n-    if(out) *out = n;\n-    return endp && *endp == 0 && !errno;\n+    std::istringstream text(str);\n+    text.imbue(std::locale::classic());\n+    double result;\n+    text >> result;\n+    if(out) *out = result;\n+    return text.eof() && !text.fail();\n }\n \n std::string FormatParagraph(const std::string& in, size_t width, size_t indent)"
      }
    ]
  },
  {
    "sha": "0c895799c86192d035e752449c511187a1e148b8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYzg5NTc5OWM4NjE5MmQwMzVlNzUyNDQ5YzUxMTE4N2ExZTE0OGI4",
    "commit": {
      "author": {
        "name": "Simon Males",
        "email": "sime@sime.net.au",
        "date": "2015-07-18T08:32:09Z"
      },
      "committer": {
        "name": "Simon Males",
        "email": "sime@sime.net.au",
        "date": "2015-07-18T08:32:09Z"
      },
      "message": "Include pruned state in chaininfo.json",
      "tree": {
        "sha": "a3a559a72fcc777c120186148126de3f351c2450",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a3a559a72fcc777c120186148126de3f351c2450"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0c895799c86192d035e752449c511187a1e148b8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c895799c86192d035e752449c511187a1e148b8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0c895799c86192d035e752449c511187a1e148b8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c895799c86192d035e752449c511187a1e148b8/comments",
    "author": {
      "login": "sime",
      "id": 216917,
      "node_id": "MDQ6VXNlcjIxNjkxNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/216917?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sime",
      "html_url": "https://github.com/sime",
      "followers_url": "https://api.github.com/users/sime/followers",
      "following_url": "https://api.github.com/users/sime/following{/other_user}",
      "gists_url": "https://api.github.com/users/sime/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sime/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sime/subscriptions",
      "organizations_url": "https://api.github.com/users/sime/orgs",
      "repos_url": "https://api.github.com/users/sime/repos",
      "events_url": "https://api.github.com/users/sime/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sime/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sime",
      "id": 216917,
      "node_id": "MDQ6VXNlcjIxNjkxNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/216917?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sime",
      "html_url": "https://github.com/sime",
      "followers_url": "https://api.github.com/users/sime/followers",
      "following_url": "https://api.github.com/users/sime/following{/other_user}",
      "gists_url": "https://api.github.com/users/sime/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sime/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sime/subscriptions",
      "organizations_url": "https://api.github.com/users/sime/orgs",
      "repos_url": "https://api.github.com/users/sime/repos",
      "events_url": "https://api.github.com/users/sime/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sime/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dcc495e011ff09e54f7c8ddebfc5b73f084de1ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcc495e011ff09e54f7c8ddebfc5b73f084de1ea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dcc495e011ff09e54f7c8ddebfc5b73f084de1ea"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f3dc9edf3745798373ed2c813507d08ea69462cf",
        "filename": "doc/REST-interface.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c895799c86192d035e752449c511187a1e148b8/doc/REST-interface.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c895799c86192d035e752449c511187a1e148b8/doc/REST-interface.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/REST-interface.md?ref=0c895799c86192d035e752449c511187a1e148b8",
        "patch": "@@ -40,6 +40,7 @@ Only supports JSON as output format.\n * difficulty : (numeric) the current difficulty\n * verificationprogress : (numeric) estimate of verification progress [0..1]\n * chainwork : (string) total amount of work in active chain, in hexadecimal\n+* pruned : (boolean) if the blocks are subject to pruning\n \n ####Query UTXO set\n `GET /rest/getutxos/<checkmempool>/<txid>-<n>/<txid>-<n>/.../<txid>-<n>.<bin|hex|json>`"
      }
    ]
  },
  {
    "sha": "0aad1f13b2430165062bf9436036c1222a8724da",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYWFkMWYxM2IyNDMwMTY1MDYyYmY5NDM2MDM2YzEyMjJhODcyNGRh",
    "commit": {
      "author": {
        "name": "zathras-crypto",
        "email": "zathrasc@gmail.com",
        "date": "2015-03-25T09:04:02Z"
      },
      "committer": {
        "name": "dexX7",
        "email": "dexx@bitwatch.co",
        "date": "2015-07-18T15:31:55Z"
      },
      "message": "Exempt unspendable transaction outputs from dust checks\n\nSince unspendable outputs can't be spent, there is no threshold at which it would be uneconomic to spend them.\n\nThis primarily targets transaction outputs with `OP_RETURN`.\n\n---\n\nInitially based on:\n\ncommit 9cf0ae26350033d43d5dd3c95054c0d1b1641eda\nAuthor: zathras-crypto <zathrasc@gmail.com>\nDate:   Wed Mar 25 02:04:02 2015 -0700\n\nChanges:\n\n- cherry-picked on top of bitcoin:master\n- added RPC test for fundrawtransaction",
      "tree": {
        "sha": "6cc83f06f73b18462985b7d90e2cdd563c4708aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6cc83f06f73b18462985b7d90e2cdd563c4708aa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0aad1f13b2430165062bf9436036c1222a8724da",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJVqnFsAAoJEHZ14xz1cZgyNWoP/Rgwds+Sj4VcY5CQMch/rqq4\nRmkbTLYZM3GSYhgTCV5FutTKbD6TnrqZ+NsMGJTjD9izveubwNQeLynbmyTHpO4I\npYoF+zDC7yuf/PCDDZsBH3lxOlngANgANkMuS91L9S2Y927Dbl0fD0h/N8ORdQAa\n4SXcYVS818Hb2XRL+C/gj/ZIfsT6lQ0erxEOW4alob7JVX1sTnSJB0UviyvO27TP\nEUmQl9o95fosDbFjChb++Ee+K4t3bNF7MxmJI0SEjROwPaBp/zHA2ZufV0nMvEEz\n9ZCtsAahTP6pn05+aCNdV4DezEnPjBLxzD1WpuFADzWhLW3zdEYxPnFWCjHD+Xiz\nn31M1to9BA2gZr8lA9tj9Wt7ED5rUx4wskWu9EVb4C6H6t5LC5L8qHiyBhcIFhkN\nvHpeezLTyL5TMq2+i2bRyAGWj2VKNqHaoVO5JZXWOfWbFUDg6c7Z9oD0C883lUPd\nONGR0Z5NvaSiUyTJMvePehS3/QI7L8z9cq6G7XitGvzJb+0lJE4TxgHNkuk+Sngw\nX+pJ+5RtRHru02S8YzRGoxZk6fqhSOdYksDv49FxT9JqD2RBkLDa3KYuHLwwhjov\n17Y2b2XA3K2lL2RS6PmkeufNeY3EqLq598feP+q4BCI4EtDP8wH6MtEhJz1fYRfG\nL9rtuIFwc2Fw5lgzfESj\n=A0eY\n-----END PGP SIGNATURE-----",
        "payload": "tree 6cc83f06f73b18462985b7d90e2cdd563c4708aa\nparent ed789ceade71f19f04340a4041d7d3ef43c44086\nauthor zathras-crypto <zathrasc@gmail.com> 1427274242 -0700\ncommitter dexX7 <dexx@bitwatch.co> 1437233515 +0200\n\nExempt unspendable transaction outputs from dust checks\n\nSince unspendable outputs can't be spent, there is no threshold at which it would be uneconomic to spend them.\n\nThis primarily targets transaction outputs with `OP_RETURN`.\n\n---\n\nInitially based on:\n\ncommit 9cf0ae26350033d43d5dd3c95054c0d1b1641eda\nAuthor: zathras-crypto <zathrasc@gmail.com>\nDate:   Wed Mar 25 02:04:02 2015 -0700\n\nChanges:\n\n- cherry-picked on top of bitcoin:master\n- added RPC test for fundrawtransaction\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0aad1f13b2430165062bf9436036c1222a8724da",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0aad1f13b2430165062bf9436036c1222a8724da",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0aad1f13b2430165062bf9436036c1222a8724da/comments",
    "author": {
      "login": "zathras-crypto",
      "id": 5633351,
      "node_id": "MDQ6VXNlcjU2MzMzNTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5633351?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zathras-crypto",
      "html_url": "https://github.com/zathras-crypto",
      "followers_url": "https://api.github.com/users/zathras-crypto/followers",
      "following_url": "https://api.github.com/users/zathras-crypto/following{/other_user}",
      "gists_url": "https://api.github.com/users/zathras-crypto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zathras-crypto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zathras-crypto/subscriptions",
      "organizations_url": "https://api.github.com/users/zathras-crypto/orgs",
      "repos_url": "https://api.github.com/users/zathras-crypto/repos",
      "events_url": "https://api.github.com/users/zathras-crypto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zathras-crypto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dexX7",
      "id": 5836089,
      "node_id": "MDQ6VXNlcjU4MzYwODk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5836089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dexX7",
      "html_url": "https://github.com/dexX7",
      "followers_url": "https://api.github.com/users/dexX7/followers",
      "following_url": "https://api.github.com/users/dexX7/following{/other_user}",
      "gists_url": "https://api.github.com/users/dexX7/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dexX7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dexX7/subscriptions",
      "organizations_url": "https://api.github.com/users/dexX7/orgs",
      "repos_url": "https://api.github.com/users/dexX7/repos",
      "events_url": "https://api.github.com/users/dexX7/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dexX7/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ed789ceade71f19f04340a4041d7d3ef43c44086",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed789ceade71f19f04340a4041d7d3ef43c44086",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ed789ceade71f19f04340a4041d7d3ef43c44086"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 21,
      "deletions": 2
    },
    "files": [
      {
        "sha": "ce52247b2e4b9b08b63846610cd0904ad1188967",
        "filename": "qa/rpc-tests/fundrawtransaction.py",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0aad1f13b2430165062bf9436036c1222a8724da/qa/rpc-tests/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0aad1f13b2430165062bf9436036c1222a8724da/qa/rpc-tests/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fundrawtransaction.py?ref=0aad1f13b2430165062bf9436036c1222a8724da",
        "patch": "@@ -524,6 +524,22 @@ def run_test(self):\n         self.sync_all()\n         assert_equal(oldBalance+Decimal('50.19000000'), self.nodes[0].getbalance()) #0.19+block reward\n \n+        #####################################################\n+        # test fundrawtransaction with OP_RETURN and no vin #\n+        #####################################################\n+\n+        rawtx   = \"0100000000010000000000000000066a047465737400000000\"\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n+\n+        assert_equal(len(dec_tx['vin']), 0)\n+        assert_equal(len(dec_tx['vout']), 1)\n+\n+        rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n+\n+        assert_greater_than(len(dec_tx['vin']), 0) # at least one vin\n+        assert_equal(len(dec_tx['vout']), 2) # one change output added\n+\n \n if __name__ == '__main__':\n     RawTransactionsTest().main()"
      },
      {
        "sha": "84f7adddd1ade3726bf69b784cc3e1865fbbe4ae",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0aad1f13b2430165062bf9436036c1222a8724da/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0aad1f13b2430165062bf9436036c1222a8724da/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=0aad1f13b2430165062bf9436036c1222a8724da",
        "patch": "@@ -146,10 +146,13 @@ class CTxOut\n         // which has units satoshis-per-kilobyte.\n         // If you'd pay more than 1/3 in fees\n         // to spend something, then we consider it dust.\n-        // A typical txout is 34 bytes big, and will\n+        // A typical spendable txout is 34 bytes big, and will\n         // need a CTxIn of at least 148 bytes to spend:\n-        // so dust is a txout less than 546 satoshis \n+        // so dust is a spendable txout less than 546 satoshis\n         // with default minRelayTxFee.\n+        if (scriptPubKey.IsUnspendable())\n+            return 0;\n+\n         size_t nSize = GetSerializeSize(SER_DISK,0)+148u;\n         return 3*minRelayTxFee.GetFee(nSize);\n     }"
      }
    ]
  },
  {
    "sha": "0ef9858707093053f45469d8f7cef20be4930f64",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZWY5ODU4NzA3MDkzMDUzZjQ1NDY5ZDhmN2NlZjIwYmU0OTMwZjY0",
    "commit": {
      "author": {
        "name": "Simon Males",
        "email": "sime@sime.net.au",
        "date": "2015-07-19T12:07:35Z"
      },
      "committer": {
        "name": "Simon Males",
        "email": "sime@sime.net.au",
        "date": "2015-07-19T12:07:35Z"
      },
      "message": "Documenting pruned, pruneheight and softforks in getblockchaininfo",
      "tree": {
        "sha": "8263888fdff7763fd6b9227739ef40218b862083",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8263888fdff7763fd6b9227739ef40218b862083"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0ef9858707093053f45469d8f7cef20be4930f64",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ef9858707093053f45469d8f7cef20be4930f64",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0ef9858707093053f45469d8f7cef20be4930f64",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ef9858707093053f45469d8f7cef20be4930f64/comments",
    "author": {
      "login": "sime",
      "id": 216917,
      "node_id": "MDQ6VXNlcjIxNjkxNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/216917?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sime",
      "html_url": "https://github.com/sime",
      "followers_url": "https://api.github.com/users/sime/followers",
      "following_url": "https://api.github.com/users/sime/following{/other_user}",
      "gists_url": "https://api.github.com/users/sime/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sime/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sime/subscriptions",
      "organizations_url": "https://api.github.com/users/sime/orgs",
      "repos_url": "https://api.github.com/users/sime/repos",
      "events_url": "https://api.github.com/users/sime/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sime/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sime",
      "id": 216917,
      "node_id": "MDQ6VXNlcjIxNjkxNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/216917?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sime",
      "html_url": "https://github.com/sime",
      "followers_url": "https://api.github.com/users/sime/followers",
      "following_url": "https://api.github.com/users/sime/following{/other_user}",
      "gists_url": "https://api.github.com/users/sime/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sime/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sime/subscriptions",
      "organizations_url": "https://api.github.com/users/sime/orgs",
      "repos_url": "https://api.github.com/users/sime/repos",
      "events_url": "https://api.github.com/users/sime/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sime/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0c895799c86192d035e752449c511187a1e148b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c895799c86192d035e752449c511187a1e148b8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0c895799c86192d035e752449c511187a1e148b8"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ac7cd45f7002a2d0d11d0505da3b61e3e784c687",
        "filename": "doc/REST-interface.md",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ef9858707093053f45469d8f7cef20be4930f64/doc/REST-interface.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ef9858707093053f45469d8f7cef20be4930f64/doc/REST-interface.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/REST-interface.md?ref=0ef9858707093053f45469d8f7cef20be4930f64",
        "patch": "@@ -41,6 +41,8 @@ Only supports JSON as output format.\n * verificationprogress : (numeric) estimate of verification progress [0..1]\n * chainwork : (string) total amount of work in active chain, in hexadecimal\n * pruned : (boolean) if the blocks are subject to pruning\n+* pruneheight : (numeric) heighest block available\n+* softforks : (array) status of softforks in progress\n \n ####Query UTXO set\n `GET /rest/getutxos/<checkmempool>/<txid>-<n>/<txid>-<n>/.../<txid>-<n>.<bin|hex|json>`"
      },
      {
        "sha": "f1c5ffe0500580c40313a1aecaa254bb58944bff",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ef9858707093053f45469d8f7cef20be4930f64/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ef9858707093053f45469d8f7cef20be4930f64/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=0ef9858707093053f45469d8f7cef20be4930f64",
        "patch": "@@ -594,6 +594,8 @@ UniValue getblockchaininfo(const UniValue& params, bool fHelp)\n             \"  \\\"difficulty\\\": xxxxxx,     (numeric) the current difficulty\\n\"\n             \"  \\\"verificationprogress\\\": xxxx, (numeric) estimate of verification progress [0..1]\\n\"\n             \"  \\\"chainwork\\\": \\\"xxxx\\\"     (string) total amount of work in active chain, in hexadecimal\\n\"\n+            \"  \\\"pruned\\\": xx,             (boolean) if the blocks are subject to pruning\\n\"\n+            \"  \\\"pruneheight\\\": xxxxxx,    (numeric) heighest block available\\n\"\n             \"  \\\"softforks\\\": [            (array) status of softforks in progress\\n\"\n             \"     {\\n\"\n             \"        \\\"id\\\": \\\"xxxx\\\",        (string) name of softfork\\n\""
      }
    ]
  },
  {
    "sha": "3c923e897538b9d8d55956b981d5540f0fdbf0b2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYzkyM2U4OTc1MzhiOWQ4ZDU1OTU2Yjk4MWQ1NTQwZjBmZGJmMGIy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-20T08:46:20Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-20T08:49:02Z"
      },
      "message": "Merge pull request #6457\n\n0ef9858 Documenting pruned, pruneheight and softforks in getblockchaininfo (Simon Males)\n0c89579 Include pruned state in chaininfo.json (Simon Males)",
      "tree": {
        "sha": "8263888fdff7763fd6b9227739ef40218b862083",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8263888fdff7763fd6b9227739ef40218b862083"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3c923e897538b9d8d55956b981d5540f0fdbf0b2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVrLX+AAoJEHSBCwEjRsmmDH4IAJf1m0ezVT70lPUfECpvTc86\naBQZZ2uj8ZUmbmTXP1hwi+n22qIFf/nvC70YH5dDTqroZwrgamkjPBBHr5qFwRH+\nKhzbpB1Qz8BQjcM+pURIqtEBaGf83hxfV+YMG6dr4nf09pJgfoKoDWNhn++jP7NC\nC9AhwPQBrb4N420Z/t6FRfpXPYRb1JGXzHEii7E19F5n7WPM4FuejmjxX53UlDMM\ndncNFJmZjM5JmobsDz7dR7ZHl5LIjHVyoJYuHagsejb8Zv6bzTK24hUFIi1VoE3d\nNsrMjqPoEEZDFV6B/8ywPCfXnwOkm1cFHYhi9TSigAzCnmEDLcuF/IP+ucoDolM=\n=qGim\n-----END PGP SIGNATURE-----",
        "payload": "tree 8263888fdff7763fd6b9227739ef40218b862083\nparent dcc495e011ff09e54f7c8ddebfc5b73f084de1ea\nparent 0ef9858707093053f45469d8f7cef20be4930f64\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1437381980 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1437382142 +0200\n\nMerge pull request #6457\n\n0ef9858 Documenting pruned, pruneheight and softforks in getblockchaininfo (Simon Males)\n0c89579 Include pruned state in chaininfo.json (Simon Males)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c923e897538b9d8d55956b981d5540f0fdbf0b2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3c923e897538b9d8d55956b981d5540f0fdbf0b2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c923e897538b9d8d55956b981d5540f0fdbf0b2/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dcc495e011ff09e54f7c8ddebfc5b73f084de1ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcc495e011ff09e54f7c8ddebfc5b73f084de1ea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dcc495e011ff09e54f7c8ddebfc5b73f084de1ea"
      },
      {
        "sha": "0ef9858707093053f45469d8f7cef20be4930f64",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ef9858707093053f45469d8f7cef20be4930f64",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0ef9858707093053f45469d8f7cef20be4930f64"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ac7cd45f7002a2d0d11d0505da3b61e3e784c687",
        "filename": "doc/REST-interface.md",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c923e897538b9d8d55956b981d5540f0fdbf0b2/doc/REST-interface.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c923e897538b9d8d55956b981d5540f0fdbf0b2/doc/REST-interface.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/REST-interface.md?ref=3c923e897538b9d8d55956b981d5540f0fdbf0b2",
        "patch": "@@ -40,6 +40,9 @@ Only supports JSON as output format.\n * difficulty : (numeric) the current difficulty\n * verificationprogress : (numeric) estimate of verification progress [0..1]\n * chainwork : (string) total amount of work in active chain, in hexadecimal\n+* pruned : (boolean) if the blocks are subject to pruning\n+* pruneheight : (numeric) heighest block available\n+* softforks : (array) status of softforks in progress\n \n ####Query UTXO set\n `GET /rest/getutxos/<checkmempool>/<txid>-<n>/<txid>-<n>/.../<txid>-<n>.<bin|hex|json>`"
      },
      {
        "sha": "f1c5ffe0500580c40313a1aecaa254bb58944bff",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c923e897538b9d8d55956b981d5540f0fdbf0b2/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c923e897538b9d8d55956b981d5540f0fdbf0b2/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=3c923e897538b9d8d55956b981d5540f0fdbf0b2",
        "patch": "@@ -594,6 +594,8 @@ UniValue getblockchaininfo(const UniValue& params, bool fHelp)\n             \"  \\\"difficulty\\\": xxxxxx,     (numeric) the current difficulty\\n\"\n             \"  \\\"verificationprogress\\\": xxxx, (numeric) estimate of verification progress [0..1]\\n\"\n             \"  \\\"chainwork\\\": \\\"xxxx\\\"     (string) total amount of work in active chain, in hexadecimal\\n\"\n+            \"  \\\"pruned\\\": xx,             (boolean) if the blocks are subject to pruning\\n\"\n+            \"  \\\"pruneheight\\\": xxxxxx,    (numeric) heighest block available\\n\"\n             \"  \\\"softforks\\\": [            (array) status of softforks in progress\\n\"\n             \"     {\\n\"\n             \"        \\\"id\\\": \\\"xxxx\\\",        (string) name of softfork\\n\""
      }
    ]
  },
  {
    "sha": "dc51608c9c279a3eb33e9a071ded27f613282ac7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYzUxNjA4YzljMjc5YTNlYjMzZTlhMDcxZGVkMjdmNjEzMjgyYWM3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-20T14:41:32Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-20T14:43:07Z"
      },
      "message": "Merge pull request #6447\n\n2cb8ee9 remove unused inv from ConnectTip() (Pavel Vasin)",
      "tree": {
        "sha": "064226f069fded9ce84a6d958698cf47b2559e6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/064226f069fded9ce84a6d958698cf47b2559e6e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dc51608c9c279a3eb33e9a071ded27f613282ac7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVrQj7AAoJEHSBCwEjRsmmdKIH+wcxBpcQZoucQ5e6uWiwRlYV\nAYqyF5/pbsKXE+CP9Fl5OLEMUA/s2Hn92AiiGMPS/Zc40i4ckSkMmp7ty3DYBtYc\nqORbV4FcwZFuolRUPs40svuL8NVcW/eEvdf369Ml+huqcG6Rpnh8tJ3YNMnmDeFx\nnf7EOxUZWEuRk96UpA5rTmf6zmvK/PXJ6vylGI7UdF1O+2yWbSGjLoHI8ogKueRL\nZCOrp9NHOsD5kt14zlE7etivTZPYYnegGZPOr184a9fEjOlcvw5G3Lx8cv26iBQv\nlOwFckoXcFbeuZmfln9yOhJnzBr704xWaBg8wCR3CLB1pqSLNebibI26H5TyM+I=\n=1Z+u\n-----END PGP SIGNATURE-----",
        "payload": "tree 064226f069fded9ce84a6d958698cf47b2559e6e\nparent 3c923e897538b9d8d55956b981d5540f0fdbf0b2\nparent 2cb8ee9ac7fb4d2600305a61400ab5e8a200b722\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1437403292 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1437403387 +0200\n\nMerge pull request #6447\n\n2cb8ee9 remove unused inv from ConnectTip() (Pavel Vasin)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc51608c9c279a3eb33e9a071ded27f613282ac7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dc51608c9c279a3eb33e9a071ded27f613282ac7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc51608c9c279a3eb33e9a071ded27f613282ac7/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3c923e897538b9d8d55956b981d5540f0fdbf0b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c923e897538b9d8d55956b981d5540f0fdbf0b2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3c923e897538b9d8d55956b981d5540f0fdbf0b2"
      },
      {
        "sha": "2cb8ee9ac7fb4d2600305a61400ab5e8a200b722",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2cb8ee9ac7fb4d2600305a61400ab5e8a200b722",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2cb8ee9ac7fb4d2600305a61400ab5e8a200b722"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "fb90d7578c7e683d56377b87bc853c22346ada87",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc51608c9c279a3eb33e9a071ded27f613282ac7/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc51608c9c279a3eb33e9a071ded27f613282ac7/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=dc51608c9c279a3eb33e9a071ded27f613282ac7",
        "patch": "@@ -2059,15 +2059,14 @@ bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew, CBlock *\n     LogPrint(\"bench\", \"  - Load block from disk: %.2fms [%.2fs]\\n\", (nTime2 - nTime1) * 0.001, nTimeReadFromDisk * 0.000001);\n     {\n         CCoinsViewCache view(pcoinsTip);\n-        CInv inv(MSG_BLOCK, pindexNew->GetBlockHash());\n         bool rv = ConnectBlock(*pblock, state, pindexNew, view);\n         GetMainSignals().BlockChecked(*pblock, state);\n         if (!rv) {\n             if (state.IsInvalid())\n                 InvalidBlockFound(pindexNew, state);\n             return error(\"ConnectTip(): ConnectBlock %s failed\", pindexNew->GetBlockHash().ToString());\n         }\n-        mapBlockSource.erase(inv.hash);\n+        mapBlockSource.erase(pindexNew->GetBlockHash());\n         nTime3 = GetTimeMicros(); nTimeConnectTotal += nTime3 - nTime2;\n         LogPrint(\"bench\", \"  - Connect total: %.2fms [%.2fs]\\n\", (nTime3 - nTime2) * 0.001, nTimeConnectTotal * 0.000001);\n         assert(view.Flush());"
      }
    ]
  },
  {
    "sha": "1a2de3237fc06a97dd83ab12759c57d83db370ef",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYTJkZTMyMzdmYzA2YTk3ZGQ4M2FiMTI3NTljNTdkODNkYjM3MGVm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-20T14:54:18Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-20T14:54:28Z"
      },
      "message": "Merge pull request #6412\n\nd422f9b Test whether created sockets are select()able (Pieter Wuille)",
      "tree": {
        "sha": "41e95768db9f2aa7314fa3f898239c5c1d3e5e74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/41e95768db9f2aa7314fa3f898239c5c1d3e5e74"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1a2de3237fc06a97dd83ab12759c57d83db370ef",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVrQukAAoJEHSBCwEjRsmmEygH/2kAmEt0uYEKCq416V4CqnFc\nmIeIpdTpCCAI2wBLAjmGlmiFW7DpZnB27iJnyn7hWxytxsPpLqgbplN/CJ3EyFIY\nwcKHBWJ4JBqz0r8KxAiesAK5RvPPVQrBns/+goeDhHWa6Pf21UKTsuls7dXHaMca\n/Jm5bZ1rYFEp/09L0PsAC9F4XF8wJUCLF98M8Nzakh2rq5ZXA0cA3wDQJ9YnHqq6\nWrJKQHOHqi4gHY9alH+scaGeXyc/+C6IQzQFwrXKX4vhBlb3UYpWTu6wdxx/Njuh\nF7YPdv/U2xgiWFNH/rRRiFx2bcTX07s7gsngXVfYDB48gzlqGX1EQgbyvt66ZOs=\n=jirG\n-----END PGP SIGNATURE-----",
        "payload": "tree 41e95768db9f2aa7314fa3f898239c5c1d3e5e74\nparent dc51608c9c279a3eb33e9a071ded27f613282ac7\nparent d422f9b1fdb42a51aadaa1bbc157542dca2feb17\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1437404058 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1437404068 +0200\n\nMerge pull request #6412\n\nd422f9b Test whether created sockets are select()able (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a2de3237fc06a97dd83ab12759c57d83db370ef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1a2de3237fc06a97dd83ab12759c57d83db370ef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a2de3237fc06a97dd83ab12759c57d83db370ef/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dc51608c9c279a3eb33e9a071ded27f613282ac7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc51608c9c279a3eb33e9a071ded27f613282ac7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dc51608c9c279a3eb33e9a071ded27f613282ac7"
      },
      {
        "sha": "d422f9b1fdb42a51aadaa1bbc157542dca2feb17",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d422f9b1fdb42a51aadaa1bbc157542dca2feb17",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d422f9b1fdb42a51aadaa1bbc157542dca2feb17"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 29,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f88b6ce36e9fcb3f6b7b1415abf3233dac35ffb4",
        "filename": "src/compat.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a2de3237fc06a97dd83ab12759c57d83db370ef/src/compat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a2de3237fc06a97dd83ab12759c57d83db370ef/src/compat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat.h?ref=1a2de3237fc06a97dd83ab12759c57d83db370ef",
        "patch": "@@ -92,4 +92,12 @@ typedef u_int SOCKET;\n size_t strnlen( const char *start, size_t max_len);\n #endif // HAVE_DECL_STRNLEN\n \n+bool static inline IsSelectableSocket(SOCKET s) {\n+#ifdef WIN32\n+    return true;\n+#else\n+    return (s >= 0 && s < FD_SETSIZE);\n+#endif\n+}\n+\n #endif // BITCOIN_COMPAT_H"
      },
      {
        "sha": "3d369c7dd1eb893a22eaa2f64672d518f230ebc5",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a2de3237fc06a97dd83ab12759c57d83db370ef/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a2de3237fc06a97dd83ab12759c57d83db370ef/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=1a2de3237fc06a97dd83ab12759c57d83db370ef",
        "patch": "@@ -386,6 +386,12 @@ CNode* ConnectNode(CAddress addrConnect, const char *pszDest)\n     if (pszDest ? ConnectSocketByName(addrConnect, hSocket, pszDest, Params().GetDefaultPort(), nConnectTimeout, &proxyConnectionFailed) :\n                   ConnectSocket(addrConnect, hSocket, nConnectTimeout, &proxyConnectionFailed))\n     {\n+        if (!IsSelectableSocket(hSocket)) {\n+            LogPrintf(\"Cannot create connection: non-selectable socket created (fd >= FD_SETSIZE ?)\\n\");\n+            CloseSocket(hSocket);\n+            return NULL;\n+        }\n+\n         addrman.Attempt(addrConnect);\n \n         // Add node\n@@ -949,6 +955,11 @@ void ThreadSocketHandler()\n                     if (nErr != WSAEWOULDBLOCK)\n                         LogPrintf(\"socket error accept failed: %s\\n\", NetworkErrorString(nErr));\n                 }\n+                else if (!IsSelectableSocket(hSocket))\n+                {\n+                    LogPrintf(\"connection from %s dropped: non-selectable socket\\n\", addr.ToString());\n+                    CloseSocket(hSocket);\n+                }\n                 else if (nInbound >= nMaxInbound)\n                 {\n                     LogPrint(\"net\", \"connection from %s dropped (full)\\n\", addr.ToString());\n@@ -1597,6 +1608,13 @@ bool BindListenPort(const CService &addrBind, string& strError, bool fWhiteliste\n         LogPrintf(\"%s\\n\", strError);\n         return false;\n     }\n+    if (!IsSelectableSocket(hListenSocket))\n+    {\n+        strError = \"Error: Couldn't create a listenable socket for incoming connections\";\n+        LogPrintf(\"%s\\n\", strError);\n+        return false;\n+    }\n+\n \n #ifndef WIN32\n #ifdef SO_NOSIGPIPE"
      },
      {
        "sha": "b7e2e57917bb1ee39dbc1689f2ee95d6273aa1fd",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a2de3237fc06a97dd83ab12759c57d83db370ef/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a2de3237fc06a97dd83ab12759c57d83db370ef/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=1a2de3237fc06a97dd83ab12759c57d83db370ef",
        "patch": "@@ -266,6 +266,9 @@ bool static InterruptibleRecv(char* data, size_t len, int timeout, SOCKET& hSock\n         } else { // Other error or blocking\n             int nErr = WSAGetLastError();\n             if (nErr == WSAEINPROGRESS || nErr == WSAEWOULDBLOCK || nErr == WSAEINVAL) {\n+                if (!IsSelectableSocket(hSocket)) {\n+                    return false;\n+                }\n                 struct timeval tval = MillisToTimeval(std::min(endTime - curTime, maxWait));\n                 fd_set fdset;\n                 FD_ZERO(&fdset);"
      }
    ]
  },
  {
    "sha": "89289d875da108c42ca013f33597eda46cb6eb53",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OTI4OWQ4NzVkYTEwOGM0MmNhMDEzZjMzNTk3ZWRhNDZjYjZlYjUz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-20T15:10:02Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-20T15:10:02Z"
      },
      "message": "Fix warning introduced by #6412\n\nSOCKET are defined as unsigned integers, thus always >=0.",
      "tree": {
        "sha": "aa066408002b6c97b40c78e9610c68209004ec85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aa066408002b6c97b40c78e9610c68209004ec85"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/89289d875da108c42ca013f33597eda46cb6eb53",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVrQ95AAoJEHSBCwEjRsmm+rAH/RoOEWwfXEMxdAXkF9HlKFxI\njsN1ZijYcjgGyQuWkNQcr0kw2T7iR/+3Z/if85w+t7IgJLv3Wes9iAOr/ZJOa3cd\nKMSNZlu7ocVflDpICuBQ6NRrUdlHbh/xacK+JLE1uxaTMNORTceyiBukcSrErnrj\njtQU0Z3hm6oHCDPqv88+LJjDvz4CcYBHEFdNWHHKzrnrC+L2ns4ywxAHcqAL6uMT\nxtURs2ek8GfKN2BAiVBFgBcsyv7PnUBQ7Bx1vqi0nX4TRzuF0V0BQpz/q+h7B8ni\nBnEK9QKVh98DpfSJDW8lNnCIq4lL4aIwXyo6Xf1E/KmzNTOoaztEbbKtLtZtfko=\n=XjUb\n-----END PGP SIGNATURE-----",
        "payload": "tree aa066408002b6c97b40c78e9610c68209004ec85\nparent 1a2de3237fc06a97dd83ab12759c57d83db370ef\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1437405002 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1437405002 +0200\n\nFix warning introduced by #6412\n\nSOCKET are defined as unsigned integers, thus always >=0.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89289d875da108c42ca013f33597eda46cb6eb53",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/89289d875da108c42ca013f33597eda46cb6eb53",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89289d875da108c42ca013f33597eda46cb6eb53/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1a2de3237fc06a97dd83ab12759c57d83db370ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a2de3237fc06a97dd83ab12759c57d83db370ef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1a2de3237fc06a97dd83ab12759c57d83db370ef"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "5378c2c761fe8d8124e448941688fc555ddbdb88",
        "filename": "src/compat.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89289d875da108c42ca013f33597eda46cb6eb53/src/compat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89289d875da108c42ca013f33597eda46cb6eb53/src/compat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat.h?ref=89289d875da108c42ca013f33597eda46cb6eb53",
        "patch": "@@ -96,7 +96,7 @@ bool static inline IsSelectableSocket(SOCKET s) {\n #ifdef WIN32\n     return true;\n #else\n-    return (s >= 0 && s < FD_SETSIZE);\n+    return (s < FD_SETSIZE);\n #endif\n }\n "
      }
    ]
  },
  {
    "sha": "9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZTM4ZDBmNzQ1MTA5MmY2YTE2ODUzYTJiMGEzN2I2OGE1YjNjM2Zi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-07-17T17:46:18Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-07-20T15:17:53Z"
      },
      "message": "Separate core memory usage computation in core_memusage.h",
      "tree": {
        "sha": "469af8922b6454945e160b99e118d35873470180",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/469af8922b6454945e160b99e118d35873470180"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "89289d875da108c42ca013f33597eda46cb6eb53",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89289d875da108c42ca013f33597eda46cb6eb53",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/89289d875da108c42ca013f33597eda46cb6eb53"
      }
    ],
    "stats": {
      "total": 175,
      "additions": 76,
      "deletions": 99
    },
    "files": [
      {
        "sha": "cc8dded413361c7a81c7bee8ea0cfe34d32ab4db",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb",
        "patch": "@@ -94,6 +94,7 @@ BITCOIN_CORE_H = \\\n   consensus/params.h \\\n   consensus/validation.h \\\n   core_io.h \\\n+  core_memusage.h \\\n   eccryptoverify.h \\\n   ecwrapper.h \\\n   hash.h \\"
      },
      {
        "sha": "f02949de53528d0ab03c9853d081c4b0b431bade",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb",
        "patch": "@@ -83,7 +83,7 @@ CCoinsMap::const_iterator CCoinsViewCache::FetchCoins(const uint256 &txid) const\n         // version as fresh.\n         ret->second.flags = CCoinsCacheEntry::FRESH;\n     }\n-    cachedCoinsUsage += memusage::DynamicUsage(ret->second.coins);\n+    cachedCoinsUsage += ret->second.coins.DynamicMemoryUsage();\n     return ret;\n }\n \n@@ -110,7 +110,7 @@ CCoinsModifier CCoinsViewCache::ModifyCoins(const uint256 &txid) {\n             ret.first->second.flags = CCoinsCacheEntry::FRESH;\n         }\n     } else {\n-        cachedCoinUsage = memusage::DynamicUsage(ret.first->second.coins);\n+        cachedCoinUsage = ret.first->second.coins.DynamicMemoryUsage();\n     }\n     // Assume that whenever ModifyCoins is called, the entry will be modified.\n     ret.first->second.flags |= CCoinsCacheEntry::DIRTY;\n@@ -159,21 +159,21 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n                     assert(it->second.flags & CCoinsCacheEntry::FRESH);\n                     CCoinsCacheEntry& entry = cacheCoins[it->first];\n                     entry.coins.swap(it->second.coins);\n-                    cachedCoinsUsage += memusage::DynamicUsage(entry.coins);\n+                    cachedCoinsUsage += entry.coins.DynamicMemoryUsage();\n                     entry.flags = CCoinsCacheEntry::DIRTY | CCoinsCacheEntry::FRESH;\n                 }\n             } else {\n                 if ((itUs->second.flags & CCoinsCacheEntry::FRESH) && it->second.coins.IsPruned()) {\n                     // The grandparent does not have an entry, and the child is\n                     // modified and being pruned. This means we can just delete\n                     // it from the parent.\n-                    cachedCoinsUsage -= memusage::DynamicUsage(itUs->second.coins);\n+                    cachedCoinsUsage -= itUs->second.coins.DynamicMemoryUsage();\n                     cacheCoins.erase(itUs);\n                 } else {\n                     // A normal modification.\n-                    cachedCoinsUsage -= memusage::DynamicUsage(itUs->second.coins);\n+                    cachedCoinsUsage -= itUs->second.coins.DynamicMemoryUsage();\n                     itUs->second.coins.swap(it->second.coins);\n-                    cachedCoinsUsage += memusage::DynamicUsage(itUs->second.coins);\n+                    cachedCoinsUsage += itUs->second.coins.DynamicMemoryUsage();\n                     itUs->second.flags |= CCoinsCacheEntry::DIRTY;\n                 }\n             }\n@@ -261,6 +261,6 @@ CCoinsModifier::~CCoinsModifier()\n         cache.cacheCoins.erase(it);\n     } else {\n         // If the coin still exists after the modification, add the new usage\n-        cache.cachedCoinsUsage += memusage::DynamicUsage(it->second.coins);\n+        cache.cachedCoinsUsage += it->second.coins.DynamicMemoryUsage();\n     }\n }"
      },
      {
        "sha": "bf4a777b8a9022e9cbac6e4ed9c4452639019d85",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb",
        "patch": "@@ -7,6 +7,7 @@\n #define BITCOIN_COINS_H\n \n #include \"compressor.h\"\n+#include \"core_memusage.h\"\n #include \"memusage.h\"\n #include \"serialize.h\"\n #include \"uint256.h\"\n@@ -257,8 +258,7 @@ class CCoins\n     size_t DynamicMemoryUsage() const {\n         size_t ret = memusage::DynamicUsage(vout);\n         BOOST_FOREACH(const CTxOut &out, vout) {\n-            const std::vector<unsigned char> *script = &out.scriptPubKey;\n-            ret += memusage::DynamicUsage(*script);\n+            ret += RecursiveDynamicUsage(out.scriptPubKey);\n         }\n         return ret;\n     }"
      },
      {
        "sha": "711135bb444390b85d895e7fab3d3788bedf1e99",
        "filename": "src/core_memusage.h",
        "status": "added",
        "additions": 62,
        "deletions": 0,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb/src/core_memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb/src/core_memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_memusage.h?ref=9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb",
        "patch": "@@ -0,0 +1,62 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CORE_MEMUSAGE_H\n+#define BITCOIN_CORE_MEMUSAGE_H\n+\n+#include \"primitives/transaction.h\"\n+#include \"primitives/block.h\"\n+#include \"memusage.h\"\n+\n+static inline size_t RecursiveDynamicUsage(const CScript& script) {\n+    return memusage::DynamicUsage(*static_cast<const std::vector<unsigned char>*>(&script));\n+}\n+\n+static inline size_t RecursiveDynamicUsage(const COutPoint& out) {\n+    return 0;\n+}\n+\n+static inline size_t RecursiveDynamicUsage(const CTxIn& in) {\n+    return RecursiveDynamicUsage(in.scriptSig) + RecursiveDynamicUsage(in.prevout);\n+}\n+\n+static inline size_t RecursiveDynamicUsage(const CTxOut& out) {\n+    return RecursiveDynamicUsage(out.scriptPubKey);\n+}\n+\n+static inline size_t RecursiveDynamicUsage(const CTransaction& tx) {\n+    size_t mem = memusage::DynamicUsage(tx.vin) + memusage::DynamicUsage(tx.vout);\n+    for (std::vector<CTxIn>::const_iterator it = tx.vin.begin(); it != tx.vin.end(); it++) {\n+        mem += RecursiveDynamicUsage(*it);\n+    }\n+    for (std::vector<CTxOut>::const_iterator it = tx.vout.begin(); it != tx.vout.end(); it++) {\n+        mem += RecursiveDynamicUsage(*it);\n+    }\n+    return mem;\n+}\n+\n+static inline size_t RecursiveDynamicUsage(const CMutableTransaction& tx) {\n+    size_t mem = memusage::DynamicUsage(tx.vin) + memusage::DynamicUsage(tx.vout);\n+    for (std::vector<CTxIn>::const_iterator it = tx.vin.begin(); it != tx.vin.end(); it++) {\n+        mem += RecursiveDynamicUsage(*it);\n+    }\n+    for (std::vector<CTxOut>::const_iterator it = tx.vout.begin(); it != tx.vout.end(); it++) {\n+        mem += RecursiveDynamicUsage(*it);\n+    }\n+    return mem;\n+}\n+\n+static inline size_t RecursiveDynamicUsage(const CBlock& block) {\n+    size_t mem = memusage::DynamicUsage(block.vtx) + memusage::DynamicUsage(block.vMerkleTree);\n+    for (std::vector<CTransaction>::const_iterator it = block.vtx.begin(); it != block.vtx.end(); it++) {\n+        mem += RecursiveDynamicUsage(*it);\n+    }\n+    return mem;\n+}\n+\n+static inline size_t RecursiveDynamicUsage(const CBlockLocator& locator) {\n+    return memusage::DynamicUsage(locator.vHave);\n+}\n+\n+#endif // BITCOIN_CORE_MEMUSAGE_H"
      },
      {
        "sha": "be3964df1bf4121a47c998c8580e74ab39b07263",
        "filename": "src/memusage.h",
        "status": "modified",
        "additions": 1,
        "deletions": 65,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb/src/memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb/src/memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/memusage.h?ref=9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb",
        "patch": "@@ -34,28 +34,14 @@ static inline size_t DynamicUsage(const float& v) { return 0; }\n static inline size_t DynamicUsage(const double& v) { return 0; }\n template<typename X> static inline size_t DynamicUsage(X * const &v) { return 0; }\n template<typename X> static inline size_t DynamicUsage(const X * const &v) { return 0; }\n-template<typename X, typename Y> static inline size_t DynamicUsage(std::pair<X, Y> &p) { return 0; }\n \n /** Compute the memory used for dynamically allocated but owned data structures.\n  *  For generic data types, this is *not* recursive. DynamicUsage(vector<vector<int> >)\n  *  will compute the memory used for the vector<int>'s, but not for the ints inside.\n  *  This is for efficiency reasons, as these functions are intended to be fast. If\n  *  application data structures require more accurate inner accounting, they should\n- *  use RecursiveDynamicUsage, iterate themselves, or use more efficient caching +\n- *  updating on modification.\n+ *  iterate themselves, or use more efficient caching + updating on modification.\n  */\n-template<typename X> static size_t DynamicUsage(const std::vector<X>& v);\n-template<typename X> static size_t DynamicUsage(const std::set<X>& s);\n-template<typename X, typename Y> static size_t DynamicUsage(const std::map<X, Y>& m);\n-template<typename X, typename Y> static size_t DynamicUsage(const boost::unordered_set<X, Y>& s);\n-template<typename X, typename Y, typename Z> static size_t DynamicUsage(const boost::unordered_map<X, Y, Z>& s);\n-template<typename X> static size_t DynamicUsage(const X& x);\n-\n-template<typename X> static size_t RecursiveDynamicUsage(const std::vector<X>& v);\n-template<typename X> static size_t RecursiveDynamicUsage(const std::set<X>& v);\n-template<typename X, typename Y> static size_t RecursiveDynamicUsage(const std::map<X, Y>& v);\n-template<typename X, typename Y> static size_t RecursiveDynamicUsage(const std::pair<X, Y>& v);\n-template<typename X> static size_t RecursiveDynamicUsage(const X& v);\n \n static inline size_t MallocUsage(size_t alloc)\n {\n@@ -88,54 +74,18 @@ static inline size_t DynamicUsage(const std::vector<X>& v)\n     return MallocUsage(v.capacity() * sizeof(X));\n }\n \n-template<typename X>\n-static inline size_t RecursiveDynamicUsage(const std::vector<X>& v)\n-{\n-    size_t usage = DynamicUsage(v);\n-    BOOST_FOREACH(const X& x, v) {\n-        usage += RecursiveDynamicUsage(x);\n-    }\n-    return usage;\n-}\n-\n template<typename X>\n static inline size_t DynamicUsage(const std::set<X>& s)\n {\n     return MallocUsage(sizeof(stl_tree_node<X>)) * s.size();\n }\n \n-template<typename X>\n-static inline size_t RecursiveDynamicUsage(const std::set<X>& v)\n-{\n-    size_t usage = DynamicUsage(v);\n-    BOOST_FOREACH(const X& x, v) {\n-        usage += RecursiveDynamicUsage(x);\n-    }\n-    return usage;\n-}\n-\n template<typename X, typename Y>\n static inline size_t DynamicUsage(const std::map<X, Y>& m)\n {\n     return MallocUsage(sizeof(stl_tree_node<std::pair<const X, Y> >)) * m.size();\n }\n \n-template<typename X, typename Y>\n-static inline size_t RecursiveDynamicUsage(const std::map<X, Y>& v)\n-{\n-    size_t usage = DynamicUsage(v);\n-    for (typename std::map<X, Y>::const_iterator it = v.begin(); it != v.end(); it++) {\n-        usage += RecursiveDynamicUsage(*it);\n-    }\n-    return usage;\n-}\n-\n-template<typename X, typename Y>\n-static inline size_t RecursiveDynamicUsage(const std::pair<X, Y>& v)\n-{\n-    return RecursiveDynamicUsage(v.first) + RecursiveDynamicUsage(v.second);\n-}\n-\n // Boost data structures\n \n template<typename X>\n@@ -157,20 +107,6 @@ static inline size_t DynamicUsage(const boost::unordered_map<X, Y, Z>& m)\n     return MallocUsage(sizeof(boost_unordered_node<std::pair<const X, Y> >)) * m.size() + MallocUsage(sizeof(void*) * m.bucket_count());\n }\n \n-// Dispatch to class method as fallback\n-\n-template<typename X>\n-static inline size_t DynamicUsage(const X& x)\n-{\n-    return x.DynamicMemoryUsage();\n-}\n-\n-template<typename X>\n-static inline size_t RecursiveDynamicUsage(const X& x)\n-{\n-    return DynamicUsage(x);\n-}\n-\n }\n \n #endif"
      },
      {
        "sha": "606dbea79857d2f4cc79b0136ad46486f3c187d9",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb",
        "patch": "@@ -72,11 +72,6 @@ void CTransaction::UpdateHash() const\n     *const_cast<uint256*>(&hash) = SerializeHash(*this);\n }\n \n-size_t CTransaction::DynamicMemoryUsage() const\n-{\n-    return memusage::RecursiveDynamicUsage(vin) + memusage::RecursiveDynamicUsage(vout);\n-}\n-\n CTransaction::CTransaction() : nVersion(CTransaction::CURRENT_VERSION), vin(), vout(), nLockTime(0) { }\n \n CTransaction::CTransaction(const CMutableTransaction &tx) : nVersion(tx.nVersion), vin(tx.vin), vout(tx.vout), nLockTime(tx.nLockTime) {"
      },
      {
        "sha": "6cfd93a9a1891c6d19884b0096ffcb124d8c45ba",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb",
        "patch": "@@ -7,7 +7,6 @@\n #define BITCOIN_PRIMITIVES_TRANSACTION_H\n \n #include \"amount.h\"\n-#include \"memusage.h\"\n #include \"script/script.h\"\n #include \"serialize.h\"\n #include \"uint256.h\"\n@@ -49,8 +48,6 @@ class COutPoint\n     }\n \n     std::string ToString() const;\n-\n-    size_t DynamicMemoryUsage() const { return 0; }\n };\n \n /** An input of a transaction.  It contains the location of the previous\n@@ -99,8 +96,6 @@ class CTxIn\n     }\n \n     std::string ToString() const;\n-\n-    size_t DynamicMemoryUsage() const { return scriptSig.DynamicMemoryUsage(); }\n };\n \n /** An output of a transaction.  It contains the public key that the next input\n@@ -171,8 +166,6 @@ class CTxOut\n     }\n \n     std::string ToString() const;\n-\n-    size_t DynamicMemoryUsage() const { return scriptPubKey.DynamicMemoryUsage(); }\n };\n \n struct CMutableTransaction;\n@@ -256,8 +249,6 @@ class CTransaction\n     }\n \n     std::string ToString() const;\n-\n-    size_t DynamicMemoryUsage() const;\n };\n \n /** A mutable version of CTransaction. */"
      },
      {
        "sha": "fd33924732c3476c1639b5332b62c0382f1bc7b3",
        "filename": "src/script/script.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb/src/script/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb/src/script/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.cpp?ref=9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb",
        "patch": "@@ -260,8 +260,3 @@ std::string CScript::ToString() const\n     }\n     return str;\n }\n-\n-size_t CScript::DynamicMemoryUsage() const\n-{\n-    return memusage::DynamicUsage(*(static_cast<const std::vector<unsigned char>*>(this)));\n-}"
      },
      {
        "sha": "e39ca57f4fbe94b5be929f722d5c19ec708906b2",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb",
        "patch": "@@ -6,7 +6,6 @@\n #ifndef BITCOIN_SCRIPT_SCRIPT_H\n #define BITCOIN_SCRIPT_SCRIPT_H\n \n-#include \"memusage.h\"\n #include \"crypto/common.h\"\n \n #include <assert.h>\n@@ -608,8 +607,6 @@ class CScript : public std::vector<unsigned char>\n         // The default std::vector::clear() does not release memory.\n         std::vector<unsigned char>().swap(*this);\n     }\n-\n-    size_t DynamicMemoryUsage() const;\n };\n \n class CReserveScript"
      },
      {
        "sha": "13d848311a037331269640ed2deaf06d1c0517b6",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb",
        "patch": "@@ -70,9 +70,9 @@ class CCoinsViewCacheTest : public CCoinsViewCache\n         // Manually recompute the dynamic usage of the whole data, and compare it.\n         size_t ret = memusage::DynamicUsage(cacheCoins);\n         for (CCoinsMap::iterator it = cacheCoins.begin(); it != cacheCoins.end(); it++) {\n-            ret += memusage::DynamicUsage(it->second.coins);\n+            ret += it->second.coins.DynamicMemoryUsage();\n         }\n-        BOOST_CHECK_EQUAL(memusage::DynamicUsage(*this), ret);\n+        BOOST_CHECK_EQUAL(DynamicMemoryUsage(), ret);\n     }\n \n };"
      },
      {
        "sha": "5bc06e50563dd931399299ac18f75664383fdfa0",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb",
        "patch": "@@ -31,7 +31,7 @@ CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n {\n     nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n     nModSize = tx.CalculateModifiedSize(nTxSize);\n-    nUsageSize = tx.DynamicMemoryUsage();\n+    nUsageSize = RecursiveDynamicUsage(tx);\n }\n \n CTxMemPoolEntry::CTxMemPoolEntry(const CTxMemPoolEntry& other)"
      }
    ]
  },
  {
    "sha": "8fe5cce3d59502c03274650c0738aaf416d083ba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZmU1Y2NlM2Q1OTUwMmMwMzI3NDY1MGMwNzM4YWFmNDE2ZDA4M2Jh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-20T15:48:52Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-20T15:57:37Z"
      },
      "message": "Merge pull request #6453\n\n9e38d0f Separate core memory usage computation in core_memusage.h (Pieter Wuille)",
      "tree": {
        "sha": "469af8922b6454945e160b99e118d35873470180",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/469af8922b6454945e160b99e118d35873470180"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8fe5cce3d59502c03274650c0738aaf416d083ba",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVrRpxAAoJEHSBCwEjRsmmikcIALWf35666GcKIVgNvif94N13\nZ+LtbTWaZRT1kWnY0lYnJE8enn1tXfdgUrJH/+j+Mw/dlf1lvpPWIaVd6f4ienSE\nsKYUL1XLSpwfZtFurYsTa1lH9mwqOgzeNeHg2Wb4BfwaldFFaxwqiEcQxj9NLHFH\n1G+8lnD5cuprRp0HdwYcnPb7/iu6lEQ1pXUdaGjPVeko8wQmT7IperX1UhNE+UNo\nbXp/V0IAu89R5f4/PzgDFbpPOGTG018cKXHWmz7psYOaGtGLLvwwFkYCS+/WD0Va\nZ3Lq9kPQ2dsgwcvmLEyL4vCt+yiw8cHRiKg4fiqjCku9tI6QVerNSVN2lj8cG40=\n=ugO6\n-----END PGP SIGNATURE-----",
        "payload": "tree 469af8922b6454945e160b99e118d35873470180\nparent 89289d875da108c42ca013f33597eda46cb6eb53\nparent 9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1437407332 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1437407857 +0200\n\nMerge pull request #6453\n\n9e38d0f Separate core memory usage computation in core_memusage.h (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fe5cce3d59502c03274650c0738aaf416d083ba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8fe5cce3d59502c03274650c0738aaf416d083ba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fe5cce3d59502c03274650c0738aaf416d083ba/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "89289d875da108c42ca013f33597eda46cb6eb53",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89289d875da108c42ca013f33597eda46cb6eb53",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/89289d875da108c42ca013f33597eda46cb6eb53"
      },
      {
        "sha": "9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9e38d0f7451092f6a16853a2b0a37b68a5b3c3fb"
      }
    ],
    "stats": {
      "total": 175,
      "additions": 76,
      "deletions": 99
    },
    "files": [
      {
        "sha": "cc8dded413361c7a81c7bee8ea0cfe34d32ab4db",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fe5cce3d59502c03274650c0738aaf416d083ba/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fe5cce3d59502c03274650c0738aaf416d083ba/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=8fe5cce3d59502c03274650c0738aaf416d083ba",
        "patch": "@@ -94,6 +94,7 @@ BITCOIN_CORE_H = \\\n   consensus/params.h \\\n   consensus/validation.h \\\n   core_io.h \\\n+  core_memusage.h \\\n   eccryptoverify.h \\\n   ecwrapper.h \\\n   hash.h \\"
      },
      {
        "sha": "f02949de53528d0ab03c9853d081c4b0b431bade",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fe5cce3d59502c03274650c0738aaf416d083ba/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fe5cce3d59502c03274650c0738aaf416d083ba/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=8fe5cce3d59502c03274650c0738aaf416d083ba",
        "patch": "@@ -83,7 +83,7 @@ CCoinsMap::const_iterator CCoinsViewCache::FetchCoins(const uint256 &txid) const\n         // version as fresh.\n         ret->second.flags = CCoinsCacheEntry::FRESH;\n     }\n-    cachedCoinsUsage += memusage::DynamicUsage(ret->second.coins);\n+    cachedCoinsUsage += ret->second.coins.DynamicMemoryUsage();\n     return ret;\n }\n \n@@ -110,7 +110,7 @@ CCoinsModifier CCoinsViewCache::ModifyCoins(const uint256 &txid) {\n             ret.first->second.flags = CCoinsCacheEntry::FRESH;\n         }\n     } else {\n-        cachedCoinUsage = memusage::DynamicUsage(ret.first->second.coins);\n+        cachedCoinUsage = ret.first->second.coins.DynamicMemoryUsage();\n     }\n     // Assume that whenever ModifyCoins is called, the entry will be modified.\n     ret.first->second.flags |= CCoinsCacheEntry::DIRTY;\n@@ -159,21 +159,21 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n                     assert(it->second.flags & CCoinsCacheEntry::FRESH);\n                     CCoinsCacheEntry& entry = cacheCoins[it->first];\n                     entry.coins.swap(it->second.coins);\n-                    cachedCoinsUsage += memusage::DynamicUsage(entry.coins);\n+                    cachedCoinsUsage += entry.coins.DynamicMemoryUsage();\n                     entry.flags = CCoinsCacheEntry::DIRTY | CCoinsCacheEntry::FRESH;\n                 }\n             } else {\n                 if ((itUs->second.flags & CCoinsCacheEntry::FRESH) && it->second.coins.IsPruned()) {\n                     // The grandparent does not have an entry, and the child is\n                     // modified and being pruned. This means we can just delete\n                     // it from the parent.\n-                    cachedCoinsUsage -= memusage::DynamicUsage(itUs->second.coins);\n+                    cachedCoinsUsage -= itUs->second.coins.DynamicMemoryUsage();\n                     cacheCoins.erase(itUs);\n                 } else {\n                     // A normal modification.\n-                    cachedCoinsUsage -= memusage::DynamicUsage(itUs->second.coins);\n+                    cachedCoinsUsage -= itUs->second.coins.DynamicMemoryUsage();\n                     itUs->second.coins.swap(it->second.coins);\n-                    cachedCoinsUsage += memusage::DynamicUsage(itUs->second.coins);\n+                    cachedCoinsUsage += itUs->second.coins.DynamicMemoryUsage();\n                     itUs->second.flags |= CCoinsCacheEntry::DIRTY;\n                 }\n             }\n@@ -261,6 +261,6 @@ CCoinsModifier::~CCoinsModifier()\n         cache.cacheCoins.erase(it);\n     } else {\n         // If the coin still exists after the modification, add the new usage\n-        cache.cachedCoinsUsage += memusage::DynamicUsage(it->second.coins);\n+        cache.cachedCoinsUsage += it->second.coins.DynamicMemoryUsage();\n     }\n }"
      },
      {
        "sha": "bf4a777b8a9022e9cbac6e4ed9c4452639019d85",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fe5cce3d59502c03274650c0738aaf416d083ba/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fe5cce3d59502c03274650c0738aaf416d083ba/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=8fe5cce3d59502c03274650c0738aaf416d083ba",
        "patch": "@@ -7,6 +7,7 @@\n #define BITCOIN_COINS_H\n \n #include \"compressor.h\"\n+#include \"core_memusage.h\"\n #include \"memusage.h\"\n #include \"serialize.h\"\n #include \"uint256.h\"\n@@ -257,8 +258,7 @@ class CCoins\n     size_t DynamicMemoryUsage() const {\n         size_t ret = memusage::DynamicUsage(vout);\n         BOOST_FOREACH(const CTxOut &out, vout) {\n-            const std::vector<unsigned char> *script = &out.scriptPubKey;\n-            ret += memusage::DynamicUsage(*script);\n+            ret += RecursiveDynamicUsage(out.scriptPubKey);\n         }\n         return ret;\n     }"
      },
      {
        "sha": "711135bb444390b85d895e7fab3d3788bedf1e99",
        "filename": "src/core_memusage.h",
        "status": "added",
        "additions": 62,
        "deletions": 0,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fe5cce3d59502c03274650c0738aaf416d083ba/src/core_memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fe5cce3d59502c03274650c0738aaf416d083ba/src/core_memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_memusage.h?ref=8fe5cce3d59502c03274650c0738aaf416d083ba",
        "patch": "@@ -0,0 +1,62 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CORE_MEMUSAGE_H\n+#define BITCOIN_CORE_MEMUSAGE_H\n+\n+#include \"primitives/transaction.h\"\n+#include \"primitives/block.h\"\n+#include \"memusage.h\"\n+\n+static inline size_t RecursiveDynamicUsage(const CScript& script) {\n+    return memusage::DynamicUsage(*static_cast<const std::vector<unsigned char>*>(&script));\n+}\n+\n+static inline size_t RecursiveDynamicUsage(const COutPoint& out) {\n+    return 0;\n+}\n+\n+static inline size_t RecursiveDynamicUsage(const CTxIn& in) {\n+    return RecursiveDynamicUsage(in.scriptSig) + RecursiveDynamicUsage(in.prevout);\n+}\n+\n+static inline size_t RecursiveDynamicUsage(const CTxOut& out) {\n+    return RecursiveDynamicUsage(out.scriptPubKey);\n+}\n+\n+static inline size_t RecursiveDynamicUsage(const CTransaction& tx) {\n+    size_t mem = memusage::DynamicUsage(tx.vin) + memusage::DynamicUsage(tx.vout);\n+    for (std::vector<CTxIn>::const_iterator it = tx.vin.begin(); it != tx.vin.end(); it++) {\n+        mem += RecursiveDynamicUsage(*it);\n+    }\n+    for (std::vector<CTxOut>::const_iterator it = tx.vout.begin(); it != tx.vout.end(); it++) {\n+        mem += RecursiveDynamicUsage(*it);\n+    }\n+    return mem;\n+}\n+\n+static inline size_t RecursiveDynamicUsage(const CMutableTransaction& tx) {\n+    size_t mem = memusage::DynamicUsage(tx.vin) + memusage::DynamicUsage(tx.vout);\n+    for (std::vector<CTxIn>::const_iterator it = tx.vin.begin(); it != tx.vin.end(); it++) {\n+        mem += RecursiveDynamicUsage(*it);\n+    }\n+    for (std::vector<CTxOut>::const_iterator it = tx.vout.begin(); it != tx.vout.end(); it++) {\n+        mem += RecursiveDynamicUsage(*it);\n+    }\n+    return mem;\n+}\n+\n+static inline size_t RecursiveDynamicUsage(const CBlock& block) {\n+    size_t mem = memusage::DynamicUsage(block.vtx) + memusage::DynamicUsage(block.vMerkleTree);\n+    for (std::vector<CTransaction>::const_iterator it = block.vtx.begin(); it != block.vtx.end(); it++) {\n+        mem += RecursiveDynamicUsage(*it);\n+    }\n+    return mem;\n+}\n+\n+static inline size_t RecursiveDynamicUsage(const CBlockLocator& locator) {\n+    return memusage::DynamicUsage(locator.vHave);\n+}\n+\n+#endif // BITCOIN_CORE_MEMUSAGE_H"
      },
      {
        "sha": "be3964df1bf4121a47c998c8580e74ab39b07263",
        "filename": "src/memusage.h",
        "status": "modified",
        "additions": 1,
        "deletions": 65,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fe5cce3d59502c03274650c0738aaf416d083ba/src/memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fe5cce3d59502c03274650c0738aaf416d083ba/src/memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/memusage.h?ref=8fe5cce3d59502c03274650c0738aaf416d083ba",
        "patch": "@@ -34,28 +34,14 @@ static inline size_t DynamicUsage(const float& v) { return 0; }\n static inline size_t DynamicUsage(const double& v) { return 0; }\n template<typename X> static inline size_t DynamicUsage(X * const &v) { return 0; }\n template<typename X> static inline size_t DynamicUsage(const X * const &v) { return 0; }\n-template<typename X, typename Y> static inline size_t DynamicUsage(std::pair<X, Y> &p) { return 0; }\n \n /** Compute the memory used for dynamically allocated but owned data structures.\n  *  For generic data types, this is *not* recursive. DynamicUsage(vector<vector<int> >)\n  *  will compute the memory used for the vector<int>'s, but not for the ints inside.\n  *  This is for efficiency reasons, as these functions are intended to be fast. If\n  *  application data structures require more accurate inner accounting, they should\n- *  use RecursiveDynamicUsage, iterate themselves, or use more efficient caching +\n- *  updating on modification.\n+ *  iterate themselves, or use more efficient caching + updating on modification.\n  */\n-template<typename X> static size_t DynamicUsage(const std::vector<X>& v);\n-template<typename X> static size_t DynamicUsage(const std::set<X>& s);\n-template<typename X, typename Y> static size_t DynamicUsage(const std::map<X, Y>& m);\n-template<typename X, typename Y> static size_t DynamicUsage(const boost::unordered_set<X, Y>& s);\n-template<typename X, typename Y, typename Z> static size_t DynamicUsage(const boost::unordered_map<X, Y, Z>& s);\n-template<typename X> static size_t DynamicUsage(const X& x);\n-\n-template<typename X> static size_t RecursiveDynamicUsage(const std::vector<X>& v);\n-template<typename X> static size_t RecursiveDynamicUsage(const std::set<X>& v);\n-template<typename X, typename Y> static size_t RecursiveDynamicUsage(const std::map<X, Y>& v);\n-template<typename X, typename Y> static size_t RecursiveDynamicUsage(const std::pair<X, Y>& v);\n-template<typename X> static size_t RecursiveDynamicUsage(const X& v);\n \n static inline size_t MallocUsage(size_t alloc)\n {\n@@ -88,54 +74,18 @@ static inline size_t DynamicUsage(const std::vector<X>& v)\n     return MallocUsage(v.capacity() * sizeof(X));\n }\n \n-template<typename X>\n-static inline size_t RecursiveDynamicUsage(const std::vector<X>& v)\n-{\n-    size_t usage = DynamicUsage(v);\n-    BOOST_FOREACH(const X& x, v) {\n-        usage += RecursiveDynamicUsage(x);\n-    }\n-    return usage;\n-}\n-\n template<typename X>\n static inline size_t DynamicUsage(const std::set<X>& s)\n {\n     return MallocUsage(sizeof(stl_tree_node<X>)) * s.size();\n }\n \n-template<typename X>\n-static inline size_t RecursiveDynamicUsage(const std::set<X>& v)\n-{\n-    size_t usage = DynamicUsage(v);\n-    BOOST_FOREACH(const X& x, v) {\n-        usage += RecursiveDynamicUsage(x);\n-    }\n-    return usage;\n-}\n-\n template<typename X, typename Y>\n static inline size_t DynamicUsage(const std::map<X, Y>& m)\n {\n     return MallocUsage(sizeof(stl_tree_node<std::pair<const X, Y> >)) * m.size();\n }\n \n-template<typename X, typename Y>\n-static inline size_t RecursiveDynamicUsage(const std::map<X, Y>& v)\n-{\n-    size_t usage = DynamicUsage(v);\n-    for (typename std::map<X, Y>::const_iterator it = v.begin(); it != v.end(); it++) {\n-        usage += RecursiveDynamicUsage(*it);\n-    }\n-    return usage;\n-}\n-\n-template<typename X, typename Y>\n-static inline size_t RecursiveDynamicUsage(const std::pair<X, Y>& v)\n-{\n-    return RecursiveDynamicUsage(v.first) + RecursiveDynamicUsage(v.second);\n-}\n-\n // Boost data structures\n \n template<typename X>\n@@ -157,20 +107,6 @@ static inline size_t DynamicUsage(const boost::unordered_map<X, Y, Z>& m)\n     return MallocUsage(sizeof(boost_unordered_node<std::pair<const X, Y> >)) * m.size() + MallocUsage(sizeof(void*) * m.bucket_count());\n }\n \n-// Dispatch to class method as fallback\n-\n-template<typename X>\n-static inline size_t DynamicUsage(const X& x)\n-{\n-    return x.DynamicMemoryUsage();\n-}\n-\n-template<typename X>\n-static inline size_t RecursiveDynamicUsage(const X& x)\n-{\n-    return DynamicUsage(x);\n-}\n-\n }\n \n #endif"
      },
      {
        "sha": "606dbea79857d2f4cc79b0136ad46486f3c187d9",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fe5cce3d59502c03274650c0738aaf416d083ba/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fe5cce3d59502c03274650c0738aaf416d083ba/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=8fe5cce3d59502c03274650c0738aaf416d083ba",
        "patch": "@@ -72,11 +72,6 @@ void CTransaction::UpdateHash() const\n     *const_cast<uint256*>(&hash) = SerializeHash(*this);\n }\n \n-size_t CTransaction::DynamicMemoryUsage() const\n-{\n-    return memusage::RecursiveDynamicUsage(vin) + memusage::RecursiveDynamicUsage(vout);\n-}\n-\n CTransaction::CTransaction() : nVersion(CTransaction::CURRENT_VERSION), vin(), vout(), nLockTime(0) { }\n \n CTransaction::CTransaction(const CMutableTransaction &tx) : nVersion(tx.nVersion), vin(tx.vin), vout(tx.vout), nLockTime(tx.nLockTime) {"
      },
      {
        "sha": "6cfd93a9a1891c6d19884b0096ffcb124d8c45ba",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fe5cce3d59502c03274650c0738aaf416d083ba/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fe5cce3d59502c03274650c0738aaf416d083ba/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=8fe5cce3d59502c03274650c0738aaf416d083ba",
        "patch": "@@ -7,7 +7,6 @@\n #define BITCOIN_PRIMITIVES_TRANSACTION_H\n \n #include \"amount.h\"\n-#include \"memusage.h\"\n #include \"script/script.h\"\n #include \"serialize.h\"\n #include \"uint256.h\"\n@@ -49,8 +48,6 @@ class COutPoint\n     }\n \n     std::string ToString() const;\n-\n-    size_t DynamicMemoryUsage() const { return 0; }\n };\n \n /** An input of a transaction.  It contains the location of the previous\n@@ -99,8 +96,6 @@ class CTxIn\n     }\n \n     std::string ToString() const;\n-\n-    size_t DynamicMemoryUsage() const { return scriptSig.DynamicMemoryUsage(); }\n };\n \n /** An output of a transaction.  It contains the public key that the next input\n@@ -171,8 +166,6 @@ class CTxOut\n     }\n \n     std::string ToString() const;\n-\n-    size_t DynamicMemoryUsage() const { return scriptPubKey.DynamicMemoryUsage(); }\n };\n \n struct CMutableTransaction;\n@@ -256,8 +249,6 @@ class CTransaction\n     }\n \n     std::string ToString() const;\n-\n-    size_t DynamicMemoryUsage() const;\n };\n \n /** A mutable version of CTransaction. */"
      },
      {
        "sha": "fd33924732c3476c1639b5332b62c0382f1bc7b3",
        "filename": "src/script/script.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fe5cce3d59502c03274650c0738aaf416d083ba/src/script/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fe5cce3d59502c03274650c0738aaf416d083ba/src/script/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.cpp?ref=8fe5cce3d59502c03274650c0738aaf416d083ba",
        "patch": "@@ -260,8 +260,3 @@ std::string CScript::ToString() const\n     }\n     return str;\n }\n-\n-size_t CScript::DynamicMemoryUsage() const\n-{\n-    return memusage::DynamicUsage(*(static_cast<const std::vector<unsigned char>*>(this)));\n-}"
      },
      {
        "sha": "e39ca57f4fbe94b5be929f722d5c19ec708906b2",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fe5cce3d59502c03274650c0738aaf416d083ba/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fe5cce3d59502c03274650c0738aaf416d083ba/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=8fe5cce3d59502c03274650c0738aaf416d083ba",
        "patch": "@@ -6,7 +6,6 @@\n #ifndef BITCOIN_SCRIPT_SCRIPT_H\n #define BITCOIN_SCRIPT_SCRIPT_H\n \n-#include \"memusage.h\"\n #include \"crypto/common.h\"\n \n #include <assert.h>\n@@ -608,8 +607,6 @@ class CScript : public std::vector<unsigned char>\n         // The default std::vector::clear() does not release memory.\n         std::vector<unsigned char>().swap(*this);\n     }\n-\n-    size_t DynamicMemoryUsage() const;\n };\n \n class CReserveScript"
      },
      {
        "sha": "13d848311a037331269640ed2deaf06d1c0517b6",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fe5cce3d59502c03274650c0738aaf416d083ba/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fe5cce3d59502c03274650c0738aaf416d083ba/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=8fe5cce3d59502c03274650c0738aaf416d083ba",
        "patch": "@@ -70,9 +70,9 @@ class CCoinsViewCacheTest : public CCoinsViewCache\n         // Manually recompute the dynamic usage of the whole data, and compare it.\n         size_t ret = memusage::DynamicUsage(cacheCoins);\n         for (CCoinsMap::iterator it = cacheCoins.begin(); it != cacheCoins.end(); it++) {\n-            ret += memusage::DynamicUsage(it->second.coins);\n+            ret += it->second.coins.DynamicMemoryUsage();\n         }\n-        BOOST_CHECK_EQUAL(memusage::DynamicUsage(*this), ret);\n+        BOOST_CHECK_EQUAL(DynamicMemoryUsage(), ret);\n     }\n \n };"
      },
      {
        "sha": "5bc06e50563dd931399299ac18f75664383fdfa0",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fe5cce3d59502c03274650c0738aaf416d083ba/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fe5cce3d59502c03274650c0738aaf416d083ba/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=8fe5cce3d59502c03274650c0738aaf416d083ba",
        "patch": "@@ -31,7 +31,7 @@ CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n {\n     nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n     nModSize = tx.CalculateModifiedSize(nTxSize);\n-    nUsageSize = tx.DynamicMemoryUsage();\n+    nUsageSize = RecursiveDynamicUsage(tx);\n }\n \n CTxMemPoolEntry::CTxMemPoolEntry(const CTxMemPoolEntry& other)"
      }
    ]
  },
  {
    "sha": "6d6b11e793a2d1a106238a2838f5df1d3124217b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZDZiMTFlNzkzYTJkMWExMDYyMzhhMjgzOGY1ZGYxZDMxMjQyMTdi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-20T15:59:54Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-20T16:00:32Z"
      },
      "message": "Merge pull request #6408\n\ndca6040 [Qt] remove std namespace polution from code (Philip Kaufmann)",
      "tree": {
        "sha": "93be97bf9de5ef09879ba7824a17e525ed0de606",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/93be97bf9de5ef09879ba7824a17e525ed0de606"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6d6b11e793a2d1a106238a2838f5df1d3124217b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVrRsgAAoJEHSBCwEjRsmmgPMH/21i1zzgWDrQQ6iuo2yar1zP\nofbdUetiYit0IITe8IiKD1DikXLVBwoArpyw+EZz8wr+CHNlVPFxYEGu1lAGQv8o\nWCJzs87Kuu/OlM6NeUr2oXp3YUa45PaLsViOiN23LQlCGQWc51JibWvtFlsaSD48\nKWruBNJr53js/8fO0Log776joo/patgJOFcyGST9JBUwpfWTmfsM+7QcskYm7fEl\nAVFEaoVQSbd/GRitIj9FBZIVCjGMOuc1zMtzIt/VpAW0tdtPa9U80hWynqklMKtT\nUwUfkSECBLeBmsC/onvFcdnI2U6usqHMBjTTQ9lrRnCjtfbPBbjnLjItSdKYnCA=\n=D03f\n-----END PGP SIGNATURE-----",
        "payload": "tree 93be97bf9de5ef09879ba7824a17e525ed0de606\nparent 8fe5cce3d59502c03274650c0738aaf416d083ba\nparent dca6040a8625bfdb905f3aa99e44bb31e84352b9\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1437407994 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1437408032 +0200\n\nMerge pull request #6408\n\ndca6040 [Qt] remove std namespace polution from code (Philip Kaufmann)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d6b11e793a2d1a106238a2838f5df1d3124217b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6d6b11e793a2d1a106238a2838f5df1d3124217b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d6b11e793a2d1a106238a2838f5df1d3124217b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8fe5cce3d59502c03274650c0738aaf416d083ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fe5cce3d59502c03274650c0738aaf416d083ba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8fe5cce3d59502c03274650c0738aaf416d083ba"
      },
      {
        "sha": "dca6040a8625bfdb905f3aa99e44bb31e84352b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dca6040a8625bfdb905f3aa99e44bb31e84352b9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dca6040a8625bfdb905f3aa99e44bb31e84352b9"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 11,
      "deletions": 20
    },
    "files": [
      {
        "sha": "778dbcb1ca3dc760f7a54dbcf0a2f1fbc7a22bbe",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d6b11e793a2d1a106238a2838f5df1d3124217b/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d6b11e793a2d1a106238a2838f5df1d3124217b/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=6d6b11e793a2d1a106238a2838f5df1d3124217b",
        "patch": "@@ -30,7 +30,6 @@\n #include <QTreeWidget>\n #include <QTreeWidgetItem>\n \n-using namespace std;\n QList<CAmount> CoinControlDialog::payAmounts;\n CCoinControl* CoinControlDialog::coinControl = new CCoinControl();\n bool CoinControlDialog::fSubtractFeeFromAmount = false;\n@@ -442,7 +441,7 @@ QString CoinControlDialog::getPriorityLabel(double dPriority, double mempoolEsti\n // shows count of locked unspent outputs\n void CoinControlDialog::updateLabelLocked()\n {\n-    vector<COutPoint> vOutpts;\n+    std::vector<COutPoint> vOutpts;\n     model->listLockedCoins(vOutpts);\n     if (vOutpts.size() > 0)\n     {\n@@ -467,7 +466,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n \n         if (amount > 0)\n         {\n-            CTxOut txout(amount, (CScript)vector<unsigned char>(24, 0));\n+            CTxOut txout(amount, (CScript)std::vector<unsigned char>(24, 0));\n             txDummy.vout.push_back(txout);\n             if (txout.IsDust(::minRelayTxFee))\n                fDust = true;\n@@ -487,8 +486,8 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     int nQuantityUncompressed   = 0;\n     bool fAllowFree             = false;\n \n-    vector<COutPoint> vCoinControl;\n-    vector<COutput>   vOutputs;\n+    std::vector<COutPoint> vCoinControl;\n+    std::vector<COutput>   vOutputs;\n     coinControl->ListSelected(vCoinControl);\n     model->getOutputs(vCoinControl, vOutputs);\n \n@@ -568,7 +567,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n             // Never create dust outputs; if we would, just add the dust to the fee.\n             if (nChange > 0 && nChange < CENT)\n             {\n-                CTxOut txout(nChange, (CScript)vector<unsigned char>(24, 0));\n+                CTxOut txout(nChange, (CScript)std::vector<unsigned char>(24, 0));\n                 if (txout.IsDust(::minRelayTxFee))\n                 {\n                     if (CoinControlDialog::fSubtractFeeFromAmount) // dust-change will be raised until no dust\n@@ -687,10 +686,10 @@ void CoinControlDialog::updateView()\n     int nDisplayUnit = model->getOptionsModel()->getDisplayUnit();\n     double mempoolEstimatePriority = mempool.estimatePriority(nTxConfirmTarget);\n \n-    map<QString, vector<COutput> > mapCoins;\n+    std::map<QString, std::vector<COutput> > mapCoins;\n     model->listCoins(mapCoins);\n \n-    BOOST_FOREACH(const PAIRTYPE(QString, vector<COutput>)& coins, mapCoins) {\n+    BOOST_FOREACH(const PAIRTYPE(QString, std::vector<COutput>)& coins, mapCoins) {\n         QTreeWidgetItem *itemWalletAddress = new QTreeWidgetItem();\n         itemWalletAddress->setCheckState(COLUMN_CHECKBOX, Qt::Unchecked);\n         QString sWalletAddress = coins.first;"
      },
      {
        "sha": "78a783dea4680c6e17a34e1fea4c79cf53560380",
        "filename": "src/qt/paymentrequestplus.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d6b11e793a2d1a106238a2838f5df1d3124217b/src/qt/paymentrequestplus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d6b11e793a2d1a106238a2838f5df1d3124217b/src/qt/paymentrequestplus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.cpp?ref=6d6b11e793a2d1a106238a2838f5df1d3124217b",
        "patch": "@@ -19,8 +19,6 @@\n #include <QDebug>\n #include <QSslCertificate>\n \n-using namespace std;\n-\n class SSLVerifyError : public std::runtime_error\n {\n public:\n@@ -49,7 +47,7 @@ bool PaymentRequestPlus::parse(const QByteArray& data)\n     return true;\n }\n \n-bool PaymentRequestPlus::SerializeToString(string* output) const\n+bool PaymentRequestPlus::SerializeToString(std::string* output) const\n {\n     return paymentRequest.SerializeToString(output);\n }"
      },
      {
        "sha": "6481b0046e7603ba6d8fb2d97431f5202c9acf0c",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d6b11e793a2d1a106238a2838f5df1d3124217b/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d6b11e793a2d1a106238a2838f5df1d3124217b/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=6d6b11e793a2d1a106238a2838f5df1d3124217b",
        "patch": "@@ -46,8 +46,6 @@\n #include <QUrlQuery>\n #endif\n \n-using namespace std;\n-\n const int BITCOIN_IPC_CONNECT_TIMEOUT = 1000; // milliseconds\n const QString BITCOIN_IPC_PREFIX(\"bitcoin:\");\n // BIP70 payment protocol messages\n@@ -647,7 +645,7 @@ void PaymentServer::fetchPaymentACK(CWallet* wallet, SendCoinsRecipient recipien\n     // Create a new refund address, or re-use:\n     QString account = tr(\"Refund from %1\").arg(recipient.authenticatedMerchant);\n     std::string strAccount = account.toStdString();\n-    set<CTxDestination> refundAddresses = wallet->GetAccountAddresses(strAccount);\n+    std::set<CTxDestination> refundAddresses = wallet->GetAccountAddresses(strAccount);\n     if (!refundAddresses.empty()) {\n         CScript s = GetScriptForDestination(*refundAddresses.begin());\n         payments::Output* refund_to = payment.add_refund_to();"
      },
      {
        "sha": "af78a51d0fc3f58e6397ab3a11e971dd6e16d93c",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d6b11e793a2d1a106238a2838f5df1d3124217b/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d6b11e793a2d1a106238a2838f5df1d3124217b/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=6d6b11e793a2d1a106238a2838f5df1d3124217b",
        "patch": "@@ -21,8 +21,6 @@\n #include <stdint.h>\n #include <string>\n \n-using namespace std;\n-\n QString TransactionDesc::FormatTxStatus(const CWalletTx& wtx)\n {\n     AssertLockHeld(cs_main);\n@@ -243,14 +241,14 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n     strHTML += \"<b>\" + tr(\"Transaction ID\") + \":</b> \" + TransactionRecord::formatSubTxId(wtx.GetHash(), rec->idx) + \"<br>\";\n \n     // Message from normal bitcoin:URI (bitcoin:123...?message=example)\n-    Q_FOREACH (const PAIRTYPE(string, string)& r, wtx.vOrderForm)\n+    Q_FOREACH (const PAIRTYPE(std::string, std::string)& r, wtx.vOrderForm)\n         if (r.first == \"Message\")\n             strHTML += \"<br><b>\" + tr(\"Message\") + \":</b><br>\" + GUIUtil::HtmlEscape(r.second, true) + \"<br>\";\n \n     //\n     // PaymentRequest info:\n     //\n-    Q_FOREACH (const PAIRTYPE(string, string)& r, wtx.vOrderForm)\n+    Q_FOREACH (const PAIRTYPE(std::string, std::string)& r, wtx.vOrderForm)\n     {\n         if (r.first == \"PaymentRequest\")\n         {"
      },
      {
        "sha": "168a0255ffd39abbc5d6ec95236ec8a55621bcf0",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d6b11e793a2d1a106238a2838f5df1d3124217b/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d6b11e793a2d1a106238a2838f5df1d3124217b/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=6d6b11e793a2d1a106238a2838f5df1d3124217b",
        "patch": "@@ -25,8 +25,6 @@\n #include <QSet>\n #include <QTimer>\n \n-using namespace std;\n-\n WalletModel::WalletModel(CWallet *wallet, OptionsModel *optionsModel, QObject *parent) :\n     QObject(parent), wallet(wallet), optionsModel(optionsModel), addressTableModel(0),\n     transactionTableModel(0),"
      }
    ]
  },
  {
    "sha": "1327897aee67e9caf733eb1161d8b5828d3f6f6f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMzI3ODk3YWVlNjdlOWNhZjczM2ViMTE2MWQ4YjU4MjhkM2Y2ZjZm",
    "commit": {
      "author": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2015-07-08T19:40:14Z"
      },
      "committer": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2015-07-20T17:32:38Z"
      },
      "message": "Reformat help text of estimatefee and estimatepriority to match other help texts.",
      "tree": {
        "sha": "9b28c8fe4631e41b5948732740eb145564a407cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9b28c8fe4631e41b5948732740eb145564a407cd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1327897aee67e9caf733eb1161d8b5828d3f6f6f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1327897aee67e9caf733eb1161d8b5828d3f6f6f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1327897aee67e9caf733eb1161d8b5828d3f6f6f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1327897aee67e9caf733eb1161d8b5828d3f6f6f/comments",
    "author": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "11576a57d2ee37aa421e0fce69e70751b5af9a61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11576a57d2ee37aa421e0fce69e70751b5af9a61",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/11576a57d2ee37aa421e0fce69e70751b5af9a61"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 10,
      "deletions": 12
    },
    "files": [
      {
        "sha": "703b0ee6537b0135c27cf249e0a7191fa82f0e9e",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 12,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1327897aee67e9caf733eb1161d8b5828d3f6f6f/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1327897aee67e9caf733eb1161d8b5828d3f6f6f/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=1327897aee67e9caf733eb1161d8b5828d3f6f6f",
        "patch": "@@ -666,16 +666,15 @@ UniValue estimatefee(const UniValue& params, bool fHelp)\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n             \"estimatefee nblocks\\n\"\n-            \"\\nEstimates the approximate fee per kilobyte\\n\"\n-            \"needed for a transaction to begin confirmation\\n\"\n-            \"within nblocks blocks.\\n\"\n+            \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n+            \"confirmation within nblocks blocks.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. nblocks     (numeric)\\n\"\n             \"\\nResult:\\n\"\n-            \"n :    (numeric) estimated fee-per-kilobyte\\n\"\n+            \"n              (numeric) estimated fee-per-kilobyte\\n\"\n             \"\\n\"\n-            \"-1.0 is returned if not enough transactions and\\n\"\n-            \"blocks have been observed to make an estimate.\\n\"\n+            \"A negative value is returned if not enough transactions and blocks\\n\"\n+            \"have been observed to make an estimate.\\n\"\n             \"\\nExample:\\n\"\n             + HelpExampleCli(\"estimatefee\", \"6\")\n             );\n@@ -698,16 +697,15 @@ UniValue estimatepriority(const UniValue& params, bool fHelp)\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n             \"estimatepriority nblocks\\n\"\n-            \"\\nEstimates the approximate priority\\n\"\n-            \"a zero-fee transaction needs to begin confirmation\\n\"\n-            \"within nblocks blocks.\\n\"\n+            \"\\nEstimates the approximate priority a zero-fee transaction needs to begin\\n\"\n+            \"confirmation within nblocks blocks.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. nblocks     (numeric)\\n\"\n             \"\\nResult:\\n\"\n-            \"n :    (numeric) estimated priority\\n\"\n+            \"n              (numeric) estimated priority\\n\"\n             \"\\n\"\n-            \"-1.0 is returned if not enough transactions and\\n\"\n-            \"blocks have been observed to make an estimate.\\n\"\n+            \"A negative value is returned if not enough transactions and blocks\\n\"\n+            \"have been observed to make an estimate.\\n\"\n             \"\\nExample:\\n\"\n             + HelpExampleCli(\"estimatepriority\", \"6\")\n             );"
      }
    ]
  },
  {
    "sha": "cfc3dd34284357262bcc7eef2714a210891276c0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZmMzZGQzNDI4NDM1NzI2MmJjYzdlZWYyNzE0YTIxMDg5MTI3NmMw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-06-10T07:03:08Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-07-20T23:01:37Z"
      },
      "message": "Also remove pay-2-pubkey from watch when adding a priv key",
      "tree": {
        "sha": "5f1ccca3a6dc5a01e1a25d161903586d8b5112ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5f1ccca3a6dc5a01e1a25d161903586d8b5112ea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cfc3dd34284357262bcc7eef2714a210891276c0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfc3dd34284357262bcc7eef2714a210891276c0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cfc3dd34284357262bcc7eef2714a210891276c0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfc3dd34284357262bcc7eef2714a210891276c0/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6d6b11e793a2d1a106238a2838f5df1d3124217b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d6b11e793a2d1a106238a2838f5df1d3124217b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6d6b11e793a2d1a106238a2838f5df1d3124217b"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1d5aac7b3484f625ca166adfa0cc7ceb2b23169d",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfc3dd34284357262bcc7eef2714a210891276c0/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfc3dd34284357262bcc7eef2714a210891276c0/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=cfc3dd34284357262bcc7eef2714a210891276c0",
        "patch": "@@ -286,6 +286,11 @@ CScript GetScriptForDestination(const CTxDestination& dest)\n     return script;\n }\n \n+CScript GetScriptForRawPubKey(const CPubKey& pubKey)\n+{\n+    return CScript() << std::vector<unsigned char>(pubKey.begin(), pubKey.end()) << OP_CHECKSIG;\n+}\n+\n CScript GetScriptForMultisig(int nRequired, const std::vector<CPubKey>& keys)\n {\n     CScript script;"
      },
      {
        "sha": "9e17dac700b10a9f1b4a5b75b2e750c68ad4cbbb",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfc3dd34284357262bcc7eef2714a210891276c0/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfc3dd34284357262bcc7eef2714a210891276c0/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=cfc3dd34284357262bcc7eef2714a210891276c0",
        "patch": "@@ -73,6 +73,7 @@ bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)\n bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<CTxDestination>& addressRet, int& nRequiredRet);\n \n CScript GetScriptForDestination(const CTxDestination& dest);\n+CScript GetScriptForRawPubKey(const CPubKey& pubkey);\n CScript GetScriptForMultisig(int nRequired, const std::vector<CPubKey>& keys);\n \n #endif // BITCOIN_SCRIPT_STANDARD_H"
      },
      {
        "sha": "c118008633c366039c2b16f2ef086ee7e158d905",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfc3dd34284357262bcc7eef2714a210891276c0/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfc3dd34284357262bcc7eef2714a210891276c0/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=cfc3dd34284357262bcc7eef2714a210891276c0",
        "patch": "@@ -106,6 +106,9 @@ bool CWallet::AddKeyPubKey(const CKey& secret, const CPubKey &pubkey)\n     // check if we need to remove from watch-only\n     CScript script;\n     script = GetScriptForDestination(pubkey.GetID());\n+    if (HaveWatchOnly(script))\n+        RemoveWatchOnly(script);\n+    script = GetScriptForRawPubKey(pubkey);\n     if (HaveWatchOnly(script))\n         RemoveWatchOnly(script);\n "
      }
    ]
  },
  {
    "sha": "983d2d90af1b517bee51170d2ea059e68d09be35",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ODNkMmQ5MGFmMWI1MTdiZWU1MTE3MGQyZWEwNTllNjhkMDliZTM1",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-06-11T07:57:26Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-07-20T23:01:37Z"
      },
      "message": "Split up importaddress into helper functions",
      "tree": {
        "sha": "b841edc61897ad53d9cd5b83cc6e2ed08fddf100",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b841edc61897ad53d9cd5b83cc6e2ed08fddf100"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/983d2d90af1b517bee51170d2ea059e68d09be35",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/983d2d90af1b517bee51170d2ea059e68d09be35",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/983d2d90af1b517bee51170d2ea059e68d09be35",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/983d2d90af1b517bee51170d2ea059e68d09be35/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cfc3dd34284357262bcc7eef2714a210891276c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfc3dd34284357262bcc7eef2714a210891276c0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cfc3dd34284357262bcc7eef2714a210891276c0"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 34,
      "deletions": 33
    },
    "files": [
      {
        "sha": "f56ff65f83c138b58fae1046748c7e7e897d6005",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 33,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/983d2d90af1b517bee51170d2ea059e68d09be35/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/983d2d90af1b517bee51170d2ea059e68d09be35/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=983d2d90af1b517bee51170d2ea059e68d09be35",
        "patch": "@@ -146,6 +146,26 @@ UniValue importprivkey(const UniValue& params, bool fHelp)\n     return NullUniValue;\n }\n \n+void ImportScript(const CScript& script)\n+{\n+    if (::IsMine(*pwalletMain, script) == ISMINE_SPENDABLE)\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n+\n+    pwalletMain->MarkDirty();\n+\n+    if (!pwalletMain->HaveWatchOnly(script) && !pwalletMain->AddWatchOnly(script))\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+}\n+\n+void ImportAddress(const CBitcoinAddress& address, const string& strLabel)\n+{\n+    CScript script = GetScriptForDestination(address.Get());\n+    ImportScript(script, false);\n+    // add to address book or update label\n+    if (address.IsValid())\n+        pwalletMain->SetAddressBook(address.Get(), strLabel, \"receive\");\n+}\n+\n UniValue importaddress(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n@@ -172,20 +192,6 @@ UniValue importaddress(const UniValue& params, bool fHelp)\n     if (fPruneMode)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Importing addresses is disabled in pruned mode\");\n \n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n-\n-    CScript script;\n-\n-    CBitcoinAddress address(params[0].get_str());\n-    if (address.IsValid()) {\n-        script = GetScriptForDestination(address.Get());\n-    } else if (IsHex(params[0].get_str())) {\n-        std::vector<unsigned char> data(ParseHex(params[0].get_str()));\n-        script = CScript(data.begin(), data.end());\n-    } else {\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address or script\");\n-    }\n-\n     string strLabel = \"\";\n     if (params.size() > 1)\n         strLabel = params[1].get_str();\n@@ -195,28 +201,23 @@ UniValue importaddress(const UniValue& params, bool fHelp)\n     if (params.size() > 2)\n         fRescan = params[2].get_bool();\n \n-    {\n-        if (::IsMine(*pwalletMain, script) == ISMINE_SPENDABLE)\n-            throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n \n-        // add to address book or update label\n-        if (address.IsValid())\n-            pwalletMain->SetAddressBook(address.Get(), strLabel, \"receive\");\n-\n-        // Don't throw error in case an address is already there\n-        if (pwalletMain->HaveWatchOnly(script))\n-            return NullUniValue;\n-\n-        pwalletMain->MarkDirty();\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-        if (!pwalletMain->AddWatchOnly(script))\n-            throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+    CBitcoinAddress address(params[0].get_str());\n+    if (address.IsValid()) {\n+        ImportAddress(address, strLabel);\n+    } else if (IsHex(params[0].get_str())) {\n+        std::vector<unsigned char> data(ParseHex(params[0].get_str()));\n+        ImportScript(CScript(data.begin(), data.end()));\n+    } else {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address or script\");\n+    }\n \n-        if (fRescan)\n-        {\n-            pwalletMain->ScanForWalletTransactions(chainActive.Genesis(), true);\n-            pwalletMain->ReacceptWalletTransactions();\n-        }\n+    if (fRescan)\n+    {\n+        pwalletMain->ScanForWalletTransactions(chainActive.Genesis(), true);\n+        pwalletMain->ReacceptWalletTransactions();\n     }\n \n     return NullUniValue;"
      }
    ]
  },
  {
    "sha": "907a425aa5b8fd90cf1d28215712a309e934b364",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MDdhNDI1YWE1YjhmZDkwY2YxZDI4MjE1NzEyYTMwOWU5MzRiMzY0",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-06-11T07:57:50Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-07-20T23:01:37Z"
      },
      "message": "Add p2sh option to importaddress to import redeemScripts",
      "tree": {
        "sha": "f58579e333f979eaf3e44f710228260fde9f8439",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f58579e333f979eaf3e44f710228260fde9f8439"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/907a425aa5b8fd90cf1d28215712a309e934b364",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/907a425aa5b8fd90cf1d28215712a309e934b364",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/907a425aa5b8fd90cf1d28215712a309e934b364",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/907a425aa5b8fd90cf1d28215712a309e934b364/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "983d2d90af1b517bee51170d2ea059e68d09be35",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/983d2d90af1b517bee51170d2ea059e68d09be35",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/983d2d90af1b517bee51170d2ea059e68d09be35"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 31,
      "deletions": 6
    },
    "files": [
      {
        "sha": "b30a6bc9d1c6debfb92c8bf8ed65b76a05538ecc",
        "filename": "qa/rpc-tests/listtransactions.py",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/907a425aa5b8fd90cf1d28215712a309e934b364/qa/rpc-tests/listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/907a425aa5b8fd90cf1d28215712a309e934b364/qa/rpc-tests/listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/listtransactions.py?ref=907a425aa5b8fd90cf1d28215712a309e934b364",
        "patch": "@@ -93,6 +93,16 @@ def run_test(self):\n                            {\"category\":\"receive\",\"amount\":Decimal(\"0.44\")},\n                            {\"txid\":txid, \"account\" : \"toself\"} )\n \n+        multisig = self.nodes[1].createmultisig(1, [self.nodes[1].getnewaddress()])\n+        self.nodes[0].importaddress(multisig[\"redeemScript\"], \"watchonly\", False, True)\n+        txid = self.nodes[1].sendtoaddress(multisig[\"address\"], 0.1)\n+        self.nodes[1].generate(1)\n+        self.sync_all()\n+        assert(len(self.nodes[0].listtransactions(\"watchonly\", 100, 0, False)) == 0)\n+        check_array_result(self.nodes[0].listtransactions(\"watchonly\", 100, 0, True),\n+                           {\"category\":\"receive\",\"amount\":Decimal(\"0.1\")},\n+                           {\"txid\":txid, \"account\" : \"watchonly\"} )\n+\n if __name__ == '__main__':\n     ListTransactionsTest().main()\n "
      },
      {
        "sha": "450f33b3eecd4e5c3a1324b9a92e675a49c7049c",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/907a425aa5b8fd90cf1d28215712a309e934b364/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/907a425aa5b8fd90cf1d28215712a309e934b364/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=907a425aa5b8fd90cf1d28215712a309e934b364",
        "patch": "@@ -87,6 +87,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"lockunspent\", 1 },\n     { \"importprivkey\", 2 },\n     { \"importaddress\", 2 },\n+    { \"importaddress\", 3 },\n     { \"verifychain\", 0 },\n     { \"verifychain\", 1 },\n     { \"keypoolrefill\", 0 },"
      },
      {
        "sha": "3493efc8fec941d73f2450e3b31971abf0f1581a",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 6,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/907a425aa5b8fd90cf1d28215712a309e934b364/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/907a425aa5b8fd90cf1d28215712a309e934b364/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=907a425aa5b8fd90cf1d28215712a309e934b364",
        "patch": "@@ -146,21 +146,28 @@ UniValue importprivkey(const UniValue& params, bool fHelp)\n     return NullUniValue;\n }\n \n-void ImportScript(const CScript& script)\n+void ImportAddress(const CBitcoinAddress& address, const string& strLabel);\n+void ImportScript(const CScript& script, const string& strLabel, bool isRedeemScript)\n {\n-    if (::IsMine(*pwalletMain, script) == ISMINE_SPENDABLE)\n+    if (!isRedeemScript && ::IsMine(*pwalletMain, script) == ISMINE_SPENDABLE)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n \n     pwalletMain->MarkDirty();\n \n     if (!pwalletMain->HaveWatchOnly(script) && !pwalletMain->AddWatchOnly(script))\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+\n+    if (isRedeemScript) {\n+        if (!pwalletMain->HaveCScript(script) && !pwalletMain->AddCScript(script))\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh redeemScript to wallet\");\n+        ImportAddress(CBitcoinAddress(CScriptID(script)), strLabel);\n+    }\n }\n \n void ImportAddress(const CBitcoinAddress& address, const string& strLabel)\n {\n     CScript script = GetScriptForDestination(address.Get());\n-    ImportScript(script, false);\n+    ImportScript(script, strLabel, false);\n     // add to address book or update label\n     if (address.IsValid())\n         pwalletMain->SetAddressBook(address.Get(), strLabel, \"receive\");\n@@ -171,14 +178,15 @@ UniValue importaddress(const UniValue& params, bool fHelp)\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n     \n-    if (fHelp || params.size() < 1 || params.size() > 3)\n+    if (fHelp || params.size() < 1 || params.size() > 4)\n         throw runtime_error(\n-            \"importaddress \\\"address\\\" ( \\\"label\\\" rescan )\\n\"\n+            \"importaddress \\\"address\\\" ( \\\"label\\\" rescan p2sh )\\n\"\n             \"\\nAdds an address or script (in hex) that can be watched as if it were in your wallet but cannot be used to spend.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"address\\\"          (string, required) The address\\n\"\n             \"2. \\\"label\\\"            (string, optional, default=\\\"\\\") An optional label\\n\"\n             \"3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions\\n\"\n+            \"4. p2sh                 (boolean, optional, default=false) Add the P2SH version of the script as well\\n\"\n             \"\\nNote: This call can take minutes to complete if rescan is true.\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nImport an address with rescan\\n\"\n@@ -201,15 +209,21 @@ UniValue importaddress(const UniValue& params, bool fHelp)\n     if (params.size() > 2)\n         fRescan = params[2].get_bool();\n \n+    // Whether to import a p2sh version, too\n+    bool fP2SH = false;\n+    if (params.size() > 3)\n+        fP2SH = params[3].get_bool();\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     CBitcoinAddress address(params[0].get_str());\n     if (address.IsValid()) {\n+        if (fP2SH)\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Cannot use the p2sh flag with an address - use a script instead\");\n         ImportAddress(address, strLabel);\n     } else if (IsHex(params[0].get_str())) {\n         std::vector<unsigned char> data(ParseHex(params[0].get_str()));\n-        ImportScript(CScript(data.begin(), data.end()));\n+        ImportScript(CScript(data.begin(), data.end()), strLabel, fP2SH);\n     } else {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address or script\");\n     }"
      }
    ]
  },
  {
    "sha": "a1d7df32360605724d8f0ea4b7aebfa7aea24c97",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMWQ3ZGYzMjM2MDYwNTcyNGQ4ZjBlYTRiN2FlYmZhN2FlYTI0Yzk3",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-07-10T05:47:36Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-07-20T23:01:37Z"
      },
      "message": "Add importpubkey method to import a watch-only pubkey",
      "tree": {
        "sha": "e14b0b053ea51dc07324671cc5c1d20b5abb9866",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e14b0b053ea51dc07324671cc5c1d20b5abb9866"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a1d7df32360605724d8f0ea4b7aebfa7aea24c97",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1d7df32360605724d8f0ea4b7aebfa7aea24c97",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a1d7df32360605724d8f0ea4b7aebfa7aea24c97",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1d7df32360605724d8f0ea4b7aebfa7aea24c97/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "907a425aa5b8fd90cf1d28215712a309e934b364",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/907a425aa5b8fd90cf1d28215712a309e934b364",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/907a425aa5b8fd90cf1d28215712a309e934b364"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 60,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0c8e6d6d669a4993b73355ee0cfda27694275ae0",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1d7df32360605724d8f0ea4b7aebfa7aea24c97/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1d7df32360605724d8f0ea4b7aebfa7aea24c97/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=a1d7df32360605724d8f0ea4b7aebfa7aea24c97",
        "patch": "@@ -88,6 +88,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"importprivkey\", 2 },\n     { \"importaddress\", 2 },\n     { \"importaddress\", 3 },\n+    { \"importpubkey\", 2 },\n     { \"verifychain\", 0 },\n     { \"verifychain\", 1 },\n     { \"keypoolrefill\", 0 },"
      },
      {
        "sha": "158603b14056795ba8f8e985bbbb57f486fb1db8",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1d7df32360605724d8f0ea4b7aebfa7aea24c97/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1d7df32360605724d8f0ea4b7aebfa7aea24c97/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=a1d7df32360605724d8f0ea4b7aebfa7aea24c97",
        "patch": "@@ -359,6 +359,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"wallet\",             \"importprivkey\",          &importprivkey,          true  },\n     { \"wallet\",             \"importwallet\",           &importwallet,           true  },\n     { \"wallet\",             \"importaddress\",          &importaddress,          true  },\n+    { \"wallet\",             \"importpubkey\",           &importpubkey,           true  },\n     { \"wallet\",             \"keypoolrefill\",          &keypoolrefill,          true  },\n     { \"wallet\",             \"listaccounts\",           &listaccounts,           false },\n     { \"wallet\",             \"listaddressgroupings\",   &listaddressgroupings,   false },"
      },
      {
        "sha": "3a71fd510f0690aac97d3dabefe9da3393e439c5",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1d7df32360605724d8f0ea4b7aebfa7aea24c97/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1d7df32360605724d8f0ea4b7aebfa7aea24c97/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=a1d7df32360605724d8f0ea4b7aebfa7aea24c97",
        "patch": "@@ -161,6 +161,7 @@ extern UniValue clearbanned(const UniValue& params, bool fHelp);\n extern UniValue dumpprivkey(const UniValue& params, bool fHelp); // in rpcdump.cpp\n extern UniValue importprivkey(const UniValue& params, bool fHelp);\n extern UniValue importaddress(const UniValue& params, bool fHelp);\n+extern UniValue importpubkey(const UniValue& params, bool fHelp);\n extern UniValue dumpwallet(const UniValue& params, bool fHelp);\n extern UniValue importwallet(const UniValue& params, bool fHelp);\n "
      },
      {
        "sha": "7efabbfeb6b5f2bb29c3c8be5ec31aa5e788529f",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 57,
        "deletions": 0,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1d7df32360605724d8f0ea4b7aebfa7aea24c97/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1d7df32360605724d8f0ea4b7aebfa7aea24c97/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=a1d7df32360605724d8f0ea4b7aebfa7aea24c97",
        "patch": "@@ -237,6 +237,63 @@ UniValue importaddress(const UniValue& params, bool fHelp)\n     return NullUniValue;\n }\n \n+UniValue importpubkey(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() < 1 || params.size() > 4)\n+        throw runtime_error(\n+            \"importpubkey \\\"pubkey\\\" ( \\\"label\\\" rescan )\\n\"\n+            \"\\nAdds a public key (in hex) that can be watched as if it were in your wallet but cannot be used to spend.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"pubkey\\\"           (string, required) The hex-encoded public key\\n\"\n+            \"2. \\\"label\\\"            (string, optional, default=\\\"\\\") An optional label\\n\"\n+            \"3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions\\n\"\n+            \"\\nNote: This call can take minutes to complete if rescan is true.\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nImport a public key with rescan\\n\"\n+            + HelpExampleCli(\"importpubkey\", \"\\\"mypubkey\\\"\") +\n+            \"\\nImport using a label without rescan\\n\"\n+            + HelpExampleCli(\"importpubkey\", \"\\\"mypubkey\\\" \\\"testing\\\" false\") +\n+            \"\\nAs a JSON-RPC call\\n\"\n+            + HelpExampleRpc(\"importpubkey\", \"\\\"mypubkey\\\", \\\"testing\\\", false\")\n+        );\n+\n+    if (fPruneMode)\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Importing public keys is disabled in pruned mode\");\n+\n+    string strLabel = \"\";\n+    if (params.size() > 1)\n+        strLabel = params[1].get_str();\n+\n+    // Whether to perform rescan after import\n+    bool fRescan = true;\n+    if (params.size() > 2)\n+        fRescan = params[2].get_bool();\n+\n+    if (!IsHex(params[0].get_str()))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey must be a hex string\");\n+    std::vector<unsigned char> data(ParseHex(params[0].get_str()));\n+    CPubKey pubKey(data.begin(), data.end());\n+    if (!pubKey.IsFullyValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey is not a valid public key\");\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    ImportAddress(CBitcoinAddress(pubKey.GetID()), strLabel);\n+    ImportScript(GetScriptForRawPubKey(pubKey), strLabel, false);\n+\n+    if (fRescan)\n+    {\n+        pwalletMain->ScanForWalletTransactions(chainActive.Genesis(), true);\n+        pwalletMain->ReacceptWalletTransactions();\n+    }\n+\n+    return NullUniValue;\n+}\n+\n+\n UniValue importwallet(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))"
      }
    ]
  },
  {
    "sha": "5c17059872c9b63a1e05c7aa8aea32a03c3ec73a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YzE3MDU5ODcyYzliNjNhMWUwNWM3YWE4YWVhMzJhMDNjM2VjNzNh",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-07-10T05:47:47Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-07-20T23:01:37Z"
      },
      "message": "Update importaddress help to push its use to script-only",
      "tree": {
        "sha": "e6556648ade1bc087e6639d83590b9bf6ec5da00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e6556648ade1bc087e6639d83590b9bf6ec5da00"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5c17059872c9b63a1e05c7aa8aea32a03c3ec73a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c17059872c9b63a1e05c7aa8aea32a03c3ec73a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5c17059872c9b63a1e05c7aa8aea32a03c3ec73a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c17059872c9b63a1e05c7aa8aea32a03c3ec73a/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a1d7df32360605724d8f0ea4b7aebfa7aea24c97",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1d7df32360605724d8f0ea4b7aebfa7aea24c97",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a1d7df32360605724d8f0ea4b7aebfa7aea24c97"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 7,
      "deletions": 6
    },
    "files": [
      {
        "sha": "2c4f1f24350253ed0c495382409154a9d813954b",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c17059872c9b63a1e05c7aa8aea32a03c3ec73a/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c17059872c9b63a1e05c7aa8aea32a03c3ec73a/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=5c17059872c9b63a1e05c7aa8aea32a03c3ec73a",
        "patch": "@@ -181,20 +181,21 @@ UniValue importaddress(const UniValue& params, bool fHelp)\n     if (fHelp || params.size() < 1 || params.size() > 4)\n         throw runtime_error(\n             \"importaddress \\\"address\\\" ( \\\"label\\\" rescan p2sh )\\n\"\n-            \"\\nAdds an address or script (in hex) that can be watched as if it were in your wallet but cannot be used to spend.\\n\"\n+            \"\\nAdds a script (in hex) or address that can be watched as if it were in your wallet but cannot be used to spend.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"address\\\"          (string, required) The address\\n\"\n+            \"1. \\\"script\\\"           (string, required) The hex-encoded script (or address)\\n\"\n             \"2. \\\"label\\\"            (string, optional, default=\\\"\\\") An optional label\\n\"\n             \"3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions\\n\"\n             \"4. p2sh                 (boolean, optional, default=false) Add the P2SH version of the script as well\\n\"\n             \"\\nNote: This call can take minutes to complete if rescan is true.\\n\"\n+            \"If you have the full public key, you should call importpublickey instead of this.\\n\"\n             \"\\nExamples:\\n\"\n-            \"\\nImport an address with rescan\\n\"\n-            + HelpExampleCli(\"importaddress\", \"\\\"myaddress\\\"\") +\n+            \"\\nImport a script with rescan\\n\"\n+            + HelpExampleCli(\"importaddress\", \"\\\"myscript\\\"\") +\n             \"\\nImport using a label without rescan\\n\"\n-            + HelpExampleCli(\"importaddress\", \"\\\"myaddress\\\" \\\"testing\\\" false\") +\n+            + HelpExampleCli(\"importaddress\", \"\\\"myscript\\\" \\\"testing\\\" false\") +\n             \"\\nAs a JSON-RPC call\\n\"\n-            + HelpExampleRpc(\"importaddress\", \"\\\"myaddress\\\", \\\"testing\\\", false\")\n+            + HelpExampleRpc(\"importaddress\", \"\\\"myscript\\\", \\\"testing\\\", false\")\n         );\n \n     if (fPruneMode)"
      }
    ]
  },
  {
    "sha": "d3354c52d7c0c6446cad4074c1d0e04bb1b3d84e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMzM1NGM1MmQ3YzBjNjQ0NmNhZDQwNzRjMWQwZTA0YmIxYjNkODRl",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-06-10T06:36:36Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-07-20T23:01:37Z"
      },
      "message": "Add have-pubkey distinction to ISMINE flags\n\nThis indicates that, eg, we have a public key for a key which may\nbe used as a pay-to-pubkey-hash. It generally means that we can\ncreate a valid scriptSig except for missing private key(s) with\nwhich to create signatures.",
      "tree": {
        "sha": "610f23431c46b756b040b40feb40bb68385115a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/610f23431c46b756b040b40feb40bb68385115a4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d3354c52d7c0c6446cad4074c1d0e04bb1b3d84e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3354c52d7c0c6446cad4074c1d0e04bb1b3d84e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d3354c52d7c0c6446cad4074c1d0e04bb1b3d84e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3354c52d7c0c6446cad4074c1d0e04bb1b3d84e/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5c17059872c9b63a1e05c7aa8aea32a03c3ec73a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c17059872c9b63a1e05c7aa8aea32a03c3ec73a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5c17059872c9b63a1e05c7aa8aea32a03c3ec73a"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 18,
      "deletions": 10
    },
    "files": [
      {
        "sha": "801c6c62d2b609e2be86fb28f85ae271685893a4",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3354c52d7c0c6446cad4074c1d0e04bb1b3d84e/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3354c52d7c0c6446cad4074c1d0e04bb1b3d84e/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=d3354c52d7c0c6446cad4074c1d0e04bb1b3d84e",
        "patch": "@@ -165,7 +165,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n \n         if (fAllFromMe)\n         {\n-            if(fAllFromMe == ISMINE_WATCH_ONLY)\n+            if(fAllFromMe & ISMINE_WATCH_ONLY)\n                 strHTML += \"<b>\" + tr(\"From\") + \":</b> \" + tr(\"watch-only\") + \"<br>\";\n \n             //\n@@ -190,7 +190,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n                         strHTML += GUIUtil::HtmlEscape(CBitcoinAddress(address).ToString());\n                         if(toSelf == ISMINE_SPENDABLE)\n                             strHTML += \" (own address)\";\n-                        else if(toSelf == ISMINE_WATCH_ONLY)\n+                        else if(toSelf & ISMINE_WATCH_ONLY)\n                             strHTML += \" (watch-only)\";\n                         strHTML += \"<br>\";\n                     }"
      },
      {
        "sha": "d8623daf5dba05171a2ec5f32f3aba705d4847ec",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3354c52d7c0c6446cad4074c1d0e04bb1b3d84e/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3354c52d7c0c6446cad4074c1d0e04bb1b3d84e/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=d3354c52d7c0c6446cad4074c1d0e04bb1b3d84e",
        "patch": "@@ -56,7 +56,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n                 CTxDestination address;\n                 sub.idx = parts.size(); // sequence number\n                 sub.credit = txout.nValue;\n-                sub.involvesWatchAddress = mine == ISMINE_WATCH_ONLY;\n+                sub.involvesWatchAddress = mine & ISMINE_WATCH_ONLY;\n                 if (ExtractDestination(txout.scriptPubKey, address) && IsMine(*wallet, address))\n                 {\n                     // Received by Bitcoin Address\n@@ -86,15 +86,15 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n         BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n         {\n             isminetype mine = wallet->IsMine(txin);\n-            if(mine == ISMINE_WATCH_ONLY) involvesWatchAddress = true;\n+            if(mine & ISMINE_WATCH_ONLY) involvesWatchAddress = true;\n             if(fAllFromMe > mine) fAllFromMe = mine;\n         }\n \n         isminetype fAllToMe = ISMINE_SPENDABLE;\n         BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n         {\n             isminetype mine = wallet->IsMine(txout);\n-            if(mine == ISMINE_WATCH_ONLY) involvesWatchAddress = true;\n+            if(mine & ISMINE_WATCH_ONLY) involvesWatchAddress = true;\n             if(fAllToMe > mine) fAllToMe = mine;\n         }\n "
      },
      {
        "sha": "0303cbb2fb5d86ecd27065e15ed03871370f8591",
        "filename": "src/wallet/wallet_ismine.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3354c52d7c0c6446cad4074c1d0e04bb1b3d84e/src/wallet/wallet_ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3354c52d7c0c6446cad4074c1d0e04bb1b3d84e/src/wallet/wallet_ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet_ismine.cpp?ref=d3354c52d7c0c6446cad4074c1d0e04bb1b3d84e",
        "patch": "@@ -9,6 +9,7 @@\n #include \"keystore.h\"\n #include \"script/script.h\"\n #include \"script/standard.h\"\n+#include \"script/sign.h\"\n \n #include <boost/foreach.hpp>\n \n@@ -40,7 +41,7 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n     txnouttype whichType;\n     if (!Solver(scriptPubKey, whichType, vSolutions)) {\n         if (keystore.HaveWatchOnly(scriptPubKey))\n-            return ISMINE_WATCH_ONLY;\n+            return ISMINE_WATCH_NOPUBKEY;\n         return ISMINE_NO;\n     }\n \n@@ -85,7 +86,10 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n     }\n     }\n \n-    if (keystore.HaveWatchOnly(scriptPubKey))\n-        return ISMINE_WATCH_ONLY;\n+    if (keystore.HaveWatchOnly(scriptPubKey)) {\n+        // TODO: This could be optimized some by doing some work after the above solver\n+        CScript scriptSig;\n+        return ProduceSignature(DummySignatureCreator(&keystore), scriptPubKey, scriptSig) ? ISMINE_WATCH_PUBKEY : ISMINE_WATCH_NOPUBKEY;\n+    }\n     return ISMINE_NO;\n }"
      },
      {
        "sha": "12afad1751b1b8866bdecdd8e48775b04e31c18b",
        "filename": "src/wallet/wallet_ismine.h",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3354c52d7c0c6446cad4074c1d0e04bb1b3d84e/src/wallet/wallet_ismine.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3354c52d7c0c6446cad4074c1d0e04bb1b3d84e/src/wallet/wallet_ismine.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet_ismine.h?ref=d3354c52d7c0c6446cad4074c1d0e04bb1b3d84e",
        "patch": "@@ -16,8 +16,12 @@ class CScript;\n enum isminetype\n {\n     ISMINE_NO = 0,\n-    ISMINE_WATCH_ONLY = 1,\n-    ISMINE_SPENDABLE = 2,\n+    //! Indicates that we dont know how to create a scriptSig that would solve this if we were given the appropriate private keys\n+    ISMINE_WATCH_NOPUBKEY = 1,\n+    //! Indicates that we know how to create a scriptSig that would solve this if we were given the appropriate private keys\n+    ISMINE_WATCH_PUBKEY = 2,\n+    ISMINE_WATCH_ONLY = ISMINE_WATCH_NOPUBKEY | ISMINE_WATCH_PUBKEY,\n+    ISMINE_SPENDABLE = 4,\n     ISMINE_ALL = ISMINE_WATCH_ONLY | ISMINE_SPENDABLE\n };\n /** used for bitflags of isminetype */"
      }
    ]
  },
  {
    "sha": "f5813bdd3eb93a2a8d7ba01989eef5b299fcbca4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNTgxM2JkZDNlYjkzYTJhOGQ3YmEwMTk4OWVlZjViMjk5ZmNiY2E0",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-06-10T08:04:08Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-07-20T23:01:37Z"
      },
      "message": "Add logic to track pubkeys as watch-only, not just scripts",
      "tree": {
        "sha": "7830024c8e7ab4a638ee534b5bab1b190010c2ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7830024c8e7ab4a638ee534b5bab1b190010c2ee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f5813bdd3eb93a2a8d7ba01989eef5b299fcbca4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5813bdd3eb93a2a8d7ba01989eef5b299fcbca4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f5813bdd3eb93a2a8d7ba01989eef5b299fcbca4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5813bdd3eb93a2a8d7ba01989eef5b299fcbca4/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d3354c52d7c0c6446cad4074c1d0e04bb1b3d84e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3354c52d7c0c6446cad4074c1d0e04bb1b3d84e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d3354c52d7c0c6446cad4074c1d0e04bb1b3d84e"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 49,
      "deletions": 10
    },
    "files": [
      {
        "sha": "cf49ba83ade40e9c77e454dff13aa2ee39afb167",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 6,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5813bdd3eb93a2a8d7ba01989eef5b299fcbca4/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5813bdd3eb93a2a8d7ba01989eef5b299fcbca4/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=f5813bdd3eb93a2a8d7ba01989eef5b299fcbca4",
        "patch": "@@ -6,23 +6,30 @@\n #include \"keystore.h\"\n \n #include \"key.h\"\n+#include \"pubkey.h\"\n #include \"util.h\"\n \n #include <boost/foreach.hpp>\n \n-bool CKeyStore::GetPubKey(const CKeyID &address, CPubKey &vchPubKeyOut) const\n+bool CKeyStore::AddKey(const CKey &key) {\n+    return AddKeyPubKey(key, key.GetPubKey());\n+}\n+\n+bool CBasicKeyStore::GetPubKey(const CKeyID &address, CPubKey &vchPubKeyOut) const\n {\n     CKey key;\n-    if (!GetKey(address, key))\n+    if (!GetKey(address, key)) {\n+        WatchKeyMap::const_iterator it = mapWatchKeys.find(address);\n+        if (it != mapWatchKeys.end()) {\n+            vchPubKeyOut = it->second;\n+            return true;\n+        }\n         return false;\n+    }\n     vchPubKeyOut = key.GetPubKey();\n     return true;\n }\n \n-bool CKeyStore::AddKey(const CKey &key) {\n-    return AddKeyPubKey(key, key.GetPubKey());\n-}\n-\n bool CBasicKeyStore::AddKeyPubKey(const CKey& key, const CPubKey &pubkey)\n {\n     LOCK(cs_KeyStore);\n@@ -58,17 +65,39 @@ bool CBasicKeyStore::GetCScript(const CScriptID &hash, CScript& redeemScriptOut)\n     return false;\n }\n \n+static bool ExtractPubKey(const CScript &dest, CPubKey& pubKeyOut)\n+{\n+    //TODO: Use Solver to extract this?\n+    CScript::const_iterator pc = dest.begin();\n+    opcodetype opcode;\n+    std::vector<unsigned char> vch;\n+    if (!dest.GetOp(pc, opcode, vch) || vch.size() < 33 || vch.size() > 65)\n+        return false;\n+    pubKeyOut = CPubKey(vch);\n+    if (!pubKeyOut.IsFullyValid())\n+        return false;\n+    if (!dest.GetOp(pc, opcode, vch) || opcode != OP_CHECKSIG || dest.GetOp(pc, opcode, vch))\n+        return false;\n+    return true;\n+}\n+\n bool CBasicKeyStore::AddWatchOnly(const CScript &dest)\n {\n     LOCK(cs_KeyStore);\n     setWatchOnly.insert(dest);\n+    CPubKey pubKey;\n+    if (ExtractPubKey(dest, pubKey))\n+        mapWatchKeys[pubKey.GetID()] = pubKey;\n     return true;\n }\n \n bool CBasicKeyStore::RemoveWatchOnly(const CScript &dest)\n {\n     LOCK(cs_KeyStore);\n     setWatchOnly.erase(dest);\n+    CPubKey pubKey;\n+    if (ExtractPubKey(dest, pubKey))\n+        mapWatchKeys.erase(pubKey.GetID());\n     return true;\n }\n "
      },
      {
        "sha": "b917bf20b4c1d4bce2e8ca9cab2afa729ae4ff2e",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5813bdd3eb93a2a8d7ba01989eef5b299fcbca4/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5813bdd3eb93a2a8d7ba01989eef5b299fcbca4/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=f5813bdd3eb93a2a8d7ba01989eef5b299fcbca4",
        "patch": "@@ -32,7 +32,7 @@ class CKeyStore\n     virtual bool HaveKey(const CKeyID &address) const =0;\n     virtual bool GetKey(const CKeyID &address, CKey& keyOut) const =0;\n     virtual void GetKeys(std::set<CKeyID> &setAddress) const =0;\n-    virtual bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const;\n+    virtual bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const =0;\n \n     //! Support for BIP 0013 : see https://github.com/bitcoin/bips/blob/master/bip-0013.mediawiki\n     virtual bool AddCScript(const CScript& redeemScript) =0;\n@@ -47,6 +47,7 @@ class CKeyStore\n };\n \n typedef std::map<CKeyID, CKey> KeyMap;\n+typedef std::map<CKeyID, CPubKey> WatchKeyMap;\n typedef std::map<CScriptID, CScript > ScriptMap;\n typedef std::set<CScript> WatchOnlySet;\n \n@@ -55,11 +56,13 @@ class CBasicKeyStore : public CKeyStore\n {\n protected:\n     KeyMap mapKeys;\n+    WatchKeyMap mapWatchKeys;\n     ScriptMap mapScripts;\n     WatchOnlySet setWatchOnly;\n \n public:\n     bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey);\n+    bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const;\n     bool HaveKey(const CKeyID &address) const\n     {\n         bool result;"
      },
      {
        "sha": "34da38285f21008975df31fad80414f4cca28332",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5813bdd3eb93a2a8d7ba01989eef5b299fcbca4/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5813bdd3eb93a2a8d7ba01989eef5b299fcbca4/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=f5813bdd3eb93a2a8d7ba01989eef5b299fcbca4",
        "patch": "@@ -752,10 +752,9 @@ void SendCoinsDialog::coinControlChangeEdited(const QString& text)\n         }\n         else // Valid address\n         {\n-            CPubKey pubkey;\n             CKeyID keyid;\n             addr.GetKeyID(keyid);\n-            if (!model->getPubKey(keyid, pubkey)) // Unknown change address\n+            if (!model->havePrivKey(keyid)) // Unknown change address\n             {\n                 ui->labelCoinControlChangeLabel->setText(tr(\"Warning: Unknown change address\"));\n             }"
      },
      {
        "sha": "4e3d97fc426d212efe12d8e6d699e7ff38f38878",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5813bdd3eb93a2a8d7ba01989eef5b299fcbca4/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5813bdd3eb93a2a8d7ba01989eef5b299fcbca4/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=f5813bdd3eb93a2a8d7ba01989eef5b299fcbca4",
        "patch": "@@ -554,6 +554,11 @@ bool WalletModel::getPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const\n     return wallet->GetPubKey(address, vchPubKeyOut);\n }\n \n+bool WalletModel::havePrivKey(const CKeyID &address) const\n+{\n+    return wallet->HaveKey(address);\n+}\n+\n // returns a list of COutputs from COutPoints\n void WalletModel::getOutputs(const std::vector<COutPoint>& vOutpoints, std::vector<COutput>& vOutputs)\n {"
      },
      {
        "sha": "1c1684b278dae5e76117d04593d75209e9bb0004",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5813bdd3eb93a2a8d7ba01989eef5b299fcbca4/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5813bdd3eb93a2a8d7ba01989eef5b299fcbca4/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=f5813bdd3eb93a2a8d7ba01989eef5b299fcbca4",
        "patch": "@@ -186,6 +186,7 @@ class WalletModel : public QObject\n     UnlockContext requestUnlock();\n \n     bool getPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const;\n+    bool havePrivKey(const CKeyID &address) const;\n     void getOutputs(const std::vector<COutPoint>& vOutpoints, std::vector<COutput>& vOutputs);\n     bool isSpent(const COutPoint& outpoint) const;\n     void listCoins(std::map<QString, std::vector<COutput> >& mapCoins) const;"
      },
      {
        "sha": "a3e28f6acf79df6ec78ff521a0abc86f8f64d00b",
        "filename": "src/wallet/crypter.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5813bdd3eb93a2a8d7ba01989eef5b299fcbca4/src/wallet/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5813bdd3eb93a2a8d7ba01989eef5b299fcbca4/src/wallet/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.cpp?ref=f5813bdd3eb93a2a8d7ba01989eef5b299fcbca4",
        "patch": "@@ -255,14 +255,16 @@ bool CCryptoKeyStore::GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) co\n     {\n         LOCK(cs_KeyStore);\n         if (!IsCrypted())\n-            return CKeyStore::GetPubKey(address, vchPubKeyOut);\n+            return CBasicKeyStore::GetPubKey(address, vchPubKeyOut);\n \n         CryptedKeyMap::const_iterator mi = mapCryptedKeys.find(address);\n         if (mi != mapCryptedKeys.end())\n         {\n             vchPubKeyOut = (*mi).second.first;\n             return true;\n         }\n+        // Check for watch-only pubkeys\n+        return CBasicKeyStore::GetPubKey(address, vchPubKeyOut);\n     }\n     return false;\n }"
      }
    ]
  },
  {
    "sha": "6bdb474dc9dd34e1a5b13ce9494a936cba77e027",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YmRiNDc0ZGM5ZGQzNGUxYTViMTNjZTk0OTRhOTM2Y2JhNzdlMDI3",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-04-24T04:42:49Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-07-20T23:01:38Z"
      },
      "message": "Implement watchonly support in fundrawtransaction\n\nSome code and test cases stolen from\nBryan Bishop <bryan@ledgerx.com> (pull #5524).",
      "tree": {
        "sha": "9f48399117d4b22be76ac33b046437da77045615",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9f48399117d4b22be76ac33b046437da77045615"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6bdb474dc9dd34e1a5b13ce9494a936cba77e027",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bdb474dc9dd34e1a5b13ce9494a936cba77e027",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6bdb474dc9dd34e1a5b13ce9494a936cba77e027",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bdb474dc9dd34e1a5b13ce9494a936cba77e027/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f5813bdd3eb93a2a8d7ba01989eef5b299fcbca4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5813bdd3eb93a2a8d7ba01989eef5b299fcbca4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f5813bdd3eb93a2a8d7ba01989eef5b299fcbca4"
      }
    ],
    "stats": {
      "total": 90,
      "additions": 78,
      "deletions": 12
    },
    "files": [
      {
        "sha": "deaf8b68fdbb23d7fcbe352f53e3a3ac17a5d0f0",
        "filename": "qa/rpc-tests/fundrawtransaction.py",
        "status": "modified",
        "additions": 55,
        "deletions": 4,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bdb474dc9dd34e1a5b13ce9494a936cba77e027/qa/rpc-tests/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bdb474dc9dd34e1a5b13ce9494a936cba77e027/qa/rpc-tests/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fundrawtransaction.py?ref=6bdb474dc9dd34e1a5b13ce9494a936cba77e027",
        "patch": "@@ -13,14 +13,15 @@ class RawTransactionsTest(BitcoinTestFramework):\n \n     def setup_chain(self):\n         print(\"Initializing test directory \"+self.options.tmpdir)\n-        initialize_chain_clean(self.options.tmpdir, 3)\n+        initialize_chain_clean(self.options.tmpdir, 4)\n \n     def setup_network(self, split=False):\n-        self.nodes = start_nodes(3, self.options.tmpdir)\n+        self.nodes = start_nodes(4, self.options.tmpdir)\n \n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n+        connect_nodes_bi(self.nodes,0,3)\n \n         self.is_network_split=False\n         self.sync_all()\n@@ -31,11 +32,20 @@ def run_test(self):\n \n         self.nodes[2].generate(1)\n         self.sync_all()\n-        self.nodes[0].generate(101)\n+        self.nodes[0].generate(121)\n         self.sync_all()\n+\n+        watchonly_address = self.nodes[0].getnewaddress()\n+        watchonly_pubkey = self.nodes[0].validateaddress(watchonly_address)[\"pubkey\"]\n+        watchonly_amount = 200\n+        self.nodes[3].importpubkey(watchonly_pubkey, \"\", True)\n+        watchonly_txid = self.nodes[0].sendtoaddress(watchonly_address, watchonly_amount)\n+        self.nodes[0].sendtoaddress(self.nodes[3].getnewaddress(), watchonly_amount / 10);\n+\n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5);\n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0);\n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0);\n+\n         self.sync_all()\n         self.nodes[0].generate(1)\n         self.sync_all()\n@@ -428,11 +438,12 @@ def run_test(self):\n         stop_nodes(self.nodes)\n         wait_bitcoinds()\n \n-        self.nodes = start_nodes(3, self.options.tmpdir)\n+        self.nodes = start_nodes(4, self.options.tmpdir)\n \n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n+        connect_nodes_bi(self.nodes,0,3)\n         self.is_network_split=False\n         self.sync_all()\n \n@@ -525,5 +536,45 @@ def run_test(self):\n         assert_equal(oldBalance+Decimal('50.19000000'), self.nodes[0].getbalance()) #0.19+block reward\n \n \n+        ##################################################\n+        # test a fundrawtransaction using only watchonly #\n+        ##################################################\n+\n+        inputs = []\n+        outputs = {self.nodes[2].getnewaddress() : watchonly_amount / 2}\n+        rawtx = self.nodes[3].createrawtransaction(inputs, outputs)\n+\n+        result = self.nodes[3].fundrawtransaction(rawtx, True)\n+        res_dec = self.nodes[0].decoderawtransaction(result[\"hex\"])\n+        assert_equal(len(res_dec[\"vin\"]), 1)\n+        assert_equal(res_dec[\"vin\"][0][\"txid\"], watchonly_txid)\n+\n+        assert_equal(\"fee\" in result.keys(), True)\n+        assert_greater_than(result[\"changepos\"], -1)\n+\n+        ###############################################################\n+        # test fundrawtransaction using the entirety of watched funds #\n+        ###############################################################\n+\n+        inputs = []\n+        outputs = {self.nodes[2].getnewaddress() : watchonly_amount}\n+        rawtx = self.nodes[3].createrawtransaction(inputs, outputs)\n+\n+        result = self.nodes[3].fundrawtransaction(rawtx, True)\n+        res_dec = self.nodes[0].decoderawtransaction(result[\"hex\"])\n+        assert_equal(len(res_dec[\"vin\"]), 2)\n+        assert(res_dec[\"vin\"][0][\"txid\"] == watchonly_txid or res_dec[\"vin\"][1][\"txid\"] == watchonly_txid)\n+\n+        assert_greater_than(result[\"fee\"], 0)\n+        assert_greater_than(result[\"changepos\"], -1)\n+        assert_equal(result[\"fee\"] + res_dec[\"vout\"][result[\"changepos\"]][\"value\"], watchonly_amount / 10)\n+\n+        signedtx = self.nodes[3].signrawtransaction(result[\"hex\"])\n+        assert(not signedtx[\"complete\"])\n+        signedtx = self.nodes[0].signrawtransaction(signedtx[\"hex\"])\n+        assert(signedtx[\"complete\"])\n+        self.nodes[0].sendrawtransaction(signedtx[\"hex\"])\n+\n+\n if __name__ == '__main__':\n     RawTransactionsTest().main()"
      },
      {
        "sha": "74d524c0a2589190b238f45cfecdaaa1a7c85823",
        "filename": "src/coincontrol.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bdb474dc9dd34e1a5b13ce9494a936cba77e027/src/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bdb474dc9dd34e1a5b13ce9494a936cba77e027/src/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coincontrol.h?ref=6bdb474dc9dd34e1a5b13ce9494a936cba77e027",
        "patch": "@@ -14,6 +14,8 @@ class CCoinControl\n     CTxDestination destChange;\n     //! If false, allows unselected inputs, but requires all selected inputs be used\n     bool fAllowOtherInputs;\n+    //! Includes watch only addresses which match the ISMINE_WATCH_PUBKEY criteria\n+    bool fAllowWatchOnly;\n \n     CCoinControl()\n     {\n@@ -24,6 +26,7 @@ class CCoinControl\n     {\n         destChange = CNoDestination();\n         fAllowOtherInputs = false;\n+        fAllowWatchOnly = false;\n         setSelected.clear();\n     }\n "
      },
      {
        "sha": "199a93456c8d6ad41328c25ca606c8da535c5aa9",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 5,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bdb474dc9dd34e1a5b13ce9494a936cba77e027/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bdb474dc9dd34e1a5b13ce9494a936cba77e027/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=6bdb474dc9dd34e1a5b13ce9494a936cba77e027",
        "patch": "@@ -2367,15 +2367,20 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() != 1)\n+    if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n-                            \"fundrawtransaction \\\"hexstring\\\"\\n\"\n+                            \"fundrawtransaction \\\"hexstring\\\" includeWatching\\n\"\n                             \"\\nAdd inputs to a transaction until it has enough in value to meet its out value.\\n\"\n                             \"This will not modify existing inputs, and will add one change output to the outputs.\\n\"\n                             \"Note that inputs which were signed may need to be resigned after completion since in/outputs have been added.\\n\"\n                             \"The inputs added will not be signed, use signrawtransaction for that.\\n\"\n+                            \"Note that all existing inputs must have their previous output transaction be in the wallet.\\n\"\n+                            \"Note that all inputs selected must be of standard form and P2SH scripts must be\"\n+                            \"in the wallet using importaddress or addmultisigaddress (to calculate fees).\\n\"\n+                            \"Only pay-to-pubkey, multisig, and P2SH versions thereof are currently supported for watch-only\\n\"\n                             \"\\nArguments:\\n\"\n-                            \"1. \\\"hexstring\\\"    (string, required) The hex string of the raw transaction\\n\"\n+                            \"1. \\\"hexstring\\\"     (string, required) The hex string of the raw transaction\\n\"\n+                            \"2. includeWatching (boolean, optional, default false) Also select inputs which are watch only\\n\"\n                             \"\\nResult:\\n\"\n                             \"{\\n\"\n                             \"  \\\"hex\\\":       \\\"value\\\", (string)  The resulting raw transaction (hex-encoded string)\\n\"\n@@ -2394,18 +2399,22 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n                             + HelpExampleCli(\"sendrawtransaction\", \"\\\"signedtransactionhex\\\"\")\n                             );\n \n-    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR));\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VBOOL));\n \n     // parse hex string from parameter\n     CTransaction origTx;\n     if (!DecodeHexTx(origTx, params[0].get_str()))\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n \n+    bool includeWatching = false;\n+    if (params.size() > 1)\n+        includeWatching = true;\n+\n     CMutableTransaction tx(origTx);\n     CAmount nFee;\n     string strFailReason;\n     int nChangePos = -1;\n-    if(!pwalletMain->FundTransaction(tx, nFee, nChangePos, strFailReason))\n+    if(!pwalletMain->FundTransaction(tx, nFee, nChangePos, strFailReason, includeWatching))\n         throw JSONRPCError(RPC_INTERNAL_ERROR, strFailReason);\n \n     UniValue result(UniValue::VOBJ);"
      },
      {
        "sha": "5bc34f9ede5e85ea2a298a40331cceaca5ebb645",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bdb474dc9dd34e1a5b13ce9494a936cba77e027/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bdb474dc9dd34e1a5b13ce9494a936cba77e027/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=6bdb474dc9dd34e1a5b13ce9494a936cba77e027",
        "patch": "@@ -1524,7 +1524,9 @@ void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed, const\n                 if (!(IsSpent(wtxid, i)) && mine != ISMINE_NO &&\n                     !IsLockedCoin((*it).first, i) && (pcoin->vout[i].nValue > 0 || fIncludeZeroValue) &&\n                     (!coinControl || !coinControl->HasSelected() || coinControl->fAllowOtherInputs || coinControl->IsSelected((*it).first, i)))\n-                        vCoins.push_back(COutput(pcoin, i, nDepth, (mine & ISMINE_SPENDABLE) != ISMINE_NO));\n+                        vCoins.push_back(COutput(pcoin, i, nDepth,\n+                                                 ((mine & ISMINE_SPENDABLE) != ISMINE_NO) ||\n+                                                  (coinControl && coinControl->fAllowWatchOnly && (mine & ISMINE_WATCH_PUBKEY) != ISMINE_NO)));\n             }\n         }\n     }\n@@ -1740,7 +1742,7 @@ bool CWallet::SelectCoins(const CAmount& nTargetValue, set<pair<const CWalletTx*\n     return res;\n }\n \n-bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount &nFeeRet, int& nChangePosRet, std::string& strFailReason)\n+bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount &nFeeRet, int& nChangePosRet, std::string& strFailReason, bool includeWatching)\n {\n     vector<CRecipient> vecSend;\n \n@@ -1753,6 +1755,7 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount &nFeeRet, int& nC\n \n     CCoinControl coinControl;\n     coinControl.fAllowOtherInputs = true;\n+    coinControl.fAllowWatchOnly = includeWatching;\n     BOOST_FOREACH(const CTxIn& txin, tx.vin)\n         coinControl.Select(txin.prevout);\n "
      },
      {
        "sha": "faa509fc1d5246ebfb0900aa18c7b531e100da4a",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bdb474dc9dd34e1a5b13ce9494a936cba77e027/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bdb474dc9dd34e1a5b13ce9494a936cba77e027/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=6bdb474dc9dd34e1a5b13ce9494a936cba77e027",
        "patch": "@@ -630,7 +630,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     CAmount GetWatchOnlyBalance() const;\n     CAmount GetUnconfirmedWatchOnlyBalance() const;\n     CAmount GetImmatureWatchOnlyBalance() const;\n-    bool FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosRet, std::string& strFailReason);\n+    bool FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosRet, std::string& strFailReason, bool includeWatching);\n     bool CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosRet,\n                            std::string& strFailReason, const CCoinControl *coinControl = NULL, bool sign = true);\n     bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey);"
      }
    ]
  },
  {
    "sha": "24ce77d775f48034ef0c42fa21017d145c790921",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNGNlNzdkNzc1ZjQ4MDM0ZWYwYzQyZmEyMTAxN2QxNDVjNzkwOTIx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-21T09:47:33Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-21T09:47:57Z"
      },
      "message": "Merge pull request #6444\n\n0aad1f1 Exempt unspendable transaction outputs from dust checks (zathras-crypto)",
      "tree": {
        "sha": "dcc068a3b06264b78c96903efbc4885bf8e02079",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dcc068a3b06264b78c96903efbc4885bf8e02079"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/24ce77d775f48034ef0c42fa21017d145c790921",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVrhVNAAoJEHSBCwEjRsmm7MkIAJxYwHo4WP6dkF6PSt/3eRDR\nXJA9RJ41jbBCW/ISTs4joaAyYaSx1V2LlxjDyJhb+xWh8yXf5mkvRCwXfir6qcBF\nNC5SjmreOSvYXVN7zh7ttTGz/kQLU5BNF/LQ1XbY/VDNbaUFHr8OpglOui9cuzMA\nxLLm+WDglJAs0CfmB8COA9ZnEenDw+iMhI/s6h+AXyrNfUW+wiqpfg/hSEMXUzHH\nsVtqlvMAgXhrzhfImXLuyUlOKT2X0eDT0dtdEm2NhLSR/FjGZGYqCnMxBCm7okzj\nA+26UnFLpr4V6JcgyqmZ8Q7A3bgkkGoQ39F6qIt37bQBeas395mL5tUM8MFXtgY=\n=ivyK\n-----END PGP SIGNATURE-----",
        "payload": "tree dcc068a3b06264b78c96903efbc4885bf8e02079\nparent 6d6b11e793a2d1a106238a2838f5df1d3124217b\nparent 0aad1f13b2430165062bf9436036c1222a8724da\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1437472053 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1437472077 +0200\n\nMerge pull request #6444\n\n0aad1f1 Exempt unspendable transaction outputs from dust checks (zathras-crypto)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24ce77d775f48034ef0c42fa21017d145c790921",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/24ce77d775f48034ef0c42fa21017d145c790921",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24ce77d775f48034ef0c42fa21017d145c790921/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6d6b11e793a2d1a106238a2838f5df1d3124217b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d6b11e793a2d1a106238a2838f5df1d3124217b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6d6b11e793a2d1a106238a2838f5df1d3124217b"
      },
      {
        "sha": "0aad1f13b2430165062bf9436036c1222a8724da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0aad1f13b2430165062bf9436036c1222a8724da",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0aad1f13b2430165062bf9436036c1222a8724da"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 21,
      "deletions": 2
    },
    "files": [
      {
        "sha": "ce52247b2e4b9b08b63846610cd0904ad1188967",
        "filename": "qa/rpc-tests/fundrawtransaction.py",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24ce77d775f48034ef0c42fa21017d145c790921/qa/rpc-tests/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24ce77d775f48034ef0c42fa21017d145c790921/qa/rpc-tests/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fundrawtransaction.py?ref=24ce77d775f48034ef0c42fa21017d145c790921",
        "patch": "@@ -524,6 +524,22 @@ def run_test(self):\n         self.sync_all()\n         assert_equal(oldBalance+Decimal('50.19000000'), self.nodes[0].getbalance()) #0.19+block reward\n \n+        #####################################################\n+        # test fundrawtransaction with OP_RETURN and no vin #\n+        #####################################################\n+\n+        rawtx   = \"0100000000010000000000000000066a047465737400000000\"\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n+\n+        assert_equal(len(dec_tx['vin']), 0)\n+        assert_equal(len(dec_tx['vout']), 1)\n+\n+        rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n+        dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n+\n+        assert_greater_than(len(dec_tx['vin']), 0) # at least one vin\n+        assert_equal(len(dec_tx['vout']), 2) # one change output added\n+\n \n if __name__ == '__main__':\n     RawTransactionsTest().main()"
      },
      {
        "sha": "2a457cdae78c523a0d4f8526dc51273af2c3ec31",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24ce77d775f48034ef0c42fa21017d145c790921/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24ce77d775f48034ef0c42fa21017d145c790921/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=24ce77d775f48034ef0c42fa21017d145c790921",
        "patch": "@@ -141,10 +141,13 @@ class CTxOut\n         // which has units satoshis-per-kilobyte.\n         // If you'd pay more than 1/3 in fees\n         // to spend something, then we consider it dust.\n-        // A typical txout is 34 bytes big, and will\n+        // A typical spendable txout is 34 bytes big, and will\n         // need a CTxIn of at least 148 bytes to spend:\n-        // so dust is a txout less than 546 satoshis \n+        // so dust is a spendable txout less than 546 satoshis\n         // with default minRelayTxFee.\n+        if (scriptPubKey.IsUnspendable())\n+            return 0;\n+\n         size_t nSize = GetSerializeSize(SER_DISK,0)+148u;\n         return 3*minRelayTxFee.GetFee(nSize);\n     }"
      }
    ]
  },
  {
    "sha": "24f69281929ea06095613574c744c6d2fee750e9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNGY2OTI4MTkyOWVhMDYwOTU2MTM1NzRjNzQ0YzZkMmZlZTc1MGU5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-21T10:49:11Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-21T10:49:41Z"
      },
      "message": "Merge pull request #6400\n\n1327897 Reformat help text of estimatefee and estimatepriority to match other help texts. (Pavel Jan\u00edk)",
      "tree": {
        "sha": "52276ecf482fe482ec50fe36ad7e7ff208e7a874",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/52276ecf482fe482ec50fe36ad7e7ff208e7a874"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/24f69281929ea06095613574c744c6d2fee750e9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVriPFAAoJEHSBCwEjRsmmaHkH/2DPZocYU2gCpbQr2uddC45z\nW/9K4glV7/Q/97BIRW52QoadCjPaUBooQFy0Oeq1ChW8qgtdo903d9JoOYQfEaEw\nqh+beF0q/YJPfsHKONI3r4L1PYjRRBLO7pjVU+tjaH/8JEODkWqIYpiWast+mTSq\ncs9sL8cezL8mCmeIemRILktRSMEkWjqsQ4VGUp2yg3HpujdAgLoiQK08phs6JoqE\nUeJxhLmU+SrhMX1I7jmsQyoRsrAJUcbxMJ/0kkS9siDl9CLPtbZD/xVucatqKyv/\nOaD6bcLLXhBWRlo9G3Rdjmt1QRDIId9OGacQ0UB6189/1xWde4/01WnEAjtfbmw=\n=69hN\n-----END PGP SIGNATURE-----",
        "payload": "tree 52276ecf482fe482ec50fe36ad7e7ff208e7a874\nparent 24ce77d775f48034ef0c42fa21017d145c790921\nparent 1327897aee67e9caf733eb1161d8b5828d3f6f6f\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1437475751 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1437475781 +0200\n\nMerge pull request #6400\n\n1327897 Reformat help text of estimatefee and estimatepriority to match other help texts. (Pavel Jan\u00edk)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24f69281929ea06095613574c744c6d2fee750e9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/24f69281929ea06095613574c744c6d2fee750e9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24f69281929ea06095613574c744c6d2fee750e9/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "24ce77d775f48034ef0c42fa21017d145c790921",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24ce77d775f48034ef0c42fa21017d145c790921",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/24ce77d775f48034ef0c42fa21017d145c790921"
      },
      {
        "sha": "1327897aee67e9caf733eb1161d8b5828d3f6f6f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1327897aee67e9caf733eb1161d8b5828d3f6f6f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1327897aee67e9caf733eb1161d8b5828d3f6f6f"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 10,
      "deletions": 12
    },
    "files": [
      {
        "sha": "703b0ee6537b0135c27cf249e0a7191fa82f0e9e",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 12,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24f69281929ea06095613574c744c6d2fee750e9/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24f69281929ea06095613574c744c6d2fee750e9/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=24f69281929ea06095613574c744c6d2fee750e9",
        "patch": "@@ -666,16 +666,15 @@ UniValue estimatefee(const UniValue& params, bool fHelp)\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n             \"estimatefee nblocks\\n\"\n-            \"\\nEstimates the approximate fee per kilobyte\\n\"\n-            \"needed for a transaction to begin confirmation\\n\"\n-            \"within nblocks blocks.\\n\"\n+            \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n+            \"confirmation within nblocks blocks.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. nblocks     (numeric)\\n\"\n             \"\\nResult:\\n\"\n-            \"n :    (numeric) estimated fee-per-kilobyte\\n\"\n+            \"n              (numeric) estimated fee-per-kilobyte\\n\"\n             \"\\n\"\n-            \"-1.0 is returned if not enough transactions and\\n\"\n-            \"blocks have been observed to make an estimate.\\n\"\n+            \"A negative value is returned if not enough transactions and blocks\\n\"\n+            \"have been observed to make an estimate.\\n\"\n             \"\\nExample:\\n\"\n             + HelpExampleCli(\"estimatefee\", \"6\")\n             );\n@@ -698,16 +697,15 @@ UniValue estimatepriority(const UniValue& params, bool fHelp)\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n             \"estimatepriority nblocks\\n\"\n-            \"\\nEstimates the approximate priority\\n\"\n-            \"a zero-fee transaction needs to begin confirmation\\n\"\n-            \"within nblocks blocks.\\n\"\n+            \"\\nEstimates the approximate priority a zero-fee transaction needs to begin\\n\"\n+            \"confirmation within nblocks blocks.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. nblocks     (numeric)\\n\"\n             \"\\nResult:\\n\"\n-            \"n :    (numeric) estimated priority\\n\"\n+            \"n              (numeric) estimated priority\\n\"\n             \"\\n\"\n-            \"-1.0 is returned if not enough transactions and\\n\"\n-            \"blocks have been observed to make an estimate.\\n\"\n+            \"A negative value is returned if not enough transactions and blocks\\n\"\n+            \"have been observed to make an estimate.\\n\"\n             \"\\nExample:\\n\"\n             + HelpExampleCli(\"estimatepriority\", \"6\")\n             );"
      }
    ]
  },
  {
    "sha": "45d1f5932ba85b8e5f3e2cc6839bf7a257ca460a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NWQxZjU5MzJiYTg1YjhlNWYzZTJjYzY4MzliZjdhMjU3Y2E0NjBh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-21T11:18:47Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-21T11:29:16Z"
      },
      "message": "Merge pull request #6381\n\nc4973aa Chainparams: CTestNetParams and CRegTestParams extend directly from CChainParams (Jorge Tim\u00f3n)\nd3cf546 Chainparams: Introduce CreateGenesisBlock() static function (Jorge Tim\u00f3n)",
      "tree": {
        "sha": "255e6267663e22ac11d7728a6b1f0afdf15e7f4a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/255e6267663e22ac11d7728a6b1f0afdf15e7f4a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/45d1f5932ba85b8e5f3e2cc6839bf7a257ca460a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVri0MAAoJEHSBCwEjRsmm/YoH/RRs8192EEnyRyZAfm+keBm2\n6dJ7/D/ueOcc2fKUsG9B/PBgYVpgIt8kMJWf9g9yhEAf5AWa1icQo+IphMl/3dId\nZoYYi0hUZZHnMPR263EnGyen83XxUyeollDQ0QqlQA2ngz4ubqt0lixDBnV2pIds\nBG7SbH1sdwX2wHV/E1iI4eg8tMJpqopplk+5i+d+rxhTqrJXj7v2CVMYjROsSica\n8CS3IfG+W7odnqtmcBViHXS9RKkcnt5OOn6ydZY32dtJtAB7ttP88tpJYWotyBtF\nj6oGAevHmfHOaiDgVtvh1SbV57XrxrhmVfn4CLrt6cjSPkzuHThNDRaKIvWgP/k=\n=LHvI\n-----END PGP SIGNATURE-----",
        "payload": "tree 255e6267663e22ac11d7728a6b1f0afdf15e7f4a\nparent 24f69281929ea06095613574c744c6d2fee750e9\nparent c4973aaaf6655dd3e311b88727ec3f23ed0d0d2f\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1437477527 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1437478156 +0200\n\nMerge pull request #6381\n\nc4973aa Chainparams: CTestNetParams and CRegTestParams extend directly from CChainParams (Jorge Tim\u00f3n)\nd3cf546 Chainparams: Introduce CreateGenesisBlock() static function (Jorge Tim\u00f3n)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45d1f5932ba85b8e5f3e2cc6839bf7a257ca460a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/45d1f5932ba85b8e5f3e2cc6839bf7a257ca460a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45d1f5932ba85b8e5f3e2cc6839bf7a257ca460a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "24f69281929ea06095613574c744c6d2fee750e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24f69281929ea06095613574c744c6d2fee750e9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/24f69281929ea06095613574c744c6d2fee750e9"
      },
      {
        "sha": "c4973aaaf6655dd3e311b88727ec3f23ed0d0d2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4973aaaf6655dd3e311b88727ec3f23ed0d0d2f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c4973aaaf6655dd3e311b88727ec3f23ed0d0d2f"
      }
    ],
    "stats": {
      "total": 96,
      "additions": 59,
      "deletions": 37
    },
    "files": [
      {
        "sha": "95e20bf61bc18630c4d8f928e486c8ba1b1d094e",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 56,
        "deletions": 35,
        "changes": 91,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45d1f5932ba85b8e5f3e2cc6839bf7a257ca460a/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45d1f5932ba85b8e5f3e2cc6839bf7a257ca460a/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=45d1f5932ba85b8e5f3e2cc6839bf7a257ca460a",
        "patch": "@@ -16,6 +16,45 @@ using namespace std;\n \n #include \"chainparamsseeds.h\"\n \n+static CBlock CreateGenesisBlock(const char* pszTimestamp, CScript genesisOutputScript, uint32_t nTime=1231006505, uint32_t nNonce=2083236893, uint32_t nBits=0x1d00ffff, int32_t nVersion=1, const CAmount& genesisReward=50 * COIN)\n+{\n+    CMutableTransaction txNew;\n+    txNew.nVersion = 1;\n+    txNew.vin.resize(1);\n+    txNew.vout.resize(1);\n+    txNew.vin[0].scriptSig = CScript() << 486604799 << CScriptNum(4) << vector<unsigned char>((const unsigned char*)pszTimestamp, (const unsigned char*)pszTimestamp + strlen(pszTimestamp));\n+    txNew.vout[0].nValue = genesisReward;\n+    txNew.vout[0].scriptPubKey = genesisOutputScript;\n+\n+    CBlock genesis;\n+    genesis.nTime    = nTime;\n+    genesis.nBits    = nBits;\n+    genesis.nNonce   = nNonce;\n+    genesis.nVersion = nVersion;\n+    genesis.vtx.push_back(txNew);\n+    genesis.hashPrevBlock.SetNull();\n+    genesis.hashMerkleRoot = genesis.BuildMerkleTree();\n+    return genesis;\n+}\n+\n+/**\n+ * Build the genesis block. Note that the output of its generation\n+ * transaction cannot be spent since it did not originally exist in the\n+ * database.\n+ *\n+ * CBlock(hash=000000000019d6, ver=1, hashPrevBlock=00000000000000, hashMerkleRoot=4a5e1e, nTime=1231006505, nBits=1d00ffff, nNonce=2083236893, vtx=1)\n+ *   CTransaction(hash=4a5e1e, ver=1, vin.size=1, vout.size=1, nLockTime=0)\n+ *     CTxIn(COutPoint(000000, -1), coinbase 04ffff001d0104455468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73)\n+ *     CTxOut(nValue=50.00000000, scriptPubKey=0x5F1DF16B2B704C8A578D0B)\n+ *   vMerkleTree: 4a5e1e\n+ */\n+static CBlock CreateGenesisBlock(uint32_t nTime=1231006505, uint32_t nNonce=2083236893, uint32_t nBits=0x1d00ffff, int32_t nVersion=1, const CAmount& genesisReward=50 * COIN)\n+{\n+    const char* pszTimestamp = \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\";\n+    CScript genesisOutputScript = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n+    return CreateGenesisBlock(pszTimestamp, genesisOutputScript, nTime, nNonce, nBits, nVersion, genesisReward);\n+}\n+\n /**\n  * Main network\n  */\n@@ -52,33 +91,7 @@ class CMainParams : public CChainParams {\n         nDefaultPort = 8333;\n         nPruneAfterHeight = 100000;\n \n-        /**\n-         * Build the genesis block. Note that the output of its generation\n-         * transaction cannot be spent since it did not originally exist in the\n-         * database.\n-         *\n-         * CBlock(hash=000000000019d6, ver=1, hashPrevBlock=00000000000000, hashMerkleRoot=4a5e1e, nTime=1231006505, nBits=1d00ffff, nNonce=2083236893, vtx=1)\n-         *   CTransaction(hash=4a5e1e, ver=1, vin.size=1, vout.size=1, nLockTime=0)\n-         *     CTxIn(COutPoint(000000, -1), coinbase 04ffff001d0104455468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73)\n-         *     CTxOut(nValue=50.00000000, scriptPubKey=0x5F1DF16B2B704C8A578D0B)\n-         *   vMerkleTree: 4a5e1e\n-         */\n-        const char* pszTimestamp = \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\";\n-        CMutableTransaction txNew;\n-        txNew.nVersion = 1;\n-        txNew.vin.resize(1);\n-        txNew.vout.resize(1);\n-        txNew.vin[0].scriptSig = CScript() << 486604799 << CScriptNum(4) << vector<unsigned char>((const unsigned char*)pszTimestamp, (const unsigned char*)pszTimestamp + strlen(pszTimestamp));\n-        txNew.vout[0].nValue = 50 * COIN;\n-        txNew.vout[0].scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n-        genesis.vtx.push_back(txNew);\n-        genesis.hashPrevBlock.SetNull();\n-        genesis.hashMerkleRoot = genesis.BuildMerkleTree();\n-        genesis.nVersion = 1;\n-        genesis.nTime    = 1231006505;\n-        genesis.nBits    = 0x1d00ffff;\n-        genesis.nNonce   = 2083236893;\n-\n+        genesis = CreateGenesisBlock();\n         consensus.hashGenesisBlock = genesis.GetHash();\n         assert(consensus.hashGenesisBlock == uint256S(\"0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\"));\n         assert(genesis.hashMerkleRoot == uint256S(\"0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"));\n@@ -131,13 +144,17 @@ static CMainParams mainParams;\n /**\n  * Testnet (v3)\n  */\n-class CTestNetParams : public CMainParams {\n+class CTestNetParams : public CChainParams {\n public:\n     CTestNetParams() {\n         strNetworkID = \"test\";\n+        consensus.nSubsidyHalvingInterval = 210000;\n         consensus.nMajorityEnforceBlockUpgrade = 51;\n         consensus.nMajorityRejectBlockOutdated = 75;\n         consensus.nMajorityWindow = 100;\n+        consensus.powLimit = uint256S(\"00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n+        consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n+        consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = true;\n         pchMessageStart[0] = 0x0b;\n         pchMessageStart[1] = 0x11;\n@@ -147,9 +164,7 @@ class CTestNetParams : public CMainParams {\n         nDefaultPort = 18333;\n         nPruneAfterHeight = 1000;\n \n-        //! Modify the testnet genesis block so the timestamp is valid for a later start.\n-        genesis.nTime = 1296688602;\n-        genesis.nNonce = 414098458;\n+        genesis = CreateGenesisBlock(1296688602, 414098458);\n         consensus.hashGenesisBlock = genesis.GetHash();\n         assert(consensus.hashGenesisBlock == uint256S(\"0x000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943\"));\n \n@@ -189,7 +204,7 @@ static CTestNetParams testNetParams;\n /**\n  * Regression test\n  */\n-class CRegTestParams : public CTestNetParams {\n+class CRegTestParams : public CChainParams {\n public:\n     CRegTestParams() {\n         strNetworkID = \"regtest\";\n@@ -198,13 +213,14 @@ class CRegTestParams : public CTestNetParams {\n         consensus.nMajorityRejectBlockOutdated = 950;\n         consensus.nMajorityWindow = 1000;\n         consensus.powLimit = uint256S(\"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n+        consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n+        consensus.nPowTargetSpacing = 10 * 60;\n+        consensus.fPowAllowMinDifficultyBlocks = true;\n         pchMessageStart[0] = 0xfa;\n         pchMessageStart[1] = 0xbf;\n         pchMessageStart[2] = 0xb5;\n         pchMessageStart[3] = 0xda;\n-        genesis.nTime = 1296688602;\n-        genesis.nBits = 0x207fffff;\n-        genesis.nNonce = 2;\n+        genesis = CreateGenesisBlock(1296688602, 2, 0x207fffff);\n         consensus.hashGenesisBlock = genesis.GetHash();\n         nDefaultPort = 18444;\n         assert(consensus.hashGenesisBlock == uint256S(\"0x0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"));\n@@ -226,6 +242,11 @@ class CRegTestParams : public CTestNetParams {\n             0,\n             0\n         };\n+        base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,111);\n+        base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,196);\n+        base58Prefixes[SECRET_KEY] =     std::vector<unsigned char>(1,239);\n+        base58Prefixes[EXT_PUBLIC_KEY] = boost::assign::list_of(0x04)(0x35)(0x87)(0xCF).convert_to_container<std::vector<unsigned char> >();\n+        base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x35)(0x83)(0x94).convert_to_container<std::vector<unsigned char> >();\n     }\n };\n static CRegTestParams regTestParams;"
      },
      {
        "sha": "9c87bf21548a70402ac06b8e1eefaa0f30ae659b",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45d1f5932ba85b8e5f3e2cc6839bf7a257ca460a/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45d1f5932ba85b8e5f3e2cc6839bf7a257ca460a/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=45d1f5932ba85b8e5f3e2cc6839bf7a257ca460a",
        "patch": "@@ -25,7 +25,7 @@ static CBaseMainParams mainParams;\n /**\n  * Testnet (v3)\n  */\n-class CBaseTestNetParams : public CBaseMainParams\n+class CBaseTestNetParams : public CBaseChainParams\n {\n public:\n     CBaseTestNetParams()\n@@ -39,11 +39,12 @@ static CBaseTestNetParams testNetParams;\n /*\n  * Regression test\n  */\n-class CBaseRegTestParams : public CBaseTestNetParams\n+class CBaseRegTestParams : public CBaseChainParams\n {\n public:\n     CBaseRegTestParams()\n     {\n+        nRPCPort = 18332;\n         strDataDir = \"regtest\";\n     }\n };"
      }
    ]
  },
  {
    "sha": "56b28fca46d07079462f0380e6fbd52b6507079a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NmIyOGZjYTQ2ZDA3MDc5NDYyZjAzODBlNmZiZDUyYjY1MDcwNzlh",
    "commit": {
      "author": {
        "name": "Casey Rodarmor",
        "email": "casey@rodarmor.com",
        "date": "2015-07-22T16:03:16Z"
      },
      "committer": {
        "name": "Casey Rodarmor",
        "email": "casey@rodarmor.com",
        "date": "2015-07-22T16:03:16Z"
      },
      "message": "Don't share objects between TestInstances",
      "tree": {
        "sha": "acecd0d0a40aeaa44a0163e8b2aab181ff59373d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/acecd0d0a40aeaa44a0163e8b2aab181ff59373d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/56b28fca46d07079462f0380e6fbd52b6507079a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56b28fca46d07079462f0380e6fbd52b6507079a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/56b28fca46d07079462f0380e6fbd52b6507079a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56b28fca46d07079462f0380e6fbd52b6507079a/comments",
    "author": {
      "login": "casey",
      "id": 1945,
      "node_id": "MDQ6VXNlcjE5NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/casey",
      "html_url": "https://github.com/casey",
      "followers_url": "https://api.github.com/users/casey/followers",
      "following_url": "https://api.github.com/users/casey/following{/other_user}",
      "gists_url": "https://api.github.com/users/casey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/casey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/casey/subscriptions",
      "organizations_url": "https://api.github.com/users/casey/orgs",
      "repos_url": "https://api.github.com/users/casey/repos",
      "events_url": "https://api.github.com/users/casey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/casey/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "casey",
      "id": 1945,
      "node_id": "MDQ6VXNlcjE5NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/casey",
      "html_url": "https://github.com/casey",
      "followers_url": "https://api.github.com/users/casey/followers",
      "following_url": "https://api.github.com/users/casey/following{/other_user}",
      "gists_url": "https://api.github.com/users/casey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/casey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/casey/subscriptions",
      "organizations_url": "https://api.github.com/users/casey/orgs",
      "repos_url": "https://api.github.com/users/casey/repos",
      "events_url": "https://api.github.com/users/casey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/casey/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "45d1f5932ba85b8e5f3e2cc6839bf7a257ca460a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45d1f5932ba85b8e5f3e2cc6839bf7a257ca460a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/45d1f5932ba85b8e5f3e2cc6839bf7a257ca460a"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "7fb31d4a06252953471577b10de7c6dfb2602a2e",
        "filename": "qa/rpc-tests/test_framework/comptool.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/56b28fca46d07079462f0380e6fbd52b6507079a/qa/rpc-tests/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/56b28fca46d07079462f0380e6fbd52b6507079a/qa/rpc-tests/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/comptool.py?ref=56b28fca46d07079462f0380e6fbd52b6507079a",
        "patch": "@@ -122,8 +122,8 @@ def send_mempool(self):\n #    or false, then only the last tx is tested against outcome.)\n \n class TestInstance(object):\n-    def __init__(self, objects=[], sync_every_block=True, sync_every_tx=False):\n-        self.blocks_and_transactions = objects\n+    def __init__(self, objects=None, sync_every_block=True, sync_every_tx=False):\n+        self.blocks_and_transactions = objects if objects else []\n         self.sync_every_block = sync_every_block\n         self.sync_every_tx = sync_every_tx\n "
      }
    ]
  },
  {
    "sha": "633fe10869abe89d32d657c2ae8944daa97e4f22",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MzNmZTEwODY5YWJlODlkMzJkNjU3YzJhZTg5NDRkYWE5N2U0ZjIy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-22T16:06:59Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-22T16:24:20Z"
      },
      "message": "Merge pull request #6149\n\n27d7605 Buffer log messages and explicitly open logs (Adam Weiss)",
      "tree": {
        "sha": "a22bce89ecd40092ad08a8f43ae662b58490a4c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a22bce89ecd40092ad08a8f43ae662b58490a4c9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/633fe10869abe89d32d657c2ae8944daa97e4f22",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVr8O0AAoJEHSBCwEjRsmmEQoH/imlbOIk9tnIrDGGePp1VS0l\nRiIVhPz4K/W01FbMge6d0Wdvzt4deUfvFJc1e/jsScghNIET26pWqezWT2Gxtxgh\n53hnpxF00wc/QCFzJpAcPpE4WKjvVqlY/TMhAgc8SNC2HyWfyVlMsE5o61KUQH3j\n1/7nbFAZlpV9HBn7+w3CcWmTJXFepY2rViHtU+YlZ9E9Lc2NVBmS1iFfw7RV4GRK\nZaJ7zCbg53Avzc6qMC54kdk9qS66gERYNPRPk2yUZdIFSEQz/jj8tsMQz1TlAFVQ\nLUTyjeQLywPzZNzcumfgA8nEwF1nafDCHpaZNwRAk+WOLAJVXiupsiJkhczmIzE=\n=tcTO\n-----END PGP SIGNATURE-----",
        "payload": "tree a22bce89ecd40092ad08a8f43ae662b58490a4c9\nparent 45d1f5932ba85b8e5f3e2cc6839bf7a257ca460a\nparent 27d760580456d206c5a02ef29797f296f510099c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1437581219 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1437582260 +0200\n\nMerge pull request #6149\n\n27d7605 Buffer log messages and explicitly open logs (Adam Weiss)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/633fe10869abe89d32d657c2ae8944daa97e4f22",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/633fe10869abe89d32d657c2ae8944daa97e4f22",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/633fe10869abe89d32d657c2ae8944daa97e4f22/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "45d1f5932ba85b8e5f3e2cc6839bf7a257ca460a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45d1f5932ba85b8e5f3e2cc6839bf7a257ca460a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/45d1f5932ba85b8e5f3e2cc6839bf7a257ca460a"
      },
      {
        "sha": "27d760580456d206c5a02ef29797f296f510099c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27d760580456d206c5a02ef29797f296f510099c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/27d760580456d206c5a02ef29797f296f510099c"
      }
    ],
    "stats": {
      "total": 113,
      "additions": 85,
      "deletions": 28
    },
    "files": [
      {
        "sha": "ecf05d95b42fd0d4e7df2260d9995b46482eac2f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/633fe10869abe89d32d657c2ae8944daa97e4f22/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/633fe10869abe89d32d657c2ae8944daa97e4f22/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=633fe10869abe89d32d657c2ae8944daa97e4f22",
        "patch": "@@ -668,6 +668,9 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     fLogTimestamps = GetBoolArg(\"-logtimestamps\", true);\n     fLogIPs = GetBoolArg(\"-logips\", false);\n \n+    LogPrintf(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\");\n+    LogPrintf(\"Bitcoin version %s (%s)\\n\", FormatFullVersion(), CLIENT_DATE);\n+\n     // when specifying an explicit binding address, you want to listen on it\n     // even when -connect or -proxy is specified\n     if (mapArgs.count(\"-bind\")) {\n@@ -941,8 +944,10 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n #endif\n     if (GetBoolArg(\"-shrinkdebugfile\", !fDebug))\n         ShrinkDebugFile();\n-    LogPrintf(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\");\n-    LogPrintf(\"Bitcoin version %s (%s)\\n\", FormatFullVersion(), CLIENT_DATE);\n+\n+    if (fPrintToDebugLog)\n+        OpenDebugLog();\n+\n     LogPrintf(\"Using OpenSSL version %s\\n\", SSLeay_version(SSLEAY_VERSION));\n #ifdef ENABLE_WALLET\n     LogPrintf(\"Using BerkeleyDB version %s\\n\", DbEnv::version(0, 0, 0));"
      },
      {
        "sha": "97fecc6c8ec4a6450c8aded23ee49162b45c5a13",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 77,
        "deletions": 26,
        "changes": 103,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/633fe10869abe89d32d657c2ae8944daa97e4f22/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/633fe10869abe89d32d657c2ae8944daa97e4f22/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=633fe10869abe89d32d657c2ae8944daa97e4f22",
        "patch": "@@ -175,23 +175,51 @@ instance_of_cinit;\n  */\n \n static boost::once_flag debugPrintInitFlag = BOOST_ONCE_INIT;\n+\n /**\n- * We use boost::call_once() to make sure these are initialized\n- * in a thread-safe manner the first time called:\n+ * We use boost::call_once() to make sure mutexDebugLog and\n+ * vMsgsBeforeOpenLog are initialized in a thread-safe manner.\n+ *\n+ * NOTE: fileout, mutexDebugLog and sometimes vMsgsBeforeOpenLog\n+ * are leaked on exit. This is ugly, but will be cleaned up by\n+ * the OS/libc. When the shutdown sequence is fully audited and\n+ * tested, explicit destruction of these objects can be implemented.\n  */\n static FILE* fileout = NULL;\n static boost::mutex* mutexDebugLog = NULL;\n+static list<string> *vMsgsBeforeOpenLog;\n+\n+static int FileWriteStr(const std::string &str, FILE *fp)\n+{\n+    return fwrite(str.data(), 1, str.size(), fp);\n+}\n \n static void DebugPrintInit()\n {\n-    assert(fileout == NULL);\n     assert(mutexDebugLog == NULL);\n+    mutexDebugLog = new boost::mutex();\n+    vMsgsBeforeOpenLog = new list<string>;\n+}\n+\n+void OpenDebugLog()\n+{\n+    boost::call_once(&DebugPrintInit, debugPrintInitFlag);\n+    boost::mutex::scoped_lock scoped_lock(*mutexDebugLog);\n \n+    assert(fileout == NULL);\n+    assert(vMsgsBeforeOpenLog);\n     boost::filesystem::path pathDebug = GetDataDir() / \"debug.log\";\n     fileout = fopen(pathDebug.string().c_str(), \"a\");\n     if (fileout) setbuf(fileout, NULL); // unbuffered\n \n-    mutexDebugLog = new boost::mutex();\n+    // dump buffered messages from before we opened the log\n+    while (!vMsgsBeforeOpenLog->empty()) {\n+        FileWriteStr(vMsgsBeforeOpenLog->front(), fileout);\n+        vMsgsBeforeOpenLog->pop_front();\n+    }\n+\n+    delete vMsgsBeforeOpenLog;\n+    vMsgsBeforeOpenLog = NULL;\n }\n \n bool LogAcceptCategory(const char* category)\n@@ -223,44 +251,67 @@ bool LogAcceptCategory(const char* category)\n     return true;\n }\n \n+/**\n+ * fStartedNewLine is a state variable held by the calling context that will\n+ * suppress printing of the timestamp when multiple calls are made that don't\n+ * end in a newline. Initialize it to true, and hold it, in the calling context.\n+ */\n+static std::string LogTimestampStr(const std::string &str, bool *fStartedNewLine)\n+{\n+    string strStamped;\n+\n+    if (!fLogTimestamps)\n+        return str;\n+\n+    if (*fStartedNewLine)\n+        strStamped =  DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", GetTime()) + ' ' + str;\n+    else\n+        strStamped = str;\n+\n+    if (!str.empty() && str[str.size()-1] == '\\n')\n+        *fStartedNewLine = true;\n+    else\n+        *fStartedNewLine = false;\n+\n+    return strStamped;\n+}\n+\n int LogPrintStr(const std::string &str)\n {\n     int ret = 0; // Returns total number of characters written\n+    static bool fStartedNewLine = true;\n     if (fPrintToConsole)\n     {\n         // print to console\n         ret = fwrite(str.data(), 1, str.size(), stdout);\n         fflush(stdout);\n     }\n-    else if (fPrintToDebugLog && AreBaseParamsConfigured())\n+    else if (fPrintToDebugLog)\n     {\n-        static bool fStartedNewLine = true;\n         boost::call_once(&DebugPrintInit, debugPrintInitFlag);\n-\n-        if (fileout == NULL)\n-            return ret;\n-\n         boost::mutex::scoped_lock scoped_lock(*mutexDebugLog);\n \n-        // reopen the log file, if requested\n-        if (fReopenDebugLog) {\n-            fReopenDebugLog = false;\n-            boost::filesystem::path pathDebug = GetDataDir() / \"debug.log\";\n-            if (freopen(pathDebug.string().c_str(),\"a\",fileout) != NULL)\n-                setbuf(fileout, NULL); // unbuffered\n-        }\n+        string strTimestamped = LogTimestampStr(str, &fStartedNewLine);\n \n-        // Debug print useful for profiling\n-        if (fLogTimestamps && fStartedNewLine)\n-            ret += fprintf(fileout, \"%s \", DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", GetTime()).c_str());\n-        if (!str.empty() && str[str.size()-1] == '\\n')\n-            fStartedNewLine = true;\n+        // buffer if we haven't opened the log yet\n+        if (fileout == NULL) {\n+            assert(vMsgsBeforeOpenLog);\n+            ret = strTimestamped.length();\n+            vMsgsBeforeOpenLog->push_back(strTimestamped);\n+        }\n         else\n-            fStartedNewLine = false;\n-\n-        ret = fwrite(str.data(), 1, str.size(), fileout);\n+        {\n+            // reopen the log file, if requested\n+            if (fReopenDebugLog) {\n+                fReopenDebugLog = false;\n+                boost::filesystem::path pathDebug = GetDataDir() / \"debug.log\";\n+                if (freopen(pathDebug.string().c_str(),\"a\",fileout) != NULL)\n+                    setbuf(fileout, NULL); // unbuffered\n+            }\n+\n+            ret = FileWriteStr(strTimestamped, fileout);\n+        }\n     }\n-\n     return ret;\n }\n "
      },
      {
        "sha": "afc9a378bbaf82db7da0c1fcf40f5447c5fcda1b",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/633fe10869abe89d32d657c2ae8944daa97e4f22/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/633fe10869abe89d32d657c2ae8944daa97e4f22/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=633fe10869abe89d32d657c2ae8944daa97e4f22",
        "patch": "@@ -125,6 +125,7 @@ void ReadConfigFile(std::map<std::string, std::string>& mapSettingsRet, std::map\n boost::filesystem::path GetSpecialFolderPath(int nFolder, bool fCreate = true);\n #endif\n boost::filesystem::path GetTempPath();\n+void OpenDebugLog();\n void ShrinkDebugFile();\n void runCommand(const std::string& strCommand);\n "
      }
    ]
  },
  {
    "sha": "c433828df95eb72f486200c95b2b40de02a6f027",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNDMzODI4ZGY5NWViNzJmNDg2MjAwYzk1YjJiNDBkZTAyYTZmMDI3",
    "commit": {
      "author": {
        "name": "Ross Nicoll",
        "email": "jrn@jrn.me.uk",
        "date": "2015-07-04T19:14:03Z"
      },
      "committer": {
        "name": "Ross Nicoll",
        "email": "jrn@jrn.me.uk",
        "date": "2015-07-22T21:10:09Z"
      },
      "message": "Handle no chain tip available in InvalidChainFound()\n\nHandle the case where no chain tip is available, in InvalidChainFound(). This fixes a null pointer deference when running unit tests, if the genesis block or block validation code is broken.",
      "tree": {
        "sha": "c7948730deffe55c15c0aa200cad8c516741affb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c7948730deffe55c15c0aa200cad8c516741affb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c433828df95eb72f486200c95b2b40de02a6f027",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c433828df95eb72f486200c95b2b40de02a6f027",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c433828df95eb72f486200c95b2b40de02a6f027",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c433828df95eb72f486200c95b2b40de02a6f027/comments",
    "author": {
      "login": "rnicoll",
      "id": 3513077,
      "node_id": "MDQ6VXNlcjM1MTMwNzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3513077?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rnicoll",
      "html_url": "https://github.com/rnicoll",
      "followers_url": "https://api.github.com/users/rnicoll/followers",
      "following_url": "https://api.github.com/users/rnicoll/following{/other_user}",
      "gists_url": "https://api.github.com/users/rnicoll/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rnicoll/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rnicoll/subscriptions",
      "organizations_url": "https://api.github.com/users/rnicoll/orgs",
      "repos_url": "https://api.github.com/users/rnicoll/repos",
      "events_url": "https://api.github.com/users/rnicoll/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rnicoll/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rnicoll",
      "id": 3513077,
      "node_id": "MDQ6VXNlcjM1MTMwNzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3513077?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rnicoll",
      "html_url": "https://github.com/rnicoll",
      "followers_url": "https://api.github.com/users/rnicoll/followers",
      "following_url": "https://api.github.com/users/rnicoll/following{/other_user}",
      "gists_url": "https://api.github.com/users/rnicoll/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rnicoll/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rnicoll/subscriptions",
      "organizations_url": "https://api.github.com/users/rnicoll/orgs",
      "repos_url": "https://api.github.com/users/rnicoll/repos",
      "events_url": "https://api.github.com/users/rnicoll/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rnicoll/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "633fe10869abe89d32d657c2ae8944daa97e4f22",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/633fe10869abe89d32d657c2ae8944daa97e4f22",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/633fe10869abe89d32d657c2ae8944daa97e4f22"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "a3f7ab8191073f79fcf4c56459e9848608dfc6bb",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c433828df95eb72f486200c95b2b40de02a6f027/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c433828df95eb72f486200c95b2b40de02a6f027/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c433828df95eb72f486200c95b2b40de02a6f027",
        "patch": "@@ -1196,9 +1196,11 @@ void static InvalidChainFound(CBlockIndex* pindexNew)\n       pindexNew->GetBlockHash().ToString(), pindexNew->nHeight,\n       log(pindexNew->nChainWork.getdouble())/log(2.0), DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\",\n       pindexNew->GetBlockTime()));\n+    CBlockIndex *tip = chainActive.Tip();\n+    assert (tip);\n     LogPrintf(\"%s:  current best=%s  height=%d  log2_work=%.8g  date=%s\\n\", __func__,\n-      chainActive.Tip()->GetBlockHash().ToString(), chainActive.Height(), log(chainActive.Tip()->nChainWork.getdouble())/log(2.0),\n-      DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", chainActive.Tip()->GetBlockTime()));\n+      tip->GetBlockHash().ToString(), chainActive.Height(), log(tip->nChainWork.getdouble())/log(2.0),\n+      DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", tip->GetBlockTime()));\n     CheckForkWarningConditions();\n }\n "
      }
    ]
  },
  {
    "sha": "0fcc4e1e04082daf6e97e05bfb26e4b94e54ea53",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZmNjNGUxZTA0MDgyZGFmNmU5N2UwNWJmYjI2ZTRiOTRlNTRlYTUz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2014-12-20T10:35:33Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-07-22T23:49:54Z"
      },
      "message": "Assert on probable deadlocks if the second lock isnt try_lock",
      "tree": {
        "sha": "a3f9d2cf96fc33e95cd1c7193c4e3e43e5bfa3c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a3f9d2cf96fc33e95cd1c7193c4e3e43e5bfa3c5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0fcc4e1e04082daf6e97e05bfb26e4b94e54ea53",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fcc4e1e04082daf6e97e05bfb26e4b94e54ea53",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0fcc4e1e04082daf6e97e05bfb26e4b94e54ea53",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fcc4e1e04082daf6e97e05bfb26e4b94e54ea53/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6d6b11e793a2d1a106238a2838f5df1d3124217b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d6b11e793a2d1a106238a2838f5df1d3124217b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6d6b11e793a2d1a106238a2838f5df1d3124217b"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 39,
      "deletions": 10
    },
    "files": [
      {
        "sha": "1837e8d53ddb12ff01f3edec7ba88224a152f1c0",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 10,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fcc4e1e04082daf6e97e05bfb26e4b94e54ea53/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fcc4e1e04082daf6e97e05bfb26e4b94e54ea53/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=0fcc4e1e04082daf6e97e05bfb26e4b94e54ea53",
        "patch": "@@ -33,20 +33,22 @@ void PrintLockContention(const char* pszName, const char* pszFile, int nLine)\n //\n \n struct CLockLocation {\n-    CLockLocation(const char* pszName, const char* pszFile, int nLine)\n+    CLockLocation(const char* pszName, const char* pszFile, int nLine, bool fTryIn)\n     {\n         mutexName = pszName;\n         sourceFile = pszFile;\n         sourceLine = nLine;\n+        fTry = fTryIn;\n     }\n \n     std::string ToString() const\n     {\n-        return mutexName + \"  \" + sourceFile + \":\" + itostr(sourceLine);\n+        return mutexName + \"  \" + sourceFile + \":\" + itostr(sourceLine) + (fTry ? \" (TRY)\" : \"\");\n     }\n \n     std::string MutexName() const { return mutexName; }\n \n+    bool fTry;\n private:\n     std::string mutexName;\n     std::string sourceFile;\n@@ -62,23 +64,52 @@ static boost::thread_specific_ptr<LockStack> lockstack;\n \n static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch, const LockStack& s1, const LockStack& s2)\n {\n+    // We attempt to not assert on probably-not deadlocks by assuming that\n+    // a try lock will immediately have otherwise bailed if it had\n+    // failed to get the lock\n+    // We do this by, for the locks which triggered the potential deadlock,\n+    // in either lockorder, checking that the second of the two which is locked\n+    // is only a TRY_LOCK, ignoring locks if they are reentrant.\n+    bool firstLocked = false;\n+    bool secondLocked = false;\n+    bool onlyMaybeDeadlock = false;\n+\n     LogPrintf(\"POTENTIAL DEADLOCK DETECTED\\n\");\n     LogPrintf(\"Previous lock order was:\\n\");\n     BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, s2) {\n-        if (i.first == mismatch.first)\n+        if (i.first == mismatch.first) {\n             LogPrintf(\" (1)\");\n-        if (i.first == mismatch.second)\n+            if (!firstLocked && secondLocked && i.second.fTry)\n+                onlyMaybeDeadlock = true;\n+            firstLocked = true;\n+        }\n+        if (i.first == mismatch.second) {\n             LogPrintf(\" (2)\");\n+            if (!secondLocked && firstLocked && i.second.fTry)\n+                onlyMaybeDeadlock = true;\n+            secondLocked = true;\n+        }\n         LogPrintf(\" %s\\n\", i.second.ToString());\n     }\n+    firstLocked = false;\n+    secondLocked = false;\n     LogPrintf(\"Current lock order is:\\n\");\n     BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, s1) {\n-        if (i.first == mismatch.first)\n+        if (i.first == mismatch.first) {\n             LogPrintf(\" (1)\");\n-        if (i.first == mismatch.second)\n+            if (!firstLocked && secondLocked && i.second.fTry)\n+                onlyMaybeDeadlock = true;\n+            firstLocked = true;\n+        }\n+        if (i.first == mismatch.second) {\n             LogPrintf(\" (2)\");\n+            if (!secondLocked && firstLocked && i.second.fTry)\n+                onlyMaybeDeadlock = true;\n+            secondLocked = true;\n+        }\n         LogPrintf(\" %s\\n\", i.second.ToString());\n     }\n+    assert(onlyMaybeDeadlock);\n }\n \n static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)\n@@ -101,10 +132,8 @@ static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)\n             lockorders[p1] = (*lockstack);\n \n             std::pair<void*, void*> p2 = std::make_pair(c, i.first);\n-            if (lockorders.count(p2)) {\n+            if (lockorders.count(p2))\n                 potential_deadlock_detected(p1, lockorders[p2], lockorders[p1]);\n-                break;\n-            }\n         }\n     }\n     dd_mutex.unlock();\n@@ -119,7 +148,7 @@ static void pop_lock()\n \n void EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry)\n {\n-    push_lock(cs, CLockLocation(pszName, pszFile, nLine), fTry);\n+    push_lock(cs, CLockLocation(pszName, pszFile, nLine, fTry), fTry);\n }\n \n void LeaveCritical()"
      }
    ]
  },
  {
    "sha": "7cb1f9f7eb8162a792b4b87bba99fa21c682582e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Y2IxZjlmN2ViODE2MmE3OTJiNGI4N2JiYTk5ZmEyMWM2ODI1ODJl",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-07-23T14:14:17Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-07-23T14:32:21Z"
      },
      "message": "fix and extend CBitcoinExtKeyBase template\n\n- fix Decode call (req. only one param)\n- add constructor for base58c->CExtKey",
      "tree": {
        "sha": "e2c1abe84e002264ea6c08bacc9aab3378f3ec90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e2c1abe84e002264ea6c08bacc9aab3378f3ec90"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7cb1f9f7eb8162a792b4b87bba99fa21c682582e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cb1f9f7eb8162a792b4b87bba99fa21c682582e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7cb1f9f7eb8162a792b4b87bba99fa21c682582e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cb1f9f7eb8162a792b4b87bba99fa21c682582e/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "633fe10869abe89d32d657c2ae8944daa97e4f22",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/633fe10869abe89d32d657c2ae8944daa97e4f22",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/633fe10869abe89d32d657c2ae8944daa97e4f22"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 5,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d535491bb01c2807ff7ca69f23a7a4e08c012ae7",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cb1f9f7eb8162a792b4b87bba99fa21c682582e/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cb1f9f7eb8162a792b4b87bba99fa21c682582e/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=7cb1f9f7eb8162a792b4b87bba99fa21c682582e",
        "patch": "@@ -146,14 +146,18 @@ template<typename K, int Size, CChainParams::Base58Type Type> class CBitcoinExtK\n \n     K GetKey() {\n         K ret;\n-        ret.Decode(&vchData[0], &vchData[Size]);\n+        ret.Decode(&vchData[0]);\n         return ret;\n     }\n \n     CBitcoinExtKeyBase(const K &key) {\n         SetKey(key);\n     }\n \n+    CBitcoinExtKeyBase(const std::string& strBase58c) {\n+        SetString(strBase58c.c_str(), Params().Base58Prefix(Type).size());\n+    }\n+\n     CBitcoinExtKeyBase() {}\n };\n "
      }
    ]
  },
  {
    "sha": "8d2af54eccda83bfe86bb14069ad54d0e4ba357c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZDJhZjU0ZWNjZGE4M2JmZTg2YmIxNDA2OWFkNTRkMGU0YmEzNTdj",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-07-23T14:22:37Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-07-23T14:32:31Z"
      },
      "message": "extend bip32 tests to cover Base58c/CExtKey decode",
      "tree": {
        "sha": "726db6fdbb2be4797ad11ddc1c6d2ca903332988",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/726db6fdbb2be4797ad11ddc1c6d2ca903332988"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8d2af54eccda83bfe86bb14069ad54d0e4ba357c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d2af54eccda83bfe86bb14069ad54d0e4ba357c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8d2af54eccda83bfe86bb14069ad54d0e4ba357c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d2af54eccda83bfe86bb14069ad54d0e4ba357c/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7cb1f9f7eb8162a792b4b87bba99fa21c682582e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cb1f9f7eb8162a792b4b87bba99fa21c682582e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7cb1f9f7eb8162a792b4b87bba99fa21c682582e"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 11,
      "deletions": 0
    },
    "files": [
      {
        "sha": "69084213a2d4464dd018dcd518487996c7f97046",
        "filename": "src/test/bip32_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d2af54eccda83bfe86bb14069ad54d0e4ba357c/src/test/bip32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d2af54eccda83bfe86bb14069ad54d0e4ba357c/src/test/bip32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bip32_tests.cpp?ref=8d2af54eccda83bfe86bb14069ad54d0e4ba357c",
        "patch": "@@ -88,12 +88,23 @@ void RunTest(const TestVector &test) {\n         unsigned char data[74];\n         key.Encode(data);\n         pubkey.Encode(data);\n+\n         // Test private key\n         CBitcoinExtKey b58key; b58key.SetKey(key);\n         BOOST_CHECK(b58key.ToString() == derive.prv);\n+\n+        CBitcoinExtKey b58keyDecodeCheck(derive.prv);\n+        CExtKey checkKey = b58keyDecodeCheck.GetKey();\n+        assert(checkKey == key); //ensure a base58 decoded key also matches\n+\n         // Test public key\n         CBitcoinExtPubKey b58pubkey; b58pubkey.SetKey(pubkey);\n         BOOST_CHECK(b58pubkey.ToString() == derive.pub);\n+\n+        CBitcoinExtPubKey b58PubkeyDecodeCheck(derive.pub);\n+        CExtPubKey checkPubKey = b58PubkeyDecodeCheck.GetKey();\n+        assert(checkPubKey == pubkey); //ensure a base58 decoded pubkey also matches\n+\n         // Derive new keys\n         CExtKey keyNew;\n         BOOST_CHECK(key.Derive(keyNew, derive.nChild));"
      }
    ]
  },
  {
    "sha": "d946e9a848b82873881cd48267041081be8424c5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOTQ2ZTlhODQ4YjgyODczODgxY2Q0ODI2NzA0MTA4MWJlODQyNGM1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-23T16:33:47Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-23T16:34:35Z"
      },
      "message": "Merge pull request #5515\n\n0fcc4e1 Assert on probable deadlocks if the second lock isnt try_lock (Matt Corallo)",
      "tree": {
        "sha": "12ac280f4306d0c1880be337bb0648d8f254e5db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/12ac280f4306d0c1880be337bb0648d8f254e5db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d946e9a848b82873881cd48267041081be8424c5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVsRebAAoJEHSBCwEjRsmm73kIAKgqAv2qYjyhzTHvHg5Ck1DR\niLquUnSlm83ufxLTszxyvlIyNE2Ux3Jaot/XFX1N9qAbnv0PZrmLXjyB63HIi3E2\nkT8lu7e4K5saXChhoTknBGauNsNciProyO1hcJHIstmVULIFuJwa0uFg151sKqlz\nNsqDSMZNe01qbTM3W6lyXQGxkxfiDSCi2CThxr430doYcRG9MDxR0nBS3kALHzj4\nSahgqAyUt3CbqB92lpnUo8+OUeUnnBUjM18VFPm31dJztdrpmX4QwwCyUJf0TRqU\nJ2aFj8P343zbXvIfBHTkM/cD0rmqxS8LKGVNMsvTQ3F0d+Xxpk881ViPZediyjE=\n=ooay\n-----END PGP SIGNATURE-----",
        "payload": "tree 12ac280f4306d0c1880be337bb0648d8f254e5db\nparent 633fe10869abe89d32d657c2ae8944daa97e4f22\nparent 0fcc4e1e04082daf6e97e05bfb26e4b94e54ea53\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1437669227 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1437669275 +0200\n\nMerge pull request #5515\n\n0fcc4e1 Assert on probable deadlocks if the second lock isnt try_lock (Matt Corallo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d946e9a848b82873881cd48267041081be8424c5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d946e9a848b82873881cd48267041081be8424c5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d946e9a848b82873881cd48267041081be8424c5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "633fe10869abe89d32d657c2ae8944daa97e4f22",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/633fe10869abe89d32d657c2ae8944daa97e4f22",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/633fe10869abe89d32d657c2ae8944daa97e4f22"
      },
      {
        "sha": "0fcc4e1e04082daf6e97e05bfb26e4b94e54ea53",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fcc4e1e04082daf6e97e05bfb26e4b94e54ea53",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0fcc4e1e04082daf6e97e05bfb26e4b94e54ea53"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 39,
      "deletions": 10
    },
    "files": [
      {
        "sha": "1837e8d53ddb12ff01f3edec7ba88224a152f1c0",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 10,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d946e9a848b82873881cd48267041081be8424c5/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d946e9a848b82873881cd48267041081be8424c5/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=d946e9a848b82873881cd48267041081be8424c5",
        "patch": "@@ -33,20 +33,22 @@ void PrintLockContention(const char* pszName, const char* pszFile, int nLine)\n //\n \n struct CLockLocation {\n-    CLockLocation(const char* pszName, const char* pszFile, int nLine)\n+    CLockLocation(const char* pszName, const char* pszFile, int nLine, bool fTryIn)\n     {\n         mutexName = pszName;\n         sourceFile = pszFile;\n         sourceLine = nLine;\n+        fTry = fTryIn;\n     }\n \n     std::string ToString() const\n     {\n-        return mutexName + \"  \" + sourceFile + \":\" + itostr(sourceLine);\n+        return mutexName + \"  \" + sourceFile + \":\" + itostr(sourceLine) + (fTry ? \" (TRY)\" : \"\");\n     }\n \n     std::string MutexName() const { return mutexName; }\n \n+    bool fTry;\n private:\n     std::string mutexName;\n     std::string sourceFile;\n@@ -62,23 +64,52 @@ static boost::thread_specific_ptr<LockStack> lockstack;\n \n static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch, const LockStack& s1, const LockStack& s2)\n {\n+    // We attempt to not assert on probably-not deadlocks by assuming that\n+    // a try lock will immediately have otherwise bailed if it had\n+    // failed to get the lock\n+    // We do this by, for the locks which triggered the potential deadlock,\n+    // in either lockorder, checking that the second of the two which is locked\n+    // is only a TRY_LOCK, ignoring locks if they are reentrant.\n+    bool firstLocked = false;\n+    bool secondLocked = false;\n+    bool onlyMaybeDeadlock = false;\n+\n     LogPrintf(\"POTENTIAL DEADLOCK DETECTED\\n\");\n     LogPrintf(\"Previous lock order was:\\n\");\n     BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, s2) {\n-        if (i.first == mismatch.first)\n+        if (i.first == mismatch.first) {\n             LogPrintf(\" (1)\");\n-        if (i.first == mismatch.second)\n+            if (!firstLocked && secondLocked && i.second.fTry)\n+                onlyMaybeDeadlock = true;\n+            firstLocked = true;\n+        }\n+        if (i.first == mismatch.second) {\n             LogPrintf(\" (2)\");\n+            if (!secondLocked && firstLocked && i.second.fTry)\n+                onlyMaybeDeadlock = true;\n+            secondLocked = true;\n+        }\n         LogPrintf(\" %s\\n\", i.second.ToString());\n     }\n+    firstLocked = false;\n+    secondLocked = false;\n     LogPrintf(\"Current lock order is:\\n\");\n     BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, s1) {\n-        if (i.first == mismatch.first)\n+        if (i.first == mismatch.first) {\n             LogPrintf(\" (1)\");\n-        if (i.first == mismatch.second)\n+            if (!firstLocked && secondLocked && i.second.fTry)\n+                onlyMaybeDeadlock = true;\n+            firstLocked = true;\n+        }\n+        if (i.first == mismatch.second) {\n             LogPrintf(\" (2)\");\n+            if (!secondLocked && firstLocked && i.second.fTry)\n+                onlyMaybeDeadlock = true;\n+            secondLocked = true;\n+        }\n         LogPrintf(\" %s\\n\", i.second.ToString());\n     }\n+    assert(onlyMaybeDeadlock);\n }\n \n static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)\n@@ -101,10 +132,8 @@ static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)\n             lockorders[p1] = (*lockstack);\n \n             std::pair<void*, void*> p2 = std::make_pair(c, i.first);\n-            if (lockorders.count(p2)) {\n+            if (lockorders.count(p2))\n                 potential_deadlock_detected(p1, lockorders[p2], lockorders[p1]);\n-                break;\n-            }\n         }\n     }\n     dd_mutex.unlock();\n@@ -119,7 +148,7 @@ static void pop_lock()\n \n void EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry)\n {\n-    push_lock(cs, CLockLocation(pszName, pszFile, nLine), fTry);\n+    push_lock(cs, CLockLocation(pszName, pszFile, nLine, fTry), fTry);\n }\n \n void LeaveCritical()"
      }
    ]
  },
  {
    "sha": "d2464dfee928cdd4194516e9bc8b541c22972ab9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMjQ2NGRmZWU5MjhjZGQ0MTk0NTE2ZTliYzhiNTQxYzIyOTcyYWI5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-23T16:43:37Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-23T16:45:26Z"
      },
      "message": "Merge pull request #6287\n\na794284 locking: add a quick example of GUARDED_BY (Cory Fields)\n2b890dd locking: fix a few small issues uncovered by -Wthread-safety (Cory Fields)\ncd27bba locking: teach Clang's -Wthread-safety to cope with our scoped lock macros (Cory Fields)",
      "tree": {
        "sha": "19021d0c8d5bf2cd672b4e127e93e489606e98e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/19021d0c8d5bf2cd672b4e127e93e489606e98e7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d2464dfee928cdd4194516e9bc8b541c22972ab9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVsRomAAoJEHSBCwEjRsmmfUAH/22YHYRJAu97RGEG7tja+ix5\nuwXgijvRRygYBRqMTf2EPC6UQqkwNC51jX5u6ILp5nmio2E19seS7U7gTs8/uszH\nYdUc6T8TqEmnyYqG8jc5NVfPVnqCP/rDFjIsErZhEPmYEikaRytPXc87oRmzHbDw\na2+uYvVb/4jotdU3/Y63REfycZw/vf1cM9T0N2KvAHEpmLT5Dmv7DaVs3EKkx5L0\nxmZTruZUbVH9nQEHOPYk6dauqSjtOdLybvH0ZAhV+Wzgq/ALAofYxwnq1UzN9QL0\ncSo27WH8vwM7ibOJHE/sXtcUqhvaScXhHPw1M5o9PbGORInVo39yqzl77OnrGZs=\n=gP9i\n-----END PGP SIGNATURE-----",
        "payload": "tree 19021d0c8d5bf2cd672b4e127e93e489606e98e7\nparent d946e9a848b82873881cd48267041081be8424c5\nparent a794284e61988a226ea39327449be9906a1b5abd\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1437669817 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1437669926 +0200\n\nMerge pull request #6287\n\na794284 locking: add a quick example of GUARDED_BY (Cory Fields)\n2b890dd locking: fix a few small issues uncovered by -Wthread-safety (Cory Fields)\ncd27bba locking: teach Clang's -Wthread-safety to cope with our scoped lock macros (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2464dfee928cdd4194516e9bc8b541c22972ab9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d2464dfee928cdd4194516e9bc8b541c22972ab9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2464dfee928cdd4194516e9bc8b541c22972ab9/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d946e9a848b82873881cd48267041081be8424c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d946e9a848b82873881cd48267041081be8424c5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d946e9a848b82873881cd48267041081be8424c5"
      },
      {
        "sha": "a794284e61988a226ea39327449be9906a1b5abd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a794284e61988a226ea39327449be9906a1b5abd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a794284e61988a226ea39327449be9906a1b5abd"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 15,
      "deletions": 14
    },
    "files": [
      {
        "sha": "54f9f89c4dd631f102f461531f321a627f2c27be",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2464dfee928cdd4194516e9bc8b541c22972ab9/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2464dfee928cdd4194516e9bc8b541c22972ab9/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d2464dfee928cdd4194516e9bc8b541c22972ab9",
        "patch": "@@ -75,9 +75,9 @@ struct COrphanTx {\n     CTransaction tx;\n     NodeId fromPeer;\n };\n-map<uint256, COrphanTx> mapOrphanTransactions;\n-map<uint256, set<uint256> > mapOrphanTransactionsByPrev;\n-void EraseOrphansFor(NodeId peer);\n+map<uint256, COrphanTx> mapOrphanTransactions GUARDED_BY(cs_main);;\n+map<uint256, set<uint256> > mapOrphanTransactionsByPrev GUARDED_BY(cs_main);;\n+void EraseOrphansFor(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /**\n  * Returns true if there are nRequired or more blocks of minVersion or above\n@@ -527,7 +527,7 @@ CBlockTreeDB *pblocktree = NULL;\n // mapOrphanTransactions\n //\n \n-bool AddOrphanTx(const CTransaction& tx, NodeId peer)\n+bool AddOrphanTx(const CTransaction& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     uint256 hash = tx.GetHash();\n     if (mapOrphanTransactions.count(hash))\n@@ -557,7 +557,7 @@ bool AddOrphanTx(const CTransaction& tx, NodeId peer)\n     return true;\n }\n \n-void static EraseOrphanTx(uint256 hash)\n+void static EraseOrphanTx(uint256 hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     map<uint256, COrphanTx>::iterator it = mapOrphanTransactions.find(hash);\n     if (it == mapOrphanTransactions.end())\n@@ -591,7 +591,7 @@ void EraseOrphansFor(NodeId peer)\n }\n \n \n-unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)\n+unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     unsigned int nEvicted = 0;\n     while (mapOrphanTransactions.size() > nMaxOrphans)\n@@ -3649,7 +3649,7 @@ std::string GetWarnings(const std::string& strFor)\n //\n \n \n-bool static AlreadyHave(const CInv& inv)\n+bool static AlreadyHave(const CInv& inv) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     switch (inv.type)\n     {"
      },
      {
        "sha": "5cb6527c9baf7978619a85b9ae793e7257708dd5",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2464dfee928cdd4194516e9bc8b541c22972ab9/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2464dfee928cdd4194516e9bc8b541c22972ab9/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=d2464dfee928cdd4194516e9bc8b541c22972ab9",
        "patch": "@@ -2183,8 +2183,10 @@ void CNode::EndMessage() UNLOCK_FUNCTION(cs_vSend)\n         Fuzz(GetArg(\"-fuzzmessagestest\", 10));\n \n     if (ssSend.size() == 0)\n+    {\n+        LEAVE_CRITICAL_SECTION(cs_vSend);\n         return;\n-\n+    }\n     // Set the size\n     unsigned int nSize = ssSend.size() - CMessageHeader::HEADER_SIZE;\n     WriteLE32((uint8_t*)&ssSend[CMessageHeader::MESSAGE_SIZE_OFFSET], nSize);"
      },
      {
        "sha": "705647e4a55c70f9a7fa059486d2f9a49d3fdaf5",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2464dfee928cdd4194516e9bc8b541c22972ab9/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2464dfee928cdd4194516e9bc8b541c22972ab9/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=d2464dfee928cdd4194516e9bc8b541c22972ab9",
        "patch": "@@ -101,7 +101,7 @@ void PrintLockContention(const char* pszName, const char* pszFile, int nLine);\n \n /** Wrapper around boost::unique_lock<Mutex> */\n template <typename Mutex>\n-class CMutexLock\n+class SCOPED_LOCKABLE CMutexLock\n {\n private:\n     boost::unique_lock<Mutex> lock;\n@@ -129,15 +129,15 @@ class CMutexLock\n     }\n \n public:\n-    CMutexLock(Mutex& mutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false) : lock(mutexIn, boost::defer_lock)\n+    CMutexLock(Mutex& mutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false) EXCLUSIVE_LOCK_FUNCTION(mutexIn) : lock(mutexIn, boost::defer_lock)\n     {\n         if (fTry)\n             TryEnter(pszName, pszFile, nLine);\n         else\n             Enter(pszName, pszFile, nLine);\n     }\n \n-    CMutexLock(Mutex* pmutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false)\n+    CMutexLock(Mutex* pmutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false) EXCLUSIVE_LOCK_FUNCTION(pmutexIn)\n     {\n         if (!pmutexIn) return;\n \n@@ -148,7 +148,7 @@ class CMutexLock\n             Enter(pszName, pszFile, nLine);\n     }\n \n-    ~CMutexLock()\n+    ~CMutexLock() UNLOCK_FUNCTION()\n     {\n         if (lock.owns_lock())\n             LeaveCritical();"
      },
      {
        "sha": "37d52037c07305d9085d390c0d80dbd4eed2d61b",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2464dfee928cdd4194516e9bc8b541c22972ab9/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2464dfee928cdd4194516e9bc8b541c22972ab9/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=d2464dfee928cdd4194516e9bc8b541c22972ab9",
        "patch": "@@ -114,7 +114,7 @@ CTranslationInterface translationInterface;\n \n /** Init OpenSSL library multithreading support */\n static CCriticalSection** ppmutexOpenSSL;\n-void locking_callback(int mode, int i, const char* file, int line)\n+void locking_callback(int mode, int i, const char* file, int line) NO_THREAD_SAFETY_ANALYSIS\n {\n     if (mode & CRYPTO_LOCK) {\n         ENTER_CRITICAL_SECTION(*ppmutexOpenSSL[i]);"
      },
      {
        "sha": "f6ca8cbb76d5ed50722c0078f6440989032291aa",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2464dfee928cdd4194516e9bc8b541c22972ab9/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2464dfee928cdd4194516e9bc8b541c22972ab9/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=d2464dfee928cdd4194516e9bc8b541c22972ab9",
        "patch": "@@ -476,7 +476,6 @@ UniValue listaddressgroupings(const UniValue& params, bool fHelp)\n             addressInfo.push_back(CBitcoinAddress(address).ToString());\n             addressInfo.push_back(ValueFromAmount(balances[address]));\n             {\n-                LOCK(pwalletMain->cs_wallet);\n                 if (pwalletMain->mapAddressBook.find(CBitcoinAddress(address).Get()) != pwalletMain->mapAddressBook.end())\n                     addressInfo.push_back(pwalletMain->mapAddressBook.find(CBitcoinAddress(address).Get())->second.name);\n             }"
      }
    ]
  },
  {
    "sha": "9dd793f499254600efa468938cef9baa28ac81b0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZGQ3OTNmNDk5MjU0NjAwZWZhNDY4OTM4Y2VmOWJhYTI4YWM4MWIw",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-07-05T12:17:46Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-07-23T19:10:22Z"
      },
      "message": "TRIVIAL: Missing includes",
      "tree": {
        "sha": "5e42b1266d5e8c5fb64366778b6a3118a79adf2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5e42b1266d5e8c5fb64366778b6a3118a79adf2e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9dd793f499254600efa468938cef9baa28ac81b0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9dd793f499254600efa468938cef9baa28ac81b0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9dd793f499254600efa468938cef9baa28ac81b0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9dd793f499254600efa468938cef9baa28ac81b0/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "45d1f5932ba85b8e5f3e2cc6839bf7a257ca460a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45d1f5932ba85b8e5f3e2cc6839bf7a257ca460a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/45d1f5932ba85b8e5f3e2cc6839bf7a257ca460a"
      }
    ],
    "stats": {
      "total": 70,
      "additions": 66,
      "deletions": 4
    },
    "files": [
      {
        "sha": "91e54a9178e4546669dcc059b3a42ec8a4764131",
        "filename": "src/alert.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd793f499254600efa468938cef9baa28ac81b0/src/alert.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd793f499254600efa468938cef9baa28ac81b0/src/alert.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alert.cpp?ref=9dd793f499254600efa468938cef9baa28ac81b0",
        "patch": "@@ -11,6 +11,7 @@\n #include \"timedata.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n \n #include <stdint.h>\n #include <algorithm>"
      },
      {
        "sha": "cfa32d98103a77831998aea1fda3e12b8e6a6237",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd793f499254600efa468938cef9baa28ac81b0/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd793f499254600efa468938cef9baa28ac81b0/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=9dd793f499254600efa468938cef9baa28ac81b0",
        "patch": "@@ -3,6 +3,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"chainparams.h\"\n #include \"clientversion.h\"\n #include \"rpcserver.h\"\n #include \"init.h\""
      },
      {
        "sha": "a9822eed89b60e90669d9003f6f61a508b5fc4e9",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd793f499254600efa468938cef9baa28ac81b0/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd793f499254600efa468938cef9baa28ac81b0/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=9dd793f499254600efa468938cef9baa28ac81b0",
        "patch": "@@ -4,6 +4,7 @@\n \n #include \"checkpoints.h\"\n \n+#include \"chain.h\"\n #include \"chainparams.h\"\n #include \"main.h\"\n #include \"uint256.h\""
      },
      {
        "sha": "aba711c3e93f8a48e79f1a05c0f846784e50b971",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd793f499254600efa468938cef9baa28ac81b0/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd793f499254600efa468938cef9baa28ac81b0/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=9dd793f499254600efa468938cef9baa28ac81b0",
        "patch": "@@ -11,6 +11,8 @@\n \n #include \"addrman.h\"\n #include \"amount.h\"\n+#include \"chain.h\"\n+#include \"chainparams.h\"\n #include \"checkpoints.h\"\n #include \"compat/sanity.h\"\n #include \"consensus/validation.h\"\n@@ -23,11 +25,14 @@\n #include \"script/standard.h\"\n #include \"scheduler.h\"\n #include \"txdb.h\"\n+#include \"txmempool.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n+#include \"utilstrencodings.h\"\n #include \"validationinterface.h\"\n #ifdef ENABLE_WALLET\n+#include \"wallet/db.h\"\n #include \"wallet/wallet.h\"\n #include \"wallet/walletdb.h\"\n #endif"
      },
      {
        "sha": "58c42cf96ef1de77874cfc18cd6b6c031862f28d",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd793f499254600efa468938cef9baa28ac81b0/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd793f499254600efa468938cef9baa28ac81b0/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=9dd793f499254600efa468938cef9baa28ac81b0",
        "patch": "@@ -13,6 +13,7 @@\n #include \"checkqueue.h\"\n #include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n+#include \"hash.h\"\n #include \"init.h\"\n #include \"merkleblock.h\"\n #include \"net.h\"\n@@ -24,6 +25,7 @@\n #include \"undo.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n+#include \"utilstrencodings.h\"\n #include \"validationinterface.h\"\n \n #include <sstream>"
      },
      {
        "sha": "78a139012c3f2d6d4687f06516a7843e0ae75ce2",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd793f499254600efa468938cef9baa28ac81b0/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd793f499254600efa468938cef9baa28ac81b0/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=9dd793f499254600efa468938cef9baa28ac81b0",
        "patch": "@@ -18,6 +18,7 @@\n #include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n #include \"script/script.h\"\n+#include \"script/script_error.h\"\n #include \"script/sigcache.h\"\n #include \"script/standard.h\"\n #include \"sync.h\""
      },
      {
        "sha": "e44f3392c86d2937704e2c74f0663691c6b48146",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd793f499254600efa468938cef9baa28ac81b0/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd793f499254600efa468938cef9baa28ac81b0/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=9dd793f499254600efa468938cef9baa28ac81b0",
        "patch": "@@ -6,7 +6,9 @@\n #include \"miner.h\"\n \n #include \"amount.h\"\n+#include \"chain.h\"\n #include \"chainparams.h\"\n+#include \"coins.h\"\n #include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n #include \"hash.h\"\n@@ -15,7 +17,9 @@\n #include \"policy/policy.h\"\n #include \"pow.h\"\n #include \"primitives/transaction.h\"\n+#include \"script/standard.h\"\n #include \"timedata.h\"\n+#include \"txmempool.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n #include \"validationinterface.h\""
      },
      {
        "sha": "36b9bc50ae4db11c792d308c25bc01a59d52da87",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd793f499254600efa468938cef9baa28ac81b0/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd793f499254600efa468938cef9baa28ac81b0/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=9dd793f499254600efa468938cef9baa28ac81b0",
        "patch": "@@ -8,6 +8,7 @@\n \n #include \"bitcoingui.h\"\n \n+#include \"chainparams.h\"\n #include \"clientmodel.h\"\n #include \"guiconstants.h\"\n #include \"guiutil.h\""
      },
      {
        "sha": "764596df3673d5c404659f32ab8528783f69a474",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd793f499254600efa468938cef9baa28ac81b0/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd793f499254600efa468938cef9baa28ac81b0/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=9dd793f499254600efa468938cef9baa28ac81b0",
        "patch": "@@ -10,6 +10,7 @@\n #include \"guiutil.h\"\n #include \"optionsmodel.h\"\n #include \"scicon.h\"\n+#include \"txmempool.h\"\n #include \"walletmodel.h\"\n \n #include \"coincontrol.h\""
      },
      {
        "sha": "9841f6cedbe89daae00b757d7a657173e1741a5b",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd793f499254600efa468938cef9baa28ac81b0/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd793f499254600efa468938cef9baa28ac81b0/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=9dd793f499254600efa468938cef9baa28ac81b0",
        "patch": "@@ -19,6 +19,7 @@\n #include \"coincontrol.h\"\n #include \"main.h\"\n #include \"ui_interface.h\"\n+#include \"txmempool.h\"\n #include \"wallet/wallet.h\"\n \n #include <QMessageBox>"
      },
      {
        "sha": "f384562a50c0bf1b727375a11a0d492fce05f5d8",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd793f499254600efa468938cef9baa28ac81b0/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd793f499254600efa468938cef9baa28ac81b0/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=9dd793f499254600efa468938cef9baa28ac81b0",
        "patch": "@@ -25,6 +25,8 @@\n #include <QIcon>\n #include <QList>\n \n+#include <boost/foreach.hpp>\n+\n // Amount column is right-aligned it contains numbers\n static int column_alignments[] = {\n         Qt::AlignLeft|Qt::AlignVCenter, /* status */"
      },
      {
        "sha": "7820047b6b1ab7fb30553c745f72aa04a70d1f40",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd793f499254600efa468938cef9baa28ac81b0/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd793f499254600efa468938cef9baa28ac81b0/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=9dd793f499254600efa468938cef9baa28ac81b0",
        "patch": "@@ -25,6 +25,8 @@\n #include <QSet>\n #include <QTimer>\n \n+#include <boost/foreach.hpp>\n+\n WalletModel::WalletModel(CWallet *wallet, OptionsModel *optionsModel, QObject *parent) :\n     QObject(parent), wallet(wallet), optionsModel(optionsModel), addressTableModel(0),\n     transactionTableModel(0),"
      },
      {
        "sha": "0dd238b683a73057f4db71dd373759e57cb9ba11",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd793f499254600efa468938cef9baa28ac81b0/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd793f499254600efa468938cef9baa28ac81b0/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=9dd793f499254600efa468938cef9baa28ac81b0",
        "patch": "@@ -3,6 +3,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"chain.h\"\n #include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n #include \"main.h\""
      },
      {
        "sha": "5817f0ce57534db0259bc749b6166d9938958872",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd793f499254600efa468938cef9baa28ac81b0/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd793f499254600efa468938cef9baa28ac81b0/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=9dd793f499254600efa468938cef9baa28ac81b0",
        "patch": "@@ -3,13 +3,19 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"chain.h\"\n+#include \"chainparams.h\"\n #include \"checkpoints.h\"\n+#include \"coins.h\"\n #include \"consensus/validation.h\"\n #include \"main.h\"\n #include \"primitives/transaction.h\"\n #include \"rpcserver.h\"\n+#include \"streams.h\"\n #include \"sync.h\"\n+#include \"txmempool.h\"\n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n \n #include <stdint.h>\n "
      },
      {
        "sha": "b7d4ff58fce496e9a84f99594e6633d5cbe08b54",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd793f499254600efa468938cef9baa28ac81b0/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd793f499254600efa468938cef9baa28ac81b0/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=9dd793f499254600efa468938cef9baa28ac81b0",
        "patch": "@@ -4,6 +4,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"amount.h\"\n+#include \"chain.h\"\n #include \"chainparams.h\"\n #include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n@@ -14,7 +15,9 @@\n #include \"net.h\"\n #include \"pow.h\"\n #include \"rpcserver.h\"\n+#include \"txmempool.h\"\n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n #include \"validationinterface.h\"\n \n #include <stdint.h>"
      },
      {
        "sha": "82003e09b9d81c1dad05f427fd86ef38e3f88b5d",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd793f499254600efa468938cef9baa28ac81b0/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd793f499254600efa468938cef9baa28ac81b0/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=9dd793f499254600efa468938cef9baa28ac81b0",
        "patch": "@@ -12,6 +12,7 @@\n #include \"rpcserver.h\"\n #include \"timedata.h\"\n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n #ifdef ENABLE_WALLET\n #include \"wallet/wallet.h\"\n #include \"wallet/walletdb.h\""
      },
      {
        "sha": "ed903f9fd3f1ed3c51f358f1bc25e69793a51baa",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd793f499254600efa468938cef9baa28ac81b0/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd793f499254600efa468938cef9baa28ac81b0/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=9dd793f499254600efa468938cef9baa28ac81b0",
        "patch": "@@ -4,6 +4,7 @@\n \n #include \"rpcserver.h\"\n \n+#include \"chainparams.h\"\n #include \"clientversion.h\"\n #include \"main.h\"\n #include \"net.h\"\n@@ -12,6 +13,7 @@\n #include \"sync.h\"\n #include \"timedata.h\"\n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n #include \"version.h\"\n \n #include <boost/foreach.hpp>"
      },
      {
        "sha": "62d2ef69ef1eb7f4c6ecda4d35f4a6290b7a69df",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd793f499254600efa468938cef9baa28ac81b0/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd793f499254600efa468938cef9baa28ac81b0/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=9dd793f499254600efa468938cef9baa28ac81b0",
        "patch": "@@ -4,6 +4,8 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"base58.h\"\n+#include \"chain.h\"\n+#include \"coins.h\"\n #include \"consensus/validation.h\"\n #include \"core_io.h\"\n #include \"init.h\"\n@@ -18,7 +20,9 @@\n #include \"script/script_error.h\"\n #include \"script/sign.h\"\n #include \"script/standard.h\"\n+#include \"txmempool.h\"\n #include \"uint256.h\"\n+#include \"utilstrencodings.h\"\n #ifdef ENABLE_WALLET\n #include \"wallet/wallet.h\"\n #endif"
      },
      {
        "sha": "da296a046144ef5c28295c3ec0bca10a3efa3b25",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd793f499254600efa468938cef9baa28ac81b0/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd793f499254600efa468938cef9baa28ac81b0/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=9dd793f499254600efa468938cef9baa28ac81b0",
        "patch": "@@ -2,12 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-//\n // Unit tests for denial-of-service detection/prevention code\n-//\n-\n-\n \n+#include \"chainparams.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n #include \"net.h\""
      },
      {
        "sha": "fe9fa86aba93c26d25afcebadb0a848222f71706",
        "filename": "src/test/checkblock_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd793f499254600efa468938cef9baa28ac81b0/src/test/checkblock_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd793f499254600efa468938cef9baa28ac81b0/src/test/checkblock_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkblock_tests.cpp?ref=9dd793f499254600efa468938cef9baa28ac81b0",
        "patch": "@@ -5,6 +5,7 @@\n #include \"clientversion.h\"\n #include \"consensus/validation.h\"\n #include \"main.h\"\n+#include \"primitives/block.h\"\n #include \"test/test_bitcoin.h\"\n #include \"utiltime.h\"\n "
      },
      {
        "sha": "ad79a558c269cf6052460a69152901d6abb1eab8",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd793f499254600efa468938cef9baa28ac81b0/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd793f499254600efa468938cef9baa28ac81b0/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=9dd793f499254600efa468938cef9baa28ac81b0",
        "patch": "@@ -2,12 +2,17 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"chainparams.h\"\n+#include \"coins.h\"\n #include \"consensus/validation.h\"\n #include \"main.h\"\n #include \"miner.h\"\n #include \"pubkey.h\"\n+#include \"script/standard.h\"\n+#include \"txmempool.h\"\n #include \"uint256.h\"\n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n \n #include \"test/test_bitcoin.h\"\n "
      },
      {
        "sha": "992f9c971a9b1558e7b6e4647c1b859e9368e3e3",
        "filename": "src/test/pow_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd793f499254600efa468938cef9baa28ac81b0/src/test/pow_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd793f499254600efa468938cef9baa28ac81b0/src/test/pow_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pow_tests.cpp?ref=9dd793f499254600efa468938cef9baa28ac81b0",
        "patch": "@@ -2,8 +2,11 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"chain.h\"\n+#include \"chainparams.h\"\n #include \"main.h\"\n #include \"pow.h\"\n+#include \"random.h\"\n #include \"util.h\"\n #include \"test/test_bitcoin.h\"\n "
      },
      {
        "sha": "daf3d89890778e8cfd4308012ae97f346f5b7792",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd793f499254600efa468938cef9baa28ac81b0/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd793f499254600efa468938cef9baa28ac81b0/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=9dd793f499254600efa468938cef9baa28ac81b0",
        "patch": "@@ -13,6 +13,7 @@\n #include \"script/script_error.h\"\n #include \"script/sign.h\"\n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n #include \"test/test_bitcoin.h\"\n \n #if defined(HAVE_CONSENSUS_LIB)"
      },
      {
        "sha": "9fc227cfd7a59895650b2d5ca119557d3f987834",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd793f499254600efa468938cef9baa28ac81b0/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd793f499254600efa468938cef9baa28ac81b0/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=9dd793f499254600efa468938cef9baa28ac81b0",
        "patch": "@@ -4,13 +4,16 @@\n \n #include \"consensus/validation.h\"\n #include \"data/sighash.json.h\"\n+#include \"hash.h\"\n #include \"main.h\"\n #include \"random.h\"\n #include \"script/interpreter.h\"\n #include \"script/script.h\"\n #include \"serialize.h\"\n+#include \"streams.h\"\n #include \"test/test_bitcoin.h\"\n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n #include \"version.h\"\n \n #include <iostream>"
      },
      {
        "sha": "8a061b0deacf0146e256c2aede0e93d2e5f1d2b4",
        "filename": "src/test/skiplist_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd793f499254600efa468938cef9baa28ac81b0/src/test/skiplist_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd793f499254600efa468938cef9baa28ac81b0/src/test/skiplist_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/skiplist_tests.cpp?ref=9dd793f499254600efa468938cef9baa28ac81b0",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"chain.h\"\n #include \"main.h\"\n #include \"random.h\"\n #include \"util.h\""
      },
      {
        "sha": "ba616365f2767dcddff6bef76eb0bebf02a8f58f",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd793f499254600efa468938cef9baa28ac81b0/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd793f499254600efa468938cef9baa28ac81b0/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=9dd793f499254600efa468938cef9baa28ac81b0",
        "patch": "@@ -6,6 +6,7 @@\n \n #include \"test_bitcoin.h\"\n \n+#include \"chainparams.h\"\n #include \"key.h\"\n #include \"main.h\"\n #include \"random.h\""
      },
      {
        "sha": "5f1af1f943042db1671c7639a218e43c94898d56",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd793f499254600efa468938cef9baa28ac81b0/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd793f499254600efa468938cef9baa28ac81b0/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=9dd793f499254600efa468938cef9baa28ac81b0",
        "patch": "@@ -15,6 +15,7 @@\n #include \"policy/policy.h\"\n #include \"script/script.h\"\n #include \"script/script_error.h\"\n+#include \"utilstrencodings.h\"\n \n #include <map>\n #include <string>"
      },
      {
        "sha": "21ecd652388584e0b4292fa4430fff6013b70e7b",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd793f499254600efa468938cef9baa28ac81b0/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd793f499254600efa468938cef9baa28ac81b0/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=9dd793f499254600efa468938cef9baa28ac81b0",
        "patch": "@@ -5,6 +5,7 @@\n \n #include \"txdb.h\"\n \n+#include \"chain.h\"\n #include \"chainparams.h\"\n #include \"hash.h\"\n #include \"main.h\""
      },
      {
        "sha": "dbe36a2be1b86c12f41555dcfde59a0cdf9b32c1",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd793f499254600efa468938cef9baa28ac81b0/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd793f499254600efa468938cef9baa28ac81b0/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=9dd793f499254600efa468938cef9baa28ac81b0",
        "patch": "@@ -3,6 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"base58.h\"\n+#include \"chain.h\"\n #include \"rpcserver.h\"\n #include \"init.h\"\n #include \"main.h\"\n@@ -21,6 +22,8 @@\n \n #include \"univalue/univalue.h\"\n \n+#include <boost/foreach.hpp>\n+\n using namespace std;\n \n void EnsureWalletIsUnlocked();"
      },
      {
        "sha": "101fb53762eb8a49089fd8a6a0d1369ae262be06",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd793f499254600efa468938cef9baa28ac81b0/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd793f499254600efa468938cef9baa28ac81b0/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=9dd793f499254600efa468938cef9baa28ac81b0",
        "patch": "@@ -5,6 +5,7 @@\n \n #include \"amount.h\"\n #include \"base58.h\"\n+#include \"chain.h\"\n #include \"core_io.h\"\n #include \"init.h\"\n #include \"main.h\""
      },
      {
        "sha": "5a52d931dcd9f35d9bbc6ec917c98ca8f075f045",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd793f499254600efa468938cef9baa28ac81b0/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd793f499254600efa468938cef9baa28ac81b0/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=9dd793f499254600efa468938cef9baa28ac81b0",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"base58.h\"\n #include \"checkpoints.h\"\n+#include \"chain.h\"\n #include \"coincontrol.h\"\n #include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n@@ -16,6 +17,7 @@\n #include \"script/script.h\"\n #include \"script/sign.h\"\n #include \"timedata.h\"\n+#include \"txmempool.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n "
      },
      {
        "sha": "de3232e56febf63b4cd98d32556609f1f2a74ab6",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd793f499254600efa468938cef9baa28ac81b0/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd793f499254600efa468938cef9baa28ac81b0/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=9dd793f499254600efa468938cef9baa28ac81b0",
        "patch": "@@ -11,6 +11,7 @@\n #include \"keystore.h\"\n #include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n+#include \"streams.h\"\n #include \"tinyformat.h\"\n #include \"ui_interface.h\"\n #include \"utilstrencodings.h\""
      },
      {
        "sha": "9619410e77023b911168854def6fd0f2959f326d",
        "filename": "src/wallet/wallet_ismine.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd793f499254600efa468938cef9baa28ac81b0/src/wallet/wallet_ismine.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd793f499254600efa468938cef9baa28ac81b0/src/wallet/wallet_ismine.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet_ismine.h?ref=9dd793f499254600efa468938cef9baa28ac81b0",
        "patch": "@@ -9,6 +9,8 @@\n #include \"key.h\"\n #include \"script/standard.h\"\n \n+#include <stdint.h>\n+\n class CKeyStore;\n class CScript;\n "
      }
    ]
  },
  {
    "sha": "60c8bac77c6612b84e3496b2227a01058d720ecc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MGM4YmFjNzdjNjYxMmI4NGUzNDk2YjIyMjdhMDEwNThkNzIwZWNj",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-07-05T12:30:07Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-07-23T19:10:26Z"
      },
      "message": "Includes: Cleanup around net main and wallet\n\n-Move from .h to .cpp: in main, net and wallet\n-Remove unnecessary #include \"main.h\"\n-Cleanup some wallet files includes",
      "tree": {
        "sha": "81c2eb2843639b823626fb8c02514d02129874a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/81c2eb2843639b823626fb8c02514d02129874a9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/60c8bac77c6612b84e3496b2227a01058d720ecc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60c8bac77c6612b84e3496b2227a01058d720ecc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/60c8bac77c6612b84e3496b2227a01058d720ecc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60c8bac77c6612b84e3496b2227a01058d720ecc/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9dd793f499254600efa468938cef9baa28ac81b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9dd793f499254600efa468938cef9baa28ac81b0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9dd793f499254600efa468938cef9baa28ac81b0"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 26,
      "deletions": 42
    },
    "files": [
      {
        "sha": "39bb301f4419b1f1a3c8e594eee36919a60c8613",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60c8bac77c6612b84e3496b2227a01058d720ecc/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60c8bac77c6612b84e3496b2227a01058d720ecc/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=60c8bac77c6612b84e3496b2227a01058d720ecc",
        "patch": "@@ -7,7 +7,6 @@\n #include \"clientversion.h\"\n #include \"rpcserver.h\"\n #include \"init.h\"\n-#include \"main.h\"\n #include \"noui.h\"\n #include \"scheduler.h\"\n #include \"util.h\""
      },
      {
        "sha": "cf0002cc3534bc50bbd51362f53856d0310762ab",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60c8bac77c6612b84e3496b2227a01058d720ecc/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60c8bac77c6612b84e3496b2227a01058d720ecc/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=60c8bac77c6612b84e3496b2227a01058d720ecc",
        "patch": "@@ -19,6 +19,12 @@\n #include \"net.h\"\n #include \"policy/policy.h\"\n #include \"pow.h\"\n+#include \"primitives/block.h\"\n+#include \"primitives/transaction.h\"\n+#include \"script/script.h\"\n+#include \"script/sigcache.h\"\n+#include \"script/standard.h\"\n+#include \"tinyformat.h\"\n #include \"txdb.h\"\n #include \"txmempool.h\"\n #include \"ui_interface.h\""
      },
      {
        "sha": "96ad54cda6e1b6f3f08d0f9ec1fad75de5057ba6",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 9,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60c8bac77c6612b84e3496b2227a01058d720ecc/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60c8bac77c6612b84e3496b2227a01058d720ecc/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=60c8bac77c6612b84e3496b2227a01058d720ecc",
        "patch": "@@ -12,19 +12,10 @@\n \n #include \"amount.h\"\n #include \"chain.h\"\n-#include \"chainparams.h\"\n #include \"coins.h\"\n #include \"net.h\"\n-#include \"primitives/block.h\"\n-#include \"primitives/transaction.h\"\n-#include \"script/script.h\"\n #include \"script/script_error.h\"\n-#include \"script/sigcache.h\"\n-#include \"script/standard.h\"\n #include \"sync.h\"\n-#include \"tinyformat.h\"\n-#include \"txmempool.h\"\n-#include \"uint256.h\"\n \n #include <algorithm>\n #include <exception>\n@@ -42,6 +33,7 @@ class CBlockTreeDB;\n class CBloomFilter;\n class CInv;\n class CScriptCheck;\n+class CTxMemPool;\n class CValidationInterface;\n class CValidationState;\n "
      },
      {
        "sha": "e9fd74db45cf1c386993bb7b79355f47b46f5935",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60c8bac77c6612b84e3496b2227a01058d720ecc/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60c8bac77c6612b84e3496b2227a01058d720ecc/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=60c8bac77c6612b84e3496b2227a01058d720ecc",
        "patch": "@@ -12,10 +12,12 @@\n #include \"addrman.h\"\n #include \"chainparams.h\"\n #include \"clientversion.h\"\n+#include \"crypto/common.h\"\n+#include \"hash.h\"\n #include \"primitives/transaction.h\"\n #include \"scheduler.h\"\n #include \"ui_interface.h\"\n-#include \"crypto/common.h\"\n+#include \"utilstrencodings.h\"\n \n #ifdef WIN32\n #include <string.h>"
      },
      {
        "sha": "658f586b12e9503c6b35660cb31308ec71efdf62",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60c8bac77c6612b84e3496b2227a01058d720ecc/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60c8bac77c6612b84e3496b2227a01058d720ecc/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=60c8bac77c6612b84e3496b2227a01058d720ecc",
        "patch": "@@ -8,7 +8,6 @@\n \n #include \"bloom.h\"\n #include \"compat.h\"\n-#include \"hash.h\"\n #include \"limitedmap.h\"\n #include \"mruset.h\"\n #include \"netbase.h\"\n@@ -17,7 +16,6 @@\n #include \"streams.h\"\n #include \"sync.h\"\n #include \"uint256.h\"\n-#include \"utilstrencodings.h\"\n \n #include <deque>\n #include <stdint.h>\n@@ -31,7 +29,6 @@\n #include <boost/signals2/signal.hpp>\n \n class CAddrMan;\n-class CBlockIndex;\n class CScheduler;\n class CNode;\n "
      },
      {
        "sha": "708d86391620a4134117cbdbf0ba365b51e87502",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60c8bac77c6612b84e3496b2227a01058d720ecc/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60c8bac77c6612b84e3496b2227a01058d720ecc/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=60c8bac77c6612b84e3496b2227a01058d720ecc",
        "patch": "@@ -25,7 +25,6 @@\n #endif\n \n #include \"init.h\"\n-#include \"main.h\"\n #include \"rpcserver.h\"\n #include \"scheduler.h\"\n #include \"ui_interface.h\""
      },
      {
        "sha": "41dc2ea77ec02ce3b319222ea1d13d72dc89d1d9",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60c8bac77c6612b84e3496b2227a01058d720ecc/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60c8bac77c6612b84e3496b2227a01058d720ecc/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=60c8bac77c6612b84e3496b2227a01058d720ecc",
        "patch": "@@ -11,7 +11,6 @@\n #include \"chainparams.h\"\n #include \"checkpoints.h\"\n #include \"clientversion.h\"\n-#include \"main.h\"\n #include \"net.h\"\n #include \"ui_interface.h\"\n #include \"util.h\""
      },
      {
        "sha": "934d62d5f7630f2b3b6fe474b93fd2621f2b5cd9",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60c8bac77c6612b84e3496b2227a01058d720ecc/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60c8bac77c6612b84e3496b2227a01058d720ecc/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=60c8bac77c6612b84e3496b2227a01058d720ecc",
        "patch": "@@ -15,7 +15,7 @@\n \n #include \"coincontrol.h\"\n #include \"init.h\"\n-#include \"main.h\"\n+#include \"main.h\" // For minRelayTxFee\n #include \"wallet/wallet.h\"\n \n #include <boost/assign/list_of.hpp> // for 'map_list_of()'"
      },
      {
        "sha": "550dbacf930e819a864067a770b452dd27031c37",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60c8bac77c6612b84e3496b2227a01058d720ecc/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60c8bac77c6612b84e3496b2227a01058d720ecc/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=60c8bac77c6612b84e3496b2227a01058d720ecc",
        "patch": "@@ -11,7 +11,7 @@\n \n #include \"primitives/transaction.h\"\n #include \"init.h\"\n-#include \"main.h\"\n+#include \"main.h\" // For minRelayTxFee\n #include \"protocol.h\"\n #include \"script/script.h\"\n #include \"script/standard.h\""
      },
      {
        "sha": "062c4540ee4f6c006e346be5c56e7fc4789dd6ce",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60c8bac77c6612b84e3496b2227a01058d720ecc/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60c8bac77c6612b84e3496b2227a01058d720ecc/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=60c8bac77c6612b84e3496b2227a01058d720ecc",
        "patch": "@@ -13,7 +13,7 @@\n #include \"guiutil.h\"\n #include \"optionsmodel.h\"\n \n-#include \"main.h\" // for MAX_SCRIPTCHECK_THREADS\n+#include \"main.h\" // for DEFAULT_SCRIPTCHECK_THREADS and MAX_SCRIPTCHECK_THREADS\n #include \"netbase.h\"\n #include \"txdb.h\" // for -dbcache defaults\n "
      },
      {
        "sha": "6191edc44c0d738fc37562b3c2f9fc0a91fe019e",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60c8bac77c6612b84e3496b2227a01058d720ecc/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60c8bac77c6612b84e3496b2227a01058d720ecc/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=60c8bac77c6612b84e3496b2227a01058d720ecc",
        "patch": "@@ -13,7 +13,7 @@\n \n #include \"amount.h\"\n #include \"init.h\"\n-#include \"main.h\"\n+#include \"main.h\" // For DEFAULT_SCRIPTCHECK_THREADS\n #include \"net.h\"\n #include \"txdb.h\" // for -dbcache defaults\n "
      },
      {
        "sha": "0827d99125efc833fba12b161e8bb8a1c0ead24a",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60c8bac77c6612b84e3496b2227a01058d720ecc/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60c8bac77c6612b84e3496b2227a01058d720ecc/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=60c8bac77c6612b84e3496b2227a01058d720ecc",
        "patch": "@@ -10,7 +10,7 @@\n \n #include \"base58.h\"\n #include \"chainparams.h\"\n-#include \"main.h\"\n+#include \"main.h\" // For minRelayTxFee\n #include \"ui_interface.h\"\n #include \"util.h\"\n #include \"wallet/wallet.h\""
      },
      {
        "sha": "5f149ea8735a8f8ba0033d67c4995e690677697d",
        "filename": "src/qt/peertablemodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60c8bac77c6612b84e3496b2227a01058d720ecc/src/qt/peertablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60c8bac77c6612b84e3496b2227a01058d720ecc/src/qt/peertablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.h?ref=60c8bac77c6612b84e3496b2227a01058d720ecc",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_QT_PEERTABLEMODEL_H\n #define BITCOIN_QT_PEERTABLEMODEL_H\n \n-#include \"main.h\"\n+#include \"main.h\" // For CNodeStateStats\n #include \"net.h\"\n \n #include <QAbstractTableModel>"
      },
      {
        "sha": "b2717558cabb7ebada3b46fce8adea5a541a299f",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60c8bac77c6612b84e3496b2227a01058d720ecc/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60c8bac77c6612b84e3496b2227a01058d720ecc/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=60c8bac77c6612b84e3496b2227a01058d720ecc",
        "patch": "@@ -10,7 +10,6 @@\n #include \"peertablemodel.h\"\n #include \"scicon.h\"\n \n-#include \"main.h\"\n #include \"chainparams.h\"\n #include \"rpcserver.h\"\n #include \"rpcclient.h\""
      },
      {
        "sha": "2407fcbc4a7c0aab4af1a499945372fd20859c6e",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60c8bac77c6612b84e3496b2227a01058d720ecc/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60c8bac77c6612b84e3496b2227a01058d720ecc/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=60c8bac77c6612b84e3496b2227a01058d720ecc",
        "patch": "@@ -17,7 +17,7 @@\n \n #include \"base58.h\"\n #include \"coincontrol.h\"\n-#include \"main.h\"\n+#include \"main.h\" // mempool and minRelayTxFee\n #include \"ui_interface.h\"\n #include \"txmempool.h\"\n #include \"wallet/wallet.h\""
      },
      {
        "sha": "b8d5606cc39c0a1300a5a9e69cd92d8a39152544",
        "filename": "src/test/alert_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60c8bac77c6612b84e3496b2227a01058d720ecc/src/test/alert_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60c8bac77c6612b84e3496b2227a01058d720ecc/src/test/alert_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/alert_tests.cpp?ref=60c8bac77c6612b84e3496b2227a01058d720ecc",
        "patch": "@@ -2,17 +2,14 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-//\n // Unit tests for alert system\n-//\n \n #include \"alert.h\"\n #include \"chain.h\"\n #include \"chainparams.h\"\n #include \"clientversion.h\"\n #include \"data/alertTests.raw.h\"\n-\n-#include \"main.h\"\n+#include \"main.h\" // For PartitionCheck\n #include \"serialize.h\"\n #include \"streams.h\"\n #include \"util.h\""
      },
      {
        "sha": "f7e24706170d49aca8b73cb664818e9776c90a99",
        "filename": "src/test/checkblock_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60c8bac77c6612b84e3496b2227a01058d720ecc/src/test/checkblock_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60c8bac77c6612b84e3496b2227a01058d720ecc/src/test/checkblock_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkblock_tests.cpp?ref=60c8bac77c6612b84e3496b2227a01058d720ecc",
        "patch": "@@ -4,7 +4,7 @@\n \n #include \"clientversion.h\"\n #include \"consensus/validation.h\"\n-#include \"main.h\"\n+#include \"main.h\" // For CheckBlock\n #include \"primitives/block.h\"\n #include \"test/test_bitcoin.h\"\n #include \"utiltime.h\""
      },
      {
        "sha": "2439689d7ff1396c37fe993574cb9d6cd51a5893",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60c8bac77c6612b84e3496b2227a01058d720ecc/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60c8bac77c6612b84e3496b2227a01058d720ecc/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=60c8bac77c6612b84e3496b2227a01058d720ecc",
        "patch": "@@ -2,7 +2,6 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"main.h\"\n #include \"txmempool.h\"\n #include \"util.h\"\n "
      },
      {
        "sha": "b6eb39bc3868e1eee720f07d7ef6df4baa785cbe",
        "filename": "src/test/pow_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60c8bac77c6612b84e3496b2227a01058d720ecc/src/test/pow_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60c8bac77c6612b84e3496b2227a01058d720ecc/src/test/pow_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pow_tests.cpp?ref=60c8bac77c6612b84e3496b2227a01058d720ecc",
        "patch": "@@ -4,7 +4,6 @@\n \n #include \"chain.h\"\n #include \"chainparams.h\"\n-#include \"main.h\"\n #include \"pow.h\"\n #include \"random.h\"\n #include \"util.h\""
      },
      {
        "sha": "37c046935f614533b8483ce04b402922766c555e",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60c8bac77c6612b84e3496b2227a01058d720ecc/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60c8bac77c6612b84e3496b2227a01058d720ecc/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=60c8bac77c6612b84e3496b2227a01058d720ecc",
        "patch": "@@ -8,7 +8,6 @@\n #include \"core_io.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n-#include \"main.h\"\n #include \"script/script.h\"\n #include \"script/script_error.h\"\n #include \"script/sign.h\""
      },
      {
        "sha": "4b964615628cdcc9e06321ab2e6ab413e817ed7b",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60c8bac77c6612b84e3496b2227a01058d720ecc/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60c8bac77c6612b84e3496b2227a01058d720ecc/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=60c8bac77c6612b84e3496b2227a01058d720ecc",
        "patch": "@@ -5,7 +5,7 @@\n #include \"consensus/validation.h\"\n #include \"data/sighash.json.h\"\n #include \"hash.h\"\n-#include \"main.h\"\n+#include \"main.h\" // For CheckTransaction\n #include \"random.h\"\n #include \"script/interpreter.h\"\n #include \"script/script.h\""
      },
      {
        "sha": "a904e3862fe78393b8ac7b7c5257f4319dad38a9",
        "filename": "src/test/skiplist_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60c8bac77c6612b84e3496b2227a01058d720ecc/src/test/skiplist_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60c8bac77c6612b84e3496b2227a01058d720ecc/src/test/skiplist_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/skiplist_tests.cpp?ref=60c8bac77c6612b84e3496b2227a01058d720ecc",
        "patch": "@@ -3,7 +3,6 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"chain.h\"\n-#include \"main.h\"\n #include \"random.h\"\n #include \"util.h\"\n #include \"test/test_bitcoin.h\""
      },
      {
        "sha": "e70ebddc2f6865aada490792ebb77625eb52e904",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60c8bac77c6612b84e3496b2227a01058d720ecc/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60c8bac77c6612b84e3496b2227a01058d720ecc/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=60c8bac77c6612b84e3496b2227a01058d720ecc",
        "patch": "@@ -11,7 +11,7 @@\n #include \"core_io.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n-#include \"main.h\"\n+#include \"main.h\" // For CheckTransaction\n #include \"policy/policy.h\"\n #include \"script/script.h\"\n #include \"script/script_error.h\""
      },
      {
        "sha": "58b9ccc078c50f81802090f0f2ef6f2d1b22241a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60c8bac77c6612b84e3496b2227a01058d720ecc/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60c8bac77c6612b84e3496b2227a01058d720ecc/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=60c8bac77c6612b84e3496b2227a01058d720ecc",
        "patch": "@@ -11,9 +11,13 @@\n #include \"coincontrol.h\"\n #include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n+#include \"key.h\"\n+#include \"keystore.h\"\n #include \"main.h\"\n #include \"net.h\"\n #include \"policy/policy.h\"\n+#include \"primitives/block.h\"\n+#include \"primitives/transaction.h\"\n #include \"script/script.h\"\n #include \"script/sign.h\"\n #include \"timedata.h\""
      },
      {
        "sha": "ae007e4673a202e00916bef5cb3f81e49aa00af9",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60c8bac77c6612b84e3496b2227a01058d720ecc/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60c8bac77c6612b84e3496b2227a01058d720ecc/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=60c8bac77c6612b84e3496b2227a01058d720ecc",
        "patch": "@@ -7,10 +7,6 @@\n #define BITCOIN_WALLET_WALLET_H\n \n #include \"amount.h\"\n-#include \"key.h\"\n-#include \"keystore.h\"\n-#include \"primitives/block.h\"\n-#include \"primitives/transaction.h\"\n #include \"streams.h\"\n #include \"tinyformat.h\"\n #include \"ui_interface.h\""
      },
      {
        "sha": "7846565f8dfaafb1fe25bc1128ab9b973ee60cb2",
        "filename": "src/wallet/wallet_ismine.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60c8bac77c6612b84e3496b2227a01058d720ecc/src/wallet/wallet_ismine.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60c8bac77c6612b84e3496b2227a01058d720ecc/src/wallet/wallet_ismine.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet_ismine.h?ref=60c8bac77c6612b84e3496b2227a01058d720ecc",
        "patch": "@@ -6,7 +6,6 @@\n #ifndef BITCOIN_WALLET_WALLET_ISMINE_H\n #define BITCOIN_WALLET_WALLET_ISMINE_H\n \n-#include \"key.h\"\n #include \"script/standard.h\"\n \n #include <stdint.h>"
      },
      {
        "sha": "c1eb1845814996179a0e4b49bda4c97385d86def",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60c8bac77c6612b84e3496b2227a01058d720ecc/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60c8bac77c6612b84e3496b2227a01058d720ecc/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=60c8bac77c6612b84e3496b2227a01058d720ecc",
        "patch": "@@ -7,7 +7,7 @@\n \n #include \"base58.h\"\n #include \"consensus/validation.h\"\n-#include \"main.h\"\n+#include \"main.h\" // For CheckTransaction\n #include \"protocol.h\"\n #include \"serialize.h\"\n #include \"sync.h\""
      },
      {
        "sha": "270f826aed4467e959aee8b90439ec32b85a91ae",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60c8bac77c6612b84e3496b2227a01058d720ecc/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60c8bac77c6612b84e3496b2227a01058d720ecc/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=60c8bac77c6612b84e3496b2227a01058d720ecc",
        "patch": "@@ -9,7 +9,6 @@\n #include \"amount.h\"\n #include \"wallet/db.h\"\n #include \"key.h\"\n-#include \"keystore.h\"\n \n #include <list>\n #include <stdint.h>"
      }
    ]
  },
  {
    "sha": "fe997dfd121e3d82464908940753b77ebf61a10d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZTk5N2RmZDEyMWUzZDgyNDY0OTA4OTQwNzUzYjc3ZWJmNjFhMTBk",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-07-23T21:10:15Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-07-24T01:10:35Z"
      },
      "message": "build: fix building against qt5.4/5.5",
      "tree": {
        "sha": "3cc36ad97b8a3cb70e23151ca7cbdc60897661c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3cc36ad97b8a3cb70e23151ca7cbdc60897661c4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fe997dfd121e3d82464908940753b77ebf61a10d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe997dfd121e3d82464908940753b77ebf61a10d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fe997dfd121e3d82464908940753b77ebf61a10d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe997dfd121e3d82464908940753b77ebf61a10d/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d2464dfee928cdd4194516e9bc8b541c22972ab9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2464dfee928cdd4194516e9bc8b541c22972ab9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d2464dfee928cdd4194516e9bc8b541c22972ab9"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 23,
      "deletions": 4
    },
    "files": [
      {
        "sha": "100b8653a84e73e9ee8d933bf28e3eb3e92986cb",
        "filename": "build-aux/m4/bitcoin_qt.m4",
        "status": "modified",
        "additions": 21,
        "deletions": 4,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe997dfd121e3d82464908940753b77ebf61a10d/build-aux/m4/bitcoin_qt.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe997dfd121e3d82464908940753b77ebf61a10d/build-aux/m4/bitcoin_qt.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_qt.m4?ref=fe997dfd121e3d82464908940753b77ebf61a10d",
        "patch": "@@ -106,24 +106,40 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n   dnl results to QT_LIBS.\n   BITCOIN_QT_CHECK([\n   TEMP_CPPFLAGS=$CPPFLAGS\n-  CPPFLAGS=$QT_INCLUDES\n+  CPPFLAGS=\"$QT_INCLUDES $CPPFLAGS\"\n   if test x$bitcoin_qt_got_major_vers = x5; then\n     _BITCOIN_QT_IS_STATIC\n     if test x$bitcoin_cv_static_qt = xyes; then\n       AC_DEFINE(QT_STATICPLUGIN, 1, [Define this symbol if qt plugins are static])\n       if test x$qt_plugin_path != x; then\n-        QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/accessible\"\n         QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/platforms\"\n       fi\n       if test x$use_pkgconfig = xyes; then\n         PKG_CHECK_MODULES([QTPLATFORM], [Qt5PlatformSupport], [QT_LIBS=\"$QTPLATFORM_LIBS $QT_LIBS\"])\n       fi\n-      _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(AccessibleFactory)], [-lqtaccessiblewidgets])\n+      AC_CACHE_CHECK(for Qt < 5.4, bitcoin_cv_need_acc_widget,[AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n+          [[#include <QtCore>]],[[\n+          #if QT_VERSION >= 0x050400\n+          choke;\n+          #endif\n+          ]])],\n+        [bitcoin_cv_need_acc_widget=yes],\n+        [bitcoin_cv_need_acc_widget=no])\n+      ])\n+      if test \"x$bitcoin_cv_need_acc_widget\" = \"xyes\"; then\n+        if test x$qt_plugin_path != x; then\n+          QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/accessible\"\n+        fi\n+        _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(AccessibleFactory)], [-lqtaccessiblewidgets])\n+      fi\n       if test x$TARGET_OS = xwindows; then\n         _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(QWindowsIntegrationPlugin)],[-lqwindows])\n         AC_DEFINE(QT_QPA_PLATFORM_WINDOWS, 1, [Define this symbol if the qt platform is windows])\n       elif test x$TARGET_OS = xlinux; then\n         PKG_CHECK_MODULES([X11XCB], [x11-xcb], [QT_LIBS=\"$X11XCB_LIBS $QT_LIBS\"])\n+        if ${PKG_CONFIG} --exists \"Qt5Core >= 5.5\" 2>/dev/null; then\n+          PKG_CHECK_MODULES([QTXCBQPA], [Qt5XcbQpa], [QT_LIBS=\"$QTXCBQPA_LIBS $QT_LIBS\"])\n+        fi\n         _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(QXcbIntegrationPlugin)],[-lqxcb -lxcb-static])\n         AC_DEFINE(QT_QPA_PLATFORM_XCB, 1, [Define this symbol if the qt platform is xcb])\n       elif test x$TARGET_OS = xdarwin; then\n@@ -382,7 +398,8 @@ AC_DEFUN([_BITCOIN_QT_FIND_LIBS_WITHOUT_PKGCONFIG],[\n   BITCOIN_QT_CHECK(AC_CHECK_LIB([z] ,[main],,AC_MSG_WARN([zlib not found. Assuming qt has it built-in])))\n   BITCOIN_QT_CHECK(AC_CHECK_LIB([png] ,[main],,AC_MSG_WARN([libpng not found. Assuming qt has it built-in])))\n   BITCOIN_QT_CHECK(AC_CHECK_LIB([jpeg] ,[main],,AC_MSG_WARN([libjpeg not found. Assuming qt has it built-in])))\n-  BITCOIN_QT_CHECK(AC_CHECK_LIB([pcre16] ,[main],,AC_MSG_WARN([libpcre16 not found. Assuming qt has it built-in])))\n+  BITCOIN_QT_CHECK(AC_SEARCH_LIBS([pcre16_exec], [qtpcre pcre16],,AC_MSG_WARN([libpcre16 not found. Assuming qt has it built-in])))\n+  BITCOIN_QT_CHECK(AC_SEARCH_LIBS([hb_ot_tags_from_script] ,[qtharfbuzzng harfbuzz],,AC_MSG_WARN([libharfbuzz not found. Assuming qt has it built-in or support is disabled])))\n   BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Core]   ,[main],,BITCOIN_QT_FAIL(lib$QT_LIB_PREFIXCore not found)))\n   BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Gui]    ,[main],,BITCOIN_QT_FAIL(lib$QT_LIB_PREFIXGui not found)))\n   BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Network],[main],,BITCOIN_QT_FAIL(lib$QT_LIB_PREFIXNetwork not found)))"
      },
      {
        "sha": "8a78533420cae831178cc3bfb4b04ad1b60c61bc",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe997dfd121e3d82464908940753b77ebf61a10d/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe997dfd121e3d82464908940753b77ebf61a10d/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=fe997dfd121e3d82464908940753b77ebf61a10d",
        "patch": "@@ -59,7 +59,9 @@ Q_IMPORT_PLUGIN(qtwcodecs)\n Q_IMPORT_PLUGIN(qkrcodecs)\n Q_IMPORT_PLUGIN(qtaccessiblewidgets)\n #else\n+#if QT_VERSION < 0x050400\n Q_IMPORT_PLUGIN(AccessibleFactory)\n+#endif\n #if defined(QT_QPA_PLATFORM_XCB)\n Q_IMPORT_PLUGIN(QXcbIntegrationPlugin);\n #elif defined(QT_QPA_PLATFORM_WINDOWS)"
      }
    ]
  },
  {
    "sha": "5189fe3d88b7d0154758379a877533fe364dec87",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MTg5ZmUzZDg4YjdkMDE1NDc1ODM3OWE4Nzc1MzNmZTM2NGRlYzg3",
    "commit": {
      "author": {
        "name": "Jacob Welsh",
        "email": "jacob@welshcomputing.com",
        "date": "2015-06-12T17:49:47Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-07-24T01:10:35Z"
      },
      "message": "depends: split qt config options to separate lines\n\nHelps ease of reading and comparison. Removed some duplicates.",
      "tree": {
        "sha": "173d4fd0e5fd90d269a4675ce9bbfd5c5da617dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/173d4fd0e5fd90d269a4675ce9bbfd5c5da617dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5189fe3d88b7d0154758379a877533fe364dec87",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5189fe3d88b7d0154758379a877533fe364dec87",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5189fe3d88b7d0154758379a877533fe364dec87",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5189fe3d88b7d0154758379a877533fe364dec87/comments",
    "author": {
      "login": "welshjf",
      "id": 7895696,
      "node_id": "MDQ6VXNlcjc4OTU2OTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7895696?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/welshjf",
      "html_url": "https://github.com/welshjf",
      "followers_url": "https://api.github.com/users/welshjf/followers",
      "following_url": "https://api.github.com/users/welshjf/following{/other_user}",
      "gists_url": "https://api.github.com/users/welshjf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/welshjf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/welshjf/subscriptions",
      "organizations_url": "https://api.github.com/users/welshjf/orgs",
      "repos_url": "https://api.github.com/users/welshjf/repos",
      "events_url": "https://api.github.com/users/welshjf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/welshjf/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fe997dfd121e3d82464908940753b77ebf61a10d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe997dfd121e3d82464908940753b77ebf61a10d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fe997dfd121e3d82464908940753b77ebf61a10d"
      }
    ],
    "stats": {
      "total": 97,
      "additions": 76,
      "deletions": 21
    },
    "files": [
      {
        "sha": "53e3f80ff309b45d70f6b928fcff429858fb3e1f",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 76,
        "deletions": 21,
        "changes": 97,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5189fe3d88b7d0154758379a877533fe364dec87/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5189fe3d88b7d0154758379a877533fe364dec87/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=5189fe3d88b7d0154758379a877533fe364dec87",
        "patch": "@@ -12,32 +12,87 @@ $(package)_patches=mac-qmake.conf fix-xcb-include-order.patch qt5-tablet-osx.pat\n define $(package)_set_vars\n $(package)_config_opts_release = -release\n $(package)_config_opts_debug   = -debug\n-$(package)_config_opts += -opensource -confirm-license -no-audio-backend -no-sql-tds -no-glib -no-icu\n-$(package)_config_opts += -no-cups -no-iconv -no-gif -no-audio-backend -no-freetype\n-$(package)_config_opts += -no-sql-sqlite -no-nis -no-cups -no-iconv -no-pch\n-$(package)_config_opts += -no-gif -no-feature-style-plastique\n-$(package)_config_opts += -no-qml-debug -no-pch -no-nis -nomake examples -nomake tests\n-$(package)_config_opts += -no-feature-style-cde -no-feature-style-s60 -no-feature-style-motif\n-$(package)_config_opts += -no-feature-style-windowsmobile -no-feature-style-windowsce\n+$(package)_config_opts += -opensource -confirm-license\n+$(package)_config_opts += -no-audio-backend\n+$(package)_config_opts += -no-glib\n+$(package)_config_opts += -no-icu\n+$(package)_config_opts += -no-cups\n+$(package)_config_opts += -no-iconv\n+$(package)_config_opts += -no-gif\n+$(package)_config_opts += -no-freetype\n+$(package)_config_opts += -no-nis\n+$(package)_config_opts += -no-pch\n+$(package)_config_opts += -no-feature-style-plastique\n+$(package)_config_opts += -no-qml-debug\n+$(package)_config_opts += -nomake examples\n+$(package)_config_opts += -nomake tests\n+$(package)_config_opts += -no-feature-style-cde\n+$(package)_config_opts += -no-feature-style-s60\n+$(package)_config_opts += -no-feature-style-motif\n+$(package)_config_opts += -no-feature-style-windowsmobile\n+$(package)_config_opts += -no-feature-style-windowsce\n $(package)_config_opts += -no-feature-style-cleanlooks\n-$(package)_config_opts += -no-sql-db2 -no-sql-ibase -no-sql-oci -no-sql-tds -no-sql-mysql\n-$(package)_config_opts += -no-sql-odbc -no-sql-psql -no-sql-sqlite -no-sql-sqlite2\n-$(package)_config_opts += -skip qtsvg -skip qtwebkit -skip qtwebkit-examples -skip qtserialport\n-$(package)_config_opts += -skip qtdeclarative -skip qtmultimedia -skip qtimageformats -skip qtx11extras\n-$(package)_config_opts += -skip qtlocation -skip qtsensors -skip qtquick1 -skip qtxmlpatterns\n-$(package)_config_opts += -skip qtquickcontrols -skip qtactiveqt -skip qtconnectivity -skip qtmacextras\n-$(package)_config_opts += -skip qtwinextras -skip qtxmlpatterns -skip qtscript -skip qtdoc\n-\n-$(package)_config_opts += -prefix $(host_prefix) -bindir $(build_prefix)/bin\n-$(package)_config_opts += -no-c++11 -openssl-linked  -v -static -silent -pkg-config\n-$(package)_config_opts += -qt-libpng -qt-libjpeg -qt-zlib -qt-pcre\n+$(package)_config_opts += -no-sql-db2\n+$(package)_config_opts += -no-sql-ibase\n+$(package)_config_opts += -no-sql-oci\n+$(package)_config_opts += -no-sql-tds\n+$(package)_config_opts += -no-sql-mysql\n+$(package)_config_opts += -no-sql-odbc\n+$(package)_config_opts += -no-sql-psql\n+$(package)_config_opts += -no-sql-sqlite\n+$(package)_config_opts += -no-sql-sqlite2\n+$(package)_config_opts += -skip qtsvg\n+$(package)_config_opts += -skip qtwebkit\n+$(package)_config_opts += -skip qtwebkit-examples\n+$(package)_config_opts += -skip qtserialport\n+$(package)_config_opts += -skip qtdeclarative\n+$(package)_config_opts += -skip qtmultimedia\n+$(package)_config_opts += -skip qtimageformats\n+$(package)_config_opts += -skip qtx11extras\n+$(package)_config_opts += -skip qtlocation\n+$(package)_config_opts += -skip qtsensors\n+$(package)_config_opts += -skip qtquick1\n+$(package)_config_opts += -skip qtquickcontrols\n+$(package)_config_opts += -skip qtactiveqt\n+$(package)_config_opts += -skip qtconnectivity\n+$(package)_config_opts += -skip qtmacextras\n+$(package)_config_opts += -skip qtwinextras\n+$(package)_config_opts += -skip qtxmlpatterns\n+$(package)_config_opts += -skip qtscript\n+$(package)_config_opts += -skip qtdoc\n+$(package)_config_opts += -prefix $(host_prefix)\n+$(package)_config_opts += -bindir $(build_prefix)/bin\n+$(package)_config_opts += -no-c++11\n+$(package)_config_opts += -openssl-linked\n+$(package)_config_opts += -v\n+$(package)_config_opts += -static\n+$(package)_config_opts += -silent\n+$(package)_config_opts += -pkg-config\n+$(package)_config_opts += -qt-libpng\n+$(package)_config_opts += -qt-libjpeg\n+$(package)_config_opts += -qt-zlib\n+$(package)_config_opts += -qt-pcre\n \n ifneq ($(build_os),darwin)\n-$(package)_config_opts_darwin = -xplatform macx-clang-linux -device-option MAC_SDK_PATH=$(OSX_SDK) -device-option CROSS_COMPILE=\"$(host)-\"\n-$(package)_config_opts_darwin += -device-option MAC_MIN_VERSION=$(OSX_MIN_VERSION) -device-option MAC_TARGET=$(host) -device-option MAC_LD64_VERSION=$(LD64_VERSION)\n+$(package)_config_opts_darwin = -xplatform macx-clang-linux\n+$(package)_config_opts_darwin += -device-option MAC_SDK_PATH=$(OSX_SDK)\n+$(package)_config_opts_darwin += -device-option CROSS_COMPILE=\"$(host)-\"\n+$(package)_config_opts_darwin += -device-option MAC_MIN_VERSION=$(OSX_MIN_VERSION)\n+$(package)_config_opts_darwin += -device-option MAC_TARGET=$(host)\n+$(package)_config_opts_darwin += -device-option MAC_LD64_VERSION=$(LD64_VERSION)\n endif\n \n-$(package)_config_opts_linux  = -qt-xkbcommon -qt-xcb  -no-eglfs -no-linuxfb -system-freetype -no-sm -fontconfig -no-xinput2 -no-libudev -no-egl -no-opengl\n+$(package)_config_opts_linux  = -qt-xkbcommon\n+$(package)_config_opts_linux += -qt-xcb\n+$(package)_config_opts_linux += -no-eglfs\n+$(package)_config_opts_linux += -no-linuxfb\n+$(package)_config_opts_linux += -system-freetype\n+$(package)_config_opts_linux += -no-sm\n+$(package)_config_opts_linux += -fontconfig\n+$(package)_config_opts_linux += -no-xinput2\n+$(package)_config_opts_linux += -no-libudev\n+$(package)_config_opts_linux += -no-egl\n+$(package)_config_opts_linux += -no-opengl\n $(package)_config_opts_arm_linux  = -platform linux-g++ -xplatform $(host)\n $(package)_config_opts_i686_linux  = -xplatform linux-g++-32\n $(package)_config_opts_mingw32  = -no-opengl -xplatform win32-g++ -device-option CROSS_COMPILE=\"$(host)-\""
      }
    ]
  },
  {
    "sha": "ab67dd7818ff2d0910f3fd9bfca9412d85de4424",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYjY3ZGQ3ODE4ZmYyZDA5MTBmM2ZkOWJmY2E5NDEyZDg1ZGU0NDI0",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-07-23T23:07:03Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-07-24T01:10:35Z"
      },
      "message": "depends: bump to qt 5.5",
      "tree": {
        "sha": "199e3e18312f66923b3a652c25a52e0ddd1f7407",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/199e3e18312f66923b3a652c25a52e0ddd1f7407"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ab67dd7818ff2d0910f3fd9bfca9412d85de4424",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab67dd7818ff2d0910f3fd9bfca9412d85de4424",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ab67dd7818ff2d0910f3fd9bfca9412d85de4424",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab67dd7818ff2d0910f3fd9bfca9412d85de4424/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5189fe3d88b7d0154758379a877533fe364dec87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5189fe3d88b7d0154758379a877533fe364dec87",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5189fe3d88b7d0154758379a877533fe364dec87"
      }
    ],
    "stats": {
      "total": 221,
      "additions": 103,
      "deletions": 118
    },
    "files": [
      {
        "sha": "3828aa2bb9c29a784d8f3ffcdb402a2209654d52",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 44,
        "deletions": 36,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab67dd7818ff2d0910f3fd9bfca9412d85de4424/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab67dd7818ff2d0910f3fd9bfca9412d85de4424/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=ab67dd7818ff2d0910f3fd9bfca9412d85de4424",
        "patch": "@@ -1,13 +1,23 @@\n PACKAGE=qt\n-$(package)_version=5.2.1\n-$(package)_download_path=http://download.qt-project.org/official_releases/qt/5.2/$($(package)_version)/single\n-$(package)_file_name=$(package)-everywhere-opensource-src-$($(package)_version).tar.gz\n-$(package)_sha256_hash=84e924181d4ad6db00239d87250cc89868484a14841f77fb85ab1f1dbdcd7da1\n+$(package)_version=5.5.0\n+$(package)_download_path=http://download.qt.io/official_releases/qt/5.5/$($(package)_version)/submodules\n+$(package)_suffix=opensource-src-$($(package)_version).tar.gz\n+$(package)_file_name=qtbase-$($(package)_suffix)\n+$(package)_sha256_hash=7e82b1318f88e56a2a9376e069aa608d4fd96b48cb0e1b880ae658b0a1af0561\n $(package)_dependencies=openssl\n $(package)_linux_dependencies=freetype fontconfig dbus libxcb libX11 xproto libXext\n $(package)_build_subdir=qtbase\n $(package)_qt_libs=corelib network widgets gui plugins testlib\n-$(package)_patches=mac-qmake.conf fix-xcb-include-order.patch qt5-tablet-osx.patch qt5-yosemite.patch\n+$(package)_patches=mac-qmake.conf fix-xcb-include-order.patch mingw-uuidof.patch\n+\n+$(package)_qttranslations_file_name=qttranslations-$($(package)_suffix)\n+$(package)_qttranslations_sha256_hash=c4bd6db6e426965c6f8824c54e81f68bbd61e2bae1bcadc328c6e81c45902a0d\n+\n+$(package)_qttools_file_name=qttools-$($(package)_suffix)\n+$(package)_qttools_sha256_hash=d9e06bd19ecc86afba5e95d45a906d1bc1ad579aa70001e36143c1aaf695bdd6\n+\n+$(package)_extra_sources  = $($(package)_qttranslations_file_name)\n+$(package)_extra_sources += $($(package)_qttools_file_name)\n \n define $(package)_set_vars\n $(package)_config_opts_release = -release\n@@ -22,16 +32,11 @@ $(package)_config_opts += -no-gif\n $(package)_config_opts += -no-freetype\n $(package)_config_opts += -no-nis\n $(package)_config_opts += -no-pch\n-$(package)_config_opts += -no-feature-style-plastique\n $(package)_config_opts += -no-qml-debug\n $(package)_config_opts += -nomake examples\n $(package)_config_opts += -nomake tests\n-$(package)_config_opts += -no-feature-style-cde\n-$(package)_config_opts += -no-feature-style-s60\n-$(package)_config_opts += -no-feature-style-motif\n $(package)_config_opts += -no-feature-style-windowsmobile\n $(package)_config_opts += -no-feature-style-windowsce\n-$(package)_config_opts += -no-feature-style-cleanlooks\n $(package)_config_opts += -no-sql-db2\n $(package)_config_opts += -no-sql-ibase\n $(package)_config_opts += -no-sql-oci\n@@ -41,26 +46,8 @@ $(package)_config_opts += -no-sql-odbc\n $(package)_config_opts += -no-sql-psql\n $(package)_config_opts += -no-sql-sqlite\n $(package)_config_opts += -no-sql-sqlite2\n-$(package)_config_opts += -skip qtsvg\n-$(package)_config_opts += -skip qtwebkit\n-$(package)_config_opts += -skip qtwebkit-examples\n-$(package)_config_opts += -skip qtserialport\n-$(package)_config_opts += -skip qtdeclarative\n-$(package)_config_opts += -skip qtmultimedia\n-$(package)_config_opts += -skip qtimageformats\n-$(package)_config_opts += -skip qtx11extras\n-$(package)_config_opts += -skip qtlocation\n-$(package)_config_opts += -skip qtsensors\n-$(package)_config_opts += -skip qtquick1\n-$(package)_config_opts += -skip qtquickcontrols\n-$(package)_config_opts += -skip qtactiveqt\n-$(package)_config_opts += -skip qtconnectivity\n-$(package)_config_opts += -skip qtmacextras\n-$(package)_config_opts += -skip qtwinextras\n-$(package)_config_opts += -skip qtxmlpatterns\n-$(package)_config_opts += -skip qtscript\n-$(package)_config_opts += -skip qtdoc\n $(package)_config_opts += -prefix $(host_prefix)\n+$(package)_config_opts += -hostprefix $(build_prefix)\n $(package)_config_opts += -bindir $(build_prefix)/bin\n $(package)_config_opts += -no-c++11\n $(package)_config_opts += -openssl-linked\n@@ -76,6 +63,7 @@ $(package)_config_opts += -qt-pcre\n ifneq ($(build_os),darwin)\n $(package)_config_opts_darwin = -xplatform macx-clang-linux\n $(package)_config_opts_darwin += -device-option MAC_SDK_PATH=$(OSX_SDK)\n+$(package)_config_opts_darwin += -device-option MAC_SDK_VERSION=$(OSX_SDK_VERSION)\n $(package)_config_opts_darwin += -device-option CROSS_COMPILE=\"$(host)-\"\n $(package)_config_opts_darwin += -device-option MAC_MIN_VERSION=$(OSX_MIN_VERSION)\n $(package)_config_opts_darwin += -device-option MAC_TARGET=$(host)\n@@ -99,19 +87,41 @@ $(package)_config_opts_mingw32  = -no-opengl -xplatform win32-g++ -device-option\n $(package)_build_env  = QT_RCC_TEST=1\n endef\n \n+define $(package)_fetch_cmds\n+$(call fetch_file,$(package),$($(package)_download_path),$($(package)_download_file),$($(package)_file_name),$($(package)_sha256_hash)) && \\\n+$(call fetch_file,$(package),$($(package)_download_path),$($(package)_qttranslations_file_name),$($(package)_qttranslations_file_name),$($(package)_qttranslations_sha256_hash)) && \\\n+$(call fetch_file,$(package),$($(package)_download_path),$($(package)_qttools_file_name),$($(package)_qttools_file_name),$($(package)_qttools_sha256_hash))\n+endef\n+\n+define $(package)_extract_cmds\n+  mkdir -p $($(package)_extract_dir) && \\\n+  echo \"$($(package)_sha256_hash)  $($(package)_source)\" > $($(package)_extract_dir)/.$($(package)_file_name).hash && \\\n+  echo \"$($(package)_qttranslations_sha256_hash)  $($(package)_source_dir)/$($(package)_qttranslations_file_name)\" > $($(package)_extract_dir)/.$($(package)_file_name).hash && \\\n+  echo \"$($(package)_qttools_sha256_hash)  $($(package)_source_dir)/$($(package)_qttools_file_name)\" > $($(package)_extract_dir)/.$($(package)_file_name).hash && \\\n+  $(build_SHA256SUM) -c $($(package)_extract_dir)/.$($(package)_file_name).hash && \\\n+  mkdir qtbase && \\\n+  tar --strip-components=1 -xf $($(package)_source) -C qtbase && \\\n+  mkdir qttranslations && \\\n+  tar --strip-components=1 -xf $($(package)_source_dir)/$($(package)_qttranslations_file_name) -C qttranslations && \\\n+  mkdir qttools && \\\n+  tar --strip-components=1 -xf $($(package)_source_dir)/$($(package)_qttools_file_name) -C qttools\n+endef\n+\n define $(package)_preprocess_cmds\n   sed -i.old \"s|updateqm.commands = \\$$$$\\$$$$LRELEASE|updateqm.commands = $($(package)_extract_dir)/qttools/bin/lrelease|\" qttranslations/translations/translations.pro && \\\n   sed -i.old \"s/src_plugins.depends = src_sql src_xml src_network/src_plugins.depends = src_xml src_network/\" qtbase/src/src.pro && \\\n-  sed -i.old \"/XIproto.h/d\" qtbase/src/plugins/platforms/xcb/qxcbxsettings.cpp && \\\n+  sed -i.old \"s/PIDLIST_ABSOLUTE/ITEMIDLIST */\" qtbase/src/plugins/platforms/windows/qwindowscontext.h &&\\\n+  sed -i.old \"s/PIDLIST_ABSOLUTE/ITEMIDLIST */\" qtbase/src/plugins/platforms/windows/qwindowsdialoghelpers.cpp &&\\\n+  sed -i.old \"s/PCIDLIST_ABSOLUTE/const ITEMIDLIST */\" qtbase/src/plugins/platforms/windows/qwindowscontext.h &&\\\n+  sed -i.old \"s|X11/extensions/XIproto.h|X11/X.h|\" qtbase/src/plugins/platforms/xcb/qxcbxsettings.cpp && \\\n   sed -i.old 's/if \\[ \"$$$$XPLATFORM_MAC\" = \"yes\" \\]; then xspecvals=$$$$(macSDKify/if \\[ \"$$$$BUILD_ON_MAC\" = \"yes\" \\]; then xspecvals=$$$$(macSDKify/' qtbase/configure && \\\n   mkdir -p qtbase/mkspecs/macx-clang-linux &&\\\n   cp -f qtbase/mkspecs/macx-clang/Info.plist.lib qtbase/mkspecs/macx-clang-linux/ &&\\\n   cp -f qtbase/mkspecs/macx-clang/Info.plist.app qtbase/mkspecs/macx-clang-linux/ &&\\\n   cp -f qtbase/mkspecs/macx-clang/qplatformdefs.h qtbase/mkspecs/macx-clang-linux/ &&\\\n   cp -f $($(package)_patch_dir)/mac-qmake.conf qtbase/mkspecs/macx-clang-linux/qmake.conf && \\\n   patch -p1 < $($(package)_patch_dir)/fix-xcb-include-order.patch && \\\n-  patch -p1 < $($(package)_patch_dir)/qt5-tablet-osx.patch && \\\n-  patch -d qtbase -p1 < $($(package)_patch_dir)/qt5-yosemite.patch && \\\n+  patch -p1 < $($(package)_patch_dir)/mingw-uuidof.patch && \\\n   echo \"QMAKE_CFLAGS     += $($(package)_cflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n   echo \"QMAKE_CXXFLAGS   += $($(package)_cxxflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n   echo \"QMAKE_LFLAGS     += $($(package)_ldflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n@@ -124,7 +134,6 @@ define $(package)_config_cmds\n   export PKG_CONFIG_SYSROOT_DIR=/ && \\\n   export PKG_CONFIG_LIBDIR=$(host_prefix)/lib/pkgconfig && \\\n   export PKG_CONFIG_PATH=$(host_prefix)/share/pkgconfig  && \\\n-  export CPATH=$(host_prefix)/include && \\\n   ./configure $($(package)_config_opts) && \\\n   $(MAKE) sub-src-clean && \\\n   cd ../qttranslations && ../qtbase/bin/qmake qttranslations.pro -o Makefile && \\\n@@ -133,7 +142,6 @@ define $(package)_config_cmds\n endef\n \n define $(package)_build_cmds\n-  export CPATH=$(host_prefix)/include && \\\n   $(MAKE) -C src $(addprefix sub-,$($(package)_qt_libs)) && \\\n   $(MAKE) -C ../qttools/src/linguist/lrelease && \\\n   $(MAKE) -C ../qttranslations\n@@ -149,6 +157,6 @@ define $(package)_stage_cmds\n endef\n \n define $(package)_postprocess_cmds\n-  rm -rf mkspecs/ lib/cmake/ && \\\n-  rm lib/libQt5Bootstrap.a lib/lib*.la lib/*.prl plugins/*/*.prl\n+  rm -rf native/mkspecs/ native/lib/ lib/cmake/ && \\\n+  rm -f lib/lib*.la lib/*.prl plugins/*/*.prl\n endef"
      },
      {
        "sha": "ca0c0f37104162a99cf10b698547d4ad4efd11fc",
        "filename": "depends/patches/qt/fix-xcb-include-order.patch",
        "status": "modified",
        "additions": 11,
        "deletions": 9,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab67dd7818ff2d0910f3fd9bfca9412d85de4424/depends/patches/qt/fix-xcb-include-order.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab67dd7818ff2d0910f3fd9bfca9412d85de4424/depends/patches/qt/fix-xcb-include-order.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/fix-xcb-include-order.patch?ref=ab67dd7818ff2d0910f3fd9bfca9412d85de4424",
        "patch": "@@ -1,14 +1,15 @@\n---- old/qtbase/src/plugins/platforms/xcb/xcb-plugin.pro 2015-03-17 02:06:42.705930685 +0000\n-+++ new/qtbase/src/plugins/platforms/xcb/xcb-plugin.pro 2015-03-17 02:08:41.281926351 +0000\n-@@ -103,7 +103,6 @@\n+--- old/qtbase/src/plugins/platforms/xcb/xcb_qpa_lib.pro 2015-03-17 02:06:42.705930685 +0000\n++++ new/qtbase/src/plugins/platforms/xcb/xcb_qpa_lib.pro 2015-03-17 02:08:41.281926351 +0000\n+@@ -94,8 +94,6 @@\n \n  DEFINES += $$QMAKE_DEFINES_XCB\n  LIBS += $$QMAKE_LIBS_XCB\n -QMAKE_CXXFLAGS += $$QMAKE_CFLAGS_XCB\n+-QMAKE_CFLAGS += $$QMAKE_CFLAGS_XCB\n \n  CONFIG += qpa/genericunixfontdatabase\n \n-@@ -118,7 +117,8 @@\n+@@ -104,7 +102,8 @@\n  contains(QT_CONFIG, xcb-qt) {\n      DEFINES += XCB_USE_RENDER\n      XCB_DIR = ../../../3rdparty/xcb\n@@ -17,15 +18,16 @@\n +    QMAKE_CXXFLAGS += -I$$XCB_DIR/include -I$$XCB_DIR/sysinclude $$QMAKE_CFLAGS_XCB\n      LIBS += -lxcb -L$$OUT_PWD/xcb-static -lxcb-static\n  } else {\n-     LIBS += -lxcb -lxcb-image -lxcb-icccm -lxcb-sync -lxcb-xfixes -lxcb-shm -lxcb-randr\n+     LIBS += -lxcb -lxcb-image -lxcb-icccm -lxcb-sync -lxcb-xfixes -lxcb-shm -lxcb-randr -lxcb-shape -lxcb-keysyms\n --- old/qtbase/src/plugins/platforms/xcb/xcb-static/xcb-static.pro      2015-03-17 02:07:04.641929383 +0000\n +++ new/qtbase/src/plugins/platforms/xcb/xcb-static/xcb-static.pro      2015-03-17 02:10:15.485922059 +0000\n-@@ -8,7 +8,7 @@\n+@@ -8,7 +8,8 @@\n \n  XCB_DIR = ../../../../3rdparty/xcb\n \n -INCLUDEPATH += $$XCB_DIR/include $$XCB_DIR/include/xcb $$XCB_DIR/sysinclude\n-+QMAKE_CFLAGS += -I$$XCB_DIR/include -I$$XCB_DIR/include/xcb -I$$XCB_DIR/sysinclude $$QMAKE_CFLAGS_XCB\n++QMAKE_CFLAGS += -I$$XCB_DIR/include -I$$XCB_DIR/include/xcb -I$$XCB_DIR/sysinclude\n++QMAKE_CXXFLAGS += -I$$XCB_DIR/include -I$$XCB_DIR/include/xcb -I$$XCB_DIR/sysinclude\n \n- # ignore compiler warnings in 3rdparty code\n- QMAKE_CFLAGS_STATIC_LIB+=-w\n+ QMAKE_CXXFLAGS += $$QMAKE_CFLAGS_XCB\n+ QMAKE_CFLAGS += $$QMAKE_CFLAGS_XCB"
      },
      {
        "sha": "a6d0070cca6489848394febfa8a1b6e36925ba6c",
        "filename": "depends/patches/qt/mac-qmake.conf",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab67dd7818ff2d0910f3fd9bfca9412d85de4424/depends/patches/qt/mac-qmake.conf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab67dd7818ff2d0910f3fd9bfca9412d85de4424/depends/patches/qt/mac-qmake.conf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/mac-qmake.conf?ref=ab67dd7818ff2d0910f3fd9bfca9412d85de4424",
        "patch": "@@ -1,5 +1,6 @@\n MAKEFILE_GENERATOR = UNIX\n CONFIG += app_bundle incremental global_init_link_order lib_version_first plugin_no_soname absolute_library_soname\n+DEFINES += QT_NO_PRINTER QT_NO_PRINTDIALOG\n QMAKE_INCREMENTAL_STYLE = sublib\n include(../common/macx.conf)\n include(../common/gcc-base-mac.conf)\n@@ -10,8 +11,10 @@ QMAKE_XCODE_VERSION=4.3\n QMAKE_XCODE_DEVELOPER_PATH=/Developer\n QMAKE_MACOSX_DEPLOYMENT_TARGET = $${MAC_MIN_VERSION}\n QMAKE_MAC_SDK=macosx\n-QMAKE_MAC_SDK.macosx.path = $$QMAKE_MAC_SDK_PATH\n+QMAKE_MAC_SDK.macosx.path = $${MAC_SDK_PATH}\n QMAKE_MAC_SDK.macosx.platform_name = macosx\n+QMAKE_MAC_SDK.macosx.version = $${MAC_SDK_VERSION}\n+QMAKE_MAC_SDK.macosx.platform_path = /phony\n QMAKE_CFLAGS += -target $${MAC_TARGET}\n QMAKE_OBJECTIVE_CFLAGS += $$QMAKE_CFLAGS\n QMAKE_CXXFLAGS += $$QMAKE_CFLAGS"
      },
      {
        "sha": "975366e61229c891974f60f91a74e8c9f7a62d5a",
        "filename": "depends/patches/qt/mingw-uuidof.patch",
        "status": "added",
        "additions": 44,
        "deletions": 0,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab67dd7818ff2d0910f3fd9bfca9412d85de4424/depends/patches/qt/mingw-uuidof.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab67dd7818ff2d0910f3fd9bfca9412d85de4424/depends/patches/qt/mingw-uuidof.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/mingw-uuidof.patch?ref=ab67dd7818ff2d0910f3fd9bfca9412d85de4424",
        "patch": "@@ -0,0 +1,44 @@\n+--- old/qtbase/src/plugins/platforms/windows/qwindowscontext.cpp\t2015-06-20 17:40:20.956781548 -0400\n++++ new/qtbase/src/plugins/platforms/windows/qwindowscontext.cpp\t2015-06-20 17:29:32.052772416 -0400\n+@@ -69,7 +69,7 @@\n+ #include <stdlib.h>\n+ #include <stdio.h>\n+ #include <windowsx.h>\n+-#ifndef Q_OS_WINCE\n++#if !defined(Q_OS_WINCE) && (!defined(USE___UUIDOF) || (defined(USE___UUIDOF) && USE___UUIDOF == 1))\n+ #  include <comdef.h>\n+ #endif\n+ \n+@@ -762,7 +762,7 @@\n+                           HWND_MESSAGE, NULL, (HINSTANCE)GetModuleHandle(0), NULL);\n+ }\n+ \n+-#ifndef Q_OS_WINCE\n++#if !defined(Q_OS_WINCE) && (!defined(USE___UUIDOF) || (defined(USE___UUIDOF) && USE___UUIDOF == 1))\n+ // Re-engineered from the inline function _com_error::ErrorMessage().\n+ // We cannot use it directly since it uses swprintf_s(), which is not\n+ // present in the MSVCRT.DLL found on Windows XP (QTBUG-35617).\n+@@ -781,7 +781,7 @@\n+          return QStringLiteral(\"IDispatch error #\") + QString::number(wCode);\n+      return QStringLiteral(\"Unknown error 0x0\") + QString::number(comError.Error(), 16);\n+ }\n+-#endif // !Q_OS_WINCE\n++#endif // !defined(Q_OS_WINCE) && (!defined(USE___UUIDOF) || (defined(USE___UUIDOF) && USE___UUIDOF == 1))\n+ \n+ /*!\n+     \\brief Common COM error strings.\n+@@ -846,12 +846,12 @@\n+     default:\n+         break;\n+     }\n+-#ifndef Q_OS_WINCE\n++#if !defined(Q_OS_WINCE) && (!defined(USE___UUIDOF) || (defined(USE___UUIDOF) && USE___UUIDOF == 1))\n+     _com_error error(hr);\n+     result += QByteArrayLiteral(\" (\");\n+     result += errorMessageFromComError(error);\n+     result += ')';\n+-#endif // !Q_OS_WINCE\n++#endif // !defined(Q_OS_WINCE) && (!defined(USE___UUIDOF) || (defined(USE___UUIDOF) && USE___UUIDOF == 1))\n+     return result;\n+ }\n+ "
      },
      {
        "sha": "7deabf8d4e04262c3870e9adbc6eb4b4a185d29f",
        "filename": "depends/patches/qt/qt5-tablet-osx.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 20,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5189fe3d88b7d0154758379a877533fe364dec87/depends/patches/qt/qt5-tablet-osx.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5189fe3d88b7d0154758379a877533fe364dec87/depends/patches/qt/qt5-tablet-osx.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/qt5-tablet-osx.patch?ref=5189fe3d88b7d0154758379a877533fe364dec87",
        "patch": "@@ -1,20 +0,0 @@\n---- old/qtbase/src/widgets/kernel/qwidgetwindow.cpp\t2014-09-05 20:45:18.717570370 -0400\n-+++ new/qtbase/src/widgets/kernel/qwidgetwindow.cpp\t2014-09-05 20:52:38.653576561 -0400\n-@@ -57,7 +57,7 @@\n- Q_WIDGETS_EXPORT extern bool qt_tab_all_widgets();\n- \n- QWidget *qt_button_down = 0; // widget got last button-down\n--static QWidget *qt_tablet_target = 0;\n-+static QPointer<QWidget> qt_tablet_target = 0;\n- \n- // popup control\n- QWidget *qt_popup_down = 0; // popup that contains the pressed widget\n-@@ -96,8 +96,6 @@\n- \n- QWidgetWindow::~QWidgetWindow()\n- {\n--    if (m_widget == qt_tablet_target)\n--        qt_tablet_target = 0;\n- }\n- \n- #ifndef QT_NO_ACCESSIBILITY"
      },
      {
        "sha": "d569d34d47f2ddd9372c2e45487a58f0fedbf739",
        "filename": "depends/patches/qt/qt5-yosemite.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 52,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5189fe3d88b7d0154758379a877533fe364dec87/depends/patches/qt/qt5-yosemite.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5189fe3d88b7d0154758379a877533fe364dec87/depends/patches/qt/qt5-yosemite.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/qt5-yosemite.patch?ref=5189fe3d88b7d0154758379a877533fe364dec87",
        "patch": "@@ -1,52 +0,0 @@\n-The following patch was taken from upstream:\n-https://qt.gitorious.org/qt/qtbase/commit/70e4428b6f1c6a4bad112203f67ee7d22107616c.patch\n-\n-The first hunk was removed because it conflicts with 5.2.1, and is not currently needed.\n-\n-From 70e4428b6f1c6a4bad112203f67ee7d22107616c Mon Sep 17 00:00:00 2001\n-From: Gabriel de Dietrich <gabriel.dedietrich@digia.com>\n-Date: Tue, 3 Jun 2014 14:20:20 +0200\n-Subject: [PATCH] Cocoa: Adapt to Xcode 6 clang version sudden pickiness\n-MIME-Version: 1.0\n-Content-Type: text/plain; charset=UTF-8\n-Content-Transfer-Encoding: 8bit\n-\n-Yes, that means OS X Yosemite fix.\n-\n-Change-Id: I236f7af7b803de24ff0895e04c9a9253b5cfdb3b\n-Reviewed-by: Morten Johan S\u00f8rvig <morten.sorvig@digia.com>\n----\n- .../platforms/cocoa/qcocoaaccessibilityelement.mm  |    2 +-\n- .../platforms/cocoa/qcocoaapplicationdelegate.mm   |    2 +-\n- src/plugins/platforms/cocoa/qcocoamenuloader.mm    |    2 +-\n- 3 files changed, 3 insertions(+), 3 deletions(-)\n-\n-diff --git a/src/plugins/platforms/cocoa/qcocoaapplicationdelegate.mm b/src/plugins/platforms/cocoa/qcocoaapplicationdelegate.mm\n-index f841184..548c6a2 100644\n---- a/src/plugins/platforms/cocoa/qcocoaapplicationdelegate.mm\n-+++ b/src/plugins/platforms/cocoa/qcocoaapplicationdelegate.mm\n-@@ -124,7 +124,7 @@ static void cleanupCocoaApplicationDelegate()\n-     [dockMenu release];\n-     [qtMenuLoader release];\n-     if (reflectionDelegate) {\n--        [NSApp setDelegate:reflectionDelegate];\n-+        [[NSApplication sharedApplication] setDelegate:reflectionDelegate];\n-         [reflectionDelegate release];\n-     }\n-     [[NSNotificationCenter defaultCenter] removeObserver:self];\n-diff --git a/src/plugins/platforms/cocoa/qcocoamenuloader.mm b/src/plugins/platforms/cocoa/qcocoamenuloader.mm\n-index 60bc3b5..9340e94 100644\n---- a/src/plugins/platforms/cocoa/qcocoamenuloader.mm\n-+++ b/src/plugins/platforms/cocoa/qcocoamenuloader.mm\n-@@ -174,7 +174,7 @@ QT_END_NAMESPACE\n- - (void)removeActionsFromAppMenu\n- {\n-     for (NSMenuItem *item in [appMenu itemArray])\n--        [item setTag:nil];\n-+        [item setTag:0];\n- }\n- \n- - (void)dealloc\n--- \n-1.7.1\n-"
      }
    ]
  },
  {
    "sha": "410fd7448a58b497ac0c3207b6e1d076c13bca2e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MTBmZDc0NDhhNThiNDk3YWMwYzMyMDdiNmUxZDA3NmMxM2JjYTJl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-24T08:59:18Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-24T08:59:45Z"
      },
      "message": "Merge pull request #6465\n\n56b28fc Don't share objects between TestInstances (Casey Rodarmor)",
      "tree": {
        "sha": "b888441541053c594d061519a2914df4949bb9c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b888441541053c594d061519a2914df4949bb9c1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/410fd7448a58b497ac0c3207b6e1d076c13bca2e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVsf6BAAoJEHSBCwEjRsmmRLYH/RrM7JFzCCSCiOPpzqLHmNYv\n/0/pt+X+mZj702TEVxbibXd9AcdOn1E/23XLP8a+KI44L7y6KBrQImw7iy5xRnHA\nHGpHkOnVVhKoKuWcb0FEi10DbNg5oit4LRtG0xjR2BxAjQ/qL+ULPGh3FyTjWQh2\nU1W72SSVkwuwxIg8gGe0XRuVUDQkL1MXFqt1jWakg40AHqedEK73SIJD24fdGxvx\nbaj1fSk1TM8e6IUbEg6/81BxogOeqzGF8AVisZ6VI22ogBVRQwsY4HNfeHRgKsAy\nBQMcAGygcjfYhtAHS5ESk0gE/NKPuWJ0qiojFmokzMZKF4wTmOp5RfjBqQexkak=\n=F/FA\n-----END PGP SIGNATURE-----",
        "payload": "tree b888441541053c594d061519a2914df4949bb9c1\nparent d2464dfee928cdd4194516e9bc8b541c22972ab9\nparent 56b28fca46d07079462f0380e6fbd52b6507079a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1437728358 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1437728385 +0200\n\nMerge pull request #6465\n\n56b28fc Don't share objects between TestInstances (Casey Rodarmor)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/410fd7448a58b497ac0c3207b6e1d076c13bca2e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/410fd7448a58b497ac0c3207b6e1d076c13bca2e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/410fd7448a58b497ac0c3207b6e1d076c13bca2e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d2464dfee928cdd4194516e9bc8b541c22972ab9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2464dfee928cdd4194516e9bc8b541c22972ab9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d2464dfee928cdd4194516e9bc8b541c22972ab9"
      },
      {
        "sha": "56b28fca46d07079462f0380e6fbd52b6507079a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56b28fca46d07079462f0380e6fbd52b6507079a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/56b28fca46d07079462f0380e6fbd52b6507079a"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "7fb31d4a06252953471577b10de7c6dfb2602a2e",
        "filename": "qa/rpc-tests/test_framework/comptool.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/410fd7448a58b497ac0c3207b6e1d076c13bca2e/qa/rpc-tests/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/410fd7448a58b497ac0c3207b6e1d076c13bca2e/qa/rpc-tests/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/comptool.py?ref=410fd7448a58b497ac0c3207b6e1d076c13bca2e",
        "patch": "@@ -122,8 +122,8 @@ def send_mempool(self):\n #    or false, then only the last tx is tested against outcome.)\n \n class TestInstance(object):\n-    def __init__(self, objects=[], sync_every_block=True, sync_every_tx=False):\n-        self.blocks_and_transactions = objects\n+    def __init__(self, objects=None, sync_every_block=True, sync_every_tx=False):\n+        self.blocks_and_transactions = objects if objects else []\n         self.sync_every_block = sync_every_block\n         self.sync_every_tx = sync_every_tx\n "
      }
    ]
  },
  {
    "sha": "bfd807ff3287f391dcf184b755997fb9d0456a1a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZmQ4MDdmZjMyODdmMzkxZGNmMTg0Yjc1NTk5N2ZiOWQwNDU2YTFh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-24T09:07:52Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-24T09:08:52Z"
      },
      "message": "Merge pull request #6456\n\nec249d4 util: use locale-independent parsing in ParseDouble (Wladimir J. van der Laan)\n7650449 univalue: Avoid unnecessary roundtrip through double for numbers (Wladimir J. van der Laan)\ne061e27 rpc: Make ValueFromAmount always return 8 decimals (Wladimir J. van der Laan)",
      "tree": {
        "sha": "cbc3dd0388a24ba2d74eae87feffc217695368d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cbc3dd0388a24ba2d74eae87feffc217695368d6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bfd807ff3287f391dcf184b755997fb9d0456a1a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVsgCkAAoJEHSBCwEjRsmmi10IALDnDd05/Uz5Mk1mTxUMbkXK\n+9b4Ok6+bXDN8vbf7vt4Q+TeRy9BvDhaWtwug3cyaT9zlJsAhH9jnSiTNygDs2dY\nY6JJlkOk80+x/CTZS/3tHcmbmyUz8EfglbdVguRaFa8STz/ZNBlF17Z84qERZhRA\nhup4HoRc52WRtqx063DODQnKt4jHpH0PEMgARkgrTkDf5HMBBtsL4bbQ22AH8uwc\n28WDKaMCdsQVTYLsSKWSgcwmdg7RvHp63B6GHQbPX1uypfhoo9j9eWB6spgrP7TC\nB9gO2rh26XtF2iaQIL75wVpxgqdDpE9rDWyEtVE8eXg0OPKh/ZG/uKIoFdTlebc=\n=vnhq\n-----END PGP SIGNATURE-----",
        "payload": "tree cbc3dd0388a24ba2d74eae87feffc217695368d6\nparent 410fd7448a58b497ac0c3207b6e1d076c13bca2e\nparent ec249d4a1d572a17dd010464fe3ead532a8b1b70\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1437728872 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1437728932 +0200\n\nMerge pull request #6456\n\nec249d4 util: use locale-independent parsing in ParseDouble (Wladimir J. van der Laan)\n7650449 univalue: Avoid unnecessary roundtrip through double for numbers (Wladimir J. van der Laan)\ne061e27 rpc: Make ValueFromAmount always return 8 decimals (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfd807ff3287f391dcf184b755997fb9d0456a1a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bfd807ff3287f391dcf184b755997fb9d0456a1a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfd807ff3287f391dcf184b755997fb9d0456a1a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "410fd7448a58b497ac0c3207b6e1d076c13bca2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/410fd7448a58b497ac0c3207b6e1d076c13bca2e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/410fd7448a58b497ac0c3207b6e1d076c13bca2e"
      },
      {
        "sha": "ec249d4a1d572a17dd010464fe3ead532a8b1b70",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec249d4a1d572a17dd010464fe3ead532a8b1b70",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ec249d4a1d572a17dd010464fe3ead532a8b1b70"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 44,
      "deletions": 24
    },
    "files": [
      {
        "sha": "b0cde7268e03cc9eb5a017d2ef89256462cb766e",
        "filename": "qa/rpc-tests/rest.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfd807ff3287f391dcf184b755997fb9d0456a1a/qa/rpc-tests/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfd807ff3287f391dcf184b755997fb9d0456a1a/qa/rpc-tests/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rest.py?ref=bfd807ff3287f391dcf184b755997fb9d0456a1a",
        "patch": "@@ -14,6 +14,7 @@\n import binascii\n import json\n import StringIO\n+import decimal\n \n try:\n     import http.client as httplib\n@@ -243,7 +244,7 @@ def run_test(self):\n         response_header_json = http_get_call(url.hostname, url.port, '/rest/headers/1/'+bb_hash+self.FORMAT_SEPARATOR+\"json\", \"\", True)\n         assert_equal(response_header_json.status, 200)\n         response_header_json_str = response_header_json.read()\n-        json_obj = json.loads(response_header_json_str)\n+        json_obj = json.loads(response_header_json_str, parse_float=decimal.Decimal)\n         assert_equal(len(json_obj), 1) #ensure that there is one header in the json response\n         assert_equal(json_obj[0]['hash'], bb_hash) #request/response hash should be the same\n "
      },
      {
        "sha": "201fc5eba83755953fc47b4fe1585bd54d8552fc",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfd807ff3287f391dcf184b755997fb9d0456a1a/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfd807ff3287f391dcf184b755997fb9d0456a1a/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=bfd807ff3287f391dcf184b755997fb9d0456a1a",
        "patch": "@@ -11,7 +11,6 @@\n #include \"sync.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n-#include \"utilmoneystr.h\"\n #include \"utilstrencodings.h\"\n #ifdef ENABLE_WALLET\n #include \"wallet/wallet.h\"\n@@ -121,7 +120,7 @@ void RPCTypeCheckObj(const UniValue& o,\n \n CAmount AmountFromValue(const UniValue& value)\n {\n-    if (!value.isReal() && !value.isNum())\n+    if (!value.isNum())\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Amount is not a number\");\n     CAmount amount;\n     if (!ParseFixedPoint(value.getValStr(), 8, &amount))\n@@ -133,7 +132,12 @@ CAmount AmountFromValue(const UniValue& value)\n \n UniValue ValueFromAmount(const CAmount& amount)\n {\n-    return UniValue(UniValue::VREAL, FormatMoney(amount));\n+    bool sign = amount < 0;\n+    int64_t n_abs = (sign ? -amount : amount);\n+    int64_t quotient = n_abs / COIN;\n+    int64_t remainder = n_abs % COIN;\n+    return UniValue(UniValue::VNUM,\n+            strprintf(\"%s%d.%08d\", sign ? \"-\" : \"\", quotient, remainder));\n }\n \n uint256 ParseHashV(const UniValue& v, string strName)"
      },
      {
        "sha": "7946b02855d38837d04c9cec390abcf18aa86be8",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfd807ff3287f391dcf184b755997fb9d0456a1a/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfd807ff3287f391dcf184b755997fb9d0456a1a/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=bfd807ff3287f391dcf184b755997fb9d0456a1a",
        "patch": "@@ -120,6 +120,29 @@ BOOST_AUTO_TEST_CASE(rpc_format_monetary_values)\n     BOOST_CHECK(ValueFromAmount(100000000LL).write() == \"1.00000000\");\n     BOOST_CHECK(ValueFromAmount(2099999999999990LL).write() == \"20999999.99999990\");\n     BOOST_CHECK(ValueFromAmount(2099999999999999LL).write() == \"20999999.99999999\");\n+\n+    BOOST_CHECK_EQUAL(ValueFromAmount(0).write(), \"0.00000000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount((COIN/10000)*123456789).write(), \"12345.67890000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(-COIN).write(), \"-1.00000000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(-COIN/10).write(), \"-0.10000000\");\n+\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN*100000000).write(), \"100000000.00000000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN*10000000).write(), \"10000000.00000000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN*1000000).write(), \"1000000.00000000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN*100000).write(), \"100000.00000000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN*10000).write(), \"10000.00000000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN*1000).write(), \"1000.00000000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN*100).write(), \"100.00000000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN*10).write(), \"10.00000000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN).write(), \"1.00000000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN/10).write(), \"0.10000000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN/100).write(), \"0.01000000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN/1000).write(), \"0.00100000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN/10000).write(), \"0.00010000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN/100000).write(), \"0.00001000\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN/1000000).write(), \"0.00000100\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN/10000000).write(), \"0.00000010\");\n+    BOOST_CHECK_EQUAL(ValueFromAmount(COIN/100000000).write(), \"0.00000001\");\n }\n \n static UniValue ValueFromString(const std::string &str)"
      },
      {
        "sha": "67cb9b9623257c93018b5ce8feec7a3e6fa33b59",
        "filename": "src/test/univalue_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfd807ff3287f391dcf184b755997fb9d0456a1a/src/test/univalue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfd807ff3287f391dcf184b755997fb9d0456a1a/src/test/univalue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/univalue_tests.cpp?ref=bfd807ff3287f391dcf184b755997fb9d0456a1a",
        "patch": "@@ -49,7 +49,7 @@ BOOST_AUTO_TEST_CASE(univalue_constructor)\n \n     double vd = -7.21;\n     UniValue v7(vd);\n-    BOOST_CHECK(v7.isReal());\n+    BOOST_CHECK(v7.isNum());\n     BOOST_CHECK_EQUAL(v7.getValStr(), \"-7.21\");\n \n     string vs(\"yawn\");\n@@ -127,7 +127,7 @@ BOOST_AUTO_TEST_CASE(univalue_set)\n     BOOST_CHECK_EQUAL(v.getValStr(), \"zum\");\n \n     BOOST_CHECK(v.setFloat(-1.01));\n-    BOOST_CHECK(v.isReal());\n+    BOOST_CHECK(v.isNum());\n     BOOST_CHECK_EQUAL(v.getValStr(), \"-1.01\");\n \n     BOOST_CHECK(v.setInt((int)1023));\n@@ -272,7 +272,7 @@ BOOST_AUTO_TEST_CASE(univalue_object)\n     objTypes[\"distance\"] = UniValue::VNUM;\n     objTypes[\"time\"] = UniValue::VNUM;\n     objTypes[\"calories\"] = UniValue::VNUM;\n-    objTypes[\"temperature\"] = UniValue::VREAL;\n+    objTypes[\"temperature\"] = UniValue::VNUM;\n     objTypes[\"cat1\"] = UniValue::VNUM;\n     objTypes[\"cat2\"] = UniValue::VNUM;\n     BOOST_CHECK(obj.checkObject(objTypes));"
      },
      {
        "sha": "1d49a2cfc9e65680535e43a07b9dfdfb4cbf244a",
        "filename": "src/univalue/univalue.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfd807ff3287f391dcf184b755997fb9d0456a1a/src/univalue/univalue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfd807ff3287f391dcf184b755997fb9d0456a1a/src/univalue/univalue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/univalue.cpp?ref=bfd807ff3287f391dcf184b755997fb9d0456a1a",
        "patch": "@@ -86,7 +86,7 @@ bool UniValue::setFloat(double val)\n     oss << std::setprecision(16) << val;\n \n     bool ret = setNumStr(oss.str());\n-    typ = VREAL;\n+    typ = VNUM;\n     return ret;\n }\n \n@@ -210,7 +210,6 @@ const char *uvTypeName(UniValue::VType t)\n     case UniValue::VARR: return \"array\";\n     case UniValue::VSTR: return \"string\";\n     case UniValue::VNUM: return \"number\";\n-    case UniValue::VREAL: return \"number\";\n     }\n \n     // not reached\n@@ -280,7 +279,7 @@ int64_t UniValue::get_int64() const\n \n double UniValue::get_real() const\n {\n-    if (typ != VREAL && typ != VNUM)\n+    if (typ != VNUM)\n         throw std::runtime_error(\"JSON value is not a number as expected\");\n     double retval;\n     if (!ParseDouble(getValStr(), &retval))"
      },
      {
        "sha": "4742b56f3d566d50d7588b035f38fb886f762f2d",
        "filename": "src/univalue/univalue.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfd807ff3287f391dcf184b755997fb9d0456a1a/src/univalue/univalue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfd807ff3287f391dcf184b755997fb9d0456a1a/src/univalue/univalue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/univalue.h?ref=bfd807ff3287f391dcf184b755997fb9d0456a1a",
        "patch": "@@ -16,7 +16,7 @@\n \n class UniValue {\n public:\n-    enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VREAL, VBOOL, };\n+    enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VBOOL, };\n \n     UniValue() { typ = VNULL; }\n     UniValue(UniValue::VType initialType, const std::string& initialStr = \"\") {\n@@ -78,7 +78,6 @@ class UniValue {\n     bool isBool() const { return (typ == VBOOL); }\n     bool isStr() const { return (typ == VSTR); }\n     bool isNum() const { return (typ == VNUM); }\n-    bool isReal() const { return (typ == VREAL); }\n     bool isArray() const { return (typ == VARR); }\n     bool isObject() const { return (typ == VOBJ); }\n "
      },
      {
        "sha": "bce3997af77c404f563c2414ecc27ebf10e77171",
        "filename": "src/univalue/univalue_write.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfd807ff3287f391dcf184b755997fb9d0456a1a/src/univalue/univalue_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfd807ff3287f391dcf184b755997fb9d0456a1a/src/univalue/univalue_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/univalue_write.cpp?ref=bfd807ff3287f391dcf184b755997fb9d0456a1a",
        "patch": "@@ -61,13 +61,6 @@ string UniValue::write(unsigned int prettyIndent,\n     case VSTR:\n         s += \"\\\"\" + json_escape(val) + \"\\\"\";\n         break;\n-    case VREAL:\n-        {\n-            std::stringstream ss;\n-            ss << std::showpoint << std::fixed << std::setprecision(8) << get_real();\n-            s += ss.str();\n-        }\n-        break;\n     case VNUM:\n         s += val;\n         break;"
      },
      {
        "sha": "1f7a2cae2ced7a2e70314c6367b53ffeae8ac81f",
        "filename": "src/utilstrencodings.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfd807ff3287f391dcf184b755997fb9d0456a1a/src/utilstrencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfd807ff3287f391dcf184b755997fb9d0456a1a/src/utilstrencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.cpp?ref=bfd807ff3287f391dcf184b755997fb9d0456a1a",
        "patch": "@@ -464,11 +464,12 @@ bool ParseDouble(const std::string& str, double *out)\n         return false;\n     if (str.size() >= 2 && str[0] == '0' && str[1] == 'x') // No hexadecimal floats allowed\n         return false;\n-    char *endp = NULL;\n-    errno = 0; // strtod will not set errno if valid\n-    double n = strtod(str.c_str(), &endp);\n-    if(out) *out = n;\n-    return endp && *endp == 0 && !errno;\n+    std::istringstream text(str);\n+    text.imbue(std::locale::classic());\n+    double result;\n+    text >> result;\n+    if(out) *out = result;\n+    return text.eof() && !text.fail();\n }\n \n std::string FormatParagraph(const std::string& in, size_t width, size_t indent)"
      }
    ]
  },
  {
    "sha": "ed166dfa8284778bc6e42acc2efcafa893f33cec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZDE2NmRmYTgyODQ3NzhiYzZlNDJhY2MyZWZjYWZhODkzZjMzY2Vj",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-07-25T16:20:40Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-07-24T10:28:06Z"
      },
      "message": "[Qt] allow users to set -onion via GUI\n\n- also allow users to see, if the default proxy (-proxy) is used for\n  reaching peers via IPv6 or Tor",
      "tree": {
        "sha": "86897006c3fd3d25b87be9c24d8a2f183396f60a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/86897006c3fd3d25b87be9c24d8a2f183396f60a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ed166dfa8284778bc6e42acc2efcafa893f33cec",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed166dfa8284778bc6e42acc2efcafa893f33cec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ed166dfa8284778bc6e42acc2efcafa893f33cec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed166dfa8284778bc6e42acc2efcafa893f33cec/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "bfd807ff3287f391dcf184b755997fb9d0456a1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfd807ff3287f391dcf184b755997fb9d0456a1a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bfd807ff3287f391dcf184b755997fb9d0456a1a"
      }
    ],
    "stats": {
      "total": 304,
      "additions": 297,
      "deletions": 7
    },
    "files": [
      {
        "sha": "22c67b804084e41cb696c3f845cc1fbe5608e602",
        "filename": "src/qt/forms/optionsdialog.ui",
        "status": "modified",
        "additions": 188,
        "deletions": 1,
        "changes": 189,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed166dfa8284778bc6e42acc2efcafa893f33cec/src/qt/forms/optionsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed166dfa8284778bc6e42acc2efcafa893f33cec/src/qt/forms/optionsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/optionsdialog.ui?ref=ed166dfa8284778bc6e42acc2efcafa893f33cec",
        "patch": "@@ -7,7 +7,7 @@\n     <x>0</x>\n     <y>0</y>\n     <width>560</width>\n-    <height>400</height>\n+    <height>440</height>\n    </rect>\n   </property>\n   <property name=\"windowTitle\">\n@@ -297,6 +297,193 @@\n          </item>\n         </layout>\n        </item>\n+       <item>\n+        <layout class=\"QHBoxLayout\" name=\"horizontalLayout_2_Network\">\n+         <item>\n+          <widget class=\"QLabel\" name=\"proxyActiveNets\">\n+           <property name=\"text\">\n+            <string>Used for reaching peers via:</string>\n+           </property>\n+           <property name=\"textFormat\">\n+            <enum>Qt::PlainText</enum>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <widget class=\"QCheckBox\" name=\"proxyReachIPv4\">\n+           <property name=\"enabled\">\n+            <bool>false</bool>\n+           </property>\n+           <property name=\"toolTip\">\n+            <string>Shows, if the supplied default SOCKS5 proxy is used to reach peers via this network type.</string>\n+           </property>\n+           <property name=\"text\">\n+            <string/>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <widget class=\"QLabel\" name=\"proxyReachIPv4Label\">\n+           <property name=\"text\">\n+            <string>IPv4</string>\n+           </property>\n+           <property name=\"textFormat\">\n+            <enum>Qt::PlainText</enum>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <widget class=\"QCheckBox\" name=\"proxyReachIPv6\">\n+           <property name=\"enabled\">\n+            <bool>false</bool>\n+           </property>\n+           <property name=\"toolTip\">\n+            <string>Shows, if the supplied default SOCKS5 proxy is used to reach peers via this network type.</string>\n+           </property>\n+           <property name=\"text\">\n+            <string/>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <widget class=\"QLabel\" name=\"proxyReachIPv6Label\">\n+           <property name=\"text\">\n+            <string>IPv6</string>\n+           </property>\n+           <property name=\"textFormat\">\n+            <enum>Qt::PlainText</enum>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <widget class=\"QCheckBox\" name=\"proxyReachTor\">\n+           <property name=\"enabled\">\n+            <bool>false</bool>\n+           </property>\n+           <property name=\"toolTip\">\n+            <string>Shows, if the supplied default SOCKS5 proxy is used to reach peers via this network type.</string>\n+           </property>\n+           <property name=\"text\">\n+            <string/>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <widget class=\"QLabel\" name=\"proxyReachTorLabel\">\n+           <property name=\"text\">\n+            <string>Tor</string>\n+           </property>\n+           <property name=\"textFormat\">\n+            <enum>Qt::PlainText</enum>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <spacer name=\"horizontalSpacer_2_Network\">\n+           <property name=\"orientation\">\n+            <enum>Qt::Horizontal</enum>\n+           </property>\n+           <property name=\"sizeHint\" stdset=\"0\">\n+            <size>\n+             <width>40</width>\n+             <height>20</height>\n+            </size>\n+           </property>\n+          </spacer>\n+         </item>\n+        </layout>\n+       </item>\n+       <item>\n+        <widget class=\"QCheckBox\" name=\"connectSocksTor\">\n+         <property name=\"toolTip\">\n+          <string>Connect to the Bitcoin network through a separate SOCKS5 proxy for Tor hidden services.</string>\n+         </property>\n+         <property name=\"text\">\n+          <string>Use separate SOCKS5 proxy to reach peers via Tor hidden services:</string>\n+         </property>\n+        </widget>\n+       </item>\n+       <item>\n+        <layout class=\"QHBoxLayout\" name=\"horizontalLayout_3_Network\">\n+         <item>\n+          <widget class=\"QLabel\" name=\"proxyIpTorLabel\">\n+           <property name=\"text\">\n+            <string>Proxy &amp;IP:</string>\n+           </property>\n+           <property name=\"textFormat\">\n+            <enum>Qt::PlainText</enum>\n+           </property>\n+           <property name=\"buddy\">\n+            <cstring>proxyIpTor</cstring>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <widget class=\"QValidatedLineEdit\" name=\"proxyIpTor\">\n+           <property name=\"minimumSize\">\n+            <size>\n+             <width>140</width>\n+             <height>0</height>\n+            </size>\n+           </property>\n+           <property name=\"maximumSize\">\n+            <size>\n+             <width>140</width>\n+             <height>16777215</height>\n+            </size>\n+           </property>\n+           <property name=\"toolTip\">\n+            <string>IP address of the proxy (e.g. IPv4: 127.0.0.1 / IPv6: ::1)</string>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <widget class=\"QLabel\" name=\"proxyPortTorLabel\">\n+           <property name=\"text\">\n+            <string>&amp;Port:</string>\n+           </property>\n+           <property name=\"textFormat\">\n+            <enum>Qt::PlainText</enum>\n+           </property>\n+           <property name=\"buddy\">\n+            <cstring>proxyPortTor</cstring>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <widget class=\"QLineEdit\" name=\"proxyPortTor\">\n+           <property name=\"minimumSize\">\n+            <size>\n+             <width>55</width>\n+             <height>0</height>\n+            </size>\n+           </property>\n+           <property name=\"maximumSize\">\n+            <size>\n+             <width>55</width>\n+             <height>16777215</height>\n+            </size>\n+           </property>\n+           <property name=\"toolTip\">\n+            <string>Port of the proxy (e.g. 9050)</string>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <spacer name=\"horizontalSpacer_4_Network\">\n+           <property name=\"orientation\">\n+            <enum>Qt::Horizontal</enum>\n+           </property>\n+           <property name=\"sizeHint\" stdset=\"0\">\n+            <size>\n+             <width>40</width>\n+             <height>20</height>\n+            </size>\n+           </property>\n+          </spacer>\n+         </item>\n+        </layout>\n+       </item>\n        <item>\n         <spacer name=\"verticalSpacer_Network\">\n          <property name=\"orientation\">"
      },
      {
        "sha": "1ccaeac8974e661d693608cff001cae114678c22",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 46,
        "deletions": 5,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed166dfa8284778bc6e42acc2efcafa893f33cec/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed166dfa8284778bc6e42acc2efcafa893f33cec/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=ed166dfa8284778bc6e42acc2efcafa893f33cec",
        "patch": "@@ -35,7 +35,7 @@ OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :\n     ui(new Ui::OptionsDialog),\n     model(0),\n     mapper(0),\n-    fProxyIpValid(true)\n+    fProxyIpsValid(true)\n {\n     ui->setupUi(this);\n \n@@ -54,10 +54,18 @@ OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :\n     ui->proxyPort->setEnabled(false);\n     ui->proxyPort->setValidator(new QIntValidator(1, 65535, this));\n \n+    ui->proxyIpTor->setEnabled(false);\n+    ui->proxyPortTor->setEnabled(false);\n+    ui->proxyPortTor->setValidator(new QIntValidator(1, 65535, this));\n+\n     connect(ui->connectSocks, SIGNAL(toggled(bool)), ui->proxyIp, SLOT(setEnabled(bool)));\n     connect(ui->connectSocks, SIGNAL(toggled(bool)), ui->proxyPort, SLOT(setEnabled(bool)));\n \n+    connect(ui->connectSocksTor, SIGNAL(toggled(bool)), ui->proxyIpTor, SLOT(setEnabled(bool)));\n+    connect(ui->connectSocksTor, SIGNAL(toggled(bool)), ui->proxyPortTor, SLOT(setEnabled(bool)));\n+\n     ui->proxyIp->installEventFilter(this);\n+    ui->proxyIpTor->installEventFilter(this);\n \n     /* Window elements init */\n #ifdef Q_OS_MAC\n@@ -110,7 +118,7 @@ OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :\n     mapper->setSubmitPolicy(QDataWidgetMapper::ManualSubmit);\n     mapper->setOrientation(Qt::Vertical);\n \n-    /* setup/change UI elements when proxy IP is invalid/valid */\n+    /* setup/change UI elements when proxy IPs are invalid/valid */\n     connect(this, SIGNAL(proxyIpChecks(QValidatedLineEdit *, int)), this, SLOT(doProxyIpChecks(QValidatedLineEdit *, int)));\n }\n \n@@ -137,6 +145,8 @@ void OptionsDialog::setModel(OptionsModel *model)\n         mapper->setModel(model);\n         setMapper();\n         mapper->toFirst();\n+\n+        updateDefaultProxyNets();\n     }\n \n     /* warn when one of the following settings changes by user action (placed here so init via mapper doesn't trigger them) */\n@@ -149,6 +159,7 @@ void OptionsDialog::setModel(OptionsModel *model)\n     /* Network */\n     connect(ui->allowIncoming, SIGNAL(clicked(bool)), this, SLOT(showRestartWarning()));\n     connect(ui->connectSocks, SIGNAL(clicked(bool)), this, SLOT(showRestartWarning()));\n+    connect(ui->connectSocksTor, SIGNAL(clicked(bool)), this, SLOT(showRestartWarning()));\n     /* Display */\n     connect(ui->lang, SIGNAL(valueChanged()), this, SLOT(showRestartWarning()));\n     connect(ui->thirdPartyTxUrls, SIGNAL(textChanged(const QString &)), this, SLOT(showRestartWarning()));\n@@ -173,6 +184,10 @@ void OptionsDialog::setMapper()\n     mapper->addMapping(ui->proxyIp, OptionsModel::ProxyIP);\n     mapper->addMapping(ui->proxyPort, OptionsModel::ProxyPort);\n \n+    mapper->addMapping(ui->connectSocksTor, OptionsModel::ProxyUseTor);\n+    mapper->addMapping(ui->proxyIpTor, OptionsModel::ProxyIPTor);\n+    mapper->addMapping(ui->proxyPortTor, OptionsModel::ProxyPortTor);\n+\n     /* Window */\n #ifndef Q_OS_MAC\n     mapper->addMapping(ui->minimizeToTray, OptionsModel::MinimizeToTray);\n@@ -188,7 +203,7 @@ void OptionsDialog::setMapper()\n void OptionsDialog::enableOkButton()\n {\n     /* prevent enabling of the OK button when data modified, if there is an invalid proxy address present */\n-    if(fProxyIpValid)\n+    if(fProxyIpsValid)\n         setOkButtonState(true);\n }\n \n@@ -224,6 +239,7 @@ void OptionsDialog::on_okButton_clicked()\n {\n     mapper->submit();\n     accept();\n+    updateDefaultProxyNets();\n }\n \n void OptionsDialog::on_cancelButton_clicked()\n@@ -257,11 +273,10 @@ void OptionsDialog::doProxyIpChecks(QValidatedLineEdit *pUiProxyIp, int nProxyPo\n {\n     Q_UNUSED(nProxyPort);\n \n-    const std::string strAddrProxy = pUiProxyIp->text().toStdString();\n     CService addrProxy;\n \n     /* Check for a valid IPv4 / IPv6 address */\n-    if (!(fProxyIpValid = LookupNumeric(strAddrProxy.c_str(), addrProxy)))\n+    if (!(fProxyIpsValid = LookupNumeric(pUiProxyIp->text().toStdString().c_str(), addrProxy)))\n     {\n         disableOkButton();\n         pUiProxyIp->setValid(false);\n@@ -275,6 +290,28 @@ void OptionsDialog::doProxyIpChecks(QValidatedLineEdit *pUiProxyIp, int nProxyPo\n     }\n }\n \n+void OptionsDialog::updateDefaultProxyNets()\n+{\n+    proxyType proxy;\n+    std::string strProxy;\n+    QString strDefaultProxyGUI;\n+\n+    GetProxy(NET_IPV4, proxy);\n+    strProxy = proxy.proxy.ToStringIP() + \":\" + proxy.proxy.ToStringPort();\n+    strDefaultProxyGUI = ui->proxyIp->text() + \":\" + ui->proxyPort->text();\n+    (strProxy == strDefaultProxyGUI.toStdString()) ? ui->proxyReachIPv4->setChecked(true) : ui->proxyReachIPv4->setChecked(false);\n+\n+    GetProxy(NET_IPV6, proxy);\n+    strProxy = proxy.proxy.ToStringIP() + \":\" + proxy.proxy.ToStringPort();\n+    strDefaultProxyGUI = ui->proxyIp->text() + \":\" + ui->proxyPort->text();\n+    (strProxy == strDefaultProxyGUI.toStdString()) ? ui->proxyReachIPv6->setChecked(true) : ui->proxyReachIPv6->setChecked(false);\n+\n+    GetProxy(NET_TOR, proxy);\n+    strProxy = proxy.proxy.ToStringIP() + \":\" + proxy.proxy.ToStringPort();\n+    strDefaultProxyGUI = ui->proxyIp->text() + \":\" + ui->proxyPort->text();\n+    (strProxy == strDefaultProxyGUI.toStdString()) ? ui->proxyReachTor->setChecked(true) : ui->proxyReachTor->setChecked(false);\n+}\n+\n bool OptionsDialog::eventFilter(QObject *object, QEvent *event)\n {\n     if(event->type() == QEvent::FocusOut)\n@@ -283,6 +320,10 @@ bool OptionsDialog::eventFilter(QObject *object, QEvent *event)\n         {\n             Q_EMIT proxyIpChecks(ui->proxyIp, ui->proxyPort->text().toInt());\n         }\n+        else if(object == ui->proxyIpTor)\n+        {\n+            Q_EMIT proxyIpChecks(ui->proxyIpTor, ui->proxyPortTor->text().toInt());\n+        }\n     }\n     return QDialog::eventFilter(object, event);\n }"
      },
      {
        "sha": "348489c599a35b5272b241cf5874ace71e6d8c23",
        "filename": "src/qt/optionsdialog.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed166dfa8284778bc6e42acc2efcafa893f33cec/src/qt/optionsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed166dfa8284778bc6e42acc2efcafa893f33cec/src/qt/optionsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.h?ref=ed166dfa8284778bc6e42acc2efcafa893f33cec",
        "patch": "@@ -47,6 +47,8 @@ private Q_SLOTS:\n     void showRestartWarning(bool fPersistent = false);\n     void clearStatusLabel();\n     void doProxyIpChecks(QValidatedLineEdit *pUiProxyIp, int nProxyPort);\n+    /* query the networks, for which the default proxy is used */\n+    void updateDefaultProxyNets();\n \n Q_SIGNALS:\n     void proxyIpChecks(QValidatedLineEdit *pUiProxyIp, int nProxyPort);\n@@ -55,7 +57,7 @@ private Q_SLOTS:\n     Ui::OptionsDialog *ui;\n     OptionsModel *model;\n     QDataWidgetMapper *mapper;\n-    bool fProxyIpValid;\n+    bool fProxyIpsValid;\n };\n \n #endif // BITCOIN_QT_OPTIONSDIALOG_H"
      },
      {
        "sha": "d1f7ffcc8eb27f1e470e83a71c455a59dbd6d66c",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 57,
        "deletions": 0,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed166dfa8284778bc6e42acc2efcafa893f33cec/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed166dfa8284778bc6e42acc2efcafa893f33cec/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=ed166dfa8284778bc6e42acc2efcafa893f33cec",
        "patch": "@@ -117,6 +117,16 @@ void OptionsModel::Init()\n     else if(!settings.value(\"fUseProxy\").toBool() && !GetArg(\"-proxy\", \"\").empty())\n         addOverriddenOption(\"-proxy\");\n \n+    if (!settings.contains(\"fUseSeparateProxyTor\"))\n+        settings.setValue(\"fUseSeparateProxyTor\", false);\n+    if (!settings.contains(\"addrSeparateProxyTor\"))\n+        settings.setValue(\"addrSeparateProxyTor\", \"127.0.0.1:9050\");\n+    // Only try to set -onion, if user has enabled fUseSeparateProxyTor\n+    if (settings.value(\"fUseSeparateProxyTor\").toBool() && !SoftSetArg(\"-onion\", settings.value(\"addrSeparateProxyTor\").toString().toStdString()))\n+        addOverriddenOption(\"-onion\");\n+    else if(!settings.value(\"fUseSeparateProxyTor\").toBool() && !GetArg(\"-onion\", \"\").empty())\n+        addOverriddenOption(\"-onion\");\n+\n     // Display\n     if (!settings.contains(\"language\"))\n         settings.setValue(\"language\", \"\");\n@@ -178,6 +188,20 @@ QVariant OptionsModel::data(const QModelIndex & index, int role) const\n             return strlIpPort.at(1);\n         }\n \n+        // separate Tor proxy\n+        case ProxyUseTor:\n+            return settings.value(\"fUseSeparateProxyTor\", false);\n+        case ProxyIPTor: {\n+            // contains IP at index 0 and port at index 1\n+            QStringList strlIpPort = settings.value(\"addrSeparateProxyTor\").toString().split(\":\", QString::SkipEmptyParts);\n+            return strlIpPort.at(0);\n+        }\n+        case ProxyPortTor: {\n+            // contains IP at index 0 and port at index 1\n+            QStringList strlIpPort = settings.value(\"addrSeparateProxyTor\").toString().split(\":\", QString::SkipEmptyParts);\n+            return strlIpPort.at(1);\n+        }\n+\n #ifdef ENABLE_WALLET\n         case SpendZeroConfChange:\n             return settings.value(\"bSpendZeroConfChange\");\n@@ -259,6 +283,39 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n             }\n         }\n         break;\n+\n+        // separate Tor proxy\n+        case ProxyUseTor:\n+            if (settings.value(\"fUseSeparateProxyTor\") != value) {\n+                settings.setValue(\"fUseSeparateProxyTor\", value.toBool());\n+                setRestartRequired(true);\n+            }\n+            break;\n+        case ProxyIPTor: {\n+            // contains current IP at index 0 and current port at index 1\n+            QStringList strlIpPort = settings.value(\"addrSeparateProxyTor\").toString().split(\":\", QString::SkipEmptyParts);\n+            // if that key doesn't exist or has a changed IP\n+            if (!settings.contains(\"addrSeparateProxyTor\") || strlIpPort.at(0) != value.toString()) {\n+                // construct new value from new IP and current port\n+                QString strNewValue = value.toString() + \":\" + strlIpPort.at(1);\n+                settings.setValue(\"addrSeparateProxyTor\", strNewValue);\n+                setRestartRequired(true);\n+            }\n+        }\n+        break;\n+        case ProxyPortTor: {\n+            // contains current IP at index 0 and current port at index 1\n+            QStringList strlIpPort = settings.value(\"addrSeparateProxyTor\").toString().split(\":\", QString::SkipEmptyParts);\n+            // if that key doesn't exist or has a changed port\n+            if (!settings.contains(\"addrSeparateProxyTor\") || strlIpPort.at(1) != value.toString()) {\n+                // construct new value from current IP and new port\n+                QString strNewValue = strlIpPort.at(0) + \":\" + value.toString();\n+                settings.setValue(\"addrSeparateProxyTor\", strNewValue);\n+                setRestartRequired(true);\n+            }\n+        }\n+        break;\n+\n #ifdef ENABLE_WALLET\n         case SpendZeroConfChange:\n             if (settings.value(\"bSpendZeroConfChange\") != value) {"
      },
      {
        "sha": "8448cad8de298143b3727655e1c61ae418cb66e5",
        "filename": "src/qt/optionsmodel.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed166dfa8284778bc6e42acc2efcafa893f33cec/src/qt/optionsmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed166dfa8284778bc6e42acc2efcafa893f33cec/src/qt/optionsmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.h?ref=ed166dfa8284778bc6e42acc2efcafa893f33cec",
        "patch": "@@ -34,6 +34,9 @@ class OptionsModel : public QAbstractListModel\n         ProxyUse,               // bool\n         ProxyIP,                // QString\n         ProxyPort,              // int\n+        ProxyUseTor,            // bool\n+        ProxyIPTor,             // QString\n+        ProxyPortTor,           // int\n         DisplayUnit,            // BitcoinUnits::Unit\n         ThirdPartyTxUrls,       // QString\n         Language,               // QString"
      }
    ]
  },
  {
    "sha": "6f8b6d339bf6d6f7fe5a23180e668f7734755d91",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZjhiNmQzMzliZjZkNmY3ZmU1YTIzMTgwZTY2OGY3NzM0NzU1ZDkx",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-07-23T19:05:00Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-07-25T07:51:52Z"
      },
      "message": "don't try to decode invalid encoded ext keys",
      "tree": {
        "sha": "68fcf51545f5aa423d0a3e35ed451438d2545833",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/68fcf51545f5aa423d0a3e35ed451438d2545833"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6f8b6d339bf6d6f7fe5a23180e668f7734755d91",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f8b6d339bf6d6f7fe5a23180e668f7734755d91",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6f8b6d339bf6d6f7fe5a23180e668f7734755d91",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f8b6d339bf6d6f7fe5a23180e668f7734755d91/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8d2af54eccda83bfe86bb14069ad54d0e4ba357c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d2af54eccda83bfe86bb14069ad54d0e4ba357c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d2af54eccda83bfe86bb14069ad54d0e4ba357c"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "90014b9496a8f887cdeee0017edaa3c5aba03d5d",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f8b6d339bf6d6f7fe5a23180e668f7734755d91/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f8b6d339bf6d6f7fe5a23180e668f7734755d91/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=6f8b6d339bf6d6f7fe5a23180e668f7734755d91",
        "patch": "@@ -146,7 +146,10 @@ template<typename K, int Size, CChainParams::Base58Type Type> class CBitcoinExtK\n \n     K GetKey() {\n         K ret;\n-        ret.Decode(&vchData[0]);\n+        if (vchData.size() == Size) {\n+            //if base58 encouded data not holds a ext key, return a !IsValid() key\n+            ret.Decode(&vchData[0]);\n+        }\n         return ret;\n     }\n "
      }
    ]
  },
  {
    "sha": "ecd6a89381a34d4bcd07593a2e377656d070a7ed",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplY2Q2YTg5MzgxYTM0ZDRiY2QwNzU5M2EyZTM3NzY1NmQwNzBhN2Vk",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-07-23T23:16:02Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-27T10:25:28Z"
      },
      "message": "depends: make more qt flags explicit",
      "tree": {
        "sha": "6525540e335a80a95e88aa82c348ba8d3360bf04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6525540e335a80a95e88aa82c348ba8d3360bf04"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ecd6a89381a34d4bcd07593a2e377656d070a7ed",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ecd6a89381a34d4bcd07593a2e377656d070a7ed",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ecd6a89381a34d4bcd07593a2e377656d070a7ed",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ecd6a89381a34d4bcd07593a2e377656d070a7ed/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ab67dd7818ff2d0910f3fd9bfca9412d85de4424",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab67dd7818ff2d0910f3fd9bfca9412d85de4424",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ab67dd7818ff2d0910f3fd9bfca9412d85de4424"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 17,
      "deletions": 5
    },
    "files": [
      {
        "sha": "cba2fbd1513e34582732732188da8f36507d5563",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 17,
        "deletions": 5,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ecd6a89381a34d4bcd07593a2e377656d070a7ed/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ecd6a89381a34d4bcd07593a2e377656d070a7ed/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=ecd6a89381a34d4bcd07593a2e377656d070a7ed",
        "patch": "@@ -59,6 +59,23 @@ $(package)_config_opts += -qt-libpng\n $(package)_config_opts += -qt-libjpeg\n $(package)_config_opts += -qt-zlib\n $(package)_config_opts += -qt-pcre\n+$(package)_config_opts += -no-pulseaudio\n+$(package)_config_opts += -no-openvg\n+$(package)_config_opts += -no-xrender\n+$(package)_config_opts += -no-alsa\n+$(package)_config_opts += -no-mtdev\n+$(package)_config_opts += -no-gstreamer\n+$(package)_config_opts += -no-mitshm\n+$(package)_config_opts += -no-kms\n+$(package)_config_opts += -no-reduce-relocations\n+$(package)_config_opts += -no-egl\n+$(package)_config_opts += -no-eglfs\n+$(package)_config_opts += -no-linuxfb\n+$(package)_config_opts += -no-xinput2\n+$(package)_config_opts += -no-libudev\n+$(package)_config_opts += -no-use-gold-linker\n+$(package)_config_opts += -reduce-exports\n+$(package)_config_opts += -optimized-qmake\n \n ifneq ($(build_os),darwin)\n $(package)_config_opts_darwin = -xplatform macx-clang-linux\n@@ -72,14 +89,9 @@ endif\n \n $(package)_config_opts_linux  = -qt-xkbcommon\n $(package)_config_opts_linux += -qt-xcb\n-$(package)_config_opts_linux += -no-eglfs\n-$(package)_config_opts_linux += -no-linuxfb\n $(package)_config_opts_linux += -system-freetype\n $(package)_config_opts_linux += -no-sm\n $(package)_config_opts_linux += -fontconfig\n-$(package)_config_opts_linux += -no-xinput2\n-$(package)_config_opts_linux += -no-libudev\n-$(package)_config_opts_linux += -no-egl\n $(package)_config_opts_linux += -no-opengl\n $(package)_config_opts_arm_linux  = -platform linux-g++ -xplatform $(host)\n $(package)_config_opts_i686_linux  = -xplatform linux-g++-32"
      }
    ]
  },
  {
    "sha": "060b3d377b0a0d318f630beb7fe4d8f41b99981c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNjBiM2QzNzdiMGEwZDMxOGY2MzBiZWI3ZmU0ZDhmNDFiOTk5ODFj",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-07-24T20:22:24Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-27T10:25:28Z"
      },
      "message": "fixup: qt 5.5 snuck in another module that needs path hand-holding",
      "tree": {
        "sha": "f92c641d3791112d4a1d22d43948b7ef99723edb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f92c641d3791112d4a1d22d43948b7ef99723edb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/060b3d377b0a0d318f630beb7fe4d8f41b99981c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/060b3d377b0a0d318f630beb7fe4d8f41b99981c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/060b3d377b0a0d318f630beb7fe4d8f41b99981c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/060b3d377b0a0d318f630beb7fe4d8f41b99981c/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ecd6a89381a34d4bcd07593a2e377656d070a7ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ecd6a89381a34d4bcd07593a2e377656d070a7ed",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ecd6a89381a34d4bcd07593a2e377656d070a7ed"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 12,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ae469ea94bff0e7d3b833a836f6c56e02c12db6a",
        "filename": "depends/patches/qt/fix-xcb-include-order.patch",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/060b3d377b0a0d318f630beb7fe4d8f41b99981c/depends/patches/qt/fix-xcb-include-order.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/060b3d377b0a0d318f630beb7fe4d8f41b99981c/depends/patches/qt/fix-xcb-include-order.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/fix-xcb-include-order.patch?ref=060b3d377b0a0d318f630beb7fe4d8f41b99981c",
        "patch": "@@ -31,3 +31,15 @@\n \n  QMAKE_CXXFLAGS += $$QMAKE_CFLAGS_XCB\n  QMAKE_CFLAGS += $$QMAKE_CFLAGS_XCB\n+--- old/qtbase/src/plugins/platforms/xcb/xcb-plugin.pro\t2015-07-24 16:02:59.530038830 -0400\n++++ new/qtbase/src/plugins/platforms/xcb/xcb-plugin.pro\t2015-07-24 16:01:22.106037459 -0400\n+@@ -11,3 +11,9 @@\n+     qxcbmain.cpp\n+ OTHER_FILES += xcb.json README\n+\n++contains(QT_CONFIG, xcb-qt) {\n++    DEFINES += XCB_USE_RENDER\n++    XCB_DIR = ../../../3rdparty/xcb\n++    QMAKE_CFLAGS += -I$$XCB_DIR/include -I$$XCB_DIR/sysinclude $$QMAKE_CFLAGS_XCB\n++    QMAKE_CXXFLAGS += -I$$XCB_DIR/include -I$$XCB_DIR/sysinclude $$QMAKE_CFLAGS_XCB\n++}"
      }
    ]
  },
  {
    "sha": "f6850d58f7dd87de44dd25be0fc1067625fa8d3a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNjg1MGQ1OGY3ZGQ4N2RlNDRkZDI1YmUwZmMxMDY3NjI1ZmE4ZDNh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-27T10:28:38Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-27T10:28:42Z"
      },
      "message": "Merge pull request #6471\n\n060b3d3 fixup: qt 5.5 snuck in another module that needs path hand-holding (Cory Fields)\necd6a89 depends: make more qt flags explicit (Cory Fields)\nab67dd7 depends: bump to qt 5.5 (Cory Fields)\n5189fe3 depends: split qt config options to separate lines (Jacob Welsh)\nfe997df build: fix building against qt5.4/5.5 (Cory Fields)",
      "tree": {
        "sha": "e1ba69f059982db0135a463af3eb266e37c40a60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e1ba69f059982db0135a463af3eb266e37c40a60"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f6850d58f7dd87de44dd25be0fc1067625fa8d3a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVtgfaAAoJEHSBCwEjRsmm2ggIAMHZt01j9uFKYSaGXk1EUiyb\nYtE2lZ0FkOl+kpsdWSn9NcZxOlBxt5AAbG/c7JTQzAQsOP48GfBjrOQaMCMk/XlE\nF8+ax9fa7E/i13pBlmDIW/fUOihKdf46I8Ny3vFdDAKsgRbgjfx9aJhmuKDlBwOi\nnKTr4+GHKERYMCAiOlMdFJfQ2t+3Hr4fg6eP6zcPpKZIMbnQmiQ7bRYhiV7y6Ffe\nbKPqVTkfRrDcIB2jtrP4YxEwoNj7s2gCGtoJ5KhVjIk86TLJyJUESpJvFLu6aVsZ\nPshw0XchrqeoChok5V5dG3F5gDKTuswXyj2JHEdXvvK61xJ4lyZoz90ozscgEQc=\n=q6tk\n-----END PGP SIGNATURE-----",
        "payload": "tree e1ba69f059982db0135a463af3eb266e37c40a60\nparent bfd807ff3287f391dcf184b755997fb9d0456a1a\nparent 060b3d377b0a0d318f630beb7fe4d8f41b99981c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1437992918 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1437992922 +0200\n\nMerge pull request #6471\n\n060b3d3 fixup: qt 5.5 snuck in another module that needs path hand-holding (Cory Fields)\necd6a89 depends: make more qt flags explicit (Cory Fields)\nab67dd7 depends: bump to qt 5.5 (Cory Fields)\n5189fe3 depends: split qt config options to separate lines (Jacob Welsh)\nfe997df build: fix building against qt5.4/5.5 (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6850d58f7dd87de44dd25be0fc1067625fa8d3a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f6850d58f7dd87de44dd25be0fc1067625fa8d3a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6850d58f7dd87de44dd25be0fc1067625fa8d3a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bfd807ff3287f391dcf184b755997fb9d0456a1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfd807ff3287f391dcf184b755997fb9d0456a1a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bfd807ff3287f391dcf184b755997fb9d0456a1a"
      },
      {
        "sha": "060b3d377b0a0d318f630beb7fe4d8f41b99981c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/060b3d377b0a0d318f630beb7fe4d8f41b99981c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/060b3d377b0a0d318f630beb7fe4d8f41b99981c"
      }
    ],
    "stats": {
      "total": 323,
      "additions": 203,
      "deletions": 120
    },
    "files": [
      {
        "sha": "100b8653a84e73e9ee8d933bf28e3eb3e92986cb",
        "filename": "build-aux/m4/bitcoin_qt.m4",
        "status": "modified",
        "additions": 21,
        "deletions": 4,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6850d58f7dd87de44dd25be0fc1067625fa8d3a/build-aux/m4/bitcoin_qt.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6850d58f7dd87de44dd25be0fc1067625fa8d3a/build-aux/m4/bitcoin_qt.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_qt.m4?ref=f6850d58f7dd87de44dd25be0fc1067625fa8d3a",
        "patch": "@@ -106,24 +106,40 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n   dnl results to QT_LIBS.\n   BITCOIN_QT_CHECK([\n   TEMP_CPPFLAGS=$CPPFLAGS\n-  CPPFLAGS=$QT_INCLUDES\n+  CPPFLAGS=\"$QT_INCLUDES $CPPFLAGS\"\n   if test x$bitcoin_qt_got_major_vers = x5; then\n     _BITCOIN_QT_IS_STATIC\n     if test x$bitcoin_cv_static_qt = xyes; then\n       AC_DEFINE(QT_STATICPLUGIN, 1, [Define this symbol if qt plugins are static])\n       if test x$qt_plugin_path != x; then\n-        QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/accessible\"\n         QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/platforms\"\n       fi\n       if test x$use_pkgconfig = xyes; then\n         PKG_CHECK_MODULES([QTPLATFORM], [Qt5PlatformSupport], [QT_LIBS=\"$QTPLATFORM_LIBS $QT_LIBS\"])\n       fi\n-      _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(AccessibleFactory)], [-lqtaccessiblewidgets])\n+      AC_CACHE_CHECK(for Qt < 5.4, bitcoin_cv_need_acc_widget,[AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n+          [[#include <QtCore>]],[[\n+          #if QT_VERSION >= 0x050400\n+          choke;\n+          #endif\n+          ]])],\n+        [bitcoin_cv_need_acc_widget=yes],\n+        [bitcoin_cv_need_acc_widget=no])\n+      ])\n+      if test \"x$bitcoin_cv_need_acc_widget\" = \"xyes\"; then\n+        if test x$qt_plugin_path != x; then\n+          QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/accessible\"\n+        fi\n+        _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(AccessibleFactory)], [-lqtaccessiblewidgets])\n+      fi\n       if test x$TARGET_OS = xwindows; then\n         _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(QWindowsIntegrationPlugin)],[-lqwindows])\n         AC_DEFINE(QT_QPA_PLATFORM_WINDOWS, 1, [Define this symbol if the qt platform is windows])\n       elif test x$TARGET_OS = xlinux; then\n         PKG_CHECK_MODULES([X11XCB], [x11-xcb], [QT_LIBS=\"$X11XCB_LIBS $QT_LIBS\"])\n+        if ${PKG_CONFIG} --exists \"Qt5Core >= 5.5\" 2>/dev/null; then\n+          PKG_CHECK_MODULES([QTXCBQPA], [Qt5XcbQpa], [QT_LIBS=\"$QTXCBQPA_LIBS $QT_LIBS\"])\n+        fi\n         _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(QXcbIntegrationPlugin)],[-lqxcb -lxcb-static])\n         AC_DEFINE(QT_QPA_PLATFORM_XCB, 1, [Define this symbol if the qt platform is xcb])\n       elif test x$TARGET_OS = xdarwin; then\n@@ -382,7 +398,8 @@ AC_DEFUN([_BITCOIN_QT_FIND_LIBS_WITHOUT_PKGCONFIG],[\n   BITCOIN_QT_CHECK(AC_CHECK_LIB([z] ,[main],,AC_MSG_WARN([zlib not found. Assuming qt has it built-in])))\n   BITCOIN_QT_CHECK(AC_CHECK_LIB([png] ,[main],,AC_MSG_WARN([libpng not found. Assuming qt has it built-in])))\n   BITCOIN_QT_CHECK(AC_CHECK_LIB([jpeg] ,[main],,AC_MSG_WARN([libjpeg not found. Assuming qt has it built-in])))\n-  BITCOIN_QT_CHECK(AC_CHECK_LIB([pcre16] ,[main],,AC_MSG_WARN([libpcre16 not found. Assuming qt has it built-in])))\n+  BITCOIN_QT_CHECK(AC_SEARCH_LIBS([pcre16_exec], [qtpcre pcre16],,AC_MSG_WARN([libpcre16 not found. Assuming qt has it built-in])))\n+  BITCOIN_QT_CHECK(AC_SEARCH_LIBS([hb_ot_tags_from_script] ,[qtharfbuzzng harfbuzz],,AC_MSG_WARN([libharfbuzz not found. Assuming qt has it built-in or support is disabled])))\n   BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Core]   ,[main],,BITCOIN_QT_FAIL(lib$QT_LIB_PREFIXCore not found)))\n   BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Gui]    ,[main],,BITCOIN_QT_FAIL(lib$QT_LIB_PREFIXGui not found)))\n   BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Network],[main],,BITCOIN_QT_FAIL(lib$QT_LIB_PREFIXNetwork not found)))"
      },
      {
        "sha": "cba2fbd1513e34582732732188da8f36507d5563",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 109,
        "deletions": 34,
        "changes": 143,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6850d58f7dd87de44dd25be0fc1067625fa8d3a/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6850d58f7dd87de44dd25be0fc1067625fa8d3a/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=f6850d58f7dd87de44dd25be0fc1067625fa8d3a",
        "patch": "@@ -1,62 +1,139 @@\n PACKAGE=qt\n-$(package)_version=5.2.1\n-$(package)_download_path=http://download.qt-project.org/official_releases/qt/5.2/$($(package)_version)/single\n-$(package)_file_name=$(package)-everywhere-opensource-src-$($(package)_version).tar.gz\n-$(package)_sha256_hash=84e924181d4ad6db00239d87250cc89868484a14841f77fb85ab1f1dbdcd7da1\n+$(package)_version=5.5.0\n+$(package)_download_path=http://download.qt.io/official_releases/qt/5.5/$($(package)_version)/submodules\n+$(package)_suffix=opensource-src-$($(package)_version).tar.gz\n+$(package)_file_name=qtbase-$($(package)_suffix)\n+$(package)_sha256_hash=7e82b1318f88e56a2a9376e069aa608d4fd96b48cb0e1b880ae658b0a1af0561\n $(package)_dependencies=openssl\n $(package)_linux_dependencies=freetype fontconfig dbus libxcb libX11 xproto libXext\n $(package)_build_subdir=qtbase\n $(package)_qt_libs=corelib network widgets gui plugins testlib\n-$(package)_patches=mac-qmake.conf fix-xcb-include-order.patch qt5-tablet-osx.patch qt5-yosemite.patch\n+$(package)_patches=mac-qmake.conf fix-xcb-include-order.patch mingw-uuidof.patch\n+\n+$(package)_qttranslations_file_name=qttranslations-$($(package)_suffix)\n+$(package)_qttranslations_sha256_hash=c4bd6db6e426965c6f8824c54e81f68bbd61e2bae1bcadc328c6e81c45902a0d\n+\n+$(package)_qttools_file_name=qttools-$($(package)_suffix)\n+$(package)_qttools_sha256_hash=d9e06bd19ecc86afba5e95d45a906d1bc1ad579aa70001e36143c1aaf695bdd6\n+\n+$(package)_extra_sources  = $($(package)_qttranslations_file_name)\n+$(package)_extra_sources += $($(package)_qttools_file_name)\n \n define $(package)_set_vars\n $(package)_config_opts_release = -release\n $(package)_config_opts_debug   = -debug\n-$(package)_config_opts += -opensource -confirm-license -no-audio-backend -no-sql-tds -no-glib -no-icu\n-$(package)_config_opts += -no-cups -no-iconv -no-gif -no-audio-backend -no-freetype\n-$(package)_config_opts += -no-sql-sqlite -no-nis -no-cups -no-iconv -no-pch\n-$(package)_config_opts += -no-gif -no-feature-style-plastique\n-$(package)_config_opts += -no-qml-debug -no-pch -no-nis -nomake examples -nomake tests\n-$(package)_config_opts += -no-feature-style-cde -no-feature-style-s60 -no-feature-style-motif\n-$(package)_config_opts += -no-feature-style-windowsmobile -no-feature-style-windowsce\n-$(package)_config_opts += -no-feature-style-cleanlooks\n-$(package)_config_opts += -no-sql-db2 -no-sql-ibase -no-sql-oci -no-sql-tds -no-sql-mysql\n-$(package)_config_opts += -no-sql-odbc -no-sql-psql -no-sql-sqlite -no-sql-sqlite2\n-$(package)_config_opts += -skip qtsvg -skip qtwebkit -skip qtwebkit-examples -skip qtserialport\n-$(package)_config_opts += -skip qtdeclarative -skip qtmultimedia -skip qtimageformats -skip qtx11extras\n-$(package)_config_opts += -skip qtlocation -skip qtsensors -skip qtquick1 -skip qtxmlpatterns\n-$(package)_config_opts += -skip qtquickcontrols -skip qtactiveqt -skip qtconnectivity -skip qtmacextras\n-$(package)_config_opts += -skip qtwinextras -skip qtxmlpatterns -skip qtscript -skip qtdoc\n-\n-$(package)_config_opts += -prefix $(host_prefix) -bindir $(build_prefix)/bin\n-$(package)_config_opts += -no-c++11 -openssl-linked  -v -static -silent -pkg-config\n-$(package)_config_opts += -qt-libpng -qt-libjpeg -qt-zlib -qt-pcre\n+$(package)_config_opts += -opensource -confirm-license\n+$(package)_config_opts += -no-audio-backend\n+$(package)_config_opts += -no-glib\n+$(package)_config_opts += -no-icu\n+$(package)_config_opts += -no-cups\n+$(package)_config_opts += -no-iconv\n+$(package)_config_opts += -no-gif\n+$(package)_config_opts += -no-freetype\n+$(package)_config_opts += -no-nis\n+$(package)_config_opts += -no-pch\n+$(package)_config_opts += -no-qml-debug\n+$(package)_config_opts += -nomake examples\n+$(package)_config_opts += -nomake tests\n+$(package)_config_opts += -no-feature-style-windowsmobile\n+$(package)_config_opts += -no-feature-style-windowsce\n+$(package)_config_opts += -no-sql-db2\n+$(package)_config_opts += -no-sql-ibase\n+$(package)_config_opts += -no-sql-oci\n+$(package)_config_opts += -no-sql-tds\n+$(package)_config_opts += -no-sql-mysql\n+$(package)_config_opts += -no-sql-odbc\n+$(package)_config_opts += -no-sql-psql\n+$(package)_config_opts += -no-sql-sqlite\n+$(package)_config_opts += -no-sql-sqlite2\n+$(package)_config_opts += -prefix $(host_prefix)\n+$(package)_config_opts += -hostprefix $(build_prefix)\n+$(package)_config_opts += -bindir $(build_prefix)/bin\n+$(package)_config_opts += -no-c++11\n+$(package)_config_opts += -openssl-linked\n+$(package)_config_opts += -v\n+$(package)_config_opts += -static\n+$(package)_config_opts += -silent\n+$(package)_config_opts += -pkg-config\n+$(package)_config_opts += -qt-libpng\n+$(package)_config_opts += -qt-libjpeg\n+$(package)_config_opts += -qt-zlib\n+$(package)_config_opts += -qt-pcre\n+$(package)_config_opts += -no-pulseaudio\n+$(package)_config_opts += -no-openvg\n+$(package)_config_opts += -no-xrender\n+$(package)_config_opts += -no-alsa\n+$(package)_config_opts += -no-mtdev\n+$(package)_config_opts += -no-gstreamer\n+$(package)_config_opts += -no-mitshm\n+$(package)_config_opts += -no-kms\n+$(package)_config_opts += -no-reduce-relocations\n+$(package)_config_opts += -no-egl\n+$(package)_config_opts += -no-eglfs\n+$(package)_config_opts += -no-linuxfb\n+$(package)_config_opts += -no-xinput2\n+$(package)_config_opts += -no-libudev\n+$(package)_config_opts += -no-use-gold-linker\n+$(package)_config_opts += -reduce-exports\n+$(package)_config_opts += -optimized-qmake\n \n ifneq ($(build_os),darwin)\n-$(package)_config_opts_darwin = -xplatform macx-clang-linux -device-option MAC_SDK_PATH=$(OSX_SDK) -device-option CROSS_COMPILE=\"$(host)-\"\n-$(package)_config_opts_darwin += -device-option MAC_MIN_VERSION=$(OSX_MIN_VERSION) -device-option MAC_TARGET=$(host) -device-option MAC_LD64_VERSION=$(LD64_VERSION)\n+$(package)_config_opts_darwin = -xplatform macx-clang-linux\n+$(package)_config_opts_darwin += -device-option MAC_SDK_PATH=$(OSX_SDK)\n+$(package)_config_opts_darwin += -device-option MAC_SDK_VERSION=$(OSX_SDK_VERSION)\n+$(package)_config_opts_darwin += -device-option CROSS_COMPILE=\"$(host)-\"\n+$(package)_config_opts_darwin += -device-option MAC_MIN_VERSION=$(OSX_MIN_VERSION)\n+$(package)_config_opts_darwin += -device-option MAC_TARGET=$(host)\n+$(package)_config_opts_darwin += -device-option MAC_LD64_VERSION=$(LD64_VERSION)\n endif\n \n-$(package)_config_opts_linux  = -qt-xkbcommon -qt-xcb  -no-eglfs -no-linuxfb -system-freetype -no-sm -fontconfig -no-xinput2 -no-libudev -no-egl -no-opengl\n+$(package)_config_opts_linux  = -qt-xkbcommon\n+$(package)_config_opts_linux += -qt-xcb\n+$(package)_config_opts_linux += -system-freetype\n+$(package)_config_opts_linux += -no-sm\n+$(package)_config_opts_linux += -fontconfig\n+$(package)_config_opts_linux += -no-opengl\n $(package)_config_opts_arm_linux  = -platform linux-g++ -xplatform $(host)\n $(package)_config_opts_i686_linux  = -xplatform linux-g++-32\n $(package)_config_opts_mingw32  = -no-opengl -xplatform win32-g++ -device-option CROSS_COMPILE=\"$(host)-\"\n $(package)_build_env  = QT_RCC_TEST=1\n endef\n \n+define $(package)_fetch_cmds\n+$(call fetch_file,$(package),$($(package)_download_path),$($(package)_download_file),$($(package)_file_name),$($(package)_sha256_hash)) && \\\n+$(call fetch_file,$(package),$($(package)_download_path),$($(package)_qttranslations_file_name),$($(package)_qttranslations_file_name),$($(package)_qttranslations_sha256_hash)) && \\\n+$(call fetch_file,$(package),$($(package)_download_path),$($(package)_qttools_file_name),$($(package)_qttools_file_name),$($(package)_qttools_sha256_hash))\n+endef\n+\n+define $(package)_extract_cmds\n+  mkdir -p $($(package)_extract_dir) && \\\n+  echo \"$($(package)_sha256_hash)  $($(package)_source)\" > $($(package)_extract_dir)/.$($(package)_file_name).hash && \\\n+  echo \"$($(package)_qttranslations_sha256_hash)  $($(package)_source_dir)/$($(package)_qttranslations_file_name)\" > $($(package)_extract_dir)/.$($(package)_file_name).hash && \\\n+  echo \"$($(package)_qttools_sha256_hash)  $($(package)_source_dir)/$($(package)_qttools_file_name)\" > $($(package)_extract_dir)/.$($(package)_file_name).hash && \\\n+  $(build_SHA256SUM) -c $($(package)_extract_dir)/.$($(package)_file_name).hash && \\\n+  mkdir qtbase && \\\n+  tar --strip-components=1 -xf $($(package)_source) -C qtbase && \\\n+  mkdir qttranslations && \\\n+  tar --strip-components=1 -xf $($(package)_source_dir)/$($(package)_qttranslations_file_name) -C qttranslations && \\\n+  mkdir qttools && \\\n+  tar --strip-components=1 -xf $($(package)_source_dir)/$($(package)_qttools_file_name) -C qttools\n+endef\n+\n define $(package)_preprocess_cmds\n   sed -i.old \"s|updateqm.commands = \\$$$$\\$$$$LRELEASE|updateqm.commands = $($(package)_extract_dir)/qttools/bin/lrelease|\" qttranslations/translations/translations.pro && \\\n   sed -i.old \"s/src_plugins.depends = src_sql src_xml src_network/src_plugins.depends = src_xml src_network/\" qtbase/src/src.pro && \\\n-  sed -i.old \"/XIproto.h/d\" qtbase/src/plugins/platforms/xcb/qxcbxsettings.cpp && \\\n+  sed -i.old \"s/PIDLIST_ABSOLUTE/ITEMIDLIST */\" qtbase/src/plugins/platforms/windows/qwindowscontext.h &&\\\n+  sed -i.old \"s/PIDLIST_ABSOLUTE/ITEMIDLIST */\" qtbase/src/plugins/platforms/windows/qwindowsdialoghelpers.cpp &&\\\n+  sed -i.old \"s/PCIDLIST_ABSOLUTE/const ITEMIDLIST */\" qtbase/src/plugins/platforms/windows/qwindowscontext.h &&\\\n+  sed -i.old \"s|X11/extensions/XIproto.h|X11/X.h|\" qtbase/src/plugins/platforms/xcb/qxcbxsettings.cpp && \\\n   sed -i.old 's/if \\[ \"$$$$XPLATFORM_MAC\" = \"yes\" \\]; then xspecvals=$$$$(macSDKify/if \\[ \"$$$$BUILD_ON_MAC\" = \"yes\" \\]; then xspecvals=$$$$(macSDKify/' qtbase/configure && \\\n   mkdir -p qtbase/mkspecs/macx-clang-linux &&\\\n   cp -f qtbase/mkspecs/macx-clang/Info.plist.lib qtbase/mkspecs/macx-clang-linux/ &&\\\n   cp -f qtbase/mkspecs/macx-clang/Info.plist.app qtbase/mkspecs/macx-clang-linux/ &&\\\n   cp -f qtbase/mkspecs/macx-clang/qplatformdefs.h qtbase/mkspecs/macx-clang-linux/ &&\\\n   cp -f $($(package)_patch_dir)/mac-qmake.conf qtbase/mkspecs/macx-clang-linux/qmake.conf && \\\n   patch -p1 < $($(package)_patch_dir)/fix-xcb-include-order.patch && \\\n-  patch -p1 < $($(package)_patch_dir)/qt5-tablet-osx.patch && \\\n-  patch -d qtbase -p1 < $($(package)_patch_dir)/qt5-yosemite.patch && \\\n+  patch -p1 < $($(package)_patch_dir)/mingw-uuidof.patch && \\\n   echo \"QMAKE_CFLAGS     += $($(package)_cflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n   echo \"QMAKE_CXXFLAGS   += $($(package)_cxxflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n   echo \"QMAKE_LFLAGS     += $($(package)_ldflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n@@ -69,7 +146,6 @@ define $(package)_config_cmds\n   export PKG_CONFIG_SYSROOT_DIR=/ && \\\n   export PKG_CONFIG_LIBDIR=$(host_prefix)/lib/pkgconfig && \\\n   export PKG_CONFIG_PATH=$(host_prefix)/share/pkgconfig  && \\\n-  export CPATH=$(host_prefix)/include && \\\n   ./configure $($(package)_config_opts) && \\\n   $(MAKE) sub-src-clean && \\\n   cd ../qttranslations && ../qtbase/bin/qmake qttranslations.pro -o Makefile && \\\n@@ -78,7 +154,6 @@ define $(package)_config_cmds\n endef\n \n define $(package)_build_cmds\n-  export CPATH=$(host_prefix)/include && \\\n   $(MAKE) -C src $(addprefix sub-,$($(package)_qt_libs)) && \\\n   $(MAKE) -C ../qttools/src/linguist/lrelease && \\\n   $(MAKE) -C ../qttranslations\n@@ -94,6 +169,6 @@ define $(package)_stage_cmds\n endef\n \n define $(package)_postprocess_cmds\n-  rm -rf mkspecs/ lib/cmake/ && \\\n-  rm lib/libQt5Bootstrap.a lib/lib*.la lib/*.prl plugins/*/*.prl\n+  rm -rf native/mkspecs/ native/lib/ lib/cmake/ && \\\n+  rm -f lib/lib*.la lib/*.prl plugins/*/*.prl\n endef"
      },
      {
        "sha": "ae469ea94bff0e7d3b833a836f6c56e02c12db6a",
        "filename": "depends/patches/qt/fix-xcb-include-order.patch",
        "status": "modified",
        "additions": 23,
        "deletions": 9,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6850d58f7dd87de44dd25be0fc1067625fa8d3a/depends/patches/qt/fix-xcb-include-order.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6850d58f7dd87de44dd25be0fc1067625fa8d3a/depends/patches/qt/fix-xcb-include-order.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/fix-xcb-include-order.patch?ref=f6850d58f7dd87de44dd25be0fc1067625fa8d3a",
        "patch": "@@ -1,14 +1,15 @@\n---- old/qtbase/src/plugins/platforms/xcb/xcb-plugin.pro 2015-03-17 02:06:42.705930685 +0000\n-+++ new/qtbase/src/plugins/platforms/xcb/xcb-plugin.pro 2015-03-17 02:08:41.281926351 +0000\n-@@ -103,7 +103,6 @@\n+--- old/qtbase/src/plugins/platforms/xcb/xcb_qpa_lib.pro 2015-03-17 02:06:42.705930685 +0000\n++++ new/qtbase/src/plugins/platforms/xcb/xcb_qpa_lib.pro 2015-03-17 02:08:41.281926351 +0000\n+@@ -94,8 +94,6 @@\n \n  DEFINES += $$QMAKE_DEFINES_XCB\n  LIBS += $$QMAKE_LIBS_XCB\n -QMAKE_CXXFLAGS += $$QMAKE_CFLAGS_XCB\n+-QMAKE_CFLAGS += $$QMAKE_CFLAGS_XCB\n \n  CONFIG += qpa/genericunixfontdatabase\n \n-@@ -118,7 +117,8 @@\n+@@ -104,7 +102,8 @@\n  contains(QT_CONFIG, xcb-qt) {\n      DEFINES += XCB_USE_RENDER\n      XCB_DIR = ../../../3rdparty/xcb\n@@ -17,15 +18,28 @@\n +    QMAKE_CXXFLAGS += -I$$XCB_DIR/include -I$$XCB_DIR/sysinclude $$QMAKE_CFLAGS_XCB\n      LIBS += -lxcb -L$$OUT_PWD/xcb-static -lxcb-static\n  } else {\n-     LIBS += -lxcb -lxcb-image -lxcb-icccm -lxcb-sync -lxcb-xfixes -lxcb-shm -lxcb-randr\n+     LIBS += -lxcb -lxcb-image -lxcb-icccm -lxcb-sync -lxcb-xfixes -lxcb-shm -lxcb-randr -lxcb-shape -lxcb-keysyms\n --- old/qtbase/src/plugins/platforms/xcb/xcb-static/xcb-static.pro      2015-03-17 02:07:04.641929383 +0000\n +++ new/qtbase/src/plugins/platforms/xcb/xcb-static/xcb-static.pro      2015-03-17 02:10:15.485922059 +0000\n-@@ -8,7 +8,7 @@\n+@@ -8,7 +8,8 @@\n \n  XCB_DIR = ../../../../3rdparty/xcb\n \n -INCLUDEPATH += $$XCB_DIR/include $$XCB_DIR/include/xcb $$XCB_DIR/sysinclude\n-+QMAKE_CFLAGS += -I$$XCB_DIR/include -I$$XCB_DIR/include/xcb -I$$XCB_DIR/sysinclude $$QMAKE_CFLAGS_XCB\n++QMAKE_CFLAGS += -I$$XCB_DIR/include -I$$XCB_DIR/include/xcb -I$$XCB_DIR/sysinclude\n++QMAKE_CXXFLAGS += -I$$XCB_DIR/include -I$$XCB_DIR/include/xcb -I$$XCB_DIR/sysinclude\n \n- # ignore compiler warnings in 3rdparty code\n- QMAKE_CFLAGS_STATIC_LIB+=-w\n+ QMAKE_CXXFLAGS += $$QMAKE_CFLAGS_XCB\n+ QMAKE_CFLAGS += $$QMAKE_CFLAGS_XCB\n+--- old/qtbase/src/plugins/platforms/xcb/xcb-plugin.pro\t2015-07-24 16:02:59.530038830 -0400\n++++ new/qtbase/src/plugins/platforms/xcb/xcb-plugin.pro\t2015-07-24 16:01:22.106037459 -0400\n+@@ -11,3 +11,9 @@\n+     qxcbmain.cpp\n+ OTHER_FILES += xcb.json README\n+\n++contains(QT_CONFIG, xcb-qt) {\n++    DEFINES += XCB_USE_RENDER\n++    XCB_DIR = ../../../3rdparty/xcb\n++    QMAKE_CFLAGS += -I$$XCB_DIR/include -I$$XCB_DIR/sysinclude $$QMAKE_CFLAGS_XCB\n++    QMAKE_CXXFLAGS += -I$$XCB_DIR/include -I$$XCB_DIR/sysinclude $$QMAKE_CFLAGS_XCB\n++}"
      },
      {
        "sha": "a6d0070cca6489848394febfa8a1b6e36925ba6c",
        "filename": "depends/patches/qt/mac-qmake.conf",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6850d58f7dd87de44dd25be0fc1067625fa8d3a/depends/patches/qt/mac-qmake.conf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6850d58f7dd87de44dd25be0fc1067625fa8d3a/depends/patches/qt/mac-qmake.conf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/mac-qmake.conf?ref=f6850d58f7dd87de44dd25be0fc1067625fa8d3a",
        "patch": "@@ -1,5 +1,6 @@\n MAKEFILE_GENERATOR = UNIX\n CONFIG += app_bundle incremental global_init_link_order lib_version_first plugin_no_soname absolute_library_soname\n+DEFINES += QT_NO_PRINTER QT_NO_PRINTDIALOG\n QMAKE_INCREMENTAL_STYLE = sublib\n include(../common/macx.conf)\n include(../common/gcc-base-mac.conf)\n@@ -10,8 +11,10 @@ QMAKE_XCODE_VERSION=4.3\n QMAKE_XCODE_DEVELOPER_PATH=/Developer\n QMAKE_MACOSX_DEPLOYMENT_TARGET = $${MAC_MIN_VERSION}\n QMAKE_MAC_SDK=macosx\n-QMAKE_MAC_SDK.macosx.path = $$QMAKE_MAC_SDK_PATH\n+QMAKE_MAC_SDK.macosx.path = $${MAC_SDK_PATH}\n QMAKE_MAC_SDK.macosx.platform_name = macosx\n+QMAKE_MAC_SDK.macosx.version = $${MAC_SDK_VERSION}\n+QMAKE_MAC_SDK.macosx.platform_path = /phony\n QMAKE_CFLAGS += -target $${MAC_TARGET}\n QMAKE_OBJECTIVE_CFLAGS += $$QMAKE_CFLAGS\n QMAKE_CXXFLAGS += $$QMAKE_CFLAGS"
      },
      {
        "sha": "975366e61229c891974f60f91a74e8c9f7a62d5a",
        "filename": "depends/patches/qt/mingw-uuidof.patch",
        "status": "added",
        "additions": 44,
        "deletions": 0,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6850d58f7dd87de44dd25be0fc1067625fa8d3a/depends/patches/qt/mingw-uuidof.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6850d58f7dd87de44dd25be0fc1067625fa8d3a/depends/patches/qt/mingw-uuidof.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/mingw-uuidof.patch?ref=f6850d58f7dd87de44dd25be0fc1067625fa8d3a",
        "patch": "@@ -0,0 +1,44 @@\n+--- old/qtbase/src/plugins/platforms/windows/qwindowscontext.cpp\t2015-06-20 17:40:20.956781548 -0400\n++++ new/qtbase/src/plugins/platforms/windows/qwindowscontext.cpp\t2015-06-20 17:29:32.052772416 -0400\n+@@ -69,7 +69,7 @@\n+ #include <stdlib.h>\n+ #include <stdio.h>\n+ #include <windowsx.h>\n+-#ifndef Q_OS_WINCE\n++#if !defined(Q_OS_WINCE) && (!defined(USE___UUIDOF) || (defined(USE___UUIDOF) && USE___UUIDOF == 1))\n+ #  include <comdef.h>\n+ #endif\n+ \n+@@ -762,7 +762,7 @@\n+                           HWND_MESSAGE, NULL, (HINSTANCE)GetModuleHandle(0), NULL);\n+ }\n+ \n+-#ifndef Q_OS_WINCE\n++#if !defined(Q_OS_WINCE) && (!defined(USE___UUIDOF) || (defined(USE___UUIDOF) && USE___UUIDOF == 1))\n+ // Re-engineered from the inline function _com_error::ErrorMessage().\n+ // We cannot use it directly since it uses swprintf_s(), which is not\n+ // present in the MSVCRT.DLL found on Windows XP (QTBUG-35617).\n+@@ -781,7 +781,7 @@\n+          return QStringLiteral(\"IDispatch error #\") + QString::number(wCode);\n+      return QStringLiteral(\"Unknown error 0x0\") + QString::number(comError.Error(), 16);\n+ }\n+-#endif // !Q_OS_WINCE\n++#endif // !defined(Q_OS_WINCE) && (!defined(USE___UUIDOF) || (defined(USE___UUIDOF) && USE___UUIDOF == 1))\n+ \n+ /*!\n+     \\brief Common COM error strings.\n+@@ -846,12 +846,12 @@\n+     default:\n+         break;\n+     }\n+-#ifndef Q_OS_WINCE\n++#if !defined(Q_OS_WINCE) && (!defined(USE___UUIDOF) || (defined(USE___UUIDOF) && USE___UUIDOF == 1))\n+     _com_error error(hr);\n+     result += QByteArrayLiteral(\" (\");\n+     result += errorMessageFromComError(error);\n+     result += ')';\n+-#endif // !Q_OS_WINCE\n++#endif // !defined(Q_OS_WINCE) && (!defined(USE___UUIDOF) || (defined(USE___UUIDOF) && USE___UUIDOF == 1))\n+     return result;\n+ }\n+ "
      },
      {
        "sha": "7deabf8d4e04262c3870e9adbc6eb4b4a185d29f",
        "filename": "depends/patches/qt/qt5-tablet-osx.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 20,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfd807ff3287f391dcf184b755997fb9d0456a1a/depends/patches/qt/qt5-tablet-osx.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfd807ff3287f391dcf184b755997fb9d0456a1a/depends/patches/qt/qt5-tablet-osx.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/qt5-tablet-osx.patch?ref=bfd807ff3287f391dcf184b755997fb9d0456a1a",
        "patch": "@@ -1,20 +0,0 @@\n---- old/qtbase/src/widgets/kernel/qwidgetwindow.cpp\t2014-09-05 20:45:18.717570370 -0400\n-+++ new/qtbase/src/widgets/kernel/qwidgetwindow.cpp\t2014-09-05 20:52:38.653576561 -0400\n-@@ -57,7 +57,7 @@\n- Q_WIDGETS_EXPORT extern bool qt_tab_all_widgets();\n- \n- QWidget *qt_button_down = 0; // widget got last button-down\n--static QWidget *qt_tablet_target = 0;\n-+static QPointer<QWidget> qt_tablet_target = 0;\n- \n- // popup control\n- QWidget *qt_popup_down = 0; // popup that contains the pressed widget\n-@@ -96,8 +96,6 @@\n- \n- QWidgetWindow::~QWidgetWindow()\n- {\n--    if (m_widget == qt_tablet_target)\n--        qt_tablet_target = 0;\n- }\n- \n- #ifndef QT_NO_ACCESSIBILITY"
      },
      {
        "sha": "d569d34d47f2ddd9372c2e45487a58f0fedbf739",
        "filename": "depends/patches/qt/qt5-yosemite.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 52,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfd807ff3287f391dcf184b755997fb9d0456a1a/depends/patches/qt/qt5-yosemite.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfd807ff3287f391dcf184b755997fb9d0456a1a/depends/patches/qt/qt5-yosemite.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/qt5-yosemite.patch?ref=bfd807ff3287f391dcf184b755997fb9d0456a1a",
        "patch": "@@ -1,52 +0,0 @@\n-The following patch was taken from upstream:\n-https://qt.gitorious.org/qt/qtbase/commit/70e4428b6f1c6a4bad112203f67ee7d22107616c.patch\n-\n-The first hunk was removed because it conflicts with 5.2.1, and is not currently needed.\n-\n-From 70e4428b6f1c6a4bad112203f67ee7d22107616c Mon Sep 17 00:00:00 2001\n-From: Gabriel de Dietrich <gabriel.dedietrich@digia.com>\n-Date: Tue, 3 Jun 2014 14:20:20 +0200\n-Subject: [PATCH] Cocoa: Adapt to Xcode 6 clang version sudden pickiness\n-MIME-Version: 1.0\n-Content-Type: text/plain; charset=UTF-8\n-Content-Transfer-Encoding: 8bit\n-\n-Yes, that means OS X Yosemite fix.\n-\n-Change-Id: I236f7af7b803de24ff0895e04c9a9253b5cfdb3b\n-Reviewed-by: Morten Johan S\u00f8rvig <morten.sorvig@digia.com>\n----\n- .../platforms/cocoa/qcocoaaccessibilityelement.mm  |    2 +-\n- .../platforms/cocoa/qcocoaapplicationdelegate.mm   |    2 +-\n- src/plugins/platforms/cocoa/qcocoamenuloader.mm    |    2 +-\n- 3 files changed, 3 insertions(+), 3 deletions(-)\n-\n-diff --git a/src/plugins/platforms/cocoa/qcocoaapplicationdelegate.mm b/src/plugins/platforms/cocoa/qcocoaapplicationdelegate.mm\n-index f841184..548c6a2 100644\n---- a/src/plugins/platforms/cocoa/qcocoaapplicationdelegate.mm\n-+++ b/src/plugins/platforms/cocoa/qcocoaapplicationdelegate.mm\n-@@ -124,7 +124,7 @@ static void cleanupCocoaApplicationDelegate()\n-     [dockMenu release];\n-     [qtMenuLoader release];\n-     if (reflectionDelegate) {\n--        [NSApp setDelegate:reflectionDelegate];\n-+        [[NSApplication sharedApplication] setDelegate:reflectionDelegate];\n-         [reflectionDelegate release];\n-     }\n-     [[NSNotificationCenter defaultCenter] removeObserver:self];\n-diff --git a/src/plugins/platforms/cocoa/qcocoamenuloader.mm b/src/plugins/platforms/cocoa/qcocoamenuloader.mm\n-index 60bc3b5..9340e94 100644\n---- a/src/plugins/platforms/cocoa/qcocoamenuloader.mm\n-+++ b/src/plugins/platforms/cocoa/qcocoamenuloader.mm\n-@@ -174,7 +174,7 @@ QT_END_NAMESPACE\n- - (void)removeActionsFromAppMenu\n- {\n-     for (NSMenuItem *item in [appMenu itemArray])\n--        [item setTag:nil];\n-+        [item setTag:0];\n- }\n- \n- - (void)dealloc\n--- \n-1.7.1\n-"
      },
      {
        "sha": "8a78533420cae831178cc3bfb4b04ad1b60c61bc",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6850d58f7dd87de44dd25be0fc1067625fa8d3a/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6850d58f7dd87de44dd25be0fc1067625fa8d3a/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=f6850d58f7dd87de44dd25be0fc1067625fa8d3a",
        "patch": "@@ -59,7 +59,9 @@ Q_IMPORT_PLUGIN(qtwcodecs)\n Q_IMPORT_PLUGIN(qkrcodecs)\n Q_IMPORT_PLUGIN(qtaccessiblewidgets)\n #else\n+#if QT_VERSION < 0x050400\n Q_IMPORT_PLUGIN(AccessibleFactory)\n+#endif\n #if defined(QT_QPA_PLATFORM_XCB)\n Q_IMPORT_PLUGIN(QXcbIntegrationPlugin);\n #elif defined(QT_QPA_PLATFORM_WINDOWS)"
      }
    ]
  },
  {
    "sha": "d43297c5ba951df535df704e321a883f97475c35",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNDMyOTdjNWJhOTUxZGY1MzVkZjcwNGUzMjFhODgzZjk3NDc1YzM1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-27T11:16:19Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-27T11:20:54Z"
      },
      "message": "Merge pull request #6468\n\n6f8b6d3 don't try to decode invalid encoded ext keys (Jonas Schnelli)\n8d2af54 extend bip32 tests to cover Base58c/CExtKey decode (Jonas Schnelli)\n7cb1f9f fix and extend CBitcoinExtKeyBase template (Jonas Schnelli)",
      "tree": {
        "sha": "823facd0526aa0bb7cacd25bb415ece26c1e1f77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/823facd0526aa0bb7cacd25bb415ece26c1e1f77"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d43297c5ba951df535df704e321a883f97475c35",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVthQWAAoJEHSBCwEjRsmmML0H/2mSppkouhuEngHNGCaYWTS6\nunl/rlap+5dbhP0PO+jRKgGlzLDO1uLUv6DVbR/XOt9OZ+8daEHk1dUtXjO4yavP\nfinJYfE1SsO1QSHJPVH2X+Nqut+QJh3kzKvJwcGUIoJNWkK15iXE8GUfpHVlN1eQ\nsX6DXJgXZ8hWmQqFP6TM2WuiX56qKSVuSrIlwNxM+pKcuxI2dv7nUN3ZTBs4q9J7\nCw+IPM3K8D4nOwfH8lDyaT8jBQ5RykVEGITxfdfL/y3kj+pqoc2gkycKfT3epTzB\n4bHjYumI1x4cYWvCxp+HdIesWBjRe6CpJRCE85pGUMsthowQyAVlS2qv0T265DE=\n=7nD3\n-----END PGP SIGNATURE-----",
        "payload": "tree 823facd0526aa0bb7cacd25bb415ece26c1e1f77\nparent f6850d58f7dd87de44dd25be0fc1067625fa8d3a\nparent 6f8b6d339bf6d6f7fe5a23180e668f7734755d91\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1437995779 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1437996054 +0200\n\nMerge pull request #6468\n\n6f8b6d3 don't try to decode invalid encoded ext keys (Jonas Schnelli)\n8d2af54 extend bip32 tests to cover Base58c/CExtKey decode (Jonas Schnelli)\n7cb1f9f fix and extend CBitcoinExtKeyBase template (Jonas Schnelli)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d43297c5ba951df535df704e321a883f97475c35",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d43297c5ba951df535df704e321a883f97475c35",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d43297c5ba951df535df704e321a883f97475c35/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f6850d58f7dd87de44dd25be0fc1067625fa8d3a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6850d58f7dd87de44dd25be0fc1067625fa8d3a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f6850d58f7dd87de44dd25be0fc1067625fa8d3a"
      },
      {
        "sha": "6f8b6d339bf6d6f7fe5a23180e668f7734755d91",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f8b6d339bf6d6f7fe5a23180e668f7734755d91",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6f8b6d339bf6d6f7fe5a23180e668f7734755d91"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 19,
      "deletions": 1
    },
    "files": [
      {
        "sha": "90014b9496a8f887cdeee0017edaa3c5aba03d5d",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d43297c5ba951df535df704e321a883f97475c35/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d43297c5ba951df535df704e321a883f97475c35/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=d43297c5ba951df535df704e321a883f97475c35",
        "patch": "@@ -146,14 +146,21 @@ template<typename K, int Size, CChainParams::Base58Type Type> class CBitcoinExtK\n \n     K GetKey() {\n         K ret;\n-        ret.Decode(&vchData[0], &vchData[Size]);\n+        if (vchData.size() == Size) {\n+            //if base58 encouded data not holds a ext key, return a !IsValid() key\n+            ret.Decode(&vchData[0]);\n+        }\n         return ret;\n     }\n \n     CBitcoinExtKeyBase(const K &key) {\n         SetKey(key);\n     }\n \n+    CBitcoinExtKeyBase(const std::string& strBase58c) {\n+        SetString(strBase58c.c_str(), Params().Base58Prefix(Type).size());\n+    }\n+\n     CBitcoinExtKeyBase() {}\n };\n "
      },
      {
        "sha": "69084213a2d4464dd018dcd518487996c7f97046",
        "filename": "src/test/bip32_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d43297c5ba951df535df704e321a883f97475c35/src/test/bip32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d43297c5ba951df535df704e321a883f97475c35/src/test/bip32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bip32_tests.cpp?ref=d43297c5ba951df535df704e321a883f97475c35",
        "patch": "@@ -88,12 +88,23 @@ void RunTest(const TestVector &test) {\n         unsigned char data[74];\n         key.Encode(data);\n         pubkey.Encode(data);\n+\n         // Test private key\n         CBitcoinExtKey b58key; b58key.SetKey(key);\n         BOOST_CHECK(b58key.ToString() == derive.prv);\n+\n+        CBitcoinExtKey b58keyDecodeCheck(derive.prv);\n+        CExtKey checkKey = b58keyDecodeCheck.GetKey();\n+        assert(checkKey == key); //ensure a base58 decoded key also matches\n+\n         // Test public key\n         CBitcoinExtPubKey b58pubkey; b58pubkey.SetKey(pubkey);\n         BOOST_CHECK(b58pubkey.ToString() == derive.pub);\n+\n+        CBitcoinExtPubKey b58PubkeyDecodeCheck(derive.pub);\n+        CExtPubKey checkPubKey = b58PubkeyDecodeCheck.GetKey();\n+        assert(checkPubKey == pubkey); //ensure a base58 decoded pubkey also matches\n+\n         // Derive new keys\n         CExtKey keyNew;\n         BOOST_CHECK(key.Derive(keyNew, derive.nChild));"
      }
    ]
  },
  {
    "sha": "614601be8f30852a04214b652db45c20d920c70f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MTQ2MDFiZThmMzA4NTJhMDQyMTRiNjUyZGI0NWMyMGQ5MjBjNzBm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-06T09:43:56Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-27T11:55:46Z"
      },
      "message": "rpc: Accept strings in AmountFromValue\n\nAccept strings containing decimal values, in addition to bare values.\n\nUseful from JSON-RPC implementations where it's not possible to have\ndirect control over the text of numbers (e.g. where numbers are always\ndoubles), and it's still desired to send an exact value.\n\nThis would allow users to post JSON content with numbers encoded like\n`{\"value\": \"0.00000001\"}` instead of `{\"value\": 0.00000001}` which some\nphp/python encoders wrap into 1e-8, or worse.",
      "tree": {
        "sha": "b38b3729b4db65068f7b8ac316d2575c3b4817fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b38b3729b4db65068f7b8ac316d2575c3b4817fd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/614601be8f30852a04214b652db45c20d920c70f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/614601be8f30852a04214b652db45c20d920c70f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/614601be8f30852a04214b652db45c20d920c70f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/614601be8f30852a04214b652db45c20d920c70f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d43297c5ba951df535df704e321a883f97475c35",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d43297c5ba951df535df704e321a883f97475c35",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d43297c5ba951df535df704e321a883f97475c35"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "03c123a361ac8f83d55145fe3cf22c6cd3c1bad4",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/614601be8f30852a04214b652db45c20d920c70f/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/614601be8f30852a04214b652db45c20d920c70f/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=614601be8f30852a04214b652db45c20d920c70f",
        "patch": "@@ -120,8 +120,8 @@ void RPCTypeCheckObj(const UniValue& o,\n \n CAmount AmountFromValue(const UniValue& value)\n {\n-    if (!value.isNum())\n-        throw JSONRPCError(RPC_TYPE_ERROR, \"Amount is not a number\");\n+    if (!value.isNum() && !value.isStr())\n+        throw JSONRPCError(RPC_TYPE_ERROR, \"Amount is not a number or string\");\n     CAmount amount;\n     if (!ParseFixedPoint(value.getValStr(), 8, &amount))\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount\");"
      }
    ]
  },
  {
    "sha": "7d226b7ca0516c349c73bd79df197a1a14922a1d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZDIyNmI3Y2EwNTE2YzM0OWM3M2JkNzlkZjE5N2ExYTE0OTIyYTFk",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-07-14T19:13:16Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-27T11:55:46Z"
      },
      "message": "[QA] add testcases for parsing strings as values",
      "tree": {
        "sha": "3f3df372b4092c1db25f646151afde91d28a3a05",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3f3df372b4092c1db25f646151afde91d28a3a05"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7d226b7ca0516c349c73bd79df197a1a14922a1d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d226b7ca0516c349c73bd79df197a1a14922a1d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7d226b7ca0516c349c73bd79df197a1a14922a1d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d226b7ca0516c349c73bd79df197a1a14922a1d/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "614601be8f30852a04214b652db45c20d920c70f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/614601be8f30852a04214b652db45c20d920c70f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/614601be8f30852a04214b652db45c20d920c70f"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 49,
      "deletions": 17
    },
    "files": [
      {
        "sha": "f9ec6f429bac5f3a11203c58e26b01eb36d08568",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 49,
        "deletions": 17,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d226b7ca0516c349c73bd79df197a1a14922a1d/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d226b7ca0516c349c73bd79df197a1a14922a1d/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=7d226b7ca0516c349c73bd79df197a1a14922a1d",
        "patch": "@@ -4,11 +4,11 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #\n-# Exercise the wallet.  Ported from wallet.sh.  \n+# Exercise the wallet.  Ported from wallet.sh.\n # Does the following:\n #   a) creates 3 nodes, with an empty chain (no blocks).\n #   b) node0 mines a block\n-#   c) node1 mines 101 blocks, so now nodes 0 and 1 have 50btc, node2 has none. \n+#   c) node1 mines 101 blocks, so now nodes 0 and 1 have 50btc, node2 has none.\n #   d) node0 sends 21 btc to node2, in two transactions (11 btc, then 10 btc).\n #   e) node0 mines a block, collects the fee on the second transaction\n #   f) node1 mines 100 blocks, to mature node0's just-mined block\n@@ -75,14 +75,14 @@ def run_test (self):\n         assert_equal(self.nodes[2].getbalance(), 21)\n \n         # Node0 should have two unspent outputs.\n-        # Create a couple of transactions to send them to node2, submit them through \n-        # node1, and make sure both node0 and node2 pick them up properly: \n+        # Create a couple of transactions to send them to node2, submit them through\n+        # node1, and make sure both node0 and node2 pick them up properly:\n         node0utxos = self.nodes[0].listunspent(1)\n         assert_equal(len(node0utxos), 2)\n \n         # create both transactions\n         txns_to_send = []\n-        for utxo in node0utxos: \n+        for utxo in node0utxos:\n             inputs = []\n             outputs = {}\n             inputs.append({ \"txid\" : utxo[\"txid\"], \"vout\" : utxo[\"vout\"]})\n@@ -149,35 +149,35 @@ def run_test (self):\n         sync_mempools(self.nodes)\n \n         assert(txid1 in self.nodes[3].getrawmempool())\n-        \n+\n         #check if we can list zero value tx as available coins\n         #1. create rawtx\n-        #2. hex-changed one output to 0.0 \n+        #2. hex-changed one output to 0.0\n         #3. sign and send\n         #4. check if recipient (node0) can list the zero value tx\n         usp = self.nodes[1].listunspent()\n         inputs = [{\"txid\":usp[0]['txid'], \"vout\":usp[0]['vout']}]\n         outputs = {self.nodes[1].getnewaddress(): 49.998, self.nodes[0].getnewaddress(): 11.11}\n-        \n+\n         rawTx = self.nodes[1].createrawtransaction(inputs, outputs).replace(\"c0833842\", \"00000000\") #replace 11.11 with 0.0 (int32)\n         decRawTx = self.nodes[1].decoderawtransaction(rawTx)\n         signedRawTx = self.nodes[1].signrawtransaction(rawTx)\n         decRawTx = self.nodes[1].decoderawtransaction(signedRawTx['hex'])\n         zeroValueTxid= decRawTx['txid']\n         sendResp = self.nodes[1].sendrawtransaction(signedRawTx['hex'])\n-        \n+\n         self.sync_all()\n         self.nodes[1].generate(1) #mine a block\n         self.sync_all()\n-        \n+\n         unspentTxs = self.nodes[0].listunspent() #zero value tx must be in listunspents output\n         found = False\n         for uTx in unspentTxs:\n             if uTx['txid'] == zeroValueTxid:\n                 found = True\n                 assert_equal(uTx['amount'], Decimal('0.00000000'));\n         assert(found)\n-        \n+\n         #do some -walletbroadcast tests\n         stop_nodes(self.nodes)\n         wait_bitcoinds()\n@@ -192,17 +192,17 @@ def run_test (self):\n         self.nodes[1].generate(1) #mine a block, tx should not be in there\n         self.sync_all()\n         assert_equal(self.nodes[2].getbalance(), Decimal('59.99800000')); #should not be changed because tx was not broadcasted\n-        \n+\n         #now broadcast from another node, mine a block, sync, and check the balance\n         self.nodes[1].sendrawtransaction(txObjNotBroadcasted['hex'])\n         self.nodes[1].generate(1)\n         self.sync_all()\n         txObjNotBroadcasted = self.nodes[0].gettransaction(txIdNotBroadcasted)\n         assert_equal(self.nodes[2].getbalance(), Decimal('61.99800000')); #should not be\n-        \n+\n         #create another tx\n         txIdNotBroadcasted  = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 2);\n-        \n+\n         #restart the nodes with -walletbroadcast=1\n         stop_nodes(self.nodes)\n         wait_bitcoinds()\n@@ -211,12 +211,44 @@ def run_test (self):\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n         sync_blocks(self.nodes)\n-        \n+\n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n-        \n+\n         #tx should be added to balance because after restarting the nodes tx should be broadcastet\n         assert_equal(self.nodes[2].getbalance(), Decimal('63.99800000')); #should not be\n-        \n+\n+        #send a tx with value in a string (PR#6380 +)\n+        txId  = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), \"2\")\n+        txObj = self.nodes[0].gettransaction(txId)\n+        assert_equal(txObj['amount'], Decimal('-2.00000000'))\n+\n+        txId  = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), \"0.0001\")\n+        txObj = self.nodes[0].gettransaction(txId)\n+        assert_equal(txObj['amount'], Decimal('-0.00010000'))\n+\n+        #check if JSON parser can handle scientific notation in strings\n+        txId  = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), \"1e-4\")\n+        txObj = self.nodes[0].gettransaction(txId)\n+        assert_equal(txObj['amount'], Decimal('-0.00010000'))\n+\n+        #this should fail\n+        errorString = \"\"\n+        try:\n+            txId  = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), \"1f-4\")\n+        except JSONRPCException,e:\n+            errorString = e.error['message']\n+\n+        assert_equal(\"Invalid amount\" in errorString, True);\n+\n+        errorString = \"\"\n+        try:\n+            self.nodes[0].generate(\"2\") #use a string to as block amount parameter must fail because it's not interpreted as amount\n+        except JSONRPCException,e:\n+            errorString = e.error['message']\n+\n+        assert_equal(\"not an integer\" in errorString, True);\n+\n+\n if __name__ == '__main__':\n     WalletTest ().main ()"
      }
    ]
  },
  {
    "sha": "9127e9766a7e8e9173ba9dacc551edaa9e243f4c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MTI3ZTk3NjZhN2U4ZTkxNzNiYTlkYWNjNTUxZWRhYTllMjQzZjRj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-27T11:56:40Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-27T11:57:24Z"
      },
      "message": "doc: Mention RPC strings for monetary amounts in release notes\n\nAdd a section \"low level RPC API changes\" so that the changes with\nregard to error codes can be added later.",
      "tree": {
        "sha": "33746478cdca8fbb0523c864f8e51c8ab29dcf4e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/33746478cdca8fbb0523c864f8e51c8ab29dcf4e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9127e9766a7e8e9173ba9dacc551edaa9e243f4c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9127e9766a7e8e9173ba9dacc551edaa9e243f4c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9127e9766a7e8e9173ba9dacc551edaa9e243f4c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9127e9766a7e8e9173ba9dacc551edaa9e243f4c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7d226b7ca0516c349c73bd79df197a1a14922a1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d226b7ca0516c349c73bd79df197a1a14922a1d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7d226b7ca0516c349c73bd79df197a1a14922a1d"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 6,
      "deletions": 3
    },
    "files": [
      {
        "sha": "7480a7cd216da0b246a0c8bf86323f88dd18a765",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9127e9766a7e8e9173ba9dacc551edaa9e243f4c/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9127e9766a7e8e9173ba9dacc551edaa9e243f4c/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=9127e9766a7e8e9173ba9dacc551edaa9e243f4c",
        "patch": "@@ -19,10 +19,13 @@ https://www.torproject.org/docs/tor-manual.html.en\n \n This allows running bitcoind without having to do any manual configuration.\n \n-Example header\n-----------------------\n+Low-level RPC API changes\n+--------------------------\n \n-Example content.\n+- Monetary amounts can be provided as strings. This means that for example the\n+  argument to sendtoaddress can be \"0.0001\" instead of 0.0001. This can be an\n+  advantage if a JSON library insists on using a lossy floating point type for\n+  numbers, which would be dangerous for monetary amounts.\n \n 0.12.0 Change log\n ================="
      }
    ]
  },
  {
    "sha": "240b30eaf0b94a0094b8943dd9c01448bc29c3ba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNDBiMzBlYWYwYjk0YTAwOTRiODk0M2RkOWMwMTQ0OGJjMjljM2Jh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-27T12:11:56Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-27T12:22:42Z"
      },
      "message": "Merge pull request #6380\n\n9127e97 doc: Mention RPC strings for monetary amounts in release notes (Wladimir J. van der Laan)\n7d226b7 [QA] add testcases for parsing strings as values (Jonas Schnelli)\n614601b rpc: Accept strings in AmountFromValue (Wladimir J. van der Laan)",
      "tree": {
        "sha": "33746478cdca8fbb0523c864f8e51c8ab29dcf4e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/33746478cdca8fbb0523c864f8e51c8ab29dcf4e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/240b30eaf0b94a0094b8943dd9c01448bc29c3ba",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVtiKSAAoJEHSBCwEjRsmmVF4H/iq4kzwh5+HBV1zrfYbfgi4N\nb7L/ZCYyJQoT3ZkMx81xuQ8rCvNS5fDCDc1tzn1zsGae55JXJQgnNu0/lufg41zr\ns+tq00uN9iIerpM7a/wxD1mSvd7C+lkFWXvgMtCH7bagIulEcfsoRgNvXJJDvB58\nGGBA8b2NXkOSbE4Q7GxpblpIjGtvz9Dy4OiS5hVFI4cGlKI4FkukPFtycLCL6j1I\nzN/ZRHcqsrQiRhXZgVSQz5Z8ISQSn3ZXqEW2n/SaSDcKQT3rAoYQGk3W+1TYBt1J\nnpbUM2Eb8/2nxGqd+VrNE8Eo70vlRAuT6xc6uymcoL20ZZx/pO4P8HNXok/mj6o=\n=i1w3\n-----END PGP SIGNATURE-----",
        "payload": "tree 33746478cdca8fbb0523c864f8e51c8ab29dcf4e\nparent d43297c5ba951df535df704e321a883f97475c35\nparent 9127e9766a7e8e9173ba9dacc551edaa9e243f4c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1437999116 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1437999762 +0200\n\nMerge pull request #6380\n\n9127e97 doc: Mention RPC strings for monetary amounts in release notes (Wladimir J. van der Laan)\n7d226b7 [QA] add testcases for parsing strings as values (Jonas Schnelli)\n614601b rpc: Accept strings in AmountFromValue (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/240b30eaf0b94a0094b8943dd9c01448bc29c3ba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/240b30eaf0b94a0094b8943dd9c01448bc29c3ba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/240b30eaf0b94a0094b8943dd9c01448bc29c3ba/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d43297c5ba951df535df704e321a883f97475c35",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d43297c5ba951df535df704e321a883f97475c35",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d43297c5ba951df535df704e321a883f97475c35"
      },
      {
        "sha": "9127e9766a7e8e9173ba9dacc551edaa9e243f4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9127e9766a7e8e9173ba9dacc551edaa9e243f4c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9127e9766a7e8e9173ba9dacc551edaa9e243f4c"
      }
    ],
    "stats": {
      "total": 79,
      "additions": 57,
      "deletions": 22
    },
    "files": [
      {
        "sha": "7480a7cd216da0b246a0c8bf86323f88dd18a765",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/240b30eaf0b94a0094b8943dd9c01448bc29c3ba/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/240b30eaf0b94a0094b8943dd9c01448bc29c3ba/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=240b30eaf0b94a0094b8943dd9c01448bc29c3ba",
        "patch": "@@ -19,10 +19,13 @@ https://www.torproject.org/docs/tor-manual.html.en\n \n This allows running bitcoind without having to do any manual configuration.\n \n-Example header\n-----------------------\n+Low-level RPC API changes\n+--------------------------\n \n-Example content.\n+- Monetary amounts can be provided as strings. This means that for example the\n+  argument to sendtoaddress can be \"0.0001\" instead of 0.0001. This can be an\n+  advantage if a JSON library insists on using a lossy floating point type for\n+  numbers, which would be dangerous for monetary amounts.\n \n 0.12.0 Change log\n ================="
      },
      {
        "sha": "f9ec6f429bac5f3a11203c58e26b01eb36d08568",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 49,
        "deletions": 17,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/240b30eaf0b94a0094b8943dd9c01448bc29c3ba/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/240b30eaf0b94a0094b8943dd9c01448bc29c3ba/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=240b30eaf0b94a0094b8943dd9c01448bc29c3ba",
        "patch": "@@ -4,11 +4,11 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #\n-# Exercise the wallet.  Ported from wallet.sh.  \n+# Exercise the wallet.  Ported from wallet.sh.\n # Does the following:\n #   a) creates 3 nodes, with an empty chain (no blocks).\n #   b) node0 mines a block\n-#   c) node1 mines 101 blocks, so now nodes 0 and 1 have 50btc, node2 has none. \n+#   c) node1 mines 101 blocks, so now nodes 0 and 1 have 50btc, node2 has none.\n #   d) node0 sends 21 btc to node2, in two transactions (11 btc, then 10 btc).\n #   e) node0 mines a block, collects the fee on the second transaction\n #   f) node1 mines 100 blocks, to mature node0's just-mined block\n@@ -75,14 +75,14 @@ def run_test (self):\n         assert_equal(self.nodes[2].getbalance(), 21)\n \n         # Node0 should have two unspent outputs.\n-        # Create a couple of transactions to send them to node2, submit them through \n-        # node1, and make sure both node0 and node2 pick them up properly: \n+        # Create a couple of transactions to send them to node2, submit them through\n+        # node1, and make sure both node0 and node2 pick them up properly:\n         node0utxos = self.nodes[0].listunspent(1)\n         assert_equal(len(node0utxos), 2)\n \n         # create both transactions\n         txns_to_send = []\n-        for utxo in node0utxos: \n+        for utxo in node0utxos:\n             inputs = []\n             outputs = {}\n             inputs.append({ \"txid\" : utxo[\"txid\"], \"vout\" : utxo[\"vout\"]})\n@@ -149,35 +149,35 @@ def run_test (self):\n         sync_mempools(self.nodes)\n \n         assert(txid1 in self.nodes[3].getrawmempool())\n-        \n+\n         #check if we can list zero value tx as available coins\n         #1. create rawtx\n-        #2. hex-changed one output to 0.0 \n+        #2. hex-changed one output to 0.0\n         #3. sign and send\n         #4. check if recipient (node0) can list the zero value tx\n         usp = self.nodes[1].listunspent()\n         inputs = [{\"txid\":usp[0]['txid'], \"vout\":usp[0]['vout']}]\n         outputs = {self.nodes[1].getnewaddress(): 49.998, self.nodes[0].getnewaddress(): 11.11}\n-        \n+\n         rawTx = self.nodes[1].createrawtransaction(inputs, outputs).replace(\"c0833842\", \"00000000\") #replace 11.11 with 0.0 (int32)\n         decRawTx = self.nodes[1].decoderawtransaction(rawTx)\n         signedRawTx = self.nodes[1].signrawtransaction(rawTx)\n         decRawTx = self.nodes[1].decoderawtransaction(signedRawTx['hex'])\n         zeroValueTxid= decRawTx['txid']\n         sendResp = self.nodes[1].sendrawtransaction(signedRawTx['hex'])\n-        \n+\n         self.sync_all()\n         self.nodes[1].generate(1) #mine a block\n         self.sync_all()\n-        \n+\n         unspentTxs = self.nodes[0].listunspent() #zero value tx must be in listunspents output\n         found = False\n         for uTx in unspentTxs:\n             if uTx['txid'] == zeroValueTxid:\n                 found = True\n                 assert_equal(uTx['amount'], Decimal('0.00000000'));\n         assert(found)\n-        \n+\n         #do some -walletbroadcast tests\n         stop_nodes(self.nodes)\n         wait_bitcoinds()\n@@ -192,17 +192,17 @@ def run_test (self):\n         self.nodes[1].generate(1) #mine a block, tx should not be in there\n         self.sync_all()\n         assert_equal(self.nodes[2].getbalance(), Decimal('59.99800000')); #should not be changed because tx was not broadcasted\n-        \n+\n         #now broadcast from another node, mine a block, sync, and check the balance\n         self.nodes[1].sendrawtransaction(txObjNotBroadcasted['hex'])\n         self.nodes[1].generate(1)\n         self.sync_all()\n         txObjNotBroadcasted = self.nodes[0].gettransaction(txIdNotBroadcasted)\n         assert_equal(self.nodes[2].getbalance(), Decimal('61.99800000')); #should not be\n-        \n+\n         #create another tx\n         txIdNotBroadcasted  = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 2);\n-        \n+\n         #restart the nodes with -walletbroadcast=1\n         stop_nodes(self.nodes)\n         wait_bitcoinds()\n@@ -211,12 +211,44 @@ def run_test (self):\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n         sync_blocks(self.nodes)\n-        \n+\n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n-        \n+\n         #tx should be added to balance because after restarting the nodes tx should be broadcastet\n         assert_equal(self.nodes[2].getbalance(), Decimal('63.99800000')); #should not be\n-        \n+\n+        #send a tx with value in a string (PR#6380 +)\n+        txId  = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), \"2\")\n+        txObj = self.nodes[0].gettransaction(txId)\n+        assert_equal(txObj['amount'], Decimal('-2.00000000'))\n+\n+        txId  = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), \"0.0001\")\n+        txObj = self.nodes[0].gettransaction(txId)\n+        assert_equal(txObj['amount'], Decimal('-0.00010000'))\n+\n+        #check if JSON parser can handle scientific notation in strings\n+        txId  = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), \"1e-4\")\n+        txObj = self.nodes[0].gettransaction(txId)\n+        assert_equal(txObj['amount'], Decimal('-0.00010000'))\n+\n+        #this should fail\n+        errorString = \"\"\n+        try:\n+            txId  = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), \"1f-4\")\n+        except JSONRPCException,e:\n+            errorString = e.error['message']\n+\n+        assert_equal(\"Invalid amount\" in errorString, True);\n+\n+        errorString = \"\"\n+        try:\n+            self.nodes[0].generate(\"2\") #use a string to as block amount parameter must fail because it's not interpreted as amount\n+        except JSONRPCException,e:\n+            errorString = e.error['message']\n+\n+        assert_equal(\"not an integer\" in errorString, True);\n+\n+\n if __name__ == '__main__':\n     WalletTest ().main ()"
      },
      {
        "sha": "03c123a361ac8f83d55145fe3cf22c6cd3c1bad4",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/240b30eaf0b94a0094b8943dd9c01448bc29c3ba/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/240b30eaf0b94a0094b8943dd9c01448bc29c3ba/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=240b30eaf0b94a0094b8943dd9c01448bc29c3ba",
        "patch": "@@ -120,8 +120,8 @@ void RPCTypeCheckObj(const UniValue& o,\n \n CAmount AmountFromValue(const UniValue& value)\n {\n-    if (!value.isNum())\n-        throw JSONRPCError(RPC_TYPE_ERROR, \"Amount is not a number\");\n+    if (!value.isNum() && !value.isStr())\n+        throw JSONRPCError(RPC_TYPE_ERROR, \"Amount is not a number or string\");\n     CAmount amount;\n     if (!ParseFixedPoint(value.getValStr(), 8, &amount))\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount\");"
      }
    ]
  },
  {
    "sha": "ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYTM3ZTBmMzM5ODBhMWZlOTZhYzRlZDA4ZmQ3ZDY5MmE3YTU5MmE1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-27T12:25:13Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-27T12:40:29Z"
      },
      "message": "Merge pull request #5697\n\n60c8bac Includes: Cleanup around net main and wallet (Jorge Tim\u00f3n)\n9dd793f TRIVIAL: Missing includes (Jorge Tim\u00f3n)",
      "tree": {
        "sha": "b41b017d88a4db6863cd0fadbee8178aa85f3fa5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b41b017d88a4db6863cd0fadbee8178aa85f3fa5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVtia9AAoJEHSBCwEjRsmmbusIAL6EABjAMyc8BC4jz/VbZSt4\nEqhfK/8nYoQPOhMdn6ofeatAQe8DarGcYVDa1+9rE+4jQA5cnhW63YHSDhFbI2+f\nSpQylRwCwncY6KbtjsVAovYMcYULuIUznSwXaPghJdUenMsCYG8QzWgbwhuxi327\nwcvfcZbYec5T6KPAdRiaYsiuQKFmxSQ4ApHcX/Qi8EmKlT2tDeaLRN9OTK3sOCOG\njeoil7FpMpG1uT90aOQm8BU2HNIJjiZ9pWZ7TRXoIVVPE6738fctvrwaA01FNFge\nis+V3OLbBcl3BY1wtPeznQeBVqJik1npgwhamE12WqEEt2QhTOyQmp5mjqEmLAk=\n=/M/D\n-----END PGP SIGNATURE-----",
        "payload": "tree b41b017d88a4db6863cd0fadbee8178aa85f3fa5\nparent 240b30eaf0b94a0094b8943dd9c01448bc29c3ba\nparent 60c8bac77c6612b84e3496b2227a01058d720ecc\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1437999913 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1438000829 +0200\n\nMerge pull request #5697\n\n60c8bac Includes: Cleanup around net main and wallet (Jorge Tim\u00f3n)\n9dd793f TRIVIAL: Missing includes (Jorge Tim\u00f3n)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "240b30eaf0b94a0094b8943dd9c01448bc29c3ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/240b30eaf0b94a0094b8943dd9c01448bc29c3ba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/240b30eaf0b94a0094b8943dd9c01448bc29c3ba"
      },
      {
        "sha": "60c8bac77c6612b84e3496b2227a01058d720ecc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60c8bac77c6612b84e3496b2227a01058d720ecc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/60c8bac77c6612b84e3496b2227a01058d720ecc"
      }
    ],
    "stats": {
      "total": 138,
      "additions": 92,
      "deletions": 46
    },
    "files": [
      {
        "sha": "91e54a9178e4546669dcc059b3a42ec8a4764131",
        "filename": "src/alert.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/alert.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/alert.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alert.cpp?ref=ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "patch": "@@ -11,6 +11,7 @@\n #include \"timedata.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n \n #include <stdint.h>\n #include <algorithm>"
      },
      {
        "sha": "39bb301f4419b1f1a3c8e594eee36919a60c8613",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "patch": "@@ -3,10 +3,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"chainparams.h\"\n #include \"clientversion.h\"\n #include \"rpcserver.h\"\n #include \"init.h\"\n-#include \"main.h\"\n #include \"noui.h\"\n #include \"scheduler.h\"\n #include \"util.h\""
      },
      {
        "sha": "a9822eed89b60e90669d9003f6f61a508b5fc4e9",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "patch": "@@ -4,6 +4,7 @@\n \n #include \"checkpoints.h\"\n \n+#include \"chain.h\"\n #include \"chainparams.h\"\n #include \"main.h\"\n #include \"uint256.h\""
      },
      {
        "sha": "365bd3071439959df41dd9d8ec83f5398a9034cb",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "patch": "@@ -11,6 +11,8 @@\n \n #include \"addrman.h\"\n #include \"amount.h\"\n+#include \"chain.h\"\n+#include \"chainparams.h\"\n #include \"checkpoints.h\"\n #include \"compat/sanity.h\"\n #include \"consensus/validation.h\"\n@@ -23,11 +25,14 @@\n #include \"script/standard.h\"\n #include \"scheduler.h\"\n #include \"txdb.h\"\n+#include \"txmempool.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n+#include \"utilstrencodings.h\"\n #include \"validationinterface.h\"\n #ifdef ENABLE_WALLET\n+#include \"wallet/db.h\"\n #include \"wallet/wallet.h\"\n #include \"wallet/walletdb.h\"\n #endif"
      },
      {
        "sha": "fefeabeb64b87131567c955f49432a3430d6ed0b",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "patch": "@@ -13,17 +13,25 @@\n #include \"checkqueue.h\"\n #include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n+#include \"hash.h\"\n #include \"init.h\"\n #include \"merkleblock.h\"\n #include \"net.h\"\n #include \"policy/policy.h\"\n #include \"pow.h\"\n+#include \"primitives/block.h\"\n+#include \"primitives/transaction.h\"\n+#include \"script/script.h\"\n+#include \"script/sigcache.h\"\n+#include \"script/standard.h\"\n+#include \"tinyformat.h\"\n #include \"txdb.h\"\n #include \"txmempool.h\"\n #include \"ui_interface.h\"\n #include \"undo.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n+#include \"utilstrencodings.h\"\n #include \"validationinterface.h\"\n \n #include <sstream>"
      },
      {
        "sha": "96ad54cda6e1b6f3f08d0f9ec1fad75de5057ba6",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 9,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "patch": "@@ -12,18 +12,10 @@\n \n #include \"amount.h\"\n #include \"chain.h\"\n-#include \"chainparams.h\"\n #include \"coins.h\"\n #include \"net.h\"\n-#include \"primitives/block.h\"\n-#include \"primitives/transaction.h\"\n-#include \"script/script.h\"\n-#include \"script/sigcache.h\"\n-#include \"script/standard.h\"\n+#include \"script/script_error.h\"\n #include \"sync.h\"\n-#include \"tinyformat.h\"\n-#include \"txmempool.h\"\n-#include \"uint256.h\"\n \n #include <algorithm>\n #include <exception>\n@@ -41,6 +33,7 @@ class CBlockTreeDB;\n class CBloomFilter;\n class CInv;\n class CScriptCheck;\n+class CTxMemPool;\n class CValidationInterface;\n class CValidationState;\n "
      },
      {
        "sha": "e44f3392c86d2937704e2c74f0663691c6b48146",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "patch": "@@ -6,7 +6,9 @@\n #include \"miner.h\"\n \n #include \"amount.h\"\n+#include \"chain.h\"\n #include \"chainparams.h\"\n+#include \"coins.h\"\n #include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n #include \"hash.h\"\n@@ -15,7 +17,9 @@\n #include \"policy/policy.h\"\n #include \"pow.h\"\n #include \"primitives/transaction.h\"\n+#include \"script/standard.h\"\n #include \"timedata.h\"\n+#include \"txmempool.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n #include \"validationinterface.h\""
      },
      {
        "sha": "3cece520de683a97e7106546fb027abeb36d891a",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "patch": "@@ -12,10 +12,12 @@\n #include \"addrman.h\"\n #include \"chainparams.h\"\n #include \"clientversion.h\"\n+#include \"crypto/common.h\"\n+#include \"hash.h\"\n #include \"primitives/transaction.h\"\n #include \"scheduler.h\"\n #include \"ui_interface.h\"\n-#include \"crypto/common.h\"\n+#include \"utilstrencodings.h\"\n \n #ifdef WIN32\n #include <string.h>"
      },
      {
        "sha": "658f586b12e9503c6b35660cb31308ec71efdf62",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "patch": "@@ -8,7 +8,6 @@\n \n #include \"bloom.h\"\n #include \"compat.h\"\n-#include \"hash.h\"\n #include \"limitedmap.h\"\n #include \"mruset.h\"\n #include \"netbase.h\"\n@@ -17,7 +16,6 @@\n #include \"streams.h\"\n #include \"sync.h\"\n #include \"uint256.h\"\n-#include \"utilstrencodings.h\"\n \n #include <deque>\n #include <stdint.h>\n@@ -31,7 +29,6 @@\n #include <boost/signals2/signal.hpp>\n \n class CAddrMan;\n-class CBlockIndex;\n class CScheduler;\n class CNode;\n "
      },
      {
        "sha": "b8aec0c2686b84c2e51a29df3ecfb5fed819db8f",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "patch": "@@ -8,6 +8,7 @@\n \n #include \"bitcoingui.h\"\n \n+#include \"chainparams.h\"\n #include \"clientmodel.h\"\n #include \"guiconstants.h\"\n #include \"guiutil.h\"\n@@ -24,7 +25,6 @@\n #endif\n \n #include \"init.h\"\n-#include \"main.h\"\n #include \"rpcserver.h\"\n #include \"scheduler.h\"\n #include \"ui_interface.h\""
      },
      {
        "sha": "41dc2ea77ec02ce3b319222ea1d13d72dc89d1d9",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "patch": "@@ -11,7 +11,6 @@\n #include \"chainparams.h\"\n #include \"checkpoints.h\"\n #include \"clientversion.h\"\n-#include \"main.h\"\n #include \"net.h\"\n #include \"ui_interface.h\"\n #include \"util.h\""
      },
      {
        "sha": "934d62d5f7630f2b3b6fe474b93fd2621f2b5cd9",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "patch": "@@ -10,11 +10,12 @@\n #include \"guiutil.h\"\n #include \"optionsmodel.h\"\n #include \"scicon.h\"\n+#include \"txmempool.h\"\n #include \"walletmodel.h\"\n \n #include \"coincontrol.h\"\n #include \"init.h\"\n-#include \"main.h\"\n+#include \"main.h\" // For minRelayTxFee\n #include \"wallet/wallet.h\"\n \n #include <boost/assign/list_of.hpp> // for 'map_list_of()'"
      },
      {
        "sha": "550dbacf930e819a864067a770b452dd27031c37",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "patch": "@@ -11,7 +11,7 @@\n \n #include \"primitives/transaction.h\"\n #include \"init.h\"\n-#include \"main.h\"\n+#include \"main.h\" // For minRelayTxFee\n #include \"protocol.h\"\n #include \"script/script.h\"\n #include \"script/standard.h\""
      },
      {
        "sha": "062c4540ee4f6c006e346be5c56e7fc4789dd6ce",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "patch": "@@ -13,7 +13,7 @@\n #include \"guiutil.h\"\n #include \"optionsmodel.h\"\n \n-#include \"main.h\" // for MAX_SCRIPTCHECK_THREADS\n+#include \"main.h\" // for DEFAULT_SCRIPTCHECK_THREADS and MAX_SCRIPTCHECK_THREADS\n #include \"netbase.h\"\n #include \"txdb.h\" // for -dbcache defaults\n "
      },
      {
        "sha": "6191edc44c0d738fc37562b3c2f9fc0a91fe019e",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "patch": "@@ -13,7 +13,7 @@\n \n #include \"amount.h\"\n #include \"init.h\"\n-#include \"main.h\"\n+#include \"main.h\" // For DEFAULT_SCRIPTCHECK_THREADS\n #include \"net.h\"\n #include \"txdb.h\" // for -dbcache defaults\n "
      },
      {
        "sha": "0827d99125efc833fba12b161e8bb8a1c0ead24a",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "patch": "@@ -10,7 +10,7 @@\n \n #include \"base58.h\"\n #include \"chainparams.h\"\n-#include \"main.h\"\n+#include \"main.h\" // For minRelayTxFee\n #include \"ui_interface.h\"\n #include \"util.h\"\n #include \"wallet/wallet.h\""
      },
      {
        "sha": "5f149ea8735a8f8ba0033d67c4995e690677697d",
        "filename": "src/qt/peertablemodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/qt/peertablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/qt/peertablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.h?ref=ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_QT_PEERTABLEMODEL_H\n #define BITCOIN_QT_PEERTABLEMODEL_H\n \n-#include \"main.h\"\n+#include \"main.h\" // For CNodeStateStats\n #include \"net.h\"\n \n #include <QAbstractTableModel>"
      },
      {
        "sha": "b2717558cabb7ebada3b46fce8adea5a541a299f",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "patch": "@@ -10,7 +10,6 @@\n #include \"peertablemodel.h\"\n #include \"scicon.h\"\n \n-#include \"main.h\"\n #include \"chainparams.h\"\n #include \"rpcserver.h\"\n #include \"rpcclient.h\""
      },
      {
        "sha": "2407fcbc4a7c0aab4af1a499945372fd20859c6e",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "patch": "@@ -17,8 +17,9 @@\n \n #include \"base58.h\"\n #include \"coincontrol.h\"\n-#include \"main.h\"\n+#include \"main.h\" // mempool and minRelayTxFee\n #include \"ui_interface.h\"\n+#include \"txmempool.h\"\n #include \"wallet/wallet.h\"\n \n #include <QMessageBox>"
      },
      {
        "sha": "f384562a50c0bf1b727375a11a0d492fce05f5d8",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "patch": "@@ -25,6 +25,8 @@\n #include <QIcon>\n #include <QList>\n \n+#include <boost/foreach.hpp>\n+\n // Amount column is right-aligned it contains numbers\n static int column_alignments[] = {\n         Qt::AlignLeft|Qt::AlignVCenter, /* status */"
      },
      {
        "sha": "7820047b6b1ab7fb30553c745f72aa04a70d1f40",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "patch": "@@ -25,6 +25,8 @@\n #include <QSet>\n #include <QTimer>\n \n+#include <boost/foreach.hpp>\n+\n WalletModel::WalletModel(CWallet *wallet, OptionsModel *optionsModel, QObject *parent) :\n     QObject(parent), wallet(wallet), optionsModel(optionsModel), addressTableModel(0),\n     transactionTableModel(0),"
      },
      {
        "sha": "0dd238b683a73057f4db71dd373759e57cb9ba11",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "patch": "@@ -3,6 +3,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"chain.h\"\n #include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n #include \"main.h\""
      },
      {
        "sha": "5817f0ce57534db0259bc749b6166d9938958872",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "patch": "@@ -3,13 +3,19 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"chain.h\"\n+#include \"chainparams.h\"\n #include \"checkpoints.h\"\n+#include \"coins.h\"\n #include \"consensus/validation.h\"\n #include \"main.h\"\n #include \"primitives/transaction.h\"\n #include \"rpcserver.h\"\n+#include \"streams.h\"\n #include \"sync.h\"\n+#include \"txmempool.h\"\n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n \n #include <stdint.h>\n "
      },
      {
        "sha": "b7d4ff58fce496e9a84f99594e6633d5cbe08b54",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "patch": "@@ -4,6 +4,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"amount.h\"\n+#include \"chain.h\"\n #include \"chainparams.h\"\n #include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n@@ -14,7 +15,9 @@\n #include \"net.h\"\n #include \"pow.h\"\n #include \"rpcserver.h\"\n+#include \"txmempool.h\"\n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n #include \"validationinterface.h\"\n \n #include <stdint.h>"
      },
      {
        "sha": "82003e09b9d81c1dad05f427fd86ef38e3f88b5d",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "patch": "@@ -12,6 +12,7 @@\n #include \"rpcserver.h\"\n #include \"timedata.h\"\n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n #ifdef ENABLE_WALLET\n #include \"wallet/wallet.h\"\n #include \"wallet/walletdb.h\""
      },
      {
        "sha": "ed903f9fd3f1ed3c51f358f1bc25e69793a51baa",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "patch": "@@ -4,6 +4,7 @@\n \n #include \"rpcserver.h\"\n \n+#include \"chainparams.h\"\n #include \"clientversion.h\"\n #include \"main.h\"\n #include \"net.h\"\n@@ -12,6 +13,7 @@\n #include \"sync.h\"\n #include \"timedata.h\"\n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n #include \"version.h\"\n \n #include <boost/foreach.hpp>"
      },
      {
        "sha": "62d2ef69ef1eb7f4c6ecda4d35f4a6290b7a69df",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "patch": "@@ -4,6 +4,8 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"base58.h\"\n+#include \"chain.h\"\n+#include \"coins.h\"\n #include \"consensus/validation.h\"\n #include \"core_io.h\"\n #include \"init.h\"\n@@ -18,7 +20,9 @@\n #include \"script/script_error.h\"\n #include \"script/sign.h\"\n #include \"script/standard.h\"\n+#include \"txmempool.h\"\n #include \"uint256.h\"\n+#include \"utilstrencodings.h\"\n #ifdef ENABLE_WALLET\n #include \"wallet/wallet.h\"\n #endif"
      },
      {
        "sha": "da296a046144ef5c28295c3ec0bca10a3efa3b25",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "patch": "@@ -2,12 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-//\n // Unit tests for denial-of-service detection/prevention code\n-//\n-\n-\n \n+#include \"chainparams.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n #include \"net.h\""
      },
      {
        "sha": "b8d5606cc39c0a1300a5a9e69cd92d8a39152544",
        "filename": "src/test/alert_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/test/alert_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/test/alert_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/alert_tests.cpp?ref=ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "patch": "@@ -2,17 +2,14 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-//\n // Unit tests for alert system\n-//\n \n #include \"alert.h\"\n #include \"chain.h\"\n #include \"chainparams.h\"\n #include \"clientversion.h\"\n #include \"data/alertTests.raw.h\"\n-\n-#include \"main.h\"\n+#include \"main.h\" // For PartitionCheck\n #include \"serialize.h\"\n #include \"streams.h\"\n #include \"util.h\""
      },
      {
        "sha": "f7e24706170d49aca8b73cb664818e9776c90a99",
        "filename": "src/test/checkblock_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/test/checkblock_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/test/checkblock_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkblock_tests.cpp?ref=ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "patch": "@@ -4,7 +4,8 @@\n \n #include \"clientversion.h\"\n #include \"consensus/validation.h\"\n-#include \"main.h\"\n+#include \"main.h\" // For CheckBlock\n+#include \"primitives/block.h\"\n #include \"test/test_bitcoin.h\"\n #include \"utiltime.h\"\n "
      },
      {
        "sha": "2439689d7ff1396c37fe993574cb9d6cd51a5893",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "patch": "@@ -2,7 +2,6 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"main.h\"\n #include \"txmempool.h\"\n #include \"util.h\"\n "
      },
      {
        "sha": "ad79a558c269cf6052460a69152901d6abb1eab8",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "patch": "@@ -2,12 +2,17 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"chainparams.h\"\n+#include \"coins.h\"\n #include \"consensus/validation.h\"\n #include \"main.h\"\n #include \"miner.h\"\n #include \"pubkey.h\"\n+#include \"script/standard.h\"\n+#include \"txmempool.h\"\n #include \"uint256.h\"\n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n \n #include \"test/test_bitcoin.h\"\n "
      },
      {
        "sha": "b6eb39bc3868e1eee720f07d7ef6df4baa785cbe",
        "filename": "src/test/pow_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/test/pow_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/test/pow_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pow_tests.cpp?ref=ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "patch": "@@ -2,8 +2,10 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"main.h\"\n+#include \"chain.h\"\n+#include \"chainparams.h\"\n #include \"pow.h\"\n+#include \"random.h\"\n #include \"util.h\"\n #include \"test/test_bitcoin.h\"\n "
      },
      {
        "sha": "37c046935f614533b8483ce04b402922766c555e",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "patch": "@@ -8,11 +8,11 @@\n #include \"core_io.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n-#include \"main.h\"\n #include \"script/script.h\"\n #include \"script/script_error.h\"\n #include \"script/sign.h\"\n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n #include \"test/test_bitcoin.h\"\n \n #if defined(HAVE_CONSENSUS_LIB)"
      },
      {
        "sha": "4b964615628cdcc9e06321ab2e6ab413e817ed7b",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "patch": "@@ -4,13 +4,16 @@\n \n #include \"consensus/validation.h\"\n #include \"data/sighash.json.h\"\n-#include \"main.h\"\n+#include \"hash.h\"\n+#include \"main.h\" // For CheckTransaction\n #include \"random.h\"\n #include \"script/interpreter.h\"\n #include \"script/script.h\"\n #include \"serialize.h\"\n+#include \"streams.h\"\n #include \"test/test_bitcoin.h\"\n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n #include \"version.h\"\n \n #include <iostream>"
      },
      {
        "sha": "a904e3862fe78393b8ac7b7c5257f4319dad38a9",
        "filename": "src/test/skiplist_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/test/skiplist_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/test/skiplist_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/skiplist_tests.cpp?ref=ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"main.h\"\n+#include \"chain.h\"\n #include \"random.h\"\n #include \"util.h\"\n #include \"test/test_bitcoin.h\""
      },
      {
        "sha": "ba616365f2767dcddff6bef76eb0bebf02a8f58f",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "patch": "@@ -6,6 +6,7 @@\n \n #include \"test_bitcoin.h\"\n \n+#include \"chainparams.h\"\n #include \"key.h\"\n #include \"main.h\"\n #include \"random.h\""
      },
      {
        "sha": "e70ebddc2f6865aada490792ebb77625eb52e904",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "patch": "@@ -11,10 +11,11 @@\n #include \"core_io.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n-#include \"main.h\"\n+#include \"main.h\" // For CheckTransaction\n #include \"policy/policy.h\"\n #include \"script/script.h\"\n #include \"script/script_error.h\"\n+#include \"utilstrencodings.h\"\n \n #include <map>\n #include <string>"
      },
      {
        "sha": "21ecd652388584e0b4292fa4430fff6013b70e7b",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "patch": "@@ -5,6 +5,7 @@\n \n #include \"txdb.h\"\n \n+#include \"chain.h\"\n #include \"chainparams.h\"\n #include \"hash.h\"\n #include \"main.h\""
      },
      {
        "sha": "dbe36a2be1b86c12f41555dcfde59a0cdf9b32c1",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "patch": "@@ -3,6 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"base58.h\"\n+#include \"chain.h\"\n #include \"rpcserver.h\"\n #include \"init.h\"\n #include \"main.h\"\n@@ -21,6 +22,8 @@\n \n #include \"univalue/univalue.h\"\n \n+#include <boost/foreach.hpp>\n+\n using namespace std;\n \n void EnsureWalletIsUnlocked();"
      },
      {
        "sha": "342ce13af1771e653e9087177abab8719dd4c355",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "patch": "@@ -5,6 +5,7 @@\n \n #include \"amount.h\"\n #include \"base58.h\"\n+#include \"chain.h\"\n #include \"core_io.h\"\n #include \"init.h\"\n #include \"main.h\""
      },
      {
        "sha": "58b9ccc078c50f81802090f0f2ef6f2d1b22241a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "patch": "@@ -7,15 +7,21 @@\n \n #include \"base58.h\"\n #include \"checkpoints.h\"\n+#include \"chain.h\"\n #include \"coincontrol.h\"\n #include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n+#include \"key.h\"\n+#include \"keystore.h\"\n #include \"main.h\"\n #include \"net.h\"\n #include \"policy/policy.h\"\n+#include \"primitives/block.h\"\n+#include \"primitives/transaction.h\"\n #include \"script/script.h\"\n #include \"script/sign.h\"\n #include \"timedata.h\"\n+#include \"txmempool.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n "
      },
      {
        "sha": "ae007e4673a202e00916bef5cb3f81e49aa00af9",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "patch": "@@ -7,10 +7,7 @@\n #define BITCOIN_WALLET_WALLET_H\n \n #include \"amount.h\"\n-#include \"key.h\"\n-#include \"keystore.h\"\n-#include \"primitives/block.h\"\n-#include \"primitives/transaction.h\"\n+#include \"streams.h\"\n #include \"tinyformat.h\"\n #include \"ui_interface.h\"\n #include \"utilstrencodings.h\""
      },
      {
        "sha": "7846565f8dfaafb1fe25bc1128ab9b973ee60cb2",
        "filename": "src/wallet/wallet_ismine.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/wallet/wallet_ismine.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/wallet/wallet_ismine.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet_ismine.h?ref=ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "patch": "@@ -6,9 +6,10 @@\n #ifndef BITCOIN_WALLET_WALLET_ISMINE_H\n #define BITCOIN_WALLET_WALLET_ISMINE_H\n \n-#include \"key.h\"\n #include \"script/standard.h\"\n \n+#include <stdint.h>\n+\n class CKeyStore;\n class CScript;\n "
      },
      {
        "sha": "c1eb1845814996179a0e4b49bda4c97385d86def",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "patch": "@@ -7,7 +7,7 @@\n \n #include \"base58.h\"\n #include \"consensus/validation.h\"\n-#include \"main.h\"\n+#include \"main.h\" // For CheckTransaction\n #include \"protocol.h\"\n #include \"serialize.h\"\n #include \"sync.h\""
      },
      {
        "sha": "270f826aed4467e959aee8b90439ec32b85a91ae",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "patch": "@@ -9,7 +9,6 @@\n #include \"amount.h\"\n #include \"wallet/db.h\"\n #include \"key.h\"\n-#include \"keystore.h\"\n \n #include <list>\n #include <stdint.h>"
      }
    ]
  },
  {
    "sha": "c38c49d0b708cf948eb46e0857eb743cda09980c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMzhjNDlkMGI3MDhjZjk0OGViNDZlMDg1N2ViNzQzY2RhMDk5ODBj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-06-15T15:17:23Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-27T12:47:54Z"
      },
      "message": "Fix argument parsing oddity with -noX\n\n`bitcoind -X -noX` ends up, unintuitively, with `X` set.\n(for all boolean options X)\n\nThis result is due to the odd two-pass processing of arguments. This\npatch fixes this oddity and simplifies the code at the same time.",
      "tree": {
        "sha": "99b7a6a7d0b2e02b381a90cb8cd4be74fe0fb77e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/99b7a6a7d0b2e02b381a90cb8cd4be74fe0fb77e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c38c49d0b708cf948eb46e0857eb743cda09980c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c38c49d0b708cf948eb46e0857eb743cda09980c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c38c49d0b708cf948eb46e0857eb743cda09980c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c38c49d0b708cf948eb46e0857eb743cda09980c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5"
      }
    ],
    "stats": {
      "total": 69,
      "additions": 30,
      "deletions": 39
    },
    "files": [
      {
        "sha": "eb61a2884d9f909f9e648bb74c04dd414814c729",
        "filename": "src/test/getarg_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c38c49d0b708cf948eb46e0857eb743cda09980c/src/test/getarg_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c38c49d0b708cf948eb46e0857eb743cda09980c/src/test/getarg_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/getarg_tests.cpp?ref=c38c49d0b708cf948eb46e0857eb743cda09980c",
        "patch": "@@ -60,18 +60,18 @@ BOOST_AUTO_TEST_CASE(boolarg)\n     BOOST_CHECK(!GetBoolArg(\"-foo\", false));\n     BOOST_CHECK(!GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo -nofoo\");  // -foo should win\n-    BOOST_CHECK(GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(GetBoolArg(\"-foo\", true));\n-\n-    ResetArgs(\"-foo=1 -nofoo=1\");  // -foo should win\n-    BOOST_CHECK(GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(GetBoolArg(\"-foo\", true));\n+    ResetArgs(\"-foo -nofoo\");  // -nofoo should win\n+    BOOST_CHECK(!GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo=0 -nofoo=0\");  // -foo should win\n+    ResetArgs(\"-foo=1 -nofoo=1\");  // -nofoo should win\n     BOOST_CHECK(!GetBoolArg(\"-foo\", false));\n     BOOST_CHECK(!GetBoolArg(\"-foo\", true));\n \n+    ResetArgs(\"-foo=0 -nofoo=0\");  // -nofoo=0 should win\n+    BOOST_CHECK(GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(GetBoolArg(\"-foo\", true));\n+\n     // New 0.6 feature: treat -- same as -:\n     ResetArgs(\"--foo=1\");\n     BOOST_CHECK(GetBoolArg(\"-foo\", false));\n@@ -150,9 +150,9 @@ BOOST_AUTO_TEST_CASE(boolargno)\n     BOOST_CHECK(GetBoolArg(\"-foo\", true));\n     BOOST_CHECK(GetBoolArg(\"-foo\", false));\n \n-    ResetArgs(\"-foo --nofoo\");\n-    BOOST_CHECK(GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(GetBoolArg(\"-foo\", false));\n+    ResetArgs(\"-foo --nofoo\"); // --nofoo should win\n+    BOOST_CHECK(!GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!GetBoolArg(\"-foo\", false));\n \n     ResetArgs(\"-nofoo -foo\"); // foo always wins:\n     BOOST_CHECK(GetBoolArg(\"-foo\", true));"
      },
      {
        "sha": "a7ec740de8c86922540b2a2d170a788ad79bdf8e",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 28,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c38c49d0b708cf948eb46e0857eb743cda09980c/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c38c49d0b708cf948eb46e0857eb743cda09980c/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=c38c49d0b708cf948eb46e0857eb743cda09980c",
        "patch": "@@ -315,18 +315,21 @@ int LogPrintStr(const std::string &str)\n     return ret;\n }\n \n-static void InterpretNegativeSetting(string name, map<string, string>& mapSettingsRet)\n+/** Interpret string as boolean, for argument parsing */\n+static bool InterpretBool(const std::string& strValue)\n {\n-    // interpret -nofoo as -foo=0 (and -nofoo=0 as -foo=1) as long as -foo not set\n-    if (name.find(\"-no\") == 0)\n+    if (strValue.empty())\n+        return true;\n+    return (atoi(strValue) != 0);\n+}\n+\n+/** Turn -noX into -X=0 */\n+static void InterpretNegativeSetting(std::string& strKey, std::string& strValue)\n+{\n+    if (strKey.length()>3 && strKey[0]=='-' && strKey[1]=='n' && strKey[2]=='o')\n     {\n-        std::string positive(\"-\");\n-        positive.append(name.begin()+3, name.end());\n-        if (mapSettingsRet.count(positive) == 0)\n-        {\n-            bool value = !GetBoolArg(name, false);\n-            mapSettingsRet[positive] = (value ? \"1\" : \"0\");\n-        }\n+        strKey = \"-\" + strKey.substr(3);\n+        strValue = InterpretBool(strValue) ? \"0\" : \"1\";\n     }\n }\n \n@@ -358,17 +361,11 @@ void ParseParameters(int argc, const char* const argv[])\n         // If both --foo and -foo are set, the last takes effect.\n         if (str.length() > 1 && str[1] == '-')\n             str = str.substr(1);\n+        InterpretNegativeSetting(str, strValue);\n \n         mapArgs[str] = strValue;\n         mapMultiArgs[str].push_back(strValue);\n     }\n-\n-    // New 0.6 features:\n-    BOOST_FOREACH(const PAIRTYPE(string,string)& entry, mapArgs)\n-    {\n-        // interpret -nofoo as -foo=0 (and -nofoo=0 as -foo=1) as long as -foo not set\n-        InterpretNegativeSetting(entry.first, mapArgs);\n-    }\n }\n \n std::string GetArg(const std::string& strArg, const std::string& strDefault)\n@@ -388,11 +385,7 @@ int64_t GetArg(const std::string& strArg, int64_t nDefault)\n bool GetBoolArg(const std::string& strArg, bool fDefault)\n {\n     if (mapArgs.count(strArg))\n-    {\n-        if (mapArgs[strArg].empty())\n-            return true;\n-        return (atoi(mapArgs[strArg]) != 0);\n-    }\n+        return InterpretBool(mapArgs[strArg]);\n     return fDefault;\n }\n \n@@ -543,13 +536,11 @@ void ReadConfigFile(map<string, string>& mapSettingsRet,\n     {\n         // Don't overwrite existing settings so command line settings override bitcoin.conf\n         string strKey = string(\"-\") + it->string_key;\n+        string strValue = it->value[0];\n+        InterpretNegativeSetting(strKey, strValue);\n         if (mapSettingsRet.count(strKey) == 0)\n-        {\n-            mapSettingsRet[strKey] = it->value[0];\n-            // interpret nofoo=1 as foo=0 (and nofoo=0 as foo=1) as long as foo not set)\n-            InterpretNegativeSetting(strKey, mapSettingsRet);\n-        }\n-        mapMultiSettingsRet[strKey].push_back(it->value[0]);\n+            mapSettingsRet[strKey] = strValue;\n+        mapMultiSettingsRet[strKey].push_back(strValue);\n     }\n     // If datadir is changed in .conf file:\n     ClearDatadirCache();"
      }
    ]
  },
  {
    "sha": "c6455c77ab90910bf4c03005fb0a7dfe785e7087",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNjQ1NWM3N2FiOTA5MTBiZjRjMDMwMDVmYjBhN2RmZTc4NWU3MDg3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-27T12:54:53Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-27T12:55:15Z"
      },
      "message": "doc: mention change to option parsing behavior in release notes",
      "tree": {
        "sha": "68c75f17e52d83ab9f60926c912d2820edfd02f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/68c75f17e52d83ab9f60926c912d2820edfd02f0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c6455c77ab90910bf4c03005fb0a7dfe785e7087",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6455c77ab90910bf4c03005fb0a7dfe785e7087",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c6455c77ab90910bf4c03005fb0a7dfe785e7087",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6455c77ab90910bf4c03005fb0a7dfe785e7087/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c38c49d0b708cf948eb46e0857eb743cda09980c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c38c49d0b708cf948eb46e0857eb743cda09980c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c38c49d0b708cf948eb46e0857eb743cda09980c"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "db6c28972d8ec4a9c532f65af7ae75612fd5296c",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6455c77ab90910bf4c03005fb0a7dfe785e7087/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6455c77ab90910bf4c03005fb0a7dfe785e7087/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=c6455c77ab90910bf4c03005fb0a7dfe785e7087",
        "patch": "@@ -27,6 +27,14 @@ Low-level RPC API changes\n   advantage if a JSON library insists on using a lossy floating point type for\n   numbers, which would be dangerous for monetary amounts.\n \n+Option parsing behavior\n+-----------------------\n+\n+Command line options are now parsed strictly in the order in which they are\n+specified. It used to be the case that `-X -noX` ends up, unintuitively, with X\n+set, as `-X` had precedence over `-noX`. This is no longer the case. Like for\n+other software, the last specified value for an option will hold.\n+\n 0.12.0 Change log\n =================\n "
      }
    ]
  },
  {
    "sha": "17b11428c135203342aff38cabc8047e673f38ac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxN2IxMTQyOGMxMzUyMDMzNDJhZmYzOGNhYmM4MDQ3ZTY3M2YzOGFj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-04-28T17:27:16Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-07-27T13:28:43Z"
      },
      "message": "Cache transaction validation successes",
      "tree": {
        "sha": "9a4634eaa35696916ead713371895bddef9acddf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a4634eaa35696916ead713371895bddef9acddf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/17b11428c135203342aff38cabc8047e673f38ac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17b11428c135203342aff38cabc8047e673f38ac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/17b11428c135203342aff38cabc8047e673f38ac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17b11428c135203342aff38cabc8047e673f38ac/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5"
      }
    ],
    "stats": {
      "total": 150,
      "additions": 150,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7477d08b18e1e73f88117673a80f2b908eb14b8d",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17b11428c135203342aff38cabc8047e673f38ac/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17b11428c135203342aff38cabc8047e673f38ac/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=17b11428c135203342aff38cabc8047e673f38ac",
        "patch": "@@ -1277,6 +1277,9 @@ int GetSpendHeight(const CCoinsViewCache& inputs)\n     return pindexPrev->nHeight + 1;\n }\n \n+static mrumap<uint256, unsigned int> cacheCheck(2 * MAX_BLOCK_SIZE / CTransaction().GetSerializeSize(SER_NETWORK, PROTOCOL_VERSION));\n+static boost::mutex cs_cacheCheck;\n+\n namespace Consensus {\n bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight)\n {\n@@ -1331,6 +1334,17 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n {\n     if (!tx.IsCoinBase())\n     {\n+        if (fScriptChecks) {\n+            boost::unique_lock<boost::mutex> lock(cs_cacheCheck);\n+            mrumap<uint256, unsigned int>::const_iterator iter = cacheCheck.find(tx.GetHash());\n+            if (iter != cacheCheck.end()) {\n+                // The following test relies on the fact that all script validation flags are softforks (i.e. an extra bit set cannot cause a false result to become true).\n+                if ((iter->second & flags) == flags) {\n+                    return true;\n+                }\n+            }\n+        }\n+\n         if (!Consensus::CheckTxInputs(tx, state, inputs, GetSpendHeight(inputs)))\n             return false;\n \n@@ -1381,6 +1395,11 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n         }\n     }\n \n+    if (cacheStore && fScriptChecks && pvChecks == NULL) {\n+        boost::unique_lock<boost::mutex> lock(cs_cacheCheck);\n+        cacheCheck.insert(tx.GetHash(), flags);\n+    }\n+\n     return true;\n }\n \n@@ -2101,6 +2120,13 @@ bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew, CBlock *\n     BOOST_FOREACH(const CTransaction &tx, pblock->vtx) {\n         SyncWithWallets(tx, pblock);\n     }\n+    // Erase block's transactions from the validation cache\n+    {\n+        boost::unique_lock<boost::mutex> lock(cs_cacheCheck);\n+        BOOST_FOREACH(const CTransaction &tx, pblock->vtx) {\n+            cacheCheck.erase(tx.GetHash());\n+        }\n+    }\n \n     int64_t nTime6 = GetTimeMicros(); nTimePostConnect += nTime6 - nTime5; nTimeTotal += nTime6 - nTime1;\n     LogPrint(\"bench\", \"  - Connect postprocess: %.2fms [%.2fs]\\n\", (nTime6 - nTime5) * 0.001, nTimePostConnect * 0.000001);"
      },
      {
        "sha": "9dff5694ba818e571003a9dfff885d901cf9a0c6",
        "filename": "src/mruset.h",
        "status": "modified",
        "additions": 60,
        "deletions": 0,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17b11428c135203342aff38cabc8047e673f38ac/src/mruset.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17b11428c135203342aff38cabc8047e673f38ac/src/mruset.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/mruset.h?ref=17b11428c135203342aff38cabc8047e673f38ac",
        "patch": "@@ -9,6 +9,10 @@\n #include <vector>\n #include <utility>\n \n+#include <boost/multi_index_container.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index/sequenced_index.hpp>\n+\n /** STL-like set container that only keeps the most recent N elements. */\n template <typename T>\n class mruset\n@@ -62,4 +66,60 @@ class mruset\n     size_type max_size() const { return nMaxSize; }\n };\n \n+/** STL-like map container that only keeps the most recent N elements. */\n+template <typename K, typename V>\n+class mrumap\n+{\n+private:\n+    struct key_extractor {\n+        typedef K result_type;\n+        const result_type& operator()(const std::pair<K, V>& e) const { return e.first; }\n+        result_type& operator()(std::pair<K, V>* e) const { return e->first; }\n+    };\n+\n+    typedef boost::multi_index_container<\n+        std::pair<K, V>,\n+        boost::multi_index::indexed_by<\n+            boost::multi_index::sequenced<>,\n+            boost::multi_index::ordered_unique<key_extractor>\n+        >\n+    > map_type;\n+\n+public:\n+    typedef K key_type;\n+    typedef std::pair<K, V> value_type;\n+    typedef typename map_type::iterator iterator;\n+    typedef typename map_type::const_iterator const_iterator;\n+    typedef typename map_type::size_type size_type;\n+\n+protected:\n+    map_type m_;\n+    size_type max_size_;\n+\n+public:\n+    mrumap(size_type max_size_in = 1) { clear(max_size_in); }\n+    iterator begin() { return m_.begin(); }\n+    iterator end() { return m_.end(); }\n+    const_iterator begin() const { return m_.begin(); }\n+    const_iterator end() const { return m_.end(); }\n+    size_type size() const { return m_.size(); }\n+    bool empty() const { return m_.empty(); }\n+    iterator find(const key_type& key) { return m_.template project<0>(boost::get<1>(m_).find(key)); }\n+    const_iterator find(const key_type& key) const { return m_.template project<0>(boost::get<1>(m_).find(key)); }\n+    size_type count(const key_type& key) const { return boost::get<1>(m_).count(key); }\n+    void clear(size_type max_size_in) { m_.clear(); max_size_ = max_size_in; }\n+    std::pair<iterator, bool> insert(const K& key, const V& value) \n+    {\n+        std::pair<K, V> elem(key, value);\n+        std::pair<iterator, bool> p = m_.push_front(elem);\n+        if (p.second && m_.size() > max_size_) {\n+            m_.pop_back();\n+        }\n+        return p;\n+    }\n+    void erase(iterator it) { m_.erase(it); }\n+    void erase(const key_type& k) { boost::get<1>(m_).erase(k); }\n+    size_type max_size() const { return max_size_; }\n+};\n+\n #endif // BITCOIN_MRUSET_H"
      },
      {
        "sha": "3c0668916856e9ccdcea3377ea5efe705261c466",
        "filename": "src/test/mruset_tests.cpp",
        "status": "modified",
        "additions": 64,
        "deletions": 0,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17b11428c135203342aff38cabc8047e673f38ac/src/test/mruset_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17b11428c135203342aff38cabc8047e673f38ac/src/test/mruset_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mruset_tests.cpp?ref=17b11428c135203342aff38cabc8047e673f38ac",
        "patch": "@@ -78,4 +78,68 @@ BOOST_AUTO_TEST_CASE(mruset_test)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(mrumap_test)\n+{\n+    // The mrumap being tested.\n+    mrumap<int, char> mru(5000);\n+\n+    // Run the test 10 times.\n+    for (int test = 0; test < 10; test++) {\n+        // Reset mru.\n+        mru.clear(5000);\n+\n+        // A deque + set to simulate the mruset.\n+        std::deque<int> rep;\n+        std::map<int, char> all;\n+\n+        // Insert 10000 random integers below 15000.\n+        for (int j=0; j<10000; j++) {\n+            int add = GetRandInt(15000);\n+            char val = (char)GetRandInt(256);\n+            mru.insert(add, val);\n+\n+            // Add the number to rep/all as well.\n+            if (all.count(add) == 0) {\n+               all.insert(std::make_pair<int, char>(add, val));\n+               rep.push_back(add);\n+               if (all.size() == 5001) {\n+                   all.erase(rep.front());\n+                   rep.pop_front();\n+               }\n+            }\n+\n+            if (GetRandInt(5) == 0) {\n+                // With 20% chance: remove an item\n+                int pos = GetRandInt(rep.size());\n+                std::deque<int>::iterator it = rep.begin();\n+                while (pos--) { it++; }\n+                int delval = *it;\n+                mru.erase(delval);\n+                all.erase(delval);\n+                rep.erase(it);\n+            }\n+\n+            // Do a full comparison between mru and the simulated mru every 1000 and every 5001 elements.\n+            if (j % 1000 == 0 || j % 5001 == 0) {\n+                // Check that all elements that should be in there, are in there.\n+                BOOST_FOREACH(int x, rep) {\n+                    BOOST_CHECK(mru.count(x));\n+                    BOOST_CHECK(mru.find(x)->second == all[x]);\n+                }\n+\n+                // Check that all elements that are in there, should be in there.\n+                for (mrumap<int, char>::iterator it = mru.begin(); it != mru.end(); it++) {\n+                    BOOST_CHECK(all.count(it->first));\n+                    BOOST_CHECK(all[it->first] == it->second);\n+                }\n+\n+                for (int t = 0; t < 10; t++) {\n+                    int r = GetRandInt(15000);\n+                    BOOST_CHECK(all.count(r) == mru.count(r));\n+                }\n+            }\n+        }\n+    }\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "517e6dd25618522c716e64859554b0f29c6e65d0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MTdlNmRkMjU2MTg1MjJjNzE2ZTY0ODU5NTU0YjBmMjljNmU2NWQw",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2015-03-03T14:59:32Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-07-27T13:50:21Z"
      },
      "message": "Unit test doublespends in new blocks\n\nAs suggested by Greg Maxwell-- unit test to make sure a block\nwith a double-spend in it doesn't pass validation if half of\nthe double-spend is already in the memory pool (so full-blown\ntransaction validation is skipped) when the block is received.",
      "tree": {
        "sha": "0df44e4bf60db529846142b60cc2894c128d3d8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0df44e4bf60db529846142b60cc2894c128d3d8b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/517e6dd25618522c716e64859554b0f29c6e65d0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/517e6dd25618522c716e64859554b0f29c6e65d0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/517e6dd25618522c716e64859554b0f29c6e65d0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/517e6dd25618522c716e64859554b0f29c6e65d0/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "17b11428c135203342aff38cabc8047e673f38ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17b11428c135203342aff38cabc8047e673f38ac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/17b11428c135203342aff38cabc8047e673f38ac"
      }
    ],
    "stats": {
      "total": 186,
      "additions": 180,
      "deletions": 6
    },
    "files": [
      {
        "sha": "f9384a09a4114c96f6e6985a3e9255f67db5dd83",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/517e6dd25618522c716e64859554b0f29c6e65d0/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/517e6dd25618522c716e64859554b0f29c6e65d0/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=517e6dd25618522c716e64859554b0f29c6e65d0",
        "patch": "@@ -73,6 +73,7 @@ BITCOIN_TESTS =\\\n   test/test_bitcoin.h \\\n   test/timedata_tests.cpp \\\n   test/transaction_tests.cpp \\\n+  test/txvalidationcache_tests.cpp \\\n   test/uint256_tests.cpp \\\n   test/univalue_tests.cpp \\\n   test/util_tests.cpp"
      },
      {
        "sha": "e36112bd4fd12211236ee03a86617d1182cff682",
        "filename": "src/test/README.md",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/517e6dd25618522c716e64859554b0f29c6e65d0/src/test/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/517e6dd25618522c716e64859554b0f29c6e65d0/src/test/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/README.md?ref=517e6dd25618522c716e64859554b0f29c6e65d0",
        "patch": "@@ -18,4 +18,16 @@ uint256_tests.cpp.\n \n For further reading, I found the following website to be helpful in\n explaining how the boost unit test framework works:\n-[http://www.alittlemadness.com/2009/03/31/c-unit-testing-with-boosttest/](http://www.alittlemadness.com/2009/03/31/c-unit-testing-with-boosttest/).\n\\ No newline at end of file\n+[http://www.alittlemadness.com/2009/03/31/c-unit-testing-with-boosttest/](http://www.alittlemadness.com/2009/03/31/c-unit-testing-with-boosttest/).\n+\n+test_bitcoin has some built-in command-line arguments; for\n+example, to run just the getarg_tests verbosely:\n+\n+    test_bitcoin --log_level=all --run_test=getarg_tests\n+\n+... or to run just the doubledash test:\n+\n+    test_bitcoin --run_test=getarg_tests/doubledash\n+\n+Run  test_bitcoin --help   for the full list.\n+"
      },
      {
        "sha": "8d81275a6fefa471460110ecde632a6a6f246b2b",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 54,
        "deletions": 3,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/517e6dd25618522c716e64859554b0f29c6e65d0/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/517e6dd25618522c716e64859554b0f29c6e65d0/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=517e6dd25618522c716e64859554b0f29c6e65d0",
        "patch": "@@ -7,8 +7,12 @@\n #include \"test_bitcoin.h\"\n \n #include \"chainparams.h\"\n+#include \"consensus/consensus.h\"\n+#include \"consensus/validation.h\"\n #include \"key.h\"\n #include \"main.h\"\n+#include \"miner.h\"\n+#include \"pubkey.h\"\n #include \"random.h\"\n #include \"txdb.h\"\n #include \"ui_interface.h\"\n@@ -28,20 +32,22 @@ CWallet* pwalletMain;\n extern bool fPrintToConsole;\n extern void noui_connect();\n \n-BasicTestingSetup::BasicTestingSetup()\n+BasicTestingSetup::BasicTestingSetup(CBaseChainParams::Network network)\n {\n         ECC_Start();\n         SetupEnvironment();\n         fPrintToDebugLog = false; // don't want to write to debug.log file\n         fCheckBlockIndex = true;\n-        SelectParams(CBaseChainParams::MAIN);\n+        SelectParams(network);\n+        noui_connect();\n }\n+\n BasicTestingSetup::~BasicTestingSetup()\n {\n         ECC_Stop();\n }\n \n-TestingSetup::TestingSetup()\n+TestingSetup::TestingSetup(CBaseChainParams::Network network) : BasicTestingSetup(network)\n {\n #ifdef ENABLE_WALLET\n         bitdb.MakeMock();\n@@ -87,6 +93,51 @@ TestingSetup::~TestingSetup()\n         boost::filesystem::remove_all(pathTemp);\n }\n \n+TestChain100Setup::TestChain100Setup() : TestingSetup(CBaseChainParams::REGTEST)\n+{\n+    // Generate a 100-block chain:\n+    coinbaseKey.MakeNewKey(true);\n+    CScript scriptPubKey = CScript() <<  ToByteVector(coinbaseKey.GetPubKey()) << OP_CHECKSIG;\n+    for (int i = 0; i < COINBASE_MATURITY; i++)\n+    {\n+        std::vector<CMutableTransaction> noTxns;\n+        CBlock b = CreateAndProcessBlock(noTxns, scriptPubKey);\n+        coinbaseTxns.push_back(b.vtx[0]);\n+    }\n+}\n+\n+//\n+// Create a new block with just given transactions, coinbase paying to\n+// scriptPubKey, and try to add it to the current chain.\n+//\n+CBlock\n+TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>& txns, const CScript& scriptPubKey)\n+{\n+    CBlockTemplate *pblocktemplate = CreateNewBlock(scriptPubKey);\n+    CBlock& block = pblocktemplate->block;\n+\n+    // Replace mempool-selected txns with just coinbase plus passed-in txns:\n+    block.vtx.resize(1);\n+    BOOST_FOREACH(const CMutableTransaction& tx, txns)\n+        block.vtx.push_back(tx);\n+    // IncrementExtraNonce creates a valid coinbase and merkleRoot\n+    unsigned int extraNonce = 0;\n+    IncrementExtraNonce(&block, chainActive.Tip(), extraNonce);\n+\n+    while (!CheckProofOfWork(block.GetHash(), block.nBits, Params(CBaseChainParams::REGTEST).GetConsensus())) ++block.nNonce;\n+\n+    CValidationState state;\n+    ProcessNewBlock(state, NULL, &block, true, NULL);\n+\n+    CBlock result = block;\n+    delete pblocktemplate;\n+    return result;\n+}\n+\n+TestChain100Setup::~TestChain100Setup()\n+{\n+}\n+\n void Shutdown(void* parg)\n {\n   exit(0);"
      },
      {
        "sha": "b9314d0611be20b8394e1800d57c4991e3c88bd6",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 26,
        "deletions": 2,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/517e6dd25618522c716e64859554b0f29c6e65d0/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/517e6dd25618522c716e64859554b0f29c6e65d0/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=517e6dd25618522c716e64859554b0f29c6e65d0",
        "patch": "@@ -1,6 +1,8 @@\n #ifndef BITCOIN_TEST_TEST_BITCOIN_H\n #define BITCOIN_TEST_TEST_BITCOIN_H\n \n+#include \"chainparamsbase.h\"\n+#include \"key.h\"\n #include \"txdb.h\"\n \n #include <boost/filesystem.hpp>\n@@ -10,7 +12,7 @@\n  * This just configures logging and chain parameters.\n  */\n struct BasicTestingSetup {\n-    BasicTestingSetup();\n+    BasicTestingSetup(CBaseChainParams::Network network = CBaseChainParams::MAIN);\n     ~BasicTestingSetup();\n };\n \n@@ -23,8 +25,30 @@ struct TestingSetup: public BasicTestingSetup {\n     boost::filesystem::path pathTemp;\n     boost::thread_group threadGroup;\n \n-    TestingSetup();\n+    TestingSetup(CBaseChainParams::Network network = CBaseChainParams::MAIN);\n     ~TestingSetup();\n };\n \n+class CBlock;\n+struct CMutableTransaction;\n+class CScript;\n+\n+//\n+// Testing fixture that pre-creates a\n+// 100-block REGTEST-mode block chain\n+//\n+struct TestChain100Setup : public TestingSetup {\n+    TestChain100Setup();\n+\n+    // Create a new block with just given transactions, coinbase paying to\n+    // scriptPubKey, and try to add it to the current chain.\n+    CBlock CreateAndProcessBlock(const std::vector<CMutableTransaction>& txns,\n+                                 const CScript& scriptPubKey);\n+\n+    ~TestChain100Setup();\n+\n+    std::vector<CTransaction> coinbaseTxns; // For convenience, coinbase transactions\n+    CKey coinbaseKey; // private/public key needed to spend coinbase transactions\n+};\n+\n #endif"
      },
      {
        "sha": "edad18644ec3f2ef9b4ec57d3b6bd290c83d572c",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "added",
        "additions": 86,
        "deletions": 0,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/517e6dd25618522c716e64859554b0f29c6e65d0/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/517e6dd25618522c716e64859554b0f29c6e65d0/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=517e6dd25618522c716e64859554b0f29c6e65d0",
        "patch": "@@ -0,0 +1,86 @@\n+// Copyright (c) 2011-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"consensus/validation.h\"\n+#include \"key.h\"\n+#include \"main.h\"\n+#include \"miner.h\"\n+#include \"pubkey.h\"\n+#include \"txmempool.h\"\n+#include \"random.h\"\n+#include \"script/standard.h\"\n+#include \"test/test_bitcoin.h\"\n+#include \"utiltime.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(tx_validationcache_tests)\n+\n+static bool\n+ToMemPool(CMutableTransaction& tx)\n+{\n+    LOCK(cs_main);\n+\n+    CValidationState state;\n+    return AcceptToMemoryPool(mempool, state, tx, false, NULL, false);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)\n+{\n+    // Make sure skipping validation of transctions that were\n+    // validated going into the memory pool does not allow\n+    // double-spends in blocks to pass validation when they should not.\n+\n+    CScript scriptPubKey = CScript() <<  ToByteVector(coinbaseKey.GetPubKey()) << OP_CHECKSIG;\n+\n+    // Create a double-spend of mature coinbase txn:\n+    std::vector<CMutableTransaction> spends;\n+    spends.resize(2);\n+    for (int i = 0; i < 2; i++)\n+    {\n+        spends[i].vin.resize(1);\n+        spends[i].vin[0].prevout.hash = coinbaseTxns[0].GetHash();\n+        spends[i].vin[0].prevout.n = 0;\n+        spends[i].vout.resize(1);\n+        spends[i].vout[0].nValue = 11*CENT;\n+        spends[i].vout[0].scriptPubKey = scriptPubKey;\n+\n+        // Sign:\n+        std::vector<unsigned char> vchSig;\n+        uint256 hash = SignatureHash(scriptPubKey, spends[i], 0, SIGHASH_ALL);\n+        BOOST_CHECK(coinbaseKey.Sign(hash, vchSig));\n+        vchSig.push_back((unsigned char)SIGHASH_ALL);\n+        spends[i].vin[0].scriptSig << vchSig;\n+    }\n+\n+    CBlock block;\n+\n+    // Test 1: block with both of those transactions should be rejected.\n+    block = CreateAndProcessBlock(spends, scriptPubKey);\n+    BOOST_CHECK(chainActive.Tip()->GetBlockHash() != block.GetHash());\n+\n+    // Test 2: ... and should be rejected if spend1 is in the memory pool\n+    BOOST_CHECK(ToMemPool(spends[0]));\n+    block = CreateAndProcessBlock(spends, scriptPubKey);\n+    BOOST_CHECK(chainActive.Tip()->GetBlockHash() != block.GetHash());\n+    mempool.clear();\n+\n+    // Test 3: ... and should be rejected if spend2 is in the memory pool\n+    BOOST_CHECK(ToMemPool(spends[1]));\n+    block = CreateAndProcessBlock(spends, scriptPubKey);\n+    BOOST_CHECK(chainActive.Tip()->GetBlockHash() != block.GetHash());\n+    mempool.clear();\n+\n+    // Final sanity test: first spend in mempool, second in block, that's OK:\n+    std::vector<CMutableTransaction> oneSpend;\n+    oneSpend.push_back(spends[0]);\n+    BOOST_CHECK(ToMemPool(spends[1]));\n+    block = CreateAndProcessBlock(oneSpend, scriptPubKey);\n+    BOOST_CHECK(chainActive.Tip()->GetBlockHash() == block.GetHash());\n+    // spends[1] should have been removed from the mempool when the\n+    // block with spends[0] is accepted:\n+    BOOST_CHECK_EQUAL(mempool.size(), 0);\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "08e9c57ba2aa808c608daa0b4503f1940a356f8c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOGU5YzU3YmEyYWE4MDhjNjA4ZGFhMGI0NTAzZjE5NDBhMzU2Zjhj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-27T14:26:46Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-27T14:31:07Z"
      },
      "message": "Merge pull request #6077\n\n517e6dd Unit test doublespends in new blocks (Gavin Andresen)\n17b1142 Cache transaction validation successes (Pieter Wuille)",
      "tree": {
        "sha": "0df44e4bf60db529846142b60cc2894c128d3d8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0df44e4bf60db529846142b60cc2894c128d3d8b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/08e9c57ba2aa808c608daa0b4503f1940a356f8c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVtkCrAAoJEHSBCwEjRsmmFskIAL4FEysiq5Uin3vttA7m23rj\nGzo0vphNVUg37br/2knO0uJ7OB/KfOTDf5nqLgXePFljC3/+VcMhnoVP2yu6eLEO\nchIs2X/zlYnEwf7rctwruGCIKSnFBPE1NmYJ6JpYG5RhK7kRfFi5cwgbIl3CovRT\nCoh5Gs5cgekZVJofkMzqqJxVcyiI70E3ZyeNI4m/4saSEyL14sXuq2vUirjNzf4d\nrkhGE9jmcDN6GUQIglBCIRt1OxZ/MbMDfT5ncNw0wmAQ8c2PITTkpKbSa+CcMWp1\nBB29tVCCU9KmJn2Bt4WG382e/zuOaWQM7o2ZYIW7SiQQgeDQvzSQvC0Pxn7jr3Y=\n=qM6/\n-----END PGP SIGNATURE-----",
        "payload": "tree 0df44e4bf60db529846142b60cc2894c128d3d8b\nparent ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5\nparent 517e6dd25618522c716e64859554b0f29c6e65d0\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1438007206 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1438007467 +0200\n\nMerge pull request #6077\n\n517e6dd Unit test doublespends in new blocks (Gavin Andresen)\n17b1142 Cache transaction validation successes (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08e9c57ba2aa808c608daa0b4503f1940a356f8c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/08e9c57ba2aa808c608daa0b4503f1940a356f8c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08e9c57ba2aa808c608daa0b4503f1940a356f8c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ca37e0f33980a1fe96ac4ed08fd7d692a7a592a5"
      },
      {
        "sha": "517e6dd25618522c716e64859554b0f29c6e65d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/517e6dd25618522c716e64859554b0f29c6e65d0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/517e6dd25618522c716e64859554b0f29c6e65d0"
      }
    ],
    "stats": {
      "total": 336,
      "additions": 330,
      "deletions": 6
    },
    "files": [
      {
        "sha": "f9384a09a4114c96f6e6985a3e9255f67db5dd83",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08e9c57ba2aa808c608daa0b4503f1940a356f8c/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08e9c57ba2aa808c608daa0b4503f1940a356f8c/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=08e9c57ba2aa808c608daa0b4503f1940a356f8c",
        "patch": "@@ -73,6 +73,7 @@ BITCOIN_TESTS =\\\n   test/test_bitcoin.h \\\n   test/timedata_tests.cpp \\\n   test/transaction_tests.cpp \\\n+  test/txvalidationcache_tests.cpp \\\n   test/uint256_tests.cpp \\\n   test/univalue_tests.cpp \\\n   test/util_tests.cpp"
      },
      {
        "sha": "7477d08b18e1e73f88117673a80f2b908eb14b8d",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08e9c57ba2aa808c608daa0b4503f1940a356f8c/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08e9c57ba2aa808c608daa0b4503f1940a356f8c/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=08e9c57ba2aa808c608daa0b4503f1940a356f8c",
        "patch": "@@ -1277,6 +1277,9 @@ int GetSpendHeight(const CCoinsViewCache& inputs)\n     return pindexPrev->nHeight + 1;\n }\n \n+static mrumap<uint256, unsigned int> cacheCheck(2 * MAX_BLOCK_SIZE / CTransaction().GetSerializeSize(SER_NETWORK, PROTOCOL_VERSION));\n+static boost::mutex cs_cacheCheck;\n+\n namespace Consensus {\n bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight)\n {\n@@ -1331,6 +1334,17 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n {\n     if (!tx.IsCoinBase())\n     {\n+        if (fScriptChecks) {\n+            boost::unique_lock<boost::mutex> lock(cs_cacheCheck);\n+            mrumap<uint256, unsigned int>::const_iterator iter = cacheCheck.find(tx.GetHash());\n+            if (iter != cacheCheck.end()) {\n+                // The following test relies on the fact that all script validation flags are softforks (i.e. an extra bit set cannot cause a false result to become true).\n+                if ((iter->second & flags) == flags) {\n+                    return true;\n+                }\n+            }\n+        }\n+\n         if (!Consensus::CheckTxInputs(tx, state, inputs, GetSpendHeight(inputs)))\n             return false;\n \n@@ -1381,6 +1395,11 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n         }\n     }\n \n+    if (cacheStore && fScriptChecks && pvChecks == NULL) {\n+        boost::unique_lock<boost::mutex> lock(cs_cacheCheck);\n+        cacheCheck.insert(tx.GetHash(), flags);\n+    }\n+\n     return true;\n }\n \n@@ -2101,6 +2120,13 @@ bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew, CBlock *\n     BOOST_FOREACH(const CTransaction &tx, pblock->vtx) {\n         SyncWithWallets(tx, pblock);\n     }\n+    // Erase block's transactions from the validation cache\n+    {\n+        boost::unique_lock<boost::mutex> lock(cs_cacheCheck);\n+        BOOST_FOREACH(const CTransaction &tx, pblock->vtx) {\n+            cacheCheck.erase(tx.GetHash());\n+        }\n+    }\n \n     int64_t nTime6 = GetTimeMicros(); nTimePostConnect += nTime6 - nTime5; nTimeTotal += nTime6 - nTime1;\n     LogPrint(\"bench\", \"  - Connect postprocess: %.2fms [%.2fs]\\n\", (nTime6 - nTime5) * 0.001, nTimePostConnect * 0.000001);"
      },
      {
        "sha": "9dff5694ba818e571003a9dfff885d901cf9a0c6",
        "filename": "src/mruset.h",
        "status": "modified",
        "additions": 60,
        "deletions": 0,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08e9c57ba2aa808c608daa0b4503f1940a356f8c/src/mruset.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08e9c57ba2aa808c608daa0b4503f1940a356f8c/src/mruset.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/mruset.h?ref=08e9c57ba2aa808c608daa0b4503f1940a356f8c",
        "patch": "@@ -9,6 +9,10 @@\n #include <vector>\n #include <utility>\n \n+#include <boost/multi_index_container.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index/sequenced_index.hpp>\n+\n /** STL-like set container that only keeps the most recent N elements. */\n template <typename T>\n class mruset\n@@ -62,4 +66,60 @@ class mruset\n     size_type max_size() const { return nMaxSize; }\n };\n \n+/** STL-like map container that only keeps the most recent N elements. */\n+template <typename K, typename V>\n+class mrumap\n+{\n+private:\n+    struct key_extractor {\n+        typedef K result_type;\n+        const result_type& operator()(const std::pair<K, V>& e) const { return e.first; }\n+        result_type& operator()(std::pair<K, V>* e) const { return e->first; }\n+    };\n+\n+    typedef boost::multi_index_container<\n+        std::pair<K, V>,\n+        boost::multi_index::indexed_by<\n+            boost::multi_index::sequenced<>,\n+            boost::multi_index::ordered_unique<key_extractor>\n+        >\n+    > map_type;\n+\n+public:\n+    typedef K key_type;\n+    typedef std::pair<K, V> value_type;\n+    typedef typename map_type::iterator iterator;\n+    typedef typename map_type::const_iterator const_iterator;\n+    typedef typename map_type::size_type size_type;\n+\n+protected:\n+    map_type m_;\n+    size_type max_size_;\n+\n+public:\n+    mrumap(size_type max_size_in = 1) { clear(max_size_in); }\n+    iterator begin() { return m_.begin(); }\n+    iterator end() { return m_.end(); }\n+    const_iterator begin() const { return m_.begin(); }\n+    const_iterator end() const { return m_.end(); }\n+    size_type size() const { return m_.size(); }\n+    bool empty() const { return m_.empty(); }\n+    iterator find(const key_type& key) { return m_.template project<0>(boost::get<1>(m_).find(key)); }\n+    const_iterator find(const key_type& key) const { return m_.template project<0>(boost::get<1>(m_).find(key)); }\n+    size_type count(const key_type& key) const { return boost::get<1>(m_).count(key); }\n+    void clear(size_type max_size_in) { m_.clear(); max_size_ = max_size_in; }\n+    std::pair<iterator, bool> insert(const K& key, const V& value) \n+    {\n+        std::pair<K, V> elem(key, value);\n+        std::pair<iterator, bool> p = m_.push_front(elem);\n+        if (p.second && m_.size() > max_size_) {\n+            m_.pop_back();\n+        }\n+        return p;\n+    }\n+    void erase(iterator it) { m_.erase(it); }\n+    void erase(const key_type& k) { boost::get<1>(m_).erase(k); }\n+    size_type max_size() const { return max_size_; }\n+};\n+\n #endif // BITCOIN_MRUSET_H"
      },
      {
        "sha": "e36112bd4fd12211236ee03a86617d1182cff682",
        "filename": "src/test/README.md",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08e9c57ba2aa808c608daa0b4503f1940a356f8c/src/test/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08e9c57ba2aa808c608daa0b4503f1940a356f8c/src/test/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/README.md?ref=08e9c57ba2aa808c608daa0b4503f1940a356f8c",
        "patch": "@@ -18,4 +18,16 @@ uint256_tests.cpp.\n \n For further reading, I found the following website to be helpful in\n explaining how the boost unit test framework works:\n-[http://www.alittlemadness.com/2009/03/31/c-unit-testing-with-boosttest/](http://www.alittlemadness.com/2009/03/31/c-unit-testing-with-boosttest/).\n\\ No newline at end of file\n+[http://www.alittlemadness.com/2009/03/31/c-unit-testing-with-boosttest/](http://www.alittlemadness.com/2009/03/31/c-unit-testing-with-boosttest/).\n+\n+test_bitcoin has some built-in command-line arguments; for\n+example, to run just the getarg_tests verbosely:\n+\n+    test_bitcoin --log_level=all --run_test=getarg_tests\n+\n+... or to run just the doubledash test:\n+\n+    test_bitcoin --run_test=getarg_tests/doubledash\n+\n+Run  test_bitcoin --help   for the full list.\n+"
      },
      {
        "sha": "3c0668916856e9ccdcea3377ea5efe705261c466",
        "filename": "src/test/mruset_tests.cpp",
        "status": "modified",
        "additions": 64,
        "deletions": 0,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08e9c57ba2aa808c608daa0b4503f1940a356f8c/src/test/mruset_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08e9c57ba2aa808c608daa0b4503f1940a356f8c/src/test/mruset_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mruset_tests.cpp?ref=08e9c57ba2aa808c608daa0b4503f1940a356f8c",
        "patch": "@@ -78,4 +78,68 @@ BOOST_AUTO_TEST_CASE(mruset_test)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(mrumap_test)\n+{\n+    // The mrumap being tested.\n+    mrumap<int, char> mru(5000);\n+\n+    // Run the test 10 times.\n+    for (int test = 0; test < 10; test++) {\n+        // Reset mru.\n+        mru.clear(5000);\n+\n+        // A deque + set to simulate the mruset.\n+        std::deque<int> rep;\n+        std::map<int, char> all;\n+\n+        // Insert 10000 random integers below 15000.\n+        for (int j=0; j<10000; j++) {\n+            int add = GetRandInt(15000);\n+            char val = (char)GetRandInt(256);\n+            mru.insert(add, val);\n+\n+            // Add the number to rep/all as well.\n+            if (all.count(add) == 0) {\n+               all.insert(std::make_pair<int, char>(add, val));\n+               rep.push_back(add);\n+               if (all.size() == 5001) {\n+                   all.erase(rep.front());\n+                   rep.pop_front();\n+               }\n+            }\n+\n+            if (GetRandInt(5) == 0) {\n+                // With 20% chance: remove an item\n+                int pos = GetRandInt(rep.size());\n+                std::deque<int>::iterator it = rep.begin();\n+                while (pos--) { it++; }\n+                int delval = *it;\n+                mru.erase(delval);\n+                all.erase(delval);\n+                rep.erase(it);\n+            }\n+\n+            // Do a full comparison between mru and the simulated mru every 1000 and every 5001 elements.\n+            if (j % 1000 == 0 || j % 5001 == 0) {\n+                // Check that all elements that should be in there, are in there.\n+                BOOST_FOREACH(int x, rep) {\n+                    BOOST_CHECK(mru.count(x));\n+                    BOOST_CHECK(mru.find(x)->second == all[x]);\n+                }\n+\n+                // Check that all elements that are in there, should be in there.\n+                for (mrumap<int, char>::iterator it = mru.begin(); it != mru.end(); it++) {\n+                    BOOST_CHECK(all.count(it->first));\n+                    BOOST_CHECK(all[it->first] == it->second);\n+                }\n+\n+                for (int t = 0; t < 10; t++) {\n+                    int r = GetRandInt(15000);\n+                    BOOST_CHECK(all.count(r) == mru.count(r));\n+                }\n+            }\n+        }\n+    }\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "8d81275a6fefa471460110ecde632a6a6f246b2b",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 54,
        "deletions": 3,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08e9c57ba2aa808c608daa0b4503f1940a356f8c/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08e9c57ba2aa808c608daa0b4503f1940a356f8c/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=08e9c57ba2aa808c608daa0b4503f1940a356f8c",
        "patch": "@@ -7,8 +7,12 @@\n #include \"test_bitcoin.h\"\n \n #include \"chainparams.h\"\n+#include \"consensus/consensus.h\"\n+#include \"consensus/validation.h\"\n #include \"key.h\"\n #include \"main.h\"\n+#include \"miner.h\"\n+#include \"pubkey.h\"\n #include \"random.h\"\n #include \"txdb.h\"\n #include \"ui_interface.h\"\n@@ -28,20 +32,22 @@ CWallet* pwalletMain;\n extern bool fPrintToConsole;\n extern void noui_connect();\n \n-BasicTestingSetup::BasicTestingSetup()\n+BasicTestingSetup::BasicTestingSetup(CBaseChainParams::Network network)\n {\n         ECC_Start();\n         SetupEnvironment();\n         fPrintToDebugLog = false; // don't want to write to debug.log file\n         fCheckBlockIndex = true;\n-        SelectParams(CBaseChainParams::MAIN);\n+        SelectParams(network);\n+        noui_connect();\n }\n+\n BasicTestingSetup::~BasicTestingSetup()\n {\n         ECC_Stop();\n }\n \n-TestingSetup::TestingSetup()\n+TestingSetup::TestingSetup(CBaseChainParams::Network network) : BasicTestingSetup(network)\n {\n #ifdef ENABLE_WALLET\n         bitdb.MakeMock();\n@@ -87,6 +93,51 @@ TestingSetup::~TestingSetup()\n         boost::filesystem::remove_all(pathTemp);\n }\n \n+TestChain100Setup::TestChain100Setup() : TestingSetup(CBaseChainParams::REGTEST)\n+{\n+    // Generate a 100-block chain:\n+    coinbaseKey.MakeNewKey(true);\n+    CScript scriptPubKey = CScript() <<  ToByteVector(coinbaseKey.GetPubKey()) << OP_CHECKSIG;\n+    for (int i = 0; i < COINBASE_MATURITY; i++)\n+    {\n+        std::vector<CMutableTransaction> noTxns;\n+        CBlock b = CreateAndProcessBlock(noTxns, scriptPubKey);\n+        coinbaseTxns.push_back(b.vtx[0]);\n+    }\n+}\n+\n+//\n+// Create a new block with just given transactions, coinbase paying to\n+// scriptPubKey, and try to add it to the current chain.\n+//\n+CBlock\n+TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>& txns, const CScript& scriptPubKey)\n+{\n+    CBlockTemplate *pblocktemplate = CreateNewBlock(scriptPubKey);\n+    CBlock& block = pblocktemplate->block;\n+\n+    // Replace mempool-selected txns with just coinbase plus passed-in txns:\n+    block.vtx.resize(1);\n+    BOOST_FOREACH(const CMutableTransaction& tx, txns)\n+        block.vtx.push_back(tx);\n+    // IncrementExtraNonce creates a valid coinbase and merkleRoot\n+    unsigned int extraNonce = 0;\n+    IncrementExtraNonce(&block, chainActive.Tip(), extraNonce);\n+\n+    while (!CheckProofOfWork(block.GetHash(), block.nBits, Params(CBaseChainParams::REGTEST).GetConsensus())) ++block.nNonce;\n+\n+    CValidationState state;\n+    ProcessNewBlock(state, NULL, &block, true, NULL);\n+\n+    CBlock result = block;\n+    delete pblocktemplate;\n+    return result;\n+}\n+\n+TestChain100Setup::~TestChain100Setup()\n+{\n+}\n+\n void Shutdown(void* parg)\n {\n   exit(0);"
      },
      {
        "sha": "b9314d0611be20b8394e1800d57c4991e3c88bd6",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 26,
        "deletions": 2,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08e9c57ba2aa808c608daa0b4503f1940a356f8c/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08e9c57ba2aa808c608daa0b4503f1940a356f8c/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=08e9c57ba2aa808c608daa0b4503f1940a356f8c",
        "patch": "@@ -1,6 +1,8 @@\n #ifndef BITCOIN_TEST_TEST_BITCOIN_H\n #define BITCOIN_TEST_TEST_BITCOIN_H\n \n+#include \"chainparamsbase.h\"\n+#include \"key.h\"\n #include \"txdb.h\"\n \n #include <boost/filesystem.hpp>\n@@ -10,7 +12,7 @@\n  * This just configures logging and chain parameters.\n  */\n struct BasicTestingSetup {\n-    BasicTestingSetup();\n+    BasicTestingSetup(CBaseChainParams::Network network = CBaseChainParams::MAIN);\n     ~BasicTestingSetup();\n };\n \n@@ -23,8 +25,30 @@ struct TestingSetup: public BasicTestingSetup {\n     boost::filesystem::path pathTemp;\n     boost::thread_group threadGroup;\n \n-    TestingSetup();\n+    TestingSetup(CBaseChainParams::Network network = CBaseChainParams::MAIN);\n     ~TestingSetup();\n };\n \n+class CBlock;\n+struct CMutableTransaction;\n+class CScript;\n+\n+//\n+// Testing fixture that pre-creates a\n+// 100-block REGTEST-mode block chain\n+//\n+struct TestChain100Setup : public TestingSetup {\n+    TestChain100Setup();\n+\n+    // Create a new block with just given transactions, coinbase paying to\n+    // scriptPubKey, and try to add it to the current chain.\n+    CBlock CreateAndProcessBlock(const std::vector<CMutableTransaction>& txns,\n+                                 const CScript& scriptPubKey);\n+\n+    ~TestChain100Setup();\n+\n+    std::vector<CTransaction> coinbaseTxns; // For convenience, coinbase transactions\n+    CKey coinbaseKey; // private/public key needed to spend coinbase transactions\n+};\n+\n #endif"
      },
      {
        "sha": "edad18644ec3f2ef9b4ec57d3b6bd290c83d572c",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "added",
        "additions": 86,
        "deletions": 0,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08e9c57ba2aa808c608daa0b4503f1940a356f8c/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08e9c57ba2aa808c608daa0b4503f1940a356f8c/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=08e9c57ba2aa808c608daa0b4503f1940a356f8c",
        "patch": "@@ -0,0 +1,86 @@\n+// Copyright (c) 2011-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"consensus/validation.h\"\n+#include \"key.h\"\n+#include \"main.h\"\n+#include \"miner.h\"\n+#include \"pubkey.h\"\n+#include \"txmempool.h\"\n+#include \"random.h\"\n+#include \"script/standard.h\"\n+#include \"test/test_bitcoin.h\"\n+#include \"utiltime.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(tx_validationcache_tests)\n+\n+static bool\n+ToMemPool(CMutableTransaction& tx)\n+{\n+    LOCK(cs_main);\n+\n+    CValidationState state;\n+    return AcceptToMemoryPool(mempool, state, tx, false, NULL, false);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)\n+{\n+    // Make sure skipping validation of transctions that were\n+    // validated going into the memory pool does not allow\n+    // double-spends in blocks to pass validation when they should not.\n+\n+    CScript scriptPubKey = CScript() <<  ToByteVector(coinbaseKey.GetPubKey()) << OP_CHECKSIG;\n+\n+    // Create a double-spend of mature coinbase txn:\n+    std::vector<CMutableTransaction> spends;\n+    spends.resize(2);\n+    for (int i = 0; i < 2; i++)\n+    {\n+        spends[i].vin.resize(1);\n+        spends[i].vin[0].prevout.hash = coinbaseTxns[0].GetHash();\n+        spends[i].vin[0].prevout.n = 0;\n+        spends[i].vout.resize(1);\n+        spends[i].vout[0].nValue = 11*CENT;\n+        spends[i].vout[0].scriptPubKey = scriptPubKey;\n+\n+        // Sign:\n+        std::vector<unsigned char> vchSig;\n+        uint256 hash = SignatureHash(scriptPubKey, spends[i], 0, SIGHASH_ALL);\n+        BOOST_CHECK(coinbaseKey.Sign(hash, vchSig));\n+        vchSig.push_back((unsigned char)SIGHASH_ALL);\n+        spends[i].vin[0].scriptSig << vchSig;\n+    }\n+\n+    CBlock block;\n+\n+    // Test 1: block with both of those transactions should be rejected.\n+    block = CreateAndProcessBlock(spends, scriptPubKey);\n+    BOOST_CHECK(chainActive.Tip()->GetBlockHash() != block.GetHash());\n+\n+    // Test 2: ... and should be rejected if spend1 is in the memory pool\n+    BOOST_CHECK(ToMemPool(spends[0]));\n+    block = CreateAndProcessBlock(spends, scriptPubKey);\n+    BOOST_CHECK(chainActive.Tip()->GetBlockHash() != block.GetHash());\n+    mempool.clear();\n+\n+    // Test 3: ... and should be rejected if spend2 is in the memory pool\n+    BOOST_CHECK(ToMemPool(spends[1]));\n+    block = CreateAndProcessBlock(spends, scriptPubKey);\n+    BOOST_CHECK(chainActive.Tip()->GetBlockHash() != block.GetHash());\n+    mempool.clear();\n+\n+    // Final sanity test: first spend in mempool, second in block, that's OK:\n+    std::vector<CMutableTransaction> oneSpend;\n+    oneSpend.push_back(spends[0]);\n+    BOOST_CHECK(ToMemPool(spends[1]));\n+    block = CreateAndProcessBlock(oneSpend, scriptPubKey);\n+    BOOST_CHECK(chainActive.Tip()->GetBlockHash() == block.GetHash());\n+    // spends[1] should have been removed from the mempool when the\n+    // block with spends[0] is accepted:\n+    BOOST_CHECK_EQUAL(mempool.size(), 0);\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "bbe41088c61f2ad328766e851ffe6169aa80935a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYmU0MTA4OGM2MWYyYWQzMjg3NjZlODUxZmZlNjE2OWFhODA5MzVh",
    "commit": {
      "author": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-07-17T10:42:43Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-07-27T16:37:18Z"
      },
      "message": "Add uint256 support to CRollingBloomFilter",
      "tree": {
        "sha": "c8b48b4f462dccfd11b31d3270b5f9e7123ec40c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c8b48b4f462dccfd11b31d3270b5f9e7123ec40c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bbe41088c61f2ad328766e851ffe6169aa80935a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbe41088c61f2ad328766e851ffe6169aa80935a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bbe41088c61f2ad328766e851ffe6169aa80935a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbe41088c61f2ad328766e851ffe6169aa80935a/comments",
    "author": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "08e9c57ba2aa808c608daa0b4503f1940a356f8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08e9c57ba2aa808c608daa0b4503f1940a356f8c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/08e9c57ba2aa808c608daa0b4503f1940a356f8c"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 24,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e15bc32f974ba98f07c332eb64397c0dd11c3ba7",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbe41088c61f2ad328766e851ffe6169aa80935a/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbe41088c61f2ad328766e851ffe6169aa80935a/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=bbe41088c61f2ad328766e851ffe6169aa80935a",
        "patch": "@@ -234,6 +234,20 @@ void CRollingBloomFilter::insert(const std::vector<unsigned char>& vKey)\n     }\n }\n \n+void CRollingBloomFilter::insert(const uint256& hash)\n+{\n+    if (nInsertions == 0) {\n+        b1.clear();\n+    } else if (nInsertions == nBloomSize / 2) {\n+        b2.clear();\n+    }\n+    b1.insert(hash);\n+    b2.insert(hash);\n+    if (++nInsertions == nBloomSize) {\n+        nInsertions = 0;\n+    }\n+}\n+\n bool CRollingBloomFilter::contains(const std::vector<unsigned char>& vKey) const\n {\n     if (nInsertions < nBloomSize / 2) {\n@@ -242,6 +256,14 @@ bool CRollingBloomFilter::contains(const std::vector<unsigned char>& vKey) const\n     return b1.contains(vKey);\n }\n \n+bool CRollingBloomFilter::contains(const uint256& hash) const\n+{\n+    if (nInsertions < nBloomSize / 2) {\n+        return b2.contains(hash);\n+    }\n+    return b1.contains(hash);\n+}\n+\n void CRollingBloomFilter::clear()\n {\n     b1.clear();"
      },
      {
        "sha": "0daa3728ed0e4183a0bb6e850a3fff14a428c6ec",
        "filename": "src/bloom.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbe41088c61f2ad328766e851ffe6169aa80935a/src/bloom.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbe41088c61f2ad328766e851ffe6169aa80935a/src/bloom.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.h?ref=bbe41088c61f2ad328766e851ffe6169aa80935a",
        "patch": "@@ -114,7 +114,9 @@ class CRollingBloomFilter\n     CRollingBloomFilter(unsigned int nElements, double nFPRate, unsigned int nTweak);\n \n     void insert(const std::vector<unsigned char>& vKey);\n+    void insert(const uint256& hash);\n     bool contains(const std::vector<unsigned char>& vKey) const;\n+    bool contains(const uint256& hash) const;\n \n     void clear();\n "
      }
    ]
  },
  {
    "sha": "a3d65fedaa18686f0cc007d0a13dba6545250300",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphM2Q2NWZlZGFhMTg2ODZmMGNjMDA3ZDBhMTNkYmE2NTQ1MjUwMzAw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-07-27T16:38:45Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-07-27T16:38:45Z"
      },
      "message": "Reuse vector hashing code for uint256",
      "tree": {
        "sha": "35bcf6a7cd121b5908f28a409c403fedff065fdb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/35bcf6a7cd121b5908f28a409c403fedff065fdb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a3d65fedaa18686f0cc007d0a13dba6545250300",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3d65fedaa18686f0cc007d0a13dba6545250300",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a3d65fedaa18686f0cc007d0a13dba6545250300",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3d65fedaa18686f0cc007d0a13dba6545250300/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bbe41088c61f2ad328766e851ffe6169aa80935a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbe41088c61f2ad328766e851ffe6169aa80935a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bbe41088c61f2ad328766e851ffe6169aa80935a"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 4,
      "deletions": 14
    },
    "files": [
      {
        "sha": "3f50b1da917e0864ba1d21e16ad22f814e2f7759",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 14,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3d65fedaa18686f0cc007d0a13dba6545250300/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3d65fedaa18686f0cc007d0a13dba6545250300/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=a3d65fedaa18686f0cc007d0a13dba6545250300",
        "patch": "@@ -236,16 +236,8 @@ void CRollingBloomFilter::insert(const std::vector<unsigned char>& vKey)\n \n void CRollingBloomFilter::insert(const uint256& hash)\n {\n-    if (nInsertions == 0) {\n-        b1.clear();\n-    } else if (nInsertions == nBloomSize / 2) {\n-        b2.clear();\n-    }\n-    b1.insert(hash);\n-    b2.insert(hash);\n-    if (++nInsertions == nBloomSize) {\n-        nInsertions = 0;\n-    }\n+    vector<unsigned char> data(hash.begin(), hash.end());\n+    insert(data);\n }\n \n bool CRollingBloomFilter::contains(const std::vector<unsigned char>& vKey) const\n@@ -258,10 +250,8 @@ bool CRollingBloomFilter::contains(const std::vector<unsigned char>& vKey) const\n \n bool CRollingBloomFilter::contains(const uint256& hash) const\n {\n-    if (nInsertions < nBloomSize / 2) {\n-        return b2.contains(hash);\n-    }\n-    return b1.contains(hash);\n+    vector<unsigned char> data(hash.begin(), hash.end());\n+    return contains(data);\n }\n \n void CRollingBloomFilter::clear()"
      }
    ]
  },
  {
    "sha": "d2d7ee0e863b286e1c9f9c54659d494fb0a7712d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMmQ3ZWUwZTg2M2IyODZlMWM5ZjljNTQ2NTlkNDk0ZmIwYTc3MTJk",
    "commit": {
      "author": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-07-19T19:43:34Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-07-27T16:38:49Z"
      },
      "message": "Make CRollingBloomFilter set nTweak for you\n\nWhile CBloomFilter is usually used with an explicitly set nTweak,\nCRollingBloomFilter is only used internally. Requiring every caller to\nset nTweak is error-prone and redundant; better to have the class handle\nthat for you with a high-quality randomness source.\n\nAdditionally when clearing the filter it makes sense to change nTweak as\nwell to recover from a bad setting, e.g. due to insufficient randomness\nat initialization, so the clear() method is replaced by a reset() method\nthat sets a new, random, nTweak value.",
      "tree": {
        "sha": "b955db39fbb776cb59777a1ac171b4cd842496ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b955db39fbb776cb59777a1ac171b4cd842496ec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d2d7ee0e863b286e1c9f9c54659d494fb0a7712d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2d7ee0e863b286e1c9f9c54659d494fb0a7712d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d2d7ee0e863b286e1c9f9c54659d494fb0a7712d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2d7ee0e863b286e1c9f9c54659d494fb0a7712d/comments",
    "author": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a3d65fedaa18686f0cc007d0a13dba6545250300",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3d65fedaa18686f0cc007d0a13dba6545250300",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a3d65fedaa18686f0cc007d0a13dba6545250300"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 29,
      "deletions": 12
    },
    "files": [
      {
        "sha": "89959d73267970b7609d499b45f6880cd5a14eed",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 4,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2d7ee0e863b286e1c9f9c54659d494fb0a7712d/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2d7ee0e863b286e1c9f9c54659d494fb0a7712d/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=d2d7ee0e863b286e1c9f9c54659d494fb0a7712d",
        "patch": "@@ -8,6 +8,7 @@\n #include \"hash.h\"\n #include \"script/script.h\"\n #include \"script/standard.h\"\n+#include \"random.h\"\n #include \"streams.h\"\n \n #include <math.h>\n@@ -121,6 +122,12 @@ void CBloomFilter::clear()\n     isEmpty = true;\n }\n \n+void CBloomFilter::reset(unsigned int nNewTweak)\n+{\n+    clear();\n+    nTweak = nNewTweak;\n+}\n+\n bool CBloomFilter::IsWithinSizeConstraints() const\n {\n     return vData.size() <= MAX_BLOOM_FILTER_SIZE && nHashFuncs <= MAX_HASH_FUNCS;\n@@ -217,7 +224,8 @@ CRollingBloomFilter::CRollingBloomFilter(unsigned int nElements, double fpRate,\n     // inserted, so at least one always contains the last nElements\n     // inserted.\n     nBloomSize = nElements * 2;\n-    nInsertions = 0;\n+\n+    reset(nTweak);\n }\n \n void CRollingBloomFilter::insert(const std::vector<unsigned char>& vKey)\n@@ -254,9 +262,12 @@ bool CRollingBloomFilter::contains(const uint256& hash) const\n     return contains(data);\n }\n \n-void CRollingBloomFilter::clear()\n+void CRollingBloomFilter::reset(unsigned int nNewTweak)\n {\n-    b1.clear();\n-    b2.clear();\n+    if (!nNewTweak)\n+        nNewTweak = GetRand(std::numeric_limits<unsigned int>::max());\n+\n+    b1.reset(nNewTweak);\n+    b2.reset(nNewTweak);\n     nInsertions = 0;\n }"
      },
      {
        "sha": "12bf6d99a88c685afc4062d56e3fc24ddd66a79c",
        "filename": "src/bloom.h",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2d7ee0e863b286e1c9f9c54659d494fb0a7712d/src/bloom.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2d7ee0e863b286e1c9f9c54659d494fb0a7712d/src/bloom.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.h?ref=d2d7ee0e863b286e1c9f9c54659d494fb0a7712d",
        "patch": "@@ -89,6 +89,7 @@ class CBloomFilter\n     bool contains(const uint256& hash) const;\n \n     void clear();\n+    void reset(unsigned int nNewTweak);\n \n     //! True if the size is <= MAX_BLOOM_FILTER_SIZE and the number of hash functions is <= MAX_HASH_FUNCS\n     //! (catch a filter which was just deserialized which was too big)\n@@ -103,22 +104,27 @@ class CBloomFilter\n \n /**\n  * RollingBloomFilter is a probabilistic \"keep track of most recently inserted\" set.\n- * Construct it with the number of items to keep track of, and a false-positive rate.\n+ * Construct it with the number of items to keep track of, and a false-positive\n+ * rate. Unlike CBloomFilter, by default nTweak is set to a cryptographically\n+ * secure random value for you. Similarly rather than clear() the method\n+ * reset() is provided, which also changes nTweak to decrease the impact of\n+ * false-positives.\n  *\n  * contains(item) will always return true if item was one of the last N things\n  * insert()'ed ... but may also return true for items that were not inserted.\n  */\n class CRollingBloomFilter\n {\n public:\n-    CRollingBloomFilter(unsigned int nElements, double nFPRate, unsigned int nTweak);\n+    CRollingBloomFilter(unsigned int nElements, double nFPRate,\n+                        unsigned int nTweak = 0);\n \n     void insert(const std::vector<unsigned char>& vKey);\n     void insert(const uint256& hash);\n     bool contains(const std::vector<unsigned char>& vKey) const;\n     bool contains(const uint256& hash) const;\n \n-    void clear();\n+    void reset(unsigned int nNewTweak = 0);\n \n private:\n     unsigned int nBloomSize;"
      },
      {
        "sha": "01b62bdf608d8346c01731495084a645e9c73d96",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2d7ee0e863b286e1c9f9c54659d494fb0a7712d/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2d7ee0e863b286e1c9f9c54659d494fb0a7712d/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d2d7ee0e863b286e1c9f9c54659d494fb0a7712d",
        "patch": "@@ -4812,7 +4812,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n             {\n                 // Periodically clear addrKnown to allow refresh broadcasts\n                 if (nLastRebroadcast)\n-                    pnode->addrKnown.clear();\n+                    pnode->addrKnown.reset();\n \n                 // Rebroadcast our address\n                 AdvertizeLocal(pnode);"
      },
      {
        "sha": "176fd7195ba62603a54b3bfa8152a743e4fe7c76",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2d7ee0e863b286e1c9f9c54659d494fb0a7712d/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2d7ee0e863b286e1c9f9c54659d494fb0a7712d/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=d2d7ee0e863b286e1c9f9c54659d494fb0a7712d",
        "patch": "@@ -2060,7 +2060,7 @@ unsigned int SendBufferSize() { return 1000*GetArg(\"-maxsendbuffer\", 1*1000); }\n \n CNode::CNode(SOCKET hSocketIn, const CAddress& addrIn, const std::string& addrNameIn, bool fInboundIn) :\n     ssSend(SER_NETWORK, INIT_PROTO_VERSION),\n-    addrKnown(5000, 0.001, insecure_rand()),\n+    addrKnown(5000, 0.001),\n     setInventoryKnown(SendBufferSize() / 1000)\n {\n     nServices = 0;"
      },
      {
        "sha": "d927be6b8197385ec4cc040073154ef30a1fbdde",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2d7ee0e863b286e1c9f9c54659d494fb0a7712d/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2d7ee0e863b286e1c9f9c54659d494fb0a7712d/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=d2d7ee0e863b286e1c9f9c54659d494fb0a7712d",
        "patch": "@@ -469,7 +469,7 @@ static std::vector<unsigned char> RandomData()\n BOOST_AUTO_TEST_CASE(rolling_bloom)\n {\n     // last-100-entry, 1% false positive:\n-    CRollingBloomFilter rb1(100, 0.01, 0);\n+    CRollingBloomFilter rb1(100, 0.01, 1);\n \n     // Overfill:\n     static const int DATASIZE=399;\n@@ -500,7 +500,7 @@ BOOST_AUTO_TEST_CASE(rolling_bloom)\n     BOOST_CHECK(nHits < 175);\n \n     BOOST_CHECK(rb1.contains(data[DATASIZE-1]));\n-    rb1.clear();\n+    rb1.reset(1);\n     BOOST_CHECK(!rb1.contains(data[DATASIZE-1]));\n \n     // Now roll through data, make sure last 100 entries\n@@ -527,7 +527,7 @@ BOOST_AUTO_TEST_CASE(rolling_bloom)\n     BOOST_CHECK(nHits < 100);\n \n     // last-1000-entry, 0.01% false positive:\n-    CRollingBloomFilter rb2(1000, 0.001, 0);\n+    CRollingBloomFilter rb2(1000, 0.001, 1);\n     for (int i = 0; i < DATASIZE; i++) {\n         rb2.insert(data[i]);\n     }"
      }
    ]
  },
  {
    "sha": "d741371d7d27e228aa64c618c50b23fb5449c3e1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNzQxMzcxZDdkMjdlMjI4YWE2NGM2MThjNTBiMjNmYjU0NDljM2Ux",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-07-27T16:58:00Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-07-27T17:09:39Z"
      },
      "message": "Only use randomly created nonces in CRollingBloomFilter.",
      "tree": {
        "sha": "0b292baaaabe5f9148db4813dad82c893dd04434",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b292baaaabe5f9148db4813dad82c893dd04434"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d741371d7d27e228aa64c618c50b23fb5449c3e1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d741371d7d27e228aa64c618c50b23fb5449c3e1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d741371d7d27e228aa64c618c50b23fb5449c3e1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d741371d7d27e228aa64c618c50b23fb5449c3e1/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d2d7ee0e863b286e1c9f9c54659d494fb0a7712d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2d7ee0e863b286e1c9f9c54659d494fb0a7712d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d2d7ee0e863b286e1c9f9c54659d494fb0a7712d"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 14,
      "deletions": 13
    },
    "files": [
      {
        "sha": "de87206592c35b928834ee2f4d637d3e150d9a25",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d741371d7d27e228aa64c618c50b23fb5449c3e1/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d741371d7d27e228aa64c618c50b23fb5449c3e1/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=d741371d7d27e228aa64c618c50b23fb5449c3e1",
        "patch": "@@ -216,16 +216,17 @@ void CBloomFilter::UpdateEmptyFull()\n     isEmpty = empty;\n }\n \n-CRollingBloomFilter::CRollingBloomFilter(unsigned int nElements, double fpRate, unsigned int nTweak) :\n-    b1(nElements * 2, fpRate, nTweak), b2(nElements * 2, fpRate, nTweak)\n+CRollingBloomFilter::CRollingBloomFilter(unsigned int nElements, double fpRate) :\n+    b1(nElements * 2, fpRate, 0), b2(nElements * 2, fpRate, 0)\n {\n     // Implemented using two bloom filters of 2 * nElements each.\n     // We fill them up, and clear them, staggered, every nElements\n     // inserted, so at least one always contains the last nElements\n     // inserted.\n+    nInsertions = 0;\n     nBloomSize = nElements * 2;\n \n-    reset(nTweak);\n+    reset();\n }\n \n void CRollingBloomFilter::insert(const std::vector<unsigned char>& vKey)\n@@ -262,11 +263,9 @@ bool CRollingBloomFilter::contains(const uint256& hash) const\n     return contains(data);\n }\n \n-void CRollingBloomFilter::reset(unsigned int nNewTweak)\n+void CRollingBloomFilter::reset()\n {\n-    if (!nNewTweak)\n-        nNewTweak = GetRand(std::numeric_limits<unsigned int>::max());\n-\n+    unsigned int nNewTweak = GetRand(std::numeric_limits<unsigned int>::max());\n     b1.reset(nNewTweak);\n     b2.reset(nNewTweak);\n     nInsertions = 0;"
      },
      {
        "sha": "a4dba8cb4f7187251d43dfab96e0435fbf98c481",
        "filename": "src/bloom.h",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d741371d7d27e228aa64c618c50b23fb5449c3e1/src/bloom.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d741371d7d27e228aa64c618c50b23fb5449c3e1/src/bloom.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.h?ref=d741371d7d27e228aa64c618c50b23fb5449c3e1",
        "patch": "@@ -116,15 +116,17 @@ class CBloomFilter\n class CRollingBloomFilter\n {\n public:\n-    CRollingBloomFilter(unsigned int nElements, double nFPRate,\n-                        unsigned int nTweak = 0);\n+    // A random bloom filter calls GetRand() at creation time.\n+    // Don't create global CRollingBloomFilter objects, as they may be\n+    // constructed before the randomizer is properly initialized.\n+    CRollingBloomFilter(unsigned int nElements, double nFPRate);\n \n     void insert(const std::vector<unsigned char>& vKey);\n     void insert(const uint256& hash);\n     bool contains(const std::vector<unsigned char>& vKey) const;\n     bool contains(const uint256& hash) const;\n \n-    void reset(unsigned int nNewTweak = 0);\n+    void reset();\n \n private:\n     unsigned int nBloomSize;"
      },
      {
        "sha": "6b30d6aa8ae7a0ca65303b7cc92333f0aa75f494",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d741371d7d27e228aa64c618c50b23fb5449c3e1/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d741371d7d27e228aa64c618c50b23fb5449c3e1/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=d741371d7d27e228aa64c618c50b23fb5449c3e1",
        "patch": "@@ -469,7 +469,7 @@ static std::vector<unsigned char> RandomData()\n BOOST_AUTO_TEST_CASE(rolling_bloom)\n {\n     // last-100-entry, 1% false positive:\n-    CRollingBloomFilter rb1(100, 0.01, 1);\n+    CRollingBloomFilter rb1(100, 0.01);\n \n     // Overfill:\n     static const int DATASIZE=399;\n@@ -500,7 +500,7 @@ BOOST_AUTO_TEST_CASE(rolling_bloom)\n     BOOST_CHECK(nHits < 175);\n \n     BOOST_CHECK(rb1.contains(data[DATASIZE-1]));\n-    rb1.reset(1);\n+    rb1.reset();\n     BOOST_CHECK(!rb1.contains(data[DATASIZE-1]));\n \n     // Now roll through data, make sure last 100 entries\n@@ -527,7 +527,7 @@ BOOST_AUTO_TEST_CASE(rolling_bloom)\n     BOOST_CHECK(nHits < 100);\n \n     // last-1000-entry, 0.01% false positive:\n-    CRollingBloomFilter rb2(1000, 0.001, 1);\n+    CRollingBloomFilter rb2(1000, 0.001);\n     for (int i = 0; i < DATASIZE; i++) {\n         rb2.insert(data[i]);\n     }"
      }
    ]
  },
  {
    "sha": "5e56ef5152cd98133c3b8575321dfe7dd253bd7d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZTU2ZWY1MTUyY2Q5ODEzM2MzYjg1NzUzMjFkZmU3ZGQyNTNiZDdk",
    "commit": {
      "author": {
        "name": "Pavel Vasin",
        "email": "pavel@vasin.nl",
        "date": "2015-07-28T06:05:14Z"
      },
      "committer": {
        "name": "Pavel Vasin",
        "email": "pavel@vasin.nl",
        "date": "2015-07-28T07:59:16Z"
      },
      "message": "qt: use CHashWriter also in SignVerifyMessageDialog\n\nThis eliminates unnecessary copying of data being hashed.",
      "tree": {
        "sha": "993e2e5afe07efbf69c8cc5182d0efc081d3c63e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/993e2e5afe07efbf69c8cc5182d0efc081d3c63e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5e56ef5152cd98133c3b8575321dfe7dd253bd7d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e56ef5152cd98133c3b8575321dfe7dd253bd7d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5e56ef5152cd98133c3b8575321dfe7dd253bd7d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e56ef5152cd98133c3b8575321dfe7dd253bd7d/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "08e9c57ba2aa808c608daa0b4503f1940a356f8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08e9c57ba2aa808c608daa0b4503f1940a356f8c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/08e9c57ba2aa808c608daa0b4503f1940a356f8c"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "d3984923a8ff8287fe29c8c5d580f32713be967d",
        "filename": "src/qt/signverifymessagedialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e56ef5152cd98133c3b8575321dfe7dd253bd7d/src/qt/signverifymessagedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e56ef5152cd98133c3b8575321dfe7dd253bd7d/src/qt/signverifymessagedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.cpp?ref=5e56ef5152cd98133c3b8575321dfe7dd253bd7d",
        "patch": "@@ -148,12 +148,12 @@ void SignVerifyMessageDialog::on_signMessageButton_SM_clicked()\n         return;\n     }\n \n-    CDataStream ss(SER_GETHASH, 0);\n+    CHashWriter ss(SER_GETHASH, 0);\n     ss << strMessageMagic;\n     ss << ui->messageIn_SM->document()->toPlainText().toStdString();\n \n     std::vector<unsigned char> vchSig;\n-    if (!key.SignCompact(Hash(ss.begin(), ss.end()), vchSig))\n+    if (!key.SignCompact(ss.GetHash(), vchSig))\n     {\n         ui->statusLabel_SM->setStyleSheet(\"QLabel { color: red; }\");\n         ui->statusLabel_SM->setText(QString(\"<nobr>\") + tr(\"Message signing failed.\") + QString(\"</nobr>\"));\n@@ -223,12 +223,12 @@ void SignVerifyMessageDialog::on_verifyMessageButton_VM_clicked()\n         return;\n     }\n \n-    CDataStream ss(SER_GETHASH, 0);\n+    CHashWriter ss(SER_GETHASH, 0);\n     ss << strMessageMagic;\n     ss << ui->messageIn_VM->document()->toPlainText().toStdString();\n \n     CPubKey pubkey;\n-    if (!pubkey.RecoverCompact(Hash(ss.begin(), ss.end()), vchSig))\n+    if (!pubkey.RecoverCompact(ss.GetHash(), vchSig))\n     {\n         ui->signatureIn_VM->setValid(false);\n         ui->statusLabel_VM->setStyleSheet(\"QLabel { color: red; }\");"
      }
    ]
  },
  {
    "sha": "1369d699b6221818dc9ca72eb6c0cea30eeee914",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMzY5ZDY5OWI2MjIxODE4ZGM5Y2E3MmViNmMwY2VhMzBlZWVlOTE0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-28T09:05:20Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-28T09:05:32Z"
      },
      "message": "Merge pull request #6484\n\n5e56ef5 qt: use CHashWriter also in SignVerifyMessageDialog (Pavel Vasin)",
      "tree": {
        "sha": "993e2e5afe07efbf69c8cc5182d0efc081d3c63e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/993e2e5afe07efbf69c8cc5182d0efc081d3c63e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1369d699b6221818dc9ca72eb6c0cea30eeee914",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVt0XcAAoJEHSBCwEjRsmmvGIIALG/Cbqv0AOh9Jz1HzSkpOyI\nii4hu6QY3LVrSfYAkyvyhkC6VBLnpFnKWCJ/+Gc/+HVVwqCw4aTd5dokGv9jHOgV\nauLsBv/D6I3Aswaun2qAI4KG+t3TcZE+gEiazponEHBT75d4M5U8NP5xnjtJbD/L\nFF0QpR4AnQksiEb2E0fokCF95S3watCBo9ZJEi72r34S0q3i9yrSkmL5oFY/y1pS\nClR7p7D8IYwb546QJdWaPyDXOv5i/mIlZFt41E8yiZgl8RA2Y27LodQAabhpf1ja\nfnnv9SvF6epiDa+e3LcFf9OhTpy5fnjYJvFh6mHaUS0LnLqu/12scXwXMjn5a8s=\n=gg5D\n-----END PGP SIGNATURE-----",
        "payload": "tree 993e2e5afe07efbf69c8cc5182d0efc081d3c63e\nparent 08e9c57ba2aa808c608daa0b4503f1940a356f8c\nparent 5e56ef5152cd98133c3b8575321dfe7dd253bd7d\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1438074320 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1438074332 +0200\n\nMerge pull request #6484\n\n5e56ef5 qt: use CHashWriter also in SignVerifyMessageDialog (Pavel Vasin)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1369d699b6221818dc9ca72eb6c0cea30eeee914",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1369d699b6221818dc9ca72eb6c0cea30eeee914",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1369d699b6221818dc9ca72eb6c0cea30eeee914/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "08e9c57ba2aa808c608daa0b4503f1940a356f8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08e9c57ba2aa808c608daa0b4503f1940a356f8c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/08e9c57ba2aa808c608daa0b4503f1940a356f8c"
      },
      {
        "sha": "5e56ef5152cd98133c3b8575321dfe7dd253bd7d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e56ef5152cd98133c3b8575321dfe7dd253bd7d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5e56ef5152cd98133c3b8575321dfe7dd253bd7d"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "d3984923a8ff8287fe29c8c5d580f32713be967d",
        "filename": "src/qt/signverifymessagedialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369d699b6221818dc9ca72eb6c0cea30eeee914/src/qt/signverifymessagedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369d699b6221818dc9ca72eb6c0cea30eeee914/src/qt/signverifymessagedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.cpp?ref=1369d699b6221818dc9ca72eb6c0cea30eeee914",
        "patch": "@@ -148,12 +148,12 @@ void SignVerifyMessageDialog::on_signMessageButton_SM_clicked()\n         return;\n     }\n \n-    CDataStream ss(SER_GETHASH, 0);\n+    CHashWriter ss(SER_GETHASH, 0);\n     ss << strMessageMagic;\n     ss << ui->messageIn_SM->document()->toPlainText().toStdString();\n \n     std::vector<unsigned char> vchSig;\n-    if (!key.SignCompact(Hash(ss.begin(), ss.end()), vchSig))\n+    if (!key.SignCompact(ss.GetHash(), vchSig))\n     {\n         ui->statusLabel_SM->setStyleSheet(\"QLabel { color: red; }\");\n         ui->statusLabel_SM->setText(QString(\"<nobr>\") + tr(\"Message signing failed.\") + QString(\"</nobr>\"));\n@@ -223,12 +223,12 @@ void SignVerifyMessageDialog::on_verifyMessageButton_VM_clicked()\n         return;\n     }\n \n-    CDataStream ss(SER_GETHASH, 0);\n+    CHashWriter ss(SER_GETHASH, 0);\n     ss << strMessageMagic;\n     ss << ui->messageIn_VM->document()->toPlainText().toStdString();\n \n     CPubKey pubkey;\n-    if (!pubkey.RecoverCompact(Hash(ss.begin(), ss.end()), vchSig))\n+    if (!pubkey.RecoverCompact(ss.GetHash(), vchSig))\n     {\n         ui->signatureIn_VM->setValid(false);\n         ui->statusLabel_VM->setStyleSheet(\"QLabel { color: red; }\");"
      }
    ]
  },
  {
    "sha": "17ac0f402559f57733fb5da6dafb72cf0f50795f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxN2FjMGY0MDI1NTlmNTc3MzNmYjVkYTZkYWZiNzJjZjBmNTA3OTVm",
    "commit": {
      "author": {
        "name": "Casey Rodarmor",
        "email": "casey@rodarmor.com",
        "date": "2015-07-28T18:01:00Z"
      },
      "committer": {
        "name": "Casey Rodarmor",
        "email": "casey@rodarmor.com",
        "date": "2015-07-28T18:01:00Z"
      },
      "message": "Avoid leaking file descriptors in RegisterLoad\n\nThis is pretty trivial, but if there's an error here we'll leak a file\ndescriptor. Changed it to always close the file.",
      "tree": {
        "sha": "651362fdc0600ed26363287237be17d42acadeb2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/651362fdc0600ed26363287237be17d42acadeb2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/17ac0f402559f57733fb5da6dafb72cf0f50795f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17ac0f402559f57733fb5da6dafb72cf0f50795f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/17ac0f402559f57733fb5da6dafb72cf0f50795f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17ac0f402559f57733fb5da6dafb72cf0f50795f/comments",
    "author": {
      "login": "casey",
      "id": 1945,
      "node_id": "MDQ6VXNlcjE5NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/casey",
      "html_url": "https://github.com/casey",
      "followers_url": "https://api.github.com/users/casey/followers",
      "following_url": "https://api.github.com/users/casey/following{/other_user}",
      "gists_url": "https://api.github.com/users/casey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/casey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/casey/subscriptions",
      "organizations_url": "https://api.github.com/users/casey/orgs",
      "repos_url": "https://api.github.com/users/casey/repos",
      "events_url": "https://api.github.com/users/casey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/casey/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "casey",
      "id": 1945,
      "node_id": "MDQ6VXNlcjE5NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/casey",
      "html_url": "https://github.com/casey",
      "followers_url": "https://api.github.com/users/casey/followers",
      "following_url": "https://api.github.com/users/casey/following{/other_user}",
      "gists_url": "https://api.github.com/users/casey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/casey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/casey/subscriptions",
      "organizations_url": "https://api.github.com/users/casey/orgs",
      "repos_url": "https://api.github.com/users/casey/repos",
      "events_url": "https://api.github.com/users/casey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/casey/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1369d699b6221818dc9ca72eb6c0cea30eeee914",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1369d699b6221818dc9ca72eb6c0cea30eeee914",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1369d699b6221818dc9ca72eb6c0cea30eeee914"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "e389d51a7328f63cbd8295785798bd79ce613ac2",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17ac0f402559f57733fb5da6dafb72cf0f50795f/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17ac0f402559f57733fb5da6dafb72cf0f50795f/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=17ac0f402559f57733fb5da6dafb72cf0f50795f",
        "patch": "@@ -143,13 +143,14 @@ static void RegisterLoad(const string& strInput)\n         valStr.insert(valStr.size(), buf, bread);\n     }\n \n-    if (ferror(f)) {\n+    int error = ferror(f);\n+    fclose(f);\n+\n+    if (error) {\n         string strErr = \"Error reading file \" + filename;\n         throw runtime_error(strErr);\n     }\n \n-    fclose(f);\n-\n     // evaluate as JSON buffer register\n     RegisterSetJson(key, valStr);\n }"
      }
    ]
  },
  {
    "sha": "eddaba7b5692288087a926da5733e86b47274e4e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZGRhYmE3YjU2OTIyODgwODdhOTI2ZGE1NzMzZTg2YjQ3Mjc0ZTRl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-07-28T18:14:43Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-07-28T18:15:00Z"
      },
      "message": "Revert \"Cache transaction validation successes\"\n\nThis reverts commit 17b11428c135203342aff38cabc8047e673f38ac.",
      "tree": {
        "sha": "0f43a649f8cf82ff4415f9d9a677452832cec3c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0f43a649f8cf82ff4415f9d9a677452832cec3c4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eddaba7b5692288087a926da5733e86b47274e4e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQGcBAABAgAGBQJVt8amAAoJEFeJbS/48LZX0MkL/inzNIR2xD0LziSWJe8MIZ02\nBUGVPrMINt4udBbp4qxIoQtLS0JT6AwLQVEmm0bNij6zGOTtMdMZ2RuSP/Jt1nUg\nIYJ+D0a1ay4tRydbZ4gvQub+yu0j31bBZOt02lcTgCyc65Ih2AD0K+XFK+2OlReH\nx2zOMwmDriXornhmg2QVqezNUS6GUJtbjrSu5SJULzxRM9wxAu2+Up0v9iWd+6a1\n5xIlSrzwsTO4tnJMhj27lfz7Yqe8oNbFVPTfXIbcsMKN0nFsCgjfeh294EnsnJDW\nPBAwvlU4rYjhni2EAI39RTWdwME1rYePfyEl1CzBDOLsaBg3W8QIrBGDy9YlGWa0\nwnP1O4OEBUtM9aAZpE8bGdxs6OWNnYj/LJD3N7vDsTIpwz+99yf+xDgSzSrZ7hPj\ngy6oUlestyfiXZaC7w7tmvkGQOrFLaSbW8M+zuinluWMXT6D3rkcXq/Y5PaySBid\neLrUQJSsrcIk30/+ZGUnKUnBPEkIhvKSS5wFV0vOwA==\n=OiQ4\n-----END PGP SIGNATURE-----",
        "payload": "tree 0f43a649f8cf82ff4415f9d9a677452832cec3c4\nparent 1369d699b6221818dc9ca72eb6c0cea30eeee914\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1438107283 +0200\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1438107300 +0200\n\nRevert \"Cache transaction validation successes\"\n\nThis reverts commit 17b11428c135203342aff38cabc8047e673f38ac.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eddaba7b5692288087a926da5733e86b47274e4e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eddaba7b5692288087a926da5733e86b47274e4e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eddaba7b5692288087a926da5733e86b47274e4e/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1369d699b6221818dc9ca72eb6c0cea30eeee914",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1369d699b6221818dc9ca72eb6c0cea30eeee914",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1369d699b6221818dc9ca72eb6c0cea30eeee914"
      }
    ],
    "stats": {
      "total": 150,
      "additions": 0,
      "deletions": 150
    },
    "files": [
      {
        "sha": "fefeabeb64b87131567c955f49432a3430d6ed0b",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 26,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eddaba7b5692288087a926da5733e86b47274e4e/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eddaba7b5692288087a926da5733e86b47274e4e/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=eddaba7b5692288087a926da5733e86b47274e4e",
        "patch": "@@ -1277,9 +1277,6 @@ int GetSpendHeight(const CCoinsViewCache& inputs)\n     return pindexPrev->nHeight + 1;\n }\n \n-static mrumap<uint256, unsigned int> cacheCheck(2 * MAX_BLOCK_SIZE / CTransaction().GetSerializeSize(SER_NETWORK, PROTOCOL_VERSION));\n-static boost::mutex cs_cacheCheck;\n-\n namespace Consensus {\n bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight)\n {\n@@ -1334,17 +1331,6 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n {\n     if (!tx.IsCoinBase())\n     {\n-        if (fScriptChecks) {\n-            boost::unique_lock<boost::mutex> lock(cs_cacheCheck);\n-            mrumap<uint256, unsigned int>::const_iterator iter = cacheCheck.find(tx.GetHash());\n-            if (iter != cacheCheck.end()) {\n-                // The following test relies on the fact that all script validation flags are softforks (i.e. an extra bit set cannot cause a false result to become true).\n-                if ((iter->second & flags) == flags) {\n-                    return true;\n-                }\n-            }\n-        }\n-\n         if (!Consensus::CheckTxInputs(tx, state, inputs, GetSpendHeight(inputs)))\n             return false;\n \n@@ -1395,11 +1381,6 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n         }\n     }\n \n-    if (cacheStore && fScriptChecks && pvChecks == NULL) {\n-        boost::unique_lock<boost::mutex> lock(cs_cacheCheck);\n-        cacheCheck.insert(tx.GetHash(), flags);\n-    }\n-\n     return true;\n }\n \n@@ -2120,13 +2101,6 @@ bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew, CBlock *\n     BOOST_FOREACH(const CTransaction &tx, pblock->vtx) {\n         SyncWithWallets(tx, pblock);\n     }\n-    // Erase block's transactions from the validation cache\n-    {\n-        boost::unique_lock<boost::mutex> lock(cs_cacheCheck);\n-        BOOST_FOREACH(const CTransaction &tx, pblock->vtx) {\n-            cacheCheck.erase(tx.GetHash());\n-        }\n-    }\n \n     int64_t nTime6 = GetTimeMicros(); nTimePostConnect += nTime6 - nTime5; nTimeTotal += nTime6 - nTime1;\n     LogPrint(\"bench\", \"  - Connect postprocess: %.2fms [%.2fs]\\n\", (nTime6 - nTime5) * 0.001, nTimePostConnect * 0.000001);"
      },
      {
        "sha": "398aa173bf1e3c788e35a388116becc16d7ba201",
        "filename": "src/mruset.h",
        "status": "modified",
        "additions": 0,
        "deletions": 60,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eddaba7b5692288087a926da5733e86b47274e4e/src/mruset.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eddaba7b5692288087a926da5733e86b47274e4e/src/mruset.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/mruset.h?ref=eddaba7b5692288087a926da5733e86b47274e4e",
        "patch": "@@ -9,10 +9,6 @@\n #include <vector>\n #include <utility>\n \n-#include <boost/multi_index_container.hpp>\n-#include <boost/multi_index/ordered_index.hpp>\n-#include <boost/multi_index/sequenced_index.hpp>\n-\n /** STL-like set container that only keeps the most recent N elements. */\n template <typename T>\n class mruset\n@@ -66,60 +62,4 @@ class mruset\n     size_type max_size() const { return nMaxSize; }\n };\n \n-/** STL-like map container that only keeps the most recent N elements. */\n-template <typename K, typename V>\n-class mrumap\n-{\n-private:\n-    struct key_extractor {\n-        typedef K result_type;\n-        const result_type& operator()(const std::pair<K, V>& e) const { return e.first; }\n-        result_type& operator()(std::pair<K, V>* e) const { return e->first; }\n-    };\n-\n-    typedef boost::multi_index_container<\n-        std::pair<K, V>,\n-        boost::multi_index::indexed_by<\n-            boost::multi_index::sequenced<>,\n-            boost::multi_index::ordered_unique<key_extractor>\n-        >\n-    > map_type;\n-\n-public:\n-    typedef K key_type;\n-    typedef std::pair<K, V> value_type;\n-    typedef typename map_type::iterator iterator;\n-    typedef typename map_type::const_iterator const_iterator;\n-    typedef typename map_type::size_type size_type;\n-\n-protected:\n-    map_type m_;\n-    size_type max_size_;\n-\n-public:\n-    mrumap(size_type max_size_in = 1) { clear(max_size_in); }\n-    iterator begin() { return m_.begin(); }\n-    iterator end() { return m_.end(); }\n-    const_iterator begin() const { return m_.begin(); }\n-    const_iterator end() const { return m_.end(); }\n-    size_type size() const { return m_.size(); }\n-    bool empty() const { return m_.empty(); }\n-    iterator find(const key_type& key) { return m_.template project<0>(boost::get<1>(m_).find(key)); }\n-    const_iterator find(const key_type& key) const { return m_.template project<0>(boost::get<1>(m_).find(key)); }\n-    size_type count(const key_type& key) const { return boost::get<1>(m_).count(key); }\n-    void clear(size_type max_size_in) { m_.clear(); max_size_ = max_size_in; }\n-    std::pair<iterator, bool> insert(const K& key, const V& value) \n-    {\n-        std::pair<K, V> elem(key, value);\n-        std::pair<iterator, bool> p = m_.push_front(elem);\n-        if (p.second && m_.size() > max_size_) {\n-            m_.pop_back();\n-        }\n-        return p;\n-    }\n-    void erase(iterator it) { m_.erase(it); }\n-    void erase(const key_type& k) { boost::get<1>(m_).erase(k); }\n-    size_type max_size() const { return max_size_; }\n-};\n-\n #endif // BITCOIN_MRUSET_H"
      },
      {
        "sha": "2b68f8899eea83a3eee676deaf7a62e549aeb290",
        "filename": "src/test/mruset_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 64,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eddaba7b5692288087a926da5733e86b47274e4e/src/test/mruset_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eddaba7b5692288087a926da5733e86b47274e4e/src/test/mruset_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mruset_tests.cpp?ref=eddaba7b5692288087a926da5733e86b47274e4e",
        "patch": "@@ -78,68 +78,4 @@ BOOST_AUTO_TEST_CASE(mruset_test)\n     }\n }\n \n-BOOST_AUTO_TEST_CASE(mrumap_test)\n-{\n-    // The mrumap being tested.\n-    mrumap<int, char> mru(5000);\n-\n-    // Run the test 10 times.\n-    for (int test = 0; test < 10; test++) {\n-        // Reset mru.\n-        mru.clear(5000);\n-\n-        // A deque + set to simulate the mruset.\n-        std::deque<int> rep;\n-        std::map<int, char> all;\n-\n-        // Insert 10000 random integers below 15000.\n-        for (int j=0; j<10000; j++) {\n-            int add = GetRandInt(15000);\n-            char val = (char)GetRandInt(256);\n-            mru.insert(add, val);\n-\n-            // Add the number to rep/all as well.\n-            if (all.count(add) == 0) {\n-               all.insert(std::make_pair<int, char>(add, val));\n-               rep.push_back(add);\n-               if (all.size() == 5001) {\n-                   all.erase(rep.front());\n-                   rep.pop_front();\n-               }\n-            }\n-\n-            if (GetRandInt(5) == 0) {\n-                // With 20% chance: remove an item\n-                int pos = GetRandInt(rep.size());\n-                std::deque<int>::iterator it = rep.begin();\n-                while (pos--) { it++; }\n-                int delval = *it;\n-                mru.erase(delval);\n-                all.erase(delval);\n-                rep.erase(it);\n-            }\n-\n-            // Do a full comparison between mru and the simulated mru every 1000 and every 5001 elements.\n-            if (j % 1000 == 0 || j % 5001 == 0) {\n-                // Check that all elements that should be in there, are in there.\n-                BOOST_FOREACH(int x, rep) {\n-                    BOOST_CHECK(mru.count(x));\n-                    BOOST_CHECK(mru.find(x)->second == all[x]);\n-                }\n-\n-                // Check that all elements that are in there, should be in there.\n-                for (mrumap<int, char>::iterator it = mru.begin(); it != mru.end(); it++) {\n-                    BOOST_CHECK(all.count(it->first));\n-                    BOOST_CHECK(all[it->first] == it->second);\n-                }\n-\n-                for (int t = 0; t < 10; t++) {\n-                    int r = GetRandInt(15000);\n-                    BOOST_CHECK(all.count(r) == mru.count(r));\n-                }\n-            }\n-        }\n-    }\n-}\n-\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "f0deec572b304663f5f8e93a573f414e563b353f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMGRlZWM1NzJiMzA0NjYzZjVmOGU5M2E1NzNmNDE0ZTU2M2IzNTNm",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-06-05T19:36:34Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-07-28T19:26:50Z"
      },
      "message": "chainparams: move CCheckpointData into chainparams.h\n\nThis unties CChainParams from its dependency on checkpoints. Instead, now it\nonly depends on the raw checkpoint data.",
      "tree": {
        "sha": "87d5d6076ecac2cfbac1412fec36ab600eaeb966",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/87d5d6076ecac2cfbac1412fec36ab600eaeb966"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f0deec572b304663f5f8e93a573f414e563b353f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0deec572b304663f5f8e93a573f414e563b353f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f0deec572b304663f5f8e93a573f414e563b353f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0deec572b304663f5f8e93a573f414e563b353f/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eddaba7b5692288087a926da5733e86b47274e4e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eddaba7b5692288087a926da5733e86b47274e4e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eddaba7b5692288087a926da5733e86b47274e4e"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 15,
      "deletions": 15
    },
    "files": [
      {
        "sha": "b2b4e473227b4f359c86b2f8b8e1508fde5a39e1",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0deec572b304663f5f8e93a573f414e563b353f/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0deec572b304663f5f8e93a573f414e563b353f/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=f0deec572b304663f5f8e93a573f414e563b353f",
        "patch": "@@ -117,7 +117,7 @@ class CMainParams : public CChainParams {\n         fMineBlocksOnDemand = false;\n         fTestnetToBeDeprecatedFieldRPC = false;\n \n-        checkpointData = (Checkpoints::CCheckpointData) {\n+        checkpointData = (CCheckpointData) {\n             boost::assign::map_list_of\n             ( 11111, uint256S(\"0x0000000069e244f73d78e8fd29ba2fd2ed618bd6fa2ee92559f542fdb26e7c1d\"))\n             ( 33333, uint256S(\"0x000000002dd5588a74784eaa7ab0507a18ad16a236e7b1ce69f00d7ddfb5d0a6\"))\n@@ -189,7 +189,7 @@ class CTestNetParams : public CChainParams {\n         fMineBlocksOnDemand = false;\n         fTestnetToBeDeprecatedFieldRPC = true;\n \n-        checkpointData = (Checkpoints::CCheckpointData) {\n+        checkpointData = (CCheckpointData) {\n             boost::assign::map_list_of\n             ( 546, uint256S(\"000000002a936ca763904c3c35fce2f3556c559c0214345d31b1bcebf76acb70\")),\n             1337966069,\n@@ -235,7 +235,7 @@ class CRegTestParams : public CChainParams {\n         fMineBlocksOnDemand = true;\n         fTestnetToBeDeprecatedFieldRPC = false;\n \n-        checkpointData = (Checkpoints::CCheckpointData){\n+        checkpointData = (CCheckpointData){\n             boost::assign::map_list_of\n             ( 0, uint256S(\"0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\")),\n             0,"
      },
      {
        "sha": "5db39aa09c58b6453d5b3b9a0ebead58b09ae2f0",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0deec572b304663f5f8e93a573f414e563b353f/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0deec572b304663f5f8e93a573f414e563b353f/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=f0deec572b304663f5f8e93a573f414e563b353f",
        "patch": "@@ -7,7 +7,6 @@\n #define BITCOIN_CHAINPARAMS_H\n \n #include \"chainparamsbase.h\"\n-#include \"checkpoints.h\"\n #include \"consensus/params.h\"\n #include \"primitives/block.h\"\n #include \"protocol.h\"\n@@ -24,6 +23,14 @@ struct SeedSpec6 {\n     uint16_t port;\n };\n \n+typedef std::map<int, uint256> MapCheckpoints;\n+\n+struct CCheckpointData {\n+    MapCheckpoints mapCheckpoints;\n+    int64_t nTimeLastCheckpoint;\n+    int64_t nTransactionsLastCheckpoint;\n+    double fTransactionsPerDay;\n+};\n \n /**\n  * CChainParams defines various tweakable parameters of a given instance of the\n@@ -67,7 +74,7 @@ class CChainParams\n     const std::vector<CDNSSeedData>& DNSSeeds() const { return vSeeds; }\n     const std::vector<unsigned char>& Base58Prefix(Base58Type type) const { return base58Prefixes[type]; }\n     const std::vector<SeedSpec6>& FixedSeeds() const { return vFixedSeeds; }\n-    const Checkpoints::CCheckpointData& Checkpoints() const { return checkpointData; }\n+    const CCheckpointData& Checkpoints() const { return checkpointData; }\n protected:\n     CChainParams() {}\n \n@@ -87,7 +94,7 @@ class CChainParams\n     bool fRequireStandard;\n     bool fMineBlocksOnDemand;\n     bool fTestnetToBeDeprecatedFieldRPC;\n-    Checkpoints::CCheckpointData checkpointData;\n+    CCheckpointData checkpointData;\n };\n \n /**"
      },
      {
        "sha": "5fce6fa81ef876fb81780e83054648401a3f403a",
        "filename": "src/checkpoints.h",
        "status": "modified",
        "additions": 1,
        "deletions": 8,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0deec572b304663f5f8e93a573f414e563b353f/src/checkpoints.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0deec572b304663f5f8e93a573f414e563b353f/src/checkpoints.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.h?ref=f0deec572b304663f5f8e93a573f414e563b353f",
        "patch": "@@ -10,21 +10,14 @@\n #include <map>\n \n class CBlockIndex;\n+struct CCheckpointData;\n \n /**\n  * Block-chain checkpoints are compiled-in sanity checks.\n  * They are updated every release or three.\n  */\n namespace Checkpoints\n {\n-typedef std::map<int, uint256> MapCheckpoints;\n-\n-struct CCheckpointData {\n-    MapCheckpoints mapCheckpoints;\n-    int64_t nTimeLastCheckpoint;\n-    int64_t nTransactionsLastCheckpoint;\n-    double fTransactionsPerDay;\n-};\n \n //! Return conservative estimate of total number of blocks, 0 if unknown\n int GetTotalBlocksEstimate(const CCheckpointData& data);"
      },
      {
        "sha": "0a23c430ed164eec2eecc12543a374ff7d46602d",
        "filename": "src/test/Checkpoints_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0deec572b304663f5f8e93a573f414e563b353f/src/test/Checkpoints_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0deec572b304663f5f8e93a573f414e563b353f/src/test/Checkpoints_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/Checkpoints_tests.cpp?ref=f0deec572b304663f5f8e93a573f414e563b353f",
        "patch": "@@ -20,7 +20,7 @@ BOOST_FIXTURE_TEST_SUITE(Checkpoints_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(sanity)\n {\n-    const Checkpoints::CCheckpointData& checkpoints = Params(CBaseChainParams::MAIN).Checkpoints();\n+    const CCheckpointData& checkpoints = Params(CBaseChainParams::MAIN).Checkpoints();\n     BOOST_CHECK(Checkpoints::GetTotalBlocksEstimate(checkpoints) >= 134444);\n }\n "
      }
    ]
  },
  {
    "sha": "17221bf77e07b8c2ef313836d33ac16c21796591",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNzIyMWJmNzdlMDdiOGMyZWYzMTM4MzZkMzNhYzE2YzIxNzk2NTkx",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-06-05T20:01:44Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-07-28T19:33:33Z"
      },
      "message": "chainparams: don't use std namespace",
      "tree": {
        "sha": "366fbedb8db3fe5796a9fedd0f7bd3fad2efe5c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/366fbedb8db3fe5796a9fedd0f7bd3fad2efe5c5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/17221bf77e07b8c2ef313836d33ac16c21796591",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17221bf77e07b8c2ef313836d33ac16c21796591",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/17221bf77e07b8c2ef313836d33ac16c21796591",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17221bf77e07b8c2ef313836d33ac16c21796591/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f0deec572b304663f5f8e93a573f414e563b353f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0deec572b304663f5f8e93a573f414e563b353f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f0deec572b304663f5f8e93a573f414e563b353f"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 1,
      "deletions": 3
    },
    "files": [
      {
        "sha": "c9dee25c578dbd66fd10d795350eb068da077618",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17221bf77e07b8c2ef313836d33ac16c21796591/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17221bf77e07b8c2ef313836d33ac16c21796591/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=17221bf77e07b8c2ef313836d33ac16c21796591",
        "patch": "@@ -12,8 +12,6 @@\n \n #include <boost/assign/list_of.hpp>\n \n-using namespace std;\n-\n #include \"chainparamsseeds.h\"\n \n static CBlock CreateGenesisBlock(const char* pszTimestamp, CScript genesisOutputScript, uint32_t nTime=1231006505, uint32_t nNonce=2083236893, uint32_t nBits=0x1d00ffff, int32_t nVersion=1, const CAmount& genesisReward=50 * COIN)\n@@ -22,7 +20,7 @@ static CBlock CreateGenesisBlock(const char* pszTimestamp, CScript genesisOutput\n     txNew.nVersion = 1;\n     txNew.vin.resize(1);\n     txNew.vout.resize(1);\n-    txNew.vin[0].scriptSig = CScript() << 486604799 << CScriptNum(4) << vector<unsigned char>((const unsigned char*)pszTimestamp, (const unsigned char*)pszTimestamp + strlen(pszTimestamp));\n+    txNew.vin[0].scriptSig = CScript() << 486604799 << CScriptNum(4) << std::vector<unsigned char>((const unsigned char*)pszTimestamp, (const unsigned char*)pszTimestamp + strlen(pszTimestamp));\n     txNew.vout[0].nValue = genesisReward;\n     txNew.vout[0].scriptPubKey = genesisOutputScript;\n "
      }
    ]
  },
  {
    "sha": "0847d9cb5fcd2fdd5a21bde699944d966cf5add9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowODQ3ZDljYjVmY2QyZmRkNWEyMWJkZTY5OTk0NGQ5NjZjZjVhZGQ5",
    "commit": {
      "author": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-07-17T10:46:48Z"
      },
      "committer": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-07-28T19:50:13Z"
      },
      "message": "Keep track of recently rejected transactions\n\nNodes can have divergent policies on which transactions they will accept\nand relay.  This can cause you to repeatedly request and reject the same\ntx after its inved to you from various peers which have accepted it.\nHere we add rolling bloom filter to keep track of such rejections,\nclearing the filter every time the chain tip changes.\n\nCredit goes to Alex Morcos, who created the patch that this code is\nbased on.\n\nOriginal code by Peter Todd. Refactored to not construct the\nfilter at startup time by Pieter Wuille.",
      "tree": {
        "sha": "d98c5f3799331cd0d6ac76afa65511bde0682177",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d98c5f3799331cd0d6ac76afa65511bde0682177"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0847d9cb5fcd2fdd5a21bde699944d966cf5add9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGrBAABCACVBQJVt9z3XhSAAAAAABUAQGJsb2NraGFzaEBiaXRjb2luLm9yZzAw\nMDAwMDAwMDAwMDAwMDAwMjg3MTg3MmU3YWRjY2IzNGE1NGU4ODg2YjNhODA1ODI5\nZGYzYmM0YjVmZmY1MzMvFIAAAAAAFQARcGthLWFkZHJlc3NAZ251cGcub3JncGV0\nZUBwZXRlcnRvZC5vcmcACgkQJIFAPaXwkfs0kQf+IIDRCSsdtpT+YCnVbKEYx/QM\n6gMmCfzKXpbZ5RCDoWFDR+wrJJIV3gm6dgmd3+qkpkfskQ8QYWw1XVApNmIe68TN\nNUMg4xudqOBA1di9BHkcOv4aDkD0ejAo+aN/365D8khsoiDOrRbPvCrjtROGkW9c\nJ9KNzo823hNjknns2/OqicEVxmMbZPeY2Ous7dIkg5p5XnV+II5EqA0z44jXilMp\nOrZqKN8hL+hje2OxU6KWJCKiYcRO3SUvpzcthDOc2OlCOf+vCgWjUVelrtQv4EsU\nmKTIUIXwfjugxYDYMf+GO/WRO/UwRhfrCBtJdMkcr/GXHQORR54EVTzC85FbIQ==\n=KDd3\n-----END PGP SIGNATURE-----",
        "payload": "tree d98c5f3799331cd0d6ac76afa65511bde0682177\nparent d741371d7d27e228aa64c618c50b23fb5449c3e1\nauthor Peter Todd <pete@petertodd.org> 1437130008 -0400\ncommitter Peter Todd <pete@petertodd.org> 1438113013 -0400\n\nKeep track of recently rejected transactions\n\nNodes can have divergent policies on which transactions they will accept\nand relay.  This can cause you to repeatedly request and reject the same\ntx after its inved to you from various peers which have accepted it.\nHere we add rolling bloom filter to keep track of such rejections,\nclearing the filter every time the chain tip changes.\n\nCredit goes to Alex Morcos, who created the patch that this code is\nbased on.\n\nOriginal code by Peter Todd. Refactored to not construct the\nfilter at startup time by Pieter Wuille.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0847d9cb5fcd2fdd5a21bde699944d966cf5add9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0847d9cb5fcd2fdd5a21bde699944d966cf5add9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0847d9cb5fcd2fdd5a21bde699944d966cf5add9/comments",
    "author": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d741371d7d27e228aa64c618c50b23fb5449c3e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d741371d7d27e228aa64c618c50b23fb5449c3e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d741371d7d27e228aa64c618c50b23fb5449c3e1"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 59,
      "deletions": 9
    },
    "files": [
      {
        "sha": "0865ecc5063ecc72508aa8941ef3d69b896c84a5",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 59,
        "deletions": 9,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0847d9cb5fcd2fdd5a21bde699944d966cf5add9/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0847d9cb5fcd2fdd5a21bde699944d966cf5add9/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=0847d9cb5fcd2fdd5a21bde699944d966cf5add9",
        "patch": "@@ -162,6 +162,29 @@ namespace {\n      */\n     map<uint256, NodeId> mapBlockSource;\n \n+    /**\n+     * Filter for transactions that were recently rejected by\n+     * AcceptToMemoryPool. These are not rerequested until the chain tip\n+     * changes, at which point the entire filter is reset. Protected by\n+     * cs_main.\n+     *\n+     * Without this filter we'd be re-requesting txs from each of our peers,\n+     * increasing bandwidth consumption considerably. For instance, with 100\n+     * peers, half of which relay a tx we don't accept, that might be a 50x\n+     * bandwidth increase. A flooding attacker attempting to roll-over the\n+     * filter using minimum-sized, 60byte, transactions might manage to send\n+     * 1000/sec if we have fast peers, so we pick 120,000 to give our peers a\n+     * two minute window to send invs to us.\n+     *\n+     * Decreasing the false positive rate is fairly cheap, so we pick one in a\n+     * million to make it highly unlikely for users to have issues with this\n+     * filter.\n+     *\n+     * Memory used: 1.7MB\n+     */\n+    boost::scoped_ptr<CRollingBloomFilter> recentRejects;\n+    uint256 hashRecentRejectsChainTip;\n+\n     /** Blocks that are in flight, and that are in the queue to be downloaded. Protected by cs_main. */\n     struct QueuedBlock {\n         uint256 hash;\n@@ -3267,6 +3290,7 @@ void UnloadBlockIndex()\n     setDirtyBlockIndex.clear();\n     setDirtyFileInfo.clear();\n     mapNodeState.clear();\n+    recentRejects.reset(NULL);\n \n     BOOST_FOREACH(BlockMap::value_type& entry, mapBlockIndex) {\n         delete entry.second;\n@@ -3320,6 +3344,9 @@ bool InitBlockIndex() {\n         }\n     }\n \n+    // Initialize global variables that cannot be constructed at startup.\n+    recentRejects.reset(new CRollingBloomFilter(120000, 0.000001));\n+\n     return true;\n }\n \n@@ -3689,10 +3716,20 @@ bool static AlreadyHave(const CInv& inv) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n     {\n     case MSG_TX:\n         {\n-            bool txInMap = false;\n-            txInMap = mempool.exists(inv.hash);\n-            return txInMap || mapOrphanTransactions.count(inv.hash) ||\n-                pcoinsTip->HaveCoins(inv.hash);\n+            if (chainActive.Tip()->GetBlockHash() != hashRecentRejectsChainTip)\n+            {\n+                // If the chain tip has changed previously rejected transactions\n+                // might be now valid, e.g. due to a nLockTime'd tx becoming valid,\n+                // or a double-spend. Reset the rejects filter and give those\n+                // txs a second chance.\n+                hashRecentRejectsChainTip = chainActive.Tip()->GetBlockHash();\n+                recentRejects->reset();\n+            }\n+\n+            return recentRejects->contains(inv.hash) ||\n+                   mempool.exists(inv.hash) ||\n+                   mapOrphanTransactions.count(inv.hash) ||\n+                   pcoinsTip->HaveCoins(inv.hash);\n         }\n     case MSG_BLOCK:\n         return mapBlockIndex.count(inv.hash);\n@@ -4292,6 +4329,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                         // Probably non-standard or insufficient fee/priority\n                         LogPrint(\"mempool\", \"   removed orphan tx %s\\n\", orphanHash.ToString());\n                         vEraseQueue.push_back(orphanHash);\n+                        recentRejects->insert(orphanHash);\n                     }\n                     mempool.check(pcoinsTip);\n                 }\n@@ -4309,11 +4347,23 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             unsigned int nEvicted = LimitOrphanTxSize(nMaxOrphanTx);\n             if (nEvicted > 0)\n                 LogPrint(\"mempool\", \"mapOrphan overflow, removed %u tx\\n\", nEvicted);\n-        } else if (pfrom->fWhitelisted) {\n-            // Always relay transactions received from whitelisted peers, even\n-            // if they are already in the mempool (allowing the node to function\n-            // as a gateway for nodes hidden behind it).\n-            RelayTransaction(tx);\n+        } else {\n+            // AcceptToMemoryPool() returned false, possibly because the tx is\n+            // already in the mempool; if the tx isn't in the mempool that\n+            // means it was rejected and we shouldn't ask for it again.\n+            if (!mempool.exists(tx.GetHash())) {\n+                recentRejects->insert(tx.GetHash());\n+            }\n+            if (pfrom->fWhitelisted) {\n+                // Always relay transactions received from whitelisted peers, even\n+                // if they were rejected from the mempool, allowing the node to\n+                // function as a gateway for nodes hidden behind it.\n+                //\n+                // FIXME: This includes invalid transactions, which means a\n+                // whitelisted peer could get us banned! We may want to change\n+                // that.\n+                RelayTransaction(tx);\n+            }\n         }\n         int nDoS = 0;\n         if (state.IsInvalid(nDoS))"
      }
    ]
  },
  {
    "sha": "7cbed7fa28d68b3071aaeec2a3f11bdd32de42f1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Y2JlZDdmYTI4ZDY4YjMwNzFhYWVlYzJhM2YxMWJkZDMyZGU0MmYx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-29T16:58:54Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-29T16:59:23Z"
      },
      "message": "Merge pull request #6488\n\n17ac0f4 Avoid leaking file descriptors in RegisterLoad (Casey Rodarmor)",
      "tree": {
        "sha": "7cbdbcb881eae987d2c5de260831c4284a53ea73",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7cbdbcb881eae987d2c5de260831c4284a53ea73"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7cbed7fa28d68b3071aaeec2a3f11bdd32de42f1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVuQZrAAoJEHSBCwEjRsmm0SUH/0h0R6V0teS4SaNrogspLt24\nUfCanfEcDo/fK0h+/5tPjRtb2lgZmB4W8GAX/PQA2IV0RO2JBKhsQ+1nrbyCubQZ\no2n0a6NW83UfTaBuHw1ofbKKPDLose23aFyg+CV5CjzXFZjB/GrM48nHCT8wl/3B\n/V7fzDrhkUd91BaaQCqnL2ruavbt3UXMF5HaubcspW6rVLc0Ns63haoJblWoT+Cb\nRn3nrSt/w9P0UKi97Fv/E6DspqjTCenoCHJzS3I3eLPjeBCbT07wDJclGSedREwD\n2Llap7tGoL/mzPfq3M9y7jqVFNuJrTKsWP9u/mM4hSZ/0ikbGHEYS+Hxg3B0d9g=\n=WqjN\n-----END PGP SIGNATURE-----",
        "payload": "tree 7cbdbcb881eae987d2c5de260831c4284a53ea73\nparent eddaba7b5692288087a926da5733e86b47274e4e\nparent 17ac0f402559f57733fb5da6dafb72cf0f50795f\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1438189134 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1438189163 +0200\n\nMerge pull request #6488\n\n17ac0f4 Avoid leaking file descriptors in RegisterLoad (Casey Rodarmor)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cbed7fa28d68b3071aaeec2a3f11bdd32de42f1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7cbed7fa28d68b3071aaeec2a3f11bdd32de42f1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cbed7fa28d68b3071aaeec2a3f11bdd32de42f1/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eddaba7b5692288087a926da5733e86b47274e4e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eddaba7b5692288087a926da5733e86b47274e4e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eddaba7b5692288087a926da5733e86b47274e4e"
      },
      {
        "sha": "17ac0f402559f57733fb5da6dafb72cf0f50795f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17ac0f402559f57733fb5da6dafb72cf0f50795f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/17ac0f402559f57733fb5da6dafb72cf0f50795f"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "e389d51a7328f63cbd8295785798bd79ce613ac2",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cbed7fa28d68b3071aaeec2a3f11bdd32de42f1/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cbed7fa28d68b3071aaeec2a3f11bdd32de42f1/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=7cbed7fa28d68b3071aaeec2a3f11bdd32de42f1",
        "patch": "@@ -143,13 +143,14 @@ static void RegisterLoad(const string& strInput)\n         valStr.insert(valStr.size(), buf, bread);\n     }\n \n-    if (ferror(f)) {\n+    int error = ferror(f);\n+    fclose(f);\n+\n+    if (error) {\n         string strErr = \"Error reading file \" + filename;\n         throw runtime_error(strErr);\n     }\n \n-    fclose(f);\n-\n     // evaluate as JSON buffer register\n     RegisterSetJson(key, valStr);\n }"
      }
    ]
  },
  {
    "sha": "f0cba6f8ebc2eb5a988f506b37e7113f724e63ff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMGNiYTZmOGViYzJlYjVhOTg4ZjUwNmIzN2U3MTEzZjcyNGU2M2Zm",
    "commit": {
      "author": {
        "name": "Adam Weiss",
        "email": "adam@signal11.com",
        "date": "2015-06-30T17:22:48Z"
      },
      "committer": {
        "name": "Adam Weiss",
        "email": "adam@signal11.com",
        "date": "2015-07-29T18:00:25Z"
      },
      "message": "Delay initial pruning until after wallet init\n\nDon't prune until any wallet rescanning has taken place to avoid\npotentially pruning blocks that the wallet rescan may need.",
      "tree": {
        "sha": "ff9b8131c05be8aab0272d96005fd2348977df7c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ff9b8131c05be8aab0272d96005fd2348977df7c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f0cba6f8ebc2eb5a988f506b37e7113f724e63ff",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0cba6f8ebc2eb5a988f506b37e7113f724e63ff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f0cba6f8ebc2eb5a988f506b37e7113f724e63ff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0cba6f8ebc2eb5a988f506b37e7113f724e63ff/comments",
    "author": {
      "login": "ajweiss",
      "id": 430315,
      "node_id": "MDQ6VXNlcjQzMDMxNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/430315?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajweiss",
      "html_url": "https://github.com/ajweiss",
      "followers_url": "https://api.github.com/users/ajweiss/followers",
      "following_url": "https://api.github.com/users/ajweiss/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajweiss/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajweiss/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajweiss/subscriptions",
      "organizations_url": "https://api.github.com/users/ajweiss/orgs",
      "repos_url": "https://api.github.com/users/ajweiss/repos",
      "events_url": "https://api.github.com/users/ajweiss/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajweiss/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajweiss",
      "id": 430315,
      "node_id": "MDQ6VXNlcjQzMDMxNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/430315?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajweiss",
      "html_url": "https://github.com/ajweiss",
      "followers_url": "https://api.github.com/users/ajweiss/followers",
      "following_url": "https://api.github.com/users/ajweiss/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajweiss/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajweiss/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajweiss/subscriptions",
      "organizations_url": "https://api.github.com/users/ajweiss/orgs",
      "repos_url": "https://api.github.com/users/ajweiss/repos",
      "events_url": "https://api.github.com/users/ajweiss/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajweiss/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "da77a6f7611f71443914e1c71df1e52468cf507d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da77a6f7611f71443914e1c71df1e52468cf507d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/da77a6f7611f71443914e1c71df1e52468cf507d"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 16,
      "deletions": 11
    },
    "files": [
      {
        "sha": "6c9c1214f0ae6fc2ee5b012766379d0b7a1396fc",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 11,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0cba6f8ebc2eb5a988f506b37e7113f724e63ff/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0cba6f8ebc2eb5a988f506b37e7113f724e63ff/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=f0cba6f8ebc2eb5a988f506b37e7113f724e63ff",
        "patch": "@@ -1226,15 +1226,6 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         mempool.ReadFeeEstimates(est_filein);\n     fFeeEstimatesInitialized = true;\n \n-    // if prune mode, unset NODE_NETWORK and prune block files\n-    if (fPruneMode) {\n-        LogPrintf(\"Unsetting NODE_NETWORK on prune mode\\n\");\n-        nLocalServices &= ~NODE_NETWORK;\n-        if (!fReindex) {\n-            PruneAndFlush();\n-        }\n-    }\n-\n     // ********************************************************* Step 8: load wallet\n #ifdef ENABLE_WALLET\n     if (fDisableWallet) {\n@@ -1388,7 +1379,21 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n #else // ENABLE_WALLET\n     LogPrintf(\"No wallet support compiled in!\\n\");\n #endif // !ENABLE_WALLET\n-    // ********************************************************* Step 9: import blocks\n+\n+    // ********************************************************* Step 9: data directory maintenance\n+\n+    // if pruning, unset the service bit and perform the initial blockstore prune\n+    // after any wallet rescanning has taken place.\n+    if (fPruneMode) {\n+        uiInterface.InitMessage(_(\"Pruning blockstore...\"));\n+        LogPrintf(\"Unsetting NODE_NETWORK on prune mode\\n\");\n+        nLocalServices &= ~NODE_NETWORK;\n+        if (!fReindex) {\n+            PruneAndFlush();\n+        }\n+    }\n+\n+    // ********************************************************* Step 10: import blocks\n \n     if (mapArgs.count(\"-blocknotify\"))\n         uiInterface.NotifyBlockTip.connect(BlockNotifyCallback);\n@@ -1412,7 +1417,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n             MilliSleep(10);\n     }\n \n-    // ********************************************************* Step 10: start node\n+    // ********************************************************* Step 11: start node\n \n     if (!CheckDiskSpace())\n         return false;"
      }
    ]
  },
  {
    "sha": "675d2feffa84a6ffeabac32aeed37f6a7f74bee3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NzVkMmZlZmZhODRhNmZmZWFiYWMzMmFlZWQzN2Y2YTdmNzRiZWUz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-29T17:45:07Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-29T18:04:15Z"
      },
      "message": "Merge pull request #6224\n\n59b49cd Eliminate signed/unsigned comparison warning (Suhas Daftuar)\n04b5d23 Replace sleep with syncing using pings (Suhas Daftuar)\n6b1066f Ignore whitelisting during IBD for unrequested blocks. (Suhas Daftuar)\nbfc30b3 Ignore unrequested blocks too far ahead of tip (Suhas Daftuar)",
      "tree": {
        "sha": "0d627014f5245fc80c921e596ef3840e48249bb2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0d627014f5245fc80c921e596ef3840e48249bb2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/675d2feffa84a6ffeabac32aeed37f6a7f74bee3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVuRWfAAoJEHSBCwEjRsmmrjwH/2FF7bWAcQ0WPhehx76+mtHt\nY0FE8VwfZk/PoW5D+x+rd8CZ/hZhBv+i+Pr9aETntJEihwDG4I6/M/56Wr9FBSnb\nbAMukelSSunIICeyPGRD0z0QnRRmJhcTKzEHEhHfMjl69p6DQrk2MDti8g6qfJVn\nd/uOZDS/BSGdgBcEAGVu3nQX2qVVFcAsvyfxRZwrLn+/mna9Ag8ElHC36mzZEnCM\nAtLqmD9Ibu1VafC4AZo0q/aLH6CfPU1XK8fnlSHu+HUhUf/PRKi9Km3GRcyMxJtu\nEZb6Q226G3hdvg8nOmEhsZ3JwJhKkCgzori3AtBr904FyhzofyGIfcAfuuZpQy0=\n=AU5j\n-----END PGP SIGNATURE-----",
        "payload": "tree 0d627014f5245fc80c921e596ef3840e48249bb2\nparent 7cbed7fa28d68b3071aaeec2a3f11bdd32de42f1\nparent 59b49cd07482494d9a99068af502be9ceda41ed2\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1438191907 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1438193055 +0200\n\nMerge pull request #6224\n\n59b49cd Eliminate signed/unsigned comparison warning (Suhas Daftuar)\n04b5d23 Replace sleep with syncing using pings (Suhas Daftuar)\n6b1066f Ignore whitelisting during IBD for unrequested blocks. (Suhas Daftuar)\nbfc30b3 Ignore unrequested blocks too far ahead of tip (Suhas Daftuar)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/675d2feffa84a6ffeabac32aeed37f6a7f74bee3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/675d2feffa84a6ffeabac32aeed37f6a7f74bee3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/675d2feffa84a6ffeabac32aeed37f6a7f74bee3/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7cbed7fa28d68b3071aaeec2a3f11bdd32de42f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cbed7fa28d68b3071aaeec2a3f11bdd32de42f1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7cbed7fa28d68b3071aaeec2a3f11bdd32de42f1"
      },
      {
        "sha": "59b49cd07482494d9a99068af502be9ceda41ed2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59b49cd07482494d9a99068af502be9ceda41ed2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/59b49cd07482494d9a99068af502be9ceda41ed2"
      }
    ],
    "stats": {
      "total": 104,
      "additions": 90,
      "deletions": 14
    },
    "files": [
      {
        "sha": "83c03eeb782896901d99adced0f3e9d16a9d78ac",
        "filename": "qa/rpc-tests/p2p-acceptblock.py",
        "status": "modified",
        "additions": 76,
        "deletions": 11,
        "changes": 87,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/675d2feffa84a6ffeabac32aeed37f6a7f74bee3/qa/rpc-tests/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/675d2feffa84a6ffeabac32aeed37f6a7f74bee3/qa/rpc-tests/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-acceptblock.py?ref=675d2feffa84a6ffeabac32aeed37f6a7f74bee3",
        "patch": "@@ -40,6 +40,11 @@\n    it's missing an intermediate block.\n    Node1 should reorg to this longer chain.\n \n+4b.Send 288 more blocks on the longer chain.\n+   Node0 should process all but the last block (too far ahead in height).\n+   Send all headers to Node1, and then send the last block in that chain.\n+   Node1 should accept the block because it's coming from a whitelisted peer.\n+\n 5. Send a duplicate of the block in #3 to Node0.\n    Node0 should not process the block because it is unrequested, and stay on\n    the shorter chain.\n@@ -59,6 +64,8 @@ def __init__(self):\n         NodeConnCB.__init__(self)\n         self.create_callback_map()\n         self.connection = None\n+        self.ping_counter = 1\n+        self.last_pong = msg_pong()\n \n     def add_connection(self, conn):\n         self.connection = conn\n@@ -82,6 +89,24 @@ def wait_for_verack(self):\n     def send_message(self, message):\n         self.connection.send_message(message)\n \n+    def on_pong(self, conn, message):\n+        self.last_pong = message\n+\n+    # Sync up with the node after delivery of a block\n+    def sync_with_ping(self, timeout=30):\n+        self.connection.send_message(msg_ping(nonce=self.ping_counter))\n+        received_pong = False\n+        sleep_time = 0.05\n+        while not received_pong and timeout > 0:\n+            time.sleep(sleep_time)\n+            timeout -= sleep_time\n+            with mininode_lock:\n+                if self.last_pong.nonce == self.ping_counter:\n+                    received_pong = True\n+        self.ping_counter += 1\n+        return received_pong\n+\n+\n class AcceptBlockTest(BitcoinTestFramework):\n     def add_options(self, parser):\n         parser.add_option(\"--testbinary\", dest=\"testbinary\",\n@@ -126,13 +151,15 @@ def run_test(self):\n         # 2. Send one block that builds on each tip.\n         # This should be accepted.\n         blocks_h2 = []  # the height 2 blocks on each node's chain\n+        block_time = time.time() + 1\n         for i in xrange(2):\n-            blocks_h2.append(create_block(tips[i], create_coinbase(), time.time()+1))\n+            blocks_h2.append(create_block(tips[i], create_coinbase(), block_time))\n             blocks_h2[i].solve()\n+            block_time += 1\n         test_node.send_message(msg_block(blocks_h2[0]))\n         white_node.send_message(msg_block(blocks_h2[1]))\n \n-        time.sleep(1)\n+        [ x.sync_with_ping() for x in [test_node, white_node] ]\n         assert_equal(self.nodes[0].getblockcount(), 2)\n         assert_equal(self.nodes[1].getblockcount(), 2)\n         print \"First height 2 block accepted by both nodes\"\n@@ -145,7 +172,7 @@ def run_test(self):\n         test_node.send_message(msg_block(blocks_h2f[0]))\n         white_node.send_message(msg_block(blocks_h2f[1]))\n \n-        time.sleep(1)  # Give time to process the block\n+        [ x.sync_with_ping() for x in [test_node, white_node] ]\n         for x in self.nodes[0].getchaintips():\n             if x['hash'] == blocks_h2f[0].hash:\n                 assert_equal(x['status'], \"headers-only\")\n@@ -164,7 +191,7 @@ def run_test(self):\n         test_node.send_message(msg_block(blocks_h3[0]))\n         white_node.send_message(msg_block(blocks_h3[1]))\n \n-        time.sleep(1)\n+        [ x.sync_with_ping() for x in [test_node, white_node] ]\n         # Since the earlier block was not processed by node0, the new block\n         # can't be fully validated.\n         for x in self.nodes[0].getchaintips():\n@@ -182,6 +209,45 @@ def run_test(self):\n         assert_equal(self.nodes[1].getblockcount(), 3)\n         print \"Successfully reorged to length 3 chain from whitelisted peer\"\n \n+        # 4b. Now mine 288 more blocks and deliver; all should be processed but\n+        # the last (height-too-high) on node0.  Node1 should process the tip if\n+        # we give it the headers chain leading to the tip.\n+        tips = blocks_h3\n+        headers_message = msg_headers()\n+        all_blocks = []   # node0's blocks\n+        for j in xrange(2):\n+            for i in xrange(288):\n+                next_block = create_block(tips[j].sha256, create_coinbase(), tips[j].nTime+1)\n+                next_block.solve()\n+                if j==0:\n+                    test_node.send_message(msg_block(next_block))\n+                    all_blocks.append(next_block)\n+                else:\n+                    headers_message.headers.append(CBlockHeader(next_block))\n+                tips[j] = next_block\n+\n+        time.sleep(2)\n+        for x in all_blocks:\n+            try:\n+                self.nodes[0].getblock(x.hash)\n+                if x == all_blocks[287]:\n+                    raise AssertionError(\"Unrequested block too far-ahead should have been ignored\")\n+            except:\n+                if x == all_blocks[287]:\n+                    print \"Unrequested block too far-ahead not processed\"\n+                else:\n+                    raise AssertionError(\"Unrequested block with more work should have been accepted\")\n+\n+        headers_message.headers.pop() # Ensure the last block is unrequested\n+        white_node.send_message(headers_message) # Send headers leading to tip\n+        white_node.send_message(msg_block(tips[1]))  # Now deliver the tip\n+        try:\n+            white_node.sync_with_ping()\n+            self.nodes[1].getblock(tips[1].hash)\n+            print \"Unrequested block far ahead of tip accepted from whitelisted peer\"\n+        except:\n+            raise AssertionError(\"Unrequested block from whitelisted peer not accepted\")\n+\n         # 5. Test handling of unrequested block on the node that didn't process\n         # Should still not be processed (even though it has a child that has more\n         # work).\n@@ -192,7 +258,7 @@ def run_test(self):\n         # the node processes it and incorrectly advances the tip).\n         # But this would be caught later on, when we verify that an inv triggers\n         # a getdata request for this block.\n-        time.sleep(1)\n+        test_node.sync_with_ping()\n         assert_equal(self.nodes[0].getblockcount(), 2)\n         print \"Unrequested block that would complete more-work chain was ignored\"\n \n@@ -204,21 +270,20 @@ def run_test(self):\n             test_node.last_getdata = None\n             test_node.send_message(msg_inv([CInv(2, blocks_h3[0].sha256)]))\n \n-        time.sleep(1)\n+        test_node.sync_with_ping()\n         with mininode_lock:\n             getdata = test_node.last_getdata\n \n-        # Check that the getdata is for the right block\n-        assert_equal(len(getdata.inv), 1)\n+        # Check that the getdata includes the right block\n         assert_equal(getdata.inv[0].hash, blocks_h2f[0].sha256)\n         print \"Inv at tip triggered getdata for unprocessed block\"\n \n         # 7. Send the missing block for the third time (now it is requested)\n         test_node.send_message(msg_block(blocks_h2f[0]))\n \n-        time.sleep(1)\n-        assert_equal(self.nodes[0].getblockcount(), 3)\n-        print \"Successfully reorged to length 3 chain from non-whitelisted peer\"\n+        test_node.sync_with_ping()\n+        assert_equal(self.nodes[0].getblockcount(), 290)\n+        print \"Successfully reorged to longer chain from non-whitelisted peer\"\n \n         [ c.disconnect_node() for c in connections ]\n "
      },
      {
        "sha": "d470ba90036d65530598b5c7f0a104ac593ef7aa",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 3,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/675d2feffa84a6ffeabac32aeed37f6a7f74bee3/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/675d2feffa84a6ffeabac32aeed37f6a7f74bee3/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=675d2feffa84a6ffeabac32aeed37f6a7f74bee3",
        "patch": "@@ -2734,16 +2734,23 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex,\n \n     // Try to process all requested blocks that we don't have, but only\n     // process an unrequested block if it's new and has enough work to\n-    // advance our tip.\n+    // advance our tip, and isn't too many blocks ahead.\n     bool fAlreadyHave = pindex->nStatus & BLOCK_HAVE_DATA;\n     bool fHasMoreWork = (chainActive.Tip() ? pindex->nChainWork > chainActive.Tip()->nChainWork : true);\n+    // Blocks that are too out-of-order needlessly limit the effectiveness of\n+    // pruning, because pruning will not delete block files that contain any\n+    // blocks which are too close in height to the tip.  Apply this test\n+    // regardless of whether pruning is enabled; it should generally be safe to\n+    // not process unrequested blocks.\n+    bool fTooFarAhead = (pindex->nHeight > int(chainActive.Height() + MIN_BLOCKS_TO_KEEP));\n \n     // TODO: deal better with return value and error conditions for duplicate\n     // and unrequested blocks.\n     if (fAlreadyHave) return true;\n     if (!fRequested) {  // If we didn't ask for it:\n         if (pindex->nTx != 0) return true;  // This is a previously-processed block that was pruned\n         if (!fHasMoreWork) return true;     // Don't process less-work chains\n+        if (fTooFarAhead) return true;      // Block height is too high\n     }\n \n     if ((!CheckBlock(block, state)) || !ContextualCheckBlock(block, state, pindex->pprev)) {\n@@ -4368,8 +4375,12 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         pfrom->AddInventoryKnown(inv);\n \n         CValidationState state;\n-        // Process all blocks from whitelisted peers, even if not requested.\n-        ProcessNewBlock(state, pfrom, &block, pfrom->fWhitelisted, NULL);\n+        // Process all blocks from whitelisted peers, even if not requested,\n+        // unless we're still syncing with the network.\n+        // Such an unrequested block may still be processed, subject to the\n+        // conditions in AcceptBlock().\n+        bool forceProcessing = pfrom->fWhitelisted && !IsInitialBlockDownload();\n+        ProcessNewBlock(state, pfrom, &block, forceProcessing, NULL);\n         int nDoS;\n         if (state.IsInvalid(nDoS)) {\n             pfrom->PushMessage(\"reject\", strCommand, state.GetRejectCode(),"
      }
    ]
  },
  {
    "sha": "5fb5c9b21335edfe193513ae3fe3f09c1cefe24b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZmI1YzliMjEzMzVlZGZlMTkzNTEzYWUzZmUzZjA5YzFjZWZlMjRi",
    "commit": {
      "author": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2015-07-29T19:13:36Z"
      },
      "committer": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2015-07-29T19:13:36Z"
      },
      "message": "Clean up chainparams some more.\n\nClean up the code in chainparams a bit more after the recent\nrefactorings.  In particular, make sure the structure of the \"RegTest\"\nparams matches the structure of the other classes.  This makes the code\nclearer to read.\n\nAlso remove redundant values of the genesis block in always-specified\noptional arguments and mark variable/argument as \"const\".",
      "tree": {
        "sha": "6758b4edebab74fab5c8c24acacdca1c88e4122e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6758b4edebab74fab5c8c24acacdca1c88e4122e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5fb5c9b21335edfe193513ae3fe3f09c1cefe24b",
      "comment_count": 1,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fb5c9b21335edfe193513ae3fe3f09c1cefe24b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5fb5c9b21335edfe193513ae3fe3f09c1cefe24b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fb5c9b21335edfe193513ae3fe3f09c1cefe24b/comments",
    "author": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "675d2feffa84a6ffeabac32aeed37f6a7f74bee3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/675d2feffa84a6ffeabac32aeed37f6a7f74bee3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/675d2feffa84a6ffeabac32aeed37f6a7f74bee3"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 12,
      "deletions": 8
    },
    "files": [
      {
        "sha": "623104690a16b81174dd09e45a555f6ce8d713c9",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 8,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5fb5c9b21335edfe193513ae3fe3f09c1cefe24b/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5fb5c9b21335edfe193513ae3fe3f09c1cefe24b/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=5fb5c9b21335edfe193513ae3fe3f09c1cefe24b",
        "patch": "@@ -16,7 +16,7 @@ using namespace std;\n \n #include \"chainparamsseeds.h\"\n \n-static CBlock CreateGenesisBlock(const char* pszTimestamp, CScript genesisOutputScript, uint32_t nTime=1231006505, uint32_t nNonce=2083236893, uint32_t nBits=0x1d00ffff, int32_t nVersion=1, const CAmount& genesisReward=50 * COIN)\n+static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesisOutputScript, uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)\n {\n     CMutableTransaction txNew;\n     txNew.nVersion = 1;\n@@ -48,10 +48,10 @@ static CBlock CreateGenesisBlock(const char* pszTimestamp, CScript genesisOutput\n  *     CTxOut(nValue=50.00000000, scriptPubKey=0x5F1DF16B2B704C8A578D0B)\n  *   vMerkleTree: 4a5e1e\n  */\n-static CBlock CreateGenesisBlock(uint32_t nTime=1231006505, uint32_t nNonce=2083236893, uint32_t nBits=0x1d00ffff, int32_t nVersion=1, const CAmount& genesisReward=50 * COIN)\n+static CBlock CreateGenesisBlock(uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)\n {\n     const char* pszTimestamp = \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\";\n-    CScript genesisOutputScript = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n+    const CScript genesisOutputScript = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n     return CreateGenesisBlock(pszTimestamp, genesisOutputScript, nTime, nNonce, nBits, nVersion, genesisReward);\n }\n \n@@ -91,7 +91,7 @@ class CMainParams : public CChainParams {\n         nDefaultPort = 8333;\n         nPruneAfterHeight = 100000;\n \n-        genesis = CreateGenesisBlock();\n+        genesis = CreateGenesisBlock(1231006505, 2083236893, 0x1d00ffff, 1, 50 * COIN);\n         consensus.hashGenesisBlock = genesis.GetHash();\n         assert(consensus.hashGenesisBlock == uint256S(\"0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\"));\n         assert(genesis.hashMerkleRoot == uint256S(\"0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"));\n@@ -164,9 +164,10 @@ class CTestNetParams : public CChainParams {\n         nDefaultPort = 18333;\n         nPruneAfterHeight = 1000;\n \n-        genesis = CreateGenesisBlock(1296688602, 414098458);\n+        genesis = CreateGenesisBlock(1296688602, 414098458, 0x1d00ffff, 1, 50 * COIN);\n         consensus.hashGenesisBlock = genesis.GetHash();\n         assert(consensus.hashGenesisBlock == uint256S(\"0x000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943\"));\n+        assert(genesis.hashMerkleRoot == uint256S(\"0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"));\n \n         vFixedSeeds.clear();\n         vSeeds.clear();\n@@ -216,16 +217,19 @@ class CRegTestParams : public CChainParams {\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = true;\n+\n         pchMessageStart[0] = 0xfa;\n         pchMessageStart[1] = 0xbf;\n         pchMessageStart[2] = 0xb5;\n         pchMessageStart[3] = 0xda;\n-        genesis = CreateGenesisBlock(1296688602, 2, 0x207fffff);\n-        consensus.hashGenesisBlock = genesis.GetHash();\n         nDefaultPort = 18444;\n-        assert(consensus.hashGenesisBlock == uint256S(\"0x0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"));\n         nPruneAfterHeight = 1000;\n \n+        genesis = CreateGenesisBlock(1296688602, 2, 0x207fffff, 1, 50 * COIN);\n+        consensus.hashGenesisBlock = genesis.GetHash();\n+        assert(consensus.hashGenesisBlock == uint256S(\"0x0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"));\n+        assert(genesis.hashMerkleRoot == uint256S(\"0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"));\n+\n         vFixedSeeds.clear(); //! Regtest mode doesn't have any fixed seeds.\n         vSeeds.clear();  //! Regtest mode doesn't have any DNS seeds.\n "
      }
    ]
  },
  {
    "sha": "eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZWM3NzU3NDQ1OWRjYmQ4ZDU5ZDhkYmQzNTEyNWViMWUzZWMxYTJl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-28T13:20:14Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-31T07:35:18Z"
      },
      "message": "qt: Introduce PlatformStyle\n\nIntroduce a PlatformStyle to handle platform-specific customization of\nthe UI.\n\nThis replaces 'scicon', as well as #ifdefs to determine whether to place\nicons on buttons.\n\nThe selected PlatformStyle defaults to the platform that the application\nwas compiled on, but can be overridden from the command line with\n`-uiplatform=<x>`.\n\nAlso fixes the warning from #6328.",
      "tree": {
        "sha": "056a02aa9273bdb049286d409973299785d0cf1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/056a02aa9273bdb049286d409973299785d0cf1a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1369d699b6221818dc9ca72eb6c0cea30eeee914",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1369d699b6221818dc9ca72eb6c0cea30eeee914",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1369d699b6221818dc9ca72eb6c0cea30eeee914"
      }
    ],
    "stats": {
      "total": 780,
      "additions": 462,
      "deletions": 318
    },
    "files": [
      {
        "sha": "748f2b14d53a6276e775c3f47a85020d30f6d99e",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e",
        "patch": "@@ -185,13 +185,13 @@ BITCOIN_QT_H = \\\n   qt/paymentrequestplus.h \\\n   qt/paymentserver.h \\\n   qt/peertablemodel.h \\\n+  qt/platformstyle.h \\\n   qt/qvalidatedlineedit.h \\\n   qt/qvaluecombobox.h \\\n   qt/receivecoinsdialog.h \\\n   qt/receiverequestdialog.h \\\n   qt/recentrequeststablemodel.h \\\n   qt/rpcconsole.h \\\n-  qt/scicon.h \\\n   qt/sendcoinsdialog.h \\\n   qt/sendcoinsentry.h \\\n   qt/signverifymessagedialog.h \\\n@@ -273,10 +273,10 @@ BITCOIN_QT_CPP = \\\n   qt/optionsdialog.cpp \\\n   qt/optionsmodel.cpp \\\n   qt/peertablemodel.cpp \\\n+  qt/platformstyle.cpp \\\n   qt/qvalidatedlineedit.cpp \\\n   qt/qvaluecombobox.cpp \\\n   qt/rpcconsole.cpp \\\n-  qt/scicon.cpp \\\n   qt/splashscreen.cpp \\\n   qt/trafficgraphwidget.cpp \\\n   qt/utilitydialog.cpp"
      },
      {
        "sha": "a03571c31ac55a978a46fb9a8a7cf99194711b25",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e",
        "patch": "@@ -441,6 +441,9 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-min\", _(\"Start minimized\"));\n         strUsage += HelpMessageOpt(\"-rootcertificates=<file>\", _(\"Set SSL root certificates for payment request (default: -system-)\"));\n         strUsage += HelpMessageOpt(\"-splash\", _(\"Show splash screen on startup (default: 1)\"));\n+        if (showDebug) {\n+            strUsage += HelpMessageOpt(\"-uiplatform\", \"Select platform to customize UI for (one of windows, macosx, other; default: platform compiled on)\");\n+        }\n     }\n \n     return strUsage;"
      },
      {
        "sha": "8bd158644604fc3c09b296701fdc1118f1e49c10",
        "filename": "src/qt/addressbookpage.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/addressbookpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/addressbookpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.cpp?ref=eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e",
        "patch": "@@ -14,14 +14,14 @@\n #include \"csvmodelwriter.h\"\n #include \"editaddressdialog.h\"\n #include \"guiutil.h\"\n-#include \"scicon.h\"\n+#include \"platformstyle.h\"\n \n #include <QIcon>\n #include <QMenu>\n #include <QMessageBox>\n #include <QSortFilterProxyModel>\n \n-AddressBookPage::AddressBookPage(Mode mode, Tabs tab, QWidget *parent) :\n+AddressBookPage::AddressBookPage(const PlatformStyle *platformStyle, Mode mode, Tabs tab, QWidget *parent) :\n     QDialog(parent),\n     ui(new Ui::AddressBookPage),\n     model(0),\n@@ -30,17 +30,17 @@ AddressBookPage::AddressBookPage(Mode mode, Tabs tab, QWidget *parent) :\n {\n     ui->setupUi(this);\n \n-#ifdef Q_OS_MAC // Icons on push buttons are very uncommon on Mac\n-    ui->newAddress->setIcon(QIcon());\n-    ui->copyAddress->setIcon(QIcon());\n-    ui->deleteAddress->setIcon(QIcon());\n-    ui->exportButton->setIcon(QIcon());\n-#else\n-    ui->newAddress->setIcon(SingleColorIcon(\":/icons/add\"));\n-    ui->copyAddress->setIcon(SingleColorIcon(\":/icons/editcopy\"));\n-    ui->deleteAddress->setIcon(SingleColorIcon(\":/icons/remove\"));\n-    ui->exportButton->setIcon(SingleColorIcon(\":/icons/export\"));\n-#endif\n+    if (!platformStyle->getImagesOnButtons()) {\n+        ui->newAddress->setIcon(QIcon());\n+        ui->copyAddress->setIcon(QIcon());\n+        ui->deleteAddress->setIcon(QIcon());\n+        ui->exportButton->setIcon(QIcon());\n+    } else {\n+        ui->newAddress->setIcon(platformStyle->SingleColorIcon(\":/icons/add\"));\n+        ui->copyAddress->setIcon(platformStyle->SingleColorIcon(\":/icons/editcopy\"));\n+        ui->deleteAddress->setIcon(platformStyle->SingleColorIcon(\":/icons/remove\"));\n+        ui->exportButton->setIcon(platformStyle->SingleColorIcon(\":/icons/export\"));\n+    }\n \n     switch(mode)\n     {"
      },
      {
        "sha": "92e6cab9acbc9372f4c3ec7953d9bc6b454ced1c",
        "filename": "src/qt/addressbookpage.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/addressbookpage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/addressbookpage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.h?ref=eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e",
        "patch": "@@ -9,6 +9,7 @@\n \n class AddressTableModel;\n class OptionsModel;\n+class PlatformStyle;\n \n namespace Ui {\n     class AddressBookPage;\n@@ -39,7 +40,7 @@ class AddressBookPage : public QDialog\n         ForEditing  /**< Open address book for editing */\n     };\n \n-    explicit AddressBookPage(Mode mode, Tabs tab, QWidget *parent);\n+    explicit AddressBookPage(const PlatformStyle *platformStyle, Mode mode, Tabs tab, QWidget *parent);\n     ~AddressBookPage();\n \n     void setModel(AddressTableModel *model);"
      },
      {
        "sha": "1da2d3e34411669f4c6127d62fbb6246324f8895",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 2,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e",
        "patch": "@@ -15,6 +15,7 @@\n #include \"intro.h\"\n #include \"networkstyle.h\"\n #include \"optionsmodel.h\"\n+#include \"platformstyle.h\"\n #include \"splashscreen.h\"\n #include \"utilitydialog.h\"\n #include \"winshutdownmonitor.h\"\n@@ -241,6 +242,7 @@ public Q_SLOTS:\n     WalletModel *walletModel;\n #endif\n     int returnValue;\n+    const PlatformStyle *platformStyle;\n \n     void startThread();\n };\n@@ -310,6 +312,22 @@ BitcoinApplication::BitcoinApplication(int &argc, char **argv):\n     returnValue(0)\n {\n     setQuitOnLastWindowClosed(false);\n+\n+    // UI per-platform customization\n+    // This must be done inside the BitcoinApplication constructor, or after it, because\n+    // PlatformStyle::instantiate requires a QApplication\n+#if defined(Q_OS_MAC)\n+    std::string platformName = \"macosx\";\n+#elif defined(Q_OS_WIN)\n+    std::string platformName = \"windows\";\n+#else\n+    std::string platformName = \"other\";\n+#endif\n+    platformName = GetArg(\"-uiplatform\", platformName);\n+    platformStyle = PlatformStyle::instantiate(QString::fromStdString(platformName));\n+    if (!platformStyle) // Fall back to \"other\" if specified name not found\n+        platformStyle = PlatformStyle::instantiate(\"other\");\n+    assert(platformStyle);\n }\n \n BitcoinApplication::~BitcoinApplication()\n@@ -330,6 +348,8 @@ BitcoinApplication::~BitcoinApplication()\n #endif\n     delete optionsModel;\n     optionsModel = 0;\n+    delete platformStyle;\n+    platformStyle = 0;\n }\n \n #ifdef ENABLE_WALLET\n@@ -346,7 +366,7 @@ void BitcoinApplication::createOptionsModel()\n \n void BitcoinApplication::createWindow(const NetworkStyle *networkStyle)\n {\n-    window = new BitcoinGUI(networkStyle, 0);\n+    window = new BitcoinGUI(platformStyle, networkStyle, 0);\n \n     pollShutdownTimer = new QTimer(window);\n     connect(pollShutdownTimer, SIGNAL(timeout()), window, SLOT(detectShutdown()));\n@@ -421,6 +441,8 @@ void BitcoinApplication::initializeResult(int retval)\n     returnValue = retval ? 0 : 1;\n     if(retval)\n     {\n+        // Log this only after AppInit2 finishes, as then logging setup is guaranteed complete\n+        qWarning() << \"Platform customization:\" << platformStyle->getName();\n #ifdef ENABLE_WALLET\n         PaymentServer::LoadRootCAs();\n         paymentServer->setOptionsModel(optionsModel);\n@@ -432,7 +454,7 @@ void BitcoinApplication::initializeResult(int retval)\n #ifdef ENABLE_WALLET\n         if(pwalletMain)\n         {\n-            walletModel = new WalletModel(pwalletMain, optionsModel);\n+            walletModel = new WalletModel(platformStyle, pwalletMain, optionsModel);\n \n             window->addWallet(BitcoinGUI::DEFAULT_WALLET, walletModel);\n             window->setCurrentWallet(BitcoinGUI::DEFAULT_WALLET);"
      },
      {
        "sha": "1d3f7762ab77daf6d8346e73564a4013b1356d46",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 34,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e",
        "patch": "@@ -13,8 +13,8 @@\n #include \"openuridialog.h\"\n #include \"optionsdialog.h\"\n #include \"optionsmodel.h\"\n+#include \"platformstyle.h\"\n #include \"rpcconsole.h\"\n-#include \"scicon.h\"\n #include \"utilitydialog.h\"\n \n #ifdef ENABLE_WALLET\n@@ -60,7 +60,7 @@\n \n const QString BitcoinGUI::DEFAULT_WALLET = \"~Default\";\n \n-BitcoinGUI::BitcoinGUI(const NetworkStyle *networkStyle, QWidget *parent) :\n+BitcoinGUI::BitcoinGUI(const PlatformStyle *platformStyle, const NetworkStyle *networkStyle, QWidget *parent) :\n     QMainWindow(parent),\n     clientModel(0),\n     walletFrame(0),\n@@ -98,7 +98,8 @@ BitcoinGUI::BitcoinGUI(const NetworkStyle *networkStyle, QWidget *parent) :\n     notificator(0),\n     rpcConsole(0),\n     prevBlocks(0),\n-    spinnerFrame(0)\n+    spinnerFrame(0),\n+    platformStyle(platformStyle)\n {\n     GUIUtil::restoreWindowGeometry(\"nWindow\", QSize(850, 550), this);\n \n@@ -130,12 +131,12 @@ BitcoinGUI::BitcoinGUI(const NetworkStyle *networkStyle, QWidget *parent) :\n     setUnifiedTitleAndToolBarOnMac(true);\n #endif\n \n-    rpcConsole = new RPCConsole(0);\n+    rpcConsole = new RPCConsole(platformStyle, 0);\n #ifdef ENABLE_WALLET\n     if(enableWallet)\n     {\n         /** Create wallet frame and make it the central widget */\n-        walletFrame = new WalletFrame(this);\n+        walletFrame = new WalletFrame(platformStyle, this);\n         setCentralWidget(walletFrame);\n     } else\n #endif // ENABLE_WALLET\n@@ -175,7 +176,7 @@ BitcoinGUI::BitcoinGUI(const NetworkStyle *networkStyle, QWidget *parent) :\n     QHBoxLayout *frameBlocksLayout = new QHBoxLayout(frameBlocks);\n     frameBlocksLayout->setContentsMargins(3,0,3,0);\n     frameBlocksLayout->setSpacing(3);\n-    unitDisplayControl = new UnitDisplayStatusBarControl();\n+    unitDisplayControl = new UnitDisplayStatusBarControl(platformStyle);\n     labelEncryptionIcon = new QLabel();\n     labelConnectionsIcon = new QLabel();\n     labelBlocksIcon = new QLabel();\n@@ -247,36 +248,36 @@ void BitcoinGUI::createActions()\n {\n     QActionGroup *tabGroup = new QActionGroup(this);\n \n-    overviewAction = new QAction(SingleColorIcon(\":/icons/overview\"), tr(\"&Overview\"), this);\n+    overviewAction = new QAction(platformStyle->SingleColorIcon(\":/icons/overview\"), tr(\"&Overview\"), this);\n     overviewAction->setStatusTip(tr(\"Show general overview of wallet\"));\n     overviewAction->setToolTip(overviewAction->statusTip());\n     overviewAction->setCheckable(true);\n     overviewAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_1));\n     tabGroup->addAction(overviewAction);\n \n-    sendCoinsAction = new QAction(SingleColorIcon(\":/icons/send\"), tr(\"&Send\"), this);\n+    sendCoinsAction = new QAction(platformStyle->SingleColorIcon(\":/icons/send\"), tr(\"&Send\"), this);\n     sendCoinsAction->setStatusTip(tr(\"Send coins to a Bitcoin address\"));\n     sendCoinsAction->setToolTip(sendCoinsAction->statusTip());\n     sendCoinsAction->setCheckable(true);\n     sendCoinsAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_2));\n     tabGroup->addAction(sendCoinsAction);\n \n-    sendCoinsMenuAction = new QAction(TextColorIcon(\":/icons/send\"), sendCoinsAction->text(), this);\n+    sendCoinsMenuAction = new QAction(platformStyle->TextColorIcon(\":/icons/send\"), sendCoinsAction->text(), this);\n     sendCoinsMenuAction->setStatusTip(sendCoinsAction->statusTip());\n     sendCoinsMenuAction->setToolTip(sendCoinsMenuAction->statusTip());\n \n-    receiveCoinsAction = new QAction(SingleColorIcon(\":/icons/receiving_addresses\"), tr(\"&Receive\"), this);\n+    receiveCoinsAction = new QAction(platformStyle->SingleColorIcon(\":/icons/receiving_addresses\"), tr(\"&Receive\"), this);\n     receiveCoinsAction->setStatusTip(tr(\"Request payments (generates QR codes and bitcoin: URIs)\"));\n     receiveCoinsAction->setToolTip(receiveCoinsAction->statusTip());\n     receiveCoinsAction->setCheckable(true);\n     receiveCoinsAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_3));\n     tabGroup->addAction(receiveCoinsAction);\n \n-    receiveCoinsMenuAction = new QAction(TextColorIcon(\":/icons/receiving_addresses\"), receiveCoinsAction->text(), this);\n+    receiveCoinsMenuAction = new QAction(platformStyle->TextColorIcon(\":/icons/receiving_addresses\"), receiveCoinsAction->text(), this);\n     receiveCoinsMenuAction->setStatusTip(receiveCoinsAction->statusTip());\n     receiveCoinsMenuAction->setToolTip(receiveCoinsMenuAction->statusTip());\n \n-    historyAction = new QAction(SingleColorIcon(\":/icons/history\"), tr(\"&Transactions\"), this);\n+    historyAction = new QAction(platformStyle->SingleColorIcon(\":/icons/history\"), tr(\"&Transactions\"), this);\n     historyAction->setStatusTip(tr(\"Browse transaction history\"));\n     historyAction->setToolTip(historyAction->statusTip());\n     historyAction->setCheckable(true);\n@@ -300,46 +301,46 @@ void BitcoinGUI::createActions()\n     connect(historyAction, SIGNAL(triggered()), this, SLOT(gotoHistoryPage()));\n #endif // ENABLE_WALLET\n \n-    quitAction = new QAction(TextColorIcon(\":/icons/quit\"), tr(\"E&xit\"), this);\n+    quitAction = new QAction(platformStyle->TextColorIcon(\":/icons/quit\"), tr(\"E&xit\"), this);\n     quitAction->setStatusTip(tr(\"Quit application\"));\n     quitAction->setShortcut(QKeySequence(Qt::CTRL + Qt::Key_Q));\n     quitAction->setMenuRole(QAction::QuitRole);\n-    aboutAction = new QAction(TextColorIcon(\":/icons/about\"), tr(\"&About Bitcoin Core\"), this);\n+    aboutAction = new QAction(platformStyle->TextColorIcon(\":/icons/about\"), tr(\"&About Bitcoin Core\"), this);\n     aboutAction->setStatusTip(tr(\"Show information about Bitcoin Core\"));\n     aboutAction->setMenuRole(QAction::AboutRole);\n-    aboutQtAction = new QAction(TextColorIcon(\":/icons/about_qt\"), tr(\"About &Qt\"), this);\n+    aboutQtAction = new QAction(platformStyle->TextColorIcon(\":/icons/about_qt\"), tr(\"About &Qt\"), this);\n     aboutQtAction->setStatusTip(tr(\"Show information about Qt\"));\n     aboutQtAction->setMenuRole(QAction::AboutQtRole);\n-    optionsAction = new QAction(TextColorIcon(\":/icons/options\"), tr(\"&Options...\"), this);\n+    optionsAction = new QAction(platformStyle->TextColorIcon(\":/icons/options\"), tr(\"&Options...\"), this);\n     optionsAction->setStatusTip(tr(\"Modify configuration options for Bitcoin Core\"));\n     optionsAction->setMenuRole(QAction::PreferencesRole);\n-    toggleHideAction = new QAction(TextColorIcon(\":/icons/about\"), tr(\"&Show / Hide\"), this);\n+    toggleHideAction = new QAction(platformStyle->TextColorIcon(\":/icons/about\"), tr(\"&Show / Hide\"), this);\n     toggleHideAction->setStatusTip(tr(\"Show or hide the main Window\"));\n \n-    encryptWalletAction = new QAction(TextColorIcon(\":/icons/lock_closed\"), tr(\"&Encrypt Wallet...\"), this);\n+    encryptWalletAction = new QAction(platformStyle->TextColorIcon(\":/icons/lock_closed\"), tr(\"&Encrypt Wallet...\"), this);\n     encryptWalletAction->setStatusTip(tr(\"Encrypt the private keys that belong to your wallet\"));\n     encryptWalletAction->setCheckable(true);\n-    backupWalletAction = new QAction(TextColorIcon(\":/icons/filesave\"), tr(\"&Backup Wallet...\"), this);\n+    backupWalletAction = new QAction(platformStyle->TextColorIcon(\":/icons/filesave\"), tr(\"&Backup Wallet...\"), this);\n     backupWalletAction->setStatusTip(tr(\"Backup wallet to another location\"));\n-    changePassphraseAction = new QAction(TextColorIcon(\":/icons/key\"), tr(\"&Change Passphrase...\"), this);\n+    changePassphraseAction = new QAction(platformStyle->TextColorIcon(\":/icons/key\"), tr(\"&Change Passphrase...\"), this);\n     changePassphraseAction->setStatusTip(tr(\"Change the passphrase used for wallet encryption\"));\n-    signMessageAction = new QAction(TextColorIcon(\":/icons/edit\"), tr(\"Sign &message...\"), this);\n+    signMessageAction = new QAction(platformStyle->TextColorIcon(\":/icons/edit\"), tr(\"Sign &message...\"), this);\n     signMessageAction->setStatusTip(tr(\"Sign messages with your Bitcoin addresses to prove you own them\"));\n-    verifyMessageAction = new QAction(TextColorIcon(\":/icons/verify\"), tr(\"&Verify message...\"), this);\n+    verifyMessageAction = new QAction(platformStyle->TextColorIcon(\":/icons/verify\"), tr(\"&Verify message...\"), this);\n     verifyMessageAction->setStatusTip(tr(\"Verify messages to ensure they were signed with specified Bitcoin addresses\"));\n \n-    openRPCConsoleAction = new QAction(TextColorIcon(\":/icons/debugwindow\"), tr(\"&Debug window\"), this);\n+    openRPCConsoleAction = new QAction(platformStyle->TextColorIcon(\":/icons/debugwindow\"), tr(\"&Debug window\"), this);\n     openRPCConsoleAction->setStatusTip(tr(\"Open debugging and diagnostic console\"));\n \n-    usedSendingAddressesAction = new QAction(TextColorIcon(\":/icons/address-book\"), tr(\"&Sending addresses...\"), this);\n+    usedSendingAddressesAction = new QAction(platformStyle->TextColorIcon(\":/icons/address-book\"), tr(\"&Sending addresses...\"), this);\n     usedSendingAddressesAction->setStatusTip(tr(\"Show the list of used sending addresses and labels\"));\n-    usedReceivingAddressesAction = new QAction(TextColorIcon(\":/icons/address-book\"), tr(\"&Receiving addresses...\"), this);\n+    usedReceivingAddressesAction = new QAction(platformStyle->TextColorIcon(\":/icons/address-book\"), tr(\"&Receiving addresses...\"), this);\n     usedReceivingAddressesAction->setStatusTip(tr(\"Show the list of used receiving addresses and labels\"));\n \n-    openAction = new QAction(TextColorIcon(\":/icons/open\"), tr(\"Open &URI...\"), this);\n+    openAction = new QAction(platformStyle->TextColorIcon(\":/icons/open\"), tr(\"Open &URI...\"), this);\n     openAction->setStatusTip(tr(\"Open a bitcoin: URI or payment request\"));\n \n-    showHelpMessageAction = new QAction(TextColorIcon(\":/icons/info\"), tr(\"&Command-line options\"), this);\n+    showHelpMessageAction = new QAction(platformStyle->TextColorIcon(\":/icons/info\"), tr(\"&Command-line options\"), this);\n     showHelpMessageAction->setMenuRole(QAction::NoRole);\n     showHelpMessageAction->setStatusTip(tr(\"Show the Bitcoin Core help message to get a list with possible Bitcoin command-line options\"));\n \n@@ -650,7 +651,7 @@ void BitcoinGUI::setNumConnections(int count)\n     case 7: case 8: case 9: icon = \":/icons/connect_3\"; break;\n     default: icon = \":/icons/connect_4\"; break;\n     }\n-    labelConnectionsIcon->setPixmap(SingleColorIcon(icon).pixmap(STATUSBAR_ICONSIZE,STATUSBAR_ICONSIZE));\n+    labelConnectionsIcon->setPixmap(platformStyle->SingleColorIcon(icon).pixmap(STATUSBAR_ICONSIZE,STATUSBAR_ICONSIZE));\n     labelConnectionsIcon->setToolTip(tr(\"%n active connection(s) to Bitcoin network\", \"\", count));\n }\n \n@@ -691,7 +692,7 @@ void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate)\n     if(secs < 90*60)\n     {\n         tooltip = tr(\"Up to date\") + QString(\".<br>\") + tooltip;\n-        labelBlocksIcon->setPixmap(SingleColorIcon(\":/icons/synced\").pixmap(STATUSBAR_ICONSIZE, STATUSBAR_ICONSIZE));\n+        labelBlocksIcon->setPixmap(platformStyle->SingleColorIcon(\":/icons/synced\").pixmap(STATUSBAR_ICONSIZE, STATUSBAR_ICONSIZE));\n \n #ifdef ENABLE_WALLET\n         if(walletFrame)\n@@ -737,7 +738,7 @@ void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate)\n         tooltip = tr(\"Catching up...\") + QString(\"<br>\") + tooltip;\n         if(count != prevBlocks)\n         {\n-            labelBlocksIcon->setPixmap(SingleColorIcon(QString(\n+            labelBlocksIcon->setPixmap(platformStyle->SingleColorIcon(QString(\n                 \":/movies/spinner-%1\").arg(spinnerFrame, 3, 10, QChar('0')))\n                 .pixmap(STATUSBAR_ICONSIZE, STATUSBAR_ICONSIZE));\n             spinnerFrame = (spinnerFrame + 1) % SPINNER_FRAMES;\n@@ -931,15 +932,15 @@ void BitcoinGUI::setEncryptionStatus(int status)\n         break;\n     case WalletModel::Unlocked:\n         labelEncryptionIcon->show();\n-        labelEncryptionIcon->setPixmap(SingleColorIcon(\":/icons/lock_open\").pixmap(STATUSBAR_ICONSIZE,STATUSBAR_ICONSIZE));\n+        labelEncryptionIcon->setPixmap(platformStyle->SingleColorIcon(\":/icons/lock_open\").pixmap(STATUSBAR_ICONSIZE,STATUSBAR_ICONSIZE));\n         labelEncryptionIcon->setToolTip(tr(\"Wallet is <b>encrypted</b> and currently <b>unlocked</b>\"));\n         encryptWalletAction->setChecked(true);\n         changePassphraseAction->setEnabled(true);\n         encryptWalletAction->setEnabled(false); // TODO: decrypt currently not supported\n         break;\n     case WalletModel::Locked:\n         labelEncryptionIcon->show();\n-        labelEncryptionIcon->setPixmap(SingleColorIcon(\":/icons/lock_closed\").pixmap(STATUSBAR_ICONSIZE,STATUSBAR_ICONSIZE));\n+        labelEncryptionIcon->setPixmap(platformStyle->SingleColorIcon(\":/icons/lock_closed\").pixmap(STATUSBAR_ICONSIZE,STATUSBAR_ICONSIZE));\n         labelEncryptionIcon->setToolTip(tr(\"Wallet is <b>encrypted</b> and currently <b>locked</b>\"));\n         encryptWalletAction->setChecked(true);\n         changePassphraseAction->setEnabled(true);\n@@ -1041,7 +1042,7 @@ void BitcoinGUI::unsubscribeFromCoreSignals()\n     uiInterface.ThreadSafeMessageBox.disconnect(boost::bind(ThreadSafeMessageBox, this, _1, _2, _3));\n }\n \n-UnitDisplayStatusBarControl::UnitDisplayStatusBarControl() :\n+UnitDisplayStatusBarControl::UnitDisplayStatusBarControl(const PlatformStyle *platformStyle) :\n     optionsModel(0),\n     menu(0)\n {\n@@ -1056,7 +1057,7 @@ UnitDisplayStatusBarControl::UnitDisplayStatusBarControl() :\n     }\n     setMinimumSize(max_width, 0);\n     setAlignment(Qt::AlignRight | Qt::AlignVCenter);\n-    setStyleSheet(QString(\"QLabel { color : %1 }\").arg(SingleColor().name()));\n+    setStyleSheet(QString(\"QLabel { color : %1 }\").arg(platformStyle->SingleColor().name()));\n }\n \n /** So that it responds to button clicks */"
      },
      {
        "sha": "dd0d4bb0e20fab93a325b4c4ce0535c093ca41a2",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e",
        "patch": "@@ -22,6 +22,7 @@ class ClientModel;\n class NetworkStyle;\n class Notificator;\n class OptionsModel;\n+class PlatformStyle;\n class RPCConsole;\n class SendCoinsRecipient;\n class UnitDisplayStatusBarControl;\n@@ -47,7 +48,7 @@ class BitcoinGUI : public QMainWindow\n public:\n     static const QString DEFAULT_WALLET;\n \n-    explicit BitcoinGUI(const NetworkStyle *networkStyle, QWidget *parent = 0);\n+    explicit BitcoinGUI(const PlatformStyle *platformStyle, const NetworkStyle *networkStyle, QWidget *parent = 0);\n     ~BitcoinGUI();\n \n     /** Set the client model.\n@@ -117,6 +118,8 @@ class BitcoinGUI : public QMainWindow\n     int prevBlocks;\n     int spinnerFrame;\n \n+    const PlatformStyle *platformStyle;\n+\n     /** Create the main UI actions. */\n     void createActions();\n     /** Create the menu bar and sub-menus. */\n@@ -215,7 +218,7 @@ class UnitDisplayStatusBarControl : public QLabel\n     Q_OBJECT\n \n public:\n-    explicit UnitDisplayStatusBarControl();\n+    explicit UnitDisplayStatusBarControl(const PlatformStyle *platformStyle);\n     /** Lets the control know about the Options Model (and its signals) */\n     void setOptionsModel(OptionsModel *optionsModel);\n "
      },
      {
        "sha": "51008ad2deb51c3803b4ec1baf666d84cc5a3288",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e",
        "patch": "@@ -9,7 +9,7 @@\n #include \"bitcoinunits.h\"\n #include \"guiutil.h\"\n #include \"optionsmodel.h\"\n-#include \"scicon.h\"\n+#include \"platformstyle.h\"\n #include \"txmempool.h\"\n #include \"walletmodel.h\"\n \n@@ -35,10 +35,11 @@ QList<CAmount> CoinControlDialog::payAmounts;\n CCoinControl* CoinControlDialog::coinControl = new CCoinControl();\n bool CoinControlDialog::fSubtractFeeFromAmount = false;\n \n-CoinControlDialog::CoinControlDialog(QWidget *parent) :\n+CoinControlDialog::CoinControlDialog(const PlatformStyle *platformStyle, QWidget *parent) :\n     QDialog(parent),\n     ui(new Ui::CoinControlDialog),\n-    model(0)\n+    model(0),\n+    platformStyle(platformStyle)\n {\n     ui->setupUi(this);\n \n@@ -280,7 +281,7 @@ void CoinControlDialog::lockCoin()\n     COutPoint outpt(uint256S(contextMenuItem->text(COLUMN_TXHASH).toStdString()), contextMenuItem->text(COLUMN_VOUT_INDEX).toUInt());\n     model->lockCoin(outpt);\n     contextMenuItem->setDisabled(true);\n-    contextMenuItem->setIcon(COLUMN_CHECKBOX, SingleColorIcon(\":/icons/lock_closed\"));\n+    contextMenuItem->setIcon(COLUMN_CHECKBOX, platformStyle->SingleColorIcon(\":/icons/lock_closed\"));\n     updateLabelLocked();\n }\n \n@@ -791,7 +792,7 @@ void CoinControlDialog::updateView()\n                 COutPoint outpt(txhash, out.i);\n                 coinControl->UnSelect(outpt); // just to be sure\n                 itemOutput->setDisabled(true);\n-                itemOutput->setIcon(COLUMN_CHECKBOX, SingleColorIcon(\":/icons/lock_closed\"));\n+                itemOutput->setIcon(COLUMN_CHECKBOX, platformStyle->SingleColorIcon(\":/icons/lock_closed\"));\n             }\n \n             // set checkbox"
      },
      {
        "sha": "8ff1eac7093002afe59e7cae58c280b6b011b1f6",
        "filename": "src/qt/coincontroldialog.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/coincontroldialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/coincontroldialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.h?ref=eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e",
        "patch": "@@ -16,6 +16,7 @@\n #include <QString>\n #include <QTreeWidgetItem>\n \n+class PlatformStyle;\n class WalletModel;\n \n class CCoinControl;\n@@ -32,7 +33,7 @@ class CoinControlDialog : public QDialog\n     Q_OBJECT\n \n public:\n-    explicit CoinControlDialog(QWidget *parent = 0);\n+    explicit CoinControlDialog(const PlatformStyle *platformStyle, QWidget *parent = 0);\n     ~CoinControlDialog();\n \n     void setModel(WalletModel *model);\n@@ -57,6 +58,8 @@ class CoinControlDialog : public QDialog\n     QAction *lockAction;\n     QAction *unlockAction;\n \n+    const PlatformStyle *platformStyle;\n+\n     QString strPad(QString, int, QString);\n     void sortView(int, Qt::SortOrder);\n     void updateView();"
      },
      {
        "sha": "4ab87e0f32b04b098653a7b66070debe3a7ab2ef",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e",
        "patch": "@@ -6,7 +6,6 @@\n #include \"ui_intro.h\"\n \n #include \"guiutil.h\"\n-#include \"scicon.h\"\n \n #include \"util.h\"\n \n@@ -168,7 +167,7 @@ void Intro::pickDataDirectory()\n         /* If current default data directory does not exist, let the user choose one */\n         Intro intro;\n         intro.setDataDirectory(dataDir);\n-        intro.setWindowIcon(SingleColorIcon(\":icons/bitcoin\"));\n+        intro.setWindowIcon(QIcon(\":icons/bitcoin\"));\n \n         while(true)\n         {"
      },
      {
        "sha": "4541c75886b6f7c797900182dec08dde7f91a722",
        "filename": "src/qt/networkstyle.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/networkstyle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/networkstyle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/networkstyle.cpp?ref=eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e",
        "patch": "@@ -5,7 +5,6 @@\n #include \"networkstyle.h\"\n \n #include \"guiconstants.h\"\n-#include \"scicon.h\"\n \n #include <QApplication>\n "
      },
      {
        "sha": "a56c80ac6326ce9aaf6d90dd816e0628ab6955f0",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e",
        "patch": "@@ -10,7 +10,7 @@\n #include \"guiconstants.h\"\n #include \"guiutil.h\"\n #include \"optionsmodel.h\"\n-#include \"scicon.h\"\n+#include \"platformstyle.h\"\n #include \"transactionfilterproxy.h\"\n #include \"transactiontablemodel.h\"\n #include \"walletmodel.h\"\n@@ -25,7 +25,9 @@ class TxViewDelegate : public QAbstractItemDelegate\n {\n     Q_OBJECT\n public:\n-    TxViewDelegate(): QAbstractItemDelegate(), unit(BitcoinUnits::BTC)\n+    TxViewDelegate(const PlatformStyle *platformStyle):\n+        QAbstractItemDelegate(), unit(BitcoinUnits::BTC),\n+        platformStyle(platformStyle)\n     {\n \n     }\n@@ -43,7 +45,7 @@ class TxViewDelegate : public QAbstractItemDelegate\n         int halfheight = (mainRect.height() - 2*ypad)/2;\n         QRect amountRect(mainRect.left() + xspace, mainRect.top()+ypad, mainRect.width() - xspace, halfheight);\n         QRect addressRect(mainRect.left() + xspace, mainRect.top()+ypad+halfheight, mainRect.width() - xspace, halfheight);\n-        icon = SingleColorIcon(icon, SingleColor());\n+        icon = platformStyle->SingleColorIcon(icon);\n         icon.paint(painter, decorationRect);\n \n         QDateTime date = index.data(TransactionTableModel::DateRole).toDateTime();\n@@ -101,11 +103,12 @@ class TxViewDelegate : public QAbstractItemDelegate\n     }\n \n     int unit;\n+    const PlatformStyle *platformStyle;\n \n };\n #include \"overviewpage.moc\"\n \n-OverviewPage::OverviewPage(QWidget *parent) :\n+OverviewPage::OverviewPage(const PlatformStyle *platformStyle, QWidget *parent) :\n     QWidget(parent),\n     ui(new Ui::OverviewPage),\n     clientModel(0),\n@@ -116,13 +119,13 @@ OverviewPage::OverviewPage(QWidget *parent) :\n     currentWatchOnlyBalance(-1),\n     currentWatchUnconfBalance(-1),\n     currentWatchImmatureBalance(-1),\n-    txdelegate(new TxViewDelegate()),\n+    txdelegate(new TxViewDelegate(platformStyle)),\n     filter(0)\n {\n     ui->setupUi(this);\n \n     // use a SingleColorIcon for the \"out of sync warning\" icon\n-    QIcon icon = SingleColorIcon(\":/icons/warning\");\n+    QIcon icon = platformStyle->SingleColorIcon(\":/icons/warning\");\n     icon.addPixmap(icon.pixmap(QSize(64,64), QIcon::Normal), QIcon::Disabled); // also set the disabled icon because we are using a disabled QPushButton to work around missing HiDPI support of QLabel (https://bugreports.qt.io/browse/QTBUG-42503)\n     ui->labelTransactionsStatus->setIcon(icon);\n     ui->labelWalletStatus->setIcon(icon);"
      },
      {
        "sha": "4139eb35d369fe543e7d34716d5bdf4fbe0b2930",
        "filename": "src/qt/overviewpage.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/overviewpage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/overviewpage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.h?ref=eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e",
        "patch": "@@ -12,6 +12,7 @@\n class ClientModel;\n class TransactionFilterProxy;\n class TxViewDelegate;\n+class PlatformStyle;\n class WalletModel;\n \n namespace Ui {\n@@ -28,7 +29,7 @@ class OverviewPage : public QWidget\n     Q_OBJECT\n \n public:\n-    explicit OverviewPage(QWidget *parent = 0);\n+    explicit OverviewPage(const PlatformStyle *platformStyle, QWidget *parent = 0);\n     ~OverviewPage();\n \n     void setClientModel(ClientModel *clientModel);"
      },
      {
        "sha": "11cbc7a47c06fd9ab0e06c73d14aa3bac3e9abfa",
        "filename": "src/qt/platformstyle.cpp",
        "status": "added",
        "additions": 147,
        "deletions": 0,
        "changes": 147,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/platformstyle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/platformstyle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/platformstyle.cpp?ref=eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e",
        "patch": "@@ -0,0 +1,147 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"platformstyle.h\"\n+\n+#include \"guiconstants.h\"\n+\n+#include <QApplication>\n+#include <QColor>\n+#include <QIcon>\n+#include <QImage>\n+#include <QPalette>\n+#include <QPixmap>\n+\n+static const struct {\n+    const char *platformId;\n+    /** Show images on push buttons */\n+    const bool imagesOnButtons;\n+    /** Colorize single-color icons */\n+    const bool colorizeIcons;\n+    /** Extra padding/spacing in transactionview */\n+    const bool useExtraSpacing;\n+} platform_styles[] = {\n+    {\"macosx\", false, false, true},\n+    {\"windows\", true, false, false},\n+    /* Other: linux, unix, ... */\n+    {\"other\", true, true, false}\n+};\n+static const unsigned platform_styles_count = sizeof(platform_styles)/sizeof(*platform_styles);\n+\n+namespace {\n+/* Local functions for colorizing single-color images */\n+\n+void MakeSingleColorImage(QImage& img, const QColor& colorbase)\n+{\n+    img = img.convertToFormat(QImage::Format_ARGB32);\n+    for (int x = img.width(); x--; )\n+    {\n+        for (int y = img.height(); y--; )\n+        {\n+            const QRgb rgb = img.pixel(x, y);\n+            img.setPixel(x, y, qRgba(colorbase.red(), colorbase.green(), colorbase.blue(), qAlpha(rgb)));\n+        }\n+    }\n+}\n+\n+QIcon ColorizeIcon(const QIcon& ico, const QColor& colorbase)\n+{\n+    QIcon new_ico;\n+    QSize sz;\n+    Q_FOREACH(sz, ico.availableSizes())\n+    {\n+        QImage img(ico.pixmap(sz).toImage());\n+        MakeSingleColorImage(img, colorbase);\n+        new_ico.addPixmap(QPixmap::fromImage(img));\n+    }\n+    return new_ico;\n+}\n+\n+QImage ColorizeImage(const QString& filename, const QColor& colorbase)\n+{\n+    QImage img(filename);\n+    MakeSingleColorImage(img, colorbase);\n+    return img;\n+}\n+\n+QIcon ColorizeIcon(const QString& filename, const QColor& colorbase)\n+{\n+    return QIcon(QPixmap::fromImage(ColorizeImage(filename, colorbase)));\n+}\n+\n+}\n+\n+\n+PlatformStyle::PlatformStyle(const QString &name, bool imagesOnButtons, bool colorizeIcons, bool useExtraSpacing):\n+    name(name),\n+    imagesOnButtons(imagesOnButtons),\n+    colorizeIcons(colorizeIcons),\n+    useExtraSpacing(useExtraSpacing),\n+    singleColor(0,0,0),\n+    textColor(0,0,0)\n+{\n+    // Determine icon highlighting color\n+    if (colorizeIcons) {\n+        const QColor colorHighlightBg(QApplication::palette().color(QPalette::Highlight));\n+        const QColor colorHighlightFg(QApplication::palette().color(QPalette::HighlightedText));\n+        const QColor colorText(QApplication::palette().color(QPalette::WindowText));\n+        const int colorTextLightness = colorText.lightness();\n+        QColor colorbase;\n+        if (abs(colorHighlightBg.lightness() - colorTextLightness) < abs(colorHighlightFg.lightness() - colorTextLightness))\n+            colorbase = colorHighlightBg;\n+        else\n+            colorbase = colorHighlightFg;\n+        singleColor = colorbase;\n+    }\n+    // Determine text color\n+    textColor = QColor(QApplication::palette().color(QPalette::WindowText));\n+}\n+\n+QImage PlatformStyle::SingleColorImage(const QString& filename) const\n+{\n+    if (!colorizeIcons)\n+        return QImage(filename);\n+    return ColorizeImage(filename, SingleColor());\n+}\n+\n+QIcon PlatformStyle::SingleColorIcon(const QString& filename) const\n+{\n+    if (!colorizeIcons)\n+        return QIcon(filename);\n+    return ColorizeIcon(filename, SingleColor());\n+}\n+\n+QIcon PlatformStyle::SingleColorIcon(const QIcon& icon) const\n+{\n+    if (!colorizeIcons)\n+        return icon;\n+    return ColorizeIcon(icon, SingleColor());\n+}\n+\n+QIcon PlatformStyle::TextColorIcon(const QString& filename) const\n+{\n+    return ColorizeIcon(filename, TextColor());\n+}\n+\n+QIcon PlatformStyle::TextColorIcon(const QIcon& icon) const\n+{\n+    return ColorizeIcon(icon, TextColor());\n+}\n+\n+const PlatformStyle *PlatformStyle::instantiate(const QString &platformId)\n+{\n+    for (unsigned x=0; x<platform_styles_count; ++x)\n+    {\n+        if (platformId == platform_styles[x].platformId)\n+        {\n+            return new PlatformStyle(\n+                    platform_styles[x].platformId,\n+                    platform_styles[x].imagesOnButtons,\n+                    platform_styles[x].colorizeIcons,\n+                    platform_styles[x].useExtraSpacing);\n+        }\n+    }\n+    return 0;\n+}\n+"
      },
      {
        "sha": "4e763e760ea26a90457468106161978721ab259f",
        "filename": "src/qt/platformstyle.h",
        "status": "added",
        "additions": 55,
        "deletions": 0,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/platformstyle.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/platformstyle.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/platformstyle.h?ref=eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e",
        "patch": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_QT_PLATFORMSTYLE_H\n+#define BITCOIN_QT_PLATFORMSTYLE_H\n+\n+#include <QIcon>\n+#include <QPixmap>\n+#include <QString>\n+\n+/* Coin network-specific GUI style information */\n+class PlatformStyle\n+{\n+public:\n+    /** Get style associated with provided platform name, or 0 if not known */\n+    static const PlatformStyle *instantiate(const QString &platformId);\n+\n+    const QString &getName() const { return name; }\n+\n+    bool getImagesOnButtons() const { return imagesOnButtons; }\n+    bool getUseExtraSpacing() const { return useExtraSpacing; }\n+\n+    QColor TextColor() const { return textColor; }\n+    QColor SingleColor() const { return singleColor; }\n+\n+    /** Colorize an image (given filename) with the icon color */\n+    QImage SingleColorImage(const QString& filename) const;\n+\n+    /** Colorize an icon (given filename) with the icon color */\n+    QIcon SingleColorIcon(const QString& filename) const;\n+\n+    /** Colorize an icon (given object) with the icon color */\n+    QIcon SingleColorIcon(const QIcon& icon) const;\n+\n+    /** Colorize an icon (given filename) with the text color */\n+    QIcon TextColorIcon(const QString& filename) const;\n+\n+    /** Colorize an icon (given object) with the text color */\n+    QIcon TextColorIcon(const QIcon& icon) const;\n+\n+private:\n+    PlatformStyle(const QString &name, bool imagesOnButtons, bool colorizeIcons, bool useExtraSpacing);\n+\n+    QString name;\n+    bool imagesOnButtons;\n+    bool colorizeIcons;\n+    bool useExtraSpacing;\n+    QColor singleColor;\n+    QColor textColor;\n+    /* ... more to come later */\n+};\n+\n+#endif // BITCOIN_QT_PLATFORMSTYLE_H\n+"
      },
      {
        "sha": "7fb68cc32a20995962a3482f9b9e69158f69d18b",
        "filename": "src/qt/receivecoinsdialog.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 15,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/receivecoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/receivecoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.cpp?ref=eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e",
        "patch": "@@ -10,9 +10,9 @@\n #include \"bitcoinunits.h\"\n #include \"guiutil.h\"\n #include \"optionsmodel.h\"\n+#include \"platformstyle.h\"\n #include \"receiverequestdialog.h\"\n #include \"recentrequeststablemodel.h\"\n-#include \"scicon.h\"\n #include \"walletmodel.h\"\n \n #include <QAction>\n@@ -22,24 +22,25 @@\n #include <QScrollBar>\n #include <QTextDocument>\n \n-ReceiveCoinsDialog::ReceiveCoinsDialog(QWidget *parent) :\n+ReceiveCoinsDialog::ReceiveCoinsDialog(const PlatformStyle *platformStyle, QWidget *parent) :\n     QDialog(parent),\n     ui(new Ui::ReceiveCoinsDialog),\n-    model(0)\n+    model(0),\n+    platformStyle(platformStyle)\n {\n     ui->setupUi(this);\n \n-#ifdef Q_OS_MAC // Icons on push buttons are very uncommon on Mac\n-    ui->clearButton->setIcon(QIcon());\n-    ui->receiveButton->setIcon(QIcon());\n-    ui->showRequestButton->setIcon(QIcon());\n-    ui->removeRequestButton->setIcon(QIcon());\n-#else\n-    ui->clearButton->setIcon(SingleColorIcon(\":/icons/remove\"));\n-    ui->receiveButton->setIcon(SingleColorIcon(\":/icons/receiving_addresses\"));\n-    ui->showRequestButton->setIcon(SingleColorIcon(\":/icons/edit\"));\n-    ui->removeRequestButton->setIcon(SingleColorIcon(\":/icons/remove\"));\n-#endif\n+    if (!platformStyle->getImagesOnButtons()) {\n+        ui->clearButton->setIcon(QIcon());\n+        ui->receiveButton->setIcon(QIcon());\n+        ui->showRequestButton->setIcon(QIcon());\n+        ui->removeRequestButton->setIcon(QIcon());\n+    } else {\n+        ui->clearButton->setIcon(platformStyle->SingleColorIcon(\":/icons/remove\"));\n+        ui->receiveButton->setIcon(platformStyle->SingleColorIcon(\":/icons/receiving_addresses\"));\n+        ui->showRequestButton->setIcon(platformStyle->SingleColorIcon(\":/icons/edit\"));\n+        ui->removeRequestButton->setIcon(platformStyle->SingleColorIcon(\":/icons/remove\"));\n+    }\n \n     // context menu actions\n     QAction *copyLabelAction = new QAction(tr(\"Copy label\"), this);\n@@ -132,7 +133,7 @@ void ReceiveCoinsDialog::on_receiveButton_clicked()\n     if(ui->reuseAddress->isChecked())\n     {\n         /* Choose existing receiving address */\n-        AddressBookPage dlg(AddressBookPage::ForSelection, AddressBookPage::ReceivingTab, this);\n+        AddressBookPage dlg(platformStyle, AddressBookPage::ForSelection, AddressBookPage::ReceivingTab, this);\n         dlg.setModel(model->getAddressTableModel());\n         if(dlg.exec())\n         {"
      },
      {
        "sha": "eaaf129a91d5d34522832da4ed2b09c1e24f6d9d",
        "filename": "src/qt/receivecoinsdialog.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/receivecoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/receivecoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.h?ref=eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e",
        "patch": "@@ -16,6 +16,7 @@\n #include <QVariant>\n \n class OptionsModel;\n+class PlatformStyle;\n class WalletModel;\n \n namespace Ui {\n@@ -39,7 +40,7 @@ class ReceiveCoinsDialog : public QDialog\n         MINIMUM_COLUMN_WIDTH = 130\n     };\n \n-    explicit ReceiveCoinsDialog(QWidget *parent = 0);\n+    explicit ReceiveCoinsDialog(const PlatformStyle *platformStyle, QWidget *parent = 0);\n     ~ReceiveCoinsDialog();\n \n     void setModel(WalletModel *model);\n@@ -57,6 +58,8 @@ public Q_SLOTS:\n     GUIUtil::TableViewLastColumnResizingFixer *columnResizingFixer;\n     WalletModel *model;\n     QMenu *contextMenu;\n+    const PlatformStyle *platformStyle;\n+\n     void copyColumnToClipboard(int column);\n     virtual void resizeEvent(QResizeEvent *event);\n "
      },
      {
        "sha": "3231b392f29f2f3895d17f481b5996a06d17621b",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e",
        "patch": "@@ -8,7 +8,7 @@\n #include \"clientmodel.h\"\n #include \"guiutil.h\"\n #include \"peertablemodel.h\"\n-#include \"scicon.h\"\n+#include \"platformstyle.h\"\n \n #include \"chainparams.h\"\n #include \"rpcserver.h\"\n@@ -200,21 +200,22 @@ void RPCExecutor::request(const QString &command)\n     }\n }\n \n-RPCConsole::RPCConsole(QWidget *parent) :\n+RPCConsole::RPCConsole(const PlatformStyle *platformStyle, QWidget *parent) :\n     QWidget(parent),\n     ui(new Ui::RPCConsole),\n     clientModel(0),\n     historyPtr(0),\n     cachedNodeid(-1),\n-    contextMenu(0)\n+    contextMenu(0),\n+    platformStyle(platformStyle)\n {\n     ui->setupUi(this);\n     GUIUtil::restoreWindowGeometry(\"nRPCConsoleWindow\", this->size(), this);\n \n-#ifndef Q_OS_MAC\n-    ui->openDebugLogfileButton->setIcon(SingleColorIcon(\":/icons/export\"));\n-#endif\n-    ui->clearButton->setIcon(SingleColorIcon(\":/icons/remove\"));\n+    if (platformStyle->getImagesOnButtons()) {\n+        ui->openDebugLogfileButton->setIcon(platformStyle->SingleColorIcon(\":/icons/export\"));\n+    }\n+    ui->clearButton->setIcon(platformStyle->SingleColorIcon(\":/icons/remove\"));\n \n     // Install event filter for up and down arrow\n     ui->lineEdit->installEventFilter(this);\n@@ -363,7 +364,7 @@ void RPCConsole::clear()\n         ui->messagesWidget->document()->addResource(\n                     QTextDocument::ImageResource,\n                     QUrl(ICON_MAPPING[i].url),\n-                    SingleColorImage(ICON_MAPPING[i].source, SingleColor()).scaled(ICON_SIZE, Qt::IgnoreAspectRatio, Qt::SmoothTransformation));\n+                    platformStyle->SingleColorImage(ICON_MAPPING[i].source).scaled(ICON_SIZE, Qt::IgnoreAspectRatio, Qt::SmoothTransformation));\n     }\n \n     // Set default style sheet"
      },
      {
        "sha": "b94efee84ab1f5a0831fe3246cce255c25f2e5a7",
        "filename": "src/qt/rpcconsole.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/rpcconsole.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/rpcconsole.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.h?ref=eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e",
        "patch": "@@ -13,6 +13,7 @@\n #include <QWidget>\n \n class ClientModel;\n+class PlatformStyle;\n \n namespace Ui {\n     class RPCConsole;\n@@ -29,7 +30,7 @@ class RPCConsole: public QWidget\n     Q_OBJECT\n \n public:\n-    explicit RPCConsole(QWidget *parent);\n+    explicit RPCConsole(const PlatformStyle *platformStyle, QWidget *parent);\n     ~RPCConsole();\n \n     void setClientModel(ClientModel *model);\n@@ -106,6 +107,7 @@ public Q_SLOTS:\n     int historyPtr;\n     NodeId cachedNodeid;\n     QMenu *contextMenu;\n+    const PlatformStyle *platformStyle;\n };\n \n #endif // BITCOIN_QT_RPCCONSOLE_H"
      },
      {
        "sha": "c493b5569e03c9fae22f5acb6b7b689361227c6d",
        "filename": "src/qt/scicon.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 98,
        "changes": 98,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369d699b6221818dc9ca72eb6c0cea30eeee914/src/qt/scicon.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369d699b6221818dc9ca72eb6c0cea30eeee914/src/qt/scicon.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/scicon.cpp?ref=1369d699b6221818dc9ca72eb6c0cea30eeee914",
        "patch": "@@ -1,98 +0,0 @@\n-// Copyright (c) 2014 The Bitcoin developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include \"scicon.h\"\n-\n-#include <QApplication>\n-#include <QColor>\n-#include <QIcon>\n-#include <QImage>\n-#include <QPalette>\n-#include <QPixmap>\n-\n-namespace {\n-\n-void MakeSingleColorImage(QImage& img, const QColor& colorbase)\n-{\n-    img = img.convertToFormat(QImage::Format_ARGB32);\n-    for (int x = img.width(); x--; )\n-    {\n-        for (int y = img.height(); y--; )\n-        {\n-            const QRgb rgb = img.pixel(x, y);\n-            img.setPixel(x, y, qRgba(colorbase.red(), colorbase.green(), colorbase.blue(), qAlpha(rgb)));\n-        }\n-    }\n-}\n-\n-}\n-\n-QImage SingleColorImage(const QString& filename, const QColor& colorbase)\n-{\n-    QImage img(filename);\n-#if !defined(WIN32) && !defined(MAC_OSX)\n-    MakeSingleColorImage(img, colorbase);\n-#endif\n-    return img;\n-}\n-\n-QIcon SingleColorIcon(const QIcon& ico, const QColor& colorbase)\n-{\n-#if defined(WIN32) || defined(MAC_OSX)\n-    return ico;\n-#else\n-    QIcon new_ico;\n-    QSize sz;\n-    Q_FOREACH(sz, ico.availableSizes())\n-    {\n-        QImage img(ico.pixmap(sz).toImage());\n-        MakeSingleColorImage(img, colorbase);\n-        new_ico.addPixmap(QPixmap::fromImage(img));\n-    }\n-    return new_ico;\n-#endif\n-}\n-\n-QIcon SingleColorIcon(const QString& filename, const QColor& colorbase)\n-{\n-    return QIcon(QPixmap::fromImage(SingleColorImage(filename, colorbase)));\n-}\n-\n-QColor SingleColor()\n-{\n-#if defined(WIN32) || defined(MAC_OSX)\n-    return QColor(0,0,0);\n-#else\n-    const QColor colorHighlightBg(QApplication::palette().color(QPalette::Highlight));\n-    const QColor colorHighlightFg(QApplication::palette().color(QPalette::HighlightedText));\n-    const QColor colorText(QApplication::palette().color(QPalette::WindowText));\n-    const int colorTextLightness = colorText.lightness();\n-    QColor colorbase;\n-    if (abs(colorHighlightBg.lightness() - colorTextLightness) < abs(colorHighlightFg.lightness() - colorTextLightness))\n-        colorbase = colorHighlightBg;\n-    else\n-        colorbase = colorHighlightFg;\n-    return colorbase;\n-#endif\n-}\n-\n-QIcon SingleColorIcon(const QString& filename)\n-{\n-    return SingleColorIcon(filename, SingleColor());\n-}\n-\n-static QColor TextColor()\n-{\n-    return QColor(QApplication::palette().color(QPalette::WindowText));\n-}\n-\n-QIcon TextColorIcon(const QString& filename)\n-{\n-    return SingleColorIcon(filename, TextColor());\n-}\n-\n-QIcon TextColorIcon(const QIcon& ico)\n-{\n-    return SingleColorIcon(ico, TextColor());\n-}"
      },
      {
        "sha": "1388069ddb4c2a8fd9ccb2102aecaf93f77281d0",
        "filename": "src/qt/scicon.h",
        "status": "removed",
        "additions": 0,
        "deletions": 24,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1369d699b6221818dc9ca72eb6c0cea30eeee914/src/qt/scicon.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1369d699b6221818dc9ca72eb6c0cea30eeee914/src/qt/scicon.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/scicon.h?ref=1369d699b6221818dc9ca72eb6c0cea30eeee914",
        "patch": "@@ -1,24 +0,0 @@\n-// Copyright (c) 2014 The Bitcoin developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_QT_SCICON_H\n-#define BITCOIN_QT_SCICON_H\n-\n-#include <QtCore>\n-\n-QT_BEGIN_NAMESPACE\n-class QColor;\n-class QIcon;\n-class QString;\n-QT_END_NAMESPACE\n-\n-QImage SingleColorImage(const QString& filename, const QColor&);\n-QIcon SingleColorIcon(const QIcon&, const QColor&);\n-QIcon SingleColorIcon(const QString& filename, const QColor&);\n-QColor SingleColor();\n-QIcon SingleColorIcon(const QString& filename);\n-QIcon TextColorIcon(const QIcon&);\n-QIcon TextColorIcon(const QString& filename);\n-\n-#endif // BITCOIN_QT_SCICON_H"
      },
      {
        "sha": "449a7bc5e8838af3347ef48968345a55d23df3f7",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 14,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e",
        "patch": "@@ -11,7 +11,7 @@\n #include \"coincontroldialog.h\"\n #include \"guiutil.h\"\n #include \"optionsmodel.h\"\n-#include \"scicon.h\"\n+#include \"platformstyle.h\"\n #include \"sendcoinsentry.h\"\n #include \"walletmodel.h\"\n \n@@ -27,25 +27,26 @@\n #include <QSettings>\n #include <QTextDocument>\n \n-SendCoinsDialog::SendCoinsDialog(QWidget *parent) :\n+SendCoinsDialog::SendCoinsDialog(const PlatformStyle *platformStyle, QWidget *parent) :\n     QDialog(parent),\n     ui(new Ui::SendCoinsDialog),\n     clientModel(0),\n     model(0),\n     fNewRecipientAllowed(true),\n-    fFeeMinimized(true)\n+    fFeeMinimized(true),\n+    platformStyle(platformStyle)\n {\n     ui->setupUi(this);\n \n-#ifdef Q_OS_MAC // Icons on push buttons are very uncommon on Mac\n-    ui->addButton->setIcon(QIcon());\n-    ui->clearButton->setIcon(QIcon());\n-    ui->sendButton->setIcon(QIcon());\n-#else\n-    ui->addButton->setIcon(SingleColorIcon(\":/icons/add\"));\n-    ui->clearButton->setIcon(SingleColorIcon(\":/icons/remove\"));\n-    ui->sendButton->setIcon(SingleColorIcon(\":/icons/send\"));\n-#endif\n+    if (!platformStyle->getImagesOnButtons()) {\n+        ui->addButton->setIcon(QIcon());\n+        ui->clearButton->setIcon(QIcon());\n+        ui->sendButton->setIcon(QIcon());\n+    } else {\n+        ui->addButton->setIcon(platformStyle->SingleColorIcon(\":/icons/add\"));\n+        ui->clearButton->setIcon(platformStyle->SingleColorIcon(\":/icons/remove\"));\n+        ui->sendButton->setIcon(platformStyle->SingleColorIcon(\":/icons/send\"));\n+    }\n \n     GUIUtil::setupAddressWidget(ui->lineEditCoinControlChange, this);\n \n@@ -364,7 +365,7 @@ void SendCoinsDialog::accept()\n \n SendCoinsEntry *SendCoinsDialog::addEntry()\n {\n-    SendCoinsEntry *entry = new SendCoinsEntry(this);\n+    SendCoinsEntry *entry = new SendCoinsEntry(platformStyle, this);\n     entry->setModel(model);\n     ui->entries->addWidget(entry);\n     connect(entry, SIGNAL(removeEntry(SendCoinsEntry*)), this, SLOT(removeEntry(SendCoinsEntry*)));\n@@ -711,7 +712,7 @@ void SendCoinsDialog::coinControlFeatureChanged(bool checked)\n // Coin Control: button inputs -> show actual coin control dialog\n void SendCoinsDialog::coinControlButtonClicked()\n {\n-    CoinControlDialog dlg;\n+    CoinControlDialog dlg(platformStyle);\n     dlg.setModel(model);\n     dlg.exec();\n     coinControlUpdateLabels();"
      },
      {
        "sha": "391905ffcd7ac06d657f9af90a9efa5c56987d7c",
        "filename": "src/qt/sendcoinsdialog.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/sendcoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/sendcoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.h?ref=eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e",
        "patch": "@@ -12,6 +12,7 @@\n \n class ClientModel;\n class OptionsModel;\n+class PlatformStyle;\n class SendCoinsEntry;\n class SendCoinsRecipient;\n \n@@ -31,7 +32,7 @@ class SendCoinsDialog : public QDialog\n     Q_OBJECT\n \n public:\n-    explicit SendCoinsDialog(QWidget *parent = 0);\n+    explicit SendCoinsDialog(const PlatformStyle *platformStyle, QWidget *parent = 0);\n     ~SendCoinsDialog();\n \n     void setClientModel(ClientModel *clientModel);\n@@ -60,6 +61,7 @@ public Q_SLOTS:\n     WalletModel *model;\n     bool fNewRecipientAllowed;\n     bool fFeeMinimized;\n+    const PlatformStyle *platformStyle;\n \n     // Process WalletModel::SendCoinsReturn and generate a pair consisting\n     // of a message and message flags for use in Q_EMIT message()."
      },
      {
        "sha": "44aa8ad1af22a7aad4e42dfd51969eefef5c84ff",
        "filename": "src/qt/sendcoinsentry.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/sendcoinsentry.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/sendcoinsentry.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.cpp?ref=eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e",
        "patch": "@@ -9,30 +9,30 @@\n #include \"addresstablemodel.h\"\n #include \"guiutil.h\"\n #include \"optionsmodel.h\"\n-#include \"scicon.h\"\n+#include \"platformstyle.h\"\n #include \"walletmodel.h\"\n \n #include <QApplication>\n #include <QClipboard>\n \n-SendCoinsEntry::SendCoinsEntry(QWidget *parent) :\n+SendCoinsEntry::SendCoinsEntry(const PlatformStyle *platformStyle, QWidget *parent) :\n     QStackedWidget(parent),\n     ui(new Ui::SendCoinsEntry),\n-    model(0)\n+    model(0),\n+    platformStyle(platformStyle)\n {\n     ui->setupUi(this);\n \n-    ui->addressBookButton->setIcon(SingleColorIcon(\":/icons/address-book\"));\n-    ui->pasteButton->setIcon(SingleColorIcon(\":/icons/editpaste\"));\n-    ui->deleteButton->setIcon(SingleColorIcon(\":/icons/remove\"));\n-    ui->deleteButton_is->setIcon(SingleColorIcon(\":/icons/remove\"));\n-    ui->deleteButton_s->setIcon(SingleColorIcon(\":/icons/remove\"));\n+    ui->addressBookButton->setIcon(platformStyle->SingleColorIcon(\":/icons/address-book\"));\n+    ui->pasteButton->setIcon(platformStyle->SingleColorIcon(\":/icons/editpaste\"));\n+    ui->deleteButton->setIcon(platformStyle->SingleColorIcon(\":/icons/remove\"));\n+    ui->deleteButton_is->setIcon(platformStyle->SingleColorIcon(\":/icons/remove\"));\n+    ui->deleteButton_s->setIcon(platformStyle->SingleColorIcon(\":/icons/remove\"));\n \n     setCurrentWidget(ui->SendCoins);\n \n-#ifdef Q_OS_MAC\n-    ui->payToLayout->setSpacing(4);\n-#endif\n+    if (platformStyle->getUseExtraSpacing())\n+        ui->payToLayout->setSpacing(4);\n #if QT_VERSION >= 0x040700\n     ui->addAsLabel->setPlaceholderText(tr(\"Enter a label for this address to add it to your address book\"));\n #endif\n@@ -65,7 +65,7 @@ void SendCoinsEntry::on_addressBookButton_clicked()\n {\n     if(!model)\n         return;\n-    AddressBookPage dlg(AddressBookPage::ForSelection, AddressBookPage::SendingTab, this);\n+    AddressBookPage dlg(platformStyle, AddressBookPage::ForSelection, AddressBookPage::SendingTab, this);\n     dlg.setModel(model->getAddressTableModel());\n     if(dlg.exec())\n     {"
      },
      {
        "sha": "107ab70158c504e7674ed07eeaecae813490f38b",
        "filename": "src/qt/sendcoinsentry.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/sendcoinsentry.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/sendcoinsentry.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.h?ref=eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e",
        "patch": "@@ -10,6 +10,7 @@\n #include <QStackedWidget>\n \n class WalletModel;\n+class PlatformStyle;\n \n namespace Ui {\n     class SendCoinsEntry;\n@@ -25,7 +26,7 @@ class SendCoinsEntry : public QStackedWidget\n     Q_OBJECT\n \n public:\n-    explicit SendCoinsEntry(QWidget *parent = 0);\n+    explicit SendCoinsEntry(const PlatformStyle *platformStyle, QWidget *parent = 0);\n     ~SendCoinsEntry();\n \n     void setModel(WalletModel *model);\n@@ -64,6 +65,7 @@ private Q_SLOTS:\n     SendCoinsRecipient recipient;\n     Ui::SendCoinsEntry *ui;\n     WalletModel *model;\n+    const PlatformStyle *platformStyle;\n \n     bool updateLabel(const QString &address);\n };"
      },
      {
        "sha": "60e8e36ebe7548867b1c5eb45ac47153f5371580",
        "filename": "src/qt/signverifymessagedialog.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 13,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/signverifymessagedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/signverifymessagedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.cpp?ref=eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e",
        "patch": "@@ -7,7 +7,7 @@\n \n #include \"addressbookpage.h\"\n #include \"guiutil.h\"\n-#include \"scicon.h\"\n+#include \"platformstyle.h\"\n #include \"walletmodel.h\"\n \n #include \"base58.h\"\n@@ -20,21 +20,22 @@\n \n #include <QClipboard>\n \n-SignVerifyMessageDialog::SignVerifyMessageDialog(QWidget *parent) :\n+SignVerifyMessageDialog::SignVerifyMessageDialog(const PlatformStyle *platformStyle, QWidget *parent) :\n     QDialog(parent),\n     ui(new Ui::SignVerifyMessageDialog),\n-    model(0)\n+    model(0),\n+    platformStyle(platformStyle)\n {\n     ui->setupUi(this);\n \n-    ui->addressBookButton_SM->setIcon(SingleColorIcon(\":/icons/address-book\"));\n-    ui->pasteButton_SM->setIcon(SingleColorIcon(\":/icons/editpaste\"));\n-    ui->copySignatureButton_SM->setIcon(SingleColorIcon(\":/icons/editcopy\"));\n-    ui->signMessageButton_SM->setIcon(SingleColorIcon(\":/icons/edit\"));\n-    ui->clearButton_SM->setIcon(SingleColorIcon(\":/icons/remove\"));\n-    ui->addressBookButton_VM->setIcon(SingleColorIcon(\":/icons/address-book\"));\n-    ui->verifyMessageButton_VM->setIcon(SingleColorIcon(\":/icons/transaction_0\"));\n-    ui->clearButton_VM->setIcon(SingleColorIcon(\":/icons/remove\"));\n+    ui->addressBookButton_SM->setIcon(platformStyle->SingleColorIcon(\":/icons/address-book\"));\n+    ui->pasteButton_SM->setIcon(platformStyle->SingleColorIcon(\":/icons/editpaste\"));\n+    ui->copySignatureButton_SM->setIcon(platformStyle->SingleColorIcon(\":/icons/editcopy\"));\n+    ui->signMessageButton_SM->setIcon(platformStyle->SingleColorIcon(\":/icons/edit\"));\n+    ui->clearButton_SM->setIcon(platformStyle->SingleColorIcon(\":/icons/remove\"));\n+    ui->addressBookButton_VM->setIcon(platformStyle->SingleColorIcon(\":/icons/address-book\"));\n+    ui->verifyMessageButton_VM->setIcon(platformStyle->SingleColorIcon(\":/icons/transaction_0\"));\n+    ui->clearButton_VM->setIcon(platformStyle->SingleColorIcon(\":/icons/remove\"));\n \n #if QT_VERSION >= 0x040700\n     ui->signatureOut_SM->setPlaceholderText(tr(\"Click \\\"Sign Message\\\" to generate signature\"));\n@@ -94,7 +95,7 @@ void SignVerifyMessageDialog::on_addressBookButton_SM_clicked()\n {\n     if (model && model->getAddressTableModel())\n     {\n-        AddressBookPage dlg(AddressBookPage::ForSelection, AddressBookPage::ReceivingTab, this);\n+        AddressBookPage dlg(platformStyle, AddressBookPage::ForSelection, AddressBookPage::ReceivingTab, this);\n         dlg.setModel(model->getAddressTableModel());\n         if (dlg.exec())\n         {\n@@ -185,7 +186,7 @@ void SignVerifyMessageDialog::on_addressBookButton_VM_clicked()\n {\n     if (model && model->getAddressTableModel())\n     {\n-        AddressBookPage dlg(AddressBookPage::ForSelection, AddressBookPage::SendingTab, this);\n+        AddressBookPage dlg(platformStyle, AddressBookPage::ForSelection, AddressBookPage::SendingTab, this);\n         dlg.setModel(model->getAddressTableModel());\n         if (dlg.exec())\n         {"
      },
      {
        "sha": "d651d5049b5035dfcfee0e96b1d54148a6e43357",
        "filename": "src/qt/signverifymessagedialog.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/signverifymessagedialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/signverifymessagedialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.h?ref=eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e",
        "patch": "@@ -7,6 +7,7 @@\n \n #include <QDialog>\n \n+class PlatformStyle;\n class WalletModel;\n \n namespace Ui {\n@@ -18,7 +19,7 @@ class SignVerifyMessageDialog : public QDialog\n     Q_OBJECT\n \n public:\n-    explicit SignVerifyMessageDialog(QWidget *parent);\n+    explicit SignVerifyMessageDialog(const PlatformStyle *platformStyle, QWidget *parent);\n     ~SignVerifyMessageDialog();\n \n     void setModel(WalletModel *model);\n@@ -34,6 +35,7 @@ class SignVerifyMessageDialog : public QDialog\n private:\n     Ui::SignVerifyMessageDialog *ui;\n     WalletModel *model;\n+    const PlatformStyle *platformStyle;\n \n private Q_SLOTS:\n     /* sign message */"
      },
      {
        "sha": "98ad1a44b68fac46ac109e223a49d9dbc23bafe2",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e",
        "patch": "@@ -8,7 +8,7 @@\n #include \"guiconstants.h\"\n #include \"guiutil.h\"\n #include \"optionsmodel.h\"\n-#include \"scicon.h\"\n+#include \"platformstyle.h\"\n #include \"transactiondesc.h\"\n #include \"transactionrecord.h\"\n #include \"walletmodel.h\"\n@@ -222,12 +222,13 @@ class TransactionTablePriv\n     }\n };\n \n-TransactionTableModel::TransactionTableModel(CWallet* wallet, WalletModel *parent):\n+TransactionTableModel::TransactionTableModel(const PlatformStyle *platformStyle, CWallet* wallet, WalletModel *parent):\n         QAbstractTableModel(parent),\n         wallet(wallet),\n         walletModel(parent),\n         priv(new TransactionTablePriv(wallet, this)),\n-        fProcessingQueuedTransactions(false)\n+        fProcessingQueuedTransactions(false),\n+        platformStyle(platformStyle)\n {\n     columns << QString() << QString() << tr(\"Date\") << tr(\"Type\") << tr(\"Label\") << BitcoinUnits::getAmountColumnTitle(walletModel->getOptionsModel()->getDisplayUnit());\n     priv->refreshWallet();\n@@ -521,7 +522,7 @@ QVariant TransactionTableModel::data(const QModelIndex &index, int role) const\n     case Qt::DecorationRole:\n     {\n         QIcon icon = qvariant_cast<QIcon>(index.data(RawDecorationRole));\n-        return TextColorIcon(icon);\n+        return platformStyle->TextColorIcon(icon);\n     }\n     case Qt::DisplayRole:\n         switch(index.column())"
      },
      {
        "sha": "2089f703a66af616145a9e73e1c8d129d7466449",
        "filename": "src/qt/transactiontablemodel.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/transactiontablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/transactiontablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.h?ref=eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e",
        "patch": "@@ -10,6 +10,7 @@\n #include <QAbstractTableModel>\n #include <QStringList>\n \n+class PlatformStyle;\n class TransactionRecord;\n class TransactionTablePriv;\n class WalletModel;\n@@ -23,7 +24,7 @@ class TransactionTableModel : public QAbstractTableModel\n     Q_OBJECT\n \n public:\n-    explicit TransactionTableModel(CWallet* wallet, WalletModel *parent = 0);\n+    explicit TransactionTableModel(const PlatformStyle *platformStyle, CWallet* wallet, WalletModel *parent = 0);\n     ~TransactionTableModel();\n \n     enum ColumnIndex {\n@@ -82,6 +83,7 @@ class TransactionTableModel : public QAbstractTableModel\n     QStringList columns;\n     TransactionTablePriv *priv;\n     bool fProcessingQueuedTransactions;\n+    const PlatformStyle *platformStyle;\n \n     void subscribeToCoreSignals();\n     void unsubscribeFromCoreSignals();"
      },
      {
        "sha": "54e5a82720336cf47346f3eed8f34a8914fc8915",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 31,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e",
        "patch": "@@ -10,7 +10,7 @@\n #include \"editaddressdialog.h\"\n #include \"guiutil.h\"\n #include \"optionsmodel.h\"\n-#include \"scicon.h\"\n+#include \"platformstyle.h\"\n #include \"transactiondescdialog.h\"\n #include \"transactionfilterproxy.h\"\n #include \"transactionrecord.h\"\n@@ -35,7 +35,7 @@\n #include <QUrl>\n #include <QVBoxLayout>\n \n-TransactionView::TransactionView(QWidget *parent) :\n+TransactionView::TransactionView(const PlatformStyle *platformStyle, QWidget *parent) :\n     QWidget(parent), model(0), transactionProxyModel(0),\n     transactionView(0)\n {\n@@ -44,27 +44,28 @@ TransactionView::TransactionView(QWidget *parent) :\n \n     QHBoxLayout *hlayout = new QHBoxLayout();\n     hlayout->setContentsMargins(0,0,0,0);\n-#ifdef Q_OS_MAC\n-    hlayout->setSpacing(5);\n-    hlayout->addSpacing(26);\n-#else\n-    hlayout->setSpacing(0);\n-    hlayout->addSpacing(23);\n-#endif\n+\n+    if (platformStyle->getUseExtraSpacing()) {\n+        hlayout->setSpacing(5);\n+        hlayout->addSpacing(26);\n+    } else {\n+        hlayout->setSpacing(0);\n+        hlayout->addSpacing(23);\n+    }\n \n     watchOnlyWidget = new QComboBox(this);\n     watchOnlyWidget->setFixedWidth(24);\n     watchOnlyWidget->addItem(\"\", TransactionFilterProxy::WatchOnlyFilter_All);\n-    watchOnlyWidget->addItem(SingleColorIcon(\":/icons/eye_plus\"), \"\", TransactionFilterProxy::WatchOnlyFilter_Yes);\n-    watchOnlyWidget->addItem(SingleColorIcon(\":/icons/eye_minus\"), \"\", TransactionFilterProxy::WatchOnlyFilter_No);\n+    watchOnlyWidget->addItem(platformStyle->SingleColorIcon(\":/icons/eye_plus\"), \"\", TransactionFilterProxy::WatchOnlyFilter_Yes);\n+    watchOnlyWidget->addItem(platformStyle->SingleColorIcon(\":/icons/eye_minus\"), \"\", TransactionFilterProxy::WatchOnlyFilter_No);\n     hlayout->addWidget(watchOnlyWidget);\n \n     dateWidget = new QComboBox(this);\n-#ifdef Q_OS_MAC\n-    dateWidget->setFixedWidth(121);\n-#else\n-    dateWidget->setFixedWidth(120);\n-#endif\n+    if (platformStyle->getUseExtraSpacing()) {\n+        dateWidget->setFixedWidth(121);\n+    } else {\n+        dateWidget->setFixedWidth(120);\n+    }\n     dateWidget->addItem(tr(\"All\"), All);\n     dateWidget->addItem(tr(\"Today\"), Today);\n     dateWidget->addItem(tr(\"This week\"), ThisWeek);\n@@ -75,11 +76,11 @@ TransactionView::TransactionView(QWidget *parent) :\n     hlayout->addWidget(dateWidget);\n \n     typeWidget = new QComboBox(this);\n-#ifdef Q_OS_MAC\n-    typeWidget->setFixedWidth(121);\n-#else\n-    typeWidget->setFixedWidth(120);\n-#endif\n+    if (platformStyle->getUseExtraSpacing()) {\n+        typeWidget->setFixedWidth(121);\n+    } else {\n+        typeWidget->setFixedWidth(120);\n+    }\n \n     typeWidget->addItem(tr(\"All\"), TransactionFilterProxy::ALL_TYPES);\n     typeWidget->addItem(tr(\"Received with\"), TransactionFilterProxy::TYPE(TransactionRecord::RecvWithAddress) |\n@@ -102,11 +103,11 @@ TransactionView::TransactionView(QWidget *parent) :\n #if QT_VERSION >= 0x040700\n     amountWidget->setPlaceholderText(tr(\"Min amount\"));\n #endif\n-#ifdef Q_OS_MAC\n-    amountWidget->setFixedWidth(97);\n-#else\n-    amountWidget->setFixedWidth(100);\n-#endif\n+    if (platformStyle->getUseExtraSpacing()) {\n+        amountWidget->setFixedWidth(97);\n+    } else {\n+        amountWidget->setFixedWidth(100);\n+    }\n     amountWidget->setValidator(new QDoubleValidator(0, 1e20, 8, this));\n     hlayout->addWidget(amountWidget);\n \n@@ -121,11 +122,11 @@ TransactionView::TransactionView(QWidget *parent) :\n     vlayout->setSpacing(0);\n     int width = view->verticalScrollBar()->sizeHint().width();\n     // Cover scroll bar width with spacing\n-#ifdef Q_OS_MAC\n-    hlayout->addSpacing(width+2);\n-#else\n-    hlayout->addSpacing(width);\n-#endif\n+    if (platformStyle->getUseExtraSpacing()) {\n+        hlayout->addSpacing(width+2);\n+    } else {\n+        hlayout->addSpacing(width);\n+    }\n     // Always show scroll bar\n     view->setVerticalScrollBarPolicy(Qt::ScrollBarAlwaysOn);\n     view->setTabKeyNavigation(false);"
      },
      {
        "sha": "ac157fb98d86cbbe5199c1daba02241ea11b5b2d",
        "filename": "src/qt/transactionview.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/transactionview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/transactionview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.h?ref=eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e",
        "patch": "@@ -10,6 +10,7 @@\n #include <QWidget>\n #include <QKeyEvent>\n \n+class PlatformStyle;\n class TransactionFilterProxy;\n class WalletModel;\n \n@@ -32,7 +33,7 @@ class TransactionView : public QWidget\n     Q_OBJECT\n \n public:\n-    explicit TransactionView(QWidget *parent = 0);\n+    explicit TransactionView(const PlatformStyle *platformStyle, QWidget *parent = 0);\n \n     void setModel(WalletModel *model);\n "
      },
      {
        "sha": "ba8c28464d7f5654b61dd2f790b915cd60a9dee9",
        "filename": "src/qt/walletframe.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/walletframe.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/walletframe.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletframe.cpp?ref=eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e",
        "patch": "@@ -12,9 +12,10 @@\n #include <QHBoxLayout>\n #include <QLabel>\n \n-WalletFrame::WalletFrame(BitcoinGUI *_gui) :\n+WalletFrame::WalletFrame(const PlatformStyle *platformStyle, BitcoinGUI *_gui) :\n     QFrame(_gui),\n-    gui(_gui)\n+    gui(_gui),\n+    platformStyle(platformStyle)\n {\n     // Leave HBox hook for adding a list view later\n     QHBoxLayout *walletFrameLayout = new QHBoxLayout(this);\n@@ -42,7 +43,7 @@ bool WalletFrame::addWallet(const QString& name, WalletModel *walletModel)\n     if (!gui || !clientModel || !walletModel || mapWalletViews.count(name) > 0)\n         return false;\n \n-    WalletView *walletView = new WalletView(this);\n+    WalletView *walletView = new WalletView(platformStyle, this);\n     walletView->setBitcoinGUI(gui);\n     walletView->setClientModel(clientModel);\n     walletView->setWalletModel(walletModel);"
      },
      {
        "sha": "9a56e97f9cfe9eb5c0e557d5189fda98c0949622",
        "filename": "src/qt/walletframe.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/walletframe.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/walletframe.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletframe.h?ref=eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e",
        "patch": "@@ -10,6 +10,7 @@\n \n class BitcoinGUI;\n class ClientModel;\n+class PlatformStyle;\n class SendCoinsRecipient;\n class WalletModel;\n class WalletView;\n@@ -23,7 +24,7 @@ class WalletFrame : public QFrame\n     Q_OBJECT\n \n public:\n-    explicit WalletFrame(BitcoinGUI *_gui = 0);\n+    explicit WalletFrame(const PlatformStyle *platformStyle, BitcoinGUI *_gui = 0);\n     ~WalletFrame();\n \n     void setClientModel(ClientModel *clientModel);\n@@ -45,6 +46,8 @@ class WalletFrame : public QFrame\n \n     bool bOutOfSync;\n \n+    const PlatformStyle *platformStyle;\n+\n     WalletView *currentWalletView();\n \n public Q_SLOTS:"
      },
      {
        "sha": "f580853732cb76d3bf022ba316d11026c6c7a5a4",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e",
        "patch": "@@ -27,7 +27,7 @@\n \n #include <boost/foreach.hpp>\n \n-WalletModel::WalletModel(CWallet *wallet, OptionsModel *optionsModel, QObject *parent) :\n+WalletModel::WalletModel(const PlatformStyle *platformStyle, CWallet *wallet, OptionsModel *optionsModel, QObject *parent) :\n     QObject(parent), wallet(wallet), optionsModel(optionsModel), addressTableModel(0),\n     transactionTableModel(0),\n     recentRequestsTableModel(0),\n@@ -39,7 +39,7 @@ WalletModel::WalletModel(CWallet *wallet, OptionsModel *optionsModel, QObject *p\n     fForceCheckBalanceChanged = false;\n \n     addressTableModel = new AddressTableModel(wallet, this);\n-    transactionTableModel = new TransactionTableModel(wallet, this);\n+    transactionTableModel = new TransactionTableModel(platformStyle, wallet, this);\n     recentRequestsTableModel = new RecentRequestsTableModel(wallet, this);\n \n     // This timer will be fired repeatedly to update the balance"
      },
      {
        "sha": "c29682e4f67a21c89525990960bb060530829219",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e",
        "patch": "@@ -17,6 +17,7 @@\n \n class AddressTableModel;\n class OptionsModel;\n+class PlatformStyle;\n class RecentRequestsTableModel;\n class TransactionTableModel;\n class WalletModelTransaction;\n@@ -100,7 +101,7 @@ class WalletModel : public QObject\n     Q_OBJECT\n \n public:\n-    explicit WalletModel(CWallet *wallet, OptionsModel *optionsModel, QObject *parent = 0);\n+    explicit WalletModel(const PlatformStyle *platformStyle, CWallet *wallet, OptionsModel *optionsModel, QObject *parent = 0);\n     ~WalletModel();\n \n     enum StatusCode // Returned by sendCoins"
      },
      {
        "sha": "fa96f62e033e17bfe76fd64bd76cb352a0e64c0f",
        "filename": "src/qt/walletview.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 14,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/walletview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/walletview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.cpp?ref=eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e",
        "patch": "@@ -11,8 +11,8 @@\n #include \"guiutil.h\"\n #include \"optionsmodel.h\"\n #include \"overviewpage.h\"\n+#include \"platformstyle.h\"\n #include \"receivecoinsdialog.h\"\n-#include \"scicon.h\"\n #include \"sendcoinsdialog.h\"\n #include \"signverifymessagedialog.h\"\n #include \"transactiontablemodel.h\"\n@@ -29,31 +29,32 @@\n #include <QPushButton>\n #include <QVBoxLayout>\n \n-WalletView::WalletView(QWidget *parent):\n+WalletView::WalletView(const PlatformStyle *platformStyle, QWidget *parent):\n     QStackedWidget(parent),\n     clientModel(0),\n-    walletModel(0)\n+    walletModel(0),\n+    platformStyle(platformStyle)\n {\n     // Create tabs\n-    overviewPage = new OverviewPage();\n+    overviewPage = new OverviewPage(platformStyle);\n \n     transactionsPage = new QWidget(this);\n     QVBoxLayout *vbox = new QVBoxLayout();\n     QHBoxLayout *hbox_buttons = new QHBoxLayout();\n-    transactionView = new TransactionView(this);\n+    transactionView = new TransactionView(platformStyle, this);\n     vbox->addWidget(transactionView);\n     QPushButton *exportButton = new QPushButton(tr(\"&Export\"), this);\n     exportButton->setToolTip(tr(\"Export the data in the current tab to a file\"));\n-#ifndef Q_OS_MAC // Icons on push buttons are very uncommon on Mac\n-    exportButton->setIcon(SingleColorIcon(\":/icons/export\"));\n-#endif\n+    if (platformStyle->getImagesOnButtons()) {\n+        exportButton->setIcon(platformStyle->SingleColorIcon(\":/icons/export\"));\n+    }\n     hbox_buttons->addStretch();\n     hbox_buttons->addWidget(exportButton);\n     vbox->addLayout(hbox_buttons);\n     transactionsPage->setLayout(vbox);\n \n-    receiveCoinsPage = new ReceiveCoinsDialog();\n-    sendCoinsPage = new SendCoinsDialog();\n+    receiveCoinsPage = new ReceiveCoinsDialog(platformStyle);\n+    sendCoinsPage = new SendCoinsDialog(platformStyle);\n \n     addWidget(overviewPage);\n     addWidget(transactionsPage);\n@@ -182,7 +183,7 @@ void WalletView::gotoSendCoinsPage(QString addr)\n void WalletView::gotoSignMessageTab(QString addr)\n {\n     // calls show() in showTab_SM()\n-    SignVerifyMessageDialog *signVerifyMessageDialog = new SignVerifyMessageDialog(this);\n+    SignVerifyMessageDialog *signVerifyMessageDialog = new SignVerifyMessageDialog(platformStyle, this);\n     signVerifyMessageDialog->setAttribute(Qt::WA_DeleteOnClose);\n     signVerifyMessageDialog->setModel(walletModel);\n     signVerifyMessageDialog->showTab_SM(true);\n@@ -194,7 +195,7 @@ void WalletView::gotoSignMessageTab(QString addr)\n void WalletView::gotoVerifyMessageTab(QString addr)\n {\n     // calls show() in showTab_VM()\n-    SignVerifyMessageDialog *signVerifyMessageDialog = new SignVerifyMessageDialog(this);\n+    SignVerifyMessageDialog *signVerifyMessageDialog = new SignVerifyMessageDialog(platformStyle, this);\n     signVerifyMessageDialog->setAttribute(Qt::WA_DeleteOnClose);\n     signVerifyMessageDialog->setModel(walletModel);\n     signVerifyMessageDialog->showTab_VM(true);\n@@ -272,7 +273,7 @@ void WalletView::usedSendingAddresses()\n {\n     if(!walletModel)\n         return;\n-    AddressBookPage *dlg = new AddressBookPage(AddressBookPage::ForEditing, AddressBookPage::SendingTab, this);\n+    AddressBookPage *dlg = new AddressBookPage(platformStyle, AddressBookPage::ForEditing, AddressBookPage::SendingTab, this);\n     dlg->setAttribute(Qt::WA_DeleteOnClose);\n     dlg->setModel(walletModel->getAddressTableModel());\n     dlg->show();\n@@ -282,7 +283,7 @@ void WalletView::usedReceivingAddresses()\n {\n     if(!walletModel)\n         return;\n-    AddressBookPage *dlg = new AddressBookPage(AddressBookPage::ForEditing, AddressBookPage::ReceivingTab, this);\n+    AddressBookPage *dlg = new AddressBookPage(platformStyle, AddressBookPage::ForEditing, AddressBookPage::ReceivingTab, this);\n     dlg->setAttribute(Qt::WA_DeleteOnClose);\n     dlg->setModel(walletModel->getAddressTableModel());\n     dlg->show();"
      },
      {
        "sha": "f97cf1ee807778c01eed5c8176a287190be191cd",
        "filename": "src/qt/walletview.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/walletview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e/src/qt/walletview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.h?ref=eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e",
        "patch": "@@ -12,6 +12,7 @@\n class BitcoinGUI;\n class ClientModel;\n class OverviewPage;\n+class PlatformStyle;\n class ReceiveCoinsDialog;\n class SendCoinsDialog;\n class SendCoinsRecipient;\n@@ -34,7 +35,7 @@ class WalletView : public QStackedWidget\n     Q_OBJECT\n \n public:\n-    explicit WalletView(QWidget *parent);\n+    explicit WalletView(const PlatformStyle *platformStyle, QWidget *parent);\n     ~WalletView();\n \n     void setBitcoinGUI(BitcoinGUI *gui);\n@@ -64,6 +65,7 @@ class WalletView : public QStackedWidget\n     TransactionView *transactionView;\n \n     QProgressDialog *progressDialog;\n+    const PlatformStyle *platformStyle;\n \n public Q_SLOTS:\n     /** Switch to overview (home) page */"
      }
    ]
  },
  {
    "sha": "9848d4297be9818578c8e0cac6e614e2a8a33a4d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ODQ4ZDQyOTdiZTk4MTg1NzhjOGUwY2FjNmU2MTRlMmE4YTMzYTRk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-31T08:01:30Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-31T08:06:49Z"
      },
      "message": "Merge pull request #6487\n\neec7757 qt: Introduce PlatformStyle (Wladimir J. van der Laan)",
      "tree": {
        "sha": "2943d7fcf9ce3df2c31c6e001812b5d2a6500713",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2943d7fcf9ce3df2c31c6e001812b5d2a6500713"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9848d4297be9818578c8e0cac6e614e2a8a33a4d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVuyyZAAoJEHSBCwEjRsmm1XMH/3Z9cKu9EsRXYvx+hcydVbUc\nrL5catKIQ34ctHyUej8VHpy60J1aNxgIRXeRqcMQUJr5c+0fOTq2SxzGHi+IjccR\nlD7j9BIY8j6NAeXFWeCFMs8ydqtrAI2giC7hTFcPMpF2A6dUSMNkHQukJLng53gr\nQDgpE7TkOyKG+0SFoKRA61efqiMrJx2q/+H3Y6lXJDL6Nss0YdeAA2WQKIjX2I8A\nA5yE3NPPxOJ1IVM802q7Az8Kb1UT7NsVFSGI1pekpzRfa3JPmGyvfhBvz2og5oKb\nV7SHJ4uXPrw+vp7+ZAFqcq+JeVa7z8KpJR5yot62pEv/UROMmlKZserRSmT9MK8=\n=WqAm\n-----END PGP SIGNATURE-----",
        "payload": "tree 2943d7fcf9ce3df2c31c6e001812b5d2a6500713\nparent 675d2feffa84a6ffeabac32aeed37f6a7f74bee3\nparent eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1438329690 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1438330009 +0200\n\nMerge pull request #6487\n\neec7757 qt: Introduce PlatformStyle (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9848d4297be9818578c8e0cac6e614e2a8a33a4d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9848d4297be9818578c8e0cac6e614e2a8a33a4d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9848d4297be9818578c8e0cac6e614e2a8a33a4d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "675d2feffa84a6ffeabac32aeed37f6a7f74bee3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/675d2feffa84a6ffeabac32aeed37f6a7f74bee3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/675d2feffa84a6ffeabac32aeed37f6a7f74bee3"
      },
      {
        "sha": "eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eec77574459dcbd8d59d8dbd35125eb1e3ec1a2e"
      }
    ],
    "stats": {
      "total": 780,
      "additions": 462,
      "deletions": 318
    },
    "files": [
      {
        "sha": "748f2b14d53a6276e775c3f47a85020d30f6d99e",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=9848d4297be9818578c8e0cac6e614e2a8a33a4d",
        "patch": "@@ -185,13 +185,13 @@ BITCOIN_QT_H = \\\n   qt/paymentrequestplus.h \\\n   qt/paymentserver.h \\\n   qt/peertablemodel.h \\\n+  qt/platformstyle.h \\\n   qt/qvalidatedlineedit.h \\\n   qt/qvaluecombobox.h \\\n   qt/receivecoinsdialog.h \\\n   qt/receiverequestdialog.h \\\n   qt/recentrequeststablemodel.h \\\n   qt/rpcconsole.h \\\n-  qt/scicon.h \\\n   qt/sendcoinsdialog.h \\\n   qt/sendcoinsentry.h \\\n   qt/signverifymessagedialog.h \\\n@@ -273,10 +273,10 @@ BITCOIN_QT_CPP = \\\n   qt/optionsdialog.cpp \\\n   qt/optionsmodel.cpp \\\n   qt/peertablemodel.cpp \\\n+  qt/platformstyle.cpp \\\n   qt/qvalidatedlineedit.cpp \\\n   qt/qvaluecombobox.cpp \\\n   qt/rpcconsole.cpp \\\n-  qt/scicon.cpp \\\n   qt/splashscreen.cpp \\\n   qt/trafficgraphwidget.cpp \\\n   qt/utilitydialog.cpp"
      },
      {
        "sha": "a03571c31ac55a978a46fb9a8a7cf99194711b25",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=9848d4297be9818578c8e0cac6e614e2a8a33a4d",
        "patch": "@@ -441,6 +441,9 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-min\", _(\"Start minimized\"));\n         strUsage += HelpMessageOpt(\"-rootcertificates=<file>\", _(\"Set SSL root certificates for payment request (default: -system-)\"));\n         strUsage += HelpMessageOpt(\"-splash\", _(\"Show splash screen on startup (default: 1)\"));\n+        if (showDebug) {\n+            strUsage += HelpMessageOpt(\"-uiplatform\", \"Select platform to customize UI for (one of windows, macosx, other; default: platform compiled on)\");\n+        }\n     }\n \n     return strUsage;"
      },
      {
        "sha": "8bd158644604fc3c09b296701fdc1118f1e49c10",
        "filename": "src/qt/addressbookpage.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/addressbookpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/addressbookpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.cpp?ref=9848d4297be9818578c8e0cac6e614e2a8a33a4d",
        "patch": "@@ -14,14 +14,14 @@\n #include \"csvmodelwriter.h\"\n #include \"editaddressdialog.h\"\n #include \"guiutil.h\"\n-#include \"scicon.h\"\n+#include \"platformstyle.h\"\n \n #include <QIcon>\n #include <QMenu>\n #include <QMessageBox>\n #include <QSortFilterProxyModel>\n \n-AddressBookPage::AddressBookPage(Mode mode, Tabs tab, QWidget *parent) :\n+AddressBookPage::AddressBookPage(const PlatformStyle *platformStyle, Mode mode, Tabs tab, QWidget *parent) :\n     QDialog(parent),\n     ui(new Ui::AddressBookPage),\n     model(0),\n@@ -30,17 +30,17 @@ AddressBookPage::AddressBookPage(Mode mode, Tabs tab, QWidget *parent) :\n {\n     ui->setupUi(this);\n \n-#ifdef Q_OS_MAC // Icons on push buttons are very uncommon on Mac\n-    ui->newAddress->setIcon(QIcon());\n-    ui->copyAddress->setIcon(QIcon());\n-    ui->deleteAddress->setIcon(QIcon());\n-    ui->exportButton->setIcon(QIcon());\n-#else\n-    ui->newAddress->setIcon(SingleColorIcon(\":/icons/add\"));\n-    ui->copyAddress->setIcon(SingleColorIcon(\":/icons/editcopy\"));\n-    ui->deleteAddress->setIcon(SingleColorIcon(\":/icons/remove\"));\n-    ui->exportButton->setIcon(SingleColorIcon(\":/icons/export\"));\n-#endif\n+    if (!platformStyle->getImagesOnButtons()) {\n+        ui->newAddress->setIcon(QIcon());\n+        ui->copyAddress->setIcon(QIcon());\n+        ui->deleteAddress->setIcon(QIcon());\n+        ui->exportButton->setIcon(QIcon());\n+    } else {\n+        ui->newAddress->setIcon(platformStyle->SingleColorIcon(\":/icons/add\"));\n+        ui->copyAddress->setIcon(platformStyle->SingleColorIcon(\":/icons/editcopy\"));\n+        ui->deleteAddress->setIcon(platformStyle->SingleColorIcon(\":/icons/remove\"));\n+        ui->exportButton->setIcon(platformStyle->SingleColorIcon(\":/icons/export\"));\n+    }\n \n     switch(mode)\n     {"
      },
      {
        "sha": "92e6cab9acbc9372f4c3ec7953d9bc6b454ced1c",
        "filename": "src/qt/addressbookpage.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/addressbookpage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/addressbookpage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.h?ref=9848d4297be9818578c8e0cac6e614e2a8a33a4d",
        "patch": "@@ -9,6 +9,7 @@\n \n class AddressTableModel;\n class OptionsModel;\n+class PlatformStyle;\n \n namespace Ui {\n     class AddressBookPage;\n@@ -39,7 +40,7 @@ class AddressBookPage : public QDialog\n         ForEditing  /**< Open address book for editing */\n     };\n \n-    explicit AddressBookPage(Mode mode, Tabs tab, QWidget *parent);\n+    explicit AddressBookPage(const PlatformStyle *platformStyle, Mode mode, Tabs tab, QWidget *parent);\n     ~AddressBookPage();\n \n     void setModel(AddressTableModel *model);"
      },
      {
        "sha": "1da2d3e34411669f4c6127d62fbb6246324f8895",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 2,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=9848d4297be9818578c8e0cac6e614e2a8a33a4d",
        "patch": "@@ -15,6 +15,7 @@\n #include \"intro.h\"\n #include \"networkstyle.h\"\n #include \"optionsmodel.h\"\n+#include \"platformstyle.h\"\n #include \"splashscreen.h\"\n #include \"utilitydialog.h\"\n #include \"winshutdownmonitor.h\"\n@@ -241,6 +242,7 @@ public Q_SLOTS:\n     WalletModel *walletModel;\n #endif\n     int returnValue;\n+    const PlatformStyle *platformStyle;\n \n     void startThread();\n };\n@@ -310,6 +312,22 @@ BitcoinApplication::BitcoinApplication(int &argc, char **argv):\n     returnValue(0)\n {\n     setQuitOnLastWindowClosed(false);\n+\n+    // UI per-platform customization\n+    // This must be done inside the BitcoinApplication constructor, or after it, because\n+    // PlatformStyle::instantiate requires a QApplication\n+#if defined(Q_OS_MAC)\n+    std::string platformName = \"macosx\";\n+#elif defined(Q_OS_WIN)\n+    std::string platformName = \"windows\";\n+#else\n+    std::string platformName = \"other\";\n+#endif\n+    platformName = GetArg(\"-uiplatform\", platformName);\n+    platformStyle = PlatformStyle::instantiate(QString::fromStdString(platformName));\n+    if (!platformStyle) // Fall back to \"other\" if specified name not found\n+        platformStyle = PlatformStyle::instantiate(\"other\");\n+    assert(platformStyle);\n }\n \n BitcoinApplication::~BitcoinApplication()\n@@ -330,6 +348,8 @@ BitcoinApplication::~BitcoinApplication()\n #endif\n     delete optionsModel;\n     optionsModel = 0;\n+    delete platformStyle;\n+    platformStyle = 0;\n }\n \n #ifdef ENABLE_WALLET\n@@ -346,7 +366,7 @@ void BitcoinApplication::createOptionsModel()\n \n void BitcoinApplication::createWindow(const NetworkStyle *networkStyle)\n {\n-    window = new BitcoinGUI(networkStyle, 0);\n+    window = new BitcoinGUI(platformStyle, networkStyle, 0);\n \n     pollShutdownTimer = new QTimer(window);\n     connect(pollShutdownTimer, SIGNAL(timeout()), window, SLOT(detectShutdown()));\n@@ -421,6 +441,8 @@ void BitcoinApplication::initializeResult(int retval)\n     returnValue = retval ? 0 : 1;\n     if(retval)\n     {\n+        // Log this only after AppInit2 finishes, as then logging setup is guaranteed complete\n+        qWarning() << \"Platform customization:\" << platformStyle->getName();\n #ifdef ENABLE_WALLET\n         PaymentServer::LoadRootCAs();\n         paymentServer->setOptionsModel(optionsModel);\n@@ -432,7 +454,7 @@ void BitcoinApplication::initializeResult(int retval)\n #ifdef ENABLE_WALLET\n         if(pwalletMain)\n         {\n-            walletModel = new WalletModel(pwalletMain, optionsModel);\n+            walletModel = new WalletModel(platformStyle, pwalletMain, optionsModel);\n \n             window->addWallet(BitcoinGUI::DEFAULT_WALLET, walletModel);\n             window->setCurrentWallet(BitcoinGUI::DEFAULT_WALLET);"
      },
      {
        "sha": "1d3f7762ab77daf6d8346e73564a4013b1356d46",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 34,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=9848d4297be9818578c8e0cac6e614e2a8a33a4d",
        "patch": "@@ -13,8 +13,8 @@\n #include \"openuridialog.h\"\n #include \"optionsdialog.h\"\n #include \"optionsmodel.h\"\n+#include \"platformstyle.h\"\n #include \"rpcconsole.h\"\n-#include \"scicon.h\"\n #include \"utilitydialog.h\"\n \n #ifdef ENABLE_WALLET\n@@ -60,7 +60,7 @@\n \n const QString BitcoinGUI::DEFAULT_WALLET = \"~Default\";\n \n-BitcoinGUI::BitcoinGUI(const NetworkStyle *networkStyle, QWidget *parent) :\n+BitcoinGUI::BitcoinGUI(const PlatformStyle *platformStyle, const NetworkStyle *networkStyle, QWidget *parent) :\n     QMainWindow(parent),\n     clientModel(0),\n     walletFrame(0),\n@@ -98,7 +98,8 @@ BitcoinGUI::BitcoinGUI(const NetworkStyle *networkStyle, QWidget *parent) :\n     notificator(0),\n     rpcConsole(0),\n     prevBlocks(0),\n-    spinnerFrame(0)\n+    spinnerFrame(0),\n+    platformStyle(platformStyle)\n {\n     GUIUtil::restoreWindowGeometry(\"nWindow\", QSize(850, 550), this);\n \n@@ -130,12 +131,12 @@ BitcoinGUI::BitcoinGUI(const NetworkStyle *networkStyle, QWidget *parent) :\n     setUnifiedTitleAndToolBarOnMac(true);\n #endif\n \n-    rpcConsole = new RPCConsole(0);\n+    rpcConsole = new RPCConsole(platformStyle, 0);\n #ifdef ENABLE_WALLET\n     if(enableWallet)\n     {\n         /** Create wallet frame and make it the central widget */\n-        walletFrame = new WalletFrame(this);\n+        walletFrame = new WalletFrame(platformStyle, this);\n         setCentralWidget(walletFrame);\n     } else\n #endif // ENABLE_WALLET\n@@ -175,7 +176,7 @@ BitcoinGUI::BitcoinGUI(const NetworkStyle *networkStyle, QWidget *parent) :\n     QHBoxLayout *frameBlocksLayout = new QHBoxLayout(frameBlocks);\n     frameBlocksLayout->setContentsMargins(3,0,3,0);\n     frameBlocksLayout->setSpacing(3);\n-    unitDisplayControl = new UnitDisplayStatusBarControl();\n+    unitDisplayControl = new UnitDisplayStatusBarControl(platformStyle);\n     labelEncryptionIcon = new QLabel();\n     labelConnectionsIcon = new QLabel();\n     labelBlocksIcon = new QLabel();\n@@ -247,36 +248,36 @@ void BitcoinGUI::createActions()\n {\n     QActionGroup *tabGroup = new QActionGroup(this);\n \n-    overviewAction = new QAction(SingleColorIcon(\":/icons/overview\"), tr(\"&Overview\"), this);\n+    overviewAction = new QAction(platformStyle->SingleColorIcon(\":/icons/overview\"), tr(\"&Overview\"), this);\n     overviewAction->setStatusTip(tr(\"Show general overview of wallet\"));\n     overviewAction->setToolTip(overviewAction->statusTip());\n     overviewAction->setCheckable(true);\n     overviewAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_1));\n     tabGroup->addAction(overviewAction);\n \n-    sendCoinsAction = new QAction(SingleColorIcon(\":/icons/send\"), tr(\"&Send\"), this);\n+    sendCoinsAction = new QAction(platformStyle->SingleColorIcon(\":/icons/send\"), tr(\"&Send\"), this);\n     sendCoinsAction->setStatusTip(tr(\"Send coins to a Bitcoin address\"));\n     sendCoinsAction->setToolTip(sendCoinsAction->statusTip());\n     sendCoinsAction->setCheckable(true);\n     sendCoinsAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_2));\n     tabGroup->addAction(sendCoinsAction);\n \n-    sendCoinsMenuAction = new QAction(TextColorIcon(\":/icons/send\"), sendCoinsAction->text(), this);\n+    sendCoinsMenuAction = new QAction(platformStyle->TextColorIcon(\":/icons/send\"), sendCoinsAction->text(), this);\n     sendCoinsMenuAction->setStatusTip(sendCoinsAction->statusTip());\n     sendCoinsMenuAction->setToolTip(sendCoinsMenuAction->statusTip());\n \n-    receiveCoinsAction = new QAction(SingleColorIcon(\":/icons/receiving_addresses\"), tr(\"&Receive\"), this);\n+    receiveCoinsAction = new QAction(platformStyle->SingleColorIcon(\":/icons/receiving_addresses\"), tr(\"&Receive\"), this);\n     receiveCoinsAction->setStatusTip(tr(\"Request payments (generates QR codes and bitcoin: URIs)\"));\n     receiveCoinsAction->setToolTip(receiveCoinsAction->statusTip());\n     receiveCoinsAction->setCheckable(true);\n     receiveCoinsAction->setShortcut(QKeySequence(Qt::ALT + Qt::Key_3));\n     tabGroup->addAction(receiveCoinsAction);\n \n-    receiveCoinsMenuAction = new QAction(TextColorIcon(\":/icons/receiving_addresses\"), receiveCoinsAction->text(), this);\n+    receiveCoinsMenuAction = new QAction(platformStyle->TextColorIcon(\":/icons/receiving_addresses\"), receiveCoinsAction->text(), this);\n     receiveCoinsMenuAction->setStatusTip(receiveCoinsAction->statusTip());\n     receiveCoinsMenuAction->setToolTip(receiveCoinsMenuAction->statusTip());\n \n-    historyAction = new QAction(SingleColorIcon(\":/icons/history\"), tr(\"&Transactions\"), this);\n+    historyAction = new QAction(platformStyle->SingleColorIcon(\":/icons/history\"), tr(\"&Transactions\"), this);\n     historyAction->setStatusTip(tr(\"Browse transaction history\"));\n     historyAction->setToolTip(historyAction->statusTip());\n     historyAction->setCheckable(true);\n@@ -300,46 +301,46 @@ void BitcoinGUI::createActions()\n     connect(historyAction, SIGNAL(triggered()), this, SLOT(gotoHistoryPage()));\n #endif // ENABLE_WALLET\n \n-    quitAction = new QAction(TextColorIcon(\":/icons/quit\"), tr(\"E&xit\"), this);\n+    quitAction = new QAction(platformStyle->TextColorIcon(\":/icons/quit\"), tr(\"E&xit\"), this);\n     quitAction->setStatusTip(tr(\"Quit application\"));\n     quitAction->setShortcut(QKeySequence(Qt::CTRL + Qt::Key_Q));\n     quitAction->setMenuRole(QAction::QuitRole);\n-    aboutAction = new QAction(TextColorIcon(\":/icons/about\"), tr(\"&About Bitcoin Core\"), this);\n+    aboutAction = new QAction(platformStyle->TextColorIcon(\":/icons/about\"), tr(\"&About Bitcoin Core\"), this);\n     aboutAction->setStatusTip(tr(\"Show information about Bitcoin Core\"));\n     aboutAction->setMenuRole(QAction::AboutRole);\n-    aboutQtAction = new QAction(TextColorIcon(\":/icons/about_qt\"), tr(\"About &Qt\"), this);\n+    aboutQtAction = new QAction(platformStyle->TextColorIcon(\":/icons/about_qt\"), tr(\"About &Qt\"), this);\n     aboutQtAction->setStatusTip(tr(\"Show information about Qt\"));\n     aboutQtAction->setMenuRole(QAction::AboutQtRole);\n-    optionsAction = new QAction(TextColorIcon(\":/icons/options\"), tr(\"&Options...\"), this);\n+    optionsAction = new QAction(platformStyle->TextColorIcon(\":/icons/options\"), tr(\"&Options...\"), this);\n     optionsAction->setStatusTip(tr(\"Modify configuration options for Bitcoin Core\"));\n     optionsAction->setMenuRole(QAction::PreferencesRole);\n-    toggleHideAction = new QAction(TextColorIcon(\":/icons/about\"), tr(\"&Show / Hide\"), this);\n+    toggleHideAction = new QAction(platformStyle->TextColorIcon(\":/icons/about\"), tr(\"&Show / Hide\"), this);\n     toggleHideAction->setStatusTip(tr(\"Show or hide the main Window\"));\n \n-    encryptWalletAction = new QAction(TextColorIcon(\":/icons/lock_closed\"), tr(\"&Encrypt Wallet...\"), this);\n+    encryptWalletAction = new QAction(platformStyle->TextColorIcon(\":/icons/lock_closed\"), tr(\"&Encrypt Wallet...\"), this);\n     encryptWalletAction->setStatusTip(tr(\"Encrypt the private keys that belong to your wallet\"));\n     encryptWalletAction->setCheckable(true);\n-    backupWalletAction = new QAction(TextColorIcon(\":/icons/filesave\"), tr(\"&Backup Wallet...\"), this);\n+    backupWalletAction = new QAction(platformStyle->TextColorIcon(\":/icons/filesave\"), tr(\"&Backup Wallet...\"), this);\n     backupWalletAction->setStatusTip(tr(\"Backup wallet to another location\"));\n-    changePassphraseAction = new QAction(TextColorIcon(\":/icons/key\"), tr(\"&Change Passphrase...\"), this);\n+    changePassphraseAction = new QAction(platformStyle->TextColorIcon(\":/icons/key\"), tr(\"&Change Passphrase...\"), this);\n     changePassphraseAction->setStatusTip(tr(\"Change the passphrase used for wallet encryption\"));\n-    signMessageAction = new QAction(TextColorIcon(\":/icons/edit\"), tr(\"Sign &message...\"), this);\n+    signMessageAction = new QAction(platformStyle->TextColorIcon(\":/icons/edit\"), tr(\"Sign &message...\"), this);\n     signMessageAction->setStatusTip(tr(\"Sign messages with your Bitcoin addresses to prove you own them\"));\n-    verifyMessageAction = new QAction(TextColorIcon(\":/icons/verify\"), tr(\"&Verify message...\"), this);\n+    verifyMessageAction = new QAction(platformStyle->TextColorIcon(\":/icons/verify\"), tr(\"&Verify message...\"), this);\n     verifyMessageAction->setStatusTip(tr(\"Verify messages to ensure they were signed with specified Bitcoin addresses\"));\n \n-    openRPCConsoleAction = new QAction(TextColorIcon(\":/icons/debugwindow\"), tr(\"&Debug window\"), this);\n+    openRPCConsoleAction = new QAction(platformStyle->TextColorIcon(\":/icons/debugwindow\"), tr(\"&Debug window\"), this);\n     openRPCConsoleAction->setStatusTip(tr(\"Open debugging and diagnostic console\"));\n \n-    usedSendingAddressesAction = new QAction(TextColorIcon(\":/icons/address-book\"), tr(\"&Sending addresses...\"), this);\n+    usedSendingAddressesAction = new QAction(platformStyle->TextColorIcon(\":/icons/address-book\"), tr(\"&Sending addresses...\"), this);\n     usedSendingAddressesAction->setStatusTip(tr(\"Show the list of used sending addresses and labels\"));\n-    usedReceivingAddressesAction = new QAction(TextColorIcon(\":/icons/address-book\"), tr(\"&Receiving addresses...\"), this);\n+    usedReceivingAddressesAction = new QAction(platformStyle->TextColorIcon(\":/icons/address-book\"), tr(\"&Receiving addresses...\"), this);\n     usedReceivingAddressesAction->setStatusTip(tr(\"Show the list of used receiving addresses and labels\"));\n \n-    openAction = new QAction(TextColorIcon(\":/icons/open\"), tr(\"Open &URI...\"), this);\n+    openAction = new QAction(platformStyle->TextColorIcon(\":/icons/open\"), tr(\"Open &URI...\"), this);\n     openAction->setStatusTip(tr(\"Open a bitcoin: URI or payment request\"));\n \n-    showHelpMessageAction = new QAction(TextColorIcon(\":/icons/info\"), tr(\"&Command-line options\"), this);\n+    showHelpMessageAction = new QAction(platformStyle->TextColorIcon(\":/icons/info\"), tr(\"&Command-line options\"), this);\n     showHelpMessageAction->setMenuRole(QAction::NoRole);\n     showHelpMessageAction->setStatusTip(tr(\"Show the Bitcoin Core help message to get a list with possible Bitcoin command-line options\"));\n \n@@ -650,7 +651,7 @@ void BitcoinGUI::setNumConnections(int count)\n     case 7: case 8: case 9: icon = \":/icons/connect_3\"; break;\n     default: icon = \":/icons/connect_4\"; break;\n     }\n-    labelConnectionsIcon->setPixmap(SingleColorIcon(icon).pixmap(STATUSBAR_ICONSIZE,STATUSBAR_ICONSIZE));\n+    labelConnectionsIcon->setPixmap(platformStyle->SingleColorIcon(icon).pixmap(STATUSBAR_ICONSIZE,STATUSBAR_ICONSIZE));\n     labelConnectionsIcon->setToolTip(tr(\"%n active connection(s) to Bitcoin network\", \"\", count));\n }\n \n@@ -691,7 +692,7 @@ void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate)\n     if(secs < 90*60)\n     {\n         tooltip = tr(\"Up to date\") + QString(\".<br>\") + tooltip;\n-        labelBlocksIcon->setPixmap(SingleColorIcon(\":/icons/synced\").pixmap(STATUSBAR_ICONSIZE, STATUSBAR_ICONSIZE));\n+        labelBlocksIcon->setPixmap(platformStyle->SingleColorIcon(\":/icons/synced\").pixmap(STATUSBAR_ICONSIZE, STATUSBAR_ICONSIZE));\n \n #ifdef ENABLE_WALLET\n         if(walletFrame)\n@@ -737,7 +738,7 @@ void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate)\n         tooltip = tr(\"Catching up...\") + QString(\"<br>\") + tooltip;\n         if(count != prevBlocks)\n         {\n-            labelBlocksIcon->setPixmap(SingleColorIcon(QString(\n+            labelBlocksIcon->setPixmap(platformStyle->SingleColorIcon(QString(\n                 \":/movies/spinner-%1\").arg(spinnerFrame, 3, 10, QChar('0')))\n                 .pixmap(STATUSBAR_ICONSIZE, STATUSBAR_ICONSIZE));\n             spinnerFrame = (spinnerFrame + 1) % SPINNER_FRAMES;\n@@ -931,15 +932,15 @@ void BitcoinGUI::setEncryptionStatus(int status)\n         break;\n     case WalletModel::Unlocked:\n         labelEncryptionIcon->show();\n-        labelEncryptionIcon->setPixmap(SingleColorIcon(\":/icons/lock_open\").pixmap(STATUSBAR_ICONSIZE,STATUSBAR_ICONSIZE));\n+        labelEncryptionIcon->setPixmap(platformStyle->SingleColorIcon(\":/icons/lock_open\").pixmap(STATUSBAR_ICONSIZE,STATUSBAR_ICONSIZE));\n         labelEncryptionIcon->setToolTip(tr(\"Wallet is <b>encrypted</b> and currently <b>unlocked</b>\"));\n         encryptWalletAction->setChecked(true);\n         changePassphraseAction->setEnabled(true);\n         encryptWalletAction->setEnabled(false); // TODO: decrypt currently not supported\n         break;\n     case WalletModel::Locked:\n         labelEncryptionIcon->show();\n-        labelEncryptionIcon->setPixmap(SingleColorIcon(\":/icons/lock_closed\").pixmap(STATUSBAR_ICONSIZE,STATUSBAR_ICONSIZE));\n+        labelEncryptionIcon->setPixmap(platformStyle->SingleColorIcon(\":/icons/lock_closed\").pixmap(STATUSBAR_ICONSIZE,STATUSBAR_ICONSIZE));\n         labelEncryptionIcon->setToolTip(tr(\"Wallet is <b>encrypted</b> and currently <b>locked</b>\"));\n         encryptWalletAction->setChecked(true);\n         changePassphraseAction->setEnabled(true);\n@@ -1041,7 +1042,7 @@ void BitcoinGUI::unsubscribeFromCoreSignals()\n     uiInterface.ThreadSafeMessageBox.disconnect(boost::bind(ThreadSafeMessageBox, this, _1, _2, _3));\n }\n \n-UnitDisplayStatusBarControl::UnitDisplayStatusBarControl() :\n+UnitDisplayStatusBarControl::UnitDisplayStatusBarControl(const PlatformStyle *platformStyle) :\n     optionsModel(0),\n     menu(0)\n {\n@@ -1056,7 +1057,7 @@ UnitDisplayStatusBarControl::UnitDisplayStatusBarControl() :\n     }\n     setMinimumSize(max_width, 0);\n     setAlignment(Qt::AlignRight | Qt::AlignVCenter);\n-    setStyleSheet(QString(\"QLabel { color : %1 }\").arg(SingleColor().name()));\n+    setStyleSheet(QString(\"QLabel { color : %1 }\").arg(platformStyle->SingleColor().name()));\n }\n \n /** So that it responds to button clicks */"
      },
      {
        "sha": "dd0d4bb0e20fab93a325b4c4ce0535c093ca41a2",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=9848d4297be9818578c8e0cac6e614e2a8a33a4d",
        "patch": "@@ -22,6 +22,7 @@ class ClientModel;\n class NetworkStyle;\n class Notificator;\n class OptionsModel;\n+class PlatformStyle;\n class RPCConsole;\n class SendCoinsRecipient;\n class UnitDisplayStatusBarControl;\n@@ -47,7 +48,7 @@ class BitcoinGUI : public QMainWindow\n public:\n     static const QString DEFAULT_WALLET;\n \n-    explicit BitcoinGUI(const NetworkStyle *networkStyle, QWidget *parent = 0);\n+    explicit BitcoinGUI(const PlatformStyle *platformStyle, const NetworkStyle *networkStyle, QWidget *parent = 0);\n     ~BitcoinGUI();\n \n     /** Set the client model.\n@@ -117,6 +118,8 @@ class BitcoinGUI : public QMainWindow\n     int prevBlocks;\n     int spinnerFrame;\n \n+    const PlatformStyle *platformStyle;\n+\n     /** Create the main UI actions. */\n     void createActions();\n     /** Create the menu bar and sub-menus. */\n@@ -215,7 +218,7 @@ class UnitDisplayStatusBarControl : public QLabel\n     Q_OBJECT\n \n public:\n-    explicit UnitDisplayStatusBarControl();\n+    explicit UnitDisplayStatusBarControl(const PlatformStyle *platformStyle);\n     /** Lets the control know about the Options Model (and its signals) */\n     void setOptionsModel(OptionsModel *optionsModel);\n "
      },
      {
        "sha": "51008ad2deb51c3803b4ec1baf666d84cc5a3288",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=9848d4297be9818578c8e0cac6e614e2a8a33a4d",
        "patch": "@@ -9,7 +9,7 @@\n #include \"bitcoinunits.h\"\n #include \"guiutil.h\"\n #include \"optionsmodel.h\"\n-#include \"scicon.h\"\n+#include \"platformstyle.h\"\n #include \"txmempool.h\"\n #include \"walletmodel.h\"\n \n@@ -35,10 +35,11 @@ QList<CAmount> CoinControlDialog::payAmounts;\n CCoinControl* CoinControlDialog::coinControl = new CCoinControl();\n bool CoinControlDialog::fSubtractFeeFromAmount = false;\n \n-CoinControlDialog::CoinControlDialog(QWidget *parent) :\n+CoinControlDialog::CoinControlDialog(const PlatformStyle *platformStyle, QWidget *parent) :\n     QDialog(parent),\n     ui(new Ui::CoinControlDialog),\n-    model(0)\n+    model(0),\n+    platformStyle(platformStyle)\n {\n     ui->setupUi(this);\n \n@@ -280,7 +281,7 @@ void CoinControlDialog::lockCoin()\n     COutPoint outpt(uint256S(contextMenuItem->text(COLUMN_TXHASH).toStdString()), contextMenuItem->text(COLUMN_VOUT_INDEX).toUInt());\n     model->lockCoin(outpt);\n     contextMenuItem->setDisabled(true);\n-    contextMenuItem->setIcon(COLUMN_CHECKBOX, SingleColorIcon(\":/icons/lock_closed\"));\n+    contextMenuItem->setIcon(COLUMN_CHECKBOX, platformStyle->SingleColorIcon(\":/icons/lock_closed\"));\n     updateLabelLocked();\n }\n \n@@ -791,7 +792,7 @@ void CoinControlDialog::updateView()\n                 COutPoint outpt(txhash, out.i);\n                 coinControl->UnSelect(outpt); // just to be sure\n                 itemOutput->setDisabled(true);\n-                itemOutput->setIcon(COLUMN_CHECKBOX, SingleColorIcon(\":/icons/lock_closed\"));\n+                itemOutput->setIcon(COLUMN_CHECKBOX, platformStyle->SingleColorIcon(\":/icons/lock_closed\"));\n             }\n \n             // set checkbox"
      },
      {
        "sha": "8ff1eac7093002afe59e7cae58c280b6b011b1f6",
        "filename": "src/qt/coincontroldialog.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/coincontroldialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/coincontroldialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.h?ref=9848d4297be9818578c8e0cac6e614e2a8a33a4d",
        "patch": "@@ -16,6 +16,7 @@\n #include <QString>\n #include <QTreeWidgetItem>\n \n+class PlatformStyle;\n class WalletModel;\n \n class CCoinControl;\n@@ -32,7 +33,7 @@ class CoinControlDialog : public QDialog\n     Q_OBJECT\n \n public:\n-    explicit CoinControlDialog(QWidget *parent = 0);\n+    explicit CoinControlDialog(const PlatformStyle *platformStyle, QWidget *parent = 0);\n     ~CoinControlDialog();\n \n     void setModel(WalletModel *model);\n@@ -57,6 +58,8 @@ class CoinControlDialog : public QDialog\n     QAction *lockAction;\n     QAction *unlockAction;\n \n+    const PlatformStyle *platformStyle;\n+\n     QString strPad(QString, int, QString);\n     void sortView(int, Qt::SortOrder);\n     void updateView();"
      },
      {
        "sha": "4ab87e0f32b04b098653a7b66070debe3a7ab2ef",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=9848d4297be9818578c8e0cac6e614e2a8a33a4d",
        "patch": "@@ -6,7 +6,6 @@\n #include \"ui_intro.h\"\n \n #include \"guiutil.h\"\n-#include \"scicon.h\"\n \n #include \"util.h\"\n \n@@ -168,7 +167,7 @@ void Intro::pickDataDirectory()\n         /* If current default data directory does not exist, let the user choose one */\n         Intro intro;\n         intro.setDataDirectory(dataDir);\n-        intro.setWindowIcon(SingleColorIcon(\":icons/bitcoin\"));\n+        intro.setWindowIcon(QIcon(\":icons/bitcoin\"));\n \n         while(true)\n         {"
      },
      {
        "sha": "4541c75886b6f7c797900182dec08dde7f91a722",
        "filename": "src/qt/networkstyle.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/networkstyle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/networkstyle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/networkstyle.cpp?ref=9848d4297be9818578c8e0cac6e614e2a8a33a4d",
        "patch": "@@ -5,7 +5,6 @@\n #include \"networkstyle.h\"\n \n #include \"guiconstants.h\"\n-#include \"scicon.h\"\n \n #include <QApplication>\n "
      },
      {
        "sha": "a56c80ac6326ce9aaf6d90dd816e0628ab6955f0",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=9848d4297be9818578c8e0cac6e614e2a8a33a4d",
        "patch": "@@ -10,7 +10,7 @@\n #include \"guiconstants.h\"\n #include \"guiutil.h\"\n #include \"optionsmodel.h\"\n-#include \"scicon.h\"\n+#include \"platformstyle.h\"\n #include \"transactionfilterproxy.h\"\n #include \"transactiontablemodel.h\"\n #include \"walletmodel.h\"\n@@ -25,7 +25,9 @@ class TxViewDelegate : public QAbstractItemDelegate\n {\n     Q_OBJECT\n public:\n-    TxViewDelegate(): QAbstractItemDelegate(), unit(BitcoinUnits::BTC)\n+    TxViewDelegate(const PlatformStyle *platformStyle):\n+        QAbstractItemDelegate(), unit(BitcoinUnits::BTC),\n+        platformStyle(platformStyle)\n     {\n \n     }\n@@ -43,7 +45,7 @@ class TxViewDelegate : public QAbstractItemDelegate\n         int halfheight = (mainRect.height() - 2*ypad)/2;\n         QRect amountRect(mainRect.left() + xspace, mainRect.top()+ypad, mainRect.width() - xspace, halfheight);\n         QRect addressRect(mainRect.left() + xspace, mainRect.top()+ypad+halfheight, mainRect.width() - xspace, halfheight);\n-        icon = SingleColorIcon(icon, SingleColor());\n+        icon = platformStyle->SingleColorIcon(icon);\n         icon.paint(painter, decorationRect);\n \n         QDateTime date = index.data(TransactionTableModel::DateRole).toDateTime();\n@@ -101,11 +103,12 @@ class TxViewDelegate : public QAbstractItemDelegate\n     }\n \n     int unit;\n+    const PlatformStyle *platformStyle;\n \n };\n #include \"overviewpage.moc\"\n \n-OverviewPage::OverviewPage(QWidget *parent) :\n+OverviewPage::OverviewPage(const PlatformStyle *platformStyle, QWidget *parent) :\n     QWidget(parent),\n     ui(new Ui::OverviewPage),\n     clientModel(0),\n@@ -116,13 +119,13 @@ OverviewPage::OverviewPage(QWidget *parent) :\n     currentWatchOnlyBalance(-1),\n     currentWatchUnconfBalance(-1),\n     currentWatchImmatureBalance(-1),\n-    txdelegate(new TxViewDelegate()),\n+    txdelegate(new TxViewDelegate(platformStyle)),\n     filter(0)\n {\n     ui->setupUi(this);\n \n     // use a SingleColorIcon for the \"out of sync warning\" icon\n-    QIcon icon = SingleColorIcon(\":/icons/warning\");\n+    QIcon icon = platformStyle->SingleColorIcon(\":/icons/warning\");\n     icon.addPixmap(icon.pixmap(QSize(64,64), QIcon::Normal), QIcon::Disabled); // also set the disabled icon because we are using a disabled QPushButton to work around missing HiDPI support of QLabel (https://bugreports.qt.io/browse/QTBUG-42503)\n     ui->labelTransactionsStatus->setIcon(icon);\n     ui->labelWalletStatus->setIcon(icon);"
      },
      {
        "sha": "4139eb35d369fe543e7d34716d5bdf4fbe0b2930",
        "filename": "src/qt/overviewpage.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/overviewpage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/overviewpage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.h?ref=9848d4297be9818578c8e0cac6e614e2a8a33a4d",
        "patch": "@@ -12,6 +12,7 @@\n class ClientModel;\n class TransactionFilterProxy;\n class TxViewDelegate;\n+class PlatformStyle;\n class WalletModel;\n \n namespace Ui {\n@@ -28,7 +29,7 @@ class OverviewPage : public QWidget\n     Q_OBJECT\n \n public:\n-    explicit OverviewPage(QWidget *parent = 0);\n+    explicit OverviewPage(const PlatformStyle *platformStyle, QWidget *parent = 0);\n     ~OverviewPage();\n \n     void setClientModel(ClientModel *clientModel);"
      },
      {
        "sha": "11cbc7a47c06fd9ab0e06c73d14aa3bac3e9abfa",
        "filename": "src/qt/platformstyle.cpp",
        "status": "added",
        "additions": 147,
        "deletions": 0,
        "changes": 147,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/platformstyle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/platformstyle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/platformstyle.cpp?ref=9848d4297be9818578c8e0cac6e614e2a8a33a4d",
        "patch": "@@ -0,0 +1,147 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"platformstyle.h\"\n+\n+#include \"guiconstants.h\"\n+\n+#include <QApplication>\n+#include <QColor>\n+#include <QIcon>\n+#include <QImage>\n+#include <QPalette>\n+#include <QPixmap>\n+\n+static const struct {\n+    const char *platformId;\n+    /** Show images on push buttons */\n+    const bool imagesOnButtons;\n+    /** Colorize single-color icons */\n+    const bool colorizeIcons;\n+    /** Extra padding/spacing in transactionview */\n+    const bool useExtraSpacing;\n+} platform_styles[] = {\n+    {\"macosx\", false, false, true},\n+    {\"windows\", true, false, false},\n+    /* Other: linux, unix, ... */\n+    {\"other\", true, true, false}\n+};\n+static const unsigned platform_styles_count = sizeof(platform_styles)/sizeof(*platform_styles);\n+\n+namespace {\n+/* Local functions for colorizing single-color images */\n+\n+void MakeSingleColorImage(QImage& img, const QColor& colorbase)\n+{\n+    img = img.convertToFormat(QImage::Format_ARGB32);\n+    for (int x = img.width(); x--; )\n+    {\n+        for (int y = img.height(); y--; )\n+        {\n+            const QRgb rgb = img.pixel(x, y);\n+            img.setPixel(x, y, qRgba(colorbase.red(), colorbase.green(), colorbase.blue(), qAlpha(rgb)));\n+        }\n+    }\n+}\n+\n+QIcon ColorizeIcon(const QIcon& ico, const QColor& colorbase)\n+{\n+    QIcon new_ico;\n+    QSize sz;\n+    Q_FOREACH(sz, ico.availableSizes())\n+    {\n+        QImage img(ico.pixmap(sz).toImage());\n+        MakeSingleColorImage(img, colorbase);\n+        new_ico.addPixmap(QPixmap::fromImage(img));\n+    }\n+    return new_ico;\n+}\n+\n+QImage ColorizeImage(const QString& filename, const QColor& colorbase)\n+{\n+    QImage img(filename);\n+    MakeSingleColorImage(img, colorbase);\n+    return img;\n+}\n+\n+QIcon ColorizeIcon(const QString& filename, const QColor& colorbase)\n+{\n+    return QIcon(QPixmap::fromImage(ColorizeImage(filename, colorbase)));\n+}\n+\n+}\n+\n+\n+PlatformStyle::PlatformStyle(const QString &name, bool imagesOnButtons, bool colorizeIcons, bool useExtraSpacing):\n+    name(name),\n+    imagesOnButtons(imagesOnButtons),\n+    colorizeIcons(colorizeIcons),\n+    useExtraSpacing(useExtraSpacing),\n+    singleColor(0,0,0),\n+    textColor(0,0,0)\n+{\n+    // Determine icon highlighting color\n+    if (colorizeIcons) {\n+        const QColor colorHighlightBg(QApplication::palette().color(QPalette::Highlight));\n+        const QColor colorHighlightFg(QApplication::palette().color(QPalette::HighlightedText));\n+        const QColor colorText(QApplication::palette().color(QPalette::WindowText));\n+        const int colorTextLightness = colorText.lightness();\n+        QColor colorbase;\n+        if (abs(colorHighlightBg.lightness() - colorTextLightness) < abs(colorHighlightFg.lightness() - colorTextLightness))\n+            colorbase = colorHighlightBg;\n+        else\n+            colorbase = colorHighlightFg;\n+        singleColor = colorbase;\n+    }\n+    // Determine text color\n+    textColor = QColor(QApplication::palette().color(QPalette::WindowText));\n+}\n+\n+QImage PlatformStyle::SingleColorImage(const QString& filename) const\n+{\n+    if (!colorizeIcons)\n+        return QImage(filename);\n+    return ColorizeImage(filename, SingleColor());\n+}\n+\n+QIcon PlatformStyle::SingleColorIcon(const QString& filename) const\n+{\n+    if (!colorizeIcons)\n+        return QIcon(filename);\n+    return ColorizeIcon(filename, SingleColor());\n+}\n+\n+QIcon PlatformStyle::SingleColorIcon(const QIcon& icon) const\n+{\n+    if (!colorizeIcons)\n+        return icon;\n+    return ColorizeIcon(icon, SingleColor());\n+}\n+\n+QIcon PlatformStyle::TextColorIcon(const QString& filename) const\n+{\n+    return ColorizeIcon(filename, TextColor());\n+}\n+\n+QIcon PlatformStyle::TextColorIcon(const QIcon& icon) const\n+{\n+    return ColorizeIcon(icon, TextColor());\n+}\n+\n+const PlatformStyle *PlatformStyle::instantiate(const QString &platformId)\n+{\n+    for (unsigned x=0; x<platform_styles_count; ++x)\n+    {\n+        if (platformId == platform_styles[x].platformId)\n+        {\n+            return new PlatformStyle(\n+                    platform_styles[x].platformId,\n+                    platform_styles[x].imagesOnButtons,\n+                    platform_styles[x].colorizeIcons,\n+                    platform_styles[x].useExtraSpacing);\n+        }\n+    }\n+    return 0;\n+}\n+"
      },
      {
        "sha": "4e763e760ea26a90457468106161978721ab259f",
        "filename": "src/qt/platformstyle.h",
        "status": "added",
        "additions": 55,
        "deletions": 0,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/platformstyle.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/platformstyle.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/platformstyle.h?ref=9848d4297be9818578c8e0cac6e614e2a8a33a4d",
        "patch": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_QT_PLATFORMSTYLE_H\n+#define BITCOIN_QT_PLATFORMSTYLE_H\n+\n+#include <QIcon>\n+#include <QPixmap>\n+#include <QString>\n+\n+/* Coin network-specific GUI style information */\n+class PlatformStyle\n+{\n+public:\n+    /** Get style associated with provided platform name, or 0 if not known */\n+    static const PlatformStyle *instantiate(const QString &platformId);\n+\n+    const QString &getName() const { return name; }\n+\n+    bool getImagesOnButtons() const { return imagesOnButtons; }\n+    bool getUseExtraSpacing() const { return useExtraSpacing; }\n+\n+    QColor TextColor() const { return textColor; }\n+    QColor SingleColor() const { return singleColor; }\n+\n+    /** Colorize an image (given filename) with the icon color */\n+    QImage SingleColorImage(const QString& filename) const;\n+\n+    /** Colorize an icon (given filename) with the icon color */\n+    QIcon SingleColorIcon(const QString& filename) const;\n+\n+    /** Colorize an icon (given object) with the icon color */\n+    QIcon SingleColorIcon(const QIcon& icon) const;\n+\n+    /** Colorize an icon (given filename) with the text color */\n+    QIcon TextColorIcon(const QString& filename) const;\n+\n+    /** Colorize an icon (given object) with the text color */\n+    QIcon TextColorIcon(const QIcon& icon) const;\n+\n+private:\n+    PlatformStyle(const QString &name, bool imagesOnButtons, bool colorizeIcons, bool useExtraSpacing);\n+\n+    QString name;\n+    bool imagesOnButtons;\n+    bool colorizeIcons;\n+    bool useExtraSpacing;\n+    QColor singleColor;\n+    QColor textColor;\n+    /* ... more to come later */\n+};\n+\n+#endif // BITCOIN_QT_PLATFORMSTYLE_H\n+"
      },
      {
        "sha": "7fb68cc32a20995962a3482f9b9e69158f69d18b",
        "filename": "src/qt/receivecoinsdialog.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 15,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/receivecoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/receivecoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.cpp?ref=9848d4297be9818578c8e0cac6e614e2a8a33a4d",
        "patch": "@@ -10,9 +10,9 @@\n #include \"bitcoinunits.h\"\n #include \"guiutil.h\"\n #include \"optionsmodel.h\"\n+#include \"platformstyle.h\"\n #include \"receiverequestdialog.h\"\n #include \"recentrequeststablemodel.h\"\n-#include \"scicon.h\"\n #include \"walletmodel.h\"\n \n #include <QAction>\n@@ -22,24 +22,25 @@\n #include <QScrollBar>\n #include <QTextDocument>\n \n-ReceiveCoinsDialog::ReceiveCoinsDialog(QWidget *parent) :\n+ReceiveCoinsDialog::ReceiveCoinsDialog(const PlatformStyle *platformStyle, QWidget *parent) :\n     QDialog(parent),\n     ui(new Ui::ReceiveCoinsDialog),\n-    model(0)\n+    model(0),\n+    platformStyle(platformStyle)\n {\n     ui->setupUi(this);\n \n-#ifdef Q_OS_MAC // Icons on push buttons are very uncommon on Mac\n-    ui->clearButton->setIcon(QIcon());\n-    ui->receiveButton->setIcon(QIcon());\n-    ui->showRequestButton->setIcon(QIcon());\n-    ui->removeRequestButton->setIcon(QIcon());\n-#else\n-    ui->clearButton->setIcon(SingleColorIcon(\":/icons/remove\"));\n-    ui->receiveButton->setIcon(SingleColorIcon(\":/icons/receiving_addresses\"));\n-    ui->showRequestButton->setIcon(SingleColorIcon(\":/icons/edit\"));\n-    ui->removeRequestButton->setIcon(SingleColorIcon(\":/icons/remove\"));\n-#endif\n+    if (!platformStyle->getImagesOnButtons()) {\n+        ui->clearButton->setIcon(QIcon());\n+        ui->receiveButton->setIcon(QIcon());\n+        ui->showRequestButton->setIcon(QIcon());\n+        ui->removeRequestButton->setIcon(QIcon());\n+    } else {\n+        ui->clearButton->setIcon(platformStyle->SingleColorIcon(\":/icons/remove\"));\n+        ui->receiveButton->setIcon(platformStyle->SingleColorIcon(\":/icons/receiving_addresses\"));\n+        ui->showRequestButton->setIcon(platformStyle->SingleColorIcon(\":/icons/edit\"));\n+        ui->removeRequestButton->setIcon(platformStyle->SingleColorIcon(\":/icons/remove\"));\n+    }\n \n     // context menu actions\n     QAction *copyLabelAction = new QAction(tr(\"Copy label\"), this);\n@@ -132,7 +133,7 @@ void ReceiveCoinsDialog::on_receiveButton_clicked()\n     if(ui->reuseAddress->isChecked())\n     {\n         /* Choose existing receiving address */\n-        AddressBookPage dlg(AddressBookPage::ForSelection, AddressBookPage::ReceivingTab, this);\n+        AddressBookPage dlg(platformStyle, AddressBookPage::ForSelection, AddressBookPage::ReceivingTab, this);\n         dlg.setModel(model->getAddressTableModel());\n         if(dlg.exec())\n         {"
      },
      {
        "sha": "eaaf129a91d5d34522832da4ed2b09c1e24f6d9d",
        "filename": "src/qt/receivecoinsdialog.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/receivecoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/receivecoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.h?ref=9848d4297be9818578c8e0cac6e614e2a8a33a4d",
        "patch": "@@ -16,6 +16,7 @@\n #include <QVariant>\n \n class OptionsModel;\n+class PlatformStyle;\n class WalletModel;\n \n namespace Ui {\n@@ -39,7 +40,7 @@ class ReceiveCoinsDialog : public QDialog\n         MINIMUM_COLUMN_WIDTH = 130\n     };\n \n-    explicit ReceiveCoinsDialog(QWidget *parent = 0);\n+    explicit ReceiveCoinsDialog(const PlatformStyle *platformStyle, QWidget *parent = 0);\n     ~ReceiveCoinsDialog();\n \n     void setModel(WalletModel *model);\n@@ -57,6 +58,8 @@ public Q_SLOTS:\n     GUIUtil::TableViewLastColumnResizingFixer *columnResizingFixer;\n     WalletModel *model;\n     QMenu *contextMenu;\n+    const PlatformStyle *platformStyle;\n+\n     void copyColumnToClipboard(int column);\n     virtual void resizeEvent(QResizeEvent *event);\n "
      },
      {
        "sha": "3231b392f29f2f3895d17f481b5996a06d17621b",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=9848d4297be9818578c8e0cac6e614e2a8a33a4d",
        "patch": "@@ -8,7 +8,7 @@\n #include \"clientmodel.h\"\n #include \"guiutil.h\"\n #include \"peertablemodel.h\"\n-#include \"scicon.h\"\n+#include \"platformstyle.h\"\n \n #include \"chainparams.h\"\n #include \"rpcserver.h\"\n@@ -200,21 +200,22 @@ void RPCExecutor::request(const QString &command)\n     }\n }\n \n-RPCConsole::RPCConsole(QWidget *parent) :\n+RPCConsole::RPCConsole(const PlatformStyle *platformStyle, QWidget *parent) :\n     QWidget(parent),\n     ui(new Ui::RPCConsole),\n     clientModel(0),\n     historyPtr(0),\n     cachedNodeid(-1),\n-    contextMenu(0)\n+    contextMenu(0),\n+    platformStyle(platformStyle)\n {\n     ui->setupUi(this);\n     GUIUtil::restoreWindowGeometry(\"nRPCConsoleWindow\", this->size(), this);\n \n-#ifndef Q_OS_MAC\n-    ui->openDebugLogfileButton->setIcon(SingleColorIcon(\":/icons/export\"));\n-#endif\n-    ui->clearButton->setIcon(SingleColorIcon(\":/icons/remove\"));\n+    if (platformStyle->getImagesOnButtons()) {\n+        ui->openDebugLogfileButton->setIcon(platformStyle->SingleColorIcon(\":/icons/export\"));\n+    }\n+    ui->clearButton->setIcon(platformStyle->SingleColorIcon(\":/icons/remove\"));\n \n     // Install event filter for up and down arrow\n     ui->lineEdit->installEventFilter(this);\n@@ -363,7 +364,7 @@ void RPCConsole::clear()\n         ui->messagesWidget->document()->addResource(\n                     QTextDocument::ImageResource,\n                     QUrl(ICON_MAPPING[i].url),\n-                    SingleColorImage(ICON_MAPPING[i].source, SingleColor()).scaled(ICON_SIZE, Qt::IgnoreAspectRatio, Qt::SmoothTransformation));\n+                    platformStyle->SingleColorImage(ICON_MAPPING[i].source).scaled(ICON_SIZE, Qt::IgnoreAspectRatio, Qt::SmoothTransformation));\n     }\n \n     // Set default style sheet"
      },
      {
        "sha": "b94efee84ab1f5a0831fe3246cce255c25f2e5a7",
        "filename": "src/qt/rpcconsole.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/rpcconsole.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/rpcconsole.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.h?ref=9848d4297be9818578c8e0cac6e614e2a8a33a4d",
        "patch": "@@ -13,6 +13,7 @@\n #include <QWidget>\n \n class ClientModel;\n+class PlatformStyle;\n \n namespace Ui {\n     class RPCConsole;\n@@ -29,7 +30,7 @@ class RPCConsole: public QWidget\n     Q_OBJECT\n \n public:\n-    explicit RPCConsole(QWidget *parent);\n+    explicit RPCConsole(const PlatformStyle *platformStyle, QWidget *parent);\n     ~RPCConsole();\n \n     void setClientModel(ClientModel *model);\n@@ -106,6 +107,7 @@ public Q_SLOTS:\n     int historyPtr;\n     NodeId cachedNodeid;\n     QMenu *contextMenu;\n+    const PlatformStyle *platformStyle;\n };\n \n #endif // BITCOIN_QT_RPCCONSOLE_H"
      },
      {
        "sha": "c493b5569e03c9fae22f5acb6b7b689361227c6d",
        "filename": "src/qt/scicon.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 98,
        "changes": 98,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/675d2feffa84a6ffeabac32aeed37f6a7f74bee3/src/qt/scicon.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/675d2feffa84a6ffeabac32aeed37f6a7f74bee3/src/qt/scicon.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/scicon.cpp?ref=675d2feffa84a6ffeabac32aeed37f6a7f74bee3",
        "patch": "@@ -1,98 +0,0 @@\n-// Copyright (c) 2014 The Bitcoin developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include \"scicon.h\"\n-\n-#include <QApplication>\n-#include <QColor>\n-#include <QIcon>\n-#include <QImage>\n-#include <QPalette>\n-#include <QPixmap>\n-\n-namespace {\n-\n-void MakeSingleColorImage(QImage& img, const QColor& colorbase)\n-{\n-    img = img.convertToFormat(QImage::Format_ARGB32);\n-    for (int x = img.width(); x--; )\n-    {\n-        for (int y = img.height(); y--; )\n-        {\n-            const QRgb rgb = img.pixel(x, y);\n-            img.setPixel(x, y, qRgba(colorbase.red(), colorbase.green(), colorbase.blue(), qAlpha(rgb)));\n-        }\n-    }\n-}\n-\n-}\n-\n-QImage SingleColorImage(const QString& filename, const QColor& colorbase)\n-{\n-    QImage img(filename);\n-#if !defined(WIN32) && !defined(MAC_OSX)\n-    MakeSingleColorImage(img, colorbase);\n-#endif\n-    return img;\n-}\n-\n-QIcon SingleColorIcon(const QIcon& ico, const QColor& colorbase)\n-{\n-#if defined(WIN32) || defined(MAC_OSX)\n-    return ico;\n-#else\n-    QIcon new_ico;\n-    QSize sz;\n-    Q_FOREACH(sz, ico.availableSizes())\n-    {\n-        QImage img(ico.pixmap(sz).toImage());\n-        MakeSingleColorImage(img, colorbase);\n-        new_ico.addPixmap(QPixmap::fromImage(img));\n-    }\n-    return new_ico;\n-#endif\n-}\n-\n-QIcon SingleColorIcon(const QString& filename, const QColor& colorbase)\n-{\n-    return QIcon(QPixmap::fromImage(SingleColorImage(filename, colorbase)));\n-}\n-\n-QColor SingleColor()\n-{\n-#if defined(WIN32) || defined(MAC_OSX)\n-    return QColor(0,0,0);\n-#else\n-    const QColor colorHighlightBg(QApplication::palette().color(QPalette::Highlight));\n-    const QColor colorHighlightFg(QApplication::palette().color(QPalette::HighlightedText));\n-    const QColor colorText(QApplication::palette().color(QPalette::WindowText));\n-    const int colorTextLightness = colorText.lightness();\n-    QColor colorbase;\n-    if (abs(colorHighlightBg.lightness() - colorTextLightness) < abs(colorHighlightFg.lightness() - colorTextLightness))\n-        colorbase = colorHighlightBg;\n-    else\n-        colorbase = colorHighlightFg;\n-    return colorbase;\n-#endif\n-}\n-\n-QIcon SingleColorIcon(const QString& filename)\n-{\n-    return SingleColorIcon(filename, SingleColor());\n-}\n-\n-static QColor TextColor()\n-{\n-    return QColor(QApplication::palette().color(QPalette::WindowText));\n-}\n-\n-QIcon TextColorIcon(const QString& filename)\n-{\n-    return SingleColorIcon(filename, TextColor());\n-}\n-\n-QIcon TextColorIcon(const QIcon& ico)\n-{\n-    return SingleColorIcon(ico, TextColor());\n-}"
      },
      {
        "sha": "1388069ddb4c2a8fd9ccb2102aecaf93f77281d0",
        "filename": "src/qt/scicon.h",
        "status": "removed",
        "additions": 0,
        "deletions": 24,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/675d2feffa84a6ffeabac32aeed37f6a7f74bee3/src/qt/scicon.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/675d2feffa84a6ffeabac32aeed37f6a7f74bee3/src/qt/scicon.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/scicon.h?ref=675d2feffa84a6ffeabac32aeed37f6a7f74bee3",
        "patch": "@@ -1,24 +0,0 @@\n-// Copyright (c) 2014 The Bitcoin developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_QT_SCICON_H\n-#define BITCOIN_QT_SCICON_H\n-\n-#include <QtCore>\n-\n-QT_BEGIN_NAMESPACE\n-class QColor;\n-class QIcon;\n-class QString;\n-QT_END_NAMESPACE\n-\n-QImage SingleColorImage(const QString& filename, const QColor&);\n-QIcon SingleColorIcon(const QIcon&, const QColor&);\n-QIcon SingleColorIcon(const QString& filename, const QColor&);\n-QColor SingleColor();\n-QIcon SingleColorIcon(const QString& filename);\n-QIcon TextColorIcon(const QIcon&);\n-QIcon TextColorIcon(const QString& filename);\n-\n-#endif // BITCOIN_QT_SCICON_H"
      },
      {
        "sha": "449a7bc5e8838af3347ef48968345a55d23df3f7",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 14,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=9848d4297be9818578c8e0cac6e614e2a8a33a4d",
        "patch": "@@ -11,7 +11,7 @@\n #include \"coincontroldialog.h\"\n #include \"guiutil.h\"\n #include \"optionsmodel.h\"\n-#include \"scicon.h\"\n+#include \"platformstyle.h\"\n #include \"sendcoinsentry.h\"\n #include \"walletmodel.h\"\n \n@@ -27,25 +27,26 @@\n #include <QSettings>\n #include <QTextDocument>\n \n-SendCoinsDialog::SendCoinsDialog(QWidget *parent) :\n+SendCoinsDialog::SendCoinsDialog(const PlatformStyle *platformStyle, QWidget *parent) :\n     QDialog(parent),\n     ui(new Ui::SendCoinsDialog),\n     clientModel(0),\n     model(0),\n     fNewRecipientAllowed(true),\n-    fFeeMinimized(true)\n+    fFeeMinimized(true),\n+    platformStyle(platformStyle)\n {\n     ui->setupUi(this);\n \n-#ifdef Q_OS_MAC // Icons on push buttons are very uncommon on Mac\n-    ui->addButton->setIcon(QIcon());\n-    ui->clearButton->setIcon(QIcon());\n-    ui->sendButton->setIcon(QIcon());\n-#else\n-    ui->addButton->setIcon(SingleColorIcon(\":/icons/add\"));\n-    ui->clearButton->setIcon(SingleColorIcon(\":/icons/remove\"));\n-    ui->sendButton->setIcon(SingleColorIcon(\":/icons/send\"));\n-#endif\n+    if (!platformStyle->getImagesOnButtons()) {\n+        ui->addButton->setIcon(QIcon());\n+        ui->clearButton->setIcon(QIcon());\n+        ui->sendButton->setIcon(QIcon());\n+    } else {\n+        ui->addButton->setIcon(platformStyle->SingleColorIcon(\":/icons/add\"));\n+        ui->clearButton->setIcon(platformStyle->SingleColorIcon(\":/icons/remove\"));\n+        ui->sendButton->setIcon(platformStyle->SingleColorIcon(\":/icons/send\"));\n+    }\n \n     GUIUtil::setupAddressWidget(ui->lineEditCoinControlChange, this);\n \n@@ -364,7 +365,7 @@ void SendCoinsDialog::accept()\n \n SendCoinsEntry *SendCoinsDialog::addEntry()\n {\n-    SendCoinsEntry *entry = new SendCoinsEntry(this);\n+    SendCoinsEntry *entry = new SendCoinsEntry(platformStyle, this);\n     entry->setModel(model);\n     ui->entries->addWidget(entry);\n     connect(entry, SIGNAL(removeEntry(SendCoinsEntry*)), this, SLOT(removeEntry(SendCoinsEntry*)));\n@@ -711,7 +712,7 @@ void SendCoinsDialog::coinControlFeatureChanged(bool checked)\n // Coin Control: button inputs -> show actual coin control dialog\n void SendCoinsDialog::coinControlButtonClicked()\n {\n-    CoinControlDialog dlg;\n+    CoinControlDialog dlg(platformStyle);\n     dlg.setModel(model);\n     dlg.exec();\n     coinControlUpdateLabels();"
      },
      {
        "sha": "391905ffcd7ac06d657f9af90a9efa5c56987d7c",
        "filename": "src/qt/sendcoinsdialog.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/sendcoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/sendcoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.h?ref=9848d4297be9818578c8e0cac6e614e2a8a33a4d",
        "patch": "@@ -12,6 +12,7 @@\n \n class ClientModel;\n class OptionsModel;\n+class PlatformStyle;\n class SendCoinsEntry;\n class SendCoinsRecipient;\n \n@@ -31,7 +32,7 @@ class SendCoinsDialog : public QDialog\n     Q_OBJECT\n \n public:\n-    explicit SendCoinsDialog(QWidget *parent = 0);\n+    explicit SendCoinsDialog(const PlatformStyle *platformStyle, QWidget *parent = 0);\n     ~SendCoinsDialog();\n \n     void setClientModel(ClientModel *clientModel);\n@@ -60,6 +61,7 @@ public Q_SLOTS:\n     WalletModel *model;\n     bool fNewRecipientAllowed;\n     bool fFeeMinimized;\n+    const PlatformStyle *platformStyle;\n \n     // Process WalletModel::SendCoinsReturn and generate a pair consisting\n     // of a message and message flags for use in Q_EMIT message()."
      },
      {
        "sha": "44aa8ad1af22a7aad4e42dfd51969eefef5c84ff",
        "filename": "src/qt/sendcoinsentry.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/sendcoinsentry.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/sendcoinsentry.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.cpp?ref=9848d4297be9818578c8e0cac6e614e2a8a33a4d",
        "patch": "@@ -9,30 +9,30 @@\n #include \"addresstablemodel.h\"\n #include \"guiutil.h\"\n #include \"optionsmodel.h\"\n-#include \"scicon.h\"\n+#include \"platformstyle.h\"\n #include \"walletmodel.h\"\n \n #include <QApplication>\n #include <QClipboard>\n \n-SendCoinsEntry::SendCoinsEntry(QWidget *parent) :\n+SendCoinsEntry::SendCoinsEntry(const PlatformStyle *platformStyle, QWidget *parent) :\n     QStackedWidget(parent),\n     ui(new Ui::SendCoinsEntry),\n-    model(0)\n+    model(0),\n+    platformStyle(platformStyle)\n {\n     ui->setupUi(this);\n \n-    ui->addressBookButton->setIcon(SingleColorIcon(\":/icons/address-book\"));\n-    ui->pasteButton->setIcon(SingleColorIcon(\":/icons/editpaste\"));\n-    ui->deleteButton->setIcon(SingleColorIcon(\":/icons/remove\"));\n-    ui->deleteButton_is->setIcon(SingleColorIcon(\":/icons/remove\"));\n-    ui->deleteButton_s->setIcon(SingleColorIcon(\":/icons/remove\"));\n+    ui->addressBookButton->setIcon(platformStyle->SingleColorIcon(\":/icons/address-book\"));\n+    ui->pasteButton->setIcon(platformStyle->SingleColorIcon(\":/icons/editpaste\"));\n+    ui->deleteButton->setIcon(platformStyle->SingleColorIcon(\":/icons/remove\"));\n+    ui->deleteButton_is->setIcon(platformStyle->SingleColorIcon(\":/icons/remove\"));\n+    ui->deleteButton_s->setIcon(platformStyle->SingleColorIcon(\":/icons/remove\"));\n \n     setCurrentWidget(ui->SendCoins);\n \n-#ifdef Q_OS_MAC\n-    ui->payToLayout->setSpacing(4);\n-#endif\n+    if (platformStyle->getUseExtraSpacing())\n+        ui->payToLayout->setSpacing(4);\n #if QT_VERSION >= 0x040700\n     ui->addAsLabel->setPlaceholderText(tr(\"Enter a label for this address to add it to your address book\"));\n #endif\n@@ -65,7 +65,7 @@ void SendCoinsEntry::on_addressBookButton_clicked()\n {\n     if(!model)\n         return;\n-    AddressBookPage dlg(AddressBookPage::ForSelection, AddressBookPage::SendingTab, this);\n+    AddressBookPage dlg(platformStyle, AddressBookPage::ForSelection, AddressBookPage::SendingTab, this);\n     dlg.setModel(model->getAddressTableModel());\n     if(dlg.exec())\n     {"
      },
      {
        "sha": "107ab70158c504e7674ed07eeaecae813490f38b",
        "filename": "src/qt/sendcoinsentry.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/sendcoinsentry.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/sendcoinsentry.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.h?ref=9848d4297be9818578c8e0cac6e614e2a8a33a4d",
        "patch": "@@ -10,6 +10,7 @@\n #include <QStackedWidget>\n \n class WalletModel;\n+class PlatformStyle;\n \n namespace Ui {\n     class SendCoinsEntry;\n@@ -25,7 +26,7 @@ class SendCoinsEntry : public QStackedWidget\n     Q_OBJECT\n \n public:\n-    explicit SendCoinsEntry(QWidget *parent = 0);\n+    explicit SendCoinsEntry(const PlatformStyle *platformStyle, QWidget *parent = 0);\n     ~SendCoinsEntry();\n \n     void setModel(WalletModel *model);\n@@ -64,6 +65,7 @@ private Q_SLOTS:\n     SendCoinsRecipient recipient;\n     Ui::SendCoinsEntry *ui;\n     WalletModel *model;\n+    const PlatformStyle *platformStyle;\n \n     bool updateLabel(const QString &address);\n };"
      },
      {
        "sha": "60e8e36ebe7548867b1c5eb45ac47153f5371580",
        "filename": "src/qt/signverifymessagedialog.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 13,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/signverifymessagedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/signverifymessagedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.cpp?ref=9848d4297be9818578c8e0cac6e614e2a8a33a4d",
        "patch": "@@ -7,7 +7,7 @@\n \n #include \"addressbookpage.h\"\n #include \"guiutil.h\"\n-#include \"scicon.h\"\n+#include \"platformstyle.h\"\n #include \"walletmodel.h\"\n \n #include \"base58.h\"\n@@ -20,21 +20,22 @@\n \n #include <QClipboard>\n \n-SignVerifyMessageDialog::SignVerifyMessageDialog(QWidget *parent) :\n+SignVerifyMessageDialog::SignVerifyMessageDialog(const PlatformStyle *platformStyle, QWidget *parent) :\n     QDialog(parent),\n     ui(new Ui::SignVerifyMessageDialog),\n-    model(0)\n+    model(0),\n+    platformStyle(platformStyle)\n {\n     ui->setupUi(this);\n \n-    ui->addressBookButton_SM->setIcon(SingleColorIcon(\":/icons/address-book\"));\n-    ui->pasteButton_SM->setIcon(SingleColorIcon(\":/icons/editpaste\"));\n-    ui->copySignatureButton_SM->setIcon(SingleColorIcon(\":/icons/editcopy\"));\n-    ui->signMessageButton_SM->setIcon(SingleColorIcon(\":/icons/edit\"));\n-    ui->clearButton_SM->setIcon(SingleColorIcon(\":/icons/remove\"));\n-    ui->addressBookButton_VM->setIcon(SingleColorIcon(\":/icons/address-book\"));\n-    ui->verifyMessageButton_VM->setIcon(SingleColorIcon(\":/icons/transaction_0\"));\n-    ui->clearButton_VM->setIcon(SingleColorIcon(\":/icons/remove\"));\n+    ui->addressBookButton_SM->setIcon(platformStyle->SingleColorIcon(\":/icons/address-book\"));\n+    ui->pasteButton_SM->setIcon(platformStyle->SingleColorIcon(\":/icons/editpaste\"));\n+    ui->copySignatureButton_SM->setIcon(platformStyle->SingleColorIcon(\":/icons/editcopy\"));\n+    ui->signMessageButton_SM->setIcon(platformStyle->SingleColorIcon(\":/icons/edit\"));\n+    ui->clearButton_SM->setIcon(platformStyle->SingleColorIcon(\":/icons/remove\"));\n+    ui->addressBookButton_VM->setIcon(platformStyle->SingleColorIcon(\":/icons/address-book\"));\n+    ui->verifyMessageButton_VM->setIcon(platformStyle->SingleColorIcon(\":/icons/transaction_0\"));\n+    ui->clearButton_VM->setIcon(platformStyle->SingleColorIcon(\":/icons/remove\"));\n \n #if QT_VERSION >= 0x040700\n     ui->signatureOut_SM->setPlaceholderText(tr(\"Click \\\"Sign Message\\\" to generate signature\"));\n@@ -94,7 +95,7 @@ void SignVerifyMessageDialog::on_addressBookButton_SM_clicked()\n {\n     if (model && model->getAddressTableModel())\n     {\n-        AddressBookPage dlg(AddressBookPage::ForSelection, AddressBookPage::ReceivingTab, this);\n+        AddressBookPage dlg(platformStyle, AddressBookPage::ForSelection, AddressBookPage::ReceivingTab, this);\n         dlg.setModel(model->getAddressTableModel());\n         if (dlg.exec())\n         {\n@@ -185,7 +186,7 @@ void SignVerifyMessageDialog::on_addressBookButton_VM_clicked()\n {\n     if (model && model->getAddressTableModel())\n     {\n-        AddressBookPage dlg(AddressBookPage::ForSelection, AddressBookPage::SendingTab, this);\n+        AddressBookPage dlg(platformStyle, AddressBookPage::ForSelection, AddressBookPage::SendingTab, this);\n         dlg.setModel(model->getAddressTableModel());\n         if (dlg.exec())\n         {"
      },
      {
        "sha": "d651d5049b5035dfcfee0e96b1d54148a6e43357",
        "filename": "src/qt/signverifymessagedialog.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/signverifymessagedialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/signverifymessagedialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.h?ref=9848d4297be9818578c8e0cac6e614e2a8a33a4d",
        "patch": "@@ -7,6 +7,7 @@\n \n #include <QDialog>\n \n+class PlatformStyle;\n class WalletModel;\n \n namespace Ui {\n@@ -18,7 +19,7 @@ class SignVerifyMessageDialog : public QDialog\n     Q_OBJECT\n \n public:\n-    explicit SignVerifyMessageDialog(QWidget *parent);\n+    explicit SignVerifyMessageDialog(const PlatformStyle *platformStyle, QWidget *parent);\n     ~SignVerifyMessageDialog();\n \n     void setModel(WalletModel *model);\n@@ -34,6 +35,7 @@ class SignVerifyMessageDialog : public QDialog\n private:\n     Ui::SignVerifyMessageDialog *ui;\n     WalletModel *model;\n+    const PlatformStyle *platformStyle;\n \n private Q_SLOTS:\n     /* sign message */"
      },
      {
        "sha": "98ad1a44b68fac46ac109e223a49d9dbc23bafe2",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=9848d4297be9818578c8e0cac6e614e2a8a33a4d",
        "patch": "@@ -8,7 +8,7 @@\n #include \"guiconstants.h\"\n #include \"guiutil.h\"\n #include \"optionsmodel.h\"\n-#include \"scicon.h\"\n+#include \"platformstyle.h\"\n #include \"transactiondesc.h\"\n #include \"transactionrecord.h\"\n #include \"walletmodel.h\"\n@@ -222,12 +222,13 @@ class TransactionTablePriv\n     }\n };\n \n-TransactionTableModel::TransactionTableModel(CWallet* wallet, WalletModel *parent):\n+TransactionTableModel::TransactionTableModel(const PlatformStyle *platformStyle, CWallet* wallet, WalletModel *parent):\n         QAbstractTableModel(parent),\n         wallet(wallet),\n         walletModel(parent),\n         priv(new TransactionTablePriv(wallet, this)),\n-        fProcessingQueuedTransactions(false)\n+        fProcessingQueuedTransactions(false),\n+        platformStyle(platformStyle)\n {\n     columns << QString() << QString() << tr(\"Date\") << tr(\"Type\") << tr(\"Label\") << BitcoinUnits::getAmountColumnTitle(walletModel->getOptionsModel()->getDisplayUnit());\n     priv->refreshWallet();\n@@ -521,7 +522,7 @@ QVariant TransactionTableModel::data(const QModelIndex &index, int role) const\n     case Qt::DecorationRole:\n     {\n         QIcon icon = qvariant_cast<QIcon>(index.data(RawDecorationRole));\n-        return TextColorIcon(icon);\n+        return platformStyle->TextColorIcon(icon);\n     }\n     case Qt::DisplayRole:\n         switch(index.column())"
      },
      {
        "sha": "2089f703a66af616145a9e73e1c8d129d7466449",
        "filename": "src/qt/transactiontablemodel.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/transactiontablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/transactiontablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.h?ref=9848d4297be9818578c8e0cac6e614e2a8a33a4d",
        "patch": "@@ -10,6 +10,7 @@\n #include <QAbstractTableModel>\n #include <QStringList>\n \n+class PlatformStyle;\n class TransactionRecord;\n class TransactionTablePriv;\n class WalletModel;\n@@ -23,7 +24,7 @@ class TransactionTableModel : public QAbstractTableModel\n     Q_OBJECT\n \n public:\n-    explicit TransactionTableModel(CWallet* wallet, WalletModel *parent = 0);\n+    explicit TransactionTableModel(const PlatformStyle *platformStyle, CWallet* wallet, WalletModel *parent = 0);\n     ~TransactionTableModel();\n \n     enum ColumnIndex {\n@@ -82,6 +83,7 @@ class TransactionTableModel : public QAbstractTableModel\n     QStringList columns;\n     TransactionTablePriv *priv;\n     bool fProcessingQueuedTransactions;\n+    const PlatformStyle *platformStyle;\n \n     void subscribeToCoreSignals();\n     void unsubscribeFromCoreSignals();"
      },
      {
        "sha": "54e5a82720336cf47346f3eed8f34a8914fc8915",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 31,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=9848d4297be9818578c8e0cac6e614e2a8a33a4d",
        "patch": "@@ -10,7 +10,7 @@\n #include \"editaddressdialog.h\"\n #include \"guiutil.h\"\n #include \"optionsmodel.h\"\n-#include \"scicon.h\"\n+#include \"platformstyle.h\"\n #include \"transactiondescdialog.h\"\n #include \"transactionfilterproxy.h\"\n #include \"transactionrecord.h\"\n@@ -35,7 +35,7 @@\n #include <QUrl>\n #include <QVBoxLayout>\n \n-TransactionView::TransactionView(QWidget *parent) :\n+TransactionView::TransactionView(const PlatformStyle *platformStyle, QWidget *parent) :\n     QWidget(parent), model(0), transactionProxyModel(0),\n     transactionView(0)\n {\n@@ -44,27 +44,28 @@ TransactionView::TransactionView(QWidget *parent) :\n \n     QHBoxLayout *hlayout = new QHBoxLayout();\n     hlayout->setContentsMargins(0,0,0,0);\n-#ifdef Q_OS_MAC\n-    hlayout->setSpacing(5);\n-    hlayout->addSpacing(26);\n-#else\n-    hlayout->setSpacing(0);\n-    hlayout->addSpacing(23);\n-#endif\n+\n+    if (platformStyle->getUseExtraSpacing()) {\n+        hlayout->setSpacing(5);\n+        hlayout->addSpacing(26);\n+    } else {\n+        hlayout->setSpacing(0);\n+        hlayout->addSpacing(23);\n+    }\n \n     watchOnlyWidget = new QComboBox(this);\n     watchOnlyWidget->setFixedWidth(24);\n     watchOnlyWidget->addItem(\"\", TransactionFilterProxy::WatchOnlyFilter_All);\n-    watchOnlyWidget->addItem(SingleColorIcon(\":/icons/eye_plus\"), \"\", TransactionFilterProxy::WatchOnlyFilter_Yes);\n-    watchOnlyWidget->addItem(SingleColorIcon(\":/icons/eye_minus\"), \"\", TransactionFilterProxy::WatchOnlyFilter_No);\n+    watchOnlyWidget->addItem(platformStyle->SingleColorIcon(\":/icons/eye_plus\"), \"\", TransactionFilterProxy::WatchOnlyFilter_Yes);\n+    watchOnlyWidget->addItem(platformStyle->SingleColorIcon(\":/icons/eye_minus\"), \"\", TransactionFilterProxy::WatchOnlyFilter_No);\n     hlayout->addWidget(watchOnlyWidget);\n \n     dateWidget = new QComboBox(this);\n-#ifdef Q_OS_MAC\n-    dateWidget->setFixedWidth(121);\n-#else\n-    dateWidget->setFixedWidth(120);\n-#endif\n+    if (platformStyle->getUseExtraSpacing()) {\n+        dateWidget->setFixedWidth(121);\n+    } else {\n+        dateWidget->setFixedWidth(120);\n+    }\n     dateWidget->addItem(tr(\"All\"), All);\n     dateWidget->addItem(tr(\"Today\"), Today);\n     dateWidget->addItem(tr(\"This week\"), ThisWeek);\n@@ -75,11 +76,11 @@ TransactionView::TransactionView(QWidget *parent) :\n     hlayout->addWidget(dateWidget);\n \n     typeWidget = new QComboBox(this);\n-#ifdef Q_OS_MAC\n-    typeWidget->setFixedWidth(121);\n-#else\n-    typeWidget->setFixedWidth(120);\n-#endif\n+    if (platformStyle->getUseExtraSpacing()) {\n+        typeWidget->setFixedWidth(121);\n+    } else {\n+        typeWidget->setFixedWidth(120);\n+    }\n \n     typeWidget->addItem(tr(\"All\"), TransactionFilterProxy::ALL_TYPES);\n     typeWidget->addItem(tr(\"Received with\"), TransactionFilterProxy::TYPE(TransactionRecord::RecvWithAddress) |\n@@ -102,11 +103,11 @@ TransactionView::TransactionView(QWidget *parent) :\n #if QT_VERSION >= 0x040700\n     amountWidget->setPlaceholderText(tr(\"Min amount\"));\n #endif\n-#ifdef Q_OS_MAC\n-    amountWidget->setFixedWidth(97);\n-#else\n-    amountWidget->setFixedWidth(100);\n-#endif\n+    if (platformStyle->getUseExtraSpacing()) {\n+        amountWidget->setFixedWidth(97);\n+    } else {\n+        amountWidget->setFixedWidth(100);\n+    }\n     amountWidget->setValidator(new QDoubleValidator(0, 1e20, 8, this));\n     hlayout->addWidget(amountWidget);\n \n@@ -121,11 +122,11 @@ TransactionView::TransactionView(QWidget *parent) :\n     vlayout->setSpacing(0);\n     int width = view->verticalScrollBar()->sizeHint().width();\n     // Cover scroll bar width with spacing\n-#ifdef Q_OS_MAC\n-    hlayout->addSpacing(width+2);\n-#else\n-    hlayout->addSpacing(width);\n-#endif\n+    if (platformStyle->getUseExtraSpacing()) {\n+        hlayout->addSpacing(width+2);\n+    } else {\n+        hlayout->addSpacing(width);\n+    }\n     // Always show scroll bar\n     view->setVerticalScrollBarPolicy(Qt::ScrollBarAlwaysOn);\n     view->setTabKeyNavigation(false);"
      },
      {
        "sha": "ac157fb98d86cbbe5199c1daba02241ea11b5b2d",
        "filename": "src/qt/transactionview.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/transactionview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/transactionview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.h?ref=9848d4297be9818578c8e0cac6e614e2a8a33a4d",
        "patch": "@@ -10,6 +10,7 @@\n #include <QWidget>\n #include <QKeyEvent>\n \n+class PlatformStyle;\n class TransactionFilterProxy;\n class WalletModel;\n \n@@ -32,7 +33,7 @@ class TransactionView : public QWidget\n     Q_OBJECT\n \n public:\n-    explicit TransactionView(QWidget *parent = 0);\n+    explicit TransactionView(const PlatformStyle *platformStyle, QWidget *parent = 0);\n \n     void setModel(WalletModel *model);\n "
      },
      {
        "sha": "ba8c28464d7f5654b61dd2f790b915cd60a9dee9",
        "filename": "src/qt/walletframe.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/walletframe.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/walletframe.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletframe.cpp?ref=9848d4297be9818578c8e0cac6e614e2a8a33a4d",
        "patch": "@@ -12,9 +12,10 @@\n #include <QHBoxLayout>\n #include <QLabel>\n \n-WalletFrame::WalletFrame(BitcoinGUI *_gui) :\n+WalletFrame::WalletFrame(const PlatformStyle *platformStyle, BitcoinGUI *_gui) :\n     QFrame(_gui),\n-    gui(_gui)\n+    gui(_gui),\n+    platformStyle(platformStyle)\n {\n     // Leave HBox hook for adding a list view later\n     QHBoxLayout *walletFrameLayout = new QHBoxLayout(this);\n@@ -42,7 +43,7 @@ bool WalletFrame::addWallet(const QString& name, WalletModel *walletModel)\n     if (!gui || !clientModel || !walletModel || mapWalletViews.count(name) > 0)\n         return false;\n \n-    WalletView *walletView = new WalletView(this);\n+    WalletView *walletView = new WalletView(platformStyle, this);\n     walletView->setBitcoinGUI(gui);\n     walletView->setClientModel(clientModel);\n     walletView->setWalletModel(walletModel);"
      },
      {
        "sha": "9a56e97f9cfe9eb5c0e557d5189fda98c0949622",
        "filename": "src/qt/walletframe.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/walletframe.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/walletframe.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletframe.h?ref=9848d4297be9818578c8e0cac6e614e2a8a33a4d",
        "patch": "@@ -10,6 +10,7 @@\n \n class BitcoinGUI;\n class ClientModel;\n+class PlatformStyle;\n class SendCoinsRecipient;\n class WalletModel;\n class WalletView;\n@@ -23,7 +24,7 @@ class WalletFrame : public QFrame\n     Q_OBJECT\n \n public:\n-    explicit WalletFrame(BitcoinGUI *_gui = 0);\n+    explicit WalletFrame(const PlatformStyle *platformStyle, BitcoinGUI *_gui = 0);\n     ~WalletFrame();\n \n     void setClientModel(ClientModel *clientModel);\n@@ -45,6 +46,8 @@ class WalletFrame : public QFrame\n \n     bool bOutOfSync;\n \n+    const PlatformStyle *platformStyle;\n+\n     WalletView *currentWalletView();\n \n public Q_SLOTS:"
      },
      {
        "sha": "f580853732cb76d3bf022ba316d11026c6c7a5a4",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=9848d4297be9818578c8e0cac6e614e2a8a33a4d",
        "patch": "@@ -27,7 +27,7 @@\n \n #include <boost/foreach.hpp>\n \n-WalletModel::WalletModel(CWallet *wallet, OptionsModel *optionsModel, QObject *parent) :\n+WalletModel::WalletModel(const PlatformStyle *platformStyle, CWallet *wallet, OptionsModel *optionsModel, QObject *parent) :\n     QObject(parent), wallet(wallet), optionsModel(optionsModel), addressTableModel(0),\n     transactionTableModel(0),\n     recentRequestsTableModel(0),\n@@ -39,7 +39,7 @@ WalletModel::WalletModel(CWallet *wallet, OptionsModel *optionsModel, QObject *p\n     fForceCheckBalanceChanged = false;\n \n     addressTableModel = new AddressTableModel(wallet, this);\n-    transactionTableModel = new TransactionTableModel(wallet, this);\n+    transactionTableModel = new TransactionTableModel(platformStyle, wallet, this);\n     recentRequestsTableModel = new RecentRequestsTableModel(wallet, this);\n \n     // This timer will be fired repeatedly to update the balance"
      },
      {
        "sha": "c29682e4f67a21c89525990960bb060530829219",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=9848d4297be9818578c8e0cac6e614e2a8a33a4d",
        "patch": "@@ -17,6 +17,7 @@\n \n class AddressTableModel;\n class OptionsModel;\n+class PlatformStyle;\n class RecentRequestsTableModel;\n class TransactionTableModel;\n class WalletModelTransaction;\n@@ -100,7 +101,7 @@ class WalletModel : public QObject\n     Q_OBJECT\n \n public:\n-    explicit WalletModel(CWallet *wallet, OptionsModel *optionsModel, QObject *parent = 0);\n+    explicit WalletModel(const PlatformStyle *platformStyle, CWallet *wallet, OptionsModel *optionsModel, QObject *parent = 0);\n     ~WalletModel();\n \n     enum StatusCode // Returned by sendCoins"
      },
      {
        "sha": "fa96f62e033e17bfe76fd64bd76cb352a0e64c0f",
        "filename": "src/qt/walletview.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 14,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/walletview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/walletview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.cpp?ref=9848d4297be9818578c8e0cac6e614e2a8a33a4d",
        "patch": "@@ -11,8 +11,8 @@\n #include \"guiutil.h\"\n #include \"optionsmodel.h\"\n #include \"overviewpage.h\"\n+#include \"platformstyle.h\"\n #include \"receivecoinsdialog.h\"\n-#include \"scicon.h\"\n #include \"sendcoinsdialog.h\"\n #include \"signverifymessagedialog.h\"\n #include \"transactiontablemodel.h\"\n@@ -29,31 +29,32 @@\n #include <QPushButton>\n #include <QVBoxLayout>\n \n-WalletView::WalletView(QWidget *parent):\n+WalletView::WalletView(const PlatformStyle *platformStyle, QWidget *parent):\n     QStackedWidget(parent),\n     clientModel(0),\n-    walletModel(0)\n+    walletModel(0),\n+    platformStyle(platformStyle)\n {\n     // Create tabs\n-    overviewPage = new OverviewPage();\n+    overviewPage = new OverviewPage(platformStyle);\n \n     transactionsPage = new QWidget(this);\n     QVBoxLayout *vbox = new QVBoxLayout();\n     QHBoxLayout *hbox_buttons = new QHBoxLayout();\n-    transactionView = new TransactionView(this);\n+    transactionView = new TransactionView(platformStyle, this);\n     vbox->addWidget(transactionView);\n     QPushButton *exportButton = new QPushButton(tr(\"&Export\"), this);\n     exportButton->setToolTip(tr(\"Export the data in the current tab to a file\"));\n-#ifndef Q_OS_MAC // Icons on push buttons are very uncommon on Mac\n-    exportButton->setIcon(SingleColorIcon(\":/icons/export\"));\n-#endif\n+    if (platformStyle->getImagesOnButtons()) {\n+        exportButton->setIcon(platformStyle->SingleColorIcon(\":/icons/export\"));\n+    }\n     hbox_buttons->addStretch();\n     hbox_buttons->addWidget(exportButton);\n     vbox->addLayout(hbox_buttons);\n     transactionsPage->setLayout(vbox);\n \n-    receiveCoinsPage = new ReceiveCoinsDialog();\n-    sendCoinsPage = new SendCoinsDialog();\n+    receiveCoinsPage = new ReceiveCoinsDialog(platformStyle);\n+    sendCoinsPage = new SendCoinsDialog(platformStyle);\n \n     addWidget(overviewPage);\n     addWidget(transactionsPage);\n@@ -182,7 +183,7 @@ void WalletView::gotoSendCoinsPage(QString addr)\n void WalletView::gotoSignMessageTab(QString addr)\n {\n     // calls show() in showTab_SM()\n-    SignVerifyMessageDialog *signVerifyMessageDialog = new SignVerifyMessageDialog(this);\n+    SignVerifyMessageDialog *signVerifyMessageDialog = new SignVerifyMessageDialog(platformStyle, this);\n     signVerifyMessageDialog->setAttribute(Qt::WA_DeleteOnClose);\n     signVerifyMessageDialog->setModel(walletModel);\n     signVerifyMessageDialog->showTab_SM(true);\n@@ -194,7 +195,7 @@ void WalletView::gotoSignMessageTab(QString addr)\n void WalletView::gotoVerifyMessageTab(QString addr)\n {\n     // calls show() in showTab_VM()\n-    SignVerifyMessageDialog *signVerifyMessageDialog = new SignVerifyMessageDialog(this);\n+    SignVerifyMessageDialog *signVerifyMessageDialog = new SignVerifyMessageDialog(platformStyle, this);\n     signVerifyMessageDialog->setAttribute(Qt::WA_DeleteOnClose);\n     signVerifyMessageDialog->setModel(walletModel);\n     signVerifyMessageDialog->showTab_VM(true);\n@@ -272,7 +273,7 @@ void WalletView::usedSendingAddresses()\n {\n     if(!walletModel)\n         return;\n-    AddressBookPage *dlg = new AddressBookPage(AddressBookPage::ForEditing, AddressBookPage::SendingTab, this);\n+    AddressBookPage *dlg = new AddressBookPage(platformStyle, AddressBookPage::ForEditing, AddressBookPage::SendingTab, this);\n     dlg->setAttribute(Qt::WA_DeleteOnClose);\n     dlg->setModel(walletModel->getAddressTableModel());\n     dlg->show();\n@@ -282,7 +283,7 @@ void WalletView::usedReceivingAddresses()\n {\n     if(!walletModel)\n         return;\n-    AddressBookPage *dlg = new AddressBookPage(AddressBookPage::ForEditing, AddressBookPage::ReceivingTab, this);\n+    AddressBookPage *dlg = new AddressBookPage(platformStyle, AddressBookPage::ForEditing, AddressBookPage::ReceivingTab, this);\n     dlg->setAttribute(Qt::WA_DeleteOnClose);\n     dlg->setModel(walletModel->getAddressTableModel());\n     dlg->show();"
      },
      {
        "sha": "f97cf1ee807778c01eed5c8176a287190be191cd",
        "filename": "src/qt/walletview.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/walletview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9848d4297be9818578c8e0cac6e614e2a8a33a4d/src/qt/walletview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.h?ref=9848d4297be9818578c8e0cac6e614e2a8a33a4d",
        "patch": "@@ -12,6 +12,7 @@\n class BitcoinGUI;\n class ClientModel;\n class OverviewPage;\n+class PlatformStyle;\n class ReceiveCoinsDialog;\n class SendCoinsDialog;\n class SendCoinsRecipient;\n@@ -34,7 +35,7 @@ class WalletView : public QStackedWidget\n     Q_OBJECT\n \n public:\n-    explicit WalletView(QWidget *parent);\n+    explicit WalletView(const PlatformStyle *platformStyle, QWidget *parent);\n     ~WalletView();\n \n     void setBitcoinGUI(BitcoinGUI *gui);\n@@ -64,6 +65,7 @@ class WalletView : public QStackedWidget\n     TransactionView *transactionView;\n \n     QProgressDialog *progressDialog;\n+    const PlatformStyle *platformStyle;\n \n public Q_SLOTS:\n     /** Switch to overview (home) page */"
      }
    ]
  },
  {
    "sha": "86cfd23f68367af072500b1758a4c446cdd36e74",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NmNmZDIzZjY4MzY3YWYwNzI1MDBiMTc1OGE0YzQ0NmNkZDM2ZTc0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-31T08:10:41Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-31T08:10:55Z"
      },
      "message": "Merge pull request #6473\n\n5fb5c9b Clean up chainparams some more. (Daniel Kraft)",
      "tree": {
        "sha": "897d5ae02527a539bc6be09be95c1843b0ab11f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/897d5ae02527a539bc6be09be95c1843b0ab11f5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/86cfd23f68367af072500b1758a4c446cdd36e74",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVuy2PAAoJEHSBCwEjRsmm+VMH/itMWFQznAI5+I8Df5u5/OV7\nxcY/ewpUWrSIYpL6wCiUfQ+wkkyN32P8Y2tdXhBLaoWlZ3yjmqsUXMdtJNePs/We\nhk6DjpGOo8kKP+0RAKFtY4n57mFQ/vfmFolENASugn7BjKeQ8XMek99gJZiaaKk+\nD4b2/ACZTpovddT7+fm0Lr20PEk3pQVrDBK9Tq0fVTgZ2Ku4DqhUGkzXuQOAiGXA\nfHsZI1sB+osU1AmKg7JlYP6xy3lIHrTVoz3Us4SLmzPeoeT7sso1wQXBZizbLlTn\nKsCZgilDmefjKKSWUB8MqW/Cbo2dg689KmavokKnY6+EZn/a6e9Uc2+XwgkI3aw=\n=1Huc\n-----END PGP SIGNATURE-----",
        "payload": "tree 897d5ae02527a539bc6be09be95c1843b0ab11f5\nparent 9848d4297be9818578c8e0cac6e614e2a8a33a4d\nparent 5fb5c9b21335edfe193513ae3fe3f09c1cefe24b\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1438330241 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1438330255 +0200\n\nMerge pull request #6473\n\n5fb5c9b Clean up chainparams some more. (Daniel Kraft)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86cfd23f68367af072500b1758a4c446cdd36e74",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/86cfd23f68367af072500b1758a4c446cdd36e74",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86cfd23f68367af072500b1758a4c446cdd36e74/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9848d4297be9818578c8e0cac6e614e2a8a33a4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9848d4297be9818578c8e0cac6e614e2a8a33a4d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9848d4297be9818578c8e0cac6e614e2a8a33a4d"
      },
      {
        "sha": "5fb5c9b21335edfe193513ae3fe3f09c1cefe24b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fb5c9b21335edfe193513ae3fe3f09c1cefe24b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5fb5c9b21335edfe193513ae3fe3f09c1cefe24b"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 12,
      "deletions": 8
    },
    "files": [
      {
        "sha": "623104690a16b81174dd09e45a555f6ce8d713c9",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 8,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86cfd23f68367af072500b1758a4c446cdd36e74/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86cfd23f68367af072500b1758a4c446cdd36e74/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=86cfd23f68367af072500b1758a4c446cdd36e74",
        "patch": "@@ -16,7 +16,7 @@ using namespace std;\n \n #include \"chainparamsseeds.h\"\n \n-static CBlock CreateGenesisBlock(const char* pszTimestamp, CScript genesisOutputScript, uint32_t nTime=1231006505, uint32_t nNonce=2083236893, uint32_t nBits=0x1d00ffff, int32_t nVersion=1, const CAmount& genesisReward=50 * COIN)\n+static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesisOutputScript, uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)\n {\n     CMutableTransaction txNew;\n     txNew.nVersion = 1;\n@@ -48,10 +48,10 @@ static CBlock CreateGenesisBlock(const char* pszTimestamp, CScript genesisOutput\n  *     CTxOut(nValue=50.00000000, scriptPubKey=0x5F1DF16B2B704C8A578D0B)\n  *   vMerkleTree: 4a5e1e\n  */\n-static CBlock CreateGenesisBlock(uint32_t nTime=1231006505, uint32_t nNonce=2083236893, uint32_t nBits=0x1d00ffff, int32_t nVersion=1, const CAmount& genesisReward=50 * COIN)\n+static CBlock CreateGenesisBlock(uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)\n {\n     const char* pszTimestamp = \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\";\n-    CScript genesisOutputScript = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n+    const CScript genesisOutputScript = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n     return CreateGenesisBlock(pszTimestamp, genesisOutputScript, nTime, nNonce, nBits, nVersion, genesisReward);\n }\n \n@@ -91,7 +91,7 @@ class CMainParams : public CChainParams {\n         nDefaultPort = 8333;\n         nPruneAfterHeight = 100000;\n \n-        genesis = CreateGenesisBlock();\n+        genesis = CreateGenesisBlock(1231006505, 2083236893, 0x1d00ffff, 1, 50 * COIN);\n         consensus.hashGenesisBlock = genesis.GetHash();\n         assert(consensus.hashGenesisBlock == uint256S(\"0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\"));\n         assert(genesis.hashMerkleRoot == uint256S(\"0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"));\n@@ -164,9 +164,10 @@ class CTestNetParams : public CChainParams {\n         nDefaultPort = 18333;\n         nPruneAfterHeight = 1000;\n \n-        genesis = CreateGenesisBlock(1296688602, 414098458);\n+        genesis = CreateGenesisBlock(1296688602, 414098458, 0x1d00ffff, 1, 50 * COIN);\n         consensus.hashGenesisBlock = genesis.GetHash();\n         assert(consensus.hashGenesisBlock == uint256S(\"0x000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943\"));\n+        assert(genesis.hashMerkleRoot == uint256S(\"0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"));\n \n         vFixedSeeds.clear();\n         vSeeds.clear();\n@@ -216,16 +217,19 @@ class CRegTestParams : public CChainParams {\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = true;\n+\n         pchMessageStart[0] = 0xfa;\n         pchMessageStart[1] = 0xbf;\n         pchMessageStart[2] = 0xb5;\n         pchMessageStart[3] = 0xda;\n-        genesis = CreateGenesisBlock(1296688602, 2, 0x207fffff);\n-        consensus.hashGenesisBlock = genesis.GetHash();\n         nDefaultPort = 18444;\n-        assert(consensus.hashGenesisBlock == uint256S(\"0x0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"));\n         nPruneAfterHeight = 1000;\n \n+        genesis = CreateGenesisBlock(1296688602, 2, 0x207fffff, 1, 50 * COIN);\n+        consensus.hashGenesisBlock = genesis.GetHash();\n+        assert(consensus.hashGenesisBlock == uint256S(\"0x0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"));\n+        assert(genesis.hashMerkleRoot == uint256S(\"0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"));\n+\n         vFixedSeeds.clear(); //! Regtest mode doesn't have any fixed seeds.\n         vSeeds.clear();  //! Regtest mode doesn't have any DNS seeds.\n "
      }
    ]
  },
  {
    "sha": "557f8eac7aa96059270a36358642fbce93ac0478",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NTdmOGVhYzdhYTk2MDU5MjcwYTM2MzU4NjQyZmJjZTkzYWMwNDc4",
    "commit": {
      "author": {
        "name": "Pavol Rusnak",
        "email": "stick@gk2.sk",
        "date": "2015-07-27T23:58:25Z"
      },
      "committer": {
        "name": "Pavol Rusnak",
        "email": "stick@gk2.sk",
        "date": "2015-07-31T14:19:23Z"
      },
      "message": "implement uacomment config parameter\nwhich can add comments to user agent as per BIP-0014",
      "tree": {
        "sha": "963e6f48d33b75d56f735bff136bc8dc03450192",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/963e6f48d33b75d56f735bff136bc8dc03450192"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/557f8eac7aa96059270a36358642fbce93ac0478",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/557f8eac7aa96059270a36358642fbce93ac0478",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/557f8eac7aa96059270a36358642fbce93ac0478",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/557f8eac7aa96059270a36358642fbce93ac0478/comments",
    "author": {
      "login": "prusnak",
      "id": 42201,
      "node_id": "MDQ6VXNlcjQyMjAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/42201?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prusnak",
      "html_url": "https://github.com/prusnak",
      "followers_url": "https://api.github.com/users/prusnak/followers",
      "following_url": "https://api.github.com/users/prusnak/following{/other_user}",
      "gists_url": "https://api.github.com/users/prusnak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prusnak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prusnak/subscriptions",
      "organizations_url": "https://api.github.com/users/prusnak/orgs",
      "repos_url": "https://api.github.com/users/prusnak/repos",
      "events_url": "https://api.github.com/users/prusnak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prusnak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "prusnak",
      "id": 42201,
      "node_id": "MDQ6VXNlcjQyMjAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/42201?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prusnak",
      "html_url": "https://github.com/prusnak",
      "followers_url": "https://api.github.com/users/prusnak/followers",
      "following_url": "https://api.github.com/users/prusnak/following{/other_user}",
      "gists_url": "https://api.github.com/users/prusnak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prusnak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prusnak/subscriptions",
      "organizations_url": "https://api.github.com/users/prusnak/orgs",
      "repos_url": "https://api.github.com/users/prusnak/repos",
      "events_url": "https://api.github.com/users/prusnak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prusnak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "86cfd23f68367af072500b1758a4c446cdd36e74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86cfd23f68367af072500b1758a4c446cdd36e74",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/86cfd23f68367af072500b1758a4c446cdd36e74"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "42ca69e096785c51d56834e373936f7359cb13b4",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/557f8eac7aa96059270a36358642fbce93ac0478/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/557f8eac7aa96059270a36358642fbce93ac0478/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=557f8eac7aa96059270a36358642fbce93ac0478",
        "patch": "@@ -445,7 +445,7 @@ void CNode::PushVersion()\n     else\n         LogPrint(\"net\", \"send version message: version %d, blocks=%d, us=%s, peer=%d\\n\", PROTOCOL_VERSION, nBestHeight, addrMe.ToString(), id);\n     PushMessage(\"version\", PROTOCOL_VERSION, nLocalServices, nTime, addrYou, addrMe,\n-                nLocalHostNonce, FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, std::vector<string>()), nBestHeight, true);\n+                nLocalHostNonce, FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, mapMultiArgs.count(\"-uacomment\") ? mapMultiArgs[\"-uacomment\"] : std::vector<string>()), nBestHeight, true);\n }\n \n "
      },
      {
        "sha": "f9c7d3ad30e3476ed65aaba40afbfc953242b2ee",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/557f8eac7aa96059270a36358642fbce93ac0478/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/557f8eac7aa96059270a36358642fbce93ac0478/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=557f8eac7aa96059270a36358642fbce93ac0478",
        "patch": "@@ -444,7 +444,7 @@ UniValue getnetworkinfo(const UniValue& params, bool fHelp)\n     UniValue obj(UniValue::VOBJ);\n     obj.push_back(Pair(\"version\",       CLIENT_VERSION));\n     obj.push_back(Pair(\"subversion\",\n-        FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, std::vector<string>())));\n+        FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, mapMultiArgs.count(\"-uacomment\") ? mapMultiArgs[\"-uacomment\"] : std::vector<string>())));\n     obj.push_back(Pair(\"protocolversion\",PROTOCOL_VERSION));\n     obj.push_back(Pair(\"localservices\",       strprintf(\"%016x\", nLocalServices)));\n     obj.push_back(Pair(\"timeoffset\",    GetTimeOffset()));"
      }
    ]
  },
  {
    "sha": "a8d0407c4fcf7c4e8ed0e8edabd204f7a4efa477",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOGQwNDA3YzRmY2Y3YzRlOGVkMGU4ZWRhYmQyMDRmN2E0ZWZhNDc3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-31T15:55:05Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-31T15:58:12Z"
      },
      "message": "Move recentRejects initialization to top of InitBlockIndex\n\nThis avoids that premature return in the condition that a new chain is initialized\nresults in NULL pointer errors due to recentReject not being constructed.\n\nAlso add assertions where it is used.",
      "tree": {
        "sha": "a11ac0a3d552c4c75238376bcf8fea899080356d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a11ac0a3d552c4c75238376bcf8fea899080356d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a8d0407c4fcf7c4e8ed0e8edabd204f7a4efa477",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8d0407c4fcf7c4e8ed0e8edabd204f7a4efa477",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a8d0407c4fcf7c4e8ed0e8edabd204f7a4efa477",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8d0407c4fcf7c4e8ed0e8edabd204f7a4efa477/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0847d9cb5fcd2fdd5a21bde699944d966cf5add9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0847d9cb5fcd2fdd5a21bde699944d966cf5add9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0847d9cb5fcd2fdd5a21bde699944d966cf5add9"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 7,
      "deletions": 3
    },
    "files": [
      {
        "sha": "0ad41af955296d2f23b52319278b68ba6f088890",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8d0407c4fcf7c4e8ed0e8edabd204f7a4efa477/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8d0407c4fcf7c4e8ed0e8edabd204f7a4efa477/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a8d0407c4fcf7c4e8ed0e8edabd204f7a4efa477",
        "patch": "@@ -3311,6 +3311,10 @@ bool LoadBlockIndex()\n bool InitBlockIndex() {\n     const CChainParams& chainparams = Params();\n     LOCK(cs_main);\n+\n+    // Initialize global variables that cannot be constructed at startup.\n+    recentRejects.reset(new CRollingBloomFilter(120000, 0.000001));\n+\n     // Check whether we're already initialized\n     if (chainActive.Genesis() != NULL)\n         return true;\n@@ -3344,9 +3348,6 @@ bool InitBlockIndex() {\n         }\n     }\n \n-    // Initialize global variables that cannot be constructed at startup.\n-    recentRejects.reset(new CRollingBloomFilter(120000, 0.000001));\n-\n     return true;\n }\n \n@@ -3716,6 +3717,7 @@ bool static AlreadyHave(const CInv& inv) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n     {\n     case MSG_TX:\n         {\n+            assert(recentRejects);\n             if (chainActive.Tip()->GetBlockHash() != hashRecentRejectsChainTip)\n             {\n                 // If the chain tip has changed previously rejected transactions\n@@ -4329,6 +4331,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                         // Probably non-standard or insufficient fee/priority\n                         LogPrint(\"mempool\", \"   removed orphan tx %s\\n\", orphanHash.ToString());\n                         vEraseQueue.push_back(orphanHash);\n+                        assert(recentRejects);\n                         recentRejects->insert(orphanHash);\n                     }\n                     mempool.check(pcoinsTip);\n@@ -4352,6 +4355,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             // already in the mempool; if the tx isn't in the mempool that\n             // means it was rejected and we shouldn't ask for it again.\n             if (!mempool.exists(tx.GetHash())) {\n+                assert(recentRejects);\n                 recentRejects->insert(tx.GetHash());\n             }\n             if (pfrom->fWhitelisted) {"
      }
    ]
  },
  {
    "sha": "d9add719519e2019b1f353d8d6832dcfc88ee850",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOWFkZDcxOTUxOWUyMDE5YjFmMzUzZDhkNjgzMmRjZmM4OGVlODUw",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-08-01T03:15:56Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-08-01T03:16:13Z"
      },
      "message": "build: fix libressl detection\n\nChecking libcrypto for a function after we've already found a (possibly\ndifferent) libcrypto is not what we want to do here.\n\npkg-config might've found a cross lib while AC_CHECK_LIB may find a different\nor native one.\n\nRun a link-test against the lib that's already been found instead.",
      "tree": {
        "sha": "369aac7d28076352ccfd12ced0c0b3f82f93651f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/369aac7d28076352ccfd12ced0c0b3f82f93651f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d9add719519e2019b1f353d8d6832dcfc88ee850",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9add719519e2019b1f353d8d6832dcfc88ee850",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d9add719519e2019b1f353d8d6832dcfc88ee850",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9add719519e2019b1f353d8d6832dcfc88ee850/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eddaba7b5692288087a926da5733e86b47274e4e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eddaba7b5692288087a926da5733e86b47274e4e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eddaba7b5692288087a926da5733e86b47274e4e"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 15,
      "deletions": 8
    },
    "files": [
      {
        "sha": "a524bded6fa3e386d958305c971858f7639fbebe",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 15,
        "deletions": 8,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9add719519e2019b1f353d8d6832dcfc88ee850/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9add719519e2019b1f353d8d6832dcfc88ee850/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=d9add719519e2019b1f353d8d6832dcfc88ee850",
        "patch": "@@ -680,19 +680,26 @@ else\n   fi\n fi\n \n-AC_CHECK_LIB([crypto],[RAND_egd],[],[\n-  AC_ARG_WITH([libressl],\n-    [AS_HELP_STRING([--with-libressl],[Build with system LibreSSL (default is no; DANGEROUS; NOT SUPPORTED)])],\n-    [AC_MSG_WARN([Detected LibreSSL: This is NOT supported, and may break consensus compatibility!])],\n-    [AC_MSG_ERROR([Detected LibreSSL: This is NOT supported, and may break consensus compatibility!])]\n-  )\n-])\n-\n CFLAGS_TEMP=\"$CFLAGS\"\n LIBS_TEMP=\"$LIBS\"\n CFLAGS=\"$CFLAGS $SSL_CFLAGS $CRYPTO_CFLAGS\"\n LIBS=\"$LIBS $SSL_LIBS $CRYPTO_LIBS\"\n AC_CHECK_HEADER([openssl/ec.h],, AC_MSG_ERROR(OpenSSL ec header missing),)\n+\n+AC_MSG_CHECKING(for a supported OpenSSL version)\n+AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n+  #include <openssl/rand.h>\n+  ]],\n+  [[RAND_egd(NULL);]])],\n+  [AC_MSG_RESULT(yes)],\n+  [\n+    AC_ARG_WITH([libressl],\n+    [AS_HELP_STRING([--with-libressl],[Build with system LibreSSL (default is no; DANGEROUS; NOT SUPPORTED)])],\n+    [AC_MSG_WARN([Detected LibreSSL: This is NOT supported, and may break consensus compatibility!])],\n+    [AC_MSG_ERROR([Detected LibreSSL: This is NOT supported, and may break consensus compatibility!])]\n+    )]\n+)\n+\n CFLAGS=\"$CFLAGS_TEMP\"\n LIBS=\"$LIBS_TEMP\"\n "
      }
    ]
  },
  {
    "sha": "31bfc272c7b2d1ff45d70bd19047bfe866296589",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMWJmYzI3MmM3YjJkMWZmNDVkNzBiZDE5MDQ3YmZlODY2Mjk2NTg5",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-08-01T03:21:34Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-08-01T03:21:34Z"
      },
      "message": "build: make sure pkg-config checks are guarded by an m4_ifdef",
      "tree": {
        "sha": "a0fd5463052c7f8b77f528ec0e2e03ae7d6e905c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a0fd5463052c7f8b77f528ec0e2e03ae7d6e905c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/31bfc272c7b2d1ff45d70bd19047bfe866296589",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31bfc272c7b2d1ff45d70bd19047bfe866296589",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/31bfc272c7b2d1ff45d70bd19047bfe866296589",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31bfc272c7b2d1ff45d70bd19047bfe866296589/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d9add719519e2019b1f353d8d6832dcfc88ee850",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9add719519e2019b1f353d8d6832dcfc88ee850",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d9add719519e2019b1f353d8d6832dcfc88ee850"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 34,
      "deletions": 20
    },
    "files": [
      {
        "sha": "121e10bd379c1df7fa857ce60b8c49f8fc2494da",
        "filename": "build-aux/m4/bitcoin_qt.m4",
        "status": "modified",
        "additions": 34,
        "deletions": 20,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31bfc272c7b2d1ff45d70bd19047bfe866296589/build-aux/m4/bitcoin_qt.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31bfc272c7b2d1ff45d70bd19047bfe866296589/build-aux/m4/bitcoin_qt.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_qt.m4?ref=31bfc272c7b2d1ff45d70bd19047bfe866296589",
        "patch": "@@ -110,13 +110,8 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n   if test x$bitcoin_qt_got_major_vers = x5; then\n     _BITCOIN_QT_IS_STATIC\n     if test x$bitcoin_cv_static_qt = xyes; then\n+      _BITCOIN_QT_FIND_STATIC_PLUGINS\n       AC_DEFINE(QT_STATICPLUGIN, 1, [Define this symbol if qt plugins are static])\n-      if test x$qt_plugin_path != x; then\n-        QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/platforms\"\n-      fi\n-      if test x$use_pkgconfig = xyes; then\n-        PKG_CHECK_MODULES([QTPLATFORM], [Qt5PlatformSupport], [QT_LIBS=\"$QTPLATFORM_LIBS $QT_LIBS\"])\n-      fi\n       AC_CACHE_CHECK(for Qt < 5.4, bitcoin_cv_need_acc_widget,[AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n           [[#include <QtCore>]],[[\n           #if QT_VERSION >= 0x050400\n@@ -127,25 +122,15 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n         [bitcoin_cv_need_acc_widget=no])\n       ])\n       if test \"x$bitcoin_cv_need_acc_widget\" = \"xyes\"; then\n-        if test x$qt_plugin_path != x; then\n-          QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/accessible\"\n-        fi\n         _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(AccessibleFactory)], [-lqtaccessiblewidgets])\n       fi\n       if test x$TARGET_OS = xwindows; then\n         _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(QWindowsIntegrationPlugin)],[-lqwindows])\n         AC_DEFINE(QT_QPA_PLATFORM_WINDOWS, 1, [Define this symbol if the qt platform is windows])\n       elif test x$TARGET_OS = xlinux; then\n-        PKG_CHECK_MODULES([X11XCB], [x11-xcb], [QT_LIBS=\"$X11XCB_LIBS $QT_LIBS\"])\n-        if ${PKG_CONFIG} --exists \"Qt5Core >= 5.5\" 2>/dev/null; then\n-          PKG_CHECK_MODULES([QTXCBQPA], [Qt5XcbQpa], [QT_LIBS=\"$QTXCBQPA_LIBS $QT_LIBS\"])\n-        fi\n         _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(QXcbIntegrationPlugin)],[-lqxcb -lxcb-static])\n         AC_DEFINE(QT_QPA_PLATFORM_XCB, 1, [Define this symbol if the qt platform is xcb])\n       elif test x$TARGET_OS = xdarwin; then\n-        if test x$use_pkgconfig = xyes; then\n-          PKG_CHECK_MODULES([QTPRINT], [Qt5PrintSupport], [QT_LIBS=\"$QTPRINT_LIBS $QT_LIBS\"])\n-        fi\n         AX_CHECK_LINK_FLAG([[-framework IOKit]],[QT_LIBS=\"$QT_LIBS -framework IOKit\"],[AC_MSG_ERROR(could not iokit framework)])\n         _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(QCocoaIntegrationPlugin)],[-lqcocoa])\n         AC_DEFINE(QT_QPA_PLATFORM_COCOA, 1, [Define this symbol if the qt platform is cocoa])\n@@ -154,10 +139,6 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n   else\n     if test x$TARGET_OS = xwindows; then\n       AC_DEFINE(QT_STATICPLUGIN, 1, [Define this symbol if qt plugins are static])\n-      if test x$qt_plugin_path != x; then\n-        QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/accessible\"\n-        QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/codecs\"\n-      fi\n       _BITCOIN_QT_CHECK_STATIC_PLUGINS([\n          Q_IMPORT_PLUGIN(qcncodecs)\n          Q_IMPORT_PLUGIN(qjpcodecs)\n@@ -297,6 +278,39 @@ AC_DEFUN([_BITCOIN_QT_CHECK_STATIC_PLUGINS],[\n   LIBS=\"$CHECK_STATIC_PLUGINS_TEMP_LIBS\"\n ])\n \n+dnl Internal. Find paths necessary for linking qt static plugins\n+dnl Inputs: bitcoin_qt_got_major_vers. 4 or 5.\n+dnl Inputs: qt_plugin_path. optional.\n+dnl Outputs: QT_LIBS is appended\n+AC_DEFUN([_BITCOIN_QT_FIND_STATIC_PLUGINS],[\n+  if test x$bitcoin_qt_got_major_vers = x5; then\n+      if test x$qt_plugin_path != x; then\n+        QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/platforms\"\n+        if test -d \"$qt_plugin_path/accessible\"; then\n+          QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/accessible\"\n+        fi\n+      fi\n+     m4_ifdef([PKG_CHECK_MODULES],[\n+     if test x$use_pkgconfig = xyes; then\n+       PKG_CHECK_MODULES([QTPLATFORM], [Qt5PlatformSupport], [QT_LIBS=\"$QTPLATFORM_LIBS $QT_LIBS\"])\n+       if test x$TARGET_OS = xlinux; then\n+         PKG_CHECK_MODULES([X11XCB], [x11-xcb], [QT_LIBS=\"$X11XCB_LIBS $QT_LIBS\"])\n+         if ${PKG_CONFIG} --exists \"Qt5Core >= 5.5\" 2>/dev/null; then\n+           PKG_CHECK_MODULES([QTXCBQPA], [Qt5XcbQpa], [QT_LIBS=\"$QTXCBQPA_LIBS $QT_LIBS\"])\n+         fi\n+       elif test x$TARGET_OS = xdarwin; then\n+         PKG_CHECK_MODULES([QTPRINT], [Qt5PrintSupport], [QT_LIBS=\"$QTPRINT_LIBS $QT_LIBS\"])\n+       fi\n+     fi\n+     ])\n+  else\n+    if test x$qt_plugin_path != x; then\n+      QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/accessible\"\n+      QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/codecs\"\n+    fi\n+  fi\n+])\n+\n dnl Internal. Find Qt libraries using pkg-config.\n dnl Inputs: bitcoin_qt_want_version (from --with-gui=). The version to check\n dnl         first."
      }
    ]
  },
  {
    "sha": "fee6554b520c1bebe32bedd66706954c7b1599c7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZWU2NTU0YjUyMGMxYmViZTMyYmVkZDY2NzA2OTU0YzdiMTU5OWM3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-03T13:01:26Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-03T13:30:15Z"
      },
      "message": "Merge pull request #6501\n\n31bfc27 build: make sure pkg-config checks are guarded by an m4_ifdef (Cory Fields)\nd9add71 build: fix libressl detection (Cory Fields)",
      "tree": {
        "sha": "f668c4c4deef0e0c7df2be66e7b15cc94e93cd99",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f668c4c4deef0e0c7df2be66e7b15cc94e93cd99"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fee6554b520c1bebe32bedd66706954c7b1599c7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVv2znAAoJEHSBCwEjRsmmKsoIALSKdaJC74jsRQcCCf/DDJGh\nOm87+Ky6WIr9/vrEGeVra6iDcIxSVYy/+GFYAbHzUlyuxFLgcWVRZNz0ijro5tJj\nNe7FwwdVlymGlB0L0pFjlqPG18t9d6e0VT3zgS1sYFw3IqFrwt+TutDRJWiRRel+\n0nGgMiQzdcF1snGTJmYTgh5UzWcE3wr9+uXOQuT7lEftI2cpwIv7OAG5PyQpS4q/\nCfKgIZZWQZA7POa7+ClnFpfTshyuUBmIaWVRIOMA1gdolDULV936ZTaO37lIjsFD\neDKcJ82Npp8NMmW/PgmRCDGuOslcKntdGtIj9ZHfeOAvxXRBO09M0XVLL7CBN+s=\n=GWQU\n-----END PGP SIGNATURE-----",
        "payload": "tree f668c4c4deef0e0c7df2be66e7b15cc94e93cd99\nparent 86cfd23f68367af072500b1758a4c446cdd36e74\nparent 31bfc272c7b2d1ff45d70bd19047bfe866296589\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1438606886 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1438608615 +0200\n\nMerge pull request #6501\n\n31bfc27 build: make sure pkg-config checks are guarded by an m4_ifdef (Cory Fields)\nd9add71 build: fix libressl detection (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fee6554b520c1bebe32bedd66706954c7b1599c7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fee6554b520c1bebe32bedd66706954c7b1599c7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fee6554b520c1bebe32bedd66706954c7b1599c7/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "86cfd23f68367af072500b1758a4c446cdd36e74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86cfd23f68367af072500b1758a4c446cdd36e74",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/86cfd23f68367af072500b1758a4c446cdd36e74"
      },
      {
        "sha": "31bfc272c7b2d1ff45d70bd19047bfe866296589",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31bfc272c7b2d1ff45d70bd19047bfe866296589",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/31bfc272c7b2d1ff45d70bd19047bfe866296589"
      }
    ],
    "stats": {
      "total": 77,
      "additions": 49,
      "deletions": 28
    },
    "files": [
      {
        "sha": "121e10bd379c1df7fa857ce60b8c49f8fc2494da",
        "filename": "build-aux/m4/bitcoin_qt.m4",
        "status": "modified",
        "additions": 34,
        "deletions": 20,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fee6554b520c1bebe32bedd66706954c7b1599c7/build-aux/m4/bitcoin_qt.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fee6554b520c1bebe32bedd66706954c7b1599c7/build-aux/m4/bitcoin_qt.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_qt.m4?ref=fee6554b520c1bebe32bedd66706954c7b1599c7",
        "patch": "@@ -110,13 +110,8 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n   if test x$bitcoin_qt_got_major_vers = x5; then\n     _BITCOIN_QT_IS_STATIC\n     if test x$bitcoin_cv_static_qt = xyes; then\n+      _BITCOIN_QT_FIND_STATIC_PLUGINS\n       AC_DEFINE(QT_STATICPLUGIN, 1, [Define this symbol if qt plugins are static])\n-      if test x$qt_plugin_path != x; then\n-        QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/platforms\"\n-      fi\n-      if test x$use_pkgconfig = xyes; then\n-        PKG_CHECK_MODULES([QTPLATFORM], [Qt5PlatformSupport], [QT_LIBS=\"$QTPLATFORM_LIBS $QT_LIBS\"])\n-      fi\n       AC_CACHE_CHECK(for Qt < 5.4, bitcoin_cv_need_acc_widget,[AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n           [[#include <QtCore>]],[[\n           #if QT_VERSION >= 0x050400\n@@ -127,25 +122,15 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n         [bitcoin_cv_need_acc_widget=no])\n       ])\n       if test \"x$bitcoin_cv_need_acc_widget\" = \"xyes\"; then\n-        if test x$qt_plugin_path != x; then\n-          QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/accessible\"\n-        fi\n         _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(AccessibleFactory)], [-lqtaccessiblewidgets])\n       fi\n       if test x$TARGET_OS = xwindows; then\n         _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(QWindowsIntegrationPlugin)],[-lqwindows])\n         AC_DEFINE(QT_QPA_PLATFORM_WINDOWS, 1, [Define this symbol if the qt platform is windows])\n       elif test x$TARGET_OS = xlinux; then\n-        PKG_CHECK_MODULES([X11XCB], [x11-xcb], [QT_LIBS=\"$X11XCB_LIBS $QT_LIBS\"])\n-        if ${PKG_CONFIG} --exists \"Qt5Core >= 5.5\" 2>/dev/null; then\n-          PKG_CHECK_MODULES([QTXCBQPA], [Qt5XcbQpa], [QT_LIBS=\"$QTXCBQPA_LIBS $QT_LIBS\"])\n-        fi\n         _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(QXcbIntegrationPlugin)],[-lqxcb -lxcb-static])\n         AC_DEFINE(QT_QPA_PLATFORM_XCB, 1, [Define this symbol if the qt platform is xcb])\n       elif test x$TARGET_OS = xdarwin; then\n-        if test x$use_pkgconfig = xyes; then\n-          PKG_CHECK_MODULES([QTPRINT], [Qt5PrintSupport], [QT_LIBS=\"$QTPRINT_LIBS $QT_LIBS\"])\n-        fi\n         AX_CHECK_LINK_FLAG([[-framework IOKit]],[QT_LIBS=\"$QT_LIBS -framework IOKit\"],[AC_MSG_ERROR(could not iokit framework)])\n         _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(QCocoaIntegrationPlugin)],[-lqcocoa])\n         AC_DEFINE(QT_QPA_PLATFORM_COCOA, 1, [Define this symbol if the qt platform is cocoa])\n@@ -154,10 +139,6 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n   else\n     if test x$TARGET_OS = xwindows; then\n       AC_DEFINE(QT_STATICPLUGIN, 1, [Define this symbol if qt plugins are static])\n-      if test x$qt_plugin_path != x; then\n-        QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/accessible\"\n-        QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/codecs\"\n-      fi\n       _BITCOIN_QT_CHECK_STATIC_PLUGINS([\n          Q_IMPORT_PLUGIN(qcncodecs)\n          Q_IMPORT_PLUGIN(qjpcodecs)\n@@ -297,6 +278,39 @@ AC_DEFUN([_BITCOIN_QT_CHECK_STATIC_PLUGINS],[\n   LIBS=\"$CHECK_STATIC_PLUGINS_TEMP_LIBS\"\n ])\n \n+dnl Internal. Find paths necessary for linking qt static plugins\n+dnl Inputs: bitcoin_qt_got_major_vers. 4 or 5.\n+dnl Inputs: qt_plugin_path. optional.\n+dnl Outputs: QT_LIBS is appended\n+AC_DEFUN([_BITCOIN_QT_FIND_STATIC_PLUGINS],[\n+  if test x$bitcoin_qt_got_major_vers = x5; then\n+      if test x$qt_plugin_path != x; then\n+        QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/platforms\"\n+        if test -d \"$qt_plugin_path/accessible\"; then\n+          QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/accessible\"\n+        fi\n+      fi\n+     m4_ifdef([PKG_CHECK_MODULES],[\n+     if test x$use_pkgconfig = xyes; then\n+       PKG_CHECK_MODULES([QTPLATFORM], [Qt5PlatformSupport], [QT_LIBS=\"$QTPLATFORM_LIBS $QT_LIBS\"])\n+       if test x$TARGET_OS = xlinux; then\n+         PKG_CHECK_MODULES([X11XCB], [x11-xcb], [QT_LIBS=\"$X11XCB_LIBS $QT_LIBS\"])\n+         if ${PKG_CONFIG} --exists \"Qt5Core >= 5.5\" 2>/dev/null; then\n+           PKG_CHECK_MODULES([QTXCBQPA], [Qt5XcbQpa], [QT_LIBS=\"$QTXCBQPA_LIBS $QT_LIBS\"])\n+         fi\n+       elif test x$TARGET_OS = xdarwin; then\n+         PKG_CHECK_MODULES([QTPRINT], [Qt5PrintSupport], [QT_LIBS=\"$QTPRINT_LIBS $QT_LIBS\"])\n+       fi\n+     fi\n+     ])\n+  else\n+    if test x$qt_plugin_path != x; then\n+      QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/accessible\"\n+      QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/codecs\"\n+    fi\n+  fi\n+])\n+\n dnl Internal. Find Qt libraries using pkg-config.\n dnl Inputs: bitcoin_qt_want_version (from --with-gui=). The version to check\n dnl         first."
      },
      {
        "sha": "a524bded6fa3e386d958305c971858f7639fbebe",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 15,
        "deletions": 8,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fee6554b520c1bebe32bedd66706954c7b1599c7/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fee6554b520c1bebe32bedd66706954c7b1599c7/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=fee6554b520c1bebe32bedd66706954c7b1599c7",
        "patch": "@@ -680,19 +680,26 @@ else\n   fi\n fi\n \n-AC_CHECK_LIB([crypto],[RAND_egd],[],[\n-  AC_ARG_WITH([libressl],\n-    [AS_HELP_STRING([--with-libressl],[Build with system LibreSSL (default is no; DANGEROUS; NOT SUPPORTED)])],\n-    [AC_MSG_WARN([Detected LibreSSL: This is NOT supported, and may break consensus compatibility!])],\n-    [AC_MSG_ERROR([Detected LibreSSL: This is NOT supported, and may break consensus compatibility!])]\n-  )\n-])\n-\n CFLAGS_TEMP=\"$CFLAGS\"\n LIBS_TEMP=\"$LIBS\"\n CFLAGS=\"$CFLAGS $SSL_CFLAGS $CRYPTO_CFLAGS\"\n LIBS=\"$LIBS $SSL_LIBS $CRYPTO_LIBS\"\n AC_CHECK_HEADER([openssl/ec.h],, AC_MSG_ERROR(OpenSSL ec header missing),)\n+\n+AC_MSG_CHECKING(for a supported OpenSSL version)\n+AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n+  #include <openssl/rand.h>\n+  ]],\n+  [[RAND_egd(NULL);]])],\n+  [AC_MSG_RESULT(yes)],\n+  [\n+    AC_ARG_WITH([libressl],\n+    [AS_HELP_STRING([--with-libressl],[Build with system LibreSSL (default is no; DANGEROUS; NOT SUPPORTED)])],\n+    [AC_MSG_WARN([Detected LibreSSL: This is NOT supported, and may break consensus compatibility!])],\n+    [AC_MSG_ERROR([Detected LibreSSL: This is NOT supported, and may break consensus compatibility!])]\n+    )]\n+)\n+\n CFLAGS=\"$CFLAGS_TEMP\"\n LIBS=\"$LIBS_TEMP\"\n "
      }
    ]
  },
  {
    "sha": "f18b8ec7cf6ebfff9eef839c6a5630ad2e6e7db6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMThiOGVjN2NmNmViZmZmOWVlZjgzOWM2YTU2MzBhZDJlNmU3ZGI2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-07-31T14:41:06Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-03T15:40:55Z"
      },
      "message": "Make sure LogPrintf strings are line-terminated\n\nFix the cases where LogPrint[f] was accidentally called without line\nterminator, which resulted in concatenated log lines.\n\n(see e.g. #6492)",
      "tree": {
        "sha": "576196cf15fe14280bf560a848404caa2825f942",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/576196cf15fe14280bf560a848404caa2825f942"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f18b8ec7cf6ebfff9eef839c6a5630ad2e6e7db6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f18b8ec7cf6ebfff9eef839c6a5630ad2e6e7db6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f18b8ec7cf6ebfff9eef839c6a5630ad2e6e7db6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f18b8ec7cf6ebfff9eef839c6a5630ad2e6e7db6/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "86cfd23f68367af072500b1758a4c446cdd36e74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86cfd23f68367af072500b1758a4c446cdd36e74",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/86cfd23f68367af072500b1758a4c446cdd36e74"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 10,
      "deletions": 9
    },
    "files": [
      {
        "sha": "fa122816552860b56f2762854417728ce2df2f6c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f18b8ec7cf6ebfff9eef839c6a5630ad2e6e7db6/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f18b8ec7cf6ebfff9eef839c6a5630ad2e6e7db6/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=f18b8ec7cf6ebfff9eef839c6a5630ad2e6e7db6",
        "patch": "@@ -3398,7 +3398,7 @@ bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n                     }\n                 }\n             } catch (const std::exception& e) {\n-                LogPrintf(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n+                LogPrintf(\"%s: Deserialize or I/O error - %s\\n\", __func__, e.what());\n             }\n         }\n     } catch (const std::runtime_error& e) {"
      },
      {
        "sha": "cdee541d2f27027e8c5d3a150649dc9c88f6c5aa",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f18b8ec7cf6ebfff9eef839c6a5630ad2e6e7db6/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f18b8ec7cf6ebfff9eef839c6a5630ad2e6e7db6/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=f18b8ec7cf6ebfff9eef839c6a5630ad2e6e7db6",
        "patch": "@@ -249,7 +249,7 @@ unsigned int TxConfirmStats::NewTx(unsigned int nBlockHeight, double val)\n     unsigned int bucketindex = bucketMap.lower_bound(val)->second;\n     unsigned int blockIndex = nBlockHeight % unconfTxs.size();\n     unconfTxs[blockIndex][bucketindex]++;\n-    LogPrint(\"estimatefee\", \"adding to %s\\n\", dataTypeString);\n+    LogPrint(\"estimatefee\", \"adding to %s\", dataTypeString);\n     return bucketindex;\n }\n \n@@ -390,8 +390,9 @@ void CBlockPolicyEstimator::processTransaction(const CTxMemPoolEntry& entry, boo\n         mapMemPoolTxs[hash].bucketIndex = feeStats.NewTx(txHeight, (double)feeRate.GetFeePerK());\n     }\n     else {\n-        LogPrint(\"estimatefee\", \"not adding\\n\");\n+        LogPrint(\"estimatefee\", \"not adding\");\n     }\n+    LogPrint(\"estimatefee\", \"\\n\");\n }\n \n void CBlockPolicyEstimator::processBlockTx(unsigned int nBlockHeight, const CTxMemPoolEntry& entry)"
      },
      {
        "sha": "68091010f7f676f3c595b93e55901ed630193ca4",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f18b8ec7cf6ebfff9eef839c6a5630ad2e6e7db6/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f18b8ec7cf6ebfff9eef839c6a5630ad2e6e7db6/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=f18b8ec7cf6ebfff9eef839c6a5630ad2e6e7db6",
        "patch": "@@ -752,14 +752,14 @@ void StopRPCThreads()\n     {\n         acceptor->cancel(ec);\n         if (ec)\n-            LogPrintf(\"%s: Warning: %s when cancelling acceptor\", __func__, ec.message());\n+            LogPrintf(\"%s: Warning: %s when cancelling acceptor\\n\", __func__, ec.message());\n     }\n     rpc_acceptors.clear();\n     BOOST_FOREACH(const PAIRTYPE(std::string, boost::shared_ptr<deadline_timer>) &timer, deadlineTimers)\n     {\n         timer.second->cancel(ec);\n         if (ec)\n-            LogPrintf(\"%s: Warning: %s when cancelling timer\", __func__, ec.message());\n+            LogPrintf(\"%s: Warning: %s when cancelling timer\\n\", __func__, ec.message());\n     }\n     deadlineTimers.clear();\n "
      },
      {
        "sha": "c921dae45d35f1993454d14ee71ca5a2d93a246c",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f18b8ec7cf6ebfff9eef839c6a5630ad2e6e7db6/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f18b8ec7cf6ebfff9eef839c6a5630ad2e6e7db6/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=f18b8ec7cf6ebfff9eef839c6a5630ad2e6e7db6",
        "patch": "@@ -348,7 +348,7 @@ CTxMemPool::WriteFeeEstimates(CAutoFile& fileout) const\n         minerPolicyEstimator->Write(fileout);\n     }\n     catch (const std::exception&) {\n-        LogPrintf(\"CTxMemPool::WriteFeeEstimates(): unable to write policy estimator data (non-fatal)\");\n+        LogPrintf(\"CTxMemPool::WriteFeeEstimates(): unable to write policy estimator data (non-fatal)\\n\");\n         return false;\n     }\n     return true;\n@@ -367,7 +367,7 @@ CTxMemPool::ReadFeeEstimates(CAutoFile& filein)\n         minerPolicyEstimator->Read(filein);\n     }\n     catch (const std::exception&) {\n-        LogPrintf(\"CTxMemPool::ReadFeeEstimates(): unable to read policy estimator data (non-fatal)\");\n+        LogPrintf(\"CTxMemPool::ReadFeeEstimates(): unable to read policy estimator data (non-fatal)\\n\");\n         return false;\n     }\n     return true;"
      },
      {
        "sha": "0b0fb562e07f5c72d3ff8ec241801f3cfeccfb24",
        "filename": "src/wallet/crypter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f18b8ec7cf6ebfff9eef839c6a5630ad2e6e7db6/src/wallet/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f18b8ec7cf6ebfff9eef839c6a5630ad2e6e7db6/src/wallet/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.cpp?ref=f18b8ec7cf6ebfff9eef839c6a5630ad2e6e7db6",
        "patch": "@@ -186,7 +186,7 @@ bool CCryptoKeyStore::Unlock(const CKeyingMaterial& vMasterKeyIn)\n         }\n         if (keyPass && keyFail)\n         {\n-            LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\");\n+            LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n             assert(false);\n         }\n         if (keyFail || !keyPass)"
      },
      {
        "sha": "dcc29831396b9f2ef0a733ca7d532685b2afc880",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f18b8ec7cf6ebfff9eef839c6a5630ad2e6e7db6/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f18b8ec7cf6ebfff9eef839c6a5630ad2e6e7db6/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=f18b8ec7cf6ebfff9eef839c6a5630ad2e6e7db6",
        "patch": "@@ -2109,7 +2109,7 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n             if (!wtxNew.AcceptToMemoryPool(false))\n             {\n                 // This must not fail. The transaction has already been signed and recorded.\n-                LogPrintf(\"CommitTransaction(): Error: Transaction not valid\");\n+                LogPrintf(\"CommitTransaction(): Error: Transaction not valid\\n\");\n                 return false;\n             }\n             wtxNew.RelayWalletTransaction();"
      }
    ]
  },
  {
    "sha": "a2bf40dde7465292a29234c6d32d9df7e386617e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMmJmNDBkZGU3NDY1MjkyYTI5MjM0YzZkMzJkOWRmN2UzODY2MTdl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-03T15:50:27Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-03T15:51:18Z"
      },
      "message": "Merge pull request #6497\n\nf18b8ec Make sure LogPrintf strings are line-terminated (Wladimir J. van der Laan)",
      "tree": {
        "sha": "62d1f58b350d3c7f43fa40faa6c979d09e000d33",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/62d1f58b350d3c7f43fa40faa6c979d09e000d33"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a2bf40dde7465292a29234c6d32d9df7e386617e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVv432AAoJEHSBCwEjRsmmdWIH/2yYIGrS2jkM45ELnamohLrR\nXpbMcMh5HHJ1X6bp6rjXx6DfwlR4jVeiIutocX3uKDmwxOJX2uJEltZk6zCoB85A\nuXNqr4F3PtT8D17GFkiYbuI2Ih8q3ZUTEmnfndsBJSHIAFOZ6L+yMgwbRlnxkIOm\n6jgAxtH370It5uGW7pTQi+QkZs6jjXPIQGQMEFVmy7yIp55+z/Snk411UjLpab+M\nO54hhxFxxDwBc/1YvUcLO0ZMKw230reAORlXq0pYW92RIB06Z2kycCZaWNitIoTF\ndb5pUMGjJ7WHe/oJKWklxXG4oWj61Yx/wQA45joU20KTKpDBZEclvsPUDjPT3rk=\n=NwOC\n-----END PGP SIGNATURE-----",
        "payload": "tree 62d1f58b350d3c7f43fa40faa6c979d09e000d33\nparent fee6554b520c1bebe32bedd66706954c7b1599c7\nparent f18b8ec7cf6ebfff9eef839c6a5630ad2e6e7db6\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1438617027 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1438617078 +0200\n\nMerge pull request #6497\n\nf18b8ec Make sure LogPrintf strings are line-terminated (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2bf40dde7465292a29234c6d32d9df7e386617e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a2bf40dde7465292a29234c6d32d9df7e386617e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2bf40dde7465292a29234c6d32d9df7e386617e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fee6554b520c1bebe32bedd66706954c7b1599c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fee6554b520c1bebe32bedd66706954c7b1599c7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fee6554b520c1bebe32bedd66706954c7b1599c7"
      },
      {
        "sha": "f18b8ec7cf6ebfff9eef839c6a5630ad2e6e7db6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f18b8ec7cf6ebfff9eef839c6a5630ad2e6e7db6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f18b8ec7cf6ebfff9eef839c6a5630ad2e6e7db6"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 10,
      "deletions": 9
    },
    "files": [
      {
        "sha": "fa122816552860b56f2762854417728ce2df2f6c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2bf40dde7465292a29234c6d32d9df7e386617e/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2bf40dde7465292a29234c6d32d9df7e386617e/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a2bf40dde7465292a29234c6d32d9df7e386617e",
        "patch": "@@ -3398,7 +3398,7 @@ bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n                     }\n                 }\n             } catch (const std::exception& e) {\n-                LogPrintf(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n+                LogPrintf(\"%s: Deserialize or I/O error - %s\\n\", __func__, e.what());\n             }\n         }\n     } catch (const std::runtime_error& e) {"
      },
      {
        "sha": "cdee541d2f27027e8c5d3a150649dc9c88f6c5aa",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2bf40dde7465292a29234c6d32d9df7e386617e/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2bf40dde7465292a29234c6d32d9df7e386617e/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=a2bf40dde7465292a29234c6d32d9df7e386617e",
        "patch": "@@ -249,7 +249,7 @@ unsigned int TxConfirmStats::NewTx(unsigned int nBlockHeight, double val)\n     unsigned int bucketindex = bucketMap.lower_bound(val)->second;\n     unsigned int blockIndex = nBlockHeight % unconfTxs.size();\n     unconfTxs[blockIndex][bucketindex]++;\n-    LogPrint(\"estimatefee\", \"adding to %s\\n\", dataTypeString);\n+    LogPrint(\"estimatefee\", \"adding to %s\", dataTypeString);\n     return bucketindex;\n }\n \n@@ -390,8 +390,9 @@ void CBlockPolicyEstimator::processTransaction(const CTxMemPoolEntry& entry, boo\n         mapMemPoolTxs[hash].bucketIndex = feeStats.NewTx(txHeight, (double)feeRate.GetFeePerK());\n     }\n     else {\n-        LogPrint(\"estimatefee\", \"not adding\\n\");\n+        LogPrint(\"estimatefee\", \"not adding\");\n     }\n+    LogPrint(\"estimatefee\", \"\\n\");\n }\n \n void CBlockPolicyEstimator::processBlockTx(unsigned int nBlockHeight, const CTxMemPoolEntry& entry)"
      },
      {
        "sha": "68091010f7f676f3c595b93e55901ed630193ca4",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2bf40dde7465292a29234c6d32d9df7e386617e/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2bf40dde7465292a29234c6d32d9df7e386617e/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=a2bf40dde7465292a29234c6d32d9df7e386617e",
        "patch": "@@ -752,14 +752,14 @@ void StopRPCThreads()\n     {\n         acceptor->cancel(ec);\n         if (ec)\n-            LogPrintf(\"%s: Warning: %s when cancelling acceptor\", __func__, ec.message());\n+            LogPrintf(\"%s: Warning: %s when cancelling acceptor\\n\", __func__, ec.message());\n     }\n     rpc_acceptors.clear();\n     BOOST_FOREACH(const PAIRTYPE(std::string, boost::shared_ptr<deadline_timer>) &timer, deadlineTimers)\n     {\n         timer.second->cancel(ec);\n         if (ec)\n-            LogPrintf(\"%s: Warning: %s when cancelling timer\", __func__, ec.message());\n+            LogPrintf(\"%s: Warning: %s when cancelling timer\\n\", __func__, ec.message());\n     }\n     deadlineTimers.clear();\n "
      },
      {
        "sha": "c921dae45d35f1993454d14ee71ca5a2d93a246c",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2bf40dde7465292a29234c6d32d9df7e386617e/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2bf40dde7465292a29234c6d32d9df7e386617e/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=a2bf40dde7465292a29234c6d32d9df7e386617e",
        "patch": "@@ -348,7 +348,7 @@ CTxMemPool::WriteFeeEstimates(CAutoFile& fileout) const\n         minerPolicyEstimator->Write(fileout);\n     }\n     catch (const std::exception&) {\n-        LogPrintf(\"CTxMemPool::WriteFeeEstimates(): unable to write policy estimator data (non-fatal)\");\n+        LogPrintf(\"CTxMemPool::WriteFeeEstimates(): unable to write policy estimator data (non-fatal)\\n\");\n         return false;\n     }\n     return true;\n@@ -367,7 +367,7 @@ CTxMemPool::ReadFeeEstimates(CAutoFile& filein)\n         minerPolicyEstimator->Read(filein);\n     }\n     catch (const std::exception&) {\n-        LogPrintf(\"CTxMemPool::ReadFeeEstimates(): unable to read policy estimator data (non-fatal)\");\n+        LogPrintf(\"CTxMemPool::ReadFeeEstimates(): unable to read policy estimator data (non-fatal)\\n\");\n         return false;\n     }\n     return true;"
      },
      {
        "sha": "0b0fb562e07f5c72d3ff8ec241801f3cfeccfb24",
        "filename": "src/wallet/crypter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2bf40dde7465292a29234c6d32d9df7e386617e/src/wallet/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2bf40dde7465292a29234c6d32d9df7e386617e/src/wallet/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.cpp?ref=a2bf40dde7465292a29234c6d32d9df7e386617e",
        "patch": "@@ -186,7 +186,7 @@ bool CCryptoKeyStore::Unlock(const CKeyingMaterial& vMasterKeyIn)\n         }\n         if (keyPass && keyFail)\n         {\n-            LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\");\n+            LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n             assert(false);\n         }\n         if (keyFail || !keyPass)"
      },
      {
        "sha": "dcc29831396b9f2ef0a733ca7d532685b2afc880",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2bf40dde7465292a29234c6d32d9df7e386617e/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2bf40dde7465292a29234c6d32d9df7e386617e/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=a2bf40dde7465292a29234c6d32d9df7e386617e",
        "patch": "@@ -2109,7 +2109,7 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n             if (!wtxNew.AcceptToMemoryPool(false))\n             {\n                 // This must not fail. The transaction has already been signed and recorded.\n-                LogPrintf(\"CommitTransaction(): Error: Transaction not valid\");\n+                LogPrintf(\"CommitTransaction(): Error: Transaction not valid\\n\");\n                 return false;\n             }\n             wtxNew.RelayWalletTransaction();"
      }
    ]
  },
  {
    "sha": "9f5edb970a9a4a07d9550413884babce3ef9cb20",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZjVlZGI5NzBhOWE0YTA3ZDk1NTA0MTM4ODRiYWJjZTNlZjljYjIw",
    "commit": {
      "author": {
        "name": "Casey Rodarmor",
        "email": "casey@rodarmor.com",
        "date": "2015-08-03T16:36:01Z"
      },
      "committer": {
        "name": "Casey Rodarmor",
        "email": "casey@rodarmor.com",
        "date": "2015-08-03T17:02:49Z"
      },
      "message": "Removed contrib/bitrpc\n\nIt's unclear if people are using this and if it's worth maintaining.",
      "tree": {
        "sha": "a7ccc9247f8a7f6a45cb965a8ffaa8d72ddc87e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a7ccc9247f8a7f6a45cb965a8ffaa8d72ddc87e7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9f5edb970a9a4a07d9550413884babce3ef9cb20",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f5edb970a9a4a07d9550413884babce3ef9cb20",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9f5edb970a9a4a07d9550413884babce3ef9cb20",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f5edb970a9a4a07d9550413884babce3ef9cb20/comments",
    "author": {
      "login": "casey",
      "id": 1945,
      "node_id": "MDQ6VXNlcjE5NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/casey",
      "html_url": "https://github.com/casey",
      "followers_url": "https://api.github.com/users/casey/followers",
      "following_url": "https://api.github.com/users/casey/following{/other_user}",
      "gists_url": "https://api.github.com/users/casey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/casey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/casey/subscriptions",
      "organizations_url": "https://api.github.com/users/casey/orgs",
      "repos_url": "https://api.github.com/users/casey/repos",
      "events_url": "https://api.github.com/users/casey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/casey/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "casey",
      "id": 1945,
      "node_id": "MDQ6VXNlcjE5NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/casey",
      "html_url": "https://github.com/casey",
      "followers_url": "https://api.github.com/users/casey/followers",
      "following_url": "https://api.github.com/users/casey/following{/other_user}",
      "gists_url": "https://api.github.com/users/casey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/casey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/casey/subscriptions",
      "organizations_url": "https://api.github.com/users/casey/orgs",
      "repos_url": "https://api.github.com/users/casey/repos",
      "events_url": "https://api.github.com/users/casey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/casey/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a2bf40dde7465292a29234c6d32d9df7e386617e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2bf40dde7465292a29234c6d32d9df7e386617e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a2bf40dde7465292a29234c6d32d9df7e386617e"
      }
    ],
    "stats": {
      "total": 348,
      "additions": 2,
      "deletions": 346
    },
    "files": [
      {
        "sha": "125594312bd8cf9d4fde61f3c4aa291ef2c88a9a",
        "filename": "contrib/README.md",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f5edb970a9a4a07d9550413884babce3ef9cb20/contrib/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f5edb970a9a4a07d9550413884babce3ef9cb20/contrib/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/README.md?ref=9f5edb970a9a4a07d9550413884babce3ef9cb20",
        "patch": "@@ -1,9 +1,6 @@\n Wallet Tools\n ---------------------\n \n-### [BitRPC](/contrib/bitrpc) ###\n-Allows for sending of all standard Bitcoin commands via RPC rather than as command line args.\n-\n ### [SpendFrom](/contrib/spendfrom) ###\n \n Use the raw transactions API to send coins received on a particular"
      },
      {
        "sha": "f5ef2f0405a941e2c9ca8c4c1178a5a97a9d590e",
        "filename": "contrib/bitrpc/README.md",
        "status": "removed",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2bf40dde7465292a29234c6d32d9df7e386617e/contrib/bitrpc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2bf40dde7465292a29234c6d32d9df7e386617e/contrib/bitrpc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/bitrpc/README.md?ref=a2bf40dde7465292a29234c6d32d9df7e386617e",
        "patch": "@@ -1,8 +0,0 @@\n-### BitRPC\n-Allows for sending of all standard Bitcoin commands via RPC rather than as command line args.\n-\n-### Looking for Wallet Tools?\n-BitRPC.py is able to do the exact same thing as `walletchangepass.py` and `walletunlock.py`. Their respective commands in BitRPC.py are:\n-\n-\tbitrpc.py walletpassphrasechange\n-\tbitrpc.py walletpassphrase\n\\ No newline at end of file"
      },
      {
        "sha": "c3ce9d793625fc0b1318a9baf77b7f428cbe2062",
        "filename": "contrib/bitrpc/bitrpc.py",
        "status": "removed",
        "additions": 0,
        "deletions": 335,
        "changes": 335,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2bf40dde7465292a29234c6d32d9df7e386617e/contrib/bitrpc/bitrpc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2bf40dde7465292a29234c6d32d9df7e386617e/contrib/bitrpc/bitrpc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/bitrpc/bitrpc.py?ref=a2bf40dde7465292a29234c6d32d9df7e386617e",
        "patch": "@@ -1,335 +0,0 @@\n-from jsonrpc import ServiceProxy\n-import sys\n-import string\n-import getpass\n-\n-# ===== BEGIN USER SETTINGS =====\n-# if you do not set these you will be prompted for a password for every command\n-rpcuser = \"\"\n-rpcpass = \"\"\n-# ====== END USER SETTINGS ======\n-\n-\n-if rpcpass == \"\":\n-    access = ServiceProxy(\"http://127.0.0.1:8332\")\n-else:\n-    access = ServiceProxy(\"http://\"+rpcuser+\":\"+rpcpass+\"@127.0.0.1:8332\")\n-cmd = sys.argv[1].lower()\n-\n-if cmd == \"backupwallet\":\n-    try:\n-        path = raw_input(\"Enter destination path/filename: \")\n-        print access.backupwallet(path)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"encryptwallet\":\n-    try:\n-        pwd = getpass.getpass(prompt=\"Enter passphrase: \")\n-        pwd2 = getpass.getpass(prompt=\"Repeat passphrase: \")\n-        if pwd == pwd2:\n-            access.encryptwallet(pwd)\n-            print \"\\n---Wallet encrypted. Server stopping, restart to run with encrypted wallet---\\n\"\n-        else:\n-            print \"\\n---Passphrases do not match---\\n\"\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getaccount\":\n-    try:\n-        addr = raw_input(\"Enter a Bitcoin address: \")\n-        print access.getaccount(addr)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getaccountaddress\":\n-    try:\n-        acct = raw_input(\"Enter an account name: \")\n-        print access.getaccountaddress(acct)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getaddressesbyaccount\":\n-    try:\n-        acct = raw_input(\"Enter an account name: \")\n-        print access.getaddressesbyaccount(acct)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getbalance\":\n-    try:\n-        acct = raw_input(\"Enter an account (optional): \")\n-        mc = raw_input(\"Minimum confirmations (optional): \")\n-        try:\n-            print access.getbalance(acct, mc)\n-        except:\n-            print access.getbalance()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getblockbycount\":\n-    try:\n-        height = raw_input(\"Height: \")\n-        print access.getblockbycount(height)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getblockcount\":\n-    try:\n-        print access.getblockcount()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getblocknumber\":\n-    try:\n-        print access.getblocknumber()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getconnectioncount\":\n-    try:\n-        print access.getconnectioncount()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getdifficulty\":\n-    try:\n-        print access.getdifficulty()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getgenerate\":\n-    try:\n-        print access.getgenerate()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"gethashespersec\":\n-    try:\n-        print access.gethashespersec()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getinfo\":\n-    try:\n-        print access.getinfo()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getnewaddress\":\n-    try:\n-        acct = raw_input(\"Enter an account name: \")\n-        try:\n-            print access.getnewaddress(acct)\n-        except:\n-            print access.getnewaddress()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getreceivedbyaccount\":\n-    try:\n-        acct = raw_input(\"Enter an account (optional): \")\n-        mc = raw_input(\"Minimum confirmations (optional): \")\n-        try:\n-            print access.getreceivedbyaccount(acct, mc)\n-        except:\n-            print access.getreceivedbyaccount()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getreceivedbyaddress\":\n-    try:\n-        addr = raw_input(\"Enter a Bitcoin address (optional): \")\n-        mc = raw_input(\"Minimum confirmations (optional): \")\n-        try:\n-            print access.getreceivedbyaddress(addr, mc)\n-        except:\n-            print access.getreceivedbyaddress()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"gettransaction\":\n-    try:\n-        txid = raw_input(\"Enter a transaction ID: \")\n-        print access.gettransaction(txid)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getwork\":\n-    try:\n-        data = raw_input(\"Data (optional): \")\n-        try:\n-            print access.gettransaction(data)\n-        except:\n-            print access.gettransaction()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"help\":\n-    try:\n-        cmd = raw_input(\"Command (optional): \")\n-        try:\n-            print access.help(cmd)\n-        except:\n-            print access.help()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"listaccounts\":\n-    try:\n-        mc = raw_input(\"Minimum confirmations (optional): \")\n-        try:\n-            print access.listaccounts(mc)\n-        except:\n-            print access.listaccounts()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"listreceivedbyaccount\":\n-    try:\n-        mc = raw_input(\"Minimum confirmations (optional): \")\n-        incemp = raw_input(\"Include empty? (true/false, optional): \")\n-        try:\n-            print access.listreceivedbyaccount(mc, incemp)\n-        except:\n-            print access.listreceivedbyaccount()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"listreceivedbyaddress\":\n-    try:\n-        mc = raw_input(\"Minimum confirmations (optional): \")\n-        incemp = raw_input(\"Include empty? (true/false, optional): \")\n-        try:\n-            print access.listreceivedbyaddress(mc, incemp)\n-        except:\n-            print access.listreceivedbyaddress()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"listtransactions\":\n-    try:\n-        acct = raw_input(\"Account (optional): \")\n-        count = raw_input(\"Number of transactions (optional): \")\n-        frm = raw_input(\"Skip (optional):\")\n-        try:\n-            print access.listtransactions(acct, count, frm)\n-        except:\n-            print access.listtransactions()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"move\":\n-    try:\n-        frm = raw_input(\"From: \")\n-        to = raw_input(\"To: \")\n-        amt = raw_input(\"Amount:\")\n-        mc = raw_input(\"Minimum confirmations (optional): \")\n-        comment = raw_input(\"Comment (optional): \")\n-        try:\n-            print access.move(frm, to, amt, mc, comment)\n-        except:\n-            print access.move(frm, to, amt)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"sendfrom\":\n-    try:\n-        frm = raw_input(\"From: \")\n-        to = raw_input(\"To: \")\n-        amt = raw_input(\"Amount:\")\n-        mc = raw_input(\"Minimum confirmations (optional): \")\n-        comment = raw_input(\"Comment (optional): \")\n-        commentto = raw_input(\"Comment-to (optional): \")\n-        try:\n-            print access.sendfrom(frm, to, amt, mc, comment, commentto)\n-        except:\n-            print access.sendfrom(frm, to, amt)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"sendmany\":\n-    try:\n-        frm = raw_input(\"From: \")\n-        to = raw_input(\"To (in format address1:amount1,address2:amount2,...): \")\n-        mc = raw_input(\"Minimum confirmations (optional): \")\n-        comment = raw_input(\"Comment (optional): \")\n-        try:\n-            print access.sendmany(frm,to,mc,comment)\n-        except:\n-            print access.sendmany(frm,to)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"sendtoaddress\":\n-    try:\n-        to = raw_input(\"To (in format address1:amount1,address2:amount2,...): \")\n-        amt = raw_input(\"Amount:\")\n-        comment = raw_input(\"Comment (optional): \")\n-        commentto = raw_input(\"Comment-to (optional): \")\n-        try:\n-            print access.sendtoaddress(to,amt,comment,commentto)\n-        except:\n-            print access.sendtoaddress(to,amt)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"setaccount\":\n-    try:\n-        addr = raw_input(\"Address: \")\n-        acct = raw_input(\"Account:\")\n-        print access.setaccount(addr,acct)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"setgenerate\":\n-    try:\n-        gen= raw_input(\"Generate? (true/false): \")\n-        cpus = raw_input(\"Max processors/cores (-1 for unlimited, optional):\")\n-        try:\n-            print access.setgenerate(gen, cpus)\n-        except:\n-            print access.setgenerate(gen)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"settxfee\":\n-    try:\n-        amt = raw_input(\"Amount:\")\n-        print access.settxfee(amt)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"stop\":\n-    try:\n-        print access.stop()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"validateaddress\":\n-    try:\n-        addr = raw_input(\"Address: \")\n-        print access.validateaddress(addr)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"walletpassphrase\":\n-    try:\n-        pwd = getpass.getpass(prompt=\"Enter wallet passphrase: \")\n-        access.walletpassphrase(pwd, 60)\n-        print \"\\n---Wallet unlocked---\\n\"\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"walletpassphrasechange\":\n-    try:\n-        pwd = getpass.getpass(prompt=\"Enter old wallet passphrase: \")\n-        pwd2 = getpass.getpass(prompt=\"Enter new wallet passphrase: \")\n-        access.walletpassphrasechange(pwd, pwd2)\n-        print\n-        print \"\\n---Passphrase changed---\\n\"\n-    except Exception as inst:\n-        print inst\n-\n-else:\n-    print \"Command not found or not supported\""
      },
      {
        "sha": "ed92c654600bda48d9a63a51597aff58e9936c6d",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f5edb970a9a4a07d9550413884babce3ef9cb20/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f5edb970a9a4a07d9550413884babce3ef9cb20/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=9f5edb970a9a4a07d9550413884babce3ef9cb20",
        "patch": "@@ -55,3 +55,5 @@ git merge commit are mentioned.\n \n ### Miscellaneous\n \n+- Removed bitrpc.py from contrib\n+"
      }
    ]
  },
  {
    "sha": "9e6c33b202b43cf98fc3a5d400cd43ff27b14d66",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZTZjMzNiMjAyYjQzY2Y5OGZjM2E1ZDQwMGNkNDNmZjI3YjE0ZDY2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-03T17:24:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-03T17:34:50Z"
      },
      "message": "Merge pull request #6356\n\nf0cba6f Delay initial pruning until after wallet init (Adam Weiss)",
      "tree": {
        "sha": "a21803e2634f372bafb105138d3bb0a4416d3167",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a21803e2634f372bafb105138d3bb0a4416d3167"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9e6c33b202b43cf98fc3a5d400cd43ff27b14d66",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVv6Y6AAoJEHSBCwEjRsmmCg0IAIx2vJYo7gfVYstS3Nz/+lDl\naQVKQy2uJtRuQkGoB4n/yERDhrQo0211etJqlw3ezQFkWeyrV92R1EUxns6bqlFT\nuTIsBfg7OIHrU/OImmZ9h/poOS+niACZkh0r95kUuP+8vshj0TmFzUUjbmGdA1pj\nm61YuAj6GvyB0L/JnYKuFQ6bp0kOXr6KTzq3DOg+G2P+e+PEfLRYgk2zMCFPR8fD\nPfD9K579EkQzmQemj1Oc/E1nXRH0FymEbFp3APJeXHNnuBhi2fSB8a6VA+Ij86rt\n2AxK/jR8HYd6IfYlWdakuvR+QCfyQyNt3/CHj8O3oXgf9r2ckFa71F2oiwVXxCo=\n=5d9C\n-----END PGP SIGNATURE-----",
        "payload": "tree a21803e2634f372bafb105138d3bb0a4416d3167\nparent a2bf40dde7465292a29234c6d32d9df7e386617e\nparent f0cba6f8ebc2eb5a988f506b37e7113f724e63ff\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1438622652 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1438623290 +0200\n\nMerge pull request #6356\n\nf0cba6f Delay initial pruning until after wallet init (Adam Weiss)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e6c33b202b43cf98fc3a5d400cd43ff27b14d66",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9e6c33b202b43cf98fc3a5d400cd43ff27b14d66",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e6c33b202b43cf98fc3a5d400cd43ff27b14d66/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a2bf40dde7465292a29234c6d32d9df7e386617e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2bf40dde7465292a29234c6d32d9df7e386617e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a2bf40dde7465292a29234c6d32d9df7e386617e"
      },
      {
        "sha": "f0cba6f8ebc2eb5a988f506b37e7113f724e63ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0cba6f8ebc2eb5a988f506b37e7113f724e63ff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f0cba6f8ebc2eb5a988f506b37e7113f724e63ff"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 16,
      "deletions": 11
    },
    "files": [
      {
        "sha": "6bea42a20eaa3fd76034ecca570d63ff42081980",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 11,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e6c33b202b43cf98fc3a5d400cd43ff27b14d66/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e6c33b202b43cf98fc3a5d400cd43ff27b14d66/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=9e6c33b202b43cf98fc3a5d400cd43ff27b14d66",
        "patch": "@@ -1278,15 +1278,6 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         mempool.ReadFeeEstimates(est_filein);\n     fFeeEstimatesInitialized = true;\n \n-    // if prune mode, unset NODE_NETWORK and prune block files\n-    if (fPruneMode) {\n-        LogPrintf(\"Unsetting NODE_NETWORK on prune mode\\n\");\n-        nLocalServices &= ~NODE_NETWORK;\n-        if (!fReindex) {\n-            PruneAndFlush();\n-        }\n-    }\n-\n     // ********************************************************* Step 8: load wallet\n #ifdef ENABLE_WALLET\n     if (fDisableWallet) {\n@@ -1440,7 +1431,21 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n #else // ENABLE_WALLET\n     LogPrintf(\"No wallet support compiled in!\\n\");\n #endif // !ENABLE_WALLET\n-    // ********************************************************* Step 9: import blocks\n+\n+    // ********************************************************* Step 9: data directory maintenance\n+\n+    // if pruning, unset the service bit and perform the initial blockstore prune\n+    // after any wallet rescanning has taken place.\n+    if (fPruneMode) {\n+        uiInterface.InitMessage(_(\"Pruning blockstore...\"));\n+        LogPrintf(\"Unsetting NODE_NETWORK on prune mode\\n\");\n+        nLocalServices &= ~NODE_NETWORK;\n+        if (!fReindex) {\n+            PruneAndFlush();\n+        }\n+    }\n+\n+    // ********************************************************* Step 10: import blocks\n \n     if (mapArgs.count(\"-blocknotify\"))\n         uiInterface.NotifyBlockTip.connect(BlockNotifyCallback);\n@@ -1464,7 +1469,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n             MilliSleep(10);\n     }\n \n-    // ********************************************************* Step 10: start node\n+    // ********************************************************* Step 11: start node\n \n     if (!CheckDiskSpace())\n         return false;"
      }
    ]
  },
  {
    "sha": "10ac38ed9f3be17a09f39a801616bdf57f7edecc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMGFjMzhlZDlmM2JlMTdhMDlmMzlhODAxNjE2YmRmNTdmN2VkZWNj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-03T17:54:34Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-03T17:54:52Z"
      },
      "message": "Merge pull request #6284\n\nc6455c7 doc: mention change to option parsing behavior in release notes (Wladimir J. van der Laan)\nc38c49d Fix argument parsing oddity with -noX (Wladimir J. van der Laan)",
      "tree": {
        "sha": "7fee81ceb291c7b3484614042961a6335e7b1f04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7fee81ceb291c7b3484614042961a6335e7b1f04"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/10ac38ed9f3be17a09f39a801616bdf57f7edecc",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVv6rsAAoJEHSBCwEjRsmmKMoH/1G3kdkSpWkeRJbud9y0bnE7\nE7gxYyrqes66ROP8G5ZkJ+nY76C/Otv3mfegZTaVsDMONj0/weSn2UT0GqjS2Qis\nn4dCD7NxUIoSoBuGY2a0F6lk49swSHTrM/T4lgWNJIMlBiU7XsHLmI4UnGxUo1+v\nhaaduNgEJUuUH95JFUFE5A0X0Nr64b3rFIybsqBjaIjCD233jlrX8afo/DkEV6ui\n1DFPMav5xBWzMiKSbHWcgPnk3tfDZpnVrJSdVSbCqqFdM7H3IIMHZitZRK9gM3Xq\nPmXKmZWds5zMbHmeng1AzQG6/t5QiI60uV7b5j2rK/CpO58ohkgh5zyA+eV4ngI=\n=e5RL\n-----END PGP SIGNATURE-----",
        "payload": "tree 7fee81ceb291c7b3484614042961a6335e7b1f04\nparent 9e6c33b202b43cf98fc3a5d400cd43ff27b14d66\nparent c6455c77ab90910bf4c03005fb0a7dfe785e7087\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1438624474 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1438624492 +0200\n\nMerge pull request #6284\n\nc6455c7 doc: mention change to option parsing behavior in release notes (Wladimir J. van der Laan)\nc38c49d Fix argument parsing oddity with -noX (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10ac38ed9f3be17a09f39a801616bdf57f7edecc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/10ac38ed9f3be17a09f39a801616bdf57f7edecc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10ac38ed9f3be17a09f39a801616bdf57f7edecc/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9e6c33b202b43cf98fc3a5d400cd43ff27b14d66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e6c33b202b43cf98fc3a5d400cd43ff27b14d66",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9e6c33b202b43cf98fc3a5d400cd43ff27b14d66"
      },
      {
        "sha": "c6455c77ab90910bf4c03005fb0a7dfe785e7087",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6455c77ab90910bf4c03005fb0a7dfe785e7087",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c6455c77ab90910bf4c03005fb0a7dfe785e7087"
      }
    ],
    "stats": {
      "total": 77,
      "additions": 38,
      "deletions": 39
    },
    "files": [
      {
        "sha": "db6c28972d8ec4a9c532f65af7ae75612fd5296c",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10ac38ed9f3be17a09f39a801616bdf57f7edecc/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10ac38ed9f3be17a09f39a801616bdf57f7edecc/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=10ac38ed9f3be17a09f39a801616bdf57f7edecc",
        "patch": "@@ -27,6 +27,14 @@ Low-level RPC API changes\n   advantage if a JSON library insists on using a lossy floating point type for\n   numbers, which would be dangerous for monetary amounts.\n \n+Option parsing behavior\n+-----------------------\n+\n+Command line options are now parsed strictly in the order in which they are\n+specified. It used to be the case that `-X -noX` ends up, unintuitively, with X\n+set, as `-X` had precedence over `-noX`. This is no longer the case. Like for\n+other software, the last specified value for an option will hold.\n+\n 0.12.0 Change log\n =================\n "
      },
      {
        "sha": "eb61a2884d9f909f9e648bb74c04dd414814c729",
        "filename": "src/test/getarg_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10ac38ed9f3be17a09f39a801616bdf57f7edecc/src/test/getarg_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10ac38ed9f3be17a09f39a801616bdf57f7edecc/src/test/getarg_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/getarg_tests.cpp?ref=10ac38ed9f3be17a09f39a801616bdf57f7edecc",
        "patch": "@@ -60,18 +60,18 @@ BOOST_AUTO_TEST_CASE(boolarg)\n     BOOST_CHECK(!GetBoolArg(\"-foo\", false));\n     BOOST_CHECK(!GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo -nofoo\");  // -foo should win\n-    BOOST_CHECK(GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(GetBoolArg(\"-foo\", true));\n-\n-    ResetArgs(\"-foo=1 -nofoo=1\");  // -foo should win\n-    BOOST_CHECK(GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(GetBoolArg(\"-foo\", true));\n+    ResetArgs(\"-foo -nofoo\");  // -nofoo should win\n+    BOOST_CHECK(!GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!GetBoolArg(\"-foo\", true));\n \n-    ResetArgs(\"-foo=0 -nofoo=0\");  // -foo should win\n+    ResetArgs(\"-foo=1 -nofoo=1\");  // -nofoo should win\n     BOOST_CHECK(!GetBoolArg(\"-foo\", false));\n     BOOST_CHECK(!GetBoolArg(\"-foo\", true));\n \n+    ResetArgs(\"-foo=0 -nofoo=0\");  // -nofoo=0 should win\n+    BOOST_CHECK(GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(GetBoolArg(\"-foo\", true));\n+\n     // New 0.6 feature: treat -- same as -:\n     ResetArgs(\"--foo=1\");\n     BOOST_CHECK(GetBoolArg(\"-foo\", false));\n@@ -150,9 +150,9 @@ BOOST_AUTO_TEST_CASE(boolargno)\n     BOOST_CHECK(GetBoolArg(\"-foo\", true));\n     BOOST_CHECK(GetBoolArg(\"-foo\", false));\n \n-    ResetArgs(\"-foo --nofoo\");\n-    BOOST_CHECK(GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(GetBoolArg(\"-foo\", false));\n+    ResetArgs(\"-foo --nofoo\"); // --nofoo should win\n+    BOOST_CHECK(!GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!GetBoolArg(\"-foo\", false));\n \n     ResetArgs(\"-nofoo -foo\"); // foo always wins:\n     BOOST_CHECK(GetBoolArg(\"-foo\", true));"
      },
      {
        "sha": "a7ec740de8c86922540b2a2d170a788ad79bdf8e",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 28,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10ac38ed9f3be17a09f39a801616bdf57f7edecc/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10ac38ed9f3be17a09f39a801616bdf57f7edecc/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=10ac38ed9f3be17a09f39a801616bdf57f7edecc",
        "patch": "@@ -315,18 +315,21 @@ int LogPrintStr(const std::string &str)\n     return ret;\n }\n \n-static void InterpretNegativeSetting(string name, map<string, string>& mapSettingsRet)\n+/** Interpret string as boolean, for argument parsing */\n+static bool InterpretBool(const std::string& strValue)\n {\n-    // interpret -nofoo as -foo=0 (and -nofoo=0 as -foo=1) as long as -foo not set\n-    if (name.find(\"-no\") == 0)\n+    if (strValue.empty())\n+        return true;\n+    return (atoi(strValue) != 0);\n+}\n+\n+/** Turn -noX into -X=0 */\n+static void InterpretNegativeSetting(std::string& strKey, std::string& strValue)\n+{\n+    if (strKey.length()>3 && strKey[0]=='-' && strKey[1]=='n' && strKey[2]=='o')\n     {\n-        std::string positive(\"-\");\n-        positive.append(name.begin()+3, name.end());\n-        if (mapSettingsRet.count(positive) == 0)\n-        {\n-            bool value = !GetBoolArg(name, false);\n-            mapSettingsRet[positive] = (value ? \"1\" : \"0\");\n-        }\n+        strKey = \"-\" + strKey.substr(3);\n+        strValue = InterpretBool(strValue) ? \"0\" : \"1\";\n     }\n }\n \n@@ -358,17 +361,11 @@ void ParseParameters(int argc, const char* const argv[])\n         // If both --foo and -foo are set, the last takes effect.\n         if (str.length() > 1 && str[1] == '-')\n             str = str.substr(1);\n+        InterpretNegativeSetting(str, strValue);\n \n         mapArgs[str] = strValue;\n         mapMultiArgs[str].push_back(strValue);\n     }\n-\n-    // New 0.6 features:\n-    BOOST_FOREACH(const PAIRTYPE(string,string)& entry, mapArgs)\n-    {\n-        // interpret -nofoo as -foo=0 (and -nofoo=0 as -foo=1) as long as -foo not set\n-        InterpretNegativeSetting(entry.first, mapArgs);\n-    }\n }\n \n std::string GetArg(const std::string& strArg, const std::string& strDefault)\n@@ -388,11 +385,7 @@ int64_t GetArg(const std::string& strArg, int64_t nDefault)\n bool GetBoolArg(const std::string& strArg, bool fDefault)\n {\n     if (mapArgs.count(strArg))\n-    {\n-        if (mapArgs[strArg].empty())\n-            return true;\n-        return (atoi(mapArgs[strArg]) != 0);\n-    }\n+        return InterpretBool(mapArgs[strArg]);\n     return fDefault;\n }\n \n@@ -543,13 +536,11 @@ void ReadConfigFile(map<string, string>& mapSettingsRet,\n     {\n         // Don't overwrite existing settings so command line settings override bitcoin.conf\n         string strKey = string(\"-\") + it->string_key;\n+        string strValue = it->value[0];\n+        InterpretNegativeSetting(strKey, strValue);\n         if (mapSettingsRet.count(strKey) == 0)\n-        {\n-            mapSettingsRet[strKey] = it->value[0];\n-            // interpret nofoo=1 as foo=0 (and nofoo=0 as foo=1) as long as foo not set)\n-            InterpretNegativeSetting(strKey, mapSettingsRet);\n-        }\n-        mapMultiSettingsRet[strKey].push_back(it->value[0]);\n+            mapSettingsRet[strKey] = strValue;\n+        mapMultiSettingsRet[strKey].push_back(strValue);\n     }\n     // If datadir is changed in .conf file:\n     ClearDatadirCache();"
      }
    ]
  },
  {
    "sha": "219b916545f3be194eb53801bfb8d0694978fb00",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMTliOTE2NTQ1ZjNiZTE5NGViNTM4MDFiZmI4ZDA2OTQ5NzhmYjAw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-03T18:13:29Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-03T18:13:43Z"
      },
      "message": "Merge pull request #6498\n\na8d0407 Move recentRejects initialization to top of InitBlockIndex (Wladimir J. van der Laan)\n0847d9c Keep track of recently rejected transactions (Peter Todd)\nd741371 Only use randomly created nonces in CRollingBloomFilter. (Pieter Wuille)\nd2d7ee0 Make CRollingBloomFilter set nTweak for you (Peter Todd)\na3d65fe Reuse vector hashing code for uint256 (Pieter Wuille)\nbbe4108 Add uint256 support to CRollingBloomFilter (Peter Todd)",
      "tree": {
        "sha": "16daef3e48104bded112df2e1b9dfc9e72b00375",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/16daef3e48104bded112df2e1b9dfc9e72b00375"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/219b916545f3be194eb53801bfb8d0694978fb00",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVv69XAAoJEHSBCwEjRsmmCSIIALkbQ+WVZdrYyK658B3WbDZP\nRQ/bsMHMBYneDHNEwHS2maUNPiU7DKvyl8CQTpBsW62OOKHWRuXS1DoUNZpVQBhE\nuB640x2ZE4tOW7d8Zx/WME9IpKfCJF8LaHQZ8oL0dNI4u5uGRM48jO2RWjz4HYZB\nxR9211VKnZ349mtEE5QCIyFL/eZe63V/B8c9ctUiblgKVFZsBBd1uHm8qY8ZZJZM\nPCanveDfkm3vlqXeW+E9hCQs7hRFjy3ptIT85TXMtcsXPDVc51Ataf5EiAcml6mL\nt4KBY9Y62f69Prab5TSYlVUELE0R6mjWnpIjN/aibrlwYMOcgtSTWTK3iL6WGJk=\n=fcwn\n-----END PGP SIGNATURE-----",
        "payload": "tree 16daef3e48104bded112df2e1b9dfc9e72b00375\nparent 10ac38ed9f3be17a09f39a801616bdf57f7edecc\nparent a8d0407c4fcf7c4e8ed0e8edabd204f7a4efa477\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1438625609 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1438625623 +0200\n\nMerge pull request #6498\n\na8d0407 Move recentRejects initialization to top of InitBlockIndex (Wladimir J. van der Laan)\n0847d9c Keep track of recently rejected transactions (Peter Todd)\nd741371 Only use randomly created nonces in CRollingBloomFilter. (Pieter Wuille)\nd2d7ee0 Make CRollingBloomFilter set nTweak for you (Peter Todd)\na3d65fe Reuse vector hashing code for uint256 (Pieter Wuille)\nbbe4108 Add uint256 support to CRollingBloomFilter (Peter Todd)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/219b916545f3be194eb53801bfb8d0694978fb00",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/219b916545f3be194eb53801bfb8d0694978fb00",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/219b916545f3be194eb53801bfb8d0694978fb00/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "10ac38ed9f3be17a09f39a801616bdf57f7edecc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10ac38ed9f3be17a09f39a801616bdf57f7edecc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/10ac38ed9f3be17a09f39a801616bdf57f7edecc"
      },
      {
        "sha": "a8d0407c4fcf7c4e8ed0e8edabd204f7a4efa477",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8d0407c4fcf7c4e8ed0e8edabd204f7a4efa477",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a8d0407c4fcf7c4e8ed0e8edabd204f7a4efa477"
      }
    ],
    "stats": {
      "total": 132,
      "additions": 109,
      "deletions": 23
    },
    "files": [
      {
        "sha": "de87206592c35b928834ee2f4d637d3e150d9a25",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 6,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/219b916545f3be194eb53801bfb8d0694978fb00/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/219b916545f3be194eb53801bfb8d0694978fb00/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=219b916545f3be194eb53801bfb8d0694978fb00",
        "patch": "@@ -8,6 +8,7 @@\n #include \"hash.h\"\n #include \"script/script.h\"\n #include \"script/standard.h\"\n+#include \"random.h\"\n #include \"streams.h\"\n \n #include <math.h>\n@@ -121,6 +122,12 @@ void CBloomFilter::clear()\n     isEmpty = true;\n }\n \n+void CBloomFilter::reset(unsigned int nNewTweak)\n+{\n+    clear();\n+    nTweak = nNewTweak;\n+}\n+\n bool CBloomFilter::IsWithinSizeConstraints() const\n {\n     return vData.size() <= MAX_BLOOM_FILTER_SIZE && nHashFuncs <= MAX_HASH_FUNCS;\n@@ -209,15 +216,17 @@ void CBloomFilter::UpdateEmptyFull()\n     isEmpty = empty;\n }\n \n-CRollingBloomFilter::CRollingBloomFilter(unsigned int nElements, double fpRate, unsigned int nTweak) :\n-    b1(nElements * 2, fpRate, nTweak), b2(nElements * 2, fpRate, nTweak)\n+CRollingBloomFilter::CRollingBloomFilter(unsigned int nElements, double fpRate) :\n+    b1(nElements * 2, fpRate, 0), b2(nElements * 2, fpRate, 0)\n {\n     // Implemented using two bloom filters of 2 * nElements each.\n     // We fill them up, and clear them, staggered, every nElements\n     // inserted, so at least one always contains the last nElements\n     // inserted.\n-    nBloomSize = nElements * 2;\n     nInsertions = 0;\n+    nBloomSize = nElements * 2;\n+\n+    reset();\n }\n \n void CRollingBloomFilter::insert(const std::vector<unsigned char>& vKey)\n@@ -234,6 +243,12 @@ void CRollingBloomFilter::insert(const std::vector<unsigned char>& vKey)\n     }\n }\n \n+void CRollingBloomFilter::insert(const uint256& hash)\n+{\n+    vector<unsigned char> data(hash.begin(), hash.end());\n+    insert(data);\n+}\n+\n bool CRollingBloomFilter::contains(const std::vector<unsigned char>& vKey) const\n {\n     if (nInsertions < nBloomSize / 2) {\n@@ -242,9 +257,16 @@ bool CRollingBloomFilter::contains(const std::vector<unsigned char>& vKey) const\n     return b1.contains(vKey);\n }\n \n-void CRollingBloomFilter::clear()\n+bool CRollingBloomFilter::contains(const uint256& hash) const\n+{\n+    vector<unsigned char> data(hash.begin(), hash.end());\n+    return contains(data);\n+}\n+\n+void CRollingBloomFilter::reset()\n {\n-    b1.clear();\n-    b2.clear();\n+    unsigned int nNewTweak = GetRand(std::numeric_limits<unsigned int>::max());\n+    b1.reset(nNewTweak);\n+    b2.reset(nNewTweak);\n     nInsertions = 0;\n }"
      },
      {
        "sha": "a4dba8cb4f7187251d43dfab96e0435fbf98c481",
        "filename": "src/bloom.h",
        "status": "modified",
        "additions": 13,
        "deletions": 3,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/219b916545f3be194eb53801bfb8d0694978fb00/src/bloom.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/219b916545f3be194eb53801bfb8d0694978fb00/src/bloom.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.h?ref=219b916545f3be194eb53801bfb8d0694978fb00",
        "patch": "@@ -89,6 +89,7 @@ class CBloomFilter\n     bool contains(const uint256& hash) const;\n \n     void clear();\n+    void reset(unsigned int nNewTweak);\n \n     //! True if the size is <= MAX_BLOOM_FILTER_SIZE and the number of hash functions is <= MAX_HASH_FUNCS\n     //! (catch a filter which was just deserialized which was too big)\n@@ -103,20 +104,29 @@ class CBloomFilter\n \n /**\n  * RollingBloomFilter is a probabilistic \"keep track of most recently inserted\" set.\n- * Construct it with the number of items to keep track of, and a false-positive rate.\n+ * Construct it with the number of items to keep track of, and a false-positive\n+ * rate. Unlike CBloomFilter, by default nTweak is set to a cryptographically\n+ * secure random value for you. Similarly rather than clear() the method\n+ * reset() is provided, which also changes nTweak to decrease the impact of\n+ * false-positives.\n  *\n  * contains(item) will always return true if item was one of the last N things\n  * insert()'ed ... but may also return true for items that were not inserted.\n  */\n class CRollingBloomFilter\n {\n public:\n-    CRollingBloomFilter(unsigned int nElements, double nFPRate, unsigned int nTweak);\n+    // A random bloom filter calls GetRand() at creation time.\n+    // Don't create global CRollingBloomFilter objects, as they may be\n+    // constructed before the randomizer is properly initialized.\n+    CRollingBloomFilter(unsigned int nElements, double nFPRate);\n \n     void insert(const std::vector<unsigned char>& vKey);\n+    void insert(const uint256& hash);\n     bool contains(const std::vector<unsigned char>& vKey) const;\n+    bool contains(const uint256& hash) const;\n \n-    void clear();\n+    void reset();\n \n private:\n     unsigned int nBloomSize;"
      },
      {
        "sha": "14f36762c9694741724aab98fd2ead8554e8e2da",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 64,
        "deletions": 10,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/219b916545f3be194eb53801bfb8d0694978fb00/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/219b916545f3be194eb53801bfb8d0694978fb00/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=219b916545f3be194eb53801bfb8d0694978fb00",
        "patch": "@@ -162,6 +162,29 @@ namespace {\n      */\n     map<uint256, NodeId> mapBlockSource;\n \n+    /**\n+     * Filter for transactions that were recently rejected by\n+     * AcceptToMemoryPool. These are not rerequested until the chain tip\n+     * changes, at which point the entire filter is reset. Protected by\n+     * cs_main.\n+     *\n+     * Without this filter we'd be re-requesting txs from each of our peers,\n+     * increasing bandwidth consumption considerably. For instance, with 100\n+     * peers, half of which relay a tx we don't accept, that might be a 50x\n+     * bandwidth increase. A flooding attacker attempting to roll-over the\n+     * filter using minimum-sized, 60byte, transactions might manage to send\n+     * 1000/sec if we have fast peers, so we pick 120,000 to give our peers a\n+     * two minute window to send invs to us.\n+     *\n+     * Decreasing the false positive rate is fairly cheap, so we pick one in a\n+     * million to make it highly unlikely for users to have issues with this\n+     * filter.\n+     *\n+     * Memory used: 1.7MB\n+     */\n+    boost::scoped_ptr<CRollingBloomFilter> recentRejects;\n+    uint256 hashRecentRejectsChainTip;\n+\n     /** Blocks that are in flight, and that are in the queue to be downloaded. Protected by cs_main. */\n     struct QueuedBlock {\n         uint256 hash;\n@@ -3248,6 +3271,7 @@ void UnloadBlockIndex()\n     setDirtyBlockIndex.clear();\n     setDirtyFileInfo.clear();\n     mapNodeState.clear();\n+    recentRejects.reset(NULL);\n \n     BOOST_FOREACH(BlockMap::value_type& entry, mapBlockIndex) {\n         delete entry.second;\n@@ -3268,6 +3292,10 @@ bool LoadBlockIndex()\n bool InitBlockIndex() {\n     const CChainParams& chainparams = Params();\n     LOCK(cs_main);\n+\n+    // Initialize global variables that cannot be constructed at startup.\n+    recentRejects.reset(new CRollingBloomFilter(120000, 0.000001));\n+\n     // Check whether we're already initialized\n     if (chainActive.Genesis() != NULL)\n         return true;\n@@ -3670,10 +3698,21 @@ bool static AlreadyHave(const CInv& inv) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n     {\n     case MSG_TX:\n         {\n-            bool txInMap = false;\n-            txInMap = mempool.exists(inv.hash);\n-            return txInMap || mapOrphanTransactions.count(inv.hash) ||\n-                pcoinsTip->HaveCoins(inv.hash);\n+            assert(recentRejects);\n+            if (chainActive.Tip()->GetBlockHash() != hashRecentRejectsChainTip)\n+            {\n+                // If the chain tip has changed previously rejected transactions\n+                // might be now valid, e.g. due to a nLockTime'd tx becoming valid,\n+                // or a double-spend. Reset the rejects filter and give those\n+                // txs a second chance.\n+                hashRecentRejectsChainTip = chainActive.Tip()->GetBlockHash();\n+                recentRejects->reset();\n+            }\n+\n+            return recentRejects->contains(inv.hash) ||\n+                   mempool.exists(inv.hash) ||\n+                   mapOrphanTransactions.count(inv.hash) ||\n+                   pcoinsTip->HaveCoins(inv.hash);\n         }\n     case MSG_BLOCK:\n         return mapBlockIndex.count(inv.hash);\n@@ -4273,6 +4312,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                         // Probably non-standard or insufficient fee/priority\n                         LogPrint(\"mempool\", \"   removed orphan tx %s\\n\", orphanHash.ToString());\n                         vEraseQueue.push_back(orphanHash);\n+                        assert(recentRejects);\n+                        recentRejects->insert(orphanHash);\n                     }\n                     mempool.check(pcoinsTip);\n                 }\n@@ -4290,11 +4331,24 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             unsigned int nEvicted = LimitOrphanTxSize(nMaxOrphanTx);\n             if (nEvicted > 0)\n                 LogPrint(\"mempool\", \"mapOrphan overflow, removed %u tx\\n\", nEvicted);\n-        } else if (pfrom->fWhitelisted) {\n-            // Always relay transactions received from whitelisted peers, even\n-            // if they are already in the mempool (allowing the node to function\n-            // as a gateway for nodes hidden behind it).\n-            RelayTransaction(tx);\n+        } else {\n+            // AcceptToMemoryPool() returned false, possibly because the tx is\n+            // already in the mempool; if the tx isn't in the mempool that\n+            // means it was rejected and we shouldn't ask for it again.\n+            if (!mempool.exists(tx.GetHash())) {\n+                assert(recentRejects);\n+                recentRejects->insert(tx.GetHash());\n+            }\n+            if (pfrom->fWhitelisted) {\n+                // Always relay transactions received from whitelisted peers, even\n+                // if they were rejected from the mempool, allowing the node to\n+                // function as a gateway for nodes hidden behind it.\n+                //\n+                // FIXME: This includes invalid transactions, which means a\n+                // whitelisted peer could get us banned! We may want to change\n+                // that.\n+                RelayTransaction(tx);\n+            }\n         }\n         int nDoS = 0;\n         if (state.IsInvalid(nDoS))\n@@ -4797,7 +4851,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n             {\n                 // Periodically clear addrKnown to allow refresh broadcasts\n                 if (nLastRebroadcast)\n-                    pnode->addrKnown.clear();\n+                    pnode->addrKnown.reset();\n \n                 // Rebroadcast our address\n                 AdvertizeLocal(pnode);"
      },
      {
        "sha": "176fd7195ba62603a54b3bfa8152a743e4fe7c76",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/219b916545f3be194eb53801bfb8d0694978fb00/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/219b916545f3be194eb53801bfb8d0694978fb00/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=219b916545f3be194eb53801bfb8d0694978fb00",
        "patch": "@@ -2060,7 +2060,7 @@ unsigned int SendBufferSize() { return 1000*GetArg(\"-maxsendbuffer\", 1*1000); }\n \n CNode::CNode(SOCKET hSocketIn, const CAddress& addrIn, const std::string& addrNameIn, bool fInboundIn) :\n     ssSend(SER_NETWORK, INIT_PROTO_VERSION),\n-    addrKnown(5000, 0.001, insecure_rand()),\n+    addrKnown(5000, 0.001),\n     setInventoryKnown(SendBufferSize() / 1000)\n {\n     nServices = 0;"
      },
      {
        "sha": "6b30d6aa8ae7a0ca65303b7cc92333f0aa75f494",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/219b916545f3be194eb53801bfb8d0694978fb00/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/219b916545f3be194eb53801bfb8d0694978fb00/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=219b916545f3be194eb53801bfb8d0694978fb00",
        "patch": "@@ -469,7 +469,7 @@ static std::vector<unsigned char> RandomData()\n BOOST_AUTO_TEST_CASE(rolling_bloom)\n {\n     // last-100-entry, 1% false positive:\n-    CRollingBloomFilter rb1(100, 0.01, 0);\n+    CRollingBloomFilter rb1(100, 0.01);\n \n     // Overfill:\n     static const int DATASIZE=399;\n@@ -500,7 +500,7 @@ BOOST_AUTO_TEST_CASE(rolling_bloom)\n     BOOST_CHECK(nHits < 175);\n \n     BOOST_CHECK(rb1.contains(data[DATASIZE-1]));\n-    rb1.clear();\n+    rb1.reset();\n     BOOST_CHECK(!rb1.contains(data[DATASIZE-1]));\n \n     // Now roll through data, make sure last 100 entries\n@@ -527,7 +527,7 @@ BOOST_AUTO_TEST_CASE(rolling_bloom)\n     BOOST_CHECK(nHits < 100);\n \n     // last-1000-entry, 0.01% false positive:\n-    CRollingBloomFilter rb2(1000, 0.001, 0);\n+    CRollingBloomFilter rb2(1000, 0.001);\n     for (int i = 0; i < DATASIZE; i++) {\n         rb2.insert(data[i]);\n     }"
      }
    ]
  },
  {
    "sha": "f261f19b4b77de7b2769a62356b4e4165cae6dc8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMjYxZjE5YjRiNzdkZTdiMjc2OWE2MjM1NmI0ZTQxNjVjYWU2ZGM4",
    "commit": {
      "author": {
        "name": "Casey Rodarmor",
        "email": "casey@rodarmor.com",
        "date": "2015-07-28T21:42:03Z"
      },
      "committer": {
        "name": "Casey Rodarmor",
        "email": "casey@rodarmor.com",
        "date": "2015-08-03T19:11:52Z"
      },
      "message": "Give a better error message if system clock is bad\n\nFixes #2007\n\nThis checks to see if the system clock appears to be bad and gives a\nhelpful error message. If the user's clock is set incorrectly, hopefully\nthey'll abort, fix it, and then save themselves a fruitless resync.",
      "tree": {
        "sha": "9338290a9aaad9ba40a823e683fe41e83fb0b02e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9338290a9aaad9ba40a823e683fe41e83fb0b02e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f261f19b4b77de7b2769a62356b4e4165cae6dc8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f261f19b4b77de7b2769a62356b4e4165cae6dc8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f261f19b4b77de7b2769a62356b4e4165cae6dc8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f261f19b4b77de7b2769a62356b4e4165cae6dc8/comments",
    "author": {
      "login": "casey",
      "id": 1945,
      "node_id": "MDQ6VXNlcjE5NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/casey",
      "html_url": "https://github.com/casey",
      "followers_url": "https://api.github.com/users/casey/followers",
      "following_url": "https://api.github.com/users/casey/following{/other_user}",
      "gists_url": "https://api.github.com/users/casey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/casey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/casey/subscriptions",
      "organizations_url": "https://api.github.com/users/casey/orgs",
      "repos_url": "https://api.github.com/users/casey/repos",
      "events_url": "https://api.github.com/users/casey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/casey/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "casey",
      "id": 1945,
      "node_id": "MDQ6VXNlcjE5NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/casey",
      "html_url": "https://github.com/casey",
      "followers_url": "https://api.github.com/users/casey/followers",
      "following_url": "https://api.github.com/users/casey/following{/other_user}",
      "gists_url": "https://api.github.com/users/casey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/casey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/casey/subscriptions",
      "organizations_url": "https://api.github.com/users/casey/orgs",
      "repos_url": "https://api.github.com/users/casey/repos",
      "events_url": "https://api.github.com/users/casey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/casey/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1369d699b6221818dc9ca72eb6c0cea30eeee914",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1369d699b6221818dc9ca72eb6c0cea30eeee914",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1369d699b6221818dc9ca72eb6c0cea30eeee914"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 12,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fc979f059dd73d7df9ae0d707d7100a4390c43e7",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f261f19b4b77de7b2769a62356b4e4165cae6dc8/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f261f19b4b77de7b2769a62356b4e4165cae6dc8/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=f261f19b4b77de7b2769a62356b4e4165cae6dc8",
        "patch": "@@ -1225,6 +1225,18 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n                     LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; -checkblocks=%d may fail\\n\",\n                         MIN_BLOCKS_TO_KEEP, GetArg(\"-checkblocks\", 288));\n                 }\n+\n+                {\n+                    LOCK(cs_main);\n+                    CBlockIndex* tip = chainActive.Tip();\n+                    if (tip && tip->nTime > GetAdjustedTime() + 2 * 60 * 60) {\n+                        strLoadError = _(\"The block database contains a block which appears to be from the future. \"\n+                                \"This may be due to your computer's date and time being set incorrectly. \"\n+                                \"Only rebuild the block database if you are sure that your computer's date and time are correct\");\n+                        break;\n+                    }\n+                }\n+\n                 if (!CVerifyDB().VerifyDB(pcoinsdbview, GetArg(\"-checklevel\", 3),\n                               GetArg(\"-checkblocks\", 288))) {\n                     strLoadError = _(\"Corrupted block database detected\");"
      }
    ]
  },
  {
    "sha": "19dd40a25f061fb8b16b9332826293f5d0b58a56",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOWRkNDBhMjVmMDYxZmI4YjE2YjkzMzI4MjYyOTNmNWQwYjU4YTU2",
    "commit": {
      "author": {
        "name": "Matt Quinn",
        "email": "matt@mattjquinn.com",
        "date": "2015-08-01T17:41:21Z"
      },
      "committer": {
        "name": "Matt Quinn",
        "email": "matt@mattjquinn.com",
        "date": "2015-08-03T21:37:00Z"
      },
      "message": "Consolidate individual references to the current maximum peer connection\nvalue of 125 into a single constant declaration.",
      "tree": {
        "sha": "6aca0a8e726c4c3a5fb8d8060c0970c06abf94d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6aca0a8e726c4c3a5fb8d8060c0970c06abf94d4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/19dd40a25f061fb8b16b9332826293f5d0b58a56",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19dd40a25f061fb8b16b9332826293f5d0b58a56",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/19dd40a25f061fb8b16b9332826293f5d0b58a56",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19dd40a25f061fb8b16b9332826293f5d0b58a56/comments",
    "author": {
      "login": "mattjquinn",
      "id": 34240191,
      "node_id": "MDQ6VXNlcjM0MjQwMTkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/34240191?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattjquinn",
      "html_url": "https://github.com/mattjquinn",
      "followers_url": "https://api.github.com/users/mattjquinn/followers",
      "following_url": "https://api.github.com/users/mattjquinn/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattjquinn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattjquinn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattjquinn/subscriptions",
      "organizations_url": "https://api.github.com/users/mattjquinn/orgs",
      "repos_url": "https://api.github.com/users/mattjquinn/repos",
      "events_url": "https://api.github.com/users/mattjquinn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattjquinn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mattjquinn",
      "id": 34240191,
      "node_id": "MDQ6VXNlcjM0MjQwMTkx",
      "avatar_url": "https://avatars.githubusercontent.com/u/34240191?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattjquinn",
      "html_url": "https://github.com/mattjquinn",
      "followers_url": "https://api.github.com/users/mattjquinn/followers",
      "following_url": "https://api.github.com/users/mattjquinn/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattjquinn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattjquinn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattjquinn/subscriptions",
      "organizations_url": "https://api.github.com/users/mattjquinn/orgs",
      "repos_url": "https://api.github.com/users/mattjquinn/repos",
      "events_url": "https://api.github.com/users/mattjquinn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattjquinn/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "219b916545f3be194eb53801bfb8d0694978fb00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/219b916545f3be194eb53801bfb8d0694978fb00",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/219b916545f3be194eb53801bfb8d0694978fb00"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 5,
      "deletions": 3
    },
    "files": [
      {
        "sha": "d4ec04aae61a5dd78192b2c2a1c0c77eb23ac5d1",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19dd40a25f061fb8b16b9332826293f5d0b58a56/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19dd40a25f061fb8b16b9332826293f5d0b58a56/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=19dd40a25f061fb8b16b9332826293f5d0b58a56",
        "patch": "@@ -314,7 +314,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-externalip=<ip>\", _(\"Specify your own public address\"));\n     strUsage += HelpMessageOpt(\"-forcednsseed\", strprintf(_(\"Always query for peer addresses via DNS lookup (default: %u)\"), 0));\n     strUsage += HelpMessageOpt(\"-listen\", _(\"Accept connections from outside (default: 1 if no -proxy or -connect)\"));\n-    strUsage += HelpMessageOpt(\"-maxconnections=<n>\", strprintf(_(\"Maintain at most <n> connections to peers (default: %u)\"), 125));\n+    strUsage += HelpMessageOpt(\"-maxconnections=<n>\", strprintf(_(\"Maintain at most <n> connections to peers (default: %u)\"), DEFAULT_MAX_PEER_CONNECTIONS));\n     strUsage += HelpMessageOpt(\"-maxreceivebuffer=<n>\", strprintf(_(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: %u)\"), 5000));\n     strUsage += HelpMessageOpt(\"-maxsendbuffer=<n>\", strprintf(_(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\"), 1000));\n     strUsage += HelpMessageOpt(\"-onion=<ip:port>\", strprintf(_(\"Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)\"), \"-proxy\"));\n@@ -750,7 +750,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     \n     // Make sure enough file descriptors are available\n     int nBind = std::max((int)mapArgs.count(\"-bind\") + (int)mapArgs.count(\"-whitebind\"), 1);\n-    int nUserMaxConnections = GetArg(\"-maxconnections\", 125);\n+    int nUserMaxConnections = GetArg(\"-maxconnections\", DEFAULT_MAX_PEER_CONNECTIONS);\n     nMaxConnections = std::max(nUserMaxConnections, 0);\n     int nUserWhiteConnections = GetArg(\"-whiteconnections\", 0);\n     nWhiteConnections = std::max(nUserWhiteConnections, 0);"
      },
      {
        "sha": "5d413697bf839f4ef7e82738fef64624ef46c342",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19dd40a25f061fb8b16b9332826293f5d0b58a56/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19dd40a25f061fb8b16b9332826293f5d0b58a56/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=19dd40a25f061fb8b16b9332826293f5d0b58a56",
        "patch": "@@ -80,7 +80,7 @@ static CNode* pnodeLocalHost = NULL;\n uint64_t nLocalHostNonce = 0;\n static std::vector<ListenSocket> vhListenSocket;\n CAddrMan addrman;\n-int nMaxConnections = 125;\n+int nMaxConnections = DEFAULT_MAX_PEER_CONNECTIONS;\n int nWhiteConnections = 0;\n bool fAddressesInitialized = false;\n "
      },
      {
        "sha": "aac28fe1050efd1a67d282867cf703fe127a51dd",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19dd40a25f061fb8b16b9332826293f5d0b58a56/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19dd40a25f061fb8b16b9332826293f5d0b58a56/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=19dd40a25f061fb8b16b9332826293f5d0b58a56",
        "patch": "@@ -56,6 +56,8 @@ static const bool DEFAULT_UPNP = false;\n #endif\n /** The maximum number of entries in mapAskFor */\n static const size_t MAPASKFOR_MAX_SZ = MAX_INV_SZ;\n+/** The maximum number of peer connections to maintain. */\n+static const unsigned int DEFAULT_MAX_PEER_CONNECTIONS = 125;\n \n unsigned int ReceiveFloodSize();\n unsigned int SendBufferSize();"
      }
    ]
  },
  {
    "sha": "9ca7857df74c52eb2c46be36c88a12879be6cf8c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Y2E3ODU3ZGY3NGM1MmViMmM0NmJlMzZjODhhMTI4NzliZTZjZjhj",
    "commit": {
      "author": {
        "name": "Ross Nicoll",
        "email": "jrn@jrn.me.uk",
        "date": "2015-08-01T19:15:23Z"
      },
      "committer": {
        "name": "Ross Nicoll",
        "email": "jrn@jrn.me.uk",
        "date": "2015-08-03T21:58:30Z"
      },
      "message": "Rationalize currency unit to \"BTC\"\n\nPreviously various user-facing strings have used inconsistent currency units \"BTC\",\n\"btc\" and \"bitcoins\". This adds a single constant and uses it for each reference to\nthe currency unit.\n\nAlso adds a description of the unit for --maxtxfee, and adds the missing \"amount\"\nfield description to the (deprecated) move RPC command.",
      "tree": {
        "sha": "b9273763228ed4a847d3bc64c7c68c820c0b0e84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b9273763228ed4a847d3bc64c7c68c820c0b0e84"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9ca7857df74c52eb2c46be36c88a12879be6cf8c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ca7857df74c52eb2c46be36c88a12879be6cf8c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9ca7857df74c52eb2c46be36c88a12879be6cf8c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ca7857df74c52eb2c46be36c88a12879be6cf8c/comments",
    "author": {
      "login": "rnicoll",
      "id": 3513077,
      "node_id": "MDQ6VXNlcjM1MTMwNzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3513077?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rnicoll",
      "html_url": "https://github.com/rnicoll",
      "followers_url": "https://api.github.com/users/rnicoll/followers",
      "following_url": "https://api.github.com/users/rnicoll/following{/other_user}",
      "gists_url": "https://api.github.com/users/rnicoll/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rnicoll/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rnicoll/subscriptions",
      "organizations_url": "https://api.github.com/users/rnicoll/orgs",
      "repos_url": "https://api.github.com/users/rnicoll/repos",
      "events_url": "https://api.github.com/users/rnicoll/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rnicoll/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rnicoll",
      "id": 3513077,
      "node_id": "MDQ6VXNlcjM1MTMwNzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3513077?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rnicoll",
      "html_url": "https://github.com/rnicoll",
      "followers_url": "https://api.github.com/users/rnicoll/followers",
      "following_url": "https://api.github.com/users/rnicoll/following{/other_user}",
      "gists_url": "https://api.github.com/users/rnicoll/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rnicoll/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rnicoll/subscriptions",
      "organizations_url": "https://api.github.com/users/rnicoll/orgs",
      "repos_url": "https://api.github.com/users/rnicoll/repos",
      "events_url": "https://api.github.com/users/rnicoll/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rnicoll/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "86cfd23f68367af072500b1758a4c446cdd36e74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86cfd23f68367af072500b1758a4c446cdd36e74",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/86cfd23f68367af072500b1758a4c446cdd36e74"
      }
    ],
    "stats": {
      "total": 88,
      "additions": 48,
      "deletions": 40
    },
    "files": [
      {
        "sha": "b46918198448b1487e500a49dfceea3bec4b434e",
        "filename": "src/amount.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ca7857df74c52eb2c46be36c88a12879be6cf8c/src/amount.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ca7857df74c52eb2c46be36c88a12879be6cf8c/src/amount.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/amount.cpp?ref=9ca7857df74c52eb2c46be36c88a12879be6cf8c",
        "patch": "@@ -7,6 +7,8 @@\n \n #include \"tinyformat.h\"\n \n+const std::string CURRENCY_UNIT = \"BTC\";\n+\n CFeeRate::CFeeRate(const CAmount& nFeePaid, size_t nSize)\n {\n     if (nSize > 0)\n@@ -27,5 +29,5 @@ CAmount CFeeRate::GetFee(size_t nSize) const\n \n std::string CFeeRate::ToString() const\n {\n-    return strprintf(\"%d.%08d BTC/kB\", nSatoshisPerK / COIN, nSatoshisPerK % COIN);\n+    return strprintf(\"%d.%08d %s/kB\", nSatoshisPerK / COIN, nSatoshisPerK % COIN, CURRENCY_UNIT);\n }"
      },
      {
        "sha": "90e6b5aa8ed577868a15da0ad50fbbcdcfc42f79",
        "filename": "src/amount.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ca7857df74c52eb2c46be36c88a12879be6cf8c/src/amount.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ca7857df74c52eb2c46be36c88a12879be6cf8c/src/amount.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/amount.h?ref=9ca7857df74c52eb2c46be36c88a12879be6cf8c",
        "patch": "@@ -16,6 +16,8 @@ typedef int64_t CAmount;\n static const CAmount COIN = 100000000;\n static const CAmount CENT = 1000000;\n \n+extern const std::string CURRENCY_UNIT;\n+\n /** No amount larger than this (in satoshi) is valid.\n  *\n  * Note that this constant is *not* the total money supply, which in Bitcoin"
      },
      {
        "sha": "08e1a3d1a68c0e95e9efae1c279c2d027b2d28f2",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ca7857df74c52eb2c46be36c88a12879be6cf8c/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ca7857df74c52eb2c46be36c88a12879be6cf8c/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=9ca7857df74c52eb2c46be36c88a12879be6cf8c",
        "patch": "@@ -342,16 +342,17 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-disablewallet\", _(\"Do not load the wallet and disable wallet RPC calls\"));\n     strUsage += HelpMessageOpt(\"-keypool=<n>\", strprintf(_(\"Set key pool size to <n> (default: %u)\"), 100));\n     if (showDebug)\n-        strUsage += HelpMessageOpt(\"-mintxfee=<amt>\", strprintf(\"Fees (in BTC/Kb) smaller than this are considered zero fee for transaction creation (default: %s)\",\n-            FormatMoney(CWallet::minTxFee.GetFeePerK())));\n-    strUsage += HelpMessageOpt(\"-paytxfee=<amt>\", strprintf(_(\"Fee (in BTC/kB) to add to transactions you send (default: %s)\"), FormatMoney(payTxFee.GetFeePerK())));\n+        strUsage += HelpMessageOpt(\"-mintxfee=<amt>\", strprintf(\"Fees (in %s/kB) smaller than this are considered zero fee for transaction creation (default: %s)\",\n+            CURRENCY_UNIT, FormatMoney(CWallet::minTxFee.GetFeePerK())));\n+    strUsage += HelpMessageOpt(\"-paytxfee=<amt>\", strprintf(_(\"Fee (in %s/kB) to add to transactions you send (default: %s)\"),\n+        CURRENCY_UNIT, FormatMoney(payTxFee.GetFeePerK())));\n     strUsage += HelpMessageOpt(\"-rescan\", _(\"Rescan the block chain for missing wallet transactions\") + \" \" + _(\"on startup\"));\n     strUsage += HelpMessageOpt(\"-salvagewallet\", _(\"Attempt to recover private keys from a corrupt wallet.dat\") + \" \" + _(\"on startup\"));\n     strUsage += HelpMessageOpt(\"-sendfreetransactions\", strprintf(_(\"Send transactions as zero-fee transactions if possible (default: %u)\"), 0));\n     strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), 1));\n     strUsage += HelpMessageOpt(\"-txconfirmtarget=<n>\", strprintf(_(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\"), DEFAULT_TX_CONFIRM_TARGET));\n-    strUsage += HelpMessageOpt(\"-maxtxfee=<amt>\", strprintf(_(\"Maximum total fees to use in a single wallet transaction; setting this too low may abort large transactions (default: %s)\"),\n-        FormatMoney(maxTxFee)));\n+    strUsage += HelpMessageOpt(\"-maxtxfee=<amt>\", strprintf(_(\"Maximum total fees (in %s) to use in a single wallet transaction; setting this too low may abort large transactions (default: %s)\"),\n+        CURRENCY_UNIT, FormatMoney(maxTxFee)));\n     strUsage += HelpMessageOpt(\"-upgradewallet\", _(\"Upgrade wallet to latest format\") + \" \" + _(\"on startup\"));\n     strUsage += HelpMessageOpt(\"-wallet=<file>\", _(\"Specify wallet file (within data directory)\") + \" \" + strprintf(_(\"(default: %s)\"), \"wallet.dat\"));\n     strUsage += HelpMessageOpt(\"-walletbroadcast\", _(\"Make the wallet broadcast transactions\") + \" \" + strprintf(_(\"(default: %u)\"), true));\n@@ -388,7 +389,8 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-relaypriority\", strprintf(\"Require high priority for relaying free or low-fee transactions (default: %u)\", 1));\n         strUsage += HelpMessageOpt(\"-maxsigcachesize=<n>\", strprintf(\"Limit size of signature cache to <n> entries (default: %u)\", 50000));\n     }\n-    strUsage += HelpMessageOpt(\"-minrelaytxfee=<amt>\", strprintf(_(\"Fees (in BTC/Kb) smaller than this are considered zero fee for relaying (default: %s)\"), FormatMoney(::minRelayTxFee.GetFeePerK())));\n+    strUsage += HelpMessageOpt(\"-minrelaytxfee=<amt>\", strprintf(_(\"Fees (in %s/kB) smaller than this are considered zero fee for relaying (default: %s)\"),\n+        CURRENCY_UNIT, FormatMoney(::minRelayTxFee.GetFeePerK())));\n     strUsage += HelpMessageOpt(\"-printtoconsole\", _(\"Send trace/debug info to console instead of debug.log file\"));\n     if (showDebug)\n     {"
      },
      {
        "sha": "80d49490d2daf4fe104054dba117e15ff5f6d248",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ca7857df74c52eb2c46be36c88a12879be6cf8c/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ca7857df74c52eb2c46be36c88a12879be6cf8c/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=9ca7857df74c52eb2c46be36c88a12879be6cf8c",
        "patch": "@@ -3,6 +3,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"amount.h\"\n #include \"chain.h\"\n #include \"chainparams.h\"\n #include \"checkpoints.h\"\n@@ -192,7 +193,7 @@ UniValue getrawmempool(const UniValue& params, bool fHelp)\n             \"{                           (json object)\\n\"\n             \"  \\\"transactionid\\\" : {       (json object)\\n\"\n             \"    \\\"size\\\" : n,             (numeric) transaction size in bytes\\n\"\n-            \"    \\\"fee\\\" : n,              (numeric) transaction fee in bitcoins\\n\"\n+            \"    \\\"fee\\\" : n,              (numeric) transaction fee in \" + CURRENCY_UNIT + \"\\n\"\n             \"    \\\"time\\\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT\\n\"\n             \"    \\\"height\\\" : n,           (numeric) block height when transaction entered pool\\n\"\n             \"    \\\"startingpriority\\\" : n, (numeric) priority when transaction entered pool\\n\"\n@@ -461,7 +462,7 @@ UniValue gettxout(const UniValue& params, bool fHelp)\n             \"{\\n\"\n             \"  \\\"bestblock\\\" : \\\"hash\\\",    (string) the block hash\\n\"\n             \"  \\\"confirmations\\\" : n,       (numeric) The number of confirmations\\n\"\n-            \"  \\\"value\\\" : x.xxx,           (numeric) The transaction value in btc\\n\"\n+            \"  \\\"value\\\" : x.xxx,           (numeric) The transaction value in \" + CURRENCY_UNIT + \"\\n\"\n             \"  \\\"scriptPubKey\\\" : {         (json object)\\n\"\n             \"     \\\"asm\\\" : \\\"code\\\",       (string) \\n\"\n             \"     \\\"hex\\\" : \\\"hex\\\",        (string) \\n\""
      },
      {
        "sha": "6d10d1ce158f572b29cab801535de99b4fc91bad",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ca7857df74c52eb2c46be36c88a12879be6cf8c/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ca7857df74c52eb2c46be36c88a12879be6cf8c/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=9ca7857df74c52eb2c46be36c88a12879be6cf8c",
        "patch": "@@ -60,8 +60,8 @@ UniValue getinfo(const UniValue& params, bool fHelp)\n             \"  \\\"keypoololdest\\\": xxxxxx,    (numeric) the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool\\n\"\n             \"  \\\"keypoolsize\\\": xxxx,        (numeric) how many new keys are pre-generated\\n\"\n             \"  \\\"unlocked_until\\\": ttt,      (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n-            \"  \\\"paytxfee\\\": x.xxxx,         (numeric) the transaction fee set in btc/kb\\n\"\n-            \"  \\\"relayfee\\\": x.xxxx,         (numeric) minimum relay fee for non-free transactions in btc/kb\\n\"\n+            \"  \\\"paytxfee\\\": x.xxxx,         (numeric) the transaction fee set in \" + CURRENCY_UNIT + \"/kB\\n\"\n+            \"  \\\"relayfee\\\": x.xxxx,         (numeric) minimum relay fee for non-free transactions in \" + CURRENCY_UNIT + \"/kB\\n\"\n             \"  \\\"errors\\\": \\\"...\\\"           (string) any error messages\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\""
      },
      {
        "sha": "d51aa503059945879aa3d58beaa9945475dc1387",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ca7857df74c52eb2c46be36c88a12879be6cf8c/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ca7857df74c52eb2c46be36c88a12879be6cf8c/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=9ca7857df74c52eb2c46be36c88a12879be6cf8c",
        "patch": "@@ -423,7 +423,7 @@ UniValue getnetworkinfo(const UniValue& params, bool fHelp)\n             \"  }\\n\"\n             \"  ,...\\n\"\n             \"  ],\\n\"\n-            \"  \\\"relayfee\\\": x.xxxxxxxx,                (numeric) minimum relay fee for non-free transactions in btc/kb\\n\"\n+            \"  \\\"relayfee\\\": x.xxxxxxxx,                (numeric) minimum relay fee for non-free transactions in \" + CURRENCY_UNIT + \"/kB\\n\"\n             \"  \\\"localaddresses\\\": [                    (array) list of local addresses\\n\"\n             \"  {\\n\"\n             \"    \\\"address\\\": \\\"xxxx\\\",                 (string) network address\\n\""
      },
      {
        "sha": "a3246b41fb656868f30094567f3a9b35567fccd8",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ca7857df74c52eb2c46be36c88a12879be6cf8c/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ca7857df74c52eb2c46be36c88a12879be6cf8c/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=9ca7857df74c52eb2c46be36c88a12879be6cf8c",
        "patch": "@@ -149,7 +149,7 @@ UniValue getrawtransaction(const UniValue& params, bool fHelp)\n             \"  ],\\n\"\n             \"  \\\"vout\\\" : [              (array of json objects)\\n\"\n             \"     {\\n\"\n-            \"       \\\"value\\\" : x.xxx,            (numeric) The value in btc\\n\"\n+            \"       \\\"value\\\" : x.xxx,            (numeric) The value in \" + CURRENCY_UNIT + \"\\n\"\n             \"       \\\"n\\\" : n,                    (numeric) index\\n\"\n             \"       \\\"scriptPubKey\\\" : {          (json object)\\n\"\n             \"         \\\"asm\\\" : \\\"asm\\\",          (string) the asm\\n\"\n@@ -335,7 +335,7 @@ UniValue createrawtransaction(const UniValue& params, bool fHelp)\n             \"     ]\\n\"\n             \"2. \\\"addresses\\\"           (string, required) a json object with addresses as keys and amounts as values\\n\"\n             \"    {\\n\"\n-            \"      \\\"address\\\": x.xxx   (numeric, required) The key is the bitcoin address, the value is the btc amount\\n\"\n+            \"      \\\"address\\\": x.xxx   (numeric, required) The key is the bitcoin address, the value is the \" + CURRENCY_UNIT + \" amount\\n\"\n             \"      ,...\\n\"\n             \"    }\\n\"\n \n@@ -422,7 +422,7 @@ UniValue decoderawtransaction(const UniValue& params, bool fHelp)\n             \"  ],\\n\"\n             \"  \\\"vout\\\" : [             (array of json objects)\\n\"\n             \"     {\\n\"\n-            \"       \\\"value\\\" : x.xxx,            (numeric) The value in btc\\n\"\n+            \"       \\\"value\\\" : x.xxx,            (numeric) The value in \" + CURRENCY_UNIT + \"\\n\"\n             \"       \\\"n\\\" : n,                    (numeric) index\\n\"\n             \"       \\\"scriptPubKey\\\" : {          (json object)\\n\"\n             \"         \\\"asm\\\" : \\\"asm\\\",          (string) the asm\\n\""
      },
      {
        "sha": "198b5baf6051c246d201f0527621473a868b98f2",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 25,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ca7857df74c52eb2c46be36c88a12879be6cf8c/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ca7857df74c52eb2c46be36c88a12879be6cf8c/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=9ca7857df74c52eb2c46be36c88a12879be6cf8c",
        "patch": "@@ -390,7 +390,7 @@ UniValue sendtoaddress(const UniValue& params, bool fHelp)\n             + HelpRequiringPassphrase() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address to send to.\\n\"\n-            \"2. \\\"amount\\\"      (numeric, required) The amount in btc to send. eg 0.1\\n\"\n+            \"2. \\\"amount\\\"      (numeric, required) The amount in \" + CURRENCY_UNIT + \" to send. eg 0.1\\n\"\n             \"3. \\\"comment\\\"     (string, optional) A comment used to store what the transaction is for. \\n\"\n             \"                             This is not part of the transaction, just kept in your wallet.\\n\"\n             \"4. \\\"comment-to\\\"  (string, optional) A comment to store the name of the person or organization \\n\"\n@@ -452,7 +452,7 @@ UniValue listaddressgroupings(const UniValue& params, bool fHelp)\n             \"  [\\n\"\n             \"    [\\n\"\n             \"      \\\"bitcoinaddress\\\",     (string) The bitcoin address\\n\"\n-            \"      amount,                 (numeric) The amount in btc\\n\"\n+            \"      amount,                 (numeric) The amount in \" + CURRENCY_UNIT + \"\\n\"\n             \"      \\\"account\\\"             (string, optional) The account (DEPRECATED)\\n\"\n             \"    ]\\n\"\n             \"    ,...\\n\"\n@@ -556,7 +556,7 @@ UniValue getreceivedbyaddress(const UniValue& params, bool fHelp)\n             \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address for transactions.\\n\"\n             \"2. minconf             (numeric, optional, default=1) Only include transactions confirmed at least this many times.\\n\"\n             \"\\nResult:\\n\"\n-            \"amount   (numeric) The total amount in btc received at this address.\\n\"\n+            \"amount   (numeric) The total amount in \" + CURRENCY_UNIT + \" received at this address.\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nThe amount from transactions with at least 1 confirmation\\n\"\n             + HelpExampleCli(\"getreceivedbyaddress\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\") +\n@@ -614,7 +614,7 @@ UniValue getreceivedbyaccount(const UniValue& params, bool fHelp)\n             \"1. \\\"account\\\"      (string, required) The selected account, may be the default account using \\\"\\\".\\n\"\n             \"2. minconf          (numeric, optional, default=1) Only include transactions confirmed at least this many times.\\n\"\n             \"\\nResult:\\n\"\n-            \"amount              (numeric) The total amount in btc received for this account.\\n\"\n+            \"amount              (numeric) The total amount in \" + CURRENCY_UNIT + \" received for this account.\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nAmount received by the default account with at least 1 confirmation\\n\"\n             + HelpExampleCli(\"getreceivedbyaccount\", \"\\\"\\\"\") +\n@@ -707,7 +707,7 @@ UniValue getbalance(const UniValue& params, bool fHelp)\n             \"2. minconf          (numeric, optional, default=1) Only include transactions confirmed at least this many times.\\n\"\n             \"3. includeWatchonly (bool, optional, default=false) Also include balance in watchonly addresses (see 'importaddress')\\n\"\n             \"\\nResult:\\n\"\n-            \"amount              (numeric) The total amount in btc received for this account.\\n\"\n+            \"amount              (numeric) The total amount in \" + CURRENCY_UNIT + \" received for this account.\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nThe total amount in the wallet\\n\"\n             + HelpExampleCli(\"getbalance\", \"\") +\n@@ -793,14 +793,15 @@ UniValue movecmd(const UniValue& params, bool fHelp)\n             \"\\nArguments:\\n\"\n             \"1. \\\"fromaccount\\\"   (string, required) The name of the account to move funds from. May be the default account using \\\"\\\".\\n\"\n             \"2. \\\"toaccount\\\"     (string, required) The name of the account to move funds to. May be the default account using \\\"\\\".\\n\"\n-            \"3. minconf           (numeric, optional, default=1) Only use funds with at least this many confirmations.\\n\"\n-            \"4. \\\"comment\\\"       (string, optional) An optional comment, stored in the wallet only.\\n\"\n+            \"3. amount            (numeric) Quantity of \" + CURRENCY_UNIT + \" to move between accounts.\\n\"\n+            \"4. minconf           (numeric, optional, default=1) Only use funds with at least this many confirmations.\\n\"\n+            \"5. \\\"comment\\\"       (string, optional) An optional comment, stored in the wallet only.\\n\"\n             \"\\nResult:\\n\"\n             \"true|false           (boolean) true if successfull.\\n\"\n             \"\\nExamples:\\n\"\n-            \"\\nMove 0.01 btc from the default account to the account named tabby\\n\"\n+            \"\\nMove 0.01 \" + CURRENCY_UNIT + \" from the default account to the account named tabby\\n\"\n             + HelpExampleCli(\"move\", \"\\\"\\\" \\\"tabby\\\" 0.01\") +\n-            \"\\nMove 0.01 btc timotei to akiko with a comment and funds have 6 confirmations\\n\"\n+            \"\\nMove 0.01 \" + CURRENCY_UNIT + \" timotei to akiko with a comment and funds have 6 confirmations\\n\"\n             + HelpExampleCli(\"move\", \"\\\"timotei\\\" \\\"akiko\\\" 0.01 6 \\\"happy birthday!\\\"\") +\n             \"\\nAs a json rpc call\\n\"\n             + HelpExampleRpc(\"move\", \"\\\"timotei\\\", \\\"akiko\\\", 0.01, 6, \\\"happy birthday!\\\"\")\n@@ -867,7 +868,7 @@ UniValue sendfrom(const UniValue& params, bool fHelp)\n             \"\\nArguments:\\n\"\n             \"1. \\\"fromaccount\\\"       (string, required) The name of the account to send funds from. May be the default account using \\\"\\\".\\n\"\n             \"2. \\\"tobitcoinaddress\\\"  (string, required) The bitcoin address to send funds to.\\n\"\n-            \"3. amount                (numeric, required) The amount in btc. (transaction fee is added on top).\\n\"\n+            \"3. amount                (numeric, required) The amount in \" + CURRENCY_UNIT + \" (transaction fee is added on top).\\n\"\n             \"4. minconf               (numeric, optional, default=1) Only use funds with at least this many confirmations.\\n\"\n             \"5. \\\"comment\\\"           (string, optional) A comment used to store what the transaction is for. \\n\"\n             \"                                     This is not part of the transaction, just kept in your wallet.\\n\"\n@@ -877,7 +878,7 @@ UniValue sendfrom(const UniValue& params, bool fHelp)\n             \"\\nResult:\\n\"\n             \"\\\"transactionid\\\"        (string) The transaction id.\\n\"\n             \"\\nExamples:\\n\"\n-            \"\\nSend 0.01 btc from the default account to the address, must have at least 1 confirmation\\n\"\n+            \"\\nSend 0.01 \" + CURRENCY_UNIT + \" from the default account to the address, must have at least 1 confirmation\\n\"\n             + HelpExampleCli(\"sendfrom\", \"\\\"\\\" \\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\" 0.01\") +\n             \"\\nSend 0.01 from the tabby account to the given address, funds must have at least 6 confirmations\\n\"\n             + HelpExampleCli(\"sendfrom\", \"\\\"tabby\\\" \\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\" 0.01 6 \\\"donation\\\" \\\"seans outpost\\\"\") +\n@@ -932,7 +933,7 @@ UniValue sendmany(const UniValue& params, bool fHelp)\n             \"1. \\\"fromaccount\\\"         (string, required) DEPRECATED. The account to send the funds from. Should be \\\"\\\" for the default account\\n\"\n             \"2. \\\"amounts\\\"             (string, required) A json object with addresses and amounts\\n\"\n             \"    {\\n\"\n-            \"      \\\"address\\\":amount   (numeric) The bitcoin address is the key, the numeric amount in btc is the value\\n\"\n+            \"      \\\"address\\\":amount   (numeric) The bitcoin address is the key, the numeric amount in \" + CURRENCY_UNIT + \" is the value\\n\"\n             \"      ,...\\n\"\n             \"    }\\n\"\n             \"3. minconf                 (numeric, optional, default=1) Only use the balance confirmed at least this many times.\\n\"\n@@ -1233,7 +1234,7 @@ UniValue listreceivedbyaddress(const UniValue& params, bool fHelp)\n             \"    \\\"involvesWatchonly\\\" : true,        (bool) Only returned if imported addresses were involved in transaction\\n\"\n             \"    \\\"address\\\" : \\\"receivingaddress\\\",  (string) The receiving address\\n\"\n             \"    \\\"account\\\" : \\\"accountname\\\",       (string) DEPRECATED. The account of the receiving address. The default account is \\\"\\\".\\n\"\n-            \"    \\\"amount\\\" : x.xxx,                  (numeric) The total amount in btc received by the address\\n\"\n+            \"    \\\"amount\\\" : x.xxx,                  (numeric) The total amount in \" + CURRENCY_UNIT + \" received by the address\\n\"\n             \"    \\\"confirmations\\\" : n                (numeric) The number of confirmations of the most recent transaction included\\n\"\n             \"  }\\n\"\n             \"  ,...\\n\"\n@@ -1405,11 +1406,11 @@ UniValue listtransactions(const UniValue& params, bool fHelp)\n             \"                                                transaction between accounts, and not associated with an address,\\n\"\n             \"                                                transaction id or block. 'send' and 'receive' transactions are \\n\"\n             \"                                                associated with an address, transaction id and block details\\n\"\n-            \"    \\\"amount\\\": x.xxx,          (numeric) The amount in btc. This is negative for the 'send' category, and for the\\n\"\n+            \"    \\\"amount\\\": x.xxx,          (numeric) The amount in \" + CURRENCY_UNIT + \". This is negative for the 'send' category, and for the\\n\"\n             \"                                         'move' category for moves outbound. It is positive for the 'receive' category,\\n\"\n             \"                                         and for the 'move' category for inbound funds.\\n\"\n             \"    \\\"vout\\\" : n,               (numeric) the vout value\\n\"\n-            \"    \\\"fee\\\": x.xxx,             (numeric) The amount of the fee in btc. This is negative and only available for the \\n\"\n+            \"    \\\"fee\\\": x.xxx,             (numeric) The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the \\n\"\n             \"                                         'send' category of transactions.\\n\"\n             \"    \\\"confirmations\\\": n,       (numeric) The number of confirmations for the transaction. Available for 'send' and \\n\"\n             \"                                         'receive' category of transactions.\\n\"\n@@ -1600,10 +1601,10 @@ UniValue listsinceblock(const UniValue& params, bool fHelp)\n             \"    \\\"account\\\":\\\"accountname\\\",       (string) DEPRECATED. The account name associated with the transaction. Will be \\\"\\\" for the default account.\\n\"\n             \"    \\\"address\\\":\\\"bitcoinaddress\\\",    (string) The bitcoin address of the transaction. Not present for move transactions (category = move).\\n\"\n             \"    \\\"category\\\":\\\"send|receive\\\",     (string) The transaction category. 'send' has negative amounts, 'receive' has positive amounts.\\n\"\n-            \"    \\\"amount\\\": x.xxx,          (numeric) The amount in btc. This is negative for the 'send' category, and for the 'move' category for moves \\n\"\n+            \"    \\\"amount\\\": x.xxx,          (numeric) The amount in \" + CURRENCY_UNIT + \". This is negative for the 'send' category, and for the 'move' category for moves \\n\"\n             \"                                          outbound. It is positive for the 'receive' category, and for the 'move' category for inbound funds.\\n\"\n             \"    \\\"vout\\\" : n,               (numeric) the vout value\\n\"\n-            \"    \\\"fee\\\": x.xxx,             (numeric) The amount of the fee in btc. This is negative and only available for the 'send' category of transactions.\\n\"\n+            \"    \\\"fee\\\": x.xxx,             (numeric) The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the 'send' category of transactions.\\n\"\n             \"    \\\"confirmations\\\": n,       (numeric) The number of confirmations for the transaction. Available for 'send' and 'receive' category of transactions.\\n\"\n             \"    \\\"blockhash\\\": \\\"hashvalue\\\",     (string) The block hash containing the transaction. Available for 'send' and 'receive' category of transactions.\\n\"\n             \"    \\\"blockindex\\\": n,          (numeric) The block index containing the transaction. Available for 'send' and 'receive' category of transactions.\\n\"\n@@ -1686,7 +1687,7 @@ UniValue gettransaction(const UniValue& params, bool fHelp)\n             \"2. \\\"includeWatchonly\\\"    (bool, optional, default=false) Whether to include watchonly addresses in balance calculation and details[]\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"amount\\\" : x.xxx,        (numeric) The transaction amount in btc\\n\"\n+            \"  \\\"amount\\\" : x.xxx,        (numeric) The transaction amount in \" + CURRENCY_UNIT + \"\\n\"\n             \"  \\\"confirmations\\\" : n,     (numeric) The number of confirmations\\n\"\n             \"  \\\"blockhash\\\" : \\\"hash\\\",  (string) The block hash\\n\"\n             \"  \\\"blockindex\\\" : xx,       (numeric) The block index\\n\"\n@@ -1699,7 +1700,7 @@ UniValue gettransaction(const UniValue& params, bool fHelp)\n             \"      \\\"account\\\" : \\\"accountname\\\",  (string) DEPRECATED. The account name involved in the transaction, can be \\\"\\\" for the default account.\\n\"\n             \"      \\\"address\\\" : \\\"bitcoinaddress\\\",   (string) The bitcoin address involved in the transaction\\n\"\n             \"      \\\"category\\\" : \\\"send|receive\\\",    (string) The category, either 'send' or 'receive'\\n\"\n-            \"      \\\"amount\\\" : x.xxx                  (numeric) The amount in btc\\n\"\n+            \"      \\\"amount\\\" : x.xxx                  (numeric) The amount in \" + CURRENCY_UNIT + \"\\n\"\n             \"      \\\"vout\\\" : n,                       (numeric) the vout value\\n\"\n             \"    }\\n\"\n             \"    ,...\\n\"\n@@ -2165,7 +2166,7 @@ UniValue settxfee(const UniValue& params, bool fHelp)\n             \"settxfee amount\\n\"\n             \"\\nSet the transaction fee per kB.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. amount         (numeric, required) The transaction fee in BTC/kB rounded to the nearest 0.00000001\\n\"\n+            \"1. amount         (numeric, required) The transaction fee in \" + CURRENCY_UNIT + \"/kB rounded to the nearest 0.00000001\\n\"\n             \"\\nResult\\n\"\n             \"true|false        (boolean) Returns true if successful\\n\"\n             \"\\nExamples:\\n\"\n@@ -2194,14 +2195,14 @@ UniValue getwalletinfo(const UniValue& params, bool fHelp)\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"walletversion\\\": xxxxx,     (numeric) the wallet version\\n\"\n-            \"  \\\"balance\\\": xxxxxxx,         (numeric) the total confirmed bitcoin balance of the wallet\\n\"\n-            \"  \\\"unconfirmed_balance\\\": xxx, (numeric) the total unconfirmed bitcoin balance of the wallet\\n\"\n-            \"  \\\"immature_balance\\\": xxxxxx, (numeric) the total immature balance of the wallet\\n\"\n+            \"  \\\"balance\\\": xxxxxxx,         (numeric) the total confirmed balance of the wallet in \" + CURRENCY_UNIT + \"\\n\"\n+            \"  \\\"unconfirmed_balance\\\": xxx, (numeric) the total unconfirmed balance of the wallet in \" + CURRENCY_UNIT + \"\\n\"\n+            \"  \\\"immature_balance\\\": xxxxxx, (numeric) the total immature balance of the wallet in \" + CURRENCY_UNIT + \"\\n\"\n             \"  \\\"txcount\\\": xxxxxxx,         (numeric) the total number of transactions in the wallet\\n\"\n             \"  \\\"keypoololdest\\\": xxxxxx,    (numeric) the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool\\n\"\n             \"  \\\"keypoolsize\\\": xxxx,        (numeric) how many new keys are pre-generated\\n\"\n             \"  \\\"unlocked_until\\\": ttt,      (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n-            \"  \\\"paytxfee\\\": x.xxxx,         (numeric) the transaction fee configuration, set in btc/kb\\n\"\n+            \"  \\\"paytxfee\\\": x.xxxx,         (numeric) the transaction fee configuration, set in \" + CURRENCY_UNIT + \"/kB\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getwalletinfo\", \"\")\n@@ -2278,7 +2279,7 @@ UniValue listunspent(const UniValue& params, bool fHelp)\n             \"    \\\"address\\\" : \\\"address\\\",  (string) the bitcoin address\\n\"\n             \"    \\\"account\\\" : \\\"account\\\",  (string) DEPRECATED. The associated account, or \\\"\\\" for the default account\\n\"\n             \"    \\\"scriptPubKey\\\" : \\\"key\\\", (string) the script key\\n\"\n-            \"    \\\"amount\\\" : x.xxx,         (numeric) the transaction amount in btc\\n\"\n+            \"    \\\"amount\\\" : x.xxx,         (numeric) the transaction amount in \" + CURRENCY_UNIT + \"\\n\"\n             \"    \\\"confirmations\\\" : n       (numeric) The number of confirmations\\n\"\n             \"  }\\n\"\n             \"  ,...\\n\""
      }
    ]
  },
  {
    "sha": "b6fee6b7c71cb339b3249860464d0a066b9a3147",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNmZlZTZiN2M3MWNiMzM5YjMyNDk4NjA0NjRkMGEwNjZiOWEzMTQ3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-03T23:01:18Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-03T23:24:19Z"
      },
      "message": "Merge pull request #6504\n\n9ca7857 Rationalize currency unit to \"BTC\" (Ross Nicoll)",
      "tree": {
        "sha": "c1c4717bb8fe49e09512452211541eb19bc560e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c1c4717bb8fe49e09512452211541eb19bc560e1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b6fee6b7c71cb339b3249860464d0a066b9a3147",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVv/gjAAoJEHSBCwEjRsmm5Y8H/1kZeXCzBtCHGcqEh+GcV4Gt\nJ9HOntqrgy5YRZacAb+2Le95eTfNjwxV19DslqpTaXda0yHLPSju9XWtO1MJ7xkv\niEvDKxczMEFoJBqFP0Xj45GRGofrdH8rhmhcb0WZ9VeKW40LgxwrNyRFXWf6YDkP\nqJfXArk7PIjasvB6Lj0pym/njsWvLtGYfQsNQHRDBXxHiU/jLuFuV9v3XDXLBDf7\naidoSil0TjhXZlgI+SXz1EYJaI+N2kpYLKJe+2VvVYmnnY9Zata4X6rmnfVQ4oyV\n9SWb9whoBVoEcyFKSmWyMN0e5XSaVSdgOoixD2hRvSYmszrZ38F2Ya31YZFciMs=\n=apDi\n-----END PGP SIGNATURE-----",
        "payload": "tree c1c4717bb8fe49e09512452211541eb19bc560e1\nparent 219b916545f3be194eb53801bfb8d0694978fb00\nparent 9ca7857df74c52eb2c46be36c88a12879be6cf8c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1438642878 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1438644259 +0200\n\nMerge pull request #6504\n\n9ca7857 Rationalize currency unit to \"BTC\" (Ross Nicoll)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6fee6b7c71cb339b3249860464d0a066b9a3147",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b6fee6b7c71cb339b3249860464d0a066b9a3147",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6fee6b7c71cb339b3249860464d0a066b9a3147/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "219b916545f3be194eb53801bfb8d0694978fb00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/219b916545f3be194eb53801bfb8d0694978fb00",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/219b916545f3be194eb53801bfb8d0694978fb00"
      },
      {
        "sha": "9ca7857df74c52eb2c46be36c88a12879be6cf8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ca7857df74c52eb2c46be36c88a12879be6cf8c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9ca7857df74c52eb2c46be36c88a12879be6cf8c"
      }
    ],
    "stats": {
      "total": 88,
      "additions": 48,
      "deletions": 40
    },
    "files": [
      {
        "sha": "b46918198448b1487e500a49dfceea3bec4b434e",
        "filename": "src/amount.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6fee6b7c71cb339b3249860464d0a066b9a3147/src/amount.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6fee6b7c71cb339b3249860464d0a066b9a3147/src/amount.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/amount.cpp?ref=b6fee6b7c71cb339b3249860464d0a066b9a3147",
        "patch": "@@ -7,6 +7,8 @@\n \n #include \"tinyformat.h\"\n \n+const std::string CURRENCY_UNIT = \"BTC\";\n+\n CFeeRate::CFeeRate(const CAmount& nFeePaid, size_t nSize)\n {\n     if (nSize > 0)\n@@ -27,5 +29,5 @@ CAmount CFeeRate::GetFee(size_t nSize) const\n \n std::string CFeeRate::ToString() const\n {\n-    return strprintf(\"%d.%08d BTC/kB\", nSatoshisPerK / COIN, nSatoshisPerK % COIN);\n+    return strprintf(\"%d.%08d %s/kB\", nSatoshisPerK / COIN, nSatoshisPerK % COIN, CURRENCY_UNIT);\n }"
      },
      {
        "sha": "90e6b5aa8ed577868a15da0ad50fbbcdcfc42f79",
        "filename": "src/amount.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6fee6b7c71cb339b3249860464d0a066b9a3147/src/amount.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6fee6b7c71cb339b3249860464d0a066b9a3147/src/amount.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/amount.h?ref=b6fee6b7c71cb339b3249860464d0a066b9a3147",
        "patch": "@@ -16,6 +16,8 @@ typedef int64_t CAmount;\n static const CAmount COIN = 100000000;\n static const CAmount CENT = 1000000;\n \n+extern const std::string CURRENCY_UNIT;\n+\n /** No amount larger than this (in satoshi) is valid.\n  *\n  * Note that this constant is *not* the total money supply, which in Bitcoin"
      },
      {
        "sha": "9d43a58fe00f8e3f8cd2aed8b3601c5fc45cb457",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6fee6b7c71cb339b3249860464d0a066b9a3147/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6fee6b7c71cb339b3249860464d0a066b9a3147/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=b6fee6b7c71cb339b3249860464d0a066b9a3147",
        "patch": "@@ -342,16 +342,17 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-disablewallet\", _(\"Do not load the wallet and disable wallet RPC calls\"));\n     strUsage += HelpMessageOpt(\"-keypool=<n>\", strprintf(_(\"Set key pool size to <n> (default: %u)\"), 100));\n     if (showDebug)\n-        strUsage += HelpMessageOpt(\"-mintxfee=<amt>\", strprintf(\"Fees (in BTC/Kb) smaller than this are considered zero fee for transaction creation (default: %s)\",\n-            FormatMoney(CWallet::minTxFee.GetFeePerK())));\n-    strUsage += HelpMessageOpt(\"-paytxfee=<amt>\", strprintf(_(\"Fee (in BTC/kB) to add to transactions you send (default: %s)\"), FormatMoney(payTxFee.GetFeePerK())));\n+        strUsage += HelpMessageOpt(\"-mintxfee=<amt>\", strprintf(\"Fees (in %s/kB) smaller than this are considered zero fee for transaction creation (default: %s)\",\n+            CURRENCY_UNIT, FormatMoney(CWallet::minTxFee.GetFeePerK())));\n+    strUsage += HelpMessageOpt(\"-paytxfee=<amt>\", strprintf(_(\"Fee (in %s/kB) to add to transactions you send (default: %s)\"),\n+        CURRENCY_UNIT, FormatMoney(payTxFee.GetFeePerK())));\n     strUsage += HelpMessageOpt(\"-rescan\", _(\"Rescan the block chain for missing wallet transactions\") + \" \" + _(\"on startup\"));\n     strUsage += HelpMessageOpt(\"-salvagewallet\", _(\"Attempt to recover private keys from a corrupt wallet.dat\") + \" \" + _(\"on startup\"));\n     strUsage += HelpMessageOpt(\"-sendfreetransactions\", strprintf(_(\"Send transactions as zero-fee transactions if possible (default: %u)\"), 0));\n     strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), 1));\n     strUsage += HelpMessageOpt(\"-txconfirmtarget=<n>\", strprintf(_(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\"), DEFAULT_TX_CONFIRM_TARGET));\n-    strUsage += HelpMessageOpt(\"-maxtxfee=<amt>\", strprintf(_(\"Maximum total fees to use in a single wallet transaction; setting this too low may abort large transactions (default: %s)\"),\n-        FormatMoney(maxTxFee)));\n+    strUsage += HelpMessageOpt(\"-maxtxfee=<amt>\", strprintf(_(\"Maximum total fees (in %s) to use in a single wallet transaction; setting this too low may abort large transactions (default: %s)\"),\n+        CURRENCY_UNIT, FormatMoney(maxTxFee)));\n     strUsage += HelpMessageOpt(\"-upgradewallet\", _(\"Upgrade wallet to latest format\") + \" \" + _(\"on startup\"));\n     strUsage += HelpMessageOpt(\"-wallet=<file>\", _(\"Specify wallet file (within data directory)\") + \" \" + strprintf(_(\"(default: %s)\"), \"wallet.dat\"));\n     strUsage += HelpMessageOpt(\"-walletbroadcast\", _(\"Make the wallet broadcast transactions\") + \" \" + strprintf(_(\"(default: %u)\"), true));\n@@ -388,7 +389,8 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-relaypriority\", strprintf(\"Require high priority for relaying free or low-fee transactions (default: %u)\", 1));\n         strUsage += HelpMessageOpt(\"-maxsigcachesize=<n>\", strprintf(\"Limit size of signature cache to <n> entries (default: %u)\", 50000));\n     }\n-    strUsage += HelpMessageOpt(\"-minrelaytxfee=<amt>\", strprintf(_(\"Fees (in BTC/Kb) smaller than this are considered zero fee for relaying (default: %s)\"), FormatMoney(::minRelayTxFee.GetFeePerK())));\n+    strUsage += HelpMessageOpt(\"-minrelaytxfee=<amt>\", strprintf(_(\"Fees (in %s/kB) smaller than this are considered zero fee for relaying (default: %s)\"),\n+        CURRENCY_UNIT, FormatMoney(::minRelayTxFee.GetFeePerK())));\n     strUsage += HelpMessageOpt(\"-printtoconsole\", _(\"Send trace/debug info to console instead of debug.log file\"));\n     if (showDebug)\n     {"
      },
      {
        "sha": "80d49490d2daf4fe104054dba117e15ff5f6d248",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6fee6b7c71cb339b3249860464d0a066b9a3147/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6fee6b7c71cb339b3249860464d0a066b9a3147/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=b6fee6b7c71cb339b3249860464d0a066b9a3147",
        "patch": "@@ -3,6 +3,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"amount.h\"\n #include \"chain.h\"\n #include \"chainparams.h\"\n #include \"checkpoints.h\"\n@@ -192,7 +193,7 @@ UniValue getrawmempool(const UniValue& params, bool fHelp)\n             \"{                           (json object)\\n\"\n             \"  \\\"transactionid\\\" : {       (json object)\\n\"\n             \"    \\\"size\\\" : n,             (numeric) transaction size in bytes\\n\"\n-            \"    \\\"fee\\\" : n,              (numeric) transaction fee in bitcoins\\n\"\n+            \"    \\\"fee\\\" : n,              (numeric) transaction fee in \" + CURRENCY_UNIT + \"\\n\"\n             \"    \\\"time\\\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT\\n\"\n             \"    \\\"height\\\" : n,           (numeric) block height when transaction entered pool\\n\"\n             \"    \\\"startingpriority\\\" : n, (numeric) priority when transaction entered pool\\n\"\n@@ -461,7 +462,7 @@ UniValue gettxout(const UniValue& params, bool fHelp)\n             \"{\\n\"\n             \"  \\\"bestblock\\\" : \\\"hash\\\",    (string) the block hash\\n\"\n             \"  \\\"confirmations\\\" : n,       (numeric) The number of confirmations\\n\"\n-            \"  \\\"value\\\" : x.xxx,           (numeric) The transaction value in btc\\n\"\n+            \"  \\\"value\\\" : x.xxx,           (numeric) The transaction value in \" + CURRENCY_UNIT + \"\\n\"\n             \"  \\\"scriptPubKey\\\" : {         (json object)\\n\"\n             \"     \\\"asm\\\" : \\\"code\\\",       (string) \\n\"\n             \"     \\\"hex\\\" : \\\"hex\\\",        (string) \\n\""
      },
      {
        "sha": "6d10d1ce158f572b29cab801535de99b4fc91bad",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6fee6b7c71cb339b3249860464d0a066b9a3147/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6fee6b7c71cb339b3249860464d0a066b9a3147/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=b6fee6b7c71cb339b3249860464d0a066b9a3147",
        "patch": "@@ -60,8 +60,8 @@ UniValue getinfo(const UniValue& params, bool fHelp)\n             \"  \\\"keypoololdest\\\": xxxxxx,    (numeric) the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool\\n\"\n             \"  \\\"keypoolsize\\\": xxxx,        (numeric) how many new keys are pre-generated\\n\"\n             \"  \\\"unlocked_until\\\": ttt,      (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n-            \"  \\\"paytxfee\\\": x.xxxx,         (numeric) the transaction fee set in btc/kb\\n\"\n-            \"  \\\"relayfee\\\": x.xxxx,         (numeric) minimum relay fee for non-free transactions in btc/kb\\n\"\n+            \"  \\\"paytxfee\\\": x.xxxx,         (numeric) the transaction fee set in \" + CURRENCY_UNIT + \"/kB\\n\"\n+            \"  \\\"relayfee\\\": x.xxxx,         (numeric) minimum relay fee for non-free transactions in \" + CURRENCY_UNIT + \"/kB\\n\"\n             \"  \\\"errors\\\": \\\"...\\\"           (string) any error messages\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\""
      },
      {
        "sha": "d51aa503059945879aa3d58beaa9945475dc1387",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6fee6b7c71cb339b3249860464d0a066b9a3147/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6fee6b7c71cb339b3249860464d0a066b9a3147/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=b6fee6b7c71cb339b3249860464d0a066b9a3147",
        "patch": "@@ -423,7 +423,7 @@ UniValue getnetworkinfo(const UniValue& params, bool fHelp)\n             \"  }\\n\"\n             \"  ,...\\n\"\n             \"  ],\\n\"\n-            \"  \\\"relayfee\\\": x.xxxxxxxx,                (numeric) minimum relay fee for non-free transactions in btc/kb\\n\"\n+            \"  \\\"relayfee\\\": x.xxxxxxxx,                (numeric) minimum relay fee for non-free transactions in \" + CURRENCY_UNIT + \"/kB\\n\"\n             \"  \\\"localaddresses\\\": [                    (array) list of local addresses\\n\"\n             \"  {\\n\"\n             \"    \\\"address\\\": \\\"xxxx\\\",                 (string) network address\\n\""
      },
      {
        "sha": "a3246b41fb656868f30094567f3a9b35567fccd8",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6fee6b7c71cb339b3249860464d0a066b9a3147/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6fee6b7c71cb339b3249860464d0a066b9a3147/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=b6fee6b7c71cb339b3249860464d0a066b9a3147",
        "patch": "@@ -149,7 +149,7 @@ UniValue getrawtransaction(const UniValue& params, bool fHelp)\n             \"  ],\\n\"\n             \"  \\\"vout\\\" : [              (array of json objects)\\n\"\n             \"     {\\n\"\n-            \"       \\\"value\\\" : x.xxx,            (numeric) The value in btc\\n\"\n+            \"       \\\"value\\\" : x.xxx,            (numeric) The value in \" + CURRENCY_UNIT + \"\\n\"\n             \"       \\\"n\\\" : n,                    (numeric) index\\n\"\n             \"       \\\"scriptPubKey\\\" : {          (json object)\\n\"\n             \"         \\\"asm\\\" : \\\"asm\\\",          (string) the asm\\n\"\n@@ -335,7 +335,7 @@ UniValue createrawtransaction(const UniValue& params, bool fHelp)\n             \"     ]\\n\"\n             \"2. \\\"addresses\\\"           (string, required) a json object with addresses as keys and amounts as values\\n\"\n             \"    {\\n\"\n-            \"      \\\"address\\\": x.xxx   (numeric, required) The key is the bitcoin address, the value is the btc amount\\n\"\n+            \"      \\\"address\\\": x.xxx   (numeric, required) The key is the bitcoin address, the value is the \" + CURRENCY_UNIT + \" amount\\n\"\n             \"      ,...\\n\"\n             \"    }\\n\"\n \n@@ -422,7 +422,7 @@ UniValue decoderawtransaction(const UniValue& params, bool fHelp)\n             \"  ],\\n\"\n             \"  \\\"vout\\\" : [             (array of json objects)\\n\"\n             \"     {\\n\"\n-            \"       \\\"value\\\" : x.xxx,            (numeric) The value in btc\\n\"\n+            \"       \\\"value\\\" : x.xxx,            (numeric) The value in \" + CURRENCY_UNIT + \"\\n\"\n             \"       \\\"n\\\" : n,                    (numeric) index\\n\"\n             \"       \\\"scriptPubKey\\\" : {          (json object)\\n\"\n             \"         \\\"asm\\\" : \\\"asm\\\",          (string) the asm\\n\""
      },
      {
        "sha": "198b5baf6051c246d201f0527621473a868b98f2",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 25,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6fee6b7c71cb339b3249860464d0a066b9a3147/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6fee6b7c71cb339b3249860464d0a066b9a3147/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=b6fee6b7c71cb339b3249860464d0a066b9a3147",
        "patch": "@@ -390,7 +390,7 @@ UniValue sendtoaddress(const UniValue& params, bool fHelp)\n             + HelpRequiringPassphrase() +\n             \"\\nArguments:\\n\"\n             \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address to send to.\\n\"\n-            \"2. \\\"amount\\\"      (numeric, required) The amount in btc to send. eg 0.1\\n\"\n+            \"2. \\\"amount\\\"      (numeric, required) The amount in \" + CURRENCY_UNIT + \" to send. eg 0.1\\n\"\n             \"3. \\\"comment\\\"     (string, optional) A comment used to store what the transaction is for. \\n\"\n             \"                             This is not part of the transaction, just kept in your wallet.\\n\"\n             \"4. \\\"comment-to\\\"  (string, optional) A comment to store the name of the person or organization \\n\"\n@@ -452,7 +452,7 @@ UniValue listaddressgroupings(const UniValue& params, bool fHelp)\n             \"  [\\n\"\n             \"    [\\n\"\n             \"      \\\"bitcoinaddress\\\",     (string) The bitcoin address\\n\"\n-            \"      amount,                 (numeric) The amount in btc\\n\"\n+            \"      amount,                 (numeric) The amount in \" + CURRENCY_UNIT + \"\\n\"\n             \"      \\\"account\\\"             (string, optional) The account (DEPRECATED)\\n\"\n             \"    ]\\n\"\n             \"    ,...\\n\"\n@@ -556,7 +556,7 @@ UniValue getreceivedbyaddress(const UniValue& params, bool fHelp)\n             \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address for transactions.\\n\"\n             \"2. minconf             (numeric, optional, default=1) Only include transactions confirmed at least this many times.\\n\"\n             \"\\nResult:\\n\"\n-            \"amount   (numeric) The total amount in btc received at this address.\\n\"\n+            \"amount   (numeric) The total amount in \" + CURRENCY_UNIT + \" received at this address.\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nThe amount from transactions with at least 1 confirmation\\n\"\n             + HelpExampleCli(\"getreceivedbyaddress\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\") +\n@@ -614,7 +614,7 @@ UniValue getreceivedbyaccount(const UniValue& params, bool fHelp)\n             \"1. \\\"account\\\"      (string, required) The selected account, may be the default account using \\\"\\\".\\n\"\n             \"2. minconf          (numeric, optional, default=1) Only include transactions confirmed at least this many times.\\n\"\n             \"\\nResult:\\n\"\n-            \"amount              (numeric) The total amount in btc received for this account.\\n\"\n+            \"amount              (numeric) The total amount in \" + CURRENCY_UNIT + \" received for this account.\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nAmount received by the default account with at least 1 confirmation\\n\"\n             + HelpExampleCli(\"getreceivedbyaccount\", \"\\\"\\\"\") +\n@@ -707,7 +707,7 @@ UniValue getbalance(const UniValue& params, bool fHelp)\n             \"2. minconf          (numeric, optional, default=1) Only include transactions confirmed at least this many times.\\n\"\n             \"3. includeWatchonly (bool, optional, default=false) Also include balance in watchonly addresses (see 'importaddress')\\n\"\n             \"\\nResult:\\n\"\n-            \"amount              (numeric) The total amount in btc received for this account.\\n\"\n+            \"amount              (numeric) The total amount in \" + CURRENCY_UNIT + \" received for this account.\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nThe total amount in the wallet\\n\"\n             + HelpExampleCli(\"getbalance\", \"\") +\n@@ -793,14 +793,15 @@ UniValue movecmd(const UniValue& params, bool fHelp)\n             \"\\nArguments:\\n\"\n             \"1. \\\"fromaccount\\\"   (string, required) The name of the account to move funds from. May be the default account using \\\"\\\".\\n\"\n             \"2. \\\"toaccount\\\"     (string, required) The name of the account to move funds to. May be the default account using \\\"\\\".\\n\"\n-            \"3. minconf           (numeric, optional, default=1) Only use funds with at least this many confirmations.\\n\"\n-            \"4. \\\"comment\\\"       (string, optional) An optional comment, stored in the wallet only.\\n\"\n+            \"3. amount            (numeric) Quantity of \" + CURRENCY_UNIT + \" to move between accounts.\\n\"\n+            \"4. minconf           (numeric, optional, default=1) Only use funds with at least this many confirmations.\\n\"\n+            \"5. \\\"comment\\\"       (string, optional) An optional comment, stored in the wallet only.\\n\"\n             \"\\nResult:\\n\"\n             \"true|false           (boolean) true if successfull.\\n\"\n             \"\\nExamples:\\n\"\n-            \"\\nMove 0.01 btc from the default account to the account named tabby\\n\"\n+            \"\\nMove 0.01 \" + CURRENCY_UNIT + \" from the default account to the account named tabby\\n\"\n             + HelpExampleCli(\"move\", \"\\\"\\\" \\\"tabby\\\" 0.01\") +\n-            \"\\nMove 0.01 btc timotei to akiko with a comment and funds have 6 confirmations\\n\"\n+            \"\\nMove 0.01 \" + CURRENCY_UNIT + \" timotei to akiko with a comment and funds have 6 confirmations\\n\"\n             + HelpExampleCli(\"move\", \"\\\"timotei\\\" \\\"akiko\\\" 0.01 6 \\\"happy birthday!\\\"\") +\n             \"\\nAs a json rpc call\\n\"\n             + HelpExampleRpc(\"move\", \"\\\"timotei\\\", \\\"akiko\\\", 0.01, 6, \\\"happy birthday!\\\"\")\n@@ -867,7 +868,7 @@ UniValue sendfrom(const UniValue& params, bool fHelp)\n             \"\\nArguments:\\n\"\n             \"1. \\\"fromaccount\\\"       (string, required) The name of the account to send funds from. May be the default account using \\\"\\\".\\n\"\n             \"2. \\\"tobitcoinaddress\\\"  (string, required) The bitcoin address to send funds to.\\n\"\n-            \"3. amount                (numeric, required) The amount in btc. (transaction fee is added on top).\\n\"\n+            \"3. amount                (numeric, required) The amount in \" + CURRENCY_UNIT + \" (transaction fee is added on top).\\n\"\n             \"4. minconf               (numeric, optional, default=1) Only use funds with at least this many confirmations.\\n\"\n             \"5. \\\"comment\\\"           (string, optional) A comment used to store what the transaction is for. \\n\"\n             \"                                     This is not part of the transaction, just kept in your wallet.\\n\"\n@@ -877,7 +878,7 @@ UniValue sendfrom(const UniValue& params, bool fHelp)\n             \"\\nResult:\\n\"\n             \"\\\"transactionid\\\"        (string) The transaction id.\\n\"\n             \"\\nExamples:\\n\"\n-            \"\\nSend 0.01 btc from the default account to the address, must have at least 1 confirmation\\n\"\n+            \"\\nSend 0.01 \" + CURRENCY_UNIT + \" from the default account to the address, must have at least 1 confirmation\\n\"\n             + HelpExampleCli(\"sendfrom\", \"\\\"\\\" \\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\" 0.01\") +\n             \"\\nSend 0.01 from the tabby account to the given address, funds must have at least 6 confirmations\\n\"\n             + HelpExampleCli(\"sendfrom\", \"\\\"tabby\\\" \\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\" 0.01 6 \\\"donation\\\" \\\"seans outpost\\\"\") +\n@@ -932,7 +933,7 @@ UniValue sendmany(const UniValue& params, bool fHelp)\n             \"1. \\\"fromaccount\\\"         (string, required) DEPRECATED. The account to send the funds from. Should be \\\"\\\" for the default account\\n\"\n             \"2. \\\"amounts\\\"             (string, required) A json object with addresses and amounts\\n\"\n             \"    {\\n\"\n-            \"      \\\"address\\\":amount   (numeric) The bitcoin address is the key, the numeric amount in btc is the value\\n\"\n+            \"      \\\"address\\\":amount   (numeric) The bitcoin address is the key, the numeric amount in \" + CURRENCY_UNIT + \" is the value\\n\"\n             \"      ,...\\n\"\n             \"    }\\n\"\n             \"3. minconf                 (numeric, optional, default=1) Only use the balance confirmed at least this many times.\\n\"\n@@ -1233,7 +1234,7 @@ UniValue listreceivedbyaddress(const UniValue& params, bool fHelp)\n             \"    \\\"involvesWatchonly\\\" : true,        (bool) Only returned if imported addresses were involved in transaction\\n\"\n             \"    \\\"address\\\" : \\\"receivingaddress\\\",  (string) The receiving address\\n\"\n             \"    \\\"account\\\" : \\\"accountname\\\",       (string) DEPRECATED. The account of the receiving address. The default account is \\\"\\\".\\n\"\n-            \"    \\\"amount\\\" : x.xxx,                  (numeric) The total amount in btc received by the address\\n\"\n+            \"    \\\"amount\\\" : x.xxx,                  (numeric) The total amount in \" + CURRENCY_UNIT + \" received by the address\\n\"\n             \"    \\\"confirmations\\\" : n                (numeric) The number of confirmations of the most recent transaction included\\n\"\n             \"  }\\n\"\n             \"  ,...\\n\"\n@@ -1405,11 +1406,11 @@ UniValue listtransactions(const UniValue& params, bool fHelp)\n             \"                                                transaction between accounts, and not associated with an address,\\n\"\n             \"                                                transaction id or block. 'send' and 'receive' transactions are \\n\"\n             \"                                                associated with an address, transaction id and block details\\n\"\n-            \"    \\\"amount\\\": x.xxx,          (numeric) The amount in btc. This is negative for the 'send' category, and for the\\n\"\n+            \"    \\\"amount\\\": x.xxx,          (numeric) The amount in \" + CURRENCY_UNIT + \". This is negative for the 'send' category, and for the\\n\"\n             \"                                         'move' category for moves outbound. It is positive for the 'receive' category,\\n\"\n             \"                                         and for the 'move' category for inbound funds.\\n\"\n             \"    \\\"vout\\\" : n,               (numeric) the vout value\\n\"\n-            \"    \\\"fee\\\": x.xxx,             (numeric) The amount of the fee in btc. This is negative and only available for the \\n\"\n+            \"    \\\"fee\\\": x.xxx,             (numeric) The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the \\n\"\n             \"                                         'send' category of transactions.\\n\"\n             \"    \\\"confirmations\\\": n,       (numeric) The number of confirmations for the transaction. Available for 'send' and \\n\"\n             \"                                         'receive' category of transactions.\\n\"\n@@ -1600,10 +1601,10 @@ UniValue listsinceblock(const UniValue& params, bool fHelp)\n             \"    \\\"account\\\":\\\"accountname\\\",       (string) DEPRECATED. The account name associated with the transaction. Will be \\\"\\\" for the default account.\\n\"\n             \"    \\\"address\\\":\\\"bitcoinaddress\\\",    (string) The bitcoin address of the transaction. Not present for move transactions (category = move).\\n\"\n             \"    \\\"category\\\":\\\"send|receive\\\",     (string) The transaction category. 'send' has negative amounts, 'receive' has positive amounts.\\n\"\n-            \"    \\\"amount\\\": x.xxx,          (numeric) The amount in btc. This is negative for the 'send' category, and for the 'move' category for moves \\n\"\n+            \"    \\\"amount\\\": x.xxx,          (numeric) The amount in \" + CURRENCY_UNIT + \". This is negative for the 'send' category, and for the 'move' category for moves \\n\"\n             \"                                          outbound. It is positive for the 'receive' category, and for the 'move' category for inbound funds.\\n\"\n             \"    \\\"vout\\\" : n,               (numeric) the vout value\\n\"\n-            \"    \\\"fee\\\": x.xxx,             (numeric) The amount of the fee in btc. This is negative and only available for the 'send' category of transactions.\\n\"\n+            \"    \\\"fee\\\": x.xxx,             (numeric) The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the 'send' category of transactions.\\n\"\n             \"    \\\"confirmations\\\": n,       (numeric) The number of confirmations for the transaction. Available for 'send' and 'receive' category of transactions.\\n\"\n             \"    \\\"blockhash\\\": \\\"hashvalue\\\",     (string) The block hash containing the transaction. Available for 'send' and 'receive' category of transactions.\\n\"\n             \"    \\\"blockindex\\\": n,          (numeric) The block index containing the transaction. Available for 'send' and 'receive' category of transactions.\\n\"\n@@ -1686,7 +1687,7 @@ UniValue gettransaction(const UniValue& params, bool fHelp)\n             \"2. \\\"includeWatchonly\\\"    (bool, optional, default=false) Whether to include watchonly addresses in balance calculation and details[]\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"amount\\\" : x.xxx,        (numeric) The transaction amount in btc\\n\"\n+            \"  \\\"amount\\\" : x.xxx,        (numeric) The transaction amount in \" + CURRENCY_UNIT + \"\\n\"\n             \"  \\\"confirmations\\\" : n,     (numeric) The number of confirmations\\n\"\n             \"  \\\"blockhash\\\" : \\\"hash\\\",  (string) The block hash\\n\"\n             \"  \\\"blockindex\\\" : xx,       (numeric) The block index\\n\"\n@@ -1699,7 +1700,7 @@ UniValue gettransaction(const UniValue& params, bool fHelp)\n             \"      \\\"account\\\" : \\\"accountname\\\",  (string) DEPRECATED. The account name involved in the transaction, can be \\\"\\\" for the default account.\\n\"\n             \"      \\\"address\\\" : \\\"bitcoinaddress\\\",   (string) The bitcoin address involved in the transaction\\n\"\n             \"      \\\"category\\\" : \\\"send|receive\\\",    (string) The category, either 'send' or 'receive'\\n\"\n-            \"      \\\"amount\\\" : x.xxx                  (numeric) The amount in btc\\n\"\n+            \"      \\\"amount\\\" : x.xxx                  (numeric) The amount in \" + CURRENCY_UNIT + \"\\n\"\n             \"      \\\"vout\\\" : n,                       (numeric) the vout value\\n\"\n             \"    }\\n\"\n             \"    ,...\\n\"\n@@ -2165,7 +2166,7 @@ UniValue settxfee(const UniValue& params, bool fHelp)\n             \"settxfee amount\\n\"\n             \"\\nSet the transaction fee per kB.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. amount         (numeric, required) The transaction fee in BTC/kB rounded to the nearest 0.00000001\\n\"\n+            \"1. amount         (numeric, required) The transaction fee in \" + CURRENCY_UNIT + \"/kB rounded to the nearest 0.00000001\\n\"\n             \"\\nResult\\n\"\n             \"true|false        (boolean) Returns true if successful\\n\"\n             \"\\nExamples:\\n\"\n@@ -2194,14 +2195,14 @@ UniValue getwalletinfo(const UniValue& params, bool fHelp)\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"walletversion\\\": xxxxx,     (numeric) the wallet version\\n\"\n-            \"  \\\"balance\\\": xxxxxxx,         (numeric) the total confirmed bitcoin balance of the wallet\\n\"\n-            \"  \\\"unconfirmed_balance\\\": xxx, (numeric) the total unconfirmed bitcoin balance of the wallet\\n\"\n-            \"  \\\"immature_balance\\\": xxxxxx, (numeric) the total immature balance of the wallet\\n\"\n+            \"  \\\"balance\\\": xxxxxxx,         (numeric) the total confirmed balance of the wallet in \" + CURRENCY_UNIT + \"\\n\"\n+            \"  \\\"unconfirmed_balance\\\": xxx, (numeric) the total unconfirmed balance of the wallet in \" + CURRENCY_UNIT + \"\\n\"\n+            \"  \\\"immature_balance\\\": xxxxxx, (numeric) the total immature balance of the wallet in \" + CURRENCY_UNIT + \"\\n\"\n             \"  \\\"txcount\\\": xxxxxxx,         (numeric) the total number of transactions in the wallet\\n\"\n             \"  \\\"keypoololdest\\\": xxxxxx,    (numeric) the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool\\n\"\n             \"  \\\"keypoolsize\\\": xxxx,        (numeric) how many new keys are pre-generated\\n\"\n             \"  \\\"unlocked_until\\\": ttt,      (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n-            \"  \\\"paytxfee\\\": x.xxxx,         (numeric) the transaction fee configuration, set in btc/kb\\n\"\n+            \"  \\\"paytxfee\\\": x.xxxx,         (numeric) the transaction fee configuration, set in \" + CURRENCY_UNIT + \"/kB\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getwalletinfo\", \"\")\n@@ -2278,7 +2279,7 @@ UniValue listunspent(const UniValue& params, bool fHelp)\n             \"    \\\"address\\\" : \\\"address\\\",  (string) the bitcoin address\\n\"\n             \"    \\\"account\\\" : \\\"account\\\",  (string) DEPRECATED. The associated account, or \\\"\\\" for the default account\\n\"\n             \"    \\\"scriptPubKey\\\" : \\\"key\\\", (string) the script key\\n\"\n-            \"    \\\"amount\\\" : x.xxx,         (numeric) the transaction amount in btc\\n\"\n+            \"    \\\"amount\\\" : x.xxx,         (numeric) the transaction amount in \" + CURRENCY_UNIT + \"\\n\"\n             \"    \\\"confirmations\\\" : n       (numeric) The number of confirmations\\n\"\n             \"  }\\n\"\n             \"  ,...\\n\""
      }
    ]
  },
  {
    "sha": "fc25a8748eefe3cb62be93d9804ef3f9e17b78cc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYzI1YTg3NDhlZWZlM2NiNjJiZTkzZDk4MDRlZjNmOWUxN2I3OGNj",
    "commit": {
      "author": {
        "name": "unsystemizer",
        "email": "something@gmail.com",
        "date": "2015-08-04T06:10:51Z"
      },
      "committer": {
        "name": "unsystemizer",
        "email": "something@gmail.com",
        "date": "2015-08-04T06:10:51Z"
      },
      "message": "Add note on relative paths, improve formatting\n\nAdded \"conf, pid, and wallet accept relative paths which are interpreted as relative to the data directory. wallet only supports relative paths.\"",
      "tree": {
        "sha": "50afbba23028b51a59d21c04d7759faa3a2534c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/50afbba23028b51a59d21c04d7759faa3a2534c6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc25a8748eefe3cb62be93d9804ef3f9e17b78cc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc25a8748eefe3cb62be93d9804ef3f9e17b78cc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fc25a8748eefe3cb62be93d9804ef3f9e17b78cc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc25a8748eefe3cb62be93d9804ef3f9e17b78cc/comments",
    "author": {
      "login": "unsystemizer",
      "id": 13134193,
      "node_id": "MDQ6VXNlcjEzMTM0MTkz",
      "avatar_url": "https://avatars.githubusercontent.com/u/13134193?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/unsystemizer",
      "html_url": "https://github.com/unsystemizer",
      "followers_url": "https://api.github.com/users/unsystemizer/followers",
      "following_url": "https://api.github.com/users/unsystemizer/following{/other_user}",
      "gists_url": "https://api.github.com/users/unsystemizer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/unsystemizer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/unsystemizer/subscriptions",
      "organizations_url": "https://api.github.com/users/unsystemizer/orgs",
      "repos_url": "https://api.github.com/users/unsystemizer/repos",
      "events_url": "https://api.github.com/users/unsystemizer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/unsystemizer/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "unsystemizer",
      "id": 13134193,
      "node_id": "MDQ6VXNlcjEzMTM0MTkz",
      "avatar_url": "https://avatars.githubusercontent.com/u/13134193?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/unsystemizer",
      "html_url": "https://github.com/unsystemizer",
      "followers_url": "https://api.github.com/users/unsystemizer/followers",
      "following_url": "https://api.github.com/users/unsystemizer/following{/other_user}",
      "gists_url": "https://api.github.com/users/unsystemizer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/unsystemizer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/unsystemizer/subscriptions",
      "organizations_url": "https://api.github.com/users/unsystemizer/orgs",
      "repos_url": "https://api.github.com/users/unsystemizer/repos",
      "events_url": "https://api.github.com/users/unsystemizer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/unsystemizer/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b6fee6b7c71cb339b3249860464d0a066b9a3147",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6fee6b7c71cb339b3249860464d0a066b9a3147",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b6fee6b7c71cb339b3249860464d0a066b9a3147"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 18,
      "deletions": 17
    },
    "files": [
      {
        "sha": "7dee450c29335c68fb7f641784989765d6996688",
        "filename": "doc/init.md",
        "status": "modified",
        "additions": 18,
        "deletions": 17,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc25a8748eefe3cb62be93d9804ef3f9e17b78cc/doc/init.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc25a8748eefe3cb62be93d9804ef3f9e17b78cc/doc/init.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/init.md?ref=fc25a8748eefe3cb62be93d9804ef3f9e17b78cc",
        "patch": "@@ -33,24 +33,26 @@ If bitcoind is run with \"-daemon\" flag, and no rpcpassword is set, it will\n print a randomly generated suitable password to stderr.  You can also\n generate one from the shell yourself like this:\n \n-bash -c 'tr -dc a-zA-Z0-9 < /dev/urandom | head -c32 && echo'\n+`bash -c 'tr -dc a-zA-Z0-9 < /dev/urandom | head -c32 && echo'`\n \n-Once you have a password in hand, set rpcpassword= in /etc/bitcoin/bitcoin.conf\n+Once you have a password in hand, set `rpcpassword=` in `/etc/bitcoin/bitcoin.conf`\n+\n+`conf`, `pid`, and `wallet` accept relative paths which are interpreted as \n+relative to the data directory. `wallet` *only* supports relative paths.\n \n For an example configuration file that describes the configuration settings, \n-see contrib/debian/examples/bitcoin.conf.\n+see `contrib/debian/examples/bitcoin.conf`.\n \n 3. Paths\n ---------------------------------\n \n All three configurations assume several paths that might need to be adjusted.\n \n-Binary:              /usr/bin/bitcoind\n-Configuration file:  /etc/bitcoin/bitcoin.conf\n-Data directory:      /var/lib/bitcoind\n-PID file:            /var/run/bitcoind/bitcoind.pid (OpenRC and Upstart)\n-                     /var/lib/bitcoind/bitcoind.pid (systemd)\n-Lock file:           /var/lock/subsys/bitcoind (CentOS)\n+Binary:              `/usr/bin/bitcoind`  \n+Configuration file:  `/etc/bitcoin/bitcoin.conf`  \n+Data directory:      `/var/lib/bitcoind`  \n+PID file:            `/var/run/bitcoind/bitcoind.pid` (OpenRC and Upstart) or `/var/lib/bitcoind/bitcoind.pid` (systemd)  \n+Lock file:           `/var/lock/subsys/bitcoind` (CentOS)  \n \n The configuration file, PID directory (if applicable) and data directory\n should all be owned by the bitcoin user and group.  It is advised for security\n@@ -65,29 +67,29 @@ can then be controlled by group membership.\n \n Installing this .service file consists of just copying it to\n /usr/lib/systemd/system directory, followed by the command\n-\"systemctl daemon-reload\" in order to update running systemd configuration.\n+`systemctl daemon-reload` in order to update running systemd configuration.\n \n-To test, run \"systemctl start bitcoind\" and to enable for system startup run\n-\"systemctl enable bitcoind\"\n+To test, run `systemctl start bitcoind` and to enable for system startup run\n+`systemctl enable bitcoind`\n \n 4b) OpenRC\n \n Rename bitcoind.openrc to bitcoind and drop it in /etc/init.d.  Double\n check ownership and permissions and make it executable.  Test it with\n-\"/etc/init.d/bitcoind start\" and configure it to run on startup with\n-\"rc-update add bitcoind\"\n+`/etc/init.d/bitcoind start` and configure it to run on startup with\n+`rc-update add bitcoind`\n \n 4c) Upstart (for Debian/Ubuntu based distributions)\n \n-Drop bitcoind.conf in /etc/init.  Test by running \"service bitcoind start\"\n+Drop bitcoind.conf in /etc/init.  Test by running `service bitcoind start`\n it will automatically start on reboot.\n \n NOTE: This script is incompatible with CentOS 5 and Amazon Linux 2014 as they\n use old versions of Upstart and do not supply the start-stop-daemon utility.\n \n 4d) CentOS\n \n-Copy bitcoind.init to /etc/init.d/bitcoind. Test by running \"service bitcoind start\".\n+Copy bitcoind.init to /etc/init.d/bitcoind. Test by running `service bitcoind start`.\n \n Using this script, you can adjust the path and flags to the bitcoind program by \n setting the BITCOIND and FLAGS environment variables in the file \n@@ -99,4 +101,3 @@ setting the BITCOIND and FLAGS environment variables in the file\n Auto respawning is currently only configured for Upstart and systemd.\n Reasonable defaults have been chosen but YMMV.\n \n-"
      }
    ]
  },
  {
    "sha": "914286757268b3c0566e4de5bae36809937c4d6f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MTQyODY3NTcyNjhiM2MwNTY2ZTRkZTViYWUzNjgwOTkzN2M0ZDZm",
    "commit": {
      "author": {
        "name": "Marco",
        "email": "falke.marco@gmail.com",
        "date": "2015-08-04T10:06:12Z"
      },
      "committer": {
        "name": "Marco",
        "email": "falke.marco@gmail.com",
        "date": "2015-08-04T10:06:12Z"
      },
      "message": "[QT] cleanup icons\n\n* Cleanup SVG code\n* Unify design (\"Typicons\" seem to have round edges)\n* Fix transparency issue with clock5.png",
      "tree": {
        "sha": "ad3e2d6080be05f6c224e989e12042a68f7b37d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ad3e2d6080be05f6c224e989e12042a68f7b37d0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/914286757268b3c0566e4de5bae36809937c4d6f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/914286757268b3c0566e4de5bae36809937c4d6f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/914286757268b3c0566e4de5bae36809937c4d6f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/914286757268b3c0566e4de5bae36809937c4d6f/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "86cfd23f68367af072500b1758a4c446cdd36e74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86cfd23f68367af072500b1758a4c446cdd36e74",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/86cfd23f68367af072500b1758a4c446cdd36e74"
      }
    ],
    "stats": {
      "total": 154,
      "additions": 99,
      "deletions": 55
    },
    "files": [
      {
        "sha": "b6d6a097d6ddb59362fcd260354da01f9efd3e8d",
        "filename": "contrib/devtools/optimize-pngs.py",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/914286757268b3c0566e4de5bae36809937c4d6f/contrib/devtools/optimize-pngs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/914286757268b3c0566e4de5bae36809937c4d6f/contrib/devtools/optimize-pngs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/optimize-pngs.py?ref=914286757268b3c0566e4de5bae36809937c4d6f",
        "patch": "@@ -1,5 +1,8 @@\n #!/usr/bin/env python\n-\n+'''\n+Run this scrip every time you change one of the png files. Using pngcrush, it will optimize the png files, remove various color profiles, remove ancillary chunks (alla) and text chunks (text).\n+#pngcrush -brute -ow -rem gAMA -rem cHRM -rem iCCP -rem sRGB -rem alla -rem text\n+'''\n import os\n import sys\n import subprocess\n@@ -18,14 +21,12 @@ def content_hash(filename):\n     data = i.tostring()\n     return hashlib.sha256(data).hexdigest()\n \n-#optimize png, remove various color profiles, remove ancillary chunks (alla) and text chunks (text)\n-#pngcrush -brute -ow -rem gAMA -rem cHRM -rem iCCP -rem sRGB -rem alla -rem text\n-\n pngcrush = 'pngcrush'\n git = 'git'\n-folders = [\"src/qt/res/movies\", \"src/qt/res/icons\", \"src/qt/res/images\"]\n+folders = [\"src/qt/res/movies\", \"src/qt/res/icons\"]\n basePath = subprocess.check_output([git, 'rev-parse', '--show-toplevel']).rstrip('\\n')\n totalSaveBytes = 0\n+noHashChange = True\n \n outputArray = []\n for folder in folders:\n@@ -68,6 +69,7 @@ def content_hash(filename):\n     oldHash = fileDict['sha256Old']\n     newHash = fileDict['sha256New']\n     totalSaveBytes += fileDict['osize'] - fileDict['psize']\n+    noHashChange = noHashChange and (oldHash == newHash)\n     print fileDict['file']+\"\\n  size diff from: \"+str(fileDict['osize'])+\" to: \"+str(fileDict['psize'])+\"\\n  old sha256: \"+oldHash+\"\\n  new sha256: \"+newHash+\"\\n\"\n     \n-print \"completed. Total reduction: \"+str(totalSaveBytes)+\" bytes\"\n+print \"completed. Checksum stable: \"+str(noHashChange)+\". Total reduction: \"+str(totalSaveBytes)+\" bytes\""
      },
      {
        "sha": "c40abfd3a6cd48491191814e8f82c1654e4de8cc",
        "filename": "src/qt/res/icons/about_qt.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/914286757268b3c0566e4de5bae36809937c4d6f/src/qt/res/icons/about_qt.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/914286757268b3c0566e4de5bae36809937c4d6f/src/qt/res/icons/about_qt.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/about_qt.png?ref=914286757268b3c0566e4de5bae36809937c4d6f"
      },
      {
        "sha": "162204d1bba6540656b47aae41a09d902e13d5b4",
        "filename": "src/qt/res/icons/clock1.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/914286757268b3c0566e4de5bae36809937c4d6f/src/qt/res/icons/clock1.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/914286757268b3c0566e4de5bae36809937c4d6f/src/qt/res/icons/clock1.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/clock1.png?ref=914286757268b3c0566e4de5bae36809937c4d6f"
      },
      {
        "sha": "8f4263a31cc8e628b5b52b590db6475284b5efd4",
        "filename": "src/qt/res/icons/clock2.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/914286757268b3c0566e4de5bae36809937c4d6f/src/qt/res/icons/clock2.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/914286757268b3c0566e4de5bae36809937c4d6f/src/qt/res/icons/clock2.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/clock2.png?ref=914286757268b3c0566e4de5bae36809937c4d6f"
      },
      {
        "sha": "7f11a7566c15c2ff7d7d50cf53edb1f5c93faf00",
        "filename": "src/qt/res/icons/clock3.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/914286757268b3c0566e4de5bae36809937c4d6f/src/qt/res/icons/clock3.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/914286757268b3c0566e4de5bae36809937c4d6f/src/qt/res/icons/clock3.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/clock3.png?ref=914286757268b3c0566e4de5bae36809937c4d6f"
      },
      {
        "sha": "fdd1a0fce34353183a7af42f4039489cf2779a0b",
        "filename": "src/qt/res/icons/clock4.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/914286757268b3c0566e4de5bae36809937c4d6f/src/qt/res/icons/clock4.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/914286757268b3c0566e4de5bae36809937c4d6f/src/qt/res/icons/clock4.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/clock4.png?ref=914286757268b3c0566e4de5bae36809937c4d6f"
      },
      {
        "sha": "7d6556c6cf731934684a92468e5a24b5bd3a2480",
        "filename": "src/qt/res/icons/clock5.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/914286757268b3c0566e4de5bae36809937c4d6f/src/qt/res/icons/clock5.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/914286757268b3c0566e4de5bae36809937c4d6f/src/qt/res/icons/clock5.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/clock5.png?ref=914286757268b3c0566e4de5bae36809937c4d6f"
      },
      {
        "sha": "72c44565ec3bf56248c47549a182420386e96082",
        "filename": "src/qt/res/icons/transaction0.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/914286757268b3c0566e4de5bae36809937c4d6f/src/qt/res/icons/transaction0.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/914286757268b3c0566e4de5bae36809937c4d6f/src/qt/res/icons/transaction0.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/transaction0.png?ref=914286757268b3c0566e4de5bae36809937c4d6f"
      },
      {
        "sha": "6bc5ac78952b42e9c340c8888d382c775671ca35",
        "filename": "src/qt/res/icons/warning.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/914286757268b3c0566e4de5bae36809937c4d6f/src/qt/res/icons/warning.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/914286757268b3c0566e4de5bae36809937c4d6f/src/qt/res/icons/warning.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/warning.png?ref=914286757268b3c0566e4de5bae36809937c4d6f"
      },
      {
        "sha": "2a3d84c2d048549c16ba86e9d57fb81fac04119b",
        "filename": "src/qt/res/src/clock_1.svg",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/914286757268b3c0566e4de5bae36809937c4d6f/src/qt/res/src/clock_1.svg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/914286757268b3c0566e4de5bae36809937c4d6f/src/qt/res/src/clock_1.svg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/src/clock_1.svg?ref=914286757268b3c0566e4de5bae36809937c4d6f",
        "patch": "@@ -9,5 +9,7 @@\n \t\tc-57.8,0-112.1,22.5-153,63.4c-40.9,40.9-63.4,95.2-63.4,153c0,57.8,22.5,112.1,63.4,153c40.9,40.9,95.2,63.4,153,63.4\r\n \t\tc57.8,0,112.1-22.5,153-63.4c40.9-40.9,63.4-95.2,63.4-153c0-57.8-22.5-112.1-63.4-153C409.8,227.1,355.4,204.6,297.6,204.6z\"/>\r\n </g>\r\n-<polygon points=\"478.3,253.4 297.6,184.6 297.6,420.9 534,420.9 \"/>\r\n+<path\r\n+\td=\"M 478.3,253.4 297.6,184.6 c 0,0 0,78.8 0,118.2 0,117.5 -0.4,118.1 118.2,118.1 39.4,0 118.2,0 118.2,0 z\"\r\n+\tid=\"polygon7\" />\r\n </svg>\r"
      },
      {
        "sha": "2de8d467b754ecf316ca61209ecbc9a8248212ac",
        "filename": "src/qt/res/src/clock_2.svg",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/914286757268b3c0566e4de5bae36809937c4d6f/src/qt/res/src/clock_2.svg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/914286757268b3c0566e4de5bae36809937c4d6f/src/qt/res/src/clock_2.svg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/src/clock_2.svg?ref=914286757268b3c0566e4de5bae36809937c4d6f",
        "patch": "@@ -9,6 +9,5 @@\n \t\tc-57.8,0-112.1,22.5-153,63.4c-40.9,40.9-63.4,95.2-63.4,153c0,57.8,22.5,112.1,63.4,153c40.9,40.9,95.2,63.4,153,63.4\r\n \t\tc57.8,0,112.1-22.5,153-63.4c40.9-40.9,63.4-95.2,63.4-153c0-57.8-22.5-112.1-63.4-153C409.8,227.1,355.4,204.6,297.6,204.6z\"/>\r\n </g>\r\n-<polygon points=\"465.2,601.6 534,420.9 297.6,420.9 297.6,657.3 \"/>\r\n-<polygon points=\"478.3,253.4 297.6,184.6 297.6,420.9 534,420.9 \"/>\r\n+<polygon points=\"465.2,601.6 534,420.9 478.3,253.4 297.6,184.6 297.6,420.9 297.6,657.3 \"/>\r\n </svg>\r"
      },
      {
        "sha": "b691043e3e72bb24707030759b4da32e1fe2e224",
        "filename": "src/qt/res/src/clock_3.svg",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/914286757268b3c0566e4de5bae36809937c4d6f/src/qt/res/src/clock_3.svg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/914286757268b3c0566e4de5bae36809937c4d6f/src/qt/res/src/clock_3.svg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/src/clock_3.svg?ref=914286757268b3c0566e4de5bae36809937c4d6f",
        "patch": "@@ -9,7 +9,7 @@\n \t\tc-57.8,0-112.1,22.5-153,63.4c-40.9,40.9-63.4,95.2-63.4,153c0,57.8,22.5,112.1,63.4,153c40.9,40.9,95.2,63.4,153,63.4\r\n \t\tc57.8,0,112.1-22.5,153-63.4c40.9-40.9,63.4-95.2,63.4-153c0-57.8-22.5-112.1-63.4-153C409.8,227.1,355.4,204.6,297.6,204.6z\"/>\r\n </g>\r\n-<polygon points=\"117,588.5 297.6,657.3 297.6,420.9 61.3,420.9 \"/>\r\n-<polygon points=\"465.2,601.6 534,420.9 297.6,420.9 297.6,657.3 \"/>\r\n-<polygon points=\"478.3,253.4 297.6,184.6 297.6,420.9 534,420.9 \"/>\r\n+<path\r\n+\td=\"M 465.2,601.6 534,420.9 478.3,253.4 297.6,184.6 c 0,0 0,78.8 0,118.2 0,117.7 0.4,118.1 -118.1,118.1 -39.4,0 -118.2,0 -118.2,0 l 55.7,167.6 180.6,68.8 z\"\r\n+\tid=\"polygon7\" />\r\n </svg>\r"
      },
      {
        "sha": "ea311f31e826a5c321a99c0c0f58f9610b37207f",
        "filename": "src/qt/res/src/clock_4.svg",
        "status": "modified",
        "additions": 23,
        "deletions": 18,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/914286757268b3c0566e4de5bae36809937c4d6f/src/qt/res/src/clock_4.svg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/914286757268b3c0566e4de5bae36809937c4d6f/src/qt/res/src/clock_4.svg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/src/clock_4.svg?ref=914286757268b3c0566e4de5bae36809937c4d6f",
        "patch": "@@ -1,18 +1,23 @@\n-<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n-<!-- Generator: Adobe Illustrator 18.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\r\n-<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\r\n-<svg version=\"1.1\" id=\"Ebene_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\r\n-\t viewBox=\"0 0 841.9 841.9\" enable-background=\"new 0 0 841.9 841.9\" xml:space=\"preserve\">\r\n-<g>\r\n-\t<path d=\"M297.6,677.3c-68.5,0-132.9-26.7-181.3-75.1S41.3,489.4,41.3,420.9s26.7-132.9,75.1-181.3c48.4-48.4,112.8-75.1,181.3-75.1\r\n-\t\ts132.9,26.7,181.3,75.1c48.4,48.4,75.1,112.8,75.1,181.3s-26.7,132.9-75.1,181.3S366.1,677.3,297.6,677.3z M297.6,204.6\r\n-\t\tc-57.8,0-112.1,22.5-153,63.4c-40.9,40.9-63.4,95.2-63.4,153c0,57.8,22.5,112.1,63.4,153c40.9,40.9,95.2,63.4,153,63.4\r\n-\t\tc57.8,0,112.1-22.5,153-63.4c40.9-40.9,63.4-95.2,63.4-153c0-57.8-22.5-112.1-63.4-153C409.8,227.1,355.4,204.6,297.6,204.6z\"/>\r\n-</g>\r\n-<polygon points=\"130.1,240.3 61.3,420.9 297.6,420.9 297.6,184.6 \"/>\r\n-<polygon points=\"117,588.5 297.6,657.3 297.6,420.9 61.3,420.9 \"/>\r\n-<polygon points=\"465.2,601.6 534,420.9 297.6,420.9 297.6,657.3 \"/>\r\n-<polygon points=\"478.3,253.4 297.6,184.6 297.6,420.9 534,420.9 \"/>\r\n-<path fill=\"#FFFFFF\" d=\"M293.5,452.6h99.6c14.9,0,24.8-9.9,24.8-24.8S408,403,393.1,403h-74.8V278.2c0-14.9-9.9-24.8-24.8-24.8\r\n-\tc-14.9,0-24.8,9.9-24.8,24.8v149.6C268.7,440.2,278.7,452.6,293.5,452.6z\"/>\r\n-</svg>\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<svg\n+   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n+   xmlns:cc=\"http://creativecommons.org/ns#\"\n+   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n+   xmlns:svg=\"http://www.w3.org/2000/svg\"\n+   xmlns=\"http://www.w3.org/2000/svg\"\n+   xml:space=\"preserve\"\n+   enable-background=\"new 0 0 841.9 841.9\"\n+   viewBox=\"0 0 841.9 841.9\"\n+   y=\"0px\"\n+   x=\"0px\"\n+   id=\"Ebene_1\"\n+   version=\"1.1\"><metadata\n+     id=\"metadata15\"><rdf:RDF><cc:Work\n+         rdf:about=\"\"><dc:format>image/svg+xml</dc:format><dc:type\n+           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" /><dc:title></dc:title></cc:Work></rdf:RDF></metadata><defs\n+     id=\"defs13\" /><g\n+     id=\"g3\"><path\n+       id=\"path5\"\n+       d=\"M297.6,677.3c-68.5,0-132.9-26.7-181.3-75.1S41.3,489.4,41.3,420.9s26.7-132.9,75.1-181.3c48.4-48.4,112.8-75.1,181.3-75.1   s132.9,26.7,181.3,75.1c48.4,48.4,75.1,112.8,75.1,181.3s-26.7,132.9-75.1,181.3S366.1,677.3,297.6,677.3z M297.6,204.6   c-57.8,0-112.1,22.5-153,63.4c-40.9,40.9-63.4,95.2-63.4,153c0,57.8,22.5,112.1,63.4,153c40.9,40.9,95.2,63.4,153,63.4   c57.8,0,112.1-22.5,153-63.4c40.9-40.9,63.4-95.2,63.4-153c0-57.8-22.5-112.1-63.4-153C409.8,227.1,355.4,204.6,297.6,204.6z\" /></g><path\n+     id=\"polygon7\"\n+     d=\"M 297.6 184.6 L 130.1 240.3 L 61.3 420.9 L 117 588.5 L 297.6 657.3 L 465.2 601.6 L 534 420.9 L 478.3 253.4 L 297.6 184.6 z M 293.5 253.4 C 308.4 253.4 318.3 263.3 318.3 278.2 L 318.3 403 L 393.1 403 C 408 403 417.9 412.9 417.9 427.8 C 417.9 442.7 408 452.6 393.1 452.6 L 293.5 452.6 C 278.7 452.6 268.7 440.2 268.7 427.8 L 268.7 278.2 C 268.7 263.3 278.6 253.4 293.5 253.4 z \" /></svg>\n\\ No newline at end of file"
      },
      {
        "sha": "373c91f0c6cff01572c38aac5276788c39f4a047",
        "filename": "src/qt/res/src/qt.svg",
        "status": "modified",
        "additions": 26,
        "deletions": 25,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/914286757268b3c0566e4de5bae36809937c4d6f/src/qt/res/src/qt.svg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/914286757268b3c0566e4de5bae36809937c4d6f/src/qt/res/src/qt.svg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/src/qt.svg?ref=914286757268b3c0566e4de5bae36809937c4d6f",
        "patch": "@@ -1,25 +1,26 @@\n-<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n-<!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\r\n-<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\r\n-<svg version=\"1.1\" id=\"Ebene_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\r\n-\t viewBox=\"0 0 841.9 595.3\" enable-background=\"new 0 0 841.9 595.3\" xml:space=\"preserve\">\r\n-<g>\r\n-\t<path d=\"M182.8,310c0-74.4,0-148.8,0-220.7c0-19.8,5-39.7,19.8-54.6c12.4-12.4,27.3-17.4,44.6-19.8c37.2-5,74.4,2.5,109.1,7.4\r\n-\t\tC428.4,34.7,497.8,44.6,569.8,57c27.3,5,57,9.9,84.3,12.4c7.4,0,5,5,5,9.9c0,91.8,0,181.1,0,272.8c0,32.2,0,64.5,0,99.2\r\n-\t\tc0,14.9-5,29.8-12.4,44.6c-9.9,14.9-22.3,22.3-39.7,27.3c-69.4,12.4-138.9,22.3-208.3,34.7c-57,9.9-114.1,19.8-171.1,29.8\r\n-\t\tc-2.5,0-5,0-7.4-2.5c-12.4-14.9-22.3-24.8-32.2-34.7c-2.5-2.5-2.5-7.4-2.5-9.9c0-71.9,0-143.9,0-215.8\r\n-\t\tC182.8,320,182.8,315,182.8,310z M430.9,436.5c9.9-7.4,19.8-12.4,29.8-19.8c14.9-14.9,24.8-32.2,29.8-54.6\r\n-\t\tc12.4-54.6,14.9-111.6,0-166.2c-12.4-47.1-42.2-74.4-84.3-79.4c-37.2-2.5-67,7.4-86.8,39.7c-7.4,14.9-12.4,29.8-14.9,44.6\r\n-\t\tc-9.9,39.7-9.9,81.9-5,121.5c2.5,22.3,7.4,44.6,17.4,67c12.4,24.8,29.8,42.2,54.6,49.6c2.5,0,5,2.5,5,5c5,12.4,7.4,22.3,12.4,34.7\r\n-\t\ts17.4,19.8,32.2,22.3c14.9,2.5,27.3,2.5,42.2,0c2.5,0,2.5-2.5,2.5-2.5c0-9.9,0-22.3,0-32.2C438.3,461.3,433.3,456.4,430.9,436.5z\r\n-\t\t M505.3,191c0,12.4,0,22.3,0,34.7c0,2.5,2.5,2.5,5,2.5c5,0,7.4,0,12.4,0c0,2.5,0,5,0,9.9c0,44.6,0,86.8,0,131.5\r\n-\t\tc0,7.4,0,17.4,2.5,24.8c2.5,12.4,12.4,22.3,24.8,24.8c19.8,5,37.2-2.5,54.6-9.9l2.5-2.5c0-9.9,0-19.8,0-29.8\r\n-\t\tc-7.4,2.5-14.9,5-22.3,5s-12.4-2.5-14.9-9.9c0-5-2.5-9.9-2.5-14.9c0-39.7,0-79.4,0-119.1c0-2.5,0-5,0-7.4c9.9,0,19.8,0,29.8,2.5\r\n-\t\tc5,0,7.4-2.5,7.4-7.4c0-7.4,0-14.9,0-22.3c0-5-2.5-7.4-7.4-7.4c-7.4,0-14.9-2.5-22.3-2.5c-5,0-7.4-2.5-7.4-7.4\r\n-\t\tc0-14.9,0-29.8,0-42.2c0-5-2.5-5-5-7.4c-5,0-12.4,0-17.4-2.5s-7.4,0-9.9,7.4c-2.5,17.4-7.4,32.2-12.4,49.6\r\n-\t\tC520.2,191,512.7,191,505.3,191z\"/>\r\n-\t<path d=\"M443.3,277.8c-2.5,27.3-5,57-9.9,84.3c0,7.4-5,17.4-9.9,24.8c-12.4,17.4-32.2,14.9-44.6-2.5c-9.9-14.9-12.4-32.2-14.9-49.6\r\n-\t\tc-5-42.2-5-81.9,0-124c5-12.4,7.4-24.8,14.9-37.2c12.4-17.4,34.7-17.4,47.1-2.5c2.5,5,7.4,9.9,7.4,14.9c2.5,9.9,5,19.8,7.4,32.2\r\n-\t\tc2.5,9.9,2.5,22.3,2.5,34.7C440.8,260.4,440.8,270.4,443.3,277.8L443.3,277.8z\"/>\r\n-</g>\r\n-</svg>\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<svg\n+   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n+   xmlns:cc=\"http://creativecommons.org/ns#\"\n+   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n+   xmlns:svg=\"http://www.w3.org/2000/svg\"\n+   xmlns=\"http://www.w3.org/2000/svg\"\n+   version=\"1.1\"\n+   id=\"Ebene_1\"\n+   x=\"0px\"\n+   y=\"0px\"\n+   viewBox=\"0 0 609.4 609.4\"\n+   enable-background=\"new 0 0 841.9 595.3\"\n+   xml:space=\"preserve\"\n+   width=\"609.4\"\n+   height=\"609.4\"><metadata\n+     id=\"metadata13\"><rdf:RDF><cc:Work\n+         rdf:about=\"\"><dc:format>image/svg+xml</dc:format><dc:type\n+           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" /><dc:title></dc:title></cc:Work></rdf:RDF></metadata><defs\n+     id=\"defs11\" /><g\n+     id=\"g4151\"\n+     transform=\"matrix(2.553,0,0,2.553,-2149,281.5)\"><path\n+       id=\"path26\"\n+       transform=\"matrix(0.3917,0,0,0.3917,841.8,-110.3)\"\n+       d=\"M 153.7 16.9 C 115 16.44 69.7 31.67 67.96 86.81 L 67.96 550.7 L 105 592.4 L 495.9 526.7 C 521.4 522.1 541.9 490.2 541.9 455.9 L 541.9 77.77 L 183.4 18.97 C 179.4 18.3 161.4 17 157.5 16.99 C 156.2 16.94 155 16.91 153.7 16.9 z M 273.5 124.1 C 278.1 124.1 282.7 124.3 287.3 124.9 L 287.3 125 C 320 128.8 343.7 144.2 359.3 170.9 C 374.6 197.1 382 234.6 382 284 C 382 329.2 376.4 364.7 365.4 390.7 C 354.2 417.2 337.1 434.6 313.4 442.8 C 315.9 455 319.5 463.2 324.1 467.5 C 326.9 469.8 330.7 471.4 335.3 471.9 L 335.6 471.9 L 336.3 471.9 L 341.5 471.9 C 343.5 471.9 344.5 472.4 348.3 471.9 L 348.3 507.9 L 332 510.2 C 327.2 510.7 322.6 510.9 318.2 510.9 C 303.9 510.9 292.4 507.6 283.5 500.5 C 272 491.3 263.6 473.4 258.2 447.1 C 233.2 441.8 213.5 425.9 200 399.1 C 186.5 372.1 179.3 332.2 179.3 280.4 C 179.3 224.5 189 183.2 207.7 157 C 223.8 134.9 245.7 124.1 273.5 124.1 z M 424.4 143.5 L 455.1 146.9 L 455.1 202.2 L 488.2 204.8 L 488.2 239.5 L 455.1 237.8 L 455.1 364.7 C 455.1 375.6 457.6 382.8 460.2 386.1 C 460.2 388.9 465.3 390.4 467.8 390.4 L 470.4 390.4 C 478 389.9 485.7 387.9 493.4 384.1 L 493.4 415.7 C 478 422.1 465.3 425.7 450 426.9 C 450 427.2 447.4 427.2 444.8 427.2 C 432.1 427.2 424.4 423.6 416.8 416.5 C 409.1 408.1 404 394.5 404 376.1 L 404 235.6 L 390.2 234.8 L 390.2 197.6 L 411.7 199.1 L 424.4 143.5 z M 284.5 166.4 C 272.5 166.4 263.3 173.3 256.9 187.3 C 250.1 202.5 246.7 233.9 246.7 281.7 C 246.7 327.6 250.1 360.3 256.9 379.5 C 263.3 397.8 273 406.8 285.8 406.8 L 287.3 406.8 C 300.1 406 309.5 397.1 316.2 380.5 C 322.6 363.9 325.6 331.5 325.6 283 C 325.6 239.4 322.6 209.5 316.2 193 C 309.8 176.4 300.1 167.5 287.3 166.4 L 284.5 166.4 z \"\n+       style=\"fill:#000000;fill-opacity:1;fill-rule:nonzero;stroke:none\" /></g></svg>\n\\ No newline at end of file"
      },
      {
        "sha": "e7fcd8214cba6dae14eb74c149db6699d4131274",
        "filename": "src/qt/res/src/transaction0.svg",
        "status": "added",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/914286757268b3c0566e4de5bae36809937c4d6f/src/qt/res/src/transaction0.svg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/914286757268b3c0566e4de5bae36809937c4d6f/src/qt/res/src/transaction0.svg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/src/transaction0.svg?ref=914286757268b3c0566e4de5bae36809937c4d6f",
        "patch": "@@ -0,0 +1,35 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<svg\n+   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n+   xmlns:cc=\"http://creativecommons.org/ns#\"\n+   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n+   xmlns:svg=\"http://www.w3.org/2000/svg\"\n+   xmlns=\"http://www.w3.org/2000/svg\"\n+   version=\"1.1\"\n+   id=\"svg4142\"\n+   viewBox=\"0 0 128 127.9\"\n+   height=\"36.12mm\"\n+   width=\"36.12mm\">\n+  <defs\n+     id=\"defs4144\" />\n+  <metadata\n+     id=\"metadata4147\">\n+    <rdf:RDF>\n+      <cc:Work\n+         rdf:about=\"\">\n+        <dc:format>image/svg+xml</dc:format>\n+        <dc:type\n+           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n+        <dc:title></dc:title>\n+      </cc:Work>\n+    </rdf:RDF>\n+  </metadata>\n+  <g\n+     id=\"layer1\"\n+     transform=\"translate(-284.4,-501.6)\">\n+    <path\n+       id=\"path4792\"\n+       d=\"m 348.8,513.8 c -12.7,-0.7 -24.9,9.1 -27,21.7 -3.8,8.8 7.2,13.7 13.7,9.2 3.1,-7.5 9.4,-17.9 18.9,-11.6 9.7,6.1 2.1,17.6 -3,24.1 -6.1,7.8 -11.4,14.8 -8.9,23 5.4,17.7 10.8,3.7 12.8,-0.1 4.3,-8.2 6,-8.8 11.5,-16.1 6.4,-8.6 11.6,-19.9 7.7,-30.8 -2.8,-11.5 -13.9,-19.9 -25.7,-19.4 z m -0.7,84.7 c -11.4,2.4 -9.1,19.5 2.7,17.1 11.8,-2.4 8.7,-19.5 -2.7,-17.1 z\"\n+       style=\"fill:#000000\" />\n+  </g>\n+</svg>"
      }
    ]
  },
  {
    "sha": "df9c2ee1c9c02b79ccbb6cbae03096c3f9af23c7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZjljMmVlMWM5YzAyYjc5Y2NiYjZjYmFlMDMwOTZjM2Y5YWYyM2M3",
    "commit": {
      "author": {
        "name": "Marco",
        "email": "falke.marco@gmail.com",
        "date": "2015-08-04T10:08:32Z"
      },
      "committer": {
        "name": "Marco",
        "email": "falke.marco@gmail.com",
        "date": "2015-08-04T14:53:30Z"
      },
      "message": "[Qt] replace wifi icon with network symbol",
      "tree": {
        "sha": "389bf84d031137d07371433549b02eaa068b7f70",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/389bf84d031137d07371433549b02eaa068b7f70"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df9c2ee1c9c02b79ccbb6cbae03096c3f9af23c7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df9c2ee1c9c02b79ccbb6cbae03096c3f9af23c7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/df9c2ee1c9c02b79ccbb6cbae03096c3f9af23c7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df9c2ee1c9c02b79ccbb6cbae03096c3f9af23c7/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "914286757268b3c0566e4de5bae36809937c4d6f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/914286757268b3c0566e4de5bae36809937c4d6f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/914286757268b3c0566e4de5bae36809937c4d6f"
      }
    ],
    "stats": {
      "total": 472,
      "additions": 377,
      "deletions": 95
    },
    "files": [
      {
        "sha": "b5a033dd79ad7f572113e4ccf1e931448ad8e7a8",
        "filename": "doc/assets-attribution.md",
        "status": "modified",
        "additions": 46,
        "deletions": 25,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df9c2ee1c9c02b79ccbb6cbae03096c3f9af23c7/doc/assets-attribution.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df9c2ee1c9c02b79ccbb6cbae03096c3f9af23c7/doc/assets-attribution.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/assets-attribution.md?ref=df9c2ee1c9c02b79ccbb6cbae03096c3f9af23c7",
        "patch": "@@ -10,37 +10,58 @@ The following is a list of assets used in the bitcoin source and their proper at\n * Site: [https://github.com/stephenhutchings/typicons.font](https://github.com/stephenhutchings/typicons.font)\n \n ### Assets Used\n-\tsrc/qt/res/icons/add.png, src/qt/res/icons/address-book.png,\n-\tsrc/qt/res/icons/configure.png, src/qt/res/icons/connect4.png,\n-    src/qt/res/icons/debugwindow.png, src/qt/res/icons/edit.png,\n-    src/qt/res/icons/exitcopy.png, src/qt/res/icons/editpaste.png,\n-    src/qt/res/icons/export.png, src/qt/res/icons/eye.png,\n-    src/qt/res/icons/filesave.png, src/qt/res/icons/history.png,\n-    src/qt/res/icons/info.png, src/qt/res/icons/key.png,\n-    src/qt/res/icons/lock_*.png, src/qt/res/icons/open.png,\n-    src/qt/res/icons/overview.png, src/qt/res/icons/quit.png,\n-    src/qt/res/icons/receive.png, src/qt/res/icons/remove.png,\n-    src/qt/res/icons/send.png, src/qt/res/icons/synced.png,\n-    src/qt/res/icons/transaction*.png, src/qt/res/icons/tx_output.png,\n+    src/qt/res/icons/add.png\n+    src/qt/res/icons/address-book.png,\n+    src/qt/res/icons/configure.png\n+    src/qt/res/icons/debugwindow.png\n+    src/qt/res/icons/edit.png,\n+    src/qt/res/icons/exitcopy.png\n+    src/qt/res/icons/editpaste.png,\n+    src/qt/res/icons/export.png\n+    src/qt/res/icons/eye.png,\n+    src/qt/res/icons/filesave.png\n+    src/qt/res/icons/history.png,\n+    src/qt/res/icons/info.png\n+    src/qt/res/icons/key.png,\n+    src/qt/res/icons/lock_*.png\n+    src/qt/res/icons/open.png,\n+    src/qt/res/icons/overview.png\n+    src/qt/res/icons/quit.png,\n+    src/qt/res/icons/receive.png\n+    src/qt/res/icons/remove.png,\n+    src/qt/res/icons/send.png\n+    src/qt/res/icons/synced.png,\n+    src/qt/res/icons/transaction*.png\n+    src/qt/res/icons/tx_output.png,\n     src/qt/res/icons/warning.png\n \n-Jonas Schnelli\n+Other\n -----------------------\n \n ### Info\n-* Designer: Jonas Schnelli\n-* Bitcoin Icon: (based on the original bitcoin logo from Bitboy)\n+* Designer: Jonas Schnelli, Bitboy, Stephen Hutchings, Marco Falke\n+* Bitcoin Icon: Based on the original bitcoin logo from Bitboy\n+* Network connection icon: Inspired by flow-merge.svg from Stephen Hutchings\n * Some icons are based on Stephan Hutchings Typicons\n * License: MIT\n \n ### Assets Used\n-    src/qt/res/icons/about.png, src/qt/res/icons/about_qt.png,\n-    src/qt/res/icons/bitcoin.icns, src/qt/res/icons/bitcoin.ico,\n-    src/qt/res/icons/bitcoin.png, src/qt/res/icons/clock*.png,\n-    src/qt/res/icons/connect[0-3].png, src/qt/res/icons/eye_minus.png,\n-    src/qt/res/icons/eye_plus.png, src/qt/res/icons/verify.png,\n-    src/qt/res/icons/tx_inout.png, src/qt/res/icons/tx_input.png,\n-    src/qt/res/src/verify.svg, src/qt/res/src/bitcoin.svg,\n-    src/qt/res/src/clock*.svg, src/qt/res/src/connect*.svg,\n-    src/qt/res/src/mine.svg, src/qt/res/src/qt.svg, src/qt/res/src/tx*.svg,\n-    src/qt/res/src/verify.svg,\n+    src/qt/res/icons/about.png\n+    src/qt/res/icons/about_qt.png,\n+    src/qt/res/icons/bitcoin.icns\n+    src/qt/res/icons/bitcoin.ico,\n+    src/qt/res/icons/bitcoin.png\n+    src/qt/res/icons/clock*.png,\n+    src/qt/res/icons/connect*.png\n+    src/qt/res/icons/eye_minus.png,\n+    src/qt/res/icons/eye_plus.png\n+    src/qt/res/icons/verify.png,\n+    src/qt/res/icons/tx_inout.png\n+    src/qt/res/icons/tx_input.png,\n+    src/qt/res/src/bitcoin.svg,\n+    src/qt/res/src/clock*.svg\n+    src/qt/res/src/connect*.svg,\n+    src/qt/res/src/mine.svg\n+    src/qt/res/src/qt.svg\n+    src/qt/res/src/tx*.svg,\n+    src/qt/res/src/verify.svg"
      },
      {
        "sha": "ef708d81fb24ad0272de7cc4afcca7caf18aef13",
        "filename": "src/qt/res/icons/connect0.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df9c2ee1c9c02b79ccbb6cbae03096c3f9af23c7/src/qt/res/icons/connect0.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df9c2ee1c9c02b79ccbb6cbae03096c3f9af23c7/src/qt/res/icons/connect0.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/connect0.png?ref=df9c2ee1c9c02b79ccbb6cbae03096c3f9af23c7"
      },
      {
        "sha": "ed358e6f8ef40b106cba3201859108a98a8d384f",
        "filename": "src/qt/res/icons/connect1.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df9c2ee1c9c02b79ccbb6cbae03096c3f9af23c7/src/qt/res/icons/connect1.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df9c2ee1c9c02b79ccbb6cbae03096c3f9af23c7/src/qt/res/icons/connect1.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/connect1.png?ref=df9c2ee1c9c02b79ccbb6cbae03096c3f9af23c7"
      },
      {
        "sha": "3bbb0d395c5cbbc226007dcdcf7318575cf842f1",
        "filename": "src/qt/res/icons/connect2.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df9c2ee1c9c02b79ccbb6cbae03096c3f9af23c7/src/qt/res/icons/connect2.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df9c2ee1c9c02b79ccbb6cbae03096c3f9af23c7/src/qt/res/icons/connect2.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/connect2.png?ref=df9c2ee1c9c02b79ccbb6cbae03096c3f9af23c7"
      },
      {
        "sha": "0db99ad8d30458c3641d931213b9c4b564293ce6",
        "filename": "src/qt/res/icons/connect3.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df9c2ee1c9c02b79ccbb6cbae03096c3f9af23c7/src/qt/res/icons/connect3.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df9c2ee1c9c02b79ccbb6cbae03096c3f9af23c7/src/qt/res/icons/connect3.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/connect3.png?ref=df9c2ee1c9c02b79ccbb6cbae03096c3f9af23c7"
      },
      {
        "sha": "9dd19fc2bd6596a8e339fee18d09c087d8f8e4de",
        "filename": "src/qt/res/icons/connect4.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df9c2ee1c9c02b79ccbb6cbae03096c3f9af23c7/src/qt/res/icons/connect4.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df9c2ee1c9c02b79ccbb6cbae03096c3f9af23c7/src/qt/res/icons/connect4.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/connect4.png?ref=df9c2ee1c9c02b79ccbb6cbae03096c3f9af23c7"
      },
      {
        "sha": "7d2afac6227a87b1d4fa8abb65d66d4b3681b067",
        "filename": "src/qt/res/src/connect-0.svg",
        "status": "modified",
        "additions": 66,
        "deletions": 11,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df9c2ee1c9c02b79ccbb6cbae03096c3f9af23c7/src/qt/res/src/connect-0.svg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df9c2ee1c9c02b79ccbb6cbae03096c3f9af23c7/src/qt/res/src/connect-0.svg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/src/connect-0.svg?ref=df9c2ee1c9c02b79ccbb6cbae03096c3f9af23c7",
        "patch": "@@ -1,11 +1,66 @@\n-<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n-<!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\r\n-<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\r\n-<svg version=\"1.1\" id=\"Ebene_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\r\n-\t viewBox=\"0 0 24 24\" enable-background=\"new 0 0 24 24\" xml:space=\"preserve\">\r\n-<path fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M13.4,19.4c0.8-0.8,0.8-2,0-2.8c-0.8-0.8-2-0.8-2.8,0\r\n-\tc-0.8,0.8-0.8,2.1,0,2.8C11.4,20.2,12.6,20.2,13.4,19.4z M7.8,15.8c-0.5,0-1-0.2-1.4-0.6c-0.8-0.8-0.8-2,0-2.8\r\n-\tc3.1-3.1,8.2-3.1,11.3,0c0.8,0.8,0.8,2,0,2.8c-0.8,0.8-2,0.8-2.8,0c-1.6-1.6-4.1-1.6-5.7,0C8.8,15.6,8.3,15.8,7.8,15.8z\"/>\r\n-<path fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M20.5,11.5c-0.5,0-1-0.2-1.4-0.6C15.2,7,8.8,7,4.9,10.9\r\n-\tc-0.8,0.8-2,0.8-2.8,0c-0.8-0.8-0.8-2,0-2.8c5.5-5.5,14.3-5.5,19.8,0c0.8,0.8,0.8,2,0,2.8C21.5,11.3,21,11.5,20.5,11.5z\"/>\r\n-</svg>\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<svg\n+   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n+   xmlns:cc=\"http://creativecommons.org/ns#\"\n+   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n+   xmlns:svg=\"http://www.w3.org/2000/svg\"\n+   xmlns=\"http://www.w3.org/2000/svg\"\n+   id=\"svg2\"\n+   viewBox=\"0 0 24 24\"\n+   height=\"24\"\n+   width=\"24\"\n+   version=\"1.2\">\n+  <metadata\n+     id=\"metadata10\">\n+    <rdf:RDF>\n+      <cc:Work\n+         rdf:about=\"\">\n+        <dc:format>image/svg+xml</dc:format>\n+        <dc:type\n+           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n+        <dc:title></dc:title>\n+      </cc:Work>\n+    </rdf:RDF>\n+  </metadata>\n+  <defs\n+     id=\"defs8\" />\n+  <g\n+     id=\"g4142\"\n+     transform=\"matrix(0,-1,-1,0,23.96,24)\">\n+    <g\n+       id=\"g4210\"\n+       transform=\"matrix(-1,0,0,1,59.86,-106.6)\">\n+      <g\n+         id=\"g4289\"\n+         transform=\"matrix(-1,0,0,1,-16.98,0.8136)\">\n+        <g\n+           id=\"g4291\">\n+          <path\n+             id=\"path4293\"\n+             d=\"m -65.35,116.3 0,3 0.5,0 c 0.54,0 1,0.5 1,1 l 0,2.6 c -1.15,0.5 -2,1.6 -2,3 0,2 1.59,3.5 3.5,3.5 1.91,0 3.5,-1.5 3.5,-3.5 0,-1.4 -0.85,-2.5 -2,-3 l 0,-2.6 c 0,-2.3 -1.81,-4 -4,-4 z m 1,1.2 c 1.39,0.3 2.5,1.3 2.5,2.8 l 0,3.2 0.34,0.1 c 0.96,0.3 1.66,1.2 1.66,2.3 0,1.4 -1.11,2.5 -2.5,2.5 -1.39,0 -2.5,-1.1 -2.5,-2.5 0,-1.1 0.69,-2 1.66,-2.3 l 0.34,-0.1 0,-3.2 c 0,-0.9 -0.67,-1.5 -1.5,-1.8 z\"\n+             style=\"color:#000000;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:medium;line-height:normal;font-family:sans-serif;text-indent:0;text-align:start;text-decoration:none;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000000;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;baseline-shift:baseline;text-anchor:start;white-space:normal;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;fill:#000000;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate\" />\n+          <g\n+             style=\"fill:#969696;fill-opacity:1\"\n+             id=\"g4295\">\n+            <path\n+               id=\"path4297\"\n+               d=\"m -67.35,106.1 c -1.94,0 -3.5,1.6 -3.5,3.5 0,1.4 0.85,2.5 2,3 l 0,2.7 c 0,2.2 1.79,4 4,4 l 0.5,0 0,-0.5 0,-2.5 -0.5,0 c -0.55,0 -1,-0.5 -1,-1 l 0,-2.7 c 1.15,-0.5 2,-1.6 2,-3 0,-1.9 -1.57,-3.5 -3.5,-3.5 z m 0,1 c 1.37,0 2.5,1.2 2.5,2.5 0,1.1 -0.7,2 -1.66,2.3 l -0.34,0.1 0,3.3 c 0,0.9 0.67,1.5 1.5,1.8 l 0,1 c -1.38,-0.3 -2.5,-1.4 -2.5,-2.8 l 0,-3.3 -0.34,-0.1 c -0.96,-0.3 -1.66,-1.2 -1.66,-2.3 0,-1.3 1.12,-2.5 2.5,-2.5 z\"\n+               style=\"color:#000000;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:medium;line-height:normal;font-family:sans-serif;text-indent:0;text-align:start;text-decoration:none;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000000;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;baseline-shift:baseline;text-anchor:start;white-space:normal;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;fill:#000000;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate\" />\n+            <path\n+               id=\"path4299\"\n+               d=\"m -57.35,106.1 c -1.93,0 -3.5,1.6 -3.5,3.5 0,1.4 0.85,2.5 2,3 l 0,2.7 c 0,0.5 -0.45,1 -1,1 l -4.85,0 3.17,3 1.68,0 c 2.21,0 4,-1.8 4,-4 l 0,-2.7 c 1.15,-0.5 2,-1.6 2,-3 0,-1.9 -1.56,-3.5 -3.5,-3.5 z m 0,1 c 1.38,0 2.5,1.2 2.5,2.5 0,1.1 -0.7,2 -1.66,2.3 l -0.34,0.1 0,3.3 c 0,1.6 -1.35,3 -3,3 l -1.81,0 -2.04,-1 3.85,0 c 1.11,0 2,-0.9 2,-2 l 0,-3.3 -0.34,-0.1 c -0.96,-0.3 -1.66,-1.2 -1.66,-2.3 0,-1.3 1.13,-2.5 2.5,-2.5 z\"\n+               style=\"color:#000000;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:medium;line-height:normal;font-family:sans-serif;text-indent:0;text-align:start;text-decoration:none;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000000;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;baseline-shift:baseline;text-anchor:start;white-space:normal;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;fill:#000000;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate\" />\n+          </g>\n+          <path\n+             id=\"path4301\"\n+             d=\"m -69.84,116.3 c -2.19,0 -4,1.7 -4,4 l 0,2.6 c -1.14,0.6 -1.99,1.6 -1.99,3 0,2 1.6,3.5 3.51,3.5 1.91,0 3.5,-1.5 3.5,-3.5 0,-1.4 -0.85,-2.5 -2,-3 l 0,-2.6 c 0,-0.5 0.45,-1 1,-1 l 5.01,0 -3.36,-3 z m 0,1 1.84,0 2.19,1 -4.01,0 c -1.11,0 -2,0.9 -2,2 l 0,3.2 0.34,0.1 c 0.96,0.3 1.66,1.2 1.66,2.3 0,1.4 -1.11,2.5 -2.5,2.5 -1.39,0 -2.51,-1.1 -2.51,-2.5 0,-1.1 0.7,-2 1.66,-2.3 l 0.33,-0.1 0,-0.4 0,-2.8 c 0,-1.7 1.33,-3 3,-3 z\"\n+             style=\"color:#000000;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:medium;line-height:normal;font-family:sans-serif;text-indent:0;text-align:start;text-decoration:none;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000000;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;baseline-shift:baseline;text-anchor:start;white-space:normal;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;fill:#000000;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate\" />\n+        </g>\n+      </g>\n+    </g>\n+    <path\n+       id=\"path4165\"\n+       d=\"m 12,8.77 c -0.84,0 -1.66,0.341 -2.254,0.937 -0.599,0.593 -0.942,1.403 -0.945,2.253 0,0.85 0.337,1.67 0.933,2.26 a 0.6001,0.6001 0 0 0 0,0 c 0.594,0.6 1.424,0.94 2.264,0.94 0.84,0 1.67,-0.34 2.26,-0.94 0.6,-0.59 0.94,-1.41 0.94,-2.26 0,-0.84 -0.34,-1.66 -0.95,-2.253 C 13.66,9.111 12.84,8.77 12,8.77 Z\"\n+       style=\"opacity:1;fill:#000000;fill-opacity:1;stroke:none;stroke-width:10;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n+  </g>\n+</svg>"
      },
      {
        "sha": "d17928c97d01edba81c078ccd3756d4721df8697",
        "filename": "src/qt/res/src/connect-1.svg",
        "status": "modified",
        "additions": 69,
        "deletions": 21,
        "changes": 90,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df9c2ee1c9c02b79ccbb6cbae03096c3f9af23c7/src/qt/res/src/connect-1.svg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df9c2ee1c9c02b79ccbb6cbae03096c3f9af23c7/src/qt/res/src/connect-1.svg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/src/connect-1.svg?ref=df9c2ee1c9c02b79ccbb6cbae03096c3f9af23c7",
        "patch": "@@ -1,21 +1,69 @@\n-<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n-<!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\r\n-<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\r\n-<svg version=\"1.1\" id=\"Ebene_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\r\n-\t viewBox=\"0 0 24 24\" enable-background=\"new 0 0 24 24\" xml:space=\"preserve\">\r\n-<g>\r\n-\t<path d=\"M12,11c1.9,0,3.6,0.7,4.9,2c0.4,0.4,0.4,1,0,1.4c-0.2,0.2-0.4,0.3-0.7,0.3c-0.3,0-0.5-0.1-0.7-0.3C14.6,13.5,13.3,13,12,13\r\n-\t\tc-1.3,0-2.6,0.5-3.5,1.5c-0.2,0.2-0.4,0.3-0.7,0.3c-0.3,0-0.5-0.1-0.7-0.3c-0.4-0.4-0.4-1,0-1.4C8.4,11.7,10.1,11,12,11 M12,17\r\n-\t\tc0.3,0,0.5,0.1,0.7,0.3c0.2,0.2,0.3,0.4,0.3,0.7s-0.1,0.5-0.3,0.7C12.5,18.9,12.3,19,12,19c-0.3,0-0.5-0.1-0.7-0.3\r\n-\t\tC11.1,18.5,11,18.3,11,18c0-0.3,0.1-0.5,0.3-0.7C11.5,17.1,11.7,17,12,17 M12,10c-2,0-4.1,0.8-5.7,2.3c-0.8,0.8-0.8,2,0,2.8\r\n-\t\tc0.4,0.4,0.9,0.6,1.4,0.6c0.5,0,1-0.2,1.4-0.6C10,14.4,11,14,12,14c1,0,2,0.4,2.8,1.2c0.4,0.4,0.9,0.6,1.4,0.6s1-0.2,1.4-0.6\r\n-\t\tc0.8-0.8,0.8-2,0-2.8C16.1,10.8,14,10,12,10L12,10z M12,16c-0.5,0-1,0.2-1.4,0.6c-0.8,0.8-0.8,2.1,0,2.8C11,19.8,11.5,20,12,20\r\n-\t\tc0.5,0,1-0.2,1.4-0.6c0.8-0.8,0.8-2,0-2.8C13,16.2,12.5,16,12,16L12,16z\"/>\r\n-</g>\r\n-<g>\r\n-\t<path d=\"M12,5c3.5,0,6.7,1.3,9.2,3.8c0.4,0.4,0.4,1,0,1.4c-0.2,0.2-0.4,0.3-0.7,0.3c-0.3,0-0.5-0.1-0.7-0.3C17.7,8.1,14.9,7,12,7\r\n-\t\tc-2.9,0-5.7,1.1-7.8,3.2c-0.2,0.2-0.4,0.3-0.7,0.3c-0.3,0-0.5-0.1-0.7-0.3c-0.4-0.4-0.4-1,0-1.4C5.3,6.4,8.5,5,12,5 M12,4\r\n-\t\tC8.4,4,4.8,5.4,2.1,8.1c-0.8,0.8-0.8,2,0,2.8c0.4,0.4,0.9,0.6,1.4,0.6c0.5,0,1-0.2,1.4-0.6C6.9,9,9.4,8,12,8c2.6,0,5.1,1,7.1,2.9\r\n-\t\tc0.4,0.4,0.9,0.6,1.4,0.6c0.5,0,1-0.2,1.4-0.6c0.8-0.8,0.8-2,0-2.8C19.2,5.4,15.6,4,12,4L12,4z\"/>\r\n-</g>\r\n-</svg>\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<svg\n+   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n+   xmlns:cc=\"http://creativecommons.org/ns#\"\n+   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n+   xmlns:svg=\"http://www.w3.org/2000/svg\"\n+   xmlns=\"http://www.w3.org/2000/svg\"\n+   version=\"1.2\"\n+   width=\"24\"\n+   height=\"24\"\n+   viewBox=\"0 0 24 24\"\n+   id=\"svg2\">\n+  <metadata\n+     id=\"metadata10\">\n+    <rdf:RDF>\n+      <cc:Work\n+         rdf:about=\"\">\n+        <dc:format>image/svg+xml</dc:format>\n+        <dc:type\n+           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n+        <dc:title></dc:title>\n+      </cc:Work>\n+    </rdf:RDF>\n+  </metadata>\n+  <defs\n+     id=\"defs8\" />\n+  <g\n+     id=\"g4210\"\n+     transform=\"translate(0,0.25)\">\n+    <g\n+       id=\"g4142\"\n+       transform=\"matrix(0,-1,-1,0,23.96,23.75)\">\n+      <g\n+         id=\"g4213\"\n+         transform=\"matrix(-1,0,0,1,59.86,-106.6)\">\n+        <g\n+           id=\"g4289\"\n+           transform=\"matrix(-1,0,0,1,-16.98,0.8136)\">\n+          <g\n+             id=\"g4291\">\n+            <path\n+               style=\"color:#000000;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:medium;line-height:normal;font-family:sans-serif;text-indent:0;text-align:start;text-decoration:none;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000000;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;baseline-shift:baseline;text-anchor:start;white-space:normal;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate\"\n+               d=\"m -65.35,116.3 0,3 0.5,0 c 0.54,0 1,0.5 1,1 l 0,2.6 c -1.15,0.5 -2,1.6 -2,3 0,2 1.59,3.5 3.5,3.5 1.91,0 3.5,-1.5 3.5,-3.5 0,-1.4 -0.85,-2.5 -2,-3 l 0,-2.6 c 0,-2.3 -1.81,-4 -4,-4 z m 1,1.2 c 1.39,0.3 2.5,1.3 2.5,2.8 l 0,3.2 0.34,0.1 c 0.96,0.3 1.66,1.2 1.66,2.3 0,1.4 -1.11,2.5 -2.5,2.5 -1.39,0 -2.5,-1.1 -2.5,-2.5 0,-1.1 0.69,-2 1.66,-2.3 l 0.34,-0.1 0,-3.2 c 0,-0.9 -0.67,-1.5 -1.5,-1.8 z\"\n+               id=\"path4293\" />\n+            <g\n+               id=\"g4295\">\n+              <path\n+                 style=\"color:#000000;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:medium;line-height:normal;font-family:sans-serif;text-indent:0;text-align:start;text-decoration:none;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000000;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;baseline-shift:baseline;text-anchor:start;white-space:normal;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate\"\n+                 d=\"m -67.35,106.1 c -1.94,0 -3.5,1.6 -3.5,3.5 0,1.4 0.85,2.5 2,3 l 0,2.7 c 0,2.2 1.79,4 4,4 l 0.5,0 0,-0.5 0,-2.5 -0.5,0 c -0.55,0 -1,-0.5 -1,-1 l 0,-2.7 c 1.15,-0.5 2,-1.6 2,-3 0,-1.9 -1.57,-3.5 -3.5,-3.5 z m 0,1 c 1.37,0 2.5,1.2 2.5,2.5 0,1.1 -0.7,2 -1.66,2.3 l -0.34,0.1 0,3.3 c 0,0.9 0.67,1.5 1.5,1.8 l 0,1 c -1.38,-0.3 -2.5,-1.4 -2.5,-2.8 l 0,-3.3 -0.34,-0.1 c -0.96,-0.3 -1.66,-1.2 -1.66,-2.3 0,-1.3 1.12,-2.5 2.5,-2.5 z\"\n+                 id=\"path4297\" />\n+              <path\n+                 id=\"path4145\"\n+                 d=\"m -57.35,106 c -1.99,0 -3.6,1.7 -3.6,3.6 0,1.4 0.83,2.6 2,3.2 l 0,2.5 c 0,0.5 -0.41,0.9 -0.9,0.9 l -4.35,0 a 0.6001,0.6001 0 0 0 -0.6,0.6 l 0,2 a 0.6001,0.6001 0 0 0 0.6,0.6 l 4.35,0 c 2.26,0 4.1,-1.9 4.1,-4.1 l 0,-2.5 c 1.17,-0.6 2,-1.8 2,-3.2 0,-1.9 -1.6,-3.6 -3.6,-3.6 z\"\n+                 style=\"\" />\n+            </g>\n+            <path\n+               style=\"color:#000000;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:medium;line-height:normal;font-family:sans-serif;text-indent:0;text-align:start;text-decoration:none;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000000;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;baseline-shift:baseline;text-anchor:start;white-space:normal;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate\"\n+               d=\"m -69.84,116.3 c -2.19,0 -4,1.7 -4,4 l 0,2.6 c -1.14,0.6 -1.99,1.6 -1.99,3 0,2 1.6,3.5 3.51,3.5 1.91,0 3.5,-1.5 3.5,-3.5 0,-1.4 -0.85,-2.5 -2,-3 l 0,-2.6 c 0,-0.5 0.45,-1 1,-1 l 5.01,0 -3.34,-3 z m 0,1 2.02,0 2.01,1 -4.01,0 c -1.11,0 -2,0.9 -2,2 l 0,3.2 0.34,0.1 c 0.96,0.3 1.66,1.2 1.66,2.3 0,1.4 -1.11,2.5 -2.5,2.5 -1.39,0 -2.51,-1.1 -2.51,-2.5 0,-1.1 0.7,-2 1.66,-2.3 l 0.33,-0.1 0,-0.4 0,-2.8 c 0,-1.7 1.33,-3 3,-3 z\"\n+               id=\"path4301\" />\n+          </g>\n+        </g>\n+      </g>\n+      <path\n+         id=\"path4173\"\n+         d=\"m 12,8.764 c -0.84,0 -1.67,0.336 -2.264,0.931 a 0.6001,0.6001 0 0 0 -0,0 C 9.138,10.29 8.802,11.11 8.801,11.96 c 0,0.85 0.337,1.67 0.933,2.26 a 0.6001,0.6001 0 0 0 0,0 c 0.594,0.6 1.424,0.94 2.264,0.94 0.84,0 1.67,-0.34 2.26,-0.94 0.6,-0.59 0.94,-1.41 0.94,-2.26 0,-0.84 -0.34,-1.67 -0.94,-2.265 C 13.67,9.1 12.84,8.764 12,8.764 Z\"\n+         style=\"opacity:1;fill:#000000;fill-opacity:1;stroke:none;stroke-width:10;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n+    </g>\n+  </g>\n+</svg>"
      },
      {
        "sha": "841ca6071dd6fac2803e7fc6d0142fda08c8f3d6",
        "filename": "src/qt/res/src/connect-2.svg",
        "status": "modified",
        "additions": 59,
        "deletions": 22,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df9c2ee1c9c02b79ccbb6cbae03096c3f9af23c7/src/qt/res/src/connect-2.svg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df9c2ee1c9c02b79ccbb6cbae03096c3f9af23c7/src/qt/res/src/connect-2.svg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/src/connect-2.svg?ref=df9c2ee1c9c02b79ccbb6cbae03096c3f9af23c7",
        "patch": "@@ -1,22 +1,59 @@\n-<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n-<!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\r\n-<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\r\n-<svg version=\"1.1\" id=\"Ebene_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\r\n-\t viewBox=\"0 0 24 24\" enable-background=\"new 0 0 24 24\" xml:space=\"preserve\">\r\n-<path d=\"M13.4,19.4c0.8-0.8,0.8-2,0-2.8c-0.8-0.8-2-0.8-2.8,0c-0.8,0.8-0.8,2.1,0,2.8C11.4,20.2,12.6,20.2,13.4,19.4z\"/>\r\n-<g>\r\n-\t<path d=\"M12,11c1.9,0,3.6,0.7,4.9,2c0.4,0.4,0.4,1,0,1.4c-0.2,0.2-0.4,0.3-0.7,0.3c-0.3,0-0.5-0.1-0.7-0.3C14.6,13.5,13.3,13,12,13\r\n-\t\tc-1.3,0-2.6,0.5-3.5,1.5c-0.2,0.2-0.4,0.3-0.7,0.3c-0.3,0-0.5-0.1-0.7-0.3c-0.4-0.4-0.4-1,0-1.4C8.4,11.7,10.1,11,12,11 M12,17\r\n-\t\tc0.3,0,0.5,0.1,0.7,0.3c0.2,0.2,0.3,0.4,0.3,0.7s-0.1,0.5-0.3,0.7C12.5,18.9,12.3,19,12,19c-0.3,0-0.5-0.1-0.7-0.3\r\n-\t\tC11.1,18.5,11,18.3,11,18c0-0.3,0.1-0.5,0.3-0.7C11.5,17.1,11.7,17,12,17 M12,10c-2,0-4.1,0.8-5.7,2.3c-0.8,0.8-0.8,2,0,2.8\r\n-\t\tc0.4,0.4,0.9,0.6,1.4,0.6c0.5,0,1-0.2,1.4-0.6C10,14.4,11,14,12,14c1,0,2,0.4,2.8,1.2c0.4,0.4,0.9,0.6,1.4,0.6s1-0.2,1.4-0.6\r\n-\t\tc0.8-0.8,0.8-2,0-2.8C16.1,10.8,14,10,12,10L12,10z M12,16c-0.5,0-1,0.2-1.4,0.6c-0.8,0.8-0.8,2.1,0,2.8C11,19.8,11.5,20,12,20\r\n-\t\tc0.5,0,1-0.2,1.4-0.6c0.8-0.8,0.8-2,0-2.8C13,16.2,12.5,16,12,16L12,16z\"/>\r\n-</g>\r\n-<g>\r\n-\t<path d=\"M12,5c3.5,0,6.7,1.3,9.2,3.8c0.4,0.4,0.4,1,0,1.4c-0.2,0.2-0.4,0.3-0.7,0.3c-0.3,0-0.5-0.1-0.7-0.3C17.7,8.1,14.9,7,12,7\r\n-\t\tc-2.9,0-5.7,1.1-7.8,3.2c-0.2,0.2-0.4,0.3-0.7,0.3c-0.3,0-0.5-0.1-0.7-0.3c-0.4-0.4-0.4-1,0-1.4C5.3,6.4,8.5,5,12,5 M12,4\r\n-\t\tC8.4,4,4.8,5.4,2.1,8.1c-0.8,0.8-0.8,2,0,2.8c0.4,0.4,0.9,0.6,1.4,0.6c0.5,0,1-0.2,1.4-0.6C6.9,9,9.4,8,12,8c2.6,0,5.1,1,7.1,2.9\r\n-\t\tc0.4,0.4,0.9,0.6,1.4,0.6c0.5,0,1-0.2,1.4-0.6c0.8-0.8,0.8-2,0-2.8C19.2,5.4,15.6,4,12,4L12,4z\"/>\r\n-</g>\r\n-</svg>\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<svg\n+   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n+   xmlns:cc=\"http://creativecommons.org/ns#\"\n+   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n+   xmlns:svg=\"http://www.w3.org/2000/svg\"\n+   xmlns=\"http://www.w3.org/2000/svg\"\n+   version=\"1.2\"\n+   width=\"24\"\n+   height=\"24\"\n+   viewBox=\"0 0 24 24\"\n+   id=\"svg2\">\n+  <metadata\n+     id=\"metadata10\">\n+    <rdf:RDF>\n+      <cc:Work\n+         rdf:about=\"\">\n+        <dc:format>image/svg+xml</dc:format>\n+        <dc:type\n+           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n+        <dc:title></dc:title>\n+      </cc:Work>\n+    </rdf:RDF>\n+  </metadata>\n+  <defs\n+     id=\"defs8\" />\n+  <g\n+     id=\"g4210\"\n+     transform=\"matrix(0,1,-1,0,130.6,-35.86)\">\n+    <g\n+       id=\"g4289\"\n+       transform=\"matrix(-1,0,0,1,-16.98,0.8136)\">\n+      <g\n+         id=\"g4291\">\n+        <path\n+           style=\"color:#000000;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:medium;line-height:normal;font-family:sans-serif;text-indent:0;text-align:start;text-decoration:none;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000000;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;baseline-shift:baseline;text-anchor:start;white-space:normal;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate\"\n+           d=\"m -65.35,116.3 0,3 0.5,0 c 0.54,0 1,0.5 1,1 l 0,2.6 c -1.15,0.5 -2,1.6 -2,3 0,2 1.59,3.5 3.5,3.5 1.91,0 3.5,-1.5 3.5,-3.5 0,-1.4 -0.85,-2.5 -2,-3 l 0,-2.6 c 0,-2.3 -1.81,-4 -4,-4 z m 1,1.2 c 1.39,0.3 2.5,1.3 2.5,2.8 l 0,3.2 0.34,0.1 c 0.96,0.3 1.66,1.2 1.66,2.3 0,1.4 -1.11,2.5 -2.5,2.5 -1.39,0 -2.5,-1.1 -2.5,-2.5 0,-1.1 0.69,-2 1.66,-2.3 l 0.34,-0.1 0,-3.2 c 0,-0.9 -0.67,-1.5 -1.5,-1.8 z\"\n+           id=\"path4293\" />\n+        <g\n+           id=\"g4295\">\n+          <path\n+             style=\"color:#000000;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:medium;line-height:normal;font-family:sans-serif;text-indent:0;text-align:start;text-decoration:none;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000000;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;baseline-shift:baseline;text-anchor:start;white-space:normal;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate\"\n+             d=\"m -67.35,106.1 c -1.94,0 -3.5,1.6 -3.5,3.5 0,1.4 0.85,2.5 2,3 l 0,2.7 c 0,2.2 1.79,4 4,4 l 0.5,0 0,-0.5 0,-2.5 -0.5,0 c -0.55,0 -1,-0.5 -1,-1 l 0,-2.7 c 1.15,-0.5 2,-1.6 2,-3 0,-1.9 -1.57,-3.5 -3.5,-3.5 z m 0,1 c 1.37,0 2.5,1.2 2.5,2.5 0,1.1 -0.7,2 -1.66,2.3 l -0.34,0.1 0,3.3 c 0,0.9 0.67,1.5 1.5,1.8 l 0,1 c -1.38,-0.3 -2.5,-1.4 -2.5,-2.8 l 0,-3.3 -0.34,-0.1 c -0.96,-0.3 -1.66,-1.2 -1.66,-2.3 0,-1.3 1.12,-2.5 2.5,-2.5 z\"\n+             id=\"path4297\" />\n+          <path\n+             id=\"path4142\"\n+             d=\"m -57.35,106 c -1.99,0 -3.6,1.7 -3.6,3.6 0,1.4 0.83,2.6 2,3.2 l 0,2.5 c 0,0.5 -0.41,0.9 -0.9,0.9 l -4.35,0 a 0.6001,0.6001 0 0 0 -0.6,0.6 l 0,2 a 0.6001,0.6001 0 0 0 0.6,0.6 l 4.35,0 c 2.26,0 4.1,-1.9 4.1,-4.1 l 0,-2.5 c 1.17,-0.6 2,-1.8 2,-3.2 0,-1.9 -1.6,-3.6 -3.6,-3.6 z\" />\n+        </g>\n+        <path\n+           id=\"path4148\"\n+           d=\"m -69.84,116.2 c -2.24,0 -4.1,1.8 -4.1,4.1 l 0,2.5 c -1.17,0.5 -1.99,1.7 -1.99,3.1 0,2 1.64,3.6 3.61,3.6 1.96,0 3.6,-1.6 3.6,-3.6 0,-1.4 -0.83,-2.6 -2,-3.2 l 0,-2.4 c 0,-0.5 0.41,-0.9 0.9,-0.9 l 4.51,0 a 0.6001,0.6001 0 0 0 0.6,-0.6 l 0,-2 a 0.6001,0.6001 0 0 0 -0.6,-0.6 l -4.53,0 z\" />\n+      </g>\n+    </g>\n+    <path\n+       id=\"path4170\"\n+       d=\"m 47.86,115.4 c -0.84,0 -1.65,0.4 -2.24,1 -0.64,0.5 -0.96,1.3 -0.96,2.2 0,0.9 0.32,1.7 0.96,2.2 0.59,0.6 1.4,1 2.24,1 0.84,0 1.65,-0.4 2.24,-1 0.64,-0.5 0.96,-1.3 0.96,-2.2 0,-0.9 -0.32,-1.7 -0.96,-2.2 -0.59,-0.6 -1.4,-1 -2.24,-1 z\"\n+       style=\"opacity:1;fill:#000000;fill-opacity:1;stroke:none;stroke-width:10;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n+  </g>\n+</svg>"
      },
      {
        "sha": "b06e67daf87e10c51009ef4d240726a81093aca5",
        "filename": "src/qt/res/src/connect-3.svg",
        "status": "modified",
        "additions": 72,
        "deletions": 16,
        "changes": 88,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df9c2ee1c9c02b79ccbb6cbae03096c3f9af23c7/src/qt/res/src/connect-3.svg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df9c2ee1c9c02b79ccbb6cbae03096c3f9af23c7/src/qt/res/src/connect-3.svg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/src/connect-3.svg?ref=df9c2ee1c9c02b79ccbb6cbae03096c3f9af23c7",
        "patch": "@@ -1,16 +1,72 @@\n-<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n-<!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\r\n-<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\r\n-<svg version=\"1.1\" id=\"Ebene_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\r\n-\t viewBox=\"0 0 24 24\" enable-background=\"new 0 0 24 24\" xml:space=\"preserve\">\r\n-<path d=\"M13.4,19.4c0.8-0.8,0.8-2,0-2.8c-0.8-0.8-2-0.8-2.8,0c-0.8,0.8-0.8,2.1,0,2.8C11.4,20.2,12.6,20.2,13.4,19.4z\"/>\r\n-<path d=\"M13.4,19.4c0.8-0.8,0.8-2,0-2.8c-0.8-0.8-2-0.8-2.8,0c-0.8,0.8-0.8,2.1,0,2.8C11.4,20.2,12.6,20.2,13.4,19.4z M7.8,15.8\r\n-\tc-0.5,0-1-0.2-1.4-0.6c-0.8-0.8-0.8-2,0-2.8c3.1-3.1,8.2-3.1,11.3,0c0.8,0.8,0.8,2,0,2.8c-0.8,0.8-2,0.8-2.8,0\r\n-\tc-1.6-1.6-4.1-1.6-5.7,0C8.8,15.6,8.3,15.8,7.8,15.8z\"/>\r\n-<g>\r\n-\t<path d=\"M12,5c3.5,0,6.7,1.3,9.2,3.8c0.4,0.4,0.4,1,0,1.4c-0.2,0.2-0.4,0.3-0.7,0.3c-0.3,0-0.5-0.1-0.7-0.3C17.7,8.1,14.9,7,12,7\r\n-\t\tc-2.9,0-5.7,1.1-7.8,3.2c-0.2,0.2-0.4,0.3-0.7,0.3c-0.3,0-0.5-0.1-0.7-0.3c-0.4-0.4-0.4-1,0-1.4C5.3,6.4,8.5,5,12,5 M12,4\r\n-\t\tC8.4,4,4.8,5.4,2.1,8.1c-0.8,0.8-0.8,2,0,2.8c0.4,0.4,0.9,0.6,1.4,0.6c0.5,0,1-0.2,1.4-0.6C6.9,9,9.4,8,12,8c2.6,0,5.1,1,7.1,2.9\r\n-\t\tc0.4,0.4,0.9,0.6,1.4,0.6c0.5,0,1-0.2,1.4-0.6c0.8-0.8,0.8-2,0-2.8C19.2,5.4,15.6,4,12,4L12,4z\"/>\r\n-</g>\r\n-</svg>\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<svg\n+   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n+   xmlns:cc=\"http://creativecommons.org/ns#\"\n+   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n+   xmlns:svg=\"http://www.w3.org/2000/svg\"\n+   xmlns=\"http://www.w3.org/2000/svg\"\n+   id=\"svg2\"\n+   viewBox=\"0 0 24 24\"\n+   height=\"24\"\n+   width=\"24\"\n+   version=\"1.2\">\n+  <metadata\n+     id=\"metadata10\">\n+    <rdf:RDF>\n+      <cc:Work\n+         rdf:about=\"\">\n+        <dc:format>image/svg+xml</dc:format>\n+        <dc:type\n+           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n+        <dc:title></dc:title>\n+      </cc:Work>\n+    </rdf:RDF>\n+  </metadata>\n+  <defs\n+     id=\"defs8\" />\n+  <g\n+     transform=\"translate(0.2636,0.29)\"\n+     id=\"g4160\">\n+    <g\n+       id=\"g4210\"\n+       transform=\"matrix(0,1,-1,0,130.3,-36.15)\">\n+      <g\n+         id=\"g4289\"\n+         transform=\"matrix(-1,0,0,1,-16.98,0.8136)\">\n+        <g\n+           id=\"g4291\">\n+          <path\n+             id=\"path4147\"\n+             d=\"m -64.85,116.2 a 0.6001,0.6001 0 0 0 -0.6,0.6 l 0,2 a 0.6001,0.6001 0 0 0 0.6,0.6 c 0.48,0 0.9,0.4 0.9,0.9 l 0,2.4 c -1.18,0.6 -2,1.8 -2,3.2 0,2 1.64,3.6 3.6,3.6 1.97,0 3.6,-1.6 3.6,-3.6 0,-1.4 -0.83,-2.6 -2,-3.2 l 0,-2.4 c 0,-2.3 -1.86,-4.1 -4.1,-4.1 z\"\n+             style=\"\" />\n+          <g\n+             id=\"g4295\">\n+            <path\n+               style=\"color:#000000;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:medium;line-height:normal;font-family:sans-serif;text-indent:0;text-align:start;text-decoration:none;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000000;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;baseline-shift:baseline;text-anchor:start;white-space:normal;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate\"\n+               d=\"m -67.35,106.1 c -1.94,0 -3.5,1.6 -3.5,3.5 0,1.4 0.85,2.5 2,3 l 0,2.7 c 0,2.2 1.79,4 4,4 l 0.5,0 0,-0.5 0,-2.5 -0.5,0 c -0.55,0 -1,-0.5 -1,-1 l 0,-2.7 c 1.15,-0.5 2,-1.6 2,-3 0,-1.9 -1.57,-3.5 -3.5,-3.5 z m 0,1 c 1.37,0 2.5,1.2 2.5,2.5 0,1.1 -0.7,2 -1.66,2.3 l -0.34,0.1 0,3.3 c 0,0.9 0.67,1.5 1.5,1.8 l 0,1 c -1.38,-0.3 -2.5,-1.4 -2.5,-2.8 l 0,-3.3 -0.34,-0.1 c -0.96,-0.3 -1.66,-1.2 -1.66,-2.3 0,-1.3 1.12,-2.5 2.5,-2.5 z\"\n+               id=\"path4297\" />\n+            <path\n+               id=\"path4145\"\n+               d=\"m -57.35,106 c -1.99,0 -3.6,1.7 -3.6,3.6 0,1.4 0.83,2.6 2,3.2 l 0,2.5 c 0,0.5 -0.41,0.9 -0.9,0.9 l -4.35,0 a 0.6001,0.6001 0 0 0 -0.6,0.6 l 0,2 a 0.6001,0.6001 0 0 0 0.6,0.6 l 4.35,0 c 2.26,0 4.1,-1.9 4.1,-4.1 l 0,-2.5 c 1.17,-0.6 2,-1.8 2,-3.2 0,-1.9 -1.6,-3.6 -3.6,-3.6 z\"\n+               style=\"\" />\n+          </g>\n+          <path\n+             id=\"path4149\"\n+             d=\"m -69.84,116.2 c -2.24,0 -4.1,1.8 -4.1,4.1 l 0,2.5 c -1.17,0.5 -1.99,1.7 -1.99,3.1 0,2 1.64,3.6 3.61,3.6 1.96,0 3.6,-1.6 3.6,-3.6 0,-1.4 -0.83,-2.6 -2,-3.2 l 0,-2.4 c 0,-0.5 0.41,-0.9 0.9,-0.9 l 4.51,0 a 0.6001,0.6001 0 0 0 0.6,-0.6 l 0,-2 a 0.6001,0.6001 0 0 0 -0.6,-0.6 l -4.53,0 z\"\n+             style=\"\" />\n+        </g>\n+      </g>\n+    </g>\n+    <g\n+       transform=\"matrix(0,1,1,0,-106.3,-36.15)\"\n+       id=\"g4142\">\n+      <g\n+         transform=\"matrix(-1,0,0,1,-16.98,0.8136)\"\n+         id=\"g4144\" />\n+    </g>\n+  </g>\n+  <path\n+     id=\"path4170\"\n+     d=\"m 15.2,12 c 0,-0.84 -0.4,-1.65 -1,-2.242 -0.5,-0.64 -1.3,-0.96 -2.2,-0.96 -0.9,0 -1.7,0.32 -2.2,0.96 -0.6,0.592 -1,1.402 -1,2.242 0,0.84 0.4,1.65 1,2.24 0.5,0.64 1.3,0.96 2.2,0.96 0.9,0 1.7,-0.32 2.2,-0.96 0.6,-0.59 1,-1.4 1,-2.24 z\"\n+     style=\"opacity:1;fill:#000000;fill-opacity:1;stroke:none;stroke-width:10;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n+</svg>"
      },
      {
        "sha": "0abc7955fdbda15c9adcbc277bb45f80f930b55b",
        "filename": "src/qt/res/src/connect-4.svg",
        "status": "added",
        "additions": 65,
        "deletions": 0,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df9c2ee1c9c02b79ccbb6cbae03096c3f9af23c7/src/qt/res/src/connect-4.svg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df9c2ee1c9c02b79ccbb6cbae03096c3f9af23c7/src/qt/res/src/connect-4.svg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/src/connect-4.svg?ref=df9c2ee1c9c02b79ccbb6cbae03096c3f9af23c7",
        "patch": "@@ -0,0 +1,65 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<svg\n+   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n+   xmlns:cc=\"http://creativecommons.org/ns#\"\n+   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n+   xmlns:svg=\"http://www.w3.org/2000/svg\"\n+   xmlns=\"http://www.w3.org/2000/svg\"\n+   version=\"1.2\"\n+   width=\"24\"\n+   height=\"24\"\n+   viewBox=\"0 0 24 24\"\n+   id=\"svg2\">\n+  <metadata\n+     id=\"metadata10\">\n+    <rdf:RDF>\n+      <cc:Work\n+         rdf:about=\"\">\n+        <dc:format>image/svg+xml</dc:format>\n+        <dc:type\n+           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n+        <dc:title></dc:title>\n+      </cc:Work>\n+    </rdf:RDF>\n+  </metadata>\n+  <defs\n+     id=\"defs8\" />\n+  <g\n+     id=\"g4142\"\n+     transform=\"matrix(0,-1,-1,0,23.96,24)\">\n+    <g\n+       transform=\"matrix(-1,0,0,1,59.86,-106.6)\"\n+       id=\"g4210\">\n+      <g\n+         transform=\"matrix(-1,0,0,1,-16.98,0.8136)\"\n+         id=\"g4289\">\n+        <g\n+           id=\"g4291\">\n+          <path\n+             id=\"path4153\"\n+             d=\"m -64.85,116.2 a 0.6001,0.6001 0 0 0 -0.6,0.6 l 0,2 a 0.6001,0.6001 0 0 0 0.6,0.6 c 0.48,0 0.9,0.4 0.9,0.9 l 0,2.4 c -1.18,0.6 -2,1.8 -2,3.2 0,2 1.64,3.6 3.6,3.6 1.97,0 3.6,-1.6 3.6,-3.6 0,-1.4 -0.83,-2.6 -2,-3.2 l 0,-2.4 c 0,-2.3 -1.86,-4.1 -4.1,-4.1 z\"\n+             style=\"\" />\n+          <g\n+             id=\"g4295\">\n+            <path\n+               id=\"path4149\"\n+               d=\"m -67.35,106 c -2,0 -3.6,1.7 -3.6,3.6 0,1.4 0.83,2.6 2,3.2 l 0,2.5 c 0,2.2 1.84,4.1 4.1,4.1 a 0.6001,0.6001 0 0 0 0.6,-0.6 l 0,-2 a 0.6001,0.6001 0 0 0 -0.6,-0.6 c -0.49,0 -0.9,-0.4 -0.9,-0.9 l 0,-2.5 c 1.17,-0.6 2,-1.8 2,-3.2 0,-1.9 -1.61,-3.6 -3.6,-3.6 z\"\n+               style=\"\" />\n+            <path\n+               id=\"path4147\"\n+               d=\"m -57.35,106 c -1.99,0 -3.6,1.7 -3.6,3.6 0,1.4 0.83,2.6 2,3.2 l 0,2.5 c 0,0.5 -0.41,0.9 -0.9,0.9 l -4.35,0 a 0.6001,0.6001 0 0 0 -0.6,0.6 l 0,2 a 0.6001,0.6001 0 0 0 0.6,0.6 l 4.35,0 c 2.26,0 4.1,-1.9 4.1,-4.1 l 0,-2.5 c 1.17,-0.6 2,-1.8 2,-3.2 0,-1.9 -1.6,-3.6 -3.6,-3.6 z\"\n+               style=\"\" />\n+          </g>\n+          <path\n+             id=\"path4155\"\n+             d=\"m -69.84,116.2 c -2.24,0 -4.1,1.8 -4.1,4.1 l 0,2.5 c -1.17,0.5 -1.99,1.7 -1.99,3.1 0,2 1.64,3.6 3.61,3.6 1.96,0 3.6,-1.6 3.6,-3.6 0,-1.4 -0.83,-2.6 -2,-3.2 l 0,-2.4 c 0,-0.5 0.41,-0.9 0.9,-0.9 l 4.51,0 a 0.6001,0.6001 0 0 0 0.6,-0.6 l 0,-2 a 0.6001,0.6001 0 0 0 -0.6,-0.6 l -4.53,0 z\"\n+             style=\"\" />\n+        </g>\n+      </g>\n+    </g>\n+  </g>\n+  <path\n+     id=\"path4170\"\n+     d=\"m 15.2,12 c 0,-0.84 -0.4,-1.65 -1,-2.24 C 13.7,9.12 12.9,8.8 12,8.8 c -0.9,0 -1.7,0.32 -2.2,0.96 -0.6,0.59 -1,1.4 -1,2.24 0,0.84 0.4,1.65 1,2.24 0.5,0.64 1.3,0.96 2.2,0.96 0.9,0 1.7,-0.32 2.2,-0.96 0.6,-0.59 1,-1.4 1,-2.24 z\"\n+     style=\"opacity:1;fill:#000000;fill-opacity:1;stroke:none;stroke-width:10;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n+</svg>"
      }
    ]
  },
  {
    "sha": "586a29253dabec3ca0f1ccba9091daabd16b8411",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ODZhMjkyNTNkYWJlYzNjYTBmMWNjYmE5MDkxZGFhYmQxNmI4NDEx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-08-04T17:37:07Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-08-04T17:43:30Z"
      },
      "message": "Merge pull request #6503\n\n19dd40a Consolidate individual references to the current maximum peer connection value of 125 into a single constant declaration. (Matt Quinn)",
      "tree": {
        "sha": "ecb928b8b4ea66860de8fd9a98defe13a33b05f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ecb928b8b4ea66860de8fd9a98defe13a33b05f9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/586a29253dabec3ca0f1ccba9091daabd16b8411",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQGcBAABAgAGBQJVwPnCAAoJEFeJbS/48LZX7jEL/jNSPz3u7O1UMru1cGMqSw37\nK50yIRBij1gx5VCkrZYYC9otX0hSzDX0FBQe52r3+Gh02ClpZX+x375+G10swoQX\nZhGmSPgAQY6Z5RNXqwJE+Uf6tFi+7iMQs2vvrrNtLFS9kzFKHDg+eQn+n2rq8gtq\nMtBPErffJSnF+MHrmUmCgkNloctNJ1lCuoCAG9IEydVwLpW8p5loje03/Kfb0XsT\ntE1calNJ+F2x3dpYXhezCFTzF/fR6y/7KJBAoXuXqmYrBLc2X0H71dWeOhk5THyK\nd9kbtOHeUrF++3X+0ASeTBHiaAQpqMbtiGoMe8PmWP34DZBJ+rpgyWUOzKptdp0S\n6Jj46tvhixL1DWAa2NGKVRmEl9/JumVAVVEYz0d/ZCyiXZuZhsw99Q3/jqwRafHB\nfc9WRsyDQfJKLrxvIn14SPXeZOTtR92cK17Wca0q+3XqkE8zJAfWWiyvvOOF7+32\nBsDxv/z4QoDYzG8nojdLBEjKAFqj9czMrwEHvpl9uA==\n=C/tU\n-----END PGP SIGNATURE-----",
        "payload": "tree ecb928b8b4ea66860de8fd9a98defe13a33b05f9\nparent b6fee6b7c71cb339b3249860464d0a066b9a3147\nparent 19dd40a25f061fb8b16b9332826293f5d0b58a56\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1438709827 +0200\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1438710210 +0200\n\nMerge pull request #6503\n\n19dd40a Consolidate individual references to the current maximum peer connection value of 125 into a single constant declaration. (Matt Quinn)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/586a29253dabec3ca0f1ccba9091daabd16b8411",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/586a29253dabec3ca0f1ccba9091daabd16b8411",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/586a29253dabec3ca0f1ccba9091daabd16b8411/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b6fee6b7c71cb339b3249860464d0a066b9a3147",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6fee6b7c71cb339b3249860464d0a066b9a3147",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b6fee6b7c71cb339b3249860464d0a066b9a3147"
      },
      {
        "sha": "19dd40a25f061fb8b16b9332826293f5d0b58a56",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19dd40a25f061fb8b16b9332826293f5d0b58a56",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/19dd40a25f061fb8b16b9332826293f5d0b58a56"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 5,
      "deletions": 3
    },
    "files": [
      {
        "sha": "527133819f2e359767fd34dfdb48bfbdb0d2e743",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/586a29253dabec3ca0f1ccba9091daabd16b8411/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/586a29253dabec3ca0f1ccba9091daabd16b8411/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=586a29253dabec3ca0f1ccba9091daabd16b8411",
        "patch": "@@ -314,7 +314,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-externalip=<ip>\", _(\"Specify your own public address\"));\n     strUsage += HelpMessageOpt(\"-forcednsseed\", strprintf(_(\"Always query for peer addresses via DNS lookup (default: %u)\"), 0));\n     strUsage += HelpMessageOpt(\"-listen\", _(\"Accept connections from outside (default: 1 if no -proxy or -connect)\"));\n-    strUsage += HelpMessageOpt(\"-maxconnections=<n>\", strprintf(_(\"Maintain at most <n> connections to peers (default: %u)\"), 125));\n+    strUsage += HelpMessageOpt(\"-maxconnections=<n>\", strprintf(_(\"Maintain at most <n> connections to peers (default: %u)\"), DEFAULT_MAX_PEER_CONNECTIONS));\n     strUsage += HelpMessageOpt(\"-maxreceivebuffer=<n>\", strprintf(_(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: %u)\"), 5000));\n     strUsage += HelpMessageOpt(\"-maxsendbuffer=<n>\", strprintf(_(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\"), 1000));\n     strUsage += HelpMessageOpt(\"-onion=<ip:port>\", strprintf(_(\"Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)\"), \"-proxy\"));\n@@ -752,7 +752,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     \n     // Make sure enough file descriptors are available\n     int nBind = std::max((int)mapArgs.count(\"-bind\") + (int)mapArgs.count(\"-whitebind\"), 1);\n-    int nUserMaxConnections = GetArg(\"-maxconnections\", 125);\n+    int nUserMaxConnections = GetArg(\"-maxconnections\", DEFAULT_MAX_PEER_CONNECTIONS);\n     nMaxConnections = std::max(nUserMaxConnections, 0);\n     int nUserWhiteConnections = GetArg(\"-whiteconnections\", 0);\n     nWhiteConnections = std::max(nUserWhiteConnections, 0);"
      },
      {
        "sha": "5d413697bf839f4ef7e82738fef64624ef46c342",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/586a29253dabec3ca0f1ccba9091daabd16b8411/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/586a29253dabec3ca0f1ccba9091daabd16b8411/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=586a29253dabec3ca0f1ccba9091daabd16b8411",
        "patch": "@@ -80,7 +80,7 @@ static CNode* pnodeLocalHost = NULL;\n uint64_t nLocalHostNonce = 0;\n static std::vector<ListenSocket> vhListenSocket;\n CAddrMan addrman;\n-int nMaxConnections = 125;\n+int nMaxConnections = DEFAULT_MAX_PEER_CONNECTIONS;\n int nWhiteConnections = 0;\n bool fAddressesInitialized = false;\n "
      },
      {
        "sha": "aac28fe1050efd1a67d282867cf703fe127a51dd",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/586a29253dabec3ca0f1ccba9091daabd16b8411/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/586a29253dabec3ca0f1ccba9091daabd16b8411/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=586a29253dabec3ca0f1ccba9091daabd16b8411",
        "patch": "@@ -56,6 +56,8 @@ static const bool DEFAULT_UPNP = false;\n #endif\n /** The maximum number of entries in mapAskFor */\n static const size_t MAPASKFOR_MAX_SZ = MAX_INV_SZ;\n+/** The maximum number of peer connections to maintain. */\n+static const unsigned int DEFAULT_MAX_PEER_CONNECTIONS = 125;\n \n unsigned int ReceiveFloodSize();\n unsigned int SendBufferSize();"
      }
    ]
  },
  {
    "sha": "7b79cbd722d35b8113d5136b06d4a8e5fd569fc6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Yjc5Y2JkNzIyZDM1YjgxMTNkNTEzNmIwNmQ0YThlNWZkNTY5ZmM2",
    "commit": {
      "author": {
        "name": "Pavol Rusnak",
        "email": "stick@gk2.sk",
        "date": "2015-07-31T16:05:42Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-05T07:38:20Z"
      },
      "message": "limit total length of user agent comments\n\nReworked-By: Wladimir J. van der Laan <laanwj@gmail.com>",
      "tree": {
        "sha": "484ed735e5644daf574fbf4bc2dedfe035a29373",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/484ed735e5644daf574fbf4bc2dedfe035a29373"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7b79cbd722d35b8113d5136b06d4a8e5fd569fc6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b79cbd722d35b8113d5136b06d4a8e5fd569fc6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7b79cbd722d35b8113d5136b06d4a8e5fd569fc6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b79cbd722d35b8113d5136b06d4a8e5fd569fc6/comments",
    "author": {
      "login": "prusnak",
      "id": 42201,
      "node_id": "MDQ6VXNlcjQyMjAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/42201?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prusnak",
      "html_url": "https://github.com/prusnak",
      "followers_url": "https://api.github.com/users/prusnak/followers",
      "following_url": "https://api.github.com/users/prusnak/following{/other_user}",
      "gists_url": "https://api.github.com/users/prusnak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prusnak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prusnak/subscriptions",
      "organizations_url": "https://api.github.com/users/prusnak/orgs",
      "repos_url": "https://api.github.com/users/prusnak/repos",
      "events_url": "https://api.github.com/users/prusnak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prusnak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "557f8eac7aa96059270a36358642fbce93ac0478",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/557f8eac7aa96059270a36358642fbce93ac0478",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/557f8eac7aa96059270a36358642fbce93ac0478"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 16,
      "deletions": 4
    },
    "files": [
      {
        "sha": "91519e2935ad9a02eb7f0699e023c3b78577bc48",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b79cbd722d35b8113d5136b06d4a8e5fd569fc6/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b79cbd722d35b8113d5136b06d4a8e5fd569fc6/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=7b79cbd722d35b8113d5136b06d4a8e5fd569fc6",
        "patch": "@@ -1018,6 +1018,13 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     RegisterNodeSignals(GetNodeSignals());\n \n+    // format user agent, check total size\n+    strSubVersion = FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, mapMultiArgs.count(\"-uacomment\") ? mapMultiArgs[\"-uacomment\"] : std::vector<string>());\n+    if (strSubVersion.size() > MAX_SUBVERSION_LENGTH) {\n+        return InitError(strprintf(\"Total length of network version string %i exceeds maximum of %i characters. Reduce the number and/or size of uacomments.\",\n+            strSubVersion.size(), MAX_SUBVERSION_LENGTH));\n+    }\n+\n     if (mapArgs.count(\"-onlynet\")) {\n         std::set<enum Network> nets;\n         BOOST_FOREACH(const std::string& snet, mapMultiArgs[\"-onlynet\"]) {"
      },
      {
        "sha": "b1f5e3ffd728bfa758ad5d9cee8a02a44437c3e1",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b79cbd722d35b8113d5136b06d4a8e5fd569fc6/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b79cbd722d35b8113d5136b06d4a8e5fd569fc6/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=7b79cbd722d35b8113d5136b06d4a8e5fd569fc6",
        "patch": "@@ -3859,7 +3859,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         if (!vRecv.empty())\n             vRecv >> addrFrom >> nNonce;\n         if (!vRecv.empty()) {\n-            vRecv >> LIMITED_STRING(pfrom->strSubVer, 256);\n+            vRecv >> LIMITED_STRING(pfrom->strSubVer, MAX_SUBVERSION_LENGTH);\n             pfrom->cleanSubVer = SanitizeString(pfrom->strSubVer);\n         }\n         if (!vRecv.empty())"
      },
      {
        "sha": "080d9bb347e6812b1df948a111474d2457c064ac",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b79cbd722d35b8113d5136b06d4a8e5fd569fc6/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b79cbd722d35b8113d5136b06d4a8e5fd569fc6/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=7b79cbd722d35b8113d5136b06d4a8e5fd569fc6",
        "patch": "@@ -83,6 +83,7 @@ CAddrMan addrman;\n int nMaxConnections = 125;\n int nWhiteConnections = 0;\n bool fAddressesInitialized = false;\n+std::string strSubVersion;\n \n vector<CNode*> vNodes;\n CCriticalSection cs_vNodes;\n@@ -445,7 +446,7 @@ void CNode::PushVersion()\n     else\n         LogPrint(\"net\", \"send version message: version %d, blocks=%d, us=%s, peer=%d\\n\", PROTOCOL_VERSION, nBestHeight, addrMe.ToString(), id);\n     PushMessage(\"version\", PROTOCOL_VERSION, nLocalServices, nTime, addrYou, addrMe,\n-                nLocalHostNonce, FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, mapMultiArgs.count(\"-uacomment\") ? mapMultiArgs[\"-uacomment\"] : std::vector<string>()), nBestHeight, true);\n+                nLocalHostNonce, strSubVersion, nBestHeight, true);\n }\n \n "
      },
      {
        "sha": "62f84bbe4560436e268ac21ec82aab53906e9a10",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b79cbd722d35b8113d5136b06d4a8e5fd569fc6/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b79cbd722d35b8113d5136b06d4a8e5fd569fc6/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=7b79cbd722d35b8113d5136b06d4a8e5fd569fc6",
        "patch": "@@ -46,6 +46,8 @@ static const unsigned int MAX_INV_SZ = 50000;\n static const unsigned int MAX_ADDR_TO_SEND = 1000;\n /** Maximum length of incoming protocol messages (no message over 2 MiB is currently acceptable). */\n static const unsigned int MAX_PROTOCOL_MESSAGE_LENGTH = 2 * 1024 * 1024;\n+/** Maximum length of strSubVer in `version` message */\n+static const unsigned int MAX_SUBVERSION_LENGTH = 256;\n /** -listen default */\n static const bool DEFAULT_LISTEN = true;\n /** -upnp default */\n@@ -166,6 +168,9 @@ extern CCriticalSection cs_vAddedNodes;\n extern NodeId nLastNodeId;\n extern CCriticalSection cs_nLastNodeId;\n \n+/** Subversion as sent to the P2P network in `version` messages */\n+extern std::string strSubVersion;\n+\n struct LocalServiceInfo {\n     int nScore;\n     int nPort;"
      },
      {
        "sha": "2528e2cbd583a190a47c95f11d1e0833d78a4d68",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b79cbd722d35b8113d5136b06d4a8e5fd569fc6/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b79cbd722d35b8113d5136b06d4a8e5fd569fc6/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=7b79cbd722d35b8113d5136b06d4a8e5fd569fc6",
        "patch": "@@ -443,8 +443,7 @@ UniValue getnetworkinfo(const UniValue& params, bool fHelp)\n \n     UniValue obj(UniValue::VOBJ);\n     obj.push_back(Pair(\"version\",       CLIENT_VERSION));\n-    obj.push_back(Pair(\"subversion\",\n-        FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, mapMultiArgs.count(\"-uacomment\") ? mapMultiArgs[\"-uacomment\"] : std::vector<string>())));\n+    obj.push_back(Pair(\"subversion\",    strSubVersion));\n     obj.push_back(Pair(\"protocolversion\",PROTOCOL_VERSION));\n     obj.push_back(Pair(\"localservices\",       strprintf(\"%016x\", nLocalServices)));\n     obj.push_back(Pair(\"timeoffset\",    GetTimeOffset()));"
      }
    ]
  },
  {
    "sha": "9bb4dd850fae4ecf0ef2b095f198022f136fd659",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YmI0ZGQ4NTBmYWU0ZWNmMGVmMmIwOTVmMTk4MDIyZjEzNmZkNjU5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-05T08:21:01Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-05T08:21:16Z"
      },
      "message": "Merge pull request #6507\n\n9f5edb9 Removed contrib/bitrpc (Casey Rodarmor)",
      "tree": {
        "sha": "fbf100e41e33026c559f92df24d0963e3e8f3d5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fbf100e41e33026c559f92df24d0963e3e8f3d5e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9bb4dd850fae4ecf0ef2b095f198022f136fd659",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVwcd8AAoJEHSBCwEjRsmmBZcH/3BE5UoD+JJ00QMSxw+4EmCL\nhQexboewti35peMlsmL4vpu4QZ0914+k36sfZqQ+fwCkWr0YgLES0OZQphe4MxKY\n4+vKe0+YVS1VG/cxXE9ato0MT4DAHLBxRjEDLeUYNhXG3UJAg7/SrvLvM7M/82ZU\nEWZ7CwOCAXfieGPEcp5P/d57qRWzDANc6+atTxm3uCcImdQvAMwFBDPN0KdXf5tM\nVPZOBYvY7Y3OlcFV30Knv/0uChjq+/U7qvADF0BvV+jyewcwrfk/BE5UeM+O1af7\nEoxXq0Q8oqZjQvksHGKrIjLt9WbrqH0lTsqMHlSj/ZFS84WeP9NajtQGETUluG0=\n=a0y6\n-----END PGP SIGNATURE-----",
        "payload": "tree fbf100e41e33026c559f92df24d0963e3e8f3d5e\nparent 586a29253dabec3ca0f1ccba9091daabd16b8411\nparent 9f5edb970a9a4a07d9550413884babce3ef9cb20\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1438762861 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1438762876 +0200\n\nMerge pull request #6507\n\n9f5edb9 Removed contrib/bitrpc (Casey Rodarmor)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bb4dd850fae4ecf0ef2b095f198022f136fd659",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9bb4dd850fae4ecf0ef2b095f198022f136fd659",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bb4dd850fae4ecf0ef2b095f198022f136fd659/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "586a29253dabec3ca0f1ccba9091daabd16b8411",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/586a29253dabec3ca0f1ccba9091daabd16b8411",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/586a29253dabec3ca0f1ccba9091daabd16b8411"
      },
      {
        "sha": "9f5edb970a9a4a07d9550413884babce3ef9cb20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f5edb970a9a4a07d9550413884babce3ef9cb20",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9f5edb970a9a4a07d9550413884babce3ef9cb20"
      }
    ],
    "stats": {
      "total": 348,
      "additions": 2,
      "deletions": 346
    },
    "files": [
      {
        "sha": "125594312bd8cf9d4fde61f3c4aa291ef2c88a9a",
        "filename": "contrib/README.md",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bb4dd850fae4ecf0ef2b095f198022f136fd659/contrib/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bb4dd850fae4ecf0ef2b095f198022f136fd659/contrib/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/README.md?ref=9bb4dd850fae4ecf0ef2b095f198022f136fd659",
        "patch": "@@ -1,9 +1,6 @@\n Wallet Tools\n ---------------------\n \n-### [BitRPC](/contrib/bitrpc) ###\n-Allows for sending of all standard Bitcoin commands via RPC rather than as command line args.\n-\n ### [SpendFrom](/contrib/spendfrom) ###\n \n Use the raw transactions API to send coins received on a particular"
      },
      {
        "sha": "f5ef2f0405a941e2c9ca8c4c1178a5a97a9d590e",
        "filename": "contrib/bitrpc/README.md",
        "status": "removed",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/586a29253dabec3ca0f1ccba9091daabd16b8411/contrib/bitrpc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/586a29253dabec3ca0f1ccba9091daabd16b8411/contrib/bitrpc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/bitrpc/README.md?ref=586a29253dabec3ca0f1ccba9091daabd16b8411",
        "patch": "@@ -1,8 +0,0 @@\n-### BitRPC\n-Allows for sending of all standard Bitcoin commands via RPC rather than as command line args.\n-\n-### Looking for Wallet Tools?\n-BitRPC.py is able to do the exact same thing as `walletchangepass.py` and `walletunlock.py`. Their respective commands in BitRPC.py are:\n-\n-\tbitrpc.py walletpassphrasechange\n-\tbitrpc.py walletpassphrase\n\\ No newline at end of file"
      },
      {
        "sha": "c3ce9d793625fc0b1318a9baf77b7f428cbe2062",
        "filename": "contrib/bitrpc/bitrpc.py",
        "status": "removed",
        "additions": 0,
        "deletions": 335,
        "changes": 335,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/586a29253dabec3ca0f1ccba9091daabd16b8411/contrib/bitrpc/bitrpc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/586a29253dabec3ca0f1ccba9091daabd16b8411/contrib/bitrpc/bitrpc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/bitrpc/bitrpc.py?ref=586a29253dabec3ca0f1ccba9091daabd16b8411",
        "patch": "@@ -1,335 +0,0 @@\n-from jsonrpc import ServiceProxy\n-import sys\n-import string\n-import getpass\n-\n-# ===== BEGIN USER SETTINGS =====\n-# if you do not set these you will be prompted for a password for every command\n-rpcuser = \"\"\n-rpcpass = \"\"\n-# ====== END USER SETTINGS ======\n-\n-\n-if rpcpass == \"\":\n-    access = ServiceProxy(\"http://127.0.0.1:8332\")\n-else:\n-    access = ServiceProxy(\"http://\"+rpcuser+\":\"+rpcpass+\"@127.0.0.1:8332\")\n-cmd = sys.argv[1].lower()\n-\n-if cmd == \"backupwallet\":\n-    try:\n-        path = raw_input(\"Enter destination path/filename: \")\n-        print access.backupwallet(path)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"encryptwallet\":\n-    try:\n-        pwd = getpass.getpass(prompt=\"Enter passphrase: \")\n-        pwd2 = getpass.getpass(prompt=\"Repeat passphrase: \")\n-        if pwd == pwd2:\n-            access.encryptwallet(pwd)\n-            print \"\\n---Wallet encrypted. Server stopping, restart to run with encrypted wallet---\\n\"\n-        else:\n-            print \"\\n---Passphrases do not match---\\n\"\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getaccount\":\n-    try:\n-        addr = raw_input(\"Enter a Bitcoin address: \")\n-        print access.getaccount(addr)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getaccountaddress\":\n-    try:\n-        acct = raw_input(\"Enter an account name: \")\n-        print access.getaccountaddress(acct)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getaddressesbyaccount\":\n-    try:\n-        acct = raw_input(\"Enter an account name: \")\n-        print access.getaddressesbyaccount(acct)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getbalance\":\n-    try:\n-        acct = raw_input(\"Enter an account (optional): \")\n-        mc = raw_input(\"Minimum confirmations (optional): \")\n-        try:\n-            print access.getbalance(acct, mc)\n-        except:\n-            print access.getbalance()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getblockbycount\":\n-    try:\n-        height = raw_input(\"Height: \")\n-        print access.getblockbycount(height)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getblockcount\":\n-    try:\n-        print access.getblockcount()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getblocknumber\":\n-    try:\n-        print access.getblocknumber()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getconnectioncount\":\n-    try:\n-        print access.getconnectioncount()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getdifficulty\":\n-    try:\n-        print access.getdifficulty()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getgenerate\":\n-    try:\n-        print access.getgenerate()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"gethashespersec\":\n-    try:\n-        print access.gethashespersec()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getinfo\":\n-    try:\n-        print access.getinfo()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getnewaddress\":\n-    try:\n-        acct = raw_input(\"Enter an account name: \")\n-        try:\n-            print access.getnewaddress(acct)\n-        except:\n-            print access.getnewaddress()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getreceivedbyaccount\":\n-    try:\n-        acct = raw_input(\"Enter an account (optional): \")\n-        mc = raw_input(\"Minimum confirmations (optional): \")\n-        try:\n-            print access.getreceivedbyaccount(acct, mc)\n-        except:\n-            print access.getreceivedbyaccount()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getreceivedbyaddress\":\n-    try:\n-        addr = raw_input(\"Enter a Bitcoin address (optional): \")\n-        mc = raw_input(\"Minimum confirmations (optional): \")\n-        try:\n-            print access.getreceivedbyaddress(addr, mc)\n-        except:\n-            print access.getreceivedbyaddress()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"gettransaction\":\n-    try:\n-        txid = raw_input(\"Enter a transaction ID: \")\n-        print access.gettransaction(txid)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"getwork\":\n-    try:\n-        data = raw_input(\"Data (optional): \")\n-        try:\n-            print access.gettransaction(data)\n-        except:\n-            print access.gettransaction()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"help\":\n-    try:\n-        cmd = raw_input(\"Command (optional): \")\n-        try:\n-            print access.help(cmd)\n-        except:\n-            print access.help()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"listaccounts\":\n-    try:\n-        mc = raw_input(\"Minimum confirmations (optional): \")\n-        try:\n-            print access.listaccounts(mc)\n-        except:\n-            print access.listaccounts()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"listreceivedbyaccount\":\n-    try:\n-        mc = raw_input(\"Minimum confirmations (optional): \")\n-        incemp = raw_input(\"Include empty? (true/false, optional): \")\n-        try:\n-            print access.listreceivedbyaccount(mc, incemp)\n-        except:\n-            print access.listreceivedbyaccount()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"listreceivedbyaddress\":\n-    try:\n-        mc = raw_input(\"Minimum confirmations (optional): \")\n-        incemp = raw_input(\"Include empty? (true/false, optional): \")\n-        try:\n-            print access.listreceivedbyaddress(mc, incemp)\n-        except:\n-            print access.listreceivedbyaddress()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"listtransactions\":\n-    try:\n-        acct = raw_input(\"Account (optional): \")\n-        count = raw_input(\"Number of transactions (optional): \")\n-        frm = raw_input(\"Skip (optional):\")\n-        try:\n-            print access.listtransactions(acct, count, frm)\n-        except:\n-            print access.listtransactions()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"move\":\n-    try:\n-        frm = raw_input(\"From: \")\n-        to = raw_input(\"To: \")\n-        amt = raw_input(\"Amount:\")\n-        mc = raw_input(\"Minimum confirmations (optional): \")\n-        comment = raw_input(\"Comment (optional): \")\n-        try:\n-            print access.move(frm, to, amt, mc, comment)\n-        except:\n-            print access.move(frm, to, amt)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"sendfrom\":\n-    try:\n-        frm = raw_input(\"From: \")\n-        to = raw_input(\"To: \")\n-        amt = raw_input(\"Amount:\")\n-        mc = raw_input(\"Minimum confirmations (optional): \")\n-        comment = raw_input(\"Comment (optional): \")\n-        commentto = raw_input(\"Comment-to (optional): \")\n-        try:\n-            print access.sendfrom(frm, to, amt, mc, comment, commentto)\n-        except:\n-            print access.sendfrom(frm, to, amt)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"sendmany\":\n-    try:\n-        frm = raw_input(\"From: \")\n-        to = raw_input(\"To (in format address1:amount1,address2:amount2,...): \")\n-        mc = raw_input(\"Minimum confirmations (optional): \")\n-        comment = raw_input(\"Comment (optional): \")\n-        try:\n-            print access.sendmany(frm,to,mc,comment)\n-        except:\n-            print access.sendmany(frm,to)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"sendtoaddress\":\n-    try:\n-        to = raw_input(\"To (in format address1:amount1,address2:amount2,...): \")\n-        amt = raw_input(\"Amount:\")\n-        comment = raw_input(\"Comment (optional): \")\n-        commentto = raw_input(\"Comment-to (optional): \")\n-        try:\n-            print access.sendtoaddress(to,amt,comment,commentto)\n-        except:\n-            print access.sendtoaddress(to,amt)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"setaccount\":\n-    try:\n-        addr = raw_input(\"Address: \")\n-        acct = raw_input(\"Account:\")\n-        print access.setaccount(addr,acct)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"setgenerate\":\n-    try:\n-        gen= raw_input(\"Generate? (true/false): \")\n-        cpus = raw_input(\"Max processors/cores (-1 for unlimited, optional):\")\n-        try:\n-            print access.setgenerate(gen, cpus)\n-        except:\n-            print access.setgenerate(gen)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"settxfee\":\n-    try:\n-        amt = raw_input(\"Amount:\")\n-        print access.settxfee(amt)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"stop\":\n-    try:\n-        print access.stop()\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"validateaddress\":\n-    try:\n-        addr = raw_input(\"Address: \")\n-        print access.validateaddress(addr)\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"walletpassphrase\":\n-    try:\n-        pwd = getpass.getpass(prompt=\"Enter wallet passphrase: \")\n-        access.walletpassphrase(pwd, 60)\n-        print \"\\n---Wallet unlocked---\\n\"\n-    except Exception as inst:\n-        print inst\n-\n-elif cmd == \"walletpassphrasechange\":\n-    try:\n-        pwd = getpass.getpass(prompt=\"Enter old wallet passphrase: \")\n-        pwd2 = getpass.getpass(prompt=\"Enter new wallet passphrase: \")\n-        access.walletpassphrasechange(pwd, pwd2)\n-        print\n-        print \"\\n---Passphrase changed---\\n\"\n-    except Exception as inst:\n-        print inst\n-\n-else:\n-    print \"Command not found or not supported\""
      },
      {
        "sha": "9caac4f7aea9fe97025638aa0372c1fec282be06",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bb4dd850fae4ecf0ef2b095f198022f136fd659/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bb4dd850fae4ecf0ef2b095f198022f136fd659/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=9bb4dd850fae4ecf0ef2b095f198022f136fd659",
        "patch": "@@ -63,3 +63,5 @@ git merge commit are mentioned.\n \n ### Miscellaneous\n \n+- Removed bitrpc.py from contrib\n+"
      }
    ]
  },
  {
    "sha": "c9c017adf6a7b78f609f5fc61fd91dfa2e3d9662",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOWMwMTdhZGY2YTdiNzhmNjA5ZjVmYzYxZmQ5MWRmYTJlM2Q5NjYy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-05T08:22:31Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-05T08:23:01Z"
      },
      "message": "Merge pull request #6489\n\nf261f19 Give a better error message if system clock is bad (Casey Rodarmor)",
      "tree": {
        "sha": "0ce0eca28208905ca3df89f1850a9684abefb50e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0ce0eca28208905ca3df89f1850a9684abefb50e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c9c017adf6a7b78f609f5fc61fd91dfa2e3d9662",
      "comment_count": 3,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVwcflAAoJEHSBCwEjRsmmscwIALaUxj6+MZcQnQc8OGmwcsk8\n1IX5FPsTMJp+v9osyEmzK+MlH73LCMiP6SyiBsoPbCxRXZbeJLbvLWom6mYQr2d3\nyG/H6MLYBTIT27g/raiGu0mUOG3aa2VpUUlQc3+YhDEbuK7Dl7WzFi5MaiEbcIqC\nfchREZ/B8fie39ge+7fZunrO52AQfXA54/E7KXSvVG16ea+VErvYmKIOLtsZ1p2t\nmQpRQwYHqvzaOVHs2MLDULzLwE+Au5fpRsUywgFgnrAt7TAJNbTDPHQ3w2ShzXIA\nw0G5sWD6CTDO8Pn1UjQ/66QunqvuCEpg2bUhEmZ5zRNOlq3psH3P6UK5rNUqT/o=\n=5n2H\n-----END PGP SIGNATURE-----",
        "payload": "tree 0ce0eca28208905ca3df89f1850a9684abefb50e\nparent 9bb4dd850fae4ecf0ef2b095f198022f136fd659\nparent f261f19b4b77de7b2769a62356b4e4165cae6dc8\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1438762951 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1438762981 +0200\n\nMerge pull request #6489\n\nf261f19 Give a better error message if system clock is bad (Casey Rodarmor)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9c017adf6a7b78f609f5fc61fd91dfa2e3d9662",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c9c017adf6a7b78f609f5fc61fd91dfa2e3d9662",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9c017adf6a7b78f609f5fc61fd91dfa2e3d9662/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9bb4dd850fae4ecf0ef2b095f198022f136fd659",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bb4dd850fae4ecf0ef2b095f198022f136fd659",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9bb4dd850fae4ecf0ef2b095f198022f136fd659"
      },
      {
        "sha": "f261f19b4b77de7b2769a62356b4e4165cae6dc8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f261f19b4b77de7b2769a62356b4e4165cae6dc8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f261f19b4b77de7b2769a62356b4e4165cae6dc8"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 12,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c92e9a76926f35f8d4ff6d2aa1c43efdfb76e622",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9c017adf6a7b78f609f5fc61fd91dfa2e3d9662/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9c017adf6a7b78f609f5fc61fd91dfa2e3d9662/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=c9c017adf6a7b78f609f5fc61fd91dfa2e3d9662",
        "patch": "@@ -1230,6 +1230,18 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n                     LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; -checkblocks=%d may fail\\n\",\n                         MIN_BLOCKS_TO_KEEP, GetArg(\"-checkblocks\", 288));\n                 }\n+\n+                {\n+                    LOCK(cs_main);\n+                    CBlockIndex* tip = chainActive.Tip();\n+                    if (tip && tip->nTime > GetAdjustedTime() + 2 * 60 * 60) {\n+                        strLoadError = _(\"The block database contains a block which appears to be from the future. \"\n+                                \"This may be due to your computer's date and time being set incorrectly. \"\n+                                \"Only rebuild the block database if you are sure that your computer's date and time are correct\");\n+                        break;\n+                    }\n+                }\n+\n                 if (!CVerifyDB().VerifyDB(pcoinsdbview, GetArg(\"-checklevel\", 3),\n                               GetArg(\"-checkblocks\", 288))) {\n                     strLoadError = _(\"Corrupted block database detected\");"
      }
    ]
  },
  {
    "sha": "c3848000277d5ab6b5f5faecb1d21b89374ef999",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMzg0ODAwMDI3N2Q1YWI2YjVmNWZhZWNiMWQyMWI4OTM3NGVmOTk5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-05T13:42:30Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-05T13:43:10Z"
      },
      "message": "Merge pull request #6462\n\n7b79cbd limit total length of user agent comments (Pavol Rusnak)\n557f8ea implement uacomment config parameter which can add comments to user agent as per BIP-0014 (Pavol Rusnak)",
      "tree": {
        "sha": "ea62f8f84cfe6c7d7b11189e048969399d80b6ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ea62f8f84cfe6c7d7b11189e048969399d80b6ae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c3848000277d5ab6b5f5faecb1d21b89374ef999",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVwhLuAAoJEHSBCwEjRsmmbcoH/RVvRMpljYefCJkOjQp3kD1m\nEUc1eIhwZYFmXN+M1Mw8UxmjDg+53YFX3ZR1YwKR78JoFDXjkSnx+oiBDrk5Ouh8\nM40w/FK39+24P5h4CYPyHUnfGFHCD/Bj1V+aBM6bJIYELCoiGU69Io5nJgT/8LFP\n73nz6REWepbFJ8bRqRAYokqVmbHzmC/RkRle/xxMAkRE7vnANZNWLxHw4gyocJmL\n2gySjmJlDt3rnvJg2o+0IJ9PDZAyRi4doZ6enLz7Pd0atH22BGxIhh3F1fISaHjq\nnf1/e7pzNhQOL+e4vVMexanI+AhFCp21Xdtgavo3U1KrLF50e95cYjpFLJ1UmLA=\n=N+hr\n-----END PGP SIGNATURE-----",
        "payload": "tree ea62f8f84cfe6c7d7b11189e048969399d80b6ae\nparent c9c017adf6a7b78f609f5fc61fd91dfa2e3d9662\nparent 7b79cbd722d35b8113d5136b06d4a8e5fd569fc6\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1438782150 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1438782190 +0200\n\nMerge pull request #6462\n\n7b79cbd limit total length of user agent comments (Pavol Rusnak)\n557f8ea implement uacomment config parameter which can add comments to user agent as per BIP-0014 (Pavol Rusnak)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3848000277d5ab6b5f5faecb1d21b89374ef999",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c3848000277d5ab6b5f5faecb1d21b89374ef999",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3848000277d5ab6b5f5faecb1d21b89374ef999/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c9c017adf6a7b78f609f5fc61fd91dfa2e3d9662",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9c017adf6a7b78f609f5fc61fd91dfa2e3d9662",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c9c017adf6a7b78f609f5fc61fd91dfa2e3d9662"
      },
      {
        "sha": "7b79cbd722d35b8113d5136b06d4a8e5fd569fc6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b79cbd722d35b8113d5136b06d4a8e5fd569fc6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7b79cbd722d35b8113d5136b06d4a8e5fd569fc6"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 16,
      "deletions": 4
    },
    "files": [
      {
        "sha": "ef1c39db2584411ee1cf1a5247ed98dc7549b729",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3848000277d5ab6b5f5faecb1d21b89374ef999/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3848000277d5ab6b5f5faecb1d21b89374ef999/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=c3848000277d5ab6b5f5faecb1d21b89374ef999",
        "patch": "@@ -1020,6 +1020,13 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     RegisterNodeSignals(GetNodeSignals());\n \n+    // format user agent, check total size\n+    strSubVersion = FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, mapMultiArgs.count(\"-uacomment\") ? mapMultiArgs[\"-uacomment\"] : std::vector<string>());\n+    if (strSubVersion.size() > MAX_SUBVERSION_LENGTH) {\n+        return InitError(strprintf(\"Total length of network version string %i exceeds maximum of %i characters. Reduce the number and/or size of uacomments.\",\n+            strSubVersion.size(), MAX_SUBVERSION_LENGTH));\n+    }\n+\n     if (mapArgs.count(\"-onlynet\")) {\n         std::set<enum Network> nets;\n         BOOST_FOREACH(const std::string& snet, mapMultiArgs[\"-onlynet\"]) {"
      },
      {
        "sha": "52d543c117800b24e0e1303fb6f4d3600fc0b711",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3848000277d5ab6b5f5faecb1d21b89374ef999/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3848000277d5ab6b5f5faecb1d21b89374ef999/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c3848000277d5ab6b5f5faecb1d21b89374ef999",
        "patch": "@@ -3898,7 +3898,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         if (!vRecv.empty())\n             vRecv >> addrFrom >> nNonce;\n         if (!vRecv.empty()) {\n-            vRecv >> LIMITED_STRING(pfrom->strSubVer, 256);\n+            vRecv >> LIMITED_STRING(pfrom->strSubVer, MAX_SUBVERSION_LENGTH);\n             pfrom->cleanSubVer = SanitizeString(pfrom->strSubVer);\n         }\n         if (!vRecv.empty())"
      },
      {
        "sha": "e4ead3c92e432bea07f38aa57e5ea9abec9ece10",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3848000277d5ab6b5f5faecb1d21b89374ef999/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3848000277d5ab6b5f5faecb1d21b89374ef999/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=c3848000277d5ab6b5f5faecb1d21b89374ef999",
        "patch": "@@ -83,6 +83,7 @@ CAddrMan addrman;\n int nMaxConnections = DEFAULT_MAX_PEER_CONNECTIONS;\n int nWhiteConnections = 0;\n bool fAddressesInitialized = false;\n+std::string strSubVersion;\n \n vector<CNode*> vNodes;\n CCriticalSection cs_vNodes;\n@@ -445,7 +446,7 @@ void CNode::PushVersion()\n     else\n         LogPrint(\"net\", \"send version message: version %d, blocks=%d, us=%s, peer=%d\\n\", PROTOCOL_VERSION, nBestHeight, addrMe.ToString(), id);\n     PushMessage(\"version\", PROTOCOL_VERSION, nLocalServices, nTime, addrYou, addrMe,\n-                nLocalHostNonce, FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, std::vector<string>()), nBestHeight, true);\n+                nLocalHostNonce, strSubVersion, nBestHeight, true);\n }\n \n "
      },
      {
        "sha": "efa2e29bb517ab20968032118912a9fb166ff7af",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3848000277d5ab6b5f5faecb1d21b89374ef999/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3848000277d5ab6b5f5faecb1d21b89374ef999/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=c3848000277d5ab6b5f5faecb1d21b89374ef999",
        "patch": "@@ -46,6 +46,8 @@ static const unsigned int MAX_INV_SZ = 50000;\n static const unsigned int MAX_ADDR_TO_SEND = 1000;\n /** Maximum length of incoming protocol messages (no message over 2 MiB is currently acceptable). */\n static const unsigned int MAX_PROTOCOL_MESSAGE_LENGTH = 2 * 1024 * 1024;\n+/** Maximum length of strSubVer in `version` message */\n+static const unsigned int MAX_SUBVERSION_LENGTH = 256;\n /** -listen default */\n static const bool DEFAULT_LISTEN = true;\n /** -upnp default */\n@@ -168,6 +170,9 @@ extern CCriticalSection cs_vAddedNodes;\n extern NodeId nLastNodeId;\n extern CCriticalSection cs_nLastNodeId;\n \n+/** Subversion as sent to the P2P network in `version` messages */\n+extern std::string strSubVersion;\n+\n struct LocalServiceInfo {\n     int nScore;\n     int nPort;"
      },
      {
        "sha": "56ec59171d820e1c691ce35a1cd32ee97e2254f3",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3848000277d5ab6b5f5faecb1d21b89374ef999/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3848000277d5ab6b5f5faecb1d21b89374ef999/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=c3848000277d5ab6b5f5faecb1d21b89374ef999",
        "patch": "@@ -443,8 +443,7 @@ UniValue getnetworkinfo(const UniValue& params, bool fHelp)\n \n     UniValue obj(UniValue::VOBJ);\n     obj.push_back(Pair(\"version\",       CLIENT_VERSION));\n-    obj.push_back(Pair(\"subversion\",\n-        FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, std::vector<string>())));\n+    obj.push_back(Pair(\"subversion\",    strSubVersion));\n     obj.push_back(Pair(\"protocolversion\",PROTOCOL_VERSION));\n     obj.push_back(Pair(\"localservices\",       strprintf(\"%016x\", nLocalServices)));\n     obj.push_back(Pair(\"timeoffset\",    GetTimeOffset()));"
      }
    ]
  },
  {
    "sha": "75a880390191aeaf7d2fa326f194349a891db022",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NWE4ODAzOTAxOTFhZWFmN2QyZmEzMjZmMTk0MzQ5YTg5MWRiMDIy",
    "commit": {
      "author": {
        "name": "Casey Rodarmor",
        "email": "casey@rodarmor.com",
        "date": "2015-08-05T15:22:14Z"
      },
      "committer": {
        "name": "Casey Rodarmor",
        "email": "casey@rodarmor.com",
        "date": "2015-08-05T15:22:14Z"
      },
      "message": "Add v0.11.0 release notes",
      "tree": {
        "sha": "3e0b909b2a2360be2a99d0f391d04cf69edd079f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3e0b909b2a2360be2a99d0f391d04cf69edd079f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/75a880390191aeaf7d2fa326f194349a891db022",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75a880390191aeaf7d2fa326f194349a891db022",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/75a880390191aeaf7d2fa326f194349a891db022",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75a880390191aeaf7d2fa326f194349a891db022/comments",
    "author": {
      "login": "casey",
      "id": 1945,
      "node_id": "MDQ6VXNlcjE5NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/casey",
      "html_url": "https://github.com/casey",
      "followers_url": "https://api.github.com/users/casey/followers",
      "following_url": "https://api.github.com/users/casey/following{/other_user}",
      "gists_url": "https://api.github.com/users/casey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/casey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/casey/subscriptions",
      "organizations_url": "https://api.github.com/users/casey/orgs",
      "repos_url": "https://api.github.com/users/casey/repos",
      "events_url": "https://api.github.com/users/casey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/casey/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "casey",
      "id": 1945,
      "node_id": "MDQ6VXNlcjE5NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/casey",
      "html_url": "https://github.com/casey",
      "followers_url": "https://api.github.com/users/casey/followers",
      "following_url": "https://api.github.com/users/casey/following{/other_user}",
      "gists_url": "https://api.github.com/users/casey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/casey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/casey/subscriptions",
      "organizations_url": "https://api.github.com/users/casey/orgs",
      "repos_url": "https://api.github.com/users/casey/repos",
      "events_url": "https://api.github.com/users/casey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/casey/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c3848000277d5ab6b5f5faecb1d21b89374ef999",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3848000277d5ab6b5f5faecb1d21b89374ef999",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c3848000277d5ab6b5f5faecb1d21b89374ef999"
      }
    ],
    "stats": {
      "total": 505,
      "additions": 505,
      "deletions": 0
    },
    "files": [
      {
        "sha": "28e49fb7ea64838f81a72424217e755a62e865c8",
        "filename": "doc/release-notes/release-notes-0.11.0.md",
        "status": "added",
        "additions": 505,
        "deletions": 0,
        "changes": 505,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75a880390191aeaf7d2fa326f194349a891db022/doc/release-notes/release-notes-0.11.0.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75a880390191aeaf7d2fa326f194349a891db022/doc/release-notes/release-notes-0.11.0.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.11.0.md?ref=75a880390191aeaf7d2fa326f194349a891db022",
        "patch": "@@ -0,0 +1,505 @@\n+Bitcoin Core version 0.11.0 is now available from:\n+\n+  <https://bitcoin.org/bin/bitcoin-core-0.11.0/>\n+\n+This is a new major version release, bringing both new features and\n+bug fixes.\n+\n+Please report bugs using the issue tracker at github:\n+\n+  <https://github.com/bitcoin/bitcoin/issues>\n+\n+Upgrading and downgrading\n+=========================\n+\n+How to Upgrade\n+--------------\n+\n+If you are running an older version, shut it down. Wait until it has completely\n+shut down (which might take a few minutes for older versions), then run the\n+installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or\n+bitcoind/bitcoin-qt (on Linux).\n+\n+Downgrade warning\n+------------------\n+\n+Because release 0.10.0 and later makes use of headers-first synchronization and\n+parallel block download (see further), the block files and databases are not\n+backwards-compatible with pre-0.10 versions of Bitcoin Core or other software:\n+\n+* Blocks will be stored on disk out of order (in the order they are\n+received, really), which makes it incompatible with some tools or\n+other programs. Reindexing using earlier versions will also not work\n+anymore as a result of this.\n+\n+* The block index database will now hold headers for which no block is\n+stored on disk, which earlier versions won't support.\n+\n+If you want to be able to downgrade smoothly, make a backup of your entire data\n+directory. Without this your node will need start syncing (or importing from\n+bootstrap.dat) anew afterwards. It is possible that the data from a completely\n+synchronised 0.10 node may be usable in older versions as-is, but this is not\n+supported and may break as soon as the older version attempts to reindex.\n+\n+This does not affect wallet forward or backward compatibility. There are no\n+known problems when downgrading from 0.11.x to 0.10.x.\n+\n+Important information\n+======================\n+\n+Transaction flooding\n+---------------------\n+\n+At the time of this release, the P2P network is being flooded with low-fee\n+transactions. This causes a ballooning of the mempool size.\n+\n+If this growth of the mempool causes problematic memory use on your node, it is\n+possible to change a few configuration options to work around this. The growth\n+of the mempool can be monitored with the RPC command `getmempoolinfo`.\n+\n+One is to increase the minimum transaction relay fee `minrelaytxfee`, which\n+defaults to 0.00001. This will cause transactions with fewer BTC/kB fee to be\n+rejected, and thus fewer transactions entering the mempool.\n+\n+The other is to restrict the relaying of free transactions with\n+`limitfreerelay`. This option sets the number of kB/minute at which\n+free transactions (with enough priority) will be accepted. It defaults to 15.\n+Reducing this number reduces the speed at which the mempool can grow due\n+to free transactions.\n+\n+For example, add the following to `bitcoin.conf`:\n+\n+    minrelaytxfee=0.00005 \n+    limitfreerelay=5\n+\n+More robust solutions are being worked on for a follow-up release.\n+\n+Notable changes\n+===============\n+\n+Block file pruning\n+----------------------\n+\n+This release supports running a fully validating node without maintaining a copy \n+of the raw block and undo data on disk. To recap, there are four types of data \n+related to the blockchain in the bitcoin system: the raw blocks as received over \n+the network (blk???.dat), the undo data (rev???.dat), the block index and the \n+UTXO set (both LevelDB databases). The databases are built from the raw data.\n+\n+Block pruning allows Bitcoin Core to delete the raw block and undo data once \n+it's been validated and used to build the databases. At that point, the raw data \n+is used only to relay blocks to other nodes, to handle reorganizations, to look \n+up old transactions (if -txindex is enabled or via the RPC/REST interfaces), or \n+for rescanning the wallet. The block index continues to hold the metadata about \n+all blocks in the blockchain.\n+\n+The user specifies how much space to allot for block & undo files. The minimum \n+allowed is 550MB. Note that this is in addition to whatever is required for the \n+block index and UTXO databases. The minimum was chosen so that Bitcoin Core will \n+be able to maintain at least 288 blocks on disk (two days worth of blocks at 10 \n+minutes per block). In rare instances it is possible that the amount of space \n+used will exceed the pruning target in order to keep the required last 288 \n+blocks on disk.\n+\n+Block pruning works during initial sync in the same way as during steady state, \n+by deleting block files \"as you go\" whenever disk space is allocated. Thus, if \n+the user specifies 550MB, once that level is reached the program will begin \n+deleting the oldest block and undo files, while continuing to download the \n+blockchain.\n+\n+For now, block pruning disables block relay.  In the future, nodes with block \n+pruning will at a minimum relay \"new\" blocks, meaning blocks that extend their \n+active chain. \n+\n+Block pruning is currently incompatible with running a wallet due to the fact \n+that block data is used for rescanning the wallet and importing keys or \n+addresses (which require a rescan.) However, running the wallet with block \n+pruning will be supported in the near future, subject to those limitations.\n+\n+Block pruning is also incompatible with -txindex and will automatically disable \n+it.\n+\n+Once you have pruned blocks, going back to unpruned state requires \n+re-downloading the entire blockchain. To do this, re-start the node with \n+-reindex. Note also that any problem that would cause a user to reindex (e.g., \n+disk corruption) will cause a pruned node to redownload the entire blockchain. \n+Finally, note that when a pruned node reindexes, it will delete any blk???.dat \n+and rev???.dat files in the data directory prior to restarting the download.\n+\n+To enable block pruning on the command line:\n+\n+- `-prune=N`: where N is the number of MB to allot for raw block & undo data.\n+\n+Modified RPC calls:\n+\n+- `getblockchaininfo` now includes whether we are in pruned mode or not.\n+- `getblock` will check if the block's data has been pruned and if so, return an \n+error.\n+- `getrawtransaction` will no longer be able to locate a transaction that has a \n+UTXO but where its block file has been pruned. \n+\n+Pruning is disabled by default.\n+\n+Big endian support\n+--------------------\n+\n+Experimental support for big-endian CPU architectures was added in this\n+release. All little-endian specific code was replaced with endian-neutral\n+constructs. This has been tested on at least MIPS and PPC hosts. The build\n+system will automatically detect the endianness of the target.\n+\n+Memory usage optimization\n+--------------------------\n+\n+There have been many changes in this release to reduce the default memory usage\n+of a node, among which:\n+\n+- Accurate UTXO cache size accounting (#6102); this makes the option `-dbcache`\n+  precise where this grossly underestimated memory usage before\n+- Reduce size of per-peer data structure (#6064 and others); this increases the\n+  number of connections that can be supported with the same amount of memory\n+- Reduce the number of threads (#5964, #5679); lowers the amount of (esp.\n+  virtual) memory needed\n+\n+Fee estimation changes\n+----------------------\n+\n+This release improves the algorithm used for fee estimation.  Previously, -1\n+was returned when there was insufficient data to give an estimate.  Now, -1\n+will also be returned when there is no fee or priority high enough for the\n+desired confirmation target. In those cases, it can help to ask for an estimate\n+for a higher target number of blocks. It is not uncommon for there to be no\n+fee or priority high enough to be reliably (85%) included in the next block and\n+for this reason, the default for `-txconfirmtarget=n` has changed from 1 to 2.\n+\n+Privacy: Disable wallet transaction broadcast\n+----------------------------------------------\n+\n+This release adds an option `-walletbroadcast=0` to prevent automatic\n+transaction broadcast and rebroadcast (#5951). This option allows separating\n+transaction submission from the node functionality.\n+\n+Making use of this, third-party scripts can be written to take care of\n+transaction (re)broadcast:\n+\n+- Send the transaction as normal, either through RPC or the GUI\n+- Retrieve the transaction data through RPC using `gettransaction` (NOT\n+  `getrawtransaction`). The `hex` field of the result will contain the raw\n+  hexadecimal representation of the transaction\n+- The transaction can then be broadcasted through arbitrary mechanisms\n+  supported by the script\n+\n+One such application is selective Tor usage, where the node runs on the normal\n+internet but transactions are broadcasted over Tor.\n+\n+For an example script see [bitcoin-submittx](https://github.com/laanwj/bitcoin-submittx).\n+\n+Privacy: Stream isolation for Tor\n+----------------------------------\n+\n+This release adds functionality to create a new circuit for every peer\n+connection, when the software is used with Tor. The new option,\n+`-proxyrandomize`, is on by default.\n+\n+When enabled, every outgoing connection will (potentially) go through a\n+different exit node. That significantly reduces the chance to get unlucky and\n+pick a single exit node that is either malicious, or widely banned from the P2P\n+network. This improves connection reliability as well as privacy, especially\n+for the initial connections.\n+\n+**Important note:** If a non-Tor SOCKS5 proxy is configured that supports\n+authentication, but doesn't require it, this change may cause that proxy to reject\n+connections. A user and password is sent where they weren't before. This setup\n+is exceedingly rare, but in this case `-proxyrandomize=0` can be passed to\n+disable the behavior.\n+\n+0.11.0 Change log\n+=================\n+\n+Detailed release notes follow. This overview includes changes that affect\n+behavior, not code moves, refactors and string updates. For convenience in locating\n+the code changes and accompanying discussion, both the pull request and\n+git merge commit are mentioned.\n+\n+### RPC and REST\n+- #5461 `5f7279a` signrawtransaction: validate private key\n+- #5444 `103f66b` Add /rest/headers/<count>/<hash>.<ext>\n+- #4964 `95ecc0a` Add scriptPubKey field to validateaddress RPC call\n+- #5476 `c986972` Add time offset into getpeerinfo output\n+- #5540 `84eba47` Add unconfirmed and immature balances to getwalletinfo\n+- #5599 `40e96a3` Get rid of the internal miner's hashmeter\n+- #5711 `87ecfb0` Push down RPC locks\n+- #5754 `1c4e3f9` fix getblocktemplate lock issue\n+- #5756 `5d901d8` Fix getblocktemplate_proposals test by mining one block\n+- #5548 `d48ce48` Add /rest/chaininfos\n+- #5992 `4c4f1b4` Push down RPC reqWallet flag\n+- #6036 `585b5db` Show zero value txouts in listunspent\n+- #5199 `6364408` Add RPC call `gettxoutproof` to generate and verify merkle blocks\n+- #5418 `16341cc` Report missing inputs in sendrawtransaction\n+- #5937 `40f5e8d` show script verification errors in signrawtransaction result\n+- #5420 `1fd2d39` getutxos REST command (based on Bip64)\n+- #6193 `42746b0` [REST] remove json input for getutxos, limit to query max. 15 outpoints\n+- #6226 `5901596` json: fail read_string if string contains trailing garbage\n+\n+### Configuration and command-line options\n+- #5636 `a353ad4` Add option `-allowselfsignedrootcertificate` to allow self signed root certs (for testing payment requests)\n+- #5900 `3e8a1f2` Add a consistency check `-checkblockindex` for the block chain data structures\n+- #5951 `7efc9cf` Make it possible to disable wallet transaction broadcast (using `-walletbroadcast=0`)\n+- #5911 `b6ea3bc` privacy: Stream isolation for Tor (on by default, use `-proxyrandomize=0` to disable)\n+- #5863 `c271304` Add autoprune functionality (`-prune=<size>`)\n+- #6153 `0bcf04f` Parameter interaction: disable upnp if -proxy set\n+- #6274 `4d9c7fe` Add option `-alerts` to opt out of alert system\n+\n+### Block and transaction handling\n+- #5367 `dcc1304` Do all block index writes in a batch\n+- #5253 `203632d` Check against MANDATORY flags prior to accepting to mempool\n+- #5459 `4406c3e` Reject headers that build on an invalid parent\n+- #5481 `055f3ae` Apply AreSane() checks to the fees from the network\n+- #5580 `40d65eb` Preemptively catch a few potential bugs\n+- #5349 `f55c5e9` Implement test for merkle tree malleability in CPartialMerkleTree\n+- #5564 `a89b837` clarify obscure uses of EvalScript()\n+- #5521 `8e4578a` Reject non-final txs even in testnet/regtest\n+- #5707 `6af674e` Change hardcoded character constants to descriptive named constants for db keys\n+- #5286 `fcf646c` Change the default maximum OP_RETURN size to 80 bytes\n+- #5710 `175d86e` Add more information to errors in ReadBlockFromDisk\n+- #5948 `b36f1ce` Use GetAncestor to compute new target\n+- #5959 `a0bfc69` Add additional block index consistency checks\n+- #6058 `7e0e7f8` autoprune minor post-merge improvements\n+- #5159 `2cc1372` New fee estimation code\n+- #6102 `6fb90d8` Implement accurate UTXO cache size accounting\n+- #6129 `2a82298` Bug fix for clearing fCheckForPruning\n+- #5947 `e9af4e6` Alert if it is very likely we are getting a bad chain\n+- #6203 `c00ae64` Remove P2SH coinbase flag, no longer interesting\n+- #5985 `37b4e42` Fix removing of orphan transactions\n+- #6221 `6cb70ca` Prune: Support noncontiguous block files\n+- #6256 `fce474c` Use best header chain timestamps to detect partitioning\n+- #6233 `a587606` Advance pindexLastCommonBlock for blocks in chainActive\n+\n+### P2P protocol and network code\n+- #5507 `844ace9` Prevent DOS attacks on in-flight data structures\n+- #5770 `32a8b6a` Sanitize command strings before logging them\n+- #5859 `dd4ffce` Add correct bool combiner for net signals\n+- #5876 `8e4fd0c` Add a NODE_GETUTXO service bit and document NODE_NETWORK\n+- #6028 `b9311fb` Move nLastTry from CAddress to CAddrInfo\n+- #5662 `5048465` Change download logic to allow calling getdata on inbound peers\n+- #5971 `18d2832` replace absolute sleep with conditional wait\n+- #5918 `7bf5d5e` Use equivalent PoW for non-main-chain requests\n+- #6059 `f026ab6` chainparams: use SeedSpec6's rather than CAddress's for fixed seeds\n+- #6080 `31c0bf1` Add jonasschnellis dns seeder\n+- #5976 `9f7809f` Reduce download timeouts as blocks arrive\n+- #6172 `b4bbad1` Ignore getheaders requests when not synced\n+- #5875 `304892f` Be stricter in processing unrequested blocks\n+- #6333 `41bbc85` Hardcoded seeds update June 2015\n+\n+### Validation\n+- #5143 `48e1765` Implement BIP62 rule 6\n+- #5713 `41e6e4c` Implement BIP66\n+\n+### Build system\n+- #5501 `c76c9d2` Add mips, mipsel and aarch64 to depends platforms\n+- #5334 `cf87536` libbitcoinconsensus: Add pkg-config support\n+- #5514 `ed11d53` Fix 'make distcheck'\n+- #5505 `a99ef7d` Build winshutdownmonitor.cpp on Windows only\n+- #5582 `e8a6639` Osx toolchain update\n+- #5684 `ab64022` osx: bump build sdk to 10.9\n+- #5695 `23ef5b7` depends: latest config.guess and config.sub\n+- #5509 `31dedb4` Fixes when compiling in c++11 mode\n+- #5819 `f8e68f7` release: use static libstdc++ and disable reduced exports by default\n+- #5510 `7c3fbc3` Big endian support\n+- #5149 `c7abfa5` Add script to verify all merge commits are signed\n+- #6082 `7abbb7e` qt: disable qt tests when one of the checks for the gui fails\n+- #6244 `0401aa2` configure: Detect (and reject) LibreSSL\n+- #6269 `95aca44` gitian: Use the new bitcoin-detached-sigs git repo for OSX signatures\n+- #6285 `ef1d506` Fix scheduler build with some boost versions.\n+- #6280 `25c2216` depends: fix Boost 1.55 build on GCC 5\n+- #6303 `b711599` gitian: add a gitian-win-signer descriptor\n+- #6246 `8ea6d37` Fix build on FreeBSD\n+- #6282 `daf956b` fix crash on shutdown when e.g. changing -txindex and abort action\n+- #6354 `bdf0d94` Gitian windows signing normalization\n+\n+### Wallet\n+- #2340 `811c71d` Discourage fee sniping with nLockTime\n+- #5485 `d01bcc4` Enforce minRelayTxFee on wallet created tx and add a maxtxfee option\n+- #5508 `9a5cabf` Add RandAddSeedPerfmon to MakeNewKey\n+- #4805 `8204e19` Do not flush the wallet in AddToWalletIfInvolvingMe(..)\n+- #5319 `93b7544` Clean up wallet encryption code\n+- #5831 `df5c246` Subtract fee from amount\n+- #6076 `6c97fd1` wallet: fix boost::get usage with boost 1.58\n+- #5511 `23c998d` Sort pending wallet transactions before reaccepting\n+- #6126 `26e08a1` Change default nTxConfirmTarget to 2\n+- #6183 `75a4d51` Fix off-by-one error w/ nLockTime in the wallet\n+- #6276 `c9fd907` Fix getbalance * 0\n+\n+### GUI\n+- #5219 `f3af0c8` New icons\n+- #5228 `bb3c75b` HiDPI (retina) support for splash screen\n+- #5258 `73cbf0a` The RPC Console should be a QWidget to make window more independent\n+- #5488 `851dfc7` Light blue icon color for regtest\n+- #5547 `a39aa74` New icon for the debug window\n+- #5493 `e515309` Adopt style colour for button icons\n+- #5557 `70477a0` On close of splashscreen interrupt verifyDB\n+- #5559 `83be8fd` Make the command-line-args dialog better\n+- #5144 `c5380a9` Elaborate on signverify message dialog warning\n+- #5489 `d1aa3c6` Optimize PNG files\n+- #5649 `e0cd2f5` Use text-color icons for system tray Send/Receive menu entries\n+- #5651 `848f55d` Coin Control: Use U+2248 \"ALMOST EQUAL TO\" rather than a simple tilde\n+- #5626 `ab0d798` Fix icon sizes and column width\n+- #5683 `c7b22aa` add new osx dmg background picture\n+- #5620 `7823598` Payment request expiration bug fix\n+- #5729 `9c4a5a5` Allow unit changes for read-only BitcoinAmountField\n+- #5753 `0f44672` Add bitcoin logo to about screen\n+- #5629 `a956586` Prevent amount overflow problem with payment requests\n+- #5830 `215475a` Don't save geometry for options and about/help window\n+- #5793 `d26f0b2` Honor current network when creating autostart link\n+- #5847 `f238add` Startup script for centos, with documentation\n+- #5915 `5bd3a92` Fix a static qt5 crash when using certain versions of libxcb\n+- #5898 `bb56781` Fix rpc console font size to flexible metrics\n+- #5467 `bc8535b` Payment request / server work - part 2\n+- #6161 `180c164` Remove movable option for toolbar\n+- #6160 `0d862c2` Overviewpage: make sure warning icons gets colored\n+\n+### Tests\n+- #5453 `2f2d337` Add ability to run single test manually to RPC tests\n+- #5421 `886eb57` Test unexecuted OP_CODESEPARATOR\n+- #5530 `565b300` Additional rpc tests\n+- #5611 `37b185c` Fix spurious windows test failures after 012598880c\n+- #5613 `2eda47b` Fix smartfees test for change to relay policy\n+- #5612 `e3f5727` Fix zapwallettxes test\n+- #5642 `30a5b5f` Prepare paymentservertests for new unit tests\n+- #5784 `e3a3cd7` Fix usage of NegateSignatureS in script_tests\n+- #5813 `ee9f2bf` Add unit tests for next difficulty calculations\n+- #5855 `d7989c0` Travis: run unit tests in different orders\n+- #5852 `cdae53e` Reinitialize state in between individual unit tests.\n+- #5883 `164d7b6` tests: add a BasicTestingSetup and apply to all tests\n+- #5940 `446bb70` Regression test for ResendWalletTransactions\n+- #6052 `cf7adad` fix and enable bip32 unit test\n+- #6039 `734f80a` tests: Error when setgenerate is used on regtest\n+- #6074 `948beaf` Correct the PUSHDATA4 minimal encoding test in script_invalid.json\n+- #6032 `e08886d` Stop nodes after RPC tests, even with --nocleanup\n+- #6075 `df1609f` Add additional script edge condition tests\n+- #5981 `da38dc6` Python P2P testing \n+- #5958 `9ef00c3` Add multisig rpc tests\n+- #6112 `fec5c0e` Add more script edge condition tests\n+\n+### Miscellaneous\n+- #5457, #5506, #5952, #6047 Update libsecp256k1\n+- #5437 `84857e8` Add missing CAutoFile::IsNull() check in main\n+- #5490 `ec20fd7` Replace uint256/uint160 with opaque blobs where possible\n+- #5654, #5764 Adding jonasschnelli's GPG key\n+- #5477 `5f04d1d` OS X 10.10: LSSharedFileListItemResolve() is deprecated\n+- #5679 `beff11a` Get rid of DetectShutdownThread\n+- #5787 `9bd8c9b` Add fanquake PGP key\n+- #5366 `47a79bb` No longer check osx compatibility in RenameThread\n+- #5689 `07f4386` openssl: abstract out OPENSSL_cleanse\n+- #5708 `8b298ca` Add list of implemented BIPs\n+- #5809 `46bfbe7` Add bitcoin-cli man page\n+- #5839 `86eb461` keys: remove libsecp256k1 verification until it's actually supported\n+- #5749 `d734d87` Help messages correctly formatted (79 chars)\n+- #5884 `7077fe6` BUGFIX: Stack around the variable 'rv' was corrupted\n+- #5849 `41259ca` contrib/init/bitcoind.openrc: Compatibility with previous OpenRC init script variables\n+- #5950 `41113e3` Fix locale fallback and guard tests against invalid locale settings\n+- #5965 `7c6bfb1` Add git-subtree-check.sh script\n+- #6033 `1623f6e` FreeBSD, OpenBSD thread renaming\n+- #6064 `b46e7c2` Several changes to mruset\n+- #6104 `3e2559c` Show an init message while activating best chain\n+- #6125 `351f73e` Clean up parsing of bool command line args\n+- #5964 `b4c219b` Lightweight task scheduler\n+- #6116 `30dc3c1` [OSX] rename Bitcoin-Qt.app to Bitcoin-Core.app\n+- #6168 `b3024f0` contrib/linearize: Support linearization of testnet blocks\n+- #6098 `7708fcd` Update Windows resource files (and add one for bitcoin-tx)\n+- #6159 `e1412d3` Catch errors on datadir lock and pidfile delete\n+- #6186 `182686c` Fix two problems in CSubnet parsing\n+- #6174 `df992b9` doc: add translation strings policy\n+- #6210 `dfdb6dd` build: disable optional use of gmp in internal secp256k1 build\n+- #6264 `94cd705` Remove translation for -help-debug options\n+- #6286 `3902c15` Remove berkeley-db4 workaround in MacOSX build docs\n+- #6319 `3f8fcc9` doc: update mailing list address\n+\n+Credits\n+=======\n+\n+Thanks to everyone who directly contributed to this release:\n+\n+- 21E14\n+- Adam Weiss\n+- Alex Morcos\n+- ayeowch\n+- azeteki\n+- Ben Holden-Crowther\n+- bikinibabe\n+- BitcoinPRReadingGroup\n+- Blake Jakopovic\n+- BtcDrak\n+- charlescharles\n+- Chris Arnesen\n+- Ciemon\n+- CohibAA\n+- Corinne Dashjr\n+- Cory Fields\n+- Cozz Lovan\n+- Daira Hopwood\n+- Daniel Kraft\n+- Dave Collins\n+- David A. Harding\n+- dexX7\n+- Earlz\n+- Eric Lombrozo\n+- Eric R. Schulz\n+- Everett Forth\n+- Flavien Charlon\n+- fsb4000\n+- Gavin Andresen\n+- Gregory Maxwell\n+- Heath\n+- Ivan Pustogarov\n+- Jacob Welsh\n+- Jameson Lopp\n+- Jason Lewicki\n+- Jeff Garzik\n+- Jonas Schnelli\n+- Jonathan Brown\n+- Jorge Tim\u00f3n\n+- joshr\n+- jtimon\n+- Julian Yap\n+- Luca Venturini\n+- Luke Dashjr\n+- Manuel Araoz\n+- MarcoFalke\n+- Matt Bogosian\n+- Matt Corallo\n+- Micha\n+- Michael Ford\n+- Mike Hearn\n+- mrbandrews\n+- Nicolas Benoit\n+- paveljanik\n+- Pavel Jan\u00edk\n+- Pavel Vasin\n+- Peter Todd\n+- Philip Kaufmann\n+- Pieter Wuille\n+- pstratem\n+- randy-waterhouse\n+- rion\n+- Rob Van Mieghem\n+- Ross Nicoll\n+- Ruben de Vries\n+- sandakersmann\n+- Shaul Kfir\n+- Shawn Wilkinson\n+- sinetek\n+- Suhas Daftuar\n+- svost\n+- Thomas Zander\n+- Tom Harding\n+- UdjinM6\n+- Vitalii Demianets\n+- Wladimir J. van der Laan\n+\n+And all those who contributed additional code review and/or security research:\n+\n+- Sergio Demian Lerner\n+\n+As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/).\n+"
      }
    ]
  },
  {
    "sha": "5922b6774e352e802ca9a347cc224cfebf1a6a7d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OTIyYjY3NzRlMzUyZTgwMmNhOWEzNDdjYzIyNGNmZWJmMWE2YTdk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-05T17:02:19Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-05T17:02:19Z"
      },
      "message": "Add assertion and cast before sending reject code\n\nThis gets rid of a warning. Add an assertion to make sure that the\nreject code is in the correct range for the network protocol\n(if it is outside the range it must be a bug)",
      "tree": {
        "sha": "e6de6f25e2bd81b9c89d22c46a49873c88e21b42",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e6de6f25e2bd81b9c89d22c46a49873c88e21b42"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5922b6774e352e802ca9a347cc224cfebf1a6a7d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5922b6774e352e802ca9a347cc224cfebf1a6a7d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5922b6774e352e802ca9a347cc224cfebf1a6a7d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5922b6774e352e802ca9a347cc224cfebf1a6a7d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a651403e09ccc9ac0a3322e880d6543dd51a14bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a651403e09ccc9ac0a3322e880d6543dd51a14bd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a651403e09ccc9ac0a3322e880d6543dd51a14bd"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "4bf58836925f0dc8a4a4edfbe2f702c91546bb02",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5922b6774e352e802ca9a347cc224cfebf1a6a7d/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5922b6774e352e802ca9a347cc224cfebf1a6a7d/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=5922b6774e352e802ca9a347cc224cfebf1a6a7d",
        "patch": "@@ -1343,7 +1343,8 @@ void static InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state\n     if (state.IsInvalid(nDoS)) {\n         std::map<uint256, NodeId>::iterator it = mapBlockSource.find(pindex->GetBlockHash());\n         if (it != mapBlockSource.end() && State(it->second)) {\n-            CBlockReject reject = {state.GetRejectCode(), state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), pindex->GetBlockHash()};\n+            assert(state.GetRejectCode() < 0x100);\n+            CBlockReject reject = {(unsigned char)state.GetRejectCode(), state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), pindex->GetBlockHash()};\n             State(it->second)->rejects.push_back(reject);\n             if (nDoS > 0)\n                 Misbehaving(it->second, nDoS);"
      }
    ]
  },
  {
    "sha": "a0625b8085aa379ac5f7bdca6f2cbf3cbb4a5d0a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMDYyNWI4MDg1YWEzNzlhYzVmN2JkY2E2ZjJjYmYzY2JiNGE1ZDBh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-05T17:12:46Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-05T17:12:48Z"
      },
      "message": "Merge pull request #5913\n\n5922b67 Add assertion and cast before sending reject code (Wladimir J. van der Laan)\na651403 Add absurdly high fee message to validation state (for RPC propagation) (Shaul Kfir)",
      "tree": {
        "sha": "efb535486e2d574f13049963f3a25c0757a5ebf8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/efb535486e2d574f13049963f3a25c0757a5ebf8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a0625b8085aa379ac5f7bdca6f2cbf3cbb4a5d0a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVwkQQAAoJEHSBCwEjRsmmvW0H/0vyMEaLRqW8ZGBo0BO/IkXp\nIwEkJKhD0Ul+crkJZs6Iz/nCK978bqtsJQ3og4lCyZXi7SquOGtOJRZimGOywO9Z\nRTB71M8MWAuarjeFz8hVqgh8p3e3f5cOUVTvt9Q4XaKJ8XQoL37IkhuSN+v8/34F\n6ocazIdsqRlqkcE5Exn/1GjFUTZuELx0DwDEjFIIrlIgAh+z2IRAIGJW/w3jP9gp\n1wnM+32ESKnxeIiksRWxZATE0H4fbnU7zk7lzDqo+S3pabkO4iaP+n/DI8J1BiNf\nXP0sTZWCrfJsLEVybVLC9qh7qiVxsy0ijnn8OlwoEK8WZD/xL5FuwbR9M8SLLts=\n=kYUR\n-----END PGP SIGNATURE-----",
        "payload": "tree efb535486e2d574f13049963f3a25c0757a5ebf8\nparent c3848000277d5ab6b5f5faecb1d21b89374ef999\nparent 5922b6774e352e802ca9a347cc224cfebf1a6a7d\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1438794766 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1438794768 +0200\n\nMerge pull request #5913\n\n5922b67 Add assertion and cast before sending reject code (Wladimir J. van der Laan)\na651403 Add absurdly high fee message to validation state (for RPC propagation) (Shaul Kfir)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0625b8085aa379ac5f7bdca6f2cbf3cbb4a5d0a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a0625b8085aa379ac5f7bdca6f2cbf3cbb4a5d0a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0625b8085aa379ac5f7bdca6f2cbf3cbb4a5d0a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c3848000277d5ab6b5f5faecb1d21b89374ef999",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3848000277d5ab6b5f5faecb1d21b89374ef999",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c3848000277d5ab6b5f5faecb1d21b89374ef999"
      },
      {
        "sha": "5922b6774e352e802ca9a347cc224cfebf1a6a7d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5922b6774e352e802ca9a347cc224cfebf1a6a7d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5922b6774e352e802ca9a347cc224cfebf1a6a7d"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 13,
      "deletions": 8
    },
    "files": [
      {
        "sha": "719e090a42d85d239b7922fb172762994bb6a15a",
        "filename": "src/consensus/validation.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0625b8085aa379ac5f7bdca6f2cbf3cbb4a5d0a/src/consensus/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0625b8085aa379ac5f7bdca6f2cbf3cbb4a5d0a/src/consensus/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/validation.h?ref=a0625b8085aa379ac5f7bdca6f2cbf3cbb4a5d0a",
        "patch": "@@ -28,12 +28,12 @@ class CValidationState {\n     } mode;\n     int nDoS;\n     std::string strRejectReason;\n-    unsigned char chRejectCode;\n+    unsigned int chRejectCode;\n     bool corruptionPossible;\n public:\n     CValidationState() : mode(MODE_VALID), nDoS(0), chRejectCode(0), corruptionPossible(false) {}\n     bool DoS(int level, bool ret = false,\n-             unsigned char chRejectCodeIn=0, std::string strRejectReasonIn=\"\",\n+             unsigned int chRejectCodeIn=0, std::string strRejectReasonIn=\"\",\n              bool corruptionIn=false) {\n         chRejectCode = chRejectCodeIn;\n         strRejectReason = strRejectReasonIn;\n@@ -45,7 +45,7 @@ class CValidationState {\n         return ret;\n     }\n     bool Invalid(bool ret = false,\n-                 unsigned char _chRejectCode=0, std::string _strRejectReason=\"\") {\n+                 unsigned int _chRejectCode=0, std::string _strRejectReason=\"\") {\n         return DoS(0, ret, _chRejectCode, _strRejectReason);\n     }\n     bool Error(const std::string& strRejectReasonIn) {\n@@ -73,7 +73,7 @@ class CValidationState {\n     bool CorruptionPossible() const {\n         return corruptionPossible;\n     }\n-    unsigned char GetRejectCode() const { return chRejectCode; }\n+    unsigned int GetRejectCode() const { return chRejectCode; }\n     std::string GetRejectReason() const { return strRejectReason; }\n };\n "
      },
      {
        "sha": "79cc606856a34bc0aa45175ce43ae87318194616",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0625b8085aa379ac5f7bdca6f2cbf3cbb4a5d0a/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0625b8085aa379ac5f7bdca6f2cbf3cbb4a5d0a/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a0625b8085aa379ac5f7bdca6f2cbf3cbb4a5d0a",
        "patch": "@@ -927,9 +927,10 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         }\n \n         if (fRejectAbsurdFee && nFees > ::minRelayTxFee.GetFee(nSize) * 10000)\n-            return error(\"AcceptToMemoryPool: absurdly high fees %s, %d > %d\",\n-                         hash.ToString(),\n-                         nFees, ::minRelayTxFee.GetFee(nSize) * 10000);\n+            return state.Invalid(error(\"AcceptToMemoryPool: absurdly high fees %s, %d > %d\",\n+                                       hash.ToString(),\n+                                       nFees, ::minRelayTxFee.GetFee(nSize) * 10000),\n+                                 REJECT_HIGHFEE, \"absurdly-high-fee\");\n \n         // Check against previous transactions\n         // This is done last to help prevent CPU exhaustion denial-of-service attacks.\n@@ -1238,7 +1239,8 @@ void static InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state\n     if (state.IsInvalid(nDoS)) {\n         std::map<uint256, NodeId>::iterator it = mapBlockSource.find(pindex->GetBlockHash());\n         if (it != mapBlockSource.end() && State(it->second)) {\n-            CBlockReject reject = {state.GetRejectCode(), state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), pindex->GetBlockHash()};\n+            assert(state.GetRejectCode() < 0x100);\n+            CBlockReject reject = {(unsigned char)state.GetRejectCode(), state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), pindex->GetBlockHash()};\n             State(it->second)->rejects.push_back(reject);\n             if (nDoS > 0)\n                 Misbehaving(it->second, nDoS);"
      },
      {
        "sha": "eec7e6fa595e97deddbffcc052c099f4520c526e",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0625b8085aa379ac5f7bdca6f2cbf3cbb4a5d0a/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0625b8085aa379ac5f7bdca6f2cbf3cbb4a5d0a/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=a0625b8085aa379ac5f7bdca6f2cbf3cbb4a5d0a",
        "patch": "@@ -455,4 +455,7 @@ extern CBlockTreeDB *pblocktree;\n  */\n int GetSpendHeight(const CCoinsViewCache& inputs);\n \n+/** local \"reject\" message codes for RPC which can not be triggered by p2p trasactions */\n+static const unsigned int REJECT_HIGHFEE = 0x100;\n+\n #endif // BITCOIN_MAIN_H"
      }
    ]
  },
  {
    "sha": "149f96c9b0693a61f27016572a12fb21436a442d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNDlmOTZjOWIwNjkzYTYxZjI3MDE2NTcyYTEyZmIyMTQzNmE0NDJk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-05T17:15:42Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-05T17:15:50Z"
      },
      "message": "Merge pull request #6521\n\n75a8803 Add v0.11.0 release notes (Casey Rodarmor)",
      "tree": {
        "sha": "96459a110ad5c8726f9555b2be314021debd8735",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/96459a110ad5c8726f9555b2be314021debd8735"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/149f96c9b0693a61f27016572a12fb21436a442d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVwkTGAAoJEHSBCwEjRsmmv8IH/R6BhwEE4O9cxhHAkF2J2juR\nIvqACF3RzO8ufcP4YYZA1dMdX5NJUq2BEcarRPK/eEC/j/PSnuVFwo7T2TsRrF41\nJ6u9IxLjnsFLaT5/1ApW4FUkJ3Vls9xcyGYuoamhUtYbeQlc3wz/sOOd7rqaJCww\n2W4FVD1Lk6tWb+7DG5qoaQNRNNfF6cLfb2pWL+orMOsuepSHX5qCN0qnmoXOtEkW\ng/5yvYu9f/0Kcb6Ojc4ErwPT2VRZGAxY6bxkXSU86V4MKGnLBytmTBpSO/pFn5H1\nmO/oLCbiHzNKizsTS3NF9/QkUy+pjpT2Lc/cNA6ujJAM+X4eqmf3Abh++P3R4VY=\n=Z4XK\n-----END PGP SIGNATURE-----",
        "payload": "tree 96459a110ad5c8726f9555b2be314021debd8735\nparent a0625b8085aa379ac5f7bdca6f2cbf3cbb4a5d0a\nparent 75a880390191aeaf7d2fa326f194349a891db022\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1438794942 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1438794950 +0200\n\nMerge pull request #6521\n\n75a8803 Add v0.11.0 release notes (Casey Rodarmor)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/149f96c9b0693a61f27016572a12fb21436a442d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/149f96c9b0693a61f27016572a12fb21436a442d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/149f96c9b0693a61f27016572a12fb21436a442d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a0625b8085aa379ac5f7bdca6f2cbf3cbb4a5d0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0625b8085aa379ac5f7bdca6f2cbf3cbb4a5d0a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a0625b8085aa379ac5f7bdca6f2cbf3cbb4a5d0a"
      },
      {
        "sha": "75a880390191aeaf7d2fa326f194349a891db022",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75a880390191aeaf7d2fa326f194349a891db022",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/75a880390191aeaf7d2fa326f194349a891db022"
      }
    ],
    "stats": {
      "total": 505,
      "additions": 505,
      "deletions": 0
    },
    "files": [
      {
        "sha": "28e49fb7ea64838f81a72424217e755a62e865c8",
        "filename": "doc/release-notes/release-notes-0.11.0.md",
        "status": "added",
        "additions": 505,
        "deletions": 0,
        "changes": 505,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/149f96c9b0693a61f27016572a12fb21436a442d/doc/release-notes/release-notes-0.11.0.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/149f96c9b0693a61f27016572a12fb21436a442d/doc/release-notes/release-notes-0.11.0.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.11.0.md?ref=149f96c9b0693a61f27016572a12fb21436a442d",
        "patch": "@@ -0,0 +1,505 @@\n+Bitcoin Core version 0.11.0 is now available from:\n+\n+  <https://bitcoin.org/bin/bitcoin-core-0.11.0/>\n+\n+This is a new major version release, bringing both new features and\n+bug fixes.\n+\n+Please report bugs using the issue tracker at github:\n+\n+  <https://github.com/bitcoin/bitcoin/issues>\n+\n+Upgrading and downgrading\n+=========================\n+\n+How to Upgrade\n+--------------\n+\n+If you are running an older version, shut it down. Wait until it has completely\n+shut down (which might take a few minutes for older versions), then run the\n+installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or\n+bitcoind/bitcoin-qt (on Linux).\n+\n+Downgrade warning\n+------------------\n+\n+Because release 0.10.0 and later makes use of headers-first synchronization and\n+parallel block download (see further), the block files and databases are not\n+backwards-compatible with pre-0.10 versions of Bitcoin Core or other software:\n+\n+* Blocks will be stored on disk out of order (in the order they are\n+received, really), which makes it incompatible with some tools or\n+other programs. Reindexing using earlier versions will also not work\n+anymore as a result of this.\n+\n+* The block index database will now hold headers for which no block is\n+stored on disk, which earlier versions won't support.\n+\n+If you want to be able to downgrade smoothly, make a backup of your entire data\n+directory. Without this your node will need start syncing (or importing from\n+bootstrap.dat) anew afterwards. It is possible that the data from a completely\n+synchronised 0.10 node may be usable in older versions as-is, but this is not\n+supported and may break as soon as the older version attempts to reindex.\n+\n+This does not affect wallet forward or backward compatibility. There are no\n+known problems when downgrading from 0.11.x to 0.10.x.\n+\n+Important information\n+======================\n+\n+Transaction flooding\n+---------------------\n+\n+At the time of this release, the P2P network is being flooded with low-fee\n+transactions. This causes a ballooning of the mempool size.\n+\n+If this growth of the mempool causes problematic memory use on your node, it is\n+possible to change a few configuration options to work around this. The growth\n+of the mempool can be monitored with the RPC command `getmempoolinfo`.\n+\n+One is to increase the minimum transaction relay fee `minrelaytxfee`, which\n+defaults to 0.00001. This will cause transactions with fewer BTC/kB fee to be\n+rejected, and thus fewer transactions entering the mempool.\n+\n+The other is to restrict the relaying of free transactions with\n+`limitfreerelay`. This option sets the number of kB/minute at which\n+free transactions (with enough priority) will be accepted. It defaults to 15.\n+Reducing this number reduces the speed at which the mempool can grow due\n+to free transactions.\n+\n+For example, add the following to `bitcoin.conf`:\n+\n+    minrelaytxfee=0.00005 \n+    limitfreerelay=5\n+\n+More robust solutions are being worked on for a follow-up release.\n+\n+Notable changes\n+===============\n+\n+Block file pruning\n+----------------------\n+\n+This release supports running a fully validating node without maintaining a copy \n+of the raw block and undo data on disk. To recap, there are four types of data \n+related to the blockchain in the bitcoin system: the raw blocks as received over \n+the network (blk???.dat), the undo data (rev???.dat), the block index and the \n+UTXO set (both LevelDB databases). The databases are built from the raw data.\n+\n+Block pruning allows Bitcoin Core to delete the raw block and undo data once \n+it's been validated and used to build the databases. At that point, the raw data \n+is used only to relay blocks to other nodes, to handle reorganizations, to look \n+up old transactions (if -txindex is enabled or via the RPC/REST interfaces), or \n+for rescanning the wallet. The block index continues to hold the metadata about \n+all blocks in the blockchain.\n+\n+The user specifies how much space to allot for block & undo files. The minimum \n+allowed is 550MB. Note that this is in addition to whatever is required for the \n+block index and UTXO databases. The minimum was chosen so that Bitcoin Core will \n+be able to maintain at least 288 blocks on disk (two days worth of blocks at 10 \n+minutes per block). In rare instances it is possible that the amount of space \n+used will exceed the pruning target in order to keep the required last 288 \n+blocks on disk.\n+\n+Block pruning works during initial sync in the same way as during steady state, \n+by deleting block files \"as you go\" whenever disk space is allocated. Thus, if \n+the user specifies 550MB, once that level is reached the program will begin \n+deleting the oldest block and undo files, while continuing to download the \n+blockchain.\n+\n+For now, block pruning disables block relay.  In the future, nodes with block \n+pruning will at a minimum relay \"new\" blocks, meaning blocks that extend their \n+active chain. \n+\n+Block pruning is currently incompatible with running a wallet due to the fact \n+that block data is used for rescanning the wallet and importing keys or \n+addresses (which require a rescan.) However, running the wallet with block \n+pruning will be supported in the near future, subject to those limitations.\n+\n+Block pruning is also incompatible with -txindex and will automatically disable \n+it.\n+\n+Once you have pruned blocks, going back to unpruned state requires \n+re-downloading the entire blockchain. To do this, re-start the node with \n+-reindex. Note also that any problem that would cause a user to reindex (e.g., \n+disk corruption) will cause a pruned node to redownload the entire blockchain. \n+Finally, note that when a pruned node reindexes, it will delete any blk???.dat \n+and rev???.dat files in the data directory prior to restarting the download.\n+\n+To enable block pruning on the command line:\n+\n+- `-prune=N`: where N is the number of MB to allot for raw block & undo data.\n+\n+Modified RPC calls:\n+\n+- `getblockchaininfo` now includes whether we are in pruned mode or not.\n+- `getblock` will check if the block's data has been pruned and if so, return an \n+error.\n+- `getrawtransaction` will no longer be able to locate a transaction that has a \n+UTXO but where its block file has been pruned. \n+\n+Pruning is disabled by default.\n+\n+Big endian support\n+--------------------\n+\n+Experimental support for big-endian CPU architectures was added in this\n+release. All little-endian specific code was replaced with endian-neutral\n+constructs. This has been tested on at least MIPS and PPC hosts. The build\n+system will automatically detect the endianness of the target.\n+\n+Memory usage optimization\n+--------------------------\n+\n+There have been many changes in this release to reduce the default memory usage\n+of a node, among which:\n+\n+- Accurate UTXO cache size accounting (#6102); this makes the option `-dbcache`\n+  precise where this grossly underestimated memory usage before\n+- Reduce size of per-peer data structure (#6064 and others); this increases the\n+  number of connections that can be supported with the same amount of memory\n+- Reduce the number of threads (#5964, #5679); lowers the amount of (esp.\n+  virtual) memory needed\n+\n+Fee estimation changes\n+----------------------\n+\n+This release improves the algorithm used for fee estimation.  Previously, -1\n+was returned when there was insufficient data to give an estimate.  Now, -1\n+will also be returned when there is no fee or priority high enough for the\n+desired confirmation target. In those cases, it can help to ask for an estimate\n+for a higher target number of blocks. It is not uncommon for there to be no\n+fee or priority high enough to be reliably (85%) included in the next block and\n+for this reason, the default for `-txconfirmtarget=n` has changed from 1 to 2.\n+\n+Privacy: Disable wallet transaction broadcast\n+----------------------------------------------\n+\n+This release adds an option `-walletbroadcast=0` to prevent automatic\n+transaction broadcast and rebroadcast (#5951). This option allows separating\n+transaction submission from the node functionality.\n+\n+Making use of this, third-party scripts can be written to take care of\n+transaction (re)broadcast:\n+\n+- Send the transaction as normal, either through RPC or the GUI\n+- Retrieve the transaction data through RPC using `gettransaction` (NOT\n+  `getrawtransaction`). The `hex` field of the result will contain the raw\n+  hexadecimal representation of the transaction\n+- The transaction can then be broadcasted through arbitrary mechanisms\n+  supported by the script\n+\n+One such application is selective Tor usage, where the node runs on the normal\n+internet but transactions are broadcasted over Tor.\n+\n+For an example script see [bitcoin-submittx](https://github.com/laanwj/bitcoin-submittx).\n+\n+Privacy: Stream isolation for Tor\n+----------------------------------\n+\n+This release adds functionality to create a new circuit for every peer\n+connection, when the software is used with Tor. The new option,\n+`-proxyrandomize`, is on by default.\n+\n+When enabled, every outgoing connection will (potentially) go through a\n+different exit node. That significantly reduces the chance to get unlucky and\n+pick a single exit node that is either malicious, or widely banned from the P2P\n+network. This improves connection reliability as well as privacy, especially\n+for the initial connections.\n+\n+**Important note:** If a non-Tor SOCKS5 proxy is configured that supports\n+authentication, but doesn't require it, this change may cause that proxy to reject\n+connections. A user and password is sent where they weren't before. This setup\n+is exceedingly rare, but in this case `-proxyrandomize=0` can be passed to\n+disable the behavior.\n+\n+0.11.0 Change log\n+=================\n+\n+Detailed release notes follow. This overview includes changes that affect\n+behavior, not code moves, refactors and string updates. For convenience in locating\n+the code changes and accompanying discussion, both the pull request and\n+git merge commit are mentioned.\n+\n+### RPC and REST\n+- #5461 `5f7279a` signrawtransaction: validate private key\n+- #5444 `103f66b` Add /rest/headers/<count>/<hash>.<ext>\n+- #4964 `95ecc0a` Add scriptPubKey field to validateaddress RPC call\n+- #5476 `c986972` Add time offset into getpeerinfo output\n+- #5540 `84eba47` Add unconfirmed and immature balances to getwalletinfo\n+- #5599 `40e96a3` Get rid of the internal miner's hashmeter\n+- #5711 `87ecfb0` Push down RPC locks\n+- #5754 `1c4e3f9` fix getblocktemplate lock issue\n+- #5756 `5d901d8` Fix getblocktemplate_proposals test by mining one block\n+- #5548 `d48ce48` Add /rest/chaininfos\n+- #5992 `4c4f1b4` Push down RPC reqWallet flag\n+- #6036 `585b5db` Show zero value txouts in listunspent\n+- #5199 `6364408` Add RPC call `gettxoutproof` to generate and verify merkle blocks\n+- #5418 `16341cc` Report missing inputs in sendrawtransaction\n+- #5937 `40f5e8d` show script verification errors in signrawtransaction result\n+- #5420 `1fd2d39` getutxos REST command (based on Bip64)\n+- #6193 `42746b0` [REST] remove json input for getutxos, limit to query max. 15 outpoints\n+- #6226 `5901596` json: fail read_string if string contains trailing garbage\n+\n+### Configuration and command-line options\n+- #5636 `a353ad4` Add option `-allowselfsignedrootcertificate` to allow self signed root certs (for testing payment requests)\n+- #5900 `3e8a1f2` Add a consistency check `-checkblockindex` for the block chain data structures\n+- #5951 `7efc9cf` Make it possible to disable wallet transaction broadcast (using `-walletbroadcast=0`)\n+- #5911 `b6ea3bc` privacy: Stream isolation for Tor (on by default, use `-proxyrandomize=0` to disable)\n+- #5863 `c271304` Add autoprune functionality (`-prune=<size>`)\n+- #6153 `0bcf04f` Parameter interaction: disable upnp if -proxy set\n+- #6274 `4d9c7fe` Add option `-alerts` to opt out of alert system\n+\n+### Block and transaction handling\n+- #5367 `dcc1304` Do all block index writes in a batch\n+- #5253 `203632d` Check against MANDATORY flags prior to accepting to mempool\n+- #5459 `4406c3e` Reject headers that build on an invalid parent\n+- #5481 `055f3ae` Apply AreSane() checks to the fees from the network\n+- #5580 `40d65eb` Preemptively catch a few potential bugs\n+- #5349 `f55c5e9` Implement test for merkle tree malleability in CPartialMerkleTree\n+- #5564 `a89b837` clarify obscure uses of EvalScript()\n+- #5521 `8e4578a` Reject non-final txs even in testnet/regtest\n+- #5707 `6af674e` Change hardcoded character constants to descriptive named constants for db keys\n+- #5286 `fcf646c` Change the default maximum OP_RETURN size to 80 bytes\n+- #5710 `175d86e` Add more information to errors in ReadBlockFromDisk\n+- #5948 `b36f1ce` Use GetAncestor to compute new target\n+- #5959 `a0bfc69` Add additional block index consistency checks\n+- #6058 `7e0e7f8` autoprune minor post-merge improvements\n+- #5159 `2cc1372` New fee estimation code\n+- #6102 `6fb90d8` Implement accurate UTXO cache size accounting\n+- #6129 `2a82298` Bug fix for clearing fCheckForPruning\n+- #5947 `e9af4e6` Alert if it is very likely we are getting a bad chain\n+- #6203 `c00ae64` Remove P2SH coinbase flag, no longer interesting\n+- #5985 `37b4e42` Fix removing of orphan transactions\n+- #6221 `6cb70ca` Prune: Support noncontiguous block files\n+- #6256 `fce474c` Use best header chain timestamps to detect partitioning\n+- #6233 `a587606` Advance pindexLastCommonBlock for blocks in chainActive\n+\n+### P2P protocol and network code\n+- #5507 `844ace9` Prevent DOS attacks on in-flight data structures\n+- #5770 `32a8b6a` Sanitize command strings before logging them\n+- #5859 `dd4ffce` Add correct bool combiner for net signals\n+- #5876 `8e4fd0c` Add a NODE_GETUTXO service bit and document NODE_NETWORK\n+- #6028 `b9311fb` Move nLastTry from CAddress to CAddrInfo\n+- #5662 `5048465` Change download logic to allow calling getdata on inbound peers\n+- #5971 `18d2832` replace absolute sleep with conditional wait\n+- #5918 `7bf5d5e` Use equivalent PoW for non-main-chain requests\n+- #6059 `f026ab6` chainparams: use SeedSpec6's rather than CAddress's for fixed seeds\n+- #6080 `31c0bf1` Add jonasschnellis dns seeder\n+- #5976 `9f7809f` Reduce download timeouts as blocks arrive\n+- #6172 `b4bbad1` Ignore getheaders requests when not synced\n+- #5875 `304892f` Be stricter in processing unrequested blocks\n+- #6333 `41bbc85` Hardcoded seeds update June 2015\n+\n+### Validation\n+- #5143 `48e1765` Implement BIP62 rule 6\n+- #5713 `41e6e4c` Implement BIP66\n+\n+### Build system\n+- #5501 `c76c9d2` Add mips, mipsel and aarch64 to depends platforms\n+- #5334 `cf87536` libbitcoinconsensus: Add pkg-config support\n+- #5514 `ed11d53` Fix 'make distcheck'\n+- #5505 `a99ef7d` Build winshutdownmonitor.cpp on Windows only\n+- #5582 `e8a6639` Osx toolchain update\n+- #5684 `ab64022` osx: bump build sdk to 10.9\n+- #5695 `23ef5b7` depends: latest config.guess and config.sub\n+- #5509 `31dedb4` Fixes when compiling in c++11 mode\n+- #5819 `f8e68f7` release: use static libstdc++ and disable reduced exports by default\n+- #5510 `7c3fbc3` Big endian support\n+- #5149 `c7abfa5` Add script to verify all merge commits are signed\n+- #6082 `7abbb7e` qt: disable qt tests when one of the checks for the gui fails\n+- #6244 `0401aa2` configure: Detect (and reject) LibreSSL\n+- #6269 `95aca44` gitian: Use the new bitcoin-detached-sigs git repo for OSX signatures\n+- #6285 `ef1d506` Fix scheduler build with some boost versions.\n+- #6280 `25c2216` depends: fix Boost 1.55 build on GCC 5\n+- #6303 `b711599` gitian: add a gitian-win-signer descriptor\n+- #6246 `8ea6d37` Fix build on FreeBSD\n+- #6282 `daf956b` fix crash on shutdown when e.g. changing -txindex and abort action\n+- #6354 `bdf0d94` Gitian windows signing normalization\n+\n+### Wallet\n+- #2340 `811c71d` Discourage fee sniping with nLockTime\n+- #5485 `d01bcc4` Enforce minRelayTxFee on wallet created tx and add a maxtxfee option\n+- #5508 `9a5cabf` Add RandAddSeedPerfmon to MakeNewKey\n+- #4805 `8204e19` Do not flush the wallet in AddToWalletIfInvolvingMe(..)\n+- #5319 `93b7544` Clean up wallet encryption code\n+- #5831 `df5c246` Subtract fee from amount\n+- #6076 `6c97fd1` wallet: fix boost::get usage with boost 1.58\n+- #5511 `23c998d` Sort pending wallet transactions before reaccepting\n+- #6126 `26e08a1` Change default nTxConfirmTarget to 2\n+- #6183 `75a4d51` Fix off-by-one error w/ nLockTime in the wallet\n+- #6276 `c9fd907` Fix getbalance * 0\n+\n+### GUI\n+- #5219 `f3af0c8` New icons\n+- #5228 `bb3c75b` HiDPI (retina) support for splash screen\n+- #5258 `73cbf0a` The RPC Console should be a QWidget to make window more independent\n+- #5488 `851dfc7` Light blue icon color for regtest\n+- #5547 `a39aa74` New icon for the debug window\n+- #5493 `e515309` Adopt style colour for button icons\n+- #5557 `70477a0` On close of splashscreen interrupt verifyDB\n+- #5559 `83be8fd` Make the command-line-args dialog better\n+- #5144 `c5380a9` Elaborate on signverify message dialog warning\n+- #5489 `d1aa3c6` Optimize PNG files\n+- #5649 `e0cd2f5` Use text-color icons for system tray Send/Receive menu entries\n+- #5651 `848f55d` Coin Control: Use U+2248 \"ALMOST EQUAL TO\" rather than a simple tilde\n+- #5626 `ab0d798` Fix icon sizes and column width\n+- #5683 `c7b22aa` add new osx dmg background picture\n+- #5620 `7823598` Payment request expiration bug fix\n+- #5729 `9c4a5a5` Allow unit changes for read-only BitcoinAmountField\n+- #5753 `0f44672` Add bitcoin logo to about screen\n+- #5629 `a956586` Prevent amount overflow problem with payment requests\n+- #5830 `215475a` Don't save geometry for options and about/help window\n+- #5793 `d26f0b2` Honor current network when creating autostart link\n+- #5847 `f238add` Startup script for centos, with documentation\n+- #5915 `5bd3a92` Fix a static qt5 crash when using certain versions of libxcb\n+- #5898 `bb56781` Fix rpc console font size to flexible metrics\n+- #5467 `bc8535b` Payment request / server work - part 2\n+- #6161 `180c164` Remove movable option for toolbar\n+- #6160 `0d862c2` Overviewpage: make sure warning icons gets colored\n+\n+### Tests\n+- #5453 `2f2d337` Add ability to run single test manually to RPC tests\n+- #5421 `886eb57` Test unexecuted OP_CODESEPARATOR\n+- #5530 `565b300` Additional rpc tests\n+- #5611 `37b185c` Fix spurious windows test failures after 012598880c\n+- #5613 `2eda47b` Fix smartfees test for change to relay policy\n+- #5612 `e3f5727` Fix zapwallettxes test\n+- #5642 `30a5b5f` Prepare paymentservertests for new unit tests\n+- #5784 `e3a3cd7` Fix usage of NegateSignatureS in script_tests\n+- #5813 `ee9f2bf` Add unit tests for next difficulty calculations\n+- #5855 `d7989c0` Travis: run unit tests in different orders\n+- #5852 `cdae53e` Reinitialize state in between individual unit tests.\n+- #5883 `164d7b6` tests: add a BasicTestingSetup and apply to all tests\n+- #5940 `446bb70` Regression test for ResendWalletTransactions\n+- #6052 `cf7adad` fix and enable bip32 unit test\n+- #6039 `734f80a` tests: Error when setgenerate is used on regtest\n+- #6074 `948beaf` Correct the PUSHDATA4 minimal encoding test in script_invalid.json\n+- #6032 `e08886d` Stop nodes after RPC tests, even with --nocleanup\n+- #6075 `df1609f` Add additional script edge condition tests\n+- #5981 `da38dc6` Python P2P testing \n+- #5958 `9ef00c3` Add multisig rpc tests\n+- #6112 `fec5c0e` Add more script edge condition tests\n+\n+### Miscellaneous\n+- #5457, #5506, #5952, #6047 Update libsecp256k1\n+- #5437 `84857e8` Add missing CAutoFile::IsNull() check in main\n+- #5490 `ec20fd7` Replace uint256/uint160 with opaque blobs where possible\n+- #5654, #5764 Adding jonasschnelli's GPG key\n+- #5477 `5f04d1d` OS X 10.10: LSSharedFileListItemResolve() is deprecated\n+- #5679 `beff11a` Get rid of DetectShutdownThread\n+- #5787 `9bd8c9b` Add fanquake PGP key\n+- #5366 `47a79bb` No longer check osx compatibility in RenameThread\n+- #5689 `07f4386` openssl: abstract out OPENSSL_cleanse\n+- #5708 `8b298ca` Add list of implemented BIPs\n+- #5809 `46bfbe7` Add bitcoin-cli man page\n+- #5839 `86eb461` keys: remove libsecp256k1 verification until it's actually supported\n+- #5749 `d734d87` Help messages correctly formatted (79 chars)\n+- #5884 `7077fe6` BUGFIX: Stack around the variable 'rv' was corrupted\n+- #5849 `41259ca` contrib/init/bitcoind.openrc: Compatibility with previous OpenRC init script variables\n+- #5950 `41113e3` Fix locale fallback and guard tests against invalid locale settings\n+- #5965 `7c6bfb1` Add git-subtree-check.sh script\n+- #6033 `1623f6e` FreeBSD, OpenBSD thread renaming\n+- #6064 `b46e7c2` Several changes to mruset\n+- #6104 `3e2559c` Show an init message while activating best chain\n+- #6125 `351f73e` Clean up parsing of bool command line args\n+- #5964 `b4c219b` Lightweight task scheduler\n+- #6116 `30dc3c1` [OSX] rename Bitcoin-Qt.app to Bitcoin-Core.app\n+- #6168 `b3024f0` contrib/linearize: Support linearization of testnet blocks\n+- #6098 `7708fcd` Update Windows resource files (and add one for bitcoin-tx)\n+- #6159 `e1412d3` Catch errors on datadir lock and pidfile delete\n+- #6186 `182686c` Fix two problems in CSubnet parsing\n+- #6174 `df992b9` doc: add translation strings policy\n+- #6210 `dfdb6dd` build: disable optional use of gmp in internal secp256k1 build\n+- #6264 `94cd705` Remove translation for -help-debug options\n+- #6286 `3902c15` Remove berkeley-db4 workaround in MacOSX build docs\n+- #6319 `3f8fcc9` doc: update mailing list address\n+\n+Credits\n+=======\n+\n+Thanks to everyone who directly contributed to this release:\n+\n+- 21E14\n+- Adam Weiss\n+- Alex Morcos\n+- ayeowch\n+- azeteki\n+- Ben Holden-Crowther\n+- bikinibabe\n+- BitcoinPRReadingGroup\n+- Blake Jakopovic\n+- BtcDrak\n+- charlescharles\n+- Chris Arnesen\n+- Ciemon\n+- CohibAA\n+- Corinne Dashjr\n+- Cory Fields\n+- Cozz Lovan\n+- Daira Hopwood\n+- Daniel Kraft\n+- Dave Collins\n+- David A. Harding\n+- dexX7\n+- Earlz\n+- Eric Lombrozo\n+- Eric R. Schulz\n+- Everett Forth\n+- Flavien Charlon\n+- fsb4000\n+- Gavin Andresen\n+- Gregory Maxwell\n+- Heath\n+- Ivan Pustogarov\n+- Jacob Welsh\n+- Jameson Lopp\n+- Jason Lewicki\n+- Jeff Garzik\n+- Jonas Schnelli\n+- Jonathan Brown\n+- Jorge Tim\u00f3n\n+- joshr\n+- jtimon\n+- Julian Yap\n+- Luca Venturini\n+- Luke Dashjr\n+- Manuel Araoz\n+- MarcoFalke\n+- Matt Bogosian\n+- Matt Corallo\n+- Micha\n+- Michael Ford\n+- Mike Hearn\n+- mrbandrews\n+- Nicolas Benoit\n+- paveljanik\n+- Pavel Jan\u00edk\n+- Pavel Vasin\n+- Peter Todd\n+- Philip Kaufmann\n+- Pieter Wuille\n+- pstratem\n+- randy-waterhouse\n+- rion\n+- Rob Van Mieghem\n+- Ross Nicoll\n+- Ruben de Vries\n+- sandakersmann\n+- Shaul Kfir\n+- Shawn Wilkinson\n+- sinetek\n+- Suhas Daftuar\n+- svost\n+- Thomas Zander\n+- Tom Harding\n+- UdjinM6\n+- Vitalii Demianets\n+- Wladimir J. van der Laan\n+\n+And all those who contributed additional code review and/or security research:\n+\n+- Sergio Demian Lerner\n+\n+As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/).\n+"
      }
    ]
  },
  {
    "sha": "231c5601a1cd7689fa59e9b67b088b2d5f8d0e1c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMzFjNTYwMWExY2Q3Njg5ZmE1OWU5YjY3YjA4OGIyZDVmOGQwZTFj",
    "commit": {
      "author": {
        "name": "Casey Rodarmor",
        "email": "casey@rodarmor.com",
        "date": "2015-08-06T03:10:14Z"
      },
      "committer": {
        "name": "Casey Rodarmor",
        "email": "casey@rodarmor.com",
        "date": "2015-08-06T03:12:26Z"
      },
      "message": "Use unique name for AlertNotify tempfile",
      "tree": {
        "sha": "d19ee0783bd35a64d0f67332c418ac54d90a2e3d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d19ee0783bd35a64d0f67332c418ac54d90a2e3d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/231c5601a1cd7689fa59e9b67b088b2d5f8d0e1c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/231c5601a1cd7689fa59e9b67b088b2d5f8d0e1c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/231c5601a1cd7689fa59e9b67b088b2d5f8d0e1c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/231c5601a1cd7689fa59e9b67b088b2d5f8d0e1c/comments",
    "author": {
      "login": "casey",
      "id": 1945,
      "node_id": "MDQ6VXNlcjE5NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/casey",
      "html_url": "https://github.com/casey",
      "followers_url": "https://api.github.com/users/casey/followers",
      "following_url": "https://api.github.com/users/casey/following{/other_user}",
      "gists_url": "https://api.github.com/users/casey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/casey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/casey/subscriptions",
      "organizations_url": "https://api.github.com/users/casey/orgs",
      "repos_url": "https://api.github.com/users/casey/repos",
      "events_url": "https://api.github.com/users/casey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/casey/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "casey",
      "id": 1945,
      "node_id": "MDQ6VXNlcjE5NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/casey",
      "html_url": "https://github.com/casey",
      "followers_url": "https://api.github.com/users/casey/followers",
      "following_url": "https://api.github.com/users/casey/following{/other_user}",
      "gists_url": "https://api.github.com/users/casey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/casey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/casey/subscriptions",
      "organizations_url": "https://api.github.com/users/casey/orgs",
      "repos_url": "https://api.github.com/users/casey/repos",
      "events_url": "https://api.github.com/users/casey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/casey/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "149f96c9b0693a61f27016572a12fb21436a442d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/149f96c9b0693a61f27016572a12fb21436a442d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/149f96c9b0693a61f27016572a12fb21436a442d"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "dd3c51d09b36d3b4879c866d97cac11bfdb37e81",
        "filename": "src/test/alert_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/231c5601a1cd7689fa59e9b67b088b2d5f8d0e1c/src/test/alert_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/231c5601a1cd7689fa59e9b67b088b2d5f8d0e1c/src/test/alert_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/alert_tests.cpp?ref=231c5601a1cd7689fa59e9b67b088b2d5f8d0e1c",
        "patch": "@@ -162,8 +162,8 @@ BOOST_AUTO_TEST_CASE(AlertNotify)\n     SetMockTime(11);\n     const std::vector<unsigned char>& alertKey = Params(CBaseChainParams::MAIN).AlertKey();\n \n-    boost::filesystem::path temp = GetTempPath() / \"alertnotify.txt\";\n-    boost::filesystem::remove(temp);\n+    boost::filesystem::path temp = GetTempPath() /\n+        boost::filesystem::unique_path(\"alertnotify-%%%%.txt\");\n \n     mapArgs[\"-alertnotify\"] = std::string(\"echo %s >> \") + temp.string();\n "
      }
    ]
  },
  {
    "sha": "fbf44e6f3e55d25aa40ca466be3dbfd55de6170a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYmY0NGU2ZjNlNTVkMjVhYTQwY2E0NjZiZTNkYmZkNTVkZTYxNzBh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-06T07:47:01Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-06T07:47:01Z"
      },
      "message": "Add debug message to CValidationState for optional extra information\n\nAdd a field `strDebugMessage` which can be passed to DoS or Invalid,\nand queried using GetDebugMessage() to add extra troubleshooting\ninformation to the validation state.",
      "tree": {
        "sha": "b91253c926e3fd2c8ebd3207c4da6b3653619943",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b91253c926e3fd2c8ebd3207c4da6b3653619943"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fbf44e6f3e55d25aa40ca466be3dbfd55de6170a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbf44e6f3e55d25aa40ca466be3dbfd55de6170a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fbf44e6f3e55d25aa40ca466be3dbfd55de6170a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbf44e6f3e55d25aa40ca466be3dbfd55de6170a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "149f96c9b0693a61f27016572a12fb21436a442d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/149f96c9b0693a61f27016572a12fb21436a442d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/149f96c9b0693a61f27016572a12fb21436a442d"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 9,
      "deletions": 4
    },
    "files": [
      {
        "sha": "d6051edc385dc899c168d2420b3ee608c9378d5b",
        "filename": "src/consensus/validation.h",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbf44e6f3e55d25aa40ca466be3dbfd55de6170a/src/consensus/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbf44e6f3e55d25aa40ca466be3dbfd55de6170a/src/consensus/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/validation.h?ref=fbf44e6f3e55d25aa40ca466be3dbfd55de6170a",
        "patch": "@@ -30,23 +30,27 @@ class CValidationState {\n     std::string strRejectReason;\n     unsigned int chRejectCode;\n     bool corruptionPossible;\n+    std::string strDebugMessage;\n public:\n     CValidationState() : mode(MODE_VALID), nDoS(0), chRejectCode(0), corruptionPossible(false) {}\n     bool DoS(int level, bool ret = false,\n-             unsigned int chRejectCodeIn=0, std::string strRejectReasonIn=\"\",\n-             bool corruptionIn=false) {\n+             unsigned int chRejectCodeIn=0, const std::string &strRejectReasonIn=\"\",\n+             bool corruptionIn=false,\n+             const std::string &strDebugMessageIn=\"\") {\n         chRejectCode = chRejectCodeIn;\n         strRejectReason = strRejectReasonIn;\n         corruptionPossible = corruptionIn;\n+        strDebugMessage = strDebugMessageIn;\n         if (mode == MODE_ERROR)\n             return ret;\n         nDoS += level;\n         mode = MODE_INVALID;\n         return ret;\n     }\n     bool Invalid(bool ret = false,\n-                 unsigned int _chRejectCode=0, std::string _strRejectReason=\"\") {\n-        return DoS(0, ret, _chRejectCode, _strRejectReason);\n+                 unsigned int _chRejectCode=0, const std::string &_strRejectReason=\"\",\n+                 const std::string &_strDebugMessage=\"\") {\n+        return DoS(0, ret, _chRejectCode, _strRejectReason, false, _strDebugMessage);\n     }\n     bool Error(const std::string& strRejectReasonIn) {\n         if (mode == MODE_VALID)\n@@ -75,6 +79,7 @@ class CValidationState {\n     }\n     unsigned int GetRejectCode() const { return chRejectCode; }\n     std::string GetRejectReason() const { return strRejectReason; }\n+    std::string GetDebugMessage() const { return strDebugMessage; }\n };\n \n #endif // BITCOIN_CONSENSUS_VALIDATION_H"
      }
    ]
  },
  {
    "sha": "2f746c6e8a5d10fa2d432de9b43b694f40d5f4a1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZjc0NmM2ZThhNWQxMGZhMmQ0MzJkZTliNDNiNjk0ZjQwZDVmNGEx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-06T09:59:53Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-06T10:01:21Z"
      },
      "message": "Merge pull request #6177\n\nef8dfe4 Prevent block.nTime from decreasing (Mark Friedenbach)",
      "tree": {
        "sha": "79269aacdc5605b430d60a73a20ed2f52397857d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/79269aacdc5605b430d60a73a20ed2f52397857d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2f746c6e8a5d10fa2d432de9b43b694f40d5f4a1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVwzByAAoJEHSBCwEjRsmmNP4IAMrn20vHti1GlVD6umYsAhkY\n0c74qi2KanPsGIKOL1Q8V8OvZJT28S1TXfkJILfy3EavCC5ItsFWQUKpgmRacXbM\nmvmG8b22/YA7Id0dIX/2u/0vHEqtqJyqErMJQnuvZ90S/gDqufzyemeSgf6zSbre\n2wYvAwhNiWxOB8SCmtZKqqi9D8Xj5aCTHsNh0XLvzKCKwm3vGmflF3kRUZKS5DfY\nzNoLvpf9ZhlT4mU2b6TCsVSlBrjeLh2cs6P6XCuXrp4AxOHGWW1N+PUu8eMpHvVN\nYs0WteW3RgbQEnDS/FsH/RKlIG2ZUxLfxAZ5wYaqL8kz098kc6jJN2F3+uZy7aY=\n=jdt4\n-----END PGP SIGNATURE-----",
        "payload": "tree 79269aacdc5605b430d60a73a20ed2f52397857d\nparent 149f96c9b0693a61f27016572a12fb21436a442d\nparent ef8dfe41d1eba0de6d6554e25e658169f97313b5\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1438855193 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1438855281 +0200\n\nMerge pull request #6177\n\nef8dfe4 Prevent block.nTime from decreasing (Mark Friedenbach)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f746c6e8a5d10fa2d432de9b43b694f40d5f4a1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2f746c6e8a5d10fa2d432de9b43b694f40d5f4a1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f746c6e8a5d10fa2d432de9b43b694f40d5f4a1/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "149f96c9b0693a61f27016572a12fb21436a442d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/149f96c9b0693a61f27016572a12fb21436a442d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/149f96c9b0693a61f27016572a12fb21436a442d"
      },
      {
        "sha": "ef8dfe41d1eba0de6d6554e25e658169f97313b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef8dfe41d1eba0de6d6554e25e658169f97313b5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ef8dfe41d1eba0de6d6554e25e658169f97313b5"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 12,
      "deletions": 4
    },
    "files": [
      {
        "sha": "864e4bf31f02af459b181cfa624a0587ce4440f1",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 3,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f746c6e8a5d10fa2d432de9b43b694f40d5f4a1/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f746c6e8a5d10fa2d432de9b43b694f40d5f4a1/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=2f746c6e8a5d10fa2d432de9b43b694f40d5f4a1",
        "patch": "@@ -84,13 +84,19 @@ class TxPriorityCompare\n     }\n };\n \n-void UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev)\n+int64_t UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev)\n {\n-    pblock->nTime = std::max(pindexPrev->GetMedianTimePast()+1, GetAdjustedTime());\n+    int64_t nOldTime = pblock->nTime;\n+    int64_t nNewTime = std::max(pindexPrev->GetMedianTimePast()+1, GetAdjustedTime());\n+\n+    if (nOldTime < nNewTime)\n+        pblock->nTime = nNewTime;\n \n     // Updating time can change work required on testnet:\n     if (consensusParams.fPowAllowMinDifficultyBlocks)\n         pblock->nBits = GetNextWorkRequired(pindexPrev, pblock, consensusParams);\n+\n+    return nNewTime - nOldTime;\n }\n \n CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n@@ -521,7 +527,9 @@ void static BitcoinMiner(const CChainParams& chainparams)\n                     break;\n \n                 // Update nTime every few seconds\n-                UpdateTime(pblock, chainparams.GetConsensus(), pindexPrev);\n+                if (UpdateTime(pblock, chainparams.GetConsensus(), pindexPrev) < 0)\n+                    break; // Recreate the block if the clock has run backwards,\n+                           // so that we can use the correct time.\n                 if (chainparams.GetConsensus().fPowAllowMinDifficultyBlocks)\n                 {\n                     // Changing pblock->nTime can change work required on testnet:"
      },
      {
        "sha": "d690e9447d7783914376e6dfe13c74e299e85097",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f746c6e8a5d10fa2d432de9b43b694f40d5f4a1/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f746c6e8a5d10fa2d432de9b43b694f40d5f4a1/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=2f746c6e8a5d10fa2d432de9b43b694f40d5f4a1",
        "patch": "@@ -30,6 +30,6 @@ void GenerateBitcoins(bool fGenerate, int nThreads, const CChainParams& chainpar\n CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn);\n /** Modify the extranonce in a block */\n void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce);\n-void UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev);\n+int64_t UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev);\n \n #endif // BITCOIN_MINER_H"
      }
    ]
  },
  {
    "sha": "a4fe57da6207c1e5691a1e843d22db571f3f0186",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNGZlNTdkYTYyMDdjMWU1NjkxYTFlODQzZDIyZGI1NzFmM2YwMTg2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-06T12:14:48Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-06T12:15:54Z"
      },
      "message": "Revert \"Assert on probable deadlocks if the second lock isnt try_lock\"\n\nDisabling this for now - too many intermittent Travis issues.\n\nThis reverts commit 0fcc4e1e04082daf6e97e05bfb26e4b94e54ea53\n(pull #5515).",
      "tree": {
        "sha": "e2d25c76084cf4e2a4fd151db35185b955d2f5af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e2d25c76084cf4e2a4fd151db35185b955d2f5af"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a4fe57da6207c1e5691a1e843d22db571f3f0186",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVw1ARAAoJEHSBCwEjRsmm/48H+wYDahzOnDu2TGqa3LfBiGM6\nAYNZrxe0BwB1g7jEmTG58kNWfjJxeUJK+zOmR0azmQbWZs3NDYqvG2O/7QudBfpg\nYnraMP1qIYqgbzj3J22FIQHp+nzSTNeNQPKBWSmVM9FCa55Eu//Sq4EgH9j6SbnT\nGAS9LpypFSHekSz5Mp9N7dOGYUfQVdQgJySpseghDveo178hIsLk3ztABNb/FDDR\nxXFHzasBclhSbIRTSm/TVmWqoANKnV0d6xi8hh7uekT3hVK+HL+wcgogbzRbhyEO\nB7VLPtjpIt1FAVLLYZ8sJWZD8JrE0gGayRtzg35jcipJM7H8cJ2wI3quVB14RKY=\n=qce0\n-----END PGP SIGNATURE-----",
        "payload": "tree e2d25c76084cf4e2a4fd151db35185b955d2f5af\nparent 2f746c6e8a5d10fa2d432de9b43b694f40d5f4a1\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1438863288 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1438863354 +0200\n\nRevert \"Assert on probable deadlocks if the second lock isnt try_lock\"\n\nDisabling this for now - too many intermittent Travis issues.\n\nThis reverts commit 0fcc4e1e04082daf6e97e05bfb26e4b94e54ea53\n(pull #5515).\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4fe57da6207c1e5691a1e843d22db571f3f0186",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a4fe57da6207c1e5691a1e843d22db571f3f0186",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4fe57da6207c1e5691a1e843d22db571f3f0186/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2f746c6e8a5d10fa2d432de9b43b694f40d5f4a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f746c6e8a5d10fa2d432de9b43b694f40d5f4a1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2f746c6e8a5d10fa2d432de9b43b694f40d5f4a1"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 10,
      "deletions": 39
    },
    "files": [
      {
        "sha": "a422939964277912d3a4732a12d9e12cfa1644ef",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 39,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4fe57da6207c1e5691a1e843d22db571f3f0186/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4fe57da6207c1e5691a1e843d22db571f3f0186/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=a4fe57da6207c1e5691a1e843d22db571f3f0186",
        "patch": "@@ -33,22 +33,20 @@ void PrintLockContention(const char* pszName, const char* pszFile, int nLine)\n //\n \n struct CLockLocation {\n-    CLockLocation(const char* pszName, const char* pszFile, int nLine, bool fTryIn)\n+    CLockLocation(const char* pszName, const char* pszFile, int nLine)\n     {\n         mutexName = pszName;\n         sourceFile = pszFile;\n         sourceLine = nLine;\n-        fTry = fTryIn;\n     }\n \n     std::string ToString() const\n     {\n-        return mutexName + \"  \" + sourceFile + \":\" + itostr(sourceLine) + (fTry ? \" (TRY)\" : \"\");\n+        return mutexName + \"  \" + sourceFile + \":\" + itostr(sourceLine);\n     }\n \n     std::string MutexName() const { return mutexName; }\n \n-    bool fTry;\n private:\n     std::string mutexName;\n     std::string sourceFile;\n@@ -64,52 +62,23 @@ static boost::thread_specific_ptr<LockStack> lockstack;\n \n static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch, const LockStack& s1, const LockStack& s2)\n {\n-    // We attempt to not assert on probably-not deadlocks by assuming that\n-    // a try lock will immediately have otherwise bailed if it had\n-    // failed to get the lock\n-    // We do this by, for the locks which triggered the potential deadlock,\n-    // in either lockorder, checking that the second of the two which is locked\n-    // is only a TRY_LOCK, ignoring locks if they are reentrant.\n-    bool firstLocked = false;\n-    bool secondLocked = false;\n-    bool onlyMaybeDeadlock = false;\n-\n     LogPrintf(\"POTENTIAL DEADLOCK DETECTED\\n\");\n     LogPrintf(\"Previous lock order was:\\n\");\n     BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, s2) {\n-        if (i.first == mismatch.first) {\n+        if (i.first == mismatch.first)\n             LogPrintf(\" (1)\");\n-            if (!firstLocked && secondLocked && i.second.fTry)\n-                onlyMaybeDeadlock = true;\n-            firstLocked = true;\n-        }\n-        if (i.first == mismatch.second) {\n+        if (i.first == mismatch.second)\n             LogPrintf(\" (2)\");\n-            if (!secondLocked && firstLocked && i.second.fTry)\n-                onlyMaybeDeadlock = true;\n-            secondLocked = true;\n-        }\n         LogPrintf(\" %s\\n\", i.second.ToString());\n     }\n-    firstLocked = false;\n-    secondLocked = false;\n     LogPrintf(\"Current lock order is:\\n\");\n     BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, s1) {\n-        if (i.first == mismatch.first) {\n+        if (i.first == mismatch.first)\n             LogPrintf(\" (1)\");\n-            if (!firstLocked && secondLocked && i.second.fTry)\n-                onlyMaybeDeadlock = true;\n-            firstLocked = true;\n-        }\n-        if (i.first == mismatch.second) {\n+        if (i.first == mismatch.second)\n             LogPrintf(\" (2)\");\n-            if (!secondLocked && firstLocked && i.second.fTry)\n-                onlyMaybeDeadlock = true;\n-            secondLocked = true;\n-        }\n         LogPrintf(\" %s\\n\", i.second.ToString());\n     }\n-    assert(onlyMaybeDeadlock);\n }\n \n static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)\n@@ -132,8 +101,10 @@ static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)\n             lockorders[p1] = (*lockstack);\n \n             std::pair<void*, void*> p2 = std::make_pair(c, i.first);\n-            if (lockorders.count(p2))\n+            if (lockorders.count(p2)) {\n                 potential_deadlock_detected(p1, lockorders[p2], lockorders[p1]);\n+                break;\n+            }\n         }\n     }\n     dd_mutex.unlock();\n@@ -148,7 +119,7 @@ static void pop_lock()\n \n void EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry)\n {\n-    push_lock(cs, CLockLocation(pszName, pszFile, nLine, fTry), fTry);\n+    push_lock(cs, CLockLocation(pszName, pszFile, nLine), fTry);\n }\n \n void LeaveCritical()"
      }
    ]
  },
  {
    "sha": "d7078533ebd32bb5071f4dba8e3d9c5a3b1f0d4c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNzA3ODUzM2ViZDMyYmI1MDcxZjRkYmE4ZTNkOWM1YTNiMWYwZDRj",
    "commit": {
      "author": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2015-06-29T18:14:02Z"
      },
      "committer": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2015-08-06T18:27:52Z"
      },
      "message": "Add OP_RETURN support in createrawtransaction RPC call, add tests.",
      "tree": {
        "sha": "af9075aee4ac16bfbf12e7dd47e11210bfde6832",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/af9075aee4ac16bfbf12e7dd47e11210bfde6832"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d7078533ebd32bb5071f4dba8e3d9c5a3b1f0d4c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7078533ebd32bb5071f4dba8e3d9c5a3b1f0d4c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d7078533ebd32bb5071f4dba8e3d9c5a3b1f0d4c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7078533ebd32bb5071f4dba8e3d9c5a3b1f0d4c/comments",
    "author": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a4fe57da6207c1e5691a1e843d22db571f3f0186",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4fe57da6207c1e5691a1e843d22db571f3f0186",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a4fe57da6207c1e5691a1e843d22db571f3f0186"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 45,
      "deletions": 16
    },
    "files": [
      {
        "sha": "9eeca5b7d922d03f3c43f219c8f9f0d894530288",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 16,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7078533ebd32bb5071f4dba8e3d9c5a3b1f0d4c/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7078533ebd32bb5071f4dba8e3d9c5a3b1f0d4c/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=d7078533ebd32bb5071f4dba8e3d9c5a3b1f0d4c",
        "patch": "@@ -318,8 +318,9 @@ UniValue createrawtransaction(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 2)\n         throw runtime_error(\n-            \"createrawtransaction [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n},...] {\\\"address\\\":amount,...}\\n\"\n-            \"\\nCreate a transaction spending the given inputs and sending to the given addresses.\\n\"\n+            \"createrawtransaction [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n},...] {\\\"address\\\":amount,\\\"data\\\":\\\"hex\\\",...}\\n\"\n+            \"\\nCreate a transaction spending the given inputs and creating new outputs.\\n\"\n+            \"Outputs can be addresses or data.\\n\"\n             \"Returns hex-encoded raw transaction.\\n\"\n             \"Note that the transaction's inputs are not signed, and\\n\"\n             \"it is not stored in the wallet or transmitted to the network.\\n\"\n@@ -328,23 +329,25 @@ UniValue createrawtransaction(const UniValue& params, bool fHelp)\n             \"1. \\\"transactions\\\"        (string, required) A json array of json objects\\n\"\n             \"     [\\n\"\n             \"       {\\n\"\n-            \"         \\\"txid\\\":\\\"id\\\",  (string, required) The transaction id\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",    (string, required) The transaction id\\n\"\n             \"         \\\"vout\\\":n        (numeric, required) The output number\\n\"\n             \"       }\\n\"\n             \"       ,...\\n\"\n             \"     ]\\n\"\n-            \"2. \\\"addresses\\\"           (string, required) a json object with addresses as keys and amounts as values\\n\"\n+            \"2. \\\"outputs\\\"             (string, required) a json object with outputs\\n\"\n             \"    {\\n\"\n             \"      \\\"address\\\": x.xxx   (numeric, required) The key is the bitcoin address, the value is the \" + CURRENCY_UNIT + \" amount\\n\"\n-            \"      ,...\\n\"\n+            \"      \\\"data\\\": \\\"hex\\\",     (string, required) The key is \\\"data\\\", the value is hex encoded data\\n\"\n+            \"      ...\\n\"\n             \"    }\\n\"\n-\n             \"\\nResult:\\n\"\n             \"\\\"transaction\\\"            (string) hex string of the transaction\\n\"\n \n             \"\\nExamples\\n\"\n             + HelpExampleCli(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\" \\\"{\\\\\\\"address\\\\\\\":0.01}\\\"\")\n+            + HelpExampleCli(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\" \\\"{\\\\\\\"data\\\\\\\":\\\\\\\"00010203\\\\\\\"}\\\"\")\n             + HelpExampleRpc(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\", \\\"{\\\\\\\"address\\\\\\\":0.01}\\\"\")\n+            + HelpExampleRpc(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\", \\\"{\\\\\\\"data\\\\\\\":\\\\\\\"00010203\\\\\\\"}\\\"\")\n         );\n \n     LOCK(cs_main);\n@@ -375,19 +378,27 @@ UniValue createrawtransaction(const UniValue& params, bool fHelp)\n     set<CBitcoinAddress> setAddress;\n     vector<string> addrList = sendTo.getKeys();\n     BOOST_FOREACH(const string& name_, addrList) {\n-        CBitcoinAddress address(name_);\n-        if (!address.IsValid())\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, string(\"Invalid Bitcoin address: \")+name_);\n \n-        if (setAddress.count(address))\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, string(\"Invalid parameter, duplicated address: \")+name_);\n-        setAddress.insert(address);\n+        if (name_ == \"data\") {\n+            std::vector<unsigned char> data = ParseHexV(sendTo[name_].getValStr(),\"Data\");\n+\n+            CTxOut out(0, CScript() << OP_RETURN << data);\n+            rawTx.vout.push_back(out);\n+        } else {\n+            CBitcoinAddress address(name_);\n+            if (!address.IsValid())\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, string(\"Invalid Bitcoin address: \")+name_);\n \n-        CScript scriptPubKey = GetScriptForDestination(address.Get());\n-        CAmount nAmount = AmountFromValue(sendTo[name_]);\n+            if (setAddress.count(address))\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, string(\"Invalid parameter, duplicated address: \")+name_);\n+            setAddress.insert(address);\n \n-        CTxOut out(nAmount, scriptPubKey);\n-        rawTx.vout.push_back(out);\n+            CScript scriptPubKey = GetScriptForDestination(address.Get());\n+            CAmount nAmount = AmountFromValue(sendTo[name_]);\n+\n+            CTxOut out(nAmount, scriptPubKey);\n+            rawTx.vout.push_back(out);\n+        }\n     }\n \n     return EncodeHexTx(rawTx);"
      },
      {
        "sha": "a65572e6f685a0b56df691e33cfcf46ddc4f5f39",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7078533ebd32bb5071f4dba8e3d9c5a3b1f0d4c/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7078533ebd32bb5071f4dba8e3d9c5a3b1f0d4c/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=d7078533ebd32bb5071f4dba8e3d9c5a3b1f0d4c",
        "patch": "@@ -110,6 +110,24 @@ BOOST_AUTO_TEST_CASE(rpc_rawsign)\n     BOOST_CHECK(find_value(r.get_obj(), \"complete\").get_bool() == true);\n }\n \n+BOOST_AUTO_TEST_CASE(rpc_createraw_op_return)\n+{\n+    BOOST_CHECK_NO_THROW(CallRPC(\"createrawtransaction [{\\\"txid\\\":\\\"a3b807410df0b60fcb9736768df5823938b2f838694939ba45f3c0a1bff150ed\\\",\\\"vout\\\":0}] {\\\"data\\\":\\\"68656c6c6f776f726c64\\\"}\"));\n+\n+    // Allow more than one data transaction output\n+    BOOST_CHECK_NO_THROW(CallRPC(\"createrawtransaction [{\\\"txid\\\":\\\"a3b807410df0b60fcb9736768df5823938b2f838694939ba45f3c0a1bff150ed\\\",\\\"vout\\\":0}] {\\\"data\\\":\\\"68656c6c6f776f726c64\\\",\\\"data\\\":\\\"68656c6c6f776f726c64\\\"}\"));\n+\n+    // Key not \"data\" (bad address)\n+    BOOST_CHECK_THROW(CallRPC(\"createrawtransaction [{\\\"txid\\\":\\\"a3b807410df0b60fcb9736768df5823938b2f838694939ba45f3c0a1bff150ed\\\",\\\"vout\\\":0}] {\\\"somedata\\\":\\\"68656c6c6f776f726c64\\\"}\"), runtime_error);\n+\n+    // Bad hex encoding of data output\n+    BOOST_CHECK_THROW(CallRPC(\"createrawtransaction [{\\\"txid\\\":\\\"a3b807410df0b60fcb9736768df5823938b2f838694939ba45f3c0a1bff150ed\\\",\\\"vout\\\":0}] {\\\"data\\\":\\\"12345\\\"}\"), runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(\"createrawtransaction [{\\\"txid\\\":\\\"a3b807410df0b60fcb9736768df5823938b2f838694939ba45f3c0a1bff150ed\\\",\\\"vout\\\":0}] {\\\"data\\\":\\\"12345g\\\"}\"), runtime_error);\n+\n+    // Data 81 bytes long\n+    BOOST_CHECK_NO_THROW(CallRPC(\"createrawtransaction [{\\\"txid\\\":\\\"a3b807410df0b60fcb9736768df5823938b2f838694939ba45f3c0a1bff150ed\\\",\\\"vout\\\":0}] {\\\"data\\\":\\\"010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081\\\"}\"));\n+}\n+\n BOOST_AUTO_TEST_CASE(rpc_format_monetary_values)\n {\n     BOOST_CHECK(ValueFromAmount(0LL).write() == \"0.00000000\");"
      }
    ]
  },
  {
    "sha": "627468d2ea1f4d5dea9561fe77aaf53f3a83b4d2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2Mjc0NjhkMmVhMWY0ZDVkZWE5NTYxZmU3N2FhZjUzZjNhODNiNGQy",
    "commit": {
      "author": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2015-06-29T18:14:43Z"
      },
      "committer": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2015-08-06T18:27:52Z"
      },
      "message": "Add support for data-based outputs (OP_RETURN) to bitcoin-tx.",
      "tree": {
        "sha": "1e2af78a2c73dcf4e7a15c6f1eb921f205a623fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1e2af78a2c73dcf4e7a15c6f1eb921f205a623fc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/627468d2ea1f4d5dea9561fe77aaf53f3a83b4d2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/627468d2ea1f4d5dea9561fe77aaf53f3a83b4d2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/627468d2ea1f4d5dea9561fe77aaf53f3a83b4d2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/627468d2ea1f4d5dea9561fe77aaf53f3a83b4d2/comments",
    "author": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d7078533ebd32bb5071f4dba8e3d9c5a3b1f0d4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7078533ebd32bb5071f4dba8e3d9c5a3b1f0d4c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d7078533ebd32bb5071f4dba8e3d9c5a3b1f0d4c"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 66,
      "deletions": 0
    },
    "files": [
      {
        "sha": "82891989598f7ea83152121d7b1a5567b69232d2",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/627468d2ea1f4d5dea9561fe77aaf53f3a83b4d2/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/627468d2ea1f4d5dea9561fe77aaf53f3a83b4d2/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=627468d2ea1f4d5dea9561fe77aaf53f3a83b4d2",
        "patch": "@@ -15,6 +15,8 @@ EXTRA_DIST += \\\n \ttest/data/tx394b54bb.hex \\\n \ttest/data/txcreate1.hex \\\n \ttest/data/txcreate2.hex \\\n+\ttest/data/txcreatedata1.hex \\\n+\ttest/data/txcreatedata2.hex \\\n \ttest/data/txcreatesign.hex\n \n JSON_TEST_FILES = \\"
      },
      {
        "sha": "97a073174d1084094f312a9e67f0674f3d17ad15",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/627468d2ea1f4d5dea9561fe77aaf53f3a83b4d2/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/627468d2ea1f4d5dea9561fe77aaf53f3a83b4d2/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=627468d2ea1f4d5dea9561fe77aaf53f3a83b4d2",
        "patch": "@@ -70,6 +70,7 @@ static bool AppInitRawTx(int argc, char* argv[])\n         strUsage += HelpMessageOpt(\"locktime=N\", _(\"Set TX lock time to N\"));\n         strUsage += HelpMessageOpt(\"nversion=N\", _(\"Set TX version to N\"));\n         strUsage += HelpMessageOpt(\"outaddr=VALUE:ADDRESS\", _(\"Add address-based output to TX\"));\n+        strUsage += HelpMessageOpt(\"outdata=[VALUE:]DATA\", _(\"Add data-based output to TX\"));\n         strUsage += HelpMessageOpt(\"outscript=VALUE:SCRIPT\", _(\"Add raw script output to TX\"));\n         strUsage += HelpMessageOpt(\"sign=SIGHASH-FLAGS\", _(\"Add zero or more signatures to transaction\") + \". \" +\n             _(\"This command requires JSON registers:\") +\n@@ -231,6 +232,35 @@ static void MutateTxAddOutAddr(CMutableTransaction& tx, const string& strInput)\n     tx.vout.push_back(txout);\n }\n \n+static void MutateTxAddOutData(CMutableTransaction& tx, const string& strInput)\n+{\n+    CAmount value = 0;\n+\n+    // separate [VALUE:]DATA in string\n+    size_t pos = strInput.find(':');\n+\n+    if (pos==0)\n+        throw runtime_error(\"TX output value not specified\");\n+\n+    if (pos != string::npos) {\n+        // extract and validate VALUE\n+        string strValue = strInput.substr(0, pos);\n+        if (!ParseMoney(strValue, value))\n+            throw runtime_error(\"invalid TX output value\");\n+    }\n+\n+    // extract and validate DATA\n+    string strData = strInput.substr(pos + 1, string::npos);\n+\n+    if (!IsHex(strData))\n+        throw runtime_error(\"invalid TX output data\");\n+\n+    std::vector<unsigned char> data = ParseHex(strData);\n+\n+    CTxOut txout(value, CScript() << OP_RETURN << data);\n+    tx.vout.push_back(txout);\n+}\n+\n static void MutateTxAddOutScript(CMutableTransaction& tx, const string& strInput)\n {\n     // separate VALUE:SCRIPT in string\n@@ -470,6 +500,8 @@ static void MutateTx(CMutableTransaction& tx, const string& command,\n         MutateTxDelOutput(tx, commandVal);\n     else if (command == \"outaddr\")\n         MutateTxAddOutAddr(tx, commandVal);\n+    else if (command == \"outdata\")\n+        MutateTxAddOutData(tx, commandVal);\n     else if (command == \"outscript\")\n         MutateTxAddOutScript(tx, commandVal);\n "
      },
      {
        "sha": "3bf80ca4348a23074f76b71a944a63bac00e4753",
        "filename": "src/test/data/bitcoin-util-test.json",
        "status": "modified",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/627468d2ea1f4d5dea9561fe77aaf53f3a83b4d2/src/test/data/bitcoin-util-test.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/627468d2ea1f4d5dea9561fe77aaf53f3a83b4d2/src/test/data/bitcoin-util-test.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/bitcoin-util-test.json?ref=627468d2ea1f4d5dea9561fe77aaf53f3a83b4d2",
        "patch": "@@ -56,5 +56,35 @@\n      \"sign=ALL\",\n      \"outaddr=0.001:193P6LtvS4nCnkDvM9uXn1gsSRqh4aDAz7\"],\n     \"output_cmp\": \"txcreatesign.hex\"\n+  },\n+  { \"exec\": \"./bitcoin-tx\",\n+    \"args\":\n+    [\"-create\",\n+     \"in=5897de6bd6027a475eadd57019d4e6872c396d0716c4875a5f1a6fcfdf385c1f:0\",\n+     \"outdata=4:badhexdata\"],\n+    \"return_code\": 1\n+  },\n+  { \"exec\": \"./bitcoin-tx\",\n+    \"args\":\n+    [\"-create\",\n+     \"in=5897de6bd6027a475eadd57019d4e6872c396d0716c4875a5f1a6fcfdf385c1f:0\",\n+     \"outdata=badhexdata\"],\n+    \"return_code\": 1\n+  },\n+  { \"exec\": \"./bitcoin-tx\",\n+    \"args\":\n+    [\"-create\",\n+     \"in=5897de6bd6027a475eadd57019d4e6872c396d0716c4875a5f1a6fcfdf385c1f:0\",\n+     \"outaddr=0.18:13tuJJDR2RgArmgfv6JScSdreahzgc4T6o\",\n+     \"outdata=4:54686973204f505f52455455524e207472616e73616374696f6e206f7574707574207761732063726561746564206279206d6f646966696564206372656174657261777472616e73616374696f6e2e\"],\n+    \"output_cmp\": \"txcreatedata1.hex\"\n+  },\n+  { \"exec\": \"./bitcoin-tx\",\n+    \"args\":\n+    [\"-create\",\n+     \"in=5897de6bd6027a475eadd57019d4e6872c396d0716c4875a5f1a6fcfdf385c1f:0\",\n+     \"outaddr=0.18:13tuJJDR2RgArmgfv6JScSdreahzgc4T6o\",\n+     \"outdata=54686973204f505f52455455524e207472616e73616374696f6e206f7574707574207761732063726561746564206279206d6f646966696564206372656174657261777472616e73616374696f6e2e\"],\n+    \"output_cmp\": \"txcreatedata2.hex\"\n   }\n ]"
      },
      {
        "sha": "eccc7604e6f811da521420f7d3b3079b8e4a84df",
        "filename": "src/test/data/txcreatedata1.hex",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/627468d2ea1f4d5dea9561fe77aaf53f3a83b4d2/src/test/data/txcreatedata1.hex",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/627468d2ea1f4d5dea9561fe77aaf53f3a83b4d2/src/test/data/txcreatedata1.hex",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/txcreatedata1.hex?ref=627468d2ea1f4d5dea9561fe77aaf53f3a83b4d2",
        "patch": "@@ -0,0 +1 @@\n+01000000011f5c38dfcf6f1a5f5a87c416076d392c87e6d41970d5ad5e477a02d66bde97580000000000ffffffff0280a81201000000001976a9141fc11f39be1729bf973a7ab6a615ca4729d6457488ac0084d71700000000526a4c4f54686973204f505f52455455524e207472616e73616374696f6e206f7574707574207761732063726561746564206279206d6f646966696564206372656174657261777472616e73616374696f6e2e00000000"
      },
      {
        "sha": "3c7644c297bf580bcb267a8ad5cdc53be8d69644",
        "filename": "src/test/data/txcreatedata2.hex",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/627468d2ea1f4d5dea9561fe77aaf53f3a83b4d2/src/test/data/txcreatedata2.hex",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/627468d2ea1f4d5dea9561fe77aaf53f3a83b4d2/src/test/data/txcreatedata2.hex",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/txcreatedata2.hex?ref=627468d2ea1f4d5dea9561fe77aaf53f3a83b4d2",
        "patch": "@@ -0,0 +1 @@\n+01000000011f5c38dfcf6f1a5f5a87c416076d392c87e6d41970d5ad5e477a02d66bde97580000000000ffffffff0280a81201000000001976a9141fc11f39be1729bf973a7ab6a615ca4729d6457488ac0000000000000000526a4c4f54686973204f505f52455455524e207472616e73616374696f6e206f7574707574207761732063726561746564206279206d6f646966696564206372656174657261777472616e73616374696f6e2e00000000"
      }
    ]
  },
  {
    "sha": "41d650ff92fd2a2e6960dac51652448ed670a52e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MWQ2NTBmZjkyZmQyYTJlNjk2MGRhYzUxNjUyNDQ4ZWQ2NzBhNTJl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-07T06:21:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-07T06:22:11Z"
      },
      "message": "Merge pull request #6527\n\n231c560 Use unique name for AlertNotify tempfile (Casey Rodarmor)",
      "tree": {
        "sha": "63d3adab92e9b3b042f1eda48d948acdd857a4c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/63d3adab92e9b3b042f1eda48d948acdd857a4c9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/41d650ff92fd2a2e6960dac51652448ed670a52e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVxE6TAAoJEHSBCwEjRsmm6O4IAJGiH28UY3cN3+lEdUjizYry\n8DuN3Ock+2Gm3V/xIlBLMm3rVVTf665kCwDLB6NiNw1uU9i7GBZxnMzwQq60PtwN\nPIPw9n9bJHcoDv65K2uNt86jP9pmRHRLuCHKWosP6zTepFcOAqbc+uQJo1wujmZ/\nUl5mY4qP+kFSyDclN1ITpNZcDLHv30UMAvA4i09yqIJUjPnQvq4tFQ2rqDK+lF51\nT1IhCBhATF8tDd/uj0wp46RTOatr+KDi024aXjbcB7JoJ8ZiDJ1/Ko+o0Bef/Lb3\nHQK/tDwFdyYElfxoo9NnSbEA9pXAwGBX2jFYr+MadMXeu17rSmGucxaXCGUk8j8=\n=cTAX\n-----END PGP SIGNATURE-----",
        "payload": "tree 63d3adab92e9b3b042f1eda48d948acdd857a4c9\nparent a4fe57da6207c1e5691a1e843d22db571f3f0186\nparent 231c5601a1cd7689fa59e9b67b088b2d5f8d0e1c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1438928504 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1438928531 +0200\n\nMerge pull request #6527\n\n231c560 Use unique name for AlertNotify tempfile (Casey Rodarmor)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41d650ff92fd2a2e6960dac51652448ed670a52e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/41d650ff92fd2a2e6960dac51652448ed670a52e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41d650ff92fd2a2e6960dac51652448ed670a52e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a4fe57da6207c1e5691a1e843d22db571f3f0186",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4fe57da6207c1e5691a1e843d22db571f3f0186",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a4fe57da6207c1e5691a1e843d22db571f3f0186"
      },
      {
        "sha": "231c5601a1cd7689fa59e9b67b088b2d5f8d0e1c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/231c5601a1cd7689fa59e9b67b088b2d5f8d0e1c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/231c5601a1cd7689fa59e9b67b088b2d5f8d0e1c"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "dd3c51d09b36d3b4879c866d97cac11bfdb37e81",
        "filename": "src/test/alert_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41d650ff92fd2a2e6960dac51652448ed670a52e/src/test/alert_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41d650ff92fd2a2e6960dac51652448ed670a52e/src/test/alert_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/alert_tests.cpp?ref=41d650ff92fd2a2e6960dac51652448ed670a52e",
        "patch": "@@ -162,8 +162,8 @@ BOOST_AUTO_TEST_CASE(AlertNotify)\n     SetMockTime(11);\n     const std::vector<unsigned char>& alertKey = Params(CBaseChainParams::MAIN).AlertKey();\n \n-    boost::filesystem::path temp = GetTempPath() / \"alertnotify.txt\";\n-    boost::filesystem::remove(temp);\n+    boost::filesystem::path temp = GetTempPath() /\n+        boost::filesystem::unique_path(\"alertnotify-%%%%.txt\");\n \n     mapArgs[\"-alertnotify\"] = std::string(\"echo %s >> \") + temp.string();\n "
      }
    ]
  },
  {
    "sha": "e545371b77d419b3bf4dd194b3f3c107d9bce6d1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNTQ1MzcxYjc3ZDQxOWIzYmY0ZGQxOTRiM2YzYzEwN2Q5YmNlNmQx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-07T07:14:17Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-07T07:14:53Z"
      },
      "message": "Merge pull request #6377\n\nc433828 Handle no chain tip available in InvalidChainFound() (Ross Nicoll)",
      "tree": {
        "sha": "3e15636c9793f20ab745b71ec655827ce1bb1a97",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3e15636c9793f20ab745b71ec655827ce1bb1a97"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e545371b77d419b3bf4dd194b3f3c107d9bce6d1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVxFrtAAoJEHSBCwEjRsmmLaIH/0729vJyzh+KMlQd1EAIbsQI\ntdNVMQXyqE5h+p1WPtamNUEkHkuQXiySEiGhaaHAzKhqgynWigUXkmTd6xyk7KRH\nT0z6GZnozouV7XSqUfHccojrl+7IaquVrHzZjpN7L6t0q2AFhTqdP3XP+Bwke9qE\nJeTEuaQGF//GLrO/idTYRFRhfQTWZQskCcxdzFFY5AMrUdcaA29S29XGjQGQG82W\nqeRjT5u/I5qituhdCucrWG2HqEDr9rmCwA3iSn9xU9yfdzFinO4DyihD1EcQQzad\nwMkglqMl1b5I0OZTl8e+TgZRg5VXWaDblLzkRU3e94NS4p1CqAt4v75rUC6MowE=\n=hG54\n-----END PGP SIGNATURE-----",
        "payload": "tree 3e15636c9793f20ab745b71ec655827ce1bb1a97\nparent 41d650ff92fd2a2e6960dac51652448ed670a52e\nparent c433828df95eb72f486200c95b2b40de02a6f027\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1438931657 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1438931693 +0200\n\nMerge pull request #6377\n\nc433828 Handle no chain tip available in InvalidChainFound() (Ross Nicoll)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e545371b77d419b3bf4dd194b3f3c107d9bce6d1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e545371b77d419b3bf4dd194b3f3c107d9bce6d1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e545371b77d419b3bf4dd194b3f3c107d9bce6d1/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "41d650ff92fd2a2e6960dac51652448ed670a52e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41d650ff92fd2a2e6960dac51652448ed670a52e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/41d650ff92fd2a2e6960dac51652448ed670a52e"
      },
      {
        "sha": "c433828df95eb72f486200c95b2b40de02a6f027",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c433828df95eb72f486200c95b2b40de02a6f027",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c433828df95eb72f486200c95b2b40de02a6f027"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "755bec47b82fb26d88c3b71ff9ef9ce7319e8116",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e545371b77d419b3bf4dd194b3f3c107d9bce6d1/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e545371b77d419b3bf4dd194b3f3c107d9bce6d1/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=e545371b77d419b3bf4dd194b3f3c107d9bce6d1",
        "patch": "@@ -1228,9 +1228,11 @@ void static InvalidChainFound(CBlockIndex* pindexNew)\n       pindexNew->GetBlockHash().ToString(), pindexNew->nHeight,\n       log(pindexNew->nChainWork.getdouble())/log(2.0), DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\",\n       pindexNew->GetBlockTime()));\n+    CBlockIndex *tip = chainActive.Tip();\n+    assert (tip);\n     LogPrintf(\"%s:  current best=%s  height=%d  log2_work=%.8g  date=%s\\n\", __func__,\n-      chainActive.Tip()->GetBlockHash().ToString(), chainActive.Height(), log(chainActive.Tip()->nChainWork.getdouble())/log(2.0),\n-      DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", chainActive.Tip()->GetBlockTime()));\n+      tip->GetBlockHash().ToString(), chainActive.Height(), log(tip->nChainWork.getdouble())/log(2.0),\n+      DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", tip->GetBlockTime()));\n     CheckForkWarningConditions();\n }\n "
      }
    ]
  },
  {
    "sha": "100c9d3994efa0527915bf15d6cc3078d6b80856",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMDBjOWQzOTk0ZWZhMDUyNzkxNWJmMTVkNmNjMzA3OGQ2YjgwODU2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-07T10:56:38Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-07T10:57:17Z"
      },
      "message": "Merge pull request #6505\n\ndf9c2ee [Qt] replace wifi icon with network symbol (Marco)\n9142867 [QT] cleanup icons (Marco)",
      "tree": {
        "sha": "f3dc5ba8131a647569bd934d44aa8ac62cf8dbc0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f3dc5ba8131a647569bd934d44aa8ac62cf8dbc0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/100c9d3994efa0527915bf15d6cc3078d6b80856",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVxI8NAAoJEHSBCwEjRsmm7FgIAJ8oM6PbKeu4I3lappxY4jHB\nEuLxTZVLyBd7SaKQjR4lxFBSKSlNgd5jZCLl0upYkTH68M+57ZLD8XWZOPzA0k8A\ni9EmB0PB1AgDw8Lp6lKLxuvlq0xb9R3UVO7cBC6rKcJVVo91e0aE3XVXUEZ+12D/\nYsnw6Gs8nanFPXDdERCuytbZOXrdtGAzegN2iGSG2oNbbiRg7k+/EqCL8VVvflig\nVjYKeaI6UO0ie7k62fGuxtWQLRdgLaJ+i58nYPBj5rblbuUr+xu3YdJWRRH4EoS/\ngoWNvic6JOQExE9kunClzhSWrqlZCIQeumOVNE99xAhN00dyRr4I/0Du++dsHNo=\n=2fDt\n-----END PGP SIGNATURE-----",
        "payload": "tree f3dc5ba8131a647569bd934d44aa8ac62cf8dbc0\nparent e545371b77d419b3bf4dd194b3f3c107d9bce6d1\nparent df9c2ee1c9c02b79ccbb6cbae03096c3f9af23c7\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1438944998 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1438945037 +0200\n\nMerge pull request #6505\n\ndf9c2ee [Qt] replace wifi icon with network symbol (Marco)\n9142867 [QT] cleanup icons (Marco)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/100c9d3994efa0527915bf15d6cc3078d6b80856",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/100c9d3994efa0527915bf15d6cc3078d6b80856",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/100c9d3994efa0527915bf15d6cc3078d6b80856/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e545371b77d419b3bf4dd194b3f3c107d9bce6d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e545371b77d419b3bf4dd194b3f3c107d9bce6d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e545371b77d419b3bf4dd194b3f3c107d9bce6d1"
      },
      {
        "sha": "df9c2ee1c9c02b79ccbb6cbae03096c3f9af23c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df9c2ee1c9c02b79ccbb6cbae03096c3f9af23c7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/df9c2ee1c9c02b79ccbb6cbae03096c3f9af23c7"
      }
    ],
    "stats": {
      "total": 626,
      "additions": 476,
      "deletions": 150
    },
    "files": [
      {
        "sha": "b6d6a097d6ddb59362fcd260354da01f9efd3e8d",
        "filename": "contrib/devtools/optimize-pngs.py",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/100c9d3994efa0527915bf15d6cc3078d6b80856/contrib/devtools/optimize-pngs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/100c9d3994efa0527915bf15d6cc3078d6b80856/contrib/devtools/optimize-pngs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/optimize-pngs.py?ref=100c9d3994efa0527915bf15d6cc3078d6b80856",
        "patch": "@@ -1,5 +1,8 @@\n #!/usr/bin/env python\n-\n+'''\n+Run this scrip every time you change one of the png files. Using pngcrush, it will optimize the png files, remove various color profiles, remove ancillary chunks (alla) and text chunks (text).\n+#pngcrush -brute -ow -rem gAMA -rem cHRM -rem iCCP -rem sRGB -rem alla -rem text\n+'''\n import os\n import sys\n import subprocess\n@@ -18,14 +21,12 @@ def content_hash(filename):\n     data = i.tostring()\n     return hashlib.sha256(data).hexdigest()\n \n-#optimize png, remove various color profiles, remove ancillary chunks (alla) and text chunks (text)\n-#pngcrush -brute -ow -rem gAMA -rem cHRM -rem iCCP -rem sRGB -rem alla -rem text\n-\n pngcrush = 'pngcrush'\n git = 'git'\n-folders = [\"src/qt/res/movies\", \"src/qt/res/icons\", \"src/qt/res/images\"]\n+folders = [\"src/qt/res/movies\", \"src/qt/res/icons\"]\n basePath = subprocess.check_output([git, 'rev-parse', '--show-toplevel']).rstrip('\\n')\n totalSaveBytes = 0\n+noHashChange = True\n \n outputArray = []\n for folder in folders:\n@@ -68,6 +69,7 @@ def content_hash(filename):\n     oldHash = fileDict['sha256Old']\n     newHash = fileDict['sha256New']\n     totalSaveBytes += fileDict['osize'] - fileDict['psize']\n+    noHashChange = noHashChange and (oldHash == newHash)\n     print fileDict['file']+\"\\n  size diff from: \"+str(fileDict['osize'])+\" to: \"+str(fileDict['psize'])+\"\\n  old sha256: \"+oldHash+\"\\n  new sha256: \"+newHash+\"\\n\"\n     \n-print \"completed. Total reduction: \"+str(totalSaveBytes)+\" bytes\"\n+print \"completed. Checksum stable: \"+str(noHashChange)+\". Total reduction: \"+str(totalSaveBytes)+\" bytes\""
      },
      {
        "sha": "b5a033dd79ad7f572113e4ccf1e931448ad8e7a8",
        "filename": "doc/assets-attribution.md",
        "status": "modified",
        "additions": 46,
        "deletions": 25,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/100c9d3994efa0527915bf15d6cc3078d6b80856/doc/assets-attribution.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/100c9d3994efa0527915bf15d6cc3078d6b80856/doc/assets-attribution.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/assets-attribution.md?ref=100c9d3994efa0527915bf15d6cc3078d6b80856",
        "patch": "@@ -10,37 +10,58 @@ The following is a list of assets used in the bitcoin source and their proper at\n * Site: [https://github.com/stephenhutchings/typicons.font](https://github.com/stephenhutchings/typicons.font)\n \n ### Assets Used\n-\tsrc/qt/res/icons/add.png, src/qt/res/icons/address-book.png,\n-\tsrc/qt/res/icons/configure.png, src/qt/res/icons/connect4.png,\n-    src/qt/res/icons/debugwindow.png, src/qt/res/icons/edit.png,\n-    src/qt/res/icons/exitcopy.png, src/qt/res/icons/editpaste.png,\n-    src/qt/res/icons/export.png, src/qt/res/icons/eye.png,\n-    src/qt/res/icons/filesave.png, src/qt/res/icons/history.png,\n-    src/qt/res/icons/info.png, src/qt/res/icons/key.png,\n-    src/qt/res/icons/lock_*.png, src/qt/res/icons/open.png,\n-    src/qt/res/icons/overview.png, src/qt/res/icons/quit.png,\n-    src/qt/res/icons/receive.png, src/qt/res/icons/remove.png,\n-    src/qt/res/icons/send.png, src/qt/res/icons/synced.png,\n-    src/qt/res/icons/transaction*.png, src/qt/res/icons/tx_output.png,\n+    src/qt/res/icons/add.png\n+    src/qt/res/icons/address-book.png,\n+    src/qt/res/icons/configure.png\n+    src/qt/res/icons/debugwindow.png\n+    src/qt/res/icons/edit.png,\n+    src/qt/res/icons/exitcopy.png\n+    src/qt/res/icons/editpaste.png,\n+    src/qt/res/icons/export.png\n+    src/qt/res/icons/eye.png,\n+    src/qt/res/icons/filesave.png\n+    src/qt/res/icons/history.png,\n+    src/qt/res/icons/info.png\n+    src/qt/res/icons/key.png,\n+    src/qt/res/icons/lock_*.png\n+    src/qt/res/icons/open.png,\n+    src/qt/res/icons/overview.png\n+    src/qt/res/icons/quit.png,\n+    src/qt/res/icons/receive.png\n+    src/qt/res/icons/remove.png,\n+    src/qt/res/icons/send.png\n+    src/qt/res/icons/synced.png,\n+    src/qt/res/icons/transaction*.png\n+    src/qt/res/icons/tx_output.png,\n     src/qt/res/icons/warning.png\n \n-Jonas Schnelli\n+Other\n -----------------------\n \n ### Info\n-* Designer: Jonas Schnelli\n-* Bitcoin Icon: (based on the original bitcoin logo from Bitboy)\n+* Designer: Jonas Schnelli, Bitboy, Stephen Hutchings, Marco Falke\n+* Bitcoin Icon: Based on the original bitcoin logo from Bitboy\n+* Network connection icon: Inspired by flow-merge.svg from Stephen Hutchings\n * Some icons are based on Stephan Hutchings Typicons\n * License: MIT\n \n ### Assets Used\n-    src/qt/res/icons/about.png, src/qt/res/icons/about_qt.png,\n-    src/qt/res/icons/bitcoin.icns, src/qt/res/icons/bitcoin.ico,\n-    src/qt/res/icons/bitcoin.png, src/qt/res/icons/clock*.png,\n-    src/qt/res/icons/connect[0-3].png, src/qt/res/icons/eye_minus.png,\n-    src/qt/res/icons/eye_plus.png, src/qt/res/icons/verify.png,\n-    src/qt/res/icons/tx_inout.png, src/qt/res/icons/tx_input.png,\n-    src/qt/res/src/verify.svg, src/qt/res/src/bitcoin.svg,\n-    src/qt/res/src/clock*.svg, src/qt/res/src/connect*.svg,\n-    src/qt/res/src/mine.svg, src/qt/res/src/qt.svg, src/qt/res/src/tx*.svg,\n-    src/qt/res/src/verify.svg,\n+    src/qt/res/icons/about.png\n+    src/qt/res/icons/about_qt.png,\n+    src/qt/res/icons/bitcoin.icns\n+    src/qt/res/icons/bitcoin.ico,\n+    src/qt/res/icons/bitcoin.png\n+    src/qt/res/icons/clock*.png,\n+    src/qt/res/icons/connect*.png\n+    src/qt/res/icons/eye_minus.png,\n+    src/qt/res/icons/eye_plus.png\n+    src/qt/res/icons/verify.png,\n+    src/qt/res/icons/tx_inout.png\n+    src/qt/res/icons/tx_input.png,\n+    src/qt/res/src/bitcoin.svg,\n+    src/qt/res/src/clock*.svg\n+    src/qt/res/src/connect*.svg,\n+    src/qt/res/src/mine.svg\n+    src/qt/res/src/qt.svg\n+    src/qt/res/src/tx*.svg,\n+    src/qt/res/src/verify.svg"
      },
      {
        "sha": "c40abfd3a6cd48491191814e8f82c1654e4de8cc",
        "filename": "src/qt/res/icons/about_qt.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/100c9d3994efa0527915bf15d6cc3078d6b80856/src/qt/res/icons/about_qt.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/100c9d3994efa0527915bf15d6cc3078d6b80856/src/qt/res/icons/about_qt.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/about_qt.png?ref=100c9d3994efa0527915bf15d6cc3078d6b80856"
      },
      {
        "sha": "162204d1bba6540656b47aae41a09d902e13d5b4",
        "filename": "src/qt/res/icons/clock1.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/100c9d3994efa0527915bf15d6cc3078d6b80856/src/qt/res/icons/clock1.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/100c9d3994efa0527915bf15d6cc3078d6b80856/src/qt/res/icons/clock1.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/clock1.png?ref=100c9d3994efa0527915bf15d6cc3078d6b80856"
      },
      {
        "sha": "8f4263a31cc8e628b5b52b590db6475284b5efd4",
        "filename": "src/qt/res/icons/clock2.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/100c9d3994efa0527915bf15d6cc3078d6b80856/src/qt/res/icons/clock2.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/100c9d3994efa0527915bf15d6cc3078d6b80856/src/qt/res/icons/clock2.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/clock2.png?ref=100c9d3994efa0527915bf15d6cc3078d6b80856"
      },
      {
        "sha": "7f11a7566c15c2ff7d7d50cf53edb1f5c93faf00",
        "filename": "src/qt/res/icons/clock3.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/100c9d3994efa0527915bf15d6cc3078d6b80856/src/qt/res/icons/clock3.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/100c9d3994efa0527915bf15d6cc3078d6b80856/src/qt/res/icons/clock3.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/clock3.png?ref=100c9d3994efa0527915bf15d6cc3078d6b80856"
      },
      {
        "sha": "fdd1a0fce34353183a7af42f4039489cf2779a0b",
        "filename": "src/qt/res/icons/clock4.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/100c9d3994efa0527915bf15d6cc3078d6b80856/src/qt/res/icons/clock4.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/100c9d3994efa0527915bf15d6cc3078d6b80856/src/qt/res/icons/clock4.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/clock4.png?ref=100c9d3994efa0527915bf15d6cc3078d6b80856"
      },
      {
        "sha": "7d6556c6cf731934684a92468e5a24b5bd3a2480",
        "filename": "src/qt/res/icons/clock5.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/100c9d3994efa0527915bf15d6cc3078d6b80856/src/qt/res/icons/clock5.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/100c9d3994efa0527915bf15d6cc3078d6b80856/src/qt/res/icons/clock5.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/clock5.png?ref=100c9d3994efa0527915bf15d6cc3078d6b80856"
      },
      {
        "sha": "ef708d81fb24ad0272de7cc4afcca7caf18aef13",
        "filename": "src/qt/res/icons/connect0.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/100c9d3994efa0527915bf15d6cc3078d6b80856/src/qt/res/icons/connect0.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/100c9d3994efa0527915bf15d6cc3078d6b80856/src/qt/res/icons/connect0.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/connect0.png?ref=100c9d3994efa0527915bf15d6cc3078d6b80856"
      },
      {
        "sha": "ed358e6f8ef40b106cba3201859108a98a8d384f",
        "filename": "src/qt/res/icons/connect1.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/100c9d3994efa0527915bf15d6cc3078d6b80856/src/qt/res/icons/connect1.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/100c9d3994efa0527915bf15d6cc3078d6b80856/src/qt/res/icons/connect1.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/connect1.png?ref=100c9d3994efa0527915bf15d6cc3078d6b80856"
      },
      {
        "sha": "3bbb0d395c5cbbc226007dcdcf7318575cf842f1",
        "filename": "src/qt/res/icons/connect2.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/100c9d3994efa0527915bf15d6cc3078d6b80856/src/qt/res/icons/connect2.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/100c9d3994efa0527915bf15d6cc3078d6b80856/src/qt/res/icons/connect2.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/connect2.png?ref=100c9d3994efa0527915bf15d6cc3078d6b80856"
      },
      {
        "sha": "0db99ad8d30458c3641d931213b9c4b564293ce6",
        "filename": "src/qt/res/icons/connect3.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/100c9d3994efa0527915bf15d6cc3078d6b80856/src/qt/res/icons/connect3.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/100c9d3994efa0527915bf15d6cc3078d6b80856/src/qt/res/icons/connect3.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/connect3.png?ref=100c9d3994efa0527915bf15d6cc3078d6b80856"
      },
      {
        "sha": "9dd19fc2bd6596a8e339fee18d09c087d8f8e4de",
        "filename": "src/qt/res/icons/connect4.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/100c9d3994efa0527915bf15d6cc3078d6b80856/src/qt/res/icons/connect4.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/100c9d3994efa0527915bf15d6cc3078d6b80856/src/qt/res/icons/connect4.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/connect4.png?ref=100c9d3994efa0527915bf15d6cc3078d6b80856"
      },
      {
        "sha": "72c44565ec3bf56248c47549a182420386e96082",
        "filename": "src/qt/res/icons/transaction0.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/100c9d3994efa0527915bf15d6cc3078d6b80856/src/qt/res/icons/transaction0.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/100c9d3994efa0527915bf15d6cc3078d6b80856/src/qt/res/icons/transaction0.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/transaction0.png?ref=100c9d3994efa0527915bf15d6cc3078d6b80856"
      },
      {
        "sha": "6bc5ac78952b42e9c340c8888d382c775671ca35",
        "filename": "src/qt/res/icons/warning.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/100c9d3994efa0527915bf15d6cc3078d6b80856/src/qt/res/icons/warning.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/100c9d3994efa0527915bf15d6cc3078d6b80856/src/qt/res/icons/warning.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/warning.png?ref=100c9d3994efa0527915bf15d6cc3078d6b80856"
      },
      {
        "sha": "2a3d84c2d048549c16ba86e9d57fb81fac04119b",
        "filename": "src/qt/res/src/clock_1.svg",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/100c9d3994efa0527915bf15d6cc3078d6b80856/src/qt/res/src/clock_1.svg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/100c9d3994efa0527915bf15d6cc3078d6b80856/src/qt/res/src/clock_1.svg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/src/clock_1.svg?ref=100c9d3994efa0527915bf15d6cc3078d6b80856",
        "patch": "@@ -9,5 +9,7 @@\n \t\tc-57.8,0-112.1,22.5-153,63.4c-40.9,40.9-63.4,95.2-63.4,153c0,57.8,22.5,112.1,63.4,153c40.9,40.9,95.2,63.4,153,63.4\r\n \t\tc57.8,0,112.1-22.5,153-63.4c40.9-40.9,63.4-95.2,63.4-153c0-57.8-22.5-112.1-63.4-153C409.8,227.1,355.4,204.6,297.6,204.6z\"/>\r\n </g>\r\n-<polygon points=\"478.3,253.4 297.6,184.6 297.6,420.9 534,420.9 \"/>\r\n+<path\r\n+\td=\"M 478.3,253.4 297.6,184.6 c 0,0 0,78.8 0,118.2 0,117.5 -0.4,118.1 118.2,118.1 39.4,0 118.2,0 118.2,0 z\"\r\n+\tid=\"polygon7\" />\r\n </svg>\r"
      },
      {
        "sha": "2de8d467b754ecf316ca61209ecbc9a8248212ac",
        "filename": "src/qt/res/src/clock_2.svg",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/100c9d3994efa0527915bf15d6cc3078d6b80856/src/qt/res/src/clock_2.svg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/100c9d3994efa0527915bf15d6cc3078d6b80856/src/qt/res/src/clock_2.svg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/src/clock_2.svg?ref=100c9d3994efa0527915bf15d6cc3078d6b80856",
        "patch": "@@ -9,6 +9,5 @@\n \t\tc-57.8,0-112.1,22.5-153,63.4c-40.9,40.9-63.4,95.2-63.4,153c0,57.8,22.5,112.1,63.4,153c40.9,40.9,95.2,63.4,153,63.4\r\n \t\tc57.8,0,112.1-22.5,153-63.4c40.9-40.9,63.4-95.2,63.4-153c0-57.8-22.5-112.1-63.4-153C409.8,227.1,355.4,204.6,297.6,204.6z\"/>\r\n </g>\r\n-<polygon points=\"465.2,601.6 534,420.9 297.6,420.9 297.6,657.3 \"/>\r\n-<polygon points=\"478.3,253.4 297.6,184.6 297.6,420.9 534,420.9 \"/>\r\n+<polygon points=\"465.2,601.6 534,420.9 478.3,253.4 297.6,184.6 297.6,420.9 297.6,657.3 \"/>\r\n </svg>\r"
      },
      {
        "sha": "b691043e3e72bb24707030759b4da32e1fe2e224",
        "filename": "src/qt/res/src/clock_3.svg",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/100c9d3994efa0527915bf15d6cc3078d6b80856/src/qt/res/src/clock_3.svg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/100c9d3994efa0527915bf15d6cc3078d6b80856/src/qt/res/src/clock_3.svg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/src/clock_3.svg?ref=100c9d3994efa0527915bf15d6cc3078d6b80856",
        "patch": "@@ -9,7 +9,7 @@\n \t\tc-57.8,0-112.1,22.5-153,63.4c-40.9,40.9-63.4,95.2-63.4,153c0,57.8,22.5,112.1,63.4,153c40.9,40.9,95.2,63.4,153,63.4\r\n \t\tc57.8,0,112.1-22.5,153-63.4c40.9-40.9,63.4-95.2,63.4-153c0-57.8-22.5-112.1-63.4-153C409.8,227.1,355.4,204.6,297.6,204.6z\"/>\r\n </g>\r\n-<polygon points=\"117,588.5 297.6,657.3 297.6,420.9 61.3,420.9 \"/>\r\n-<polygon points=\"465.2,601.6 534,420.9 297.6,420.9 297.6,657.3 \"/>\r\n-<polygon points=\"478.3,253.4 297.6,184.6 297.6,420.9 534,420.9 \"/>\r\n+<path\r\n+\td=\"M 465.2,601.6 534,420.9 478.3,253.4 297.6,184.6 c 0,0 0,78.8 0,118.2 0,117.7 0.4,118.1 -118.1,118.1 -39.4,0 -118.2,0 -118.2,0 l 55.7,167.6 180.6,68.8 z\"\r\n+\tid=\"polygon7\" />\r\n </svg>\r"
      },
      {
        "sha": "ea311f31e826a5c321a99c0c0f58f9610b37207f",
        "filename": "src/qt/res/src/clock_4.svg",
        "status": "modified",
        "additions": 23,
        "deletions": 18,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/100c9d3994efa0527915bf15d6cc3078d6b80856/src/qt/res/src/clock_4.svg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/100c9d3994efa0527915bf15d6cc3078d6b80856/src/qt/res/src/clock_4.svg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/src/clock_4.svg?ref=100c9d3994efa0527915bf15d6cc3078d6b80856",
        "patch": "@@ -1,18 +1,23 @@\n-<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n-<!-- Generator: Adobe Illustrator 18.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\r\n-<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\r\n-<svg version=\"1.1\" id=\"Ebene_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\r\n-\t viewBox=\"0 0 841.9 841.9\" enable-background=\"new 0 0 841.9 841.9\" xml:space=\"preserve\">\r\n-<g>\r\n-\t<path d=\"M297.6,677.3c-68.5,0-132.9-26.7-181.3-75.1S41.3,489.4,41.3,420.9s26.7-132.9,75.1-181.3c48.4-48.4,112.8-75.1,181.3-75.1\r\n-\t\ts132.9,26.7,181.3,75.1c48.4,48.4,75.1,112.8,75.1,181.3s-26.7,132.9-75.1,181.3S366.1,677.3,297.6,677.3z M297.6,204.6\r\n-\t\tc-57.8,0-112.1,22.5-153,63.4c-40.9,40.9-63.4,95.2-63.4,153c0,57.8,22.5,112.1,63.4,153c40.9,40.9,95.2,63.4,153,63.4\r\n-\t\tc57.8,0,112.1-22.5,153-63.4c40.9-40.9,63.4-95.2,63.4-153c0-57.8-22.5-112.1-63.4-153C409.8,227.1,355.4,204.6,297.6,204.6z\"/>\r\n-</g>\r\n-<polygon points=\"130.1,240.3 61.3,420.9 297.6,420.9 297.6,184.6 \"/>\r\n-<polygon points=\"117,588.5 297.6,657.3 297.6,420.9 61.3,420.9 \"/>\r\n-<polygon points=\"465.2,601.6 534,420.9 297.6,420.9 297.6,657.3 \"/>\r\n-<polygon points=\"478.3,253.4 297.6,184.6 297.6,420.9 534,420.9 \"/>\r\n-<path fill=\"#FFFFFF\" d=\"M293.5,452.6h99.6c14.9,0,24.8-9.9,24.8-24.8S408,403,393.1,403h-74.8V278.2c0-14.9-9.9-24.8-24.8-24.8\r\n-\tc-14.9,0-24.8,9.9-24.8,24.8v149.6C268.7,440.2,278.7,452.6,293.5,452.6z\"/>\r\n-</svg>\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<svg\n+   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n+   xmlns:cc=\"http://creativecommons.org/ns#\"\n+   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n+   xmlns:svg=\"http://www.w3.org/2000/svg\"\n+   xmlns=\"http://www.w3.org/2000/svg\"\n+   xml:space=\"preserve\"\n+   enable-background=\"new 0 0 841.9 841.9\"\n+   viewBox=\"0 0 841.9 841.9\"\n+   y=\"0px\"\n+   x=\"0px\"\n+   id=\"Ebene_1\"\n+   version=\"1.1\"><metadata\n+     id=\"metadata15\"><rdf:RDF><cc:Work\n+         rdf:about=\"\"><dc:format>image/svg+xml</dc:format><dc:type\n+           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" /><dc:title></dc:title></cc:Work></rdf:RDF></metadata><defs\n+     id=\"defs13\" /><g\n+     id=\"g3\"><path\n+       id=\"path5\"\n+       d=\"M297.6,677.3c-68.5,0-132.9-26.7-181.3-75.1S41.3,489.4,41.3,420.9s26.7-132.9,75.1-181.3c48.4-48.4,112.8-75.1,181.3-75.1   s132.9,26.7,181.3,75.1c48.4,48.4,75.1,112.8,75.1,181.3s-26.7,132.9-75.1,181.3S366.1,677.3,297.6,677.3z M297.6,204.6   c-57.8,0-112.1,22.5-153,63.4c-40.9,40.9-63.4,95.2-63.4,153c0,57.8,22.5,112.1,63.4,153c40.9,40.9,95.2,63.4,153,63.4   c57.8,0,112.1-22.5,153-63.4c40.9-40.9,63.4-95.2,63.4-153c0-57.8-22.5-112.1-63.4-153C409.8,227.1,355.4,204.6,297.6,204.6z\" /></g><path\n+     id=\"polygon7\"\n+     d=\"M 297.6 184.6 L 130.1 240.3 L 61.3 420.9 L 117 588.5 L 297.6 657.3 L 465.2 601.6 L 534 420.9 L 478.3 253.4 L 297.6 184.6 z M 293.5 253.4 C 308.4 253.4 318.3 263.3 318.3 278.2 L 318.3 403 L 393.1 403 C 408 403 417.9 412.9 417.9 427.8 C 417.9 442.7 408 452.6 393.1 452.6 L 293.5 452.6 C 278.7 452.6 268.7 440.2 268.7 427.8 L 268.7 278.2 C 268.7 263.3 278.6 253.4 293.5 253.4 z \" /></svg>\n\\ No newline at end of file"
      },
      {
        "sha": "7d2afac6227a87b1d4fa8abb65d66d4b3681b067",
        "filename": "src/qt/res/src/connect-0.svg",
        "status": "modified",
        "additions": 66,
        "deletions": 11,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/100c9d3994efa0527915bf15d6cc3078d6b80856/src/qt/res/src/connect-0.svg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/100c9d3994efa0527915bf15d6cc3078d6b80856/src/qt/res/src/connect-0.svg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/src/connect-0.svg?ref=100c9d3994efa0527915bf15d6cc3078d6b80856",
        "patch": "@@ -1,11 +1,66 @@\n-<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n-<!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\r\n-<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\r\n-<svg version=\"1.1\" id=\"Ebene_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\r\n-\t viewBox=\"0 0 24 24\" enable-background=\"new 0 0 24 24\" xml:space=\"preserve\">\r\n-<path fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M13.4,19.4c0.8-0.8,0.8-2,0-2.8c-0.8-0.8-2-0.8-2.8,0\r\n-\tc-0.8,0.8-0.8,2.1,0,2.8C11.4,20.2,12.6,20.2,13.4,19.4z M7.8,15.8c-0.5,0-1-0.2-1.4-0.6c-0.8-0.8-0.8-2,0-2.8\r\n-\tc3.1-3.1,8.2-3.1,11.3,0c0.8,0.8,0.8,2,0,2.8c-0.8,0.8-2,0.8-2.8,0c-1.6-1.6-4.1-1.6-5.7,0C8.8,15.6,8.3,15.8,7.8,15.8z\"/>\r\n-<path fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M20.5,11.5c-0.5,0-1-0.2-1.4-0.6C15.2,7,8.8,7,4.9,10.9\r\n-\tc-0.8,0.8-2,0.8-2.8,0c-0.8-0.8-0.8-2,0-2.8c5.5-5.5,14.3-5.5,19.8,0c0.8,0.8,0.8,2,0,2.8C21.5,11.3,21,11.5,20.5,11.5z\"/>\r\n-</svg>\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<svg\n+   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n+   xmlns:cc=\"http://creativecommons.org/ns#\"\n+   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n+   xmlns:svg=\"http://www.w3.org/2000/svg\"\n+   xmlns=\"http://www.w3.org/2000/svg\"\n+   id=\"svg2\"\n+   viewBox=\"0 0 24 24\"\n+   height=\"24\"\n+   width=\"24\"\n+   version=\"1.2\">\n+  <metadata\n+     id=\"metadata10\">\n+    <rdf:RDF>\n+      <cc:Work\n+         rdf:about=\"\">\n+        <dc:format>image/svg+xml</dc:format>\n+        <dc:type\n+           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n+        <dc:title></dc:title>\n+      </cc:Work>\n+    </rdf:RDF>\n+  </metadata>\n+  <defs\n+     id=\"defs8\" />\n+  <g\n+     id=\"g4142\"\n+     transform=\"matrix(0,-1,-1,0,23.96,24)\">\n+    <g\n+       id=\"g4210\"\n+       transform=\"matrix(-1,0,0,1,59.86,-106.6)\">\n+      <g\n+         id=\"g4289\"\n+         transform=\"matrix(-1,0,0,1,-16.98,0.8136)\">\n+        <g\n+           id=\"g4291\">\n+          <path\n+             id=\"path4293\"\n+             d=\"m -65.35,116.3 0,3 0.5,0 c 0.54,0 1,0.5 1,1 l 0,2.6 c -1.15,0.5 -2,1.6 -2,3 0,2 1.59,3.5 3.5,3.5 1.91,0 3.5,-1.5 3.5,-3.5 0,-1.4 -0.85,-2.5 -2,-3 l 0,-2.6 c 0,-2.3 -1.81,-4 -4,-4 z m 1,1.2 c 1.39,0.3 2.5,1.3 2.5,2.8 l 0,3.2 0.34,0.1 c 0.96,0.3 1.66,1.2 1.66,2.3 0,1.4 -1.11,2.5 -2.5,2.5 -1.39,0 -2.5,-1.1 -2.5,-2.5 0,-1.1 0.69,-2 1.66,-2.3 l 0.34,-0.1 0,-3.2 c 0,-0.9 -0.67,-1.5 -1.5,-1.8 z\"\n+             style=\"color:#000000;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:medium;line-height:normal;font-family:sans-serif;text-indent:0;text-align:start;text-decoration:none;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000000;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;baseline-shift:baseline;text-anchor:start;white-space:normal;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;fill:#000000;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate\" />\n+          <g\n+             style=\"fill:#969696;fill-opacity:1\"\n+             id=\"g4295\">\n+            <path\n+               id=\"path4297\"\n+               d=\"m -67.35,106.1 c -1.94,0 -3.5,1.6 -3.5,3.5 0,1.4 0.85,2.5 2,3 l 0,2.7 c 0,2.2 1.79,4 4,4 l 0.5,0 0,-0.5 0,-2.5 -0.5,0 c -0.55,0 -1,-0.5 -1,-1 l 0,-2.7 c 1.15,-0.5 2,-1.6 2,-3 0,-1.9 -1.57,-3.5 -3.5,-3.5 z m 0,1 c 1.37,0 2.5,1.2 2.5,2.5 0,1.1 -0.7,2 -1.66,2.3 l -0.34,0.1 0,3.3 c 0,0.9 0.67,1.5 1.5,1.8 l 0,1 c -1.38,-0.3 -2.5,-1.4 -2.5,-2.8 l 0,-3.3 -0.34,-0.1 c -0.96,-0.3 -1.66,-1.2 -1.66,-2.3 0,-1.3 1.12,-2.5 2.5,-2.5 z\"\n+               style=\"color:#000000;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:medium;line-height:normal;font-family:sans-serif;text-indent:0;text-align:start;text-decoration:none;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000000;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;baseline-shift:baseline;text-anchor:start;white-space:normal;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;fill:#000000;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate\" />\n+            <path\n+               id=\"path4299\"\n+               d=\"m -57.35,106.1 c -1.93,0 -3.5,1.6 -3.5,3.5 0,1.4 0.85,2.5 2,3 l 0,2.7 c 0,0.5 -0.45,1 -1,1 l -4.85,0 3.17,3 1.68,0 c 2.21,0 4,-1.8 4,-4 l 0,-2.7 c 1.15,-0.5 2,-1.6 2,-3 0,-1.9 -1.56,-3.5 -3.5,-3.5 z m 0,1 c 1.38,0 2.5,1.2 2.5,2.5 0,1.1 -0.7,2 -1.66,2.3 l -0.34,0.1 0,3.3 c 0,1.6 -1.35,3 -3,3 l -1.81,0 -2.04,-1 3.85,0 c 1.11,0 2,-0.9 2,-2 l 0,-3.3 -0.34,-0.1 c -0.96,-0.3 -1.66,-1.2 -1.66,-2.3 0,-1.3 1.13,-2.5 2.5,-2.5 z\"\n+               style=\"color:#000000;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:medium;line-height:normal;font-family:sans-serif;text-indent:0;text-align:start;text-decoration:none;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000000;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;baseline-shift:baseline;text-anchor:start;white-space:normal;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;fill:#000000;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate\" />\n+          </g>\n+          <path\n+             id=\"path4301\"\n+             d=\"m -69.84,116.3 c -2.19,0 -4,1.7 -4,4 l 0,2.6 c -1.14,0.6 -1.99,1.6 -1.99,3 0,2 1.6,3.5 3.51,3.5 1.91,0 3.5,-1.5 3.5,-3.5 0,-1.4 -0.85,-2.5 -2,-3 l 0,-2.6 c 0,-0.5 0.45,-1 1,-1 l 5.01,0 -3.36,-3 z m 0,1 1.84,0 2.19,1 -4.01,0 c -1.11,0 -2,0.9 -2,2 l 0,3.2 0.34,0.1 c 0.96,0.3 1.66,1.2 1.66,2.3 0,1.4 -1.11,2.5 -2.5,2.5 -1.39,0 -2.51,-1.1 -2.51,-2.5 0,-1.1 0.7,-2 1.66,-2.3 l 0.33,-0.1 0,-0.4 0,-2.8 c 0,-1.7 1.33,-3 3,-3 z\"\n+             style=\"color:#000000;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:medium;line-height:normal;font-family:sans-serif;text-indent:0;text-align:start;text-decoration:none;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000000;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;baseline-shift:baseline;text-anchor:start;white-space:normal;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;fill:#000000;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate\" />\n+        </g>\n+      </g>\n+    </g>\n+    <path\n+       id=\"path4165\"\n+       d=\"m 12,8.77 c -0.84,0 -1.66,0.341 -2.254,0.937 -0.599,0.593 -0.942,1.403 -0.945,2.253 0,0.85 0.337,1.67 0.933,2.26 a 0.6001,0.6001 0 0 0 0,0 c 0.594,0.6 1.424,0.94 2.264,0.94 0.84,0 1.67,-0.34 2.26,-0.94 0.6,-0.59 0.94,-1.41 0.94,-2.26 0,-0.84 -0.34,-1.66 -0.95,-2.253 C 13.66,9.111 12.84,8.77 12,8.77 Z\"\n+       style=\"opacity:1;fill:#000000;fill-opacity:1;stroke:none;stroke-width:10;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n+  </g>\n+</svg>"
      },
      {
        "sha": "d17928c97d01edba81c078ccd3756d4721df8697",
        "filename": "src/qt/res/src/connect-1.svg",
        "status": "modified",
        "additions": 69,
        "deletions": 21,
        "changes": 90,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/100c9d3994efa0527915bf15d6cc3078d6b80856/src/qt/res/src/connect-1.svg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/100c9d3994efa0527915bf15d6cc3078d6b80856/src/qt/res/src/connect-1.svg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/src/connect-1.svg?ref=100c9d3994efa0527915bf15d6cc3078d6b80856",
        "patch": "@@ -1,21 +1,69 @@\n-<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n-<!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\r\n-<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\r\n-<svg version=\"1.1\" id=\"Ebene_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\r\n-\t viewBox=\"0 0 24 24\" enable-background=\"new 0 0 24 24\" xml:space=\"preserve\">\r\n-<g>\r\n-\t<path d=\"M12,11c1.9,0,3.6,0.7,4.9,2c0.4,0.4,0.4,1,0,1.4c-0.2,0.2-0.4,0.3-0.7,0.3c-0.3,0-0.5-0.1-0.7-0.3C14.6,13.5,13.3,13,12,13\r\n-\t\tc-1.3,0-2.6,0.5-3.5,1.5c-0.2,0.2-0.4,0.3-0.7,0.3c-0.3,0-0.5-0.1-0.7-0.3c-0.4-0.4-0.4-1,0-1.4C8.4,11.7,10.1,11,12,11 M12,17\r\n-\t\tc0.3,0,0.5,0.1,0.7,0.3c0.2,0.2,0.3,0.4,0.3,0.7s-0.1,0.5-0.3,0.7C12.5,18.9,12.3,19,12,19c-0.3,0-0.5-0.1-0.7-0.3\r\n-\t\tC11.1,18.5,11,18.3,11,18c0-0.3,0.1-0.5,0.3-0.7C11.5,17.1,11.7,17,12,17 M12,10c-2,0-4.1,0.8-5.7,2.3c-0.8,0.8-0.8,2,0,2.8\r\n-\t\tc0.4,0.4,0.9,0.6,1.4,0.6c0.5,0,1-0.2,1.4-0.6C10,14.4,11,14,12,14c1,0,2,0.4,2.8,1.2c0.4,0.4,0.9,0.6,1.4,0.6s1-0.2,1.4-0.6\r\n-\t\tc0.8-0.8,0.8-2,0-2.8C16.1,10.8,14,10,12,10L12,10z M12,16c-0.5,0-1,0.2-1.4,0.6c-0.8,0.8-0.8,2.1,0,2.8C11,19.8,11.5,20,12,20\r\n-\t\tc0.5,0,1-0.2,1.4-0.6c0.8-0.8,0.8-2,0-2.8C13,16.2,12.5,16,12,16L12,16z\"/>\r\n-</g>\r\n-<g>\r\n-\t<path d=\"M12,5c3.5,0,6.7,1.3,9.2,3.8c0.4,0.4,0.4,1,0,1.4c-0.2,0.2-0.4,0.3-0.7,0.3c-0.3,0-0.5-0.1-0.7-0.3C17.7,8.1,14.9,7,12,7\r\n-\t\tc-2.9,0-5.7,1.1-7.8,3.2c-0.2,0.2-0.4,0.3-0.7,0.3c-0.3,0-0.5-0.1-0.7-0.3c-0.4-0.4-0.4-1,0-1.4C5.3,6.4,8.5,5,12,5 M12,4\r\n-\t\tC8.4,4,4.8,5.4,2.1,8.1c-0.8,0.8-0.8,2,0,2.8c0.4,0.4,0.9,0.6,1.4,0.6c0.5,0,1-0.2,1.4-0.6C6.9,9,9.4,8,12,8c2.6,0,5.1,1,7.1,2.9\r\n-\t\tc0.4,0.4,0.9,0.6,1.4,0.6c0.5,0,1-0.2,1.4-0.6c0.8-0.8,0.8-2,0-2.8C19.2,5.4,15.6,4,12,4L12,4z\"/>\r\n-</g>\r\n-</svg>\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<svg\n+   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n+   xmlns:cc=\"http://creativecommons.org/ns#\"\n+   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n+   xmlns:svg=\"http://www.w3.org/2000/svg\"\n+   xmlns=\"http://www.w3.org/2000/svg\"\n+   version=\"1.2\"\n+   width=\"24\"\n+   height=\"24\"\n+   viewBox=\"0 0 24 24\"\n+   id=\"svg2\">\n+  <metadata\n+     id=\"metadata10\">\n+    <rdf:RDF>\n+      <cc:Work\n+         rdf:about=\"\">\n+        <dc:format>image/svg+xml</dc:format>\n+        <dc:type\n+           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n+        <dc:title></dc:title>\n+      </cc:Work>\n+    </rdf:RDF>\n+  </metadata>\n+  <defs\n+     id=\"defs8\" />\n+  <g\n+     id=\"g4210\"\n+     transform=\"translate(0,0.25)\">\n+    <g\n+       id=\"g4142\"\n+       transform=\"matrix(0,-1,-1,0,23.96,23.75)\">\n+      <g\n+         id=\"g4213\"\n+         transform=\"matrix(-1,0,0,1,59.86,-106.6)\">\n+        <g\n+           id=\"g4289\"\n+           transform=\"matrix(-1,0,0,1,-16.98,0.8136)\">\n+          <g\n+             id=\"g4291\">\n+            <path\n+               style=\"color:#000000;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:medium;line-height:normal;font-family:sans-serif;text-indent:0;text-align:start;text-decoration:none;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000000;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;baseline-shift:baseline;text-anchor:start;white-space:normal;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate\"\n+               d=\"m -65.35,116.3 0,3 0.5,0 c 0.54,0 1,0.5 1,1 l 0,2.6 c -1.15,0.5 -2,1.6 -2,3 0,2 1.59,3.5 3.5,3.5 1.91,0 3.5,-1.5 3.5,-3.5 0,-1.4 -0.85,-2.5 -2,-3 l 0,-2.6 c 0,-2.3 -1.81,-4 -4,-4 z m 1,1.2 c 1.39,0.3 2.5,1.3 2.5,2.8 l 0,3.2 0.34,0.1 c 0.96,0.3 1.66,1.2 1.66,2.3 0,1.4 -1.11,2.5 -2.5,2.5 -1.39,0 -2.5,-1.1 -2.5,-2.5 0,-1.1 0.69,-2 1.66,-2.3 l 0.34,-0.1 0,-3.2 c 0,-0.9 -0.67,-1.5 -1.5,-1.8 z\"\n+               id=\"path4293\" />\n+            <g\n+               id=\"g4295\">\n+              <path\n+                 style=\"color:#000000;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:medium;line-height:normal;font-family:sans-serif;text-indent:0;text-align:start;text-decoration:none;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000000;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;baseline-shift:baseline;text-anchor:start;white-space:normal;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate\"\n+                 d=\"m -67.35,106.1 c -1.94,0 -3.5,1.6 -3.5,3.5 0,1.4 0.85,2.5 2,3 l 0,2.7 c 0,2.2 1.79,4 4,4 l 0.5,0 0,-0.5 0,-2.5 -0.5,0 c -0.55,0 -1,-0.5 -1,-1 l 0,-2.7 c 1.15,-0.5 2,-1.6 2,-3 0,-1.9 -1.57,-3.5 -3.5,-3.5 z m 0,1 c 1.37,0 2.5,1.2 2.5,2.5 0,1.1 -0.7,2 -1.66,2.3 l -0.34,0.1 0,3.3 c 0,0.9 0.67,1.5 1.5,1.8 l 0,1 c -1.38,-0.3 -2.5,-1.4 -2.5,-2.8 l 0,-3.3 -0.34,-0.1 c -0.96,-0.3 -1.66,-1.2 -1.66,-2.3 0,-1.3 1.12,-2.5 2.5,-2.5 z\"\n+                 id=\"path4297\" />\n+              <path\n+                 id=\"path4145\"\n+                 d=\"m -57.35,106 c -1.99,0 -3.6,1.7 -3.6,3.6 0,1.4 0.83,2.6 2,3.2 l 0,2.5 c 0,0.5 -0.41,0.9 -0.9,0.9 l -4.35,0 a 0.6001,0.6001 0 0 0 -0.6,0.6 l 0,2 a 0.6001,0.6001 0 0 0 0.6,0.6 l 4.35,0 c 2.26,0 4.1,-1.9 4.1,-4.1 l 0,-2.5 c 1.17,-0.6 2,-1.8 2,-3.2 0,-1.9 -1.6,-3.6 -3.6,-3.6 z\"\n+                 style=\"\" />\n+            </g>\n+            <path\n+               style=\"color:#000000;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:medium;line-height:normal;font-family:sans-serif;text-indent:0;text-align:start;text-decoration:none;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000000;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;baseline-shift:baseline;text-anchor:start;white-space:normal;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate\"\n+               d=\"m -69.84,116.3 c -2.19,0 -4,1.7 -4,4 l 0,2.6 c -1.14,0.6 -1.99,1.6 -1.99,3 0,2 1.6,3.5 3.51,3.5 1.91,0 3.5,-1.5 3.5,-3.5 0,-1.4 -0.85,-2.5 -2,-3 l 0,-2.6 c 0,-0.5 0.45,-1 1,-1 l 5.01,0 -3.34,-3 z m 0,1 2.02,0 2.01,1 -4.01,0 c -1.11,0 -2,0.9 -2,2 l 0,3.2 0.34,0.1 c 0.96,0.3 1.66,1.2 1.66,2.3 0,1.4 -1.11,2.5 -2.5,2.5 -1.39,0 -2.51,-1.1 -2.51,-2.5 0,-1.1 0.7,-2 1.66,-2.3 l 0.33,-0.1 0,-0.4 0,-2.8 c 0,-1.7 1.33,-3 3,-3 z\"\n+               id=\"path4301\" />\n+          </g>\n+        </g>\n+      </g>\n+      <path\n+         id=\"path4173\"\n+         d=\"m 12,8.764 c -0.84,0 -1.67,0.336 -2.264,0.931 a 0.6001,0.6001 0 0 0 -0,0 C 9.138,10.29 8.802,11.11 8.801,11.96 c 0,0.85 0.337,1.67 0.933,2.26 a 0.6001,0.6001 0 0 0 0,0 c 0.594,0.6 1.424,0.94 2.264,0.94 0.84,0 1.67,-0.34 2.26,-0.94 0.6,-0.59 0.94,-1.41 0.94,-2.26 0,-0.84 -0.34,-1.67 -0.94,-2.265 C 13.67,9.1 12.84,8.764 12,8.764 Z\"\n+         style=\"opacity:1;fill:#000000;fill-opacity:1;stroke:none;stroke-width:10;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n+    </g>\n+  </g>\n+</svg>"
      },
      {
        "sha": "841ca6071dd6fac2803e7fc6d0142fda08c8f3d6",
        "filename": "src/qt/res/src/connect-2.svg",
        "status": "modified",
        "additions": 59,
        "deletions": 22,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/100c9d3994efa0527915bf15d6cc3078d6b80856/src/qt/res/src/connect-2.svg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/100c9d3994efa0527915bf15d6cc3078d6b80856/src/qt/res/src/connect-2.svg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/src/connect-2.svg?ref=100c9d3994efa0527915bf15d6cc3078d6b80856",
        "patch": "@@ -1,22 +1,59 @@\n-<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n-<!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\r\n-<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\r\n-<svg version=\"1.1\" id=\"Ebene_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\r\n-\t viewBox=\"0 0 24 24\" enable-background=\"new 0 0 24 24\" xml:space=\"preserve\">\r\n-<path d=\"M13.4,19.4c0.8-0.8,0.8-2,0-2.8c-0.8-0.8-2-0.8-2.8,0c-0.8,0.8-0.8,2.1,0,2.8C11.4,20.2,12.6,20.2,13.4,19.4z\"/>\r\n-<g>\r\n-\t<path d=\"M12,11c1.9,0,3.6,0.7,4.9,2c0.4,0.4,0.4,1,0,1.4c-0.2,0.2-0.4,0.3-0.7,0.3c-0.3,0-0.5-0.1-0.7-0.3C14.6,13.5,13.3,13,12,13\r\n-\t\tc-1.3,0-2.6,0.5-3.5,1.5c-0.2,0.2-0.4,0.3-0.7,0.3c-0.3,0-0.5-0.1-0.7-0.3c-0.4-0.4-0.4-1,0-1.4C8.4,11.7,10.1,11,12,11 M12,17\r\n-\t\tc0.3,0,0.5,0.1,0.7,0.3c0.2,0.2,0.3,0.4,0.3,0.7s-0.1,0.5-0.3,0.7C12.5,18.9,12.3,19,12,19c-0.3,0-0.5-0.1-0.7-0.3\r\n-\t\tC11.1,18.5,11,18.3,11,18c0-0.3,0.1-0.5,0.3-0.7C11.5,17.1,11.7,17,12,17 M12,10c-2,0-4.1,0.8-5.7,2.3c-0.8,0.8-0.8,2,0,2.8\r\n-\t\tc0.4,0.4,0.9,0.6,1.4,0.6c0.5,0,1-0.2,1.4-0.6C10,14.4,11,14,12,14c1,0,2,0.4,2.8,1.2c0.4,0.4,0.9,0.6,1.4,0.6s1-0.2,1.4-0.6\r\n-\t\tc0.8-0.8,0.8-2,0-2.8C16.1,10.8,14,10,12,10L12,10z M12,16c-0.5,0-1,0.2-1.4,0.6c-0.8,0.8-0.8,2.1,0,2.8C11,19.8,11.5,20,12,20\r\n-\t\tc0.5,0,1-0.2,1.4-0.6c0.8-0.8,0.8-2,0-2.8C13,16.2,12.5,16,12,16L12,16z\"/>\r\n-</g>\r\n-<g>\r\n-\t<path d=\"M12,5c3.5,0,6.7,1.3,9.2,3.8c0.4,0.4,0.4,1,0,1.4c-0.2,0.2-0.4,0.3-0.7,0.3c-0.3,0-0.5-0.1-0.7-0.3C17.7,8.1,14.9,7,12,7\r\n-\t\tc-2.9,0-5.7,1.1-7.8,3.2c-0.2,0.2-0.4,0.3-0.7,0.3c-0.3,0-0.5-0.1-0.7-0.3c-0.4-0.4-0.4-1,0-1.4C5.3,6.4,8.5,5,12,5 M12,4\r\n-\t\tC8.4,4,4.8,5.4,2.1,8.1c-0.8,0.8-0.8,2,0,2.8c0.4,0.4,0.9,0.6,1.4,0.6c0.5,0,1-0.2,1.4-0.6C6.9,9,9.4,8,12,8c2.6,0,5.1,1,7.1,2.9\r\n-\t\tc0.4,0.4,0.9,0.6,1.4,0.6c0.5,0,1-0.2,1.4-0.6c0.8-0.8,0.8-2,0-2.8C19.2,5.4,15.6,4,12,4L12,4z\"/>\r\n-</g>\r\n-</svg>\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<svg\n+   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n+   xmlns:cc=\"http://creativecommons.org/ns#\"\n+   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n+   xmlns:svg=\"http://www.w3.org/2000/svg\"\n+   xmlns=\"http://www.w3.org/2000/svg\"\n+   version=\"1.2\"\n+   width=\"24\"\n+   height=\"24\"\n+   viewBox=\"0 0 24 24\"\n+   id=\"svg2\">\n+  <metadata\n+     id=\"metadata10\">\n+    <rdf:RDF>\n+      <cc:Work\n+         rdf:about=\"\">\n+        <dc:format>image/svg+xml</dc:format>\n+        <dc:type\n+           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n+        <dc:title></dc:title>\n+      </cc:Work>\n+    </rdf:RDF>\n+  </metadata>\n+  <defs\n+     id=\"defs8\" />\n+  <g\n+     id=\"g4210\"\n+     transform=\"matrix(0,1,-1,0,130.6,-35.86)\">\n+    <g\n+       id=\"g4289\"\n+       transform=\"matrix(-1,0,0,1,-16.98,0.8136)\">\n+      <g\n+         id=\"g4291\">\n+        <path\n+           style=\"color:#000000;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:medium;line-height:normal;font-family:sans-serif;text-indent:0;text-align:start;text-decoration:none;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000000;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;baseline-shift:baseline;text-anchor:start;white-space:normal;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate\"\n+           d=\"m -65.35,116.3 0,3 0.5,0 c 0.54,0 1,0.5 1,1 l 0,2.6 c -1.15,0.5 -2,1.6 -2,3 0,2 1.59,3.5 3.5,3.5 1.91,0 3.5,-1.5 3.5,-3.5 0,-1.4 -0.85,-2.5 -2,-3 l 0,-2.6 c 0,-2.3 -1.81,-4 -4,-4 z m 1,1.2 c 1.39,0.3 2.5,1.3 2.5,2.8 l 0,3.2 0.34,0.1 c 0.96,0.3 1.66,1.2 1.66,2.3 0,1.4 -1.11,2.5 -2.5,2.5 -1.39,0 -2.5,-1.1 -2.5,-2.5 0,-1.1 0.69,-2 1.66,-2.3 l 0.34,-0.1 0,-3.2 c 0,-0.9 -0.67,-1.5 -1.5,-1.8 z\"\n+           id=\"path4293\" />\n+        <g\n+           id=\"g4295\">\n+          <path\n+             style=\"color:#000000;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:medium;line-height:normal;font-family:sans-serif;text-indent:0;text-align:start;text-decoration:none;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000000;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;baseline-shift:baseline;text-anchor:start;white-space:normal;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate\"\n+             d=\"m -67.35,106.1 c -1.94,0 -3.5,1.6 -3.5,3.5 0,1.4 0.85,2.5 2,3 l 0,2.7 c 0,2.2 1.79,4 4,4 l 0.5,0 0,-0.5 0,-2.5 -0.5,0 c -0.55,0 -1,-0.5 -1,-1 l 0,-2.7 c 1.15,-0.5 2,-1.6 2,-3 0,-1.9 -1.57,-3.5 -3.5,-3.5 z m 0,1 c 1.37,0 2.5,1.2 2.5,2.5 0,1.1 -0.7,2 -1.66,2.3 l -0.34,0.1 0,3.3 c 0,0.9 0.67,1.5 1.5,1.8 l 0,1 c -1.38,-0.3 -2.5,-1.4 -2.5,-2.8 l 0,-3.3 -0.34,-0.1 c -0.96,-0.3 -1.66,-1.2 -1.66,-2.3 0,-1.3 1.12,-2.5 2.5,-2.5 z\"\n+             id=\"path4297\" />\n+          <path\n+             id=\"path4142\"\n+             d=\"m -57.35,106 c -1.99,0 -3.6,1.7 -3.6,3.6 0,1.4 0.83,2.6 2,3.2 l 0,2.5 c 0,0.5 -0.41,0.9 -0.9,0.9 l -4.35,0 a 0.6001,0.6001 0 0 0 -0.6,0.6 l 0,2 a 0.6001,0.6001 0 0 0 0.6,0.6 l 4.35,0 c 2.26,0 4.1,-1.9 4.1,-4.1 l 0,-2.5 c 1.17,-0.6 2,-1.8 2,-3.2 0,-1.9 -1.6,-3.6 -3.6,-3.6 z\" />\n+        </g>\n+        <path\n+           id=\"path4148\"\n+           d=\"m -69.84,116.2 c -2.24,0 -4.1,1.8 -4.1,4.1 l 0,2.5 c -1.17,0.5 -1.99,1.7 -1.99,3.1 0,2 1.64,3.6 3.61,3.6 1.96,0 3.6,-1.6 3.6,-3.6 0,-1.4 -0.83,-2.6 -2,-3.2 l 0,-2.4 c 0,-0.5 0.41,-0.9 0.9,-0.9 l 4.51,0 a 0.6001,0.6001 0 0 0 0.6,-0.6 l 0,-2 a 0.6001,0.6001 0 0 0 -0.6,-0.6 l -4.53,0 z\" />\n+      </g>\n+    </g>\n+    <path\n+       id=\"path4170\"\n+       d=\"m 47.86,115.4 c -0.84,0 -1.65,0.4 -2.24,1 -0.64,0.5 -0.96,1.3 -0.96,2.2 0,0.9 0.32,1.7 0.96,2.2 0.59,0.6 1.4,1 2.24,1 0.84,0 1.65,-0.4 2.24,-1 0.64,-0.5 0.96,-1.3 0.96,-2.2 0,-0.9 -0.32,-1.7 -0.96,-2.2 -0.59,-0.6 -1.4,-1 -2.24,-1 z\"\n+       style=\"opacity:1;fill:#000000;fill-opacity:1;stroke:none;stroke-width:10;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n+  </g>\n+</svg>"
      },
      {
        "sha": "b06e67daf87e10c51009ef4d240726a81093aca5",
        "filename": "src/qt/res/src/connect-3.svg",
        "status": "modified",
        "additions": 72,
        "deletions": 16,
        "changes": 88,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/100c9d3994efa0527915bf15d6cc3078d6b80856/src/qt/res/src/connect-3.svg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/100c9d3994efa0527915bf15d6cc3078d6b80856/src/qt/res/src/connect-3.svg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/src/connect-3.svg?ref=100c9d3994efa0527915bf15d6cc3078d6b80856",
        "patch": "@@ -1,16 +1,72 @@\n-<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n-<!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\r\n-<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\r\n-<svg version=\"1.1\" id=\"Ebene_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\r\n-\t viewBox=\"0 0 24 24\" enable-background=\"new 0 0 24 24\" xml:space=\"preserve\">\r\n-<path d=\"M13.4,19.4c0.8-0.8,0.8-2,0-2.8c-0.8-0.8-2-0.8-2.8,0c-0.8,0.8-0.8,2.1,0,2.8C11.4,20.2,12.6,20.2,13.4,19.4z\"/>\r\n-<path d=\"M13.4,19.4c0.8-0.8,0.8-2,0-2.8c-0.8-0.8-2-0.8-2.8,0c-0.8,0.8-0.8,2.1,0,2.8C11.4,20.2,12.6,20.2,13.4,19.4z M7.8,15.8\r\n-\tc-0.5,0-1-0.2-1.4-0.6c-0.8-0.8-0.8-2,0-2.8c3.1-3.1,8.2-3.1,11.3,0c0.8,0.8,0.8,2,0,2.8c-0.8,0.8-2,0.8-2.8,0\r\n-\tc-1.6-1.6-4.1-1.6-5.7,0C8.8,15.6,8.3,15.8,7.8,15.8z\"/>\r\n-<g>\r\n-\t<path d=\"M12,5c3.5,0,6.7,1.3,9.2,3.8c0.4,0.4,0.4,1,0,1.4c-0.2,0.2-0.4,0.3-0.7,0.3c-0.3,0-0.5-0.1-0.7-0.3C17.7,8.1,14.9,7,12,7\r\n-\t\tc-2.9,0-5.7,1.1-7.8,3.2c-0.2,0.2-0.4,0.3-0.7,0.3c-0.3,0-0.5-0.1-0.7-0.3c-0.4-0.4-0.4-1,0-1.4C5.3,6.4,8.5,5,12,5 M12,4\r\n-\t\tC8.4,4,4.8,5.4,2.1,8.1c-0.8,0.8-0.8,2,0,2.8c0.4,0.4,0.9,0.6,1.4,0.6c0.5,0,1-0.2,1.4-0.6C6.9,9,9.4,8,12,8c2.6,0,5.1,1,7.1,2.9\r\n-\t\tc0.4,0.4,0.9,0.6,1.4,0.6c0.5,0,1-0.2,1.4-0.6c0.8-0.8,0.8-2,0-2.8C19.2,5.4,15.6,4,12,4L12,4z\"/>\r\n-</g>\r\n-</svg>\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<svg\n+   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n+   xmlns:cc=\"http://creativecommons.org/ns#\"\n+   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n+   xmlns:svg=\"http://www.w3.org/2000/svg\"\n+   xmlns=\"http://www.w3.org/2000/svg\"\n+   id=\"svg2\"\n+   viewBox=\"0 0 24 24\"\n+   height=\"24\"\n+   width=\"24\"\n+   version=\"1.2\">\n+  <metadata\n+     id=\"metadata10\">\n+    <rdf:RDF>\n+      <cc:Work\n+         rdf:about=\"\">\n+        <dc:format>image/svg+xml</dc:format>\n+        <dc:type\n+           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n+        <dc:title></dc:title>\n+      </cc:Work>\n+    </rdf:RDF>\n+  </metadata>\n+  <defs\n+     id=\"defs8\" />\n+  <g\n+     transform=\"translate(0.2636,0.29)\"\n+     id=\"g4160\">\n+    <g\n+       id=\"g4210\"\n+       transform=\"matrix(0,1,-1,0,130.3,-36.15)\">\n+      <g\n+         id=\"g4289\"\n+         transform=\"matrix(-1,0,0,1,-16.98,0.8136)\">\n+        <g\n+           id=\"g4291\">\n+          <path\n+             id=\"path4147\"\n+             d=\"m -64.85,116.2 a 0.6001,0.6001 0 0 0 -0.6,0.6 l 0,2 a 0.6001,0.6001 0 0 0 0.6,0.6 c 0.48,0 0.9,0.4 0.9,0.9 l 0,2.4 c -1.18,0.6 -2,1.8 -2,3.2 0,2 1.64,3.6 3.6,3.6 1.97,0 3.6,-1.6 3.6,-3.6 0,-1.4 -0.83,-2.6 -2,-3.2 l 0,-2.4 c 0,-2.3 -1.86,-4.1 -4.1,-4.1 z\"\n+             style=\"\" />\n+          <g\n+             id=\"g4295\">\n+            <path\n+               style=\"color:#000000;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:medium;line-height:normal;font-family:sans-serif;text-indent:0;text-align:start;text-decoration:none;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000000;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;baseline-shift:baseline;text-anchor:start;white-space:normal;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate\"\n+               d=\"m -67.35,106.1 c -1.94,0 -3.5,1.6 -3.5,3.5 0,1.4 0.85,2.5 2,3 l 0,2.7 c 0,2.2 1.79,4 4,4 l 0.5,0 0,-0.5 0,-2.5 -0.5,0 c -0.55,0 -1,-0.5 -1,-1 l 0,-2.7 c 1.15,-0.5 2,-1.6 2,-3 0,-1.9 -1.57,-3.5 -3.5,-3.5 z m 0,1 c 1.37,0 2.5,1.2 2.5,2.5 0,1.1 -0.7,2 -1.66,2.3 l -0.34,0.1 0,3.3 c 0,0.9 0.67,1.5 1.5,1.8 l 0,1 c -1.38,-0.3 -2.5,-1.4 -2.5,-2.8 l 0,-3.3 -0.34,-0.1 c -0.96,-0.3 -1.66,-1.2 -1.66,-2.3 0,-1.3 1.12,-2.5 2.5,-2.5 z\"\n+               id=\"path4297\" />\n+            <path\n+               id=\"path4145\"\n+               d=\"m -57.35,106 c -1.99,0 -3.6,1.7 -3.6,3.6 0,1.4 0.83,2.6 2,3.2 l 0,2.5 c 0,0.5 -0.41,0.9 -0.9,0.9 l -4.35,0 a 0.6001,0.6001 0 0 0 -0.6,0.6 l 0,2 a 0.6001,0.6001 0 0 0 0.6,0.6 l 4.35,0 c 2.26,0 4.1,-1.9 4.1,-4.1 l 0,-2.5 c 1.17,-0.6 2,-1.8 2,-3.2 0,-1.9 -1.6,-3.6 -3.6,-3.6 z\"\n+               style=\"\" />\n+          </g>\n+          <path\n+             id=\"path4149\"\n+             d=\"m -69.84,116.2 c -2.24,0 -4.1,1.8 -4.1,4.1 l 0,2.5 c -1.17,0.5 -1.99,1.7 -1.99,3.1 0,2 1.64,3.6 3.61,3.6 1.96,0 3.6,-1.6 3.6,-3.6 0,-1.4 -0.83,-2.6 -2,-3.2 l 0,-2.4 c 0,-0.5 0.41,-0.9 0.9,-0.9 l 4.51,0 a 0.6001,0.6001 0 0 0 0.6,-0.6 l 0,-2 a 0.6001,0.6001 0 0 0 -0.6,-0.6 l -4.53,0 z\"\n+             style=\"\" />\n+        </g>\n+      </g>\n+    </g>\n+    <g\n+       transform=\"matrix(0,1,1,0,-106.3,-36.15)\"\n+       id=\"g4142\">\n+      <g\n+         transform=\"matrix(-1,0,0,1,-16.98,0.8136)\"\n+         id=\"g4144\" />\n+    </g>\n+  </g>\n+  <path\n+     id=\"path4170\"\n+     d=\"m 15.2,12 c 0,-0.84 -0.4,-1.65 -1,-2.242 -0.5,-0.64 -1.3,-0.96 -2.2,-0.96 -0.9,0 -1.7,0.32 -2.2,0.96 -0.6,0.592 -1,1.402 -1,2.242 0,0.84 0.4,1.65 1,2.24 0.5,0.64 1.3,0.96 2.2,0.96 0.9,0 1.7,-0.32 2.2,-0.96 0.6,-0.59 1,-1.4 1,-2.24 z\"\n+     style=\"opacity:1;fill:#000000;fill-opacity:1;stroke:none;stroke-width:10;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n+</svg>"
      },
      {
        "sha": "0abc7955fdbda15c9adcbc277bb45f80f930b55b",
        "filename": "src/qt/res/src/connect-4.svg",
        "status": "added",
        "additions": 65,
        "deletions": 0,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/100c9d3994efa0527915bf15d6cc3078d6b80856/src/qt/res/src/connect-4.svg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/100c9d3994efa0527915bf15d6cc3078d6b80856/src/qt/res/src/connect-4.svg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/src/connect-4.svg?ref=100c9d3994efa0527915bf15d6cc3078d6b80856",
        "patch": "@@ -0,0 +1,65 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<svg\n+   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n+   xmlns:cc=\"http://creativecommons.org/ns#\"\n+   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n+   xmlns:svg=\"http://www.w3.org/2000/svg\"\n+   xmlns=\"http://www.w3.org/2000/svg\"\n+   version=\"1.2\"\n+   width=\"24\"\n+   height=\"24\"\n+   viewBox=\"0 0 24 24\"\n+   id=\"svg2\">\n+  <metadata\n+     id=\"metadata10\">\n+    <rdf:RDF>\n+      <cc:Work\n+         rdf:about=\"\">\n+        <dc:format>image/svg+xml</dc:format>\n+        <dc:type\n+           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n+        <dc:title></dc:title>\n+      </cc:Work>\n+    </rdf:RDF>\n+  </metadata>\n+  <defs\n+     id=\"defs8\" />\n+  <g\n+     id=\"g4142\"\n+     transform=\"matrix(0,-1,-1,0,23.96,24)\">\n+    <g\n+       transform=\"matrix(-1,0,0,1,59.86,-106.6)\"\n+       id=\"g4210\">\n+      <g\n+         transform=\"matrix(-1,0,0,1,-16.98,0.8136)\"\n+         id=\"g4289\">\n+        <g\n+           id=\"g4291\">\n+          <path\n+             id=\"path4153\"\n+             d=\"m -64.85,116.2 a 0.6001,0.6001 0 0 0 -0.6,0.6 l 0,2 a 0.6001,0.6001 0 0 0 0.6,0.6 c 0.48,0 0.9,0.4 0.9,0.9 l 0,2.4 c -1.18,0.6 -2,1.8 -2,3.2 0,2 1.64,3.6 3.6,3.6 1.97,0 3.6,-1.6 3.6,-3.6 0,-1.4 -0.83,-2.6 -2,-3.2 l 0,-2.4 c 0,-2.3 -1.86,-4.1 -4.1,-4.1 z\"\n+             style=\"\" />\n+          <g\n+             id=\"g4295\">\n+            <path\n+               id=\"path4149\"\n+               d=\"m -67.35,106 c -2,0 -3.6,1.7 -3.6,3.6 0,1.4 0.83,2.6 2,3.2 l 0,2.5 c 0,2.2 1.84,4.1 4.1,4.1 a 0.6001,0.6001 0 0 0 0.6,-0.6 l 0,-2 a 0.6001,0.6001 0 0 0 -0.6,-0.6 c -0.49,0 -0.9,-0.4 -0.9,-0.9 l 0,-2.5 c 1.17,-0.6 2,-1.8 2,-3.2 0,-1.9 -1.61,-3.6 -3.6,-3.6 z\"\n+               style=\"\" />\n+            <path\n+               id=\"path4147\"\n+               d=\"m -57.35,106 c -1.99,0 -3.6,1.7 -3.6,3.6 0,1.4 0.83,2.6 2,3.2 l 0,2.5 c 0,0.5 -0.41,0.9 -0.9,0.9 l -4.35,0 a 0.6001,0.6001 0 0 0 -0.6,0.6 l 0,2 a 0.6001,0.6001 0 0 0 0.6,0.6 l 4.35,0 c 2.26,0 4.1,-1.9 4.1,-4.1 l 0,-2.5 c 1.17,-0.6 2,-1.8 2,-3.2 0,-1.9 -1.6,-3.6 -3.6,-3.6 z\"\n+               style=\"\" />\n+          </g>\n+          <path\n+             id=\"path4155\"\n+             d=\"m -69.84,116.2 c -2.24,0 -4.1,1.8 -4.1,4.1 l 0,2.5 c -1.17,0.5 -1.99,1.7 -1.99,3.1 0,2 1.64,3.6 3.61,3.6 1.96,0 3.6,-1.6 3.6,-3.6 0,-1.4 -0.83,-2.6 -2,-3.2 l 0,-2.4 c 0,-0.5 0.41,-0.9 0.9,-0.9 l 4.51,0 a 0.6001,0.6001 0 0 0 0.6,-0.6 l 0,-2 a 0.6001,0.6001 0 0 0 -0.6,-0.6 l -4.53,0 z\"\n+             style=\"\" />\n+        </g>\n+      </g>\n+    </g>\n+  </g>\n+  <path\n+     id=\"path4170\"\n+     d=\"m 15.2,12 c 0,-0.84 -0.4,-1.65 -1,-2.24 C 13.7,9.12 12.9,8.8 12,8.8 c -0.9,0 -1.7,0.32 -2.2,0.96 -0.6,0.59 -1,1.4 -1,2.24 0,0.84 0.4,1.65 1,2.24 0.5,0.64 1.3,0.96 2.2,0.96 0.9,0 1.7,-0.32 2.2,-0.96 0.6,-0.59 1,-1.4 1,-2.24 z\"\n+     style=\"opacity:1;fill:#000000;fill-opacity:1;stroke:none;stroke-width:10;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n+</svg>"
      },
      {
        "sha": "373c91f0c6cff01572c38aac5276788c39f4a047",
        "filename": "src/qt/res/src/qt.svg",
        "status": "modified",
        "additions": 26,
        "deletions": 25,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/100c9d3994efa0527915bf15d6cc3078d6b80856/src/qt/res/src/qt.svg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/100c9d3994efa0527915bf15d6cc3078d6b80856/src/qt/res/src/qt.svg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/src/qt.svg?ref=100c9d3994efa0527915bf15d6cc3078d6b80856",
        "patch": "@@ -1,25 +1,26 @@\n-<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n-<!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\r\n-<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\r\n-<svg version=\"1.1\" id=\"Ebene_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\r\n-\t viewBox=\"0 0 841.9 595.3\" enable-background=\"new 0 0 841.9 595.3\" xml:space=\"preserve\">\r\n-<g>\r\n-\t<path d=\"M182.8,310c0-74.4,0-148.8,0-220.7c0-19.8,5-39.7,19.8-54.6c12.4-12.4,27.3-17.4,44.6-19.8c37.2-5,74.4,2.5,109.1,7.4\r\n-\t\tC428.4,34.7,497.8,44.6,569.8,57c27.3,5,57,9.9,84.3,12.4c7.4,0,5,5,5,9.9c0,91.8,0,181.1,0,272.8c0,32.2,0,64.5,0,99.2\r\n-\t\tc0,14.9-5,29.8-12.4,44.6c-9.9,14.9-22.3,22.3-39.7,27.3c-69.4,12.4-138.9,22.3-208.3,34.7c-57,9.9-114.1,19.8-171.1,29.8\r\n-\t\tc-2.5,0-5,0-7.4-2.5c-12.4-14.9-22.3-24.8-32.2-34.7c-2.5-2.5-2.5-7.4-2.5-9.9c0-71.9,0-143.9,0-215.8\r\n-\t\tC182.8,320,182.8,315,182.8,310z M430.9,436.5c9.9-7.4,19.8-12.4,29.8-19.8c14.9-14.9,24.8-32.2,29.8-54.6\r\n-\t\tc12.4-54.6,14.9-111.6,0-166.2c-12.4-47.1-42.2-74.4-84.3-79.4c-37.2-2.5-67,7.4-86.8,39.7c-7.4,14.9-12.4,29.8-14.9,44.6\r\n-\t\tc-9.9,39.7-9.9,81.9-5,121.5c2.5,22.3,7.4,44.6,17.4,67c12.4,24.8,29.8,42.2,54.6,49.6c2.5,0,5,2.5,5,5c5,12.4,7.4,22.3,12.4,34.7\r\n-\t\ts17.4,19.8,32.2,22.3c14.9,2.5,27.3,2.5,42.2,0c2.5,0,2.5-2.5,2.5-2.5c0-9.9,0-22.3,0-32.2C438.3,461.3,433.3,456.4,430.9,436.5z\r\n-\t\t M505.3,191c0,12.4,0,22.3,0,34.7c0,2.5,2.5,2.5,5,2.5c5,0,7.4,0,12.4,0c0,2.5,0,5,0,9.9c0,44.6,0,86.8,0,131.5\r\n-\t\tc0,7.4,0,17.4,2.5,24.8c2.5,12.4,12.4,22.3,24.8,24.8c19.8,5,37.2-2.5,54.6-9.9l2.5-2.5c0-9.9,0-19.8,0-29.8\r\n-\t\tc-7.4,2.5-14.9,5-22.3,5s-12.4-2.5-14.9-9.9c0-5-2.5-9.9-2.5-14.9c0-39.7,0-79.4,0-119.1c0-2.5,0-5,0-7.4c9.9,0,19.8,0,29.8,2.5\r\n-\t\tc5,0,7.4-2.5,7.4-7.4c0-7.4,0-14.9,0-22.3c0-5-2.5-7.4-7.4-7.4c-7.4,0-14.9-2.5-22.3-2.5c-5,0-7.4-2.5-7.4-7.4\r\n-\t\tc0-14.9,0-29.8,0-42.2c0-5-2.5-5-5-7.4c-5,0-12.4,0-17.4-2.5s-7.4,0-9.9,7.4c-2.5,17.4-7.4,32.2-12.4,49.6\r\n-\t\tC520.2,191,512.7,191,505.3,191z\"/>\r\n-\t<path d=\"M443.3,277.8c-2.5,27.3-5,57-9.9,84.3c0,7.4-5,17.4-9.9,24.8c-12.4,17.4-32.2,14.9-44.6-2.5c-9.9-14.9-12.4-32.2-14.9-49.6\r\n-\t\tc-5-42.2-5-81.9,0-124c5-12.4,7.4-24.8,14.9-37.2c12.4-17.4,34.7-17.4,47.1-2.5c2.5,5,7.4,9.9,7.4,14.9c2.5,9.9,5,19.8,7.4,32.2\r\n-\t\tc2.5,9.9,2.5,22.3,2.5,34.7C440.8,260.4,440.8,270.4,443.3,277.8L443.3,277.8z\"/>\r\n-</g>\r\n-</svg>\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<svg\n+   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n+   xmlns:cc=\"http://creativecommons.org/ns#\"\n+   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n+   xmlns:svg=\"http://www.w3.org/2000/svg\"\n+   xmlns=\"http://www.w3.org/2000/svg\"\n+   version=\"1.1\"\n+   id=\"Ebene_1\"\n+   x=\"0px\"\n+   y=\"0px\"\n+   viewBox=\"0 0 609.4 609.4\"\n+   enable-background=\"new 0 0 841.9 595.3\"\n+   xml:space=\"preserve\"\n+   width=\"609.4\"\n+   height=\"609.4\"><metadata\n+     id=\"metadata13\"><rdf:RDF><cc:Work\n+         rdf:about=\"\"><dc:format>image/svg+xml</dc:format><dc:type\n+           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" /><dc:title></dc:title></cc:Work></rdf:RDF></metadata><defs\n+     id=\"defs11\" /><g\n+     id=\"g4151\"\n+     transform=\"matrix(2.553,0,0,2.553,-2149,281.5)\"><path\n+       id=\"path26\"\n+       transform=\"matrix(0.3917,0,0,0.3917,841.8,-110.3)\"\n+       d=\"M 153.7 16.9 C 115 16.44 69.7 31.67 67.96 86.81 L 67.96 550.7 L 105 592.4 L 495.9 526.7 C 521.4 522.1 541.9 490.2 541.9 455.9 L 541.9 77.77 L 183.4 18.97 C 179.4 18.3 161.4 17 157.5 16.99 C 156.2 16.94 155 16.91 153.7 16.9 z M 273.5 124.1 C 278.1 124.1 282.7 124.3 287.3 124.9 L 287.3 125 C 320 128.8 343.7 144.2 359.3 170.9 C 374.6 197.1 382 234.6 382 284 C 382 329.2 376.4 364.7 365.4 390.7 C 354.2 417.2 337.1 434.6 313.4 442.8 C 315.9 455 319.5 463.2 324.1 467.5 C 326.9 469.8 330.7 471.4 335.3 471.9 L 335.6 471.9 L 336.3 471.9 L 341.5 471.9 C 343.5 471.9 344.5 472.4 348.3 471.9 L 348.3 507.9 L 332 510.2 C 327.2 510.7 322.6 510.9 318.2 510.9 C 303.9 510.9 292.4 507.6 283.5 500.5 C 272 491.3 263.6 473.4 258.2 447.1 C 233.2 441.8 213.5 425.9 200 399.1 C 186.5 372.1 179.3 332.2 179.3 280.4 C 179.3 224.5 189 183.2 207.7 157 C 223.8 134.9 245.7 124.1 273.5 124.1 z M 424.4 143.5 L 455.1 146.9 L 455.1 202.2 L 488.2 204.8 L 488.2 239.5 L 455.1 237.8 L 455.1 364.7 C 455.1 375.6 457.6 382.8 460.2 386.1 C 460.2 388.9 465.3 390.4 467.8 390.4 L 470.4 390.4 C 478 389.9 485.7 387.9 493.4 384.1 L 493.4 415.7 C 478 422.1 465.3 425.7 450 426.9 C 450 427.2 447.4 427.2 444.8 427.2 C 432.1 427.2 424.4 423.6 416.8 416.5 C 409.1 408.1 404 394.5 404 376.1 L 404 235.6 L 390.2 234.8 L 390.2 197.6 L 411.7 199.1 L 424.4 143.5 z M 284.5 166.4 C 272.5 166.4 263.3 173.3 256.9 187.3 C 250.1 202.5 246.7 233.9 246.7 281.7 C 246.7 327.6 250.1 360.3 256.9 379.5 C 263.3 397.8 273 406.8 285.8 406.8 L 287.3 406.8 C 300.1 406 309.5 397.1 316.2 380.5 C 322.6 363.9 325.6 331.5 325.6 283 C 325.6 239.4 322.6 209.5 316.2 193 C 309.8 176.4 300.1 167.5 287.3 166.4 L 284.5 166.4 z \"\n+       style=\"fill:#000000;fill-opacity:1;fill-rule:nonzero;stroke:none\" /></g></svg>\n\\ No newline at end of file"
      },
      {
        "sha": "e7fcd8214cba6dae14eb74c149db6699d4131274",
        "filename": "src/qt/res/src/transaction0.svg",
        "status": "added",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/100c9d3994efa0527915bf15d6cc3078d6b80856/src/qt/res/src/transaction0.svg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/100c9d3994efa0527915bf15d6cc3078d6b80856/src/qt/res/src/transaction0.svg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/src/transaction0.svg?ref=100c9d3994efa0527915bf15d6cc3078d6b80856",
        "patch": "@@ -0,0 +1,35 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<svg\n+   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n+   xmlns:cc=\"http://creativecommons.org/ns#\"\n+   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n+   xmlns:svg=\"http://www.w3.org/2000/svg\"\n+   xmlns=\"http://www.w3.org/2000/svg\"\n+   version=\"1.1\"\n+   id=\"svg4142\"\n+   viewBox=\"0 0 128 127.9\"\n+   height=\"36.12mm\"\n+   width=\"36.12mm\">\n+  <defs\n+     id=\"defs4144\" />\n+  <metadata\n+     id=\"metadata4147\">\n+    <rdf:RDF>\n+      <cc:Work\n+         rdf:about=\"\">\n+        <dc:format>image/svg+xml</dc:format>\n+        <dc:type\n+           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n+        <dc:title></dc:title>\n+      </cc:Work>\n+    </rdf:RDF>\n+  </metadata>\n+  <g\n+     id=\"layer1\"\n+     transform=\"translate(-284.4,-501.6)\">\n+    <path\n+       id=\"path4792\"\n+       d=\"m 348.8,513.8 c -12.7,-0.7 -24.9,9.1 -27,21.7 -3.8,8.8 7.2,13.7 13.7,9.2 3.1,-7.5 9.4,-17.9 18.9,-11.6 9.7,6.1 2.1,17.6 -3,24.1 -6.1,7.8 -11.4,14.8 -8.9,23 5.4,17.7 10.8,3.7 12.8,-0.1 4.3,-8.2 6,-8.8 11.5,-16.1 6.4,-8.6 11.6,-19.9 7.7,-30.8 -2.8,-11.5 -13.9,-19.9 -25.7,-19.4 z m -0.7,84.7 c -11.4,2.4 -9.1,19.5 2.7,17.1 11.8,-2.4 8.7,-19.5 -2.7,-17.1 z\"\n+       style=\"fill:#000000\" />\n+  </g>\n+</svg>"
      }
    ]
  },
  {
    "sha": "0c465f5e6035c6df2868cbd5b940f9b24c07293f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYzQ2NWY1ZTYwMzVjNmRmMjg2OGNiZDViOTQwZjliMjRjMDcyOTNm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-07T11:42:02Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-07T11:43:13Z"
      },
      "message": "Merge pull request #4587\n\ned166df [Qt] allow users to set -onion via GUI (Philip Kaufmann)",
      "tree": {
        "sha": "174128ba61d448af0e158132aab5fbbdfdc8f0f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/174128ba61d448af0e158132aab5fbbdfdc8f0f2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0c465f5e6035c6df2868cbd5b940f9b24c07293f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVxJnRAAoJEHSBCwEjRsmmX5MH/RZzHHfaKpcrFc9bBwkx+3K3\nakgL3ixGYZyJCKNmp3JG4BH7sMglHKXZbtUqBE5AOxwD6tMEnew9Ee6VWqetxSbQ\nKRZWeiyYKB2PwbCC5R4WnAjbODlOr6XFR7RpdCA/IFxp3sPqoZ3f0tRsSluS3iJy\nkfAEUnZX6ffArQtO93tL/u5fb6AV86vNpRjvT7QAja1dHxELv/KmxtKf53saGSV/\na5W9NPIg9M0AZeJU8zUuJYRgFC2GuVl1WTLZ/Yn528gC5Pzwf5M/pdGGOFQTjp+l\n6/ZfxyVEIprGWXZWUsy8LFpIIBjNv0KDgGKwu5eF/dD67m7vJLtBjwo7wSicifI=\n=zb3g\n-----END PGP SIGNATURE-----",
        "payload": "tree 174128ba61d448af0e158132aab5fbbdfdc8f0f2\nparent 100c9d3994efa0527915bf15d6cc3078d6b80856\nparent ed166dfa8284778bc6e42acc2efcafa893f33cec\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1438947722 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1438947793 +0200\n\nMerge pull request #4587\n\ned166df [Qt] allow users to set -onion via GUI (Philip Kaufmann)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c465f5e6035c6df2868cbd5b940f9b24c07293f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0c465f5e6035c6df2868cbd5b940f9b24c07293f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c465f5e6035c6df2868cbd5b940f9b24c07293f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "100c9d3994efa0527915bf15d6cc3078d6b80856",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/100c9d3994efa0527915bf15d6cc3078d6b80856",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/100c9d3994efa0527915bf15d6cc3078d6b80856"
      },
      {
        "sha": "ed166dfa8284778bc6e42acc2efcafa893f33cec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed166dfa8284778bc6e42acc2efcafa893f33cec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ed166dfa8284778bc6e42acc2efcafa893f33cec"
      }
    ],
    "stats": {
      "total": 304,
      "additions": 297,
      "deletions": 7
    },
    "files": [
      {
        "sha": "22c67b804084e41cb696c3f845cc1fbe5608e602",
        "filename": "src/qt/forms/optionsdialog.ui",
        "status": "modified",
        "additions": 188,
        "deletions": 1,
        "changes": 189,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c465f5e6035c6df2868cbd5b940f9b24c07293f/src/qt/forms/optionsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c465f5e6035c6df2868cbd5b940f9b24c07293f/src/qt/forms/optionsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/optionsdialog.ui?ref=0c465f5e6035c6df2868cbd5b940f9b24c07293f",
        "patch": "@@ -7,7 +7,7 @@\n     <x>0</x>\n     <y>0</y>\n     <width>560</width>\n-    <height>400</height>\n+    <height>440</height>\n    </rect>\n   </property>\n   <property name=\"windowTitle\">\n@@ -297,6 +297,193 @@\n          </item>\n         </layout>\n        </item>\n+       <item>\n+        <layout class=\"QHBoxLayout\" name=\"horizontalLayout_2_Network\">\n+         <item>\n+          <widget class=\"QLabel\" name=\"proxyActiveNets\">\n+           <property name=\"text\">\n+            <string>Used for reaching peers via:</string>\n+           </property>\n+           <property name=\"textFormat\">\n+            <enum>Qt::PlainText</enum>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <widget class=\"QCheckBox\" name=\"proxyReachIPv4\">\n+           <property name=\"enabled\">\n+            <bool>false</bool>\n+           </property>\n+           <property name=\"toolTip\">\n+            <string>Shows, if the supplied default SOCKS5 proxy is used to reach peers via this network type.</string>\n+           </property>\n+           <property name=\"text\">\n+            <string/>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <widget class=\"QLabel\" name=\"proxyReachIPv4Label\">\n+           <property name=\"text\">\n+            <string>IPv4</string>\n+           </property>\n+           <property name=\"textFormat\">\n+            <enum>Qt::PlainText</enum>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <widget class=\"QCheckBox\" name=\"proxyReachIPv6\">\n+           <property name=\"enabled\">\n+            <bool>false</bool>\n+           </property>\n+           <property name=\"toolTip\">\n+            <string>Shows, if the supplied default SOCKS5 proxy is used to reach peers via this network type.</string>\n+           </property>\n+           <property name=\"text\">\n+            <string/>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <widget class=\"QLabel\" name=\"proxyReachIPv6Label\">\n+           <property name=\"text\">\n+            <string>IPv6</string>\n+           </property>\n+           <property name=\"textFormat\">\n+            <enum>Qt::PlainText</enum>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <widget class=\"QCheckBox\" name=\"proxyReachTor\">\n+           <property name=\"enabled\">\n+            <bool>false</bool>\n+           </property>\n+           <property name=\"toolTip\">\n+            <string>Shows, if the supplied default SOCKS5 proxy is used to reach peers via this network type.</string>\n+           </property>\n+           <property name=\"text\">\n+            <string/>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <widget class=\"QLabel\" name=\"proxyReachTorLabel\">\n+           <property name=\"text\">\n+            <string>Tor</string>\n+           </property>\n+           <property name=\"textFormat\">\n+            <enum>Qt::PlainText</enum>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <spacer name=\"horizontalSpacer_2_Network\">\n+           <property name=\"orientation\">\n+            <enum>Qt::Horizontal</enum>\n+           </property>\n+           <property name=\"sizeHint\" stdset=\"0\">\n+            <size>\n+             <width>40</width>\n+             <height>20</height>\n+            </size>\n+           </property>\n+          </spacer>\n+         </item>\n+        </layout>\n+       </item>\n+       <item>\n+        <widget class=\"QCheckBox\" name=\"connectSocksTor\">\n+         <property name=\"toolTip\">\n+          <string>Connect to the Bitcoin network through a separate SOCKS5 proxy for Tor hidden services.</string>\n+         </property>\n+         <property name=\"text\">\n+          <string>Use separate SOCKS5 proxy to reach peers via Tor hidden services:</string>\n+         </property>\n+        </widget>\n+       </item>\n+       <item>\n+        <layout class=\"QHBoxLayout\" name=\"horizontalLayout_3_Network\">\n+         <item>\n+          <widget class=\"QLabel\" name=\"proxyIpTorLabel\">\n+           <property name=\"text\">\n+            <string>Proxy &amp;IP:</string>\n+           </property>\n+           <property name=\"textFormat\">\n+            <enum>Qt::PlainText</enum>\n+           </property>\n+           <property name=\"buddy\">\n+            <cstring>proxyIpTor</cstring>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <widget class=\"QValidatedLineEdit\" name=\"proxyIpTor\">\n+           <property name=\"minimumSize\">\n+            <size>\n+             <width>140</width>\n+             <height>0</height>\n+            </size>\n+           </property>\n+           <property name=\"maximumSize\">\n+            <size>\n+             <width>140</width>\n+             <height>16777215</height>\n+            </size>\n+           </property>\n+           <property name=\"toolTip\">\n+            <string>IP address of the proxy (e.g. IPv4: 127.0.0.1 / IPv6: ::1)</string>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <widget class=\"QLabel\" name=\"proxyPortTorLabel\">\n+           <property name=\"text\">\n+            <string>&amp;Port:</string>\n+           </property>\n+           <property name=\"textFormat\">\n+            <enum>Qt::PlainText</enum>\n+           </property>\n+           <property name=\"buddy\">\n+            <cstring>proxyPortTor</cstring>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <widget class=\"QLineEdit\" name=\"proxyPortTor\">\n+           <property name=\"minimumSize\">\n+            <size>\n+             <width>55</width>\n+             <height>0</height>\n+            </size>\n+           </property>\n+           <property name=\"maximumSize\">\n+            <size>\n+             <width>55</width>\n+             <height>16777215</height>\n+            </size>\n+           </property>\n+           <property name=\"toolTip\">\n+            <string>Port of the proxy (e.g. 9050)</string>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <spacer name=\"horizontalSpacer_4_Network\">\n+           <property name=\"orientation\">\n+            <enum>Qt::Horizontal</enum>\n+           </property>\n+           <property name=\"sizeHint\" stdset=\"0\">\n+            <size>\n+             <width>40</width>\n+             <height>20</height>\n+            </size>\n+           </property>\n+          </spacer>\n+         </item>\n+        </layout>\n+       </item>\n        <item>\n         <spacer name=\"verticalSpacer_Network\">\n          <property name=\"orientation\">"
      },
      {
        "sha": "f57c1203f67764d305b235c743b5043636ff3b58",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 46,
        "deletions": 5,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c465f5e6035c6df2868cbd5b940f9b24c07293f/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c465f5e6035c6df2868cbd5b940f9b24c07293f/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=0c465f5e6035c6df2868cbd5b940f9b24c07293f",
        "patch": "@@ -35,7 +35,7 @@ OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :\n     ui(new Ui::OptionsDialog),\n     model(0),\n     mapper(0),\n-    fProxyIpValid(true)\n+    fProxyIpsValid(true)\n {\n     ui->setupUi(this);\n \n@@ -54,10 +54,18 @@ OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :\n     ui->proxyPort->setEnabled(false);\n     ui->proxyPort->setValidator(new QIntValidator(1, 65535, this));\n \n+    ui->proxyIpTor->setEnabled(false);\n+    ui->proxyPortTor->setEnabled(false);\n+    ui->proxyPortTor->setValidator(new QIntValidator(1, 65535, this));\n+\n     connect(ui->connectSocks, SIGNAL(toggled(bool)), ui->proxyIp, SLOT(setEnabled(bool)));\n     connect(ui->connectSocks, SIGNAL(toggled(bool)), ui->proxyPort, SLOT(setEnabled(bool)));\n \n+    connect(ui->connectSocksTor, SIGNAL(toggled(bool)), ui->proxyIpTor, SLOT(setEnabled(bool)));\n+    connect(ui->connectSocksTor, SIGNAL(toggled(bool)), ui->proxyPortTor, SLOT(setEnabled(bool)));\n+\n     ui->proxyIp->installEventFilter(this);\n+    ui->proxyIpTor->installEventFilter(this);\n \n     /* Window elements init */\n #ifdef Q_OS_MAC\n@@ -110,7 +118,7 @@ OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :\n     mapper->setSubmitPolicy(QDataWidgetMapper::ManualSubmit);\n     mapper->setOrientation(Qt::Vertical);\n \n-    /* setup/change UI elements when proxy IP is invalid/valid */\n+    /* setup/change UI elements when proxy IPs are invalid/valid */\n     connect(this, SIGNAL(proxyIpChecks(QValidatedLineEdit *, int)), this, SLOT(doProxyIpChecks(QValidatedLineEdit *, int)));\n }\n \n@@ -137,6 +145,8 @@ void OptionsDialog::setModel(OptionsModel *model)\n         mapper->setModel(model);\n         setMapper();\n         mapper->toFirst();\n+\n+        updateDefaultProxyNets();\n     }\n \n     /* warn when one of the following settings changes by user action (placed here so init via mapper doesn't trigger them) */\n@@ -149,6 +159,7 @@ void OptionsDialog::setModel(OptionsModel *model)\n     /* Network */\n     connect(ui->allowIncoming, SIGNAL(clicked(bool)), this, SLOT(showRestartWarning()));\n     connect(ui->connectSocks, SIGNAL(clicked(bool)), this, SLOT(showRestartWarning()));\n+    connect(ui->connectSocksTor, SIGNAL(clicked(bool)), this, SLOT(showRestartWarning()));\n     /* Display */\n     connect(ui->lang, SIGNAL(valueChanged()), this, SLOT(showRestartWarning()));\n     connect(ui->thirdPartyTxUrls, SIGNAL(textChanged(const QString &)), this, SLOT(showRestartWarning()));\n@@ -173,6 +184,10 @@ void OptionsDialog::setMapper()\n     mapper->addMapping(ui->proxyIp, OptionsModel::ProxyIP);\n     mapper->addMapping(ui->proxyPort, OptionsModel::ProxyPort);\n \n+    mapper->addMapping(ui->connectSocksTor, OptionsModel::ProxyUseTor);\n+    mapper->addMapping(ui->proxyIpTor, OptionsModel::ProxyIPTor);\n+    mapper->addMapping(ui->proxyPortTor, OptionsModel::ProxyPortTor);\n+\n     /* Window */\n #ifndef Q_OS_MAC\n     mapper->addMapping(ui->minimizeToTray, OptionsModel::MinimizeToTray);\n@@ -188,7 +203,7 @@ void OptionsDialog::setMapper()\n void OptionsDialog::enableOkButton()\n {\n     /* prevent enabling of the OK button when data modified, if there is an invalid proxy address present */\n-    if(fProxyIpValid)\n+    if(fProxyIpsValid)\n         setOkButtonState(true);\n }\n \n@@ -224,6 +239,7 @@ void OptionsDialog::on_okButton_clicked()\n {\n     mapper->submit();\n     accept();\n+    updateDefaultProxyNets();\n }\n \n void OptionsDialog::on_cancelButton_clicked()\n@@ -257,11 +273,10 @@ void OptionsDialog::doProxyIpChecks(QValidatedLineEdit *pUiProxyIp, int nProxyPo\n {\n     Q_UNUSED(nProxyPort);\n \n-    const std::string strAddrProxy = pUiProxyIp->text().toStdString();\n     CService addrProxy;\n \n     /* Check for a valid IPv4 / IPv6 address */\n-    if (!(fProxyIpValid = LookupNumeric(strAddrProxy.c_str(), addrProxy)))\n+    if (!(fProxyIpsValid = LookupNumeric(pUiProxyIp->text().toStdString().c_str(), addrProxy)))\n     {\n         disableOkButton();\n         pUiProxyIp->setValid(false);\n@@ -275,6 +290,28 @@ void OptionsDialog::doProxyIpChecks(QValidatedLineEdit *pUiProxyIp, int nProxyPo\n     }\n }\n \n+void OptionsDialog::updateDefaultProxyNets()\n+{\n+    proxyType proxy;\n+    std::string strProxy;\n+    QString strDefaultProxyGUI;\n+\n+    GetProxy(NET_IPV4, proxy);\n+    strProxy = proxy.proxy.ToStringIP() + \":\" + proxy.proxy.ToStringPort();\n+    strDefaultProxyGUI = ui->proxyIp->text() + \":\" + ui->proxyPort->text();\n+    (strProxy == strDefaultProxyGUI.toStdString()) ? ui->proxyReachIPv4->setChecked(true) : ui->proxyReachIPv4->setChecked(false);\n+\n+    GetProxy(NET_IPV6, proxy);\n+    strProxy = proxy.proxy.ToStringIP() + \":\" + proxy.proxy.ToStringPort();\n+    strDefaultProxyGUI = ui->proxyIp->text() + \":\" + ui->proxyPort->text();\n+    (strProxy == strDefaultProxyGUI.toStdString()) ? ui->proxyReachIPv6->setChecked(true) : ui->proxyReachIPv6->setChecked(false);\n+\n+    GetProxy(NET_TOR, proxy);\n+    strProxy = proxy.proxy.ToStringIP() + \":\" + proxy.proxy.ToStringPort();\n+    strDefaultProxyGUI = ui->proxyIp->text() + \":\" + ui->proxyPort->text();\n+    (strProxy == strDefaultProxyGUI.toStdString()) ? ui->proxyReachTor->setChecked(true) : ui->proxyReachTor->setChecked(false);\n+}\n+\n bool OptionsDialog::eventFilter(QObject *object, QEvent *event)\n {\n     if(event->type() == QEvent::FocusOut)\n@@ -283,6 +320,10 @@ bool OptionsDialog::eventFilter(QObject *object, QEvent *event)\n         {\n             Q_EMIT proxyIpChecks(ui->proxyIp, ui->proxyPort->text().toInt());\n         }\n+        else if(object == ui->proxyIpTor)\n+        {\n+            Q_EMIT proxyIpChecks(ui->proxyIpTor, ui->proxyPortTor->text().toInt());\n+        }\n     }\n     return QDialog::eventFilter(object, event);\n }"
      },
      {
        "sha": "348489c599a35b5272b241cf5874ace71e6d8c23",
        "filename": "src/qt/optionsdialog.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c465f5e6035c6df2868cbd5b940f9b24c07293f/src/qt/optionsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c465f5e6035c6df2868cbd5b940f9b24c07293f/src/qt/optionsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.h?ref=0c465f5e6035c6df2868cbd5b940f9b24c07293f",
        "patch": "@@ -47,6 +47,8 @@ private Q_SLOTS:\n     void showRestartWarning(bool fPersistent = false);\n     void clearStatusLabel();\n     void doProxyIpChecks(QValidatedLineEdit *pUiProxyIp, int nProxyPort);\n+    /* query the networks, for which the default proxy is used */\n+    void updateDefaultProxyNets();\n \n Q_SIGNALS:\n     void proxyIpChecks(QValidatedLineEdit *pUiProxyIp, int nProxyPort);\n@@ -55,7 +57,7 @@ private Q_SLOTS:\n     Ui::OptionsDialog *ui;\n     OptionsModel *model;\n     QDataWidgetMapper *mapper;\n-    bool fProxyIpValid;\n+    bool fProxyIpsValid;\n };\n \n #endif // BITCOIN_QT_OPTIONSDIALOG_H"
      },
      {
        "sha": "65e490570e7eb9987d1c5b3e254c07b7fd0ba4f3",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 57,
        "deletions": 0,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c465f5e6035c6df2868cbd5b940f9b24c07293f/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c465f5e6035c6df2868cbd5b940f9b24c07293f/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=0c465f5e6035c6df2868cbd5b940f9b24c07293f",
        "patch": "@@ -117,6 +117,16 @@ void OptionsModel::Init()\n     else if(!settings.value(\"fUseProxy\").toBool() && !GetArg(\"-proxy\", \"\").empty())\n         addOverriddenOption(\"-proxy\");\n \n+    if (!settings.contains(\"fUseSeparateProxyTor\"))\n+        settings.setValue(\"fUseSeparateProxyTor\", false);\n+    if (!settings.contains(\"addrSeparateProxyTor\"))\n+        settings.setValue(\"addrSeparateProxyTor\", \"127.0.0.1:9050\");\n+    // Only try to set -onion, if user has enabled fUseSeparateProxyTor\n+    if (settings.value(\"fUseSeparateProxyTor\").toBool() && !SoftSetArg(\"-onion\", settings.value(\"addrSeparateProxyTor\").toString().toStdString()))\n+        addOverriddenOption(\"-onion\");\n+    else if(!settings.value(\"fUseSeparateProxyTor\").toBool() && !GetArg(\"-onion\", \"\").empty())\n+        addOverriddenOption(\"-onion\");\n+\n     // Display\n     if (!settings.contains(\"language\"))\n         settings.setValue(\"language\", \"\");\n@@ -178,6 +188,20 @@ QVariant OptionsModel::data(const QModelIndex & index, int role) const\n             return strlIpPort.at(1);\n         }\n \n+        // separate Tor proxy\n+        case ProxyUseTor:\n+            return settings.value(\"fUseSeparateProxyTor\", false);\n+        case ProxyIPTor: {\n+            // contains IP at index 0 and port at index 1\n+            QStringList strlIpPort = settings.value(\"addrSeparateProxyTor\").toString().split(\":\", QString::SkipEmptyParts);\n+            return strlIpPort.at(0);\n+        }\n+        case ProxyPortTor: {\n+            // contains IP at index 0 and port at index 1\n+            QStringList strlIpPort = settings.value(\"addrSeparateProxyTor\").toString().split(\":\", QString::SkipEmptyParts);\n+            return strlIpPort.at(1);\n+        }\n+\n #ifdef ENABLE_WALLET\n         case SpendZeroConfChange:\n             return settings.value(\"bSpendZeroConfChange\");\n@@ -259,6 +283,39 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n             }\n         }\n         break;\n+\n+        // separate Tor proxy\n+        case ProxyUseTor:\n+            if (settings.value(\"fUseSeparateProxyTor\") != value) {\n+                settings.setValue(\"fUseSeparateProxyTor\", value.toBool());\n+                setRestartRequired(true);\n+            }\n+            break;\n+        case ProxyIPTor: {\n+            // contains current IP at index 0 and current port at index 1\n+            QStringList strlIpPort = settings.value(\"addrSeparateProxyTor\").toString().split(\":\", QString::SkipEmptyParts);\n+            // if that key doesn't exist or has a changed IP\n+            if (!settings.contains(\"addrSeparateProxyTor\") || strlIpPort.at(0) != value.toString()) {\n+                // construct new value from new IP and current port\n+                QString strNewValue = value.toString() + \":\" + strlIpPort.at(1);\n+                settings.setValue(\"addrSeparateProxyTor\", strNewValue);\n+                setRestartRequired(true);\n+            }\n+        }\n+        break;\n+        case ProxyPortTor: {\n+            // contains current IP at index 0 and current port at index 1\n+            QStringList strlIpPort = settings.value(\"addrSeparateProxyTor\").toString().split(\":\", QString::SkipEmptyParts);\n+            // if that key doesn't exist or has a changed port\n+            if (!settings.contains(\"addrSeparateProxyTor\") || strlIpPort.at(1) != value.toString()) {\n+                // construct new value from current IP and new port\n+                QString strNewValue = strlIpPort.at(0) + \":\" + value.toString();\n+                settings.setValue(\"addrSeparateProxyTor\", strNewValue);\n+                setRestartRequired(true);\n+            }\n+        }\n+        break;\n+\n #ifdef ENABLE_WALLET\n         case SpendZeroConfChange:\n             if (settings.value(\"bSpendZeroConfChange\") != value) {"
      },
      {
        "sha": "8448cad8de298143b3727655e1c61ae418cb66e5",
        "filename": "src/qt/optionsmodel.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c465f5e6035c6df2868cbd5b940f9b24c07293f/src/qt/optionsmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c465f5e6035c6df2868cbd5b940f9b24c07293f/src/qt/optionsmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.h?ref=0c465f5e6035c6df2868cbd5b940f9b24c07293f",
        "patch": "@@ -34,6 +34,9 @@ class OptionsModel : public QAbstractListModel\n         ProxyUse,               // bool\n         ProxyIP,                // QString\n         ProxyPort,              // int\n+        ProxyUseTor,            // bool\n+        ProxyIPTor,             // QString\n+        ProxyPortTor,           // int\n         DisplayUnit,            // BitcoinUnits::Unit\n         ThirdPartyTxUrls,       // QString\n         Language,               // QString"
      }
    ]
  },
  {
    "sha": "54bd28fa758d9753464b3eb07d203521b50de1c6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NGJkMjhmYTc1OGQ5NzUzNDY0YjNlYjA3ZDIwMzUyMWI1MGRlMWM2",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-08-06T13:40:50Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-08-07T12:01:49Z"
      },
      "message": "[Qt] show client user agent in debug window",
      "tree": {
        "sha": "7377907272b3fbea46e724d9418a133aa114a178",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7377907272b3fbea46e724d9418a133aa114a178"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/54bd28fa758d9753464b3eb07d203521b50de1c6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54bd28fa758d9753464b3eb07d203521b50de1c6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/54bd28fa758d9753464b3eb07d203521b50de1c6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54bd28fa758d9753464b3eb07d203521b50de1c6/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "0c465f5e6035c6df2868cbd5b940f9b24c07293f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c465f5e6035c6df2868cbd5b940f9b24c07293f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0c465f5e6035c6df2868cbd5b940f9b24c07293f"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 54,
      "deletions": 22
    },
    "files": [
      {
        "sha": "97d6711560e5ccadd5dda367a827ff6cd4254f6b",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54bd28fa758d9753464b3eb07d203521b50de1c6/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54bd28fa758d9753464b3eb07d203521b50de1c6/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=54bd28fa758d9753464b3eb07d203521b50de1c6",
        "patch": "@@ -181,6 +181,11 @@ QString ClientModel::formatFullVersion() const\n     return QString::fromStdString(FormatFullVersion());\n }\n \n+QString ClientModel::formatSubVersion() const\n+{\n+    return QString::fromStdString(strSubVersion);\n+}\n+\n QString ClientModel::formatBuildDate() const\n {\n     return QString::fromStdString(CLIENT_DATE);"
      },
      {
        "sha": "ca2da3dde07694f24b4e6bfc3110d810b8112a62",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54bd28fa758d9753464b3eb07d203521b50de1c6/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54bd28fa758d9753464b3eb07d203521b50de1c6/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=54bd28fa758d9753464b3eb07d203521b50de1c6",
        "patch": "@@ -63,6 +63,7 @@ class ClientModel : public QObject\n     QString getStatusBarWarnings() const;\n \n     QString formatFullVersion() const;\n+    QString formatSubVersion() const;\n     QString formatBuildDate() const;\n     bool isReleaseVersion() const;\n     QString clientName() const;"
      },
      {
        "sha": "e8d9a958ad38ee966382c4b018840b0622a67fae",
        "filename": "src/qt/forms/rpcconsole.ui",
        "status": "modified",
        "additions": 47,
        "deletions": 21,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54bd28fa758d9753464b3eb07d203521b50de1c6/src/qt/forms/rpcconsole.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54bd28fa758d9753464b3eb07d203521b50de1c6/src/qt/forms/rpcconsole.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/rpcconsole.ui?ref=54bd28fa758d9753464b3eb07d203521b50de1c6",
        "patch": "@@ -87,6 +87,32 @@\n         </widget>\n        </item>\n        <item row=\"3\" column=\"0\">\n+        <widget class=\"QLabel\" name=\"labelClientUserAgent\">\n+         <property name=\"text\">\n+          <string>User Agent</string>\n+         </property>\n+         <property name=\"indent\">\n+          <number>10</number>\n+         </property>\n+        </widget>\n+       </item>\n+       <item row=\"3\" column=\"1\">\n+        <widget class=\"QLabel\" name=\"clientUserAgent\">\n+         <property name=\"cursor\">\n+          <cursorShape>IBeamCursor</cursorShape>\n+         </property>\n+         <property name=\"text\">\n+          <string>N/A</string>\n+         </property>\n+         <property name=\"textFormat\">\n+          <enum>Qt::PlainText</enum>\n+         </property>\n+         <property name=\"textInteractionFlags\">\n+          <set>Qt::LinksAccessibleByMouse|Qt::TextSelectableByKeyboard|Qt::TextSelectableByMouse</set>\n+         </property>\n+        </widget>\n+       </item>\n+       <item row=\"4\" column=\"0\">\n         <widget class=\"QLabel\" name=\"label_14\">\n          <property name=\"text\">\n           <string>Using OpenSSL version</string>\n@@ -96,7 +122,7 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"3\" column=\"1\">\n+       <item row=\"4\" column=\"1\">\n         <widget class=\"QLabel\" name=\"openSSLVersion\">\n          <property name=\"cursor\">\n           <cursorShape>IBeamCursor</cursorShape>\n@@ -112,7 +138,7 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"4\" column=\"0\">\n+       <item row=\"5\" column=\"0\">\n         <widget class=\"QLabel\" name=\"label_berkeleyDBVersion\">\n          <property name=\"text\">\n           <string>Using BerkeleyDB version</string>\n@@ -122,7 +148,7 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"4\" column=\"1\">\n+       <item row=\"5\" column=\"1\">\n         <widget class=\"QLabel\" name=\"berkeleyDBVersion\">\n          <property name=\"cursor\">\n           <cursorShape>IBeamCursor</cursorShape>\n@@ -138,14 +164,14 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"5\" column=\"0\">\n+       <item row=\"6\" column=\"0\">\n         <widget class=\"QLabel\" name=\"label_12\">\n          <property name=\"text\">\n           <string>Build date</string>\n          </property>\n         </widget>\n        </item>\n-       <item row=\"5\" column=\"1\">\n+       <item row=\"6\" column=\"1\">\n         <widget class=\"QLabel\" name=\"buildDate\">\n          <property name=\"cursor\">\n           <cursorShape>IBeamCursor</cursorShape>\n@@ -161,14 +187,14 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"6\" column=\"0\">\n+       <item row=\"7\" column=\"0\">\n         <widget class=\"QLabel\" name=\"label_13\">\n          <property name=\"text\">\n           <string>Startup time</string>\n          </property>\n         </widget>\n        </item>\n-       <item row=\"6\" column=\"1\">\n+       <item row=\"7\" column=\"1\">\n         <widget class=\"QLabel\" name=\"startupTime\">\n          <property name=\"cursor\">\n           <cursorShape>IBeamCursor</cursorShape>\n@@ -184,7 +210,7 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"7\" column=\"0\">\n+       <item row=\"8\" column=\"0\">\n         <widget class=\"QLabel\" name=\"label_11\">\n          <property name=\"font\">\n           <font>\n@@ -197,14 +223,14 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"8\" column=\"0\">\n+       <item row=\"9\" column=\"0\">\n         <widget class=\"QLabel\" name=\"label_8\">\n          <property name=\"text\">\n           <string>Name</string>\n          </property>\n         </widget>\n        </item>\n-       <item row=\"8\" column=\"1\">\n+       <item row=\"9\" column=\"1\">\n         <widget class=\"QLabel\" name=\"networkName\">\n          <property name=\"cursor\">\n           <cursorShape>IBeamCursor</cursorShape>\n@@ -220,14 +246,14 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"9\" column=\"0\">\n+       <item row=\"10\" column=\"0\">\n         <widget class=\"QLabel\" name=\"label_7\">\n          <property name=\"text\">\n           <string>Number of connections</string>\n          </property>\n         </widget>\n        </item>\n-       <item row=\"9\" column=\"1\">\n+       <item row=\"10\" column=\"1\">\n         <widget class=\"QLabel\" name=\"numberOfConnections\">\n          <property name=\"cursor\">\n           <cursorShape>IBeamCursor</cursorShape>\n@@ -243,7 +269,7 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"10\" column=\"0\">\n+       <item row=\"11\" column=\"0\">\n         <widget class=\"QLabel\" name=\"label_10\">\n          <property name=\"font\">\n           <font>\n@@ -256,14 +282,14 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"11\" column=\"0\">\n+       <item row=\"12\" column=\"0\">\n         <widget class=\"QLabel\" name=\"label_3\">\n          <property name=\"text\">\n           <string>Current number of blocks</string>\n          </property>\n         </widget>\n        </item>\n-       <item row=\"11\" column=\"1\">\n+       <item row=\"12\" column=\"1\">\n         <widget class=\"QLabel\" name=\"numberOfBlocks\">\n          <property name=\"cursor\">\n           <cursorShape>IBeamCursor</cursorShape>\n@@ -279,14 +305,14 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"12\" column=\"0\">\n+       <item row=\"13\" column=\"0\">\n         <widget class=\"QLabel\" name=\"label_2\">\n          <property name=\"text\">\n           <string>Last block time</string>\n          </property>\n         </widget>\n        </item>\n-       <item row=\"12\" column=\"1\">\n+       <item row=\"13\" column=\"1\">\n         <widget class=\"QLabel\" name=\"lastBlockTime\">\n          <property name=\"cursor\">\n           <cursorShape>IBeamCursor</cursorShape>\n@@ -302,7 +328,7 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"13\" column=\"0\">\n+       <item row=\"14\" column=\"0\">\n         <spacer name=\"verticalSpacer_2\">\n          <property name=\"orientation\">\n           <enum>Qt::Vertical</enum>\n@@ -315,7 +341,7 @@\n          </property>\n         </spacer>\n        </item>\n-       <item row=\"14\" column=\"0\">\n+       <item row=\"15\" column=\"0\">\n         <widget class=\"QLabel\" name=\"labelDebugLogfile\">\n          <property name=\"font\">\n           <font>\n@@ -328,7 +354,7 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"15\" column=\"0\">\n+       <item row=\"16\" column=\"0\">\n         <widget class=\"QPushButton\" name=\"openDebugLogfileButton\">\n          <property name=\"toolTip\">\n           <string>Open the Bitcoin Core debug log file from the current data directory. This can take a few seconds for large log files.</string>\n@@ -341,7 +367,7 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"16\" column=\"0\">\n+       <item row=\"17\" column=\"0\">\n         <spacer name=\"verticalSpacer\">\n          <property name=\"orientation\">\n           <enum>Qt::Vertical</enum>"
      },
      {
        "sha": "35729bbb8b4b2933e6fe8ddebb4e15b4ccc41493",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54bd28fa758d9753464b3eb07d203521b50de1c6/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54bd28fa758d9753464b3eb07d203521b50de1c6/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=54bd28fa758d9753464b3eb07d203521b50de1c6",
        "patch": "@@ -330,10 +330,10 @@ void RPCConsole::setClientModel(ClientModel *model)\n \n         // Provide initial values\n         ui->clientVersion->setText(model->formatFullVersion());\n+        ui->clientUserAgent->setText(model->formatSubVersion());\n         ui->clientName->setText(model->clientName());\n         ui->buildDate->setText(model->formatBuildDate());\n         ui->startupTime->setText(model->formatClientStartupTime());\n-\n         ui->networkName->setText(QString::fromStdString(Params().NetworkIDString()));\n     }\n }"
      }
    ]
  },
  {
    "sha": "c0f66ce44abdc44ddbff892720d5b85f6a95436d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMGY2NmNlNDRhYmRjNDRkZGJmZjg5MjcyMGQ1Yjg1ZjZhOTU0MzZk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-07T15:34:48Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-07T15:37:09Z"
      },
      "message": "Merge pull request #6529\n\n54bd28f [Qt] show client user agent in debug window (Philip Kaufmann)",
      "tree": {
        "sha": "7377907272b3fbea46e724d9418a133aa114a178",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7377907272b3fbea46e724d9418a133aa114a178"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c0f66ce44abdc44ddbff892720d5b85f6a95436d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVxNClAAoJEHSBCwEjRsmmSnoH/38JWr2LRkt++MbZE6VX7HcS\nD86YUhVfotSOz8+rm+cR2bJM2zoIOVppQzmRpGNHJAyKzNafzD1RPKBtSMm3Hd2o\nBrAMPv1nERBDapU12nLECul5xmU/J+Aa6QFBaGre9goe540loI6MrWF3tgy+Zz8v\n5DVJpJ6uQv3eDsX71eslH57Dc/FMhkd87Th0Q+oCEiAkF6xbRRksym7FbYxjSKnV\nSPnc88WTAh9IO4gZpGlPTT2P5VCSzjT64RFK1YX7lCM4RBtYY7x0raP3KTPk99oz\nsPomn3FS58QxElxacj5vrtpS5K227oahObsYQqdyzJ3QOgfShnmJV2yM163/hGY=\n=yPzP\n-----END PGP SIGNATURE-----",
        "payload": "tree 7377907272b3fbea46e724d9418a133aa114a178\nparent 0c465f5e6035c6df2868cbd5b940f9b24c07293f\nparent 54bd28fa758d9753464b3eb07d203521b50de1c6\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1438961688 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1438961829 +0200\n\nMerge pull request #6529\n\n54bd28f [Qt] show client user agent in debug window (Philip Kaufmann)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0f66ce44abdc44ddbff892720d5b85f6a95436d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c0f66ce44abdc44ddbff892720d5b85f6a95436d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0f66ce44abdc44ddbff892720d5b85f6a95436d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0c465f5e6035c6df2868cbd5b940f9b24c07293f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c465f5e6035c6df2868cbd5b940f9b24c07293f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0c465f5e6035c6df2868cbd5b940f9b24c07293f"
      },
      {
        "sha": "54bd28fa758d9753464b3eb07d203521b50de1c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54bd28fa758d9753464b3eb07d203521b50de1c6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/54bd28fa758d9753464b3eb07d203521b50de1c6"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 54,
      "deletions": 22
    },
    "files": [
      {
        "sha": "97d6711560e5ccadd5dda367a827ff6cd4254f6b",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0f66ce44abdc44ddbff892720d5b85f6a95436d/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0f66ce44abdc44ddbff892720d5b85f6a95436d/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=c0f66ce44abdc44ddbff892720d5b85f6a95436d",
        "patch": "@@ -181,6 +181,11 @@ QString ClientModel::formatFullVersion() const\n     return QString::fromStdString(FormatFullVersion());\n }\n \n+QString ClientModel::formatSubVersion() const\n+{\n+    return QString::fromStdString(strSubVersion);\n+}\n+\n QString ClientModel::formatBuildDate() const\n {\n     return QString::fromStdString(CLIENT_DATE);"
      },
      {
        "sha": "ca2da3dde07694f24b4e6bfc3110d810b8112a62",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0f66ce44abdc44ddbff892720d5b85f6a95436d/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0f66ce44abdc44ddbff892720d5b85f6a95436d/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=c0f66ce44abdc44ddbff892720d5b85f6a95436d",
        "patch": "@@ -63,6 +63,7 @@ class ClientModel : public QObject\n     QString getStatusBarWarnings() const;\n \n     QString formatFullVersion() const;\n+    QString formatSubVersion() const;\n     QString formatBuildDate() const;\n     bool isReleaseVersion() const;\n     QString clientName() const;"
      },
      {
        "sha": "e8d9a958ad38ee966382c4b018840b0622a67fae",
        "filename": "src/qt/forms/rpcconsole.ui",
        "status": "modified",
        "additions": 47,
        "deletions": 21,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0f66ce44abdc44ddbff892720d5b85f6a95436d/src/qt/forms/rpcconsole.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0f66ce44abdc44ddbff892720d5b85f6a95436d/src/qt/forms/rpcconsole.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/rpcconsole.ui?ref=c0f66ce44abdc44ddbff892720d5b85f6a95436d",
        "patch": "@@ -87,6 +87,32 @@\n         </widget>\n        </item>\n        <item row=\"3\" column=\"0\">\n+        <widget class=\"QLabel\" name=\"labelClientUserAgent\">\n+         <property name=\"text\">\n+          <string>User Agent</string>\n+         </property>\n+         <property name=\"indent\">\n+          <number>10</number>\n+         </property>\n+        </widget>\n+       </item>\n+       <item row=\"3\" column=\"1\">\n+        <widget class=\"QLabel\" name=\"clientUserAgent\">\n+         <property name=\"cursor\">\n+          <cursorShape>IBeamCursor</cursorShape>\n+         </property>\n+         <property name=\"text\">\n+          <string>N/A</string>\n+         </property>\n+         <property name=\"textFormat\">\n+          <enum>Qt::PlainText</enum>\n+         </property>\n+         <property name=\"textInteractionFlags\">\n+          <set>Qt::LinksAccessibleByMouse|Qt::TextSelectableByKeyboard|Qt::TextSelectableByMouse</set>\n+         </property>\n+        </widget>\n+       </item>\n+       <item row=\"4\" column=\"0\">\n         <widget class=\"QLabel\" name=\"label_14\">\n          <property name=\"text\">\n           <string>Using OpenSSL version</string>\n@@ -96,7 +122,7 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"3\" column=\"1\">\n+       <item row=\"4\" column=\"1\">\n         <widget class=\"QLabel\" name=\"openSSLVersion\">\n          <property name=\"cursor\">\n           <cursorShape>IBeamCursor</cursorShape>\n@@ -112,7 +138,7 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"4\" column=\"0\">\n+       <item row=\"5\" column=\"0\">\n         <widget class=\"QLabel\" name=\"label_berkeleyDBVersion\">\n          <property name=\"text\">\n           <string>Using BerkeleyDB version</string>\n@@ -122,7 +148,7 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"4\" column=\"1\">\n+       <item row=\"5\" column=\"1\">\n         <widget class=\"QLabel\" name=\"berkeleyDBVersion\">\n          <property name=\"cursor\">\n           <cursorShape>IBeamCursor</cursorShape>\n@@ -138,14 +164,14 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"5\" column=\"0\">\n+       <item row=\"6\" column=\"0\">\n         <widget class=\"QLabel\" name=\"label_12\">\n          <property name=\"text\">\n           <string>Build date</string>\n          </property>\n         </widget>\n        </item>\n-       <item row=\"5\" column=\"1\">\n+       <item row=\"6\" column=\"1\">\n         <widget class=\"QLabel\" name=\"buildDate\">\n          <property name=\"cursor\">\n           <cursorShape>IBeamCursor</cursorShape>\n@@ -161,14 +187,14 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"6\" column=\"0\">\n+       <item row=\"7\" column=\"0\">\n         <widget class=\"QLabel\" name=\"label_13\">\n          <property name=\"text\">\n           <string>Startup time</string>\n          </property>\n         </widget>\n        </item>\n-       <item row=\"6\" column=\"1\">\n+       <item row=\"7\" column=\"1\">\n         <widget class=\"QLabel\" name=\"startupTime\">\n          <property name=\"cursor\">\n           <cursorShape>IBeamCursor</cursorShape>\n@@ -184,7 +210,7 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"7\" column=\"0\">\n+       <item row=\"8\" column=\"0\">\n         <widget class=\"QLabel\" name=\"label_11\">\n          <property name=\"font\">\n           <font>\n@@ -197,14 +223,14 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"8\" column=\"0\">\n+       <item row=\"9\" column=\"0\">\n         <widget class=\"QLabel\" name=\"label_8\">\n          <property name=\"text\">\n           <string>Name</string>\n          </property>\n         </widget>\n        </item>\n-       <item row=\"8\" column=\"1\">\n+       <item row=\"9\" column=\"1\">\n         <widget class=\"QLabel\" name=\"networkName\">\n          <property name=\"cursor\">\n           <cursorShape>IBeamCursor</cursorShape>\n@@ -220,14 +246,14 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"9\" column=\"0\">\n+       <item row=\"10\" column=\"0\">\n         <widget class=\"QLabel\" name=\"label_7\">\n          <property name=\"text\">\n           <string>Number of connections</string>\n          </property>\n         </widget>\n        </item>\n-       <item row=\"9\" column=\"1\">\n+       <item row=\"10\" column=\"1\">\n         <widget class=\"QLabel\" name=\"numberOfConnections\">\n          <property name=\"cursor\">\n           <cursorShape>IBeamCursor</cursorShape>\n@@ -243,7 +269,7 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"10\" column=\"0\">\n+       <item row=\"11\" column=\"0\">\n         <widget class=\"QLabel\" name=\"label_10\">\n          <property name=\"font\">\n           <font>\n@@ -256,14 +282,14 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"11\" column=\"0\">\n+       <item row=\"12\" column=\"0\">\n         <widget class=\"QLabel\" name=\"label_3\">\n          <property name=\"text\">\n           <string>Current number of blocks</string>\n          </property>\n         </widget>\n        </item>\n-       <item row=\"11\" column=\"1\">\n+       <item row=\"12\" column=\"1\">\n         <widget class=\"QLabel\" name=\"numberOfBlocks\">\n          <property name=\"cursor\">\n           <cursorShape>IBeamCursor</cursorShape>\n@@ -279,14 +305,14 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"12\" column=\"0\">\n+       <item row=\"13\" column=\"0\">\n         <widget class=\"QLabel\" name=\"label_2\">\n          <property name=\"text\">\n           <string>Last block time</string>\n          </property>\n         </widget>\n        </item>\n-       <item row=\"12\" column=\"1\">\n+       <item row=\"13\" column=\"1\">\n         <widget class=\"QLabel\" name=\"lastBlockTime\">\n          <property name=\"cursor\">\n           <cursorShape>IBeamCursor</cursorShape>\n@@ -302,7 +328,7 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"13\" column=\"0\">\n+       <item row=\"14\" column=\"0\">\n         <spacer name=\"verticalSpacer_2\">\n          <property name=\"orientation\">\n           <enum>Qt::Vertical</enum>\n@@ -315,7 +341,7 @@\n          </property>\n         </spacer>\n        </item>\n-       <item row=\"14\" column=\"0\">\n+       <item row=\"15\" column=\"0\">\n         <widget class=\"QLabel\" name=\"labelDebugLogfile\">\n          <property name=\"font\">\n           <font>\n@@ -328,7 +354,7 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"15\" column=\"0\">\n+       <item row=\"16\" column=\"0\">\n         <widget class=\"QPushButton\" name=\"openDebugLogfileButton\">\n          <property name=\"toolTip\">\n           <string>Open the Bitcoin Core debug log file from the current data directory. This can take a few seconds for large log files.</string>\n@@ -341,7 +367,7 @@\n          </property>\n         </widget>\n        </item>\n-       <item row=\"16\" column=\"0\">\n+       <item row=\"17\" column=\"0\">\n         <spacer name=\"verticalSpacer\">\n          <property name=\"orientation\">\n           <enum>Qt::Vertical</enum>"
      },
      {
        "sha": "35729bbb8b4b2933e6fe8ddebb4e15b4ccc41493",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0f66ce44abdc44ddbff892720d5b85f6a95436d/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0f66ce44abdc44ddbff892720d5b85f6a95436d/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=c0f66ce44abdc44ddbff892720d5b85f6a95436d",
        "patch": "@@ -330,10 +330,10 @@ void RPCConsole::setClientModel(ClientModel *model)\n \n         // Provide initial values\n         ui->clientVersion->setText(model->formatFullVersion());\n+        ui->clientUserAgent->setText(model->formatSubVersion());\n         ui->clientName->setText(model->clientName());\n         ui->buildDate->setText(model->formatBuildDate());\n         ui->startupTime->setText(model->formatClientStartupTime());\n-\n         ui->networkName->setText(QString::fromStdString(Params().NetworkIDString()));\n     }\n }"
      }
    ]
  },
  {
    "sha": "605433ffb531ba4b3c20146edf4673ed8dbc3fad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MDU0MzNmZmI1MzFiYTRiM2MyMDE0NmVkZjQ2NzNlZDhkYmMzZmFk",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-08-07T20:15:38Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-08-07T20:17:57Z"
      },
      "message": "locks: don't lock cs_wallet before making rpc calls",
      "tree": {
        "sha": "2c46d5b41cd6208b51b71a18a4fba83dc80816eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2c46d5b41cd6208b51b71a18a4fba83dc80816eb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/605433ffb531ba4b3c20146edf4673ed8dbc3fad",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/605433ffb531ba4b3c20146edf4673ed8dbc3fad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/605433ffb531ba4b3c20146edf4673ed8dbc3fad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/605433ffb531ba4b3c20146edf4673ed8dbc3fad/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c0f66ce44abdc44ddbff892720d5b85f6a95436d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0f66ce44abdc44ddbff892720d5b85f6a95436d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c0f66ce44abdc44ddbff892720d5b85f6a95436d"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 20,
      "deletions": 19
    },
    "files": [
      {
        "sha": "52f41be8aec02e4b87a4d78fc961ff47bfced435",
        "filename": "src/test/rpc_wallet_tests.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 19,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/605433ffb531ba4b3c20146edf4673ed8dbc3fad/src/test/rpc_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/605433ffb531ba4b3c20146edf4673ed8dbc3fad/src/test/rpc_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_wallet_tests.cpp?ref=605433ffb531ba4b3c20146edf4673ed8dbc3fad",
        "patch": "@@ -27,8 +27,6 @@ BOOST_FIXTURE_TEST_SUITE(rpc_wallet_tests, TestingSetup)\n \n BOOST_AUTO_TEST_CASE(rpc_addmultisig)\n {\n-    LOCK(pwalletMain->cs_wallet);\n-\n     rpcfn_type addmultisig = tableRPC[\"addmultisigaddress\"]->actor;\n \n     // old, 65-byte-long:\n@@ -68,25 +66,28 @@ BOOST_AUTO_TEST_CASE(rpc_wallet)\n {\n     // Test RPC calls for various wallet statistics\n     UniValue r;\n-\n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n-\n-    CPubKey demoPubkey = pwalletMain->GenerateNewKey();\n-    CBitcoinAddress demoAddress = CBitcoinAddress(CTxDestination(demoPubkey.GetID()));\n+    CPubKey demoPubkey;\n+    CBitcoinAddress demoAddress;\n     UniValue retValue;\n     string strAccount = \"walletDemoAccount\";\n-    string strPurpose = \"receive\";\n-    BOOST_CHECK_NO_THROW({ /*Initialize Wallet with an account */\n-        CWalletDB walletdb(pwalletMain->strWalletFile);\n-        CAccount account;\n-        account.vchPubKey = demoPubkey;\n-        pwalletMain->SetAddressBook(account.vchPubKey.GetID(), strAccount, strPurpose);\n-        walletdb.WriteAccount(strAccount, account);\n-    });\n-\n-    CPubKey setaccountDemoPubkey = pwalletMain->GenerateNewKey();\n-    CBitcoinAddress setaccountDemoAddress = CBitcoinAddress(CTxDestination(setaccountDemoPubkey.GetID()));\n-\n+    CBitcoinAddress setaccountDemoAddress;\n+    {\n+        LOCK(pwalletMain->cs_wallet);\n+\n+        demoPubkey = pwalletMain->GenerateNewKey();\n+        demoAddress = CBitcoinAddress(CTxDestination(demoPubkey.GetID()));\n+        string strPurpose = \"receive\";\n+        BOOST_CHECK_NO_THROW({ /*Initialize Wallet with an account */\n+            CWalletDB walletdb(pwalletMain->strWalletFile);\n+            CAccount account;\n+            account.vchPubKey = demoPubkey;\n+            pwalletMain->SetAddressBook(account.vchPubKey.GetID(), strAccount, strPurpose);\n+            walletdb.WriteAccount(strAccount, account);\n+        });\n+\n+        CPubKey setaccountDemoPubkey = pwalletMain->GenerateNewKey();\n+        setaccountDemoAddress = CBitcoinAddress(CTxDestination(setaccountDemoPubkey.GetID()));\n+    }\n     /*********************************\n      * \t\t\tsetaccount\n      *********************************/"
      }
    ]
  },
  {
    "sha": "9493803f4a60a234c2712bba000a6b9c93ffba94",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NDkzODAzZjRhNjBhMjM0YzI3MTJiYmEwMDBhNmI5YzkzZmZiYTk0",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-08-07T20:18:16Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-08-07T20:18:16Z"
      },
      "message": "Revert \"Revert \"Assert on probable deadlocks if the second lock isnt try_lock\"\"\n\nThis reverts commit a4fe57da6207c1e5691a1e843d22db571f3f0186.\n\nThe issue here should be fixed by the previous commit.",
      "tree": {
        "sha": "550b3e569b942e41af08eb443f5c6516154bc80c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/550b3e569b942e41af08eb443f5c6516154bc80c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9493803f4a60a234c2712bba000a6b9c93ffba94",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9493803f4a60a234c2712bba000a6b9c93ffba94",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9493803f4a60a234c2712bba000a6b9c93ffba94",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9493803f4a60a234c2712bba000a6b9c93ffba94/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "605433ffb531ba4b3c20146edf4673ed8dbc3fad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/605433ffb531ba4b3c20146edf4673ed8dbc3fad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/605433ffb531ba4b3c20146edf4673ed8dbc3fad"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 39,
      "deletions": 10
    },
    "files": [
      {
        "sha": "1837e8d53ddb12ff01f3edec7ba88224a152f1c0",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 10,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9493803f4a60a234c2712bba000a6b9c93ffba94/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9493803f4a60a234c2712bba000a6b9c93ffba94/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=9493803f4a60a234c2712bba000a6b9c93ffba94",
        "patch": "@@ -33,20 +33,22 @@ void PrintLockContention(const char* pszName, const char* pszFile, int nLine)\n //\n \n struct CLockLocation {\n-    CLockLocation(const char* pszName, const char* pszFile, int nLine)\n+    CLockLocation(const char* pszName, const char* pszFile, int nLine, bool fTryIn)\n     {\n         mutexName = pszName;\n         sourceFile = pszFile;\n         sourceLine = nLine;\n+        fTry = fTryIn;\n     }\n \n     std::string ToString() const\n     {\n-        return mutexName + \"  \" + sourceFile + \":\" + itostr(sourceLine);\n+        return mutexName + \"  \" + sourceFile + \":\" + itostr(sourceLine) + (fTry ? \" (TRY)\" : \"\");\n     }\n \n     std::string MutexName() const { return mutexName; }\n \n+    bool fTry;\n private:\n     std::string mutexName;\n     std::string sourceFile;\n@@ -62,23 +64,52 @@ static boost::thread_specific_ptr<LockStack> lockstack;\n \n static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch, const LockStack& s1, const LockStack& s2)\n {\n+    // We attempt to not assert on probably-not deadlocks by assuming that\n+    // a try lock will immediately have otherwise bailed if it had\n+    // failed to get the lock\n+    // We do this by, for the locks which triggered the potential deadlock,\n+    // in either lockorder, checking that the second of the two which is locked\n+    // is only a TRY_LOCK, ignoring locks if they are reentrant.\n+    bool firstLocked = false;\n+    bool secondLocked = false;\n+    bool onlyMaybeDeadlock = false;\n+\n     LogPrintf(\"POTENTIAL DEADLOCK DETECTED\\n\");\n     LogPrintf(\"Previous lock order was:\\n\");\n     BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, s2) {\n-        if (i.first == mismatch.first)\n+        if (i.first == mismatch.first) {\n             LogPrintf(\" (1)\");\n-        if (i.first == mismatch.second)\n+            if (!firstLocked && secondLocked && i.second.fTry)\n+                onlyMaybeDeadlock = true;\n+            firstLocked = true;\n+        }\n+        if (i.first == mismatch.second) {\n             LogPrintf(\" (2)\");\n+            if (!secondLocked && firstLocked && i.second.fTry)\n+                onlyMaybeDeadlock = true;\n+            secondLocked = true;\n+        }\n         LogPrintf(\" %s\\n\", i.second.ToString());\n     }\n+    firstLocked = false;\n+    secondLocked = false;\n     LogPrintf(\"Current lock order is:\\n\");\n     BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, s1) {\n-        if (i.first == mismatch.first)\n+        if (i.first == mismatch.first) {\n             LogPrintf(\" (1)\");\n-        if (i.first == mismatch.second)\n+            if (!firstLocked && secondLocked && i.second.fTry)\n+                onlyMaybeDeadlock = true;\n+            firstLocked = true;\n+        }\n+        if (i.first == mismatch.second) {\n             LogPrintf(\" (2)\");\n+            if (!secondLocked && firstLocked && i.second.fTry)\n+                onlyMaybeDeadlock = true;\n+            secondLocked = true;\n+        }\n         LogPrintf(\" %s\\n\", i.second.ToString());\n     }\n+    assert(onlyMaybeDeadlock);\n }\n \n static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)\n@@ -101,10 +132,8 @@ static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)\n             lockorders[p1] = (*lockstack);\n \n             std::pair<void*, void*> p2 = std::make_pair(c, i.first);\n-            if (lockorders.count(p2)) {\n+            if (lockorders.count(p2))\n                 potential_deadlock_detected(p1, lockorders[p2], lockorders[p1]);\n-                break;\n-            }\n         }\n     }\n     dd_mutex.unlock();\n@@ -119,7 +148,7 @@ static void pop_lock()\n \n void EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry)\n {\n-    push_lock(cs, CLockLocation(pszName, pszFile, nLine), fTry);\n+    push_lock(cs, CLockLocation(pszName, pszFile, nLine, fTry), fTry);\n }\n \n void LeaveCritical()"
      }
    ]
  },
  {
    "sha": "69c3bde4480ebe28095f4399a29f9fc73567a1d3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OWMzYmRlNDQ4MGViZTI4MDk1ZjQzOTlhMjlmOWZjNzM1NjdhMWQz",
    "commit": {
      "author": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2015-08-08T16:18:41Z"
      },
      "committer": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2015-08-08T16:18:41Z"
      },
      "message": "Add some const declarations where they are appropriate.\n\nDeclare some arguments of functions as \"const\" pointers where they are\nnot meant to be modified.",
      "tree": {
        "sha": "e2cbc7e58cde1735371ea00c28628e9e054e6ba3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e2cbc7e58cde1735371ea00c28628e9e054e6ba3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/69c3bde4480ebe28095f4399a29f9fc73567a1d3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69c3bde4480ebe28095f4399a29f9fc73567a1d3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/69c3bde4480ebe28095f4399a29f9fc73567a1d3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69c3bde4480ebe28095f4399a29f9fc73567a1d3/comments",
    "author": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c0f66ce44abdc44ddbff892720d5b85f6a95436d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0f66ce44abdc44ddbff892720d5b85f6a95436d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c0f66ce44abdc44ddbff892720d5b85f6a95436d"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 15,
      "deletions": 15
    },
    "files": [
      {
        "sha": "bfae0d7f8ca7e0a53c1a361c17c74242b0614ff2",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69c3bde4480ebe28095f4399a29f9fc73567a1d3/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69c3bde4480ebe28095f4399a29f9fc73567a1d3/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=69c3bde4480ebe28095f4399a29f9fc73567a1d3",
        "patch": "@@ -1035,7 +1035,7 @@ bool GetTransaction(const uint256 &hash, CTransaction &txOut, uint256 &hashBlock\n // CBlock and CBlockIndex\n //\n \n-bool WriteBlockToDisk(CBlock& block, CDiskBlockPos& pos, const CMessageHeader::MessageStartChars& messageStart)\n+bool WriteBlockToDisk(const CBlock& block, CDiskBlockPos& pos, const CMessageHeader::MessageStartChars& messageStart)\n {\n     // Open history file to append\n     CAutoFile fileout(OpenBlockFile(pos), SER_DISK, CLIENT_VERSION);\n@@ -1520,7 +1520,7 @@ static bool ApplyTxInUndo(const CTxInUndo& undo, CCoinsViewCache& view, const CO\n     return fClean;\n }\n \n-bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& view, bool* pfClean)\n+bool DisconnectBlock(const CBlock& block, CValidationState& state, const CBlockIndex* pindex, CCoinsViewCache& view, bool* pfClean)\n {\n     assert(pindex->GetBlockHash() == view.GetBestBlock());\n \n@@ -2077,7 +2077,7 @@ static int64_t nTimePostConnect = 0;\n  * Connect a new block to chainActive. pblock is either NULL or a pointer to a CBlock\n  * corresponding to pindexNew, to bypass loading it again from disk.\n  */\n-bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew, CBlock *pblock) {\n+bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew, const CBlock *pblock) {\n     assert(pindexNew->pprev == chainActive.Tip());\n     mempool.check(pcoinsTip);\n     // Read block from disk.\n@@ -2209,7 +2209,7 @@ static void PruneBlockIndexCandidates() {\n  * Try to make some progress towards making pindexMostWork the active block.\n  * pblock is either NULL or a pointer to a CBlock corresponding to pindexMostWork.\n  */\n-static bool ActivateBestChainStep(CValidationState &state, CBlockIndex *pindexMostWork, CBlock *pblock) {\n+static bool ActivateBestChainStep(CValidationState &state, CBlockIndex *pindexMostWork, const CBlock *pblock) {\n     AssertLockHeld(cs_main);\n     bool fInvalidFound = false;\n     const CBlockIndex *pindexOldTip = chainActive.Tip();\n@@ -2278,7 +2278,7 @@ static bool ActivateBestChainStep(CValidationState &state, CBlockIndex *pindexMo\n  * or an activated best chain. pblock is either NULL or a pointer to a block\n  * that is already loaded (to avoid loading it again from disk).\n  */\n-bool ActivateBestChain(CValidationState &state, CBlock *pblock) {\n+bool ActivateBestChain(CValidationState &state, const CBlock *pblock) {\n     CBlockIndex *pindexNewTip = NULL;\n     CBlockIndex *pindexMostWork = NULL;\n     const CChainParams& chainParams = Params();\n@@ -2749,7 +2749,7 @@ bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBloc\n     return true;\n }\n \n-bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex, bool fRequested, CDiskBlockPos* dbp)\n+bool AcceptBlock(const CBlock& block, CValidationState& state, CBlockIndex** ppindex, bool fRequested, CDiskBlockPos* dbp)\n {\n     const CChainParams& chainparams = Params();\n     AssertLockHeld(cs_main);\n@@ -2826,7 +2826,7 @@ static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned\n }\n \n \n-bool ProcessNewBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, bool fForceProcessing, CDiskBlockPos *dbp)\n+bool ProcessNewBlock(CValidationState &state, const CNode* pfrom, const CBlock* pblock, bool fForceProcessing, CDiskBlockPos *dbp)\n {\n     // Preliminary checks\n     bool checked = CheckBlock(*pblock, state);"
      },
      {
        "sha": "a78a589e1626d45be058740536679aa9201b63f0",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69c3bde4480ebe28095f4399a29f9fc73567a1d3/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69c3bde4480ebe28095f4399a29f9fc73567a1d3/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=69c3bde4480ebe28095f4399a29f9fc73567a1d3",
        "patch": "@@ -142,7 +142,7 @@ void UnregisterNodeSignals(CNodeSignals& nodeSignals);\n  * @param[out]  dbp     If pblock is stored to disk (or already there), this will be set to its location.\n  * @return True if state.IsValid()\n  */\n-bool ProcessNewBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, bool fForceProcessing, CDiskBlockPos *dbp);\n+bool ProcessNewBlock(CValidationState &state, const CNode* pfrom, const CBlock* pblock, bool fForceProcessing, CDiskBlockPos *dbp);\n /** Check whether enough disk space is available for an incoming block */\n bool CheckDiskSpace(uint64_t nAdditionalBytes = 0);\n /** Open a block file (blk?????.dat) */\n@@ -179,7 +179,7 @@ std::string GetWarnings(const std::string& strFor);\n /** Retrieve a transaction (from memory pool, or from disk, if possible) */\n bool GetTransaction(const uint256 &hash, CTransaction &tx, uint256 &hashBlock, bool fAllowSlow = false);\n /** Find the best known block, and make it the tip of the block chain */\n-bool ActivateBestChain(CValidationState &state, CBlock *pblock = NULL);\n+bool ActivateBestChain(CValidationState &state, const CBlock *pblock = NULL);\n CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams);\n \n /**\n@@ -335,7 +335,7 @@ class CScriptCheck\n \n \n /** Functions for disk access for blocks */\n-bool WriteBlockToDisk(CBlock& block, CDiskBlockPos& pos, const CMessageHeader::MessageStartChars& messageStart);\n+bool WriteBlockToDisk(const CBlock& block, CDiskBlockPos& pos, const CMessageHeader::MessageStartChars& messageStart);\n bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos);\n bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex);\n \n@@ -346,7 +346,7 @@ bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex);\n  *  In case pfClean is provided, operation will try to be tolerant about errors, and *pfClean\n  *  will be true if no problems were found. Otherwise, the return value will be false in case\n  *  of problems. Note that in any case, coins may be modified. */\n-bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& coins, bool* pfClean = NULL);\n+bool DisconnectBlock(const CBlock& block, CValidationState& state, const CBlockIndex* pindex, CCoinsViewCache& coins, bool* pfClean = NULL);\n \n /** Apply the effects of this block (with given index) on the UTXO set represented by coins */\n bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& coins, bool fJustCheck = false);\n@@ -363,7 +363,7 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n bool TestBlockValidity(CValidationState &state, const CBlock& block, CBlockIndex *pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n /** Store block on disk. If dbp is non-NULL, the file is known to already reside on disk */\n-bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex **pindex, bool fRequested, CDiskBlockPos* dbp);\n+bool AcceptBlock(const CBlock& block, CValidationState& state, CBlockIndex **pindex, bool fRequested, CDiskBlockPos* dbp);\n bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex **ppindex= NULL);\n \n "
      },
      {
        "sha": "4172266067440e21771742cb540559627c83ca68",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69c3bde4480ebe28095f4399a29f9fc73567a1d3/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69c3bde4480ebe28095f4399a29f9fc73567a1d3/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=69c3bde4480ebe28095f4399a29f9fc73567a1d3",
        "patch": "@@ -352,7 +352,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n     return pblocktemplate.release();\n }\n \n-void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce)\n+void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned int& nExtraNonce)\n {\n     // Update nExtraNonce\n     static uint256 hashPrevBlock;\n@@ -409,7 +409,7 @@ bool static ScanHash(const CBlockHeader *pblock, uint32_t& nNonce, uint256 *phas\n     }\n }\n \n-static bool ProcessBlockFound(CBlock* pblock, const CChainParams& chainparams)\n+static bool ProcessBlockFound(const CBlock* pblock, const CChainParams& chainparams)\n {\n     LogPrintf(\"%s\\n\", pblock->ToString());\n     LogPrintf(\"generated %s\\n\", FormatMoney(pblock->vtx[0].vout[0].nValue));"
      },
      {
        "sha": "7e0e58d54013c91654d2e50677b0cf157de871f9",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69c3bde4480ebe28095f4399a29f9fc73567a1d3/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69c3bde4480ebe28095f4399a29f9fc73567a1d3/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=69c3bde4480ebe28095f4399a29f9fc73567a1d3",
        "patch": "@@ -29,7 +29,7 @@ void GenerateBitcoins(bool fGenerate, int nThreads, const CChainParams& chainpar\n /** Generate a new block, without valid proof-of-work */\n CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn);\n /** Modify the extranonce in a block */\n-void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce);\n+void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned int& nExtraNonce);\n int64_t UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev);\n \n #endif // BITCOIN_MINER_H"
      }
    ]
  },
  {
    "sha": "428a898acd37e1c0afa21623a8fe5728859067be",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MjhhODk4YWNkMzdlMWMwYWZhMjE2MjNhOGZlNTcyODg1OTA2N2Jl",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-08-08T16:26:07Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-08-08T16:30:53Z"
      },
      "message": "SQUASH \"Add have-pubkey distinction to ISMINE flags\"",
      "tree": {
        "sha": "fb4ab1a072da52a0b557fa765e0f671b1b845955",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fb4ab1a072da52a0b557fa765e0f671b1b845955"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/428a898acd37e1c0afa21623a8fe5728859067be",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/428a898acd37e1c0afa21623a8fe5728859067be",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/428a898acd37e1c0afa21623a8fe5728859067be",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/428a898acd37e1c0afa21623a8fe5728859067be/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6bdb474dc9dd34e1a5b13ce9494a936cba77e027",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bdb474dc9dd34e1a5b13ce9494a936cba77e027",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6bdb474dc9dd34e1a5b13ce9494a936cba77e027"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "d27b1531e3e620090e658433beba90cbb7b0656c",
        "filename": "src/wallet/wallet_ismine.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/428a898acd37e1c0afa21623a8fe5728859067be/src/wallet/wallet_ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/428a898acd37e1c0afa21623a8fe5728859067be/src/wallet/wallet_ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet_ismine.cpp?ref=428a898acd37e1c0afa21623a8fe5728859067be",
        "patch": "@@ -41,7 +41,7 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n     txnouttype whichType;\n     if (!Solver(scriptPubKey, whichType, vSolutions)) {\n         if (keystore.HaveWatchOnly(scriptPubKey))\n-            return ISMINE_WATCH_NOPUBKEY;\n+            return ISMINE_WATCH_UNSOLVABLE;\n         return ISMINE_NO;\n     }\n \n@@ -89,7 +89,7 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n     if (keystore.HaveWatchOnly(scriptPubKey)) {\n         // TODO: This could be optimized some by doing some work after the above solver\n         CScript scriptSig;\n-        return ProduceSignature(DummySignatureCreator(&keystore), scriptPubKey, scriptSig) ? ISMINE_WATCH_PUBKEY : ISMINE_WATCH_NOPUBKEY;\n+        return ProduceSignature(DummySignatureCreator(&keystore), scriptPubKey, scriptSig) ? ISMINE_WATCH_SOLVABLE : ISMINE_WATCH_UNSOLVABLE;\n     }\n     return ISMINE_NO;\n }"
      },
      {
        "sha": "ec9dcddd5a07c213861140e21d19a60324324985",
        "filename": "src/wallet/wallet_ismine.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/428a898acd37e1c0afa21623a8fe5728859067be/src/wallet/wallet_ismine.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/428a898acd37e1c0afa21623a8fe5728859067be/src/wallet/wallet_ismine.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet_ismine.h?ref=428a898acd37e1c0afa21623a8fe5728859067be",
        "patch": "@@ -17,10 +17,10 @@ enum isminetype\n {\n     ISMINE_NO = 0,\n     //! Indicates that we dont know how to create a scriptSig that would solve this if we were given the appropriate private keys\n-    ISMINE_WATCH_NOPUBKEY = 1,\n+    ISMINE_WATCH_UNSOLVABLE = 1,\n     //! Indicates that we know how to create a scriptSig that would solve this if we were given the appropriate private keys\n-    ISMINE_WATCH_PUBKEY = 2,\n-    ISMINE_WATCH_ONLY = ISMINE_WATCH_NOPUBKEY | ISMINE_WATCH_PUBKEY,\n+    ISMINE_WATCH_SOLVABLE = 2,\n+    ISMINE_WATCH_ONLY = ISMINE_WATCH_SOLVABLE | ISMINE_WATCH_UNSOLVABLE,\n     ISMINE_SPENDABLE = 4,\n     ISMINE_ALL = ISMINE_WATCH_ONLY | ISMINE_SPENDABLE\n };"
      }
    ]
  },
  {
    "sha": "d04285430d1b54b3ce3d50ffa67b6098157e7c14",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMDQyODU0MzBkMWI1NGIzY2UzZDUwZmZhNjdiNjA5ODE1N2U3YzE0",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-08-08T16:27:19Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-08-08T16:30:53Z"
      },
      "message": "SQUASH \"Implement watchonly support in fundrawtransaction\"",
      "tree": {
        "sha": "8d162c741dfe8222a293a7eb77d5056804f2bbd3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8d162c741dfe8222a293a7eb77d5056804f2bbd3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d04285430d1b54b3ce3d50ffa67b6098157e7c14",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d04285430d1b54b3ce3d50ffa67b6098157e7c14",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d04285430d1b54b3ce3d50ffa67b6098157e7c14",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d04285430d1b54b3ce3d50ffa67b6098157e7c14/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "428a898acd37e1c0afa21623a8fe5728859067be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/428a898acd37e1c0afa21623a8fe5728859067be",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/428a898acd37e1c0afa21623a8fe5728859067be"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "bc965f9e19dfa0a509801bab11bf632a210809b6",
        "filename": "src/coincontrol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d04285430d1b54b3ce3d50ffa67b6098157e7c14/src/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d04285430d1b54b3ce3d50ffa67b6098157e7c14/src/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coincontrol.h?ref=d04285430d1b54b3ce3d50ffa67b6098157e7c14",
        "patch": "@@ -14,7 +14,7 @@ class CCoinControl\n     CTxDestination destChange;\n     //! If false, allows unselected inputs, but requires all selected inputs be used\n     bool fAllowOtherInputs;\n-    //! Includes watch only addresses which match the ISMINE_WATCH_PUBKEY criteria\n+    //! Includes watch only addresses which match the ISMINE_WATCH_SOLVABLE criteria\n     bool fAllowWatchOnly;\n \n     CCoinControl()"
      },
      {
        "sha": "8b7231b6eb066d8d38055b00e416735055af365f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d04285430d1b54b3ce3d50ffa67b6098157e7c14/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d04285430d1b54b3ce3d50ffa67b6098157e7c14/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d04285430d1b54b3ce3d50ffa67b6098157e7c14",
        "patch": "@@ -1526,7 +1526,7 @@ void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed, const\n                     (!coinControl || !coinControl->HasSelected() || coinControl->fAllowOtherInputs || coinControl->IsSelected((*it).first, i)))\n                         vCoins.push_back(COutput(pcoin, i, nDepth,\n                                                  ((mine & ISMINE_SPENDABLE) != ISMINE_NO) ||\n-                                                  (coinControl && coinControl->fAllowWatchOnly && (mine & ISMINE_WATCH_PUBKEY) != ISMINE_NO)));\n+                                                  (coinControl && coinControl->fAllowWatchOnly && (mine & ISMINE_WATCH_SOLVABLE) != ISMINE_NO)));\n             }\n         }\n     }"
      }
    ]
  },
  {
    "sha": "ce37a04ee016c0e1d075c41e58750abe597f4ebb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZTM3YTA0ZWUwMTZjMGUxZDA3NWM0MWU1ODc1MGFiZTU5N2Y0ZWJi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-10T15:12:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-10T15:34:58Z"
      },
      "message": "Merge pull request #6538\n\n69c3bde Add some const declarations where they are appropriate. (Daniel Kraft)",
      "tree": {
        "sha": "e2cbc7e58cde1735371ea00c28628e9e054e6ba3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e2cbc7e58cde1735371ea00c28628e9e054e6ba3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ce37a04ee016c0e1d075c41e58750abe597f4ebb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVyMSiAAoJEHSBCwEjRsmmIbUH/3Yc/PRn4xBSQh+TmiD9XtUL\n/1Oa29X2M8wTZFIskadKJkD8qopJLlKNE1I7bMWF85DhQfutvowH5fsPlLx569LT\nFsLqdulwMm+yyB45nagE5dWclsJJudHjg17mVlJawc1P81O6S4FA7F6gsVYn2JV7\nW5fpYxjk+Mv5TzN9MWl0BdFjZqceBq9Fs4AdQfN6rzPTCriRJ/si2qLgoRNJLkTj\noiHdhjbOqI1u8Oridk9TR7etiCpWFpdDmLAWGjQgdqvgsLXfrzlqjTUzsk8YBo/k\n9y4biCTpp3RByoECkv8JqJhsPQnaU6rCKpDcxn2iGjNXqTIYWLomaf2o9VUlEQo=\n=BzPo\n-----END PGP SIGNATURE-----",
        "payload": "tree e2cbc7e58cde1735371ea00c28628e9e054e6ba3\nparent c0f66ce44abdc44ddbff892720d5b85f6a95436d\nparent 69c3bde4480ebe28095f4399a29f9fc73567a1d3\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1439219532 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1439220898 +0200\n\nMerge pull request #6538\n\n69c3bde Add some const declarations where they are appropriate. (Daniel Kraft)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce37a04ee016c0e1d075c41e58750abe597f4ebb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ce37a04ee016c0e1d075c41e58750abe597f4ebb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce37a04ee016c0e1d075c41e58750abe597f4ebb/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c0f66ce44abdc44ddbff892720d5b85f6a95436d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0f66ce44abdc44ddbff892720d5b85f6a95436d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c0f66ce44abdc44ddbff892720d5b85f6a95436d"
      },
      {
        "sha": "69c3bde4480ebe28095f4399a29f9fc73567a1d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69c3bde4480ebe28095f4399a29f9fc73567a1d3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/69c3bde4480ebe28095f4399a29f9fc73567a1d3"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 15,
      "deletions": 15
    },
    "files": [
      {
        "sha": "bfae0d7f8ca7e0a53c1a361c17c74242b0614ff2",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce37a04ee016c0e1d075c41e58750abe597f4ebb/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce37a04ee016c0e1d075c41e58750abe597f4ebb/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ce37a04ee016c0e1d075c41e58750abe597f4ebb",
        "patch": "@@ -1035,7 +1035,7 @@ bool GetTransaction(const uint256 &hash, CTransaction &txOut, uint256 &hashBlock\n // CBlock and CBlockIndex\n //\n \n-bool WriteBlockToDisk(CBlock& block, CDiskBlockPos& pos, const CMessageHeader::MessageStartChars& messageStart)\n+bool WriteBlockToDisk(const CBlock& block, CDiskBlockPos& pos, const CMessageHeader::MessageStartChars& messageStart)\n {\n     // Open history file to append\n     CAutoFile fileout(OpenBlockFile(pos), SER_DISK, CLIENT_VERSION);\n@@ -1520,7 +1520,7 @@ static bool ApplyTxInUndo(const CTxInUndo& undo, CCoinsViewCache& view, const CO\n     return fClean;\n }\n \n-bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& view, bool* pfClean)\n+bool DisconnectBlock(const CBlock& block, CValidationState& state, const CBlockIndex* pindex, CCoinsViewCache& view, bool* pfClean)\n {\n     assert(pindex->GetBlockHash() == view.GetBestBlock());\n \n@@ -2077,7 +2077,7 @@ static int64_t nTimePostConnect = 0;\n  * Connect a new block to chainActive. pblock is either NULL or a pointer to a CBlock\n  * corresponding to pindexNew, to bypass loading it again from disk.\n  */\n-bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew, CBlock *pblock) {\n+bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew, const CBlock *pblock) {\n     assert(pindexNew->pprev == chainActive.Tip());\n     mempool.check(pcoinsTip);\n     // Read block from disk.\n@@ -2209,7 +2209,7 @@ static void PruneBlockIndexCandidates() {\n  * Try to make some progress towards making pindexMostWork the active block.\n  * pblock is either NULL or a pointer to a CBlock corresponding to pindexMostWork.\n  */\n-static bool ActivateBestChainStep(CValidationState &state, CBlockIndex *pindexMostWork, CBlock *pblock) {\n+static bool ActivateBestChainStep(CValidationState &state, CBlockIndex *pindexMostWork, const CBlock *pblock) {\n     AssertLockHeld(cs_main);\n     bool fInvalidFound = false;\n     const CBlockIndex *pindexOldTip = chainActive.Tip();\n@@ -2278,7 +2278,7 @@ static bool ActivateBestChainStep(CValidationState &state, CBlockIndex *pindexMo\n  * or an activated best chain. pblock is either NULL or a pointer to a block\n  * that is already loaded (to avoid loading it again from disk).\n  */\n-bool ActivateBestChain(CValidationState &state, CBlock *pblock) {\n+bool ActivateBestChain(CValidationState &state, const CBlock *pblock) {\n     CBlockIndex *pindexNewTip = NULL;\n     CBlockIndex *pindexMostWork = NULL;\n     const CChainParams& chainParams = Params();\n@@ -2749,7 +2749,7 @@ bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBloc\n     return true;\n }\n \n-bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex, bool fRequested, CDiskBlockPos* dbp)\n+bool AcceptBlock(const CBlock& block, CValidationState& state, CBlockIndex** ppindex, bool fRequested, CDiskBlockPos* dbp)\n {\n     const CChainParams& chainparams = Params();\n     AssertLockHeld(cs_main);\n@@ -2826,7 +2826,7 @@ static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned\n }\n \n \n-bool ProcessNewBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, bool fForceProcessing, CDiskBlockPos *dbp)\n+bool ProcessNewBlock(CValidationState &state, const CNode* pfrom, const CBlock* pblock, bool fForceProcessing, CDiskBlockPos *dbp)\n {\n     // Preliminary checks\n     bool checked = CheckBlock(*pblock, state);"
      },
      {
        "sha": "a78a589e1626d45be058740536679aa9201b63f0",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce37a04ee016c0e1d075c41e58750abe597f4ebb/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce37a04ee016c0e1d075c41e58750abe597f4ebb/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=ce37a04ee016c0e1d075c41e58750abe597f4ebb",
        "patch": "@@ -142,7 +142,7 @@ void UnregisterNodeSignals(CNodeSignals& nodeSignals);\n  * @param[out]  dbp     If pblock is stored to disk (or already there), this will be set to its location.\n  * @return True if state.IsValid()\n  */\n-bool ProcessNewBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, bool fForceProcessing, CDiskBlockPos *dbp);\n+bool ProcessNewBlock(CValidationState &state, const CNode* pfrom, const CBlock* pblock, bool fForceProcessing, CDiskBlockPos *dbp);\n /** Check whether enough disk space is available for an incoming block */\n bool CheckDiskSpace(uint64_t nAdditionalBytes = 0);\n /** Open a block file (blk?????.dat) */\n@@ -179,7 +179,7 @@ std::string GetWarnings(const std::string& strFor);\n /** Retrieve a transaction (from memory pool, or from disk, if possible) */\n bool GetTransaction(const uint256 &hash, CTransaction &tx, uint256 &hashBlock, bool fAllowSlow = false);\n /** Find the best known block, and make it the tip of the block chain */\n-bool ActivateBestChain(CValidationState &state, CBlock *pblock = NULL);\n+bool ActivateBestChain(CValidationState &state, const CBlock *pblock = NULL);\n CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams);\n \n /**\n@@ -335,7 +335,7 @@ class CScriptCheck\n \n \n /** Functions for disk access for blocks */\n-bool WriteBlockToDisk(CBlock& block, CDiskBlockPos& pos, const CMessageHeader::MessageStartChars& messageStart);\n+bool WriteBlockToDisk(const CBlock& block, CDiskBlockPos& pos, const CMessageHeader::MessageStartChars& messageStart);\n bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos);\n bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex);\n \n@@ -346,7 +346,7 @@ bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex);\n  *  In case pfClean is provided, operation will try to be tolerant about errors, and *pfClean\n  *  will be true if no problems were found. Otherwise, the return value will be false in case\n  *  of problems. Note that in any case, coins may be modified. */\n-bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& coins, bool* pfClean = NULL);\n+bool DisconnectBlock(const CBlock& block, CValidationState& state, const CBlockIndex* pindex, CCoinsViewCache& coins, bool* pfClean = NULL);\n \n /** Apply the effects of this block (with given index) on the UTXO set represented by coins */\n bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& coins, bool fJustCheck = false);\n@@ -363,7 +363,7 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n bool TestBlockValidity(CValidationState &state, const CBlock& block, CBlockIndex *pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n /** Store block on disk. If dbp is non-NULL, the file is known to already reside on disk */\n-bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex **pindex, bool fRequested, CDiskBlockPos* dbp);\n+bool AcceptBlock(const CBlock& block, CValidationState& state, CBlockIndex **pindex, bool fRequested, CDiskBlockPos* dbp);\n bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex **ppindex= NULL);\n \n "
      },
      {
        "sha": "4172266067440e21771742cb540559627c83ca68",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce37a04ee016c0e1d075c41e58750abe597f4ebb/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce37a04ee016c0e1d075c41e58750abe597f4ebb/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=ce37a04ee016c0e1d075c41e58750abe597f4ebb",
        "patch": "@@ -352,7 +352,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n     return pblocktemplate.release();\n }\n \n-void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce)\n+void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned int& nExtraNonce)\n {\n     // Update nExtraNonce\n     static uint256 hashPrevBlock;\n@@ -409,7 +409,7 @@ bool static ScanHash(const CBlockHeader *pblock, uint32_t& nNonce, uint256 *phas\n     }\n }\n \n-static bool ProcessBlockFound(CBlock* pblock, const CChainParams& chainparams)\n+static bool ProcessBlockFound(const CBlock* pblock, const CChainParams& chainparams)\n {\n     LogPrintf(\"%s\\n\", pblock->ToString());\n     LogPrintf(\"generated %s\\n\", FormatMoney(pblock->vtx[0].vout[0].nValue));"
      },
      {
        "sha": "7e0e58d54013c91654d2e50677b0cf157de871f9",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce37a04ee016c0e1d075c41e58750abe597f4ebb/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce37a04ee016c0e1d075c41e58750abe597f4ebb/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=ce37a04ee016c0e1d075c41e58750abe597f4ebb",
        "patch": "@@ -29,7 +29,7 @@ void GenerateBitcoins(bool fGenerate, int nThreads, const CChainParams& chainpar\n /** Generate a new block, without valid proof-of-work */\n CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn);\n /** Modify the extranonce in a block */\n-void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce);\n+void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned int& nExtraNonce);\n int64_t UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev);\n \n #endif // BITCOIN_MINER_H"
      }
    ]
  },
  {
    "sha": "6c1c7fdfd6531a2abe92219af81dd0e599c2de7a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YzFjN2ZkZmQ2NTMxYTJhYmU5MjIxOWFmODFkZDBlNTk5YzJkZTdh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-10T15:36:54Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-10T15:38:25Z"
      },
      "message": "Merge pull request #6534\n\n9493803 Revert \"Revert \"Assert on probable deadlocks if the second lock isnt try_lock\"\" (Cory Fields)\n605433f locks: don't lock cs_wallet before making rpc calls (Cory Fields)",
      "tree": {
        "sha": "0dc124ee1cc9f4e3c8b13d42853d478a6d2baf62",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0dc124ee1cc9f4e3c8b13d42853d478a6d2baf62"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6c1c7fdfd6531a2abe92219af81dd0e599c2de7a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVyMVxAAoJEHSBCwEjRsmm/BYH/1pEazVSfirwdc5q9RBa8up7\nk93WZFl/eZMbh4hfjp+zSEHF8HJbarcP6skvMMyRwnrpOWIjMIbemii+OQO7CkAx\nOYY0kYsd01uXRmvNrB96fH309gk7kp0RsX3RoVfA/PzFDgWxkRr95ztjZQI3g3dH\nsCU4RwOVRk0bzYj6Mg1Lqdu76EhQvcHL3SjB7r/0QhEgh4GgaLY9AyxNXPXZl62v\nV2RpWhpEWwWqoatEToCQNF9mfsGGx9/z4QeAO7FeyqYeJp4bdMMbWAmkDc0omidy\nKoWIV9bXHmvlcuZKwqy3EB2I7i4J4eP9B3POkUcuqWYphgY0dyz72rH6v3cUo1Q=\n=+oGS\n-----END PGP SIGNATURE-----",
        "payload": "tree 0dc124ee1cc9f4e3c8b13d42853d478a6d2baf62\nparent ce37a04ee016c0e1d075c41e58750abe597f4ebb\nparent 9493803f4a60a234c2712bba000a6b9c93ffba94\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1439221014 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1439221105 +0200\n\nMerge pull request #6534\n\n9493803 Revert \"Revert \"Assert on probable deadlocks if the second lock isnt try_lock\"\" (Cory Fields)\n605433f locks: don't lock cs_wallet before making rpc calls (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c1c7fdfd6531a2abe92219af81dd0e599c2de7a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6c1c7fdfd6531a2abe92219af81dd0e599c2de7a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c1c7fdfd6531a2abe92219af81dd0e599c2de7a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ce37a04ee016c0e1d075c41e58750abe597f4ebb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce37a04ee016c0e1d075c41e58750abe597f4ebb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ce37a04ee016c0e1d075c41e58750abe597f4ebb"
      },
      {
        "sha": "9493803f4a60a234c2712bba000a6b9c93ffba94",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9493803f4a60a234c2712bba000a6b9c93ffba94",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9493803f4a60a234c2712bba000a6b9c93ffba94"
      }
    ],
    "stats": {
      "total": 88,
      "additions": 59,
      "deletions": 29
    },
    "files": [
      {
        "sha": "1837e8d53ddb12ff01f3edec7ba88224a152f1c0",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 10,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c1c7fdfd6531a2abe92219af81dd0e599c2de7a/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c1c7fdfd6531a2abe92219af81dd0e599c2de7a/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=6c1c7fdfd6531a2abe92219af81dd0e599c2de7a",
        "patch": "@@ -33,20 +33,22 @@ void PrintLockContention(const char* pszName, const char* pszFile, int nLine)\n //\n \n struct CLockLocation {\n-    CLockLocation(const char* pszName, const char* pszFile, int nLine)\n+    CLockLocation(const char* pszName, const char* pszFile, int nLine, bool fTryIn)\n     {\n         mutexName = pszName;\n         sourceFile = pszFile;\n         sourceLine = nLine;\n+        fTry = fTryIn;\n     }\n \n     std::string ToString() const\n     {\n-        return mutexName + \"  \" + sourceFile + \":\" + itostr(sourceLine);\n+        return mutexName + \"  \" + sourceFile + \":\" + itostr(sourceLine) + (fTry ? \" (TRY)\" : \"\");\n     }\n \n     std::string MutexName() const { return mutexName; }\n \n+    bool fTry;\n private:\n     std::string mutexName;\n     std::string sourceFile;\n@@ -62,23 +64,52 @@ static boost::thread_specific_ptr<LockStack> lockstack;\n \n static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch, const LockStack& s1, const LockStack& s2)\n {\n+    // We attempt to not assert on probably-not deadlocks by assuming that\n+    // a try lock will immediately have otherwise bailed if it had\n+    // failed to get the lock\n+    // We do this by, for the locks which triggered the potential deadlock,\n+    // in either lockorder, checking that the second of the two which is locked\n+    // is only a TRY_LOCK, ignoring locks if they are reentrant.\n+    bool firstLocked = false;\n+    bool secondLocked = false;\n+    bool onlyMaybeDeadlock = false;\n+\n     LogPrintf(\"POTENTIAL DEADLOCK DETECTED\\n\");\n     LogPrintf(\"Previous lock order was:\\n\");\n     BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, s2) {\n-        if (i.first == mismatch.first)\n+        if (i.first == mismatch.first) {\n             LogPrintf(\" (1)\");\n-        if (i.first == mismatch.second)\n+            if (!firstLocked && secondLocked && i.second.fTry)\n+                onlyMaybeDeadlock = true;\n+            firstLocked = true;\n+        }\n+        if (i.first == mismatch.second) {\n             LogPrintf(\" (2)\");\n+            if (!secondLocked && firstLocked && i.second.fTry)\n+                onlyMaybeDeadlock = true;\n+            secondLocked = true;\n+        }\n         LogPrintf(\" %s\\n\", i.second.ToString());\n     }\n+    firstLocked = false;\n+    secondLocked = false;\n     LogPrintf(\"Current lock order is:\\n\");\n     BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, s1) {\n-        if (i.first == mismatch.first)\n+        if (i.first == mismatch.first) {\n             LogPrintf(\" (1)\");\n-        if (i.first == mismatch.second)\n+            if (!firstLocked && secondLocked && i.second.fTry)\n+                onlyMaybeDeadlock = true;\n+            firstLocked = true;\n+        }\n+        if (i.first == mismatch.second) {\n             LogPrintf(\" (2)\");\n+            if (!secondLocked && firstLocked && i.second.fTry)\n+                onlyMaybeDeadlock = true;\n+            secondLocked = true;\n+        }\n         LogPrintf(\" %s\\n\", i.second.ToString());\n     }\n+    assert(onlyMaybeDeadlock);\n }\n \n static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)\n@@ -101,10 +132,8 @@ static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)\n             lockorders[p1] = (*lockstack);\n \n             std::pair<void*, void*> p2 = std::make_pair(c, i.first);\n-            if (lockorders.count(p2)) {\n+            if (lockorders.count(p2))\n                 potential_deadlock_detected(p1, lockorders[p2], lockorders[p1]);\n-                break;\n-            }\n         }\n     }\n     dd_mutex.unlock();\n@@ -119,7 +148,7 @@ static void pop_lock()\n \n void EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry)\n {\n-    push_lock(cs, CLockLocation(pszName, pszFile, nLine), fTry);\n+    push_lock(cs, CLockLocation(pszName, pszFile, nLine, fTry), fTry);\n }\n \n void LeaveCritical()"
      },
      {
        "sha": "52f41be8aec02e4b87a4d78fc961ff47bfced435",
        "filename": "src/test/rpc_wallet_tests.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 19,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c1c7fdfd6531a2abe92219af81dd0e599c2de7a/src/test/rpc_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c1c7fdfd6531a2abe92219af81dd0e599c2de7a/src/test/rpc_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_wallet_tests.cpp?ref=6c1c7fdfd6531a2abe92219af81dd0e599c2de7a",
        "patch": "@@ -27,8 +27,6 @@ BOOST_FIXTURE_TEST_SUITE(rpc_wallet_tests, TestingSetup)\n \n BOOST_AUTO_TEST_CASE(rpc_addmultisig)\n {\n-    LOCK(pwalletMain->cs_wallet);\n-\n     rpcfn_type addmultisig = tableRPC[\"addmultisigaddress\"]->actor;\n \n     // old, 65-byte-long:\n@@ -68,25 +66,28 @@ BOOST_AUTO_TEST_CASE(rpc_wallet)\n {\n     // Test RPC calls for various wallet statistics\n     UniValue r;\n-\n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n-\n-    CPubKey demoPubkey = pwalletMain->GenerateNewKey();\n-    CBitcoinAddress demoAddress = CBitcoinAddress(CTxDestination(demoPubkey.GetID()));\n+    CPubKey demoPubkey;\n+    CBitcoinAddress demoAddress;\n     UniValue retValue;\n     string strAccount = \"walletDemoAccount\";\n-    string strPurpose = \"receive\";\n-    BOOST_CHECK_NO_THROW({ /*Initialize Wallet with an account */\n-        CWalletDB walletdb(pwalletMain->strWalletFile);\n-        CAccount account;\n-        account.vchPubKey = demoPubkey;\n-        pwalletMain->SetAddressBook(account.vchPubKey.GetID(), strAccount, strPurpose);\n-        walletdb.WriteAccount(strAccount, account);\n-    });\n-\n-    CPubKey setaccountDemoPubkey = pwalletMain->GenerateNewKey();\n-    CBitcoinAddress setaccountDemoAddress = CBitcoinAddress(CTxDestination(setaccountDemoPubkey.GetID()));\n-\n+    CBitcoinAddress setaccountDemoAddress;\n+    {\n+        LOCK(pwalletMain->cs_wallet);\n+\n+        demoPubkey = pwalletMain->GenerateNewKey();\n+        demoAddress = CBitcoinAddress(CTxDestination(demoPubkey.GetID()));\n+        string strPurpose = \"receive\";\n+        BOOST_CHECK_NO_THROW({ /*Initialize Wallet with an account */\n+            CWalletDB walletdb(pwalletMain->strWalletFile);\n+            CAccount account;\n+            account.vchPubKey = demoPubkey;\n+            pwalletMain->SetAddressBook(account.vchPubKey.GetID(), strAccount, strPurpose);\n+            walletdb.WriteAccount(strAccount, account);\n+        });\n+\n+        CPubKey setaccountDemoPubkey = pwalletMain->GenerateNewKey();\n+        setaccountDemoAddress = CBitcoinAddress(CTxDestination(setaccountDemoPubkey.GetID()));\n+    }\n     /*********************************\n      * \t\t\tsetaccount\n      *********************************/"
      }
    ]
  },
  {
    "sha": "0201a79299f782193897d3ba2d7a2904fa4c11ea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMjAxYTc5Mjk5Zjc4MjE5Mzg5N2QzYmEyZDdhMjkwNGZhNGMxMWVh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-10T15:46:39Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-10T15:46:49Z"
      },
      "message": "Merge pull request #6512\n\nfc25a87 Add note on relative paths, improve formatting (unsystemizer)",
      "tree": {
        "sha": "7294c43720289faa8cd8ec64d99f6f8f4555eb11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7294c43720289faa8cd8ec64d99f6f8f4555eb11"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0201a79299f782193897d3ba2d7a2904fa4c11ea",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVyMdpAAoJEHSBCwEjRsmmQlIH/3xU0bxpX7b6moyD2Fx7HeQC\n+qe6BhsDXViPJLWp1jEeN5ab6JPvA4arQsvdMaFAhP24EiUFH1AoSFIY9piU5vqa\ndY6Cwbazt5flvEeuKVeSOAHGNmhZaQUDsAk2UVpknOUtRycwT4Nzvgvadtmrqwsl\nU4yaBVFgbpqTkfMuC4eCB3W4+qpU2410pjKmP0G8co8c4FaMEbyRUWXW590Y51nw\njP5CgCna889D6LxLisCuosVKoj5h4EfcobJcG5KRhVo/4F6J3j0q9d1G8euU3YXU\niq/MyBKtLjwhFviUvO+/v78is4JCyatoJDtUjsuxqOvBwtO3l7rqmDp77XyyEEg=\n=BcyU\n-----END PGP SIGNATURE-----",
        "payload": "tree 7294c43720289faa8cd8ec64d99f6f8f4555eb11\nparent 6c1c7fdfd6531a2abe92219af81dd0e599c2de7a\nparent fc25a8748eefe3cb62be93d9804ef3f9e17b78cc\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1439221599 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1439221609 +0200\n\nMerge pull request #6512\n\nfc25a87 Add note on relative paths, improve formatting (unsystemizer)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0201a79299f782193897d3ba2d7a2904fa4c11ea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0201a79299f782193897d3ba2d7a2904fa4c11ea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0201a79299f782193897d3ba2d7a2904fa4c11ea/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6c1c7fdfd6531a2abe92219af81dd0e599c2de7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c1c7fdfd6531a2abe92219af81dd0e599c2de7a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6c1c7fdfd6531a2abe92219af81dd0e599c2de7a"
      },
      {
        "sha": "fc25a8748eefe3cb62be93d9804ef3f9e17b78cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc25a8748eefe3cb62be93d9804ef3f9e17b78cc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fc25a8748eefe3cb62be93d9804ef3f9e17b78cc"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 18,
      "deletions": 17
    },
    "files": [
      {
        "sha": "7dee450c29335c68fb7f641784989765d6996688",
        "filename": "doc/init.md",
        "status": "modified",
        "additions": 18,
        "deletions": 17,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0201a79299f782193897d3ba2d7a2904fa4c11ea/doc/init.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0201a79299f782193897d3ba2d7a2904fa4c11ea/doc/init.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/init.md?ref=0201a79299f782193897d3ba2d7a2904fa4c11ea",
        "patch": "@@ -33,24 +33,26 @@ If bitcoind is run with \"-daemon\" flag, and no rpcpassword is set, it will\n print a randomly generated suitable password to stderr.  You can also\n generate one from the shell yourself like this:\n \n-bash -c 'tr -dc a-zA-Z0-9 < /dev/urandom | head -c32 && echo'\n+`bash -c 'tr -dc a-zA-Z0-9 < /dev/urandom | head -c32 && echo'`\n \n-Once you have a password in hand, set rpcpassword= in /etc/bitcoin/bitcoin.conf\n+Once you have a password in hand, set `rpcpassword=` in `/etc/bitcoin/bitcoin.conf`\n+\n+`conf`, `pid`, and `wallet` accept relative paths which are interpreted as \n+relative to the data directory. `wallet` *only* supports relative paths.\n \n For an example configuration file that describes the configuration settings, \n-see contrib/debian/examples/bitcoin.conf.\n+see `contrib/debian/examples/bitcoin.conf`.\n \n 3. Paths\n ---------------------------------\n \n All three configurations assume several paths that might need to be adjusted.\n \n-Binary:              /usr/bin/bitcoind\n-Configuration file:  /etc/bitcoin/bitcoin.conf\n-Data directory:      /var/lib/bitcoind\n-PID file:            /var/run/bitcoind/bitcoind.pid (OpenRC and Upstart)\n-                     /var/lib/bitcoind/bitcoind.pid (systemd)\n-Lock file:           /var/lock/subsys/bitcoind (CentOS)\n+Binary:              `/usr/bin/bitcoind`  \n+Configuration file:  `/etc/bitcoin/bitcoin.conf`  \n+Data directory:      `/var/lib/bitcoind`  \n+PID file:            `/var/run/bitcoind/bitcoind.pid` (OpenRC and Upstart) or `/var/lib/bitcoind/bitcoind.pid` (systemd)  \n+Lock file:           `/var/lock/subsys/bitcoind` (CentOS)  \n \n The configuration file, PID directory (if applicable) and data directory\n should all be owned by the bitcoin user and group.  It is advised for security\n@@ -65,29 +67,29 @@ can then be controlled by group membership.\n \n Installing this .service file consists of just copying it to\n /usr/lib/systemd/system directory, followed by the command\n-\"systemctl daemon-reload\" in order to update running systemd configuration.\n+`systemctl daemon-reload` in order to update running systemd configuration.\n \n-To test, run \"systemctl start bitcoind\" and to enable for system startup run\n-\"systemctl enable bitcoind\"\n+To test, run `systemctl start bitcoind` and to enable for system startup run\n+`systemctl enable bitcoind`\n \n 4b) OpenRC\n \n Rename bitcoind.openrc to bitcoind and drop it in /etc/init.d.  Double\n check ownership and permissions and make it executable.  Test it with\n-\"/etc/init.d/bitcoind start\" and configure it to run on startup with\n-\"rc-update add bitcoind\"\n+`/etc/init.d/bitcoind start` and configure it to run on startup with\n+`rc-update add bitcoind`\n \n 4c) Upstart (for Debian/Ubuntu based distributions)\n \n-Drop bitcoind.conf in /etc/init.  Test by running \"service bitcoind start\"\n+Drop bitcoind.conf in /etc/init.  Test by running `service bitcoind start`\n it will automatically start on reboot.\n \n NOTE: This script is incompatible with CentOS 5 and Amazon Linux 2014 as they\n use old versions of Upstart and do not supply the start-stop-daemon utility.\n \n 4d) CentOS\n \n-Copy bitcoind.init to /etc/init.d/bitcoind. Test by running \"service bitcoind start\".\n+Copy bitcoind.init to /etc/init.d/bitcoind. Test by running `service bitcoind start`.\n \n Using this script, you can adjust the path and flags to the bitcoind program by \n setting the BITCOIND and FLAGS environment variables in the file \n@@ -99,4 +101,3 @@ setting the BITCOIND and FLAGS environment variables in the file\n Auto respawning is currently only configured for Upstart and systemd.\n Reasonable defaults have been chosen but YMMV.\n \n-"
      }
    ]
  },
  {
    "sha": "6bb28058d3ede4ff0b8e6d5315f0c2386f3e1131",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YmIyODA1OGQzZWRlNGZmMGI4ZTZkNTMxNWYwYzIzODZmM2UxMTMx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-10T15:51:03Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-10T15:53:07Z"
      },
      "message": "Merge pull request #6346\n\n627468d Add support for data-based outputs (OP_RETURN) to bitcoin-tx. (Pavel Jan\u00edk)\nd707853 Add OP_RETURN support in createrawtransaction RPC call, add tests. (Pavel Jan\u00edk)",
      "tree": {
        "sha": "54b61c8244243ea3673c814e30a712c66706f51c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/54b61c8244243ea3673c814e30a712c66706f51c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6bb28058d3ede4ff0b8e6d5315f0c2386f3e1131",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVyMjjAAoJEHSBCwEjRsmmpAgH/3Xxsp4g63N0QvVPNWSi0MLR\nkyE58t6HNaZhNt20fmbEKErRUI7bn5h6il9DgQQvQpGQ32va0PZfRLS04Baf1d8y\nRh62/aZdjWENfYHTx3NF+mmrEw4mjm2ZzheklXkBXka6rNJSsFIfuD1xuKAVUESR\n3bobmrqn8bCV8nlzvJrEX0G1H4hfM0AbZF+Ll6i5myK+H7qCbl8uXoBemsNUKkKI\nTevE6/3hu94UrmtS24kpietecKW37fQmpkRQIbJHFatO5p33pHbToWR6oVoXwUGg\neia4WNyK34XW65zha5DgKywwNkwiPcNdNU+NSLkCVpZV7w4ZaqthC0I/ig1+CxI=\n=4Sdr\n-----END PGP SIGNATURE-----",
        "payload": "tree 54b61c8244243ea3673c814e30a712c66706f51c\nparent 0201a79299f782193897d3ba2d7a2904fa4c11ea\nparent 627468d2ea1f4d5dea9561fe77aaf53f3a83b4d2\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1439221863 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1439221987 +0200\n\nMerge pull request #6346\n\n627468d Add support for data-based outputs (OP_RETURN) to bitcoin-tx. (Pavel Jan\u00edk)\nd707853 Add OP_RETURN support in createrawtransaction RPC call, add tests. (Pavel Jan\u00edk)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bb28058d3ede4ff0b8e6d5315f0c2386f3e1131",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6bb28058d3ede4ff0b8e6d5315f0c2386f3e1131",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bb28058d3ede4ff0b8e6d5315f0c2386f3e1131/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0201a79299f782193897d3ba2d7a2904fa4c11ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0201a79299f782193897d3ba2d7a2904fa4c11ea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0201a79299f782193897d3ba2d7a2904fa4c11ea"
      },
      {
        "sha": "627468d2ea1f4d5dea9561fe77aaf53f3a83b4d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/627468d2ea1f4d5dea9561fe77aaf53f3a83b4d2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/627468d2ea1f4d5dea9561fe77aaf53f3a83b4d2"
      }
    ],
    "stats": {
      "total": 127,
      "additions": 111,
      "deletions": 16
    },
    "files": [
      {
        "sha": "82891989598f7ea83152121d7b1a5567b69232d2",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bb28058d3ede4ff0b8e6d5315f0c2386f3e1131/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bb28058d3ede4ff0b8e6d5315f0c2386f3e1131/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=6bb28058d3ede4ff0b8e6d5315f0c2386f3e1131",
        "patch": "@@ -15,6 +15,8 @@ EXTRA_DIST += \\\n \ttest/data/tx394b54bb.hex \\\n \ttest/data/txcreate1.hex \\\n \ttest/data/txcreate2.hex \\\n+\ttest/data/txcreatedata1.hex \\\n+\ttest/data/txcreatedata2.hex \\\n \ttest/data/txcreatesign.hex\n \n JSON_TEST_FILES = \\"
      },
      {
        "sha": "97a073174d1084094f312a9e67f0674f3d17ad15",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bb28058d3ede4ff0b8e6d5315f0c2386f3e1131/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bb28058d3ede4ff0b8e6d5315f0c2386f3e1131/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=6bb28058d3ede4ff0b8e6d5315f0c2386f3e1131",
        "patch": "@@ -70,6 +70,7 @@ static bool AppInitRawTx(int argc, char* argv[])\n         strUsage += HelpMessageOpt(\"locktime=N\", _(\"Set TX lock time to N\"));\n         strUsage += HelpMessageOpt(\"nversion=N\", _(\"Set TX version to N\"));\n         strUsage += HelpMessageOpt(\"outaddr=VALUE:ADDRESS\", _(\"Add address-based output to TX\"));\n+        strUsage += HelpMessageOpt(\"outdata=[VALUE:]DATA\", _(\"Add data-based output to TX\"));\n         strUsage += HelpMessageOpt(\"outscript=VALUE:SCRIPT\", _(\"Add raw script output to TX\"));\n         strUsage += HelpMessageOpt(\"sign=SIGHASH-FLAGS\", _(\"Add zero or more signatures to transaction\") + \". \" +\n             _(\"This command requires JSON registers:\") +\n@@ -231,6 +232,35 @@ static void MutateTxAddOutAddr(CMutableTransaction& tx, const string& strInput)\n     tx.vout.push_back(txout);\n }\n \n+static void MutateTxAddOutData(CMutableTransaction& tx, const string& strInput)\n+{\n+    CAmount value = 0;\n+\n+    // separate [VALUE:]DATA in string\n+    size_t pos = strInput.find(':');\n+\n+    if (pos==0)\n+        throw runtime_error(\"TX output value not specified\");\n+\n+    if (pos != string::npos) {\n+        // extract and validate VALUE\n+        string strValue = strInput.substr(0, pos);\n+        if (!ParseMoney(strValue, value))\n+            throw runtime_error(\"invalid TX output value\");\n+    }\n+\n+    // extract and validate DATA\n+    string strData = strInput.substr(pos + 1, string::npos);\n+\n+    if (!IsHex(strData))\n+        throw runtime_error(\"invalid TX output data\");\n+\n+    std::vector<unsigned char> data = ParseHex(strData);\n+\n+    CTxOut txout(value, CScript() << OP_RETURN << data);\n+    tx.vout.push_back(txout);\n+}\n+\n static void MutateTxAddOutScript(CMutableTransaction& tx, const string& strInput)\n {\n     // separate VALUE:SCRIPT in string\n@@ -470,6 +500,8 @@ static void MutateTx(CMutableTransaction& tx, const string& command,\n         MutateTxDelOutput(tx, commandVal);\n     else if (command == \"outaddr\")\n         MutateTxAddOutAddr(tx, commandVal);\n+    else if (command == \"outdata\")\n+        MutateTxAddOutData(tx, commandVal);\n     else if (command == \"outscript\")\n         MutateTxAddOutScript(tx, commandVal);\n "
      },
      {
        "sha": "9eeca5b7d922d03f3c43f219c8f9f0d894530288",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 16,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bb28058d3ede4ff0b8e6d5315f0c2386f3e1131/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bb28058d3ede4ff0b8e6d5315f0c2386f3e1131/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=6bb28058d3ede4ff0b8e6d5315f0c2386f3e1131",
        "patch": "@@ -318,8 +318,9 @@ UniValue createrawtransaction(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 2)\n         throw runtime_error(\n-            \"createrawtransaction [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n},...] {\\\"address\\\":amount,...}\\n\"\n-            \"\\nCreate a transaction spending the given inputs and sending to the given addresses.\\n\"\n+            \"createrawtransaction [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n},...] {\\\"address\\\":amount,\\\"data\\\":\\\"hex\\\",...}\\n\"\n+            \"\\nCreate a transaction spending the given inputs and creating new outputs.\\n\"\n+            \"Outputs can be addresses or data.\\n\"\n             \"Returns hex-encoded raw transaction.\\n\"\n             \"Note that the transaction's inputs are not signed, and\\n\"\n             \"it is not stored in the wallet or transmitted to the network.\\n\"\n@@ -328,23 +329,25 @@ UniValue createrawtransaction(const UniValue& params, bool fHelp)\n             \"1. \\\"transactions\\\"        (string, required) A json array of json objects\\n\"\n             \"     [\\n\"\n             \"       {\\n\"\n-            \"         \\\"txid\\\":\\\"id\\\",  (string, required) The transaction id\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",    (string, required) The transaction id\\n\"\n             \"         \\\"vout\\\":n        (numeric, required) The output number\\n\"\n             \"       }\\n\"\n             \"       ,...\\n\"\n             \"     ]\\n\"\n-            \"2. \\\"addresses\\\"           (string, required) a json object with addresses as keys and amounts as values\\n\"\n+            \"2. \\\"outputs\\\"             (string, required) a json object with outputs\\n\"\n             \"    {\\n\"\n             \"      \\\"address\\\": x.xxx   (numeric, required) The key is the bitcoin address, the value is the \" + CURRENCY_UNIT + \" amount\\n\"\n-            \"      ,...\\n\"\n+            \"      \\\"data\\\": \\\"hex\\\",     (string, required) The key is \\\"data\\\", the value is hex encoded data\\n\"\n+            \"      ...\\n\"\n             \"    }\\n\"\n-\n             \"\\nResult:\\n\"\n             \"\\\"transaction\\\"            (string) hex string of the transaction\\n\"\n \n             \"\\nExamples\\n\"\n             + HelpExampleCli(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\" \\\"{\\\\\\\"address\\\\\\\":0.01}\\\"\")\n+            + HelpExampleCli(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\" \\\"{\\\\\\\"data\\\\\\\":\\\\\\\"00010203\\\\\\\"}\\\"\")\n             + HelpExampleRpc(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\", \\\"{\\\\\\\"address\\\\\\\":0.01}\\\"\")\n+            + HelpExampleRpc(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\", \\\"{\\\\\\\"data\\\\\\\":\\\\\\\"00010203\\\\\\\"}\\\"\")\n         );\n \n     LOCK(cs_main);\n@@ -375,19 +378,27 @@ UniValue createrawtransaction(const UniValue& params, bool fHelp)\n     set<CBitcoinAddress> setAddress;\n     vector<string> addrList = sendTo.getKeys();\n     BOOST_FOREACH(const string& name_, addrList) {\n-        CBitcoinAddress address(name_);\n-        if (!address.IsValid())\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, string(\"Invalid Bitcoin address: \")+name_);\n \n-        if (setAddress.count(address))\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, string(\"Invalid parameter, duplicated address: \")+name_);\n-        setAddress.insert(address);\n+        if (name_ == \"data\") {\n+            std::vector<unsigned char> data = ParseHexV(sendTo[name_].getValStr(),\"Data\");\n+\n+            CTxOut out(0, CScript() << OP_RETURN << data);\n+            rawTx.vout.push_back(out);\n+        } else {\n+            CBitcoinAddress address(name_);\n+            if (!address.IsValid())\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, string(\"Invalid Bitcoin address: \")+name_);\n \n-        CScript scriptPubKey = GetScriptForDestination(address.Get());\n-        CAmount nAmount = AmountFromValue(sendTo[name_]);\n+            if (setAddress.count(address))\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, string(\"Invalid parameter, duplicated address: \")+name_);\n+            setAddress.insert(address);\n \n-        CTxOut out(nAmount, scriptPubKey);\n-        rawTx.vout.push_back(out);\n+            CScript scriptPubKey = GetScriptForDestination(address.Get());\n+            CAmount nAmount = AmountFromValue(sendTo[name_]);\n+\n+            CTxOut out(nAmount, scriptPubKey);\n+            rawTx.vout.push_back(out);\n+        }\n     }\n \n     return EncodeHexTx(rawTx);"
      },
      {
        "sha": "3bf80ca4348a23074f76b71a944a63bac00e4753",
        "filename": "src/test/data/bitcoin-util-test.json",
        "status": "modified",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bb28058d3ede4ff0b8e6d5315f0c2386f3e1131/src/test/data/bitcoin-util-test.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bb28058d3ede4ff0b8e6d5315f0c2386f3e1131/src/test/data/bitcoin-util-test.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/bitcoin-util-test.json?ref=6bb28058d3ede4ff0b8e6d5315f0c2386f3e1131",
        "patch": "@@ -56,5 +56,35 @@\n      \"sign=ALL\",\n      \"outaddr=0.001:193P6LtvS4nCnkDvM9uXn1gsSRqh4aDAz7\"],\n     \"output_cmp\": \"txcreatesign.hex\"\n+  },\n+  { \"exec\": \"./bitcoin-tx\",\n+    \"args\":\n+    [\"-create\",\n+     \"in=5897de6bd6027a475eadd57019d4e6872c396d0716c4875a5f1a6fcfdf385c1f:0\",\n+     \"outdata=4:badhexdata\"],\n+    \"return_code\": 1\n+  },\n+  { \"exec\": \"./bitcoin-tx\",\n+    \"args\":\n+    [\"-create\",\n+     \"in=5897de6bd6027a475eadd57019d4e6872c396d0716c4875a5f1a6fcfdf385c1f:0\",\n+     \"outdata=badhexdata\"],\n+    \"return_code\": 1\n+  },\n+  { \"exec\": \"./bitcoin-tx\",\n+    \"args\":\n+    [\"-create\",\n+     \"in=5897de6bd6027a475eadd57019d4e6872c396d0716c4875a5f1a6fcfdf385c1f:0\",\n+     \"outaddr=0.18:13tuJJDR2RgArmgfv6JScSdreahzgc4T6o\",\n+     \"outdata=4:54686973204f505f52455455524e207472616e73616374696f6e206f7574707574207761732063726561746564206279206d6f646966696564206372656174657261777472616e73616374696f6e2e\"],\n+    \"output_cmp\": \"txcreatedata1.hex\"\n+  },\n+  { \"exec\": \"./bitcoin-tx\",\n+    \"args\":\n+    [\"-create\",\n+     \"in=5897de6bd6027a475eadd57019d4e6872c396d0716c4875a5f1a6fcfdf385c1f:0\",\n+     \"outaddr=0.18:13tuJJDR2RgArmgfv6JScSdreahzgc4T6o\",\n+     \"outdata=54686973204f505f52455455524e207472616e73616374696f6e206f7574707574207761732063726561746564206279206d6f646966696564206372656174657261777472616e73616374696f6e2e\"],\n+    \"output_cmp\": \"txcreatedata2.hex\"\n   }\n ]"
      },
      {
        "sha": "eccc7604e6f811da521420f7d3b3079b8e4a84df",
        "filename": "src/test/data/txcreatedata1.hex",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bb28058d3ede4ff0b8e6d5315f0c2386f3e1131/src/test/data/txcreatedata1.hex",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bb28058d3ede4ff0b8e6d5315f0c2386f3e1131/src/test/data/txcreatedata1.hex",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/txcreatedata1.hex?ref=6bb28058d3ede4ff0b8e6d5315f0c2386f3e1131",
        "patch": "@@ -0,0 +1 @@\n+01000000011f5c38dfcf6f1a5f5a87c416076d392c87e6d41970d5ad5e477a02d66bde97580000000000ffffffff0280a81201000000001976a9141fc11f39be1729bf973a7ab6a615ca4729d6457488ac0084d71700000000526a4c4f54686973204f505f52455455524e207472616e73616374696f6e206f7574707574207761732063726561746564206279206d6f646966696564206372656174657261777472616e73616374696f6e2e00000000"
      },
      {
        "sha": "3c7644c297bf580bcb267a8ad5cdc53be8d69644",
        "filename": "src/test/data/txcreatedata2.hex",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bb28058d3ede4ff0b8e6d5315f0c2386f3e1131/src/test/data/txcreatedata2.hex",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bb28058d3ede4ff0b8e6d5315f0c2386f3e1131/src/test/data/txcreatedata2.hex",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/txcreatedata2.hex?ref=6bb28058d3ede4ff0b8e6d5315f0c2386f3e1131",
        "patch": "@@ -0,0 +1 @@\n+01000000011f5c38dfcf6f1a5f5a87c416076d392c87e6d41970d5ad5e477a02d66bde97580000000000ffffffff0280a81201000000001976a9141fc11f39be1729bf973a7ab6a615ca4729d6457488ac0000000000000000526a4c4f54686973204f505f52455455524e207472616e73616374696f6e206f7574707574207761732063726561746564206279206d6f646966696564206372656174657261777472616e73616374696f6e2e00000000"
      },
      {
        "sha": "a65572e6f685a0b56df691e33cfcf46ddc4f5f39",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bb28058d3ede4ff0b8e6d5315f0c2386f3e1131/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bb28058d3ede4ff0b8e6d5315f0c2386f3e1131/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=6bb28058d3ede4ff0b8e6d5315f0c2386f3e1131",
        "patch": "@@ -110,6 +110,24 @@ BOOST_AUTO_TEST_CASE(rpc_rawsign)\n     BOOST_CHECK(find_value(r.get_obj(), \"complete\").get_bool() == true);\n }\n \n+BOOST_AUTO_TEST_CASE(rpc_createraw_op_return)\n+{\n+    BOOST_CHECK_NO_THROW(CallRPC(\"createrawtransaction [{\\\"txid\\\":\\\"a3b807410df0b60fcb9736768df5823938b2f838694939ba45f3c0a1bff150ed\\\",\\\"vout\\\":0}] {\\\"data\\\":\\\"68656c6c6f776f726c64\\\"}\"));\n+\n+    // Allow more than one data transaction output\n+    BOOST_CHECK_NO_THROW(CallRPC(\"createrawtransaction [{\\\"txid\\\":\\\"a3b807410df0b60fcb9736768df5823938b2f838694939ba45f3c0a1bff150ed\\\",\\\"vout\\\":0}] {\\\"data\\\":\\\"68656c6c6f776f726c64\\\",\\\"data\\\":\\\"68656c6c6f776f726c64\\\"}\"));\n+\n+    // Key not \"data\" (bad address)\n+    BOOST_CHECK_THROW(CallRPC(\"createrawtransaction [{\\\"txid\\\":\\\"a3b807410df0b60fcb9736768df5823938b2f838694939ba45f3c0a1bff150ed\\\",\\\"vout\\\":0}] {\\\"somedata\\\":\\\"68656c6c6f776f726c64\\\"}\"), runtime_error);\n+\n+    // Bad hex encoding of data output\n+    BOOST_CHECK_THROW(CallRPC(\"createrawtransaction [{\\\"txid\\\":\\\"a3b807410df0b60fcb9736768df5823938b2f838694939ba45f3c0a1bff150ed\\\",\\\"vout\\\":0}] {\\\"data\\\":\\\"12345\\\"}\"), runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(\"createrawtransaction [{\\\"txid\\\":\\\"a3b807410df0b60fcb9736768df5823938b2f838694939ba45f3c0a1bff150ed\\\",\\\"vout\\\":0}] {\\\"data\\\":\\\"12345g\\\"}\"), runtime_error);\n+\n+    // Data 81 bytes long\n+    BOOST_CHECK_NO_THROW(CallRPC(\"createrawtransaction [{\\\"txid\\\":\\\"a3b807410df0b60fcb9736768df5823938b2f838694939ba45f3c0a1bff150ed\\\",\\\"vout\\\":0}] {\\\"data\\\":\\\"010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081\\\"}\"));\n+}\n+\n BOOST_AUTO_TEST_CASE(rpc_format_monetary_values)\n {\n     BOOST_CHECK(ValueFromAmount(0LL).write() == \"0.00000000\");"
      }
    ]
  },
  {
    "sha": "8778471dceb01e3ace825bdb5a3f59ff8d6f2b4f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4Nzc4NDcxZGNlYjAxZTNhY2U4MjViZGI1YTNmNTlmZjhkNmYyYjRm",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2015-08-07T03:35:15Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2015-08-10T15:56:37Z"
      },
      "message": "Update init doc to mention cookie authentication",
      "tree": {
        "sha": "1793418c4813b59b596696738a4ab47d5b508d3f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1793418c4813b59b596696738a4ab47d5b508d3f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8778471dceb01e3ace825bdb5a3f59ff8d6f2b4f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8778471dceb01e3ace825bdb5a3f59ff8d6f2b4f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8778471dceb01e3ace825bdb5a3f59ff8d6f2b4f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8778471dceb01e3ace825bdb5a3f59ff8d6f2b4f/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0201a79299f782193897d3ba2d7a2904fa4c11ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0201a79299f782193897d3ba2d7a2904fa4c11ea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0201a79299f782193897d3ba2d7a2904fa4c11ea"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 7,
      "deletions": 5
    },
    "files": [
      {
        "sha": "ed9ce721542d4399d645e81f4e38f11b16382b60",
        "filename": "doc/init.md",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8778471dceb01e3ace825bdb5a3f59ff8d6f2b4f/doc/init.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8778471dceb01e3ace825bdb5a3f59ff8d6f2b4f/doc/init.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/init.md?ref=8778471dceb01e3ace825bdb5a3f59ff8d6f2b4f",
        "patch": "@@ -29,13 +29,15 @@ file, however it is recommended that a strong and secure password be used\n as this password is security critical to securing the wallet should the\n wallet be enabled.\n \n-If bitcoind is run with \"-daemon\" flag, and no rpcpassword is set, it will\n-print a randomly generated suitable password to stderr.  You can also\n-generate one from the shell yourself like this:\n+If bitcoind is run with the \"-server\" flag (set by default), and no rpcpassword is set, \n+it will use a special cookie file for authentication. The cookie is generated with random \n+content when the daemon starts, and deleted when it exits. Read access to this file\n+controls who can access it through RPC. \n \n-`bash -c 'tr -dc a-zA-Z0-9 < /dev/urandom | head -c32 && echo'`\n+By default the cookie is stored in the data directory, but it's location can be overridden \n+with the option '-rpccookiefile'.\n \n-Once you have a password in hand, set `rpcpassword=` in `/etc/bitcoin/bitcoin.conf`\n+This allows for running bitcoind without having to do any manual configuration.\n \n `conf`, `pid`, and `wallet` accept relative paths which are interpreted as \n relative to the data directory. `wallet` *only* supports relative paths."
      }
    ]
  },
  {
    "sha": "3eaaf71fe76b659d8ed40fdf88ce1ba18b62cc36",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZWFhZjcxZmU3NmI2NTlkOGVkNDBmZGY4OGNlMWJhMThiNjJjYzM2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-10T16:01:52Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-10T16:02:10Z"
      },
      "message": "Merge pull request #6532\n\n8778471 Update init doc to mention cookie authentication (fanquake)",
      "tree": {
        "sha": "44a826ac2f085a8daac16aff60df09962c0fc776",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/44a826ac2f085a8daac16aff60df09962c0fc776"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3eaaf71fe76b659d8ed40fdf88ce1ba18b62cc36",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVyMsCAAoJEHSBCwEjRsmmOeAH+wdRbuU+uZNDWSnwVU/rP9p7\na1Mnmvu2MIVKCsZi2FNALSfBYzWU2UPxqqJmXZlHpRfkZzDqCifzAgVJWsdyFahq\nvM5ahxxhQSWxHIDo40qe48VjchQdrMw84saSba3VOOc+wfr25qNkhb8Oz6dsmOW7\nEoVDkSxzlMxTgbx1dXpjh/4DuLZUJa/9vPJpEpuniFNUTZBhWqf1H3ETYzCFQwrV\nQ8vL40NrdgkocEK06wd9HKcxCz/qVxi3FGA5dv9rgLhHVjSsTDb5wXUkD5MMXQEk\nS/DroSlMlOGcTDXyxP9SPLHlyMw96QPSZ4TwB2/+P0w4abvc/g0naqv3LXdu//M=\n=YM9I\n-----END PGP SIGNATURE-----",
        "payload": "tree 44a826ac2f085a8daac16aff60df09962c0fc776\nparent 6bb28058d3ede4ff0b8e6d5315f0c2386f3e1131\nparent 8778471dceb01e3ace825bdb5a3f59ff8d6f2b4f\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1439222512 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1439222530 +0200\n\nMerge pull request #6532\n\n8778471 Update init doc to mention cookie authentication (fanquake)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3eaaf71fe76b659d8ed40fdf88ce1ba18b62cc36",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3eaaf71fe76b659d8ed40fdf88ce1ba18b62cc36",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3eaaf71fe76b659d8ed40fdf88ce1ba18b62cc36/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6bb28058d3ede4ff0b8e6d5315f0c2386f3e1131",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bb28058d3ede4ff0b8e6d5315f0c2386f3e1131",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6bb28058d3ede4ff0b8e6d5315f0c2386f3e1131"
      },
      {
        "sha": "8778471dceb01e3ace825bdb5a3f59ff8d6f2b4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8778471dceb01e3ace825bdb5a3f59ff8d6f2b4f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8778471dceb01e3ace825bdb5a3f59ff8d6f2b4f"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 7,
      "deletions": 5
    },
    "files": [
      {
        "sha": "ed9ce721542d4399d645e81f4e38f11b16382b60",
        "filename": "doc/init.md",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3eaaf71fe76b659d8ed40fdf88ce1ba18b62cc36/doc/init.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3eaaf71fe76b659d8ed40fdf88ce1ba18b62cc36/doc/init.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/init.md?ref=3eaaf71fe76b659d8ed40fdf88ce1ba18b62cc36",
        "patch": "@@ -29,13 +29,15 @@ file, however it is recommended that a strong and secure password be used\n as this password is security critical to securing the wallet should the\n wallet be enabled.\n \n-If bitcoind is run with \"-daemon\" flag, and no rpcpassword is set, it will\n-print a randomly generated suitable password to stderr.  You can also\n-generate one from the shell yourself like this:\n+If bitcoind is run with the \"-server\" flag (set by default), and no rpcpassword is set, \n+it will use a special cookie file for authentication. The cookie is generated with random \n+content when the daemon starts, and deleted when it exits. Read access to this file\n+controls who can access it through RPC. \n \n-`bash -c 'tr -dc a-zA-Z0-9 < /dev/urandom | head -c32 && echo'`\n+By default the cookie is stored in the data directory, but it's location can be overridden \n+with the option '-rpccookiefile'.\n \n-Once you have a password in hand, set `rpcpassword=` in `/etc/bitcoin/bitcoin.conf`\n+This allows for running bitcoind without having to do any manual configuration.\n \n `conf`, `pid`, and `wallet` accept relative paths which are interpreted as \n relative to the data directory. `wallet` *only* supports relative paths."
      }
    ]
  },
  {
    "sha": "e0862c0933bc809ef1087e3e0a3ee8cd76b04ac9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMDg2MmMwOTMzYmM4MDllZjEwODdlM2UwYTNlZThjZDc2YjA0YWM5",
    "commit": {
      "author": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2015-08-10T18:10:56Z"
      },
      "committer": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2015-08-10T18:10:56Z"
      },
      "message": "Reformat validateaddress help, add missing iswatchonly description.",
      "tree": {
        "sha": "226278f87548aef4268aa6ec694c4a082bc9b775",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/226278f87548aef4268aa6ec694c4a082bc9b775"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e0862c0933bc809ef1087e3e0a3ee8cd76b04ac9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0862c0933bc809ef1087e3e0a3ee8cd76b04ac9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e0862c0933bc809ef1087e3e0a3ee8cd76b04ac9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0862c0933bc809ef1087e3e0a3ee8cd76b04ac9/comments",
    "author": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a4fe57da6207c1e5691a1e843d22db571f3f0186",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4fe57da6207c1e5691a1e843d22db571f3f0186",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a4fe57da6207c1e5691a1e843d22db571f3f0186"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "e2b6d5826c2bdb679b379a57db7a7a77d5b5a66f",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0862c0933bc809ef1087e3e0a3ee8cd76b04ac9/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0862c0933bc809ef1087e3e0a3ee8cd76b04ac9/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=e0862c0933bc809ef1087e3e0a3ee8cd76b04ac9",
        "patch": "@@ -157,13 +157,14 @@ UniValue validateaddress(const UniValue& params, bool fHelp)\n             \"1. \\\"bitcoinaddress\\\"     (string, required) The bitcoin address to validate\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"isvalid\\\" : true|false,         (boolean) If the address is valid or not. If not, this is the only property returned.\\n\"\n+            \"  \\\"isvalid\\\" : true|false,       (boolean) If the address is valid or not. If not, this is the only property returned.\\n\"\n             \"  \\\"address\\\" : \\\"bitcoinaddress\\\", (string) The bitcoin address validated\\n\"\n             \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex encoded scriptPubKey generated by the address\\n\"\n-            \"  \\\"ismine\\\" : true|false,          (boolean) If the address is yours or not\\n\"\n-            \"  \\\"isscript\\\" : true|false,        (boolean) If the key is a script\\n\"\n+            \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n+            \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n+            \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n             \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string) The hex value of the raw public key\\n\"\n-            \"  \\\"iscompressed\\\" : true|false,    (boolean) If the address is compressed\\n\"\n+            \"  \\\"iscompressed\\\" : true|false,  (boolean) If the address is compressed\\n\"\n             \"  \\\"account\\\" : \\\"account\\\"         (string) DEPRECATED. The account associated with the address, \\\"\\\" is the default account\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\""
      }
    ]
  },
  {
    "sha": "9f68ed6b6d1a9c6436ce37913666165f2b180ee3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZjY4ZWQ2YjZkMWE5YzY0MzZjZTM3OTEzNjY2MTY1ZjJiMTgwZWUz",
    "commit": {
      "author": {
        "name": "Veres Lajos",
        "email": "vlajos@gmail.com",
        "date": "2015-08-08T23:17:27Z"
      },
      "committer": {
        "name": "Veres Lajos",
        "email": "vlajos@gmail.com",
        "date": "2015-08-10T21:06:27Z"
      },
      "message": "typofixes (found by misspell_fixer)",
      "tree": {
        "sha": "353f0c636a1f27824afb150fc16692456a00d5f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/353f0c636a1f27824afb150fc16692456a00d5f1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9f68ed6b6d1a9c6436ce37913666165f2b180ee3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f68ed6b6d1a9c6436ce37913666165f2b180ee3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9f68ed6b6d1a9c6436ce37913666165f2b180ee3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f68ed6b6d1a9c6436ce37913666165f2b180ee3/comments",
    "author": {
      "login": "vlajos",
      "id": 3994645,
      "node_id": "MDQ6VXNlcjM5OTQ2NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3994645?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vlajos",
      "html_url": "https://github.com/vlajos",
      "followers_url": "https://api.github.com/users/vlajos/followers",
      "following_url": "https://api.github.com/users/vlajos/following{/other_user}",
      "gists_url": "https://api.github.com/users/vlajos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vlajos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vlajos/subscriptions",
      "organizations_url": "https://api.github.com/users/vlajos/orgs",
      "repos_url": "https://api.github.com/users/vlajos/repos",
      "events_url": "https://api.github.com/users/vlajos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vlajos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vlajos",
      "id": 3994645,
      "node_id": "MDQ6VXNlcjM5OTQ2NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3994645?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vlajos",
      "html_url": "https://github.com/vlajos",
      "followers_url": "https://api.github.com/users/vlajos/followers",
      "following_url": "https://api.github.com/users/vlajos/following{/other_user}",
      "gists_url": "https://api.github.com/users/vlajos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vlajos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vlajos/subscriptions",
      "organizations_url": "https://api.github.com/users/vlajos/orgs",
      "repos_url": "https://api.github.com/users/vlajos/repos",
      "events_url": "https://api.github.com/users/vlajos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vlajos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a4fe57da6207c1e5691a1e843d22db571f3f0186",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4fe57da6207c1e5691a1e843d22db571f3f0186",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a4fe57da6207c1e5691a1e843d22db571f3f0186"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 23,
      "deletions": 23
    },
    "files": [
      {
        "sha": "bd7ab3524c26e0dc37bf3098f48096a36f588466",
        "filename": "contrib/debian/changelog",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f68ed6b6d1a9c6436ce37913666165f2b180ee3/contrib/debian/changelog",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f68ed6b6d1a9c6436ce37913666165f2b180ee3/contrib/debian/changelog",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/changelog?ref=9f68ed6b6d1a9c6436ce37913666165f2b180ee3",
        "patch": "@@ -149,7 +149,7 @@ bitcoin (0.5.3-natty0) natty; urgency=low\n bitcoin (0.5.2-natty1) natty; urgency=low\n \n   * Remove mentions on anonymity in package descriptions and manpage.\n-    These should never have been there, bitcoin isnt anonymous without\n+    These should never have been there, bitcoin isn't anonymous without\n     a ton of work that virtually no users will ever be willing and\n     capable of doing\n \n@@ -190,7 +190,7 @@ bitcoin (0.5.0~rc1-natty1) natty; urgency=low\n \n   * Add test_bitcoin to build test\n   * Fix clean\n-  * Remove uneccessary build-dependancies\n+  * Remove unnecessary build-dependancies\n \n  -- Matt Corallo <matt@bluematt.me>  Wed, 26 Oct 2011 14:37:18 -0400\n \n@@ -350,7 +350,7 @@ bitcoin (0.3.20.01~dfsg-1) unstable; urgency=low\n \n bitcoin (0.3.19~dfsg-6) unstable; urgency=low\n \n-  * Fix override agressive optimizations.\n+  * Fix override aggressive optimizations.\n   * Fix tighten build-dependencies to really fit backporting to Lenny:\n     + Add fallback build-dependency on libdb4.6++-dev.\n     + Tighten unversioned Boost build-dependencies to recent versions,"
      },
      {
        "sha": "f357ec6c8f64c8d8726f5141cf38f30f230dd60a",
        "filename": "depends/config.guess",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f68ed6b6d1a9c6436ce37913666165f2b180ee3/depends/config.guess",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f68ed6b6d1a9c6436ce37913666165f2b180ee3/depends/config.guess",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.guess?ref=9f68ed6b6d1a9c6436ce37913666165f2b180ee3",
        "patch": "@@ -1117,7 +1117,7 @@ EOF\n \t# uname -m prints for DJGPP always 'pc', but it prints nothing about\n \t# the processor, so we play safe by assuming i586.\n \t# Note: whatever this is, it MUST be the same as what config.sub\n-\t# prints for the \"djgpp\" host, or else GDB configury will decide that\n+\t# prints for the \"djgpp\" host, or else GDB configure will decide that\n \t# this is a cross-build.\n \techo i586-pc-msdosdjgpp\n \texit ;;"
      },
      {
        "sha": "eca655a595bde51d291d2aa918155259d1fc0878",
        "filename": "qa/rpc-tests/rest.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f68ed6b6d1a9c6436ce37913666165f2b180ee3/qa/rpc-tests/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f68ed6b6d1a9c6436ce37913666165f2b180ee3/qa/rpc-tests/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rest.py?ref=9f68ed6b6d1a9c6436ce37913666165f2b180ee3",
        "patch": "@@ -200,7 +200,7 @@ def run_test(self):\n         response = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json', '', True)\n         assert_equal(response.status, 200) #must be a 500 because we exceeding the limits\n \n-        self.nodes[0].generate(1) #generate block to not affect upcomming tests\n+        self.nodes[0].generate(1) #generate block to not affect upcoming tests\n         self.sync_all()\n \n         ################"
      },
      {
        "sha": "f4808df08f4cb0af2210de3e396388b4cb8e0433",
        "filename": "qa/rpc-tests/test_framework/comptool.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f68ed6b6d1a9c6436ce37913666165f2b180ee3/qa/rpc-tests/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f68ed6b6d1a9c6436ce37913666165f2b180ee3/qa/rpc-tests/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/comptool.py?ref=9f68ed6b6d1a9c6436ce37913666165f2b180ee3",
        "patch": "@@ -116,7 +116,7 @@ def send_mempool(self):\n #    is reached) and then sent out in one inv message.  Then the final block\n #    will be synced across all connections, and the outcome of the final \n #    block will be tested.\n-# sync_every_tx: analagous to behavior for sync_every_block, except if outcome\n+# sync_every_tx: analogous to behavior for sync_every_block, except if outcome\n #    on the final tx is None, then contents of entire mempool are compared\n #    across all connections.  (If outcome of final tx is specified as true\n #    or false, then only the last tx is tested against outcome.)"
      },
      {
        "sha": "384b6cfdb9371a089b6e2f4c43377e72e4206e57",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f68ed6b6d1a9c6436ce37913666165f2b180ee3/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f68ed6b6d1a9c6436ce37913666165f2b180ee3/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=9f68ed6b6d1a9c6436ce37913666165f2b180ee3",
        "patch": "@@ -265,7 +265,7 @@ class CAddrMan\n      * Notice that vvTried, mapAddr and vVector are never encoded explicitly;\n      * they are instead reconstructed from the other information.\n      *\n-     * vvNew is serialized, but only used if ADDRMAN_UNKOWN_BUCKET_COUNT didn't change,\n+     * vvNew is serialized, but only used if ADDRMAN_UNKNOWN_BUCKET_COUNT didn't change,\n      * otherwise it is reconstructed as well.\n      *\n      * This format is more complex, but significantly smaller (at most 1.5 MiB), and supports"
      },
      {
        "sha": "34e163ff61233473bafbe4b53a72c7d08eb620bb",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f68ed6b6d1a9c6436ce37913666165f2b180ee3/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f68ed6b6d1a9c6436ce37913666165f2b180ee3/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=9f68ed6b6d1a9c6436ce37913666165f2b180ee3",
        "patch": "@@ -1471,7 +1471,7 @@ bool AbortNode(const std::string& strMessage, const std::string& userMessage=\"\")\n     strMiscWarning = strMessage;\n     LogPrintf(\"*** %s\\n\", strMessage);\n     uiInterface.ThreadSafeMessageBox(\n-        userMessage.empty() ? _(\"Error: A fatal internal error occured, see debug.log for details\") : userMessage,\n+        userMessage.empty() ? _(\"Error: A fatal internal error occurred, see debug.log for details\") : userMessage,\n         \"\", CClientUIInterface::MSG_ERROR);\n     StartShutdown();\n     return false;"
      },
      {
        "sha": "f8e877df25c906add02851d562c230d2a3f61b51",
        "filename": "src/merkleblock.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f68ed6b6d1a9c6436ce37913666165f2b180ee3/src/merkleblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f68ed6b6d1a9c6436ce37913666165f2b180ee3/src/merkleblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.cpp?ref=9f68ed6b6d1a9c6436ce37913666165f2b180ee3",
        "patch": "@@ -168,7 +168,7 @@ uint256 CPartialMerkleTree::ExtractMatches(std::vector<uint256> &vMatch) {\n     // traverse the partial tree\n     unsigned int nBitsUsed = 0, nHashUsed = 0;\n     uint256 hashMerkleRoot = TraverseAndExtract(nHeight, 0, nBitsUsed, nHashUsed, vMatch);\n-    // verify that no problems occured during the tree traversal\n+    // verify that no problems occurred during the tree traversal\n     if (fBad)\n         return uint256();\n     // verify that all bits were consumed (except for the padding caused by serializing it as a byte sequence)"
      },
      {
        "sha": "fb5726a2b9e0bb6db0ac681919c2b408236600d5",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f68ed6b6d1a9c6436ce37913666165f2b180ee3/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f68ed6b6d1a9c6436ce37913666165f2b180ee3/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=9f68ed6b6d1a9c6436ce37913666165f2b180ee3",
        "patch": "@@ -2319,7 +2319,7 @@ void DumpBanlist()\n {\n     int64_t nStart = GetTimeMillis();\n \n-    CNode::SweepBanned(); //clean unused entires (if bantime has expired)\n+    CNode::SweepBanned(); //clean unused entries (if bantime has expired)\n \n     CBanDB bandb;\n     banmap_t banmap;"
      },
      {
        "sha": "954cdd49d63a3fca9935a434b37d111676fecb8c",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f68ed6b6d1a9c6436ce37913666165f2b180ee3/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f68ed6b6d1a9c6436ce37913666165f2b180ee3/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=9f68ed6b6d1a9c6436ce37913666165f2b180ee3",
        "patch": "@@ -695,7 +695,7 @@ class CNode\n     static bool BannedSetIsDirty();\n     //!set the \"dirty\" flag for the banlist\n     static void SetBannedSetDirty(bool dirty=true);\n-    //!clean unused entires (if bantime has expired)\n+    //!clean unused entries (if bantime has expired)\n     static void SweepBanned();\n \n     void copyStats(CNodeStats &stats);"
      },
      {
        "sha": "dec00e1eeb8dce86f8bdecacb5a7a0f19adf9f85",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f68ed6b6d1a9c6436ce37913666165f2b180ee3/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f68ed6b6d1a9c6436ce37913666165f2b180ee3/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=9f68ed6b6d1a9c6436ce37913666165f2b180ee3",
        "patch": "@@ -349,7 +349,7 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n         }\n         if (pchRetA[0] != 0x01 || pchRetA[1] != 0x00) {\n             CloseSocket(hSocket);\n-            return error(\"Proxy authentication unsuccesful\");\n+            return error(\"Proxy authentication unsuccessful\");\n         }\n     } else if (pchRet1[1] == 0x00) {\n         // Perform no authentication"
      },
      {
        "sha": "ffe31d19425cc2984017bb9b10df83887697ab37",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f68ed6b6d1a9c6436ce37913666165f2b180ee3/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f68ed6b6d1a9c6436ce37913666165f2b180ee3/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=9f68ed6b6d1a9c6436ce37913666165f2b180ee3",
        "patch": "@@ -261,7 +261,7 @@ void TxConfirmStats::removeTx(unsigned int entryHeight, unsigned int nBestSeenHe\n         blocksAgo = 0;\n     if (blocksAgo < 0) {\n         LogPrint(\"estimatefee\", \"Blockpolicy error, blocks ago is negative for mempool tx\\n\");\n-        return;  //This can't happen becasue we call this with our best seen height, no entries can have higher\n+        return;  //This can't happen because we call this with our best seen height, no entries can have higher\n     }\n \n     if (blocksAgo >= (int)unconfTxs.size()) {"
      },
      {
        "sha": "15577d128a3ebf5db8e292ee0091d5afbc98c695",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f68ed6b6d1a9c6436ce37913666165f2b180ee3/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f68ed6b6d1a9c6436ce37913666165f2b180ee3/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=9f68ed6b6d1a9c6436ce37913666165f2b180ee3",
        "patch": "@@ -118,7 +118,7 @@ class TxConfirmStats\n     /**\n      * Initialize the data structures.  This is called by BlockPolicyEstimator's\n      * constructor with default values.\n-     * @param defaultBuckets contains the upper limits for the bucket boundries\n+     * @param defaultBuckets contains the upper limits for the bucket boundaries\n      * @param maxConfirms max number of confirms to track\n      * @param decay how much to decay the historical moving average per block\n      * @param dataTypeString for logging purposes"
      },
      {
        "sha": "5cc4d00dbf493a221a4221fbf7e488aad63b1692",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f68ed6b6d1a9c6436ce37913666165f2b180ee3/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f68ed6b6d1a9c6436ce37913666165f2b180ee3/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=9f68ed6b6d1a9c6436ce37913666165f2b180ee3",
        "patch": "@@ -762,7 +762,7 @@ void PaymentServer::setOptionsModel(OptionsModel *optionsModel)\n \n void PaymentServer::handlePaymentACK(const QString& paymentACKMsg)\n {\n-    // currently we don't futher process or store the paymentACK message\n+    // currently we don't further process or store the paymentACK message\n     Q_EMIT message(tr(\"Payment acknowledged\"), paymentACKMsg, CClientUIInterface::ICON_INFORMATION | CClientUIInterface::MODAL);\n }\n "
      },
      {
        "sha": "4453ceb563f75b5247d447946d7643d822a29338",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f68ed6b6d1a9c6436ce37913666165f2b180ee3/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f68ed6b6d1a9c6436ce37913666165f2b180ee3/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=9f68ed6b6d1a9c6436ce37913666165f2b180ee3",
        "patch": "@@ -570,7 +570,7 @@ void RPCConsole::peerLayoutChanged()\n \n     if (detailNodeRow < 0)\n     {\n-        // detail node dissapeared from table (node disconnected)\n+        // detail node disappeared from table (node disconnected)\n         fUnselect = true;\n     }\n     else"
      },
      {
        "sha": "c15b64c327f769afb7e26b1d4ec006d02bea0349",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f68ed6b6d1a9c6436ce37913666165f2b180ee3/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f68ed6b6d1a9c6436ce37913666165f2b180ee3/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=9f68ed6b6d1a9c6436ce37913666165f2b180ee3",
        "patch": "@@ -57,7 +57,7 @@ SplashScreen::SplashScreen(Qt::WindowFlags f, const NetworkStyle *networkStyle)\n     QPainter pixPaint(&pixmap);\n     pixPaint.setPen(QColor(100,100,100));\n \n-    // draw a slighly radial gradient\n+    // draw a slightly radial gradient\n     QRadialGradient gradient(QPoint(0,0), splashSize.width()/devicePixelRatio);\n     gradient.setColorAt(0, Qt::white);\n     gradient.setColorAt(1, QColor(247,247,247));"
      },
      {
        "sha": "56993f32f5d80ddd7c88a56e6f88c649559afdb6",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f68ed6b6d1a9c6436ce37913666165f2b180ee3/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f68ed6b6d1a9c6436ce37913666165f2b180ee3/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=9f68ed6b6d1a9c6436ce37913666165f2b180ee3",
        "patch": "@@ -606,7 +606,7 @@ void StartRPCThreads()\n         LogPrintf(\"No rpcpassword set - using random cookie authentication\\n\");\n         if (!GenerateAuthCookie(&strRPCUserColonPass)) {\n             uiInterface.ThreadSafeMessageBox(\n-                _(\"Error: A fatal internal error occured, see debug.log for details\"), // Same message as AbortNode\n+                _(\"Error: A fatal internal error occurred, see debug.log for details\"), // Same message as AbortNode\n                 \"\", CClientUIInterface::MSG_ERROR);\n             StartShutdown();\n             return;\n@@ -670,7 +670,7 @@ void StartRPCThreads()\n         vEndpoints.push_back(ip::tcp::endpoint(boost::asio::ip::address_v6::any(), defaultPort));\n         vEndpoints.push_back(ip::tcp::endpoint(boost::asio::ip::address_v4::any(), defaultPort));\n         // Prefer making the socket dual IPv6/IPv4 instead of binding\n-        // to both addresses seperately.\n+        // to both addresses separately.\n         bBindAny = true;\n     }\n "
      },
      {
        "sha": "68a9443084a5e41a0e45ef0d6cb2ad6607c1454d",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f68ed6b6d1a9c6436ce37913666165f2b180ee3/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f68ed6b6d1a9c6436ce37913666165f2b180ee3/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=9f68ed6b6d1a9c6436ce37913666165f2b180ee3",
        "patch": "@@ -16,7 +16,7 @@\n \n ////////////////////////////////////////////////\n //                                            //\n-// THE SIMPLE DEFINITON, EXCLUDING DEBUG CODE //\n+// THE SIMPLE DEFINITION, EXCLUDING DEBUG CODE //\n //                                            //\n ////////////////////////////////////////////////\n "
      },
      {
        "sha": "6c3cac71c2408ad521632436cdd748c1f17ffe7c",
        "filename": "src/test/data/tx_invalid.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f68ed6b6d1a9c6436ce37913666165f2b180ee3/src/test/data/tx_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f68ed6b6d1a9c6436ce37913666165f2b180ee3/src/test/data/tx_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_invalid.json?ref=9f68ed6b6d1a9c6436ce37913666165f2b180ee3",
        "patch": "@@ -128,7 +128,7 @@\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"499999999 NOP2 1\"]],\n \"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000fe64cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n \n-[\"By-time locks, with argument just beyond tx nLockTime (but within numerical boundries)\"],\n+[\"By-time locks, with argument just beyond tx nLockTime (but within numerical boundaries)\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"500000001 NOP2 1\"]],\n \"01000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000065cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4294967295 NOP2 1\"]],"
      },
      {
        "sha": "9744a3c8486c5ad890adf0a9753c7257fa5a6c44",
        "filename": "src/test/data/tx_valid.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f68ed6b6d1a9c6436ce37913666165f2b180ee3/src/test/data/tx_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f68ed6b6d1a9c6436ce37913666165f2b180ee3/src/test/data/tx_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_valid.json?ref=9f68ed6b6d1a9c6436ce37913666165f2b180ee3",
        "patch": "@@ -197,7 +197,7 @@\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 NOP2 1\"]],\n \"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000ff64cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n \n-[\"By-time locks, with argument just beyond tx nLockTime (but within numerical boundries)\"],\n+[\"By-time locks, with argument just beyond tx nLockTime (but within numerical boundaries)\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"500000000 NOP2 1\"]],\n \"01000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000065cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4294967295 NOP2 1\"]],"
      },
      {
        "sha": "ce547f5753acd259ab4488837437d630a655192c",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f68ed6b6d1a9c6436ce37913666165f2b180ee3/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f68ed6b6d1a9c6436ce37913666165f2b180ee3/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=9f68ed6b6d1a9c6436ce37913666165f2b180ee3",
        "patch": "@@ -797,7 +797,7 @@ UniValue movecmd(const UniValue& params, bool fHelp)\n             \"4. minconf           (numeric, optional, default=1) Only use funds with at least this many confirmations.\\n\"\n             \"5. \\\"comment\\\"       (string, optional) An optional comment, stored in the wallet only.\\n\"\n             \"\\nResult:\\n\"\n-            \"true|false           (boolean) true if successfull.\\n\"\n+            \"true|false           (boolean) true if successful.\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nMove 0.01 \" + CURRENCY_UNIT + \" from the default account to the account named tabby\\n\"\n             + HelpExampleCli(\"move\", \"\\\"\\\" \\\"tabby\\\" 0.01\") +"
      }
    ]
  },
  {
    "sha": "e846b2a1e96f27257cbb79f7f61bfaf3d873bb97",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplODQ2YjJhMWU5NmYyNzI1N2NiYjc5ZjdmNjFiZmFmM2Q4NzNiYjk3",
    "commit": {
      "author": {
        "name": "Mark Friedenbach",
        "email": "mark@friedenbach.org",
        "date": "2015-08-11T01:08:30Z"
      },
      "committer": {
        "name": "Mark Friedenbach",
        "email": "mark@friedenbach.org",
        "date": "2015-08-11T01:08:30Z"
      },
      "message": "Correct a possibly intentional pun that is nevertheless hard to read: \"two times of nLockTime.\" What is meant is that there are two kinds, or categories of nLockTime.",
      "tree": {
        "sha": "072b11723fe6db4ce93890ceaec167a43f0e6aa1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/072b11723fe6db4ce93890ceaec167a43f0e6aa1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e846b2a1e96f27257cbb79f7f61bfaf3d873bb97",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e846b2a1e96f27257cbb79f7f61bfaf3d873bb97",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e846b2a1e96f27257cbb79f7f61bfaf3d873bb97",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e846b2a1e96f27257cbb79f7f61bfaf3d873bb97/comments",
    "author": {
      "login": "maaku",
      "id": 69154,
      "node_id": "MDQ6VXNlcjY5MTU0",
      "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maaku",
      "html_url": "https://github.com/maaku",
      "followers_url": "https://api.github.com/users/maaku/followers",
      "following_url": "https://api.github.com/users/maaku/following{/other_user}",
      "gists_url": "https://api.github.com/users/maaku/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maaku/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
      "organizations_url": "https://api.github.com/users/maaku/orgs",
      "repos_url": "https://api.github.com/users/maaku/repos",
      "events_url": "https://api.github.com/users/maaku/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maaku/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "maaku",
      "id": 69154,
      "node_id": "MDQ6VXNlcjY5MTU0",
      "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maaku",
      "html_url": "https://github.com/maaku",
      "followers_url": "https://api.github.com/users/maaku/followers",
      "following_url": "https://api.github.com/users/maaku/following{/other_user}",
      "gists_url": "https://api.github.com/users/maaku/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maaku/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
      "organizations_url": "https://api.github.com/users/maaku/orgs",
      "repos_url": "https://api.github.com/users/maaku/repos",
      "events_url": "https://api.github.com/users/maaku/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maaku/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3eaaf71fe76b659d8ed40fdf88ce1ba18b62cc36",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3eaaf71fe76b659d8ed40fdf88ce1ba18b62cc36",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3eaaf71fe76b659d8ed40fdf88ce1ba18b62cc36"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "bd5e54b33f22688999ab768651eb07ce9f484a61",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e846b2a1e96f27257cbb79f7f61bfaf3d873bb97/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e846b2a1e96f27257cbb79f7f61bfaf3d873bb97/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=e846b2a1e96f27257cbb79f7f61bfaf3d873bb97",
        "patch": "@@ -1128,7 +1128,7 @@ bool TransactionSignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn\n \n bool TransactionSignatureChecker::CheckLockTime(const CScriptNum& nLockTime) const\n {\n-    // There are two times of nLockTime: lock-by-blockheight\n+    // There are two kinds of nLockTime: lock-by-blockheight\n     // and lock-by-blocktime, distinguished by whether\n     // nLockTime < LOCKTIME_THRESHOLD.\n     //"
      }
    ]
  },
  {
    "sha": "c5c1edfe6035791973d419ae72cbf24342ee7e4c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNWMxZWRmZTYwMzU3OTE5NzNkNDE5YWU3MmNiZjI0MzQyZWU3ZTRj",
    "commit": {
      "author": {
        "name": "Mark Friedenbach",
        "email": "mark@friedenbach.org",
        "date": "2015-08-11T01:09:59Z"
      },
      "committer": {
        "name": "Mark Friedenbach",
        "email": "mark@friedenbach.org",
        "date": "2015-08-11T01:09:59Z"
      },
      "message": "Fix spelling mistake in -> if.",
      "tree": {
        "sha": "328fd68c10e326515eadfcf90874c9beb1d3b74c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/328fd68c10e326515eadfcf90874c9beb1d3b74c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c5c1edfe6035791973d419ae72cbf24342ee7e4c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5c1edfe6035791973d419ae72cbf24342ee7e4c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c5c1edfe6035791973d419ae72cbf24342ee7e4c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5c1edfe6035791973d419ae72cbf24342ee7e4c/comments",
    "author": {
      "login": "maaku",
      "id": 69154,
      "node_id": "MDQ6VXNlcjY5MTU0",
      "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maaku",
      "html_url": "https://github.com/maaku",
      "followers_url": "https://api.github.com/users/maaku/followers",
      "following_url": "https://api.github.com/users/maaku/following{/other_user}",
      "gists_url": "https://api.github.com/users/maaku/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maaku/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
      "organizations_url": "https://api.github.com/users/maaku/orgs",
      "repos_url": "https://api.github.com/users/maaku/repos",
      "events_url": "https://api.github.com/users/maaku/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maaku/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "maaku",
      "id": 69154,
      "node_id": "MDQ6VXNlcjY5MTU0",
      "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maaku",
      "html_url": "https://github.com/maaku",
      "followers_url": "https://api.github.com/users/maaku/followers",
      "following_url": "https://api.github.com/users/maaku/following{/other_user}",
      "gists_url": "https://api.github.com/users/maaku/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maaku/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
      "organizations_url": "https://api.github.com/users/maaku/orgs",
      "repos_url": "https://api.github.com/users/maaku/repos",
      "events_url": "https://api.github.com/users/maaku/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maaku/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e846b2a1e96f27257cbb79f7f61bfaf3d873bb97",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e846b2a1e96f27257cbb79f7f61bfaf3d873bb97",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e846b2a1e96f27257cbb79f7f61bfaf3d873bb97"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "2ab5a4a44dcb815d1c63e648a2987171c9eb1b6d",
        "filename": "src/test/data/tx_invalid.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5c1edfe6035791973d419ae72cbf24342ee7e4c/src/test/data/tx_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5c1edfe6035791973d419ae72cbf24342ee7e4c/src/test/data/tx_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_invalid.json?ref=c5c1edfe6035791973d419ae72cbf24342ee7e4c",
        "patch": "@@ -181,7 +181,7 @@\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"2147483648 NOP2 1\"]],\n \"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000ffffff7f\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n \n-[\"6 byte non-minimally-encoded arguments are invalid even in their contents are valid\"],\n+[\"6 byte non-minimally-encoded arguments are invalid even if their contents are valid\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x06 0x000000000000 NOP2 1\"]],\n \"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n "
      }
    ]
  },
  {
    "sha": "8be371db340b03dc03142c1bb3390fdfc84f56b4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YmUzNzFkYjM0MGIwM2RjMDMxNDJjMWJiMzM5MGZkZmM4NGY1NmI0",
    "commit": {
      "author": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2015-08-11T13:57:52Z"
      },
      "committer": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2015-08-11T13:57:52Z"
      },
      "message": "Do not store more than 200 timedata samples.",
      "tree": {
        "sha": "4e0102ec9d83e2323c84405e34e1ba28c975528f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4e0102ec9d83e2323c84405e34e1ba28c975528f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8be371db340b03dc03142c1bb3390fdfc84f56b4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8be371db340b03dc03142c1bb3390fdfc84f56b4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8be371db340b03dc03142c1bb3390fdfc84f56b4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8be371db340b03dc03142c1bb3390fdfc84f56b4/comments",
    "author": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a4fe57da6207c1e5691a1e843d22db571f3f0186",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4fe57da6207c1e5691a1e843d22db571f3f0186",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a4fe57da6207c1e5691a1e843d22db571f3f0186"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 5,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a14d69c11664b10da8165db28cc523e14d6a87ea",
        "filename": "src/timedata.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8be371db340b03dc03142c1bb3390fdfc84f56b4/src/timedata.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8be371db340b03dc03142c1bb3390fdfc84f56b4/src/timedata.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/timedata.cpp?ref=8be371db340b03dc03142c1bb3390fdfc84f56b4",
        "patch": "@@ -40,16 +40,20 @@ static int64_t abs64(int64_t n)\n     return (n >= 0 ? n : -n);\n }\n \n+#define BITCOIN_TIMEDATA_MAX_SAMPLES 200\n+\n void AddTimeData(const CNetAddr& ip, int64_t nOffsetSample)\n {\n     LOCK(cs_nTimeOffset);\n     // Ignore duplicates\n     static set<CNetAddr> setKnown;\n+    if (setKnown.size() == BITCOIN_TIMEDATA_MAX_SAMPLES)\n+        return;\n     if (!setKnown.insert(ip).second)\n         return;\n \n     // Add data\n-    static CMedianFilter<int64_t> vTimeOffsets(200,0);\n+    static CMedianFilter<int64_t> vTimeOffsets(BITCOIN_TIMEDATA_MAX_SAMPLES, 0);\n     vTimeOffsets.input(nOffsetSample);\n     LogPrintf(\"Added time data, samples %d, offset %+d (%+d minutes)\\n\", vTimeOffsets.size(), nOffsetSample, nOffsetSample/60);\n "
      }
    ]
  },
  {
    "sha": "dc58258adf1fb1e05002c3057045f113aa214cb7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYzU4MjU4YWRmMWZiMWUwNTAwMmMzMDU3MDQ1ZjExM2FhMjE0Y2I3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-06T07:51:36Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-11T15:29:33Z"
      },
      "message": "Introduce REJECT_INTERNAL codes for local AcceptToMempool errors\n\nAdd status codes specific to AcceptToMempool procession of transactions.\nThese can never happen due to block validation, and must never be sent\nover the P2P network. Add assertions where appropriate.",
      "tree": {
        "sha": "4c081f14d824328c6f80709559ce279839447f7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4c081f14d824328c6f80709559ce279839447f7a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dc58258adf1fb1e05002c3057045f113aa214cb7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc58258adf1fb1e05002c3057045f113aa214cb7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dc58258adf1fb1e05002c3057045f113aa214cb7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc58258adf1fb1e05002c3057045f113aa214cb7/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fbf44e6f3e55d25aa40ca466be3dbfd55de6170a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbf44e6f3e55d25aa40ca466be3dbfd55de6170a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fbf44e6f3e55d25aa40ca466be3dbfd55de6170a"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 20,
      "deletions": 9
    },
    "files": [
      {
        "sha": "5949e5285dc7812dbc1ff31d9a1c5ef694e93246",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 8,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc58258adf1fb1e05002c3057045f113aa214cb7/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc58258adf1fb1e05002c3057045f113aa214cb7/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=dc58258adf1fb1e05002c3057045f113aa214cb7",
        "patch": "@@ -811,7 +811,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     // is it already in the memory pool?\n     uint256 hash = tx.GetHash();\n     if (pool.exists(hash))\n-        return false;\n+        return state.Invalid(false, REJECT_ALREADY_KNOWN, \"txn-already-in-mempool\");\n \n     // Check for conflicts with in-memory transactions\n     {\n@@ -822,7 +822,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         if (pool.mapNextTx.count(outpoint))\n         {\n             // Disable replacement feature for now\n-            return false;\n+            return state.Invalid(false, REJECT_CONFLICT, \"txn-mempool-conflict\");\n         }\n     }\n     }\n@@ -839,7 +839,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n         // do we already have it?\n         if (view.HaveCoins(hash))\n-            return false;\n+            return state.Invalid(false, REJECT_ALREADY_KNOWN, \"txn-already-known\");\n \n         // do all inputs exist?\n         // Note that this does not check for the presence of actual outputs (see the next check for that),\n@@ -848,7 +848,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             if (!view.HaveCoins(txin.prevout.hash)) {\n                 if (pfMissingInputs)\n                     *pfMissingInputs = true;\n-                return false;\n+                return false; // fMissingInputs and !state.IsInvalid() is used to detect this condition, don't set state.Invalid()\n             }\n         }\n \n@@ -868,7 +868,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n         // Check for non-standard pay-to-script-hash in inputs\n         if (fRequireStandard && !AreInputsStandard(tx, view))\n-            return error(\"AcceptToMemoryPool: nonstandard transaction input\");\n+            return state.Invalid(false, REJECT_NONSTANDARD, \"bad-txns-nonstandard-inputs\");\n \n         // Check that the transaction doesn't have an excessive number of\n         // sigops, making it impossible to mine. Since the coinbase transaction\n@@ -1239,7 +1239,7 @@ void static InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state\n     if (state.IsInvalid(nDoS)) {\n         std::map<uint256, NodeId>::iterator it = mapBlockSource.find(pindex->GetBlockHash());\n         if (it != mapBlockSource.end() && State(it->second)) {\n-            assert(state.GetRejectCode() < 0x100);\n+            assert (state.GetRejectCode() < REJECT_INTERNAL); // Blocks are never rejected with internal reject codes\n             CBlockReject reject = {(unsigned char)state.GetRejectCode(), state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), pindex->GetBlockHash()};\n             State(it->second)->rejects.push_back(reject);\n             if (nDoS > 0)\n@@ -4358,8 +4358,9 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             LogPrint(\"mempool\", \"%s from peer=%d %s was not accepted into the memory pool: %s\\n\", tx.GetHash().ToString(),\n                 pfrom->id, pfrom->cleanSubVer,\n                 state.GetRejectReason());\n-            pfrom->PushMessage(\"reject\", strCommand, state.GetRejectCode(),\n-                               state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), inv.hash);\n+            if (state.GetRejectCode() < REJECT_INTERNAL) // Never send AcceptToMemoryPool's internal codes over P2P\n+                pfrom->PushMessage(\"reject\", strCommand, state.GetRejectCode(),\n+                                   state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), inv.hash);\n             if (nDoS > 0)\n                 Misbehaving(pfrom->GetId(), nDoS);\n         }\n@@ -4439,6 +4440,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         ProcessNewBlock(state, pfrom, &block, forceProcessing, NULL);\n         int nDoS;\n         if (state.IsInvalid(nDoS)) {\n+            assert (state.GetRejectCode() < REJECT_INTERNAL); // Blocks are never rejected with internal reject codes\n             pfrom->PushMessage(\"reject\", strCommand, state.GetRejectCode(),\n                                state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), inv.hash);\n             if (nDoS > 0) {"
      },
      {
        "sha": "5c54b11d469279b53ab848570c1328282f39dae5",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc58258adf1fb1e05002c3057045f113aa214cb7/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc58258adf1fb1e05002c3057045f113aa214cb7/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=dc58258adf1fb1e05002c3057045f113aa214cb7",
        "patch": "@@ -455,7 +455,16 @@ extern CBlockTreeDB *pblocktree;\n  */\n int GetSpendHeight(const CCoinsViewCache& inputs);\n \n-/** local \"reject\" message codes for RPC which can not be triggered by p2p trasactions */\n+/** Reject codes greater or equal to this can be returned by AcceptToMemPool\n+ * for transactions, to signal internal conditions. They cannot and should not\n+ * be sent over the P2P network.\n+ */\n+static const unsigned int REJECT_INTERNAL = 0x100;\n+/** Too high fee. Can not be triggered by P2P transactions */\n static const unsigned int REJECT_HIGHFEE = 0x100;\n+/** Transaction is already known (either in mempool or blockchain) */\n+static const unsigned int REJECT_ALREADY_KNOWN = 0x101;\n+/** Transaction conflicts with a transaction already known */\n+static const unsigned int REJECT_CONFLICT = 0x102;\n \n #endif // BITCOIN_MAIN_H"
      }
    ]
  },
  {
    "sha": "9003c7cdd88402986e48ec126258fc10d6742fc7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MDAzYzdjZGQ4ODQwMjk4NmU0OGVjMTI2MjU4ZmMxMGQ2NzQyZmM3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-06T07:53:24Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-11T15:29:33Z"
      },
      "message": "Add function to convert CValidationState to a human-readable message\n\nIt is necessary to be able to concisely log a validation state.\nConvert CValidationState to a human-readable message for logging.",
      "tree": {
        "sha": "c58ec8372165dfb0a091b3e975ec1a33014975bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c58ec8372165dfb0a091b3e975ec1a33014975bd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9003c7cdd88402986e48ec126258fc10d6742fc7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9003c7cdd88402986e48ec126258fc10d6742fc7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9003c7cdd88402986e48ec126258fc10d6742fc7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9003c7cdd88402986e48ec126258fc10d6742fc7/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dc58258adf1fb1e05002c3057045f113aa214cb7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc58258adf1fb1e05002c3057045f113aa214cb7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dc58258adf1fb1e05002c3057045f113aa214cb7"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3d7a620433760bec6a26ff30b35d7251c18b9007",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9003c7cdd88402986e48ec126258fc10d6742fc7/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9003c7cdd88402986e48ec126258fc10d6742fc7/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=9003c7cdd88402986e48ec126258fc10d6742fc7",
        "patch": "@@ -778,6 +778,14 @@ CAmount GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowF\n     return nMinFee;\n }\n \n+/** Convert CValidationState to a human-readable message for logging */\n+static std::string FormatStateMessage(const CValidationState &state)\n+{\n+    return strprintf(\"%s%s (code %i)\",\n+        state.GetRejectReason(),\n+        state.GetDebugMessage().empty() ? \"\" : \", \"+state.GetDebugMessage(),\n+        state.GetRejectCode());\n+}\n \n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n                         bool* pfMissingInputs, bool fRejectAbsurdFee)"
      }
    ]
  },
  {
    "sha": "6cab80827277a66a339f1035c58a8f26e347e191",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2Y2FiODA4MjcyNzdhNjZhMzM5ZjEwMzVjNThhOGYyNmUzNDdlMTkx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-06T07:59:09Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-11T15:29:34Z"
      },
      "message": "Remove most logging from transaction validation\n\nRemove unnecessary direct logging in CheckTransaction,\nAcceptToMemoryPool, CheckTxInputs, CScriptCheck::operator()\n\nAll status information should be returned in the CValidationState.\nRelevant debug information is also added to the CValidationState using\nthe recently introduced debug message.\n\nDo keep the \"BUG! PLEASE REPORT THIS! ConnectInputs failed against MANDATORY but not STANDARD flags\"\nerror as it is meant to appear as bug in the log.",
      "tree": {
        "sha": "87c5f17a8d8ef3abd1ce7cc828be52d525bc2e37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/87c5f17a8d8ef3abd1ce7cc828be52d525bc2e37"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6cab80827277a66a339f1035c58a8f26e347e191",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6cab80827277a66a339f1035c58a8f26e347e191",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6cab80827277a66a339f1035c58a8f26e347e191",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6cab80827277a66a339f1035c58a8f26e347e191/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9003c7cdd88402986e48ec126258fc10d6742fc7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9003c7cdd88402986e48ec126258fc10d6742fc7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9003c7cdd88402986e48ec126258fc10d6742fc7"
      }
    ],
    "stats": {
      "total": 94,
      "additions": 35,
      "deletions": 59
    },
    "files": [
      {
        "sha": "947bd8ef1a6fbef2b566cd1bf9f3dad2cfb6058c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 59,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6cab80827277a66a339f1035c58a8f26e347e191/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6cab80827277a66a339f1035c58a8f26e347e191/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=6cab80827277a66a339f1035c58a8f26e347e191",
        "patch": "@@ -696,54 +696,45 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n {\n     // Basic checks that don't depend on any context\n     if (tx.vin.empty())\n-        return state.DoS(10, error(\"CheckTransaction(): vin empty\"),\n-                         REJECT_INVALID, \"bad-txns-vin-empty\");\n+        return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vin-empty\");\n     if (tx.vout.empty())\n-        return state.DoS(10, error(\"CheckTransaction(): vout empty\"),\n-                         REJECT_INVALID, \"bad-txns-vout-empty\");\n+        return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vout-empty\");\n     // Size limits\n     if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n-        return state.DoS(100, error(\"CheckTransaction(): size limits failed\"),\n-                         REJECT_INVALID, \"bad-txns-oversize\");\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-txns-oversize\");\n \n     // Check for negative or overflow output values\n     CAmount nValueOut = 0;\n     BOOST_FOREACH(const CTxOut& txout, tx.vout)\n     {\n         if (txout.nValue < 0)\n-            return state.DoS(100, error(\"CheckTransaction(): txout.nValue negative\"),\n-                             REJECT_INVALID, \"bad-txns-vout-negative\");\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-negative\");\n         if (txout.nValue > MAX_MONEY)\n-            return state.DoS(100, error(\"CheckTransaction(): txout.nValue too high\"),\n-                             REJECT_INVALID, \"bad-txns-vout-toolarge\");\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-toolarge\");\n         nValueOut += txout.nValue;\n         if (!MoneyRange(nValueOut))\n-            return state.DoS(100, error(\"CheckTransaction(): txout total out of range\"),\n-                             REJECT_INVALID, \"bad-txns-txouttotal-toolarge\");\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-txouttotal-toolarge\");\n     }\n \n     // Check for duplicate inputs\n     set<COutPoint> vInOutPoints;\n     BOOST_FOREACH(const CTxIn& txin, tx.vin)\n     {\n         if (vInOutPoints.count(txin.prevout))\n-            return state.DoS(100, error(\"CheckTransaction(): duplicate inputs\"),\n-                             REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n         vInOutPoints.insert(txin.prevout);\n     }\n \n     if (tx.IsCoinBase())\n     {\n         if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n-            return state.DoS(100, error(\"CheckTransaction(): coinbase script size\"),\n-                             REJECT_INVALID, \"bad-cb-length\");\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-cb-length\");\n     }\n     else\n     {\n         BOOST_FOREACH(const CTxIn& txin, tx.vin)\n             if (txin.prevout.IsNull())\n-                return state.DoS(10, error(\"CheckTransaction(): prevout is null\"),\n-                                 REJECT_INVALID, \"bad-txns-prevout-null\");\n+                return state.DoS(10, false, REJECT_INVALID, \"bad-txns-prevout-null\");\n     }\n \n     return true;\n@@ -795,26 +786,22 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         *pfMissingInputs = false;\n \n     if (!CheckTransaction(tx, state))\n-        return error(\"AcceptToMemoryPool: CheckTransaction failed\");\n+        return false;\n \n     // Coinbase is only valid in a block, not as a loose transaction\n     if (tx.IsCoinBase())\n-        return state.DoS(100, error(\"AcceptToMemoryPool: coinbase as individual tx\"),\n-                         REJECT_INVALID, \"coinbase\");\n+        return state.DoS(100, false, REJECT_INVALID, \"coinbase\");\n \n     // Rather not work on nonstandard transactions (unless -testnet/-regtest)\n     string reason;\n     if (fRequireStandard && !IsStandardTx(tx, reason))\n-        return state.DoS(0,\n-                         error(\"AcceptToMemoryPool: nonstandard transaction: %s\", reason),\n-                         REJECT_NONSTANDARD, reason);\n+        return state.DoS(0, false, REJECT_NONSTANDARD, reason);\n \n     // Only accept nLockTime-using transactions that can be mined in the next\n     // block; we don't want our mempool filled up with transactions that can't\n     // be mined yet.\n     if (!CheckFinalTx(tx))\n-        return state.DoS(0, error(\"AcceptToMemoryPool: non-final\"),\n-                         REJECT_NONSTANDARD, \"non-final\");\n+        return state.DoS(0, false, REJECT_NONSTANDARD, \"non-final\");\n \n     // is it already in the memory pool?\n     uint256 hash = tx.GetHash();\n@@ -862,8 +849,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n         // are the actual inputs available?\n         if (!view.HaveInputs(tx))\n-            return state.Invalid(error(\"AcceptToMemoryPool: inputs already spent\"),\n-                                 REJECT_DUPLICATE, \"bad-txns-inputs-spent\");\n+            return state.Invalid(false, REJECT_DUPLICATE, \"bad-txns-inputs-spent\");\n \n         // Bring the best block into scope\n         view.GetBestBlock();\n@@ -886,10 +872,8 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         unsigned int nSigOps = GetLegacySigOpCount(tx);\n         nSigOps += GetP2SHSigOpCount(tx, view);\n         if (nSigOps > MAX_STANDARD_TX_SIGOPS)\n-            return state.DoS(0,\n-                             error(\"AcceptToMemoryPool: too many sigops %s, %d > %d\",\n-                                   hash.ToString(), nSigOps, MAX_STANDARD_TX_SIGOPS),\n-                             REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\");\n+            return state.DoS(0, false, REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\", false,\n+                strprintf(\"%d > %d\", nSigOps, MAX_STANDARD_TX_SIGOPS));\n \n         CAmount nValueOut = tx.GetValueOut();\n         CAmount nFees = nValueIn-nValueOut;\n@@ -901,9 +885,8 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         // Don't accept it if it can't get into a block\n         CAmount txMinFee = GetMinRelayFee(tx, nSize, true);\n         if (fLimitFree && nFees < txMinFee)\n-            return state.DoS(0, error(\"AcceptToMemoryPool: not enough fees %s, %d < %d\",\n-                                      hash.ToString(), nFees, txMinFee),\n-                             REJECT_INSUFFICIENTFEE, \"insufficient fee\");\n+            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"insufficient fee\", false,\n+                strprintf(\"%d < %d\", nFees, txMinFee));\n \n         // Require that free transactions have sufficient priority to be mined in the next block.\n         if (GetBoolArg(\"-relaypriority\", true) && nFees < ::minRelayTxFee.GetFee(nSize) && !AllowFree(view.GetPriority(tx, chainActive.Height() + 1))) {\n@@ -928,24 +911,20 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             // -limitfreerelay unit is thousand-bytes-per-minute\n             // At default rate it would take over a month to fill 1GB\n             if (dFreeCount >= GetArg(\"-limitfreerelay\", 15)*10*1000)\n-                return state.DoS(0, error(\"AcceptToMemoryPool: free transaction rejected by rate limiter\"),\n-                                 REJECT_INSUFFICIENTFEE, \"rate limited free transaction\");\n+                return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"rate limited free transaction\");\n             LogPrint(\"mempool\", \"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n             dFreeCount += nSize;\n         }\n \n         if (fRejectAbsurdFee && nFees > ::minRelayTxFee.GetFee(nSize) * 10000)\n-            return state.Invalid(error(\"AcceptToMemoryPool: absurdly high fees %s, %d > %d\",\n-                                       hash.ToString(),\n-                                       nFees, ::minRelayTxFee.GetFee(nSize) * 10000),\n-                                 REJECT_HIGHFEE, \"absurdly-high-fee\");\n+            return state.Invalid(false,\n+                REJECT_HIGHFEE, \"absurdly-high-fee\",\n+                strprintf(\"%d > %d\", nFees, ::minRelayTxFee.GetFee(nSize) * 10000));\n \n         // Check against previous transactions\n         // This is done last to help prevent CPU exhaustion denial-of-service attacks.\n         if (!CheckInputs(tx, state, view, true, STANDARD_SCRIPT_VERIFY_FLAGS, true))\n-        {\n-            return error(\"AcceptToMemoryPool: ConnectInputs failed %s\", hash.ToString());\n-        }\n+            return false;\n \n         // Check again against just the consensus-critical mandatory script\n         // verification flags, in case of bugs in the standard flags that cause\n@@ -958,7 +937,8 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         // can be exploited as a DoS attack.\n         if (!CheckInputs(tx, state, view, true, MANDATORY_SCRIPT_VERIFY_FLAGS, true))\n         {\n-            return error(\"AcceptToMemoryPool: BUG! PLEASE REPORT THIS! ConnectInputs failed against MANDATORY but not STANDARD flags %s\", hash.ToString());\n+            return error(\"%s: BUG! PLEASE REPORT THIS! ConnectInputs failed against MANDATORY but not STANDARD flags %s, %s\",\n+                __func__, hash.ToString(), FormatStateMessage(state));\n         }\n \n         // Store transaction in memory\n@@ -1298,7 +1278,7 @@ void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n bool CScriptCheck::operator()() {\n     const CScript &scriptSig = ptxTo->vin[nIn].scriptSig;\n     if (!VerifyScript(scriptSig, scriptPubKey, nFlags, CachingTransactionSignatureChecker(ptxTo, nIn, cacheStore), &error)) {\n-        return ::error(\"CScriptCheck(): %s:%d VerifySignature failed: %s\", ptxTo->GetHash().ToString(), nIn, ScriptErrorString(error));\n+        return false;\n     }\n     return true;\n }\n@@ -1316,7 +1296,7 @@ bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoins\n         // This doesn't trigger the DoS code on purpose; if it did, it would make it easier\n         // for an attacker to attempt to split the network.\n         if (!inputs.HaveInputs(tx))\n-            return state.Invalid(error(\"CheckInputs(): %s inputs unavailable\", tx.GetHash().ToString()));\n+            return state.Invalid(false, 0, \"\", \"Inputs unavailable\");\n \n         CAmount nValueIn = 0;\n         CAmount nFees = 0;\n@@ -1329,33 +1309,29 @@ bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoins\n             // If prev is coinbase, check that it's matured\n             if (coins->IsCoinBase()) {\n                 if (nSpendHeight - coins->nHeight < COINBASE_MATURITY)\n-                    return state.Invalid(\n-                        error(\"CheckInputs(): tried to spend coinbase at depth %d\", nSpendHeight - coins->nHeight),\n-                        REJECT_INVALID, \"bad-txns-premature-spend-of-coinbase\");\n+                    return state.Invalid(false,\n+                        REJECT_INVALID, \"bad-txns-premature-spend-of-coinbase\",\n+                        strprintf(\"tried to spend coinbase at depth %d\", nSpendHeight - coins->nHeight));\n             }\n \n             // Check for negative or overflow input values\n             nValueIn += coins->vout[prevout.n].nValue;\n             if (!MoneyRange(coins->vout[prevout.n].nValue) || !MoneyRange(nValueIn))\n-                return state.DoS(100, error(\"CheckInputs(): txin values out of range\"),\n-                                 REJECT_INVALID, \"bad-txns-inputvalues-outofrange\");\n+                return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputvalues-outofrange\");\n \n         }\n \n         if (nValueIn < tx.GetValueOut())\n-            return state.DoS(100, error(\"CheckInputs(): %s value in (%s) < value out (%s)\",\n-                                        tx.GetHash().ToString(), FormatMoney(nValueIn), FormatMoney(tx.GetValueOut())),\n-                             REJECT_INVALID, \"bad-txns-in-belowout\");\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-in-belowout\", false,\n+                strprintf(\"value in (%s) < value out (%s)\", FormatMoney(nValueIn), FormatMoney(tx.GetValueOut())));\n \n         // Tally transaction fees\n         CAmount nTxFee = nValueIn - tx.GetValueOut();\n         if (nTxFee < 0)\n-            return state.DoS(100, error(\"CheckInputs(): %s nTxFee < 0\", tx.GetHash().ToString()),\n-                             REJECT_INVALID, \"bad-txns-fee-negative\");\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-fee-negative\");\n         nFees += nTxFee;\n         if (!MoneyRange(nFees))\n-            return state.DoS(100, error(\"CheckInputs(): nFees out of range\"),\n-                             REJECT_INVALID, \"bad-txns-fee-outofrange\");\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-fee-outofrange\");\n     return true;\n }\n }// namespace Consensus"
      }
    ]
  },
  {
    "sha": "66daed5e1be7932e08896794ca016ff31c71a1d4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NmRhZWQ1ZTFiZTc5MzJlMDg4OTY3OTRjYTAxNmZmMzFjNzFhMWQ0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-06T08:02:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-11T15:29:34Z"
      },
      "message": "Add information to errors in ConnectBlock, CheckBlock\n\nAdd detailed state information to the errors, as it is no longer being\nlogged downstream.\n\nAlso add the state information to mempool rejection debug message in\nProcessMessages.",
      "tree": {
        "sha": "1744b68f255ab169e9ddba3c479f60b3751caee8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1744b68f255ab169e9ddba3c479f60b3751caee8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/66daed5e1be7932e08896794ca016ff31c71a1d4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66daed5e1be7932e08896794ca016ff31c71a1d4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/66daed5e1be7932e08896794ca016ff31c71a1d4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66daed5e1be7932e08896794ca016ff31c71a1d4/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6cab80827277a66a339f1035c58a8f26e347e191",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6cab80827277a66a339f1035c58a8f26e347e191",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6cab80827277a66a339f1035c58a8f26e347e191"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 6,
      "deletions": 3
    },
    "files": [
      {
        "sha": "5d9247e4b015a43fd2e21e54545b5296b358f333",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66daed5e1be7932e08896794ca016ff31c71a1d4/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66daed5e1be7932e08896794ca016ff31c71a1d4/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=66daed5e1be7932e08896794ca016ff31c71a1d4",
        "patch": "@@ -1777,7 +1777,8 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n \n             std::vector<CScriptCheck> vChecks;\n             if (!CheckInputs(tx, state, view, fScriptChecks, flags, false, nScriptCheckThreads ? &vChecks : NULL))\n-                return false;\n+                return error(\"ConnectBlock(): CheckInputs on %s failed with %s\",\n+                    tx.GetHash().ToString(), FormatStateMessage(state));\n             control.Add(vChecks);\n         }\n \n@@ -2604,7 +2605,9 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n     // Check transactions\n     BOOST_FOREACH(const CTransaction& tx, block.vtx)\n         if (!CheckTransaction(tx, state))\n-            return error(\"CheckBlock(): CheckTransaction failed\");\n+            return error(\"CheckBlock(): CheckTransaction of %s failed with %s\",\n+                tx.GetHash().ToString(),\n+                FormatStateMessage(state));\n \n     unsigned int nSigOps = 0;\n     BOOST_FOREACH(const CTransaction& tx, block.vtx)\n@@ -4341,7 +4344,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         {\n             LogPrint(\"mempool\", \"%s from peer=%d %s was not accepted into the memory pool: %s\\n\", tx.GetHash().ToString(),\n                 pfrom->id, pfrom->cleanSubVer,\n-                state.GetRejectReason());\n+                FormatStateMessage(state));\n             if (state.GetRejectCode() < REJECT_INTERNAL) // Never send AcceptToMemoryPool's internal codes over P2P\n                 pfrom->PushMessage(\"reject\", strCommand, state.GetRejectCode(),\n                                    state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), inv.hash);"
      }
    ]
  },
  {
    "sha": "7f1f8f5edf36b0885b0f2b746e28a2f9bde8f4f0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZjFmOGY1ZWRmMzZiMDg4NWIwZjJiNzQ2ZTI4YTJmOWJkZThmNGYw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-06T08:03:11Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-11T15:29:34Z"
      },
      "message": "Move mempool rejections to new debug category\n\nMove mempool rejections to debug category `mempoolrej`, to make it possible\nto show them without enabling the entire category `mempool` which is\nhigh volume.",
      "tree": {
        "sha": "d434f7499eb84cb41f1f4f880c93fa7dba6491dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d434f7499eb84cb41f1f4f880c93fa7dba6491dc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7f1f8f5edf36b0885b0f2b746e28a2f9bde8f4f0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f1f8f5edf36b0885b0f2b746e28a2f9bde8f4f0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7f1f8f5edf36b0885b0f2b746e28a2f9bde8f4f0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f1f8f5edf36b0885b0f2b746e28a2f9bde8f4f0/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "66daed5e1be7932e08896794ca016ff31c71a1d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66daed5e1be7932e08896794ca016ff31c71a1d4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/66daed5e1be7932e08896794ca016ff31c71a1d4"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "085e04fdfd7d5bcc9bcf570dcb2b829462f59c1d",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f1f8f5edf36b0885b0f2b746e28a2f9bde8f4f0/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f1f8f5edf36b0885b0f2b746e28a2f9bde8f4f0/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=7f1f8f5edf36b0885b0f2b746e28a2f9bde8f4f0",
        "patch": "@@ -373,7 +373,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-flushwallet\", strprintf(\"Run a thread to flush wallet periodically (default: %u)\", 1));\n         strUsage += HelpMessageOpt(\"-stopafterblockimport\", strprintf(\"Stop running after importing blocks from disk (default: %u)\", 0));\n     }\n-    string debugCategories = \"addrman, alert, bench, coindb, db, lock, rand, rpc, selectcoins, mempool, net, proxy, prune\"; // Don't translate these and qt below\n+    string debugCategories = \"addrman, alert, bench, coindb, db, lock, rand, rpc, selectcoins, mempool, mempoolrej, net, proxy, prune\"; // Don't translate these and qt below\n     if (mode == HMM_BITCOIN_QT)\n         debugCategories += \", qt\";\n     strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +"
      },
      {
        "sha": "bb0ca9db54230f4d759960442ab3e2f19650b96b",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f1f8f5edf36b0885b0f2b746e28a2f9bde8f4f0/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f1f8f5edf36b0885b0f2b746e28a2f9bde8f4f0/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=7f1f8f5edf36b0885b0f2b746e28a2f9bde8f4f0",
        "patch": "@@ -4342,7 +4342,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         int nDoS = 0;\n         if (state.IsInvalid(nDoS))\n         {\n-            LogPrint(\"mempool\", \"%s from peer=%d %s was not accepted into the memory pool: %s\\n\", tx.GetHash().ToString(),\n+            LogPrint(\"mempoolrej\", \"%s from peer=%d %s was not accepted into the memory pool: %s\\n\", tx.GetHash().ToString(),\n                 pfrom->id, pfrom->cleanSubVer,\n                 FormatStateMessage(state));\n             if (state.GetRejectCode() < REJECT_INTERNAL) // Never send AcceptToMemoryPool's internal codes over P2P"
      }
    ]
  },
  {
    "sha": "87f37e259d6deb52ee464edde7aece687eea97a5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4N2YzN2UyNTlkNmRlYjUyZWU0NjRlZGRlN2FlY2U2ODdlZWE5N2E1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-11T15:36:39Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-11T15:36:50Z"
      },
      "message": "Merge pull request #6519\n\n7f1f8f5 Move mempool rejections to new debug category (Wladimir J. van der Laan)\n66daed5 Add information to errors in ConnectBlock, CheckBlock (Wladimir J. van der Laan)\n6cab808 Remove most logging from transaction validation (Wladimir J. van der Laan)\n9003c7c Add function to convert CValidationState to a human-readable message (Wladimir J. van der Laan)\ndc58258 Introduce REJECT_INTERNAL codes for local AcceptToMempool errors (Wladimir J. van der Laan)\nfbf44e6 Add debug message to CValidationState for optional extra information (Wladimir J. van der Laan)",
      "tree": {
        "sha": "9b3e3f88ffcfe790e7495d63d5ac21faa5fd5852",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9b3e3f88ffcfe790e7495d63d5ac21faa5fd5852"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/87f37e259d6deb52ee464edde7aece687eea97a5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVyhaSAAoJEHSBCwEjRsmmmAgH/R28FA5XuePnpE7mNQnMeolr\n7dkflc+wmTcVa+w8v8ahKj+OqvDxwtTI2HG0tiY9Be5kY6pDkf6VwD2l9dIdtLUz\nZHZJSLc+enewbKLVzZF+jfkm/4M5ibaw9ZoNnhmqaAx/VDIEll+wJj9tdv2ib7Nd\nOEs+K9P8e2qeTlmddUcsfOSo33RbYyLWgq6ju7H4kj/uqDm5YriYzRRmxGKSjIMp\n5u5CQGmRwey5O8zAz8v8g64xgXy+hdqBeJSEEB0R3if4TVVSI6IwMsa39X988c/s\ne+LCN5KZmKKcUiM2fYdtrhVNGUX8QPVQaZnYPBryl42GGlOAsoCq3emwXiPuTLc=\n=MNhW\n-----END PGP SIGNATURE-----",
        "payload": "tree 9b3e3f88ffcfe790e7495d63d5ac21faa5fd5852\nparent 3eaaf71fe76b659d8ed40fdf88ce1ba18b62cc36\nparent 7f1f8f5edf36b0885b0f2b746e28a2f9bde8f4f0\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1439307399 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1439307410 +0200\n\nMerge pull request #6519\n\n7f1f8f5 Move mempool rejections to new debug category (Wladimir J. van der Laan)\n66daed5 Add information to errors in ConnectBlock, CheckBlock (Wladimir J. van der Laan)\n6cab808 Remove most logging from transaction validation (Wladimir J. van der Laan)\n9003c7c Add function to convert CValidationState to a human-readable message (Wladimir J. van der Laan)\ndc58258 Introduce REJECT_INTERNAL codes for local AcceptToMempool errors (Wladimir J. van der Laan)\nfbf44e6 Add debug message to CValidationState for optional extra information (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87f37e259d6deb52ee464edde7aece687eea97a5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/87f37e259d6deb52ee464edde7aece687eea97a5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87f37e259d6deb52ee464edde7aece687eea97a5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3eaaf71fe76b659d8ed40fdf88ce1ba18b62cc36",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3eaaf71fe76b659d8ed40fdf88ce1ba18b62cc36",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3eaaf71fe76b659d8ed40fdf88ce1ba18b62cc36"
      },
      {
        "sha": "7f1f8f5edf36b0885b0f2b746e28a2f9bde8f4f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f1f8f5edf36b0885b0f2b746e28a2f9bde8f4f0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7f1f8f5edf36b0885b0f2b746e28a2f9bde8f4f0"
      }
    ],
    "stats": {
      "total": 157,
      "additions": 80,
      "deletions": 77
    },
    "files": [
      {
        "sha": "d6051edc385dc899c168d2420b3ee608c9378d5b",
        "filename": "src/consensus/validation.h",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87f37e259d6deb52ee464edde7aece687eea97a5/src/consensus/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87f37e259d6deb52ee464edde7aece687eea97a5/src/consensus/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/validation.h?ref=87f37e259d6deb52ee464edde7aece687eea97a5",
        "patch": "@@ -30,23 +30,27 @@ class CValidationState {\n     std::string strRejectReason;\n     unsigned int chRejectCode;\n     bool corruptionPossible;\n+    std::string strDebugMessage;\n public:\n     CValidationState() : mode(MODE_VALID), nDoS(0), chRejectCode(0), corruptionPossible(false) {}\n     bool DoS(int level, bool ret = false,\n-             unsigned int chRejectCodeIn=0, std::string strRejectReasonIn=\"\",\n-             bool corruptionIn=false) {\n+             unsigned int chRejectCodeIn=0, const std::string &strRejectReasonIn=\"\",\n+             bool corruptionIn=false,\n+             const std::string &strDebugMessageIn=\"\") {\n         chRejectCode = chRejectCodeIn;\n         strRejectReason = strRejectReasonIn;\n         corruptionPossible = corruptionIn;\n+        strDebugMessage = strDebugMessageIn;\n         if (mode == MODE_ERROR)\n             return ret;\n         nDoS += level;\n         mode = MODE_INVALID;\n         return ret;\n     }\n     bool Invalid(bool ret = false,\n-                 unsigned int _chRejectCode=0, std::string _strRejectReason=\"\") {\n-        return DoS(0, ret, _chRejectCode, _strRejectReason);\n+                 unsigned int _chRejectCode=0, const std::string &_strRejectReason=\"\",\n+                 const std::string &_strDebugMessage=\"\") {\n+        return DoS(0, ret, _chRejectCode, _strRejectReason, false, _strDebugMessage);\n     }\n     bool Error(const std::string& strRejectReasonIn) {\n         if (mode == MODE_VALID)\n@@ -75,6 +79,7 @@ class CValidationState {\n     }\n     unsigned int GetRejectCode() const { return chRejectCode; }\n     std::string GetRejectReason() const { return strRejectReason; }\n+    std::string GetDebugMessage() const { return strDebugMessage; }\n };\n \n #endif // BITCOIN_CONSENSUS_VALIDATION_H"
      },
      {
        "sha": "085e04fdfd7d5bcc9bcf570dcb2b829462f59c1d",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87f37e259d6deb52ee464edde7aece687eea97a5/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87f37e259d6deb52ee464edde7aece687eea97a5/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=87f37e259d6deb52ee464edde7aece687eea97a5",
        "patch": "@@ -373,7 +373,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-flushwallet\", strprintf(\"Run a thread to flush wallet periodically (default: %u)\", 1));\n         strUsage += HelpMessageOpt(\"-stopafterblockimport\", strprintf(\"Stop running after importing blocks from disk (default: %u)\", 0));\n     }\n-    string debugCategories = \"addrman, alert, bench, coindb, db, lock, rand, rpc, selectcoins, mempool, net, proxy, prune\"; // Don't translate these and qt below\n+    string debugCategories = \"addrman, alert, bench, coindb, db, lock, rand, rpc, selectcoins, mempool, mempoolrej, net, proxy, prune\"; // Don't translate these and qt below\n     if (mode == HMM_BITCOIN_QT)\n         debugCategories += \", qt\";\n     strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +"
      },
      {
        "sha": "9f42819a0added66aaa3ef379bae414e70b9b568",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 60,
        "deletions": 71,
        "changes": 131,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87f37e259d6deb52ee464edde7aece687eea97a5/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87f37e259d6deb52ee464edde7aece687eea97a5/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=87f37e259d6deb52ee464edde7aece687eea97a5",
        "patch": "@@ -696,54 +696,45 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n {\n     // Basic checks that don't depend on any context\n     if (tx.vin.empty())\n-        return state.DoS(10, error(\"CheckTransaction(): vin empty\"),\n-                         REJECT_INVALID, \"bad-txns-vin-empty\");\n+        return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vin-empty\");\n     if (tx.vout.empty())\n-        return state.DoS(10, error(\"CheckTransaction(): vout empty\"),\n-                         REJECT_INVALID, \"bad-txns-vout-empty\");\n+        return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vout-empty\");\n     // Size limits\n     if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n-        return state.DoS(100, error(\"CheckTransaction(): size limits failed\"),\n-                         REJECT_INVALID, \"bad-txns-oversize\");\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-txns-oversize\");\n \n     // Check for negative or overflow output values\n     CAmount nValueOut = 0;\n     BOOST_FOREACH(const CTxOut& txout, tx.vout)\n     {\n         if (txout.nValue < 0)\n-            return state.DoS(100, error(\"CheckTransaction(): txout.nValue negative\"),\n-                             REJECT_INVALID, \"bad-txns-vout-negative\");\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-negative\");\n         if (txout.nValue > MAX_MONEY)\n-            return state.DoS(100, error(\"CheckTransaction(): txout.nValue too high\"),\n-                             REJECT_INVALID, \"bad-txns-vout-toolarge\");\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-toolarge\");\n         nValueOut += txout.nValue;\n         if (!MoneyRange(nValueOut))\n-            return state.DoS(100, error(\"CheckTransaction(): txout total out of range\"),\n-                             REJECT_INVALID, \"bad-txns-txouttotal-toolarge\");\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-txouttotal-toolarge\");\n     }\n \n     // Check for duplicate inputs\n     set<COutPoint> vInOutPoints;\n     BOOST_FOREACH(const CTxIn& txin, tx.vin)\n     {\n         if (vInOutPoints.count(txin.prevout))\n-            return state.DoS(100, error(\"CheckTransaction(): duplicate inputs\"),\n-                             REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n         vInOutPoints.insert(txin.prevout);\n     }\n \n     if (tx.IsCoinBase())\n     {\n         if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n-            return state.DoS(100, error(\"CheckTransaction(): coinbase script size\"),\n-                             REJECT_INVALID, \"bad-cb-length\");\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-cb-length\");\n     }\n     else\n     {\n         BOOST_FOREACH(const CTxIn& txin, tx.vin)\n             if (txin.prevout.IsNull())\n-                return state.DoS(10, error(\"CheckTransaction(): prevout is null\"),\n-                                 REJECT_INVALID, \"bad-txns-prevout-null\");\n+                return state.DoS(10, false, REJECT_INVALID, \"bad-txns-prevout-null\");\n     }\n \n     return true;\n@@ -778,6 +769,14 @@ CAmount GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowF\n     return nMinFee;\n }\n \n+/** Convert CValidationState to a human-readable message for logging */\n+static std::string FormatStateMessage(const CValidationState &state)\n+{\n+    return strprintf(\"%s%s (code %i)\",\n+        state.GetRejectReason(),\n+        state.GetDebugMessage().empty() ? \"\" : \", \"+state.GetDebugMessage(),\n+        state.GetRejectCode());\n+}\n \n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n                         bool* pfMissingInputs, bool fRejectAbsurdFee)\n@@ -787,31 +786,27 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         *pfMissingInputs = false;\n \n     if (!CheckTransaction(tx, state))\n-        return error(\"AcceptToMemoryPool: CheckTransaction failed\");\n+        return false;\n \n     // Coinbase is only valid in a block, not as a loose transaction\n     if (tx.IsCoinBase())\n-        return state.DoS(100, error(\"AcceptToMemoryPool: coinbase as individual tx\"),\n-                         REJECT_INVALID, \"coinbase\");\n+        return state.DoS(100, false, REJECT_INVALID, \"coinbase\");\n \n     // Rather not work on nonstandard transactions (unless -testnet/-regtest)\n     string reason;\n     if (fRequireStandard && !IsStandardTx(tx, reason))\n-        return state.DoS(0,\n-                         error(\"AcceptToMemoryPool: nonstandard transaction: %s\", reason),\n-                         REJECT_NONSTANDARD, reason);\n+        return state.DoS(0, false, REJECT_NONSTANDARD, reason);\n \n     // Only accept nLockTime-using transactions that can be mined in the next\n     // block; we don't want our mempool filled up with transactions that can't\n     // be mined yet.\n     if (!CheckFinalTx(tx))\n-        return state.DoS(0, error(\"AcceptToMemoryPool: non-final\"),\n-                         REJECT_NONSTANDARD, \"non-final\");\n+        return state.DoS(0, false, REJECT_NONSTANDARD, \"non-final\");\n \n     // is it already in the memory pool?\n     uint256 hash = tx.GetHash();\n     if (pool.exists(hash))\n-        return false;\n+        return state.Invalid(false, REJECT_ALREADY_KNOWN, \"txn-already-in-mempool\");\n \n     // Check for conflicts with in-memory transactions\n     {\n@@ -822,7 +817,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         if (pool.mapNextTx.count(outpoint))\n         {\n             // Disable replacement feature for now\n-            return false;\n+            return state.Invalid(false, REJECT_CONFLICT, \"txn-mempool-conflict\");\n         }\n     }\n     }\n@@ -839,7 +834,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n         // do we already have it?\n         if (view.HaveCoins(hash))\n-            return false;\n+            return state.Invalid(false, REJECT_ALREADY_KNOWN, \"txn-already-known\");\n \n         // do all inputs exist?\n         // Note that this does not check for the presence of actual outputs (see the next check for that),\n@@ -848,14 +843,13 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             if (!view.HaveCoins(txin.prevout.hash)) {\n                 if (pfMissingInputs)\n                     *pfMissingInputs = true;\n-                return false;\n+                return false; // fMissingInputs and !state.IsInvalid() is used to detect this condition, don't set state.Invalid()\n             }\n         }\n \n         // are the actual inputs available?\n         if (!view.HaveInputs(tx))\n-            return state.Invalid(error(\"AcceptToMemoryPool: inputs already spent\"),\n-                                 REJECT_DUPLICATE, \"bad-txns-inputs-spent\");\n+            return state.Invalid(false, REJECT_DUPLICATE, \"bad-txns-inputs-spent\");\n \n         // Bring the best block into scope\n         view.GetBestBlock();\n@@ -868,7 +862,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n         // Check for non-standard pay-to-script-hash in inputs\n         if (fRequireStandard && !AreInputsStandard(tx, view))\n-            return error(\"AcceptToMemoryPool: nonstandard transaction input\");\n+            return state.Invalid(false, REJECT_NONSTANDARD, \"bad-txns-nonstandard-inputs\");\n \n         // Check that the transaction doesn't have an excessive number of\n         // sigops, making it impossible to mine. Since the coinbase transaction\n@@ -878,10 +872,8 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         unsigned int nSigOps = GetLegacySigOpCount(tx);\n         nSigOps += GetP2SHSigOpCount(tx, view);\n         if (nSigOps > MAX_STANDARD_TX_SIGOPS)\n-            return state.DoS(0,\n-                             error(\"AcceptToMemoryPool: too many sigops %s, %d > %d\",\n-                                   hash.ToString(), nSigOps, MAX_STANDARD_TX_SIGOPS),\n-                             REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\");\n+            return state.DoS(0, false, REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\", false,\n+                strprintf(\"%d > %d\", nSigOps, MAX_STANDARD_TX_SIGOPS));\n \n         CAmount nValueOut = tx.GetValueOut();\n         CAmount nFees = nValueIn-nValueOut;\n@@ -893,9 +885,8 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         // Don't accept it if it can't get into a block\n         CAmount txMinFee = GetMinRelayFee(tx, nSize, true);\n         if (fLimitFree && nFees < txMinFee)\n-            return state.DoS(0, error(\"AcceptToMemoryPool: not enough fees %s, %d < %d\",\n-                                      hash.ToString(), nFees, txMinFee),\n-                             REJECT_INSUFFICIENTFEE, \"insufficient fee\");\n+            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"insufficient fee\", false,\n+                strprintf(\"%d < %d\", nFees, txMinFee));\n \n         // Require that free transactions have sufficient priority to be mined in the next block.\n         if (GetBoolArg(\"-relaypriority\", true) && nFees < ::minRelayTxFee.GetFee(nSize) && !AllowFree(view.GetPriority(tx, chainActive.Height() + 1))) {\n@@ -920,24 +911,20 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             // -limitfreerelay unit is thousand-bytes-per-minute\n             // At default rate it would take over a month to fill 1GB\n             if (dFreeCount >= GetArg(\"-limitfreerelay\", 15)*10*1000)\n-                return state.DoS(0, error(\"AcceptToMemoryPool: free transaction rejected by rate limiter\"),\n-                                 REJECT_INSUFFICIENTFEE, \"rate limited free transaction\");\n+                return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"rate limited free transaction\");\n             LogPrint(\"mempool\", \"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n             dFreeCount += nSize;\n         }\n \n         if (fRejectAbsurdFee && nFees > ::minRelayTxFee.GetFee(nSize) * 10000)\n-            return state.Invalid(error(\"AcceptToMemoryPool: absurdly high fees %s, %d > %d\",\n-                                       hash.ToString(),\n-                                       nFees, ::minRelayTxFee.GetFee(nSize) * 10000),\n-                                 REJECT_HIGHFEE, \"absurdly-high-fee\");\n+            return state.Invalid(false,\n+                REJECT_HIGHFEE, \"absurdly-high-fee\",\n+                strprintf(\"%d > %d\", nFees, ::minRelayTxFee.GetFee(nSize) * 10000));\n \n         // Check against previous transactions\n         // This is done last to help prevent CPU exhaustion denial-of-service attacks.\n         if (!CheckInputs(tx, state, view, true, STANDARD_SCRIPT_VERIFY_FLAGS, true))\n-        {\n-            return error(\"AcceptToMemoryPool: ConnectInputs failed %s\", hash.ToString());\n-        }\n+            return false;\n \n         // Check again against just the consensus-critical mandatory script\n         // verification flags, in case of bugs in the standard flags that cause\n@@ -950,7 +937,8 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         // can be exploited as a DoS attack.\n         if (!CheckInputs(tx, state, view, true, MANDATORY_SCRIPT_VERIFY_FLAGS, true))\n         {\n-            return error(\"AcceptToMemoryPool: BUG! PLEASE REPORT THIS! ConnectInputs failed against MANDATORY but not STANDARD flags %s\", hash.ToString());\n+            return error(\"%s: BUG! PLEASE REPORT THIS! ConnectInputs failed against MANDATORY but not STANDARD flags %s, %s\",\n+                __func__, hash.ToString(), FormatStateMessage(state));\n         }\n \n         // Store transaction in memory\n@@ -1241,7 +1229,7 @@ void static InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state\n     if (state.IsInvalid(nDoS)) {\n         std::map<uint256, NodeId>::iterator it = mapBlockSource.find(pindex->GetBlockHash());\n         if (it != mapBlockSource.end() && State(it->second)) {\n-            assert(state.GetRejectCode() < 0x100);\n+            assert (state.GetRejectCode() < REJECT_INTERNAL); // Blocks are never rejected with internal reject codes\n             CBlockReject reject = {(unsigned char)state.GetRejectCode(), state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), pindex->GetBlockHash()};\n             State(it->second)->rejects.push_back(reject);\n             if (nDoS > 0)\n@@ -1292,7 +1280,7 @@ void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n bool CScriptCheck::operator()() {\n     const CScript &scriptSig = ptxTo->vin[nIn].scriptSig;\n     if (!VerifyScript(scriptSig, scriptPubKey, nFlags, CachingTransactionSignatureChecker(ptxTo, nIn, cacheStore), &error)) {\n-        return ::error(\"CScriptCheck(): %s:%d VerifySignature failed: %s\", ptxTo->GetHash().ToString(), nIn, ScriptErrorString(error));\n+        return false;\n     }\n     return true;\n }\n@@ -1310,7 +1298,7 @@ bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoins\n         // This doesn't trigger the DoS code on purpose; if it did, it would make it easier\n         // for an attacker to attempt to split the network.\n         if (!inputs.HaveInputs(tx))\n-            return state.Invalid(error(\"CheckInputs(): %s inputs unavailable\", tx.GetHash().ToString()));\n+            return state.Invalid(false, 0, \"\", \"Inputs unavailable\");\n \n         CAmount nValueIn = 0;\n         CAmount nFees = 0;\n@@ -1323,33 +1311,29 @@ bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoins\n             // If prev is coinbase, check that it's matured\n             if (coins->IsCoinBase()) {\n                 if (nSpendHeight - coins->nHeight < COINBASE_MATURITY)\n-                    return state.Invalid(\n-                        error(\"CheckInputs(): tried to spend coinbase at depth %d\", nSpendHeight - coins->nHeight),\n-                        REJECT_INVALID, \"bad-txns-premature-spend-of-coinbase\");\n+                    return state.Invalid(false,\n+                        REJECT_INVALID, \"bad-txns-premature-spend-of-coinbase\",\n+                        strprintf(\"tried to spend coinbase at depth %d\", nSpendHeight - coins->nHeight));\n             }\n \n             // Check for negative or overflow input values\n             nValueIn += coins->vout[prevout.n].nValue;\n             if (!MoneyRange(coins->vout[prevout.n].nValue) || !MoneyRange(nValueIn))\n-                return state.DoS(100, error(\"CheckInputs(): txin values out of range\"),\n-                                 REJECT_INVALID, \"bad-txns-inputvalues-outofrange\");\n+                return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputvalues-outofrange\");\n \n         }\n \n         if (nValueIn < tx.GetValueOut())\n-            return state.DoS(100, error(\"CheckInputs(): %s value in (%s) < value out (%s)\",\n-                                        tx.GetHash().ToString(), FormatMoney(nValueIn), FormatMoney(tx.GetValueOut())),\n-                             REJECT_INVALID, \"bad-txns-in-belowout\");\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-in-belowout\", false,\n+                strprintf(\"value in (%s) < value out (%s)\", FormatMoney(nValueIn), FormatMoney(tx.GetValueOut())));\n \n         // Tally transaction fees\n         CAmount nTxFee = nValueIn - tx.GetValueOut();\n         if (nTxFee < 0)\n-            return state.DoS(100, error(\"CheckInputs(): %s nTxFee < 0\", tx.GetHash().ToString()),\n-                             REJECT_INVALID, \"bad-txns-fee-negative\");\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-fee-negative\");\n         nFees += nTxFee;\n         if (!MoneyRange(nFees))\n-            return state.DoS(100, error(\"CheckInputs(): nFees out of range\"),\n-                             REJECT_INVALID, \"bad-txns-fee-outofrange\");\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-fee-outofrange\");\n     return true;\n }\n }// namespace Consensus\n@@ -1795,7 +1779,8 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n \n             std::vector<CScriptCheck> vChecks;\n             if (!CheckInputs(tx, state, view, fScriptChecks, flags, false, nScriptCheckThreads ? &vChecks : NULL))\n-                return false;\n+                return error(\"ConnectBlock(): CheckInputs on %s failed with %s\",\n+                    tx.GetHash().ToString(), FormatStateMessage(state));\n             control.Add(vChecks);\n         }\n \n@@ -2622,7 +2607,9 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n     // Check transactions\n     BOOST_FOREACH(const CTransaction& tx, block.vtx)\n         if (!CheckTransaction(tx, state))\n-            return error(\"CheckBlock(): CheckTransaction failed\");\n+            return error(\"CheckBlock(): CheckTransaction of %s failed with %s\",\n+                tx.GetHash().ToString(),\n+                FormatStateMessage(state));\n \n     unsigned int nSigOps = 0;\n     BOOST_FOREACH(const CTransaction& tx, block.vtx)\n@@ -4357,11 +4344,12 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         int nDoS = 0;\n         if (state.IsInvalid(nDoS))\n         {\n-            LogPrint(\"mempool\", \"%s from peer=%d %s was not accepted into the memory pool: %s\\n\", tx.GetHash().ToString(),\n+            LogPrint(\"mempoolrej\", \"%s from peer=%d %s was not accepted into the memory pool: %s\\n\", tx.GetHash().ToString(),\n                 pfrom->id, pfrom->cleanSubVer,\n-                state.GetRejectReason());\n-            pfrom->PushMessage(\"reject\", strCommand, state.GetRejectCode(),\n-                               state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), inv.hash);\n+                FormatStateMessage(state));\n+            if (state.GetRejectCode() < REJECT_INTERNAL) // Never send AcceptToMemoryPool's internal codes over P2P\n+                pfrom->PushMessage(\"reject\", strCommand, state.GetRejectCode(),\n+                                   state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), inv.hash);\n             if (nDoS > 0)\n                 Misbehaving(pfrom->GetId(), nDoS);\n         }\n@@ -4441,6 +4429,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         ProcessNewBlock(state, pfrom, &block, forceProcessing, NULL);\n         int nDoS;\n         if (state.IsInvalid(nDoS)) {\n+            assert (state.GetRejectCode() < REJECT_INTERNAL); // Blocks are never rejected with internal reject codes\n             pfrom->PushMessage(\"reject\", strCommand, state.GetRejectCode(),\n                                state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), inv.hash);\n             if (nDoS > 0) {"
      },
      {
        "sha": "e3479b4b3b552866d93c550d4ad628b6aaa6a6f5",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87f37e259d6deb52ee464edde7aece687eea97a5/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87f37e259d6deb52ee464edde7aece687eea97a5/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=87f37e259d6deb52ee464edde7aece687eea97a5",
        "patch": "@@ -455,7 +455,16 @@ extern CBlockTreeDB *pblocktree;\n  */\n int GetSpendHeight(const CCoinsViewCache& inputs);\n \n-/** local \"reject\" message codes for RPC which can not be triggered by p2p trasactions */\n+/** Reject codes greater or equal to this can be returned by AcceptToMemPool\n+ * for transactions, to signal internal conditions. They cannot and should not\n+ * be sent over the P2P network.\n+ */\n+static const unsigned int REJECT_INTERNAL = 0x100;\n+/** Too high fee. Can not be triggered by P2P transactions */\n static const unsigned int REJECT_HIGHFEE = 0x100;\n+/** Transaction is already known (either in mempool or blockchain) */\n+static const unsigned int REJECT_ALREADY_KNOWN = 0x101;\n+/** Transaction conflicts with a transaction already known */\n+static const unsigned int REJECT_CONFLICT = 0x102;\n \n #endif // BITCOIN_MAIN_H"
      }
    ]
  },
  {
    "sha": "45a6cce971a96ebec6cc5d72921adbdde5ae4f18",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NWE2Y2NlOTcxYTk2ZWJlYzZjYzVkNzI5MjFhZGJkZGU1YWU0ZjE4",
    "commit": {
      "author": {
        "name": "Casey Rodarmor",
        "email": "casey@rodarmor.com",
        "date": "2015-08-03T18:51:12Z"
      },
      "committer": {
        "name": "Casey Rodarmor",
        "email": "casey@rodarmor.com",
        "date": "2015-08-12T15:02:43Z"
      },
      "message": "Fix race condition on test node shutdown",
      "tree": {
        "sha": "4de84a2f588d7eba2c8758a39d654ee00dd7ebd9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4de84a2f588d7eba2c8758a39d654ee00dd7ebd9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/45a6cce971a96ebec6cc5d72921adbdde5ae4f18",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45a6cce971a96ebec6cc5d72921adbdde5ae4f18",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/45a6cce971a96ebec6cc5d72921adbdde5ae4f18",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45a6cce971a96ebec6cc5d72921adbdde5ae4f18/comments",
    "author": {
      "login": "casey",
      "id": 1945,
      "node_id": "MDQ6VXNlcjE5NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/casey",
      "html_url": "https://github.com/casey",
      "followers_url": "https://api.github.com/users/casey/followers",
      "following_url": "https://api.github.com/users/casey/following{/other_user}",
      "gists_url": "https://api.github.com/users/casey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/casey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/casey/subscriptions",
      "organizations_url": "https://api.github.com/users/casey/orgs",
      "repos_url": "https://api.github.com/users/casey/repos",
      "events_url": "https://api.github.com/users/casey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/casey/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "casey",
      "id": 1945,
      "node_id": "MDQ6VXNlcjE5NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/casey",
      "html_url": "https://github.com/casey",
      "followers_url": "https://api.github.com/users/casey/followers",
      "following_url": "https://api.github.com/users/casey/following{/other_user}",
      "gists_url": "https://api.github.com/users/casey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/casey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/casey/subscriptions",
      "organizations_url": "https://api.github.com/users/casey/orgs",
      "repos_url": "https://api.github.com/users/casey/repos",
      "events_url": "https://api.github.com/users/casey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/casey/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a2bf40dde7465292a29234c6d32d9df7e386617e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2bf40dde7465292a29234c6d32d9df7e386617e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a2bf40dde7465292a29234c6d32d9df7e386617e"
      }
    ],
    "stats": {
      "total": 94,
      "additions": 48,
      "deletions": 46
    },
    "files": [
      {
        "sha": "ffa9226a32f249c5bd0166503d3cc873c4d21698",
        "filename": "qa/rpc-tests/test_framework/comptool.py",
        "status": "modified",
        "additions": 48,
        "deletions": 46,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45a6cce971a96ebec6cc5d72921adbdde5ae4f18/qa/rpc-tests/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45a6cce971a96ebec6cc5d72921adbdde5ae4f18/qa/rpc-tests/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/comptool.py?ref=45a6cce971a96ebec6cc5d72921adbdde5ae4f18",
        "patch": "@@ -27,6 +27,20 @@\n \n global mininode_lock\n \n+def wait_until(predicate, attempts=float('inf'), timeout=float('inf')):\n+    attempt = 0\n+    elapsed = 0\n+\n+    while attempt < attempts and elapsed < timeout:\n+        with mininode_lock:\n+            if predicate():\n+                return True\n+        attempt += 1\n+        elapsed += 0.05\n+        time.sleep(0.05)\n+\n+    return False\n+\n class TestNode(NodeConnCB):\n \n     def __init__(self, block_store, tx_store):\n@@ -43,6 +57,10 @@ def __init__(self, block_store, tx_store):\n         # a response\n         self.pingMap = {} \n         self.lastInv = []\n+        self.closed = False\n+\n+    def on_close(self, conn):\n+        self.closed = True\n \n     def add_connection(self, conn):\n         self.conn = conn\n@@ -132,61 +150,48 @@ class TestManager(object):\n     def __init__(self, testgen, datadir):\n         self.test_generator = testgen\n         self.connections    = []\n+        self.test_nodes     = []\n         self.block_store    = BlockStore(datadir)\n         self.tx_store       = TxStore(datadir)\n         self.ping_counter   = 1\n \n     def add_all_connections(self, nodes):\n         for i in range(len(nodes)):\n             # Create a p2p connection to each node\n-            self.connections.append(NodeConn('127.0.0.1', p2p_port(i), \n-                        nodes[i], TestNode(self.block_store, self.tx_store)))\n+            test_node = TestNode(self.block_store, self.tx_store)\n+            self.test_nodes.append(test_node)\n+            self.connections.append(NodeConn('127.0.0.1', p2p_port(i), nodes[i], test_node))\n             # Make sure the TestNode (callback class) has a reference to its\n             # associated NodeConn\n-            self.connections[-1].cb.add_connection(self.connections[-1])\n+            test_node.add_connection(self.connections[-1])\n+\n+    def wait_for_disconnections(self):\n+        def disconnected():\n+            return all(node.closed for node in self.test_nodes)\n+        return wait_until(disconnected, timeout=10)\n \n     def wait_for_verack(self):\n-        sleep_time = 0.05\n-        max_tries = 10 / sleep_time  # Wait at most 10 seconds\n-        while max_tries > 0:\n-            done = True\n-            with mininode_lock:\n-                for c in self.connections:\n-                    if c.cb.verack_received is False:\n-                        done = False\n-                        break\n-            if done:\n-                break\n-            time.sleep(sleep_time)\n+        def veracked():\n+            return all(node.verack_received for node in self.test_nodes)\n+        return wait_until(veracked, timeout=10)\n \n     def wait_for_pings(self, counter):\n-        received_pongs = False\n-        while received_pongs is not True:\n-            time.sleep(0.05)\n-            received_pongs = True\n-            with mininode_lock:\n-                for c in self.connections:\n-                    if c.cb.received_ping_response(counter) is not True:\n-                        received_pongs = False\n-                        break\n+        def received_pongs():\n+            return all(node.received_ping_response(counter) for node in self.test_nodes)\n+        return wait_until(received_pongs)\n \n     # sync_blocks: Wait for all connections to request the blockhash given\n     # then send get_headers to find out the tip of each node, and synchronize\n     # the response by using a ping (and waiting for pong with same nonce).\n     def sync_blocks(self, blockhash, num_blocks):\n-        # Wait for nodes to request block (50ms sleep * 20 tries * num_blocks)\n-        max_tries = 20*num_blocks\n-        while max_tries > 0:\n-            with mininode_lock:\n-                results = [ blockhash in c.cb.block_request_map and\n-                            c.cb.block_request_map[blockhash] for c in self.connections ]\n-            if False not in results:\n-                break\n-            time.sleep(0.05)\n-            max_tries -= 1\n+        def blocks_requested():\n+            return all(\n+                blockhash in node.block_request_map and node.block_request_map[blockhash]\n+                for node in self.test_nodes\n+            )\n \n         # --> error if not requested\n-        if max_tries == 0:\n+        if not wait_until(blocks_requested, attempts=20*num_blocks):\n             # print [ c.cb.block_request_map for c in self.connections ]\n             raise AssertionError(\"Not all nodes requested block\")\n         # --> Answer request (we did this inline!)\n@@ -202,18 +207,14 @@ def sync_blocks(self, blockhash, num_blocks):\n     # Analogous to sync_block (see above)\n     def sync_transaction(self, txhash, num_events):\n         # Wait for nodes to request transaction (50ms sleep * 20 tries * num_events)\n-        max_tries = 20*num_events\n-        while max_tries > 0:\n-            with mininode_lock:\n-                results = [ txhash in c.cb.tx_request_map and\n-                            c.cb.tx_request_map[txhash] for c in self.connections ]\n-            if False not in results:\n-                break\n-            time.sleep(0.05)\n-            max_tries -= 1\n+        def transaction_requested():\n+            return all(\n+                txhash in node.tx_request_map and node.tx_request_map[txhash]\n+                for node in self.test_nodes\n+            )\n \n         # --> error if not requested\n-        if max_tries == 0:\n+        if not wait_until(transaction_requested, attempts=20*num_events):\n             # print [ c.cb.tx_request_map for c in self.connections ]\n             raise AssertionError(\"Not all nodes requested transaction\")\n         # --> Answer request (we did this inline!)\n@@ -336,6 +337,7 @@ def run(self):\n             print \"Test %d: PASS\" % test_number, [ c.rpc.getblockcount() for c in self.connections ]\n             test_number += 1\n \n+        [ c.disconnect_node() for c in self.connections ]\n+        self.wait_for_disconnections()\n         self.block_store.close()\n         self.tx_store.close()\n-        [ c.disconnect_node() for c in self.connections ]"
      }
    ]
  },
  {
    "sha": "243b80d29235b07f8a26fb51e2af3a949c8fc1fd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNDNiODBkMjkyMzViMDdmOGEyNmZiNTFlMmFmM2E5NDljOGZjMWZk",
    "commit": {
      "author": {
        "name": "Adam Weiss",
        "email": "adam@signal11.com",
        "date": "2015-08-12T23:32:20Z"
      },
      "committer": {
        "name": "Adam Weiss",
        "email": "adam@signal11.com",
        "date": "2015-08-12T23:40:09Z"
      },
      "message": "Handle leveldb::DestroyDB() errors on wipe failure\n\nAdd error checking to CLevelDBWrapper for errors from\nleveldb::DestroyDB().  Without it, if unlink() or DeleteFileW() fail to\ndelete files, they will fail silent.  If they fail to delete any files,\nCLevelDBWrapper will silently open and read the existing database.\n\nTypically any permissions issues would be caught by leveldb as it churns\nthrough many files as part of its compaction process, but it is\nconceivable that this could cause problems on Windows with anti-virus\nand indexing software.",
      "tree": {
        "sha": "b30c148ee1cd12a1b724704f3222afbd5a143d4b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b30c148ee1cd12a1b724704f3222afbd5a143d4b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/243b80d29235b07f8a26fb51e2af3a949c8fc1fd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/243b80d29235b07f8a26fb51e2af3a949c8fc1fd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/243b80d29235b07f8a26fb51e2af3a949c8fc1fd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/243b80d29235b07f8a26fb51e2af3a949c8fc1fd/comments",
    "author": {
      "login": "ajweiss",
      "id": 430315,
      "node_id": "MDQ6VXNlcjQzMDMxNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/430315?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajweiss",
      "html_url": "https://github.com/ajweiss",
      "followers_url": "https://api.github.com/users/ajweiss/followers",
      "following_url": "https://api.github.com/users/ajweiss/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajweiss/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajweiss/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajweiss/subscriptions",
      "organizations_url": "https://api.github.com/users/ajweiss/orgs",
      "repos_url": "https://api.github.com/users/ajweiss/repos",
      "events_url": "https://api.github.com/users/ajweiss/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajweiss/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajweiss",
      "id": 430315,
      "node_id": "MDQ6VXNlcjQzMDMxNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/430315?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajweiss",
      "html_url": "https://github.com/ajweiss",
      "followers_url": "https://api.github.com/users/ajweiss/followers",
      "following_url": "https://api.github.com/users/ajweiss/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajweiss/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajweiss/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajweiss/subscriptions",
      "organizations_url": "https://api.github.com/users/ajweiss/orgs",
      "repos_url": "https://api.github.com/users/ajweiss/repos",
      "events_url": "https://api.github.com/users/ajweiss/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajweiss/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "87f37e259d6deb52ee464edde7aece687eea97a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87f37e259d6deb52ee464edde7aece687eea97a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/87f37e259d6deb52ee464edde7aece687eea97a5"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "26cacf95ae91909642f2babf208d8fc468d5d11b",
        "filename": "src/leveldbwrapper.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/243b80d29235b07f8a26fb51e2af3a949c8fc1fd/src/leveldbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/243b80d29235b07f8a26fb51e2af3a949c8fc1fd/src/leveldbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldbwrapper.cpp?ref=243b80d29235b07f8a26fb51e2af3a949c8fc1fd",
        "patch": "@@ -58,7 +58,8 @@ CLevelDBWrapper::CLevelDBWrapper(const boost::filesystem::path& path, size_t nCa\n     } else {\n         if (fWipe) {\n             LogPrintf(\"Wiping LevelDB in %s\\n\", path.string());\n-            leveldb::DestroyDB(path.string(), options);\n+            leveldb::Status result = leveldb::DestroyDB(path.string(), options);\n+            HandleError(result);\n         }\n         TryCreateDirectory(path);\n         LogPrintf(\"Opening LevelDB in %s\\n\", path.string());"
      }
    ]
  },
  {
    "sha": "183b8fbeb085fd07b2e231b2ba4ad8c93f9dee9d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxODNiOGZiZWIwODVmZDA3YjJlMjMxYjJiYTRhZDhjOTNmOWRlZTlk",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2015-08-13T13:09:01Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2015-08-13T14:54:55Z"
      },
      "message": "Add missing files to files.md\n\ntypo",
      "tree": {
        "sha": "7c7e918f59b4d5dbc7cecd22958d22779b153f0f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7c7e918f59b4d5dbc7cecd22958d22779b153f0f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/183b8fbeb085fd07b2e231b2ba4ad8c93f9dee9d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/183b8fbeb085fd07b2e231b2ba4ad8c93f9dee9d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/183b8fbeb085fd07b2e231b2ba4ad8c93f9dee9d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/183b8fbeb085fd07b2e231b2ba4ad8c93f9dee9d/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "87f37e259d6deb52ee464edde7aece687eea97a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87f37e259d6deb52ee464edde7aece687eea97a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/87f37e259d6deb52ee464edde7aece687eea97a5"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 9,
      "deletions": 4
    },
    "files": [
      {
        "sha": "c083bcb038c941d18244fbeca3f07e1cedb28b83",
        "filename": "doc/files.md",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/183b8fbeb085fd07b2e231b2ba4ad8c93f9dee9d/doc/files.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/183b8fbeb085fd07b2e231b2ba4ad8c93f9dee9d/doc/files.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/files.md?ref=183b8fbeb085fd07b2e231b2ba4ad8c93f9dee9d",
        "patch": "@@ -1,12 +1,17 @@\n-Used in 0.8.0\n----------------------\n-* wallet.dat: personal wallet (BDB) with keys and transactions\n-* peers.dat: peer IP address database (custom format); since 0.7.0\n+\n+* banlist.dat: stores the IPs/Subnets of banned nodes\n+* bitcoin.conf: contains configuration settings for bitcoind or bitcoin-qt\n+* bitcoind.pid: stores the process id of bitcoind while running\n * blocks/blk000??.dat: block data (custom, 128 MiB per file); since 0.8.0\n * blocks/rev000??.dat; block undo data (custom); since 0.8.0 (format changed since pre-0.8)\n * blocks/index/*; block index (LevelDB); since 0.8.0\n * chainstate/*; block chain state database (LevelDB); since 0.8.0\n * database/*: BDB database environment; only used for wallet since 0.8.0\n+* db.log: wallet database log file\n+* debug.log: contains debug information and general logging generated by bitcoind or bitcoin-qt\n+* fee_estimates.dat: stores statistics used to estimate minimum transaction fees and priorities required for confirmation; since 0.10.0\n+* peers.dat: peer IP address database (custom format); since 0.7.0\n+* wallet.dat: personal wallet (BDB) with keys and transactions\n \n Only used in pre-0.8.0\n ---------------------"
      }
    ]
  },
  {
    "sha": "70180b2e576ebcb675c905ef4bd9d5b4fd378b6c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MDE4MGIyZTU3NmViY2I2NzVjOTA1ZWY0YmQ5ZDViNGZkMzc4YjZj",
    "commit": {
      "author": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2015-08-06T17:38:19Z"
      },
      "committer": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2015-08-14T05:01:03Z"
      },
      "message": "Implement REST mempool API, add test and documentation.",
      "tree": {
        "sha": "d4c055ad001d5d127f7b7bd6b19a5c920682e5c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d4c055ad001d5d127f7b7bd6b19a5c920682e5c8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/70180b2e576ebcb675c905ef4bd9d5b4fd378b6c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70180b2e576ebcb675c905ef4bd9d5b4fd378b6c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/70180b2e576ebcb675c905ef4bd9d5b4fd378b6c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70180b2e576ebcb675c905ef4bd9d5b4fd378b6c/comments",
    "author": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a4fe57da6207c1e5691a1e843d22db571f3f0186",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4fe57da6207c1e5691a1e843d22db571f3f0186",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a4fe57da6207c1e5691a1e843d22db571f3f0186"
      }
    ],
    "stats": {
      "total": 180,
      "additions": 136,
      "deletions": 44
    },
    "files": [
      {
        "sha": "bf669235e38a2c97a8cce1de70f32c7baf89ba91",
        "filename": "doc/REST-interface.md",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70180b2e576ebcb675c905ef4bd9d5b4fd378b6c/doc/REST-interface.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70180b2e576ebcb675c905ef4bd9d5b4fd378b6c/doc/REST-interface.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/REST-interface.md?ref=70180b2e576ebcb675c905ef4bd9d5b4fd378b6c",
        "patch": "@@ -77,6 +77,20 @@ $ curl localhost:18332/rest/getutxos/checkmempool/b2cdfd7b89def827ff8af7cd9bff76\n }\n ```\n \n+####Memory pool\n+`GET /rest/mempool/info.json`\n+\n+Returns various information about the TX mempool.\n+Only supports JSON as output format.\n+* size : (numeric) the number of transactions in the TX mempool\n+* bytes : (numeric) size of the TX mempool in bytes\n+* usage : (numeric) total TX mempool memory usage\n+\n+`GET /rest/mempool/contents.json`\n+\n+Returns transactions in the TX mempool.\n+Only supports JSON as output format.\n+\n Risks\n -------------\n Running a web browser on the same node with a REST enabled bitcoind can be a risk. Accessing prepared XSS websites could read out tx/block data of your node by placing links like `<script src=\"http://127.0.0.1:8332/rest/tx/1234567890.json\">` which might break the nodes privacy."
      },
      {
        "sha": "2da521950779779ddd83304d12f9c998c7e5806b",
        "filename": "qa/rpc-tests/rest.py",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70180b2e576ebcb675c905ef4bd9d5b4fd378b6c/qa/rpc-tests/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70180b2e576ebcb675c905ef4bd9d5b4fd378b6c/qa/rpc-tests/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rest.py?ref=70180b2e576ebcb675c905ef4bd9d5b4fd378b6c",
        "patch": "@@ -292,6 +292,19 @@ def run_test(self):\n         txs.append(self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 11))\n         self.sync_all()\n \n+        # check that there are exactly 3 transactions in the TX memory pool before generating the block\n+        json_string = http_get_call(url.hostname, url.port, '/rest/mempool/info'+self.FORMAT_SEPARATOR+'json')\n+        json_obj = json.loads(json_string)\n+        assert_equal(json_obj['size'], 3)\n+        # the size of the memory pool should be greater than 3x ~100 bytes\n+        assert_greater_than(json_obj['bytes'], 300)\n+\n+        # check that there are our submitted transactions in the TX memory pool\n+        json_string = http_get_call(url.hostname, url.port, '/rest/mempool/contents'+self.FORMAT_SEPARATOR+'json')\n+        json_obj = json.loads(json_string)\n+        for tx in txs:\n+            assert_equal(tx in json_obj, True)\n+\n         # now mine the transactions\n         newblockhash = self.nodes[1].generate(1)\n         self.sync_all()"
      },
      {
        "sha": "74d27e73bbd9aa9d12156d38c9e49151f381d64c",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 56,
        "deletions": 0,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70180b2e576ebcb675c905ef4bd9d5b4fd378b6c/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70180b2e576ebcb675c905ef4bd9d5b4fd378b6c/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=70180b2e576ebcb675c905ef4bd9d5b4fd378b6c",
        "patch": "@@ -65,6 +65,8 @@ class RestErr\n \n extern void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry);\n extern UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool txDetails = false);\n+extern UniValue mempoolInfoToJSON();\n+extern UniValue mempoolToJSON(bool fVerbose = false);\n extern void ScriptPubKeyToJSON(const CScript& scriptPubKey, UniValue& out, bool fIncludeHex);\n extern UniValue blockheaderToJSON(const CBlockIndex* blockindex);\n \n@@ -293,6 +295,58 @@ static bool rest_chaininfo(AcceptedConnection* conn,\n     return true; // continue to process further HTTP reqs on this cxn\n }\n \n+static bool rest_mempool_info(AcceptedConnection* conn,\n+                              const std::string& strURIPart,\n+                              const std::string& strRequest,\n+                              const std::map<std::string, std::string>& mapHeaders,\n+                              bool fRun)\n+{\n+    vector<string> params;\n+    const RetFormat rf = ParseDataFormat(params, strURIPart);\n+\n+    switch (rf) {\n+    case RF_JSON: {\n+        UniValue mempoolInfoObject = mempoolInfoToJSON();\n+\n+        string strJSON = mempoolInfoObject.write() + \"\\n\";\n+        conn->stream() << HTTPReply(HTTP_OK, strJSON, fRun) << std::flush;\n+        return true;\n+    }\n+    default: {\n+        throw RESTERR(HTTP_NOT_FOUND, \"output format not found (available: json)\");\n+    }\n+    }\n+\n+    // not reached\n+    return true; // continue to process further HTTP reqs on this cxn\n+}\n+\n+static bool rest_mempool_contents(AcceptedConnection* conn,\n+                                  const std::string& strURIPart,\n+                                  const std::string& strRequest,\n+                                  const std::map<std::string, std::string>& mapHeaders,\n+                                  bool fRun)\n+{\n+    vector<string> params;\n+    const RetFormat rf = ParseDataFormat(params, strURIPart);\n+\n+    switch (rf) {\n+    case RF_JSON: {\n+        UniValue mempoolObject = mempoolToJSON(true);\n+\n+        string strJSON = mempoolObject.write() + \"\\n\";\n+        conn->stream() << HTTPReply(HTTP_OK, strJSON, fRun) << std::flush;\n+        return true;\n+    }\n+    default: {\n+        throw RESTERR(HTTP_NOT_FOUND, \"output format not found (available: json)\");\n+    }\n+    }\n+\n+    // not reached\n+    return true; // continue to process further HTTP reqs on this cxn\n+}\n+\n static bool rest_tx(AcceptedConnection* conn,\n                     const std::string& strURIPart,\n                     const std::string& strRequest,\n@@ -553,6 +607,8 @@ static const struct {\n       {\"/rest/block/notxdetails/\", rest_block_notxdetails},\n       {\"/rest/block/\", rest_block_extended},\n       {\"/rest/chaininfo\", rest_chaininfo},\n+      {\"/rest/mempool/info\", rest_mempool_info},\n+      {\"/rest/mempool/contents\", rest_mempool_contents},\n       {\"/rest/headers/\", rest_headers},\n       {\"/rest/getutxos\", rest_getutxos},\n };"
      },
      {
        "sha": "e6751de96bae527391a963a6c76d06eee924cb0c",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 53,
        "deletions": 44,
        "changes": 97,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70180b2e576ebcb675c905ef4bd9d5b4fd378b6c/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70180b2e576ebcb675c905ef4bd9d5b4fd378b6c/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=70180b2e576ebcb675c905ef4bd9d5b4fd378b6c",
        "patch": "@@ -175,45 +175,8 @@ UniValue getdifficulty(const UniValue& params, bool fHelp)\n     return GetDifficulty();\n }\n \n-\n-UniValue getrawmempool(const UniValue& params, bool fHelp)\n+UniValue mempoolToJSON(bool fVerbose = false)\n {\n-    if (fHelp || params.size() > 1)\n-        throw runtime_error(\n-            \"getrawmempool ( verbose )\\n\"\n-            \"\\nReturns all transaction ids in memory pool as a json array of string transaction ids.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. verbose           (boolean, optional, default=false) true for a json object, false for array of transaction ids\\n\"\n-            \"\\nResult: (for verbose = false):\\n\"\n-            \"[                     (json array of string)\\n\"\n-            \"  \\\"transactionid\\\"     (string) The transaction id\\n\"\n-            \"  ,...\\n\"\n-            \"]\\n\"\n-            \"\\nResult: (for verbose = true):\\n\"\n-            \"{                           (json object)\\n\"\n-            \"  \\\"transactionid\\\" : {       (json object)\\n\"\n-            \"    \\\"size\\\" : n,             (numeric) transaction size in bytes\\n\"\n-            \"    \\\"fee\\\" : n,              (numeric) transaction fee in \" + CURRENCY_UNIT + \"\\n\"\n-            \"    \\\"time\\\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT\\n\"\n-            \"    \\\"height\\\" : n,           (numeric) block height when transaction entered pool\\n\"\n-            \"    \\\"startingpriority\\\" : n, (numeric) priority when transaction entered pool\\n\"\n-            \"    \\\"currentpriority\\\" : n,  (numeric) transaction priority now\\n\"\n-            \"    \\\"depends\\\" : [           (array) unconfirmed transactions used as inputs for this transaction\\n\"\n-            \"        \\\"transactionid\\\",    (string) parent transaction id\\n\"\n-            \"       ... ]\\n\"\n-            \"  }, ...\\n\"\n-            \"}\\n\"\n-            \"\\nExamples\\n\"\n-            + HelpExampleCli(\"getrawmempool\", \"true\")\n-            + HelpExampleRpc(\"getrawmempool\", \"true\")\n-        );\n-\n-    LOCK(cs_main);\n-\n-    bool fVerbose = false;\n-    if (params.size() > 0)\n-        fVerbose = params[0].get_bool();\n-\n     if (fVerbose)\n     {\n         LOCK(mempool.cs);\n@@ -261,6 +224,47 @@ UniValue getrawmempool(const UniValue& params, bool fHelp)\n     }\n }\n \n+UniValue getrawmempool(const UniValue& params, bool fHelp)\n+{\n+    if (fHelp || params.size() > 1)\n+        throw runtime_error(\n+            \"getrawmempool ( verbose )\\n\"\n+            \"\\nReturns all transaction ids in memory pool as a json array of string transaction ids.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. verbose           (boolean, optional, default=false) true for a json object, false for array of transaction ids\\n\"\n+            \"\\nResult: (for verbose = false):\\n\"\n+            \"[                     (json array of string)\\n\"\n+            \"  \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"  ,...\\n\"\n+            \"]\\n\"\n+            \"\\nResult: (for verbose = true):\\n\"\n+            \"{                           (json object)\\n\"\n+            \"  \\\"transactionid\\\" : {       (json object)\\n\"\n+            \"    \\\"size\\\" : n,             (numeric) transaction size in bytes\\n\"\n+            \"    \\\"fee\\\" : n,              (numeric) transaction fee in \" + CURRENCY_UNIT + \"\\n\"\n+            \"    \\\"time\\\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT\\n\"\n+            \"    \\\"height\\\" : n,           (numeric) block height when transaction entered pool\\n\"\n+            \"    \\\"startingpriority\\\" : n, (numeric) priority when transaction entered pool\\n\"\n+            \"    \\\"currentpriority\\\" : n,  (numeric) transaction priority now\\n\"\n+            \"    \\\"depends\\\" : [           (array) unconfirmed transactions used as inputs for this transaction\\n\"\n+            \"        \\\"transactionid\\\",    (string) parent transaction id\\n\"\n+            \"       ... ]\\n\"\n+            \"  }, ...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples\\n\"\n+            + HelpExampleCli(\"getrawmempool\", \"true\")\n+            + HelpExampleRpc(\"getrawmempool\", \"true\")\n+        );\n+\n+    LOCK(cs_main);\n+\n+    bool fVerbose = false;\n+    if (params.size() > 0)\n+        fVerbose = params[0].get_bool();\n+\n+    return mempoolToJSON(fVerbose);\n+}\n+\n UniValue getblockhash(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n@@ -757,6 +761,16 @@ UniValue getchaintips(const UniValue& params, bool fHelp)\n     return res;\n }\n \n+UniValue mempoolInfoToJSON()\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    ret.push_back(Pair(\"size\", (int64_t) mempool.size()));\n+    ret.push_back(Pair(\"bytes\", (int64_t) mempool.GetTotalTxSize()));\n+    ret.push_back(Pair(\"usage\", (int64_t) mempool.DynamicMemoryUsage()));\n+\n+    return ret;\n+}\n+\n UniValue getmempoolinfo(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n@@ -774,12 +788,7 @@ UniValue getmempoolinfo(const UniValue& params, bool fHelp)\n             + HelpExampleRpc(\"getmempoolinfo\", \"\")\n         );\n \n-    UniValue ret(UniValue::VOBJ);\n-    ret.push_back(Pair(\"size\", (int64_t) mempool.size()));\n-    ret.push_back(Pair(\"bytes\", (int64_t) mempool.GetTotalTxSize()));\n-    ret.push_back(Pair(\"usage\", (int64_t) mempool.DynamicMemoryUsage()));\n-\n-    return ret;\n+    return mempoolInfoToJSON();\n }\n \n UniValue invalidateblock(const UniValue& params, bool fHelp)"
      }
    ]
  },
  {
    "sha": "ddd8d80c63182aefea56abf743bb9199d9602544",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZGQ4ZDgwYzYzMTgyYWVmZWE1NmFiZjc0M2JiOTE5OWQ5NjAyNTQ0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-14T10:04:47Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-14T14:28:37Z"
      },
      "message": "Merge pull request #6415\n\nd042854 SQUASH \"Implement watchonly support in fundrawtransaction\" (Matt Corallo)\n428a898 SQUASH \"Add have-pubkey distinction to ISMINE flags\" (Matt Corallo)\n6bdb474 Implement watchonly support in fundrawtransaction (Matt Corallo)\nf5813bd Add logic to track pubkeys as watch-only, not just scripts (Matt Corallo)\nd3354c5 Add have-pubkey distinction to ISMINE flags (Matt Corallo)\n5c17059 Update importaddress help to push its use to script-only (Matt Corallo)\na1d7df3 Add importpubkey method to import a watch-only pubkey (Matt Corallo)\n907a425 Add p2sh option to importaddress to import redeemScripts (Matt Corallo)\n983d2d9 Split up importaddress into helper functions (Matt Corallo)\ncfc3dd3 Also remove pay-2-pubkey from watch when adding a priv key (Matt Corallo)",
      "tree": {
        "sha": "4cb40e3bc509c433388bf8c58dee9e3f6b86c046",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4cb40e3bc509c433388bf8c58dee9e3f6b86c046"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ddd8d80c63182aefea56abf743bb9199d9602544",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJVzfsVAAoJEHSBCwEjRsmmdvAIAL0EXM6JPDVSczY3pZMOVm1Y\ntsHc4vnMFaYt+1goWLPR8SxXVKX5xT5TPK430OIDsggmh0sxyAdBMRnYrHupywDm\n9QjF+RHyqd5MuSMTSoczQCDGBTfCJalyz9cugZYa0tp9MfdiMfHW3Drc59ECSQop\nlkiPwNkv1Hu9lCMClmFlPvwp+bP2MhzknbR87sDGlp1ezvBiQd23x2Yl7cRtBIGd\nqbOby3BCYjVC+8lOkGi0qqOxpYrFDtrtRUAnakA7pWwCtzk7cmd/ak+xCXtutUhB\nBK7r/8iBg42WMl4DqQ5OnG8qXt/n1Qn6tnbYq2GJYsPeG1UBQlkd7rIEuvQqZUU=\n=Utn9\n-----END PGP SIGNATURE-----",
        "payload": "tree 4cb40e3bc509c433388bf8c58dee9e3f6b86c046\nparent 87f37e259d6deb52ee464edde7aece687eea97a5\nparent d04285430d1b54b3ce3d50ffa67b6098157e7c14\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1439546687 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1439562517 +0200\n\nMerge pull request #6415\n\nd042854 SQUASH \"Implement watchonly support in fundrawtransaction\" (Matt Corallo)\n428a898 SQUASH \"Add have-pubkey distinction to ISMINE flags\" (Matt Corallo)\n6bdb474 Implement watchonly support in fundrawtransaction (Matt Corallo)\nf5813bd Add logic to track pubkeys as watch-only, not just scripts (Matt Corallo)\nd3354c5 Add have-pubkey distinction to ISMINE flags (Matt Corallo)\n5c17059 Update importaddress help to push its use to script-only (Matt Corallo)\na1d7df3 Add importpubkey method to import a watch-only pubkey (Matt Corallo)\n907a425 Add p2sh option to importaddress to import redeemScripts (Matt Corallo)\n983d2d9 Split up importaddress into helper functions (Matt Corallo)\ncfc3dd3 Also remove pay-2-pubkey from watch when adding a priv key (Matt Corallo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddd8d80c63182aefea56abf743bb9199d9602544",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ddd8d80c63182aefea56abf743bb9199d9602544",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddd8d80c63182aefea56abf743bb9199d9602544/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "87f37e259d6deb52ee464edde7aece687eea97a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87f37e259d6deb52ee464edde7aece687eea97a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/87f37e259d6deb52ee464edde7aece687eea97a5"
      },
      {
        "sha": "d04285430d1b54b3ce3d50ffa67b6098157e7c14",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d04285430d1b54b3ce3d50ffa67b6098157e7c14",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d04285430d1b54b3ce3d50ffa67b6098157e7c14"
      }
    ],
    "stats": {
      "total": 335,
      "additions": 272,
      "deletions": 63
    },
    "files": [
      {
        "sha": "fc2978921862f627a507e21e557ee73f5cc9eee3",
        "filename": "qa/rpc-tests/fundrawtransaction.py",
        "status": "modified",
        "additions": 55,
        "deletions": 4,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd8d80c63182aefea56abf743bb9199d9602544/qa/rpc-tests/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd8d80c63182aefea56abf743bb9199d9602544/qa/rpc-tests/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fundrawtransaction.py?ref=ddd8d80c63182aefea56abf743bb9199d9602544",
        "patch": "@@ -13,14 +13,15 @@ class RawTransactionsTest(BitcoinTestFramework):\n \n     def setup_chain(self):\n         print(\"Initializing test directory \"+self.options.tmpdir)\n-        initialize_chain_clean(self.options.tmpdir, 3)\n+        initialize_chain_clean(self.options.tmpdir, 4)\n \n     def setup_network(self, split=False):\n-        self.nodes = start_nodes(3, self.options.tmpdir)\n+        self.nodes = start_nodes(4, self.options.tmpdir)\n \n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n+        connect_nodes_bi(self.nodes,0,3)\n \n         self.is_network_split=False\n         self.sync_all()\n@@ -31,11 +32,20 @@ def run_test(self):\n \n         self.nodes[2].generate(1)\n         self.sync_all()\n-        self.nodes[0].generate(101)\n+        self.nodes[0].generate(121)\n         self.sync_all()\n+\n+        watchonly_address = self.nodes[0].getnewaddress()\n+        watchonly_pubkey = self.nodes[0].validateaddress(watchonly_address)[\"pubkey\"]\n+        watchonly_amount = 200\n+        self.nodes[3].importpubkey(watchonly_pubkey, \"\", True)\n+        watchonly_txid = self.nodes[0].sendtoaddress(watchonly_address, watchonly_amount)\n+        self.nodes[0].sendtoaddress(self.nodes[3].getnewaddress(), watchonly_amount / 10);\n+\n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5);\n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0);\n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0);\n+\n         self.sync_all()\n         self.nodes[0].generate(1)\n         self.sync_all()\n@@ -428,11 +438,12 @@ def run_test(self):\n         stop_nodes(self.nodes)\n         wait_bitcoinds()\n \n-        self.nodes = start_nodes(3, self.options.tmpdir)\n+        self.nodes = start_nodes(4, self.options.tmpdir)\n \n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n+        connect_nodes_bi(self.nodes,0,3)\n         self.is_network_split=False\n         self.sync_all()\n \n@@ -541,5 +552,45 @@ def run_test(self):\n         assert_equal(len(dec_tx['vout']), 2) # one change output added\n \n \n+        ##################################################\n+        # test a fundrawtransaction using only watchonly #\n+        ##################################################\n+\n+        inputs = []\n+        outputs = {self.nodes[2].getnewaddress() : watchonly_amount / 2}\n+        rawtx = self.nodes[3].createrawtransaction(inputs, outputs)\n+\n+        result = self.nodes[3].fundrawtransaction(rawtx, True)\n+        res_dec = self.nodes[0].decoderawtransaction(result[\"hex\"])\n+        assert_equal(len(res_dec[\"vin\"]), 1)\n+        assert_equal(res_dec[\"vin\"][0][\"txid\"], watchonly_txid)\n+\n+        assert_equal(\"fee\" in result.keys(), True)\n+        assert_greater_than(result[\"changepos\"], -1)\n+\n+        ###############################################################\n+        # test fundrawtransaction using the entirety of watched funds #\n+        ###############################################################\n+\n+        inputs = []\n+        outputs = {self.nodes[2].getnewaddress() : watchonly_amount}\n+        rawtx = self.nodes[3].createrawtransaction(inputs, outputs)\n+\n+        result = self.nodes[3].fundrawtransaction(rawtx, True)\n+        res_dec = self.nodes[0].decoderawtransaction(result[\"hex\"])\n+        assert_equal(len(res_dec[\"vin\"]), 2)\n+        assert(res_dec[\"vin\"][0][\"txid\"] == watchonly_txid or res_dec[\"vin\"][1][\"txid\"] == watchonly_txid)\n+\n+        assert_greater_than(result[\"fee\"], 0)\n+        assert_greater_than(result[\"changepos\"], -1)\n+        assert_equal(result[\"fee\"] + res_dec[\"vout\"][result[\"changepos\"]][\"value\"], watchonly_amount / 10)\n+\n+        signedtx = self.nodes[3].signrawtransaction(result[\"hex\"])\n+        assert(not signedtx[\"complete\"])\n+        signedtx = self.nodes[0].signrawtransaction(signedtx[\"hex\"])\n+        assert(signedtx[\"complete\"])\n+        self.nodes[0].sendrawtransaction(signedtx[\"hex\"])\n+\n+\n if __name__ == '__main__':\n     RawTransactionsTest().main()"
      },
      {
        "sha": "b30a6bc9d1c6debfb92c8bf8ed65b76a05538ecc",
        "filename": "qa/rpc-tests/listtransactions.py",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd8d80c63182aefea56abf743bb9199d9602544/qa/rpc-tests/listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd8d80c63182aefea56abf743bb9199d9602544/qa/rpc-tests/listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/listtransactions.py?ref=ddd8d80c63182aefea56abf743bb9199d9602544",
        "patch": "@@ -93,6 +93,16 @@ def run_test(self):\n                            {\"category\":\"receive\",\"amount\":Decimal(\"0.44\")},\n                            {\"txid\":txid, \"account\" : \"toself\"} )\n \n+        multisig = self.nodes[1].createmultisig(1, [self.nodes[1].getnewaddress()])\n+        self.nodes[0].importaddress(multisig[\"redeemScript\"], \"watchonly\", False, True)\n+        txid = self.nodes[1].sendtoaddress(multisig[\"address\"], 0.1)\n+        self.nodes[1].generate(1)\n+        self.sync_all()\n+        assert(len(self.nodes[0].listtransactions(\"watchonly\", 100, 0, False)) == 0)\n+        check_array_result(self.nodes[0].listtransactions(\"watchonly\", 100, 0, True),\n+                           {\"category\":\"receive\",\"amount\":Decimal(\"0.1\")},\n+                           {\"txid\":txid, \"account\" : \"watchonly\"} )\n+\n if __name__ == '__main__':\n     ListTransactionsTest().main()\n "
      },
      {
        "sha": "bc965f9e19dfa0a509801bab11bf632a210809b6",
        "filename": "src/coincontrol.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd8d80c63182aefea56abf743bb9199d9602544/src/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd8d80c63182aefea56abf743bb9199d9602544/src/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coincontrol.h?ref=ddd8d80c63182aefea56abf743bb9199d9602544",
        "patch": "@@ -14,6 +14,8 @@ class CCoinControl\n     CTxDestination destChange;\n     //! If false, allows unselected inputs, but requires all selected inputs be used\n     bool fAllowOtherInputs;\n+    //! Includes watch only addresses which match the ISMINE_WATCH_SOLVABLE criteria\n+    bool fAllowWatchOnly;\n \n     CCoinControl()\n     {\n@@ -24,6 +26,7 @@ class CCoinControl\n     {\n         destChange = CNoDestination();\n         fAllowOtherInputs = false;\n+        fAllowWatchOnly = false;\n         setSelected.clear();\n     }\n "
      },
      {
        "sha": "cf49ba83ade40e9c77e454dff13aa2ee39afb167",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 6,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd8d80c63182aefea56abf743bb9199d9602544/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd8d80c63182aefea56abf743bb9199d9602544/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=ddd8d80c63182aefea56abf743bb9199d9602544",
        "patch": "@@ -6,23 +6,30 @@\n #include \"keystore.h\"\n \n #include \"key.h\"\n+#include \"pubkey.h\"\n #include \"util.h\"\n \n #include <boost/foreach.hpp>\n \n-bool CKeyStore::GetPubKey(const CKeyID &address, CPubKey &vchPubKeyOut) const\n+bool CKeyStore::AddKey(const CKey &key) {\n+    return AddKeyPubKey(key, key.GetPubKey());\n+}\n+\n+bool CBasicKeyStore::GetPubKey(const CKeyID &address, CPubKey &vchPubKeyOut) const\n {\n     CKey key;\n-    if (!GetKey(address, key))\n+    if (!GetKey(address, key)) {\n+        WatchKeyMap::const_iterator it = mapWatchKeys.find(address);\n+        if (it != mapWatchKeys.end()) {\n+            vchPubKeyOut = it->second;\n+            return true;\n+        }\n         return false;\n+    }\n     vchPubKeyOut = key.GetPubKey();\n     return true;\n }\n \n-bool CKeyStore::AddKey(const CKey &key) {\n-    return AddKeyPubKey(key, key.GetPubKey());\n-}\n-\n bool CBasicKeyStore::AddKeyPubKey(const CKey& key, const CPubKey &pubkey)\n {\n     LOCK(cs_KeyStore);\n@@ -58,17 +65,39 @@ bool CBasicKeyStore::GetCScript(const CScriptID &hash, CScript& redeemScriptOut)\n     return false;\n }\n \n+static bool ExtractPubKey(const CScript &dest, CPubKey& pubKeyOut)\n+{\n+    //TODO: Use Solver to extract this?\n+    CScript::const_iterator pc = dest.begin();\n+    opcodetype opcode;\n+    std::vector<unsigned char> vch;\n+    if (!dest.GetOp(pc, opcode, vch) || vch.size() < 33 || vch.size() > 65)\n+        return false;\n+    pubKeyOut = CPubKey(vch);\n+    if (!pubKeyOut.IsFullyValid())\n+        return false;\n+    if (!dest.GetOp(pc, opcode, vch) || opcode != OP_CHECKSIG || dest.GetOp(pc, opcode, vch))\n+        return false;\n+    return true;\n+}\n+\n bool CBasicKeyStore::AddWatchOnly(const CScript &dest)\n {\n     LOCK(cs_KeyStore);\n     setWatchOnly.insert(dest);\n+    CPubKey pubKey;\n+    if (ExtractPubKey(dest, pubKey))\n+        mapWatchKeys[pubKey.GetID()] = pubKey;\n     return true;\n }\n \n bool CBasicKeyStore::RemoveWatchOnly(const CScript &dest)\n {\n     LOCK(cs_KeyStore);\n     setWatchOnly.erase(dest);\n+    CPubKey pubKey;\n+    if (ExtractPubKey(dest, pubKey))\n+        mapWatchKeys.erase(pubKey.GetID());\n     return true;\n }\n "
      },
      {
        "sha": "b917bf20b4c1d4bce2e8ca9cab2afa729ae4ff2e",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd8d80c63182aefea56abf743bb9199d9602544/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd8d80c63182aefea56abf743bb9199d9602544/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=ddd8d80c63182aefea56abf743bb9199d9602544",
        "patch": "@@ -32,7 +32,7 @@ class CKeyStore\n     virtual bool HaveKey(const CKeyID &address) const =0;\n     virtual bool GetKey(const CKeyID &address, CKey& keyOut) const =0;\n     virtual void GetKeys(std::set<CKeyID> &setAddress) const =0;\n-    virtual bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const;\n+    virtual bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const =0;\n \n     //! Support for BIP 0013 : see https://github.com/bitcoin/bips/blob/master/bip-0013.mediawiki\n     virtual bool AddCScript(const CScript& redeemScript) =0;\n@@ -47,6 +47,7 @@ class CKeyStore\n };\n \n typedef std::map<CKeyID, CKey> KeyMap;\n+typedef std::map<CKeyID, CPubKey> WatchKeyMap;\n typedef std::map<CScriptID, CScript > ScriptMap;\n typedef std::set<CScript> WatchOnlySet;\n \n@@ -55,11 +56,13 @@ class CBasicKeyStore : public CKeyStore\n {\n protected:\n     KeyMap mapKeys;\n+    WatchKeyMap mapWatchKeys;\n     ScriptMap mapScripts;\n     WatchOnlySet setWatchOnly;\n \n public:\n     bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey);\n+    bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const;\n     bool HaveKey(const CKeyID &address) const\n     {\n         bool result;"
      },
      {
        "sha": "60a3fc128e708ba16e9f3a6f58728ce466fae549",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd8d80c63182aefea56abf743bb9199d9602544/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd8d80c63182aefea56abf743bb9199d9602544/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=ddd8d80c63182aefea56abf743bb9199d9602544",
        "patch": "@@ -754,10 +754,9 @@ void SendCoinsDialog::coinControlChangeEdited(const QString& text)\n         }\n         else // Valid address\n         {\n-            CPubKey pubkey;\n             CKeyID keyid;\n             addr.GetKeyID(keyid);\n-            if (!model->getPubKey(keyid, pubkey)) // Unknown change address\n+            if (!model->havePrivKey(keyid)) // Unknown change address\n             {\n                 ui->labelCoinControlChangeLabel->setText(tr(\"Warning: Unknown change address\"));\n             }"
      },
      {
        "sha": "801c6c62d2b609e2be86fb28f85ae271685893a4",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd8d80c63182aefea56abf743bb9199d9602544/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd8d80c63182aefea56abf743bb9199d9602544/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=ddd8d80c63182aefea56abf743bb9199d9602544",
        "patch": "@@ -165,7 +165,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n \n         if (fAllFromMe)\n         {\n-            if(fAllFromMe == ISMINE_WATCH_ONLY)\n+            if(fAllFromMe & ISMINE_WATCH_ONLY)\n                 strHTML += \"<b>\" + tr(\"From\") + \":</b> \" + tr(\"watch-only\") + \"<br>\";\n \n             //\n@@ -190,7 +190,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n                         strHTML += GUIUtil::HtmlEscape(CBitcoinAddress(address).ToString());\n                         if(toSelf == ISMINE_SPENDABLE)\n                             strHTML += \" (own address)\";\n-                        else if(toSelf == ISMINE_WATCH_ONLY)\n+                        else if(toSelf & ISMINE_WATCH_ONLY)\n                             strHTML += \" (watch-only)\";\n                         strHTML += \"<br>\";\n                     }"
      },
      {
        "sha": "d8623daf5dba05171a2ec5f32f3aba705d4847ec",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd8d80c63182aefea56abf743bb9199d9602544/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd8d80c63182aefea56abf743bb9199d9602544/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=ddd8d80c63182aefea56abf743bb9199d9602544",
        "patch": "@@ -56,7 +56,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n                 CTxDestination address;\n                 sub.idx = parts.size(); // sequence number\n                 sub.credit = txout.nValue;\n-                sub.involvesWatchAddress = mine == ISMINE_WATCH_ONLY;\n+                sub.involvesWatchAddress = mine & ISMINE_WATCH_ONLY;\n                 if (ExtractDestination(txout.scriptPubKey, address) && IsMine(*wallet, address))\n                 {\n                     // Received by Bitcoin Address\n@@ -86,15 +86,15 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n         BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n         {\n             isminetype mine = wallet->IsMine(txin);\n-            if(mine == ISMINE_WATCH_ONLY) involvesWatchAddress = true;\n+            if(mine & ISMINE_WATCH_ONLY) involvesWatchAddress = true;\n             if(fAllFromMe > mine) fAllFromMe = mine;\n         }\n \n         isminetype fAllToMe = ISMINE_SPENDABLE;\n         BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n         {\n             isminetype mine = wallet->IsMine(txout);\n-            if(mine == ISMINE_WATCH_ONLY) involvesWatchAddress = true;\n+            if(mine & ISMINE_WATCH_ONLY) involvesWatchAddress = true;\n             if(fAllToMe > mine) fAllToMe = mine;\n         }\n "
      },
      {
        "sha": "5c21db8bdf4d7ce39d519531b7a1dd62df18a55d",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd8d80c63182aefea56abf743bb9199d9602544/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd8d80c63182aefea56abf743bb9199d9602544/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=ddd8d80c63182aefea56abf743bb9199d9602544",
        "patch": "@@ -556,6 +556,11 @@ bool WalletModel::getPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const\n     return wallet->GetPubKey(address, vchPubKeyOut);\n }\n \n+bool WalletModel::havePrivKey(const CKeyID &address) const\n+{\n+    return wallet->HaveKey(address);\n+}\n+\n // returns a list of COutputs from COutPoints\n void WalletModel::getOutputs(const std::vector<COutPoint>& vOutpoints, std::vector<COutput>& vOutputs)\n {"
      },
      {
        "sha": "a5e877d81f6aa589199eca07d49405bc115b95a6",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd8d80c63182aefea56abf743bb9199d9602544/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd8d80c63182aefea56abf743bb9199d9602544/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=ddd8d80c63182aefea56abf743bb9199d9602544",
        "patch": "@@ -187,6 +187,7 @@ class WalletModel : public QObject\n     UnlockContext requestUnlock();\n \n     bool getPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const;\n+    bool havePrivKey(const CKeyID &address) const;\n     void getOutputs(const std::vector<COutPoint>& vOutpoints, std::vector<COutput>& vOutputs);\n     bool isSpent(const COutPoint& outpoint) const;\n     void listCoins(std::map<QString, std::vector<COutput> >& mapCoins) const;"
      },
      {
        "sha": "0c8e6d6d669a4993b73355ee0cfda27694275ae0",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd8d80c63182aefea56abf743bb9199d9602544/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd8d80c63182aefea56abf743bb9199d9602544/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=ddd8d80c63182aefea56abf743bb9199d9602544",
        "patch": "@@ -87,6 +87,8 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"lockunspent\", 1 },\n     { \"importprivkey\", 2 },\n     { \"importaddress\", 2 },\n+    { \"importaddress\", 3 },\n+    { \"importpubkey\", 2 },\n     { \"verifychain\", 0 },\n     { \"verifychain\", 1 },\n     { \"keypoolrefill\", 0 },"
      },
      {
        "sha": "4088f374f83157e390c17a2c2556cbc14dc4dd93",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd8d80c63182aefea56abf743bb9199d9602544/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd8d80c63182aefea56abf743bb9199d9602544/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=ddd8d80c63182aefea56abf743bb9199d9602544",
        "patch": "@@ -363,6 +363,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"wallet\",             \"importprivkey\",          &importprivkey,          true  },\n     { \"wallet\",             \"importwallet\",           &importwallet,           true  },\n     { \"wallet\",             \"importaddress\",          &importaddress,          true  },\n+    { \"wallet\",             \"importpubkey\",           &importpubkey,           true  },\n     { \"wallet\",             \"keypoolrefill\",          &keypoolrefill,          true  },\n     { \"wallet\",             \"listaccounts\",           &listaccounts,           false },\n     { \"wallet\",             \"listaddressgroupings\",   &listaddressgroupings,   false },"
      },
      {
        "sha": "3a71fd510f0690aac97d3dabefe9da3393e439c5",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd8d80c63182aefea56abf743bb9199d9602544/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd8d80c63182aefea56abf743bb9199d9602544/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=ddd8d80c63182aefea56abf743bb9199d9602544",
        "patch": "@@ -161,6 +161,7 @@ extern UniValue clearbanned(const UniValue& params, bool fHelp);\n extern UniValue dumpprivkey(const UniValue& params, bool fHelp); // in rpcdump.cpp\n extern UniValue importprivkey(const UniValue& params, bool fHelp);\n extern UniValue importaddress(const UniValue& params, bool fHelp);\n+extern UniValue importpubkey(const UniValue& params, bool fHelp);\n extern UniValue dumpwallet(const UniValue& params, bool fHelp);\n extern UniValue importwallet(const UniValue& params, bool fHelp);\n "
      },
      {
        "sha": "1d5aac7b3484f625ca166adfa0cc7ceb2b23169d",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd8d80c63182aefea56abf743bb9199d9602544/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd8d80c63182aefea56abf743bb9199d9602544/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=ddd8d80c63182aefea56abf743bb9199d9602544",
        "patch": "@@ -286,6 +286,11 @@ CScript GetScriptForDestination(const CTxDestination& dest)\n     return script;\n }\n \n+CScript GetScriptForRawPubKey(const CPubKey& pubKey)\n+{\n+    return CScript() << std::vector<unsigned char>(pubKey.begin(), pubKey.end()) << OP_CHECKSIG;\n+}\n+\n CScript GetScriptForMultisig(int nRequired, const std::vector<CPubKey>& keys)\n {\n     CScript script;"
      },
      {
        "sha": "9e17dac700b10a9f1b4a5b75b2e750c68ad4cbbb",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd8d80c63182aefea56abf743bb9199d9602544/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd8d80c63182aefea56abf743bb9199d9602544/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=ddd8d80c63182aefea56abf743bb9199d9602544",
        "patch": "@@ -73,6 +73,7 @@ bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)\n bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<CTxDestination>& addressRet, int& nRequiredRet);\n \n CScript GetScriptForDestination(const CTxDestination& dest);\n+CScript GetScriptForRawPubKey(const CPubKey& pubkey);\n CScript GetScriptForMultisig(int nRequired, const std::vector<CPubKey>& keys);\n \n #endif // BITCOIN_SCRIPT_STANDARD_H"
      },
      {
        "sha": "c86ad9758e42c9cf3025d3571d055c2e2767c9e6",
        "filename": "src/wallet/crypter.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd8d80c63182aefea56abf743bb9199d9602544/src/wallet/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd8d80c63182aefea56abf743bb9199d9602544/src/wallet/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.cpp?ref=ddd8d80c63182aefea56abf743bb9199d9602544",
        "patch": "@@ -255,14 +255,16 @@ bool CCryptoKeyStore::GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) co\n     {\n         LOCK(cs_KeyStore);\n         if (!IsCrypted())\n-            return CKeyStore::GetPubKey(address, vchPubKeyOut);\n+            return CBasicKeyStore::GetPubKey(address, vchPubKeyOut);\n \n         CryptedKeyMap::const_iterator mi = mapCryptedKeys.find(address);\n         if (mi != mapCryptedKeys.end())\n         {\n             vchPubKeyOut = (*mi).second.first;\n             return true;\n         }\n+        // Check for watch-only pubkeys\n+        return CBasicKeyStore::GetPubKey(address, vchPubKeyOut);\n     }\n     return false;\n }"
      },
      {
        "sha": "8d557979c01a7f542315fd74dd9d0d3952d59faf",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 104,
        "deletions": 31,
        "changes": 135,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd8d80c63182aefea56abf743bb9199d9602544/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd8d80c63182aefea56abf743bb9199d9602544/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=ddd8d80c63182aefea56abf743bb9199d9602544",
        "patch": "@@ -149,46 +149,124 @@ UniValue importprivkey(const UniValue& params, bool fHelp)\n     return NullUniValue;\n }\n \n+void ImportAddress(const CBitcoinAddress& address, const string& strLabel);\n+void ImportScript(const CScript& script, const string& strLabel, bool isRedeemScript)\n+{\n+    if (!isRedeemScript && ::IsMine(*pwalletMain, script) == ISMINE_SPENDABLE)\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n+\n+    pwalletMain->MarkDirty();\n+\n+    if (!pwalletMain->HaveWatchOnly(script) && !pwalletMain->AddWatchOnly(script))\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+\n+    if (isRedeemScript) {\n+        if (!pwalletMain->HaveCScript(script) && !pwalletMain->AddCScript(script))\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh redeemScript to wallet\");\n+        ImportAddress(CBitcoinAddress(CScriptID(script)), strLabel);\n+    }\n+}\n+\n+void ImportAddress(const CBitcoinAddress& address, const string& strLabel)\n+{\n+    CScript script = GetScriptForDestination(address.Get());\n+    ImportScript(script, strLabel, false);\n+    // add to address book or update label\n+    if (address.IsValid())\n+        pwalletMain->SetAddressBook(address.Get(), strLabel, \"receive\");\n+}\n+\n UniValue importaddress(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n     \n-    if (fHelp || params.size() < 1 || params.size() > 3)\n+    if (fHelp || params.size() < 1 || params.size() > 4)\n         throw runtime_error(\n-            \"importaddress \\\"address\\\" ( \\\"label\\\" rescan )\\n\"\n-            \"\\nAdds an address or script (in hex) that can be watched as if it were in your wallet but cannot be used to spend.\\n\"\n+            \"importaddress \\\"address\\\" ( \\\"label\\\" rescan p2sh )\\n\"\n+            \"\\nAdds a script (in hex) or address that can be watched as if it were in your wallet but cannot be used to spend.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"address\\\"          (string, required) The address\\n\"\n+            \"1. \\\"script\\\"           (string, required) The hex-encoded script (or address)\\n\"\n             \"2. \\\"label\\\"            (string, optional, default=\\\"\\\") An optional label\\n\"\n             \"3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions\\n\"\n+            \"4. p2sh                 (boolean, optional, default=false) Add the P2SH version of the script as well\\n\"\n             \"\\nNote: This call can take minutes to complete if rescan is true.\\n\"\n+            \"If you have the full public key, you should call importpublickey instead of this.\\n\"\n             \"\\nExamples:\\n\"\n-            \"\\nImport an address with rescan\\n\"\n-            + HelpExampleCli(\"importaddress\", \"\\\"myaddress\\\"\") +\n+            \"\\nImport a script with rescan\\n\"\n+            + HelpExampleCli(\"importaddress\", \"\\\"myscript\\\"\") +\n             \"\\nImport using a label without rescan\\n\"\n-            + HelpExampleCli(\"importaddress\", \"\\\"myaddress\\\" \\\"testing\\\" false\") +\n+            + HelpExampleCli(\"importaddress\", \"\\\"myscript\\\" \\\"testing\\\" false\") +\n             \"\\nAs a JSON-RPC call\\n\"\n-            + HelpExampleRpc(\"importaddress\", \"\\\"myaddress\\\", \\\"testing\\\", false\")\n+            + HelpExampleRpc(\"importaddress\", \"\\\"myscript\\\", \\\"testing\\\", false\")\n         );\n \n     if (fPruneMode)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Importing addresses is disabled in pruned mode\");\n \n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    string strLabel = \"\";\n+    if (params.size() > 1)\n+        strLabel = params[1].get_str();\n+\n+    // Whether to perform rescan after import\n+    bool fRescan = true;\n+    if (params.size() > 2)\n+        fRescan = params[2].get_bool();\n \n-    CScript script;\n+    // Whether to import a p2sh version, too\n+    bool fP2SH = false;\n+    if (params.size() > 3)\n+        fP2SH = params[3].get_bool();\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     CBitcoinAddress address(params[0].get_str());\n     if (address.IsValid()) {\n-        script = GetScriptForDestination(address.Get());\n+        if (fP2SH)\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Cannot use the p2sh flag with an address - use a script instead\");\n+        ImportAddress(address, strLabel);\n     } else if (IsHex(params[0].get_str())) {\n         std::vector<unsigned char> data(ParseHex(params[0].get_str()));\n-        script = CScript(data.begin(), data.end());\n+        ImportScript(CScript(data.begin(), data.end()), strLabel, fP2SH);\n     } else {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address or script\");\n     }\n \n+    if (fRescan)\n+    {\n+        pwalletMain->ScanForWalletTransactions(chainActive.Genesis(), true);\n+        pwalletMain->ReacceptWalletTransactions();\n+    }\n+\n+    return NullUniValue;\n+}\n+\n+UniValue importpubkey(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() < 1 || params.size() > 4)\n+        throw runtime_error(\n+            \"importpubkey \\\"pubkey\\\" ( \\\"label\\\" rescan )\\n\"\n+            \"\\nAdds a public key (in hex) that can be watched as if it were in your wallet but cannot be used to spend.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"pubkey\\\"           (string, required) The hex-encoded public key\\n\"\n+            \"2. \\\"label\\\"            (string, optional, default=\\\"\\\") An optional label\\n\"\n+            \"3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions\\n\"\n+            \"\\nNote: This call can take minutes to complete if rescan is true.\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nImport a public key with rescan\\n\"\n+            + HelpExampleCli(\"importpubkey\", \"\\\"mypubkey\\\"\") +\n+            \"\\nImport using a label without rescan\\n\"\n+            + HelpExampleCli(\"importpubkey\", \"\\\"mypubkey\\\" \\\"testing\\\" false\") +\n+            \"\\nAs a JSON-RPC call\\n\"\n+            + HelpExampleRpc(\"importpubkey\", \"\\\"mypubkey\\\", \\\"testing\\\", false\")\n+        );\n+\n+    if (fPruneMode)\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Importing public keys is disabled in pruned mode\");\n+\n     string strLabel = \"\";\n     if (params.size() > 1)\n         strLabel = params[1].get_str();\n@@ -198,33 +276,28 @@ UniValue importaddress(const UniValue& params, bool fHelp)\n     if (params.size() > 2)\n         fRescan = params[2].get_bool();\n \n-    {\n-        if (::IsMine(*pwalletMain, script) == ISMINE_SPENDABLE)\n-            throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n-\n-        // add to address book or update label\n-        if (address.IsValid())\n-            pwalletMain->SetAddressBook(address.Get(), strLabel, \"receive\");\n-\n-        // Don't throw error in case an address is already there\n-        if (pwalletMain->HaveWatchOnly(script))\n-            return NullUniValue;\n+    if (!IsHex(params[0].get_str()))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey must be a hex string\");\n+    std::vector<unsigned char> data(ParseHex(params[0].get_str()));\n+    CPubKey pubKey(data.begin(), data.end());\n+    if (!pubKey.IsFullyValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey is not a valid public key\");\n \n-        pwalletMain->MarkDirty();\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-        if (!pwalletMain->AddWatchOnly(script))\n-            throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+    ImportAddress(CBitcoinAddress(pubKey.GetID()), strLabel);\n+    ImportScript(GetScriptForRawPubKey(pubKey), strLabel, false);\n \n-        if (fRescan)\n-        {\n-            pwalletMain->ScanForWalletTransactions(chainActive.Genesis(), true);\n-            pwalletMain->ReacceptWalletTransactions();\n-        }\n+    if (fRescan)\n+    {\n+        pwalletMain->ScanForWalletTransactions(chainActive.Genesis(), true);\n+        pwalletMain->ReacceptWalletTransactions();\n     }\n \n     return NullUniValue;\n }\n \n+\n UniValue importwallet(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))"
      },
      {
        "sha": "bd16da76145d64bfca029b4efe5f04bcb23007e5",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 5,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd8d80c63182aefea56abf743bb9199d9602544/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd8d80c63182aefea56abf743bb9199d9602544/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=ddd8d80c63182aefea56abf743bb9199d9602544",
        "patch": "@@ -2368,15 +2368,20 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() != 1)\n+    if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n-                            \"fundrawtransaction \\\"hexstring\\\"\\n\"\n+                            \"fundrawtransaction \\\"hexstring\\\" includeWatching\\n\"\n                             \"\\nAdd inputs to a transaction until it has enough in value to meet its out value.\\n\"\n                             \"This will not modify existing inputs, and will add one change output to the outputs.\\n\"\n                             \"Note that inputs which were signed may need to be resigned after completion since in/outputs have been added.\\n\"\n                             \"The inputs added will not be signed, use signrawtransaction for that.\\n\"\n+                            \"Note that all existing inputs must have their previous output transaction be in the wallet.\\n\"\n+                            \"Note that all inputs selected must be of standard form and P2SH scripts must be\"\n+                            \"in the wallet using importaddress or addmultisigaddress (to calculate fees).\\n\"\n+                            \"Only pay-to-pubkey, multisig, and P2SH versions thereof are currently supported for watch-only\\n\"\n                             \"\\nArguments:\\n\"\n-                            \"1. \\\"hexstring\\\"    (string, required) The hex string of the raw transaction\\n\"\n+                            \"1. \\\"hexstring\\\"     (string, required) The hex string of the raw transaction\\n\"\n+                            \"2. includeWatching (boolean, optional, default false) Also select inputs which are watch only\\n\"\n                             \"\\nResult:\\n\"\n                             \"{\\n\"\n                             \"  \\\"hex\\\":       \\\"value\\\", (string)  The resulting raw transaction (hex-encoded string)\\n\"\n@@ -2395,18 +2400,22 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n                             + HelpExampleCli(\"sendrawtransaction\", \"\\\"signedtransactionhex\\\"\")\n                             );\n \n-    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR));\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VBOOL));\n \n     // parse hex string from parameter\n     CTransaction origTx;\n     if (!DecodeHexTx(origTx, params[0].get_str()))\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n \n+    bool includeWatching = false;\n+    if (params.size() > 1)\n+        includeWatching = true;\n+\n     CMutableTransaction tx(origTx);\n     CAmount nFee;\n     string strFailReason;\n     int nChangePos = -1;\n-    if(!pwalletMain->FundTransaction(tx, nFee, nChangePos, strFailReason))\n+    if(!pwalletMain->FundTransaction(tx, nFee, nChangePos, strFailReason, includeWatching))\n         throw JSONRPCError(RPC_INTERNAL_ERROR, strFailReason);\n \n     UniValue result(UniValue::VOBJ);"
      },
      {
        "sha": "c3b1172201e45dc3273ec43b4d792c9ee52507da",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd8d80c63182aefea56abf743bb9199d9602544/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd8d80c63182aefea56abf743bb9199d9602544/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=ddd8d80c63182aefea56abf743bb9199d9602544",
        "patch": "@@ -112,6 +112,9 @@ bool CWallet::AddKeyPubKey(const CKey& secret, const CPubKey &pubkey)\n     // check if we need to remove from watch-only\n     CScript script;\n     script = GetScriptForDestination(pubkey.GetID());\n+    if (HaveWatchOnly(script))\n+        RemoveWatchOnly(script);\n+    script = GetScriptForRawPubKey(pubkey);\n     if (HaveWatchOnly(script))\n         RemoveWatchOnly(script);\n \n@@ -1527,7 +1530,9 @@ void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed, const\n                 if (!(IsSpent(wtxid, i)) && mine != ISMINE_NO &&\n                     !IsLockedCoin((*it).first, i) && (pcoin->vout[i].nValue > 0 || fIncludeZeroValue) &&\n                     (!coinControl || !coinControl->HasSelected() || coinControl->fAllowOtherInputs || coinControl->IsSelected((*it).first, i)))\n-                        vCoins.push_back(COutput(pcoin, i, nDepth, (mine & ISMINE_SPENDABLE) != ISMINE_NO));\n+                        vCoins.push_back(COutput(pcoin, i, nDepth,\n+                                                 ((mine & ISMINE_SPENDABLE) != ISMINE_NO) ||\n+                                                  (coinControl && coinControl->fAllowWatchOnly && (mine & ISMINE_WATCH_SOLVABLE) != ISMINE_NO)));\n             }\n         }\n     }\n@@ -1743,7 +1748,7 @@ bool CWallet::SelectCoins(const CAmount& nTargetValue, set<pair<const CWalletTx*\n     return res;\n }\n \n-bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount &nFeeRet, int& nChangePosRet, std::string& strFailReason)\n+bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount &nFeeRet, int& nChangePosRet, std::string& strFailReason, bool includeWatching)\n {\n     vector<CRecipient> vecSend;\n \n@@ -1756,6 +1761,7 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount &nFeeRet, int& nC\n \n     CCoinControl coinControl;\n     coinControl.fAllowOtherInputs = true;\n+    coinControl.fAllowWatchOnly = includeWatching;\n     BOOST_FOREACH(const CTxIn& txin, tx.vin)\n         coinControl.Select(txin.prevout);\n "
      },
      {
        "sha": "bd30b67b09f182acf4fb85500fb61447c95141db",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd8d80c63182aefea56abf743bb9199d9602544/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd8d80c63182aefea56abf743bb9199d9602544/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=ddd8d80c63182aefea56abf743bb9199d9602544",
        "patch": "@@ -627,7 +627,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     CAmount GetWatchOnlyBalance() const;\n     CAmount GetUnconfirmedWatchOnlyBalance() const;\n     CAmount GetImmatureWatchOnlyBalance() const;\n-    bool FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosRet, std::string& strFailReason);\n+    bool FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosRet, std::string& strFailReason, bool includeWatching);\n     bool CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosRet,\n                            std::string& strFailReason, const CCoinControl *coinControl = NULL, bool sign = true);\n     bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey);"
      },
      {
        "sha": "d27b1531e3e620090e658433beba90cbb7b0656c",
        "filename": "src/wallet/wallet_ismine.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd8d80c63182aefea56abf743bb9199d9602544/src/wallet/wallet_ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd8d80c63182aefea56abf743bb9199d9602544/src/wallet/wallet_ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet_ismine.cpp?ref=ddd8d80c63182aefea56abf743bb9199d9602544",
        "patch": "@@ -9,6 +9,7 @@\n #include \"keystore.h\"\n #include \"script/script.h\"\n #include \"script/standard.h\"\n+#include \"script/sign.h\"\n \n #include <boost/foreach.hpp>\n \n@@ -40,7 +41,7 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n     txnouttype whichType;\n     if (!Solver(scriptPubKey, whichType, vSolutions)) {\n         if (keystore.HaveWatchOnly(scriptPubKey))\n-            return ISMINE_WATCH_ONLY;\n+            return ISMINE_WATCH_UNSOLVABLE;\n         return ISMINE_NO;\n     }\n \n@@ -85,7 +86,10 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n     }\n     }\n \n-    if (keystore.HaveWatchOnly(scriptPubKey))\n-        return ISMINE_WATCH_ONLY;\n+    if (keystore.HaveWatchOnly(scriptPubKey)) {\n+        // TODO: This could be optimized some by doing some work after the above solver\n+        CScript scriptSig;\n+        return ProduceSignature(DummySignatureCreator(&keystore), scriptPubKey, scriptSig) ? ISMINE_WATCH_SOLVABLE : ISMINE_WATCH_UNSOLVABLE;\n+    }\n     return ISMINE_NO;\n }"
      },
      {
        "sha": "9f45f76c6b8c394c4ca36e7c1a180e02cec5ac45",
        "filename": "src/wallet/wallet_ismine.h",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd8d80c63182aefea56abf743bb9199d9602544/src/wallet/wallet_ismine.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd8d80c63182aefea56abf743bb9199d9602544/src/wallet/wallet_ismine.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet_ismine.h?ref=ddd8d80c63182aefea56abf743bb9199d9602544",
        "patch": "@@ -17,8 +17,12 @@ class CScript;\n enum isminetype\n {\n     ISMINE_NO = 0,\n-    ISMINE_WATCH_ONLY = 1,\n-    ISMINE_SPENDABLE = 2,\n+    //! Indicates that we dont know how to create a scriptSig that would solve this if we were given the appropriate private keys\n+    ISMINE_WATCH_UNSOLVABLE = 1,\n+    //! Indicates that we know how to create a scriptSig that would solve this if we were given the appropriate private keys\n+    ISMINE_WATCH_SOLVABLE = 2,\n+    ISMINE_WATCH_ONLY = ISMINE_WATCH_SOLVABLE | ISMINE_WATCH_UNSOLVABLE,\n+    ISMINE_SPENDABLE = 4,\n     ISMINE_ALL = ISMINE_WATCH_ONLY | ISMINE_SPENDABLE\n };\n /** used for bitflags of isminetype */"
      }
    ]
  },
  {
    "sha": "bba3db1a40c2125c23a657e5f2d89e334037f792",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYmEzZGIxYTQwYzIxMjVjMjNhNjU3ZTVmMmQ4OWUzMzQwMzdmNzky",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-08-14T19:23:37Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-08-14T19:25:19Z"
      },
      "message": "Fix masking of irrelevant bits in address groups.",
      "tree": {
        "sha": "66198f1e90ba2eeae6b34a19b94382f405a77ad7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/66198f1e90ba2eeae6b34a19b94382f405a77ad7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bba3db1a40c2125c23a657e5f2d89e334037f792",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bba3db1a40c2125c23a657e5f2d89e334037f792",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bba3db1a40c2125c23a657e5f2d89e334037f792",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bba3db1a40c2125c23a657e5f2d89e334037f792/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ddd8d80c63182aefea56abf743bb9199d9602544",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddd8d80c63182aefea56abf743bb9199d9602544",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ddd8d80c63182aefea56abf743bb9199d9602544"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "259e5c14a3eb1d8884c6fdfdd27dba4a5a2d4134",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bba3db1a40c2125c23a657e5f2d89e334037f792/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bba3db1a40c2125c23a657e5f2d89e334037f792/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=bba3db1a40c2125c23a657e5f2d89e334037f792",
        "patch": "@@ -983,7 +983,7 @@ std::vector<unsigned char> CNetAddr::GetGroup() const\n         nBits -= 8;\n     }\n     if (nBits > 0)\n-        vchRet.push_back(GetByte(15 - nStartByte) | ((1 << nBits) - 1));\n+        vchRet.push_back(GetByte(15 - nStartByte) | ((1 << (8 - nBits)) - 1));\n \n     return vchRet;\n }"
      }
    ]
  },
  {
    "sha": "6feeec1ec5fbadc5c77d1bbf6511d021e8fc73d1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZmVlZWMxZWM1ZmJhZGM1Yzc3ZDFiYmY2NTExZDAyMWU4ZmM3M2Qx",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2015-08-15T20:09:06Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2015-08-15T20:09:06Z"
      },
      "message": "Merge pull request #6013",
      "tree": {
        "sha": "558602b33381fadbb911643a38fffabc308f7c97",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/558602b33381fadbb911643a38fffabc308f7c97"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6feeec1ec5fbadc5c77d1bbf6511d021e8fc73d1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "no_user",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIVAwUAVc+caiWzCDIBeCsvAQKk/hAAvB2rX65ucy1dmuH9r9bKfrW+1fyn34H+\nrL+/NbnytJAXW75/RzHj0JALMNEMcvuaj7KiPNJw/PosFDkqT6onaZN5J48rhP1E\n3FP2IrRQ2VKncJifLnC1QpKOE2s/eBR6nCE3c4s80W5U4Gb2aBc0GNUgU5Y7aP7Z\n12rC/FDe0bzr2hC8q95ddUWzq1+RO/G/zYmWZABCgu2BVjGIXMchAc8j9KcsuEVE\njY0Ak9mbm6RiHi5S8TOcxPXCNirG/36S9VieLKiyjFKeAJQfNIWfN9+JF6WDmde3\ns8wUFgldYTOJ4mxqm1CTt87zmCba4b38BNw4T8Qv6vKcbLDHy7AarmQdS6IZSsD8\nv/YwIph8mpsfc4fPDv47yvRZO27IHWUGMYtPx8XMf4+AyanKxlWGvay63vzmCtGp\nZp+4tdnXcVhgP926wt6YqMJVMEK3zh6IMetc13SUSwBHp3Sh40UkHVlnoz5vTKYk\nZZxVZkOlakPiA47jiOvsbf1HeTl/BoEpBoBDyTy8GM6WzPUxlh/2oL9eCmOxrlQ8\n7sCQ58X6xnZT+Td6prsdslSIRREjUoA7N5OFU2hIfhOLsBV11jQ2OE/w5wEzowfv\nCgpFNAtYAipiFhn8Xr1HoxbIIeQRsT8CEs9DsJpKJ3wusTdRxB94BNgLl0158sh3\nAqWi/mqhnR8=\n=pP0O\n-----END PGP SIGNATURE-----",
        "payload": "tree 558602b33381fadbb911643a38fffabc308f7c97\nparent ddd8d80c63182aefea56abf743bb9199d9602544\nparent 70180b2e576ebcb675c905ef4bd9d5b4fd378b6c\nauthor Jeff Garzik <jgarzik@bitpay.com> 1439669346 -0400\ncommitter Jeff Garzik <jgarzik@bitpay.com> 1439669346 -0400\n\nMerge pull request #6013\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6feeec1ec5fbadc5c77d1bbf6511d021e8fc73d1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6feeec1ec5fbadc5c77d1bbf6511d021e8fc73d1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6feeec1ec5fbadc5c77d1bbf6511d021e8fc73d1/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "ddd8d80c63182aefea56abf743bb9199d9602544",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddd8d80c63182aefea56abf743bb9199d9602544",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ddd8d80c63182aefea56abf743bb9199d9602544"
      },
      {
        "sha": "70180b2e576ebcb675c905ef4bd9d5b4fd378b6c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70180b2e576ebcb675c905ef4bd9d5b4fd378b6c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/70180b2e576ebcb675c905ef4bd9d5b4fd378b6c"
      }
    ],
    "stats": {
      "total": 180,
      "additions": 136,
      "deletions": 44
    },
    "files": [
      {
        "sha": "bf669235e38a2c97a8cce1de70f32c7baf89ba91",
        "filename": "doc/REST-interface.md",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6feeec1ec5fbadc5c77d1bbf6511d021e8fc73d1/doc/REST-interface.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6feeec1ec5fbadc5c77d1bbf6511d021e8fc73d1/doc/REST-interface.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/REST-interface.md?ref=6feeec1ec5fbadc5c77d1bbf6511d021e8fc73d1",
        "patch": "@@ -77,6 +77,20 @@ $ curl localhost:18332/rest/getutxos/checkmempool/b2cdfd7b89def827ff8af7cd9bff76\n }\n ```\n \n+####Memory pool\n+`GET /rest/mempool/info.json`\n+\n+Returns various information about the TX mempool.\n+Only supports JSON as output format.\n+* size : (numeric) the number of transactions in the TX mempool\n+* bytes : (numeric) size of the TX mempool in bytes\n+* usage : (numeric) total TX mempool memory usage\n+\n+`GET /rest/mempool/contents.json`\n+\n+Returns transactions in the TX mempool.\n+Only supports JSON as output format.\n+\n Risks\n -------------\n Running a web browser on the same node with a REST enabled bitcoind can be a risk. Accessing prepared XSS websites could read out tx/block data of your node by placing links like `<script src=\"http://127.0.0.1:8332/rest/tx/1234567890.json\">` which might break the nodes privacy."
      },
      {
        "sha": "2da521950779779ddd83304d12f9c998c7e5806b",
        "filename": "qa/rpc-tests/rest.py",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6feeec1ec5fbadc5c77d1bbf6511d021e8fc73d1/qa/rpc-tests/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6feeec1ec5fbadc5c77d1bbf6511d021e8fc73d1/qa/rpc-tests/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rest.py?ref=6feeec1ec5fbadc5c77d1bbf6511d021e8fc73d1",
        "patch": "@@ -292,6 +292,19 @@ def run_test(self):\n         txs.append(self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 11))\n         self.sync_all()\n \n+        # check that there are exactly 3 transactions in the TX memory pool before generating the block\n+        json_string = http_get_call(url.hostname, url.port, '/rest/mempool/info'+self.FORMAT_SEPARATOR+'json')\n+        json_obj = json.loads(json_string)\n+        assert_equal(json_obj['size'], 3)\n+        # the size of the memory pool should be greater than 3x ~100 bytes\n+        assert_greater_than(json_obj['bytes'], 300)\n+\n+        # check that there are our submitted transactions in the TX memory pool\n+        json_string = http_get_call(url.hostname, url.port, '/rest/mempool/contents'+self.FORMAT_SEPARATOR+'json')\n+        json_obj = json.loads(json_string)\n+        for tx in txs:\n+            assert_equal(tx in json_obj, True)\n+\n         # now mine the transactions\n         newblockhash = self.nodes[1].generate(1)\n         self.sync_all()"
      },
      {
        "sha": "74d27e73bbd9aa9d12156d38c9e49151f381d64c",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 56,
        "deletions": 0,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6feeec1ec5fbadc5c77d1bbf6511d021e8fc73d1/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6feeec1ec5fbadc5c77d1bbf6511d021e8fc73d1/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=6feeec1ec5fbadc5c77d1bbf6511d021e8fc73d1",
        "patch": "@@ -65,6 +65,8 @@ class RestErr\n \n extern void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry);\n extern UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool txDetails = false);\n+extern UniValue mempoolInfoToJSON();\n+extern UniValue mempoolToJSON(bool fVerbose = false);\n extern void ScriptPubKeyToJSON(const CScript& scriptPubKey, UniValue& out, bool fIncludeHex);\n extern UniValue blockheaderToJSON(const CBlockIndex* blockindex);\n \n@@ -293,6 +295,58 @@ static bool rest_chaininfo(AcceptedConnection* conn,\n     return true; // continue to process further HTTP reqs on this cxn\n }\n \n+static bool rest_mempool_info(AcceptedConnection* conn,\n+                              const std::string& strURIPart,\n+                              const std::string& strRequest,\n+                              const std::map<std::string, std::string>& mapHeaders,\n+                              bool fRun)\n+{\n+    vector<string> params;\n+    const RetFormat rf = ParseDataFormat(params, strURIPart);\n+\n+    switch (rf) {\n+    case RF_JSON: {\n+        UniValue mempoolInfoObject = mempoolInfoToJSON();\n+\n+        string strJSON = mempoolInfoObject.write() + \"\\n\";\n+        conn->stream() << HTTPReply(HTTP_OK, strJSON, fRun) << std::flush;\n+        return true;\n+    }\n+    default: {\n+        throw RESTERR(HTTP_NOT_FOUND, \"output format not found (available: json)\");\n+    }\n+    }\n+\n+    // not reached\n+    return true; // continue to process further HTTP reqs on this cxn\n+}\n+\n+static bool rest_mempool_contents(AcceptedConnection* conn,\n+                                  const std::string& strURIPart,\n+                                  const std::string& strRequest,\n+                                  const std::map<std::string, std::string>& mapHeaders,\n+                                  bool fRun)\n+{\n+    vector<string> params;\n+    const RetFormat rf = ParseDataFormat(params, strURIPart);\n+\n+    switch (rf) {\n+    case RF_JSON: {\n+        UniValue mempoolObject = mempoolToJSON(true);\n+\n+        string strJSON = mempoolObject.write() + \"\\n\";\n+        conn->stream() << HTTPReply(HTTP_OK, strJSON, fRun) << std::flush;\n+        return true;\n+    }\n+    default: {\n+        throw RESTERR(HTTP_NOT_FOUND, \"output format not found (available: json)\");\n+    }\n+    }\n+\n+    // not reached\n+    return true; // continue to process further HTTP reqs on this cxn\n+}\n+\n static bool rest_tx(AcceptedConnection* conn,\n                     const std::string& strURIPart,\n                     const std::string& strRequest,\n@@ -553,6 +607,8 @@ static const struct {\n       {\"/rest/block/notxdetails/\", rest_block_notxdetails},\n       {\"/rest/block/\", rest_block_extended},\n       {\"/rest/chaininfo\", rest_chaininfo},\n+      {\"/rest/mempool/info\", rest_mempool_info},\n+      {\"/rest/mempool/contents\", rest_mempool_contents},\n       {\"/rest/headers/\", rest_headers},\n       {\"/rest/getutxos\", rest_getutxos},\n };"
      },
      {
        "sha": "e6751de96bae527391a963a6c76d06eee924cb0c",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 53,
        "deletions": 44,
        "changes": 97,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6feeec1ec5fbadc5c77d1bbf6511d021e8fc73d1/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6feeec1ec5fbadc5c77d1bbf6511d021e8fc73d1/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=6feeec1ec5fbadc5c77d1bbf6511d021e8fc73d1",
        "patch": "@@ -175,45 +175,8 @@ UniValue getdifficulty(const UniValue& params, bool fHelp)\n     return GetDifficulty();\n }\n \n-\n-UniValue getrawmempool(const UniValue& params, bool fHelp)\n+UniValue mempoolToJSON(bool fVerbose = false)\n {\n-    if (fHelp || params.size() > 1)\n-        throw runtime_error(\n-            \"getrawmempool ( verbose )\\n\"\n-            \"\\nReturns all transaction ids in memory pool as a json array of string transaction ids.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. verbose           (boolean, optional, default=false) true for a json object, false for array of transaction ids\\n\"\n-            \"\\nResult: (for verbose = false):\\n\"\n-            \"[                     (json array of string)\\n\"\n-            \"  \\\"transactionid\\\"     (string) The transaction id\\n\"\n-            \"  ,...\\n\"\n-            \"]\\n\"\n-            \"\\nResult: (for verbose = true):\\n\"\n-            \"{                           (json object)\\n\"\n-            \"  \\\"transactionid\\\" : {       (json object)\\n\"\n-            \"    \\\"size\\\" : n,             (numeric) transaction size in bytes\\n\"\n-            \"    \\\"fee\\\" : n,              (numeric) transaction fee in \" + CURRENCY_UNIT + \"\\n\"\n-            \"    \\\"time\\\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT\\n\"\n-            \"    \\\"height\\\" : n,           (numeric) block height when transaction entered pool\\n\"\n-            \"    \\\"startingpriority\\\" : n, (numeric) priority when transaction entered pool\\n\"\n-            \"    \\\"currentpriority\\\" : n,  (numeric) transaction priority now\\n\"\n-            \"    \\\"depends\\\" : [           (array) unconfirmed transactions used as inputs for this transaction\\n\"\n-            \"        \\\"transactionid\\\",    (string) parent transaction id\\n\"\n-            \"       ... ]\\n\"\n-            \"  }, ...\\n\"\n-            \"}\\n\"\n-            \"\\nExamples\\n\"\n-            + HelpExampleCli(\"getrawmempool\", \"true\")\n-            + HelpExampleRpc(\"getrawmempool\", \"true\")\n-        );\n-\n-    LOCK(cs_main);\n-\n-    bool fVerbose = false;\n-    if (params.size() > 0)\n-        fVerbose = params[0].get_bool();\n-\n     if (fVerbose)\n     {\n         LOCK(mempool.cs);\n@@ -261,6 +224,47 @@ UniValue getrawmempool(const UniValue& params, bool fHelp)\n     }\n }\n \n+UniValue getrawmempool(const UniValue& params, bool fHelp)\n+{\n+    if (fHelp || params.size() > 1)\n+        throw runtime_error(\n+            \"getrawmempool ( verbose )\\n\"\n+            \"\\nReturns all transaction ids in memory pool as a json array of string transaction ids.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. verbose           (boolean, optional, default=false) true for a json object, false for array of transaction ids\\n\"\n+            \"\\nResult: (for verbose = false):\\n\"\n+            \"[                     (json array of string)\\n\"\n+            \"  \\\"transactionid\\\"     (string) The transaction id\\n\"\n+            \"  ,...\\n\"\n+            \"]\\n\"\n+            \"\\nResult: (for verbose = true):\\n\"\n+            \"{                           (json object)\\n\"\n+            \"  \\\"transactionid\\\" : {       (json object)\\n\"\n+            \"    \\\"size\\\" : n,             (numeric) transaction size in bytes\\n\"\n+            \"    \\\"fee\\\" : n,              (numeric) transaction fee in \" + CURRENCY_UNIT + \"\\n\"\n+            \"    \\\"time\\\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT\\n\"\n+            \"    \\\"height\\\" : n,           (numeric) block height when transaction entered pool\\n\"\n+            \"    \\\"startingpriority\\\" : n, (numeric) priority when transaction entered pool\\n\"\n+            \"    \\\"currentpriority\\\" : n,  (numeric) transaction priority now\\n\"\n+            \"    \\\"depends\\\" : [           (array) unconfirmed transactions used as inputs for this transaction\\n\"\n+            \"        \\\"transactionid\\\",    (string) parent transaction id\\n\"\n+            \"       ... ]\\n\"\n+            \"  }, ...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples\\n\"\n+            + HelpExampleCli(\"getrawmempool\", \"true\")\n+            + HelpExampleRpc(\"getrawmempool\", \"true\")\n+        );\n+\n+    LOCK(cs_main);\n+\n+    bool fVerbose = false;\n+    if (params.size() > 0)\n+        fVerbose = params[0].get_bool();\n+\n+    return mempoolToJSON(fVerbose);\n+}\n+\n UniValue getblockhash(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n@@ -757,6 +761,16 @@ UniValue getchaintips(const UniValue& params, bool fHelp)\n     return res;\n }\n \n+UniValue mempoolInfoToJSON()\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    ret.push_back(Pair(\"size\", (int64_t) mempool.size()));\n+    ret.push_back(Pair(\"bytes\", (int64_t) mempool.GetTotalTxSize()));\n+    ret.push_back(Pair(\"usage\", (int64_t) mempool.DynamicMemoryUsage()));\n+\n+    return ret;\n+}\n+\n UniValue getmempoolinfo(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n@@ -774,12 +788,7 @@ UniValue getmempoolinfo(const UniValue& params, bool fHelp)\n             + HelpExampleRpc(\"getmempoolinfo\", \"\")\n         );\n \n-    UniValue ret(UniValue::VOBJ);\n-    ret.push_back(Pair(\"size\", (int64_t) mempool.size()));\n-    ret.push_back(Pair(\"bytes\", (int64_t) mempool.GetTotalTxSize()));\n-    ret.push_back(Pair(\"usage\", (int64_t) mempool.DynamicMemoryUsage()));\n-\n-    return ret;\n+    return mempoolInfoToJSON();\n }\n \n UniValue invalidateblock(const UniValue& params, bool fHelp)"
      }
    ]
  },
  {
    "sha": "bb4faee21e61c8449fa5a3186e3e9a22d6b11d7f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjRmYWVlMjFlNjFjODQ0OWZhNWEzMTg2ZTNlOWEyMmQ2YjExZDdm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-17T14:44:48Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-17T14:45:22Z"
      },
      "message": "Merge pull request #6509\n\n45a6cce Fix race condition on test node shutdown (Casey Rodarmor)",
      "tree": {
        "sha": "8d0e04f5b8a85f165e4a51f1eb9cee3840bf8dde",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8d0e04f5b8a85f165e4a51f1eb9cee3840bf8dde"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb4faee21e61c8449fa5a3186e3e9a22d6b11d7f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJV0fOCAAoJEHSBCwEjRsmmuSEH/iPlEosDp/dxZB6veMJeVZso\nY+oeof5lbBRQKg/jKJfuC3TSiCRhvQzLt57osVmIJYDUHMi/B5AjKBhV0LAckUmP\nlY6ziQdJRebm+ido5eTfvE8RgiULbQnvCNzPlflVVEG3VaWpmRmueGmU7HHFAT2X\n0RcqmSy7LvvdC5vvfYB7iHBq7e4sTnFv/LHXSQKRAb3OCAnpQCNs9ipbW3bOwzzq\nTK8lShqHvT1arcOrnrFCcrXkjpv5Ls1+ni3bMKGZKwLC7F45PhxGvywdustAZn6M\ncmgx70qhBL+5YyuKm1PtehkQO1I6SmQrErheIiNYn4ZSI6zkzR+yDGdlhRARK/s=\n=uHYp\n-----END PGP SIGNATURE-----",
        "payload": "tree 8d0e04f5b8a85f165e4a51f1eb9cee3840bf8dde\nparent 6feeec1ec5fbadc5c77d1bbf6511d021e8fc73d1\nparent 45a6cce971a96ebec6cc5d72921adbdde5ae4f18\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1439822688 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1439822722 +0200\n\nMerge pull request #6509\n\n45a6cce Fix race condition on test node shutdown (Casey Rodarmor)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb4faee21e61c8449fa5a3186e3e9a22d6b11d7f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb4faee21e61c8449fa5a3186e3e9a22d6b11d7f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb4faee21e61c8449fa5a3186e3e9a22d6b11d7f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6feeec1ec5fbadc5c77d1bbf6511d021e8fc73d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6feeec1ec5fbadc5c77d1bbf6511d021e8fc73d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6feeec1ec5fbadc5c77d1bbf6511d021e8fc73d1"
      },
      {
        "sha": "45a6cce971a96ebec6cc5d72921adbdde5ae4f18",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45a6cce971a96ebec6cc5d72921adbdde5ae4f18",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/45a6cce971a96ebec6cc5d72921adbdde5ae4f18"
      }
    ],
    "stats": {
      "total": 94,
      "additions": 48,
      "deletions": 46
    },
    "files": [
      {
        "sha": "ffa9226a32f249c5bd0166503d3cc873c4d21698",
        "filename": "qa/rpc-tests/test_framework/comptool.py",
        "status": "modified",
        "additions": 48,
        "deletions": 46,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb4faee21e61c8449fa5a3186e3e9a22d6b11d7f/qa/rpc-tests/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb4faee21e61c8449fa5a3186e3e9a22d6b11d7f/qa/rpc-tests/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/comptool.py?ref=bb4faee21e61c8449fa5a3186e3e9a22d6b11d7f",
        "patch": "@@ -27,6 +27,20 @@\n \n global mininode_lock\n \n+def wait_until(predicate, attempts=float('inf'), timeout=float('inf')):\n+    attempt = 0\n+    elapsed = 0\n+\n+    while attempt < attempts and elapsed < timeout:\n+        with mininode_lock:\n+            if predicate():\n+                return True\n+        attempt += 1\n+        elapsed += 0.05\n+        time.sleep(0.05)\n+\n+    return False\n+\n class TestNode(NodeConnCB):\n \n     def __init__(self, block_store, tx_store):\n@@ -43,6 +57,10 @@ def __init__(self, block_store, tx_store):\n         # a response\n         self.pingMap = {} \n         self.lastInv = []\n+        self.closed = False\n+\n+    def on_close(self, conn):\n+        self.closed = True\n \n     def add_connection(self, conn):\n         self.conn = conn\n@@ -132,61 +150,48 @@ class TestManager(object):\n     def __init__(self, testgen, datadir):\n         self.test_generator = testgen\n         self.connections    = []\n+        self.test_nodes     = []\n         self.block_store    = BlockStore(datadir)\n         self.tx_store       = TxStore(datadir)\n         self.ping_counter   = 1\n \n     def add_all_connections(self, nodes):\n         for i in range(len(nodes)):\n             # Create a p2p connection to each node\n-            self.connections.append(NodeConn('127.0.0.1', p2p_port(i), \n-                        nodes[i], TestNode(self.block_store, self.tx_store)))\n+            test_node = TestNode(self.block_store, self.tx_store)\n+            self.test_nodes.append(test_node)\n+            self.connections.append(NodeConn('127.0.0.1', p2p_port(i), nodes[i], test_node))\n             # Make sure the TestNode (callback class) has a reference to its\n             # associated NodeConn\n-            self.connections[-1].cb.add_connection(self.connections[-1])\n+            test_node.add_connection(self.connections[-1])\n+\n+    def wait_for_disconnections(self):\n+        def disconnected():\n+            return all(node.closed for node in self.test_nodes)\n+        return wait_until(disconnected, timeout=10)\n \n     def wait_for_verack(self):\n-        sleep_time = 0.05\n-        max_tries = 10 / sleep_time  # Wait at most 10 seconds\n-        while max_tries > 0:\n-            done = True\n-            with mininode_lock:\n-                for c in self.connections:\n-                    if c.cb.verack_received is False:\n-                        done = False\n-                        break\n-            if done:\n-                break\n-            time.sleep(sleep_time)\n+        def veracked():\n+            return all(node.verack_received for node in self.test_nodes)\n+        return wait_until(veracked, timeout=10)\n \n     def wait_for_pings(self, counter):\n-        received_pongs = False\n-        while received_pongs is not True:\n-            time.sleep(0.05)\n-            received_pongs = True\n-            with mininode_lock:\n-                for c in self.connections:\n-                    if c.cb.received_ping_response(counter) is not True:\n-                        received_pongs = False\n-                        break\n+        def received_pongs():\n+            return all(node.received_ping_response(counter) for node in self.test_nodes)\n+        return wait_until(received_pongs)\n \n     # sync_blocks: Wait for all connections to request the blockhash given\n     # then send get_headers to find out the tip of each node, and synchronize\n     # the response by using a ping (and waiting for pong with same nonce).\n     def sync_blocks(self, blockhash, num_blocks):\n-        # Wait for nodes to request block (50ms sleep * 20 tries * num_blocks)\n-        max_tries = 20*num_blocks\n-        while max_tries > 0:\n-            with mininode_lock:\n-                results = [ blockhash in c.cb.block_request_map and\n-                            c.cb.block_request_map[blockhash] for c in self.connections ]\n-            if False not in results:\n-                break\n-            time.sleep(0.05)\n-            max_tries -= 1\n+        def blocks_requested():\n+            return all(\n+                blockhash in node.block_request_map and node.block_request_map[blockhash]\n+                for node in self.test_nodes\n+            )\n \n         # --> error if not requested\n-        if max_tries == 0:\n+        if not wait_until(blocks_requested, attempts=20*num_blocks):\n             # print [ c.cb.block_request_map for c in self.connections ]\n             raise AssertionError(\"Not all nodes requested block\")\n         # --> Answer request (we did this inline!)\n@@ -202,18 +207,14 @@ def sync_blocks(self, blockhash, num_blocks):\n     # Analogous to sync_block (see above)\n     def sync_transaction(self, txhash, num_events):\n         # Wait for nodes to request transaction (50ms sleep * 20 tries * num_events)\n-        max_tries = 20*num_events\n-        while max_tries > 0:\n-            with mininode_lock:\n-                results = [ txhash in c.cb.tx_request_map and\n-                            c.cb.tx_request_map[txhash] for c in self.connections ]\n-            if False not in results:\n-                break\n-            time.sleep(0.05)\n-            max_tries -= 1\n+        def transaction_requested():\n+            return all(\n+                txhash in node.tx_request_map and node.tx_request_map[txhash]\n+                for node in self.test_nodes\n+            )\n \n         # --> error if not requested\n-        if max_tries == 0:\n+        if not wait_until(transaction_requested, attempts=20*num_events):\n             # print [ c.cb.tx_request_map for c in self.connections ]\n             raise AssertionError(\"Not all nodes requested transaction\")\n         # --> Answer request (we did this inline!)\n@@ -336,6 +337,7 @@ def run(self):\n             print \"Test %d: PASS\" % test_number, [ c.rpc.getblockcount() for c in self.connections ]\n             test_number += 1\n \n+        [ c.disconnect_node() for c in self.connections ]\n+        self.wait_for_disconnections()\n         self.block_store.close()\n         self.tx_store.close()\n-        [ c.disconnect_node() for c in self.connections ]"
      }
    ]
  },
  {
    "sha": "39ddaeb8fe3a2493401b7182804f3c262c1a213c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOWRkYWViOGZlM2EyNDkzNDAxYjcxODI4MDRmM2MyNjJjMWEyMTNj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-17T14:50:55Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-17T14:52:57Z"
      },
      "message": "Merge pull request #6551\n\n243b80d Handle leveldb::DestroyDB() errors on wipe failure (Adam Weiss)",
      "tree": {
        "sha": "7f9ccf23d0fd0102e2156e08cf3e5a587b4a14c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7f9ccf23d0fd0102e2156e08cf3e5a587b4a14c9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/39ddaeb8fe3a2493401b7182804f3c262c1a213c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJV0fVJAAoJEHSBCwEjRsmmPdAIAJ64Sp61E0+xnnMbshUjbUgD\nLxQkwjiGrHgPaYKvWTfoX4pxBmoynqQUOZ9KNT+F/pNJNzpIBno7B3rewsiE0duZ\n7ShUyEV0Ob9srbyv8h3K8wDwXQLb6S9FYd6HMJ8m/UG248g2X5/WmwVanL61g9C8\nyknU5S/and3piy9JbJeEux5H2/MMopIGK5I/mcAtPSLLW9Jor6oskBO5OCJ7f8H3\nEzgahqWZO0wigkH8OZAWtQgTCgFi1wgrhtQQIif4s2TYNF+aVjBoEJyFrDuFxJYg\naSP4T3mbOdhYbO4TzBjiMqPruO+hYj9+e193ikTLHiJZB198diR5OdHrM7B8YDo=\n=kI3d\n-----END PGP SIGNATURE-----",
        "payload": "tree 7f9ccf23d0fd0102e2156e08cf3e5a587b4a14c9\nparent bb4faee21e61c8449fa5a3186e3e9a22d6b11d7f\nparent 243b80d29235b07f8a26fb51e2af3a949c8fc1fd\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1439823055 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1439823177 +0200\n\nMerge pull request #6551\n\n243b80d Handle leveldb::DestroyDB() errors on wipe failure (Adam Weiss)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39ddaeb8fe3a2493401b7182804f3c262c1a213c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/39ddaeb8fe3a2493401b7182804f3c262c1a213c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39ddaeb8fe3a2493401b7182804f3c262c1a213c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bb4faee21e61c8449fa5a3186e3e9a22d6b11d7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb4faee21e61c8449fa5a3186e3e9a22d6b11d7f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb4faee21e61c8449fa5a3186e3e9a22d6b11d7f"
      },
      {
        "sha": "243b80d29235b07f8a26fb51e2af3a949c8fc1fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/243b80d29235b07f8a26fb51e2af3a949c8fc1fd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/243b80d29235b07f8a26fb51e2af3a949c8fc1fd"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "26cacf95ae91909642f2babf208d8fc468d5d11b",
        "filename": "src/leveldbwrapper.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/39ddaeb8fe3a2493401b7182804f3c262c1a213c/src/leveldbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/39ddaeb8fe3a2493401b7182804f3c262c1a213c/src/leveldbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldbwrapper.cpp?ref=39ddaeb8fe3a2493401b7182804f3c262c1a213c",
        "patch": "@@ -58,7 +58,8 @@ CLevelDBWrapper::CLevelDBWrapper(const boost::filesystem::path& path, size_t nCa\n     } else {\n         if (fWipe) {\n             LogPrintf(\"Wiping LevelDB in %s\\n\", path.string());\n-            leveldb::DestroyDB(path.string(), options);\n+            leveldb::Status result = leveldb::DestroyDB(path.string(), options);\n+            HandleError(result);\n         }\n         TryCreateDirectory(path);\n         LogPrintf(\"Opening LevelDB in %s\\n\", path.string());"
      }
    ]
  },
  {
    "sha": "1e92b275406e3fbc7ab59d2ada1c882ca15fb36f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZTkyYjI3NTQwNmUzZmJjN2FiNTlkMmFkYTFjODgyY2ExNWZiMzZm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-17T15:05:35Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-17T15:06:24Z"
      },
      "message": "Merge pull request #6553\n\n183b8fb Add missing files to files.md (fanquake)",
      "tree": {
        "sha": "fdbab63e06f1470af0f2f3b68b81f62b28f23064",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fdbab63e06f1470af0f2f3b68b81f62b28f23064"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e92b275406e3fbc7ab59d2ada1c882ca15fb36f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJV0fhwAAoJEHSBCwEjRsmmZMsH/0XfpPFdN/7LJZFtyfy6ZSBl\nm8/efZj6VxOdrDZIlvT6T+cZrZ+Oqwckt5UtU7NdThegUhYgcVwB8IZi12zcFGXf\nvN1Sb2yILDhLxrlSQX48N7KMeDQVjpWHIhLGTrTm96QfmJ17k9Nds3D5Tffwsk92\nn3SloEC3N45WRf2xD8VgFDekXa+ooOjsTEaZwNYqho0hEEn2k91lS5raN6YdOUxB\n1s8GcDqwiUtC/JFQqZV7AOR+euxsgUy7OFnikVedgehxu459lDIaSJUbdjovGcVl\nVRGzmseylIPGWsB9Uyiyb6E48tWwAgoowQ+dZnGxMXLrB5E0VgoLmoxcIxW5j5Y=\n=Qizy\n-----END PGP SIGNATURE-----",
        "payload": "tree fdbab63e06f1470af0f2f3b68b81f62b28f23064\nparent 39ddaeb8fe3a2493401b7182804f3c262c1a213c\nparent 183b8fbeb085fd07b2e231b2ba4ad8c93f9dee9d\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1439823935 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1439823984 +0200\n\nMerge pull request #6553\n\n183b8fb Add missing files to files.md (fanquake)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e92b275406e3fbc7ab59d2ada1c882ca15fb36f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1e92b275406e3fbc7ab59d2ada1c882ca15fb36f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e92b275406e3fbc7ab59d2ada1c882ca15fb36f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "39ddaeb8fe3a2493401b7182804f3c262c1a213c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39ddaeb8fe3a2493401b7182804f3c262c1a213c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/39ddaeb8fe3a2493401b7182804f3c262c1a213c"
      },
      {
        "sha": "183b8fbeb085fd07b2e231b2ba4ad8c93f9dee9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/183b8fbeb085fd07b2e231b2ba4ad8c93f9dee9d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/183b8fbeb085fd07b2e231b2ba4ad8c93f9dee9d"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 9,
      "deletions": 4
    },
    "files": [
      {
        "sha": "c083bcb038c941d18244fbeca3f07e1cedb28b83",
        "filename": "doc/files.md",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e92b275406e3fbc7ab59d2ada1c882ca15fb36f/doc/files.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e92b275406e3fbc7ab59d2ada1c882ca15fb36f/doc/files.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/files.md?ref=1e92b275406e3fbc7ab59d2ada1c882ca15fb36f",
        "patch": "@@ -1,12 +1,17 @@\n-Used in 0.8.0\n----------------------\n-* wallet.dat: personal wallet (BDB) with keys and transactions\n-* peers.dat: peer IP address database (custom format); since 0.7.0\n+\n+* banlist.dat: stores the IPs/Subnets of banned nodes\n+* bitcoin.conf: contains configuration settings for bitcoind or bitcoin-qt\n+* bitcoind.pid: stores the process id of bitcoind while running\n * blocks/blk000??.dat: block data (custom, 128 MiB per file); since 0.8.0\n * blocks/rev000??.dat; block undo data (custom); since 0.8.0 (format changed since pre-0.8)\n * blocks/index/*; block index (LevelDB); since 0.8.0\n * chainstate/*; block chain state database (LevelDB); since 0.8.0\n * database/*: BDB database environment; only used for wallet since 0.8.0\n+* db.log: wallet database log file\n+* debug.log: contains debug information and general logging generated by bitcoind or bitcoin-qt\n+* fee_estimates.dat: stores statistics used to estimate minimum transaction fees and priorities required for confirmation; since 0.10.0\n+* peers.dat: peer IP address database (custom format); since 0.7.0\n+* wallet.dat: personal wallet (BDB) with keys and transactions\n \n Only used in pre-0.8.0\n ---------------------"
      }
    ]
  },
  {
    "sha": "fd2d862fbc4d13129bfa3702a9241d9ea46ddae5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZDJkODYyZmJjNGQxMzEyOWJmYTM3MDJhOTI0MWQ5ZWE0NmRkYWU1",
    "commit": {
      "author": {
        "name": "Casey Rodarmor",
        "email": "casey@rodarmor.com",
        "date": "2015-08-17T16:05:47Z"
      },
      "committer": {
        "name": "Casey Rodarmor",
        "email": "casey@rodarmor.com",
        "date": "2015-08-17T16:15:32Z"
      },
      "message": "Make limited map actually respect max size",
      "tree": {
        "sha": "000b8543ca8b5a0bf669b11846c62e8c41058b94",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/000b8543ca8b5a0bf669b11846c62e8c41058b94"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fd2d862fbc4d13129bfa3702a9241d9ea46ddae5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd2d862fbc4d13129bfa3702a9241d9ea46ddae5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fd2d862fbc4d13129bfa3702a9241d9ea46ddae5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd2d862fbc4d13129bfa3702a9241d9ea46ddae5/comments",
    "author": {
      "login": "casey",
      "id": 1945,
      "node_id": "MDQ6VXNlcjE5NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/casey",
      "html_url": "https://github.com/casey",
      "followers_url": "https://api.github.com/users/casey/followers",
      "following_url": "https://api.github.com/users/casey/following{/other_user}",
      "gists_url": "https://api.github.com/users/casey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/casey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/casey/subscriptions",
      "organizations_url": "https://api.github.com/users/casey/orgs",
      "repos_url": "https://api.github.com/users/casey/repos",
      "events_url": "https://api.github.com/users/casey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/casey/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "casey",
      "id": 1945,
      "node_id": "MDQ6VXNlcjE5NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/casey",
      "html_url": "https://github.com/casey",
      "followers_url": "https://api.github.com/users/casey/followers",
      "following_url": "https://api.github.com/users/casey/following{/other_user}",
      "gists_url": "https://api.github.com/users/casey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/casey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/casey/subscriptions",
      "organizations_url": "https://api.github.com/users/casey/orgs",
      "repos_url": "https://api.github.com/users/casey/repos",
      "events_url": "https://api.github.com/users/casey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/casey/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1e92b275406e3fbc7ab59d2ada1c882ca15fb36f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e92b275406e3fbc7ab59d2ada1c882ca15fb36f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1e92b275406e3fbc7ab59d2ada1c882ca15fb36f"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b990eab3ee108337f9a2f910e969d47bf103aa00",
        "filename": "src/limitedmap.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd2d862fbc4d13129bfa3702a9241d9ea46ddae5/src/limitedmap.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd2d862fbc4d13129bfa3702a9241d9ea46ddae5/src/limitedmap.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/limitedmap.h?ref=fd2d862fbc4d13129bfa3702a9241d9ea46ddae5",
        "patch": "@@ -38,7 +38,7 @@ class limitedmap\n     {\n         std::pair<iterator, bool> ret = map.insert(x);\n         if (ret.second) {\n-            if (nMaxSize && map.size() == nMaxSize) {\n+            if (nMaxSize && map.size() > nMaxSize) {\n                 map.erase(rmap.begin()->second);\n                 rmap.erase(rmap.begin());\n             }"
      }
    ]
  },
  {
    "sha": "8b0689419470b5c3458142c055f80721c857b121",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YjA2ODk0MTk0NzBiNWMzNDU4MTQyYzA1NWY4MDcyMWM4NTdiMTIx",
    "commit": {
      "author": {
        "name": "Casey Rodarmor",
        "email": "casey@rodarmor.com",
        "date": "2015-08-17T16:06:45Z"
      },
      "committer": {
        "name": "Casey Rodarmor",
        "email": "casey@rodarmor.com",
        "date": "2015-08-17T16:15:32Z"
      },
      "message": "Disallow unlimited limited maps",
      "tree": {
        "sha": "2a1ae44e72a234f07f0f12f9f9c981a76aada220",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2a1ae44e72a234f07f0f12f9f9c981a76aada220"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8b0689419470b5c3458142c055f80721c857b121",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b0689419470b5c3458142c055f80721c857b121",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8b0689419470b5c3458142c055f80721c857b121",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b0689419470b5c3458142c055f80721c857b121/comments",
    "author": {
      "login": "casey",
      "id": 1945,
      "node_id": "MDQ6VXNlcjE5NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/casey",
      "html_url": "https://github.com/casey",
      "followers_url": "https://api.github.com/users/casey/followers",
      "following_url": "https://api.github.com/users/casey/following{/other_user}",
      "gists_url": "https://api.github.com/users/casey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/casey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/casey/subscriptions",
      "organizations_url": "https://api.github.com/users/casey/orgs",
      "repos_url": "https://api.github.com/users/casey/repos",
      "events_url": "https://api.github.com/users/casey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/casey/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "casey",
      "id": 1945,
      "node_id": "MDQ6VXNlcjE5NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/casey",
      "html_url": "https://github.com/casey",
      "followers_url": "https://api.github.com/users/casey/followers",
      "following_url": "https://api.github.com/users/casey/following{/other_user}",
      "gists_url": "https://api.github.com/users/casey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/casey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/casey/subscriptions",
      "organizations_url": "https://api.github.com/users/casey/orgs",
      "repos_url": "https://api.github.com/users/casey/repos",
      "events_url": "https://api.github.com/users/casey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/casey/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fd2d862fbc4d13129bfa3702a9241d9ea46ddae5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd2d862fbc4d13129bfa3702a9241d9ea46ddae5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fd2d862fbc4d13129bfa3702a9241d9ea46ddae5"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 11,
      "deletions": 8
    },
    "files": [
      {
        "sha": "5456dfc7c4aaf470b86d5a1b853a42e9b903ca2e",
        "filename": "src/limitedmap.h",
        "status": "modified",
        "additions": 11,
        "deletions": 8,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b0689419470b5c3458142c055f80721c857b121/src/limitedmap.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b0689419470b5c3458142c055f80721c857b121/src/limitedmap.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/limitedmap.h?ref=8b0689419470b5c3458142c055f80721c857b121",
        "patch": "@@ -27,7 +27,11 @@ class limitedmap\n     size_type nMaxSize;\n \n public:\n-    limitedmap(size_type nMaxSizeIn = 0) { nMaxSize = nMaxSizeIn; }\n+    limitedmap(size_type nMaxSizeIn)\n+    {\n+        assert(nMaxSizeIn > 0);\n+        nMaxSize = nMaxSizeIn;\n+    }\n     const_iterator begin() const { return map.begin(); }\n     const_iterator end() const { return map.end(); }\n     size_type size() const { return map.size(); }\n@@ -38,13 +42,12 @@ class limitedmap\n     {\n         std::pair<iterator, bool> ret = map.insert(x);\n         if (ret.second) {\n-            if (nMaxSize && map.size() > nMaxSize) {\n+            if (map.size() > nMaxSize) {\n                 map.erase(rmap.begin()->second);\n                 rmap.erase(rmap.begin());\n             }\n             rmap.insert(make_pair(x.second, ret.first));\n         }\n-        return;\n     }\n     void erase(const key_type& k)\n     {\n@@ -81,11 +84,11 @@ class limitedmap\n     size_type max_size() const { return nMaxSize; }\n     size_type max_size(size_type s)\n     {\n-        if (s)\n-            while (map.size() > s) {\n-                map.erase(rmap.begin()->second);\n-                rmap.erase(rmap.begin());\n-            }\n+        assert(s > 0);\n+        while (map.size() > s) {\n+            map.erase(rmap.begin()->second);\n+            rmap.erase(rmap.begin());\n+        }\n         nMaxSize = s;\n         return nMaxSize;\n     }"
      }
    ]
  },
  {
    "sha": "7bd57bb1d79710a60459dfdefdc5c96ec3762eb9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YmQ1N2JiMWQ3OTcxMGE2MDQ1OWRmZGVmZGM1Yzk2ZWMzNzYyZWI5",
    "commit": {
      "author": {
        "name": "Casey Rodarmor",
        "email": "casey@rodarmor.com",
        "date": "2015-08-17T16:07:47Z"
      },
      "committer": {
        "name": "Casey Rodarmor",
        "email": "casey@rodarmor.com",
        "date": "2015-08-17T16:15:32Z"
      },
      "message": "Add limitedmap test",
      "tree": {
        "sha": "c4ddf2c59433bba3c19c54ba30d07ae136158447",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c4ddf2c59433bba3c19c54ba30d07ae136158447"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7bd57bb1d79710a60459dfdefdc5c96ec3762eb9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bd57bb1d79710a60459dfdefdc5c96ec3762eb9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7bd57bb1d79710a60459dfdefdc5c96ec3762eb9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bd57bb1d79710a60459dfdefdc5c96ec3762eb9/comments",
    "author": {
      "login": "casey",
      "id": 1945,
      "node_id": "MDQ6VXNlcjE5NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/casey",
      "html_url": "https://github.com/casey",
      "followers_url": "https://api.github.com/users/casey/followers",
      "following_url": "https://api.github.com/users/casey/following{/other_user}",
      "gists_url": "https://api.github.com/users/casey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/casey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/casey/subscriptions",
      "organizations_url": "https://api.github.com/users/casey/orgs",
      "repos_url": "https://api.github.com/users/casey/repos",
      "events_url": "https://api.github.com/users/casey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/casey/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "casey",
      "id": 1945,
      "node_id": "MDQ6VXNlcjE5NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/casey",
      "html_url": "https://github.com/casey",
      "followers_url": "https://api.github.com/users/casey/followers",
      "following_url": "https://api.github.com/users/casey/following{/other_user}",
      "gists_url": "https://api.github.com/users/casey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/casey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/casey/subscriptions",
      "organizations_url": "https://api.github.com/users/casey/orgs",
      "repos_url": "https://api.github.com/users/casey/repos",
      "events_url": "https://api.github.com/users/casey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/casey/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8b0689419470b5c3458142c055f80721c857b121",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b0689419470b5c3458142c055f80721c857b121",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8b0689419470b5c3458142c055f80721c857b121"
      }
    ],
    "stats": {
      "total": 102,
      "additions": 102,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fc4e047c356c517c3294c0a80078f59eb59aa9a1",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7bd57bb1d79710a60459dfdefdc5c96ec3762eb9/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7bd57bb1d79710a60459dfdefdc5c96ec3762eb9/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=7bd57bb1d79710a60459dfdefdc5c96ec3762eb9",
        "patch": "@@ -52,6 +52,7 @@ BITCOIN_TESTS =\\\n   test/getarg_tests.cpp \\\n   test/hash_tests.cpp \\\n   test/key_tests.cpp \\\n+  test/limitedmap_tests.cpp \\\n   test/main_tests.cpp \\\n   test/mempool_tests.cpp \\\n   test/miner_tests.cpp \\"
      },
      {
        "sha": "faaddffad8a82a7e806f3aa1edd7c078e0cce296",
        "filename": "src/test/limitedmap_tests.cpp",
        "status": "added",
        "additions": 101,
        "deletions": 0,
        "changes": 101,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7bd57bb1d79710a60459dfdefdc5c96ec3762eb9/src/test/limitedmap_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7bd57bb1d79710a60459dfdefdc5c96ec3762eb9/src/test/limitedmap_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/limitedmap_tests.cpp?ref=7bd57bb1d79710a60459dfdefdc5c96ec3762eb9",
        "patch": "@@ -0,0 +1,101 @@\n+// Copyright (c) 2012-2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"limitedmap.h\"\n+\n+#include \"test/test_bitcoin.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(limitedmap_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(limitedmap_test)\n+{\n+    // create a limitedmap capped at 10 items\n+    limitedmap<int, int> map(10);\n+\n+    // check that the max size is 10\n+    BOOST_CHECK(map.max_size() == 10);\n+\n+    // check that it's empty\n+    BOOST_CHECK(map.size() == 0);\n+\n+    // insert (-1, -1)\n+    map.insert(std::pair<int, int>(-1, -1));\n+\n+    // make sure that the size is updated\n+    BOOST_CHECK(map.size() == 1);\n+\n+    // make sure that the new items is in the map\n+    BOOST_CHECK(map.count(-1) == 1);\n+\n+    // insert 10 new items\n+    for (int i = 0; i < 10; i++) {\n+        map.insert(std::pair<int, int>(i, i + 1));\n+    }\n+\n+    // make sure that the map now contains 10 items...\n+    BOOST_CHECK(map.size() == 10);\n+\n+    // ...and that the first item has been discarded\n+    BOOST_CHECK(map.count(-1) == 0);\n+\n+    // iterate over the map, both with an index and an iterator\n+    limitedmap<int, int>::const_iterator it = map.begin();\n+    for (int i = 0; i < 10; i++) {\n+        // make sure the item is present\n+        BOOST_CHECK(map.count(i) == 1);\n+\n+        // use the iterator to check for the expected key adn value\n+        BOOST_CHECK(it->first == i);\n+        BOOST_CHECK(it->second == i + 1);\n+        \n+        // use find to check for the value\n+        BOOST_CHECK(map.find(i)->second == i + 1);\n+        \n+        // update and recheck\n+        map.update(it, i + 2);\n+        BOOST_CHECK(map.find(i)->second == i + 2);\n+\n+        it++;\n+    }\n+\n+    // check that we've exhausted the iterator\n+    BOOST_CHECK(it == map.end());\n+\n+    // resize the map to 5 items\n+    map.max_size(5);\n+\n+    // check that the max size and size are now 5\n+    BOOST_CHECK(map.max_size() == 5);\n+    BOOST_CHECK(map.size() == 5);\n+\n+    // check that items less than 5 have been discarded\n+    // and items greater than 5 are retained\n+    for (int i = 0; i < 10; i++) {\n+        if (i < 5) {\n+            BOOST_CHECK(map.count(i) == 0);\n+        } else {\n+            BOOST_CHECK(map.count(i) == 1);\n+        }\n+    }\n+\n+    // erase some items not in the map\n+    for (int i = 100; i < 1000; i += 100) {\n+        map.erase(i);\n+    }\n+\n+    // check that the size is unaffected\n+    BOOST_CHECK(map.size() == 5);\n+\n+    // erase the remaining elements\n+    for (int i = 5; i < 10; i++) {\n+        map.erase(i);\n+    }\n+\n+    // check that the map is now empty\n+    BOOST_CHECK(map.empty());\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "20165769989ed5aa744af2b73dfcf9d5a5cf7aa0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMDE2NTc2OTk4OWVkNWFhNzQ0YWYyYjczZGZjZjlkNWE1Y2Y3YWEw",
    "commit": {
      "author": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2015-08-18T07:07:33Z"
      },
      "committer": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2015-08-18T07:07:33Z"
      },
      "message": "Fix crash when mining with empty keypool.\n\nSince the introduction of the ScriptForMining callback, the mining\nfunctions (setgenerate and generate) crash with an assertion failure\n(due to a NULL pointer script returned) if the keypool is empty.  Fix\nthis by giving a proper error.",
      "tree": {
        "sha": "56692e75f44ad30ef55eaa42764e46f0643b35b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/56692e75f44ad30ef55eaa42764e46f0643b35b1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/20165769989ed5aa744af2b73dfcf9d5a5cf7aa0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20165769989ed5aa744af2b73dfcf9d5a5cf7aa0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/20165769989ed5aa744af2b73dfcf9d5a5cf7aa0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20165769989ed5aa744af2b73dfcf9d5a5cf7aa0/comments",
    "author": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1e92b275406e3fbc7ab59d2ada1c882ca15fb36f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e92b275406e3fbc7ab59d2ada1c882ca15fb36f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1e92b275406e3fbc7ab59d2ada1c882ca15fb36f"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 24,
      "deletions": 3
    },
    "files": [
      {
        "sha": "5a67220021c96699abc6c113a6d9712c89a506d7",
        "filename": "qa/rpc-tests/keypool.py",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20165769989ed5aa744af2b73dfcf9d5a5cf7aa0/qa/rpc-tests/keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20165769989ed5aa744af2b73dfcf9d5a5cf7aa0/qa/rpc-tests/keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/keypool.py?ref=20165769989ed5aa744af2b73dfcf9d5a5cf7aa0",
        "patch": "@@ -73,6 +73,21 @@ def run_test(nodes, tmpdir):\n     except JSONRPCException,e:\n         assert(e.error['code']==-12)\n \n+    # refill keypool with three new addresses\n+    nodes[0].walletpassphrase('test', 12000)\n+    nodes[0].keypoolrefill(3)\n+    nodes[0].walletlock()\n+\n+    # drain them by mining\n+    nodes[0].generate(1)\n+    nodes[0].generate(1)\n+    nodes[0].generate(1)\n+    nodes[0].generate(1)\n+    try:\n+        nodes[0].generate(1)\n+        raise AssertionError('Keypool should be exhausted after three addesses')\n+    except JSONRPCException,e:\n+        assert(e.error['code']==-12)\n \n def main():\n     import optparse"
      },
      {
        "sha": "9dd1d459b5cf082fea4d102a681f332370b217f2",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20165769989ed5aa744af2b73dfcf9d5a5cf7aa0/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20165769989ed5aa744af2b73dfcf9d5a5cf7aa0/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=20165769989ed5aa744af2b73dfcf9d5a5cf7aa0",
        "patch": "@@ -444,8 +444,10 @@ void static BitcoinMiner(const CChainParams& chainparams)\n     GetMainSignals().ScriptForMining(coinbaseScript);\n \n     try {\n-        //throw an error if no script was provided\n-        if (!coinbaseScript->reserveScript.size())\n+        // Throw an error if no script was provided.  This can happen\n+        // due to some internal error but also if the keypool is empty.\n+        // In the latter case, already the pointer is NULL.\n+        if (!coinbaseScript || coinbaseScript->reserveScript.empty())\n             throw std::runtime_error(\"No coinbase script available (mining requires a wallet)\");\n \n         while (true) {"
      },
      {
        "sha": "620a46be156920bf1fb28f62d54ccde96f905319",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20165769989ed5aa744af2b73dfcf9d5a5cf7aa0/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20165769989ed5aa744af2b73dfcf9d5a5cf7aa0/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=20165769989ed5aa744af2b73dfcf9d5a5cf7aa0",
        "patch": "@@ -138,8 +138,12 @@ UniValue generate(const UniValue& params, bool fHelp)\n     boost::shared_ptr<CReserveScript> coinbaseScript;\n     GetMainSignals().ScriptForMining(coinbaseScript);\n \n+    // If the keypool is exhausted, no script is returned at all.  Catch this.\n+    if (!coinbaseScript)\n+        throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n+\n     //throw an error if no script was provided\n-    if (!coinbaseScript->reserveScript.size())\n+    if (coinbaseScript->reserveScript.empty())\n         throw JSONRPCError(RPC_INTERNAL_ERROR, \"No coinbase script available (mining requires a wallet)\");\n \n     {   // Don't keep cs_main locked"
      }
    ]
  },
  {
    "sha": "fb08d92312312c6c896327d264a8e9915fdafae7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYjA4ZDkyMzEyMzEyYzZjODk2MzI3ZDI2NGE4ZTk5MTVmZGFmYWU3",
    "commit": {
      "author": {
        "name": "Casey Rodarmor",
        "email": "casey@rodarmor.com",
        "date": "2015-08-17T21:30:46Z"
      },
      "committer": {
        "name": "Casey Rodarmor",
        "email": "casey@rodarmor.com",
        "date": "2015-08-18T14:40:13Z"
      },
      "message": "Make sure we re-acquire lock if a task throws",
      "tree": {
        "sha": "3bf610d11f4966df598f0685aa2e9f04ff378fb0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3bf610d11f4966df598f0685aa2e9f04ff378fb0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb08d92312312c6c896327d264a8e9915fdafae7",
      "comment_count": 1,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb08d92312312c6c896327d264a8e9915fdafae7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fb08d92312312c6c896327d264a8e9915fdafae7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb08d92312312c6c896327d264a8e9915fdafae7/comments",
    "author": {
      "login": "casey",
      "id": 1945,
      "node_id": "MDQ6VXNlcjE5NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/casey",
      "html_url": "https://github.com/casey",
      "followers_url": "https://api.github.com/users/casey/followers",
      "following_url": "https://api.github.com/users/casey/following{/other_user}",
      "gists_url": "https://api.github.com/users/casey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/casey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/casey/subscriptions",
      "organizations_url": "https://api.github.com/users/casey/orgs",
      "repos_url": "https://api.github.com/users/casey/repos",
      "events_url": "https://api.github.com/users/casey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/casey/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "casey",
      "id": 1945,
      "node_id": "MDQ6VXNlcjE5NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/casey",
      "html_url": "https://github.com/casey",
      "followers_url": "https://api.github.com/users/casey/followers",
      "following_url": "https://api.github.com/users/casey/following{/other_user}",
      "gists_url": "https://api.github.com/users/casey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/casey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/casey/subscriptions",
      "organizations_url": "https://api.github.com/users/casey/orgs",
      "repos_url": "https://api.github.com/users/casey/repos",
      "events_url": "https://api.github.com/users/casey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/casey/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1e92b275406e3fbc7ab59d2ada1c882ca15fb36f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e92b275406e3fbc7ab59d2ada1c882ca15fb36f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1e92b275406e3fbc7ab59d2ada1c882ca15fb36f"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 7,
      "deletions": 5
    },
    "files": [
      {
        "sha": "06115f5619753178f47f7e5a41f0208678f3f543",
        "filename": "src/scheduler.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb08d92312312c6c896327d264a8e9915fdafae7/src/scheduler.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb08d92312312c6c896327d264a8e9915fdafae7/src/scheduler.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.cpp?ref=fb08d92312312c6c896327d264a8e9915fdafae7",
        "patch": "@@ -6,6 +6,7 @@\n \n #include <assert.h>\n #include <boost/bind.hpp>\n+#include <boost/thread/reverse_lock.hpp>\n #include <utility>\n \n CScheduler::CScheduler() : nThreadsServicingQueue(0), stopRequested(false), stopWhenEmpty(false)\n@@ -65,11 +66,12 @@ void CScheduler::serviceQueue()\n             Function f = taskQueue.begin()->second;\n             taskQueue.erase(taskQueue.begin());\n \n-            // Unlock before calling f, so it can reschedule itself or another task\n-            // without deadlocking:\n-            lock.unlock();\n-            f();\n-            lock.lock();\n+            {\n+                // Unlock before calling f, so it can reschedule itself or another task\n+                // without deadlocking:\n+                boost::reverse_lock<boost::unique_lock<boost::mutex> > rlock(lock);\n+                f();\n+            }\n         } catch (...) {\n             --nThreadsServicingQueue;\n             throw;"
      }
    ]
  },
  {
    "sha": "0f0f323c9a58437b33ba4fa9a67e1edf5fc6cc88",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZjBmMzIzYzlhNTg0MzdiMzNiYTRmYTlhNjdlMWVkZjVmYzZjYzg4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-19T13:02:40Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-19T13:07:38Z"
      },
      "message": "Merge pull request #6567\n\n2016576 Fix crash when mining with empty keypool. (Daniel Kraft)",
      "tree": {
        "sha": "56692e75f44ad30ef55eaa42764e46f0643b35b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/56692e75f44ad30ef55eaa42764e46f0643b35b1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0f0f323c9a58437b33ba4fa9a67e1edf5fc6cc88",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJV1H+aAAoJEHSBCwEjRsmmPBQIAJvnLzyvjil1iDc51JVYXXmE\nIU+JPzgiNQb2FwAxkepAIHWXYLUEok4ecZ1ADaVa7jNGWCdCa7AcBlbBwVhRnakx\nwPu4DWHVvCkNqeGLaIXOkcHbh2sqdMVu9S/9HYQxzlVtA9f8BLq4rNcp6nHyZum4\nVY0wPnV+kBXOF2LYNNepQZP8zZowmFhyhAsEAxofPNWnNTIfnhV+Xacz0SSwb8KA\nsG+C3DjLx9sTfi/mSYuGCrO3LN7GIxKJJe6Eo/Nt9yScRHOY7+/5l5NFsHxdlc01\nLCfyu8TSPznQpG+p/JCLyXqmrx/dkYCyNiMqF2uX2X4nNW9tOZD791MQWUTKJ6o=\n=tRPg\n-----END PGP SIGNATURE-----",
        "payload": "tree 56692e75f44ad30ef55eaa42764e46f0643b35b1\nparent 1e92b275406e3fbc7ab59d2ada1c882ca15fb36f\nparent 20165769989ed5aa744af2b73dfcf9d5a5cf7aa0\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1439989360 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1439989658 +0200\n\nMerge pull request #6567\n\n2016576 Fix crash when mining with empty keypool. (Daniel Kraft)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f0f323c9a58437b33ba4fa9a67e1edf5fc6cc88",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0f0f323c9a58437b33ba4fa9a67e1edf5fc6cc88",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f0f323c9a58437b33ba4fa9a67e1edf5fc6cc88/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1e92b275406e3fbc7ab59d2ada1c882ca15fb36f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e92b275406e3fbc7ab59d2ada1c882ca15fb36f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1e92b275406e3fbc7ab59d2ada1c882ca15fb36f"
      },
      {
        "sha": "20165769989ed5aa744af2b73dfcf9d5a5cf7aa0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20165769989ed5aa744af2b73dfcf9d5a5cf7aa0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/20165769989ed5aa744af2b73dfcf9d5a5cf7aa0"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 24,
      "deletions": 3
    },
    "files": [
      {
        "sha": "5a67220021c96699abc6c113a6d9712c89a506d7",
        "filename": "qa/rpc-tests/keypool.py",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f0f323c9a58437b33ba4fa9a67e1edf5fc6cc88/qa/rpc-tests/keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f0f323c9a58437b33ba4fa9a67e1edf5fc6cc88/qa/rpc-tests/keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/keypool.py?ref=0f0f323c9a58437b33ba4fa9a67e1edf5fc6cc88",
        "patch": "@@ -73,6 +73,21 @@ def run_test(nodes, tmpdir):\n     except JSONRPCException,e:\n         assert(e.error['code']==-12)\n \n+    # refill keypool with three new addresses\n+    nodes[0].walletpassphrase('test', 12000)\n+    nodes[0].keypoolrefill(3)\n+    nodes[0].walletlock()\n+\n+    # drain them by mining\n+    nodes[0].generate(1)\n+    nodes[0].generate(1)\n+    nodes[0].generate(1)\n+    nodes[0].generate(1)\n+    try:\n+        nodes[0].generate(1)\n+        raise AssertionError('Keypool should be exhausted after three addesses')\n+    except JSONRPCException,e:\n+        assert(e.error['code']==-12)\n \n def main():\n     import optparse"
      },
      {
        "sha": "9dd1d459b5cf082fea4d102a681f332370b217f2",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f0f323c9a58437b33ba4fa9a67e1edf5fc6cc88/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f0f323c9a58437b33ba4fa9a67e1edf5fc6cc88/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=0f0f323c9a58437b33ba4fa9a67e1edf5fc6cc88",
        "patch": "@@ -444,8 +444,10 @@ void static BitcoinMiner(const CChainParams& chainparams)\n     GetMainSignals().ScriptForMining(coinbaseScript);\n \n     try {\n-        //throw an error if no script was provided\n-        if (!coinbaseScript->reserveScript.size())\n+        // Throw an error if no script was provided.  This can happen\n+        // due to some internal error but also if the keypool is empty.\n+        // In the latter case, already the pointer is NULL.\n+        if (!coinbaseScript || coinbaseScript->reserveScript.empty())\n             throw std::runtime_error(\"No coinbase script available (mining requires a wallet)\");\n \n         while (true) {"
      },
      {
        "sha": "620a46be156920bf1fb28f62d54ccde96f905319",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f0f323c9a58437b33ba4fa9a67e1edf5fc6cc88/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f0f323c9a58437b33ba4fa9a67e1edf5fc6cc88/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=0f0f323c9a58437b33ba4fa9a67e1edf5fc6cc88",
        "patch": "@@ -138,8 +138,12 @@ UniValue generate(const UniValue& params, bool fHelp)\n     boost::shared_ptr<CReserveScript> coinbaseScript;\n     GetMainSignals().ScriptForMining(coinbaseScript);\n \n+    // If the keypool is exhausted, no script is returned at all.  Catch this.\n+    if (!coinbaseScript)\n+        throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n+\n     //throw an error if no script was provided\n-    if (!coinbaseScript->reserveScript.size())\n+    if (coinbaseScript->reserveScript.empty())\n         throw JSONRPCError(RPC_INTERNAL_ERROR, \"No coinbase script available (mining requires a wallet)\");\n \n     {   // Don't keep cs_main locked"
      }
    ]
  },
  {
    "sha": "e08a7d9d40b982a6ded3008398c542103f81209a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMDhhN2Q5ZDQwYjk4MmE2ZGVkMzAwODM5OGM1NDIxMDNmODEyMDlh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-19T13:44:18Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-19T13:45:14Z"
      },
      "message": "Merge pull request #6561\n\n7bd57bb Add limitedmap test (Casey Rodarmor)\n8b06894 Disallow unlimited limited maps (Casey Rodarmor)\nfd2d862 Make limited map actually respect max size (Casey Rodarmor)",
      "tree": {
        "sha": "1a8d2b18dd987139fb2d07a21ca56614e0b54f8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1a8d2b18dd987139fb2d07a21ca56614e0b54f8b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e08a7d9d40b982a6ded3008398c542103f81209a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJV1IhqAAoJEHSBCwEjRsmm6bUH+QH2RF1KIh1W/XqxmTEw0D3c\nG5sSFM5NBXeMdRf3KzP6UzQ8o0jAlq0hTPRAEqH2qFIIc6RIQzAEm9J8h+ChI4nE\ne/5JNyC6DZ9NuVToak3XhB+TG0XkaYSTYfQF0p96gx7OHbJqPxkqcQj/7BTnM7XZ\nD0qQIrvCBG4RrrmSDCUmsuNVhVjO9toJDrTyTwQ7B6tJ0sKhwyBx9wvjDYzpcqX6\nsKGRPmdlKK0Ptglc0DruNrTlQK1y/LPiv5sLv611r/hrJW06w+uZC/UlkwHbzsdW\nbQRzhcJ7jlDyuI1PlZ18rv0/GGpXkKPic2i0JqZW2pLt9sZ0cskN7QSurwN3NYo=\n=6j98\n-----END PGP SIGNATURE-----",
        "payload": "tree 1a8d2b18dd987139fb2d07a21ca56614e0b54f8b\nparent 0f0f323c9a58437b33ba4fa9a67e1edf5fc6cc88\nparent 7bd57bb1d79710a60459dfdefdc5c96ec3762eb9\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1439991858 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1439991914 +0200\n\nMerge pull request #6561\n\n7bd57bb Add limitedmap test (Casey Rodarmor)\n8b06894 Disallow unlimited limited maps (Casey Rodarmor)\nfd2d862 Make limited map actually respect max size (Casey Rodarmor)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e08a7d9d40b982a6ded3008398c542103f81209a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e08a7d9d40b982a6ded3008398c542103f81209a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e08a7d9d40b982a6ded3008398c542103f81209a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0f0f323c9a58437b33ba4fa9a67e1edf5fc6cc88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f0f323c9a58437b33ba4fa9a67e1edf5fc6cc88",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0f0f323c9a58437b33ba4fa9a67e1edf5fc6cc88"
      },
      {
        "sha": "7bd57bb1d79710a60459dfdefdc5c96ec3762eb9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bd57bb1d79710a60459dfdefdc5c96ec3762eb9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7bd57bb1d79710a60459dfdefdc5c96ec3762eb9"
      }
    ],
    "stats": {
      "total": 121,
      "additions": 113,
      "deletions": 8
    },
    "files": [
      {
        "sha": "fc4e047c356c517c3294c0a80078f59eb59aa9a1",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e08a7d9d40b982a6ded3008398c542103f81209a/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e08a7d9d40b982a6ded3008398c542103f81209a/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=e08a7d9d40b982a6ded3008398c542103f81209a",
        "patch": "@@ -52,6 +52,7 @@ BITCOIN_TESTS =\\\n   test/getarg_tests.cpp \\\n   test/hash_tests.cpp \\\n   test/key_tests.cpp \\\n+  test/limitedmap_tests.cpp \\\n   test/main_tests.cpp \\\n   test/mempool_tests.cpp \\\n   test/miner_tests.cpp \\"
      },
      {
        "sha": "5456dfc7c4aaf470b86d5a1b853a42e9b903ca2e",
        "filename": "src/limitedmap.h",
        "status": "modified",
        "additions": 11,
        "deletions": 8,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e08a7d9d40b982a6ded3008398c542103f81209a/src/limitedmap.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e08a7d9d40b982a6ded3008398c542103f81209a/src/limitedmap.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/limitedmap.h?ref=e08a7d9d40b982a6ded3008398c542103f81209a",
        "patch": "@@ -27,7 +27,11 @@ class limitedmap\n     size_type nMaxSize;\n \n public:\n-    limitedmap(size_type nMaxSizeIn = 0) { nMaxSize = nMaxSizeIn; }\n+    limitedmap(size_type nMaxSizeIn)\n+    {\n+        assert(nMaxSizeIn > 0);\n+        nMaxSize = nMaxSizeIn;\n+    }\n     const_iterator begin() const { return map.begin(); }\n     const_iterator end() const { return map.end(); }\n     size_type size() const { return map.size(); }\n@@ -38,13 +42,12 @@ class limitedmap\n     {\n         std::pair<iterator, bool> ret = map.insert(x);\n         if (ret.second) {\n-            if (nMaxSize && map.size() == nMaxSize) {\n+            if (map.size() > nMaxSize) {\n                 map.erase(rmap.begin()->second);\n                 rmap.erase(rmap.begin());\n             }\n             rmap.insert(make_pair(x.second, ret.first));\n         }\n-        return;\n     }\n     void erase(const key_type& k)\n     {\n@@ -81,11 +84,11 @@ class limitedmap\n     size_type max_size() const { return nMaxSize; }\n     size_type max_size(size_type s)\n     {\n-        if (s)\n-            while (map.size() > s) {\n-                map.erase(rmap.begin()->second);\n-                rmap.erase(rmap.begin());\n-            }\n+        assert(s > 0);\n+        while (map.size() > s) {\n+            map.erase(rmap.begin()->second);\n+            rmap.erase(rmap.begin());\n+        }\n         nMaxSize = s;\n         return nMaxSize;\n     }"
      },
      {
        "sha": "faaddffad8a82a7e806f3aa1edd7c078e0cce296",
        "filename": "src/test/limitedmap_tests.cpp",
        "status": "added",
        "additions": 101,
        "deletions": 0,
        "changes": 101,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e08a7d9d40b982a6ded3008398c542103f81209a/src/test/limitedmap_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e08a7d9d40b982a6ded3008398c542103f81209a/src/test/limitedmap_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/limitedmap_tests.cpp?ref=e08a7d9d40b982a6ded3008398c542103f81209a",
        "patch": "@@ -0,0 +1,101 @@\n+// Copyright (c) 2012-2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"limitedmap.h\"\n+\n+#include \"test/test_bitcoin.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(limitedmap_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(limitedmap_test)\n+{\n+    // create a limitedmap capped at 10 items\n+    limitedmap<int, int> map(10);\n+\n+    // check that the max size is 10\n+    BOOST_CHECK(map.max_size() == 10);\n+\n+    // check that it's empty\n+    BOOST_CHECK(map.size() == 0);\n+\n+    // insert (-1, -1)\n+    map.insert(std::pair<int, int>(-1, -1));\n+\n+    // make sure that the size is updated\n+    BOOST_CHECK(map.size() == 1);\n+\n+    // make sure that the new items is in the map\n+    BOOST_CHECK(map.count(-1) == 1);\n+\n+    // insert 10 new items\n+    for (int i = 0; i < 10; i++) {\n+        map.insert(std::pair<int, int>(i, i + 1));\n+    }\n+\n+    // make sure that the map now contains 10 items...\n+    BOOST_CHECK(map.size() == 10);\n+\n+    // ...and that the first item has been discarded\n+    BOOST_CHECK(map.count(-1) == 0);\n+\n+    // iterate over the map, both with an index and an iterator\n+    limitedmap<int, int>::const_iterator it = map.begin();\n+    for (int i = 0; i < 10; i++) {\n+        // make sure the item is present\n+        BOOST_CHECK(map.count(i) == 1);\n+\n+        // use the iterator to check for the expected key adn value\n+        BOOST_CHECK(it->first == i);\n+        BOOST_CHECK(it->second == i + 1);\n+        \n+        // use find to check for the value\n+        BOOST_CHECK(map.find(i)->second == i + 1);\n+        \n+        // update and recheck\n+        map.update(it, i + 2);\n+        BOOST_CHECK(map.find(i)->second == i + 2);\n+\n+        it++;\n+    }\n+\n+    // check that we've exhausted the iterator\n+    BOOST_CHECK(it == map.end());\n+\n+    // resize the map to 5 items\n+    map.max_size(5);\n+\n+    // check that the max size and size are now 5\n+    BOOST_CHECK(map.max_size() == 5);\n+    BOOST_CHECK(map.size() == 5);\n+\n+    // check that items less than 5 have been discarded\n+    // and items greater than 5 are retained\n+    for (int i = 0; i < 10; i++) {\n+        if (i < 5) {\n+            BOOST_CHECK(map.count(i) == 0);\n+        } else {\n+            BOOST_CHECK(map.count(i) == 1);\n+        }\n+    }\n+\n+    // erase some items not in the map\n+    for (int i = 100; i < 1000; i += 100) {\n+        map.erase(i);\n+    }\n+\n+    // check that the size is unaffected\n+    BOOST_CHECK(map.size() == 5);\n+\n+    // erase the remaining elements\n+    for (int i = 5; i < 10; i++) {\n+        map.erase(i);\n+    }\n+\n+    // check that the map is now empty\n+    BOOST_CHECK(map.empty());\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "a6f2affde878d4f16aee6aa81b0d5cf36afdbf2d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNmYyYWZmZGU4NzhkNGYxNmFlZTZhYTgxYjBkNWNmMzZhZmRiZjJk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-19T14:26:37Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-19T14:27:40Z"
      },
      "message": "Merge pull request #6565\n\nfb08d92 Make sure we re-acquire lock if a task throws (Casey Rodarmor)",
      "tree": {
        "sha": "587a8335fc63f6ba4ca7e78163f5fa35fb5b6f03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/587a8335fc63f6ba4ca7e78163f5fa35fb5b6f03"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a6f2affde878d4f16aee6aa81b0d5cf36afdbf2d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJV1JJcAAoJEHSBCwEjRsmms4MH/0Nr10eknsPIgBOavuOjCi89\n98MVDjp4pumTUypM6hfrOhs+O8eO4mEPVlCC9FVZGkUUTj9uYDrqmklQMMhsYLoP\ndVS9Y9dLqXIJqGko1KSnBLTRBI5iTo9jUWfE52uastcg1Jyg/+LGAOy2mvL73crC\nP1APS9m3vl0pAlKstGZnIh6ZzaDTXKw+xBHafRvzGNrV+s/X6NVkox6qqogRMpPO\nhlnmqO5HegTv2t+KHemzrasMZvhUk4opDIHH17Z+GxjQs4j2cZhXJHyg3fUGo3Z8\nWO+uYXNe+BDvp4uD36MZzPePgQCaT66UYKVMa/hgEC9ijCbCxvThdshQHEXN5kI=\n=Nfn6\n-----END PGP SIGNATURE-----",
        "payload": "tree 587a8335fc63f6ba4ca7e78163f5fa35fb5b6f03\nparent e08a7d9d40b982a6ded3008398c542103f81209a\nparent fb08d92312312c6c896327d264a8e9915fdafae7\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1439994397 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1439994460 +0200\n\nMerge pull request #6565\n\nfb08d92 Make sure we re-acquire lock if a task throws (Casey Rodarmor)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6f2affde878d4f16aee6aa81b0d5cf36afdbf2d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a6f2affde878d4f16aee6aa81b0d5cf36afdbf2d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6f2affde878d4f16aee6aa81b0d5cf36afdbf2d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e08a7d9d40b982a6ded3008398c542103f81209a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e08a7d9d40b982a6ded3008398c542103f81209a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e08a7d9d40b982a6ded3008398c542103f81209a"
      },
      {
        "sha": "fb08d92312312c6c896327d264a8e9915fdafae7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb08d92312312c6c896327d264a8e9915fdafae7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fb08d92312312c6c896327d264a8e9915fdafae7"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 7,
      "deletions": 5
    },
    "files": [
      {
        "sha": "06115f5619753178f47f7e5a41f0208678f3f543",
        "filename": "src/scheduler.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6f2affde878d4f16aee6aa81b0d5cf36afdbf2d/src/scheduler.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6f2affde878d4f16aee6aa81b0d5cf36afdbf2d/src/scheduler.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.cpp?ref=a6f2affde878d4f16aee6aa81b0d5cf36afdbf2d",
        "patch": "@@ -6,6 +6,7 @@\n \n #include <assert.h>\n #include <boost/bind.hpp>\n+#include <boost/thread/reverse_lock.hpp>\n #include <utility>\n \n CScheduler::CScheduler() : nThreadsServicingQueue(0), stopRequested(false), stopWhenEmpty(false)\n@@ -65,11 +66,12 @@ void CScheduler::serviceQueue()\n             Function f = taskQueue.begin()->second;\n             taskQueue.erase(taskQueue.begin());\n \n-            // Unlock before calling f, so it can reschedule itself or another task\n-            // without deadlocking:\n-            lock.unlock();\n-            f();\n-            lock.lock();\n+            {\n+                // Unlock before calling f, so it can reschedule itself or another task\n+                // without deadlocking:\n+                boost::reverse_lock<boost::unique_lock<boost::mutex> > rlock(lock);\n+                f();\n+            }\n         } catch (...) {\n             --nThreadsServicingQueue;\n             throw;"
      }
    ]
  },
  {
    "sha": "80cddbbba99fc82e52e59cf0928fdc8d85cd29af",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MGNkZGJiYmE5OWZjODJlNTJlNTljZjA5MjhmZGM4ZDg1Y2QyOWFm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-19T15:27:58Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-19T15:28:00Z"
      },
      "message": "Merge pull request #6539\n\n9f68ed6 typofixes (found by misspell_fixer) (Veres Lajos)",
      "tree": {
        "sha": "aaa43a89f0fe8843b565f817f6a2b9469c1b90e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aaa43a89f0fe8843b565f817f6a2b9469c1b90e6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/80cddbbba99fc82e52e59cf0928fdc8d85cd29af",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJV1KCAAAoJEHSBCwEjRsmmam8IAK8DRBE465M3qlfG5/2VGMwq\n+k958U5GVtLZeDKy4sVX9cgt1rgwS5ixxczJaKqa/QdHD6KMR7VgpmF/sS8RZ6fO\nzNiZA3VNGeJQFcg6/mdnovj8VXpe71vfhyXZdgwDzg7ZRbOy8xcRTaeJVM5nWS4o\nSiNJdcrORWrm3gPWNIp1m/HTowIho2GpaSD+1sntgqEcd0gZk8aXjLXl0O6UseUd\nWg60GlVzRO10bXEKlh8iAPV/fDg+0ZM/H+Qv7kURmvTsES7IIgTrVuBU23Jh7vnZ\nDg2jd9kboC0h0+zYrKFiViIzOoGO6AxZZdt+zsqtcDRM6WSq09XSnwP4Te215L4=\n=NXAa\n-----END PGP SIGNATURE-----",
        "payload": "tree aaa43a89f0fe8843b565f817f6a2b9469c1b90e6\nparent a6f2affde878d4f16aee6aa81b0d5cf36afdbf2d\nparent 9f68ed6b6d1a9c6436ce37913666165f2b180ee3\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1439998078 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1439998080 +0200\n\nMerge pull request #6539\n\n9f68ed6 typofixes (found by misspell_fixer) (Veres Lajos)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80cddbbba99fc82e52e59cf0928fdc8d85cd29af",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/80cddbbba99fc82e52e59cf0928fdc8d85cd29af",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80cddbbba99fc82e52e59cf0928fdc8d85cd29af/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a6f2affde878d4f16aee6aa81b0d5cf36afdbf2d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6f2affde878d4f16aee6aa81b0d5cf36afdbf2d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a6f2affde878d4f16aee6aa81b0d5cf36afdbf2d"
      },
      {
        "sha": "9f68ed6b6d1a9c6436ce37913666165f2b180ee3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f68ed6b6d1a9c6436ce37913666165f2b180ee3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9f68ed6b6d1a9c6436ce37913666165f2b180ee3"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 23,
      "deletions": 23
    },
    "files": [
      {
        "sha": "bd7ab3524c26e0dc37bf3098f48096a36f588466",
        "filename": "contrib/debian/changelog",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80cddbbba99fc82e52e59cf0928fdc8d85cd29af/contrib/debian/changelog",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80cddbbba99fc82e52e59cf0928fdc8d85cd29af/contrib/debian/changelog",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/changelog?ref=80cddbbba99fc82e52e59cf0928fdc8d85cd29af",
        "patch": "@@ -149,7 +149,7 @@ bitcoin (0.5.3-natty0) natty; urgency=low\n bitcoin (0.5.2-natty1) natty; urgency=low\n \n   * Remove mentions on anonymity in package descriptions and manpage.\n-    These should never have been there, bitcoin isnt anonymous without\n+    These should never have been there, bitcoin isn't anonymous without\n     a ton of work that virtually no users will ever be willing and\n     capable of doing\n \n@@ -190,7 +190,7 @@ bitcoin (0.5.0~rc1-natty1) natty; urgency=low\n \n   * Add test_bitcoin to build test\n   * Fix clean\n-  * Remove uneccessary build-dependancies\n+  * Remove unnecessary build-dependancies\n \n  -- Matt Corallo <matt@bluematt.me>  Wed, 26 Oct 2011 14:37:18 -0400\n \n@@ -350,7 +350,7 @@ bitcoin (0.3.20.01~dfsg-1) unstable; urgency=low\n \n bitcoin (0.3.19~dfsg-6) unstable; urgency=low\n \n-  * Fix override agressive optimizations.\n+  * Fix override aggressive optimizations.\n   * Fix tighten build-dependencies to really fit backporting to Lenny:\n     + Add fallback build-dependency on libdb4.6++-dev.\n     + Tighten unversioned Boost build-dependencies to recent versions,"
      },
      {
        "sha": "f357ec6c8f64c8d8726f5141cf38f30f230dd60a",
        "filename": "depends/config.guess",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80cddbbba99fc82e52e59cf0928fdc8d85cd29af/depends/config.guess",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80cddbbba99fc82e52e59cf0928fdc8d85cd29af/depends/config.guess",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.guess?ref=80cddbbba99fc82e52e59cf0928fdc8d85cd29af",
        "patch": "@@ -1117,7 +1117,7 @@ EOF\n \t# uname -m prints for DJGPP always 'pc', but it prints nothing about\n \t# the processor, so we play safe by assuming i586.\n \t# Note: whatever this is, it MUST be the same as what config.sub\n-\t# prints for the \"djgpp\" host, or else GDB configury will decide that\n+\t# prints for the \"djgpp\" host, or else GDB configure will decide that\n \t# this is a cross-build.\n \techo i586-pc-msdosdjgpp\n \texit ;;"
      },
      {
        "sha": "3a035f996c1249cfd02a907eedeb171063dcb2c3",
        "filename": "qa/rpc-tests/rest.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80cddbbba99fc82e52e59cf0928fdc8d85cd29af/qa/rpc-tests/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80cddbbba99fc82e52e59cf0928fdc8d85cd29af/qa/rpc-tests/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rest.py?ref=80cddbbba99fc82e52e59cf0928fdc8d85cd29af",
        "patch": "@@ -200,7 +200,7 @@ def run_test(self):\n         response = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json', '', True)\n         assert_equal(response.status, 200) #must be a 500 because we exceeding the limits\n \n-        self.nodes[0].generate(1) #generate block to not affect upcomming tests\n+        self.nodes[0].generate(1) #generate block to not affect upcoming tests\n         self.sync_all()\n \n         ################"
      },
      {
        "sha": "b945f1bf29be0146340c972a3aa92bd03291e3fe",
        "filename": "qa/rpc-tests/test_framework/comptool.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80cddbbba99fc82e52e59cf0928fdc8d85cd29af/qa/rpc-tests/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80cddbbba99fc82e52e59cf0928fdc8d85cd29af/qa/rpc-tests/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/comptool.py?ref=80cddbbba99fc82e52e59cf0928fdc8d85cd29af",
        "patch": "@@ -134,7 +134,7 @@ def send_mempool(self):\n #    is reached) and then sent out in one inv message.  Then the final block\n #    will be synced across all connections, and the outcome of the final \n #    block will be tested.\n-# sync_every_tx: analagous to behavior for sync_every_block, except if outcome\n+# sync_every_tx: analogous to behavior for sync_every_block, except if outcome\n #    on the final tx is None, then contents of entire mempool are compared\n #    across all connections.  (If outcome of final tx is specified as true\n #    or false, then only the last tx is tested against outcome.)"
      },
      {
        "sha": "384b6cfdb9371a089b6e2f4c43377e72e4206e57",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80cddbbba99fc82e52e59cf0928fdc8d85cd29af/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80cddbbba99fc82e52e59cf0928fdc8d85cd29af/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=80cddbbba99fc82e52e59cf0928fdc8d85cd29af",
        "patch": "@@ -265,7 +265,7 @@ class CAddrMan\n      * Notice that vvTried, mapAddr and vVector are never encoded explicitly;\n      * they are instead reconstructed from the other information.\n      *\n-     * vvNew is serialized, but only used if ADDRMAN_UNKOWN_BUCKET_COUNT didn't change,\n+     * vvNew is serialized, but only used if ADDRMAN_UNKNOWN_BUCKET_COUNT didn't change,\n      * otherwise it is reconstructed as well.\n      *\n      * This format is more complex, but significantly smaller (at most 1.5 MiB), and supports"
      },
      {
        "sha": "33b57a52858c91b2226de88043889df45787aee7",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80cddbbba99fc82e52e59cf0928fdc8d85cd29af/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80cddbbba99fc82e52e59cf0928fdc8d85cd29af/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=80cddbbba99fc82e52e59cf0928fdc8d85cd29af",
        "patch": "@@ -1457,7 +1457,7 @@ bool AbortNode(const std::string& strMessage, const std::string& userMessage=\"\")\n     strMiscWarning = strMessage;\n     LogPrintf(\"*** %s\\n\", strMessage);\n     uiInterface.ThreadSafeMessageBox(\n-        userMessage.empty() ? _(\"Error: A fatal internal error occured, see debug.log for details\") : userMessage,\n+        userMessage.empty() ? _(\"Error: A fatal internal error occurred, see debug.log for details\") : userMessage,\n         \"\", CClientUIInterface::MSG_ERROR);\n     StartShutdown();\n     return false;"
      },
      {
        "sha": "f8e877df25c906add02851d562c230d2a3f61b51",
        "filename": "src/merkleblock.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80cddbbba99fc82e52e59cf0928fdc8d85cd29af/src/merkleblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80cddbbba99fc82e52e59cf0928fdc8d85cd29af/src/merkleblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.cpp?ref=80cddbbba99fc82e52e59cf0928fdc8d85cd29af",
        "patch": "@@ -168,7 +168,7 @@ uint256 CPartialMerkleTree::ExtractMatches(std::vector<uint256> &vMatch) {\n     // traverse the partial tree\n     unsigned int nBitsUsed = 0, nHashUsed = 0;\n     uint256 hashMerkleRoot = TraverseAndExtract(nHeight, 0, nBitsUsed, nHashUsed, vMatch);\n-    // verify that no problems occured during the tree traversal\n+    // verify that no problems occurred during the tree traversal\n     if (fBad)\n         return uint256();\n     // verify that all bits were consumed (except for the padding caused by serializing it as a byte sequence)"
      },
      {
        "sha": "fb5726a2b9e0bb6db0ac681919c2b408236600d5",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80cddbbba99fc82e52e59cf0928fdc8d85cd29af/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80cddbbba99fc82e52e59cf0928fdc8d85cd29af/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=80cddbbba99fc82e52e59cf0928fdc8d85cd29af",
        "patch": "@@ -2319,7 +2319,7 @@ void DumpBanlist()\n {\n     int64_t nStart = GetTimeMillis();\n \n-    CNode::SweepBanned(); //clean unused entires (if bantime has expired)\n+    CNode::SweepBanned(); //clean unused entries (if bantime has expired)\n \n     CBanDB bandb;\n     banmap_t banmap;"
      },
      {
        "sha": "954cdd49d63a3fca9935a434b37d111676fecb8c",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80cddbbba99fc82e52e59cf0928fdc8d85cd29af/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80cddbbba99fc82e52e59cf0928fdc8d85cd29af/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=80cddbbba99fc82e52e59cf0928fdc8d85cd29af",
        "patch": "@@ -695,7 +695,7 @@ class CNode\n     static bool BannedSetIsDirty();\n     //!set the \"dirty\" flag for the banlist\n     static void SetBannedSetDirty(bool dirty=true);\n-    //!clean unused entires (if bantime has expired)\n+    //!clean unused entries (if bantime has expired)\n     static void SweepBanned();\n \n     void copyStats(CNodeStats &stats);"
      },
      {
        "sha": "dec00e1eeb8dce86f8bdecacb5a7a0f19adf9f85",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80cddbbba99fc82e52e59cf0928fdc8d85cd29af/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80cddbbba99fc82e52e59cf0928fdc8d85cd29af/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=80cddbbba99fc82e52e59cf0928fdc8d85cd29af",
        "patch": "@@ -349,7 +349,7 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n         }\n         if (pchRetA[0] != 0x01 || pchRetA[1] != 0x00) {\n             CloseSocket(hSocket);\n-            return error(\"Proxy authentication unsuccesful\");\n+            return error(\"Proxy authentication unsuccessful\");\n         }\n     } else if (pchRet1[1] == 0x00) {\n         // Perform no authentication"
      },
      {
        "sha": "ffe31d19425cc2984017bb9b10df83887697ab37",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80cddbbba99fc82e52e59cf0928fdc8d85cd29af/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80cddbbba99fc82e52e59cf0928fdc8d85cd29af/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=80cddbbba99fc82e52e59cf0928fdc8d85cd29af",
        "patch": "@@ -261,7 +261,7 @@ void TxConfirmStats::removeTx(unsigned int entryHeight, unsigned int nBestSeenHe\n         blocksAgo = 0;\n     if (blocksAgo < 0) {\n         LogPrint(\"estimatefee\", \"Blockpolicy error, blocks ago is negative for mempool tx\\n\");\n-        return;  //This can't happen becasue we call this with our best seen height, no entries can have higher\n+        return;  //This can't happen because we call this with our best seen height, no entries can have higher\n     }\n \n     if (blocksAgo >= (int)unconfTxs.size()) {"
      },
      {
        "sha": "15577d128a3ebf5db8e292ee0091d5afbc98c695",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80cddbbba99fc82e52e59cf0928fdc8d85cd29af/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80cddbbba99fc82e52e59cf0928fdc8d85cd29af/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=80cddbbba99fc82e52e59cf0928fdc8d85cd29af",
        "patch": "@@ -118,7 +118,7 @@ class TxConfirmStats\n     /**\n      * Initialize the data structures.  This is called by BlockPolicyEstimator's\n      * constructor with default values.\n-     * @param defaultBuckets contains the upper limits for the bucket boundries\n+     * @param defaultBuckets contains the upper limits for the bucket boundaries\n      * @param maxConfirms max number of confirms to track\n      * @param decay how much to decay the historical moving average per block\n      * @param dataTypeString for logging purposes"
      },
      {
        "sha": "5cc4d00dbf493a221a4221fbf7e488aad63b1692",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80cddbbba99fc82e52e59cf0928fdc8d85cd29af/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80cddbbba99fc82e52e59cf0928fdc8d85cd29af/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=80cddbbba99fc82e52e59cf0928fdc8d85cd29af",
        "patch": "@@ -762,7 +762,7 @@ void PaymentServer::setOptionsModel(OptionsModel *optionsModel)\n \n void PaymentServer::handlePaymentACK(const QString& paymentACKMsg)\n {\n-    // currently we don't futher process or store the paymentACK message\n+    // currently we don't further process or store the paymentACK message\n     Q_EMIT message(tr(\"Payment acknowledged\"), paymentACKMsg, CClientUIInterface::ICON_INFORMATION | CClientUIInterface::MODAL);\n }\n "
      },
      {
        "sha": "d9d4f1d0ed984d0720bb52d02b6ca98ee7116fe9",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80cddbbba99fc82e52e59cf0928fdc8d85cd29af/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80cddbbba99fc82e52e59cf0928fdc8d85cd29af/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=80cddbbba99fc82e52e59cf0928fdc8d85cd29af",
        "patch": "@@ -570,7 +570,7 @@ void RPCConsole::peerLayoutChanged()\n \n     if (detailNodeRow < 0)\n     {\n-        // detail node dissapeared from table (node disconnected)\n+        // detail node disappeared from table (node disconnected)\n         fUnselect = true;\n     }\n     else"
      },
      {
        "sha": "c15b64c327f769afb7e26b1d4ec006d02bea0349",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80cddbbba99fc82e52e59cf0928fdc8d85cd29af/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80cddbbba99fc82e52e59cf0928fdc8d85cd29af/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=80cddbbba99fc82e52e59cf0928fdc8d85cd29af",
        "patch": "@@ -57,7 +57,7 @@ SplashScreen::SplashScreen(Qt::WindowFlags f, const NetworkStyle *networkStyle)\n     QPainter pixPaint(&pixmap);\n     pixPaint.setPen(QColor(100,100,100));\n \n-    // draw a slighly radial gradient\n+    // draw a slightly radial gradient\n     QRadialGradient gradient(QPoint(0,0), splashSize.width()/devicePixelRatio);\n     gradient.setColorAt(0, Qt::white);\n     gradient.setColorAt(1, QColor(247,247,247));"
      },
      {
        "sha": "9362401b1e06bf40217f83bd3724276b012838d3",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80cddbbba99fc82e52e59cf0928fdc8d85cd29af/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80cddbbba99fc82e52e59cf0928fdc8d85cd29af/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=80cddbbba99fc82e52e59cf0928fdc8d85cd29af",
        "patch": "@@ -607,7 +607,7 @@ void StartRPCThreads()\n         LogPrintf(\"No rpcpassword set - using random cookie authentication\\n\");\n         if (!GenerateAuthCookie(&strRPCUserColonPass)) {\n             uiInterface.ThreadSafeMessageBox(\n-                _(\"Error: A fatal internal error occured, see debug.log for details\"), // Same message as AbortNode\n+                _(\"Error: A fatal internal error occurred, see debug.log for details\"), // Same message as AbortNode\n                 \"\", CClientUIInterface::MSG_ERROR);\n             StartShutdown();\n             return;\n@@ -671,7 +671,7 @@ void StartRPCThreads()\n         vEndpoints.push_back(ip::tcp::endpoint(boost::asio::ip::address_v6::any(), defaultPort));\n         vEndpoints.push_back(ip::tcp::endpoint(boost::asio::ip::address_v4::any(), defaultPort));\n         // Prefer making the socket dual IPv6/IPv4 instead of binding\n-        // to both addresses seperately.\n+        // to both addresses separately.\n         bBindAny = true;\n     }\n "
      },
      {
        "sha": "68a9443084a5e41a0e45ef0d6cb2ad6607c1454d",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80cddbbba99fc82e52e59cf0928fdc8d85cd29af/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80cddbbba99fc82e52e59cf0928fdc8d85cd29af/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=80cddbbba99fc82e52e59cf0928fdc8d85cd29af",
        "patch": "@@ -16,7 +16,7 @@\n \n ////////////////////////////////////////////////\n //                                            //\n-// THE SIMPLE DEFINITON, EXCLUDING DEBUG CODE //\n+// THE SIMPLE DEFINITION, EXCLUDING DEBUG CODE //\n //                                            //\n ////////////////////////////////////////////////\n "
      },
      {
        "sha": "6c3cac71c2408ad521632436cdd748c1f17ffe7c",
        "filename": "src/test/data/tx_invalid.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80cddbbba99fc82e52e59cf0928fdc8d85cd29af/src/test/data/tx_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80cddbbba99fc82e52e59cf0928fdc8d85cd29af/src/test/data/tx_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_invalid.json?ref=80cddbbba99fc82e52e59cf0928fdc8d85cd29af",
        "patch": "@@ -128,7 +128,7 @@\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"499999999 NOP2 1\"]],\n \"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000fe64cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n \n-[\"By-time locks, with argument just beyond tx nLockTime (but within numerical boundries)\"],\n+[\"By-time locks, with argument just beyond tx nLockTime (but within numerical boundaries)\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"500000001 NOP2 1\"]],\n \"01000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000065cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4294967295 NOP2 1\"]],"
      },
      {
        "sha": "9744a3c8486c5ad890adf0a9753c7257fa5a6c44",
        "filename": "src/test/data/tx_valid.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80cddbbba99fc82e52e59cf0928fdc8d85cd29af/src/test/data/tx_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80cddbbba99fc82e52e59cf0928fdc8d85cd29af/src/test/data/tx_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_valid.json?ref=80cddbbba99fc82e52e59cf0928fdc8d85cd29af",
        "patch": "@@ -197,7 +197,7 @@\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 NOP2 1\"]],\n \"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000ff64cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n \n-[\"By-time locks, with argument just beyond tx nLockTime (but within numerical boundries)\"],\n+[\"By-time locks, with argument just beyond tx nLockTime (but within numerical boundaries)\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"500000000 NOP2 1\"]],\n \"01000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000065cd1d\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4294967295 NOP2 1\"]],"
      },
      {
        "sha": "5d182f3d42c4840bf2b45acf11e8f6524669d388",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80cddbbba99fc82e52e59cf0928fdc8d85cd29af/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80cddbbba99fc82e52e59cf0928fdc8d85cd29af/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=80cddbbba99fc82e52e59cf0928fdc8d85cd29af",
        "patch": "@@ -797,7 +797,7 @@ UniValue movecmd(const UniValue& params, bool fHelp)\n             \"4. minconf           (numeric, optional, default=1) Only use funds with at least this many confirmations.\\n\"\n             \"5. \\\"comment\\\"       (string, optional) An optional comment, stored in the wallet only.\\n\"\n             \"\\nResult:\\n\"\n-            \"true|false           (boolean) true if successfull.\\n\"\n+            \"true|false           (boolean) true if successful.\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nMove 0.01 \" + CURRENCY_UNIT + \" from the default account to the account named tabby\\n\"\n             + HelpExampleCli(\"move\", \"\\\"\\\" \\\"tabby\\\" 0.01\") +"
      }
    ]
  },
  {
    "sha": "ef30389e2a4a83c2845a2cbdf3a7c2f062404077",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZjMwMzg5ZTJhNGE4M2MyODQ1YTJjYmRmM2E3YzJmMDYyNDA0MDc3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-19T15:36:15Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-19T15:37:52Z"
      },
      "message": "Merge pull request #6544\n\nc5c1edf Fix spelling mistake in -> if. (Mark Friedenbach)\ne846b2a Correct a possibly intentional pun that is nevertheless hard to read: \"two times of nLockTime.\" What is meant is that there are two kinds, or categories of nLockTime. (Mark Friedenbach)",
      "tree": {
        "sha": "b7faa86424eb596c16bc7142d1feaed0032b8c5f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b7faa86424eb596c16bc7142d1feaed0032b8c5f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ef30389e2a4a83c2845a2cbdf3a7c2f062404077",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJV1KLQAAoJEHSBCwEjRsmmt5sH/joA/4pPWhEtuLvHcRMrg4ew\nbsxKn7M3eEXaCq8YjdAyTi1LRjehVF381BNKII6/mtAe/4EcTUXUnDlwwd2rwI/a\nGUdYcSxr6gNroku6OgdeUI4ZIzjlToAA/DJYg4hC4x15/iqSBW4B6wZlg5Pt3Nz7\nU2ojTqQiMqvxldTBU+DT823sdr4lfNbgBz7VQO0EjmDd0ZLum8HIph5+SUHbmP5P\nRUFnm2bR3L0jmSSmdxMim1yHa1sX/4TKpzdPtZcOgSJmNS0U8a7xlkdlSez59B7w\n/1vKP9RCQwsdRjkUPpjNmyiOg2xPBwy0hwH2+RqB99COn0ahN4klrybEGqsqP9E=\n=V3St\n-----END PGP SIGNATURE-----",
        "payload": "tree b7faa86424eb596c16bc7142d1feaed0032b8c5f\nparent 80cddbbba99fc82e52e59cf0928fdc8d85cd29af\nparent c5c1edfe6035791973d419ae72cbf24342ee7e4c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1439998575 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1439998672 +0200\n\nMerge pull request #6544\n\nc5c1edf Fix spelling mistake in -> if. (Mark Friedenbach)\ne846b2a Correct a possibly intentional pun that is nevertheless hard to read: \"two times of nLockTime.\" What is meant is that there are two kinds, or categories of nLockTime. (Mark Friedenbach)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef30389e2a4a83c2845a2cbdf3a7c2f062404077",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ef30389e2a4a83c2845a2cbdf3a7c2f062404077",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef30389e2a4a83c2845a2cbdf3a7c2f062404077/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "80cddbbba99fc82e52e59cf0928fdc8d85cd29af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80cddbbba99fc82e52e59cf0928fdc8d85cd29af",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/80cddbbba99fc82e52e59cf0928fdc8d85cd29af"
      },
      {
        "sha": "c5c1edfe6035791973d419ae72cbf24342ee7e4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5c1edfe6035791973d419ae72cbf24342ee7e4c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c5c1edfe6035791973d419ae72cbf24342ee7e4c"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "bd5e54b33f22688999ab768651eb07ce9f484a61",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef30389e2a4a83c2845a2cbdf3a7c2f062404077/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef30389e2a4a83c2845a2cbdf3a7c2f062404077/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=ef30389e2a4a83c2845a2cbdf3a7c2f062404077",
        "patch": "@@ -1128,7 +1128,7 @@ bool TransactionSignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn\n \n bool TransactionSignatureChecker::CheckLockTime(const CScriptNum& nLockTime) const\n {\n-    // There are two times of nLockTime: lock-by-blockheight\n+    // There are two kinds of nLockTime: lock-by-blockheight\n     // and lock-by-blocktime, distinguished by whether\n     // nLockTime < LOCKTIME_THRESHOLD.\n     //"
      },
      {
        "sha": "5cad5af7c338657b23e2052f6dab40125f8f2d8e",
        "filename": "src/test/data/tx_invalid.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef30389e2a4a83c2845a2cbdf3a7c2f062404077/src/test/data/tx_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef30389e2a4a83c2845a2cbdf3a7c2f062404077/src/test/data/tx_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_invalid.json?ref=ef30389e2a4a83c2845a2cbdf3a7c2f062404077",
        "patch": "@@ -181,7 +181,7 @@\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"2147483648 NOP2 1\"]],\n \"0100000001000100000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000ffffff7f\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n \n-[\"6 byte non-minimally-encoded arguments are invalid even in their contents are valid\"],\n+[\"6 byte non-minimally-encoded arguments are invalid even if their contents are valid\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x06 0x000000000000 NOP2 1\"]],\n \"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n "
      }
    ]
  },
  {
    "sha": "1d1073c2d3231a9de4adbc2bc46846fc20b34f9e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZDEwNzNjMmQzMjMxYTlkZTRhZGJjMmJjNDY4NDZmYzIwYjM0Zjll",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-08-18T04:54:19Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-08-19T18:25:01Z"
      },
      "message": "consensus: cache the openssl EC_GROUP to avoid a race condition for each CECKey instantiation",
      "tree": {
        "sha": "2e8b6fe0d7dafab7f1be5a0ca4882f35e5dfd39b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2e8b6fe0d7dafab7f1be5a0ca4882f35e5dfd39b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d1073c2d3231a9de4adbc2bc46846fc20b34f9e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d1073c2d3231a9de4adbc2bc46846fc20b34f9e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1d1073c2d3231a9de4adbc2bc46846fc20b34f9e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d1073c2d3231a9de4adbc2bc46846fc20b34f9e/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "87f37e259d6deb52ee464edde7aece687eea97a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87f37e259d6deb52ee464edde7aece687eea97a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/87f37e259d6deb52ee464edde7aece687eea97a5"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 28,
      "deletions": 5
    },
    "files": [
      {
        "sha": "f94bc954fd124c3a3428759b8b61ad9b14d77d9e",
        "filename": "src/ecwrapper.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 5,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d1073c2d3231a9de4adbc2bc46846fc20b34f9e/src/ecwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d1073c2d3231a9de4adbc2bc46846fc20b34f9e/src/ecwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ecwrapper.cpp?ref=1d1073c2d3231a9de4adbc2bc46846fc20b34f9e",
        "patch": "@@ -13,6 +13,29 @@\n \n namespace {\n \n+class ecgroup_order\n+{\n+public:\n+  static const EC_GROUP* get()\n+  {\n+      static const ecgroup_order wrapper;\n+      return wrapper.pgroup;\n+  }\n+\n+private:\n+  ecgroup_order()\n+  : pgroup(EC_GROUP_new_by_curve_name(NID_secp256k1))\n+  {\n+  }\n+\n+  ~ecgroup_order()\n+  {\n+    EC_GROUP_free(pgroup);\n+  }\n+\n+  EC_GROUP* pgroup;\n+};\n+\n /**\n  * Perform ECDSA key recovery (see SEC1 4.1.6) for curves over (mod p)-fields\n  * recid selects which key is recovered\n@@ -92,8 +115,10 @@ int ECDSA_SIG_recover_key_GFp(EC_KEY *eckey, ECDSA_SIG *ecsig, const unsigned ch\n } // anon namespace\n \n CECKey::CECKey() {\n-    pkey = EC_KEY_new_by_curve_name(NID_secp256k1);\n+    pkey = EC_KEY_new();\n     assert(pkey != NULL);\n+    int result = EC_KEY_set_group(pkey, ecgroup_order::get());\n+    assert(result);\n }\n \n CECKey::~CECKey() {\n@@ -185,11 +210,9 @@ bool CECKey::TweakPublic(const unsigned char vchTweak[32]) {\n \n bool CECKey::SanityCheck()\n {\n-    EC_KEY *pkey = EC_KEY_new_by_curve_name(NID_secp256k1);\n-    if(pkey == NULL)\n+    const EC_GROUP *pgroup = ecgroup_order::get();\n+    if(pgroup == NULL)\n         return false;\n-    EC_KEY_free(pkey);\n-\n     // TODO Is there more EC functionality that could be missing?\n     return true;\n }"
      }
    ]
  },
  {
    "sha": "1123cdbf4d9f4fbc131da48ed4e798be93f3c967",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMTIzY2RiZjRkOWY0ZmJjMTMxZGE0OGVkNGU3OThiZTkzZjNjOTY3",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-08-19T18:34:56Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-08-19T21:06:42Z"
      },
      "message": "add unit test for CNetAddr::GetGroup.",
      "tree": {
        "sha": "6b5941f16029047fdb36b8eed21118d7e3e86fb2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6b5941f16029047fdb36b8eed21118d7e3e86fb2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1123cdbf4d9f4fbc131da48ed4e798be93f3c967",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1123cdbf4d9f4fbc131da48ed4e798be93f3c967",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1123cdbf4d9f4fbc131da48ed4e798be93f3c967",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1123cdbf4d9f4fbc131da48ed4e798be93f3c967/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bba3db1a40c2125c23a657e5f2d89e334037f792",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bba3db1a40c2125c23a657e5f2d89e334037f792",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bba3db1a40c2125c23a657e5f2d89e334037f792"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 17,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3f99dc98d931bfdde12f65b8084cd9c8114e66ad",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1123cdbf4d9f4fbc131da48ed4e798be93f3c967/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1123cdbf4d9f4fbc131da48ed4e798be93f3c967/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=1123cdbf4d9f4fbc131da48ed4e798be93f3c967",
        "patch": "@@ -7,6 +7,7 @@\n \n #include <string>\n \n+#include <boost/assign/list_of.hpp>\n #include <boost/test/unit_test.hpp>\n \n using namespace std;\n@@ -156,4 +157,20 @@ BOOST_AUTO_TEST_CASE(subnet_test)\n     BOOST_CHECK(CSubNet(CNetAddr(\"1:2:3:4:5:6:7:8\")).ToString() == \"1:2:3:4:5:6:7:8/ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff\");\n }\n \n+BOOST_AUTO_TEST_CASE(netbase_getgroup)\n+{\n+    BOOST_CHECK(CNetAddr(\"127.0.0.1\").GetGroup() == boost::assign::list_of(0)); // Local -> !Routable()\n+    BOOST_CHECK(CNetAddr(\"257.0.0.1\").GetGroup() == boost::assign::list_of(0)); // !Valid -> !Routable()\n+    BOOST_CHECK(CNetAddr(\"10.0.0.1\").GetGroup() == boost::assign::list_of(0)); // RFC1918 -> !Routable()\n+    BOOST_CHECK(CNetAddr(\"169.254.1.1\").GetGroup() == boost::assign::list_of(0)); // RFC3927 -> !Routable()\n+    BOOST_CHECK(CNetAddr(\"1.2.3.4\").GetGroup() == boost::assign::list_of((unsigned char)NET_IPV4)(1)(2)); // IPv4\n+    BOOST_CHECK(CNetAddr(\"::FFFF:0:102:304\").GetGroup() == boost::assign::list_of((unsigned char)NET_IPV4)(1)(2)); // RFC6145\n+    BOOST_CHECK(CNetAddr(\"64:FF9B::102:304\").GetGroup() == boost::assign::list_of((unsigned char)NET_IPV4)(1)(2)); // RFC6052\n+    BOOST_CHECK(CNetAddr(\"2002:102:304:9999:9999:9999:9999:9999\").GetGroup() == boost::assign::list_of((unsigned char)NET_IPV4)(1)(2)); // RFC3964\n+    BOOST_CHECK(CNetAddr(\"2001:0:9999:9999:9999:9999:FEFD:FCFB\").GetGroup() == boost::assign::list_of((unsigned char)NET_IPV4)(1)(2)); // RFC4380\n+    BOOST_CHECK(CNetAddr(\"FD87:D87E:EB43:edb1:8e4:3588:e546:35ca\").GetGroup() == boost::assign::list_of((unsigned char)NET_TOR)(239)); // Tor\n+    BOOST_CHECK(CNetAddr(\"2001:470:abcd:9999:9999:9999:9999:9999\").GetGroup() == boost::assign::list_of((unsigned char)NET_IPV6)(32)(1)(4)(112)(175)); //he.net\n+    BOOST_CHECK(CNetAddr(\"2001:2001:9999:9999:9999:9999:9999:9999\").GetGroup() == boost::assign::list_of((unsigned char)NET_IPV6)(32)(1)(32)(1)); //IPv6\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "e938122b7ba8723c8cab6de78e8a9b39ad188589",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOTM4MTIyYjdiYTg3MjNjOGNhYjZkZTc4ZThhOWIzOWFkMTg4NTg5",
    "commit": {
      "author": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2015-08-20T10:48:43Z"
      },
      "committer": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2015-08-20T10:48:43Z"
      },
      "message": "Stop parsing JSON after first finished construct.\n\nFix https://github.com/bitcoin/bitcoin/issues/6558.  In particular, stop\nparsing JSON after the first object or array is finished.  Check that no\nother garbage follows, and fail the parser if it does.",
      "tree": {
        "sha": "8dc918238e08377ef3ccac660f8fd935e562e31e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8dc918238e08377ef3ccac660f8fd935e562e31e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e938122b7ba8723c8cab6de78e8a9b39ad188589",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e938122b7ba8723c8cab6de78e8a9b39ad188589",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e938122b7ba8723c8cab6de78e8a9b39ad188589",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e938122b7ba8723c8cab6de78e8a9b39ad188589/comments",
    "author": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ef30389e2a4a83c2845a2cbdf3a7c2f062404077",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef30389e2a4a83c2845a2cbdf3a7c2f062404077",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ef30389e2a4a83c2845a2cbdf3a7c2f062404077"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 23,
      "deletions": 6
    },
    "files": [
      {
        "sha": "ee31c0955b0636387c44082f02350a916d832821",
        "filename": "src/test/univalue_tests.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e938122b7ba8723c8cab6de78e8a9b39ad188589/src/test/univalue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e938122b7ba8723c8cab6de78e8a9b39ad188589/src/test/univalue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/univalue_tests.cpp?ref=e938122b7ba8723c8cab6de78e8a9b39ad188589",
        "patch": "@@ -314,6 +314,21 @@ BOOST_AUTO_TEST_CASE(univalue_readwrite)\n     BOOST_CHECK(obj[\"key3\"].isObject());\n \n     BOOST_CHECK_EQUAL(strJson1, v.write());\n+\n+    /* Check for (correctly reporting) a parsing error if the initial\n+       JSON construct is followed by more stuff.  Note that whitespace\n+       is, of course, exempt.  */\n+\n+    BOOST_CHECK(v.read(\"  {}\\n  \"));\n+    BOOST_CHECK(v.isObject());\n+    BOOST_CHECK(v.read(\"  []\\n  \"));\n+    BOOST_CHECK(v.isArray());\n+\n+    BOOST_CHECK(!v.read(\"@{}\"));\n+    BOOST_CHECK(!v.read(\"{} garbage\"));\n+    BOOST_CHECK(!v.read(\"[]{}\"));\n+    BOOST_CHECK(!v.read(\"{}[]\"));\n+    BOOST_CHECK(!v.read(\"{} 42\"));\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "64591234cb12da4ba8dac3ca9853e8a77b66247f",
        "filename": "src/univalue/univalue_read.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e938122b7ba8723c8cab6de78e8a9b39ad188589/src/univalue/univalue_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e938122b7ba8723c8cab6de78e8a9b39ad188589/src/univalue/univalue_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/univalue_read.cpp?ref=e938122b7ba8723c8cab6de78e8a9b39ad188589",
        "patch": "@@ -244,16 +244,16 @@ bool UniValue::read(const char *raw)\n     bool expectColon = false;\n     vector<UniValue*> stack;\n \n+    string tokenVal;\n+    unsigned int consumed;\n     enum jtokentype tok = JTOK_NONE;\n     enum jtokentype last_tok = JTOK_NONE;\n-    while (1) {\n+    do {\n         last_tok = tok;\n \n-        string tokenVal;\n-        unsigned int consumed;\n         tok = getJsonToken(tokenVal, consumed, raw);\n         if (tok == JTOK_NONE || tok == JTOK_ERR)\n-            break;\n+            return false;\n         raw += consumed;\n \n         switch (tok) {\n@@ -377,9 +377,11 @@ bool UniValue::read(const char *raw)\n         default:\n             return false;\n         }\n-    }\n+    } while (!stack.empty ());\n \n-    if (stack.size() != 0)\n+    /* Check that nothing follows the initial construct (parsed above).  */\n+    tok = getJsonToken(tokenVal, consumed, raw);\n+    if (tok != JTOK_NONE)\n         return false;\n \n     return true;"
      }
    ]
  },
  {
    "sha": "5e6e0898a1115c6badd3f4ddf2f42e571471b54f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZTZlMDg5OGExMTE1YzZiYWRkM2Y0ZGRmMmY0MmU1NzE0NzFiNTRm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-20T14:24:36Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-20T14:33:50Z"
      },
      "message": "Merge pull request #6571\n\n1d1073c consensus: cache the openssl EC_GROUP to avoid a race condition for each CECKey instantiation (Cory Fields)",
      "tree": {
        "sha": "aada7a631ce0752b342b3be988dbcc59e53cd7ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aada7a631ce0752b342b3be988dbcc59e53cd7ba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5e6e0898a1115c6badd3f4ddf2f42e571471b54f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJV1eVOAAoJEHSBCwEjRsmmuJoH/0LMQrgGRZS6GQqoBD1uENYi\nKfA36bF6cM1tm/fWqYv9jopTxtc30WnFvrvTI6iUJ+BF3/N9qlnkZsUkBq9Q3z0j\nmhT8M6ec04Vv+A1FdqD5iSaVikr4bQFOKDF95EXcfJviGMzj6+ajRAe3eTGwe1ra\nQuRh1XBaCX4lGafWksqfVB/YtHwyLItvqv4NmRg12EF58j2zLukYbf26RYS2FRm1\nEp57O4j1TuUASbhxH1U3GZuG1zykvZxvi7jUY+ZMEdP5IyJJWxxxLXk8efqZazDz\nwqBS5fcCf1cGeZFW2/eZjuCMNB7jwqdUPEDpKfal3/v46DbQYAeEkB2rLlcBwT8=\n=DDQO\n-----END PGP SIGNATURE-----",
        "payload": "tree aada7a631ce0752b342b3be988dbcc59e53cd7ba\nparent ef30389e2a4a83c2845a2cbdf3a7c2f062404077\nparent 1d1073c2d3231a9de4adbc2bc46846fc20b34f9e\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1440080676 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1440081230 +0200\n\nMerge pull request #6571\n\n1d1073c consensus: cache the openssl EC_GROUP to avoid a race condition for each CECKey instantiation (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e6e0898a1115c6badd3f4ddf2f42e571471b54f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5e6e0898a1115c6badd3f4ddf2f42e571471b54f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e6e0898a1115c6badd3f4ddf2f42e571471b54f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ef30389e2a4a83c2845a2cbdf3a7c2f062404077",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef30389e2a4a83c2845a2cbdf3a7c2f062404077",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ef30389e2a4a83c2845a2cbdf3a7c2f062404077"
      },
      {
        "sha": "1d1073c2d3231a9de4adbc2bc46846fc20b34f9e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d1073c2d3231a9de4adbc2bc46846fc20b34f9e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1d1073c2d3231a9de4adbc2bc46846fc20b34f9e"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 28,
      "deletions": 5
    },
    "files": [
      {
        "sha": "f94bc954fd124c3a3428759b8b61ad9b14d77d9e",
        "filename": "src/ecwrapper.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 5,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e6e0898a1115c6badd3f4ddf2f42e571471b54f/src/ecwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e6e0898a1115c6badd3f4ddf2f42e571471b54f/src/ecwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ecwrapper.cpp?ref=5e6e0898a1115c6badd3f4ddf2f42e571471b54f",
        "patch": "@@ -13,6 +13,29 @@\n \n namespace {\n \n+class ecgroup_order\n+{\n+public:\n+  static const EC_GROUP* get()\n+  {\n+      static const ecgroup_order wrapper;\n+      return wrapper.pgroup;\n+  }\n+\n+private:\n+  ecgroup_order()\n+  : pgroup(EC_GROUP_new_by_curve_name(NID_secp256k1))\n+  {\n+  }\n+\n+  ~ecgroup_order()\n+  {\n+    EC_GROUP_free(pgroup);\n+  }\n+\n+  EC_GROUP* pgroup;\n+};\n+\n /**\n  * Perform ECDSA key recovery (see SEC1 4.1.6) for curves over (mod p)-fields\n  * recid selects which key is recovered\n@@ -92,8 +115,10 @@ int ECDSA_SIG_recover_key_GFp(EC_KEY *eckey, ECDSA_SIG *ecsig, const unsigned ch\n } // anon namespace\n \n CECKey::CECKey() {\n-    pkey = EC_KEY_new_by_curve_name(NID_secp256k1);\n+    pkey = EC_KEY_new();\n     assert(pkey != NULL);\n+    int result = EC_KEY_set_group(pkey, ecgroup_order::get());\n+    assert(result);\n }\n \n CECKey::~CECKey() {\n@@ -185,11 +210,9 @@ bool CECKey::TweakPublic(const unsigned char vchTweak[32]) {\n \n bool CECKey::SanityCheck()\n {\n-    EC_KEY *pkey = EC_KEY_new_by_curve_name(NID_secp256k1);\n-    if(pkey == NULL)\n+    const EC_GROUP *pgroup = ecgroup_order::get();\n+    if(pgroup == NULL)\n         return false;\n-    EC_KEY_free(pkey);\n-\n     // TODO Is there more EC functionality that could be missing?\n     return true;\n }"
      }
    ]
  },
  {
    "sha": "70ec975ea624ab759ee576e6b7a3458d388051fb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MGVjOTc1ZWE2MjRhYjc1OWVlNTc2ZTZiN2EzNDU4ZDM4ODA1MWZi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-20T14:45:20Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-20T14:45:46Z"
      },
      "message": "Merge pull request #6556\n\n1123cdb add unit test for CNetAddr::GetGroup. (Alex Morcos)\nbba3db1 Fix masking of irrelevant bits in address groups. (Alex Morcos)",
      "tree": {
        "sha": "ed1e8ebc824872cd3bc6f690c3e773e83ca8e460",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ed1e8ebc824872cd3bc6f690c3e773e83ca8e460"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/70ec975ea624ab759ee576e6b7a3458d388051fb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJV1egaAAoJEHSBCwEjRsmmSdkH/iMzHb8h0niucr3BNI/ZTHv5\nXoFVqfQyIsIbNBwyT5/lVv3Ag9e5VncEetc6ov8ERLn8AZBsIhRHKGjTiKDXp0pv\nEqQ+3HdE+0pLZIp8yW76CXdiZZwfDs3kpdl6XxU9/6Wxprq5tfgrFboCmFrBKyQ/\nXEjXODssgR3ClKWtjgjnWzhBz8DFnTaTz384SQQVmyDmRFEN/qV319466nDWOLH7\nZG9ZxXt0W1WOYS0h5pak7N29K8R2HfMVSBc2HeQTwOZXeZudLHEaRa70GWwbdHT1\n//Tf0YugjqhhkOTIa9dYUwWBloVuSUh4JE1PT9ay3Ucbv3W+we+d4eY+URtpqyU=\n=1Z2M\n-----END PGP SIGNATURE-----",
        "payload": "tree ed1e8ebc824872cd3bc6f690c3e773e83ca8e460\nparent 5e6e0898a1115c6badd3f4ddf2f42e571471b54f\nparent 1123cdbf4d9f4fbc131da48ed4e798be93f3c967\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1440081920 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1440081946 +0200\n\nMerge pull request #6556\n\n1123cdb add unit test for CNetAddr::GetGroup. (Alex Morcos)\nbba3db1 Fix masking of irrelevant bits in address groups. (Alex Morcos)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70ec975ea624ab759ee576e6b7a3458d388051fb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/70ec975ea624ab759ee576e6b7a3458d388051fb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70ec975ea624ab759ee576e6b7a3458d388051fb/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5e6e0898a1115c6badd3f4ddf2f42e571471b54f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e6e0898a1115c6badd3f4ddf2f42e571471b54f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5e6e0898a1115c6badd3f4ddf2f42e571471b54f"
      },
      {
        "sha": "1123cdbf4d9f4fbc131da48ed4e798be93f3c967",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1123cdbf4d9f4fbc131da48ed4e798be93f3c967",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1123cdbf4d9f4fbc131da48ed4e798be93f3c967"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 18,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7a87d125c2975a53c80cd273ef5711d8e01c65df",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70ec975ea624ab759ee576e6b7a3458d388051fb/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70ec975ea624ab759ee576e6b7a3458d388051fb/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=70ec975ea624ab759ee576e6b7a3458d388051fb",
        "patch": "@@ -983,7 +983,7 @@ std::vector<unsigned char> CNetAddr::GetGroup() const\n         nBits -= 8;\n     }\n     if (nBits > 0)\n-        vchRet.push_back(GetByte(15 - nStartByte) | ((1 << nBits) - 1));\n+        vchRet.push_back(GetByte(15 - nStartByte) | ((1 << (8 - nBits)) - 1));\n \n     return vchRet;\n }"
      },
      {
        "sha": "3f99dc98d931bfdde12f65b8084cd9c8114e66ad",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70ec975ea624ab759ee576e6b7a3458d388051fb/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70ec975ea624ab759ee576e6b7a3458d388051fb/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=70ec975ea624ab759ee576e6b7a3458d388051fb",
        "patch": "@@ -7,6 +7,7 @@\n \n #include <string>\n \n+#include <boost/assign/list_of.hpp>\n #include <boost/test/unit_test.hpp>\n \n using namespace std;\n@@ -156,4 +157,20 @@ BOOST_AUTO_TEST_CASE(subnet_test)\n     BOOST_CHECK(CSubNet(CNetAddr(\"1:2:3:4:5:6:7:8\")).ToString() == \"1:2:3:4:5:6:7:8/ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff\");\n }\n \n+BOOST_AUTO_TEST_CASE(netbase_getgroup)\n+{\n+    BOOST_CHECK(CNetAddr(\"127.0.0.1\").GetGroup() == boost::assign::list_of(0)); // Local -> !Routable()\n+    BOOST_CHECK(CNetAddr(\"257.0.0.1\").GetGroup() == boost::assign::list_of(0)); // !Valid -> !Routable()\n+    BOOST_CHECK(CNetAddr(\"10.0.0.1\").GetGroup() == boost::assign::list_of(0)); // RFC1918 -> !Routable()\n+    BOOST_CHECK(CNetAddr(\"169.254.1.1\").GetGroup() == boost::assign::list_of(0)); // RFC3927 -> !Routable()\n+    BOOST_CHECK(CNetAddr(\"1.2.3.4\").GetGroup() == boost::assign::list_of((unsigned char)NET_IPV4)(1)(2)); // IPv4\n+    BOOST_CHECK(CNetAddr(\"::FFFF:0:102:304\").GetGroup() == boost::assign::list_of((unsigned char)NET_IPV4)(1)(2)); // RFC6145\n+    BOOST_CHECK(CNetAddr(\"64:FF9B::102:304\").GetGroup() == boost::assign::list_of((unsigned char)NET_IPV4)(1)(2)); // RFC6052\n+    BOOST_CHECK(CNetAddr(\"2002:102:304:9999:9999:9999:9999:9999\").GetGroup() == boost::assign::list_of((unsigned char)NET_IPV4)(1)(2)); // RFC3964\n+    BOOST_CHECK(CNetAddr(\"2001:0:9999:9999:9999:9999:FEFD:FCFB\").GetGroup() == boost::assign::list_of((unsigned char)NET_IPV4)(1)(2)); // RFC4380\n+    BOOST_CHECK(CNetAddr(\"FD87:D87E:EB43:edb1:8e4:3588:e546:35ca\").GetGroup() == boost::assign::list_of((unsigned char)NET_TOR)(239)); // Tor\n+    BOOST_CHECK(CNetAddr(\"2001:470:abcd:9999:9999:9999:9999:9999\").GetGroup() == boost::assign::list_of((unsigned char)NET_IPV6)(32)(1)(4)(112)(175)); //he.net\n+    BOOST_CHECK(CNetAddr(\"2001:2001:9999:9999:9999:9999:9999:9999\").GetGroup() == boost::assign::list_of((unsigned char)NET_IPV6)(32)(1)(32)(1)); //IPv6\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "e128464bc5ae7e81fc84530b829343b03781f5a6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMTI4NDY0YmM1YWU3ZTgxZmM4NDUzMGI4MjkzNDNiMDM3ODFmNWE2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-20T15:12:35Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-20T15:13:52Z"
      },
      "message": "Merge pull request #6545\n\n8be371d Do not store more than 200 timedata samples. (Pavel Jan\u00edk)",
      "tree": {
        "sha": "db48107f0f346db066cef454b04665c5968421d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/db48107f0f346db066cef454b04665c5968421d6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e128464bc5ae7e81fc84530b829343b03781f5a6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJV1e6wAAoJEHSBCwEjRsmmgIMIAIQ8CWinPYk12tNCajjTItg3\naiwds88Tv9r4pGuKjeghL1QSHxJ9i1y6qprzrTMW10uo7V3w4hiA0rSJ/rpZaE0q\nxM7amv4V2+xGORN0fDe181TFgDkk2bqKhh73PYTXbuRNIgGot0g7Tz5n+Oo6RSX9\nIWLIU9QWi4vNiffpRipIvNXfeSS8ZTdThdtS3Gg2bJy1cNOyAJ6wa+JYY9GFbr5H\nI8mb72ZVe8WfHRRORP9QCAMDxflKxbCaAruUCWtjGRlr6JJWvDR6LOgfo9bk8081\nTsnCY/odLUMXY0awWNVPwC/fDv91Qjizqbhuu6zJlRpuhFG1fDWWHaIEOPYmEjo=\n=ueUn\n-----END PGP SIGNATURE-----",
        "payload": "tree db48107f0f346db066cef454b04665c5968421d6\nparent 70ec975ea624ab759ee576e6b7a3458d388051fb\nparent 8be371db340b03dc03142c1bb3390fdfc84f56b4\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1440083555 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1440083632 +0200\n\nMerge pull request #6545\n\n8be371d Do not store more than 200 timedata samples. (Pavel Jan\u00edk)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e128464bc5ae7e81fc84530b829343b03781f5a6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e128464bc5ae7e81fc84530b829343b03781f5a6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e128464bc5ae7e81fc84530b829343b03781f5a6/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "70ec975ea624ab759ee576e6b7a3458d388051fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70ec975ea624ab759ee576e6b7a3458d388051fb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/70ec975ea624ab759ee576e6b7a3458d388051fb"
      },
      {
        "sha": "8be371db340b03dc03142c1bb3390fdfc84f56b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8be371db340b03dc03142c1bb3390fdfc84f56b4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8be371db340b03dc03142c1bb3390fdfc84f56b4"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 5,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a14d69c11664b10da8165db28cc523e14d6a87ea",
        "filename": "src/timedata.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e128464bc5ae7e81fc84530b829343b03781f5a6/src/timedata.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e128464bc5ae7e81fc84530b829343b03781f5a6/src/timedata.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/timedata.cpp?ref=e128464bc5ae7e81fc84530b829343b03781f5a6",
        "patch": "@@ -40,16 +40,20 @@ static int64_t abs64(int64_t n)\n     return (n >= 0 ? n : -n);\n }\n \n+#define BITCOIN_TIMEDATA_MAX_SAMPLES 200\n+\n void AddTimeData(const CNetAddr& ip, int64_t nOffsetSample)\n {\n     LOCK(cs_nTimeOffset);\n     // Ignore duplicates\n     static set<CNetAddr> setKnown;\n+    if (setKnown.size() == BITCOIN_TIMEDATA_MAX_SAMPLES)\n+        return;\n     if (!setKnown.insert(ip).second)\n         return;\n \n     // Add data\n-    static CMedianFilter<int64_t> vTimeOffsets(200,0);\n+    static CMedianFilter<int64_t> vTimeOffsets(BITCOIN_TIMEDATA_MAX_SAMPLES, 0);\n     vTimeOffsets.input(nOffsetSample);\n     LogPrintf(\"Added time data, samples %d, offset %+d (%+d minutes)\\n\", vTimeOffsets.size(), nOffsetSample, nOffsetSample/60);\n "
      }
    ]
  },
  {
    "sha": "e3f13ddc54142788261e3e0a16386cfcefb9bdc5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplM2YxM2RkYzU0MTQyNzg4MjYxZTNlMGExNjM4NmNmY2VmYjliZGM1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-20T15:54:46Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-20T16:26:26Z"
      },
      "message": "Merge pull request #6242\n\n17221bf chainparams: don't use std namespace (Cory Fields)\nf0deec5 chainparams: move CCheckpointData into chainparams.h (Cory Fields)",
      "tree": {
        "sha": "853b83de1be7e36b0f3a6ed05becc47ec1061afe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/853b83de1be7e36b0f3a6ed05becc47ec1061afe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e3f13ddc54142788261e3e0a16386cfcefb9bdc5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJV1f+yAAoJEHSBCwEjRsmmgWIH/3NXLbNxPqG0NEI2D3+TtGyF\njfVsYz7tnuwfOG5Q1VKzlWL4LehwHdLmEIgoph8TuXyewWmh9GeKyuKCwO0E4W23\n7kF9v4oSDlhufq3ymSlIIEltzQdqbBNzVJbb/uQFiju/ZcW0YEQdsVJVRvj8RTqe\n3fPWWS/NwUjr2qfDpR6aI+7Yh0ppg+f0oMKocQdVzNl0r+R95A/gNlrHLdAyTmmN\nWk2hKaMbttOY7Y4pZUEcY6JYJbugoqmuJSly/lx/q5hiaYKKLnnFuSBbOsPX/Dx/\n7OnVgdTNDZIMvOHvVDhp3oh4jH0eZ7QxbntKsjUgDSgVf8tQe4oqnrQVGj/UiOA=\n=Ikm8\n-----END PGP SIGNATURE-----",
        "payload": "tree 853b83de1be7e36b0f3a6ed05becc47ec1061afe\nparent e128464bc5ae7e81fc84530b829343b03781f5a6\nparent 17221bf77e07b8c2ef313836d33ac16c21796591\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1440086086 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1440087986 +0200\n\nMerge pull request #6242\n\n17221bf chainparams: don't use std namespace (Cory Fields)\nf0deec5 chainparams: move CCheckpointData into chainparams.h (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3f13ddc54142788261e3e0a16386cfcefb9bdc5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e3f13ddc54142788261e3e0a16386cfcefb9bdc5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3f13ddc54142788261e3e0a16386cfcefb9bdc5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e128464bc5ae7e81fc84530b829343b03781f5a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e128464bc5ae7e81fc84530b829343b03781f5a6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e128464bc5ae7e81fc84530b829343b03781f5a6"
      },
      {
        "sha": "17221bf77e07b8c2ef313836d33ac16c21796591",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17221bf77e07b8c2ef313836d33ac16c21796591",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/17221bf77e07b8c2ef313836d33ac16c21796591"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 16,
      "deletions": 18
    },
    "files": [
      {
        "sha": "9c843f6e7e5e913cea4ecd13aecd3da98dfd3019",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3f13ddc54142788261e3e0a16386cfcefb9bdc5/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3f13ddc54142788261e3e0a16386cfcefb9bdc5/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=e3f13ddc54142788261e3e0a16386cfcefb9bdc5",
        "patch": "@@ -12,8 +12,6 @@\n \n #include <boost/assign/list_of.hpp>\n \n-using namespace std;\n-\n #include \"chainparamsseeds.h\"\n \n static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesisOutputScript, uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)\n@@ -22,7 +20,7 @@ static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesi\n     txNew.nVersion = 1;\n     txNew.vin.resize(1);\n     txNew.vout.resize(1);\n-    txNew.vin[0].scriptSig = CScript() << 486604799 << CScriptNum(4) << vector<unsigned char>((const unsigned char*)pszTimestamp, (const unsigned char*)pszTimestamp + strlen(pszTimestamp));\n+    txNew.vin[0].scriptSig = CScript() << 486604799 << CScriptNum(4) << std::vector<unsigned char>((const unsigned char*)pszTimestamp, (const unsigned char*)pszTimestamp + strlen(pszTimestamp));\n     txNew.vout[0].nValue = genesisReward;\n     txNew.vout[0].scriptPubKey = genesisOutputScript;\n \n@@ -117,7 +115,7 @@ class CMainParams : public CChainParams {\n         fMineBlocksOnDemand = false;\n         fTestnetToBeDeprecatedFieldRPC = false;\n \n-        checkpointData = (Checkpoints::CCheckpointData) {\n+        checkpointData = (CCheckpointData) {\n             boost::assign::map_list_of\n             ( 11111, uint256S(\"0x0000000069e244f73d78e8fd29ba2fd2ed618bd6fa2ee92559f542fdb26e7c1d\"))\n             ( 33333, uint256S(\"0x000000002dd5588a74784eaa7ab0507a18ad16a236e7b1ce69f00d7ddfb5d0a6\"))\n@@ -190,7 +188,7 @@ class CTestNetParams : public CChainParams {\n         fMineBlocksOnDemand = false;\n         fTestnetToBeDeprecatedFieldRPC = true;\n \n-        checkpointData = (Checkpoints::CCheckpointData) {\n+        checkpointData = (CCheckpointData) {\n             boost::assign::map_list_of\n             ( 546, uint256S(\"000000002a936ca763904c3c35fce2f3556c559c0214345d31b1bcebf76acb70\")),\n             1337966069,\n@@ -239,7 +237,7 @@ class CRegTestParams : public CChainParams {\n         fMineBlocksOnDemand = true;\n         fTestnetToBeDeprecatedFieldRPC = false;\n \n-        checkpointData = (Checkpoints::CCheckpointData){\n+        checkpointData = (CCheckpointData){\n             boost::assign::map_list_of\n             ( 0, uint256S(\"0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\")),\n             0,"
      },
      {
        "sha": "5db39aa09c58b6453d5b3b9a0ebead58b09ae2f0",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3f13ddc54142788261e3e0a16386cfcefb9bdc5/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3f13ddc54142788261e3e0a16386cfcefb9bdc5/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=e3f13ddc54142788261e3e0a16386cfcefb9bdc5",
        "patch": "@@ -7,7 +7,6 @@\n #define BITCOIN_CHAINPARAMS_H\n \n #include \"chainparamsbase.h\"\n-#include \"checkpoints.h\"\n #include \"consensus/params.h\"\n #include \"primitives/block.h\"\n #include \"protocol.h\"\n@@ -24,6 +23,14 @@ struct SeedSpec6 {\n     uint16_t port;\n };\n \n+typedef std::map<int, uint256> MapCheckpoints;\n+\n+struct CCheckpointData {\n+    MapCheckpoints mapCheckpoints;\n+    int64_t nTimeLastCheckpoint;\n+    int64_t nTransactionsLastCheckpoint;\n+    double fTransactionsPerDay;\n+};\n \n /**\n  * CChainParams defines various tweakable parameters of a given instance of the\n@@ -67,7 +74,7 @@ class CChainParams\n     const std::vector<CDNSSeedData>& DNSSeeds() const { return vSeeds; }\n     const std::vector<unsigned char>& Base58Prefix(Base58Type type) const { return base58Prefixes[type]; }\n     const std::vector<SeedSpec6>& FixedSeeds() const { return vFixedSeeds; }\n-    const Checkpoints::CCheckpointData& Checkpoints() const { return checkpointData; }\n+    const CCheckpointData& Checkpoints() const { return checkpointData; }\n protected:\n     CChainParams() {}\n \n@@ -87,7 +94,7 @@ class CChainParams\n     bool fRequireStandard;\n     bool fMineBlocksOnDemand;\n     bool fTestnetToBeDeprecatedFieldRPC;\n-    Checkpoints::CCheckpointData checkpointData;\n+    CCheckpointData checkpointData;\n };\n \n /**"
      },
      {
        "sha": "5fce6fa81ef876fb81780e83054648401a3f403a",
        "filename": "src/checkpoints.h",
        "status": "modified",
        "additions": 1,
        "deletions": 8,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3f13ddc54142788261e3e0a16386cfcefb9bdc5/src/checkpoints.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3f13ddc54142788261e3e0a16386cfcefb9bdc5/src/checkpoints.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.h?ref=e3f13ddc54142788261e3e0a16386cfcefb9bdc5",
        "patch": "@@ -10,21 +10,14 @@\n #include <map>\n \n class CBlockIndex;\n+struct CCheckpointData;\n \n /**\n  * Block-chain checkpoints are compiled-in sanity checks.\n  * They are updated every release or three.\n  */\n namespace Checkpoints\n {\n-typedef std::map<int, uint256> MapCheckpoints;\n-\n-struct CCheckpointData {\n-    MapCheckpoints mapCheckpoints;\n-    int64_t nTimeLastCheckpoint;\n-    int64_t nTransactionsLastCheckpoint;\n-    double fTransactionsPerDay;\n-};\n \n //! Return conservative estimate of total number of blocks, 0 if unknown\n int GetTotalBlocksEstimate(const CCheckpointData& data);"
      },
      {
        "sha": "0a23c430ed164eec2eecc12543a374ff7d46602d",
        "filename": "src/test/Checkpoints_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3f13ddc54142788261e3e0a16386cfcefb9bdc5/src/test/Checkpoints_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3f13ddc54142788261e3e0a16386cfcefb9bdc5/src/test/Checkpoints_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/Checkpoints_tests.cpp?ref=e3f13ddc54142788261e3e0a16386cfcefb9bdc5",
        "patch": "@@ -20,7 +20,7 @@ BOOST_FIXTURE_TEST_SUITE(Checkpoints_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(sanity)\n {\n-    const Checkpoints::CCheckpointData& checkpoints = Params(CBaseChainParams::MAIN).Checkpoints();\n+    const CCheckpointData& checkpoints = Params(CBaseChainParams::MAIN).Checkpoints();\n     BOOST_CHECK(Checkpoints::GetTotalBlocksEstimate(checkpoints) >= 134444);\n }\n "
      }
    ]
  },
  {
    "sha": "49793fbb097e9f00149a054adeddad07f0444c12",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OTc5M2ZiYjA5N2U5ZjAwMTQ5YTA1NGFkZWRkYWQwN2YwNDQ0YzEy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-21T10:35:11Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-21T10:35:20Z"
      },
      "message": "Merge pull request #6541\n\ne0862c0 Reformat validateaddress help, add missing iswatchonly description. (Pavel Jan\u00edk)",
      "tree": {
        "sha": "bae861c3a4e9f22941f142cca79025f5ae3fd313",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bae861c3a4e9f22941f142cca79025f5ae3fd313"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/49793fbb097e9f00149a054adeddad07f0444c12",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJV1v7oAAoJEHSBCwEjRsmmrcoIAKeItMizOfBLNiYYX7ut/EY9\n3w//Pr4Exh9yKCVBKujmmbh7nAvRboJSrpzJvtLZ/7XTBa705X+7e7MsNmfwVe/4\nD9zjkwNKyccTN/iyrfqMyNjLiJU6zzRYxU04davhsijdzbmvA7pqaiNtRxdti2nX\nigut+qd3eKslo/FIxPlOWnvb8u8mDoOQN7BA/Jr3mvdnW/AcBdjIIuBeLlLWPDmy\n9C9YtKeHJeSdhWGrD+PWnfiBD2OSyTB2/Q/ZuLWX1HVj4+V+lnSLaIVgyx++Vaaf\nbaQ0Uc7YkQkVbVeiKsJ80IZ/ArfOrUhCStf55+V2lir9UQ2wUDeEJ7Ou+tTXGqU=\n=S2lT\n-----END PGP SIGNATURE-----",
        "payload": "tree bae861c3a4e9f22941f142cca79025f5ae3fd313\nparent e3f13ddc54142788261e3e0a16386cfcefb9bdc5\nparent e0862c0933bc809ef1087e3e0a3ee8cd76b04ac9\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1440153311 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1440153320 +0200\n\nMerge pull request #6541\n\ne0862c0 Reformat validateaddress help, add missing iswatchonly description. (Pavel Jan\u00edk)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49793fbb097e9f00149a054adeddad07f0444c12",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/49793fbb097e9f00149a054adeddad07f0444c12",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49793fbb097e9f00149a054adeddad07f0444c12/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e3f13ddc54142788261e3e0a16386cfcefb9bdc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3f13ddc54142788261e3e0a16386cfcefb9bdc5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e3f13ddc54142788261e3e0a16386cfcefb9bdc5"
      },
      {
        "sha": "e0862c0933bc809ef1087e3e0a3ee8cd76b04ac9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0862c0933bc809ef1087e3e0a3ee8cd76b04ac9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e0862c0933bc809ef1087e3e0a3ee8cd76b04ac9"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "e2b6d5826c2bdb679b379a57db7a7a77d5b5a66f",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49793fbb097e9f00149a054adeddad07f0444c12/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49793fbb097e9f00149a054adeddad07f0444c12/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=49793fbb097e9f00149a054adeddad07f0444c12",
        "patch": "@@ -157,13 +157,14 @@ UniValue validateaddress(const UniValue& params, bool fHelp)\n             \"1. \\\"bitcoinaddress\\\"     (string, required) The bitcoin address to validate\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"isvalid\\\" : true|false,         (boolean) If the address is valid or not. If not, this is the only property returned.\\n\"\n+            \"  \\\"isvalid\\\" : true|false,       (boolean) If the address is valid or not. If not, this is the only property returned.\\n\"\n             \"  \\\"address\\\" : \\\"bitcoinaddress\\\", (string) The bitcoin address validated\\n\"\n             \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex encoded scriptPubKey generated by the address\\n\"\n-            \"  \\\"ismine\\\" : true|false,          (boolean) If the address is yours or not\\n\"\n-            \"  \\\"isscript\\\" : true|false,        (boolean) If the key is a script\\n\"\n+            \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n+            \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n+            \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n             \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string) The hex value of the raw public key\\n\"\n-            \"  \\\"iscompressed\\\" : true|false,    (boolean) If the address is compressed\\n\"\n+            \"  \\\"iscompressed\\\" : true|false,  (boolean) If the address is compressed\\n\"\n             \"  \\\"account\\\" : \\\"account\\\"         (string) DEPRECATED. The account associated with the address, \\\"\\\" is the default account\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\""
      }
    ]
  },
  {
    "sha": "0ce73985a80c3bb0c9a2024f8df6ce68c648dbb8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowY2U3Mzk4NWE4MGMzYmIwYzlhMjAyNGY4ZGY2Y2U2OGM2NDhkYmI4",
    "commit": {
      "author": {
        "name": "Casey Rodarmor",
        "email": "casey@rodarmor.com",
        "date": "2015-08-05T21:47:34Z"
      },
      "committer": {
        "name": "Casey Rodarmor",
        "email": "casey@rodarmor.com",
        "date": "2015-08-21T19:31:37Z"
      },
      "message": "Add p2p-fullblocktest.py",
      "tree": {
        "sha": "b78eda0e18074aa748107c6296abacb034b299bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b78eda0e18074aa748107c6296abacb034b299bf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0ce73985a80c3bb0c9a2024f8df6ce68c648dbb8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ce73985a80c3bb0c9a2024f8df6ce68c648dbb8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0ce73985a80c3bb0c9a2024f8df6ce68c648dbb8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ce73985a80c3bb0c9a2024f8df6ce68c648dbb8/comments",
    "author": {
      "login": "casey",
      "id": 1945,
      "node_id": "MDQ6VXNlcjE5NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/casey",
      "html_url": "https://github.com/casey",
      "followers_url": "https://api.github.com/users/casey/followers",
      "following_url": "https://api.github.com/users/casey/following{/other_user}",
      "gists_url": "https://api.github.com/users/casey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/casey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/casey/subscriptions",
      "organizations_url": "https://api.github.com/users/casey/orgs",
      "repos_url": "https://api.github.com/users/casey/repos",
      "events_url": "https://api.github.com/users/casey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/casey/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "casey",
      "id": 1945,
      "node_id": "MDQ6VXNlcjE5NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/casey",
      "html_url": "https://github.com/casey",
      "followers_url": "https://api.github.com/users/casey/followers",
      "following_url": "https://api.github.com/users/casey/following{/other_user}",
      "gists_url": "https://api.github.com/users/casey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/casey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/casey/subscriptions",
      "organizations_url": "https://api.github.com/users/casey/orgs",
      "repos_url": "https://api.github.com/users/casey/repos",
      "events_url": "https://api.github.com/users/casey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/casey/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "49793fbb097e9f00149a054adeddad07f0444c12",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49793fbb097e9f00149a054adeddad07f0444c12",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/49793fbb097e9f00149a054adeddad07f0444c12"
      }
    ],
    "stats": {
      "total": 755,
      "additions": 702,
      "deletions": 53
    },
    "files": [
      {
        "sha": "5d581819dac5f21c8c6f72aaa6910a29aa030c99",
        "filename": "qa/pull-tester/rpc-tests.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ce73985a80c3bb0c9a2024f8df6ce68c648dbb8/qa/pull-tester/rpc-tests.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ce73985a80c3bb0c9a2024f8df6ce68c648dbb8/qa/pull-tester/rpc-tests.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.sh?ref=0ce73985a80c3bb0c9a2024f8df6ce68c648dbb8",
        "patch": "@@ -36,6 +36,7 @@ testScripts=(\n     'nodehandling.py'\n     'reindex.py'\n     'decodescript.py'\n+    'p2p-fullblocktest.py'\n );\n testScriptsExt=(\n     'bipdersig-p2p.py'"
      },
      {
        "sha": "c6d17212821c391f74ee511bc63f40a50f95fd12",
        "filename": "qa/rpc-tests/README.md",
        "status": "modified",
        "additions": 103,
        "deletions": 2,
        "changes": 105,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ce73985a80c3bb0c9a2024f8df6ce68c648dbb8/qa/rpc-tests/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ce73985a80c3bb0c9a2024f8df6ce68c648dbb8/qa/rpc-tests/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/README.md?ref=0ce73985a80c3bb0c9a2024f8df6ce68c648dbb8",
        "patch": "@@ -1,5 +1,5 @@\n-Regression tests of RPC interface\n-=================================\n+Regression tests\n+================\n \n ### [python-bitcoinrpc](https://github.com/jgarzik/python-bitcoinrpc)\n Git subtree of [https://github.com/jgarzik/python-bitcoinrpc](https://github.com/jgarzik/python-bitcoinrpc).\n@@ -12,6 +12,28 @@ Base class for new regression tests.\n ### [test_framework/util.py](test_framework/util.py)\n Generally useful functions.\n \n+### [test_framework/mininode.py](test_framework/mininode.py)\n+Basic code to support p2p connectivity to a bitcoind.\n+\n+### [test_framework/comptool.py](test_framework/comptool.py)\n+Framework for comparison-tool style, p2p tests.\n+\n+### [test_framework/script.py](test_framework/script.py)\n+Utilities for manipulating transaction scripts (originally from python-bitcoinlib)\n+\n+### [test_framework/blockstore.py](test_framework/blockstore.py)\n+Implements disk-backed block and tx storage.\n+\n+### [test_framework/key.py](test_framework/key.py)\n+Wrapper around OpenSSL EC_Key (originally from python-bitcoinlib)\n+\n+### [test_framework/bignum.py](test_framework/bignum.py)\n+Helpers for script.py\n+\n+### [test_framework/blocktools.py](test_framework/blocktools.py)\n+Helper functions for creating blocks and transactions.\n+\n+\n Notes\n =====\n \n@@ -49,3 +71,82 @@ to recover with:\n rm -rf cache\n killall bitcoind\n ```\n+\n+P2P test design notes\n+---------------------\n+\n+## Mininode\n+\n+* ```mininode.py``` contains all the definitions for objects that pass\n+over the network (```CBlock```, ```CTransaction```, etc, along with the network-level\n+wrappers for them, ```msg_block```, ```msg_tx```, etc).\n+\n+* P2P tests have two threads.  One thread handles all network communication\n+with the bitcoind(s) being tested (using python's asyncore package); the other\n+implements the test logic.\n+\n+* ```NodeConn``` is the class used to connect to a bitcoind.  If you implement\n+a callback class that derives from ```NodeConnCB``` and pass that to the\n+```NodeConn``` object, your code will receive the appropriate callbacks when\n+events of interest arrive.  NOTE: be sure to call\n+```self.create_callback_map()``` in your derived classes' ```__init__```\n+function, so that the correct mappings are set up between p2p messages and your\n+callback functions.\n+\n+* You can pass the same handler to multiple ```NodeConn```'s if you like, or pass\n+different ones to each -- whatever makes the most sense for your test.\n+\n+* Call ```NetworkThread.start()``` after all ```NodeConn``` objects are created to\n+start the networking thread.  (Continue with the test logic in your existing\n+thread.)\n+\n+* RPC calls are available in p2p tests.\n+\n+* Can be used to write free-form tests, where specific p2p-protocol behavior\n+is tested.  Examples: ```p2p-accept-block.py```, ```maxblocksinflight.py```.\n+\n+## Comptool\n+\n+* Testing framework for writing tests that compare the block/tx acceptance\n+behavior of a bitcoind against 1 or more other bitcoind instances, or against\n+known outcomes, or both.\n+\n+* Set the ```num_nodes``` variable (defined in ```ComparisonTestFramework```) to start up\n+1 or more nodes.  If using 1 node, then ```--testbinary``` can be used as a command line\n+option to change the bitcoind binary used by the test.  If using 2 or more nodes,\n+then ```--refbinary``` can be optionally used to change the bitcoind that will be used\n+on nodes 2 and up.\n+\n+* Implement a (generator) function called ```get_tests()``` which yields ```TestInstance```s.\n+Each ```TestInstance``` consists of:\n+  - a list of ```[object, outcome, hash]``` entries\n+    * ```object``` is a ```CBlock```, ```CTransaction```, or\n+    ```CBlockHeader```.  ```CBlock```'s and ```CTransaction```'s are tested for\n+    acceptance.  ```CBlockHeader```s can be used so that the test runner can deliver\n+    complete headers-chains when requested from the bitcoind, to allow writing\n+    tests where blocks can be delivered out of order but still processed by\n+    headers-first bitcoind's.\n+    * ```outcome``` is ```True```, ```False```, or ```None```.  If ```True```\n+    or ```False```, the tip is compared with the expected tip -- either the\n+    block passed in, or the hash specified as the optional 3rd entry.  If\n+    ```None``` is specified, then the test will compare all the bitcoind's\n+    being tested to see if they all agree on what the best tip is.\n+    * ```hash``` is the block hash of the tip to compare against. Optional to\n+    specify; if left out then the hash of the block passed in will be used as\n+    the expected tip.  This allows for specifying an expected tip while testing\n+    the handling of either invalid blocks or blocks delivered out of order,\n+    which complete a longer chain.\n+  - ```sync_every_block```: ```True/False```.  If ```False```, then all blocks\n+    are inv'ed together, and the test runner waits until the node receives the\n+    last one, and tests only the last block for tip acceptance using the\n+    outcome and specified tip.  If ```True```, then each block is tested in\n+    sequence and synced (this is slower when processing many blocks).\n+  - ```sync_every_transaction```: ```True/False```.  Analogous to\n+    ```sync_every_block```, except if the outcome on the last tx is \"None\",\n+    then the contents of the entire mempool are compared across all bitcoind\n+    connections.  If ```True``` or ```False```, then only the last tx's\n+    acceptance is tested against the given outcome.\n+\n+* For examples of tests written in this framework, see\n+  ```invalidblockrequest.py``` and ```p2p-fullblocktest.py```.\n+"
      },
      {
        "sha": "ec1678cc2cfe9de4e5de3f4570666701fbdfe806",
        "filename": "qa/rpc-tests/bipdersig-p2p.py",
        "status": "modified",
        "additions": 15,
        "deletions": 8,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ce73985a80c3bb0c9a2024f8df6ce68c648dbb8/qa/rpc-tests/bipdersig-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ce73985a80c3bb0c9a2024f8df6ce68c648dbb8/qa/rpc-tests/bipdersig-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bipdersig-p2p.py?ref=0ce73985a80c3bb0c9a2024f8df6ce68c648dbb8",
        "patch": "@@ -75,32 +75,35 @@ def create_transaction(self, node, coinbase, to_address, amount):\n     def get_tests(self):\n \n         self.coinbase_blocks = self.nodes[0].generate(2)\n+        height = 3  # height of the next block to build\n         self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n         self.nodeaddress = self.nodes[0].getnewaddress()\n         self.last_block_time = time.time()\n \n         ''' 98 more version 2 blocks '''\n         test_blocks = []\n         for i in xrange(98):\n-            block = create_block(self.tip, create_coinbase(2), self.last_block_time + 1)\n+            block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n             block.nVersion = 2\n             block.rehash()\n             block.solve()\n             test_blocks.append([block, True])\n             self.last_block_time += 1\n             self.tip = block.sha256\n+            height += 1\n         yield TestInstance(test_blocks, sync_every_block=False)\n \n         ''' Mine 749 version 3 blocks '''\n         test_blocks = []\n         for i in xrange(749):\n-            block = create_block(self.tip, create_coinbase(2), self.last_block_time + 1)\n+            block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n             block.nVersion = 3\n             block.rehash()\n             block.solve()\n             test_blocks.append([block, True])\n             self.last_block_time += 1\n             self.tip = block.sha256\n+            height += 1\n         yield TestInstance(test_blocks, sync_every_block=False)\n \n         ''' \n@@ -112,7 +115,7 @@ def get_tests(self):\n         unDERify(spendtx)\n         spendtx.rehash()\n \n-        block = create_block(self.tip, create_coinbase(2), self.last_block_time + 1)\n+        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n         block.nVersion = 3\n         block.vtx.append(spendtx)\n         block.hashMerkleRoot = block.calc_merkle_root()\n@@ -121,6 +124,7 @@ def get_tests(self):\n \n         self.last_block_time += 1\n         self.tip = block.sha256\n+        height += 1\n         yield TestInstance([[block, True]])\n \n         ''' \n@@ -132,7 +136,7 @@ def get_tests(self):\n         unDERify(spendtx)\n         spendtx.rehash()\n \n-        block = create_block(self.tip, create_coinbase(1), self.last_block_time + 1)\n+        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n         block.nVersion = 3\n         block.vtx.append(spendtx)\n         block.hashMerkleRoot = block.calc_merkle_root()\n@@ -144,35 +148,38 @@ def get_tests(self):\n         ''' Mine 199 new version blocks on last valid tip '''\n         test_blocks = []\n         for i in xrange(199):\n-            block = create_block(self.tip, create_coinbase(1), self.last_block_time + 1)\n+            block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n             block.nVersion = 3\n             block.rehash()\n             block.solve()\n             test_blocks.append([block, True])\n             self.last_block_time += 1\n             self.tip = block.sha256\n+            height += 1\n         yield TestInstance(test_blocks, sync_every_block=False)\n \n         ''' Mine 1 old version block '''\n-        block = create_block(self.tip, create_coinbase(1), self.last_block_time + 1)\n+        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n         block.nVersion = 2\n         block.rehash()\n         block.solve()\n         self.last_block_time += 1\n         self.tip = block.sha256\n+        height += 1\n         yield TestInstance([[block, True]])\n \n         ''' Mine 1 new version block '''\n-        block = create_block(self.tip, create_coinbase(1), self.last_block_time + 1)\n+        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n         block.nVersion = 3\n         block.rehash()\n         block.solve()\n         self.last_block_time += 1\n         self.tip = block.sha256\n+        height += 1\n         yield TestInstance([[block, True]])\n \n         ''' Mine 1 old version block, should be invalid '''\n-        block = create_block(self.tip, create_coinbase(1), self.last_block_time + 1)\n+        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n         block.nVersion = 2\n         block.rehash()\n         block.solve()"
      },
      {
        "sha": "6a7980cd45a522e091540bf9d8f4d452da024df0",
        "filename": "qa/rpc-tests/invalidblockrequest.py",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ce73985a80c3bb0c9a2024f8df6ce68c648dbb8/qa/rpc-tests/invalidblockrequest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ce73985a80c3bb0c9a2024f8df6ce68c648dbb8/qa/rpc-tests/invalidblockrequest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/invalidblockrequest.py?ref=0ce73985a80c3bb0c9a2024f8df6ce68c648dbb8",
        "patch": "@@ -46,24 +46,27 @@ def get_tests(self):\n         '''\n         Create a new block with an anyone-can-spend coinbase\n         '''\n-        block = create_block(self.tip, create_coinbase(), self.block_time)\n+        height = 1\n+        block = create_block(self.tip, create_coinbase(height), self.block_time)\n         self.block_time += 1\n         block.solve()\n         # Save the coinbase for later\n         self.block1 = block\n         self.tip = block.sha256\n+        height += 1\n         yield TestInstance([[block, True]])\n \n         '''\n         Now we need that block to mature so we can spend the coinbase.\n         '''\n         test = TestInstance(sync_every_block=False)\n         for i in xrange(100):\n-            block = create_block(self.tip, create_coinbase(), self.block_time)\n+            block = create_block(self.tip, create_coinbase(height), self.block_time)\n             block.solve()\n             self.tip = block.sha256\n             self.block_time += 1\n             test.blocks_and_transactions.append([block, True])\n+            height += 1\n         yield test\n \n         '''\n@@ -73,7 +76,7 @@ def get_tests(self):\n         coinbase, spend of that spend).  Duplicate the 3rd transaction to \n         leave merkle root and blockheader unchanged but invalidate the block.\n         '''\n-        block2 = create_block(self.tip, create_coinbase(), self.block_time)\n+        block2 = create_block(self.tip, create_coinbase(height), self.block_time)\n         self.block_time += 1\n \n         # chr(81) is OP_TRUE\n@@ -95,11 +98,12 @@ def get_tests(self):\n \n         self.tip = block2.sha256\n         yield TestInstance([[block2, False], [block2_orig, True]])\n+        height += 1\n \n         '''\n         Make sure that a totally screwed up block is not valid.\n         '''\n-        block3 = create_block(self.tip, create_coinbase(), self.block_time)\n+        block3 = create_block(self.tip, create_coinbase(height), self.block_time)\n         self.block_time += 1\n         block3.vtx[0].vout[0].nValue = 100*100000000 # Too high!\n         block3.vtx[0].sha256=None"
      },
      {
        "sha": "700deab207152482c26325e27d947473ff8b10e9",
        "filename": "qa/rpc-tests/p2p-acceptblock.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ce73985a80c3bb0c9a2024f8df6ce68c648dbb8/qa/rpc-tests/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ce73985a80c3bb0c9a2024f8df6ce68c648dbb8/qa/rpc-tests/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-acceptblock.py?ref=0ce73985a80c3bb0c9a2024f8df6ce68c648dbb8",
        "patch": "@@ -153,7 +153,7 @@ def run_test(self):\n         blocks_h2 = []  # the height 2 blocks on each node's chain\n         block_time = time.time() + 1\n         for i in xrange(2):\n-            blocks_h2.append(create_block(tips[i], create_coinbase(), block_time))\n+            blocks_h2.append(create_block(tips[i], create_coinbase(2), block_time))\n             blocks_h2[i].solve()\n             block_time += 1\n         test_node.send_message(msg_block(blocks_h2[0]))\n@@ -167,7 +167,7 @@ def run_test(self):\n         # 3. Send another block that builds on the original tip.\n         blocks_h2f = []  # Blocks at height 2 that fork off the main chain\n         for i in xrange(2):\n-            blocks_h2f.append(create_block(tips[i], create_coinbase(), blocks_h2[i].nTime+1))\n+            blocks_h2f.append(create_block(tips[i], create_coinbase(2), blocks_h2[i].nTime+1))\n             blocks_h2f[i].solve()\n         test_node.send_message(msg_block(blocks_h2f[0]))\n         white_node.send_message(msg_block(blocks_h2f[1]))\n@@ -186,7 +186,7 @@ def run_test(self):\n         # 4. Now send another block that builds on the forking chain.\n         blocks_h3 = []\n         for i in xrange(2):\n-            blocks_h3.append(create_block(blocks_h2f[i].sha256, create_coinbase(), blocks_h2f[i].nTime+1))\n+            blocks_h3.append(create_block(blocks_h2f[i].sha256, create_coinbase(3), blocks_h2f[i].nTime+1))\n             blocks_h3[i].solve()\n         test_node.send_message(msg_block(blocks_h3[0]))\n         white_node.send_message(msg_block(blocks_h3[1]))\n@@ -217,7 +217,7 @@ def run_test(self):\n         all_blocks = []   # node0's blocks\n         for j in xrange(2):\n             for i in xrange(288):\n-                next_block = create_block(tips[j].sha256, create_coinbase(), tips[j].nTime+1)\n+                next_block = create_block(tips[j].sha256, create_coinbase(i + 4), tips[j].nTime+1)\n                 next_block.solve()\n                 if j==0:\n                     test_node.send_message(msg_block(next_block))"
      },
      {
        "sha": "9555940cece5e4789f9c6657f687ae74b733a402",
        "filename": "qa/rpc-tests/p2p-fullblocktest.py",
        "status": "added",
        "additions": 272,
        "deletions": 0,
        "changes": 272,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ce73985a80c3bb0c9a2024f8df6ce68c648dbb8/qa/rpc-tests/p2p-fullblocktest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ce73985a80c3bb0c9a2024f8df6ce68c648dbb8/qa/rpc-tests/p2p-fullblocktest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-fullblocktest.py?ref=0ce73985a80c3bb0c9a2024f8df6ce68c648dbb8",
        "patch": "@@ -0,0 +1,272 @@\n+#!/usr/bin/env python2\n+\n+#\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+\n+from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.util import *\n+from test_framework.comptool import TestManager, TestInstance\n+from test_framework.mininode import *\n+from test_framework.blocktools import *\n+import logging\n+import copy\n+import time\n+import numbers\n+from test_framework.key import CECKey\n+from test_framework.script import CScript, CScriptOp, SignatureHash, SIGHASH_ALL, OP_TRUE\n+\n+class PreviousSpendableOutput(object):\n+    def __init__(self, tx = CTransaction(), n = -1):\n+        self.tx = tx\n+        self.n = n  # the output we're spending\n+\n+'''\n+This reimplements tests from the bitcoinj/FullBlockTestGenerator used\n+by the pull-tester.\n+\n+We use the testing framework in which we expect a particular answer from\n+each test.\n+'''\n+\n+class FullBlockTest(ComparisonTestFramework):\n+\n+    ''' Can either run this test as 1 node with expected answers, or two and compare them. \n+        Change the \"outcome\" variable from each TestInstance object to only do the comparison. '''\n+    def __init__(self):\n+        self.num_nodes = 1\n+        self.block_heights = {}\n+        self.coinbase_key = CECKey()\n+        self.coinbase_key.set_secretbytes(bytes(\"horsebattery\"))\n+        self.coinbase_pubkey = self.coinbase_key.get_pubkey()\n+        self.block_time = int(time.time())+1\n+        self.tip = None\n+        self.blocks = {}\n+\n+    def run_test(self):\n+        test = TestManager(self, self.options.tmpdir)\n+        test.add_all_connections(self.nodes)\n+        NetworkThread().start() # Start up network handling in another thread\n+        test.run()\n+\n+    def add_transactions_to_block(self, block, tx_list):\n+        [ tx.rehash() for tx in tx_list ]\n+        block.vtx.extend(tx_list)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.rehash()\n+        return block\n+    \n+    # Create a block on top of self.tip, and advance self.tip to point to the new block\n+    # if spend is specified, then 1 satoshi will be spent from that to an anyone-can-spend output,\n+    # and rest will go to fees.\n+    def next_block(self, number, spend=None, additional_coinbase_value=0, script=None):\n+        if self.tip == None:\n+            base_block_hash = self.genesis_hash\n+        else:\n+            base_block_hash = self.tip.sha256\n+        # First create the coinbase\n+        height = self.block_heights[base_block_hash] + 1\n+        coinbase = create_coinbase(height, self.coinbase_pubkey)\n+        coinbase.vout[0].nValue += additional_coinbase_value\n+        if (spend != None):\n+            coinbase.vout[0].nValue += spend.tx.vout[spend.n].nValue - 1 # all but one satoshi to fees\n+        coinbase.rehash()\n+        block = create_block(base_block_hash, coinbase, self.block_time)\n+        if (spend != None):\n+            tx = CTransaction()\n+            tx.vin.append(CTxIn(COutPoint(spend.tx.sha256, spend.n), \"\", 0xffffffff))  # no signature yet\n+            # This copies the java comparison tool testing behavior: the first\n+            # txout has a garbage scriptPubKey, \"to make sure we're not\n+            # pre-verifying too much\" (?)\n+            tx.vout.append(CTxOut(0, CScript([random.randint(0,255), height & 255])))\n+            if script == None:\n+                tx.vout.append(CTxOut(1, CScript([OP_TRUE])))\n+            else:\n+                tx.vout.append(CTxOut(1, script))\n+            # Now sign it if necessary\n+            scriptSig = \"\"\n+            scriptPubKey = bytearray(spend.tx.vout[spend.n].scriptPubKey)\n+            if (scriptPubKey[0] == OP_TRUE):  # looks like an anyone-can-spend\n+                scriptSig = CScript([OP_TRUE])\n+            else:\n+                # We have to actually sign it\n+                (sighash, err) = SignatureHash(spend.tx.vout[spend.n].scriptPubKey, tx, 0, SIGHASH_ALL)\n+                scriptSig = CScript([self.coinbase_key.sign(sighash) + bytes(bytearray([SIGHASH_ALL]))])\n+            tx.vin[0].scriptSig = scriptSig\n+            # Now add the transaction to the block\n+            block = self.add_transactions_to_block(block, [tx])\n+        block.solve()\n+        self.tip = block\n+        self.block_heights[block.sha256] = height\n+        self.block_time += 1\n+        assert number not in self.blocks\n+        self.blocks[number] = block\n+        return block\n+\n+    def get_tests(self):\n+        self.genesis_hash = int(self.nodes[0].getbestblockhash(), 16)\n+        self.block_heights[self.genesis_hash] = 0\n+        spendable_outputs = []\n+\n+        # save the current tip so it can be spent by a later block\n+        def save_spendable_output():\n+            spendable_outputs.append(self.tip)\n+\n+        # get an output that we previous marked as spendable\n+        def get_spendable_output():\n+            return PreviousSpendableOutput(spendable_outputs.pop(0).vtx[0], 0)\n+\n+        # returns a test case that asserts that the current tip was accepted\n+        def accepted():\n+            return TestInstance([[self.tip, True]])\n+\n+        # returns a test case that asserts that the current tip was rejected\n+        def rejected():\n+            return TestInstance([[self.tip, False]])\n+       \n+        # move the tip back to a previous block\n+        def tip(number):\n+            self.tip = self.blocks[number]\n+\n+        # creates a new block and advances the tip to that block\n+        block = self.next_block\n+\n+\n+        # Create a new block\n+        block(0)\n+        save_spendable_output()\n+        yield accepted()\n+\n+\n+        # Now we need that block to mature so we can spend the coinbase.\n+        test = TestInstance(sync_every_block=False)\n+        for i in range(100):\n+            block(1000 + i)\n+            test.blocks_and_transactions.append([self.tip, True])\n+            save_spendable_output()\n+        yield test\n+\n+\n+        # Start by bulding a couple of blocks on top (which output is spent is in parentheses):\n+        #     genesis -> b1 (0) -> b2 (1)\n+        out0 = get_spendable_output()\n+        block(1, spend=out0)\n+        save_spendable_output()\n+        yield accepted()\n+\n+        out1 = get_spendable_output()\n+        block(2, spend=out1)\n+        # Inv again, then deliver twice (shouldn't break anything).\n+        yield accepted()\n+\n+\n+        # so fork like this:\n+        # \n+        #     genesis -> b1 (0) -> b2 (1)\n+        #                      \\-> b3 (1)\n+        # \n+        # Nothing should happen at this point. We saw b2 first so it takes priority.\n+        tip(1)\n+        block(3, spend=out1)\n+        # Deliver twice (should still not break anything)\n+        yield rejected()\n+\n+\n+        # Now we add another block to make the alternative chain longer.\n+        # \n+        #     genesis -> b1 (0) -> b2 (1)\n+        #                      \\-> b3 (1) -> b4 (2)\n+        out2 = get_spendable_output()\n+        block(4, spend=out2)\n+        yield accepted()\n+\n+\n+        # ... and back to the first chain.\n+        #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6 (3)\n+        #                      \\-> b3 (1) -> b4 (2)\n+        tip(2)\n+        block(5, spend=out2)\n+        save_spendable_output()\n+        yield rejected()\n+\n+        out3 = get_spendable_output()\n+        block(6, spend=out3)\n+        yield accepted()\n+\n+\n+        # Try to create a fork that double-spends\n+        #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6 (3)\n+        #                                          \\-> b7 (2) -> b8 (4)\n+        #                      \\-> b3 (1) -> b4 (2)\n+        tip(5)\n+        block(7, spend=out2)\n+        yield rejected()\n+\n+        out4 = get_spendable_output()\n+        block(8, spend=out4)\n+        yield rejected()\n+\n+\n+        # Try to create a block that has too much fee\n+        #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6 (3)\n+        #                                                    \\-> b9 (4)\n+        #                      \\-> b3 (1) -> b4 (2)\n+        tip(6)\n+        block(9, spend=out4, additional_coinbase_value=1)\n+        yield rejected()\n+\n+        \n+        # Create a fork that ends in a block with too much fee (the one that causes the reorg)\n+        #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n+        #                                          \\-> b10 (3) -> b11 (4)\n+        #                      \\-> b3 (1) -> b4 (2)\n+        tip(5)\n+        block(10, spend=out3)\n+        yield rejected()\n+\n+        block(11, spend=out4, additional_coinbase_value=1)\n+        yield rejected()\n+\n+\n+        # Try again, but with a valid fork first\n+        #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n+        #                                          \\-> b12 (3) -> b13 (4) -> b14 (5)\n+        #                                              (b12 added last)\n+        #                      \\-> b3 (1) -> b4 (2)\n+        tip(5)\n+        b12 = block(12, spend=out3)\n+        save_spendable_output()\n+        #yield TestInstance([[b12, False]])\n+        b13 = block(13, spend=out4)\n+        # Deliver the block header for b12, and the block b13.\n+        # b13 should be accepted but the tip won't advance until b12 is delivered.\n+        yield TestInstance([[CBlockHeader(b12), None], [b13, False]])\n+\n+        save_spendable_output()\n+        out5 = get_spendable_output()\n+        # b14 is invalid, but the node won't know that until it tries to connect\n+        # Tip still can't advance because b12 is missing\n+        block(14, spend=out5, additional_coinbase_value=1)\n+        yield rejected()\n+\n+        yield TestInstance([[b12, True, b13.sha256]]) # New tip should be b13.\n+\n+        \n+        # Test that a block with a lot of checksigs is okay\n+        lots_of_checksigs = CScript([OP_CHECKSIG] * (1000000 / 50 - 1))\n+        tip(13)\n+        block(15, spend=out5, script=lots_of_checksigs)\n+        yield accepted()\n+\n+\n+        # Test that a block with too many checksigs is rejected\n+        out6 = get_spendable_output()\n+        too_many_checksigs = CScript([OP_CHECKSIG] * (1000000 / 50))\n+        block(16, spend=out6, script=too_many_checksigs)\n+        yield rejected()\n+\n+\n+\n+if __name__ == '__main__':\n+    FullBlockTest().main()"
      },
      {
        "sha": "afc44b51b5416b9bfa5589a5e8653ee5dfbffad7",
        "filename": "qa/rpc-tests/script_test.py",
        "status": "modified",
        "additions": 13,
        "deletions": 7,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ce73985a80c3bb0c9a2024f8df6ce68c648dbb8/qa/rpc-tests/script_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ce73985a80c3bb0c9a2024f8df6ce68c648dbb8/qa/rpc-tests/script_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/script_test.py?ref=0ce73985a80c3bb0c9a2024f8df6ce68c648dbb8",
        "patch": "@@ -124,10 +124,10 @@ def ParseScript(json_script):\n     return parsed_script\n             \n class TestBuilder(object):\n-    def create_credit_tx(self, scriptPubKey):\n+    def create_credit_tx(self, scriptPubKey, height):\n         # self.tx1 is a coinbase transaction, modeled after the one created by script_tests.cpp\n         # This allows us to reuse signatures created in the unit test framework.\n-        self.tx1 = create_coinbase()                 # this has a bip34 scriptsig,\n+        self.tx1 = create_coinbase(height)                 # this has a bip34 scriptsig,\n         self.tx1.vin[0].scriptSig = CScript([0, 0])  # but this matches the unit tests\n         self.tx1.vout[0].nValue = 0\n         self.tx1.vout[0].scriptPubKey = scriptPubKey\n@@ -168,24 +168,26 @@ def generate_test_instance(self, pubkeystring, scriptsigstring):\n \n         test = TestInstance(sync_every_block=False)\n         test_build = TestBuilder()\n-        test_build.create_credit_tx(scriptpubkey)\n+        test_build.create_credit_tx(scriptpubkey, self.height)\n         test_build.create_spend_tx(scriptsig)\n         test_build.rehash()\n \n         block = create_block(self.tip, test_build.tx1, self.block_time)\n         self.block_time += 1\n         block.solve()\n         self.tip = block.sha256\n+        self.height += 1\n         test.blocks_and_transactions = [[block, True]]\n \n         for i in xrange(100):\n-            block = create_block(self.tip, create_coinbase(), self.block_time)\n+            block = create_block(self.tip, create_coinbase(self.height), self.block_time)\n             self.block_time += 1\n             block.solve()\n             self.tip = block.sha256\n+            self.height += 1\n             test.blocks_and_transactions.append([block, True])\n \n-        block = create_block(self.tip, create_coinbase(), self.block_time)\n+        block = create_block(self.tip, create_coinbase(self.height), self.block_time)\n         self.block_time += 1\n         block.vtx.append(test_build.tx2)\n         block.hashMerkleRoot = block.calc_merkle_root()\n@@ -198,26 +200,29 @@ def generate_test_instance(self, pubkeystring, scriptsigstring):\n     def get_tests(self):\n         self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n         self.block_time = 1333230000  # before the BIP16 switchover\n+        self.height = 1\n \n         '''\n         Create a new block with an anyone-can-spend coinbase\n         '''\n-        block = create_block(self.tip, create_coinbase(), self.block_time)\n+        block = create_block(self.tip, create_coinbase(self.height), self.block_time)\n         self.block_time += 1\n         block.solve()\n         self.tip = block.sha256\n+        self.height += 1\n         yield TestInstance(objects=[[block, True]])\n \n         '''\n         Build out to 100 blocks total, maturing the coinbase.\n         '''\n         test = TestInstance(objects=[], sync_every_block=False, sync_every_tx=False)\n         for i in xrange(100):\n-            b = create_block(self.tip, create_coinbase(), self.block_time)\n+            b = create_block(self.tip, create_coinbase(self.height), self.block_time)\n             b.solve()\n             test.blocks_and_transactions.append([b, True])\n             self.tip = b.sha256\n             self.block_time += 1\n+            self.height += 1\n         yield test\n  \n         ''' Iterate through script tests. '''\n@@ -229,6 +234,7 @@ def get_tests(self):\n                 self.nodes[1].invalidateblock(self.nodes[1].getblockhash(102))\n \n             self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n+            self.height = 102\n \n             [scriptsig, scriptpubkey, flags] = script_test[0:3]\n             flags = ParseScriptFlags(flags)"
      },
      {
        "sha": "b9775b477cc280cdf8f565427dedb65e325cae47",
        "filename": "qa/rpc-tests/test_framework/blockstore.py",
        "status": "modified",
        "additions": 17,
        "deletions": 6,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ce73985a80c3bb0c9a2024f8df6ce68c648dbb8/qa/rpc-tests/test_framework/blockstore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ce73985a80c3bb0c9a2024f8df6ce68c648dbb8/qa/rpc-tests/test_framework/blockstore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/blockstore.py?ref=0ce73985a80c3bb0c9a2024f8df6ce68c648dbb8",
        "patch": "@@ -10,6 +10,7 @@ class BlockStore(object):\n     def __init__(self, datadir):\n         self.blockDB = dbm.open(datadir + \"/blocks\", 'c')\n         self.currentBlock = 0L\n+        self.headers_map = dict()\n     \n     def close(self):\n         self.blockDB.close()\n@@ -26,24 +27,30 @@ def get(self, blockhash):\n         ret.calc_sha256()\n         return ret\n \n+    def get_header(self, blockhash):\n+        try:\n+            return self.headers_map[blockhash]\n+        except KeyError:\n+            return None\n+\n     # Note: this pulls full blocks out of the database just to retrieve\n     # the headers -- perhaps we could keep a separate data structure\n     # to avoid this overhead.\n     def headers_for(self, locator, hash_stop, current_tip=None):\n         if current_tip is None:\n             current_tip = self.currentBlock\n-        current_block = self.get(current_tip)\n-        if current_block is None:\n+        current_block_header = self.get_header(current_tip)\n+        if current_block_header is None:\n             return None\n \n         response = msg_headers()\n-        headersList = [ CBlockHeader(current_block) ]\n+        headersList = [ current_block_header ]\n         maxheaders = 2000\n         while (headersList[0].sha256 not in locator.vHave):\n             prevBlockHash = headersList[0].hashPrevBlock\n-            prevBlock = self.get(prevBlockHash)\n-            if prevBlock is not None:\n-                headersList.insert(0, CBlockHeader(prevBlock))\n+            prevBlockHeader = self.get_header(prevBlockHash)\n+            if prevBlockHeader is not None:\n+                headersList.insert(0, prevBlockHeader)\n             else:\n                 break\n         headersList = headersList[:maxheaders] # truncate if we have too many\n@@ -61,6 +68,10 @@ def add_block(self, block):\n         except TypeError as e:\n             print \"Unexpected error: \", sys.exc_info()[0], e.args\n         self.currentBlock = block.sha256\n+        self.headers_map[block.sha256] = CBlockHeader(block)\n+\n+    def add_header(self, header):\n+        self.headers_map[header.sha256] = header\n \n     def get_blocks(self, inv):\n         responses = []"
      },
      {
        "sha": "59aa8c15cc936626ca87b4654ebd1afe28f44555",
        "filename": "qa/rpc-tests/test_framework/blocktools.py",
        "status": "modified",
        "additions": 11,
        "deletions": 9,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ce73985a80c3bb0c9a2024f8df6ce68c648dbb8/qa/rpc-tests/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ce73985a80c3bb0c9a2024f8df6ce68c648dbb8/qa/rpc-tests/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/blocktools.py?ref=0ce73985a80c3bb0c9a2024f8df6ce68c648dbb8",
        "patch": "@@ -5,7 +5,7 @@\n #\n \n from mininode import *\n-from script import CScript, CScriptOp\n+from script import CScript, CScriptOp, OP_TRUE, OP_CHECKSIG\n \n # Create a block (with regtest difficulty)\n def create_block(hashprev, coinbase, nTime=None):\n@@ -37,19 +37,21 @@ def serialize_script_num(value):\n         r[-1] |= 0x80\n     return r\n \n-counter=1\n-# Create an anyone-can-spend coinbase transaction, assuming no miner fees\n-def create_coinbase(heightAdjust = 0):\n-    global counter\n+# Create a coinbase transaction, assuming no miner fees.\n+# If pubkey is passed in, the coinbase output will be a P2PK output;\n+# otherwise an anyone-can-spend output.\n+def create_coinbase(height, pubkey = None):\n     coinbase = CTransaction()\n     coinbase.vin.append(CTxIn(COutPoint(0, 0xffffffff), \n-                ser_string(serialize_script_num(counter+heightAdjust)), 0xffffffff))\n-    counter += 1\n+                ser_string(serialize_script_num(height)), 0xffffffff))\n     coinbaseoutput = CTxOut()\n     coinbaseoutput.nValue = 50*100000000\n-    halvings = int((counter+heightAdjust)/150) # regtest\n+    halvings = int(height/150) # regtest\n     coinbaseoutput.nValue >>= halvings\n-    coinbaseoutput.scriptPubKey = \"\"\n+    if (pubkey != None):\n+        coinbaseoutput.scriptPubKey = CScript([pubkey, OP_CHECKSIG])\n+    else:\n+        coinbaseoutput.scriptPubKey = CScript([OP_TRUE])\n     coinbase.vout = [ coinbaseoutput ]\n     coinbase.calc_sha256()\n     return coinbase"
      },
      {
        "sha": "e0b3ce040d84e9d6dc1993d55cfa9744287c1a01",
        "filename": "qa/rpc-tests/test_framework/comptool.py",
        "status": "modified",
        "additions": 41,
        "deletions": 11,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ce73985a80c3bb0c9a2024f8df6ce68c648dbb8/qa/rpc-tests/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ce73985a80c3bb0c9a2024f8df6ce68c648dbb8/qa/rpc-tests/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/comptool.py?ref=0ce73985a80c3bb0c9a2024f8df6ce68c648dbb8",
        "patch": "@@ -122,12 +122,19 @@ def send_mempool(self):\n # Instances of these are generated by the test generator, and fed into the\n # comptool.\n #\n-# \"blocks_and_transactions\" should be an array of [obj, True/False/None]:\n-#  - obj is either a CBlock or a CTransaction, and \n+# \"blocks_and_transactions\" should be an array of\n+#    [obj, True/False/None, hash/None]:\n+#  - obj is either a CBlock, CBlockHeader, or a CTransaction, and\n #  - the second value indicates whether the object should be accepted\n #    into the blockchain or mempool (for tests where we expect a certain\n #    answer), or \"None\" if we don't expect a certain answer and are just\n #    comparing the behavior of the nodes being tested.\n+#  - the third value is the hash to test the tip against (if None or omitted,\n+#    use the hash of the block)\n+#  - NOTE: if a block header, no test is performed; instead the header is\n+#    just added to the block_store.  This is to facilitate block delivery\n+#    when communicating with headers-first clients (when withholding an\n+#    intermediate block).\n # sync_every_block: if True, then each block will be inv'ed, synced, and\n #    nodes will be tested based on the outcome for the block.  If False,\n #    then inv's accumulate until all blocks are processed (or max inv size\n@@ -194,7 +201,6 @@ def blocks_requested():\n         if not wait_until(blocks_requested, attempts=20*num_blocks):\n             # print [ c.cb.block_request_map for c in self.connections ]\n             raise AssertionError(\"Not all nodes requested block\")\n-        # --> Answer request (we did this inline!)\n \n         # Send getheaders message\n         [ c.cb.send_getheaders() for c in self.connections ]\n@@ -217,7 +223,6 @@ def transaction_requested():\n         if not wait_until(transaction_requested, attempts=20*num_events):\n             # print [ c.cb.tx_request_map for c in self.connections ]\n             raise AssertionError(\"Not all nodes requested transaction\")\n-        # --> Answer request (we did this inline!)\n \n         # Get the mempool\n         [ c.cb.send_mempool() for c in self.connections ]\n@@ -272,29 +277,55 @@ def run(self):\n             # We use these variables to keep track of the last block\n             # and last transaction in the tests, which are used\n             # if we're not syncing on every block or every tx.\n-            [ block, block_outcome ] = [ None, None ]\n+            [ block, block_outcome, tip ] = [ None, None, None ]\n             [ tx, tx_outcome ] = [ None, None ]\n             invqueue = []\n \n-            for b_or_t, outcome in test_instance.blocks_and_transactions:\n+            for test_obj in test_instance.blocks_and_transactions:\n+                b_or_t = test_obj[0]\n+                outcome = test_obj[1]\n                 # Determine if we're dealing with a block or tx\n                 if isinstance(b_or_t, CBlock):  # Block test runner\n                     block = b_or_t\n                     block_outcome = outcome\n+                    tip = block.sha256\n+                    # each test_obj can have an optional third argument\n+                    # to specify the tip we should compare with\n+                    # (default is to use the block being tested)\n+                    if len(test_obj) >= 3:\n+                        tip = test_obj[2]\n+\n                     # Add to shared block_store, set as current block\n+                    # If there was an open getdata request for the block\n+                    # previously, and we didn't have an entry in the\n+                    # block_store, then immediately deliver, because the\n+                    # node wouldn't send another getdata request while\n+                    # the earlier one is outstanding.\n+                    first_block_with_hash = True\n+                    if self.block_store.get(block.sha256) is not None:\n+                        first_block_with_hash = False\n                     with mininode_lock:\n                         self.block_store.add_block(block)\n                         for c in self.connections:\n-                            c.cb.block_request_map[block.sha256] = False\n+                            if first_block_with_hash and block.sha256 in c.cb.block_request_map and c.cb.block_request_map[block.sha256] == True:\n+                                # There was a previous request for this block hash\n+                                # Most likely, we delivered a header for this block\n+                                # but never had the block to respond to the getdata\n+                                c.send_message(msg_block(block))\n+                            else:\n+                                c.cb.block_request_map[block.sha256] = False\n                     # Either send inv's to each node and sync, or add\n                     # to invqueue for later inv'ing.\n                     if (test_instance.sync_every_block):\n                         [ c.cb.send_inv(block) for c in self.connections ]\n                         self.sync_blocks(block.sha256, 1)\n-                        if (not self.check_results(block.sha256, outcome)):\n+                        if (not self.check_results(tip, outcome)):\n                             raise AssertionError(\"Test failed at test %d\" % test_number)\n                     else:\n                         invqueue.append(CInv(2, block.sha256))\n+                elif isinstance(b_or_t, CBlockHeader):\n+                    block_header = b_or_t\n+                    self.block_store.add_header(block_header)\n                 else:  # Tx test runner\n                     assert(isinstance(b_or_t, CTransaction))\n                     tx = b_or_t\n@@ -322,9 +353,8 @@ def run(self):\n                 if len(invqueue) > 0:\n                     [ c.send_message(msg_inv(invqueue)) for c in self.connections ]\n                     invqueue = []\n-                self.sync_blocks(block.sha256,\n-                                 len(test_instance.blocks_and_transactions))\n-                if (not self.check_results(block.sha256, block_outcome)):\n+                self.sync_blocks(block.sha256, len(test_instance.blocks_and_transactions))\n+                if (not self.check_results(tip, block_outcome)):\n                     raise AssertionError(\"Block test failed at test %d\" % test_number)\n             if (not test_instance.sync_every_tx and tx is not None):\n                 if len(invqueue) > 0:"
      },
      {
        "sha": "ba3038fe044f49f54e0d6286e22ae9d4cbcde7df",
        "filename": "qa/rpc-tests/test_framework/key.py",
        "status": "added",
        "additions": 215,
        "deletions": 0,
        "changes": 215,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ce73985a80c3bb0c9a2024f8df6ce68c648dbb8/qa/rpc-tests/test_framework/key.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ce73985a80c3bb0c9a2024f8df6ce68c648dbb8/qa/rpc-tests/test_framework/key.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/key.py?ref=0ce73985a80c3bb0c9a2024f8df6ce68c648dbb8",
        "patch": "@@ -0,0 +1,215 @@\n+# Copyright (c) 2011 Sam Rushing\n+#\n+# key.py - OpenSSL wrapper\n+#\n+# This file is modified from python-bitcoinlib.\n+#\n+\n+\"\"\"ECC secp256k1 crypto routines\n+\n+WARNING: This module does not mlock() secrets; your private keys may end up on\n+disk in swap! Use with caution!\n+\"\"\"\n+\n+import ctypes\n+import ctypes.util\n+import hashlib\n+import sys\n+\n+ssl = ctypes.cdll.LoadLibrary(ctypes.util.find_library ('ssl') or 'libeay32')\n+\n+ssl.BN_new.restype = ctypes.c_void_p\n+ssl.BN_new.argtypes = []\n+\n+ssl.BN_bin2bn.restype = ctypes.c_void_p\n+ssl.BN_bin2bn.argtypes = [ctypes.c_char_p, ctypes.c_int, ctypes.c_void_p]\n+\n+ssl.BN_CTX_free.restype = None\n+ssl.BN_CTX_free.argtypes = [ctypes.c_void_p]\n+\n+ssl.BN_CTX_new.restype = ctypes.c_void_p\n+ssl.BN_CTX_new.argtypes = []\n+\n+ssl.ECDH_compute_key.restype = ctypes.c_int\n+ssl.ECDH_compute_key.argtypes = [ctypes.c_void_p, ctypes.c_int, ctypes.c_void_p, ctypes.c_void_p]\n+\n+ssl.ECDSA_sign.restype = ctypes.c_int\n+ssl.ECDSA_sign.argtypes = [ctypes.c_int, ctypes.c_void_p, ctypes.c_int, ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p]\n+\n+ssl.ECDSA_verify.restype = ctypes.c_int\n+ssl.ECDSA_verify.argtypes = [ctypes.c_int, ctypes.c_void_p, ctypes.c_int, ctypes.c_void_p, ctypes.c_int, ctypes.c_void_p]\n+\n+ssl.EC_KEY_free.restype = None\n+ssl.EC_KEY_free.argtypes = [ctypes.c_void_p]\n+\n+ssl.EC_KEY_new_by_curve_name.restype = ctypes.c_void_p\n+ssl.EC_KEY_new_by_curve_name.argtypes = [ctypes.c_int]\n+\n+ssl.EC_KEY_get0_group.restype = ctypes.c_void_p\n+ssl.EC_KEY_get0_group.argtypes = [ctypes.c_void_p]\n+\n+ssl.EC_KEY_get0_public_key.restype = ctypes.c_void_p\n+ssl.EC_KEY_get0_public_key.argtypes = [ctypes.c_void_p]\n+\n+ssl.EC_KEY_set_private_key.restype = ctypes.c_int\n+ssl.EC_KEY_set_private_key.argtypes = [ctypes.c_void_p, ctypes.c_void_p]\n+\n+ssl.EC_KEY_set_conv_form.restype = None\n+ssl.EC_KEY_set_conv_form.argtypes = [ctypes.c_void_p, ctypes.c_int]\n+\n+ssl.EC_KEY_set_public_key.restype = ctypes.c_int\n+ssl.EC_KEY_set_public_key.argtypes = [ctypes.c_void_p, ctypes.c_void_p]\n+\n+ssl.i2o_ECPublicKey.restype = ctypes.c_void_p\n+ssl.i2o_ECPublicKey.argtypes = [ctypes.c_void_p, ctypes.c_void_p]\n+\n+ssl.EC_POINT_new.restype = ctypes.c_void_p\n+ssl.EC_POINT_new.argtypes = [ctypes.c_void_p]\n+\n+ssl.EC_POINT_free.restype = None\n+ssl.EC_POINT_free.argtypes = [ctypes.c_void_p]\n+\n+ssl.EC_POINT_mul.restype = ctypes.c_int\n+ssl.EC_POINT_mul.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p]\n+\n+# this specifies the curve used with ECDSA.\n+NID_secp256k1 = 714 # from openssl/obj_mac.h\n+\n+# Thx to Sam Devlin for the ctypes magic 64-bit fix.\n+def _check_result(val, func, args):\n+    if val == 0:\n+        raise ValueError\n+    else:\n+        return ctypes.c_void_p (val)\n+\n+ssl.EC_KEY_new_by_curve_name.restype = ctypes.c_void_p\n+ssl.EC_KEY_new_by_curve_name.errcheck = _check_result\n+\n+class CECKey(object):\n+    \"\"\"Wrapper around OpenSSL's EC_KEY\"\"\"\n+\n+    POINT_CONVERSION_COMPRESSED = 2\n+    POINT_CONVERSION_UNCOMPRESSED = 4\n+\n+    def __init__(self):\n+        self.k = ssl.EC_KEY_new_by_curve_name(NID_secp256k1)\n+\n+    def __del__(self):\n+        if ssl:\n+            ssl.EC_KEY_free(self.k)\n+        self.k = None\n+\n+    def set_secretbytes(self, secret):\n+        priv_key = ssl.BN_bin2bn(secret, 32, ssl.BN_new())\n+        group = ssl.EC_KEY_get0_group(self.k)\n+        pub_key = ssl.EC_POINT_new(group)\n+        ctx = ssl.BN_CTX_new()\n+        if not ssl.EC_POINT_mul(group, pub_key, priv_key, None, None, ctx):\n+            raise ValueError(\"Could not derive public key from the supplied secret.\")\n+        ssl.EC_POINT_mul(group, pub_key, priv_key, None, None, ctx)\n+        ssl.EC_KEY_set_private_key(self.k, priv_key)\n+        ssl.EC_KEY_set_public_key(self.k, pub_key)\n+        ssl.EC_POINT_free(pub_key)\n+        ssl.BN_CTX_free(ctx)\n+        return self.k\n+\n+    def set_privkey(self, key):\n+        self.mb = ctypes.create_string_buffer(key)\n+        return ssl.d2i_ECPrivateKey(ctypes.byref(self.k), ctypes.byref(ctypes.pointer(self.mb)), len(key))\n+\n+    def set_pubkey(self, key):\n+        self.mb = ctypes.create_string_buffer(key)\n+        return ssl.o2i_ECPublicKey(ctypes.byref(self.k), ctypes.byref(ctypes.pointer(self.mb)), len(key))\n+\n+    def get_privkey(self):\n+        size = ssl.i2d_ECPrivateKey(self.k, 0)\n+        mb_pri = ctypes.create_string_buffer(size)\n+        ssl.i2d_ECPrivateKey(self.k, ctypes.byref(ctypes.pointer(mb_pri)))\n+        return mb_pri.raw\n+\n+    def get_pubkey(self):\n+        size = ssl.i2o_ECPublicKey(self.k, 0)\n+        mb = ctypes.create_string_buffer(size)\n+        ssl.i2o_ECPublicKey(self.k, ctypes.byref(ctypes.pointer(mb)))\n+        return mb.raw\n+\n+    def get_raw_ecdh_key(self, other_pubkey):\n+        ecdh_keybuffer = ctypes.create_string_buffer(32)\n+        r = ssl.ECDH_compute_key(ctypes.pointer(ecdh_keybuffer), 32,\n+                                 ssl.EC_KEY_get0_public_key(other_pubkey.k),\n+                                 self.k, 0)\n+        if r != 32:\n+            raise Exception('CKey.get_ecdh_key(): ECDH_compute_key() failed')\n+        return ecdh_keybuffer.raw\n+\n+    def get_ecdh_key(self, other_pubkey, kdf=lambda k: hashlib.sha256(k).digest()):\n+        # FIXME: be warned it's not clear what the kdf should be as a default\n+        r = self.get_raw_ecdh_key(other_pubkey)\n+        return kdf(r)\n+\n+    def sign(self, hash):\n+        # FIXME: need unit tests for below cases\n+        if not isinstance(hash, bytes):\n+            raise TypeError('Hash must be bytes instance; got %r' % hash.__class__)\n+        if len(hash) != 32:\n+            raise ValueError('Hash must be exactly 32 bytes long')\n+\n+        sig_size0 = ctypes.c_uint32()\n+        sig_size0.value = ssl.ECDSA_size(self.k)\n+        mb_sig = ctypes.create_string_buffer(sig_size0.value)\n+        result = ssl.ECDSA_sign(0, hash, len(hash), mb_sig, ctypes.byref(sig_size0), self.k)\n+        assert 1 == result\n+        return mb_sig.raw[:sig_size0.value]\n+\n+    def verify(self, hash, sig):\n+        \"\"\"Verify a DER signature\"\"\"\n+        return ssl.ECDSA_verify(0, hash, len(hash), sig, len(sig), self.k) == 1\n+\n+    def set_compressed(self, compressed):\n+        if compressed:\n+            form = self.POINT_CONVERSION_COMPRESSED\n+        else:\n+            form = self.POINT_CONVERSION_UNCOMPRESSED\n+        ssl.EC_KEY_set_conv_form(self.k, form)\n+\n+\n+class CPubKey(bytes):\n+    \"\"\"An encapsulated public key\n+\n+    Attributes:\n+\n+    is_valid      - Corresponds to CPubKey.IsValid()\n+    is_fullyvalid - Corresponds to CPubKey.IsFullyValid()\n+    is_compressed - Corresponds to CPubKey.IsCompressed()\n+    \"\"\"\n+\n+    def __new__(cls, buf, _cec_key=None):\n+        self = super(CPubKey, cls).__new__(cls, buf)\n+        if _cec_key is None:\n+            _cec_key = CECKey()\n+        self._cec_key = _cec_key\n+        self.is_fullyvalid = _cec_key.set_pubkey(self) != 0\n+        return self\n+\n+    @property\n+    def is_valid(self):\n+        return len(self) > 0\n+\n+    @property\n+    def is_compressed(self):\n+        return len(self) == 33\n+\n+    def verify(self, hash, sig):\n+        return self._cec_key.verify(hash, sig)\n+\n+    def __str__(self):\n+        return repr(self)\n+\n+    def __repr__(self):\n+        # Always have represent as b'<secret>' so test cases don't have to\n+        # change for py2/3\n+        if sys.version > '3':\n+            return '%s(%s)' % (self.__class__.__name__, super(CPubKey, self).__repr__())\n+        else:\n+            return '%s(b%s)' % (self.__class__.__name__, super(CPubKey, self).__repr__())\n+"
      },
      {
        "sha": "0a78cf6fb1b3cca598325dd344880bcb89ba1187",
        "filename": "qa/rpc-tests/test_framework/script.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ce73985a80c3bb0c9a2024f8df6ce68c648dbb8/qa/rpc-tests/test_framework/script.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ce73985a80c3bb0c9a2024f8df6ce68c648dbb8/qa/rpc-tests/test_framework/script.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/script.py?ref=0ce73985a80c3bb0c9a2024f8df6ce68c648dbb8",
        "patch": "@@ -27,7 +27,7 @@\n import copy\n import struct\n \n-import test_framework.bignum\n+from test_framework.bignum import bn2vch\n \n MAX_SCRIPT_SIZE = 10000\n MAX_SCRIPT_ELEMENT_SIZE = 520\n@@ -664,7 +664,7 @@ def __coerce_instance(cls, other):\n             elif other == -1:\n                 other = bytes(bchr(OP_1NEGATE))\n             else:\n-                other = CScriptOp.encode_op_pushdata(bignum.bn2vch(other))\n+                other = CScriptOp.encode_op_pushdata(bn2vch(other))\n         elif isinstance(other, (bytes, bytearray)):\n             other = CScriptOp.encode_op_pushdata(other)\n         return other"
      }
    ]
  },
  {
    "sha": "541a1dd9e664ac0b3929abeac42190ac8e88fc21",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NDFhMWRkOWU2NjRhYzBiMzkyOWFiZWFjNDIxOTBhYzhlODhmYzIx",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-08-13T09:00:10Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-08-22T22:38:23Z"
      },
      "message": "Refactor: AcceptConnection",
      "tree": {
        "sha": "c8677b928ba29bcfd769d0645b805192487b64b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c8677b928ba29bcfd769d0645b805192487b64b8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/541a1dd9e664ac0b3929abeac42190ac8e88fc21",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/541a1dd9e664ac0b3929abeac42190ac8e88fc21",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/541a1dd9e664ac0b3929abeac42190ac8e88fc21",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/541a1dd9e664ac0b3929abeac42190ac8e88fc21/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "49793fbb097e9f00149a054adeddad07f0444c12",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49793fbb097e9f00149a054adeddad07f0444c12",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/49793fbb097e9f00149a054adeddad07f0444c12"
      }
    ],
    "stats": {
      "total": 120,
      "additions": 62,
      "deletions": 58
    },
    "files": [
      {
        "sha": "8f1db2695e5230bddaa9869085cdff5719e4741f",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 62,
        "deletions": 58,
        "changes": 120,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/541a1dd9e664ac0b3929abeac42190ac8e88fc21/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/541a1dd9e664ac0b3929abeac42190ac8e88fc21/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=541a1dd9e664ac0b3929abeac42190ac8e88fc21",
        "patch": "@@ -776,6 +776,67 @@ void SocketSendData(CNode *pnode)\n \n static list<CNode*> vNodesDisconnected;\n \n+static void AcceptConnection(const ListenSocket& hListenSocket) {\n+    struct sockaddr_storage sockaddr;\n+    socklen_t len = sizeof(sockaddr);\n+    SOCKET hSocket = accept(hListenSocket.socket, (struct sockaddr*)&sockaddr, &len);\n+    CAddress addr;\n+    int nInbound = 0;\n+    int nMaxInbound = nMaxConnections - MAX_OUTBOUND_CONNECTIONS;\n+\n+    if (hSocket != INVALID_SOCKET)\n+        if (!addr.SetSockAddr((const struct sockaddr*)&sockaddr))\n+            LogPrintf(\"Warning: Unknown socket family\\n\");\n+\n+    bool whitelisted = hListenSocket.whitelisted || CNode::IsWhitelistedRange(addr);\n+    {\n+        LOCK(cs_vNodes);\n+        BOOST_FOREACH(CNode* pnode, vNodes)\n+            if (pnode->fInbound)\n+                nInbound++;\n+    }\n+\n+    if (hSocket == INVALID_SOCKET)\n+    {\n+        int nErr = WSAGetLastError();\n+        if (nErr != WSAEWOULDBLOCK)\n+            LogPrintf(\"socket error accept failed: %s\\n\", NetworkErrorString(nErr));\n+    }\n+    else if (!IsSelectableSocket(hSocket))\n+    {\n+        LogPrintf(\"connection from %s dropped: non-selectable socket\\n\", addr.ToString());\n+        CloseSocket(hSocket);\n+    }\n+    else if (nInbound >= nMaxInbound)\n+    {\n+        LogPrint(\"net\", \"connection from %s dropped (full)\\n\", addr.ToString());\n+        CloseSocket(hSocket);\n+    }\n+    else if (!whitelisted && (nInbound >= (nMaxInbound - nWhiteConnections)))\n+    {\n+        LogPrint(\"net\", \"connection from %s dropped (non-whitelisted)\\n\", addr.ToString());\n+        CloseSocket(hSocket);\n+    }\n+    else if (CNode::IsBanned(addr) && !whitelisted)\n+    {\n+        LogPrintf(\"connection from %s dropped (banned)\\n\", addr.ToString());\n+        CloseSocket(hSocket);\n+    }\n+    else\n+    {\n+        CNode* pnode = new CNode(hSocket, addr, \"\", true);\n+        pnode->AddRef();\n+        pnode->fWhitelisted = whitelisted;\n+\n+        LogPrint(\"net\", \"connection from %s accepted\\n\", addr.ToString());\n+\n+        {\n+            LOCK(cs_vNodes);\n+            vNodes.push_back(pnode);\n+        }\n+    }\n+}\n+\n void ThreadSocketHandler()\n {\n     unsigned int nPrevNodeCount = 0;\n@@ -933,64 +994,7 @@ void ThreadSocketHandler()\n         {\n             if (hListenSocket.socket != INVALID_SOCKET && FD_ISSET(hListenSocket.socket, &fdsetRecv))\n             {\n-                struct sockaddr_storage sockaddr;\n-                socklen_t len = sizeof(sockaddr);\n-                SOCKET hSocket = accept(hListenSocket.socket, (struct sockaddr*)&sockaddr, &len);\n-                CAddress addr;\n-                int nInbound = 0;\n-                int nMaxInbound = nMaxConnections - MAX_OUTBOUND_CONNECTIONS;\n-\n-                if (hSocket != INVALID_SOCKET)\n-                    if (!addr.SetSockAddr((const struct sockaddr*)&sockaddr))\n-                        LogPrintf(\"Warning: Unknown socket family\\n\");\n-\n-                bool whitelisted = hListenSocket.whitelisted || CNode::IsWhitelistedRange(addr);\n-                {\n-                    LOCK(cs_vNodes);\n-                    BOOST_FOREACH(CNode* pnode, vNodes)\n-                        if (pnode->fInbound)\n-                            nInbound++;\n-                }\n-\n-                if (hSocket == INVALID_SOCKET)\n-                {\n-                    int nErr = WSAGetLastError();\n-                    if (nErr != WSAEWOULDBLOCK)\n-                        LogPrintf(\"socket error accept failed: %s\\n\", NetworkErrorString(nErr));\n-                }\n-                else if (!IsSelectableSocket(hSocket))\n-                {\n-                    LogPrintf(\"connection from %s dropped: non-selectable socket\\n\", addr.ToString());\n-                    CloseSocket(hSocket);\n-                }\n-                else if (nInbound >= nMaxInbound)\n-                {\n-                    LogPrint(\"net\", \"connection from %s dropped (full)\\n\", addr.ToString());\n-                    CloseSocket(hSocket);\n-                }\n-                else if (!whitelisted && (nInbound >= (nMaxInbound - nWhiteConnections)))\n-                {\n-                    LogPrint(\"net\", \"connection from %s dropped (non-whitelisted)\\n\", addr.ToString());\n-                    CloseSocket(hSocket);\n-                }\n-                else if (CNode::IsBanned(addr) && !whitelisted)\n-                {\n-                    LogPrintf(\"connection from %s dropped (banned)\\n\", addr.ToString());\n-                    CloseSocket(hSocket);\n-                }\n-                else\n-                {\n-                    CNode* pnode = new CNode(hSocket, addr, \"\", true);\n-                    pnode->AddRef();\n-                    pnode->fWhitelisted = whitelisted;\n-\n-                    LogPrint(\"net\", \"connection from %s accepted\\n\", addr.ToString());\n-\n-                    {\n-                        LOCK(cs_vNodes);\n-                        vNodes.push_back(pnode);\n-                    }\n-                }\n+                AcceptConnection(hListenSocket);\n             }\n         }\n "
      }
    ]
  },
  {
    "sha": "1ef481761477e26651dc56b4378b146cd5c416db",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZWY0ODE3NjE0NzdlMjY2NTFkYzU2YjQzNzhiMTQ2Y2Q1YzQxNmRi",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-08-13T09:16:46Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-08-22T22:38:23Z"
      },
      "message": "Refactor: Bail early in AcceptConnection",
      "tree": {
        "sha": "db1df3a748cbb90d3c06efc7bfc3f2496f2688fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/db1df3a748cbb90d3c06efc7bfc3f2496f2688fa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1ef481761477e26651dc56b4378b146cd5c416db",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ef481761477e26651dc56b4378b146cd5c416db",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1ef481761477e26651dc56b4378b146cd5c416db",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ef481761477e26651dc56b4378b146cd5c416db/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "541a1dd9e664ac0b3929abeac42190ac8e88fc21",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/541a1dd9e664ac0b3929abeac42190ac8e88fc21",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/541a1dd9e664ac0b3929abeac42190ac8e88fc21"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 21,
      "deletions": 14
    },
    "files": [
      {
        "sha": "6214c754c3f0a77c56ef362b2c2ef6e71a656aeb",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 14,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ef481761477e26651dc56b4378b146cd5c416db/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ef481761477e26651dc56b4378b146cd5c416db/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=1ef481761477e26651dc56b4378b146cd5c416db",
        "patch": "@@ -801,39 +801,46 @@ static void AcceptConnection(const ListenSocket& hListenSocket) {\n         int nErr = WSAGetLastError();\n         if (nErr != WSAEWOULDBLOCK)\n             LogPrintf(\"socket error accept failed: %s\\n\", NetworkErrorString(nErr));\n+        return;\n     }\n-    else if (!IsSelectableSocket(hSocket))\n+\n+    if (!IsSelectableSocket(hSocket))\n     {\n         LogPrintf(\"connection from %s dropped: non-selectable socket\\n\", addr.ToString());\n         CloseSocket(hSocket);\n+        return;\n     }\n-    else if (nInbound >= nMaxInbound)\n+\n+    if (nInbound >= nMaxInbound)\n     {\n         LogPrint(\"net\", \"connection from %s dropped (full)\\n\", addr.ToString());\n         CloseSocket(hSocket);\n+        return;\n     }\n-    else if (!whitelisted && (nInbound >= (nMaxInbound - nWhiteConnections)))\n+\n+    if (!whitelisted && (nInbound >= (nMaxInbound - nWhiteConnections)))\n     {\n         LogPrint(\"net\", \"connection from %s dropped (non-whitelisted)\\n\", addr.ToString());\n         CloseSocket(hSocket);\n+        return;\n     }\n-    else if (CNode::IsBanned(addr) && !whitelisted)\n+\n+    if (CNode::IsBanned(addr) && !whitelisted)\n     {\n         LogPrintf(\"connection from %s dropped (banned)\\n\", addr.ToString());\n         CloseSocket(hSocket);\n+        return;\n     }\n-    else\n-    {\n-        CNode* pnode = new CNode(hSocket, addr, \"\", true);\n-        pnode->AddRef();\n-        pnode->fWhitelisted = whitelisted;\n \n-        LogPrint(\"net\", \"connection from %s accepted\\n\", addr.ToString());\n+    CNode* pnode = new CNode(hSocket, addr, \"\", true);\n+    pnode->AddRef();\n+    pnode->fWhitelisted = whitelisted;\n \n-        {\n-            LOCK(cs_vNodes);\n-            vNodes.push_back(pnode);\n-        }\n+    LogPrint(\"net\", \"connection from %s accepted\\n\", addr.ToString());\n+\n+    {\n+        LOCK(cs_vNodes);\n+        vNodes.push_back(pnode);\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "ae037b707ce164087790f149c048871c66e14cfd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZTAzN2I3MDdjZTE2NDA4Nzc5MGYxNDljMDQ4ODcxYzY2ZTE0Y2Zk",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-08-13T09:19:17Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-08-22T22:38:23Z"
      },
      "message": "Refactor: Move failure conditions to the top of AcceptConnection",
      "tree": {
        "sha": "83ec6a96f200bf98bc2a939634db1170ba9e81d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/83ec6a96f200bf98bc2a939634db1170ba9e81d2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ae037b707ce164087790f149c048871c66e14cfd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae037b707ce164087790f149c048871c66e14cfd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ae037b707ce164087790f149c048871c66e14cfd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae037b707ce164087790f149c048871c66e14cfd/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1ef481761477e26651dc56b4378b146cd5c416db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ef481761477e26651dc56b4378b146cd5c416db",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1ef481761477e26651dc56b4378b146cd5c416db"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "248aedfa12be30be24df0607c7f19345d89dc3fa",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae037b707ce164087790f149c048871c66e14cfd/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae037b707ce164087790f149c048871c66e14cfd/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=ae037b707ce164087790f149c048871c66e14cfd",
        "patch": "@@ -811,23 +811,23 @@ static void AcceptConnection(const ListenSocket& hListenSocket) {\n         return;\n     }\n \n-    if (nInbound >= nMaxInbound)\n+    if (CNode::IsBanned(addr) && !whitelisted)\n     {\n-        LogPrint(\"net\", \"connection from %s dropped (full)\\n\", addr.ToString());\n+        LogPrintf(\"connection from %s dropped (banned)\\n\", addr.ToString());\n         CloseSocket(hSocket);\n         return;\n     }\n \n-    if (!whitelisted && (nInbound >= (nMaxInbound - nWhiteConnections)))\n+    if (nInbound >= nMaxInbound)\n     {\n-        LogPrint(\"net\", \"connection from %s dropped (non-whitelisted)\\n\", addr.ToString());\n+        LogPrint(\"net\", \"connection from %s dropped (full)\\n\", addr.ToString());\n         CloseSocket(hSocket);\n         return;\n     }\n \n-    if (CNode::IsBanned(addr) && !whitelisted)\n+    if (!whitelisted && (nInbound >= (nMaxInbound - nWhiteConnections)))\n     {\n-        LogPrintf(\"connection from %s dropped (banned)\\n\", addr.ToString());\n+        LogPrint(\"net\", \"connection from %s dropped (non-whitelisted)\\n\", addr.ToString());\n         CloseSocket(hSocket);\n         return;\n     }"
      }
    ]
  },
  {
    "sha": "4bac60161029de6d71ef1e51e7af803ce6fb8405",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YmFjNjAxNjEwMjlkZTZkNzFlZjFlNTFlN2FmODAzY2U2ZmI4NDA1",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-08-13T09:31:46Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-08-22T22:38:23Z"
      },
      "message": "Record nMinPingUsecTime",
      "tree": {
        "sha": "2d8ff260f263ea341c9d6fef7eb564c355144d4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2d8ff260f263ea341c9d6fef7eb564c355144d4c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4bac60161029de6d71ef1e51e7af803ce6fb8405",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4bac60161029de6d71ef1e51e7af803ce6fb8405",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4bac60161029de6d71ef1e51e7af803ce6fb8405",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4bac60161029de6d71ef1e51e7af803ce6fb8405/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ae037b707ce164087790f149c048871c66e14cfd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae037b707ce164087790f149c048871c66e14cfd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ae037b707ce164087790f149c048871c66e14cfd"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "35fbec666594c6bf564442bd36d83d348395cbba",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4bac60161029de6d71ef1e51e7af803ce6fb8405/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4bac60161029de6d71ef1e51e7af803ce6fb8405/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=4bac60161029de6d71ef1e51e7af803ce6fb8405",
        "patch": "@@ -4522,6 +4522,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     if (pingUsecTime > 0) {\n                         // Successful ping time measurement, replace previous\n                         pfrom->nPingUsecTime = pingUsecTime;\n+                        pfrom->nMinPingUsecTime = std::min(pfrom->nMinPingUsecTime, pingUsecTime);\n                     } else {\n                         // This should never happen\n                         sProblem = \"Timing mishap\";"
      },
      {
        "sha": "de2955732337adfb5907158725f42b34d5d2f4fb",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4bac60161029de6d71ef1e51e7af803ce6fb8405/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4bac60161029de6d71ef1e51e7af803ce6fb8405/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=4bac60161029de6d71ef1e51e7af803ce6fb8405",
        "patch": "@@ -395,6 +395,8 @@ class CNode\n     int64_t nPingUsecStart;\n     // Last measured round-trip time.\n     int64_t nPingUsecTime;\n+    // Best measured round-trip time.\n+    int64_t nMinPingUsecTime;\n     // Whether a ping is requested.\n     bool fPingQueued;\n "
      }
    ]
  },
  {
    "sha": "2c701537c8fc7f4cfb0163ec1f49662120e61eb7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYzcwMTUzN2M4ZmM3ZjRjZmIwMTYzZWMxZjQ5NjYyMTIwZTYxZWI3",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-08-13T09:58:58Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-08-22T22:38:24Z"
      },
      "message": "AttemptToEvictConnection",
      "tree": {
        "sha": "8a214908600caeecd4d27ecd0ea9691e34bed0f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8a214908600caeecd4d27ecd0ea9691e34bed0f7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2c701537c8fc7f4cfb0163ec1f49662120e61eb7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c701537c8fc7f4cfb0163ec1f49662120e61eb7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2c701537c8fc7f4cfb0163ec1f49662120e61eb7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c701537c8fc7f4cfb0163ec1f49662120e61eb7/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4bac60161029de6d71ef1e51e7af803ce6fb8405",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4bac60161029de6d71ef1e51e7af803ce6fb8405",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4bac60161029de6d71ef1e51e7af803ce6fb8405"
      }
    ],
    "stats": {
      "total": 116,
      "additions": 106,
      "deletions": 10
    },
    "files": [
      {
        "sha": "0fab0f82afbca1dfc59e40284530065cef485b97",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 106,
        "deletions": 10,
        "changes": 116,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c701537c8fc7f4cfb0163ec1f49662120e61eb7/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c701537c8fc7f4cfb0163ec1f49662120e61eb7/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=2c701537c8fc7f4cfb0163ec1f49662120e61eb7",
        "patch": "@@ -776,6 +776,106 @@ void SocketSendData(CNode *pnode)\n \n static list<CNode*> vNodesDisconnected;\n \n+static bool ReverseCompareNodeMinPingTime(CNode *a, CNode *b)\n+{\n+    return a->nMinPingUsecTime > b->nMinPingUsecTime;\n+}\n+\n+static bool ReverseCompareNodeTimeConnected(CNode *a, CNode *b)\n+{\n+    return a->nTimeConnected > b->nTimeConnected;\n+}\n+\n+class CompareNetGroupKeyed\n+{\n+    std::vector<unsigned char> vchSecretKey;\n+public:\n+    CompareNetGroupKeyed()\n+    {\n+        vchSecretKey.resize(32, 0);\n+        GetRandBytes(vchSecretKey.data(), vchSecretKey.size());\n+    }\n+\n+    bool operator()(CNode *a, CNode *b)\n+    {\n+        std::vector<unsigned char> vchGroupA, vchGroupB;\n+        CSHA256 hashA, hashB;\n+        std::vector<unsigned char> vchA(32), vchB(32);\n+\n+        vchGroupA = a->addr.GetGroup();\n+        vchGroupB = b->addr.GetGroup();\n+\n+        hashA.Write(begin_ptr(vchGroupA), vchGroupA.size());\n+        hashB.Write(begin_ptr(vchGroupB), vchGroupB.size());\n+\n+        hashA.Write(begin_ptr(vchSecretKey), vchSecretKey.size());\n+        hashB.Write(begin_ptr(vchSecretKey), vchSecretKey.size());\n+\n+        hashA.Finalize(begin_ptr(vchA));\n+        hashB.Finalize(begin_ptr(vchB));\n+\n+        return vchA < vchB;\n+    }\n+};\n+\n+static bool AttemptToEvictConnection() {\n+    std::vector<CNode*> vEvictionCandidates;\n+    {\n+        LOCK(cs_vNodes);\n+\n+        BOOST_FOREACH(CNode *node, vNodes) {\n+            if (node->fWhitelisted)\n+                continue;\n+            if (!node->fInbound)\n+                continue;\n+            if (node->fDisconnect)\n+                continue;\n+            if (node->addr.IsLocal())\n+                continue;\n+            vEvictionCandidates.push_back(node);\n+        }\n+    }\n+\n+    // Protect connections with certain characteristics\n+    static CompareNetGroupKeyed comparerNetGroupKeyed;\n+    std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), comparerNetGroupKeyed);\n+    vEvictionCandidates.erase(vEvictionCandidates.end() - std::min(4, static_cast<int>(vEvictionCandidates.size())), vEvictionCandidates.end());\n+\n+    std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), ReverseCompareNodeMinPingTime);\n+    vEvictionCandidates.erase(vEvictionCandidates.end() - std::min(8, static_cast<int>(vEvictionCandidates.size())), vEvictionCandidates.end());\n+\n+    std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), ReverseCompareNodeTimeConnected);\n+    vEvictionCandidates.erase(vEvictionCandidates.end() - std::min(64, static_cast<int>(vEvictionCandidates.size())), vEvictionCandidates.end());\n+\n+    if (vEvictionCandidates.empty())\n+        return false;\n+\n+    // Identify CNetAddr with the most connections\n+    CNetAddr naMostConnections;\n+    unsigned int nMostConnections = 0;\n+    std::map<CNetAddr, std::vector<CNode*> > mapAddrCounts;\n+    BOOST_FOREACH(CNode *node, vEvictionCandidates) {\n+        mapAddrCounts[node->addr].push_back(node);\n+\n+        if (mapAddrCounts[node->addr].size() > nMostConnections) {\n+            nMostConnections = mapAddrCounts[node->addr].size();\n+            naMostConnections = node->addr;\n+        }\n+    }\n+\n+    // Reduce to the CNetAddr with the most connections\n+    vEvictionCandidates = mapAddrCounts[naMostConnections];\n+\n+    if (vEvictionCandidates.size() <= 1)\n+        return false;\n+\n+    // Disconnect the most recent connection from the CNetAddr with the most connections\n+    std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), ReverseCompareNodeTimeConnected);\n+    vEvictionCandidates[0]->fDisconnect = true;\n+\n+    return true;\n+}\n+\n static void AcceptConnection(const ListenSocket& hListenSocket) {\n     struct sockaddr_storage sockaddr;\n     socklen_t len = sizeof(sockaddr);\n@@ -820,16 +920,12 @@ static void AcceptConnection(const ListenSocket& hListenSocket) {\n \n     if (nInbound >= nMaxInbound)\n     {\n-        LogPrint(\"net\", \"connection from %s dropped (full)\\n\", addr.ToString());\n-        CloseSocket(hSocket);\n-        return;\n-    }\n-\n-    if (!whitelisted && (nInbound >= (nMaxInbound - nWhiteConnections)))\n-    {\n-        LogPrint(\"net\", \"connection from %s dropped (non-whitelisted)\\n\", addr.ToString());\n-        CloseSocket(hSocket);\n-        return;\n+        if (!AttemptToEvictConnection()) {\n+            // No connection to evict, disconnect the new connection\n+            LogPrint(\"net\", \"failed to find an eviction candidate - connection dropped (full)\\n\");\n+            CloseSocket(hSocket);\n+            return;\n+        }\n     }\n \n     CNode* pnode = new CNode(hSocket, addr, \"\", true);"
      }
    ]
  },
  {
    "sha": "b105ba398b20789eb482e45f26ae1761800b81be",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMTA1YmEzOThiMjA3ODllYjQ4MmU0NWYyNmFlMTc2MTgwMGI4MWJl",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-08-14T00:22:35Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-08-22T22:38:24Z"
      },
      "message": "Prefer to disconnect peers in favor of whitelisted peers",
      "tree": {
        "sha": "117cca0214e0f9ab7a6cf757755475b1bc53e6f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/117cca0214e0f9ab7a6cf757755475b1bc53e6f9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b105ba398b20789eb482e45f26ae1761800b81be",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b105ba398b20789eb482e45f26ae1761800b81be",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b105ba398b20789eb482e45f26ae1761800b81be",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b105ba398b20789eb482e45f26ae1761800b81be/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2c701537c8fc7f4cfb0163ec1f49662120e61eb7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c701537c8fc7f4cfb0163ec1f49662120e61eb7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2c701537c8fc7f4cfb0163ec1f49662120e61eb7"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 6,
      "deletions": 3
    },
    "files": [
      {
        "sha": "77dde994458569f3bce7551eae3fd68854df4699",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b105ba398b20789eb482e45f26ae1761800b81be/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b105ba398b20789eb482e45f26ae1761800b81be/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=b105ba398b20789eb482e45f26ae1761800b81be",
        "patch": "@@ -818,7 +818,7 @@ class CompareNetGroupKeyed\n     }\n };\n \n-static bool AttemptToEvictConnection() {\n+static bool AttemptToEvictConnection(bool fPreferNewConnection) {\n     std::vector<CNode*> vEvictionCandidates;\n     {\n         LOCK(cs_vNodes);\n@@ -866,8 +866,11 @@ static bool AttemptToEvictConnection() {\n     // Reduce to the CNetAddr with the most connections\n     vEvictionCandidates = mapAddrCounts[naMostConnections];\n \n+    // Do not disconnect peers who have only 1 evictable connection\n     if (vEvictionCandidates.size() <= 1)\n-        return false;\n+        // unless we prefer the new connection (for whitelisted peers)\n+        if (!fPreferNewConnection)\n+            return false;\n \n     // Disconnect the most recent connection from the CNetAddr with the most connections\n     std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), ReverseCompareNodeTimeConnected);\n@@ -920,7 +923,7 @@ static void AcceptConnection(const ListenSocket& hListenSocket) {\n \n     if (nInbound >= nMaxInbound)\n     {\n-        if (!AttemptToEvictConnection()) {\n+        if (!AttemptToEvictConnection(whitelisted)) {\n             // No connection to evict, disconnect the new connection\n             LogPrint(\"net\", \"failed to find an eviction candidate - connection dropped (full)\\n\");\n             CloseSocket(hSocket);"
      }
    ]
  },
  {
    "sha": "a8f6e45249e815414cc99e7b594a8a7ab7ab9247",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOGY2ZTQ1MjQ5ZTgxNTQxNGNjOTllN2I1OTRhOGE3YWI3YWI5MjQ3",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-08-14T00:32:57Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-08-22T22:38:24Z"
      },
      "message": "Remove redundant whiteconnections option",
      "tree": {
        "sha": "4e64a78c1aa4be6c0940eea111b975484765244b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4e64a78c1aa4be6c0940eea111b975484765244b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a8f6e45249e815414cc99e7b594a8a7ab7ab9247",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8f6e45249e815414cc99e7b594a8a7ab7ab9247",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a8f6e45249e815414cc99e7b594a8a7ab7ab9247",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8f6e45249e815414cc99e7b594a8a7ab7ab9247/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b105ba398b20789eb482e45f26ae1761800b81be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b105ba398b20789eb482e45f26ae1761800b81be",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b105ba398b20789eb482e45f26ae1761800b81be"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 0,
      "deletions": 41
    },
    "files": [
      {
        "sha": "3aebe4f7be2f76cbb75aedd2cbb734c7256294d7",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 29,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8f6e45249e815414cc99e7b594a8a7ab7ab9247/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8f6e45249e815414cc99e7b594a8a7ab7ab9247/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a8f6e45249e815414cc99e7b594a8a7ab7ab9247",
        "patch": "@@ -335,7 +335,6 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-whitebind=<addr>\", _(\"Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6\"));\n     strUsage += HelpMessageOpt(\"-whitelist=<netmask>\", _(\"Whitelist peers connecting from the given netmask or IP address. Can be specified multiple times.\") +\n         \" \" + _(\"Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway\"));\n-    strUsage += HelpMessageOpt(\"-whiteconnections=<n>\", strprintf(_(\"Reserve this many inbound connections for whitelisted peers (default: %d)\"), 0));\n \n #ifdef ENABLE_WALLET\n     strUsage += HelpMessageGroup(_(\"Wallet options:\"));\n@@ -754,25 +753,6 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     int nBind = std::max((int)mapArgs.count(\"-bind\") + (int)mapArgs.count(\"-whitebind\"), 1);\n     int nUserMaxConnections = GetArg(\"-maxconnections\", DEFAULT_MAX_PEER_CONNECTIONS);\n     nMaxConnections = std::max(nUserMaxConnections, 0);\n-    int nUserWhiteConnections = GetArg(\"-whiteconnections\", 0);\n-    nWhiteConnections = std::max(nUserWhiteConnections, 0);\n-\n-    if ((mapArgs.count(\"-whitelist\")) || (mapArgs.count(\"-whitebind\"))) {\n-        if (!(mapArgs.count(\"-maxconnections\"))) {\n-            // User is using whitelist feature,\n-            // but did not specify -maxconnections parameter.\n-            // Silently increase the default to compensate,\n-            // so that the whitelist connection reservation feature\n-            // does not inadvertently reduce the default\n-            // inbound connection capacity of the network.\n-            nMaxConnections += nWhiteConnections;\n-        }\n-    } else {\n-        // User not using whitelist feature.\n-        // Silently disable connection reservation,\n-        // for the same reason as above.\n-        nWhiteConnections = 0;\n-    }\n \n     // Trim requested connection counts, to fit into system limitations\n     nMaxConnections = std::max(std::min(nMaxConnections, (int)(FD_SETSIZE - nBind - MIN_CORE_FILEDESCRIPTORS)), 0);\n@@ -784,13 +764,6 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     if (nMaxConnections < nUserMaxConnections)\n         InitWarning(strprintf(_(\"Reducing -maxconnections from %d to %d, because of system limitations.\"), nUserMaxConnections, nMaxConnections));\n \n-    // Connection capacity is prioritized in this order:\n-    // outbound connections (hardcoded to 8),\n-    // then whitelisted connections,\n-    // then non-whitelisted connections get whatever's left (if any).\n-    if ((nWhiteConnections > 0) && (nWhiteConnections >= (nMaxConnections - 8)))\n-        InitWarning(strprintf(_(\"All non-whitelisted incoming connections will be dropped, because -whiteconnections is %d and -maxconnections is only %d.\"), nWhiteConnections, nMaxConnections));\n-\n     // ********************************************************* Step 3: parameter-to-internal-flags\n \n     fDebug = !mapMultiArgs[\"-debug\"].empty();\n@@ -968,8 +941,6 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     LogPrintf(\"Using data directory %s\\n\", strDataDir);\n     LogPrintf(\"Using config file %s\\n\", GetConfigFile().string());\n     LogPrintf(\"Using at most %i connections (%i file descriptors available)\\n\", nMaxConnections, nFD);\n-    if (nWhiteConnections > 0)\n-        LogPrintf(\"Reserving %i of these connections for whitelisted inbound peers\\n\", nWhiteConnections);\n     std::ostringstream strErrors;\n \n     LogPrintf(\"Using %u threads for script verification\\n\", nScriptCheckThreads);"
      },
      {
        "sha": "9cfb9d71dba85164a295430e6f2e221f66e50ebc",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8f6e45249e815414cc99e7b594a8a7ab7ab9247/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8f6e45249e815414cc99e7b594a8a7ab7ab9247/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=a8f6e45249e815414cc99e7b594a8a7ab7ab9247",
        "patch": "@@ -81,7 +81,6 @@ uint64_t nLocalHostNonce = 0;\n static std::vector<ListenSocket> vhListenSocket;\n CAddrMan addrman;\n int nMaxConnections = DEFAULT_MAX_PEER_CONNECTIONS;\n-int nWhiteConnections = 0;\n bool fAddressesInitialized = false;\n std::string strSubVersion;\n "
      },
      {
        "sha": "f370bf1ff4a00c0c7c074d0f9d034ca3b7f0f165",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 11,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8f6e45249e815414cc99e7b594a8a7ab7ab9247/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8f6e45249e815414cc99e7b594a8a7ab7ab9247/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=a8f6e45249e815414cc99e7b594a8a7ab7ab9247",
        "patch": "@@ -143,19 +143,8 @@ extern uint64_t nLocalServices;\n extern uint64_t nLocalHostNonce;\n extern CAddrMan addrman;\n \n-// The allocation of connections against the maximum allowed (nMaxConnections)\n-// is prioritized as follows:\n-// 1st: Outbound connections (MAX_OUTBOUND_CONNECTIONS)\n-// 2nd: Inbound connections from whitelisted peers (nWhiteConnections)\n-// 3rd: Inbound connections from non-whitelisted peers\n-// Thus, the number of connection slots for the general public to use is:\n-// nMaxConnections - (MAX_OUTBOUND_CONNECTIONS + nWhiteConnections)\n-// Any additional inbound connections beyond limits will be immediately closed\n-\n /** Maximum number of connections to simultaneously allow (aka connection slots) */\n extern int nMaxConnections;\n-/** Number of connection slots to reserve for inbound from whitelisted peers */\n-extern int nWhiteConnections;\n \n extern std::vector<CNode*> vNodes;\n extern CCriticalSection cs_vNodes;"
      }
    ]
  },
  {
    "sha": "df239374224e6585d5b6ba37a39282d0fc647173",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZjIzOTM3NDIyNGU2NTg1ZDViNmJhMzdhMzkyODJkMGZjNjQ3MTcz",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-08-20T23:47:49Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-08-22T22:38:24Z"
      },
      "message": "Add comments to AttemptToEvictConnection",
      "tree": {
        "sha": "55d7c556f35241f91699566427c024575962ca26",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/55d7c556f35241f91699566427c024575962ca26"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df239374224e6585d5b6ba37a39282d0fc647173",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df239374224e6585d5b6ba37a39282d0fc647173",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/df239374224e6585d5b6ba37a39282d0fc647173",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df239374224e6585d5b6ba37a39282d0fc647173/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a8f6e45249e815414cc99e7b594a8a7ab7ab9247",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8f6e45249e815414cc99e7b594a8a7ab7ab9247",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a8f6e45249e815414cc99e7b594a8a7ab7ab9247"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 7,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d8d2783c4b58ef1ab37611e9fbb87e9dbea9c846",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df239374224e6585d5b6ba37a39282d0fc647173/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df239374224e6585d5b6ba37a39282d0fc647173/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=df239374224e6585d5b6ba37a39282d0fc647173",
        "patch": "@@ -836,13 +836,20 @@ static bool AttemptToEvictConnection(bool fPreferNewConnection) {\n     }\n \n     // Protect connections with certain characteristics\n+\n+    // Deterministically select 4 peers to protect by netgroup.\n+    // An attacker cannot predict which netgroups will be protected.\n     static CompareNetGroupKeyed comparerNetGroupKeyed;\n     std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), comparerNetGroupKeyed);\n     vEvictionCandidates.erase(vEvictionCandidates.end() - std::min(4, static_cast<int>(vEvictionCandidates.size())), vEvictionCandidates.end());\n \n+    // Protect the 8 nodes with the best ping times.\n+    // An attacker cannot manipulate this metric without physically moving nodes closer to the target.\n     std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), ReverseCompareNodeMinPingTime);\n     vEvictionCandidates.erase(vEvictionCandidates.end() - std::min(8, static_cast<int>(vEvictionCandidates.size())), vEvictionCandidates.end());\n \n+    // Protect the 64 nodes which have been connected the longest.\n+    // This replicates the existing implicit behavior.\n     std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), ReverseCompareNodeTimeConnected);\n     vEvictionCandidates.erase(vEvictionCandidates.end() - std::min(64, static_cast<int>(vEvictionCandidates.size())), vEvictionCandidates.end());\n "
      }
    ]
  },
  {
    "sha": "1317cd1928afbae14fedb39c8d23589a32fe2951",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMzE3Y2QxOTI4YWZiYWUxNGZlZGIzOWM4ZDIzNTg5YTMyZmUyOTUx",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-08-21T00:29:04Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-08-22T22:38:24Z"
      },
      "message": "RAII wrapper for CNode*",
      "tree": {
        "sha": "d118302220f1907d931c0ede0bff57e50769cd57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d118302220f1907d931c0ede0bff57e50769cd57"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1317cd1928afbae14fedb39c8d23589a32fe2951",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1317cd1928afbae14fedb39c8d23589a32fe2951",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1317cd1928afbae14fedb39c8d23589a32fe2951",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1317cd1928afbae14fedb39c8d23589a32fe2951/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "df239374224e6585d5b6ba37a39282d0fc647173",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df239374224e6585d5b6ba37a39282d0fc647173",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/df239374224e6585d5b6ba37a39282d0fc647173"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 18,
      "deletions": 7
    },
    "files": [
      {
        "sha": "709c6524304a0eb2f72a449d1fcb77a45ba9af5c",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 7,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1317cd1928afbae14fedb39c8d23589a32fe2951/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1317cd1928afbae14fedb39c8d23589a32fe2951/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=1317cd1928afbae14fedb39c8d23589a32fe2951",
        "patch": "@@ -775,12 +775,23 @@ void SocketSendData(CNode *pnode)\n \n static list<CNode*> vNodesDisconnected;\n \n-static bool ReverseCompareNodeMinPingTime(CNode *a, CNode *b)\n+class CNodeRef {\n+public:\n+    CNodeRef(CNode *pnode) : _pnode(pnode)  {_pnode->AddRef();}\n+    ~CNodeRef() {_pnode->Release();}\n+\n+    CNode& operator *() const {return *_pnode;};\n+    CNode* operator ->() const {return _pnode;};\n+private:\n+    CNode *_pnode;\n+};\n+\n+static bool ReverseCompareNodeMinPingTime(const CNodeRef &a, const CNodeRef &b)\n {\n     return a->nMinPingUsecTime > b->nMinPingUsecTime;\n }\n \n-static bool ReverseCompareNodeTimeConnected(CNode *a, CNode *b)\n+static bool ReverseCompareNodeTimeConnected(const CNodeRef &a, const CNodeRef &b)\n {\n     return a->nTimeConnected > b->nTimeConnected;\n }\n@@ -795,7 +806,7 @@ class CompareNetGroupKeyed\n         GetRandBytes(vchSecretKey.data(), vchSecretKey.size());\n     }\n \n-    bool operator()(CNode *a, CNode *b)\n+    bool operator()(const CNodeRef &a, const CNodeRef &b)\n     {\n         std::vector<unsigned char> vchGroupA, vchGroupB;\n         CSHA256 hashA, hashB;\n@@ -818,7 +829,7 @@ class CompareNetGroupKeyed\n };\n \n static bool AttemptToEvictConnection(bool fPreferNewConnection) {\n-    std::vector<CNode*> vEvictionCandidates;\n+    std::vector<CNodeRef> vEvictionCandidates;\n     {\n         LOCK(cs_vNodes);\n \n@@ -831,7 +842,7 @@ static bool AttemptToEvictConnection(bool fPreferNewConnection) {\n                 continue;\n             if (node->addr.IsLocal())\n                 continue;\n-            vEvictionCandidates.push_back(node);\n+            vEvictionCandidates.push_back(CNodeRef(node));\n         }\n     }\n \n@@ -859,8 +870,8 @@ static bool AttemptToEvictConnection(bool fPreferNewConnection) {\n     // Identify CNetAddr with the most connections\n     CNetAddr naMostConnections;\n     unsigned int nMostConnections = 0;\n-    std::map<CNetAddr, std::vector<CNode*> > mapAddrCounts;\n-    BOOST_FOREACH(CNode *node, vEvictionCandidates) {\n+    std::map<CNetAddr, std::vector<CNodeRef> > mapAddrCounts;\n+    BOOST_FOREACH(const CNodeRef &node, vEvictionCandidates) {\n         mapAddrCounts[node->addr].push_back(node);\n \n         if (mapAddrCounts[node->addr].size() > nMostConnections) {"
      }
    ]
  },
  {
    "sha": "17f3533c8484f02732fff5cf004d251c0df50eb8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxN2YzNTMzYzg0ODRmMDI3MzJmZmY1Y2YwMDRkMjUxYzBkZjUwZWI4",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-08-22T01:42:05Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-08-22T22:38:24Z"
      },
      "message": "Better support for nodes with non-standard nMaxConnections",
      "tree": {
        "sha": "880b188bf54056f929bbd1066dde6bbff91015c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/880b188bf54056f929bbd1066dde6bbff91015c5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/17f3533c8484f02732fff5cf004d251c0df50eb8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17f3533c8484f02732fff5cf004d251c0df50eb8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/17f3533c8484f02732fff5cf004d251c0df50eb8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17f3533c8484f02732fff5cf004d251c0df50eb8/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1317cd1928afbae14fedb39c8d23589a32fe2951",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1317cd1928afbae14fedb39c8d23589a32fe2951",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1317cd1928afbae14fedb39c8d23589a32fe2951"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "4d08f63e32f412b21cd78a4918daf3b2de4aef79",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17f3533c8484f02732fff5cf004d251c0df50eb8/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17f3533c8484f02732fff5cf004d251c0df50eb8/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=17f3533c8484f02732fff5cf004d251c0df50eb8",
        "patch": "@@ -862,7 +862,7 @@ static bool AttemptToEvictConnection(bool fPreferNewConnection) {\n     // Protect the 64 nodes which have been connected the longest.\n     // This replicates the existing implicit behavior.\n     std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), ReverseCompareNodeTimeConnected);\n-    vEvictionCandidates.erase(vEvictionCandidates.end() - std::min(64, static_cast<int>(vEvictionCandidates.size())), vEvictionCandidates.end());\n+    vEvictionCandidates.erase(vEvictionCandidates.end() - std::min(static_cast<int>(vEvictionCandidates.size() / 2), static_cast<int>(vEvictionCandidates.size())), vEvictionCandidates.end());\n \n     if (vEvictionCandidates.empty())\n         return false;"
      }
    ]
  },
  {
    "sha": "dc81dd02a1d5f47ca45f74577e0696dfba6fa15c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYzgxZGQwMmExZDVmNDdjYTQ1Zjc0NTc3ZTA2OTZkZmJhNmZhMTVj",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-08-22T22:15:39Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-08-22T22:38:24Z"
      },
      "message": "Return false early if vEvictionCandidates is empty",
      "tree": {
        "sha": "5da7ab8cadd3c501d2ca8c74f0d53267ee184c20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5da7ab8cadd3c501d2ca8c74f0d53267ee184c20"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dc81dd02a1d5f47ca45f74577e0696dfba6fa15c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc81dd02a1d5f47ca45f74577e0696dfba6fa15c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dc81dd02a1d5f47ca45f74577e0696dfba6fa15c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc81dd02a1d5f47ca45f74577e0696dfba6fa15c/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "17f3533c8484f02732fff5cf004d251c0df50eb8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17f3533c8484f02732fff5cf004d251c0df50eb8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/17f3533c8484f02732fff5cf004d251c0df50eb8"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 8,
      "deletions": 3
    },
    "files": [
      {
        "sha": "4f4c7b81c4e4497d4369a693ac1e8bf90fd10615",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc81dd02a1d5f47ca45f74577e0696dfba6fa15c/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc81dd02a1d5f47ca45f74577e0696dfba6fa15c/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=dc81dd02a1d5f47ca45f74577e0696dfba6fa15c",
        "patch": "@@ -846,6 +846,8 @@ static bool AttemptToEvictConnection(bool fPreferNewConnection) {\n         }\n     }\n \n+    if (vEvictionCandidates.empty()) return false;\n+\n     // Protect connections with certain characteristics\n \n     // Deterministically select 4 peers to protect by netgroup.\n@@ -854,18 +856,21 @@ static bool AttemptToEvictConnection(bool fPreferNewConnection) {\n     std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), comparerNetGroupKeyed);\n     vEvictionCandidates.erase(vEvictionCandidates.end() - std::min(4, static_cast<int>(vEvictionCandidates.size())), vEvictionCandidates.end());\n \n+    if (vEvictionCandidates.empty()) return false;\n+\n     // Protect the 8 nodes with the best ping times.\n     // An attacker cannot manipulate this metric without physically moving nodes closer to the target.\n     std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), ReverseCompareNodeMinPingTime);\n     vEvictionCandidates.erase(vEvictionCandidates.end() - std::min(8, static_cast<int>(vEvictionCandidates.size())), vEvictionCandidates.end());\n \n+    if (vEvictionCandidates.empty()) return false;\n+\n     // Protect the 64 nodes which have been connected the longest.\n     // This replicates the existing implicit behavior.\n     std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), ReverseCompareNodeTimeConnected);\n-    vEvictionCandidates.erase(vEvictionCandidates.end() - std::min(static_cast<int>(vEvictionCandidates.size() / 2), static_cast<int>(vEvictionCandidates.size())), vEvictionCandidates.end());\n+    vEvictionCandidates.erase(vEvictionCandidates.end() - static_cast<int>(vEvictionCandidates.size() / 2), vEvictionCandidates.end());\n \n-    if (vEvictionCandidates.empty())\n-        return false;\n+    if (vEvictionCandidates.empty()) return false;\n \n     // Identify CNetAddr with the most connections\n     CNetAddr naMostConnections;"
      }
    ]
  },
  {
    "sha": "9f3e48e5219a09b5ddfd6883d1f0498910eff4b6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZjNlNDhlNTIxOWEwOWI1ZGRmZDY4ODNkMWYwNDk4OTEwZWZmNGI2",
    "commit": {
      "author": {
        "name": "Pavel Vasin",
        "email": "pavel@vasin.nl",
        "date": "2015-08-23T20:53:49Z"
      },
      "committer": {
        "name": "Pavel Vasin",
        "email": "pavel@vasin.nl",
        "date": "2015-08-23T20:53:49Z"
      },
      "message": "add support for miniupnpc api version 14\n\nThe value of new arg ttl is set to 2 as it's recommended default.",
      "tree": {
        "sha": "08761b90dd4f1a65c7234366862b2612254631f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/08761b90dd4f1a65c7234366862b2612254631f7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9f3e48e5219a09b5ddfd6883d1f0498910eff4b6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f3e48e5219a09b5ddfd6883d1f0498910eff4b6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9f3e48e5219a09b5ddfd6883d1f0498910eff4b6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f3e48e5219a09b5ddfd6883d1f0498910eff4b6/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "49793fbb097e9f00149a054adeddad07f0444c12",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49793fbb097e9f00149a054adeddad07f0444c12",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/49793fbb097e9f00149a054adeddad07f0444c12"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 5,
      "deletions": 1
    },
    "files": [
      {
        "sha": "4c6331f8d5765b070cb880f42cf2e0dc84557c93",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f3e48e5219a09b5ddfd6883d1f0498910eff4b6/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f3e48e5219a09b5ddfd6883d1f0498910eff4b6/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=9f3e48e5219a09b5ddfd6883d1f0498910eff4b6",
        "patch": "@@ -1120,10 +1120,14 @@ void ThreadMapPort()\n #ifndef UPNPDISCOVER_SUCCESS\n     /* miniupnpc 1.5 */\n     devlist = upnpDiscover(2000, multicastif, minissdpdpath, 0);\n-#else\n+#elif MINIUPNPC_API_VERSION < 14\n     /* miniupnpc 1.6 */\n     int error = 0;\n     devlist = upnpDiscover(2000, multicastif, minissdpdpath, 0, 0, &error);\n+#else\n+    /* miniupnpc 1.9.20150730 */\n+    int error = 0;\n+    devlist = upnpDiscover(2000, multicastif, minissdpdpath, 0, 0, 2, &error);\n #endif\n \n     struct UPNPUrls urls;"
      }
    ]
  },
  {
    "sha": "561f8af45040d9b306a85023d916b3196956bfdc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NjFmOGFmNDUwNDBkOWIzMDZhODUwMjNkOTE2YjMxOTY5NTZiZmRj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-24T11:16:49Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-24T11:25:49Z"
      },
      "message": "Merge pull request #6523\n\n0ce7398 Add p2p-fullblocktest.py (Casey Rodarmor)",
      "tree": {
        "sha": "b78eda0e18074aa748107c6296abacb034b299bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b78eda0e18074aa748107c6296abacb034b299bf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/561f8af45040d9b306a85023d916b3196956bfdc",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJV2v89AAoJEHSBCwEjRsmmj+EIAJdxjmI2H/p6mUXjnJ6UsGNC\nvC1ZkppRiwwjysOL9bLbeOEh4pENe/GGHAAonoXcos8tLUN2FHNJJmwONtSXxYKN\n2yaTIcvosbj8PIpsZ8T4xvfw60UENGVPZCFpwNZ6DL6iWTLThvmIolqZ9OR8ZiuP\nNz5AWSePd7CfFF+IF58MNC5OU5EfEfpcv1Hu9Zxdw9Nu7S1o5E2kclYRDLuB+RlC\nc2o70aH0JnBpbDuaLdSCUeSgzyqzNrNRBvPvyj4fmQMFSY6WXSjz7znUWvb95DQg\nT5PmtWpV45oEiqT5PCI/+wAY6TVTRI8kpJO7BwfUcAJXwPzwvdPDu72WH+qe2v8=\n=17Yp\n-----END PGP SIGNATURE-----",
        "payload": "tree b78eda0e18074aa748107c6296abacb034b299bf\nparent 49793fbb097e9f00149a054adeddad07f0444c12\nparent 0ce73985a80c3bb0c9a2024f8df6ce68c648dbb8\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1440415009 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1440415549 +0200\n\nMerge pull request #6523\n\n0ce7398 Add p2p-fullblocktest.py (Casey Rodarmor)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/561f8af45040d9b306a85023d916b3196956bfdc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/561f8af45040d9b306a85023d916b3196956bfdc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/561f8af45040d9b306a85023d916b3196956bfdc/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "49793fbb097e9f00149a054adeddad07f0444c12",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49793fbb097e9f00149a054adeddad07f0444c12",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/49793fbb097e9f00149a054adeddad07f0444c12"
      },
      {
        "sha": "0ce73985a80c3bb0c9a2024f8df6ce68c648dbb8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ce73985a80c3bb0c9a2024f8df6ce68c648dbb8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0ce73985a80c3bb0c9a2024f8df6ce68c648dbb8"
      }
    ],
    "stats": {
      "total": 755,
      "additions": 702,
      "deletions": 53
    },
    "files": [
      {
        "sha": "5d581819dac5f21c8c6f72aaa6910a29aa030c99",
        "filename": "qa/pull-tester/rpc-tests.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/561f8af45040d9b306a85023d916b3196956bfdc/qa/pull-tester/rpc-tests.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/561f8af45040d9b306a85023d916b3196956bfdc/qa/pull-tester/rpc-tests.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.sh?ref=561f8af45040d9b306a85023d916b3196956bfdc",
        "patch": "@@ -36,6 +36,7 @@ testScripts=(\n     'nodehandling.py'\n     'reindex.py'\n     'decodescript.py'\n+    'p2p-fullblocktest.py'\n );\n testScriptsExt=(\n     'bipdersig-p2p.py'"
      },
      {
        "sha": "c6d17212821c391f74ee511bc63f40a50f95fd12",
        "filename": "qa/rpc-tests/README.md",
        "status": "modified",
        "additions": 103,
        "deletions": 2,
        "changes": 105,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/561f8af45040d9b306a85023d916b3196956bfdc/qa/rpc-tests/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/561f8af45040d9b306a85023d916b3196956bfdc/qa/rpc-tests/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/README.md?ref=561f8af45040d9b306a85023d916b3196956bfdc",
        "patch": "@@ -1,5 +1,5 @@\n-Regression tests of RPC interface\n-=================================\n+Regression tests\n+================\n \n ### [python-bitcoinrpc](https://github.com/jgarzik/python-bitcoinrpc)\n Git subtree of [https://github.com/jgarzik/python-bitcoinrpc](https://github.com/jgarzik/python-bitcoinrpc).\n@@ -12,6 +12,28 @@ Base class for new regression tests.\n ### [test_framework/util.py](test_framework/util.py)\n Generally useful functions.\n \n+### [test_framework/mininode.py](test_framework/mininode.py)\n+Basic code to support p2p connectivity to a bitcoind.\n+\n+### [test_framework/comptool.py](test_framework/comptool.py)\n+Framework for comparison-tool style, p2p tests.\n+\n+### [test_framework/script.py](test_framework/script.py)\n+Utilities for manipulating transaction scripts (originally from python-bitcoinlib)\n+\n+### [test_framework/blockstore.py](test_framework/blockstore.py)\n+Implements disk-backed block and tx storage.\n+\n+### [test_framework/key.py](test_framework/key.py)\n+Wrapper around OpenSSL EC_Key (originally from python-bitcoinlib)\n+\n+### [test_framework/bignum.py](test_framework/bignum.py)\n+Helpers for script.py\n+\n+### [test_framework/blocktools.py](test_framework/blocktools.py)\n+Helper functions for creating blocks and transactions.\n+\n+\n Notes\n =====\n \n@@ -49,3 +71,82 @@ to recover with:\n rm -rf cache\n killall bitcoind\n ```\n+\n+P2P test design notes\n+---------------------\n+\n+## Mininode\n+\n+* ```mininode.py``` contains all the definitions for objects that pass\n+over the network (```CBlock```, ```CTransaction```, etc, along with the network-level\n+wrappers for them, ```msg_block```, ```msg_tx```, etc).\n+\n+* P2P tests have two threads.  One thread handles all network communication\n+with the bitcoind(s) being tested (using python's asyncore package); the other\n+implements the test logic.\n+\n+* ```NodeConn``` is the class used to connect to a bitcoind.  If you implement\n+a callback class that derives from ```NodeConnCB``` and pass that to the\n+```NodeConn``` object, your code will receive the appropriate callbacks when\n+events of interest arrive.  NOTE: be sure to call\n+```self.create_callback_map()``` in your derived classes' ```__init__```\n+function, so that the correct mappings are set up between p2p messages and your\n+callback functions.\n+\n+* You can pass the same handler to multiple ```NodeConn```'s if you like, or pass\n+different ones to each -- whatever makes the most sense for your test.\n+\n+* Call ```NetworkThread.start()``` after all ```NodeConn``` objects are created to\n+start the networking thread.  (Continue with the test logic in your existing\n+thread.)\n+\n+* RPC calls are available in p2p tests.\n+\n+* Can be used to write free-form tests, where specific p2p-protocol behavior\n+is tested.  Examples: ```p2p-accept-block.py```, ```maxblocksinflight.py```.\n+\n+## Comptool\n+\n+* Testing framework for writing tests that compare the block/tx acceptance\n+behavior of a bitcoind against 1 or more other bitcoind instances, or against\n+known outcomes, or both.\n+\n+* Set the ```num_nodes``` variable (defined in ```ComparisonTestFramework```) to start up\n+1 or more nodes.  If using 1 node, then ```--testbinary``` can be used as a command line\n+option to change the bitcoind binary used by the test.  If using 2 or more nodes,\n+then ```--refbinary``` can be optionally used to change the bitcoind that will be used\n+on nodes 2 and up.\n+\n+* Implement a (generator) function called ```get_tests()``` which yields ```TestInstance```s.\n+Each ```TestInstance``` consists of:\n+  - a list of ```[object, outcome, hash]``` entries\n+    * ```object``` is a ```CBlock```, ```CTransaction```, or\n+    ```CBlockHeader```.  ```CBlock```'s and ```CTransaction```'s are tested for\n+    acceptance.  ```CBlockHeader```s can be used so that the test runner can deliver\n+    complete headers-chains when requested from the bitcoind, to allow writing\n+    tests where blocks can be delivered out of order but still processed by\n+    headers-first bitcoind's.\n+    * ```outcome``` is ```True```, ```False```, or ```None```.  If ```True```\n+    or ```False```, the tip is compared with the expected tip -- either the\n+    block passed in, or the hash specified as the optional 3rd entry.  If\n+    ```None``` is specified, then the test will compare all the bitcoind's\n+    being tested to see if they all agree on what the best tip is.\n+    * ```hash``` is the block hash of the tip to compare against. Optional to\n+    specify; if left out then the hash of the block passed in will be used as\n+    the expected tip.  This allows for specifying an expected tip while testing\n+    the handling of either invalid blocks or blocks delivered out of order,\n+    which complete a longer chain.\n+  - ```sync_every_block```: ```True/False```.  If ```False```, then all blocks\n+    are inv'ed together, and the test runner waits until the node receives the\n+    last one, and tests only the last block for tip acceptance using the\n+    outcome and specified tip.  If ```True```, then each block is tested in\n+    sequence and synced (this is slower when processing many blocks).\n+  - ```sync_every_transaction```: ```True/False```.  Analogous to\n+    ```sync_every_block```, except if the outcome on the last tx is \"None\",\n+    then the contents of the entire mempool are compared across all bitcoind\n+    connections.  If ```True``` or ```False```, then only the last tx's\n+    acceptance is tested against the given outcome.\n+\n+* For examples of tests written in this framework, see\n+  ```invalidblockrequest.py``` and ```p2p-fullblocktest.py```.\n+"
      },
      {
        "sha": "ec1678cc2cfe9de4e5de3f4570666701fbdfe806",
        "filename": "qa/rpc-tests/bipdersig-p2p.py",
        "status": "modified",
        "additions": 15,
        "deletions": 8,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/561f8af45040d9b306a85023d916b3196956bfdc/qa/rpc-tests/bipdersig-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/561f8af45040d9b306a85023d916b3196956bfdc/qa/rpc-tests/bipdersig-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bipdersig-p2p.py?ref=561f8af45040d9b306a85023d916b3196956bfdc",
        "patch": "@@ -75,32 +75,35 @@ def create_transaction(self, node, coinbase, to_address, amount):\n     def get_tests(self):\n \n         self.coinbase_blocks = self.nodes[0].generate(2)\n+        height = 3  # height of the next block to build\n         self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n         self.nodeaddress = self.nodes[0].getnewaddress()\n         self.last_block_time = time.time()\n \n         ''' 98 more version 2 blocks '''\n         test_blocks = []\n         for i in xrange(98):\n-            block = create_block(self.tip, create_coinbase(2), self.last_block_time + 1)\n+            block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n             block.nVersion = 2\n             block.rehash()\n             block.solve()\n             test_blocks.append([block, True])\n             self.last_block_time += 1\n             self.tip = block.sha256\n+            height += 1\n         yield TestInstance(test_blocks, sync_every_block=False)\n \n         ''' Mine 749 version 3 blocks '''\n         test_blocks = []\n         for i in xrange(749):\n-            block = create_block(self.tip, create_coinbase(2), self.last_block_time + 1)\n+            block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n             block.nVersion = 3\n             block.rehash()\n             block.solve()\n             test_blocks.append([block, True])\n             self.last_block_time += 1\n             self.tip = block.sha256\n+            height += 1\n         yield TestInstance(test_blocks, sync_every_block=False)\n \n         ''' \n@@ -112,7 +115,7 @@ def get_tests(self):\n         unDERify(spendtx)\n         spendtx.rehash()\n \n-        block = create_block(self.tip, create_coinbase(2), self.last_block_time + 1)\n+        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n         block.nVersion = 3\n         block.vtx.append(spendtx)\n         block.hashMerkleRoot = block.calc_merkle_root()\n@@ -121,6 +124,7 @@ def get_tests(self):\n \n         self.last_block_time += 1\n         self.tip = block.sha256\n+        height += 1\n         yield TestInstance([[block, True]])\n \n         ''' \n@@ -132,7 +136,7 @@ def get_tests(self):\n         unDERify(spendtx)\n         spendtx.rehash()\n \n-        block = create_block(self.tip, create_coinbase(1), self.last_block_time + 1)\n+        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n         block.nVersion = 3\n         block.vtx.append(spendtx)\n         block.hashMerkleRoot = block.calc_merkle_root()\n@@ -144,35 +148,38 @@ def get_tests(self):\n         ''' Mine 199 new version blocks on last valid tip '''\n         test_blocks = []\n         for i in xrange(199):\n-            block = create_block(self.tip, create_coinbase(1), self.last_block_time + 1)\n+            block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n             block.nVersion = 3\n             block.rehash()\n             block.solve()\n             test_blocks.append([block, True])\n             self.last_block_time += 1\n             self.tip = block.sha256\n+            height += 1\n         yield TestInstance(test_blocks, sync_every_block=False)\n \n         ''' Mine 1 old version block '''\n-        block = create_block(self.tip, create_coinbase(1), self.last_block_time + 1)\n+        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n         block.nVersion = 2\n         block.rehash()\n         block.solve()\n         self.last_block_time += 1\n         self.tip = block.sha256\n+        height += 1\n         yield TestInstance([[block, True]])\n \n         ''' Mine 1 new version block '''\n-        block = create_block(self.tip, create_coinbase(1), self.last_block_time + 1)\n+        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n         block.nVersion = 3\n         block.rehash()\n         block.solve()\n         self.last_block_time += 1\n         self.tip = block.sha256\n+        height += 1\n         yield TestInstance([[block, True]])\n \n         ''' Mine 1 old version block, should be invalid '''\n-        block = create_block(self.tip, create_coinbase(1), self.last_block_time + 1)\n+        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n         block.nVersion = 2\n         block.rehash()\n         block.solve()"
      },
      {
        "sha": "6a7980cd45a522e091540bf9d8f4d452da024df0",
        "filename": "qa/rpc-tests/invalidblockrequest.py",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/561f8af45040d9b306a85023d916b3196956bfdc/qa/rpc-tests/invalidblockrequest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/561f8af45040d9b306a85023d916b3196956bfdc/qa/rpc-tests/invalidblockrequest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/invalidblockrequest.py?ref=561f8af45040d9b306a85023d916b3196956bfdc",
        "patch": "@@ -46,24 +46,27 @@ def get_tests(self):\n         '''\n         Create a new block with an anyone-can-spend coinbase\n         '''\n-        block = create_block(self.tip, create_coinbase(), self.block_time)\n+        height = 1\n+        block = create_block(self.tip, create_coinbase(height), self.block_time)\n         self.block_time += 1\n         block.solve()\n         # Save the coinbase for later\n         self.block1 = block\n         self.tip = block.sha256\n+        height += 1\n         yield TestInstance([[block, True]])\n \n         '''\n         Now we need that block to mature so we can spend the coinbase.\n         '''\n         test = TestInstance(sync_every_block=False)\n         for i in xrange(100):\n-            block = create_block(self.tip, create_coinbase(), self.block_time)\n+            block = create_block(self.tip, create_coinbase(height), self.block_time)\n             block.solve()\n             self.tip = block.sha256\n             self.block_time += 1\n             test.blocks_and_transactions.append([block, True])\n+            height += 1\n         yield test\n \n         '''\n@@ -73,7 +76,7 @@ def get_tests(self):\n         coinbase, spend of that spend).  Duplicate the 3rd transaction to \n         leave merkle root and blockheader unchanged but invalidate the block.\n         '''\n-        block2 = create_block(self.tip, create_coinbase(), self.block_time)\n+        block2 = create_block(self.tip, create_coinbase(height), self.block_time)\n         self.block_time += 1\n \n         # chr(81) is OP_TRUE\n@@ -95,11 +98,12 @@ def get_tests(self):\n \n         self.tip = block2.sha256\n         yield TestInstance([[block2, False], [block2_orig, True]])\n+        height += 1\n \n         '''\n         Make sure that a totally screwed up block is not valid.\n         '''\n-        block3 = create_block(self.tip, create_coinbase(), self.block_time)\n+        block3 = create_block(self.tip, create_coinbase(height), self.block_time)\n         self.block_time += 1\n         block3.vtx[0].vout[0].nValue = 100*100000000 # Too high!\n         block3.vtx[0].sha256=None"
      },
      {
        "sha": "700deab207152482c26325e27d947473ff8b10e9",
        "filename": "qa/rpc-tests/p2p-acceptblock.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/561f8af45040d9b306a85023d916b3196956bfdc/qa/rpc-tests/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/561f8af45040d9b306a85023d916b3196956bfdc/qa/rpc-tests/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-acceptblock.py?ref=561f8af45040d9b306a85023d916b3196956bfdc",
        "patch": "@@ -153,7 +153,7 @@ def run_test(self):\n         blocks_h2 = []  # the height 2 blocks on each node's chain\n         block_time = time.time() + 1\n         for i in xrange(2):\n-            blocks_h2.append(create_block(tips[i], create_coinbase(), block_time))\n+            blocks_h2.append(create_block(tips[i], create_coinbase(2), block_time))\n             blocks_h2[i].solve()\n             block_time += 1\n         test_node.send_message(msg_block(blocks_h2[0]))\n@@ -167,7 +167,7 @@ def run_test(self):\n         # 3. Send another block that builds on the original tip.\n         blocks_h2f = []  # Blocks at height 2 that fork off the main chain\n         for i in xrange(2):\n-            blocks_h2f.append(create_block(tips[i], create_coinbase(), blocks_h2[i].nTime+1))\n+            blocks_h2f.append(create_block(tips[i], create_coinbase(2), blocks_h2[i].nTime+1))\n             blocks_h2f[i].solve()\n         test_node.send_message(msg_block(blocks_h2f[0]))\n         white_node.send_message(msg_block(blocks_h2f[1]))\n@@ -186,7 +186,7 @@ def run_test(self):\n         # 4. Now send another block that builds on the forking chain.\n         blocks_h3 = []\n         for i in xrange(2):\n-            blocks_h3.append(create_block(blocks_h2f[i].sha256, create_coinbase(), blocks_h2f[i].nTime+1))\n+            blocks_h3.append(create_block(blocks_h2f[i].sha256, create_coinbase(3), blocks_h2f[i].nTime+1))\n             blocks_h3[i].solve()\n         test_node.send_message(msg_block(blocks_h3[0]))\n         white_node.send_message(msg_block(blocks_h3[1]))\n@@ -217,7 +217,7 @@ def run_test(self):\n         all_blocks = []   # node0's blocks\n         for j in xrange(2):\n             for i in xrange(288):\n-                next_block = create_block(tips[j].sha256, create_coinbase(), tips[j].nTime+1)\n+                next_block = create_block(tips[j].sha256, create_coinbase(i + 4), tips[j].nTime+1)\n                 next_block.solve()\n                 if j==0:\n                     test_node.send_message(msg_block(next_block))"
      },
      {
        "sha": "9555940cece5e4789f9c6657f687ae74b733a402",
        "filename": "qa/rpc-tests/p2p-fullblocktest.py",
        "status": "added",
        "additions": 272,
        "deletions": 0,
        "changes": 272,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/561f8af45040d9b306a85023d916b3196956bfdc/qa/rpc-tests/p2p-fullblocktest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/561f8af45040d9b306a85023d916b3196956bfdc/qa/rpc-tests/p2p-fullblocktest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-fullblocktest.py?ref=561f8af45040d9b306a85023d916b3196956bfdc",
        "patch": "@@ -0,0 +1,272 @@\n+#!/usr/bin/env python2\n+\n+#\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+\n+from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.util import *\n+from test_framework.comptool import TestManager, TestInstance\n+from test_framework.mininode import *\n+from test_framework.blocktools import *\n+import logging\n+import copy\n+import time\n+import numbers\n+from test_framework.key import CECKey\n+from test_framework.script import CScript, CScriptOp, SignatureHash, SIGHASH_ALL, OP_TRUE\n+\n+class PreviousSpendableOutput(object):\n+    def __init__(self, tx = CTransaction(), n = -1):\n+        self.tx = tx\n+        self.n = n  # the output we're spending\n+\n+'''\n+This reimplements tests from the bitcoinj/FullBlockTestGenerator used\n+by the pull-tester.\n+\n+We use the testing framework in which we expect a particular answer from\n+each test.\n+'''\n+\n+class FullBlockTest(ComparisonTestFramework):\n+\n+    ''' Can either run this test as 1 node with expected answers, or two and compare them. \n+        Change the \"outcome\" variable from each TestInstance object to only do the comparison. '''\n+    def __init__(self):\n+        self.num_nodes = 1\n+        self.block_heights = {}\n+        self.coinbase_key = CECKey()\n+        self.coinbase_key.set_secretbytes(bytes(\"horsebattery\"))\n+        self.coinbase_pubkey = self.coinbase_key.get_pubkey()\n+        self.block_time = int(time.time())+1\n+        self.tip = None\n+        self.blocks = {}\n+\n+    def run_test(self):\n+        test = TestManager(self, self.options.tmpdir)\n+        test.add_all_connections(self.nodes)\n+        NetworkThread().start() # Start up network handling in another thread\n+        test.run()\n+\n+    def add_transactions_to_block(self, block, tx_list):\n+        [ tx.rehash() for tx in tx_list ]\n+        block.vtx.extend(tx_list)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.rehash()\n+        return block\n+    \n+    # Create a block on top of self.tip, and advance self.tip to point to the new block\n+    # if spend is specified, then 1 satoshi will be spent from that to an anyone-can-spend output,\n+    # and rest will go to fees.\n+    def next_block(self, number, spend=None, additional_coinbase_value=0, script=None):\n+        if self.tip == None:\n+            base_block_hash = self.genesis_hash\n+        else:\n+            base_block_hash = self.tip.sha256\n+        # First create the coinbase\n+        height = self.block_heights[base_block_hash] + 1\n+        coinbase = create_coinbase(height, self.coinbase_pubkey)\n+        coinbase.vout[0].nValue += additional_coinbase_value\n+        if (spend != None):\n+            coinbase.vout[0].nValue += spend.tx.vout[spend.n].nValue - 1 # all but one satoshi to fees\n+        coinbase.rehash()\n+        block = create_block(base_block_hash, coinbase, self.block_time)\n+        if (spend != None):\n+            tx = CTransaction()\n+            tx.vin.append(CTxIn(COutPoint(spend.tx.sha256, spend.n), \"\", 0xffffffff))  # no signature yet\n+            # This copies the java comparison tool testing behavior: the first\n+            # txout has a garbage scriptPubKey, \"to make sure we're not\n+            # pre-verifying too much\" (?)\n+            tx.vout.append(CTxOut(0, CScript([random.randint(0,255), height & 255])))\n+            if script == None:\n+                tx.vout.append(CTxOut(1, CScript([OP_TRUE])))\n+            else:\n+                tx.vout.append(CTxOut(1, script))\n+            # Now sign it if necessary\n+            scriptSig = \"\"\n+            scriptPubKey = bytearray(spend.tx.vout[spend.n].scriptPubKey)\n+            if (scriptPubKey[0] == OP_TRUE):  # looks like an anyone-can-spend\n+                scriptSig = CScript([OP_TRUE])\n+            else:\n+                # We have to actually sign it\n+                (sighash, err) = SignatureHash(spend.tx.vout[spend.n].scriptPubKey, tx, 0, SIGHASH_ALL)\n+                scriptSig = CScript([self.coinbase_key.sign(sighash) + bytes(bytearray([SIGHASH_ALL]))])\n+            tx.vin[0].scriptSig = scriptSig\n+            # Now add the transaction to the block\n+            block = self.add_transactions_to_block(block, [tx])\n+        block.solve()\n+        self.tip = block\n+        self.block_heights[block.sha256] = height\n+        self.block_time += 1\n+        assert number not in self.blocks\n+        self.blocks[number] = block\n+        return block\n+\n+    def get_tests(self):\n+        self.genesis_hash = int(self.nodes[0].getbestblockhash(), 16)\n+        self.block_heights[self.genesis_hash] = 0\n+        spendable_outputs = []\n+\n+        # save the current tip so it can be spent by a later block\n+        def save_spendable_output():\n+            spendable_outputs.append(self.tip)\n+\n+        # get an output that we previous marked as spendable\n+        def get_spendable_output():\n+            return PreviousSpendableOutput(spendable_outputs.pop(0).vtx[0], 0)\n+\n+        # returns a test case that asserts that the current tip was accepted\n+        def accepted():\n+            return TestInstance([[self.tip, True]])\n+\n+        # returns a test case that asserts that the current tip was rejected\n+        def rejected():\n+            return TestInstance([[self.tip, False]])\n+       \n+        # move the tip back to a previous block\n+        def tip(number):\n+            self.tip = self.blocks[number]\n+\n+        # creates a new block and advances the tip to that block\n+        block = self.next_block\n+\n+\n+        # Create a new block\n+        block(0)\n+        save_spendable_output()\n+        yield accepted()\n+\n+\n+        # Now we need that block to mature so we can spend the coinbase.\n+        test = TestInstance(sync_every_block=False)\n+        for i in range(100):\n+            block(1000 + i)\n+            test.blocks_and_transactions.append([self.tip, True])\n+            save_spendable_output()\n+        yield test\n+\n+\n+        # Start by bulding a couple of blocks on top (which output is spent is in parentheses):\n+        #     genesis -> b1 (0) -> b2 (1)\n+        out0 = get_spendable_output()\n+        block(1, spend=out0)\n+        save_spendable_output()\n+        yield accepted()\n+\n+        out1 = get_spendable_output()\n+        block(2, spend=out1)\n+        # Inv again, then deliver twice (shouldn't break anything).\n+        yield accepted()\n+\n+\n+        # so fork like this:\n+        # \n+        #     genesis -> b1 (0) -> b2 (1)\n+        #                      \\-> b3 (1)\n+        # \n+        # Nothing should happen at this point. We saw b2 first so it takes priority.\n+        tip(1)\n+        block(3, spend=out1)\n+        # Deliver twice (should still not break anything)\n+        yield rejected()\n+\n+\n+        # Now we add another block to make the alternative chain longer.\n+        # \n+        #     genesis -> b1 (0) -> b2 (1)\n+        #                      \\-> b3 (1) -> b4 (2)\n+        out2 = get_spendable_output()\n+        block(4, spend=out2)\n+        yield accepted()\n+\n+\n+        # ... and back to the first chain.\n+        #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6 (3)\n+        #                      \\-> b3 (1) -> b4 (2)\n+        tip(2)\n+        block(5, spend=out2)\n+        save_spendable_output()\n+        yield rejected()\n+\n+        out3 = get_spendable_output()\n+        block(6, spend=out3)\n+        yield accepted()\n+\n+\n+        # Try to create a fork that double-spends\n+        #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6 (3)\n+        #                                          \\-> b7 (2) -> b8 (4)\n+        #                      \\-> b3 (1) -> b4 (2)\n+        tip(5)\n+        block(7, spend=out2)\n+        yield rejected()\n+\n+        out4 = get_spendable_output()\n+        block(8, spend=out4)\n+        yield rejected()\n+\n+\n+        # Try to create a block that has too much fee\n+        #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6 (3)\n+        #                                                    \\-> b9 (4)\n+        #                      \\-> b3 (1) -> b4 (2)\n+        tip(6)\n+        block(9, spend=out4, additional_coinbase_value=1)\n+        yield rejected()\n+\n+        \n+        # Create a fork that ends in a block with too much fee (the one that causes the reorg)\n+        #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n+        #                                          \\-> b10 (3) -> b11 (4)\n+        #                      \\-> b3 (1) -> b4 (2)\n+        tip(5)\n+        block(10, spend=out3)\n+        yield rejected()\n+\n+        block(11, spend=out4, additional_coinbase_value=1)\n+        yield rejected()\n+\n+\n+        # Try again, but with a valid fork first\n+        #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n+        #                                          \\-> b12 (3) -> b13 (4) -> b14 (5)\n+        #                                              (b12 added last)\n+        #                      \\-> b3 (1) -> b4 (2)\n+        tip(5)\n+        b12 = block(12, spend=out3)\n+        save_spendable_output()\n+        #yield TestInstance([[b12, False]])\n+        b13 = block(13, spend=out4)\n+        # Deliver the block header for b12, and the block b13.\n+        # b13 should be accepted but the tip won't advance until b12 is delivered.\n+        yield TestInstance([[CBlockHeader(b12), None], [b13, False]])\n+\n+        save_spendable_output()\n+        out5 = get_spendable_output()\n+        # b14 is invalid, but the node won't know that until it tries to connect\n+        # Tip still can't advance because b12 is missing\n+        block(14, spend=out5, additional_coinbase_value=1)\n+        yield rejected()\n+\n+        yield TestInstance([[b12, True, b13.sha256]]) # New tip should be b13.\n+\n+        \n+        # Test that a block with a lot of checksigs is okay\n+        lots_of_checksigs = CScript([OP_CHECKSIG] * (1000000 / 50 - 1))\n+        tip(13)\n+        block(15, spend=out5, script=lots_of_checksigs)\n+        yield accepted()\n+\n+\n+        # Test that a block with too many checksigs is rejected\n+        out6 = get_spendable_output()\n+        too_many_checksigs = CScript([OP_CHECKSIG] * (1000000 / 50))\n+        block(16, spend=out6, script=too_many_checksigs)\n+        yield rejected()\n+\n+\n+\n+if __name__ == '__main__':\n+    FullBlockTest().main()"
      },
      {
        "sha": "afc44b51b5416b9bfa5589a5e8653ee5dfbffad7",
        "filename": "qa/rpc-tests/script_test.py",
        "status": "modified",
        "additions": 13,
        "deletions": 7,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/561f8af45040d9b306a85023d916b3196956bfdc/qa/rpc-tests/script_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/561f8af45040d9b306a85023d916b3196956bfdc/qa/rpc-tests/script_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/script_test.py?ref=561f8af45040d9b306a85023d916b3196956bfdc",
        "patch": "@@ -124,10 +124,10 @@ def ParseScript(json_script):\n     return parsed_script\n             \n class TestBuilder(object):\n-    def create_credit_tx(self, scriptPubKey):\n+    def create_credit_tx(self, scriptPubKey, height):\n         # self.tx1 is a coinbase transaction, modeled after the one created by script_tests.cpp\n         # This allows us to reuse signatures created in the unit test framework.\n-        self.tx1 = create_coinbase()                 # this has a bip34 scriptsig,\n+        self.tx1 = create_coinbase(height)                 # this has a bip34 scriptsig,\n         self.tx1.vin[0].scriptSig = CScript([0, 0])  # but this matches the unit tests\n         self.tx1.vout[0].nValue = 0\n         self.tx1.vout[0].scriptPubKey = scriptPubKey\n@@ -168,24 +168,26 @@ def generate_test_instance(self, pubkeystring, scriptsigstring):\n \n         test = TestInstance(sync_every_block=False)\n         test_build = TestBuilder()\n-        test_build.create_credit_tx(scriptpubkey)\n+        test_build.create_credit_tx(scriptpubkey, self.height)\n         test_build.create_spend_tx(scriptsig)\n         test_build.rehash()\n \n         block = create_block(self.tip, test_build.tx1, self.block_time)\n         self.block_time += 1\n         block.solve()\n         self.tip = block.sha256\n+        self.height += 1\n         test.blocks_and_transactions = [[block, True]]\n \n         for i in xrange(100):\n-            block = create_block(self.tip, create_coinbase(), self.block_time)\n+            block = create_block(self.tip, create_coinbase(self.height), self.block_time)\n             self.block_time += 1\n             block.solve()\n             self.tip = block.sha256\n+            self.height += 1\n             test.blocks_and_transactions.append([block, True])\n \n-        block = create_block(self.tip, create_coinbase(), self.block_time)\n+        block = create_block(self.tip, create_coinbase(self.height), self.block_time)\n         self.block_time += 1\n         block.vtx.append(test_build.tx2)\n         block.hashMerkleRoot = block.calc_merkle_root()\n@@ -198,26 +200,29 @@ def generate_test_instance(self, pubkeystring, scriptsigstring):\n     def get_tests(self):\n         self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n         self.block_time = 1333230000  # before the BIP16 switchover\n+        self.height = 1\n \n         '''\n         Create a new block with an anyone-can-spend coinbase\n         '''\n-        block = create_block(self.tip, create_coinbase(), self.block_time)\n+        block = create_block(self.tip, create_coinbase(self.height), self.block_time)\n         self.block_time += 1\n         block.solve()\n         self.tip = block.sha256\n+        self.height += 1\n         yield TestInstance(objects=[[block, True]])\n \n         '''\n         Build out to 100 blocks total, maturing the coinbase.\n         '''\n         test = TestInstance(objects=[], sync_every_block=False, sync_every_tx=False)\n         for i in xrange(100):\n-            b = create_block(self.tip, create_coinbase(), self.block_time)\n+            b = create_block(self.tip, create_coinbase(self.height), self.block_time)\n             b.solve()\n             test.blocks_and_transactions.append([b, True])\n             self.tip = b.sha256\n             self.block_time += 1\n+            self.height += 1\n         yield test\n  \n         ''' Iterate through script tests. '''\n@@ -229,6 +234,7 @@ def get_tests(self):\n                 self.nodes[1].invalidateblock(self.nodes[1].getblockhash(102))\n \n             self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n+            self.height = 102\n \n             [scriptsig, scriptpubkey, flags] = script_test[0:3]\n             flags = ParseScriptFlags(flags)"
      },
      {
        "sha": "b9775b477cc280cdf8f565427dedb65e325cae47",
        "filename": "qa/rpc-tests/test_framework/blockstore.py",
        "status": "modified",
        "additions": 17,
        "deletions": 6,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/561f8af45040d9b306a85023d916b3196956bfdc/qa/rpc-tests/test_framework/blockstore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/561f8af45040d9b306a85023d916b3196956bfdc/qa/rpc-tests/test_framework/blockstore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/blockstore.py?ref=561f8af45040d9b306a85023d916b3196956bfdc",
        "patch": "@@ -10,6 +10,7 @@ class BlockStore(object):\n     def __init__(self, datadir):\n         self.blockDB = dbm.open(datadir + \"/blocks\", 'c')\n         self.currentBlock = 0L\n+        self.headers_map = dict()\n     \n     def close(self):\n         self.blockDB.close()\n@@ -26,24 +27,30 @@ def get(self, blockhash):\n         ret.calc_sha256()\n         return ret\n \n+    def get_header(self, blockhash):\n+        try:\n+            return self.headers_map[blockhash]\n+        except KeyError:\n+            return None\n+\n     # Note: this pulls full blocks out of the database just to retrieve\n     # the headers -- perhaps we could keep a separate data structure\n     # to avoid this overhead.\n     def headers_for(self, locator, hash_stop, current_tip=None):\n         if current_tip is None:\n             current_tip = self.currentBlock\n-        current_block = self.get(current_tip)\n-        if current_block is None:\n+        current_block_header = self.get_header(current_tip)\n+        if current_block_header is None:\n             return None\n \n         response = msg_headers()\n-        headersList = [ CBlockHeader(current_block) ]\n+        headersList = [ current_block_header ]\n         maxheaders = 2000\n         while (headersList[0].sha256 not in locator.vHave):\n             prevBlockHash = headersList[0].hashPrevBlock\n-            prevBlock = self.get(prevBlockHash)\n-            if prevBlock is not None:\n-                headersList.insert(0, CBlockHeader(prevBlock))\n+            prevBlockHeader = self.get_header(prevBlockHash)\n+            if prevBlockHeader is not None:\n+                headersList.insert(0, prevBlockHeader)\n             else:\n                 break\n         headersList = headersList[:maxheaders] # truncate if we have too many\n@@ -61,6 +68,10 @@ def add_block(self, block):\n         except TypeError as e:\n             print \"Unexpected error: \", sys.exc_info()[0], e.args\n         self.currentBlock = block.sha256\n+        self.headers_map[block.sha256] = CBlockHeader(block)\n+\n+    def add_header(self, header):\n+        self.headers_map[header.sha256] = header\n \n     def get_blocks(self, inv):\n         responses = []"
      },
      {
        "sha": "59aa8c15cc936626ca87b4654ebd1afe28f44555",
        "filename": "qa/rpc-tests/test_framework/blocktools.py",
        "status": "modified",
        "additions": 11,
        "deletions": 9,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/561f8af45040d9b306a85023d916b3196956bfdc/qa/rpc-tests/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/561f8af45040d9b306a85023d916b3196956bfdc/qa/rpc-tests/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/blocktools.py?ref=561f8af45040d9b306a85023d916b3196956bfdc",
        "patch": "@@ -5,7 +5,7 @@\n #\n \n from mininode import *\n-from script import CScript, CScriptOp\n+from script import CScript, CScriptOp, OP_TRUE, OP_CHECKSIG\n \n # Create a block (with regtest difficulty)\n def create_block(hashprev, coinbase, nTime=None):\n@@ -37,19 +37,21 @@ def serialize_script_num(value):\n         r[-1] |= 0x80\n     return r\n \n-counter=1\n-# Create an anyone-can-spend coinbase transaction, assuming no miner fees\n-def create_coinbase(heightAdjust = 0):\n-    global counter\n+# Create a coinbase transaction, assuming no miner fees.\n+# If pubkey is passed in, the coinbase output will be a P2PK output;\n+# otherwise an anyone-can-spend output.\n+def create_coinbase(height, pubkey = None):\n     coinbase = CTransaction()\n     coinbase.vin.append(CTxIn(COutPoint(0, 0xffffffff), \n-                ser_string(serialize_script_num(counter+heightAdjust)), 0xffffffff))\n-    counter += 1\n+                ser_string(serialize_script_num(height)), 0xffffffff))\n     coinbaseoutput = CTxOut()\n     coinbaseoutput.nValue = 50*100000000\n-    halvings = int((counter+heightAdjust)/150) # regtest\n+    halvings = int(height/150) # regtest\n     coinbaseoutput.nValue >>= halvings\n-    coinbaseoutput.scriptPubKey = \"\"\n+    if (pubkey != None):\n+        coinbaseoutput.scriptPubKey = CScript([pubkey, OP_CHECKSIG])\n+    else:\n+        coinbaseoutput.scriptPubKey = CScript([OP_TRUE])\n     coinbase.vout = [ coinbaseoutput ]\n     coinbase.calc_sha256()\n     return coinbase"
      },
      {
        "sha": "e0b3ce040d84e9d6dc1993d55cfa9744287c1a01",
        "filename": "qa/rpc-tests/test_framework/comptool.py",
        "status": "modified",
        "additions": 41,
        "deletions": 11,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/561f8af45040d9b306a85023d916b3196956bfdc/qa/rpc-tests/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/561f8af45040d9b306a85023d916b3196956bfdc/qa/rpc-tests/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/comptool.py?ref=561f8af45040d9b306a85023d916b3196956bfdc",
        "patch": "@@ -122,12 +122,19 @@ def send_mempool(self):\n # Instances of these are generated by the test generator, and fed into the\n # comptool.\n #\n-# \"blocks_and_transactions\" should be an array of [obj, True/False/None]:\n-#  - obj is either a CBlock or a CTransaction, and \n+# \"blocks_and_transactions\" should be an array of\n+#    [obj, True/False/None, hash/None]:\n+#  - obj is either a CBlock, CBlockHeader, or a CTransaction, and\n #  - the second value indicates whether the object should be accepted\n #    into the blockchain or mempool (for tests where we expect a certain\n #    answer), or \"None\" if we don't expect a certain answer and are just\n #    comparing the behavior of the nodes being tested.\n+#  - the third value is the hash to test the tip against (if None or omitted,\n+#    use the hash of the block)\n+#  - NOTE: if a block header, no test is performed; instead the header is\n+#    just added to the block_store.  This is to facilitate block delivery\n+#    when communicating with headers-first clients (when withholding an\n+#    intermediate block).\n # sync_every_block: if True, then each block will be inv'ed, synced, and\n #    nodes will be tested based on the outcome for the block.  If False,\n #    then inv's accumulate until all blocks are processed (or max inv size\n@@ -194,7 +201,6 @@ def blocks_requested():\n         if not wait_until(blocks_requested, attempts=20*num_blocks):\n             # print [ c.cb.block_request_map for c in self.connections ]\n             raise AssertionError(\"Not all nodes requested block\")\n-        # --> Answer request (we did this inline!)\n \n         # Send getheaders message\n         [ c.cb.send_getheaders() for c in self.connections ]\n@@ -217,7 +223,6 @@ def transaction_requested():\n         if not wait_until(transaction_requested, attempts=20*num_events):\n             # print [ c.cb.tx_request_map for c in self.connections ]\n             raise AssertionError(\"Not all nodes requested transaction\")\n-        # --> Answer request (we did this inline!)\n \n         # Get the mempool\n         [ c.cb.send_mempool() for c in self.connections ]\n@@ -272,29 +277,55 @@ def run(self):\n             # We use these variables to keep track of the last block\n             # and last transaction in the tests, which are used\n             # if we're not syncing on every block or every tx.\n-            [ block, block_outcome ] = [ None, None ]\n+            [ block, block_outcome, tip ] = [ None, None, None ]\n             [ tx, tx_outcome ] = [ None, None ]\n             invqueue = []\n \n-            for b_or_t, outcome in test_instance.blocks_and_transactions:\n+            for test_obj in test_instance.blocks_and_transactions:\n+                b_or_t = test_obj[0]\n+                outcome = test_obj[1]\n                 # Determine if we're dealing with a block or tx\n                 if isinstance(b_or_t, CBlock):  # Block test runner\n                     block = b_or_t\n                     block_outcome = outcome\n+                    tip = block.sha256\n+                    # each test_obj can have an optional third argument\n+                    # to specify the tip we should compare with\n+                    # (default is to use the block being tested)\n+                    if len(test_obj) >= 3:\n+                        tip = test_obj[2]\n+\n                     # Add to shared block_store, set as current block\n+                    # If there was an open getdata request for the block\n+                    # previously, and we didn't have an entry in the\n+                    # block_store, then immediately deliver, because the\n+                    # node wouldn't send another getdata request while\n+                    # the earlier one is outstanding.\n+                    first_block_with_hash = True\n+                    if self.block_store.get(block.sha256) is not None:\n+                        first_block_with_hash = False\n                     with mininode_lock:\n                         self.block_store.add_block(block)\n                         for c in self.connections:\n-                            c.cb.block_request_map[block.sha256] = False\n+                            if first_block_with_hash and block.sha256 in c.cb.block_request_map and c.cb.block_request_map[block.sha256] == True:\n+                                # There was a previous request for this block hash\n+                                # Most likely, we delivered a header for this block\n+                                # but never had the block to respond to the getdata\n+                                c.send_message(msg_block(block))\n+                            else:\n+                                c.cb.block_request_map[block.sha256] = False\n                     # Either send inv's to each node and sync, or add\n                     # to invqueue for later inv'ing.\n                     if (test_instance.sync_every_block):\n                         [ c.cb.send_inv(block) for c in self.connections ]\n                         self.sync_blocks(block.sha256, 1)\n-                        if (not self.check_results(block.sha256, outcome)):\n+                        if (not self.check_results(tip, outcome)):\n                             raise AssertionError(\"Test failed at test %d\" % test_number)\n                     else:\n                         invqueue.append(CInv(2, block.sha256))\n+                elif isinstance(b_or_t, CBlockHeader):\n+                    block_header = b_or_t\n+                    self.block_store.add_header(block_header)\n                 else:  # Tx test runner\n                     assert(isinstance(b_or_t, CTransaction))\n                     tx = b_or_t\n@@ -322,9 +353,8 @@ def run(self):\n                 if len(invqueue) > 0:\n                     [ c.send_message(msg_inv(invqueue)) for c in self.connections ]\n                     invqueue = []\n-                self.sync_blocks(block.sha256,\n-                                 len(test_instance.blocks_and_transactions))\n-                if (not self.check_results(block.sha256, block_outcome)):\n+                self.sync_blocks(block.sha256, len(test_instance.blocks_and_transactions))\n+                if (not self.check_results(tip, block_outcome)):\n                     raise AssertionError(\"Block test failed at test %d\" % test_number)\n             if (not test_instance.sync_every_tx and tx is not None):\n                 if len(invqueue) > 0:"
      },
      {
        "sha": "ba3038fe044f49f54e0d6286e22ae9d4cbcde7df",
        "filename": "qa/rpc-tests/test_framework/key.py",
        "status": "added",
        "additions": 215,
        "deletions": 0,
        "changes": 215,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/561f8af45040d9b306a85023d916b3196956bfdc/qa/rpc-tests/test_framework/key.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/561f8af45040d9b306a85023d916b3196956bfdc/qa/rpc-tests/test_framework/key.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/key.py?ref=561f8af45040d9b306a85023d916b3196956bfdc",
        "patch": "@@ -0,0 +1,215 @@\n+# Copyright (c) 2011 Sam Rushing\n+#\n+# key.py - OpenSSL wrapper\n+#\n+# This file is modified from python-bitcoinlib.\n+#\n+\n+\"\"\"ECC secp256k1 crypto routines\n+\n+WARNING: This module does not mlock() secrets; your private keys may end up on\n+disk in swap! Use with caution!\n+\"\"\"\n+\n+import ctypes\n+import ctypes.util\n+import hashlib\n+import sys\n+\n+ssl = ctypes.cdll.LoadLibrary(ctypes.util.find_library ('ssl') or 'libeay32')\n+\n+ssl.BN_new.restype = ctypes.c_void_p\n+ssl.BN_new.argtypes = []\n+\n+ssl.BN_bin2bn.restype = ctypes.c_void_p\n+ssl.BN_bin2bn.argtypes = [ctypes.c_char_p, ctypes.c_int, ctypes.c_void_p]\n+\n+ssl.BN_CTX_free.restype = None\n+ssl.BN_CTX_free.argtypes = [ctypes.c_void_p]\n+\n+ssl.BN_CTX_new.restype = ctypes.c_void_p\n+ssl.BN_CTX_new.argtypes = []\n+\n+ssl.ECDH_compute_key.restype = ctypes.c_int\n+ssl.ECDH_compute_key.argtypes = [ctypes.c_void_p, ctypes.c_int, ctypes.c_void_p, ctypes.c_void_p]\n+\n+ssl.ECDSA_sign.restype = ctypes.c_int\n+ssl.ECDSA_sign.argtypes = [ctypes.c_int, ctypes.c_void_p, ctypes.c_int, ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p]\n+\n+ssl.ECDSA_verify.restype = ctypes.c_int\n+ssl.ECDSA_verify.argtypes = [ctypes.c_int, ctypes.c_void_p, ctypes.c_int, ctypes.c_void_p, ctypes.c_int, ctypes.c_void_p]\n+\n+ssl.EC_KEY_free.restype = None\n+ssl.EC_KEY_free.argtypes = [ctypes.c_void_p]\n+\n+ssl.EC_KEY_new_by_curve_name.restype = ctypes.c_void_p\n+ssl.EC_KEY_new_by_curve_name.argtypes = [ctypes.c_int]\n+\n+ssl.EC_KEY_get0_group.restype = ctypes.c_void_p\n+ssl.EC_KEY_get0_group.argtypes = [ctypes.c_void_p]\n+\n+ssl.EC_KEY_get0_public_key.restype = ctypes.c_void_p\n+ssl.EC_KEY_get0_public_key.argtypes = [ctypes.c_void_p]\n+\n+ssl.EC_KEY_set_private_key.restype = ctypes.c_int\n+ssl.EC_KEY_set_private_key.argtypes = [ctypes.c_void_p, ctypes.c_void_p]\n+\n+ssl.EC_KEY_set_conv_form.restype = None\n+ssl.EC_KEY_set_conv_form.argtypes = [ctypes.c_void_p, ctypes.c_int]\n+\n+ssl.EC_KEY_set_public_key.restype = ctypes.c_int\n+ssl.EC_KEY_set_public_key.argtypes = [ctypes.c_void_p, ctypes.c_void_p]\n+\n+ssl.i2o_ECPublicKey.restype = ctypes.c_void_p\n+ssl.i2o_ECPublicKey.argtypes = [ctypes.c_void_p, ctypes.c_void_p]\n+\n+ssl.EC_POINT_new.restype = ctypes.c_void_p\n+ssl.EC_POINT_new.argtypes = [ctypes.c_void_p]\n+\n+ssl.EC_POINT_free.restype = None\n+ssl.EC_POINT_free.argtypes = [ctypes.c_void_p]\n+\n+ssl.EC_POINT_mul.restype = ctypes.c_int\n+ssl.EC_POINT_mul.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p]\n+\n+# this specifies the curve used with ECDSA.\n+NID_secp256k1 = 714 # from openssl/obj_mac.h\n+\n+# Thx to Sam Devlin for the ctypes magic 64-bit fix.\n+def _check_result(val, func, args):\n+    if val == 0:\n+        raise ValueError\n+    else:\n+        return ctypes.c_void_p (val)\n+\n+ssl.EC_KEY_new_by_curve_name.restype = ctypes.c_void_p\n+ssl.EC_KEY_new_by_curve_name.errcheck = _check_result\n+\n+class CECKey(object):\n+    \"\"\"Wrapper around OpenSSL's EC_KEY\"\"\"\n+\n+    POINT_CONVERSION_COMPRESSED = 2\n+    POINT_CONVERSION_UNCOMPRESSED = 4\n+\n+    def __init__(self):\n+        self.k = ssl.EC_KEY_new_by_curve_name(NID_secp256k1)\n+\n+    def __del__(self):\n+        if ssl:\n+            ssl.EC_KEY_free(self.k)\n+        self.k = None\n+\n+    def set_secretbytes(self, secret):\n+        priv_key = ssl.BN_bin2bn(secret, 32, ssl.BN_new())\n+        group = ssl.EC_KEY_get0_group(self.k)\n+        pub_key = ssl.EC_POINT_new(group)\n+        ctx = ssl.BN_CTX_new()\n+        if not ssl.EC_POINT_mul(group, pub_key, priv_key, None, None, ctx):\n+            raise ValueError(\"Could not derive public key from the supplied secret.\")\n+        ssl.EC_POINT_mul(group, pub_key, priv_key, None, None, ctx)\n+        ssl.EC_KEY_set_private_key(self.k, priv_key)\n+        ssl.EC_KEY_set_public_key(self.k, pub_key)\n+        ssl.EC_POINT_free(pub_key)\n+        ssl.BN_CTX_free(ctx)\n+        return self.k\n+\n+    def set_privkey(self, key):\n+        self.mb = ctypes.create_string_buffer(key)\n+        return ssl.d2i_ECPrivateKey(ctypes.byref(self.k), ctypes.byref(ctypes.pointer(self.mb)), len(key))\n+\n+    def set_pubkey(self, key):\n+        self.mb = ctypes.create_string_buffer(key)\n+        return ssl.o2i_ECPublicKey(ctypes.byref(self.k), ctypes.byref(ctypes.pointer(self.mb)), len(key))\n+\n+    def get_privkey(self):\n+        size = ssl.i2d_ECPrivateKey(self.k, 0)\n+        mb_pri = ctypes.create_string_buffer(size)\n+        ssl.i2d_ECPrivateKey(self.k, ctypes.byref(ctypes.pointer(mb_pri)))\n+        return mb_pri.raw\n+\n+    def get_pubkey(self):\n+        size = ssl.i2o_ECPublicKey(self.k, 0)\n+        mb = ctypes.create_string_buffer(size)\n+        ssl.i2o_ECPublicKey(self.k, ctypes.byref(ctypes.pointer(mb)))\n+        return mb.raw\n+\n+    def get_raw_ecdh_key(self, other_pubkey):\n+        ecdh_keybuffer = ctypes.create_string_buffer(32)\n+        r = ssl.ECDH_compute_key(ctypes.pointer(ecdh_keybuffer), 32,\n+                                 ssl.EC_KEY_get0_public_key(other_pubkey.k),\n+                                 self.k, 0)\n+        if r != 32:\n+            raise Exception('CKey.get_ecdh_key(): ECDH_compute_key() failed')\n+        return ecdh_keybuffer.raw\n+\n+    def get_ecdh_key(self, other_pubkey, kdf=lambda k: hashlib.sha256(k).digest()):\n+        # FIXME: be warned it's not clear what the kdf should be as a default\n+        r = self.get_raw_ecdh_key(other_pubkey)\n+        return kdf(r)\n+\n+    def sign(self, hash):\n+        # FIXME: need unit tests for below cases\n+        if not isinstance(hash, bytes):\n+            raise TypeError('Hash must be bytes instance; got %r' % hash.__class__)\n+        if len(hash) != 32:\n+            raise ValueError('Hash must be exactly 32 bytes long')\n+\n+        sig_size0 = ctypes.c_uint32()\n+        sig_size0.value = ssl.ECDSA_size(self.k)\n+        mb_sig = ctypes.create_string_buffer(sig_size0.value)\n+        result = ssl.ECDSA_sign(0, hash, len(hash), mb_sig, ctypes.byref(sig_size0), self.k)\n+        assert 1 == result\n+        return mb_sig.raw[:sig_size0.value]\n+\n+    def verify(self, hash, sig):\n+        \"\"\"Verify a DER signature\"\"\"\n+        return ssl.ECDSA_verify(0, hash, len(hash), sig, len(sig), self.k) == 1\n+\n+    def set_compressed(self, compressed):\n+        if compressed:\n+            form = self.POINT_CONVERSION_COMPRESSED\n+        else:\n+            form = self.POINT_CONVERSION_UNCOMPRESSED\n+        ssl.EC_KEY_set_conv_form(self.k, form)\n+\n+\n+class CPubKey(bytes):\n+    \"\"\"An encapsulated public key\n+\n+    Attributes:\n+\n+    is_valid      - Corresponds to CPubKey.IsValid()\n+    is_fullyvalid - Corresponds to CPubKey.IsFullyValid()\n+    is_compressed - Corresponds to CPubKey.IsCompressed()\n+    \"\"\"\n+\n+    def __new__(cls, buf, _cec_key=None):\n+        self = super(CPubKey, cls).__new__(cls, buf)\n+        if _cec_key is None:\n+            _cec_key = CECKey()\n+        self._cec_key = _cec_key\n+        self.is_fullyvalid = _cec_key.set_pubkey(self) != 0\n+        return self\n+\n+    @property\n+    def is_valid(self):\n+        return len(self) > 0\n+\n+    @property\n+    def is_compressed(self):\n+        return len(self) == 33\n+\n+    def verify(self, hash, sig):\n+        return self._cec_key.verify(hash, sig)\n+\n+    def __str__(self):\n+        return repr(self)\n+\n+    def __repr__(self):\n+        # Always have represent as b'<secret>' so test cases don't have to\n+        # change for py2/3\n+        if sys.version > '3':\n+            return '%s(%s)' % (self.__class__.__name__, super(CPubKey, self).__repr__())\n+        else:\n+            return '%s(b%s)' % (self.__class__.__name__, super(CPubKey, self).__repr__())\n+"
      },
      {
        "sha": "0a78cf6fb1b3cca598325dd344880bcb89ba1187",
        "filename": "qa/rpc-tests/test_framework/script.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/561f8af45040d9b306a85023d916b3196956bfdc/qa/rpc-tests/test_framework/script.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/561f8af45040d9b306a85023d916b3196956bfdc/qa/rpc-tests/test_framework/script.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/script.py?ref=561f8af45040d9b306a85023d916b3196956bfdc",
        "patch": "@@ -27,7 +27,7 @@\n import copy\n import struct\n \n-import test_framework.bignum\n+from test_framework.bignum import bn2vch\n \n MAX_SCRIPT_SIZE = 10000\n MAX_SCRIPT_ELEMENT_SIZE = 520\n@@ -664,7 +664,7 @@ def __coerce_instance(cls, other):\n             elif other == -1:\n                 other = bytes(bchr(OP_1NEGATE))\n             else:\n-                other = CScriptOp.encode_op_pushdata(bignum.bn2vch(other))\n+                other = CScriptOp.encode_op_pushdata(bn2vch(other))\n         elif isinstance(other, (bytes, bytearray)):\n             other = CScriptOp.encode_op_pushdata(other)\n         return other"
      }
    ]
  },
  {
    "sha": "da9beb288d2ee35b9c70513dd18f220b2dc32f16",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYTliZWIyODhkMmVlMzViOWM3MDUxM2RkMThmMjIwYjJkYzMyZjE2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-24T11:37:43Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-24T11:44:05Z"
      },
      "message": "Merge pull request #6576\n\ne938122 Stop parsing JSON after first finished construct. (Daniel Kraft)",
      "tree": {
        "sha": "5ab71efddf30d8db28357573e5892075998d731b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5ab71efddf30d8db28357573e5892075998d731b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/da9beb288d2ee35b9c70513dd18f220b2dc32f16",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJV2wOFAAoJEHSBCwEjRsmmY2kH/2UeWdhQgLtV+kMmfnVF05AM\nWIpGkjXxBxwBMWvsleRQ5wKxn1XKdegyrTOuyw5eB2DQtG5Plvexj8kXzf9a9GBH\nluk8cjDYVJ0ZLYgnL7UNlWnsoLXgxbU11VwA4wYCEpkxzYw5hYdHsM/ijI6akEYx\n1ENFh9RWVH1cK9MlkzZgd6QEoo4idXMjkW6pUhCQ3rBOUHCHLTGBxmkhsW+cOUnG\ngpvZs4hklD5gp2ATCW7WpOCEeo6HEoHJm94TCU41YBN7cNPdhmAKZKiq8nUBSlBk\n+TFyOS6o67nw6AhRZkxXSJ2ER+grzBAdFLu3058sQfQIBG3oKuiJGqQ7Y1IbfW0=\n=3J1k\n-----END PGP SIGNATURE-----",
        "payload": "tree 5ab71efddf30d8db28357573e5892075998d731b\nparent 561f8af45040d9b306a85023d916b3196956bfdc\nparent e938122b7ba8723c8cab6de78e8a9b39ad188589\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1440416263 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1440416645 +0200\n\nMerge pull request #6576\n\ne938122 Stop parsing JSON after first finished construct. (Daniel Kraft)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da9beb288d2ee35b9c70513dd18f220b2dc32f16",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/da9beb288d2ee35b9c70513dd18f220b2dc32f16",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da9beb288d2ee35b9c70513dd18f220b2dc32f16/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "561f8af45040d9b306a85023d916b3196956bfdc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/561f8af45040d9b306a85023d916b3196956bfdc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/561f8af45040d9b306a85023d916b3196956bfdc"
      },
      {
        "sha": "e938122b7ba8723c8cab6de78e8a9b39ad188589",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e938122b7ba8723c8cab6de78e8a9b39ad188589",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e938122b7ba8723c8cab6de78e8a9b39ad188589"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 23,
      "deletions": 6
    },
    "files": [
      {
        "sha": "ee31c0955b0636387c44082f02350a916d832821",
        "filename": "src/test/univalue_tests.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da9beb288d2ee35b9c70513dd18f220b2dc32f16/src/test/univalue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da9beb288d2ee35b9c70513dd18f220b2dc32f16/src/test/univalue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/univalue_tests.cpp?ref=da9beb288d2ee35b9c70513dd18f220b2dc32f16",
        "patch": "@@ -314,6 +314,21 @@ BOOST_AUTO_TEST_CASE(univalue_readwrite)\n     BOOST_CHECK(obj[\"key3\"].isObject());\n \n     BOOST_CHECK_EQUAL(strJson1, v.write());\n+\n+    /* Check for (correctly reporting) a parsing error if the initial\n+       JSON construct is followed by more stuff.  Note that whitespace\n+       is, of course, exempt.  */\n+\n+    BOOST_CHECK(v.read(\"  {}\\n  \"));\n+    BOOST_CHECK(v.isObject());\n+    BOOST_CHECK(v.read(\"  []\\n  \"));\n+    BOOST_CHECK(v.isArray());\n+\n+    BOOST_CHECK(!v.read(\"@{}\"));\n+    BOOST_CHECK(!v.read(\"{} garbage\"));\n+    BOOST_CHECK(!v.read(\"[]{}\"));\n+    BOOST_CHECK(!v.read(\"{}[]\"));\n+    BOOST_CHECK(!v.read(\"{} 42\"));\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "64591234cb12da4ba8dac3ca9853e8a77b66247f",
        "filename": "src/univalue/univalue_read.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da9beb288d2ee35b9c70513dd18f220b2dc32f16/src/univalue/univalue_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da9beb288d2ee35b9c70513dd18f220b2dc32f16/src/univalue/univalue_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/univalue_read.cpp?ref=da9beb288d2ee35b9c70513dd18f220b2dc32f16",
        "patch": "@@ -244,16 +244,16 @@ bool UniValue::read(const char *raw)\n     bool expectColon = false;\n     vector<UniValue*> stack;\n \n+    string tokenVal;\n+    unsigned int consumed;\n     enum jtokentype tok = JTOK_NONE;\n     enum jtokentype last_tok = JTOK_NONE;\n-    while (1) {\n+    do {\n         last_tok = tok;\n \n-        string tokenVal;\n-        unsigned int consumed;\n         tok = getJsonToken(tokenVal, consumed, raw);\n         if (tok == JTOK_NONE || tok == JTOK_ERR)\n-            break;\n+            return false;\n         raw += consumed;\n \n         switch (tok) {\n@@ -377,9 +377,11 @@ bool UniValue::read(const char *raw)\n         default:\n             return false;\n         }\n-    }\n+    } while (!stack.empty ());\n \n-    if (stack.size() != 0)\n+    /* Check that nothing follows the initial construct (parsed above).  */\n+    tok = getJsonToken(tokenVal, consumed, raw);\n+    if (tok != JTOK_NONE)\n         return false;\n \n     return true;"
      }
    ]
  },
  {
    "sha": "a19338723d662e6fc0571833d2b9983e1914f282",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMTkzMzg3MjNkNjYyZTZmYzA1NzE4MzNkMmI5OTgzZTE5MTRmMjgy",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-08-20T19:50:13Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-08-25T15:31:06Z"
      },
      "message": "net: Set SO_REUSEADDR for Windows too\n\nWhen running the rpc tests in Wine, nodes often fail to listen on localhost\ndue to a stale socket from a previous run. This aligns the behavior with other\nplatforms.",
      "tree": {
        "sha": "358a868251aad1bb1031283953e151d24b5146dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/358a868251aad1bb1031283953e151d24b5146dc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a19338723d662e6fc0571833d2b9983e1914f282",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a19338723d662e6fc0571833d2b9983e1914f282",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a19338723d662e6fc0571833d2b9983e1914f282",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a19338723d662e6fc0571833d2b9983e1914f282/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "da9beb288d2ee35b9c70513dd18f220b2dc32f16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da9beb288d2ee35b9c70513dd18f220b2dc32f16",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/da9beb288d2ee35b9c70513dd18f220b2dc32f16"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8fda5140cadcff245a00da017b3c1ec14447dd38",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a19338723d662e6fc0571833d2b9983e1914f282/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a19338723d662e6fc0571833d2b9983e1914f282/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=a19338723d662e6fc0571833d2b9983e1914f282",
        "patch": "@@ -1625,8 +1625,10 @@ bool BindListenPort(const CService &addrBind, string& strError, bool fWhiteliste\n     setsockopt(hListenSocket, SOL_SOCKET, SO_NOSIGPIPE, (void*)&nOne, sizeof(int));\n #endif\n     // Allow binding if the port is still in TIME_WAIT state after\n-    // the program was closed and restarted. Not an issue on windows!\n+    // the program was closed and restarted.\n     setsockopt(hListenSocket, SOL_SOCKET, SO_REUSEADDR, (void*)&nOne, sizeof(int));\n+#else\n+    setsockopt(hListenSocket, SOL_SOCKET, SO_REUSEADDR, (const char*)&nOne, sizeof(int));\n #endif\n \n     // Set to non-blocking, incoming connections will also inherit this"
      }
    ]
  },
  {
    "sha": "bd30c3dced21fca869a14c75081f15195762afe1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZDMwYzNkY2VkMjFmY2E4NjlhMTRjNzUwODFmMTUxOTU3NjJhZmUx",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-08-25T16:03:28Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-08-25T16:03:28Z"
      },
      "message": "rpc-tests: re-enable rpc-tests for Windows",
      "tree": {
        "sha": "7649a5389c7174dff7c5c0fe3be7bc0db1949ac5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7649a5389c7174dff7c5c0fe3be7bc0db1949ac5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bd30c3dced21fca869a14c75081f15195762afe1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd30c3dced21fca869a14c75081f15195762afe1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bd30c3dced21fca869a14c75081f15195762afe1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd30c3dced21fca869a14c75081f15195762afe1/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a19338723d662e6fc0571833d2b9983e1914f282",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a19338723d662e6fc0571833d2b9983e1914f282",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a19338723d662e6fc0571833d2b9983e1914f282"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 0,
      "deletions": 5
    },
    "files": [
      {
        "sha": "555d2c224bb588eb4326b3ee5e79da39a69ae48d",
        "filename": "qa/pull-tester/rpc-tests.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd30c3dced21fca869a14c75081f15195762afe1/qa/pull-tester/rpc-tests.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd30c3dced21fca869a14c75081f15195762afe1/qa/pull-tester/rpc-tests.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.sh?ref=bd30c3dced21fca869a14c75081f15195762afe1",
        "patch": "@@ -8,11 +8,6 @@ CURDIR=$(cd $(dirname \"$0\"); pwd)\n export BITCOINCLI=${BUILDDIR}/qa/pull-tester/run-bitcoin-cli\n export BITCOIND=${REAL_BITCOIND}\n \n-if [ \"x${EXEEXT}\" = \"x.exe\" ]; then\n-  echo \"Win tests currently disabled\"\n-  exit 0\n-fi\n-\n #Run the tests\n \n testScripts=("
      }
    ]
  },
  {
    "sha": "69ee1aab00b9189865dfca6fb5c33c61a3c3ea67",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OWVlMWFhYjAwYjkxODk4NjVkZmNhNmZiNWMzM2M2MWEzYzNlYTY3",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-08-25T22:33:29Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-08-25T22:33:29Z"
      },
      "message": "CNodeRef copy constructor and assignment operator",
      "tree": {
        "sha": "bb01c3191c1b86126dc2e11cb45a23a54ae13914",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb01c3191c1b86126dc2e11cb45a23a54ae13914"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/69ee1aab00b9189865dfca6fb5c33c61a3c3ea67",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69ee1aab00b9189865dfca6fb5c33c61a3c3ea67",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/69ee1aab00b9189865dfca6fb5c33c61a3c3ea67",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69ee1aab00b9189865dfca6fb5c33c61a3c3ea67/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dc81dd02a1d5f47ca45f74577e0696dfba6fa15c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc81dd02a1d5f47ca45f74577e0696dfba6fa15c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dc81dd02a1d5f47ca45f74577e0696dfba6fa15c"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 16,
      "deletions": 0
    },
    "files": [
      {
        "sha": "cb5a24f0a4ce6901edeaf3acefd09293dd36e029",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69ee1aab00b9189865dfca6fb5c33c61a3c3ea67/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69ee1aab00b9189865dfca6fb5c33c61a3c3ea67/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=69ee1aab00b9189865dfca6fb5c33c61a3c3ea67",
        "patch": "@@ -782,6 +782,22 @@ class CNodeRef {\n \n     CNode& operator *() const {return *_pnode;};\n     CNode* operator ->() const {return _pnode;};\n+\n+    CNodeRef& operator =(const CNodeRef& other)\n+    {\n+        if (this != &other) {\n+            _pnode->Release();\n+            _pnode = other._pnode;\n+            _pnode->AddRef();\n+        }\n+        return *this;\n+    }\n+\n+    CNodeRef(const CNodeRef& other):\n+        _pnode(other._pnode)\n+    {\n+        _pnode->AddRef();\n+    }\n private:\n     CNode *_pnode;\n };"
      }
    ]
  },
  {
    "sha": "fed30940ef22f242b9dada2dc4f7c5348faf8922",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZWQzMDk0MGVmMjJmMjQyYjlkYWRhMmRjNGY3YzUzNDhmYWY4OTIy",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-08-25T23:30:02Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-08-25T23:30:02Z"
      },
      "message": "Acquire cs_vNodes before changing refrence counts",
      "tree": {
        "sha": "c397e6d31f3ab7dc4b723bb4cc9dc6fd6f7512ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c397e6d31f3ab7dc4b723bb4cc9dc6fd6f7512ea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fed30940ef22f242b9dada2dc4f7c5348faf8922",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fed30940ef22f242b9dada2dc4f7c5348faf8922",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fed30940ef22f242b9dada2dc4f7c5348faf8922",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fed30940ef22f242b9dada2dc4f7c5348faf8922/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "69ee1aab00b9189865dfca6fb5c33c61a3c3ea67",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69ee1aab00b9189865dfca6fb5c33c61a3c3ea67",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/69ee1aab00b9189865dfca6fb5c33c61a3c3ea67"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 12,
      "deletions": 2
    },
    "files": [
      {
        "sha": "e1b0e83e992bfe37db22e942abfa6c9db544d6d5",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 2,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fed30940ef22f242b9dada2dc4f7c5348faf8922/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fed30940ef22f242b9dada2dc4f7c5348faf8922/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=fed30940ef22f242b9dada2dc4f7c5348faf8922",
        "patch": "@@ -777,15 +777,24 @@ static list<CNode*> vNodesDisconnected;\n \n class CNodeRef {\n public:\n-    CNodeRef(CNode *pnode) : _pnode(pnode)  {_pnode->AddRef();}\n-    ~CNodeRef() {_pnode->Release();}\n+    CNodeRef(CNode *pnode) : _pnode(pnode) {\n+        LOCK(cs_vNodes);\n+        _pnode->AddRef();\n+    }\n+\n+    ~CNodeRef() {\n+        LOCK(cs_vNodes);\n+        _pnode->Release();\n+    }\n \n     CNode& operator *() const {return *_pnode;};\n     CNode* operator ->() const {return _pnode;};\n \n     CNodeRef& operator =(const CNodeRef& other)\n     {\n         if (this != &other) {\n+            LOCK(cs_vNodes);\n+\n             _pnode->Release();\n             _pnode = other._pnode;\n             _pnode->AddRef();\n@@ -796,6 +805,7 @@ class CNodeRef {\n     CNodeRef(const CNodeRef& other):\n         _pnode(other._pnode)\n     {\n+        LOCK(cs_vNodes);\n         _pnode->AddRef();\n     }\n private:"
      }
    ]
  },
  {
    "sha": "000c18aaceeebdcaf65508fcdc3d00397971dcae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMDBjMThhYWNlZWViZGNhZjY1NTA4ZmNkYzNkMDAzOTc5NzFkY2Fl",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-08-25T23:31:13Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-08-25T23:31:13Z"
      },
      "message": "Fix comment",
      "tree": {
        "sha": "fd59febebcce3aa0ba7cb550aa5e5765b782e264",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fd59febebcce3aa0ba7cb550aa5e5765b782e264"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/000c18aaceeebdcaf65508fcdc3d00397971dcae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/000c18aaceeebdcaf65508fcdc3d00397971dcae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/000c18aaceeebdcaf65508fcdc3d00397971dcae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/000c18aaceeebdcaf65508fcdc3d00397971dcae/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fed30940ef22f242b9dada2dc4f7c5348faf8922",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fed30940ef22f242b9dada2dc4f7c5348faf8922",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fed30940ef22f242b9dada2dc4f7c5348faf8922"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d266b2f21fd3fe391a3954153e3f300300a9ddc1",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/000c18aaceeebdcaf65508fcdc3d00397971dcae/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/000c18aaceeebdcaf65508fcdc3d00397971dcae/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=000c18aaceeebdcaf65508fcdc3d00397971dcae",
        "patch": "@@ -891,7 +891,7 @@ static bool AttemptToEvictConnection(bool fPreferNewConnection) {\n \n     if (vEvictionCandidates.empty()) return false;\n \n-    // Protect the 64 nodes which have been connected the longest.\n+    // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the existing implicit behavior.\n     std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), ReverseCompareNodeTimeConnected);\n     vEvictionCandidates.erase(vEvictionCandidates.end() - static_cast<int>(vEvictionCandidates.size() / 2), vEvictionCandidates.end());"
      }
    ]
  },
  {
    "sha": "c33c11ebacb93d74370f44f6c24d447da88648f4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMzNjMTFlYmFjYjkzZDc0MzcwZjQ0ZjZjMjRkNDQ3ZGE4ODY0OGY0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-08-06T17:49:19Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-08-25T23:59:09Z"
      },
      "message": "Improve addrman Select() performance when buckets are nearly empty",
      "tree": {
        "sha": "4106b2c5f11c440cf1705ca64cbebcee52cd728d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4106b2c5f11c440cf1705ca64cbebcee52cd728d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c33c11ebacb93d74370f44f6c24d447da88648f4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c33c11ebacb93d74370f44f6c24d447da88648f4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c33c11ebacb93d74370f44f6c24d447da88648f4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c33c11ebacb93d74370f44f6c24d447da88648f4/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "da9beb288d2ee35b9c70513dd18f220b2dc32f16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da9beb288d2ee35b9c70513dd18f220b2dc32f16",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/da9beb288d2ee35b9c70513dd18f220b2dc32f16"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 8,
      "deletions": 4
    },
    "files": [
      {
        "sha": "ff1f7e918778bf623b876df1a298e66bad2c892a",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c33c11ebacb93d74370f44f6c24d447da88648f4/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c33c11ebacb93d74370f44f6c24d447da88648f4/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=c33c11ebacb93d74370f44f6c24d447da88648f4",
        "patch": "@@ -341,8 +341,10 @@ CAddrInfo CAddrMan::Select_()\n         while (1) {\n             int nKBucket = GetRandInt(ADDRMAN_TRIED_BUCKET_COUNT);\n             int nKBucketPos = GetRandInt(ADDRMAN_BUCKET_SIZE);\n-            if (vvTried[nKBucket][nKBucketPos] == -1)\n-                continue;\n+            while (vvTried[nKBucket][nKBucketPos] == -1) {\n+                nKBucket = (nKBucket + insecure_rand()) % ADDRMAN_TRIED_BUCKET_COUNT;\n+                nKBucketPos = (nKBucketPos + insecure_rand()) % ADDRMAN_BUCKET_SIZE;\n+            }\n             int nId = vvTried[nKBucket][nKBucketPos];\n             assert(mapInfo.count(nId) == 1);\n             CAddrInfo& info = mapInfo[nId];\n@@ -356,8 +358,10 @@ CAddrInfo CAddrMan::Select_()\n         while (1) {\n             int nUBucket = GetRandInt(ADDRMAN_NEW_BUCKET_COUNT);\n             int nUBucketPos = GetRandInt(ADDRMAN_BUCKET_SIZE);\n-            if (vvNew[nUBucket][nUBucketPos] == -1)\n-                continue;\n+            while (vvNew[nUBucket][nUBucketPos] == -1) {\n+                nUBucket = (nUBucket + insecure_rand()) % ADDRMAN_NEW_BUCKET_COUNT;\n+                nUBucketPos = (nUBucketPos + insecure_rand()) % ADDRMAN_BUCKET_SIZE;\n+            }\n             int nId = vvNew[nUBucket][nUBucketPos];\n             assert(mapInfo.count(nId) == 1);\n             CAddrInfo& info = mapInfo[nId];"
      }
    ]
  },
  {
    "sha": "981fd92bc5e233b15cb4205f17c9b707e6846a18",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ODFmZDkyYmM1ZTIzM2IxNWNiNDIwNWYxN2M5YjcwN2U2ODQ2YTE4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-26T10:04:34Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-26T10:06:08Z"
      },
      "message": "Merge pull request #6590\n\nbd30c3d rpc-tests: re-enable rpc-tests for Windows (Cory Fields)\na193387 net: Set SO_REUSEADDR for Windows too (Cory Fields)",
      "tree": {
        "sha": "7649a5389c7174dff7c5c0fe3be7bc0db1949ac5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7649a5389c7174dff7c5c0fe3be7bc0db1949ac5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/981fd92bc5e233b15cb4205f17c9b707e6846a18",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJV3Y+QAAoJEHSBCwEjRsmmgTIH/RqcZMK/nTr7F+sG2YwWbQoa\nc5TMg0oBjoFW0TNd2zM9xSn3p2e00T7P/9jTb7ZOPXrHo+cEnrJB0jGun25vb5oi\nEgyBCv31moy+nPsoqnZapV7KjoRdAfEtRNcAdPQJhqg+Po46bpQcgncgNgG1i0YB\nMU0gY3cekvXPGbrUx0Q6+dwsWvuax0urNO0UXPBWw7VmFnnk7+ZXTK5mYW8zc/UE\nO9OXSGgJiB4pmaDbAtBMbwk9HONNAX+eRv6cySINMyHOIUsMhI/6PNyjfweaoIDF\n521lhsmnMmv7K0Od1S5MIm5FJZwYWhLSOOiNJv88wLtx+kRiMPo9Ww51nWOOYx4=\n=yqb/\n-----END PGP SIGNATURE-----",
        "payload": "tree 7649a5389c7174dff7c5c0fe3be7bc0db1949ac5\nparent da9beb288d2ee35b9c70513dd18f220b2dc32f16\nparent bd30c3dced21fca869a14c75081f15195762afe1\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1440583474 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1440583568 +0200\n\nMerge pull request #6590\n\nbd30c3d rpc-tests: re-enable rpc-tests for Windows (Cory Fields)\na193387 net: Set SO_REUSEADDR for Windows too (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/981fd92bc5e233b15cb4205f17c9b707e6846a18",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/981fd92bc5e233b15cb4205f17c9b707e6846a18",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/981fd92bc5e233b15cb4205f17c9b707e6846a18/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "da9beb288d2ee35b9c70513dd18f220b2dc32f16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da9beb288d2ee35b9c70513dd18f220b2dc32f16",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/da9beb288d2ee35b9c70513dd18f220b2dc32f16"
      },
      {
        "sha": "bd30c3dced21fca869a14c75081f15195762afe1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd30c3dced21fca869a14c75081f15195762afe1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bd30c3dced21fca869a14c75081f15195762afe1"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 3,
      "deletions": 6
    },
    "files": [
      {
        "sha": "555d2c224bb588eb4326b3ee5e79da39a69ae48d",
        "filename": "qa/pull-tester/rpc-tests.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/981fd92bc5e233b15cb4205f17c9b707e6846a18/qa/pull-tester/rpc-tests.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/981fd92bc5e233b15cb4205f17c9b707e6846a18/qa/pull-tester/rpc-tests.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.sh?ref=981fd92bc5e233b15cb4205f17c9b707e6846a18",
        "patch": "@@ -8,11 +8,6 @@ CURDIR=$(cd $(dirname \"$0\"); pwd)\n export BITCOINCLI=${BUILDDIR}/qa/pull-tester/run-bitcoin-cli\n export BITCOIND=${REAL_BITCOIND}\n \n-if [ \"x${EXEEXT}\" = \"x.exe\" ]; then\n-  echo \"Win tests currently disabled\"\n-  exit 0\n-fi\n-\n #Run the tests\n \n testScripts=("
      },
      {
        "sha": "8fda5140cadcff245a00da017b3c1ec14447dd38",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/981fd92bc5e233b15cb4205f17c9b707e6846a18/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/981fd92bc5e233b15cb4205f17c9b707e6846a18/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=981fd92bc5e233b15cb4205f17c9b707e6846a18",
        "patch": "@@ -1625,8 +1625,10 @@ bool BindListenPort(const CService &addrBind, string& strError, bool fWhiteliste\n     setsockopt(hListenSocket, SOL_SOCKET, SO_NOSIGPIPE, (void*)&nOne, sizeof(int));\n #endif\n     // Allow binding if the port is still in TIME_WAIT state after\n-    // the program was closed and restarted. Not an issue on windows!\n+    // the program was closed and restarted.\n     setsockopt(hListenSocket, SOL_SOCKET, SO_REUSEADDR, (void*)&nOne, sizeof(int));\n+#else\n+    setsockopt(hListenSocket, SOL_SOCKET, SO_REUSEADDR, (const char*)&nOne, sizeof(int));\n #endif\n \n     // Set to non-blocking, incoming connections will also inherit this"
      }
    ]
  },
  {
    "sha": "ea19c2bc3f2281ad319457c6fa518bff96af13e3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYTE5YzJiYzNmMjI4MWFkMzE5NDU3YzZmYTUxOGJmZjk2YWYxM2Uz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-26T15:58:27Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-26T15:58:40Z"
      },
      "message": "Merge pull request #6530\n\nc33c11e Improve addrman Select() performance when buckets are nearly empty (Pieter Wuille)",
      "tree": {
        "sha": "3bc4005f6a87c6ce4119ab5178a036a12960275f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3bc4005f6a87c6ce4119ab5178a036a12960275f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ea19c2bc3f2281ad319457c6fa518bff96af13e3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJV3eIwAAoJEHSBCwEjRsmmEfkH/3gbdT2v7VTDZLII9B7REK8X\nIkNr4GbQ34hS0bf3tlx9MaetRzPK/YUn9dpFTz8lStKWNqB7pRVUMWawJU/dA8KB\nCpLQFbtOFfALC8yeiQymNiqPwbOhERbOhR21XFAEZ7rxLuIoYeZlMre7PLK3MpIC\nXAWkPWOCBvyHpwkh8QDWuDAPKBn9E9s40Hwp+FrGHJTvGwaRPH6FApvyDmDPfpKQ\nr8BBC9WNncEAr0abKLI6vRtZesaHSNRFhtfzWBwe3j90iLPyGr3cKfXPBdz/2XML\noGl7a2NMg04kCB0RQ0Wvy/985ZvphEuBNFwShbs+opswEeJGAZRhZ6cRrIV6+ys=\n=xTzl\n-----END PGP SIGNATURE-----",
        "payload": "tree 3bc4005f6a87c6ce4119ab5178a036a12960275f\nparent 981fd92bc5e233b15cb4205f17c9b707e6846a18\nparent c33c11ebacb93d74370f44f6c24d447da88648f4\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1440604707 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1440604720 +0200\n\nMerge pull request #6530\n\nc33c11e Improve addrman Select() performance when buckets are nearly empty (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea19c2bc3f2281ad319457c6fa518bff96af13e3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ea19c2bc3f2281ad319457c6fa518bff96af13e3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea19c2bc3f2281ad319457c6fa518bff96af13e3/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "981fd92bc5e233b15cb4205f17c9b707e6846a18",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/981fd92bc5e233b15cb4205f17c9b707e6846a18",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/981fd92bc5e233b15cb4205f17c9b707e6846a18"
      },
      {
        "sha": "c33c11ebacb93d74370f44f6c24d447da88648f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c33c11ebacb93d74370f44f6c24d447da88648f4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c33c11ebacb93d74370f44f6c24d447da88648f4"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 8,
      "deletions": 4
    },
    "files": [
      {
        "sha": "ff1f7e918778bf623b876df1a298e66bad2c892a",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea19c2bc3f2281ad319457c6fa518bff96af13e3/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea19c2bc3f2281ad319457c6fa518bff96af13e3/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=ea19c2bc3f2281ad319457c6fa518bff96af13e3",
        "patch": "@@ -341,8 +341,10 @@ CAddrInfo CAddrMan::Select_()\n         while (1) {\n             int nKBucket = GetRandInt(ADDRMAN_TRIED_BUCKET_COUNT);\n             int nKBucketPos = GetRandInt(ADDRMAN_BUCKET_SIZE);\n-            if (vvTried[nKBucket][nKBucketPos] == -1)\n-                continue;\n+            while (vvTried[nKBucket][nKBucketPos] == -1) {\n+                nKBucket = (nKBucket + insecure_rand()) % ADDRMAN_TRIED_BUCKET_COUNT;\n+                nKBucketPos = (nKBucketPos + insecure_rand()) % ADDRMAN_BUCKET_SIZE;\n+            }\n             int nId = vvTried[nKBucket][nKBucketPos];\n             assert(mapInfo.count(nId) == 1);\n             CAddrInfo& info = mapInfo[nId];\n@@ -356,8 +358,10 @@ CAddrInfo CAddrMan::Select_()\n         while (1) {\n             int nUBucket = GetRandInt(ADDRMAN_NEW_BUCKET_COUNT);\n             int nUBucketPos = GetRandInt(ADDRMAN_BUCKET_SIZE);\n-            if (vvNew[nUBucket][nUBucketPos] == -1)\n-                continue;\n+            while (vvNew[nUBucket][nUBucketPos] == -1) {\n+                nUBucket = (nUBucket + insecure_rand()) % ADDRMAN_NEW_BUCKET_COUNT;\n+                nUBucketPos = (nUBucketPos + insecure_rand()) % ADDRMAN_BUCKET_SIZE;\n+            }\n             int nId = vvNew[nUBucket][nUBucketPos];\n             assert(mapInfo.count(nId) == 1);\n             CAddrInfo& info = mapInfo[nId];"
      }
    ]
  },
  {
    "sha": "060058e9557f4d3094b6a8d2fa079539c5658d95",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNjAwNThlOTU1N2Y0ZDMwOTRiNmE4ZDJmYTA3OTUzOWM1NjU4ZDk1",
    "commit": {
      "author": {
        "name": "ptschip",
        "email": "peter.tschipper@gmail.com",
        "date": "2015-08-26T13:02:21Z"
      },
      "committer": {
        "name": "ptschip",
        "email": "peter.tschipper@gmail.com",
        "date": "2015-08-26T17:59:22Z"
      },
      "message": "Enable python tests for Native Windows\n\n1) Multiplatorm support for devnull\n2) Fixed a bug in the handling of cache files\n3) Deleted run-bitcoin-cli as no longer needed",
      "tree": {
        "sha": "712cf6d8711eeff8540d54ae15a623bff1b84957",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/712cf6d8711eeff8540d54ae15a623bff1b84957"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/060058e9557f4d3094b6a8d2fa079539c5658d95",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/060058e9557f4d3094b6a8d2fa079539c5658d95",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/060058e9557f4d3094b6a8d2fa079539c5658d95",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/060058e9557f4d3094b6a8d2fa079539c5658d95/comments",
    "author": {
      "login": "ptschip",
      "id": 12862928,
      "node_id": "MDQ6VXNlcjEyODYyOTI4",
      "avatar_url": "https://avatars.githubusercontent.com/u/12862928?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ptschip",
      "html_url": "https://github.com/ptschip",
      "followers_url": "https://api.github.com/users/ptschip/followers",
      "following_url": "https://api.github.com/users/ptschip/following{/other_user}",
      "gists_url": "https://api.github.com/users/ptschip/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ptschip/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ptschip/subscriptions",
      "organizations_url": "https://api.github.com/users/ptschip/orgs",
      "repos_url": "https://api.github.com/users/ptschip/repos",
      "events_url": "https://api.github.com/users/ptschip/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ptschip/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ptschip",
      "id": 12862928,
      "node_id": "MDQ6VXNlcjEyODYyOTI4",
      "avatar_url": "https://avatars.githubusercontent.com/u/12862928?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ptschip",
      "html_url": "https://github.com/ptschip",
      "followers_url": "https://api.github.com/users/ptschip/followers",
      "following_url": "https://api.github.com/users/ptschip/following{/other_user}",
      "gists_url": "https://api.github.com/users/ptschip/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ptschip/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ptschip/subscriptions",
      "organizations_url": "https://api.github.com/users/ptschip/orgs",
      "repos_url": "https://api.github.com/users/ptschip/repos",
      "events_url": "https://api.github.com/users/ptschip/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ptschip/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ea19c2bc3f2281ad319457c6fa518bff96af13e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea19c2bc3f2281ad319457c6fa518bff96af13e3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ea19c2bc3f2281ad319457c6fa518bff96af13e3"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 14,
      "deletions": 18
    },
    "files": [
      {
        "sha": "dfde0d43ecee34e6bab14b74fc673807df98e978",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/060058e9557f4d3094b6a8d2fa079539c5658d95/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/060058e9557f4d3094b6a8d2fa079539c5658d95/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=060058e9557f4d3094b6a8d2fa079539c5658d95",
        "patch": "@@ -204,7 +204,7 @@ endif\n \n dist_noinst_SCRIPTS = autogen.sh\n \n-EXTRA_DIST = $(top_srcdir)/share/genbuild.sh qa/pull-tester/rpc-tests.sh qa/pull-tester/run-bitcoin-cli qa/rpc-tests $(DIST_DOCS) $(WINDOWS_PACKAGING) $(OSX_PACKAGING)\n+EXTRA_DIST = $(top_srcdir)/share/genbuild.sh qa/pull-tester/rpc-tests.sh qa/rpc-tests $(DIST_DOCS) $(WINDOWS_PACKAGING) $(OSX_PACKAGING)\n \n CLEANFILES = $(OSX_DMG) $(BITCOIN_WIN_INSTALLER)\n "
      },
      {
        "sha": "f928cd09e347946e59cbfe0fc5ded48acd201db3",
        "filename": "qa/pull-tester/rpc-tests.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/060058e9557f4d3094b6a8d2fa079539c5658d95/qa/pull-tester/rpc-tests.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/060058e9557f4d3094b6a8d2fa079539c5658d95/qa/pull-tester/rpc-tests.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.sh?ref=060058e9557f4d3094b6a8d2fa079539c5658d95",
        "patch": "@@ -5,8 +5,8 @@ CURDIR=$(cd $(dirname \"$0\"); pwd)\n # Get BUILDDIR and REAL_BITCOIND\n . \"${CURDIR}/tests-config.sh\"\n \n-export BITCOINCLI=${BUILDDIR}/qa/pull-tester/run-bitcoin-cli\n export BITCOIND=${REAL_BITCOIND}\n+export BITCOINCLI=${REAL_BITCOINCLI}\n \n #Run the tests\n "
      },
      {
        "sha": "93c25bb9fca29e20e4b3b75718978e303268fac1",
        "filename": "qa/pull-tester/run-bitcoin-cli",
        "status": "removed",
        "additions": 0,
        "deletions": 13,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea19c2bc3f2281ad319457c6fa518bff96af13e3/qa/pull-tester/run-bitcoin-cli",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea19c2bc3f2281ad319457c6fa518bff96af13e3/qa/pull-tester/run-bitcoin-cli",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/run-bitcoin-cli?ref=ea19c2bc3f2281ad319457c6fa518bff96af13e3",
        "patch": "@@ -1,13 +0,0 @@\n-#!/bin/bash\n-\n-# This is a thin wrapper around bitcoin-cli that strips the Windows-style EOLs\n-# from the output if present. It is necessary when using bitcoin-cli.exe on\n-# Linux since shells will interpret the line-endings as part of the result.\n-\n-CURDIR=$(cd $(dirname \"$0\"); pwd)\n-# Get BUILDDIR and REAL_BITCOIND\n-\n-# Grab the value of $REAL_BITCOINCLI which may be bitcoin-cli.exe.\n-. \"${CURDIR}/tests-config.sh\"\n-\n-\"${REAL_BITCOINCLI}\" \"$@\" | sed 's/\\r//'"
      },
      {
        "sha": "3759cc8162871dcea0f09b1e7cae3428fa460f72",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 12,
        "deletions": 3,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/060058e9557f4d3094b6a8d2fa079539c5658d95/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/060058e9557f4d3094b6a8d2fa079539c5658d95/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=060058e9557f4d3094b6a8d2fa079539c5658d95",
        "patch": "@@ -78,8 +78,17 @@ def initialize_chain(test_dir):\n     bitcoind and bitcoin-cli must be in search path.\n     \"\"\"\n \n-    if not os.path.isdir(os.path.join(\"cache\", \"node0\")):\n-        devnull = open(\"/dev/null\", \"w+\")\n+    if (not os.path.isdir(os.path.join(\"cache\",\"node0\"))\n+        or not os.path.isdir(os.path.join(\"cache\",\"node1\")) \n+        or not os.path.isdir(os.path.join(\"cache\",\"node2\")) \n+        or not os.path.isdir(os.path.join(\"cache\",\"node3\"))):\n+\n+        #find and delete old cache directories if any exist\n+        for i in range(4):\n+            if os.path.isdir(os.path.join(\"cache\",\"node\"+str(i))): \n+                shutil.rmtree(os.path.join(\"cache\",\"node\"+str(i)))\n+\n+        devnull = open(os.devnull, \"w\")\n         # Create cache directories, run bitcoinds:\n         for i in range(4):\n             datadir=initialize_datadir(\"cache\", i)\n@@ -171,7 +180,7 @@ def start_node(i, dirname, extra_args=None, rpchost=None, timewait=None, binary=\n     args = [ binary, \"-datadir=\"+datadir, \"-keypool=1\", \"-discover=0\", \"-rest\" ]\n     if extra_args is not None: args.extend(extra_args)\n     bitcoind_processes[i] = subprocess.Popen(args)\n-    devnull = open(\"/dev/null\", \"w+\")\n+    devnull = open(os.devnull, \"w\")\n     if os.getenv(\"PYTHON_DEBUG\", \"\"):\n         print \"start_node: bitcoind started, calling bitcoin-cli -rpcwait getblockcount\"\n     subprocess.check_call([ os.getenv(\"BITCOINCLI\", \"bitcoin-cli\"), \"-datadir=\"+datadir] +"
      }
    ]
  },
  {
    "sha": "9bebf60698c34502319d6a8218f2ee0c4fa72ef6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YmViZjYwNjk4YzM0NTAyMzE5ZDZhODIxOGYyZWUwYzRmYTcyZWY2",
    "commit": {
      "author": {
        "name": "J Ross Nicoll",
        "email": "jrn@jrn.me.uk",
        "date": "2015-08-29T16:40:13Z"
      },
      "committer": {
        "name": "J Ross Nicoll",
        "email": "jrn@jrn.me.uk",
        "date": "2015-08-29T16:40:13Z"
      },
      "message": "Make sure LogPrint strings are line-terminated",
      "tree": {
        "sha": "21197260ba4a6e6e0251fc03fd6c7e0e07ccfce9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/21197260ba4a6e6e0251fc03fd6c7e0e07ccfce9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9bebf60698c34502319d6a8218f2ee0c4fa72ef6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABAgAGBQJV4eB6AAoJEJFC5fflM847GoYH/2GaHbowb4+8nKxnu7TIkDBV\nolTCQ06nNETT9JeuRtQgz9NZ6oAffbaBFG819wCGBSmMNsrraARPSNLvCzRFtIbj\nV/R/OJy4tVdkMFg4d8LQz29rnl4N3RLTgLlrZHw7o8gsEE8rVaWUXhO/PGcAf6yH\nEpClLhRn+m0yhbpEldhGSTJy2NeZzAUJ/QvjH+h4r6dwJHE6QJTMHkfy/k4DRP9a\nVtrwGO0m6v+izQUQXKl2poAfZpd8UkliiH6fghZjq5zuLbLJqMjxDJHXf9T8bWbM\n/Pee0CFui9dvKTwCBUkulXY+Mxy3Wbz6nSla+rJPZldjWoYlt31MYlQDVcA9f0o=\n=8p/L\n-----END PGP SIGNATURE-----",
        "payload": "tree 21197260ba4a6e6e0251fc03fd6c7e0e07ccfce9\nparent ea19c2bc3f2281ad319457c6fa518bff96af13e3\nauthor J Ross Nicoll <jrn@jrn.me.uk> 1440866413 +0100\ncommitter J Ross Nicoll <jrn@jrn.me.uk> 1440866413 +0100\n\nMake sure LogPrint strings are line-terminated\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bebf60698c34502319d6a8218f2ee0c4fa72ef6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9bebf60698c34502319d6a8218f2ee0c4fa72ef6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bebf60698c34502319d6a8218f2ee0c4fa72ef6/comments",
    "author": {
      "login": "rnicoll",
      "id": 3513077,
      "node_id": "MDQ6VXNlcjM1MTMwNzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3513077?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rnicoll",
      "html_url": "https://github.com/rnicoll",
      "followers_url": "https://api.github.com/users/rnicoll/followers",
      "following_url": "https://api.github.com/users/rnicoll/following{/other_user}",
      "gists_url": "https://api.github.com/users/rnicoll/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rnicoll/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rnicoll/subscriptions",
      "organizations_url": "https://api.github.com/users/rnicoll/orgs",
      "repos_url": "https://api.github.com/users/rnicoll/repos",
      "events_url": "https://api.github.com/users/rnicoll/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rnicoll/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rnicoll",
      "id": 3513077,
      "node_id": "MDQ6VXNlcjM1MTMwNzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3513077?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rnicoll",
      "html_url": "https://github.com/rnicoll",
      "followers_url": "https://api.github.com/users/rnicoll/followers",
      "following_url": "https://api.github.com/users/rnicoll/following{/other_user}",
      "gists_url": "https://api.github.com/users/rnicoll/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rnicoll/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rnicoll/subscriptions",
      "organizations_url": "https://api.github.com/users/rnicoll/orgs",
      "repos_url": "https://api.github.com/users/rnicoll/repos",
      "events_url": "https://api.github.com/users/rnicoll/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rnicoll/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ea19c2bc3f2281ad319457c6fa518bff96af13e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea19c2bc3f2281ad319457c6fa518bff96af13e3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ea19c2bc3f2281ad319457c6fa518bff96af13e3"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b61f7325a9e4a267a05fc47753805a05f4d3f3bf",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bebf60698c34502319d6a8218f2ee0c4fa72ef6/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bebf60698c34502319d6a8218f2ee0c4fa72ef6/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=9bebf60698c34502319d6a8218f2ee0c4fa72ef6",
        "patch": "@@ -659,7 +659,7 @@ bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes)\n                 return false;\n \n         if (msg.in_data && msg.hdr.nMessageSize > MAX_PROTOCOL_MESSAGE_LENGTH) {\n-            LogPrint(\"net\", \"Oversized message from peer=%i, disconnecting\", GetId());\n+            LogPrint(\"net\", \"Oversized message from peer=%i, disconnecting\\n\", GetId());\n             return false;\n         }\n "
      }
    ]
  },
  {
    "sha": "027de94e1fba5484aed2393afd89edbaaffdb0eb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMjdkZTk0ZTFmYmE1NDg0YWVkMjM5M2FmZDg5ZWRiYWFmZmRiMGVi",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-08-26T00:06:15Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2015-08-31T05:09:14Z"
      },
      "message": "Use network group instead of CNetAddr in final pass to select node to disconnect",
      "tree": {
        "sha": "f6feda479eed58f628c375b1834101b7a805f895",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f6feda479eed58f628c375b1834101b7a805f895"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/027de94e1fba5484aed2393afd89edbaaffdb0eb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABAgAGBQJV4+GBAAoJEHfoBoKoPbQO6cMH+gMJvZkwobFoe0W4KaJdF0tv\n3AtjqLXXJKgsHJrWV5tkZyT5DnoQW1lhUcb9A2xdE3gpJtWaUp2k3cfgno6szakF\npja2iJHrnr9N74lWRA4Hh83DZLDmJeYIuczIlTvkjebBdxkTXyWuM7Zfn0XvIl9s\njGgVRyYYkpYR2XlLM3+kQikDd8Suj+5IBuBdaZpX0HdYiyS2CWxbe9H+aDR+rMVq\neddUxryNGXM11mnO8YpmDG90XGA2/xz6TgKarQYALXFsF20Fi2JnPZ6U7igkR/au\n49dSAYkJgXQLCZpsZ3b9KTU8aF658njOJX/kFh/mvy6fNM9BdOLISm/kDizZ3Vs=\n=tFij\n-----END PGP SIGNATURE-----",
        "payload": "tree f6feda479eed58f628c375b1834101b7a805f895\nparent 000c18aaceeebdcaf65508fcdc3d00397971dcae\nauthor Patrick Strateman <patrick.strateman@gmail.com> 1440547575 -0700\ncommitter Patrick Strateman <patrick.strateman@gmail.com> 1440997754 -0700\n\nUse network group instead of CNetAddr in final pass to select node to disconnect\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/027de94e1fba5484aed2393afd89edbaaffdb0eb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/027de94e1fba5484aed2393afd89edbaaffdb0eb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/027de94e1fba5484aed2393afd89edbaaffdb0eb/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "000c18aaceeebdcaf65508fcdc3d00397971dcae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/000c18aaceeebdcaf65508fcdc3d00397971dcae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/000c18aaceeebdcaf65508fcdc3d00397971dcae"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 10,
      "deletions": 10
    },
    "files": [
      {
        "sha": "9264d68656a81322e88b463e7bfae1a42ee97f5b",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/027de94e1fba5484aed2393afd89edbaaffdb0eb/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/027de94e1fba5484aed2393afd89edbaaffdb0eb/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=027de94e1fba5484aed2393afd89edbaaffdb0eb",
        "patch": "@@ -898,29 +898,29 @@ static bool AttemptToEvictConnection(bool fPreferNewConnection) {\n \n     if (vEvictionCandidates.empty()) return false;\n \n-    // Identify CNetAddr with the most connections\n-    CNetAddr naMostConnections;\n+    // Identify the network group with the most connections\n+    std::vector<unsigned char> naMostConnections;\n     unsigned int nMostConnections = 0;\n-    std::map<CNetAddr, std::vector<CNodeRef> > mapAddrCounts;\n+    std::map<std::vector<unsigned char>, std::vector<CNodeRef> > mapAddrCounts;\n     BOOST_FOREACH(const CNodeRef &node, vEvictionCandidates) {\n-        mapAddrCounts[node->addr].push_back(node);\n+        mapAddrCounts[node->addr.GetGroup()].push_back(node);\n \n-        if (mapAddrCounts[node->addr].size() > nMostConnections) {\n-            nMostConnections = mapAddrCounts[node->addr].size();\n-            naMostConnections = node->addr;\n+        if (mapAddrCounts[node->addr.GetGroup()].size() > nMostConnections) {\n+            nMostConnections = mapAddrCounts[node->addr.GetGroup()].size();\n+            naMostConnections = node->addr.GetGroup();\n         }\n     }\n \n-    // Reduce to the CNetAddr with the most connections\n+    // Reduce to the network group with the most connections\n     vEvictionCandidates = mapAddrCounts[naMostConnections];\n \n-    // Do not disconnect peers who have only 1 evictable connection\n+    // Do not disconnect peers if there is only 1 connection from their network group\n     if (vEvictionCandidates.size() <= 1)\n         // unless we prefer the new connection (for whitelisted peers)\n         if (!fPreferNewConnection)\n             return false;\n \n-    // Disconnect the most recent connection from the CNetAddr with the most connections\n+    // Disconnect the most recent connection from the network group with the most connections\n     std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), ReverseCompareNodeTimeConnected);\n     vEvictionCandidates[0]->fDisconnect = true;\n "
      }
    ]
  },
  {
    "sha": "f4d88c404136b410c41be936f26e8cb4e68589ca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNGQ4OGM0MDQxMzZiNDEwYzQxYmU5MzZmMjZlOGNiNGU2ODU4OWNh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-31T09:49:53Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-31T09:56:18Z"
      },
      "message": "Merge pull request #6599\n\n9bebf60 Make sure LogPrint strings are line-terminated (J Ross Nicoll)",
      "tree": {
        "sha": "21197260ba4a6e6e0251fc03fd6c7e0e07ccfce9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/21197260ba4a6e6e0251fc03fd6c7e0e07ccfce9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f4d88c404136b410c41be936f26e8cb4e68589ca",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJV5CTCAAoJEHSBCwEjRsmmzk4H/R+9GskOOs/nP4k1qpslHo0b\nvvQhRb8rdYXhZWwK8Zh1N+BPAGDdYEttWfajfF1YvLllJ2j49E3uXGEXShj8s+eO\nOHfLRozBZztwVkKqc9MSluFDMxdf9zX0jJ7Z2/NKx/uq1q2ImJjDBT4ErqVIpX7W\nOsBVhWN167VJ3Yd5/PwVxeKcCWp5ZP0X73VqzaEsRxxI16uv3+njggQbIl8HHn0t\nCt1m6e3ATm1TBFTKwp+ouMk9wWsxedU45UkOVFf4v3yqyMVOA0oCs1q7woKFQ6W0\n1ETAFn/fwbOcY7g84sVj0x0oIFZNSBDG6uJCYMcq+jnqWWm8f2UxQRv040UCGj4=\n=Q8ff\n-----END PGP SIGNATURE-----",
        "payload": "tree 21197260ba4a6e6e0251fc03fd6c7e0e07ccfce9\nparent ea19c2bc3f2281ad319457c6fa518bff96af13e3\nparent 9bebf60698c34502319d6a8218f2ee0c4fa72ef6\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1441014593 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1441014978 +0200\n\nMerge pull request #6599\n\n9bebf60 Make sure LogPrint strings are line-terminated (J Ross Nicoll)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4d88c404136b410c41be936f26e8cb4e68589ca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f4d88c404136b410c41be936f26e8cb4e68589ca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4d88c404136b410c41be936f26e8cb4e68589ca/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ea19c2bc3f2281ad319457c6fa518bff96af13e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea19c2bc3f2281ad319457c6fa518bff96af13e3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ea19c2bc3f2281ad319457c6fa518bff96af13e3"
      },
      {
        "sha": "9bebf60698c34502319d6a8218f2ee0c4fa72ef6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bebf60698c34502319d6a8218f2ee0c4fa72ef6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9bebf60698c34502319d6a8218f2ee0c4fa72ef6"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b61f7325a9e4a267a05fc47753805a05f4d3f3bf",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4d88c404136b410c41be936f26e8cb4e68589ca/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4d88c404136b410c41be936f26e8cb4e68589ca/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=f4d88c404136b410c41be936f26e8cb4e68589ca",
        "patch": "@@ -659,7 +659,7 @@ bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes)\n                 return false;\n \n         if (msg.in_data && msg.hdr.nMessageSize > MAX_PROTOCOL_MESSAGE_LENGTH) {\n-            LogPrint(\"net\", \"Oversized message from peer=%i, disconnecting\", GetId());\n+            LogPrint(\"net\", \"Oversized message from peer=%i, disconnecting\\n\", GetId());\n             return false;\n         }\n "
      }
    ]
  },
  {
    "sha": "af9305a7e8a40014508fb66a22ae95e8afe142c6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZjkzMDVhN2U4YTQwMDE0NTA4ZmI2NmEyMmFlOTVlOGFmZTE0MmM2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-31T15:38:00Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-31T15:38:07Z"
      },
      "message": "Merge pull request #6583\n\n9f3e48e add support for miniupnpc api version 14 (Pavel Vasin)",
      "tree": {
        "sha": "a9e112f54f6db66537e90ba35c38edd2678ab588",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a9e112f54f6db66537e90ba35c38edd2678ab588"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/af9305a7e8a40014508fb66a22ae95e8afe142c6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJV5HTfAAoJEHSBCwEjRsmms2MH/iAiyo6MhDQwh4fTYIJvQuvv\nG83xjV8h1OokUleO9J1UhPDtAPqYgzFvfUMFMrEiL0Hu3l+jl6tcP7lE2kIxunS8\nOvPfPEesIMdoqJQZ4LzgeyA0PPziXf4kg+wRPsD4PE9ZnrM51d9JObtbuDnkqlNu\nnhCe0dEiQHh9bT9GCAgLaVl9zuudGQn+l1eXVCA2FYl+8hNI5UWpbXzs9iS0DcOY\nW6NRKle1gdGXMyydoumxE/mRuz+xvPSCBnFboZzgzFCR0+yFd9Iz4KtTQMUZJ3RB\nCSZVZ27Qn2HTlo3gO9KUEu8kvT5UTqkUqiLutrmWoTTSsWLIJsyP6ChT8I7hU3U=\n=33wM\n-----END PGP SIGNATURE-----",
        "payload": "tree a9e112f54f6db66537e90ba35c38edd2678ab588\nparent f4d88c404136b410c41be936f26e8cb4e68589ca\nparent 9f3e48e5219a09b5ddfd6883d1f0498910eff4b6\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1441035480 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1441035487 +0200\n\nMerge pull request #6583\n\n9f3e48e add support for miniupnpc api version 14 (Pavel Vasin)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af9305a7e8a40014508fb66a22ae95e8afe142c6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/af9305a7e8a40014508fb66a22ae95e8afe142c6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af9305a7e8a40014508fb66a22ae95e8afe142c6/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f4d88c404136b410c41be936f26e8cb4e68589ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4d88c404136b410c41be936f26e8cb4e68589ca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f4d88c404136b410c41be936f26e8cb4e68589ca"
      },
      {
        "sha": "9f3e48e5219a09b5ddfd6883d1f0498910eff4b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f3e48e5219a09b5ddfd6883d1f0498910eff4b6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9f3e48e5219a09b5ddfd6883d1f0498910eff4b6"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 5,
      "deletions": 1
    },
    "files": [
      {
        "sha": "105ccce848b0c124c6d8e656d4201d95c3a5404d",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af9305a7e8a40014508fb66a22ae95e8afe142c6/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af9305a7e8a40014508fb66a22ae95e8afe142c6/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=af9305a7e8a40014508fb66a22ae95e8afe142c6",
        "patch": "@@ -1120,10 +1120,14 @@ void ThreadMapPort()\n #ifndef UPNPDISCOVER_SUCCESS\n     /* miniupnpc 1.5 */\n     devlist = upnpDiscover(2000, multicastif, minissdpdpath, 0);\n-#else\n+#elif MINIUPNPC_API_VERSION < 14\n     /* miniupnpc 1.6 */\n     int error = 0;\n     devlist = upnpDiscover(2000, multicastif, minissdpdpath, 0, 0, &error);\n+#else\n+    /* miniupnpc 1.9.20150730 */\n+    int error = 0;\n+    devlist = upnpDiscover(2000, multicastif, minissdpdpath, 0, 0, 2, &error);\n #endif\n \n     struct UPNPUrls urls;"
      }
    ]
  },
  {
    "sha": "10c0e52b68c77d6cf1ba4aeb05618229bba3cd3d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMGMwZTUyYjY4Yzc3ZDZjZjFiYTRhZWIwNTYxODIyOWJiYTNjZDNk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-01T09:36:56Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-01T09:37:13Z"
      },
      "message": "Merge pull request #6548\n\n060058e Enable python tests for Native Windows (ptschip)",
      "tree": {
        "sha": "c9c2c5c36e568b3f2c33b5d501bf029a84d12dc8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c9c2c5c36e568b3f2c33b5d501bf029a84d12dc8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/10c0e52b68c77d6cf1ba4aeb05618229bba3cd3d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJV5XHJAAoJEHSBCwEjRsmmHCUH/2nMi1P/zcLyv3M/K1LQVkur\ntJn9eY9WYs/ziSDBf78jSFTS1qDtjiJFQKwF8yx5x3j73OQGssQKHYFj1Jujr3Na\nEjECpvhqQCCZ5hszJ/VI18d5ZTFIt3A4pK+NVqSvzmniwwlZLUcAOG6bMwjkYsWG\nPivnnQVYKLD6xOCnBXd4FsVnSW/aggSuaaxlTwRwKNVUk7SV+vMqBe1+TkqcOtRi\n5WjBx7xJwYqVv+HSWq+516WCGCUOMrnIkCFVwsoxGJ2n3C5IEVDjkZFHmoaQ0TrM\ntQrOYwuSfR+ghKANz+heFbSw/C4UMOlDeC5nsy9uAV+65bmLpSAT1S0VZ1G+nuc=\n=yT/P\n-----END PGP SIGNATURE-----",
        "payload": "tree c9c2c5c36e568b3f2c33b5d501bf029a84d12dc8\nparent af9305a7e8a40014508fb66a22ae95e8afe142c6\nparent 060058e9557f4d3094b6a8d2fa079539c5658d95\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1441100216 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1441100233 +0200\n\nMerge pull request #6548\n\n060058e Enable python tests for Native Windows (ptschip)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10c0e52b68c77d6cf1ba4aeb05618229bba3cd3d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/10c0e52b68c77d6cf1ba4aeb05618229bba3cd3d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10c0e52b68c77d6cf1ba4aeb05618229bba3cd3d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "af9305a7e8a40014508fb66a22ae95e8afe142c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af9305a7e8a40014508fb66a22ae95e8afe142c6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/af9305a7e8a40014508fb66a22ae95e8afe142c6"
      },
      {
        "sha": "060058e9557f4d3094b6a8d2fa079539c5658d95",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/060058e9557f4d3094b6a8d2fa079539c5658d95",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/060058e9557f4d3094b6a8d2fa079539c5658d95"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 14,
      "deletions": 18
    },
    "files": [
      {
        "sha": "dfde0d43ecee34e6bab14b74fc673807df98e978",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10c0e52b68c77d6cf1ba4aeb05618229bba3cd3d/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10c0e52b68c77d6cf1ba4aeb05618229bba3cd3d/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=10c0e52b68c77d6cf1ba4aeb05618229bba3cd3d",
        "patch": "@@ -204,7 +204,7 @@ endif\n \n dist_noinst_SCRIPTS = autogen.sh\n \n-EXTRA_DIST = $(top_srcdir)/share/genbuild.sh qa/pull-tester/rpc-tests.sh qa/pull-tester/run-bitcoin-cli qa/rpc-tests $(DIST_DOCS) $(WINDOWS_PACKAGING) $(OSX_PACKAGING)\n+EXTRA_DIST = $(top_srcdir)/share/genbuild.sh qa/pull-tester/rpc-tests.sh qa/rpc-tests $(DIST_DOCS) $(WINDOWS_PACKAGING) $(OSX_PACKAGING)\n \n CLEANFILES = $(OSX_DMG) $(BITCOIN_WIN_INSTALLER)\n "
      },
      {
        "sha": "f928cd09e347946e59cbfe0fc5ded48acd201db3",
        "filename": "qa/pull-tester/rpc-tests.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10c0e52b68c77d6cf1ba4aeb05618229bba3cd3d/qa/pull-tester/rpc-tests.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10c0e52b68c77d6cf1ba4aeb05618229bba3cd3d/qa/pull-tester/rpc-tests.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.sh?ref=10c0e52b68c77d6cf1ba4aeb05618229bba3cd3d",
        "patch": "@@ -5,8 +5,8 @@ CURDIR=$(cd $(dirname \"$0\"); pwd)\n # Get BUILDDIR and REAL_BITCOIND\n . \"${CURDIR}/tests-config.sh\"\n \n-export BITCOINCLI=${BUILDDIR}/qa/pull-tester/run-bitcoin-cli\n export BITCOIND=${REAL_BITCOIND}\n+export BITCOINCLI=${REAL_BITCOINCLI}\n \n #Run the tests\n "
      },
      {
        "sha": "93c25bb9fca29e20e4b3b75718978e303268fac1",
        "filename": "qa/pull-tester/run-bitcoin-cli",
        "status": "removed",
        "additions": 0,
        "deletions": 13,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af9305a7e8a40014508fb66a22ae95e8afe142c6/qa/pull-tester/run-bitcoin-cli",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af9305a7e8a40014508fb66a22ae95e8afe142c6/qa/pull-tester/run-bitcoin-cli",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/run-bitcoin-cli?ref=af9305a7e8a40014508fb66a22ae95e8afe142c6",
        "patch": "@@ -1,13 +0,0 @@\n-#!/bin/bash\n-\n-# This is a thin wrapper around bitcoin-cli that strips the Windows-style EOLs\n-# from the output if present. It is necessary when using bitcoin-cli.exe on\n-# Linux since shells will interpret the line-endings as part of the result.\n-\n-CURDIR=$(cd $(dirname \"$0\"); pwd)\n-# Get BUILDDIR and REAL_BITCOIND\n-\n-# Grab the value of $REAL_BITCOINCLI which may be bitcoin-cli.exe.\n-. \"${CURDIR}/tests-config.sh\"\n-\n-\"${REAL_BITCOINCLI}\" \"$@\" | sed 's/\\r//'"
      },
      {
        "sha": "3759cc8162871dcea0f09b1e7cae3428fa460f72",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 12,
        "deletions": 3,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10c0e52b68c77d6cf1ba4aeb05618229bba3cd3d/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10c0e52b68c77d6cf1ba4aeb05618229bba3cd3d/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=10c0e52b68c77d6cf1ba4aeb05618229bba3cd3d",
        "patch": "@@ -78,8 +78,17 @@ def initialize_chain(test_dir):\n     bitcoind and bitcoin-cli must be in search path.\n     \"\"\"\n \n-    if not os.path.isdir(os.path.join(\"cache\", \"node0\")):\n-        devnull = open(\"/dev/null\", \"w+\")\n+    if (not os.path.isdir(os.path.join(\"cache\",\"node0\"))\n+        or not os.path.isdir(os.path.join(\"cache\",\"node1\")) \n+        or not os.path.isdir(os.path.join(\"cache\",\"node2\")) \n+        or not os.path.isdir(os.path.join(\"cache\",\"node3\"))):\n+\n+        #find and delete old cache directories if any exist\n+        for i in range(4):\n+            if os.path.isdir(os.path.join(\"cache\",\"node\"+str(i))): \n+                shutil.rmtree(os.path.join(\"cache\",\"node\"+str(i)))\n+\n+        devnull = open(os.devnull, \"w\")\n         # Create cache directories, run bitcoinds:\n         for i in range(4):\n             datadir=initialize_datadir(\"cache\", i)\n@@ -171,7 +180,7 @@ def start_node(i, dirname, extra_args=None, rpchost=None, timewait=None, binary=\n     args = [ binary, \"-datadir=\"+datadir, \"-keypool=1\", \"-discover=0\", \"-rest\" ]\n     if extra_args is not None: args.extend(extra_args)\n     bitcoind_processes[i] = subprocess.Popen(args)\n-    devnull = open(\"/dev/null\", \"w+\")\n+    devnull = open(os.devnull, \"w\")\n     if os.getenv(\"PYTHON_DEBUG\", \"\"):\n         print \"start_node: bitcoind started, calling bitcoin-cli -rpcwait getblockcount\"\n     subprocess.check_call([ os.getenv(\"BITCOINCLI\", \"bitcoin-cli\"), \"-datadir=\"+datadir] +"
      }
    ]
  },
  {
    "sha": "bfadae33741ff3a58ed47f939080a3122bc2307d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZmFkYWUzMzc0MWZmM2E1OGVkNDdmOTM5MDgwYTMxMjJiYzIzMDdk",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-09-02T01:45:23Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-09-02T01:45:23Z"
      },
      "message": "travis: for travis generating an extra build",
      "tree": {
        "sha": "2eb0a0f7909f6320b27e7cee045c321c763b0b95",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2eb0a0f7909f6320b27e7cee045c321c763b0b95"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bfadae33741ff3a58ed47f939080a3122bc2307d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfadae33741ff3a58ed47f939080a3122bc2307d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bfadae33741ff3a58ed47f939080a3122bc2307d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfadae33741ff3a58ed47f939080a3122bc2307d/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "10c0e52b68c77d6cf1ba4aeb05618229bba3cd3d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10c0e52b68c77d6cf1ba4aeb05618229bba3cd3d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/10c0e52b68c77d6cf1ba4aeb05618229bba3cd3d"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0537d69a46a15f357d8bf04d917274ffe006af73",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfadae33741ff3a58ed47f939080a3122bc2307d/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfadae33741ff3a58ed47f939080a3122bc2307d/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=bfadae33741ff3a58ed47f939080a3122bc2307d",
        "patch": "@@ -6,6 +6,7 @@\n \n os: linux\n language: cpp\n+compiler: gcc\n env:\n   global:\n     - MAKEJOBS=-j3\n@@ -41,6 +42,8 @@ matrix:\n       env: HOST=x86_64-unknown-linux-gnu DEP_OPTS=\"NO_WALLET=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n     - compiler: \": Cross-Mac\"\n       env: HOST=x86_64-apple-darwin11 PACKAGES=\"cmake libcap-dev libz-dev libbz2-dev\" BITCOIN_CONFIG=\"--enable-reduce-exports\" OSX_SDK=10.9 GOAL=\"deploy\"\n+  exclude:\n+    - compiler: gcc\n install:\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get update; fi\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get install --no-install-recommends --no-upgrade -qq $PACKAGES; fi"
      }
    ]
  },
  {
    "sha": "5b85126863dc788a6d55e57552f27841ff00abdb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1Yjg1MTI2ODYzZGM3ODhhNmQ1NWU1NzU1MmYyNzg0MWZmMDBhYmRi",
    "commit": {
      "author": {
        "name": "Altoidnerd",
        "email": "allenmajs1@gmail.com",
        "date": "2015-09-01T11:14:53Z"
      },
      "committer": {
        "name": "altoidnerd",
        "email": "allenmajs1@gmail.com",
        "date": "2015-09-02T09:13:04Z"
      },
      "message": "Update build-unix.md\n\nIf a user hasn't ready run autogen.sh, configure doesn't yet exist.  Do the instructions seem to presume you have already built bitcoin?  I don't think they do.\n\nWould stifle beginners.\n\nUpdate build-unix.md",
      "tree": {
        "sha": "6f222a9d0b9d322eaec09a16e58242dd3f61938f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6f222a9d0b9d322eaec09a16e58242dd3f61938f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5b85126863dc788a6d55e57552f27841ff00abdb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b85126863dc788a6d55e57552f27841ff00abdb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5b85126863dc788a6d55e57552f27841ff00abdb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b85126863dc788a6d55e57552f27841ff00abdb/comments",
    "author": {
      "login": "Altoidnerd",
      "id": 5143993,
      "node_id": "MDQ6VXNlcjUxNDM5OTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5143993?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Altoidnerd",
      "html_url": "https://github.com/Altoidnerd",
      "followers_url": "https://api.github.com/users/Altoidnerd/followers",
      "following_url": "https://api.github.com/users/Altoidnerd/following{/other_user}",
      "gists_url": "https://api.github.com/users/Altoidnerd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Altoidnerd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Altoidnerd/subscriptions",
      "organizations_url": "https://api.github.com/users/Altoidnerd/orgs",
      "repos_url": "https://api.github.com/users/Altoidnerd/repos",
      "events_url": "https://api.github.com/users/Altoidnerd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Altoidnerd/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Altoidnerd",
      "id": 5143993,
      "node_id": "MDQ6VXNlcjUxNDM5OTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5143993?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Altoidnerd",
      "html_url": "https://github.com/Altoidnerd",
      "followers_url": "https://api.github.com/users/Altoidnerd/followers",
      "following_url": "https://api.github.com/users/Altoidnerd/following{/other_user}",
      "gists_url": "https://api.github.com/users/Altoidnerd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Altoidnerd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Altoidnerd/subscriptions",
      "organizations_url": "https://api.github.com/users/Altoidnerd/orgs",
      "repos_url": "https://api.github.com/users/Altoidnerd/repos",
      "events_url": "https://api.github.com/users/Altoidnerd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Altoidnerd/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "10c0e52b68c77d6cf1ba4aeb05618229bba3cd3d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10c0e52b68c77d6cf1ba4aeb05618229bba3cd3d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/10c0e52b68c77d6cf1ba4aeb05618229bba3cd3d"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "95e501ac6967b25e8e30eea666d9f77b7386ac56",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b85126863dc788a6d55e57552f27841ff00abdb/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b85126863dc788a6d55e57552f27841ff00abdb/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=5b85126863dc788a6d55e57552f27841ff00abdb",
        "patch": "@@ -154,7 +154,8 @@ make install\n \n # Configure Bitcoin Core to use our own-built instance of BDB\n cd $BITCOIN_ROOT\n-./configure (other args...) LDFLAGS=\"-L${BDB_PREFIX}/lib/\" CPPFLAGS=\"-I${BDB_PREFIX}/include/\"\n+./autogen.sh\n+./configure LDFLAGS=\"-L${BDB_PREFIX}/lib/\" CPPFLAGS=\"-I${BDB_PREFIX}/include/\" # (other args...)\n ```\n \n **Note**: You only need Berkeley DB if the wallet is enabled (see the section *Disable-Wallet mode* below)."
      }
    ]
  },
  {
    "sha": "b319f0828ef7a944f2257799f7ce6d7ba7ab71ae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMzE5ZjA4MjhlZjdhOTQ0ZjIyNTc3OTlmN2NlNmQ3YmE3YWI3MWFl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-02T15:14:22Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-02T15:14:29Z"
      },
      "message": "Merge pull request #6617\n\nbfadae3 travis: for travis generating an extra build (Cory Fields)",
      "tree": {
        "sha": "2eb0a0f7909f6320b27e7cee045c321c763b0b95",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2eb0a0f7909f6320b27e7cee045c321c763b0b95"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b319f0828ef7a944f2257799f7ce6d7ba7ab71ae",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJV5xJVAAoJEHSBCwEjRsmm+yYH/0P6Nv5Fwp5XtYsBegPh6JUa\nXH1lj/zo68SkuqfHhkH5nYNOjwDb/pcKHoaUsrMLnc6tqKl/OEaVp61j/tPR7uky\nhhw1BIAQnhIkwMz638MfqkxzPj2Xnay31mQQZ/v3Mq0LwRxO/Msdj48e6uy8Vf7q\nRNXECKtGsyu1+3JvxyAeAIMUNvCxPpnD9pResJwb61Co5Kw8z0gpSTsmRNG8UVwJ\nCLHV/3Bm+FoBceLVLo/O8QPTCQpTFSeHiGl+KZTL7h2NG5TNi7y107CTLKSTupls\n+0OypAPd7lKJWhkANDy1JbWRlozEOSrVHSsXVbR5R8hW9DsYdtaeBrxPngtRAlM=\n=qYTc\n-----END PGP SIGNATURE-----",
        "payload": "tree 2eb0a0f7909f6320b27e7cee045c321c763b0b95\nparent 10c0e52b68c77d6cf1ba4aeb05618229bba3cd3d\nparent bfadae33741ff3a58ed47f939080a3122bc2307d\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1441206862 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1441206869 +0200\n\nMerge pull request #6617\n\nbfadae3 travis: for travis generating an extra build (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b319f0828ef7a944f2257799f7ce6d7ba7ab71ae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b319f0828ef7a944f2257799f7ce6d7ba7ab71ae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b319f0828ef7a944f2257799f7ce6d7ba7ab71ae/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "10c0e52b68c77d6cf1ba4aeb05618229bba3cd3d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10c0e52b68c77d6cf1ba4aeb05618229bba3cd3d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/10c0e52b68c77d6cf1ba4aeb05618229bba3cd3d"
      },
      {
        "sha": "bfadae33741ff3a58ed47f939080a3122bc2307d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfadae33741ff3a58ed47f939080a3122bc2307d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bfadae33741ff3a58ed47f939080a3122bc2307d"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0537d69a46a15f357d8bf04d917274ffe006af73",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b319f0828ef7a944f2257799f7ce6d7ba7ab71ae/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b319f0828ef7a944f2257799f7ce6d7ba7ab71ae/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=b319f0828ef7a944f2257799f7ce6d7ba7ab71ae",
        "patch": "@@ -6,6 +6,7 @@\n \n os: linux\n language: cpp\n+compiler: gcc\n env:\n   global:\n     - MAKEJOBS=-j3\n@@ -41,6 +42,8 @@ matrix:\n       env: HOST=x86_64-unknown-linux-gnu DEP_OPTS=\"NO_WALLET=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n     - compiler: \": Cross-Mac\"\n       env: HOST=x86_64-apple-darwin11 PACKAGES=\"cmake libcap-dev libz-dev libbz2-dev\" BITCOIN_CONFIG=\"--enable-reduce-exports\" OSX_SDK=10.9 GOAL=\"deploy\"\n+  exclude:\n+    - compiler: gcc\n install:\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get update; fi\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get install --no-install-recommends --no-upgrade -qq $PACKAGES; fi"
      }
    ]
  },
  {
    "sha": "10e469ae378323faf84f25459f52ac860a8bd81f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMGU0NjlhZTM3ODMyM2ZhZjg0ZjI1NDU5ZjUyYWM4NjBhOGJkODFm",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-09-02T15:39:23Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-09-02T15:42:27Z"
      },
      "message": "travis: bump wine to 1.7",
      "tree": {
        "sha": "9cc93f744d43c155d48d769e27c146373c75dce0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9cc93f744d43c155d48d769e27c146373c75dce0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/10e469ae378323faf84f25459f52ac860a8bd81f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10e469ae378323faf84f25459f52ac860a8bd81f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/10e469ae378323faf84f25459f52ac860a8bd81f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10e469ae378323faf84f25459f52ac860a8bd81f/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b319f0828ef7a944f2257799f7ce6d7ba7ab71ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b319f0828ef7a944f2257799f7ce6d7ba7ab71ae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b319f0828ef7a944f2257799f7ce6d7ba7ab71ae"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "c8785144adc03df3400e315b22d8d73e4eb2dc37",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10e469ae378323faf84f25459f52ac860a8bd81f/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10e469ae378323faf84f25459f52ac860a8bd81f/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=10e469ae378323faf84f25459f52ac860a8bd81f",
        "patch": "@@ -31,11 +31,11 @@ matrix:\n     - compiler: \": ARM\"\n       env: HOST=arm-linux-gnueabihf PACKAGES=\"g++-arm-linux-gnueabihf\" DEP_OPTS=\"NO_QT=1\" GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n     - compiler: \": Win32\"\n-      env: HOST=i686-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-i686 g++-mingw-w64-i686 binutils-mingw-w64-i686 mingw-w64-dev wine bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" MAKEJOBS=\"-j2\"\n+      env: HOST=i686-w64-mingw32 PPA=\"ppa:ubuntu-wine/ppa\" PACKAGES=\"nsis gcc-mingw-w64-i686 g++-mingw-w64-i686 binutils-mingw-w64-i686 mingw-w64-dev wine1.7 bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" MAKEJOBS=\"-j2\"\n     - compiler: \": 32-bit + dash\"\n       env: HOST=i686-pc-linux-gnu PACKAGES=\"g++-multilib bc\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\" USE_SHELL=\"/bin/dash\"\n     - compiler: \": Win64\"\n-      env: HOST=x86_64-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 binutils-mingw-w64-x86-64 mingw-w64-dev wine bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" MAKEJOBS=\"-j2\"\n+      env: HOST=x86_64-w64-mingw32 PPA=\"ppa:ubuntu-wine/ppa\" PACKAGES=\"nsis gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 binutils-mingw-w64-x86-64 mingw-w64-dev wine1.7 bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" MAKEJOBS=\"-j2\"\n     - compiler: \": bitcoind\"\n       env: HOST=x86_64-unknown-linux-gnu PACKAGES=\"bc\" DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports CPPFLAGS=-DDEBUG_LOCKORDER\"\n     - compiler: \": No wallet\"\n@@ -45,6 +45,7 @@ matrix:\n   exclude:\n     - compiler: gcc\n install:\n+    - if [ -n \"$PPA\" ]; then travis_retry sudo add-apt-repository \"$PPA\" -y; fi\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get update; fi\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get install --no-install-recommends --no-upgrade -qq $PACKAGES; fi\n before_script:"
      }
    ]
  },
  {
    "sha": "3932ff50c563df19c14e9987f2297d9f99a299ac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOTMyZmY1MGM1NjNkZjE5YzE0ZTk5ODdmMjI5N2Q5Zjk5YTI5OWFj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-02T16:38:00Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-02T16:38:10Z"
      },
      "message": "Merge pull request #6620\n\n10e469a travis: bump wine to 1.7 (Cory Fields)",
      "tree": {
        "sha": "9cc93f744d43c155d48d769e27c146373c75dce0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9cc93f744d43c155d48d769e27c146373c75dce0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3932ff50c563df19c14e9987f2297d9f99a299ac",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJV5yXyAAoJEHSBCwEjRsmmEFQH/0QbngzWucUW2lncOz17QVx2\neZLfUObw3Bi2iuospQJ0JnrUXUPZrT+TFi7rFHwP712zc93u55DoN/P0sp6C8rxW\n0QdOjM1AQtfg7QkiVA1Le/94Oa5XuLJDdmVtQEhQ+b/7g/eRFIr0G87bDmcCYFmQ\n4AnkCG39HOeImKkau3DkRmCxBbzEINNaSHxATwg9ZqL1NYdYte+z/eKo2O/DyHnd\n+GJJNjUqJX7EZVnIES0PRtOO5OJmGQhgKdmQQ6XWPzyp7TFqnDHs5AiaVIsuDEyS\n8sb+l+HISZ6HaHRqPsFCoZFr5D6ErsKjjbYVV0VfBm186uzH9hyOzidVI1Vqb44=\n=z7uk\n-----END PGP SIGNATURE-----",
        "payload": "tree 9cc93f744d43c155d48d769e27c146373c75dce0\nparent b319f0828ef7a944f2257799f7ce6d7ba7ab71ae\nparent 10e469ae378323faf84f25459f52ac860a8bd81f\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1441211880 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1441211890 +0200\n\nMerge pull request #6620\n\n10e469a travis: bump wine to 1.7 (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3932ff50c563df19c14e9987f2297d9f99a299ac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3932ff50c563df19c14e9987f2297d9f99a299ac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3932ff50c563df19c14e9987f2297d9f99a299ac/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b319f0828ef7a944f2257799f7ce6d7ba7ab71ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b319f0828ef7a944f2257799f7ce6d7ba7ab71ae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b319f0828ef7a944f2257799f7ce6d7ba7ab71ae"
      },
      {
        "sha": "10e469ae378323faf84f25459f52ac860a8bd81f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10e469ae378323faf84f25459f52ac860a8bd81f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/10e469ae378323faf84f25459f52ac860a8bd81f"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "c8785144adc03df3400e315b22d8d73e4eb2dc37",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3932ff50c563df19c14e9987f2297d9f99a299ac/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3932ff50c563df19c14e9987f2297d9f99a299ac/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=3932ff50c563df19c14e9987f2297d9f99a299ac",
        "patch": "@@ -31,11 +31,11 @@ matrix:\n     - compiler: \": ARM\"\n       env: HOST=arm-linux-gnueabihf PACKAGES=\"g++-arm-linux-gnueabihf\" DEP_OPTS=\"NO_QT=1\" GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n     - compiler: \": Win32\"\n-      env: HOST=i686-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-i686 g++-mingw-w64-i686 binutils-mingw-w64-i686 mingw-w64-dev wine bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" MAKEJOBS=\"-j2\"\n+      env: HOST=i686-w64-mingw32 PPA=\"ppa:ubuntu-wine/ppa\" PACKAGES=\"nsis gcc-mingw-w64-i686 g++-mingw-w64-i686 binutils-mingw-w64-i686 mingw-w64-dev wine1.7 bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" MAKEJOBS=\"-j2\"\n     - compiler: \": 32-bit + dash\"\n       env: HOST=i686-pc-linux-gnu PACKAGES=\"g++-multilib bc\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\" USE_SHELL=\"/bin/dash\"\n     - compiler: \": Win64\"\n-      env: HOST=x86_64-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 binutils-mingw-w64-x86-64 mingw-w64-dev wine bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" MAKEJOBS=\"-j2\"\n+      env: HOST=x86_64-w64-mingw32 PPA=\"ppa:ubuntu-wine/ppa\" PACKAGES=\"nsis gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 binutils-mingw-w64-x86-64 mingw-w64-dev wine1.7 bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" MAKEJOBS=\"-j2\"\n     - compiler: \": bitcoind\"\n       env: HOST=x86_64-unknown-linux-gnu PACKAGES=\"bc\" DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports CPPFLAGS=-DDEBUG_LOCKORDER\"\n     - compiler: \": No wallet\"\n@@ -45,6 +45,7 @@ matrix:\n   exclude:\n     - compiler: gcc\n install:\n+    - if [ -n \"$PPA\" ]; then travis_retry sudo add-apt-repository \"$PPA\" -y; fi\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get update; fi\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get install --no-install-recommends --no-upgrade -qq $PACKAGES; fi\n before_script:"
      }
    ]
  },
  {
    "sha": "51fcfc022ce29aa8575d361497bfe458c973b1c5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MWZjZmMwMjJjZTI5YWE4NTc1ZDM2MTQ5N2JmZTQ1OGM5NzNiMWM1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-23T06:53:50Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-02T16:38:41Z"
      },
      "message": "doc: remove documentation for rpcssl",
      "tree": {
        "sha": "bd0484ff6573662eca5f557d06e4a25695e41cc7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd0484ff6573662eca5f557d06e4a25695e41cc7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/51fcfc022ce29aa8575d361497bfe458c973b1c5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51fcfc022ce29aa8575d361497bfe458c973b1c5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/51fcfc022ce29aa8575d361497bfe458c973b1c5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51fcfc022ce29aa8575d361497bfe458c973b1c5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3932ff50c563df19c14e9987f2297d9f99a299ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3932ff50c563df19c14e9987f2297d9f99a299ac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3932ff50c563df19c14e9987f2297d9f99a299ac"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 1,
      "deletions": 49
    },
    "files": [
      {
        "sha": "1338d2f2b5c3b5dc48a36f93c5afbac330b9a065",
        "filename": "contrib/bitcoind.bash-completion",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51fcfc022ce29aa8575d361497bfe458c973b1c5/contrib/bitcoind.bash-completion",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51fcfc022ce29aa8575d361497bfe458c973b1c5/contrib/bitcoind.bash-completion",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/bitcoind.bash-completion?ref=51fcfc022ce29aa8575d361497bfe458c973b1c5",
        "patch": "@@ -96,7 +96,7 @@ _bitcoind() {\n     esac\n \n     case \"$cur\" in\n-        -conf=*|-pid=*|-loadblock=*|-wallet=*|-rpcsslcertificatechainfile=*|-rpcsslprivatekeyfile=*)\n+        -conf=*|-pid=*|-loadblock=*|-wallet=*)\n             cur=\"${cur#*=}\"\n             _filedir\n             return 0"
      },
      {
        "sha": "62ffd7123a666eaeb140a1ec2846a0e6a3a91ad8",
        "filename": "contrib/debian/examples/bitcoin.conf",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51fcfc022ce29aa8575d361497bfe458c973b1c5/contrib/debian/examples/bitcoin.conf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51fcfc022ce29aa8575d361497bfe458c973b1c5/contrib/debian/examples/bitcoin.conf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/examples/bitcoin.conf?ref=51fcfc022ce29aa8575d361497bfe458c973b1c5",
        "patch": "@@ -95,15 +95,6 @@\n # running on another host using this option:\n #rpcconnect=127.0.0.1\n \n-# Use Secure Sockets Layer (also known as TLS or HTTPS) to communicate\n-# with Bitcoin -server or bitcoind\n-#rpcssl=1\n-\n-# OpenSSL settings used when rpcssl=1\n-#rpcsslciphers=TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!AH:!3DES:@STRENGTH\n-#rpcsslcertificatechainfile=server.cert\n-#rpcsslprivatekeyfile=server.pem\n-\n # Transaction Fee Changes in 0.10.0\n \n # Send transactions as zero-fee transactions if possible (default: 0)"
      },
      {
        "sha": "154b45873940c9d23b8d1fe96d516ee7b5bdf7f0",
        "filename": "contrib/debian/manpages/bitcoin-cli.1",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51fcfc022ce29aa8575d361497bfe458c973b1c5/contrib/debian/manpages/bitcoin-cli.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51fcfc022ce29aa8575d361497bfe458c973b1c5/contrib/debian/manpages/bitcoin-cli.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/manpages/bitcoin-cli.1?ref=51fcfc022ce29aa8575d361497bfe458c973b1c5",
        "patch": "@@ -36,9 +36,6 @@ Listen for JSON\\-RPC connections on <port> (default: 8332 or testnet: 18332).\n .TP\n \\fB\\-rpcconnect=\\fR<ip>\n Send commands to node running on <ip> (default: 127.0.0.1).\n-.TP\n-\\fB\\-rpcssl\\fR=\\fI1\\fR\n-Use OpenSSL (https) for JSON\\-RPC connections (see the Bitcoin Wiki for SSL setup instructions).\n \n .SH \"SEE ALSO\"\n \\fBbitcoind\\fP, \\fBbitcoin.conf\\fP"
      },
      {
        "sha": "05eadc94cdd441d5c3c6e32137884d43e506b4fb",
        "filename": "contrib/debian/manpages/bitcoin-qt.1",
        "status": "modified",
        "additions": 0,
        "deletions": 12,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51fcfc022ce29aa8575d361497bfe458c973b1c5/contrib/debian/manpages/bitcoin-qt.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51fcfc022ce29aa8575d361497bfe458c973b1c5/contrib/debian/manpages/bitcoin-qt.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/manpages/bitcoin-qt.1?ref=51fcfc022ce29aa8575d361497bfe458c973b1c5",
        "patch": "@@ -178,18 +178,6 @@ Set maximum block size in bytes (default: 250000)\n .HP\n \\fB\\-blockprioritysize=\\fR<n> Set maximum size of high\\-priority/low\\-fee transactions in bytes (default: 27000)\n .PP\n-SSL options: (see the Bitcoin Wiki for SSL setup instructions)\n-.TP\n-\\fB\\-rpcssl\\fR\n-Use OpenSSL (https) for JSON\\-RPC connections\n-.TP\n-\\fB\\-rpcsslcertificatechainfile=\\fR<file.cert>\n-Server certificate file (default: server.cert)\n-.TP\n-\\fB\\-rpcsslprivatekeyfile=\\fR<file.pem>\n-Server private key (default: server.pem)\n-.TP\n-\\fB\\-rpcsslciphers=\\fR<ciphers>\n Acceptable ciphers (default: TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!AH:!3DES:@STRENGTH)\n .SS \"UI options:\"\n .TP"
      },
      {
        "sha": "0cf4d991e34c90bf2d38e3fcb982c89cfee6aed6",
        "filename": "contrib/debian/manpages/bitcoin.conf.5",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51fcfc022ce29aa8575d361497bfe458c973b1c5/contrib/debian/manpages/bitcoin.conf.5",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51fcfc022ce29aa8575d361497bfe458c973b1c5/contrib/debian/manpages/bitcoin.conf.5",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/manpages/bitcoin.conf.5?ref=51fcfc022ce29aa8575d361497bfe458c973b1c5",
        "patch": "@@ -46,16 +46,6 @@ Listen for RPC connections on this TCP port.\n \\fBrpcconnect=\\fR\\fI'127.0.0.1'\\fR\n You can use *bitcoin* or *bitcoind(1)* to send commands to *bitcoin*/*bitcoind(1)* running on another host using this option.\n .TP\n-\\fBrpcssl=\\fR\\fI'1'\\fR\n-Use Secure Sockets Layer (also known as TLS or HTTPS) to communicate with *bitcoin* '\\-server' or *bitcoind(1)*. Example of OpenSSL settings used when *rpcssl*='1':\n-.TP\n-\\fB\\-rpcsslciphers=\\fR<ciphers>\n-Acceptable ciphers (default: TLSv1+HIGH:\\:!SSLv2:\\:!aNULL:\\:!eNULL:\\:!AH:\\:!3DES:\\:@STRENGTH)\n-.TP\n-\\fBrpcsslcertificatechainfile=\\fR\\fI'server.cert'\\fR\n-.TP\n-\\fBrpcsslprivatekeyfile=\\fR\\fI'server.pem'\\fR\n-.TP\n .SH MISCELLANEOUS OPTIONS\n .TP\n \\fBgen=\\fR[\\fI'0'\\fR|\\fI'1'\\fR]"
      },
      {
        "sha": "5b0f2921aa415b04663e472162bf95458d308e75",
        "filename": "contrib/debian/manpages/bitcoind.1",
        "status": "modified",
        "additions": 0,
        "deletions": 14,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51fcfc022ce29aa8575d361497bfe458c973b1c5/contrib/debian/manpages/bitcoind.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51fcfc022ce29aa8575d361497bfe458c973b1c5/contrib/debian/manpages/bitcoind.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/manpages/bitcoind.1?ref=51fcfc022ce29aa8575d361497bfe458c973b1c5",
        "patch": "@@ -62,20 +62,6 @@ Allow JSON\\-RPC connections from specified IP address\n .TP\n \\fB\\-rpcconnect=\\fR<ip>\n Send commands to node running on <ip>\n-.PP\n-SSL options: (see the Bitcoin Wiki for SSL setup instructions)\n-.TP\n-\\fB\\-rpcssl\\fR=\\fI1\\fR\n-Use OpenSSL (https) for JSON\\-RPC connections\n-.TP\n-\\fB\\-rpcsslcertificatchainfile=\\fR<file.cert>\n-Server certificate file (default: server.cert)\n-.TP\n-\\fB\\-rpcsslprivatekeyfile=\\fR<file.pem>\n-Server private key (default: server.pem)\n-.TP\n-\\fB\\-rpcsslciphers=\\fR<ciphers>\n-Acceptable ciphers (default: TLSv1+HIGH:\\:!SSLv2:\\:!aNULL:\\:!eNULL:\\:!AH:\\:!3DES:\\:@STRENGTH)\n .TP\n \\-?\n This help message"
      }
    ]
  },
  {
    "sha": "8f9301cdaae3682a650e42dfee6c7013b9703ff0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZjkzMDFjZGFhZTM2ODJhNjUwZTQyZGZlZTZjNzAxM2I5NzAzZmYw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-23T06:54:27Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-02T16:38:41Z"
      },
      "message": "qa: Remove -rpckeepalive tests from httpbasics\n\nThis option was a temporary workaround, and is no longer necessary\nwith the new web server.",
      "tree": {
        "sha": "a9961561919e825df38b379745cc707b066e1fc3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a9961561919e825df38b379745cc707b066e1fc3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8f9301cdaae3682a650e42dfee6c7013b9703ff0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f9301cdaae3682a650e42dfee6c7013b9703ff0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8f9301cdaae3682a650e42dfee6c7013b9703ff0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f9301cdaae3682a650e42dfee6c7013b9703ff0/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "51fcfc022ce29aa8575d361497bfe458c973b1c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51fcfc022ce29aa8575d361497bfe458c973b1c5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/51fcfc022ce29aa8575d361497bfe458c973b1c5"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 2,
      "deletions": 3
    },
    "files": [
      {
        "sha": "b66533543d755b37c4cc10e5d580686c220fc918",
        "filename": "qa/rpc-tests/httpbasics.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f9301cdaae3682a650e42dfee6c7013b9703ff0/qa/rpc-tests/httpbasics.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f9301cdaae3682a650e42dfee6c7013b9703ff0/qa/rpc-tests/httpbasics.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/httpbasics.py?ref=8f9301cdaae3682a650e42dfee6c7013b9703ff0",
        "patch": "@@ -22,7 +22,7 @@\n \n class HTTPBasicsTest (BitcoinTestFramework):\n     def setup_nodes(self):\n-        return start_nodes(4, self.options.tmpdir, extra_args=[['-rpckeepalive=1'], ['-rpckeepalive=0'], [], []])\n+        return start_nodes(4, self.options.tmpdir)\n \n     def run_test(self):\n \n@@ -84,9 +84,8 @@ def run_test(self):\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read();\n         assert_equal('\"error\":null' in out1, True)\n-        assert_equal(conn.sock!=None, False) #connection must be closed because keep-alive was set to false\n \n-        #node2 (third node) is running with standard keep-alive parameters which means keep-alive is off\n+        #node2 (third node) is running with standard keep-alive parameters which means keep-alive is on\n         urlNode2 = urlparse.urlparse(self.nodes[2].url)\n         authpair = urlNode2.username + ':' + urlNode2.password\n         headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpair)}"
      }
    ]
  },
  {
    "sha": "6a21dd598c01deb939681e4594bfd7b75ecb7ca3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YTIxZGQ1OThjMDFkZWI5Mzk2ODFlNDU5NGJmZDdiNzVlY2I3Y2Ez",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-23T06:55:37Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-02T16:38:41Z"
      },
      "message": "Remove rpc_boostasiotocnetaddr test\n\nDropping all use of boost::asio.",
      "tree": {
        "sha": "259dc0591186c3189c4930d8d8cdaffba3a12da0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/259dc0591186c3189c4930d8d8cdaffba3a12da0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6a21dd598c01deb939681e4594bfd7b75ecb7ca3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a21dd598c01deb939681e4594bfd7b75ecb7ca3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6a21dd598c01deb939681e4594bfd7b75ecb7ca3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a21dd598c01deb939681e4594bfd7b75ecb7ca3/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8f9301cdaae3682a650e42dfee6c7013b9703ff0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f9301cdaae3682a650e42dfee6c7013b9703ff0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8f9301cdaae3682a650e42dfee6c7013b9703ff0"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 0,
      "deletions": 15
    },
    "files": [
      {
        "sha": "c0476db99b25983bfc02bd64e6ac7966e5944e90",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 15,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a21dd598c01deb939681e4594bfd7b75ecb7ca3/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a21dd598c01deb939681e4594bfd7b75ecb7ca3/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=6a21dd598c01deb939681e4594bfd7b75ecb7ca3",
        "patch": "@@ -224,21 +224,6 @@ BOOST_AUTO_TEST_CASE(json_parse_errors)\n     BOOST_CHECK_THROW(ParseNonRFCJSONValue(\"3J98t1WpEZ73CNmQviecrnyiWrnqRhWNL\"), std::runtime_error);\n }\n \n-BOOST_AUTO_TEST_CASE(rpc_boostasiotocnetaddr)\n-{\n-    // Check IPv4 addresses\n-    BOOST_CHECK_EQUAL(BoostAsioToCNetAddr(boost::asio::ip::address::from_string(\"1.2.3.4\")).ToString(), \"1.2.3.4\");\n-    BOOST_CHECK_EQUAL(BoostAsioToCNetAddr(boost::asio::ip::address::from_string(\"127.0.0.1\")).ToString(), \"127.0.0.1\");\n-    // Check IPv6 addresses\n-    BOOST_CHECK_EQUAL(BoostAsioToCNetAddr(boost::asio::ip::address::from_string(\"::1\")).ToString(), \"::1\");\n-    BOOST_CHECK_EQUAL(BoostAsioToCNetAddr(boost::asio::ip::address::from_string(\"123:4567:89ab:cdef:123:4567:89ab:cdef\")).ToString(),\n-                                         \"123:4567:89ab:cdef:123:4567:89ab:cdef\");\n-    // v4 compatible must be interpreted as IPv4\n-    BOOST_CHECK_EQUAL(BoostAsioToCNetAddr(boost::asio::ip::address::from_string(\"::0:127.0.0.1\")).ToString(), \"127.0.0.1\");\n-    // v4 mapped must be interpreted as IPv4\n-    BOOST_CHECK_EQUAL(BoostAsioToCNetAddr(boost::asio::ip::address::from_string(\"::ffff:127.0.0.1\")).ToString(), \"127.0.0.1\");\n-}\n-\n BOOST_AUTO_TEST_CASE(rpc_ban)\n {\n     BOOST_CHECK_NO_THROW(CallRPC(string(\"clearbanned\")));"
      }
    ]
  },
  {
    "sha": "a9af234c1f22d3e8b49c6d8abb89cc8b8c009a30",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOWFmMjM0YzFmMjJkM2U4YjQ5YzZkOGFiYjg5Y2M4YjhjMDA5YTMw",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-20T03:47:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-02T16:38:41Z"
      },
      "message": "libevent: add depends",
      "tree": {
        "sha": "c47f2eade458b3206c24b6eeef7aadd9381f0e63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c47f2eade458b3206c24b6eeef7aadd9381f0e63"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a9af234c1f22d3e8b49c6d8abb89cc8b8c009a30",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9af234c1f22d3e8b49c6d8abb89cc8b8c009a30",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a9af234c1f22d3e8b49c6d8abb89cc8b8c009a30",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9af234c1f22d3e8b49c6d8abb89cc8b8c009a30/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6a21dd598c01deb939681e4594bfd7b75ecb7ca3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a21dd598c01deb939681e4594bfd7b75ecb7ca3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6a21dd598c01deb939681e4594bfd7b75ecb7ca3"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 27,
      "deletions": 1
    },
    "files": [
      {
        "sha": "3388a28437312ff6610096639104d91234b9298b",
        "filename": "depends/packages/libevent.mk",
        "status": "added",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9af234c1f22d3e8b49c6d8abb89cc8b8c009a30/depends/packages/libevent.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9af234c1f22d3e8b49c6d8abb89cc8b8c009a30/depends/packages/libevent.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/libevent.mk?ref=a9af234c1f22d3e8b49c6d8abb89cc8b8c009a30",
        "patch": "@@ -0,0 +1,26 @@\n+package=libevent\n+$(package)_version=2.0.22\n+$(package)_download_path=https://github.com/libevent/libevent/releases/download/release-2.0.22-stable\n+$(package)_file_name=$(package)-$($(package)_version)-stable.tar.gz\n+$(package)_sha256_hash=71c2c49f0adadacfdbe6332a372c38cf9c8b7895bb73dabeaa53cdcc1d4e1fa3\n+\n+define $(package)_set_vars\n+  $(package)_config_opts=--disable-shared --disable-openssl --disable-libevent-regress\n+  $(package)_config_opts_release=--disable-debug-mode\n+  $(package)_config_opts_linux=--with-pic\n+endef\n+\n+define $(package)_config_cmds\n+  $($(package)_autoconf)\n+endef\n+\n+define $(package)_build_cmds\n+  $(MAKE)\n+endef\n+\n+define $(package)_stage_cmds\n+  $(MAKE) DESTDIR=$($(package)_staging_dir) install\n+endef\n+\n+define $(package)_postprocess_cmds\n+endef"
      },
      {
        "sha": "a0d377bb43658efc700b9ea2ecd19aa48b74beed",
        "filename": "depends/packages/packages.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9af234c1f22d3e8b49c6d8abb89cc8b8c009a30/depends/packages/packages.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9af234c1f22d3e8b49c6d8abb89cc8b8c009a30/depends/packages/packages.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/packages.mk?ref=a9af234c1f22d3e8b49c6d8abb89cc8b8c009a30",
        "patch": "@@ -1,4 +1,4 @@\n-packages:=boost openssl\n+packages:=boost openssl libevent\n native_packages := native_ccache native_comparisontool\n \n qt_native_packages = native_protobuf"
      }
    ]
  },
  {
    "sha": "3140ef92493169f1f993312b4add1fb87943c7b4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMTQwZWY5MjQ5MzE2OWYxZjk5MzMxMmI0YWRkMWZiODc5NDNjN2I0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-20T05:04:59Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-02T16:38:41Z"
      },
      "message": "build: build-system changes for libevent",
      "tree": {
        "sha": "177136285a73e36db5a57425a01890cb1faef4c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/177136285a73e36db5a57425a01890cb1faef4c8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3140ef92493169f1f993312b4add1fb87943c7b4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3140ef92493169f1f993312b4add1fb87943c7b4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3140ef92493169f1f993312b4add1fb87943c7b4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3140ef92493169f1f993312b4add1fb87943c7b4/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a9af234c1f22d3e8b49c6d8abb89cc8b8c009a30",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9af234c1f22d3e8b49c6d8abb89cc8b8c009a30",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a9af234c1f22d3e8b49c6d8abb89cc8b8c009a30"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 22,
      "deletions": 6
    },
    "files": [
      {
        "sha": "07ee28f84e69ccd5cc41afc9aaeb7360dbb81bb8",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3140ef92493169f1f993312b4add1fb87943c7b4/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3140ef92493169f1f993312b4add1fb87943c7b4/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=3140ef92493169f1f993312b4add1fb87943c7b4",
        "patch": "@@ -664,6 +664,12 @@ if test x$use_pkgconfig = xyes; then\n       if test x$use_qr != xno; then\n         BITCOIN_QT_CHECK([PKG_CHECK_MODULES([QR], [libqrencode], [have_qrencode=yes], [have_qrencode=no])])\n       fi\n+      if test x$build_bitcoin_utils$build_bitcoind$bitcoin_enable_qt$use_tests != xnononono; then\n+        PKG_CHECK_MODULES([EVENT], [libevent],, [AC_MSG_ERROR(libevent not found.)])\n+        if test x$TARGET_OS != xwindows; then\n+          PKG_CHECK_MODULES([EVENT_PTHREADS], [libevent_pthreads],, [AC_MSG_ERROR(libevent_pthreads not found.)])\n+        fi\n+      fi\n     ]\n   )\n else\n@@ -673,6 +679,14 @@ else\n   AC_CHECK_HEADER([openssl/ssl.h],, AC_MSG_ERROR(libssl headers missing),)\n   AC_CHECK_LIB([ssl],         [main],SSL_LIBS=-lssl, AC_MSG_ERROR(libssl missing))\n \n+  if test x$build_bitcoin_utils$build_bitcoind$bitcoin_enable_qt$use_tests != xnononono; then\n+    AC_CHECK_HEADER([event2/event.h],, AC_MSG_ERROR(libevent headers missing),)\n+    AC_CHECK_LIB([event],[main],EVENT_LIBS=-levent,AC_MSG_ERROR(libevent missing))\n+    if test x$TARGET_OS != xwindows; then\n+      AC_CHECK_LIB([event_pthreads],[main],EVENT_PTHREADS_LIBS=-levent_pthreads,AC_MSG_ERROR(libevent_pthreads missing))\n+    fi\n+  fi\n+\n   BITCOIN_QT_CHECK(AC_CHECK_LIB([protobuf] ,[main],[PROTOBUF_LIBS=-lprotobuf], BITCOIN_QT_FAIL(libprotobuf not found)))\n   if test x$use_qr != xno; then\n     BITCOIN_QT_CHECK([AC_CHECK_LIB([qrencode], [main],[QR_LIBS=-lqrencode], [have_qrencode=no])])"
      },
      {
        "sha": "4b646f01839fe0921025569f259af556a51dc6b4",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3140ef92493169f1f993312b4add1fb87943c7b4/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3140ef92493169f1f993312b4add1fb87943c7b4/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=3140ef92493169f1f993312b4add1fb87943c7b4",
        "patch": "@@ -163,7 +163,7 @@ obj/build.h: FORCE\n libbitcoin_util_a-clientversion.$(OBJEXT): obj/build.h\n \n # server: shared between bitcoind and bitcoin-qt\n-libbitcoin_server_a_CPPFLAGS = $(BITCOIN_INCLUDES) $(MINIUPNPC_CPPFLAGS)\n+libbitcoin_server_a_CPPFLAGS = $(BITCOIN_INCLUDES) $(MINIUPNPC_CPPFLAGS) $(EVENT_CFLAGS) $(EVENT_PTHREADS_CFLAGS)\n libbitcoin_server_a_SOURCES = \\\n   addrman.cpp \\\n   alert.cpp \\\n@@ -319,12 +319,12 @@ if ENABLE_WALLET\n bitcoind_LDADD += libbitcoin_wallet.a\n endif\n \n-bitcoind_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS)\n+bitcoind_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)\n #\n \n # bitcoin-cli binary #\n bitcoin_cli_SOURCES = bitcoin-cli.cpp\n-bitcoin_cli_CPPFLAGS = $(BITCOIN_INCLUDES)\n+bitcoin_cli_CPPFLAGS = $(BITCOIN_INCLUDES) $(EVENT_CFLAGS)\n bitcoin_cli_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n \n if TARGET_WINDOWS\n@@ -337,7 +337,7 @@ bitcoin_cli_LDADD = \\\n   $(LIBBITCOIN_UTIL) \\\n   $(LIBSECP256K1)\n \n-bitcoin_cli_LDADD += $(BOOST_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS)\n+bitcoin_cli_LDADD += $(BOOST_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(EVENT_LIBS)\n #\n \n # bitcoin-tx binary #"
      },
      {
        "sha": "8d60aca25c531b4068c258cf2574bb7c7d36d7f4",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3140ef92493169f1f993312b4add1fb87943c7b4/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3140ef92493169f1f993312b4add1fb87943c7b4/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=3140ef92493169f1f993312b4add1fb87943c7b4",
        "patch": "@@ -362,7 +362,8 @@ if ENABLE_WALLET\n qt_bitcoin_qt_LDADD += $(LIBBITCOIN_WALLET)\n endif\n qt_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CRYPTO) $(LIBBITCOIN_UNIVALUE) $(LIBLEVELDB) $(LIBMEMENV) \\\n-  $(BOOST_LIBS) $(QT_LIBS) $(QT_DBUS_LIBS) $(QR_LIBS) $(PROTOBUF_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(LIBSECP256K1)\n+  $(BOOST_LIBS) $(QT_LIBS) $(QT_DBUS_LIBS) $(QR_LIBS) $(PROTOBUF_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(LIBSECP256K1) \\\n+  $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)\n qt_bitcoin_qt_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(QT_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n qt_bitcoin_qt_LIBTOOLFLAGS = --tag CXX\n "
      },
      {
        "sha": "4250bb8f3b27b2a49452aa4ea93e3307a9062271",
        "filename": "src/Makefile.qttest.include",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3140ef92493169f1f993312b4add1fb87943c7b4/src/Makefile.qttest.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3140ef92493169f1f993312b4add1fb87943c7b4/src/Makefile.qttest.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qttest.include?ref=3140ef92493169f1f993312b4add1fb87943c7b4",
        "patch": "@@ -32,7 +32,8 @@ qt_test_test_bitcoin_qt_LDADD += $(LIBBITCOIN_WALLET)\n endif\n qt_test_test_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CRYPTO) $(LIBBITCOIN_UNIVALUE) $(LIBLEVELDB) \\\n   $(LIBMEMENV) $(BOOST_LIBS) $(QT_DBUS_LIBS) $(QT_TEST_LIBS) $(QT_LIBS) \\\n-  $(QR_LIBS) $(PROTOBUF_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(LIBSECP256K1)\n+  $(QR_LIBS) $(PROTOBUF_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(LIBSECP256K1) \\\n+  $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)\n qt_test_test_bitcoin_qt_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(QT_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n \n CLEAN_BITCOIN_QT_TEST = $(TEST_QT_MOC_CPP) qt/test/*.gcda qt/test/*.gcno"
      }
    ]
  },
  {
    "sha": "6e996d39da60006c47ea34e183164cbb4acd8af8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZTk5NmQzOWRhNjAwMDZjNDdlYTM0ZTE4MzE2NGNiYjRhY2Q4YWY4",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-20T12:35:13Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-02T16:38:41Z"
      },
      "message": "tests: fix qt payment test\n\nNow that boost no longer automatically initializes openssl, we have to\ndo it ourselves.",
      "tree": {
        "sha": "802baca02102afbda69cd31159fd20fd4a63bc4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/802baca02102afbda69cd31159fd20fd4a63bc4d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6e996d39da60006c47ea34e183164cbb4acd8af8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e996d39da60006c47ea34e183164cbb4acd8af8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6e996d39da60006c47ea34e183164cbb4acd8af8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e996d39da60006c47ea34e183164cbb4acd8af8/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3140ef92493169f1f993312b4add1fb87943c7b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3140ef92493169f1f993312b4add1fb87943c7b4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3140ef92493169f1f993312b4add1fb87943c7b4"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f91de2008c6fc10714904952020569051788be09",
        "filename": "src/qt/test/test_main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e996d39da60006c47ea34e183164cbb4acd8af8/src/qt/test/test_main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e996d39da60006c47ea34e183164cbb4acd8af8/src/qt/test/test_main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/test_main.cpp?ref=6e996d39da60006c47ea34e183164cbb4acd8af8",
        "patch": "@@ -17,6 +17,8 @@\n #include <QObject>\n #include <QTest>\n \n+#include <openssl/ssl.h>\n+\n #if defined(QT_STATICPLUGIN) && QT_VERSION < 0x050000\n #include <QtPlugin>\n Q_IMPORT_PLUGIN(qcncodecs)\n@@ -36,6 +38,8 @@ int main(int argc, char *argv[])\n     QCoreApplication app(argc, argv);\n     app.setApplicationName(\"Bitcoin-Qt-test\");\n \n+    SSL_library_init();\n+\n     URITests test1;\n     if (QTest::qExec(&test1) != 0)\n         fInvalid = true;"
      }
    ]
  },
  {
    "sha": "ee2a42b447eebacc05ec4238d562b04a9a0d8462",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZTJhNDJiNDQ3ZWViYWNjMDVlYzQyMzhkNTYyYjA0YTlhMGQ4NDYy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-27T18:27:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-02T16:38:42Z"
      },
      "message": "tests: GET requests cannot have request body, use POST in rest.py\n\nSending a request body with GET request is not valid in HTTP spec, and\nnot compatible with evhttpd.",
      "tree": {
        "sha": "59becd12662cb2cefb082ad7fb9c559f9225f7be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/59becd12662cb2cefb082ad7fb9c559f9225f7be"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee2a42b447eebacc05ec4238d562b04a9a0d8462",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee2a42b447eebacc05ec4238d562b04a9a0d8462",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ee2a42b447eebacc05ec4238d562b04a9a0d8462",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee2a42b447eebacc05ec4238d562b04a9a0d8462/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6e996d39da60006c47ea34e183164cbb4acd8af8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e996d39da60006c47ea34e183164cbb4acd8af8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6e996d39da60006c47ea34e183164cbb4acd8af8"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 26,
      "deletions": 16
    },
    "files": [
      {
        "sha": "e084ad55abb4b52b96893f6fe7eb942103d9dcb4",
        "filename": "qa/rpc-tests/rest.py",
        "status": "modified",
        "additions": 26,
        "deletions": 16,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee2a42b447eebacc05ec4238d562b04a9a0d8462/qa/rpc-tests/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee2a42b447eebacc05ec4238d562b04a9a0d8462/qa/rpc-tests/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rest.py?ref=ee2a42b447eebacc05ec4238d562b04a9a0d8462",
        "patch": "@@ -32,10 +32,20 @@ def deser_uint256(f):\n         r += t << (i * 32)\n     return r\n \n-#allows simple http get calls with a request body\n-def http_get_call(host, port, path, requestdata = '', response_object = 0):\n+#allows simple http get calls\n+def http_get_call(host, port, path, response_object = 0):\n     conn = httplib.HTTPConnection(host, port)\n-    conn.request('GET', path, requestdata)\n+    conn.request('GET', path)\n+\n+    if response_object:\n+        return conn.getresponse()\n+\n+    return conn.getresponse().read()\n+\n+#allows simple http post calls with a request body\n+def http_post_call(host, port, path, requestdata = '', response_object = 0):\n+    conn = httplib.HTTPConnection(host, port)\n+    conn.request('POST', path, requestdata)\n \n     if response_object:\n         return conn.getresponse()\n@@ -137,7 +147,7 @@ def run_test(self):\n         binaryRequest += binascii.unhexlify(vintx);\n         binaryRequest += pack(\"i\", 0);\n \n-        bin_response = http_get_call(url.hostname, url.port, '/rest/getutxos'+self.FORMAT_SEPARATOR+'bin', binaryRequest)\n+        bin_response = http_post_call(url.hostname, url.port, '/rest/getutxos'+self.FORMAT_SEPARATOR+'bin', binaryRequest)\n         output = StringIO.StringIO()\n         output.write(bin_response)\n         output.seek(0)\n@@ -175,29 +185,29 @@ def run_test(self):\n \n         #do some invalid requests\n         json_request = '{\"checkmempool'\n-        response = http_get_call(url.hostname, url.port, '/rest/getutxos'+self.FORMAT_SEPARATOR+'json', json_request, True)\n+        response = http_post_call(url.hostname, url.port, '/rest/getutxos'+self.FORMAT_SEPARATOR+'json', json_request, True)\n         assert_equal(response.status, 500) #must be a 500 because we send a invalid json request\n \n         json_request = '{\"checkmempool'\n-        response = http_get_call(url.hostname, url.port, '/rest/getutxos'+self.FORMAT_SEPARATOR+'bin', json_request, True)\n+        response = http_post_call(url.hostname, url.port, '/rest/getutxos'+self.FORMAT_SEPARATOR+'bin', json_request, True)\n         assert_equal(response.status, 500) #must be a 500 because we send a invalid bin request\n \n-        response = http_get_call(url.hostname, url.port, '/rest/getutxos/checkmempool'+self.FORMAT_SEPARATOR+'bin', '', True)\n+        response = http_post_call(url.hostname, url.port, '/rest/getutxos/checkmempool'+self.FORMAT_SEPARATOR+'bin', '', True)\n         assert_equal(response.status, 500) #must be a 500 because we send a invalid bin request\n \n         #test limits\n         json_request = '/checkmempool/'\n         for x in range(0, 20):\n             json_request += txid+'-'+str(n)+'/'\n         json_request = json_request.rstrip(\"/\")\n-        response = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json', '', True)\n+        response = http_post_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json', '', True)\n         assert_equal(response.status, 500) #must be a 500 because we exceeding the limits\n \n         json_request = '/checkmempool/'\n         for x in range(0, 15):\n             json_request += txid+'-'+str(n)+'/'\n         json_request = json_request.rstrip(\"/\");\n-        response = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json', '', True)\n+        response = http_post_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json', '', True)\n         assert_equal(response.status, 200) #must be a 500 because we exceeding the limits\n \n         self.nodes[0].generate(1) #generate block to not affect upcoming tests\n@@ -208,27 +218,27 @@ def run_test(self):\n         ################\n \n         # check binary format\n-        response = http_get_call(url.hostname, url.port, '/rest/block/'+bb_hash+self.FORMAT_SEPARATOR+\"bin\", \"\", True)\n+        response = http_get_call(url.hostname, url.port, '/rest/block/'+bb_hash+self.FORMAT_SEPARATOR+\"bin\", True)\n         assert_equal(response.status, 200)\n         assert_greater_than(int(response.getheader('content-length')), 80)\n         response_str = response.read()\n \n         # compare with block header\n-        response_header = http_get_call(url.hostname, url.port, '/rest/headers/1/'+bb_hash+self.FORMAT_SEPARATOR+\"bin\", \"\", True)\n+        response_header = http_get_call(url.hostname, url.port, '/rest/headers/1/'+bb_hash+self.FORMAT_SEPARATOR+\"bin\", True)\n         assert_equal(response_header.status, 200)\n         assert_equal(int(response_header.getheader('content-length')), 80)\n         response_header_str = response_header.read()\n         assert_equal(response_str[0:80], response_header_str)\n \n         # check block hex format\n-        response_hex = http_get_call(url.hostname, url.port, '/rest/block/'+bb_hash+self.FORMAT_SEPARATOR+\"hex\", \"\", True)\n+        response_hex = http_get_call(url.hostname, url.port, '/rest/block/'+bb_hash+self.FORMAT_SEPARATOR+\"hex\", True)\n         assert_equal(response_hex.status, 200)\n         assert_greater_than(int(response_hex.getheader('content-length')), 160)\n         response_hex_str = response_hex.read()\n         assert_equal(response_str.encode(\"hex\")[0:160], response_hex_str[0:160])\n \n         # compare with hex block header\n-        response_header_hex = http_get_call(url.hostname, url.port, '/rest/headers/1/'+bb_hash+self.FORMAT_SEPARATOR+\"hex\", \"\", True)\n+        response_header_hex = http_get_call(url.hostname, url.port, '/rest/headers/1/'+bb_hash+self.FORMAT_SEPARATOR+\"hex\", True)\n         assert_equal(response_header_hex.status, 200)\n         assert_greater_than(int(response_header_hex.getheader('content-length')), 160)\n         response_header_hex_str = response_header_hex.read()\n@@ -241,7 +251,7 @@ def run_test(self):\n         assert_equal(block_json_obj['hash'], bb_hash)\n \n         # compare with json block header\n-        response_header_json = http_get_call(url.hostname, url.port, '/rest/headers/1/'+bb_hash+self.FORMAT_SEPARATOR+\"json\", \"\", True)\n+        response_header_json = http_get_call(url.hostname, url.port, '/rest/headers/1/'+bb_hash+self.FORMAT_SEPARATOR+\"json\", True)\n         assert_equal(response_header_json.status, 200)\n         response_header_json_str = response_header_json.read()\n         json_obj = json.loads(response_header_json_str, parse_float=decimal.Decimal)\n@@ -265,7 +275,7 @@ def run_test(self):\n         #see if we can get 5 headers in one response\n         self.nodes[1].generate(5)\n         self.sync_all()\n-        response_header_json = http_get_call(url.hostname, url.port, '/rest/headers/5/'+bb_hash+self.FORMAT_SEPARATOR+\"json\", \"\", True)\n+        response_header_json = http_get_call(url.hostname, url.port, '/rest/headers/5/'+bb_hash+self.FORMAT_SEPARATOR+\"json\", True)\n         assert_equal(response_header_json.status, 200)\n         response_header_json_str = response_header_json.read()\n         json_obj = json.loads(response_header_json_str)\n@@ -278,7 +288,7 @@ def run_test(self):\n         assert_equal(json_obj['txid'], tx_hash)\n \n         # check hex format response\n-        hex_string = http_get_call(url.hostname, url.port, '/rest/tx/'+tx_hash+self.FORMAT_SEPARATOR+\"hex\", \"\", True)\n+        hex_string = http_get_call(url.hostname, url.port, '/rest/tx/'+tx_hash+self.FORMAT_SEPARATOR+\"hex\", True)\n         assert_equal(hex_string.status, 200)\n         assert_greater_than(int(response.getheader('content-length')), 10)\n "
      }
    ]
  },
  {
    "sha": "f4b9132d0c7f6395c3a90953ff78e8b78fcccdef",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNGI5MTMyZDBjN2Y2Mzk1YzNhOTA5NTNmZjc4ZThiNzhmY2NjZGVm",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2015-09-02T15:49:26Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2015-09-03T07:51:37Z"
      },
      "message": "Update gitian build guide for Debian 8.1\n\nSigned-off-by: fanquake <fanquake@gmail.com>",
      "tree": {
        "sha": "fd5274ceaadf3f980597df08a85926b03af16162",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fd5274ceaadf3f980597df08a85926b03af16162"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "10c0e52b68c77d6cf1ba4aeb05618229bba3cd3d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10c0e52b68c77d6cf1ba4aeb05618229bba3cd3d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/10c0e52b68c77d6cf1ba4aeb05618229bba3cd3d"
      }
    ],
    "stats": {
      "total": 139,
      "additions": 81,
      "deletions": 58
    },
    "files": [
      {
        "sha": "169727adc0fb885bb008b77ecdbd49a52f00561d",
        "filename": "doc/gitian-building.md",
        "status": "modified",
        "additions": 81,
        "deletions": 58,
        "changes": 139,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building.md?ref=f4b9132d0c7f6395c3a90953ff78e8b78fcccdef",
        "patch": "@@ -5,16 +5,16 @@ Gitian building\n \n Gitian is the deterministic build process that is used to build the Bitcoin\n Core executables. It provides a way to be reasonably sure that the\n-executables are really built from source on GitHub. It also makes sure that\n+executables are really built from the source on GitHub. It also makes sure that\n the same, tested dependencies are used and statically built into the executable.\n \n Multiple developers build the source code by following a specific descriptor\n (\"recipe\"), cryptographically sign the result, and upload the resulting signature.\n These results are compared and only if they match, the build is accepted and uploaded\n to bitcoin.org.\n \n-More independent gitian builders are needed, which is why I wrote this\n-guide. It is preferred to follow these steps yourself instead of using someone else's\n+More independent gitian builders are needed, which is why this guide exists. \n+It is preferred you follow these steps yourself instead of using someone else's\n VM image to avoid 'contaminating' the build.\n \n Table of Contents\n@@ -39,46 +39,46 @@ This guide explains how to set up the environment, and how to start the builds.\n \n Debian Linux was chosen as the host distribution because it has a lightweight install (in contrast to Ubuntu) and is readily available.\n Any kind of virtualization can be used, for example:\n-- [VirtualBox](https://www.virtualbox.org/), covered by this guide\n+- [VirtualBox](https://www.virtualbox.org/) (covered by this guide)\n - [KVM](http://www.linux-kvm.org/page/Main_Page)\n - [LXC](https://linuxcontainers.org/), see also [Gitian host docker container](https://github.com/gdm85/tenku/tree/master/docker/gitian-bitcoin-host/README.md).\n \n-You can also install on actual hardware instead of using virtualization.\n+You can also install gitian on actual hardware instead of using virtualization.\n \n Create a new VirtualBox VM\n ---------------------------\n In the VirtualBox GUI click \"Create\" and choose the following parameters in the wizard:\n \n-![](gitian-building/create_vm_page1.png)\n+![](gitian-building/create_new_vm.png)\n \n-- Type: Linux, Debian (64 bit)\n+- Type: Linux, Debian (64-bit)\n \n ![](gitian-building/create_vm_memsize.png)\n \n-- Memory Size: at least 1024MB, anything lower will really slow the build down\n+- Memory Size: at least 1024MB, anything less will really slow down the build.\n \n-![](gitian-building/create_vm_hard_drive.png)\n+![](gitian-building/create_vm_hard_disk.png)\n \n-- Hard Drive: Create a virtual hard drive now\n+- Hard Disk: Create a virtual hard disk now\n     \n-![](gitian-building/create_vm_hard_drive_file_type.png)\n+![](gitian-building/create_vm_hard_disk_file_type.png)\n \n-- Hard Drive file type: Use the default, VDI (VirtualBox Disk Image) \n+- Hard Disk file type: Use the default, VDI (VirtualBox Disk Image) \n \n-![](gitian-building/create_vm_storage_physical_hard_drive.png)\n+![](gitian-building/create_vm_storage_physical_hard_disk.png)\n     \n-- Storage on Physical hard drive: Dynamically Allocated \n+- Storage on physical hard disk: Dynamically Allocated \n     \n ![](gitian-building/create_vm_file_location_size.png)\n \n-- Disk size: at least 40GB; as low as 20GB *may* be possible, but better to err on the safe side \n-- Push the `Create` button\n+- File location and size: at least 40GB; as low as 20GB *may* be possible, but better to err on the safe side \n+- Click `Create`\n \n-Get the [Debian 7.8 net installer](http://cdimage.debian.org/cdimage/archive/7.8.0/amd64/iso-cd/debian-7.8.0-amd64-netinst.iso) (a more recent minor version should also work, see also [Debian Network installation](https://www.debian.org/CD/netinst/)).\n+Get the [Debian 8.1 net installer](http://cdimage.debian.org/debian-cd/8.1.0/amd64/iso-cd/debian-8.1.0-amd64-netinst.iso) (a more recent minor version should also work, see also [Debian Network installation](https://www.debian.org/CD/netinst/)).\n This DVD image can be validated using a SHA256 hashing tool, for example on\n Unixy OSes by entering the following in a terminal:\n \n-    echo \"e39c36d6adc0fd86c6edb0e03e22919086c883b37ca194d063b8e3e8f6ff6a3a  debian-7.8.0-amd64-netinst.iso\" | sha256sum -c\n+    echo \"5d0a1f804d73aee73eee7efbb38456390558094fd19894a573f1514ca44347e0  debian-8.1.0-amd64-netinst.iso\" | sha256sum -c\n     # (must return OK)\n \n After creating the VM, we need to configure it. \n@@ -115,8 +115,9 @@ This section will explain how to install Debian on the newly created VM.\n \n ![](gitian-building/debian_install_1_boot_menu.png)\n \n-**Note**: Navigation in the Debian installer: To keep a setting at the default\n-and proceed, just press `Enter`. To select a different button, press `Tab`.\n+**Note**: Navigating in the Debian installer: \n+To keep a setting at the default and proceed, just press `Enter`. \n+To select a different button, press `Tab`.\n \n - Choose locale and keyboard settings (doesn't matter, you can just go with the defaults or select your own information)\n \n@@ -126,7 +127,7 @@ and proceed, just press `Enter`. To select a different button, press `Tab`.\n \n - The VM will detect network settings using DHCP, this should all proceed automatically\n - Configure the network: \n-  - System name `debian`.\n+  - Hostname `debian`.\n   - Leave domain name empty.\n \n ![](gitian-building/debian_install_5_configure_the_network.png)\n@@ -136,6 +137,7 @@ and proceed, just press `Enter`. To select a different button, press `Tab`.\n ![](gitian-building/debian_install_6a_set_up_root_password.png)\n \n - Name the new user `debian` (the full name doesn't matter, you can leave it empty) \n+- Set the account username as `debian`\n \n ![](gitian-building/debian_install_7_set_up_user_fullname.png)\n ![](gitian-building/debian_install_8_set_up_username.png)\n@@ -158,65 +160,89 @@ and proceed, just press `Enter`. To select a different button, press `Tab`.\n \n ![](gitian-building/debian_install_12_choose_disk.png)\n \n-  - Partitioning scheme: All files in one partition \n-  \n-![](gitian-building/debian_install_13_partition_scheme.png)\n-\n   - Finish partitioning and write changes to disk -> *Yes* (`Tab`, `Enter` to select the `Yes` button)\n \n-![](gitian-building/debian_install_14_finish.png) \n+![](gitian-building/debian_install_14_finish.png)\n ![](gitian-building/debian_install_15_write_changes.png)\n \n - The base system will be installed, this will take a minute or so\n - Choose a mirror (any will do) \n \n ![](gitian-building/debian_install_16_choose_a_mirror.png)\n \n-- Enter proxy information (unless you are on an intranet, you can leave this empty)\n+- Enter proxy information (unless you are on an intranet, leave this empty)\n \n ![](gitian-building/debian_install_18_proxy_settings.png)\n \n - Wait a bit while 'Select and install software' runs\n - Participate in popularity contest -> *No*\n-- Choose software to install. We need just the base system. \n+- Choose software to install. We need just the base system.\n+- Make sure only 'SSH server' and 'Standard System Utilities' are checked\n+- Uncheck 'Debian Desktop Environment' and 'Print Server'\n \n ![](gitian-building/debian_install_19_software_selection.png)\n \n-- Make sure only 'SSH server' and 'Standard System Utilities' are checked\n-- Uncheck 'Debian Desktop Environment' and 'Print Server'\n+- Install the GRUB boot loader to the master boot record? -> Yes\n \n ![](gitian-building/debian_install_20_install_grub.png)\n \n-- Install the GRUB boot loader to the master boot record? -> Yes \n+- Device for boot loader installation -> ata-VBOX_HARDDISK\n \n-![](gitian-building/debian_install_21_finish_installation.png)\n+![](gitian-building/debian_install_21_install_grub_bootloader.png)\n \n - Installation Complete -> *Continue*\n - After installation, the VM will reboot and you will have a working Debian VM. Congratulations!\n \n+![](gitian-building/debian_install_22_finish_installation.png)\n+\n+\n+After Installation\n+-------------------\n+The next step in the guide involves logging in as root via SSH.\n+SSH login for root users is disabled by default, so we'll enable that now.\n+\n+Login to the VM using username `root` and the root password you choose earlier.\n+You'll be presented with a screen similar to this.\n+\n+![](gitian-building/debian_root_login.png)\n+\n+Type:\n+\n+```\n+sed -i 's/^PermitRootLogin.*/PermitRootLogin yes/' /etc/ssh/sshd_config\n+```\n+and press enter. Then,\n+```\n+/etc/init.d/ssh restart\n+```\n+and enter to restart SSH. Logout by typing 'logout' and pressing 'enter'.\n+\n Connecting to the VM\n ----------------------\n \n After the VM has booted you can connect to it using SSH, and files can be copied from and to the VM using a SFTP utility.\n Connect to `localhost`, port `22222` (or the port configured when installing the VM).\n-On Windows you can use putty[1] and WinSCP[2].\n+On Windows you can use [putty](http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html) and [WinSCP](http://winscp.net/eng/index.php).\n \n-For example to connect as `root` from a Linux command prompt use\n+For example, to connect as `root` from a Linux command prompt use\n \n     $ ssh root@localhost -p 22222\n     The authenticity of host '[localhost]:22222 ([127.0.0.1]:22222)' can't be established.\n-    ECDSA key fingerprint is 8e:71:f9:5b:62:46:de:44:01:da:fb:5f:34:b5:f2:18.\n+    RSA key fingerprint is ae:f5:c8:9f:17:c6:c7:1b:c2:1b:12:31:1d:bb:d0:c7.\n     Are you sure you want to continue connecting (yes/no)? yes\n-    Warning: Permanently added '[localhost]:22222' (ECDSA) to the list of known hosts.\n+    Warning: Permanently added '[localhost]:22222' (RSA) to the list of known hosts.\n     root@localhost's password: (enter root password configured during install)\n-    Linux debian 3.2.0-4-amd64 #1 SMP Debian 3.2.54-2 x86_64\n+\n+    The programs included with the Debian GNU/Linux system are free software;\n+    the exact distribution terms for each program are described in the\n+    individual files in /usr/share/doc/*/copyright.\n+\n+    Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent\n+    permitted by applicable law.\n     root@debian:~#\n \n Replace `root` with `debian` to log in as user.\n \n-[1] http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html\n-[2] http://winscp.net/eng/index.php\n-\n Setting up Debian for gitian building\n --------------------------------------\n \n@@ -226,13 +252,10 @@ First we need to log in as `root` to set up dependencies and make sure that our\n user can use the sudo command. Type/paste the following in the terminal:\n \n ```bash\n-apt-get install git ruby sudo apt-cacher-ng qemu-utils debootstrap lxc python-cheetah parted kpartx bridge-utils\n+apt-get install git ruby sudo apt-cacher-ng qemu-utils debootstrap lxc python-cheetah parted kpartx bridge-utils make ubuntu-archive-keyring\n adduser debian sudo\n ```\n \n-When you get a colorful screen with a question about the 'LXC directory', just\n-go with the default (`/var/lib/lxc`).\n-\n Then set up LXC and the rest with the following, which is a complex jumble of settings and workarounds:\n \n ```bash\n@@ -255,7 +278,7 @@ reboot\n ```\n \n At the end the VM is rebooted to make sure that the changes take effect. The steps in this\n-section need only to be performed once.\n+section only need to be performed once.\n \n Installing gitian\n ------------------\n@@ -300,26 +323,26 @@ cd gitian-builder\n bin/make-base-vm --lxc --arch amd64 --suite precise\n ```\n \n-There will be a lot of warnings printed during build of the image. These can be ignored.\n+There will be a lot of warnings printed during the build of the image. These can be ignored.\n \n **Note**: When sudo asks for a password, enter the password for the user *debian* not for *root*.\n \n Getting and building the inputs\n --------------------------------\n \n-Follow the instructions in [doc/release-process.md](release-process.md) in the bitcoin repository\n-under 'Fetch and build inputs' to install sources which require manual intervention. Also follow\n-the next step: 'Seed the Gitian sources cache', which will fetch all necessary source files allowing\n-for gitian to work offline.\n+Follow the instructions in [doc/release-process.md](release-process.md#fetch-and-build-inputs-first-time-or-when-dependency-versions-change) \n+in the bitcoin repository to install sources which require manual intervention. Also follow\n+the next step: 'Seed the Gitian sources cache', which will fetch all the necessary source \n+files to allow gitian to work offline.\n \n Building Bitcoin\n ----------------\n \n To build Bitcoin (for Linux, OSX and Windows) just follow the steps under 'perform\n-gitian builds' in [doc/release-process.md](release-process.md) in the bitcoin repository.\n+gitian builds' in [doc/release-process.md](release-process.md#perform-gitian-builds) in the bitcoin repository.\n \n-This may take a long time as it also builds the dependencies needed for each descriptor.\n-These dependencies will be cached after a successful build to avoid rebuilding them where possible.\n+This may take some time as it will build all the dependencies needed for each descriptor.\n+These dependencies will be cached after a successful build to avoid rebuilding them when possible.\n \n At any time you can check the package installation and build progress with\n \n@@ -331,13 +354,13 @@ tail -f var/build.log\n Output from `gbuild` will look something like\n \n     Initialized empty Git repository in /home/debian/gitian-builder/inputs/bitcoin/.git/\n-    remote: Reusing existing pack: 35606, done.\n-    remote: Total 35606 (delta 0), reused 0 (delta 0)\n-    Receiving objects: 100% (35606/35606), 26.52 MiB | 4.28 MiB/s, done.\n-    Resolving deltas: 100% (25724/25724), done.\n+    remote: Counting objects: 57959, done.\n+    remote: Total 57959 (delta 0), reused 0 (delta 0), pack-reused 57958\n+    Receiving objects: 100% (57959/57959), 53.76 MiB | 484.00 KiB/s, done.\n+    Resolving deltas: 100% (41590/41590), done.\n     From https://github.com/bitcoin/bitcoin\n     ... (new tags, new branch etc)\n-    --- Building for precise x86_64 ---\n+    --- Building for precise amd64 ---\n     Stopping target if it is up\n     Making a new image copy\n     stdin: is not a tty"
      },
      {
        "sha": "dd22428e176b874afb2f5b9d1b018592fb0175d0",
        "filename": "doc/gitian-building/create_new_vm.png",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/create_new_vm.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/create_new_vm.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/create_new_vm.png?ref=f4b9132d0c7f6395c3a90953ff78e8b78fcccdef"
      },
      {
        "sha": "8e29816fab9e7c8f97338ed43f0893f655134a5f",
        "filename": "doc/gitian-building/create_vm_hard_disk.png",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/create_vm_hard_disk.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/create_vm_hard_disk.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/create_vm_hard_disk.png?ref=f4b9132d0c7f6395c3a90953ff78e8b78fcccdef"
      },
      {
        "sha": "a157211cf5baf909149e73fddfc2556305f4b123",
        "filename": "doc/gitian-building/create_vm_hard_disk_file_type.png",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/create_vm_hard_disk_file_type.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/create_vm_hard_disk_file_type.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/create_vm_hard_disk_file_type.png?ref=f4b9132d0c7f6395c3a90953ff78e8b78fcccdef"
      },
      {
        "sha": "a1706e14fda1488dbc180a4f619e5c3de98fae2b",
        "filename": "doc/gitian-building/create_vm_hard_drive.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10c0e52b68c77d6cf1ba4aeb05618229bba3cd3d/doc/gitian-building/create_vm_hard_drive.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10c0e52b68c77d6cf1ba4aeb05618229bba3cd3d/doc/gitian-building/create_vm_hard_drive.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/create_vm_hard_drive.png?ref=10c0e52b68c77d6cf1ba4aeb05618229bba3cd3d"
      },
      {
        "sha": "251b8ee3e2757a090a8fd045cd3ba76354459915",
        "filename": "doc/gitian-building/create_vm_hard_drive_file_type.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10c0e52b68c77d6cf1ba4aeb05618229bba3cd3d/doc/gitian-building/create_vm_hard_drive_file_type.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10c0e52b68c77d6cf1ba4aeb05618229bba3cd3d/doc/gitian-building/create_vm_hard_drive_file_type.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/create_vm_hard_drive_file_type.png?ref=10c0e52b68c77d6cf1ba4aeb05618229bba3cd3d"
      },
      {
        "sha": "5abfee5337058f9bd638a79416040bd6c6496194",
        "filename": "doc/gitian-building/create_vm_memsize.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/create_vm_memsize.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/create_vm_memsize.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/create_vm_memsize.png?ref=f4b9132d0c7f6395c3a90953ff78e8b78fcccdef"
      },
      {
        "sha": "edaebc6223708e1473d893dd480a5ef439a39473",
        "filename": "doc/gitian-building/create_vm_page1.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10c0e52b68c77d6cf1ba4aeb05618229bba3cd3d/doc/gitian-building/create_vm_page1.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10c0e52b68c77d6cf1ba4aeb05618229bba3cd3d/doc/gitian-building/create_vm_page1.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/create_vm_page1.png?ref=10c0e52b68c77d6cf1ba4aeb05618229bba3cd3d"
      },
      {
        "sha": "cee16a6c63b4f2dcd592ae8c9cdc02f278fbad81",
        "filename": "doc/gitian-building/create_vm_storage_physical_hard_disk.png",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/create_vm_storage_physical_hard_disk.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/create_vm_storage_physical_hard_disk.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/create_vm_storage_physical_hard_disk.png?ref=f4b9132d0c7f6395c3a90953ff78e8b78fcccdef"
      },
      {
        "sha": "987efaa40c2e3c57ef7fb6c64fee8efa0e63241e",
        "filename": "doc/gitian-building/create_vm_storage_physical_hard_drive.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10c0e52b68c77d6cf1ba4aeb05618229bba3cd3d/doc/gitian-building/create_vm_storage_physical_hard_drive.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10c0e52b68c77d6cf1ba4aeb05618229bba3cd3d/doc/gitian-building/create_vm_storage_physical_hard_drive.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/create_vm_storage_physical_hard_drive.png?ref=10c0e52b68c77d6cf1ba4aeb05618229bba3cd3d"
      },
      {
        "sha": "7cda038ae47f97ddfaa905478599cafc6572dd1f",
        "filename": "doc/gitian-building/debian_install_10_configure_clock.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/debian_install_10_configure_clock.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/debian_install_10_configure_clock.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_10_configure_clock.png?ref=f4b9132d0c7f6395c3a90953ff78e8b78fcccdef"
      },
      {
        "sha": "2a648c517f429fb937275d5444a58f4830e8eae4",
        "filename": "doc/gitian-building/debian_install_11_partition_disks.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/debian_install_11_partition_disks.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/debian_install_11_partition_disks.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_11_partition_disks.png?ref=f4b9132d0c7f6395c3a90953ff78e8b78fcccdef"
      },
      {
        "sha": "0f3acc498e3e9cc04692a9c557a8eecb5029dc25",
        "filename": "doc/gitian-building/debian_install_12_choose_disk.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/debian_install_12_choose_disk.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/debian_install_12_choose_disk.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_12_choose_disk.png?ref=f4b9132d0c7f6395c3a90953ff78e8b78fcccdef"
      },
      {
        "sha": "2f80f19b631c0cbf7ebeddc71c309aca8cf86eed",
        "filename": "doc/gitian-building/debian_install_13_partition_scheme.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10c0e52b68c77d6cf1ba4aeb05618229bba3cd3d/doc/gitian-building/debian_install_13_partition_scheme.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10c0e52b68c77d6cf1ba4aeb05618229bba3cd3d/doc/gitian-building/debian_install_13_partition_scheme.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_13_partition_scheme.png?ref=10c0e52b68c77d6cf1ba4aeb05618229bba3cd3d"
      },
      {
        "sha": "c8ef0b37ad6232f87593ea448beaba089b568a91",
        "filename": "doc/gitian-building/debian_install_14_finish.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/debian_install_14_finish.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/debian_install_14_finish.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_14_finish.png?ref=f4b9132d0c7f6395c3a90953ff78e8b78fcccdef"
      },
      {
        "sha": "d8de00dec68c826485034c698079e5808f7dadfd",
        "filename": "doc/gitian-building/debian_install_15_write_changes.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/debian_install_15_write_changes.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/debian_install_15_write_changes.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_15_write_changes.png?ref=f4b9132d0c7f6395c3a90953ff78e8b78fcccdef"
      },
      {
        "sha": "0bd985b38c113ed9bbbe03808ace284476680edc",
        "filename": "doc/gitian-building/debian_install_16_choose_a_mirror.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/debian_install_16_choose_a_mirror.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/debian_install_16_choose_a_mirror.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_16_choose_a_mirror.png?ref=f4b9132d0c7f6395c3a90953ff78e8b78fcccdef"
      },
      {
        "sha": "cef2db07815451cf16099e063f94bb40202ee822",
        "filename": "doc/gitian-building/debian_install_17_choose_a_mirror2.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10c0e52b68c77d6cf1ba4aeb05618229bba3cd3d/doc/gitian-building/debian_install_17_choose_a_mirror2.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10c0e52b68c77d6cf1ba4aeb05618229bba3cd3d/doc/gitian-building/debian_install_17_choose_a_mirror2.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_17_choose_a_mirror2.png?ref=10c0e52b68c77d6cf1ba4aeb05618229bba3cd3d"
      },
      {
        "sha": "2c19919f64b62d89883dc8e1308f179978b95ca4",
        "filename": "doc/gitian-building/debian_install_18_proxy_settings.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/debian_install_18_proxy_settings.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/debian_install_18_proxy_settings.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_18_proxy_settings.png?ref=f4b9132d0c7f6395c3a90953ff78e8b78fcccdef"
      },
      {
        "sha": "5430456b14f098d9e3561653352b826d19a2c38a",
        "filename": "doc/gitian-building/debian_install_19_software_selection.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/debian_install_19_software_selection.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/debian_install_19_software_selection.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_19_software_selection.png?ref=f4b9132d0c7f6395c3a90953ff78e8b78fcccdef"
      },
      {
        "sha": "216502e1c6eb6930ce60c1a36e7476e6fb8781d9",
        "filename": "doc/gitian-building/debian_install_1_boot_menu.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/debian_install_1_boot_menu.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/debian_install_1_boot_menu.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_1_boot_menu.png?ref=f4b9132d0c7f6395c3a90953ff78e8b78fcccdef"
      },
      {
        "sha": "d853c1587188c5fd4ede94ab00f9d8b6731674ac",
        "filename": "doc/gitian-building/debian_install_20_install_grub.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/debian_install_20_install_grub.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/debian_install_20_install_grub.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_20_install_grub.png?ref=f4b9132d0c7f6395c3a90953ff78e8b78fcccdef"
      },
      {
        "sha": "493ab806a673f5c8ee47db0bb5de6af0d5042b03",
        "filename": "doc/gitian-building/debian_install_21_install_grub_bootloader.png",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/debian_install_21_install_grub_bootloader.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/debian_install_21_install_grub_bootloader.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_21_install_grub_bootloader.png?ref=f4b9132d0c7f6395c3a90953ff78e8b78fcccdef"
      },
      {
        "sha": "7c4445585bc9982a5015959dba70d73b01885e08",
        "filename": "doc/gitian-building/debian_install_22_finish_installation.png",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/debian_install_22_finish_installation.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/debian_install_22_finish_installation.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_22_finish_installation.png?ref=f4b9132d0c7f6395c3a90953ff78e8b78fcccdef",
        "previous_filename": "doc/gitian-building/debian_install_21_finish_installation.png"
      },
      {
        "sha": "0228ae2c011daeababc75b915a12b28b702456c0",
        "filename": "doc/gitian-building/debian_install_2_select_a_language.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/debian_install_2_select_a_language.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/debian_install_2_select_a_language.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_2_select_a_language.png?ref=f4b9132d0c7f6395c3a90953ff78e8b78fcccdef"
      },
      {
        "sha": "7b18fba97577b521944f909ed57fd251942a9eab",
        "filename": "doc/gitian-building/debian_install_3_select_location.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/debian_install_3_select_location.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/debian_install_3_select_location.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_3_select_location.png?ref=f4b9132d0c7f6395c3a90953ff78e8b78fcccdef"
      },
      {
        "sha": "8e46117de4879a6de8b276813bef12c219cb4e8b",
        "filename": "doc/gitian-building/debian_install_4_configure_keyboard.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/debian_install_4_configure_keyboard.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/debian_install_4_configure_keyboard.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_4_configure_keyboard.png?ref=f4b9132d0c7f6395c3a90953ff78e8b78fcccdef"
      },
      {
        "sha": "8e3720f24322a54ef33893e8eff95383158bf3d9",
        "filename": "doc/gitian-building/debian_install_5_configure_the_network.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/debian_install_5_configure_the_network.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/debian_install_5_configure_the_network.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_5_configure_the_network.png?ref=f4b9132d0c7f6395c3a90953ff78e8b78fcccdef"
      },
      {
        "sha": "dcade119676ed7e0c0f92cff6d6a064929a07a07",
        "filename": "doc/gitian-building/debian_install_6a_set_up_root_password.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/debian_install_6a_set_up_root_password.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/debian_install_6a_set_up_root_password.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_6a_set_up_root_password.png?ref=f4b9132d0c7f6395c3a90953ff78e8b78fcccdef"
      },
      {
        "sha": "6763c6e08ade2b17f050da257a76132f916e38f5",
        "filename": "doc/gitian-building/debian_install_7_set_up_user_fullname.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/debian_install_7_set_up_user_fullname.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/debian_install_7_set_up_user_fullname.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_7_set_up_user_fullname.png?ref=f4b9132d0c7f6395c3a90953ff78e8b78fcccdef"
      },
      {
        "sha": "bb04de96d23bdaa3e29fbe19891e42b881dd0a99",
        "filename": "doc/gitian-building/debian_install_8_set_up_username.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/debian_install_8_set_up_username.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/debian_install_8_set_up_username.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_8_set_up_username.png?ref=f4b9132d0c7f6395c3a90953ff78e8b78fcccdef"
      },
      {
        "sha": "981f1181d79d0d7fe2138f036d0f1bb41ec472fa",
        "filename": "doc/gitian-building/debian_install_9_user_password.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/debian_install_9_user_password.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/debian_install_9_user_password.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_9_user_password.png?ref=f4b9132d0c7f6395c3a90953ff78e8b78fcccdef"
      },
      {
        "sha": "14cdd5ba5b52cc32fbc0da62cf3671c3679b8d79",
        "filename": "doc/gitian-building/debian_root_login.png",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/debian_root_login.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/debian_root_login.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_root_login.png?ref=f4b9132d0c7f6395c3a90953ff78e8b78fcccdef"
      },
      {
        "sha": "9e714fd15451837980b9d12a931c294fc962b2a2",
        "filename": "doc/gitian-building/network_settings.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/network_settings.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/network_settings.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/network_settings.png?ref=f4b9132d0c7f6395c3a90953ff78e8b78fcccdef"
      },
      {
        "sha": "9e1fa2af20f48d482892b722b7288600bece322a",
        "filename": "doc/gitian-building/port_forwarding_rules.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/port_forwarding_rules.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/port_forwarding_rules.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/port_forwarding_rules.png?ref=f4b9132d0c7f6395c3a90953ff78e8b78fcccdef"
      },
      {
        "sha": "5acdc3fe10eebce2422cdb6d6ae799a7630f0b8d",
        "filename": "doc/gitian-building/select_startup_disk.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/select_startup_disk.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef/doc/gitian-building/select_startup_disk.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/select_startup_disk.png?ref=f4b9132d0c7f6395c3a90953ff78e8b78fcccdef"
      }
    ]
  },
  {
    "sha": "40b556d3742a1f65d67e2d4c760d0b13fe8be5b7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MGI1NTZkMzc0MmExZjY1ZDY3ZTJkNGM3NjBkMGIxM2ZlOGJlNWI3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-01-23T06:53:17Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-03T08:59:18Z"
      },
      "message": "evhttpd implementation\n\n- *Replace usage of boost::asio with [libevent2](http://libevent.org/)*.\nboost::asio is not part of C++11, so unlike other boost there is no\nforwards-compatibility reason to stick with it. Together with #4738 (convert\njson_spirit to UniValue), this rids Bitcoin Core of the worst offenders with\nregard to compile-time slowness.\n\n- *Replace spit-and-duct-tape http server with evhttp*. Front-end http handling\nis handled by libevent, a work queue (with configurable depth and parallelism)\nis used to handle application requests.\n\n- *Wrap HTTP request in C++ class*; this makes the application code mostly\nHTTP-server-neutral\n\n- *Refactor RPC to move all http-specific code to a separate file*.\nTheoreticaly this can allow building without HTTP server but with another RPC\nbackend, e.g. Qt's debug console (currently not implemented) or future RPC\nmechanisms people may want to use.\n\n- *HTTP dispatch mechanism*; services (e.g., RPC, REST) register which URL\npaths they want to handle.\n\nBy using a proven, high-performance asynchronous networking library (also used\nby Tor) and HTTP server, problems such as #5674, #5655, #344 should be avoided.\n\nWhat works? bitcoind, bitcoin-cli, bitcoin-qt. Unit tests and RPC/REST tests\npass. The aim for now is everything but SSL support.\n\nConfiguration options:\n\n- `-rpcthreads`: repurposed as \"number of  work handler threads\". Still\ndefaults to 4.\n\n- `-rpcworkqueue`: maximum depth of work queue. When this is reached, new\nrequests will return a 500 Internal Error.\n\n- `-rpctimeout`: inactivity time, in seconds, after which to disconnect a\nclient.\n\n- `-debug=http`: low-level http activity logging",
      "tree": {
        "sha": "2a8117475070db6a8498201f7bee6cc85f2606ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2a8117475070db6a8498201f7bee6cc85f2606ad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/40b556d3742a1f65d67e2d4c760d0b13fe8be5b7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40b556d3742a1f65d67e2d4c760d0b13fe8be5b7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/40b556d3742a1f65d67e2d4c760d0b13fe8be5b7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40b556d3742a1f65d67e2d4c760d0b13fe8be5b7/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ee2a42b447eebacc05ec4238d562b04a9a0d8462",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee2a42b447eebacc05ec4238d562b04a9a0d8462",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ee2a42b447eebacc05ec4238d562b04a9a0d8462"
      }
    ],
    "stats": {
      "total": 2348,
      "additions": 1299,
      "deletions": 1049
    },
    "files": [
      {
        "sha": "4dfd56626c83c912a831ead0c8939129157f6544",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40b556d3742a1f65d67e2d4c760d0b13fe8be5b7/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40b556d3742a1f65d67e2d4c760d0b13fe8be5b7/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=40b556d3742a1f65d67e2d4c760d0b13fe8be5b7",
        "patch": "@@ -98,6 +98,8 @@ BITCOIN_CORE_H = \\\n   eccryptoverify.h \\\n   ecwrapper.h \\\n   hash.h \\\n+  httprpc.h \\\n+  httpserver.h \\\n   init.h \\\n   key.h \\\n   keystore.h \\\n@@ -170,6 +172,8 @@ libbitcoin_server_a_SOURCES = \\\n   bloom.cpp \\\n   chain.cpp \\\n   checkpoints.cpp \\\n+  httprpc.cpp \\\n+  httpserver.cpp \\\n   init.cpp \\\n   leveldbwrapper.cpp \\\n   main.cpp \\"
      },
      {
        "sha": "2e094fde227afb122b7b3d1953fe7bfafacdcdd0",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 93,
        "deletions": 40,
        "changes": 133,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40b556d3742a1f65d67e2d4c760d0b13fe8be5b7/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40b556d3742a1f65d67e2d4c760d0b13fe8be5b7/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=40b556d3742a1f65d67e2d4c760d0b13fe8be5b7",
        "patch": "@@ -11,6 +11,12 @@\n #include \"utilstrencodings.h\"\n \n #include <boost/filesystem/operations.hpp>\n+#include <stdio.h>\n+\n+#include <event2/event.h>\n+#include <event2/http.h>\n+#include <event2/buffer.h>\n+#include <event2/keyvalq_struct.h>\n \n #include \"univalue/univalue.h\"\n \n@@ -32,9 +38,6 @@ std::string HelpMessageCli()\n     strUsage += HelpMessageOpt(\"-rpcuser=<user>\", _(\"Username for JSON-RPC connections\"));\n     strUsage += HelpMessageOpt(\"-rpcpassword=<pw>\", _(\"Password for JSON-RPC connections\"));\n \n-    strUsage += HelpMessageGroup(_(\"SSL options: (see the Bitcoin Wiki for SSL setup instructions)\"));\n-    strUsage += HelpMessageOpt(\"-rpcssl\", _(\"Use OpenSSL (https) for JSON-RPC connections\"));\n-\n     return strUsage;\n }\n \n@@ -92,67 +95,117 @@ static bool AppInitRPC(int argc, char* argv[])\n         fprintf(stderr, \"Error: Invalid combination of -regtest and -testnet.\\n\");\n         return false;\n     }\n+    if (GetBoolArg(\"-rpcssl\", false))\n+    {\n+        fprintf(stderr, \"Error: SSL mode for RPC (-rpcssl) is no longer supported.\\n\");\n+        return false;\n+    }\n     return true;\n }\n \n-UniValue CallRPC(const string& strMethod, const UniValue& params)\n+\n+/** Reply structure for request_done to fill in */\n+struct HTTPReply\n {\n-    // Connect to localhost\n-    bool fUseSSL = GetBoolArg(\"-rpcssl\", false);\n-    boost::asio::io_service io_service;\n-    boost::asio::ssl::context context(io_service, boost::asio::ssl::context::sslv23);\n-    context.set_options(boost::asio::ssl::context::no_sslv2 | boost::asio::ssl::context::no_sslv3);\n-    boost::asio::ssl::stream<boost::asio::ip::tcp::socket> sslStream(io_service, context);\n-    SSLIOStreamDevice<boost::asio::ip::tcp> d(sslStream, fUseSSL);\n-    boost::iostreams::stream< SSLIOStreamDevice<boost::asio::ip::tcp> > stream(d);\n-\n-    const bool fConnected = d.connect(GetArg(\"-rpcconnect\", \"127.0.0.1\"), GetArg(\"-rpcport\", itostr(BaseParams().RPCPort())));\n-    if (!fConnected)\n-        throw CConnectionFailed(\"couldn't connect to server\");\n+    int status;\n+    std::string body;\n+};\n+\n+static void http_request_done(struct evhttp_request *req, void *ctx)\n+{\n+    HTTPReply *reply = static_cast<HTTPReply*>(ctx);\n+\n+    if (req == NULL) {\n+        /* If req is NULL, it means an error occurred while connecting, but\n+         * I'm not sure how to find out which one. We also don't really care.\n+         */\n+        reply->status = 0;\n+        return;\n+    }\n \n-    // Find credentials to use\n+    reply->status = evhttp_request_get_response_code(req);\n+\n+    struct evbuffer *buf = evhttp_request_get_input_buffer(req);\n+    if (buf)\n+    {\n+        size_t size = evbuffer_get_length(buf);\n+        const char *data = (const char*)evbuffer_pullup(buf, size);\n+        if (data)\n+            reply->body = std::string(data, size);\n+        evbuffer_drain(buf, size);\n+    }\n+}\n+\n+UniValue CallRPC(const string& strMethod, const UniValue& params)\n+{\n+    std::string host = GetArg(\"-rpcconnect\", \"127.0.0.1\");\n+    int port = GetArg(\"-rpcport\", BaseParams().RPCPort());\n+\n+    // Create event base\n+    struct event_base *base = event_base_new(); // TODO RAII\n+    if (!base)\n+        throw runtime_error(\"cannot create event_base\");\n+\n+    // Synchronously look up hostname\n+    struct evhttp_connection *evcon = evhttp_connection_base_new(base, NULL, host.c_str(), port); // TODO RAII\n+    if (evcon == NULL)\n+        throw runtime_error(\"create connection failed\");\n+    evhttp_connection_set_timeout(evcon, GetArg(\"-rpctimeout\", 30));\n+\n+    HTTPReply response;\n+    struct evhttp_request *req = evhttp_request_new(http_request_done, (void*)&response); // TODO RAII\n+    if (req == NULL)\n+        throw runtime_error(\"create http request failed\");\n+\n+    // Get credentials\n     std::string strRPCUserColonPass;\n     if (mapArgs[\"-rpcpassword\"] == \"\") {\n         // Try fall back to cookie-based authentication if no password is provided\n         if (!GetAuthCookie(&strRPCUserColonPass)) {\n             throw runtime_error(strprintf(\n-                _(\"You must set rpcpassword=<password> in the configuration file:\\n%s\\n\"\n-                  \"If the file does not exist, create it with owner-readable-only file permissions.\"),\n+                _(\"Could not locate RPC credentials. No authentication cookie could be found, and no rpcpassword is set in the configuration file (%s)\"),\n                     GetConfigFile().string().c_str()));\n \n         }\n     } else {\n         strRPCUserColonPass = mapArgs[\"-rpcuser\"] + \":\" + mapArgs[\"-rpcpassword\"];\n     }\n \n-    // HTTP basic authentication\n-    map<string, string> mapRequestHeaders;\n-    mapRequestHeaders[\"Authorization\"] = string(\"Basic \") + EncodeBase64(strRPCUserColonPass);\n-\n-    // Send request\n-    string strRequest = JSONRPCRequest(strMethod, params, 1);\n-    string strPost = HTTPPost(strRequest, mapRequestHeaders);\n-    stream << strPost << std::flush;\n-\n-    // Receive HTTP reply status\n-    int nProto = 0;\n-    int nStatus = ReadHTTPStatus(stream, nProto);\n+    struct evkeyvalq *output_headers = evhttp_request_get_output_headers(req);\n+    assert(output_headers);\n+    evhttp_add_header(output_headers, \"Host\", host.c_str());\n+    evhttp_add_header(output_headers, \"Connection\", \"close\");\n+    evhttp_add_header(output_headers, \"Authorization\", (std::string(\"Basic \") + EncodeBase64(strRPCUserColonPass)).c_str());\n+\n+    // Attach request data\n+    std::string strRequest = JSONRPCRequest(strMethod, params, 1);\n+    struct evbuffer * output_buffer = evhttp_request_get_output_buffer(req);\n+    assert(output_buffer);\n+    evbuffer_add(output_buffer, strRequest.data(), strRequest.size());\n+\n+    int r = evhttp_make_request(evcon, req, EVHTTP_REQ_POST, \"/\");\n+    if (r != 0) {\n+        evhttp_connection_free(evcon);\n+        event_base_free(base);\n+        throw CConnectionFailed(\"send http request failed\");\n+    }\n \n-    // Receive HTTP reply message headers and body\n-    map<string, string> mapHeaders;\n-    string strReply;\n-    ReadHTTPMessage(stream, mapHeaders, strReply, nProto, std::numeric_limits<size_t>::max());\n+    event_base_dispatch(base);\n+    evhttp_connection_free(evcon);\n+    event_base_free(base);\n \n-    if (nStatus == HTTP_UNAUTHORIZED)\n+    if (response.status == 0)\n+        throw CConnectionFailed(\"couldn't connect to server\");\n+    else if (response.status == HTTP_UNAUTHORIZED)\n         throw runtime_error(\"incorrect rpcuser or rpcpassword (authorization failed)\");\n-    else if (nStatus >= 400 && nStatus != HTTP_BAD_REQUEST && nStatus != HTTP_NOT_FOUND && nStatus != HTTP_INTERNAL_SERVER_ERROR)\n-        throw runtime_error(strprintf(\"server returned HTTP error %d\", nStatus));\n-    else if (strReply.empty())\n+    else if (response.status >= 400 && response.status != HTTP_BAD_REQUEST && response.status != HTTP_NOT_FOUND && response.status != HTTP_INTERNAL_SERVER_ERROR)\n+        throw runtime_error(strprintf(\"server returned HTTP error %d\", response.status));\n+    else if (response.body.empty())\n         throw runtime_error(\"no response from server\");\n \n     // Parse reply\n     UniValue valReply(UniValue::VSTR);\n-    if (!valReply.read(strReply))\n+    if (!valReply.read(response.body))\n         throw runtime_error(\"couldn't parse reply from server\");\n     const UniValue& reply = valReply.get_obj();\n     if (reply.empty())"
      },
      {
        "sha": "b512f74c227003c3393aa099f4c4fe3cba55f818",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40b556d3742a1f65d67e2d4c760d0b13fe8be5b7/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40b556d3742a1f65d67e2d4c760d0b13fe8be5b7/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=40b556d3742a1f65d67e2d4c760d0b13fe8be5b7",
        "patch": "@@ -10,11 +10,16 @@\n #include \"noui.h\"\n #include \"scheduler.h\"\n #include \"util.h\"\n+#include \"httpserver.h\"\n+#include \"httprpc.h\"\n+#include \"rpcserver.h\"\n \n #include <boost/algorithm/string/predicate.hpp>\n #include <boost/filesystem.hpp>\n #include <boost/thread.hpp>\n \n+#include <stdio.h>\n+\n /* Introduction text for doxygen: */\n \n /*! \\mainpage Developer documentation\n@@ -44,7 +49,7 @@ void WaitForShutdown(boost::thread_group* threadGroup)\n     }\n     if (threadGroup)\n     {\n-        threadGroup->interrupt_all();\n+        Interrupt(*threadGroup);\n         threadGroup->join_all();\n     }\n }\n@@ -154,7 +159,7 @@ bool AppInit(int argc, char* argv[])\n \n     if (!fRet)\n     {\n-        threadGroup.interrupt_all();\n+        Interrupt(threadGroup);\n         // threadGroup.join_all(); was left out intentionally here, because we didn't re-test all of\n         // the startup-failure cases to make sure they don't result in a hang due to some\n         // thread-blocking-waiting-for-another-thread-during-startup case"
      },
      {
        "sha": "570beadc5f5e1fc555ce765cbed2fb99f86d9b4d",
        "filename": "src/httprpc.cpp",
        "status": "added",
        "additions": 201,
        "deletions": 0,
        "changes": 201,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40b556d3742a1f65d67e2d4c760d0b13fe8be5b7/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40b556d3742a1f65d67e2d4c760d0b13fe8be5b7/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=40b556d3742a1f65d67e2d4c760d0b13fe8be5b7",
        "patch": "@@ -0,0 +1,201 @@\n+#include \"httprpc.h\"\n+\n+#include \"base58.h\"\n+#include \"chainparams.h\"\n+#include \"httpserver.h\"\n+#include \"rpcprotocol.h\"\n+#include \"rpcserver.h\"\n+#include \"random.h\"\n+#include \"sync.h\"\n+#include \"util.h\"\n+#include \"utilstrencodings.h\"\n+#include \"ui_interface.h\"\n+\n+#include <boost/algorithm/string.hpp> // boost::trim\n+\n+/** Simple one-shot callback timer to be used by the RPC mechanism to e.g.\n+ * re-lock the wellet.\n+ */\n+class HTTPRPCTimer : public RPCTimerBase\n+{\n+public:\n+    HTTPRPCTimer(struct event_base* eventBase, boost::function<void(void)>& func, int64_t seconds) : ev(eventBase, false, new Handler(func))\n+    {\n+        struct timeval tv = {seconds, 0};\n+        ev.trigger(&tv);\n+    }\n+private:\n+    HTTPEvent ev;\n+\n+    class Handler : public HTTPClosure\n+    {\n+    public:\n+        Handler(const boost::function<void(void)>& func) : func(func)\n+        {\n+        }\n+    private:\n+        boost::function<void(void)> func;\n+        void operator()() { func(); }\n+    };\n+};\n+\n+class HTTPRPCTimerInterface : public RPCTimerInterface\n+{\n+public:\n+    HTTPRPCTimerInterface(struct event_base* base) : base(base)\n+    {\n+    }\n+    const char* Name()\n+    {\n+        return \"HTTP\";\n+    }\n+    RPCTimerBase* NewTimer(boost::function<void(void)>& func, int64_t seconds)\n+    {\n+        return new HTTPRPCTimer(base, func, seconds);\n+    }\n+private:\n+    struct event_base* base;\n+};\n+\n+\n+/* Pre-base64-encoded authentication token */\n+static std::string strRPCUserColonPass;\n+/* Stored RPC timer interface (for unregistration) */\n+static HTTPRPCTimerInterface* httpRPCTimerInterface = 0;\n+\n+static void JSONErrorReply(HTTPRequest* req, const UniValue& objError, const UniValue& id)\n+{\n+    // Send error reply from json-rpc error object\n+    int nStatus = HTTP_INTERNAL_SERVER_ERROR;\n+    int code = find_value(objError, \"code\").get_int();\n+\n+    if (code == RPC_INVALID_REQUEST)\n+        nStatus = HTTP_BAD_REQUEST;\n+    else if (code == RPC_METHOD_NOT_FOUND)\n+        nStatus = HTTP_NOT_FOUND;\n+\n+    std::string strReply = JSONRPCReply(NullUniValue, objError, id);\n+\n+    req->WriteHeader(\"Content-Type\", \"application/json\");\n+    req->WriteReply(nStatus, strReply);\n+}\n+\n+static bool RPCAuthorized(const std::string& strAuth)\n+{\n+    if (strRPCUserColonPass.empty()) // Belt-and-suspenders measure if InitRPCAuthentication was not called\n+        return false;\n+    if (strAuth.substr(0, 6) != \"Basic \")\n+        return false;\n+    std::string strUserPass64 = strAuth.substr(6);\n+    boost::trim(strUserPass64);\n+    std::string strUserPass = DecodeBase64(strUserPass64);\n+    return TimingResistantEqual(strUserPass, strRPCUserColonPass);\n+}\n+\n+static bool HTTPReq_JSONRPC(HTTPRequest* req, const std::string &)\n+{\n+    // JSONRPC handles only POST\n+    if (req->GetRequestMethod() != HTTPRequest::POST) {\n+        req->WriteReply(HTTP_BAD_METHOD, \"JSONRPC server handles only POST requests\");\n+        return false;\n+    }\n+    // Check authorization\n+    std::pair<bool, std::string> authHeader = req->GetHeader(\"authorization\");\n+    if (!authHeader.first) {\n+        req->WriteReply(HTTP_UNAUTHORIZED);\n+        return false;\n+    }\n+\n+    if (!RPCAuthorized(authHeader.second)) {\n+        LogPrintf(\"ThreadRPCServer incorrect password attempt from %s\\n\", req->GetPeer().ToString());\n+\n+        /* Deter brute-forcing\n+           If this results in a DoS the user really\n+           shouldn't have their RPC port exposed. */\n+        MilliSleep(250);\n+\n+        req->WriteReply(HTTP_UNAUTHORIZED);\n+        return false;\n+    }\n+\n+    JSONRequest jreq;\n+    try {\n+        // Parse request\n+        UniValue valRequest;\n+        if (!valRequest.read(req->ReadBody()))\n+            throw JSONRPCError(RPC_PARSE_ERROR, \"Parse error\");\n+\n+        std::string strReply;\n+        // singleton request\n+        if (valRequest.isObject()) {\n+            jreq.parse(valRequest);\n+\n+            UniValue result = tableRPC.execute(jreq.strMethod, jreq.params);\n+\n+            // Send reply\n+            strReply = JSONRPCReply(result, NullUniValue, jreq.id);\n+\n+        // array of requests\n+        } else if (valRequest.isArray())\n+            strReply = JSONRPCExecBatch(valRequest.get_array());\n+        else\n+            throw JSONRPCError(RPC_PARSE_ERROR, \"Top-level object parse error\");\n+\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strReply);\n+    } catch (const UniValue& objError) {\n+        JSONErrorReply(req, objError, jreq.id);\n+        return false;\n+    } catch (const std::exception& e) {\n+        JSONErrorReply(req, JSONRPCError(RPC_PARSE_ERROR, e.what()), jreq.id);\n+        return false;\n+    }\n+    return true;\n+}\n+\n+static bool InitRPCAuthentication()\n+{\n+    if (mapArgs[\"-rpcpassword\"] == \"\")\n+    {\n+        LogPrintf(\"No rpcpassword set - using random cookie authentication\\n\");\n+        if (!GenerateAuthCookie(&strRPCUserColonPass)) {\n+            uiInterface.ThreadSafeMessageBox(\n+                _(\"Error: A fatal internal error occurred, see debug.log for details\"), // Same message as AbortNode\n+                \"\", CClientUIInterface::MSG_ERROR);\n+            return false;\n+        }\n+    } else {\n+        strRPCUserColonPass = mapArgs[\"-rpcuser\"] + \":\" + mapArgs[\"-rpcpassword\"];\n+    }\n+    return true;\n+}\n+\n+bool StartHTTPRPC()\n+{\n+    LogPrint(\"rpc\", \"Starting HTTP RPC server\\n\");\n+    if (!InitRPCAuthentication())\n+        return false;\n+\n+    RegisterHTTPHandler(\"/\", true, HTTPReq_JSONRPC);\n+\n+    assert(EventBase());\n+    httpRPCTimerInterface = new HTTPRPCTimerInterface(EventBase());\n+    RPCRegisterTimerInterface(httpRPCTimerInterface);\n+    return true;\n+}\n+\n+void InterruptHTTPRPC()\n+{\n+    LogPrint(\"rpc\", \"Interrupting HTTP RPC server\\n\");\n+}\n+\n+void StopHTTPRPC()\n+{\n+    LogPrint(\"rpc\", \"Stopping HTTP RPC server\\n\");\n+    UnregisterHTTPHandler(\"/\", true);\n+    if (httpRPCTimerInterface) {\n+        RPCUnregisterTimerInterface(httpRPCTimerInterface);\n+        delete httpRPCTimerInterface;\n+        httpRPCTimerInterface = 0;\n+    }\n+}"
      },
      {
        "sha": "d35445718871ee6339ece7caf1c0c3cdc3872f4f",
        "filename": "src/httprpc.h",
        "status": "added",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40b556d3742a1f65d67e2d4c760d0b13fe8be5b7/src/httprpc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40b556d3742a1f65d67e2d4c760d0b13fe8be5b7/src/httprpc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.h?ref=40b556d3742a1f65d67e2d4c760d0b13fe8be5b7",
        "patch": "@@ -0,0 +1,37 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_HTTPRPC_H\n+#define BITCOIN_HTTPRPC_H\n+\n+#include <string>\n+#include <map>\n+\n+class HTTPRequest;\n+\n+/** Start HTTP RPC subsystem.\n+ * Precondition; HTTP and RPC has been started.\n+ */\n+bool StartHTTPRPC();\n+/** Interrupt HTTP RPC subsystem.\n+ */\n+void InterruptHTTPRPC();\n+/** Stop HTTP RPC subsystem.\n+ * Precondition; HTTP and RPC has been stopped.\n+ */\n+void StopHTTPRPC();\n+\n+/** Start HTTP REST subsystem.\n+ * Precondition; HTTP and RPC has been started.\n+ */\n+bool StartREST();\n+/** Interrupt RPC REST subsystem.\n+ */\n+void InterruptREST();\n+/** Stop HTTP REST subsystem.\n+ * Precondition; HTTP and RPC has been stopped.\n+ */\n+void StopREST();\n+\n+#endif"
      },
      {
        "sha": "89366b2e4e9084fa8fc2dded3fb10df13bf08d3e",
        "filename": "src/httpserver.cpp",
        "status": "added",
        "additions": 586,
        "deletions": 0,
        "changes": 586,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40b556d3742a1f65d67e2d4c760d0b13fe8be5b7/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40b556d3742a1f65d67e2d4c760d0b13fe8be5b7/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=40b556d3742a1f65d67e2d4c760d0b13fe8be5b7",
        "patch": "@@ -0,0 +1,586 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"httpserver.h\"\n+\n+#include \"chainparamsbase.h\"\n+#include \"compat.h\"\n+#include \"util.h\"\n+#include \"netbase.h\"\n+#include \"rpcprotocol.h\" // For HTTP status codes\n+#include \"sync.h\"\n+#include \"ui_interface.h\"\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#include <sys/types.h>\n+#include <sys/stat.h>\n+#include <signal.h>\n+\n+#include <event2/event.h>\n+#include <event2/http.h>\n+#include <event2/thread.h>\n+#include <event2/buffer.h>\n+#include <event2/util.h>\n+#include <event2/keyvalq_struct.h>\n+\n+#ifdef EVENT__HAVE_NETINET_IN_H\n+#include <netinet/in.h>\n+#ifdef _XOPEN_SOURCE_EXTENDED\n+#include <arpa/inet.h>\n+#endif\n+#endif\n+\n+#include <boost/algorithm/string/case_conv.hpp> // for to_lower()\n+#include <boost/foreach.hpp>\n+#include <boost/scoped_ptr.hpp>\n+\n+/** HTTP request work item */\n+class HTTPWorkItem : public HTTPClosure\n+{\n+public:\n+    HTTPWorkItem(HTTPRequest* req, const std::string &path, const HTTPRequestHandler& func):\n+        req(req), path(path), func(func)\n+    {\n+    }\n+    void operator()()\n+    {\n+        func(req.get(), path);\n+    }\n+\n+    boost::scoped_ptr<HTTPRequest> req;\n+\n+private:\n+    std::string path;\n+    HTTPRequestHandler func;\n+};\n+\n+/** Simple work queue for distributing work over multiple threads.\n+ * Work items are simply callable objects.\n+ */\n+template <typename WorkItem>\n+class WorkQueue\n+{\n+private:\n+    /** Mutex protects entire object */\n+    CWaitableCriticalSection cs;\n+    CConditionVariable cond;\n+    /* XXX in C++11 we can use std::unique_ptr here and avoid manual cleanup */\n+    std::deque<WorkItem*> queue;\n+    bool running;\n+    size_t maxDepth;\n+\n+public:\n+    WorkQueue(size_t maxDepth) : running(true),\n+                                 maxDepth(maxDepth)\n+    {\n+    }\n+    /* Precondition: worker threads have all stopped */\n+    ~WorkQueue()\n+    {\n+        while (!queue.empty()) {\n+            delete queue.front();\n+            queue.pop_front();\n+        }\n+    }\n+    /** Enqueue a work item */\n+    bool Enqueue(WorkItem* item)\n+    {\n+        boost::unique_lock<boost::mutex> lock(cs);\n+        if (queue.size() >= maxDepth) {\n+            return false;\n+        }\n+        queue.push_back(item);\n+        cond.notify_one();\n+        return true;\n+    }\n+    /** Thread function */\n+    void Run()\n+    {\n+        while (running) {\n+            WorkItem* i = 0;\n+            {\n+                boost::unique_lock<boost::mutex> lock(cs);\n+                while (running && queue.empty())\n+                    cond.wait(lock);\n+                if (!running)\n+                    break;\n+                i = queue.front();\n+                queue.pop_front();\n+            }\n+            (*i)();\n+            delete i;\n+        }\n+    }\n+    /** Interrupt and exit loops */\n+    void Interrupt()\n+    {\n+        boost::unique_lock<boost::mutex> lock(cs);\n+        running = false;\n+        cond.notify_all();\n+    }\n+\n+    /** Return current depth of queue */\n+    size_t Depth()\n+    {\n+        boost::unique_lock<boost::mutex> lock(cs);\n+        return queue.size();\n+    }\n+};\n+\n+struct HTTPPathHandler\n+{\n+    HTTPPathHandler() {}\n+    HTTPPathHandler(std::string prefix, bool exactMatch, HTTPRequestHandler handler):\n+        prefix(prefix), exactMatch(exactMatch), handler(handler)\n+    {\n+    }\n+    std::string prefix;\n+    bool exactMatch;\n+    HTTPRequestHandler handler;\n+};\n+\n+/** HTTP module state */\n+\n+//! libevent event loop\n+static struct event_base* eventBase = 0;\n+//! HTTP server\n+struct evhttp* eventHTTP = 0;\n+//! List of subnets to allow RPC connections from\n+static std::vector<CSubNet> rpc_allow_subnets;\n+//! Work queue for handling longer requests off the event loop thread\n+static WorkQueue<HTTPClosure>* workQueue = 0;\n+//! Handlers for (sub)paths\n+std::vector<HTTPPathHandler> pathHandlers;\n+\n+/** Check if a network address is allowed to access the HTTP server */\n+static bool ClientAllowed(const CNetAddr& netaddr)\n+{\n+    if (!netaddr.IsValid())\n+        return false;\n+    BOOST_FOREACH (const CSubNet& subnet, rpc_allow_subnets)\n+        if (subnet.Match(netaddr))\n+            return true;\n+    return false;\n+}\n+\n+/** Initialize ACL list for HTTP server */\n+static bool InitHTTPAllowList()\n+{\n+    rpc_allow_subnets.clear();\n+    rpc_allow_subnets.push_back(CSubNet(\"127.0.0.0/8\")); // always allow IPv4 local subnet\n+    rpc_allow_subnets.push_back(CSubNet(\"::1\"));         // always allow IPv6 localhost\n+    if (mapMultiArgs.count(\"-rpcallowip\")) {\n+        const std::vector<std::string>& vAllow = mapMultiArgs[\"-rpcallowip\"];\n+        BOOST_FOREACH (std::string strAllow, vAllow) {\n+            CSubNet subnet(strAllow);\n+            if (!subnet.IsValid()) {\n+                uiInterface.ThreadSafeMessageBox(\n+                    strprintf(\"Invalid -rpcallowip subnet specification: %s. Valid are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24).\", strAllow),\n+                    \"\", CClientUIInterface::MSG_ERROR);\n+                return false;\n+            }\n+            rpc_allow_subnets.push_back(subnet);\n+        }\n+    }\n+    std::string strAllowed;\n+    BOOST_FOREACH (const CSubNet& subnet, rpc_allow_subnets)\n+        strAllowed += subnet.ToString() + \" \";\n+    LogPrint(\"http\", \"Allowing HTTP connections from: %s\\n\", strAllowed);\n+    return true;\n+}\n+\n+/** HTTP request method as string - use for logging only */\n+static std::string RequestMethodString(HTTPRequest::RequestMethod m)\n+{\n+    switch (m) {\n+    case HTTPRequest::GET:\n+        return \"GET\";\n+        break;\n+    case HTTPRequest::POST:\n+        return \"POST\";\n+        break;\n+    case HTTPRequest::HEAD:\n+        return \"HEAD\";\n+        break;\n+    case HTTPRequest::PUT:\n+        return \"PUT\";\n+        break;\n+    default:\n+        return \"unknown\";\n+    }\n+}\n+\n+/** HTTP request callback */\n+static void http_request_cb(struct evhttp_request* req, void* arg)\n+{\n+    std::auto_ptr<HTTPRequest> hreq(new HTTPRequest(req));\n+\n+    LogPrint(\"http\", \"Received a %s request for %s from %s\\n\",\n+             RequestMethodString(hreq->GetRequestMethod()), hreq->GetURI(), hreq->GetPeer().ToString());\n+\n+    // Early address-based allow check\n+    if (!ClientAllowed(hreq->GetPeer())) {\n+        hreq->WriteReply(HTTP_FORBIDDEN);\n+        return;\n+    }\n+\n+    // Early reject unknown HTTP methods\n+    if (hreq->GetRequestMethod() == HTTPRequest::UNKNOWN) {\n+        hreq->WriteReply(HTTP_BADMETHOD);\n+        return;\n+    }\n+\n+    // Find registered handler for prefix\n+    std::string strURI = hreq->GetURI();\n+    std::string path;\n+    std::vector<HTTPPathHandler>::const_iterator i = pathHandlers.begin();\n+    std::vector<HTTPPathHandler>::const_iterator iend = pathHandlers.end();\n+    for (; i != iend; ++i) {\n+        bool match = false;\n+        if (i->exactMatch)\n+            match = (strURI == i->prefix);\n+        else\n+            match = (strURI.substr(0, i->prefix.size()) == i->prefix);\n+        if (match) {\n+            path = strURI.substr(i->prefix.size());\n+            break;\n+        }\n+    }\n+\n+    // Dispatch to worker thread\n+    if (i != iend) {\n+        std::auto_ptr<HTTPWorkItem> item(new HTTPWorkItem(hreq.release(), path, i->handler));\n+        assert(workQueue);\n+        if (workQueue->Enqueue(item.get()))\n+            item.release(); /* if true, queue took ownership */\n+        else\n+            item->req->WriteReply(HTTP_INTERNAL, \"Work queue depth exceeded\");\n+    } else {\n+        hreq->WriteReply(HTTP_NOTFOUND);\n+    }\n+}\n+\n+/** Event dispatcher thread */\n+static void ThreadHTTP(struct event_base* base, struct evhttp* http)\n+{\n+    RenameThread(\"bitcoin-http\");\n+    LogPrint(\"http\", \"Entering http event loop\\n\");\n+    event_base_dispatch(base);\n+    // Event loop will be interrupted by InterruptHTTPServer()\n+    LogPrint(\"http\", \"Exited http event loop\\n\");\n+}\n+\n+/** Bind HTTP server to specified addresses */\n+static bool HTTPBindAddresses(struct evhttp* http)\n+{\n+    int defaultPort = GetArg(\"-rpcport\", BaseParams().RPCPort());\n+    int nBound = 0;\n+    std::vector<std::pair<std::string, uint16_t> > endpoints;\n+\n+    // Determine what addresses to bind to\n+    if (!mapArgs.count(\"-rpcallowip\")) { // Default to loopback if not allowing external IPs\n+        endpoints.push_back(std::make_pair(\"::1\", defaultPort));\n+        endpoints.push_back(std::make_pair(\"127.0.0.1\", defaultPort));\n+        if (mapArgs.count(\"-rpcbind\")) {\n+            LogPrintf(\"WARNING: option -rpcbind was ignored because -rpcallowip was not specified, refusing to allow everyone to connect\\n\");\n+        }\n+    } else if (mapArgs.count(\"-rpcbind\")) { // Specific bind address\n+        const std::vector<std::string>& vbind = mapMultiArgs[\"-rpcbind\"];\n+        for (std::vector<std::string>::const_iterator i = vbind.begin(); i != vbind.end(); ++i) {\n+            int port = defaultPort;\n+            std::string host;\n+            SplitHostPort(*i, port, host);\n+            endpoints.push_back(std::make_pair(host, port));\n+        }\n+    } else { // No specific bind address specified, bind to any\n+        endpoints.push_back(std::make_pair(\"::\", defaultPort));\n+        endpoints.push_back(std::make_pair(\"0.0.0.0\", defaultPort));\n+    }\n+\n+    // Bind addresses\n+    for (std::vector<std::pair<std::string, uint16_t> >::iterator i = endpoints.begin(); i != endpoints.end(); ++i) {\n+        LogPrint(\"http\", \"Binding RPC on address %s port %i\\n\", i->first, i->second);\n+        if (evhttp_bind_socket(http, i->first.empty() ? NULL : i->first.c_str(), i->second) == 0) {\n+            nBound += 1;\n+        } else {\n+            LogPrintf(\"Binding RPC on address %s port %i failed.\\n\", i->first, i->second);\n+        }\n+    }\n+    return nBound > 0;\n+}\n+\n+/** Simple wrapper to set thread name and run work queue */\n+static void HTTPWorkQueueRun(WorkQueue<HTTPClosure>* queue)\n+{\n+    RenameThread(\"bitcoin-httpworker\");\n+    queue->Run();\n+}\n+\n+bool StartHTTPServer(boost::thread_group& threadGroup)\n+{\n+    struct evhttp* http = 0;\n+    struct event_base* base = 0;\n+\n+    if (!InitHTTPAllowList())\n+        return false;\n+\n+    if (GetBoolArg(\"-rpcssl\", false)) {\n+        uiInterface.ThreadSafeMessageBox(\n+            \"SSL mode for RPC (-rpcssl) is no longer supported.\",\n+            \"\", CClientUIInterface::MSG_ERROR);\n+        return false;\n+    }\n+\n+#ifdef WIN32\n+    evthread_use_windows_threads();\n+#else\n+    evthread_use_pthreads();\n+#endif\n+\n+    base = event_base_new(); // XXX RAII\n+    if (!base) {\n+        LogPrintf(\"Couldn't create an event_base: exiting\\n\");\n+        return false;\n+    }\n+\n+    /* Create a new evhttp object to handle requests. */\n+    http = evhttp_new(base); // XXX RAII\n+    if (!http) {\n+        LogPrintf(\"couldn't create evhttp. Exiting.\\n\");\n+        event_base_free(base);\n+        return false;\n+    }\n+\n+    evhttp_set_timeout(http, GetArg(\"-rpctimeout\", 30));\n+    evhttp_set_max_body_size(http, MAX_SIZE);\n+    evhttp_set_gencb(http, http_request_cb, NULL);\n+\n+    if (!HTTPBindAddresses(http)) {\n+        LogPrintf(\"Unable to bind any endpoint for RPC server\\n\");\n+        evhttp_free(http);\n+        event_base_free(base);\n+        return false;\n+    }\n+\n+    LogPrint(\"http\", \"Starting HTTP server\\n\");\n+    int workQueueDepth = std::max((long)GetArg(\"-rpcworkqueue\", 16), 1L);\n+    int rpcThreads = std::max((long)GetArg(\"-rpcthreads\", 4), 1L);\n+    LogPrintf(\"HTTP: creating work queue of depth %d and %d worker threads\\n\", workQueueDepth, rpcThreads);\n+    workQueue = new WorkQueue<HTTPClosure>(workQueueDepth);\n+\n+    threadGroup.create_thread(boost::bind(&ThreadHTTP, base, http));\n+\n+    for (int i = 0; i < rpcThreads; i++)\n+        threadGroup.create_thread(boost::bind(&HTTPWorkQueueRun, workQueue));\n+\n+    eventBase = base;\n+    eventHTTP = http;\n+    return true;\n+}\n+\n+void InterruptHTTPServer()\n+{\n+    LogPrint(\"http\", \"Interrupting HTTP server\\n\");\n+    if (eventBase)\n+        event_base_loopbreak(eventBase);\n+    if (workQueue)\n+        workQueue->Interrupt();\n+}\n+\n+void StopHTTPServer()\n+{\n+    LogPrint(\"http\", \"Stopping HTTP server\\n\");\n+    delete workQueue;\n+    if (eventHTTP) {\n+        evhttp_free(eventHTTP);\n+        eventHTTP = 0;\n+    }\n+    if (eventBase) {\n+        event_base_free(eventBase);\n+        eventBase = 0;\n+    }\n+}\n+\n+struct event_base* EventBase()\n+{\n+    return eventBase;\n+}\n+\n+static void httpevent_callback_fn(evutil_socket_t, short, void* data)\n+{\n+    // Static handler simply passes through execution flow to _handle method\n+    ((HTTPEvent*)data)->_handle();\n+}\n+\n+void HTTPEvent::_handle()\n+{\n+    (*handler)();\n+    if (deleteWhenTriggered)\n+        delete this;\n+}\n+\n+HTTPEvent::HTTPEvent(struct event_base* base, bool deleteWhenTriggered, HTTPClosure* handler) : deleteWhenTriggered(deleteWhenTriggered), handler(handler)\n+{\n+    ev = event_new(base, -1, 0, httpevent_callback_fn, this);\n+    assert(ev);\n+}\n+HTTPEvent::~HTTPEvent()\n+{\n+    event_free(ev);\n+}\n+void HTTPEvent::trigger(struct timeval* tv)\n+{\n+    if (tv == NULL)\n+        event_active(ev, 0, 0); // immediately trigger event in main thread\n+    else\n+        evtimer_add(ev, tv); // trigger after timeval passed\n+}\n+HTTPRequest::HTTPRequest(struct evhttp_request* req) : req(req),\n+                                                       replySent(false)\n+{\n+}\n+HTTPRequest::~HTTPRequest()\n+{\n+    if (!replySent) {\n+        // Keep track of whether reply was sent to avoid request leaks\n+        LogPrintf(\"%s: Unhandled request\\n\", __func__);\n+        WriteReply(HTTP_INTERNAL, \"Unhandled request\");\n+    }\n+    // evhttpd cleans up the request, as long as a reply was sent.\n+}\n+\n+std::pair<bool, std::string> HTTPRequest::GetHeader(const std::string& hdr)\n+{\n+    const struct evkeyvalq* headers = evhttp_request_get_input_headers(req);\n+    assert(headers);\n+    const char* val = evhttp_find_header(headers, hdr.c_str());\n+    if (val)\n+        return std::make_pair(true, val);\n+    else\n+        return std::make_pair(false, \"\");\n+}\n+\n+std::string HTTPRequest::ReadBody()\n+{\n+    struct evbuffer* buf = evhttp_request_get_input_buffer(req);\n+    if (!buf)\n+        return \"\";\n+    size_t size = evbuffer_get_length(buf);\n+    /** Trivial implementation: if this is ever a performance bottleneck,\n+     * internal copying can be avoided in multi-segment buffers by using\n+     * evbuffer_peek and an awkward loop. Though in that case, it'd be even\n+     * better to not copy into an intermediate string but use a stream\n+     * abstraction to consume the evbuffer on the fly in the parsing algorithm.\n+     */\n+    const char* data = (const char*)evbuffer_pullup(buf, size);\n+    if (!data) // returns NULL in case of empty buffer\n+        return \"\";\n+    std::string rv(data, size);\n+    evbuffer_drain(buf, size);\n+    return rv;\n+}\n+\n+void HTTPRequest::WriteHeader(const std::string& hdr, const std::string& value)\n+{\n+    struct evkeyvalq* headers = evhttp_request_get_output_headers(req);\n+    assert(headers);\n+    evhttp_add_header(headers, hdr.c_str(), value.c_str());\n+}\n+\n+/** Closure sent to main thread to request a reply to be sent to\n+ * a HTTP request.\n+ * Replies must be sent in the main loop in the main http thread,\n+ * this cannot be done from worker threads.\n+ */\n+struct HTTPSendReplyHandler : HTTPClosure {\n+public:\n+    HTTPSendReplyHandler(struct evhttp_request* req, int nStatus) : req(req), nStatus(nStatus)\n+    {\n+    }\n+    void operator()()\n+    {\n+        evhttp_send_reply(req, nStatus, NULL, NULL);\n+    }\n+private:\n+    struct evhttp_request* req;\n+    int nStatus;\n+};\n+\n+void HTTPRequest::WriteReply(int nStatus, const std::string& strReply)\n+{\n+    assert(!replySent && req);\n+    // Send event to main http thread to send reply message\n+    struct evbuffer* evb = evhttp_request_get_output_buffer(req);\n+    assert(evb);\n+    evbuffer_add(evb, strReply.data(), strReply.size());\n+    HTTPEvent* ev = new HTTPEvent(eventBase, true,\n+                                  new HTTPSendReplyHandler(req, nStatus));\n+    ev->trigger(0);\n+    replySent = true;\n+    req = 0; // transferred back to main thread\n+}\n+\n+CService HTTPRequest::GetPeer()\n+{\n+    evhttp_connection* con = evhttp_request_get_connection(req);\n+    CService peer;\n+    if (con) {\n+        // evhttp retains ownership over returned address string\n+        const char* address = \"\";\n+        uint16_t port = 0;\n+        evhttp_connection_get_peer(con, (char**)&address, &port);\n+        peer = CService(address, port);\n+    }\n+    return peer;\n+}\n+\n+std::string HTTPRequest::GetURI()\n+{\n+    return evhttp_request_get_uri(req);\n+}\n+\n+HTTPRequest::RequestMethod HTTPRequest::GetRequestMethod()\n+{\n+    switch (evhttp_request_get_command(req)) {\n+    case EVHTTP_REQ_GET:\n+        return GET;\n+        break;\n+    case EVHTTP_REQ_POST:\n+        return POST;\n+        break;\n+    case EVHTTP_REQ_HEAD:\n+        return HEAD;\n+        break;\n+    case EVHTTP_REQ_PUT:\n+        return PUT;\n+        break;\n+    default:\n+        return UNKNOWN;\n+        break;\n+    }\n+}\n+\n+void RegisterHTTPHandler(const std::string &prefix, bool exactMatch, const HTTPRequestHandler &handler)\n+{\n+    LogPrint(\"http\", \"Registering HTTP handler for %s (exactmath %d)\\n\", prefix, exactMatch);\n+    pathHandlers.push_back(HTTPPathHandler(prefix, exactMatch, handler));\n+}\n+\n+void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch)\n+{\n+    std::vector<HTTPPathHandler>::iterator i = pathHandlers.begin();\n+    std::vector<HTTPPathHandler>::iterator iend = pathHandlers.end();\n+    for (; i != iend; ++i)\n+        if (i->prefix == prefix && i->exactMatch == exactMatch)\n+            break;\n+    if (i != iend)\n+    {\n+        LogPrint(\"http\", \"Unregistering HTTP handler for %s (exactmath %d)\\n\", prefix, exactMatch);\n+        pathHandlers.erase(i);\n+    }\n+}\n+"
      },
      {
        "sha": "c6a7804195f53a8d70da502e7164ebb032a8f13f",
        "filename": "src/httpserver.h",
        "status": "added",
        "additions": 138,
        "deletions": 0,
        "changes": 138,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40b556d3742a1f65d67e2d4c760d0b13fe8be5b7/src/httpserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40b556d3742a1f65d67e2d4c760d0b13fe8be5b7/src/httpserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.h?ref=40b556d3742a1f65d67e2d4c760d0b13fe8be5b7",
        "patch": "@@ -0,0 +1,138 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_HTTPSERVER_H\n+#define BITCOIN_HTTPSERVER_H\n+\n+#include <string>\n+#include <stdint.h>\n+#include <boost/thread.hpp>\n+#include <boost/scoped_ptr.hpp>\n+#include <boost/function.hpp>\n+\n+struct evhttp_request;\n+struct event_base;\n+class CService;\n+class HTTPRequest;\n+\n+/** Start HTTP server */\n+bool StartHTTPServer(boost::thread_group& threadGroup);\n+/** Interrupt HTTP server threads */\n+void InterruptHTTPServer();\n+/** Stop HTTP server */\n+void StopHTTPServer();\n+\n+/** Handler for requests to a certain HTTP path */\n+typedef boost::function<void(HTTPRequest* req, const std::string &)> HTTPRequestHandler;\n+/** Register handler for prefix.\n+ * If multiple handlers match a prefix, the first-registered one will\n+ * be invoked.\n+ */\n+void RegisterHTTPHandler(const std::string &prefix, bool exactMatch, const HTTPRequestHandler &handler);\n+/** Unregister handler for prefix */\n+void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch);\n+\n+/** Return evhttp event base. This can be used by submodules to\n+ * queue timers or custom events.\n+ */\n+struct event_base* EventBase();\n+\n+/** In-flight HTTP request.\n+ * Thin C++ wrapper around evhttp_request.\n+ */\n+class HTTPRequest\n+{\n+private:\n+    struct evhttp_request* req;\n+    bool replySent;\n+\n+public:\n+    HTTPRequest(struct evhttp_request* req);\n+    ~HTTPRequest();\n+\n+    enum RequestMethod {\n+        UNKNOWN,\n+        GET,\n+        POST,\n+        HEAD,\n+        PUT\n+    };\n+\n+    /** Get requested URI.\n+     */\n+    std::string GetURI();\n+\n+    /** Get CService (address:ip) for the origin of the http request.\n+     */\n+    CService GetPeer();\n+\n+    /** Get request method.\n+     */\n+    RequestMethod GetRequestMethod();\n+\n+    /**\n+     * Get the request header specified by hdr, or an empty string.\n+     * Return an pair (isPresent,string).\n+     */\n+    std::pair<bool, std::string> GetHeader(const std::string& hdr);\n+\n+    /**\n+     * Read request body.\n+     *\n+     * @note As this consumes the underlying buffer, call this only once.\n+     * Repeated calls will return an empty string.\n+     */\n+    std::string ReadBody();\n+\n+    /**\n+     * Write output header.\n+     *\n+     * @note call this before calling WriteErrorReply or Reply.\n+     */\n+    void WriteHeader(const std::string& hdr, const std::string& value);\n+\n+    /**\n+     * Write HTTP reply.\n+     * nStatus is the HTTP status code to send.\n+     * strReply is the body of the reply. Keep it empty to send a standard message.\n+     *\n+     * @note Can be called only once. As this will give the request back to the\n+     * main thread, do not call any other HTTPRequest methods after calling this.\n+     */\n+    void WriteReply(int nStatus, const std::string& strReply = \"\");\n+};\n+\n+/** Event handler closure.\n+ */\n+class HTTPClosure\n+{\n+public:\n+    virtual void operator()() = 0;\n+    virtual ~HTTPClosure() {}\n+};\n+\n+/** Event class. This can be used either as an cross-thread trigger or as a timer.\n+ */\n+class HTTPEvent\n+{\n+public:\n+    /** Create a new event */\n+    HTTPEvent(struct event_base* base, bool deleteWhenTriggered, HTTPClosure* handler);\n+    ~HTTPEvent();\n+\n+    /** Trigger the event. If tv is 0, trigger it immediately. Otherwise trigger it after\n+     * the given time has elapsed.\n+     */\n+    void trigger(struct timeval* tv);\n+\n+    /** Internal function for handling, do not call directly */\n+    void _handle();\n+\n+private:\n+    bool deleteWhenTriggered;\n+    struct event* ev;\n+    boost::scoped_ptr<HTTPClosure> handler;\n+};\n+\n+#endif // BITCOIN_HTTPSERVER_H"
      },
      {
        "sha": "835ed4001072d636b7770702b6bc6a5cf447d832",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 11,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40b556d3742a1f65d67e2d4c760d0b13fe8be5b7/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40b556d3742a1f65d67e2d4c760d0b13fe8be5b7/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=40b556d3742a1f65d67e2d4c760d0b13fe8be5b7",
        "patch": "@@ -16,6 +16,8 @@\n #include \"checkpoints.h\"\n #include \"compat/sanity.h\"\n #include \"consensus/validation.h\"\n+#include \"httpserver.h\"\n+#include \"httprpc.h\"\n #include \"key.h\"\n #include \"main.h\"\n #include \"miner.h\"\n@@ -144,6 +146,15 @@ class CCoinsViewErrorCatcher : public CCoinsViewBacked\n static CCoinsViewDB *pcoinsdbview = NULL;\n static CCoinsViewErrorCatcher *pcoinscatcher = NULL;\n \n+void Interrupt(boost::thread_group& threadGroup)\n+{\n+    InterruptHTTPServer();\n+    InterruptHTTPRPC();\n+    InterruptRPC();\n+    InterruptREST();\n+    threadGroup.interrupt_all();\n+}\n+\n void Shutdown()\n {\n     LogPrintf(\"%s: In progress...\\n\", __func__);\n@@ -158,7 +169,11 @@ void Shutdown()\n     /// module was initialized.\n     RenameThread(\"bitcoin-shutoff\");\n     mempool.AddTransactionsUpdated(1);\n-    StopRPCThreads();\n+\n+    StopHTTPRPC();\n+    StopREST();\n+    StopRPC();\n+    StopHTTPServer();\n #ifdef ENABLE_WALLET\n     if (pwalletMain)\n         pwalletMain->Flush(false);\n@@ -424,13 +439,6 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)\"), 8332, 18332));\n     strUsage += HelpMessageOpt(\"-rpcallowip=<ip>\", _(\"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\"));\n     strUsage += HelpMessageOpt(\"-rpcthreads=<n>\", strprintf(_(\"Set the number of threads to service RPC calls (default: %d)\"), 4));\n-    strUsage += HelpMessageOpt(\"-rpckeepalive\", strprintf(_(\"RPC support for HTTP persistent connections (default: %d)\"), 1));\n-\n-    strUsage += HelpMessageGroup(_(\"RPC SSL options: (see the Bitcoin Wiki for SSL setup instructions)\"));\n-    strUsage += HelpMessageOpt(\"-rpcssl\", _(\"Use OpenSSL (https) for JSON-RPC connections\"));\n-    strUsage += HelpMessageOpt(\"-rpcsslcertificatechainfile=<file.cert>\", strprintf(_(\"Server certificate file (default: %s)\"), \"server.cert\"));\n-    strUsage += HelpMessageOpt(\"-rpcsslprivatekeyfile=<file.pem>\", strprintf(_(\"Server private key (default: %s)\"), \"server.pem\"));\n-    strUsage += HelpMessageOpt(\"-rpcsslciphers=<ciphers>\", strprintf(_(\"Acceptable ciphers (default: %s)\"), \"TLSv1.2+HIGH:TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!3DES:@STRENGTH\"));\n \n     if (mode == HMM_BITCOIN_QT)\n     {\n@@ -602,6 +610,21 @@ bool InitSanityCheck(void)\n     return true;\n }\n \n+bool AppInitServers(boost::thread_group& threadGroup)\n+{\n+    RPCServer::OnStopped(&OnRPCStopped);\n+    RPCServer::OnPreCommand(&OnRPCPreCommand);\n+    if (!StartHTTPServer(threadGroup))\n+        return false;\n+    if (!StartRPC())\n+        return false;\n+    if (!StartHTTPRPC())\n+        return false;\n+    if (GetBoolArg(\"-rest\", false) && !StartREST())\n+        return false;\n+    return true;\n+}\n+\n /** Initialize bitcoin.\n  *  @pre Parameters should be parsed and config file should be read.\n  */\n@@ -990,9 +1013,8 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     if (fServer)\n     {\n         uiInterface.InitMessage.connect(SetRPCWarmupStatus);\n-        RPCServer::OnStopped(&OnRPCStopped);\n-        RPCServer::OnPreCommand(&OnRPCPreCommand);\n-        StartRPCThreads();\n+        if (!AppInitServers(threadGroup))\n+            return InitError(_(\"Unable to start HTTP server. See debug log for details.\"));\n     }\n \n     int64_t nStart;"
      },
      {
        "sha": "8cd51b0286f5dfe0d33b5b02c179568627a05737",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40b556d3742a1f65d67e2d4c760d0b13fe8be5b7/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40b556d3742a1f65d67e2d4c760d0b13fe8be5b7/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=40b556d3742a1f65d67e2d4c760d0b13fe8be5b7",
        "patch": "@@ -20,6 +20,8 @@ extern CWallet* pwalletMain;\n \n void StartShutdown();\n bool ShutdownRequested();\n+/** Interrupt threads */\n+void Interrupt(boost::thread_group& threadGroup);\n void Shutdown();\n bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler);\n "
      },
      {
        "sha": "ea7f86d18e53f78a9a3b1e28f04fe645e75e430c",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 8,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40b556d3742a1f65d67e2d4c760d0b13fe8be5b7/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40b556d3742a1f65d67e2d4c760d0b13fe8be5b7/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=40b556d3742a1f65d67e2d4c760d0b13fe8be5b7",
        "patch": "@@ -266,13 +266,6 @@ void BitcoinCore::initialize()\n     {\n         qDebug() << __func__ << \": Running AppInit2 in thread\";\n         int rv = AppInit2(threadGroup, scheduler);\n-        if(rv)\n-        {\n-            /* Start a dummy RPC thread if no RPC thread is active yet\n-             * to handle timeouts.\n-             */\n-            StartDummyRPCThread();\n-        }\n         Q_EMIT initializeResult(rv);\n     } catch (const std::exception& e) {\n         handleRunawayException(&e);\n@@ -286,7 +279,7 @@ void BitcoinCore::shutdown()\n     try\n     {\n         qDebug() << __func__ << \": Running Shutdown in thread\";\n-        threadGroup.interrupt_all();\n+        Interrupt(threadGroup);\n         threadGroup.join_all();\n         Shutdown();\n         qDebug() << __func__ << \": Shutdown finished\";"
      },
      {
        "sha": "940526706798faec6c4e935b0012cea1e9089aa2",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 111,
        "deletions": 132,
        "changes": 243,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40b556d3742a1f65d67e2d4c760d0b13fe8be5b7/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40b556d3742a1f65d67e2d4c760d0b13fe8be5b7/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=40b556d3742a1f65d67e2d4c760d0b13fe8be5b7",
        "patch": "@@ -7,6 +7,7 @@\n #include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n #include \"main.h\"\n+#include \"httpserver.h\"\n #include \"rpcserver.h\"\n #include \"streams.h\"\n #include \"sync.h\"\n@@ -56,29 +57,21 @@ struct CCoin {\n     }\n };\n \n-class RestErr\n-{\n-public:\n-    enum HTTPStatusCode status;\n-    string message;\n-};\n-\n extern void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry);\n extern UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool txDetails = false);\n extern UniValue mempoolInfoToJSON();\n extern UniValue mempoolToJSON(bool fVerbose = false);\n extern void ScriptPubKeyToJSON(const CScript& scriptPubKey, UniValue& out, bool fIncludeHex);\n extern UniValue blockheaderToJSON(const CBlockIndex* blockindex);\n \n-static RestErr RESTERR(enum HTTPStatusCode status, string message)\n+static bool RESTERR(HTTPRequest* req, enum HTTPStatusCode status, string message)\n {\n-    RestErr re;\n-    re.status = status;\n-    re.message = message;\n-    return re;\n+    req->WriteHeader(\"Content-Type\", \"text/plain\");\n+    req->WriteReply(status, message + \"\\r\\n\");\n+    return false;\n }\n \n-static enum RetFormat ParseDataFormat(vector<string>& params, const string strReq)\n+static enum RetFormat ParseDataFormat(vector<string>& params, const string& strReq)\n {\n     boost::split(params, strReq, boost::is_any_of(\".\"));\n     if (params.size() > 1) {\n@@ -115,28 +108,35 @@ static bool ParseHashStr(const string& strReq, uint256& v)\n     return true;\n }\n \n-static bool rest_headers(AcceptedConnection* conn,\n-                         const std::string& strURIPart,\n-                         const std::string& strRequest,\n-                         const std::map<std::string, std::string>& mapHeaders,\n-                         bool fRun)\n+static bool CheckWarmup(HTTPRequest* req)\n+{\n+    std::string statusmessage;\n+    if (RPCIsInWarmup(&statusmessage))\n+         return RESTERR(req, HTTP_SERVICE_UNAVAILABLE, \"Service temporarily unavailable: \" + statusmessage);\n+    return true;\n+}\n+\n+static bool rest_headers(HTTPRequest* req,\n+                         const std::string& strURIPart)\n {\n+    if (!CheckWarmup(req))\n+        return false;\n     vector<string> params;\n     const RetFormat rf = ParseDataFormat(params, strURIPart);\n     vector<string> path;\n     boost::split(path, params[0], boost::is_any_of(\"/\"));\n \n     if (path.size() != 2)\n-        throw RESTERR(HTTP_BAD_REQUEST, \"No header count specified. Use /rest/headers/<count>/<hash>.<ext>.\");\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"No header count specified. Use /rest/headers/<count>/<hash>.<ext>.\");\n \n     long count = strtol(path[0].c_str(), NULL, 10);\n     if (count < 1 || count > 2000)\n-        throw RESTERR(HTTP_BAD_REQUEST, \"Header count out of range: \" + path[0]);\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of range: \" + path[0]);\n \n     string hashStr = path[1];\n     uint256 hash;\n     if (!ParseHashStr(hashStr, hash))\n-        throw RESTERR(HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n \n     std::vector<const CBlockIndex *> headers;\n     headers.reserve(count);\n@@ -160,63 +160,63 @@ static bool rest_headers(AcceptedConnection* conn,\n     switch (rf) {\n     case RF_BINARY: {\n         string binaryHeader = ssHeader.str();\n-        conn->stream() << HTTPReplyHeader(HTTP_OK, fRun, binaryHeader.size(), \"application/octet-stream\") << binaryHeader << std::flush;\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryHeader);\n         return true;\n     }\n \n     case RF_HEX: {\n         string strHex = HexStr(ssHeader.begin(), ssHeader.end()) + \"\\n\";\n-        conn->stream() << HTTPReply(HTTP_OK, strHex, fRun, false, \"text/plain\") << std::flush;\n+        req->WriteHeader(\"Content-Type\", \"text/plain\");\n+        req->WriteReply(HTTP_OK, strHex);\n         return true;\n     }\n-\n     case RF_JSON: {\n         UniValue jsonHeaders(UniValue::VARR);\n         BOOST_FOREACH(const CBlockIndex *pindex, headers) {\n             jsonHeaders.push_back(blockheaderToJSON(pindex));\n         }\n         string strJSON = jsonHeaders.write() + \"\\n\";\n-        conn->stream() << HTTPReply(HTTP_OK, strJSON, fRun) << std::flush;\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strJSON);\n         return true;\n     }\n-\n     default: {\n-        throw RESTERR(HTTP_NOT_FOUND, \"output format not found (available: .bin, .hex)\");\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: .bin, .hex)\");\n     }\n     }\n \n     // not reached\n     return true; // continue to process further HTTP reqs on this cxn\n }\n \n-static bool rest_block(AcceptedConnection* conn,\n+static bool rest_block(HTTPRequest* req,\n                        const std::string& strURIPart,\n-                       const std::string& strRequest,\n-                       const std::map<std::string, std::string>& mapHeaders,\n-                       bool fRun,\n                        bool showTxDetails)\n {\n+    if (!CheckWarmup(req))\n+        return false;\n     vector<string> params;\n     const RetFormat rf = ParseDataFormat(params, strURIPart);\n \n     string hashStr = params[0];\n     uint256 hash;\n     if (!ParseHashStr(hashStr, hash))\n-        throw RESTERR(HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n \n     CBlock block;\n     CBlockIndex* pblockindex = NULL;\n     {\n         LOCK(cs_main);\n         if (mapBlockIndex.count(hash) == 0)\n-            throw RESTERR(HTTP_NOT_FOUND, hashStr + \" not found\");\n+            return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not found\");\n \n         pblockindex = mapBlockIndex[hash];\n         if (fHavePruned && !(pblockindex->nStatus & BLOCK_HAVE_DATA) && pblockindex->nTx > 0)\n-            throw RESTERR(HTTP_NOT_FOUND, hashStr + \" not available (pruned data)\");\n+            return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not available (pruned data)\");\n \n         if (!ReadBlockFromDisk(block, pblockindex))\n-            throw RESTERR(HTTP_NOT_FOUND, hashStr + \" not found\");\n+            return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not found\");\n     }\n \n     CDataStream ssBlock(SER_NETWORK, PROTOCOL_VERSION);\n@@ -225,56 +225,49 @@ static bool rest_block(AcceptedConnection* conn,\n     switch (rf) {\n     case RF_BINARY: {\n         string binaryBlock = ssBlock.str();\n-        conn->stream() << HTTPReplyHeader(HTTP_OK, fRun, binaryBlock.size(), \"application/octet-stream\") << binaryBlock << std::flush;\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryBlock);\n         return true;\n     }\n \n     case RF_HEX: {\n         string strHex = HexStr(ssBlock.begin(), ssBlock.end()) + \"\\n\";\n-        conn->stream() << HTTPReply(HTTP_OK, strHex, fRun, false, \"text/plain\") << std::flush;\n+        req->WriteHeader(\"Content-Type\", \"text/plain\");\n+        req->WriteReply(HTTP_OK, strHex);\n         return true;\n     }\n \n     case RF_JSON: {\n         UniValue objBlock = blockToJSON(block, pblockindex, showTxDetails);\n         string strJSON = objBlock.write() + \"\\n\";\n-        conn->stream() << HTTPReply(HTTP_OK, strJSON, fRun) << std::flush;\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strJSON);\n         return true;\n     }\n \n     default: {\n-        throw RESTERR(HTTP_NOT_FOUND, \"output format not found (available: \" + AvailableDataFormatsString() + \")\");\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: \" + AvailableDataFormatsString() + \")\");\n     }\n     }\n \n     // not reached\n     return true; // continue to process further HTTP reqs on this cxn\n }\n \n-static bool rest_block_extended(AcceptedConnection* conn,\n-                       const std::string& strURIPart,\n-                       const std::string& strRequest,\n-                       const std::map<std::string, std::string>& mapHeaders,\n-                       bool fRun)\n+static bool rest_block_extended(HTTPRequest* req, const std::string& strURIPart)\n {\n-    return rest_block(conn, strURIPart, strRequest, mapHeaders, fRun, true);\n+    return rest_block(req, strURIPart, true);\n }\n \n-static bool rest_block_notxdetails(AcceptedConnection* conn,\n-                       const std::string& strURIPart,\n-                       const std::string& strRequest,\n-                       const std::map<std::string, std::string>& mapHeaders,\n-                       bool fRun)\n+static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPart)\n {\n-    return rest_block(conn, strURIPart, strRequest, mapHeaders, fRun, false);\n+    return rest_block(req, strURIPart, false);\n }\n \n-static bool rest_chaininfo(AcceptedConnection* conn,\n-                           const std::string& strURIPart,\n-                           const std::string& strRequest,\n-                           const std::map<std::string, std::string>& mapHeaders,\n-                           bool fRun)\n+static bool rest_chaininfo(HTTPRequest* req, const std::string& strURIPart)\n {\n+    if (!CheckWarmup(req))\n+        return false;\n     vector<string> params;\n     const RetFormat rf = ParseDataFormat(params, strURIPart);\n \n@@ -283,24 +276,23 @@ static bool rest_chaininfo(AcceptedConnection* conn,\n         UniValue rpcParams(UniValue::VARR);\n         UniValue chainInfoObject = getblockchaininfo(rpcParams, false);\n         string strJSON = chainInfoObject.write() + \"\\n\";\n-        conn->stream() << HTTPReply(HTTP_OK, strJSON, fRun) << std::flush;\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strJSON);\n         return true;\n     }\n     default: {\n-        throw RESTERR(HTTP_NOT_FOUND, \"output format not found (available: json)\");\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: json)\");\n     }\n     }\n \n     // not reached\n     return true; // continue to process further HTTP reqs on this cxn\n }\n \n-static bool rest_mempool_info(AcceptedConnection* conn,\n-                              const std::string& strURIPart,\n-                              const std::string& strRequest,\n-                              const std::map<std::string, std::string>& mapHeaders,\n-                              bool fRun)\n+static bool rest_mempool_info(HTTPRequest* req, const std::string& strURIPart)\n {\n+    if (!CheckWarmup(req))\n+        return false;\n     vector<string> params;\n     const RetFormat rf = ParseDataFormat(params, strURIPart);\n \n@@ -309,24 +301,23 @@ static bool rest_mempool_info(AcceptedConnection* conn,\n         UniValue mempoolInfoObject = mempoolInfoToJSON();\n \n         string strJSON = mempoolInfoObject.write() + \"\\n\";\n-        conn->stream() << HTTPReply(HTTP_OK, strJSON, fRun) << std::flush;\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strJSON);\n         return true;\n     }\n     default: {\n-        throw RESTERR(HTTP_NOT_FOUND, \"output format not found (available: json)\");\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: json)\");\n     }\n     }\n \n     // not reached\n     return true; // continue to process further HTTP reqs on this cxn\n }\n \n-static bool rest_mempool_contents(AcceptedConnection* conn,\n-                                  const std::string& strURIPart,\n-                                  const std::string& strRequest,\n-                                  const std::map<std::string, std::string>& mapHeaders,\n-                                  bool fRun)\n+static bool rest_mempool_contents(HTTPRequest* req, const std::string& strURIPart)\n {\n+    if (!CheckWarmup(req))\n+        return false;\n     vector<string> params;\n     const RetFormat rf = ParseDataFormat(params, strURIPart);\n \n@@ -335,76 +326,76 @@ static bool rest_mempool_contents(AcceptedConnection* conn,\n         UniValue mempoolObject = mempoolToJSON(true);\n \n         string strJSON = mempoolObject.write() + \"\\n\";\n-        conn->stream() << HTTPReply(HTTP_OK, strJSON, fRun) << std::flush;\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strJSON);\n         return true;\n     }\n     default: {\n-        throw RESTERR(HTTP_NOT_FOUND, \"output format not found (available: json)\");\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: json)\");\n     }\n     }\n \n     // not reached\n     return true; // continue to process further HTTP reqs on this cxn\n }\n \n-static bool rest_tx(AcceptedConnection* conn,\n-                    const std::string& strURIPart,\n-                    const std::string& strRequest,\n-                    const std::map<std::string, std::string>& mapHeaders,\n-                    bool fRun)\n+static bool rest_tx(HTTPRequest* req, const std::string& strURIPart)\n {\n+    if (!CheckWarmup(req))\n+        return false;\n     vector<string> params;\n     const RetFormat rf = ParseDataFormat(params, strURIPart);\n \n     string hashStr = params[0];\n     uint256 hash;\n     if (!ParseHashStr(hashStr, hash))\n-        throw RESTERR(HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n \n     CTransaction tx;\n     uint256 hashBlock = uint256();\n     if (!GetTransaction(hash, tx, hashBlock, true))\n-        throw RESTERR(HTTP_NOT_FOUND, hashStr + \" not found\");\n+        return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not found\");\n \n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n     ssTx << tx;\n \n     switch (rf) {\n     case RF_BINARY: {\n         string binaryTx = ssTx.str();\n-        conn->stream() << HTTPReplyHeader(HTTP_OK, fRun, binaryTx.size(), \"application/octet-stream\") << binaryTx << std::flush;\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryTx);\n         return true;\n     }\n \n     case RF_HEX: {\n         string strHex = HexStr(ssTx.begin(), ssTx.end()) + \"\\n\";\n-        conn->stream() << HTTPReply(HTTP_OK, strHex, fRun, false, \"text/plain\") << std::flush;\n+        req->WriteHeader(\"Content-Type\", \"text/plain\");\n+        req->WriteReply(HTTP_OK, strHex);\n         return true;\n     }\n \n     case RF_JSON: {\n         UniValue objTx(UniValue::VOBJ);\n         TxToJSON(tx, hashBlock, objTx);\n         string strJSON = objTx.write() + \"\\n\";\n-        conn->stream() << HTTPReply(HTTP_OK, strJSON, fRun) << std::flush;\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strJSON);\n         return true;\n     }\n \n     default: {\n-        throw RESTERR(HTTP_NOT_FOUND, \"output format not found (available: \" + AvailableDataFormatsString() + \")\");\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: \" + AvailableDataFormatsString() + \")\");\n     }\n     }\n \n     // not reached\n     return true; // continue to process further HTTP reqs on this cxn\n }\n \n-static bool rest_getutxos(AcceptedConnection* conn,\n-                          const std::string& strURIPart,\n-                          const std::string& strRequest,\n-                          const std::map<std::string, std::string>& mapHeaders,\n-                          bool fRun)\n+static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n {\n+    if (!CheckWarmup(req))\n+        return false;\n     vector<string> params;\n     enum RetFormat rf = ParseDataFormat(params, strURIPart);\n \n@@ -416,8 +407,9 @@ static bool rest_getutxos(AcceptedConnection* conn,\n     }\n \n     // throw exception in case of a empty request\n-    if (strRequest.length() == 0 && uriParts.size() == 0)\n-        throw RESTERR(HTTP_INTERNAL_SERVER_ERROR, \"Error: empty request\");\n+    std::string strRequestMutable = req->ReadBody();\n+    if (strRequestMutable.length() == 0 && uriParts.size() == 0)\n+        return RESTERR(req, HTTP_INTERNAL_SERVER_ERROR, \"Error: empty request\");\n \n     bool fInputParsed = false;\n     bool fCheckMemPool = false;\n@@ -441,7 +433,7 @@ static bool rest_getutxos(AcceptedConnection* conn,\n             std::string strOutput = uriParts[i].substr(uriParts[i].find(\"-\")+1);\n \n             if (!ParseInt32(strOutput, &nOutput) || !IsHex(strTxid))\n-                throw RESTERR(HTTP_INTERNAL_SERVER_ERROR, \"Parse error\");\n+                return RESTERR(req, HTTP_INTERNAL_SERVER_ERROR, \"Parse error\");\n \n             txid.SetHex(strTxid);\n             vOutPoints.push_back(COutPoint(txid, (uint32_t)nOutput));\n@@ -450,15 +442,13 @@ static bool rest_getutxos(AcceptedConnection* conn,\n         if (vOutPoints.size() > 0)\n             fInputParsed = true;\n         else\n-            throw RESTERR(HTTP_INTERNAL_SERVER_ERROR, \"Error: empty request\");\n+            return RESTERR(req, HTTP_INTERNAL_SERVER_ERROR, \"Error: empty request\");\n     }\n \n-    string strRequestMutable = strRequest; //convert const string to string for allowing hex to bin converting\n-\n     switch (rf) {\n     case RF_HEX: {\n         // convert hex to bin, continue then with bin part\n-        std::vector<unsigned char> strRequestV = ParseHex(strRequest);\n+        std::vector<unsigned char> strRequestV = ParseHex(strRequestMutable);\n         strRequestMutable.assign(strRequestV.begin(), strRequestV.end());\n     }\n \n@@ -468,7 +458,7 @@ static bool rest_getutxos(AcceptedConnection* conn,\n             if (strRequestMutable.size() > 0)\n             {\n                 if (fInputParsed) //don't allow sending input over URI and HTTP RAW DATA\n-                    throw RESTERR(HTTP_INTERNAL_SERVER_ERROR, \"Combination of URI scheme inputs and raw post data is not allowed\");\n+                    return RESTERR(req, HTTP_INTERNAL_SERVER_ERROR, \"Combination of URI scheme inputs and raw post data is not allowed\");\n \n                 CDataStream oss(SER_NETWORK, PROTOCOL_VERSION);\n                 oss << strRequestMutable;\n@@ -477,24 +467,24 @@ static bool rest_getutxos(AcceptedConnection* conn,\n             }\n         } catch (const std::ios_base::failure& e) {\n             // abort in case of unreadable binary data\n-            throw RESTERR(HTTP_INTERNAL_SERVER_ERROR, \"Parse error\");\n+            return RESTERR(req, HTTP_INTERNAL_SERVER_ERROR, \"Parse error\");\n         }\n         break;\n     }\n \n     case RF_JSON: {\n         if (!fInputParsed)\n-            throw RESTERR(HTTP_INTERNAL_SERVER_ERROR, \"Error: empty request\");\n+            return RESTERR(req, HTTP_INTERNAL_SERVER_ERROR, \"Error: empty request\");\n         break;\n     }\n     default: {\n-        throw RESTERR(HTTP_NOT_FOUND, \"output format not found (available: \" + AvailableDataFormatsString() + \")\");\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: \" + AvailableDataFormatsString() + \")\");\n     }\n     }\n \n     // limit max outpoints\n     if (vOutPoints.size() > MAX_GETUTXOS_OUTPOINTS)\n-        throw RESTERR(HTTP_INTERNAL_SERVER_ERROR, strprintf(\"Error: max outpoints exceeded (max: %d, tried: %d)\", MAX_GETUTXOS_OUTPOINTS, vOutPoints.size()));\n+        return RESTERR(req, HTTP_INTERNAL_SERVER_ERROR, strprintf(\"Error: max outpoints exceeded (max: %d, tried: %d)\", MAX_GETUTXOS_OUTPOINTS, vOutPoints.size()));\n \n     // check spentness and form a bitmap (as well as a JSON capable human-readble string representation)\n     vector<unsigned char> bitmap;\n@@ -544,7 +534,8 @@ static bool rest_getutxos(AcceptedConnection* conn,\n         ssGetUTXOResponse << chainActive.Height() << chainActive.Tip()->GetBlockHash() << bitmap << outs;\n         string ssGetUTXOResponseString = ssGetUTXOResponse.str();\n \n-        conn->stream() << HTTPReplyHeader(HTTP_OK, fRun, ssGetUTXOResponseString.size(), \"application/octet-stream\") << ssGetUTXOResponseString << std::flush;\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, ssGetUTXOResponseString);\n         return true;\n     }\n \n@@ -553,7 +544,8 @@ static bool rest_getutxos(AcceptedConnection* conn,\n         ssGetUTXOResponse << chainActive.Height() << chainActive.Tip()->GetBlockHash() << bitmap << outs;\n         string strHex = HexStr(ssGetUTXOResponse.begin(), ssGetUTXOResponse.end()) + \"\\n\";\n \n-        conn->stream() << HTTPReply(HTTP_OK, strHex, fRun, false, \"text/plain\") << std::flush;\n+        req->WriteHeader(\"Content-Type\", \"text/plain\");\n+        req->WriteReply(HTTP_OK, strHex);\n         return true;\n     }\n \n@@ -583,11 +575,12 @@ static bool rest_getutxos(AcceptedConnection* conn,\n \n         // return json string\n         string strJSON = objGetUTXOResponse.write() + \"\\n\";\n-        conn->stream() << HTTPReply(HTTP_OK, strJSON, fRun) << std::flush;\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strJSON);\n         return true;\n     }\n     default: {\n-        throw RESTERR(HTTP_NOT_FOUND, \"output format not found (available: \" + AvailableDataFormatsString() + \")\");\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: \" + AvailableDataFormatsString() + \")\");\n     }\n     }\n \n@@ -597,11 +590,7 @@ static bool rest_getutxos(AcceptedConnection* conn,\n \n static const struct {\n     const char* prefix;\n-    bool (*handler)(AcceptedConnection* conn,\n-                    const std::string& strURIPart,\n-                    const std::string& strRequest,\n-                    const std::map<std::string, std::string>& mapHeaders,\n-                    bool fRun);\n+    bool (*handler)(HTTPRequest* req, const std::string& strReq);\n } uri_prefixes[] = {\n       {\"/rest/tx/\", rest_tx},\n       {\"/rest/block/notxdetails/\", rest_block_notxdetails},\n@@ -613,29 +602,19 @@ static const struct {\n       {\"/rest/getutxos\", rest_getutxos},\n };\n \n-bool HTTPReq_REST(AcceptedConnection* conn,\n-                  const std::string& strURI,\n-                  const string& strRequest,\n-                  const std::map<std::string, std::string>& mapHeaders,\n-                  bool fRun)\n+bool StartREST()\n {\n-    try {\n-        std::string statusmessage;\n-        if (RPCIsInWarmup(&statusmessage))\n-            throw RESTERR(HTTP_SERVICE_UNAVAILABLE, \"Service temporarily unavailable: \" + statusmessage);\n-\n-        for (unsigned int i = 0; i < ARRAYLEN(uri_prefixes); i++) {\n-            unsigned int plen = strlen(uri_prefixes[i].prefix);\n-            if (strURI.substr(0, plen) == uri_prefixes[i].prefix) {\n-                string strURIPart = strURI.substr(plen);\n-                return uri_prefixes[i].handler(conn, strURIPart, strRequest, mapHeaders, fRun);\n-            }\n-        }\n-    } catch (const RestErr& re) {\n-        conn->stream() << HTTPReply(re.status, re.message + \"\\r\\n\", false, false, \"text/plain\") << std::flush;\n-        return false;\n-    }\n+    for (unsigned int i = 0; i < ARRAYLEN(uri_prefixes); i++)\n+        RegisterHTTPHandler(uri_prefixes[i].prefix, false, uri_prefixes[i].handler);\n+    return true;\n+}\n \n-    conn->stream() << HTTPError(HTTP_NOT_FOUND, false) << std::flush;\n-    return false;\n+void InterruptREST()\n+{\n+}\n+\n+void StopREST()\n+{\n+    for (unsigned int i = 0; i < ARRAYLEN(uri_prefixes); i++)\n+        UnregisterHTTPHandler(uri_prefixes[i].prefix, false);\n }"
      },
      {
        "sha": "d83cd87f9400a23c9e23fc0c8da13a38aa0f49b2",
        "filename": "src/rpcprotocol.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 229,
        "changes": 229,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40b556d3742a1f65d67e2d4c760d0b13fe8be5b7/src/rpcprotocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40b556d3742a1f65d67e2d4c760d0b13fe8be5b7/src/rpcprotocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcprotocol.cpp?ref=40b556d3742a1f65d67e2d4c760d0b13fe8be5b7",
        "patch": "@@ -5,7 +5,6 @@\n \n #include \"rpcprotocol.h\"\n \n-#include \"clientversion.h\"\n #include \"random.h\"\n #include \"tinyformat.h\"\n #include \"util.h\"\n@@ -16,236 +15,8 @@\n #include <stdint.h>\n #include <fstream>\n \n-#include <boost/algorithm/string.hpp>\n-#include <boost/asio.hpp>\n-#include <boost/asio/ssl.hpp>\n-#include <boost/bind.hpp>\n-#include <boost/filesystem.hpp>\n-#include <boost/foreach.hpp>\n-#include <boost/iostreams/concepts.hpp>\n-#include <boost/iostreams/stream.hpp>\n-#include <boost/shared_ptr.hpp>\n-\n-#include \"univalue/univalue.h\"\n-\n using namespace std;\n \n-//! Number of bytes to allocate and read at most at once in post data\n-const size_t POST_READ_SIZE = 256 * 1024;\n-\n-/**\n- * HTTP protocol\n- * \n- * This ain't Apache.  We're just using HTTP header for the length field\n- * and to be compatible with other JSON-RPC implementations.\n- */\n-\n-string HTTPPost(const string& strMsg, const map<string,string>& mapRequestHeaders)\n-{\n-    ostringstream s;\n-    s << \"POST / HTTP/1.1\\r\\n\"\n-      << \"User-Agent: bitcoin-json-rpc/\" << FormatFullVersion() << \"\\r\\n\"\n-      << \"Host: 127.0.0.1\\r\\n\"\n-      << \"Content-Type: application/json\\r\\n\"\n-      << \"Content-Length: \" << strMsg.size() << \"\\r\\n\"\n-      << \"Connection: close\\r\\n\"\n-      << \"Accept: application/json\\r\\n\";\n-    BOOST_FOREACH(const PAIRTYPE(string, string)& item, mapRequestHeaders)\n-        s << item.first << \": \" << item.second << \"\\r\\n\";\n-    s << \"\\r\\n\" << strMsg;\n-\n-    return s.str();\n-}\n-\n-static string rfc1123Time()\n-{\n-    return DateTimeStrFormat(\"%a, %d %b %Y %H:%M:%S +0000\", GetTime());\n-}\n-\n-static const char *httpStatusDescription(int nStatus)\n-{\n-    switch (nStatus) {\n-        case HTTP_OK: return \"OK\";\n-        case HTTP_BAD_REQUEST: return \"Bad Request\";\n-        case HTTP_FORBIDDEN: return \"Forbidden\";\n-        case HTTP_NOT_FOUND: return \"Not Found\";\n-        case HTTP_INTERNAL_SERVER_ERROR: return \"Internal Server Error\";\n-        default: return \"\";\n-    }\n-}\n-\n-string HTTPError(int nStatus, bool keepalive, bool headersOnly)\n-{\n-    if (nStatus == HTTP_UNAUTHORIZED)\n-        return strprintf(\"HTTP/1.0 401 Authorization Required\\r\\n\"\n-            \"Date: %s\\r\\n\"\n-            \"Server: bitcoin-json-rpc/%s\\r\\n\"\n-            \"WWW-Authenticate: Basic realm=\\\"jsonrpc\\\"\\r\\n\"\n-            \"Content-Type: text/html\\r\\n\"\n-            \"Content-Length: 296\\r\\n\"\n-            \"\\r\\n\"\n-            \"<!DOCTYPE HTML PUBLIC \\\"-//W3C//DTD HTML 4.01 Transitional//EN\\\"\\r\\n\"\n-            \"\\\"http://www.w3.org/TR/1999/REC-html401-19991224/loose.dtd\\\">\\r\\n\"\n-            \"<HTML>\\r\\n\"\n-            \"<HEAD>\\r\\n\"\n-            \"<TITLE>Error</TITLE>\\r\\n\"\n-            \"<META HTTP-EQUIV='Content-Type' CONTENT='text/html; charset=ISO-8859-1'>\\r\\n\"\n-            \"</HEAD>\\r\\n\"\n-            \"<BODY><H1>401 Unauthorized.</H1></BODY>\\r\\n\"\n-            \"</HTML>\\r\\n\", rfc1123Time(), FormatFullVersion());\n-\n-    return HTTPReply(nStatus, httpStatusDescription(nStatus), keepalive,\n-                     headersOnly, \"text/plain\");\n-}\n-\n-string HTTPReplyHeader(int nStatus, bool keepalive, size_t contentLength, const char *contentType)\n-{\n-    return strprintf(\n-            \"HTTP/1.1 %d %s\\r\\n\"\n-            \"Date: %s\\r\\n\"\n-            \"Connection: %s\\r\\n\"\n-            \"Content-Length: %u\\r\\n\"\n-            \"Content-Type: %s\\r\\n\"\n-            \"Server: bitcoin-json-rpc/%s\\r\\n\"\n-            \"\\r\\n\",\n-        nStatus,\n-        httpStatusDescription(nStatus),\n-        rfc1123Time(),\n-        keepalive ? \"keep-alive\" : \"close\",\n-        contentLength,\n-        contentType,\n-        FormatFullVersion());\n-}\n-\n-string HTTPReply(int nStatus, const string& strMsg, bool keepalive,\n-                 bool headersOnly, const char *contentType)\n-{\n-    if (headersOnly)\n-    {\n-        return HTTPReplyHeader(nStatus, keepalive, 0, contentType);\n-    } else {\n-        return HTTPReplyHeader(nStatus, keepalive, strMsg.size(), contentType) + strMsg;\n-    }\n-}\n-\n-bool ReadHTTPRequestLine(std::basic_istream<char>& stream, int &proto,\n-                         string& http_method, string& http_uri)\n-{\n-    string str;\n-    getline(stream, str);\n-\n-    // HTTP request line is space-delimited\n-    vector<string> vWords;\n-    boost::split(vWords, str, boost::is_any_of(\" \"));\n-    if (vWords.size() < 2)\n-        return false;\n-\n-    // HTTP methods permitted: GET, POST\n-    http_method = vWords[0];\n-    if (http_method != \"GET\" && http_method != \"POST\")\n-        return false;\n-\n-    // HTTP URI must be an absolute path, relative to current host\n-    http_uri = vWords[1];\n-    if (http_uri.size() == 0 || http_uri[0] != '/')\n-        return false;\n-\n-    // parse proto, if present\n-    string strProto = \"\";\n-    if (vWords.size() > 2)\n-        strProto = vWords[2];\n-\n-    proto = 0;\n-    const char *ver = strstr(strProto.c_str(), \"HTTP/1.\");\n-    if (ver != NULL)\n-        proto = atoi(ver+7);\n-\n-    return true;\n-}\n-\n-int ReadHTTPStatus(std::basic_istream<char>& stream, int &proto)\n-{\n-    string str;\n-    getline(stream, str);\n-    vector<string> vWords;\n-    boost::split(vWords, str, boost::is_any_of(\" \"));\n-    if (vWords.size() < 2)\n-        return HTTP_INTERNAL_SERVER_ERROR;\n-    proto = 0;\n-    const char *ver = strstr(str.c_str(), \"HTTP/1.\");\n-    if (ver != NULL)\n-        proto = atoi(ver+7);\n-    return atoi(vWords[1].c_str());\n-}\n-\n-int ReadHTTPHeaders(std::basic_istream<char>& stream, map<string, string>& mapHeadersRet)\n-{\n-    int nLen = 0;\n-    while (true)\n-    {\n-        string str;\n-        std::getline(stream, str);\n-        if (str.empty() || str == \"\\r\")\n-            break;\n-        string::size_type nColon = str.find(\":\");\n-        if (nColon != string::npos)\n-        {\n-            string strHeader = str.substr(0, nColon);\n-            boost::trim(strHeader);\n-            boost::to_lower(strHeader);\n-            string strValue = str.substr(nColon+1);\n-            boost::trim(strValue);\n-            mapHeadersRet[strHeader] = strValue;\n-            if (strHeader == \"content-length\")\n-                nLen = atoi(strValue.c_str());\n-        }\n-    }\n-    return nLen;\n-}\n-\n-\n-int ReadHTTPMessage(std::basic_istream<char>& stream, map<string,\n-                    string>& mapHeadersRet, string& strMessageRet,\n-                    int nProto, size_t max_size)\n-{\n-    mapHeadersRet.clear();\n-    strMessageRet = \"\";\n-\n-    // Read header\n-    int nLen = ReadHTTPHeaders(stream, mapHeadersRet);\n-    if (nLen < 0 || (size_t)nLen > max_size)\n-        return HTTP_INTERNAL_SERVER_ERROR;\n-\n-    // Read message\n-    if (nLen > 0)\n-    {\n-        vector<char> vch;\n-        size_t ptr = 0;\n-        while (ptr < (size_t)nLen)\n-        {\n-            size_t bytes_to_read = std::min((size_t)nLen - ptr, POST_READ_SIZE);\n-            vch.resize(ptr + bytes_to_read);\n-            stream.read(&vch[ptr], bytes_to_read);\n-            if (!stream) // Connection lost while reading\n-                return HTTP_INTERNAL_SERVER_ERROR;\n-            ptr += bytes_to_read;\n-        }\n-        strMessageRet = string(vch.begin(), vch.end());\n-    }\n-\n-    string sConHdr = mapHeadersRet[\"connection\"];\n-\n-    if ((sConHdr != \"close\") && (sConHdr != \"keep-alive\"))\n-    {\n-        if (nProto >= 1)\n-            mapHeadersRet[\"connection\"] = \"keep-alive\";\n-        else\n-            mapHeadersRet[\"connection\"] = \"close\";\n-    }\n-\n-    return HTTP_OK;\n-}\n-\n /**\n  * JSON-RPC protocol.  Bitcoin speaks version 1.0 for maximum compatibility,\n  * but uses JSON-RPC 1.1/2.0 standards for parts of the 1.0 standard that were"
      },
      {
        "sha": "5381e4bcfd258e4e7e9d4803f8f19909ca2eef0e",
        "filename": "src/rpcprotocol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 86,
        "changes": 87,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40b556d3742a1f65d67e2d4c760d0b13fe8be5b7/src/rpcprotocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40b556d3742a1f65d67e2d4c760d0b13fe8be5b7/src/rpcprotocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcprotocol.h?ref=40b556d3742a1f65d67e2d4c760d0b13fe8be5b7",
        "patch": "@@ -10,10 +10,6 @@\n #include <map>\n #include <stdint.h>\n #include <string>\n-#include <boost/iostreams/concepts.hpp>\n-#include <boost/iostreams/stream.hpp>\n-#include <boost/asio.hpp>\n-#include <boost/asio/ssl.hpp>\n #include <boost/filesystem.hpp>\n \n #include \"univalue/univalue.h\"\n@@ -26,6 +22,7 @@ enum HTTPStatusCode\n     HTTP_UNAUTHORIZED          = 401,\n     HTTP_FORBIDDEN             = 403,\n     HTTP_NOT_FOUND             = 404,\n+    HTTP_BAD_METHOD            = 405,\n     HTTP_INTERNAL_SERVER_ERROR = 500,\n     HTTP_SERVICE_UNAVAILABLE   = 503,\n };\n@@ -79,88 +76,6 @@ enum RPCErrorCode\n     RPC_WALLET_ALREADY_UNLOCKED     = -17, //! Wallet is already unlocked\n };\n \n-/**\n- * IOStream device that speaks SSL but can also speak non-SSL\n- */\n-template <typename Protocol>\n-class SSLIOStreamDevice : public boost::iostreams::device<boost::iostreams::bidirectional> {\n-public:\n-    SSLIOStreamDevice(boost::asio::ssl::stream<typename Protocol::socket> &streamIn, bool fUseSSLIn) : stream(streamIn)\n-    {\n-        fUseSSL = fUseSSLIn;\n-        fNeedHandshake = fUseSSLIn;\n-    }\n-\n-    void handshake(boost::asio::ssl::stream_base::handshake_type role)\n-    {\n-        if (!fNeedHandshake) return;\n-        fNeedHandshake = false;\n-        stream.handshake(role);\n-    }\n-    std::streamsize read(char* s, std::streamsize n)\n-    {\n-        handshake(boost::asio::ssl::stream_base::server); // HTTPS servers read first\n-        if (fUseSSL) return stream.read_some(boost::asio::buffer(s, n));\n-        return stream.next_layer().read_some(boost::asio::buffer(s, n));\n-    }\n-    std::streamsize write(const char* s, std::streamsize n)\n-    {\n-        handshake(boost::asio::ssl::stream_base::client); // HTTPS clients write first\n-        if (fUseSSL) return boost::asio::write(stream, boost::asio::buffer(s, n));\n-        return boost::asio::write(stream.next_layer(), boost::asio::buffer(s, n));\n-    }\n-    bool connect(const std::string& server, const std::string& port)\n-    {\n-        using namespace boost::asio::ip;\n-        tcp::resolver resolver(stream.get_io_service());\n-        tcp::resolver::iterator endpoint_iterator;\n-#if BOOST_VERSION >= 104300\n-        try {\n-#endif\n-            // The default query (flags address_configured) tries IPv6 if\n-            // non-localhost IPv6 configured, and IPv4 if non-localhost IPv4\n-            // configured.\n-            tcp::resolver::query query(server.c_str(), port.c_str());\n-            endpoint_iterator = resolver.resolve(query);\n-#if BOOST_VERSION >= 104300\n-        } catch (const boost::system::system_error&) {\n-            // If we at first don't succeed, try blanket lookup (IPv4+IPv6 independent of configured interfaces)\n-            tcp::resolver::query query(server.c_str(), port.c_str(), resolver_query_base::flags());\n-            endpoint_iterator = resolver.resolve(query);\n-        }\n-#endif\n-        boost::system::error_code error = boost::asio::error::host_not_found;\n-        tcp::resolver::iterator end;\n-        while (error && endpoint_iterator != end)\n-        {\n-            stream.lowest_layer().close();\n-            stream.lowest_layer().connect(*endpoint_iterator++, error);\n-        }\n-        if (error)\n-            return false;\n-        return true;\n-    }\n-\n-private:\n-    bool fNeedHandshake;\n-    bool fUseSSL;\n-    boost::asio::ssl::stream<typename Protocol::socket>& stream;\n-};\n-\n-std::string HTTPPost(const std::string& strMsg, const std::map<std::string,std::string>& mapRequestHeaders);\n-std::string HTTPError(int nStatus, bool keepalive,\n-                      bool headerOnly = false);\n-std::string HTTPReplyHeader(int nStatus, bool keepalive, size_t contentLength,\n-                      const char *contentType = \"application/json\");\n-std::string HTTPReply(int nStatus, const std::string& strMsg, bool keepalive,\n-                      bool headerOnly = false,\n-                      const char *contentType = \"application/json\");\n-bool ReadHTTPRequestLine(std::basic_istream<char>& stream, int &proto,\n-                         std::string& http_method, std::string& http_uri);\n-int ReadHTTPStatus(std::basic_istream<char>& stream, int &proto);\n-int ReadHTTPHeaders(std::basic_istream<char>& stream, std::map<std::string, std::string>& mapHeadersRet);\n-int ReadHTTPMessage(std::basic_istream<char>& stream, std::map<std::string, std::string>& mapHeadersRet,\n-                    std::string& strMessageRet, int nProto, size_t max_size);\n std::string JSONRPCRequest(const std::string& strMethod, const UniValue& params, const UniValue& id);\n UniValue JSONRPCReplyObj(const UniValue& result, const UniValue& error, const UniValue& id);\n std::string JSONRPCReply(const UniValue& result, const UniValue& error, const UniValue& id);"
      },
      {
        "sha": "5d7e2125e54a9c1e9b4f72721a285030ec8bc41c",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 513,
        "changes": 554,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40b556d3742a1f65d67e2d4c760d0b13fe8be5b7/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40b556d3742a1f65d67e2d4c760d0b13fe8be5b7/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=40b556d3742a1f65d67e2d4c760d0b13fe8be5b7",
        "patch": "@@ -12,13 +12,9 @@\n #include \"ui_interface.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n-#ifdef ENABLE_WALLET\n-#include \"wallet/wallet.h\"\n-#endif\n \n-#include <boost/algorithm/string.hpp>\n-#include <boost/asio.hpp>\n-#include <boost/asio/ssl.hpp>\n+#include \"univalue/univalue.h\"\n+\n #include <boost/bind.hpp>\n #include <boost/filesystem.hpp>\n #include <boost/foreach.hpp>\n@@ -27,28 +23,20 @@\n #include <boost/shared_ptr.hpp>\n #include <boost/signals2/signal.hpp>\n #include <boost/thread.hpp>\n+#include <boost/algorithm/string/case_conv.hpp> // for to_upper()\n \n-#include \"univalue/univalue.h\"\n-\n-using namespace boost::asio;\n using namespace RPCServer;\n using namespace std;\n \n-static std::string strRPCUserColonPass;\n-\n static bool fRPCRunning = false;\n static bool fRPCInWarmup = true;\n static std::string rpcWarmupStatus(\"RPC server started\");\n static CCriticalSection cs_rpcWarmup;\n-\n-//! These are created by StartRPCThreads, destroyed in StopRPCThreads\n-static boost::asio::io_service* rpc_io_service = NULL;\n-static map<string, boost::shared_ptr<deadline_timer> > deadlineTimers;\n-static ssl::context* rpc_ssl_context = NULL;\n-static boost::thread_group* rpc_worker_group = NULL;\n-static boost::asio::io_service::work *rpc_dummy_work = NULL;\n-static std::vector<CSubNet> rpc_allow_subnets; //!< List of subnets to allow RPC connections from\n-static std::vector< boost::shared_ptr<ip::tcp::acceptor> > rpc_acceptors;\n+/* Timer-creating functions */\n+static std::vector<RPCTimerInterface*> timerInterfaces;\n+/* Map of name to timer.\n+ * @note Can be changed to std::unique_ptr when C++11 */\n+static std::map<std::string, boost::shared_ptr<RPCTimerBase> > deadlineTimers;\n \n static struct CRPCSignals\n {\n@@ -169,7 +157,6 @@ vector<unsigned char> ParseHexO(const UniValue& o, string strKey)\n     return ParseHexV(find_value(o, strKey), strKey);\n }\n \n-\n /**\n  * Note: This interface may still be subject to change.\n  */\n@@ -261,8 +248,6 @@ UniValue stop(const UniValue& params, bool fHelp)\n     return \"Bitcoin server stopping\";\n }\n \n-\n-\n /**\n  * Call Table\n  */\n@@ -399,381 +384,34 @@ CRPCTable::CRPCTable()\n     }\n }\n \n-const CRPCCommand *CRPCTable::operator[](const std::string& name) const\n+const CRPCCommand *CRPCTable::operator[](const std::string &name) const\n {\n     map<string, const CRPCCommand*>::const_iterator it = mapCommands.find(name);\n     if (it == mapCommands.end())\n         return NULL;\n     return (*it).second;\n }\n \n-\n-bool HTTPAuthorized(map<string, string>& mapHeaders)\n-{\n-    string strAuth = mapHeaders[\"authorization\"];\n-    if (strAuth.substr(0,6) != \"Basic \")\n-        return false;\n-    string strUserPass64 = strAuth.substr(6); boost::trim(strUserPass64);\n-    string strUserPass = DecodeBase64(strUserPass64);\n-    return TimingResistantEqual(strUserPass, strRPCUserColonPass);\n-}\n-\n-void ErrorReply(std::ostream& stream, const UniValue& objError, const UniValue& id)\n-{\n-    // Send error reply from json-rpc error object\n-    int nStatus = HTTP_INTERNAL_SERVER_ERROR;\n-    int code = find_value(objError, \"code\").get_int();\n-    if (code == RPC_INVALID_REQUEST) nStatus = HTTP_BAD_REQUEST;\n-    else if (code == RPC_METHOD_NOT_FOUND) nStatus = HTTP_NOT_FOUND;\n-    string strReply = JSONRPCReply(NullUniValue, objError, id);\n-    stream << HTTPReply(nStatus, strReply, false) << std::flush;\n-}\n-\n-CNetAddr BoostAsioToCNetAddr(boost::asio::ip::address address)\n-{\n-    CNetAddr netaddr;\n-    // Make sure that IPv4-compatible and IPv4-mapped IPv6 addresses are treated as IPv4 addresses\n-    if (address.is_v6()\n-     && (address.to_v6().is_v4_compatible()\n-      || address.to_v6().is_v4_mapped()))\n-        address = address.to_v6().to_v4();\n-\n-    if(address.is_v4())\n-    {\n-        boost::asio::ip::address_v4::bytes_type bytes = address.to_v4().to_bytes();\n-        netaddr.SetRaw(NET_IPV4, &bytes[0]);\n-    }\n-    else\n-    {\n-        boost::asio::ip::address_v6::bytes_type bytes = address.to_v6().to_bytes();\n-        netaddr.SetRaw(NET_IPV6, &bytes[0]);\n-    }\n-    return netaddr;\n-}\n-\n-bool ClientAllowed(const boost::asio::ip::address& address)\n-{\n-    CNetAddr netaddr = BoostAsioToCNetAddr(address);\n-    BOOST_FOREACH(const CSubNet &subnet, rpc_allow_subnets)\n-        if (subnet.Match(netaddr))\n-            return true;\n-    return false;\n-}\n-\n-template <typename Protocol>\n-class AcceptedConnectionImpl : public AcceptedConnection\n-{\n-public:\n-    AcceptedConnectionImpl(\n-            boost::asio::io_service& io_service,\n-            ssl::context &context,\n-            bool fUseSSL) :\n-        sslStream(io_service, context),\n-        _d(sslStream, fUseSSL),\n-        _stream(_d)\n-    {\n-    }\n-\n-    virtual std::iostream& stream()\n-    {\n-        return _stream;\n-    }\n-\n-    virtual std::string peer_address_to_string() const\n-    {\n-        return peer.address().to_string();\n-    }\n-\n-    virtual void close()\n-    {\n-        _stream.close();\n-    }\n-\n-    typename Protocol::endpoint peer;\n-    boost::asio::ssl::stream<typename Protocol::socket> sslStream;\n-\n-private:\n-    SSLIOStreamDevice<Protocol> _d;\n-    boost::iostreams::stream< SSLIOStreamDevice<Protocol> > _stream;\n-};\n-\n-void ServiceConnection(AcceptedConnection *conn);\n-\n-//! Forward declaration required for RPCListen\n-template <typename Protocol, typename SocketAcceptorService>\n-static void RPCAcceptHandler(boost::shared_ptr< basic_socket_acceptor<Protocol, SocketAcceptorService> > acceptor,\n-                             ssl::context& context,\n-                             bool fUseSSL,\n-                             boost::shared_ptr< AcceptedConnection > conn,\n-                             const boost::system::error_code& error);\n-\n-/**\n- * Sets up I/O resources to accept and handle a new connection.\n- */\n-template <typename Protocol, typename SocketAcceptorService>\n-static void RPCListen(boost::shared_ptr< basic_socket_acceptor<Protocol, SocketAcceptorService> > acceptor,\n-                   ssl::context& context,\n-                   const bool fUseSSL)\n-{\n-    // Accept connection\n-    boost::shared_ptr< AcceptedConnectionImpl<Protocol> > conn(new AcceptedConnectionImpl<Protocol>(acceptor->get_io_service(), context, fUseSSL));\n-\n-    acceptor->async_accept(\n-            conn->sslStream.lowest_layer(),\n-            conn->peer,\n-            boost::bind(&RPCAcceptHandler<Protocol, SocketAcceptorService>,\n-                acceptor,\n-                boost::ref(context),\n-                fUseSSL,\n-                conn,\n-                _1));\n-}\n-\n-\n-/**\n- * Accept and handle incoming connection.\n- */\n-template <typename Protocol, typename SocketAcceptorService>\n-static void RPCAcceptHandler(boost::shared_ptr< basic_socket_acceptor<Protocol, SocketAcceptorService> > acceptor,\n-                             ssl::context& context,\n-                             const bool fUseSSL,\n-                             boost::shared_ptr< AcceptedConnection > conn,\n-                             const boost::system::error_code& error)\n+bool StartRPC()\n {\n-    // Immediately start accepting new connections, except when we're cancelled or our socket is closed.\n-    if (error != boost::asio::error::operation_aborted && acceptor->is_open())\n-        RPCListen(acceptor, context, fUseSSL);\n-\n-    AcceptedConnectionImpl<ip::tcp>* tcp_conn = dynamic_cast< AcceptedConnectionImpl<ip::tcp>* >(conn.get());\n-\n-    if (error)\n-    {\n-        // TODO: Actually handle errors\n-        LogPrintf(\"%s: Error: %s\\n\", __func__, error.message());\n-    }\n-    // Restrict callers by IP.  It is important to\n-    // do this before starting client thread, to filter out\n-    // certain DoS and misbehaving clients.\n-    else if (tcp_conn && !ClientAllowed(tcp_conn->peer.address()))\n-    {\n-        // Only send a 403 if we're not using SSL to prevent a DoS during the SSL handshake.\n-        if (!fUseSSL)\n-            conn->stream() << HTTPError(HTTP_FORBIDDEN, false) << std::flush;\n-        conn->close();\n-    }\n-    else {\n-        ServiceConnection(conn.get());\n-        conn->close();\n-    }\n-}\n-\n-static ip::tcp::endpoint ParseEndpoint(const std::string &strEndpoint, int defaultPort)\n-{\n-    std::string addr;\n-    int port = defaultPort;\n-    SplitHostPort(strEndpoint, port, addr);\n-    return ip::tcp::endpoint(boost::asio::ip::address::from_string(addr), port);\n-}\n-\n-void StartRPCThreads()\n-{\n-    rpc_allow_subnets.clear();\n-    rpc_allow_subnets.push_back(CSubNet(\"127.0.0.0/8\")); // always allow IPv4 local subnet\n-    rpc_allow_subnets.push_back(CSubNet(\"::1\")); // always allow IPv6 localhost\n-    if (mapMultiArgs.count(\"-rpcallowip\"))\n-    {\n-        const vector<string>& vAllow = mapMultiArgs[\"-rpcallowip\"];\n-        BOOST_FOREACH(string strAllow, vAllow)\n-        {\n-            CSubNet subnet(strAllow);\n-            if(!subnet.IsValid())\n-            {\n-                uiInterface.ThreadSafeMessageBox(\n-                    strprintf(\"Invalid -rpcallowip subnet specification: %s. Valid are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24).\", strAllow),\n-                    \"\", CClientUIInterface::MSG_ERROR);\n-                StartShutdown();\n-                return;\n-            }\n-            rpc_allow_subnets.push_back(subnet);\n-        }\n-    }\n-    std::string strAllowed;\n-    BOOST_FOREACH(const CSubNet &subnet, rpc_allow_subnets)\n-        strAllowed += subnet.ToString() + \" \";\n-    LogPrint(\"rpc\", \"Allowing RPC connections from: %s\\n\", strAllowed);\n-\n-    if (mapArgs[\"-rpcpassword\"] == \"\")\n-    {\n-        LogPrintf(\"No rpcpassword set - using random cookie authentication\\n\");\n-        if (!GenerateAuthCookie(&strRPCUserColonPass)) {\n-            uiInterface.ThreadSafeMessageBox(\n-                _(\"Error: A fatal internal error occurred, see debug.log for details\"), // Same message as AbortNode\n-                \"\", CClientUIInterface::MSG_ERROR);\n-            StartShutdown();\n-            return;\n-        }\n-    } else {\n-        strRPCUserColonPass = mapArgs[\"-rpcuser\"] + \":\" + mapArgs[\"-rpcpassword\"];\n-    }\n-\n-    assert(rpc_io_service == NULL);\n-    rpc_io_service = new boost::asio::io_service();\n-    rpc_ssl_context = new ssl::context(*rpc_io_service, ssl::context::sslv23);\n-\n-    const bool fUseSSL = GetBoolArg(\"-rpcssl\", false);\n-\n-    if (fUseSSL)\n-    {\n-        rpc_ssl_context->set_options(ssl::context::no_sslv2 | ssl::context::no_sslv3);\n-\n-        boost::filesystem::path pathCertFile(GetArg(\"-rpcsslcertificatechainfile\", \"server.cert\"));\n-        if (!pathCertFile.is_complete()) pathCertFile = boost::filesystem::path(GetDataDir()) / pathCertFile;\n-        if (boost::filesystem::exists(pathCertFile)) rpc_ssl_context->use_certificate_chain_file(pathCertFile.string());\n-        else LogPrintf(\"ThreadRPCServer ERROR: missing server certificate file %s\\n\", pathCertFile.string());\n-\n-        boost::filesystem::path pathPKFile(GetArg(\"-rpcsslprivatekeyfile\", \"server.pem\"));\n-        if (!pathPKFile.is_complete()) pathPKFile = boost::filesystem::path(GetDataDir()) / pathPKFile;\n-        if (boost::filesystem::exists(pathPKFile)) rpc_ssl_context->use_private_key_file(pathPKFile.string(), ssl::context::pem);\n-        else LogPrintf(\"ThreadRPCServer ERROR: missing server private key file %s\\n\", pathPKFile.string());\n-\n-        string strCiphers = GetArg(\"-rpcsslciphers\", \"TLSv1.2+HIGH:TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!3DES:@STRENGTH\");\n-        SSL_CTX_set_cipher_list(rpc_ssl_context->impl(), strCiphers.c_str());\n-    }\n-\n-    std::vector<ip::tcp::endpoint> vEndpoints;\n-    bool bBindAny = false;\n-    int defaultPort = GetArg(\"-rpcport\", BaseParams().RPCPort());\n-    if (!mapArgs.count(\"-rpcallowip\")) // Default to loopback if not allowing external IPs\n-    {\n-        vEndpoints.push_back(ip::tcp::endpoint(boost::asio::ip::address_v6::loopback(), defaultPort));\n-        vEndpoints.push_back(ip::tcp::endpoint(boost::asio::ip::address_v4::loopback(), defaultPort));\n-        if (mapArgs.count(\"-rpcbind\"))\n-        {\n-            LogPrintf(\"WARNING: option -rpcbind was ignored because -rpcallowip was not specified, refusing to allow everyone to connect\\n\");\n-        }\n-    } else if (mapArgs.count(\"-rpcbind\")) // Specific bind address\n-    {\n-        BOOST_FOREACH(const std::string &addr, mapMultiArgs[\"-rpcbind\"])\n-        {\n-            try {\n-                vEndpoints.push_back(ParseEndpoint(addr, defaultPort));\n-            }\n-            catch (const boost::system::system_error&)\n-            {\n-                uiInterface.ThreadSafeMessageBox(\n-                    strprintf(_(\"Could not parse -rpcbind value %s as network address\"), addr),\n-                    \"\", CClientUIInterface::MSG_ERROR);\n-                StartShutdown();\n-                return;\n-            }\n-        }\n-    } else { // No specific bind address specified, bind to any\n-        vEndpoints.push_back(ip::tcp::endpoint(boost::asio::ip::address_v6::any(), defaultPort));\n-        vEndpoints.push_back(ip::tcp::endpoint(boost::asio::ip::address_v4::any(), defaultPort));\n-        // Prefer making the socket dual IPv6/IPv4 instead of binding\n-        // to both addresses separately.\n-        bBindAny = true;\n-    }\n-\n-    bool fListening = false;\n-    std::string strerr;\n-    std::string straddress;\n-    BOOST_FOREACH(const ip::tcp::endpoint &endpoint, vEndpoints)\n-    {\n-        try {\n-            boost::asio::ip::address bindAddress = endpoint.address();\n-            straddress = bindAddress.to_string();\n-            LogPrintf(\"Binding RPC on address %s port %i (IPv4+IPv6 bind any: %i)\\n\", straddress, endpoint.port(), bBindAny);\n-            boost::system::error_code v6_only_error;\n-            boost::shared_ptr<ip::tcp::acceptor> acceptor(new ip::tcp::acceptor(*rpc_io_service));\n-\n-            acceptor->open(endpoint.protocol());\n-            acceptor->set_option(boost::asio::ip::tcp::acceptor::reuse_address(true));\n-\n-            // Try making the socket dual IPv6/IPv4 when listening on the IPv6 \"any\" address\n-            acceptor->set_option(boost::asio::ip::v6_only(\n-                !bBindAny || bindAddress != boost::asio::ip::address_v6::any()), v6_only_error);\n-\n-            acceptor->bind(endpoint);\n-            acceptor->listen(socket_base::max_connections);\n-\n-            RPCListen(acceptor, *rpc_ssl_context, fUseSSL);\n-\n-            fListening = true;\n-            rpc_acceptors.push_back(acceptor);\n-            // If dual IPv6/IPv4 bind successful, skip binding to IPv4 separately\n-            if(bBindAny && bindAddress == boost::asio::ip::address_v6::any() && !v6_only_error)\n-                break;\n-        }\n-        catch (const boost::system::system_error& e)\n-        {\n-            LogPrintf(\"ERROR: Binding RPC on address %s port %i failed: %s\\n\", straddress, endpoint.port(), e.what());\n-            strerr = strprintf(_(\"An error occurred while setting up the RPC address %s port %u for listening: %s\"), straddress, endpoint.port(), e.what());\n-        }\n-    }\n-\n-    if (!fListening) {\n-        uiInterface.ThreadSafeMessageBox(strerr, \"\", CClientUIInterface::MSG_ERROR);\n-        StartShutdown();\n-        return;\n-    }\n-\n-    rpc_worker_group = new boost::thread_group();\n-    for (int i = 0; i < GetArg(\"-rpcthreads\", 4); i++)\n-        rpc_worker_group->create_thread(boost::bind(&boost::asio::io_service::run, rpc_io_service));\n+    LogPrint(\"rpc\", \"Starting RPC\\n\");\n     fRPCRunning = true;\n     g_rpcSignals.Started();\n+    return true;\n }\n \n-void StartDummyRPCThread()\n+void InterruptRPC()\n {\n-    if(rpc_io_service == NULL)\n-    {\n-        rpc_io_service = new boost::asio::io_service();\n-        /* Create dummy \"work\" to keep the thread from exiting when no timeouts active,\n-         * see http://www.boost.org/doc/libs/1_51_0/doc/html/boost_asio/reference/io_service.html#boost_asio.reference.io_service.stopping_the_io_service_from_running_out_of_work */\n-        rpc_dummy_work = new boost::asio::io_service::work(*rpc_io_service);\n-        rpc_worker_group = new boost::thread_group();\n-        rpc_worker_group->create_thread(boost::bind(&boost::asio::io_service::run, rpc_io_service));\n-        fRPCRunning = true;\n-    }\n+    LogPrint(\"rpc\", \"Interrupting RPC\\n\");\n+    // Interrupt e.g. running longpolls\n+    fRPCRunning = false;\n }\n \n-void StopRPCThreads()\n+void StopRPC()\n {\n-    if (rpc_io_service == NULL) return;\n-    // Set this to false first, so that longpolling loops will exit when woken up\n-    fRPCRunning = false;\n-\n-    // First, cancel all timers and acceptors\n-    // This is not done automatically by ->stop(), and in some cases the destructor of\n-    // boost::asio::io_service can hang if this is skipped.\n-    boost::system::error_code ec;\n-    BOOST_FOREACH(const boost::shared_ptr<ip::tcp::acceptor> &acceptor, rpc_acceptors)\n-    {\n-        acceptor->cancel(ec);\n-        if (ec)\n-            LogPrintf(\"%s: Warning: %s when cancelling acceptor\\n\", __func__, ec.message());\n-    }\n-    rpc_acceptors.clear();\n-    BOOST_FOREACH(const PAIRTYPE(std::string, boost::shared_ptr<deadline_timer>) &timer, deadlineTimers)\n-    {\n-        timer.second->cancel(ec);\n-        if (ec)\n-            LogPrintf(\"%s: Warning: %s when cancelling timer\\n\", __func__, ec.message());\n-    }\n+    LogPrint(\"rpc\", \"Stopping RPC\\n\");\n     deadlineTimers.clear();\n-\n-    DeleteAuthCookie();\n-\n-    rpc_io_service->stop();\n     g_rpcSignals.Stopped();\n-    if (rpc_worker_group != NULL)\n-        rpc_worker_group->join_all();\n-    delete rpc_dummy_work; rpc_dummy_work = NULL;\n-    delete rpc_worker_group; rpc_worker_group = NULL;\n-    delete rpc_ssl_context; rpc_ssl_context = NULL;\n-    delete rpc_io_service; rpc_io_service = NULL;\n }\n \n bool IsRPCRunning()\n@@ -802,36 +440,6 @@ bool RPCIsInWarmup(std::string *outStatus)\n     return fRPCInWarmup;\n }\n \n-void RPCRunHandler(const boost::system::error_code& err, boost::function<void(void)> func)\n-{\n-    if (!err)\n-        func();\n-}\n-\n-void RPCRunLater(const std::string& name, boost::function<void(void)> func, int64_t nSeconds)\n-{\n-    assert(rpc_io_service != NULL);\n-\n-    if (deadlineTimers.count(name) == 0)\n-    {\n-        deadlineTimers.insert(make_pair(name,\n-                                        boost::shared_ptr<deadline_timer>(new deadline_timer(*rpc_io_service))));\n-    }\n-    deadlineTimers[name]->expires_from_now(boost::posix_time::seconds(nSeconds));\n-    deadlineTimers[name]->async_wait(boost::bind(RPCRunHandler, _1, func));\n-}\n-\n-class JSONRequest\n-{\n-public:\n-    UniValue id;\n-    string strMethod;\n-    UniValue params;\n-\n-    JSONRequest() { id = NullUniValue; }\n-    void parse(const UniValue& valRequest);\n-};\n-\n void JSONRequest::parse(const UniValue& valRequest)\n {\n     // Parse request\n@@ -862,7 +470,6 @@ void JSONRequest::parse(const UniValue& valRequest)\n         throw JSONRPCError(RPC_INVALID_REQUEST, \"Params must be an array\");\n }\n \n-\n static UniValue JSONRPCExecOne(const UniValue& req)\n {\n     UniValue rpc_result(UniValue::VOBJ);\n@@ -887,7 +494,7 @@ static UniValue JSONRPCExecOne(const UniValue& req)\n     return rpc_result;\n }\n \n-static string JSONRPCExecBatch(const UniValue& vReq)\n+std::string JSONRPCExecBatch(const UniValue& vReq)\n {\n     UniValue ret(UniValue::VARR);\n     for (unsigned int reqIdx = 0; reqIdx < vReq.size(); reqIdx++)\n@@ -896,107 +503,6 @@ static string JSONRPCExecBatch(const UniValue& vReq)\n     return ret.write() + \"\\n\";\n }\n \n-static bool HTTPReq_JSONRPC(AcceptedConnection *conn,\n-                            string& strRequest,\n-                            map<string, string>& mapHeaders,\n-                            bool fRun)\n-{\n-    // Check authorization\n-    if (mapHeaders.count(\"authorization\") == 0)\n-    {\n-        conn->stream() << HTTPError(HTTP_UNAUTHORIZED, false) << std::flush;\n-        return false;\n-    }\n-\n-    if (!HTTPAuthorized(mapHeaders))\n-    {\n-        LogPrintf(\"ThreadRPCServer incorrect password attempt from %s\\n\", conn->peer_address_to_string());\n-        /* Deter brute-forcing\n-           We don't support exposing the RPC port, so this shouldn't result\n-           in a DoS. */\n-        MilliSleep(250);\n-\n-        conn->stream() << HTTPError(HTTP_UNAUTHORIZED, false) << std::flush;\n-        return false;\n-    }\n-\n-    JSONRequest jreq;\n-    try\n-    {\n-        // Parse request\n-        UniValue valRequest;\n-        if (!valRequest.read(strRequest))\n-            throw JSONRPCError(RPC_PARSE_ERROR, \"Parse error\");\n-\n-        string strReply;\n-\n-        // singleton request\n-        if (valRequest.isObject()) {\n-            jreq.parse(valRequest);\n-\n-            UniValue result = tableRPC.execute(jreq.strMethod, jreq.params);\n-\n-            // Send reply\n-            strReply = JSONRPCReply(result, NullUniValue, jreq.id);\n-\n-        // array of requests\n-        } else if (valRequest.isArray())\n-            strReply = JSONRPCExecBatch(valRequest.get_array());\n-        else\n-            throw JSONRPCError(RPC_PARSE_ERROR, \"Top-level object parse error\");\n-\n-        conn->stream() << HTTPReplyHeader(HTTP_OK, fRun, strReply.size()) << strReply << std::flush;\n-    }\n-    catch (const UniValue& objError)\n-    {\n-        ErrorReply(conn->stream(), objError, jreq.id);\n-        return false;\n-    }\n-    catch (const std::exception& e)\n-    {\n-        ErrorReply(conn->stream(), JSONRPCError(RPC_PARSE_ERROR, e.what()), jreq.id);\n-        return false;\n-    }\n-    return true;\n-}\n-\n-void ServiceConnection(AcceptedConnection *conn)\n-{\n-    bool fRun = true;\n-    while (fRun && !ShutdownRequested())\n-    {\n-        int nProto = 0;\n-        map<string, string> mapHeaders;\n-        string strRequest, strMethod, strURI;\n-\n-        // Read HTTP request line\n-        if (!ReadHTTPRequestLine(conn->stream(), nProto, strMethod, strURI))\n-            break;\n-\n-        // Read HTTP message headers and body\n-        ReadHTTPMessage(conn->stream(), mapHeaders, strRequest, nProto, MAX_SIZE);\n-\n-        // HTTP Keep-Alive is false; close connection immediately\n-        if ((mapHeaders[\"connection\"] == \"close\") || (!GetBoolArg(\"-rpckeepalive\", true)))\n-            fRun = false;\n-\n-        // Process via JSON-RPC API\n-        if (strURI == \"/\") {\n-            if (!HTTPReq_JSONRPC(conn, strRequest, mapHeaders, fRun))\n-                break;\n-\n-        // Process via HTTP REST API\n-        } else if (strURI.substr(0, 6) == \"/rest/\" && GetBoolArg(\"-rest\", false)) {\n-            if (!HTTPReq_REST(conn, strURI, strRequest, mapHeaders, fRun))\n-                break;\n-\n-        } else {\n-            conn->stream() << HTTPError(HTTP_NOT_FOUND, false) << std::flush;\n-            break;\n-        }\n-    }\n-}\n-\n UniValue CRPCTable::execute(const std::string &strMethod, const UniValue &params) const\n {\n     // Return immediately if in warmup\n@@ -1037,4 +543,26 @@ std::string HelpExampleRpc(const std::string& methodname, const std::string& arg\n         \"\\\"method\\\": \\\"\" + methodname + \"\\\", \\\"params\\\": [\" + args + \"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/\\n\";\n }\n \n+void RPCRegisterTimerInterface(RPCTimerInterface *iface)\n+{\n+    timerInterfaces.push_back(iface);\n+}\n+\n+void RPCUnregisterTimerInterface(RPCTimerInterface *iface)\n+{\n+    std::vector<RPCTimerInterface*>::iterator i = std::find(timerInterfaces.begin(), timerInterfaces.end(), iface);\n+    assert(i != timerInterfaces.end());\n+    timerInterfaces.erase(i);\n+}\n+\n+void RPCRunLater(const std::string& name, boost::function<void(void)> func, int64_t nSeconds)\n+{\n+    if (timerInterfaces.empty())\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"No timer handler registered for RPC\");\n+    deadlineTimers.erase(name);\n+    RPCTimerInterface* timerInterface = timerInterfaces[0];\n+    LogPrint(\"rpc\", \"queue run of timer %s in %i seconds (using %s)\\n\", name, nSeconds, timerInterface->Name());\n+    deadlineTimers.insert(std::make_pair(name, timerInterface->NewTimer(func, nSeconds)));\n+}\n+\n const CRPCTable tableRPC;"
      },
      {
        "sha": "ac821d5b5540428a6169d624276683deb771d945",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 44,
        "deletions": 28,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40b556d3742a1f65d67e2d4c760d0b13fe8be5b7/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40b556d3742a1f65d67e2d4c760d0b13fe8be5b7/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=40b556d3742a1f65d67e2d4c760d0b13fe8be5b7",
        "patch": "@@ -32,26 +32,17 @@ namespace RPCServer\n class CBlockIndex;\n class CNetAddr;\n \n-class AcceptedConnection\n+class JSONRequest\n {\n public:\n-    virtual ~AcceptedConnection() {}\n+    UniValue id;\n+    std::string strMethod;\n+    UniValue params;\n \n-    virtual std::iostream& stream() = 0;\n-    virtual std::string peer_address_to_string() const = 0;\n-    virtual void close() = 0;\n+    JSONRequest() { id = NullUniValue; }\n+    void parse(const UniValue& valRequest);\n };\n \n-/** Start RPC threads */\n-void StartRPCThreads();\n-/**\n- * Alternative to StartRPCThreads for the GUI, when no server is\n- * used. The RPC thread in this case is only used to handle timeouts.\n- * If real RPC threads have already been started this is a no-op.\n- */\n-void StartDummyRPCThread();\n-/** Stop RPC threads */\n-void StopRPCThreads();\n /** Query whether RPC is running */\n bool IsRPCRunning();\n \n@@ -81,15 +72,45 @@ void RPCTypeCheck(const UniValue& params,\n void RPCTypeCheckObj(const UniValue& o,\n                   const std::map<std::string, UniValue::VType>& typesExpected, bool fAllowNull=false);\n \n+/** Opaque base class for timers returned by NewTimerFunc.\n+ * This provides no methods at the moment, but makes sure that delete\n+ * cleans up the whole state.\n+ */\n+class RPCTimerBase\n+{\n+public:\n+    virtual ~RPCTimerBase() {}\n+};\n+\n /**\n- * Run func nSeconds from now. Uses boost deadline timers.\n+ * RPC timer \"driver\".\n+ */\n+class RPCTimerInterface\n+{\n+public:\n+    virtual ~RPCTimerInterface() {}\n+    /** Implementation name */\n+    virtual const char *Name() = 0;\n+    /** Factory function for timers.\n+     * RPC will call the function to create a timer that will call func in *seconds* seconds.\n+     * @note As the RPC mechanism is backend-neutral, it can use different implementations of timers.\n+     * This is needed to cope with the case in which there is no HTTP server, but\n+     * only GUI RPC console, and to break the dependency of pcserver on httprpc.\n+     */\n+    virtual RPCTimerBase* NewTimer(boost::function<void(void)>&, int64_t) = 0;\n+};\n+\n+/** Register factory function for timers */\n+void RPCRegisterTimerInterface(RPCTimerInterface *iface);\n+/** Unregister factory function for timers */\n+void RPCUnregisterTimerInterface(RPCTimerInterface *iface);\n+\n+/**\n+ * Run func nSeconds from now.\n  * Overrides previous timer <name> (if any).\n  */\n void RPCRunLater(const std::string& name, boost::function<void(void)> func, int64_t nSeconds);\n \n-//! Convert boost::asio address to CNetAddr\n-extern CNetAddr BoostAsioToCNetAddr(boost::asio::ip::address address);\n-\n typedef UniValue(*rpcfn_type)(const UniValue& params, bool fHelp);\n \n class CRPCCommand\n@@ -134,9 +155,6 @@ extern uint256 ParseHashO(const UniValue& o, std::string strKey);\n extern std::vector<unsigned char> ParseHexV(const UniValue& v, std::string strName);\n extern std::vector<unsigned char> ParseHexO(const UniValue& o, std::string strKey);\n \n-extern void InitRPCMining();\n-extern void ShutdownRPCMining();\n-\n extern int64_t nWalletUnlockTime;\n extern CAmount AmountFromValue(const UniValue& value);\n extern UniValue ValueFromAmount(const CAmount& amount);\n@@ -244,11 +262,9 @@ extern UniValue getchaintips(const UniValue& params, bool fHelp);\n extern UniValue invalidateblock(const UniValue& params, bool fHelp);\n extern UniValue reconsiderblock(const UniValue& params, bool fHelp);\n \n-// in rest.cpp\n-extern bool HTTPReq_REST(AcceptedConnection *conn,\n-                  const std::string& strURI,\n-                  const std::string& strRequest,\n-                  const std::map<std::string, std::string>& mapHeaders,\n-                  bool fRun);\n+bool StartRPC();\n+void InterruptRPC();\n+void StopRPC();\n+std::string JSONRPCExecBatch(const UniValue& vReq);\n \n #endif // BITCOIN_RPCSERVER_H"
      }
    ]
  },
  {
    "sha": "57d85d9bee20edb6c3070504f23b6a2be2802654",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1N2Q4NWQ5YmVlMjBlZGI2YzMwNzA1MDRmMjNiNmEyYmUyODAyNjU0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-28T10:20:01Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-03T08:59:19Z"
      },
      "message": "doc: mention SSL support dropped for RPC in release notes",
      "tree": {
        "sha": "b08ba54e5e74d3353a717feada510b4fb97bbf27",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b08ba54e5e74d3353a717feada510b4fb97bbf27"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/57d85d9bee20edb6c3070504f23b6a2be2802654",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57d85d9bee20edb6c3070504f23b6a2be2802654",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/57d85d9bee20edb6c3070504f23b6a2be2802654",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57d85d9bee20edb6c3070504f23b6a2be2802654/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "40b556d3742a1f65d67e2d4c760d0b13fe8be5b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40b556d3742a1f65d67e2d4c760d0b13fe8be5b7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/40b556d3742a1f65d67e2d4c760d0b13fe8be5b7"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 23,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2fc601d4354259796a04650c75315aa5b41f8b15",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57d85d9bee20edb6c3070504f23b6a2be2802654/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57d85d9bee20edb6c3070504f23b6a2be2802654/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=57d85d9bee20edb6c3070504f23b6a2be2802654",
        "patch": "@@ -4,6 +4,29 @@ release-notes at release time)\n Notable changes\n ===============\n \n+SSL support for RPC dropped\n+----------------------------\n+\n+SSL support for RPC, previously enabled by the option `rpcssl` has been dropped\n+from both the client and the server. This was done in preparation for removing\n+the dependency on OpenSSL for the daemon completely.\n+\n+Trying to use `rpcssl` will result in an error:\n+\n+    Error: SSL mode for RPC (-rpcssl) is no longer supported.\n+\n+If you are one of the few people that relies on this feature, a flexible\n+migration path is to use `stunnel`. This is an utility that can tunnel\n+arbitrary TCP connections inside SSL. On e.g. Ubuntu it can be installed with:\n+\n+    sudo apt-get install stunnel4\n+\n+Then, to tunnel a SSL connection on 28332 to a RPC server bound on localhost on port 18332 do:\n+\n+    stunnel -d 28332 -r 127.0.0.1:18332 -p stunnel.pem -P ''\n+\n+It can also be set up system-wide in inetd style.\n+\n Random-cookie RPC authentication\n ---------------------------------\n "
      }
    ]
  },
  {
    "sha": "be33f3f50b7358bbad9e16bf730fac2ab3c4886b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZTMzZjNmNTBiNzM1OGJiYWQ5ZTE2YmY3MzBmYWMyYWIzYzQ4ODZi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-28T14:46:20Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-03T08:59:19Z"
      },
      "message": "Implement RPCTimerHandler for Qt RPC console\n\nImplement RPCTimerHandler for Qt RPC console, so that `walletpassphrase`\nworks with GUI and `-server=0`.\n\nAlso simplify HTTPEvent-related code by using boost::function directly.",
      "tree": {
        "sha": "534b59ec81e5baf95c85980013304eb31b24d0c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/534b59ec81e5baf95c85980013304eb31b24d0c8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/be33f3f50b7358bbad9e16bf730fac2ab3c4886b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be33f3f50b7358bbad9e16bf730fac2ab3c4886b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/be33f3f50b7358bbad9e16bf730fac2ab3c4886b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be33f3f50b7358bbad9e16bf730fac2ab3c4886b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "57d85d9bee20edb6c3070504f23b6a2be2802654",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57d85d9bee20edb6c3070504f23b6a2be2802654",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/57d85d9bee20edb6c3070504f23b6a2be2802654"
      }
    ],
    "stats": {
      "total": 117,
      "additions": 67,
      "deletions": 50
    },
    "files": [
      {
        "sha": "98ac750bb1938f2bcd7a3125611ee383bcaaff16",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 15,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be33f3f50b7358bbad9e16bf730fac2ab3c4886b/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be33f3f50b7358bbad9e16bf730fac2ab3c4886b/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=be33f3f50b7358bbad9e16bf730fac2ab3c4886b",
        "patch": "@@ -19,24 +19,16 @@\n class HTTPRPCTimer : public RPCTimerBase\n {\n public:\n-    HTTPRPCTimer(struct event_base* eventBase, boost::function<void(void)>& func, int64_t seconds) : ev(eventBase, false, new Handler(func))\n+    HTTPRPCTimer(struct event_base* eventBase, boost::function<void(void)>& func, int64_t millis) :\n+        ev(eventBase, false, func)\n     {\n-        struct timeval tv = {seconds, 0};\n+        struct timeval tv;\n+        tv.tv_sec = millis/1000;\n+        tv.tv_usec = (millis%1000)*1000;\n         ev.trigger(&tv);\n     }\n private:\n     HTTPEvent ev;\n-\n-    class Handler : public HTTPClosure\n-    {\n-    public:\n-        Handler(const boost::function<void(void)>& func) : func(func)\n-        {\n-        }\n-    private:\n-        boost::function<void(void)> func;\n-        void operator()() { func(); }\n-    };\n };\n \n class HTTPRPCTimerInterface : public RPCTimerInterface\n@@ -49,9 +41,9 @@ class HTTPRPCTimerInterface : public RPCTimerInterface\n     {\n         return \"HTTP\";\n     }\n-    RPCTimerBase* NewTimer(boost::function<void(void)>& func, int64_t seconds)\n+    RPCTimerBase* NewTimer(boost::function<void(void)>& func, int64_t millis)\n     {\n-        return new HTTPRPCTimer(base, func, seconds);\n+        return new HTTPRPCTimer(base, func, millis);\n     }\n private:\n     struct event_base* base;"
      },
      {
        "sha": "13f870567806f3b5233c87a2544c3a75ab49b6d0",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 25,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be33f3f50b7358bbad9e16bf730fac2ab3c4886b/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be33f3f50b7358bbad9e16bf730fac2ab3c4886b/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=be33f3f50b7358bbad9e16bf730fac2ab3c4886b",
        "patch": "@@ -412,18 +412,15 @@ struct event_base* EventBase()\n \n static void httpevent_callback_fn(evutil_socket_t, short, void* data)\n {\n-    // Static handler simply passes through execution flow to _handle method\n-    ((HTTPEvent*)data)->_handle();\n+    // Static handler: simply call inner handler\n+    HTTPEvent *self = ((HTTPEvent*)data);\n+    self->handler();\n+    if (self->deleteWhenTriggered)\n+        delete self;\n }\n \n-void HTTPEvent::_handle()\n-{\n-    (*handler)();\n-    if (deleteWhenTriggered)\n-        delete this;\n-}\n-\n-HTTPEvent::HTTPEvent(struct event_base* base, bool deleteWhenTriggered, HTTPClosure* handler) : deleteWhenTriggered(deleteWhenTriggered), handler(handler)\n+HTTPEvent::HTTPEvent(struct event_base* base, bool deleteWhenTriggered, const boost::function<void(void)>& handler):\n+    deleteWhenTriggered(deleteWhenTriggered), handler(handler)\n {\n     ev = event_new(base, -1, 0, httpevent_callback_fn, this);\n     assert(ev);\n@@ -496,20 +493,6 @@ void HTTPRequest::WriteHeader(const std::string& hdr, const std::string& value)\n  * Replies must be sent in the main loop in the main http thread,\n  * this cannot be done from worker threads.\n  */\n-struct HTTPSendReplyHandler : HTTPClosure {\n-public:\n-    HTTPSendReplyHandler(struct evhttp_request* req, int nStatus) : req(req), nStatus(nStatus)\n-    {\n-    }\n-    void operator()()\n-    {\n-        evhttp_send_reply(req, nStatus, NULL, NULL);\n-    }\n-private:\n-    struct evhttp_request* req;\n-    int nStatus;\n-};\n-\n void HTTPRequest::WriteReply(int nStatus, const std::string& strReply)\n {\n     assert(!replySent && req);\n@@ -518,7 +501,7 @@ void HTTPRequest::WriteReply(int nStatus, const std::string& strReply)\n     assert(evb);\n     evbuffer_add(evb, strReply.data(), strReply.size());\n     HTTPEvent* ev = new HTTPEvent(eventBase, true,\n-                                  new HTTPSendReplyHandler(req, nStatus));\n+        boost::bind(evhttp_send_reply, req, nStatus, (const char*)NULL, (struct evbuffer *)NULL));\n     ev->trigger(0);\n     replySent = true;\n     req = 0; // transferred back to main thread"
      },
      {
        "sha": "648e8b6f8648c320645d7e6db7d15f24fc259fce",
        "filename": "src/httpserver.h",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be33f3f50b7358bbad9e16bf730fac2ab3c4886b/src/httpserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be33f3f50b7358bbad9e16bf730fac2ab3c4886b/src/httpserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.h?ref=be33f3f50b7358bbad9e16bf730fac2ab3c4886b",
        "patch": "@@ -117,22 +117,22 @@ class HTTPClosure\n class HTTPEvent\n {\n public:\n-    /** Create a new event */\n-    HTTPEvent(struct event_base* base, bool deleteWhenTriggered, HTTPClosure* handler);\n+    /** Create a new event.\n+     * deleteWhenTriggered deletes this event object after the event is triggered (and the handler called)\n+     * handler is the handler to call when the event is triggered.\n+     */\n+    HTTPEvent(struct event_base* base, bool deleteWhenTriggered, const boost::function<void(void)>& handler);\n     ~HTTPEvent();\n \n     /** Trigger the event. If tv is 0, trigger it immediately. Otherwise trigger it after\n      * the given time has elapsed.\n      */\n     void trigger(struct timeval* tv);\n \n-    /** Internal function for handling, do not call directly */\n-    void _handle();\n-\n-private:\n     bool deleteWhenTriggered;\n+    boost::function<void(void)> handler;\n+private:\n     struct event* ev;\n-    boost::scoped_ptr<HTTPClosure> handler;\n };\n \n #endif // BITCOIN_HTTPSERVER_H"
      },
      {
        "sha": "b742a47c9ba323e359604bb300c68e3694ea9d05",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 0,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be33f3f50b7358bbad9e16bf730fac2ab3c4886b/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be33f3f50b7358bbad9e16bf730fac2ab3c4886b/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=be33f3f50b7358bbad9e16bf730fac2ab3c4886b",
        "patch": "@@ -28,6 +28,7 @@\n #include <QScrollBar>\n #include <QThread>\n #include <QTime>\n+#include <QTimer>\n \n #if QT_VERSION < 0x050000\n #include <QUrl>\n@@ -66,6 +67,40 @@ public Q_SLOTS:\n     void reply(int category, const QString &command);\n };\n \n+/** Class for handling RPC timers\n+ * (used for e.g. re-locking the wallet after a timeout)\n+ */\n+class QtRPCTimerBase: public QObject, public RPCTimerBase\n+{\n+    Q_OBJECT\n+public:\n+    QtRPCTimerBase(boost::function<void(void)>& func, int64_t millis):\n+        func(func)\n+    {\n+        timer.setSingleShot(true);\n+        connect(&timer, SIGNAL(timeout()), this, SLOT(timeout()));\n+        timer.start(millis);\n+    }\n+    ~QtRPCTimerBase() {}\n+private Q_SLOTS:\n+    void timeout() { func(); }\n+private:\n+    QTimer timer;\n+    boost::function<void(void)> func;\n+};\n+\n+class QtRPCTimerInterface: public RPCTimerInterface\n+{\n+public:\n+    ~QtRPCTimerInterface() {}\n+    const char *Name() { return \"Qt\"; }\n+    RPCTimerBase* NewTimer(boost::function<void(void)>& func, int64_t millis)\n+    {\n+        return new QtRPCTimerBase(func, millis);\n+    }\n+};\n+\n+\n #include \"rpcconsole.moc\"\n \n /**\n@@ -232,6 +267,9 @@ RPCConsole::RPCConsole(const PlatformStyle *platformStyle, QWidget *parent) :\n     ui->label_berkeleyDBVersion->hide();\n     ui->berkeleyDBVersion->hide();\n #endif\n+    // Register RPC timer interface\n+    rpcTimerInterface = new QtRPCTimerInterface();\n+    RPCRegisterTimerInterface(rpcTimerInterface);\n \n     startExecutor();\n     setTrafficGraphRange(INITIAL_TRAFFIC_GRAPH_MINS);\n@@ -246,6 +284,8 @@ RPCConsole::~RPCConsole()\n {\n     GUIUtil::saveWindowGeometry(\"nRPCConsoleWindow\", this);\n     Q_EMIT stopExecutor();\n+    RPCUnregisterTimerInterface(rpcTimerInterface);\n+    delete rpcTimerInterface;\n     delete ui;\n }\n "
      },
      {
        "sha": "1409fca525ad9f30e36fe3a608791becbc71b81f",
        "filename": "src/qt/rpcconsole.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be33f3f50b7358bbad9e16bf730fac2ab3c4886b/src/qt/rpcconsole.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be33f3f50b7358bbad9e16bf730fac2ab3c4886b/src/qt/rpcconsole.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.h?ref=be33f3f50b7358bbad9e16bf730fac2ab3c4886b",
        "patch": "@@ -14,6 +14,7 @@\n \n class ClientModel;\n class PlatformStyle;\n+class RPCTimerInterface;\n \n namespace Ui {\n     class RPCConsole;\n@@ -108,6 +109,7 @@ public Q_SLOTS:\n     NodeId cachedNodeid;\n     QMenu *contextMenu;\n     const PlatformStyle *platformStyle;\n+    RPCTimerInterface *rpcTimerInterface;\n };\n \n #endif // BITCOIN_QT_RPCCONSOLE_H"
      },
      {
        "sha": "b831d3d3b2bd6fbfc85827e2ca064495d04ae4a8",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be33f3f50b7358bbad9e16bf730fac2ab3c4886b/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be33f3f50b7358bbad9e16bf730fac2ab3c4886b/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=be33f3f50b7358bbad9e16bf730fac2ab3c4886b",
        "patch": "@@ -562,7 +562,7 @@ void RPCRunLater(const std::string& name, boost::function<void(void)> func, int6\n     deadlineTimers.erase(name);\n     RPCTimerInterface* timerInterface = timerInterfaces[0];\n     LogPrint(\"rpc\", \"queue run of timer %s in %i seconds (using %s)\\n\", name, nSeconds, timerInterface->Name());\n-    deadlineTimers.insert(std::make_pair(name, timerInterface->NewTimer(func, nSeconds)));\n+    deadlineTimers.insert(std::make_pair(name, timerInterface->NewTimer(func, nSeconds*1000)));\n }\n \n const CRPCTable tableRPC;"
      },
      {
        "sha": "83cc37918ba5785d8f8d29e0bd663e39857e41d9",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be33f3f50b7358bbad9e16bf730fac2ab3c4886b/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be33f3f50b7358bbad9e16bf730fac2ab3c4886b/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=be33f3f50b7358bbad9e16bf730fac2ab3c4886b",
        "patch": "@@ -92,12 +92,12 @@ class RPCTimerInterface\n     /** Implementation name */\n     virtual const char *Name() = 0;\n     /** Factory function for timers.\n-     * RPC will call the function to create a timer that will call func in *seconds* seconds.\n+     * RPC will call the function to create a timer that will call func in *millis* milliseconds.\n      * @note As the RPC mechanism is backend-neutral, it can use different implementations of timers.\n      * This is needed to cope with the case in which there is no HTTP server, but\n      * only GUI RPC console, and to break the dependency of pcserver on httprpc.\n      */\n-    virtual RPCTimerBase* NewTimer(boost::function<void(void)>&, int64_t) = 0;\n+    virtual RPCTimerBase* NewTimer(boost::function<void(void)>& func, int64_t millis) = 0;\n };\n \n /** Register factory function for timers */"
      }
    ]
  },
  {
    "sha": "6d2bc221463ffe3ed3a99e8c682b090983b2e7b5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZDJiYzIyMTQ2M2ZmZTNlZDNhOTllOGM2ODJiMDkwOTgzYjJlN2I1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-28T15:14:51Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-03T08:59:19Z"
      },
      "message": "Document options for new HTTP/RPC server in --help",
      "tree": {
        "sha": "4370d570b38fea9ffa1ad630b481433cfb2b890b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4370d570b38fea9ffa1ad630b481433cfb2b890b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6d2bc221463ffe3ed3a99e8c682b090983b2e7b5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d2bc221463ffe3ed3a99e8c682b090983b2e7b5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6d2bc221463ffe3ed3a99e8c682b090983b2e7b5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d2bc221463ffe3ed3a99e8c682b090983b2e7b5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "be33f3f50b7358bbad9e16bf730fac2ab3c4886b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be33f3f50b7358bbad9e16bf730fac2ab3c4886b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/be33f3f50b7358bbad9e16bf730fac2ab3c4886b"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 13,
      "deletions": 5
    },
    "files": [
      {
        "sha": "813764f22c78038edf57a5344cd81b11441b37db",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d2bc221463ffe3ed3a99e8c682b090983b2e7b5/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d2bc221463ffe3ed3a99e8c682b090983b2e7b5/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=6d2bc221463ffe3ed3a99e8c682b090983b2e7b5",
        "patch": "@@ -355,7 +355,7 @@ bool StartHTTPServer(boost::thread_group& threadGroup)\n         return false;\n     }\n \n-    evhttp_set_timeout(http, GetArg(\"-rpctimeout\", 30));\n+    evhttp_set_timeout(http, GetArg(\"-rpctimeout\", DEFAULT_HTTP_TIMEOUT));\n     evhttp_set_max_body_size(http, MAX_SIZE);\n     evhttp_set_gencb(http, http_request_cb, NULL);\n \n@@ -367,8 +367,8 @@ bool StartHTTPServer(boost::thread_group& threadGroup)\n     }\n \n     LogPrint(\"http\", \"Starting HTTP server\\n\");\n-    int workQueueDepth = std::max((long)GetArg(\"-rpcworkqueue\", 16), 1L);\n-    int rpcThreads = std::max((long)GetArg(\"-rpcthreads\", 4), 1L);\n+    int workQueueDepth = std::max((long)GetArg(\"-rpcworkqueue\", DEFAULT_HTTP_WORKQUEUE), 1L);\n+    int rpcThreads = std::max((long)GetArg(\"-rpcthreads\", DEFAULT_HTTP_THREADS), 1L);\n     LogPrintf(\"HTTP: creating work queue of depth %d and %d worker threads\\n\", workQueueDepth, rpcThreads);\n     workQueue = new WorkQueue<HTTPClosure>(workQueueDepth);\n "
      },
      {
        "sha": "1b0d77ad4d2d50b0c0872041dd0d190d01eb33bf",
        "filename": "src/httpserver.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d2bc221463ffe3ed3a99e8c682b090983b2e7b5/src/httpserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d2bc221463ffe3ed3a99e8c682b090983b2e7b5/src/httpserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.h?ref=6d2bc221463ffe3ed3a99e8c682b090983b2e7b5",
        "patch": "@@ -11,6 +11,10 @@\n #include <boost/scoped_ptr.hpp>\n #include <boost/function.hpp>\n \n+static const int DEFAULT_HTTP_THREADS=4;\n+static const int DEFAULT_HTTP_WORKQUEUE=16;\n+static const int DEFAULT_HTTP_TIMEOUT=30;\n+\n struct evhttp_request;\n struct event_base;\n class CService;"
      },
      {
        "sha": "bbf73dc8f448068ea7404c9d558131b366d9c6e0",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d2bc221463ffe3ed3a99e8c682b090983b2e7b5/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d2bc221463ffe3ed3a99e8c682b090983b2e7b5/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=6d2bc221463ffe3ed3a99e8c682b090983b2e7b5",
        "patch": "@@ -388,7 +388,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-flushwallet\", strprintf(\"Run a thread to flush wallet periodically (default: %u)\", 1));\n         strUsage += HelpMessageOpt(\"-stopafterblockimport\", strprintf(\"Stop running after importing blocks from disk (default: %u)\", 0));\n     }\n-    string debugCategories = \"addrman, alert, bench, coindb, db, lock, rand, rpc, selectcoins, mempool, mempoolrej, net, proxy, prune\"; // Don't translate these and qt below\n+    string debugCategories = \"addrman, alert, bench, coindb, db, lock, rand, rpc, selectcoins, mempool, mempoolrej, net, proxy, prune, http\"; // Don't translate these and qt below\n     if (mode == HMM_BITCOIN_QT)\n         debugCategories += \", qt\";\n     strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +\n@@ -438,7 +438,11 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-rpcpassword=<pw>\", _(\"Password for JSON-RPC connections\"));\n     strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)\"), 8332, 18332));\n     strUsage += HelpMessageOpt(\"-rpcallowip=<ip>\", _(\"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\"));\n-    strUsage += HelpMessageOpt(\"-rpcthreads=<n>\", strprintf(_(\"Set the number of threads to service RPC calls (default: %d)\"), 4));\n+    strUsage += HelpMessageOpt(\"-rpcthreads=<n>\", strprintf(_(\"Set the number of threads to service RPC calls (default: %d)\"), DEFAULT_HTTP_THREADS));\n+    if (showDebug) {\n+        strUsage += HelpMessageOpt(\"-rpcworkqueue=<n>\", strprintf(\"Set the depth of the work queue to service RPC calls (default: %d)\", DEFAULT_HTTP_WORKQUEUE));\n+        strUsage += HelpMessageOpt(\"-rpctimeout=<n>\", strprintf(\"Timeout during HTTP requests (default: %d)\", DEFAULT_HTTP_TIMEOUT));\n+    }\n \n     if (mode == HMM_BITCOIN_QT)\n     {"
      }
    ]
  },
  {
    "sha": "3a174cd400c6c239539d4c0c10b557c3e0615212",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYTE3NGNkNDAwYzZjMjM5NTM5ZDRjMGMxMGI1NTdjM2UwNjE1MjEy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-28T14:55:16Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-03T08:59:19Z"
      },
      "message": "Fix race condition between starting HTTP server thread and setting EventBase()\n\nSplit StartHTTPServer into InitHTTPServer and StartHTTPServer to give\nclients a window to register their handlers without race conditions.\n\nThanks @ajweiss for figuring this out.",
      "tree": {
        "sha": "3a7b26b9218f9e3d17d8a3f5f77e032b35f6e416",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3a7b26b9218f9e3d17d8a3f5f77e032b35f6e416"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a174cd400c6c239539d4c0c10b557c3e0615212",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a174cd400c6c239539d4c0c10b557c3e0615212",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3a174cd400c6c239539d4c0c10b557c3e0615212",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a174cd400c6c239539d4c0c10b557c3e0615212/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6d2bc221463ffe3ed3a99e8c682b090983b2e7b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d2bc221463ffe3ed3a99e8c682b090983b2e7b5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6d2bc221463ffe3ed3a99e8c682b090983b2e7b5"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 25,
      "deletions": 10
    },
    "files": [
      {
        "sha": "7e599b1d78d31a16151d455e000677de2543a408",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 8,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a174cd400c6c239539d4c0c10b557c3e0615212/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a174cd400c6c239539d4c0c10b557c3e0615212/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=3a174cd400c6c239539d4c0c10b557c3e0615212",
        "patch": "@@ -320,7 +320,7 @@ static void HTTPWorkQueueRun(WorkQueue<HTTPClosure>* queue)\n     queue->Run();\n }\n \n-bool StartHTTPServer(boost::thread_group& threadGroup)\n+bool InitHTTPServer()\n {\n     struct evhttp* http = 0;\n     struct event_base* base = 0;\n@@ -366,19 +366,25 @@ bool StartHTTPServer(boost::thread_group& threadGroup)\n         return false;\n     }\n \n-    LogPrint(\"http\", \"Starting HTTP server\\n\");\n+    LogPrint(\"http\", \"Initialized HTTP server\\n\");\n     int workQueueDepth = std::max((long)GetArg(\"-rpcworkqueue\", DEFAULT_HTTP_WORKQUEUE), 1L);\n-    int rpcThreads = std::max((long)GetArg(\"-rpcthreads\", DEFAULT_HTTP_THREADS), 1L);\n-    LogPrintf(\"HTTP: creating work queue of depth %d and %d worker threads\\n\", workQueueDepth, rpcThreads);\n+    LogPrintf(\"HTTP: creating work queue of depth %d\\n\", workQueueDepth);\n+\n     workQueue = new WorkQueue<HTTPClosure>(workQueueDepth);\n+    eventBase = base;\n+    eventHTTP = http;\n+    return true;\n+}\n \n-    threadGroup.create_thread(boost::bind(&ThreadHTTP, base, http));\n+bool StartHTTPServer(boost::thread_group& threadGroup)\n+{\n+    LogPrint(\"http\", \"Starting HTTP server\\n\");\n+    int rpcThreads = std::max((long)GetArg(\"-rpcthreads\", DEFAULT_HTTP_THREADS), 1L);\n+    LogPrintf(\"HTTP: starting %d worker threads\\n\", rpcThreads);\n+    threadGroup.create_thread(boost::bind(&ThreadHTTP, eventBase, eventHTTP));\n \n     for (int i = 0; i < rpcThreads; i++)\n         threadGroup.create_thread(boost::bind(&HTTPWorkQueueRun, workQueue));\n-\n-    eventBase = base;\n-    eventHTTP = http;\n     return true;\n }\n "
      },
      {
        "sha": "459c60c04724c0281ffcea3cccbbc3fb994fc29c",
        "filename": "src/httpserver.h",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a174cd400c6c239539d4c0c10b557c3e0615212/src/httpserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a174cd400c6c239539d4c0c10b557c3e0615212/src/httpserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.h?ref=3a174cd400c6c239539d4c0c10b557c3e0615212",
        "patch": "@@ -20,7 +20,14 @@ struct event_base;\n class CService;\n class HTTPRequest;\n \n-/** Start HTTP server */\n+/** Initialize HTTP server.\n+ * Call this before RegisterHTTPHandler or EventBase().\n+ */\n+bool InitHTTPServer();\n+/** Start HTTP server.\n+ * This is separate from InitHTTPServer to give users race-condition-free time\n+ * to register their handlers between InitHTTPServer and StartHTTPServer.\n+ */\n bool StartHTTPServer(boost::thread_group& threadGroup);\n /** Interrupt HTTP server threads */\n void InterruptHTTPServer();"
      },
      {
        "sha": "4aaeee257b35da4f8424dfd6b6853a082086ec2e",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a174cd400c6c239539d4c0c10b557c3e0615212/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a174cd400c6c239539d4c0c10b557c3e0615212/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=3a174cd400c6c239539d4c0c10b557c3e0615212",
        "patch": "@@ -618,14 +618,16 @@ bool AppInitServers(boost::thread_group& threadGroup)\n {\n     RPCServer::OnStopped(&OnRPCStopped);\n     RPCServer::OnPreCommand(&OnRPCPreCommand);\n-    if (!StartHTTPServer(threadGroup))\n+    if (!InitHTTPServer())\n         return false;\n     if (!StartRPC())\n         return false;\n     if (!StartHTTPRPC())\n         return false;\n     if (GetBoolArg(\"-rest\", false) && !StartREST())\n         return false;\n+    if (!StartHTTPServer(threadGroup))\n+        return false;\n     return true;\n }\n "
      }
    ]
  },
  {
    "sha": "4be0b082b97062be4df20e9c45dafa577b05b07c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YmUwYjA4MmI5NzA2MmJlNGRmMjBlOWM0NWRhZmE1NzdiMDViMDdj",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-08-31T09:17:26Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-03T08:59:19Z"
      },
      "message": "libevent: Windows reuseaddr workaround in depends\n\nMake it possible to reuse sockets.\nThis is necessary to make the RPC tests work in WINE.",
      "tree": {
        "sha": "6f331d8dc827ef0f7a27ffb89348800bb7bd4936",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6f331d8dc827ef0f7a27ffb89348800bb7bd4936"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4be0b082b97062be4df20e9c45dafa577b05b07c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4be0b082b97062be4df20e9c45dafa577b05b07c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4be0b082b97062be4df20e9c45dafa577b05b07c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4be0b082b97062be4df20e9c45dafa577b05b07c/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3a174cd400c6c239539d4c0c10b557c3e0615212",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a174cd400c6c239539d4c0c10b557c3e0615212",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3a174cd400c6c239539d4c0c10b557c3e0615212"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 26,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2e9be1e98ccedda520459b8d4deed2f686473746",
        "filename": "depends/packages/libevent.mk",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4be0b082b97062be4df20e9c45dafa577b05b07c/depends/packages/libevent.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4be0b082b97062be4df20e9c45dafa577b05b07c/depends/packages/libevent.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/libevent.mk?ref=4be0b082b97062be4df20e9c45dafa577b05b07c",
        "patch": "@@ -3,6 +3,11 @@ $(package)_version=2.0.22\n $(package)_download_path=https://github.com/libevent/libevent/releases/download/release-2.0.22-stable\n $(package)_file_name=$(package)-$($(package)_version)-stable.tar.gz\n $(package)_sha256_hash=71c2c49f0adadacfdbe6332a372c38cf9c8b7895bb73dabeaa53cdcc1d4e1fa3\n+$(package)_patches=reuseaddr.patch\n+\n+define $(package)_preprocess_cmds\n+  patch -p1 < $($(package)_patch_dir)/reuseaddr.patch\n+endef\n \n define $(package)_set_vars\n   $(package)_config_opts=--disable-shared --disable-openssl --disable-libevent-regress"
      },
      {
        "sha": "58695c11f5d976bd163429884e02d9a7f6f4eb4d",
        "filename": "depends/patches/libevent/reuseaddr.patch",
        "status": "added",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4be0b082b97062be4df20e9c45dafa577b05b07c/depends/patches/libevent/reuseaddr.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4be0b082b97062be4df20e9c45dafa577b05b07c/depends/patches/libevent/reuseaddr.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/libevent/reuseaddr.patch?ref=4be0b082b97062be4df20e9c45dafa577b05b07c",
        "patch": "@@ -0,0 +1,21 @@\n+--- old/evutil.c   2015-08-28 19:26:23.488765923 -0400\n++++ new/evutil.c   2015-08-28 19:27:41.392767019 -0400\n+@@ -321,15 +321,16 @@\n+ int\n+ evutil_make_listen_socket_reuseable(evutil_socket_t sock)\n+ {\n+-#ifndef WIN32\n+ \tint one = 1;\n++#ifndef WIN32\n+ \t/* REUSEADDR on Unix means, \"don't hang on to this address after the\n+ \t * listener is closed.\"  On Windows, though, it means \"don't keep other\n+ \t * processes from binding to this address while we're using it. */\n+ \treturn setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, (void*) &one,\n+ \t    (ev_socklen_t)sizeof(one));\n+ #else\n+-\treturn 0;\n++\treturn setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, (const char*) &one,\n++\t\t(ev_socklen_t)sizeof(one));\n+ #endif\n+ }\n+ "
      }
    ]
  },
  {
    "sha": "26c9b836778cbaf9b9ccb9b92e841d7bd6ea2fdc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNmM5YjgzNjc3OGNiYWY5YjljY2I5YjkyZTg0MWQ3YmQ2ZWEyZmRj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-02T14:18:16Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-03T08:59:19Z"
      },
      "message": "Move windows socket init to utility function",
      "tree": {
        "sha": "36f589364a3040c46914c1e038e6544bb48e4b7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/36f589364a3040c46914c1e038e6544bb48e4b7f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/26c9b836778cbaf9b9ccb9b92e841d7bd6ea2fdc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26c9b836778cbaf9b9ccb9b92e841d7bd6ea2fdc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/26c9b836778cbaf9b9ccb9b92e841d7bd6ea2fdc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26c9b836778cbaf9b9ccb9b92e841d7bd6ea2fdc/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4be0b082b97062be4df20e9c45dafa577b05b07c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4be0b082b97062be4df20e9c45dafa577b05b07c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4be0b082b97062be4df20e9c45dafa577b05b07c"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 21,
      "deletions": 9
    },
    "files": [
      {
        "sha": "866c6f2d4443cd2565a3ef86255833573d932de9",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26c9b836778cbaf9b9ccb9b92e841d7bd6ea2fdc/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26c9b836778cbaf9b9ccb9b92e841d7bd6ea2fdc/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=26c9b836778cbaf9b9ccb9b92e841d7bd6ea2fdc",
        "patch": "@@ -301,6 +301,10 @@ int CommandLineRPC(int argc, char *argv[])\n int main(int argc, char* argv[])\n {\n     SetupEnvironment();\n+    if (!SetupNetworking()) {\n+        fprintf(stderr, \"Error: Initializing networking failed\\n\");\n+        exit(1);\n+    }\n \n     try {\n         if(!AppInitRPC(argc, argv))"
      },
      {
        "sha": "4cdbd5edaaa0d9d6293ca491913555b3d82645bc",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 9,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26c9b836778cbaf9b9ccb9b92e841d7bd6ea2fdc/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26c9b836778cbaf9b9ccb9b92e841d7bd6ea2fdc/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=26c9b836778cbaf9b9ccb9b92e841d7bd6ea2fdc",
        "patch": "@@ -658,17 +658,12 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     typedef BOOL (WINAPI *PSETPROCDEPPOL)(DWORD);\n     PSETPROCDEPPOL setProcDEPPol = (PSETPROCDEPPOL)GetProcAddress(GetModuleHandleA(\"Kernel32.dll\"), \"SetProcessDEPPolicy\");\n     if (setProcDEPPol != NULL) setProcDEPPol(PROCESS_DEP_ENABLE);\n-\n-    // Initialize Windows Sockets\n-    WSADATA wsadata;\n-    int ret = WSAStartup(MAKEWORD(2,2), &wsadata);\n-    if (ret != NO_ERROR || LOBYTE(wsadata.wVersion ) != 2 || HIBYTE(wsadata.wVersion) != 2)\n-    {\n-        return InitError(strprintf(\"Error: Winsock library failed to start (WSAStartup returned error %d)\", ret));\n-    }\n #endif\n-#ifndef WIN32\n \n+    if (!SetupNetworking())\n+        return InitError(\"Error: Initializing networking failed\");\n+\n+#ifndef WIN32\n     if (GetBoolArg(\"-sysperms\", false)) {\n #ifdef ENABLE_WALLET\n         if (!GetBoolArg(\"-disablewallet\", false))"
      },
      {
        "sha": "f50d25e17a14e55063daa790b009bf751db7b181",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26c9b836778cbaf9b9ccb9b92e841d7bd6ea2fdc/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26c9b836778cbaf9b9ccb9b92e841d7bd6ea2fdc/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=26c9b836778cbaf9b9ccb9b92e841d7bd6ea2fdc",
        "patch": "@@ -794,6 +794,18 @@ void SetupEnvironment()\n     boost::filesystem::path::imbue(loc);\n }\n \n+bool SetupNetworking()\n+{\n+#ifdef WIN32\n+    // Initialize Windows Sockets\n+    WSADATA wsadata;\n+    int ret = WSAStartup(MAKEWORD(2,2), &wsadata);\n+    if (ret != NO_ERROR || LOBYTE(wsadata.wVersion ) != 2 || HIBYTE(wsadata.wVersion) != 2)\n+        return false;\n+#endif\n+    return true;\n+}\n+\n void SetThreadPriority(int nPriority)\n {\n #ifdef WIN32"
      },
      {
        "sha": "0b2dc01ac65f397c86e69eeb3fe821f70c69b110",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26c9b836778cbaf9b9ccb9b92e841d7bd6ea2fdc/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26c9b836778cbaf9b9ccb9b92e841d7bd6ea2fdc/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=26c9b836778cbaf9b9ccb9b92e841d7bd6ea2fdc",
        "patch": "@@ -59,6 +59,7 @@ inline std::string _(const char* psz)\n }\n \n void SetupEnvironment();\n+bool SetupNetworking();\n \n /** Return true if log accepts specified category */\n bool LogAcceptCategory(const char* category);"
      }
    ]
  },
  {
    "sha": "88f856a9e78a1440d9fdd8f9d5aa3cd034d66bf9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OGY4NTZhOWU3OGExNDQwZDlmZGQ4ZjlkNWFhM2NkMDM0ZDY2YmY5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-08-07T14:14:42Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-09-03T12:22:57Z"
      },
      "message": "[doc] Clarify authors in assets-attribution.md",
      "tree": {
        "sha": "8c3d1c94f848a3c628e10ad61039aae714423f61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8c3d1c94f848a3c628e10ad61039aae714423f61"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/88f856a9e78a1440d9fdd8f9d5aa3cd034d66bf9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88f856a9e78a1440d9fdd8f9d5aa3cd034d66bf9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/88f856a9e78a1440d9fdd8f9d5aa3cd034d66bf9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88f856a9e78a1440d9fdd8f9d5aa3cd034d66bf9/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "df9c2ee1c9c02b79ccbb6cbae03096c3f9af23c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df9c2ee1c9c02b79ccbb6cbae03096c3f9af23c7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/df9c2ee1c9c02b79ccbb6cbae03096c3f9af23c7"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 28,
      "deletions": 25
    },
    "files": [
      {
        "sha": "460c1f8e2edc7e08eba3b49e60c41ded9b0c2434",
        "filename": "doc/assets-attribution.md",
        "status": "modified",
        "additions": 28,
        "deletions": 25,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/88f856a9e78a1440d9fdd8f9d5aa3cd034d66bf9/doc/assets-attribution.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/88f856a9e78a1440d9fdd8f9d5aa3cd034d66bf9/doc/assets-attribution.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/assets-attribution.md?ref=88f856a9e78a1440d9fdd8f9d5aa3cd034d66bf9",
        "patch": "@@ -11,57 +11,60 @@ The following is a list of assets used in the bitcoin source and their proper at\n \n ### Assets Used\n     src/qt/res/icons/add.png\n-    src/qt/res/icons/address-book.png,\n+    src/qt/res/icons/address-book.png\n     src/qt/res/icons/configure.png\n     src/qt/res/icons/debugwindow.png\n-    src/qt/res/icons/edit.png,\n-    src/qt/res/icons/exitcopy.png\n-    src/qt/res/icons/editpaste.png,\n+    src/qt/res/icons/edit.png\n+    src/qt/res/icons/editcopy.png\n+    src/qt/res/icons/editpaste.png\n     src/qt/res/icons/export.png\n-    src/qt/res/icons/eye.png,\n+    src/qt/res/icons/eye.png\n     src/qt/res/icons/filesave.png\n-    src/qt/res/icons/history.png,\n+    src/qt/res/icons/history.png\n     src/qt/res/icons/info.png\n-    src/qt/res/icons/key.png,\n+    src/qt/res/icons/key.png\n     src/qt/res/icons/lock_*.png\n-    src/qt/res/icons/open.png,\n+    src/qt/res/icons/open.png\n     src/qt/res/icons/overview.png\n-    src/qt/res/icons/quit.png,\n+    src/qt/res/icons/quit.png\n     src/qt/res/icons/receive.png\n-    src/qt/res/icons/remove.png,\n+    src/qt/res/icons/remove.png\n     src/qt/res/icons/send.png\n-    src/qt/res/icons/synced.png,\n+    src/qt/res/icons/synced.png\n     src/qt/res/icons/transaction*.png\n-    src/qt/res/icons/tx_output.png,\n+    src/qt/res/icons/tx_output.png\n     src/qt/res/icons/warning.png\n \n Other\n -----------------------\n \n ### Info\n * Designer: Jonas Schnelli, Bitboy, Stephen Hutchings, Marco Falke\n-* Bitcoin Icon: Based on the original bitcoin logo from Bitboy\n-* Network connection icon: Inspired by flow-merge.svg from Stephen Hutchings\n-* Some icons are based on Stephan Hutchings Typicons\n+* Bitcoin icon: Based on the original bitcoin logo from Bitboy\n+* Network connection icons: Marco Falke, inspired by flow-merge.svg from Stephen Hutchings\n+* Transaction-mined icon: Jonas Schnelli\n+* Other icons are based on Stephan Hutchings Typicons\n * License: MIT\n \n ### Assets Used\n     src/qt/res/icons/about.png\n-    src/qt/res/icons/about_qt.png,\n+    src/qt/res/icons/about_qt.png\n     src/qt/res/icons/bitcoin.icns\n-    src/qt/res/icons/bitcoin.ico,\n+    src/qt/res/icons/bitcoin.ico\n     src/qt/res/icons/bitcoin.png\n-    src/qt/res/icons/clock*.png,\n+    src/qt/res/icons/clock*.png\n     src/qt/res/icons/connect*.png\n-    src/qt/res/icons/eye_minus.png,\n+    src/qt/res/icons/eye_minus.png\n     src/qt/res/icons/eye_plus.png\n-    src/qt/res/icons/verify.png,\n+    src/qt/res/icons/verify.png\n     src/qt/res/icons/tx_inout.png\n-    src/qt/res/icons/tx_input.png,\n-    src/qt/res/src/bitcoin.svg,\n-    src/qt/res/src/clock*.svg\n-    src/qt/res/src/connect*.svg,\n+    src/qt/res/icons/tx_input.png\n+    src/qt/res/icons/tx_mined.png\n+    src/qt/res/src/bitcoin.svg\n+    src/qt/res/src/clock_*.svg\n+    src/qt/res/src/connect-*.svg\n     src/qt/res/src/mine.svg\n     src/qt/res/src/qt.svg\n-    src/qt/res/src/tx*.svg,\n+    src/qt/res/src/tx_*.svg\n+    src/qt/res/src/transaction0.svg\n     src/qt/res/src/verify.svg"
      }
    ]
  },
  {
    "sha": "0c02a75787fe14115c4283290c1d37fbf2bee67e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYzAyYTc1Nzg3ZmUxNDExNWM0MjgzMjkwYzFkMzdmYmYyYmVlNjdl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-03T15:01:10Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-03T15:03:46Z"
      },
      "message": "Merge pull request #6627\n\n88f856a [doc] Clarify authors in assets-attribution.md (MarcoFalke)",
      "tree": {
        "sha": "cc7f6f0061af7d687f00ce706f5a0182511d51b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cc7f6f0061af7d687f00ce706f5a0182511d51b4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0c02a75787fe14115c4283290c1d37fbf2bee67e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJV6GFSAAoJEHSBCwEjRsmmlIoH/3sLh5xChymRGhnMfxkzG9XX\nr+VUOGUv2YGUMT5dwxI6mXIIMFzIW9fR77Dv+wvIsQlfZOpod51CE+eA2xiHmTtU\nbVp5kVZCyQt5HN1KbXMNsAwxioS9Of/4SaJu/2I3WRLx1WZ6I4XdvkodaPzsCrSE\nEXBZ0JlmVN8s2gTB+m/JI/T4C6xrNXEdwhnFNhIeSp9INnfhSvQ6JCrAAM9QDA5g\n49Mvf4BDfCtpOYehkBvfgKqd/3FqXqRzg3sV+vFKzPis0OwhZ6eznflipkm3wlBA\nLeXPe3SOaJSNg/WdkenZtFyogDZa7bgKa8bbKWXAVfh9pWg7h4FzcLuyhQGruAw=\n=Mq8l\n-----END PGP SIGNATURE-----",
        "payload": "tree cc7f6f0061af7d687f00ce706f5a0182511d51b4\nparent 3932ff50c563df19c14e9987f2297d9f99a299ac\nparent 88f856a9e78a1440d9fdd8f9d5aa3cd034d66bf9\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1441292470 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1441292626 +0200\n\nMerge pull request #6627\n\n88f856a [doc] Clarify authors in assets-attribution.md (MarcoFalke)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c02a75787fe14115c4283290c1d37fbf2bee67e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0c02a75787fe14115c4283290c1d37fbf2bee67e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c02a75787fe14115c4283290c1d37fbf2bee67e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3932ff50c563df19c14e9987f2297d9f99a299ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3932ff50c563df19c14e9987f2297d9f99a299ac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3932ff50c563df19c14e9987f2297d9f99a299ac"
      },
      {
        "sha": "88f856a9e78a1440d9fdd8f9d5aa3cd034d66bf9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88f856a9e78a1440d9fdd8f9d5aa3cd034d66bf9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/88f856a9e78a1440d9fdd8f9d5aa3cd034d66bf9"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 28,
      "deletions": 25
    },
    "files": [
      {
        "sha": "460c1f8e2edc7e08eba3b49e60c41ded9b0c2434",
        "filename": "doc/assets-attribution.md",
        "status": "modified",
        "additions": 28,
        "deletions": 25,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c02a75787fe14115c4283290c1d37fbf2bee67e/doc/assets-attribution.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c02a75787fe14115c4283290c1d37fbf2bee67e/doc/assets-attribution.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/assets-attribution.md?ref=0c02a75787fe14115c4283290c1d37fbf2bee67e",
        "patch": "@@ -11,57 +11,60 @@ The following is a list of assets used in the bitcoin source and their proper at\n \n ### Assets Used\n     src/qt/res/icons/add.png\n-    src/qt/res/icons/address-book.png,\n+    src/qt/res/icons/address-book.png\n     src/qt/res/icons/configure.png\n     src/qt/res/icons/debugwindow.png\n-    src/qt/res/icons/edit.png,\n-    src/qt/res/icons/exitcopy.png\n-    src/qt/res/icons/editpaste.png,\n+    src/qt/res/icons/edit.png\n+    src/qt/res/icons/editcopy.png\n+    src/qt/res/icons/editpaste.png\n     src/qt/res/icons/export.png\n-    src/qt/res/icons/eye.png,\n+    src/qt/res/icons/eye.png\n     src/qt/res/icons/filesave.png\n-    src/qt/res/icons/history.png,\n+    src/qt/res/icons/history.png\n     src/qt/res/icons/info.png\n-    src/qt/res/icons/key.png,\n+    src/qt/res/icons/key.png\n     src/qt/res/icons/lock_*.png\n-    src/qt/res/icons/open.png,\n+    src/qt/res/icons/open.png\n     src/qt/res/icons/overview.png\n-    src/qt/res/icons/quit.png,\n+    src/qt/res/icons/quit.png\n     src/qt/res/icons/receive.png\n-    src/qt/res/icons/remove.png,\n+    src/qt/res/icons/remove.png\n     src/qt/res/icons/send.png\n-    src/qt/res/icons/synced.png,\n+    src/qt/res/icons/synced.png\n     src/qt/res/icons/transaction*.png\n-    src/qt/res/icons/tx_output.png,\n+    src/qt/res/icons/tx_output.png\n     src/qt/res/icons/warning.png\n \n Other\n -----------------------\n \n ### Info\n * Designer: Jonas Schnelli, Bitboy, Stephen Hutchings, Marco Falke\n-* Bitcoin Icon: Based on the original bitcoin logo from Bitboy\n-* Network connection icon: Inspired by flow-merge.svg from Stephen Hutchings\n-* Some icons are based on Stephan Hutchings Typicons\n+* Bitcoin icon: Based on the original bitcoin logo from Bitboy\n+* Network connection icons: Marco Falke, inspired by flow-merge.svg from Stephen Hutchings\n+* Transaction-mined icon: Jonas Schnelli\n+* Other icons are based on Stephan Hutchings Typicons\n * License: MIT\n \n ### Assets Used\n     src/qt/res/icons/about.png\n-    src/qt/res/icons/about_qt.png,\n+    src/qt/res/icons/about_qt.png\n     src/qt/res/icons/bitcoin.icns\n-    src/qt/res/icons/bitcoin.ico,\n+    src/qt/res/icons/bitcoin.ico\n     src/qt/res/icons/bitcoin.png\n-    src/qt/res/icons/clock*.png,\n+    src/qt/res/icons/clock*.png\n     src/qt/res/icons/connect*.png\n-    src/qt/res/icons/eye_minus.png,\n+    src/qt/res/icons/eye_minus.png\n     src/qt/res/icons/eye_plus.png\n-    src/qt/res/icons/verify.png,\n+    src/qt/res/icons/verify.png\n     src/qt/res/icons/tx_inout.png\n-    src/qt/res/icons/tx_input.png,\n-    src/qt/res/src/bitcoin.svg,\n-    src/qt/res/src/clock*.svg\n-    src/qt/res/src/connect*.svg,\n+    src/qt/res/icons/tx_input.png\n+    src/qt/res/icons/tx_mined.png\n+    src/qt/res/src/bitcoin.svg\n+    src/qt/res/src/clock_*.svg\n+    src/qt/res/src/connect-*.svg\n     src/qt/res/src/mine.svg\n     src/qt/res/src/qt.svg\n-    src/qt/res/src/tx*.svg,\n+    src/qt/res/src/tx_*.svg\n+    src/qt/res/src/transaction0.svg\n     src/qt/res/src/verify.svg"
      }
    ]
  },
  {
    "sha": "5e1ec3b5be95ce4ab870796983da7b56154bbfd6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZTFlYzNiNWJlOTVjZTRhYjg3MDc5Njk4M2RhN2I1NjE1NGJiZmQ2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-03T15:19:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-03T15:19:50Z"
      },
      "message": "Merge pull request #6611\n\n5b85126 Update build-unix.md (Altoidnerd)",
      "tree": {
        "sha": "90dca46e7a96a61d68c4da74a166686be0d85a4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/90dca46e7a96a61d68c4da74a166686be0d85a4d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5e1ec3b5be95ce4ab870796983da7b56154bbfd6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJV6GUWAAoJEHSBCwEjRsmmEyQH/AmSK/mNbn9ueuLhstSibi7d\nMR62sngWEGaCV+H0i6116YvrFloJjIIwbgM93psZTybJumiBQYgbpgxzaySJlc1n\nSW5T/wLc1tpXu+lihEDubSZmh2dh5JVKRYetSVO74OD1ivjD7SOZGpzlsYe5SpZv\nG+nKDxrubBKsU0kURcyzGBMcMC+e5WGRZjR7O5xHbWYR2Vyr1RFMfCHgtoxxaubG\n4PFayXJUzGLpL0roJpinr7fSYf4uPQeT2F1/Z3FUEEL2YVfCi4mbGpr6A/NaMxMA\nlZEdpjI1dyoNMNxr4mYxTEg5jD0h2rIaFx3P3TrpYAezRorUzjIYZvgf0f/63Bw=\n=Q9ZY\n-----END PGP SIGNATURE-----",
        "payload": "tree 90dca46e7a96a61d68c4da74a166686be0d85a4d\nparent 0c02a75787fe14115c4283290c1d37fbf2bee67e\nparent 5b85126863dc788a6d55e57552f27841ff00abdb\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1441293584 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1441293590 +0200\n\nMerge pull request #6611\n\n5b85126 Update build-unix.md (Altoidnerd)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e1ec3b5be95ce4ab870796983da7b56154bbfd6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5e1ec3b5be95ce4ab870796983da7b56154bbfd6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e1ec3b5be95ce4ab870796983da7b56154bbfd6/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0c02a75787fe14115c4283290c1d37fbf2bee67e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c02a75787fe14115c4283290c1d37fbf2bee67e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0c02a75787fe14115c4283290c1d37fbf2bee67e"
      },
      {
        "sha": "5b85126863dc788a6d55e57552f27841ff00abdb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b85126863dc788a6d55e57552f27841ff00abdb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5b85126863dc788a6d55e57552f27841ff00abdb"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "95e501ac6967b25e8e30eea666d9f77b7386ac56",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e1ec3b5be95ce4ab870796983da7b56154bbfd6/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e1ec3b5be95ce4ab870796983da7b56154bbfd6/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=5e1ec3b5be95ce4ab870796983da7b56154bbfd6",
        "patch": "@@ -154,7 +154,8 @@ make install\n \n # Configure Bitcoin Core to use our own-built instance of BDB\n cd $BITCOIN_ROOT\n-./configure (other args...) LDFLAGS=\"-L${BDB_PREFIX}/lib/\" CPPFLAGS=\"-I${BDB_PREFIX}/include/\"\n+./autogen.sh\n+./configure LDFLAGS=\"-L${BDB_PREFIX}/lib/\" CPPFLAGS=\"-I${BDB_PREFIX}/include/\" # (other args...)\n ```\n \n **Note**: You only need Berkeley DB if the wallet is enabled (see the section *Disable-Wallet mode* below)."
      }
    ]
  },
  {
    "sha": "69dc5b51a023a23ae66017f05fa43a0203f3c627",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OWRjNWI1MWEwMjNhMjNhZTY2MDE3ZjA1ZmE0M2EwMjAzZjNjNjI3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-03T16:12:10Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-03T16:27:24Z"
      },
      "message": "Merge pull request #6374\n\n027de94 Use network group instead of CNetAddr in final pass to select node to disconnect (Patrick Strateman)\n000c18a Fix comment (Patrick Strateman)\nfed3094 Acquire cs_vNodes before changing refrence counts (Patrick Strateman)\n69ee1aa CNodeRef copy constructor and assignment operator (Patrick Strateman)\ndc81dd0 Return false early if vEvictionCandidates is empty (Patrick Strateman)\n17f3533 Better support for nodes with non-standard nMaxConnections (Patrick Strateman)\n1317cd1 RAII wrapper for CNode* (Patrick Strateman)\ndf23937 Add comments to AttemptToEvictConnection (Patrick Strateman)\na8f6e45 Remove redundant whiteconnections option (Patrick Strateman)\nb105ba3 Prefer to disconnect peers in favor of whitelisted peers (Patrick Strateman)\n2c70153 AttemptToEvictConnection (Patrick Strateman)\n4bac601 Record nMinPingUsecTime (Patrick Strateman)\nae037b7 Refactor: Move failure conditions to the top of AcceptConnection (Patrick Strateman)\n1ef4817 Refactor: Bail early in AcceptConnection (Patrick Strateman)\n541a1dd Refactor: AcceptConnection (Patrick Strateman)",
      "tree": {
        "sha": "0caade1f90630a930a73e5dd61293f31e18e0b08",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0caade1f90630a930a73e5dd61293f31e18e0b08"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/69dc5b51a023a23ae66017f05fa43a0203f3c627",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJV6HTsAAoJEHSBCwEjRsmmjtsH/RkL48tNKQHyyWUX69764WUQ\nnZVNZWKGKWtPb17Vp/oUrTxFjMFCjVUqHsmcQs0k/iKLIcNoeSpSfBLsKUiA4d7A\nmaQfuStSJ44iOtycDaGxNNNKtO6xG9U02PcQUArsURVyLrWSHCn+PgW/4OLZRCWt\nZ02kJNjvRGIv6rHy7oFB1NObxiGR8Ed37EdYsmq0HJJXBwunFIjI1wYMqbFuyCqZ\ny9foqXwpmVLbvbJfRpOYpZzDWlbQWcTQxwrU8DDKJy/WNGhOipqzfvAaqs/uNrAo\nWMxBkfy7TA5fJRegfy/wq962BmHOjwhWd8z2EEKAsI71hENcyluZxH2d6oweaEE=\n=xiEN\n-----END PGP SIGNATURE-----",
        "payload": "tree 0caade1f90630a930a73e5dd61293f31e18e0b08\nparent 5e1ec3b5be95ce4ab870796983da7b56154bbfd6\nparent 027de94e1fba5484aed2393afd89edbaaffdb0eb\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1441296730 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1441297644 +0200\n\nMerge pull request #6374\n\n027de94 Use network group instead of CNetAddr in final pass to select node to disconnect (Patrick Strateman)\n000c18a Fix comment (Patrick Strateman)\nfed3094 Acquire cs_vNodes before changing refrence counts (Patrick Strateman)\n69ee1aa CNodeRef copy constructor and assignment operator (Patrick Strateman)\ndc81dd0 Return false early if vEvictionCandidates is empty (Patrick Strateman)\n17f3533 Better support for nodes with non-standard nMaxConnections (Patrick Strateman)\n1317cd1 RAII wrapper for CNode* (Patrick Strateman)\ndf23937 Add comments to AttemptToEvictConnection (Patrick Strateman)\na8f6e45 Remove redundant whiteconnections option (Patrick Strateman)\nb105ba3 Prefer to disconnect peers in favor of whitelisted peers (Patrick Strateman)\n2c70153 AttemptToEvictConnection (Patrick Strateman)\n4bac601 Record nMinPingUsecTime (Patrick Strateman)\nae037b7 Refactor: Move failure conditions to the top of AcceptConnection (Patrick Strateman)\n1ef4817 Refactor: Bail early in AcceptConnection (Patrick Strateman)\n541a1dd Refactor: AcceptConnection (Patrick Strateman)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69dc5b51a023a23ae66017f05fa43a0203f3c627",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/69dc5b51a023a23ae66017f05fa43a0203f3c627",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69dc5b51a023a23ae66017f05fa43a0203f3c627/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5e1ec3b5be95ce4ab870796983da7b56154bbfd6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e1ec3b5be95ce4ab870796983da7b56154bbfd6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5e1ec3b5be95ce4ab870796983da7b56154bbfd6"
      },
      {
        "sha": "027de94e1fba5484aed2393afd89edbaaffdb0eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/027de94e1fba5484aed2393afd89edbaaffdb0eb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/027de94e1fba5484aed2393afd89edbaaffdb0eb"
      }
    ],
    "stats": {
      "total": 319,
      "additions": 220,
      "deletions": 99
    },
    "files": [
      {
        "sha": "3aebe4f7be2f76cbb75aedd2cbb734c7256294d7",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 29,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69dc5b51a023a23ae66017f05fa43a0203f3c627/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69dc5b51a023a23ae66017f05fa43a0203f3c627/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=69dc5b51a023a23ae66017f05fa43a0203f3c627",
        "patch": "@@ -335,7 +335,6 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-whitebind=<addr>\", _(\"Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6\"));\n     strUsage += HelpMessageOpt(\"-whitelist=<netmask>\", _(\"Whitelist peers connecting from the given netmask or IP address. Can be specified multiple times.\") +\n         \" \" + _(\"Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway\"));\n-    strUsage += HelpMessageOpt(\"-whiteconnections=<n>\", strprintf(_(\"Reserve this many inbound connections for whitelisted peers (default: %d)\"), 0));\n \n #ifdef ENABLE_WALLET\n     strUsage += HelpMessageGroup(_(\"Wallet options:\"));\n@@ -754,25 +753,6 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     int nBind = std::max((int)mapArgs.count(\"-bind\") + (int)mapArgs.count(\"-whitebind\"), 1);\n     int nUserMaxConnections = GetArg(\"-maxconnections\", DEFAULT_MAX_PEER_CONNECTIONS);\n     nMaxConnections = std::max(nUserMaxConnections, 0);\n-    int nUserWhiteConnections = GetArg(\"-whiteconnections\", 0);\n-    nWhiteConnections = std::max(nUserWhiteConnections, 0);\n-\n-    if ((mapArgs.count(\"-whitelist\")) || (mapArgs.count(\"-whitebind\"))) {\n-        if (!(mapArgs.count(\"-maxconnections\"))) {\n-            // User is using whitelist feature,\n-            // but did not specify -maxconnections parameter.\n-            // Silently increase the default to compensate,\n-            // so that the whitelist connection reservation feature\n-            // does not inadvertently reduce the default\n-            // inbound connection capacity of the network.\n-            nMaxConnections += nWhiteConnections;\n-        }\n-    } else {\n-        // User not using whitelist feature.\n-        // Silently disable connection reservation,\n-        // for the same reason as above.\n-        nWhiteConnections = 0;\n-    }\n \n     // Trim requested connection counts, to fit into system limitations\n     nMaxConnections = std::max(std::min(nMaxConnections, (int)(FD_SETSIZE - nBind - MIN_CORE_FILEDESCRIPTORS)), 0);\n@@ -784,13 +764,6 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     if (nMaxConnections < nUserMaxConnections)\n         InitWarning(strprintf(_(\"Reducing -maxconnections from %d to %d, because of system limitations.\"), nUserMaxConnections, nMaxConnections));\n \n-    // Connection capacity is prioritized in this order:\n-    // outbound connections (hardcoded to 8),\n-    // then whitelisted connections,\n-    // then non-whitelisted connections get whatever's left (if any).\n-    if ((nWhiteConnections > 0) && (nWhiteConnections >= (nMaxConnections - 8)))\n-        InitWarning(strprintf(_(\"All non-whitelisted incoming connections will be dropped, because -whiteconnections is %d and -maxconnections is only %d.\"), nWhiteConnections, nMaxConnections));\n-\n     // ********************************************************* Step 3: parameter-to-internal-flags\n \n     fDebug = !mapMultiArgs[\"-debug\"].empty();\n@@ -968,8 +941,6 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     LogPrintf(\"Using data directory %s\\n\", strDataDir);\n     LogPrintf(\"Using config file %s\\n\", GetConfigFile().string());\n     LogPrintf(\"Using at most %i connections (%i file descriptors available)\\n\", nMaxConnections, nFD);\n-    if (nWhiteConnections > 0)\n-        LogPrintf(\"Reserving %i of these connections for whitelisted inbound peers\\n\", nWhiteConnections);\n     std::ostringstream strErrors;\n \n     LogPrintf(\"Using %u threads for script verification\\n\", nScriptCheckThreads);"
      },
      {
        "sha": "35fbec666594c6bf564442bd36d83d348395cbba",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69dc5b51a023a23ae66017f05fa43a0203f3c627/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69dc5b51a023a23ae66017f05fa43a0203f3c627/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=69dc5b51a023a23ae66017f05fa43a0203f3c627",
        "patch": "@@ -4522,6 +4522,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     if (pingUsecTime > 0) {\n                         // Successful ping time measurement, replace previous\n                         pfrom->nPingUsecTime = pingUsecTime;\n+                        pfrom->nMinPingUsecTime = std::min(pfrom->nMinPingUsecTime, pingUsecTime);\n                     } else {\n                         // This should never happen\n                         sProblem = \"Timing mishap\";"
      },
      {
        "sha": "4909d5fd408711b188ada68fd1ddfe0b3f2d0458",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 217,
        "deletions": 59,
        "changes": 276,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69dc5b51a023a23ae66017f05fa43a0203f3c627/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69dc5b51a023a23ae66017f05fa43a0203f3c627/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=69dc5b51a023a23ae66017f05fa43a0203f3c627",
        "patch": "@@ -81,7 +81,6 @@ uint64_t nLocalHostNonce = 0;\n static std::vector<ListenSocket> vhListenSocket;\n CAddrMan addrman;\n int nMaxConnections = DEFAULT_MAX_PEER_CONNECTIONS;\n-int nWhiteConnections = 0;\n bool fAddressesInitialized = false;\n std::string strSubVersion;\n \n@@ -776,6 +775,222 @@ void SocketSendData(CNode *pnode)\n \n static list<CNode*> vNodesDisconnected;\n \n+class CNodeRef {\n+public:\n+    CNodeRef(CNode *pnode) : _pnode(pnode) {\n+        LOCK(cs_vNodes);\n+        _pnode->AddRef();\n+    }\n+\n+    ~CNodeRef() {\n+        LOCK(cs_vNodes);\n+        _pnode->Release();\n+    }\n+\n+    CNode& operator *() const {return *_pnode;};\n+    CNode* operator ->() const {return _pnode;};\n+\n+    CNodeRef& operator =(const CNodeRef& other)\n+    {\n+        if (this != &other) {\n+            LOCK(cs_vNodes);\n+\n+            _pnode->Release();\n+            _pnode = other._pnode;\n+            _pnode->AddRef();\n+        }\n+        return *this;\n+    }\n+\n+    CNodeRef(const CNodeRef& other):\n+        _pnode(other._pnode)\n+    {\n+        LOCK(cs_vNodes);\n+        _pnode->AddRef();\n+    }\n+private:\n+    CNode *_pnode;\n+};\n+\n+static bool ReverseCompareNodeMinPingTime(const CNodeRef &a, const CNodeRef &b)\n+{\n+    return a->nMinPingUsecTime > b->nMinPingUsecTime;\n+}\n+\n+static bool ReverseCompareNodeTimeConnected(const CNodeRef &a, const CNodeRef &b)\n+{\n+    return a->nTimeConnected > b->nTimeConnected;\n+}\n+\n+class CompareNetGroupKeyed\n+{\n+    std::vector<unsigned char> vchSecretKey;\n+public:\n+    CompareNetGroupKeyed()\n+    {\n+        vchSecretKey.resize(32, 0);\n+        GetRandBytes(vchSecretKey.data(), vchSecretKey.size());\n+    }\n+\n+    bool operator()(const CNodeRef &a, const CNodeRef &b)\n+    {\n+        std::vector<unsigned char> vchGroupA, vchGroupB;\n+        CSHA256 hashA, hashB;\n+        std::vector<unsigned char> vchA(32), vchB(32);\n+\n+        vchGroupA = a->addr.GetGroup();\n+        vchGroupB = b->addr.GetGroup();\n+\n+        hashA.Write(begin_ptr(vchGroupA), vchGroupA.size());\n+        hashB.Write(begin_ptr(vchGroupB), vchGroupB.size());\n+\n+        hashA.Write(begin_ptr(vchSecretKey), vchSecretKey.size());\n+        hashB.Write(begin_ptr(vchSecretKey), vchSecretKey.size());\n+\n+        hashA.Finalize(begin_ptr(vchA));\n+        hashB.Finalize(begin_ptr(vchB));\n+\n+        return vchA < vchB;\n+    }\n+};\n+\n+static bool AttemptToEvictConnection(bool fPreferNewConnection) {\n+    std::vector<CNodeRef> vEvictionCandidates;\n+    {\n+        LOCK(cs_vNodes);\n+\n+        BOOST_FOREACH(CNode *node, vNodes) {\n+            if (node->fWhitelisted)\n+                continue;\n+            if (!node->fInbound)\n+                continue;\n+            if (node->fDisconnect)\n+                continue;\n+            if (node->addr.IsLocal())\n+                continue;\n+            vEvictionCandidates.push_back(CNodeRef(node));\n+        }\n+    }\n+\n+    if (vEvictionCandidates.empty()) return false;\n+\n+    // Protect connections with certain characteristics\n+\n+    // Deterministically select 4 peers to protect by netgroup.\n+    // An attacker cannot predict which netgroups will be protected.\n+    static CompareNetGroupKeyed comparerNetGroupKeyed;\n+    std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), comparerNetGroupKeyed);\n+    vEvictionCandidates.erase(vEvictionCandidates.end() - std::min(4, static_cast<int>(vEvictionCandidates.size())), vEvictionCandidates.end());\n+\n+    if (vEvictionCandidates.empty()) return false;\n+\n+    // Protect the 8 nodes with the best ping times.\n+    // An attacker cannot manipulate this metric without physically moving nodes closer to the target.\n+    std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), ReverseCompareNodeMinPingTime);\n+    vEvictionCandidates.erase(vEvictionCandidates.end() - std::min(8, static_cast<int>(vEvictionCandidates.size())), vEvictionCandidates.end());\n+\n+    if (vEvictionCandidates.empty()) return false;\n+\n+    // Protect the half of the remaining nodes which have been connected the longest.\n+    // This replicates the existing implicit behavior.\n+    std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), ReverseCompareNodeTimeConnected);\n+    vEvictionCandidates.erase(vEvictionCandidates.end() - static_cast<int>(vEvictionCandidates.size() / 2), vEvictionCandidates.end());\n+\n+    if (vEvictionCandidates.empty()) return false;\n+\n+    // Identify the network group with the most connections\n+    std::vector<unsigned char> naMostConnections;\n+    unsigned int nMostConnections = 0;\n+    std::map<std::vector<unsigned char>, std::vector<CNodeRef> > mapAddrCounts;\n+    BOOST_FOREACH(const CNodeRef &node, vEvictionCandidates) {\n+        mapAddrCounts[node->addr.GetGroup()].push_back(node);\n+\n+        if (mapAddrCounts[node->addr.GetGroup()].size() > nMostConnections) {\n+            nMostConnections = mapAddrCounts[node->addr.GetGroup()].size();\n+            naMostConnections = node->addr.GetGroup();\n+        }\n+    }\n+\n+    // Reduce to the network group with the most connections\n+    vEvictionCandidates = mapAddrCounts[naMostConnections];\n+\n+    // Do not disconnect peers if there is only 1 connection from their network group\n+    if (vEvictionCandidates.size() <= 1)\n+        // unless we prefer the new connection (for whitelisted peers)\n+        if (!fPreferNewConnection)\n+            return false;\n+\n+    // Disconnect the most recent connection from the network group with the most connections\n+    std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), ReverseCompareNodeTimeConnected);\n+    vEvictionCandidates[0]->fDisconnect = true;\n+\n+    return true;\n+}\n+\n+static void AcceptConnection(const ListenSocket& hListenSocket) {\n+    struct sockaddr_storage sockaddr;\n+    socklen_t len = sizeof(sockaddr);\n+    SOCKET hSocket = accept(hListenSocket.socket, (struct sockaddr*)&sockaddr, &len);\n+    CAddress addr;\n+    int nInbound = 0;\n+    int nMaxInbound = nMaxConnections - MAX_OUTBOUND_CONNECTIONS;\n+\n+    if (hSocket != INVALID_SOCKET)\n+        if (!addr.SetSockAddr((const struct sockaddr*)&sockaddr))\n+            LogPrintf(\"Warning: Unknown socket family\\n\");\n+\n+    bool whitelisted = hListenSocket.whitelisted || CNode::IsWhitelistedRange(addr);\n+    {\n+        LOCK(cs_vNodes);\n+        BOOST_FOREACH(CNode* pnode, vNodes)\n+            if (pnode->fInbound)\n+                nInbound++;\n+    }\n+\n+    if (hSocket == INVALID_SOCKET)\n+    {\n+        int nErr = WSAGetLastError();\n+        if (nErr != WSAEWOULDBLOCK)\n+            LogPrintf(\"socket error accept failed: %s\\n\", NetworkErrorString(nErr));\n+        return;\n+    }\n+\n+    if (!IsSelectableSocket(hSocket))\n+    {\n+        LogPrintf(\"connection from %s dropped: non-selectable socket\\n\", addr.ToString());\n+        CloseSocket(hSocket);\n+        return;\n+    }\n+\n+    if (CNode::IsBanned(addr) && !whitelisted)\n+    {\n+        LogPrintf(\"connection from %s dropped (banned)\\n\", addr.ToString());\n+        CloseSocket(hSocket);\n+        return;\n+    }\n+\n+    if (nInbound >= nMaxInbound)\n+    {\n+        if (!AttemptToEvictConnection(whitelisted)) {\n+            // No connection to evict, disconnect the new connection\n+            LogPrint(\"net\", \"failed to find an eviction candidate - connection dropped (full)\\n\");\n+            CloseSocket(hSocket);\n+            return;\n+        }\n+    }\n+\n+    CNode* pnode = new CNode(hSocket, addr, \"\", true);\n+    pnode->AddRef();\n+    pnode->fWhitelisted = whitelisted;\n+\n+    LogPrint(\"net\", \"connection from %s accepted\\n\", addr.ToString());\n+\n+    {\n+        LOCK(cs_vNodes);\n+        vNodes.push_back(pnode);\n+    }\n+}\n+\n void ThreadSocketHandler()\n {\n     unsigned int nPrevNodeCount = 0;\n@@ -933,64 +1148,7 @@ void ThreadSocketHandler()\n         {\n             if (hListenSocket.socket != INVALID_SOCKET && FD_ISSET(hListenSocket.socket, &fdsetRecv))\n             {\n-                struct sockaddr_storage sockaddr;\n-                socklen_t len = sizeof(sockaddr);\n-                SOCKET hSocket = accept(hListenSocket.socket, (struct sockaddr*)&sockaddr, &len);\n-                CAddress addr;\n-                int nInbound = 0;\n-                int nMaxInbound = nMaxConnections - MAX_OUTBOUND_CONNECTIONS;\n-\n-                if (hSocket != INVALID_SOCKET)\n-                    if (!addr.SetSockAddr((const struct sockaddr*)&sockaddr))\n-                        LogPrintf(\"Warning: Unknown socket family\\n\");\n-\n-                bool whitelisted = hListenSocket.whitelisted || CNode::IsWhitelistedRange(addr);\n-                {\n-                    LOCK(cs_vNodes);\n-                    BOOST_FOREACH(CNode* pnode, vNodes)\n-                        if (pnode->fInbound)\n-                            nInbound++;\n-                }\n-\n-                if (hSocket == INVALID_SOCKET)\n-                {\n-                    int nErr = WSAGetLastError();\n-                    if (nErr != WSAEWOULDBLOCK)\n-                        LogPrintf(\"socket error accept failed: %s\\n\", NetworkErrorString(nErr));\n-                }\n-                else if (!IsSelectableSocket(hSocket))\n-                {\n-                    LogPrintf(\"connection from %s dropped: non-selectable socket\\n\", addr.ToString());\n-                    CloseSocket(hSocket);\n-                }\n-                else if (nInbound >= nMaxInbound)\n-                {\n-                    LogPrint(\"net\", \"connection from %s dropped (full)\\n\", addr.ToString());\n-                    CloseSocket(hSocket);\n-                }\n-                else if (!whitelisted && (nInbound >= (nMaxInbound - nWhiteConnections)))\n-                {\n-                    LogPrint(\"net\", \"connection from %s dropped (non-whitelisted)\\n\", addr.ToString());\n-                    CloseSocket(hSocket);\n-                }\n-                else if (CNode::IsBanned(addr) && !whitelisted)\n-                {\n-                    LogPrintf(\"connection from %s dropped (banned)\\n\", addr.ToString());\n-                    CloseSocket(hSocket);\n-                }\n-                else\n-                {\n-                    CNode* pnode = new CNode(hSocket, addr, \"\", true);\n-                    pnode->AddRef();\n-                    pnode->fWhitelisted = whitelisted;\n-\n-                    LogPrint(\"net\", \"connection from %s accepted\\n\", addr.ToString());\n-\n-                    {\n-                        LOCK(cs_vNodes);\n-                        vNodes.push_back(pnode);\n-                    }\n-                }\n+                AcceptConnection(hListenSocket);\n             }\n         }\n "
      },
      {
        "sha": "f370bf1ff4a00c0c7c074d0f9d034ca3b7f0f165",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 11,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69dc5b51a023a23ae66017f05fa43a0203f3c627/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69dc5b51a023a23ae66017f05fa43a0203f3c627/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=69dc5b51a023a23ae66017f05fa43a0203f3c627",
        "patch": "@@ -143,19 +143,8 @@ extern uint64_t nLocalServices;\n extern uint64_t nLocalHostNonce;\n extern CAddrMan addrman;\n \n-// The allocation of connections against the maximum allowed (nMaxConnections)\n-// is prioritized as follows:\n-// 1st: Outbound connections (MAX_OUTBOUND_CONNECTIONS)\n-// 2nd: Inbound connections from whitelisted peers (nWhiteConnections)\n-// 3rd: Inbound connections from non-whitelisted peers\n-// Thus, the number of connection slots for the general public to use is:\n-// nMaxConnections - (MAX_OUTBOUND_CONNECTIONS + nWhiteConnections)\n-// Any additional inbound connections beyond limits will be immediately closed\n-\n /** Maximum number of connections to simultaneously allow (aka connection slots) */\n extern int nMaxConnections;\n-/** Number of connection slots to reserve for inbound from whitelisted peers */\n-extern int nWhiteConnections;\n \n extern std::vector<CNode*> vNodes;\n extern CCriticalSection cs_vNodes;\n@@ -395,6 +384,8 @@ class CNode\n     int64_t nPingUsecStart;\n     // Last measured round-trip time.\n     int64_t nPingUsecTime;\n+    // Best measured round-trip time.\n+    int64_t nMinPingUsecTime;\n     // Whether a ping is requested.\n     bool fPingQueued;\n "
      }
    ]
  },
  {
    "sha": "e83df075f9dbae83a55cc01128a9c97c278426fd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplODNkZjA3NWY5ZGJhZTgzYTU1Y2MwMTEyOGE5Yzk3YzI3ODQyNmZk",
    "commit": {
      "author": {
        "name": "Ian T",
        "email": "hello@chainquery.com",
        "date": "2015-09-03T17:29:10Z"
      },
      "committer": {
        "name": "Ian T",
        "email": "hello@chainquery.com",
        "date": "2015-09-03T17:29:10Z"
      },
      "message": "Update RPC generate help for numblocks to include required\n\nThe `generate` RPC has no default `numblocks` and a numeric value is required.",
      "tree": {
        "sha": "bf6d33c4a7cb6864dd252043ca79feab395005ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bf6d33c4a7cb6864dd252043ca79feab395005ec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e83df075f9dbae83a55cc01128a9c97c278426fd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e83df075f9dbae83a55cc01128a9c97c278426fd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e83df075f9dbae83a55cc01128a9c97c278426fd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e83df075f9dbae83a55cc01128a9c97c278426fd/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "69dc5b51a023a23ae66017f05fa43a0203f3c627",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69dc5b51a023a23ae66017f05fa43a0203f3c627",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/69dc5b51a023a23ae66017f05fa43a0203f3c627"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "91de37fdccffc908b01b70c7e469821653e3fd96",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e83df075f9dbae83a55cc01128a9c97c278426fd/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e83df075f9dbae83a55cc01128a9c97c278426fd/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=e83df075f9dbae83a55cc01128a9c97c278426fd",
        "patch": "@@ -119,7 +119,7 @@ UniValue generate(const UniValue& params, bool fHelp)\n             \"generate numblocks\\n\"\n             \"\\nMine blocks immediately (before the RPC call returns)\\n\"\n             \"\\nNote: this function can only be used on the regtest network\\n\"\n-            \"1. numblocks    (numeric) How many blocks are generated immediately.\\n\"\n+            \"1. numblocks    (numeric, required) How many blocks are generated immediately.\\n\"\n             \"\\nResult\\n\"\n             \"[ blockhashes ]     (array) hashes of blocks generated\\n\"\n             \"\\nExamples:\\n\""
      }
    ]
  },
  {
    "sha": "86270c816411680c33a60adfa768c7a647fce08f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NjI3MGM4MTY0MTE2ODBjMzNhNjBhZGZhNzY4YzdhNjQ3ZmNlMDhm",
    "commit": {
      "author": {
        "name": "Casey Rodarmor",
        "email": "casey@rodarmor.com",
        "date": "2015-09-03T16:53:00Z"
      },
      "committer": {
        "name": "Casey Rodarmor",
        "email": "casey@rodarmor.com",
        "date": "2015-09-03T19:13:40Z"
      },
      "message": "Replace boost::reverse_lock with our own.",
      "tree": {
        "sha": "8e8e3f427d23ec88dab51cb99ab5314590997f75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8e8e3f427d23ec88dab51cb99ab5314590997f75"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/86270c816411680c33a60adfa768c7a647fce08f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86270c816411680c33a60adfa768c7a647fce08f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/86270c816411680c33a60adfa768c7a647fce08f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86270c816411680c33a60adfa768c7a647fce08f/comments",
    "author": {
      "login": "casey",
      "id": 1945,
      "node_id": "MDQ6VXNlcjE5NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/casey",
      "html_url": "https://github.com/casey",
      "followers_url": "https://api.github.com/users/casey/followers",
      "following_url": "https://api.github.com/users/casey/following{/other_user}",
      "gists_url": "https://api.github.com/users/casey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/casey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/casey/subscriptions",
      "organizations_url": "https://api.github.com/users/casey/orgs",
      "repos_url": "https://api.github.com/users/casey/repos",
      "events_url": "https://api.github.com/users/casey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/casey/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "casey",
      "id": 1945,
      "node_id": "MDQ6VXNlcjE5NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/casey",
      "html_url": "https://github.com/casey",
      "followers_url": "https://api.github.com/users/casey/followers",
      "following_url": "https://api.github.com/users/casey/following{/other_user}",
      "gists_url": "https://api.github.com/users/casey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/casey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/casey/subscriptions",
      "organizations_url": "https://api.github.com/users/casey/orgs",
      "repos_url": "https://api.github.com/users/casey/repos",
      "events_url": "https://api.github.com/users/casey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/casey/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "da9beb288d2ee35b9c70513dd18f220b2dc32f16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da9beb288d2ee35b9c70513dd18f220b2dc32f16",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/da9beb288d2ee35b9c70513dd18f220b2dc32f16"
      }
    ],
    "stats": {
      "total": 102,
      "additions": 100,
      "deletions": 2
    },
    "files": [
      {
        "sha": "456dfc32ce1e8971b62a13233acc77a6f247d852",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86270c816411680c33a60adfa768c7a647fce08f/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86270c816411680c33a60adfa768c7a647fce08f/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=86270c816411680c33a60adfa768c7a647fce08f",
        "patch": "@@ -119,6 +119,7 @@ BITCOIN_CORE_H = \\\n   protocol.h \\\n   pubkey.h \\\n   random.h \\\n+  reverselock.h \\\n   rpcclient.h \\\n   rpcprotocol.h \\\n   rpcserver.h \\"
      },
      {
        "sha": "cc60cd92bbc0a8466e6a9fbe637772938a01a5de",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86270c816411680c33a60adfa768c7a647fce08f/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86270c816411680c33a60adfa768c7a647fce08f/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=86270c816411680c33a60adfa768c7a647fce08f",
        "patch": "@@ -62,6 +62,7 @@ BITCOIN_TESTS =\\\n   test/pmt_tests.cpp \\\n   test/policyestimator_tests.cpp \\\n   test/pow_tests.cpp \\\n+  test/reverselock_tests.cpp \\\n   test/rpc_tests.cpp \\\n   test/sanity_tests.cpp \\\n   test/scheduler_tests.cpp \\"
      },
      {
        "sha": "567636e16afa78748be337c382ef2154f06f4607",
        "filename": "src/reverselock.h",
        "status": "added",
        "additions": 31,
        "deletions": 0,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86270c816411680c33a60adfa768c7a647fce08f/src/reverselock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86270c816411680c33a60adfa768c7a647fce08f/src/reverselock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/reverselock.h?ref=86270c816411680c33a60adfa768c7a647fce08f",
        "patch": "@@ -0,0 +1,31 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_REVERSELOCK_H\n+#define BITCOIN_REVERSELOCK_H\n+\n+/**\n+ * An RAII-style reverse lock. Unlocks on construction and locks on destruction.\n+ */\n+template<typename Lock>\n+class reverse_lock\n+{\n+public:\n+\n+    explicit reverse_lock(Lock& lock) : lock(lock) {\n+        lock.unlock();\n+    }\n+\n+    ~reverse_lock() {\n+        lock.lock();\n+    }\n+\n+private:\n+    reverse_lock(reverse_lock const&);\n+    reverse_lock& operator=(reverse_lock const&);\n+\n+    Lock& lock;\n+};\n+\n+#endif // BITCOIN_REVERSELOCK_H"
      },
      {
        "sha": "184ddc28abbff5f704f8af812451080051543e8a",
        "filename": "src/scheduler.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86270c816411680c33a60adfa768c7a647fce08f/src/scheduler.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86270c816411680c33a60adfa768c7a647fce08f/src/scheduler.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.cpp?ref=86270c816411680c33a60adfa768c7a647fce08f",
        "patch": "@@ -4,9 +4,10 @@\n \n #include \"scheduler.h\"\n \n+#include \"reverselock.h\"\n+\n #include <assert.h>\n #include <boost/bind.hpp>\n-#include <boost/thread/reverse_lock.hpp>\n #include <utility>\n \n CScheduler::CScheduler() : nThreadsServicingQueue(0), stopRequested(false), stopWhenEmpty(false)\n@@ -69,7 +70,7 @@ void CScheduler::serviceQueue()\n             {\n                 // Unlock before calling f, so it can reschedule itself or another task\n                 // without deadlocking:\n-                boost::reverse_lock<boost::unique_lock<boost::mutex> > rlock(lock);\n+                reverse_lock<boost::unique_lock<boost::mutex> > rlock(lock);\n                 f();\n             }\n         } catch (...) {"
      },
      {
        "sha": "e7e627ae0f24eb072e1461891ef281006bf0146c",
        "filename": "src/test/reverselock_tests.cpp",
        "status": "added",
        "additions": 64,
        "deletions": 0,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86270c816411680c33a60adfa768c7a647fce08f/src/test/reverselock_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86270c816411680c33a60adfa768c7a647fce08f/src/test/reverselock_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/reverselock_tests.cpp?ref=86270c816411680c33a60adfa768c7a647fce08f",
        "patch": "@@ -0,0 +1,64 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"reverselock.h\"\n+#include \"test/test_bitcoin.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(reverselock_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(reverselock_basics)\n+{\n+    boost::mutex mutex;\n+    boost::unique_lock<boost::mutex> lock(mutex);\n+\n+    BOOST_CHECK(lock.owns_lock());\n+    {\n+        reverse_lock<boost::unique_lock<boost::mutex> > rlock(lock);\n+        BOOST_CHECK(!lock.owns_lock());\n+    }\n+    BOOST_CHECK(lock.owns_lock());\n+}\n+\n+BOOST_AUTO_TEST_CASE(reverselock_errors)\n+{\n+    boost::mutex mutex;\n+    boost::unique_lock<boost::mutex> lock(mutex);\n+\n+    // Make sure trying to reverse lock an unlocked lock fails\n+    lock.unlock();\n+\n+    BOOST_CHECK(!lock.owns_lock());\n+\n+    bool failed = false;\n+    try {\n+        reverse_lock<boost::unique_lock<boost::mutex> > rlock(lock);\n+    } catch(...) {\n+        failed = true;\n+    }\n+\n+    BOOST_CHECK(failed);\n+    BOOST_CHECK(!lock.owns_lock());\n+\n+    // Make sure trying to lock a lock after it has been reverse locked fails\n+    failed = false;\n+    bool locked = false;\n+\n+    lock.lock();\n+    BOOST_CHECK(lock.owns_lock());\n+\n+    try {\n+        reverse_lock<boost::unique_lock<boost::mutex> > rlock(lock);\n+        lock.lock();\n+        locked = true;\n+    } catch(...) {\n+        failed = true;\n+    }\n+\n+    BOOST_CHECK(locked && failed);\n+    BOOST_CHECK(lock.owns_lock());\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "195942d58e664684be0b7bd7687106e53d6be879",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOTU5NDJkNThlNjY0Njg0YmUwYjdiZDc2ODcxMDZlNTNkNmJlODc5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-03T19:43:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-03T19:46:08Z"
      },
      "message": "Merge pull request #6630\n\n86270c8 Replace boost::reverse_lock with our own. (Casey Rodarmor)",
      "tree": {
        "sha": "4ca1ddb5cb93dbddd93e040d313a7e5e11fe5af8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4ca1ddb5cb93dbddd93e040d313a7e5e11fe5af8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/195942d58e664684be0b7bd7687106e53d6be879",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJV6KOAAAoJEHSBCwEjRsmm4HAH/2TDJ1ozbgkSuolpn5/qgCTR\n+yjVerPfx9AkB5ZSlV3v3UYS66GH3gr37VQJ+lkdX5IQ2fTIIwo9SGMKHWIiY+hB\nRHIc/THiHQo01ht44i6pV3zeWJ/zT29bv08fB8l//3+D2VZjxfsbDEsteYUDK0ED\nU1uN/VL1QAma2IPQRov03aldklhTQFbKbHqVlrxM4F+SE7+K7CHaxyNCgVm0JW/5\nS+9L7T8pS/mc9jlWX453k65gjswAKGe3OZfgqyS5dhH7VWFoHDZ/wDLV7pfkKk2p\n0bXmbeH0iq1p77st9692Xaaxx6N2GsnrOPWGGNzzCSpJYP4iA88sjfaFZbuo0bI=\n=JgFN\n-----END PGP SIGNATURE-----",
        "payload": "tree 4ca1ddb5cb93dbddd93e040d313a7e5e11fe5af8\nparent 69dc5b51a023a23ae66017f05fa43a0203f3c627\nparent 86270c816411680c33a60adfa768c7a647fce08f\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1441309392 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1441309568 +0200\n\nMerge pull request #6630\n\n86270c8 Replace boost::reverse_lock with our own. (Casey Rodarmor)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/195942d58e664684be0b7bd7687106e53d6be879",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/195942d58e664684be0b7bd7687106e53d6be879",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/195942d58e664684be0b7bd7687106e53d6be879/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "69dc5b51a023a23ae66017f05fa43a0203f3c627",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69dc5b51a023a23ae66017f05fa43a0203f3c627",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/69dc5b51a023a23ae66017f05fa43a0203f3c627"
      },
      {
        "sha": "86270c816411680c33a60adfa768c7a647fce08f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86270c816411680c33a60adfa768c7a647fce08f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/86270c816411680c33a60adfa768c7a647fce08f"
      }
    ],
    "stats": {
      "total": 102,
      "additions": 100,
      "deletions": 2
    },
    "files": [
      {
        "sha": "456dfc32ce1e8971b62a13233acc77a6f247d852",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/195942d58e664684be0b7bd7687106e53d6be879/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/195942d58e664684be0b7bd7687106e53d6be879/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=195942d58e664684be0b7bd7687106e53d6be879",
        "patch": "@@ -119,6 +119,7 @@ BITCOIN_CORE_H = \\\n   protocol.h \\\n   pubkey.h \\\n   random.h \\\n+  reverselock.h \\\n   rpcclient.h \\\n   rpcprotocol.h \\\n   rpcserver.h \\"
      },
      {
        "sha": "cc60cd92bbc0a8466e6a9fbe637772938a01a5de",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/195942d58e664684be0b7bd7687106e53d6be879/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/195942d58e664684be0b7bd7687106e53d6be879/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=195942d58e664684be0b7bd7687106e53d6be879",
        "patch": "@@ -62,6 +62,7 @@ BITCOIN_TESTS =\\\n   test/pmt_tests.cpp \\\n   test/policyestimator_tests.cpp \\\n   test/pow_tests.cpp \\\n+  test/reverselock_tests.cpp \\\n   test/rpc_tests.cpp \\\n   test/sanity_tests.cpp \\\n   test/scheduler_tests.cpp \\"
      },
      {
        "sha": "567636e16afa78748be337c382ef2154f06f4607",
        "filename": "src/reverselock.h",
        "status": "added",
        "additions": 31,
        "deletions": 0,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/195942d58e664684be0b7bd7687106e53d6be879/src/reverselock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/195942d58e664684be0b7bd7687106e53d6be879/src/reverselock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/reverselock.h?ref=195942d58e664684be0b7bd7687106e53d6be879",
        "patch": "@@ -0,0 +1,31 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_REVERSELOCK_H\n+#define BITCOIN_REVERSELOCK_H\n+\n+/**\n+ * An RAII-style reverse lock. Unlocks on construction and locks on destruction.\n+ */\n+template<typename Lock>\n+class reverse_lock\n+{\n+public:\n+\n+    explicit reverse_lock(Lock& lock) : lock(lock) {\n+        lock.unlock();\n+    }\n+\n+    ~reverse_lock() {\n+        lock.lock();\n+    }\n+\n+private:\n+    reverse_lock(reverse_lock const&);\n+    reverse_lock& operator=(reverse_lock const&);\n+\n+    Lock& lock;\n+};\n+\n+#endif // BITCOIN_REVERSELOCK_H"
      },
      {
        "sha": "184ddc28abbff5f704f8af812451080051543e8a",
        "filename": "src/scheduler.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/195942d58e664684be0b7bd7687106e53d6be879/src/scheduler.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/195942d58e664684be0b7bd7687106e53d6be879/src/scheduler.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.cpp?ref=195942d58e664684be0b7bd7687106e53d6be879",
        "patch": "@@ -4,9 +4,10 @@\n \n #include \"scheduler.h\"\n \n+#include \"reverselock.h\"\n+\n #include <assert.h>\n #include <boost/bind.hpp>\n-#include <boost/thread/reverse_lock.hpp>\n #include <utility>\n \n CScheduler::CScheduler() : nThreadsServicingQueue(0), stopRequested(false), stopWhenEmpty(false)\n@@ -69,7 +70,7 @@ void CScheduler::serviceQueue()\n             {\n                 // Unlock before calling f, so it can reschedule itself or another task\n                 // without deadlocking:\n-                boost::reverse_lock<boost::unique_lock<boost::mutex> > rlock(lock);\n+                reverse_lock<boost::unique_lock<boost::mutex> > rlock(lock);\n                 f();\n             }\n         } catch (...) {"
      },
      {
        "sha": "e7e627ae0f24eb072e1461891ef281006bf0146c",
        "filename": "src/test/reverselock_tests.cpp",
        "status": "added",
        "additions": 64,
        "deletions": 0,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/195942d58e664684be0b7bd7687106e53d6be879/src/test/reverselock_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/195942d58e664684be0b7bd7687106e53d6be879/src/test/reverselock_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/reverselock_tests.cpp?ref=195942d58e664684be0b7bd7687106e53d6be879",
        "patch": "@@ -0,0 +1,64 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"reverselock.h\"\n+#include \"test/test_bitcoin.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(reverselock_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(reverselock_basics)\n+{\n+    boost::mutex mutex;\n+    boost::unique_lock<boost::mutex> lock(mutex);\n+\n+    BOOST_CHECK(lock.owns_lock());\n+    {\n+        reverse_lock<boost::unique_lock<boost::mutex> > rlock(lock);\n+        BOOST_CHECK(!lock.owns_lock());\n+    }\n+    BOOST_CHECK(lock.owns_lock());\n+}\n+\n+BOOST_AUTO_TEST_CASE(reverselock_errors)\n+{\n+    boost::mutex mutex;\n+    boost::unique_lock<boost::mutex> lock(mutex);\n+\n+    // Make sure trying to reverse lock an unlocked lock fails\n+    lock.unlock();\n+\n+    BOOST_CHECK(!lock.owns_lock());\n+\n+    bool failed = false;\n+    try {\n+        reverse_lock<boost::unique_lock<boost::mutex> > rlock(lock);\n+    } catch(...) {\n+        failed = true;\n+    }\n+\n+    BOOST_CHECK(failed);\n+    BOOST_CHECK(!lock.owns_lock());\n+\n+    // Make sure trying to lock a lock after it has been reverse locked fails\n+    failed = false;\n+    bool locked = false;\n+\n+    lock.lock();\n+    BOOST_CHECK(lock.owns_lock());\n+\n+    try {\n+        reverse_lock<boost::unique_lock<boost::mutex> > rlock(lock);\n+        lock.lock();\n+        locked = true;\n+    } catch(...) {\n+        failed = true;\n+    }\n+\n+    BOOST_CHECK(locked && failed);\n+    BOOST_CHECK(lock.owns_lock());\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "a6eb4ba38bdb2f12089faf7469b54ea2a5146516",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNmViNGJhMzhiZGIyZjEyMDg5ZmFmNzQ2OWI1NGVhMmE1MTQ2NTE2",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-09-03T20:06:13Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-09-03T20:06:13Z"
      },
      "message": "Report minimum ping time in getpeerinfo",
      "tree": {
        "sha": "15ad0c16027372569bb4640aa3c4ddf477ab6d59",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/15ad0c16027372569bb4640aa3c4ddf477ab6d59"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a6eb4ba38bdb2f12089faf7469b54ea2a5146516",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6eb4ba38bdb2f12089faf7469b54ea2a5146516",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a6eb4ba38bdb2f12089faf7469b54ea2a5146516",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6eb4ba38bdb2f12089faf7469b54ea2a5146516/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "69dc5b51a023a23ae66017f05fa43a0203f3c627",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69dc5b51a023a23ae66017f05fa43a0203f3c627",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/69dc5b51a023a23ae66017f05fa43a0203f3c627"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "526e2049a8de3e3403a59e86dec832e81689b27b",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6eb4ba38bdb2f12089faf7469b54ea2a5146516/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6eb4ba38bdb2f12089faf7469b54ea2a5146516/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=a6eb4ba38bdb2f12089faf7469b54ea2a5146516",
        "patch": "@@ -628,6 +628,7 @@ void CNode::copyStats(CNodeStats &stats)\n \n     // Raw ping time is in microseconds, but show it to user as whole seconds (Bitcoin users should be well used to small numbers with many decimal places by now :)\n     stats.dPingTime = (((double)nPingUsecTime) / 1e6);\n+    stats.dPingMin  = (((double)nMinPingUsecTime) / 1e6);\n     stats.dPingWait = (((double)nPingUsecWait) / 1e6);\n \n     // Leave string empty if addrLocal invalid (not filled in yet)"
      },
      {
        "sha": "6842ee5edc6e224b68e1634ed18c6370b29b5b96",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6eb4ba38bdb2f12089faf7469b54ea2a5146516/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6eb4ba38bdb2f12089faf7469b54ea2a5146516/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=a6eb4ba38bdb2f12089faf7469b54ea2a5146516",
        "patch": "@@ -189,6 +189,7 @@ class CNodeStats\n     bool fWhitelisted;\n     double dPingTime;\n     double dPingWait;\n+    double dPingMin;\n     std::string addrLocal;\n };\n "
      },
      {
        "sha": "30d0ed6270fdb8ae49c05440f09d466b61404efe",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6eb4ba38bdb2f12089faf7469b54ea2a5146516/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6eb4ba38bdb2f12089faf7469b54ea2a5146516/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=a6eb4ba38bdb2f12089faf7469b54ea2a5146516",
        "patch": "@@ -96,6 +96,7 @@ UniValue getpeerinfo(const UniValue& params, bool fHelp)\n             \"    \\\"conntime\\\": ttt,           (numeric) The connection time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n             \"    \\\"timeoffset\\\": ttt,         (numeric) The time offset in seconds\\n\"\n             \"    \\\"pingtime\\\": n,             (numeric) ping time\\n\"\n+            \"    \\\"minping\\\": n,              (numeric) minimum observed ping time\\n\"\n             \"    \\\"pingwait\\\": n,             (numeric) ping wait\\n\"\n             \"    \\\"version\\\": v,              (numeric) The peer version, such as 7001\\n\"\n             \"    \\\"subver\\\": \\\"/Satoshi:0.8.5/\\\",  (string) The string version\\n\"\n@@ -139,6 +140,7 @@ UniValue getpeerinfo(const UniValue& params, bool fHelp)\n         obj.push_back(Pair(\"conntime\", stats.nTimeConnected));\n         obj.push_back(Pair(\"timeoffset\", stats.nTimeOffset));\n         obj.push_back(Pair(\"pingtime\", stats.dPingTime));\n+        obj.push_back(Pair(\"minping\", stats.dPingMin));\n         if (stats.dPingWait > 0.0)\n             obj.push_back(Pair(\"pingwait\", stats.dPingWait));\n         obj.push_back(Pair(\"version\", stats.nVersion));"
      }
    ]
  },
  {
    "sha": "4b437b227c596f23ab8983559552b8c4910d2b17",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YjQzN2IyMjdjNTk2ZjIzYWI4OTgzNTU5NTUyYjhjNDkxMGQyYjE3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-04T08:45:09Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-04T08:45:27Z"
      },
      "message": "Merge pull request #6631\n\ne83df07 Update RPC generate help for numblocks to include required (Ian T)",
      "tree": {
        "sha": "f13c8245fcbdb38bc9883c5c41ff34eab286e529",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f13c8245fcbdb38bc9883c5c41ff34eab286e529"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4b437b227c596f23ab8983559552b8c4910d2b17",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJV6VonAAoJEHSBCwEjRsmmaUEIAJIfX/t5Z09MmEUPNhXQbTix\nZ5dHpFWfbAxMsqVvEEN3wadc85QES4qR8Xvn70DDqRBbhJsLzU0Ss53GthqfOwSE\nNS7IVgpY7oR3hRbFCyCIu23EvMveTgp1LNPL5S/IUFBzl2ptqtIrFtMhyi0E0zMT\nul2W7yezZzq6u9aXUcDSj/5a11TVmpF8yhLVZEiHx9C+UOY2WR/A5nfkQfMwmzn4\nzFjB1FZOv3mXZGHBgO/0fKIO79Mo34RpqQQfi6jTxSW6GeJ4D+vFR8AXnnIJXfHI\nOOllVqkQAsGvwHXS8Ru6Isy9BlT8QJ6u67Fey0BeYxuxOgfZFdKuoOzALjn00Dc=\n=iKjS\n-----END PGP SIGNATURE-----",
        "payload": "tree f13c8245fcbdb38bc9883c5c41ff34eab286e529\nparent 195942d58e664684be0b7bd7687106e53d6be879\nparent e83df075f9dbae83a55cc01128a9c97c278426fd\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1441356309 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1441356327 +0200\n\nMerge pull request #6631\n\ne83df07 Update RPC generate help for numblocks to include required (Ian T)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b437b227c596f23ab8983559552b8c4910d2b17",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4b437b227c596f23ab8983559552b8c4910d2b17",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b437b227c596f23ab8983559552b8c4910d2b17/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "195942d58e664684be0b7bd7687106e53d6be879",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/195942d58e664684be0b7bd7687106e53d6be879",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/195942d58e664684be0b7bd7687106e53d6be879"
      },
      {
        "sha": "e83df075f9dbae83a55cc01128a9c97c278426fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e83df075f9dbae83a55cc01128a9c97c278426fd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e83df075f9dbae83a55cc01128a9c97c278426fd"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "91de37fdccffc908b01b70c7e469821653e3fd96",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b437b227c596f23ab8983559552b8c4910d2b17/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b437b227c596f23ab8983559552b8c4910d2b17/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=4b437b227c596f23ab8983559552b8c4910d2b17",
        "patch": "@@ -119,7 +119,7 @@ UniValue generate(const UniValue& params, bool fHelp)\n             \"generate numblocks\\n\"\n             \"\\nMine blocks immediately (before the RPC call returns)\\n\"\n             \"\\nNote: this function can only be used on the regtest network\\n\"\n-            \"1. numblocks    (numeric) How many blocks are generated immediately.\\n\"\n+            \"1. numblocks    (numeric, required) How many blocks are generated immediately.\\n\"\n             \"\\nResult\\n\"\n             \"[ blockhashes ]     (array) hashes of blocks generated\\n\"\n             \"\\nExamples:\\n\""
      }
    ]
  },
  {
    "sha": "1e700c9b601552ea83567d32c9f1d6c07cd8bfcc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZTcwMGM5YjYwMTU1MmVhODM1NjdkMzJjOWYxZDZjMDdjZDhiZmNj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-04T08:59:34Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-04T08:59:34Z"
      },
      "message": "doc: update deps in build-unix.md after libevent\n\nAdd libevent, change usage of libssl from \"secure communication\" to\n\"crypto\" that's more accurate after RPC SSL support removed.",
      "tree": {
        "sha": "bf65a2be1a90322c1bfeb470107bf080a347d542",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bf65a2be1a90322c1bfeb470107bf080a347d542"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e700c9b601552ea83567d32c9f1d6c07cd8bfcc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e700c9b601552ea83567d32c9f1d6c07cd8bfcc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1e700c9b601552ea83567d32c9f1d6c07cd8bfcc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e700c9b601552ea83567d32c9f1d6c07cd8bfcc/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "26c9b836778cbaf9b9ccb9b92e841d7bd6ea2fdc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26c9b836778cbaf9b9ccb9b92e841d7bd6ea2fdc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/26c9b836778cbaf9b9ccb9b92e841d7bd6ea2fdc"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "5f674c8f8818c78a78860ed5a9e633b695008311",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e700c9b601552ea83567d32c9f1d6c07cd8bfcc/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e700c9b601552ea83567d32c9f1d6c07cd8bfcc/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=1e700c9b601552ea83567d32c9f1d6c07cd8bfcc",
        "patch": "@@ -31,8 +31,9 @@ These dependencies are required:\n \n  Library     | Purpose          | Description\n  ------------|------------------|----------------------\n- libssl      | SSL Support      | Secure communications\n- libboost    | Boost            | C++ Library\n+ libssl      | Crypto           | Random Number Generation, Elliptic Curve Cryptography\n+ libboost    | Utility          | Library for threading, data structures, etc\n+ libevent    | Networking       | OS independent asynchronous networking\n \n Optional dependencies:\n \n@@ -57,7 +58,7 @@ Dependency Build Instructions: Ubuntu & Debian\n ----------------------------------------------\n Build requirements:\n \n-\tsudo apt-get install build-essential libtool autotools-dev autoconf pkg-config libssl-dev\n+\tsudo apt-get install build-essential libtool autotools-dev autoconf pkg-config libssl-dev libevent-dev\n \t\n For Ubuntu 12.04 and later or Debian 7 and later libboost-all-dev has to be installed:\n "
      }
    ]
  },
  {
    "sha": "d52802551752140cf41f0d9a225a43e84404d3e9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNTI4MDI1NTE3NTIxNDBjZjQxZjBkOWEyMjVhNDNlODQ0MDRkM2U5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-04T09:01:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-04T09:01:44Z"
      },
      "message": "Revert \"rpc-tests: re-enable rpc-tests for Windows\"\n\nThis reverts commit bd30c3dced21fca869a14c75081f15195762afe1.\n\nDisable windows RPC tests for now. These should be re-enabled once a\nsuitable Wine version is used on Travis.",
      "tree": {
        "sha": "fdcc38f5814b018be3b7f6a64e92e92bb73a6c5c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fdcc38f5814b018be3b7f6a64e92e92bb73a6c5c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d52802551752140cf41f0d9a225a43e84404d3e9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d52802551752140cf41f0d9a225a43e84404d3e9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d52802551752140cf41f0d9a225a43e84404d3e9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d52802551752140cf41f0d9a225a43e84404d3e9/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1e700c9b601552ea83567d32c9f1d6c07cd8bfcc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e700c9b601552ea83567d32c9f1d6c07cd8bfcc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1e700c9b601552ea83567d32c9f1d6c07cd8bfcc"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "514bdf5640b121de18ea33fcddd328170e22c944",
        "filename": "qa/pull-tester/rpc-tests.sh",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d52802551752140cf41f0d9a225a43e84404d3e9/qa/pull-tester/rpc-tests.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d52802551752140cf41f0d9a225a43e84404d3e9/qa/pull-tester/rpc-tests.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.sh?ref=d52802551752140cf41f0d9a225a43e84404d3e9",
        "patch": "@@ -8,6 +8,11 @@ CURDIR=$(cd $(dirname \"$0\"); pwd)\n export BITCOIND=${REAL_BITCOIND}\n export BITCOINCLI=${REAL_BITCOINCLI}\n \n+if [ \"x${EXEEXT}\" = \"x.exe\" ]; then\n+  echo \"Win tests currently disabled\"\n+  exit 0\n+fi\n+\n #Run the tests\n \n testScripts=("
      }
    ]
  },
  {
    "sha": "9aa90994ee85e549ddbe23a6f03e33d0edcd57b2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YWE5MDk5NGVlODVlNTQ5ZGRiZTIzYTZmMDNlMzNkMGVkY2Q1N2Iy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-04T09:48:54Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-04T11:06:32Z"
      },
      "message": "Merge pull request #5677\n\nd528025 Revert \"rpc-tests: re-enable rpc-tests for Windows\" (Wladimir J. van der Laan)\n1e700c9 doc: update deps in build-unix.md after libevent (Wladimir J. van der Laan)\n26c9b83 Move windows socket init to utility function (Wladimir J. van der Laan)\n4be0b08 libevent: Windows reuseaddr workaround in depends (Cory Fields)\n3a174cd Fix race condition between starting HTTP server thread and setting EventBase() (Wladimir J. van der Laan)\n6d2bc22 Document options for new HTTP/RPC server in --help (Wladimir J. van der Laan)\nbe33f3f Implement RPCTimerHandler for Qt RPC console (Wladimir J. van der Laan)\n57d85d9 doc: mention SSL support dropped for RPC in release notes (Wladimir J. van der Laan)\n40b556d evhttpd implementation (Wladimir J. van der Laan)\nee2a42b tests: GET requests cannot have request body, use POST in rest.py (Wladimir J. van der Laan)\n6e996d3 tests: fix qt payment test (Cory Fields)\n3140ef9 build: build-system changes for libevent (Wladimir J. van der Laan)\na9af234 libevent: add depends (Cory Fields)\n6a21dd5 Remove rpc_boostasiotocnetaddr test (Wladimir J. van der Laan)\n8f9301c qa: Remove -rpckeepalive tests from httpbasics (Wladimir J. van der Laan)\n51fcfc0 doc: remove documentation for rpcssl (Wladimir J. van der Laan)",
      "tree": {
        "sha": "1f5eb525df417378a8677084a5a01731bca76960",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1f5eb525df417378a8677084a5a01731bca76960"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJV6Xs4AAoJEHSBCwEjRsmmS4oIALL1U8vPjXRBgAESBMAUKyxR\nV40O/Er5xRBXxOmTX6cF0Lvu0ZpqK5Vn/+8PeWMKxjToaTuOfeHDAZb7i7wnnJy5\nezLuyrAsBHkSRhzacZVjTJqBRT15j6IURpu4ZYRKACe/Od0eCX2TcILfUgUmqNfY\n3yHnm/MQ7LuSh1IBcsIpvES0UcjHkGwNdjTe131zQD2Ur2tUNTf1Wt2swB2NoPd2\nwgCrVo1m6g1uHdiV9niOcboLXZbp+t0rAjZ9CxyEV0Kok4qVSnXp4W3vPHBTbQwZ\nmcDIt8hCaQdAePH8cR02um35O/7BXgyXlxeOBig+lQ3O4B3W3stWk3zYz2LhBNE=\n=Pdd5\n-----END PGP SIGNATURE-----",
        "payload": "tree 1f5eb525df417378a8677084a5a01731bca76960\nparent 4b437b227c596f23ab8983559552b8c4910d2b17\nparent d52802551752140cf41f0d9a225a43e84404d3e9\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1441360134 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1441364792 +0200\n\nMerge pull request #5677\n\nd528025 Revert \"rpc-tests: re-enable rpc-tests for Windows\" (Wladimir J. van der Laan)\n1e700c9 doc: update deps in build-unix.md after libevent (Wladimir J. van der Laan)\n26c9b83 Move windows socket init to utility function (Wladimir J. van der Laan)\n4be0b08 libevent: Windows reuseaddr workaround in depends (Cory Fields)\n3a174cd Fix race condition between starting HTTP server thread and setting EventBase() (Wladimir J. van der Laan)\n6d2bc22 Document options for new HTTP/RPC server in --help (Wladimir J. van der Laan)\nbe33f3f Implement RPCTimerHandler for Qt RPC console (Wladimir J. van der Laan)\n57d85d9 doc: mention SSL support dropped for RPC in release notes (Wladimir J. van der Laan)\n40b556d evhttpd implementation (Wladimir J. van der Laan)\nee2a42b tests: GET requests cannot have request body, use POST in rest.py (Wladimir J. van der Laan)\n6e996d3 tests: fix qt payment test (Cory Fields)\n3140ef9 build: build-system changes for libevent (Wladimir J. van der Laan)\na9af234 libevent: add depends (Cory Fields)\n6a21dd5 Remove rpc_boostasiotocnetaddr test (Wladimir J. van der Laan)\n8f9301c qa: Remove -rpckeepalive tests from httpbasics (Wladimir J. van der Laan)\n51fcfc0 doc: remove documentation for rpcssl (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4b437b227c596f23ab8983559552b8c4910d2b17",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b437b227c596f23ab8983559552b8c4910d2b17",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4b437b227c596f23ab8983559552b8c4910d2b17"
      },
      {
        "sha": "d52802551752140cf41f0d9a225a43e84404d3e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d52802551752140cf41f0d9a225a43e84404d3e9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d52802551752140cf41f0d9a225a43e84404d3e9"
      }
    ],
    "stats": {
      "total": 2655,
      "additions": 1502,
      "deletions": 1153
    },
    "files": [
      {
        "sha": "07ee28f84e69ccd5cc41afc9aaeb7360dbb81bb8",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=9aa90994ee85e549ddbe23a6f03e33d0edcd57b2",
        "patch": "@@ -664,6 +664,12 @@ if test x$use_pkgconfig = xyes; then\n       if test x$use_qr != xno; then\n         BITCOIN_QT_CHECK([PKG_CHECK_MODULES([QR], [libqrencode], [have_qrencode=yes], [have_qrencode=no])])\n       fi\n+      if test x$build_bitcoin_utils$build_bitcoind$bitcoin_enable_qt$use_tests != xnononono; then\n+        PKG_CHECK_MODULES([EVENT], [libevent],, [AC_MSG_ERROR(libevent not found.)])\n+        if test x$TARGET_OS != xwindows; then\n+          PKG_CHECK_MODULES([EVENT_PTHREADS], [libevent_pthreads],, [AC_MSG_ERROR(libevent_pthreads not found.)])\n+        fi\n+      fi\n     ]\n   )\n else\n@@ -673,6 +679,14 @@ else\n   AC_CHECK_HEADER([openssl/ssl.h],, AC_MSG_ERROR(libssl headers missing),)\n   AC_CHECK_LIB([ssl],         [main],SSL_LIBS=-lssl, AC_MSG_ERROR(libssl missing))\n \n+  if test x$build_bitcoin_utils$build_bitcoind$bitcoin_enable_qt$use_tests != xnononono; then\n+    AC_CHECK_HEADER([event2/event.h],, AC_MSG_ERROR(libevent headers missing),)\n+    AC_CHECK_LIB([event],[main],EVENT_LIBS=-levent,AC_MSG_ERROR(libevent missing))\n+    if test x$TARGET_OS != xwindows; then\n+      AC_CHECK_LIB([event_pthreads],[main],EVENT_PTHREADS_LIBS=-levent_pthreads,AC_MSG_ERROR(libevent_pthreads missing))\n+    fi\n+  fi\n+\n   BITCOIN_QT_CHECK(AC_CHECK_LIB([protobuf] ,[main],[PROTOBUF_LIBS=-lprotobuf], BITCOIN_QT_FAIL(libprotobuf not found)))\n   if test x$use_qr != xno; then\n     BITCOIN_QT_CHECK([AC_CHECK_LIB([qrencode], [main],[QR_LIBS=-lqrencode], [have_qrencode=no])])"
      },
      {
        "sha": "1338d2f2b5c3b5dc48a36f93c5afbac330b9a065",
        "filename": "contrib/bitcoind.bash-completion",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/contrib/bitcoind.bash-completion",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/contrib/bitcoind.bash-completion",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/bitcoind.bash-completion?ref=9aa90994ee85e549ddbe23a6f03e33d0edcd57b2",
        "patch": "@@ -96,7 +96,7 @@ _bitcoind() {\n     esac\n \n     case \"$cur\" in\n-        -conf=*|-pid=*|-loadblock=*|-wallet=*|-rpcsslcertificatechainfile=*|-rpcsslprivatekeyfile=*)\n+        -conf=*|-pid=*|-loadblock=*|-wallet=*)\n             cur=\"${cur#*=}\"\n             _filedir\n             return 0"
      },
      {
        "sha": "62ffd7123a666eaeb140a1ec2846a0e6a3a91ad8",
        "filename": "contrib/debian/examples/bitcoin.conf",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/contrib/debian/examples/bitcoin.conf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/contrib/debian/examples/bitcoin.conf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/examples/bitcoin.conf?ref=9aa90994ee85e549ddbe23a6f03e33d0edcd57b2",
        "patch": "@@ -95,15 +95,6 @@\n # running on another host using this option:\n #rpcconnect=127.0.0.1\n \n-# Use Secure Sockets Layer (also known as TLS or HTTPS) to communicate\n-# with Bitcoin -server or bitcoind\n-#rpcssl=1\n-\n-# OpenSSL settings used when rpcssl=1\n-#rpcsslciphers=TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!AH:!3DES:@STRENGTH\n-#rpcsslcertificatechainfile=server.cert\n-#rpcsslprivatekeyfile=server.pem\n-\n # Transaction Fee Changes in 0.10.0\n \n # Send transactions as zero-fee transactions if possible (default: 0)"
      },
      {
        "sha": "154b45873940c9d23b8d1fe96d516ee7b5bdf7f0",
        "filename": "contrib/debian/manpages/bitcoin-cli.1",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/contrib/debian/manpages/bitcoin-cli.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/contrib/debian/manpages/bitcoin-cli.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/manpages/bitcoin-cli.1?ref=9aa90994ee85e549ddbe23a6f03e33d0edcd57b2",
        "patch": "@@ -36,9 +36,6 @@ Listen for JSON\\-RPC connections on <port> (default: 8332 or testnet: 18332).\n .TP\n \\fB\\-rpcconnect=\\fR<ip>\n Send commands to node running on <ip> (default: 127.0.0.1).\n-.TP\n-\\fB\\-rpcssl\\fR=\\fI1\\fR\n-Use OpenSSL (https) for JSON\\-RPC connections (see the Bitcoin Wiki for SSL setup instructions).\n \n .SH \"SEE ALSO\"\n \\fBbitcoind\\fP, \\fBbitcoin.conf\\fP"
      },
      {
        "sha": "05eadc94cdd441d5c3c6e32137884d43e506b4fb",
        "filename": "contrib/debian/manpages/bitcoin-qt.1",
        "status": "modified",
        "additions": 0,
        "deletions": 12,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/contrib/debian/manpages/bitcoin-qt.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/contrib/debian/manpages/bitcoin-qt.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/manpages/bitcoin-qt.1?ref=9aa90994ee85e549ddbe23a6f03e33d0edcd57b2",
        "patch": "@@ -178,18 +178,6 @@ Set maximum block size in bytes (default: 250000)\n .HP\n \\fB\\-blockprioritysize=\\fR<n> Set maximum size of high\\-priority/low\\-fee transactions in bytes (default: 27000)\n .PP\n-SSL options: (see the Bitcoin Wiki for SSL setup instructions)\n-.TP\n-\\fB\\-rpcssl\\fR\n-Use OpenSSL (https) for JSON\\-RPC connections\n-.TP\n-\\fB\\-rpcsslcertificatechainfile=\\fR<file.cert>\n-Server certificate file (default: server.cert)\n-.TP\n-\\fB\\-rpcsslprivatekeyfile=\\fR<file.pem>\n-Server private key (default: server.pem)\n-.TP\n-\\fB\\-rpcsslciphers=\\fR<ciphers>\n Acceptable ciphers (default: TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!AH:!3DES:@STRENGTH)\n .SS \"UI options:\"\n .TP"
      },
      {
        "sha": "0cf4d991e34c90bf2d38e3fcb982c89cfee6aed6",
        "filename": "contrib/debian/manpages/bitcoin.conf.5",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/contrib/debian/manpages/bitcoin.conf.5",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/contrib/debian/manpages/bitcoin.conf.5",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/manpages/bitcoin.conf.5?ref=9aa90994ee85e549ddbe23a6f03e33d0edcd57b2",
        "patch": "@@ -46,16 +46,6 @@ Listen for RPC connections on this TCP port.\n \\fBrpcconnect=\\fR\\fI'127.0.0.1'\\fR\n You can use *bitcoin* or *bitcoind(1)* to send commands to *bitcoin*/*bitcoind(1)* running on another host using this option.\n .TP\n-\\fBrpcssl=\\fR\\fI'1'\\fR\n-Use Secure Sockets Layer (also known as TLS or HTTPS) to communicate with *bitcoin* '\\-server' or *bitcoind(1)*. Example of OpenSSL settings used when *rpcssl*='1':\n-.TP\n-\\fB\\-rpcsslciphers=\\fR<ciphers>\n-Acceptable ciphers (default: TLSv1+HIGH:\\:!SSLv2:\\:!aNULL:\\:!eNULL:\\:!AH:\\:!3DES:\\:@STRENGTH)\n-.TP\n-\\fBrpcsslcertificatechainfile=\\fR\\fI'server.cert'\\fR\n-.TP\n-\\fBrpcsslprivatekeyfile=\\fR\\fI'server.pem'\\fR\n-.TP\n .SH MISCELLANEOUS OPTIONS\n .TP\n \\fBgen=\\fR[\\fI'0'\\fR|\\fI'1'\\fR]"
      },
      {
        "sha": "5b0f2921aa415b04663e472162bf95458d308e75",
        "filename": "contrib/debian/manpages/bitcoind.1",
        "status": "modified",
        "additions": 0,
        "deletions": 14,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/contrib/debian/manpages/bitcoind.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/contrib/debian/manpages/bitcoind.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/manpages/bitcoind.1?ref=9aa90994ee85e549ddbe23a6f03e33d0edcd57b2",
        "patch": "@@ -62,20 +62,6 @@ Allow JSON\\-RPC connections from specified IP address\n .TP\n \\fB\\-rpcconnect=\\fR<ip>\n Send commands to node running on <ip>\n-.PP\n-SSL options: (see the Bitcoin Wiki for SSL setup instructions)\n-.TP\n-\\fB\\-rpcssl\\fR=\\fI1\\fR\n-Use OpenSSL (https) for JSON\\-RPC connections\n-.TP\n-\\fB\\-rpcsslcertificatchainfile=\\fR<file.cert>\n-Server certificate file (default: server.cert)\n-.TP\n-\\fB\\-rpcsslprivatekeyfile=\\fR<file.pem>\n-Server private key (default: server.pem)\n-.TP\n-\\fB\\-rpcsslciphers=\\fR<ciphers>\n-Acceptable ciphers (default: TLSv1+HIGH:\\:!SSLv2:\\:!aNULL:\\:!eNULL:\\:!AH:\\:!3DES:\\:@STRENGTH)\n .TP\n \\-?\n This help message"
      },
      {
        "sha": "2e9be1e98ccedda520459b8d4deed2f686473746",
        "filename": "depends/packages/libevent.mk",
        "status": "added",
        "additions": 31,
        "deletions": 0,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/depends/packages/libevent.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/depends/packages/libevent.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/libevent.mk?ref=9aa90994ee85e549ddbe23a6f03e33d0edcd57b2",
        "patch": "@@ -0,0 +1,31 @@\n+package=libevent\n+$(package)_version=2.0.22\n+$(package)_download_path=https://github.com/libevent/libevent/releases/download/release-2.0.22-stable\n+$(package)_file_name=$(package)-$($(package)_version)-stable.tar.gz\n+$(package)_sha256_hash=71c2c49f0adadacfdbe6332a372c38cf9c8b7895bb73dabeaa53cdcc1d4e1fa3\n+$(package)_patches=reuseaddr.patch\n+\n+define $(package)_preprocess_cmds\n+  patch -p1 < $($(package)_patch_dir)/reuseaddr.patch\n+endef\n+\n+define $(package)_set_vars\n+  $(package)_config_opts=--disable-shared --disable-openssl --disable-libevent-regress\n+  $(package)_config_opts_release=--disable-debug-mode\n+  $(package)_config_opts_linux=--with-pic\n+endef\n+\n+define $(package)_config_cmds\n+  $($(package)_autoconf)\n+endef\n+\n+define $(package)_build_cmds\n+  $(MAKE)\n+endef\n+\n+define $(package)_stage_cmds\n+  $(MAKE) DESTDIR=$($(package)_staging_dir) install\n+endef\n+\n+define $(package)_postprocess_cmds\n+endef"
      },
      {
        "sha": "a0d377bb43658efc700b9ea2ecd19aa48b74beed",
        "filename": "depends/packages/packages.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/depends/packages/packages.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/depends/packages/packages.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/packages.mk?ref=9aa90994ee85e549ddbe23a6f03e33d0edcd57b2",
        "patch": "@@ -1,4 +1,4 @@\n-packages:=boost openssl\n+packages:=boost openssl libevent\n native_packages := native_ccache native_comparisontool\n \n qt_native_packages = native_protobuf"
      },
      {
        "sha": "58695c11f5d976bd163429884e02d9a7f6f4eb4d",
        "filename": "depends/patches/libevent/reuseaddr.patch",
        "status": "added",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/depends/patches/libevent/reuseaddr.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/depends/patches/libevent/reuseaddr.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/libevent/reuseaddr.patch?ref=9aa90994ee85e549ddbe23a6f03e33d0edcd57b2",
        "patch": "@@ -0,0 +1,21 @@\n+--- old/evutil.c   2015-08-28 19:26:23.488765923 -0400\n++++ new/evutil.c   2015-08-28 19:27:41.392767019 -0400\n+@@ -321,15 +321,16 @@\n+ int\n+ evutil_make_listen_socket_reuseable(evutil_socket_t sock)\n+ {\n+-#ifndef WIN32\n+ \tint one = 1;\n++#ifndef WIN32\n+ \t/* REUSEADDR on Unix means, \"don't hang on to this address after the\n+ \t * listener is closed.\"  On Windows, though, it means \"don't keep other\n+ \t * processes from binding to this address while we're using it. */\n+ \treturn setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, (void*) &one,\n+ \t    (ev_socklen_t)sizeof(one));\n+ #else\n+-\treturn 0;\n++\treturn setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, (const char*) &one,\n++\t\t(ev_socklen_t)sizeof(one));\n+ #endif\n+ }\n+ "
      },
      {
        "sha": "e02a5e42f75120b7b5fc06e424ca9a07143250fe",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=9aa90994ee85e549ddbe23a6f03e33d0edcd57b2",
        "patch": "@@ -31,8 +31,9 @@ These dependencies are required:\n \n  Library     | Purpose          | Description\n  ------------|------------------|----------------------\n- libssl      | SSL Support      | Secure communications\n- libboost    | Boost            | C++ Library\n+ libssl      | Crypto           | Random Number Generation, Elliptic Curve Cryptography\n+ libboost    | Utility          | Library for threading, data structures, etc\n+ libevent    | Networking       | OS independent asynchronous networking\n \n Optional dependencies:\n \n@@ -57,7 +58,7 @@ Dependency Build Instructions: Ubuntu & Debian\n ----------------------------------------------\n Build requirements:\n \n-\tsudo apt-get install build-essential libtool autotools-dev autoconf pkg-config libssl-dev\n+\tsudo apt-get install build-essential libtool autotools-dev autoconf pkg-config libssl-dev libevent-dev\n \t\n For Ubuntu 12.04 and later or Debian 7 and later libboost-all-dev has to be installed:\n "
      },
      {
        "sha": "2fc601d4354259796a04650c75315aa5b41f8b15",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=9aa90994ee85e549ddbe23a6f03e33d0edcd57b2",
        "patch": "@@ -4,6 +4,29 @@ release-notes at release time)\n Notable changes\n ===============\n \n+SSL support for RPC dropped\n+----------------------------\n+\n+SSL support for RPC, previously enabled by the option `rpcssl` has been dropped\n+from both the client and the server. This was done in preparation for removing\n+the dependency on OpenSSL for the daemon completely.\n+\n+Trying to use `rpcssl` will result in an error:\n+\n+    Error: SSL mode for RPC (-rpcssl) is no longer supported.\n+\n+If you are one of the few people that relies on this feature, a flexible\n+migration path is to use `stunnel`. This is an utility that can tunnel\n+arbitrary TCP connections inside SSL. On e.g. Ubuntu it can be installed with:\n+\n+    sudo apt-get install stunnel4\n+\n+Then, to tunnel a SSL connection on 28332 to a RPC server bound on localhost on port 18332 do:\n+\n+    stunnel -d 28332 -r 127.0.0.1:18332 -p stunnel.pem -P ''\n+\n+It can also be set up system-wide in inetd style.\n+\n Random-cookie RPC authentication\n ---------------------------------\n "
      },
      {
        "sha": "514bdf5640b121de18ea33fcddd328170e22c944",
        "filename": "qa/pull-tester/rpc-tests.sh",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/qa/pull-tester/rpc-tests.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/qa/pull-tester/rpc-tests.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.sh?ref=9aa90994ee85e549ddbe23a6f03e33d0edcd57b2",
        "patch": "@@ -8,6 +8,11 @@ CURDIR=$(cd $(dirname \"$0\"); pwd)\n export BITCOIND=${REAL_BITCOIND}\n export BITCOINCLI=${REAL_BITCOINCLI}\n \n+if [ \"x${EXEEXT}\" = \"x.exe\" ]; then\n+  echo \"Win tests currently disabled\"\n+  exit 0\n+fi\n+\n #Run the tests\n \n testScripts=("
      },
      {
        "sha": "b66533543d755b37c4cc10e5d580686c220fc918",
        "filename": "qa/rpc-tests/httpbasics.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/qa/rpc-tests/httpbasics.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/qa/rpc-tests/httpbasics.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/httpbasics.py?ref=9aa90994ee85e549ddbe23a6f03e33d0edcd57b2",
        "patch": "@@ -22,7 +22,7 @@\n \n class HTTPBasicsTest (BitcoinTestFramework):\n     def setup_nodes(self):\n-        return start_nodes(4, self.options.tmpdir, extra_args=[['-rpckeepalive=1'], ['-rpckeepalive=0'], [], []])\n+        return start_nodes(4, self.options.tmpdir)\n \n     def run_test(self):\n \n@@ -84,9 +84,8 @@ def run_test(self):\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read();\n         assert_equal('\"error\":null' in out1, True)\n-        assert_equal(conn.sock!=None, False) #connection must be closed because keep-alive was set to false\n \n-        #node2 (third node) is running with standard keep-alive parameters which means keep-alive is off\n+        #node2 (third node) is running with standard keep-alive parameters which means keep-alive is on\n         urlNode2 = urlparse.urlparse(self.nodes[2].url)\n         authpair = urlNode2.username + ':' + urlNode2.password\n         headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpair)}"
      },
      {
        "sha": "e084ad55abb4b52b96893f6fe7eb942103d9dcb4",
        "filename": "qa/rpc-tests/rest.py",
        "status": "modified",
        "additions": 26,
        "deletions": 16,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/qa/rpc-tests/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/qa/rpc-tests/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rest.py?ref=9aa90994ee85e549ddbe23a6f03e33d0edcd57b2",
        "patch": "@@ -32,10 +32,20 @@ def deser_uint256(f):\n         r += t << (i * 32)\n     return r\n \n-#allows simple http get calls with a request body\n-def http_get_call(host, port, path, requestdata = '', response_object = 0):\n+#allows simple http get calls\n+def http_get_call(host, port, path, response_object = 0):\n     conn = httplib.HTTPConnection(host, port)\n-    conn.request('GET', path, requestdata)\n+    conn.request('GET', path)\n+\n+    if response_object:\n+        return conn.getresponse()\n+\n+    return conn.getresponse().read()\n+\n+#allows simple http post calls with a request body\n+def http_post_call(host, port, path, requestdata = '', response_object = 0):\n+    conn = httplib.HTTPConnection(host, port)\n+    conn.request('POST', path, requestdata)\n \n     if response_object:\n         return conn.getresponse()\n@@ -137,7 +147,7 @@ def run_test(self):\n         binaryRequest += binascii.unhexlify(vintx);\n         binaryRequest += pack(\"i\", 0);\n \n-        bin_response = http_get_call(url.hostname, url.port, '/rest/getutxos'+self.FORMAT_SEPARATOR+'bin', binaryRequest)\n+        bin_response = http_post_call(url.hostname, url.port, '/rest/getutxos'+self.FORMAT_SEPARATOR+'bin', binaryRequest)\n         output = StringIO.StringIO()\n         output.write(bin_response)\n         output.seek(0)\n@@ -175,29 +185,29 @@ def run_test(self):\n \n         #do some invalid requests\n         json_request = '{\"checkmempool'\n-        response = http_get_call(url.hostname, url.port, '/rest/getutxos'+self.FORMAT_SEPARATOR+'json', json_request, True)\n+        response = http_post_call(url.hostname, url.port, '/rest/getutxos'+self.FORMAT_SEPARATOR+'json', json_request, True)\n         assert_equal(response.status, 500) #must be a 500 because we send a invalid json request\n \n         json_request = '{\"checkmempool'\n-        response = http_get_call(url.hostname, url.port, '/rest/getutxos'+self.FORMAT_SEPARATOR+'bin', json_request, True)\n+        response = http_post_call(url.hostname, url.port, '/rest/getutxos'+self.FORMAT_SEPARATOR+'bin', json_request, True)\n         assert_equal(response.status, 500) #must be a 500 because we send a invalid bin request\n \n-        response = http_get_call(url.hostname, url.port, '/rest/getutxos/checkmempool'+self.FORMAT_SEPARATOR+'bin', '', True)\n+        response = http_post_call(url.hostname, url.port, '/rest/getutxos/checkmempool'+self.FORMAT_SEPARATOR+'bin', '', True)\n         assert_equal(response.status, 500) #must be a 500 because we send a invalid bin request\n \n         #test limits\n         json_request = '/checkmempool/'\n         for x in range(0, 20):\n             json_request += txid+'-'+str(n)+'/'\n         json_request = json_request.rstrip(\"/\")\n-        response = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json', '', True)\n+        response = http_post_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json', '', True)\n         assert_equal(response.status, 500) #must be a 500 because we exceeding the limits\n \n         json_request = '/checkmempool/'\n         for x in range(0, 15):\n             json_request += txid+'-'+str(n)+'/'\n         json_request = json_request.rstrip(\"/\");\n-        response = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json', '', True)\n+        response = http_post_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json', '', True)\n         assert_equal(response.status, 200) #must be a 500 because we exceeding the limits\n \n         self.nodes[0].generate(1) #generate block to not affect upcoming tests\n@@ -208,27 +218,27 @@ def run_test(self):\n         ################\n \n         # check binary format\n-        response = http_get_call(url.hostname, url.port, '/rest/block/'+bb_hash+self.FORMAT_SEPARATOR+\"bin\", \"\", True)\n+        response = http_get_call(url.hostname, url.port, '/rest/block/'+bb_hash+self.FORMAT_SEPARATOR+\"bin\", True)\n         assert_equal(response.status, 200)\n         assert_greater_than(int(response.getheader('content-length')), 80)\n         response_str = response.read()\n \n         # compare with block header\n-        response_header = http_get_call(url.hostname, url.port, '/rest/headers/1/'+bb_hash+self.FORMAT_SEPARATOR+\"bin\", \"\", True)\n+        response_header = http_get_call(url.hostname, url.port, '/rest/headers/1/'+bb_hash+self.FORMAT_SEPARATOR+\"bin\", True)\n         assert_equal(response_header.status, 200)\n         assert_equal(int(response_header.getheader('content-length')), 80)\n         response_header_str = response_header.read()\n         assert_equal(response_str[0:80], response_header_str)\n \n         # check block hex format\n-        response_hex = http_get_call(url.hostname, url.port, '/rest/block/'+bb_hash+self.FORMAT_SEPARATOR+\"hex\", \"\", True)\n+        response_hex = http_get_call(url.hostname, url.port, '/rest/block/'+bb_hash+self.FORMAT_SEPARATOR+\"hex\", True)\n         assert_equal(response_hex.status, 200)\n         assert_greater_than(int(response_hex.getheader('content-length')), 160)\n         response_hex_str = response_hex.read()\n         assert_equal(response_str.encode(\"hex\")[0:160], response_hex_str[0:160])\n \n         # compare with hex block header\n-        response_header_hex = http_get_call(url.hostname, url.port, '/rest/headers/1/'+bb_hash+self.FORMAT_SEPARATOR+\"hex\", \"\", True)\n+        response_header_hex = http_get_call(url.hostname, url.port, '/rest/headers/1/'+bb_hash+self.FORMAT_SEPARATOR+\"hex\", True)\n         assert_equal(response_header_hex.status, 200)\n         assert_greater_than(int(response_header_hex.getheader('content-length')), 160)\n         response_header_hex_str = response_header_hex.read()\n@@ -241,7 +251,7 @@ def run_test(self):\n         assert_equal(block_json_obj['hash'], bb_hash)\n \n         # compare with json block header\n-        response_header_json = http_get_call(url.hostname, url.port, '/rest/headers/1/'+bb_hash+self.FORMAT_SEPARATOR+\"json\", \"\", True)\n+        response_header_json = http_get_call(url.hostname, url.port, '/rest/headers/1/'+bb_hash+self.FORMAT_SEPARATOR+\"json\", True)\n         assert_equal(response_header_json.status, 200)\n         response_header_json_str = response_header_json.read()\n         json_obj = json.loads(response_header_json_str, parse_float=decimal.Decimal)\n@@ -265,7 +275,7 @@ def run_test(self):\n         #see if we can get 5 headers in one response\n         self.nodes[1].generate(5)\n         self.sync_all()\n-        response_header_json = http_get_call(url.hostname, url.port, '/rest/headers/5/'+bb_hash+self.FORMAT_SEPARATOR+\"json\", \"\", True)\n+        response_header_json = http_get_call(url.hostname, url.port, '/rest/headers/5/'+bb_hash+self.FORMAT_SEPARATOR+\"json\", True)\n         assert_equal(response_header_json.status, 200)\n         response_header_json_str = response_header_json.read()\n         json_obj = json.loads(response_header_json_str)\n@@ -278,7 +288,7 @@ def run_test(self):\n         assert_equal(json_obj['txid'], tx_hash)\n \n         # check hex format response\n-        hex_string = http_get_call(url.hostname, url.port, '/rest/tx/'+tx_hash+self.FORMAT_SEPARATOR+\"hex\", \"\", True)\n+        hex_string = http_get_call(url.hostname, url.port, '/rest/tx/'+tx_hash+self.FORMAT_SEPARATOR+\"hex\", True)\n         assert_equal(hex_string.status, 200)\n         assert_greater_than(int(response.getheader('content-length')), 10)\n "
      },
      {
        "sha": "390e9f1436959c6ad841611fe2f0d3c6d0da79ec",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=9aa90994ee85e549ddbe23a6f03e33d0edcd57b2",
        "patch": "@@ -98,6 +98,8 @@ BITCOIN_CORE_H = \\\n   eccryptoverify.h \\\n   ecwrapper.h \\\n   hash.h \\\n+  httprpc.h \\\n+  httpserver.h \\\n   init.h \\\n   key.h \\\n   keystore.h \\\n@@ -164,13 +166,15 @@ obj/build.h: FORCE\n libbitcoin_util_a-clientversion.$(OBJEXT): obj/build.h\n \n # server: shared between bitcoind and bitcoin-qt\n-libbitcoin_server_a_CPPFLAGS = $(BITCOIN_INCLUDES) $(MINIUPNPC_CPPFLAGS)\n+libbitcoin_server_a_CPPFLAGS = $(BITCOIN_INCLUDES) $(MINIUPNPC_CPPFLAGS) $(EVENT_CFLAGS) $(EVENT_PTHREADS_CFLAGS)\n libbitcoin_server_a_SOURCES = \\\n   addrman.cpp \\\n   alert.cpp \\\n   bloom.cpp \\\n   chain.cpp \\\n   checkpoints.cpp \\\n+  httprpc.cpp \\\n+  httpserver.cpp \\\n   init.cpp \\\n   leveldbwrapper.cpp \\\n   main.cpp \\\n@@ -320,12 +324,12 @@ if ENABLE_WALLET\n bitcoind_LDADD += libbitcoin_wallet.a\n endif\n \n-bitcoind_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS)\n+bitcoind_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)\n #\n \n # bitcoin-cli binary #\n bitcoin_cli_SOURCES = bitcoin-cli.cpp\n-bitcoin_cli_CPPFLAGS = $(BITCOIN_INCLUDES)\n+bitcoin_cli_CPPFLAGS = $(BITCOIN_INCLUDES) $(EVENT_CFLAGS)\n bitcoin_cli_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n \n if TARGET_WINDOWS\n@@ -338,7 +342,7 @@ bitcoin_cli_LDADD = \\\n   $(LIBBITCOIN_UTIL) \\\n   $(LIBSECP256K1)\n \n-bitcoin_cli_LDADD += $(BOOST_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS)\n+bitcoin_cli_LDADD += $(BOOST_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(EVENT_LIBS)\n #\n \n # bitcoin-tx binary #"
      },
      {
        "sha": "8d60aca25c531b4068c258cf2574bb7c7d36d7f4",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=9aa90994ee85e549ddbe23a6f03e33d0edcd57b2",
        "patch": "@@ -362,7 +362,8 @@ if ENABLE_WALLET\n qt_bitcoin_qt_LDADD += $(LIBBITCOIN_WALLET)\n endif\n qt_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CRYPTO) $(LIBBITCOIN_UNIVALUE) $(LIBLEVELDB) $(LIBMEMENV) \\\n-  $(BOOST_LIBS) $(QT_LIBS) $(QT_DBUS_LIBS) $(QR_LIBS) $(PROTOBUF_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(LIBSECP256K1)\n+  $(BOOST_LIBS) $(QT_LIBS) $(QT_DBUS_LIBS) $(QR_LIBS) $(PROTOBUF_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(LIBSECP256K1) \\\n+  $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)\n qt_bitcoin_qt_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(QT_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n qt_bitcoin_qt_LIBTOOLFLAGS = --tag CXX\n "
      },
      {
        "sha": "4250bb8f3b27b2a49452aa4ea93e3307a9062271",
        "filename": "src/Makefile.qttest.include",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/src/Makefile.qttest.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/src/Makefile.qttest.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qttest.include?ref=9aa90994ee85e549ddbe23a6f03e33d0edcd57b2",
        "patch": "@@ -32,7 +32,8 @@ qt_test_test_bitcoin_qt_LDADD += $(LIBBITCOIN_WALLET)\n endif\n qt_test_test_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CRYPTO) $(LIBBITCOIN_UNIVALUE) $(LIBLEVELDB) \\\n   $(LIBMEMENV) $(BOOST_LIBS) $(QT_DBUS_LIBS) $(QT_TEST_LIBS) $(QT_LIBS) \\\n-  $(QR_LIBS) $(PROTOBUF_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(LIBSECP256K1)\n+  $(QR_LIBS) $(PROTOBUF_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(LIBSECP256K1) \\\n+  $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)\n qt_test_test_bitcoin_qt_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(QT_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n \n CLEAN_BITCOIN_QT_TEST = $(TEST_QT_MOC_CPP) qt/test/*.gcda qt/test/*.gcno"
      },
      {
        "sha": "866c6f2d4443cd2565a3ef86255833573d932de9",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 97,
        "deletions": 40,
        "changes": 137,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=9aa90994ee85e549ddbe23a6f03e33d0edcd57b2",
        "patch": "@@ -11,6 +11,12 @@\n #include \"utilstrencodings.h\"\n \n #include <boost/filesystem/operations.hpp>\n+#include <stdio.h>\n+\n+#include <event2/event.h>\n+#include <event2/http.h>\n+#include <event2/buffer.h>\n+#include <event2/keyvalq_struct.h>\n \n #include \"univalue/univalue.h\"\n \n@@ -32,9 +38,6 @@ std::string HelpMessageCli()\n     strUsage += HelpMessageOpt(\"-rpcuser=<user>\", _(\"Username for JSON-RPC connections\"));\n     strUsage += HelpMessageOpt(\"-rpcpassword=<pw>\", _(\"Password for JSON-RPC connections\"));\n \n-    strUsage += HelpMessageGroup(_(\"SSL options: (see the Bitcoin Wiki for SSL setup instructions)\"));\n-    strUsage += HelpMessageOpt(\"-rpcssl\", _(\"Use OpenSSL (https) for JSON-RPC connections\"));\n-\n     return strUsage;\n }\n \n@@ -92,67 +95,117 @@ static bool AppInitRPC(int argc, char* argv[])\n         fprintf(stderr, \"Error: Invalid combination of -regtest and -testnet.\\n\");\n         return false;\n     }\n+    if (GetBoolArg(\"-rpcssl\", false))\n+    {\n+        fprintf(stderr, \"Error: SSL mode for RPC (-rpcssl) is no longer supported.\\n\");\n+        return false;\n+    }\n     return true;\n }\n \n-UniValue CallRPC(const string& strMethod, const UniValue& params)\n+\n+/** Reply structure for request_done to fill in */\n+struct HTTPReply\n {\n-    // Connect to localhost\n-    bool fUseSSL = GetBoolArg(\"-rpcssl\", false);\n-    boost::asio::io_service io_service;\n-    boost::asio::ssl::context context(io_service, boost::asio::ssl::context::sslv23);\n-    context.set_options(boost::asio::ssl::context::no_sslv2 | boost::asio::ssl::context::no_sslv3);\n-    boost::asio::ssl::stream<boost::asio::ip::tcp::socket> sslStream(io_service, context);\n-    SSLIOStreamDevice<boost::asio::ip::tcp> d(sslStream, fUseSSL);\n-    boost::iostreams::stream< SSLIOStreamDevice<boost::asio::ip::tcp> > stream(d);\n-\n-    const bool fConnected = d.connect(GetArg(\"-rpcconnect\", \"127.0.0.1\"), GetArg(\"-rpcport\", itostr(BaseParams().RPCPort())));\n-    if (!fConnected)\n-        throw CConnectionFailed(\"couldn't connect to server\");\n+    int status;\n+    std::string body;\n+};\n+\n+static void http_request_done(struct evhttp_request *req, void *ctx)\n+{\n+    HTTPReply *reply = static_cast<HTTPReply*>(ctx);\n+\n+    if (req == NULL) {\n+        /* If req is NULL, it means an error occurred while connecting, but\n+         * I'm not sure how to find out which one. We also don't really care.\n+         */\n+        reply->status = 0;\n+        return;\n+    }\n \n-    // Find credentials to use\n+    reply->status = evhttp_request_get_response_code(req);\n+\n+    struct evbuffer *buf = evhttp_request_get_input_buffer(req);\n+    if (buf)\n+    {\n+        size_t size = evbuffer_get_length(buf);\n+        const char *data = (const char*)evbuffer_pullup(buf, size);\n+        if (data)\n+            reply->body = std::string(data, size);\n+        evbuffer_drain(buf, size);\n+    }\n+}\n+\n+UniValue CallRPC(const string& strMethod, const UniValue& params)\n+{\n+    std::string host = GetArg(\"-rpcconnect\", \"127.0.0.1\");\n+    int port = GetArg(\"-rpcport\", BaseParams().RPCPort());\n+\n+    // Create event base\n+    struct event_base *base = event_base_new(); // TODO RAII\n+    if (!base)\n+        throw runtime_error(\"cannot create event_base\");\n+\n+    // Synchronously look up hostname\n+    struct evhttp_connection *evcon = evhttp_connection_base_new(base, NULL, host.c_str(), port); // TODO RAII\n+    if (evcon == NULL)\n+        throw runtime_error(\"create connection failed\");\n+    evhttp_connection_set_timeout(evcon, GetArg(\"-rpctimeout\", 30));\n+\n+    HTTPReply response;\n+    struct evhttp_request *req = evhttp_request_new(http_request_done, (void*)&response); // TODO RAII\n+    if (req == NULL)\n+        throw runtime_error(\"create http request failed\");\n+\n+    // Get credentials\n     std::string strRPCUserColonPass;\n     if (mapArgs[\"-rpcpassword\"] == \"\") {\n         // Try fall back to cookie-based authentication if no password is provided\n         if (!GetAuthCookie(&strRPCUserColonPass)) {\n             throw runtime_error(strprintf(\n-                _(\"You must set rpcpassword=<password> in the configuration file:\\n%s\\n\"\n-                  \"If the file does not exist, create it with owner-readable-only file permissions.\"),\n+                _(\"Could not locate RPC credentials. No authentication cookie could be found, and no rpcpassword is set in the configuration file (%s)\"),\n                     GetConfigFile().string().c_str()));\n \n         }\n     } else {\n         strRPCUserColonPass = mapArgs[\"-rpcuser\"] + \":\" + mapArgs[\"-rpcpassword\"];\n     }\n \n-    // HTTP basic authentication\n-    map<string, string> mapRequestHeaders;\n-    mapRequestHeaders[\"Authorization\"] = string(\"Basic \") + EncodeBase64(strRPCUserColonPass);\n-\n-    // Send request\n-    string strRequest = JSONRPCRequest(strMethod, params, 1);\n-    string strPost = HTTPPost(strRequest, mapRequestHeaders);\n-    stream << strPost << std::flush;\n-\n-    // Receive HTTP reply status\n-    int nProto = 0;\n-    int nStatus = ReadHTTPStatus(stream, nProto);\n+    struct evkeyvalq *output_headers = evhttp_request_get_output_headers(req);\n+    assert(output_headers);\n+    evhttp_add_header(output_headers, \"Host\", host.c_str());\n+    evhttp_add_header(output_headers, \"Connection\", \"close\");\n+    evhttp_add_header(output_headers, \"Authorization\", (std::string(\"Basic \") + EncodeBase64(strRPCUserColonPass)).c_str());\n+\n+    // Attach request data\n+    std::string strRequest = JSONRPCRequest(strMethod, params, 1);\n+    struct evbuffer * output_buffer = evhttp_request_get_output_buffer(req);\n+    assert(output_buffer);\n+    evbuffer_add(output_buffer, strRequest.data(), strRequest.size());\n+\n+    int r = evhttp_make_request(evcon, req, EVHTTP_REQ_POST, \"/\");\n+    if (r != 0) {\n+        evhttp_connection_free(evcon);\n+        event_base_free(base);\n+        throw CConnectionFailed(\"send http request failed\");\n+    }\n \n-    // Receive HTTP reply message headers and body\n-    map<string, string> mapHeaders;\n-    string strReply;\n-    ReadHTTPMessage(stream, mapHeaders, strReply, nProto, std::numeric_limits<size_t>::max());\n+    event_base_dispatch(base);\n+    evhttp_connection_free(evcon);\n+    event_base_free(base);\n \n-    if (nStatus == HTTP_UNAUTHORIZED)\n+    if (response.status == 0)\n+        throw CConnectionFailed(\"couldn't connect to server\");\n+    else if (response.status == HTTP_UNAUTHORIZED)\n         throw runtime_error(\"incorrect rpcuser or rpcpassword (authorization failed)\");\n-    else if (nStatus >= 400 && nStatus != HTTP_BAD_REQUEST && nStatus != HTTP_NOT_FOUND && nStatus != HTTP_INTERNAL_SERVER_ERROR)\n-        throw runtime_error(strprintf(\"server returned HTTP error %d\", nStatus));\n-    else if (strReply.empty())\n+    else if (response.status >= 400 && response.status != HTTP_BAD_REQUEST && response.status != HTTP_NOT_FOUND && response.status != HTTP_INTERNAL_SERVER_ERROR)\n+        throw runtime_error(strprintf(\"server returned HTTP error %d\", response.status));\n+    else if (response.body.empty())\n         throw runtime_error(\"no response from server\");\n \n     // Parse reply\n     UniValue valReply(UniValue::VSTR);\n-    if (!valReply.read(strReply))\n+    if (!valReply.read(response.body))\n         throw runtime_error(\"couldn't parse reply from server\");\n     const UniValue& reply = valReply.get_obj();\n     if (reply.empty())\n@@ -248,6 +301,10 @@ int CommandLineRPC(int argc, char *argv[])\n int main(int argc, char* argv[])\n {\n     SetupEnvironment();\n+    if (!SetupNetworking()) {\n+        fprintf(stderr, \"Error: Initializing networking failed\\n\");\n+        exit(1);\n+    }\n \n     try {\n         if(!AppInitRPC(argc, argv))"
      },
      {
        "sha": "b512f74c227003c3393aa099f4c4fe3cba55f818",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=9aa90994ee85e549ddbe23a6f03e33d0edcd57b2",
        "patch": "@@ -10,11 +10,16 @@\n #include \"noui.h\"\n #include \"scheduler.h\"\n #include \"util.h\"\n+#include \"httpserver.h\"\n+#include \"httprpc.h\"\n+#include \"rpcserver.h\"\n \n #include <boost/algorithm/string/predicate.hpp>\n #include <boost/filesystem.hpp>\n #include <boost/thread.hpp>\n \n+#include <stdio.h>\n+\n /* Introduction text for doxygen: */\n \n /*! \\mainpage Developer documentation\n@@ -44,7 +49,7 @@ void WaitForShutdown(boost::thread_group* threadGroup)\n     }\n     if (threadGroup)\n     {\n-        threadGroup->interrupt_all();\n+        Interrupt(*threadGroup);\n         threadGroup->join_all();\n     }\n }\n@@ -154,7 +159,7 @@ bool AppInit(int argc, char* argv[])\n \n     if (!fRet)\n     {\n-        threadGroup.interrupt_all();\n+        Interrupt(threadGroup);\n         // threadGroup.join_all(); was left out intentionally here, because we didn't re-test all of\n         // the startup-failure cases to make sure they don't result in a hang due to some\n         // thread-blocking-waiting-for-another-thread-during-startup case"
      },
      {
        "sha": "98ac750bb1938f2bcd7a3125611ee383bcaaff16",
        "filename": "src/httprpc.cpp",
        "status": "added",
        "additions": 193,
        "deletions": 0,
        "changes": 193,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=9aa90994ee85e549ddbe23a6f03e33d0edcd57b2",
        "patch": "@@ -0,0 +1,193 @@\n+#include \"httprpc.h\"\n+\n+#include \"base58.h\"\n+#include \"chainparams.h\"\n+#include \"httpserver.h\"\n+#include \"rpcprotocol.h\"\n+#include \"rpcserver.h\"\n+#include \"random.h\"\n+#include \"sync.h\"\n+#include \"util.h\"\n+#include \"utilstrencodings.h\"\n+#include \"ui_interface.h\"\n+\n+#include <boost/algorithm/string.hpp> // boost::trim\n+\n+/** Simple one-shot callback timer to be used by the RPC mechanism to e.g.\n+ * re-lock the wellet.\n+ */\n+class HTTPRPCTimer : public RPCTimerBase\n+{\n+public:\n+    HTTPRPCTimer(struct event_base* eventBase, boost::function<void(void)>& func, int64_t millis) :\n+        ev(eventBase, false, func)\n+    {\n+        struct timeval tv;\n+        tv.tv_sec = millis/1000;\n+        tv.tv_usec = (millis%1000)*1000;\n+        ev.trigger(&tv);\n+    }\n+private:\n+    HTTPEvent ev;\n+};\n+\n+class HTTPRPCTimerInterface : public RPCTimerInterface\n+{\n+public:\n+    HTTPRPCTimerInterface(struct event_base* base) : base(base)\n+    {\n+    }\n+    const char* Name()\n+    {\n+        return \"HTTP\";\n+    }\n+    RPCTimerBase* NewTimer(boost::function<void(void)>& func, int64_t millis)\n+    {\n+        return new HTTPRPCTimer(base, func, millis);\n+    }\n+private:\n+    struct event_base* base;\n+};\n+\n+\n+/* Pre-base64-encoded authentication token */\n+static std::string strRPCUserColonPass;\n+/* Stored RPC timer interface (for unregistration) */\n+static HTTPRPCTimerInterface* httpRPCTimerInterface = 0;\n+\n+static void JSONErrorReply(HTTPRequest* req, const UniValue& objError, const UniValue& id)\n+{\n+    // Send error reply from json-rpc error object\n+    int nStatus = HTTP_INTERNAL_SERVER_ERROR;\n+    int code = find_value(objError, \"code\").get_int();\n+\n+    if (code == RPC_INVALID_REQUEST)\n+        nStatus = HTTP_BAD_REQUEST;\n+    else if (code == RPC_METHOD_NOT_FOUND)\n+        nStatus = HTTP_NOT_FOUND;\n+\n+    std::string strReply = JSONRPCReply(NullUniValue, objError, id);\n+\n+    req->WriteHeader(\"Content-Type\", \"application/json\");\n+    req->WriteReply(nStatus, strReply);\n+}\n+\n+static bool RPCAuthorized(const std::string& strAuth)\n+{\n+    if (strRPCUserColonPass.empty()) // Belt-and-suspenders measure if InitRPCAuthentication was not called\n+        return false;\n+    if (strAuth.substr(0, 6) != \"Basic \")\n+        return false;\n+    std::string strUserPass64 = strAuth.substr(6);\n+    boost::trim(strUserPass64);\n+    std::string strUserPass = DecodeBase64(strUserPass64);\n+    return TimingResistantEqual(strUserPass, strRPCUserColonPass);\n+}\n+\n+static bool HTTPReq_JSONRPC(HTTPRequest* req, const std::string &)\n+{\n+    // JSONRPC handles only POST\n+    if (req->GetRequestMethod() != HTTPRequest::POST) {\n+        req->WriteReply(HTTP_BAD_METHOD, \"JSONRPC server handles only POST requests\");\n+        return false;\n+    }\n+    // Check authorization\n+    std::pair<bool, std::string> authHeader = req->GetHeader(\"authorization\");\n+    if (!authHeader.first) {\n+        req->WriteReply(HTTP_UNAUTHORIZED);\n+        return false;\n+    }\n+\n+    if (!RPCAuthorized(authHeader.second)) {\n+        LogPrintf(\"ThreadRPCServer incorrect password attempt from %s\\n\", req->GetPeer().ToString());\n+\n+        /* Deter brute-forcing\n+           If this results in a DoS the user really\n+           shouldn't have their RPC port exposed. */\n+        MilliSleep(250);\n+\n+        req->WriteReply(HTTP_UNAUTHORIZED);\n+        return false;\n+    }\n+\n+    JSONRequest jreq;\n+    try {\n+        // Parse request\n+        UniValue valRequest;\n+        if (!valRequest.read(req->ReadBody()))\n+            throw JSONRPCError(RPC_PARSE_ERROR, \"Parse error\");\n+\n+        std::string strReply;\n+        // singleton request\n+        if (valRequest.isObject()) {\n+            jreq.parse(valRequest);\n+\n+            UniValue result = tableRPC.execute(jreq.strMethod, jreq.params);\n+\n+            // Send reply\n+            strReply = JSONRPCReply(result, NullUniValue, jreq.id);\n+\n+        // array of requests\n+        } else if (valRequest.isArray())\n+            strReply = JSONRPCExecBatch(valRequest.get_array());\n+        else\n+            throw JSONRPCError(RPC_PARSE_ERROR, \"Top-level object parse error\");\n+\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strReply);\n+    } catch (const UniValue& objError) {\n+        JSONErrorReply(req, objError, jreq.id);\n+        return false;\n+    } catch (const std::exception& e) {\n+        JSONErrorReply(req, JSONRPCError(RPC_PARSE_ERROR, e.what()), jreq.id);\n+        return false;\n+    }\n+    return true;\n+}\n+\n+static bool InitRPCAuthentication()\n+{\n+    if (mapArgs[\"-rpcpassword\"] == \"\")\n+    {\n+        LogPrintf(\"No rpcpassword set - using random cookie authentication\\n\");\n+        if (!GenerateAuthCookie(&strRPCUserColonPass)) {\n+            uiInterface.ThreadSafeMessageBox(\n+                _(\"Error: A fatal internal error occurred, see debug.log for details\"), // Same message as AbortNode\n+                \"\", CClientUIInterface::MSG_ERROR);\n+            return false;\n+        }\n+    } else {\n+        strRPCUserColonPass = mapArgs[\"-rpcuser\"] + \":\" + mapArgs[\"-rpcpassword\"];\n+    }\n+    return true;\n+}\n+\n+bool StartHTTPRPC()\n+{\n+    LogPrint(\"rpc\", \"Starting HTTP RPC server\\n\");\n+    if (!InitRPCAuthentication())\n+        return false;\n+\n+    RegisterHTTPHandler(\"/\", true, HTTPReq_JSONRPC);\n+\n+    assert(EventBase());\n+    httpRPCTimerInterface = new HTTPRPCTimerInterface(EventBase());\n+    RPCRegisterTimerInterface(httpRPCTimerInterface);\n+    return true;\n+}\n+\n+void InterruptHTTPRPC()\n+{\n+    LogPrint(\"rpc\", \"Interrupting HTTP RPC server\\n\");\n+}\n+\n+void StopHTTPRPC()\n+{\n+    LogPrint(\"rpc\", \"Stopping HTTP RPC server\\n\");\n+    UnregisterHTTPHandler(\"/\", true);\n+    if (httpRPCTimerInterface) {\n+        RPCUnregisterTimerInterface(httpRPCTimerInterface);\n+        delete httpRPCTimerInterface;\n+        httpRPCTimerInterface = 0;\n+    }\n+}"
      },
      {
        "sha": "d35445718871ee6339ece7caf1c0c3cdc3872f4f",
        "filename": "src/httprpc.h",
        "status": "added",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/src/httprpc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/src/httprpc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.h?ref=9aa90994ee85e549ddbe23a6f03e33d0edcd57b2",
        "patch": "@@ -0,0 +1,37 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_HTTPRPC_H\n+#define BITCOIN_HTTPRPC_H\n+\n+#include <string>\n+#include <map>\n+\n+class HTTPRequest;\n+\n+/** Start HTTP RPC subsystem.\n+ * Precondition; HTTP and RPC has been started.\n+ */\n+bool StartHTTPRPC();\n+/** Interrupt HTTP RPC subsystem.\n+ */\n+void InterruptHTTPRPC();\n+/** Stop HTTP RPC subsystem.\n+ * Precondition; HTTP and RPC has been stopped.\n+ */\n+void StopHTTPRPC();\n+\n+/** Start HTTP REST subsystem.\n+ * Precondition; HTTP and RPC has been started.\n+ */\n+bool StartREST();\n+/** Interrupt RPC REST subsystem.\n+ */\n+void InterruptREST();\n+/** Stop HTTP REST subsystem.\n+ * Precondition; HTTP and RPC has been stopped.\n+ */\n+void StopREST();\n+\n+#endif"
      },
      {
        "sha": "7e599b1d78d31a16151d455e000677de2543a408",
        "filename": "src/httpserver.cpp",
        "status": "added",
        "additions": 575,
        "deletions": 0,
        "changes": 575,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=9aa90994ee85e549ddbe23a6f03e33d0edcd57b2",
        "patch": "@@ -0,0 +1,575 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"httpserver.h\"\n+\n+#include \"chainparamsbase.h\"\n+#include \"compat.h\"\n+#include \"util.h\"\n+#include \"netbase.h\"\n+#include \"rpcprotocol.h\" // For HTTP status codes\n+#include \"sync.h\"\n+#include \"ui_interface.h\"\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#include <sys/types.h>\n+#include <sys/stat.h>\n+#include <signal.h>\n+\n+#include <event2/event.h>\n+#include <event2/http.h>\n+#include <event2/thread.h>\n+#include <event2/buffer.h>\n+#include <event2/util.h>\n+#include <event2/keyvalq_struct.h>\n+\n+#ifdef EVENT__HAVE_NETINET_IN_H\n+#include <netinet/in.h>\n+#ifdef _XOPEN_SOURCE_EXTENDED\n+#include <arpa/inet.h>\n+#endif\n+#endif\n+\n+#include <boost/algorithm/string/case_conv.hpp> // for to_lower()\n+#include <boost/foreach.hpp>\n+#include <boost/scoped_ptr.hpp>\n+\n+/** HTTP request work item */\n+class HTTPWorkItem : public HTTPClosure\n+{\n+public:\n+    HTTPWorkItem(HTTPRequest* req, const std::string &path, const HTTPRequestHandler& func):\n+        req(req), path(path), func(func)\n+    {\n+    }\n+    void operator()()\n+    {\n+        func(req.get(), path);\n+    }\n+\n+    boost::scoped_ptr<HTTPRequest> req;\n+\n+private:\n+    std::string path;\n+    HTTPRequestHandler func;\n+};\n+\n+/** Simple work queue for distributing work over multiple threads.\n+ * Work items are simply callable objects.\n+ */\n+template <typename WorkItem>\n+class WorkQueue\n+{\n+private:\n+    /** Mutex protects entire object */\n+    CWaitableCriticalSection cs;\n+    CConditionVariable cond;\n+    /* XXX in C++11 we can use std::unique_ptr here and avoid manual cleanup */\n+    std::deque<WorkItem*> queue;\n+    bool running;\n+    size_t maxDepth;\n+\n+public:\n+    WorkQueue(size_t maxDepth) : running(true),\n+                                 maxDepth(maxDepth)\n+    {\n+    }\n+    /* Precondition: worker threads have all stopped */\n+    ~WorkQueue()\n+    {\n+        while (!queue.empty()) {\n+            delete queue.front();\n+            queue.pop_front();\n+        }\n+    }\n+    /** Enqueue a work item */\n+    bool Enqueue(WorkItem* item)\n+    {\n+        boost::unique_lock<boost::mutex> lock(cs);\n+        if (queue.size() >= maxDepth) {\n+            return false;\n+        }\n+        queue.push_back(item);\n+        cond.notify_one();\n+        return true;\n+    }\n+    /** Thread function */\n+    void Run()\n+    {\n+        while (running) {\n+            WorkItem* i = 0;\n+            {\n+                boost::unique_lock<boost::mutex> lock(cs);\n+                while (running && queue.empty())\n+                    cond.wait(lock);\n+                if (!running)\n+                    break;\n+                i = queue.front();\n+                queue.pop_front();\n+            }\n+            (*i)();\n+            delete i;\n+        }\n+    }\n+    /** Interrupt and exit loops */\n+    void Interrupt()\n+    {\n+        boost::unique_lock<boost::mutex> lock(cs);\n+        running = false;\n+        cond.notify_all();\n+    }\n+\n+    /** Return current depth of queue */\n+    size_t Depth()\n+    {\n+        boost::unique_lock<boost::mutex> lock(cs);\n+        return queue.size();\n+    }\n+};\n+\n+struct HTTPPathHandler\n+{\n+    HTTPPathHandler() {}\n+    HTTPPathHandler(std::string prefix, bool exactMatch, HTTPRequestHandler handler):\n+        prefix(prefix), exactMatch(exactMatch), handler(handler)\n+    {\n+    }\n+    std::string prefix;\n+    bool exactMatch;\n+    HTTPRequestHandler handler;\n+};\n+\n+/** HTTP module state */\n+\n+//! libevent event loop\n+static struct event_base* eventBase = 0;\n+//! HTTP server\n+struct evhttp* eventHTTP = 0;\n+//! List of subnets to allow RPC connections from\n+static std::vector<CSubNet> rpc_allow_subnets;\n+//! Work queue for handling longer requests off the event loop thread\n+static WorkQueue<HTTPClosure>* workQueue = 0;\n+//! Handlers for (sub)paths\n+std::vector<HTTPPathHandler> pathHandlers;\n+\n+/** Check if a network address is allowed to access the HTTP server */\n+static bool ClientAllowed(const CNetAddr& netaddr)\n+{\n+    if (!netaddr.IsValid())\n+        return false;\n+    BOOST_FOREACH (const CSubNet& subnet, rpc_allow_subnets)\n+        if (subnet.Match(netaddr))\n+            return true;\n+    return false;\n+}\n+\n+/** Initialize ACL list for HTTP server */\n+static bool InitHTTPAllowList()\n+{\n+    rpc_allow_subnets.clear();\n+    rpc_allow_subnets.push_back(CSubNet(\"127.0.0.0/8\")); // always allow IPv4 local subnet\n+    rpc_allow_subnets.push_back(CSubNet(\"::1\"));         // always allow IPv6 localhost\n+    if (mapMultiArgs.count(\"-rpcallowip\")) {\n+        const std::vector<std::string>& vAllow = mapMultiArgs[\"-rpcallowip\"];\n+        BOOST_FOREACH (std::string strAllow, vAllow) {\n+            CSubNet subnet(strAllow);\n+            if (!subnet.IsValid()) {\n+                uiInterface.ThreadSafeMessageBox(\n+                    strprintf(\"Invalid -rpcallowip subnet specification: %s. Valid are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24).\", strAllow),\n+                    \"\", CClientUIInterface::MSG_ERROR);\n+                return false;\n+            }\n+            rpc_allow_subnets.push_back(subnet);\n+        }\n+    }\n+    std::string strAllowed;\n+    BOOST_FOREACH (const CSubNet& subnet, rpc_allow_subnets)\n+        strAllowed += subnet.ToString() + \" \";\n+    LogPrint(\"http\", \"Allowing HTTP connections from: %s\\n\", strAllowed);\n+    return true;\n+}\n+\n+/** HTTP request method as string - use for logging only */\n+static std::string RequestMethodString(HTTPRequest::RequestMethod m)\n+{\n+    switch (m) {\n+    case HTTPRequest::GET:\n+        return \"GET\";\n+        break;\n+    case HTTPRequest::POST:\n+        return \"POST\";\n+        break;\n+    case HTTPRequest::HEAD:\n+        return \"HEAD\";\n+        break;\n+    case HTTPRequest::PUT:\n+        return \"PUT\";\n+        break;\n+    default:\n+        return \"unknown\";\n+    }\n+}\n+\n+/** HTTP request callback */\n+static void http_request_cb(struct evhttp_request* req, void* arg)\n+{\n+    std::auto_ptr<HTTPRequest> hreq(new HTTPRequest(req));\n+\n+    LogPrint(\"http\", \"Received a %s request for %s from %s\\n\",\n+             RequestMethodString(hreq->GetRequestMethod()), hreq->GetURI(), hreq->GetPeer().ToString());\n+\n+    // Early address-based allow check\n+    if (!ClientAllowed(hreq->GetPeer())) {\n+        hreq->WriteReply(HTTP_FORBIDDEN);\n+        return;\n+    }\n+\n+    // Early reject unknown HTTP methods\n+    if (hreq->GetRequestMethod() == HTTPRequest::UNKNOWN) {\n+        hreq->WriteReply(HTTP_BADMETHOD);\n+        return;\n+    }\n+\n+    // Find registered handler for prefix\n+    std::string strURI = hreq->GetURI();\n+    std::string path;\n+    std::vector<HTTPPathHandler>::const_iterator i = pathHandlers.begin();\n+    std::vector<HTTPPathHandler>::const_iterator iend = pathHandlers.end();\n+    for (; i != iend; ++i) {\n+        bool match = false;\n+        if (i->exactMatch)\n+            match = (strURI == i->prefix);\n+        else\n+            match = (strURI.substr(0, i->prefix.size()) == i->prefix);\n+        if (match) {\n+            path = strURI.substr(i->prefix.size());\n+            break;\n+        }\n+    }\n+\n+    // Dispatch to worker thread\n+    if (i != iend) {\n+        std::auto_ptr<HTTPWorkItem> item(new HTTPWorkItem(hreq.release(), path, i->handler));\n+        assert(workQueue);\n+        if (workQueue->Enqueue(item.get()))\n+            item.release(); /* if true, queue took ownership */\n+        else\n+            item->req->WriteReply(HTTP_INTERNAL, \"Work queue depth exceeded\");\n+    } else {\n+        hreq->WriteReply(HTTP_NOTFOUND);\n+    }\n+}\n+\n+/** Event dispatcher thread */\n+static void ThreadHTTP(struct event_base* base, struct evhttp* http)\n+{\n+    RenameThread(\"bitcoin-http\");\n+    LogPrint(\"http\", \"Entering http event loop\\n\");\n+    event_base_dispatch(base);\n+    // Event loop will be interrupted by InterruptHTTPServer()\n+    LogPrint(\"http\", \"Exited http event loop\\n\");\n+}\n+\n+/** Bind HTTP server to specified addresses */\n+static bool HTTPBindAddresses(struct evhttp* http)\n+{\n+    int defaultPort = GetArg(\"-rpcport\", BaseParams().RPCPort());\n+    int nBound = 0;\n+    std::vector<std::pair<std::string, uint16_t> > endpoints;\n+\n+    // Determine what addresses to bind to\n+    if (!mapArgs.count(\"-rpcallowip\")) { // Default to loopback if not allowing external IPs\n+        endpoints.push_back(std::make_pair(\"::1\", defaultPort));\n+        endpoints.push_back(std::make_pair(\"127.0.0.1\", defaultPort));\n+        if (mapArgs.count(\"-rpcbind\")) {\n+            LogPrintf(\"WARNING: option -rpcbind was ignored because -rpcallowip was not specified, refusing to allow everyone to connect\\n\");\n+        }\n+    } else if (mapArgs.count(\"-rpcbind\")) { // Specific bind address\n+        const std::vector<std::string>& vbind = mapMultiArgs[\"-rpcbind\"];\n+        for (std::vector<std::string>::const_iterator i = vbind.begin(); i != vbind.end(); ++i) {\n+            int port = defaultPort;\n+            std::string host;\n+            SplitHostPort(*i, port, host);\n+            endpoints.push_back(std::make_pair(host, port));\n+        }\n+    } else { // No specific bind address specified, bind to any\n+        endpoints.push_back(std::make_pair(\"::\", defaultPort));\n+        endpoints.push_back(std::make_pair(\"0.0.0.0\", defaultPort));\n+    }\n+\n+    // Bind addresses\n+    for (std::vector<std::pair<std::string, uint16_t> >::iterator i = endpoints.begin(); i != endpoints.end(); ++i) {\n+        LogPrint(\"http\", \"Binding RPC on address %s port %i\\n\", i->first, i->second);\n+        if (evhttp_bind_socket(http, i->first.empty() ? NULL : i->first.c_str(), i->second) == 0) {\n+            nBound += 1;\n+        } else {\n+            LogPrintf(\"Binding RPC on address %s port %i failed.\\n\", i->first, i->second);\n+        }\n+    }\n+    return nBound > 0;\n+}\n+\n+/** Simple wrapper to set thread name and run work queue */\n+static void HTTPWorkQueueRun(WorkQueue<HTTPClosure>* queue)\n+{\n+    RenameThread(\"bitcoin-httpworker\");\n+    queue->Run();\n+}\n+\n+bool InitHTTPServer()\n+{\n+    struct evhttp* http = 0;\n+    struct event_base* base = 0;\n+\n+    if (!InitHTTPAllowList())\n+        return false;\n+\n+    if (GetBoolArg(\"-rpcssl\", false)) {\n+        uiInterface.ThreadSafeMessageBox(\n+            \"SSL mode for RPC (-rpcssl) is no longer supported.\",\n+            \"\", CClientUIInterface::MSG_ERROR);\n+        return false;\n+    }\n+\n+#ifdef WIN32\n+    evthread_use_windows_threads();\n+#else\n+    evthread_use_pthreads();\n+#endif\n+\n+    base = event_base_new(); // XXX RAII\n+    if (!base) {\n+        LogPrintf(\"Couldn't create an event_base: exiting\\n\");\n+        return false;\n+    }\n+\n+    /* Create a new evhttp object to handle requests. */\n+    http = evhttp_new(base); // XXX RAII\n+    if (!http) {\n+        LogPrintf(\"couldn't create evhttp. Exiting.\\n\");\n+        event_base_free(base);\n+        return false;\n+    }\n+\n+    evhttp_set_timeout(http, GetArg(\"-rpctimeout\", DEFAULT_HTTP_TIMEOUT));\n+    evhttp_set_max_body_size(http, MAX_SIZE);\n+    evhttp_set_gencb(http, http_request_cb, NULL);\n+\n+    if (!HTTPBindAddresses(http)) {\n+        LogPrintf(\"Unable to bind any endpoint for RPC server\\n\");\n+        evhttp_free(http);\n+        event_base_free(base);\n+        return false;\n+    }\n+\n+    LogPrint(\"http\", \"Initialized HTTP server\\n\");\n+    int workQueueDepth = std::max((long)GetArg(\"-rpcworkqueue\", DEFAULT_HTTP_WORKQUEUE), 1L);\n+    LogPrintf(\"HTTP: creating work queue of depth %d\\n\", workQueueDepth);\n+\n+    workQueue = new WorkQueue<HTTPClosure>(workQueueDepth);\n+    eventBase = base;\n+    eventHTTP = http;\n+    return true;\n+}\n+\n+bool StartHTTPServer(boost::thread_group& threadGroup)\n+{\n+    LogPrint(\"http\", \"Starting HTTP server\\n\");\n+    int rpcThreads = std::max((long)GetArg(\"-rpcthreads\", DEFAULT_HTTP_THREADS), 1L);\n+    LogPrintf(\"HTTP: starting %d worker threads\\n\", rpcThreads);\n+    threadGroup.create_thread(boost::bind(&ThreadHTTP, eventBase, eventHTTP));\n+\n+    for (int i = 0; i < rpcThreads; i++)\n+        threadGroup.create_thread(boost::bind(&HTTPWorkQueueRun, workQueue));\n+    return true;\n+}\n+\n+void InterruptHTTPServer()\n+{\n+    LogPrint(\"http\", \"Interrupting HTTP server\\n\");\n+    if (eventBase)\n+        event_base_loopbreak(eventBase);\n+    if (workQueue)\n+        workQueue->Interrupt();\n+}\n+\n+void StopHTTPServer()\n+{\n+    LogPrint(\"http\", \"Stopping HTTP server\\n\");\n+    delete workQueue;\n+    if (eventHTTP) {\n+        evhttp_free(eventHTTP);\n+        eventHTTP = 0;\n+    }\n+    if (eventBase) {\n+        event_base_free(eventBase);\n+        eventBase = 0;\n+    }\n+}\n+\n+struct event_base* EventBase()\n+{\n+    return eventBase;\n+}\n+\n+static void httpevent_callback_fn(evutil_socket_t, short, void* data)\n+{\n+    // Static handler: simply call inner handler\n+    HTTPEvent *self = ((HTTPEvent*)data);\n+    self->handler();\n+    if (self->deleteWhenTriggered)\n+        delete self;\n+}\n+\n+HTTPEvent::HTTPEvent(struct event_base* base, bool deleteWhenTriggered, const boost::function<void(void)>& handler):\n+    deleteWhenTriggered(deleteWhenTriggered), handler(handler)\n+{\n+    ev = event_new(base, -1, 0, httpevent_callback_fn, this);\n+    assert(ev);\n+}\n+HTTPEvent::~HTTPEvent()\n+{\n+    event_free(ev);\n+}\n+void HTTPEvent::trigger(struct timeval* tv)\n+{\n+    if (tv == NULL)\n+        event_active(ev, 0, 0); // immediately trigger event in main thread\n+    else\n+        evtimer_add(ev, tv); // trigger after timeval passed\n+}\n+HTTPRequest::HTTPRequest(struct evhttp_request* req) : req(req),\n+                                                       replySent(false)\n+{\n+}\n+HTTPRequest::~HTTPRequest()\n+{\n+    if (!replySent) {\n+        // Keep track of whether reply was sent to avoid request leaks\n+        LogPrintf(\"%s: Unhandled request\\n\", __func__);\n+        WriteReply(HTTP_INTERNAL, \"Unhandled request\");\n+    }\n+    // evhttpd cleans up the request, as long as a reply was sent.\n+}\n+\n+std::pair<bool, std::string> HTTPRequest::GetHeader(const std::string& hdr)\n+{\n+    const struct evkeyvalq* headers = evhttp_request_get_input_headers(req);\n+    assert(headers);\n+    const char* val = evhttp_find_header(headers, hdr.c_str());\n+    if (val)\n+        return std::make_pair(true, val);\n+    else\n+        return std::make_pair(false, \"\");\n+}\n+\n+std::string HTTPRequest::ReadBody()\n+{\n+    struct evbuffer* buf = evhttp_request_get_input_buffer(req);\n+    if (!buf)\n+        return \"\";\n+    size_t size = evbuffer_get_length(buf);\n+    /** Trivial implementation: if this is ever a performance bottleneck,\n+     * internal copying can be avoided in multi-segment buffers by using\n+     * evbuffer_peek and an awkward loop. Though in that case, it'd be even\n+     * better to not copy into an intermediate string but use a stream\n+     * abstraction to consume the evbuffer on the fly in the parsing algorithm.\n+     */\n+    const char* data = (const char*)evbuffer_pullup(buf, size);\n+    if (!data) // returns NULL in case of empty buffer\n+        return \"\";\n+    std::string rv(data, size);\n+    evbuffer_drain(buf, size);\n+    return rv;\n+}\n+\n+void HTTPRequest::WriteHeader(const std::string& hdr, const std::string& value)\n+{\n+    struct evkeyvalq* headers = evhttp_request_get_output_headers(req);\n+    assert(headers);\n+    evhttp_add_header(headers, hdr.c_str(), value.c_str());\n+}\n+\n+/** Closure sent to main thread to request a reply to be sent to\n+ * a HTTP request.\n+ * Replies must be sent in the main loop in the main http thread,\n+ * this cannot be done from worker threads.\n+ */\n+void HTTPRequest::WriteReply(int nStatus, const std::string& strReply)\n+{\n+    assert(!replySent && req);\n+    // Send event to main http thread to send reply message\n+    struct evbuffer* evb = evhttp_request_get_output_buffer(req);\n+    assert(evb);\n+    evbuffer_add(evb, strReply.data(), strReply.size());\n+    HTTPEvent* ev = new HTTPEvent(eventBase, true,\n+        boost::bind(evhttp_send_reply, req, nStatus, (const char*)NULL, (struct evbuffer *)NULL));\n+    ev->trigger(0);\n+    replySent = true;\n+    req = 0; // transferred back to main thread\n+}\n+\n+CService HTTPRequest::GetPeer()\n+{\n+    evhttp_connection* con = evhttp_request_get_connection(req);\n+    CService peer;\n+    if (con) {\n+        // evhttp retains ownership over returned address string\n+        const char* address = \"\";\n+        uint16_t port = 0;\n+        evhttp_connection_get_peer(con, (char**)&address, &port);\n+        peer = CService(address, port);\n+    }\n+    return peer;\n+}\n+\n+std::string HTTPRequest::GetURI()\n+{\n+    return evhttp_request_get_uri(req);\n+}\n+\n+HTTPRequest::RequestMethod HTTPRequest::GetRequestMethod()\n+{\n+    switch (evhttp_request_get_command(req)) {\n+    case EVHTTP_REQ_GET:\n+        return GET;\n+        break;\n+    case EVHTTP_REQ_POST:\n+        return POST;\n+        break;\n+    case EVHTTP_REQ_HEAD:\n+        return HEAD;\n+        break;\n+    case EVHTTP_REQ_PUT:\n+        return PUT;\n+        break;\n+    default:\n+        return UNKNOWN;\n+        break;\n+    }\n+}\n+\n+void RegisterHTTPHandler(const std::string &prefix, bool exactMatch, const HTTPRequestHandler &handler)\n+{\n+    LogPrint(\"http\", \"Registering HTTP handler for %s (exactmath %d)\\n\", prefix, exactMatch);\n+    pathHandlers.push_back(HTTPPathHandler(prefix, exactMatch, handler));\n+}\n+\n+void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch)\n+{\n+    std::vector<HTTPPathHandler>::iterator i = pathHandlers.begin();\n+    std::vector<HTTPPathHandler>::iterator iend = pathHandlers.end();\n+    for (; i != iend; ++i)\n+        if (i->prefix == prefix && i->exactMatch == exactMatch)\n+            break;\n+    if (i != iend)\n+    {\n+        LogPrint(\"http\", \"Unregistering HTTP handler for %s (exactmath %d)\\n\", prefix, exactMatch);\n+        pathHandlers.erase(i);\n+    }\n+}\n+"
      },
      {
        "sha": "459c60c04724c0281ffcea3cccbbc3fb994fc29c",
        "filename": "src/httpserver.h",
        "status": "added",
        "additions": 149,
        "deletions": 0,
        "changes": 149,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/src/httpserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/src/httpserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.h?ref=9aa90994ee85e549ddbe23a6f03e33d0edcd57b2",
        "patch": "@@ -0,0 +1,149 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_HTTPSERVER_H\n+#define BITCOIN_HTTPSERVER_H\n+\n+#include <string>\n+#include <stdint.h>\n+#include <boost/thread.hpp>\n+#include <boost/scoped_ptr.hpp>\n+#include <boost/function.hpp>\n+\n+static const int DEFAULT_HTTP_THREADS=4;\n+static const int DEFAULT_HTTP_WORKQUEUE=16;\n+static const int DEFAULT_HTTP_TIMEOUT=30;\n+\n+struct evhttp_request;\n+struct event_base;\n+class CService;\n+class HTTPRequest;\n+\n+/** Initialize HTTP server.\n+ * Call this before RegisterHTTPHandler or EventBase().\n+ */\n+bool InitHTTPServer();\n+/** Start HTTP server.\n+ * This is separate from InitHTTPServer to give users race-condition-free time\n+ * to register their handlers between InitHTTPServer and StartHTTPServer.\n+ */\n+bool StartHTTPServer(boost::thread_group& threadGroup);\n+/** Interrupt HTTP server threads */\n+void InterruptHTTPServer();\n+/** Stop HTTP server */\n+void StopHTTPServer();\n+\n+/** Handler for requests to a certain HTTP path */\n+typedef boost::function<void(HTTPRequest* req, const std::string &)> HTTPRequestHandler;\n+/** Register handler for prefix.\n+ * If multiple handlers match a prefix, the first-registered one will\n+ * be invoked.\n+ */\n+void RegisterHTTPHandler(const std::string &prefix, bool exactMatch, const HTTPRequestHandler &handler);\n+/** Unregister handler for prefix */\n+void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch);\n+\n+/** Return evhttp event base. This can be used by submodules to\n+ * queue timers or custom events.\n+ */\n+struct event_base* EventBase();\n+\n+/** In-flight HTTP request.\n+ * Thin C++ wrapper around evhttp_request.\n+ */\n+class HTTPRequest\n+{\n+private:\n+    struct evhttp_request* req;\n+    bool replySent;\n+\n+public:\n+    HTTPRequest(struct evhttp_request* req);\n+    ~HTTPRequest();\n+\n+    enum RequestMethod {\n+        UNKNOWN,\n+        GET,\n+        POST,\n+        HEAD,\n+        PUT\n+    };\n+\n+    /** Get requested URI.\n+     */\n+    std::string GetURI();\n+\n+    /** Get CService (address:ip) for the origin of the http request.\n+     */\n+    CService GetPeer();\n+\n+    /** Get request method.\n+     */\n+    RequestMethod GetRequestMethod();\n+\n+    /**\n+     * Get the request header specified by hdr, or an empty string.\n+     * Return an pair (isPresent,string).\n+     */\n+    std::pair<bool, std::string> GetHeader(const std::string& hdr);\n+\n+    /**\n+     * Read request body.\n+     *\n+     * @note As this consumes the underlying buffer, call this only once.\n+     * Repeated calls will return an empty string.\n+     */\n+    std::string ReadBody();\n+\n+    /**\n+     * Write output header.\n+     *\n+     * @note call this before calling WriteErrorReply or Reply.\n+     */\n+    void WriteHeader(const std::string& hdr, const std::string& value);\n+\n+    /**\n+     * Write HTTP reply.\n+     * nStatus is the HTTP status code to send.\n+     * strReply is the body of the reply. Keep it empty to send a standard message.\n+     *\n+     * @note Can be called only once. As this will give the request back to the\n+     * main thread, do not call any other HTTPRequest methods after calling this.\n+     */\n+    void WriteReply(int nStatus, const std::string& strReply = \"\");\n+};\n+\n+/** Event handler closure.\n+ */\n+class HTTPClosure\n+{\n+public:\n+    virtual void operator()() = 0;\n+    virtual ~HTTPClosure() {}\n+};\n+\n+/** Event class. This can be used either as an cross-thread trigger or as a timer.\n+ */\n+class HTTPEvent\n+{\n+public:\n+    /** Create a new event.\n+     * deleteWhenTriggered deletes this event object after the event is triggered (and the handler called)\n+     * handler is the handler to call when the event is triggered.\n+     */\n+    HTTPEvent(struct event_base* base, bool deleteWhenTriggered, const boost::function<void(void)>& handler);\n+    ~HTTPEvent();\n+\n+    /** Trigger the event. If tv is 0, trigger it immediately. Otherwise trigger it after\n+     * the given time has elapsed.\n+     */\n+    void trigger(struct timeval* tv);\n+\n+    bool deleteWhenTriggered;\n+    boost::function<void(void)> handler;\n+private:\n+    struct event* ev;\n+};\n+\n+#endif // BITCOIN_HTTPSERVER_H"
      },
      {
        "sha": "5759b4b4284c82f115e8afb4cd62e06cfc64861a",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 22,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=9aa90994ee85e549ddbe23a6f03e33d0edcd57b2",
        "patch": "@@ -16,6 +16,8 @@\n #include \"checkpoints.h\"\n #include \"compat/sanity.h\"\n #include \"consensus/validation.h\"\n+#include \"httpserver.h\"\n+#include \"httprpc.h\"\n #include \"key.h\"\n #include \"main.h\"\n #include \"miner.h\"\n@@ -144,6 +146,15 @@ class CCoinsViewErrorCatcher : public CCoinsViewBacked\n static CCoinsViewDB *pcoinsdbview = NULL;\n static CCoinsViewErrorCatcher *pcoinscatcher = NULL;\n \n+void Interrupt(boost::thread_group& threadGroup)\n+{\n+    InterruptHTTPServer();\n+    InterruptHTTPRPC();\n+    InterruptRPC();\n+    InterruptREST();\n+    threadGroup.interrupt_all();\n+}\n+\n void Shutdown()\n {\n     LogPrintf(\"%s: In progress...\\n\", __func__);\n@@ -158,7 +169,11 @@ void Shutdown()\n     /// module was initialized.\n     RenameThread(\"bitcoin-shutoff\");\n     mempool.AddTransactionsUpdated(1);\n-    StopRPCThreads();\n+\n+    StopHTTPRPC();\n+    StopREST();\n+    StopRPC();\n+    StopHTTPServer();\n #ifdef ENABLE_WALLET\n     if (pwalletMain)\n         pwalletMain->Flush(false);\n@@ -372,7 +387,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-flushwallet\", strprintf(\"Run a thread to flush wallet periodically (default: %u)\", 1));\n         strUsage += HelpMessageOpt(\"-stopafterblockimport\", strprintf(\"Stop running after importing blocks from disk (default: %u)\", 0));\n     }\n-    string debugCategories = \"addrman, alert, bench, coindb, db, lock, rand, rpc, selectcoins, mempool, mempoolrej, net, proxy, prune\"; // Don't translate these and qt below\n+    string debugCategories = \"addrman, alert, bench, coindb, db, lock, rand, rpc, selectcoins, mempool, mempoolrej, net, proxy, prune, http\"; // Don't translate these and qt below\n     if (mode == HMM_BITCOIN_QT)\n         debugCategories += \", qt\";\n     strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +\n@@ -422,14 +437,11 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-rpcpassword=<pw>\", _(\"Password for JSON-RPC connections\"));\n     strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)\"), 8332, 18332));\n     strUsage += HelpMessageOpt(\"-rpcallowip=<ip>\", _(\"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\"));\n-    strUsage += HelpMessageOpt(\"-rpcthreads=<n>\", strprintf(_(\"Set the number of threads to service RPC calls (default: %d)\"), 4));\n-    strUsage += HelpMessageOpt(\"-rpckeepalive\", strprintf(_(\"RPC support for HTTP persistent connections (default: %d)\"), 1));\n-\n-    strUsage += HelpMessageGroup(_(\"RPC SSL options: (see the Bitcoin Wiki for SSL setup instructions)\"));\n-    strUsage += HelpMessageOpt(\"-rpcssl\", _(\"Use OpenSSL (https) for JSON-RPC connections\"));\n-    strUsage += HelpMessageOpt(\"-rpcsslcertificatechainfile=<file.cert>\", strprintf(_(\"Server certificate file (default: %s)\"), \"server.cert\"));\n-    strUsage += HelpMessageOpt(\"-rpcsslprivatekeyfile=<file.pem>\", strprintf(_(\"Server private key (default: %s)\"), \"server.pem\"));\n-    strUsage += HelpMessageOpt(\"-rpcsslciphers=<ciphers>\", strprintf(_(\"Acceptable ciphers (default: %s)\"), \"TLSv1.2+HIGH:TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!3DES:@STRENGTH\"));\n+    strUsage += HelpMessageOpt(\"-rpcthreads=<n>\", strprintf(_(\"Set the number of threads to service RPC calls (default: %d)\"), DEFAULT_HTTP_THREADS));\n+    if (showDebug) {\n+        strUsage += HelpMessageOpt(\"-rpcworkqueue=<n>\", strprintf(\"Set the depth of the work queue to service RPC calls (default: %d)\", DEFAULT_HTTP_WORKQUEUE));\n+        strUsage += HelpMessageOpt(\"-rpctimeout=<n>\", strprintf(\"Timeout during HTTP requests (default: %d)\", DEFAULT_HTTP_TIMEOUT));\n+    }\n \n     if (mode == HMM_BITCOIN_QT)\n     {\n@@ -601,6 +613,23 @@ bool InitSanityCheck(void)\n     return true;\n }\n \n+bool AppInitServers(boost::thread_group& threadGroup)\n+{\n+    RPCServer::OnStopped(&OnRPCStopped);\n+    RPCServer::OnPreCommand(&OnRPCPreCommand);\n+    if (!InitHTTPServer())\n+        return false;\n+    if (!StartRPC())\n+        return false;\n+    if (!StartHTTPRPC())\n+        return false;\n+    if (GetBoolArg(\"-rest\", false) && !StartREST())\n+        return false;\n+    if (!StartHTTPServer(threadGroup))\n+        return false;\n+    return true;\n+}\n+\n /** Initialize bitcoin.\n  *  @pre Parameters should be parsed and config file should be read.\n  */\n@@ -628,17 +657,12 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     typedef BOOL (WINAPI *PSETPROCDEPPOL)(DWORD);\n     PSETPROCDEPPOL setProcDEPPol = (PSETPROCDEPPOL)GetProcAddress(GetModuleHandleA(\"Kernel32.dll\"), \"SetProcessDEPPolicy\");\n     if (setProcDEPPol != NULL) setProcDEPPol(PROCESS_DEP_ENABLE);\n-\n-    // Initialize Windows Sockets\n-    WSADATA wsadata;\n-    int ret = WSAStartup(MAKEWORD(2,2), &wsadata);\n-    if (ret != NO_ERROR || LOBYTE(wsadata.wVersion ) != 2 || HIBYTE(wsadata.wVersion) != 2)\n-    {\n-        return InitError(strprintf(\"Error: Winsock library failed to start (WSAStartup returned error %d)\", ret));\n-    }\n #endif\n-#ifndef WIN32\n \n+    if (!SetupNetworking())\n+        return InitError(\"Error: Initializing networking failed\");\n+\n+#ifndef WIN32\n     if (GetBoolArg(\"-sysperms\", false)) {\n #ifdef ENABLE_WALLET\n         if (!GetBoolArg(\"-disablewallet\", false))\n@@ -961,9 +985,8 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     if (fServer)\n     {\n         uiInterface.InitMessage.connect(SetRPCWarmupStatus);\n-        RPCServer::OnStopped(&OnRPCStopped);\n-        RPCServer::OnPreCommand(&OnRPCPreCommand);\n-        StartRPCThreads();\n+        if (!AppInitServers(threadGroup))\n+            return InitError(_(\"Unable to start HTTP server. See debug log for details.\"));\n     }\n \n     int64_t nStart;"
      },
      {
        "sha": "8cd51b0286f5dfe0d33b5b02c179568627a05737",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=9aa90994ee85e549ddbe23a6f03e33d0edcd57b2",
        "patch": "@@ -20,6 +20,8 @@ extern CWallet* pwalletMain;\n \n void StartShutdown();\n bool ShutdownRequested();\n+/** Interrupt threads */\n+void Interrupt(boost::thread_group& threadGroup);\n void Shutdown();\n bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler);\n "
      },
      {
        "sha": "ea7f86d18e53f78a9a3b1e28f04fe645e75e430c",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 8,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=9aa90994ee85e549ddbe23a6f03e33d0edcd57b2",
        "patch": "@@ -266,13 +266,6 @@ void BitcoinCore::initialize()\n     {\n         qDebug() << __func__ << \": Running AppInit2 in thread\";\n         int rv = AppInit2(threadGroup, scheduler);\n-        if(rv)\n-        {\n-            /* Start a dummy RPC thread if no RPC thread is active yet\n-             * to handle timeouts.\n-             */\n-            StartDummyRPCThread();\n-        }\n         Q_EMIT initializeResult(rv);\n     } catch (const std::exception& e) {\n         handleRunawayException(&e);\n@@ -286,7 +279,7 @@ void BitcoinCore::shutdown()\n     try\n     {\n         qDebug() << __func__ << \": Running Shutdown in thread\";\n-        threadGroup.interrupt_all();\n+        Interrupt(threadGroup);\n         threadGroup.join_all();\n         Shutdown();\n         qDebug() << __func__ << \": Shutdown finished\";"
      },
      {
        "sha": "b742a47c9ba323e359604bb300c68e3694ea9d05",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 0,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=9aa90994ee85e549ddbe23a6f03e33d0edcd57b2",
        "patch": "@@ -28,6 +28,7 @@\n #include <QScrollBar>\n #include <QThread>\n #include <QTime>\n+#include <QTimer>\n \n #if QT_VERSION < 0x050000\n #include <QUrl>\n@@ -66,6 +67,40 @@ public Q_SLOTS:\n     void reply(int category, const QString &command);\n };\n \n+/** Class for handling RPC timers\n+ * (used for e.g. re-locking the wallet after a timeout)\n+ */\n+class QtRPCTimerBase: public QObject, public RPCTimerBase\n+{\n+    Q_OBJECT\n+public:\n+    QtRPCTimerBase(boost::function<void(void)>& func, int64_t millis):\n+        func(func)\n+    {\n+        timer.setSingleShot(true);\n+        connect(&timer, SIGNAL(timeout()), this, SLOT(timeout()));\n+        timer.start(millis);\n+    }\n+    ~QtRPCTimerBase() {}\n+private Q_SLOTS:\n+    void timeout() { func(); }\n+private:\n+    QTimer timer;\n+    boost::function<void(void)> func;\n+};\n+\n+class QtRPCTimerInterface: public RPCTimerInterface\n+{\n+public:\n+    ~QtRPCTimerInterface() {}\n+    const char *Name() { return \"Qt\"; }\n+    RPCTimerBase* NewTimer(boost::function<void(void)>& func, int64_t millis)\n+    {\n+        return new QtRPCTimerBase(func, millis);\n+    }\n+};\n+\n+\n #include \"rpcconsole.moc\"\n \n /**\n@@ -232,6 +267,9 @@ RPCConsole::RPCConsole(const PlatformStyle *platformStyle, QWidget *parent) :\n     ui->label_berkeleyDBVersion->hide();\n     ui->berkeleyDBVersion->hide();\n #endif\n+    // Register RPC timer interface\n+    rpcTimerInterface = new QtRPCTimerInterface();\n+    RPCRegisterTimerInterface(rpcTimerInterface);\n \n     startExecutor();\n     setTrafficGraphRange(INITIAL_TRAFFIC_GRAPH_MINS);\n@@ -246,6 +284,8 @@ RPCConsole::~RPCConsole()\n {\n     GUIUtil::saveWindowGeometry(\"nRPCConsoleWindow\", this);\n     Q_EMIT stopExecutor();\n+    RPCUnregisterTimerInterface(rpcTimerInterface);\n+    delete rpcTimerInterface;\n     delete ui;\n }\n "
      },
      {
        "sha": "1409fca525ad9f30e36fe3a608791becbc71b81f",
        "filename": "src/qt/rpcconsole.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/src/qt/rpcconsole.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/src/qt/rpcconsole.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.h?ref=9aa90994ee85e549ddbe23a6f03e33d0edcd57b2",
        "patch": "@@ -14,6 +14,7 @@\n \n class ClientModel;\n class PlatformStyle;\n+class RPCTimerInterface;\n \n namespace Ui {\n     class RPCConsole;\n@@ -108,6 +109,7 @@ public Q_SLOTS:\n     NodeId cachedNodeid;\n     QMenu *contextMenu;\n     const PlatformStyle *platformStyle;\n+    RPCTimerInterface *rpcTimerInterface;\n };\n \n #endif // BITCOIN_QT_RPCCONSOLE_H"
      },
      {
        "sha": "f91de2008c6fc10714904952020569051788be09",
        "filename": "src/qt/test/test_main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/src/qt/test/test_main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/src/qt/test/test_main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/test_main.cpp?ref=9aa90994ee85e549ddbe23a6f03e33d0edcd57b2",
        "patch": "@@ -17,6 +17,8 @@\n #include <QObject>\n #include <QTest>\n \n+#include <openssl/ssl.h>\n+\n #if defined(QT_STATICPLUGIN) && QT_VERSION < 0x050000\n #include <QtPlugin>\n Q_IMPORT_PLUGIN(qcncodecs)\n@@ -36,6 +38,8 @@ int main(int argc, char *argv[])\n     QCoreApplication app(argc, argv);\n     app.setApplicationName(\"Bitcoin-Qt-test\");\n \n+    SSL_library_init();\n+\n     URITests test1;\n     if (QTest::qExec(&test1) != 0)\n         fInvalid = true;"
      },
      {
        "sha": "940526706798faec6c4e935b0012cea1e9089aa2",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 111,
        "deletions": 132,
        "changes": 243,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=9aa90994ee85e549ddbe23a6f03e33d0edcd57b2",
        "patch": "@@ -7,6 +7,7 @@\n #include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n #include \"main.h\"\n+#include \"httpserver.h\"\n #include \"rpcserver.h\"\n #include \"streams.h\"\n #include \"sync.h\"\n@@ -56,29 +57,21 @@ struct CCoin {\n     }\n };\n \n-class RestErr\n-{\n-public:\n-    enum HTTPStatusCode status;\n-    string message;\n-};\n-\n extern void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry);\n extern UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool txDetails = false);\n extern UniValue mempoolInfoToJSON();\n extern UniValue mempoolToJSON(bool fVerbose = false);\n extern void ScriptPubKeyToJSON(const CScript& scriptPubKey, UniValue& out, bool fIncludeHex);\n extern UniValue blockheaderToJSON(const CBlockIndex* blockindex);\n \n-static RestErr RESTERR(enum HTTPStatusCode status, string message)\n+static bool RESTERR(HTTPRequest* req, enum HTTPStatusCode status, string message)\n {\n-    RestErr re;\n-    re.status = status;\n-    re.message = message;\n-    return re;\n+    req->WriteHeader(\"Content-Type\", \"text/plain\");\n+    req->WriteReply(status, message + \"\\r\\n\");\n+    return false;\n }\n \n-static enum RetFormat ParseDataFormat(vector<string>& params, const string strReq)\n+static enum RetFormat ParseDataFormat(vector<string>& params, const string& strReq)\n {\n     boost::split(params, strReq, boost::is_any_of(\".\"));\n     if (params.size() > 1) {\n@@ -115,28 +108,35 @@ static bool ParseHashStr(const string& strReq, uint256& v)\n     return true;\n }\n \n-static bool rest_headers(AcceptedConnection* conn,\n-                         const std::string& strURIPart,\n-                         const std::string& strRequest,\n-                         const std::map<std::string, std::string>& mapHeaders,\n-                         bool fRun)\n+static bool CheckWarmup(HTTPRequest* req)\n+{\n+    std::string statusmessage;\n+    if (RPCIsInWarmup(&statusmessage))\n+         return RESTERR(req, HTTP_SERVICE_UNAVAILABLE, \"Service temporarily unavailable: \" + statusmessage);\n+    return true;\n+}\n+\n+static bool rest_headers(HTTPRequest* req,\n+                         const std::string& strURIPart)\n {\n+    if (!CheckWarmup(req))\n+        return false;\n     vector<string> params;\n     const RetFormat rf = ParseDataFormat(params, strURIPart);\n     vector<string> path;\n     boost::split(path, params[0], boost::is_any_of(\"/\"));\n \n     if (path.size() != 2)\n-        throw RESTERR(HTTP_BAD_REQUEST, \"No header count specified. Use /rest/headers/<count>/<hash>.<ext>.\");\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"No header count specified. Use /rest/headers/<count>/<hash>.<ext>.\");\n \n     long count = strtol(path[0].c_str(), NULL, 10);\n     if (count < 1 || count > 2000)\n-        throw RESTERR(HTTP_BAD_REQUEST, \"Header count out of range: \" + path[0]);\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of range: \" + path[0]);\n \n     string hashStr = path[1];\n     uint256 hash;\n     if (!ParseHashStr(hashStr, hash))\n-        throw RESTERR(HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n \n     std::vector<const CBlockIndex *> headers;\n     headers.reserve(count);\n@@ -160,63 +160,63 @@ static bool rest_headers(AcceptedConnection* conn,\n     switch (rf) {\n     case RF_BINARY: {\n         string binaryHeader = ssHeader.str();\n-        conn->stream() << HTTPReplyHeader(HTTP_OK, fRun, binaryHeader.size(), \"application/octet-stream\") << binaryHeader << std::flush;\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryHeader);\n         return true;\n     }\n \n     case RF_HEX: {\n         string strHex = HexStr(ssHeader.begin(), ssHeader.end()) + \"\\n\";\n-        conn->stream() << HTTPReply(HTTP_OK, strHex, fRun, false, \"text/plain\") << std::flush;\n+        req->WriteHeader(\"Content-Type\", \"text/plain\");\n+        req->WriteReply(HTTP_OK, strHex);\n         return true;\n     }\n-\n     case RF_JSON: {\n         UniValue jsonHeaders(UniValue::VARR);\n         BOOST_FOREACH(const CBlockIndex *pindex, headers) {\n             jsonHeaders.push_back(blockheaderToJSON(pindex));\n         }\n         string strJSON = jsonHeaders.write() + \"\\n\";\n-        conn->stream() << HTTPReply(HTTP_OK, strJSON, fRun) << std::flush;\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strJSON);\n         return true;\n     }\n-\n     default: {\n-        throw RESTERR(HTTP_NOT_FOUND, \"output format not found (available: .bin, .hex)\");\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: .bin, .hex)\");\n     }\n     }\n \n     // not reached\n     return true; // continue to process further HTTP reqs on this cxn\n }\n \n-static bool rest_block(AcceptedConnection* conn,\n+static bool rest_block(HTTPRequest* req,\n                        const std::string& strURIPart,\n-                       const std::string& strRequest,\n-                       const std::map<std::string, std::string>& mapHeaders,\n-                       bool fRun,\n                        bool showTxDetails)\n {\n+    if (!CheckWarmup(req))\n+        return false;\n     vector<string> params;\n     const RetFormat rf = ParseDataFormat(params, strURIPart);\n \n     string hashStr = params[0];\n     uint256 hash;\n     if (!ParseHashStr(hashStr, hash))\n-        throw RESTERR(HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n \n     CBlock block;\n     CBlockIndex* pblockindex = NULL;\n     {\n         LOCK(cs_main);\n         if (mapBlockIndex.count(hash) == 0)\n-            throw RESTERR(HTTP_NOT_FOUND, hashStr + \" not found\");\n+            return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not found\");\n \n         pblockindex = mapBlockIndex[hash];\n         if (fHavePruned && !(pblockindex->nStatus & BLOCK_HAVE_DATA) && pblockindex->nTx > 0)\n-            throw RESTERR(HTTP_NOT_FOUND, hashStr + \" not available (pruned data)\");\n+            return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not available (pruned data)\");\n \n         if (!ReadBlockFromDisk(block, pblockindex))\n-            throw RESTERR(HTTP_NOT_FOUND, hashStr + \" not found\");\n+            return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not found\");\n     }\n \n     CDataStream ssBlock(SER_NETWORK, PROTOCOL_VERSION);\n@@ -225,56 +225,49 @@ static bool rest_block(AcceptedConnection* conn,\n     switch (rf) {\n     case RF_BINARY: {\n         string binaryBlock = ssBlock.str();\n-        conn->stream() << HTTPReplyHeader(HTTP_OK, fRun, binaryBlock.size(), \"application/octet-stream\") << binaryBlock << std::flush;\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryBlock);\n         return true;\n     }\n \n     case RF_HEX: {\n         string strHex = HexStr(ssBlock.begin(), ssBlock.end()) + \"\\n\";\n-        conn->stream() << HTTPReply(HTTP_OK, strHex, fRun, false, \"text/plain\") << std::flush;\n+        req->WriteHeader(\"Content-Type\", \"text/plain\");\n+        req->WriteReply(HTTP_OK, strHex);\n         return true;\n     }\n \n     case RF_JSON: {\n         UniValue objBlock = blockToJSON(block, pblockindex, showTxDetails);\n         string strJSON = objBlock.write() + \"\\n\";\n-        conn->stream() << HTTPReply(HTTP_OK, strJSON, fRun) << std::flush;\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strJSON);\n         return true;\n     }\n \n     default: {\n-        throw RESTERR(HTTP_NOT_FOUND, \"output format not found (available: \" + AvailableDataFormatsString() + \")\");\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: \" + AvailableDataFormatsString() + \")\");\n     }\n     }\n \n     // not reached\n     return true; // continue to process further HTTP reqs on this cxn\n }\n \n-static bool rest_block_extended(AcceptedConnection* conn,\n-                       const std::string& strURIPart,\n-                       const std::string& strRequest,\n-                       const std::map<std::string, std::string>& mapHeaders,\n-                       bool fRun)\n+static bool rest_block_extended(HTTPRequest* req, const std::string& strURIPart)\n {\n-    return rest_block(conn, strURIPart, strRequest, mapHeaders, fRun, true);\n+    return rest_block(req, strURIPart, true);\n }\n \n-static bool rest_block_notxdetails(AcceptedConnection* conn,\n-                       const std::string& strURIPart,\n-                       const std::string& strRequest,\n-                       const std::map<std::string, std::string>& mapHeaders,\n-                       bool fRun)\n+static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPart)\n {\n-    return rest_block(conn, strURIPart, strRequest, mapHeaders, fRun, false);\n+    return rest_block(req, strURIPart, false);\n }\n \n-static bool rest_chaininfo(AcceptedConnection* conn,\n-                           const std::string& strURIPart,\n-                           const std::string& strRequest,\n-                           const std::map<std::string, std::string>& mapHeaders,\n-                           bool fRun)\n+static bool rest_chaininfo(HTTPRequest* req, const std::string& strURIPart)\n {\n+    if (!CheckWarmup(req))\n+        return false;\n     vector<string> params;\n     const RetFormat rf = ParseDataFormat(params, strURIPart);\n \n@@ -283,24 +276,23 @@ static bool rest_chaininfo(AcceptedConnection* conn,\n         UniValue rpcParams(UniValue::VARR);\n         UniValue chainInfoObject = getblockchaininfo(rpcParams, false);\n         string strJSON = chainInfoObject.write() + \"\\n\";\n-        conn->stream() << HTTPReply(HTTP_OK, strJSON, fRun) << std::flush;\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strJSON);\n         return true;\n     }\n     default: {\n-        throw RESTERR(HTTP_NOT_FOUND, \"output format not found (available: json)\");\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: json)\");\n     }\n     }\n \n     // not reached\n     return true; // continue to process further HTTP reqs on this cxn\n }\n \n-static bool rest_mempool_info(AcceptedConnection* conn,\n-                              const std::string& strURIPart,\n-                              const std::string& strRequest,\n-                              const std::map<std::string, std::string>& mapHeaders,\n-                              bool fRun)\n+static bool rest_mempool_info(HTTPRequest* req, const std::string& strURIPart)\n {\n+    if (!CheckWarmup(req))\n+        return false;\n     vector<string> params;\n     const RetFormat rf = ParseDataFormat(params, strURIPart);\n \n@@ -309,24 +301,23 @@ static bool rest_mempool_info(AcceptedConnection* conn,\n         UniValue mempoolInfoObject = mempoolInfoToJSON();\n \n         string strJSON = mempoolInfoObject.write() + \"\\n\";\n-        conn->stream() << HTTPReply(HTTP_OK, strJSON, fRun) << std::flush;\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strJSON);\n         return true;\n     }\n     default: {\n-        throw RESTERR(HTTP_NOT_FOUND, \"output format not found (available: json)\");\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: json)\");\n     }\n     }\n \n     // not reached\n     return true; // continue to process further HTTP reqs on this cxn\n }\n \n-static bool rest_mempool_contents(AcceptedConnection* conn,\n-                                  const std::string& strURIPart,\n-                                  const std::string& strRequest,\n-                                  const std::map<std::string, std::string>& mapHeaders,\n-                                  bool fRun)\n+static bool rest_mempool_contents(HTTPRequest* req, const std::string& strURIPart)\n {\n+    if (!CheckWarmup(req))\n+        return false;\n     vector<string> params;\n     const RetFormat rf = ParseDataFormat(params, strURIPart);\n \n@@ -335,76 +326,76 @@ static bool rest_mempool_contents(AcceptedConnection* conn,\n         UniValue mempoolObject = mempoolToJSON(true);\n \n         string strJSON = mempoolObject.write() + \"\\n\";\n-        conn->stream() << HTTPReply(HTTP_OK, strJSON, fRun) << std::flush;\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strJSON);\n         return true;\n     }\n     default: {\n-        throw RESTERR(HTTP_NOT_FOUND, \"output format not found (available: json)\");\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: json)\");\n     }\n     }\n \n     // not reached\n     return true; // continue to process further HTTP reqs on this cxn\n }\n \n-static bool rest_tx(AcceptedConnection* conn,\n-                    const std::string& strURIPart,\n-                    const std::string& strRequest,\n-                    const std::map<std::string, std::string>& mapHeaders,\n-                    bool fRun)\n+static bool rest_tx(HTTPRequest* req, const std::string& strURIPart)\n {\n+    if (!CheckWarmup(req))\n+        return false;\n     vector<string> params;\n     const RetFormat rf = ParseDataFormat(params, strURIPart);\n \n     string hashStr = params[0];\n     uint256 hash;\n     if (!ParseHashStr(hashStr, hash))\n-        throw RESTERR(HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n \n     CTransaction tx;\n     uint256 hashBlock = uint256();\n     if (!GetTransaction(hash, tx, hashBlock, true))\n-        throw RESTERR(HTTP_NOT_FOUND, hashStr + \" not found\");\n+        return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not found\");\n \n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n     ssTx << tx;\n \n     switch (rf) {\n     case RF_BINARY: {\n         string binaryTx = ssTx.str();\n-        conn->stream() << HTTPReplyHeader(HTTP_OK, fRun, binaryTx.size(), \"application/octet-stream\") << binaryTx << std::flush;\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryTx);\n         return true;\n     }\n \n     case RF_HEX: {\n         string strHex = HexStr(ssTx.begin(), ssTx.end()) + \"\\n\";\n-        conn->stream() << HTTPReply(HTTP_OK, strHex, fRun, false, \"text/plain\") << std::flush;\n+        req->WriteHeader(\"Content-Type\", \"text/plain\");\n+        req->WriteReply(HTTP_OK, strHex);\n         return true;\n     }\n \n     case RF_JSON: {\n         UniValue objTx(UniValue::VOBJ);\n         TxToJSON(tx, hashBlock, objTx);\n         string strJSON = objTx.write() + \"\\n\";\n-        conn->stream() << HTTPReply(HTTP_OK, strJSON, fRun) << std::flush;\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strJSON);\n         return true;\n     }\n \n     default: {\n-        throw RESTERR(HTTP_NOT_FOUND, \"output format not found (available: \" + AvailableDataFormatsString() + \")\");\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: \" + AvailableDataFormatsString() + \")\");\n     }\n     }\n \n     // not reached\n     return true; // continue to process further HTTP reqs on this cxn\n }\n \n-static bool rest_getutxos(AcceptedConnection* conn,\n-                          const std::string& strURIPart,\n-                          const std::string& strRequest,\n-                          const std::map<std::string, std::string>& mapHeaders,\n-                          bool fRun)\n+static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n {\n+    if (!CheckWarmup(req))\n+        return false;\n     vector<string> params;\n     enum RetFormat rf = ParseDataFormat(params, strURIPart);\n \n@@ -416,8 +407,9 @@ static bool rest_getutxos(AcceptedConnection* conn,\n     }\n \n     // throw exception in case of a empty request\n-    if (strRequest.length() == 0 && uriParts.size() == 0)\n-        throw RESTERR(HTTP_INTERNAL_SERVER_ERROR, \"Error: empty request\");\n+    std::string strRequestMutable = req->ReadBody();\n+    if (strRequestMutable.length() == 0 && uriParts.size() == 0)\n+        return RESTERR(req, HTTP_INTERNAL_SERVER_ERROR, \"Error: empty request\");\n \n     bool fInputParsed = false;\n     bool fCheckMemPool = false;\n@@ -441,7 +433,7 @@ static bool rest_getutxos(AcceptedConnection* conn,\n             std::string strOutput = uriParts[i].substr(uriParts[i].find(\"-\")+1);\n \n             if (!ParseInt32(strOutput, &nOutput) || !IsHex(strTxid))\n-                throw RESTERR(HTTP_INTERNAL_SERVER_ERROR, \"Parse error\");\n+                return RESTERR(req, HTTP_INTERNAL_SERVER_ERROR, \"Parse error\");\n \n             txid.SetHex(strTxid);\n             vOutPoints.push_back(COutPoint(txid, (uint32_t)nOutput));\n@@ -450,15 +442,13 @@ static bool rest_getutxos(AcceptedConnection* conn,\n         if (vOutPoints.size() > 0)\n             fInputParsed = true;\n         else\n-            throw RESTERR(HTTP_INTERNAL_SERVER_ERROR, \"Error: empty request\");\n+            return RESTERR(req, HTTP_INTERNAL_SERVER_ERROR, \"Error: empty request\");\n     }\n \n-    string strRequestMutable = strRequest; //convert const string to string for allowing hex to bin converting\n-\n     switch (rf) {\n     case RF_HEX: {\n         // convert hex to bin, continue then with bin part\n-        std::vector<unsigned char> strRequestV = ParseHex(strRequest);\n+        std::vector<unsigned char> strRequestV = ParseHex(strRequestMutable);\n         strRequestMutable.assign(strRequestV.begin(), strRequestV.end());\n     }\n \n@@ -468,7 +458,7 @@ static bool rest_getutxos(AcceptedConnection* conn,\n             if (strRequestMutable.size() > 0)\n             {\n                 if (fInputParsed) //don't allow sending input over URI and HTTP RAW DATA\n-                    throw RESTERR(HTTP_INTERNAL_SERVER_ERROR, \"Combination of URI scheme inputs and raw post data is not allowed\");\n+                    return RESTERR(req, HTTP_INTERNAL_SERVER_ERROR, \"Combination of URI scheme inputs and raw post data is not allowed\");\n \n                 CDataStream oss(SER_NETWORK, PROTOCOL_VERSION);\n                 oss << strRequestMutable;\n@@ -477,24 +467,24 @@ static bool rest_getutxos(AcceptedConnection* conn,\n             }\n         } catch (const std::ios_base::failure& e) {\n             // abort in case of unreadable binary data\n-            throw RESTERR(HTTP_INTERNAL_SERVER_ERROR, \"Parse error\");\n+            return RESTERR(req, HTTP_INTERNAL_SERVER_ERROR, \"Parse error\");\n         }\n         break;\n     }\n \n     case RF_JSON: {\n         if (!fInputParsed)\n-            throw RESTERR(HTTP_INTERNAL_SERVER_ERROR, \"Error: empty request\");\n+            return RESTERR(req, HTTP_INTERNAL_SERVER_ERROR, \"Error: empty request\");\n         break;\n     }\n     default: {\n-        throw RESTERR(HTTP_NOT_FOUND, \"output format not found (available: \" + AvailableDataFormatsString() + \")\");\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: \" + AvailableDataFormatsString() + \")\");\n     }\n     }\n \n     // limit max outpoints\n     if (vOutPoints.size() > MAX_GETUTXOS_OUTPOINTS)\n-        throw RESTERR(HTTP_INTERNAL_SERVER_ERROR, strprintf(\"Error: max outpoints exceeded (max: %d, tried: %d)\", MAX_GETUTXOS_OUTPOINTS, vOutPoints.size()));\n+        return RESTERR(req, HTTP_INTERNAL_SERVER_ERROR, strprintf(\"Error: max outpoints exceeded (max: %d, tried: %d)\", MAX_GETUTXOS_OUTPOINTS, vOutPoints.size()));\n \n     // check spentness and form a bitmap (as well as a JSON capable human-readble string representation)\n     vector<unsigned char> bitmap;\n@@ -544,7 +534,8 @@ static bool rest_getutxos(AcceptedConnection* conn,\n         ssGetUTXOResponse << chainActive.Height() << chainActive.Tip()->GetBlockHash() << bitmap << outs;\n         string ssGetUTXOResponseString = ssGetUTXOResponse.str();\n \n-        conn->stream() << HTTPReplyHeader(HTTP_OK, fRun, ssGetUTXOResponseString.size(), \"application/octet-stream\") << ssGetUTXOResponseString << std::flush;\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, ssGetUTXOResponseString);\n         return true;\n     }\n \n@@ -553,7 +544,8 @@ static bool rest_getutxos(AcceptedConnection* conn,\n         ssGetUTXOResponse << chainActive.Height() << chainActive.Tip()->GetBlockHash() << bitmap << outs;\n         string strHex = HexStr(ssGetUTXOResponse.begin(), ssGetUTXOResponse.end()) + \"\\n\";\n \n-        conn->stream() << HTTPReply(HTTP_OK, strHex, fRun, false, \"text/plain\") << std::flush;\n+        req->WriteHeader(\"Content-Type\", \"text/plain\");\n+        req->WriteReply(HTTP_OK, strHex);\n         return true;\n     }\n \n@@ -583,11 +575,12 @@ static bool rest_getutxos(AcceptedConnection* conn,\n \n         // return json string\n         string strJSON = objGetUTXOResponse.write() + \"\\n\";\n-        conn->stream() << HTTPReply(HTTP_OK, strJSON, fRun) << std::flush;\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strJSON);\n         return true;\n     }\n     default: {\n-        throw RESTERR(HTTP_NOT_FOUND, \"output format not found (available: \" + AvailableDataFormatsString() + \")\");\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: \" + AvailableDataFormatsString() + \")\");\n     }\n     }\n \n@@ -597,11 +590,7 @@ static bool rest_getutxos(AcceptedConnection* conn,\n \n static const struct {\n     const char* prefix;\n-    bool (*handler)(AcceptedConnection* conn,\n-                    const std::string& strURIPart,\n-                    const std::string& strRequest,\n-                    const std::map<std::string, std::string>& mapHeaders,\n-                    bool fRun);\n+    bool (*handler)(HTTPRequest* req, const std::string& strReq);\n } uri_prefixes[] = {\n       {\"/rest/tx/\", rest_tx},\n       {\"/rest/block/notxdetails/\", rest_block_notxdetails},\n@@ -613,29 +602,19 @@ static const struct {\n       {\"/rest/getutxos\", rest_getutxos},\n };\n \n-bool HTTPReq_REST(AcceptedConnection* conn,\n-                  const std::string& strURI,\n-                  const string& strRequest,\n-                  const std::map<std::string, std::string>& mapHeaders,\n-                  bool fRun)\n+bool StartREST()\n {\n-    try {\n-        std::string statusmessage;\n-        if (RPCIsInWarmup(&statusmessage))\n-            throw RESTERR(HTTP_SERVICE_UNAVAILABLE, \"Service temporarily unavailable: \" + statusmessage);\n-\n-        for (unsigned int i = 0; i < ARRAYLEN(uri_prefixes); i++) {\n-            unsigned int plen = strlen(uri_prefixes[i].prefix);\n-            if (strURI.substr(0, plen) == uri_prefixes[i].prefix) {\n-                string strURIPart = strURI.substr(plen);\n-                return uri_prefixes[i].handler(conn, strURIPart, strRequest, mapHeaders, fRun);\n-            }\n-        }\n-    } catch (const RestErr& re) {\n-        conn->stream() << HTTPReply(re.status, re.message + \"\\r\\n\", false, false, \"text/plain\") << std::flush;\n-        return false;\n-    }\n+    for (unsigned int i = 0; i < ARRAYLEN(uri_prefixes); i++)\n+        RegisterHTTPHandler(uri_prefixes[i].prefix, false, uri_prefixes[i].handler);\n+    return true;\n+}\n \n-    conn->stream() << HTTPError(HTTP_NOT_FOUND, false) << std::flush;\n-    return false;\n+void InterruptREST()\n+{\n+}\n+\n+void StopREST()\n+{\n+    for (unsigned int i = 0; i < ARRAYLEN(uri_prefixes); i++)\n+        UnregisterHTTPHandler(uri_prefixes[i].prefix, false);\n }"
      },
      {
        "sha": "d83cd87f9400a23c9e23fc0c8da13a38aa0f49b2",
        "filename": "src/rpcprotocol.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 229,
        "changes": 229,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/src/rpcprotocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/src/rpcprotocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcprotocol.cpp?ref=9aa90994ee85e549ddbe23a6f03e33d0edcd57b2",
        "patch": "@@ -5,7 +5,6 @@\n \n #include \"rpcprotocol.h\"\n \n-#include \"clientversion.h\"\n #include \"random.h\"\n #include \"tinyformat.h\"\n #include \"util.h\"\n@@ -16,236 +15,8 @@\n #include <stdint.h>\n #include <fstream>\n \n-#include <boost/algorithm/string.hpp>\n-#include <boost/asio.hpp>\n-#include <boost/asio/ssl.hpp>\n-#include <boost/bind.hpp>\n-#include <boost/filesystem.hpp>\n-#include <boost/foreach.hpp>\n-#include <boost/iostreams/concepts.hpp>\n-#include <boost/iostreams/stream.hpp>\n-#include <boost/shared_ptr.hpp>\n-\n-#include \"univalue/univalue.h\"\n-\n using namespace std;\n \n-//! Number of bytes to allocate and read at most at once in post data\n-const size_t POST_READ_SIZE = 256 * 1024;\n-\n-/**\n- * HTTP protocol\n- * \n- * This ain't Apache.  We're just using HTTP header for the length field\n- * and to be compatible with other JSON-RPC implementations.\n- */\n-\n-string HTTPPost(const string& strMsg, const map<string,string>& mapRequestHeaders)\n-{\n-    ostringstream s;\n-    s << \"POST / HTTP/1.1\\r\\n\"\n-      << \"User-Agent: bitcoin-json-rpc/\" << FormatFullVersion() << \"\\r\\n\"\n-      << \"Host: 127.0.0.1\\r\\n\"\n-      << \"Content-Type: application/json\\r\\n\"\n-      << \"Content-Length: \" << strMsg.size() << \"\\r\\n\"\n-      << \"Connection: close\\r\\n\"\n-      << \"Accept: application/json\\r\\n\";\n-    BOOST_FOREACH(const PAIRTYPE(string, string)& item, mapRequestHeaders)\n-        s << item.first << \": \" << item.second << \"\\r\\n\";\n-    s << \"\\r\\n\" << strMsg;\n-\n-    return s.str();\n-}\n-\n-static string rfc1123Time()\n-{\n-    return DateTimeStrFormat(\"%a, %d %b %Y %H:%M:%S +0000\", GetTime());\n-}\n-\n-static const char *httpStatusDescription(int nStatus)\n-{\n-    switch (nStatus) {\n-        case HTTP_OK: return \"OK\";\n-        case HTTP_BAD_REQUEST: return \"Bad Request\";\n-        case HTTP_FORBIDDEN: return \"Forbidden\";\n-        case HTTP_NOT_FOUND: return \"Not Found\";\n-        case HTTP_INTERNAL_SERVER_ERROR: return \"Internal Server Error\";\n-        default: return \"\";\n-    }\n-}\n-\n-string HTTPError(int nStatus, bool keepalive, bool headersOnly)\n-{\n-    if (nStatus == HTTP_UNAUTHORIZED)\n-        return strprintf(\"HTTP/1.0 401 Authorization Required\\r\\n\"\n-            \"Date: %s\\r\\n\"\n-            \"Server: bitcoin-json-rpc/%s\\r\\n\"\n-            \"WWW-Authenticate: Basic realm=\\\"jsonrpc\\\"\\r\\n\"\n-            \"Content-Type: text/html\\r\\n\"\n-            \"Content-Length: 296\\r\\n\"\n-            \"\\r\\n\"\n-            \"<!DOCTYPE HTML PUBLIC \\\"-//W3C//DTD HTML 4.01 Transitional//EN\\\"\\r\\n\"\n-            \"\\\"http://www.w3.org/TR/1999/REC-html401-19991224/loose.dtd\\\">\\r\\n\"\n-            \"<HTML>\\r\\n\"\n-            \"<HEAD>\\r\\n\"\n-            \"<TITLE>Error</TITLE>\\r\\n\"\n-            \"<META HTTP-EQUIV='Content-Type' CONTENT='text/html; charset=ISO-8859-1'>\\r\\n\"\n-            \"</HEAD>\\r\\n\"\n-            \"<BODY><H1>401 Unauthorized.</H1></BODY>\\r\\n\"\n-            \"</HTML>\\r\\n\", rfc1123Time(), FormatFullVersion());\n-\n-    return HTTPReply(nStatus, httpStatusDescription(nStatus), keepalive,\n-                     headersOnly, \"text/plain\");\n-}\n-\n-string HTTPReplyHeader(int nStatus, bool keepalive, size_t contentLength, const char *contentType)\n-{\n-    return strprintf(\n-            \"HTTP/1.1 %d %s\\r\\n\"\n-            \"Date: %s\\r\\n\"\n-            \"Connection: %s\\r\\n\"\n-            \"Content-Length: %u\\r\\n\"\n-            \"Content-Type: %s\\r\\n\"\n-            \"Server: bitcoin-json-rpc/%s\\r\\n\"\n-            \"\\r\\n\",\n-        nStatus,\n-        httpStatusDescription(nStatus),\n-        rfc1123Time(),\n-        keepalive ? \"keep-alive\" : \"close\",\n-        contentLength,\n-        contentType,\n-        FormatFullVersion());\n-}\n-\n-string HTTPReply(int nStatus, const string& strMsg, bool keepalive,\n-                 bool headersOnly, const char *contentType)\n-{\n-    if (headersOnly)\n-    {\n-        return HTTPReplyHeader(nStatus, keepalive, 0, contentType);\n-    } else {\n-        return HTTPReplyHeader(nStatus, keepalive, strMsg.size(), contentType) + strMsg;\n-    }\n-}\n-\n-bool ReadHTTPRequestLine(std::basic_istream<char>& stream, int &proto,\n-                         string& http_method, string& http_uri)\n-{\n-    string str;\n-    getline(stream, str);\n-\n-    // HTTP request line is space-delimited\n-    vector<string> vWords;\n-    boost::split(vWords, str, boost::is_any_of(\" \"));\n-    if (vWords.size() < 2)\n-        return false;\n-\n-    // HTTP methods permitted: GET, POST\n-    http_method = vWords[0];\n-    if (http_method != \"GET\" && http_method != \"POST\")\n-        return false;\n-\n-    // HTTP URI must be an absolute path, relative to current host\n-    http_uri = vWords[1];\n-    if (http_uri.size() == 0 || http_uri[0] != '/')\n-        return false;\n-\n-    // parse proto, if present\n-    string strProto = \"\";\n-    if (vWords.size() > 2)\n-        strProto = vWords[2];\n-\n-    proto = 0;\n-    const char *ver = strstr(strProto.c_str(), \"HTTP/1.\");\n-    if (ver != NULL)\n-        proto = atoi(ver+7);\n-\n-    return true;\n-}\n-\n-int ReadHTTPStatus(std::basic_istream<char>& stream, int &proto)\n-{\n-    string str;\n-    getline(stream, str);\n-    vector<string> vWords;\n-    boost::split(vWords, str, boost::is_any_of(\" \"));\n-    if (vWords.size() < 2)\n-        return HTTP_INTERNAL_SERVER_ERROR;\n-    proto = 0;\n-    const char *ver = strstr(str.c_str(), \"HTTP/1.\");\n-    if (ver != NULL)\n-        proto = atoi(ver+7);\n-    return atoi(vWords[1].c_str());\n-}\n-\n-int ReadHTTPHeaders(std::basic_istream<char>& stream, map<string, string>& mapHeadersRet)\n-{\n-    int nLen = 0;\n-    while (true)\n-    {\n-        string str;\n-        std::getline(stream, str);\n-        if (str.empty() || str == \"\\r\")\n-            break;\n-        string::size_type nColon = str.find(\":\");\n-        if (nColon != string::npos)\n-        {\n-            string strHeader = str.substr(0, nColon);\n-            boost::trim(strHeader);\n-            boost::to_lower(strHeader);\n-            string strValue = str.substr(nColon+1);\n-            boost::trim(strValue);\n-            mapHeadersRet[strHeader] = strValue;\n-            if (strHeader == \"content-length\")\n-                nLen = atoi(strValue.c_str());\n-        }\n-    }\n-    return nLen;\n-}\n-\n-\n-int ReadHTTPMessage(std::basic_istream<char>& stream, map<string,\n-                    string>& mapHeadersRet, string& strMessageRet,\n-                    int nProto, size_t max_size)\n-{\n-    mapHeadersRet.clear();\n-    strMessageRet = \"\";\n-\n-    // Read header\n-    int nLen = ReadHTTPHeaders(stream, mapHeadersRet);\n-    if (nLen < 0 || (size_t)nLen > max_size)\n-        return HTTP_INTERNAL_SERVER_ERROR;\n-\n-    // Read message\n-    if (nLen > 0)\n-    {\n-        vector<char> vch;\n-        size_t ptr = 0;\n-        while (ptr < (size_t)nLen)\n-        {\n-            size_t bytes_to_read = std::min((size_t)nLen - ptr, POST_READ_SIZE);\n-            vch.resize(ptr + bytes_to_read);\n-            stream.read(&vch[ptr], bytes_to_read);\n-            if (!stream) // Connection lost while reading\n-                return HTTP_INTERNAL_SERVER_ERROR;\n-            ptr += bytes_to_read;\n-        }\n-        strMessageRet = string(vch.begin(), vch.end());\n-    }\n-\n-    string sConHdr = mapHeadersRet[\"connection\"];\n-\n-    if ((sConHdr != \"close\") && (sConHdr != \"keep-alive\"))\n-    {\n-        if (nProto >= 1)\n-            mapHeadersRet[\"connection\"] = \"keep-alive\";\n-        else\n-            mapHeadersRet[\"connection\"] = \"close\";\n-    }\n-\n-    return HTTP_OK;\n-}\n-\n /**\n  * JSON-RPC protocol.  Bitcoin speaks version 1.0 for maximum compatibility,\n  * but uses JSON-RPC 1.1/2.0 standards for parts of the 1.0 standard that were"
      },
      {
        "sha": "5381e4bcfd258e4e7e9d4803f8f19909ca2eef0e",
        "filename": "src/rpcprotocol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 86,
        "changes": 87,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/src/rpcprotocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/src/rpcprotocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcprotocol.h?ref=9aa90994ee85e549ddbe23a6f03e33d0edcd57b2",
        "patch": "@@ -10,10 +10,6 @@\n #include <map>\n #include <stdint.h>\n #include <string>\n-#include <boost/iostreams/concepts.hpp>\n-#include <boost/iostreams/stream.hpp>\n-#include <boost/asio.hpp>\n-#include <boost/asio/ssl.hpp>\n #include <boost/filesystem.hpp>\n \n #include \"univalue/univalue.h\"\n@@ -26,6 +22,7 @@ enum HTTPStatusCode\n     HTTP_UNAUTHORIZED          = 401,\n     HTTP_FORBIDDEN             = 403,\n     HTTP_NOT_FOUND             = 404,\n+    HTTP_BAD_METHOD            = 405,\n     HTTP_INTERNAL_SERVER_ERROR = 500,\n     HTTP_SERVICE_UNAVAILABLE   = 503,\n };\n@@ -79,88 +76,6 @@ enum RPCErrorCode\n     RPC_WALLET_ALREADY_UNLOCKED     = -17, //! Wallet is already unlocked\n };\n \n-/**\n- * IOStream device that speaks SSL but can also speak non-SSL\n- */\n-template <typename Protocol>\n-class SSLIOStreamDevice : public boost::iostreams::device<boost::iostreams::bidirectional> {\n-public:\n-    SSLIOStreamDevice(boost::asio::ssl::stream<typename Protocol::socket> &streamIn, bool fUseSSLIn) : stream(streamIn)\n-    {\n-        fUseSSL = fUseSSLIn;\n-        fNeedHandshake = fUseSSLIn;\n-    }\n-\n-    void handshake(boost::asio::ssl::stream_base::handshake_type role)\n-    {\n-        if (!fNeedHandshake) return;\n-        fNeedHandshake = false;\n-        stream.handshake(role);\n-    }\n-    std::streamsize read(char* s, std::streamsize n)\n-    {\n-        handshake(boost::asio::ssl::stream_base::server); // HTTPS servers read first\n-        if (fUseSSL) return stream.read_some(boost::asio::buffer(s, n));\n-        return stream.next_layer().read_some(boost::asio::buffer(s, n));\n-    }\n-    std::streamsize write(const char* s, std::streamsize n)\n-    {\n-        handshake(boost::asio::ssl::stream_base::client); // HTTPS clients write first\n-        if (fUseSSL) return boost::asio::write(stream, boost::asio::buffer(s, n));\n-        return boost::asio::write(stream.next_layer(), boost::asio::buffer(s, n));\n-    }\n-    bool connect(const std::string& server, const std::string& port)\n-    {\n-        using namespace boost::asio::ip;\n-        tcp::resolver resolver(stream.get_io_service());\n-        tcp::resolver::iterator endpoint_iterator;\n-#if BOOST_VERSION >= 104300\n-        try {\n-#endif\n-            // The default query (flags address_configured) tries IPv6 if\n-            // non-localhost IPv6 configured, and IPv4 if non-localhost IPv4\n-            // configured.\n-            tcp::resolver::query query(server.c_str(), port.c_str());\n-            endpoint_iterator = resolver.resolve(query);\n-#if BOOST_VERSION >= 104300\n-        } catch (const boost::system::system_error&) {\n-            // If we at first don't succeed, try blanket lookup (IPv4+IPv6 independent of configured interfaces)\n-            tcp::resolver::query query(server.c_str(), port.c_str(), resolver_query_base::flags());\n-            endpoint_iterator = resolver.resolve(query);\n-        }\n-#endif\n-        boost::system::error_code error = boost::asio::error::host_not_found;\n-        tcp::resolver::iterator end;\n-        while (error && endpoint_iterator != end)\n-        {\n-            stream.lowest_layer().close();\n-            stream.lowest_layer().connect(*endpoint_iterator++, error);\n-        }\n-        if (error)\n-            return false;\n-        return true;\n-    }\n-\n-private:\n-    bool fNeedHandshake;\n-    bool fUseSSL;\n-    boost::asio::ssl::stream<typename Protocol::socket>& stream;\n-};\n-\n-std::string HTTPPost(const std::string& strMsg, const std::map<std::string,std::string>& mapRequestHeaders);\n-std::string HTTPError(int nStatus, bool keepalive,\n-                      bool headerOnly = false);\n-std::string HTTPReplyHeader(int nStatus, bool keepalive, size_t contentLength,\n-                      const char *contentType = \"application/json\");\n-std::string HTTPReply(int nStatus, const std::string& strMsg, bool keepalive,\n-                      bool headerOnly = false,\n-                      const char *contentType = \"application/json\");\n-bool ReadHTTPRequestLine(std::basic_istream<char>& stream, int &proto,\n-                         std::string& http_method, std::string& http_uri);\n-int ReadHTTPStatus(std::basic_istream<char>& stream, int &proto);\n-int ReadHTTPHeaders(std::basic_istream<char>& stream, std::map<std::string, std::string>& mapHeadersRet);\n-int ReadHTTPMessage(std::basic_istream<char>& stream, std::map<std::string, std::string>& mapHeadersRet,\n-                    std::string& strMessageRet, int nProto, size_t max_size);\n std::string JSONRPCRequest(const std::string& strMethod, const UniValue& params, const UniValue& id);\n UniValue JSONRPCReplyObj(const UniValue& result, const UniValue& error, const UniValue& id);\n std::string JSONRPCReply(const UniValue& result, const UniValue& error, const UniValue& id);"
      },
      {
        "sha": "b831d3d3b2bd6fbfc85827e2ca064495d04ae4a8",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 513,
        "changes": 554,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=9aa90994ee85e549ddbe23a6f03e33d0edcd57b2",
        "patch": "@@ -12,13 +12,9 @@\n #include \"ui_interface.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n-#ifdef ENABLE_WALLET\n-#include \"wallet/wallet.h\"\n-#endif\n \n-#include <boost/algorithm/string.hpp>\n-#include <boost/asio.hpp>\n-#include <boost/asio/ssl.hpp>\n+#include \"univalue/univalue.h\"\n+\n #include <boost/bind.hpp>\n #include <boost/filesystem.hpp>\n #include <boost/foreach.hpp>\n@@ -27,28 +23,20 @@\n #include <boost/shared_ptr.hpp>\n #include <boost/signals2/signal.hpp>\n #include <boost/thread.hpp>\n+#include <boost/algorithm/string/case_conv.hpp> // for to_upper()\n \n-#include \"univalue/univalue.h\"\n-\n-using namespace boost::asio;\n using namespace RPCServer;\n using namespace std;\n \n-static std::string strRPCUserColonPass;\n-\n static bool fRPCRunning = false;\n static bool fRPCInWarmup = true;\n static std::string rpcWarmupStatus(\"RPC server started\");\n static CCriticalSection cs_rpcWarmup;\n-\n-//! These are created by StartRPCThreads, destroyed in StopRPCThreads\n-static boost::asio::io_service* rpc_io_service = NULL;\n-static map<string, boost::shared_ptr<deadline_timer> > deadlineTimers;\n-static ssl::context* rpc_ssl_context = NULL;\n-static boost::thread_group* rpc_worker_group = NULL;\n-static boost::asio::io_service::work *rpc_dummy_work = NULL;\n-static std::vector<CSubNet> rpc_allow_subnets; //!< List of subnets to allow RPC connections from\n-static std::vector< boost::shared_ptr<ip::tcp::acceptor> > rpc_acceptors;\n+/* Timer-creating functions */\n+static std::vector<RPCTimerInterface*> timerInterfaces;\n+/* Map of name to timer.\n+ * @note Can be changed to std::unique_ptr when C++11 */\n+static std::map<std::string, boost::shared_ptr<RPCTimerBase> > deadlineTimers;\n \n static struct CRPCSignals\n {\n@@ -169,7 +157,6 @@ vector<unsigned char> ParseHexO(const UniValue& o, string strKey)\n     return ParseHexV(find_value(o, strKey), strKey);\n }\n \n-\n /**\n  * Note: This interface may still be subject to change.\n  */\n@@ -261,8 +248,6 @@ UniValue stop(const UniValue& params, bool fHelp)\n     return \"Bitcoin server stopping\";\n }\n \n-\n-\n /**\n  * Call Table\n  */\n@@ -399,381 +384,34 @@ CRPCTable::CRPCTable()\n     }\n }\n \n-const CRPCCommand *CRPCTable::operator[](const std::string& name) const\n+const CRPCCommand *CRPCTable::operator[](const std::string &name) const\n {\n     map<string, const CRPCCommand*>::const_iterator it = mapCommands.find(name);\n     if (it == mapCommands.end())\n         return NULL;\n     return (*it).second;\n }\n \n-\n-bool HTTPAuthorized(map<string, string>& mapHeaders)\n-{\n-    string strAuth = mapHeaders[\"authorization\"];\n-    if (strAuth.substr(0,6) != \"Basic \")\n-        return false;\n-    string strUserPass64 = strAuth.substr(6); boost::trim(strUserPass64);\n-    string strUserPass = DecodeBase64(strUserPass64);\n-    return TimingResistantEqual(strUserPass, strRPCUserColonPass);\n-}\n-\n-void ErrorReply(std::ostream& stream, const UniValue& objError, const UniValue& id)\n-{\n-    // Send error reply from json-rpc error object\n-    int nStatus = HTTP_INTERNAL_SERVER_ERROR;\n-    int code = find_value(objError, \"code\").get_int();\n-    if (code == RPC_INVALID_REQUEST) nStatus = HTTP_BAD_REQUEST;\n-    else if (code == RPC_METHOD_NOT_FOUND) nStatus = HTTP_NOT_FOUND;\n-    string strReply = JSONRPCReply(NullUniValue, objError, id);\n-    stream << HTTPReply(nStatus, strReply, false) << std::flush;\n-}\n-\n-CNetAddr BoostAsioToCNetAddr(boost::asio::ip::address address)\n-{\n-    CNetAddr netaddr;\n-    // Make sure that IPv4-compatible and IPv4-mapped IPv6 addresses are treated as IPv4 addresses\n-    if (address.is_v6()\n-     && (address.to_v6().is_v4_compatible()\n-      || address.to_v6().is_v4_mapped()))\n-        address = address.to_v6().to_v4();\n-\n-    if(address.is_v4())\n-    {\n-        boost::asio::ip::address_v4::bytes_type bytes = address.to_v4().to_bytes();\n-        netaddr.SetRaw(NET_IPV4, &bytes[0]);\n-    }\n-    else\n-    {\n-        boost::asio::ip::address_v6::bytes_type bytes = address.to_v6().to_bytes();\n-        netaddr.SetRaw(NET_IPV6, &bytes[0]);\n-    }\n-    return netaddr;\n-}\n-\n-bool ClientAllowed(const boost::asio::ip::address& address)\n-{\n-    CNetAddr netaddr = BoostAsioToCNetAddr(address);\n-    BOOST_FOREACH(const CSubNet &subnet, rpc_allow_subnets)\n-        if (subnet.Match(netaddr))\n-            return true;\n-    return false;\n-}\n-\n-template <typename Protocol>\n-class AcceptedConnectionImpl : public AcceptedConnection\n-{\n-public:\n-    AcceptedConnectionImpl(\n-            boost::asio::io_service& io_service,\n-            ssl::context &context,\n-            bool fUseSSL) :\n-        sslStream(io_service, context),\n-        _d(sslStream, fUseSSL),\n-        _stream(_d)\n-    {\n-    }\n-\n-    virtual std::iostream& stream()\n-    {\n-        return _stream;\n-    }\n-\n-    virtual std::string peer_address_to_string() const\n-    {\n-        return peer.address().to_string();\n-    }\n-\n-    virtual void close()\n-    {\n-        _stream.close();\n-    }\n-\n-    typename Protocol::endpoint peer;\n-    boost::asio::ssl::stream<typename Protocol::socket> sslStream;\n-\n-private:\n-    SSLIOStreamDevice<Protocol> _d;\n-    boost::iostreams::stream< SSLIOStreamDevice<Protocol> > _stream;\n-};\n-\n-void ServiceConnection(AcceptedConnection *conn);\n-\n-//! Forward declaration required for RPCListen\n-template <typename Protocol, typename SocketAcceptorService>\n-static void RPCAcceptHandler(boost::shared_ptr< basic_socket_acceptor<Protocol, SocketAcceptorService> > acceptor,\n-                             ssl::context& context,\n-                             bool fUseSSL,\n-                             boost::shared_ptr< AcceptedConnection > conn,\n-                             const boost::system::error_code& error);\n-\n-/**\n- * Sets up I/O resources to accept and handle a new connection.\n- */\n-template <typename Protocol, typename SocketAcceptorService>\n-static void RPCListen(boost::shared_ptr< basic_socket_acceptor<Protocol, SocketAcceptorService> > acceptor,\n-                   ssl::context& context,\n-                   const bool fUseSSL)\n-{\n-    // Accept connection\n-    boost::shared_ptr< AcceptedConnectionImpl<Protocol> > conn(new AcceptedConnectionImpl<Protocol>(acceptor->get_io_service(), context, fUseSSL));\n-\n-    acceptor->async_accept(\n-            conn->sslStream.lowest_layer(),\n-            conn->peer,\n-            boost::bind(&RPCAcceptHandler<Protocol, SocketAcceptorService>,\n-                acceptor,\n-                boost::ref(context),\n-                fUseSSL,\n-                conn,\n-                _1));\n-}\n-\n-\n-/**\n- * Accept and handle incoming connection.\n- */\n-template <typename Protocol, typename SocketAcceptorService>\n-static void RPCAcceptHandler(boost::shared_ptr< basic_socket_acceptor<Protocol, SocketAcceptorService> > acceptor,\n-                             ssl::context& context,\n-                             const bool fUseSSL,\n-                             boost::shared_ptr< AcceptedConnection > conn,\n-                             const boost::system::error_code& error)\n+bool StartRPC()\n {\n-    // Immediately start accepting new connections, except when we're cancelled or our socket is closed.\n-    if (error != boost::asio::error::operation_aborted && acceptor->is_open())\n-        RPCListen(acceptor, context, fUseSSL);\n-\n-    AcceptedConnectionImpl<ip::tcp>* tcp_conn = dynamic_cast< AcceptedConnectionImpl<ip::tcp>* >(conn.get());\n-\n-    if (error)\n-    {\n-        // TODO: Actually handle errors\n-        LogPrintf(\"%s: Error: %s\\n\", __func__, error.message());\n-    }\n-    // Restrict callers by IP.  It is important to\n-    // do this before starting client thread, to filter out\n-    // certain DoS and misbehaving clients.\n-    else if (tcp_conn && !ClientAllowed(tcp_conn->peer.address()))\n-    {\n-        // Only send a 403 if we're not using SSL to prevent a DoS during the SSL handshake.\n-        if (!fUseSSL)\n-            conn->stream() << HTTPError(HTTP_FORBIDDEN, false) << std::flush;\n-        conn->close();\n-    }\n-    else {\n-        ServiceConnection(conn.get());\n-        conn->close();\n-    }\n-}\n-\n-static ip::tcp::endpoint ParseEndpoint(const std::string &strEndpoint, int defaultPort)\n-{\n-    std::string addr;\n-    int port = defaultPort;\n-    SplitHostPort(strEndpoint, port, addr);\n-    return ip::tcp::endpoint(boost::asio::ip::address::from_string(addr), port);\n-}\n-\n-void StartRPCThreads()\n-{\n-    rpc_allow_subnets.clear();\n-    rpc_allow_subnets.push_back(CSubNet(\"127.0.0.0/8\")); // always allow IPv4 local subnet\n-    rpc_allow_subnets.push_back(CSubNet(\"::1\")); // always allow IPv6 localhost\n-    if (mapMultiArgs.count(\"-rpcallowip\"))\n-    {\n-        const vector<string>& vAllow = mapMultiArgs[\"-rpcallowip\"];\n-        BOOST_FOREACH(string strAllow, vAllow)\n-        {\n-            CSubNet subnet(strAllow);\n-            if(!subnet.IsValid())\n-            {\n-                uiInterface.ThreadSafeMessageBox(\n-                    strprintf(\"Invalid -rpcallowip subnet specification: %s. Valid are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24).\", strAllow),\n-                    \"\", CClientUIInterface::MSG_ERROR);\n-                StartShutdown();\n-                return;\n-            }\n-            rpc_allow_subnets.push_back(subnet);\n-        }\n-    }\n-    std::string strAllowed;\n-    BOOST_FOREACH(const CSubNet &subnet, rpc_allow_subnets)\n-        strAllowed += subnet.ToString() + \" \";\n-    LogPrint(\"rpc\", \"Allowing RPC connections from: %s\\n\", strAllowed);\n-\n-    if (mapArgs[\"-rpcpassword\"] == \"\")\n-    {\n-        LogPrintf(\"No rpcpassword set - using random cookie authentication\\n\");\n-        if (!GenerateAuthCookie(&strRPCUserColonPass)) {\n-            uiInterface.ThreadSafeMessageBox(\n-                _(\"Error: A fatal internal error occurred, see debug.log for details\"), // Same message as AbortNode\n-                \"\", CClientUIInterface::MSG_ERROR);\n-            StartShutdown();\n-            return;\n-        }\n-    } else {\n-        strRPCUserColonPass = mapArgs[\"-rpcuser\"] + \":\" + mapArgs[\"-rpcpassword\"];\n-    }\n-\n-    assert(rpc_io_service == NULL);\n-    rpc_io_service = new boost::asio::io_service();\n-    rpc_ssl_context = new ssl::context(*rpc_io_service, ssl::context::sslv23);\n-\n-    const bool fUseSSL = GetBoolArg(\"-rpcssl\", false);\n-\n-    if (fUseSSL)\n-    {\n-        rpc_ssl_context->set_options(ssl::context::no_sslv2 | ssl::context::no_sslv3);\n-\n-        boost::filesystem::path pathCertFile(GetArg(\"-rpcsslcertificatechainfile\", \"server.cert\"));\n-        if (!pathCertFile.is_complete()) pathCertFile = boost::filesystem::path(GetDataDir()) / pathCertFile;\n-        if (boost::filesystem::exists(pathCertFile)) rpc_ssl_context->use_certificate_chain_file(pathCertFile.string());\n-        else LogPrintf(\"ThreadRPCServer ERROR: missing server certificate file %s\\n\", pathCertFile.string());\n-\n-        boost::filesystem::path pathPKFile(GetArg(\"-rpcsslprivatekeyfile\", \"server.pem\"));\n-        if (!pathPKFile.is_complete()) pathPKFile = boost::filesystem::path(GetDataDir()) / pathPKFile;\n-        if (boost::filesystem::exists(pathPKFile)) rpc_ssl_context->use_private_key_file(pathPKFile.string(), ssl::context::pem);\n-        else LogPrintf(\"ThreadRPCServer ERROR: missing server private key file %s\\n\", pathPKFile.string());\n-\n-        string strCiphers = GetArg(\"-rpcsslciphers\", \"TLSv1.2+HIGH:TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!3DES:@STRENGTH\");\n-        SSL_CTX_set_cipher_list(rpc_ssl_context->impl(), strCiphers.c_str());\n-    }\n-\n-    std::vector<ip::tcp::endpoint> vEndpoints;\n-    bool bBindAny = false;\n-    int defaultPort = GetArg(\"-rpcport\", BaseParams().RPCPort());\n-    if (!mapArgs.count(\"-rpcallowip\")) // Default to loopback if not allowing external IPs\n-    {\n-        vEndpoints.push_back(ip::tcp::endpoint(boost::asio::ip::address_v6::loopback(), defaultPort));\n-        vEndpoints.push_back(ip::tcp::endpoint(boost::asio::ip::address_v4::loopback(), defaultPort));\n-        if (mapArgs.count(\"-rpcbind\"))\n-        {\n-            LogPrintf(\"WARNING: option -rpcbind was ignored because -rpcallowip was not specified, refusing to allow everyone to connect\\n\");\n-        }\n-    } else if (mapArgs.count(\"-rpcbind\")) // Specific bind address\n-    {\n-        BOOST_FOREACH(const std::string &addr, mapMultiArgs[\"-rpcbind\"])\n-        {\n-            try {\n-                vEndpoints.push_back(ParseEndpoint(addr, defaultPort));\n-            }\n-            catch (const boost::system::system_error&)\n-            {\n-                uiInterface.ThreadSafeMessageBox(\n-                    strprintf(_(\"Could not parse -rpcbind value %s as network address\"), addr),\n-                    \"\", CClientUIInterface::MSG_ERROR);\n-                StartShutdown();\n-                return;\n-            }\n-        }\n-    } else { // No specific bind address specified, bind to any\n-        vEndpoints.push_back(ip::tcp::endpoint(boost::asio::ip::address_v6::any(), defaultPort));\n-        vEndpoints.push_back(ip::tcp::endpoint(boost::asio::ip::address_v4::any(), defaultPort));\n-        // Prefer making the socket dual IPv6/IPv4 instead of binding\n-        // to both addresses separately.\n-        bBindAny = true;\n-    }\n-\n-    bool fListening = false;\n-    std::string strerr;\n-    std::string straddress;\n-    BOOST_FOREACH(const ip::tcp::endpoint &endpoint, vEndpoints)\n-    {\n-        try {\n-            boost::asio::ip::address bindAddress = endpoint.address();\n-            straddress = bindAddress.to_string();\n-            LogPrintf(\"Binding RPC on address %s port %i (IPv4+IPv6 bind any: %i)\\n\", straddress, endpoint.port(), bBindAny);\n-            boost::system::error_code v6_only_error;\n-            boost::shared_ptr<ip::tcp::acceptor> acceptor(new ip::tcp::acceptor(*rpc_io_service));\n-\n-            acceptor->open(endpoint.protocol());\n-            acceptor->set_option(boost::asio::ip::tcp::acceptor::reuse_address(true));\n-\n-            // Try making the socket dual IPv6/IPv4 when listening on the IPv6 \"any\" address\n-            acceptor->set_option(boost::asio::ip::v6_only(\n-                !bBindAny || bindAddress != boost::asio::ip::address_v6::any()), v6_only_error);\n-\n-            acceptor->bind(endpoint);\n-            acceptor->listen(socket_base::max_connections);\n-\n-            RPCListen(acceptor, *rpc_ssl_context, fUseSSL);\n-\n-            fListening = true;\n-            rpc_acceptors.push_back(acceptor);\n-            // If dual IPv6/IPv4 bind successful, skip binding to IPv4 separately\n-            if(bBindAny && bindAddress == boost::asio::ip::address_v6::any() && !v6_only_error)\n-                break;\n-        }\n-        catch (const boost::system::system_error& e)\n-        {\n-            LogPrintf(\"ERROR: Binding RPC on address %s port %i failed: %s\\n\", straddress, endpoint.port(), e.what());\n-            strerr = strprintf(_(\"An error occurred while setting up the RPC address %s port %u for listening: %s\"), straddress, endpoint.port(), e.what());\n-        }\n-    }\n-\n-    if (!fListening) {\n-        uiInterface.ThreadSafeMessageBox(strerr, \"\", CClientUIInterface::MSG_ERROR);\n-        StartShutdown();\n-        return;\n-    }\n-\n-    rpc_worker_group = new boost::thread_group();\n-    for (int i = 0; i < GetArg(\"-rpcthreads\", 4); i++)\n-        rpc_worker_group->create_thread(boost::bind(&boost::asio::io_service::run, rpc_io_service));\n+    LogPrint(\"rpc\", \"Starting RPC\\n\");\n     fRPCRunning = true;\n     g_rpcSignals.Started();\n+    return true;\n }\n \n-void StartDummyRPCThread()\n+void InterruptRPC()\n {\n-    if(rpc_io_service == NULL)\n-    {\n-        rpc_io_service = new boost::asio::io_service();\n-        /* Create dummy \"work\" to keep the thread from exiting when no timeouts active,\n-         * see http://www.boost.org/doc/libs/1_51_0/doc/html/boost_asio/reference/io_service.html#boost_asio.reference.io_service.stopping_the_io_service_from_running_out_of_work */\n-        rpc_dummy_work = new boost::asio::io_service::work(*rpc_io_service);\n-        rpc_worker_group = new boost::thread_group();\n-        rpc_worker_group->create_thread(boost::bind(&boost::asio::io_service::run, rpc_io_service));\n-        fRPCRunning = true;\n-    }\n+    LogPrint(\"rpc\", \"Interrupting RPC\\n\");\n+    // Interrupt e.g. running longpolls\n+    fRPCRunning = false;\n }\n \n-void StopRPCThreads()\n+void StopRPC()\n {\n-    if (rpc_io_service == NULL) return;\n-    // Set this to false first, so that longpolling loops will exit when woken up\n-    fRPCRunning = false;\n-\n-    // First, cancel all timers and acceptors\n-    // This is not done automatically by ->stop(), and in some cases the destructor of\n-    // boost::asio::io_service can hang if this is skipped.\n-    boost::system::error_code ec;\n-    BOOST_FOREACH(const boost::shared_ptr<ip::tcp::acceptor> &acceptor, rpc_acceptors)\n-    {\n-        acceptor->cancel(ec);\n-        if (ec)\n-            LogPrintf(\"%s: Warning: %s when cancelling acceptor\\n\", __func__, ec.message());\n-    }\n-    rpc_acceptors.clear();\n-    BOOST_FOREACH(const PAIRTYPE(std::string, boost::shared_ptr<deadline_timer>) &timer, deadlineTimers)\n-    {\n-        timer.second->cancel(ec);\n-        if (ec)\n-            LogPrintf(\"%s: Warning: %s when cancelling timer\\n\", __func__, ec.message());\n-    }\n+    LogPrint(\"rpc\", \"Stopping RPC\\n\");\n     deadlineTimers.clear();\n-\n-    DeleteAuthCookie();\n-\n-    rpc_io_service->stop();\n     g_rpcSignals.Stopped();\n-    if (rpc_worker_group != NULL)\n-        rpc_worker_group->join_all();\n-    delete rpc_dummy_work; rpc_dummy_work = NULL;\n-    delete rpc_worker_group; rpc_worker_group = NULL;\n-    delete rpc_ssl_context; rpc_ssl_context = NULL;\n-    delete rpc_io_service; rpc_io_service = NULL;\n }\n \n bool IsRPCRunning()\n@@ -802,36 +440,6 @@ bool RPCIsInWarmup(std::string *outStatus)\n     return fRPCInWarmup;\n }\n \n-void RPCRunHandler(const boost::system::error_code& err, boost::function<void(void)> func)\n-{\n-    if (!err)\n-        func();\n-}\n-\n-void RPCRunLater(const std::string& name, boost::function<void(void)> func, int64_t nSeconds)\n-{\n-    assert(rpc_io_service != NULL);\n-\n-    if (deadlineTimers.count(name) == 0)\n-    {\n-        deadlineTimers.insert(make_pair(name,\n-                                        boost::shared_ptr<deadline_timer>(new deadline_timer(*rpc_io_service))));\n-    }\n-    deadlineTimers[name]->expires_from_now(boost::posix_time::seconds(nSeconds));\n-    deadlineTimers[name]->async_wait(boost::bind(RPCRunHandler, _1, func));\n-}\n-\n-class JSONRequest\n-{\n-public:\n-    UniValue id;\n-    string strMethod;\n-    UniValue params;\n-\n-    JSONRequest() { id = NullUniValue; }\n-    void parse(const UniValue& valRequest);\n-};\n-\n void JSONRequest::parse(const UniValue& valRequest)\n {\n     // Parse request\n@@ -862,7 +470,6 @@ void JSONRequest::parse(const UniValue& valRequest)\n         throw JSONRPCError(RPC_INVALID_REQUEST, \"Params must be an array\");\n }\n \n-\n static UniValue JSONRPCExecOne(const UniValue& req)\n {\n     UniValue rpc_result(UniValue::VOBJ);\n@@ -887,7 +494,7 @@ static UniValue JSONRPCExecOne(const UniValue& req)\n     return rpc_result;\n }\n \n-static string JSONRPCExecBatch(const UniValue& vReq)\n+std::string JSONRPCExecBatch(const UniValue& vReq)\n {\n     UniValue ret(UniValue::VARR);\n     for (unsigned int reqIdx = 0; reqIdx < vReq.size(); reqIdx++)\n@@ -896,107 +503,6 @@ static string JSONRPCExecBatch(const UniValue& vReq)\n     return ret.write() + \"\\n\";\n }\n \n-static bool HTTPReq_JSONRPC(AcceptedConnection *conn,\n-                            string& strRequest,\n-                            map<string, string>& mapHeaders,\n-                            bool fRun)\n-{\n-    // Check authorization\n-    if (mapHeaders.count(\"authorization\") == 0)\n-    {\n-        conn->stream() << HTTPError(HTTP_UNAUTHORIZED, false) << std::flush;\n-        return false;\n-    }\n-\n-    if (!HTTPAuthorized(mapHeaders))\n-    {\n-        LogPrintf(\"ThreadRPCServer incorrect password attempt from %s\\n\", conn->peer_address_to_string());\n-        /* Deter brute-forcing\n-           We don't support exposing the RPC port, so this shouldn't result\n-           in a DoS. */\n-        MilliSleep(250);\n-\n-        conn->stream() << HTTPError(HTTP_UNAUTHORIZED, false) << std::flush;\n-        return false;\n-    }\n-\n-    JSONRequest jreq;\n-    try\n-    {\n-        // Parse request\n-        UniValue valRequest;\n-        if (!valRequest.read(strRequest))\n-            throw JSONRPCError(RPC_PARSE_ERROR, \"Parse error\");\n-\n-        string strReply;\n-\n-        // singleton request\n-        if (valRequest.isObject()) {\n-            jreq.parse(valRequest);\n-\n-            UniValue result = tableRPC.execute(jreq.strMethod, jreq.params);\n-\n-            // Send reply\n-            strReply = JSONRPCReply(result, NullUniValue, jreq.id);\n-\n-        // array of requests\n-        } else if (valRequest.isArray())\n-            strReply = JSONRPCExecBatch(valRequest.get_array());\n-        else\n-            throw JSONRPCError(RPC_PARSE_ERROR, \"Top-level object parse error\");\n-\n-        conn->stream() << HTTPReplyHeader(HTTP_OK, fRun, strReply.size()) << strReply << std::flush;\n-    }\n-    catch (const UniValue& objError)\n-    {\n-        ErrorReply(conn->stream(), objError, jreq.id);\n-        return false;\n-    }\n-    catch (const std::exception& e)\n-    {\n-        ErrorReply(conn->stream(), JSONRPCError(RPC_PARSE_ERROR, e.what()), jreq.id);\n-        return false;\n-    }\n-    return true;\n-}\n-\n-void ServiceConnection(AcceptedConnection *conn)\n-{\n-    bool fRun = true;\n-    while (fRun && !ShutdownRequested())\n-    {\n-        int nProto = 0;\n-        map<string, string> mapHeaders;\n-        string strRequest, strMethod, strURI;\n-\n-        // Read HTTP request line\n-        if (!ReadHTTPRequestLine(conn->stream(), nProto, strMethod, strURI))\n-            break;\n-\n-        // Read HTTP message headers and body\n-        ReadHTTPMessage(conn->stream(), mapHeaders, strRequest, nProto, MAX_SIZE);\n-\n-        // HTTP Keep-Alive is false; close connection immediately\n-        if ((mapHeaders[\"connection\"] == \"close\") || (!GetBoolArg(\"-rpckeepalive\", true)))\n-            fRun = false;\n-\n-        // Process via JSON-RPC API\n-        if (strURI == \"/\") {\n-            if (!HTTPReq_JSONRPC(conn, strRequest, mapHeaders, fRun))\n-                break;\n-\n-        // Process via HTTP REST API\n-        } else if (strURI.substr(0, 6) == \"/rest/\" && GetBoolArg(\"-rest\", false)) {\n-            if (!HTTPReq_REST(conn, strURI, strRequest, mapHeaders, fRun))\n-                break;\n-\n-        } else {\n-            conn->stream() << HTTPError(HTTP_NOT_FOUND, false) << std::flush;\n-            break;\n-        }\n-    }\n-}\n-\n UniValue CRPCTable::execute(const std::string &strMethod, const UniValue &params) const\n {\n     // Return immediately if in warmup\n@@ -1037,4 +543,26 @@ std::string HelpExampleRpc(const std::string& methodname, const std::string& arg\n         \"\\\"method\\\": \\\"\" + methodname + \"\\\", \\\"params\\\": [\" + args + \"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/\\n\";\n }\n \n+void RPCRegisterTimerInterface(RPCTimerInterface *iface)\n+{\n+    timerInterfaces.push_back(iface);\n+}\n+\n+void RPCUnregisterTimerInterface(RPCTimerInterface *iface)\n+{\n+    std::vector<RPCTimerInterface*>::iterator i = std::find(timerInterfaces.begin(), timerInterfaces.end(), iface);\n+    assert(i != timerInterfaces.end());\n+    timerInterfaces.erase(i);\n+}\n+\n+void RPCRunLater(const std::string& name, boost::function<void(void)> func, int64_t nSeconds)\n+{\n+    if (timerInterfaces.empty())\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"No timer handler registered for RPC\");\n+    deadlineTimers.erase(name);\n+    RPCTimerInterface* timerInterface = timerInterfaces[0];\n+    LogPrint(\"rpc\", \"queue run of timer %s in %i seconds (using %s)\\n\", name, nSeconds, timerInterface->Name());\n+    deadlineTimers.insert(std::make_pair(name, timerInterface->NewTimer(func, nSeconds*1000)));\n+}\n+\n const CRPCTable tableRPC;"
      },
      {
        "sha": "83cc37918ba5785d8f8d29e0bd663e39857e41d9",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 44,
        "deletions": 28,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=9aa90994ee85e549ddbe23a6f03e33d0edcd57b2",
        "patch": "@@ -32,26 +32,17 @@ namespace RPCServer\n class CBlockIndex;\n class CNetAddr;\n \n-class AcceptedConnection\n+class JSONRequest\n {\n public:\n-    virtual ~AcceptedConnection() {}\n+    UniValue id;\n+    std::string strMethod;\n+    UniValue params;\n \n-    virtual std::iostream& stream() = 0;\n-    virtual std::string peer_address_to_string() const = 0;\n-    virtual void close() = 0;\n+    JSONRequest() { id = NullUniValue; }\n+    void parse(const UniValue& valRequest);\n };\n \n-/** Start RPC threads */\n-void StartRPCThreads();\n-/**\n- * Alternative to StartRPCThreads for the GUI, when no server is\n- * used. The RPC thread in this case is only used to handle timeouts.\n- * If real RPC threads have already been started this is a no-op.\n- */\n-void StartDummyRPCThread();\n-/** Stop RPC threads */\n-void StopRPCThreads();\n /** Query whether RPC is running */\n bool IsRPCRunning();\n \n@@ -81,15 +72,45 @@ void RPCTypeCheck(const UniValue& params,\n void RPCTypeCheckObj(const UniValue& o,\n                   const std::map<std::string, UniValue::VType>& typesExpected, bool fAllowNull=false);\n \n+/** Opaque base class for timers returned by NewTimerFunc.\n+ * This provides no methods at the moment, but makes sure that delete\n+ * cleans up the whole state.\n+ */\n+class RPCTimerBase\n+{\n+public:\n+    virtual ~RPCTimerBase() {}\n+};\n+\n /**\n- * Run func nSeconds from now. Uses boost deadline timers.\n+ * RPC timer \"driver\".\n+ */\n+class RPCTimerInterface\n+{\n+public:\n+    virtual ~RPCTimerInterface() {}\n+    /** Implementation name */\n+    virtual const char *Name() = 0;\n+    /** Factory function for timers.\n+     * RPC will call the function to create a timer that will call func in *millis* milliseconds.\n+     * @note As the RPC mechanism is backend-neutral, it can use different implementations of timers.\n+     * This is needed to cope with the case in which there is no HTTP server, but\n+     * only GUI RPC console, and to break the dependency of pcserver on httprpc.\n+     */\n+    virtual RPCTimerBase* NewTimer(boost::function<void(void)>& func, int64_t millis) = 0;\n+};\n+\n+/** Register factory function for timers */\n+void RPCRegisterTimerInterface(RPCTimerInterface *iface);\n+/** Unregister factory function for timers */\n+void RPCUnregisterTimerInterface(RPCTimerInterface *iface);\n+\n+/**\n+ * Run func nSeconds from now.\n  * Overrides previous timer <name> (if any).\n  */\n void RPCRunLater(const std::string& name, boost::function<void(void)> func, int64_t nSeconds);\n \n-//! Convert boost::asio address to CNetAddr\n-extern CNetAddr BoostAsioToCNetAddr(boost::asio::ip::address address);\n-\n typedef UniValue(*rpcfn_type)(const UniValue& params, bool fHelp);\n \n class CRPCCommand\n@@ -134,9 +155,6 @@ extern uint256 ParseHashO(const UniValue& o, std::string strKey);\n extern std::vector<unsigned char> ParseHexV(const UniValue& v, std::string strName);\n extern std::vector<unsigned char> ParseHexO(const UniValue& o, std::string strKey);\n \n-extern void InitRPCMining();\n-extern void ShutdownRPCMining();\n-\n extern int64_t nWalletUnlockTime;\n extern CAmount AmountFromValue(const UniValue& value);\n extern UniValue ValueFromAmount(const CAmount& amount);\n@@ -244,11 +262,9 @@ extern UniValue getchaintips(const UniValue& params, bool fHelp);\n extern UniValue invalidateblock(const UniValue& params, bool fHelp);\n extern UniValue reconsiderblock(const UniValue& params, bool fHelp);\n \n-// in rest.cpp\n-extern bool HTTPReq_REST(AcceptedConnection *conn,\n-                  const std::string& strURI,\n-                  const std::string& strRequest,\n-                  const std::map<std::string, std::string>& mapHeaders,\n-                  bool fRun);\n+bool StartRPC();\n+void InterruptRPC();\n+void StopRPC();\n+std::string JSONRPCExecBatch(const UniValue& vReq);\n \n #endif // BITCOIN_RPCSERVER_H"
      },
      {
        "sha": "c0476db99b25983bfc02bd64e6ac7966e5944e90",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 15,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=9aa90994ee85e549ddbe23a6f03e33d0edcd57b2",
        "patch": "@@ -224,21 +224,6 @@ BOOST_AUTO_TEST_CASE(json_parse_errors)\n     BOOST_CHECK_THROW(ParseNonRFCJSONValue(\"3J98t1WpEZ73CNmQviecrnyiWrnqRhWNL\"), std::runtime_error);\n }\n \n-BOOST_AUTO_TEST_CASE(rpc_boostasiotocnetaddr)\n-{\n-    // Check IPv4 addresses\n-    BOOST_CHECK_EQUAL(BoostAsioToCNetAddr(boost::asio::ip::address::from_string(\"1.2.3.4\")).ToString(), \"1.2.3.4\");\n-    BOOST_CHECK_EQUAL(BoostAsioToCNetAddr(boost::asio::ip::address::from_string(\"127.0.0.1\")).ToString(), \"127.0.0.1\");\n-    // Check IPv6 addresses\n-    BOOST_CHECK_EQUAL(BoostAsioToCNetAddr(boost::asio::ip::address::from_string(\"::1\")).ToString(), \"::1\");\n-    BOOST_CHECK_EQUAL(BoostAsioToCNetAddr(boost::asio::ip::address::from_string(\"123:4567:89ab:cdef:123:4567:89ab:cdef\")).ToString(),\n-                                         \"123:4567:89ab:cdef:123:4567:89ab:cdef\");\n-    // v4 compatible must be interpreted as IPv4\n-    BOOST_CHECK_EQUAL(BoostAsioToCNetAddr(boost::asio::ip::address::from_string(\"::0:127.0.0.1\")).ToString(), \"127.0.0.1\");\n-    // v4 mapped must be interpreted as IPv4\n-    BOOST_CHECK_EQUAL(BoostAsioToCNetAddr(boost::asio::ip::address::from_string(\"::ffff:127.0.0.1\")).ToString(), \"127.0.0.1\");\n-}\n-\n BOOST_AUTO_TEST_CASE(rpc_ban)\n {\n     BOOST_CHECK_NO_THROW(CallRPC(string(\"clearbanned\")));"
      },
      {
        "sha": "f50d25e17a14e55063daa790b009bf751db7b181",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=9aa90994ee85e549ddbe23a6f03e33d0edcd57b2",
        "patch": "@@ -794,6 +794,18 @@ void SetupEnvironment()\n     boost::filesystem::path::imbue(loc);\n }\n \n+bool SetupNetworking()\n+{\n+#ifdef WIN32\n+    // Initialize Windows Sockets\n+    WSADATA wsadata;\n+    int ret = WSAStartup(MAKEWORD(2,2), &wsadata);\n+    if (ret != NO_ERROR || LOBYTE(wsadata.wVersion ) != 2 || HIBYTE(wsadata.wVersion) != 2)\n+        return false;\n+#endif\n+    return true;\n+}\n+\n void SetThreadPriority(int nPriority)\n {\n #ifdef WIN32"
      },
      {
        "sha": "0b2dc01ac65f397c86e69eeb3fe821f70c69b110",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=9aa90994ee85e549ddbe23a6f03e33d0edcd57b2",
        "patch": "@@ -59,6 +59,7 @@ inline std::string _(const char* psz)\n }\n \n void SetupEnvironment();\n+bool SetupNetworking();\n \n /** Return true if log accepts specified category */\n bool LogAcceptCategory(const char* category);"
      }
    ]
  },
  {
    "sha": "bbc2b39860f66b4c7b191f9f069eb6fd3a56f73b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYmMyYjM5ODYwZjY2YjRjN2IxOTFmOWYwNjllYjZmZDNhNTZmNzNi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-04T13:31:56Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-04T13:32:03Z"
      },
      "message": "Merge pull request #6633\n\na6eb4ba Report minimum ping time in getpeerinfo (Matt Corallo)",
      "tree": {
        "sha": "3e17bd1aadc7812c1e83db1883a66954bc716c57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3e17bd1aadc7812c1e83db1883a66954bc716c57"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bbc2b39860f66b4c7b191f9f069eb6fd3a56f73b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJV6Z1TAAoJEHSBCwEjRsmm5E4H/AyDAUM/dejqAhivmsYonBl+\ncdUromA6aentjziOUwwwBbsfTiD9m64XQytotBmqnaCG+9JGhxK9/dukOSVi/pxv\nYap00+F2upmA6U9GenXzE8+Py1djcRi/jHj68Vv+KOTldKy8hsYKetPY5HzB63Nc\nImKGycfxfSRjb4mYrXirV+e4eIOO94rquUaWkEbKifT0KkQ/OJ6Uk8y0Z9HdsFNT\nXVJOERV+84g/Byn+tFIWnxsgDU8apfG2XNZSMXotVpU+InxrRvRAtKWFn/9mbt/h\n4SdXhKDjDXP34uBabMYLZtz62jYUwvnzVpkZLnVEvd2xTAOKbCkaZDVdki9tUQM=\n=vG3F\n-----END PGP SIGNATURE-----",
        "payload": "tree 3e17bd1aadc7812c1e83db1883a66954bc716c57\nparent 9aa90994ee85e549ddbe23a6f03e33d0edcd57b2\nparent a6eb4ba38bdb2f12089faf7469b54ea2a5146516\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1441373516 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1441373523 +0200\n\nMerge pull request #6633\n\na6eb4ba Report minimum ping time in getpeerinfo (Matt Corallo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbc2b39860f66b4c7b191f9f069eb6fd3a56f73b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bbc2b39860f66b4c7b191f9f069eb6fd3a56f73b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbc2b39860f66b4c7b191f9f069eb6fd3a56f73b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9aa90994ee85e549ddbe23a6f03e33d0edcd57b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2"
      },
      {
        "sha": "a6eb4ba38bdb2f12089faf7469b54ea2a5146516",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6eb4ba38bdb2f12089faf7469b54ea2a5146516",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a6eb4ba38bdb2f12089faf7469b54ea2a5146516"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "526e2049a8de3e3403a59e86dec832e81689b27b",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbc2b39860f66b4c7b191f9f069eb6fd3a56f73b/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbc2b39860f66b4c7b191f9f069eb6fd3a56f73b/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=bbc2b39860f66b4c7b191f9f069eb6fd3a56f73b",
        "patch": "@@ -628,6 +628,7 @@ void CNode::copyStats(CNodeStats &stats)\n \n     // Raw ping time is in microseconds, but show it to user as whole seconds (Bitcoin users should be well used to small numbers with many decimal places by now :)\n     stats.dPingTime = (((double)nPingUsecTime) / 1e6);\n+    stats.dPingMin  = (((double)nMinPingUsecTime) / 1e6);\n     stats.dPingWait = (((double)nPingUsecWait) / 1e6);\n \n     // Leave string empty if addrLocal invalid (not filled in yet)"
      },
      {
        "sha": "6842ee5edc6e224b68e1634ed18c6370b29b5b96",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbc2b39860f66b4c7b191f9f069eb6fd3a56f73b/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbc2b39860f66b4c7b191f9f069eb6fd3a56f73b/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=bbc2b39860f66b4c7b191f9f069eb6fd3a56f73b",
        "patch": "@@ -189,6 +189,7 @@ class CNodeStats\n     bool fWhitelisted;\n     double dPingTime;\n     double dPingWait;\n+    double dPingMin;\n     std::string addrLocal;\n };\n "
      },
      {
        "sha": "30d0ed6270fdb8ae49c05440f09d466b61404efe",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbc2b39860f66b4c7b191f9f069eb6fd3a56f73b/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbc2b39860f66b4c7b191f9f069eb6fd3a56f73b/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=bbc2b39860f66b4c7b191f9f069eb6fd3a56f73b",
        "patch": "@@ -96,6 +96,7 @@ UniValue getpeerinfo(const UniValue& params, bool fHelp)\n             \"    \\\"conntime\\\": ttt,           (numeric) The connection time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n             \"    \\\"timeoffset\\\": ttt,         (numeric) The time offset in seconds\\n\"\n             \"    \\\"pingtime\\\": n,             (numeric) ping time\\n\"\n+            \"    \\\"minping\\\": n,              (numeric) minimum observed ping time\\n\"\n             \"    \\\"pingwait\\\": n,             (numeric) ping wait\\n\"\n             \"    \\\"version\\\": v,              (numeric) The peer version, such as 7001\\n\"\n             \"    \\\"subver\\\": \\\"/Satoshi:0.8.5/\\\",  (string) The string version\\n\"\n@@ -139,6 +140,7 @@ UniValue getpeerinfo(const UniValue& params, bool fHelp)\n         obj.push_back(Pair(\"conntime\", stats.nTimeConnected));\n         obj.push_back(Pair(\"timeoffset\", stats.nTimeOffset));\n         obj.push_back(Pair(\"pingtime\", stats.dPingTime));\n+        obj.push_back(Pair(\"minping\", stats.dPingMin));\n         if (stats.dPingWait > 0.0)\n             obj.push_back(Pair(\"pingwait\", stats.dPingWait));\n         obj.push_back(Pair(\"version\", stats.nVersion));"
      }
    ]
  },
  {
    "sha": "d6a92dd0ea42ec64f15b81843b4db62c7b186bdb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNmE5MmRkMGVhNDJlYzY0ZjE1YjgxODQzYjRkYjYyYzdiMTg2YmRi",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-09-04T12:38:38Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-09-04T13:39:49Z"
      },
      "message": "[release notes] mention apache reverse proxy to re-enable SSL",
      "tree": {
        "sha": "7c2aff7c11584019538d15a6b028105ecc242ac2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7c2aff7c11584019538d15a6b028105ecc242ac2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d6a92dd0ea42ec64f15b81843b4db62c7b186bdb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6a92dd0ea42ec64f15b81843b4db62c7b186bdb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d6a92dd0ea42ec64f15b81843b4db62c7b186bdb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6a92dd0ea42ec64f15b81843b4db62c7b186bdb/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9aa90994ee85e549ddbe23a6f03e33d0edcd57b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9aa90994ee85e549ddbe23a6f03e33d0edcd57b2"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 30,
      "deletions": 0
    },
    "files": [
      {
        "sha": "293fc87979b0a5515fca4601ab51cd701d2b2fc9",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6a92dd0ea42ec64f15b81843b4db62c7b186bdb/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6a92dd0ea42ec64f15b81843b4db62c7b186bdb/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=d6a92dd0ea42ec64f15b81843b4db62c7b186bdb",
        "patch": "@@ -27,6 +27,36 @@ Then, to tunnel a SSL connection on 28332 to a RPC server bound on localhost on\n \n It can also be set up system-wide in inetd style.\n \n+Another way to re-attain SSL would be to setup a httpd reverse proxy. This solution\n+would allow the use of different authentication, loadbalancing, on-thy-fly compressing and\n+caching. A sample config for apache2 could look like:\n+\n+    Listen 443\n+\n+    NameVirtualHost *:443\n+    <VirtualHost *:443>\n+\n+    SSLEngine On\n+    SSLCertificateFile /etc/apache2/ssl/server.crt\n+    SSLCertificateKeyFile /etc/apache2/ssl/server.key\n+\n+    <Location /bitcoinrpc>\n+        ProxyPass http://127.0.0.1:8332/\n+        ProxyPassReverse http://127.0.0.1:8332/\n+        # optional enable digest auth\n+        # AuthType Digest\n+        # ...\n+        \n+        # optional bypass bitcoind rpc basic auth\n+        # RequestHeader set Authorization \"Basic <hash>\"\n+        # get the <hash> from the shell with: base64 <<< bitcoinrpc:<password>\n+    </Location>\n+\n+    # Or, balance the load:\n+    # ProxyPass / balancer://balancer_cluster_name\n+\n+    </VirtualHost>\n+\n Random-cookie RPC authentication\n ---------------------------------\n "
      }
    ]
  },
  {
    "sha": "93ff1b9041a8282cd0785d22edbc1fd67b29533b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5M2ZmMWI5MDQxYTgyODJjZDA3ODVkMjJlZGJjMWZkNjdiMjk1MzNi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-04T13:43:21Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-04T14:27:38Z"
      },
      "message": "net: correctly initialize nMinPingUsecTime\n\n`nMinPingUsecTime` was left uninitialized in CNode.\nThe correct initialization for a minimum-until-now is int64_t's max value, so initialize it to that.\nThanks @MarcoFalke for noticing.",
      "tree": {
        "sha": "afdfec94cfa3c22dfdd4875d0f2bd3a0c9d4868b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/afdfec94cfa3c22dfdd4875d0f2bd3a0c9d4868b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/93ff1b9041a8282cd0785d22edbc1fd67b29533b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93ff1b9041a8282cd0785d22edbc1fd67b29533b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/93ff1b9041a8282cd0785d22edbc1fd67b29533b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93ff1b9041a8282cd0785d22edbc1fd67b29533b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bbc2b39860f66b4c7b191f9f069eb6fd3a56f73b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbc2b39860f66b4c7b191f9f069eb6fd3a56f73b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bbc2b39860f66b4c7b191f9f069eb6fd3a56f73b"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "87c4f0af0aea7f4cce9dbe34b3b0d667fbf4b438",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93ff1b9041a8282cd0785d22edbc1fd67b29533b/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93ff1b9041a8282cd0785d22edbc1fd67b29533b/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=93ff1b9041a8282cd0785d22edbc1fd67b29533b",
        "patch": "@@ -2261,6 +2261,7 @@ CNode::CNode(SOCKET hSocketIn, const CAddress& addrIn, const std::string& addrNa\n     nPingUsecStart = 0;\n     nPingUsecTime = 0;\n     fPingQueued = false;\n+    nMinPingUsecTime = std::numeric_limits<int64_t>::max();\n \n     {\n         LOCK(cs_nLastNodeId);"
      }
    ]
  },
  {
    "sha": "2aee4d268dfe14566d95ea3907d6239fb2835b1d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYWVlNGQyNjhkZmUxNDU2NmQ5NWVhMzkwN2Q2MjM5ZmIyODM1YjFk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-04T14:31:50Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-04T14:31:58Z"
      },
      "message": "Merge pull request #6626\n\nf4b9132 Update gitian build guide for Debian 8.1 (fanquake)",
      "tree": {
        "sha": "f520d704bd97ca4ddf2bda9db9d45a010203120f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f520d704bd97ca4ddf2bda9db9d45a010203120f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2aee4d268dfe14566d95ea3907d6239fb2835b1d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJV6ateAAoJEHSBCwEjRsmmYWMH/1tCuAVeQ64cOtZ36Se3dAOT\n9Nu6bmuRz6/BqD+4Yq8IEuBJYn0fCm5+9aRAe+jSN/NcJ+YSO45/rEPGrgqVkcGh\naXpPg+Y5IqmsR2FjhMikyIQPQMVGqqUKJ8jPLQ5dVDflOuLK1pX57gas7gFWRWP1\nPLBTFs6IZFGsrEKptUy7kqinV9MGWGjk6e8MxxrY8kFFrw9N48rgnuJuniwphier\n38uNd1g6AhXq4Ln27o3lhyomK0QuYzeJPL1nY2GxrNGaReNaTHPV3sDk3tnrGKF+\nikfonulqbj8ZvLXSScxEOA7x05JBsViR3slVJR9OzfKkNDZedJ/Q4sE3zz0hvO0=\n=zZG1\n-----END PGP SIGNATURE-----",
        "payload": "tree f520d704bd97ca4ddf2bda9db9d45a010203120f\nparent bbc2b39860f66b4c7b191f9f069eb6fd3a56f73b\nparent f4b9132d0c7f6395c3a90953ff78e8b78fcccdef\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1441377110 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1441377118 +0200\n\nMerge pull request #6626\n\nf4b9132 Update gitian build guide for Debian 8.1 (fanquake)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2aee4d268dfe14566d95ea3907d6239fb2835b1d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2aee4d268dfe14566d95ea3907d6239fb2835b1d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2aee4d268dfe14566d95ea3907d6239fb2835b1d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bbc2b39860f66b4c7b191f9f069eb6fd3a56f73b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbc2b39860f66b4c7b191f9f069eb6fd3a56f73b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bbc2b39860f66b4c7b191f9f069eb6fd3a56f73b"
      },
      {
        "sha": "f4b9132d0c7f6395c3a90953ff78e8b78fcccdef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f4b9132d0c7f6395c3a90953ff78e8b78fcccdef"
      }
    ],
    "stats": {
      "total": 139,
      "additions": 81,
      "deletions": 58
    },
    "files": [
      {
        "sha": "169727adc0fb885bb008b77ecdbd49a52f00561d",
        "filename": "doc/gitian-building.md",
        "status": "modified",
        "additions": 81,
        "deletions": 58,
        "changes": 139,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building.md?ref=2aee4d268dfe14566d95ea3907d6239fb2835b1d",
        "patch": "@@ -5,16 +5,16 @@ Gitian building\n \n Gitian is the deterministic build process that is used to build the Bitcoin\n Core executables. It provides a way to be reasonably sure that the\n-executables are really built from source on GitHub. It also makes sure that\n+executables are really built from the source on GitHub. It also makes sure that\n the same, tested dependencies are used and statically built into the executable.\n \n Multiple developers build the source code by following a specific descriptor\n (\"recipe\"), cryptographically sign the result, and upload the resulting signature.\n These results are compared and only if they match, the build is accepted and uploaded\n to bitcoin.org.\n \n-More independent gitian builders are needed, which is why I wrote this\n-guide. It is preferred to follow these steps yourself instead of using someone else's\n+More independent gitian builders are needed, which is why this guide exists. \n+It is preferred you follow these steps yourself instead of using someone else's\n VM image to avoid 'contaminating' the build.\n \n Table of Contents\n@@ -39,46 +39,46 @@ This guide explains how to set up the environment, and how to start the builds.\n \n Debian Linux was chosen as the host distribution because it has a lightweight install (in contrast to Ubuntu) and is readily available.\n Any kind of virtualization can be used, for example:\n-- [VirtualBox](https://www.virtualbox.org/), covered by this guide\n+- [VirtualBox](https://www.virtualbox.org/) (covered by this guide)\n - [KVM](http://www.linux-kvm.org/page/Main_Page)\n - [LXC](https://linuxcontainers.org/), see also [Gitian host docker container](https://github.com/gdm85/tenku/tree/master/docker/gitian-bitcoin-host/README.md).\n \n-You can also install on actual hardware instead of using virtualization.\n+You can also install gitian on actual hardware instead of using virtualization.\n \n Create a new VirtualBox VM\n ---------------------------\n In the VirtualBox GUI click \"Create\" and choose the following parameters in the wizard:\n \n-![](gitian-building/create_vm_page1.png)\n+![](gitian-building/create_new_vm.png)\n \n-- Type: Linux, Debian (64 bit)\n+- Type: Linux, Debian (64-bit)\n \n ![](gitian-building/create_vm_memsize.png)\n \n-- Memory Size: at least 1024MB, anything lower will really slow the build down\n+- Memory Size: at least 1024MB, anything less will really slow down the build.\n \n-![](gitian-building/create_vm_hard_drive.png)\n+![](gitian-building/create_vm_hard_disk.png)\n \n-- Hard Drive: Create a virtual hard drive now\n+- Hard Disk: Create a virtual hard disk now\n     \n-![](gitian-building/create_vm_hard_drive_file_type.png)\n+![](gitian-building/create_vm_hard_disk_file_type.png)\n \n-- Hard Drive file type: Use the default, VDI (VirtualBox Disk Image) \n+- Hard Disk file type: Use the default, VDI (VirtualBox Disk Image) \n \n-![](gitian-building/create_vm_storage_physical_hard_drive.png)\n+![](gitian-building/create_vm_storage_physical_hard_disk.png)\n     \n-- Storage on Physical hard drive: Dynamically Allocated \n+- Storage on physical hard disk: Dynamically Allocated \n     \n ![](gitian-building/create_vm_file_location_size.png)\n \n-- Disk size: at least 40GB; as low as 20GB *may* be possible, but better to err on the safe side \n-- Push the `Create` button\n+- File location and size: at least 40GB; as low as 20GB *may* be possible, but better to err on the safe side \n+- Click `Create`\n \n-Get the [Debian 7.8 net installer](http://cdimage.debian.org/cdimage/archive/7.8.0/amd64/iso-cd/debian-7.8.0-amd64-netinst.iso) (a more recent minor version should also work, see also [Debian Network installation](https://www.debian.org/CD/netinst/)).\n+Get the [Debian 8.1 net installer](http://cdimage.debian.org/debian-cd/8.1.0/amd64/iso-cd/debian-8.1.0-amd64-netinst.iso) (a more recent minor version should also work, see also [Debian Network installation](https://www.debian.org/CD/netinst/)).\n This DVD image can be validated using a SHA256 hashing tool, for example on\n Unixy OSes by entering the following in a terminal:\n \n-    echo \"e39c36d6adc0fd86c6edb0e03e22919086c883b37ca194d063b8e3e8f6ff6a3a  debian-7.8.0-amd64-netinst.iso\" | sha256sum -c\n+    echo \"5d0a1f804d73aee73eee7efbb38456390558094fd19894a573f1514ca44347e0  debian-8.1.0-amd64-netinst.iso\" | sha256sum -c\n     # (must return OK)\n \n After creating the VM, we need to configure it. \n@@ -115,8 +115,9 @@ This section will explain how to install Debian on the newly created VM.\n \n ![](gitian-building/debian_install_1_boot_menu.png)\n \n-**Note**: Navigation in the Debian installer: To keep a setting at the default\n-and proceed, just press `Enter`. To select a different button, press `Tab`.\n+**Note**: Navigating in the Debian installer: \n+To keep a setting at the default and proceed, just press `Enter`. \n+To select a different button, press `Tab`.\n \n - Choose locale and keyboard settings (doesn't matter, you can just go with the defaults or select your own information)\n \n@@ -126,7 +127,7 @@ and proceed, just press `Enter`. To select a different button, press `Tab`.\n \n - The VM will detect network settings using DHCP, this should all proceed automatically\n - Configure the network: \n-  - System name `debian`.\n+  - Hostname `debian`.\n   - Leave domain name empty.\n \n ![](gitian-building/debian_install_5_configure_the_network.png)\n@@ -136,6 +137,7 @@ and proceed, just press `Enter`. To select a different button, press `Tab`.\n ![](gitian-building/debian_install_6a_set_up_root_password.png)\n \n - Name the new user `debian` (the full name doesn't matter, you can leave it empty) \n+- Set the account username as `debian`\n \n ![](gitian-building/debian_install_7_set_up_user_fullname.png)\n ![](gitian-building/debian_install_8_set_up_username.png)\n@@ -158,65 +160,89 @@ and proceed, just press `Enter`. To select a different button, press `Tab`.\n \n ![](gitian-building/debian_install_12_choose_disk.png)\n \n-  - Partitioning scheme: All files in one partition \n-  \n-![](gitian-building/debian_install_13_partition_scheme.png)\n-\n   - Finish partitioning and write changes to disk -> *Yes* (`Tab`, `Enter` to select the `Yes` button)\n \n-![](gitian-building/debian_install_14_finish.png) \n+![](gitian-building/debian_install_14_finish.png)\n ![](gitian-building/debian_install_15_write_changes.png)\n \n - The base system will be installed, this will take a minute or so\n - Choose a mirror (any will do) \n \n ![](gitian-building/debian_install_16_choose_a_mirror.png)\n \n-- Enter proxy information (unless you are on an intranet, you can leave this empty)\n+- Enter proxy information (unless you are on an intranet, leave this empty)\n \n ![](gitian-building/debian_install_18_proxy_settings.png)\n \n - Wait a bit while 'Select and install software' runs\n - Participate in popularity contest -> *No*\n-- Choose software to install. We need just the base system. \n+- Choose software to install. We need just the base system.\n+- Make sure only 'SSH server' and 'Standard System Utilities' are checked\n+- Uncheck 'Debian Desktop Environment' and 'Print Server'\n \n ![](gitian-building/debian_install_19_software_selection.png)\n \n-- Make sure only 'SSH server' and 'Standard System Utilities' are checked\n-- Uncheck 'Debian Desktop Environment' and 'Print Server'\n+- Install the GRUB boot loader to the master boot record? -> Yes\n \n ![](gitian-building/debian_install_20_install_grub.png)\n \n-- Install the GRUB boot loader to the master boot record? -> Yes \n+- Device for boot loader installation -> ata-VBOX_HARDDISK\n \n-![](gitian-building/debian_install_21_finish_installation.png)\n+![](gitian-building/debian_install_21_install_grub_bootloader.png)\n \n - Installation Complete -> *Continue*\n - After installation, the VM will reboot and you will have a working Debian VM. Congratulations!\n \n+![](gitian-building/debian_install_22_finish_installation.png)\n+\n+\n+After Installation\n+-------------------\n+The next step in the guide involves logging in as root via SSH.\n+SSH login for root users is disabled by default, so we'll enable that now.\n+\n+Login to the VM using username `root` and the root password you choose earlier.\n+You'll be presented with a screen similar to this.\n+\n+![](gitian-building/debian_root_login.png)\n+\n+Type:\n+\n+```\n+sed -i 's/^PermitRootLogin.*/PermitRootLogin yes/' /etc/ssh/sshd_config\n+```\n+and press enter. Then,\n+```\n+/etc/init.d/ssh restart\n+```\n+and enter to restart SSH. Logout by typing 'logout' and pressing 'enter'.\n+\n Connecting to the VM\n ----------------------\n \n After the VM has booted you can connect to it using SSH, and files can be copied from and to the VM using a SFTP utility.\n Connect to `localhost`, port `22222` (or the port configured when installing the VM).\n-On Windows you can use putty[1] and WinSCP[2].\n+On Windows you can use [putty](http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html) and [WinSCP](http://winscp.net/eng/index.php).\n \n-For example to connect as `root` from a Linux command prompt use\n+For example, to connect as `root` from a Linux command prompt use\n \n     $ ssh root@localhost -p 22222\n     The authenticity of host '[localhost]:22222 ([127.0.0.1]:22222)' can't be established.\n-    ECDSA key fingerprint is 8e:71:f9:5b:62:46:de:44:01:da:fb:5f:34:b5:f2:18.\n+    RSA key fingerprint is ae:f5:c8:9f:17:c6:c7:1b:c2:1b:12:31:1d:bb:d0:c7.\n     Are you sure you want to continue connecting (yes/no)? yes\n-    Warning: Permanently added '[localhost]:22222' (ECDSA) to the list of known hosts.\n+    Warning: Permanently added '[localhost]:22222' (RSA) to the list of known hosts.\n     root@localhost's password: (enter root password configured during install)\n-    Linux debian 3.2.0-4-amd64 #1 SMP Debian 3.2.54-2 x86_64\n+\n+    The programs included with the Debian GNU/Linux system are free software;\n+    the exact distribution terms for each program are described in the\n+    individual files in /usr/share/doc/*/copyright.\n+\n+    Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent\n+    permitted by applicable law.\n     root@debian:~#\n \n Replace `root` with `debian` to log in as user.\n \n-[1] http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html\n-[2] http://winscp.net/eng/index.php\n-\n Setting up Debian for gitian building\n --------------------------------------\n \n@@ -226,13 +252,10 @@ First we need to log in as `root` to set up dependencies and make sure that our\n user can use the sudo command. Type/paste the following in the terminal:\n \n ```bash\n-apt-get install git ruby sudo apt-cacher-ng qemu-utils debootstrap lxc python-cheetah parted kpartx bridge-utils\n+apt-get install git ruby sudo apt-cacher-ng qemu-utils debootstrap lxc python-cheetah parted kpartx bridge-utils make ubuntu-archive-keyring\n adduser debian sudo\n ```\n \n-When you get a colorful screen with a question about the 'LXC directory', just\n-go with the default (`/var/lib/lxc`).\n-\n Then set up LXC and the rest with the following, which is a complex jumble of settings and workarounds:\n \n ```bash\n@@ -255,7 +278,7 @@ reboot\n ```\n \n At the end the VM is rebooted to make sure that the changes take effect. The steps in this\n-section need only to be performed once.\n+section only need to be performed once.\n \n Installing gitian\n ------------------\n@@ -300,26 +323,26 @@ cd gitian-builder\n bin/make-base-vm --lxc --arch amd64 --suite precise\n ```\n \n-There will be a lot of warnings printed during build of the image. These can be ignored.\n+There will be a lot of warnings printed during the build of the image. These can be ignored.\n \n **Note**: When sudo asks for a password, enter the password for the user *debian* not for *root*.\n \n Getting and building the inputs\n --------------------------------\n \n-Follow the instructions in [doc/release-process.md](release-process.md) in the bitcoin repository\n-under 'Fetch and build inputs' to install sources which require manual intervention. Also follow\n-the next step: 'Seed the Gitian sources cache', which will fetch all necessary source files allowing\n-for gitian to work offline.\n+Follow the instructions in [doc/release-process.md](release-process.md#fetch-and-build-inputs-first-time-or-when-dependency-versions-change) \n+in the bitcoin repository to install sources which require manual intervention. Also follow\n+the next step: 'Seed the Gitian sources cache', which will fetch all the necessary source \n+files to allow gitian to work offline.\n \n Building Bitcoin\n ----------------\n \n To build Bitcoin (for Linux, OSX and Windows) just follow the steps under 'perform\n-gitian builds' in [doc/release-process.md](release-process.md) in the bitcoin repository.\n+gitian builds' in [doc/release-process.md](release-process.md#perform-gitian-builds) in the bitcoin repository.\n \n-This may take a long time as it also builds the dependencies needed for each descriptor.\n-These dependencies will be cached after a successful build to avoid rebuilding them where possible.\n+This may take some time as it will build all the dependencies needed for each descriptor.\n+These dependencies will be cached after a successful build to avoid rebuilding them when possible.\n \n At any time you can check the package installation and build progress with\n \n@@ -331,13 +354,13 @@ tail -f var/build.log\n Output from `gbuild` will look something like\n \n     Initialized empty Git repository in /home/debian/gitian-builder/inputs/bitcoin/.git/\n-    remote: Reusing existing pack: 35606, done.\n-    remote: Total 35606 (delta 0), reused 0 (delta 0)\n-    Receiving objects: 100% (35606/35606), 26.52 MiB | 4.28 MiB/s, done.\n-    Resolving deltas: 100% (25724/25724), done.\n+    remote: Counting objects: 57959, done.\n+    remote: Total 57959 (delta 0), reused 0 (delta 0), pack-reused 57958\n+    Receiving objects: 100% (57959/57959), 53.76 MiB | 484.00 KiB/s, done.\n+    Resolving deltas: 100% (41590/41590), done.\n     From https://github.com/bitcoin/bitcoin\n     ... (new tags, new branch etc)\n-    --- Building for precise x86_64 ---\n+    --- Building for precise amd64 ---\n     Stopping target if it is up\n     Making a new image copy\n     stdin: is not a tty"
      },
      {
        "sha": "dd22428e176b874afb2f5b9d1b018592fb0175d0",
        "filename": "doc/gitian-building/create_new_vm.png",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/create_new_vm.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/create_new_vm.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/create_new_vm.png?ref=2aee4d268dfe14566d95ea3907d6239fb2835b1d"
      },
      {
        "sha": "8e29816fab9e7c8f97338ed43f0893f655134a5f",
        "filename": "doc/gitian-building/create_vm_hard_disk.png",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/create_vm_hard_disk.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/create_vm_hard_disk.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/create_vm_hard_disk.png?ref=2aee4d268dfe14566d95ea3907d6239fb2835b1d"
      },
      {
        "sha": "a157211cf5baf909149e73fddfc2556305f4b123",
        "filename": "doc/gitian-building/create_vm_hard_disk_file_type.png",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/create_vm_hard_disk_file_type.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/create_vm_hard_disk_file_type.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/create_vm_hard_disk_file_type.png?ref=2aee4d268dfe14566d95ea3907d6239fb2835b1d"
      },
      {
        "sha": "a1706e14fda1488dbc180a4f619e5c3de98fae2b",
        "filename": "doc/gitian-building/create_vm_hard_drive.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbc2b39860f66b4c7b191f9f069eb6fd3a56f73b/doc/gitian-building/create_vm_hard_drive.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbc2b39860f66b4c7b191f9f069eb6fd3a56f73b/doc/gitian-building/create_vm_hard_drive.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/create_vm_hard_drive.png?ref=bbc2b39860f66b4c7b191f9f069eb6fd3a56f73b"
      },
      {
        "sha": "251b8ee3e2757a090a8fd045cd3ba76354459915",
        "filename": "doc/gitian-building/create_vm_hard_drive_file_type.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbc2b39860f66b4c7b191f9f069eb6fd3a56f73b/doc/gitian-building/create_vm_hard_drive_file_type.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbc2b39860f66b4c7b191f9f069eb6fd3a56f73b/doc/gitian-building/create_vm_hard_drive_file_type.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/create_vm_hard_drive_file_type.png?ref=bbc2b39860f66b4c7b191f9f069eb6fd3a56f73b"
      },
      {
        "sha": "5abfee5337058f9bd638a79416040bd6c6496194",
        "filename": "doc/gitian-building/create_vm_memsize.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/create_vm_memsize.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/create_vm_memsize.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/create_vm_memsize.png?ref=2aee4d268dfe14566d95ea3907d6239fb2835b1d"
      },
      {
        "sha": "edaebc6223708e1473d893dd480a5ef439a39473",
        "filename": "doc/gitian-building/create_vm_page1.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbc2b39860f66b4c7b191f9f069eb6fd3a56f73b/doc/gitian-building/create_vm_page1.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbc2b39860f66b4c7b191f9f069eb6fd3a56f73b/doc/gitian-building/create_vm_page1.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/create_vm_page1.png?ref=bbc2b39860f66b4c7b191f9f069eb6fd3a56f73b"
      },
      {
        "sha": "cee16a6c63b4f2dcd592ae8c9cdc02f278fbad81",
        "filename": "doc/gitian-building/create_vm_storage_physical_hard_disk.png",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/create_vm_storage_physical_hard_disk.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/create_vm_storage_physical_hard_disk.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/create_vm_storage_physical_hard_disk.png?ref=2aee4d268dfe14566d95ea3907d6239fb2835b1d"
      },
      {
        "sha": "987efaa40c2e3c57ef7fb6c64fee8efa0e63241e",
        "filename": "doc/gitian-building/create_vm_storage_physical_hard_drive.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbc2b39860f66b4c7b191f9f069eb6fd3a56f73b/doc/gitian-building/create_vm_storage_physical_hard_drive.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbc2b39860f66b4c7b191f9f069eb6fd3a56f73b/doc/gitian-building/create_vm_storage_physical_hard_drive.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/create_vm_storage_physical_hard_drive.png?ref=bbc2b39860f66b4c7b191f9f069eb6fd3a56f73b"
      },
      {
        "sha": "7cda038ae47f97ddfaa905478599cafc6572dd1f",
        "filename": "doc/gitian-building/debian_install_10_configure_clock.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/debian_install_10_configure_clock.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/debian_install_10_configure_clock.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_10_configure_clock.png?ref=2aee4d268dfe14566d95ea3907d6239fb2835b1d"
      },
      {
        "sha": "2a648c517f429fb937275d5444a58f4830e8eae4",
        "filename": "doc/gitian-building/debian_install_11_partition_disks.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/debian_install_11_partition_disks.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/debian_install_11_partition_disks.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_11_partition_disks.png?ref=2aee4d268dfe14566d95ea3907d6239fb2835b1d"
      },
      {
        "sha": "0f3acc498e3e9cc04692a9c557a8eecb5029dc25",
        "filename": "doc/gitian-building/debian_install_12_choose_disk.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/debian_install_12_choose_disk.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/debian_install_12_choose_disk.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_12_choose_disk.png?ref=2aee4d268dfe14566d95ea3907d6239fb2835b1d"
      },
      {
        "sha": "2f80f19b631c0cbf7ebeddc71c309aca8cf86eed",
        "filename": "doc/gitian-building/debian_install_13_partition_scheme.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbc2b39860f66b4c7b191f9f069eb6fd3a56f73b/doc/gitian-building/debian_install_13_partition_scheme.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbc2b39860f66b4c7b191f9f069eb6fd3a56f73b/doc/gitian-building/debian_install_13_partition_scheme.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_13_partition_scheme.png?ref=bbc2b39860f66b4c7b191f9f069eb6fd3a56f73b"
      },
      {
        "sha": "c8ef0b37ad6232f87593ea448beaba089b568a91",
        "filename": "doc/gitian-building/debian_install_14_finish.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/debian_install_14_finish.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/debian_install_14_finish.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_14_finish.png?ref=2aee4d268dfe14566d95ea3907d6239fb2835b1d"
      },
      {
        "sha": "d8de00dec68c826485034c698079e5808f7dadfd",
        "filename": "doc/gitian-building/debian_install_15_write_changes.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/debian_install_15_write_changes.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/debian_install_15_write_changes.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_15_write_changes.png?ref=2aee4d268dfe14566d95ea3907d6239fb2835b1d"
      },
      {
        "sha": "0bd985b38c113ed9bbbe03808ace284476680edc",
        "filename": "doc/gitian-building/debian_install_16_choose_a_mirror.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/debian_install_16_choose_a_mirror.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/debian_install_16_choose_a_mirror.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_16_choose_a_mirror.png?ref=2aee4d268dfe14566d95ea3907d6239fb2835b1d"
      },
      {
        "sha": "cef2db07815451cf16099e063f94bb40202ee822",
        "filename": "doc/gitian-building/debian_install_17_choose_a_mirror2.png",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbc2b39860f66b4c7b191f9f069eb6fd3a56f73b/doc/gitian-building/debian_install_17_choose_a_mirror2.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbc2b39860f66b4c7b191f9f069eb6fd3a56f73b/doc/gitian-building/debian_install_17_choose_a_mirror2.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_17_choose_a_mirror2.png?ref=bbc2b39860f66b4c7b191f9f069eb6fd3a56f73b"
      },
      {
        "sha": "2c19919f64b62d89883dc8e1308f179978b95ca4",
        "filename": "doc/gitian-building/debian_install_18_proxy_settings.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/debian_install_18_proxy_settings.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/debian_install_18_proxy_settings.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_18_proxy_settings.png?ref=2aee4d268dfe14566d95ea3907d6239fb2835b1d"
      },
      {
        "sha": "5430456b14f098d9e3561653352b826d19a2c38a",
        "filename": "doc/gitian-building/debian_install_19_software_selection.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/debian_install_19_software_selection.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/debian_install_19_software_selection.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_19_software_selection.png?ref=2aee4d268dfe14566d95ea3907d6239fb2835b1d"
      },
      {
        "sha": "216502e1c6eb6930ce60c1a36e7476e6fb8781d9",
        "filename": "doc/gitian-building/debian_install_1_boot_menu.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/debian_install_1_boot_menu.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/debian_install_1_boot_menu.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_1_boot_menu.png?ref=2aee4d268dfe14566d95ea3907d6239fb2835b1d"
      },
      {
        "sha": "d853c1587188c5fd4ede94ab00f9d8b6731674ac",
        "filename": "doc/gitian-building/debian_install_20_install_grub.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/debian_install_20_install_grub.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/debian_install_20_install_grub.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_20_install_grub.png?ref=2aee4d268dfe14566d95ea3907d6239fb2835b1d"
      },
      {
        "sha": "493ab806a673f5c8ee47db0bb5de6af0d5042b03",
        "filename": "doc/gitian-building/debian_install_21_install_grub_bootloader.png",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/debian_install_21_install_grub_bootloader.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/debian_install_21_install_grub_bootloader.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_21_install_grub_bootloader.png?ref=2aee4d268dfe14566d95ea3907d6239fb2835b1d"
      },
      {
        "sha": "7c4445585bc9982a5015959dba70d73b01885e08",
        "filename": "doc/gitian-building/debian_install_22_finish_installation.png",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/debian_install_22_finish_installation.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/debian_install_22_finish_installation.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_22_finish_installation.png?ref=2aee4d268dfe14566d95ea3907d6239fb2835b1d",
        "previous_filename": "doc/gitian-building/debian_install_21_finish_installation.png"
      },
      {
        "sha": "0228ae2c011daeababc75b915a12b28b702456c0",
        "filename": "doc/gitian-building/debian_install_2_select_a_language.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/debian_install_2_select_a_language.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/debian_install_2_select_a_language.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_2_select_a_language.png?ref=2aee4d268dfe14566d95ea3907d6239fb2835b1d"
      },
      {
        "sha": "7b18fba97577b521944f909ed57fd251942a9eab",
        "filename": "doc/gitian-building/debian_install_3_select_location.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/debian_install_3_select_location.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/debian_install_3_select_location.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_3_select_location.png?ref=2aee4d268dfe14566d95ea3907d6239fb2835b1d"
      },
      {
        "sha": "8e46117de4879a6de8b276813bef12c219cb4e8b",
        "filename": "doc/gitian-building/debian_install_4_configure_keyboard.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/debian_install_4_configure_keyboard.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/debian_install_4_configure_keyboard.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_4_configure_keyboard.png?ref=2aee4d268dfe14566d95ea3907d6239fb2835b1d"
      },
      {
        "sha": "8e3720f24322a54ef33893e8eff95383158bf3d9",
        "filename": "doc/gitian-building/debian_install_5_configure_the_network.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/debian_install_5_configure_the_network.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/debian_install_5_configure_the_network.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_5_configure_the_network.png?ref=2aee4d268dfe14566d95ea3907d6239fb2835b1d"
      },
      {
        "sha": "dcade119676ed7e0c0f92cff6d6a064929a07a07",
        "filename": "doc/gitian-building/debian_install_6a_set_up_root_password.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/debian_install_6a_set_up_root_password.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/debian_install_6a_set_up_root_password.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_6a_set_up_root_password.png?ref=2aee4d268dfe14566d95ea3907d6239fb2835b1d"
      },
      {
        "sha": "6763c6e08ade2b17f050da257a76132f916e38f5",
        "filename": "doc/gitian-building/debian_install_7_set_up_user_fullname.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/debian_install_7_set_up_user_fullname.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/debian_install_7_set_up_user_fullname.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_7_set_up_user_fullname.png?ref=2aee4d268dfe14566d95ea3907d6239fb2835b1d"
      },
      {
        "sha": "bb04de96d23bdaa3e29fbe19891e42b881dd0a99",
        "filename": "doc/gitian-building/debian_install_8_set_up_username.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/debian_install_8_set_up_username.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/debian_install_8_set_up_username.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_8_set_up_username.png?ref=2aee4d268dfe14566d95ea3907d6239fb2835b1d"
      },
      {
        "sha": "981f1181d79d0d7fe2138f036d0f1bb41ec472fa",
        "filename": "doc/gitian-building/debian_install_9_user_password.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/debian_install_9_user_password.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/debian_install_9_user_password.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_install_9_user_password.png?ref=2aee4d268dfe14566d95ea3907d6239fb2835b1d"
      },
      {
        "sha": "14cdd5ba5b52cc32fbc0da62cf3671c3679b8d79",
        "filename": "doc/gitian-building/debian_root_login.png",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/debian_root_login.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/debian_root_login.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/debian_root_login.png?ref=2aee4d268dfe14566d95ea3907d6239fb2835b1d"
      },
      {
        "sha": "9e714fd15451837980b9d12a931c294fc962b2a2",
        "filename": "doc/gitian-building/network_settings.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/network_settings.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/network_settings.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/network_settings.png?ref=2aee4d268dfe14566d95ea3907d6239fb2835b1d"
      },
      {
        "sha": "9e1fa2af20f48d482892b722b7288600bece322a",
        "filename": "doc/gitian-building/port_forwarding_rules.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/port_forwarding_rules.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/port_forwarding_rules.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/port_forwarding_rules.png?ref=2aee4d268dfe14566d95ea3907d6239fb2835b1d"
      },
      {
        "sha": "5acdc3fe10eebce2422cdb6d6ae799a7630f0b8d",
        "filename": "doc/gitian-building/select_startup_disk.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/select_startup_disk.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2aee4d268dfe14566d95ea3907d6239fb2835b1d/doc/gitian-building/select_startup_disk.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building/select_startup_disk.png?ref=2aee4d268dfe14566d95ea3907d6239fb2835b1d"
      }
    ]
  },
  {
    "sha": "536207f3167daad1fa3d60a1de7d9cb55db28ac9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MzYyMDdmMzE2N2RhYWQxZmEzZDYwYTFkZTdkOWNiNTVkYjI4YWM5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-04T15:03:24Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-04T15:06:48Z"
      },
      "message": "Merge pull request #6636\n\n93ff1b9 net: correctly initialize nMinPingUsecTime (Wladimir J. van der Laan)",
      "tree": {
        "sha": "ef79bbdf5fefb68bf44a12b748d9226505a20039",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ef79bbdf5fefb68bf44a12b748d9226505a20039"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/536207f3167daad1fa3d60a1de7d9cb55db28ac9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJV6bOIAAoJEHSBCwEjRsmmtSAH/1n4lrVFI6AqfoIh2YgKPcGH\nwzZxFaKPznIjZKOOaw7AjPEtrxVSnq0L5fPK7NofhAQdpTsqx/3hrMBY+FDj56y8\nTzPIMFD6iAGd1V5Js1TE1uX/TU4zRx/loIn6kYMy9gfVqnR2FKcdNq3FXtmCnv5B\nTu7cj9f7PiO2+gMRkEipJ0zROwTe97LUfnC1kIUfjkCjc5PPDVVSJ9+5H1o54QQy\n0I+ID1e3hlMRkEn4FBiTG+u/MC7QL3V1yWcjU0FeHnSRztCe4O3tlItTdOfpdc0N\nlPzs9ZCXnMqbQygPxyPqehoG75yWJB9tr6vdLPmaOQVc47nbDIx50iGvLYojFI0=\n=Eyxu\n-----END PGP SIGNATURE-----",
        "payload": "tree ef79bbdf5fefb68bf44a12b748d9226505a20039\nparent 2aee4d268dfe14566d95ea3907d6239fb2835b1d\nparent 93ff1b9041a8282cd0785d22edbc1fd67b29533b\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1441379004 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1441379208 +0200\n\nMerge pull request #6636\n\n93ff1b9 net: correctly initialize nMinPingUsecTime (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/536207f3167daad1fa3d60a1de7d9cb55db28ac9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/536207f3167daad1fa3d60a1de7d9cb55db28ac9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/536207f3167daad1fa3d60a1de7d9cb55db28ac9/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2aee4d268dfe14566d95ea3907d6239fb2835b1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2aee4d268dfe14566d95ea3907d6239fb2835b1d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2aee4d268dfe14566d95ea3907d6239fb2835b1d"
      },
      {
        "sha": "93ff1b9041a8282cd0785d22edbc1fd67b29533b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93ff1b9041a8282cd0785d22edbc1fd67b29533b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/93ff1b9041a8282cd0785d22edbc1fd67b29533b"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "87c4f0af0aea7f4cce9dbe34b3b0d667fbf4b438",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/536207f3167daad1fa3d60a1de7d9cb55db28ac9/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/536207f3167daad1fa3d60a1de7d9cb55db28ac9/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=536207f3167daad1fa3d60a1de7d9cb55db28ac9",
        "patch": "@@ -2261,6 +2261,7 @@ CNode::CNode(SOCKET hSocketIn, const CAddress& addrIn, const std::string& addrNa\n     nPingUsecStart = 0;\n     nPingUsecTime = 0;\n     fPingQueued = false;\n+    nMinPingUsecTime = std::numeric_limits<int64_t>::max();\n \n     {\n         LOCK(cs_nLastNodeId);"
      }
    ]
  },
  {
    "sha": "eb3002bb7138db3aa4490b00be88779818b6da0d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYjMwMDJiYjcxMzhkYjNhYTQ0OTBiMDBiZTg4Nzc5ODE4YjZkYTBk",
    "commit": {
      "author": {
        "name": "paveljanik",
        "email": "Pavel@Janik.cz",
        "date": "2015-09-04T17:22:48Z"
      },
      "committer": {
        "name": "paveljanik",
        "email": "Pavel@Janik.cz",
        "date": "2015-09-04T17:22:48Z"
      },
      "message": "[TRIVIAL] Fix typo: exactmath -> exactmatch\n\n... but not yet in trivial tree",
      "tree": {
        "sha": "c3af65535f3ae769c3b20b30bed1ca11b65c459b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c3af65535f3ae769c3b20b30bed1ca11b65c459b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eb3002bb7138db3aa4490b00be88779818b6da0d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb3002bb7138db3aa4490b00be88779818b6da0d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eb3002bb7138db3aa4490b00be88779818b6da0d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb3002bb7138db3aa4490b00be88779818b6da0d/comments",
    "author": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "536207f3167daad1fa3d60a1de7d9cb55db28ac9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/536207f3167daad1fa3d60a1de7d9cb55db28ac9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/536207f3167daad1fa3d60a1de7d9cb55db28ac9"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "baca00757114bf25d44042671a736e466ef7b7f3",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb3002bb7138db3aa4490b00be88779818b6da0d/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb3002bb7138db3aa4490b00be88779818b6da0d/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=eb3002bb7138db3aa4490b00be88779818b6da0d",
        "patch": "@@ -555,7 +555,7 @@ HTTPRequest::RequestMethod HTTPRequest::GetRequestMethod()\n \n void RegisterHTTPHandler(const std::string &prefix, bool exactMatch, const HTTPRequestHandler &handler)\n {\n-    LogPrint(\"http\", \"Registering HTTP handler for %s (exactmath %d)\\n\", prefix, exactMatch);\n+    LogPrint(\"http\", \"Registering HTTP handler for %s (exactmatch %d)\\n\", prefix, exactMatch);\n     pathHandlers.push_back(HTTPPathHandler(prefix, exactMatch, handler));\n }\n \n@@ -568,7 +568,7 @@ void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch)\n             break;\n     if (i != iend)\n     {\n-        LogPrint(\"http\", \"Unregistering HTTP handler for %s (exactmath %d)\\n\", prefix, exactMatch);\n+        LogPrint(\"http\", \"Unregistering HTTP handler for %s (exactmatch %d)\\n\", prefix, exactMatch);\n         pathHandlers.erase(i);\n     }\n }"
      }
    ]
  },
  {
    "sha": "5ffaaba3a1533cc3cabe509bd09c137aa254e30f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZmZhYWJhM2ExNTMzY2MzY2FiZTUwOWJkMDljMTM3YWEyNTRlMzBm",
    "commit": {
      "author": {
        "name": "Casey Rodarmor",
        "email": "casey@rodarmor.com",
        "date": "2015-08-27T19:53:16Z"
      },
      "committer": {
        "name": "Casey Rodarmor",
        "email": "casey@rodarmor.com",
        "date": "2015-09-04T19:25:42Z"
      },
      "message": "Disallow duplicate windows.",
      "tree": {
        "sha": "9cb0d57d46f089903b5cc401f2c715e17dec56b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9cb0d57d46f089903b5cc401f2c715e17dec56b0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5ffaaba3a1533cc3cabe509bd09c137aa254e30f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ffaaba3a1533cc3cabe509bd09c137aa254e30f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5ffaaba3a1533cc3cabe509bd09c137aa254e30f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ffaaba3a1533cc3cabe509bd09c137aa254e30f/comments",
    "author": {
      "login": "casey",
      "id": 1945,
      "node_id": "MDQ6VXNlcjE5NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/casey",
      "html_url": "https://github.com/casey",
      "followers_url": "https://api.github.com/users/casey/followers",
      "following_url": "https://api.github.com/users/casey/following{/other_user}",
      "gists_url": "https://api.github.com/users/casey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/casey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/casey/subscriptions",
      "organizations_url": "https://api.github.com/users/casey/orgs",
      "repos_url": "https://api.github.com/users/casey/repos",
      "events_url": "https://api.github.com/users/casey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/casey/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "casey",
      "id": 1945,
      "node_id": "MDQ6VXNlcjE5NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/casey",
      "html_url": "https://github.com/casey",
      "followers_url": "https://api.github.com/users/casey/followers",
      "following_url": "https://api.github.com/users/casey/following{/other_user}",
      "gists_url": "https://api.github.com/users/casey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/casey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/casey/subscriptions",
      "organizations_url": "https://api.github.com/users/casey/orgs",
      "repos_url": "https://api.github.com/users/casey/repos",
      "events_url": "https://api.github.com/users/casey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/casey/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "536207f3167daad1fa3d60a1de7d9cb55db28ac9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/536207f3167daad1fa3d60a1de7d9cb55db28ac9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/536207f3167daad1fa3d60a1de7d9cb55db28ac9"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 21,
      "deletions": 11
    },
    "files": [
      {
        "sha": "db9e5587644738605c7e902d6f4d9d6c7d6bc616",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ffaaba3a1533cc3cabe509bd09c137aa254e30f/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ffaaba3a1533cc3cabe509bd09c137aa254e30f/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=5ffaaba3a1533cc3cabe509bd09c137aa254e30f",
        "patch": "@@ -97,6 +97,7 @@ BitcoinGUI::BitcoinGUI(const PlatformStyle *platformStyle, const NetworkStyle *n\n     trayIconMenu(0),\n     notificator(0),\n     rpcConsole(0),\n+    helpMessageDialog(0),\n     prevBlocks(0),\n     spinnerFrame(0),\n     platformStyle(platformStyle)\n@@ -132,6 +133,7 @@ BitcoinGUI::BitcoinGUI(const PlatformStyle *platformStyle, const NetworkStyle *n\n #endif\n \n     rpcConsole = new RPCConsole(platformStyle, 0);\n+    helpMessageDialog = new HelpMessageDialog(this, false);\n #ifdef ENABLE_WALLET\n     if(enableWallet)\n     {\n@@ -590,9 +592,7 @@ void BitcoinGUI::aboutClicked()\n \n void BitcoinGUI::showHelpMessageClicked()\n {\n-    HelpMessageDialog *help = new HelpMessageDialog(this, false);\n-    help->setAttribute(Qt::WA_DeleteOnClose);\n-    help->show();\n+    helpMessageDialog->show();\n }\n \n #ifdef ENABLE_WALLET"
      },
      {
        "sha": "f1b7a502ba3c15d10c9ff4d9a6cc57952285a4fb",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ffaaba3a1533cc3cabe509bd09c137aa254e30f/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ffaaba3a1533cc3cabe509bd09c137aa254e30f/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=5ffaaba3a1533cc3cabe509bd09c137aa254e30f",
        "patch": "@@ -28,6 +28,7 @@ class SendCoinsRecipient;\n class UnitDisplayStatusBarControl;\n class WalletFrame;\n class WalletModel;\n+class HelpMessageDialog;\n \n class CWallet;\n \n@@ -113,6 +114,7 @@ class BitcoinGUI : public QMainWindow\n     QMenu *trayIconMenu;\n     Notificator *notificator;\n     RPCConsole *rpcConsole;\n+    HelpMessageDialog *helpMessageDialog;\n \n     /** Keep track of previous number of blocks, to detect progress */\n     int prevBlocks;"
      },
      {
        "sha": "77efdb5cdd1083bcf936dcc5762a5a901c530573",
        "filename": "src/qt/walletview.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 8,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ffaaba3a1533cc3cabe509bd09c137aa254e30f/src/qt/walletview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ffaaba3a1533cc3cabe509bd09c137aa254e30f/src/qt/walletview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.cpp?ref=5ffaaba3a1533cc3cabe509bd09c137aa254e30f",
        "patch": "@@ -56,6 +56,9 @@ WalletView::WalletView(const PlatformStyle *platformStyle, QWidget *parent):\n     receiveCoinsPage = new ReceiveCoinsDialog(platformStyle);\n     sendCoinsPage = new SendCoinsDialog(platformStyle);\n \n+    usedSendingAddressesPage = new AddressBookPage(platformStyle, AddressBookPage::ForEditing, AddressBookPage::SendingTab, this);\n+    usedReceivingAddressesPage = new AddressBookPage(platformStyle, AddressBookPage::ForEditing, AddressBookPage::ReceivingTab, this);\n+\n     addWidget(overviewPage);\n     addWidget(transactionsPage);\n     addWidget(receiveCoinsPage);\n@@ -115,6 +118,8 @@ void WalletView::setWalletModel(WalletModel *walletModel)\n     overviewPage->setWalletModel(walletModel);\n     receiveCoinsPage->setModel(walletModel);\n     sendCoinsPage->setModel(walletModel);\n+    usedReceivingAddressesPage->setModel(walletModel->getAddressTableModel());\n+    usedSendingAddressesPage->setModel(walletModel->getAddressTableModel());\n \n     if (walletModel)\n     {\n@@ -273,20 +278,20 @@ void WalletView::usedSendingAddresses()\n {\n     if(!walletModel)\n         return;\n-    AddressBookPage *dlg = new AddressBookPage(platformStyle, AddressBookPage::ForEditing, AddressBookPage::SendingTab, this);\n-    dlg->setAttribute(Qt::WA_DeleteOnClose);\n-    dlg->setModel(walletModel->getAddressTableModel());\n-    dlg->show();\n+\n+    usedSendingAddressesPage->show();\n+    usedSendingAddressesPage->raise();\n+    usedSendingAddressesPage->activateWindow();\n }\n \n void WalletView::usedReceivingAddresses()\n {\n     if(!walletModel)\n         return;\n-    AddressBookPage *dlg = new AddressBookPage(platformStyle, AddressBookPage::ForEditing, AddressBookPage::ReceivingTab, this);\n-    dlg->setAttribute(Qt::WA_DeleteOnClose);\n-    dlg->setModel(walletModel->getAddressTableModel());\n-    dlg->show();\n+\n+    usedReceivingAddressesPage->show();\n+    usedReceivingAddressesPage->raise();\n+    usedReceivingAddressesPage->activateWindow();\n }\n \n void WalletView::showProgress(const QString &title, int nProgress)"
      },
      {
        "sha": "2a6a6a2df2b93fb24dfa36869e727fd98fb8302f",
        "filename": "src/qt/walletview.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ffaaba3a1533cc3cabe509bd09c137aa254e30f/src/qt/walletview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ffaaba3a1533cc3cabe509bd09c137aa254e30f/src/qt/walletview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.h?ref=5ffaaba3a1533cc3cabe509bd09c137aa254e30f",
        "patch": "@@ -18,6 +18,7 @@ class SendCoinsDialog;\n class SendCoinsRecipient;\n class TransactionView;\n class WalletModel;\n+class AddressBookPage;\n \n QT_BEGIN_NAMESPACE\n class QModelIndex;\n@@ -61,6 +62,8 @@ class WalletView : public QStackedWidget\n     QWidget *transactionsPage;\n     ReceiveCoinsDialog *receiveCoinsPage;\n     SendCoinsDialog *sendCoinsPage;\n+    AddressBookPage *usedSendingAddressesPage;\n+    AddressBookPage *usedReceivingAddressesPage;\n \n     TransactionView *transactionView;\n "
      }
    ]
  },
  {
    "sha": "afb0ccaf9c9e4e8fac7db3564c4e19c9218c6b03",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZmIwY2NhZjljOWU0ZThmYWM3ZGIzNTY0YzRlMTljOTIxOGM2YjAz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-08-21T04:15:27Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-09-06T06:29:13Z"
      },
      "message": "Add NODE_BLOOM service bit and bump protocol version\n\nLets nodes advertise that they offer bloom filter support explicitly.\nThe protocol version bump allows SPV nodes to assume that NODE_BLOOM is\nset if NODE_NETWORK is set for pre-70011 nodes.\n\nAlso adds an option to turn bloom filter support off for nodes which\nadvertise a version number >= 70011. Nodes attempting to use bloom\nfilters on such protocol versions are banned, and a later upgade\nshould drop nodes of an older version which attempt to use bloom\nfilters.\n\nMuch code stolen from Peter Todd.\n\nImplements BIP 111",
      "tree": {
        "sha": "14e3b07e6ed8886d97624d73767445b69f6dcb4b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/14e3b07e6ed8886d97624d73767445b69f6dcb4b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/afb0ccaf9c9e4e8fac7db3564c4e19c9218c6b03",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afb0ccaf9c9e4e8fac7db3564c4e19c9218c6b03",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/afb0ccaf9c9e4e8fac7db3564c4e19c9218c6b03",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afb0ccaf9c9e4e8fac7db3564c4e19c9218c6b03/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "536207f3167daad1fa3d60a1de7d9cb55db28ac9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/536207f3167daad1fa3d60a1de7d9cb55db28ac9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/536207f3167daad1fa3d60a1de7d9cb55db28ac9"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 26,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0f409098a7bbab055b1f11c58fded04dc8009125",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afb0ccaf9c9e4e8fac7db3564c4e19c9218c6b03/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afb0ccaf9c9e4e8fac7db3564c4e19c9218c6b03/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=afb0ccaf9c9e4e8fac7db3564c4e19c9218c6b03",
        "patch": "@@ -918,6 +918,9 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     // Option to startup with mocktime set (used for regression testing):\n     SetMockTime(GetArg(\"-mocktime\", 0)); // SetMockTime(0) is a no-op\n \n+    if (GetBoolArg(\"-peerbloomfilters\", true))\n+        nLocalServices |= NODE_BLOOM;\n+\n     // ********************************************************* Step 4: application initialization: dir lock, daemonize, pidfile, debug log\n \n     // Initialize elliptic curve code"
      },
      {
        "sha": "a880533e65010b05c1ac46d0a7d9bfa3bcbd2a98",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afb0ccaf9c9e4e8fac7db3564c4e19c9218c6b03/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afb0ccaf9c9e4e8fac7db3564c4e19c9218c6b03/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=afb0ccaf9c9e4e8fac7db3564c4e19c9218c6b03",
        "patch": "@@ -4591,6 +4591,21 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     }\n \n \n+    else if (!(nLocalServices & NODE_BLOOM) &&\n+              (strCommand == \"filterload\" ||\n+               strCommand == \"filteradd\" ||\n+               strCommand == \"filterclear\") &&\n+              //TODO: Remove this line after reasonable network upgrade\n+              pfrom->nVersion >= NO_BLOOM_VERSION)\n+    {\n+        if (pfrom->nVersion >= NO_BLOOM_VERSION)\n+            Misbehaving(pfrom->GetId(), 100);\n+        //TODO: Enable this after reasonable network upgrade\n+        //else\n+        //    pfrom->fDisconnect = true;\n+    }\n+\n+\n     else if (strCommand == \"filterload\")\n     {\n         CBloomFilter filter;"
      },
      {
        "sha": "50aeaf44bab191b93d8a3eecdb00506ea8b0d7e7",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afb0ccaf9c9e4e8fac7db3564c4e19c9218c6b03/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afb0ccaf9c9e4e8fac7db3564c4e19c9218c6b03/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=afb0ccaf9c9e4e8fac7db3564c4e19c9218c6b03",
        "patch": "@@ -75,6 +75,10 @@ enum {\n     // Bitcoin Core does not support this but a patch set called Bitcoin XT does.\n     // See BIP 64 for details on how this is implemented.\n     NODE_GETUTXO = (1 << 1),\n+    // NODE_BLOOM means the node is capable and willing to handle bloom-filtered connections.\n+    // Bitcoin Core nodes used to support this by default, without advertising this bit,\n+    // but no longer do as of protocol version 70011 (= NO_BLOOM_VERSION)\n+    NODE_BLOOM = (1 << 2),\n \n     // Bits 24-31 are reserved for temporary experiments. Just pick a bit that\n     // isn't getting used, or one not being used much, and notify the"
      },
      {
        "sha": "6cdddf92554d62e7085bf0169c69fccc8cfe4461",
        "filename": "src/version.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afb0ccaf9c9e4e8fac7db3564c4e19c9218c6b03/src/version.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afb0ccaf9c9e4e8fac7db3564c4e19c9218c6b03/src/version.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/version.h?ref=afb0ccaf9c9e4e8fac7db3564c4e19c9218c6b03",
        "patch": "@@ -9,7 +9,7 @@\n  * network protocol versioning\n  */\n \n-static const int PROTOCOL_VERSION = 70002;\n+static const int PROTOCOL_VERSION = 70011;\n \n //! initial proto version, to be increased after version/verack negotiation\n static const int INIT_PROTO_VERSION = 209;\n@@ -34,4 +34,7 @@ static const int BIP0031_VERSION = 60000;\n //! \"mempool\" command, enhanced \"getdata\" behavior starts with this version\n static const int MEMPOOL_GD_VERSION = 60002;\n \n+//! \"filter*\" commands are disabled without NODE_BLOOM after and including this version\n+static const int NO_BLOOM_VERSION = 70011;\n+\n #endif // BITCOIN_VERSION_H"
      }
    ]
  },
  {
    "sha": "238851bf645709c8a333f48517ffcdb29a9c1434",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMzg4NTFiZjY0NTcwOWM4YTMzM2Y0ODUxN2ZmY2RiMjlhOWMxNDM0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-09-06T15:54:41Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-09-06T16:17:35Z"
      },
      "message": "[doc] [tor] Clarify when to use bind\n\nc.f. #6585",
      "tree": {
        "sha": "23faaaf3583a7e7db64e584638372c99a300d941",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/23faaaf3583a7e7db64e584638372c99a300d941"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/238851bf645709c8a333f48517ffcdb29a9c1434",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/238851bf645709c8a333f48517ffcdb29a9c1434",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/238851bf645709c8a333f48517ffcdb29a9c1434",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/238851bf645709c8a333f48517ffcdb29a9c1434/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "536207f3167daad1fa3d60a1de7d9cb55db28ac9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/536207f3167daad1fa3d60a1de7d9cb55db28ac9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/536207f3167daad1fa3d60a1de7d9cb55db28ac9"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 8,
      "deletions": 3
    },
    "files": [
      {
        "sha": "f8b94d19d174c702d6cdf16e35547a758e26e53d",
        "filename": "doc/tor.md",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/238851bf645709c8a333f48517ffcdb29a9c1434/doc/tor.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/238851bf645709c8a333f48517ffcdb29a9c1434/doc/tor.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/tor.md?ref=238851bf645709c8a333f48517ffcdb29a9c1434",
        "patch": "@@ -70,9 +70,14 @@ In a typical situation, where you're only reachable via Tor, this should suffice\n \n \t./bitcoind -proxy=127.0.0.1:9050 -externalip=57qr3yd1nyntf5k.onion -listen\n \n-(obviously, replace the Onion address with your own). If you don't care too much\n-about hiding your node, and want to be reachable on IPv4 as well, additionally\n-specify:\n+(obviously, replace the Onion address with your own). It should be noted that you still\n+listen on all devices and another node could establish a clearnet connection, when knowing\n+your address. To mitigate this, additionally bind the address of your Tor proxy:\n+\n+\t./bitcoind ... -bind=127.0.0.1\n+\n+If you don't care too much about hiding your node, and want to be reachable on IPv4\n+as well, use `discover` instead:\n \n \t./bitcoind ... -discover\n "
      }
    ]
  },
  {
    "sha": "a1df1e870b79200c70cf6a5e3201dab1e981a2a2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMWRmMWU4NzBiNzkyMDBjNzBjZjZhNWUzMjAxZGFiMWU5ODFhMmEy",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-09-04T13:25:01Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-09-07T11:31:16Z"
      },
      "message": "[docs] add libevent dependency to build-osx.md",
      "tree": {
        "sha": "20b7da3eab4f87f21d3ae83bfb8178cba0939d4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/20b7da3eab4f87f21d3ae83bfb8178cba0939d4c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a1df1e870b79200c70cf6a5e3201dab1e981a2a2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1df1e870b79200c70cf6a5e3201dab1e981a2a2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a1df1e870b79200c70cf6a5e3201dab1e981a2a2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1df1e870b79200c70cf6a5e3201dab1e981a2a2/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d6a92dd0ea42ec64f15b81843b4db62c7b186bdb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6a92dd0ea42ec64f15b81843b4db62c7b186bdb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d6a92dd0ea42ec64f15b81843b4db62c7b186bdb"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "8fad8b5b00467fc788e5794c29a74ea89335df40",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1df1e870b79200c70cf6a5e3201dab1e981a2a2/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1df1e870b79200c70cf6a5e3201dab1e981a2a2/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=a1df1e870b79200c70cf6a5e3201dab1e981a2a2",
        "patch": "@@ -32,7 +32,7 @@ Instructions: Homebrew\n \n #### Install dependencies using Homebrew\n \n-        brew install autoconf automake berkeley-db4 libtool boost miniupnpc openssl pkg-config protobuf qt5\n+        brew install autoconf automake berkeley-db4 libtool boost miniupnpc openssl pkg-config protobuf qt5 libevent\n \n NOTE: Building with Qt4 is still supported, however, could result in a broken UI. As such, building with Qt5 is recommended.\n "
      },
      {
        "sha": "e61933ddb2763c9d9fae5c082b836ac1680ecfd4",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1df1e870b79200c70cf6a5e3201dab1e981a2a2/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1df1e870b79200c70cf6a5e3201dab1e981a2a2/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=a1df1e870b79200c70cf6a5e3201dab1e981a2a2",
        "patch": "@@ -28,7 +28,7 @@ Then, to tunnel a SSL connection on 28332 to a RPC server bound on localhost on\n It can also be set up system-wide in inetd style.\n \n Another way to re-attain SSL would be to setup a httpd reverse proxy. This solution\n-would allow the use of different authentication, loadbalancing, on-thy-fly compressing and\n+would allow the use of different authentication, loadbalancing, on-the-fly compression and\n caching. A sample config for apache2 could look like:\n \n     Listen 443"
      }
    ]
  },
  {
    "sha": "9cdc3353c5cb30b6aedf04ea8bdff9135751d72d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Y2RjMzM1M2M1Y2IzMGI2YWVkZjA0ZWE4YmRmZjkxMzU3NTFkNzJk",
    "commit": {
      "author": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2015-09-07T18:38:03Z"
      },
      "committer": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2015-09-07T18:38:03Z"
      },
      "message": "Simplify logic of REST request suffix parsing.\n\nThis patch changes the way the suffix (giving the requested data format) is\nparsed for REST requests.  Before, the string was split at '.'\ncharacters and it was assumed that the second part was the suffix.\n\nNow, we look for the last dot and use that to determine the suffix.\nThis allows for strings that contain dots (not used now, though), and\nseems, in general, to be clearer and more intuitive.",
      "tree": {
        "sha": "b6d272cdf9638a9c61241f1902cdfc25bc6a966f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b6d272cdf9638a9c61241f1902cdfc25bc6a966f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9cdc3353c5cb30b6aedf04ea8bdff9135751d72d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9cdc3353c5cb30b6aedf04ea8bdff9135751d72d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9cdc3353c5cb30b6aedf04ea8bdff9135751d72d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9cdc3353c5cb30b6aedf04ea8bdff9135751d72d/comments",
    "author": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "536207f3167daad1fa3d60a1de7d9cb55db28ac9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/536207f3167daad1fa3d60a1de7d9cb55db28ac9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/536207f3167daad1fa3d60a1de7d9cb55db28ac9"
      }
    ],
    "stats": {
      "total": 57,
      "additions": 32,
      "deletions": 25
    },
    "files": [
      {
        "sha": "226e237fc649d75bfa4811fc902791768f6c45d9",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 25,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9cdc3353c5cb30b6aedf04ea8bdff9135751d72d/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9cdc3353c5cb30b6aedf04ea8bdff9135751d72d/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=9cdc3353c5cb30b6aedf04ea8bdff9135751d72d",
        "patch": "@@ -71,15 +71,24 @@ static bool RESTERR(HTTPRequest* req, enum HTTPStatusCode status, string message\n     return false;\n }\n \n-static enum RetFormat ParseDataFormat(vector<string>& params, const string& strReq)\n+static enum RetFormat ParseDataFormat(std::string& param, const std::string& strReq)\n {\n-    boost::split(params, strReq, boost::is_any_of(\".\"));\n-    if (params.size() > 1) {\n-        for (unsigned int i = 0; i < ARRAYLEN(rf_names); i++)\n-            if (params[1] == rf_names[i].name)\n-                return rf_names[i].rf;\n+    const std::string::size_type pos = strReq.rfind('.');\n+    if (pos == std::string::npos)\n+    {\n+        param = strReq;\n+        return rf_names[0].rf;\n     }\n \n+    param = strReq.substr(0, pos);\n+    const std::string suff(strReq, pos + 1);\n+\n+    for (unsigned int i = 0; i < ARRAYLEN(rf_names); i++)\n+        if (suff == rf_names[i].name)\n+            return rf_names[i].rf;\n+\n+    /* If no suffix is found, return original string.  */\n+    param = strReq;\n     return rf_names[0].rf;\n }\n \n@@ -121,10 +130,10 @@ static bool rest_headers(HTTPRequest* req,\n {\n     if (!CheckWarmup(req))\n         return false;\n-    vector<string> params;\n-    const RetFormat rf = ParseDataFormat(params, strURIPart);\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n     vector<string> path;\n-    boost::split(path, params[0], boost::is_any_of(\"/\"));\n+    boost::split(path, param, boost::is_any_of(\"/\"));\n \n     if (path.size() != 2)\n         return RESTERR(req, HTTP_BAD_REQUEST, \"No header count specified. Use /rest/headers/<count>/<hash>.<ext>.\");\n@@ -196,10 +205,9 @@ static bool rest_block(HTTPRequest* req,\n {\n     if (!CheckWarmup(req))\n         return false;\n-    vector<string> params;\n-    const RetFormat rf = ParseDataFormat(params, strURIPart);\n+    std::string hashStr;\n+    const RetFormat rf = ParseDataFormat(hashStr, strURIPart);\n \n-    string hashStr = params[0];\n     uint256 hash;\n     if (!ParseHashStr(hashStr, hash))\n         return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n@@ -268,8 +276,8 @@ static bool rest_chaininfo(HTTPRequest* req, const std::string& strURIPart)\n {\n     if (!CheckWarmup(req))\n         return false;\n-    vector<string> params;\n-    const RetFormat rf = ParseDataFormat(params, strURIPart);\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n \n     switch (rf) {\n     case RF_JSON: {\n@@ -293,8 +301,8 @@ static bool rest_mempool_info(HTTPRequest* req, const std::string& strURIPart)\n {\n     if (!CheckWarmup(req))\n         return false;\n-    vector<string> params;\n-    const RetFormat rf = ParseDataFormat(params, strURIPart);\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n \n     switch (rf) {\n     case RF_JSON: {\n@@ -318,8 +326,8 @@ static bool rest_mempool_contents(HTTPRequest* req, const std::string& strURIPar\n {\n     if (!CheckWarmup(req))\n         return false;\n-    vector<string> params;\n-    const RetFormat rf = ParseDataFormat(params, strURIPart);\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n \n     switch (rf) {\n     case RF_JSON: {\n@@ -343,10 +351,9 @@ static bool rest_tx(HTTPRequest* req, const std::string& strURIPart)\n {\n     if (!CheckWarmup(req))\n         return false;\n-    vector<string> params;\n-    const RetFormat rf = ParseDataFormat(params, strURIPart);\n+    std::string hashStr;\n+    const RetFormat rf = ParseDataFormat(hashStr, strURIPart);\n \n-    string hashStr = params[0];\n     uint256 hash;\n     if (!ParseHashStr(hashStr, hash))\n         return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n@@ -396,13 +403,13 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n {\n     if (!CheckWarmup(req))\n         return false;\n-    vector<string> params;\n-    enum RetFormat rf = ParseDataFormat(params, strURIPart);\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n \n     vector<string> uriParts;\n-    if (params.size() > 0 && params[0].length() > 1)\n+    if (param.length() > 1)\n     {\n-        std::string strUriParams = params[0].substr(1);\n+        std::string strUriParams = param.substr(1);\n         boost::split(uriParts, strUriParams, boost::is_any_of(\"/\"));\n     }\n "
      }
    ]
  },
  {
    "sha": "7a7e68d1e2b3d7ca5899da2921a5afe5073a26f0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YTdlNjhkMWUyYjNkN2NhNTg5OWRhMjkyMWE1YWZlNTA3M2EyNmYw",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-09-07T01:13:17Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-09-07T18:49:12Z"
      },
      "message": "Prune the -prune help to reflect that the wallet is no longer disabled.\n\nThe wallet hasn't been disabled since 3201035f22fe451c808b0bb157d33a58f0d99c07.",
      "tree": {
        "sha": "bf67b425ae2e955eea5ae25114c0589354db115b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bf67b425ae2e955eea5ae25114c0589354db115b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7a7e68d1e2b3d7ca5899da2921a5afe5073a26f0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a7e68d1e2b3d7ca5899da2921a5afe5073a26f0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7a7e68d1e2b3d7ca5899da2921a5afe5073a26f0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a7e68d1e2b3d7ca5899da2921a5afe5073a26f0/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "536207f3167daad1fa3d60a1de7d9cb55db28ac9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/536207f3167daad1fa3d60a1de7d9cb55db28ac9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/536207f3167daad1fa3d60a1de7d9cb55db28ac9"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "58a6d540a8254d07d092d84e05c974beef2e0199",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a7e68d1e2b3d7ca5899da2921a5afe5073a26f0/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a7e68d1e2b3d7ca5899da2921a5afe5073a26f0/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=7a7e68d1e2b3d7ca5899da2921a5afe5073a26f0",
        "patch": "@@ -308,7 +308,7 @@ std::string HelpMessage(HelpMessageMode mode)\n #ifndef WIN32\n     strUsage += HelpMessageOpt(\"-pid=<file>\", strprintf(_(\"Specify pid file (default: %s)\"), \"bitcoind.pid\"));\n #endif\n-    strUsage += HelpMessageOpt(\"-prune=<n>\", strprintf(_(\"Reduce storage requirements by pruning (deleting) old blocks. This mode disables wallet support and is incompatible with -txindex. \"\n+    strUsage += HelpMessageOpt(\"-prune=<n>\", strprintf(_(\"Reduce storage requirements by pruning (deleting) old blocks. This mode is incompatible with -txindex and -rescan. \"\n             \"Warning: Reverting this setting requires re-downloading the entire blockchain. \"\n             \"(default: 0 = disable pruning blocks, >%u = target size in MiB to use for block files)\"), MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024));\n     strUsage += HelpMessageOpt(\"-reindex\", _(\"Rebuild block chain index from current blk000??.dat files on startup\"));"
      }
    ]
  },
  {
    "sha": "cd381d771953805a0784e17e9fa7e9c0d2524f55",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZDM4MWQ3NzE5NTM4MDVhMDc4NGUxN2U5ZmE3ZTljMGQyNTI0ZjU1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-08T12:42:53Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-08T12:51:22Z"
      },
      "message": "Merge pull request #6648\n\n9cdc335 Simplify logic of REST request suffix parsing. (Daniel Kraft)",
      "tree": {
        "sha": "b6d272cdf9638a9c61241f1902cdfc25bc6a966f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b6d272cdf9638a9c61241f1902cdfc25bc6a966f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cd381d771953805a0784e17e9fa7e9c0d2524f55",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJV7tnKAAoJEHSBCwEjRsmmKKcIAJ8q3lFHmFiqyBi+N3jOjT1B\n+tyqagHiyDEJykwSHXhZQ+LyszY5gm9VVD8d6afQSbXgk3+pO3ZLueMK+3tBjEGJ\nVDq3jngB9IgH2GjAbV8EELkYzA2pDe4c91lWqqaq3y0L7b7nAE5CoVBdPhMiQXHf\ne/eLt++Vc+bR16N8F6PzkdYiP1cE0FwyyZEuF+0nyvsmpnw+/eGmH4mMzTER1f0Z\nGy8LQA671l6t/meegG1w90MAnWBZi0UioDYpybrM8wMzRYd0kNI4GmAvdaxQyo5S\nM0i6wEHieYqrieP7+4RynfL1gmF/ykMYxH5I5XSi8YuV1AABCcrMC9o4B/d93TM=\n=0Jyi\n-----END PGP SIGNATURE-----",
        "payload": "tree b6d272cdf9638a9c61241f1902cdfc25bc6a966f\nparent 536207f3167daad1fa3d60a1de7d9cb55db28ac9\nparent 9cdc3353c5cb30b6aedf04ea8bdff9135751d72d\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1441716173 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1441716682 +0200\n\nMerge pull request #6648\n\n9cdc335 Simplify logic of REST request suffix parsing. (Daniel Kraft)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd381d771953805a0784e17e9fa7e9c0d2524f55",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cd381d771953805a0784e17e9fa7e9c0d2524f55",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd381d771953805a0784e17e9fa7e9c0d2524f55/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "536207f3167daad1fa3d60a1de7d9cb55db28ac9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/536207f3167daad1fa3d60a1de7d9cb55db28ac9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/536207f3167daad1fa3d60a1de7d9cb55db28ac9"
      },
      {
        "sha": "9cdc3353c5cb30b6aedf04ea8bdff9135751d72d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9cdc3353c5cb30b6aedf04ea8bdff9135751d72d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9cdc3353c5cb30b6aedf04ea8bdff9135751d72d"
      }
    ],
    "stats": {
      "total": 57,
      "additions": 32,
      "deletions": 25
    },
    "files": [
      {
        "sha": "226e237fc649d75bfa4811fc902791768f6c45d9",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 25,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd381d771953805a0784e17e9fa7e9c0d2524f55/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd381d771953805a0784e17e9fa7e9c0d2524f55/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=cd381d771953805a0784e17e9fa7e9c0d2524f55",
        "patch": "@@ -71,15 +71,24 @@ static bool RESTERR(HTTPRequest* req, enum HTTPStatusCode status, string message\n     return false;\n }\n \n-static enum RetFormat ParseDataFormat(vector<string>& params, const string& strReq)\n+static enum RetFormat ParseDataFormat(std::string& param, const std::string& strReq)\n {\n-    boost::split(params, strReq, boost::is_any_of(\".\"));\n-    if (params.size() > 1) {\n-        for (unsigned int i = 0; i < ARRAYLEN(rf_names); i++)\n-            if (params[1] == rf_names[i].name)\n-                return rf_names[i].rf;\n+    const std::string::size_type pos = strReq.rfind('.');\n+    if (pos == std::string::npos)\n+    {\n+        param = strReq;\n+        return rf_names[0].rf;\n     }\n \n+    param = strReq.substr(0, pos);\n+    const std::string suff(strReq, pos + 1);\n+\n+    for (unsigned int i = 0; i < ARRAYLEN(rf_names); i++)\n+        if (suff == rf_names[i].name)\n+            return rf_names[i].rf;\n+\n+    /* If no suffix is found, return original string.  */\n+    param = strReq;\n     return rf_names[0].rf;\n }\n \n@@ -121,10 +130,10 @@ static bool rest_headers(HTTPRequest* req,\n {\n     if (!CheckWarmup(req))\n         return false;\n-    vector<string> params;\n-    const RetFormat rf = ParseDataFormat(params, strURIPart);\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n     vector<string> path;\n-    boost::split(path, params[0], boost::is_any_of(\"/\"));\n+    boost::split(path, param, boost::is_any_of(\"/\"));\n \n     if (path.size() != 2)\n         return RESTERR(req, HTTP_BAD_REQUEST, \"No header count specified. Use /rest/headers/<count>/<hash>.<ext>.\");\n@@ -196,10 +205,9 @@ static bool rest_block(HTTPRequest* req,\n {\n     if (!CheckWarmup(req))\n         return false;\n-    vector<string> params;\n-    const RetFormat rf = ParseDataFormat(params, strURIPart);\n+    std::string hashStr;\n+    const RetFormat rf = ParseDataFormat(hashStr, strURIPart);\n \n-    string hashStr = params[0];\n     uint256 hash;\n     if (!ParseHashStr(hashStr, hash))\n         return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n@@ -268,8 +276,8 @@ static bool rest_chaininfo(HTTPRequest* req, const std::string& strURIPart)\n {\n     if (!CheckWarmup(req))\n         return false;\n-    vector<string> params;\n-    const RetFormat rf = ParseDataFormat(params, strURIPart);\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n \n     switch (rf) {\n     case RF_JSON: {\n@@ -293,8 +301,8 @@ static bool rest_mempool_info(HTTPRequest* req, const std::string& strURIPart)\n {\n     if (!CheckWarmup(req))\n         return false;\n-    vector<string> params;\n-    const RetFormat rf = ParseDataFormat(params, strURIPart);\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n \n     switch (rf) {\n     case RF_JSON: {\n@@ -318,8 +326,8 @@ static bool rest_mempool_contents(HTTPRequest* req, const std::string& strURIPar\n {\n     if (!CheckWarmup(req))\n         return false;\n-    vector<string> params;\n-    const RetFormat rf = ParseDataFormat(params, strURIPart);\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n \n     switch (rf) {\n     case RF_JSON: {\n@@ -343,10 +351,9 @@ static bool rest_tx(HTTPRequest* req, const std::string& strURIPart)\n {\n     if (!CheckWarmup(req))\n         return false;\n-    vector<string> params;\n-    const RetFormat rf = ParseDataFormat(params, strURIPart);\n+    std::string hashStr;\n+    const RetFormat rf = ParseDataFormat(hashStr, strURIPart);\n \n-    string hashStr = params[0];\n     uint256 hash;\n     if (!ParseHashStr(hashStr, hash))\n         return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n@@ -396,13 +403,13 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n {\n     if (!CheckWarmup(req))\n         return false;\n-    vector<string> params;\n-    enum RetFormat rf = ParseDataFormat(params, strURIPart);\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n \n     vector<string> uriParts;\n-    if (params.size() > 0 && params[0].length() > 1)\n+    if (param.length() > 1)\n     {\n-        std::string strUriParams = params[0].substr(1);\n+        std::string strUriParams = param.substr(1);\n         boost::split(uriParts, strUriParams, boost::is_any_of(\"/\"));\n     }\n "
      }
    ]
  },
  {
    "sha": "e8bb8ad85abe3d00b9dcc9f8cdbb0512b4ae46bb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOGJiOGFkODVhYmUzZDAwYjlkY2M5ZjhjZGJiMDUxMmI0YWU0NmJi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-08T13:46:09Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-08T13:50:02Z"
      },
      "message": "Merge pull request #6643\n\n238851b [doc] [tor] Clarify when to use bind (MarcoFalke)",
      "tree": {
        "sha": "5e1f04f1e8bf4202e5818678686236ff7177eab9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5e1f04f1e8bf4202e5818678686236ff7177eab9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e8bb8ad85abe3d00b9dcc9f8cdbb0512b4ae46bb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJV7ueKAAoJEHSBCwEjRsmm+JUIALNH4M2qfO+7TJHP6VLwMu77\nJLi/+aqfY0zM2OoX52frO7KBUQf6WzyZWXIZ2OeHOI7+svTg5Kw8KMmPzLh1GtSZ\nQPQGVoL91h6tt/UTCg9CiJcAWPd12O8MlLbgAT6mJ8Djro6pvvpDz+r2tD3CGOSw\nJMTvuEfnLSZCZjBfJ5mO/SzlnC6FmGXhmnluEqOs6X9g4yMYgJYkaEIK85ypnYnC\nwvJInS/ZG9O/zvh7fXIllpWttmebNOV6U2lODMOQ/oFlLtB5TGeJWlbWDHsp5+Bl\n0n0GkmteDIqzVtouDfCW9W2w0gNbb3L9Nw/ECyreQtyUtoHGc63bcl0PG1GudnA=\n=y6Ap\n-----END PGP SIGNATURE-----",
        "payload": "tree 5e1f04f1e8bf4202e5818678686236ff7177eab9\nparent cd381d771953805a0784e17e9fa7e9c0d2524f55\nparent 238851bf645709c8a333f48517ffcdb29a9c1434\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1441719969 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1441720202 +0200\n\nMerge pull request #6643\n\n238851b [doc] [tor] Clarify when to use bind (MarcoFalke)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8bb8ad85abe3d00b9dcc9f8cdbb0512b4ae46bb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e8bb8ad85abe3d00b9dcc9f8cdbb0512b4ae46bb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8bb8ad85abe3d00b9dcc9f8cdbb0512b4ae46bb/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cd381d771953805a0784e17e9fa7e9c0d2524f55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd381d771953805a0784e17e9fa7e9c0d2524f55",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cd381d771953805a0784e17e9fa7e9c0d2524f55"
      },
      {
        "sha": "238851bf645709c8a333f48517ffcdb29a9c1434",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/238851bf645709c8a333f48517ffcdb29a9c1434",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/238851bf645709c8a333f48517ffcdb29a9c1434"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 8,
      "deletions": 3
    },
    "files": [
      {
        "sha": "f8b94d19d174c702d6cdf16e35547a758e26e53d",
        "filename": "doc/tor.md",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8bb8ad85abe3d00b9dcc9f8cdbb0512b4ae46bb/doc/tor.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8bb8ad85abe3d00b9dcc9f8cdbb0512b4ae46bb/doc/tor.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/tor.md?ref=e8bb8ad85abe3d00b9dcc9f8cdbb0512b4ae46bb",
        "patch": "@@ -70,9 +70,14 @@ In a typical situation, where you're only reachable via Tor, this should suffice\n \n \t./bitcoind -proxy=127.0.0.1:9050 -externalip=57qr3yd1nyntf5k.onion -listen\n \n-(obviously, replace the Onion address with your own). If you don't care too much\n-about hiding your node, and want to be reachable on IPv4 as well, additionally\n-specify:\n+(obviously, replace the Onion address with your own). It should be noted that you still\n+listen on all devices and another node could establish a clearnet connection, when knowing\n+your address. To mitigate this, additionally bind the address of your Tor proxy:\n+\n+\t./bitcoind ... -bind=127.0.0.1\n+\n+If you don't care too much about hiding your node, and want to be reachable on IPv4\n+as well, use `discover` instead:\n \n \t./bitcoind ... -discover\n "
      }
    ]
  },
  {
    "sha": "6f6fb188b50a70edbce81a4c0b888ee7515f67b5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZjZmYjE4OGI1MGE3MGVkYmNlODFhNGMwYjg4OGVlNzUxNWY2N2I1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-08T14:23:40Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-08T14:24:08Z"
      },
      "message": "Merge pull request #6644\n\n7a7e68d Prune the -prune help to reflect that the wallet is no longer disabled. (Gregory Maxwell)",
      "tree": {
        "sha": "256d96bacab820d51388b1cb0d7a31efdfc023c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/256d96bacab820d51388b1cb0d7a31efdfc023c0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6f6fb188b50a70edbce81a4c0b888ee7515f67b5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJV7u+IAAoJEHSBCwEjRsmm8awIAMotidYCIkIQGjIrUPfLKgcQ\nNv1B526Mdmblze9vIASvjIA7jLDLZAHGnTdORyna+iBkg8/pl/IDjAxH6uYxVetq\nAVf87AfaM47MynCqYLWCIBgyf2/EeZTwhDKlmxL1Qn3HPOZ4E51h0XEdLxu09q2N\nspot0MgiK8PXpLsbfJ+xn1bnEA54fz1dIiqE4WJSqnpCP6TC8PPnG+wgoUDXdOiK\n76Y/4x9tZhW8/EdMhs/TMDxbNLZrrFN0n1XK5gPvVoY/FkvhQmnNFGckB3Y2udHH\n1E7fIty4Y/J2BiKUnWRPugLZxIlqCews7Y1/+5RJHr9+OmAi/N6cGto6mb6qMeI=\n=NKFT\n-----END PGP SIGNATURE-----",
        "payload": "tree 256d96bacab820d51388b1cb0d7a31efdfc023c0\nparent e8bb8ad85abe3d00b9dcc9f8cdbb0512b4ae46bb\nparent 7a7e68d1e2b3d7ca5899da2921a5afe5073a26f0\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1441722220 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1441722248 +0200\n\nMerge pull request #6644\n\n7a7e68d Prune the -prune help to reflect that the wallet is no longer disabled. (Gregory Maxwell)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f6fb188b50a70edbce81a4c0b888ee7515f67b5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6f6fb188b50a70edbce81a4c0b888ee7515f67b5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f6fb188b50a70edbce81a4c0b888ee7515f67b5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e8bb8ad85abe3d00b9dcc9f8cdbb0512b4ae46bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8bb8ad85abe3d00b9dcc9f8cdbb0512b4ae46bb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e8bb8ad85abe3d00b9dcc9f8cdbb0512b4ae46bb"
      },
      {
        "sha": "7a7e68d1e2b3d7ca5899da2921a5afe5073a26f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a7e68d1e2b3d7ca5899da2921a5afe5073a26f0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7a7e68d1e2b3d7ca5899da2921a5afe5073a26f0"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "58a6d540a8254d07d092d84e05c974beef2e0199",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f6fb188b50a70edbce81a4c0b888ee7515f67b5/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f6fb188b50a70edbce81a4c0b888ee7515f67b5/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=6f6fb188b50a70edbce81a4c0b888ee7515f67b5",
        "patch": "@@ -308,7 +308,7 @@ std::string HelpMessage(HelpMessageMode mode)\n #ifndef WIN32\n     strUsage += HelpMessageOpt(\"-pid=<file>\", strprintf(_(\"Specify pid file (default: %s)\"), \"bitcoind.pid\"));\n #endif\n-    strUsage += HelpMessageOpt(\"-prune=<n>\", strprintf(_(\"Reduce storage requirements by pruning (deleting) old blocks. This mode disables wallet support and is incompatible with -txindex. \"\n+    strUsage += HelpMessageOpt(\"-prune=<n>\", strprintf(_(\"Reduce storage requirements by pruning (deleting) old blocks. This mode is incompatible with -txindex and -rescan. \"\n             \"Warning: Reverting this setting requires re-downloading the entire blockchain. \"\n             \"(default: 0 = disable pruning blocks, >%u = target size in MiB to use for block files)\"), MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024));\n     strUsage += HelpMessageOpt(\"-reindex\", _(\"Rebuild block chain index from current blk000??.dat files on startup\"));"
      }
    ]
  },
  {
    "sha": "1d133d95739c8c578dca69d3f2fd875c981aa00d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZDEzM2Q5NTczOWM4YzU3OGRjYTY5ZDNmMmZkODc1Yzk4MWFhMDBk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-08T14:40:56Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-08T14:43:26Z"
      },
      "message": "Merge pull request #6640\n\neb3002b [TRIVIAL] Fix typo: exactmath -> exactmatch (paveljanik)",
      "tree": {
        "sha": "1c689440ebd16775699af6780681b28948d349d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1c689440ebd16775699af6780681b28948d349d8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d133d95739c8c578dca69d3f2fd875c981aa00d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJV7vQOAAoJEHSBCwEjRsmmmD4IAKgggNqa9N06IxI3HhHOeE+t\n+vQmJQp5GpCaLUNrH3WBc9KnbLcOOje5JxTJX0lIcLJxdajXy+Ji789wE30RoPQE\nZsmSy5ofneuFvTnaXbi7HnNEscfQE1v/pnEaMW6VgBqyhvuNQI0xHM6T4Ji75aCu\nGKtijE+63HwL2kxtJQJFj0uQrjR5QQ8SezFFyzVP7GHUwO/NLjUsSauP0bztOJjr\nCIYAvLfrXqhZFqy/6i8gXhwHfJhNZIUJJJlgBhy0M84J+S7iAJXzAlhJYJWcD+vF\ncbIbvt5OdBAaFkuEaorjSUtADayNNYmc6hA6A4M4mXpIk6g/e0qpgAbnI9/X7NQ=\n=QDw8\n-----END PGP SIGNATURE-----",
        "payload": "tree 1c689440ebd16775699af6780681b28948d349d8\nparent 6f6fb188b50a70edbce81a4c0b888ee7515f67b5\nparent eb3002bb7138db3aa4490b00be88779818b6da0d\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1441723256 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1441723406 +0200\n\nMerge pull request #6640\n\neb3002b [TRIVIAL] Fix typo: exactmath -> exactmatch (paveljanik)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d133d95739c8c578dca69d3f2fd875c981aa00d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1d133d95739c8c578dca69d3f2fd875c981aa00d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d133d95739c8c578dca69d3f2fd875c981aa00d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6f6fb188b50a70edbce81a4c0b888ee7515f67b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f6fb188b50a70edbce81a4c0b888ee7515f67b5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6f6fb188b50a70edbce81a4c0b888ee7515f67b5"
      },
      {
        "sha": "eb3002bb7138db3aa4490b00be88779818b6da0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb3002bb7138db3aa4490b00be88779818b6da0d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eb3002bb7138db3aa4490b00be88779818b6da0d"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "baca00757114bf25d44042671a736e466ef7b7f3",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d133d95739c8c578dca69d3f2fd875c981aa00d/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d133d95739c8c578dca69d3f2fd875c981aa00d/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=1d133d95739c8c578dca69d3f2fd875c981aa00d",
        "patch": "@@ -555,7 +555,7 @@ HTTPRequest::RequestMethod HTTPRequest::GetRequestMethod()\n \n void RegisterHTTPHandler(const std::string &prefix, bool exactMatch, const HTTPRequestHandler &handler)\n {\n-    LogPrint(\"http\", \"Registering HTTP handler for %s (exactmath %d)\\n\", prefix, exactMatch);\n+    LogPrint(\"http\", \"Registering HTTP handler for %s (exactmatch %d)\\n\", prefix, exactMatch);\n     pathHandlers.push_back(HTTPPathHandler(prefix, exactMatch, handler));\n }\n \n@@ -568,7 +568,7 @@ void UnregisterHTTPHandler(const std::string &prefix, bool exactMatch)\n             break;\n     if (i != iend)\n     {\n-        LogPrint(\"http\", \"Unregistering HTTP handler for %s (exactmath %d)\\n\", prefix, exactMatch);\n+        LogPrint(\"http\", \"Unregistering HTTP handler for %s (exactmatch %d)\\n\", prefix, exactMatch);\n         pathHandlers.erase(i);\n     }\n }"
      }
    ]
  },
  {
    "sha": "878ea6949193a9b4f9dc956b3fdf75f55e8d2c19",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NzhlYTY5NDkxOTNhOWI0ZjlkYzk1NmIzZmRmNzVmNTVlOGQyYzE5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-08T15:01:46Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-08T15:02:00Z"
      },
      "message": "Merge pull request #6594\n\n5ffaaba Disallow duplicate windows. (Casey Rodarmor)",
      "tree": {
        "sha": "d8373fbe0ec9d1ad2cb0124a3249cd413f112393",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d8373fbe0ec9d1ad2cb0124a3249cd413f112393"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/878ea6949193a9b4f9dc956b3fdf75f55e8d2c19",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJV7vhoAAoJEHSBCwEjRsmmv2sH/RaRaVTk/y+CL8feiYhNksWo\ne4GjL3tNBX8ewSIASSwMK0CKKK4LTswara9NzN7gKXnVGGoBj+qLfWfrY8pDtcDL\ntSeEfBJeDTICIBdYLI6FsL27PmbhgUGRAQSThczuWLC06eWqYeb9az2xDgfQ3zGV\nbjdoh03EaDBdKRbkOFAVN1roquiQ+H7bWXGFDIX7rkanejR8rz80M2kyvYiW1FaK\ndC6XIgmrPEACVyVpLFXxNfGTLJZFU2NRUTLYskZJwTSfhBXACs11ZCefFDcbl3R9\nh0imw9KcYqftzJat3tfWuX/wOvGV6ZijiIF9Y58gmwSkW/kzfsmXxCz9Q+DefEc=\n=0CBi\n-----END PGP SIGNATURE-----",
        "payload": "tree d8373fbe0ec9d1ad2cb0124a3249cd413f112393\nparent 1d133d95739c8c578dca69d3f2fd875c981aa00d\nparent 5ffaaba3a1533cc3cabe509bd09c137aa254e30f\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1441724506 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1441724520 +0200\n\nMerge pull request #6594\n\n5ffaaba Disallow duplicate windows. (Casey Rodarmor)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/878ea6949193a9b4f9dc956b3fdf75f55e8d2c19",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/878ea6949193a9b4f9dc956b3fdf75f55e8d2c19",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/878ea6949193a9b4f9dc956b3fdf75f55e8d2c19/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1d133d95739c8c578dca69d3f2fd875c981aa00d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d133d95739c8c578dca69d3f2fd875c981aa00d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1d133d95739c8c578dca69d3f2fd875c981aa00d"
      },
      {
        "sha": "5ffaaba3a1533cc3cabe509bd09c137aa254e30f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ffaaba3a1533cc3cabe509bd09c137aa254e30f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5ffaaba3a1533cc3cabe509bd09c137aa254e30f"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 21,
      "deletions": 11
    },
    "files": [
      {
        "sha": "db9e5587644738605c7e902d6f4d9d6c7d6bc616",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/878ea6949193a9b4f9dc956b3fdf75f55e8d2c19/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/878ea6949193a9b4f9dc956b3fdf75f55e8d2c19/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=878ea6949193a9b4f9dc956b3fdf75f55e8d2c19",
        "patch": "@@ -97,6 +97,7 @@ BitcoinGUI::BitcoinGUI(const PlatformStyle *platformStyle, const NetworkStyle *n\n     trayIconMenu(0),\n     notificator(0),\n     rpcConsole(0),\n+    helpMessageDialog(0),\n     prevBlocks(0),\n     spinnerFrame(0),\n     platformStyle(platformStyle)\n@@ -132,6 +133,7 @@ BitcoinGUI::BitcoinGUI(const PlatformStyle *platformStyle, const NetworkStyle *n\n #endif\n \n     rpcConsole = new RPCConsole(platformStyle, 0);\n+    helpMessageDialog = new HelpMessageDialog(this, false);\n #ifdef ENABLE_WALLET\n     if(enableWallet)\n     {\n@@ -590,9 +592,7 @@ void BitcoinGUI::aboutClicked()\n \n void BitcoinGUI::showHelpMessageClicked()\n {\n-    HelpMessageDialog *help = new HelpMessageDialog(this, false);\n-    help->setAttribute(Qt::WA_DeleteOnClose);\n-    help->show();\n+    helpMessageDialog->show();\n }\n \n #ifdef ENABLE_WALLET"
      },
      {
        "sha": "f1b7a502ba3c15d10c9ff4d9a6cc57952285a4fb",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/878ea6949193a9b4f9dc956b3fdf75f55e8d2c19/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/878ea6949193a9b4f9dc956b3fdf75f55e8d2c19/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=878ea6949193a9b4f9dc956b3fdf75f55e8d2c19",
        "patch": "@@ -28,6 +28,7 @@ class SendCoinsRecipient;\n class UnitDisplayStatusBarControl;\n class WalletFrame;\n class WalletModel;\n+class HelpMessageDialog;\n \n class CWallet;\n \n@@ -113,6 +114,7 @@ class BitcoinGUI : public QMainWindow\n     QMenu *trayIconMenu;\n     Notificator *notificator;\n     RPCConsole *rpcConsole;\n+    HelpMessageDialog *helpMessageDialog;\n \n     /** Keep track of previous number of blocks, to detect progress */\n     int prevBlocks;"
      },
      {
        "sha": "77efdb5cdd1083bcf936dcc5762a5a901c530573",
        "filename": "src/qt/walletview.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 8,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/878ea6949193a9b4f9dc956b3fdf75f55e8d2c19/src/qt/walletview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/878ea6949193a9b4f9dc956b3fdf75f55e8d2c19/src/qt/walletview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.cpp?ref=878ea6949193a9b4f9dc956b3fdf75f55e8d2c19",
        "patch": "@@ -56,6 +56,9 @@ WalletView::WalletView(const PlatformStyle *platformStyle, QWidget *parent):\n     receiveCoinsPage = new ReceiveCoinsDialog(platformStyle);\n     sendCoinsPage = new SendCoinsDialog(platformStyle);\n \n+    usedSendingAddressesPage = new AddressBookPage(platformStyle, AddressBookPage::ForEditing, AddressBookPage::SendingTab, this);\n+    usedReceivingAddressesPage = new AddressBookPage(platformStyle, AddressBookPage::ForEditing, AddressBookPage::ReceivingTab, this);\n+\n     addWidget(overviewPage);\n     addWidget(transactionsPage);\n     addWidget(receiveCoinsPage);\n@@ -115,6 +118,8 @@ void WalletView::setWalletModel(WalletModel *walletModel)\n     overviewPage->setWalletModel(walletModel);\n     receiveCoinsPage->setModel(walletModel);\n     sendCoinsPage->setModel(walletModel);\n+    usedReceivingAddressesPage->setModel(walletModel->getAddressTableModel());\n+    usedSendingAddressesPage->setModel(walletModel->getAddressTableModel());\n \n     if (walletModel)\n     {\n@@ -273,20 +278,20 @@ void WalletView::usedSendingAddresses()\n {\n     if(!walletModel)\n         return;\n-    AddressBookPage *dlg = new AddressBookPage(platformStyle, AddressBookPage::ForEditing, AddressBookPage::SendingTab, this);\n-    dlg->setAttribute(Qt::WA_DeleteOnClose);\n-    dlg->setModel(walletModel->getAddressTableModel());\n-    dlg->show();\n+\n+    usedSendingAddressesPage->show();\n+    usedSendingAddressesPage->raise();\n+    usedSendingAddressesPage->activateWindow();\n }\n \n void WalletView::usedReceivingAddresses()\n {\n     if(!walletModel)\n         return;\n-    AddressBookPage *dlg = new AddressBookPage(platformStyle, AddressBookPage::ForEditing, AddressBookPage::ReceivingTab, this);\n-    dlg->setAttribute(Qt::WA_DeleteOnClose);\n-    dlg->setModel(walletModel->getAddressTableModel());\n-    dlg->show();\n+\n+    usedReceivingAddressesPage->show();\n+    usedReceivingAddressesPage->raise();\n+    usedReceivingAddressesPage->activateWindow();\n }\n \n void WalletView::showProgress(const QString &title, int nProgress)"
      },
      {
        "sha": "2a6a6a2df2b93fb24dfa36869e727fd98fb8302f",
        "filename": "src/qt/walletview.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/878ea6949193a9b4f9dc956b3fdf75f55e8d2c19/src/qt/walletview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/878ea6949193a9b4f9dc956b3fdf75f55e8d2c19/src/qt/walletview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.h?ref=878ea6949193a9b4f9dc956b3fdf75f55e8d2c19",
        "patch": "@@ -18,6 +18,7 @@ class SendCoinsDialog;\n class SendCoinsRecipient;\n class TransactionView;\n class WalletModel;\n+class AddressBookPage;\n \n QT_BEGIN_NAMESPACE\n class QModelIndex;\n@@ -61,6 +62,8 @@ class WalletView : public QStackedWidget\n     QWidget *transactionsPage;\n     ReceiveCoinsDialog *receiveCoinsPage;\n     SendCoinsDialog *sendCoinsPage;\n+    AddressBookPage *usedSendingAddressesPage;\n+    AddressBookPage *usedReceivingAddressesPage;\n \n     TransactionView *transactionView;\n "
      }
    ]
  },
  {
    "sha": "0c2779514041b174c13d7cd3a66f1fd28e9026fa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYzI3Nzk1MTQwNDFiMTc0YzEzZDdjZDNhNjZmMWZkMjhlOTAyNmZh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-08T15:03:23Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-08T15:10:36Z"
      },
      "message": "Merge pull request #6579\n\nafb0cca Add NODE_BLOOM service bit and bump protocol version (Matt Corallo)",
      "tree": {
        "sha": "d22549d3a50e3002c8f1c94910f45325cf9ea617",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d22549d3a50e3002c8f1c94910f45325cf9ea617"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0c2779514041b174c13d7cd3a66f1fd28e9026fa",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJV7vpsAAoJEHSBCwEjRsmmR9cH/iaHdN+Mj5XOefZ1YNOzt9/F\nURsvaNgkEdIFyPSrNWyrz0sOXCT4jSw1Cwp8YEt2xl+I4N5xyvanKhKgumN9lMX7\nOdwGUHPsP0OIKTXtCEuH17/27vho3lqZuRIZAAjQTSESPWgGW5G8dvTPg5uNbLBi\npLe9ZgN+ZKYcEgKxh6DFtEkH7Ov6/8qhNURS5wX4tqPt98m9zUwabo7dHimlaNKy\nonyeU7hMUwPHxsTmSx1DTSBtbaQmkQyuo45cX2cfIMn8LjHjQhdD9pvmkb5mznGd\nRGNVhiV67lx9g0Hwo+MdViOdBv51zi4nJtfNqS+RIhkRXzVLf/JBzCsF4A0YK8A=\n=/Gim\n-----END PGP SIGNATURE-----",
        "payload": "tree d22549d3a50e3002c8f1c94910f45325cf9ea617\nparent 878ea6949193a9b4f9dc956b3fdf75f55e8d2c19\nparent afb0ccaf9c9e4e8fac7db3564c4e19c9218c6b03\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1441724603 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1441725036 +0200\n\nMerge pull request #6579\n\nafb0cca Add NODE_BLOOM service bit and bump protocol version (Matt Corallo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c2779514041b174c13d7cd3a66f1fd28e9026fa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0c2779514041b174c13d7cd3a66f1fd28e9026fa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c2779514041b174c13d7cd3a66f1fd28e9026fa/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "878ea6949193a9b4f9dc956b3fdf75f55e8d2c19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/878ea6949193a9b4f9dc956b3fdf75f55e8d2c19",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/878ea6949193a9b4f9dc956b3fdf75f55e8d2c19"
      },
      {
        "sha": "afb0ccaf9c9e4e8fac7db3564c4e19c9218c6b03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afb0ccaf9c9e4e8fac7db3564c4e19c9218c6b03",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/afb0ccaf9c9e4e8fac7db3564c4e19c9218c6b03"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 26,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a12e38ff5348bc70c1f972aa8e6900da03082543",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c2779514041b174c13d7cd3a66f1fd28e9026fa/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c2779514041b174c13d7cd3a66f1fd28e9026fa/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=0c2779514041b174c13d7cd3a66f1fd28e9026fa",
        "patch": "@@ -918,6 +918,9 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     // Option to startup with mocktime set (used for regression testing):\n     SetMockTime(GetArg(\"-mocktime\", 0)); // SetMockTime(0) is a no-op\n \n+    if (GetBoolArg(\"-peerbloomfilters\", true))\n+        nLocalServices |= NODE_BLOOM;\n+\n     // ********************************************************* Step 4: application initialization: dir lock, daemonize, pidfile, debug log\n \n     // Initialize elliptic curve code"
      },
      {
        "sha": "a880533e65010b05c1ac46d0a7d9bfa3bcbd2a98",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c2779514041b174c13d7cd3a66f1fd28e9026fa/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c2779514041b174c13d7cd3a66f1fd28e9026fa/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=0c2779514041b174c13d7cd3a66f1fd28e9026fa",
        "patch": "@@ -4591,6 +4591,21 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     }\n \n \n+    else if (!(nLocalServices & NODE_BLOOM) &&\n+              (strCommand == \"filterload\" ||\n+               strCommand == \"filteradd\" ||\n+               strCommand == \"filterclear\") &&\n+              //TODO: Remove this line after reasonable network upgrade\n+              pfrom->nVersion >= NO_BLOOM_VERSION)\n+    {\n+        if (pfrom->nVersion >= NO_BLOOM_VERSION)\n+            Misbehaving(pfrom->GetId(), 100);\n+        //TODO: Enable this after reasonable network upgrade\n+        //else\n+        //    pfrom->fDisconnect = true;\n+    }\n+\n+\n     else if (strCommand == \"filterload\")\n     {\n         CBloomFilter filter;"
      },
      {
        "sha": "50aeaf44bab191b93d8a3eecdb00506ea8b0d7e7",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c2779514041b174c13d7cd3a66f1fd28e9026fa/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c2779514041b174c13d7cd3a66f1fd28e9026fa/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=0c2779514041b174c13d7cd3a66f1fd28e9026fa",
        "patch": "@@ -75,6 +75,10 @@ enum {\n     // Bitcoin Core does not support this but a patch set called Bitcoin XT does.\n     // See BIP 64 for details on how this is implemented.\n     NODE_GETUTXO = (1 << 1),\n+    // NODE_BLOOM means the node is capable and willing to handle bloom-filtered connections.\n+    // Bitcoin Core nodes used to support this by default, without advertising this bit,\n+    // but no longer do as of protocol version 70011 (= NO_BLOOM_VERSION)\n+    NODE_BLOOM = (1 << 2),\n \n     // Bits 24-31 are reserved for temporary experiments. Just pick a bit that\n     // isn't getting used, or one not being used much, and notify the"
      },
      {
        "sha": "6cdddf92554d62e7085bf0169c69fccc8cfe4461",
        "filename": "src/version.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c2779514041b174c13d7cd3a66f1fd28e9026fa/src/version.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c2779514041b174c13d7cd3a66f1fd28e9026fa/src/version.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/version.h?ref=0c2779514041b174c13d7cd3a66f1fd28e9026fa",
        "patch": "@@ -9,7 +9,7 @@\n  * network protocol versioning\n  */\n \n-static const int PROTOCOL_VERSION = 70002;\n+static const int PROTOCOL_VERSION = 70011;\n \n //! initial proto version, to be increased after version/verack negotiation\n static const int INIT_PROTO_VERSION = 209;\n@@ -34,4 +34,7 @@ static const int BIP0031_VERSION = 60000;\n //! \"mempool\" command, enhanced \"getdata\" behavior starts with this version\n static const int MEMPOOL_GD_VERSION = 60002;\n \n+//! \"filter*\" commands are disabled without NODE_BLOOM after and including this version\n+static const int NO_BLOOM_VERSION = 70011;\n+\n #endif // BITCOIN_VERSION_H"
      }
    ]
  },
  {
    "sha": "3224936bedd8fe777b23d43c253abd2c0cd95d22",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMjI0OTM2YmVkZDhmZTc3N2IyM2Q0M2MyNTNhYmQyYzBjZDk1ZDIy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-08T15:38:03Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-08T15:38:25Z"
      },
      "message": "Merge pull request #6635\n\na1df1e8 [docs] add libevent dependency to build-osx.md (Jonas Schnelli)\nd6a92dd [release notes] mention apache reverse proxy to re-enable SSL (Jonas Schnelli)",
      "tree": {
        "sha": "17f947b8ef78edc72d571ac039ede0baa4d0d500",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/17f947b8ef78edc72d571ac039ede0baa4d0d500"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3224936bedd8fe777b23d43c253abd2c0cd95d22",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJV7wDxAAoJEHSBCwEjRsmmPt4H/R4tiO126RSAvxnfo9g6dr5M\nYoiBpvxTJ29VIfVhFJ+rruQTQ1oiNl+gzNLN8OvNrOfjg1lCPnVFL402Hh6syovg\nO847YvuSGDiycvxEFAldf6mW42v6OubGBYh5HmXfVomV2M2Ee8nGnA4n9tRCjhTt\nky87uLwy0H1psUCsvJmQpTqst1u99yr++a8GRLcWEtThQzzD5tmHUkxAzsRUpGkk\nS/DswmV7SlOW3lUTq+J14CsieYRLaMRAS+/yy+Ytou5SQcfM0wtqUP0NDiT7CnmC\n1Oiv8PkYR/HnT4UNCuJ4GYxuzUV+i3slkole/z+QNpIvI54hpn25RkrPUai9MVE=\n=CWSH\n-----END PGP SIGNATURE-----",
        "payload": "tree 17f947b8ef78edc72d571ac039ede0baa4d0d500\nparent 0c2779514041b174c13d7cd3a66f1fd28e9026fa\nparent a1df1e870b79200c70cf6a5e3201dab1e981a2a2\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1441726683 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1441726705 +0200\n\nMerge pull request #6635\n\na1df1e8 [docs] add libevent dependency to build-osx.md (Jonas Schnelli)\nd6a92dd [release notes] mention apache reverse proxy to re-enable SSL (Jonas Schnelli)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3224936bedd8fe777b23d43c253abd2c0cd95d22",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3224936bedd8fe777b23d43c253abd2c0cd95d22",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3224936bedd8fe777b23d43c253abd2c0cd95d22/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0c2779514041b174c13d7cd3a66f1fd28e9026fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c2779514041b174c13d7cd3a66f1fd28e9026fa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0c2779514041b174c13d7cd3a66f1fd28e9026fa"
      },
      {
        "sha": "a1df1e870b79200c70cf6a5e3201dab1e981a2a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1df1e870b79200c70cf6a5e3201dab1e981a2a2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a1df1e870b79200c70cf6a5e3201dab1e981a2a2"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 31,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8fad8b5b00467fc788e5794c29a74ea89335df40",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3224936bedd8fe777b23d43c253abd2c0cd95d22/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3224936bedd8fe777b23d43c253abd2c0cd95d22/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=3224936bedd8fe777b23d43c253abd2c0cd95d22",
        "patch": "@@ -32,7 +32,7 @@ Instructions: Homebrew\n \n #### Install dependencies using Homebrew\n \n-        brew install autoconf automake berkeley-db4 libtool boost miniupnpc openssl pkg-config protobuf qt5\n+        brew install autoconf automake berkeley-db4 libtool boost miniupnpc openssl pkg-config protobuf qt5 libevent\n \n NOTE: Building with Qt4 is still supported, however, could result in a broken UI. As such, building with Qt5 is recommended.\n "
      },
      {
        "sha": "e61933ddb2763c9d9fae5c082b836ac1680ecfd4",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3224936bedd8fe777b23d43c253abd2c0cd95d22/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3224936bedd8fe777b23d43c253abd2c0cd95d22/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=3224936bedd8fe777b23d43c253abd2c0cd95d22",
        "patch": "@@ -27,6 +27,36 @@ Then, to tunnel a SSL connection on 28332 to a RPC server bound on localhost on\n \n It can also be set up system-wide in inetd style.\n \n+Another way to re-attain SSL would be to setup a httpd reverse proxy. This solution\n+would allow the use of different authentication, loadbalancing, on-the-fly compression and\n+caching. A sample config for apache2 could look like:\n+\n+    Listen 443\n+\n+    NameVirtualHost *:443\n+    <VirtualHost *:443>\n+\n+    SSLEngine On\n+    SSLCertificateFile /etc/apache2/ssl/server.crt\n+    SSLCertificateKeyFile /etc/apache2/ssl/server.key\n+\n+    <Location /bitcoinrpc>\n+        ProxyPass http://127.0.0.1:8332/\n+        ProxyPassReverse http://127.0.0.1:8332/\n+        # optional enable digest auth\n+        # AuthType Digest\n+        # ...\n+        \n+        # optional bypass bitcoind rpc basic auth\n+        # RequestHeader set Authorization \"Basic <hash>\"\n+        # get the <hash> from the shell with: base64 <<< bitcoinrpc:<password>\n+    </Location>\n+\n+    # Or, balance the load:\n+    # ProxyPass / balancer://balancer_cluster_name\n+\n+    </VirtualHost>\n+\n Random-cookie RPC authentication\n ---------------------------------\n "
      }
    ]
  }
]