[
  {
    "sha": "798faec3ea208166a5a4e0676b9b565ce9e59c1e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OThmYWVjM2VhMjA4MTY2YTVhNGUwNjc2YjliNTY1Y2U5ZTU5YzFl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-11-19T08:39:42Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-11-25T11:32:51Z"
      },
      "message": "Add 'invalidateblock' and 'reconsiderblock' RPC commands.\n\nThese can be used for testing reorganizations or for manual intervention in case of\nchain forks.",
      "tree": {
        "sha": "25a6f02e6e838160ba83a46d21d573a6efc5733b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/25a6f02e6e838160ba83a46d21d573a6efc5733b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/798faec3ea208166a5a4e0676b9b565ce9e59c1e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/798faec3ea208166a5a4e0676b9b565ce9e59c1e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/798faec3ea208166a5a4e0676b9b565ce9e59c1e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/798faec3ea208166a5a4e0676b9b565ce9e59c1e/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "397b9011c9b88ccf623f798a4925228c30813530",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/397b9011c9b88ccf623f798a4925228c30813530",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/397b9011c9b88ccf623f798a4925228c30813530"
      }
    ],
    "stats": {
      "total": 159,
      "additions": 159,
      "deletions": 0
    },
    "files": [
      {
        "sha": "025577a94038cce44fd98b6c37630cec78b9662a",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 73,
        "deletions": 0,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/798faec3ea208166a5a4e0676b9b565ce9e59c1e/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/798faec3ea208166a5a4e0676b9b565ce9e59c1e/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=798faec3ea208166a5a4e0676b9b565ce9e59c1e",
        "patch": "@@ -2132,6 +2132,79 @@ bool ActivateBestChain(CValidationState &state, CBlock *pblock) {\n     return true;\n }\n \n+bool InvalidateBlock(CValidationState& state, CBlockIndex *pindex) {\n+    AssertLockHeld(cs_main);\n+\n+    // Mark the block itself as invalid.\n+    pindex->nStatus |= BLOCK_FAILED_VALID;\n+    if (!pblocktree->WriteBlockIndex(CDiskBlockIndex(pindex))) {\n+        return state.Abort(\"Failed to update block index\");\n+    }\n+    setBlockIndexCandidates.erase(pindex);\n+\n+    while (chainActive.Contains(pindex)) {\n+        CBlockIndex *pindexWalk = chainActive.Tip();\n+        pindexWalk->nStatus |= BLOCK_FAILED_CHILD;\n+        if (!pblocktree->WriteBlockIndex(CDiskBlockIndex(pindexWalk))) {\n+            return state.Abort(\"Failed to update block index\");\n+        }\n+        setBlockIndexCandidates.erase(pindexWalk);\n+        // ActivateBestChain considers blocks already in chainActive\n+        // unconditionally valid already, so force disconnect away from it.\n+        if (!DisconnectTip(state)) {\n+            return false;\n+        }\n+    }\n+\n+    // The resulting new best tip may not be in setBlockIndexCandidates anymore, so\n+    // add them again.\n+    BlockMap::iterator it = mapBlockIndex.begin();\n+    while (it != mapBlockIndex.end()) {\n+        if (it->second->IsValid(BLOCK_VALID_TRANSACTIONS) && it->second->nChainTx && setBlockIndexCandidates.value_comp()(chainActive.Tip(), it->second)) {\n+            setBlockIndexCandidates.insert(pindex);\n+        }\n+        it++;\n+    }\n+\n+    InvalidChainFound(pindex);\n+    return true;\n+}\n+\n+bool ReconsiderBlock(CValidationState& state, CBlockIndex *pindex) {\n+    AssertLockHeld(cs_main);\n+\n+    int nHeight = pindex->nHeight;\n+\n+    // Remove the invalidity flag from this block and all its descendants.\n+    BlockMap::iterator it = mapBlockIndex.begin();\n+    while (it != mapBlockIndex.end()) {\n+        if (!it->second->IsValid() && it->second->GetAncestor(nHeight) == pindex) {\n+            it->second->nStatus &= ~BLOCK_FAILED_MASK;\n+            if (!pblocktree->WriteBlockIndex(CDiskBlockIndex(pindex))) {\n+                return state.Abort(\"Failed to update block index\");\n+            }\n+            if (it->second->IsValid(BLOCK_VALID_TRANSACTIONS) && it->second->nChainTx && setBlockIndexCandidates.value_comp()(chainActive.Tip(), it->second)) {\n+                setBlockIndexCandidates.insert(it->second);\n+            }\n+            if (it->second == pindexBestInvalid) {\n+                // Reset invalid block marker if it was pointing to one of those.\n+                pindexBestInvalid = NULL;\n+            }\n+        }\n+        it++;\n+    }\n+\n+    // Remove the invalidity flag from all ancestors too.\n+    while (pindex != NULL) {\n+        pindex->nStatus &= ~BLOCK_FAILED_MASK;\n+        if (!pblocktree->WriteBlockIndex(CDiskBlockIndex(pindex))) {\n+            return state.Abort(\"Failed to update block index\");\n+        }\n+        pindex = pindex->pprev;\n+    }\n+    return true;\n+}\n+\n CBlockIndex* AddToBlockIndex(const CBlockHeader& block)\n {\n     // Check for duplicate"
      },
      {
        "sha": "aee8d9234a9b44e7b9c3cd885e6a6f8314b29dcb",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/798faec3ea208166a5a4e0676b9b565ce9e59c1e/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/798faec3ea208166a5a4e0676b9b565ce9e59c1e/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=798faec3ea208166a5a4e0676b9b565ce9e59c1e",
        "patch": "@@ -609,6 +609,12 @@ class CVerifyDB {\n /** Find the last common block between the parameter chain and a locator. */\n CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator);\n \n+/** Mark a block as invalid. */\n+bool InvalidateBlock(CValidationState& state, CBlockIndex *pindex);\n+\n+/** Remove invalidity status from a block and its descendants. */\n+bool ReconsiderBlock(CValidationState& state, CBlockIndex *pindex);\n+\n /** The currently-connected chain of blocks. */\n extern CChain chainActive;\n "
      },
      {
        "sha": "0ce18e4147fd58aebc4cabdfcafb6c592788c0e3",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 76,
        "deletions": 0,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/798faec3ea208166a5a4e0676b9b565ce9e59c1e/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/798faec3ea208166a5a4e0676b9b565ce9e59c1e/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=798faec3ea208166a5a4e0676b9b565ce9e59c1e",
        "patch": "@@ -561,3 +561,79 @@ Value getmempoolinfo(const Array& params, bool fHelp)\n     return ret;\n }\n \n+Value invalidateblock(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"invalidateblock \\\"hash\\\"\\n\"\n+            \"\\nPermanently marks a block as invalid, as if it violated a consensus rule.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. hash   (string, required) the hash of the block to mark as invalid\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"invalidateblock\", \"\\\"blockhash\\\"\")\n+            + HelpExampleRpc(\"invalidateblock\", \"\\\"blockhash\\\"\")\n+        );\n+\n+    std::string strHash = params[0].get_str();\n+    uint256 hash(strHash);\n+    CValidationState state;\n+\n+    {\n+        LOCK(cs_main);\n+        if (mapBlockIndex.count(hash) == 0)\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+\n+        CBlockIndex* pblockindex = mapBlockIndex[hash];\n+        InvalidateBlock(state, pblockindex);\n+    }\n+\n+    if (state.IsValid()) {\n+        ActivateBestChain(state);\n+    }\n+\n+    if (!state.IsValid()) {\n+        throw JSONRPCError(RPC_DATABASE_ERROR, state.GetRejectReason());\n+    }\n+\n+    return Value::null;\n+}\n+\n+Value reconsiderblock(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"reconsiderblock \\\"hash\\\"\\n\"\n+            \"\\nRemoves invalidity status of a block and its descendants, reconsider them for activation.\\n\"\n+            \"This can be used to undo the effects of invalidateblock.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. hash   (string, required) the hash of the block to reconsider\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"reconsiderblock\", \"\\\"blockhash\\\"\")\n+            + HelpExampleRpc(\"reconsiderblock\", \"\\\"blockhash\\\"\")\n+        );\n+\n+    std::string strHash = params[0].get_str();\n+    uint256 hash(strHash);\n+    CValidationState state;\n+\n+    {\n+        LOCK(cs_main);\n+        if (mapBlockIndex.count(hash) == 0)\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+\n+        CBlockIndex* pblockindex = mapBlockIndex[hash];\n+        ReconsiderBlock(state, pblockindex);\n+    }\n+\n+    if (state.IsValid()) {\n+        ActivateBestChain(state);\n+    }\n+\n+    if (!state.IsValid()) {\n+        throw JSONRPCError(RPC_DATABASE_ERROR, state.GetRejectReason());\n+    }\n+\n+    return Value::null;\n+}"
      },
      {
        "sha": "6cc96b4da3baf1a43232d376fe093bcf51ab6418",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/798faec3ea208166a5a4e0676b9b565ce9e59c1e/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/798faec3ea208166a5a4e0676b9b565ce9e59c1e/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=798faec3ea208166a5a4e0676b9b565ce9e59c1e",
        "patch": "@@ -270,6 +270,8 @@ static const CRPCCommand vRPCCommands[] =\n     { \"blockchain\",         \"gettxout\",               &gettxout,               true,      false,      false },\n     { \"blockchain\",         \"gettxoutsetinfo\",        &gettxoutsetinfo,        true,      false,      false },\n     { \"blockchain\",         \"verifychain\",            &verifychain,            true,      false,      false },\n+    { \"blockchain\",         \"invalidateblock\",        &invalidateblock,        true,      true,       false },\n+    { \"blockchain\",         \"reconsiderblock\",        &reconsiderblock,        true,      true,       false },\n \n     /* Mining */\n     { \"mining\",             \"getblocktemplate\",       &getblocktemplate,       true,      false,      false },"
      },
      {
        "sha": "6969db0287b629536e009e915d578d09f121a793",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/798faec3ea208166a5a4e0676b9b565ce9e59c1e/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/798faec3ea208166a5a4e0676b9b565ce9e59c1e/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=798faec3ea208166a5a4e0676b9b565ce9e59c1e",
        "patch": "@@ -219,6 +219,8 @@ extern json_spirit::Value gettxoutsetinfo(const json_spirit::Array& params, bool\n extern json_spirit::Value gettxout(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value verifychain(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value getchaintips(const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value invalidateblock(const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value reconsiderblock(const json_spirit::Array& params, bool fHelp);\n \n // in rest.cpp\n extern bool HTTPReq_REST(AcceptedConnection *conn,"
      }
    ]
  },
  {
    "sha": "3dd8ed72e570e9289635cfb5c3c12c807c3e8c27",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZGQ4ZWQ3MmU1NzBlOTI4OTYzNWNmYjVjM2MxMmM4MDdjM2U4YzI3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-11-25T11:33:43Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-11-25T11:33:43Z"
      },
      "message": "Delay writing block indexes in invalidate/reconsider",
      "tree": {
        "sha": "51021659e60966e5351a7f8e9b5ad84d873710c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/51021659e60966e5351a7f8e9b5ad84d873710c3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3dd8ed72e570e9289635cfb5c3c12c807c3e8c27",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3dd8ed72e570e9289635cfb5c3c12c807c3e8c27",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3dd8ed72e570e9289635cfb5c3c12c807c3e8c27",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3dd8ed72e570e9289635cfb5c3c12c807c3e8c27/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "798faec3ea208166a5a4e0676b9b565ce9e59c1e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/798faec3ea208166a5a4e0676b9b565ce9e59c1e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/798faec3ea208166a5a4e0676b9b565ce9e59c1e"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 6,
      "deletions": 12
    },
    "files": [
      {
        "sha": "621f2133389b9c704e705256a1db5de61880561e",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 12,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dd8ed72e570e9289635cfb5c3c12c807c3e8c27/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dd8ed72e570e9289635cfb5c3c12c807c3e8c27/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=3dd8ed72e570e9289635cfb5c3c12c807c3e8c27",
        "patch": "@@ -2137,17 +2137,13 @@ bool InvalidateBlock(CValidationState& state, CBlockIndex *pindex) {\n \n     // Mark the block itself as invalid.\n     pindex->nStatus |= BLOCK_FAILED_VALID;\n-    if (!pblocktree->WriteBlockIndex(CDiskBlockIndex(pindex))) {\n-        return state.Abort(\"Failed to update block index\");\n-    }\n+    setDirtyBlockIndex.insert(pindex);\n     setBlockIndexCandidates.erase(pindex);\n \n     while (chainActive.Contains(pindex)) {\n         CBlockIndex *pindexWalk = chainActive.Tip();\n         pindexWalk->nStatus |= BLOCK_FAILED_CHILD;\n-        if (!pblocktree->WriteBlockIndex(CDiskBlockIndex(pindexWalk))) {\n-            return state.Abort(\"Failed to update block index\");\n-        }\n+        setDirtyBlockIndex.insert(pindexWalk);\n         setBlockIndexCandidates.erase(pindexWalk);\n         // ActivateBestChain considers blocks already in chainActive\n         // unconditionally valid already, so force disconnect away from it.\n@@ -2180,9 +2176,7 @@ bool ReconsiderBlock(CValidationState& state, CBlockIndex *pindex) {\n     while (it != mapBlockIndex.end()) {\n         if (!it->second->IsValid() && it->second->GetAncestor(nHeight) == pindex) {\n             it->second->nStatus &= ~BLOCK_FAILED_MASK;\n-            if (!pblocktree->WriteBlockIndex(CDiskBlockIndex(pindex))) {\n-                return state.Abort(\"Failed to update block index\");\n-            }\n+            setDirtyBlockIndex.insert(it->second);\n             if (it->second->IsValid(BLOCK_VALID_TRANSACTIONS) && it->second->nChainTx && setBlockIndexCandidates.value_comp()(chainActive.Tip(), it->second)) {\n                 setBlockIndexCandidates.insert(it->second);\n             }\n@@ -2196,9 +2190,9 @@ bool ReconsiderBlock(CValidationState& state, CBlockIndex *pindex) {\n \n     // Remove the invalidity flag from all ancestors too.\n     while (pindex != NULL) {\n-        pindex->nStatus &= ~BLOCK_FAILED_MASK;\n-        if (!pblocktree->WriteBlockIndex(CDiskBlockIndex(pindex))) {\n-            return state.Abort(\"Failed to update block index\");\n+        if (pindex->nStatus & BLOCK_FAILED_MASK) {\n+            pindex->nStatus &= ~BLOCK_FAILED_MASK;\n+            setDirtyBlockIndex.insert(pindex);\n         }\n         pindex = pindex->pprev;\n     }"
      }
    ]
  },
  {
    "sha": "b2d0162ba48557c585822cabda41fe238420fabe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMmQwMTYyYmE0ODU1N2M1ODU4MjJjYWJkYTQxZmUyMzg0MjBmYWJl",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-11-25T20:21:39Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-12-02T16:09:25Z"
      },
      "message": "Test resurrecting memory pool transactions during chain re-org\n\nBuilds on #5316.",
      "tree": {
        "sha": "a21b363fca0a0be6a5b555886c0a53f649d305fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a21b363fca0a0be6a5b555886c0a53f649d305fa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b2d0162ba48557c585822cabda41fe238420fabe",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niEYEABECAAYFAlR95DcACgkQdYgkL74406hzQQCg28lc0AAQnZv6m3/YT3tCc4MO\n144AnRM+0RB2CAAzLwqfm2WN01+VRxA8\n=jVU4\n-----END PGP SIGNATURE-----",
        "payload": "tree a21b363fca0a0be6a5b555886c0a53f649d305fa\nparent 3dd8ed72e570e9289635cfb5c3c12c807c3e8c27\nauthor Gavin Andresen <gavinandresen@gmail.com> 1416946899 -0500\ncommitter Gavin Andresen <gavinandresen@gmail.com> 1417536565 -0500\n\nTest resurrecting memory pool transactions during chain re-org\n\nBuilds on #5316.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2d0162ba48557c585822cabda41fe238420fabe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b2d0162ba48557c585822cabda41fe238420fabe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2d0162ba48557c585822cabda41fe238420fabe/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3dd8ed72e570e9289635cfb5c3c12c807c3e8c27",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3dd8ed72e570e9289635cfb5c3c12c807c3e8c27",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3dd8ed72e570e9289635cfb5c3c12c807c3e8c27"
      }
    ],
    "stats": {
      "total": 89,
      "additions": 89,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5b52c4b751bcaab84c91ddc2766a4d2a0302e724",
        "filename": "qa/pull-tester/rpc-tests.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2d0162ba48557c585822cabda41fe238420fabe/qa/pull-tester/rpc-tests.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2d0162ba48557c585822cabda41fe238420fabe/qa/pull-tester/rpc-tests.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.sh?ref=b2d0162ba48557c585822cabda41fe238420fabe",
        "patch": "@@ -18,6 +18,7 @@ fi\n if [ \"x${ENABLE_BITCOIND}${ENABLE_UTILS}${ENABLE_WALLET}\" = \"x111\" ]; then\n   ${BUILDDIR}/qa/rpc-tests/wallet.py --srcdir \"${BUILDDIR}/src\"\n   ${BUILDDIR}/qa/rpc-tests/listtransactions.py --srcdir \"${BUILDDIR}/src\"\n+  ${BUILDDIR}/qa/rpc-tests/mempool_resurrect_test.py --srcdir \"${BUILDDIR}/src\"\n   ${BUILDDIR}/qa/rpc-tests/txn_doublespend.py --srcdir \"${BUILDDIR}/src\"\n   ${BUILDDIR}/qa/rpc-tests/txn_doublespend.py --mineblock --srcdir \"${BUILDDIR}/src\"\n   #${BUILDDIR}/qa/rpc-tests/forknotify.py --srcdir \"${BUILDDIR}/src\""
      },
      {
        "sha": "907cbf98f962bf17ef350507047f89fb0b7a0356",
        "filename": "qa/rpc-tests/mempool_resurrect_test.py",
        "status": "added",
        "additions": 88,
        "deletions": 0,
        "changes": 88,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2d0162ba48557c585822cabda41fe238420fabe/qa/rpc-tests/mempool_resurrect_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2d0162ba48557c585822cabda41fe238420fabe/qa/rpc-tests/mempool_resurrect_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_resurrect_test.py?ref=b2d0162ba48557c585822cabda41fe238420fabe",
        "patch": "@@ -0,0 +1,88 @@\n+#!/usr/bin/env python\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test resurrection of mined transactions when\n+# the blockchain is re-organized.\n+#\n+\n+from test_framework import BitcoinTestFramework\n+from bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException\n+from util import *\n+import os\n+import shutil\n+\n+# Create one-input, one-output, no-fee transaction:\n+class MempoolCoinbaseTest(BitcoinTestFramework):\n+\n+    def setup_network(self):\n+        # Just need one node for this test\n+        args = [\"-checkmempool\", \"-debug=mempool\"]\n+        self.nodes = []\n+        self.nodes.append(start_node(0, self.options.tmpdir, args))\n+        self.is_network_split = False\n+\n+    def create_tx(self, from_txid, to_address, amount):\n+        inputs = [{ \"txid\" : from_txid, \"vout\" : 0}]\n+        outputs = { to_address : amount }\n+        rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n+        signresult = self.nodes[0].signrawtransaction(rawtx)\n+        assert_equal(signresult[\"complete\"], True)\n+        return signresult[\"hex\"]\n+\n+    def run_test(self):\n+        node0_address = self.nodes[0].getnewaddress()\n+\n+        # Spend block 1/2/3's coinbase transactions\n+        # Mine a block.\n+        # Create three more transactions, spending the spends\n+        # Mine another block.\n+        # ... make sure all the transactions are confirmed\n+        # Invalidate both blocks\n+        # ... make sure all the transactions are put back in the mempool\n+        # Mine a new block\n+        # ... make sure all the transactions are confirmed again.\n+\n+        b = [ self.nodes[0].getblockhash(n) for n in range(1, 4) ]\n+        coinbase_txids = [ self.nodes[0].getblock(h)['tx'][0] for h in b ]\n+        spends1_raw = [ self.create_tx(txid, node0_address, 50) for txid in coinbase_txids ]\n+        spends1_id = [ self.nodes[0].sendrawtransaction(tx) for tx in spends1_raw ]\n+\n+        blocks = []\n+        blocks.extend(self.nodes[0].setgenerate(True, 1))\n+\n+        spends2_raw = [ self.create_tx(txid, node0_address, 49.99) for txid in spends1_id ]\n+        spends2_id = [ self.nodes[0].sendrawtransaction(tx) for tx in spends2_raw ]\n+\n+        blocks.extend(self.nodes[0].setgenerate(True, 1))\n+\n+        # mempool should be empty, all txns confirmed\n+        assert_equal(set(self.nodes[0].getrawmempool()), set())\n+        for txid in spends1_id+spends2_id:\n+            tx = self.nodes[0].gettransaction(txid)\n+            assert(tx[\"confirmations\"] > 0)\n+\n+        # Use invalidateblock to re-org back; all transactions should\n+        # end up unconfirmed and back in the mempool\n+        for node in self.nodes:\n+            node.invalidateblock(blocks[0])\n+\n+        # mempool should be empty, all txns confirmed\n+        assert_equal(set(self.nodes[0].getrawmempool()), set(spends1_id+spends2_id))\n+        for txid in spends1_id+spends2_id:\n+            tx = self.nodes[0].gettransaction(txid)\n+            assert(tx[\"confirmations\"] == 0)\n+\n+        # Generate another block, they should all get mined\n+        self.nodes[0].setgenerate(True, 1)\n+        # mempool should be empty, all txns confirmed\n+        assert_equal(set(self.nodes[0].getrawmempool()), set())\n+        for txid in spends1_id+spends2_id:\n+            tx = self.nodes[0].gettransaction(txid)\n+            assert(tx[\"confirmations\"] > 0)\n+\n+\n+if __name__ == '__main__':\n+    MempoolCoinbaseTest().main()"
      }
    ]
  }
]