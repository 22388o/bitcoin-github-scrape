[
  {
    "sha": "0b06e720c0182dee8b560d2e8d3891b036f63ea7",
    "node_id": "C_kwDOABII59oAKDBiMDZlNzIwYzAxODJkZWU4YjU2MGQyZThkMzg5MWIwMzZmNjNlYTc",
    "commit": {
      "author": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-09-30T23:14:48Z"
      },
      "committer": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-10-11T23:03:14Z"
      },
      "message": "More detailed error checking for base58 addresses",
      "tree": {
        "sha": "58a88962dec904fad592d88021808fea26ed10c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/58a88962dec904fad592d88021808fea26ed10c7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0b06e720c0182dee8b560d2e8d3891b036f63ea7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b06e720c0182dee8b560d2e8d3891b036f63ea7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0b06e720c0182dee8b560d2e8d3891b036f63ea7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b06e720c0182dee8b560d2e8d3891b036f63ea7/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1790a8ddacae0d52135f5020894ef1ceef625cf9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1790a8ddacae0d52135f5020894ef1ceef625cf9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1790a8ddacae0d52135f5020894ef1ceef625cf9"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 27,
      "deletions": 11
    },
    "files": [
      {
        "sha": "9e246c0b81f21853bb4e2ee70e9ee65970105963",
        "filename": "src/key_io.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 7,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b06e720c0182dee8b560d2e8d3891b036f63ea7/src/key_io.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b06e720c0182dee8b560d2e8d3891b036f63ea7/src/key_io.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key_io.cpp?ref=0b06e720c0182dee8b560d2e8d3891b036f63ea7",
        "patch": "@@ -81,7 +81,11 @@ CTxDestination DecodeDestination(const std::string& str, const CChainParams& par\n     std::vector<unsigned char> data;\n     uint160 hash;\n     error_str = \"\";\n-    if (DecodeBase58Check(str, data, 21)) {\n+\n+    // Note this will be false if it is a valid Bech32 address for a different network\n+    bool is_bech32 = (ToLower(str.substr(0, params.Bech32HRP().size())) == params.Bech32HRP());\n+\n+    if (!is_bech32 && DecodeBase58Check(str, data, 21)) {\n         // base58-encoded Bitcoin addresses.\n         // Public-key-hash-addresses have version 0 (or 111 testnet).\n         // The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n@@ -98,15 +102,27 @@ CTxDestination DecodeDestination(const std::string& str, const CChainParams& par\n             return ScriptHash(hash);\n         }\n \n-        // Set potential error message.\n-        // This message may be changed if the address can also be interpreted as a Bech32 address.\n-        error_str = \"Invalid prefix for Base58-encoded address\";\n+        if (!std::equal(script_prefix.begin(), script_prefix.end(), data.begin()) &&\n+            !std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin())) {\n+            error_str = \"Invalid prefix for Base58-encoded address\";\n+        } else {\n+            error_str = \"Invalid length for Base58 address\";\n+        }\n+        return CNoDestination();\n+    } else if (!is_bech32) {\n+        // Try Base58 decoding without the checksum, using a much larger max length\n+        if (!DecodeBase58(str, data, 100)) {\n+            error_str = \"Invalid HRP or Base58 character in address\";\n+        } else {\n+            error_str = \"Invalid checksum or length of Base58 address\";\n+        }\n+        return CNoDestination();\n     }\n+\n     data.clear();\n     const auto dec = bech32::Decode(str);\n     if ((dec.encoding == bech32::Encoding::BECH32 || dec.encoding == bech32::Encoding::BECH32M) && dec.data.size() > 0) {\n         // Bech32 decoding\n-        error_str = \"\";\n         if (dec.hrp != params.Bech32HRP()) {\n             error_str = \"Invalid prefix for Bech32 address\";\n             return CNoDestination();\n@@ -168,8 +184,8 @@ CTxDestination DecodeDestination(const std::string& str, const CChainParams& par\n         }\n     }\n \n-    // Set error message if address can't be interpreted as Base58 or Bech32.\n-    if (error_str.empty()) error_str = \"Invalid address format\";\n+    //TODO: locate Bech32 errors\n+    error_str = \"Error in Bech32 encoding\";\n \n     return CNoDestination();\n }"
      },
      {
        "sha": "38008cbf424ceb49ac5c030d097ae7ccca54c9c9",
        "filename": "test/functional/rpc_invalid_address_message.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b06e720c0182dee8b560d2e8d3891b036f63ea7/test/functional/rpc_invalid_address_message.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b06e720c0182dee8b560d2e8d3891b036f63ea7/test/functional/rpc_invalid_address_message.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_invalid_address_message.py?ref=0b06e720c0182dee8b560d2e8d3891b036f63ea7",
        "patch": "@@ -39,7 +39,7 @@ def test_validateaddress(self):\n \n         info = node.validateaddress(BECH32_INVALID_PREFIX)\n         assert not info['isvalid']\n-        assert_equal(info['error'], 'Invalid prefix for Bech32 address')\n+        assert_equal(info['error'], 'Invalid HRP or Base58 character in address')\n \n         info = node.validateaddress(BECH32_INVALID_BECH32)\n         assert not info['isvalid']\n@@ -73,18 +73,18 @@ def test_validateaddress(self):\n         # Invalid address format\n         info = node.validateaddress(INVALID_ADDRESS)\n         assert not info['isvalid']\n-        assert_equal(info['error'], 'Invalid address format')\n+        assert_equal(info['error'], 'Invalid HRP or Base58 character in address')\n \n     def test_getaddressinfo(self):\n         node = self.nodes[0]\n \n         assert_raises_rpc_error(-5, \"Invalid Bech32 address data size\", node.getaddressinfo, BECH32_INVALID_SIZE)\n \n-        assert_raises_rpc_error(-5, \"Invalid prefix for Bech32 address\", node.getaddressinfo, BECH32_INVALID_PREFIX)\n+        assert_raises_rpc_error(-5, \"Invalid HRP or Base58 character in address\", node.getaddressinfo, BECH32_INVALID_PREFIX)\n \n         assert_raises_rpc_error(-5, \"Invalid prefix for Base58-encoded address\", node.getaddressinfo, BASE58_INVALID_PREFIX)\n \n-        assert_raises_rpc_error(-5, \"Invalid address format\", node.getaddressinfo, INVALID_ADDRESS)\n+        assert_raises_rpc_error(-5, \"Invalid HRP or Base58 character in address\", node.getaddressinfo, INVALID_ADDRESS)\n \n     def run_test(self):\n         self.test_validateaddress()"
      }
    ]
  },
  {
    "sha": "b62b67e06cc406fdad68da4c091168fb5f11c1d4",
    "node_id": "C_kwDOABII59oAKGI2MmI2N2UwNmNjNDA2ZmRhZDY4ZGE0YzA5MTE2OGZiNWYxMWMxZDQ",
    "commit": {
      "author": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-09-30T23:16:20Z"
      },
      "committer": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-10-11T23:03:14Z"
      },
      "message": "Add Bech32 error location function",
      "tree": {
        "sha": "1c70b946c4c6c2003dc0186773bb4949e5fa0f8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1c70b946c4c6c2003dc0186773bb4949e5fa0f8c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b62b67e06cc406fdad68da4c091168fb5f11c1d4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b62b67e06cc406fdad68da4c091168fb5f11c1d4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b62b67e06cc406fdad68da4c091168fb5f11c1d4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b62b67e06cc406fdad68da4c091168fb5f11c1d4/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0b06e720c0182dee8b560d2e8d3891b036f63ea7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b06e720c0182dee8b560d2e8d3891b036f63ea7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0b06e720c0182dee8b560d2e8d3891b036f63ea7"
      }
    ],
    "stats": {
      "total": 341,
      "additions": 326,
      "deletions": 15
    },
    "files": [
      {
        "sha": "905a2aa2c090c1dadebf6ad0bde1800f7c096bfd",
        "filename": "src/bech32.cpp",
        "status": "modified",
        "additions": 311,
        "deletions": 8,
        "changes": 319,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b62b67e06cc406fdad68da4c091168fb5f11c1d4/src/bech32.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b62b67e06cc406fdad68da4c091168fb5f11c1d4/src/bech32.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bech32.cpp?ref=b62b67e06cc406fdad68da4c091168fb5f11c1d4",
        "patch": "@@ -30,6 +30,155 @@ const int8_t CHARSET_REV[128] = {\n      1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n };\n \n+\n+const int16_t GF1024_EXP[] = {\n+    1, 303, 635, 446, 997, 640, 121, 142, 959, 420, 350, 438, 166, 39, 543,\n+    335, 831, 691, 117, 632, 719, 97, 107, 374, 558, 797, 54, 150, 858, 877,\n+    724, 1013, 294, 23, 354, 61, 164, 633, 992, 538, 469, 659, 174, 868, 184,\n+    809, 766, 563, 866, 851, 257, 520, 45, 770, 535, 524, 408, 213, 436, 760,\n+    472, 330, 933, 799, 616, 361, 15, 391, 756, 814, 58, 608, 554, 680, 993,\n+    821, 942, 813, 843, 484, 193, 935, 321, 919, 572, 741, 423, 559, 562,\n+    589, 296, 191, 493, 685, 891, 665, 435, 60, 395, 2, 606, 511, 853, 746,\n+    32, 219, 284, 631, 840, 661, 837, 332, 78, 311, 670, 887, 111, 195, 505,\n+    190, 194, 214, 709, 380, 819, 69, 261, 957, 1018, 161, 739, 588, 7, 708,\n+    83, 328, 507, 736, 317, 899, 47, 348, 1000, 345, 882, 245, 367, 996, 943,\n+    514, 304, 90, 804, 295, 312, 793, 387, 833, 249, 921, 660, 618, 823, 496,\n+    722, 30, 782, 225, 892, 93, 480, 372, 112, 738, 867, 636, 890, 950, 968,\n+    386, 622, 642, 551, 369, 234, 846, 382, 365, 442, 592, 343, 986, 122,\n+    1023, 59, 847, 81, 790, 4, 437, 983, 931, 244, 64, 415, 529, 487, 944,\n+    35, 938, 664, 156, 583, 53, 999, 222, 390, 987, 341, 388, 389, 170, 721,\n+    879, 138, 522, 627, 765, 322, 230, 440, 14, 168, 143, 656, 991, 224, 595,\n+    550, 94, 657, 752, 667, 1005, 451, 734, 744, 638, 292, 585, 157, 872,\n+    590, 601, 827, 774, 930, 475, 571, 33, 500, 871, 969, 173, 21, 828, 450,\n+    1009, 147, 960, 705, 201, 228, 998, 497, 1021, 613, 688, 772, 508, 36,\n+    366, 715, 468, 956, 725, 730, 861, 425, 647, 701, 221, 759, 95, 958, 139,\n+    805, 8, 835, 679, 614, 449, 128, 791, 299, 974, 617, 70, 628, 57, 273,\n+    430, 67, 750, 405, 780, 703, 643, 776, 778, 340, 171, 1022, 276, 308,\n+    495, 243, 644, 460, 857, 28, 336, 286, 41, 695, 448, 431, 364, 149, 43,\n+    233, 63, 762, 902, 181, 240, 501, 584, 434, 275, 1008, 444, 443, 895,\n+    812, 612, 927, 383, 66, 961, 1006, 690, 346, 3, 881, 900, 747, 271, 672,\n+    162, 402, 456, 748, 971, 755, 490, 105, 808, 977, 72, 732, 182, 897, 625,\n+    163, 189, 947, 850, 46, 115, 403, 231, 151, 629, 278, 874, 16, 934, 110,\n+    492, 898, 256, 807, 598, 700, 498, 140, 481, 91, 523, 860, 134, 252, 771,\n+    824, 119, 38, 816, 820, 641, 342, 757, 513, 577, 990, 463, 40, 920, 955,\n+    17, 649, 533, 82, 103, 896, 862, 728, 259, 86, 466, 87, 253, 556, 323,\n+    457, 963, 432, 845, 527, 745, 849, 863, 1015, 888, 488, 567, 727, 132,\n+    674, 764, 109, 669, 6, 1003, 552, 246, 542, 96, 324, 781, 912, 248, 694,\n+    239, 980, 210, 880, 683, 144, 177, 325, 546, 491, 326, 339, 623, 941, 92,\n+    207, 783, 462, 263, 483, 517, 1012, 9, 620, 220, 984, 548, 512, 878, 421,\n+    113, 973, 280, 962, 159, 310, 945, 268, 465, 806, 889, 199, 76, 873, 865,\n+    34, 645, 227, 290, 418, 693, 926, 80, 569, 639, 11, 50, 291, 141, 206,\n+    544, 949, 185, 518, 133, 909, 135, 467, 376, 646, 914, 678, 841, 954,\n+    318, 242, 939, 951, 743, 1017, 976, 359, 167, 264, 100, 241, 218, 51, 12,\n+    758, 368, 453, 309, 192, 648, 826, 553, 473, 101, 478, 673, 397, 1001,\n+    118, 265, 331, 650, 356, 982, 652, 655, 510, 634, 145, 414, 830, 924,\n+    526, 966, 298, 737, 18, 504, 401, 697, 360, 288, 1020, 842, 203, 698,\n+    537, 676, 279, 581, 619, 536, 907, 876, 1019, 398, 152, 1010, 994, 68,\n+    42, 454, 580, 836, 99, 565, 137, 379, 503, 22, 77, 582, 282, 412, 352,\n+    611, 347, 300, 266, 570, 270, 911, 729, 44, 557, 108, 946, 637, 597, 461,\n+    630, 615, 238, 763, 681, 718, 334, 528, 200, 459, 413, 79, 24, 229, 713,\n+    906, 579, 384, 48, 893, 370, 923, 202, 917, 98, 794, 754, 197, 530, 662,\n+    52, 712, 677, 56, 62, 981, 509, 267, 789, 885, 561, 316, 684, 596, 226,\n+    13, 985, 779, 123, 720, 576, 753, 948, 406, 125, 315, 104, 519, 426, 502,\n+    313, 566, 1016, 767, 796, 281, 749, 740, 136, 84, 908, 424, 936, 198,\n+    355, 274, 735, 967, 5, 154, 428, 541, 785, 704, 486, 671, 600, 532, 381,\n+    540, 574, 187, 88, 378, 216, 621, 499, 419, 922, 485, 494, 476, 255, 114,\n+    188, 668, 297, 400, 918, 787, 158, 25, 458, 178, 564, 422, 768, 73, 1011,\n+    717, 575, 404, 547, 196, 829, 237, 394, 301, 37, 65, 176, 106, 89, 85,\n+    675, 979, 534, 803, 995, 363, 593, 120, 417, 452, 26, 699, 822, 223, 169,\n+    416, 235, 609, 773, 211, 607, 208, 302, 852, 965, 603, 357, 761, 247,\n+    817, 539, 250, 232, 272, 129, 568, 848, 624, 396, 710, 525, 183, 686, 10,\n+    285, 856, 307, 811, 160, 972, 55, 441, 289, 723, 305, 373, 351, 153, 733,\n+    409, 506, 975, 838, 573, 970, 988, 913, 471, 205, 337, 49, 594, 777, 549,\n+    815, 277, 27, 916, 333, 353, 844, 800, 146, 751, 186, 375, 769, 358, 392,\n+    883, 474, 788, 602, 74, 130, 329, 212, 155, 131, 102, 687, 293, 870, 742,\n+    726, 427, 217, 834, 904, 29, 127, 869, 407, 338, 832, 470, 482, 810, 399,\n+    439, 393, 604, 929, 682, 447, 714, 251, 455, 875, 319, 477, 464, 521,\n+    258, 377, 937, 489, 792, 172, 314, 327, 124, 20, 531, 953, 591, 886, 320,\n+    696, 71, 859, 578, 175, 587, 707, 663, 283, 179, 795, 989, 702, 940, 371,\n+    692, 689, 555, 903, 410, 651, 75, 429, 818, 362, 894, 515, 31, 545, 666,\n+    706, 952, 864, 269, 254, 349, 711, 802, 716, 784, 1007, 925, 801, 445,\n+    148, 260, 658, 385, 287, 262, 204, 126, 586, 1004, 236, 165, 854, 411,\n+    932, 560, 19, 215, 1002, 775, 653, 928, 901, 964, 884, 798, 839, 786,\n+    433, 610, 116, 855, 180, 479, 910, 1014, 599, 915, 905, 306, 516, 731,\n+    626, 978, 825, 344, 605, 654, 209\n+};\n+static_assert(std::size(GF1024_EXP) == 1023, \"GF1024_EXP length should be 1023\");\n+\n+const int16_t GF1024_LOG[] = {\n+    -1, 0, 99, 363, 198, 726, 462, 132, 297, 495, 825, 528, 561, 693, 231,\n+    66, 396, 429, 594, 990, 924, 264, 627, 33, 660, 759, 792, 858, 330, 891,\n+    165, 957, 104, 259, 518, 208, 280, 776, 416, 13, 426, 333, 618, 339, 641,\n+    52, 388, 140, 666, 852, 529, 560, 678, 213, 26, 832, 681, 309, 70, 194,\n+    97, 35, 682, 341, 203, 777, 358, 312, 617, 125, 307, 931, 379, 765, 875,\n+    951, 515, 628, 112, 659, 525, 196, 432, 134, 717, 781, 438, 440, 740,\n+    780, 151, 408, 487, 169, 239, 293, 467, 21, 672, 622, 557, 571, 881, 433,\n+    704, 376, 779, 22, 643, 460, 398, 116, 172, 503, 751, 389, 1004, 18, 576,\n+    415, 789, 6, 192, 696, 923, 702, 981, 892, 302, 816, 876, 880, 457, 537,\n+    411, 539, 716, 624, 224, 295, 406, 531, 7, 233, 478, 586, 864, 268, 974,\n+    338, 27, 392, 614, 839, 727, 879, 211, 250, 758, 507, 830, 129, 369, 384,\n+    36, 985, 12, 555, 232, 796, 221, 321, 920, 263, 42, 934, 778, 479, 761,\n+    939, 1006, 344, 381, 823, 44, 535, 866, 739, 752, 385, 119, 91, 566, 80,\n+    120, 117, 771, 675, 721, 514, 656, 271, 670, 602, 980, 850, 532, 488,\n+    803, 1022, 475, 801, 878, 57, 121, 991, 742, 888, 559, 105, 497, 291,\n+    215, 795, 236, 167, 692, 520, 272, 661, 229, 391, 814, 340, 184, 798,\n+    984, 773, 650, 473, 345, 558, 548, 326, 202, 145, 465, 810, 471, 158,\n+    813, 908, 412, 441, 964, 750, 401, 50, 915, 437, 975, 126, 979, 491, 556,\n+    577, 636, 685, 510, 963, 638, 367, 815, 310, 723, 349, 323, 857, 394,\n+    606, 505, 713, 630, 938, 106, 826, 332, 978, 599, 834, 521, 530, 248,\n+    883, 32, 153, 90, 754, 592, 304, 635, 775, 804, 1, 150, 836, 1013, 828,\n+    324, 565, 508, 113, 154, 708, 921, 703, 689, 138, 547, 911, 929, 82, 228,\n+    443, 468, 480, 483, 922, 135, 877, 61, 578, 111, 860, 654, 15, 331, 851,\n+    895, 484, 320, 218, 420, 190, 1019, 143, 362, 634, 141, 965, 10, 838,\n+    632, 861, 34, 722, 580, 808, 869, 554, 598, 65, 954, 787, 337, 187, 281,\n+    146, 563, 183, 668, 944, 171, 837, 23, 867, 541, 916, 741, 625, 123, 736,\n+    186, 357, 665, 977, 179, 156, 219, 220, 216, 67, 870, 902, 774, 98, 820,\n+    574, 613, 900, 755, 596, 370, 390, 769, 314, 701, 894, 56, 841, 949, 987,\n+    631, 658, 587, 204, 797, 790, 522, 745, 9, 502, 763, 86, 719, 288, 706,\n+    887, 728, 952, 311, 336, 446, 1002, 348, 96, 58, 199, 11, 901, 230, 833,\n+    188, 352, 351, 973, 3, 906, 335, 301, 266, 244, 791, 564, 619, 909, 371,\n+    444, 760, 657, 328, 647, 490, 425, 913, 511, 439, 540, 283, 40, 897, 849,\n+    60, 570, 872, 257, 749, 912, 572, 1007, 170, 407, 898, 492, 79, 747, 732,\n+    206, 454, 918, 375, 482, 399, 92, 748, 325, 163, 274, 405, 744, 260, 346,\n+    707, 626, 595, 118, 842, 136, 279, 684, 584, 101, 500, 422, 149, 956,\n+    1014, 493, 536, 705, 51, 914, 225, 409, 55, 822, 590, 448, 655, 205, 676,\n+    925, 735, 431, 784, 54, 609, 604, 39, 812, 737, 729, 466, 14, 533, 958,\n+    481, 770, 499, 855, 238, 182, 464, 569, 72, 947, 442, 642, 24, 87, 989,\n+    688, 88, 47, 762, 623, 709, 455, 817, 526, 637, 258, 84, 845, 738, 768,\n+    698, 423, 933, 664, 620, 607, 629, 212, 347, 249, 982, 935, 131, 89, 252,\n+    927, 189, 788, 853, 237, 691, 646, 403, 1010, 734, 253, 874, 807, 903,\n+    1020, 100, 802, 71, 799, 1003, 633, 355, 276, 300, 649, 64, 306, 161,\n+    608, 496, 743, 180, 485, 819, 383, 1016, 226, 308, 393, 648, 107, 19, 37,\n+    585, 2, 175, 645, 247, 527, 5, 419, 181, 317, 327, 519, 542, 289, 567,\n+    430, 579, 950, 582, 994, 1021, 583, 234, 240, 976, 41, 160, 109, 677,\n+    937, 210, 95, 959, 242, 753, 461, 114, 733, 368, 573, 458, 782, 605, 680,\n+    544, 299, 73, 652, 905, 477, 690, 93, 824, 882, 277, 946, 361, 17, 945,\n+    523, 472, 334, 930, 597, 603, 793, 404, 290, 942, 316, 731, 270, 960,\n+    936, 133, 122, 821, 966, 679, 662, 907, 282, 968, 767, 653, 20, 697, 222,\n+    164, 835, 30, 285, 886, 456, 436, 640, 286, 1015, 380, 840, 245, 724,\n+    137, 593, 173, 130, 715, 85, 885, 551, 246, 449, 103, 366, 372, 714, 313,\n+    865, 241, 699, 674, 374, 68, 421, 562, 292, 59, 809, 342, 651, 459, 227,\n+    46, 711, 764, 868, 53, 413, 278, 800, 255, 993, 318, 854, 319, 695, 315,\n+    469, 166, 489, 969, 730, 1001, 757, 873, 686, 197, 303, 919, 155, 673,\n+    940, 712, 25, 999, 63, 863, 972, 967, 785, 152, 296, 512, 402, 377, 45,\n+    899, 829, 354, 77, 69, 856, 417, 811, 953, 124, 418, 75, 794, 162, 414,\n+    1018, 568, 254, 265, 772, 588, 16, 896, 157, 889, 298, 621, 110, 844,\n+    1000, 108, 545, 601, 78, 862, 447, 185, 195, 818, 450, 387, 49, 805, 102,\n+    986, 1005, 827, 329, 28, 932, 410, 287, 435, 451, 962, 517, 48, 174, 43,\n+    893, 884, 261, 251, 516, 395, 910, 611, 29, 501, 223, 476, 364, 144, 871,\n+    998, 687, 928, 115, 453, 513, 176, 94, 168, 667, 955, 353, 434, 382, 400,\n+    139, 365, 996, 343, 948, 890, 1012, 663, 610, 718, 538, 1008, 639, 470,\n+    848, 543, 1011, 859, 671, 756, 83, 427, 159, 746, 669, 589, 971, 524,\n+    356, 995, 904, 256, 201, 988, 62, 397, 81, 720, 917, 209, 549, 943, 486,\n+    76, 148, 207, 509, 644, 386, 700, 534, 177, 550, 961, 926, 546, 428, 284,\n+    127, 294, 8, 269, 359, 506, 445, 997, 806, 591, 725, 178, 262, 846, 373,\n+    831, 504, 305, 843, 553, 378, 1017, 783, 474, 683, 581, 200, 498, 694,\n+    191, 217, 847, 941, 424, 235, 38, 74, 616, 786, 147, 4, 273, 214, 142,\n+    575, 992, 463, 983, 243, 360, 970, 350, 267, 615, 766, 494, 31, 1009,\n+    452, 710, 552, 128, 612, 600, 275, 322, 193\n+};\n+static_assert(std::size(GF1024_LOG) == 1024, \"GF1024_EXP length should be 1024\");\n+\n /* Determine the final constant to use for the specified encoding. */\n uint32_t EncodingConstant(Encoding encoding) {\n     assert(encoding == Encoding::BECH32 || encoding == Encoding::BECH32M);\n@@ -127,12 +276,73 @@ uint32_t PolyMod(const data& v)\n     return c;\n }\n \n+uint32_t Syndrome(const uint32_t residue) {\n+    uint32_t low = residue & 0x1f;\n+    return low ^ (low << 10) ^ (low << 20) ^\n+        ((residue >> 5) & 1 ? 0x31edd3c4 : 0) ^\n+        ((residue >> 6) & 1 ? 0x335f86a8 : 0) ^\n+        ((residue >> 7) & 1 ? 0x363b8870 : 0) ^\n+        ((residue >> 8) & 1 ? 0x3e6390c9 : 0) ^\n+        ((residue >> 9) & 1 ? 0x2ec72192 : 0) ^\n+        ((residue >> 10) & 1 ? 0x1046f79d : 0) ^\n+        ((residue >> 11) & 1 ? 0x208d4e33 : 0) ^\n+        ((residue >> 12) & 1 ? 0x130ebd6f : 0) ^\n+        ((residue >> 13) & 1 ? 0x2499fade : 0) ^\n+        ((residue >> 14) & 1 ? 0x1b27d4b5 : 0) ^\n+        ((residue >> 15) & 1 ? 0x04be1eb4 : 0) ^\n+        ((residue >> 16) & 1 ? 0x0968b861 : 0) ^\n+        ((residue >> 17) & 1 ? 0x1055f0c2 : 0) ^\n+        ((residue >> 18) & 1 ? 0x20ab4584 : 0) ^\n+        ((residue >> 19) & 1 ? 0x1342af08 : 0) ^\n+        ((residue >> 20) & 1 ? 0x24f1f318 : 0) ^\n+        ((residue >> 21) & 1 ? 0x1be34739 : 0) ^\n+        ((residue >> 22) & 1 ? 0x35562f7b : 0) ^\n+        ((residue >> 23) & 1 ? 0x3a3c5bff : 0) ^\n+        ((residue >> 24) & 1 ? 0x266c96f7 : 0) ^\n+        ((residue >> 25) & 1 ? 0x25c78b65 : 0) ^\n+        ((residue >> 26) & 1 ? 0x1b1f13ea : 0) ^\n+        ((residue >> 27) & 1 ? 0x34baa2f4 : 0) ^\n+        ((residue >> 28) & 1 ? 0x3b61c0e1 : 0) ^\n+        ((residue >> 29) & 1 ? 0x265325c2 : 0);\n+}\n+\n /** Convert to lower case. */\n inline unsigned char LowerCase(unsigned char c)\n {\n     return (c >= 'A' && c <= 'Z') ? (c - 'A') + 'a' : c;\n }\n \n+void push_range(int from, int to, std::vector<int>& vec)\n+{\n+    for (int i = from; i < to; i++) {\n+        vec.push_back(i);\n+    }\n+}\n+\n+/** Return index of first invalid character in a Bech32 string. */\n+bool CheckCharacters(const std::string& str, std::vector<int>& errors) {\n+    bool lower = false, upper = false;\n+    for (size_t i = 0; i < str.size(); ++i) {\n+        unsigned char c = str[i];\n+        if (c >= 'a' && c <= 'z') {\n+            if (upper) {\n+                errors.push_back(i);\n+            } else {\n+                lower = true;\n+            }\n+        } else if (c >= 'A' && c <= 'Z') {\n+            if (lower) {\n+                errors.push_back(i);\n+            } else {\n+                upper = true;\n+            }\n+        } else if (c < 33 || c > 126) {\n+            errors.push_back(i);\n+        }\n+    }\n+    return errors.empty();\n+}\n+\n /** Expand a HRP for use in checksum computation. */\n data ExpandHRP(const std::string& hrp)\n {\n@@ -196,14 +406,8 @@ std::string Encode(Encoding encoding, const std::string& hrp, const data& values\n \n /** Decode a Bech32 or Bech32m string. */\n DecodeResult Decode(const std::string& str) {\n-    bool lower = false, upper = false;\n-    for (size_t i = 0; i < str.size(); ++i) {\n-        unsigned char c = str[i];\n-        if (c >= 'a' && c <= 'z') lower = true;\n-        else if (c >= 'A' && c <= 'Z') upper = true;\n-        else if (c < 33 || c > 126) return {};\n-    }\n-    if (lower && upper) return {};\n+    std::vector<int> errors;\n+    if (!CheckCharacters(str, errors)) return {};\n     size_t pos = str.rfind('1');\n     if (str.size() > 90 || pos == str.npos || pos == 0 || pos + 7 > str.size()) {\n         return {};\n@@ -227,4 +431,103 @@ DecodeResult Decode(const std::string& str) {\n     return {result, std::move(hrp), data(values.begin(), values.end() - 6)};\n }\n \n+/** Find index of an incorrect character in a Bech32 string. */\n+std::string LocateErrors(const std::string& str, std::vector<int>& error_locations) {\n+    if (str.size() > 90) {\n+        push_range(90, str.size(), error_locations);\n+        return \"Bech32 string too long\";\n+    }\n+    if (!CheckCharacters(str, error_locations)){\n+        return \"Invalid character or mixed case\";\n+    }\n+    size_t pos = str.rfind('1');\n+    if (pos == str.npos) {\n+        return \"Missing separator\";\n+    }\n+    if (pos == 0 || pos + 7 > str.size()) {\n+        error_locations.push_back(pos);\n+        return \"Invalid separator position\";\n+    }\n+    std::string hrp;\n+    for (size_t i = 0; i < pos; ++i) {\n+        hrp += LowerCase(str[i]);\n+    }\n+\n+    size_t length = str.size() - 1 - pos; // length of data part\n+    data values(length);\n+    for (size_t i = pos + 1; i < str.size(); ++i) {\n+        unsigned char c = str[i];\n+        int8_t rev = CHARSET_REV[c];\n+        if (rev == -1) {\n+            error_locations.push_back(i);\n+            return \"Invalid Base 32 character\";\n+        }\n+        values[i - pos - 1] = rev;\n+    }\n+\n+    // We attempt error detection with both bech32 and bech32m, and choose the one with the fewest errors\n+    // We can't simply use the segwit version, because that may be one of the errors\n+    for (Encoding encoding : {Encoding::BECH32, Encoding::BECH32M}) {\n+        std::vector<int> possible_errors;\n+        uint32_t residue = PolyMod(Cat(ExpandHRP(hrp), values)) ^ EncodingConstant(encoding);\n+        if (residue != 0) {\n+            uint32_t syn = Syndrome(residue);\n+            int s0 = syn & 0x3FF;\n+            int s1 = (syn >> 10) & 0x3FF;\n+            int s2 = syn >> 20;\n+            int l_s0 = GF1024_LOG[s0];\n+            int l_s1 = GF1024_LOG[s1];\n+            int l_s2 = GF1024_LOG[s2];\n+\n+            if (l_s0 != -1 && l_s1 != -1 && l_s2 != -1 && (2 * l_s1 - l_s2 - l_s0 + 2046) % 1023 == 0) {\n+                size_t p1 = (l_s1 - l_s0 + 1023) % 1023;\n+                int l_e1 = l_s0 + (1023 - 997) * p1;\n+                if (p1 < length && !(l_e1 % 33)) {\n+                    possible_errors.push_back(str.size() - p1 - 1);\n+                }\n+            } else {\n+                for (size_t p1 = 0; p1 < length; ++p1) {\n+                    int s2_s1p1 = s2 ^ (s1 == 0 ? 0 : GF1024_EXP[(l_s1 + p1) % 1023]);\n+                    if (s2_s1p1 == 0) continue;\n+\n+                    int s1_s0p1 = s1 ^ (s0 == 0 ? 0 : GF1024_EXP[(l_s0 + p1) % 1023]);\n+                    if (s1_s0p1 == 0) continue;\n+\n+                    int l_s1_s0p1 = GF1024_LOG[s1_s0p1];\n+                    size_t p2 = (GF1024_LOG[s2_s1p1] - l_s1_s0p1 + 1023) % 1023;\n+                    if (p2 >= length || p1 == p2) continue;\n+\n+                    int s1_s0p2 = s1 ^ (s0 == 0 ? 0 : GF1024_EXP[(l_s0 + p2) % 1023]);\n+                    if (s1_s0p2 == 0) continue;\n+\n+                    int inv_p1_p2 = 1023 - GF1024_LOG[GF1024_EXP[p1] ^ GF1024_EXP[p2]];\n+                    int l_e2 = l_s1_s0p1 + inv_p1_p2 + (1023 - 997) * p2;\n+                    if (l_e2 % 33) continue;\n+\n+                    int l_e1 = GF1024_LOG[s1_s0p2] + inv_p1_p2 + (1023 - 997) * p1;\n+                    if (l_e1 % 33) continue;\n+\n+                    if (p1 > p2) {\n+                        possible_errors.push_back(str.size() - p1 - 1);\n+                        possible_errors.push_back(str.size() - p2 - 1);\n+                    } else {\n+                        possible_errors.push_back(str.size() - p2 - 1);\n+                        possible_errors.push_back(str.size() - p1 - 1);\n+                    }\n+                    break;\n+                }\n+            }\n+        } else {\n+            // No errors\n+            error_locations.clear();\n+            return \"\";\n+        }\n+\n+        if (error_locations.empty() || (!possible_errors.empty() && possible_errors.size() < error_locations.size())) {\n+            error_locations = std::move(possible_errors);\n+        }\n+    }\n+    return \"Invalid checksum\";\n+}\n+\n } // namespace bech32"
      },
      {
        "sha": "f39d99b641a0c898e1ede21a78e3740b0620a3da",
        "filename": "src/bech32.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b62b67e06cc406fdad68da4c091168fb5f11c1d4/src/bech32.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b62b67e06cc406fdad68da4c091168fb5f11c1d4/src/bech32.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bech32.h?ref=b62b67e06cc406fdad68da4c091168fb5f11c1d4",
        "patch": "@@ -44,6 +44,9 @@ struct DecodeResult\n /** Decode a Bech32 or Bech32m string. */\n DecodeResult Decode(const std::string& str);\n \n+/** Return the positions of errors in a Bech32 string. */\n+std::string LocateErrors(const std::string& str, std::vector<int>& error_locations);\n+\n } // namespace bech32\n \n #endif // BITCOIN_BECH32_H"
      },
      {
        "sha": "6908c5ea52a41d5002cf8ba651e08075342e0f55",
        "filename": "src/key_io.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 6,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b62b67e06cc406fdad68da4c091168fb5f11c1d4/src/key_io.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b62b67e06cc406fdad68da4c091168fb5f11c1d4/src/key_io.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key_io.cpp?ref=b62b67e06cc406fdad68da4c091168fb5f11c1d4",
        "patch": "@@ -76,7 +76,7 @@ class DestinationEncoder\n     std::string operator()(const CNoDestination& no) const { return {}; }\n };\n \n-CTxDestination DecodeDestination(const std::string& str, const CChainParams& params, std::string& error_str)\n+CTxDestination DecodeDestination(const std::string& str, const CChainParams& params, std::string& error_str, std::vector<int>* error_locations)\n {\n     std::vector<unsigned char> data;\n     uint160 hash;\n@@ -184,8 +184,13 @@ CTxDestination DecodeDestination(const std::string& str, const CChainParams& par\n         }\n     }\n \n-    //TODO: locate Bech32 errors\n-    error_str = \"Error in Bech32 encoding\";\n+    // Perform Bech32 error location\n+    if (!error_locations) {\n+        std::vector<int> dummy_errors;\n+        error_str = bech32::LocateErrors(str, dummy_errors);\n+    } else {\n+        error_str = bech32::LocateErrors(str, *error_locations);\n+    }\n \n     return CNoDestination();\n }\n@@ -274,9 +279,9 @@ std::string EncodeDestination(const CTxDestination& dest)\n     return std::visit(DestinationEncoder(Params()), dest);\n }\n \n-CTxDestination DecodeDestination(const std::string& str, std::string& error_msg)\n+CTxDestination DecodeDestination(const std::string& str, std::string& error_msg, std::vector<int>* error_locations)\n {\n-    return DecodeDestination(str, Params(), error_msg);\n+    return DecodeDestination(str, Params(), error_msg, error_locations);\n }\n \n CTxDestination DecodeDestination(const std::string& str)\n@@ -288,7 +293,7 @@ CTxDestination DecodeDestination(const std::string& str)\n bool IsValidDestinationString(const std::string& str, const CChainParams& params)\n {\n     std::string error_msg;\n-    return IsValidDestination(DecodeDestination(str, params, error_msg));\n+    return IsValidDestination(DecodeDestination(str, params, error_msg, nullptr));\n }\n \n bool IsValidDestinationString(const std::string& str)"
      },
      {
        "sha": "2062bb4c445f1260f3c5ac4db5dc0d2d76337189",
        "filename": "src/key_io.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b62b67e06cc406fdad68da4c091168fb5f11c1d4/src/key_io.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b62b67e06cc406fdad68da4c091168fb5f11c1d4/src/key_io.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key_io.h?ref=b62b67e06cc406fdad68da4c091168fb5f11c1d4",
        "patch": "@@ -23,7 +23,7 @@ std::string EncodeExtPubKey(const CExtPubKey& extpubkey);\n \n std::string EncodeDestination(const CTxDestination& dest);\n CTxDestination DecodeDestination(const std::string& str);\n-CTxDestination DecodeDestination(const std::string& str, std::string& error_msg);\n+CTxDestination DecodeDestination(const std::string& str, std::string& error_msg, std::vector<int>* error_locations = nullptr);\n bool IsValidDestinationString(const std::string& str);\n bool IsValidDestinationString(const std::string& str, const CChainParams& params);\n "
      }
    ]
  },
  {
    "sha": "02a7bdee429ae307a5e57832727fed789e2e04fb",
    "node_id": "C_kwDOABII59oAKDAyYTdiZGVlNDI5YWUzMDdhNWU1NzgzMjcyN2ZlZDc4OWUyZTA0ZmI",
    "commit": {
      "author": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-09-30T23:51:18Z"
      },
      "committer": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-10-11T23:03:14Z"
      },
      "message": "Add error_locations to validateaddress RPC",
      "tree": {
        "sha": "4d3b201a000c491adb44abafa3e677a1cd891be2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d3b201a000c491adb44abafa3e677a1cd891be2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/02a7bdee429ae307a5e57832727fed789e2e04fb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02a7bdee429ae307a5e57832727fed789e2e04fb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/02a7bdee429ae307a5e57832727fed789e2e04fb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02a7bdee429ae307a5e57832727fed789e2e04fb/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b62b67e06cc406fdad68da4c091168fb5f11c1d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b62b67e06cc406fdad68da4c091168fb5f11c1d4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b62b67e06cc406fdad68da4c091168fb5f11c1d4"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 9,
      "deletions": 1
    },
    "files": [
      {
        "sha": "2bd8a6b0509fa48a915ab7585b443cc6feaf380c",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02a7bdee429ae307a5e57832727fed789e2e04fb/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02a7bdee429ae307a5e57832727fed789e2e04fb/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=02a7bdee429ae307a5e57832727fed789e2e04fb",
        "patch": "@@ -52,6 +52,10 @@ static RPCHelpMan validateaddress()\n                         {RPCResult::Type::NUM, \"witness_version\", /* optional */ true, \"The version number of the witness program\"},\n                         {RPCResult::Type::STR_HEX, \"witness_program\", /* optional */ true, \"The hex value of the witness program\"},\n                         {RPCResult::Type::STR, \"error\", /* optional */ true, \"Error message, if any\"},\n+                        {RPCResult::Type::ARR, \"error_locations\", \"Indices of likely error locations in address, if known (e.g. Bech32 errors)\",\n+                            {\n+                                {RPCResult::Type::NUM, \"index\", \"index of a potential error\"},\n+                            }},\n                     }\n                 },\n                 RPCExamples{\n@@ -61,7 +65,8 @@ static RPCHelpMan validateaddress()\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n     std::string error_msg;\n-    CTxDestination dest = DecodeDestination(request.params[0].get_str(), error_msg);\n+    std::vector<int> error_locations;\n+    CTxDestination dest = DecodeDestination(request.params[0].get_str(), error_msg, &error_locations);\n     const bool isValid = IsValidDestination(dest);\n     CHECK_NONFATAL(isValid == error_msg.empty());\n \n@@ -77,6 +82,9 @@ static RPCHelpMan validateaddress()\n         UniValue detail = DescribeAddress(dest);\n         ret.pushKVs(detail);\n     } else {\n+        UniValue error_indices(UniValue::VARR);\n+        for (int i : error_locations) error_indices.push_back(i);\n+        ret.pushKV(\"error_locations\", error_indices);\n         ret.pushKV(\"error\", error_msg);\n     }\n "
      }
    ]
  },
  {
    "sha": "c4979f77c1264f0099d1dfa278b1d9c18340b5f9",
    "node_id": "C_kwDOABII59oAKGM0OTc5Zjc3YzEyNjRmMDA5OWQxZGZhMjc4YjFkOWMxODM0MGI1Zjk",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-04-20T05:24:14Z"
      },
      "committer": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-10-11T23:03:14Z"
      },
      "message": "Add boost tests for bech32 error detection",
      "tree": {
        "sha": "30d827a4a3167c7e2bbcca606cf3d333d2ba7f45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/30d827a4a3167c7e2bbcca606cf3d333d2ba7f45"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c4979f77c1264f0099d1dfa278b1d9c18340b5f9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4979f77c1264f0099d1dfa278b1d9c18340b5f9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c4979f77c1264f0099d1dfa278b1d9c18340b5f9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4979f77c1264f0099d1dfa278b1d9c18340b5f9/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02a7bdee429ae307a5e57832727fed789e2e04fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02a7bdee429ae307a5e57832727fed789e2e04fb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02a7bdee429ae307a5e57832727fed789e2e04fb"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 53,
      "deletions": 1
    },
    "files": [
      {
        "sha": "16cda6a97694611870e313eef529ad0c56c811a0",
        "filename": "src/test/bech32_tests.cpp",
        "status": "modified",
        "additions": 53,
        "deletions": 1,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4979f77c1264f0099d1dfa278b1d9c18340b5f9/src/test/bech32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4979f77c1264f0099d1dfa278b1d9c18340b5f9/src/test/bech32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bech32_tests.cpp?ref=c4979f77c1264f0099d1dfa278b1d9c18340b5f9",
        "patch": "@@ -68,10 +68,36 @@ BOOST_AUTO_TEST_CASE(bech32_testvectors_invalid)\n         \"1qzzfhee\",\n         \"a12UEL5L\",\n         \"A12uEL5L\",\n+        \"abcdef1qpzrz9x8gf2tvdw0s3jn54khce6mua7lmqqqxw\",\n     };\n+    static const std::pair<std::string, int> ERRORS[] = {\n+        {\"Invalid character or mixed case\", 0},\n+        {\"Invalid character or mixed case\", 0},\n+        {\"Invalid character or mixed case\", 0},\n+        {\"Bech32 string too long\", 90},\n+        {\"Missing separator\", -1},\n+        {\"Invalid separator position\", 0},\n+        {\"Invalid Base 32 character\", 2},\n+        {\"Invalid separator position\", 2},\n+        {\"Invalid character or mixed case\", 8},\n+        {\"Invalid checksum\", -1}, // The checksum is calculated using the uppercase form so the entire string is invalid, not just a few characters\n+        {\"Invalid separator position\", 0},\n+        {\"Invalid separator position\", 0},\n+        {\"Invalid character or mixed case\", 3},\n+        {\"Invalid character or mixed case\", 3},\n+        {\"Invalid checksum\", 11}\n+    };\n+    int i = 0;\n     for (const std::string& str : CASES) {\n+        const auto& err = ERRORS[i];\n         const auto dec = bech32::Decode(str);\n         BOOST_CHECK(dec.encoding == bech32::Encoding::INVALID);\n+        std::vector<int> error_locations;\n+        std::string error = bech32::LocateErrors(str, error_locations);\n+        BOOST_CHECK_EQUAL(err.first, error);\n+        if (err.second == -1) BOOST_CHECK(error_locations.empty());\n+        else BOOST_CHECK_EQUAL(err.second, error_locations[0]);\n+        i++;\n     }\n }\n \n@@ -91,11 +117,37 @@ BOOST_AUTO_TEST_CASE(bech32m_testvectors_invalid)\n         \"au1s5cgom\",\n         \"M1VUXWEZ\",\n         \"16plkw9\",\n-        \"1p2gdwpf\"\n+        \"1p2gdwpf\",\n+        \"abcdef1l7aum6echk45nj2s0wdvt2fg8x9yrzpqzd3ryx\",\n+    };\n+    static const std::pair<std::string, int> ERRORS[] = {\n+        {\"Invalid character or mixed case\", 0},\n+        {\"Invalid character or mixed case\", 0},\n+        {\"Invalid character or mixed case\", 0},\n+        {\"Bech32 string too long\", 90},\n+        {\"Missing separator\", -1},\n+        {\"Invalid separator position\", 0},\n+        {\"Invalid Base 32 character\", 2},\n+        {\"Invalid Base 32 character\", 3},\n+        {\"Invalid separator position\", 2},\n+        {\"Invalid Base 32 character\", 8},\n+        {\"Invalid Base 32 character\", 7},\n+        {\"Invalid checksum\", -1},\n+        {\"Invalid separator position\", 0},\n+        {\"Invalid separator position\", 0},\n+        {\"Invalid checksum\", 21},\n     };\n+    int i = 0;\n     for (const std::string& str : CASES) {\n+        const auto& err = ERRORS[i];\n         const auto dec = bech32::Decode(str);\n         BOOST_CHECK(dec.encoding == bech32::Encoding::INVALID);\n+        std::vector<int> error_locations;\n+        std::string error = bech32::LocateErrors(str, error_locations);\n+        BOOST_CHECK_EQUAL(err.first, error);\n+        if (err.second == -1) BOOST_CHECK(error_locations.empty());\n+        else BOOST_CHECK_EQUAL(err.second, error_locations[0]);\n+        i++;\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "42d6a029e57a32f2d1d829ff7718b6d40d58b9d1",
    "node_id": "C_kwDOABII59oAKDQyZDZhMDI5ZTU3YTMyZjJkMWQ4MjlmZjc3MThiNmQ0MGQ1OGI5ZDE",
    "commit": {
      "author": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-10-01T01:17:18Z"
      },
      "committer": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-10-11T23:03:14Z"
      },
      "message": "Refactor and add more tests for validateaddress",
      "tree": {
        "sha": "8df277e69d345ab0c1ee39e8959b47f022e494f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8df277e69d345ab0c1ee39e8959b47f022e494f7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/42d6a029e57a32f2d1d829ff7718b6d40d58b9d1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42d6a029e57a32f2d1d829ff7718b6d40d58b9d1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/42d6a029e57a32f2d1d829ff7718b6d40d58b9d1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42d6a029e57a32f2d1d829ff7718b6d40d58b9d1/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c4979f77c1264f0099d1dfa278b1d9c18340b5f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4979f77c1264f0099d1dfa278b1d9c18340b5f9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c4979f77c1264f0099d1dfa278b1d9c18340b5f9"
      }
    ],
    "stats": {
      "total": 95,
      "additions": 56,
      "deletions": 39
    },
    "files": [
      {
        "sha": "9e0c232ff6a991a93bf874f19bd0544fd0be29d8",
        "filename": "test/functional/rpc_invalid_address_message.py",
        "status": "modified",
        "additions": 56,
        "deletions": 39,
        "changes": 95,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42d6a029e57a32f2d1d829ff7718b6d40d58b9d1/test/functional/rpc_invalid_address_message.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42d6a029e57a32f2d1d829ff7718b6d40d58b9d1/test/functional/rpc_invalid_address_message.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_invalid_address_message.py?ref=42d6a029e57a32f2d1d829ff7718b6d40d58b9d1",
        "patch": "@@ -12,68 +12,85 @@\n )\n \n BECH32_VALID = 'bcrt1qtmp74ayg7p24uslctssvjm06q5phz4yrxucgnv'\n+BECH32_VALID_CAPITALS = 'BCRT1QPLMTZKC2XHARPPZDLNPAQL78RSHJ68U33RAH7R'\n+BECH32_VALID_MULTISIG = 'bcrt1qdg3myrgvzw7ml9q0ejxhlkyxm7vl9r56yzkfgvzclrf4hkpx9yfqhpsuks'\n+\n BECH32_INVALID_BECH32 = 'bcrt1p0xlxvlhemja6c4dqv22uapctqupfhlxm9h8z3k2e72q4k9hcz7vqdmchcc'\n BECH32_INVALID_BECH32M = 'bcrt1qw508d6qejxtdg4y5r3zarvary0c5xw7k35mrzd'\n BECH32_INVALID_VERSION = 'bcrt130xlxvlhemja6c4dqv22uapctqupfhlxm9h8z3k2e72q4k9hcz7vqynjegk'\n BECH32_INVALID_SIZE = 'bcrt1s0xlxvlhemja6c4dqv22uapctqupfhlxm9h8z3k2e72q4k9hcz7v8n0nx0muaewav25430mtr'\n BECH32_INVALID_V0_SIZE = 'bcrt1qw508d6qejxtdg4y5r3zarvary0c5xw7kqqq5k3my'\n BECH32_INVALID_PREFIX = 'bc1pw508d6qejxtdg4y5r3zarvary0c5xw7kw508d6qejxtdg4y5r3zarvary0c5xw7k7grplx'\n+BECH32_TOO_LONG = 'bcrt1q049edschfnwystcqnsvyfpj23mpsg3jcedq9xv049edschfnwystcqnsvyfpj23mpsg3jcedq9xv049edschfnwystcqnsvyfpj23m'\n+BECH32_ONE_ERROR = 'bcrt1q049edschfnwystcqnsvyfpj23mpsg3jcedq9xv'\n+BECH32_ONE_ERROR_CAPITALS = 'BCRT1QPLMTZKC2XHARPPZDLNPAQL78RSHJ68U32RAH7R'\n+BECH32_TWO_ERRORS = 'bcrt1qax9suht3qv95sw33xavx8crpxduefdrsvgsklu' # should be bcrt1qax9suht3qv95sw33wavx8crpxduefdrsvgsklx\n+BECH32_NO_SEPARATOR = 'bcrtq049ldschfnwystcqnsvyfpj23mpsg3jcedq9xv'\n+BECH32_INVALID_CHAR = 'bcrt1q04oldschfnwystcqnsvyfpj23mpsg3jcedq9xv'\n+BECH32_MULTISIG_TWO_ERRORS = 'bcrt1qdg3myrgvzw7ml8q0ejxhlkyxn7vl9r56yzkfgvzclrf4hkpx9yfqhpsuks'\n+BECH32_WRONG_VERSION = 'bcrt1ptmp74ayg7p24uslctssvjm06q5phz4yrxucgnv'\n \n BASE58_VALID = 'mipcBbFg9gMiCh81Kj8tqqdgoZub1ZJRfn'\n BASE58_INVALID_PREFIX = '17VZNX1SN5NtKa8UQFxwQbFeFc3iqRYhem'\n+BASE58_INVALID_CHECKSUM = 'mipcBbFg9gMiCh81Kj8tqqdgoZub1ZJJfn'\n+BASE58_INVALID_LENGTH = '2VKf7XKMrp4bVNVmuRbyCewkP8FhGLP2E54LHDPakr9Sq5mtU2'\n \n INVALID_ADDRESS = 'asfah14i8fajz0123f'\n+INVALID_ADDRESS_2 = '1q049ldschfnwystcqnsvyfpj23mpsg3jcedq9xv'\n \n class InvalidAddressErrorMessageTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n-    def test_validateaddress(self):\n-        node = self.nodes[0]\n-\n-        # Bech32\n-        info = node.validateaddress(BECH32_INVALID_SIZE)\n-        assert not info['isvalid']\n-        assert_equal(info['error'], 'Invalid Bech32 address data size')\n-\n-        info = node.validateaddress(BECH32_INVALID_PREFIX)\n-        assert not info['isvalid']\n-        assert_equal(info['error'], 'Invalid HRP or Base58 character in address')\n-\n-        info = node.validateaddress(BECH32_INVALID_BECH32)\n-        assert not info['isvalid']\n-        assert_equal(info['error'], 'Version 1+ witness address must use Bech32m checksum')\n-\n-        info = node.validateaddress(BECH32_INVALID_BECH32M)\n-        assert not info['isvalid']\n-        assert_equal(info['error'], 'Version 0 witness address must use Bech32 checksum')\n-\n-        info = node.validateaddress(BECH32_INVALID_V0_SIZE)\n-        assert not info['isvalid']\n-        assert_equal(info['error'], 'Invalid Bech32 v0 address data size')\n-\n-        info = node.validateaddress(BECH32_VALID)\n+    def check_valid(self, addr):\n+        info = self.nodes[0].validateaddress(addr)\n         assert info['isvalid']\n         assert 'error' not in info\n+        assert 'error_locations' not in info\n \n-        info = node.validateaddress(BECH32_INVALID_VERSION)\n-        assert not info['isvalid']\n-        assert_equal(info['error'], 'Invalid Bech32 address witness version')\n-\n-        # Base58\n-        info = node.validateaddress(BASE58_INVALID_PREFIX)\n-        assert not info['isvalid']\n-        assert_equal(info['error'], 'Invalid prefix for Base58-encoded address')\n+    def check_invalid(self, addr, error_str, error_locations=None):\n+        res = self.nodes[0].validateaddress(addr)\n+        assert not res['isvalid']\n+        assert_equal(res['error'], error_str)\n+        if error_locations:\n+            assert_equal(res['error_locations'], error_locations)\n+        else:\n+            assert_equal(res['error_locations'], [])\n \n-        info = node.validateaddress(BASE58_VALID)\n-        assert info['isvalid']\n-        assert 'error' not in info\n+    def test_validateaddress(self):\n+        # Invalid Bech32\n+        self.check_invalid(BECH32_INVALID_SIZE, 'Invalid Bech32 address data size')\n+        self.check_invalid(BECH32_INVALID_PREFIX, 'Invalid HRP or Base58 character in address')\n+        self.check_invalid(BECH32_INVALID_BECH32, 'Version 1+ witness address must use Bech32m checksum')\n+        self.check_invalid(BECH32_INVALID_BECH32M, 'Version 0 witness address must use Bech32 checksum')\n+        self.check_invalid(BECH32_INVALID_VERSION, 'Invalid Bech32 address witness version')\n+        self.check_invalid(BECH32_INVALID_V0_SIZE, 'Invalid Bech32 v0 address data size')\n+        self.check_invalid(BECH32_TOO_LONG, 'Bech32 string too long', list(range(90, 108)))\n+        self.check_invalid(BECH32_ONE_ERROR, 'Invalid checksum', [9])\n+        self.check_invalid(BECH32_TWO_ERRORS, 'Invalid checksum', [22, 43])\n+        self.check_invalid(BECH32_ONE_ERROR_CAPITALS, 'Invalid checksum', [38])\n+        self.check_invalid(BECH32_NO_SEPARATOR, 'Missing separator')\n+        self.check_invalid(BECH32_INVALID_CHAR, 'Invalid Base 32 character', [8])\n+        self.check_invalid(BECH32_MULTISIG_TWO_ERRORS, 'Invalid checksum', [19, 30])\n+        self.check_invalid(BECH32_WRONG_VERSION, 'Invalid checksum', [5])\n+\n+        # Valid Bech32\n+        self.check_valid(BECH32_VALID)\n+        self.check_valid(BECH32_VALID_CAPITALS)\n+        self.check_valid(BECH32_VALID_MULTISIG)\n+\n+        # Invalid Base58\n+        self.check_invalid(BASE58_INVALID_PREFIX, 'Invalid prefix for Base58-encoded address')\n+        self.check_invalid(BASE58_INVALID_CHECKSUM, 'Invalid checksum or length of Base58 address')\n+        self.check_invalid(BASE58_INVALID_LENGTH, 'Invalid checksum or length of Base58 address')\n+\n+        # Valid Base58\n+        self.check_valid(BASE58_VALID)\n \n         # Invalid address format\n-        info = node.validateaddress(INVALID_ADDRESS)\n-        assert not info['isvalid']\n-        assert_equal(info['error'], 'Invalid HRP or Base58 character in address')\n+        self.check_invalid(INVALID_ADDRESS, 'Invalid HRP or Base58 character in address')\n+        self.check_invalid(INVALID_ADDRESS_2, 'Invalid HRP or Base58 character in address')\n \n     def test_getaddressinfo(self):\n         node = self.nodes[0]"
      }
    ]
  },
  {
    "sha": "2eb5792ec7bbeaf7138420b6c85c5cd0a0404946",
    "node_id": "C_kwDOABII59oAKDJlYjU3OTJlYzdiYmVhZjcxMzg0MjBiNmM4NWM1Y2QwYTA0MDQ5NDY",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-04-20T05:19:04Z"
      },
      "committer": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-10-11T23:03:14Z"
      },
      "message": "Add release notes for validateaddress Bech32 error detection",
      "tree": {
        "sha": "392c26fd5f44ecd8bde463720f7afd9b93bb7cd5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/392c26fd5f44ecd8bde463720f7afd9b93bb7cd5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2eb5792ec7bbeaf7138420b6c85c5cd0a0404946",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2eb5792ec7bbeaf7138420b6c85c5cd0a0404946",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2eb5792ec7bbeaf7138420b6c85c5cd0a0404946",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2eb5792ec7bbeaf7138420b6c85c5cd0a0404946/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "42d6a029e57a32f2d1d829ff7718b6d40d58b9d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42d6a029e57a32f2d1d829ff7718b6d40d58b9d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/42d6a029e57a32f2d1d829ff7718b6d40d58b9d1"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5027550a9955f735423399c964c462a1304e162b",
        "filename": "doc/release-notes-16807.md",
        "status": "added",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2eb5792ec7bbeaf7138420b6c85c5cd0a0404946/doc/release-notes-16807.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2eb5792ec7bbeaf7138420b6c85c5cd0a0404946/doc/release-notes-16807.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-16807.md?ref=2eb5792ec7bbeaf7138420b6c85c5cd0a0404946",
        "patch": "@@ -0,0 +1,6 @@\n+Updated RPCs\n+------------\n+\n+- The `validateaddress` RPC now optionally returns an `error_locations` array, with the indices of\n+invalid characters in the address. For example, this will return the locations of up to two Bech32\n+errors.\n\\ No newline at end of file"
      }
    ]
  },
  {
    "sha": "5599813b80e53a1539c66625b4320ab1b4fb4848",
    "node_id": "C_kwDOABII59oAKDU1OTk4MTNiODBlNTNhMTUzOWM2NjYyNWI0MzIwYWIxYjRmYjQ4NDg",
    "commit": {
      "author": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-10-06T12:16:08Z"
      },
      "committer": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-10-11T23:03:14Z"
      },
      "message": "Add lots of comments to Bech32",
      "tree": {
        "sha": "e2d58bd778ffbce86ef42dbed3762d8cbf6735f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e2d58bd778ffbce86ef42dbed3762d8cbf6735f3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5599813b80e53a1539c66625b4320ab1b4fb4848",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5599813b80e53a1539c66625b4320ab1b4fb4848",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5599813b80e53a1539c66625b4320ab1b4fb4848",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5599813b80e53a1539c66625b4320ab1b4fb4848/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2eb5792ec7bbeaf7138420b6c85c5cd0a0404946",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2eb5792ec7bbeaf7138420b6c85c5cd0a0404946",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2eb5792ec7bbeaf7138420b6c85c5cd0a0404946"
      }
    ],
    "stats": {
      "total": 139,
      "additions": 135,
      "deletions": 4
    },
    "files": [
      {
        "sha": "1b2d47243bba49c603d92329d96f33a067c48d4d",
        "filename": "src/bech32.cpp",
        "status": "modified",
        "additions": 135,
        "deletions": 4,
        "changes": 139,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5599813b80e53a1539c66625b4320ab1b4fb4848/src/bech32.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5599813b80e53a1539c66625b4320ab1b4fb4848/src/bech32.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bech32.cpp?ref=5599813b80e53a1539c66625b4320ab1b4fb4848",
        "patch": "@@ -30,6 +30,33 @@ const int8_t CHARSET_REV[128] = {\n      1,  0,  3, 16, 11, 28, 12, 14,  6,  4,  2, -1, -1, -1, -1, -1\n };\n \n+// We work with the finite field GF(1024) defined as a degree 2 extension of the base field GF(32)\n+// The defining polynomial of the extension is x^2 + 9x + 23\n+// Let (e) be a primitive element of GF(1024), that is, a generator of the field.\n+// Every non-zero element of the field can then be represented as (e)^k for some power k.\n+// The array GF1024_EXP contains all these powers of (e) - GF1024_EXP[k] = (e)^k in GF(1024).\n+// Conversely, GF1024_LOG contains the discrete logarithms of these powers, so\n+// GF1024_LOG[GF1024_EXP[k]] == k\n+// Each element v of GF(1024) is encoded as a 10 bit integer in the following way:\n+// v = v1 || v0 where v0, v1 are 5-bit integers (elements of GF(32)).\n+//\n+// The element (e) is encoded as 9 || 15. Given (v), we compute (e)*(v) by multiplying in the following way:\n+// v0' = 27*v1 + 15*v0\n+// v1' = 6*v1 + 9*v0\n+// e*v = v1' || v0'\n+//\n+// The following sage code can be used to reproduce both _EXP and _LOG arrays\n+// GF1024_LOG = [-1] + [0] * 1023\n+// GF1024_EXP = [1] * 1024\n+// v = 1\n+// for i in range(1, 1023):\n+//     v0 = v & 31\n+//     v1 = v >> 5\n+//     v0n = F.fetch_int(27)*F.fetch_int(v1) + F.fetch_int(15)*F.fetch_int(v0)\n+//     v1n = F.fetch_int(6)*F.fetch_int(v1) + F.fetch_int(9)*F.fetch_int(v0)\n+//     v = v1n.integer_representation() << 5 | v0n.integer_representation()\n+//     GF1024_EXP[i] = v\n+//     GF1024_LOG[v] = i\n \n const int16_t GF1024_EXP[] = {\n     1, 303, 635, 446, 997, 640, 121, 142, 959, 420, 350, 438, 166, 39, 543,\n@@ -103,6 +130,7 @@ const int16_t GF1024_EXP[] = {\n     433, 610, 116, 855, 180, 479, 910, 1014, 599, 915, 905, 306, 516, 731,\n     626, 978, 825, 344, 605, 654, 209\n };\n+// As above, GF1024_EXP contains all elements of GF(1024) except 0\n static_assert(std::size(GF1024_EXP) == 1023, \"GF1024_EXP length should be 1023\");\n \n const int16_t GF1024_LOG[] = {\n@@ -276,8 +304,51 @@ uint32_t PolyMod(const data& v)\n     return c;\n }\n \n+/** Syndrome computes the values s_j = R(e^j) for j in [997, 998, 999]. As described above, the\n+ * generator polynomial G is the LCM of the minimal polynomials of (e)^997, (e)^998, and (e)^999.\n+ *\n+ * Consider a codeword with errors, of the form R(x) = C(x) + E(x). The residue is the bit-packed\n+ * result of computing R(x) mod G(X), where G is the generator of the code. Because C(x) is a valid\n+ * codeword, it is a multiple of G(X), so the residue is in fact just E(x) mod G(x). Note that all\n+ * of the (e)^j are roots of G(x) by definition, so R((e)^j) = E((e)^j).\n+ *\n+ * Syndrome returns the three values packed into a 30-bit integer, where each 10 bits is one value.\n+ */\n uint32_t Syndrome(const uint32_t residue) {\n+    // Let R(x) = r1*x^5 + r2*x^4 + r3*x^3 + r4*x^2 + r5*x + r6\n+    // low is the first 5 bits, corresponding to the r6 in the residue\n+    // (the constant term of the polynomial).\n+\n     uint32_t low = residue & 0x1f;\n+\n+    // Recall that XOR corresponds to addition in a characteristic 2 field.\n+    //\n+    // To compute R((e)^j), we are really computing:\n+    // r1*(e)^(j*5) + r2*(e)^(j*4) + r3*(e)^(j*3) + r4*(e)^(j*2) + r5*(e)^j + r6\n+    // Now note that all of the (e)^(j*i) for i in [5..0] are constants and can be precomputed\n+    // for efficiency. But even more than that, we can consider each coefficient as a bit-string.\n+    // For example, take r5 = (b_5, b_4, b_3, b_2, b_1) written out as 5 bits. Then:\n+    // r5*(e)^j = b_1*(e)^j + b_2*(2*(e)^j) + b_3*(4*(e)^j) + b_4*(8*(e)^j) + b_5*(16*(e)^j)\n+    // where all the (2^i*(e)^j) are constants and can be precomputed. Then we just add each\n+    // of these corresponding constants to our final value based on the bit values b_i.\n+    // This is exactly what is done below. Note that all three values of s_j for j in (997, 998,\n+    // 999) are computed simultaneously.\n+    //\n+    // We begin by setting s_j = low = r6 for all three values of j, because these are unconditional.\n+    // Then for each following bit, we add the corresponding precomputed constant if the bit is 1.\n+    // For example, 0x31edd3c4 is 1100011110 1101110100 1111000100 when unpacked in groups of 10\n+    // bits, corresponding exactly to a^999 || a^998 || a^997 (matching the corresponding values in\n+    // GF1024_EXP above).\n+    //\n+    // The following sage code reproduces these constants:\n+    // for k in range(1, 6):\n+    //     for b in [1,2,4,8,16]:\n+    //         c0 = GF1024_EXP[(997*k + GF1024_LOG[b]) % 1023]\n+    //         c1 = GF1024_EXP[(998*k + GF1024_LOG[b]) % 1023]\n+    //         c2 = GF1024_EXP[(999*k + GF1024_LOG[b]) % 1023]\n+    //         c = c2 << 20 | c1 << 10 | c0\n+    //         print(\"0x%x\" % c)\n+\n     return low ^ (low << 10) ^ (low << 20) ^\n         ((residue >> 5) & 1 ? 0x31edd3c4 : 0) ^\n         ((residue >> 6) & 1 ? 0x335f86a8 : 0) ^\n@@ -469,44 +540,104 @@ std::string LocateErrors(const std::string& str, std::vector<int>& error_locatio\n     // We can't simply use the segwit version, because that may be one of the errors\n     for (Encoding encoding : {Encoding::BECH32, Encoding::BECH32M}) {\n         std::vector<int> possible_errors;\n+        // Recall that (ExpandHRP(hrp) ++ values) is interpreted as a list of coefficients of a polynomial\n+        // over GF(32). PolyMod computes the \"remainder\" of this polynomial modulo the generator G(x).\n         uint32_t residue = PolyMod(Cat(ExpandHRP(hrp), values)) ^ EncodingConstant(encoding);\n+\n+        // All valid codewords should be multiples of G(x), so this remainder (after XORing with the encoding\n+        // constant) should be 0 - hence 0 indicates there are no errors present.\n         if (residue != 0) {\n+            // If errors are present, our polynomial must be of the form C(x) + E(x) where C is the valid\n+            // codeword (a multiple of G(x)), and E encodes the errors.\n             uint32_t syn = Syndrome(residue);\n+\n+            // Unpack the three 10-bit syndrome values\n             int s0 = syn & 0x3FF;\n             int s1 = (syn >> 10) & 0x3FF;\n             int s2 = syn >> 20;\n+\n+            // Get the discrete logs of these values in GF1024 for more efficient computation\n             int l_s0 = GF1024_LOG[s0];\n             int l_s1 = GF1024_LOG[s1];\n             int l_s2 = GF1024_LOG[s2];\n \n+            // First, suppose there is only a single error. Then E(x) = e1*x^p1 for some position p1\n+            // Then s0 = E((e)^997) = e1*(e)^(997*p1) and s1 = E((e)^998) = e1*(e)^(998*p1)\n+            // Therefore s1/s0 = (e)^p1, and by the same logic, s2/s1 = (e)^p1 too.\n+            // Hence, s1^2 == s0*s2, which is exactly the condition we check first:\n             if (l_s0 != -1 && l_s1 != -1 && l_s2 != -1 && (2 * l_s1 - l_s2 - l_s0 + 2046) % 1023 == 0) {\n-                size_t p1 = (l_s1 - l_s0 + 1023) % 1023;\n+                // Compute the error position p1 as l_s1 - l_s0 = p1 (mod 1023)\n+                size_t p1 = (l_s1 - l_s0 + 1023) % 1023; // the +1023 ensures it is positive\n+                // Now because s0 = e1*(e)^(997*p1), we get e1 = s0/((e)^(997*p1)). Remember that (e)^1023 = 1,\n+                // so 1/((e)^997) = (e)^(1023-997).\n                 int l_e1 = l_s0 + (1023 - 997) * p1;\n+                // Finally, some sanity checks on the result:\n+                // - The error position should be within the length of the data\n+                // - e1 should be in GF(32), which implies that e1 = (e)^(33k) for some k (the 31 non-zero elements\n+                // of GF(32) form an index 33 subgroup of the 1023 non-zero elements of GF(1024)).\n                 if (p1 < length && !(l_e1 % 33)) {\n+                    // Polynomials run from highest power to lowest, so the index p1 is from the right.\n+                    // We don't return e1 because it is dangerous to suggest corrections to the user,\n+                    // the user should check the address themselves.\n                     possible_errors.push_back(str.size() - p1 - 1);\n                 }\n+            // Otherwise, suppose there are two errors. Then E(x) = e1*x^p1 + e2*x^p2.\n             } else {\n+                // For all possible first error positions p1\n                 for (size_t p1 = 0; p1 < length; ++p1) {\n+                    // We have guessed p1, and want to solve for p2. Recall that E(x) = e1*x^p1 + e2*x^p2, so\n+                    // s0 = E((e)^997) = e1*(e)^(997^p1) + e2*(e)^(997*p2), and similar for s1 and s2.\n+                    //\n+                    // Consider s2 + s1*(e)^p1\n+                    //          = 2e1*(e)^(999^p1) + e2*(e)^(999*p2) + e2*(e)^(998*p2)*(e)^p1\n+                    //          = e2*(e)^(999*p2) + e2*(e)^(998*p2)*(e)^p1\n+                    //    (Because we are working in characteristic 2.)\n+                    //          = e2*(e)^(998*p2) ((e)^p2 + (e)^p1)\n+                    //\n                     int s2_s1p1 = s2 ^ (s1 == 0 ? 0 : GF1024_EXP[(l_s1 + p1) % 1023]);\n                     if (s2_s1p1 == 0) continue;\n+                    int l_s2_s1p1 = GF1024_LOG[s2_s1p1];\n \n+                    // Similarly, s1 + s0*(e)^p1\n+                    //          = e2*(e)^(997*p2) ((e)^p2 + (e)^p1)\n                     int s1_s0p1 = s1 ^ (s0 == 0 ? 0 : GF1024_EXP[(l_s0 + p1) % 1023]);\n                     if (s1_s0p1 == 0) continue;\n-\n                     int l_s1_s0p1 = GF1024_LOG[s1_s0p1];\n-                    size_t p2 = (GF1024_LOG[s2_s1p1] - l_s1_s0p1 + 1023) % 1023;\n+\n+                    // So, putting these together, we can compute the second error position as\n+                    // (e)^p2 = (s2 + s1^p1)/(s1 + s0^p1)\n+                    // p2 = log((e)^p2)\n+                    size_t p2 = (l_s2_s1p1 - l_s1_s0p1 + 1023) % 1023;\n+\n+                    // Sanity checks that p2 is a valid position and not the same as p1\n                     if (p2 >= length || p1 == p2) continue;\n \n+                    // Now we want to compute the error values e1 and e2.\n+                    // Similar to above, we compute s1 + s0*(e)^p2\n+                    //          = e1*(e)^(997*p1) ((e)^p1 + (e)^p2)\n                     int s1_s0p2 = s1 ^ (s0 == 0 ? 0 : GF1024_EXP[(l_s0 + p2) % 1023]);\n                     if (s1_s0p2 == 0) continue;\n+                    int l_s1_s0p2 = GF1024_LOG[s1_s0p2];\n \n+                    // And compute (the log of) 1/((e)^p1 + (e)^p2))\n                     int inv_p1_p2 = 1023 - GF1024_LOG[GF1024_EXP[p1] ^ GF1024_EXP[p2]];\n+\n+                    // Then (s1 + s0*(e)^p1) * (1/((e)^p1 + (e)^p2)))\n+                    //         = e2*(e)^(997*p2)\n+                    // Then recover e2 by dividing by (e)^(997*p2)\n                     int l_e2 = l_s1_s0p1 + inv_p1_p2 + (1023 - 997) * p2;\n+                    // Check that e2 is in GF(32)\n                     if (l_e2 % 33) continue;\n \n-                    int l_e1 = GF1024_LOG[s1_s0p2] + inv_p1_p2 + (1023 - 997) * p1;\n+                    // In the same way, (s1 + s0*(e)^p2) * (1/((e)^p1 + (e)^p2)))\n+                    //         = e1*(e)^(997*p1)\n+                    // So recover e1 by dividing by (e)^(997*p1)\n+                    int l_e1 = l_s1_s0p2 + inv_p1_p2 + (1023 - 997) * p1;\n+                    // Check that e1 is in GF(32)\n                     if (l_e1 % 33) continue;\n \n+                    // Again, we do not return e1 or e2 for safety.\n+                    // Order the error positions from the left of the string and return them\n                     if (p1 > p2) {\n                         possible_errors.push_back(str.size() - p1 - 1);\n                         possible_errors.push_back(str.size() - p2 - 1);"
      }
    ]
  },
  {
    "sha": "88cc4810926e4f5af6757ee1b0eed61abda3d746",
    "node_id": "C_kwDOABII59oAKDg4Y2M0ODEwOTI2ZTRmNWFmNjc1N2VlMWIwZWVkNjFhYmRhM2Q3NDY",
    "commit": {
      "author": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-10-07T01:43:10Z"
      },
      "committer": {
        "name": "Samuel Dobson",
        "email": "dobsonsa68@gmail.com",
        "date": "2021-10-11T23:03:14Z"
      },
      "message": "Modify copyright header on Bech32 code",
      "tree": {
        "sha": "e28935814f8d387daedb64b576ad50e6e03cfe73",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e28935814f8d387daedb64b576ad50e6e03cfe73"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/88cc4810926e4f5af6757ee1b0eed61abda3d746",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88cc4810926e4f5af6757ee1b0eed61abda3d746",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/88cc4810926e4f5af6757ee1b0eed61abda3d746",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88cc4810926e4f5af6757ee1b0eed61abda3d746/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5599813b80e53a1539c66625b4320ab1b4fb4848",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5599813b80e53a1539c66625b4320ab1b4fb4848",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5599813b80e53a1539c66625b4320ab1b4fb4848"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ea44480a6cdc100473d1165f9e808a4c95f1d8de",
        "filename": "src/bech32.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/88cc4810926e4f5af6757ee1b0eed61abda3d746/src/bech32.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/88cc4810926e4f5af6757ee1b0eed61abda3d746/src/bech32.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bech32.cpp?ref=88cc4810926e4f5af6757ee1b0eed61abda3d746",
        "patch": "@@ -1,4 +1,5 @@\n // Copyright (c) 2017, 2021 Pieter Wuille\n+// Copyright (c) 2021 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "7e92d5d23afdf9af2f4f24ee8fc2f1e41fe606d1",
        "filename": "src/bech32.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/88cc4810926e4f5af6757ee1b0eed61abda3d746/src/bech32.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/88cc4810926e4f5af6757ee1b0eed61abda3d746/src/bech32.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bech32.h?ref=88cc4810926e4f5af6757ee1b0eed61abda3d746",
        "patch": "@@ -1,4 +1,5 @@\n // Copyright (c) 2017, 2021 Pieter Wuille\n+// Copyright (c) 2021 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "8eed9592280f0ca47c9294f826a84ec1cd67253c",
        "filename": "src/test/bech32_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/88cc4810926e4f5af6757ee1b0eed61abda3d746/src/test/bech32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/88cc4810926e4f5af6757ee1b0eed61abda3d746/src/test/bech32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bech32_tests.cpp?ref=88cc4810926e4f5af6757ee1b0eed61abda3d746",
        "patch": "@@ -1,4 +1,5 @@\n // Copyright (c) 2017 Pieter Wuille\n+// Copyright (c) 2021 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      }
    ]
  }
]