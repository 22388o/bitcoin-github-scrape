emilengler,2019-09-05 14:48:13,"See #16779\nConcept ACK",https://github.com/bitcoin/bitcoin/pull/16807#issuecomment-528407251,528407251,
DrahtBot,2019-09-05 16:17:33,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23545](https://github.com/bitcoin/bitcoin/pull/23545) (scripted-diff: Use clang-tidy syntax for C++ named arguments [WIP",https://github.com/bitcoin/bitcoin/pull/16807#issuecomment-528445415,528445415,
sipa,2019-09-05 22:46:21,Would it be possible to add functions to key_io that provide this functionality for all addresses (with just basic error messages for anything but bech32)? That way the RPC code doesn't need to directly invoke the bech32 module.,https://github.com/bitcoin/bitcoin/pull/16807#issuecomment-528620663,528620663,
promag,2019-09-05 22:55:07,"+1 @sipa suggestion, something like\n```cpp\nCTxDestination DecodeDestination(const std::string& str, std::string& error);\nCTxDestination DecodeDestination(const std::string& str)\n{\n    const std::string& error;\n    return DecodeDestination(str, error);\n}\n```\nAnd maybe also embed the error index in the message for now.",https://github.com/bitcoin/bitcoin/pull/16807#issuecomment-528623272,528623272,
meshcollider,2019-09-06 05:14:12,"I've added boost tests, fixed the above nits, and added a final commit with one implementation of the above idea. I can drop the final commit if it's not a good approach, but this is the cleanest way I could come up with",https://github.com/bitcoin/bitcoin/pull/16807#issuecomment-528711286,528711286,
meshcollider,2019-10-21 10:45:50,Rebased,https://github.com/bitcoin/bitcoin/pull/16807#issuecomment-544458872,544458872,
Sjors,2019-10-29 09:34:48,"Concept ACK. I would prefer to make `address_type` an optional hint, and instead guess the address type.\n\nDistinguishing between base58 and bech32 could be done by counting how many characters of the address are part of the base58/bech32 character set. You can then use `error_index` to indicate the position of a character that doesn't belong in the set.",https://github.com/bitcoin/bitcoin/pull/16807#issuecomment-547334348,547334348,
luke-jr,2020-02-13 15:02:07,"Once this is merged, I have the GUI changes ready to go...",https://github.com/bitcoin/bitcoin/pull/16807#issuecomment-585800893,585800893,
gmaxwell,2020-03-08 22:22:00,"Why is this limited to only returning a single error position? Fairly simple code can give up-to two, and it's not hard to imagine fancier code that can sometimes return more than that.",https://github.com/bitcoin/bitcoin/pull/16807#issuecomment-596259697,596259697,
gmaxwell,2020-03-15 20:43:14,@meshcollider  ?,https://github.com/bitcoin/bitcoin/pull/16807#issuecomment-599262188,599262188,
sipa,2020-03-16 04:30:21,"Concept ACK to adding Bech32 error location to `validateaddress`, but echoing earlier comments:\n* Why only one error? The reference code in https://github.com/sipa/bech32 finds two, and I don't think just returning one makes things meaningfully simpler. Even if not implemented, the interface should probably return an array of error positions.\n* It feels unnecessary to pass an address type. Jus",https://github.com/bitcoin/bitcoin/pull/16807#issuecomment-599339709,599339709,
meshcollider,2020-04-07 06:29:43,"Fair points, I'll modify to return more than one error. Re. address type, we discussed it a while back in IRC, I can't remember if there was a reason we didn't base it solely on HRP or not, but I am happy to do it that way if you want because I can't see a real downside now. I still have to fix the current error and rebase too.",https://github.com/bitcoin/bitcoin/pull/16807#issuecomment-610201388,610201388,
Sjors,2021-01-06 12:27:37,Needs rebase,https://github.com/bitcoin/bitcoin/pull/16807#issuecomment-755271596,755271596,
meshcollider,2021-04-20 08:03:00,Rebased + reworked to include Bech32m and to allow multiple error indices to be returned as discussed above.,https://github.com/bitcoin/bitcoin/pull/16807#issuecomment-823068533,823068533,
meshcollider,2021-04-20 08:47:35,Rebased again on 21736 to fix CI,https://github.com/bitcoin/bitcoin/pull/16807#issuecomment-823100230,823100230,
MarcoFalke,2021-04-20 10:09:30,"From ci:\n\nAssertionError: not(Invalid HRP or Base58 character in address == Invalid address format)",https://github.com/bitcoin/bitcoin/pull/16807#issuecomment-823154380,823154380,
meshcollider,2021-10-01 01:45:11,Pushed a substantial rebase + rework. Addresses all comments and suggestions above. Notably this now makes DecodeAddress return the error locations rather than creating a separate function as @achow101 suggested.,https://github.com/bitcoin/bitcoin/pull/16807#issuecomment-931828044,931828044,
achow101,2021-10-01 19:51:13,"ACK 1414005c5b24f13bb4da850c62c7c3cdc6436ad1\n\nReviewed everything except the actual bech32(m) error location code as I currently don't understand the math there. Also tested manually with a few addresses.",https://github.com/bitcoin/bitcoin/pull/16807#issuecomment-932508171,932508171,
meshcollider,2021-10-02 00:55:29,"Addressed @sipa's comments, thanks!",https://github.com/bitcoin/bitcoin/pull/16807#issuecomment-932650684,932650684,
meshcollider,2021-10-11 12:36:47,"Rebased 974227bb4576288795984085387ae0802fc3066e -> befad5eef168a193b142c4e6a1d0f120a85aae65 to fix conflict with #22794\n\n\n",https://github.com/bitcoin/bitcoin/pull/16807#issuecomment-939990697,939990697,
meshcollider,2021-10-11 12:40:09,"Also added a new commit 9048249bf003891573e60bf9b8c8ddd4a4cefa1a (""Add lots of comments to Bech32"") which, as the name suggests, adds a lot of explanatory comments to the Bech32 code to assist reviewers and better document the behaviour - up til this point, there was no documentation of how this process works or how to verify the constants.",https://github.com/bitcoin/bitcoin/pull/16807#issuecomment-939992979,939992979,
DrahtBot,2021-10-11 12:40:33,"Btw, if you leave the ""Needs rebase"" label for me to remove, I will also remove all my previous rebase comments, keeping the discussion thread clean.",https://github.com/bitcoin/bitcoin/pull/16807#issuecomment-939993269,939993269,
meshcollider,2021-10-11 22:42:08,@gmaxwell you may also like to review 🙂 ,https://github.com/bitcoin/bitcoin/pull/16807#issuecomment-940496844,940496844,
meshcollider,2021-10-21 08:10:11,Thanks for the detailed review and suggestions @ryanofsky. I'll definitely either incorporate them here or in a follow-up :),https://github.com/bitcoin/bitcoin/pull/16807#issuecomment-948365748,948365748,
laanwj,2021-11-22 12:17:05,"Code review and manually tested ACK 88cc4810926e4f5af6757ee1b0eed61abda3d746\nThanks for adding all the bech32 comments.",https://github.com/bitcoin/bitcoin/pull/16807#issuecomment-975463270,975463270,
meshcollider,2021-11-23 00:09:58,Thanks for the review comments (and the merge)! I will open a follow-up PR today.,https://github.com/bitcoin/bitcoin/pull/16807#issuecomment-976025599,976025599,
promag,2019-09-05 22:18:31,"9d91c4a046d990d7f648328dfed982ad38c87ff1\n\nShould be first test?",https://github.com/bitcoin/bitcoin/pull/16807#discussion_r321506966,321506966,src/bech32.cpp
promag,2019-09-05 22:23:52,"9d91c4a046d990d7f648328dfed982ad38c87ff1\n\nCould add at the top:\n```cpp\nstatic_assert(sizeof(GF1024_LOG) / sizeof(GF1024_LOG[0]) == 2014, ""GF1024_LOG length should be 1024"");\n```\nSame for `GF1024_EXP`.",https://github.com/bitcoin/bitcoin/pull/16807#discussion_r321508485,321508485,src/bech32.cpp
promag,2019-09-05 22:25:37,"9d91c4a046d990d7f648328dfed982ad38c87ff1\n\nCould add some tests to `src/test/bech32_tests.cpp`?",https://github.com/bitcoin/bitcoin/pull/16807#discussion_r321508956,321508956,src/bech32.h
promag,2019-09-05 22:26:04,"9d91c4a046d990d7f648328dfed982ad38c87ff1\n\nnit, `++p1`.",https://github.com/bitcoin/bitcoin/pull/16807#discussion_r321509052,321509052,src/bech32.cpp
promag,2019-09-05 22:43:14,"f877a9b4af7da6632430eff898b957107514e6de\n\nCould include only when prefix matches `CChainParams::Bech32HRP`?",https://github.com/bitcoin/bitcoin/pull/16807#discussion_r321513126,321513126,src/rpc/misc.cpp
meshcollider,2019-09-05 23:23:56,"I thought about this but I wasn't sure, because one of the checks is that the HRP is present and valid too. You're probably right, that would be better for the user.",https://github.com/bitcoin/bitcoin/pull/16807#discussion_r321524216,321524216,src/rpc/misc.cpp
luke-jr,2019-11-13 01:04:58,Why can't this be detected from the input?,https://github.com/bitcoin/bitcoin/pull/16807#discussion_r345524975,345524975,src/rpc/misc.cpp
luke-jr,2019-11-13 02:45:45,File needs +x permission,https://github.com/bitcoin/bitcoin/pull/16807#discussion_r345547050,345547050,test/functional/rpc_validateaddress.py
meshcollider,2019-11-22 19:59:19,"Because if we assume it has errors in it, then we can't rely on checks like whether all the characters are bech32 or base58 or whatever. But I like Sjors' suggestion of counting the characters to find the most likely. I'll try that when I rebase this.",https://github.com/bitcoin/bitcoin/pull/16807#discussion_r349770688,349770688,src/rpc/misc.cpp
luke-jr,2020-02-13 15:04:16,"FWIW, for Knots I am just checking for the Bech32HRP to match",https://github.com/bitcoin/bitcoin/pull/16807#discussion_r378916865,378916865,src/rpc/misc.cpp
Sjors,2020-02-13 15:33:05,That sounds simple enough.,https://github.com/bitcoin/bitcoin/pull/16807#discussion_r378935889,378935889,src/rpc/misc.cpp
luke-jr,2020-02-13 15:45:46,https://github.com/bitcoinknots/bitcoin/commit/65b45fa8f852a6d375061929e6c943c2afbbe681,https://github.com/bitcoin/bitcoin/pull/16807#discussion_r378944439,378944439,src/rpc/misc.cpp
adamjonas,2020-06-22 16:33:28,"This legacy address produces the error ""Invalid Base58 character in address"".",https://github.com/bitcoin/bitcoin/pull/16807#discussion_r443686062,443686062,test/functional/rpc_validateaddress.py
adamjonas,2020-06-22 16:33:48,"Same here - this address produces the error ""Invalid Base58 character in address"".",https://github.com/bitcoin/bitcoin/pull/16807#discussion_r443686267,443686267,test/functional/rpc_validateaddress.py
Sjors,2021-04-22 07:42:41,56b90c86d7d4c1a353cc365126a7900b5bb61da9  I'm having a hard time reaching this error condition (when running this commit). E.g. just swapping a random character tends to result in `Invalid HRP or Base58 character in address` rather than a checksum error. It might be useful to introduce `rpc_validate_address.py` earlier and add some base58 examples to it. ,https://github.com/bitcoin/bitcoin/pull/16807#discussion_r618158717,618158717,src/key_io.cpp
Sjors,2021-04-22 07:44:40,"56b90c86d7d4c1a353cc365126a7900b5bb61da9 nit:  it might be better to introduce this result field, as well as `std::vector<int>& error_locations)` in the next commit.",https://github.com/bitcoin/bitcoin/pull/16807#discussion_r618160087,618160087,src/rpc/misc.cpp
achow101,2021-05-11 22:17:55,"In 3bc568d67537e1725ea0d7472412fe9e4331d01c ""Add functional test for validateaddress""\n\nA lot of this test is repetitive, would be nice to add a check function (maybe `self.assert_valid` and `self.assert_invalid`) that you can just give it all of the different scenarios rather than copying the same 5 lines.",https://github.com/bitcoin/bitcoin/pull/16807#discussion_r630576329,630576329,test/functional/rpc_validateaddress.py
sipa,2021-10-01 19:53:52,In C++17 you can use `std::size(GF1024_EXP) == 1023`.,https://github.com/bitcoin/bitcoin/pull/16807#discussion_r720504922,720504922,src/bech32.cpp
sipa,2021-10-01 19:56:04,"What if there is a typo in the witness version character?\n\nBIP350 actually spells out a strategy for locating errors in this case: https://github.com/bitcoin/bips/blob/master/bip-0350.mediawiki#addresses-for-segregated-witness-outputs",https://github.com/bitcoin/bitcoin/pull/16807#discussion_r720505961,720505961,src/bech32.cpp
sipa,2021-10-01 19:57:54,"Maybe say ""likely error locations""; if you have too many errors, there is no telling where they are.",https://github.com/bitcoin/bitcoin/pull/16807#discussion_r720506961,720506961,src/rpc/misc.cpp
ryanofsky,2021-10-20 17:14:22,"In commit ""Add Bech32 error location function"" (b62b67e06cc406fdad68da4c091168fb5f11c1d4)\n\nComment is out of date",https://github.com/bitcoin/bitcoin/pull/16807#discussion_r732987884,732987884,src/bech32.cpp
ryanofsky,2021-10-20 17:21:53,"In commit ""Add Bech32 error location function"" (b62b67e06cc406fdad68da4c091168fb5f11c1d4)\n\nThese lines could be moved into a function and deduplicated with lines 415-424 above.\n\nMaybe not worth it because a PR that affects address decoding is more dangerous than a PR that just changes error detection.",https://github.com/bitcoin/bitcoin/pull/16807#discussion_r732993382,732993382,src/bech32.cpp
ryanofsky,2021-10-20 19:19:17,"In commit ""Add lots of comments to Bech32"" (5599813b80e53a1539c66625b4320ab1b4fb4848)\n\nCould write a unit test or constexpr compile time test to check this",https://github.com/bitcoin/bitcoin/pull/16807#discussion_r733076803,733076803,src/bech32.cpp
ryanofsky,2021-10-20 22:10:26,"In commit ""More detailed error checking for base58 addresses"" (0b06e720c0182dee8b560d2e8d3891b036f63ea7)\n\nIs there something which guarantees `data` size is greater or equal to `script_prefix` and `pubkey_prefix` sizes? If not then, it seems like this can read uninitialized memory.\n\nWould suggest either adding `assert`'s to make it clear these cases won't happen, or else adding size checks",https://github.com/bitcoin/bitcoin/pull/16807#discussion_r733182597,733182597,src/key_io.cpp
ryanofsky,2021-10-20 22:19:23,"In commit ""More detailed error checking for base58 addresses"" (0b06e720c0182dee8b560d2e8d3891b036f63ea7)\n\nIMO previous error message ""Invalid address format"" seems more understandable if you aren't an address format guru than ""Invalid HRP or Base58 character in address"". Maybe consider keeping the existing message or switching to something in between like ""Not a valid BECH32 or Base58 encoding",https://github.com/bitcoin/bitcoin/pull/16807#discussion_r733187173,733187173,src/key_io.cpp
ryanofsky,2021-10-20 23:09:41,"In commit ""Add Bech32 error location function"" (b62b67e06cc406fdad68da4c091168fb5f11c1d4)\n\nThis code doesn't seem particularly performance critical. Maybe it would be safer to use bounds checked array lookups instead of direct pointer accesses.",https://github.com/bitcoin/bitcoin/pull/16807#discussion_r733208374,733208374,src/bech32.cpp
ryanofsky,2021-10-20 23:18:42,"In commit ""Add boost tests for bech32 error detection"" (c4979f77c1264f0099d1dfa278b1d9c18340b5f9)\n\nCould be good to `static_assert` that ERRORS and CASES arrays are the same size.",https://github.com/bitcoin/bitcoin/pull/16807#discussion_r733211648,733211648,src/test/bech32_tests.cpp
ryanofsky,2021-10-21 02:12:59,"In commit ""Add boost tests for bech32 error detection"" (c4979f77c1264f0099d1dfa278b1d9c18340b5f9)\n\nCould be good to `BOOST_CHECK_EQUAL(error_locations.size(), 1))`.\n\nCould also be good to add cases with size > 1 here, but less important since python tests cover some of these.\n\nSame suggestions could apply to bech32m test below",https://github.com/bitcoin/bitcoin/pull/16807#discussion_r733268345,733268345,src/test/bech32_tests.cpp
ryanofsky,2021-10-21 02:29:22,"In commit ""Add lots of comments to Bech32"" (5599813b80e53a1539c66625b4320ab1b4fb4848)\n\nIf check below is supposed to be a sanity check, shouldn't there be an assert, or a log, or a `push_back(-1)`, or some other indication if it fails? \n\nSame comment applies to other sanity checks and continue statements below. The descriptions here seem like they could be clearer about which of these cond",https://github.com/bitcoin/bitcoin/pull/16807#discussion_r733273384,733273384,src/bech32.cpp
ryanofsky,2021-10-21 02:49:51,"In commit ""Add Bech32 error location function"" (b62b67e06cc406fdad68da4c091168fb5f11c1d4)\n\nMight be nice if this mentioned the encoding that was detected. I.e. add an `optional<Encoding> error_encoding` variable, and set: \n\n```c++\nerror_locations = std::move(possible_errors);\nerror_encoding = encoding;\n```\n\nand return:\n\n```c++\nreturn error_encoding == BECH32M ? ""Invalid bec",https://github.com/bitcoin/bitcoin/pull/16807#discussion_r733280210,733280210,src/bech32.cpp
ryanofsky,2021-10-21 02:57:34,"In commit ""Add release notes for validateaddress Bech32 error detection"" (2eb5792ec7bbeaf7138420b6c85c5cd0a0404946)\n\nMaybe mention that validateaddress returns new more specific error strings if an address can't be decoded.\n\nAlso ""optionally returns"" here seems a little misleading since this isn't an option the caller can control. Would maybe just say it returns error locations whenever it",https://github.com/bitcoin/bitcoin/pull/16807#discussion_r733282751,733282751,doc/release-notes-16807.md
meshcollider,2021-10-21 08:07:24,This would be simple to add yep 👍 ,https://github.com/bitcoin/bitcoin/pull/16807#discussion_r733423395,733423395,src/bech32.cpp
promag,2021-10-25 08:08:52,Consider another `DecodeDestination` overload to avoid pointer to vector: https://github.com/promag/bitcoin/commit/94ca6b403e221f12830ea50158547f1142c67230,https://github.com/bitcoin/bitcoin/pull/16807#discussion_r735354483,735354483,src/key_io.h
ryanofsky,2021-10-25 13:24:06,"Suggestion seems fine, but no reasoning is given, and it's not clearly an improvement. Google's  ""[Use non-const pointers to represent optional outputs](https://google.github.io/styleguide/cppguide.html#Inputs_and_Outputs)"" which is what current code is doing does make it easier to distinguish output arguments from input arguments at call sites.",https://github.com/bitcoin/bitcoin/pull/16807#discussion_r735594827,735594827,src/key_io.h
sipa,2021-11-16 21:50:01,"@ryanofsky Agree, I think this needs a length check.",https://github.com/bitcoin/bitcoin/pull/16807#discussion_r750689669,750689669,src/key_io.cpp
sipa,2021-11-16 22:12:56,"Instead of this function, it may be worth just using [`std::iota`](https://en.cppreference.com/w/cpp/algorithm/iota).\n\nThe function is equivalent to:\n\n```c++\nvoid push_range(int from, int to, std::vector<int>& vec)\n{\n    vec.resize(to - from);\n    std::iota(vec.begin(), vec.end(), from);\n}\n```\n\nBut I suggest just doing that directly in the call sites.",https://github.com/bitcoin/bitcoin/pull/16807#discussion_r750703750,750703750,src/bech32.cpp
sipa,2021-11-16 22:33:03,"Well, you can reject (and not return) candidates for which the checksum type mismatches the witness version (bech32 for 0, bech32m for 1+) AND the character that identifies the witness version is not one of the error locations.",https://github.com/bitcoin/bitcoin/pull/16807#discussion_r750715504,750715504,src/bech32.cpp
sipa,2021-11-16 22:34:41,"@ryanofsky Alternatively, would it help if there was an (additional) `& 0x3FF` inside the `[]`?",https://github.com/bitcoin/bitcoin/pull/16807#discussion_r750716346,750716346,src/bech32.cpp
sipa,2021-11-16 22:37:48,Even nicer would be to have the tables be generated at compile time using a `constexpr` algorithm...,https://github.com/bitcoin/bitcoin/pull/16807#discussion_r750717990,750717990,src/bech32.cpp
laanwj,2021-11-22 11:11:33,"Agree with @ryanofsky here. References are hard to read as output arguments.\nIf you're going to make a separate function declaration, I'd prefer a function that returns it as part of the return value. E.g. as a pair or tuple.\nBut this is fine as-is.",https://github.com/bitcoin/bitcoin/pull/16807#discussion_r754169798,754169798,src/key_io.h
ryanofsky,2021-11-23 01:20:56,"re: https://github.com/bitcoin/bitcoin/pull/16807#discussion_r733208374\n\n> @ryanofsky Alternatively, would it help if there was an (additional) `& 0x3FF` inside the `[]`?\n\nI think most ideal thing would be for it to use something like [`std::array::at`](https://en.cppreference.com/w/cpp/container/array/at) and throw an exception in case of a bug. Alternative of adding `& 0x3FF` to lookups ",https://github.com/bitcoin/bitcoin/pull/16807#discussion_r754747203,754747203,src/bech32.cpp
MarcoFalke,2021-11-25 13:14:51,"Error: attempt to subscript a past-the-end iterator 1 step from its current \nposition, which falls outside its dereferenceable range.\n\nhttps://bugs.chromium.org/p/oss-fuzz/issues/detail?id=41364",https://github.com/bitcoin/bitcoin/pull/16807#discussion_r756879880,756879880,src/key_io.cpp
