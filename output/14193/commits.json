[
  {
    "sha": "fa0c9dbf9156d64a4b9bff858da97825369a9134",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTBjOWRiZjkxNTZkNjRhNGI5YmZmODU4ZGE5NzgyNTM2OWE5MTM0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-05-23T17:17:09Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-06-07T09:06:00Z"
      },
      "message": "txpool: Make nTransactionsUpdated atomic",
      "tree": {
        "sha": "e54ed5513a012acbe92cb553814f30ace3e54f16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e54ed5513a012acbe92cb553814f30ace3e54f16"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa0c9dbf9156d64a4b9bff858da97825369a9134",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUi+Bgv/deyXdF+BoF43SLyp2V1XeyFK/e53li7VUj7XenpJyTa6dnbkMLOpl3D9\nH+JEG5QQyPnJ3BopSvxZMw8aoyG1TOZCm9fMwOU6ubnMgbFcR6+OxU18kY/NUj6T\nJP9ehqOaMV+v3VhPVzgQAOV8djmqc3SpBW+AxJZU5Ag2hhT5e3WLFWM3k0UpkNSP\nRiEsylLfXXhE568YTGaJbQ1pa8T2zaIgTtZ1HGq7uOiCpTP8YtqNK58fmM7Bx4GY\nDSFjwkUK9DrDu8K51Oisj/mcQczz/aIW3dJM9DxPPsn2hHJIFmhZjBzgc3za8Eo9\nYHerbMPfhlm31u6EunWPiEVmLf7tYFCdZ/7l4lz92qnZ5c35NbipOKPoKT2srHUN\nFatBKjniuBDZCz9B6gfViDyxX01/VFMO7malSoOqBPJzBQl3qgvCbf8JqRcidx+4\nFJP+cPpeS0cs5sbxJWQ9cSm7GH770iXtwIyxKFtqvg/dTgMaaNvAN007kntSCGmr\ntm8QGPcS\n=zS3T\n-----END PGP SIGNATURE-----",
        "payload": "tree e54ed5513a012acbe92cb553814f30ace3e54f16\nparent d0f81a96d9c158a9226dc946bdd61d48c4d42959\nauthor MarcoFalke <falke.marco@gmail.com> 1558631829 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1559898360 +0200\n\ntxpool: Make nTransactionsUpdated atomic\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa0c9dbf9156d64a4b9bff858da97825369a9134",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa0c9dbf9156d64a4b9bff858da97825369a9134",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa0c9dbf9156d64a4b9bff858da97825369a9134/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d0f81a96d9c158a9226dc946bdd61d48c4d42959",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0f81a96d9c158a9226dc946bdd61d48c4d42959",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d0f81a96d9c158a9226dc946bdd61d48c4d42959"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "ba5e0cdf64915c8061e132f9893d4fd77e2df7e1",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0c9dbf9156d64a4b9bff858da97825369a9134/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0c9dbf9156d64a4b9bff858da97825369a9134/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=fa0c9dbf9156d64a4b9bff858da97825369a9134",
        "patch": "@@ -480,6 +480,7 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n                 if (g_best_block_cv.wait_until(lock, checktxtime) == std::cv_status::timeout)\n                 {\n                     // Timeout: Check transactions for update\n+                    // without holding ::mempool.cs to avoid deadlocks\n                     if (mempool.GetTransactionsUpdated() != nTransactionsUpdatedLastLP)\n                         break;\n                     checktxtime += std::chrono::seconds(10);"
      },
      {
        "sha": "2f4e5fee4b2287d469bdb6aea9df9a1c62a14f6b",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0c9dbf9156d64a4b9bff858da97825369a9134/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0c9dbf9156d64a4b9bff858da97825369a9134/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=fa0c9dbf9156d64a4b9bff858da97825369a9134",
        "patch": "@@ -322,8 +322,8 @@ void CTxMemPoolEntry::UpdateAncestorState(int64_t modifySize, CAmount modifyFee,\n     assert(int(nSigOpCostWithAncestors) >= 0);\n }\n \n-CTxMemPool::CTxMemPool(CBlockPolicyEstimator* estimator) :\n-    nTransactionsUpdated(0), minerPolicyEstimator(estimator)\n+CTxMemPool::CTxMemPool(CBlockPolicyEstimator* estimator)\n+    : nTransactionsUpdated(0), minerPolicyEstimator(estimator)\n {\n     _clear(); //lock free clear\n \n@@ -341,13 +341,11 @@ bool CTxMemPool::isSpent(const COutPoint& outpoint) const\n \n unsigned int CTxMemPool::GetTransactionsUpdated() const\n {\n-    LOCK(cs);\n     return nTransactionsUpdated;\n }\n \n void CTxMemPool::AddTransactionsUpdated(unsigned int n)\n {\n-    LOCK(cs);\n     nTransactionsUpdated += n;\n }\n "
      },
      {
        "sha": "59514a945b6520fb566b488f4c1963834ba126ae",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0c9dbf9156d64a4b9bff858da97825369a9134/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0c9dbf9156d64a4b9bff858da97825369a9134/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=fa0c9dbf9156d64a4b9bff858da97825369a9134",
        "patch": "@@ -6,12 +6,13 @@\n #ifndef BITCOIN_TXMEMPOOL_H\n #define BITCOIN_TXMEMPOOL_H\n \n+#include <atomic>\n+#include <map>\n #include <memory>\n #include <set>\n-#include <map>\n-#include <vector>\n-#include <utility>\n #include <string>\n+#include <utility>\n+#include <vector>\n \n #include <amount.h>\n #include <coins.h>\n@@ -443,7 +444,7 @@ class CTxMemPool\n {\n private:\n     uint32_t nCheckFrequency GUARDED_BY(cs); //!< Value n means that n times in 2^32 we check.\n-    unsigned int nTransactionsUpdated; //!< Used by getblocktemplate to trigger CreateNewBlock() invocation\n+    std::atomic<unsigned int> nTransactionsUpdated; //!< Used by getblocktemplate to trigger CreateNewBlock() invocation\n     CBlockPolicyEstimator* minerPolicyEstimator;\n \n     uint64_t totalTxSize;      //!< sum of all mempool tx's virtual sizes. Differs from serialized tx size since witness data is discounted. Defined in BIP 141."
      }
    ]
  },
  {
    "sha": "fabeb1f613653a8c1560e4a093a9b6b7a069b60b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWJlYjFmNjEzNjUzYThjMTU2MGU0YTA5M2E5YjZiN2EwNjliNjBi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-12-22T15:33:54Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-06-07T09:07:09Z"
      },
      "message": "validation: Add missing mempool locks",
      "tree": {
        "sha": "d4cebfd9246f3ab39199cb6de9f6834f4484ff7c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d4cebfd9246f3ab39199cb6de9f6834f4484ff7c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fabeb1f613653a8c1560e4a093a9b6b7a069b60b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhN7gv7BDebVzKulnpiIfnveEztlstwUCHncBkeEhAPOKHaC0KF/y6ceJbdYSPb\noaJb9yL5iJpOGaOLFu7wI6k4l5ebzR4vg0Lzg8LaKMVVWVLVTK+TcB+aHKxHf8r8\nM6KLx813m4LBZEYJyhB50MKCUZTIoyU+Wh4hWurst+t55TxcIUXcS0YnBy30P2TX\nZx48reqkX55YFjNKqD8H+T4Am9XVDMVkjH+02azDpdDcHhOv5ut61g80gO31IekG\nBvXtVmdnQxZplIrsUuiXOMhDrTnkzINTZ8vVBHVz0WftkiF5JyIMifm2LTk7aylq\nvgEtcdPOlTDkzDo8q1g1q2JR3gLr8zOJRhZU4XhLFlKuT0PUceFmc1jZGs2rtwkw\nQFY6QYUbcQzP/4Em0opAOXp7bfLmNRMCa9b2UKd89boB7KDOskGsC3Fm+Wx9kdr5\nJIzOMh8R6Rcb1xq2AGUGSGzxHyqnkFnqLleCgqdBy0Aq14rnmiP8jdpstqxXl/Lv\nZgyGxS+Q\n=0Mix\n-----END PGP SIGNATURE-----",
        "payload": "tree d4cebfd9246f3ab39199cb6de9f6834f4484ff7c\nparent fa0c9dbf9156d64a4b9bff858da97825369a9134\nauthor MarcoFalke <falke.marco@gmail.com> 1545492834 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1559898429 +0200\n\nvalidation: Add missing mempool locks\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fabeb1f613653a8c1560e4a093a9b6b7a069b60b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fabeb1f613653a8c1560e4a093a9b6b7a069b60b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fabeb1f613653a8c1560e4a093a9b6b7a069b60b/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa0c9dbf9156d64a4b9bff858da97825369a9134",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa0c9dbf9156d64a4b9bff858da97825369a9134",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa0c9dbf9156d64a4b9bff858da97825369a9134"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 26,
      "deletions": 34
    },
    "files": [
      {
        "sha": "86b08457385c87b13f77a96971e682845a57f61d",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fabeb1f613653a8c1560e4a093a9b6b7a069b60b/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fabeb1f613653a8c1560e4a093a9b6b7a069b60b/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=fabeb1f613653a8c1560e4a093a9b6b7a069b60b",
        "patch": "@@ -469,7 +469,7 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n             nTransactionsUpdatedLastLP = nTransactionsUpdatedLast;\n         }\n \n-        // Release the wallet and main lock while waiting\n+        // Release lock while waiting\n         LEAVE_CRITICAL_SECTION(cs_main);\n         {\n             checktxtime = std::chrono::steady_clock::now() + std::chrono::minutes(1);"
      },
      {
        "sha": "9257cff718740640e19f5b74395f6f1b15445679",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fabeb1f613653a8c1560e4a093a9b6b7a069b60b/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fabeb1f613653a8c1560e4a093a9b6b7a069b60b/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=fabeb1f613653a8c1560e4a093a9b6b7a069b60b",
        "patch": "@@ -104,7 +104,7 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n // for each such descendant, also update the ancestor state to include the parent.\n void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashesToUpdate)\n {\n-    LOCK(cs);\n+    AssertLockHeld(cs);\n     // For each entry in vHashesToUpdate, store the set of in-mempool, but not\n     // in-vHashesToUpdate transactions, so that we don't have to recalculate\n     // descendants when we come across a previously seen entry.\n@@ -457,8 +457,7 @@ void CTxMemPool::CalculateDescendants(txiter entryit, setEntries& setDescendants\n void CTxMemPool::removeRecursive(const CTransaction &origTx, MemPoolRemovalReason reason)\n {\n     // Remove transaction from memory pool\n-    {\n-        LOCK(cs);\n+    AssertLockHeld(cs);\n         setEntries txToRemove;\n         txiter origit = mapTx.find(origTx.GetHash());\n         if (origit != mapTx.end()) {\n@@ -483,13 +482,12 @@ void CTxMemPool::removeRecursive(const CTransaction &origTx, MemPoolRemovalReaso\n         }\n \n         RemoveStaged(setAllRemoves, false, reason);\n-    }\n }\n \n void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight, int flags)\n {\n     // Remove transactions spending a coinbase which are now immature and no-longer-final transactions\n-    LOCK(cs);\n+    AssertLockHeld(cs);\n     setEntries txToRemove;\n     for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         const CTransaction& tx = it->GetTx();\n@@ -545,7 +543,7 @@ void CTxMemPool::removeConflicts(const CTransaction &tx)\n  */\n void CTxMemPool::removeForBlock(const std::vector<CTransactionRef>& vtx, unsigned int nBlockHeight)\n {\n-    LOCK(cs);\n+    AssertLockHeld(cs);\n     std::vector<const CTxMemPoolEntry*> entries;\n     for (const auto& tx : vtx)\n     {\n@@ -920,7 +918,7 @@ void CTxMemPool::RemoveStaged(setEntries &stage, bool updateDescendants, MemPool\n }\n \n int CTxMemPool::Expire(int64_t time) {\n-    LOCK(cs);\n+    AssertLockHeld(cs);\n     indexed_transaction_set::index<entry_time>::type::iterator it = mapTx.get<entry_time>().begin();\n     setEntries toremove;\n     while (it != mapTx.get<entry_time>().end() && it->GetTime() < time) {\n@@ -1013,7 +1011,7 @@ void CTxMemPool::trackPackageRemoved(const CFeeRate& rate) {\n }\n \n void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<COutPoint>* pvNoSpendsRemaining) {\n-    LOCK(cs);\n+    AssertLockHeld(cs);\n \n     unsigned nTxnRemoved = 0;\n     CFeeRate maxFeeRateRemoved(0);"
      },
      {
        "sha": "565dd61f0fe08da875095fbdbbae750c11e517e5",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 9,
        "deletions": 18,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fabeb1f613653a8c1560e4a093a9b6b7a069b60b/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fabeb1f613653a8c1560e4a093a9b6b7a069b60b/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=fabeb1f613653a8c1560e4a093a9b6b7a069b60b",
        "patch": "@@ -514,21 +514,12 @@ class CTxMemPool\n      * `mempool.cs` whenever adding transactions to the mempool and whenever\n      * changing the chain tip. It's necessary to keep both mutexes locked until\n      * the mempool is consistent with the new chain tip and fully populated.\n-     *\n-     * @par Consistency bug\n-     *\n-     * The second guarantee above is not currently enforced, but\n-     * https://github.com/bitcoin/bitcoin/pull/14193 will fix it. No known code\n-     * in bitcoin currently depends on second guarantee, but it is important to\n-     * fix for third party code that needs be able to frequently poll the\n-     * mempool without locking `cs_main` and without encountering missing\n-     * transactions during reorgs.\n      */\n     mutable RecursiveMutex cs;\n     indexed_transaction_set mapTx GUARDED_BY(cs);\n \n     using txiter = indexed_transaction_set::nth_index<0>::type::const_iterator;\n-    std::vector<std::pair<uint256, txiter> > vTxHashes; //!< All tx witness hashes/entries in mapTx, in random order\n+    std::vector<std::pair<uint256, txiter>> vTxHashes GUARDED_BY(cs); //!< All tx witness hashes/entries in mapTx, in random order\n \n     struct CompareIteratorByHash {\n         bool operator()(const txiter &a, const txiter &b) const {\n@@ -583,10 +574,10 @@ class CTxMemPool\n     void addUnchecked(const CTxMemPoolEntry& entry, bool validFeeEstimate = true) EXCLUSIVE_LOCKS_REQUIRED(cs, cs_main);\n     void addUnchecked(const CTxMemPoolEntry& entry, setEntries& setAncestors, bool validFeeEstimate = true) EXCLUSIVE_LOCKS_REQUIRED(cs, cs_main);\n \n-    void removeRecursive(const CTransaction &tx, MemPoolRemovalReason reason = MemPoolRemovalReason::UNKNOWN);\n-    void removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight, int flags) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n-    void removeConflicts(const CTransaction &tx) EXCLUSIVE_LOCKS_REQUIRED(cs);\n-    void removeForBlock(const std::vector<CTransactionRef>& vtx, unsigned int nBlockHeight);\n+    void removeRecursive(const CTransaction& tx, MemPoolRemovalReason reason = MemPoolRemovalReason::UNKNOWN) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    void removeForReorg(const CCoinsViewCache* pcoins, unsigned int nMemPoolHeight, int flags) EXCLUSIVE_LOCKS_REQUIRED(cs, cs_main);\n+    void removeConflicts(const CTransaction& tx) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    void removeForBlock(const std::vector<CTransactionRef>& vtx, unsigned int nBlockHeight) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     void clear();\n     void _clear() EXCLUSIVE_LOCKS_REQUIRED(cs); //lock free\n@@ -599,7 +590,7 @@ class CTxMemPool\n      * Check that none of this transactions inputs are in the mempool, and thus\n      * the tx is not dependent on other mempool transactions to be included in a block.\n      */\n-    bool HasNoInputsOf(const CTransaction& tx) const;\n+    bool HasNoInputsOf(const CTransaction& tx) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     /** Affect CreateNewBlock prioritisation of transactions */\n     void PrioritiseTransaction(const uint256& hash, const CAmount& nFeeDelta);\n@@ -633,7 +624,7 @@ class CTxMemPool\n      *  for).  Note: vHashesToUpdate should be the set of transactions from the\n      *  disconnected block that have been accepted back into the mempool.\n      */\n-    void UpdateTransactionsFromBlock(const std::vector<uint256>& vHashesToUpdate) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    void UpdateTransactionsFromBlock(const std::vector<uint256>& vHashesToUpdate) EXCLUSIVE_LOCKS_REQUIRED(cs, cs_main);\n \n     /** Try to calculate all in-mempool ancestors of entry.\n      *  (these are all calculated including the tx itself)\n@@ -664,10 +655,10 @@ class CTxMemPool\n       *  pvNoSpendsRemaining, if set, will be populated with the list of outpoints\n       *  which are not in mempool which no longer have any spends in this mempool.\n       */\n-    void TrimToSize(size_t sizelimit, std::vector<COutPoint>* pvNoSpendsRemaining=nullptr);\n+    void TrimToSize(size_t sizelimit, std::vector<COutPoint>* pvNoSpendsRemaining = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     /** Expire all transaction (and their dependencies) in the mempool older than time. Return the number of removed transactions. */\n-    int Expire(int64_t time);\n+    int Expire(int64_t time) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     /**\n      * Calculate the ancestor and descendant count for the given transaction."
      },
      {
        "sha": "85bb2103f5f09c3eaa27e585743fe88e5ab11b72",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fabeb1f613653a8c1560e4a093a9b6b7a069b60b/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fabeb1f613653a8c1560e4a093a9b6b7a069b60b/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=fabeb1f613653a8c1560e4a093a9b6b7a069b60b",
        "patch": "@@ -305,7 +305,8 @@ bool CheckSequenceLocks(const CTxMemPool& pool, const CTransaction& tx, int flag\n // Returns the script flags which should be checked for a given block\n static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consensus::Params& chainparams);\n \n-static void LimitMempoolSize(CTxMemPool& pool, size_t limit, unsigned long age) {\n+static void LimitMempoolSize(CTxMemPool& pool, size_t limit, unsigned long age) EXCLUSIVE_LOCKS_REQUIRED(pool.cs)\n+{\n     int expired = pool.Expire(GetTime() - age);\n     if (expired != 0) {\n         LogPrint(BCLog::MEMPOOL, \"Expired %i transactions from the memory pool\\n\", expired);\n@@ -342,7 +343,7 @@ static bool IsCurrentForFeeEstimation() EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n  * and instead just erase from the mempool as needed.\n  */\n \n-static void UpdateMempoolForReorg(DisconnectedBlockTransactions &disconnectpool, bool fAddToMempool) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static void UpdateMempoolForReorg(DisconnectedBlockTransactions& disconnectpool, bool fAddToMempool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, ::mempool.cs)\n {\n     AssertLockHeld(cs_main);\n     std::vector<uint256> vHashUpdate;\n@@ -2549,7 +2550,7 @@ bool CChainState::ActivateBestChain(CValidationState &state, const CChainParams&\n         LimitValidationInterfaceQueue();\n \n         {\n-            LOCK(cs_main);\n+            LOCK2(cs_main, ::mempool.cs); // Lock transaction pool for at least as long as it takes for connectTrace to be consumed\n             CBlockIndex* starting_tip = m_chain.Tip();\n             bool blocks_connected = false;\n             do {\n@@ -2669,6 +2670,7 @@ bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& c\n         LimitValidationInterfaceQueue();\n \n         LOCK(cs_main);\n+        LOCK(::mempool.cs); // Lock for as long as disconnectpool is in scope to make sure UpdateMempoolForReorg is called after DisconnectTip without unlocking in between\n         if (!m_chain.Contains(pindex)) break;\n         pindex_was_in_chain = true;\n         CBlockIndex *invalid_walk_tip = m_chain.Tip();\n@@ -4102,7 +4104,7 @@ bool CChainState::RewindBlockIndex(const CChainParams& params)\n     // Loop until the tip is below nHeight, or we reach a pruned block.\n     while (!ShutdownRequested()) {\n         {\n-            LOCK(cs_main);\n+            LOCK2(cs_main, ::mempool.cs);\n             // Make sure nothing changed from under us (this won't happen because RewindBlockIndex runs before importing/network are active)\n             assert(tip == m_chain.Tip());\n             if (tip == nullptr || tip->nHeight < nHeight) break;"
      },
      {
        "sha": "9b301a4bccf2c0ba9985ad8e7567d1ef335b8f2b",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fabeb1f613653a8c1560e4a093a9b6b7a069b60b/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fabeb1f613653a8c1560e4a093a9b6b7a069b60b/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=fabeb1f613653a8c1560e4a093a9b6b7a069b60b",
        "patch": "@@ -18,6 +18,7 @@\n #include <protocol.h> // For CMessageHeader::MessageStartChars\n #include <script/script_error.h>\n #include <sync.h>\n+#include <txmempool.h> // For CTxMemPool::cs\n #include <versionbits.h>\n \n #include <algorithm>\n@@ -556,7 +557,7 @@ class CChainState {\n                       CCoinsViewCache& view, const CChainParams& chainparams, bool fJustCheck = false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     // Block disconnection on our pcoinsTip:\n-    bool DisconnectTip(CValidationState& state, const CChainParams& chainparams, DisconnectedBlockTransactions* disconnectpool) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    bool DisconnectTip(CValidationState& state, const CChainParams& chainparams, DisconnectedBlockTransactions* disconnectpool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, ::mempool.cs);\n \n     // Manual block validity manipulation:\n     bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex* pindex) LOCKS_EXCLUDED(cs_main);\n@@ -575,8 +576,8 @@ class CChainState {\n     bool IsInitialBlockDownload() const;\n \n private:\n-    bool ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n-    bool ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions &disconnectpool) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    bool ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace) EXCLUSIVE_LOCKS_REQUIRED(cs_main, ::mempool.cs);\n+    bool ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions& disconnectpool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, ::mempool.cs);\n \n     CBlockIndex* AddToBlockIndex(const CBlockHeader& block) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     /** Create a new block index entry for a given block hash */"
      }
    ]
  },
  {
    "sha": "fa2b083c3feb0522baf652045efa6b73458761a3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTJiMDgzYzNmZWIwNTIyYmFmNjUyMDQ1ZWZhNmI3MzQ1ODc2MWEz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-27T12:16:37Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-06-07T09:07:23Z"
      },
      "message": "[test] Add test to check mempool consistency in case of reorgs",
      "tree": {
        "sha": "795525a5cebe1b4ea2ad82a41ff072f98165d263",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/795525a5cebe1b4ea2ad82a41ff072f98165d263"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa2b083c3feb0522baf652045efa6b73458761a3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhRmgv+KLQv+MhHYJGZQv69HoZaAuqfA8n14UG4s4Jyta9QZ/FPY8Lbi6HPEoH6\nmZ1y7fUejdsmx4V97UX4kKZ6vnnLJgwVm9WnPZgareNyAI3bPwmhZDDaN7g94/tF\nPDWG6b0Bbd7bEB7Rj1hEzU+WPBw6BEH6oFn2+hAc+3PHNXrwm2r5tGwn39WBsZsw\nDm13xtgzOJctte4fycfQ+2yBzqSEoG4bhoR2jwI0BELJKglzvhw4g/NpwJUh9R4c\nPQ3gZwMoSONiqB5RAe6+WSdpudGqQJR/D+2viVXe0hUiy1vrW5OJhZmbgjXLRE/t\n+SfUL+Ggt1y3S00t/hnEZugjTBXmKDVg9DncxWCAFakGeH3cgr40Hes8ErMXYalv\nSUDbdfIWC2hZQMGECcQIhe3xy7aztOZI/R6sFMWhWnxgooh6GdHy6ntSNe0/418/\nssYw6PWzSpTP8DEwShk7M5YsCGyvV8sQGxAFi0A0IIjWcmHJB7K2dNKJ0qz3XqUi\nTsYP3AsP\n=o+G5\n-----END PGP SIGNATURE-----",
        "payload": "tree 795525a5cebe1b4ea2ad82a41ff072f98165d263\nparent fabeb1f613653a8c1560e4a093a9b6b7a069b60b\nauthor MarcoFalke <falke.marco@gmail.com> 1540642597 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1559898443 +0200\n\n[test] Add test to check mempool consistency in case of reorgs\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa2b083c3feb0522baf652045efa6b73458761a3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa2b083c3feb0522baf652045efa6b73458761a3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa2b083c3feb0522baf652045efa6b73458761a3/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fabeb1f613653a8c1560e4a093a9b6b7a069b60b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fabeb1f613653a8c1560e4a093a9b6b7a069b60b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fabeb1f613653a8c1560e4a093a9b6b7a069b60b"
      }
    ],
    "stats": {
      "total": 152,
      "additions": 149,
      "deletions": 3
    },
    "files": [
      {
        "sha": "ad3778ccc528794f4bf4bb54103ed826e1a5824b",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 149,
        "deletions": 3,
        "changes": 152,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2b083c3feb0522baf652045efa6b73458761a3/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2b083c3feb0522baf652045efa6b73458761a3/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=fa2b083c3feb0522baf652045efa6b73458761a3",
        "patch": "@@ -10,6 +10,7 @@\n #include <miner.h>\n #include <pow.h>\n #include <random.h>\n+#include <script/standard.h>\n #include <test/setup_common.h>\n #include <validation.h>\n #include <validationinterface.h>\n@@ -18,6 +19,8 @@ struct RegtestingSetup : public TestingSetup {\n     RegtestingSetup() : TestingSetup(CBaseChainParams::REGTEST) {}\n };\n \n+static const std::vector<unsigned char> V_OP_TRUE{OP_TRUE};\n+\n BOOST_FIXTURE_TEST_SUITE(validation_block_tests, RegtestingSetup)\n \n struct TestSubscriber : public CValidationInterface {\n@@ -59,8 +62,21 @@ std::shared_ptr<CBlock> Block(const uint256& prev_hash)\n     pblock->hashPrevBlock = prev_hash;\n     pblock->nTime = ++time;\n \n+    pubKey.clear();\n+    {\n+        WitnessV0ScriptHash witness_program;\n+        CSHA256().Write(&V_OP_TRUE[0], V_OP_TRUE.size()).Finalize(witness_program.begin());\n+        pubKey << OP_0 << ToByteVector(witness_program);\n+    }\n+\n+    // Make the coinbase transaction with two outputs:\n+    // One zero-value one that has a unique pubkey to make sure that blocks at the same height can have a different hash\n+    // Another one that has the coinbase reward in a P2WSH with OP_TRUE as witness program to make it easy to spend\n     CMutableTransaction txCoinbase(*pblock->vtx[0]);\n-    txCoinbase.vout.resize(1);\n+    txCoinbase.vout.resize(2);\n+    txCoinbase.vout[1].scriptPubKey = pubKey;\n+    txCoinbase.vout[1].nValue = txCoinbase.vout[0].nValue;\n+    txCoinbase.vout[0].nValue = 0;\n     txCoinbase.vin[0].scriptWitness.SetNull();\n     pblock->vtx[0] = MakeTransactionRef(std::move(txCoinbase));\n \n@@ -69,6 +85,9 @@ std::shared_ptr<CBlock> Block(const uint256& prev_hash)\n \n std::shared_ptr<CBlock> FinalizeBlock(std::shared_ptr<CBlock> pblock)\n {\n+    LOCK(cs_main); // For LookupBlockIndex\n+    GenerateCoinbaseCommitment(*pblock, LookupBlockIndex(pblock->hashPrevBlock), Params().GetConsensus());\n+\n     pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n \n     while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus())) {\n@@ -79,13 +98,13 @@ std::shared_ptr<CBlock> FinalizeBlock(std::shared_ptr<CBlock> pblock)\n }\n \n // construct a valid block\n-const std::shared_ptr<const CBlock> GoodBlock(const uint256& prev_hash)\n+std::shared_ptr<const CBlock> GoodBlock(const uint256& prev_hash)\n {\n     return FinalizeBlock(Block(prev_hash));\n }\n \n // construct an invalid block (but with a valid header)\n-const std::shared_ptr<const CBlock> BadBlock(const uint256& prev_hash)\n+std::shared_ptr<const CBlock> BadBlock(const uint256& prev_hash)\n {\n     auto pblock = Block(prev_hash);\n \n@@ -185,4 +204,131 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n     BOOST_CHECK_EQUAL(sub.m_expected_tip, ::ChainActive().Tip()->GetBlockHash());\n }\n \n+/**\n+ * Test that mempool updates happen atomically with reorgs.\n+ *\n+ * This prevents RPC clients, among others, from retrieving immediately-out-of-date mempool data\n+ * during large reorgs.\n+ *\n+ * The test verifies this by creating a chain of `num_txs` blocks, matures their coinbases, and then\n+ * submits txns spending from their coinbase to the mempool. A fork chain is then processed,\n+ * invalidating the txns and evicting them from the mempool.\n+ *\n+ * We verify that the mempool updates atomically by polling it continuously\n+ * from another thread during the reorg and checking that its size only changes\n+ * once. The size changing exactly once indicates that the polling thread's\n+ * view of the mempool is either consistent with the chain state before reorg,\n+ * or consistent with the chain state after the reorg, and not just consistent\n+ * with some intermediate state during the reorg.\n+ */\n+BOOST_AUTO_TEST_CASE(mempool_locks_reorg)\n+{\n+    bool ignored;\n+    auto ProcessBlock = [&ignored](std::shared_ptr<const CBlock> block) -> bool {\n+        return ProcessNewBlock(Params(), block, /* fForceProcessing */ true, /* fNewBlock */ &ignored);\n+    };\n+\n+    // Process all mined blocks\n+    BOOST_REQUIRE(ProcessBlock(std::make_shared<CBlock>(Params().GenesisBlock())));\n+    auto last_mined = GoodBlock(Params().GenesisBlock().GetHash());\n+    BOOST_REQUIRE(ProcessBlock(last_mined));\n+\n+    // Run the test multiple times\n+    for (int test_runs = 3; test_runs > 0; --test_runs) {\n+        BOOST_CHECK_EQUAL(last_mined->GetHash(), ::ChainActive().Tip()->GetBlockHash());\n+\n+        // Later on split from here\n+        const uint256 split_hash{last_mined->hashPrevBlock};\n+\n+        // Create a bunch of transactions to spend the miner rewards of the\n+        // most recent blocks\n+        std::vector<CTransactionRef> txs;\n+        for (int num_txs = 22; num_txs > 0; --num_txs) {\n+            CMutableTransaction mtx;\n+            mtx.vin.push_back(CTxIn{COutPoint{last_mined->vtx[0]->GetHash(), 1}, CScript{}});\n+            mtx.vin[0].scriptWitness.stack.push_back(V_OP_TRUE);\n+            mtx.vout.push_back(last_mined->vtx[0]->vout[1]);\n+            mtx.vout[0].nValue -= 1000;\n+            txs.push_back(MakeTransactionRef(mtx));\n+\n+            last_mined = GoodBlock(last_mined->GetHash());\n+            BOOST_REQUIRE(ProcessBlock(last_mined));\n+        }\n+\n+        // Mature the inputs of the txs\n+        for (int j = COINBASE_MATURITY; j > 0; --j) {\n+            last_mined = GoodBlock(last_mined->GetHash());\n+            BOOST_REQUIRE(ProcessBlock(last_mined));\n+        }\n+\n+        // Mine a reorg (and hold it back) before adding the txs to the mempool\n+        const uint256 tip_init{last_mined->GetHash()};\n+\n+        std::vector<std::shared_ptr<const CBlock>> reorg;\n+        last_mined = GoodBlock(split_hash);\n+        reorg.push_back(last_mined);\n+        for (size_t j = COINBASE_MATURITY + txs.size() + 1; j > 0; --j) {\n+            last_mined = GoodBlock(last_mined->GetHash());\n+            reorg.push_back(last_mined);\n+        }\n+\n+        // Add the txs to the tx pool\n+        {\n+            LOCK(cs_main);\n+            CValidationState state;\n+            std::list<CTransactionRef> plTxnReplaced;\n+            for (const auto& tx : txs) {\n+                BOOST_REQUIRE(AcceptToMemoryPool(\n+                    ::mempool,\n+                    state,\n+                    tx,\n+                    /* pfMissingInputs */ &ignored,\n+                    &plTxnReplaced,\n+                    /* bypass_limits */ false,\n+                    /* nAbsurdFee */ 0));\n+            }\n+        }\n+\n+        // Check that all txs are in the pool\n+        {\n+            LOCK(::mempool.cs);\n+            BOOST_CHECK_EQUAL(::mempool.mapTx.size(), txs.size());\n+        }\n+\n+        // Run a thread that simulates an RPC caller that is polling while\n+        // validation is doing a reorg\n+        std::thread rpc_thread{[&]() {\n+            // This thread is checking that the mempool either contains all of\n+            // the transactions invalidated by the reorg, or none of them, and\n+            // not some intermediate amount.\n+            while (true) {\n+                LOCK(::mempool.cs);\n+                if (::mempool.mapTx.size() == 0) {\n+                    // We are done with the reorg\n+                    break;\n+                }\n+                // Internally, we might be in the middle of the reorg, but\n+                // externally the reorg to the most-proof-of-work chain should\n+                // be atomic. So the caller assumes that the returned mempool\n+                // is consistent. That is, it has all txs that were there\n+                // before the reorg.\n+                assert(::mempool.mapTx.size() == txs.size());\n+                continue;\n+            }\n+            LOCK(cs_main);\n+            // We are done with the reorg, so the tip must have changed\n+            assert(tip_init != ::ChainActive().Tip()->GetBlockHash());\n+        }};\n+\n+        // Submit the reorg in this thread to invalidate and remove the txs from the tx pool\n+        for (const auto& b : reorg) {\n+            ProcessBlock(b);\n+        }\n+        // Check that the reorg was eventually successful\n+        BOOST_CHECK_EQUAL(last_mined->GetHash(), ::ChainActive().Tip()->GetBlockHash());\n+\n+        // We can join the other thread, which returns when the reorg was successful\n+        rpc_thread.join();\n+    }\n+}\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]