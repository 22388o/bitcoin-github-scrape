DrahtBot,2018-09-10T23:50:59Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16273](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16273.html) (refactor: Remove unused includes by practic",https://github.com/bitcoin/bitcoin/pull/14193#issuecomment-420098592,420098592,
sdaftuar,2018-09-14T14:26:44Z,"Is the idea that you're trying to prevent RPC users from having an inconsistent state, like if they call getbestblockhash() and then call getrawmempool(), the latter should be consistent with the former?\n\nThat may be reasonable, but I think it'd be good to have some documentation (whether a project document or even a gist explaining our thinking) explaining the consistency guarantees for RPC c",https://github.com/bitcoin/bitcoin/pull/14193#issuecomment-421375559,421375559,
ryanofsky,2018-09-14T17:31:35Z,"> Is the idea that you're trying to prevent RPC users from having an inconsistent state\n\nFrom the description, I assumed the intent of the PR was to prevent RPCs like `getmempoolentry`, which acquire `mempool.cs` but not `cs_main`, from returning garbage or segfaulting during reorgs because `UpdateMempoolForReorg` and `InvalidateBlock` functions were apparently not acquiring `mempool.cs` while",https://github.com/bitcoin/bitcoin/pull/14193#issuecomment-421429944,421429944,
MarcoFalke,2018-09-14T17:50:17Z,"@ryanofsky With inconsistent I don't mean invalid reads, but rather transactions that are invalid (and still in the process of removal) as of our current block tip.",https://github.com/bitcoin/bitcoin/pull/14193#issuecomment-421435147,421435147,
MarcoFalke,2018-10-27T15:04:34Z,"@sdaftuar, @ryanofsky: Added a test with comments to illustrate my motivation a bit more.",https://github.com/bitcoin/bitcoin/pull/14193#issuecomment-433628304,433628304,
MarcoFalke,2018-11-21T02:19:14Z,"The test is trivial, but looks scary because of the boilerplate overhead of the cpp unit tests. Pretty much the only thing it is doing is to check that during a reorg a (simulated) rpc thread (e.g. getrawmempool) would either return a consistent mempool as of before the reorg or a consistent mempool as of after the reorg and never something inconsistent in the middle of a reorg.",https://github.com/bitcoin/bitcoin/pull/14193#issuecomment-440504118,440504118,
MarcoFalke,2018-11-28T19:15:28Z,Added a commit with further comments and documentation.,https://github.com/bitcoin/bitcoin/pull/14193#issuecomment-442569470,442569470,
MarcoFalke,2018-11-29T20:17:06Z,"> add comments for new lock acquisitions explaining why we're grabbing a seemingly unrelated lock at a coarse grain (in line with what @ryanofsky is saying).\n\nI think I already did that. Let me know if any of them are still unclear.",https://github.com/bitcoin/bitcoin/pull/14193#issuecomment-442978333,442978333,
ryanofsky,2018-12-11T01:42:04Z,"I'm probably missing some context, but what is wrong with a simpler design where you just acquire `cs_main` to get a consistent view of chain state, and `mempool::cs` to get a consistent view of the mempool, and both to get a consistent view of both together?\n\nThe new unit test and the getrawmempool example both seem very contrived. Why do these cases need to only acquire `mempool::cs` without",https://github.com/bitcoin/bitcoin/pull/14193#issuecomment-446040973,446040973,
ryanofsky,2018-12-17T18:51:56Z,"It looks like #14963 replaces this PR. Perhaps this should be closed, or marked dependent.",https://github.com/bitcoin/bitcoin/pull/14193#issuecomment-447956395,447956395,
ryanofsky,2019-01-04T18:03:14Z,"re: https://github.com/bitcoin/bitcoin/pull/14193#issuecomment-447956395\n> It looks like #14963 replaces this PR. Perhaps this should be closed, or marked dependent.\n\nTurns out #14963 doesn't really replace this PR, it just documents a bug which this PR (which is currently WIP) will fix:\n\nhttps://github.com/bitcoin/bitcoin/blob/fa5c346c5a336ccdce8e50befb53746c280f053e/src/txmempool.h#L51",https://github.com/bitcoin/bitcoin/pull/14193#issuecomment-451520802,451520802,
MarcoFalke,2019-01-15T18:52:01Z,Addressed some of @ryanofsky's feedback,https://github.com/bitcoin/bitcoin/pull/14193#issuecomment-454507036,454507036,
MarcoFalke,2019-04-25T17:58:06Z,"rewritten test now that segwit is always active in unit tests:\n\n* Add missing call to `GenerateCoinbaseCommitment`\n* Mine the reorg before adding txs to mempool, to not include them in the reorg blocks",https://github.com/bitcoin/bitcoin/pull/14193#issuecomment-486775996,486775996,
MarcoFalke,2019-05-07T21:52:56Z,"The mining is using CreateNewBlock, which gets txs from the mempool (if available).\n\nWhy this worked previously, IIRC, was that segwit wasn't active on regtest in unit tests, but non-standard txs would be accepted to the mempool. (See https://github.com/bitcoin/bitcoin/pull/15788/files#diff-01edb0ae76ec7f6061ec6ddbdb18375aL45 and #15891). Since the txs have witness, they wouldn't be mined prev",https://github.com/bitcoin/bitcoin/pull/14193#issuecomment-490268840,490268840,
MarcoFalke,2019-05-14T13:51:39Z,"Also, the test is already clear on this: `// Mine a reorg (and hold it back) before adding the txs to the mempool`. If you have specific concerns, please suggest a rewording of that sentence.",https://github.com/bitcoin/bitcoin/pull/14193#issuecomment-492246200,492246200,
laanwj,2019-07-02T14:05:05Z,"code review ACK fa2b083c3feb0522baf652045efa6b73458761a3\n\n@ryanofsky didn't you ack the wrong commit above ? e284e422e75189794e24fe482819d8b1407857c3 (""Remove getBlockDepth method from Chain::interface"") isn't part of this PR",https://github.com/bitcoin/bitcoin/pull/14193#issuecomment-507692011,507692011,
ryanofsky,2019-07-02T14:20:00Z,"> @ryanofsky didn't you ack the wrong commit above\n\nSorry, bad copy and paste from the command line. Edited https://github.com/bitcoin/bitcoin/pull/14193#pullrequestreview-255403869 to fix.",https://github.com/bitcoin/bitcoin/pull/14193#issuecomment-507698546,507698546,
laanwj,2019-07-02T14:29:21Z,Thanks!,https://github.com/bitcoin/bitcoin/pull/14193#issuecomment-507702985,507702985,
practicalswift,2018-09-10T21:34:05Z,"Nit: `LOCK2(cs_main, ::mempool.cs);`",https://github.com/bitcoin/bitcoin/pull/14193#discussion_r216480494,216480494,src/validation.cpp
ryanofsky,2018-09-12T21:07:33Z,What's the reason for acquiring mempool lock at a broad scope instead of more narrowly where the mempool is actually accessed? Would be nice to have comments in the places where this PR adds locking to indicate purpose of locks and reasoning behind placement.,https://github.com/bitcoin/bitcoin/pull/14193#discussion_r217189574,217189574,src/validation.cpp
ryanofsky,2018-11-13T17:27:15Z,"In commit ""validation: Add missing mempool locks"" (dea5dbf2d5ca0177d3a4be665790288bef40e27e)\n\nCan you add a comment about what this is for? Do you actually need to hold the lock at the broad scope, or could it be acquired just before calling UpdateMempoolForReorg? Maybe:\n\n```c++\n// Mempool lock for UpdateMempool calls below. (Could be released between calls.)\nLOCK(::mempool.cs);\n```",https://github.com/bitcoin/bitcoin/pull/14193#discussion_r233145184,233145184,src/validation.cpp
ryanofsky,2018-11-13T17:40:11Z,"In commit ""validation: Add missing mempool locks"" (dea5dbf2d5ca0177d3a4be665790288bef40e27e)\n\nIt's not clear why the lock is being acquired here instead of before calling ActivateBestChainStep. It's fine to acquire locks at a broad scope, but it's scary to work with code that acquires locks in unexpected places and gives you no clue where or whether the locks are safe to move. Would suggest ei",https://github.com/bitcoin/bitcoin/pull/14193#discussion_r233150812,233150812,src/validation.cpp
ryanofsky,2018-11-13T21:16:33Z,"In commit ""validation: Add missing mempool locks"" (dea5dbf2d5ca0177d3a4be665790288bef40e27e)\n\nThis is hard to follow. Can you mention this change the commit description? It seems like there is no difference in behavior here except to avoid holding `g_best_block_mutex` while calling `mempool.GetTransactionsUpdated()`? Or am I misinterpreting the diff? If that is the change, it seems good to rel",https://github.com/bitcoin/bitcoin/pull/14193#discussion_r233224490,233224490,src/rpc/mining.cpp
MarcoFalke,2018-11-21T01:41:04Z,"> It seems like there is no difference in behavior here except to avoid holding g_best_block_mutex while calling mempool.GetTransactionsUpdated()?\n\nThat is indeed the motivation and required to avoid a deadlock. (You should be able to see the deadlock stack by reverting this hunk and running the functional test suite)",https://github.com/bitcoin/bitcoin/pull/14193#discussion_r235229141,235229141,src/rpc/mining.cpp
MarcoFalke,2018-11-21T01:53:19Z,"It is held just as long as cs_main, because anything shorter would allow other threads (potentially rpc threads) to read from the mempool and get a result that is most likely useless in case we are in the middle of a larger reorg.",https://github.com/bitcoin/bitcoin/pull/14193#discussion_r235230718,235230718,src/validation.cpp
MarcoFalke,2018-11-21T01:53:57Z,"Oh, and the wallet lock was removed a long time ago, but the comment was never updated.",https://github.com/bitcoin/bitcoin/pull/14193#discussion_r235230815,235230815,src/rpc/mining.cpp
MarcoFalke,2018-11-21T02:11:20Z,"Calling it right before UpdateMempoolForReorg is too fragile and exactly the issue I want to avoid. (E.g. we `DisconnetTip` and then fail to call `UpdateMempoolForReorg`, because another thread acquired the lock)\n\nAt the very least the mempool lock should be held as long as disconnectpool sits on the stack.",https://github.com/bitcoin/bitcoin/pull/14193#discussion_r235233233,235233233,src/validation.cpp
jamesob,2018-11-28T20:41:44Z,"This hunk as-is seems a little overcomplicated to me too if all we want to do is release `g_best_block_mutex` for the mempool operation. This patch (atop `master`) should do:\n```patch\ndiff --git a/src/rpc/mining.cpp b/src/rpc/mining.cpp\nindex c0287ec17..b7f324a97 100644\n--- a/src/rpc/mining.cpp\n+++ b/src/rpc/mining.cpp\n@@ -514,9 +514,14 @@ static UniValue getblocktemplate(const JSONRPC",https://github.com/bitcoin/bitcoin/pull/14193#discussion_r237252285,237252285,src/rpc/mining.cpp
jamesob,2018-11-29T15:58:25Z,"Here's a diff with some added doc and cosmetics:\n```patch\ndiff --git a/src/test/validation_block_tests.cpp b/src/test/validation_block_tests.cpp\nindex 8c285c7e5..f23e299b1 100644\n--- a/src/test/validation_block_tests.cpp\n+++ b/src/test/validation_block_tests.cpp\n@@ -197,14 +197,29 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n     BOOST_CHECK_EQUAL(sub.m_expected_tip, cha",https://github.com/bitcoin/bitcoin/pull/14193#discussion_r237546802,237546802,src/test/validation_block_tests.cpp
jamesob,2018-11-30T20:14:01Z,Would it be clearer to just add `LOCK(cs);` to the top of [the function definition](https://github.com/jamesob/bitcoin/blob/81bd349c9c8dd247d32ece1adcc6db1254ef8971/src/txmempool.cpp#L885-L886) instead of this annotation since there's a recursive lock acquisition in `CTxMempool::exists` anyway?,https://github.com/bitcoin/bitcoin/pull/14193#discussion_r237989280,237989280,src/txmempool.h
jamesob,2018-11-30T20:19:28Z,"We require the `pool.cs` lock for the duration of this function (instead of just relying on the lock in `pool.Expire`) because we want to keep the mempool from changing while `pcoinsTip` modifications happen, correct?",https://github.com/bitcoin/bitcoin/pull/14193#discussion_r237990805,237990805,src/validation.cpp
MarcoFalke,2018-11-30T21:01:02Z,"Imo it is clearer to let the caller figure out how long the lock is required to be held. Imagine this is called in a loop, the you, most likely, wouldn't want to release the lock in between each iteration? Also, it happens that all callers already have the lock taken, since this annotation can be added without any other changes.",https://github.com/bitcoin/bitcoin/pull/14193#discussion_r238000878,238000878,src/txmempool.h
MarcoFalke,2018-11-30T21:02:57Z,"Yeah, calling `LimitMempoolSize` only makes sense after you have written to the mempool, in which case you already have acquired the lock and can keep it for `LimitMempoolSize`.",https://github.com/bitcoin/bitcoin/pull/14193#discussion_r238001324,238001324,src/validation.cpp
jamesob,2018-12-03T21:13:26Z,"Yep, makes sense.",https://github.com/bitcoin/bitcoin/pull/14193#discussion_r238439300,238439300,src/txmempool.h
practicalswift,2018-12-06T15:22:45Z,"`ENTER_CRITICAL_SECTION(…);` isn't RAII, right?\n\n~Do we need to explicitly `LEAVE_CRITICAL_SECTION(…);` when exiting the loop?~",https://github.com/bitcoin/bitcoin/pull/14193#discussion_r239493241,239493241,src/rpc/mining.cpp
jamesob,2018-12-06T15:32:56Z,Nope; the `unlock()`/debug stack pop that `LEAVE_CRITICAL_SECTION(...)` would perform is implicit to the destruction of `lock` when it falls out of scope after the `break`.,https://github.com/bitcoin/bitcoin/pull/14193#discussion_r239497470,239497470,src/rpc/mining.cpp
practicalswift,2018-12-06T15:36:36Z,"@jamesob Makes perfect sense: saw the `WAIT_LOCK(g_best_block_mutex, lock);` now. Thanks.",https://github.com/bitcoin/bitcoin/pull/14193#discussion_r239498987,239498987,src/rpc/mining.cpp
ryanofsky,2018-12-10T19:03:47Z,"It wasn't clear from reading this why size changing once was a useful thing to check. It would help to add some more explanation from your comment in https://github.com/bitcoin/bitcoin/pull/14193#issuecomment-440504118. Maybe an additional sentence: ""The size changing exactly once indicates that the polling thread's view of the mempool is either consistent with the chain state before reorg, or con",https://github.com/bitcoin/bitcoin/pull/14193#discussion_r240339698,240339698,src/test/validation_block_tests.cpp
ryanofsky,2018-12-10T19:08:12Z,Maybe declare `last_mined` below where it is used. It was confusing to see it not used at all in the lambda and then later referenced below.,https://github.com/bitcoin/bitcoin/pull/14193#discussion_r240341166,240341166,src/test/validation_block_tests.cpp
ryanofsky,2018-12-10T19:10:37Z,"Why `!!test_runs` everywhere in this PR instead of `test_runs > 0`? This seems strange, and less readable. Also, why count backwards instead of forwards?",https://github.com/bitcoin/bitcoin/pull/14193#discussion_r240342002,240342002,src/test/validation_block_tests.cpp
ryanofsky,2018-12-10T19:20:55Z,No more !! here? And I was just getting used to it...,https://github.com/bitcoin/bitcoin/pull/14193#discussion_r240345505,240345505,src/test/validation_block_tests.cpp
ryanofsky,2018-12-10T19:27:34Z,"This is actually doing more than checking that ""size only changes once"" as described in the summary comment above. It is checking that the mempool either contains **all** of the transactions invalidated by the reorg, or **none** of them, and not some intermediate amount. Could update the comment above to say this instead.",https://github.com/bitcoin/bitcoin/pull/14193#discussion_r240347801,240347801,src/test/validation_block_tests.cpp
ryanofsky,2018-12-10T20:06:13Z,"This seems less than ideal. I would guess that we don't actually need `ConnectTip` and `DisconnectTip` be holding on to `mempool.cs` while they wait to notify this RPC. At least would seem more straightforward if `g_best_block_cv` got notified after the fact, when `mempool.cs` was already released.\n\nI think it would be good to add a TODO to untangle these locks on the future, or a normal comme",https://github.com/bitcoin/bitcoin/pull/14193#discussion_r240361372,240361372,src/rpc/mining.cpp
ryanofsky,2018-12-10T23:01:00Z,"In commit ""validation: Add missing mempool locks"" (d9e6cb497bd540078dbf32536825fa3bfd60df42)\n\nre:https://github.com/bitcoin/bitcoin/pull/14193#discussion_r233150812\n\n> It's not clear why the lock is being acquired here instead of before calling ActivateBestChainStep.\n\nThank you for adding the comment. But this is still not clear to me. If this code locked the `mempool.cs` before callin",https://github.com/bitcoin/bitcoin/pull/14193#discussion_r240414928,240414928,src/validation.cpp
ryanofsky,2018-12-10T23:38:19Z,"In commit ""[test] Add test to check mempool consistency in case of reorgs"" (fae71ffc99b04bbcb96f4e2b6fa25ed2fe258912)\n\n> Calling it right before UpdateMempoolForReorg is too fragile and exactly the issue I want to avoid. (E.g. we DisconnetTip and then fail to call UpdateMempoolForReorg, because another thread acquired the lock)\n\nThanks for explaining and adding the comment. It is clear if ",https://github.com/bitcoin/bitcoin/pull/14193#discussion_r240423959,240423959,src/validation.cpp
MarcoFalke,2019-02-11T19:36:08Z,"Does you comment still apply after my latest rebase? Also, `ACQUIRED_AFTER` only works in very limited setttings (e.g. not across translation units or even function bodies). We don't use it anywhere else, so I will leave this as is for now.",https://github.com/bitcoin/bitcoin/pull/14193#discussion_r255661199,255661199,src/rpc/mining.cpp
MarcoFalke,2019-02-11T19:37:18Z,The test has a ton of comments. Let me know if I need to add anything else to parts where the code is not self-explanatory.,https://github.com/bitcoin/bitcoin/pull/14193#discussion_r255661638,255661638,src/test/validation_block_tests.cpp
MarcoFalke,2019-02-11T19:37:53Z,Added locking annotations.,https://github.com/bitcoin/bitcoin/pull/14193#discussion_r255661836,255661836,src/validation.cpp
ryanofsky,2019-03-20T16:33:19Z,"In commit ""validation: Add missing mempool locks"" (fadeeadd93a928c8ececa8c96ad2afa45bd25a29)\n\nMight be worth keeping text that says why guarantee 2 is useful. James also asked about it here https://github.com/bitcoin/bitcoin/pull/14193#pullrequestreview-179871886, wondering if it might be useful for dandelion.",https://github.com/bitcoin/bitcoin/pull/14193#discussion_r267433314,267433314,src/txmempool.h
MarcoFalke,2019-03-20T17:18:03Z,"Not sure about that. We generally don't update (forget to update) comments when adding new features. So if a feature is added in the far future (e.g. Dandelion has no chance to hit any time soon), the phrase ""No known code in bitcoin currently depends on second guarantee"" might no longer reflect reality.\n\nI believe the test that I added serves a a nice documentation that if this guarantee is v",https://github.com/bitcoin/bitcoin/pull/14193#discussion_r267453955,267453955,src/txmempool.h
practicalswift,2019-04-15T14:02:17Z,"Nit: Should be ""DisconnectTip"" :-)",https://github.com/bitcoin/bitcoin/pull/14193#discussion_r275375166,275375166,src/validation.cpp
sipa,2019-05-22T21:52:44Z,"This is a pretty weird construction; generally you shouldn't be releasing the lock that protects the state you're waiting to change while inspecting it.\n\nWhat about making `CTxMemPool::nTransactionsUpdated` an atomic, and making `CTxMemPool::GetTransactionsUpdated` not grap `cs`? Would it still be needed to release `lock` here then?\n\nWould you be able to write this as `g_best_block_cv.wait",https://github.com/bitcoin/bitcoin/pull/14193#discussion_r286703079,286703079,src/rpc/mining.cpp
MarcoFalke,2019-06-07T10:35:32Z,"Made it atomic, but I left the refactoring change for a future pull request.",https://github.com/bitcoin/bitcoin/pull/14193#discussion_r291539216,291539216,src/rpc/mining.cpp
promag,2019-06-29T22:55:32Z,:eyes:,https://github.com/bitcoin/bitcoin/pull/14193#discussion_r298813180,298813180,src/txmempool.cpp
promag,2019-06-29T23:07:24Z,"fa2b083c3feb0522baf652045efa6b73458761a3\n\nWhy `continue`?",https://github.com/bitcoin/bitcoin/pull/14193#discussion_r298813325,298813325,src/test/validation_block_tests.cpp
promag,2019-06-29T23:07:37Z,"fa2b083c3feb0522baf652045efa6b73458761a3\n\nI think this is flawless, what guarantees that there's a non-atomic change once `mempool.cs` is released?",https://github.com/bitcoin/bitcoin/pull/14193#discussion_r298813327,298813327,src/test/validation_block_tests.cpp
MarcoFalke,2019-06-30T15:18:37Z,"The code changes in this pull request should guarantee that this doesn't happen here in the test (you can check it by running the test before the code changes and after), as well as for ""real"" rpc polling threads. Though, I didn't write a functional test for this.",https://github.com/bitcoin/bitcoin/pull/14193#discussion_r298838858,298838858,src/test/validation_block_tests.cpp
MarcoFalke,2019-06-30T15:19:15Z,Because the thread should continue and not exit (for now),https://github.com/bitcoin/bitcoin/pull/14193#discussion_r298838888,298838888,src/test/validation_block_tests.cpp
promag,2019-07-01T20:28:33Z,Why would it exit?,https://github.com/bitcoin/bitcoin/pull/14193#discussion_r299204848,299204848,src/test/validation_block_tests.cpp
MarcoFalke,2019-07-01T20:46:19Z,"It would exit when it `break`s. I think this is well documented in the test case and I am not sure what you are asking exactly.\n\nIf you are asking about cpp syntax, I find cppreference really helpful. E.g. https://en.cppreference.com/w/cpp/language/break\n\nIf you are asking about this test case logic, please write a more verbose question.",https://github.com/bitcoin/bitcoin/pull/14193#discussion_r299210818,299210818,src/test/validation_block_tests.cpp
ryanofsky,2019-07-02T14:11:10Z,"I don't get this either. If you have a loop, and an unconditional continue is the last statement in the loop, the continue isn't doing anything and could be removed.\n\nhttps://github.com/bitcoin/bitcoin/blob/fa2b083c3feb0522baf652045efa6b73458761a3/src/test/validation_block_tests.cpp#L316",https://github.com/bitcoin/bitcoin/pull/14193#discussion_r299503348,299503348,src/test/validation_block_tests.cpp
MarcoFalke,2019-07-02T14:54:57Z,"Oh, I now I understand that you were asking why I put a *redundant* `continue` there.\n\nThat was intentional, because I felt it was more clear back when I wrote the test. Happy to remove, but I think we shouldn't spend too much time on style of tests.",https://github.com/bitcoin/bitcoin/pull/14193#discussion_r299526825,299526825,src/test/validation_block_tests.cpp
promag,2019-07-02T15:04:10Z,"I didn't mean to discuss style! I honestly though something was wrong because of the pointless `continue`, like missing code or something else.",https://github.com/bitcoin/bitcoin/pull/14193#discussion_r299531945,299531945,src/test/validation_block_tests.cpp
MarcoFalke,2019-07-02T15:07:49Z,"Ah, good point. Sorry for the confusion.",https://github.com/bitcoin/bitcoin/pull/14193#discussion_r299533826,299533826,src/test/validation_block_tests.cpp
