[
  {
    "sha": "e3e0a2432c587ee06e469c37ffae133b7ac55c77",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplM2UwYTI0MzJjNTg3ZWUwNmU0NjljMzdmZmFlMTMzYjdhYzU1Yzc3",
    "commit": {
      "author": {
        "name": "Martin Ankerl",
        "email": "martin.ankerl@gmail.com",
        "date": "2021-02-13T09:17:31Z"
      },
      "committer": {
        "name": "Martin Ankerl",
        "email": "martin.ankerl@gmail.com",
        "date": "2021-02-13T12:14:16Z"
      },
      "message": "Add benchmark to write JSON into a string\n\nThe benchmark BlockToJsonVerbose only tests generating (and destroying)\nthe JSON data structure, but serializing into a string is also a\nperformance critical aspect of the RPC calls.\n\nAlso, use ankerl::nanobench::doNotOptimizeAway to make sure the compiler\ncan't optimize the result of the calls away.",
      "tree": {
        "sha": "828097bd7ecf9e83450140729633274feeb8c4c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/828097bd7ecf9e83450140729633274feeb8c4c4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e3e0a2432c587ee06e469c37ffae133b7ac55c77",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3e0a2432c587ee06e469c37ffae133b7ac55c77",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e3e0a2432c587ee06e469c37ffae133b7ac55c77",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3e0a2432c587ee06e469c37ffae133b7ac55c77/comments",
    "author": {
      "login": "martinus",
      "id": 14386,
      "node_id": "MDQ6VXNlcjE0Mzg2",
      "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/martinus",
      "html_url": "https://github.com/martinus",
      "followers_url": "https://api.github.com/users/martinus/followers",
      "following_url": "https://api.github.com/users/martinus/following{/other_user}",
      "gists_url": "https://api.github.com/users/martinus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/martinus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
      "organizations_url": "https://api.github.com/users/martinus/orgs",
      "repos_url": "https://api.github.com/users/martinus/repos",
      "events_url": "https://api.github.com/users/martinus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/martinus/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "martinus",
      "id": 14386,
      "node_id": "MDQ6VXNlcjE0Mzg2",
      "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/martinus",
      "html_url": "https://github.com/martinus",
      "followers_url": "https://api.github.com/users/martinus/followers",
      "following_url": "https://api.github.com/users/martinus/following{/other_user}",
      "gists_url": "https://api.github.com/users/martinus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/martinus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
      "organizations_url": "https://api.github.com/users/martinus/orgs",
      "repos_url": "https://api.github.com/users/martinus/repos",
      "events_url": "https://api.github.com/users/martinus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/martinus/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bf3189eda65d269fee6a70681ab390bd7cebf7d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf3189eda65d269fee6a70681ab390bd7cebf7d7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bf3189eda65d269fee6a70681ab390bd7cebf7d7"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 36,
      "deletions": 12
    },
    "files": [
      {
        "sha": "78f8c6e6dc5e9fe2ed398cff108f2eaaada72a21",
        "filename": "src/bench/rpc_blockchain.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 12,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3e0a2432c587ee06e469c37ffae133b7ac55c77/src/bench/rpc_blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3e0a2432c587ee06e469c37ffae133b7ac55c77/src/bench/rpc_blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/rpc_blockchain.cpp?ref=e3e0a2432c587ee06e469c37ffae133b7ac55c77",
        "patch": "@@ -12,25 +12,49 @@\n \n #include <univalue.h>\n \n-static void BlockToJsonVerbose(benchmark::Bench& bench)\n-{\n+namespace {\n+\n+struct TestBlockAndIndex {\n     TestingSetup test_setup{};\n+    CBlock block{};\n+    uint256 blockHash{};\n+    CBlockIndex blockindex{};\n \n-    CDataStream stream(benchmark::data::block413567, SER_NETWORK, PROTOCOL_VERSION);\n-    char a = '\\0';\n-    stream.write(&a, 1); // Prevent compaction\n+    TestBlockAndIndex()\n+    {\n+        CDataStream stream(benchmark::data::block413567, SER_NETWORK, PROTOCOL_VERSION);\n+        char a = '\\0';\n+        stream.write(&a, 1); // Prevent compaction\n \n-    CBlock block;\n-    stream >> block;\n+        stream >> block;\n \n-    CBlockIndex blockindex;\n-    const uint256 blockHash = block.GetHash();\n-    blockindex.phashBlock = &blockHash;\n-    blockindex.nBits = 403014710;\n+        blockHash = block.GetHash();\n+        blockindex.phashBlock = &blockHash;\n+        blockindex.nBits = 403014710;\n+    }\n+};\n \n+} // namespace\n+\n+static void BlockToJsonVerbose(benchmark::Bench& bench)\n+{\n+    TestBlockAndIndex data;\n     bench.run([&] {\n-        (void)blockToJSON(block, &blockindex, &blockindex, /*verbose*/ true);\n+        auto univalue = blockToJSON(data.block, &data.blockindex, &data.blockindex, /*verbose*/ true);\n+        ankerl::nanobench::doNotOptimizeAway(univalue);\n     });\n }\n \n BENCHMARK(BlockToJsonVerbose);\n+\n+static void BlockToJsonVerboseWrite(benchmark::Bench& bench)\n+{\n+    TestBlockAndIndex data;\n+    auto univalue = blockToJSON(data.block, &data.blockindex, &data.blockindex, /*verbose*/ true);\n+    bench.run([&] {\n+        auto str = univalue.write();\n+        ankerl::nanobench::doNotOptimizeAway(str);\n+    });\n+}\n+\n+BENCHMARK(BlockToJsonVerboseWrite);"
      }
    ]
  }
]