[
  {
    "sha": "fa476f188ed1200087ea4cca2e883c792836f845",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTQ3NmYxODhlZDEyMDAwODdlYTRjY2EyZTg4M2M3OTI4MzZmODQ1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-03-05T10:48:34Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-03-05T10:46:13Z"
      },
      "message": "Use C++11 member initializer in CNodeState",
      "tree": {
        "sha": "571051fe3c738d7d1d71e259469c55e9739ecc2c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/571051fe3c738d7d1d71e259469c55e9739ecc2c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa476f188ed1200087ea4cca2e883c792836f845",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiexwv+I4UFfoL8x6hItaPuW+s5LBgxlJBYIMnLqx1rDCzaovfMzZ3pRh+ahbsE\nCoOXfEtEmOIqox3zEwv65cDjSLc2Ltdv/Qx1LlGR/5mYTEeWEPavfofogveCzYFc\n+OSj7I8J4/9RnDqJ+j/j7N7R9oaPqyDo7a6QZbpx9ovkR68FUqs2ecooka889oGD\nfAsFW9wDG7TDjLvV7/jZE9nZv530IOCHKJH9mpkLUhfwLMsTS0KgUAW+GccEkUmM\nb9TvPBlWbjniHowGNvmV2prnlkabxHb2FbB4eJBwsvln3b7k990McOJy0+qSH+dR\npl2hhee2anUPpRf7P1GBdfbKyywFMc1tn19GWVNsac4yz+3JIOIwhk2akgJvp0I4\nqxdlvtQoD0hoj5w5ISuwhF7eOAE+fF5nL83tvwVWAvvJ8H2gvjX5gDYQIZBoUnBS\n/TRycOsy5UkeIak/LDHCYSmn669YegZ4KgPj1ylgugeQEDTMz1X3jc/7wZxikZrE\nF4CaypP5\n=KqSx\n-----END PGP SIGNATURE-----",
        "payload": "tree 571051fe3c738d7d1d71e259469c55e9739ecc2c\nparent ed25cb58f605ba583c735f330482df0bf9348f3a\nauthor MarcoFalke <falke.marco@gmail.com> 1614941314 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1614941173 +0100\n\nUse C++11 member initializer in CNodeState\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa476f188ed1200087ea4cca2e883c792836f845",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa476f188ed1200087ea4cca2e883c792836f845",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa476f188ed1200087ea4cca2e883c792836f845/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ed25cb58f605ba583c735f330482df0bf9348f3a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed25cb58f605ba583c735f330482df0bf9348f3a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ed25cb58f605ba583c735f330482df0bf9348f3a"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 18,
      "deletions": 35
    },
    "files": [
      {
        "sha": "638c39e6be911f451872ccaa7964952b90068f1a",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 35,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa476f188ed1200087ea4cca2e883c792836f845/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa476f188ed1200087ea4cca2e883c792836f845/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=fa476f188ed1200087ea4cca2e883c792836f845",
        "patch": "@@ -491,47 +491,47 @@ struct CNodeState {\n     //! The peer's address\n     const CService address;\n     //! The best known block we know this peer has announced.\n-    const CBlockIndex *pindexBestKnownBlock;\n+    const CBlockIndex* pindexBestKnownBlock{nullptr};\n     //! The hash of the last unknown block this peer has announced.\n-    uint256 hashLastUnknownBlock;\n+    uint256 hashLastUnknownBlock{};\n     //! The last full block we both have.\n-    const CBlockIndex *pindexLastCommonBlock;\n+    const CBlockIndex* pindexLastCommonBlock{nullptr};\n     //! The best header we have sent our peer.\n-    const CBlockIndex *pindexBestHeaderSent;\n+    const CBlockIndex* pindexBestHeaderSent{nullptr};\n     //! Length of current-streak of unconnecting headers announcements\n-    int nUnconnectingHeaders;\n+    int nUnconnectingHeaders{0};\n     //! Whether we've started headers synchronization with this peer.\n-    bool fSyncStarted;\n+    bool fSyncStarted{false};\n     //! When to potentially disconnect peer for stalling headers download\n     std::chrono::microseconds m_headers_sync_timeout{0us};\n     //! Since when we're stalling block download progress (in microseconds), or 0.\n     std::chrono::microseconds m_stalling_since{0us};\n     std::list<QueuedBlock> vBlocksInFlight;\n     //! When the first entry in vBlocksInFlight started downloading. Don't care when vBlocksInFlight is empty.\n     std::chrono::microseconds m_downloading_since{0us};\n-    int nBlocksInFlight;\n-    int nBlocksInFlightValidHeaders;\n+    int nBlocksInFlight{0};\n+    int nBlocksInFlightValidHeaders{0};\n     //! Whether we consider this a preferred download peer.\n-    bool fPreferredDownload;\n+    bool fPreferredDownload{false};\n     //! Whether this peer wants invs or headers (when possible) for block announcements.\n-    bool fPreferHeaders;\n+    bool fPreferHeaders{false};\n     //! Whether this peer wants invs or cmpctblocks (when possible) for block announcements.\n-    bool fPreferHeaderAndIDs;\n+    bool fPreferHeaderAndIDs{false};\n     /**\n       * Whether this peer will send us cmpctblocks if we request them.\n       * This is not used to gate request logic, as we really only care about fSupportsDesiredCmpctVersion,\n       * but is used as a flag to \"lock in\" the version of compact blocks (fWantsCmpctWitness) we send.\n       */\n-    bool fProvidesHeaderAndIDs;\n+    bool fProvidesHeaderAndIDs{false};\n     //! Whether this peer can give us witnesses\n-    bool fHaveWitness;\n+    bool fHaveWitness{false};\n     //! Whether this peer wants witnesses in cmpctblocks/blocktxns\n-    bool fWantsCmpctWitness;\n+    bool fWantsCmpctWitness{false};\n     /**\n      * If we've announced NODE_WITNESS to this peer: whether the peer sends witnesses in cmpctblocks/blocktxns,\n      * otherwise: whether this peer sends non-witnesses in cmpctblocks/blocktxns.\n      */\n-    bool fSupportsDesiredCmpctVersion;\n+    bool fSupportsDesiredCmpctVersion{false};\n \n     /** State used to enforce CHAIN_SYNC_TIMEOUT and EXTRA_PEER_CHECK_INTERVAL logic.\n       *\n@@ -568,13 +568,13 @@ struct CNodeState {\n         bool m_protect;\n     };\n \n-    ChainSyncTimeoutState m_chain_sync;\n+    ChainSyncTimeoutState m_chain_sync{0, nullptr, false, false};\n \n     //! Time of last new block announcement\n-    int64_t m_last_block_announcement;\n+    int64_t m_last_block_announcement{0};\n \n     //! Whether this peer is an inbound connection\n-    bool m_is_inbound;\n+    const bool m_is_inbound;\n \n     //! A rolling bloom filter of all announced tx CInvs to this peer.\n     CRollingBloomFilter m_recently_announced_invs = CRollingBloomFilter{INVENTORY_MAX_RECENT_RELAY, 0.000001};\n@@ -585,23 +585,6 @@ struct CNodeState {\n     CNodeState(CAddress addrIn, bool is_inbound)\n         : address(addrIn), m_is_inbound(is_inbound)\n     {\n-        pindexBestKnownBlock = nullptr;\n-        hashLastUnknownBlock.SetNull();\n-        pindexLastCommonBlock = nullptr;\n-        pindexBestHeaderSent = nullptr;\n-        nUnconnectingHeaders = 0;\n-        fSyncStarted = false;\n-        nBlocksInFlight = 0;\n-        nBlocksInFlightValidHeaders = 0;\n-        fPreferredDownload = false;\n-        fPreferHeaders = false;\n-        fPreferHeaderAndIDs = false;\n-        fProvidesHeaderAndIDs = false;\n-        fHaveWitness = false;\n-        fWantsCmpctWitness = false;\n-        fSupportsDesiredCmpctVersion = false;\n-        m_chain_sync = { 0, nullptr, false, false };\n-        m_last_block_announcement = 0;\n         m_recently_announced_invs.reset();\n     }\n };"
      }
    ]
  }
]