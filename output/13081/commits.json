[
  {
    "sha": "66b0b1b2a6caf9baa2877e414414ec3b37121b8d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NmIwYjFiMmE2Y2FmOWJhYTI4NzdlNDE0NDE0ZWMzYjM3MTIxYjhk",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-04-25T21:16:16Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-05-14T12:57:25Z"
      },
      "message": "Add compile time checking for all cs_wallet runtime locking assertions",
      "tree": {
        "sha": "665fe6f01764e55fe9e9f72e9ebcf0547bab9fc4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/665fe6f01764e55fe9e9f72e9ebcf0547bab9fc4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/66b0b1b2a6caf9baa2877e414414ec3b37121b8d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66b0b1b2a6caf9baa2877e414414ec3b37121b8d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/66b0b1b2a6caf9baa2877e414414ec3b37121b8d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66b0b1b2a6caf9baa2877e414414ec3b37121b8d/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ea7d6553bc7d5660cb2f90f1642b6d7f57d8bf77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea7d6553bc7d5660cb2f90f1642b6d7f57d8bf77",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ea7d6553bc7d5660cb2f90f1642b6d7f57d8bf77"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 37,
      "deletions": 37
    },
    "files": [
      {
        "sha": "7742d5cec46e56c091b5dda2d49897aa4cf4000b",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66b0b1b2a6caf9baa2877e414414ec3b37121b8d/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66b0b1b2a6caf9baa2877e414414ec3b37121b8d/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=66b0b1b2a6caf9baa2877e414414ec3b37121b8d",
        "patch": "@@ -18,7 +18,7 @@\n \n //! Check whether transaction has descendant in wallet or mempool, or has been\n //! mined, or conflicts with a mined transaction. Return a feebumper::Result.\n-static feebumper::Result PreconditionChecks(const CWallet* wallet, const CWalletTx& wtx, std::vector<std::string>& errors)\n+static feebumper::Result PreconditionChecks(const CWallet* wallet, const CWalletTx& wtx, std::vector<std::string>& errors) EXCLUSIVE_LOCKS_REQUIRED(wallet->cs_wallet)\n {\n     if (wallet->HasWalletSpend(wtx.GetHash())) {\n         errors.push_back(\"Transaction has descendants in the wallet\");"
      },
      {
        "sha": "4fe630b66019ba03b194f42baa0ad7772d93f54b",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66b0b1b2a6caf9baa2877e414414ec3b37121b8d/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66b0b1b2a6caf9baa2877e414414ec3b37121b8d/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=66b0b1b2a6caf9baa2877e414414ec3b37121b8d",
        "patch": "@@ -209,7 +209,7 @@ UniValue abortrescan(const JSONRPCRequest& request)\n }\n \n static void ImportAddress(CWallet*, const CTxDestination& dest, const std::string& strLabel);\n-static void ImportScript(CWallet* const pwallet, const CScript& script, const std::string& strLabel, bool isRedeemScript)\n+static void ImportScript(CWallet* const pwallet, const CScript& script, const std::string& strLabel, bool isRedeemScript) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n {\n     if (!isRedeemScript && ::IsMine(*pwallet, script) == ISMINE_SPENDABLE) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n@@ -235,7 +235,7 @@ static void ImportScript(CWallet* const pwallet, const CScript& script, const st\n     }\n }\n \n-static void ImportAddress(CWallet* const pwallet, const CTxDestination& dest, const std::string& strLabel)\n+static void ImportAddress(CWallet* const pwallet, const CTxDestination& dest, const std::string& strLabel) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n {\n     CScript script = GetScriptForDestination(dest);\n     ImportScript(pwallet, script, strLabel, false);\n@@ -811,7 +811,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n }\n \n \n-static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp)\n+static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n {\n     try {\n         bool success = false;"
      },
      {
        "sha": "1e23b44eaeca5834312a6c66f22937f74399eb84",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 32,
        "deletions": 32,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66b0b1b2a6caf9baa2877e414414ec3b37121b8d/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66b0b1b2a6caf9baa2877e414414ec3b37121b8d/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=66b0b1b2a6caf9baa2877e414414ec3b37121b8d",
        "patch": "@@ -710,13 +710,13 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n \n     /* Used by TransactionAddedToMemorypool/BlockConnected/Disconnected.\n      * Should be called with pindexBlock and posInBlock if this is for a transaction that is included in a block. */\n-    void SyncTransaction(const CTransactionRef& tx, const CBlockIndex *pindex = nullptr, int posInBlock = 0);\n+    void SyncTransaction(const CTransactionRef& tx, const CBlockIndex *pindex = nullptr, int posInBlock = 0) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     /* the HD chain data model (external chain counters) */\n     CHDChain hdChain;\n \n     /* HD derive new child key (on internal or external chain) */\n-    void DeriveNewChildKey(WalletBatch &batch, CKeyMetadata& metadata, CKey& secret, bool internal = false);\n+    void DeriveNewChildKey(WalletBatch &batch, CKeyMetadata& metadata, CKey& secret, bool internal = false) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     std::set<int64_t> setInternalKeyPool;\n     std::set<int64_t> setExternalKeyPool;\n@@ -735,7 +735,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n      * of the other AddWatchOnly which accepts a timestamp and sets\n      * nTimeFirstKey more intelligently for more efficient rescans.\n      */\n-    bool AddWatchOnly(const CScript& dest) override;\n+    bool AddWatchOnly(const CScript& dest) override EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     /**\n      * Wallet filename from wallet=<path> command line or config option.\n@@ -786,7 +786,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n      */\n     const std::string& GetName() const { return m_name; }\n \n-    void LoadKeyPool(int64_t nIndex, const CKeyPool &keypool);\n+    void LoadKeyPool(int64_t nIndex, const CKeyPool &keypool) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     void MarkPreSplitKeys();\n \n     // Map from Key ID to key metadata.\n@@ -828,12 +828,12 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     const CWalletTx* GetWalletTx(const uint256& hash) const;\n \n     //! check whether we are allowed to upgrade (or already support) to the named feature\n-    bool CanSupportFeature(enum WalletFeature wf) const { AssertLockHeld(cs_wallet); return nWalletMaxVersion >= wf; }\n+    bool CanSupportFeature(enum WalletFeature wf) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet) { AssertLockHeld(cs_wallet); return nWalletMaxVersion >= wf; }\n \n     /**\n      * populate vCoins with vector of available COutputs.\n      */\n-    void AvailableCoins(std::vector<COutput>& vCoins, bool fOnlySafe=true, const CCoinControl *coinControl = nullptr, const CAmount& nMinimumAmount = 1, const CAmount& nMaximumAmount = MAX_MONEY, const CAmount& nMinimumSumAmount = MAX_MONEY, const uint64_t nMaximumCount = 0, const int nMinDepth = 0, const int nMaxDepth = 9999999) const;\n+    void AvailableCoins(std::vector<COutput>& vCoins, bool fOnlySafe=true, const CCoinControl *coinControl = nullptr, const CAmount& nMinimumAmount = 1, const CAmount& nMaximumAmount = MAX_MONEY, const CAmount& nMinimumSumAmount = MAX_MONEY, const uint64_t nMaximumCount = 0, const int nMinDepth = 0, const int nMaxDepth = 9999999) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     /**\n      * Return list of available coins and locked coins grouped by non-change output address.\n@@ -856,11 +856,11 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n \n     bool IsSpent(const uint256& hash, unsigned int n) const;\n \n-    bool IsLockedCoin(uint256 hash, unsigned int n) const;\n-    void LockCoin(const COutPoint& output);\n-    void UnlockCoin(const COutPoint& output);\n-    void UnlockAllCoins();\n-    void ListLockedCoins(std::vector<COutPoint>& vOutpts) const;\n+    bool IsLockedCoin(uint256 hash, unsigned int n) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    void LockCoin(const COutPoint& output) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    void UnlockCoin(const COutPoint& output) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    void UnlockAllCoins() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    void ListLockedCoins(std::vector<COutPoint>& vOutpts) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     /*\n      * Rescan abort properties\n@@ -873,18 +873,18 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n      * keystore implementation\n      * Generate a new key\n      */\n-    CPubKey GenerateNewKey(WalletBatch& batch, bool internal = false);\n+    CPubKey GenerateNewKey(WalletBatch& batch, bool internal = false) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     //! Adds a key to the store, and saves it to disk.\n-    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override;\n-    bool AddKeyPubKeyWithDB(WalletBatch &batch,const CKey& key, const CPubKey &pubkey);\n+    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool AddKeyPubKeyWithDB(WalletBatch &batch,const CKey& key, const CPubKey &pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     //! Adds a key to the store, without saving it to disk (used by LoadWallet)\n     bool LoadKey(const CKey& key, const CPubKey &pubkey) { return CCryptoKeyStore::AddKeyPubKey(key, pubkey); }\n     //! Load metadata (used by LoadWallet)\n-    bool LoadKeyMetadata(const CKeyID& keyID, const CKeyMetadata &metadata);\n-    bool LoadScriptMetadata(const CScriptID& script_id, const CKeyMetadata &metadata);\n+    bool LoadKeyMetadata(const CKeyID& keyID, const CKeyMetadata &metadata) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool LoadScriptMetadata(const CScriptID& script_id, const CKeyMetadata &metadata) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n-    bool LoadMinVersion(int nVersion) { AssertLockHeld(cs_wallet); nWalletVersion = nVersion; nWalletMaxVersion = std::max(nWalletMaxVersion, nVersion); return true; }\n-    void UpdateTimeFirstKey(int64_t nCreateTime);\n+    bool LoadMinVersion(int nVersion) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet) { AssertLockHeld(cs_wallet); nWalletVersion = nVersion; nWalletMaxVersion = std::max(nWalletMaxVersion, nVersion); return true; }\n+    void UpdateTimeFirstKey(int64_t nCreateTime) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     //! Adds an encrypted key to the store, and saves it to disk.\n     bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret) override;\n@@ -905,8 +905,8 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     std::vector<std::string> GetDestValues(const std::string& prefix) const;\n \n     //! Adds a watch-only address to the store, and saves it to disk.\n-    bool AddWatchOnly(const CScript& dest, int64_t nCreateTime);\n-    bool RemoveWatchOnly(const CScript &dest) override;\n+    bool AddWatchOnly(const CScript& dest, int64_t nCreateTime) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool RemoveWatchOnly(const CScript &dest) override EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     //! Adds a watch-only address to the store, without saving it to disk (used by LoadWallet)\n     bool LoadWatchOnly(const CScript &dest);\n \n@@ -917,16 +917,16 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     bool ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase, const SecureString& strNewWalletPassphrase);\n     bool EncryptWallet(const SecureString& strWalletPassphrase);\n \n-    void GetKeyBirthTimes(std::map<CTxDestination, int64_t> &mapKeyBirth) const;\n+    void GetKeyBirthTimes(std::map<CTxDestination, int64_t> &mapKeyBirth) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     unsigned int ComputeTimeSmart(const CWalletTx& wtx) const;\n \n     /**\n      * Increment the next transaction order id\n      * @return next transaction order id\n      */\n-    int64_t IncOrderPosNext(WalletBatch *batch = nullptr);\n+    int64_t IncOrderPosNext(WalletBatch *batch = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     DBErrors ReorderTransactions();\n-    bool AccountMove(std::string strFrom, std::string strTo, CAmount nAmount, std::string strComment = \"\");\n+    bool AccountMove(std::string strFrom, std::string strTo, CAmount nAmount, std::string strComment = \"\") EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     bool GetLabelDestination(CTxDestination &dest, const std::string& label, bool bForceNew = false);\n \n     void MarkDirty();\n@@ -935,7 +935,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     void TransactionAddedToMempool(const CTransactionRef& tx) override;\n     void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex *pindex, const std::vector<CTransactionRef>& vtxConflicted) override;\n     void BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) override;\n-    bool AddToWalletIfInvolvingMe(const CTransactionRef& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate);\n+    bool AddToWalletIfInvolvingMe(const CTransactionRef& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     int64_t RescanFromTime(int64_t startTime, const WalletRescanReserver& reserver, bool update);\n     CBlockIndex* ScanForWalletTransactions(CBlockIndex* pindexStart, CBlockIndex* pindexStop, const WalletRescanReserver& reserver, bool fUpdate = false);\n     void TransactionRemovedFromMempool(const CTransactionRef &ptx) override;\n@@ -959,7 +959,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n      * calling CreateTransaction();\n      */\n     bool FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosInOut, std::string& strFailReason, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, CCoinControl);\n-    bool SignTransaction(CMutableTransaction& tx);\n+    bool SignTransaction(CMutableTransaction& tx) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     /**\n      * Create a new transaction paying the recipients with a set of coins\n@@ -999,7 +999,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     OutputType m_default_change_type{DEFAULT_CHANGE_TYPE};\n \n     bool NewKeyPool();\n-    size_t KeypoolCountExternalKeys();\n+    size_t KeypoolCountExternalKeys() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     bool TopUpKeyPool(unsigned int kpSize = 0);\n     void ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRequestedInternal);\n     void KeepKey(int64_t nIndex);\n@@ -1009,10 +1009,10 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     /**\n      * Marks all keys in the keypool up to and including reserve_key as used.\n      */\n-    void MarkReserveKeysAsUsed(int64_t keypool_id);\n+    void MarkReserveKeysAsUsed(int64_t keypool_id) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     const std::map<CKeyID, int64_t>& GetAllReserveKeys() const { return m_pool_key_to_index; }\n \n-    std::set< std::set<CTxDestination> > GetAddressGroupings();\n+    std::set<std::set<CTxDestination>> GetAddressGroupings() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     std::map<CTxDestination, CAmount> GetAddressBalances();\n \n     std::set<CTxDestination> GetLabelAddresses(const std::string& label) const;\n@@ -1040,7 +1040,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n \n     DBErrors LoadWallet(bool& fFirstRunRet);\n     DBErrors ZapWalletTx(std::vector<CWalletTx>& vWtx);\n-    DBErrors ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut);\n+    DBErrors ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     bool SetAddressBook(const CTxDestination& address, const std::string& strName, const std::string& purpose);\n \n@@ -1060,7 +1060,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n \n     void GetScriptForMining(std::shared_ptr<CReserveScript> &script);\n \n-    unsigned int GetKeyPoolSize()\n+    unsigned int GetKeyPoolSize() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n     {\n         AssertLockHeld(cs_wallet); // set{Ex,In}ternalKeyPool\n         return setInternalKeyPool.size() + setExternalKeyPool.size();\n@@ -1079,7 +1079,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     std::set<uint256> GetConflicts(const uint256& txid) const;\n \n     //! Check if a given transaction has any of its outputs spent by another transaction in the wallet\n-    bool HasWalletSpend(const uint256& txid) const;\n+    bool HasWalletSpend(const uint256& txid) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     //! Flush wallet (bitdb flush)\n     void Flush(bool shutdown=false);\n@@ -1156,7 +1156,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n      * Obviously holding cs_main/cs_wallet when going into this call may cause\n      * deadlock\n      */\n-    void BlockUntilSyncedToCurrentChain();\n+    void BlockUntilSyncedToCurrentChain() LOCKS_EXCLUDED(cs_wallet);\n \n     /**\n      * Explicitly make the wallet learn the related scripts for outputs to the"
      },
      {
        "sha": "66a50db15d8a07dd986c5b9eb11ceae96d878a92",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66b0b1b2a6caf9baa2877e414414ec3b37121b8d/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66b0b1b2a6caf9baa2877e414414ec3b37121b8d/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=66b0b1b2a6caf9baa2877e414414ec3b37121b8d",
        "patch": "@@ -248,7 +248,7 @@ class CWalletScanState {\n \n static bool\n ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n-             CWalletScanState &wss, std::string& strType, std::string& strErr)\n+             CWalletScanState &wss, std::string& strType, std::string& strErr) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n {\n     try {\n         // Unserialize"
      }
    ]
  }
]