sipa,2018-06-09T03:59:31Z,Here is an extra simplification we discussed IRL: https://github.com/sipa/bitcoin/commits/achow_sigdata-partial-sigs,https://github.com/bitcoin/bitcoin/pull/13425#issuecomment-395937612,395937612,
achow101,2018-06-09T19:42:43Z,I have included squashed in @sipa's suggested commits.,https://github.com/bitcoin/bitcoin/pull/13425#issuecomment-395993832,395993832,
sipa,2018-06-09T19:54:47Z,You're missing the `DUMMY_SIGNING_PROVIDER` instance.,https://github.com/bitcoin/bitcoin/pull/13425#issuecomment-395994552,395994552,
achow101,2018-06-09T20:50:38Z,"> You're missing the `DUMMY_SIGNING_PROVIDER` instance.\n\nFixed",https://github.com/bitcoin/bitcoin/pull/13425#issuecomment-395997934,395997934,
sipa,2018-06-09T23:56:24Z,"utACK 862c0d1749e28c46fd7c5fb951ac41f6d5dfad06\n\nPerhaps something to add to the rationale: by having all processing be done by `ProduceSignature` (which now can take existing partial signatures as input), the model much more closely matches BIP 174 procedures. The changes here should make it possible for the BIP174 implementation to largely reuse the existing signing code.",https://github.com/bitcoin/bitcoin/pull/13425#issuecomment-396007404,396007404,
achow101,2018-06-11T19:03:36Z,I added a helper function for `createSig` which handles the fetching and placing of signatures from the SignatureData.,https://github.com/bitcoin/bitcoin/pull/13425#issuecomment-396351220,396351220,
achow101,2018-06-12T18:03:25Z,Removed the `newsigs` map from the first commit. Also moved some changes around to commits where they actually made sense to be in.,https://github.com/bitcoin/bitcoin/pull/13425#issuecomment-396681093,396681093,
sipa,2018-06-12T18:55:33Z,"Perhaps this PR can be renamed to ""PSBT signer logic""; it may not be clear right now that in addition to being a code simplification, this also effectively reduces the PSBT PR to serialization + RPC implementations.",https://github.com/bitcoin/bitcoin/pull/13425#issuecomment-396696793,396696793,
achow101,2018-06-12T19:03:16Z,"Updated the title to include ""PSBT signer logic"".",https://github.com/bitcoin/bitcoin/pull/13425#issuecomment-396698967,396698967,
meshcollider,2018-06-13T21:01:05Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/13425#issuecomment-397085336,397085336,
DrahtBot,2018-06-14T20:25:53Z,"<!--e57a25ab6845829454e8d69fc972939a-->Note to reviewers: This pull request conflicts with the following ones:\n\n* #13449 ([WIP] support new multisig template in wallet for Solver, signing, and signature combining by instagibbs)\n* #13429 (Return the script type from Solver by Empact)\n* #13360 ([Policy] Reject SIGHASH_SINGLE with output out of bound by jl2012)\n* #13266 (refactoring: Inline Data",https://github.com/bitcoin/bitcoin/pull/13425#issuecomment-397427171,397427171,
sipa,2018-06-14T23:09:46Z,utACK 3d2cbe67e413e8de0b7144280a19bb348d1a76ca. Only change is addressing my last nits.,https://github.com/bitcoin/bitcoin/pull/13425#issuecomment-397465271,397465271,
achow101,2018-06-27T03:03:33Z,I rebased this and have also updated the SignatureData to match the planned changes for BIP 174.,https://github.com/bitcoin/bitcoin/pull/13425#issuecomment-400528161,400528161,
sipa,2018-06-27T04:03:51Z,utACK 33b85bb01f71d6da7cde39eb5cf42dd581de14b6.,https://github.com/bitcoin/bitcoin/pull/13425#issuecomment-400536102,400536102,
instagibbs,2018-06-27T13:51:22Z,Comments on just making it clearer to readers of the code what's going on.,https://github.com/bitcoin/bitcoin/pull/13425#issuecomment-400678911,400678911,
instagibbs,2018-06-28T19:04:38Z,utACK https://github.com/bitcoin/bitcoin/pull/13425/commits/95f5a38dd0da039e34aeb805c80e38d3374b9077,https://github.com/bitcoin/bitcoin/pull/13425#issuecomment-401140466,401140466,
achow101,2018-06-28T19:12:41Z,Addressed @promag's comments from https://github.com/bitcoin/bitcoin/pull/13557#pullrequestreview-132751570,https://github.com/bitcoin/bitcoin/pull/13425#issuecomment-401142578,401142578,
sipa,2018-06-29T01:32:39Z,reutACK a0982864893db999484850282822472cce16913c,https://github.com/bitcoin/bitcoin/pull/13425#issuecomment-401221255,401221255,
laanwj,2018-07-05T15:17:55Z,utACK b815600295bd5e7b274c8ee32da65f1419a79ab2,https://github.com/bitcoin/bitcoin/pull/13425#issuecomment-402757868,402757868,
sipa,2018-06-09T19:11:54Z,Use `CScriptID` as key type?,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r194236571,194236571,src/script/sign.h
sipa,2018-06-09T19:12:15Z,"If you use `CKeyID` as key type here, you can avoid the iteration to find matches.",https://github.com/bitcoin/bitcoin/pull/13425#discussion_r194236575,194236575,src/script/sign.h
sipa,2018-06-09T19:12:48Z,Nit: `> >`.,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r194236583,194236583,src/script/sign.cpp
sipa,2018-06-09T19:15:17Z,"Perhaps add a comment that explains the overlap in relevance of these fields:\n* `scriptSig` and `scriptWitness` are used for both complete signatures, and for old-style partial signatures.\n* `signatures` and `scripts` are only used for new-style partial signatures, but may be present for complete signatures too.",https://github.com/bitcoin/bitcoin/pull/13425#discussion_r194236633,194236633,src/script/sign.h
sipa,2018-06-09T19:18:21Z,"It feels a bit ugly to hardcode the dependency on `MutableTransactionSignatureChecker`, as there isn't technically anything in this class that requires it (you could pass in a `BaseSignatureChecker` reference instead).\n\nThis is just a nit, as it's really only used in `DataFromTransaction` and probably won't ever be used elsewhere.",https://github.com/bitcoin/bitcoin/pull/13425#discussion_r194236723,194236723,src/script/sign.h
sipa,2018-06-09T19:22:58Z,"In ""Replace CombineSignatures with ProduceSignature""\n\nSee my suggested commits in https://github.com/sipa/bitcoin/tree/achow_sigdata-partial-sigs to avoid introducing the `SignatureDataSigningProvider` and `SignatureDataSignatureCreator` classes here.",https://github.com/bitcoin/bitcoin/pull/13425#discussion_r194236827,194236827,src/bitcoin-tx.cpp
sipa,2018-06-09T19:23:53Z,Would it make sense to introduce a wrapper here as well for the pattern that replaces the `CombineSignatures` calls?,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r194236845,194236845,src/test/transaction_tests.cpp
achow101,2018-06-09T19:37:23Z,`GetPubKey` won't work if these are `CKeyID`s,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r194237125,194237125,src/script/sign.h
sipa,2018-06-09T19:42:35Z,"Ah, good point. You could have an `std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>>` though, which stores both full public key and signature.",https://github.com/bitcoin/bitcoin/pull/13425#discussion_r194237258,194237258,src/script/sign.h
sipa,2018-06-09T19:51:27Z,"If you'd introduce a `sigdata.scripts.emplace(CScriptID(subscript), subscript);` here (and similarly below for the `TX_WITNESS_V0_SCRIPTHASH` case), you get (I think) all functionality you need for operating on `SignatureData` objects without the need for the legacy partial signatures.",https://github.com/bitcoin/bitcoin/pull/13425#discussion_r194237501,194237501,src/script/sign.cpp
achow101,2018-06-09T20:25:45Z,I'm not sure that that is possible since I need to use `MutableTransactionSignatureChecker::CheckSig` as I do not want to re-implement a signature checker when one already exists.,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r194238177,194238177,src/script/sign.h
sipa,2018-06-09T20:30:19Z,Oh of course; I just mean that you pass in a `BaseSignatureChecker*` which is stored inside. You can then call its CheckSig member function (which is public).,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r194238270,194238270,src/script/sign.h
achow101,2018-06-09T20:49:02Z,Done,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r194238659,194238659,src/script/sign.h
achow101,2018-06-09T20:49:48Z,Fixed,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r194238674,194238674,src/script/sign.cpp
achow101,2018-06-09T20:49:53Z,Done,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r194238677,194238677,src/script/sign.h
achow101,2018-06-09T20:50:06Z,Done,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r194238684,194238684,src/bitcoin-tx.cpp
achow101,2018-06-09T20:50:14Z,Done,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r194238688,194238688,src/script/sign.cpp
sipa,2018-06-09T21:12:11Z,Nit: `mi->second`.,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r194239067,194239067,src/script/sign.cpp
sipa,2018-06-09T21:12:32Z,Can be `const auto&`.,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r194239072,194239072,src/script/sign.cpp
sipa,2018-06-09T21:13:37Z,Can probably rename `vchPubKeyOut` to `pubkey` or so now.,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r194239095,194239095,src/script/sign.cpp
sipa,2018-06-09T21:14:00Z,We should probably rename this to `pubkey`.,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r194239101,194239101,src/script/sign.cpp
sipa,2018-06-09T21:15:22Z,`next_script = std::move(redeem_script)`.,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r194239124,194239124,src/script/sign.cpp
sipa,2018-06-09T21:16:02Z,`next_script = std::move(witness_script);`.,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r194239135,194239135,src/script/sign.cpp
achow101,2018-06-09T21:16:07Z,Done,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r194239138,194239138,src/script/sign.h
sipa,2018-06-09T21:19:45Z,You're computing `pubkey.GetID()` twice; perhaps store in a variable and reuse?,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r194239207,194239207,src/script/sign.cpp
sipa,2018-06-09T21:20:49Z,`stack.script = std::move(stack.witness);`.,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r194239223,194239223,src/script/sign.cpp
sipa,2018-06-09T21:21:13Z,Style nit: `{` on the same line as `for`.,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r194239228,194239228,src/script/sign.cpp
sipa,2018-06-09T21:21:39Z,"Style nit: `continue` either on the same line as `if`, or indented while surrounded by braces.",https://github.com/bitcoin/bitcoin/pull/13425#discussion_r194239232,194239232,src/script/sign.cpp
sipa,2018-06-09T21:21:50Z,Style nit: `{` on the same line as `if`.,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r194239234,194239234,src/script/sign.cpp
sipa,2018-06-09T21:23:44Z,"Ultra nit: ""update with signature data"" sounds a bit weird for signature data itself. Perhaps call it `Merge` or so?",https://github.com/bitcoin/bitcoin/pull/13425#discussion_r194239269,194239269,src/script/sign.h
achow101,2018-06-09T21:31:01Z,"Ah, right. Done.",https://github.com/bitcoin/bitcoin/pull/13425#discussion_r194239389,194239389,src/script/sign.h
achow101,2018-06-09T21:52:33Z,Done,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r194239781,194239781,src/script/sign.cpp
achow101,2018-06-09T21:52:38Z,Done,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r194239783,194239783,src/script/sign.cpp
achow101,2018-06-09T21:52:42Z,Done,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r194239788,194239788,src/script/sign.cpp
achow101,2018-06-09T21:52:48Z,Done,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r194239791,194239791,src/script/sign.cpp
achow101,2018-06-09T21:52:52Z,Done,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r194239793,194239793,src/script/sign.cpp
achow101,2018-06-09T21:53:00Z,Done,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r194239796,194239796,src/script/sign.cpp
achow101,2018-06-09T21:53:06Z,done,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r194239801,194239801,src/script/sign.cpp
achow101,2018-06-09T21:53:11Z,Done,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r194239805,194239805,src/script/sign.cpp
achow101,2018-06-09T21:53:16Z,Done,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r194239806,194239806,src/script/sign.cpp
achow101,2018-06-09T21:53:21Z,Done,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r194239807,194239807,src/script/sign.cpp
achow101,2018-06-09T21:53:26Z,Done,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r194239808,194239808,src/script/sign.cpp
achow101,2018-06-09T21:53:31Z,Done,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r194239811,194239811,src/script/sign.h
achow101,2018-06-09T22:51:19Z,Done,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r194240786,194240786,src/test/transaction_tests.cpp
sipa,2018-06-12T18:23:29Z,"You could start this loop after the last successful key in previous iterations, as keys and signature need to have a corresponding order.\n\nOtherwise you risk O(n^2) behaviour if they're in opposite order (perhaps we want to support that, but I don't think we currently do).",https://github.com/bitcoin/bitcoin/pull/13425#discussion_r194842111,194842111,src/script/sign.cpp
sipa,2018-06-12T18:23:47Z,"This can end with a `break` as well, I think.",https://github.com/bitcoin/bitcoin/pull/13425#discussion_r194842208,194842208,src/script/sign.cpp
achow101,2018-06-12T19:02:48Z,Done,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r194854134,194854134,src/script/sign.cpp
achow101,2018-06-12T19:02:54Z,Done,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r194854164,194854164,src/script/sign.cpp
sipa,2018-06-13T23:52:59Z,"`i + 1` even, I think (the same signature can't be reused for another pubkey).",https://github.com/bitcoin/bitcoin/pull/13425#discussion_r195269367,195269367,src/script/sign.cpp
sipa,2018-06-14T00:53:53Z,"Very nitty: this line and the next will perform an unnecessary copy. You can avoid it with `scripts.insert(std::make_move_iterator(sigdata.scripts.begin()), std::make_move_iterator(sigdata.scripts.end());` etc.",https://github.com/bitcoin/bitcoin/pull/13425#discussion_r195277213,195277213,src/script/sign.cpp
achow101,2018-06-14T01:49:14Z,Done,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r195283618,195283618,src/script/sign.cpp
achow101,2018-06-14T01:49:19Z,Done,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r195283624,195283624,src/script/sign.cpp
instagibbs,2018-06-27T13:07:54Z,"may want to rephrase or define ""complete signatures"". I assume you mean it in the PSBT sense.",https://github.com/bitcoin/bitcoin/pull/13425#discussion_r198487474,198487474,src/script/sign.h
instagibbs,2018-06-27T13:08:21Z,Since we're heavily augmenting this struct could we get a description of the struct's purpose in a comment above it?,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r198487653,198487653,src/script/sign.h
instagibbs,2018-06-27T13:09:09Z,"""from a transaction input""?",https://github.com/bitcoin/bitcoin/pull/13425#discussion_r198487913,198487913,src/script/sign.h
instagibbs,2018-06-27T13:16:22Z,witness script vs script witness.... let's explain this one as well.,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r198490355,198490355,src/script/sign.h
instagibbs,2018-06-27T13:17:47Z,May want to note it won't extract scripts(redeem script and witness script) if the signatures are already complete,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r198490828,198490828,src/script/sign.cpp
instagibbs,2018-06-27T13:47:01Z,suggestion: rename this `extractor_checker` to make later code more clear. Final code block looks like it doesn't change any state if reader thinks it's a different checker.,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r198501291,198501291,src/script/sign.cpp
instagibbs,2018-06-27T13:50:22Z,"Also, I presume this function is only dealing with multisigs, since it doesn't need to know any special scripts to otherwise sign or extract signatures for pubkey-based outputs?",https://github.com/bitcoin/bitcoin/pull/13425#discussion_r198502519,198502519,src/script/sign.cpp
achow101,2018-06-27T20:57:59Z,Done,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r198638639,198638639,src/script/sign.h
achow101,2018-06-27T20:58:06Z,Done,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r198638666,198638666,src/script/sign.h
achow101,2018-06-27T20:58:13Z,Done,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r198638699,198638699,src/script/sign.h
achow101,2018-06-27T20:58:23Z,Done,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r198638743,198638743,src/script/sign.cpp
achow101,2018-06-27T20:58:32Z,Done,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r198638784,198638784,src/script/sign.cpp
achow101,2018-06-27T21:01:53Z,Done,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r198639737,198639737,src/script/sign.h
Empact,2018-06-29T22:46:27Z,"nit: these comments could be doxygenized, e.g. https://www.stack.nl/~dimitri/doxygen/manual/docblocks.html#memberdoc",https://github.com/bitcoin/bitcoin/pull/13425#discussion_r199296949,199296949,src/script/sign.h
Empact,2018-06-29T22:52:50Z,"If you leave this pure virtual, it will continue to require that all inheritors implement the associated functions. With this change there's no such forward requirement.",https://github.com/bitcoin/bitcoin/pull/13425#discussion_r199297841,199297841,src/script/sign.h
Empact,2018-06-29T23:14:43Z,"nit: This is the only use of `keyID` now, so you could declare it in this block.",https://github.com/bitcoin/bitcoin/pull/13425#discussion_r199300317,199300317,src/script/sign.cpp
achow101,2018-06-30T00:23:30Z,So?,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r199305859,199305859,src/script/sign.h
achow101,2018-06-30T00:33:18Z,Done,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r199306530,199306530,src/script/sign.h
achow101,2018-06-30T00:33:23Z,Done,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r199306536,199306536,src/script/sign.cpp
Empact,2018-06-30T02:47:07Z,"The theory is that if this stays an abstract base class, any future descendant are more likely to be correct & intentional if the compiler ensures that each of these methods is defined. It’s a more defensive and theoretical concern than a practical one, but I also think it’s cleaner if a dummy class does not influence the base class for all of the other classes.",https://github.com/bitcoin/bitcoin/pull/13425#discussion_r199310878,199310878,src/script/sign.h
sipa,2018-06-30T03:24:35Z,"The question is really whether ""return false;"" is a reasonable default implementation for someone who doesn't want to implement one or more of the methods. I believe it is, though it can still be split up into an interface pure virtual class, and a dummy implementation you can inherit from when one or more things are intentionally missing.",https://github.com/bitcoin/bitcoin/pull/13425#discussion_r199311590,199311590,src/script/sign.h
Empact,2018-07-01T20:49:56Z,"This is the same as CryptedKeyMap in keystore.h, might make sense to integrate the definitions.",https://github.com/bitcoin/bitcoin/pull/13425#discussion_r199361091,199361091,src/script/sign.h
sipa,2018-07-01T21:00:25Z,No it's not. This stores signatures and pubkeys.,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r199361322,199361322,src/script/sign.h
Empact,2018-07-01T21:02:38Z,It's a bit strange that this commit adds MergeSignatureData but doesn't use it.,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r199361374,199361374,src/script/sign.h
Empact,2018-07-01T21:04:31Z,"To be clear, the type definitions are the same:\nhttps://github.com/bitcoin/bitcoin/blob/686e97a0c7358291d628213447cf33e99cde7ce8/src/keystore.h#L78",https://github.com/bitcoin/bitcoin/pull/13425#discussion_r199361412,199361412,src/script/sign.h
sipa,2018-07-01T21:19:30Z,"Ah, I see.\n\nI generally don't think types should be identical because their construction is the same. The contents has a very different meaning, so having separate names makes sense.",https://github.com/bitcoin/bitcoin/pull/13425#discussion_r199361827,199361827,src/script/sign.h
achow101,2018-07-02T21:12:31Z,Moved to the commit where it is used.,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r199622592,199622592,src/script/sign.h
sipa,2018-07-03T23:51:47Z,"The implementation is now in the next commit, but the definition is still in ""Make SignatureData able to store signatures and scripts"".",https://github.com/bitcoin/bitcoin/pull/13425#discussion_r199978729,199978729,src/script/sign.h
sipa,2018-07-03T23:52:47Z,"I don't think this class is used (or intended to be used) outside of `sign.cpp`, so perhaps move it there, inside the anonymous namespace?",https://github.com/bitcoin/bitcoin/pull/13425#discussion_r199978883,199978883,src/script/sign.h
achow101,2018-07-04T00:20:06Z,Moved the definition.,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r199981914,199981914,src/script/sign.h
achow101,2018-07-04T00:20:12Z,Moved,https://github.com/bitcoin/bitcoin/pull/13425#discussion_r199981926,199981926,src/script/sign.h
