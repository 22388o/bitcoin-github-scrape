[
  {
    "sha": "b6edb4f5e6e0bf0f9c7dd26a125849f0103b44cd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNmVkYjRmNWU2ZTBiZjBmOWM3ZGQyNmExMjU4NDlmMDEwM2I0NGNk",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-06-09T19:06:25Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-06-30T00:32:32Z"
      },
      "message": "Inline Sign1 and SignN\n\nSign1 and SignN are kind of redundant so remove them and inline their\nbehavior into SignStep",
      "tree": {
        "sha": "431466d02146fdafc3c63b75f397e0ba2bd45980",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/431466d02146fdafc3c63b75f397e0ba2bd45980"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b6edb4f5e6e0bf0f9c7dd26a125849f0103b44cd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6edb4f5e6e0bf0f9c7dd26a125849f0103b44cd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b6edb4f5e6e0bf0f9c7dd26a125849f0103b44cd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6edb4f5e6e0bf0f9c7dd26a125849f0103b44cd/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2643fa50869f22672cbc72ac497d9c30234075b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2643fa50869f22672cbc72ac497d9c30234075b8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2643fa50869f22672cbc72ac497d9c30234075b8"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 26,
      "deletions": 39
    },
    "files": [
      {
        "sha": "05fde3b549859d54fe367ef5bb4520bba548cfb0",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 39,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6edb4f5e6e0bf0f9c7dd26a125849f0103b44cd/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6edb4f5e6e0bf0f9c7dd26a125849f0103b44cd/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=b6edb4f5e6e0bf0f9c7dd26a125849f0103b44cd",
        "patch": "@@ -33,29 +33,6 @@ bool MutableTransactionSignatureCreator::CreateSig(const SigningProvider& provid\n     return true;\n }\n \n-static bool Sign1(const SigningProvider& provider, const CKeyID& address, const BaseSignatureCreator& creator, const CScript& scriptCode, std::vector<valtype>& ret, SigVersion sigversion)\n-{\n-    std::vector<unsigned char> vchSig;\n-    if (!creator.CreateSig(provider, vchSig, address, scriptCode, sigversion))\n-        return false;\n-    ret.push_back(vchSig);\n-    return true;\n-}\n-\n-static bool SignN(const SigningProvider& provider, const std::vector<valtype>& multisigdata, const BaseSignatureCreator& creator, const CScript& scriptCode, std::vector<valtype>& ret, SigVersion sigversion)\n-{\n-    int nSigned = 0;\n-    int nRequired = multisigdata.front()[0];\n-    for (unsigned int i = 1; i < multisigdata.size()-1 && nSigned < nRequired; i++)\n-    {\n-        const valtype& pubkey = multisigdata[i];\n-        CKeyID keyID = CPubKey(pubkey).GetID();\n-        if (Sign1(provider, keyID, creator, scriptCode, ret, sigversion))\n-            ++nSigned;\n-    }\n-    return nSigned==nRequired;\n-}\n-\n /**\n  * Sign scriptPubKey using signature made with creator.\n  * Signatures are returned in scriptSigRet (or returns false if scriptPubKey can't be signed),\n@@ -68,43 +45,53 @@ static bool SignStep(const SigningProvider& provider, const BaseSignatureCreator\n     CScript scriptRet;\n     uint160 h160;\n     ret.clear();\n+    std::vector<unsigned char> sig;\n \n     std::vector<valtype> vSolutions;\n     if (!Solver(scriptPubKey, whichTypeRet, vSolutions))\n         return false;\n \n-    CKeyID keyID;\n     switch (whichTypeRet)\n     {\n     case TX_NONSTANDARD:\n     case TX_NULL_DATA:\n     case TX_WITNESS_UNKNOWN:\n         return false;\n     case TX_PUBKEY:\n-        keyID = CPubKey(vSolutions[0]).GetID();\n-        return Sign1(provider, keyID, creator, scriptPubKey, ret, sigversion);\n-    case TX_PUBKEYHASH:\n-        keyID = CKeyID(uint160(vSolutions[0]));\n-        if (!Sign1(provider, keyID, creator, scriptPubKey, ret, sigversion))\n-            return false;\n-        else\n-        {\n-            CPubKey vch;\n-            provider.GetPubKey(keyID, vch);\n-            ret.push_back(ToByteVector(vch));\n-        }\n+        if (!creator.CreateSig(provider, sig, CPubKey(vSolutions[0]).GetID(), scriptPubKey, sigversion)) return false;\n+        ret.push_back(std::move(sig));\n         return true;\n+    case TX_PUBKEYHASH: {\n+        CKeyID keyID = CKeyID(uint160(vSolutions[0]));\n+        if (!creator.CreateSig(provider, sig, keyID, scriptPubKey, sigversion)) return false;\n+        ret.push_back(std::move(sig));\n+        CPubKey pubkey;\n+        provider.GetPubKey(keyID, pubkey);\n+        ret.push_back(ToByteVector(pubkey));\n+        return true;\n+    }\n     case TX_SCRIPTHASH:\n         if (provider.GetCScript(uint160(vSolutions[0]), scriptRet)) {\n             ret.push_back(std::vector<unsigned char>(scriptRet.begin(), scriptRet.end()));\n             return true;\n         }\n         return false;\n \n-    case TX_MULTISIG:\n+    case TX_MULTISIG: {\n+        size_t required = vSolutions.front()[0];\n         ret.push_back(valtype()); // workaround CHECKMULTISIG bug\n-        return (SignN(provider, vSolutions, creator, scriptPubKey, ret, sigversion));\n-\n+        for (size_t i = 1; i < vSolutions.size() - 1; ++i) {\n+            CPubKey pubkey = CPubKey(vSolutions[i]);\n+            if (ret.size() < required + 1 && creator.CreateSig(provider, sig, pubkey.GetID(), scriptPubKey, sigversion)) {\n+                ret.push_back(std::move(sig));\n+            }\n+        }\n+        bool ok = ret.size() == required + 1;\n+        for (size_t i = 0; i + ret.size() < required + 1; ++i) {\n+            ret.push_back(valtype());\n+        }\n+        return ok;\n+    }\n     case TX_WITNESS_V0_KEYHASH:\n         ret.push_back(vSolutions[0]);\n         return true;"
      }
    ]
  },
  {
    "sha": "0422beb9bdfcd7d1cc095ab681a760d8bc7a1918",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNDIyYmViOWJkZmNkN2QxY2MwOTVhYjY4MWE3NjBkOGJjN2ExOTE4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-07-04T00:18:52Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-07-04T00:18:52Z"
      },
      "message": "Make SignatureData able to store signatures and scripts\n\nIn addition to having the scriptSig and scriptWitness, have SignatureData\nalso be able to store just the signatures (pubkeys mapped to sigs) and\nscripts (script ids mapped to scripts).\n\nAlso have DataFromTransaction be able to extract signatures and scripts\nfrom the scriptSig and scriptWitness of an input to put them in SignatureData.\n\nAdds a new SignatureChecker which takes a SignatureData and puts pubkeys\nand signatures into it when it successfully verifies a signature.\n\nAdds a new field in SignatureData which stores whether the SignatureData\nwas complete. This allows us to also update the scriptSig and\nscriptWitness to the final one when updating a SignatureData with another\none.",
      "tree": {
        "sha": "4310449f8e2b5d7fbf99f3aa60b52d78de7e4578",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4310449f8e2b5d7fbf99f3aa60b52d78de7e4578"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0422beb9bdfcd7d1cc095ab681a760d8bc7a1918",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0422beb9bdfcd7d1cc095ab681a760d8bc7a1918",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0422beb9bdfcd7d1cc095ab681a760d8bc7a1918",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0422beb9bdfcd7d1cc095ab681a760d8bc7a1918/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b6edb4f5e6e0bf0f9c7dd26a125849f0103b44cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6edb4f5e6e0bf0f9c7dd26a125849f0103b44cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b6edb4f5e6e0bf0f9c7dd26a125849f0103b44cd"
      }
    ],
    "stats": {
      "total": 166,
      "additions": 129,
      "deletions": 37
    },
    "files": [
      {
        "sha": "ae60588c2d82353c63a240695e24627983ef0ee1",
        "filename": "src/bench/verify_script.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0422beb9bdfcd7d1cc095ab681a760d8bc7a1918/src/bench/verify_script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0422beb9bdfcd7d1cc095ab681a760d8bc7a1918/src/bench/verify_script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/verify_script.cpp?ref=0422beb9bdfcd7d1cc095ab681a760d8bc7a1918",
        "patch": "@@ -9,6 +9,7 @@\n #endif\n #include <script/script.h>\n #include <script/sign.h>\n+#include <script/standard.h>\n #include <streams.h>\n \n #include <array>"
      },
      {
        "sha": "1fc18b1e461a7968b9fa0d4484271ecd0a7a48ed",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0422beb9bdfcd7d1cc095ab681a760d8bc7a1918/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0422beb9bdfcd7d1cc095ab681a760d8bc7a1918/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=0422beb9bdfcd7d1cc095ab681a760d8bc7a1918",
        "patch": "@@ -645,13 +645,13 @@ static void MutateTxSign(CMutableTransaction& tx, const std::string& flagStr)\n         const CScript& prevPubKey = coin.out.scriptPubKey;\n         const CAmount& amount = coin.out.nValue;\n \n-        SignatureData sigdata;\n+        SignatureData sigdata = DataFromTransaction(mergedTx, i, coin.out);\n         // Only sign SIGHASH_SINGLE if there's a corresponding output:\n         if (!fHashSingle || (i < mergedTx.vout.size()))\n             ProduceSignature(keystore, MutableTransactionSignatureCreator(&mergedTx, i, amount, nHashType), prevPubKey, sigdata);\n \n         // ... and merge in other signatures:\n-        sigdata = CombineSignatures(prevPubKey, MutableTransactionSignatureChecker(&mergedTx, i, amount), sigdata, DataFromTransaction(txv, i));\n+        sigdata = CombineSignatures(prevPubKey, MutableTransactionSignatureChecker(&mergedTx, i, amount), sigdata, DataFromTransaction(txv, i, coin.out));\n         UpdateInput(txin, sigdata);\n     }\n "
      },
      {
        "sha": "550fffb3265e65bff18cbc03a894e7b7e488ff66",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0422beb9bdfcd7d1cc095ab681a760d8bc7a1918/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0422beb9bdfcd7d1cc095ab681a760d8bc7a1918/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=0422beb9bdfcd7d1cc095ab681a760d8bc7a1918",
        "patch": "@@ -744,7 +744,7 @@ static UniValue combinerawtransaction(const JSONRPCRequest& request)\n         // ... and merge in other signatures:\n         for (const CMutableTransaction& txv : txVariants) {\n             if (txv.vin.size() > i) {\n-                sigdata = CombineSignatures(prevPubKey, TransactionSignatureChecker(&txConst, i, amount), sigdata, DataFromTransaction(txv, i));\n+                sigdata = CombineSignatures(prevPubKey, TransactionSignatureChecker(&txConst, i, amount), sigdata, DataFromTransaction(txv, i, coin.out));\n             }\n         }\n \n@@ -875,12 +875,12 @@ UniValue SignTransaction(CMutableTransaction& mtx, const UniValue& prevTxsUnival\n         const CScript& prevPubKey = coin.out.scriptPubKey;\n         const CAmount& amount = coin.out.nValue;\n \n-        SignatureData sigdata;\n+        SignatureData sigdata = DataFromTransaction(mtx, i, coin.out);\n         // Only sign SIGHASH_SINGLE if there's a corresponding output:\n         if (!fHashSingle || (i < mtx.vout.size())) {\n             ProduceSignature(*keystore, MutableTransactionSignatureCreator(&mtx, i, amount, nHashType), prevPubKey, sigdata);\n         }\n-        sigdata = CombineSignatures(prevPubKey, TransactionSignatureChecker(&txConst, i, amount), sigdata, DataFromTransaction(mtx, i));\n+        sigdata = CombineSignatures(prevPubKey, TransactionSignatureChecker(&txConst, i, amount), sigdata, DataFromTransaction(mtx, i, coin.out));\n \n         UpdateInput(txin, sigdata);\n "
      },
      {
        "sha": "cb63c2159eedf1ab0c95b9b61775a9deb217c798",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 106,
        "deletions": 24,
        "changes": 130,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0422beb9bdfcd7d1cc095ab681a760d8bc7a1918/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0422beb9bdfcd7d1cc095ab681a760d8bc7a1918/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=0422beb9bdfcd7d1cc095ab681a760d8bc7a1918",
        "patch": "@@ -126,6 +126,8 @@ static CScript PushAll(const std::vector<valtype>& values)\n \n bool ProduceSignature(const SigningProvider& provider, const BaseSignatureCreator& creator, const CScript& fromPubKey, SignatureData& sigdata)\n {\n+    if (sigdata.complete) return true;\n+\n     std::vector<valtype> result;\n     txnouttype whichType;\n     bool solved = SignStep(provider, creator, fromPubKey, result, whichType, SigVersion::BASE);\n@@ -168,15 +170,117 @@ bool ProduceSignature(const SigningProvider& provider, const BaseSignatureCreato\n     sigdata.scriptSig = PushAll(result);\n \n     // Test solution\n-    return solved && VerifyScript(sigdata.scriptSig, fromPubKey, &sigdata.scriptWitness, STANDARD_SCRIPT_VERIFY_FLAGS, creator.Checker());\n+    sigdata.complete = solved && VerifyScript(sigdata.scriptSig, fromPubKey, &sigdata.scriptWitness, STANDARD_SCRIPT_VERIFY_FLAGS, creator.Checker());\n+    return sigdata.complete;\n+}\n+\n+class SignatureExtractorChecker final : public BaseSignatureChecker\n+{\n+private:\n+    SignatureData& sigdata;\n+    BaseSignatureChecker& checker;\n+\n+public:\n+    SignatureExtractorChecker(SignatureData& sigdata, BaseSignatureChecker& checker) : sigdata(sigdata), checker(checker) {}\n+    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const override;\n+};\n+\n+bool SignatureExtractorChecker::CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const\n+{\n+    if (checker.CheckSig(scriptSig, vchPubKey, scriptCode, sigversion)) {\n+        CPubKey pubkey(vchPubKey);\n+        sigdata.signatures.emplace(pubkey.GetID(), SigPair(pubkey, scriptSig));\n+        return true;\n+    }\n+    return false;\n+}\n+\n+namespace\n+{\n+struct Stacks\n+{\n+    std::vector<valtype> script;\n+    std::vector<valtype> witness;\n+\n+    Stacks() {}\n+    explicit Stacks(const std::vector<valtype>& scriptSigStack_) : script(scriptSigStack_), witness() {}\n+    explicit Stacks(const SignatureData& data) : witness(data.scriptWitness.stack) {\n+        EvalScript(script, data.scriptSig, SCRIPT_VERIFY_STRICTENC, BaseSignatureChecker(), SigVersion::BASE);\n+    }\n+\n+    SignatureData Output() const {\n+        SignatureData result;\n+        result.scriptSig = PushAll(script);\n+        result.scriptWitness.stack = witness;\n+        return result;\n+    }\n+};\n }\n \n-SignatureData DataFromTransaction(const CMutableTransaction& tx, unsigned int nIn)\n+// Extracts signatures and scripts from incomplete scriptSigs. Please do not extend this, use PSBT instead\n+SignatureData DataFromTransaction(const CMutableTransaction& tx, unsigned int nIn, const CTxOut& txout)\n {\n     SignatureData data;\n     assert(tx.vin.size() > nIn);\n     data.scriptSig = tx.vin[nIn].scriptSig;\n     data.scriptWitness = tx.vin[nIn].scriptWitness;\n+    Stacks stack(data);\n+\n+    // Get signatures\n+    MutableTransactionSignatureChecker tx_checker(&tx, nIn, txout.nValue);\n+    SignatureExtractorChecker extractor_checker(data, tx_checker);\n+    if (VerifyScript(data.scriptSig, txout.scriptPubKey, &data.scriptWitness, STANDARD_SCRIPT_VERIFY_FLAGS, extractor_checker)) {\n+        data.complete = true;\n+        return data;\n+    }\n+\n+    // Get scripts\n+    txnouttype script_type;\n+    std::vector<std::vector<unsigned char>> solutions;\n+    Solver(txout.scriptPubKey, script_type, solutions);\n+    SigVersion sigversion = SigVersion::BASE;\n+    CScript next_script = txout.scriptPubKey;\n+\n+    if (script_type == TX_SCRIPTHASH && !stack.script.empty() && !stack.script.back().empty()) {\n+        // Get the redeemScript\n+        CScript redeem_script(stack.script.back().begin(), stack.script.back().end());\n+        data.redeem_script = redeem_script;\n+        next_script = std::move(redeem_script);\n+\n+        // Get redeemScript type\n+        Solver(next_script, script_type, solutions);\n+        stack.script.pop_back();\n+    }\n+    if (script_type == TX_WITNESS_V0_SCRIPTHASH && !stack.witness.empty() && !stack.witness.back().empty()) {\n+        // Get the witnessScript\n+        CScript witness_script(stack.witness.back().begin(), stack.witness.back().end());\n+        data.witness_script = witness_script;\n+        next_script = std::move(witness_script);\n+\n+        // Get witnessScript type\n+        Solver(next_script, script_type, solutions);\n+        stack.witness.pop_back();\n+        stack.script = std::move(stack.witness);\n+        stack.witness.clear();\n+        sigversion = SigVersion::WITNESS_V0;\n+    }\n+    if (script_type == TX_MULTISIG && !stack.script.empty()) {\n+        // Build a map of pubkey -> signature by matching sigs to pubkeys:\n+        assert(solutions.size() > 1);\n+        unsigned int num_pubkeys = solutions.size()-2;\n+        unsigned int last_success_key = 0;\n+        for (const valtype& sig : stack.script) {\n+            for (unsigned int i = last_success_key; i < num_pubkeys; ++i) {\n+                const valtype& pubkey = solutions[i+1];\n+                // We either have a signature for this pubkey, or we have found a signature and it is valid\n+                if (data.signatures.count(CPubKey(pubkey).GetID()) || extractor_checker.CheckSig(sig, pubkey, next_script, sigversion)) {\n+                    last_success_key = i + 1;\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+\n     return data;\n }\n \n@@ -263,28 +367,6 @@ static std::vector<valtype> CombineMultisig(const CScript& scriptPubKey, const B\n     return result;\n }\n \n-namespace\n-{\n-struct Stacks\n-{\n-    std::vector<valtype> script;\n-    std::vector<valtype> witness;\n-\n-    Stacks() {}\n-    explicit Stacks(const std::vector<valtype>& scriptSigStack_) : script(scriptSigStack_), witness() {}\n-    explicit Stacks(const SignatureData& data) : witness(data.scriptWitness.stack) {\n-        EvalScript(script, data.scriptSig, SCRIPT_VERIFY_STRICTENC, BaseSignatureChecker(), SigVersion::BASE);\n-    }\n-\n-    SignatureData Output() const {\n-        SignatureData result;\n-        result.scriptSig = PushAll(script);\n-        result.scriptWitness.stack = witness;\n-        return result;\n-    }\n-};\n-}\n-\n static Stacks CombineSignatures(const CScript& scriptPubKey, const BaseSignatureChecker& checker,\n                                  const txnouttype txType, const std::vector<valtype>& vSolutions,\n                                  Stacks sigs1, Stacks sigs2, SigVersion sigversion)"
      },
      {
        "sha": "7dc4bedb06e42f391a82c3179237bb5e72deeaae",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 13,
        "deletions": 4,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0422beb9bdfcd7d1cc095ab681a760d8bc7a1918/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0422beb9bdfcd7d1cc095ab681a760d8bc7a1918/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=0422beb9bdfcd7d1cc095ab681a760d8bc7a1918",
        "patch": "@@ -53,9 +53,18 @@ class MutableTransactionSignatureCreator : public BaseSignatureCreator {\n /** A signature creator that just produces 72-byte empty signatures. */\n extern const BaseSignatureCreator& DUMMY_SIGNATURE_CREATOR;\n \n+typedef std::pair<CPubKey, std::vector<unsigned char>> SigPair;\n+\n+// This struct contains information from a transaction input and also contains signatures for that input.\n+// The information contained here can be used to create a signature and is also filled by ProduceSignature\n+// in order to construct final scriptSigs and scriptWitnesses.\n struct SignatureData {\n-    CScript scriptSig;\n-    CScriptWitness scriptWitness;\n+    bool complete = false; ///< Stores whether the scriptSig and scriptWitness are complete\n+    CScript scriptSig; ///< The scriptSig of an input. Contains complete signatures or the traditional partial signatures format\n+    CScript redeem_script; ///< The redeemScript (if any) for the input\n+    CScript witness_script; ///< The witnessScript (if any) for the input. witnessScripts are used in P2WSH outputs.\n+    CScriptWitness scriptWitness; ///< The scriptWitness of an input. Contains complete signatures or the traditional partial signatures format. scriptWitness is part of a transaction input per BIP 144.\n+    std::map<CKeyID, SigPair> signatures; ///< BIP 174 style partial signatures for the input. May contain all signatures necessary for producing a final scriptSig or scriptWitness.\n \n     SignatureData() {}\n     explicit SignatureData(const CScript& script) : scriptSig(script) {}\n@@ -71,8 +80,8 @@ bool SignSignature(const SigningProvider &provider, const CTransaction& txFrom,\n /** Combine two script signatures using a generic signature checker, intelligently, possibly with OP_0 placeholders. */\n SignatureData CombineSignatures(const CScript& scriptPubKey, const BaseSignatureChecker& checker, const SignatureData& scriptSig1, const SignatureData& scriptSig2);\n \n-/** Extract signature data from a transaction, and insert it. */\n-SignatureData DataFromTransaction(const CMutableTransaction& tx, unsigned int nIn);\n+/** Extract signature data from a transaction input, and insert it. */\n+SignatureData DataFromTransaction(const CMutableTransaction& tx, unsigned int nIn, const CTxOut& txout);\n void UpdateInput(CTxIn& input, const SignatureData& data);\n \n /* Check whether we know how to sign for an output like this, assuming we"
      },
      {
        "sha": "9ec3fd35f0bcd731f10cd853a7fb81d26d49eb3e",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0422beb9bdfcd7d1cc095ab681a760d8bc7a1918/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0422beb9bdfcd7d1cc095ab681a760d8bc7a1918/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=0422beb9bdfcd7d1cc095ab681a760d8bc7a1918",
        "patch": "@@ -629,7 +629,7 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     CreateCreditAndSpend(keystore2, scriptMulti, output2, input2, false);\n     CheckWithFlag(output2, input2, 0, false);\n     BOOST_CHECK(*output1 == *output2);\n-    UpdateInput(input1.vin[0], CombineSignatures(output1->vout[0].scriptPubKey, MutableTransactionSignatureChecker(&input1, 0, output1->vout[0].nValue), DataFromTransaction(input1, 0), DataFromTransaction(input2, 0)));\n+    UpdateInput(input1.vin[0], CombineSignatures(output1->vout[0].scriptPubKey, MutableTransactionSignatureChecker(&input1, 0, output1->vout[0].nValue), DataFromTransaction(input1, 0, output1->vout[0]), DataFromTransaction(input2, 0, output1->vout[0])));\n     CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n \n     // P2SH 2-of-2 multisig\n@@ -640,7 +640,7 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     CheckWithFlag(output2, input2, 0, true);\n     CheckWithFlag(output2, input2, SCRIPT_VERIFY_P2SH, false);\n     BOOST_CHECK(*output1 == *output2);\n-    UpdateInput(input1.vin[0], CombineSignatures(output1->vout[0].scriptPubKey, MutableTransactionSignatureChecker(&input1, 0, output1->vout[0].nValue), DataFromTransaction(input1, 0), DataFromTransaction(input2, 0)));\n+    UpdateInput(input1.vin[0], CombineSignatures(output1->vout[0].scriptPubKey, MutableTransactionSignatureChecker(&input1, 0, output1->vout[0].nValue), DataFromTransaction(input1, 0, output1->vout[0]), DataFromTransaction(input2, 0, output1->vout[0])));\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n     CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n \n@@ -652,7 +652,7 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     CheckWithFlag(output2, input2, 0, true);\n     CheckWithFlag(output2, input2, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, false);\n     BOOST_CHECK(*output1 == *output2);\n-    UpdateInput(input1.vin[0], CombineSignatures(output1->vout[0].scriptPubKey, MutableTransactionSignatureChecker(&input1, 0, output1->vout[0].nValue), DataFromTransaction(input1, 0), DataFromTransaction(input2, 0)));\n+    UpdateInput(input1.vin[0], CombineSignatures(output1->vout[0].scriptPubKey, MutableTransactionSignatureChecker(&input1, 0, output1->vout[0].nValue), DataFromTransaction(input1, 0, output1->vout[0]), DataFromTransaction(input2, 0, output1->vout[0])));\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, true);\n     CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n \n@@ -664,7 +664,7 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     CheckWithFlag(output2, input2, SCRIPT_VERIFY_P2SH, true);\n     CheckWithFlag(output2, input2, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, false);\n     BOOST_CHECK(*output1 == *output2);\n-    UpdateInput(input1.vin[0], CombineSignatures(output1->vout[0].scriptPubKey, MutableTransactionSignatureChecker(&input1, 0, output1->vout[0].nValue), DataFromTransaction(input1, 0), DataFromTransaction(input2, 0)));\n+    UpdateInput(input1.vin[0], CombineSignatures(output1->vout[0].scriptPubKey, MutableTransactionSignatureChecker(&input1, 0, output1->vout[0].nValue), DataFromTransaction(input1, 0, output1->vout[0]), DataFromTransaction(input2, 0, output1->vout[0])));\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, true);\n     CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n }"
      }
    ]
  },
  {
    "sha": "ed94c8b556dbbfb62452eaefd9ee7841df09777a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZDk0YzhiNTU2ZGJiZmI2MjQ1MmVhZWZkOWVlNzg0MWRmMDk3Nzdh",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-06-08T04:12:25Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-07-04T00:19:23Z"
      },
      "message": "Replace CombineSignatures with ProduceSignature\n\nInstead of using CombineSignatures to create the final scriptSig or\nscriptWitness of an input, use ProduceSignature itself.\n\nTo allow for ProduceSignature to place signatures, pubkeys, and scripts\nthat it does not know about, we pass down the SignatureData to SignStep\nwhich pulls out the information that it needs from the SignatureData.",
      "tree": {
        "sha": "fa645726fb0ac8f6bcd23cb0a7d91ad1641147a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fa645726fb0ac8f6bcd23cb0a7d91ad1641147a6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ed94c8b556dbbfb62452eaefd9ee7841df09777a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed94c8b556dbbfb62452eaefd9ee7841df09777a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ed94c8b556dbbfb62452eaefd9ee7841df09777a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed94c8b556dbbfb62452eaefd9ee7841df09777a/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0422beb9bdfcd7d1cc095ab681a760d8bc7a1918",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0422beb9bdfcd7d1cc095ab681a760d8bc7a1918",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0422beb9bdfcd7d1cc095ab681a760d8bc7a1918"
      }
    ],
    "stats": {
      "total": 106,
      "additions": 85,
      "deletions": 21
    },
    "files": [
      {
        "sha": "ab0efde05c8c107ab6d22c30b7287440d927dc34",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed94c8b556dbbfb62452eaefd9ee7841df09777a/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed94c8b556dbbfb62452eaefd9ee7841df09777a/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=ed94c8b556dbbfb62452eaefd9ee7841df09777a",
        "patch": "@@ -650,8 +650,6 @@ static void MutateTxSign(CMutableTransaction& tx, const std::string& flagStr)\n         if (!fHashSingle || (i < mergedTx.vout.size()))\n             ProduceSignature(keystore, MutableTransactionSignatureCreator(&mergedTx, i, amount, nHashType), prevPubKey, sigdata);\n \n-        // ... and merge in other signatures:\n-        sigdata = CombineSignatures(prevPubKey, MutableTransactionSignatureChecker(&mergedTx, i, amount), sigdata, DataFromTransaction(txv, i, coin.out));\n         UpdateInput(txin, sigdata);\n     }\n "
      },
      {
        "sha": "dbe762b7a931f40bf4346807cf55d6774fb30990",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed94c8b556dbbfb62452eaefd9ee7841df09777a/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed94c8b556dbbfb62452eaefd9ee7841df09777a/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=ed94c8b556dbbfb62452eaefd9ee7841df09777a",
        "patch": "@@ -736,17 +736,15 @@ static UniValue combinerawtransaction(const JSONRPCRequest& request)\n         if (coin.IsSpent()) {\n             throw JSONRPCError(RPC_VERIFY_ERROR, \"Input not found or already spent\");\n         }\n-        const CScript& prevPubKey = coin.out.scriptPubKey;\n-        const CAmount& amount = coin.out.nValue;\n-\n         SignatureData sigdata;\n \n         // ... and merge in other signatures:\n         for (const CMutableTransaction& txv : txVariants) {\n             if (txv.vin.size() > i) {\n-                sigdata = CombineSignatures(prevPubKey, TransactionSignatureChecker(&txConst, i, amount), sigdata, DataFromTransaction(txv, i, coin.out));\n+                sigdata.MergeSignatureData(DataFromTransaction(txv, i, coin.out));\n             }\n         }\n+        ProduceSignature(DUMMY_SIGNING_PROVIDER, MutableTransactionSignatureCreator(&mergedTx, i, coin.out.nValue, 1), coin.out.scriptPubKey, sigdata);\n \n         UpdateInput(txin, sigdata);\n     }\n@@ -880,7 +878,6 @@ UniValue SignTransaction(CMutableTransaction& mtx, const UniValue& prevTxsUnival\n         if (!fHashSingle || (i < mtx.vout.size())) {\n             ProduceSignature(*keystore, MutableTransactionSignatureCreator(&mtx, i, amount, nHashType), prevPubKey, sigdata);\n         }\n-        sigdata = CombineSignatures(prevPubKey, TransactionSignatureChecker(&txConst, i, amount), sigdata, DataFromTransaction(mtx, i, coin.out));\n \n         UpdateInput(txin, sigdata);\n "
      },
      {
        "sha": "65ba1e843dda17049420f3f5201aad5e6be97fab",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 77,
        "deletions": 11,
        "changes": 88,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed94c8b556dbbfb62452eaefd9ee7841df09777a/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed94c8b556dbbfb62452eaefd9ee7841df09777a/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=ed94c8b556dbbfb62452eaefd9ee7841df09777a",
        "patch": "@@ -33,14 +33,61 @@ bool MutableTransactionSignatureCreator::CreateSig(const SigningProvider& provid\n     return true;\n }\n \n+static bool GetCScript(const SigningProvider& provider, const SignatureData& sigdata, const CScriptID& scriptid, CScript& script)\n+{\n+    if (provider.GetCScript(scriptid, script)) {\n+        return true;\n+    }\n+    // Look for scripts in SignatureData\n+    if (CScriptID(sigdata.redeem_script) == scriptid) {\n+        script = sigdata.redeem_script;\n+        return true;\n+    } else if (CScriptID(sigdata.witness_script) == scriptid) {\n+        script = sigdata.witness_script;\n+        return true;\n+    }\n+    return false;\n+}\n+\n+static bool GetPubKey(const SigningProvider& provider, const SignatureData& sigdata, const CKeyID& address, CPubKey& pubkey)\n+{\n+    if (provider.GetPubKey(address, pubkey)) {\n+        return true;\n+    }\n+    // Look for pubkey in all partial sigs\n+    const auto it = sigdata.signatures.find(address);\n+    if (it != sigdata.signatures.end()) {\n+        pubkey = it->second.first;\n+        return true;\n+    }\n+    return false;\n+}\n+\n+static bool CreateSig(const BaseSignatureCreator& creator, SignatureData& sigdata, const SigningProvider& provider, std::vector<unsigned char>& sig_out, const CKeyID& keyid, const CScript& scriptcode, SigVersion sigversion)\n+{\n+    const auto it = sigdata.signatures.find(keyid);\n+    if (it != sigdata.signatures.end()) {\n+        sig_out = it->second.second;\n+        return true;\n+    }\n+    if (creator.CreateSig(provider, sig_out, keyid, scriptcode, sigversion)) {\n+        CPubKey pubkey;\n+        GetPubKey(provider, sigdata, keyid, pubkey);\n+        auto i = sigdata.signatures.emplace(keyid, SigPair(pubkey, sig_out));\n+        assert(i.second);\n+        return true;\n+    }\n+    return false;\n+}\n+\n /**\n  * Sign scriptPubKey using signature made with creator.\n  * Signatures are returned in scriptSigRet (or returns false if scriptPubKey can't be signed),\n  * unless whichTypeRet is TX_SCRIPTHASH, in which case scriptSigRet is the redemption script.\n  * Returns false if scriptPubKey could not be completely satisfied.\n  */\n static bool SignStep(const SigningProvider& provider, const BaseSignatureCreator& creator, const CScript& scriptPubKey,\n-                     std::vector<valtype>& ret, txnouttype& whichTypeRet, SigVersion sigversion)\n+                     std::vector<valtype>& ret, txnouttype& whichTypeRet, SigVersion sigversion, SignatureData& sigdata)\n {\n     CScript scriptRet;\n     uint160 h160;\n@@ -58,20 +105,20 @@ static bool SignStep(const SigningProvider& provider, const BaseSignatureCreator\n     case TX_WITNESS_UNKNOWN:\n         return false;\n     case TX_PUBKEY:\n-        if (!creator.CreateSig(provider, sig, CPubKey(vSolutions[0]).GetID(), scriptPubKey, sigversion)) return false;\n+        if (!CreateSig(creator, sigdata, provider, sig, CPubKey(vSolutions[0]).GetID(), scriptPubKey, sigversion)) return false;\n         ret.push_back(std::move(sig));\n         return true;\n     case TX_PUBKEYHASH: {\n         CKeyID keyID = CKeyID(uint160(vSolutions[0]));\n-        if (!creator.CreateSig(provider, sig, keyID, scriptPubKey, sigversion)) return false;\n+        if (!CreateSig(creator, sigdata, provider, sig, keyID, scriptPubKey, sigversion)) return false;\n         ret.push_back(std::move(sig));\n         CPubKey pubkey;\n-        provider.GetPubKey(keyID, pubkey);\n+        GetPubKey(provider, sigdata, keyID, pubkey);\n         ret.push_back(ToByteVector(pubkey));\n         return true;\n     }\n     case TX_SCRIPTHASH:\n-        if (provider.GetCScript(uint160(vSolutions[0]), scriptRet)) {\n+        if (GetCScript(provider, sigdata, uint160(vSolutions[0]), scriptRet)) {\n             ret.push_back(std::vector<unsigned char>(scriptRet.begin(), scriptRet.end()));\n             return true;\n         }\n@@ -82,7 +129,7 @@ static bool SignStep(const SigningProvider& provider, const BaseSignatureCreator\n         ret.push_back(valtype()); // workaround CHECKMULTISIG bug\n         for (size_t i = 1; i < vSolutions.size() - 1; ++i) {\n             CPubKey pubkey = CPubKey(vSolutions[i]);\n-            if (ret.size() < required + 1 && creator.CreateSig(provider, sig, pubkey.GetID(), scriptPubKey, sigversion)) {\n+            if (ret.size() < required + 1 && CreateSig(creator, sigdata, provider, sig, pubkey.GetID(), scriptPubKey, sigversion)) {\n                 ret.push_back(std::move(sig));\n             }\n         }\n@@ -98,7 +145,7 @@ static bool SignStep(const SigningProvider& provider, const BaseSignatureCreator\n \n     case TX_WITNESS_V0_SCRIPTHASH:\n         CRIPEMD160().Write(&vSolutions[0][0], vSolutions[0].size()).Finalize(h160.begin());\n-        if (provider.GetCScript(h160, scriptRet)) {\n+        if (GetCScript(provider, sigdata, h160, scriptRet)) {\n             ret.push_back(std::vector<unsigned char>(scriptRet.begin(), scriptRet.end()));\n             return true;\n         }\n@@ -130,7 +177,7 @@ bool ProduceSignature(const SigningProvider& provider, const BaseSignatureCreato\n \n     std::vector<valtype> result;\n     txnouttype whichType;\n-    bool solved = SignStep(provider, creator, fromPubKey, result, whichType, SigVersion::BASE);\n+    bool solved = SignStep(provider, creator, fromPubKey, result, whichType, SigVersion::BASE, sigdata);\n     bool P2SH = false;\n     CScript subscript;\n     sigdata.scriptWitness.stack.clear();\n@@ -141,7 +188,8 @@ bool ProduceSignature(const SigningProvider& provider, const BaseSignatureCreato\n         // the final scriptSig is the signatures from that\n         // and then the serialized subscript:\n         subscript = CScript(result[0].begin(), result[0].end());\n-        solved = solved && SignStep(provider, creator, subscript, result, whichType, SigVersion::BASE) && whichType != TX_SCRIPTHASH;\n+        sigdata.redeem_script = subscript;\n+        solved = solved && SignStep(provider, creator, subscript, result, whichType, SigVersion::BASE, sigdata) && whichType != TX_SCRIPTHASH;\n         P2SH = true;\n     }\n \n@@ -150,15 +198,16 @@ bool ProduceSignature(const SigningProvider& provider, const BaseSignatureCreato\n         CScript witnessscript;\n         witnessscript << OP_DUP << OP_HASH160 << ToByteVector(result[0]) << OP_EQUALVERIFY << OP_CHECKSIG;\n         txnouttype subType;\n-        solved = solved && SignStep(provider, creator, witnessscript, result, subType, SigVersion::WITNESS_V0);\n+        solved = solved && SignStep(provider, creator, witnessscript, result, subType, SigVersion::WITNESS_V0, sigdata);\n         sigdata.scriptWitness.stack = result;\n         result.clear();\n     }\n     else if (solved && whichType == TX_WITNESS_V0_SCRIPTHASH)\n     {\n         CScript witnessscript(result[0].begin(), result[0].end());\n+        sigdata.witness_script = witnessscript;\n         txnouttype subType;\n-        solved = solved && SignStep(provider, creator, witnessscript, result, subType, SigVersion::WITNESS_V0) && subType != TX_SCRIPTHASH && subType != TX_WITNESS_V0_SCRIPTHASH && subType != TX_WITNESS_V0_KEYHASH;\n+        solved = solved && SignStep(provider, creator, witnessscript, result, subType, SigVersion::WITNESS_V0, sigdata) && subType != TX_SCRIPTHASH && subType != TX_WITNESS_V0_SCRIPTHASH && subType != TX_WITNESS_V0_KEYHASH;\n         result.push_back(std::vector<unsigned char>(witnessscript.begin(), witnessscript.end()));\n         sigdata.scriptWitness.stack = result;\n         result.clear();\n@@ -290,6 +339,22 @@ void UpdateInput(CTxIn& input, const SignatureData& data)\n     input.scriptWitness = data.scriptWitness;\n }\n \n+void SignatureData::MergeSignatureData(SignatureData sigdata)\n+{\n+    if (complete) return;\n+    if (sigdata.complete) {\n+        *this = std::move(sigdata);\n+        return;\n+    }\n+    if (redeem_script.empty() && !sigdata.redeem_script.empty()) {\n+        redeem_script = sigdata.redeem_script;\n+    }\n+    if (witness_script.empty() && !sigdata.witness_script.empty()) {\n+        witness_script = sigdata.witness_script;\n+    }\n+    signatures.insert(std::make_move_iterator(sigdata.signatures.begin()), std::make_move_iterator(sigdata.signatures.end()));\n+}\n+\n bool SignSignature(const SigningProvider &provider, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, const CAmount& amount, int nHashType)\n {\n     assert(nIn < txTo.vin.size());\n@@ -485,6 +550,7 @@ class DummySignatureCreator final : public BaseSignatureCreator {\n }\n \n const BaseSignatureCreator& DUMMY_SIGNATURE_CREATOR = DummySignatureCreator();\n+const SigningProvider& DUMMY_SIGNING_PROVIDER = SigningProvider();\n \n bool IsSolvable(const SigningProvider& provider, const CScript& script)\n {"
      },
      {
        "sha": "c8bccc432f9ecd7458e5b4277424dd6f901e58b7",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed94c8b556dbbfb62452eaefd9ee7841df09777a/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed94c8b556dbbfb62452eaefd9ee7841df09777a/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=ed94c8b556dbbfb62452eaefd9ee7841df09777a",
        "patch": "@@ -21,11 +21,13 @@ class SigningProvider\n {\n public:\n     virtual ~SigningProvider() {}\n-    virtual bool GetCScript(const CScriptID &scriptid, CScript& script) const =0;\n-    virtual bool GetPubKey(const CKeyID &address, CPubKey& pubkey) const =0;\n-    virtual bool GetKey(const CKeyID &address, CKey& key) const =0;\n+    virtual bool GetCScript(const CScriptID &scriptid, CScript& script) const { return false; }\n+    virtual bool GetPubKey(const CKeyID &address, CPubKey& pubkey) const { return false; }\n+    virtual bool GetKey(const CKeyID &address, CKey& key) const { return false; }\n };\n \n+extern const SigningProvider& DUMMY_SIGNING_PROVIDER;\n+\n /** Interface for signature creators. */\n class BaseSignatureCreator {\n public:\n@@ -68,6 +70,7 @@ struct SignatureData {\n \n     SignatureData() {}\n     explicit SignatureData(const CScript& script) : scriptSig(script) {}\n+    void MergeSignatureData(SignatureData sigdata);\n };\n \n /** Produce a script signature using a generic signature creator. */"
      }
    ]
  },
  {
    "sha": "b815600295bd5e7b274c8ee32da65f1419a79ab2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiODE1NjAwMjk1YmQ1ZTdiMjc0YzhlZTMyZGE2NWYxNDE5YTc5YWIy",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-06-08T21:39:36Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-07-04T00:19:23Z"
      },
      "message": "Remove CombineSignatures and replace tests\n\nRemoves CombineSignatures and replaces its use in tests with\nProduceSignature to test the same behavior for ProduceSignature.",
      "tree": {
        "sha": "bed1faba88d6e329c537c584c61a2986f28dc478",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bed1faba88d6e329c537c584c61a2986f28dc478"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b815600295bd5e7b274c8ee32da65f1419a79ab2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b815600295bd5e7b274c8ee32da65f1419a79ab2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b815600295bd5e7b274c8ee32da65f1419a79ab2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b815600295bd5e7b274c8ee32da65f1419a79ab2/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ed94c8b556dbbfb62452eaefd9ee7841df09777a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed94c8b556dbbfb62452eaefd9ee7841df09777a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ed94c8b556dbbfb62452eaefd9ee7841df09777a"
      }
    ],
    "stats": {
      "total": 246,
      "additions": 63,
      "deletions": 183
    },
    "files": [
      {
        "sha": "60a8a2655d3404bd35d58ffd928a99e3496f3a58",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 140,
        "changes": 140,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b815600295bd5e7b274c8ee32da65f1419a79ab2/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b815600295bd5e7b274c8ee32da65f1419a79ab2/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=b815600295bd5e7b274c8ee32da65f1419a79ab2",
        "patch": "@@ -377,146 +377,6 @@ bool SignSignature(const SigningProvider &provider, const CTransaction& txFrom,\n     return SignSignature(provider, txout.scriptPubKey, txTo, nIn, txout.nValue, nHashType);\n }\n \n-static std::vector<valtype> CombineMultisig(const CScript& scriptPubKey, const BaseSignatureChecker& checker,\n-                               const std::vector<valtype>& vSolutions,\n-                               const std::vector<valtype>& sigs1, const std::vector<valtype>& sigs2, SigVersion sigversion)\n-{\n-    // Combine all the signatures we've got:\n-    std::set<valtype> allsigs;\n-    for (const valtype& v : sigs1)\n-    {\n-        if (!v.empty())\n-            allsigs.insert(v);\n-    }\n-    for (const valtype& v : sigs2)\n-    {\n-        if (!v.empty())\n-            allsigs.insert(v);\n-    }\n-\n-    // Build a map of pubkey -> signature by matching sigs to pubkeys:\n-    assert(vSolutions.size() > 1);\n-    unsigned int nSigsRequired = vSolutions.front()[0];\n-    unsigned int nPubKeys = vSolutions.size()-2;\n-    std::map<valtype, valtype> sigs;\n-    for (const valtype& sig : allsigs)\n-    {\n-        for (unsigned int i = 0; i < nPubKeys; i++)\n-        {\n-            const valtype& pubkey = vSolutions[i+1];\n-            if (sigs.count(pubkey))\n-                continue; // Already got a sig for this pubkey\n-\n-            if (checker.CheckSig(sig, pubkey, scriptPubKey, sigversion))\n-            {\n-                sigs[pubkey] = sig;\n-                break;\n-            }\n-        }\n-    }\n-    // Now build a merged CScript:\n-    unsigned int nSigsHave = 0;\n-    std::vector<valtype> result; result.push_back(valtype()); // pop-one-too-many workaround\n-    for (unsigned int i = 0; i < nPubKeys && nSigsHave < nSigsRequired; i++)\n-    {\n-        if (sigs.count(vSolutions[i+1]))\n-        {\n-            result.push_back(sigs[vSolutions[i+1]]);\n-            ++nSigsHave;\n-        }\n-    }\n-    // Fill any missing with OP_0:\n-    for (unsigned int i = nSigsHave; i < nSigsRequired; i++)\n-        result.push_back(valtype());\n-\n-    return result;\n-}\n-\n-static Stacks CombineSignatures(const CScript& scriptPubKey, const BaseSignatureChecker& checker,\n-                                 const txnouttype txType, const std::vector<valtype>& vSolutions,\n-                                 Stacks sigs1, Stacks sigs2, SigVersion sigversion)\n-{\n-    switch (txType)\n-    {\n-    case TX_NONSTANDARD:\n-    case TX_NULL_DATA:\n-    case TX_WITNESS_UNKNOWN:\n-        // Don't know anything about this, assume bigger one is correct:\n-        if (sigs1.script.size() >= sigs2.script.size())\n-            return sigs1;\n-        return sigs2;\n-    case TX_PUBKEY:\n-    case TX_PUBKEYHASH:\n-        // Signatures are bigger than placeholders or empty scripts:\n-        if (sigs1.script.empty() || sigs1.script[0].empty())\n-            return sigs2;\n-        return sigs1;\n-    case TX_WITNESS_V0_KEYHASH:\n-        // Signatures are bigger than placeholders or empty scripts:\n-        if (sigs1.witness.empty() || sigs1.witness[0].empty())\n-            return sigs2;\n-        return sigs1;\n-    case TX_SCRIPTHASH:\n-        if (sigs1.script.empty() || sigs1.script.back().empty())\n-            return sigs2;\n-        else if (sigs2.script.empty() || sigs2.script.back().empty())\n-            return sigs1;\n-        else\n-        {\n-            // Recur to combine:\n-            valtype spk = sigs1.script.back();\n-            CScript pubKey2(spk.begin(), spk.end());\n-\n-            txnouttype txType2;\n-            std::vector<std::vector<unsigned char> > vSolutions2;\n-            Solver(pubKey2, txType2, vSolutions2);\n-            sigs1.script.pop_back();\n-            sigs2.script.pop_back();\n-            Stacks result = CombineSignatures(pubKey2, checker, txType2, vSolutions2, sigs1, sigs2, sigversion);\n-            result.script.push_back(spk);\n-            return result;\n-        }\n-    case TX_MULTISIG:\n-        return Stacks(CombineMultisig(scriptPubKey, checker, vSolutions, sigs1.script, sigs2.script, sigversion));\n-    case TX_WITNESS_V0_SCRIPTHASH:\n-        if (sigs1.witness.empty() || sigs1.witness.back().empty())\n-            return sigs2;\n-        else if (sigs2.witness.empty() || sigs2.witness.back().empty())\n-            return sigs1;\n-        else\n-        {\n-            // Recur to combine:\n-            CScript pubKey2(sigs1.witness.back().begin(), sigs1.witness.back().end());\n-            txnouttype txType2;\n-            std::vector<valtype> vSolutions2;\n-            Solver(pubKey2, txType2, vSolutions2);\n-            sigs1.witness.pop_back();\n-            sigs1.script = sigs1.witness;\n-            sigs1.witness.clear();\n-            sigs2.witness.pop_back();\n-            sigs2.script = sigs2.witness;\n-            sigs2.witness.clear();\n-            Stacks result = CombineSignatures(pubKey2, checker, txType2, vSolutions2, sigs1, sigs2, SigVersion::WITNESS_V0);\n-            result.witness = result.script;\n-            result.script.clear();\n-            result.witness.push_back(valtype(pubKey2.begin(), pubKey2.end()));\n-            return result;\n-        }\n-    default:\n-        return Stacks();\n-    }\n-}\n-\n-SignatureData CombineSignatures(const CScript& scriptPubKey, const BaseSignatureChecker& checker,\n-                          const SignatureData& scriptSig1, const SignatureData& scriptSig2)\n-{\n-    txnouttype txType;\n-    std::vector<std::vector<unsigned char> > vSolutions;\n-    Solver(scriptPubKey, txType, vSolutions);\n-\n-    return CombineSignatures(scriptPubKey, checker, txType, vSolutions, Stacks(scriptSig1), Stacks(scriptSig2), SigVersion::BASE).Output();\n-}\n-\n namespace {\n /** Dummy signature checker which accepts all signatures. */\n class DummySignatureChecker final : public BaseSignatureChecker"
      },
      {
        "sha": "3666859641b310b60f08db669b221d96ae0bcda1",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b815600295bd5e7b274c8ee32da65f1419a79ab2/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b815600295bd5e7b274c8ee32da65f1419a79ab2/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=b815600295bd5e7b274c8ee32da65f1419a79ab2",
        "patch": "@@ -80,9 +80,6 @@ bool ProduceSignature(const SigningProvider& provider, const BaseSignatureCreato\n bool SignSignature(const SigningProvider &provider, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, const CAmount& amount, int nHashType);\n bool SignSignature(const SigningProvider &provider, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType);\n \n-/** Combine two script signatures using a generic signature checker, intelligently, possibly with OP_0 placeholders. */\n-SignatureData CombineSignatures(const CScript& scriptPubKey, const BaseSignatureChecker& checker, const SignatureData& scriptSig1, const SignatureData& scriptSig2);\n-\n /** Extract signature data from a transaction input, and insert it. */\n SignatureData DataFromTransaction(const CMutableTransaction& tx, unsigned int nIn, const CTxOut& txout);\n void UpdateInput(CTxIn& input, const SignatureData& data);"
      },
      {
        "sha": "c7cdd7ca826705637242703bcea3946afe5943d5",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 50,
        "deletions": 36,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b815600295bd5e7b274c8ee32da65f1419a79ab2/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b815600295bd5e7b274c8ee32da65f1419a79ab2/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=b815600295bd5e7b274c8ee32da65f1419a79ab2",
        "patch": "@@ -1161,10 +1161,19 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_INVALID_STACK_OPERATION, ScriptErrorString(err));\n }\n \n+/* Wrapper around ProduceSignature to combine two scriptsigs */\n+SignatureData CombineSignatures(const CTxOut& txout, const CMutableTransaction& tx, const SignatureData& scriptSig1, const SignatureData& scriptSig2)\n+{\n+    SignatureData data;\n+    data.MergeSignatureData(scriptSig1);\n+    data.MergeSignatureData(scriptSig2);\n+    ProduceSignature(DUMMY_SIGNING_PROVIDER, MutableTransactionSignatureCreator(&tx, 0, txout.nValue), txout.scriptPubKey, data);\n+    return data;\n+}\n+\n BOOST_AUTO_TEST_CASE(script_combineSigs)\n {\n-    // Test the CombineSignatures function\n-    CAmount amount = 0;\n+    // Test the ProduceSignature's ability to combine signatures function\n     CBasicKeyStore keystore;\n     std::vector<CKey> keys;\n     std::vector<CPubKey> pubkeys;\n@@ -1180,52 +1189,51 @@ BOOST_AUTO_TEST_CASE(script_combineSigs)\n     CMutableTransaction txFrom = BuildCreditingTransaction(GetScriptForDestination(keys[0].GetPubKey().GetID()));\n     CMutableTransaction txTo = BuildSpendingTransaction(CScript(), CScriptWitness(), txFrom);\n     CScript& scriptPubKey = txFrom.vout[0].scriptPubKey;\n-    CScript& scriptSig = txTo.vin[0].scriptSig;\n+    SignatureData scriptSig;\n \n     SignatureData empty;\n-    SignatureData combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), empty, empty);\n+    SignatureData combined = CombineSignatures(txFrom.vout[0], txTo, empty, empty);\n     BOOST_CHECK(combined.scriptSig.empty());\n \n     // Single signature case:\n     SignSignature(keystore, txFrom, txTo, 0, SIGHASH_ALL); // changes scriptSig\n-    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(scriptSig), empty);\n-    BOOST_CHECK(combined.scriptSig == scriptSig);\n-    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), empty, SignatureData(scriptSig));\n-    BOOST_CHECK(combined.scriptSig == scriptSig);\n-    CScript scriptSigCopy = scriptSig;\n+    scriptSig = DataFromTransaction(txTo, 0, txFrom.vout[0]);\n+    combined = CombineSignatures(txFrom.vout[0], txTo, scriptSig, empty);\n+    BOOST_CHECK(combined.scriptSig == scriptSig.scriptSig);\n+    combined = CombineSignatures(txFrom.vout[0], txTo, empty, scriptSig);\n+    BOOST_CHECK(combined.scriptSig == scriptSig.scriptSig);\n+    SignatureData scriptSigCopy = scriptSig;\n     // Signing again will give a different, valid signature:\n     SignSignature(keystore, txFrom, txTo, 0, SIGHASH_ALL);\n-    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(scriptSigCopy), SignatureData(scriptSig));\n-    BOOST_CHECK(combined.scriptSig == scriptSigCopy || combined.scriptSig == scriptSig);\n+    scriptSig = DataFromTransaction(txTo, 0, txFrom.vout[0]);\n+    combined = CombineSignatures(txFrom.vout[0], txTo, scriptSigCopy, scriptSig);\n+    BOOST_CHECK(combined.scriptSig == scriptSigCopy.scriptSig || combined.scriptSig == scriptSig.scriptSig);\n \n     // P2SH, single-signature case:\n     CScript pkSingle; pkSingle << ToByteVector(keys[0].GetPubKey()) << OP_CHECKSIG;\n     keystore.AddCScript(pkSingle);\n     scriptPubKey = GetScriptForDestination(CScriptID(pkSingle));\n     SignSignature(keystore, txFrom, txTo, 0, SIGHASH_ALL);\n-    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(scriptSig), empty);\n-    BOOST_CHECK(combined.scriptSig == scriptSig);\n-    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), empty, SignatureData(scriptSig));\n-    BOOST_CHECK(combined.scriptSig == scriptSig);\n+    scriptSig = DataFromTransaction(txTo, 0, txFrom.vout[0]);\n+    combined = CombineSignatures(txFrom.vout[0], txTo, scriptSig, empty);\n+    BOOST_CHECK(combined.scriptSig == scriptSig.scriptSig);\n+    combined = CombineSignatures(txFrom.vout[0], txTo, empty, scriptSig);\n+    BOOST_CHECK(combined.scriptSig == scriptSig.scriptSig);\n     scriptSigCopy = scriptSig;\n     SignSignature(keystore, txFrom, txTo, 0, SIGHASH_ALL);\n-    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(scriptSigCopy), SignatureData(scriptSig));\n-    BOOST_CHECK(combined.scriptSig == scriptSigCopy || combined.scriptSig == scriptSig);\n-    // dummy scriptSigCopy with placeholder, should always choose non-placeholder:\n-    scriptSigCopy = CScript() << OP_0 << std::vector<unsigned char>(pkSingle.begin(), pkSingle.end());\n-    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(scriptSigCopy), SignatureData(scriptSig));\n-    BOOST_CHECK(combined.scriptSig == scriptSig);\n-    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(scriptSig), SignatureData(scriptSigCopy));\n-    BOOST_CHECK(combined.scriptSig == scriptSig);\n+    scriptSig = DataFromTransaction(txTo, 0, txFrom.vout[0]);\n+    combined = CombineSignatures(txFrom.vout[0], txTo, scriptSigCopy, scriptSig);\n+    BOOST_CHECK(combined.scriptSig == scriptSigCopy.scriptSig || combined.scriptSig == scriptSig.scriptSig);\n \n     // Hardest case:  Multisig 2-of-3\n     scriptPubKey = GetScriptForMultisig(2, pubkeys);\n     keystore.AddCScript(scriptPubKey);\n     SignSignature(keystore, txFrom, txTo, 0, SIGHASH_ALL);\n-    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(scriptSig), empty);\n-    BOOST_CHECK(combined.scriptSig == scriptSig);\n-    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), empty, SignatureData(scriptSig));\n-    BOOST_CHECK(combined.scriptSig == scriptSig);\n+    scriptSig = DataFromTransaction(txTo, 0, txFrom.vout[0]);\n+    combined = CombineSignatures(txFrom.vout[0], txTo, scriptSig, empty);\n+    BOOST_CHECK(combined.scriptSig == scriptSig.scriptSig);\n+    combined = CombineSignatures(txFrom.vout[0], txTo, empty, scriptSig);\n+    BOOST_CHECK(combined.scriptSig == scriptSig.scriptSig);\n \n     // A couple of partially-signed versions:\n     std::vector<unsigned char> sig1;\n@@ -1252,22 +1260,28 @@ BOOST_AUTO_TEST_CASE(script_combineSigs)\n     CScript complete12 = CScript() << OP_0 << sig1 << sig2;\n     CScript complete13 = CScript() << OP_0 << sig1 << sig3;\n     CScript complete23 = CScript() << OP_0 << sig2 << sig3;\n-\n-    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(partial1a), SignatureData(partial1b));\n+    SignatureData partial1_sigs;\n+    partial1_sigs.signatures.emplace(keys[0].GetPubKey().GetID(), SigPair(keys[0].GetPubKey(), sig1));\n+    SignatureData partial2_sigs;\n+    partial2_sigs.signatures.emplace(keys[1].GetPubKey().GetID(), SigPair(keys[1].GetPubKey(), sig2));\n+    SignatureData partial3_sigs;\n+    partial3_sigs.signatures.emplace(keys[2].GetPubKey().GetID(), SigPair(keys[2].GetPubKey(), sig3));\n+\n+    combined = CombineSignatures(txFrom.vout[0], txTo, partial1_sigs, partial1_sigs);\n     BOOST_CHECK(combined.scriptSig == partial1a);\n-    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(partial1a), SignatureData(partial2a));\n+    combined = CombineSignatures(txFrom.vout[0], txTo, partial1_sigs, partial2_sigs);\n     BOOST_CHECK(combined.scriptSig == complete12);\n-    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(partial2a), SignatureData(partial1a));\n+    combined = CombineSignatures(txFrom.vout[0], txTo, partial2_sigs, partial1_sigs);\n     BOOST_CHECK(combined.scriptSig == complete12);\n-    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(partial1b), SignatureData(partial2b));\n+    combined = CombineSignatures(txFrom.vout[0], txTo, partial1_sigs, partial2_sigs);\n     BOOST_CHECK(combined.scriptSig == complete12);\n-    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(partial3b), SignatureData(partial1b));\n+    combined = CombineSignatures(txFrom.vout[0], txTo, partial3_sigs, partial1_sigs);\n     BOOST_CHECK(combined.scriptSig == complete13);\n-    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(partial2a), SignatureData(partial3a));\n+    combined = CombineSignatures(txFrom.vout[0], txTo, partial2_sigs, partial3_sigs);\n     BOOST_CHECK(combined.scriptSig == complete23);\n-    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(partial3b), SignatureData(partial2b));\n+    combined = CombineSignatures(txFrom.vout[0], txTo, partial3_sigs, partial2_sigs);\n     BOOST_CHECK(combined.scriptSig == complete23);\n-    combined = CombineSignatures(scriptPubKey, MutableTransactionSignatureChecker(&txTo, 0, amount), SignatureData(partial3b), SignatureData(partial3a));\n+    combined = CombineSignatures(txFrom.vout[0], txTo, partial3_sigs, partial3_sigs);\n     BOOST_CHECK(combined.scriptSig == partial3c);\n }\n "
      },
      {
        "sha": "45dc0e35713ebacc1973d6aa41f37aeb375748be",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 4,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b815600295bd5e7b274c8ee32da65f1419a79ab2/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b815600295bd5e7b274c8ee32da65f1419a79ab2/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=b815600295bd5e7b274c8ee32da65f1419a79ab2",
        "patch": "@@ -494,6 +494,15 @@ BOOST_AUTO_TEST_CASE(test_big_witness_transaction) {\n     threadGroup.join_all();\n }\n \n+SignatureData CombineSignatures(const CMutableTransaction& input1, const CMutableTransaction& input2, const CTransactionRef tx)\n+{\n+    SignatureData sigdata;\n+    sigdata = DataFromTransaction(input1, 0, tx->vout[0]);\n+    sigdata.MergeSignatureData(DataFromTransaction(input2, 0, tx->vout[0]));\n+    ProduceSignature(DUMMY_SIGNING_PROVIDER, MutableTransactionSignatureCreator(&input1, 0, tx->vout[0].nValue), tx->vout[0].scriptPubKey, sigdata);\n+    return sigdata;\n+}\n+\n BOOST_AUTO_TEST_CASE(test_witness)\n {\n     CBasicKeyStore keystore, keystore2;\n@@ -629,7 +638,7 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     CreateCreditAndSpend(keystore2, scriptMulti, output2, input2, false);\n     CheckWithFlag(output2, input2, 0, false);\n     BOOST_CHECK(*output1 == *output2);\n-    UpdateInput(input1.vin[0], CombineSignatures(output1->vout[0].scriptPubKey, MutableTransactionSignatureChecker(&input1, 0, output1->vout[0].nValue), DataFromTransaction(input1, 0, output1->vout[0]), DataFromTransaction(input2, 0, output1->vout[0])));\n+    UpdateInput(input1.vin[0], CombineSignatures(input1, input2, output1));\n     CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n \n     // P2SH 2-of-2 multisig\n@@ -640,7 +649,7 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     CheckWithFlag(output2, input2, 0, true);\n     CheckWithFlag(output2, input2, SCRIPT_VERIFY_P2SH, false);\n     BOOST_CHECK(*output1 == *output2);\n-    UpdateInput(input1.vin[0], CombineSignatures(output1->vout[0].scriptPubKey, MutableTransactionSignatureChecker(&input1, 0, output1->vout[0].nValue), DataFromTransaction(input1, 0, output1->vout[0]), DataFromTransaction(input2, 0, output1->vout[0])));\n+    UpdateInput(input1.vin[0], CombineSignatures(input1, input2, output1));\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n     CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n \n@@ -652,7 +661,7 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     CheckWithFlag(output2, input2, 0, true);\n     CheckWithFlag(output2, input2, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, false);\n     BOOST_CHECK(*output1 == *output2);\n-    UpdateInput(input1.vin[0], CombineSignatures(output1->vout[0].scriptPubKey, MutableTransactionSignatureChecker(&input1, 0, output1->vout[0].nValue), DataFromTransaction(input1, 0, output1->vout[0]), DataFromTransaction(input2, 0, output1->vout[0])));\n+    UpdateInput(input1.vin[0], CombineSignatures(input1, input2, output1));\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, true);\n     CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n \n@@ -664,7 +673,7 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     CheckWithFlag(output2, input2, SCRIPT_VERIFY_P2SH, true);\n     CheckWithFlag(output2, input2, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, false);\n     BOOST_CHECK(*output1 == *output2);\n-    UpdateInput(input1.vin[0], CombineSignatures(output1->vout[0].scriptPubKey, MutableTransactionSignatureChecker(&input1, 0, output1->vout[0].nValue), DataFromTransaction(input1, 0, output1->vout[0]), DataFromTransaction(input2, 0, output1->vout[0])));\n+    UpdateInput(input1.vin[0], CombineSignatures(input1, input2, output1));\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, true);\n     CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n }"
      }
    ]
  }
]