[
  {
    "sha": "ee3374234c60aba2cc4c5cd5cac1c0aefc2d817c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZTMzNzQyMzRjNjBhYmEyY2M0YzVjZDVjYWMxYzBhZWZjMmQ4MTdj",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-01-01T22:12:30Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-01-01T22:12:30Z"
      },
      "message": "OutputDebugStringF code cleanup\n\nInitialize the OutputDebugStringF mutex and file pointer using\nboost::call_once, to be thread-safe.\nMake the return value of OutputDebugStringF really be the number of\ncharacters written (*printf() semantics).\nDeclare the fReopenDebugLog flag volatile, since it is changed from\na signal handler.\nAnd don't declare OutputDebugStringF() as inline.",
      "tree": {
        "sha": "dac48288a89b711ddde40e17a7d8545bfd044bc9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dac48288a89b711ddde40e17a7d8545bfd044bc9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee3374234c60aba2cc4c5cd5cac1c0aefc2d817c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee3374234c60aba2cc4c5cd5cac1c0aefc2d817c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ee3374234c60aba2cc4c5cd5cac1c0aefc2d817c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee3374234c60aba2cc4c5cd5cac1c0aefc2d817c/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3f964b3c5085261ee636834f9bfadf7ab5a722c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f964b3c5085261ee636834f9bfadf7ab5a722c6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f964b3c5085261ee636834f9bfadf7ab5a722c6"
      }
    ],
    "stats": {
      "total": 99,
      "additions": 57,
      "deletions": 42
    },
    "files": [
      {
        "sha": "d8f05cb9fd2efdb8e1f27cda55834b901c194e3e",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 56,
        "deletions": 41,
        "changes": 97,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee3374234c60aba2cc4c5cd5cac1c0aefc2d817c/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee3374234c60aba2cc4c5cd5cac1c0aefc2d817c/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=ee3374234c60aba2cc4c5cd5cac1c0aefc2d817c",
        "patch": "@@ -74,7 +74,7 @@ bool fTestNet = false;\n bool fNoListen = false;\n bool fLogTimestamps = false;\n CMedianFilter<int64> vTimeOffsets(200,0);\n-bool fReopenDebugLog = false;\n+volatile bool fReopenDebugLog = false;\n \n // Init OpenSSL library multithreading support\n static CCriticalSection** ppmutexOpenSSL;\n@@ -195,62 +195,76 @@ uint256 GetRandHash()\n \n \n \n+//\n+// OutputDebugStringF (aka printf -- there is a #define that we really\n+// should get rid of one day) has been broken a couple of times now\n+// by well-meaning people adding mutexes in the most straightforward way.\n+// It breaks because it may be called by global destructors during shutdown.\n+// Since the order of destruction of static/global objects is undefined,\n+// defining a mutex as a global object doesn't work (the mutex gets\n+// destroyed, and then some later destructor calls OutputDebugStringF,\n+// maybe indirectly, and you get a core dump at shutdown trying to lock\n+// the mutex).\n+\n+static boost::once_flag debugPrintInitFlag = BOOST_ONCE_INIT;\n+// We use boost::call_once() to make sure these are initialized in\n+// in a thread-safe manner the first time it is called:\n+static FILE* fileout = NULL;\n+static boost::mutex* mutexDebugLog = NULL;\n+\n+static void DebugPrintInit()\n+{\n+    assert(fileout == NULL);\n+    assert(mutexDebugLog == NULL);\n+\n+    boost::filesystem::path pathDebug = GetDataDir() / \"debug.log\";\n+    fileout = fopen(pathDebug.string().c_str(), \"a\");\n+    if (fileout) setbuf(fileout, NULL); // unbuffered\n+\n+    mutexDebugLog = new boost::mutex();\n+}\n \n-inline int OutputDebugStringF(const char* pszFormat, ...)\n+int OutputDebugStringF(const char* pszFormat, ...)\n {\n-    int ret = 0;\n+    int ret = 0; // Returns total number of characters written\n     if (fPrintToConsole)\n     {\n         // print to console\n         va_list arg_ptr;\n         va_start(arg_ptr, pszFormat);\n-        ret = vprintf(pszFormat, arg_ptr);\n+        ret += vprintf(pszFormat, arg_ptr);\n         va_end(arg_ptr);\n     }\n     else if (!fPrintToDebugger)\n     {\n-        // print to debug.log\n-        static FILE* fileout = NULL;\n+        static bool fStartedNewLine = true;\n+        boost::call_once(&DebugPrintInit, debugPrintInitFlag);\n \n-        if (!fileout)\n-        {\n+        if (fileout == NULL)\n+            return ret;\n+\n+        boost::mutex::scoped_lock scoped_lock(*mutexDebugLog);\n+\n+        // reopen the log file, if requested\n+        if (fReopenDebugLog) {\n+            fReopenDebugLog = false;\n             boost::filesystem::path pathDebug = GetDataDir() / \"debug.log\";\n-            fileout = fopen(pathDebug.string().c_str(), \"a\");\n-            if (fileout) setbuf(fileout, NULL); // unbuffered\n+            if (freopen(pathDebug.string().c_str(),\"a\",fileout) != NULL)\n+                setbuf(fileout, NULL); // unbuffered\n         }\n-        if (fileout)\n-        {\n-            static bool fStartedNewLine = true;\n-\n-            // This routine may be called by global destructors during shutdown.\n-            // Since the order of destruction of static/global objects is undefined,\n-            // allocate mutexDebugLog on the heap the first time this routine\n-            // is called to avoid crashes during shutdown.\n-            static boost::mutex* mutexDebugLog = NULL;\n-            if (mutexDebugLog == NULL) mutexDebugLog = new boost::mutex();\n-            boost::mutex::scoped_lock scoped_lock(*mutexDebugLog);\n-\n-            // reopen the log file, if requested\n-            if (fReopenDebugLog) {\n-                fReopenDebugLog = false;\n-                boost::filesystem::path pathDebug = GetDataDir() / \"debug.log\";\n-                if (freopen(pathDebug.string().c_str(),\"a\",fileout) != NULL)\n-                    setbuf(fileout, NULL); // unbuffered\n-            }\n \n-            // Debug print useful for profiling\n-            if (fLogTimestamps && fStartedNewLine)\n-                fprintf(fileout, \"%s \", DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", GetTime()).c_str());\n-            if (pszFormat[strlen(pszFormat) - 1] == '\\n')\n-                fStartedNewLine = true;\n-            else\n-                fStartedNewLine = false;\n+        // Debug print useful for profiling\n+        if (fLogTimestamps && fStartedNewLine)\n+            ret += fprintf(fileout, \"%s \", DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", GetTime()).c_str());\n+        if (pszFormat[strlen(pszFormat) - 1] == '\\n')\n+            fStartedNewLine = true;\n+        else\n+            fStartedNewLine = false;\n \n-            va_list arg_ptr;\n-            va_start(arg_ptr, pszFormat);\n-            ret = vfprintf(fileout, pszFormat, arg_ptr);\n-            va_end(arg_ptr);\n-        }\n+        va_list arg_ptr;\n+        va_start(arg_ptr, pszFormat);\n+        ret += vfprintf(fileout, pszFormat, arg_ptr);\n+        va_end(arg_ptr);\n     }\n \n #ifdef WIN32\n@@ -273,6 +287,7 @@ inline int OutputDebugStringF(const char* pszFormat, ...)\n             {\n                 OutputDebugStringA(buffer.substr(line_start, line_end - line_start).c_str());\n                 line_start = line_end + 1;\n+                ret += line_end-line_start;\n             }\n             buffer.erase(0, line_start);\n         }"
      },
      {
        "sha": "97911d7493e930a4bc7f12b5e0bbc33e5985d8bf",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee3374234c60aba2cc4c5cd5cac1c0aefc2d817c/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee3374234c60aba2cc4c5cd5cac1c0aefc2d817c/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=ee3374234c60aba2cc4c5cd5cac1c0aefc2d817c",
        "patch": "@@ -138,7 +138,7 @@ extern std::string strMiscWarning;\n extern bool fTestNet;\n extern bool fNoListen;\n extern bool fLogTimestamps;\n-extern bool fReopenDebugLog;\n+extern volatile bool fReopenDebugLog;\n \n void RandAddSeed();\n void RandAddSeedPerfmon();"
      }
    ]
  }
]