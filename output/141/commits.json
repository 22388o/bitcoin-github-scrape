[
  {
    "sha": "b26141e2c5836ccd20bd32a9c653cf2ba5e5b5ee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMjYxNDFlMmM1ODM2Y2NkMjBiZDMyYTljNjUzY2YyYmE1ZTViNWVl",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jeff@garzik.org",
        "date": "2011-04-03T18:21:52Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@pobox.com",
        "date": "2011-04-03T18:21:52Z"
      },
      "message": "Remove 4way SSE2 scanhash implementation.",
      "tree": {
        "sha": "7a3793819824fec88bd79bf82d99d81391aef084",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7a3793819824fec88bd79bf82d99d81391aef084"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b26141e2c5836ccd20bd32a9c653cf2ba5e5b5ee",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b26141e2c5836ccd20bd32a9c653cf2ba5e5b5ee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b26141e2c5836ccd20bd32a9c653cf2ba5e5b5ee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b26141e2c5836ccd20bd32a9c653cf2ba5e5b5ee/comments",
    "author": null,
    "committer": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "454bc86479a387893604cd662aae994d37699672",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/454bc86479a387893604cd662aae994d37699672",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/454bc86479a387893604cd662aae994d37699672"
      }
    ],
    "stats": {
      "total": 566,
      "additions": 6,
      "deletions": 560
    },
    "files": [
      {
        "sha": "3dd512fe6236f3baff2e296a93e668014f1d94ee",
        "filename": "main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 79,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b26141e2c5836ccd20bd32a9c653cf2ba5e5b5ee/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b26141e2c5836ccd20bd32a9c653cf2ba5e5b5ee/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/main.cpp?ref=b26141e2c5836ccd20bd32a9c653cf2ba5e5b5ee",
        "patch": "@@ -3151,71 +3151,6 @@ void ThreadBitcoinMiner(void* parg)\n     printf(\"ThreadBitcoinMiner exiting, %d threads remaining\\n\", vnThreadsRunning[3]);\n }\n \n-#if defined(__GNUC__) && defined(CRYPTOPP_X86_ASM_AVAILABLE)\n-void CallCPUID(int in, int& aret, int& cret)\n-{\n-    int a, c;\n-    asm (\n-        \"mov %2, %%eax; \" // in into eax\n-        \"cpuid;\"\n-        \"mov %%eax, %0;\" // eax into a\n-        \"mov %%ecx, %1;\" // ecx into c\n-        :\"=r\"(a),\"=r\"(c) /* output */\n-        :\"r\"(in) /* input */\n-        :\"%eax\",\"%ebx\",\"%ecx\",\"%edx\" /* clobbered register */\n-    );\n-    aret = a;\n-    cret = c;\n-}\n-\n-bool Detect128BitSSE2()\n-{\n-    int a, c, nBrand;\n-    CallCPUID(0, a, nBrand);\n-    bool fIntel = (nBrand == 0x6c65746e); // ntel\n-    bool fAMD = (nBrand == 0x444d4163); // cAMD\n-\n-    struct\n-    {\n-        unsigned int nStepping : 4;\n-        unsigned int nModel : 4;\n-        unsigned int nFamily : 4;\n-        unsigned int nProcessorType : 2;\n-        unsigned int nUnused : 2;\n-        unsigned int nExtendedModel : 4;\n-        unsigned int nExtendedFamily : 8;\n-    }\n-    cpu;\n-    CallCPUID(1, a, c);\n-    memcpy(&cpu, &a, sizeof(cpu));\n-    int nFamily = cpu.nExtendedFamily + cpu.nFamily;\n-    int nModel = cpu.nExtendedModel*16 + cpu.nModel;\n-\n-    // We need Intel Nehalem or AMD K10 or better for 128bit SSE2\n-    // Nehalem = i3/i5/i7 and some Xeon\n-    // K10 = Opterons with 4 or more cores, Phenom, Phenom II, Athlon II\n-    //  Intel Core i5  family 6, model 26 or 30\n-    //  Intel Core i7  family 6, model 26 or 30\n-    //  Intel Core i3  family 6, model 37\n-    //  AMD Phenom    family 16, model 10\n-    bool fUseSSE2 = ((fIntel && nFamily * 10000 + nModel >=  60026) ||\n-                     (fAMD   && nFamily * 10000 + nModel >= 160010));\n-\n-    // AMD reports a lower model number in 64-bit mode\n-    if (fAMD && sizeof(void*) > 4 && nFamily * 10000 + nModel >= 160000)\n-        fUseSSE2 = true;\n-\n-    static bool fPrinted;\n-    if (!fPrinted)\n-    {\n-        fPrinted = true;\n-        printf(\"CPUID %08x family %d, model %d, stepping %d, fUseSSE2=%d\\n\", nBrand, nFamily, nModel, cpu.nStepping, fUseSSE2);\n-    }\n-    return fUseSSE2;\n-}\n-#else\n-bool Detect128BitSSE2() { return false; }\n-#endif\n \n int FormatHashBlocks(void* pbuffer, unsigned int len)\n {\n@@ -3276,9 +3211,6 @@ unsigned int ScanHash_CryptoPP(char* pmidstate, char* pdata, char* phash1, char*\n     }\n }\n \n-extern unsigned int ScanHash_4WaySSE2(char* pmidstate, char* pblock, char* phash1, char* phash, unsigned int& nHashesDone);\n-\n-\n \n class COrphan\n {\n@@ -3552,9 +3484,6 @@ void BitcoinMiner()\n {\n     printf(\"BitcoinMiner started\\n\");\n     SetThreadPriority(THREAD_PRIORITY_LOWEST);\n-    bool f4WaySSE2 = Detect128BitSSE2();\n-    if (mapArgs.count(\"-4way\"))\n-        f4WaySSE2 = GetBoolArg(\"-4way\");\n \n     // Each thread has its own key and counter\n     CReserveKey reservekey;\n@@ -3616,14 +3545,9 @@ void BitcoinMiner()\n             unsigned int nHashesDone = 0;\n             unsigned int nNonceFound;\n \n-#ifdef FOURWAYSSE2\n-            if (f4WaySSE2)\n-                // tcatm's 4-way 128-bit SSE2 SHA-256\n-                nNonceFound = ScanHash_4WaySSE2(pmidstate, pdata + 64, phash1, (char*)&hash, nHashesDone);\n-            else\n-#endif\n-                // Crypto++ SHA-256\n-                nNonceFound = ScanHash_CryptoPP(pmidstate, pdata + 64, phash1, (char*)&hash, nHashesDone);\n+            // Crypto++ SHA-256\n+            nNonceFound = ScanHash_CryptoPP(pmidstate, pdata + 64, phash1,\n+                                            (char*)&hash, nHashesDone);\n \n             // Check if something found\n             if (nNonceFound != -1)"
      },
      {
        "sha": "8beebdde2ce446623787e44adabcc5de26a14072",
        "filename": "makefile.unix",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b26141e2c5836ccd20bd32a9c653cf2ba5e5b5ee/makefile.unix",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b26141e2c5836ccd20bd32a9c653cf2ba5e5b5ee/makefile.unix",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/makefile.unix?ref=b26141e2c5836ccd20bd32a9c653cf2ba5e5b5ee",
        "patch": "@@ -23,7 +23,7 @@ LIBS= \\\n    -l z \\\n    -l dl\n \n-DEFS=-DNOPCH -DFOURWAYSSE2 -DUSE_SSL\n+DEFS=-DNOPCH -DUSE_SSL\n DEBUGFLAGS=-g -D__WXDEBUG__\n CXXFLAGS=-O2 -Wno-invalid-offsetof -Wformat $(DEBUGFLAGS) $(DEFS)\n HEADERS=headers.h strlcpy.h serialize.h uint256.h util.h key.h bignum.h base58.h \\\n@@ -51,17 +51,14 @@ obj/%.o: %.cpp $(HEADERS)\n cryptopp/obj/%.o: cryptopp/%.cpp\n \t$(CXX) -c $(CXXFLAGS) -O3 -o $@ $<\n \n-obj/sha256.o: sha256.cpp\n-\t$(CXX) -c $(CXXFLAGS) -msse2 -O3 -march=amdfam10 -o $@ $<\n-\n-bitcoin: $(OBJS) obj/ui.o obj/uibase.o obj/sha256.o\n+bitcoin: $(OBJS) obj/ui.o obj/uibase.o\n \t$(CXX) $(CXXFLAGS) -o $@ $^ $(WXLIBS) $(LIBS)\n \n \n obj/nogui/%.o: %.cpp $(HEADERS)\n \t$(CXX) -c $(CXXFLAGS) -o $@ $<\n \n-bitcoind: $(OBJS:obj/%=obj/nogui/%) obj/sha256.o\n+bitcoind: $(OBJS:obj/%=obj/nogui/%)\n \t$(CXX) $(CXXFLAGS) -o $@ $^ $(LIBS)\n \n "
      },
      {
        "sha": "ca116bdcd3f152bffccd9d9ef19216d55109ee24",
        "filename": "sha256.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 475,
        "changes": 475,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/454bc86479a387893604cd662aae994d37699672/sha256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/454bc86479a387893604cd662aae994d37699672/sha256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/sha256.cpp?ref=454bc86479a387893604cd662aae994d37699672",
        "patch": "@@ -1,475 +0,0 @@\n-// Copyright (c) 2010 Nils Schneider\n-// Distributed under the MIT/X11 software license, see the accompanying\n-// file license.txt or http://www.opensource.org/licenses/mit-license.php.\n-\n-// 4-way 128-bit SSE2 SHA-256\n-\n-#ifdef FOURWAYSSE2\n-\n-#include <string.h>\n-#include <assert.h>\n-\n-#include <xmmintrin.h>\n-#include <stdint.h>\n-#include <stdio.h>\n-\n-#define NPAR 32\n-\n-extern void DoubleBlockSHA256(const void* pin, void* pout, const void* pinit, unsigned int hash[8][NPAR], const void* init2);\n-\n-static const unsigned int sha256_consts[] = {\n-    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, /*  0 */\n-    0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n-    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, /*  8 */\n-    0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n-    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, /* 16 */\n-    0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n-    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, /* 24 */\n-    0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n-    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, /* 32 */\n-    0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n-    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, /* 40 */\n-    0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n-    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, /* 48 */\n-    0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n-    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, /* 56 */\n-    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n-};\n-\n-\n-static inline __m128i Ch(const __m128i b, const __m128i c, const __m128i d) {\n-    return (b & c) ^ (~b & d);\n-}\n-\n-static inline __m128i Maj(const __m128i b, const __m128i c, const __m128i d) {\n-    return (b & c) ^ (b & d) ^ (c & d);\n-}\n-\n-static inline __m128i ROTR(__m128i x, const int n) {\n-    return _mm_srli_epi32(x, n) | _mm_slli_epi32(x, 32 - n);\n-}\n-\n-static inline __m128i SHR(__m128i x, const int n) {\n-    return _mm_srli_epi32(x, n);\n-}\n-\n-/* SHA256 Functions */\n-#define BIGSIGMA0_256(x)    (ROTR((x), 2) ^ ROTR((x), 13) ^ ROTR((x), 22))\n-#define BIGSIGMA1_256(x)    (ROTR((x), 6) ^ ROTR((x), 11) ^ ROTR((x), 25))\n-#define SIGMA0_256(x)       (ROTR((x), 7) ^ ROTR((x), 18) ^ SHR((x), 3))\n-#define SIGMA1_256(x)       (ROTR((x), 17) ^ ROTR((x), 19) ^ SHR((x), 10))\n-\n-static inline unsigned int store32(const __m128i x, int i) {\n-    union { unsigned int ret[4]; __m128i x; } box;\n-    box.x = x;\n-    return box.ret[i];\n-}\n-\n-static inline void store_epi32(const __m128i x, unsigned int *x0, unsigned int *x1, unsigned int *x2, unsigned int *x3) {\n-    union { unsigned int ret[4]; __m128i x; } box;\n-    box.x = x;\n-    *x0 = box.ret[3]; *x1 = box.ret[2]; *x2 = box.ret[1]; *x3 = box.ret[0];\n-}\n-\n-#define add4(x0, x1, x2, x3) _mm_add_epi32(_mm_add_epi32(_mm_add_epi32(x0, x1), x2), x3)\n-#define add5(x0, x1, x2, x3, x4) _mm_add_epi32(add4(x0, x1, x2, x3), x4)\n-\n-#define SHA256ROUND(a, b, c, d, e, f, g, h, i, w)                       \\\n-    T1 = add5(h, BIGSIGMA1_256(e), Ch(e, f, g), _mm_set1_epi32(sha256_consts[i]), w);   \\\n-d = _mm_add_epi32(d, T1);                                           \\\n-h = _mm_add_epi32(T1, _mm_add_epi32(BIGSIGMA0_256(a), Maj(a, b, c)));\n-\n-static inline void dumpreg(__m128i x, char *msg) {\n-    union { unsigned int ret[4]; __m128i x; } box;\n-    box.x = x ;\n-    printf(\"%s %08x %08x %08x %08x\\n\", msg, box.ret[0], box.ret[1], box.ret[2], box.ret[3]);\n-}\n-\n-#if 1\n-#define dumpstate(i) printf(\"%s: %08x %08x %08x %08x %08x %08x %08x %08x %08x\\n\", \\\n-        __func__, store32(w0, i), store32(a, i), store32(b, i), store32(c, i), store32(d, i), store32(e, i), store32(f, i), store32(g, i), store32(h, i));\n-#else\n-#define dumpstate()\n-#endif\n-\n-// Align by increasing pointer, must have extra space at end of buffer\n-template <size_t nBytes, typename T>\n-T* alignup(T* p)\n-{\n-    union\n-    {\n-        T* ptr;\n-        size_t n;\n-    } u;\n-    u.ptr = p;\n-    u.n = (u.n + (nBytes-1)) & ~(nBytes-1);\n-    return u.ptr;\n-}\n-\n-static const unsigned int pSHA256InitState[8] =\n-{0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19};\n-\n-\n-unsigned int ScanHash_4WaySSE2(char* pmidstate, char* pdata, char* phash1, char* phash, unsigned int& nHashesDone)\n-{\n-    unsigned int& nNonce = *(unsigned int*)(pdata + 12);\n-    for (;;)\n-    {\n-        nNonce += NPAR;\n-        unsigned int thashbuf[9][NPAR];\n-        unsigned int (&thash)[9][NPAR] = *alignup<16>(&thashbuf);\n-        DoubleBlockSHA256(pdata, phash1, pmidstate, thash, pSHA256InitState);\n-\n-        for (int j = 0; j < NPAR; j++)\n-        {\n-            if (thash[7][j] == 0)\n-            {\n-                for (int i = 0; i < 32/4; i++)\n-                    ((unsigned int*)phash)[i] = thash[i][j];\n-                return nNonce + j;\n-            }\n-        }\n-\n-        if ((nNonce & 0xffff) == 0)\n-        {\n-            nHashesDone = 0xffff+1;\n-            return -1;\n-        }\n-    }\n-}\n-\n-\n-void DoubleBlockSHA256(const void* pin, void* pad, const void *pre, unsigned int thash[9][NPAR], const void *init)\n-{\n-    unsigned int* In = (unsigned int*)pin;\n-    unsigned int* Pad = (unsigned int*)pad;\n-    unsigned int* hPre = (unsigned int*)pre;\n-    unsigned int* hInit = (unsigned int*)init;\n-    unsigned int i, j, k;\n-\n-    /* vectors used in calculation */\n-    __m128i w0, w1, w2, w3, w4, w5, w6, w7;\n-    __m128i w8, w9, w10, w11, w12, w13, w14, w15;\n-    __m128i T1;\n-    __m128i a, b, c, d, e, f, g, h;\n-    __m128i nonce;\n-\n-    /* nonce offset for vector */\n-    __m128i offset = _mm_set_epi32(0x00000003, 0x00000002, 0x00000001, 0x00000000);\n-\n-\n-    for(k = 0; k<NPAR; k+=4) {\n-        w0 = _mm_set1_epi32(In[0]);\n-        w1 = _mm_set1_epi32(In[1]);\n-        w2 = _mm_set1_epi32(In[2]);\n-        //w3 = _mm_set1_epi32(In[3]); nonce will be later hacked into the hash\n-        w4 = _mm_set1_epi32(In[4]);\n-        w5 = _mm_set1_epi32(In[5]);\n-        w6 = _mm_set1_epi32(In[6]);\n-        w7 = _mm_set1_epi32(In[7]);\n-        w8 = _mm_set1_epi32(In[8]);\n-        w9 = _mm_set1_epi32(In[9]);\n-        w10 = _mm_set1_epi32(In[10]);\n-        w11 = _mm_set1_epi32(In[11]);\n-        w12 = _mm_set1_epi32(In[12]);\n-        w13 = _mm_set1_epi32(In[13]);\n-        w14 = _mm_set1_epi32(In[14]);\n-        w15 = _mm_set1_epi32(In[15]);\n-\n-        /* hack nonce into lowest byte of w3 */\n-        nonce = _mm_set1_epi32(In[3]);\n-        nonce = _mm_add_epi32(nonce, offset);\n-        nonce = _mm_add_epi32(nonce, _mm_set1_epi32(k));\n-        w3 = nonce;\n-\n-        a = _mm_set1_epi32(hPre[0]);\n-        b = _mm_set1_epi32(hPre[1]);\n-        c = _mm_set1_epi32(hPre[2]);\n-        d = _mm_set1_epi32(hPre[3]);\n-        e = _mm_set1_epi32(hPre[4]);\n-        f = _mm_set1_epi32(hPre[5]);\n-        g = _mm_set1_epi32(hPre[6]);\n-        h = _mm_set1_epi32(hPre[7]);\n-\n-        SHA256ROUND(a, b, c, d, e, f, g, h, 0, w0);\n-        SHA256ROUND(h, a, b, c, d, e, f, g, 1, w1);\n-        SHA256ROUND(g, h, a, b, c, d, e, f, 2, w2);\n-        SHA256ROUND(f, g, h, a, b, c, d, e, 3, w3);\n-        SHA256ROUND(e, f, g, h, a, b, c, d, 4, w4);\n-        SHA256ROUND(d, e, f, g, h, a, b, c, 5, w5);\n-        SHA256ROUND(c, d, e, f, g, h, a, b, 6, w6);\n-        SHA256ROUND(b, c, d, e, f, g, h, a, 7, w7);\n-        SHA256ROUND(a, b, c, d, e, f, g, h, 8, w8);\n-        SHA256ROUND(h, a, b, c, d, e, f, g, 9, w9);\n-        SHA256ROUND(g, h, a, b, c, d, e, f, 10, w10);\n-        SHA256ROUND(f, g, h, a, b, c, d, e, 11, w11);\n-        SHA256ROUND(e, f, g, h, a, b, c, d, 12, w12);\n-        SHA256ROUND(d, e, f, g, h, a, b, c, 13, w13);\n-        SHA256ROUND(c, d, e, f, g, h, a, b, 14, w14);\n-        SHA256ROUND(b, c, d, e, f, g, h, a, 15, w15);\n-\n-        w0 = add4(SIGMA1_256(w14), w9, SIGMA0_256(w1), w0);\n-        SHA256ROUND(a, b, c, d, e, f, g, h, 16, w0);\n-        w1 = add4(SIGMA1_256(w15), w10, SIGMA0_256(w2), w1);\n-        SHA256ROUND(h, a, b, c, d, e, f, g, 17, w1);\n-        w2 = add4(SIGMA1_256(w0), w11, SIGMA0_256(w3), w2);\n-        SHA256ROUND(g, h, a, b, c, d, e, f, 18, w2);\n-        w3 = add4(SIGMA1_256(w1), w12, SIGMA0_256(w4), w3);\n-        SHA256ROUND(f, g, h, a, b, c, d, e, 19, w3);\n-        w4 = add4(SIGMA1_256(w2), w13, SIGMA0_256(w5), w4);\n-        SHA256ROUND(e, f, g, h, a, b, c, d, 20, w4);\n-        w5 = add4(SIGMA1_256(w3), w14, SIGMA0_256(w6), w5);\n-        SHA256ROUND(d, e, f, g, h, a, b, c, 21, w5);\n-        w6 = add4(SIGMA1_256(w4), w15, SIGMA0_256(w7), w6);\n-        SHA256ROUND(c, d, e, f, g, h, a, b, 22, w6);\n-        w7 = add4(SIGMA1_256(w5), w0, SIGMA0_256(w8), w7);\n-        SHA256ROUND(b, c, d, e, f, g, h, a, 23, w7);\n-        w8 = add4(SIGMA1_256(w6), w1, SIGMA0_256(w9), w8);\n-        SHA256ROUND(a, b, c, d, e, f, g, h, 24, w8);\n-        w9 = add4(SIGMA1_256(w7), w2, SIGMA0_256(w10), w9);\n-        SHA256ROUND(h, a, b, c, d, e, f, g, 25, w9);\n-        w10 = add4(SIGMA1_256(w8), w3, SIGMA0_256(w11), w10);\n-        SHA256ROUND(g, h, a, b, c, d, e, f, 26, w10);\n-        w11 = add4(SIGMA1_256(w9), w4, SIGMA0_256(w12), w11);\n-        SHA256ROUND(f, g, h, a, b, c, d, e, 27, w11);\n-        w12 = add4(SIGMA1_256(w10), w5, SIGMA0_256(w13), w12);\n-        SHA256ROUND(e, f, g, h, a, b, c, d, 28, w12);\n-        w13 = add4(SIGMA1_256(w11), w6, SIGMA0_256(w14), w13);\n-        SHA256ROUND(d, e, f, g, h, a, b, c, 29, w13);\n-        w14 = add4(SIGMA1_256(w12), w7, SIGMA0_256(w15), w14);\n-        SHA256ROUND(c, d, e, f, g, h, a, b, 30, w14);\n-        w15 = add4(SIGMA1_256(w13), w8, SIGMA0_256(w0), w15);\n-        SHA256ROUND(b, c, d, e, f, g, h, a, 31, w15);\n-\n-        w0 = add4(SIGMA1_256(w14), w9, SIGMA0_256(w1), w0);\n-        SHA256ROUND(a, b, c, d, e, f, g, h, 32, w0);\n-        w1 = add4(SIGMA1_256(w15), w10, SIGMA0_256(w2), w1);\n-        SHA256ROUND(h, a, b, c, d, e, f, g, 33, w1);\n-        w2 = add4(SIGMA1_256(w0), w11, SIGMA0_256(w3), w2);\n-        SHA256ROUND(g, h, a, b, c, d, e, f, 34, w2);\n-        w3 = add4(SIGMA1_256(w1), w12, SIGMA0_256(w4), w3);\n-        SHA256ROUND(f, g, h, a, b, c, d, e, 35, w3);\n-        w4 = add4(SIGMA1_256(w2), w13, SIGMA0_256(w5), w4);\n-        SHA256ROUND(e, f, g, h, a, b, c, d, 36, w4);\n-        w5 = add4(SIGMA1_256(w3), w14, SIGMA0_256(w6), w5);\n-        SHA256ROUND(d, e, f, g, h, a, b, c, 37, w5);\n-        w6 = add4(SIGMA1_256(w4), w15, SIGMA0_256(w7), w6);\n-        SHA256ROUND(c, d, e, f, g, h, a, b, 38, w6);\n-        w7 = add4(SIGMA1_256(w5), w0, SIGMA0_256(w8), w7);\n-        SHA256ROUND(b, c, d, e, f, g, h, a, 39, w7);\n-        w8 = add4(SIGMA1_256(w6), w1, SIGMA0_256(w9), w8);\n-        SHA256ROUND(a, b, c, d, e, f, g, h, 40, w8);\n-        w9 = add4(SIGMA1_256(w7), w2, SIGMA0_256(w10), w9);\n-        SHA256ROUND(h, a, b, c, d, e, f, g, 41, w9);\n-        w10 = add4(SIGMA1_256(w8), w3, SIGMA0_256(w11), w10);\n-        SHA256ROUND(g, h, a, b, c, d, e, f, 42, w10);\n-        w11 = add4(SIGMA1_256(w9), w4, SIGMA0_256(w12), w11);\n-        SHA256ROUND(f, g, h, a, b, c, d, e, 43, w11);\n-        w12 = add4(SIGMA1_256(w10), w5, SIGMA0_256(w13), w12);\n-        SHA256ROUND(e, f, g, h, a, b, c, d, 44, w12);\n-        w13 = add4(SIGMA1_256(w11), w6, SIGMA0_256(w14), w13);\n-        SHA256ROUND(d, e, f, g, h, a, b, c, 45, w13);\n-        w14 = add4(SIGMA1_256(w12), w7, SIGMA0_256(w15), w14);\n-        SHA256ROUND(c, d, e, f, g, h, a, b, 46, w14);\n-        w15 = add4(SIGMA1_256(w13), w8, SIGMA0_256(w0), w15);\n-        SHA256ROUND(b, c, d, e, f, g, h, a, 47, w15);\n-\n-        w0 = add4(SIGMA1_256(w14), w9, SIGMA0_256(w1), w0);\n-        SHA256ROUND(a, b, c, d, e, f, g, h, 48, w0);\n-        w1 = add4(SIGMA1_256(w15), w10, SIGMA0_256(w2), w1);\n-        SHA256ROUND(h, a, b, c, d, e, f, g, 49, w1);\n-        w2 = add4(SIGMA1_256(w0), w11, SIGMA0_256(w3), w2);\n-        SHA256ROUND(g, h, a, b, c, d, e, f, 50, w2);\n-        w3 = add4(SIGMA1_256(w1), w12, SIGMA0_256(w4), w3);\n-        SHA256ROUND(f, g, h, a, b, c, d, e, 51, w3);\n-        w4 = add4(SIGMA1_256(w2), w13, SIGMA0_256(w5), w4);\n-        SHA256ROUND(e, f, g, h, a, b, c, d, 52, w4);\n-        w5 = add4(SIGMA1_256(w3), w14, SIGMA0_256(w6), w5);\n-        SHA256ROUND(d, e, f, g, h, a, b, c, 53, w5);\n-        w6 = add4(SIGMA1_256(w4), w15, SIGMA0_256(w7), w6);\n-        SHA256ROUND(c, d, e, f, g, h, a, b, 54, w6);\n-        w7 = add4(SIGMA1_256(w5), w0, SIGMA0_256(w8), w7);\n-        SHA256ROUND(b, c, d, e, f, g, h, a, 55, w7);\n-        w8 = add4(SIGMA1_256(w6), w1, SIGMA0_256(w9), w8);\n-        SHA256ROUND(a, b, c, d, e, f, g, h, 56, w8);\n-        w9 = add4(SIGMA1_256(w7), w2, SIGMA0_256(w10), w9);\n-        SHA256ROUND(h, a, b, c, d, e, f, g, 57, w9);\n-        w10 = add4(SIGMA1_256(w8), w3, SIGMA0_256(w11), w10);\n-        SHA256ROUND(g, h, a, b, c, d, e, f, 58, w10);\n-        w11 = add4(SIGMA1_256(w9), w4, SIGMA0_256(w12), w11);\n-        SHA256ROUND(f, g, h, a, b, c, d, e, 59, w11);\n-        w12 = add4(SIGMA1_256(w10), w5, SIGMA0_256(w13), w12);\n-        SHA256ROUND(e, f, g, h, a, b, c, d, 60, w12);\n-        w13 = add4(SIGMA1_256(w11), w6, SIGMA0_256(w14), w13);\n-        SHA256ROUND(d, e, f, g, h, a, b, c, 61, w13);\n-        w14 = add4(SIGMA1_256(w12), w7, SIGMA0_256(w15), w14);\n-        SHA256ROUND(c, d, e, f, g, h, a, b, 62, w14);\n-        w15 = add4(SIGMA1_256(w13), w8, SIGMA0_256(w0), w15);\n-        SHA256ROUND(b, c, d, e, f, g, h, a, 63, w15);\n-\n-#define store_load(x, i, dest) \\\n-        T1 = _mm_set1_epi32((hPre)[i]); \\\n-        dest = _mm_add_epi32(T1, x);\n-\n-        store_load(a, 0, w0);\n-        store_load(b, 1, w1);\n-        store_load(c, 2, w2);\n-        store_load(d, 3, w3);\n-        store_load(e, 4, w4);\n-        store_load(f, 5, w5);\n-        store_load(g, 6, w6);\n-        store_load(h, 7, w7);\n-\n-        w8 = _mm_set1_epi32(Pad[8]);\n-        w9 = _mm_set1_epi32(Pad[9]);\n-        w10 = _mm_set1_epi32(Pad[10]);\n-        w11 = _mm_set1_epi32(Pad[11]);\n-        w12 = _mm_set1_epi32(Pad[12]);\n-        w13 = _mm_set1_epi32(Pad[13]);\n-        w14 = _mm_set1_epi32(Pad[14]);\n-        w15 = _mm_set1_epi32(Pad[15]);\n-\n-        a = _mm_set1_epi32(hInit[0]);\n-        b = _mm_set1_epi32(hInit[1]);\n-        c = _mm_set1_epi32(hInit[2]);\n-        d = _mm_set1_epi32(hInit[3]);\n-        e = _mm_set1_epi32(hInit[4]);\n-        f = _mm_set1_epi32(hInit[5]);\n-        g = _mm_set1_epi32(hInit[6]);\n-        h = _mm_set1_epi32(hInit[7]);\n-\n-        SHA256ROUND(a, b, c, d, e, f, g, h, 0, w0);\n-        SHA256ROUND(h, a, b, c, d, e, f, g, 1, w1);\n-        SHA256ROUND(g, h, a, b, c, d, e, f, 2, w2);\n-        SHA256ROUND(f, g, h, a, b, c, d, e, 3, w3);\n-        SHA256ROUND(e, f, g, h, a, b, c, d, 4, w4);\n-        SHA256ROUND(d, e, f, g, h, a, b, c, 5, w5);\n-        SHA256ROUND(c, d, e, f, g, h, a, b, 6, w6);\n-        SHA256ROUND(b, c, d, e, f, g, h, a, 7, w7);\n-        SHA256ROUND(a, b, c, d, e, f, g, h, 8, w8);\n-        SHA256ROUND(h, a, b, c, d, e, f, g, 9, w9);\n-        SHA256ROUND(g, h, a, b, c, d, e, f, 10, w10);\n-        SHA256ROUND(f, g, h, a, b, c, d, e, 11, w11);\n-        SHA256ROUND(e, f, g, h, a, b, c, d, 12, w12);\n-        SHA256ROUND(d, e, f, g, h, a, b, c, 13, w13);\n-        SHA256ROUND(c, d, e, f, g, h, a, b, 14, w14);\n-        SHA256ROUND(b, c, d, e, f, g, h, a, 15, w15);\n-\n-        w0 = add4(SIGMA1_256(w14), w9, SIGMA0_256(w1), w0);\n-        SHA256ROUND(a, b, c, d, e, f, g, h, 16, w0);\n-        w1 = add4(SIGMA1_256(w15), w10, SIGMA0_256(w2), w1);\n-        SHA256ROUND(h, a, b, c, d, e, f, g, 17, w1);\n-        w2 = add4(SIGMA1_256(w0), w11, SIGMA0_256(w3), w2);\n-        SHA256ROUND(g, h, a, b, c, d, e, f, 18, w2);\n-        w3 = add4(SIGMA1_256(w1), w12, SIGMA0_256(w4), w3);\n-        SHA256ROUND(f, g, h, a, b, c, d, e, 19, w3);\n-        w4 = add4(SIGMA1_256(w2), w13, SIGMA0_256(w5), w4);\n-        SHA256ROUND(e, f, g, h, a, b, c, d, 20, w4);\n-        w5 = add4(SIGMA1_256(w3), w14, SIGMA0_256(w6), w5);\n-        SHA256ROUND(d, e, f, g, h, a, b, c, 21, w5);\n-        w6 = add4(SIGMA1_256(w4), w15, SIGMA0_256(w7), w6);\n-        SHA256ROUND(c, d, e, f, g, h, a, b, 22, w6);\n-        w7 = add4(SIGMA1_256(w5), w0, SIGMA0_256(w8), w7);\n-        SHA256ROUND(b, c, d, e, f, g, h, a, 23, w7);\n-        w8 = add4(SIGMA1_256(w6), w1, SIGMA0_256(w9), w8);\n-        SHA256ROUND(a, b, c, d, e, f, g, h, 24, w8);\n-        w9 = add4(SIGMA1_256(w7), w2, SIGMA0_256(w10), w9);\n-        SHA256ROUND(h, a, b, c, d, e, f, g, 25, w9);\n-        w10 = add4(SIGMA1_256(w8), w3, SIGMA0_256(w11), w10);\n-        SHA256ROUND(g, h, a, b, c, d, e, f, 26, w10);\n-        w11 = add4(SIGMA1_256(w9), w4, SIGMA0_256(w12), w11);\n-        SHA256ROUND(f, g, h, a, b, c, d, e, 27, w11);\n-        w12 = add4(SIGMA1_256(w10), w5, SIGMA0_256(w13), w12);\n-        SHA256ROUND(e, f, g, h, a, b, c, d, 28, w12);\n-        w13 = add4(SIGMA1_256(w11), w6, SIGMA0_256(w14), w13);\n-        SHA256ROUND(d, e, f, g, h, a, b, c, 29, w13);\n-        w14 = add4(SIGMA1_256(w12), w7, SIGMA0_256(w15), w14);\n-        SHA256ROUND(c, d, e, f, g, h, a, b, 30, w14);\n-        w15 = add4(SIGMA1_256(w13), w8, SIGMA0_256(w0), w15);\n-        SHA256ROUND(b, c, d, e, f, g, h, a, 31, w15);\n-\n-        w0 = add4(SIGMA1_256(w14), w9, SIGMA0_256(w1), w0);\n-        SHA256ROUND(a, b, c, d, e, f, g, h, 32, w0);\n-        w1 = add4(SIGMA1_256(w15), w10, SIGMA0_256(w2), w1);\n-        SHA256ROUND(h, a, b, c, d, e, f, g, 33, w1);\n-        w2 = add4(SIGMA1_256(w0), w11, SIGMA0_256(w3), w2);\n-        SHA256ROUND(g, h, a, b, c, d, e, f, 34, w2);\n-        w3 = add4(SIGMA1_256(w1), w12, SIGMA0_256(w4), w3);\n-        SHA256ROUND(f, g, h, a, b, c, d, e, 35, w3);\n-        w4 = add4(SIGMA1_256(w2), w13, SIGMA0_256(w5), w4);\n-        SHA256ROUND(e, f, g, h, a, b, c, d, 36, w4);\n-        w5 = add4(SIGMA1_256(w3), w14, SIGMA0_256(w6), w5);\n-        SHA256ROUND(d, e, f, g, h, a, b, c, 37, w5);\n-        w6 = add4(SIGMA1_256(w4), w15, SIGMA0_256(w7), w6);\n-        SHA256ROUND(c, d, e, f, g, h, a, b, 38, w6);\n-        w7 = add4(SIGMA1_256(w5), w0, SIGMA0_256(w8), w7);\n-        SHA256ROUND(b, c, d, e, f, g, h, a, 39, w7);\n-        w8 = add4(SIGMA1_256(w6), w1, SIGMA0_256(w9), w8);\n-        SHA256ROUND(a, b, c, d, e, f, g, h, 40, w8);\n-        w9 = add4(SIGMA1_256(w7), w2, SIGMA0_256(w10), w9);\n-        SHA256ROUND(h, a, b, c, d, e, f, g, 41, w9);\n-        w10 = add4(SIGMA1_256(w8), w3, SIGMA0_256(w11), w10);\n-        SHA256ROUND(g, h, a, b, c, d, e, f, 42, w10);\n-        w11 = add4(SIGMA1_256(w9), w4, SIGMA0_256(w12), w11);\n-        SHA256ROUND(f, g, h, a, b, c, d, e, 43, w11);\n-        w12 = add4(SIGMA1_256(w10), w5, SIGMA0_256(w13), w12);\n-        SHA256ROUND(e, f, g, h, a, b, c, d, 44, w12);\n-        w13 = add4(SIGMA1_256(w11), w6, SIGMA0_256(w14), w13);\n-        SHA256ROUND(d, e, f, g, h, a, b, c, 45, w13);\n-        w14 = add4(SIGMA1_256(w12), w7, SIGMA0_256(w15), w14);\n-        SHA256ROUND(c, d, e, f, g, h, a, b, 46, w14);\n-        w15 = add4(SIGMA1_256(w13), w8, SIGMA0_256(w0), w15);\n-        SHA256ROUND(b, c, d, e, f, g, h, a, 47, w15);\n-\n-        w0 = add4(SIGMA1_256(w14), w9, SIGMA0_256(w1), w0);\n-        SHA256ROUND(a, b, c, d, e, f, g, h, 48, w0);\n-        w1 = add4(SIGMA1_256(w15), w10, SIGMA0_256(w2), w1);\n-        SHA256ROUND(h, a, b, c, d, e, f, g, 49, w1);\n-        w2 = add4(SIGMA1_256(w0), w11, SIGMA0_256(w3), w2);\n-        SHA256ROUND(g, h, a, b, c, d, e, f, 50, w2);\n-        w3 = add4(SIGMA1_256(w1), w12, SIGMA0_256(w4), w3);\n-        SHA256ROUND(f, g, h, a, b, c, d, e, 51, w3);\n-        w4 = add4(SIGMA1_256(w2), w13, SIGMA0_256(w5), w4);\n-        SHA256ROUND(e, f, g, h, a, b, c, d, 52, w4);\n-        w5 = add4(SIGMA1_256(w3), w14, SIGMA0_256(w6), w5);\n-        SHA256ROUND(d, e, f, g, h, a, b, c, 53, w5);\n-        w6 = add4(SIGMA1_256(w4), w15, SIGMA0_256(w7), w6);\n-        SHA256ROUND(c, d, e, f, g, h, a, b, 54, w6);\n-        w7 = add4(SIGMA1_256(w5), w0, SIGMA0_256(w8), w7);\n-        SHA256ROUND(b, c, d, e, f, g, h, a, 55, w7);\n-        w8 = add4(SIGMA1_256(w6), w1, SIGMA0_256(w9), w8);\n-        SHA256ROUND(a, b, c, d, e, f, g, h, 56, w8);\n-        w9 = add4(SIGMA1_256(w7), w2, SIGMA0_256(w10), w9);\n-        SHA256ROUND(h, a, b, c, d, e, f, g, 57, w9);\n-        w10 = add4(SIGMA1_256(w8), w3, SIGMA0_256(w11), w10);\n-        SHA256ROUND(g, h, a, b, c, d, e, f, 58, w10);\n-        w11 = add4(SIGMA1_256(w9), w4, SIGMA0_256(w12), w11);\n-        SHA256ROUND(f, g, h, a, b, c, d, e, 59, w11);\n-        w12 = add4(SIGMA1_256(w10), w5, SIGMA0_256(w13), w12);\n-        SHA256ROUND(e, f, g, h, a, b, c, d, 60, w12);\n-        w13 = add4(SIGMA1_256(w11), w6, SIGMA0_256(w14), w13);\n-        SHA256ROUND(d, e, f, g, h, a, b, c, 61, w13);\n-        w14 = add4(SIGMA1_256(w12), w7, SIGMA0_256(w15), w14);\n-        SHA256ROUND(c, d, e, f, g, h, a, b, 62, w14);\n-        w15 = add4(SIGMA1_256(w13), w8, SIGMA0_256(w0), w15);\n-        SHA256ROUND(b, c, d, e, f, g, h, a, 63, w15);\n-\n-        /* store resulsts directly in thash */\n-#define store_2(x,i)  \\\n-        w0 = _mm_set1_epi32(hInit[i]); \\\n-        *(__m128i *)&(thash)[i][0+k] = _mm_add_epi32(w0, x);\n-\n-        store_2(a, 0);\n-        store_2(b, 1);\n-        store_2(c, 2);\n-        store_2(d, 3);\n-        store_2(e, 4);\n-        store_2(f, 5);\n-        store_2(g, 6);\n-        store_2(h, 7);\n-        *(__m128i *)&(thash)[8][0+k] = nonce;\n-    }\n-\n-}\n-\n-#endif // FOURWAYSSE2"
      }
    ]
  }
]