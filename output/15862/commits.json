[
  {
    "sha": "8e608fe50d8923f216c5f9a493f5e564a54cb045",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZTYwOGZlNTBkODkyM2YyMTZjNWY5YTQ5M2Y1ZTU2NGE1NGNiMDQ1",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2019-04-20T23:47:49Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2019-04-20T23:47:49Z"
      },
      "message": "Bugfix: RPC: rawtransaction: Accept string-encoded amounts for maxfeerate in sendrawtransaction & testmempoolaccept",
      "tree": {
        "sha": "78210db7b59f4a0d3a1283e29c06c65bf523c121",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/78210db7b59f4a0d3a1283e29c06c65bf523c121"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8e608fe50d8923f216c5f9a493f5e564a54cb045",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e608fe50d8923f216c5f9a493f5e564a54cb045",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8e608fe50d8923f216c5f9a493f5e564a54cb045",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e608fe50d8923f216c5f9a493f5e564a54cb045/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "edb8df4fea13dadd5691ea0a52a0271269b4d1f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/edb8df4fea13dadd5691ea0a52a0271269b4d1f6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/edb8df4fea13dadd5691ea0a52a0271269b4d1f6"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 10,
      "deletions": 6
    },
    "files": [
      {
        "sha": "1dbc2c74d5c2cbf939a0bfe91e415219b9587919",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e608fe50d8923f216c5f9a493f5e564a54cb045/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e608fe50d8923f216c5f9a493f5e564a54cb045/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=8e608fe50d8923f216c5f9a493f5e564a54cb045",
        "patch": "@@ -1069,15 +1069,13 @@ static UniValue sendrawtransaction(const JSONRPCRequest& request)\n     // TODO: temporary migration code for old clients. Remove in v0.20\n     if (request.params[1].isBool()) {\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Second argument must be numeric (maxfeerate) and no longer supports a boolean. To allow a transaction with high fees, set maxfeerate to 0.\");\n-    } else if (request.params[1].isNum()) {\n+    } else if (!request.params[1].isNull()) {\n         size_t weight = GetTransactionWeight(*tx);\n         CFeeRate fr(AmountFromValue(request.params[1]));\n         // the +3/4 part rounds the value up, and is the same formula used when\n         // calculating the fee for a transaction\n         // (see GetVirtualTransactionSize)\n         max_raw_tx_fee = fr.GetFee((weight+3)/4);\n-    } else if (!request.params[1].isNull()) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"second argument (maxfeerate) must be numeric\");\n     }\n \n     uint256 txid;\n@@ -1151,15 +1149,13 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n     // TODO: temporary migration code for old clients. Remove in v0.20\n     if (request.params[1].isBool()) {\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Second argument must be numeric (maxfeerate) and no longer supports a boolean. To allow a transaction with high fees, set maxfeerate to 0.\");\n-    } else if (request.params[1].isNum()) {\n+    } else if (!request.params[1].isNull()) {\n         size_t weight = GetTransactionWeight(*tx);\n         CFeeRate fr(AmountFromValue(request.params[1]));\n         // the +3/4 part rounds the value up, and is the same formula used when\n         // calculating the fee for a transaction\n         // (see GetVirtualTransactionSize)\n         max_raw_tx_fee = fr.GetFee((weight+3)/4);\n-    } else if (!request.params[1].isNull()) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"second argument (maxfeerate) must be numeric\");\n     }\n \n     UniValue result(UniValue::VARR);"
      },
      {
        "sha": "6c73f93918d9c648f3c0dd58b75b27ac0e5e783c",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e608fe50d8923f216c5f9a493f5e564a54cb045/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e608fe50d8923f216c5f9a493f5e564a54cb045/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=8e608fe50d8923f216c5f9a493f5e564a54cb045",
        "patch": "@@ -443,11 +443,19 @@ def run_test(self):\n         testres = self.nodes[2].testmempoolaccept([rawTxSigned['hex']], 0.00001000)[0]\n         assert_equal(testres['allowed'], False)\n         assert_equal(testres['reject-reason'], '256: absurdly-high-fee')\n+        testres = self.nodes[2].testmempoolaccept([rawTxSigned['hex']], \"0.00001000\")[0]\n+        assert_equal(testres['allowed'], False)\n+        assert_equal(testres['reject-reason'], '256: absurdly-high-fee')\n         # and sendrawtransaction should throw\n         assert_raises_rpc_error(-26, \"absurdly-high-fee\", self.nodes[2].sendrawtransaction, rawTxSigned['hex'], 0.00001000)\n+        assert_raises_rpc_error(-26, \"absurdly-high-fee\", self.nodes[2].sendrawtransaction, rawTxSigned['hex'], \"0.00001000\")\n         # And below calls should both succeed\n         testres = self.nodes[2].testmempoolaccept(rawtxs=[rawTxSigned['hex']], maxfeerate=0.00007000)[0]\n         assert_equal(testres['allowed'], True)\n+        testres = self.nodes[2].testmempoolaccept(rawtxs=[rawTxSigned['hex']], maxfeerate=\"0.00007000\")[0]\n+        assert_equal(testres['allowed'], True)\n+        testres = self.nodes[2].testmempoolaccept(rawtxs=[rawTxSigned['hex']], maxfeerate=0.00007000)[0]\n+        assert_equal(testres['allowed'], True)\n         self.nodes[2].sendrawtransaction(hexstring=rawTxSigned['hex'], maxfeerate=0.00007000)\n \n "
      }
    ]
  }
]