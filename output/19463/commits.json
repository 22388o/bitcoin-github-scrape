[
  {
    "sha": "eb8a6f500c9fa0466be1e1e89fa7632b8f21c89f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYjhhNmY1MDBjOWZhMDQ2NmJlMWUxZTg5ZmE3NjMyYjhmMjFjODlm",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2021-07-07T00:02:16Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2021-07-07T00:02:16Z"
      },
      "message": "Add ability to block pruning of specific block ranges",
      "tree": {
        "sha": "4ab46d59d35b7e3054712b6d5296d28bbd6ebf71",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4ab46d59d35b7e3054712b6d5296d28bbd6ebf71"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eb8a6f500c9fa0466be1e1e89fa7632b8f21c89f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb8a6f500c9fa0466be1e1e89fa7632b8f21c89f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eb8a6f500c9fa0466be1e1e89fa7632b8f21c89f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb8a6f500c9fa0466be1e1e89fa7632b8f21c89f/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "088b348dbe82689ce1782653c8fdcebb3b636eb5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/088b348dbe82689ce1782653c8fdcebb3b636eb5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/088b348dbe82689ce1782653c8fdcebb3b636eb5"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 66,
      "deletions": 0
    },
    "files": [
      {
        "sha": "411a98686fd8577f6d6ca52483c40f8b46824f7b",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb8a6f500c9fa0466be1e1e89fa7632b8f21c89f/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb8a6f500c9fa0466be1e1e89fa7632b8f21c89f/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=eb8a6f500c9fa0466be1e1e89fa7632b8f21c89f",
        "patch": "@@ -442,4 +442,10 @@ class CChain {\n     CBlockIndex* FindEarliestAtLeast(int64_t nTime, int height) const;\n };\n \n+struct PruneLockInfo {\n+    std::string m_desc;\n+    uint64_t m_height_first{std::numeric_limits<uint64_t>::max()};\n+    uint64_t m_height_last{std::numeric_limits<uint64_t>::max()};\n+};\n+\n #endif // BITCOIN_CHAIN_H"
      },
      {
        "sha": "1a592f76f890fe5a5b0b50e157c93d88162b6371",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb8a6f500c9fa0466be1e1e89fa7632b8f21c89f/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb8a6f500c9fa0466be1e1e89fa7632b8f21c89f/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=eb8a6f500c9fa0466be1e1e89fa7632b8f21c89f",
        "patch": "@@ -29,6 +29,7 @@ struct bilingual_str;\n struct CBlockLocator;\n struct FeeCalculation;\n struct NodeContext;\n+struct PruneLockInfo;\n \n namespace interfaces {\n \n@@ -103,6 +104,10 @@ class Chain\n     //! pruned), and contains transactions.\n     virtual bool haveBlockOnDisk(int height) = 0;\n \n+    virtual bool pruneLockExists(const std::string& lockid) = 0;\n+    virtual void setPruneLock(const std::string& lockid, const PruneLockInfo&) = 0;\n+    virtual void deletePruneLock(const std::string& lockid) = 0;\n+\n     //! Get locator for the current chain tip.\n     virtual CBlockLocator getTipLocator() = 0;\n "
      },
      {
        "sha": "0ce12602715c244c57f967b1f1ab9d64d3e32019",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb8a6f500c9fa0466be1e1e89fa7632b8f21c89f/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb8a6f500c9fa0466be1e1e89fa7632b8f21c89f/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=eb8a6f500c9fa0466be1e1e89fa7632b8f21c89f",
        "patch": "@@ -456,6 +456,21 @@ class ChainImpl : public Chain\n         CBlockIndex* block = active[height];\n         return block && ((block->nStatus & BLOCK_HAVE_DATA) != 0) && block->nTx > 0;\n     }\n+    bool pruneLockExists(const std::string& lockid) override\n+    {\n+        LOCK(g_prune_locks_mutex);\n+        return PruneLockExists(lockid);\n+    }\n+    void setPruneLock(const std::string& lockid, const PruneLockInfo& lockinfo) override\n+    {\n+        LOCK(g_prune_locks_mutex);\n+        SetPruneLock(lockid, lockinfo);\n+    }\n+    void deletePruneLock(const std::string& lockid) override\n+    {\n+        LOCK(g_prune_locks_mutex);\n+        DeletePruneLock(lockid);\n+    }\n     CBlockLocator getTipLocator() override\n     {\n         LOCK(cs_main);"
      },
      {
        "sha": "54beffec87df3980545ee0ba26bd534407d18374",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb8a6f500c9fa0466be1e1e89fa7632b8f21c89f/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb8a6f500c9fa0466be1e1e89fa7632b8f21c89f/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=eb8a6f500c9fa0466be1e1e89fa7632b8f21c89f",
        "patch": "@@ -122,6 +122,8 @@ bool g_parallel_script_checks{false};\n bool fRequireStandard = true;\n bool fCheckBlockIndex = false;\n bool fCheckpointsEnabled = DEFAULT_CHECKPOINTS_ENABLED;\n+Mutex g_prune_locks_mutex;\n+std::unordered_map<std::string, PruneLockInfo> g_prune_locks;\n int64_t nMaxTipAge = DEFAULT_MAX_TIP_AGE;\n \n uint256 hashAssumeValid;\n@@ -3582,6 +3584,32 @@ void BlockManager::PruneOneBlockFile(const int fileNumber)\n     setDirtyFileInfo.insert(fileNumber);\n }\n \n+static bool DoPruneLocksForbidPruning(const CBlockFileInfo& block_file_info)\n+{\n+    LOCK(g_prune_locks_mutex);\n+    for (const auto& prune_lock : g_prune_locks) {\n+        if (block_file_info.nHeightFirst > prune_lock.second.m_height_last) continue;\n+        if (block_file_info.nHeightLast < prune_lock.second.m_height_first) continue;\n+        // TODO: Check each block within the file against the prune_lock range\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool PruneLockExists(const std::string& lockid) {\n+    return g_prune_locks.count(lockid);\n+}\n+\n+void SetPruneLock(const std::string& lockid, const PruneLockInfo& lockinfo)\n+{\n+    g_prune_locks[lockid] = lockinfo;\n+}\n+\n+void DeletePruneLock(const std::string& lockid)\n+{\n+    g_prune_locks.erase(lockid);\n+}\n+\n void BlockManager::FindFilesToPruneManual(std::set<int>& setFilesToPrune, int nManualPruneHeight, int chain_tip_height)\n {\n     assert(fPruneMode && nManualPruneHeight > 0);\n@@ -3598,6 +3626,9 @@ void BlockManager::FindFilesToPruneManual(std::set<int>& setFilesToPrune, int nM\n         if (vinfoBlockFile[fileNumber].nSize == 0 || vinfoBlockFile[fileNumber].nHeightLast > nLastBlockWeCanPrune) {\n             continue;\n         }\n+\n+        if (DoPruneLocksForbidPruning(vinfoBlockFile[fileNumber])) continue;\n+\n         PruneOneBlockFile(fileNumber);\n         setFilesToPrune.insert(fileNumber);\n         count++;\n@@ -3660,6 +3691,8 @@ void BlockManager::FindFilesToPrune(std::set<int>& setFilesToPrune, uint64_t nPr\n                 continue;\n             }\n \n+            if (DoPruneLocksForbidPruning(vinfoBlockFile[fileNumber])) continue;\n+\n             PruneOneBlockFile(fileNumber);\n             // Queue up the files for removal\n             setFilesToPrune.insert(fileNumber);"
      },
      {
        "sha": "3b89ddaba49940a136f6b011c20828fe1658f634",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb8a6f500c9fa0466be1e1e89fa7632b8f21c89f/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb8a6f500c9fa0466be1e1e89fa7632b8f21c89f/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=eb8a6f500c9fa0466be1e1e89fa7632b8f21c89f",
        "patch": "@@ -37,6 +37,7 @@\n #include <stdint.h>\n #include <string>\n #include <thread>\n+#include <unordered_map>\n #include <utility>\n #include <vector>\n \n@@ -160,6 +161,12 @@ bool AbortNode(BlockValidationState& state, const std::string& strMessage, const\n /** Guess verification progress (as a fraction between 0.0=genesis and 1.0=current tip). */\n double GuessVerificationProgress(const ChainTxData& data, const CBlockIndex* pindex);\n \n+extern Mutex g_prune_locks_mutex;\n+extern std::unordered_map<std::string, PruneLockInfo> g_prune_locks GUARDED_BY(g_prune_locks_mutex);\n+bool PruneLockExists(const std::string& lockid) SHARED_LOCKS_REQUIRED(g_prune_locks_mutex);\n+void SetPruneLock(const std::string& lockid, const PruneLockInfo&) EXCLUSIVE_LOCKS_REQUIRED(g_prune_locks_mutex);\n+void DeletePruneLock(const std::string& lockid) EXCLUSIVE_LOCKS_REQUIRED(g_prune_locks_mutex);\n+\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(CChainState& active_chainstate, int nManualPruneHeight);\n "
      }
    ]
  },
  {
    "sha": "66c3ccb72097f3c5b55dedbfb3920eb26f7716bd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NmMzY2NiNzIwOTdmM2M1YjU1ZGVkYmZiMzkyMGViMjZmNzcxNmJk",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2021-07-07T00:08:41Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2021-07-07T00:08:41Z"
      },
      "message": "Persist prune locks in blocks/index db",
      "tree": {
        "sha": "4dfa0220cd8e6548c7f2202866dfa965a8303c30",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4dfa0220cd8e6548c7f2202866dfa965a8303c30"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/66c3ccb72097f3c5b55dedbfb3920eb26f7716bd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66c3ccb72097f3c5b55dedbfb3920eb26f7716bd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/66c3ccb72097f3c5b55dedbfb3920eb26f7716bd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66c3ccb72097f3c5b55dedbfb3920eb26f7716bd/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eb8a6f500c9fa0466be1e1e89fa7632b8f21c89f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb8a6f500c9fa0466be1e1e89fa7632b8f21c89f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eb8a6f500c9fa0466be1e1e89fa7632b8f21c89f"
      }
    ],
    "stats": {
      "total": 81,
      "additions": 68,
      "deletions": 13
    },
    "files": [
      {
        "sha": "8464252c198cd392f9a319e2883545e07977508d",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66c3ccb72097f3c5b55dedbfb3920eb26f7716bd/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66c3ccb72097f3c5b55dedbfb3920eb26f7716bd/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=66c3ccb72097f3c5b55dedbfb3920eb26f7716bd",
        "patch": "@@ -446,6 +446,13 @@ struct PruneLockInfo {\n     std::string m_desc;\n     uint64_t m_height_first{std::numeric_limits<uint64_t>::max()};\n     uint64_t m_height_last{std::numeric_limits<uint64_t>::max()};\n+\n+    SERIALIZE_METHODS(PruneLockInfo, obj)\n+    {\n+        READWRITE(obj.m_desc);\n+        READWRITE(VARINT(obj.m_height_first));\n+        READWRITE(VARINT(obj.m_height_last));\n+    }\n };\n \n #endif // BITCOIN_CHAIN_H"
      },
      {
        "sha": "93a7de930d9d12af5c374f28ed467d1ea0ea2f30",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66c3ccb72097f3c5b55dedbfb3920eb26f7716bd/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66c3ccb72097f3c5b55dedbfb3920eb26f7716bd/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=66c3ccb72097f3c5b55dedbfb3920eb26f7716bd",
        "patch": "@@ -105,8 +105,8 @@ class Chain\n     virtual bool haveBlockOnDisk(int height) = 0;\n \n     virtual bool pruneLockExists(const std::string& lockid) = 0;\n-    virtual void setPruneLock(const std::string& lockid, const PruneLockInfo&) = 0;\n-    virtual void deletePruneLock(const std::string& lockid) = 0;\n+    virtual bool setPruneLock(const std::string& lockid, const PruneLockInfo&, bool sync=false) = 0;\n+    virtual bool deletePruneLock(const std::string& lockid) = 0;\n \n     //! Get locator for the current chain tip.\n     virtual CBlockLocator getTipLocator() = 0;"
      },
      {
        "sha": "6f5a3fa47cc4ddc5662ff650b7f278f6f7e73001",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66c3ccb72097f3c5b55dedbfb3920eb26f7716bd/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66c3ccb72097f3c5b55dedbfb3920eb26f7716bd/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=66c3ccb72097f3c5b55dedbfb3920eb26f7716bd",
        "patch": "@@ -461,15 +461,15 @@ class ChainImpl : public Chain\n         LOCK(g_prune_locks_mutex);\n         return PruneLockExists(lockid);\n     }\n-    void setPruneLock(const std::string& lockid, const PruneLockInfo& lockinfo) override\n+    bool setPruneLock(const std::string& lockid, const PruneLockInfo& lockinfo, bool sync) override\n     {\n         LOCK(g_prune_locks_mutex);\n-        SetPruneLock(lockid, lockinfo);\n+        return SetPruneLock(lockid, lockinfo, sync);\n     }\n-    void deletePruneLock(const std::string& lockid) override\n+    bool deletePruneLock(const std::string& lockid) override\n     {\n         LOCK(g_prune_locks_mutex);\n-        DeletePruneLock(lockid);\n+        return DeletePruneLock(lockid);\n     }\n     CBlockLocator getTipLocator() override\n     {"
      },
      {
        "sha": "6252b7ea944ab7ad2809775c059792e5387f45be",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 1,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66c3ccb72097f3c5b55dedbfb3920eb26f7716bd/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66c3ccb72097f3c5b55dedbfb3920eb26f7716bd/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=66c3ccb72097f3c5b55dedbfb3920eb26f7716bd",
        "patch": "@@ -26,6 +26,7 @@ static constexpr uint8_t DB_HEAD_BLOCKS{'H'};\n static constexpr uint8_t DB_FLAG{'F'};\n static constexpr uint8_t DB_REINDEX_FLAG{'R'};\n static constexpr uint8_t DB_LAST_BLOCK{'l'};\n+static constexpr uint8_t DB_PRUNE_LOCK{'L'};\n \n namespace {\n \n@@ -247,7 +248,7 @@ void CCoinsViewDBCursor::Next()\n     }\n }\n \n-bool CBlockTreeDB::WriteBatchSync(const std::vector<std::pair<int, const CBlockFileInfo*> >& fileInfo, int nLastFile, const std::vector<const CBlockIndex*>& blockinfo) {\n+bool CBlockTreeDB::WriteBatchSync(const std::vector<std::pair<int, const CBlockFileInfo*> >& fileInfo, int nLastFile, const std::vector<const CBlockIndex*>& blockinfo, const std::unordered_map<std::string, PruneLockInfo>& prune_locks) {\n     CDBBatch batch(*this);\n     for (std::vector<std::pair<int, const CBlockFileInfo*> >::const_iterator it=fileInfo.begin(); it != fileInfo.end(); it++) {\n         batch.Write(std::make_pair(DB_BLOCK_FILES, it->first), *it->second);\n@@ -256,9 +257,36 @@ bool CBlockTreeDB::WriteBatchSync(const std::vector<std::pair<int, const CBlockF\n     for (std::vector<const CBlockIndex*>::const_iterator it=blockinfo.begin(); it != blockinfo.end(); it++) {\n         batch.Write(std::make_pair(DB_BLOCK_INDEX, (*it)->GetBlockHash()), CDiskBlockIndex(*it));\n     }\n+    for (const auto& prune_lock : prune_locks) {\n+        batch.Write(std::make_pair(DB_PRUNE_LOCK, prune_lock.first), prune_lock.second);\n+    }\n     return WriteBatch(batch, true);\n }\n \n+bool CBlockTreeDB::WritePruneLock(const std::string& name, const PruneLockInfo& lockinfo) {\n+    return Write(std::make_pair(DB_PRUNE_LOCK, name), lockinfo);\n+}\n+\n+bool CBlockTreeDB::DeletePruneLock(const std::string& name) {\n+    return Erase(std::make_pair(DB_PRUNE_LOCK, name));\n+}\n+\n+bool CBlockTreeDB::LoadPruneLocks(std::unordered_map<std::string, PruneLockInfo>& prune_locks) {\n+    std::unique_ptr<CDBIterator> pcursor(NewIterator());\n+    for (pcursor->Seek(DB_PRUNE_LOCK); pcursor->Valid(); pcursor->Next()) {\n+        if (ShutdownRequested()) return false;\n+\n+        std::pair<char, std::string> key;\n+        if ((!pcursor->GetKey(key)) || key.first != DB_PRUNE_LOCK) break;\n+\n+        if (!pcursor->GetValue(prune_locks[key.second])) {\n+            return error(\"%s: failed to %s prune lock '%s'\", __func__, \"read\", key.second);\n+        }\n+    }\n+\n+    return true;\n+}\n+\n bool CBlockTreeDB::WriteFlag(const std::string &name, bool fValue) {\n     return Write(std::make_pair(DB_FLAG, name), fValue ? uint8_t{'1'} : uint8_t{'0'});\n }"
      },
      {
        "sha": "15c1855b253d10610e613dff6c9af374a880ccbd",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66c3ccb72097f3c5b55dedbfb3920eb26f7716bd/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66c3ccb72097f3c5b55dedbfb3920eb26f7716bd/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=66c3ccb72097f3c5b55dedbfb3920eb26f7716bd",
        "patch": "@@ -13,6 +13,7 @@\n \n #include <memory>\n #include <string>\n+#include <unordered_map>\n #include <utility>\n #include <vector>\n \n@@ -76,14 +77,17 @@ class CBlockTreeDB : public CDBWrapper\n public:\n     explicit CBlockTreeDB(size_t nCacheSize, bool fMemory = false, bool fWipe = false);\n \n-    bool WriteBatchSync(const std::vector<std::pair<int, const CBlockFileInfo*> >& fileInfo, int nLastFile, const std::vector<const CBlockIndex*>& blockinfo);\n+    bool WriteBatchSync(const std::vector<std::pair<int, const CBlockFileInfo*> >& fileInfo, int nLastFile, const std::vector<const CBlockIndex*>& blockinfo, const std::unordered_map<std::string, PruneLockInfo>& prune_locks);\n     bool ReadBlockFileInfo(int nFile, CBlockFileInfo &info);\n     bool ReadLastBlockFile(int &nFile);\n     bool WriteReindexing(bool fReindexing);\n     void ReadReindexing(bool &fReindexing);\n+    bool WritePruneLock(const std::string& name, const PruneLockInfo&);\n+    bool DeletePruneLock(const std::string& name);\n     bool WriteFlag(const std::string &name, bool fValue);\n     bool ReadFlag(const std::string &name, bool &fValue);\n     bool LoadBlockIndexGuts(const Consensus::Params& consensusParams, std::function<CBlockIndex*(const uint256&)> insertBlockIndex);\n+    bool LoadPruneLocks(std::unordered_map<std::string, PruneLockInfo>& prune_locks);\n };\n \n #endif // BITCOIN_TXDB_H"
      },
      {
        "sha": "3abc3af4de04c25b46227322a29e6aa8a7d0b0ce",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 3,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66c3ccb72097f3c5b55dedbfb3920eb26f7716bd/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66c3ccb72097f3c5b55dedbfb3920eb26f7716bd/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=66c3ccb72097f3c5b55dedbfb3920eb26f7716bd",
        "patch": "@@ -2130,7 +2130,8 @@ bool CChainState::FlushStateToDisk(\n                     vBlocks.push_back(*it);\n                     setDirtyBlockIndex.erase(it++);\n                 }\n-                if (!pblocktree->WriteBatchSync(vFiles, nLastBlockFile, vBlocks)) {\n+                LOCK(g_prune_locks_mutex);\n+                if (!pblocktree->WriteBatchSync(vFiles, nLastBlockFile, vBlocks, g_prune_locks)) {\n                     return AbortNode(state, \"Failed to write to block index database\");\n                 }\n             }\n@@ -3600,14 +3601,25 @@ bool PruneLockExists(const std::string& lockid) {\n     return g_prune_locks.count(lockid);\n }\n \n-void SetPruneLock(const std::string& lockid, const PruneLockInfo& lockinfo)\n+bool SetPruneLock(const std::string& lockid, const PruneLockInfo& lockinfo, const bool sync)\n {\n+    if (sync) {\n+        if (!pblocktree->WritePruneLock(lockid, lockinfo)) {\n+            return error(\"%s: failed to %s prune lock '%s'\", __func__, \"write\", lockid);\n+        }\n+    }\n     g_prune_locks[lockid] = lockinfo;\n+    return true;\n }\n \n-void DeletePruneLock(const std::string& lockid)\n+bool DeletePruneLock(const std::string& lockid)\n {\n     g_prune_locks.erase(lockid);\n+    // Since there is no reasonable expectation for any follow-up to this prune lock, actually ensure it gets committed to disk immediately\n+    if (!pblocktree->DeletePruneLock(lockid)) {\n+        return error(\"%s: failed to %s prune lock '%s'\", __func__, \"erase\", lockid);\n+    }\n+    return true;\n }\n \n void BlockManager::FindFilesToPruneManual(std::set<int>& setFilesToPrune, int nManualPruneHeight, int chain_tip_height)\n@@ -3734,6 +3746,10 @@ bool BlockManager::LoadBlockIndex(\n {\n     if (!blocktree.LoadBlockIndexGuts(consensus_params, [this](const uint256& hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main) { return this->InsertBlockIndex(hash); }))\n         return false;\n+    {\n+        LOCK(g_prune_locks_mutex);\n+        if (!blocktree.LoadPruneLocks(g_prune_locks)) return false;\n+    }\n \n     // Calculate nChainWork\n     std::vector<std::pair<int, CBlockIndex*> > vSortedByHeight;"
      },
      {
        "sha": "4cb6d8c00769e8816df205cf6e9cc57958d5a3e4",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66c3ccb72097f3c5b55dedbfb3920eb26f7716bd/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66c3ccb72097f3c5b55dedbfb3920eb26f7716bd/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=66c3ccb72097f3c5b55dedbfb3920eb26f7716bd",
        "patch": "@@ -164,8 +164,8 @@ double GuessVerificationProgress(const ChainTxData& data, const CBlockIndex* pin\n extern Mutex g_prune_locks_mutex;\n extern std::unordered_map<std::string, PruneLockInfo> g_prune_locks GUARDED_BY(g_prune_locks_mutex);\n bool PruneLockExists(const std::string& lockid) SHARED_LOCKS_REQUIRED(g_prune_locks_mutex);\n-void SetPruneLock(const std::string& lockid, const PruneLockInfo&) EXCLUSIVE_LOCKS_REQUIRED(g_prune_locks_mutex);\n-void DeletePruneLock(const std::string& lockid) EXCLUSIVE_LOCKS_REQUIRED(g_prune_locks_mutex);\n+bool SetPruneLock(const std::string& lockid, const PruneLockInfo&, bool sync=false) EXCLUSIVE_LOCKS_REQUIRED(g_prune_locks_mutex);\n+bool DeletePruneLock(const std::string& lockid) EXCLUSIVE_LOCKS_REQUIRED(g_prune_locks_mutex);\n \n /** Prune block files up to a given height */\n void PruneBlockFilesManual(CChainState& active_chainstate, int nManualPruneHeight);"
      }
    ]
  },
  {
    "sha": "de154e33d8c350eea3fd853ba762cc7be0037516",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZTE1NGUzM2Q4YzM1MGVlYTNmZDg1M2JhNzYyY2M3YmUwMDM3NTE2",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-07-07T05:45:04Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2021-07-07T00:08:43Z"
      },
      "message": "Support for temporary prune locks (that don't persist across restart)",
      "tree": {
        "sha": "4eab96dedc275226f7f7c70c74e0a424e9d8ab86",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4eab96dedc275226f7f7c70c74e0a424e9d8ab86"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/de154e33d8c350eea3fd853ba762cc7be0037516",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de154e33d8c350eea3fd853ba762cc7be0037516",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/de154e33d8c350eea3fd853ba762cc7be0037516",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de154e33d8c350eea3fd853ba762cc7be0037516/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "66c3ccb72097f3c5b55dedbfb3920eb26f7716bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66c3ccb72097f3c5b55dedbfb3920eb26f7716bd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/66c3ccb72097f3c5b55dedbfb3920eb26f7716bd"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "cb7f8be1ce92165b177f82b48b0ec2bdc0f5a781",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de154e33d8c350eea3fd853ba762cc7be0037516/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de154e33d8c350eea3fd853ba762cc7be0037516/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=de154e33d8c350eea3fd853ba762cc7be0037516",
        "patch": "@@ -446,6 +446,7 @@ struct PruneLockInfo {\n     std::string m_desc;\n     uint64_t m_height_first{std::numeric_limits<uint64_t>::max()};\n     uint64_t m_height_last{std::numeric_limits<uint64_t>::max()};\n+    bool m_temporary{false};\n \n     SERIALIZE_METHODS(PruneLockInfo, obj)\n     {"
      },
      {
        "sha": "bbbc1410c7d4413fec97d534a18e1412cddcb67c",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de154e33d8c350eea3fd853ba762cc7be0037516/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de154e33d8c350eea3fd853ba762cc7be0037516/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=de154e33d8c350eea3fd853ba762cc7be0037516",
        "patch": "@@ -258,12 +258,14 @@ bool CBlockTreeDB::WriteBatchSync(const std::vector<std::pair<int, const CBlockF\n         batch.Write(std::make_pair(DB_BLOCK_INDEX, (*it)->GetBlockHash()), CDiskBlockIndex(*it));\n     }\n     for (const auto& prune_lock : prune_locks) {\n+        if (prune_lock.second.m_temporary) continue;\n         batch.Write(std::make_pair(DB_PRUNE_LOCK, prune_lock.first), prune_lock.second);\n     }\n     return WriteBatch(batch, true);\n }\n \n bool CBlockTreeDB::WritePruneLock(const std::string& name, const PruneLockInfo& lockinfo) {\n+    if (lockinfo.m_temporary) return true;\n     return Write(std::make_pair(DB_PRUNE_LOCK, name), lockinfo);\n }\n "
      },
      {
        "sha": "574d507c20e0f43838f95dacbfe09d45c1535904",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de154e33d8c350eea3fd853ba762cc7be0037516/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de154e33d8c350eea3fd853ba762cc7be0037516/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=de154e33d8c350eea3fd853ba762cc7be0037516",
        "patch": "@@ -3607,6 +3607,11 @@ bool SetPruneLock(const std::string& lockid, const PruneLockInfo& lockinfo, cons\n         if (!pblocktree->WritePruneLock(lockid, lockinfo)) {\n             return error(\"%s: failed to %s prune lock '%s'\", __func__, \"write\", lockid);\n         }\n+    } else if (lockinfo.m_temporary && g_prune_locks.count(lockid) && !g_prune_locks.at(lockid).m_temporary) {\n+        // Erase non-temporary lock from disk\n+        if (!pblocktree->DeletePruneLock(lockid)) {\n+            return error(\"%s: failed to %s prune lock '%s'\", __func__, \"erase\", lockid);\n+        }\n     }\n     g_prune_locks[lockid] = lockinfo;\n     return true;"
      }
    ]
  },
  {
    "sha": "a1009ea2206e03e870a123d640563d60803721a9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMTAwOWVhMjIwNmUwM2U4NzBhMTIzZDY0MDU2M2Q2MDgwMzcyMWE5",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-07-07T06:17:07Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2021-07-07T00:08:43Z"
      },
      "message": "Roll back tip prune locks when doing a reorg",
      "tree": {
        "sha": "a5545827891b8948bfebec8f6a67a71bbc98788e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a5545827891b8948bfebec8f6a67a71bbc98788e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a1009ea2206e03e870a123d640563d60803721a9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1009ea2206e03e870a123d640563d60803721a9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a1009ea2206e03e870a123d640563d60803721a9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1009ea2206e03e870a123d640563d60803721a9/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "de154e33d8c350eea3fd853ba762cc7be0037516",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de154e33d8c350eea3fd853ba762cc7be0037516",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/de154e33d8c350eea3fd853ba762cc7be0037516"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 11,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7e8ca5d9204c0ebca686cfb2302e3f367368621b",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1009ea2206e03e870a123d640563d60803721a9/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1009ea2206e03e870a123d640563d60803721a9/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=a1009ea2206e03e870a123d640563d60803721a9",
        "patch": "@@ -2278,6 +2278,17 @@ bool CChainState::DisconnectTip(BlockValidationState& state, DisconnectedBlockTr\n         assert(flushed);\n     }\n     LogPrint(BCLog::BENCH, \"- Disconnect block: %.2fms\\n\", (GetTimeMicros() - nStart) * MILLI);\n+\n+    {\n+        // Prune locks that began around the tip should get rolled backward so they get a chance to reorg\n+        LOCK(g_prune_locks_mutex);\n+        for (auto& prune_lock : g_prune_locks) {\n+            if (prune_lock.second.m_height_first < uint64_t(pindexDelete->nHeight) - 1) continue;\n+            --prune_lock.second.m_height_first;\n+            // NOTE: Don't need to write to db here, since it will get synced when the rest of the chainstate\n+        }\n+    }\n+\n     // Write the chain state to disk, if necessary.\n     if (!FlushStateToDisk(state, FlushStateMode::IF_NEEDED)) {\n         return false;"
      }
    ]
  },
  {
    "sha": "68daf1f7db6812b551effab40aaa0425a46242f4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OGRhZjFmN2RiNjgxMmI1NTFlZmZhYjQwYWFhMDQyNWE0NjI0MmY0",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2021-07-07T00:10:44Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2021-07-07T00:23:56Z"
      },
      "message": "RPC: blockchain: Add listprunelocks and setprunelock methods",
      "tree": {
        "sha": "fc05a41816c6bb01209af6d529eb20e56625d9a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fc05a41816c6bb01209af6d529eb20e56625d9a6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/68daf1f7db6812b551effab40aaa0425a46242f4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68daf1f7db6812b551effab40aaa0425a46242f4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/68daf1f7db6812b551effab40aaa0425a46242f4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68daf1f7db6812b551effab40aaa0425a46242f4/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a1009ea2206e03e870a123d640563d60803721a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1009ea2206e03e870a123d640563d60803721a9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a1009ea2206e03e870a123d640563d60803721a9"
      }
    ],
    "stats": {
      "total": 151,
      "additions": 151,
      "deletions": 0
    },
    "files": [
      {
        "sha": "48a7a37d8ba1f31aa9afee2b6681965427d5c716",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 150,
        "deletions": 0,
        "changes": 150,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68daf1f7db6812b551effab40aaa0425a46242f4/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68daf1f7db6812b551effab40aaa0425a46242f4/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=68daf1f7db6812b551effab40aaa0425a46242f4",
        "patch": "@@ -1022,6 +1022,154 @@ static RPCHelpMan getblock()\n     };\n }\n \n+static RPCHelpMan listprunelocks()\n+{\n+    return RPCHelpMan{\"listprunelocks\",\n+        \"\\nReturns a list of pruning locks.\\n\",\n+        {},\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                {RPCResult::Type::ARR, \"prune_locks\", \"\",\n+                {\n+                    {RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR, \"id\", \"A unique identifier for the lock\"},\n+                        {RPCResult::Type::STR, \"desc\", \"A description of the lock's purpose\"},\n+                        {RPCResult::Type::ARR_FIXED, \"height\", \"Range of blocks prevented from being pruned\",\n+                        {\n+                            {RPCResult::Type::NUM, \"height_first\", \"Height of first block that may not be pruned\"},\n+                            {RPCResult::Type::NUM, \"height_last\", \"Height of last block that may not be pruned (omitted if unbounded)\"},\n+                        }},\n+                        {RPCResult::Type::BOOL, \"temporary\", \"Indicates the lock will not remain after a restart of the node\"},\n+                    }},\n+                }},\n+            }\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"listprunelocks\", \"\")\n+          + HelpExampleRpc(\"listprunelocks\", \"\")\n+        },\n+    [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    UniValue locks_uv(UniValue::VARR);\n+    {\n+        LOCK(g_prune_locks_mutex);\n+        for (const auto& prune_lock : g_prune_locks) {\n+            UniValue prune_lock_uv(UniValue::VOBJ);\n+            const auto& lockinfo = prune_lock.second;\n+            prune_lock_uv.pushKV(\"id\", prune_lock.first);\n+            prune_lock_uv.pushKV(\"desc\", lockinfo.m_desc);\n+            UniValue heights_uv(UniValue::VARR);\n+            heights_uv.push_back(lockinfo.m_height_first);\n+            if (lockinfo.m_height_last < std::numeric_limits<uint64_t>::max()) {\n+                heights_uv.push_back(lockinfo.m_height_last);\n+            }\n+            prune_lock_uv.pushKV(\"height\", heights_uv);\n+            locks_uv.push_back(prune_lock_uv);\n+        }\n+    }\n+\n+    UniValue result(UniValue::VOBJ);\n+    result.pushKV(\"prune_locks\", locks_uv);\n+    return result;\n+},\n+    };\n+}\n+\n+static RPCHelpMan setprunelock()\n+{\n+    return RPCHelpMan{\"setprunelock\",\n+        \"\\nManipulate pruning locks.\\n\",\n+        {\n+            {\"id\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The unique id of the manipulated prune lock (or \\\"*\\\" if deleting all)\"},\n+            {\"lock_info\", RPCArg::Type::OBJ, RPCArg::Optional::NO, \"An object describing the desired lock\",\n+                {\n+                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Description of the lock\"},\n+                    {\"height\", RPCArg::Type::RANGE, RPCArg::DefaultHint(\"deletes the lock\"), \"The range of block heights to prevent pruning\"},\n+                    {\"sync\", RPCArg::Type::BOOL, RPCArg::Default(false), \"If true, success indicates the lock change was stored to disk (if non-temporary). If false, it is possible for a subsequent node crash to lose the lock.\"},\n+                    {\"temporary\", RPCArg::Type::BOOL, RPCArg::Default(false), \"If true, the lock will not persist across node restart.\"},\n+                },\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                {RPCResult::Type::BOOL, \"success\", \"Whether the change was successful\"},\n+            }},\n+        RPCExamples{\n+            HelpExampleCli(\"setprunelock\", \"\\\"test\\\" \\\"{\\\\\\\"desc\\\\\\\": \\\\\\\"Just a test\\\\\\\", \\\\\\\"height\\\\\\\": [0,100]}\\\"\")\n+          + HelpExampleCli(\"setprunelock\", \"\\\"test-2\\\" \\\"{\\\\\\\"desc\\\\\\\": \\\\\\\"Second RPC-created prunelock test\\\\\\\", \\\\\\\"height\\\\\\\": [100]}\\\"\")\n+          + HelpExampleRpc(\"setprunelock\", \"\\\"test\\\", {\\\"desc\\\": \\\"Just a test\\\", \\\"height\\\": [0,100]}\")\n+        },\n+    [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VOBJ});\n+    const auto& lockinfo_json = request.params[1];\n+    RPCTypeCheckObj(lockinfo_json,\n+        {\n+            {\"desc\", UniValueType(UniValue::VSTR)},\n+            {\"height\", UniValueType()}, // will be checked below\n+            {\"sync\", UniValueType(UniValue::VBOOL)},\n+            {\"temporary\", UniValueType(UniValue::VBOOL)},\n+        },\n+        /*allow_null=*/ true, /*strict=*/ true);\n+\n+    const auto& lockid = request.params[0].get_str();\n+\n+    PruneLockInfo lockinfo;\n+\n+    auto height_param = lockinfo_json[\"height\"];\n+    if (!height_param.isArray()) {\n+        UniValue new_height_param(UniValue::VARR);\n+        new_height_param.push_back(std::move(height_param));\n+        height_param = std::move(new_height_param);\n+    }\n+    bool success;\n+    if (height_param[0].isNull() && height_param[1].isNull()) {\n+        // Delete\n+        if (lockid == \"*\") {\n+            // Delete all\n+            success = true;\n+            std::vector<std::string> all_ids;\n+            LOCK(g_prune_locks_mutex);\n+            for (const auto& prune_lock : g_prune_locks) {\n+                all_ids.push_back(prune_lock.first);\n+            }\n+            for (auto& lockid : all_ids) {\n+                success |= DeletePruneLock(lockid);\n+            }\n+        } else {\n+            LOCK(g_prune_locks_mutex);\n+            success = PruneLockExists(lockid) && DeletePruneLock(lockid);\n+        }\n+    } else {\n+        if (lockid == \"*\") throw JSONRPCError(RPC_INVALID_PARAMETER, \"id \\\"*\\\" only makes sense when deleting\");\n+        if (!height_param[0].isNum()) throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid start height\");\n+        lockinfo.m_height_first = height_param[0].get_int64();\n+        if (!height_param[1].isNull()) {\n+            if (!height_param[1].isNum()) throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid end height\");\n+            lockinfo.m_height_last = height_param[1].get_int64();\n+        }\n+        lockinfo.m_desc = lockinfo_json[\"desc\"].get_str();\n+        if (!lockinfo_json[\"temporary\"].isNull()) {\n+            lockinfo.m_temporary = lockinfo_json[\"temporary\"].get_bool();\n+        }\n+        bool sync = false;\n+        if (!lockinfo_json[\"sync\"].isNull()) {\n+            sync = lockinfo_json[\"sync\"].get_bool();\n+        }\n+        LOCK(g_prune_locks_mutex);\n+        success = SetPruneLock(lockid, lockinfo, sync);\n+    }\n+\n+    UniValue result(UniValue::VOBJ);\n+    result.pushKV(\"success\", success);\n+    return result;\n+},\n+    };\n+}\n+\n static RPCHelpMan pruneblockchain()\n {\n     return RPCHelpMan{\"pruneblockchain\", \"\",\n@@ -2652,6 +2800,8 @@ static const CRPCCommand commands[] =\n     { \"blockchain\",         &getrawmempool,                      },\n     { \"blockchain\",         &gettxout,                           },\n     { \"blockchain\",         &gettxoutsetinfo,                    },\n+    { \"blockchain\",         &listprunelocks,                     },\n+    { \"blockchain\",         &setprunelock,                       },\n     { \"blockchain\",         &pruneblockchain,                    },\n     { \"blockchain\",         &savemempool,                        },\n     { \"blockchain\",         &verifychain,                        },"
      },
      {
        "sha": "b9795936c7073aec427e26ca92604ed248ad4554",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68daf1f7db6812b551effab40aaa0425a46242f4/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68daf1f7db6812b551effab40aaa0425a46242f4/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=68daf1f7db6812b551effab40aaa0425a46242f4",
        "patch": "@@ -146,6 +146,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"verifychain\", 1, \"nblocks\" },\n     { \"getblockstats\", 0, \"hash_or_height\" },\n     { \"getblockstats\", 1, \"stats\" },\n+    { \"setprunelock\", 1, \"lock_info\" },\n     { \"pruneblockchain\", 0, \"height\" },\n     { \"keypoolrefill\", 0, \"newsize\" },\n     { \"getrawmempool\", 0, \"verbose\" },"
      }
    ]
  },
  {
    "sha": "1ad45edbfeb0e75ec6d6126d541fa36d32ad6221",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYWQ0NWVkYmZlYjBlNzVlYzZkNjEyNmQ1NDFmYTM2ZDMyYWQ2MjIx",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-07-29T04:19:37Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2021-07-07T00:23:58Z"
      },
      "message": "QA: Test prune locks via RPC",
      "tree": {
        "sha": "f8afcd7200e20bbcb21808bc94dcfb2b5c01d7d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f8afcd7200e20bbcb21808bc94dcfb2b5c01d7d7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1ad45edbfeb0e75ec6d6126d541fa36d32ad6221",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ad45edbfeb0e75ec6d6126d541fa36d32ad6221",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1ad45edbfeb0e75ec6d6126d541fa36d32ad6221",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ad45edbfeb0e75ec6d6126d541fa36d32ad6221/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "68daf1f7db6812b551effab40aaa0425a46242f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68daf1f7db6812b551effab40aaa0425a46242f4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/68daf1f7db6812b551effab40aaa0425a46242f4"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 11,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7cc0b0da2bc9260207a206f7a92f53a52a7d4407",
        "filename": "test/functional/feature_pruning.py",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ad45edbfeb0e75ec6d6126d541fa36d32ad6221/test/functional/feature_pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ad45edbfeb0e75ec6d6126d541fa36d32ad6221/test/functional/feature_pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_pruning.py?ref=1ad45edbfeb0e75ec6d6126d541fa36d32ad6221",
        "patch": "@@ -305,6 +305,17 @@ def has_block(index):\n         node.pruneblockchain(height(0))\n         assert has_block(0), \"blk00000.dat is missing when should still be there\"\n \n+        # height=500 shouldn't prune first file if there's a prune lock\n+        node.setprunelock(\"test\", {\n+            \"desc\": \"Testing\",\n+            \"height\": [2, 2],\n+        })\n+        assert_equal(node.listprunelocks(), {'prune_locks': [{'id': 'test', 'desc': 'Testing', 'height': [2, 2]}]})\n+        prune(500)\n+        assert has_block(0), \"blk00000.dat is missing when should still be there\"\n+        node.setprunelock(\"test\", {})  # delete prune lock\n+        assert_equal(node.listprunelocks(), {'prune_locks': []})\n+\n         # height=500 should prune first file\n         prune(500)\n         assert not has_block(0), \"blk00000.dat is still there, should be pruned by now\""
      }
    ]
  }
]