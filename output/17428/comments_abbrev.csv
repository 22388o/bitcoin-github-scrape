DrahtBot,2019-11-09 23:42:26,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19869 (Better intervals between feelers by naumenkogs)\n\nIf you consider this pull request important, please also help t",https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-552147683,552147683,
laanwj,2019-11-10 11:03:57,"Don't think this should get in the way of implementing something like this, but have to note here, as it's a significant change of behavior from before: reconnecting to peers ""aggressively"", was, up to now, the reserve of spy nodes and mass-connectors and such. For normal nodes the chance of making the same outgoing connection twice was pretty low. Historically this has been one of the ways used t",https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-552184378,552184378,
gmaxwell,2019-11-13 18:11:05,"It would be really good to limit it so that an honest node won't attempt to connect twice to the same peer through this mechanism for some prudent amount of time... like two minutes.\n\nI don't think it would cause any harm to the intent of this mechanism to not bring them up as fast as possible, and it would avoid  tripping up detection of aggressive mass connectors.",https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-553531390,553531390,
sdaftuar,2019-11-14 20:49:50,"Not sure if I’m misreading this code (I haven’t tested it), but it looks like on restart we would only  attempt to connect once to each anchor, and then it gets removed from consideration.  Does that satisfy the concern about rapid reconnects?  I guess if a user rapidly restarted their node, we could see rapid connections to the same peers, but that seems pretty weird.\n\nAnyway I just skimmed t",https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-554073351,554073351,
hebasto,2019-11-21 09:56:23,"@sdaftuar \n\nThank you for your review. Your comment has been addressed.\n\nAlso, an additional safety check added to ""p2p: Integrate ReadAnchors() into CConnman()"" commit in the latest push.",https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-557008273,557008273,
laanwj,2020-01-20 20:09:17,Added 0.20 milestone as this mitigates a security issue so it would be good to have.,https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-576415049,576415049,
hebasto,2020-01-26 13:09:55,"@ariard \n\nThe only idea of this PR is to make a node to try restore outbound block-relay-only connections as they were just before node restart. It is expected that this change in node behavior mitigates restart-based eclipse attacks without significant other tradeoffs.\n\n> IMO before to go forward we need to agree on a) the scope of anchors: full-relay, block-relay, both...\n\nAnchoring ",https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-578500393,578500393,
hebasto,2020-01-26 19:37:10,"Updated d405145e8f935b454ba77e23cf7327515b85151e -> f2b4cfdc75952e61ba98eeffe26b2f86a78a45c9 ([pr17428.02](https://github.com/hebasto/bitcoin/commits/pr17428.02) -> [pr17428.03](https://github.com/hebasto/bitcoin/commits/pr17428.03), [compare](https://github.com/hebasto/bitcoin/compare/pr17428.02..pr17428.03)).\n\n@ariard @jamesob \n\nThank you for your reviews. Your comments have been address",https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-578535216,578535216,
hebasto,2020-01-26 20:38:50,Pushed a fixup. Ready for testing and (re)reviewing now.,https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-578540792,578540792,
luke-jr,2020-01-29 03:53:55,"Couldn't there be a risk here, that if one of the anchor peers is malicious and knows a DoS vulnerability, this ensures they can keep repeatedly crashing your node, even if you setup a watchdog to restart it?",https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-579580035,579580035,
hebasto,2020-01-29 20:13:06,Rebased after #16702 has been merged.,https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-579938535,579938535,
hebasto,2020-01-29 20:14:43,"@luke-jr \n> Couldn't there be a risk here, that if one of the anchor peers is malicious and knows a DoS vulnerability, this ensures they can keep repeatedly crashing your node, even if you setup a watchdog to restart it?\n\n~Could manual deletion of the `anchors.dat` file be a remedy?~ See: https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-582890916",https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-579939131,579939131,
ariard,2020-01-30 01:50:18,"@hebasto \n\nConcept ACK, reading your comment I do understand that this PR is really-scoped, so don't mind https://github.com/bitcoin/bitcoin/issues/17326#issuecomment-580033087 and https://github.com/bitcoin/bitcoin/pull/17428#discussion_r372715777 but would happily review future work to make anchors better (sorry for the noise)\n\nA note explaining the exact attack scenario mitigated near t",https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-580047275,580047275,
gmaxwell,2020-01-30 08:15:41,@luke-jr oy. uh. forget them if you uncleanly exit?,https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-580134777,580134777,
hebasto,2020-02-05 21:36:11,Rebased after #18023 has been merged.,https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-582624214,582624214,
hebasto,2020-02-06 12:49:06,"@luke-jr \n> Couldn't there be a risk here, that if one of the anchor peers is malicious and knows a DoS vulnerability, this ensures they can keep repeatedly crashing your node, even if you setup a watchdog to restart it?\n\nIf an exploitable DoS vulnerability would exist, this risk would come true, unfortunately.\nAs a DoS attack timing is unpredictable, it seems infeasible to prevent such a ",https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-582890916,582890916,
luke-jr,2020-02-06 13:33:05,">If an exploitable DoS vulnerability would exist, this risk would come true, unfortunately.\n\nThis is probably among the more common vulnerability types.\n\n(Let's go with @gmaxwell's suggestion to address it.)",https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-582907316,582907316,
hebasto,2020-02-08 13:34:08,"After a consideration of @luke-jr's concerns and @gmaxwell's suggestion, I'm going to close this PR.\n\nThe initial idea to mitigate eclipse attacks based on node restarts, included ones initiated by adversary, introduces a [new risk](https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-579580035).\n\n@gmaxwell's [suggestion](https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-580",https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-583737058,583737058,
gmaxwell,2020-02-08 14:42:02,"I think closing this is a mistake.  Not saving state across crashes in no way nullifies the advantage of preserving connections, and it's also a natural implementation-- e.g. the software will fail to write out the latest peers.dat across a crash.",https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-583742368,583742368,
hebasto,2020-02-08 14:49:44,"@gmaxwell \n> I think closing this is a mistake. Not saving state across crashes in no way nullifies the advantage of preserving connections, and it's also a natural implementation-- e.g. the software will fail to write out the latest peers.dat across a crash.\n\nReopened. Going to implement your suggestion soon.\n\nDefinitely, the OP requires an update.",https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-583743029,583743029,
naumenkogs,2020-02-24 20:35:07,Concept ACK. Looking forward to an update to this PR :),https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-590535864,590535864,
instagibbs,2020-02-25 15:58:11,"to be clear, the scope of this PR is to attempt to persist connections across *clean* restarts triggered for whatever reason?",https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-590939755,590939755,
amitiuttarwar,2020-02-25 16:55:55,"@gmaxwell \n> Not saving state across crashes in no way nullifies the advantage of preserving connections\n\nmy understanding is this PR was intended to mitigate a restart-based eclipse attack. so, if an attacker crashes a victim node, the anchors help reduce the chance of victim being eclipsed. if we change to only persisting connections on clean restarts, we lose the benefit of that scenario.",https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-590960921,590960921,
mzumsande,2020-02-25 21:16:43,"I was thinking along the same lines as Amiti and would like to understand if the DoS attack possibility mentioned above is serious enough to give up the anchors in a unclean restart, because it seems to be especially desirable to have them in this scenario: \n1. I think that the suggestion to delete anchor.dat on crashes would just change the big picture in case of a subset of DoS attacks working",https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-591073367,591073367,
ajtowns,2020-02-26 01:03:50,"> > Couldn't there be a risk here, that if one of the anchor peers is malicious and knows a DoS vulnerability, this ensures they can keep repeatedly crashing your node, even if you setup a watchdog to restart it?\n> \n> If an exploitable DoS vulnerability would exist, this risk would come true, unfortunately.\n> As a DoS attack timing is unpredictable, it seems infeasible to prevent such a risk",https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-591179774,591179774,
hebasto,2020-02-26 14:20:56,"An adversary has two distinct ways to force a victim node to restart:\n1) online activity that exploits a DoS vulnerability (i.e., a remote-crashable node)\n2) _offline_ activity: e.g., power failures, node operator's delusion via social engineering etc.\n\nThe current PR implementation works well against the latter adversary activity.\n\nRegarding the former case, I agree with @ajtowns:\n>",https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-591449881,591449881,
hebasto,2020-02-27 19:33:11,"Updated 78b2f950350688f11b544d24ec44816554c67631 -> 780107e41fe86e31392b3ef76b917e623483259f ([pr17428.06](https://github.com/hebasto/bitcoin/commits/pr17428.06) -> [pr17428.07](https://github.com/hebasto/bitcoin/commits/pr17428.07), [compare](https://github.com/hebasto/bitcoin/compare/pr17428.06..pr17428.07)):\n\n- a new ""anchors.dat"" file is created only during clean shutdown now\n\nAlso see",https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-592138078,592138078,
amitiuttarwar,2020-02-27 19:47:14,"hm, if my understanding of the code is correct, I think we also need to wipe the `anchors.dat` file on startup to prevent the malicious-anchor-connection-keeps-crashing-your-node issue. \n\nmy understanding is that currently you only (potentially) remove connections from `anchors.dat` when you next invoke `DumpAnchors()` and replace them. But I might be missing something?\n\nscenario: one of y",https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-592144553,592144553,
hebasto,2020-02-27 20:16:02,"@amitiuttarwar \n> hm, if my understanding of the code is correct, I think we also need to wipe the `anchors.dat` file on startup to prevent the malicious-anchor-connection-keeps-crashing-your-node issue.\n> \n> my understanding is that currently you only (potentially) remove connections from `anchors.dat` when you next invoke `DumpAnchors()` and replace them. But I might be missing something?",https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-592156578,592156578,
naumenkogs,2020-02-28 16:43:53,">I am still unconvinced that we shouldn’t persist anchors on crashes. I understand the risk is that a malicious anchor could exploit a DoS vulnerability (which is possibly more likely than executing an eclipse attack) and prevent the victim from being able to sync their node. I feel that if the node is DoS-attackable, it should be fixed immediately regardless. \n\nI agree with @amitiuttarwar rig",https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-592596746,592596746,
hebasto,2020-05-30 14:02:57,"From the discussions (#17326, this PR, https://bitcoincore.reviews/17428.html, https://diyhpl.us/wiki/transcripts/la-bitdevs/2020-04-16-amiti-uttarwar-attacking-bitcoin-core/) it follows that the worst case could happen in the following setup:\n1. a remote crash vulnerability is known to an adversary\n2. that adversary is a block-relay-only anchor peer of the victim node\n3. there is a watch-do",https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-636335317,636335317,
hebasto,2020-05-31 10:42:28,"Updated 780107e41fe86e31392b3ef76b917e623483259f -> dacb155eaaa1775385bc4a2d82a3e0307f68ce7d ([pr17428.07](https://github.com/hebasto/bitcoin/commits/pr17428.07) -> [pr17428.09](https://github.com/hebasto/bitcoin/commits/pr17428.09), [diff](https://github.com/hebasto/bitcoin/compare/pr17428.07..pr17428.09)):\n\n- addressed @amitiuttarwar's [comment](https://github.com/bitcoin/bitcoin/pull/17428#",https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-636453433,636453433,
hebasto,2020-05-31 11:01:44,Rebased dacb155eaaa1775385bc4a2d82a3e0307f68ce7d -> 293065610dd1822c9f8585526031b5a38996f695 ([pr17428.09](https://github.com/hebasto/bitcoin/commits/pr17428.09) -> [pr17428.10](https://github.com/hebasto/bitcoin/commits/pr17428.10)) due to the conflicts with #18088 and #18910.,https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-636455389,636455389,
hebasto,2020-06-05 06:40:16,Rebased 293065610dd1822c9f8585526031b5a38996f695 -> 1d9264e296f1a03abbfa6c30363628a85cf33ce4 ([pr17428.10](https://github.com/hebasto/bitcoin/commits/pr17428.10) -> [pr17428.11](https://github.com/hebasto/bitcoin/commits/pr17428.11)) due to the conflict with #19053.,https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-639289724,639289724,
naumenkogs,2020-07-01 11:36:16,"The implementation is very simple and fairly straightforward, which is good.\n\nAfter all discussions I also see that this version of the PR falls into the broader idea of anti-eclipse measures (many more to come).\n\nIt's true that fresh connections are often a good idea, but in this case we should achieve them by peer rotation and proactive feeler tip sync, not by relying on random restarts.",https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-652366404,652366404,
hebasto,2020-07-03 12:50:43,"Updated 1d9264e296f1a03abbfa6c30363628a85cf33ce4 -> 0a74c7c3686d4b03a27815c6107b3300954641cc ([pr17428.11](https://github.com/hebasto/bitcoin/commits/pr17428.11) -> [pr17428.13](https://github.com/hebasto/bitcoin/commits/pr17428.13), [diff](https://github.com/hebasto/bitcoin/compare/pr17428.11..pr17428.13)):\n\n- addressed the recent @naumenkogs' comments\n- small style improvements\n",https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-653533271,653533271,
pinheadmz,2020-07-03 17:17:18,"Concept ACK, just a few questions above about execution.\n\nThis was tricky to test because on regtest all nodes have the same IP and my development environment doesn't have  a synced chain. I don't think the extra 2 blocks-only nodes are connected during IBD (?)\n\nBut I hot wired bitcoind with\n\n`static const int MAX_OUTBOUND_FULL_RELAY_CONNECTIONS = 0;`\n\n...forcing my only connection",https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-653627885,653627885,
hebasto,2020-07-03 17:34:09,"Updated 0a74c7c3686d4b03a27815c6107b3300954641cc -> ceb9d212716fe1134f9ac179d46e14e4847dd8b1 ([pr17428.13](https://github.com/hebasto/bitcoin/commits/pr17428.13) -> [pr17428.14](https://github.com/hebasto/bitcoin/commits/pr17428.14), [diff](https://github.com/hebasto/bitcoin/compare/pr17428.13..pr17428.14)):\n\n- addressed @pinheadmz' [comment](https://github.com/bitcoin/bitcoin/pull/17428#discu",https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-653631684,653631684,
hebasto,2020-07-10 07:42:22,Rebased ceb9d212716fe1134f9ac179d46e14e4847dd8b1 -> 005a46dc3a4b84b045d3877ee757a162acf1f5ca ([pr17428.14](https://github.com/hebasto/bitcoin/commits/pr17428.14) -> [pr17428.15](https://github.com/hebasto/bitcoin/commits/pr17428.15)) due to the conflict with #19314.,https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-656534753,656534753,
pinheadmz,2020-07-14 15:03:49,"ACK 005a46dc3a4b84b045d3877ee757a162acf1f5ca\n<details><summary>Show Signature</summary>\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nACK 005a46dc3a4b84b045d3877ee757a162acf1f5ca\n-----BEGIN PGP SIGNATURE-----\n\niQIzBAEBCAAdFiEE5hdzzW4BBA4vG9eM5+KYS2KJyToFAl8NyM8ACgkQ5+KYS2KJ\nyToIBhAAgVTXUzjuIrkugUhWiSYy5daBqBCvWtc1CC9P9h6vY+MfdLdvA/KuBlF4\ndU8oQ7Dzz0sdTRCFvXSHDrYQSjF8",https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-658233093,658233093,
naumenkogs,2020-07-15 10:11:40,"The implementation looks correct, but I think the high-level idea requires more conceptual discussion. It's not about me, I expressed my general support above.",https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-658680276,658680276,
hebasto,2020-07-21 19:09:20,Rebased 005a46dc3a4b84b045d3877ee757a162acf1f5ca -> 9445a3411ed589d38cd4eee6714015d065f2b180 ([pr17428.15](https://github.com/hebasto/bitcoin/commits/pr17428.15) -> [pr17428.16](https://github.com/hebasto/bitcoin/commits/pr17428.16)) due to the conflicts with #19174 and #19217.,https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-662052433,662052433,
hebasto,2020-08-06 02:13:04,Rebased 9445a3411ed589d38cd4eee6714015d065f2b180 -> d1ef06a1ac45e103eae1bfa5b9162e5cae64e73b ([pr17428.16](https://github.com/hebasto/bitcoin/commits/pr17428.16) -> [pr17428.17](https://github.com/hebasto/bitcoin/commits/pr17428.17)) due to the conflict with #18991.,https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-669641451,669641451,
adamjonas,2020-08-13 14:35:24,"**Summary:**\n\nThis PR is an anti-eclipse attack measure for the scenario when an attacker exploits a victim node restart to force it to connect to new, probably adversarial, peers. Other discussion surrounding this issue can be found on [#17326](https://github.com/bitcoin/bitcoin/issues/17326). This patch helps a node attempt to restore pre-restart outbound block-relay-only connections by dump",https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-673515908,673515908,
hebasto,2020-08-21 08:14:42,Rebased d1ef06a1ac45e103eae1bfa5b9162e5cae64e73b -> d7482556c98b76e73f64d04400a703fdbb9c189f ([pr17428.17](https://github.com/hebasto/bitcoin/commits/pr17428.17) -> [pr17428.18](https://github.com/hebasto/bitcoin/commits/pr17428.18)) due to the conflicts with #19658 and #19316.,https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-678109126,678109126,
ariard,2020-08-23 18:38:32,"On the eclipses scenario mitigated, as a first step, it assumes the attacker to perform a\n_addrman takover_ thus controlling the set of futures peers that the victim node will be able to\nconnect to. This takeover may be either short-lived/long-lived or even persistent at whim of attacker,\ndepending on the theoritical addr-relay vulnerability leveraged. To effectively activate the eclipse,\n",https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-678809189,678809189,
naumenkogs,2020-08-24 08:22:28,">An attacker with connection-starvation/tx-relay capabilities could a) map your full-relay\noutbound with some conflicts b) evict those outbound from your connected peers by leveraging eviction\nc) observe you never pick new outbounds in some netgroup because this one is already occupied by\nyour anchors.\n\nIt feels to be a way too advanced threat model (especially since (c) should be really",https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-678983360,678983360,
hebasto,2020-09-07 11:06:15,"Updated d7482556c98b76e73f64d04400a703fdbb9c189f -> 4eff692eeb861018f1f44b6284891a1d0599dd88 ([pr17428.18](https://github.com/hebasto/bitcoin/commits/pr17428.18) -> [pr17428.20](https://github.com/hebasto/bitcoin/commits/pr17428.20)):\n- rebased due to the conflicts with #19704 and #19724\n- addressed @jnewbery's [comment](https://github.com/bitcoin/bitcoin/pull/17428#discussion_r482875198):\n>",https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-688252761,688252761,
hebasto,2020-09-08 20:48:18,"Updated 4eff692eeb861018f1f44b6284891a1d0599dd88 -> 922c65cfd9ea31b00fdc76514dbdd68129169467 ([pr17428.20](https://github.com/hebasto/bitcoin/commits/pr17428.20) -> [pr17428.21](https://github.com/hebasto/bitcoin/commits/pr17428.21), [diff](https://github.com/hebasto/bitcoin/compare/pr17428.20..pr17428.21)):\n- addressed @jnewbery's comments",https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-689127833,689127833,
hebasto,2020-09-10 13:57:48,"Updated 922c65cfd9ea31b00fdc76514dbdd68129169467 -> 06c96f27e70a7d397b5980497dfe615a1f57aeb4 ([pr17428.21](https://github.com/hebasto/bitcoin/commits/pr17428.21) -> [pr17428.22](https://github.com/hebasto/bitcoin/commits/pr17428.22), [diff](https://github.com/hebasto/bitcoin/compare/pr17428.21..pr17428.22?w=1)).\n\nAddressed more @jnewbery's comments:\n- https://github.com/bitcoin/bitcoin/pull/",https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-690307345,690307345,
hebasto,2020-09-12 13:24:48,"@sdaftuar \n\nThank you for reviewing.\n\n>  But if you're a node operator, being able to reset state in the event of the unforeseen in order to mitigate a problem while you implement a better fix (like upgrading your code, if a fix is available) just seems like a common sense behavior to have.\n\nA node operator could just remove `anchors.dat` file to mitigate a problem. If such behavior co",https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-691487385,691487385,
hebasto,2020-09-12 15:45:44,"Updated 06c96f27e70a7d397b5980497dfe615a1f57aeb4 -> 21d9d4e29ac09cb74afa24bed0509a928210d974 ([pr17428.22](https://github.com/hebasto/bitcoin/commits/pr17428.22) -> [pr17428.23](https://github.com/hebasto/bitcoin/commits/pr17428.23), [diff](https://github.com/hebasto/bitcoin/compare/pr17428.21..pr17428.22)).\n\nAddressed @sdaftuar's [comments](https://github.com/bitcoin/bitcoin/pull/17428#pullre",https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-691508148,691508148,
hebasto,2020-09-12 16:52:38,"Updated 21d9d4e29ac09cb74afa24bed0509a928210d974 -> be82629cc00961325182f03493d84f704b709020 ([pr17428.23](https://github.com/hebasto/bitcoin/commits/pr17428.23) -> [pr17428.24](https://github.com/hebasto/bitcoin/commits/pr17428.24), [diff](https://github.com/hebasto/bitcoin/compare/pr17428.23..pr17428.24)):\n- added `anchors.dat` to `files.md`",https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-691516166,691516166,
hebasto,2020-09-16 10:56:45,"Updated be82629cc00961325182f03493d84f704b709020 -> 24129a6b1966d71c7bd77ea029f17fb7796e2bc2 ([pr17428.24](https://github.com/hebasto/bitcoin/commits/pr17428.24) -> [pr17428.25](https://github.com/hebasto/bitcoin/commits/pr17428.25), [diff](https://github.com/hebasto/bitcoin/compare/pr17428.24..pr17428.25)):\n\n- addressed all recent @jnewbery's comments",https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-693330527,693330527,
hebasto,2020-09-16 17:39:50,"Updated 24129a6b1966d71c7bd77ea029f17fb7796e2bc2 -> 68870383c35922d3a5aad1cedd9df002568995a0 ([pr17428.25](https://github.com/hebasto/bitcoin/commits/pr17428.25) -> [pr17428.27](https://github.com/hebasto/bitcoin/commits/pr17428.27), [diff](https://github.com/hebasto/bitcoin/compare/pr17428.25..pr17428.27)):\n\n- improved the comment as [suggested](https://github.com/bitcoin/bitcoin/pull/17428#d",https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-693556607,693556607,
jnewbery,2020-09-17 09:55:16,"I've tested the following manually:\n\n- start bitcoind, leave it long enough to make block-relay-only connections, stop, manually inspect anchors.dat, restart and observe that bitcoind connects to the same block-relay-only connections :heavy_check_mark: \n- corrupt anchors.dat file and make sure that it's ignored, and other addresses are chosen for block-relay-only connections :heavy_check_mar",https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-694127259,694127259,
hebasto,2020-09-21 18:53:13,"Updated 68870383c35922d3a5aad1cedd9df002568995a0 -> 27113fc53d0537393fc6c61a8a3dea0eced7f588 ([pr17428.27](https://github.com/hebasto/bitcoin/commits/pr17428.27) -> [pr17428.28](https://github.com/hebasto/bitcoin/commits/pr17428.28), [diff](https://github.com/hebasto/bitcoin/compare/pr17428.27..pr17428.28)):\n\n- rebased due to the conflict with #19697\n\n- addressed @jnewbery's [comment](http",https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-696304329,696304329,
hebasto,2020-09-28 16:58:15,"Updated 27113fc53d0537393fc6c61a8a3dea0eced7f588 -> b397e49b0c390970713b4387e6dd254b926c70d0 ([pr17428.28](https://github.com/hebasto/bitcoin/commits/pr17428.28) -> [pr17428.30](https://github.com/hebasto/bitcoin/commits/pr17428.30), [diff](https://github.com/hebasto/bitcoin/compare/pr17428.28..pr17428.30)):\n\n- fixed bug when an anchor does not pass all checks\n\n- addressed @ariard's commen",https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-700159056,700159056,
practicalswift,2020-09-28 19:27:42,Concept ACK,https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-700234854,700234854,
hebasto,2020-10-09 09:42:49,"Updated b397e49b0c390970713b4387e6dd254b926c70d0 -> d77ae88b5e7f8d6ea817675b7e4a28f80ed5081f ([pr17428.30](https://github.com/hebasto/bitcoin/commits/pr17428.30) -> [pr17428.31](https://github.com/hebasto/bitcoin/commits/pr17428.31), [diff](https://github.com/hebasto/bitcoin/compare/pr17428.30..pr17428.31)):\n\n- addressed all of the recent @jnewbery's comments",https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-706081630,706081630,
jnewbery,2020-10-09 09:56:46,Code review ACK d77ae88b5e,https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-706088223,706088223,
hebasto,2020-10-09 11:32:07,Rebased d77ae88b5e7f8d6ea817675b7e4a28f80ed5081f -> a490d074b3491427afbd677f5fa635b910f8bb34 ([pr17428.31](https://github.com/hebasto/bitcoin/commits/pr17428.31) -> [pr17428.32](https://github.com/hebasto/bitcoin/commits/pr17428.32)) due to the conflict with #20076.,https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-706128366,706128366,
jnewbery,2020-10-09 12:21:22,code review ACK a490d074b3,https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-706148894,706148894,
laanwj,2020-10-15 18:19:41,Code review ACK a490d074b3491427afbd677f5fa635b910f8bb34,https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-709505656,709505656,
MarcoFalke,2021-01-08 09:10:41,There is a TODO to write release notes for this: https://github.com/bitcoin-core/bitcoin-devwiki/wiki/0.21.0-Release-Notes-Draft#p2p-and-network-changes ,https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-756641378,756641378,
hebasto,2021-01-08 09:21:45,"@MarcoFalke \n> There is a TODO to write release notes for this: https://github.com/bitcoin-core/bitcoin-devwiki/wiki/0.21.0-Release-Notes-Draft#p2p-and-network-changes\n\nDone.",https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-756646627,756646627,
sdaftuar,2019-11-14 20:52:30,"I think by putting this logic down here, you’re bypassing some important filtering that happens in the loop above, where we skip over some entries that addrMan gives us (for instance, the `IsReachable()‘ check).  I think the best thing would be to move this logic up to that loop (similar to the tried table collision selector) so that all those other criteria are still enforced.",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r346539871,346539871,src/net.cpp
hebasto,2019-11-21 09:53:23,Done.,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r348988284,348988284,src/net.cpp
ariard,2020-01-15 19:14:13,Why clear the whole instead of picking randomly `m_max_outbound_block_relay` among the anchors set? If one of our most recent anchors isn't reliable we should be allowed to pick up among older anchors to still of the counter-measure. ,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r367057240,367057240,src/net.cpp
ariard,2020-01-15 19:17:03,nit: isn't cleaner to avoid read() in CConnman constructor and instead do it in CConnman::Start like we do for peers.dat?,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r367058564,367058564,src/net.cpp
ariard,2020-01-15 19:48:43,"May we check here also `nOutboundFullRelay`, and so keep same connection order, i.e full-relay then block-only or is there any advantage to invert order ?",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r367073224,367073224,src/net.cpp
ariard,2020-01-15 20:05:50,"What do you think about waiting some time like 24hours or one block announcement before to qualify node as anchor? That would require at least some good behavior from it, that said and may favor too much well-reliable nodes and decay network-wide connectivity..\n\nnit: you may use scheduler for DumpAnchors like we do for DumpAddresses, that would avoid file syscalls while holding cs_main",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r367081001,367081001,src/net_processing.cpp
jamesob,2020-01-22 20:21:48,Can use [`logging/timer.h`](https://github.com/bitcoin/bitcoin/blob/master/src/logging/timer.h#L96-L101) if you care to. [(example)](https://github.com/bitcoin/bitcoin/blob/master/src/validation.cpp#L2296),https://github.com/bitcoin/bitcoin/pull/17428#discussion_r369783170,369783170,src/addrdb.cpp
jamesob,2020-01-22 20:36:26,"I like the idea of moving this onto the scheduler thread, but not a huge deal given this only happens once per blocks-only connection.",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r369789242,369789242,src/net_processing.cpp
hebasto,2020-01-26 15:46:26,~I'd prefer to initialize `m_anchors` member in constructor.~,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r371009058,371009058,src/net.cpp
hebasto,2020-01-26 15:53:38,"The worst case is assumed. If condition `m_anchors.size() > m_max_outbound_block_relay` is satisfied, we could suppose that the `anchors.dat` file is wrong or corrupted.",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r371009626,371009626,src/net.cpp
hebasto,2020-01-26 18:31:04,"The order is not inverted. The first target ""anchors"" is added, and was not present before, i.e., the new order is ""anchors"" then ""full-relay"" then ""block-relay-only"".\nIf anchors would not the first, they could be connected as other type nodes, and anchoring could not happen.",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r371020152,371020152,src/net.cpp
hebasto,2020-01-26 18:52:21,"> nit: you may use scheduler for DumpAnchors like we do for DumpAddresses, that would avoid file syscalls while holding cs_main\n\n> I like the idea of moving this onto the scheduler thread, but not a huge deal given this only happens once per blocks-only connection.\n\nAgree that using `CScheduler.scheduleFromNow()` for `DumpAnchors` is an improvement. Let's leave it for follow ups.",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r371021403,371021403,src/net_processing.cpp
hebasto,2020-01-26 19:24:53,Done in the latest push.,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r371023351,371023351,src/net.cpp
hebasto,2020-01-26 19:25:36,Thanks. Done in the latest push.,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r371023391,371023391,src/addrdb.cpp
ariard,2020-01-30 01:12:22,"No you're melting 2 different problems, tracking the anchors set and connecting to peers among this one. I don't understand why reaching the `m_max_outbound_block_relay` means we have to delete our whole repository of maybe-good anchors peers. \n\nIn the scenario you're aiming, if victim restarts and the 2 anchors peers are honest but unreliable, you're going to drop them and pick maybe new outb",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r372715777,372715777,src/net.cpp
ariard,2020-01-30 01:22:56,"But anchors nodes are block-only, so now you have block-only-as-anchors, full-relay, block-only-classics. You can still test addresses returned from `addrman` against `m_anchors` andon continue in case of equality to avoid the problem you're describing, but don't think that changes something, do we favor first-connected nodes in anyway ?",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r372718282,372718282,src/net.cpp
amitiuttarwar,2020-02-27 21:56:23,"consider introducing a new constant (eg. `m_max_anchors`) that currently matches the value of `m_max_outbound_block_relay`, so if we change the number of block-relay-only connections in the future we have to explicitly decide if we want to increase our anchor connections as well\n\n-> limiting max anchors mentioned [here](https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-554073351), pot",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r385394617,385394617,src/net.cpp
amitiuttarwar,2020-02-27 21:58:07,and pass the first `m_max_anchors` elements of `GetBlockRelayNodeAddresses` here.,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r385395410,385395410,src/net.cpp
amitiuttarwar,2020-02-27 22:00:58,"> It seems we need to re-write the anchors.dat file every time when another anchor is dropped in m_anchors.pop_back();, no?\n\nI think it would be simpler to delete the contents of the whole file once you have loaded the anchors into memory. Eg. After you read anchors here, invoke a method that wipes `anchors.dat`. \n\nThis way you can avoid adding per-anchor logic. ",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r385396664,385396664,src/net.cpp
amitiuttarwar,2020-02-27 22:19:07,"the logic implemented in this PR is minimal, and I think that makes sense for keeping it simple to reason about. \n\nwith this implementation, its possible for an attacker to poison the anchors and execute an eclipse attack, its just increases the cost of doing so. \n\nuntil we develop more robust logic around ensuring our anchors are not malicious, I don't think it makes sense to give priorit",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r385404543,385404543,src/net.cpp
fjahr,2020-03-02 22:20:11,nit: would have been nice to add a little more context information on the purpose of these anchors,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r386686000,386686000,src/addrdb.h
hebasto,2020-05-31 07:08:55,"If a node crash happens between wiping `anchors.dat` and creating a new one, the anchors data would be lost.",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r432917391,432917391,src/net.cpp
hebasto,2020-05-31 11:03:15,[Updated](https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-636453433).,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r432935166,432935166,src/addrdb.h
hebasto,2020-05-31 11:03:35,[Updated](https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-636453433).,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r432935189,432935189,src/net.cpp
naumenkogs,2020-07-01 10:24:54,This function name doesn't reflect that it's inbound-only,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r448267907,448267907,src/net.cpp
naumenkogs,2020-07-01 10:25:39,"Maybe it actually should be named ""GetCurrentAnchors""",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r448268314,448268314,src/net.cpp
naumenkogs,2020-07-01 10:27:04,"Wait, why is this done on VERACK? Even if this was discussed in the PR, a comment would help.",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r448269036,448269036,src/net_processing.cpp
naumenkogs,2020-07-01 11:36:07,"I'm a bit confused of what's going on here. I guess this is supposed to address the issue of reconnecting to the same anchor on many restarts, but it would really use some extra comments.",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r448302491,448302491,src/net_processing.cpp
hebasto,2020-07-03 12:06:34,"> Wait, why is this done on VERACK?\n\nIt is a point where we get know that an outbound connection to a block-relay-only peer has been established.\n\n> Even if this was discussed in the PR, a comment would help.\n\nWhat kind of comment do you expect to see here?",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r449549043,449549043,src/net_processing.cpp
hebasto,2020-07-03 12:17:32,"I've tried to avoid any confusion by meaningful naming variables, but failed :)\nThe node dumps:\n- anchors that are connected right now\n- anchors that were known at startup but have not tried to connect to yet\n\nThe latter set quickly gets empty after startup.",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r449553429,449553429,src/net_processing.cpp
hebasto,2020-07-03 12:25:38,"> This function name doesn't reflect that it's inbound-only\n\nYou mean ""outbound""?",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r449556623,449556623,src/net.cpp
hebasto,2020-07-03 12:52:44,"> Maybe it actually should be named ""GetCurrentAnchors""\n\n[Updated](https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-653533271).",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r449568124,449568124,src/net.cpp
hebasto,2020-07-03 12:53:10,[Updated](https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-653533271).,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r449568334,449568334,src/net_processing.cpp
pinheadmz,2020-07-03 16:07:18,"2 questions about this:\n\n1. Is there a possible race condition where `GetCurrentAnchors()` is called before the connection to the anchor node is complete? Or before the handshake is complete? Like is it possible that the test succeeds, no message is printed to the log, but then the connection still fails due to the peer not responding, etc.?\n\n2. (and maybe this answers my first question) i",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r449647325,449647325,src/net.cpp
pinheadmz,2020-07-03 16:17:58,"nit: a bit awkward, maybe `""%i block-relay-only anchors will be tried for connections.\n""` ?",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r449650363,449650363,src/net.cpp
hebasto,2020-07-03 17:23:23,"The `CConnman::OpenNetworkConnection()` call is synchronous, therefore there is no race with the following `CConnman::GetCurrentAnchors()` call, and I couldn't see a reason to modify it.",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r449665450,449665450,src/net.cpp
hebasto,2020-07-03 17:35:15,"@pinheadmz Thanks for improving my English :)\n\n[Updated](https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-653631684).",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r449667822,449667822,src/net.cpp
pinheadmz,2020-07-03 18:05:15,What do you think about (2)? Could you get what you need if `OpenNetworkConnection()` returned `true` on success? ,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r449673605,449673605,src/net.cpp
hebasto,2020-07-03 18:29:15,"`CConnman::OpenNetworkConnection()` has 5 call sites. What benefits of the `bool` return type for all callers? Unsuccessful connection is not an error.\n\nAnd it seems orthogonal to this PR :)\n",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r449678070,449678070,src/net.cpp
hebasto,2020-07-03 18:32:54,"> ... is there a better way of determining connection success than locking `cs_vNodes` and searching for the addr?\n\nThe vector being searching in is very small :)\n\n",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r449678783,449678783,src/net.cpp
pinheadmz,2020-07-03 19:01:53,"gotcha, thanks!",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r449683838,449683838,src/net.cpp
jnewbery,2020-08-04 14:44:40,Is there a reason this needs to be a `CConnMan::Options` option? Can this logic exist entirely within CConnMan?,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r465105274,465105274,src/init.cpp
amitiuttarwar,2020-08-12 20:15:18,I think after #19316 we should be able to check directly for the block-relay connection type? ,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r469514016,469514016,src/net_processing.cpp
hebasto,2020-08-21 08:15:11,[Updated](https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-678109126).,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r474508171,474508171,src/net_processing.cpp
hebasto,2020-08-21 08:17:29,"> Is there a reason this needs to be a `CConnMan::Options` option?\n\nTo be consistent with logic related to other connection limits, i.e., `MAX_OUTBOUND_FULL_RELAY_CONNECTIONS` and `MAX_BLOCK_RELAY_ONLY_CONNECTIONS`.",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r474510233,474510233,src/init.cpp
jnewbery,2020-09-03 10:28:35,"I don't think we should copy bad patterns just because they already exist in the codebase. `Options` is used to pass parameters into `CConnman`'s initialize function, but `CConnman` already has everything it needs to calculate the max block relay anchor connections (the `MAX_BLOCK_RELAY_ONLY_ANCHORS` constant is defined in net, and `m_max_outbound_block_relay` is already passed in).\n\nAdding th",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r482875198,482875198,src/init.cpp
jnewbery,2020-09-03 10:33:57,This logic shouldn't be in net_processing. It's all bound up in connection-layer logic rather than application-layer logic. There's nothing here that's specific to the `pnode` that we're in the context of in this `ProcessMessages()` call. I think it makes sense for this to be in `CConnman` rather than here.,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r482877813,482877813,src/net_processing.cpp
hebasto,2020-09-07 11:06:39,[Updated](https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-688252761).,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r484362401,484362401,src/init.cpp
hebasto,2020-09-07 11:06:54,Thanks! [Updated](https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-688252761).,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r484362525,484362525,src/net_processing.cpp
jnewbery,2020-09-08 16:36:06,"Do we need to store this? Seems straightforward enough to call `GetDataDir() / ""anchors.dat""` in the two places we need it (and add a constant for `""anchors.dat""`)",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r485053828,485053828,src/net.h
jnewbery,2020-09-08 16:36:56,Why not just limit the anchors in this case rather than throwing them all away (ie `m_anchors.resize(static_cast<size_t>(MAX_BLOCK_RELAY_ONLY_ANCHORS))`,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r485054314,485054314,src/net.cpp
jnewbery,2020-09-08 16:38:55,"I don't understand this logic. If `max_anchor_num` is 2 and added nodes is 1, then we'll add 1 anchor, but if `max_anchor_num` is 2 and added nodes is 3, we'll add both anchors. Is that intentional?",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r485055446,485055446,src/net.cpp
jnewbery,2020-09-08 16:48:47,"If this block scope should be indented. Even better, just use the `WITH_LOCK` macro to limit the locking to a single statement:\n\n`WITH_LOCK(cs_main, State(pfrom.GetId())->fCurrentlyConnected = true);`",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r485061161,485061161,src/net_processing.cpp
jnewbery,2020-09-08 16:49:41,"style: could do this on one line if you prefer:\n\n`if (pfrom.IsBlockOnlyConn()) m_connman.DumpAnchors();`\n\nI think calling through to connman to dump the anchors is a much cleaner design. Thanks for doing that!",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r485061712,485061712,src/net_processing.cpp
jnewbery,2020-09-08 16:52:50,Would `GetCurrentBlockRelayOnlyConns()` be a more accurate name here?,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r485063471,485063471,src/net.cpp
jnewbery,2020-09-08 16:54:58,Would it be better just to put the loop counting into a for statement? (perhaps in a different PR),https://github.com/bitcoin/bitcoin/pull/17428#discussion_r485064613,485064613,src/net.cpp
jnewbery,2020-09-08 16:57:17,Why are these specialized logs required? Wouldn't it be better to do generic logging for all connection types?,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r485066012,485066012,src/net.cpp
jnewbery,2020-09-08 16:59:17,What happens in the logic below if we pick an anchor connection that isn't in our addrman? (ie what happens at the `if (!fFeeler && !HasAllDesirableServiceFlags(addr.nServices))` line below)?,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r485067137,485067137,src/net.cpp
jnewbery,2020-09-08 18:13:55,slight wording clarification: s/have not tried for connections yet/we have not yet tried to connect to/,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r485107997,485107997,src/net.cpp
hebasto,2020-09-08 18:17:35,"I do not trust `anchors.dat` that appears greater than it should be.\n\nAlso: https://github.com/bitcoin/bitcoin/pull/17428#discussion_r367057240",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r485109968,485109968,src/net.cpp
hebasto,2020-09-08 18:20:26,"`m_connman.DumpAnchors();` is not a trivial expression, insofar I'd prefer to place it on its own line for better debugging.",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r485111515,485111515,src/net_processing.cpp
hebasto,2020-09-08 18:22:26,Sure! Going to rename it.,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r485112555,485112555,src/net.cpp
hebasto,2020-09-08 18:26:43,"> Why are these specialized logs required?\n\nBecause anchors are specialized connections by their nature. As a secure feature I'd keep logs as they are.",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r485114791,485114791,src/net.cpp
hebasto,2020-09-08 18:28:42,"Thanks! You know English is not my strong point :)\nGoing to fix it.",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r485115840,485115840,src/net.cpp
hebasto,2020-09-08 18:30:43,Don't calls within `LogPrintf()` require `::cs_main` lock?,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r485116992,485116992,src/net_processing.cpp
hebasto,2020-09-08 18:31:56,"Oh, I see. They don't.",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r485117572,485117572,src/net_processing.cpp
hebasto,2020-09-08 18:35:00,"This is unintentional change during the recent rebasing.\nMany thanks!",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r485119274,485119274,src/net.cpp
hebasto,2020-09-08 20:40:19,"Btw, https://github.com/bitcoin/bitcoin/pull/17428#discussion_r448268314",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r485183507,485183507,src/net.cpp
hebasto,2020-09-08 20:41:44,"Btw, https://github.com/bitcoin/bitcoin/pull/17428#discussion_r449650363",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r485184173,485184173,src/net.cpp
hebasto,2020-09-08 20:50:37,Thanks! [Updated](https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-689127833).,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r485188596,485188596,src/net.h
hebasto,2020-09-08 20:51:15,[Updated](https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-689127833).,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r485188900,485188900,src/net.cpp
hebasto,2020-09-08 20:51:47,[Updated](https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-689127833).,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r485189149,485189149,src/net_processing.cpp
hebasto,2020-09-08 20:52:14,[Updated](https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-689127833).,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r485189355,485189355,src/net.cpp
hebasto,2020-09-08 20:52:55,"> (perhaps in a different PR)\n\nYes :)\n\n",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r485189668,485189668,src/net.cpp
hebasto,2020-09-08 20:53:54,Thanks! [Reworked](https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-689127833) with a smaller diff.,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r485190161,485190161,src/net.cpp
hebasto,2020-09-08 20:54:11,[Updated](https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-689127833).,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r485190286,485190286,src/net.cpp
jnewbery,2020-09-09 10:13:24,ok,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r485499155,485499155,src/net_processing.cpp
jnewbery,2020-09-09 10:14:24,"ok, I think this whole function could be cleaned up, but this change doesn't make things too much worse, so lets save it for a different PR.",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r485499755,485499755,src/net.cpp
jnewbery,2020-09-09 10:22:38,I think we have to assume that our data directory is not compromised. Otherwise anything could happen.,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r485504053,485504053,src/net.cpp
jnewbery,2020-09-09 10:26:58,I really don't like this specialized logging for anchor connections (or the feeler connections below). All connection types are specialized in some way? Why not just log unconditionally for all connection types?,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r485506307,485506307,src/net.cpp
hebasto,2020-09-09 10:37:39,"> Why not just log unconditionally for all connection types?\n\nIt could be very noisy in logs. Anyway, touching logging for all connections seems out of this PR scope.",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r485511823,485511823,src/net.cpp
jnewbery,2020-09-09 11:42:46,"oh, I didn't realise that these are unconditional logs. I definitely think they should be in the NET category.",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r485545150,485545150,src/net.cpp
hebasto,2020-09-10 13:58:19,Thanks! [Updated](https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-690307345).,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r486365697,486365697,src/net.cpp
hebasto,2020-09-10 13:58:29,Thanks! [Updated](https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-690307345).,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r486365816,486365816,src/net.cpp
jnewbery,2020-09-10 14:21:49,How about passing `anchors` by const ref to save a copy?,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r486383918,486383918,src/addrdb.h
jnewbery,2020-09-10 14:23:27,What do you think about moving this logging into the `ReadAnchors()` function (to be consistent with the `DumpAnchors()` logging)?,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r486385166,486385166,src/net.cpp
jnewbery,2020-09-10 14:39:37,Make NET category?,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r486398022,486398022,src/net.cpp
sdaftuar,2020-09-10 14:39:48,Perhaps we should not print this message if `-connect=0` is set?,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r486398148,486398148,src/net.cpp
sdaftuar,2020-09-10 14:48:06,"I'm skeptical of this interaction between `-addnode` peers and the anchor peers we're introducing. Basically this gives users a way to footgun the protection we're trying to give with these anchors, by starting up bitcoind once with `-addnode` on the command line.\n\nGiven that using `-addnode` doesn't reduce our outbound or block-relay-only connections today, I don't think it should have any in",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r486404620,486404620,src/net.cpp
sdaftuar,2020-09-10 15:24:21,"This will have an interaction with #19858, so just wanted to flag it -- if this PR is merged before #19858, then I'd change this logic to only return the oldest N block-relay-only peers (so that if we shutdown while connected to an extra one, the extra one is ignored).",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r486432017,486432017,src/net.cpp
sdaftuar,2020-09-10 15:37:08,"We could move this whole LogPrint() up to where the anchor is selected, and get rid of the `anchor` boolean, IMO.",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r486441321,486441321,src/net.cpp
sdaftuar,2020-09-10 15:39:45,"I think we should just delete this whole `if (anchor)` block.  This kind of logging is perhaps helpful while debugging the PR, but I think an unconditional log message here is not very helpful to most users -- we should expect that it is completely normal that this might happen, and having a log message that looks concerning for normal behavior trains users to learn to ignore seemingly scary log m",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r486443236,486443236,src/net.cpp
hebasto,2020-09-12 15:46:32,Thanks! [Updated](https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-691508148).,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r487421977,487421977,src/net.cpp
hebasto,2020-09-12 15:46:44,Thanks! [Updated](https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-691508148).,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r487421985,487421985,src/net.cpp
hebasto,2020-09-12 15:47:17,[Updated](https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-691508148).,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r487422031,487422031,src/net.cpp
hebasto,2020-09-12 15:47:31,Thanks! [Updated](https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-691508148).,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r487422044,487422044,src/addrdb.h
hebasto,2020-09-12 15:47:48,Thanks! [Updated](https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-691508148).,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r487422063,487422063,src/net.cpp
hebasto,2020-09-12 15:48:38,[Updated](https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-691508148).,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r487422119,487422119,src/net.cpp
hebasto,2020-09-12 15:51:38,"After addressing https://github.com/bitcoin/bitcoin/pull/17428#discussion_r486443236, it's irrelevant now.",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r487422360,487422360,src/net.cpp
jnewbery,2020-09-16 09:07:30,Why add a runtime assert on the value of a `constexpr` which is known at compilation time? Just add a static_assert if you need to do this (but I don't think this is required at all).,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r489283478,489283478,src/net.cpp
jnewbery,2020-09-16 09:08:22,"This constant is only used internally within net.cpp, so I think it should be moved there, rather than be part of net's interface to other components.",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r489284019,489284019,src/net.h
jnewbery,2020-09-16 09:10:42,"What is the `remove_after_read` param for? It's not used in the one place this is called, so should be removed.",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r489285516,489285516,src/addrdb.h
jnewbery,2020-09-16 09:12:29,"I think it'd be good to add a doxygen comment to this new member variable. This vector stores addresses that we should attempt to make block-relay-only connections to, not connections that we'll necessarily store as anchor connections next time we shut down.",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r489286613,489286613,src/net.h
jnewbery,2020-09-16 09:14:03,Why not just make the constexpr `MAX_BLOCK_RELAY_ONLY_ANCHORS` a `size_t` rather than use this cast?,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r489287610,489287610,src/net.cpp
jnewbery,2020-09-16 09:18:41,I suggest you add a brief comment here to say that anchor connections are only dumped during clean shutdown.,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r489290793,489290793,src/net.cpp
hebasto,2020-09-16 10:57:23,Thanks. [Updated](https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-693330527).,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r489348580,489348580,src/net.cpp
hebasto,2020-09-16 10:57:37,Thanks. [Updated](https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-693330527).,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r489348695,489348695,src/net.h
hebasto,2020-09-16 10:57:58,[Updated](https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-693330527).,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r489348880,489348880,src/addrdb.h
hebasto,2020-09-16 10:58:23,Thanks! [Updated](https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-693330527).,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r489349072,489349072,src/net.h
hebasto,2020-09-16 10:58:35,[Updated](https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-693330527).,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r489349181,489349181,src/net.cpp
hebasto,2020-09-16 10:58:46,Thanks! [Updated](https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-693330527).,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r489349273,489349273,src/net.cpp
jnewbery,2020-09-16 17:12:09,"Thanks for adding this. Sorry I wasn't clearer, but I didn't mean you should add ""not connections that we'll necessarily store as anchor connections next time we shut down"" as a comment. That was me explaining to you _why_ a comment might be helpful. In general, I don't think comments should explain what the code_isn't_ doing.\n\nIf you have to touch this PR again, I'd suggest ""Addresses that we",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r489594626,489594626,src/net.h
jnewbery,2020-09-16 17:31:02,"I wonder if the call to `ReadAnchors()` should be within this if block. If `ReadAnchors()` is outside the block, then when the node is started with `-noconnect`, not only will the node not connect to the anchors, it'll also throw away the file, so that when it's restarted without `-noconnect`, it won't try to reconnect to the old anchors. Is that what we want?",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r489605389,489605389,src/net.cpp
hebasto,2020-09-16 17:33:59,"> Is that what we want?\n\nI guess not.",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r489606943,489606943,src/net.cpp
hebasto,2020-09-16 17:40:29,Thanks! [Updated](https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-693556607).,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r489610595,489610595,src/net.cpp
hebasto,2020-09-16 17:40:57,[Improved](https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-693556607).,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r489610881,489610881,src/net.h
jnewbery,2020-09-17 09:36:09,"hmm, actually this still won't work, since if we start with `-noconnect`, then on shutdown we'll still write a new `anchors.dat` file without any peer addresses.",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r490107971,490107971,src/net.cpp
ariard,2020-09-25 14:49:43,You can precise that this file is deleted after init to avoid user searching indefinitely for it while the node is operating.,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r495040920,495040920,doc/files.md
ariard,2020-09-25 14:53:15,You can precise that deleting of anchors.dat isn't accidental but intentional as it avoids renewed peering to anchors after a gross shutdown and thus potential exploitation of the anchor peer policy. ,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r495043232,495043232,src/addrdb.h
ariard,2020-09-25 14:53:47,Don't we have a coding style convention to prefix flag by `f` ? What about `fAnchorAddr` ?,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r495043537,495043537,src/net.cpp
ariard,2020-09-25 14:55:12,"nit: ""Load addresses from anchors.dat""",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r495044526,495044526,src/net.cpp
ariard,2020-09-25 14:57:25,"I think comment above ConnectionType::BLOCK_RELAY (`src/net.h L160) should be updated towards something like \n\n```\n/*\n * ""We automatically attempt to open MAX_BLOCK_RELAY_ONLY_ANCHORS using addresses from  \n * our anchors.dat. Then addresses from our AddrMan if MAX_BLOCK_RELAY_ONLY_CONNECTIONS \n * isn't reached yet\n*/\n```",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r495045898,495045898,src/net.h
ariard,2020-09-25 15:33:26,"I think the relation between connections opening order (anchors -> regular outbounds) and the enforcement of peer diversity should be underscored better. With this patchset, I believe outbound peer diversity is enforced by the fact that OUTBOUND_FULL_RELAY/BLOCK_RELAY are opened after anchors and thus those regular outbound addresses will be checked against the anchor ones. \n\nIt could be bette",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r495068537,495068537,src/net.cpp
ariard,2020-09-25 15:38:15,I think comment above isn't accurate anymore as it clearly mentions OUTBOUND_FULL_RELAY has the highest priority which isn't true after this patchset.,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r495071405,495071405,src/net.cpp
ariard,2020-09-25 15:49:20,"I also wonder if saving anchor don't introduce a slight fingerprint if a node is started on IPV4 then moved to Tor and connect to the same anchors. A spying anchor, by coupling with other infos such as best advertised tip could guess the networks mapping.\n\nI think we should stamp the anchor.dat with last network type connected on and remove then if it has changed compared to actual one.\n\nW",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r495078246,495078246,src/net.h
hebasto,2020-09-25 16:02:38,The project has long ceased to use Hungarian notation in new code :),https://github.com/bitcoin/bitcoin/pull/17428#discussion_r495086453,495086453,src/net.cpp
hebasto,2020-09-28 15:22:21,"I think it is a right way to only allow connection to an anchor of the network type, which is allowed to connect to by the current policy of the node. Good topic for a follow up.",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r496035396,496035396,src/net.h
hebasto,2020-09-28 16:58:59,Thanks! [Updated](https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-700159056).,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r496099440,496099440,doc/files.md
hebasto,2020-09-28 16:59:18,[Updated](https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-700159056).,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r496099778,496099778,src/addrdb.h
hebasto,2020-09-28 17:00:05,[Updated](https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-700159056).,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r496100618,496100618,src/net.cpp
hebasto,2020-09-28 17:00:34,Thanks! [Updated](https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-700159056).,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r496101123,496101123,src/net.h
hebasto,2020-09-28 17:04:45,"Thanks! [Updated](https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-700159056).\n\nKeeping the added code in its own block for the following reasons:\n- some checks in the loop require `CAddrInfo` type but `m_anchors` contains only `CAddress` instances\n- smaller diff",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r496104062,496104062,src/net.cpp
hebasto,2020-09-28 17:05:07,Thanks! [Updated](https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-700159056).,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r496104277,496104277,src/net.cpp
jnewbery,2020-10-09 08:51:13,s/a gross/an unclean/,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r502283524,502283524,src/addrdb.h
jnewbery,2020-10-09 08:51:53,/Deleting of anchors.dat/Deleting anchors.dat/,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r502283891,502283891,src/addrdb.h
jnewbery,2020-10-09 09:07:52,I think explicitly writing the type here (`std::vector<CAddress>`) is clearer here.,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r502293045,502293045,src/net.cpp
jnewbery,2020-10-09 09:08:09,s/deleted at start/deleted at startup/,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r502293205,502293205,doc/files.md
jnewbery,2020-10-09 09:17:03,"This can be private. Can you also add a short doxygen comment eg ""Return vector of current BLOCK_RELAY peers""",https://github.com/bitcoin/bitcoin/pull/17428#discussion_r502298262,502298262,src/net.h
hebasto,2020-10-09 09:43:18,Thanks. [Updated](https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-706081630).,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r502312789,502312789,src/addrdb.h
hebasto,2020-10-09 09:43:32,Thanks. [Updated](https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-706081630).,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r502312919,502312919,src/addrdb.h
hebasto,2020-10-09 09:43:50,[Updated](https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-706081630).,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r502313057,502313057,src/net.cpp
hebasto,2020-10-09 09:43:59,Thanks. [Updated](https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-706081630).,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r502313130,502313130,doc/files.md
hebasto,2020-10-09 09:44:08,Thanks. [Updated](https://github.com/bitcoin/bitcoin/pull/17428#issuecomment-706081630).,https://github.com/bitcoin/bitcoin/pull/17428#discussion_r502313198,502313198,src/net.h
