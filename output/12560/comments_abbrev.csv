jonasschnelli,2018-03-01T12:45:09Z,"I think this can be useful, though the following potential risks may be harmful in certain scenarios:\n* Missing key rotation: generating a new hd seed may imply for novice users that this protects from a compromised seed/masterkey.\n* seed option: if someone uses the optional seed parameter, it's possible that the child keys have already been used to send funds to. Eventually a rescan or a UTXO",https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-369580505,369580505,
achow101,2018-03-01T22:14:59Z,"> Missing key rotation: generating a new hd seed may imply for novice users that this protects from a compromised seed/masterkey.\n\nThe help text could be updated to indicate that only coins sent to newly generated addresses will have keys generated with the new seed.\n\n> seed option: if someone uses the optional seed parameter, it's possible that the child keys have already been used to sen",https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-369749811,369749811,
achow101,2018-03-18T19:30:51Z,Had to rebase this.,https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-374037539,374037539,
TheBlueMatt,2018-03-30T16:47:29Z,"At the risk of expanding the scope, can we fix -upgradewallet to work for HD as well here? The fact that upgradewallet will work to upgrade your wallet to HD-1 and then you have to call sethdseed to upgrade seems....strange.\nSeparately, can we either check that we're fully synced before allowing an HD master rotate or keep around old HD keys for key derivation? I'd prefer the second, but its obv",https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-377567454,377567454,
achow101,2018-03-31T18:26:58Z,"I changed `-upgradewallet` so it upgrades non-HD wallets to HD and HD chain split. I've updated the OP and title to indicate as such.\n\nUnfortunately automated tests can't be done with `-upgradewallet`.\n\n> Separately, can we either check that we're fully synced before allowing an HD master rotate \n\nThis seems incompatible with `-upgradewallet` as an upgrade method.\n\n> or keep around",https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-377713319,377713319,
TheBlueMatt,2018-04-02T13:58:32Z,"> This seems incompatible with -upgradewallet as an upgrade method.\n\nI dont care as much about it for first-upgrade (first-upgrade-to-HD is actually no different from just using your existing wallet from a backup/keypool perspective, as long as you dont flush keypool, its just a new way to generate keypool entries), but for HD master *rotation*, I think making sure we dont need any future new ",https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-377934857,377934857,
achow101,2018-04-05T19:55:22Z,"> I dont care as much about it for first-upgrade (first-upgrade-to-HD is actually no different from just using your existing wallet from a backup/keypool perspective\n\nRight, duh.\n\n***\n\nI rebased this and added a check for IBD so it won't set a new seed if we are still in IBD.",https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-379057314,379057314,
jimpo,2018-04-13T01:56:19Z,"Thinking about this a bit more, it definitely feels odd that I can't sethdseed to a past value. If I have a seed set, then change it to a new one, then want to change it back, I'm not allowed to do that. Not a big deal I guess...\n\nutACK modulo the linter error:\n```\nsrc/wallet/wallet.cpp:                LogPrintf(""Upgrading wallet to use HD chain split"");\n^---- failure generated from cont",https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-380996966,380996966,
achow101,2018-04-13T02:38:58Z,Fixed the linter I think,https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-381003820,381003820,
achow101,2018-04-17T20:12:07Z,I changed `sethdseed` to only work on HD wallets and not modify the wallet version.,https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-382126502,382126502,
sipa,2018-04-19T01:34:09Z,utACK afafc9b92dc1c501ca1ff63a5042e1925b7ac55a. I think it's fine that running with -upgradewallet defaults to NO_DEFAULT_KEY.,https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-382580887,382580887,
TheBlueMatt,2018-04-19T19:01:49Z,"One option might be splitting the existing keypool between internal and external at the time of the upgrade, though that also violates previous API guarantees. The only ""full"" fix would require the new-key-from-pool callsites to be aware of the upgrade, though I don't think that'd be a ton of code.\n\nOn April 19, 2018 6:57:17 PM UTC, Pieter Wuille <notifications@github.com> wrote:\n>sipa commente",https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-382846198,382846198,
TheBlueMatt,2018-04-19T20:06:57Z,"I don't think InitWarning is sufficient. For GUI I'd expect a pop-up asking if I'd like to continue, on bitcoind people don't read their debug.log, so unless we want to implement the ""knowledge of past upgrade"" in new key logic (which I think is probably doable), we probably need a different option :(.\n\nOn April 19, 2018 7:59:53 PM UTC, Andrew Chow <notifications@github.com> wrote:\n>achow101 co",https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-382864414,382864414,
achow101,2018-04-19T20:18:13Z,"> For GUI I'd expect a pop-up asking if I'd like to continue\n\nThere's `UIInterface.ThreadSafeQuestion` which can be used for that.\n\n> on bitcoind people don't read their debug.log\n\n`InitError`, `InitWarning`, and `ThreadSafeQuestion` all print to stderr for bitcoind. Also a recent change makes `-printtoconsole` default when using without `-daemon`.\n\n~~I suppose the case with `-daem",https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-382867483,382867483,
TheBlueMatt,2018-04-19T20:22:43Z,"If you get a chance to implement tracking upgrade and remaining-original-keypool stuff I have a feeling it'll be workable.\n\nOn April 19, 2018 8:18:22 PM UTC, Andrew Chow <notifications@github.com> wrote:\n>> For GUI I'd expect a pop-up asking if I'd like to continue\n>\n>There's `UIInterface.ThreadSafeQuestion` which can be used for that.\n>\n>> on bitcoind people don't read their debug.log\n>\n",https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-382868738,382868738,
achow101,2018-04-19T20:30:07Z,"> If you get a chance to implement tracking upgrade and remaining-original-keypool stuff I have a feeling it'll be workable.\n\nSo basically use the original keypool until it runs out, and then new keys are generated from the seed? So the callers (particularly getting change keys) will need to know whether it should use external keypool if it was upgraded but not run out yet?\n\nI assume that ",https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-382870871,382870871,
TheBlueMatt,2018-04-19T20:39:27Z,"Yes, but that doesn't need a new backup any more than using up your current keypool does. The real issue is I believe we'd need a version bump for it (and, thus, you'd need to upgrade to the new version and wouldn't be able to upgrade to HD/HD_SPLIT/NO_DEFAULT_KEY but would have to skip them and upgrade to the new version).\n\nOn April 19, 2018 8:30:18 PM UTC, Andrew Chow <notifications@github.com",https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-382873527,382873527,
achow101,2018-04-19T22:10:48Z,"I don't think that a wallet version upgrade is necessarily required.\n\nFor upgrade from non-HD to HD, it's easy to tell when you have exhausted the original keypool: the CKeyMetadata hdMsaterKeyID for each key will change from Null to the current hdMasterKeyID.\n\nNon chain split to chain split is harder. However it would be very easy if a new seed was used. I don't think there would be any a",https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-382896391,382896391,
achow101,2018-04-19T22:40:28Z,"Actually bumping the version number and having another field is easier to do and has less weirdness with `-salvagewallet` scenarios, so I'm going to to that instead.",https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-382902402,382902402,
achow101,2018-04-19T22:59:45Z,"Hmm, `-salvagewallet` isn't actually a problem because `pool` entries aren't retained. Also there's no guarantees of anything when that is used.\n\nThe question then is whether we want to generate a new seed for non-split to split upgrade or if there is some other way to detect that upgrade.",https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-382905935,382905935,
achow101,2018-04-21T07:17:10Z,"I have decided to go with this method (from the commit message):\n\n> After upgrading to HD chain split, we want to continue to use keys from the old keypool. To do this, before we generate any new keys after upgrading, we mark all of the keypool entries as being pre-chain split and move them to a separate pre chain split keypool. Keys are fetched from that keypool until it is  mptied. Only then",https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-383274066,383274066,
achow101,2018-04-26T18:12:08Z,Merge/review beg,https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-384737663,384737663,
TheBlueMatt,2018-04-27T18:30:50Z,"Thanks, I do like the pre-split keypool thing. However, I do think you need to bump the version for it - otherwise you could 1) upgrade to HD, 2) downgrade one version to 0.16 (will still open your wallet), 3) end up using keys from the new keypool without realizing it. Its not exactly a huge concern, but fixing it seems to me to be ~free, so we might as well.",https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-385056229,385056229,
achow101,2018-04-28T03:35:00Z,I bumped the wallet version number. I've also disallowed upgrades to any version between HD_SPLIT and PRE_SPLIT_KEYPOOL.,https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-385136812,385136812,
achow101,2018-05-05T05:02:14Z,"Addressed @TheBlueMatt's comments, also rebased.\n\nOh, forgot to do the things with pre_split_keypool",https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-386779691,386779691,
achow101,2018-05-05T05:17:58Z,I have added checks for whether to use `set_pre_split_keypool` in places where keypools are chosen.,https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-386780356,386780356,
achow101,2018-05-08T17:17:33Z,@TheBlueMatt I simplified the diff by removing the combination of those two if blocks. The hd upgrading code has been moved to its own if block that enters if `-upgradewallet` is actually explicitly set.,https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-387476399,387476399,
jonasschnelli,2018-05-12T10:17:07Z,"Concept ACK, will test more later.",https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-388545169,388545169,
MarcoFalke,2018-05-13T14:51:52Z,"@jonasschnelli You added this to the 15.2 milestone without the ""needs backport"" label. Was this done in mistake? I think a backport should be discussed shortly on irc",https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-388632654,388632654,
laanwj,2018-05-14T09:15:47Z,"utACK a8da482a8bc87ff26194612727d4a7b86b2fb60d\n(hope this works, the github unicorn is preventing me from going to this PR\nwhile logged in)\n",https://github.com/bitcoin/bitcoin/pull/12560#issuecomment-388750871,388750871,
instagibbs,2018-02-27T17:00:45Z,Text should also tell user that change addresses will be removed(or not),https://github.com/bitcoin/bitcoin/pull/12560#discussion_r170993749,170993749,src/wallet/rpcwallet.cpp
achow101,2018-02-27T17:39:08Z,Done. Also included some more text explaining hd chain split stuff.,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r171005721,171005721,src/wallet/rpcwallet.cpp
Empact,2018-03-01T00:48:53Z,"Nit: IMO this inline throw style makes the code less readable, and it's not used elsewhere in the file.",https://github.com/bitcoin/bitcoin/pull/12560#discussion_r171434437,171434437,src/wallet/rpcwallet.cpp
achow101,2018-03-01T22:21:13Z,Fixed this and other places that have similar inline ifs that are hard to read.,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r171712798,171712798,src/wallet/rpcwallet.cpp
promag,2018-03-16T09:39:09Z,Missing test for this error and another for `params[1].get_str()`.,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175037363,175037363,src/wallet/rpcwallet.cpp
promag,2018-03-16T09:39:48Z,Missing test for this error.,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175037492,175037492,src/wallet/rpcwallet.cpp
promag,2018-03-16T09:40:47Z,Missing test `get_bool()`.,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175037717,175037717,src/wallet/rpcwallet.cpp
promag,2018-03-16T09:41:29Z,Missing test for this error.,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175037897,175037897,src/wallet/rpcwallet.cpp
promag,2018-03-16T09:44:53Z,This always returns `true` so it's not possible to test the error raised below 🙄,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175038823,175038823,src/wallet/rpcwallet.cpp
promag,2018-03-16T09:53:50Z,Should test return value (never false). However consider returning an object as per developer notes.,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175040839,175040839,src/wallet/rpcwallet.cpp
promag,2018-03-16T09:57:03Z,Maybe should be `newkeypool`?,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175041550,175041550,src/wallet/rpcwallet.cpp
promag,2018-03-16T09:59:05Z,Return value of `NewkeyPool` ignored and nothing is logged. Maybe that's fine?,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175042040,175042040,src/wallet/rpcwallet.cpp
promag,2018-03-16T10:01:18Z,Could have a test for extra parameters. See [example](https://github.com/bitcoin/bitcoin/pull/12083/files#diff-695d736c7d2a38a42ae900546aed52f8).,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175042553,175042553,src/wallet/rpcwallet.cpp
promag,2018-03-16T10:03:24Z,"Maybe:\n```cpp\nif (request.params[1].isNull()) {\n    master_pub_key = pwallet->GenerateNewHDMasterKey();\n} else {\n```",https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175043020,175043020,src/wallet/rpcwallet.cpp
achow101,2018-03-18T05:08:46Z,Done,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175277505,175277505,src/wallet/rpcwallet.cpp
achow101,2018-03-18T05:08:50Z,Done,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175277506,175277506,src/wallet/rpcwallet.cpp
achow101,2018-03-18T05:08:56Z,Done,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175277507,175277507,src/wallet/rpcwallet.cpp
achow101,2018-03-18T05:09:00Z,Done,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175277509,175277509,src/wallet/rpcwallet.cpp
achow101,2018-03-18T05:09:07Z,Removed the if block,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175277511,175277511,src/wallet/rpcwallet.cpp
achow101,2018-03-18T05:09:16Z,Changed to `NullUniValue`,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175277515,175277515,src/wallet/rpcwallet.cpp
achow101,2018-03-18T05:09:20Z,Done,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175277516,175277516,src/wallet/rpcwallet.cpp
achow101,2018-03-18T05:09:53Z,"That's fine. It only returns false when the wallet is locked, and that is caught earlier with `EnsureWalletIsUnlocked`",https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175277527,175277527,src/wallet/rpcwallet.cpp
achow101,2018-03-18T05:09:58Z,Done,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175277529,175277529,src/wallet/rpcwallet.cpp
achow101,2018-03-18T05:10:08Z,Done,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r175277533,175277533,src/wallet/rpcwallet.cpp
instagibbs,2018-03-23T17:14:06Z,nit: also check it's not the same key(not just path),https://github.com/bitcoin/bitcoin/pull/12560#discussion_r176804789,176804789,test/functional/wallet_hd.py
instagibbs,2018-03-23T17:28:27Z,is this for invalid named arguments? Without running this I'm not sure what it's doing,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r176808906,176808906,test/functional/wallet_hd.py
instagibbs,2018-03-23T17:41:10Z,"~~I think it stands to be noted that Core software will never(?) return this value on a currently running wallet. You can get address' keys, but not the seed itself. I can easily see users getting confused and thinking that backing up some address key will save their wallet in the future.~~\n\nYou may want to leave a note here saying how this specific key can be extracted from the wallet, throug",https://github.com/bitcoin/bitcoin/pull/12560#discussion_r176812580,176812580,src/wallet/rpcwallet.cpp
jimpo,2018-03-27T17:32:14Z,"What is the reason for disallowing master keys with opposite compressedness? Unless another party knows the master xpubkey, they would not be able to tell that any child keys are related through a shared master key.",https://github.com/bitcoin/bitcoin/pull/12560#discussion_r177508595,177508595,src/wallet/rpcwallet.cpp
achow101,2018-03-28T18:00:39Z,This just tests that an error is thrown when there are too many arguments,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r177838900,177838900,test/functional/wallet_hd.py
achow101,2018-03-28T18:07:55Z,"The seed value is interpreted and saved as private key. We don't want to have a seed where we already have that seed value as a key in the wallet. The only way to check whether we have a given private key is to derive its public key, get the id of that public key, and look it up. So to ensure that we don't have the seed value already, we need to derive both compressed and uncompressed public keys,",https://github.com/bitcoin/bitcoin/pull/12560#discussion_r177841097,177841097,src/wallet/rpcwallet.cpp
achow101,2018-03-28T18:13:05Z,Done,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r177842616,177842616,test/functional/wallet_hd.py
achow101,2018-03-28T18:17:19Z,Done,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r177843919,177843919,src/wallet/rpcwallet.cpp
jimpo,2018-03-28T18:58:54Z,"What is the problem with having a seed that is the same private key with opposite compressedness? It wouldn't have an existing entry in the the wallet file because the CKeyID is different.\n\nIf there is a good reason to protect against this, it might make sense to add a `bool HaveKey(CKey& key) const` method on `CKeyStore`.",https://github.com/bitcoin/bitcoin/pull/12560#discussion_r177856375,177856375,src/wallet/rpcwallet.cpp
achow101,2018-03-31T16:33:57Z,"If we use a key that already exists in the wallet but with opposite compressedness, that key could be exportable with `dumpprivkey`. But the user would not necessarily know that the key that is exported is their seed just with opposite compressedness. I don't think that we want the seed to be exportable like that, and if we do want the seed to be exported in some way, it should be via its own RPC ",https://github.com/bitcoin/bitcoin/pull/12560#discussion_r178436100,178436100,src/wallet/rpcwallet.cpp
jimpo,2018-04-02T16:32:40Z,"OK. I'm still not convinced (I could make similar arguments about rejecting keys with the lowest bit toggled), but it doesn't really matter.\n\nI would prefer to see the lookups moved over to a `HaveKey(CKey& key)` method on KeyStore though.",https://github.com/bitcoin/bitcoin/pull/12560#discussion_r178583204,178583204,src/wallet/rpcwallet.cpp
sipa,2018-04-12T19:13:42Z,@jimpo I don't understand what HaveKey(CKey) would do. There is a 1-to-1 correspondence both ways between CKeys and CPubKeys. ,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r181192314,181192314,src/wallet/rpcwallet.cpp
jimpo,2018-04-12T20:05:59Z,"@sipa It would replicate the logic here that checks whether there is a CPubKey corresponding to either the provided CKey or the one with opposite compressedness. Basically, I don't think that this RPC function is the best place for that logic. Maybe the method would be better named `HaveKeyIgnoringCompressedness`.",https://github.com/bitcoin/bitcoin/pull/12560#discussion_r181205710,181205710,src/wallet/rpcwallet.cpp
sipa,2018-04-12T20:13:57Z,"@jimpo Ah, I see. My concern is adding extra unnecessary functions to the CKeyStore interface (which need to be implemented by all implementations, even though there's just one now). What would you think about having a *function* (not method) in keystore.h/cpp that does this, which takes a `const CKeyStore&` as argument?",https://github.com/bitcoin/bitcoin/pull/12560#discussion_r181207845,181207845,src/wallet/rpcwallet.cpp
achow101,2018-04-12T21:37:09Z,I implemented @sipa's suggestion,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r181229181,181229181,src/wallet/rpcwallet.cpp
sipa,2018-04-17T02:27:08Z,"Perhaps you wanted this `LOCK` inside the scope that follows? As is, the lock is held during the call to `SetBestChain` below.",https://github.com/bitcoin/bitcoin/pull/12560#discussion_r181937030,181937030,src/wallet/wallet.cpp
achow101,2018-04-17T17:26:06Z,"Yes, that's what I wanted to do. Fixed.",https://github.com/bitcoin/bitcoin/pull/12560#discussion_r182163050,182163050,src/wallet/wallet.cpp
TheBlueMatt,2018-04-17T18:34:13Z,Should probably not silently upgrade HD-but-not-HD_SPLIT wallets to HD_SPLIT here.,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r182183747,182183747,src/wallet/rpcwallet.cpp
TheBlueMatt,2018-04-17T19:03:24Z,"This is not sufficient to ensure old wallets continue to operate using the existing keypool. In the case of HD split, you're gonna have an empty internal keypool and will instantly refresh your keypool, resulting in all change addresses being from the new HD seed. I dont see an obvious fix, but its definitely a major issue.",https://github.com/bitcoin/bitcoin/pull/12560#discussion_r182192215,182192215,src/wallet/rpcwallet.cpp
TheBlueMatt,2018-04-17T19:05:38Z,"I dont think we should ""upgrade"" to NO_DEFAULT_KEY (unless we delete the default key, but that seems useless). Rather, we should upgrade to HD_SPLIT and then upgrade to NO_DEFAULT_KEY when we next bump FEATURE_LATEST (probably leave a comment to that effect here).",https://github.com/bitcoin/bitcoin/pull/12560#discussion_r182192873,182192873,src/wallet/wallet.h
TheBlueMatt,2018-04-17T19:08:06Z,"Same comment here, this implicitly will generate a new keypool on next internal key usage.",https://github.com/bitcoin/bitcoin/pull/12560#discussion_r182193563,182193563,src/wallet/wallet.cpp
TheBlueMatt,2018-04-17T19:09:15Z,Why is it ok to remove this if (fFirstRun) SetMinVersion(NO_DEFAULT_KEY)?,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r182193897,182193897,src/wallet/wallet.cpp
achow101,2018-04-17T19:36:11Z,This is explicitly mentioned in the help text.,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r182200932,182200932,src/wallet/rpcwallet.cpp
achow101,2018-04-17T19:37:10Z,Do you think that it would be better then to not touch the version number in `sethdseed` and leave that to `-upgradewallet`? So then `sethdseed` would only work for HD wallets and retain whatever splitness is already in the wallet.,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r182201217,182201217,src/wallet/rpcwallet.cpp
TheBlueMatt,2018-04-17T19:38:07Z,"Still probably shouldn't do it...there isnt any reason for it, is there?",https://github.com/bitcoin/bitcoin/pull/12560#discussion_r182201455,182201455,src/wallet/rpcwallet.cpp
achow101,2018-04-17T19:42:27Z,`-upgradewallet` is implicitly true (and 0) on the first run. So the wallet version will be set to `FEATURE_LATEST`which is `FEATURE_NO_DEFAULT_KEY`.,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r182202551,182202551,src/wallet/wallet.cpp
achow101,2018-04-17T19:45:07Z,"I suppose there isn't. But then if the version number is changed only for non-HD wallets to upgrade them, then theres still the same issue with keypools.",https://github.com/bitcoin/bitcoin/pull/12560#discussion_r182203285,182203285,src/wallet/rpcwallet.cpp
TheBlueMatt,2018-04-17T19:46:01Z,"I think that would solve it for sethdseed and would certainly make this easier to review (as its otherwise the first time we're doing an upgrade at runtime), though it does limit the utility a good bit. It would not, however, solve the identical issue during -upgradewallet.",https://github.com/bitcoin/bitcoin/pull/12560#discussion_r182203533,182203533,src/wallet/rpcwallet.cpp
achow101,2018-04-17T19:48:01Z,"Is that a problem though? An upgrade was explicitly asked for. Would it be better to regenerate the keypool in this instance too? Either way, both the internal and external keypools will still be generated from the same seed.",https://github.com/bitcoin/bitcoin/pull/12560#discussion_r182204055,182204055,src/wallet/wallet.cpp
achow101,2018-04-17T19:49:47Z,I don't see why not upgrade to NO_DEFAULT_KEY. FEATURE_LATEST is only used for new wallets and upgraded wallets; users should expect new and upgraded wallets to not be backwards compatible.,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r182204542,182204542,src/wallet/wallet.h
TheBlueMatt,2018-04-19T18:08:05Z,"NO_DEFAULT_KEY doesnt even have a meaning in this case, I mean you're upgrading to nVersion == NO_DEFAULT_KEY but you still have a default key? Its just needless incompatibility at that point (though, I agree, not a huge deal given the user asked for that).",https://github.com/bitcoin/bitcoin/pull/12560#discussion_r182836584,182836584,src/wallet/wallet.h
TheBlueMatt,2018-04-19T18:08:54Z,"No, this significantly changes the upgradewallet semantics, before you could upgrade and you'd still be able to use your backup in the same way based on the keypool size, now that is no longer true, which needs huge flashing warnings, at a minimum.",https://github.com/bitcoin/bitcoin/pull/12560#discussion_r182836825,182836825,src/wallet/wallet.cpp
sipa,2018-04-19T18:57:04Z,"Good point, @TheBlueMatt. I was forgetting about the distinction ""need a new backup"" and ""need new software in the future"".\n\nWhat would you suggest as an ideal solution? `-upgradewallet` by default never making a change that requires a new backup, while having another option (`-fullupgradewallet` ?) to indicate you're aware a new backup is needed?",https://github.com/bitcoin/bitcoin/pull/12560#discussion_r182850939,182850939,src/wallet/wallet.cpp
achow101,2018-04-19T19:59:43Z,What about an `InitWarning` message that appears when the keypool is regenerated that a new backup will need to be made?,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r182867406,182867406,src/wallet/wallet.cpp
TheBlueMatt,2018-04-28T04:09:07Z,"Hmm, but what if I override it? Can I start my node accidentally with upgradewallet=0 have it create a wallet and end up with a borked wallet?",https://github.com/bitcoin/bitcoin/pull/12560#discussion_r184839095,184839095,src/wallet/wallet.cpp
TheBlueMatt,2018-05-01T20:30:36Z,Is this supposed to have a comma in the string?,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r185325483,185325483,src/wallet/rpcwallet.cpp
TheBlueMatt,2018-05-01T20:33:51Z,This needs cs_wallet.,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r185326258,185326258,src/wallet/rpcwallet.cpp
TheBlueMatt,2018-05-01T20:34:56Z,key2 looks unused.,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r185326534,185326534,src/wallet/rpcwallet.cpp
TheBlueMatt,2018-05-01T20:54:28Z,"Still needs addressing, I think -upgradewallet=0 may break first-init after this patch.",https://github.com/bitcoin/bitcoin/pull/12560#discussion_r185331281,185331281,src/wallet/wallet.cpp
achow101,2018-05-05T04:46:54Z,Yes,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r186252442,186252442,src/wallet/rpcwallet.cpp
achow101,2018-05-05T05:01:31Z,Done,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r186252730,186252730,src/wallet/rpcwallet.cpp
achow101,2018-05-05T05:01:35Z,Removed,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r186252732,186252732,src/wallet/rpcwallet.cpp
achow101,2018-05-05T05:02:01Z,"I changed the if statement to `if (gArgs.GetBoolArg(""-upgradewallet"", fFirstRun) || fFirstRun)`",https://github.com/bitcoin/bitcoin/pull/12560#discussion_r186252739,186252739,src/wallet/wallet.cpp
TheBlueMatt,2018-05-07T18:29:55Z,"Grr, the whole first if block *was* dead code and is no longer, making this harder to review. I think its mostly equivalent to the old stuff, but would be really nice to get the diff cleaned up here. Can we just not merge out the two if statements?",https://github.com/bitcoin/bitcoin/pull/12560#discussion_r186507764,186507764,src/wallet/wallet.cpp
TheBlueMatt,2018-05-07T18:31:16Z,I still dont think this is right - I dont see where an fFirstRun wallet with upgradewallet=something non-0 in the bitcoin.conf will get its MinVersion set to at least FEATURE_NO_DEFAULT_KEY.,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r186508163,186508163,src/wallet/wallet.cpp
kallewoof,2018-05-09T09:41:48Z,μ-nit: unnecessary space before `\n` at end of line.,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r186987298,186987298,src/wallet/rpcwallet.cpp
kallewoof,2018-05-09T09:44:13Z,Isn't this supposed to return true or false depending on success? From L4105 above (result).,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r186987902,186987902,src/wallet/rpcwallet.cpp
kallewoof,2018-05-09T09:47:03Z,Nit: `{` on same line as `if (..)`,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r186988643,186988643,src/wallet/wallet.cpp
kallewoof,2018-05-09T09:48:34Z,"This error would scare me (since I'm juggling privkeys and it's not a very easy to understand message). Maybe be nice and do `[...]split keypool. To do this, run [XYZ] first.` or similar?",https://github.com/bitcoin/bitcoin/pull/12560#discussion_r186988979,186988979,src/wallet/wallet.cpp
kallewoof,2018-05-09T09:50:18Z,μ: Should try to avoid the type prefix camel case style in new code (`max_version`?). ,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r186989408,186989408,src/wallet/wallet.cpp
achow101,2018-05-09T16:46:47Z,Done,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r187103587,187103587,src/wallet/rpcwallet.cpp
achow101,2018-05-09T16:46:51Z,Fixed,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r187103603,187103603,src/wallet/rpcwallet.cpp
achow101,2018-05-09T16:46:55Z,Fixed,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r187103625,187103625,src/wallet/wallet.cpp
achow101,2018-05-09T16:47:18Z,I edited the error to say what to do instead.,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r187103722,187103722,src/wallet/wallet.cpp
achow101,2018-05-09T16:47:22Z,Fixed,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r187103738,187103738,src/wallet/wallet.cpp
sipa,2018-05-09T20:41:39Z,"No, not changed.",https://github.com/bitcoin/bitcoin/pull/12560#discussion_r187169789,187169789,src/wallet/rpcwallet.cpp
sipa,2018-05-09T22:53:07Z,Style nit: braces for if spanning multiple lines.,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r187198831,187198831,src/wallet/wallet.cpp
sipa,2018-05-09T22:54:58Z,@TheBlueMatt I'm confused by the history here - does this still apply?,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r187199134,187199134,src/wallet/wallet.cpp
sipa,2018-05-09T23:06:16Z,You can test for this using `!(ser_action.ForRead() && s.empty())` instead of trying/catching.,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r187200881,187200881,src/wallet/wallet.h
achow101,2018-05-10T02:25:13Z,"I don't quite understand what you mean.\n\nAlso, I would like to keep this consistent with the block above which does the same thing.",https://github.com/bitcoin/bitcoin/pull/12560#discussion_r187225596,187225596,src/wallet/wallet.h
achow101,2018-05-10T02:26:11Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r187225712,187225712,src/wallet/wallet.cpp
achow101,2018-05-10T02:29:54Z,Actually I'll keep it as `NullUnivalue` and I updated the docs.,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r187226164,187226164,src/wallet/rpcwallet.cpp
kallewoof,2018-05-10T06:27:01Z,Makes sense to me.,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r187249931,187249931,src/wallet/rpcwallet.cpp
kallewoof,2018-05-10T06:29:11Z,Just leave the result section out -- e.g. like in `setlabel` (L326).,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r187250236,187250236,src/wallet/rpcwallet.cpp
jonasschnelli,2018-05-12T10:11:43Z,"Does this have performance impacts?\nWhat are the downside of not checking the non-compressed (or compressed if non-compressed)?",https://github.com/bitcoin/bitcoin/pull/12560#discussion_r187769556,187769556,src/keystore.cpp
jonasschnelli,2018-05-12T10:13:33Z,Can you elaborate why a IBD check is necessary and why the wallet-key-state is connected to IBD?,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r187769586,187769586,src/wallet/rpcwallet.cpp
jonasschnelli,2018-05-12T10:16:44Z,I think sipa meant to check during read if there are more bytes in the stream because this changed only appends data at the end.,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r187769639,187769639,src/wallet/wallet.h
achow101,2018-05-12T17:12:15Z,"From Matt's earlier comments:\n\n> Separately, can we either check that we're fully synced before allowing an HD master rotate or keep around old HD keys for key derivation? I'd prefer the second, but its obviously a ton more complicated, so just ensuring that we're at least synced first is likely sufficient to ensure people dont rotate and miss some payments.",https://github.com/bitcoin/bitcoin/pull/12560#discussion_r187777985,187777985,src/wallet/rpcwallet.cpp
achow101,2018-05-12T17:13:33Z,"I don't think there are performance impacts, or if there are, they are not noticeable. The reason to check for both is to avoid having a seed value which was already in the wallet before and thus could have been revealed.",https://github.com/bitcoin/bitcoin/pull/12560#discussion_r187778017,187778017,src/keystore.cpp
achow101,2018-05-12T17:15:29Z,Done,https://github.com/bitcoin/bitcoin/pull/12560#discussion_r187778057,187778057,src/wallet/rpcwallet.cpp
sipa,2018-05-12T18:36:22Z,"Indeed, what @jonasschnelli says. If it's how similar already operates we can change it later in one go, too.",https://github.com/bitcoin/bitcoin/pull/12560#discussion_r187780016,187780016,src/wallet/wallet.h
sipa,2018-05-12T20:47:59Z,"If there's a noticable performance impact (it should perhaps be 50-100 microseconds extra), we can create a function to simultaneously compute the compressed and uncompressed pubkey for a secret. Can be done later, and it's probably not necessarily.",https://github.com/bitcoin/bitcoin/pull/12560#discussion_r187782929,187782929,src/keystore.cpp
sipa,2018-05-12T20:48:58Z,Really? That's not even valid JSON :),https://github.com/bitcoin/bitcoin/pull/12560#discussion_r187782941,187782941,src/wallet/rpcwallet.cpp
sipa,2018-05-12T21:04:00Z,"@TheBlueMatt Does that matter? This is just the default for new wallets or explicit upgrades. I don't really care about gratuitous incompatibility when you're explicitly not caring about that.\n\nUPDATE: especially with the new PRE_SPLIT type added afterwards this is probably inevitable.",https://github.com/bitcoin/bitcoin/pull/12560#discussion_r187783216,187783216,src/wallet/wallet.h
achow101,2018-05-12T23:41:28Z,"Really? Looks like valid to me once the full string is constructed:\n\n`> curl --user myusername --data-binary '{""jsonrpc"": ""1.0"", ""id"":""curltest"", ""method"": ""sethdseed"", ""params"": [true, ""wifkey""] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/`",https://github.com/bitcoin/bitcoin/pull/12560#discussion_r187785610,187785610,src/wallet/rpcwallet.cpp
sipa,2018-05-13T02:58:04Z,"Oops, you're right. This is very confusing, though. Can't we make `HelpExampleRpc` take a list of UniValue arguments, and have it construct the correct JSON code for it automatically (not for this PR, obviously).",https://github.com/bitcoin/bitcoin/pull/12560#discussion_r187787802,187787802,src/wallet/rpcwallet.cpp
