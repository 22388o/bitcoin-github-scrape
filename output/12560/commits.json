[
  {
    "sha": "dd3c07acce7ab67f32a79393abf6227009bd440d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZDNjMDdhY2NlN2FiNjdmMzJhNzkzOTNhYmY2MjI3MDA5YmQ0NDBk",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-04-12T21:04:49Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-05-05T04:43:04Z"
      },
      "message": "Separate HaveKey function that checks whether a key is in a keystore",
      "tree": {
        "sha": "758ce969f58e219dc7c813f8b4229cabffd000b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/758ce969f58e219dc7c813f8b4229cabffd000b6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dd3c07acce7ab67f32a79393abf6227009bd440d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd3c07acce7ab67f32a79393abf6227009bd440d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dd3c07acce7ab67f32a79393abf6227009bd440d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd3c07acce7ab67f32a79393abf6227009bd440d/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f82e1c94821212cc8962775a7a29599ebd92eee0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f82e1c94821212cc8962775a7a29599ebd92eee0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f82e1c94821212cc8962775a7a29599ebd92eee0"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 10,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ea93ed69fa90da090a8e251dad42d5533c598280",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd3c07acce7ab67f32a79393abf6227009bd440d/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd3c07acce7ab67f32a79393abf6227009bd440d/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=dd3c07acce7ab67f32a79393abf6227009bd440d",
        "patch": "@@ -195,3 +195,10 @@ CKeyID GetKeyForDestination(const CKeyStore& store, const CTxDestination& dest)\n     }\n     return CKeyID();\n }\n+\n+bool HaveKey(const CKeyStore& store, const CKey& key)\n+{\n+    CKey key2;\n+    key2.Set(key.begin(), key.end(), !key.IsCompressed());\n+    return store.HaveKey(key.GetPubKey().GetID()) || store.HaveKey(key2.GetPubKey().GetID());\n+}"
      },
      {
        "sha": "cd5ded920382fae1f60213066b2223b076060cae",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd3c07acce7ab67f32a79393abf6227009bd440d/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd3c07acce7ab67f32a79393abf6227009bd440d/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=dd3c07acce7ab67f32a79393abf6227009bd440d",
        "patch": "@@ -80,4 +80,7 @@ typedef std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char> > > Crypt\n /** Return the CKeyID of the key involved in a script (if there is a unique one). */\n CKeyID GetKeyForDestination(const CKeyStore& store, const CTxDestination& dest);\n \n+/** Checks if a CKey is in the given CKeyStore compressed or otherwise*/\n+bool HaveKey(const CKeyStore& store, const CKey& key);\n+\n #endif // BITCOIN_KEYSTORE_H"
      }
    ]
  },
  {
    "sha": "b5ba01a18707b1d50c4d073bd40e1e92d78d04c1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNWJhMDFhMTg3MDdiMWQ1MGM0ZDA3M2JkNDBlMWU5MmQ3OGQwNGMx",
    "commit": {
      "author": {
        "name": "Chris Moore",
        "email": "dooglus@gmail.com",
        "date": "2017-09-12T21:01:12Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-05-12T17:15:21Z"
      },
      "message": "Add 'sethdseed' RPC to initialize or replace HD seed",
      "tree": {
        "sha": "a5d778bd459b76b06aaf94532590878402ccd894",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a5d778bd459b76b06aaf94532590878402ccd894"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b5ba01a18707b1d50c4d073bd40e1e92d78d04c1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5ba01a18707b1d50c4d073bd40e1e92d78d04c1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b5ba01a18707b1d50c4d073bd40e1e92d78d04c1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5ba01a18707b1d50c4d073bd40e1e92d78d04c1/comments",
    "author": {
      "login": "dooglus",
      "id": 573356,
      "node_id": "MDQ6VXNlcjU3MzM1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/573356?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dooglus",
      "html_url": "https://github.com/dooglus",
      "followers_url": "https://api.github.com/users/dooglus/followers",
      "following_url": "https://api.github.com/users/dooglus/following{/other_user}",
      "gists_url": "https://api.github.com/users/dooglus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dooglus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dooglus/subscriptions",
      "organizations_url": "https://api.github.com/users/dooglus/orgs",
      "repos_url": "https://api.github.com/users/dooglus/repos",
      "events_url": "https://api.github.com/users/dooglus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dooglus/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dd3c07acce7ab67f32a79393abf6227009bd440d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd3c07acce7ab67f32a79393abf6227009bd440d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dd3c07acce7ab67f32a79393abf6227009bd440d"
      }
    ],
    "stats": {
      "total": 80,
      "additions": 80,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4032729a84dbf624119822ce65dbd0eb97fd8fe6",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5ba01a18707b1d50c4d073bd40e1e92d78d04c1/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5ba01a18707b1d50c4d073bd40e1e92d78d04c1/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=b5ba01a18707b1d50c4d073bd40e1e92d78d04c1",
        "patch": "@@ -70,6 +70,7 @@ namespace {\n const QStringList historyFilter = QStringList()\n     << \"importprivkey\"\n     << \"importmulti\"\n+    << \"sethdseed\"\n     << \"signmessagewithprivkey\"\n     << \"signrawtransaction\"\n     << \"signrawtransactionwithkey\""
      },
      {
        "sha": "475fe1e27418d68d1adc7bbef37c9e55e5588e0b",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5ba01a18707b1d50c4d073bd40e1e92d78d04c1/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5ba01a18707b1d50c4d073bd40e1e92d78d04c1/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=b5ba01a18707b1d50c4d073bd40e1e92d78d04c1",
        "patch": "@@ -38,6 +38,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"sendtoaddress\", 5 , \"replaceable\" },\n     { \"sendtoaddress\", 6 , \"conf_target\" },\n     { \"settxfee\", 0, \"amount\" },\n+    { \"sethdseed\", 0, \"newkeypool\" },\n     { \"getreceivedbyaddress\", 1, \"minconf\" },\n     { \"getreceivedbyaccount\", 1, \"minconf\" },\n     { \"getreceivedbylabel\", 1, \"minconf\" },"
      },
      {
        "sha": "a7b2b05d9be5c55cf630b182c3841dd24e570975",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 71,
        "deletions": 0,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5ba01a18707b1d50c4d073bd40e1e92d78d04c1/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5ba01a18707b1d50c4d073bd40e1e92d78d04c1/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=b5ba01a18707b1d50c4d073bd40e1e92d78d04c1",
        "patch": "@@ -4079,6 +4079,76 @@ static UniValue listlabels(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue sethdseed(const JSONRPCRequest& request)\n+{\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            \"sethdseed ( \\\"newkeypool\\\" \\\"seed\\\" )\\n\"\n+            \"\\nSet or generate a new HD wallet seed. Non-HD wallets will not be upgraded to being a HD wallet. Wallets that are already\\n\"\n+            \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed.\\n\"\n+            \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed.\\n\"\n+            + HelpRequiringPassphrase(pwallet) +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"newkeypool\\\"         (boolean, optional, default=true) Whether to flush old unused addresses, including change addresses, from the keypool and regenerate it.\\n\"\n+            \"                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\\n\"\n+            \"                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing\\n\"\n+            \"                             keypool will be used until it has been depleted.\\n\"\n+            \"2. \\\"seed\\\"               (string, optional) The WIF private key to use as the new HD seed; if not provided a random seed will be used.\\n\"\n+            \"                             The seed value can be retrieved using the dumpwallet command. It is the private key marked hdmaster=1\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"sethdseed\", \"\")\n+            + HelpExampleCli(\"sethdseed\", \"false\")\n+            + HelpExampleCli(\"sethdseed\", \"true \\\"wifkey\\\"\")\n+            + HelpExampleRpc(\"sethdseed\", \"true, \\\"wifkey\\\"\")\n+            );\n+    }\n+\n+    if (IsInitialBlockDownload()) {\n+        throw JSONRPCError(RPC_CLIENT_IN_INITIAL_DOWNLOAD, \"Cannot set a new HD seed while still in Initial Block Download\");\n+    }\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    // Do not do anything to non-HD wallets\n+    if (!pwallet->IsHDEnabled()) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot set a HD seed on a non-HD wallet. Start with -upgradewallet in order to upgrade a non-HD wallet to HD\");\n+    }\n+\n+    EnsureWalletIsUnlocked(pwallet);\n+\n+    bool flush_key_pool = true;\n+    if (!request.params[0].isNull()) {\n+        flush_key_pool = request.params[0].get_bool();\n+    }\n+\n+    CPubKey master_pub_key;\n+    if (request.params[1].isNull()) {\n+        master_pub_key = pwallet->GenerateNewHDMasterKey();\n+    } else {\n+        CKey key = DecodeSecret(request.params[1].get_str());\n+        if (!key.IsValid()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key\");\n+        }\n+\n+        if (HaveKey(*pwallet, key)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Already have this key (either as an HD seed or as a loose private key)\");\n+        }\n+\n+        master_pub_key = pwallet->DeriveNewMasterHDKey(key);\n+    }\n+\n+    pwallet->SetHDMasterKey(master_pub_key);\n+    if (flush_key_pool) pwallet->NewKeyPool();\n+\n+    return NullUniValue;\n+}\n+\n extern UniValue abortrescan(const JSONRPCRequest& request); // in rpcdump.cpp\n extern UniValue dumpprivkey(const JSONRPCRequest& request); // in rpcdump.cpp\n extern UniValue importprivkey(const JSONRPCRequest& request);\n@@ -4139,6 +4209,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"walletpassphrase\",                 &walletpassphrase,              {\"passphrase\",\"timeout\"} },\n     { \"wallet\",             \"removeprunedfunds\",                &removeprunedfunds,             {\"txid\"} },\n     { \"wallet\",             \"rescanblockchain\",                 &rescanblockchain,              {\"start_height\", \"stop_height\"} },\n+    { \"wallet\",             \"sethdseed\",                        &sethdseed,                     {\"newkeypool\",\"seed\"} },\n \n     /** Account functions (deprecated) */\n     { \"wallet\",             \"getaccountaddress\",                &getlabeladdress,               {\"account\"} },"
      },
      {
        "sha": "3ca31ac9eb1108f418a26e6ef648ba4584238ed1",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5ba01a18707b1d50c4d073bd40e1e92d78d04c1/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5ba01a18707b1d50c4d073bd40e1e92d78d04c1/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=b5ba01a18707b1d50c4d073bd40e1e92d78d04c1",
        "patch": "@@ -1452,7 +1452,11 @@ CPubKey CWallet::GenerateNewHDMasterKey()\n {\n     CKey key;\n     key.MakeNewKey(true);\n+    return DeriveNewMasterHDKey(key);\n+}\n \n+CPubKey CWallet::DeriveNewMasterHDKey(const CKey& key)\n+{\n     int64_t nCreationTime = GetTime();\n     CKeyMetadata metadata(nCreationTime);\n "
      },
      {
        "sha": "b6cdf041a824c5a110f4a071c52e59bd2469c3dc",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5ba01a18707b1d50c4d073bd40e1e92d78d04c1/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5ba01a18707b1d50c4d073bd40e1e92d78d04c1/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=b5ba01a18707b1d50c4d073bd40e1e92d78d04c1",
        "patch": "@@ -1127,6 +1127,9 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     /* Generates a new HD master key (will not be activated) */\n     CPubKey GenerateNewHDMasterKey();\n \n+    /* Derives a new HD master key (will not be activated) */\n+    CPubKey DeriveNewMasterHDKey(const CKey& key);\n+\n     /* Set the current HD master key (will reset the chain child index counters)\n        Sets the master key's version based on the current wallet version (so the\n        caller must ensure the current wallet version is correct before calling"
      }
    ]
  },
  {
    "sha": "2bcf2b52aea07c778b439e6d6931bb4a1733304f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYmNmMmI1MmFlYTA3Yzc3OGI0MzllNmQ2OTMxYmI0YTE3MzMzMDRm",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-02-27T16:16:49Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-05-12T17:15:21Z"
      },
      "message": "Test sethdseed",
      "tree": {
        "sha": "0c18a14a5198ffc5a46264874096b7929766ee58",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0c18a14a5198ffc5a46264874096b7929766ee58"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2bcf2b52aea07c778b439e6d6931bb4a1733304f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2bcf2b52aea07c778b439e6d6931bb4a1733304f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2bcf2b52aea07c778b439e6d6931bb4a1733304f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2bcf2b52aea07c778b439e6d6931bb4a1733304f/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b5ba01a18707b1d50c4d073bd40e1e92d78d04c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5ba01a18707b1d50c4d073bd40e1e92d78d04c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b5ba01a18707b1d50c4d073bd40e1e92d78d04c1"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 35,
      "deletions": 0
    },
    "files": [
      {
        "sha": "97a945721fb3c7aec12c2edb3e62c24ecfed04f0",
        "filename": "test/functional/wallet_hd.py",
        "status": "modified",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2bcf2b52aea07c778b439e6d6931bb4a1733304f/test/functional/wallet_hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2bcf2b52aea07c778b439e6d6931bb4a1733304f/test/functional/wallet_hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_hd.py?ref=2bcf2b52aea07c778b439e6d6931bb4a1733304f",
        "patch": "@@ -11,6 +11,7 @@\n from test_framework.util import (\n     assert_equal,\n     connect_nodes_bi,\n+    assert_raises_rpc_error\n )\n \n \n@@ -120,5 +121,39 @@ def run_test(self):\n \n         assert_equal(keypath[0:7], \"m/0'/1'\")\n \n+        # Generate a new HD seed on node 1 and make sure it is set\n+        orig_masterkeyid = self.nodes[1].getwalletinfo()['hdmasterkeyid']\n+        self.nodes[1].sethdseed()\n+        new_masterkeyid = self.nodes[1].getwalletinfo()['hdmasterkeyid']\n+        assert orig_masterkeyid != new_masterkeyid\n+        addr = self.nodes[1].getnewaddress()\n+        assert_equal(self.nodes[1].getaddressinfo(addr)['hdkeypath'], 'm/0\\'/0\\'/0\\'') # Make sure the new address is the first from the keypool\n+        self.nodes[1].keypoolrefill(1) # Fill keypool with 1 key\n+\n+        # Set a new HD seed on node 1 without flushing the keypool\n+        new_seed = self.nodes[0].dumpprivkey(self.nodes[0].getnewaddress())\n+        orig_masterkeyid = new_masterkeyid\n+        self.nodes[1].sethdseed(False, new_seed)\n+        new_masterkeyid = self.nodes[1].getwalletinfo()['hdmasterkeyid']\n+        assert orig_masterkeyid != new_masterkeyid\n+        addr = self.nodes[1].getnewaddress()\n+        assert_equal(orig_masterkeyid, self.nodes[1].getaddressinfo(addr)['hdmasterkeyid'])\n+        assert_equal(self.nodes[1].getaddressinfo(addr)['hdkeypath'], 'm/0\\'/0\\'/1\\'') # Make sure the new address continues previous keypool\n+\n+        # Check that the next address is from the new seed\n+        self.nodes[1].keypoolrefill(1)\n+        next_addr = self.nodes[1].getnewaddress()\n+        assert_equal(new_masterkeyid, self.nodes[1].getaddressinfo(next_addr)['hdmasterkeyid'])\n+        assert_equal(self.nodes[1].getaddressinfo(next_addr)['hdkeypath'], 'm/0\\'/0\\'/0\\'') # Make sure the new address is not from previous keypool\n+        assert next_addr != addr\n+\n+        # Sethdseed parameter validity\n+        assert_raises_rpc_error(-1, 'sethdseed', self.nodes[0].sethdseed, False, new_seed, 0)\n+        assert_raises_rpc_error(-5, \"Invalid private key\", self.nodes[1].sethdseed, False, \"not_wif\")\n+        assert_raises_rpc_error(-1, \"JSON value is not a boolean as expected\", self.nodes[1].sethdseed, \"Not_bool\")\n+        assert_raises_rpc_error(-1, \"JSON value is not a string as expected\", self.nodes[1].sethdseed, False, True)\n+        assert_raises_rpc_error(-5, \"Already have this key\", self.nodes[1].sethdseed, False, new_seed)\n+        assert_raises_rpc_error(-5, \"Already have this key\", self.nodes[1].sethdseed, False, self.nodes[1].dumpprivkey(self.nodes[1].getnewaddress()))\n+\n if __name__ == '__main__':\n     WalletHDTest().main ()"
      }
    ]
  },
  {
    "sha": "5c50e93d52c14fc7bc41130cdb1568f2c11e45de",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YzUwZTkzZDUyYzE0ZmM3YmM0MTEzMGNkYjE1NjhmMmMxMWU0NWRl",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-03-31T17:37:27Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-05-12T17:15:21Z"
      },
      "message": "Allow -upgradewallet to upgradewallets to HD\n\nChanges the maximum upgradewallet version to the latest wallet version\nnumber, 159900. Non-HD wallets will be upgraded to use HD derivation.\nNon HD chain split wallets will be upgraded to HD chain split.\n\nIf a non-HD wallet is upgraded to HD, the keypool will be entirely\nregenerated.\n\nSince upgradewallet is effectively run during a first run, all of the\nfirst run initial setup stuff is combined with the upgrade to HD",
      "tree": {
        "sha": "5c32307828e5378ed35c8fd7be1a47120b8640af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c32307828e5378ed35c8fd7be1a47120b8640af"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5c50e93d52c14fc7bc41130cdb1568f2c11e45de",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c50e93d52c14fc7bc41130cdb1568f2c11e45de",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5c50e93d52c14fc7bc41130cdb1568f2c11e45de",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c50e93d52c14fc7bc41130cdb1568f2c11e45de/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2bcf2b52aea07c778b439e6d6931bb4a1733304f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2bcf2b52aea07c778b439e6d6931bb4a1733304f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2bcf2b52aea07c778b439e6d6931bb4a1733304f"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 31,
      "deletions": 2
    },
    "files": [
      {
        "sha": "57dc6c3b70b67d360a93b2a13f08cd09b7b97db8",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 1,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c50e93d52c14fc7bc41130cdb1568f2c11e45de/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c50e93d52c14fc7bc41130cdb1568f2c11e45de/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=5c50e93d52c14fc7bc41130cdb1568f2c11e45de",
        "patch": "@@ -4025,14 +4025,43 @@ CWallet* CWallet::CreateWalletFromFile(const std::string& name, const fs::path&\n         walletInstance->SetMaxVersion(nMaxVersion);\n     }\n \n+    // Upgrade to HD if explicit upgrade\n+    if (gArgs.GetBoolArg(\"-upgradewallet\", false)) {\n+        LOCK(walletInstance->cs_wallet);\n+        bool hd_upgrade = false;\n+        if (walletInstance->CanSupportFeature(FEATURE_HD) && !walletInstance->IsHDEnabled()) {\n+            LogPrintf(\"Upgrading wallet to HD\\n\");\n+            walletInstance->SetMinVersion(FEATURE_HD);\n+\n+            // generate a new master key\n+            CPubKey masterPubKey = walletInstance->GenerateNewHDMasterKey();\n+            if (!walletInstance->SetHDMasterKey(masterPubKey)) {\n+                throw std::runtime_error(std::string(__func__) + \": Storing master key failed\");\n+            }\n+            hd_upgrade = true;\n+        }\n+        // Upgrade to HD chain split if necessary\n+        if (walletInstance->CanSupportFeature(FEATURE_HD_SPLIT)) {\n+            LogPrintf(\"Upgrading wallet to use HD chain split\\n\");\n+            walletInstance->SetMinVersion(FEATURE_HD_SPLIT);\n+        }\n+        // Regenerate the keypool if upgraded to HD\n+        if (hd_upgrade) {\n+            if (!walletInstance->NewKeyPool()) {\n+                InitError(_(\"Unable to generate keys\") += \"\\n\");\n+                return nullptr;\n+            }\n+        }\n+    }\n+\n     if (fFirstRun)\n     {\n         // ensure this wallet.dat can only be opened by clients supporting HD with chain split and expects no default key\n         if (!gArgs.GetBoolArg(\"-usehd\", true)) {\n             InitError(strprintf(_(\"Error creating %s: You can't create non-HD wallets with this version.\"), walletFile));\n             return nullptr;\n         }\n-        walletInstance->SetMinVersion(FEATURE_NO_DEFAULT_KEY);\n+        walletInstance->SetMinVersion(FEATURE_LATEST);\n \n         // generate a new master key\n         CPubKey masterPubKey = walletInstance->GenerateNewHDMasterKey();"
      },
      {
        "sha": "215145a62bd6d5a783025256f9d4a2c81dad9caa",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c50e93d52c14fc7bc41130cdb1568f2c11e45de/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c50e93d52c14fc7bc41130cdb1568f2c11e45de/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=5c50e93d52c14fc7bc41130cdb1568f2c11e45de",
        "patch": "@@ -89,7 +89,7 @@ enum WalletFeature\n \n     FEATURE_NO_DEFAULT_KEY = 159900, // Wallet without a default key written\n \n-    FEATURE_LATEST = FEATURE_COMPRPUBKEY // HD is optional, use FEATURE_COMPRPUBKEY as latest version\n+    FEATURE_LATEST = FEATURE_NO_DEFAULT_KEY\n };\n \n enum class OutputType {"
      }
    ]
  },
  {
    "sha": "dfcd9f3e6abf3d53903227a085ff4cfecbfeb07f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZmNkOWYzZTZhYmYzZDUzOTAzMjI3YTA4NWZmNGNmZWNiZmViMDdm",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-04-21T07:10:12Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-05-12T17:15:21Z"
      },
      "message": "Use a keypool of presplit keys after upgrading to hd chain split\n\nAfter upgrading to HD chain split, we want to continue to use keys\nfrom the old keypool. To do this, before we generate any new keys after\nupgrading, we mark all of the keypool entries as being pre-chain\nsplit and move them to a separate pre chain split keypool. Keys are\nfetched from that keypool until it is emptied. Only then are the new\ninternal and external keypools used.",
      "tree": {
        "sha": "2dc6ed3933a155ee328932f820e4c1643a5eeda7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2dc6ed3933a155ee328932f820e4c1643a5eeda7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dfcd9f3e6abf3d53903227a085ff4cfecbfeb07f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dfcd9f3e6abf3d53903227a085ff4cfecbfeb07f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dfcd9f3e6abf3d53903227a085ff4cfecbfeb07f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dfcd9f3e6abf3d53903227a085ff4cfecbfeb07f/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5c50e93d52c14fc7bc41130cdb1568f2c11e45de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c50e93d52c14fc7bc41130cdb1568f2c11e45de",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5c50e93d52c14fc7bc41130cdb1568f2c11e45de"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 60,
      "deletions": 8
    },
    "files": [
      {
        "sha": "26eb7198f20b6337d1ddb1a68bea643da65adc7a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 48,
        "deletions": 8,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dfcd9f3e6abf3d53903227a085ff4cfecbfeb07f/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dfcd9f3e6abf3d53903227a085ff4cfecbfeb07f/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=dfcd9f3e6abf3d53903227a085ff4cfecbfeb07f",
        "patch": "@@ -3326,6 +3326,11 @@ bool CWallet::NewKeyPool()\n         }\n         setExternalKeyPool.clear();\n \n+        for (int64_t nIndex : set_pre_split_keypool) {\n+            batch.ErasePool(nIndex);\n+        }\n+        set_pre_split_keypool.clear();\n+\n         m_pool_key_to_index.clear();\n \n         if (!TopUpKeyPool()) {\n@@ -3339,13 +3344,15 @@ bool CWallet::NewKeyPool()\n size_t CWallet::KeypoolCountExternalKeys()\n {\n     AssertLockHeld(cs_wallet); // setExternalKeyPool\n-    return setExternalKeyPool.size();\n+    return setExternalKeyPool.size() + set_pre_split_keypool.size();\n }\n \n void CWallet::LoadKeyPool(int64_t nIndex, const CKeyPool &keypool)\n {\n     AssertLockHeld(cs_wallet);\n-    if (keypool.fInternal) {\n+    if (keypool.m_pre_split) {\n+        set_pre_split_keypool.insert(nIndex);\n+    } else if (keypool.fInternal) {\n         setInternalKeyPool.insert(nIndex);\n     } else {\n         setExternalKeyPool.insert(nIndex);\n@@ -3410,7 +3417,7 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n             m_pool_key_to_index[pubkey.GetID()] = index;\n         }\n         if (missingInternal + missingExternal > 0) {\n-            LogPrintf(\"keypool added %d keys (%d internal), size=%u (%u internal)\\n\", missingInternal + missingExternal, missingInternal, setInternalKeyPool.size() + setExternalKeyPool.size(), setInternalKeyPool.size());\n+            LogPrintf(\"keypool added %d keys (%d internal), size=%u (%u internal)\\n\", missingInternal + missingExternal, missingInternal, setInternalKeyPool.size() + setExternalKeyPool.size() + set_pre_split_keypool.size(), setInternalKeyPool.size());\n         }\n     }\n     return true;\n@@ -3427,7 +3434,7 @@ void CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRe\n             TopUpKeyPool();\n \n         bool fReturningInternal = IsHDEnabled() && CanSupportFeature(FEATURE_HD_SPLIT) && fRequestedInternal;\n-        std::set<int64_t>& setKeyPool = fReturningInternal ? setInternalKeyPool : setExternalKeyPool;\n+        std::set<int64_t>& setKeyPool = set_pre_split_keypool.empty() ? (fReturningInternal ? setInternalKeyPool : setExternalKeyPool) : set_pre_split_keypool;\n \n         // Get the oldest key\n         if(setKeyPool.empty())\n@@ -3444,7 +3451,8 @@ void CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRe\n         if (!HaveKey(keypool.vchPubKey.GetID())) {\n             throw std::runtime_error(std::string(__func__) + \": unknown key in key pool\");\n         }\n-        if (keypool.fInternal != fReturningInternal) {\n+        // If the key was pre-split keypool, we don't care about what type it is\n+        if (set_pre_split_keypool.size() == 0 && keypool.fInternal != fReturningInternal) {\n             throw std::runtime_error(std::string(__func__) + \": keypool entry misclassified\");\n         }\n \n@@ -3469,6 +3477,8 @@ void CWallet::ReturnKey(int64_t nIndex, bool fInternal, const CPubKey& pubkey)\n         LOCK(cs_wallet);\n         if (fInternal) {\n             setInternalKeyPool.insert(nIndex);\n+        } else if (!set_pre_split_keypool.empty()) {\n+            set_pre_split_keypool.insert(nIndex);\n         } else {\n             setExternalKeyPool.insert(nIndex);\n         }\n@@ -3521,6 +3531,9 @@ int64_t CWallet::GetOldestKeyPoolTime()\n     int64_t oldestKey = GetOldestKeyTimeInPool(setExternalKeyPool, batch);\n     if (IsHDEnabled() && CanSupportFeature(FEATURE_HD_SPLIT)) {\n         oldestKey = std::max(GetOldestKeyTimeInPool(setInternalKeyPool, batch), oldestKey);\n+        if (!set_pre_split_keypool.empty()) {\n+            oldestKey = std::max(GetOldestKeyTimeInPool(set_pre_split_keypool, batch), oldestKey);\n+        }\n     }\n \n     return oldestKey;\n@@ -3718,8 +3731,8 @@ void CWallet::MarkReserveKeysAsUsed(int64_t keypool_id)\n {\n     AssertLockHeld(cs_wallet);\n     bool internal = setInternalKeyPool.count(keypool_id);\n-    if (!internal) assert(setExternalKeyPool.count(keypool_id));\n-    std::set<int64_t> *setKeyPool = internal ? &setInternalKeyPool : &setExternalKeyPool;\n+    if (!internal) assert(setExternalKeyPool.count(keypool_id) || set_pre_split_keypool.count(keypool_id));\n+    std::set<int64_t> *setKeyPool = internal ? &setInternalKeyPool : (set_pre_split_keypool.empty() ? &setExternalKeyPool : &set_pre_split_keypool);\n     auto it = setKeyPool->begin();\n \n     WalletBatch batch(*database);\n@@ -3955,6 +3968,24 @@ std::vector<std::string> CWallet::GetDestValues(const std::string& prefix) const\n     return values;\n }\n \n+void CWallet::MarkPreSplitKeys()\n+{\n+    WalletBatch batch(*database);\n+    for (auto it = setExternalKeyPool.begin(); it != setExternalKeyPool.end();) {\n+        int64_t index = *it;\n+        CKeyPool keypool;\n+        if (!batch.ReadPool(index, keypool)) {\n+            throw std::runtime_error(std::string(__func__) + \": read keypool entry failed\");\n+        }\n+        keypool.m_pre_split = true;\n+        if (!batch.WritePool(index, keypool)) {\n+            throw std::runtime_error(std::string(__func__) + \": writing modified keypool entry failed\");\n+        }\n+        set_pre_split_keypool.insert(index);\n+        it = setExternalKeyPool.erase(it);\n+    }\n+}\n+\n CWallet* CWallet::CreateWalletFromFile(const std::string& name, const fs::path& path)\n {\n     const std::string& walletFile = name;\n@@ -4006,6 +4037,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string& name, const fs::path&\n         }\n     }\n \n+    int prev_version = walletInstance->nWalletVersion;\n     if (gArgs.GetBoolArg(\"-upgradewallet\", fFirstRun))\n     {\n         int nMaxVersion = gArgs.GetArg(\"-upgradewallet\", 0);\n@@ -4029,6 +4061,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string& name, const fs::path&\n     if (gArgs.GetBoolArg(\"-upgradewallet\", false)) {\n         LOCK(walletInstance->cs_wallet);\n         bool hd_upgrade = false;\n+        bool split_upgrade = false;\n         if (walletInstance->CanSupportFeature(FEATURE_HD) && !walletInstance->IsHDEnabled()) {\n             LogPrintf(\"Upgrading wallet to HD\\n\");\n             walletInstance->SetMinVersion(FEATURE_HD);\n@@ -4044,10 +4077,15 @@ CWallet* CWallet::CreateWalletFromFile(const std::string& name, const fs::path&\n         if (walletInstance->CanSupportFeature(FEATURE_HD_SPLIT)) {\n             LogPrintf(\"Upgrading wallet to use HD chain split\\n\");\n             walletInstance->SetMinVersion(FEATURE_HD_SPLIT);\n+            split_upgrade = FEATURE_HD_SPLIT > prev_version;\n+        }\n+        // Mark all keys currently in the keypool as pre-split\n+        if (split_upgrade) {\n+            walletInstance->MarkPreSplitKeys();\n         }\n         // Regenerate the keypool if upgraded to HD\n         if (hd_upgrade) {\n-            if (!walletInstance->NewKeyPool()) {\n+            if (!walletInstance->TopUpKeyPool()) {\n                 InitError(_(\"Unable to generate keys\") += \"\\n\");\n                 return nullptr;\n             }\n@@ -4275,13 +4313,15 @@ CKeyPool::CKeyPool()\n {\n     nTime = GetTime();\n     fInternal = false;\n+    m_pre_split = false;\n }\n \n CKeyPool::CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn)\n {\n     nTime = GetTime();\n     vchPubKey = vchPubKeyIn;\n     fInternal = internalIn;\n+    m_pre_split = false;\n }\n \n CWalletKey::CWalletKey(int64_t nExpires)"
      },
      {
        "sha": "d81f3ef2069a29a50c935b9facc693d198f246d9",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dfcd9f3e6abf3d53903227a085ff4cfecbfeb07f/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dfcd9f3e6abf3d53903227a085ff4cfecbfeb07f/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=dfcd9f3e6abf3d53903227a085ff4cfecbfeb07f",
        "patch": "@@ -119,6 +119,7 @@ class CKeyPool\n     int64_t nTime;\n     CPubKey vchPubKey;\n     bool fInternal; // for change outputs\n+    bool m_pre_split; // For keys generated before keypool split upgrade\n \n     CKeyPool();\n     CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn);\n@@ -141,9 +142,18 @@ class CKeyPool\n                    (this will be the case for any wallet before the HD chain split version) */\n                 fInternal = false;\n             }\n+            try {\n+                READWRITE(m_pre_split);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as postsplit address if we can't read the m_pre_split boolean\n+                   (this will be the case for any wallet that upgrades to HD chain split)*/\n+                m_pre_split = false;\n+            }\n         }\n         else {\n             READWRITE(fInternal);\n+            READWRITE(m_pre_split);\n         }\n     }\n };\n@@ -708,6 +718,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n \n     std::set<int64_t> setInternalKeyPool;\n     std::set<int64_t> setExternalKeyPool;\n+    std::set<int64_t> set_pre_split_keypool;\n     int64_t m_max_keypool_index = 0;\n     std::map<CKeyID, int64_t> m_pool_key_to_index;\n \n@@ -774,6 +785,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     const std::string& GetName() const { return m_name; }\n \n     void LoadKeyPool(int64_t nIndex, const CKeyPool &keypool);\n+    void MarkPreSplitKeys();\n \n     // Map from Key ID to key metadata.\n     std::map<CKeyID, CKeyMetadata> mapKeyMetadata;"
      }
    ]
  },
  {
    "sha": "a8da482a8bc87ff26194612727d4a7b86b2fb60d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOGRhNDgyYThiYzg3ZmYyNjE5NDYxMjcyN2Q0YTdiODZiMmZiNjBk",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-04-28T03:32:59Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-05-12T17:15:21Z"
      },
      "message": "Bump wallet version for pre split keypool\n\nBump the wallet version to indicate support for the pre split keypool.\nAlso prevents any wallets from upgrading to versions between HD_SPLIT\nand PRE_SPLIT_KEYPOOL.",
      "tree": {
        "sha": "658a9e0b5c3dcd44742507d748e749a0859ca2bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/658a9e0b5c3dcd44742507d748e749a0859ca2bd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a8da482a8bc87ff26194612727d4a7b86b2fb60d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8da482a8bc87ff26194612727d4a7b86b2fb60d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a8da482a8bc87ff26194612727d4a7b86b2fb60d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8da482a8bc87ff26194612727d4a7b86b2fb60d/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dfcd9f3e6abf3d53903227a085ff4cfecbfeb07f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dfcd9f3e6abf3d53903227a085ff4cfecbfeb07f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dfcd9f3e6abf3d53903227a085ff4cfecbfeb07f"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 12,
      "deletions": 2
    },
    "files": [
      {
        "sha": "74f79a011f3765e6511460127a8336835b1002f8",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8da482a8bc87ff26194612727d4a7b86b2fb60d/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8da482a8bc87ff26194612727d4a7b86b2fb60d/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=a8da482a8bc87ff26194612727d4a7b86b2fb60d",
        "patch": "@@ -4060,6 +4060,14 @@ CWallet* CWallet::CreateWalletFromFile(const std::string& name, const fs::path&\n     // Upgrade to HD if explicit upgrade\n     if (gArgs.GetBoolArg(\"-upgradewallet\", false)) {\n         LOCK(walletInstance->cs_wallet);\n+\n+        // Do not upgrade versions to any version between HD_SPLIT and FEATURE_PRE_SPLIT_KEYPOOL unless already supporting HD_SPLIT\n+        int max_version = walletInstance->nWalletVersion;\n+        if (!walletInstance->CanSupportFeature(FEATURE_HD_SPLIT) && max_version >=FEATURE_HD_SPLIT && max_version < FEATURE_PRE_SPLIT_KEYPOOL) {\n+            InitError(_(\"Cannot upgrade a non HD split wallet without upgrading to support pre split keypool. Please use -upgradewallet=169900 or -upgradewallet with no version specified.\"));\n+            return nullptr;\n+        }\n+\n         bool hd_upgrade = false;\n         bool split_upgrade = false;\n         if (walletInstance->CanSupportFeature(FEATURE_HD) && !walletInstance->IsHDEnabled()) {\n@@ -4076,7 +4084,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string& name, const fs::path&\n         // Upgrade to HD chain split if necessary\n         if (walletInstance->CanSupportFeature(FEATURE_HD_SPLIT)) {\n             LogPrintf(\"Upgrading wallet to use HD chain split\\n\");\n-            walletInstance->SetMinVersion(FEATURE_HD_SPLIT);\n+            walletInstance->SetMinVersion(FEATURE_PRE_SPLIT_KEYPOOL);\n             split_upgrade = FEATURE_HD_SPLIT > prev_version;\n         }\n         // Mark all keys currently in the keypool as pre-split"
      },
      {
        "sha": "233e33afec8ee8551c17fc2c9e790692346d995e",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8da482a8bc87ff26194612727d4a7b86b2fb60d/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8da482a8bc87ff26194612727d4a7b86b2fb60d/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=a8da482a8bc87ff26194612727d4a7b86b2fb60d",
        "patch": "@@ -89,7 +89,9 @@ enum WalletFeature\n \n     FEATURE_NO_DEFAULT_KEY = 159900, // Wallet without a default key written\n \n-    FEATURE_LATEST = FEATURE_NO_DEFAULT_KEY\n+    FEATURE_PRE_SPLIT_KEYPOOL = 169900, // Upgraded to HD SPLIT and can have a pre-split keypool\n+\n+    FEATURE_LATEST = FEATURE_PRE_SPLIT_KEYPOOL\n };\n \n enum class OutputType {"
      }
    ]
  }
]