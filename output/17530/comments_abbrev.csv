MarcoFalke,2019-11-20 12:42:12,@jamesob Would be nice to see IBD performance on this?,https://github.com/bitcoin/bitcoin/pull/17530#issuecomment-555987370,555987370,
practicalswift,2019-11-20 15:08:57,"Concept ACK: thanks for tackling this!\n\nWould be nice to see IBD performance numbers.\n\nVery glad to see that `float-divide-by-zero` (`-fsanitize=undefined`) and `unsigned-integer-overflow` (`-fsanitize=integer`) are the only suppressions left for `-fsanitize=integer,undefined` after the merge of this PR.\n\nWe can get rid of the `float-divide-by-zero` (`-fsanitize=undefined`) suppression",https://github.com/bitcoin/bitcoin/pull/17530#issuecomment-556044778,556044778,
DrahtBot,2019-11-20 15:12:42,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17208](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17208.html) (Make all tests pass UBSan without using any",https://github.com/bitcoin/bitcoin/pull/17530#issuecomment-556046707,556046707,
jamesob,2019-11-20 15:38:56,"> @jamesob Would be nice to see IBD performance on this?\n\nOn it!",https://github.com/bitcoin/bitcoin/pull/17530#issuecomment-556059635,556059635,
practicalswift,2019-12-03 10:22:56,@jamesob Any news on the IBD performance? It would be really nice to see if you have the time :),https://github.com/bitcoin/bitcoin/pull/17530#issuecomment-561100796,561100796,
laanwj,2019-12-03 10:33:34,"I think this is the correct thing to do no matter the performance result, but still it'd be nice to see.",https://github.com/bitcoin/bitcoin/pull/17530#issuecomment-561106020,561106020,
practicalswift,2019-12-03 10:42:04,@laanwj Agree totally. I really look forward to seeing this merged: this alignment issue creates a lot of sanitiser noise (or signal depending how you see it...) for me when doing my continuous fuzzing of Bitcoin Core :),https://github.com/bitcoin/bitcoin/pull/17530#issuecomment-561109255,561109255,
practicalswift,2019-12-06 10:31:10,ACK 5432306cbb3e06fe2c8b18a60b9767a16f018d4f -- diff looks correct,https://github.com/bitcoin/bitcoin/pull/17530#issuecomment-562520455,562520455,
practicalswift,2019-12-09 21:44:14,"People interested in getting rid of the two UBSan suppressions needed after the merge of this PR might want to review PR #17208 (""Make all tests pass UBSan without using any UBSan suppressions"") too :)",https://github.com/bitcoin/bitcoin/pull/17530#issuecomment-563453985,563453985,
laanwj,2019-12-10 04:04:41,"~~Wait, does this introduce new needed suppression?~~ Oh you mean the other, remaining ones\n\nTBH it seems that there's completely no interest in this.",https://github.com/bitcoin/bitcoin/pull/17530#issuecomment-563735031,563735031,
sipa,2019-12-10 04:43:02,What is the `sizeof(CScript)` on x86_64 before and after this change?,https://github.com/bitcoin/bitcoin/pull/17530#issuecomment-563785193,563785193,
laanwj,2019-12-10 05:06:15,"before: 32\nafter: 40",https://github.com/bitcoin/bitcoin/pull/17530#issuecomment-563815803,563815803,
laanwj,2019-12-10 05:27:35,"Couldn't fix that by reshuffling fields either, e.g. the usual suggestion of putting big fields first\n```c++\n    union direct_or_indirect {\n        char direct[sizeof(T) * N];\n        struct {\n            char* indirect;\n            size_type capacity;\n        };\n    } _union = {};\n    size_type _size = 0;\n```\nâ€¦ a `prevector<28, unsigned char>` is still 40 bytes",https://github.com/bitcoin/bitcoin/pull/17530#issuecomment-563843965,563843965,
sipa,2019-12-10 05:46:45,"See also #17060, which makes a bigger prevector layout change (avoiding the memory increase without pragma pack).",https://github.com/bitcoin/bitcoin/pull/17530#issuecomment-563869684,563869684,
laanwj,2019-12-10 05:49:47,"That PR changes the layout, but it looks like it relies just as much on `pragma pack(1)` there.\n\nsizeof(Coin) before: 48\nsizeof(Coin) after: 56\n",https://github.com/bitcoin/bitcoin/pull/17530#issuecomment-563873841,563873841,
ajtowns,2019-12-10 06:03:45,"This seems like it does the right thing to me fwiw:\n\n```diff\n--- a/src/prevector.h\n+++ b/src/prevector.h\n@@ -15,7 +15,6 @@\n #include <type_traits>\n #include <utility>\n \n-#pragma pack(push, 1)\n /** Implements a drop-in replacement for std::vector<T> which stores up to N\n  *  elements directly (without heap allocation). The types Size and Diff are\n  *  used to store element c",https://github.com/bitcoin/bitcoin/pull/17530#issuecomment-563879139,563879139,
laanwj,2019-12-10 06:16:38,Will leave this to you @ajtowns,https://github.com/bitcoin/bitcoin/pull/17530#issuecomment-563882362,563882362,
practicalswift,2019-12-10 07:27:14,@ajtowns Would you mind opening a PR with that suggested change? It would be nice to get this fixed :),https://github.com/bitcoin/bitcoin/pull/17530#issuecomment-563902872,563902872,
ajtowns,2019-12-10 08:21:18,The saga continues in #17708,https://github.com/bitcoin/bitcoin/pull/17530#issuecomment-563920357,563920357,
