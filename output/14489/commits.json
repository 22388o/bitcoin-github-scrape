[
  {
    "sha": "b00312a91d70114076b7f91ea42ae15a238aaeef",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMDAzMTJhOTFkNzAxMTQwNzZiN2Y5MWVhNDJhZTE1YTIzOGFhZWVm",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-10-30T16:01:04Z"
      },
      "committer": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-10-30T17:00:58Z"
      },
      "message": "refactor: Make CCheckQueue interruptible\n\nThis commit add a Interrupt function for CCheckQueue that it can handle interrupt by itself instead of relying on boost thread interrupt",
      "tree": {
        "sha": "d8428ff7cb6b24c2b6f32f3a6b4297e94bd948fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d8428ff7cb6b24c2b6f32f3a6b4297e94bd948fb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b00312a91d70114076b7f91ea42ae15a238aaeef",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b00312a91d70114076b7f91ea42ae15a238aaeef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b00312a91d70114076b7f91ea42ae15a238aaeef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b00312a91d70114076b7f91ea42ae15a238aaeef/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29f429dc7d4c7e6cd012e749cadf89e3138bcab3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29f429dc7d4c7e6cd012e749cadf89e3138bcab3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29f429dc7d4c7e6cd012e749cadf89e3138bcab3"
      }
    ],
    "stats": {
      "total": 154,
      "additions": 104,
      "deletions": 50
    },
    "files": [
      {
        "sha": "78d1789ab7d22353626d6120bcf77522bd433471",
        "filename": "src/bench/checkqueue.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b00312a91d70114076b7f91ea42ae15a238aaeef/src/bench/checkqueue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b00312a91d70114076b7f91ea42ae15a238aaeef/src/bench/checkqueue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/checkqueue.cpp?ref=b00312a91d70114076b7f91ea42ae15a238aaeef",
        "patch": "@@ -56,7 +56,7 @@ static void CCheckQueueSpeedPrevectorJob(benchmark::State& state)\n         // it is done explicitly here for clarity\n         control.Wait();\n     }\n-    tg.interrupt_all();\n+    queue.Interrupt();\n     tg.join_all();\n }\n BENCHMARK(CCheckQueueSpeedPrevectorJob, 1400);"
      },
      {
        "sha": "7bdf0fb22916dd43d3f09959d6fdb6fbb91dc794",
        "filename": "src/checkqueue.h",
        "status": "modified",
        "additions": 33,
        "deletions": 11,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b00312a91d70114076b7f91ea42ae15a238aaeef/src/checkqueue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b00312a91d70114076b7f91ea42ae15a238aaeef/src/checkqueue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkqueue.h?ref=b00312a91d70114076b7f91ea42ae15a238aaeef",
        "patch": "@@ -52,6 +52,9 @@ class CCheckQueue\n     //! The temporary evaluation result.\n     bool fAllOk;\n \n+    //! The interrupt flag.\n+    bool interrupted;\n+\n     /**\n      * Number of verifications that haven't completed yet.\n      * This includes elements that are no longer queued, but still in the\n@@ -65,7 +68,6 @@ class CCheckQueue\n     /** Internal function that does bulk of the verification work. */\n     bool Loop(bool fMaster = false)\n     {\n-        boost::condition_variable& cond = fMaster ? condMaster : condWorker;\n         std::vector<T> vChecks;\n         vChecks.reserve(nBatchSize);\n         unsigned int nNow = 0;\n@@ -86,18 +88,28 @@ class CCheckQueue\n                 }\n                 // logically, the do loop starts here\n                 while (queue.empty()) {\n-                    if (fMaster && nTodo == 0) {\n-                        nTotal--;\n-                        bool fRet = fAllOk;\n-                        // reset the status for new work later\n-                        if (fMaster)\n+                    if (fMaster) {\n+                        if (nTodo == 0) {\n+                            nTotal--;\n+                            bool fRet = fAllOk;\n+                            // reset the status for new work later\n                             fAllOk = true;\n-                        // return the current status\n-                        return fRet;\n+                            // return the current status\n+                            return fRet;\n+                        } else {\n+                            condMaster.wait(lock);\n+                        }\n+                    } else {\n+                        nIdle++;\n+                        if (interrupted) {\n+                            nTotal--;\n+                            nIdle--;\n+                            return false;\n+                        } else {\n+                            condWorker.wait(lock);\n+                        }\n+                        nIdle--;\n                     }\n-                    nIdle++;\n-                    cond.wait(lock); // wait\n-                    nIdle--;\n                 }\n                 // Decide how many work units to process now.\n                 // * Do not try to do everything at once, but aim for increasingly smaller batches so\n@@ -157,6 +169,16 @@ class CCheckQueue\n             condWorker.notify_all();\n     }\n \n+    void Interrupt()\n+    {\n+        {\n+            boost::unique_lock<boost::mutex>(ControlMutex);\n+            boost::unique_lock<boost::mutex>(mutex);\n+            interrupted = true;\n+        }\n+        condWorker.notify_all();\n+    }\n+\n     ~CCheckQueue()\n     {\n     }"
      },
      {
        "sha": "ada9ebcde7b9a5f01d28374d13737ef0aa16a51f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b00312a91d70114076b7f91ea42ae15a238aaeef/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b00312a91d70114076b7f91ea42ae15a238aaeef/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=b00312a91d70114076b7f91ea42ae15a238aaeef",
        "patch": "@@ -143,6 +143,7 @@ static CScheduler scheduler;\n \n void Interrupt()\n {\n+    InterruptScriptCheck();\n     InterruptHTTPServer();\n     InterruptHTTPRPC();\n     InterruptRPC();\n@@ -171,6 +172,7 @@ void Shutdown()\n     RenameThread(\"bitcoin-shutoff\");\n     mempool.AddTransactionsUpdated(1);\n \n+    StopScriptCheck();\n     StopHTTPRPC();\n     StopREST();\n     StopRPC();\n@@ -1200,10 +1202,7 @@ bool AppInitMain()\n     InitScriptExecutionCache();\n \n     LogPrintf(\"Using %u threads for script verification\\n\", nScriptCheckThreads);\n-    if (nScriptCheckThreads) {\n-        for (int i=0; i<nScriptCheckThreads-1; i++)\n-            threadGroup.create_thread(&ThreadScriptCheck);\n-    }\n+    StartScriptCheck();\n \n     // Start the lightweight task scheduler thread\n     CScheduler::Function serviceLoop = boost::bind(&CScheduler::serviceQueue, &scheduler);"
      },
      {
        "sha": "c3b3f169e97d9bc9f8c3a70beee9097f8719be90",
        "filename": "src/test/checkqueue_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b00312a91d70114076b7f91ea42ae15a238aaeef/src/test/checkqueue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b00312a91d70114076b7f91ea42ae15a238aaeef/src/test/checkqueue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkqueue_tests.cpp?ref=b00312a91d70114076b7f91ea42ae15a238aaeef",
        "patch": "@@ -170,7 +170,7 @@ static void Correct_Queue_range(std::vector<size_t> range)\n             BOOST_TEST_MESSAGE(\"Failure on trial \" << i << \" expected, got \" << FakeCheckCheckCompletion::n_calls);\n         }\n     }\n-    tg.interrupt_all();\n+    small_queue->Interrupt();\n     tg.join_all();\n }\n \n@@ -239,7 +239,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Catches_Failure)\n             BOOST_REQUIRE(success);\n         }\n     }\n-    tg.interrupt_all();\n+    fail_queue->Interrupt();\n     tg.join_all();\n }\n // Test that a block validation which fails does not interfere with\n@@ -265,7 +265,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Recovers_From_Failure)\n             BOOST_REQUIRE(r != end_fails);\n         }\n     }\n-    tg.interrupt_all();\n+    fail_queue->Interrupt();\n     tg.join_all();\n }\n \n@@ -298,7 +298,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_UniqueCheck)\n     for (size_t i = 0; i < COUNT; ++i)\n         r = r && UniqueCheck::results.count(i) == 1;\n     BOOST_REQUIRE(r);\n-    tg.interrupt_all();\n+    queue->Interrupt();\n     tg.join_all();\n }\n \n@@ -333,7 +333,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Memory)\n         }\n         BOOST_REQUIRE_EQUAL(MemoryCheck::fake_allocated_memory, 0U);\n     }\n-    tg.interrupt_all();\n+    queue->Interrupt();\n     tg.join_all();\n }\n \n@@ -375,7 +375,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_FrozenCleanup)\n     FrozenCleanupCheck::cv.notify_one();\n     // Wait for control to finish\n     t0.join();\n-    tg.interrupt_all();\n+    queue->Interrupt();\n     tg.join_all();\n     BOOST_REQUIRE(!fails);\n }"
      },
      {
        "sha": "3401d0d1827cb3711ebd5cacd27db7aadff85275",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b00312a91d70114076b7f91ea42ae15a238aaeef/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b00312a91d70114076b7f91ea42ae15a238aaeef/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=b00312a91d70114076b7f91ea42ae15a238aaeef",
        "patch": "@@ -109,16 +109,17 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n             }\n         }\n         nScriptCheckThreads = 3;\n-        for (int i=0; i < nScriptCheckThreads-1; i++)\n-            threadGroup.create_thread(&ThreadScriptCheck);\n+        StartScriptCheck();\n         g_connman = MakeUnique<CConnman>(0x1337, 0x1337); // Deterministic randomness for tests.\n         connman = g_connman.get();\n         peerLogic.reset(new PeerLogicValidation(connman, scheduler, /*enable_bip61=*/true));\n }\n \n TestingSetup::~TestingSetup()\n {\n+    InterruptScriptCheck();\n         threadGroup.interrupt_all();\n+        StopScriptCheck();\n         threadGroup.join_all();\n         GetMainSignals().FlushBackgroundCallbacks();\n         GetMainSignals().UnregisterBackgroundSignalScheduler();"
      },
      {
        "sha": "01db5e5d6f4cd07e81b674171930e8c517b9a295",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 23,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b00312a91d70114076b7f91ea42ae15a238aaeef/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b00312a91d70114076b7f91ea42ae15a238aaeef/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=b00312a91d70114076b7f91ea42ae15a238aaeef",
        "patch": "@@ -464,33 +464,35 @@ BOOST_AUTO_TEST_CASE(test_big_witness_transaction) {\n     PrecomputedTransactionData txdata(tx);\n     boost::thread_group threadGroup;\n     CCheckQueue<CScriptCheck> scriptcheckqueue(128);\n-    CCheckQueueControl<CScriptCheck> control(&scriptcheckqueue);\n-\n-    for (int i=0; i<20; i++)\n-        threadGroup.create_thread(boost::bind(&CCheckQueue<CScriptCheck>::Thread, boost::ref(scriptcheckqueue)));\n+    {\n+        CCheckQueueControl<CScriptCheck> control(&scriptcheckqueue);\n+\n+        for (int i=0; i<20; i++)\n+            threadGroup.create_thread(boost::bind(&CCheckQueue<CScriptCheck>::Thread, boost::ref(scriptcheckqueue)));\n+\n+        std::vector<Coin> coins;\n+        for(uint32_t i = 0; i < mtx.vin.size(); i++) {\n+            Coin coin;\n+            coin.nHeight = 1;\n+            coin.fCoinBase = false;\n+            coin.out.nValue = 1000;\n+            coin.out.scriptPubKey = scriptPubKey;\n+            coins.emplace_back(std::move(coin));\n+        }\n \n-    std::vector<Coin> coins;\n-    for(uint32_t i = 0; i < mtx.vin.size(); i++) {\n-        Coin coin;\n-        coin.nHeight = 1;\n-        coin.fCoinBase = false;\n-        coin.out.nValue = 1000;\n-        coin.out.scriptPubKey = scriptPubKey;\n-        coins.emplace_back(std::move(coin));\n-    }\n+        for(uint32_t i = 0; i < mtx.vin.size(); i++) {\n+            std::vector<CScriptCheck> vChecks;\n+            CScriptCheck check(coins[tx.vin[i].prevout.n].out, tx, i, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, false, &txdata);\n+            vChecks.push_back(CScriptCheck());\n+            check.swap(vChecks.back());\n+            control.Add(vChecks);\n+        }\n \n-    for(uint32_t i = 0; i < mtx.vin.size(); i++) {\n-        std::vector<CScriptCheck> vChecks;\n-        CScriptCheck check(coins[tx.vin[i].prevout.n].out, tx, i, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, false, &txdata);\n-        vChecks.push_back(CScriptCheck());\n-        check.swap(vChecks.back());\n-        control.Add(vChecks);\n+        bool controlCheck = control.Wait();\n+        assert(controlCheck);\n     }\n \n-    bool controlCheck = control.Wait();\n-    assert(controlCheck);\n-\n-    threadGroup.interrupt_all();\n+    scriptcheckqueue.Interrupt();\n     threadGroup.join_all();\n }\n "
      },
      {
        "sha": "de8f9601888ce170d6d1d64565f9989eab0a9b11",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 1,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b00312a91d70114076b7f91ea42ae15a238aaeef/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b00312a91d70114076b7f91ea42ae15a238aaeef/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=b00312a91d70114076b7f91ea42ae15a238aaeef",
        "patch": "@@ -1675,11 +1675,37 @@ static bool WriteUndoDataForBlock(const CBlockUndo& blockundo, CValidationState&\n \n static CCheckQueue<CScriptCheck> scriptcheckqueue(128);\n \n-void ThreadScriptCheck() {\n+static std::vector<std::thread> g_thread_scriptcheck_workers;\n+\n+static void ThreadScriptCheck()\n+{\n     RenameThread(\"bitcoin-scriptch\");\n     scriptcheckqueue.Thread();\n }\n \n+void StartScriptCheck()\n+{\n+    LogPrintf(\"Using %u threads for script verification\\n\", nScriptCheckThreads);\n+    if (nScriptCheckThreads) {\n+        for (int i = 0; i < nScriptCheckThreads - 1; i++) {\n+            g_thread_scriptcheck_workers.emplace_back(ThreadScriptCheck);\n+        }\n+    }\n+}\n+\n+void InterruptScriptCheck()\n+{\n+    scriptcheckqueue.Interrupt();\n+}\n+\n+void StopScriptCheck()\n+{\n+    for (auto& th : g_thread_scriptcheck_workers) {\n+        th.join();\n+    }\n+    g_thread_scriptcheck_workers.clear();\n+}\n+\n // Protected by cs_main\n VersionBitsCache versionbitscache;\n "
      },
      {
        "sha": "3869ac96e24678fdda3ec9af71a0fd77ae56a89f",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b00312a91d70114076b7f91ea42ae15a238aaeef/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b00312a91d70114076b7f91ea42ae15a238aaeef/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=b00312a91d70114076b7f91ea42ae15a238aaeef",
        "patch": "@@ -260,8 +260,12 @@ bool LoadBlockIndex(const CChainParams& chainparams) EXCLUSIVE_LOCKS_REQUIRED(cs\n bool LoadChainTip(const CChainParams& chainparams) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n /** Unload database information */\n void UnloadBlockIndex();\n-/** Run an instance of the script checking thread */\n-void ThreadScriptCheck();\n+/** Start script checking threads */\n+void StartScriptCheck();\n+/** Interrupt script checking threads */\n+void InterruptScriptCheck();\n+/** Stop script checking threads */\n+void StopScriptCheck();\n /** Check whether we are doing an initial block download (synchronizing from disk or network) */\n bool IsInitialBlockDownload();\n /** Retrieve a transaction (from memory pool, or from disk, if possible) */"
      }
    ]
  },
  {
    "sha": "cac4c12f7ea33cd6aa0e02d66784279713519df6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYWM0YzEyZjdlYTMzY2Q2YWEwZTAyZDY2Nzg0Mjc5NzEzNTE5ZGY2",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-10-30T16:26:26Z"
      },
      "committer": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-10-30T17:00:58Z"
      },
      "message": "refactor: Drop boost in CCheckQueue\n\nreplace boost::mutex with debuggable Mutex\nreplace boost::condition_variable with std::condition_variable\nadd const specifier to fMaster and nBatchSize\nadd clang thread safety attributes\nmove init value of member of CCheckQueue from constructor to definition",
      "tree": {
        "sha": "fbedaac20719b8647115881c6226623297ceea47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fbedaac20719b8647115881c6226623297ceea47"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cac4c12f7ea33cd6aa0e02d66784279713519df6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cac4c12f7ea33cd6aa0e02d66784279713519df6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cac4c12f7ea33cd6aa0e02d66784279713519df6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cac4c12f7ea33cd6aa0e02d66784279713519df6/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b00312a91d70114076b7f91ea42ae15a238aaeef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b00312a91d70114076b7f91ea42ae15a238aaeef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b00312a91d70114076b7f91ea42ae15a238aaeef"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 16,
      "deletions": 21
    },
    "files": [
      {
        "sha": "066f234597399011b9093bf8df56c29cc4f51e05",
        "filename": "src/checkqueue.h",
        "status": "modified",
        "additions": 16,
        "deletions": 20,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cac4c12f7ea33cd6aa0e02d66784279713519df6/src/checkqueue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cac4c12f7ea33cd6aa0e02d66784279713519df6/src/checkqueue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkqueue.h?ref=cac4c12f7ea33cd6aa0e02d66784279713519df6",
        "patch": "@@ -10,9 +10,6 @@\n #include <algorithm>\n #include <vector>\n \n-#include <boost/thread/condition_variable.hpp>\n-#include <boost/thread/mutex.hpp>\n-\n template <typename T>\n class CCheckQueueControl;\n \n@@ -31,50 +28,50 @@ class CCheckQueue\n {\n private:\n     //! Mutex to protect the inner state\n-    boost::mutex mutex;\n+    Mutex mutex;\n \n     //! Worker threads block on this when out of work\n-    boost::condition_variable condWorker;\n+    std::condition_variable condWorker;\n \n     //! Master thread blocks on this when out of work\n-    boost::condition_variable condMaster;\n+    std::condition_variable condMaster;\n \n     //! The queue of elements to be processed.\n     //! As the order of booleans doesn't matter, it is used as a LIFO (stack)\n-    std::vector<T> queue;\n+    std::vector<T> queue GUARDED_BY(mutex);\n \n     //! The number of workers (including the master) that are idle.\n-    int nIdle;\n+    int nIdle GUARDED_BY(mutex) = 0;\n \n     //! The total number of workers (including the master).\n-    int nTotal;\n+    int nTotal GUARDED_BY(mutex) = 0;\n \n     //! The temporary evaluation result.\n-    bool fAllOk;\n+    bool fAllOk GUARDED_BY(mutex) = true;\n \n     //! The interrupt flag.\n-    bool interrupted;\n+    bool interrupted GUARDED_BY(mutex) = false;\n \n     /**\n      * Number of verifications that haven't completed yet.\n      * This includes elements that are no longer queued, but still in the\n      * worker's own batches.\n      */\n-    unsigned int nTodo;\n+    unsigned int nTodo GUARDED_BY(mutex) = 0;\n \n     //! The maximum number of elements to be processed in one batch\n-    unsigned int nBatchSize;\n+    const unsigned int nBatchSize;\n \n     /** Internal function that does bulk of the verification work. */\n-    bool Loop(bool fMaster = false)\n+    bool Loop(const bool fMaster = false)\n     {\n         std::vector<T> vChecks;\n         vChecks.reserve(nBatchSize);\n         unsigned int nNow = 0;\n         bool fOk = true;\n         do {\n             {\n-                boost::unique_lock<boost::mutex> lock(mutex);\n+                WAIT_LOCK(mutex, lock);\n                 // first do the clean-up of the previous loop run (allowing us to do it in the same critsect)\n                 if (nNow) {\n                     fAllOk &= fOk;\n@@ -137,10 +134,10 @@ class CCheckQueue\n \n public:\n     //! Mutex to ensure only one concurrent CCheckQueueControl\n-    boost::mutex ControlMutex;\n+    Mutex ControlMutex;\n \n     //! Create a new check queue\n-    explicit CCheckQueue(unsigned int nBatchSizeIn) : nIdle(0), nTotal(0), fAllOk(true), nTodo(0), nBatchSize(nBatchSizeIn) {}\n+    explicit CCheckQueue(unsigned int nBatchSizeIn) : nBatchSize(nBatchSizeIn) {}\n \n     //! Worker thread\n     void Thread()\n@@ -157,7 +154,7 @@ class CCheckQueue\n     //! Add a batch of checks to the queue\n     void Add(std::vector<T>& vChecks)\n     {\n-        boost::unique_lock<boost::mutex> lock(mutex);\n+        LOCK(mutex);\n         for (T& check : vChecks) {\n             queue.push_back(T());\n             check.swap(queue.back());\n@@ -172,8 +169,7 @@ class CCheckQueue\n     void Interrupt()\n     {\n         {\n-            boost::unique_lock<boost::mutex>(ControlMutex);\n-            boost::unique_lock<boost::mutex>(mutex);\n+            LOCK2(ControlMutex, mutex);\n             interrupted = true;\n         }\n         condWorker.notify_all();"
      },
      {
        "sha": "08c494f7da6221770ec931047bde9cd81debf5bf",
        "filename": "test/lint/lint-includes.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cac4c12f7ea33cd6aa0e02d66784279713519df6/test/lint/lint-includes.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cac4c12f7ea33cd6aa0e02d66784279713519df6/test/lint/lint-includes.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-includes.sh?ref=cac4c12f7ea33cd6aa0e02d66784279713519df6",
        "patch": "@@ -68,7 +68,6 @@ EXPECTED_BOOST_INCLUDES=(\n     boost/test/unit_test.hpp\n     boost/thread.hpp\n     boost/thread/condition_variable.hpp\n-    boost/thread/mutex.hpp\n     boost/thread/thread.hpp\n     boost/variant.hpp\n     boost/variant/apply_visitor.hpp"
      }
    ]
  },
  {
    "sha": "6bc643cad066495217df5d351d48c26e015dde5b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YmM2NDNjYWQwNjY0OTUyMTdkZjVkMzUxZDQ4YzI2ZTAxNWRkZTVi",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-10-31T04:08:18Z"
      },
      "committer": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-10-31T04:56:33Z"
      },
      "message": "refactor: Make CCheckQueue worker threads be owned by itself\n\nManage CCheckQueue workder threads by itself. Do not expose the threads outside the object.",
      "tree": {
        "sha": "7cea622a9d0f2b88905abe929abdfc6f24fadb2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7cea622a9d0f2b88905abe929abdfc6f24fadb2f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6bc643cad066495217df5d351d48c26e015dde5b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bc643cad066495217df5d351d48c26e015dde5b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6bc643cad066495217df5d351d48c26e015dde5b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bc643cad066495217df5d351d48c26e015dde5b/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cac4c12f7ea33cd6aa0e02d66784279713519df6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cac4c12f7ea33cd6aa0e02d66784279713519df6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cac4c12f7ea33cd6aa0e02d66784279713519df6"
      }
    ],
    "stats": {
      "total": 131,
      "additions": 66,
      "deletions": 65
    },
    "files": [
      {
        "sha": "38ff831e92bd63d436d6acebe4eca005841e5777",
        "filename": "src/bench/checkqueue.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bc643cad066495217df5d351d48c26e015dde5b/src/bench/checkqueue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bc643cad066495217df5d351d48c26e015dde5b/src/bench/checkqueue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/checkqueue.cpp?ref=6bc643cad066495217df5d351d48c26e015dde5b",
        "patch": "@@ -37,10 +37,7 @@ static void CCheckQueueSpeedPrevectorJob(benchmark::State& state)\n         void swap(PrevectorJob& x){p.swap(x.p);};\n     };\n     CCheckQueue<PrevectorJob> queue {QUEUE_BATCH_SIZE};\n-    boost::thread_group tg;\n-    for (auto x = 0; x < std::max(MIN_CORES, GetNumCores()); ++x) {\n-       tg.create_thread([&]{queue.Thread();});\n-    }\n+    queue.Start(std::max(MIN_CORES, GetNumCores()));\n     while (state.KeepRunning()) {\n         // Make insecure_rand here so that each iteration is identical.\n         FastRandomContext insecure_rand(true);\n@@ -57,6 +54,6 @@ static void CCheckQueueSpeedPrevectorJob(benchmark::State& state)\n         control.Wait();\n     }\n     queue.Interrupt();\n-    tg.join_all();\n+    queue.Stop();\n }\n BENCHMARK(CCheckQueueSpeedPrevectorJob, 1400);"
      },
      {
        "sha": "f3b0be9b8e6420379c66c3b1796e349a6202b3f0",
        "filename": "src/checkqueue.h",
        "status": "modified",
        "additions": 28,
        "deletions": 7,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bc643cad066495217df5d351d48c26e015dde5b/src/checkqueue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bc643cad066495217df5d351d48c26e015dde5b/src/checkqueue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkqueue.h?ref=6bc643cad066495217df5d351d48c26e015dde5b",
        "patch": "@@ -7,6 +7,8 @@\n \n #include <sync.h>\n \n+#include <util.h>\n+\n #include <algorithm>\n #include <vector>\n \n@@ -40,6 +42,9 @@ class CCheckQueue\n     //! As the order of booleans doesn't matter, it is used as a LIFO (stack)\n     std::vector<T> queue GUARDED_BY(mutex);\n \n+    //! The worker threads\n+    std::vector<std::thread> m_threads;\n+\n     //! The number of workers (including the master) that are idle.\n     int nIdle GUARDED_BY(mutex) = 0;\n \n@@ -139,12 +144,6 @@ class CCheckQueue\n     //! Create a new check queue\n     explicit CCheckQueue(unsigned int nBatchSizeIn) : nBatchSize(nBatchSizeIn) {}\n \n-    //! Worker thread\n-    void Thread()\n-    {\n-        Loop();\n-    }\n-\n     //! Wait until execution finishes, and return whether all evaluations were successful.\n     bool Wait()\n     {\n@@ -166,6 +165,23 @@ class CCheckQueue\n             condWorker.notify_all();\n     }\n \n+    void Start(const int n_threads, const char* const thread_name = nullptr)\n+    {\n+        assert(m_threads.size() == 0);\n+        {\n+            LOCK(mutex);\n+            interrupted = false;\n+        }\n+        if (n_threads <= 0) return;\n+        m_threads.reserve(n_threads);\n+        for (int i = 0; i < n_threads; i++) {\n+            m_threads.emplace_back([thread_name, this] {\n+                if (thread_name != nullptr) RenameThread(thread_name);\n+                Loop();\n+            });\n+        }\n+    }\n+\n     void Interrupt()\n     {\n         {\n@@ -175,10 +191,15 @@ class CCheckQueue\n         condWorker.notify_all();\n     }\n \n-    ~CCheckQueue()\n+    void Stop()\n     {\n+        for (std::thread& thread : m_threads) thread.join();\n+        m_threads.clear();\n     }\n \n+    ~CCheckQueue()\n+    {\n+    }\n };\n \n /**"
      },
      {
        "sha": "7ffe8f53549c3d6f7a41322a75afa9f8169c61c3",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bc643cad066495217df5d351d48c26e015dde5b/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bc643cad066495217df5d351d48c26e015dde5b/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=6bc643cad066495217df5d351d48c26e015dde5b",
        "patch": "@@ -1201,7 +1201,6 @@ bool AppInitMain()\n     InitSignatureCache();\n     InitScriptExecutionCache();\n \n-    LogPrintf(\"Using %u threads for script verification\\n\", nScriptCheckThreads);\n     StartScriptCheck();\n \n     // Start the lightweight task scheduler thread"
      },
      {
        "sha": "b1b29621af38b91745d71e6aa218ff2e8e3bd8af",
        "filename": "src/test/checkqueue_tests.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 31,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bc643cad066495217df5d351d48c26e015dde5b/src/test/checkqueue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bc643cad066495217df5d351d48c26e015dde5b/src/test/checkqueue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkqueue_tests.cpp?ref=6bc643cad066495217df5d351d48c26e015dde5b",
        "patch": "@@ -149,10 +149,7 @@ typedef CCheckQueue<FrozenCleanupCheck> FrozenCleanup_Queue;\n static void Correct_Queue_range(std::vector<size_t> range)\n {\n     auto small_queue = MakeUnique<Correct_Queue>(QUEUE_BATCH_SIZE);\n-    boost::thread_group tg;\n-    for (auto x = 0; x < nScriptCheckThreads; ++x) {\n-       tg.create_thread([&]{small_queue->Thread();});\n-    }\n+    small_queue->Start(nScriptCheckThreads);\n     // Make vChecks here to save on malloc (this test can be slow...)\n     std::vector<FakeCheckCheckCompletion> vChecks;\n     for (const size_t i : range) {\n@@ -171,7 +168,7 @@ static void Correct_Queue_range(std::vector<size_t> range)\n         }\n     }\n     small_queue->Interrupt();\n-    tg.join_all();\n+    small_queue->Stop();\n }\n \n /** Test that 0 checks is correct\n@@ -215,10 +212,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Catches_Failure)\n {\n     auto fail_queue = MakeUnique<Failing_Queue>(QUEUE_BATCH_SIZE);\n \n-    boost::thread_group tg;\n-    for (auto x = 0; x < nScriptCheckThreads; ++x) {\n-       tg.create_thread([&]{fail_queue->Thread();});\n-    }\n+    fail_queue->Start(nScriptCheckThreads);\n \n     for (size_t i = 0; i < 1001; ++i) {\n         CCheckQueueControl<FailingCheck> control(fail_queue.get());\n@@ -240,17 +234,14 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Catches_Failure)\n         }\n     }\n     fail_queue->Interrupt();\n-    tg.join_all();\n+    fail_queue->Stop();\n }\n // Test that a block validation which fails does not interfere with\n // future blocks, ie, the bad state is cleared.\n BOOST_AUTO_TEST_CASE(test_CheckQueue_Recovers_From_Failure)\n {\n     auto fail_queue = MakeUnique<Failing_Queue>(QUEUE_BATCH_SIZE);\n-    boost::thread_group tg;\n-    for (auto x = 0; x < nScriptCheckThreads; ++x) {\n-       tg.create_thread([&]{fail_queue->Thread();});\n-    }\n+    fail_queue->Start(nScriptCheckThreads);\n \n     for (auto times = 0; times < 10; ++times) {\n         for (const bool end_fails : {true, false}) {\n@@ -266,7 +257,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Recovers_From_Failure)\n         }\n     }\n     fail_queue->Interrupt();\n-    tg.join_all();\n+    fail_queue->Stop();\n }\n \n // Test that unique checks are actually all called individually, rather than\n@@ -275,11 +266,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Recovers_From_Failure)\n BOOST_AUTO_TEST_CASE(test_CheckQueue_UniqueCheck)\n {\n     auto queue = MakeUnique<Unique_Queue>(QUEUE_BATCH_SIZE);\n-    boost::thread_group tg;\n-    for (auto x = 0; x < nScriptCheckThreads; ++x) {\n-       tg.create_thread([&]{queue->Thread();});\n-\n-    }\n+    queue->Start(nScriptCheckThreads);\n \n     size_t COUNT = 100000;\n     size_t total = COUNT;\n@@ -299,7 +286,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_UniqueCheck)\n         r = r && UniqueCheck::results.count(i) == 1;\n     BOOST_REQUIRE(r);\n     queue->Interrupt();\n-    tg.join_all();\n+    queue->Stop();\n }\n \n \n@@ -311,10 +298,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_UniqueCheck)\n BOOST_AUTO_TEST_CASE(test_CheckQueue_Memory)\n {\n     auto queue = MakeUnique<Memory_Queue>(QUEUE_BATCH_SIZE);\n-    boost::thread_group tg;\n-    for (auto x = 0; x < nScriptCheckThreads; ++x) {\n-       tg.create_thread([&]{queue->Thread();});\n-    }\n+    queue->Start(nScriptCheckThreads);\n     for (size_t i = 0; i < 1000; ++i) {\n         size_t total = i;\n         {\n@@ -334,19 +318,16 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Memory)\n         BOOST_REQUIRE_EQUAL(MemoryCheck::fake_allocated_memory, 0U);\n     }\n     queue->Interrupt();\n-    tg.join_all();\n+    queue->Stop();\n }\n \n // Test that a new verification cannot occur until all checks\n // have been destructed\n BOOST_AUTO_TEST_CASE(test_CheckQueue_FrozenCleanup)\n {\n     auto queue = MakeUnique<FrozenCleanup_Queue>(QUEUE_BATCH_SIZE);\n-    boost::thread_group tg;\n+    queue->Start(nScriptCheckThreads);\n     bool fails = false;\n-    for (auto x = 0; x < nScriptCheckThreads; ++x) {\n-        tg.create_thread([&]{queue->Thread();});\n-    }\n     std::thread t0([&]() {\n         CCheckQueueControl<FrozenCleanupCheck> control(queue.get());\n         std::vector<FrozenCleanupCheck> vChecks(1);\n@@ -376,7 +357,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_FrozenCleanup)\n     // Wait for control to finish\n     t0.join();\n     queue->Interrupt();\n-    tg.join_all();\n+    queue->Stop();\n     BOOST_REQUIRE(!fails);\n }\n \n@@ -441,5 +422,25 @@ BOOST_AUTO_TEST_CASE(test_CheckQueueControl_Locks)\n         tg.join_all();\n     }\n }\n+\n+BOOST_AUTO_TEST_CASE(test_CheckQueue_threads_count)\n+{\n+    CCheckQueue<FakeCheck> queue(QUEUE_BATCH_SIZE);\n+\n+    // Test for positive number\n+    queue.Start(GetNumCores());\n+    queue.Interrupt();\n+    queue.Stop();\n+\n+    // Test for zero\n+    queue.Start(0);\n+    queue.Interrupt();\n+    queue.Stop();\n+\n+    // Test for negtive value\n+    queue.Start(-5);\n+    queue.Interrupt();\n+    queue.Stop();\n+}\n BOOST_AUTO_TEST_SUITE_END()\n "
      },
      {
        "sha": "a4912ed5829e1e65a57f4657ab9ee49a91aee5a4",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bc643cad066495217df5d351d48c26e015dde5b/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bc643cad066495217df5d351d48c26e015dde5b/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=6bc643cad066495217df5d351d48c26e015dde5b",
        "patch": "@@ -462,13 +462,11 @@ BOOST_AUTO_TEST_CASE(test_big_witness_transaction) {\n \n     // check all inputs concurrently, with the cache\n     PrecomputedTransactionData txdata(tx);\n-    boost::thread_group threadGroup;\n     CCheckQueue<CScriptCheck> scriptcheckqueue(128);\n     {\n         CCheckQueueControl<CScriptCheck> control(&scriptcheckqueue);\n \n-        for (int i=0; i<20; i++)\n-            threadGroup.create_thread(boost::bind(&CCheckQueue<CScriptCheck>::Thread, boost::ref(scriptcheckqueue)));\n+        scriptcheckqueue.Start(20);\n \n         std::vector<Coin> coins;\n         for(uint32_t i = 0; i < mtx.vin.size(); i++) {\n@@ -493,7 +491,7 @@ BOOST_AUTO_TEST_CASE(test_big_witness_transaction) {\n     }\n \n     scriptcheckqueue.Interrupt();\n-    threadGroup.join_all();\n+    scriptcheckqueue.Stop();\n }\n \n SignatureData CombineSignatures(const CMutableTransaction& input1, const CMutableTransaction& input2, const CTransactionRef tx)"
      },
      {
        "sha": "f976533f8694800e3f5988b87e7cfef661613980",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 17,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bc643cad066495217df5d351d48c26e015dde5b/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bc643cad066495217df5d351d48c26e015dde5b/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=6bc643cad066495217df5d351d48c26e015dde5b",
        "patch": "@@ -1675,22 +1675,10 @@ static bool WriteUndoDataForBlock(const CBlockUndo& blockundo, CValidationState&\n \n static CCheckQueue<CScriptCheck> scriptcheckqueue(128);\n \n-static std::vector<std::thread> g_thread_scriptcheck_workers;\n-\n-static void ThreadScriptCheck()\n-{\n-    RenameThread(\"bitcoin-scriptch\");\n-    scriptcheckqueue.Thread();\n-}\n-\n void StartScriptCheck()\n {\n     LogPrintf(\"Using %u threads for script verification\\n\", nScriptCheckThreads);\n-    if (nScriptCheckThreads) {\n-        for (int i = 0; i < nScriptCheckThreads - 1; i++) {\n-            g_thread_scriptcheck_workers.emplace_back(ThreadScriptCheck);\n-        }\n-    }\n+    scriptcheckqueue.Start(nScriptCheckThreads - 1, \"bitcoin-scriptch\");\n }\n \n void InterruptScriptCheck()\n@@ -1700,10 +1688,7 @@ void InterruptScriptCheck()\n \n void StopScriptCheck()\n {\n-    for (auto& th : g_thread_scriptcheck_workers) {\n-        th.join();\n-    }\n-    g_thread_scriptcheck_workers.clear();\n+    scriptcheckqueue.Stop();\n }\n \n // Protected by cs_main"
      }
    ]
  },
  {
    "sha": "2c50583d35f8b273890157986a9afd67a547d584",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYzUwNTgzZDM1ZjhiMjczODkwMTU3OTg2YTlhZmQ2N2E1NDdkNTg0",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-10-13T20:24:38Z"
      },
      "committer": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-11-02T15:25:19Z"
      },
      "message": "refactor: Drop boost::this_thread::interruption_point and boost::thread_interrupted in main thread",
      "tree": {
        "sha": "537bdb936ad9c8fbeea7fd7c8c7663f71ae8ec23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/537bdb936ad9c8fbeea7fd7c8c7663f71ae8ec23"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2c50583d35f8b273890157986a9afd67a547d584",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c50583d35f8b273890157986a9afd67a547d584",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2c50583d35f8b273890157986a9afd67a547d584",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c50583d35f8b273890157986a9afd67a547d584/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6bc643cad066495217df5d351d48c26e015dde5b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bc643cad066495217df5d351d48c26e015dde5b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6bc643cad066495217df5d351d48c26e015dde5b"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 0,
      "deletions": 9
    },
    "files": [
      {
        "sha": "ba4586012de927056e65f732e1317240f93d8b5e",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c50583d35f8b273890157986a9afd67a547d584/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c50583d35f8b273890157986a9afd67a547d584/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=2c50583d35f8b273890157986a9afd67a547d584",
        "patch": "@@ -492,9 +492,6 @@ static int CommandLineRPC(int argc, char *argv[])\n             }\n         } while (fWait);\n     }\n-    catch (const boost::thread_interrupted&) {\n-        throw;\n-    }\n     catch (const std::exception& e) {\n         strPrint = std::string(\"error: \") + e.what();\n         nRet = EXIT_FAILURE;"
      },
      {
        "sha": "c0e73ab0b8fb0a1d6ef5a95c6fc0fb4d59b4fd31",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c50583d35f8b273890157986a9afd67a547d584/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c50583d35f8b273890157986a9afd67a547d584/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=2c50583d35f8b273890157986a9afd67a547d584",
        "patch": "@@ -820,10 +820,6 @@ static int CommandLineRawTx(int argc, char* argv[])\n \n         OutputTx(tx);\n     }\n-\n-    catch (const boost::thread_interrupted&) {\n-        throw;\n-    }\n     catch (const std::exception& e) {\n         strPrint = std::string(\"error: \") + e.what();\n         nRet = EXIT_FAILURE;"
      },
      {
        "sha": "6a96f51f376dc18c72765fbf5b45a029fa555bbd",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c50583d35f8b273890157986a9afd67a547d584/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c50583d35f8b273890157986a9afd67a547d584/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=2c50583d35f8b273890157986a9afd67a547d584",
        "patch": "@@ -3830,8 +3830,6 @@ bool CChainState::LoadBlockIndex(const Consensus::Params& consensus_params, CBlo\n     if (!blocktree.LoadBlockIndexGuts(consensus_params, [this](const uint256& hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main) { return this->InsertBlockIndex(hash); }))\n         return false;\n \n-    boost::this_thread::interruption_point();\n-\n     // Calculate nChainWork\n     std::vector<std::pair<int, CBlockIndex*> > vSortedByHeight;\n     vSortedByHeight.reserve(mapBlockIndex.size());"
      }
    ]
  },
  {
    "sha": "cd1c7a8d511d4418982aebaf4949cd17bfa58b90",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZDFjN2E4ZDUxMWQ0NDE4OTgyYWViYWY0OTQ5Y2QxN2JmYTU4Yjkw",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-10-15T03:53:20Z"
      },
      "committer": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-11-02T15:25:19Z"
      },
      "message": "utils: Add interruptible thread class",
      "tree": {
        "sha": "ac14766eeb9c4ba493b818b72463ad9366645dc1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ac14766eeb9c4ba493b818b72463ad9366645dc1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cd1c7a8d511d4418982aebaf4949cd17bfa58b90",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd1c7a8d511d4418982aebaf4949cd17bfa58b90",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cd1c7a8d511d4418982aebaf4949cd17bfa58b90",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd1c7a8d511d4418982aebaf4949cd17bfa58b90/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2c50583d35f8b273890157986a9afd67a547d584",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c50583d35f8b273890157986a9afd67a547d584",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2c50583d35f8b273890157986a9afd67a547d584"
      }
    ],
    "stats": {
      "total": 81,
      "additions": 81,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a084f9197c02cb781b214c53eeb45155967f07b1",
        "filename": "src/threadinterrupt.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd1c7a8d511d4418982aebaf4949cd17bfa58b90/src/threadinterrupt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd1c7a8d511d4418982aebaf4949cd17bfa58b90/src/threadinterrupt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/threadinterrupt.cpp?ref=cd1c7a8d511d4418982aebaf4949cd17bfa58b90",
        "patch": "@@ -43,3 +43,30 @@ bool CThreadInterrupt::sleep_for(std::chrono::minutes rel_time)\n {\n     return sleep_for(std::chrono::duration_cast<std::chrono::milliseconds>(rel_time));\n }\n+\n+thread_local InterruptFlag* g_interrupt_flag = nullptr;\n+\n+void InterruptibleThread::interrupt()\n+{\n+    {\n+        LOCK(m_interrupt_flag->m_mutex);\n+        m_interrupt_flag->m_interrupted = true;\n+    }\n+    m_interrupt_flag->m_cond.notify_one();\n+}\n+\n+void InterruptibleThread::join()\n+{\n+    m_internal.join();\n+}\n+\n+void InterruptionPoint()\n+{\n+    if (!g_interrupt_flag) { // Not interruptible thread\n+        return;\n+    }\n+    LOCK(g_interrupt_flag->m_mutex);\n+    if (g_interrupt_flag->m_interrupted) {\n+        throw ThreadInterrupted();\n+    }\n+}"
      },
      {
        "sha": "66ca4feec987cc572e81242cee19a94880aef602",
        "filename": "src/threadinterrupt.h",
        "status": "modified",
        "additions": 54,
        "deletions": 0,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd1c7a8d511d4418982aebaf4949cd17bfa58b90/src/threadinterrupt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd1c7a8d511d4418982aebaf4949cd17bfa58b90/src/threadinterrupt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/threadinterrupt.h?ref=cd1c7a8d511d4418982aebaf4949cd17bfa58b90",
        "patch": "@@ -10,6 +10,8 @@\n #include <atomic>\n #include <chrono>\n #include <condition_variable>\n+#include <future>\n+#include <memory>\n #include <mutex>\n \n /*\n@@ -34,4 +36,56 @@ class CThreadInterrupt\n     std::atomic<bool> flag;\n };\n \n+struct InterruptFlag {\n+    Mutex m_mutex;\n+    std::condition_variable m_cond;\n+    bool m_interrupted GUARDED_BY(m_mutex) = false;\n+};\n+\n+extern thread_local InterruptFlag* g_interrupt_flag;\n+\n+class InterruptibleThread\n+{\n+public:\n+    template<typename Function, typename ... Args>\n+    InterruptibleThread(Function&& func, Args&& ...args) {\n+        InterruptFlag* flag_ptr = new InterruptFlag();\n+        m_interrupt_flag = std::unique_ptr<InterruptFlag>(flag_ptr);\n+        m_internal = std::thread([flag_ptr](typename std::decay<Function>::type&& func, typename std::decay<Args>::type&&...args){\n+            g_interrupt_flag = flag_ptr;\n+            func(std::forward<Args>(args)...);\n+        }, std::forward<Function>(func), std::forward<Args>(args)...);\n+    }\n+\n+    void join();\n+    void interrupt();\n+\n+private:\n+    std::thread m_internal;\n+    std::unique_ptr<InterruptFlag> m_interrupt_flag;\n+};\n+\n+class ThreadInterrupted : public std::exception\n+{\n+};\n+\n+void InterruptionPoint();\n+\n+template <class Rep, class Period>\n+void InterruptibleSleep(const std::chrono::duration<Rep, Period>& sleep_duration)\n+{\n+    if (!g_interrupt_flag) { // Not interruptible thread\n+        std::this_thread::sleep_for(sleep_duration);\n+        return;\n+    }\n+    WAIT_LOCK(g_interrupt_flag->m_mutex, lock);\n+    if (g_interrupt_flag->m_interrupted) {\n+        throw ThreadInterrupted();\n+    }\n+    g_interrupt_flag->m_cond.wait_for(lock, sleep_duration);\n+    if (g_interrupt_flag->m_interrupted) {\n+        throw ThreadInterrupted();\n+    }\n+}\n+\n #endif //BITCOIN_THREADINTERRUPT_H"
      }
    ]
  },
  {
    "sha": "88aa77a150d5055f792a5c13502f6dc1004356a2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OGFhNzdhMTUwZDUwNTVmNzkyYTVjMTM1MDJmNmRjMTAwNDM1NmEy",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-10-15T10:54:59Z"
      },
      "committer": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-11-02T15:25:19Z"
      },
      "message": "tests: Add interruptible thread tests",
      "tree": {
        "sha": "9cdf2e58a497b1cd98962aa2b4370bf99b3a6cc4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9cdf2e58a497b1cd98962aa2b4370bf99b3a6cc4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/88aa77a150d5055f792a5c13502f6dc1004356a2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88aa77a150d5055f792a5c13502f6dc1004356a2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/88aa77a150d5055f792a5c13502f6dc1004356a2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88aa77a150d5055f792a5c13502f6dc1004356a2/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cd1c7a8d511d4418982aebaf4949cd17bfa58b90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd1c7a8d511d4418982aebaf4949cd17bfa58b90",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cd1c7a8d511d4418982aebaf4949cd17bfa58b90"
      }
    ],
    "stats": {
      "total": 108,
      "additions": 108,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9342ae42c4863ecf9bfd0fb41ab7903513466bb5",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/88aa77a150d5055f792a5c13502f6dc1004356a2/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/88aa77a150d5055f792a5c13502f6dc1004356a2/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=88aa77a150d5055f792a5c13502f6dc1004356a2",
        "patch": "@@ -86,6 +86,7 @@ BITCOIN_TESTS =\\\n   test/skiplist_tests.cpp \\\n   test/streams_tests.cpp \\\n   test/sync_tests.cpp \\\n+  test/threadinterrupt_tests.cpp \\\n   test/timedata_tests.cpp \\\n   test/torcontrol_tests.cpp \\\n   test/transaction_tests.cpp \\"
      },
      {
        "sha": "740cd8bfec60738489c2f5ca28faa505374fd4e7",
        "filename": "src/test/threadinterrupt_tests.cpp",
        "status": "added",
        "additions": 107,
        "deletions": 0,
        "changes": 107,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/88aa77a150d5055f792a5c13502f6dc1004356a2/src/test/threadinterrupt_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/88aa77a150d5055f792a5c13502f6dc1004356a2/src/test/threadinterrupt_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/threadinterrupt_tests.cpp?ref=88aa77a150d5055f792a5c13502f6dc1004356a2",
        "patch": "@@ -0,0 +1,107 @@\n+// Copyright (c) 2011-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+//\n+#include <threadinterrupt.h>\n+\n+#include <boost/test/unit_test.hpp>\n+#include <future>\n+#include <random.h>\n+\n+BOOST_AUTO_TEST_SUITE(threadinterrupt_tests)\n+\n+BOOST_AUTO_TEST_CASE(test_InterruptibleSleep)\n+{\n+    std::packaged_task<bool()> task([] {\n+        try {\n+            InterruptibleSleep(std::chrono::seconds(20));\n+        } catch (const ThreadInterrupted&) {\n+            return true;\n+        }\n+        return false;\n+    });\n+    std::future<bool> interrupted = task.get_future();\n+    InterruptibleThread thread(std::move(task));\n+    thread.interrupt();\n+    BOOST_CHECK(interrupted.wait_for(std::chrono::seconds(10)) == std::future_status::ready); // Wait at most 10 seconds\n+    thread.join();\n+    BOOST_CHECK(interrupted.get());\n+}\n+\n+BOOST_AUTO_TEST_CASE(test_InterruptionPoint)\n+{\n+    std::promise<void> promise; // Make sure we call InterruptionPoint after interrupted\n+    std::packaged_task<bool(std::promise<void>&)> task([] (std::promise<void>& promise) {\n+        try {\n+            promise.get_future().get();\n+            InterruptionPoint();\n+        } catch (const ThreadInterrupted&) {\n+            return true;\n+        }\n+        return false;\n+    });\n+    std::future<bool> interrupted = task.get_future();\n+    InterruptibleThread thread(std::move(task), std::ref(promise));\n+    thread.interrupt();\n+    promise.set_value();\n+    BOOST_CHECK(interrupted.wait_for(std::chrono::seconds(10)) == std::future_status::ready); // Wait at most 10 seconds\n+    thread.join();\n+    BOOST_CHECK(interrupted.get());\n+}\n+\n+BOOST_AUTO_TEST_CASE(test_InterruptionPoint_std_thread)\n+{\n+    std::packaged_task<bool()> task([] {\n+        try {\n+            InterruptionPoint();\n+        } catch (const ThreadInterrupted&) {\n+            return false;\n+        }\n+        return true;\n+    });\n+    std::future<bool> interrupted = task.get_future();\n+    std::thread thread(std::move(task));\n+    BOOST_CHECK(interrupted.wait_for(std::chrono::seconds(10)) == std::future_status::ready); // Wait at most 10 seconds\n+    thread.join();\n+    BOOST_CHECK(interrupted.get());\n+}\n+\n+BOOST_AUTO_TEST_CASE(test_InterruptibleSleep_std_thread)\n+{\n+    std::packaged_task<bool()> task([] {\n+        try {\n+            InterruptibleSleep(std::chrono::milliseconds(100));\n+        } catch (const ThreadInterrupted&) {\n+            return false;\n+        }\n+        return true;\n+    });\n+    std::future<bool> interrupted = task.get_future();\n+    std::thread thread(std::move(task));\n+    BOOST_CHECK(interrupted.wait_for(std::chrono::seconds(10)) == std::future_status::ready); // Wait at most 10 seconds\n+    thread.join();\n+    BOOST_CHECK(interrupted.get());\n+}\n+\n+BOOST_AUTO_TEST_CASE(test_InterruptibleThread_args)\n+{\n+    std::packaged_task<int(int, int, int)> task([](int a, int b, int c) {\n+        try {\n+            InterruptibleSleep(std::chrono::seconds(20));\n+        } catch (const ThreadInterrupted&) {\n+            return a + b + c;\n+        }\n+        return -1;\n+    });\n+    std::future<int> result = task.get_future();\n+    int a = GetRandInt(100);\n+    int b = GetRandInt(100);\n+    int c = GetRandInt(100);\n+    InterruptibleThread thread(std::move(task), a, b, c);\n+    thread.interrupt();\n+    BOOST_CHECK(result.wait_for(std::chrono::seconds(10)) == std::future_status::ready); // Wait at most 10 seconds\n+    thread.join();\n+    BOOST_CHECK_EQUAL(result.get(), a + b + c);\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "f8d86b46c79359e99c6c04b23fa7a61f35090b67",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOGQ4NmI0NmM3OTM1OWU5OWM2YzA0YjIzZmE3YTYxZjM1MDkwYjY3",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-10-15T06:50:08Z"
      },
      "committer": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-11-02T15:27:23Z"
      },
      "message": "refactor: Replace boost::thread with InterruptibleThread",
      "tree": {
        "sha": "3a482135472f4e08d8ea41a0014dc997cc4e110e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3a482135472f4e08d8ea41a0014dc997cc4e110e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f8d86b46c79359e99c6c04b23fa7a61f35090b67",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8d86b46c79359e99c6c04b23fa7a61f35090b67",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f8d86b46c79359e99c6c04b23fa7a61f35090b67",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8d86b46c79359e99c6c04b23fa7a61f35090b67/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "88aa77a150d5055f792a5c13502f6dc1004356a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88aa77a150d5055f792a5c13502f6dc1004356a2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/88aa77a150d5055f792a5c13502f6dc1004356a2"
      }
    ],
    "stats": {
      "total": 302,
      "additions": 126,
      "deletions": 176
    },
    "files": [
      {
        "sha": "b5e73992537c5277ebfd920f4d3de282e297cb74",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8d86b46c79359e99c6c04b23fa7a61f35090b67/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8d86b46c79359e99c6c04b23fa7a61f35090b67/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=f8d86b46c79359e99c6c04b23fa7a61f35090b67",
        "patch": "@@ -9,6 +9,8 @@\n #include <serialize.h>\n #include <streams.h>\n \n+#include <cmath>\n+\n int CAddrInfo::GetTriedBucket(const uint256& nKey) const\n {\n     uint64_t hash1 = (CHashWriter(SER_GETHASH, 0) << nKey << GetKey()).GetHash().GetCheapHash();"
      },
      {
        "sha": "f0f7d1b766dd2df6738125b6c7ef0e1b656f9cb0",
        "filename": "src/bench/block_assemble.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 6,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8d86b46c79359e99c6c04b23fa7a61f35090b67/src/bench/block_assemble.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8d86b46c79359e99c6c04b23fa7a61f35090b67/src/bench/block_assemble.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/block_assemble.cpp?ref=f8d86b46c79359e99c6c04b23fa7a61f35090b67",
        "patch": "@@ -11,14 +11,13 @@\n #include <policy/policy.h>\n #include <pow.h>\n #include <scheduler.h>\n+#include <threadinterrupt.h>\n #include <txdb.h>\n #include <txmempool.h>\n #include <utiltime.h>\n #include <validation.h>\n #include <validationinterface.h>\n \n-#include <boost/thread.hpp>\n-\n #include <list>\n #include <vector>\n \n@@ -69,15 +68,15 @@ static void AssembleBlock(benchmark::State& state)\n \n     InitScriptExecutionCache();\n \n-    boost::thread_group thread_group;\n+    std::vector<InterruptibleThread> thread_group;\n     CScheduler scheduler;\n     {\n         ::pblocktree.reset(new CBlockTreeDB(1 << 20, true));\n         ::pcoinsdbview.reset(new CCoinsViewDB(1 << 23, true));\n         ::pcoinsTip.reset(new CCoinsViewCache(pcoinsdbview.get()));\n \n         const CChainParams& chainparams = Params();\n-        thread_group.create_thread(boost::bind(&CScheduler::serviceQueue, &scheduler));\n+        thread_group.emplace_back(std::bind(&CScheduler::serviceQueue, &scheduler));\n         GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n         LoadGenesisBlock(chainparams);\n         CValidationState state;\n@@ -112,8 +111,13 @@ static void AssembleBlock(benchmark::State& state)\n         PrepareBlock(SCRIPT_PUB);\n     }\n \n-    thread_group.interrupt_all();\n-    thread_group.join_all();\n+    for (auto& th : thread_group) {\n+        th.interrupt();\n+    }\n+    scheduler.stop();\n+    for (auto& th : thread_group) {\n+        th.join();\n+    }\n     GetMainSignals().FlushBackgroundCallbacks();\n     GetMainSignals().UnregisterBackgroundSignalScheduler();\n }"
      },
      {
        "sha": "9ff19a3b18d8f4f755e5ff505a0f152020d7dd99",
        "filename": "src/bench/checkqueue.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8d86b46c79359e99c6c04b23fa7a61f35090b67/src/bench/checkqueue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8d86b46c79359e99c6c04b23fa7a61f35090b67/src/bench/checkqueue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/checkqueue.cpp?ref=f8d86b46c79359e99c6c04b23fa7a61f35090b67",
        "patch": "@@ -8,7 +8,6 @@\n #include <checkqueue.h>\n #include <prevector.h>\n #include <vector>\n-#include <boost/thread/thread.hpp>\n #include <random.h>\n \n "
      },
      {
        "sha": "3220df3b086cea9238018ba8502f729e768c42b5",
        "filename": "src/index/txindex.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8d86b46c79359e99c6c04b23fa7a61f35090b67/src/index/txindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8d86b46c79359e99c6c04b23fa7a61f35090b67/src/index/txindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.cpp?ref=f8d86b46c79359e99c6c04b23fa7a61f35090b67",
        "patch": "@@ -8,8 +8,6 @@\n #include <util.h>\n #include <validation.h>\n \n-#include <boost/thread.hpp>\n-\n constexpr char DB_BEST_BLOCK = 'B';\n constexpr char DB_TXINDEX = 't';\n constexpr char DB_TXINDEX_BLOCK = 'T';\n@@ -151,7 +149,7 @@ bool TxIndex::DB::MigrateData(CBlockTreeDB& block_tree_db, const CBlockLocator&\n     bool interrupted = false;\n     std::unique_ptr<CDBIterator> cursor(block_tree_db.NewIterator());\n     for (cursor->Seek(begin_key); cursor->Valid(); cursor->Next()) {\n-        boost::this_thread::interruption_point();\n+        InterruptionPoint();\n         if (ShutdownRequested()) {\n             interrupted = true;\n             break;"
      },
      {
        "sha": "f2dca5d174f60ace7f37acfb2fa0efd3121014fb",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 6,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8d86b46c79359e99c6c04b23fa7a61f35090b67/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8d86b46c79359e99c6c04b23fa7a61f35090b67/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=f8d86b46c79359e99c6c04b23fa7a61f35090b67",
        "patch": "@@ -58,7 +58,6 @@\n #include <boost/algorithm/string/replace.hpp>\n #include <boost/algorithm/string/split.hpp>\n #include <boost/bind.hpp>\n-#include <boost/thread.hpp>\n #include <openssl/crypto.h>\n \n #if ENABLE_ZMQ\n@@ -138,7 +137,7 @@ class CCoinsViewErrorCatcher final : public CCoinsViewBacked\n static std::unique_ptr<CCoinsViewErrorCatcher> pcoinscatcher;\n static std::unique_ptr<ECCVerifyHandle> globalVerifyHandle;\n \n-static boost::thread_group threadGroup;\n+static std::vector<InterruptibleThread> threadGroup;\n static CScheduler scheduler;\n \n void Interrupt()\n@@ -190,8 +189,13 @@ void Shutdown()\n \n     // After everything has been shut down, but before things get flushed, stop the\n     // CScheduler/checkqueue threadGroup\n-    threadGroup.interrupt_all();\n-    threadGroup.join_all();\n+    for (auto& th : threadGroup) {\n+        th.interrupt();\n+    }\n+    scheduler.stop();\n+    for (auto& th : threadGroup) {\n+        th.join();\n+    }\n \n     // After the threads that potentially access these pointers have been stopped,\n     // destruct and reset all to nullptr.\n@@ -1205,7 +1209,7 @@ bool AppInitMain()\n \n     // Start the lightweight task scheduler thread\n     CScheduler::Function serviceLoop = boost::bind(&CScheduler::serviceQueue, &scheduler);\n-    threadGroup.create_thread(boost::bind(&TraceThread<CScheduler::Function>, \"scheduler\", serviceLoop));\n+    threadGroup.emplace_back(std::bind(&TraceThread<CScheduler::Function>, \"scheduler\", serviceLoop));\n \n     GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n     GetMainSignals().RegisterWithMempoolSignals(mempool);\n@@ -1596,7 +1600,7 @@ bool AppInitMain()\n         vImportFiles.push_back(strFile);\n     }\n \n-    threadGroup.create_thread(boost::bind(&ThreadImport, vImportFiles));\n+    threadGroup.emplace_back(std::bind(&ThreadImport, vImportFiles));\n \n     // Wait for genesis block to be processed\n     {"
      },
      {
        "sha": "cce13ed71644535d36f034fe12de0ba186051d5b",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8d86b46c79359e99c6c04b23fa7a61f35090b67/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8d86b46c79359e99c6c04b23fa7a61f35090b67/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=f8d86b46c79359e99c6c04b23fa7a61f35090b67",
        "patch": "@@ -34,7 +34,6 @@\n #endif\n \n #include <atomic>\n-#include <boost/thread/thread.hpp>\n #include <univalue.h>\n \n class CWallet;"
      },
      {
        "sha": "32da417c65e670aca01478fe6901be7391999fe1",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8d86b46c79359e99c6c04b23fa7a61f35090b67/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8d86b46c79359e99c6c04b23fa7a61f35090b67/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=f8d86b46c79359e99c6c04b23fa7a61f35090b67",
        "patch": "@@ -40,8 +40,6 @@\n #include <memory>\n #include <stdint.h>\n \n-#include <boost/thread.hpp>\n-\n #include <QApplication>\n #include <QDebug>\n #include <QLibraryInfo>"
      },
      {
        "sha": "a24c1eca75d085c5fbd93ae0b8c3038318f73fcb",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8d86b46c79359e99c6c04b23fa7a61f35090b67/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8d86b46c79359e99c6c04b23fa7a61f35090b67/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=f8d86b46c79359e99c6c04b23fa7a61f35090b67",
        "patch": "@@ -39,7 +39,6 @@\n #include <univalue.h>\n \n #include <boost/algorithm/string.hpp>\n-#include <boost/thread/thread.hpp> // boost::thread::interrupt\n \n #include <memory>\n #include <mutex>\n@@ -898,7 +897,7 @@ static bool GetUTXOStats(CCoinsView *view, CCoinsStats &stats)\n     uint256 prevkey;\n     std::map<uint32_t, Coin> outputs;\n     while (pcursor->Valid()) {\n-        boost::this_thread::interruption_point();\n+        InterruptionPoint();\n         COutPoint key;\n         Coin coin;\n         if (pcursor->GetKey(key) && pcursor->GetValue(coin)) {\n@@ -1984,7 +1983,7 @@ bool FindScriptPubKey(std::atomic<int>& scan_progress, const std::atomic<bool>&\n         Coin coin;\n         if (!cursor->GetKey(key) || !cursor->GetValue(coin)) return false;\n         if (++count % 8192 == 0) {\n-            boost::this_thread::interruption_point();\n+            InterruptionPoint();\n             if (should_abort) {\n                 // allow to abort the scan via the abort reference\n                 return false;"
      },
      {
        "sha": "1da45b2fc1a51193a31ffe39005d091a7fec47e3",
        "filename": "src/scheduler.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 34,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8d86b46c79359e99c6c04b23fa7a61f35090b67/src/scheduler.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8d86b46c79359e99c6c04b23fa7a61f35090b67/src/scheduler.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.cpp?ref=f8d86b46c79359e99c6c04b23fa7a61f35090b67",
        "patch": "@@ -9,6 +9,7 @@\n \n #include <assert.h>\n #include <boost/bind.hpp>\n+#include <functional>\n #include <utility>\n \n CScheduler::CScheduler() : nThreadsServicingQueue(0), stopRequested(false), stopWhenEmpty(false)\n@@ -20,19 +21,9 @@ CScheduler::~CScheduler()\n     assert(nThreadsServicingQueue == 0);\n }\n \n-\n-#if BOOST_VERSION < 105000\n-static boost::system_time toPosixTime(const boost::chrono::system_clock::time_point& t)\n-{\n-    // Creating the posix_time using from_time_t loses sub-second precision. So rather than exporting the time_point to time_t,\n-    // start with a posix_time at the epoch (0) and add the milliseconds that have passed since then.\n-    return boost::posix_time::from_time_t(0) + boost::posix_time::milliseconds(boost::chrono::duration_cast<boost::chrono::milliseconds>(t.time_since_epoch()).count());\n-}\n-#endif\n-\n void CScheduler::serviceQueue()\n {\n-    boost::unique_lock<boost::mutex> lock(newTaskMutex);\n+    std::unique_lock<std::mutex> lock(newTaskMutex);\n     ++nThreadsServicingQueue;\n \n     // newTaskMutex is locked throughout this loop EXCEPT\n@@ -41,7 +32,7 @@ void CScheduler::serviceQueue()\n     while (!shouldStop()) {\n         try {\n             if (!shouldStop() && taskQueue.empty()) {\n-                reverse_lock<boost::unique_lock<boost::mutex> > rlock(lock);\n+                reverse_lock<std::unique_lock<std::mutex>> rlock(lock);\n                 // Use this chance to get a tiny bit more entropy\n                 RandAddSeedSleep();\n             }\n@@ -52,22 +43,11 @@ void CScheduler::serviceQueue()\n \n             // Wait until either there is a new task, or until\n             // the time of the first item on the queue:\n-\n-// wait_until needs boost 1.50 or later; older versions have timed_wait:\n-#if BOOST_VERSION < 105000\n-            while (!shouldStop() && !taskQueue.empty() &&\n-                   newTaskScheduled.timed_wait(lock, toPosixTime(taskQueue.begin()->first))) {\n-                // Keep waiting until timeout\n-            }\n-#else\n-            // Some boost versions have a conflicting overload of wait_until that returns void.\n-            // Explicitly use a template here to avoid hitting that overload.\n             while (!shouldStop() && !taskQueue.empty()) {\n-                boost::chrono::system_clock::time_point timeToWaitFor = taskQueue.begin()->first;\n-                if (newTaskScheduled.wait_until<>(lock, timeToWaitFor) == boost::cv_status::timeout)\n+                std::chrono::system_clock::time_point timeToWaitFor = taskQueue.begin()->first;\n+                if (newTaskScheduled.wait_until(lock, timeToWaitFor) == std::cv_status::timeout)\n                     break; // Exit loop after timeout, it means we reached the time of the event\n             }\n-#endif\n             // If there are multiple threads, the queue can empty while we're waiting (another\n             // thread may service the task we were waiting on).\n             if (shouldStop() || taskQueue.empty())\n@@ -79,7 +59,7 @@ void CScheduler::serviceQueue()\n             {\n                 // Unlock before calling f, so it can reschedule itself or another task\n                 // without deadlocking:\n-                reverse_lock<boost::unique_lock<boost::mutex> > rlock(lock);\n+                reverse_lock<std::unique_lock<std::mutex>> rlock(lock);\n                 f();\n             }\n         } catch (...) {\n@@ -94,7 +74,7 @@ void CScheduler::serviceQueue()\n void CScheduler::stop(bool drain)\n {\n     {\n-        boost::unique_lock<boost::mutex> lock(newTaskMutex);\n+        std::unique_lock<std::mutex> lock(newTaskMutex);\n         if (drain)\n             stopWhenEmpty = true;\n         else\n@@ -103,18 +83,18 @@ void CScheduler::stop(bool drain)\n     newTaskScheduled.notify_all();\n }\n \n-void CScheduler::schedule(CScheduler::Function f, boost::chrono::system_clock::time_point t)\n+void CScheduler::schedule(CScheduler::Function f, std::chrono::system_clock::time_point t)\n {\n     {\n-        boost::unique_lock<boost::mutex> lock(newTaskMutex);\n+        std::unique_lock<std::mutex> lock(newTaskMutex);\n         taskQueue.insert(std::make_pair(t, f));\n     }\n     newTaskScheduled.notify_one();\n }\n \n void CScheduler::scheduleFromNow(CScheduler::Function f, int64_t deltaMilliSeconds)\n {\n-    schedule(f, boost::chrono::system_clock::now() + boost::chrono::milliseconds(deltaMilliSeconds));\n+    schedule(f, std::chrono::system_clock::now() + std::chrono::milliseconds(deltaMilliSeconds));\n }\n \n static void Repeat(CScheduler* s, CScheduler::Function f, int64_t deltaMilliSeconds)\n@@ -128,10 +108,10 @@ void CScheduler::scheduleEvery(CScheduler::Function f, int64_t deltaMilliSeconds\n     scheduleFromNow(boost::bind(&Repeat, this, f, deltaMilliSeconds), deltaMilliSeconds);\n }\n \n-size_t CScheduler::getQueueInfo(boost::chrono::system_clock::time_point &first,\n-                             boost::chrono::system_clock::time_point &last) const\n+size_t CScheduler::getQueueInfo(std::chrono::system_clock::time_point& first,\n+    std::chrono::system_clock::time_point& last) const\n {\n-    boost::unique_lock<boost::mutex> lock(newTaskMutex);\n+    std::unique_lock<std::mutex> lock(newTaskMutex);\n     size_t result = taskQueue.size();\n     if (!taskQueue.empty()) {\n         first = taskQueue.begin()->first;\n@@ -141,7 +121,7 @@ size_t CScheduler::getQueueInfo(boost::chrono::system_clock::time_point &first,\n }\n \n bool CScheduler::AreThreadsServicingQueue() const {\n-    boost::unique_lock<boost::mutex> lock(newTaskMutex);\n+    std::unique_lock<std::mutex> lock(newTaskMutex);\n     return nThreadsServicingQueue;\n }\n "
      },
      {
        "sha": "c29fe7d56ab21aed1477bd45e1c28aba254eec14",
        "filename": "src/scheduler.h",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8d86b46c79359e99c6c04b23fa7a61f35090b67/src/scheduler.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8d86b46c79359e99c6c04b23fa7a61f35090b67/src/scheduler.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.h?ref=f8d86b46c79359e99c6c04b23fa7a61f35090b67",
        "patch": "@@ -10,11 +10,11 @@\n // boost::thread / boost::chrono should be ported to std::thread / std::chrono\n // when we support C++11.\n //\n-#include <boost/chrono/chrono.hpp>\n-#include <boost/thread.hpp>\n+#include <list>\n #include <map>\n \n #include <sync.h>\n+#include <threadinterrupt.h>\n \n //\n // Simple class for background tasks that should be run\n@@ -43,7 +43,7 @@ class CScheduler\n     typedef std::function<void()> Function;\n \n     // Call func at/after time t\n-    void schedule(Function f, boost::chrono::system_clock::time_point t=boost::chrono::system_clock::now());\n+    void schedule(Function f, std::chrono::system_clock::time_point t = std::chrono::system_clock::now());\n \n     // Convenience method: call f once deltaSeconds from now\n     void scheduleFromNow(Function f, int64_t deltaMilliSeconds);\n@@ -68,16 +68,16 @@ class CScheduler\n \n     // Returns number of tasks waiting to be serviced,\n     // and first and last task times\n-    size_t getQueueInfo(boost::chrono::system_clock::time_point &first,\n-                        boost::chrono::system_clock::time_point &last) const;\n+    size_t getQueueInfo(std::chrono::system_clock::time_point& first,\n+        std::chrono::system_clock::time_point& last) const;\n \n     // Returns true if there are threads actively running in serviceQueue()\n     bool AreThreadsServicingQueue() const;\n \n private:\n-    std::multimap<boost::chrono::system_clock::time_point, Function> taskQueue;\n-    boost::condition_variable newTaskScheduled;\n-    mutable boost::mutex newTaskMutex;\n+    std::multimap<std::chrono::system_clock::time_point, Function> taskQueue;\n+    std::condition_variable newTaskScheduled;\n+    mutable std::mutex newTaskMutex;\n     int nThreadsServicingQueue;\n     bool stopRequested;\n     bool stopWhenEmpty;"
      },
      {
        "sha": "1c71c0254c3f83cf95adf6cad91be150e9e253e4",
        "filename": "src/test/cuckoocache_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8d86b46c79359e99c6c04b23fa7a61f35090b67/src/test/cuckoocache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8d86b46c79359e99c6c04b23fa7a61f35090b67/src/test/cuckoocache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/cuckoocache_tests.cpp?ref=f8d86b46c79359e99c6c04b23fa7a61f35090b67",
        "patch": "@@ -2,10 +2,11 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #include <boost/test/unit_test.hpp>\n+#include <boost/thread.hpp>\n #include <cuckoocache.h>\n+#include <random.h>\n #include <script/sigcache.h>\n #include <test/test_bitcoin.h>\n-#include <random.h>\n #include <thread>\n \n /** Test Suite for CuckooCache"
      },
      {
        "sha": "39016a04329f0b9e88a1849e216da3b5f07d17a6",
        "filename": "src/test/reverselock_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8d86b46c79359e99c6c04b23fa7a61f35090b67/src/test/reverselock_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8d86b46c79359e99c6c04b23fa7a61f35090b67/src/test/reverselock_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/reverselock_tests.cpp?ref=f8d86b46c79359e99c6c04b23fa7a61f35090b67",
        "patch": "@@ -11,21 +11,21 @@ BOOST_FIXTURE_TEST_SUITE(reverselock_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(reverselock_basics)\n {\n-    boost::mutex mutex;\n-    boost::unique_lock<boost::mutex> lock(mutex);\n+    std::mutex mutex;\n+    std::unique_lock<std::mutex> lock(mutex);\n \n     BOOST_CHECK(lock.owns_lock());\n     {\n-        reverse_lock<boost::unique_lock<boost::mutex> > rlock(lock);\n+        reverse_lock<std::unique_lock<std::mutex>> rlock(lock);\n         BOOST_CHECK(!lock.owns_lock());\n     }\n     BOOST_CHECK(lock.owns_lock());\n }\n \n BOOST_AUTO_TEST_CASE(reverselock_errors)\n {\n-    boost::mutex mutex;\n-    boost::unique_lock<boost::mutex> lock(mutex);\n+    std::mutex mutex;\n+    std::unique_lock<std::mutex> lock(mutex);\n \n     // Make sure trying to reverse lock an unlocked lock fails\n     lock.unlock();\n@@ -34,7 +34,7 @@ BOOST_AUTO_TEST_CASE(reverselock_errors)\n \n     bool failed = false;\n     try {\n-        reverse_lock<boost::unique_lock<boost::mutex> > rlock(lock);\n+        reverse_lock<std::unique_lock<std::mutex>> rlock(lock);\n     } catch(...) {\n         failed = true;\n     }\n@@ -49,7 +49,7 @@ BOOST_AUTO_TEST_CASE(reverselock_errors)\n     lock.lock();\n     BOOST_CHECK(lock.owns_lock());\n     {\n-        reverse_lock<boost::unique_lock<boost::mutex> > rlock(lock);\n+        reverse_lock<std::unique_lock<std::mutex>> rlock(lock);\n         BOOST_CHECK(!lock.owns_lock());\n     }\n "
      },
      {
        "sha": "80b38571fab53cb4326edc11dc07b2ff84a28ff1",
        "filename": "src/test/scheduler_tests.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 37,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8d86b46c79359e99c6c04b23fa7a61f35090b67/src/test/scheduler_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8d86b46c79359e99c6c04b23fa7a61f35090b67/src/test/scheduler_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/scheduler_tests.cpp?ref=f8d86b46c79359e99c6c04b23fa7a61f35090b67",
        "patch": "@@ -4,38 +4,30 @@\n \n #include <random.h>\n #include <scheduler.h>\n+#include <threadinterrupt.h>\n \n #include <test/test_bitcoin.h>\n \n-#include <boost/bind.hpp>\n-#include <boost/thread.hpp>\n #include <boost/test/unit_test.hpp>\n \n BOOST_AUTO_TEST_SUITE(scheduler_tests)\n \n-static void microTask(CScheduler& s, boost::mutex& mutex, int& counter, int delta, boost::chrono::system_clock::time_point rescheduleTime)\n+static void microTask(CScheduler& s, std::mutex& mutex, int& counter, int delta, std::chrono::system_clock::time_point rescheduleTime)\n {\n     {\n-        boost::unique_lock<boost::mutex> lock(mutex);\n+        std::unique_lock<std::mutex> lock(mutex);\n         counter += delta;\n     }\n-    boost::chrono::system_clock::time_point noTime = boost::chrono::system_clock::time_point::min();\n+    std::chrono::system_clock::time_point noTime = std::chrono::system_clock::time_point::min();\n     if (rescheduleTime != noTime) {\n-        CScheduler::Function f = boost::bind(&microTask, boost::ref(s), boost::ref(mutex), boost::ref(counter), -delta + 1, noTime);\n+        CScheduler::Function f = std::bind(&microTask, std::ref(s), std::ref(mutex), std::ref(counter), -delta + 1, noTime);\n         s.schedule(f, rescheduleTime);\n     }\n }\n \n static void MicroSleep(uint64_t n)\n {\n-#if defined(HAVE_WORKING_BOOST_SLEEP_FOR)\n-    boost::this_thread::sleep_for(boost::chrono::microseconds(n));\n-#elif defined(HAVE_WORKING_BOOST_SLEEP)\n-    boost::this_thread::sleep(boost::posix_time::microseconds(n));\n-#else\n-    //should never get here\n-    #error missing boost sleep implementation\n-#endif\n+    InterruptibleSleep(std::chrono::microseconds(n));\n }\n \n BOOST_AUTO_TEST_CASE(manythreads)\n@@ -52,26 +44,26 @@ BOOST_AUTO_TEST_CASE(manythreads)\n     // counters should sum to the number of initial tasks performed.\n     CScheduler microTasks;\n \n-    boost::mutex counterMutex[10];\n+    std::mutex counterMutex[10];\n     int counter[10] = { 0 };\n     FastRandomContext rng{/* fDeterministic */ true};\n     auto zeroToNine = [](FastRandomContext& rc) -> int { return rc.randrange(10); }; // [0, 9]\n     auto randomMsec = [](FastRandomContext& rc) -> int { return -11 + (int)rc.randrange(1012); }; // [-11, 1000]\n     auto randomDelta = [](FastRandomContext& rc) -> int { return -1000 + (int)rc.randrange(2001); }; // [-1000, 1000]\n \n-    boost::chrono::system_clock::time_point start = boost::chrono::system_clock::now();\n-    boost::chrono::system_clock::time_point now = start;\n-    boost::chrono::system_clock::time_point first, last;\n+    std::chrono::system_clock::time_point start = std::chrono::system_clock::now();\n+    std::chrono::system_clock::time_point now = start;\n+    std::chrono::system_clock::time_point first, last;\n     size_t nTasks = microTasks.getQueueInfo(first, last);\n     BOOST_CHECK(nTasks == 0);\n \n     for (int i = 0; i < 100; ++i) {\n-        boost::chrono::system_clock::time_point t = now + boost::chrono::microseconds(randomMsec(rng));\n-        boost::chrono::system_clock::time_point tReschedule = now + boost::chrono::microseconds(500 + randomMsec(rng));\n+        std::chrono::system_clock::time_point t = now + std::chrono::microseconds(randomMsec(rng));\n+        std::chrono::system_clock::time_point tReschedule = now + std::chrono::microseconds(500 + randomMsec(rng));\n         int whichCounter = zeroToNine(rng);\n-        CScheduler::Function f = boost::bind(&microTask, boost::ref(microTasks),\n-                                             boost::ref(counterMutex[whichCounter]), boost::ref(counter[whichCounter]),\n-                                             randomDelta(rng), tReschedule);\n+        CScheduler::Function f = std::bind(&microTask, std::ref(microTasks),\n+            std::ref(counterMutex[whichCounter]), std::ref(counter[whichCounter]),\n+            randomDelta(rng), tReschedule);\n         microTasks.schedule(f, t);\n     }\n     nTasks = microTasks.getQueueInfo(first, last);\n@@ -80,29 +72,31 @@ BOOST_AUTO_TEST_CASE(manythreads)\n     BOOST_CHECK(last > now);\n \n     // As soon as these are created they will start running and servicing the queue\n-    boost::thread_group microThreads;\n-    for (int i = 0; i < 5; i++)\n-        microThreads.create_thread(boost::bind(&CScheduler::serviceQueue, &microTasks));\n+    std::vector<InterruptibleThread> microThreads;\n+    for (int i = 0; i < 5; i++) {\n+        microThreads.emplace_back(std::bind(&CScheduler::serviceQueue, &microTasks));\n+    }\n \n     MicroSleep(600);\n-    now = boost::chrono::system_clock::now();\n+    now = std::chrono::system_clock::now();\n \n     // More threads and more tasks:\n     for (int i = 0; i < 5; i++)\n-        microThreads.create_thread(boost::bind(&CScheduler::serviceQueue, &microTasks));\n+        microThreads.emplace_back(std::bind(&CScheduler::serviceQueue, &microTasks));\n     for (int i = 0; i < 100; i++) {\n-        boost::chrono::system_clock::time_point t = now + boost::chrono::microseconds(randomMsec(rng));\n-        boost::chrono::system_clock::time_point tReschedule = now + boost::chrono::microseconds(500 + randomMsec(rng));\n+        std::chrono::system_clock::time_point t = now + std::chrono::microseconds(randomMsec(rng));\n+        std::chrono::system_clock::time_point tReschedule = now + std::chrono::microseconds(500 + randomMsec(rng));\n         int whichCounter = zeroToNine(rng);\n-        CScheduler::Function f = boost::bind(&microTask, boost::ref(microTasks),\n-                                             boost::ref(counterMutex[whichCounter]), boost::ref(counter[whichCounter]),\n-                                             randomDelta(rng), tReschedule);\n+        CScheduler::Function f = std::bind(&microTask, std::ref(microTasks),\n+            std::ref(counterMutex[whichCounter]), std::ref(counter[whichCounter]),\n+            randomDelta(rng), tReschedule);\n         microTasks.schedule(f, t);\n     }\n \n     // Drain the task queue then exit threads\n     microTasks.stop(true);\n-    microThreads.join_all(); // ... wait until all the threads are done\n+    for (auto& th : microThreads)\n+        th.join(); // ... wait until all the threads are done\n \n     int counterSum = 0;\n     for (int i = 0; i < 10; i++) {\n@@ -124,9 +118,9 @@ BOOST_AUTO_TEST_CASE(singlethreadedscheduler_ordered)\n     // if the queues only permit execution of one task at once then\n     // the extra threads should effectively be doing nothing\n     // if they don't we'll get out of order behaviour\n-    boost::thread_group threads;\n+    std::vector<InterruptibleThread> threads;\n     for (int i = 0; i < 5; ++i) {\n-        threads.create_thread(boost::bind(&CScheduler::serviceQueue, &scheduler));\n+        threads.emplace_back(std::bind(&CScheduler::serviceQueue, &scheduler));\n     }\n \n     // these are not atomic, if SinglethreadedSchedulerClient prevents\n@@ -150,7 +144,8 @@ BOOST_AUTO_TEST_CASE(singlethreadedscheduler_ordered)\n \n     // finish up\n     scheduler.stop(true);\n-    threads.join_all();\n+    for (auto& th : threads)\n+        th.join();\n \n     BOOST_CHECK_EQUAL(counter1, 100);\n     BOOST_CHECK_EQUAL(counter2, 100);"
      },
      {
        "sha": "8404de437cf29b311e12fbe1b70a6e63d856fefa",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 12,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8d86b46c79359e99c6c04b23fa7a61f35090b67/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8d86b46c79359e99c6c04b23fa7a61f35090b67/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=f8d86b46c79359e99c6c04b23fa7a61f35090b67",
        "patch": "@@ -92,7 +92,7 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n \n         // We have to run a scheduler thread to prevent ActivateBestChain\n         // from blocking due to queue overrun.\n-        threadGroup.create_thread(boost::bind(&CScheduler::serviceQueue, &scheduler));\n+        threadGroup.emplace_back(std::bind(&CScheduler::serviceQueue, &scheduler));\n         GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n \n         mempool.setSanityCheck(1.0);\n@@ -118,17 +118,20 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n TestingSetup::~TestingSetup()\n {\n     InterruptScriptCheck();\n-        threadGroup.interrupt_all();\n-        StopScriptCheck();\n-        threadGroup.join_all();\n-        GetMainSignals().FlushBackgroundCallbacks();\n-        GetMainSignals().UnregisterBackgroundSignalScheduler();\n-        g_connman.reset();\n-        peerLogic.reset();\n-        UnloadBlockIndex();\n-        pcoinsTip.reset();\n-        pcoinsdbview.reset();\n-        pblocktree.reset();\n+    for (auto& th : threadGroup)\n+        th.interrupt();\n+    scheduler.stop();\n+    StopScriptCheck();\n+    for (auto& th : threadGroup)\n+        th.join();\n+    GetMainSignals().FlushBackgroundCallbacks();\n+    GetMainSignals().UnregisterBackgroundSignalScheduler();\n+    g_connman.reset();\n+    peerLogic.reset();\n+    UnloadBlockIndex();\n+    pcoinsTip.reset();\n+    pcoinsdbview.reset();\n+    pblocktree.reset();\n }\n \n TestChain100Setup::TestChain100Setup() : TestingSetup(CBaseChainParams::REGTEST)"
      },
      {
        "sha": "b6ef8de96b5500ecf54d2ae20da25434d6d075c5",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8d86b46c79359e99c6c04b23fa7a61f35090b67/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8d86b46c79359e99c6c04b23fa7a61f35090b67/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=f8d86b46c79359e99c6c04b23fa7a61f35090b67",
        "patch": "@@ -16,8 +16,6 @@\n \n #include <memory>\n \n-#include <boost/thread.hpp>\n-\n extern uint256 insecure_rand_seed;\n extern FastRandomContext insecure_rand_ctx;\n \n@@ -66,7 +64,7 @@ struct CConnmanTest {\n \n class PeerLogicValidation;\n struct TestingSetup: public BasicTestingSetup {\n-    boost::thread_group threadGroup;\n+    std::vector<InterruptibleThread> threadGroup;\n     CConnman* connman;\n     CScheduler scheduler;\n     std::unique_ptr<PeerLogicValidation> peerLogic;"
      },
      {
        "sha": "1ea2362c9a39b88121a1ba146da52d3cf8574878",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8d86b46c79359e99c6c04b23fa7a61f35090b67/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8d86b46c79359e99c6c04b23fa7a61f35090b67/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=f8d86b46c79359e99c6c04b23fa7a61f35090b67",
        "patch": "@@ -152,9 +152,9 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n     // create a bunch of threads that repeatedly process a block generated above at random\n     // this will create parallelism and randomness inside validation - the ValidationInterface\n     // will subscribe to events generated during block validation and assert on ordering invariance\n-    boost::thread_group threads;\n+    std::vector<std::thread> threads;\n     for (int i = 0; i < 10; i++) {\n-        threads.create_thread([&blocks]() {\n+        threads.emplace_back([&blocks]() {\n             bool ignored;\n             for (int i = 0; i < 1000; i++) {\n                 auto block = blocks[GetRand(blocks.size() - 1)];\n@@ -171,7 +171,8 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n         });\n     }\n \n-    threads.join_all();\n+    for (auto& th : threads)\n+        th.join();\n     while (GetMainSignals().CallbacksPending() > 0) {\n         MilliSleep(100);\n     }"
      },
      {
        "sha": "6ae3f2b1af53460ccbf7ea78350ef53c8958f946",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8d86b46c79359e99c6c04b23fa7a61f35090b67/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8d86b46c79359e99c6c04b23fa7a61f35090b67/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=f8d86b46c79359e99c6c04b23fa7a61f35090b67",
        "patch": "@@ -16,8 +16,6 @@\n \n #include <stdint.h>\n \n-#include <boost/thread.hpp>\n-\n static const char DB_COIN = 'C';\n static const char DB_COINS = 'c';\n static const char DB_BLOCK_FILES = 'f';\n@@ -254,7 +252,7 @@ bool CBlockTreeDB::LoadBlockIndexGuts(const Consensus::Params& consensusParams,\n \n     // Load mapBlockIndex\n     while (pcursor->Valid()) {\n-        boost::this_thread::interruption_point();\n+        InterruptionPoint();\n         std::pair<char, uint256> key;\n         if (pcursor->GetKey(key) && key.first == DB_BLOCK_INDEX) {\n             CDiskBlockIndex diskindex;\n@@ -365,7 +363,7 @@ bool CCoinsViewDB::Upgrade() {\n     std::pair<unsigned char, uint256> key;\n     std::pair<unsigned char, uint256> prev_key = {DB_COINS, uint256()};\n     while (pcursor->Valid()) {\n-        boost::this_thread::interruption_point();\n+        InterruptionPoint();\n         if (ShutdownRequested()) {\n             break;\n         }"
      },
      {
        "sha": "eb155968fac1be4558a9ad980a26a150fe0ea3dc",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8d86b46c79359e99c6c04b23fa7a61f35090b67/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8d86b46c79359e99c6c04b23fa7a61f35090b67/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=f8d86b46c79359e99c6c04b23fa7a61f35090b67",
        "patch": "@@ -73,7 +73,6 @@\n #include <malloc.h>\n #endif\n \n-#include <boost/thread.hpp>\n #include <openssl/crypto.h>\n #include <openssl/rand.h>\n #include <openssl/conf.h>"
      },
      {
        "sha": "f2c4725f2dd35cc0ba040e758762cfd787f45711",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8d86b46c79359e99c6c04b23fa7a61f35090b67/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8d86b46c79359e99c6c04b23fa7a61f35090b67/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=f8d86b46c79359e99c6c04b23fa7a61f35090b67",
        "patch": "@@ -18,6 +18,7 @@\n #include <fs.h>\n #include <logging.h>\n #include <sync.h>\n+#include <threadinterrupt.h>\n #include <tinyformat.h>\n #include <utilmemory.h>\n #include <utiltime.h>\n@@ -32,8 +33,6 @@\n #include <utility>\n #include <vector>\n \n-#include <boost/thread/condition_variable.hpp> // for boost::thread_interrupted\n-\n // Application startup time (used for uptime calculation)\n int64_t GetStartupTime();\n \n@@ -323,9 +322,7 @@ template <typename Callable> void TraceThread(const char* name,  Callable func)\n         LogPrintf(\"%s thread start\\n\", name);\n         func();\n         LogPrintf(\"%s thread exit\\n\", name);\n-    }\n-    catch (const boost::thread_interrupted&)\n-    {\n+    } catch (const ThreadInterrupted&) {\n         LogPrintf(\"%s thread interrupt\\n\", name);\n         throw;\n     }"
      },
      {
        "sha": "d313851cadf28931cb8143684e7b33450084fbf7",
        "filename": "src/utiltime.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 20,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8d86b46c79359e99c6c04b23fa7a61f35090b67/src/utiltime.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8d86b46c79359e99c6c04b23fa7a61f35090b67/src/utiltime.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utiltime.cpp?ref=f8d86b46c79359e99c6c04b23fa7a61f35090b67",
        "patch": "@@ -10,9 +10,8 @@\n #include <utiltime.h>\n \n #include <atomic>\n-#include <boost/date_time/posix_time/posix_time.hpp>\n-#include <boost/thread.hpp>\n #include <ctime>\n+#include <threadinterrupt.h>\n #include <tinyformat.h>\n \n static std::atomic<int64_t> nMockTime(0); //!< For unit testing\n@@ -39,16 +38,14 @@ int64_t GetMockTime()\n \n int64_t GetTimeMillis()\n {\n-    int64_t now = (boost::posix_time::microsec_clock::universal_time() -\n-                   boost::posix_time::ptime(boost::gregorian::date(1970,1,1))).total_milliseconds();\n+    int64_t now = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::system_clock::now().time_since_epoch()).count();\n     assert(now > 0);\n     return now;\n }\n \n int64_t GetTimeMicros()\n {\n-    int64_t now = (boost::posix_time::microsec_clock::universal_time() -\n-                   boost::posix_time::ptime(boost::gregorian::date(1970,1,1))).total_microseconds();\n+    int64_t now = std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();\n     assert(now > 0);\n     return now;\n }\n@@ -60,20 +57,7 @@ int64_t GetSystemTimeInSeconds()\n \n void MilliSleep(int64_t n)\n {\n-\n-/**\n- * Boost's sleep_for was uninterruptible when backed by nanosleep from 1.50\n- * until fixed in 1.52. Use the deprecated sleep method for the broken case.\n- * See: https://svn.boost.org/trac/boost/ticket/7238\n- */\n-#if defined(HAVE_WORKING_BOOST_SLEEP_FOR)\n-    boost::this_thread::sleep_for(boost::chrono::milliseconds(n));\n-#elif defined(HAVE_WORKING_BOOST_SLEEP)\n-    boost::this_thread::sleep(boost::posix_time::milliseconds(n));\n-#else\n-//should never get here\n-#error missing boost sleep implementation\n-#endif\n+    InterruptibleSleep(std::chrono::milliseconds(n));\n }\n \n std::string FormatISO8601DateTime(int64_t nTime) {"
      },
      {
        "sha": "40ba54cdcea71c6e74800b43393a3e86c0428c7c",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8d86b46c79359e99c6c04b23fa7a61f35090b67/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8d86b46c79359e99c6c04b23fa7a61f35090b67/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=f8d86b46c79359e99c6c04b23fa7a61f35090b67",
        "patch": "@@ -45,7 +45,6 @@\n #include <sstream>\n \n #include <boost/algorithm/string/replace.hpp>\n-#include <boost/thread.hpp>\n \n #if defined(NDEBUG)\n # error \"Bitcoin cannot be compiled without assertions.\"\n@@ -2683,7 +2682,7 @@ bool CChainState::ActivateBestChain(CValidationState &state, const CChainParams&\n     CBlockIndex *pindexNewTip = nullptr;\n     int nStopAtHeight = gArgs.GetArg(\"-stopatheight\", DEFAULT_STOPATHEIGHT);\n     do {\n-        boost::this_thread::interruption_point();\n+        InterruptionPoint();\n \n         if (GetMainSignals().CallbacksPending() > 10) {\n             // Block until the validation queue drains. This should largely\n@@ -3990,7 +3989,7 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n     int reportDone = 0;\n     LogPrintf(\"[0%%]...\"); /* Continued */\n     for (pindex = chainActive.Tip(); pindex && pindex->pprev; pindex = pindex->pprev) {\n-        boost::this_thread::interruption_point();\n+        InterruptionPoint();\n         int percentageDone = std::max(1, std::min(99, (int)(((double)(chainActive.Height() - pindex->nHeight)) / (double)nCheckDepth * (nCheckLevel >= 4 ? 50 : 100))));\n         if (reportDone < percentageDone/10) {\n             // report every 10% step\n@@ -4048,7 +4047,7 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n     // check level 4: try reconnecting blocks\n     if (nCheckLevel >= 4) {\n         while (pindex != chainActive.Tip()) {\n-            boost::this_thread::interruption_point();\n+            InterruptionPoint();\n             uiInterface.ShowProgress(_(\"Verifying blocks...\"), std::max(1, std::min(99, 100 - (int)(((double)(chainActive.Height() - pindex->nHeight)) / (double)nCheckDepth * 50))), false);\n             pindex = chainActive.Next(pindex);\n             CBlock block;\n@@ -4365,7 +4364,7 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n         CBufferedFile blkdat(fileIn, 2*MAX_BLOCK_SERIALIZED_SIZE, MAX_BLOCK_SERIALIZED_SIZE+8, SER_DISK, CLIENT_VERSION);\n         uint64_t nRewind = blkdat.GetPos();\n         while (!blkdat.eof()) {\n-            boost::this_thread::interruption_point();\n+            InterruptionPoint();\n \n             blkdat.SetPos(nRewind);\n             nRewind++; // start one byte further next time, in case of failure"
      },
      {
        "sha": "7b72ceaeb44b2fe871235134217e96bd3b7c19f3",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8d86b46c79359e99c6c04b23fa7a61f35090b67/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8d86b46c79359e99c6c04b23fa7a61f35090b67/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=f8d86b46c79359e99c6c04b23fa7a61f35090b67",
        "patch": "@@ -17,8 +17,6 @@\n #include <sys/stat.h>\n #endif\n \n-#include <boost/thread.hpp>\n-\n namespace {\n \n //! Make sure database has a unique fileid within the environment. If it\n@@ -129,7 +127,7 @@ bool BerkeleyEnvironment::Open(bool retry)\n     if (fDbEnvInit)\n         return true;\n \n-    boost::this_thread::interruption_point();\n+    InterruptionPoint();\n \n     fs::path pathIn = strPath;\n     TryCreateDirectories(pathIn);\n@@ -203,7 +201,7 @@ void BerkeleyEnvironment::MakeMock()\n     if (fDbEnvInit)\n         throw std::runtime_error(\"BerkeleyEnvironment::MakeMock: Already initialized\");\n \n-    boost::this_thread::interruption_point();\n+    InterruptionPoint();\n \n     LogPrint(BCLog::DB, \"BerkeleyEnvironment::MakeMock\\n\");\n \n@@ -751,7 +749,7 @@ bool BerkeleyBatch::PeriodicFlush(BerkeleyDatabase& database)\n \n         if (nRefCount == 0)\n         {\n-            boost::this_thread::interruption_point();\n+            InterruptionPoint();\n             std::map<std::string, int>::iterator mi = env->mapFileUseCount.find(strFile);\n             if (mi != env->mapFileUseCount.end())\n             {"
      },
      {
        "sha": "8ae45d042211fe01fd25fad5ff06da56c30bcb8c",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8d86b46c79359e99c6c04b23fa7a61f35090b67/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8d86b46c79359e99c6c04b23fa7a61f35090b67/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=f8d86b46c79359e99c6c04b23fa7a61f35090b67",
        "patch": "@@ -19,8 +19,6 @@\n #include <atomic>\n #include <string>\n \n-#include <boost/thread.hpp>\n-\n //\n // WalletBatch\n //\n@@ -495,8 +493,7 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n                 pwallet->WalletLogPrintf(\"%s\\n\", strErr);\n         }\n         pcursor->close();\n-    }\n-    catch (const boost::thread_interrupted&) {\n+    } catch (const ThreadInterrupted&) {\n         throw;\n     }\n     catch (...) {\n@@ -584,8 +581,7 @@ DBErrors WalletBatch::FindWalletTx(std::vector<uint256>& vTxHash, std::vector<CW\n             }\n         }\n         pcursor->close();\n-    }\n-    catch (const boost::thread_interrupted&) {\n+    } catch (const ThreadInterrupted&) {\n         throw;\n     }\n     catch (...) {"
      },
      {
        "sha": "36b7b031fd2a2a52d1b357edb2803ca6faac9cac",
        "filename": "test/lint/lint-circular-dependencies.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8d86b46c79359e99c6c04b23fa7a61f35090b67/test/lint/lint-circular-dependencies.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8d86b46c79359e99c6c04b23fa7a61f35090b67/test/lint/lint-circular-dependencies.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-circular-dependencies.sh?ref=f8d86b46c79359e99c6c04b23fa7a61f35090b67",
        "patch": "@@ -40,6 +40,7 @@ EXPECTED_CIRCULAR_DEPENDENCIES=(\n     \"qt/addressbookpage -> qt/bitcoingui -> qt/walletview -> qt/signverifymessagedialog -> qt/addressbookpage\"\n     \"qt/guiutil -> qt/walletmodel -> qt/optionsmodel -> qt/intro -> qt/guiutil\"\n     \"qt/addressbookpage -> qt/bitcoingui -> qt/walletview -> qt/sendcoinsdialog -> qt/sendcoinsentry -> qt/addressbookpage\"\n+    \"logging -> utiltime -> threadinterrupt -> sync -> logging\"\n )\n \n EXIT_CODE=0"
      },
      {
        "sha": "c1f2070857888bd9b13a4ffaef2f29e7ae2312ef",
        "filename": "test/lint/lint-includes.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8d86b46c79359e99c6c04b23fa7a61f35090b67/test/lint/lint-includes.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8d86b46c79359e99c6c04b23fa7a61f35090b67/test/lint/lint-includes.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-includes.sh?ref=f8d86b46c79359e99c6c04b23fa7a61f35090b67",
        "patch": "@@ -51,7 +51,6 @@ EXPECTED_BOOST_INCLUDES=(\n     boost/algorithm/string/replace.hpp\n     boost/algorithm/string/split.hpp\n     boost/bind.hpp\n-    boost/chrono/chrono.hpp\n     boost/date_time/posix_time/posix_time.hpp\n     boost/filesystem.hpp\n     boost/filesystem/fstream.hpp\n@@ -67,8 +66,6 @@ EXPECTED_BOOST_INCLUDES=(\n     boost/signals2/signal.hpp\n     boost/test/unit_test.hpp\n     boost/thread.hpp\n-    boost/thread/condition_variable.hpp\n-    boost/thread/thread.hpp\n     boost/variant.hpp\n     boost/variant/apply_visitor.hpp\n     boost/variant/static_visitor.hpp"
      }
    ]
  },
  {
    "sha": "8f4cbf38a57533c642d1b9dc90b05955354d616d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZjRjYmYzOGE1NzUzM2M2NDJkMWI5ZGM5MGIwNTk1NTM1NGQ2MTZk",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-10-16T14:26:55Z"
      },
      "committer": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-11-02T15:27:25Z"
      },
      "message": "msvc: Use wildcard on src files for bench_bitcoin.exe",
      "tree": {
        "sha": "b9d5c81fa21088004a5d0f2bd4d6cbea334d1b91",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b9d5c81fa21088004a5d0f2bd4d6cbea334d1b91"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8f4cbf38a57533c642d1b9dc90b05955354d616d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f4cbf38a57533c642d1b9dc90b05955354d616d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8f4cbf38a57533c642d1b9dc90b05955354d616d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f4cbf38a57533c642d1b9dc90b05955354d616d/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f8d86b46c79359e99c6c04b23fa7a61f35090b67",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8d86b46c79359e99c6c04b23fa7a61f35090b67",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f8d86b46c79359e99c6c04b23fa7a61f35090b67"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 1,
      "deletions": 15
    },
    "files": [
      {
        "sha": "7353584eb6103f5a0fb4bc21e1c9aa148403387c",
        "filename": "build_msvc/bench_bitcoin/bench_bitcoin.vcxproj",
        "status": "modified",
        "additions": 1,
        "deletions": 15,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f4cbf38a57533c642d1b9dc90b05955354d616d/build_msvc/bench_bitcoin/bench_bitcoin.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f4cbf38a57533c642d1b9dc90b05955354d616d/build_msvc/bench_bitcoin/bench_bitcoin.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bench_bitcoin/bench_bitcoin.vcxproj?ref=8f4cbf38a57533c642d1b9dc90b05955354d616d",
        "patch": "@@ -20,21 +20,7 @@\n     </ProjectConfiguration>\n   </ItemGroup>\n   <ItemGroup>\n-    <ClCompile Include=\"..\\..\\src\\bench\\base58.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\bench\\bech32.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\bench\\bench.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\bench\\bench_bitcoin.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\bench\\ccoins_caching.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\bench\\checkblock.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\bench\\checkqueue.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\bench\\coin_selection.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\bench\\crypto_hash.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\bench\\examples.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\bench\\lockedpool.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\bench\\mempool_eviction.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\bench\\merkle_root.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\bench\\rollingbloom.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\bench\\verify_script.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\bench\\*.cpp\" />\n   </ItemGroup>\n   <ItemGroup>\n     <ProjectReference Include=\"..\\libbitcoinconsensus\\libbitcoinconsensus.vcxproj\">"
      }
    ]
  },
  {
    "sha": "692dee0963e06948e7e71acc597d04f71cd5b47f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OTJkZWUwOTYzZTA2OTQ4ZTdlNzFhY2M1OTdkMDRmNzFjZDViNDdm",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-10-16T15:50:56Z"
      },
      "committer": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-11-02T15:27:25Z"
      },
      "message": "build: Remove boost::chrono from build system",
      "tree": {
        "sha": "4e711f2566d7eb9d6db413086539610aaf6d63d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4e711f2566d7eb9d6db413086539610aaf6d63d7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/692dee0963e06948e7e71acc597d04f71cd5b47f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/692dee0963e06948e7e71acc597d04f71cd5b47f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/692dee0963e06948e7e71acc597d04f71cd5b47f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/692dee0963e06948e7e71acc597d04f71cd5b47f/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8f4cbf38a57533c642d1b9dc90b05955354d616d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f4cbf38a57533c642d1b9dc90b05955354d616d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8f4cbf38a57533c642d1b9dc90b05955354d616d"
      }
    ],
    "stats": {
      "total": 180,
      "additions": 5,
      "deletions": 175
    },
    "files": [
      {
        "sha": "9d20e96adf416eb7b87b57d23ebe52eda66bbc53",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/692dee0963e06948e7e71acc597d04f71cd5b47f/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/692dee0963e06948e7e71acc597d04f71cd5b47f/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=692dee0963e06948e7e71acc597d04f71cd5b47f",
        "patch": "@@ -99,15 +99,15 @@ jobs:\n     - stage: test\n       env: >-\n         HOST=x86_64-unknown-linux-gnu\n-        PACKAGES=\"python3-zmq qtbase5-dev qttools5-dev-tools libssl1.0-dev libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libprotobuf-dev protobuf-compiler libqrencode-dev\"\n+        PACKAGES=\"python3-zmq qtbase5-dev qttools5-dev-tools libssl1.0-dev libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libprotobuf-dev protobuf-compiler libqrencode-dev\"\n         NO_DEPENDS=1\n         GOAL=\"install\"\n         BITCOIN_CONFIG=\"--enable-zmq --with-incompatible-bdb --enable-glibc-back-compat --enable-reduce-exports --with-gui=qt5 CPPFLAGS=-DDEBUG_LOCKORDER\"\n # x86_64 Linux (sanitizers)\n     - stage: test\n       env: >-\n         HOST=x86_64-unknown-linux-gnu\n-        PACKAGES=\"clang python3-zmq qtbase5-dev qttools5-dev-tools libssl1.0-dev libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libprotobuf-dev protobuf-compiler libqrencode-dev\"\n+        PACKAGES=\"clang python3-zmq qtbase5-dev qttools5-dev-tools libssl1.0-dev libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libprotobuf-dev protobuf-compiler libqrencode-dev\"\n         NO_DEPENDS=1\n         RUN_BENCH=true\n         RUN_FUNCTIONAL_TESTS=false # Disabled for now, can be combined with the other x86_64 linux NO_DEPENDS job when functional tests pass the sanitizers"
      },
      {
        "sha": "6ea77b9b3eff0290afa7de7dbb18670dfede735c",
        "filename": "build-aux/m4/ax_boost_chrono.m4",
        "status": "removed",
        "additions": 0,
        "deletions": 118,
        "changes": 118,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f4cbf38a57533c642d1b9dc90b05955354d616d/build-aux/m4/ax_boost_chrono.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f4cbf38a57533c642d1b9dc90b05955354d616d/build-aux/m4/ax_boost_chrono.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_boost_chrono.m4?ref=8f4cbf38a57533c642d1b9dc90b05955354d616d",
        "patch": "@@ -1,118 +0,0 @@\n-# ===========================================================================\n-#     https://www.gnu.org/software/autoconf-archive/ax_boost_chrono.html\n-# ===========================================================================\n-#\n-# SYNOPSIS\n-#\n-#   AX_BOOST_CHRONO\n-#\n-# DESCRIPTION\n-#\n-#   Test for Chrono library from the Boost C++ libraries. The macro requires\n-#   a preceding call to AX_BOOST_BASE. Further documentation is available at\n-#   <http://randspringer.de/boost/index.html>.\n-#\n-#   This macro calls:\n-#\n-#     AC_SUBST(BOOST_CHRONO_LIB)\n-#\n-#   And sets:\n-#\n-#     HAVE_BOOST_CHRONO\n-#\n-# LICENSE\n-#\n-#   Copyright (c) 2012 Xiyue Deng <manphiz@gmail.com>\n-#\n-#   Copying and distribution of this file, with or without modification, are\n-#   permitted in any medium without royalty provided the copyright notice\n-#   and this notice are preserved. This file is offered as-is, without any\n-#   warranty.\n-\n-#serial 4\n-\n-AC_DEFUN([AX_BOOST_CHRONO],\n-[\n-\tAC_ARG_WITH([boost-chrono],\n-\tAS_HELP_STRING([--with-boost-chrono@<:@=special-lib@:>@],\n-                   [use the Chrono library from boost - it is possible to specify a certain library for the linker\n-                        e.g. --with-boost-chrono=boost_chrono-gcc-mt ]),\n-        [\n-        if test \"$withval\" = \"no\"; then\n-\t\t\twant_boost=\"no\"\n-        elif test \"$withval\" = \"yes\"; then\n-            want_boost=\"yes\"\n-            ax_boost_user_chrono_lib=\"\"\n-        else\n-\t\t    want_boost=\"yes\"\n-\t\tax_boost_user_chrono_lib=\"$withval\"\n-\t\tfi\n-        ],\n-        [want_boost=\"yes\"]\n-\t)\n-\n-\tif test \"x$want_boost\" = \"xyes\"; then\n-        AC_REQUIRE([AC_PROG_CC])\n-        AC_REQUIRE([AC_CANONICAL_BUILD])\n-\t\tCPPFLAGS_SAVED=\"$CPPFLAGS\"\n-\t\tCPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"\n-\t\texport CPPFLAGS\n-\n-\t\tLDFLAGS_SAVED=\"$LDFLAGS\"\n-\t\tLDFLAGS=\"$LDFLAGS $BOOST_LDFLAGS\"\n-\t\texport LDFLAGS\n-\n-        AC_CACHE_CHECK(whether the Boost::Chrono library is available,\n-\t\t\t\t\t   ax_cv_boost_chrono,\n-        [AC_LANG_PUSH([C++])\n-\t\t\t CXXFLAGS_SAVE=$CXXFLAGS\n-\n-\t\t\t AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[@%:@include <boost/chrono.hpp>]],\n-                                   [[boost::chrono::system_clock::time_point* time = new boost::chrono::system_clock::time_point; delete time;]])],\n-                   ax_cv_boost_chrono=yes, ax_cv_boost_chrono=no)\n-\t\t\t CXXFLAGS=$CXXFLAGS_SAVE\n-             AC_LANG_POP([C++])\n-\t\t])\n-\t\tif test \"x$ax_cv_boost_chrono\" = \"xyes\"; then\n-\t\t\tAC_SUBST(BOOST_CPPFLAGS)\n-\n-\t\t\tAC_DEFINE(HAVE_BOOST_CHRONO,,[define if the Boost::Chrono library is available])\n-            BOOSTLIBDIR=`echo $BOOST_LDFLAGS | sed -e 's/@<:@^\\/@:>@*//'`\n-\n-\t\t\tLDFLAGS_SAVE=$LDFLAGS\n-            if test \"x$ax_boost_user_chrono_lib\" = \"x\"; then\n-                for libextension in `ls $BOOSTLIBDIR/libboost_chrono*.so* $BOOSTLIBDIR/libboost_chrono*.dylib* $BOOSTLIBDIR/libboost_chrono*.a* 2>/dev/null | sed 's,.*/,,' | sed -e 's;^lib\\(boost_chrono.*\\)\\.so.*$;\\1;' -e 's;^lib\\(boost_chrono.*\\)\\.dylib.*$;\\1;' -e 's;^lib\\(boost_chrono.*\\)\\.a.*$;\\1;'` ; do\n-                     ax_lib=${libextension}\n-\t\t\t\t    AC_CHECK_LIB($ax_lib, exit,\n-                                 [BOOST_CHRONO_LIB=\"-l$ax_lib\"; AC_SUBST(BOOST_CHRONO_LIB) link_chrono=\"yes\"; break],\n-                                 [link_chrono=\"no\"])\n-\t\t\t\tdone\n-                if test \"x$link_chrono\" != \"xyes\"; then\n-                for libextension in `ls $BOOSTLIBDIR/boost_chrono*.dll* $BOOSTLIBDIR/boost_chrono*.a* 2>/dev/null | sed 's,.*/,,' | sed -e 's;^\\(boost_chrono.*\\)\\.dll.*$;\\1;' -e 's;^\\(boost_chrono.*\\)\\.a.*$;\\1;'` ; do\n-                     ax_lib=${libextension}\n-\t\t\t\t    AC_CHECK_LIB($ax_lib, exit,\n-                                 [BOOST_CHRONO_LIB=\"-l$ax_lib\"; AC_SUBST(BOOST_CHRONO_LIB) link_chrono=\"yes\"; break],\n-                                 [link_chrono=\"no\"])\n-\t\t\t\tdone\n-                fi\n-\n-            else\n-               for ax_lib in $ax_boost_user_chrono_lib boost_chrono-$ax_boost_user_chrono_lib; do\n-\t\t\t\t      AC_CHECK_LIB($ax_lib, exit,\n-                                   [BOOST_CHRONO_LIB=\"-l$ax_lib\"; AC_SUBST(BOOST_CHRONO_LIB) link_chrono=\"yes\"; break],\n-                                   [link_chrono=\"no\"])\n-                  done\n-\n-            fi\n-            if test \"x$ax_lib\" = \"x\"; then\n-                AC_MSG_ERROR(Could not find a version of the library!)\n-            fi\n-\t\t\tif test \"x$link_chrono\" = \"xno\"; then\n-\t\t\t\tAC_MSG_ERROR(Could not link against $ax_lib !)\n-\t\t\tfi\n-\t\tfi\n-\n-\t\tCPPFLAGS=\"$CPPFLAGS_SAVED\"\n-\tLDFLAGS=\"$LDFLAGS_SAVED\"\n-\tfi\n-])"
      },
      {
        "sha": "3c8a689cd2d5da786a850ec294be0ea608d98e6b",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 53,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/692dee0963e06948e7e71acc597d04f71cd5b47f/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/692dee0963e06948e7e71acc597d04f71cd5b47f/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=692dee0963e06948e7e71acc597d04f71cd5b47f",
        "patch": "@@ -922,7 +922,6 @@ fi\n AX_BOOST_SYSTEM\n AX_BOOST_FILESYSTEM\n AX_BOOST_THREAD\n-AX_BOOST_CHRONO\n \n dnl Boost 1.56 through 1.62 allow using std::atomic instead of its own atomic\n dnl counter implementations. In 1.63 and later the std::atomic approach is default.\n@@ -989,7 +988,7 @@ fi\n \n if test x$use_boost = xyes; then\n \n-BOOST_LIBS=\"$BOOST_LDFLAGS $BOOST_SYSTEM_LIB $BOOST_FILESYSTEM_LIB $BOOST_THREAD_LIB $BOOST_CHRONO_LIB\"\n+BOOST_LIBS=\"$BOOST_LDFLAGS $BOOST_SYSTEM_LIB $BOOST_FILESYSTEM_LIB $BOOST_THREAD_LIB\"\n \n \n dnl If boost (prior to 1.57) was built without c++11, it emulated scoped enums\n@@ -1027,57 +1026,6 @@ AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n LIBS=\"$TEMP_LIBS\"\n CPPFLAGS=\"$TEMP_CPPFLAGS\"\n \n-dnl Boost >= 1.50 uses sleep_for rather than the now-deprecated sleep, however\n-dnl it was broken from 1.50 to 1.52 when backed by nanosleep. Use sleep_for if\n-dnl a working version is available, else fall back to sleep. sleep was removed\n-dnl after 1.56.\n-dnl If neither is available, abort.\n-TEMP_LIBS=\"$LIBS\"\n-LIBS=\"$BOOST_LIBS $LIBS\"\n-TEMP_CPPFLAGS=\"$CPPFLAGS\"\n-CPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"\n-AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n-  #include <boost/thread/thread.hpp>\n-  #include <boost/version.hpp>\n-  ]],[[\n-  #if BOOST_VERSION >= 105000 && (!defined(BOOST_HAS_NANOSLEEP) || BOOST_VERSION >= 105200)\n-      boost::this_thread::sleep_for(boost::chrono::milliseconds(0));\n-  #else\n-   choke me\n-  #endif\n-  ]])],\n-  [boost_sleep=yes;\n-     AC_DEFINE(HAVE_WORKING_BOOST_SLEEP_FOR, 1, [Define this symbol if boost sleep_for works])],\n-  [boost_sleep=no])\n-LIBS=\"$TEMP_LIBS\"\n-CPPFLAGS=\"$TEMP_CPPFLAGS\"\n-\n-if test x$boost_sleep != xyes; then\n-TEMP_LIBS=\"$LIBS\"\n-LIBS=\"$BOOST_LIBS $LIBS\"\n-TEMP_CPPFLAGS=\"$CPPFLAGS\"\n-CPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"\n-AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n-  #include <boost/version.hpp>\n-  #include <boost/thread.hpp>\n-  #include <boost/date_time/posix_time/posix_time_types.hpp>\n-  ]],[[\n-  #if BOOST_VERSION <= 105600\n-      boost::this_thread::sleep(boost::posix_time::milliseconds(0));\n-  #else\n-   choke me\n-  #endif\n-  ]])],\n-  [boost_sleep=yes; AC_DEFINE(HAVE_WORKING_BOOST_SLEEP, 1, [Define this symbol if boost sleep works])],\n-  [boost_sleep=no])\n-LIBS=\"$TEMP_LIBS\"\n-CPPFLAGS=\"$TEMP_CPPFLAGS\"\n-fi\n-\n-if test x$boost_sleep != xyes; then\n-  AC_MSG_ERROR(No working boost sleep implementation found.)\n-fi\n-\n fi\n \n if test x$use_pkgconfig = xyes; then"
      },
      {
        "sha": "51b0ebefcf13bdb77f6255dade2f7fcbc022c053",
        "filename": "depends/packages/boost.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/692dee0963e06948e7e71acc597d04f71cd5b47f/depends/packages/boost.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/692dee0963e06948e7e71acc597d04f71cd5b47f/depends/packages/boost.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/boost.mk?ref=692dee0963e06948e7e71acc597d04f71cd5b47f",
        "patch": "@@ -19,7 +19,7 @@ $(package)_toolset_$(host_os)=gcc\n $(package)_archiver_$(host_os)=$($(package)_ar)\n $(package)_toolset_darwin=darwin\n $(package)_archiver_darwin=$($(package)_libtool)\n-$(package)_config_libraries=chrono,filesystem,system,thread,test\n+$(package)_config_libraries=filesystem,system,thread,test\n $(package)_cxxflags=-std=c++11 -fvisibility=hidden\n $(package)_cxxflags_linux=-fPIC\n endef"
      },
      {
        "sha": "6938660947aabfc6b21903ca36b4b8e66977b7a0",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/692dee0963e06948e7e71acc597d04f71cd5b47f/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/692dee0963e06948e7e71acc597d04f71cd5b47f/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=692dee0963e06948e7e71acc597d04f71cd5b47f",
        "patch": "@@ -74,7 +74,7 @@ Build requirements:\n \n Now, you can either build from self-compiled [depends](/depends/README.md) or install the required dependencies:\n \n-    sudo apt-get install libssl-dev libevent-dev libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev\n+    sudo apt-get install libssl-dev libevent-dev libboost-system-dev libboost-filesystem-dev libboost-test-dev libboost-thread-dev\n \n BerkeleyDB is required for the wallet.\n "
      }
    ]
  }
]