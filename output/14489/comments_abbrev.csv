ken2812221,2018-10-16T00:28:25Z,Apparently I wrote a MSVC-only code. I am going to investigate it. ,https://github.com/bitcoin/bitcoin/pull/14489#issuecomment-430059469,430059469,
meshcollider,2018-10-16T02:17:22Z,Related #8631,https://github.com/bitcoin/bitcoin/pull/14489#issuecomment-430077056,430077056,
ken2812221,2018-10-16T16:37:44Z,This is ready for review,https://github.com/bitcoin/bitcoin/pull/14489#issuecomment-430308193,430308193,
ken2812221,2018-10-17T15:03:42Z,"@donaloconnor It should use mutex because it's used by the condition_variable.\n\nFor reference, you can find boost implementation for [pthread](https://github.com/boostorg/thread/blob/develop/src/pthread/thread.cpp), it acquires lock before it reads `interrupt_requested`.\n\nIf it can drop InterruptibleSleep in the future, then it's fine to switch to atomic.",https://github.com/bitcoin/bitcoin/pull/14489#issuecomment-430665327,430665327,
donaloconnor,2018-10-18T07:50:11Z,@ken2812221 ah yes for the sleep. Thanks for the link to boosts impl.,https://github.com/bitcoin/bitcoin/pull/14489#issuecomment-430910162,430910162,
ken2812221,2018-10-18T11:36:56Z,"Actually, I think it's fine to make it use both atomic and mutex at the same time. Then we don't have to lock mutex in InterruptionPoint.",https://github.com/bitcoin/bitcoin/pull/14489#issuecomment-430975441,430975441,
donaloconnor,2018-10-18T11:52:18Z,"In this case it might work but in practice it can cause race conditions. The value of the atomic can change from the moment the cond var is signalled and the predicate is checked (to work with spurious wakeups). Eg: false->true->notify+wakeup->false->predcheck.\n\nThe last false flag can never happen here (at least my understanding of the code) I guess so maybe it's okay.",https://github.com/bitcoin/bitcoin/pull/14489#issuecomment-430979343,430979343,
ken2812221,2018-10-18T17:05:45Z,"@donaloconnor I am not sure people would allow this solution. Now the flag contains two variable:\n- atomic bool read in `InterruptionPoint`\n- non-atomic bool read in `InterruptionSleep`",https://github.com/bitcoin/bitcoin/pull/14489#issuecomment-431087509,431087509,
donaloconnor,2018-10-18T22:18:01Z,"I think it's not worth the complexity tbh. Sorry. I don't know if the perf improvement is worth the extra complexity without measurements. Maybe we should just stick to what boost did as you had in original. I think using the atomic in the cond var is okay for this case because it's state only goes from false->true.\n\nI'd prefer if others chimed in to give feedback on this..\n\nRe: spurious w",https://github.com/bitcoin/bitcoin/pull/14489#issuecomment-431183069,431183069,
practicalswift,2018-10-18T22:47:57Z,"What about splitting the work in two parts?\n\nStart with the low-risk Boost replacement: that change is likely worth it in itself as long as no deviations from what Boost was doing are introduced.\n\nWhen that work is finished: continue with the risker performance improvement change you are considering.\n\nDoes that make sense?",https://github.com/bitcoin/bitcoin/pull/14489#issuecomment-431189440,431189440,
DrahtBot,2018-10-20T09:55:41Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#14624](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14624.html) (Some simple improvements to the RNG code by",https://github.com/bitcoin/bitcoin/pull/14489#issuecomment-431566556,431566556,
DrahtBot,2018-11-05T11:16:47Z,<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase,https://github.com/bitcoin/bitcoin/pull/14489#issuecomment-435839504,435839504,
MarcoFalke,2020-03-06T21:01:59Z,"fyi, Boost::Chrono has been removed",https://github.com/bitcoin/bitcoin/pull/14489#issuecomment-595963817,595963817,
practicalswift,2018-10-17T10:01:58Z,Missing newline at end of file :-),https://github.com/bitcoin/bitcoin/pull/14489#discussion_r225859931,225859931,src/threadinterrupt.cpp
practicalswift,2018-10-17T10:26:05Z,"Is the nonpublic inheritance here intentional? If so, make the inheritance explicitly `private` and add a comment to clarify that this is intentional. If not, make it `public` :-)\n\nBackground:\n\n`ThreadInterrupted` won't be catched by say `catch (const std::exception& e)` since `ThreadInterrupted` has nonpublic inheritance from `std::exception`.\n\nExample:\n\n```\n[cling]$ #include <i",https://github.com/bitcoin/bitcoin/pull/14489#discussion_r225867106,225867106,src/threadinterrupt.h
