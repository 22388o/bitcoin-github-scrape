[
  {
    "sha": "bd28872defaafea4aa354367ba78461273c98881",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZDI4ODcyZGVmYWFmZWE0YWEzNTQzNjdiYTc4NDYxMjczYzk4ODgx",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-05-19T01:02:39Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-05-04T16:19:01Z"
      },
      "message": "Add an implementation of an open hash set",
      "tree": {
        "sha": "790489a01efb5ebac0a423a689c1f8ccabb3be77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/790489a01efb5ebac0a423a689c1f8ccabb3be77"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bd28872defaafea4aa354367ba78461273c98881",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd28872defaafea4aa354367ba78461273c98881",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bd28872defaafea4aa354367ba78461273c98881",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd28872defaafea4aa354367ba78461273c98881/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "627c3762ce5d8ce097f70c7fb52a3640246fae9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/627c3762ce5d8ce097f70c7fb52a3640246fae9b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/627c3762ce5d8ce097f70c7fb52a3640246fae9b"
      }
    ],
    "stats": {
      "total": 102,
      "additions": 102,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e2817a8a984b5dd187a535b42f548d04cc838d8d",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd28872defaafea4aa354367ba78461273c98881/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd28872defaafea4aa354367ba78461273c98881/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=bd28872defaafea4aa354367ba78461273c98881",
        "patch": "@@ -124,6 +124,7 @@ BITCOIN_CORE_H = \\\n   netbase.h \\\n   netmessagemaker.h \\\n   noui.h \\\n+  open_hash_set.h \\\n   policy/feerate.h \\\n   policy/fees.h \\\n   policy/policy.h \\"
      },
      {
        "sha": "4eb8aefae5417c4c6a7e7755af52dc391dfde37c",
        "filename": "src/open_hash_set.h",
        "status": "added",
        "additions": 101,
        "deletions": 0,
        "changes": 101,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd28872defaafea4aa354367ba78461273c98881/src/open_hash_set.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd28872defaafea4aa354367ba78461273c98881/src/open_hash_set.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/open_hash_set.h?ref=bd28872defaafea4aa354367ba78461273c98881",
        "patch": "@@ -0,0 +1,101 @@\n+#ifndef BITCOIN_OPEN_HASH_SET_H\n+#define BITCOIN_OPEN_HASH_SET_H\n+\n+#include <functional>\n+#include <utility>\n+#include <vector>\n+\n+/** Implements an open hash set.\n+ */\n+template<class Key, class IsKeyNull, class Hash = std::hash<Key>, class KeyEqual = std::equal_to<Key>>\n+class open_hash_set\n+{\n+public:\n+    typedef Key key_type;\n+    typedef Key value_type;\n+    typedef size_t size_type;\n+    typedef Hash hasher;\n+    typedef KeyEqual key_equal;\n+\n+    class iterator\n+    {\n+        value_type* ptr;\n+    public:\n+        iterator(value_type* ptr_) : ptr(ptr_) {}\n+        value_type& operator*() const { return *ptr; }\n+        value_type* operator->() const { return ptr; }\n+        bool operator==(iterator x) const { return ptr == x.ptr; }\n+        bool operator!=(iterator x) const { return ptr != x.ptr; }\n+        bool operator>=(iterator x) const { return ptr >= x.ptr; }\n+        bool operator<=(iterator x) const { return ptr <= x.ptr; }\n+        bool operator>(iterator x) const { return ptr > x.ptr; }\n+        bool operator<(iterator x) const { return ptr < x.ptr; }\n+    };\n+\n+private:\n+    hasher m_hash_instance;\n+    key_equal m_equal_instance;\n+    IsKeyNull m_null_instance;\n+    std::vector<value_type> m_table;\n+    size_type m_count = 0, m_scan_max;\n+\n+    inline size_t hash_pos(uint64_t hash, size_t i) {\n+        uint64_t input = hash * (i + 1);\n+        uint32_t value = (input & 0xffffffffffLLU) ^ ((input & 0xffff00000000LLU) >> 16) ^ ((input & 0xffff000000000000LLU) >> 32);\n+        return (value * uint64_t(m_table.size())) >> 32;\n+    }\n+\n+public:\n+    open_hash_set(size_type entry_count=1000) :\n+        m_table(std::max(128*1024/sizeof(value_type), entry_count*3)), // max(1/2 of L2, 3*entries)\n+        m_scan_max(m_table.size() / 2)\n+    {}\n+\n+    std::pair<iterator, bool> insert(const value_type& value) {\n+        size_t pos;\n+        size_t i = 0;\n+        while (i < m_scan_max) {\n+            pos = hash_pos(m_hash_instance(value), i);\n+            if (m_null_instance(m_table[pos])) break;\n+            if (m_equal_instance(m_table[pos], value)) break;\n+            i++;\n+        }\n+\n+        if (i == m_scan_max) {\n+            return std::make_pair(end(), false);\n+        }\n+\n+        if (m_equal_instance(m_table[pos], value)) {\n+            return std::make_pair(iterator(&m_table[pos]), false);\n+        }\n+\n+        m_table[pos] = value;\n+        m_count++;\n+        return std::make_pair(iterator(&m_table[pos]), true);\n+    }\n+\n+    iterator find(const value_type& value) {\n+        size_t pos;\n+        size_t i = 0;\n+        while (i < m_scan_max) {\n+            pos = hash_pos(m_hash_instance(value), i);\n+            if (m_null_instance(m_table[pos])) break;\n+            if (m_equal_instance(m_table[pos], value)) break;\n+            i++;\n+        }\n+\n+        if (i == m_scan_max || m_null_instance(m_table[pos]) || !m_equal_instance(m_table[pos], value)) {\n+            return end();\n+        }\n+        return iterator(&m_table[pos]);\n+    }\n+\n+    iterator end() {\n+        value_type* ptr = &m_table[m_table.size() - 1];\n+        return iterator(ptr + 1);\n+    }\n+\n+    size_type size() const { return m_count; }\n+};\n+\n+#endif // BITCOIN_OPEN_HASH_SET_H"
      }
    ]
  },
  {
    "sha": "f54ce22caa0b6be8a0ecf33c043c7cec359b3521",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNTRjZTIyY2FhMGI2YmU4YTBlY2YzM2MwNDNjN2NlYzM1OWIzNTIx",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-06-19T08:32:06Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-05-04T16:19:01Z"
      },
      "message": "Use open_hash_set in blockencodings",
      "tree": {
        "sha": "70e96529b5e03345a4568a82cb8cca57b6330b56",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/70e96529b5e03345a4568a82cb8cca57b6330b56"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f54ce22caa0b6be8a0ecf33c043c7cec359b3521",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f54ce22caa0b6be8a0ecf33c043c7cec359b3521",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f54ce22caa0b6be8a0ecf33c043c7cec359b3521",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f54ce22caa0b6be8a0ecf33c043c7cec359b3521/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bd28872defaafea4aa354367ba78461273c98881",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd28872defaafea4aa354367ba78461273c98881",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bd28872defaafea4aa354367ba78461273c98881"
      }
    ],
    "stats": {
      "total": 86,
      "additions": 58,
      "deletions": 28
    },
    "files": [
      {
        "sha": "af714cbf4d8857d611519a34289995764ee60064",
        "filename": "src/blockencodings.cpp",
        "status": "modified",
        "additions": 58,
        "deletions": 28,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f54ce22caa0b6be8a0ecf33c043c7cec359b3521/src/blockencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f54ce22caa0b6be8a0ecf33c043c7cec359b3521/src/blockencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.cpp?ref=f54ce22caa0b6be8a0ecf33c043c7cec359b3521",
        "patch": "@@ -12,6 +12,7 @@\n #include <txmempool.h>\n #include <validation.h>\n #include <util.h>\n+#include <open_hash_set.h>\n \n #include <unordered_map>\n \n@@ -43,6 +44,33 @@ uint64_t CBlockHeaderAndShortTxIDs::GetShortID(const uint256& txhash) const {\n     return SipHashUint256(shorttxidk0, shorttxidk1, txhash) & 0xffffffffffffL;\n }\n \n+namespace\n+{\n+    struct ShortIdIndexPair {\n+        uint64_t shortid : 48;\n+        uint64_t index : 16;\n+        ShortIdIndexPair(uint64_t shortid_in=0, uint16_t index_in=0) : shortid(shortid_in), index(index_in) {}\n+    };\n+    static_assert(sizeof(ShortIdIndexPair) == 8, \"\");\n+\n+    struct ShortIdIndexPairHasher {\n+        uint64_t operator()(const ShortIdIndexPair& elem) {\n+            return elem.shortid;\n+        }\n+    };\n+\n+    struct ShortIdIndexPairEqual {\n+        bool operator()(const ShortIdIndexPair& a, const ShortIdIndexPair& b) {\n+            return a.shortid == b.shortid;\n+        }\n+    };\n+\n+    struct ShortIdIndexPairIsNull {\n+        bool operator()(const ShortIdIndexPair& elem) {\n+            return elem.shortid == 0 && elem.index == 0;\n+        }\n+    };\n+} // anonymous namespace\n \n \n ReadStatus PartiallyDownloadedBlock::InitData(const CBlockHeaderAndShortTxIDs& cmpctblock, const std::vector<std::pair<uint256, CTransactionRef>>& extra_txn) {\n@@ -77,24 +105,15 @@ ReadStatus PartiallyDownloadedBlock::InitData(const CBlockHeaderAndShortTxIDs& c\n     // Because well-formed cmpctblock messages will have a (relatively) uniform distribution\n     // of short IDs, any highly-uneven distribution of elements can be safely treated as a\n     // READ_STATUS_FAILED.\n-    std::unordered_map<uint64_t, uint16_t> shorttxids(cmpctblock.shorttxids.size());\n+    open_hash_set<ShortIdIndexPair, ShortIdIndexPairIsNull, ShortIdIndexPairHasher, ShortIdIndexPairEqual> shorttxids(cmpctblock.shorttxids.size());\n     uint16_t index_offset = 0;\n     for (size_t i = 0; i < cmpctblock.shorttxids.size(); i++) {\n         while (txn_available[i + index_offset])\n             index_offset++;\n-        shorttxids[cmpctblock.shorttxids[i]] = i + index_offset;\n-        // To determine the chance that the number of entries in a bucket exceeds N,\n-        // we use the fact that the number of elements in a single bucket is\n-        // binomially distributed (with n = the number of shorttxids S, and p =\n-        // 1 / the number of buckets), that in the worst case the number of buckets is\n-        // equal to S (due to std::unordered_map having a default load factor of 1.0),\n-        // and that the chance for any bucket to exceed N elements is at most\n-        // buckets * (the chance that any given bucket is above N elements).\n-        // Thus: P(max_elements_per_bucket > N) <= S * (1 - cdf(binomial(n=S,p=1/S), N)).\n-        // If we assume blocks of up to 16000, allowing 12 elements per bucket should\n-        // only fail once per ~1 million block transfers (per peer and connection).\n-        if (shorttxids.bucket_size(shorttxids.bucket(cmpctblock.shorttxids[i])) > 12)\n+        auto i_res = shorttxids.insert(ShortIdIndexPair(cmpctblock.shorttxids[i], i + index_offset));\n+        if (!i_res.second) {\n             return READ_STATUS_FAILED;\n+        }\n     }\n     // TODO: in the shortid-collision case, we should instead request both transactions\n     // which collided. Falling back to full-block-request here is overkill.\n@@ -105,24 +124,30 @@ ReadStatus PartiallyDownloadedBlock::InitData(const CBlockHeaderAndShortTxIDs& c\n     {\n     LOCK(pool->cs);\n     const std::vector<std::pair<uint256, CTxMemPool::txiter> >& vTxHashes = pool->vTxHashes;\n+    uint64_t shortid = vTxHashes.size() > 0 ? cmpctblock.GetShortID(vTxHashes[0].first) : 0;\n     for (size_t i = 0; i < vTxHashes.size(); i++) {\n-        uint64_t shortid = cmpctblock.GetShortID(vTxHashes[i].first);\n-        std::unordered_map<uint64_t, uint16_t>::iterator idit = shorttxids.find(shortid);\n+        uint64_t next_shortid = 0;\n+        __builtin_prefetch(vTxHashes.data() + ((i + 2) * sizeof(decltype(pool->vTxHashes)::value_type)), 0);\n+        if (i + 1 < vTxHashes.size()) {\n+            next_shortid = cmpctblock.GetShortID(vTxHashes[i + 1].first);\n+        }\n+        auto idit = shorttxids.find(ShortIdIndexPair(shortid));\n         if (idit != shorttxids.end()) {\n-            if (!have_txn[idit->second]) {\n-                txn_available[idit->second] = vTxHashes[i].second->GetSharedTx();\n-                have_txn[idit->second]  = true;\n+            if (!have_txn[idit->index]) {\n+                txn_available[idit->index] = vTxHashes[i].second->GetSharedTx();\n+                have_txn[idit->index]  = true;\n                 mempool_count++;\n             } else {\n                 // If we find two mempool txn that match the short id, just request it.\n                 // This should be rare enough that the extra bandwidth doesn't matter,\n                 // but eating a round-trip due to FillBlock failure would be annoying\n-                if (txn_available[idit->second]) {\n-                    txn_available[idit->second].reset();\n+                if (txn_available[idit->index]) {\n+                    txn_available[idit->index].reset();\n                     mempool_count--;\n                 }\n             }\n         }\n+        shortid = next_shortid;\n         // Though ideally we'd continue scanning for the two-txn-match-shortid case,\n         // the performance win of an early exit here is too good to pass up and worth\n         // the extra risk.\n@@ -131,13 +156,17 @@ ReadStatus PartiallyDownloadedBlock::InitData(const CBlockHeaderAndShortTxIDs& c\n     }\n     }\n \n+    uint64_t shortid = extra_txn.size() > 0 ? cmpctblock.GetShortID(extra_txn[0].first) : 0;\n     for (size_t i = 0; i < extra_txn.size(); i++) {\n-        uint64_t shortid = cmpctblock.GetShortID(extra_txn[i].first);\n-        std::unordered_map<uint64_t, uint16_t>::iterator idit = shorttxids.find(shortid);\n+        uint64_t next_shortid = 0;\n+        if (i + 1 < extra_txn.size()) {\n+            next_shortid = cmpctblock.GetShortID(extra_txn[i + 1].first);\n+        }\n+        auto idit = shorttxids.find(ShortIdIndexPair(shortid));\n         if (idit != shorttxids.end()) {\n-            if (!have_txn[idit->second]) {\n-                txn_available[idit->second] = extra_txn[i].second;\n-                have_txn[idit->second]  = true;\n+            if (!have_txn[idit->index]) {\n+                txn_available[idit->index] = extra_txn[i].second;\n+                have_txn[idit->index]  = true;\n                 mempool_count++;\n                 extra_count++;\n             } else {\n@@ -147,14 +176,15 @@ ReadStatus PartiallyDownloadedBlock::InitData(const CBlockHeaderAndShortTxIDs& c\n                 // but eating a round-trip due to FillBlock failure would be annoying\n                 // Note that we don't want duplication between extra_txn and mempool to\n                 // trigger this case, so we compare witness hashes first\n-                if (txn_available[idit->second] &&\n-                        txn_available[idit->second]->GetWitnessHash() != extra_txn[i].second->GetWitnessHash()) {\n-                    txn_available[idit->second].reset();\n+                if (txn_available[idit->index] &&\n+                        txn_available[idit->index]->GetWitnessHash() != extra_txn[i].second->GetWitnessHash()) {\n+                    txn_available[idit->index].reset();\n                     mempool_count--;\n                     extra_count--;\n                 }\n             }\n         }\n+        shortid = next_shortid;\n         // Though ideally we'd continue scanning for the two-txn-match-shortid case,\n         // the performance win of an early exit here is too good to pass up and worth\n         // the extra risk."
      }
    ]
  },
  {
    "sha": "a9b97e7bf25f1ce7819af0896b340cd5abff5ea3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOWI5N2U3YmYyNWYxY2U3ODE5YWYwODk2YjM0MGNkNWFiZmY1ZWEz",
    "commit": {
      "author": {
        "name": "Rusty Russell",
        "email": "rusty@rustcorp.com.au",
        "date": "2017-05-22T02:34:14Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-05-04T16:19:01Z"
      },
      "message": "open_hash_set: use a smaller (and power of two) hash table.\n\nThis makes performance a little worse, due to more hash collisions,\ndepending on how sparse we make it.\n\nSince we're going to switch to linear chaining, we can afford slightly\nmore collisions, sowe drop to 4x.\n\n50% full (2x oversize):\n\tTotal insert hashes = 1977, total find hashes = 87224\n\n25% full (4x oversize):\n\tTotal insert hashes = 1749, total find hashes = 63927\n\n12.5% full (8x oversize, equivalent to original):\n\tTotal insert hashes = 1639, total find hashes = 56644\n\nSigned-off-by: Rusty Russell <rusty@rustcorp.com.au>",
      "tree": {
        "sha": "64dc66389fdcbd6564073fa517ff09a7e1d59747",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/64dc66389fdcbd6564073fa517ff09a7e1d59747"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a9b97e7bf25f1ce7819af0896b340cd5abff5ea3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9b97e7bf25f1ce7819af0896b340cd5abff5ea3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a9b97e7bf25f1ce7819af0896b340cd5abff5ea3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9b97e7bf25f1ce7819af0896b340cd5abff5ea3/comments",
    "author": {
      "login": "rustyrussell",
      "id": 775844,
      "node_id": "MDQ6VXNlcjc3NTg0NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/775844?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rustyrussell",
      "html_url": "https://github.com/rustyrussell",
      "followers_url": "https://api.github.com/users/rustyrussell/followers",
      "following_url": "https://api.github.com/users/rustyrussell/following{/other_user}",
      "gists_url": "https://api.github.com/users/rustyrussell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rustyrussell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rustyrussell/subscriptions",
      "organizations_url": "https://api.github.com/users/rustyrussell/orgs",
      "repos_url": "https://api.github.com/users/rustyrussell/repos",
      "events_url": "https://api.github.com/users/rustyrussell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rustyrussell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f54ce22caa0b6be8a0ecf33c043c7cec359b3521",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f54ce22caa0b6be8a0ecf33c043c7cec359b3521",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f54ce22caa0b6be8a0ecf33c043c7cec359b3521"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 14,
      "deletions": 3
    },
    "files": [
      {
        "sha": "9605ba7b441eb242c985d11a751a31d029d4ae76",
        "filename": "src/open_hash_set.h",
        "status": "modified",
        "additions": 14,
        "deletions": 3,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9b97e7bf25f1ce7819af0896b340cd5abff5ea3/src/open_hash_set.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9b97e7bf25f1ce7819af0896b340cd5abff5ea3/src/open_hash_set.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/open_hash_set.h?ref=a9b97e7bf25f1ce7819af0896b340cd5abff5ea3",
        "patch": "@@ -36,18 +36,29 @@ class open_hash_set\n     hasher m_hash_instance;\n     key_equal m_equal_instance;\n     IsKeyNull m_null_instance;\n+    const size_type m_bits;\n     std::vector<value_type> m_table;\n     size_type m_count = 0, m_scan_max;\n \n     inline size_t hash_pos(uint64_t hash, size_t i) {\n         uint64_t input = hash * (i + 1);\n         uint32_t value = (input & 0xffffffffffLLU) ^ ((input & 0xffff00000000LLU) >> 16) ^ ((input & 0xffff000000000000LLU) >> 32);\n-        return (value * uint64_t(m_table.size())) >> 32;\n+        return value & ((size_type(1) << m_bits)-1);\n+    }\n+\n+    // Power of 2 which keeps us under 25 full.\n+    static inline size_type optimal_hashbits(size_type entry_count) {\n+        size_type bits = 8;\n+        while ((1ULL << bits) < (entry_count * 4)) {\n+            bits++;\n+        }\n+        return bits;\n     }\n \n public:\n-    open_hash_set(size_type entry_count=1000) :\n-        m_table(std::max(128*1024/sizeof(value_type), entry_count*3)), // max(1/2 of L2, 3*entries)\n+    open_hash_set(size_type entry_count) :\n+        m_bits(optimal_hashbits(entry_count)),\n+        m_table(1ULL << m_bits),\n         m_scan_max(m_table.size() / 2)\n     {}\n "
      }
    ]
  },
  {
    "sha": "5363403855c48e9ea33d2ac9b415835b6111a919",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MzYzNDAzODU1YzQ4ZTllYTMzZDJhYzliNDE1ODM1YjYxMTFhOTE5",
    "commit": {
      "author": {
        "name": "Rusty Russell",
        "email": "rusty@rustcorp.com.au",
        "date": "2017-05-22T02:35:14Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-05-04T16:19:01Z"
      },
      "message": "open_hash_set: use a linear hash scan.\n\nNo more jumping around the table, and just use the lower bits as hash.\n\n\tTotal insert hashes = 1762, total find hashes = 65245\n\nSigned-off-by: Rusty Russell <rusty@rustcorp.com.au>",
      "tree": {
        "sha": "f18027bf99782badacd5f591db23f8d3822848a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f18027bf99782badacd5f591db23f8d3822848a8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5363403855c48e9ea33d2ac9b415835b6111a919",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5363403855c48e9ea33d2ac9b415835b6111a919",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5363403855c48e9ea33d2ac9b415835b6111a919",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5363403855c48e9ea33d2ac9b415835b6111a919/comments",
    "author": {
      "login": "rustyrussell",
      "id": 775844,
      "node_id": "MDQ6VXNlcjc3NTg0NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/775844?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rustyrussell",
      "html_url": "https://github.com/rustyrussell",
      "followers_url": "https://api.github.com/users/rustyrussell/followers",
      "following_url": "https://api.github.com/users/rustyrussell/following{/other_user}",
      "gists_url": "https://api.github.com/users/rustyrussell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rustyrussell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rustyrussell/subscriptions",
      "organizations_url": "https://api.github.com/users/rustyrussell/orgs",
      "repos_url": "https://api.github.com/users/rustyrussell/repos",
      "events_url": "https://api.github.com/users/rustyrussell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rustyrussell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a9b97e7bf25f1ce7819af0896b340cd5abff5ea3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9b97e7bf25f1ce7819af0896b340cd5abff5ea3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a9b97e7bf25f1ce7819af0896b340cd5abff5ea3"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 7,
      "deletions": 8
    },
    "files": [
      {
        "sha": "80d5563a652b19ab435baeb8a1f6954872fab83d",
        "filename": "src/open_hash_set.h",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5363403855c48e9ea33d2ac9b415835b6111a919/src/open_hash_set.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5363403855c48e9ea33d2ac9b415835b6111a919/src/open_hash_set.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/open_hash_set.h?ref=5363403855c48e9ea33d2ac9b415835b6111a919",
        "patch": "@@ -40,10 +40,9 @@ class open_hash_set\n     std::vector<value_type> m_table;\n     size_type m_count = 0, m_scan_max;\n \n-    inline size_t hash_pos(uint64_t hash, size_t i) {\n-        uint64_t input = hash * (i + 1);\n-        uint32_t value = (input & 0xffffffffffLLU) ^ ((input & 0xffff00000000LLU) >> 16) ^ ((input & 0xffff000000000000LLU) >> 32);\n-        return value & ((size_type(1) << m_bits)-1);\n+    /* Hash should be uniform already. */\n+    inline size_t hash_base(uint64_t hash) {\n+        return hash & ((size_type(1) << m_bits)-1);\n     }\n \n     // Power of 2 which keeps us under 25 full.\n@@ -63,12 +62,12 @@ class open_hash_set\n     {}\n \n     std::pair<iterator, bool> insert(const value_type& value) {\n-        size_t pos;\n+        size_t pos = hash_base(m_hash_instance(value));\n         size_t i = 0;\n         while (i < m_scan_max) {\n-            pos = hash_pos(m_hash_instance(value), i);\n             if (m_null_instance(m_table[pos])) break;\n             if (m_equal_instance(m_table[pos], value)) break;\n+            pos = (pos + 1)  & ((size_type(1) << m_bits)-1);\n             i++;\n         }\n \n@@ -86,12 +85,12 @@ class open_hash_set\n     }\n \n     iterator find(const value_type& value) {\n-        size_t pos;\n+        size_t pos = hash_base(m_hash_instance(value));\n         size_t i = 0;\n         while (i < m_scan_max) {\n-            pos = hash_pos(m_hash_instance(value), i);\n             if (m_null_instance(m_table[pos])) break;\n             if (m_equal_instance(m_table[pos], value)) break;\n+            pos = (pos + 1)  & ((size_type(1) << m_bits)-1);\n             i++;\n         }\n "
      }
    ]
  },
  {
    "sha": "ab348136e9edeb9af2c44764fcf94067c4edcb8e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYjM0ODEzNmU5ZWRlYjlhZjJjNDQ3NjRmY2Y5NDA2N2M0ZWRjYjhl",
    "commit": {
      "author": {
        "name": "Rusty Russell",
        "email": "rusty@rustcorp.com.au",
        "date": "2017-05-22T02:37:14Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-05-04T16:19:01Z"
      },
      "message": "open_hash_set: make scan_max a constant.\n\nFor a given density, the chances of more than N collisions is\nindendent of hash table size.  We chose 1/4 density, so we can assert\nthat the chances of 20 collisions is 1 in 2^40.\n\nFECHeaderRTTTest1550,288,0.003517217934132,0.003554463386536,0.003529562718338,9538257,9639290,9571711",
      "tree": {
        "sha": "089384137b2e7951bfdddaa2caffbe00dce31585",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/089384137b2e7951bfdddaa2caffbe00dce31585"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ab348136e9edeb9af2c44764fcf94067c4edcb8e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab348136e9edeb9af2c44764fcf94067c4edcb8e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ab348136e9edeb9af2c44764fcf94067c4edcb8e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab348136e9edeb9af2c44764fcf94067c4edcb8e/comments",
    "author": {
      "login": "rustyrussell",
      "id": 775844,
      "node_id": "MDQ6VXNlcjc3NTg0NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/775844?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rustyrussell",
      "html_url": "https://github.com/rustyrussell",
      "followers_url": "https://api.github.com/users/rustyrussell/followers",
      "following_url": "https://api.github.com/users/rustyrussell/following{/other_user}",
      "gists_url": "https://api.github.com/users/rustyrussell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rustyrussell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rustyrussell/subscriptions",
      "organizations_url": "https://api.github.com/users/rustyrussell/orgs",
      "repos_url": "https://api.github.com/users/rustyrussell/repos",
      "events_url": "https://api.github.com/users/rustyrussell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rustyrussell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5363403855c48e9ea33d2ac9b415835b6111a919",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5363403855c48e9ea33d2ac9b415835b6111a919",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5363403855c48e9ea33d2ac9b415835b6111a919"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 9,
      "deletions": 7
    },
    "files": [
      {
        "sha": "477bf15fdccaa7838d8549b1bd32de52f846367e",
        "filename": "src/open_hash_set.h",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab348136e9edeb9af2c44764fcf94067c4edcb8e/src/open_hash_set.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab348136e9edeb9af2c44764fcf94067c4edcb8e/src/open_hash_set.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/open_hash_set.h?ref=ab348136e9edeb9af2c44764fcf94067c4edcb8e",
        "patch": "@@ -37,8 +37,11 @@ class open_hash_set\n     key_equal m_equal_instance;\n     IsKeyNull m_null_instance;\n     const size_type m_bits;\n+    // With 1/4 chance of a bucket being full, this means 1 in 2^40 of this\n+    // many in a row.\n+    static const int scan_max = 20;\n     std::vector<value_type> m_table;\n-    size_type m_count = 0, m_scan_max;\n+    size_type m_count = 0;\n \n     /* Hash should be uniform already. */\n     inline size_t hash_base(uint64_t hash) {\n@@ -57,21 +60,20 @@ class open_hash_set\n public:\n     open_hash_set(size_type entry_count) :\n         m_bits(optimal_hashbits(entry_count)),\n-        m_table(1ULL << m_bits),\n-        m_scan_max(m_table.size() / 2)\n+        m_table(1ULL << m_bits)\n     {}\n \n     std::pair<iterator, bool> insert(const value_type& value) {\n         size_t pos = hash_base(m_hash_instance(value));\n         size_t i = 0;\n-        while (i < m_scan_max) {\n+        while (i < scan_max) {\n             if (m_null_instance(m_table[pos])) break;\n             if (m_equal_instance(m_table[pos], value)) break;\n             pos = (pos + 1)  & ((size_type(1) << m_bits)-1);\n             i++;\n         }\n \n-        if (i == m_scan_max) {\n+        if (i == scan_max) {\n             return std::make_pair(end(), false);\n         }\n \n@@ -87,14 +89,14 @@ class open_hash_set\n     iterator find(const value_type& value) {\n         size_t pos = hash_base(m_hash_instance(value));\n         size_t i = 0;\n-        while (i < m_scan_max) {\n+        while (i < scan_max) {\n             if (m_null_instance(m_table[pos])) break;\n             if (m_equal_instance(m_table[pos], value)) break;\n             pos = (pos + 1)  & ((size_type(1) << m_bits)-1);\n             i++;\n         }\n \n-        if (i == m_scan_max || m_null_instance(m_table[pos]) || !m_equal_instance(m_table[pos], value)) {\n+        if (i == scan_max || m_null_instance(m_table[pos]) || !m_equal_instance(m_table[pos], value)) {\n             return end();\n         }\n         return iterator(&m_table[pos]);"
      }
    ]
  },
  {
    "sha": "0199479e6d58305207e5c7cbe62adbc8436456be",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMTk5NDc5ZTZkNTgzMDUyMDdlNWM3Y2JlNjJhZGJjODQzNjQ1NmJl",
    "commit": {
      "author": {
        "name": "Rusty Russell",
        "email": "rusty@rustcorp.com.au",
        "date": "2017-07-21T23:30:19Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-05-04T16:19:01Z"
      },
      "message": "open_hash_set: don't bother counting scan_max in find().\n\nThe caller aborts when an insert fails (as expected), so don't need\nto check here, nor the extra equal_instance() check.\n\n\t#Benchmark,count,min,max,average,min_cycles,max_cycles,average_cycles\n\tFECHeaderRTTTest1550,320,0.003286004066467,0.003375306725502,0.003304844349623,8911484,9153595,8962469\n\nSigned-off-by: Rusty Russell <rusty@rustcorp.com.au>",
      "tree": {
        "sha": "5a06621a54ba889e0e855dbd36fab93e9bbbf280",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5a06621a54ba889e0e855dbd36fab93e9bbbf280"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0199479e6d58305207e5c7cbe62adbc8436456be",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0199479e6d58305207e5c7cbe62adbc8436456be",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0199479e6d58305207e5c7cbe62adbc8436456be",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0199479e6d58305207e5c7cbe62adbc8436456be/comments",
    "author": {
      "login": "rustyrussell",
      "id": 775844,
      "node_id": "MDQ6VXNlcjc3NTg0NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/775844?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rustyrussell",
      "html_url": "https://github.com/rustyrussell",
      "followers_url": "https://api.github.com/users/rustyrussell/followers",
      "following_url": "https://api.github.com/users/rustyrussell/following{/other_user}",
      "gists_url": "https://api.github.com/users/rustyrussell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rustyrussell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rustyrussell/subscriptions",
      "organizations_url": "https://api.github.com/users/rustyrussell/orgs",
      "repos_url": "https://api.github.com/users/rustyrussell/repos",
      "events_url": "https://api.github.com/users/rustyrussell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rustyrussell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ab348136e9edeb9af2c44764fcf94067c4edcb8e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab348136e9edeb9af2c44764fcf94067c4edcb8e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ab348136e9edeb9af2c44764fcf94067c4edcb8e"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 4,
      "deletions": 8
    },
    "files": [
      {
        "sha": "3071df7a6b36d3f142d12698abb72cf4b0c34e62",
        "filename": "src/open_hash_set.h",
        "status": "modified",
        "additions": 4,
        "deletions": 8,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0199479e6d58305207e5c7cbe62adbc8436456be/src/open_hash_set.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0199479e6d58305207e5c7cbe62adbc8436456be/src/open_hash_set.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/open_hash_set.h?ref=0199479e6d58305207e5c7cbe62adbc8436456be",
        "patch": "@@ -88,17 +88,13 @@ class open_hash_set\n \n     iterator find(const value_type& value) {\n         size_t pos = hash_base(m_hash_instance(value));\n-        size_t i = 0;\n-        while (i < scan_max) {\n-            if (m_null_instance(m_table[pos])) break;\n-            if (m_equal_instance(m_table[pos], value)) break;\n+        while (!m_equal_instance(m_table[pos], value)) {\n+            if (m_null_instance(m_table[pos])) {\n+                return end();\n+            }\n             pos = (pos + 1)  & ((size_type(1) << m_bits)-1);\n-            i++;\n         }\n \n-        if (i == scan_max || m_null_instance(m_table[pos]) || !m_equal_instance(m_table[pos], value)) {\n-            return end();\n-        }\n         return iterator(&m_table[pos]);\n     }\n "
      }
    ]
  },
  {
    "sha": "4e2e6754612c57f21063245379335a5e9d1449f5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZTJlNjc1NDYxMmM1N2YyMTA2MzI0NTM3OTMzNWE1ZTlkMTQ0OWY1",
    "commit": {
      "author": {
        "name": "Rusty Russell",
        "email": "rusty@rustcorp.com.au",
        "date": "2017-07-21T23:31:36Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-05-04T16:19:01Z"
      },
      "message": "open_hash_set: make find_fast() that uses a const table.\n\nI cheated here, and just returned a damn pointer.  Similar gains might be\nmade from creating a const_iterator, but end() is not NULL, so it's a more\nexpensive comparison in the caller.\n\n\t#Benchmark,count,min,max,average,min_cycles,max_cycles,average_cycles\n\tFECHeaderRTTTest1550,320,0.003265343606472,0.003385126590729,0.003300794214010,8855479,9180430,8951641\n\nSigned-off-by: Rusty Russell <rusty@rustcorp.com.au>",
      "tree": {
        "sha": "4365a13a06b7d82e2d59ddfdd60b4e9d009177f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4365a13a06b7d82e2d59ddfdd60b4e9d009177f2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4e2e6754612c57f21063245379335a5e9d1449f5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e2e6754612c57f21063245379335a5e9d1449f5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4e2e6754612c57f21063245379335a5e9d1449f5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e2e6754612c57f21063245379335a5e9d1449f5/comments",
    "author": {
      "login": "rustyrussell",
      "id": 775844,
      "node_id": "MDQ6VXNlcjc3NTg0NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/775844?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rustyrussell",
      "html_url": "https://github.com/rustyrussell",
      "followers_url": "https://api.github.com/users/rustyrussell/followers",
      "following_url": "https://api.github.com/users/rustyrussell/following{/other_user}",
      "gists_url": "https://api.github.com/users/rustyrussell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rustyrussell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rustyrussell/subscriptions",
      "organizations_url": "https://api.github.com/users/rustyrussell/orgs",
      "repos_url": "https://api.github.com/users/rustyrussell/repos",
      "events_url": "https://api.github.com/users/rustyrussell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rustyrussell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0199479e6d58305207e5c7cbe62adbc8436456be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0199479e6d58305207e5c7cbe62adbc8436456be",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0199479e6d58305207e5c7cbe62adbc8436456be"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 22,
      "deletions": 22
    },
    "files": [
      {
        "sha": "8153672e318854258ffc5acb5ac96be41dcc931e",
        "filename": "src/blockencodings.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 18,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e2e6754612c57f21063245379335a5e9d1449f5/src/blockencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e2e6754612c57f21063245379335a5e9d1449f5/src/blockencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.cpp?ref=4e2e6754612c57f21063245379335a5e9d1449f5",
        "patch": "@@ -54,19 +54,19 @@ namespace\n     static_assert(sizeof(ShortIdIndexPair) == 8, \"\");\n \n     struct ShortIdIndexPairHasher {\n-        uint64_t operator()(const ShortIdIndexPair& elem) {\n+        uint64_t operator()(const ShortIdIndexPair& elem) const {\n             return elem.shortid;\n         }\n     };\n \n     struct ShortIdIndexPairEqual {\n-        bool operator()(const ShortIdIndexPair& a, const ShortIdIndexPair& b) {\n+        bool operator()(const ShortIdIndexPair& a, const ShortIdIndexPair& b) const {\n             return a.shortid == b.shortid;\n         }\n     };\n \n     struct ShortIdIndexPairIsNull {\n-        bool operator()(const ShortIdIndexPair& elem) {\n+        bool operator()(const ShortIdIndexPair& elem) const {\n             return elem.shortid == 0 && elem.index == 0;\n         }\n     };\n@@ -131,18 +131,18 @@ ReadStatus PartiallyDownloadedBlock::InitData(const CBlockHeaderAndShortTxIDs& c\n         if (i + 1 < vTxHashes.size()) {\n             next_shortid = cmpctblock.GetShortID(vTxHashes[i + 1].first);\n         }\n-        auto idit = shorttxids.find(ShortIdIndexPair(shortid));\n-        if (idit != shorttxids.end()) {\n-            if (!have_txn[idit->index]) {\n-                txn_available[idit->index] = vTxHashes[i].second->GetSharedTx();\n-                have_txn[idit->index]  = true;\n+        const ShortIdIndexPair *p = shorttxids.find_fast(ShortIdIndexPair(shortid));\n+        if (p) {\n+            if (!have_txn[p->index]) {\n+                txn_available[p->index] = vTxHashes[i].second->GetSharedTx();\n+                have_txn[p->index] = true;\n                 mempool_count++;\n             } else {\n                 // If we find two mempool txn that match the short id, just request it.\n                 // This should be rare enough that the extra bandwidth doesn't matter,\n                 // but eating a round-trip due to FillBlock failure would be annoying\n-                if (txn_available[idit->index]) {\n-                    txn_available[idit->index].reset();\n+                if (txn_available[p->index]) {\n+                    txn_available[p->index].reset();\n                     mempool_count--;\n                 }\n             }\n@@ -162,11 +162,11 @@ ReadStatus PartiallyDownloadedBlock::InitData(const CBlockHeaderAndShortTxIDs& c\n         if (i + 1 < extra_txn.size()) {\n             next_shortid = cmpctblock.GetShortID(extra_txn[i + 1].first);\n         }\n-        auto idit = shorttxids.find(ShortIdIndexPair(shortid));\n-        if (idit != shorttxids.end()) {\n-            if (!have_txn[idit->index]) {\n-                txn_available[idit->index] = extra_txn[i].second;\n-                have_txn[idit->index]  = true;\n+        const ShortIdIndexPair *p = shorttxids.find_fast(ShortIdIndexPair(shortid));\n+        if (p) {\n+            if (!have_txn[p->index]) {\n+                txn_available[p->index] = extra_txn[i].second;\n+                have_txn[p->index]  = true;\n                 mempool_count++;\n                 extra_count++;\n             } else {\n@@ -176,9 +176,9 @@ ReadStatus PartiallyDownloadedBlock::InitData(const CBlockHeaderAndShortTxIDs& c\n                 // but eating a round-trip due to FillBlock failure would be annoying\n                 // Note that we don't want duplication between extra_txn and mempool to\n                 // trigger this case, so we compare witness hashes first\n-                if (txn_available[idit->index] &&\n-                        txn_available[idit->index]->GetWitnessHash() != extra_txn[i].second->GetWitnessHash()) {\n-                    txn_available[idit->index].reset();\n+                if (txn_available[p->index] &&\n+                        txn_available[p->index]->GetWitnessHash() != extra_txn[i].second->GetWitnessHash()) {\n+                    txn_available[p->index].reset();\n                     mempool_count--;\n                     extra_count--;\n                 }"
      },
      {
        "sha": "5a367445999eb8cca6e8132d1d6210d85ff28fd8",
        "filename": "src/open_hash_set.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e2e6754612c57f21063245379335a5e9d1449f5/src/open_hash_set.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e2e6754612c57f21063245379335a5e9d1449f5/src/open_hash_set.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/open_hash_set.h?ref=4e2e6754612c57f21063245379335a5e9d1449f5",
        "patch": "@@ -44,7 +44,7 @@ class open_hash_set\n     size_type m_count = 0;\n \n     /* Hash should be uniform already. */\n-    inline size_t hash_base(uint64_t hash) {\n+    inline size_t hash_base(uint64_t hash) const {\n         return hash & ((size_type(1) << m_bits)-1);\n     }\n \n@@ -86,16 +86,16 @@ class open_hash_set\n         return std::make_pair(iterator(&m_table[pos]), true);\n     }\n \n-    iterator find(const value_type& value) {\n+    const value_type *find_fast(const value_type& value) const {\n         size_t pos = hash_base(m_hash_instance(value));\n         while (!m_equal_instance(m_table[pos], value)) {\n             if (m_null_instance(m_table[pos])) {\n-                return end();\n+                return nullptr;\n             }\n             pos = (pos + 1)  & ((size_type(1) << m_bits)-1);\n         }\n \n-        return iterator(&m_table[pos]);\n+        return &m_table[pos];\n     }\n \n     iterator end() {"
      }
    ]
  },
  {
    "sha": "af1be03a43387d5471f8f4c5e7b7a996797c9f1b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZjFiZTAzYTQzMzg3ZDU0NzFmOGY0YzVlN2I3YTk5Njc5N2M5ZjFi",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-05-24T20:37:50Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-05-04T16:19:01Z"
      },
      "message": "Return early in PartiallyDownloadedBlock if we got full-prefill",
      "tree": {
        "sha": "563c0d750da7f2f3a9bc29e7c7c4db50e9261997",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/563c0d750da7f2f3a9bc29e7c7c4db50e9261997"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/af1be03a43387d5471f8f4c5e7b7a996797c9f1b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af1be03a43387d5471f8f4c5e7b7a996797c9f1b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/af1be03a43387d5471f8f4c5e7b7a996797c9f1b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af1be03a43387d5471f8f4c5e7b7a996797c9f1b/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4e2e6754612c57f21063245379335a5e9d1449f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e2e6754612c57f21063245379335a5e9d1449f5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4e2e6754612c57f21063245379335a5e9d1449f5"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b1769caf41ac769869c11e13b8444dbf630a77e3",
        "filename": "src/blockencodings.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af1be03a43387d5471f8f4c5e7b7a996797c9f1b/src/blockencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af1be03a43387d5471f8f4c5e7b7a996797c9f1b/src/blockencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.cpp?ref=af1be03a43387d5471f8f4c5e7b7a996797c9f1b",
        "patch": "@@ -101,6 +101,10 @@ ReadStatus PartiallyDownloadedBlock::InitData(const CBlockHeaderAndShortTxIDs& c\n     }\n     prefilled_count = cmpctblock.prefilledtxn.size();\n \n+    if (cmpctblock.shorttxids.empty()) {\n+        return READ_STATUS_OK;\n+    }\n+\n     // Calculate map of txids -> positions and check mempool to see what we have (or don't)\n     // Because well-formed cmpctblock messages will have a (relatively) uniform distribution\n     // of short IDs, any highly-uneven distribution of elements can be safely treated as a"
      }
    ]
  },
  {
    "sha": "cfe5377da7925e400166ec37d73af35de2669e55",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZmU1Mzc3ZGE3OTI1ZTQwMDE2NmVjMzdkNzNhZjM1ZGUyNjY5ZTU1",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-06-05T00:54:17Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-05-04T16:19:01Z"
      },
      "message": "Dont alloc twice in block header deserialize",
      "tree": {
        "sha": "85afe5a8878d964f1449293285b8cb5faf11dbf8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/85afe5a8878d964f1449293285b8cb5faf11dbf8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cfe5377da7925e400166ec37d73af35de2669e55",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfe5377da7925e400166ec37d73af35de2669e55",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cfe5377da7925e400166ec37d73af35de2669e55",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfe5377da7925e400166ec37d73af35de2669e55/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "af1be03a43387d5471f8f4c5e7b7a996797c9f1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af1be03a43387d5471f8f4c5e7b7a996797c9f1b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/af1be03a43387d5471f8f4c5e7b7a996797c9f1b"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "de7482ced32921d8824b2503decd7001126f4e27",
        "filename": "src/blockencodings.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfe5377da7925e400166ec37d73af35de2669e55/src/blockencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfe5377da7925e400166ec37d73af35de2669e55/src/blockencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.h?ref=cfe5377da7925e400166ec37d73af35de2669e55",
        "patch": "@@ -166,7 +166,7 @@ class CBlockHeaderAndShortTxIDs {\n         if (ser_action.ForRead()) {\n             size_t i = 0;\n             while (shorttxids.size() < shorttxids_size) {\n-                shorttxids.resize(std::min((uint64_t)(1000 + shorttxids.size()), shorttxids_size));\n+                shorttxids.resize(std::min((uint64_t)(5000 + shorttxids.size()), shorttxids_size));\n                 for (; i < shorttxids.size(); i++) {\n                     uint32_t lsb = 0; uint16_t msb = 0;\n                     READWRITE(lsb);"
      }
    ]
  }
]