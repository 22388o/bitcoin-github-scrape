practicalswift,2018-11-07T22:22:35Z,@kazcw Very nice find! How did you find this issue?,https://github.com/bitcoin/bitcoin/pull/14685#issuecomment-436799664,436799664,
kazcw,2018-11-08T00:12:17Z,"@practicalswift well, back in 2016 I used to skim some of the diffs I didn't review. I made a mental note that this looked off but not exploitable. I have a serious backlog of mental notes and finally got around to this :laughing:.",https://github.com/bitcoin/bitcoin/pull/14685#issuecomment-436825117,436825117,
DrahtBot,2018-11-08T00:38:16Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#10785](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/10785.html) (Serialization improvements by sipa)\n\nIf y",https://github.com/bitcoin/bitcoin/pull/14685#issuecomment-436830398,436830398,
gmaxwell,2018-11-13T18:02:30Z,"I don't believe this change is the most correct change.   The existing code upcasts a and b and then checks if a+b is greater than std::numeric_limits<uint16_t>::max which is the maximum value that can be represented in a uint16_t, if it is it rejects the encoding.\n\nThe change switches to >= which will reject a perfectly valid index of 0xFFFF in the last position, thus reducing the maximum siz",https://github.com/bitcoin/bitcoin/pull/14685#issuecomment-438375018,438375018,
kazcw,2018-11-13T20:47:31Z,"That is a cleaner solution. I redid it that way and added a test for the 0xffff case.\n\nAlso, I noticed if a peer sends a bogus CBlockHeaderAndShortTxIDs that has a BlockTxCount() > 0xffff, it looks like that isn't rejected upfront and we may respond with a bogus BlockTransactionsRequest containing illegal index deltas--so I added a check for that condition at compactblock deserialization time.",https://github.com/bitcoin/bitcoin/pull/14685#issuecomment-438430862,438430862,
gmaxwell,2018-11-15T23:11:18Z,ACK.,https://github.com/bitcoin/bitcoin/pull/14685#issuecomment-439224004,439224004,
sipa,2018-11-16T01:51:35Z,utACK b08af10fb299dc3fdcd1f022619fb112c72e5d8e,https://github.com/bitcoin/bitcoin/pull/14685#issuecomment-439254356,439254356,
laanwj,2018-11-18T09:15:13Z,utACK b08af10fb299dc3fdcd1f022619fb112c72e5d8e,https://github.com/bitcoin/bitcoin/pull/14685#issuecomment-439678449,439678449,
practicalswift,2018-11-07T22:28:42Z,Nit: Move `{` one line up to make consistent with opening `try {`,https://github.com/bitcoin/bitcoin/pull/14685#discussion_r231702641,231702641,src/test/blockencodings_tests.cpp
promag,2018-11-15T13:00:01Z,"nit, space after `catch`, remove space before `&`.",https://github.com/bitcoin/bitcoin/pull/14685#discussion_r233831531,233831531,src/test/blockencodings_tests.cpp
promag,2018-11-15T13:00:44Z,"In one commit you could add the test like:\n```\n        stream >> req1;\n        // deserialize above succeeds and this check fails, demonstrating the overflow\n        BOOST_CHECK(req1.indexes[1] < req1.indexes[2]);\n        BOOST_CHECK(0);\n```\nAnd then in the commit that fixes deserialization it could change the test to:\n```\n        stream >> req1;\n        BOOST_CHECK(0);\n```\",https://github.com/bitcoin/bitcoin/pull/14685#discussion_r233831737,233831737,src/test/blockencodings_tests.cpp
kazcw,2018-11-15T17:52:26Z,Is it not useful for the test to distinguish between a regression to the original failure mode and other possible failures?,https://github.com/bitcoin/bitcoin/pull/14685#discussion_r233946683,233946683,src/test/blockencodings_tests.cpp
promag,2018-11-15T18:06:46Z,"IMO if that really matters you can distinguish by blaming. Furthermore, if the fix is wrongly reverted the test doesn't fail?",https://github.com/bitcoin/bitcoin/pull/14685#discussion_r233951330,233951330,src/test/blockencodings_tests.cpp
kazcw,2018-11-15T18:21:50Z,Ok. I did not know BOOST_CHECK minimization was a goal.,https://github.com/bitcoin/bitcoin/pull/14685#discussion_r233956178,233956178,src/test/blockencodings_tests.cpp
promag,2018-11-15T22:27:40Z,"Note that it's my opinion, wait until others weight in.",https://github.com/bitcoin/bitcoin/pull/14685#discussion_r234031920,234031920,src/test/blockencodings_tests.cpp
sipa,2018-11-16T01:51:13Z,I think it's fine.,https://github.com/bitcoin/bitcoin/pull/14685#discussion_r234068739,234068739,src/test/blockencodings_tests.cpp
laanwj,2018-11-18T09:12:42Z,"> Ok. I did not know BOOST_CHECK minimization was a goal.\n\nIt's not *unless* it's used extremely frequenly in inner loops, in which case it is quite a slow operation â€” and for some reason, much slower on some platforms than others. I think it's fine here.",https://github.com/bitcoin/bitcoin/pull/14685#discussion_r234434601,234434601,src/test/blockencodings_tests.cpp
