[
  {
    "sha": "cd2f4f35bba5c443f460fbbe99c7048a01ed9780",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZDJmNGYzNWJiYTVjNDQzZjQ2MGZiYmU5OWM3MDQ4YTAxZWQ5Nzgw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-08-13T13:34:05Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-08-13T13:34:26Z"
      },
      "message": "build: bump version to 0.17.0\n\nUpdate version after branching off.\n\nTree-SHA512: a2e2f82e7b50c0027edc8f382ad29429327edb81ca058abe3c35e049afcd5b7bcedae4545bfb59e8f7a1c8b9c97cfe550d8ae9275bd9e90cfadea22f7b835a2b",
      "tree": {
        "sha": "64a501e52aab9bef26c050320762c342cb0f0001",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/64a501e52aab9bef26c050320762c342cb0f0001"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cd2f4f35bba5c443f460fbbe99c7048a01ed9780",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJbcYjiAAoJEB5K7WKYbNJdamgIAKzpc/5uVBj9nlXk5eD5s/oM\nVTux1PDLuN52YMfTB5YzMAXb6abXh7cuFSE//Vmksn/r9fHuU6UuraebmL6nE+vr\nC0X3nJtNhd7NKx7kDOuK46cCfHwSEZgqaaKQ/9JWI9GflbF/jdtUdjUi09ff2rI4\n7zgLGfc+hBD5vNlGj7IJbo9DFyahOIgGUYxeDbJWAIf10xhIRaiP9LqbGJF+weU7\nLxJ54HHJG9NF4RhW+sxuPI5RGKFqM5CxUu9F5pVgsZWRUniLw4ywho52F1molH1X\nZxJZ9jfHst8nY0JoPMgHkgrGDyxULlZrOaXFaJ5hySOPyGAwHYLAYW6eePOeS8Y=\n=4kZm\n-----END PGP SIGNATURE-----",
        "payload": "tree 64a501e52aab9bef26c050320762c342cb0f0001\nparent 8a9ffec0a257da659ba54c5073bfc820986ae9c1\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1534167245 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1534167266 +0200\n\nbuild: bump version to 0.17.0\n\nUpdate version after branching off.\n\nTree-SHA512: a2e2f82e7b50c0027edc8f382ad29429327edb81ca058abe3c35e049afcd5b7bcedae4545bfb59e8f7a1c8b9c97cfe550d8ae9275bd9e90cfadea22f7b835a2b\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd2f4f35bba5c443f460fbbe99c7048a01ed9780",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cd2f4f35bba5c443f460fbbe99c7048a01ed9780",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd2f4f35bba5c443f460fbbe99c7048a01ed9780/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8a9ffec0a257da659ba54c5073bfc820986ae9c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a9ffec0a257da659ba54c5073bfc820986ae9c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8a9ffec0a257da659ba54c5073bfc820986ae9c1"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "44ca821a2a4a3c6e50cac5156b15e6cfd18b6c1e",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd2f4f35bba5c443f460fbbe99c7048a01ed9780/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd2f4f35bba5c443f460fbbe99c7048a01ed9780/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=cd2f4f35bba5c443f460fbbe99c7048a01ed9780",
        "patch": "@@ -1,10 +1,10 @@\n dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n AC_PREREQ([2.60])\n define(_CLIENT_VERSION_MAJOR, 0)\n-define(_CLIENT_VERSION_MINOR, 16)\n-define(_CLIENT_VERSION_REVISION, 99)\n+define(_CLIENT_VERSION_MINOR, 17)\n+define(_CLIENT_VERSION_REVISION, 0)\n define(_CLIENT_VERSION_BUILD, 0)\n-define(_CLIENT_VERSION_IS_RELEASE, false)\n+define(_CLIENT_VERSION_IS_RELEASE, true)\n define(_COPYRIGHT_YEAR, 2018)\n define(_COPYRIGHT_HOLDERS,[The %s developers])\n define(_COPYRIGHT_HOLDERS_SUBSTITUTION,[[Bitcoin Core]])"
      }
    ]
  },
  {
    "sha": "f0f745d8de9ab8fd18208671294063abf783cf90",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMGY3NDVkOGRlOWFiOGZkMTgyMDg2NzEyOTQwNjNhYmY3ODNjZjkw",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-08-13T14:04:04Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-08-13T14:04:04Z"
      },
      "message": "doc: regenerate manpages",
      "tree": {
        "sha": "ffb2f61c947aef5cb7f64db6cd0e2cb2abfc4270",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ffb2f61c947aef5cb7f64db6cd0e2cb2abfc4270"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f0f745d8de9ab8fd18208671294063abf783cf90",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJHBAABCAAxFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAltxj9QTHGZhbnF1YWtl\nQGdtYWlsLmNvbQAKCRAu659cwJUmwcX3D/oDq74Pv/WLsIc3JjK6K9e1/RAgCH/X\nvsG6/j/g3HBmPmx7P4JaKcrA25JKm/tMMJHYY5ywO7TixdWETK0FQHu1Bsgdyijc\nrne5s/B7hHWzvuKLLuPockPSqEKedqClwjGS5jQuzL11rHxT5r5ZFdee9fbYo7HC\nQyitGFxYvCinu1eK9jsw0KSIegyQSBR3jTLFh0oVIrbGelzE8ufkNKCZGVYqs3JB\ns59dG1qsDS3CHBrvBjacJr0tfL+UbS4igc4//EvN1Oa/eO7m4kzc9KJrs+Hk0mok\nvrnV+EIvAsMDGeA4ntK5BFkPat7Bew6bltMRwadW/geSp5s5XG3TPb8E4Y98U7zr\nbHvhJZWRTVSi+Bgp1UTz+NsdYTBKZOjTIH3PhoFKhrJrMcn84gjnp8v1kvr1XeZO\n1bsnb5srwFEzfMLwTxybs49htEQQZlad23pt81QPEbximkGJUj0rSxarlQcsEn8J\nOLnXlpHKtO6nq67po1NSzxrvfANlgjyCvbNPNXu8jkIytD3K+ObSF2wps6tCwqt5\n4pH/gyfAtqH9PzyMCgKa0crS5uNyuFHzyhToSXsilf/1cg3K4vZoq1fFrF8i9dr7\nckB7TestWy/aEu3O67Eg+JGMu0IYUS+PKaCgaBwj8HDPG5X0RTZD3Lil6gcLCTeK\n+WUhwOQUe4sI3g==\n=5FIk\n-----END PGP SIGNATURE-----",
        "payload": "tree ffb2f61c947aef5cb7f64db6cd0e2cb2abfc4270\nparent cd2f4f35bba5c443f460fbbe99c7048a01ed9780\nauthor fanquake <fanquake@gmail.com> 1534169044 +0800\ncommitter fanquake <fanquake@gmail.com> 1534169044 +0800\n\ndoc: regenerate manpages\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0f745d8de9ab8fd18208671294063abf783cf90",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f0f745d8de9ab8fd18208671294063abf783cf90",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0f745d8de9ab8fd18208671294063abf783cf90/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cd2f4f35bba5c443f460fbbe99c7048a01ed9780",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd2f4f35bba5c443f460fbbe99c7048a01ed9780",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cd2f4f35bba5c443f460fbbe99c7048a01ed9780"
      }
    ],
    "stats": {
      "total": 92,
      "additions": 46,
      "deletions": 46
    },
    "files": [
      {
        "sha": "ca7096b86cd8e2b39f699f2dee236331e4ee3175",
        "filename": "doc/man/bitcoin-cli.1",
        "status": "modified",
        "additions": 19,
        "deletions": 17,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0f745d8de9ab8fd18208671294063abf783cf90/doc/man/bitcoin-cli.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0f745d8de9ab8fd18208671294063abf783cf90/doc/man/bitcoin-cli.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-cli.1?ref=f0f745d8de9ab8fd18208671294063abf783cf90",
        "patch": "@@ -1,17 +1,21 @@\n .\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIN-CLI \"1\" \"July 2018\" \"bitcoin-cli v0.16.99.0\" \"User Commands\"\n+.TH BITCOIN-CLI \"1\" \"August 2018\" \"bitcoin-cli v0.17.0.0\" \"User Commands\"\n .SH NAME\n-bitcoin-cli \\- manual page for bitcoin-cli v0.16.99.0\n+bitcoin-cli \\- manual page for bitcoin-cli v0.17.0.0\n+.SH SYNOPSIS\n+.B bitcoin-cli\n+[\\fI\\,options\\/\\fR] \\fI\\,<command> \\/\\fR[\\fI\\,params\\/\\fR]  \\fI\\,Send command to Bitcoin Core\\/\\fR\n+.br\n+.B bitcoin-cli\n+[\\fI\\,options\\/\\fR] \\fI\\,-named <command> \\/\\fR[\\fI\\,name=value\\/\\fR]...  \\fI\\,Send command to Bitcoin Core (with named arguments)\\/\\fR\n+.br\n+.B bitcoin-cli\n+[\\fI\\,options\\/\\fR] \\fI\\,help                List commands\\/\\fR\n+.br\n+.B bitcoin-cli\n+[\\fI\\,options\\/\\fR] \\fI\\,help <command>      Get help for a command\\/\\fR\n .SH DESCRIPTION\n-Bitcoin Core RPC client version v0.16.99.0\n-.SS \"Usage:\"\n-.TP\n-bitcoin\\-cli [options] <command> [params]\n-Send command to Bitcoin Core\n-.IP\n-bitcoin\\-cli [options] \\fB\\-named\\fR <command> [name=value] ... Send command to Bitcoin Core (with named arguments)\n-bitcoin\\-cli [options] help                List commands\n-bitcoin\\-cli [options] help <command>      Get help for a command\n+Bitcoin Core RPC client version v0.17.0.0\n .SH OPTIONS\n .HP\n \\-?\n@@ -77,15 +81,13 @@ corresponding \\fB\\-wallet\\fR option passed to bitcoind)\n \\fB\\-stdin\\fR\n .IP\n Read extra arguments from standard input, one per line until EOF/Ctrl\\-D\n-(recommended for sensitive information such as passphrases).\n-When combined with \\fB\\-stdinrpcpass\\fR, the first line from standard\n-input is used for the RPC password.\n+(recommended for sensitive information such as passphrases). When\n+combined with \\fB\\-stdinrpcpass\\fR, the first line from standard input\n+is used for the RPC password.\n .HP\n \\fB\\-stdinrpcpass\\fR\n-.TP\n-Read RPC password from standard input as a single line.\n-When combined\n .IP\n+Read RPC password from standard input as a single line. When combined\n with \\fB\\-stdin\\fR, the first line from standard input is used for the\n RPC password.\n .HP"
      },
      {
        "sha": "eca771ad5b49235610671bbe0c01bb5609a58dca",
        "filename": "doc/man/bitcoin-qt.1",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0f745d8de9ab8fd18208671294063abf783cf90/doc/man/bitcoin-qt.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0f745d8de9ab8fd18208671294063abf783cf90/doc/man/bitcoin-qt.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-qt.1?ref=f0f745d8de9ab8fd18208671294063abf783cf90",
        "patch": "@@ -1,12 +1,12 @@\n .\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIN-QT \"1\" \"July 2018\" \"bitcoin-qt v0.16.99.0\" \"User Commands\"\n+.TH BITCOIN-QT \"1\" \"August 2018\" \"bitcoin-qt v0.17.0.0\" \"User Commands\"\n .SH NAME\n-bitcoin-qt \\- manual page for bitcoin-qt v0.16.99.0\n+bitcoin-qt \\- manual page for bitcoin-qt v0.17.0.0\n+.SH SYNOPSIS\n+.B bitcoin-qt\n+[\\fI\\,command-line options\\/\\fR]\n .SH DESCRIPTION\n-Bitcoin Core version v0.16.99.0 (64\\-bit)\n-Usage:\n-.IP\n-bitcoin\\-qt [command\\-line options]\n+Bitcoin Core version v0.17.0.0 (64\\-bit)\n .SH OPTIONS\n .HP\n \\-?\n@@ -23,9 +23,9 @@ long fork (%s in cmd is replaced by message)\n If this block is in the chain assume that it and its ancestors are valid\n and potentially skip their script verification (0 to verify all,\n default:\n-0000000000000000005214481d2d96f898e3d5416e43359c145944a909d242e0,\n+0000000000000000002e63058c023a9a1de233554f28c7b21380b6c9003f36a8,\n testnet:\n-0000000002e9e7b00e1f6dc5123a04aad68dd0f0968d8c7aa45f6640795c37b1)\n+0000000000000037a8cd3e06cd5edbfe9dd1dbcc5dacab279376ef7cfc2b4c75)\n .HP\n \\fB\\-blocknotify=\\fR<cmd>\n .IP\n@@ -108,7 +108,7 @@ blocks if a target size in MiB is provided. This mode is\n incompatible with \\fB\\-txindex\\fR and \\fB\\-rescan\\fR. Warning: Reverting this\n setting requires re\\-downloading the entire blockchain. (default:\n 0 = disable pruning blocks, 1 = allow manual pruning via RPC,\n->550 = automatically prune block files to stay under the\n+>=550 = automatically prune block files to stay under the\n specified target size in MiB)\n .HP\n \\fB\\-reindex\\fR"
      },
      {
        "sha": "1020a61b53dd655b88c788cb6eb000fc31c523a7",
        "filename": "doc/man/bitcoin-tx.1",
        "status": "modified",
        "additions": 9,
        "deletions": 10,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0f745d8de9ab8fd18208671294063abf783cf90/doc/man/bitcoin-tx.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0f745d8de9ab8fd18208671294063abf783cf90/doc/man/bitcoin-tx.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-tx.1?ref=f0f745d8de9ab8fd18208671294063abf783cf90",
        "patch": "@@ -1,16 +1,15 @@\n .\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIN-TX \"1\" \"July 2018\" \"bitcoin-tx v0.16.99.0\" \"User Commands\"\n+.TH BITCOIN-TX \"1\" \"August 2018\" \"bitcoin-tx v0.17.0.0\" \"User Commands\"\n .SH NAME\n-bitcoin-tx \\- manual page for bitcoin-tx v0.16.99.0\n+bitcoin-tx \\- manual page for bitcoin-tx v0.17.0.0\n+.SH SYNOPSIS\n+.B bitcoin-tx\n+[\\fI\\,options\\/\\fR] \\fI\\,<hex-tx> \\/\\fR[\\fI\\,commands\\/\\fR]  \\fI\\,Update hex-encoded bitcoin transaction\\/\\fR\n+.br\n+.B bitcoin-tx\n+[\\fI\\,options\\/\\fR] \\fI\\,-create \\/\\fR[\\fI\\,commands\\/\\fR]   \\fI\\,Create hex-encoded bitcoin transaction\\/\\fR\n .SH DESCRIPTION\n-Bitcoin Core bitcoin\\-tx utility version v0.16.99.0\n-.SS \"Usage:\"\n-.TP\n-bitcoin\\-tx [options] <hex\\-tx> [commands]\n-Update hex\\-encoded bitcoin transaction\n-.TP\n-bitcoin\\-tx [options] \\fB\\-create\\fR [commands]\n-Create hex\\-encoded bitcoin transaction\n+Bitcoin Core bitcoin\\-tx utility version v0.17.0.0\n .SH OPTIONS\n .HP\n \\-?"
      },
      {
        "sha": "63531fdb213f676436f2059966c96f6f88389f78",
        "filename": "doc/man/bitcoind.1",
        "status": "modified",
        "additions": 9,
        "deletions": 10,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0f745d8de9ab8fd18208671294063abf783cf90/doc/man/bitcoind.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0f745d8de9ab8fd18208671294063abf783cf90/doc/man/bitcoind.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoind.1?ref=f0f745d8de9ab8fd18208671294063abf783cf90",
        "patch": "@@ -1,13 +1,12 @@\n .\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIND \"1\" \"July 2018\" \"bitcoind v0.16.99.0\" \"User Commands\"\n+.TH BITCOIND \"1\" \"August 2018\" \"bitcoind v0.17.0.0\" \"User Commands\"\n .SH NAME\n-bitcoind \\- manual page for bitcoind v0.16.99.0\n+bitcoind \\- manual page for bitcoind v0.17.0.0\n+.SH SYNOPSIS\n+.B bitcoind\n+[\\fI\\,options\\/\\fR]                     \\fI\\,Start Bitcoin Core Daemon\\/\\fR\n .SH DESCRIPTION\n-Bitcoin Core Daemon version v0.16.99.0\n-.SS \"Usage:\"\n-.TP\n-bitcoind [options]\n-Start Bitcoin Core Daemon\n+Bitcoin Core Daemon version v0.17.0.0\n .SH OPTIONS\n .HP\n \\-?\n@@ -24,9 +23,9 @@ long fork (%s in cmd is replaced by message)\n If this block is in the chain assume that it and its ancestors are valid\n and potentially skip their script verification (0 to verify all,\n default:\n-0000000000000000005214481d2d96f898e3d5416e43359c145944a909d242e0,\n+0000000000000000002e63058c023a9a1de233554f28c7b21380b6c9003f36a8,\n testnet:\n-0000000002e9e7b00e1f6dc5123a04aad68dd0f0968d8c7aa45f6640795c37b1)\n+0000000000000037a8cd3e06cd5edbfe9dd1dbcc5dacab279376ef7cfc2b4c75)\n .HP\n \\fB\\-blocknotify=\\fR<cmd>\n .IP\n@@ -109,7 +108,7 @@ blocks if a target size in MiB is provided. This mode is\n incompatible with \\fB\\-txindex\\fR and \\fB\\-rescan\\fR. Warning: Reverting this\n setting requires re\\-downloading the entire blockchain. (default:\n 0 = disable pruning blocks, 1 = allow manual pruning via RPC,\n->550 = automatically prune block files to stay under the\n+>=550 = automatically prune block files to stay under the\n specified target size in MiB)\n .HP\n \\fB\\-reindex\\fR"
      }
    ]
  },
  {
    "sha": "ff41e479a0a3c2485f6116abcffa1bacbd86ca72",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZjQxZTQ3OWEwYTNjMjQ4NWY2MTE2YWJjZmZhMWJhY2JkODZjYTcy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-08-13T15:10:58Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-08-13T15:11:11Z"
      },
      "message": "Merge #13956: [0.17] doc: regenerate manpages\n\nf0f745d8de9ab8fd18208671294063abf783cf90 doc: regenerate manpages (fanquake)\n\nPull request description:\n\n  Done using: `contrib/devtools/gen-manpages.sh`\n\nTree-SHA512: 523b333768aa5ff289ceee3dbe627698f60c7b4624a1fe2812a40d99a5184aa2f6abd20fa467487918bbcbe1d88693c589456e75a5e747281333f75ab1f5f8b9",
      "tree": {
        "sha": "ffb2f61c947aef5cb7f64db6cd0e2cb2abfc4270",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ffb2f61c947aef5cb7f64db6cd0e2cb2abfc4270"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff41e479a0a3c2485f6116abcffa1bacbd86ca72",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJbcZ+PAAoJEB5K7WKYbNJdu2sIALFhw7TXMUtl2sC44DItRtuo\nGrcl2jnH5AAjL7WZq8psTEjcv1uj0TDrpu5TDI38GxlSvP3y/37TPUpnrqR7n0Uk\nCcaX/N/2p9oQCnNrjjzdy1wVdhnwbF+mOq88YOBWshVsdIbN6VLJIJ7hTJd4DQ16\nShGhUbNDQuhJzoNubMR1o3bAFefYU/dEDHaqB7LM2g1EyIREgh+lHUUabB+cxRNS\nrhVeKpymX68tMxoD0L6Vz07yAdBfxOqKQaeOGYvGPiwsGAE271ZgF5Ae4tkM52a8\nlFgKyW/LoJx0QEZke0Nw9B64EFKWs+ivRcxEtS02rOJZzGV+pXu3HNY2dC6y13A=\n=EFqm\n-----END PGP SIGNATURE-----",
        "payload": "tree ffb2f61c947aef5cb7f64db6cd0e2cb2abfc4270\nparent cd2f4f35bba5c443f460fbbe99c7048a01ed9780\nparent f0f745d8de9ab8fd18208671294063abf783cf90\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1534173058 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1534173071 +0200\n\nMerge #13956: [0.17] doc: regenerate manpages\n\nf0f745d8de9ab8fd18208671294063abf783cf90 doc: regenerate manpages (fanquake)\n\nPull request description:\n\n  Done using: `contrib/devtools/gen-manpages.sh`\n\nTree-SHA512: 523b333768aa5ff289ceee3dbe627698f60c7b4624a1fe2812a40d99a5184aa2f6abd20fa467487918bbcbe1d88693c589456e75a5e747281333f75ab1f5f8b9\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff41e479a0a3c2485f6116abcffa1bacbd86ca72",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ff41e479a0a3c2485f6116abcffa1bacbd86ca72",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff41e479a0a3c2485f6116abcffa1bacbd86ca72/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cd2f4f35bba5c443f460fbbe99c7048a01ed9780",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd2f4f35bba5c443f460fbbe99c7048a01ed9780",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cd2f4f35bba5c443f460fbbe99c7048a01ed9780"
      },
      {
        "sha": "f0f745d8de9ab8fd18208671294063abf783cf90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0f745d8de9ab8fd18208671294063abf783cf90",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f0f745d8de9ab8fd18208671294063abf783cf90"
      }
    ],
    "stats": {
      "total": 92,
      "additions": 46,
      "deletions": 46
    },
    "files": [
      {
        "sha": "ca7096b86cd8e2b39f699f2dee236331e4ee3175",
        "filename": "doc/man/bitcoin-cli.1",
        "status": "modified",
        "additions": 19,
        "deletions": 17,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff41e479a0a3c2485f6116abcffa1bacbd86ca72/doc/man/bitcoin-cli.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff41e479a0a3c2485f6116abcffa1bacbd86ca72/doc/man/bitcoin-cli.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-cli.1?ref=ff41e479a0a3c2485f6116abcffa1bacbd86ca72",
        "patch": "@@ -1,17 +1,21 @@\n .\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIN-CLI \"1\" \"July 2018\" \"bitcoin-cli v0.16.99.0\" \"User Commands\"\n+.TH BITCOIN-CLI \"1\" \"August 2018\" \"bitcoin-cli v0.17.0.0\" \"User Commands\"\n .SH NAME\n-bitcoin-cli \\- manual page for bitcoin-cli v0.16.99.0\n+bitcoin-cli \\- manual page for bitcoin-cli v0.17.0.0\n+.SH SYNOPSIS\n+.B bitcoin-cli\n+[\\fI\\,options\\/\\fR] \\fI\\,<command> \\/\\fR[\\fI\\,params\\/\\fR]  \\fI\\,Send command to Bitcoin Core\\/\\fR\n+.br\n+.B bitcoin-cli\n+[\\fI\\,options\\/\\fR] \\fI\\,-named <command> \\/\\fR[\\fI\\,name=value\\/\\fR]...  \\fI\\,Send command to Bitcoin Core (with named arguments)\\/\\fR\n+.br\n+.B bitcoin-cli\n+[\\fI\\,options\\/\\fR] \\fI\\,help                List commands\\/\\fR\n+.br\n+.B bitcoin-cli\n+[\\fI\\,options\\/\\fR] \\fI\\,help <command>      Get help for a command\\/\\fR\n .SH DESCRIPTION\n-Bitcoin Core RPC client version v0.16.99.0\n-.SS \"Usage:\"\n-.TP\n-bitcoin\\-cli [options] <command> [params]\n-Send command to Bitcoin Core\n-.IP\n-bitcoin\\-cli [options] \\fB\\-named\\fR <command> [name=value] ... Send command to Bitcoin Core (with named arguments)\n-bitcoin\\-cli [options] help                List commands\n-bitcoin\\-cli [options] help <command>      Get help for a command\n+Bitcoin Core RPC client version v0.17.0.0\n .SH OPTIONS\n .HP\n \\-?\n@@ -77,15 +81,13 @@ corresponding \\fB\\-wallet\\fR option passed to bitcoind)\n \\fB\\-stdin\\fR\n .IP\n Read extra arguments from standard input, one per line until EOF/Ctrl\\-D\n-(recommended for sensitive information such as passphrases).\n-When combined with \\fB\\-stdinrpcpass\\fR, the first line from standard\n-input is used for the RPC password.\n+(recommended for sensitive information such as passphrases). When\n+combined with \\fB\\-stdinrpcpass\\fR, the first line from standard input\n+is used for the RPC password.\n .HP\n \\fB\\-stdinrpcpass\\fR\n-.TP\n-Read RPC password from standard input as a single line.\n-When combined\n .IP\n+Read RPC password from standard input as a single line. When combined\n with \\fB\\-stdin\\fR, the first line from standard input is used for the\n RPC password.\n .HP"
      },
      {
        "sha": "eca771ad5b49235610671bbe0c01bb5609a58dca",
        "filename": "doc/man/bitcoin-qt.1",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff41e479a0a3c2485f6116abcffa1bacbd86ca72/doc/man/bitcoin-qt.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff41e479a0a3c2485f6116abcffa1bacbd86ca72/doc/man/bitcoin-qt.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-qt.1?ref=ff41e479a0a3c2485f6116abcffa1bacbd86ca72",
        "patch": "@@ -1,12 +1,12 @@\n .\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIN-QT \"1\" \"July 2018\" \"bitcoin-qt v0.16.99.0\" \"User Commands\"\n+.TH BITCOIN-QT \"1\" \"August 2018\" \"bitcoin-qt v0.17.0.0\" \"User Commands\"\n .SH NAME\n-bitcoin-qt \\- manual page for bitcoin-qt v0.16.99.0\n+bitcoin-qt \\- manual page for bitcoin-qt v0.17.0.0\n+.SH SYNOPSIS\n+.B bitcoin-qt\n+[\\fI\\,command-line options\\/\\fR]\n .SH DESCRIPTION\n-Bitcoin Core version v0.16.99.0 (64\\-bit)\n-Usage:\n-.IP\n-bitcoin\\-qt [command\\-line options]\n+Bitcoin Core version v0.17.0.0 (64\\-bit)\n .SH OPTIONS\n .HP\n \\-?\n@@ -23,9 +23,9 @@ long fork (%s in cmd is replaced by message)\n If this block is in the chain assume that it and its ancestors are valid\n and potentially skip their script verification (0 to verify all,\n default:\n-0000000000000000005214481d2d96f898e3d5416e43359c145944a909d242e0,\n+0000000000000000002e63058c023a9a1de233554f28c7b21380b6c9003f36a8,\n testnet:\n-0000000002e9e7b00e1f6dc5123a04aad68dd0f0968d8c7aa45f6640795c37b1)\n+0000000000000037a8cd3e06cd5edbfe9dd1dbcc5dacab279376ef7cfc2b4c75)\n .HP\n \\fB\\-blocknotify=\\fR<cmd>\n .IP\n@@ -108,7 +108,7 @@ blocks if a target size in MiB is provided. This mode is\n incompatible with \\fB\\-txindex\\fR and \\fB\\-rescan\\fR. Warning: Reverting this\n setting requires re\\-downloading the entire blockchain. (default:\n 0 = disable pruning blocks, 1 = allow manual pruning via RPC,\n->550 = automatically prune block files to stay under the\n+>=550 = automatically prune block files to stay under the\n specified target size in MiB)\n .HP\n \\fB\\-reindex\\fR"
      },
      {
        "sha": "1020a61b53dd655b88c788cb6eb000fc31c523a7",
        "filename": "doc/man/bitcoin-tx.1",
        "status": "modified",
        "additions": 9,
        "deletions": 10,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff41e479a0a3c2485f6116abcffa1bacbd86ca72/doc/man/bitcoin-tx.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff41e479a0a3c2485f6116abcffa1bacbd86ca72/doc/man/bitcoin-tx.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-tx.1?ref=ff41e479a0a3c2485f6116abcffa1bacbd86ca72",
        "patch": "@@ -1,16 +1,15 @@\n .\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIN-TX \"1\" \"July 2018\" \"bitcoin-tx v0.16.99.0\" \"User Commands\"\n+.TH BITCOIN-TX \"1\" \"August 2018\" \"bitcoin-tx v0.17.0.0\" \"User Commands\"\n .SH NAME\n-bitcoin-tx \\- manual page for bitcoin-tx v0.16.99.0\n+bitcoin-tx \\- manual page for bitcoin-tx v0.17.0.0\n+.SH SYNOPSIS\n+.B bitcoin-tx\n+[\\fI\\,options\\/\\fR] \\fI\\,<hex-tx> \\/\\fR[\\fI\\,commands\\/\\fR]  \\fI\\,Update hex-encoded bitcoin transaction\\/\\fR\n+.br\n+.B bitcoin-tx\n+[\\fI\\,options\\/\\fR] \\fI\\,-create \\/\\fR[\\fI\\,commands\\/\\fR]   \\fI\\,Create hex-encoded bitcoin transaction\\/\\fR\n .SH DESCRIPTION\n-Bitcoin Core bitcoin\\-tx utility version v0.16.99.0\n-.SS \"Usage:\"\n-.TP\n-bitcoin\\-tx [options] <hex\\-tx> [commands]\n-Update hex\\-encoded bitcoin transaction\n-.TP\n-bitcoin\\-tx [options] \\fB\\-create\\fR [commands]\n-Create hex\\-encoded bitcoin transaction\n+Bitcoin Core bitcoin\\-tx utility version v0.17.0.0\n .SH OPTIONS\n .HP\n \\-?"
      },
      {
        "sha": "63531fdb213f676436f2059966c96f6f88389f78",
        "filename": "doc/man/bitcoind.1",
        "status": "modified",
        "additions": 9,
        "deletions": 10,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff41e479a0a3c2485f6116abcffa1bacbd86ca72/doc/man/bitcoind.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff41e479a0a3c2485f6116abcffa1bacbd86ca72/doc/man/bitcoind.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoind.1?ref=ff41e479a0a3c2485f6116abcffa1bacbd86ca72",
        "patch": "@@ -1,13 +1,12 @@\n .\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIND \"1\" \"July 2018\" \"bitcoind v0.16.99.0\" \"User Commands\"\n+.TH BITCOIND \"1\" \"August 2018\" \"bitcoind v0.17.0.0\" \"User Commands\"\n .SH NAME\n-bitcoind \\- manual page for bitcoind v0.16.99.0\n+bitcoind \\- manual page for bitcoind v0.17.0.0\n+.SH SYNOPSIS\n+.B bitcoind\n+[\\fI\\,options\\/\\fR]                     \\fI\\,Start Bitcoin Core Daemon\\/\\fR\n .SH DESCRIPTION\n-Bitcoin Core Daemon version v0.16.99.0\n-.SS \"Usage:\"\n-.TP\n-bitcoind [options]\n-Start Bitcoin Core Daemon\n+Bitcoin Core Daemon version v0.17.0.0\n .SH OPTIONS\n .HP\n \\-?\n@@ -24,9 +23,9 @@ long fork (%s in cmd is replaced by message)\n If this block is in the chain assume that it and its ancestors are valid\n and potentially skip their script verification (0 to verify all,\n default:\n-0000000000000000005214481d2d96f898e3d5416e43359c145944a909d242e0,\n+0000000000000000002e63058c023a9a1de233554f28c7b21380b6c9003f36a8,\n testnet:\n-0000000002e9e7b00e1f6dc5123a04aad68dd0f0968d8c7aa45f6640795c37b1)\n+0000000000000037a8cd3e06cd5edbfe9dd1dbcc5dacab279376ef7cfc2b4c75)\n .HP\n \\fB\\-blocknotify=\\fR<cmd>\n .IP\n@@ -109,7 +108,7 @@ blocks if a target size in MiB is provided. This mode is\n incompatible with \\fB\\-txindex\\fR and \\fB\\-rescan\\fR. Warning: Reverting this\n setting requires re\\-downloading the entire blockchain. (default:\n 0 = disable pruning blocks, 1 = allow manual pruning via RPC,\n->550 = automatically prune block files to stay under the\n+>=550 = automatically prune block files to stay under the\n specified target size in MiB)\n .HP\n \\fB\\-reindex\\fR"
      }
    ]
  },
  {
    "sha": "8c4cd2bd895fe7467307867fefc3cd45a685367c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YzRjZDJiZDg5NWZlNzQ2NzMwNzg2N2ZlZmMzY2Q0NWE2ODUzNjdj",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-08-13T21:59:31Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-08-15T01:58:49Z"
      },
      "message": "Fix PSBT deserialization of 0-input transactions\n\n0-input transactions can be ambiguously deserialized as being witness\ntransactions. Since the unsigned transaction is never serialized as\na witness transaction as it has no witnesses, we should always\ndeserialize it as a non-witness transaction and set the serialization\nflags as such.\n\nAlso always serialize the unsigned transaction as a non-witness transaction.\n\nGitHub-Pull: #13960\nRebased-From: 43811e6",
      "tree": {
        "sha": "7f8dd38e219a0788e5a08c5ff31e6157ba01a353",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7f8dd38e219a0788e5a08c5ff31e6157ba01a353"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8c4cd2bd895fe7467307867fefc3cd45a685367c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJHBAABCAAxFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAltziR4THGZhbnF1YWtl\nQGdtYWlsLmNvbQAKCRAu659cwJUmweERD/9L3NQAEW/QWHNIAS4aZcOxXmYM21HE\nk6sx8i8VWuImqJuIKCpfJOMzwWaO4Lr/hj1YRoawRG1R3p/FAJFH4onSCFgeRNip\n44ZLX+AeP4Xkeh7i2xkGo3F/v8/cCpijOT4gjnerei5GF3A+ulzzw3shIdm40HMC\nmU8w4sVcut2elDoIIYZXCYhwMuJdAKCAJ1pYQBtrjvoCrWXC6AmaOQg2A+t/s34W\nEve5cDpNP5M4uWZc48zfG2qjV563FZXZkB923m1NaZoyLBER6G0v2Rl6Vc1bGqNO\nklBXfsFPQyaL/ggySJgnBcVtADiPXskCt993kVd2e6kK2eujCKoyHQzmYtyhI6wz\nhIUdVkYl98WgnZwLsOPKHpNnI+apHX3iR0Ye0/qHJ6F0rTKYfvFvzrQyRmejnS0O\n1VPO5RzR7BxYzqPxhuJiY83x2DR1mQetUpJKlLhtpXD8gDaxgRo+bj+rR7R/hna0\n0cnwCMy6WSQsawTTdu0jPAzS9jtrS96VgLLupqUZ6zLErbdkiCWr8BL0JTxIdapT\nzrroN2FTqmVETZZVYKhhg5TAh2rR7xzTwf/7kOd6n/3x5lgILpQDl3LcyNmBdoZW\nk4E1lQIm/fljp7sNdtDhGi3okdl26Lqo+iMutgWfzmphXbpu3/a+Uq5zsQ9Zhgpx\nVARcaSX0k0ABjA==\n=n+0O\n-----END PGP SIGNATURE-----",
        "payload": "tree 7f8dd38e219a0788e5a08c5ff31e6157ba01a353\nparent ff41e479a0a3c2485f6116abcffa1bacbd86ca72\nauthor Andrew Chow <achow101-github@achow101.com> 1534197571 -0700\ncommitter fanquake <fanquake@gmail.com> 1534298329 +0800\n\nFix PSBT deserialization of 0-input transactions\n\n0-input transactions can be ambiguously deserialized as being witness\ntransactions. Since the unsigned transaction is never serialized as\na witness transaction as it has no witnesses, we should always\ndeserialize it as a non-witness transaction and set the serialization\nflags as such.\n\nAlso always serialize the unsigned transaction as a non-witness transaction.\n\nGitHub-Pull: #13960\nRebased-From: 43811e6\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c4cd2bd895fe7467307867fefc3cd45a685367c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8c4cd2bd895fe7467307867fefc3cd45a685367c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c4cd2bd895fe7467307867fefc3cd45a685367c/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff41e479a0a3c2485f6116abcffa1bacbd86ca72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff41e479a0a3c2485f6116abcffa1bacbd86ca72",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff41e479a0a3c2485f6116abcffa1bacbd86ca72"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 8,
      "deletions": 3
    },
    "files": [
      {
        "sha": "86188cbb38d8c291478b71fa397d9506a5375147",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c4cd2bd895fe7467307867fefc3cd45a685367c/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c4cd2bd895fe7467307867fefc3cd45a685367c/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=8c4cd2bd895fe7467307867fefc3cd45a685367c",
        "patch": "@@ -547,7 +547,8 @@ struct PartiallySignedTransaction\n         SerializeToVector(s, PSBT_GLOBAL_UNSIGNED_TX);\n \n         // Write serialized tx to a stream\n-        SerializeToVector(s, *tx);\n+        OverrideStream<Stream> os(&s, s.GetType(), s.GetVersion() | SERIALIZE_TRANSACTION_NO_WITNESS);\n+        SerializeToVector(os, *tx);\n \n         // Write the unknown things\n         for (auto& entry : unknown) {\n@@ -601,7 +602,9 @@ struct PartiallySignedTransaction\n                         throw std::ios_base::failure(\"Global unsigned tx key is more than one byte type\");\n                     }\n                     CMutableTransaction mtx;\n-                    UnserializeFromVector(s, mtx);\n+                    // Set the stream to serialize with non-witness since this should always be non-witness\n+                    OverrideStream<Stream> os(&s, s.GetType(), s.GetVersion() | SERIALIZE_TRANSACTION_NO_WITNESS);\n+                    UnserializeFromVector(os, mtx);\n                     tx = std::move(mtx);\n                     // Make sure that all scriptSigs and scriptWitnesses are empty\n                     for (const CTxIn& txin : tx->vin) {"
      },
      {
        "sha": "096ebfc9c2eeb008546e112c658b924c23481927",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c4cd2bd895fe7467307867fefc3cd45a685367c/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c4cd2bd895fe7467307867fefc3cd45a685367c/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=8c4cd2bd895fe7467307867fefc3cd45a685367c",
        "patch": "@@ -61,6 +61,7 @@ class OverrideStream\n \n     int GetVersion() const { return nVersion; }\n     int GetType() const { return nType; }\n+    size_t size() const { return stream->size(); }\n };\n \n template<typename S>"
      },
      {
        "sha": "e81ea30ff95dc2861428fa1911f243844b5e646e",
        "filename": "test/functional/data/rpc_psbt.json",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c4cd2bd895fe7467307867fefc3cd45a685367c/test/functional/data/rpc_psbt.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c4cd2bd895fe7467307867fefc3cd45a685367c/test/functional/data/rpc_psbt.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/rpc_psbt.json?ref=8c4cd2bd895fe7467307867fefc3cd45a685367c",
        "patch": "@@ -24,7 +24,8 @@\n         \"cHNidP8BAKACAAAAAqsJSaCMWvfEm4IS9Bfi8Vqz9cM9zxU4IagTn4d6W3vkAAAAAAD+////qwlJoIxa98SbghL0F+LxWrP1wz3PFTghqBOfh3pbe+QBAAAAAP7///8CYDvqCwAAAAAZdqkUdopAu9dAy+gdmI5x3ipNXHE5ax2IrI4kAAAAAAAAGXapFG9GILVT+glechue4O/p+gOcykWXiKwAAAAAAAEHakcwRAIgR1lmF5fAGwNrJZKJSGhiGDR9iYZLcZ4ff89X0eURZYcCIFMJ6r9Wqk2Ikf/REf3xM286KdqGbX+EhtdVRs7tr5MZASEDXNxh/HupccC1AaZGoqg7ECy0OIEhfKaC3Ibi1z+ogpIAAQEgAOH1BQAAAAAXqRQ1RebjO4MsRwUPJNPuuTycA5SLx4cBBBYAFIXRNTfy4mVAWjTbr6nj3aAfuCMIAAAA\",\n         \"cHNidP8BAHUCAAAAASaBcTce3/KF6Tet7qSze3gADAVmy7OtZGQXE8pCFxv2AAAAAAD+////AtPf9QUAAAAAGXapFNDFmQPFusKGh2DpD9UhpGZap2UgiKwA4fUFAAAAABepFDVF5uM7gyxHBQ8k0+65PJwDlIvHh7MuEwAAAQD9pQEBAAAAAAECiaPHHqtNIOA3G7ukzGmPopXJRjr6Ljl/hTPMti+VZ+UBAAAAFxYAFL4Y0VKpsBIDna89p95PUzSe7LmF/////4b4qkOnHf8USIk6UwpyN+9rRgi7st0tAXHmOuxqSJC0AQAAABcWABT+Pp7xp0XpdNkCxDVZQ6vLNL1TU/////8CAMLrCwAAAAAZdqkUhc/xCX/Z4Ai7NK9wnGIZeziXikiIrHL++E4sAAAAF6kUM5cluiHv1irHU6m80GfWx6ajnQWHAkcwRAIgJxK+IuAnDzlPVoMR3HyppolwuAJf3TskAinwf4pfOiQCIAGLONfc0xTnNMkna9b7QPZzMlvEuqFEyADS8vAtsnZcASED0uFWdJQbrUqZY3LLh+GFbTZSYG2YVi/jnF6efkE/IQUCSDBFAiEA0SuFLYXc2WHS9fSrZgZU327tzHlMDDPOXMMJ/7X85Y0CIGczio4OFyXBl/saiK9Z9R5E5CVbIBZ8hoQDHAXR8lkqASECI7cr7vCWXRC+B3jv7NYfysb3mk6haTkzgHNEZPhPKrMAAAAAAQMEAQAAAAAAAA==\",\n         \"cHNidP8BAKACAAAAAqsJSaCMWvfEm4IS9Bfi8Vqz9cM9zxU4IagTn4d6W3vkAAAAAAD+////qwlJoIxa98SbghL0F+LxWrP1wz3PFTghqBOfh3pbe+QBAAAAAP7///8CYDvqCwAAAAAZdqkUdopAu9dAy+gdmI5x3ipNXHE5ax2IrI4kAAAAAAAAGXapFG9GILVT+glechue4O/p+gOcykWXiKwAAAAAAAEA3wIAAAABJoFxNx7f8oXpN63upLN7eAAMBWbLs61kZBcTykIXG/YAAAAAakcwRAIgcLIkUSPmv0dNYMW1DAQ9TGkaXSQ18Jo0p2YqncJReQoCIAEynKnazygL3zB0DsA5BCJCLIHLRYOUV663b8Eu3ZWzASECZX0RjTNXuOD0ws1G23s59tnDjZpwq8ubLeXcjb/kzjH+////AtPf9QUAAAAAGXapFNDFmQPFusKGh2DpD9UhpGZap2UgiKwA4fUFAAAAABepFDVF5uM7gyxHBQ8k0+65PJwDlIvHh7MuEwAAAQEgAOH1BQAAAAAXqRQ1RebjO4MsRwUPJNPuuTycA5SLx4cBBBYAFIXRNTfy4mVAWjTbr6nj3aAfuCMIACICAurVlmh8qAYEPtw94RbN8p1eklfBls0FXPaYyNAr8k6ZELSmumcAAACAAAAAgAIAAIAAIgIDlPYr6d8ZlSxVh3aK63aYBhrSxKJciU9H2MFitNchPQUQtKa6ZwAAAIABAACAAgAAgAA=\",\n-        \"cHNidP8BAFUCAAAAASeaIyOl37UfxF8iD6WLD8E+HjNCeSqF1+Ns1jM7XLw5AAAAAAD/////AaBa6gsAAAAAGXapFP/pwAYQl8w7Y28ssEYPpPxCfStFiKwAAAAAAAEBIJVe6gsAAAAAF6kUY0UgD2jRieGtwN8cTRbqjxTA2+uHIgIDsTQcy6doO2r08SOM1ul+cWfVafrEfx5I1HVBhENVvUZGMEMCIAQktY7/qqaU4VWepck7v9SokGQiQFXN8HC2dxRpRC0HAh9cjrD+plFtYLisszrWTt5g6Hhb+zqpS5m9+GFR25qaAQEEIgAgdx/RitRZZm3Unz1WTj28QvTIR3TjYK2haBao7UiNVoEBBUdSIQOxNBzLp2g7avTxI4zW6X5xZ9Vp+sR/HkjUdUGEQ1W9RiED3lXR4drIBeP4pYwfv5uUwC89uq/hJ/78pJlfJvggg71SriIGA7E0HMunaDtq9PEjjNbpfnFn1Wn6xH8eSNR1QYRDVb1GELSmumcAAACAAAAAgAQAAIAiBgPeVdHh2sgF4/iljB+/m5TALz26r+En/vykmV8m+CCDvRC0prpnAAAAgAAAAIAFAACAAAA=\"\n+        \"cHNidP8BAFUCAAAAASeaIyOl37UfxF8iD6WLD8E+HjNCeSqF1+Ns1jM7XLw5AAAAAAD/////AaBa6gsAAAAAGXapFP/pwAYQl8w7Y28ssEYPpPxCfStFiKwAAAAAAAEBIJVe6gsAAAAAF6kUY0UgD2jRieGtwN8cTRbqjxTA2+uHIgIDsTQcy6doO2r08SOM1ul+cWfVafrEfx5I1HVBhENVvUZGMEMCIAQktY7/qqaU4VWepck7v9SokGQiQFXN8HC2dxRpRC0HAh9cjrD+plFtYLisszrWTt5g6Hhb+zqpS5m9+GFR25qaAQEEIgAgdx/RitRZZm3Unz1WTj28QvTIR3TjYK2haBao7UiNVoEBBUdSIQOxNBzLp2g7avTxI4zW6X5xZ9Vp+sR/HkjUdUGEQ1W9RiED3lXR4drIBeP4pYwfv5uUwC89uq/hJ/78pJlfJvggg71SriIGA7E0HMunaDtq9PEjjNbpfnFn1Wn6xH8eSNR1QYRDVb1GELSmumcAAACAAAAAgAQAAIAiBgPeVdHh2sgF4/iljB+/m5TALz26r+En/vykmV8m+CCDvRC0prpnAAAAgAAAAIAFAACAAAA=\",\n+        \"cHNidP8BACoCAAAAAAFAQg8AAAAAABepFG6Rty1Vk+fUOR4v9E6R6YXDFkHwhwAAAAAAAA==\"\n     ],\n     \"creator\" : [\n         {"
      }
    ]
  },
  {
    "sha": "517010e30e4ac52868fcfd537b644515f3081f88",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MTcwMTBlMzBlNGFjNTI4NjhmY2ZkNTM3YjY0NDUxNWYzMDgxZjg4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-08-13T22:00:06Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-08-15T01:59:58Z"
      },
      "message": "Serialize non-witness utxo as a non-witness tx but always deserialize as witness\n\nStrip out the witnesses when serializing the non-witness utxo. However\nwitness serializations are allowed, so make sure we always deserialize\nas witness.\n\nGitHub-Pull: #13960\nRebased-From: bd19cc7",
      "tree": {
        "sha": "b7b378d36b2fcb5844b9c5309ca375019b416160",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b7b378d36b2fcb5844b9c5309ca375019b416160"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/517010e30e4ac52868fcfd537b644515f3081f88",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJHBAABCAAxFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAltziSwTHGZhbnF1YWtl\nQGdtYWlsLmNvbQAKCRAu659cwJUmweyRD/4+uhXnexJh342bGEYFKOKAYWYTHkbr\nrA6gGlyYGgOLXhCRNyqk1qYVioHA8tuXATf098WGFTDuaPjXUSfjouH2MhEFyUhN\nsjtAu3BxOp4CSNQVNuJyJZvqUupUboyPc4ti24yGZGXdB1neB8GSynEsuLk8rOxg\nLvF2KTYG7xo6VOxj6GUU7k+DvZ9uqND+kdFY6rNDRugfo+3B4yUzhYhAPNe6gOlF\nXyAxOef3o7AcUBWhZWwOZQjL3+nmxTvUZGYJ33DEspW4CdKH168CRUdaRhuC31X9\n966/W2kDPU5Dz0Ss9xQoaXRuh6MdXQCrr9mRJbVH5bvtCiR9QxGJKTAf0Ek+QAXb\nnC4i2OQSP1JjA2k7y95aGSzU4VwRK8h4uDLS0xNhc0eorQSsbRhywYfijfxO18rs\ny6QmD7ERr5qlqO0wL5+VHfIa+It3Pz8WskD8HOt4oKmSiXq8DKmj/+NbrCYXVX/O\nSaLtKilQPWzWC7A4znRz/PwbrlvWCHA3v+XPqbbMHM5wcPSUUpp1bHBg2QPvJVfF\nkFoFesCCsqGD7/+xtRz7gOYtELV9hXe/HWVKUj1xTuatOFYkOq2uegdOj4wKcpav\nLHp9sQI0TpXbYFZvt2SuciLaDvvqMyvZHqvT5O76ztF98hOwOg2Gg5msV7ArScfA\nsVqmcZY7T9yyqw==\n=Qulb\n-----END PGP SIGNATURE-----",
        "payload": "tree b7b378d36b2fcb5844b9c5309ca375019b416160\nparent 8c4cd2bd895fe7467307867fefc3cd45a685367c\nauthor Andrew Chow <achow101-github@achow101.com> 1534197606 -0700\ncommitter fanquake <fanquake@gmail.com> 1534298398 +0800\n\nSerialize non-witness utxo as a non-witness tx but always deserialize as witness\n\nStrip out the witnesses when serializing the non-witness utxo. However\nwitness serializations are allowed, so make sure we always deserialize\nas witness.\n\nGitHub-Pull: #13960\nRebased-From: bd19cc7\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/517010e30e4ac52868fcfd537b644515f3081f88",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/517010e30e4ac52868fcfd537b644515f3081f88",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/517010e30e4ac52868fcfd537b644515f3081f88/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8c4cd2bd895fe7467307867fefc3cd45a685367c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c4cd2bd895fe7467307867fefc3cd45a685367c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8c4cd2bd895fe7467307867fefc3cd45a685367c"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 7,
      "deletions": 2
    },
    "files": [
      {
        "sha": "80fda617e9d0002f92195ef051794b2b0efddff8",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/517010e30e4ac52868fcfd537b644515f3081f88/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/517010e30e4ac52868fcfd537b644515f3081f88/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=517010e30e4ac52868fcfd537b644515f3081f88",
        "patch": "@@ -223,7 +223,8 @@ struct PSBTInput\n         // If there is a non-witness utxo, then don't add the witness one.\n         if (non_witness_utxo) {\n             SerializeToVector(s, PSBT_IN_NON_WITNESS_UTXO);\n-            SerializeToVector(s, non_witness_utxo);\n+            OverrideStream<Stream> os(&s, s.GetType(), s.GetVersion() | SERIALIZE_TRANSACTION_NO_WITNESS);\n+            SerializeToVector(os, non_witness_utxo);\n         } else if (!witness_utxo.IsNull()) {\n             SerializeToVector(s, PSBT_IN_WITNESS_UTXO);\n             SerializeToVector(s, witness_utxo);\n@@ -297,13 +298,17 @@ struct PSBTInput\n             // Do stuff based on type\n             switch(type) {\n                 case PSBT_IN_NON_WITNESS_UTXO:\n+                {\n                     if (non_witness_utxo) {\n                         throw std::ios_base::failure(\"Duplicate Key, input non-witness utxo already provided\");\n                     } else if (key.size() != 1) {\n                         throw std::ios_base::failure(\"Non-witness utxo key is more than one byte type\");\n                     }\n-                    UnserializeFromVector(s, non_witness_utxo);\n+                    // Set the stream to unserialize with witness since this is always a valid network transaction\n+                    OverrideStream<Stream> os(&s, s.GetType(), s.GetVersion() & ~SERIALIZE_TRANSACTION_NO_WITNESS);\n+                    UnserializeFromVector(os, non_witness_utxo);\n                     break;\n+                }\n                 case PSBT_IN_WITNESS_UTXO:\n                     if (!witness_utxo.IsNull()) {\n                         throw std::ios_base::failure(\"Duplicate Key, input witness utxo already provided\");"
      }
    ]
  },
  {
    "sha": "ad6d845ac9d43aac663fa46912b49aaf837a1a9e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZDZkODQ1YWM5ZDQzYWFjNjYzZmE0NjkxMmI0OWFhZjgzN2ExYTll",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-08-08T21:18:55Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-08-15T02:00:13Z"
      },
      "message": "Additional sanity checks in SignPSBTInput\n\nGitHub-Pull: #13917\nRebased-From: 8254e99",
      "tree": {
        "sha": "43b86015049ff67a116b393fa26ac3d01e857951",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/43b86015049ff67a116b393fa26ac3d01e857951"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ad6d845ac9d43aac663fa46912b49aaf837a1a9e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJHBAABCAAxFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAltziV0THGZhbnF1YWtl\nQGdtYWlsLmNvbQAKCRAu659cwJUmwXgOEACJmihWdnYliOYzrjDKrBPNYbGmbw1q\nUQF/JyAcbneCQ3Ge43jfGU8EnTE5EVFgOqkJqejLIfXbIzDv8iUrTAuXOBq8tN7X\nQEePvQgdaY0pSAOR5qX3qilByin8Yxpql+N80ubfxFDL28YD622tBOgG8SMdlfch\nHWHX2qxMz4nGaBB+5QlXNXNaYUzgrqA5i0UoREquQl+0QWNHjCbMBSc6WdnWMUdC\nsZ4QOA8+qKFbUdVjnIar3AhS2KCHRVY5yWOT7/8lTiHaOonPST1jGgFCp8sLVeq6\nYCHHoL6phELRDIlyq0F1WHAeyrRr6PBA7z1pT10NZwlWcVkxVhkvkVTp0GWmaypE\n7ln3HwsYP7L9jgBVtQLdQyC1dPioOiWtV7eyCTc/yqmdnCe0mhN2CYPGCQRlo5EM\nLSBVA5cXTYbnQuOuGZVRJZFn23daLcEHO9m/SFXqkL03FajQd9d1T9a6CT2UwPlB\nn8394iivcQ2ZkzQT3apaZ3/fDVY6ppukGDhaEuDLp3LQ18rzhSXcvjkW19d6WCkf\nWtP8tDX7sPFS59BkWMzRt9+z2j93nUUKN+fu6+FiIqNMS4285KF47Yo7CJrW2kdn\no8BNU9i1g5xS/Y3dAbdWgoHau3zl1vwDXl7NC+AGh3RT8JSaRx2IAnPIs8+Nclcq\nxZ50Psq1DYAGHA==\n=EwlP\n-----END PGP SIGNATURE-----",
        "payload": "tree 43b86015049ff67a116b393fa26ac3d01e857951\nparent 517010e30e4ac52868fcfd537b644515f3081f88\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1533763135 -0700\ncommitter fanquake <fanquake@gmail.com> 1534298413 +0800\n\nAdditional sanity checks in SignPSBTInput\n\nGitHub-Pull: #13917\nRebased-From: 8254e99\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad6d845ac9d43aac663fa46912b49aaf837a1a9e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ad6d845ac9d43aac663fa46912b49aaf837a1a9e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad6d845ac9d43aac663fa46912b49aaf837a1a9e/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "517010e30e4ac52868fcfd537b644515f3081f88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/517010e30e4ac52868fcfd537b644515f3081f88",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/517010e30e4ac52868fcfd537b644515f3081f88"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 17,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1ab5051ff70bb6a44acb2e60af16a677c555bd46",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad6d845ac9d43aac663fa46912b49aaf837a1a9e/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad6d845ac9d43aac663fa46912b49aaf837a1a9e/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=ad6d845ac9d43aac663fa46912b49aaf837a1a9e",
        "patch": "@@ -244,17 +244,33 @@ bool SignPSBTInput(const SigningProvider& provider, const CMutableTransaction& t\n     input.FillSignatureData(sigdata);\n \n     // Get UTXO\n+    bool require_witness_sig = false;\n     CTxOut utxo;\n     if (input.non_witness_utxo) {\n+        // If we're taking our information from a non-witness UTXO, verify that it matches the prevout.\n+        if (input.non_witness_utxo->GetHash() != tx.vin[index].prevout.hash) return false;\n+        // If both witness and non-witness UTXO are provided, verify that they match. This check shouldn't\n+        // matter, as the PSBT deserializer enforces only one of both is provided, and the only way both\n+        // can be present is when they're added simultaneously by FillPSBT (in which case they always match).\n+        // Still, check in order to not rely on callers to enforce this.\n+        if (!input.witness_utxo.IsNull() && input.non_witness_utxo->vout[tx.vin[index].prevout.n] != input.witness_utxo) return false;\n         utxo = input.non_witness_utxo->vout[tx.vin[index].prevout.n];\n     } else if (!input.witness_utxo.IsNull()) {\n         utxo = input.witness_utxo;\n+        // When we're taking our information from a witness UTXO, we can't verify it is actually data from\n+        // the output being spent. This is safe in case a witness signature is produced (which includes this\n+        // information directly in the hash), but not for non-witness signatures. Remember that we require\n+        // a witness signature in this situation.\n+        require_witness_sig = true;\n     } else {\n         return false;\n     }\n \n     MutableTransactionSignatureCreator creator(&tx, index, utxo.nValue, sighash);\n+    sigdata.witness = false;\n     bool sig_complete = ProduceSignature(provider, creator, utxo.scriptPubKey, sigdata);\n+    // Verify that a witness signature was produced in case one was required.\n+    if (require_witness_sig && !sigdata.witness) return false;\n     input.FromSignatureData(sigdata);\n     return sig_complete;\n }"
      },
      {
        "sha": "7ade715ee292a2b04ad8da32483ef682789f1622",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad6d845ac9d43aac663fa46912b49aaf837a1a9e/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad6d845ac9d43aac663fa46912b49aaf837a1a9e/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=ad6d845ac9d43aac663fa46912b49aaf837a1a9e",
        "patch": "@@ -686,7 +686,7 @@ bool ProduceSignature(const SigningProvider& provider, const BaseSignatureCreato\n bool SignSignature(const SigningProvider &provider, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, const CAmount& amount, int nHashType);\n bool SignSignature(const SigningProvider &provider, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType);\n \n-/** Signs a PSBTInput */\n+/** Signs a PSBTInput, verifying that all provided data matches what is being signed. */\n bool SignPSBTInput(const SigningProvider& provider, const CMutableTransaction& tx, PSBTInput& input, SignatureData& sigdata, int index, int sighash = 1);\n \n /** Extract signature data from a transaction input, and insert it. */"
      }
    ]
  },
  {
    "sha": "dbaadc9ea92fd0e221c60584a5d1ca871fdd9c66",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYmFhZGM5ZWE5MmZkMGUyMjFjNjA1ODRhNWQxY2E4NzFmZGQ5YzY2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-08-08T21:27:20Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-08-15T02:01:01Z"
      },
      "message": "Only wipe wrong UTXO type data if overwritten by wallet\n\nGitHub-Pull: #13917\nRebased-From: c05712c",
      "tree": {
        "sha": "786da17e2210b98b63198b3540e3e4dde9c71a0f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/786da17e2210b98b63198b3540e3e4dde9c71a0f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dbaadc9ea92fd0e221c60584a5d1ca871fdd9c66",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJHBAABCAAxFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAltziW4THGZhbnF1YWtl\nQGdtYWlsLmNvbQAKCRAu659cwJUmwX7uD/9djZjHCp40V6D6MYoBEGCtILJE7YnR\n9f3hDzpuQNes1mjSbYZltCA04bmFceNgRHBGEV6kVLNICqXs5r6L/RJTj9ZJurNv\neOAELJpgzQeY9d3xRZP7BthN91Q55UtCwykE0jl9hogxQLkwtHyoNYAz1FMCVrI4\nFvsG4EoYXicBHYwXo1FRraU+sere22KnSqrzdXPeY8whI3rhDPFBYGPnRZk8mTsF\noiaRNdznUqpsog1shKqFGq5qklq91/6LQUbwscePZnw4p3SzuOFcWPkMARofmArz\nfb68PtZkj5jY3DQcEAFwJ+Rp5FBHH7R4y8B6w5EQnp5txRKD0g0K9LkBDkH96EEU\nM/sG+yP33YaOh611VNIbln+FXIGwhkKNuI+aubIu8Hee9GHNur8uhIM8Ohki6xuI\ng/0iq6c4JLy17XM90ewJ1YWKcatGH3Qt/MZpejlvbbEL3TBEHeZSWIcEi5ZQF9lE\ntn6b3EMdoy2q8QimM+ETh8e/LUUVUjjaMRqHb4zC0BO+DJhmpJMSReSrBs7HQF0g\nqYreywkMN3sLXxHMvYcfAFw7sIRLtSkamPMMs/YG/Haowz+elV5eEaaXbm2fCeTo\nSh0Q1vh9DYmkzRaZGAHeKCZ+38GVtqQT1ZTk1Nc9LJZmMkoskm6IMKbZ2vo52ME+\n1uYyOk/VGd4OuQ==\n=g+nm\n-----END PGP SIGNATURE-----",
        "payload": "tree 786da17e2210b98b63198b3540e3e4dde9c71a0f\nparent ad6d845ac9d43aac663fa46912b49aaf837a1a9e\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1533763640 -0700\ncommitter fanquake <fanquake@gmail.com> 1534298461 +0800\n\nOnly wipe wrong UTXO type data if overwritten by wallet\n\nGitHub-Pull: #13917\nRebased-From: c05712c\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbaadc9ea92fd0e221c60584a5d1ca871fdd9c66",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dbaadc9ea92fd0e221c60584a5d1ca871fdd9c66",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbaadc9ea92fd0e221c60584a5d1ca871fdd9c66/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ad6d845ac9d43aac663fa46912b49aaf837a1a9e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad6d845ac9d43aac663fa46912b49aaf837a1a9e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ad6d845ac9d43aac663fa46912b49aaf837a1a9e"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 9,
      "deletions": 6
    },
    "files": [
      {
        "sha": "92e6931645a65da396771fbe2fb48d25cd5073e8",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbaadc9ea92fd0e221c60584a5d1ca871fdd9c66/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbaadc9ea92fd0e221c60584a5d1ca871fdd9c66/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=dbaadc9ea92fd0e221c60584a5d1ca871fdd9c66",
        "patch": "@@ -4504,10 +4504,11 @@ bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, const C\n \n         // If we don't know about this input, skip it and let someone else deal with it\n         const uint256& txhash = txin.prevout.hash;\n-        const auto& it = pwallet->mapWallet.find(txhash);\n+        const auto it = pwallet->mapWallet.find(txhash);\n         if (it != pwallet->mapWallet.end()) {\n             const CWalletTx& wtx = it->second;\n             CTxOut utxo = wtx.tx->vout[txin.prevout.n];\n+            // Update both UTXOs from the wallet.\n             input.non_witness_utxo = wtx.tx;\n             input.witness_utxo = utxo;\n         }\n@@ -4524,11 +4525,13 @@ bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, const C\n             complete &= SignPSBTInput(PublicOnlySigningProvider(pwallet), *psbtx.tx, input, sigdata, i, sighash_type);\n         }\n \n-        // Drop the unnecessary UTXO\n-        if (sigdata.witness) {\n-            input.non_witness_utxo = nullptr;\n-        } else {\n-            input.witness_utxo.SetNull();\n+        if (it != pwallet->mapWallet.end()) {\n+            // Drop the unnecessary UTXO if we added both from the wallet.\n+            if (sigdata.witness) {\n+                input.non_witness_utxo = nullptr;\n+            } else {\n+                input.witness_utxo.SetNull();\n+            }\n         }\n \n         // Get public key paths"
      }
    ]
  },
  {
    "sha": "8935869487ffe858534d73c4929a4ee3d96ca6ac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OTM1ODY5NDg3ZmZlODU4NTM0ZDczYzQ5MjlhNGVlM2Q5NmNhNmFj",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-08-08T21:14:12Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-08-15T02:01:18Z"
      },
      "message": "Test that a non-witness script as witness utxo is not signed\n\nGitHub-Pull: #13917\nRebased-From: 7c8bffd",
      "tree": {
        "sha": "7a8ceec33e6a6db3c8a35e708c5d7fe62a28219e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7a8ceec33e6a6db3c8a35e708c5d7fe62a28219e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8935869487ffe858534d73c4929a4ee3d96ca6ac",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJHBAABCAAxFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAltziXwTHGZhbnF1YWtl\nQGdtYWlsLmNvbQAKCRAu659cwJUmwTTYEACsPnGsjohteEv8Rn//r1hfJtr3LqCF\npvKpIU/fpIIZO3NItNmGfrVxjpo5z7r1ORq6ExrTcRTcTV/a38tN35UhNaFa0Uj/\n6KcLmOe+XaCGuWMGI9xUB6vj3aDuoaoTtEs6qn3nYu2wF+E8XgoR/1AKV+XrsVR0\n3bEgZ6S42OMN5j0K4gqOKKOSqGLlEFsxC7EjtOf0r0oUUoAbBp9lB/DfmT1nUCjl\np0UoS9IFoJrWEm4IEiFf4/W+RNiyfmIKvyPkV6qBUAdT63DquW897C80+sjT+WKh\n7HAPEjpPVasulXdG+CVfX/hwYlkKXvHp5avbdXszCglWmj7USAbtTwANCjcO/ah5\nVzNAlv8BPFOpEMxP+FqQHuEjah2htS71OchR4JgIK+hzklgFhUkhqNaQQ82nHoJv\npl3Jc7HgwhMzaleVpyfpoLw5O1/PpkfFLJpSPRpngFoDnNqgO+W2LZg+sqi1N0na\nCHJ5o7QL1u49WjJ3leNYwLj/ZGhfx2jEcqfsq/TXh/HpE+LCKgZNSOdzJrE9t6UR\nB+X6vLii2Yt7oav1+0ZHnyJ9DHwyWDYdanAm0uZzeYlB3Lm3d+Kxw/oHG2Ns6biO\niyNGRjd9qtS7Pbfzpv2VLEAz9dZCFUsFrfCL7JxfbG6ZTutDKoYvnapuH70mgtMW\nRswvmrF2EP3bCA==\n=XzZ1\n-----END PGP SIGNATURE-----",
        "payload": "tree 7a8ceec33e6a6db3c8a35e708c5d7fe62a28219e\nparent dbaadc9ea92fd0e221c60584a5d1ca871fdd9c66\nauthor Andrew Chow <achow101-github@achow101.com> 1533762852 -0700\ncommitter fanquake <fanquake@gmail.com> 1534298478 +0800\n\nTest that a non-witness script as witness utxo is not signed\n\nGitHub-Pull: #13917\nRebased-From: 7c8bffd\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8935869487ffe858534d73c4929a4ee3d96ca6ac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8935869487ffe858534d73c4929a4ee3d96ca6ac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8935869487ffe858534d73c4929a4ee3d96ca6ac/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dbaadc9ea92fd0e221c60584a5d1ca871fdd9c66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbaadc9ea92fd0e221c60584a5d1ca871fdd9c66",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dbaadc9ea92fd0e221c60584a5d1ca871fdd9c66"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 25,
      "deletions": 2
    },
    "files": [
      {
        "sha": "7093af66d75c511292a5f6d1307d5821eca15458",
        "filename": "test/functional/data/rpc_psbt.json",
        "status": "modified",
        "additions": 25,
        "deletions": 2,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8935869487ffe858534d73c4929a4ee3d96ca6ac/test/functional/data/rpc_psbt.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8935869487ffe858534d73c4929a4ee3d96ca6ac/test/functional/data/rpc_psbt.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/rpc_psbt.json?ref=8935869487ffe858534d73c4929a4ee3d96ca6ac",
        "patch": "@@ -58,15 +58,38 @@\n             ],\n             \"psbt\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAABBEdSIQKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfyEC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtdSriIGApWDvzmuCmCXR60Zmt3WNPphCFWdbFzTm0whg/GrluB/ENkMak8AAACAAAAAgAAAAIAiBgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU21xDZDGpPAAAAgAAAAIABAACAAQMEAQAAAAABASAAwusLAAAAABepFLf1+vQOPUClpFmx2zU18rcvqSHohwEEIgAgjCNTFzdDtZXftKB7crqOQuN5fadOh/59nXSX47ICiQMBBUdSIQMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3CECOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNSriIGAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zENkMak8AAACAAAAAgAMAAIAiBgMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3BDZDGpPAAAAgAAAAIACAACAAQMEAQAAAAAiAgOppMN/WZbTqiXbrGtXCvBlA5RJKUJGCzVHU+2e7KWHcRDZDGpPAAAAgAAAAIAEAACAACICAn9jmXV9Lv9VoTatAsaEsYOLZVbl8bazQoKpS2tQBRCWENkMak8AAACAAAAAgAUAAIAA\",\n             \"result\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgf0cwRAIgdAGK1BgAl7hzMjwAFXILNoTMgSOJEEjn282bVa1nnJkCIHPTabdA4+tT3O+jOCPIBwUUylWn3ZVE8VfBZ5EyYRGMAQEDBAEAAAABBEdSIQKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfyEC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtdSriIGApWDvzmuCmCXR60Zmt3WNPphCFWdbFzTm0whg/GrluB/ENkMak8AAACAAAAAgAAAAIAiBgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU21xDZDGpPAAAAgAAAAIABAACAAAEBIADC6wsAAAAAF6kUt/X69A49QKWkWbHbNTXyty+pIeiHIgIDCJ3BDHrG21T5EymvYXMz2ziM6tDCMfcjN50bmQMLAtxHMEQCIGLrelVhB6fHP0WsSrWh3d9vcHX7EnWWmn84Pv/3hLyyAiAMBdu3Rw2/LwhVfdNWxzJcHtMJE+mWzThAlF2xIijaXwEBAwQBAAAAAQQiACCMI1MXN0O1ld+0oHtyuo5C43l9p06H/n2ddJfjsgKJAwEFR1IhAwidwQx6xttU+RMpr2FzM9s4jOrQwjH3IzedG5kDCwLcIQI63ZBPPW3PWd25BrDe4jUpt/+57VDl6GFRkmhgIh8Oc1KuIgYCOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnMQ2QxqTwAAAIAAAACAAwAAgCIGAwidwQx6xttU+RMpr2FzM9s4jOrQwjH3IzedG5kDCwLcENkMak8AAACAAAAAgAIAAIAAIgIDqaTDf1mW06ol26xrVwrwZQOUSSlCRgs1R1Ptnuylh3EQ2QxqTwAAAIAAAACABAAAgAAiAgJ/Y5l1fS7/VaE2rQLGhLGDi2VW5fG2s0KCqUtrUAUQlhDZDGpPAAAAgAAAAIAFAACAAA==\"\n+        },\n+        {\n+            \"privkeys\" : [\n+                \"cT7J9YpCwY3AVRFSjN6ukeEeWY6mhpbJPxRaDaP5QTdygQRxP9Au\",\n+                \"cNBc3SWUip9PPm1GjRoLEJT6T41iNzCYtD7qro84FMnM5zEqeJsE\"\n+            ],\n+            \"psbt\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAABBEdSIQKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfyEC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtdSriIGApWDvzmuCmCXR60Zmt3WNPphCFWdbFzTm0whg/GrluB/ENkMak8AAACAAAAAgAAAAIAiBgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU21xDZDGpPAAAAgAAAAIABAACAAQMEAQAAAAABASAAwusLAAAAABepFLf1+vQOPUClpFmx2zU18rcvqSHohwEEIgAgjCNTFzdDtZXftKB7crqOQuN5fadOh/59nXSX47ICiQMBBUdSIQMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3CECOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNSriIGAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zENkMak8AAACAAAAAgAMAAIAiBgMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3BDZDGpPAAAAgAAAAIACAACAAQMEAQAAAAAiAgOppMN/WZbTqiXbrGtXCvBlA5RJKUJGCzVHU+2e7KWHcRDZDGpPAAAAgAAAAIAEAACAACICAn9jmXV9Lv9VoTatAsaEsYOLZVbl8bazQoKpS2tQBRCWENkMak8AAACAAAAAgAUAAIAA\",\n+            \"result\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU210cwRAIgYxqYn+c4qSrQGYYCMxLBkhT+KAKznly8GsNniAbGksMCIDnbbDh70mdxbf2z1NjaULjoXSEzJrp8faqkwM5B65IjAQEDBAEAAAABBEdSIQKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfyEC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtdSriIGApWDvzmuCmCXR60Zmt3WNPphCFWdbFzTm0whg/GrluB/ENkMak8AAACAAAAAgAAAAIAiBgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU21xDZDGpPAAAAgAAAAIABAACAAAEBIADC6wsAAAAAF6kUt/X69A49QKWkWbHbNTXyty+pIeiHIgICOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNHMEQCIGX0W6WZi1mif/4ae+0BavHx+Q1Us6qPdFCqX1aiUQO9AiB/ckcDrR7blmgLKEtW1P/LiPf7dZ6rvgiqMPKbhROD0gEBAwQBAAAAAQQiACCMI1MXN0O1ld+0oHtyuo5C43l9p06H/n2ddJfjsgKJAwEFR1IhAwidwQx6xttU+RMpr2FzM9s4jOrQwjH3IzedG5kDCwLcIQI63ZBPPW3PWd25BrDe4jUpt/+57VDl6GFRkmhgIh8Oc1KuIgYCOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnMQ2QxqTwAAAIAAAACAAwAAgCIGAwidwQx6xttU+RMpr2FzM9s4jOrQwjH3IzedG5kDCwLcENkMak8AAACAAAAAgAIAAIAAIgIDqaTDf1mW06ol26xrVwrwZQOUSSlCRgs1R1Ptnuylh3EQ2QxqTwAAAIAAAACABAAAgAAiAgJ/Y5l1fS7/VaE2rQLGhLGDi2VW5fG2s0KCqUtrUAUQlhDZDGpPAAAAgAAAAIAFAACAAA==\"\n+        },\n+        {\n+            \"privkeys\" : [\n+                \"cT7J9YpCwY3AVRFSjN6ukeEeWY6mhpbJPxRaDaP5QTdygQRxP9Au\",\n+                \"cNBc3SWUip9PPm1GjRoLEJT6T41iNzCYtD7qro84FMnM5zEqeJsE\"\n+            ],\n+            \"psbt\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAABBEdSIQKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfyEC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtdSriIGApWDvzmuCmCXR60Zmt3WNPphCFWdbFzTm0whg/GrluB/ENkMak8AAACAAAAAgAAAAIAiBgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU21xDZDGpPAAAAgAAAAIABAACAAQMEAQAAAAABASAAwusLAAAAABepFLf1+vQOPUClpFmx2zU18rcvqSHohwEEIgAgjCNTFzdDtZXftKB7crqOQuN5fadOh/59nXSX47ICiQMBBUdSIQMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3CECOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNSriIGAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zENkMak8AAACAAAAAgAMAAIAiBgMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3BDZDGpPAAAAgAAAAIACAACAAQMEAQAAAAAiAgOppMN/WZbTqiXbrGtXCvBlA5RJKUJGCzVHU+2e7KWHcRDZDGpPAAAAgAAAAIAEAACAACICAn9jmXV9Lv9VoTatAsaEsYOLZVbl8bazQoKpS2tQBRCWENkMak8AAACAAAAAgAUAAIAA\",\n+            \"result\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU210cwRAIgYxqYn+c4qSrQGYYCMxLBkhT+KAKznly8GsNniAbGksMCIDnbbDh70mdxbf2z1NjaULjoXSEzJrp8faqkwM5B65IjAQEDBAEAAAABBEdSIQKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfyEC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtdSriIGApWDvzmuCmCXR60Zmt3WNPphCFWdbFzTm0whg/GrluB/ENkMak8AAACAAAAAgAAAAIAiBgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU21xDZDGpPAAAAgAAAAIABAACAAAEBIADC6wsAAAAAF6kUt/X69A49QKWkWbHbNTXyty+pIeiHIgICOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNHMEQCIGX0W6WZi1mif/4ae+0BavHx+Q1Us6qPdFCqX1aiUQO9AiB/ckcDrR7blmgLKEtW1P/LiPf7dZ6rvgiqMPKbhROD0gEBAwQBAAAAAQQiACCMI1MXN0O1ld+0oHtyuo5C43l9p06H/n2ddJfjsgKJAwEFR1IhAwidwQx6xttU+RMpr2FzM9s4jOrQwjH3IzedG5kDCwLcIQI63ZBPPW3PWd25BrDe4jUpt/+57VDl6GFRkmhgIh8Oc1KuIgYCOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnMQ2QxqTwAAAIAAAACAAwAAgCIGAwidwQx6xttU+RMpr2FzM9s4jOrQwjH3IzedG5kDCwLcENkMak8AAACAAAAAgAIAAIAAIgIDqaTDf1mW06ol26xrVwrwZQOUSSlCRgs1R1Ptnuylh3EQ2QxqTwAAAIAAAACABAAAgAAiAgJ/Y5l1fS7/VaE2rQLGhLGDi2VW5fG2s0KCqUtrUAUQlhDZDGpPAAAAgAAAAIAFAACAAA==\"\n+        },\n+        {\n+            \"privkeys\" : [\n+                \"cNBc3SWUip9PPm1GjRoLEJT6T41iNzCYtD7qro84FMnM5zEqeJsE\"\n+            ],\n+            \"psbt\" : \"cHNidP8BAKACAAAAAqsJSaCMWvfEm4IS9Bfi8Vqz9cM9zxU4IagTn4d6W3vkAAAAAAD+////qwlJoIxa98SbghL0F+LxWrP1wz3PFTghqBOfh3pbe+QBAAAAAP7///8CYDvqCwAAAAAZdqkUdopAu9dAy+gdmI5x3ipNXHE5ax2IrI4kAAAAAAAAGXapFG9GILVT+glechue4O/p+gOcykWXiKwAAAAAAAEBItPf9QUAAAAAGXapFNSO0xELlAFMsRS9Mtb00GbcdCVriKwAAQEgAOH1BQAAAAAXqRQ1RebjO4MsRwUPJNPuuTycA5SLx4cBBBYAFIXRNTfy4mVAWjTbr6nj3aAfuCMIACICAurVlmh8qAYEPtw94RbN8p1eklfBls0FXPaYyNAr8k6ZELSmumcAAACAAAAAgAIAAIAAIgIDlPYr6d8ZlSxVh3aK63aYBhrSxKJciU9H2MFitNchPQUQtKa6ZwAAAIABAACAAgAAgAA=\",\n+            \"result\" : \"cHNidP8BAKACAAAAAqsJSaCMWvfEm4IS9Bfi8Vqz9cM9zxU4IagTn4d6W3vkAAAAAAD+////qwlJoIxa98SbghL0F+LxWrP1wz3PFTghqBOfh3pbe+QBAAAAAP7///8CYDvqCwAAAAAZdqkUdopAu9dAy+gdmI5x3ipNXHE5ax2IrI4kAAAAAAAAGXapFG9GILVT+glechue4O/p+gOcykWXiKwAAAAAAAEBItPf9QUAAAAAGXapFNSO0xELlAFMsRS9Mtb00GbcdCVriKwAAQEgAOH1BQAAAAAXqRQ1RebjO4MsRwUPJNPuuTycA5SLx4cBBBYAFIXRNTfy4mVAWjTbr6nj3aAfuCMIACICAurVlmh8qAYEPtw94RbN8p1eklfBls0FXPaYyNAr8k6ZELSmumcAAACAAAAAgAIAAIAAIgIDlPYr6d8ZlSxVh3aK63aYBhrSxKJciU9H2MFitNchPQUQtKa6ZwAAAIABAACAAgAAgAA=\"\n         }\n     ],\n     \"combiner\" : [\n         {\n             \"combine\" : [\n                 \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgf0cwRAIgdAGK1BgAl7hzMjwAFXILNoTMgSOJEEjn282bVa1nnJkCIHPTabdA4+tT3O+jOCPIBwUUylWn3ZVE8VfBZ5EyYRGMAQEDBAEAAAABBEdSIQKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfyEC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtdSriIGApWDvzmuCmCXR60Zmt3WNPphCFWdbFzTm0whg/GrluB/ENkMak8AAACAAAAAgAAAAIAiBgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU21xDZDGpPAAAAgAAAAIABAACAAAEBIADC6wsAAAAAF6kUt/X69A49QKWkWbHbNTXyty+pIeiHIgIDCJ3BDHrG21T5EymvYXMz2ziM6tDCMfcjN50bmQMLAtxHMEQCIGLrelVhB6fHP0WsSrWh3d9vcHX7EnWWmn84Pv/3hLyyAiAMBdu3Rw2/LwhVfdNWxzJcHtMJE+mWzThAlF2xIijaXwEBAwQBAAAAAQQiACCMI1MXN0O1ld+0oHtyuo5C43l9p06H/n2ddJfjsgKJAwEFR1IhAwidwQx6xttU+RMpr2FzM9s4jOrQwjH3IzedG5kDCwLcIQI63ZBPPW3PWd25BrDe4jUpt/+57VDl6GFRkmhgIh8Oc1KuIgYCOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnMQ2QxqTwAAAIAAAACAAwAAgCIGAwidwQx6xttU+RMpr2FzM9s4jOrQwjH3IzedG5kDCwLcENkMak8AAACAAAAAgAIAAIAAIgIDqaTDf1mW06ol26xrVwrwZQOUSSlCRgs1R1Ptnuylh3EQ2QxqTwAAAIAAAACABAAAgAAiAgJ/Y5l1fS7/VaE2rQLGhLGDi2VW5fG2s0KCqUtrUAUQlhDZDGpPAAAAgAAAAIAFAACAAA==\",\n-                \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU210gwRQIhAPYQOLMI3B2oZaNIUnRvAVdyk0IIxtJEVDk82ZvfIhd3AiAFbmdaZ1ptCgK4WxTl4pB02KJam1dgvqKBb2YZEKAG6gEBAwQBAAAAAQRHUiEClYO/Oa4KYJdHrRma3dY0+mEIVZ1sXNObTCGD8auW4H8hAtq2H/SaFNtqfQKwzR+7ePxLGDErW05U2uTbovv+9TbXUq4iBgKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfxDZDGpPAAAAgAAAAIAAAACAIgYC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtcQ2QxqTwAAAIAAAACAAQAAgAABASAAwusLAAAAABepFLf1+vQOPUClpFmx2zU18rcvqSHohyICAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zRzBEAiBl9FulmYtZon/+GnvtAWrx8fkNVLOqj3RQql9WolEDvQIgf3JHA60e25ZoCyhLVtT/y4j3+3Weq74IqjDym4UTg9IBAQMEAQAAAAEEIgAgjCNTFzdDtZXftKB7crqOQuN5fadOh/59nXSX47ICiQMBBUdSIQMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3CECOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNSriIGAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zENkMak8AAACAAAAAgAMAAIAiBgMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3BDZDGpPAAAAgAAAAIACAACAACICA6mkw39ZltOqJdusa1cK8GUDlEkpQkYLNUdT7Z7spYdxENkMak8AAACAAAAAgAQAAIAAIgICf2OZdX0u/1WhNq0CxoSxg4tlVuXxtrNCgqlLa1AFEJYQ2QxqTwAAAIAAAACABQAAgAA=\"\n+                \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU210cwRAIgYxqYn+c4qSrQGYYCMxLBkhT+KAKznly8GsNniAbGksMCIDnbbDh70mdxbf2z1NjaULjoXSEzJrp8faqkwM5B65IjAQEDBAEAAAABBEdSIQKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfyEC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtdSriIGApWDvzmuCmCXR60Zmt3WNPphCFWdbFzTm0whg/GrluB/ENkMak8AAACAAAAAgAAAAIAiBgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU21xDZDGpPAAAAgAAAAIABAACAAAEBIADC6wsAAAAAF6kUt/X69A49QKWkWbHbNTXyty+pIeiHIgICOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNHMEQCIGX0W6WZi1mif/4ae+0BavHx+Q1Us6qPdFCqX1aiUQO9AiB/ckcDrR7blmgLKEtW1P/LiPf7dZ6rvgiqMPKbhROD0gEBAwQBAAAAAQQiACCMI1MXN0O1ld+0oHtyuo5C43l9p06H/n2ddJfjsgKJAwEFR1IhAwidwQx6xttU+RMpr2FzM9s4jOrQwjH3IzedG5kDCwLcIQI63ZBPPW3PWd25BrDe4jUpt/+57VDl6GFRkmhgIh8Oc1KuIgYCOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnMQ2QxqTwAAAIAAAACAAwAAgCIGAwidwQx6xttU+RMpr2FzM9s4jOrQwjH3IzedG5kDCwLcENkMak8AAACAAAAAgAIAAIAAIgIDqaTDf1mW06ol26xrVwrwZQOUSSlCRgs1R1Ptnuylh3EQ2QxqTwAAAIAAAACABAAAgAAiAgJ/Y5l1fS7/VaE2rQLGhLGDi2VW5fG2s0KCqUtrUAUQlhDZDGpPAAAAgAAAAIAFAACAAA==\"\n             ],\n-            \"result\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgf0cwRAIgdAGK1BgAl7hzMjwAFXILNoTMgSOJEEjn282bVa1nnJkCIHPTabdA4+tT3O+jOCPIBwUUylWn3ZVE8VfBZ5EyYRGMASICAtq2H/SaFNtqfQKwzR+7ePxLGDErW05U2uTbovv+9TbXSDBFAiEA9hA4swjcHahlo0hSdG8BV3KTQgjG0kRUOTzZm98iF3cCIAVuZ1pnWm0KArhbFOXikHTYolqbV2C+ooFvZhkQoAbqAQEDBAEAAAABBEdSIQKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfyEC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtdSriIGApWDvzmuCmCXR60Zmt3WNPphCFWdbFzTm0whg/GrluB/ENkMak8AAACAAAAAgAAAAIAiBgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU21xDZDGpPAAAAgAAAAIABAACAAAEBIADC6wsAAAAAF6kUt/X69A49QKWkWbHbNTXyty+pIeiHIgIDCJ3BDHrG21T5EymvYXMz2ziM6tDCMfcjN50bmQMLAtxHMEQCIGLrelVhB6fHP0WsSrWh3d9vcHX7EnWWmn84Pv/3hLyyAiAMBdu3Rw2/LwhVfdNWxzJcHtMJE+mWzThAlF2xIijaXwEiAgI63ZBPPW3PWd25BrDe4jUpt/+57VDl6GFRkmhgIh8Oc0cwRAIgZfRbpZmLWaJ//hp77QFq8fH5DVSzqo90UKpfVqJRA70CIH9yRwOtHtuWaAsoS1bU/8uI9/t1nqu+CKow8puFE4PSAQEDBAEAAAABBCIAIIwjUxc3Q7WV37Sge3K6jkLjeX2nTof+fZ10l+OyAokDAQVHUiEDCJ3BDHrG21T5EymvYXMz2ziM6tDCMfcjN50bmQMLAtwhAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zUq4iBgI63ZBPPW3PWd25BrDe4jUpt/+57VDl6GFRkmhgIh8OcxDZDGpPAAAAgAAAAIADAACAIgYDCJ3BDHrG21T5EymvYXMz2ziM6tDCMfcjN50bmQMLAtwQ2QxqTwAAAIAAAACAAgAAgAAiAgOppMN/WZbTqiXbrGtXCvBlA5RJKUJGCzVHU+2e7KWHcRDZDGpPAAAAgAAAAIAEAACAACICAn9jmXV9Lv9VoTatAsaEsYOLZVbl8bazQoKpS2tQBRCWENkMak8AAACAAAAAgAUAAIAA\"\n+            \"result\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgf0cwRAIgdAGK1BgAl7hzMjwAFXILNoTMgSOJEEjn282bVa1nnJkCIHPTabdA4+tT3O+jOCPIBwUUylWn3ZVE8VfBZ5EyYRGMASICAtq2H/SaFNtqfQKwzR+7ePxLGDErW05U2uTbovv+9TbXRzBEAiBjGpif5zipKtAZhgIzEsGSFP4oArOeXLwaw2eIBsaSwwIgOdtsOHvSZ3Ft/bPU2NpQuOhdITMmunx9qqTAzkHrkiMBAQMEAQAAAAEER1IhApWDvzmuCmCXR60Zmt3WNPphCFWdbFzTm0whg/GrluB/IQLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU211KuIgYClYO/Oa4KYJdHrRma3dY0+mEIVZ1sXNObTCGD8auW4H8Q2QxqTwAAAIAAAACAAAAAgCIGAtq2H/SaFNtqfQKwzR+7ePxLGDErW05U2uTbovv+9TbXENkMak8AAACAAAAAgAEAAIAAAQEgAMLrCwAAAAAXqRS39fr0Dj1ApaRZsds1NfK3L6kh6IciAgMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3EcwRAIgYut6VWEHp8c/RaxKtaHd329wdfsSdZaafzg+//eEvLICIAwF27dHDb8vCFV901bHMlwe0wkT6ZbNOECUXbEiKNpfASICAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zRzBEAiBl9FulmYtZon/+GnvtAWrx8fkNVLOqj3RQql9WolEDvQIgf3JHA60e25ZoCyhLVtT/y4j3+3Weq74IqjDym4UTg9IBAQMEAQAAAAEEIgAgjCNTFzdDtZXftKB7crqOQuN5fadOh/59nXSX47ICiQMBBUdSIQMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3CECOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNSriIGAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zENkMak8AAACAAAAAgAMAAIAiBgMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3BDZDGpPAAAAgAAAAIACAACAACICA6mkw39ZltOqJdusa1cK8GUDlEkpQkYLNUdT7Z7spYdxENkMak8AAACAAAAAgAQAAIAAIgICf2OZdX0u/1WhNq0CxoSxg4tlVuXxtrNCgqlLa1AFEJYQ2QxqTwAAAIAAAACABQAAgAA=\"\n         },\n         {\n             \"combine\" : ["
      }
    ]
  },
  {
    "sha": "0333914467466d22133e25b71ef330bb2c609958",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMzMzOTE0NDY3NDY2ZDIyMTMzZTI1YjcxZWYzMzBiYjJjNjA5OTU4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-08-08T23:14:01Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-08-15T02:01:32Z"
      },
      "message": "More tests of signer checks\n\nGitHub-Pull: #13917\nRebased-From: 5df6f08",
      "tree": {
        "sha": "ac8f348d939a1df2672253a166b437e9d3140597",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ac8f348d939a1df2672253a166b437e9d3140597"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0333914467466d22133e25b71ef330bb2c609958",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJHBAABCAAxFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAltziYYTHGZhbnF1YWtl\nQGdtYWlsLmNvbQAKCRAu659cwJUmwdKKD/wPVoRoCWpucmILUpZ2op8nWjDG13pC\nL8f/OZfp9eChIbe8KgNzlh7po2ZEOgN9Gu6GYHnT8ZLKv+aq8e2dUtL4hgNZAJ1w\nmUGtNELQKf74Qj/Ls27yZm1/QCjxlohJ8ltX09zGZhrW5VLplhjnOJzQk62UCQAW\nT+lvBfoMRpDAvx8YRze3pNmpBjiVyx4S+NF3MwFhtHS2PF04i2DCilV+2IsluREW\nVo+ONY4XaaIzR5l72ajgEe2c57gVsyMBw55CbFUMXlBuxjsqfnp+FoTAyAZgiayQ\noNeV1dwkOYkLGCZodW3V77tlzg2kuZLkmVEenWE+N1f1T6uNg5U3GvXAx5FJgcQa\n7pJznBmoIopawTWYbEO6k4OvujAi16Hw9JS/XSQib+MJXH5hKoBCliDzxZ64/6c2\nD7vVY0MMNpKGrXItpv374o4uSKrT8DOl5pjHYy7kjZVoufhmzHp2DbblA6pLJudh\nJkfOCgsK5jsPSfrX91MnF+kc28OJhj0nkuxArmKwjzbia7ihsnuHki2CZ8UId0lZ\nG22PDaktEGZCqkgVpBtwLjgcqRcEru1zfPoR0N82O86YUdD/6PzA0lc6rzuyEkBl\n7xEDxtkjrjlp8NMXLitPPlnNasg8x9Hr3gBI75uBwXi/wjeqq8Gk1+lQSP6o6CuS\nKEcFM/9avzJMRw==\n=vaNL\n-----END PGP SIGNATURE-----",
        "payload": "tree ac8f348d939a1df2672253a166b437e9d3140597\nparent 8935869487ffe858534d73c4929a4ee3d96ca6ac\nauthor Andrew Chow <achow101-github@achow101.com> 1533770041 -0700\ncommitter fanquake <fanquake@gmail.com> 1534298492 +0800\n\nMore tests of signer checks\n\nGitHub-Pull: #13917\nRebased-From: 5df6f08\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0333914467466d22133e25b71ef330bb2c609958",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0333914467466d22133e25b71ef330bb2c609958",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0333914467466d22133e25b71ef330bb2c609958/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8935869487ffe858534d73c4929a4ee3d96ca6ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8935869487ffe858534d73c4929a4ee3d96ca6ac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8935869487ffe858534d73c4929a4ee3d96ca6ac"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 28,
      "deletions": 2
    },
    "files": [
      {
        "sha": "9f970b49618df11744d1a90ebe25dbfcca6a1a2d",
        "filename": "test/functional/data/rpc_psbt.json",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0333914467466d22133e25b71ef330bb2c609958/test/functional/data/rpc_psbt.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0333914467466d22133e25b71ef330bb2c609958/test/functional/data/rpc_psbt.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/rpc_psbt.json?ref=0333914467466d22133e25b71ef330bb2c609958",
        "patch": "@@ -81,6 +81,30 @@\n             ],\n             \"psbt\" : \"cHNidP8BAKACAAAAAqsJSaCMWvfEm4IS9Bfi8Vqz9cM9zxU4IagTn4d6W3vkAAAAAAD+////qwlJoIxa98SbghL0F+LxWrP1wz3PFTghqBOfh3pbe+QBAAAAAP7///8CYDvqCwAAAAAZdqkUdopAu9dAy+gdmI5x3ipNXHE5ax2IrI4kAAAAAAAAGXapFG9GILVT+glechue4O/p+gOcykWXiKwAAAAAAAEBItPf9QUAAAAAGXapFNSO0xELlAFMsRS9Mtb00GbcdCVriKwAAQEgAOH1BQAAAAAXqRQ1RebjO4MsRwUPJNPuuTycA5SLx4cBBBYAFIXRNTfy4mVAWjTbr6nj3aAfuCMIACICAurVlmh8qAYEPtw94RbN8p1eklfBls0FXPaYyNAr8k6ZELSmumcAAACAAAAAgAIAAIAAIgIDlPYr6d8ZlSxVh3aK63aYBhrSxKJciU9H2MFitNchPQUQtKa6ZwAAAIABAACAAgAAgAA=\",\n             \"result\" : \"cHNidP8BAKACAAAAAqsJSaCMWvfEm4IS9Bfi8Vqz9cM9zxU4IagTn4d6W3vkAAAAAAD+////qwlJoIxa98SbghL0F+LxWrP1wz3PFTghqBOfh3pbe+QBAAAAAP7///8CYDvqCwAAAAAZdqkUdopAu9dAy+gdmI5x3ipNXHE5ax2IrI4kAAAAAAAAGXapFG9GILVT+glechue4O/p+gOcykWXiKwAAAAAAAEBItPf9QUAAAAAGXapFNSO0xELlAFMsRS9Mtb00GbcdCVriKwAAQEgAOH1BQAAAAAXqRQ1RebjO4MsRwUPJNPuuTycA5SLx4cBBBYAFIXRNTfy4mVAWjTbr6nj3aAfuCMIACICAurVlmh8qAYEPtw94RbN8p1eklfBls0FXPaYyNAr8k6ZELSmumcAAACAAAAAgAIAAIAAIgIDlPYr6d8ZlSxVh3aK63aYBhrSxKJciU9H2MFitNchPQUQtKa6ZwAAAIABAACAAgAAgAA=\"\n+        },\n+        {\n+            \"privkeys\" : [\n+                \"cT7J9YpCwY3AVRFSjN6ukeEeWY6mhpbJPxRaDaP5QTdygQRxP9Au\",\n+                \"cNBc3SWUip9PPm1GjRoLEJT6T41iNzCYtD7qro84FMnM5zEqeJsE\"\n+            ],\n+            \"psbt\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU210gwRQIhAPYQOLMI3B2oZaNIUnRvAVdyk0IIxtJEVDk82ZvfIhd3AiAFbmdaZ1ptCgK4WxTl4pB02KJam1dgvqKBb2YZEKAG6gEBAwQBAAAAAQRHUiEClYO/Oa4KYJdHrRma3dY0+mEIVZ1sXNObTCGD8auW4H8hAtq2H/SaFNtqfQKwzR+7ePxLGDErW05U2uTbovv+9TbXUq8iBgKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfxDZDGpPAAAAgAAAAIAAAACAIgYC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtcQ2QxqTwAAAIAAAACAAQAAgAABASAAwusLAAAAABepFLf1+vQOPUClpFmx2zU18rcvqSHohyICAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zRzBEAiBl9FulmYtZon/+GnvtAWrx8fkNVLOqj3RQql9WolEDvQIgf3JHA60e25ZoCyhLVtT/y4j3+3Weq74IqjDym4UTg9IBAQMEAQAAAAEEIgAgjCNTFzdDtZXftKB7crqOQuN5fadOh/59nXSX47ICiQMBBUdSIQMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3CECOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNSriIGAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zENkMak8AAACAAAAAgAMAAIAiBgMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3BDZDGpPAAAAgAAAAIACAACAACICA6mkw39ZltOqJdusa1cK8GUDlEkpQkYLNUdT7Z7spYdxENkMak8AAACAAAAAgAQAAIAAIgICf2OZdX0u/1WhNq0CxoSxg4tlVuXxtrNCgqlLa1AFEJYQ2QxqTwAAAIAAAACABQAAgAA=\",\n+            \"result\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU210gwRQIhAPYQOLMI3B2oZaNIUnRvAVdyk0IIxtJEVDk82ZvfIhd3AiAFbmdaZ1ptCgK4WxTl4pB02KJam1dgvqKBb2YZEKAG6gEBAwQBAAAAAQRHUiEClYO/Oa4KYJdHrRma3dY0+mEIVZ1sXNObTCGD8auW4H8hAtq2H/SaFNtqfQKwzR+7ePxLGDErW05U2uTbovv+9TbXUq8iBgKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfxDZDGpPAAAAgAAAAIAAAACAIgYC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtcQ2QxqTwAAAIAAAACAAQAAgAABASAAwusLAAAAABepFLf1+vQOPUClpFmx2zU18rcvqSHohyICAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zRzBEAiBl9FulmYtZon/+GnvtAWrx8fkNVLOqj3RQql9WolEDvQIgf3JHA60e25ZoCyhLVtT/y4j3+3Weq74IqjDym4UTg9IBAQMEAQAAAAEEIgAgjCNTFzdDtZXftKB7crqOQuN5fadOh/59nXSX47ICiQMBBUdSIQMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3CECOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNSriIGAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zENkMak8AAACAAAAAgAMAAIAiBgMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3BDZDGpPAAAAgAAAAIACAACAACICA6mkw39ZltOqJdusa1cK8GUDlEkpQkYLNUdT7Z7spYdxENkMak8AAACAAAAAgAQAAIAAIgICf2OZdX0u/1WhNq0CxoSxg4tlVuXxtrNCgqlLa1AFEJYQ2QxqTwAAAIAAAACABQAAgAA=\"\n+        },\n+        {\n+            \"privkeys\" : [\n+                \"cT7J9YpCwY3AVRFSjN6ukeEeWY6mhpbJPxRaDaP5QTdygQRxP9Au\",\n+                \"cNBc3SWUip9PPm1GjRoLEJT6T41iNzCYtD7qro84FMnM5zEqeJsE\"\n+            ],\n+            \"psbt\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU210gwRQIhAPYQOLMI3B2oZaNIUnRvAVdyk0IIxtJEVDk82ZvfIhd3AiAFbmdaZ1ptCgK4WxTl4pB02KJam1dgvqKBb2YZEKAG6gEBAwQBAAAAAQRHUiEClYO/Oa4KYJdHrRma3dY0+mEIVZ1sXNObTCGD8auW4H8hAtq2H/SaFNtqfQKwzR+7ePxLGDErW05U2uTbovv+9TbXUq4iBgKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfxDZDGpPAAAAgAAAAIAAAACAIgYC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtcQ2QxqTwAAAIAAAACAAQAAgAABASAAwusLAAAAABepFLf1+vQOPUClpFmx2zU18rcvqSHohyICAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zRzBEAiBl9FulmYtZon/+GnvtAWrx8fkNVLOqj3RQql9WolEDvQIgf3JHA60e25ZoCyhLVtT/y4j3+3Weq74IqjDym4UTg9IBAQMEAQAAAAEEIgAgjCNTFzdDtZXftKB7crqOQuN5fadOh/59nXSX47ICiQABBUdSIQMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3CECOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNSriIGAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zENkMak8AAACAAAAAgAMAAIAiBgMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3BDZDGpPAAAAgAAAAIACAACAACICA6mkw39ZltOqJdusa1cK8GUDlEkpQkYLNUdT7Z7spYdxENkMak8AAACAAAAAgAQAAIAAIgICf2OZdX0u/1WhNq0CxoSxg4tlVuXxtrNCgqlLa1AFEJYQ2QxqTwAAAIAAAACABQAAgAA=\",\n+            \"result\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU210gwRQIhAPYQOLMI3B2oZaNIUnRvAVdyk0IIxtJEVDk82ZvfIhd3AiAFbmdaZ1ptCgK4WxTl4pB02KJam1dgvqKBb2YZEKAG6gEBAwQBAAAAAQRHUiEClYO/Oa4KYJdHrRma3dY0+mEIVZ1sXNObTCGD8auW4H8hAtq2H/SaFNtqfQKwzR+7ePxLGDErW05U2uTbovv+9TbXUq4iBgKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfxDZDGpPAAAAgAAAAIAAAACAIgYC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtcQ2QxqTwAAAIAAAACAAQAAgAABASAAwusLAAAAABepFLf1+vQOPUClpFmx2zU18rcvqSHohyICAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zRzBEAiBl9FulmYtZon/+GnvtAWrx8fkNVLOqj3RQql9WolEDvQIgf3JHA60e25ZoCyhLVtT/y4j3+3Weq74IqjDym4UTg9IBAQMEAQAAAAEEIgAgjCNTFzdDtZXftKB7crqOQuN5fadOh/59nXSX47ICiQABBUdSIQMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3CECOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNSriIGAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zENkMak8AAACAAAAAgAMAAIAiBgMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3BDZDGpPAAAAgAAAAIACAACAACICA6mkw39ZltOqJdusa1cK8GUDlEkpQkYLNUdT7Z7spYdxENkMak8AAACAAAAAgAQAAIAAIgICf2OZdX0u/1WhNq0CxoSxg4tlVuXxtrNCgqlLa1AFEJYQ2QxqTwAAAIAAAACABQAAgAA=\"\n+        },\n+        {\n+            \"privkeys\" : [\n+                \"cT7J9YpCwY3AVRFSjN6ukeEeWY6mhpbJPxRaDaP5QTdygQRxP9Au\",\n+                \"cNBc3SWUip9PPm1GjRoLEJT6T41iNzCYtD7qro84FMnM5zEqeJsE\"\n+            ],\n+            \"psbt\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU210gwRQIhAPYQOLMI3B2oZaNIUnRvAVdyk0IIxtJEVDk82ZvfIhd3AiAFbmdaZ1ptCgK4WxTl4pB02KJam1dgvqKBb2YZEKAG6gEBAwQBAAAAAQRHUiEClYO/Oa4KYJdHrRma3dY0+mEIVZ1sXNObTCGD8auW4H8hAtq2H/SaFNtqfQKwzR+7ePxLGDErW05U2uTbovv+9TbXUq4iBgKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfxDZDGpPAAAAgAAAAIAAAACAIgYC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtcQ2QxqTwAAAIAAAACAAQAAgAABASAAwusLAAAAABepFLf1+vQOPUClpFmx2zU18rcvqSHohyICAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zRzBEAiBl9FulmYtZon/+GnvtAWrx8fkNVLOqj3RQql9WolEDvQIgf3JHA60e25ZoCyhLVtT/y4j3+3Weq74IqjDym4UTg9IBAQMEAQAAAAEEIgAgjCNTFzdDtZXftKB7crqOQuN5fadOh/59nXSX47ICiQMBBUdSIQMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3CECOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNSrSIGAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zENkMak8AAACAAAAAgAMAAIAiBgMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3BDZDGpPAAAAgAAAAIACAACAACICA6mkw39ZltOqJdusa1cK8GUDlEkpQkYLNUdT7Z7spYdxENkMak8AAACAAAAAgAQAAIAAIgICf2OZdX0u/1WhNq0CxoSxg4tlVuXxtrNCgqlLa1AFEJYQ2QxqTwAAAIAAAACABQAAgAA=\",\n+            \"result\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU210gwRQIhAPYQOLMI3B2oZaNIUnRvAVdyk0IIxtJEVDk82ZvfIhd3AiAFbmdaZ1ptCgK4WxTl4pB02KJam1dgvqKBb2YZEKAG6gEBAwQBAAAAAQRHUiEClYO/Oa4KYJdHrRma3dY0+mEIVZ1sXNObTCGD8auW4H8hAtq2H/SaFNtqfQKwzR+7ePxLGDErW05U2uTbovv+9TbXUq4iBgKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfxDZDGpPAAAAgAAAAIAAAACAIgYC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtcQ2QxqTwAAAIAAAACAAQAAgAABASAAwusLAAAAABepFLf1+vQOPUClpFmx2zU18rcvqSHohyICAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zRzBEAiBl9FulmYtZon/+GnvtAWrx8fkNVLOqj3RQql9WolEDvQIgf3JHA60e25ZoCyhLVtT/y4j3+3Weq74IqjDym4UTg9IBAQMEAQAAAAEEIgAgjCNTFzdDtZXftKB7crqOQuN5fadOh/59nXSX47ICiQMBBUdSIQMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3CECOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNSrSIGAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zENkMak8AAACAAAAAgAMAAIAiBgMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3BDZDGpPAAAAgAAAAIACAACAACICA6mkw39ZltOqJdusa1cK8GUDlEkpQkYLNUdT7Z7spYdxENkMak8AAACAAAAAgAQAAIAAIgICf2OZdX0u/1WhNq0CxoSxg4tlVuXxtrNCgqlLa1AFEJYQ2QxqTwAAAIAAAACABQAAgAA=\"\n         }\n     ],\n     \"combiner\" : ["
      },
      {
        "sha": "99c4131d616bf61b242406abd6f9f4ea19632173",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0333914467466d22133e25b71ef330bb2c609958/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0333914467466d22133e25b71ef330bb2c609958/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=0333914467466d22133e25b71ef330bb2c609958",
        "patch": "@@ -168,9 +168,11 @@ def run_test(self):\n \n         # Signer tests\n         for i, signer in enumerate(signers):\n+            self.nodes[2].createwallet(\"wallet{}\".format(i))\n+            wrpc = self.nodes[2].get_wallet_rpc(\"wallet{}\".format(i))\n             for key in signer['privkeys']:\n-                self.nodes[i].importprivkey(key)\n-            signed_tx = self.nodes[i].walletprocesspsbt(signer['psbt'])['psbt']\n+                wrpc.importprivkey(key)\n+            signed_tx = wrpc.walletprocesspsbt(signer['psbt'])['psbt']\n             assert_equal(signed_tx, signer['result'])\n \n         # Combiner test"
      }
    ]
  },
  {
    "sha": "4a2960f73eb0994a1f9a6c9f03b425c718434d53",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YTI5NjBmNzNlYjA5OTRhMWY5YTZjOWYwM2I0MjVjNzE4NDM0ZDUz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-08-15T13:33:17Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-08-15T13:33:21Z"
      },
      "message": "Merge #13976: [0.17] Backport #13960 & #13917\n\n0333914467466d22133e25b71ef330bb2c609958 More tests of signer checks (Andrew Chow)\n8935869487ffe858534d73c4929a4ee3d96ca6ac Test that a non-witness script as witness utxo is not signed (Andrew Chow)\ndbaadc9ea92fd0e221c60584a5d1ca871fdd9c66 Only wipe wrong UTXO type data if overwritten by wallet (Pieter Wuille)\nad6d845ac9d43aac663fa46912b49aaf837a1a9e Additional sanity checks in SignPSBTInput (Pieter Wuille)\n517010e30e4ac52868fcfd537b644515f3081f88 Serialize non-witness utxo as a non-witness tx but always deserialize as witness (Andrew Chow)\n8c4cd2bd895fe7467307867fefc3cd45a685367c Fix PSBT deserialization of 0-input transactions (Andrew Chow)\n\nPull request description:\n\n  Backports #13917 and #13960 to the 0.17 branch.\n\nTree-SHA512: b3853aff2a13a53aa0a390b6b4b0c539f0ef0d42f2c517e956efd0b135c74c4ddce6a1d00700849a58c696824fa95951d8cac6ca58b426e8dfcb8bb62f680b7c",
      "tree": {
        "sha": "ac8f348d939a1df2672253a166b437e9d3140597",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ac8f348d939a1df2672253a166b437e9d3140597"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4a2960f73eb0994a1f9a6c9f03b425c718434d53",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJbdCuhAAoJEB5K7WKYbNJdBy0H/iDLV85Xm3xBsF1DjPsuaPjZ\nUSuCdcZtWjVJbo6NgqRo0l2cx4OVp/T9oPPxHmVs1z3mzhi6K4x9dH0gjsyBDvRs\nMQI+K69RziKldgwSK47NpVNM/hOBoEsmLHQUPWImWmF8LhqVFDLcJDieJm+wljBb\nHGHSS7fLMeIc9K4t1g3VK+hX2xECJjLNL+S2FVxil06MUdqyeKeT9OnPaDY01a/1\nmGh64BoxvlYuLgyhsCj7j8wMGngiyi4BhLG8+8uITXqHEIFIiAYb9tSS+tqMX3L9\nY2WWIRD24nAIB7+W7npoLD6Hr8KEfZF9FQesaGFcUnbgBn3DdxCqkunF+rDD/5g=\n=5WIq\n-----END PGP SIGNATURE-----",
        "payload": "tree ac8f348d939a1df2672253a166b437e9d3140597\nparent ff41e479a0a3c2485f6116abcffa1bacbd86ca72\nparent 0333914467466d22133e25b71ef330bb2c609958\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1534339997 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1534340001 +0200\n\nMerge #13976: [0.17] Backport #13960 & #13917\n\n0333914467466d22133e25b71ef330bb2c609958 More tests of signer checks (Andrew Chow)\n8935869487ffe858534d73c4929a4ee3d96ca6ac Test that a non-witness script as witness utxo is not signed (Andrew Chow)\ndbaadc9ea92fd0e221c60584a5d1ca871fdd9c66 Only wipe wrong UTXO type data if overwritten by wallet (Pieter Wuille)\nad6d845ac9d43aac663fa46912b49aaf837a1a9e Additional sanity checks in SignPSBTInput (Pieter Wuille)\n517010e30e4ac52868fcfd537b644515f3081f88 Serialize non-witness utxo as a non-witness tx but always deserialize as witness (Andrew Chow)\n8c4cd2bd895fe7467307867fefc3cd45a685367c Fix PSBT deserialization of 0-input transactions (Andrew Chow)\n\nPull request description:\n\n  Backports #13917 and #13960 to the 0.17 branch.\n\nTree-SHA512: b3853aff2a13a53aa0a390b6b4b0c539f0ef0d42f2c517e956efd0b135c74c4ddce6a1d00700849a58c696824fa95951d8cac6ca58b426e8dfcb8bb62f680b7c\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a2960f73eb0994a1f9a6c9f03b425c718434d53",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4a2960f73eb0994a1f9a6c9f03b425c718434d53",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a2960f73eb0994a1f9a6c9f03b425c718434d53/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff41e479a0a3c2485f6116abcffa1bacbd86ca72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff41e479a0a3c2485f6116abcffa1bacbd86ca72",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff41e479a0a3c2485f6116abcffa1bacbd86ca72"
      },
      {
        "sha": "0333914467466d22133e25b71ef330bb2c609958",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0333914467466d22133e25b71ef330bb2c609958",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0333914467466d22133e25b71ef330bb2c609958"
      }
    ],
    "stats": {
      "total": 110,
      "additions": 94,
      "deletions": 16
    },
    "files": [
      {
        "sha": "1ab5051ff70bb6a44acb2e60af16a677c555bd46",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a2960f73eb0994a1f9a6c9f03b425c718434d53/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a2960f73eb0994a1f9a6c9f03b425c718434d53/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=4a2960f73eb0994a1f9a6c9f03b425c718434d53",
        "patch": "@@ -244,17 +244,33 @@ bool SignPSBTInput(const SigningProvider& provider, const CMutableTransaction& t\n     input.FillSignatureData(sigdata);\n \n     // Get UTXO\n+    bool require_witness_sig = false;\n     CTxOut utxo;\n     if (input.non_witness_utxo) {\n+        // If we're taking our information from a non-witness UTXO, verify that it matches the prevout.\n+        if (input.non_witness_utxo->GetHash() != tx.vin[index].prevout.hash) return false;\n+        // If both witness and non-witness UTXO are provided, verify that they match. This check shouldn't\n+        // matter, as the PSBT deserializer enforces only one of both is provided, and the only way both\n+        // can be present is when they're added simultaneously by FillPSBT (in which case they always match).\n+        // Still, check in order to not rely on callers to enforce this.\n+        if (!input.witness_utxo.IsNull() && input.non_witness_utxo->vout[tx.vin[index].prevout.n] != input.witness_utxo) return false;\n         utxo = input.non_witness_utxo->vout[tx.vin[index].prevout.n];\n     } else if (!input.witness_utxo.IsNull()) {\n         utxo = input.witness_utxo;\n+        // When we're taking our information from a witness UTXO, we can't verify it is actually data from\n+        // the output being spent. This is safe in case a witness signature is produced (which includes this\n+        // information directly in the hash), but not for non-witness signatures. Remember that we require\n+        // a witness signature in this situation.\n+        require_witness_sig = true;\n     } else {\n         return false;\n     }\n \n     MutableTransactionSignatureCreator creator(&tx, index, utxo.nValue, sighash);\n+    sigdata.witness = false;\n     bool sig_complete = ProduceSignature(provider, creator, utxo.scriptPubKey, sigdata);\n+    // Verify that a witness signature was produced in case one was required.\n+    if (require_witness_sig && !sigdata.witness) return false;\n     input.FromSignatureData(sigdata);\n     return sig_complete;\n }"
      },
      {
        "sha": "7ade715ee292a2b04ad8da32483ef682789f1622",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 13,
        "deletions": 5,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a2960f73eb0994a1f9a6c9f03b425c718434d53/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a2960f73eb0994a1f9a6c9f03b425c718434d53/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=4a2960f73eb0994a1f9a6c9f03b425c718434d53",
        "patch": "@@ -223,7 +223,8 @@ struct PSBTInput\n         // If there is a non-witness utxo, then don't add the witness one.\n         if (non_witness_utxo) {\n             SerializeToVector(s, PSBT_IN_NON_WITNESS_UTXO);\n-            SerializeToVector(s, non_witness_utxo);\n+            OverrideStream<Stream> os(&s, s.GetType(), s.GetVersion() | SERIALIZE_TRANSACTION_NO_WITNESS);\n+            SerializeToVector(os, non_witness_utxo);\n         } else if (!witness_utxo.IsNull()) {\n             SerializeToVector(s, PSBT_IN_WITNESS_UTXO);\n             SerializeToVector(s, witness_utxo);\n@@ -297,13 +298,17 @@ struct PSBTInput\n             // Do stuff based on type\n             switch(type) {\n                 case PSBT_IN_NON_WITNESS_UTXO:\n+                {\n                     if (non_witness_utxo) {\n                         throw std::ios_base::failure(\"Duplicate Key, input non-witness utxo already provided\");\n                     } else if (key.size() != 1) {\n                         throw std::ios_base::failure(\"Non-witness utxo key is more than one byte type\");\n                     }\n-                    UnserializeFromVector(s, non_witness_utxo);\n+                    // Set the stream to unserialize with witness since this is always a valid network transaction\n+                    OverrideStream<Stream> os(&s, s.GetType(), s.GetVersion() & ~SERIALIZE_TRANSACTION_NO_WITNESS);\n+                    UnserializeFromVector(os, non_witness_utxo);\n                     break;\n+                }\n                 case PSBT_IN_WITNESS_UTXO:\n                     if (!witness_utxo.IsNull()) {\n                         throw std::ios_base::failure(\"Duplicate Key, input witness utxo already provided\");\n@@ -547,7 +552,8 @@ struct PartiallySignedTransaction\n         SerializeToVector(s, PSBT_GLOBAL_UNSIGNED_TX);\n \n         // Write serialized tx to a stream\n-        SerializeToVector(s, *tx);\n+        OverrideStream<Stream> os(&s, s.GetType(), s.GetVersion() | SERIALIZE_TRANSACTION_NO_WITNESS);\n+        SerializeToVector(os, *tx);\n \n         // Write the unknown things\n         for (auto& entry : unknown) {\n@@ -601,7 +607,9 @@ struct PartiallySignedTransaction\n                         throw std::ios_base::failure(\"Global unsigned tx key is more than one byte type\");\n                     }\n                     CMutableTransaction mtx;\n-                    UnserializeFromVector(s, mtx);\n+                    // Set the stream to serialize with non-witness since this should always be non-witness\n+                    OverrideStream<Stream> os(&s, s.GetType(), s.GetVersion() | SERIALIZE_TRANSACTION_NO_WITNESS);\n+                    UnserializeFromVector(os, mtx);\n                     tx = std::move(mtx);\n                     // Make sure that all scriptSigs and scriptWitnesses are empty\n                     for (const CTxIn& txin : tx->vin) {\n@@ -678,7 +686,7 @@ bool ProduceSignature(const SigningProvider& provider, const BaseSignatureCreato\n bool SignSignature(const SigningProvider &provider, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, const CAmount& amount, int nHashType);\n bool SignSignature(const SigningProvider &provider, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType);\n \n-/** Signs a PSBTInput */\n+/** Signs a PSBTInput, verifying that all provided data matches what is being signed. */\n bool SignPSBTInput(const SigningProvider& provider, const CMutableTransaction& tx, PSBTInput& input, SignatureData& sigdata, int index, int sighash = 1);\n \n /** Extract signature data from a transaction input, and insert it. */"
      },
      {
        "sha": "096ebfc9c2eeb008546e112c658b924c23481927",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a2960f73eb0994a1f9a6c9f03b425c718434d53/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a2960f73eb0994a1f9a6c9f03b425c718434d53/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=4a2960f73eb0994a1f9a6c9f03b425c718434d53",
        "patch": "@@ -61,6 +61,7 @@ class OverrideStream\n \n     int GetVersion() const { return nVersion; }\n     int GetType() const { return nType; }\n+    size_t size() const { return stream->size(); }\n };\n \n template<typename S>"
      },
      {
        "sha": "92e6931645a65da396771fbe2fb48d25cd5073e8",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a2960f73eb0994a1f9a6c9f03b425c718434d53/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a2960f73eb0994a1f9a6c9f03b425c718434d53/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=4a2960f73eb0994a1f9a6c9f03b425c718434d53",
        "patch": "@@ -4504,10 +4504,11 @@ bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, const C\n \n         // If we don't know about this input, skip it and let someone else deal with it\n         const uint256& txhash = txin.prevout.hash;\n-        const auto& it = pwallet->mapWallet.find(txhash);\n+        const auto it = pwallet->mapWallet.find(txhash);\n         if (it != pwallet->mapWallet.end()) {\n             const CWalletTx& wtx = it->second;\n             CTxOut utxo = wtx.tx->vout[txin.prevout.n];\n+            // Update both UTXOs from the wallet.\n             input.non_witness_utxo = wtx.tx;\n             input.witness_utxo = utxo;\n         }\n@@ -4524,11 +4525,13 @@ bool FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& psbtx, const C\n             complete &= SignPSBTInput(PublicOnlySigningProvider(pwallet), *psbtx.tx, input, sigdata, i, sighash_type);\n         }\n \n-        // Drop the unnecessary UTXO\n-        if (sigdata.witness) {\n-            input.non_witness_utxo = nullptr;\n-        } else {\n-            input.witness_utxo.SetNull();\n+        if (it != pwallet->mapWallet.end()) {\n+            // Drop the unnecessary UTXO if we added both from the wallet.\n+            if (sigdata.witness) {\n+                input.non_witness_utxo = nullptr;\n+            } else {\n+                input.witness_utxo.SetNull();\n+            }\n         }\n \n         // Get public key paths"
      },
      {
        "sha": "9f970b49618df11744d1a90ebe25dbfcca6a1a2d",
        "filename": "test/functional/data/rpc_psbt.json",
        "status": "modified",
        "additions": 51,
        "deletions": 3,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a2960f73eb0994a1f9a6c9f03b425c718434d53/test/functional/data/rpc_psbt.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a2960f73eb0994a1f9a6c9f03b425c718434d53/test/functional/data/rpc_psbt.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/rpc_psbt.json?ref=4a2960f73eb0994a1f9a6c9f03b425c718434d53",
        "patch": "@@ -24,7 +24,8 @@\n         \"cHNidP8BAKACAAAAAqsJSaCMWvfEm4IS9Bfi8Vqz9cM9zxU4IagTn4d6W3vkAAAAAAD+////qwlJoIxa98SbghL0F+LxWrP1wz3PFTghqBOfh3pbe+QBAAAAAP7///8CYDvqCwAAAAAZdqkUdopAu9dAy+gdmI5x3ipNXHE5ax2IrI4kAAAAAAAAGXapFG9GILVT+glechue4O/p+gOcykWXiKwAAAAAAAEHakcwRAIgR1lmF5fAGwNrJZKJSGhiGDR9iYZLcZ4ff89X0eURZYcCIFMJ6r9Wqk2Ikf/REf3xM286KdqGbX+EhtdVRs7tr5MZASEDXNxh/HupccC1AaZGoqg7ECy0OIEhfKaC3Ibi1z+ogpIAAQEgAOH1BQAAAAAXqRQ1RebjO4MsRwUPJNPuuTycA5SLx4cBBBYAFIXRNTfy4mVAWjTbr6nj3aAfuCMIAAAA\",\n         \"cHNidP8BAHUCAAAAASaBcTce3/KF6Tet7qSze3gADAVmy7OtZGQXE8pCFxv2AAAAAAD+////AtPf9QUAAAAAGXapFNDFmQPFusKGh2DpD9UhpGZap2UgiKwA4fUFAAAAABepFDVF5uM7gyxHBQ8k0+65PJwDlIvHh7MuEwAAAQD9pQEBAAAAAAECiaPHHqtNIOA3G7ukzGmPopXJRjr6Ljl/hTPMti+VZ+UBAAAAFxYAFL4Y0VKpsBIDna89p95PUzSe7LmF/////4b4qkOnHf8USIk6UwpyN+9rRgi7st0tAXHmOuxqSJC0AQAAABcWABT+Pp7xp0XpdNkCxDVZQ6vLNL1TU/////8CAMLrCwAAAAAZdqkUhc/xCX/Z4Ai7NK9wnGIZeziXikiIrHL++E4sAAAAF6kUM5cluiHv1irHU6m80GfWx6ajnQWHAkcwRAIgJxK+IuAnDzlPVoMR3HyppolwuAJf3TskAinwf4pfOiQCIAGLONfc0xTnNMkna9b7QPZzMlvEuqFEyADS8vAtsnZcASED0uFWdJQbrUqZY3LLh+GFbTZSYG2YVi/jnF6efkE/IQUCSDBFAiEA0SuFLYXc2WHS9fSrZgZU327tzHlMDDPOXMMJ/7X85Y0CIGczio4OFyXBl/saiK9Z9R5E5CVbIBZ8hoQDHAXR8lkqASECI7cr7vCWXRC+B3jv7NYfysb3mk6haTkzgHNEZPhPKrMAAAAAAQMEAQAAAAAAAA==\",\n         \"cHNidP8BAKACAAAAAqsJSaCMWvfEm4IS9Bfi8Vqz9cM9zxU4IagTn4d6W3vkAAAAAAD+////qwlJoIxa98SbghL0F+LxWrP1wz3PFTghqBOfh3pbe+QBAAAAAP7///8CYDvqCwAAAAAZdqkUdopAu9dAy+gdmI5x3ipNXHE5ax2IrI4kAAAAAAAAGXapFG9GILVT+glechue4O/p+gOcykWXiKwAAAAAAAEA3wIAAAABJoFxNx7f8oXpN63upLN7eAAMBWbLs61kZBcTykIXG/YAAAAAakcwRAIgcLIkUSPmv0dNYMW1DAQ9TGkaXSQ18Jo0p2YqncJReQoCIAEynKnazygL3zB0DsA5BCJCLIHLRYOUV663b8Eu3ZWzASECZX0RjTNXuOD0ws1G23s59tnDjZpwq8ubLeXcjb/kzjH+////AtPf9QUAAAAAGXapFNDFmQPFusKGh2DpD9UhpGZap2UgiKwA4fUFAAAAABepFDVF5uM7gyxHBQ8k0+65PJwDlIvHh7MuEwAAAQEgAOH1BQAAAAAXqRQ1RebjO4MsRwUPJNPuuTycA5SLx4cBBBYAFIXRNTfy4mVAWjTbr6nj3aAfuCMIACICAurVlmh8qAYEPtw94RbN8p1eklfBls0FXPaYyNAr8k6ZELSmumcAAACAAAAAgAIAAIAAIgIDlPYr6d8ZlSxVh3aK63aYBhrSxKJciU9H2MFitNchPQUQtKa6ZwAAAIABAACAAgAAgAA=\",\n-        \"cHNidP8BAFUCAAAAASeaIyOl37UfxF8iD6WLD8E+HjNCeSqF1+Ns1jM7XLw5AAAAAAD/////AaBa6gsAAAAAGXapFP/pwAYQl8w7Y28ssEYPpPxCfStFiKwAAAAAAAEBIJVe6gsAAAAAF6kUY0UgD2jRieGtwN8cTRbqjxTA2+uHIgIDsTQcy6doO2r08SOM1ul+cWfVafrEfx5I1HVBhENVvUZGMEMCIAQktY7/qqaU4VWepck7v9SokGQiQFXN8HC2dxRpRC0HAh9cjrD+plFtYLisszrWTt5g6Hhb+zqpS5m9+GFR25qaAQEEIgAgdx/RitRZZm3Unz1WTj28QvTIR3TjYK2haBao7UiNVoEBBUdSIQOxNBzLp2g7avTxI4zW6X5xZ9Vp+sR/HkjUdUGEQ1W9RiED3lXR4drIBeP4pYwfv5uUwC89uq/hJ/78pJlfJvggg71SriIGA7E0HMunaDtq9PEjjNbpfnFn1Wn6xH8eSNR1QYRDVb1GELSmumcAAACAAAAAgAQAAIAiBgPeVdHh2sgF4/iljB+/m5TALz26r+En/vykmV8m+CCDvRC0prpnAAAAgAAAAIAFAACAAAA=\"\n+        \"cHNidP8BAFUCAAAAASeaIyOl37UfxF8iD6WLD8E+HjNCeSqF1+Ns1jM7XLw5AAAAAAD/////AaBa6gsAAAAAGXapFP/pwAYQl8w7Y28ssEYPpPxCfStFiKwAAAAAAAEBIJVe6gsAAAAAF6kUY0UgD2jRieGtwN8cTRbqjxTA2+uHIgIDsTQcy6doO2r08SOM1ul+cWfVafrEfx5I1HVBhENVvUZGMEMCIAQktY7/qqaU4VWepck7v9SokGQiQFXN8HC2dxRpRC0HAh9cjrD+plFtYLisszrWTt5g6Hhb+zqpS5m9+GFR25qaAQEEIgAgdx/RitRZZm3Unz1WTj28QvTIR3TjYK2haBao7UiNVoEBBUdSIQOxNBzLp2g7avTxI4zW6X5xZ9Vp+sR/HkjUdUGEQ1W9RiED3lXR4drIBeP4pYwfv5uUwC89uq/hJ/78pJlfJvggg71SriIGA7E0HMunaDtq9PEjjNbpfnFn1Wn6xH8eSNR1QYRDVb1GELSmumcAAACAAAAAgAQAAIAiBgPeVdHh2sgF4/iljB+/m5TALz26r+En/vykmV8m+CCDvRC0prpnAAAAgAAAAIAFAACAAAA=\",\n+        \"cHNidP8BACoCAAAAAAFAQg8AAAAAABepFG6Rty1Vk+fUOR4v9E6R6YXDFkHwhwAAAAAAAA==\"\n     ],\n     \"creator\" : [\n         {\n@@ -57,15 +58,62 @@\n             ],\n             \"psbt\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAABBEdSIQKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfyEC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtdSriIGApWDvzmuCmCXR60Zmt3WNPphCFWdbFzTm0whg/GrluB/ENkMak8AAACAAAAAgAAAAIAiBgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU21xDZDGpPAAAAgAAAAIABAACAAQMEAQAAAAABASAAwusLAAAAABepFLf1+vQOPUClpFmx2zU18rcvqSHohwEEIgAgjCNTFzdDtZXftKB7crqOQuN5fadOh/59nXSX47ICiQMBBUdSIQMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3CECOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNSriIGAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zENkMak8AAACAAAAAgAMAAIAiBgMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3BDZDGpPAAAAgAAAAIACAACAAQMEAQAAAAAiAgOppMN/WZbTqiXbrGtXCvBlA5RJKUJGCzVHU+2e7KWHcRDZDGpPAAAAgAAAAIAEAACAACICAn9jmXV9Lv9VoTatAsaEsYOLZVbl8bazQoKpS2tQBRCWENkMak8AAACAAAAAgAUAAIAA\",\n             \"result\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgf0cwRAIgdAGK1BgAl7hzMjwAFXILNoTMgSOJEEjn282bVa1nnJkCIHPTabdA4+tT3O+jOCPIBwUUylWn3ZVE8VfBZ5EyYRGMAQEDBAEAAAABBEdSIQKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfyEC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtdSriIGApWDvzmuCmCXR60Zmt3WNPphCFWdbFzTm0whg/GrluB/ENkMak8AAACAAAAAgAAAAIAiBgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU21xDZDGpPAAAAgAAAAIABAACAAAEBIADC6wsAAAAAF6kUt/X69A49QKWkWbHbNTXyty+pIeiHIgIDCJ3BDHrG21T5EymvYXMz2ziM6tDCMfcjN50bmQMLAtxHMEQCIGLrelVhB6fHP0WsSrWh3d9vcHX7EnWWmn84Pv/3hLyyAiAMBdu3Rw2/LwhVfdNWxzJcHtMJE+mWzThAlF2xIijaXwEBAwQBAAAAAQQiACCMI1MXN0O1ld+0oHtyuo5C43l9p06H/n2ddJfjsgKJAwEFR1IhAwidwQx6xttU+RMpr2FzM9s4jOrQwjH3IzedG5kDCwLcIQI63ZBPPW3PWd25BrDe4jUpt/+57VDl6GFRkmhgIh8Oc1KuIgYCOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnMQ2QxqTwAAAIAAAACAAwAAgCIGAwidwQx6xttU+RMpr2FzM9s4jOrQwjH3IzedG5kDCwLcENkMak8AAACAAAAAgAIAAIAAIgIDqaTDf1mW06ol26xrVwrwZQOUSSlCRgs1R1Ptnuylh3EQ2QxqTwAAAIAAAACABAAAgAAiAgJ/Y5l1fS7/VaE2rQLGhLGDi2VW5fG2s0KCqUtrUAUQlhDZDGpPAAAAgAAAAIAFAACAAA==\"\n+        },\n+        {\n+            \"privkeys\" : [\n+                \"cT7J9YpCwY3AVRFSjN6ukeEeWY6mhpbJPxRaDaP5QTdygQRxP9Au\",\n+                \"cNBc3SWUip9PPm1GjRoLEJT6T41iNzCYtD7qro84FMnM5zEqeJsE\"\n+            ],\n+            \"psbt\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAABBEdSIQKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfyEC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtdSriIGApWDvzmuCmCXR60Zmt3WNPphCFWdbFzTm0whg/GrluB/ENkMak8AAACAAAAAgAAAAIAiBgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU21xDZDGpPAAAAgAAAAIABAACAAQMEAQAAAAABASAAwusLAAAAABepFLf1+vQOPUClpFmx2zU18rcvqSHohwEEIgAgjCNTFzdDtZXftKB7crqOQuN5fadOh/59nXSX47ICiQMBBUdSIQMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3CECOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNSriIGAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zENkMak8AAACAAAAAgAMAAIAiBgMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3BDZDGpPAAAAgAAAAIACAACAAQMEAQAAAAAiAgOppMN/WZbTqiXbrGtXCvBlA5RJKUJGCzVHU+2e7KWHcRDZDGpPAAAAgAAAAIAEAACAACICAn9jmXV9Lv9VoTatAsaEsYOLZVbl8bazQoKpS2tQBRCWENkMak8AAACAAAAAgAUAAIAA\",\n+            \"result\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU210cwRAIgYxqYn+c4qSrQGYYCMxLBkhT+KAKznly8GsNniAbGksMCIDnbbDh70mdxbf2z1NjaULjoXSEzJrp8faqkwM5B65IjAQEDBAEAAAABBEdSIQKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfyEC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtdSriIGApWDvzmuCmCXR60Zmt3WNPphCFWdbFzTm0whg/GrluB/ENkMak8AAACAAAAAgAAAAIAiBgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU21xDZDGpPAAAAgAAAAIABAACAAAEBIADC6wsAAAAAF6kUt/X69A49QKWkWbHbNTXyty+pIeiHIgICOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNHMEQCIGX0W6WZi1mif/4ae+0BavHx+Q1Us6qPdFCqX1aiUQO9AiB/ckcDrR7blmgLKEtW1P/LiPf7dZ6rvgiqMPKbhROD0gEBAwQBAAAAAQQiACCMI1MXN0O1ld+0oHtyuo5C43l9p06H/n2ddJfjsgKJAwEFR1IhAwidwQx6xttU+RMpr2FzM9s4jOrQwjH3IzedG5kDCwLcIQI63ZBPPW3PWd25BrDe4jUpt/+57VDl6GFRkmhgIh8Oc1KuIgYCOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnMQ2QxqTwAAAIAAAACAAwAAgCIGAwidwQx6xttU+RMpr2FzM9s4jOrQwjH3IzedG5kDCwLcENkMak8AAACAAAAAgAIAAIAAIgIDqaTDf1mW06ol26xrVwrwZQOUSSlCRgs1R1Ptnuylh3EQ2QxqTwAAAIAAAACABAAAgAAiAgJ/Y5l1fS7/VaE2rQLGhLGDi2VW5fG2s0KCqUtrUAUQlhDZDGpPAAAAgAAAAIAFAACAAA==\"\n+        },\n+        {\n+            \"privkeys\" : [\n+                \"cT7J9YpCwY3AVRFSjN6ukeEeWY6mhpbJPxRaDaP5QTdygQRxP9Au\",\n+                \"cNBc3SWUip9PPm1GjRoLEJT6T41iNzCYtD7qro84FMnM5zEqeJsE\"\n+            ],\n+            \"psbt\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAABBEdSIQKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfyEC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtdSriIGApWDvzmuCmCXR60Zmt3WNPphCFWdbFzTm0whg/GrluB/ENkMak8AAACAAAAAgAAAAIAiBgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU21xDZDGpPAAAAgAAAAIABAACAAQMEAQAAAAABASAAwusLAAAAABepFLf1+vQOPUClpFmx2zU18rcvqSHohwEEIgAgjCNTFzdDtZXftKB7crqOQuN5fadOh/59nXSX47ICiQMBBUdSIQMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3CECOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNSriIGAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zENkMak8AAACAAAAAgAMAAIAiBgMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3BDZDGpPAAAAgAAAAIACAACAAQMEAQAAAAAiAgOppMN/WZbTqiXbrGtXCvBlA5RJKUJGCzVHU+2e7KWHcRDZDGpPAAAAgAAAAIAEAACAACICAn9jmXV9Lv9VoTatAsaEsYOLZVbl8bazQoKpS2tQBRCWENkMak8AAACAAAAAgAUAAIAA\",\n+            \"result\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU210cwRAIgYxqYn+c4qSrQGYYCMxLBkhT+KAKznly8GsNniAbGksMCIDnbbDh70mdxbf2z1NjaULjoXSEzJrp8faqkwM5B65IjAQEDBAEAAAABBEdSIQKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfyEC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtdSriIGApWDvzmuCmCXR60Zmt3WNPphCFWdbFzTm0whg/GrluB/ENkMak8AAACAAAAAgAAAAIAiBgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU21xDZDGpPAAAAgAAAAIABAACAAAEBIADC6wsAAAAAF6kUt/X69A49QKWkWbHbNTXyty+pIeiHIgICOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNHMEQCIGX0W6WZi1mif/4ae+0BavHx+Q1Us6qPdFCqX1aiUQO9AiB/ckcDrR7blmgLKEtW1P/LiPf7dZ6rvgiqMPKbhROD0gEBAwQBAAAAAQQiACCMI1MXN0O1ld+0oHtyuo5C43l9p06H/n2ddJfjsgKJAwEFR1IhAwidwQx6xttU+RMpr2FzM9s4jOrQwjH3IzedG5kDCwLcIQI63ZBPPW3PWd25BrDe4jUpt/+57VDl6GFRkmhgIh8Oc1KuIgYCOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnMQ2QxqTwAAAIAAAACAAwAAgCIGAwidwQx6xttU+RMpr2FzM9s4jOrQwjH3IzedG5kDCwLcENkMak8AAACAAAAAgAIAAIAAIgIDqaTDf1mW06ol26xrVwrwZQOUSSlCRgs1R1Ptnuylh3EQ2QxqTwAAAIAAAACABAAAgAAiAgJ/Y5l1fS7/VaE2rQLGhLGDi2VW5fG2s0KCqUtrUAUQlhDZDGpPAAAAgAAAAIAFAACAAA==\"\n+        },\n+        {\n+            \"privkeys\" : [\n+                \"cNBc3SWUip9PPm1GjRoLEJT6T41iNzCYtD7qro84FMnM5zEqeJsE\"\n+            ],\n+            \"psbt\" : \"cHNidP8BAKACAAAAAqsJSaCMWvfEm4IS9Bfi8Vqz9cM9zxU4IagTn4d6W3vkAAAAAAD+////qwlJoIxa98SbghL0F+LxWrP1wz3PFTghqBOfh3pbe+QBAAAAAP7///8CYDvqCwAAAAAZdqkUdopAu9dAy+gdmI5x3ipNXHE5ax2IrI4kAAAAAAAAGXapFG9GILVT+glechue4O/p+gOcykWXiKwAAAAAAAEBItPf9QUAAAAAGXapFNSO0xELlAFMsRS9Mtb00GbcdCVriKwAAQEgAOH1BQAAAAAXqRQ1RebjO4MsRwUPJNPuuTycA5SLx4cBBBYAFIXRNTfy4mVAWjTbr6nj3aAfuCMIACICAurVlmh8qAYEPtw94RbN8p1eklfBls0FXPaYyNAr8k6ZELSmumcAAACAAAAAgAIAAIAAIgIDlPYr6d8ZlSxVh3aK63aYBhrSxKJciU9H2MFitNchPQUQtKa6ZwAAAIABAACAAgAAgAA=\",\n+            \"result\" : \"cHNidP8BAKACAAAAAqsJSaCMWvfEm4IS9Bfi8Vqz9cM9zxU4IagTn4d6W3vkAAAAAAD+////qwlJoIxa98SbghL0F+LxWrP1wz3PFTghqBOfh3pbe+QBAAAAAP7///8CYDvqCwAAAAAZdqkUdopAu9dAy+gdmI5x3ipNXHE5ax2IrI4kAAAAAAAAGXapFG9GILVT+glechue4O/p+gOcykWXiKwAAAAAAAEBItPf9QUAAAAAGXapFNSO0xELlAFMsRS9Mtb00GbcdCVriKwAAQEgAOH1BQAAAAAXqRQ1RebjO4MsRwUPJNPuuTycA5SLx4cBBBYAFIXRNTfy4mVAWjTbr6nj3aAfuCMIACICAurVlmh8qAYEPtw94RbN8p1eklfBls0FXPaYyNAr8k6ZELSmumcAAACAAAAAgAIAAIAAIgIDlPYr6d8ZlSxVh3aK63aYBhrSxKJciU9H2MFitNchPQUQtKa6ZwAAAIABAACAAgAAgAA=\"\n+        },\n+        {\n+            \"privkeys\" : [\n+                \"cT7J9YpCwY3AVRFSjN6ukeEeWY6mhpbJPxRaDaP5QTdygQRxP9Au\",\n+                \"cNBc3SWUip9PPm1GjRoLEJT6T41iNzCYtD7qro84FMnM5zEqeJsE\"\n+            ],\n+            \"psbt\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU210gwRQIhAPYQOLMI3B2oZaNIUnRvAVdyk0IIxtJEVDk82ZvfIhd3AiAFbmdaZ1ptCgK4WxTl4pB02KJam1dgvqKBb2YZEKAG6gEBAwQBAAAAAQRHUiEClYO/Oa4KYJdHrRma3dY0+mEIVZ1sXNObTCGD8auW4H8hAtq2H/SaFNtqfQKwzR+7ePxLGDErW05U2uTbovv+9TbXUq8iBgKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfxDZDGpPAAAAgAAAAIAAAACAIgYC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtcQ2QxqTwAAAIAAAACAAQAAgAABASAAwusLAAAAABepFLf1+vQOPUClpFmx2zU18rcvqSHohyICAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zRzBEAiBl9FulmYtZon/+GnvtAWrx8fkNVLOqj3RQql9WolEDvQIgf3JHA60e25ZoCyhLVtT/y4j3+3Weq74IqjDym4UTg9IBAQMEAQAAAAEEIgAgjCNTFzdDtZXftKB7crqOQuN5fadOh/59nXSX47ICiQMBBUdSIQMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3CECOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNSriIGAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zENkMak8AAACAAAAAgAMAAIAiBgMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3BDZDGpPAAAAgAAAAIACAACAACICA6mkw39ZltOqJdusa1cK8GUDlEkpQkYLNUdT7Z7spYdxENkMak8AAACAAAAAgAQAAIAAIgICf2OZdX0u/1WhNq0CxoSxg4tlVuXxtrNCgqlLa1AFEJYQ2QxqTwAAAIAAAACABQAAgAA=\",\n+            \"result\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU210gwRQIhAPYQOLMI3B2oZaNIUnRvAVdyk0IIxtJEVDk82ZvfIhd3AiAFbmdaZ1ptCgK4WxTl4pB02KJam1dgvqKBb2YZEKAG6gEBAwQBAAAAAQRHUiEClYO/Oa4KYJdHrRma3dY0+mEIVZ1sXNObTCGD8auW4H8hAtq2H/SaFNtqfQKwzR+7ePxLGDErW05U2uTbovv+9TbXUq8iBgKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfxDZDGpPAAAAgAAAAIAAAACAIgYC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtcQ2QxqTwAAAIAAAACAAQAAgAABASAAwusLAAAAABepFLf1+vQOPUClpFmx2zU18rcvqSHohyICAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zRzBEAiBl9FulmYtZon/+GnvtAWrx8fkNVLOqj3RQql9WolEDvQIgf3JHA60e25ZoCyhLVtT/y4j3+3Weq74IqjDym4UTg9IBAQMEAQAAAAEEIgAgjCNTFzdDtZXftKB7crqOQuN5fadOh/59nXSX47ICiQMBBUdSIQMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3CECOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNSriIGAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zENkMak8AAACAAAAAgAMAAIAiBgMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3BDZDGpPAAAAgAAAAIACAACAACICA6mkw39ZltOqJdusa1cK8GUDlEkpQkYLNUdT7Z7spYdxENkMak8AAACAAAAAgAQAAIAAIgICf2OZdX0u/1WhNq0CxoSxg4tlVuXxtrNCgqlLa1AFEJYQ2QxqTwAAAIAAAACABQAAgAA=\"\n+        },\n+        {\n+            \"privkeys\" : [\n+                \"cT7J9YpCwY3AVRFSjN6ukeEeWY6mhpbJPxRaDaP5QTdygQRxP9Au\",\n+                \"cNBc3SWUip9PPm1GjRoLEJT6T41iNzCYtD7qro84FMnM5zEqeJsE\"\n+            ],\n+            \"psbt\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU210gwRQIhAPYQOLMI3B2oZaNIUnRvAVdyk0IIxtJEVDk82ZvfIhd3AiAFbmdaZ1ptCgK4WxTl4pB02KJam1dgvqKBb2YZEKAG6gEBAwQBAAAAAQRHUiEClYO/Oa4KYJdHrRma3dY0+mEIVZ1sXNObTCGD8auW4H8hAtq2H/SaFNtqfQKwzR+7ePxLGDErW05U2uTbovv+9TbXUq4iBgKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfxDZDGpPAAAAgAAAAIAAAACAIgYC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtcQ2QxqTwAAAIAAAACAAQAAgAABASAAwusLAAAAABepFLf1+vQOPUClpFmx2zU18rcvqSHohyICAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zRzBEAiBl9FulmYtZon/+GnvtAWrx8fkNVLOqj3RQql9WolEDvQIgf3JHA60e25ZoCyhLVtT/y4j3+3Weq74IqjDym4UTg9IBAQMEAQAAAAEEIgAgjCNTFzdDtZXftKB7crqOQuN5fadOh/59nXSX47ICiQABBUdSIQMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3CECOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNSriIGAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zENkMak8AAACAAAAAgAMAAIAiBgMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3BDZDGpPAAAAgAAAAIACAACAACICA6mkw39ZltOqJdusa1cK8GUDlEkpQkYLNUdT7Z7spYdxENkMak8AAACAAAAAgAQAAIAAIgICf2OZdX0u/1WhNq0CxoSxg4tlVuXxtrNCgqlLa1AFEJYQ2QxqTwAAAIAAAACABQAAgAA=\",\n+            \"result\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU210gwRQIhAPYQOLMI3B2oZaNIUnRvAVdyk0IIxtJEVDk82ZvfIhd3AiAFbmdaZ1ptCgK4WxTl4pB02KJam1dgvqKBb2YZEKAG6gEBAwQBAAAAAQRHUiEClYO/Oa4KYJdHrRma3dY0+mEIVZ1sXNObTCGD8auW4H8hAtq2H/SaFNtqfQKwzR+7ePxLGDErW05U2uTbovv+9TbXUq4iBgKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfxDZDGpPAAAAgAAAAIAAAACAIgYC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtcQ2QxqTwAAAIAAAACAAQAAgAABASAAwusLAAAAABepFLf1+vQOPUClpFmx2zU18rcvqSHohyICAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zRzBEAiBl9FulmYtZon/+GnvtAWrx8fkNVLOqj3RQql9WolEDvQIgf3JHA60e25ZoCyhLVtT/y4j3+3Weq74IqjDym4UTg9IBAQMEAQAAAAEEIgAgjCNTFzdDtZXftKB7crqOQuN5fadOh/59nXSX47ICiQABBUdSIQMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3CECOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNSriIGAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zENkMak8AAACAAAAAgAMAAIAiBgMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3BDZDGpPAAAAgAAAAIACAACAACICA6mkw39ZltOqJdusa1cK8GUDlEkpQkYLNUdT7Z7spYdxENkMak8AAACAAAAAgAQAAIAAIgICf2OZdX0u/1WhNq0CxoSxg4tlVuXxtrNCgqlLa1AFEJYQ2QxqTwAAAIAAAACABQAAgAA=\"\n+        },\n+        {\n+            \"privkeys\" : [\n+                \"cT7J9YpCwY3AVRFSjN6ukeEeWY6mhpbJPxRaDaP5QTdygQRxP9Au\",\n+                \"cNBc3SWUip9PPm1GjRoLEJT6T41iNzCYtD7qro84FMnM5zEqeJsE\"\n+            ],\n+            \"psbt\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU210gwRQIhAPYQOLMI3B2oZaNIUnRvAVdyk0IIxtJEVDk82ZvfIhd3AiAFbmdaZ1ptCgK4WxTl4pB02KJam1dgvqKBb2YZEKAG6gEBAwQBAAAAAQRHUiEClYO/Oa4KYJdHrRma3dY0+mEIVZ1sXNObTCGD8auW4H8hAtq2H/SaFNtqfQKwzR+7ePxLGDErW05U2uTbovv+9TbXUq4iBgKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfxDZDGpPAAAAgAAAAIAAAACAIgYC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtcQ2QxqTwAAAIAAAACAAQAAgAABASAAwusLAAAAABepFLf1+vQOPUClpFmx2zU18rcvqSHohyICAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zRzBEAiBl9FulmYtZon/+GnvtAWrx8fkNVLOqj3RQql9WolEDvQIgf3JHA60e25ZoCyhLVtT/y4j3+3Weq74IqjDym4UTg9IBAQMEAQAAAAEEIgAgjCNTFzdDtZXftKB7crqOQuN5fadOh/59nXSX47ICiQMBBUdSIQMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3CECOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNSrSIGAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zENkMak8AAACAAAAAgAMAAIAiBgMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3BDZDGpPAAAAgAAAAIACAACAACICA6mkw39ZltOqJdusa1cK8GUDlEkpQkYLNUdT7Z7spYdxENkMak8AAACAAAAAgAQAAIAAIgICf2OZdX0u/1WhNq0CxoSxg4tlVuXxtrNCgqlLa1AFEJYQ2QxqTwAAAIAAAACABQAAgAA=\",\n+            \"result\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU210gwRQIhAPYQOLMI3B2oZaNIUnRvAVdyk0IIxtJEVDk82ZvfIhd3AiAFbmdaZ1ptCgK4WxTl4pB02KJam1dgvqKBb2YZEKAG6gEBAwQBAAAAAQRHUiEClYO/Oa4KYJdHrRma3dY0+mEIVZ1sXNObTCGD8auW4H8hAtq2H/SaFNtqfQKwzR+7ePxLGDErW05U2uTbovv+9TbXUq4iBgKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfxDZDGpPAAAAgAAAAIAAAACAIgYC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtcQ2QxqTwAAAIAAAACAAQAAgAABASAAwusLAAAAABepFLf1+vQOPUClpFmx2zU18rcvqSHohyICAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zRzBEAiBl9FulmYtZon/+GnvtAWrx8fkNVLOqj3RQql9WolEDvQIgf3JHA60e25ZoCyhLVtT/y4j3+3Weq74IqjDym4UTg9IBAQMEAQAAAAEEIgAgjCNTFzdDtZXftKB7crqOQuN5fadOh/59nXSX47ICiQMBBUdSIQMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3CECOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNSrSIGAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zENkMak8AAACAAAAAgAMAAIAiBgMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3BDZDGpPAAAAgAAAAIACAACAACICA6mkw39ZltOqJdusa1cK8GUDlEkpQkYLNUdT7Z7spYdxENkMak8AAACAAAAAgAQAAIAAIgICf2OZdX0u/1WhNq0CxoSxg4tlVuXxtrNCgqlLa1AFEJYQ2QxqTwAAAIAAAACABQAAgAA=\"\n         }\n     ],\n     \"combiner\" : [\n         {\n             \"combine\" : [\n                 \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgf0cwRAIgdAGK1BgAl7hzMjwAFXILNoTMgSOJEEjn282bVa1nnJkCIHPTabdA4+tT3O+jOCPIBwUUylWn3ZVE8VfBZ5EyYRGMAQEDBAEAAAABBEdSIQKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfyEC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtdSriIGApWDvzmuCmCXR60Zmt3WNPphCFWdbFzTm0whg/GrluB/ENkMak8AAACAAAAAgAAAAIAiBgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU21xDZDGpPAAAAgAAAAIABAACAAAEBIADC6wsAAAAAF6kUt/X69A49QKWkWbHbNTXyty+pIeiHIgIDCJ3BDHrG21T5EymvYXMz2ziM6tDCMfcjN50bmQMLAtxHMEQCIGLrelVhB6fHP0WsSrWh3d9vcHX7EnWWmn84Pv/3hLyyAiAMBdu3Rw2/LwhVfdNWxzJcHtMJE+mWzThAlF2xIijaXwEBAwQBAAAAAQQiACCMI1MXN0O1ld+0oHtyuo5C43l9p06H/n2ddJfjsgKJAwEFR1IhAwidwQx6xttU+RMpr2FzM9s4jOrQwjH3IzedG5kDCwLcIQI63ZBPPW3PWd25BrDe4jUpt/+57VDl6GFRkmhgIh8Oc1KuIgYCOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnMQ2QxqTwAAAIAAAACAAwAAgCIGAwidwQx6xttU+RMpr2FzM9s4jOrQwjH3IzedG5kDCwLcENkMak8AAACAAAAAgAIAAIAAIgIDqaTDf1mW06ol26xrVwrwZQOUSSlCRgs1R1Ptnuylh3EQ2QxqTwAAAIAAAACABAAAgAAiAgJ/Y5l1fS7/VaE2rQLGhLGDi2VW5fG2s0KCqUtrUAUQlhDZDGpPAAAAgAAAAIAFAACAAA==\",\n-                \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU210gwRQIhAPYQOLMI3B2oZaNIUnRvAVdyk0IIxtJEVDk82ZvfIhd3AiAFbmdaZ1ptCgK4WxTl4pB02KJam1dgvqKBb2YZEKAG6gEBAwQBAAAAAQRHUiEClYO/Oa4KYJdHrRma3dY0+mEIVZ1sXNObTCGD8auW4H8hAtq2H/SaFNtqfQKwzR+7ePxLGDErW05U2uTbovv+9TbXUq4iBgKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfxDZDGpPAAAAgAAAAIAAAACAIgYC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtcQ2QxqTwAAAIAAAACAAQAAgAABASAAwusLAAAAABepFLf1+vQOPUClpFmx2zU18rcvqSHohyICAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zRzBEAiBl9FulmYtZon/+GnvtAWrx8fkNVLOqj3RQql9WolEDvQIgf3JHA60e25ZoCyhLVtT/y4j3+3Weq74IqjDym4UTg9IBAQMEAQAAAAEEIgAgjCNTFzdDtZXftKB7crqOQuN5fadOh/59nXSX47ICiQMBBUdSIQMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3CECOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNSriIGAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zENkMak8AAACAAAAAgAMAAIAiBgMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3BDZDGpPAAAAgAAAAIACAACAACICA6mkw39ZltOqJdusa1cK8GUDlEkpQkYLNUdT7Z7spYdxENkMak8AAACAAAAAgAQAAIAAIgICf2OZdX0u/1WhNq0CxoSxg4tlVuXxtrNCgqlLa1AFEJYQ2QxqTwAAAIAAAACABQAAgAA=\"\n+                \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU210cwRAIgYxqYn+c4qSrQGYYCMxLBkhT+KAKznly8GsNniAbGksMCIDnbbDh70mdxbf2z1NjaULjoXSEzJrp8faqkwM5B65IjAQEDBAEAAAABBEdSIQKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfyEC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtdSriIGApWDvzmuCmCXR60Zmt3WNPphCFWdbFzTm0whg/GrluB/ENkMak8AAACAAAAAgAAAAIAiBgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU21xDZDGpPAAAAgAAAAIABAACAAAEBIADC6wsAAAAAF6kUt/X69A49QKWkWbHbNTXyty+pIeiHIgICOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNHMEQCIGX0W6WZi1mif/4ae+0BavHx+Q1Us6qPdFCqX1aiUQO9AiB/ckcDrR7blmgLKEtW1P/LiPf7dZ6rvgiqMPKbhROD0gEBAwQBAAAAAQQiACCMI1MXN0O1ld+0oHtyuo5C43l9p06H/n2ddJfjsgKJAwEFR1IhAwidwQx6xttU+RMpr2FzM9s4jOrQwjH3IzedG5kDCwLcIQI63ZBPPW3PWd25BrDe4jUpt/+57VDl6GFRkmhgIh8Oc1KuIgYCOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnMQ2QxqTwAAAIAAAACAAwAAgCIGAwidwQx6xttU+RMpr2FzM9s4jOrQwjH3IzedG5kDCwLcENkMak8AAACAAAAAgAIAAIAAIgIDqaTDf1mW06ol26xrVwrwZQOUSSlCRgs1R1Ptnuylh3EQ2QxqTwAAAIAAAACABAAAgAAiAgJ/Y5l1fS7/VaE2rQLGhLGDi2VW5fG2s0KCqUtrUAUQlhDZDGpPAAAAgAAAAIAFAACAAA==\"\n             ],\n-            \"result\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgf0cwRAIgdAGK1BgAl7hzMjwAFXILNoTMgSOJEEjn282bVa1nnJkCIHPTabdA4+tT3O+jOCPIBwUUylWn3ZVE8VfBZ5EyYRGMASICAtq2H/SaFNtqfQKwzR+7ePxLGDErW05U2uTbovv+9TbXSDBFAiEA9hA4swjcHahlo0hSdG8BV3KTQgjG0kRUOTzZm98iF3cCIAVuZ1pnWm0KArhbFOXikHTYolqbV2C+ooFvZhkQoAbqAQEDBAEAAAABBEdSIQKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfyEC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtdSriIGApWDvzmuCmCXR60Zmt3WNPphCFWdbFzTm0whg/GrluB/ENkMak8AAACAAAAAgAAAAIAiBgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU21xDZDGpPAAAAgAAAAIABAACAAAEBIADC6wsAAAAAF6kUt/X69A49QKWkWbHbNTXyty+pIeiHIgIDCJ3BDHrG21T5EymvYXMz2ziM6tDCMfcjN50bmQMLAtxHMEQCIGLrelVhB6fHP0WsSrWh3d9vcHX7EnWWmn84Pv/3hLyyAiAMBdu3Rw2/LwhVfdNWxzJcHtMJE+mWzThAlF2xIijaXwEiAgI63ZBPPW3PWd25BrDe4jUpt/+57VDl6GFRkmhgIh8Oc0cwRAIgZfRbpZmLWaJ//hp77QFq8fH5DVSzqo90UKpfVqJRA70CIH9yRwOtHtuWaAsoS1bU/8uI9/t1nqu+CKow8puFE4PSAQEDBAEAAAABBCIAIIwjUxc3Q7WV37Sge3K6jkLjeX2nTof+fZ10l+OyAokDAQVHUiEDCJ3BDHrG21T5EymvYXMz2ziM6tDCMfcjN50bmQMLAtwhAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zUq4iBgI63ZBPPW3PWd25BrDe4jUpt/+57VDl6GFRkmhgIh8OcxDZDGpPAAAAgAAAAIADAACAIgYDCJ3BDHrG21T5EymvYXMz2ziM6tDCMfcjN50bmQMLAtwQ2QxqTwAAAIAAAACAAgAAgAAiAgOppMN/WZbTqiXbrGtXCvBlA5RJKUJGCzVHU+2e7KWHcRDZDGpPAAAAgAAAAIAEAACAACICAn9jmXV9Lv9VoTatAsaEsYOLZVbl8bazQoKpS2tQBRCWENkMak8AAACAAAAAgAUAAIAA\"\n+            \"result\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgf0cwRAIgdAGK1BgAl7hzMjwAFXILNoTMgSOJEEjn282bVa1nnJkCIHPTabdA4+tT3O+jOCPIBwUUylWn3ZVE8VfBZ5EyYRGMASICAtq2H/SaFNtqfQKwzR+7ePxLGDErW05U2uTbovv+9TbXRzBEAiBjGpif5zipKtAZhgIzEsGSFP4oArOeXLwaw2eIBsaSwwIgOdtsOHvSZ3Ft/bPU2NpQuOhdITMmunx9qqTAzkHrkiMBAQMEAQAAAAEER1IhApWDvzmuCmCXR60Zmt3WNPphCFWdbFzTm0whg/GrluB/IQLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU211KuIgYClYO/Oa4KYJdHrRma3dY0+mEIVZ1sXNObTCGD8auW4H8Q2QxqTwAAAIAAAACAAAAAgCIGAtq2H/SaFNtqfQKwzR+7ePxLGDErW05U2uTbovv+9TbXENkMak8AAACAAAAAgAEAAIAAAQEgAMLrCwAAAAAXqRS39fr0Dj1ApaRZsds1NfK3L6kh6IciAgMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3EcwRAIgYut6VWEHp8c/RaxKtaHd329wdfsSdZaafzg+//eEvLICIAwF27dHDb8vCFV901bHMlwe0wkT6ZbNOECUXbEiKNpfASICAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zRzBEAiBl9FulmYtZon/+GnvtAWrx8fkNVLOqj3RQql9WolEDvQIgf3JHA60e25ZoCyhLVtT/y4j3+3Weq74IqjDym4UTg9IBAQMEAQAAAAEEIgAgjCNTFzdDtZXftKB7crqOQuN5fadOh/59nXSX47ICiQMBBUdSIQMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3CECOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNSriIGAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zENkMak8AAACAAAAAgAMAAIAiBgMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3BDZDGpPAAAAgAAAAIACAACAACICA6mkw39ZltOqJdusa1cK8GUDlEkpQkYLNUdT7Z7spYdxENkMak8AAACAAAAAgAQAAIAAIgICf2OZdX0u/1WhNq0CxoSxg4tlVuXxtrNCgqlLa1AFEJYQ2QxqTwAAAIAAAACABQAAgAA=\"\n         },\n         {\n             \"combine\" : ["
      },
      {
        "sha": "99c4131d616bf61b242406abd6f9f4ea19632173",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a2960f73eb0994a1f9a6c9f03b425c718434d53/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a2960f73eb0994a1f9a6c9f03b425c718434d53/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=4a2960f73eb0994a1f9a6c9f03b425c718434d53",
        "patch": "@@ -168,9 +168,11 @@ def run_test(self):\n \n         # Signer tests\n         for i, signer in enumerate(signers):\n+            self.nodes[2].createwallet(\"wallet{}\".format(i))\n+            wrpc = self.nodes[2].get_wallet_rpc(\"wallet{}\".format(i))\n             for key in signer['privkeys']:\n-                self.nodes[i].importprivkey(key)\n-            signed_tx = self.nodes[i].walletprocesspsbt(signer['psbt'])['psbt']\n+                wrpc.importprivkey(key)\n+            signed_tx = wrpc.walletprocesspsbt(signer['psbt'])['psbt']\n             assert_equal(signed_tx, signer['result'])\n \n         # Combiner test"
      }
    ]
  },
  {
    "sha": "3d827bee699abffe61d99099d9f7e813b4acc2a5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZDgyN2JlZTY5OWFiZmZlNjFkOTkwOTlkOWY3ZTgxM2I0YWNjMmE1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-08-16T10:02:09Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-08-16T10:02:23Z"
      },
      "message": "qt: Pre-rc1 translations update\n\nTree-SHA512: 11d0d6a23f47e428661b33fa175aa97cc6841452c0c55845fdb0a903a0b147cd6df65e8fdab8b98823bf411018d5d85006af8c2cf14597286e9e284764d15041",
      "tree": {
        "sha": "a3aa68d1ea062aff02be2eb62c9ecf78bdc81a10",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a3aa68d1ea062aff02be2eb62c9ecf78bdc81a10"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3d827bee699abffe61d99099d9f7e813b4acc2a5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJbdUuvAAoJEB5K7WKYbNJd6AkH/0cfyU1hhRw8Ka3fyB0HEnMl\nS1iSuL5xgaQq8iKEdflVVdlbHAUz/xQtfoiv7dr/+ywfQtyQssT9C3wNd2iufpy7\nwwLwHRC34NjImkBZsPL2esK4lvJ6mbV7AldV6ujXdyYWwq29Wfv0122UcN4OlYWL\n4Sll0r3nxhaDptqaXbHTVZ+4/5nAlNkqtBFmTGPrskKi9FgqMs/0Sabt4J5Jf283\n7DHkbttrFj3vJGj0cPDWIsIN/FOlg8sWXEGTE+xv4wQHWtL5lQxibOgJ8apahHpe\nUI9rg8vXM7g4BKZ8YcFLyAWePxI1fdeDycSk1NEZlcRKjjw3TrLgN3mn19qAIsE=\n=asz5\n-----END PGP SIGNATURE-----",
        "payload": "tree a3aa68d1ea062aff02be2eb62c9ecf78bdc81a10\nparent 4a2960f73eb0994a1f9a6c9f03b425c718434d53\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1534413729 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1534413743 +0200\n\nqt: Pre-rc1 translations update\n\nTree-SHA512: 11d0d6a23f47e428661b33fa175aa97cc6841452c0c55845fdb0a903a0b147cd6df65e8fdab8b98823bf411018d5d85006af8c2cf14597286e9e284764d15041\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d827bee699abffe61d99099d9f7e813b4acc2a5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3d827bee699abffe61d99099d9f7e813b4acc2a5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d827bee699abffe61d99099d9f7e813b4acc2a5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4a2960f73eb0994a1f9a6c9f03b425c718434d53",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a2960f73eb0994a1f9a6c9f03b425c718434d53",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4a2960f73eb0994a1f9a6c9f03b425c718434d53"
      }
    ],
    "stats": {
      "total": 188,
      "additions": 116,
      "deletions": 72
    },
    "files": [
      {
        "sha": "c7a2422c8a6b811b33870a30699bf36ea857373d",
        "filename": "src/qt/locale/bitcoin_da.ts",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_da.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_da.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_da.ts?ref=3d827bee699abffe61d99099d9f7e813b4acc2a5",
        "patch": "@@ -3199,6 +3199,10 @@ Note: Siden gebyret er kalkuleret p\u00e5 en per-byte basis, et gebyr p\u00e5 \"100 satos\n         <source>Error reading %s! All keys read correctly, but transaction data or address book entries might be missing or incorrect.</source>\n         <translation>Fejl under l\u00e6sning af %s! Alle n\u00f8gler blev l\u00e6st korrekt, men transaktionsdata eller indgange i adressebogen kan mangle eller v\u00e6re ukorrekte.</translation>\n     </message>\n+    <message>\n+        <source>Group outputs by address, selecting all or none, instead of selecting on a per-output basis. Privacy is improved as an address is only used once (unless someone sends to it after spending from it), but may result in slightly higher fees as suboptimal coin selection may result due to the added limitation (default: %u)</source>\n+        <translation>Grupp\u00e9r output efter adresse og v\u00e6lg alle eller ingen, i stedet for at v\u00e6lge p\u00e5 per-output-basis. H\u00f8jere sikring af privatliv, da en adresse kun bruges \u00e9n gang (med mindre nogen sender til en adresse efter den er brugt), men kan resultere i en anelse h\u00f8jere gebyrer, da ikke-optimal valg af output-adresser kan forekomme p\u00e5 grund af den tilf\u00f8jede begr\u00e6nsning (standard: %u)</translation>\n+    </message>\n     <message>\n         <source>Please check that your computer's date and time are correct! If your clock is wrong, %s will not work properly.</source>\n         <translation>Unders\u00f8g venligst at din computers dato og klokkeslet er korrekt indstillet! Hvis der er fejl i disse, vil %s ikke fungere korrekt.</translation>\n@@ -3339,6 +3343,10 @@ Note: Siden gebyret er kalkuleret p\u00e5 en per-byte basis, et gebyr p\u00e5 \"100 satos\n         <source>Invalid amount for -fallbackfee=&lt;amount&gt;: '%s'</source>\n         <translation>Ugyldigt bel\u00f8b for -fallbackfee=&lt;bel\u00f8b&gt;: \u201c%s\u201d</translation>\n     </message>\n+    <message>\n+        <source>Specified blocks directory \"%s\" does not exist.</source>\n+        <translation>Angivet blokmappe \u201c%s\u201d eksisterer ikke.</translation>\n+    </message>\n     <message>\n         <source>Upgrading txindex database</source>\n         <translation>Opgraderer txindex database</translation>\n@@ -3479,12 +3487,6 @@ Note: Siden gebyret er kalkuleret p\u00e5 en per-byte basis, et gebyr p\u00e5 \"100 satos\n         <source>Signing transaction failed</source>\n         <translation>Signering af transaktion mislykkedes</translation>\n     </message>\n-    <message>\n-        <source>Specified blocks directory \"%s\" does not exist.\n-</source>\n-        <translation>Specificeret blokke mappe \"%s\" eksisterer ikke. \n-</translation>\n-    </message>\n     <message>\n         <source>The transaction amount is too small to pay the fee</source>\n         <translation>Transaktionsbel\u00f8bet er for lille til at betale gebyret</translation>"
      },
      {
        "sha": "06c1a54d40b5efe4c3b14acf17801d905e24b7b6",
        "filename": "src/qt/locale/bitcoin_de.ts",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_de.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_de.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_de.ts?ref=3d827bee699abffe61d99099d9f7e813b4acc2a5",
        "patch": "@@ -3336,6 +3336,10 @@ Hinweis: Eine Geb\u00fchr von \"100 Satoshis pro kB\" bei einer Gr\u00f6\u00dfe der Transaktio\n         <source>Invalid amount for -fallbackfee=&lt;amount&gt;: '%s'</source>\n         <translation>Ung\u00fcltiger Betrag f\u00fcr -fallbackfee=&lt;amount&gt;: '%s'</translation>\n     </message>\n+    <message>\n+        <source>Specified blocks directory \"%s\" does not exist.</source>\n+        <translation>Angegebener Bl\u00f6cke-Ordner \"%s\" existiert nicht.</translation>\n+    </message>\n     <message>\n         <source>Upgrading txindex database</source>\n         <translation>Erneuern der txindex Datenbank</translation>\n@@ -3484,12 +3488,6 @@ Hinweis: Eine Geb\u00fchr von \"100 Satoshis pro kB\" bei einer Gr\u00f6\u00dfe der Transaktio\n         <source>Specified -walletdir \"%s\" is not a directory</source>\n         <translation>Angegebenes Verzeichniss \"%s\" ist kein Verzeichniss</translation>\n     </message>\n-    <message>\n-        <source>Specified blocks directory \"%s\" does not exist.\n-</source>\n-        <translation>Angegebenes 'blocks'-Verzeichnis \"%s\" existiert nicht.\n-</translation>\n-    </message>\n     <message>\n         <source>The transaction amount is too small to pay the fee</source>\n         <translation>Der Transaktionsbetrag ist zu niedrig, um die Geb\u00fchr zu bezahlen.</translation>"
      },
      {
        "sha": "ef4ac2d4aa797de872a17cb32b0daf700e674304",
        "filename": "src/qt/locale/bitcoin_el_GR.ts",
        "status": "modified",
        "additions": 37,
        "deletions": 1,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_el_GR.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_el_GR.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_el_GR.ts?ref=3d827bee699abffe61d99099d9f7e813b4acc2a5",
        "patch": "@@ -610,6 +610,14 @@\n         <source>Copy transaction ID</source>\n         <translation>\u0391\u03bd\u03c4\u03b9\u03b3\u03c1\u03b1\u03c6\u03ae \u03c4\u03b1\u03c5\u03c4\u03cc\u03c4\u03b7\u03c4\u03b1\u03c2 \u03c3\u03c5\u03bd\u03b1\u03bb\u03bb\u03b1\u03b3\u03ae\u03c2</translation>\n     </message>\n+    <message>\n+        <source>Copy quantity</source>\n+        <translation>\u0391\u03bd\u03c4\u03b9\u03b3\u03c1\u03b1\u03c6\u03ae \u03c0\u03bf\u03c3\u03cc\u03c4\u03b7\u03c4\u03b1\u03c2</translation>\n+    </message>\n+    <message>\n+        <source>Copy fee</source>\n+        <translation>\u0391\u03bd\u03c4\u03b9\u03b3\u03c1\u03b1\u03c6\u03ae \u03c4\u03b5\u03bb\u03ce\u03bd</translation>\n+    </message>\n     <message>\n         <source>yes</source>\n         <translation>\u03bd\u03b1\u03b9</translation>\n@@ -661,7 +669,27 @@\n         <source>Edit sending address</source>\n         <translation> \u0395\u03c0\u03b5\u03be\u03b5\u03c1\u03b3\u03b1\u03c3\u03af\u03b1 \u03b4\u03b9\u03b5\u03cd\u03b8\u03c5\u03bd\u03c3\u03b7\u03c2 \u03b1\u03c0\u03bf\u03c3\u03c4\u03bf\u03bb\u03ae\u03c2</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>The entered address \"%1\" is not a valid Bitcoin address.</source>\n+        <translation>\u0397 \u03b4\u03b9\u03b5\u03cd\u03b8\u03c5\u03bd\u03c3\u03b7 \"%1\" \u03b4\u03b5\u03bd \u03b5\u03af\u03bd\u03b1\u03b9 \u03ad\u03b3\u03ba\u03c5\u03c1\u03b7 Bitcoin \u03b4\u03b9\u03b5\u03cd\u03b8\u03c5\u03bd\u03c3\u03b7.</translation>\n+    </message>\n+    <message>\n+        <source>Address \"%1\" already exists as a receiving address with label \"%2\" and so cannot be added as a sending address.</source>\n+        <translation>\u0397 \u03b4\u03b9\u03b5\u03cd\u03b8\u03c5\u03bd\u03c3\u03b7 \"%1\"  \u03c5\u03c0\u03ac\u03c1\u03c7\u03b5\u03b9 \u03ae\u03b4\u03b7 \u03c9\u03c2 \u03b4\u03b9\u03b5\u03cd\u03b8\u03c5\u03bd\u03c3\u03b7\u03c2 \u03bb\u03ae\u03c8\u03b7\u03c2 \u03bc\u03b5 \u03b5\u03c4\u03b9\u03ba\u03ad\u03c4\u03b1 \"%2\" \u03ba\u03b1\u03b9 \u03b3\u03b9\u03b1\u03c5\u03c4\u03cc \u03c4\u03bf\u03bd \u03bb\u03cc\u03b3\u03bf \u03b4\u03b5\u03bd \u03bc\u03c0\u03bf\u03c1\u03b5\u03af \u03bd\u03b1 \u03c0\u03c1\u03bf\u03c3\u03c4\u03b5\u03b8\u03b5\u03af \u03c9\u03c2 \u03b4\u03b9\u03b5\u03cd\u03b8\u03c5\u03bd\u03c3\u03b7 \u03b1\u03c0\u03bf\u03c3\u03c4\u03bf\u03bb\u03ae\u03c2.</translation>\n+    </message>\n+    <message>\n+        <source>The entered address \"%1\" is already in the address book with label \"%2\".</source>\n+        <translation>\u0397 \u03b4\u03b9\u03b5\u03cd\u03b8\u03c5\u03bd\u03c3\u03b7 \"%1\" \u03b2\u03c1\u03af\u03c3\u03ba\u03b5\u03c4\u03b1\u03b9 \u03ae\u03b4\u03b7 \u03c3\u03c4\u03bf \u03b2\u03b9\u03b2\u03bb\u03af\u03bf \u03b4\u03b9\u03b5\u03c5\u03b8\u03cd\u03bd\u03c3\u03b5\u03c9\u03bd \u03bc\u03b5 \u03b5\u03c4\u03b9\u03ba\u03ad\u03c4\u03b1 \"%2\".</translation>\n+    </message>\n+    <message>\n+        <source>Could not unlock wallet.</source>\n+        <translation>\u0394\u03b5\u03bd \u03b5\u03af\u03bd\u03b1\u03b9 \u03b4\u03c5\u03bd\u03b1\u03c4\u03cc \u03c4\u03bf \u03be\u03b5\u03ba\u03bb\u03b5\u03af\u03b4\u03c9\u03bc\u03b1 \u03c4\u03bf\u03c5 \u03c0\u03bf\u03c1\u03c4\u03bf\u03c6\u03bf\u03bb\u03b9\u03bf\u03cd.</translation>\n+    </message>\n+    <message>\n+        <source>New key generation failed.</source>\n+        <translation>\u0397 \u03b4\u03b7\u03bc\u03b9\u03bf\u03c5\u03c1\u03b3\u03af\u03b1 \u03bd\u03ad\u03bf\u03c5 \u03ba\u03bb\u03b5\u03b9\u03b4\u03b9\u03bf\u03cd \u03b1\u03c0\u03ad\u03c4\u03c5\u03c7\u03b5.</translation>\n+    </message>\n+</context>\n <context>\n     <name>FreespaceChecker</name>\n     <message>\n@@ -1488,10 +1516,18 @@\n         <source>S&amp;end</source>\n         <translation>\u0391\u03c0\u03bf\u03c3\u03c4\u03bf\u03bb\u03ae</translation>\n     </message>\n+    <message>\n+        <source>Copy quantity</source>\n+        <translation>\u0391\u03bd\u03c4\u03b9\u03b3\u03c1\u03b1\u03c6\u03ae \u03c0\u03bf\u03c3\u03cc\u03c4\u03b7\u03c4\u03b1\u03c2</translation>\n+    </message>\n     <message>\n         <source>Copy amount</source>\n         <translation>\u0391\u03bd\u03c4\u03b9\u03b3\u03c1\u03b1\u03c6\u03ae \u03c0\u03bf\u03c3\u03bf\u03cd</translation>\n     </message>\n+    <message>\n+        <source>Copy fee</source>\n+        <translation>\u0391\u03bd\u03c4\u03b9\u03b3\u03c1\u03b1\u03c6\u03ae \u03c4\u03b5\u03bb\u03ce\u03bd</translation>\n+    </message>\n     <message>\n         <source>Transaction fee</source>\n         <translation>\u039a\u03cc\u03c3\u03c4\u03bf\u03c2 \u03c3\u03c5\u03bd\u03b1\u03bb\u03bb\u03b1\u03b3\u03ae\u03c2</translation>"
      },
      {
        "sha": "f55a7ce9c4cacdb1deb77e4de134fe845154187c",
        "filename": "src/qt/locale/bitcoin_es.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_es.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_es.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_es.ts?ref=3d827bee699abffe61d99099d9f7e813b4acc2a5",
        "patch": "@@ -3490,12 +3490,6 @@ Nota: Dado que la comisi\u00f3n se calcula por byte, una comisi\u00f3n de \"100 satoshis\n         <source>Specified -walletdir \"%s\" is not a directory</source>\n         <translation>El -walletdir \"%s\" indicado no es un directorio</translation>\n     </message>\n-    <message>\n-        <source>Specified blocks directory \"%s\" does not exist.\n-</source>\n-        <translation>El directorio de bloques especificado \"%s\" no existe.\n-</translation>\n-    </message>\n     <message>\n         <source>The transaction amount is too small to pay the fee</source>\n         <translation>Cantidad de la transacci\u00f3n demasiado peque\u00f1a para pagar la comisi\u00f3n</translation>"
      },
      {
        "sha": "8df48710252abad55642e7815094f1adad61c133",
        "filename": "src/qt/locale/bitcoin_fi.ts",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_fi.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_fi.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_fi.ts?ref=3d827bee699abffe61d99099d9f7e813b4acc2a5",
        "patch": "@@ -325,6 +325,14 @@\n         <source>Open &amp;URI...</source>\n         <translation>Avaa &amp;URI...</translation>\n     </message>\n+    <message>\n+        <source>Wallet:</source>\n+        <translation>Lompakko:</translation>\n+    </message>\n+    <message>\n+        <source>default wallet</source>\n+        <translation>oletuslompakko</translation>\n+    </message>\n     <message>\n         <source>Click to disable network activity.</source>\n         <translation>Paina poistaaksesi verkkoyhteysilmaisin k\u00e4yt\u00f6st\u00e4.</translation>\n@@ -345,6 +353,10 @@\n         <source>Reindexing blocks on disk...</source>\n         <translation>Ladataan lohkoindeksi\u00e4...</translation>\n     </message>\n+    <message>\n+        <source>Proxy is &lt;b&gt;enabled&lt;/b&gt;: %1</source>\n+        <translation>V\u00e4lipalvelin on &lt;b&gt;k\u00e4yt\u00f6ss\u00e4&lt;/b&gt;: %1</translation>\n+    </message>\n     <message>\n         <source>Send coins to a Bitcoin address</source>\n         <translation>L\u00e4het\u00e4 kolikoita Bitcoin-osoitteeseen</translation>\n@@ -441,6 +453,10 @@\n         <source>&amp;Command-line options</source>\n         <translation>&amp;Komentorivin valinnat</translation>\n     </message>\n+    <message numerus=\"yes\">\n+        <source>%n active connection(s) to Bitcoin network</source>\n+        <translation><numerusform>%n aktiivinen yhteys Bitcoin-verkkoon</numerusform><numerusform>%n aktiivista yhteytt\u00e4 Bitcoin-verkkoon</numerusform></translation>\n+    </message>\n     <message>\n         <source>Indexing blocks on disk...</source>\n         <translation>Ladataan lohkoindeksi\u00e4...</translation>\n@@ -449,6 +465,10 @@\n         <source>Processing blocks on disk...</source>\n         <translation>K\u00e4sitell\u00e4\u00e4n lohkoja levyll\u00e4...</translation>\n     </message>\n+    <message numerus=\"yes\">\n+        <source>Processed %n block(s) of transaction history.</source>\n+        <translation><numerusform>K\u00e4sitelty %n lohko rahansiirtohistoriasta.</numerusform><numerusform>K\u00e4sitelty %n lohkoa rahansiirtohistoriasta.</numerusform></translation>\n+    </message>\n     <message>\n         <source>%1 behind</source>\n         <translation>%1 j\u00e4ljess\u00e4</translation>\n@@ -1708,6 +1728,10 @@\n         <source>&amp;Unban</source>\n         <translation>&amp;Poista esto</translation>\n     </message>\n+    <message>\n+        <source>default wallet</source>\n+        <translation>oletuslompakko</translation>\n+    </message>\n     <message>\n         <source>Welcome to the %1 RPC console.</source>\n         <translation>Tervetuloa %1 RPC-konsoliin.</translation>"
      },
      {
        "sha": "5faba54d5b797165961b9c9dc99305dfed38fac8",
        "filename": "src/qt/locale/bitcoin_fr.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_fr.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_fr.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_fr.ts?ref=3d827bee699abffe61d99099d9f7e813b4acc2a5",
        "patch": "@@ -3479,12 +3479,6 @@ Note\u00a0: Les frais \u00e9tant calcul\u00e9s par octet, des frais de \u00ab\u2009100 satoshis par\n         <source>Signing transaction failed</source>\n         <translation>\u00c9chec de signature de la transaction</translation>\n     </message>\n-    <message>\n-        <source>Specified blocks directory \"%s\" does not exist.\n-</source>\n-        <translation>Le r\u00e9pertoire de blocs indiqu\u00e9 \u00ab\u00a0%s\u00a0\u00bb n\u2019existe pas.\n-</translation>\n-    </message>\n     <message>\n         <source>The transaction amount is too small to pay the fee</source>\n         <translation>Le montant de la transaction est trop bas pour que les frais soient pay\u00e9s</translation>"
      },
      {
        "sha": "284bdb39b5772232ed0160f8dd7c60c9231a62d9",
        "filename": "src/qt/locale/bitcoin_ja.ts",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_ja.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_ja.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ja.ts?ref=3d827bee699abffe61d99099d9f7e813b4acc2a5",
        "patch": "@@ -3199,6 +3199,10 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of \"100 satoshis p\n         <source>Error reading %s! All keys read correctly, but transaction data or address book entries might be missing or incorrect.</source>\n         <translation>%s \u306e\u8aad\u307f\u8fbc\u307f\u30a8\u30e9\u30fc! \u3059\u3079\u3066\u306e\u30ad\u30fc\u306f\u6b63\u3057\u304f\u8aad\u307f\u53d6\u308c\u307e\u3059\u304c\u3001\u53d6\u5f15\u30c7\u30fc\u30bf\u3084\u30a2\u30c9\u30ec\u30b9\u5e33\u306e\u30a8\u30f3\u30c8\u30ea\u304c\u5931\u308f\u308c\u305f\u304b\u3001\u6b63\u3057\u304f\u306a\u3044\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002</translation>\n     </message>\n+    <message>\n+        <source>Group outputs by address, selecting all or none, instead of selecting on a per-output basis. Privacy is improved as an address is only used once (unless someone sends to it after spending from it), but may result in slightly higher fees as suboptimal coin selection may result due to the added limitation (default: %u)</source>\n+        <translation>\u51fa\u529b\u3054\u3068\u3067\u306f\u306a\u304f\u3001\u30a2\u30c9\u30ec\u30b9\u5358\u4f4d\u306b\u51fa\u529b\u3092\u307e\u3068\u3081\u3066\u9078\u629e\u3057\u307e\u3059\u3002(\u5f8c\u304b\u3089\u307e\u305f\u305d\u306e\u30a2\u30c9\u30ec\u30b9\u306b\u652f\u6255\u308f\u308c\u306a\u3044\u9650\u308a)\u30a2\u30c9\u30ec\u30b9\u304c\u4e00\u5ea6\u3057\u304b\u4f7f\u7528\u3055\u308c\u306a\u3044\u305f\u3081\u30d7\u30e9\u30a4\u30d0\u30b7\u30fc\u304c\u5411\u4e0a\u3057\u307e\u3059\u3002\u305f\u3060\u3057\u8ffd\u52a0\u306e\u5236\u9650\u306b\u3088\u308a\u6700\u9069\u3067\u306f\u306a\u3044\u30b3\u30a4\u30f3\u9078\u629e\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306b\u3001\u308f\u305a\u304b\u306b\u9ad8\u3044\u624b\u6570\u6599\u3068\u306a\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002(\u521d\u671f\u5024: %u)</translation>\n+    </message>\n     <message>\n         <source>Please check that your computer's date and time are correct! If your clock is wrong, %s will not work properly.</source>\n         <translation>\u3042\u306a\u305f\u306ePC\u306e\u65e5\u4ed8\u3068\u6642\u523b\u304c\u6b63\u3057\u3044\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u4e0b\u3055\u3044\uff01 \u3082\u3057\u3042\u306a\u305f\u306e\u6642\u8a08\u304c\u6b63\u3057\u304f\u306a\u3051\u308c\u3070 %s \u304c\u6b63\u78ba\u306b\u52d5\u4f5c\u3057\u307e\u305b\u3093\u3002</translation>\n@@ -3340,6 +3344,10 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of \"100 satoshis p\n         <source>Invalid amount for -fallbackfee=&lt;amount&gt;: '%s'</source>\n         <translation>\u4e0d\u6b63\u306a\u984d -fallbackfee=&lt;amount&gt;: '%s'</translation>\n     </message>\n+    <message>\n+        <source>Specified blocks directory \"%s\" does not exist.</source>\n+        <translation>\u6307\u5b9a\u306e\u30d6\u30ed\u30c3\u30af\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\"%s\"\u306f\u5b58\u5728\u3057\u307e\u305b\u3093\uff61</translation>\n+    </message>\n     <message>\n         <source>Upgrading txindex database</source>\n         <translation>txindex \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u66f4\u65b0\u3057\u3066\u3044\u307e\u3059</translation>\n@@ -3480,12 +3488,6 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of \"100 satoshis p\n         <source>Signing transaction failed</source>\n         <translation>\u53d6\u5f15\u306e\u7f72\u540d\u306b\u5931\u6557\u3057\u307e\u3057\u305f</translation>\n     </message>\n-    <message>\n-        <source>Specified blocks directory \"%s\" does not exist.\n-</source>\n-        <translation>\u6307\u5b9a\u306e\u30d6\u30ed\u30c3\u30af\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\"%s\"\u304c\u5b58\u5728\u3057\u307e\u305b\u3093\uff61\n-</translation>\n-    </message>\n     <message>\n         <source>The transaction amount is too small to pay the fee</source>\n         <translation>\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u306e\u91d1\u984d\u304c\u5c0f\u3055\u3059\u304e\u3066\u624b\u6570\u6599\u3092\u652f\u6255\u3048\u307e\u305b\u3093</translation>"
      },
      {
        "sha": "9912cc76e2e3f6c108969fcf3486dcc78a9be86c",
        "filename": "src/qt/locale/bitcoin_ko_KR.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_ko_KR.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_ko_KR.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ko_KR.ts?ref=3d827bee699abffe61d99099d9f7e813b4acc2a5",
        "patch": "@@ -3488,11 +3488,6 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of \"100 satoshis p\n         <source>Specified -walletdir \"%s\" is not a directory</source>\n         <translation>\uc560\ub7ec: \uc9c0\uc815\ud55c \uc9c0\uac11 \ud3f4\ub354 \"%s\"\uc740 \ub514\ub809\ud1a0\ub9ac\uac00 \uc544\ub2d9\ub2c8\ub2e4.</translation>\n     </message>\n-    <message>\n-        <source>Specified blocks directory \"%s\" does not exist.\n-</source>\n-        <translation>\uc9c0\uc815\ud55c \ube14\ub85d \ud3f4\ub354 \"%s\"\ub294 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.</translation>\n-    </message>\n     <message>\n         <source>The transaction amount is too small to pay the fee</source>\n         <translation>\uac70\ub798\uc561\uc774 \uc218\uc218\ub8cc\ub97c \uc9c0\ubd88\ud558\uae30\uc5d4 \ub108\ubb34 \uc791\uc2b5\ub2c8\ub2e4</translation>"
      },
      {
        "sha": "747a62510fd1b3a794f92b00e7cc822cb6a412db",
        "filename": "src/qt/locale/bitcoin_nl.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_nl.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_nl.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_nl.ts?ref=3d827bee699abffe61d99099d9f7e813b4acc2a5",
        "patch": "@@ -3491,12 +3491,6 @@ Notitie: Omdat de vergoeding per byte wordt gerekend, zal een vergoeding van \"10\n         <source>Specified -walletdir \"%s\" is not a directory</source>\n         <translation>Opgegeven -walletdir \"%s\" is geen map</translation>\n     </message>\n-    <message>\n-        <source>Specified blocks directory \"%s\" does not exist.\n-</source>\n-        <translation>Opgegeven blocks map \"%s\" bestaat niet.\n-</translation>\n-    </message>\n     <message>\n         <source>The transaction amount is too small to pay the fee</source>\n         <translation>Het transactiebedrag is te klein om transactiekosten in rekening te brengen</translation>"
      },
      {
        "sha": "a1437b8808fb16b32b539d45abd4b94bf2f3881c",
        "filename": "src/qt/locale/bitcoin_pl.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_pl.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_pl.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_pl.ts?ref=3d827bee699abffe61d99099d9f7e813b4acc2a5",
        "patch": "@@ -3493,12 +3493,6 @@ Zwr\u00f3\u0107 uwag\u0119, \u017ce poprawnie zweryfikowana wiadomo\u015b\u0107 potwierdza to, \u017ce nadaw\n         <source>Specified -walletdir \"%s\" is not a directory</source>\n         <translation>Podany -walletdir \"%s\" nie jest katalogiem</translation>\n     </message>\n-    <message>\n-        <source>Specified blocks directory \"%s\" does not exist.\n-</source>\n-        <translation>Podany folder blok\u00f3w \"%s\" nie istnieje.\n-</translation>\n-    </message>\n     <message>\n         <source>The transaction amount is too small to pay the fee</source>\n         <translation>Zbyt niska kwota transakcji by zap\u0142aci\u0107 op\u0142at\u0119</translation>"
      },
      {
        "sha": "e964838d9f814d0e20395ba5cd7913c8d1090a86",
        "filename": "src/qt/locale/bitcoin_pt_BR.ts",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_pt_BR.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_pt_BR.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_pt_BR.ts?ref=3d827bee699abffe61d99099d9f7e813b4acc2a5",
        "patch": "@@ -3335,6 +3335,11 @@ Nota:  Como a taxa \u00e9 calculada por byte, uma taxa de \"100 satoshis por kB\" por\n         <source>Invalid amount for -fallbackfee=&lt;amount&gt;: '%s'</source>\n         <translation>Quantidade inv\u00e1lida para -fallbackfee=&lt;amount&gt;: '%s'</translation>\n     </message>\n+    <message>\n+        <source>Specified blocks directory \"%s\" does not exist.</source>\n+        <translation>\n+Diret\u00f3rio de blocos especificados \"%s\" n\u00e3o existe.</translation>\n+    </message>\n     <message>\n         <source>Upgrading txindex database</source>\n         <translation>Atualizando banco de dados txindex</translation>\n@@ -3487,12 +3492,6 @@ Nota:  Como a taxa \u00e9 calculada por byte, uma taxa de \"100 satoshis por kB\" por\n         <source>Specified -walletdir \"%s\" is not a directory</source>\n         <translation>O -walletdir \"%s\" especificado n\u00e3o \u00e9 um diret\u00f3rio</translation>\n     </message>\n-    <message>\n-        <source>Specified blocks directory \"%s\" does not exist.\n-</source>\n-        <translation>O diret\u00f3rio de blocos especificado \"%s\" n\u00e3o existe.\n-</translation>\n-    </message>\n     <message>\n         <source>The transaction amount is too small to pay the fee</source>\n         <translation>A quantidade da transa\u00e7\u00e3o \u00e9 pequena demais para  pagar a taxa</translation>"
      },
      {
        "sha": "503c15259b6be5191bf58b00bdb069a85a924c58",
        "filename": "src/qt/locale/bitcoin_ro_RO.ts",
        "status": "modified",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_ro_RO.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_ro_RO.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ro_RO.ts?ref=3d827bee699abffe61d99099d9f7e813b4acc2a5",
        "patch": "@@ -325,6 +325,14 @@\n         <source>Open &amp;URI...</source>\n         <translation>Deschide &amp;URI...</translation>\n     </message>\n+    <message>\n+        <source>Wallet:</source>\n+        <translation>Portofel:</translation>\n+    </message>\n+    <message>\n+        <source>default wallet</source>\n+        <translation>portofel implicit</translation>\n+    </message>\n     <message>\n         <source>Click to disable network activity.</source>\n         <translation>Click pentru a opri activitatea retelei.</translation>\n@@ -345,6 +353,10 @@\n         <source>Reindexing blocks on disk...</source>\n         <translation>Se reindexeaz\u0103 blocurile pe disc...</translation>\n     </message>\n+    <message>\n+        <source>Proxy is &lt;b&gt;enabled&lt;/b&gt;: %1</source>\n+        <translation>Proxy este&lt;b&gt;activat&lt;/b&gt;:%1</translation>\n+    </message>\n     <message>\n         <source>Send coins to a Bitcoin address</source>\n         <translation>Trimite monede c\u0103tre o adres\u0103 Bitcoin</translation>\n@@ -511,6 +523,12 @@\n         <source>Amount: %1\n </source>\n         <translation>Sum\u0103: %1\n+</translation>\n+    </message>\n+    <message>\n+        <source>Wallet: %1\n+</source>\n+        <translation>Portofel: %1\n </translation>\n     </message>\n     <message>\n@@ -745,6 +763,14 @@\n         <source>The entered address \"%1\" is not a valid Bitcoin address.</source>\n         <translation>Adresa introdus\u0103 \"%1\" nu este o adres\u0103 Bitcoin valid\u0103.</translation>\n     </message>\n+    <message>\n+        <source>Address \"%1\" already exists as a receiving address with label \"%2\" and so cannot be added as a sending address.</source>\n+        <translation>Adresa \"%1\" exista deja ca si adresa de primire cu eticheta \"%2\" si deci nu poate fi folosita ca si adresa de trimitere.</translation>\n+    </message>\n+    <message>\n+        <source>The entered address \"%1\" is already in the address book with label \"%2\".</source>\n+        <translation>Adresa introdusa \"%1\" este deja in lista de adrese cu eticheta \"%2\"</translation>\n+    </message>\n     <message>\n         <source>Could not unlock wallet.</source>\n         <translation>Portofelul nu a putut fi deblocat.</translation>\n@@ -1748,6 +1774,10 @@\n         <source>&amp;Unban</source>\n         <translation>&amp;Unban</translation>\n     </message>\n+    <message>\n+        <source>default wallet</source>\n+        <translation>portofel implicit</translation>\n+    </message>\n     <message>\n         <source>Welcome to the %1 RPC console.</source>\n         <translation>Bun venit la consola %1 RPC.</translation>"
      },
      {
        "sha": "6a69bfe63cf309a05a1a0b3bd85a78d9f6d64ca5",
        "filename": "src/qt/locale/bitcoin_sk.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_sk.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_sk.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_sk.ts?ref=3d827bee699abffe61d99099d9f7e813b4acc2a5",
        "patch": "@@ -3436,12 +3436,6 @@\n         <source>Specified -walletdir \"%s\" is not a directory</source>\n         <translation>Uveden\u00fd -walletdir \"%s\" nie je prie\u010dinok</translation>\n     </message>\n-    <message>\n-        <source>Specified blocks directory \"%s\" does not exist.\n-</source>\n-        <translation>Uveden\u00fd prie\u010dinok s d\u00e1tami \"%s\" neexistuje.\n-</translation>\n-    </message>\n     <message>\n         <source>The transaction amount is too small to pay the fee</source>\n         <translation>Suma transakcie je pr\u00edli\u0161 mal\u00e1 na zaplatenie poplatku</translation>"
      },
      {
        "sha": "1865a8483432732cde85d221231fb1f5ff9862a4",
        "filename": "src/qt/locale/bitcoin_uk.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_uk.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_uk.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_uk.ts?ref=3d827bee699abffe61d99099d9f7e813b4acc2a5",
        "patch": "@@ -3477,12 +3477,6 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of \"100 satoshis p\n         <source>Specified -walletdir \"%s\" is not a directory</source>\n         <translation>\u0412\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \u0448\u043b\u044f\u0445 -walletdir \"%s\"\u00a0\u043d\u0435 \u0454 \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u043e\u043c</translation>\n     </message>\n-    <message>\n-        <source>Specified blocks directory \"%s\" does not exist.\n-</source>\n-        <translation>\u0412\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \u0448\u043b\u044f\u0445 \u0434\u043e \u0431\u043b\u043e\u043a\u0456\u0432 \"%s\" \u043d\u0435 \u0456\u0441\u043d\u0443\u0454\n-</translation>\n-    </message>\n     <message>\n         <source>The transaction amount is too small to pay the fee</source>\n         <translation>\u041d\u0435\u043c\u043e\u0436\u043b\u0438\u0432\u043e \u0441\u043f\u043b\u0430\u0442\u0438\u0442\u0438 \u043a\u043e\u043c\u0456\u0441\u0456\u044e \u0456\u0437-\u0437\u0430 \u043c\u0430\u043b\u043e\u0457 \u0441\u0443\u043c\u0438 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0456\u0457</translation>"
      },
      {
        "sha": "0aa7964e396f77ece0b873bd37e67c62e8d17c8a",
        "filename": "src/qt/locale/bitcoin_zh_TW.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_zh_TW.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d827bee699abffe61d99099d9f7e813b4acc2a5/src/qt/locale/bitcoin_zh_TW.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_zh_TW.ts?ref=3d827bee699abffe61d99099d9f7e813b4acc2a5",
        "patch": "@@ -3487,12 +3487,6 @@ Note:  Since the fee is calculated on a per-byte basis, a fee of \"100 satoshis p\n         <source>Specified -walletdir \"%s\" is not a directory</source>\n         <translation>\u4ee5 -walletdir \u6307\u5b9a\u7684\u8def\u5f91 \"%s\" \u4e0d\u662f\u500b\u76ee\u9304</translation>\n     </message>\n-    <message>\n-        <source>Specified blocks directory \"%s\" does not exist.\n-</source>\n-        <translation>\u6307\u5b9a\u7684\u5340\u584a\u76ee\u9304 \"%s\" \u4e0d\u5b58\u5728\u3002\n-</translation>\n-    </message>\n     <message>\n         <source>The transaction amount is too small to pay the fee</source>\n         <translation>\u4ea4\u6613\u91d1\u984d\u592a\u5c11\u800c\u4ed8\u4e0d\u8d77\u624b\u7e8c\u8cbb</translation>"
      }
    ]
  },
  {
    "sha": "48c845902ac044af99ceb7cacc1ea3eacfaeb913",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OGM4NDU5MDJhYzA0NGFmOTljZWI3Y2FjYzFlYTNlYWNmYWViOTEz",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2018-08-17T22:49:53Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-08-19T18:41:18Z"
      },
      "message": "depends: fix qt determinism\n\nQt's configure grabs the path to xkb's data root during configure, but the\nbuild changes in 5.8 apparently broke the handling for cross builds. As a\nresult, the string embedded in the binary depends on whether or not some files\nare present in the builder's filesystem.\n\nThe \"-xkb-config-root\" configure setting is intended to allow manual overriding\nbut it is also broken. See: https://bugreports.qt.io/browse/QTBUG-60005\n\nThis has since been fixed upstream, so just hard-code the path for now. We can\ndrop this patch when we bump to a fixed Qt.\n\nAlso, fix the \"-qt-xkbcommon-x11\" config param which was renamed. This does not\nappear to affect build results, presumably because auto-detection is working,\nbut it does not hurt to be explicit.\n\nGithub-Pull: #14000\nRebased-From: de0b4fba2fb5270dcc8d851243af9187b8ef191a",
      "tree": {
        "sha": "11531118a760cda2189164581d052f69662d78eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/11531118a760cda2189164581d052f69662d78eb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/48c845902ac044af99ceb7cacc1ea3eacfaeb913",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48c845902ac044af99ceb7cacc1ea3eacfaeb913",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/48c845902ac044af99ceb7cacc1ea3eacfaeb913",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48c845902ac044af99ceb7cacc1ea3eacfaeb913/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3d827bee699abffe61d99099d9f7e813b4acc2a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d827bee699abffe61d99099d9f7e813b4acc2a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3d827bee699abffe61d99099d9f7e813b4acc2a5"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 29,
      "deletions": 2
    },
    "files": [
      {
        "sha": "65ecadb43b521c3fbc0b7c8db95ee77d1a52cb52",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48c845902ac044af99ceb7cacc1ea3eacfaeb913/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48c845902ac044af99ceb7cacc1ea3eacfaeb913/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=48c845902ac044af99ceb7cacc1ea3eacfaeb913",
        "patch": "@@ -8,7 +8,7 @@ $(package)_dependencies=openssl zlib\n $(package)_linux_dependencies=freetype fontconfig libxcb libX11 xproto libXext\n $(package)_build_subdir=qtbase\n $(package)_qt_libs=corelib network widgets gui plugins testlib\n-$(package)_patches=fix_qt_pkgconfig.patch mac-qmake.conf fix_configure_mac.patch fix_no_printer.patch fix_rcc_determinism.patch\n+$(package)_patches=fix_qt_pkgconfig.patch mac-qmake.conf fix_configure_mac.patch fix_no_printer.patch fix_rcc_determinism.patch xkb-default.patch\n \n $(package)_qttranslations_file_name=qttranslations-$($(package)_suffix)\n $(package)_qttranslations_sha256_hash=9822084f8e2d2939ba39f4af4c0c2320e45d5996762a9423f833055607604ed8\n@@ -83,7 +83,7 @@ $(package)_config_opts_darwin += -device-option MAC_TARGET=$(host)\n $(package)_config_opts_darwin += -device-option MAC_LD64_VERSION=$(LD64_VERSION)\n endif\n \n-$(package)_config_opts_linux  = -qt-xkbcommon\n+$(package)_config_opts_linux  = -qt-xkbcommon-x11\n $(package)_config_opts_linux += -qt-xcb\n $(package)_config_opts_linux += -system-freetype\n $(package)_config_opts_linux += -no-feature-sessionmanager\n@@ -136,6 +136,7 @@ define $(package)_preprocess_cmds\n   patch -p1 -i $($(package)_patch_dir)/fix_configure_mac.patch &&\\\n   patch -p1 -i $($(package)_patch_dir)/fix_no_printer.patch &&\\\n   patch -p1 -i $($(package)_patch_dir)/fix_rcc_determinism.patch &&\\\n+  patch -p1 -i $($(package)_patch_dir)/xkb-default.patch &&\\\n   echo \"!host_build: QMAKE_CFLAGS     += $($(package)_cflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n   echo \"!host_build: QMAKE_CXXFLAGS   += $($(package)_cxxflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n   echo \"!host_build: QMAKE_LFLAGS     += $($(package)_ldflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\"
      },
      {
        "sha": "165abf3e2e7a6d7cdbe7b960ec15dbcfaf0a9dfd",
        "filename": "depends/patches/qt/xkb-default.patch",
        "status": "added",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48c845902ac044af99ceb7cacc1ea3eacfaeb913/depends/patches/qt/xkb-default.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48c845902ac044af99ceb7cacc1ea3eacfaeb913/depends/patches/qt/xkb-default.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/xkb-default.patch?ref=48c845902ac044af99ceb7cacc1ea3eacfaeb913",
        "patch": "@@ -0,0 +1,26 @@\n+--- old/qtbase/src/gui/configure.pri\t2018-06-06 17:28:10.000000000 -0400\n++++ new/qtbase/src/gui/configure.pri\t2018-08-17 18:43:01.589384567 -0400\n+@@ -43,18 +43,11 @@\n+ }\n+\n+ defineTest(qtConfTest_xkbConfigRoot) {\n+-    qtConfTest_getPkgConfigVariable($${1}): return(true)\n+-\n+-    for (dir, $$list(\"/usr/share/X11/xkb\", \"/usr/local/share/X11/xkb\")) {\n+-        exists($$dir) {\n+-            $${1}.value = $$dir\n+-            export($${1}.value)\n+-            $${1}.cache += value\n+-            export($${1}.cache)\n+-            return(true)\n+-        }\n+-    }\n+-    return(false)\n++    $${1}.value = \"/usr/share/X11/xkb\"\n++    export($${1}.value)\n++    $${1}.cache += value\n++    export($${1}.cache)\n++    return(true)\n+ }\n+\n+ defineTest(qtConfTest_qpaDefaultPlatform) {"
      }
    ]
  },
  {
    "sha": "1ffd67f11fae8fba6c1f839164ad80224fc5ad1d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZmZkNjdmMTFmYWU4ZmJhNmMxZjgzOTE2NGFkODAyMjRmYzVhZDFk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-08-21T06:21:18Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-08-21T06:25:13Z"
      },
      "message": "Merge #14005: [0.17] depends: fix qt determinism\n\n48c845902ac044af99ceb7cacc1ea3eacfaeb913 depends: fix qt determinism (Cory Fields)\n\nPull request description:\n\n  Backport for rc2\n\nTree-SHA512: 990a1b32ca8c80b22595c4b19e801d5033e42b7e86da0f80028e708131a136f6383d7510dab8bd7cd12fe8533f73246fe78c72a8a22a54eb136b2bfada1e67ea",
      "tree": {
        "sha": "11531118a760cda2189164581d052f69662d78eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/11531118a760cda2189164581d052f69662d78eb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1ffd67f11fae8fba6c1f839164ad80224fc5ad1d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJbe7BJAAoJEB5K7WKYbNJd5/MH/34JQw0hDru19PVbAZKfk9F1\nViTXuamUpAOrtHr/zzuKcsFUo1FVFXj5ECA6TaJybhXuNnFAgw85xIvAxvSQGKdR\nGm40Ospuvh+uW1QLkRc1Ljq7nT8rc4HAx5QoVp3IJBXcBYkaTcdEkPyzeGe6C+w5\nDx0YhPBTug+9DODwYqxHVGvlRkEWtUdLa1HMkkQV421JvHWy3L6pVdDO4c/NBZ0E\nVX0PWEDD13GTioSVqa0XcP0mWAADZRSUNxkKy2QMSIAn71C4AM6x1h0QXhL1NPTM\nvRFBASBlnpzoAYKfn4zF542y8qATrsPjOJ06uRX2hCTk7TlNA8edQn3VJrdv3iA=\n=8XkH\n-----END PGP SIGNATURE-----",
        "payload": "tree 11531118a760cda2189164581d052f69662d78eb\nparent 3d827bee699abffe61d99099d9f7e813b4acc2a5\nparent 48c845902ac044af99ceb7cacc1ea3eacfaeb913\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1534832478 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1534832713 +0200\n\nMerge #14005: [0.17] depends: fix qt determinism\n\n48c845902ac044af99ceb7cacc1ea3eacfaeb913 depends: fix qt determinism (Cory Fields)\n\nPull request description:\n\n  Backport for rc2\n\nTree-SHA512: 990a1b32ca8c80b22595c4b19e801d5033e42b7e86da0f80028e708131a136f6383d7510dab8bd7cd12fe8533f73246fe78c72a8a22a54eb136b2bfada1e67ea\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ffd67f11fae8fba6c1f839164ad80224fc5ad1d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1ffd67f11fae8fba6c1f839164ad80224fc5ad1d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ffd67f11fae8fba6c1f839164ad80224fc5ad1d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3d827bee699abffe61d99099d9f7e813b4acc2a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d827bee699abffe61d99099d9f7e813b4acc2a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3d827bee699abffe61d99099d9f7e813b4acc2a5"
      },
      {
        "sha": "48c845902ac044af99ceb7cacc1ea3eacfaeb913",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48c845902ac044af99ceb7cacc1ea3eacfaeb913",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/48c845902ac044af99ceb7cacc1ea3eacfaeb913"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 29,
      "deletions": 2
    },
    "files": [
      {
        "sha": "65ecadb43b521c3fbc0b7c8db95ee77d1a52cb52",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ffd67f11fae8fba6c1f839164ad80224fc5ad1d/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ffd67f11fae8fba6c1f839164ad80224fc5ad1d/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=1ffd67f11fae8fba6c1f839164ad80224fc5ad1d",
        "patch": "@@ -8,7 +8,7 @@ $(package)_dependencies=openssl zlib\n $(package)_linux_dependencies=freetype fontconfig libxcb libX11 xproto libXext\n $(package)_build_subdir=qtbase\n $(package)_qt_libs=corelib network widgets gui plugins testlib\n-$(package)_patches=fix_qt_pkgconfig.patch mac-qmake.conf fix_configure_mac.patch fix_no_printer.patch fix_rcc_determinism.patch\n+$(package)_patches=fix_qt_pkgconfig.patch mac-qmake.conf fix_configure_mac.patch fix_no_printer.patch fix_rcc_determinism.patch xkb-default.patch\n \n $(package)_qttranslations_file_name=qttranslations-$($(package)_suffix)\n $(package)_qttranslations_sha256_hash=9822084f8e2d2939ba39f4af4c0c2320e45d5996762a9423f833055607604ed8\n@@ -83,7 +83,7 @@ $(package)_config_opts_darwin += -device-option MAC_TARGET=$(host)\n $(package)_config_opts_darwin += -device-option MAC_LD64_VERSION=$(LD64_VERSION)\n endif\n \n-$(package)_config_opts_linux  = -qt-xkbcommon\n+$(package)_config_opts_linux  = -qt-xkbcommon-x11\n $(package)_config_opts_linux += -qt-xcb\n $(package)_config_opts_linux += -system-freetype\n $(package)_config_opts_linux += -no-feature-sessionmanager\n@@ -136,6 +136,7 @@ define $(package)_preprocess_cmds\n   patch -p1 -i $($(package)_patch_dir)/fix_configure_mac.patch &&\\\n   patch -p1 -i $($(package)_patch_dir)/fix_no_printer.patch &&\\\n   patch -p1 -i $($(package)_patch_dir)/fix_rcc_determinism.patch &&\\\n+  patch -p1 -i $($(package)_patch_dir)/xkb-default.patch &&\\\n   echo \"!host_build: QMAKE_CFLAGS     += $($(package)_cflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n   echo \"!host_build: QMAKE_CXXFLAGS   += $($(package)_cxxflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n   echo \"!host_build: QMAKE_LFLAGS     += $($(package)_ldflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\"
      },
      {
        "sha": "165abf3e2e7a6d7cdbe7b960ec15dbcfaf0a9dfd",
        "filename": "depends/patches/qt/xkb-default.patch",
        "status": "added",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ffd67f11fae8fba6c1f839164ad80224fc5ad1d/depends/patches/qt/xkb-default.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ffd67f11fae8fba6c1f839164ad80224fc5ad1d/depends/patches/qt/xkb-default.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/xkb-default.patch?ref=1ffd67f11fae8fba6c1f839164ad80224fc5ad1d",
        "patch": "@@ -0,0 +1,26 @@\n+--- old/qtbase/src/gui/configure.pri\t2018-06-06 17:28:10.000000000 -0400\n++++ new/qtbase/src/gui/configure.pri\t2018-08-17 18:43:01.589384567 -0400\n+@@ -43,18 +43,11 @@\n+ }\n+\n+ defineTest(qtConfTest_xkbConfigRoot) {\n+-    qtConfTest_getPkgConfigVariable($${1}): return(true)\n+-\n+-    for (dir, $$list(\"/usr/share/X11/xkb\", \"/usr/local/share/X11/xkb\")) {\n+-        exists($$dir) {\n+-            $${1}.value = $$dir\n+-            export($${1}.value)\n+-            $${1}.cache += value\n+-            export($${1}.cache)\n+-            return(true)\n+-        }\n+-    }\n+-    return(false)\n++    $${1}.value = \"/usr/share/X11/xkb\"\n++    export($${1}.value)\n++    $${1}.cache += value\n++    export($${1}.cache)\n++    return(true)\n+ }\n+\n+ defineTest(qtConfTest_qpaDefaultPlatform) {"
      }
    ]
  },
  {
    "sha": "c6d905746b9017661f757ec131fbccb6caf75385",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNmQ5MDU3NDZiOTAxNzY2MWY3NTdlYzEzMWZiY2NiNmNhZjc1Mzg1",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-08-14T18:28:29Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-08-21T07:44:47Z"
      },
      "message": "Allow ConstructTransaction to not throw error with 0-input txn\n\nGithub-Pull: #13968\nRebased-From: 2252ec50085c151e7998ca9a30cda6a33ee862b6\nTree-SHA512: 1f9978ee25fbe9bb338af19d81b401fa531d314ac8288cdb21c1bf10459edea50b43e2d5e97c9bb5fe24c8db89363f8233c0a3d96066ed85f7bd6d2eb234aac0",
      "tree": {
        "sha": "1ee2272abb42f623743136ec5595c25e50bb1dc2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1ee2272abb42f623743136ec5595c25e50bb1dc2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c6d905746b9017661f757ec131fbccb6caf75385",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJbe8LvAAoJEB5K7WKYbNJdkpoIAIelox1SV/TiaRxPT+L4rD2V\nokY/4PAtfiklShJcglkT9/pHze7Sm1BgwBk8WJ6Ry9tqahpcMu2S4gEM4mvJD5uZ\nq5e3fXscaqjmnMSRv8HLkrLqpjCL/8xrbo1Vzvaj7P97mmAIhaboXWcBwMhj9Ziu\nYjEjb6XyGNpWwcITt94kOUiKIqkPYkShN4C0iVbLU2ETCu+eCdhLw8OFE07w7glp\n9fkVpLJe/5p2rrvvL5Jw7f32UDdeEaRpUyOe0EyHPgwsGNahKJ6lPuCTXPmmJ24M\nkdNd5qa5SO896DvKjHy0Jbl+kx0EVJek2MR75r9EF7Wo7dquIBbnbvvrdyiyNY0=\n=D+pw\n-----END PGP SIGNATURE-----",
        "payload": "tree 1ee2272abb42f623743136ec5595c25e50bb1dc2\nparent 1ffd67f11fae8fba6c1f839164ad80224fc5ad1d\nauthor Gregory Sanders <gsanders87@gmail.com> 1534271309 -0400\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1534837487 +0200\n\nAllow ConstructTransaction to not throw error with 0-input txn\n\nGithub-Pull: #13968\nRebased-From: 2252ec50085c151e7998ca9a30cda6a33ee862b6\nTree-SHA512: 1f9978ee25fbe9bb338af19d81b401fa531d314ac8288cdb21c1bf10459edea50b43e2d5e97c9bb5fe24c8db89363f8233c0a3d96066ed85f7bd6d2eb234aac0\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6d905746b9017661f757ec131fbccb6caf75385",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c6d905746b9017661f757ec131fbccb6caf75385",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6d905746b9017661f757ec131fbccb6caf75385/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1ffd67f11fae8fba6c1f839164ad80224fc5ad1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ffd67f11fae8fba6c1f839164ad80224fc5ad1d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1ffd67f11fae8fba6c1f839164ad80224fc5ad1d"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "314184ab066ef671087789300a23449598598e95",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6d905746b9017661f757ec131fbccb6caf75385/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6d905746b9017661f757ec131fbccb6caf75385/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=c6d905746b9017661f757ec131fbccb6caf75385",
        "patch": "@@ -436,7 +436,7 @@ CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniVal\n         }\n     }\n \n-    if (!rbf.isNull() && rbfOptIn != SignalsOptInRBF(rawTx)) {\n+    if (!rbf.isNull() && rawTx.vin.size() > 0 && rbfOptIn != SignalsOptInRBF(rawTx)) {\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter combination: Sequence number(s) contradict replaceable option\");\n     }\n "
      }
    ]
  },
  {
    "sha": "65e7a8b97f84beaa41a2a06e2d318614d6ece686",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NWU3YThiOTdmODRiZWFhNDFhMmEwNmUyZDMxODYxNGQ2ZWNlNjg2",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-08-15T01:12:33Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-08-21T07:44:51Z"
      },
      "message": "walletcreatefundedpsbt: remove duplicate replaceable arg\n\nGithub-Pull: #13968\nRebased-From: 1f18d7b591ffcc8bb9422a9b728bd9a0d8da6a2a\nTree-SHA512: 90391703181db6880a135c60aca792a9e92c4abcad26907cd6cb0a0378593fe45cf995a22ae142ea7de2767c72a9df444e918ff15e460ce19c0435163917d812",
      "tree": {
        "sha": "275bc81f10c952c18368c619373b3d7469d1b7db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/275bc81f10c952c18368c619373b3d7469d1b7db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65e7a8b97f84beaa41a2a06e2d318614d6ece686",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJbe8LzAAoJEB5K7WKYbNJdPusH/3BHK9FrPFjkwWdhEaSzcbgl\n4CavPDq5Nq/TgnW2qzAsXjlMXFU4LAHZn12QNP6qZoVw1KDxlSxhtWHqWxafqKYz\nHN9UlieBzc7gX48xmSvlCyKFU9ezHGy9ZcOQpfBHyjl6xqBY2BUXj1WQaOnBe8kQ\n2Y03x4l3lhbP7WwFytvWVVAbIy0rfdPdC+Y9A34qg5asFH+xWiRvvwm12fdtGtD4\nBbrQ5v08jywh/GQPj04E8lpOa0XVVomtP6UaETmSztX2vYCtzi1yAAA1d4ut28Ci\nJx8jhXAvjIGGphQLMxmr4/tqFbrGHyewI1Yvb3QEgseymv2q4p3wp2GH8vJ9dSc=\n=5ILK\n-----END PGP SIGNATURE-----",
        "payload": "tree 275bc81f10c952c18368c619373b3d7469d1b7db\nparent c6d905746b9017661f757ec131fbccb6caf75385\nauthor Gregory Sanders <gsanders87@gmail.com> 1534295553 -0400\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1534837491 +0200\n\nwalletcreatefundedpsbt: remove duplicate replaceable arg\n\nGithub-Pull: #13968\nRebased-From: 1f18d7b591ffcc8bb9422a9b728bd9a0d8da6a2a\nTree-SHA512: 90391703181db6880a135c60aca792a9e92c4abcad26907cd6cb0a0378593fe45cf995a22ae142ea7de2767c72a9df444e918ff15e460ce19c0435163917d812\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65e7a8b97f84beaa41a2a06e2d318614d6ece686",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/65e7a8b97f84beaa41a2a06e2d318614d6ece686",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65e7a8b97f84beaa41a2a06e2d318614d6ece686/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c6d905746b9017661f757ec131fbccb6caf75385",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6d905746b9017661f757ec131fbccb6caf75385",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c6d905746b9017661f757ec131fbccb6caf75385"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 9,
      "deletions": 12
    },
    "files": [
      {
        "sha": "c7f3e38ac098ed8d5a0cbb9635403286861c31db",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65e7a8b97f84beaa41a2a06e2d318614d6ece686/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65e7a8b97f84beaa41a2a06e2d318614d6ece686/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=65e7a8b97f84beaa41a2a06e2d318614d6ece686",
        "patch": "@@ -113,9 +113,8 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"walletcreatefundedpsbt\", 0, \"inputs\" },\n     { \"walletcreatefundedpsbt\", 1, \"outputs\" },\n     { \"walletcreatefundedpsbt\", 2, \"locktime\" },\n-    { \"walletcreatefundedpsbt\", 3, \"replaceable\" },\n-    { \"walletcreatefundedpsbt\", 4, \"options\" },\n-    { \"walletcreatefundedpsbt\", 5, \"bip32derivs\" },\n+    { \"walletcreatefundedpsbt\", 3, \"options\" },\n+    { \"walletcreatefundedpsbt\", 4, \"bip32derivs\" },\n     { \"walletprocesspsbt\", 1, \"sign\" },\n     { \"walletprocesspsbt\", 3, \"bip32derivs\" },\n     { \"createpsbt\", 0, \"inputs\" },"
      },
      {
        "sha": "0c03e7a896c7a9f8cfd0a900022e94b73300c340",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 9,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65e7a8b97f84beaa41a2a06e2d318614d6ece686/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65e7a8b97f84beaa41a2a06e2d318614d6ece686/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=65e7a8b97f84beaa41a2a06e2d318614d6ece686",
        "patch": "@@ -4648,7 +4648,7 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 2 || request.params.size() > 6)\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 5)\n         throw std::runtime_error(\n                             \"walletcreatefundedpsbt [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n},...] [{\\\"address\\\":amount},{\\\"data\\\":\\\"hex\\\"},...] ( locktime ) ( replaceable ) ( options bip32derivs )\\n\"\n                             \"\\nCreates and funds a transaction in the Partially Signed Transaction format. Inputs will be added if supplied inputs are not enough\\n\"\n@@ -4675,9 +4675,8 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n                             \"                             accepted as second parameter.\\n\"\n                             \"   ]\\n\"\n                             \"3. locktime                  (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs\\n\"\n-                            \"4. replaceable               (boolean, optional, default=false) Marks this transaction as BIP125 replaceable.\\n\"\n                             \"                             Allows this transaction to be replaced by a transaction with higher fees. If provided, it is an error if explicit sequence numbers are incompatible.\\n\"\n-                            \"5. options                 (object, optional)\\n\"\n+                            \"4. options                 (object, optional)\\n\"\n                             \"   {\\n\"\n                             \"     \\\"changeAddress\\\"          (string, optional, default pool address) The bitcoin address to receive the change\\n\"\n                             \"     \\\"changePosition\\\"         (numeric, optional, default random) The index of the change output\\n\"\n@@ -4699,7 +4698,7 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n                             \"         \\\"ECONOMICAL\\\"\\n\"\n                             \"         \\\"CONSERVATIVE\\\"\\n\"\n                             \"   }\\n\"\n-                            \"6. bip32derivs                    (boolean, optiona, default=false) If true, includes the BIP 32 derivation paths for public keys if we know them\\n\"\n+                            \"5. bip32derivs                    (boolean, optiona, default=false) If true, includes the BIP 32 derivation paths for public keys if we know them\\n\"\n                             \"\\nResult:\\n\"\n                             \"{\\n\"\n                             \"  \\\"psbt\\\": \\\"value\\\",        (string)  The resulting raw transaction (base64-encoded string)\\n\"\n@@ -4715,15 +4714,14 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n         UniValue::VARR,\n         UniValueType(), // ARR or OBJ, checked later\n         UniValue::VNUM,\n-        UniValue::VBOOL,\n         UniValue::VOBJ\n         }, true\n     );\n \n     CAmount fee;\n     int change_position;\n-    CMutableTransaction rawTx = ConstructTransaction(request.params[0], request.params[1], request.params[2], request.params[3]);\n-    FundTransaction(pwallet, rawTx, fee, change_position, request.params[4]);\n+    CMutableTransaction rawTx = ConstructTransaction(request.params[0], request.params[1], request.params[2], request.params[3][\"replaceable\"]);\n+    FundTransaction(pwallet, rawTx, fee, change_position, request.params[3]);\n \n     // Make a blank psbt\n     PartiallySignedTransaction psbtx;\n@@ -4740,7 +4738,7 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n     const CTransaction txConst(*psbtx.tx);\n \n     // Fill transaction with out data but don't sign\n-    bool bip32derivs = request.params[5].isNull() ? false : request.params[5].get_bool();\n+    bool bip32derivs = request.params[4].isNull() ? false : request.params[5].get_bool();\n     FillPSBT(pwallet, psbtx, &txConst, 1, false, bip32derivs);\n \n     // Serialize the PSBT\n@@ -4771,7 +4769,7 @@ static const CRPCCommand commands[] =\n     //  --------------------- ------------------------          -----------------------         ----------\n     { \"rawtransactions\",    \"fundrawtransaction\",               &fundrawtransaction,            {\"hexstring\",\"options\",\"iswitness\"} },\n     { \"wallet\",             \"walletprocesspsbt\",                &walletprocesspsbt,             {\"psbt\",\"sign\",\"sighashtype\",\"bip32derivs\"} },\n-    { \"wallet\",             \"walletcreatefundedpsbt\",           &walletcreatefundedpsbt,        {\"inputs\",\"outputs\",\"locktime\",\"replaceable\",\"options\",\"bip32derivs\"} },\n+    { \"wallet\",             \"walletcreatefundedpsbt\",           &walletcreatefundedpsbt,        {\"inputs\",\"outputs\",\"locktime\",\"options\",\"bip32derivs\"} },\n     { \"hidden\",             \"resendwallettransactions\",         &resendwallettransactions,      {} },\n     { \"wallet\",             \"abandontransaction\",               &abandontransaction,            {\"txid\"} },\n     { \"wallet\",             \"abortrescan\",                      &abortrescan,                   {} },"
      }
    ]
  },
  {
    "sha": "82e2b9cb25d62f709d443e8e9fb5d174eb29eab0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MmUyYjljYjI1ZDYyZjcwOWQ0NDNlOGU5ZmI1ZDE3NGViMjllYWIw",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-08-15T01:52:16Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-08-21T07:44:52Z"
      },
      "message": "QA: add basic walletcreatefunded optional arg test\n\nGithub-Pull: #13968\nRebased-From: 1f0c4282e961baea85d5f74d7493bd7459784391\nTree-SHA512: 1f8b10629a314f623d589801ef2e62724de2cd82a0e523e0ab25a285f92b76a3b31304c1c0418b1b611ec3ca0016016d1e6af410ac81a78449b875c4f89a46d7",
      "tree": {
        "sha": "d4437660e46535735eae02b41049e5c497de40fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d4437660e46535735eae02b41049e5c497de40fb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/82e2b9cb25d62f709d443e8e9fb5d174eb29eab0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJbe8L0AAoJEB5K7WKYbNJdUc4IAKmuxetLxuBD74n3S3N0uBL/\nt1JOOmD/5h9gVggOXd0qynHDUV5PmhtM9v+QVWz5IkPlI4mF/yQ+jDzGlv1HtDT8\nnzFkq4Ll5PfaN79gbbfjPMg8SBM9STt8DQTkhGH2q0l0RP3MGA6PUp/nTFgrQMqH\n7lYOgGeckaex7tq8VA6monuowNDBcJrvA2q6nSsf6/7n55xP403ACkf8d6XyYBHk\nH7/gfVdp90ASnFJ2cpdY/HtshAhgH6Po8n4kktgtGPquwGXtIS2M2Erj8ftB9nR8\nWB3NMSMKc+eFw/q6zc8mT9f2qje4rK5x5+TKJfT6JBKRJspmaF191hW+6EQdXRk=\n=Js09\n-----END PGP SIGNATURE-----",
        "payload": "tree d4437660e46535735eae02b41049e5c497de40fb\nparent 65e7a8b97f84beaa41a2a06e2d318614d6ece686\nauthor Gregory Sanders <gsanders87@gmail.com> 1534297936 -0400\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1534837492 +0200\n\nQA: add basic walletcreatefunded optional arg test\n\nGithub-Pull: #13968\nRebased-From: 1f0c4282e961baea85d5f74d7493bd7459784391\nTree-SHA512: 1f8b10629a314f623d589801ef2e62724de2cd82a0e523e0ab25a285f92b76a3b31304c1c0418b1b611ec3ca0016016d1e6af410ac81a78449b875c4f89a46d7\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82e2b9cb25d62f709d443e8e9fb5d174eb29eab0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/82e2b9cb25d62f709d443e8e9fb5d174eb29eab0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82e2b9cb25d62f709d443e8e9fb5d174eb29eab0/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "65e7a8b97f84beaa41a2a06e2d318614d6ece686",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65e7a8b97f84beaa41a2a06e2d318614d6ece686",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/65e7a8b97f84beaa41a2a06e2d318614d6ece686"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 29,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f847a01e59ea12424edc14bf7cad6d4c4a23636f",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82e2b9cb25d62f709d443e8e9fb5d174eb29eab0/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82e2b9cb25d62f709d443e8e9fb5d174eb29eab0/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=82e2b9cb25d62f709d443e8e9fb5d174eb29eab0",
        "patch": "@@ -11,6 +11,8 @@\n import json\n import os\n \n+MAX_BIP125_RBF_SEQUENCE = 0xfffffffd\n+\n # Create one-input, one-output, no-fee transaction:\n class PSBTTest(BitcoinTestFramework):\n \n@@ -135,6 +137,33 @@ def run_test(self):\n         self.nodes[0].generate(6)\n         self.sync_all()\n \n+        # Test additional args in walletcreatepsbt\n+        # Make sure both pre-included and funded inputs\n+        # have the correct sequence numbers based on\n+        # replaceable arg\n+        block_height = self.nodes[0].getblockcount()\n+        unspent = self.nodes[0].listunspent()[0]\n+        psbtx_info = self.nodes[0].walletcreatefundedpsbt([{\"txid\":unspent[\"txid\"], \"vout\":unspent[\"vout\"]}], [{self.nodes[2].getnewaddress():unspent[\"amount\"]+1}], block_height+2, {\"replaceable\":True})\n+        decoded_psbt = self.nodes[0].decodepsbt(psbtx_info[\"psbt\"])\n+        for tx_in in decoded_psbt[\"tx\"][\"vin\"]:\n+           assert_equal(tx_in[\"sequence\"], MAX_BIP125_RBF_SEQUENCE)\n+        assert_equal(decoded_psbt[\"tx\"][\"locktime\"], block_height+2)\n+\n+        # Same construction with only locktime set\n+        psbtx_info = self.nodes[0].walletcreatefundedpsbt([{\"txid\":unspent[\"txid\"], \"vout\":unspent[\"vout\"]}], [{self.nodes[2].getnewaddress():unspent[\"amount\"]+1}], block_height)\n+        decoded_psbt = self.nodes[0].decodepsbt(psbtx_info[\"psbt\"])\n+        for tx_in in decoded_psbt[\"tx\"][\"vin\"]:\n+            assert tx_in[\"sequence\"] > MAX_BIP125_RBF_SEQUENCE\n+        assert_equal(decoded_psbt[\"tx\"][\"locktime\"], block_height)\n+\n+        # Same construction without optional arguments\n+        psbtx_info = self.nodes[0].walletcreatefundedpsbt([{\"txid\":unspent[\"txid\"], \"vout\":unspent[\"vout\"]}], [{self.nodes[2].getnewaddress():unspent[\"amount\"]+1}])\n+        decoded_psbt = self.nodes[0].decodepsbt(psbtx_info[\"psbt\"])\n+        for tx_in in decoded_psbt[\"tx\"][\"vin\"]:\n+            assert tx_in[\"sequence\"] > MAX_BIP125_RBF_SEQUENCE\n+        assert_equal(decoded_psbt[\"tx\"][\"locktime\"], 0)\n+\n+\n         # BIP 174 Test Vectors\n \n         # Check that unknown values are just passed through"
      }
    ]
  },
  {
    "sha": "9833545d18c7e0884c4ab3a80b505be5b91c56af",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ODMzNTQ1ZDE4YzdlMDg4NGM0YWIzYTgwYjUwNWJlNWI5MWM1NmFm",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-08-20T16:57:06Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-08-21T07:44:53Z"
      },
      "message": "RPCTypeCheck bip32derivs arg in walletcreatefunded\n\nGithub-Pull: #13968\nRebased-From: faaac5caaab4d5131040292f4ef2404074ad268b\nTree-SHA512: 758c0c3e4435897d1a9b03ea93f1b2a1a1b64071eda9450f968acf537c172ee61acf9d962bc22ddb6de26e0ad39d9165cdee6f260bb5a95bf97b4003853f0874",
      "tree": {
        "sha": "0cd6b086963e1ce577e396686c5ef1b5adb3d892",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0cd6b086963e1ce577e396686c5ef1b5adb3d892"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9833545d18c7e0884c4ab3a80b505be5b91c56af",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJbe8L1AAoJEB5K7WKYbNJdknsIALRnoWSYugoAAsjKAl1pkkhv\nyya19PY9IretQIpBKvrcQpHtT6Qc2+yZS/oNJS0CJHld3ZZuvdpHwMTOm2Ijs905\nwWIr5XSuKqr9CM+sDaEj6qHnMWsm1RjDQkyqfYmW9ntZRIMH/LEBSoJLDvVvtnlk\n0JjfW/dsL5NzUbkyj0WEdpS5Xt1zEbnD/bFIli7MLGqGvh+DA2wG5iQijmqBpLSV\nhnWPbI2WWdATOQp8ervpXhgddU5I8jzAlukQQ62Zl+IDnwoWC2Af19duVwXT/Jzf\nNnwux4/ZrvSC1QEGTK5Zz05tZdKXWs45VojOjfkagUXqy+CcDe7vBCM3cqOcD+k=\n=dFD1\n-----END PGP SIGNATURE-----",
        "payload": "tree 0cd6b086963e1ce577e396686c5ef1b5adb3d892\nparent 82e2b9cb25d62f709d443e8e9fb5d174eb29eab0\nauthor Gregory Sanders <gsanders87@gmail.com> 1534784226 -0400\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1534837493 +0200\n\nRPCTypeCheck bip32derivs arg in walletcreatefunded\n\nGithub-Pull: #13968\nRebased-From: faaac5caaab4d5131040292f4ef2404074ad268b\nTree-SHA512: 758c0c3e4435897d1a9b03ea93f1b2a1a1b64071eda9450f968acf537c172ee61acf9d962bc22ddb6de26e0ad39d9165cdee6f260bb5a95bf97b4003853f0874\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9833545d18c7e0884c4ab3a80b505be5b91c56af",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9833545d18c7e0884c4ab3a80b505be5b91c56af",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9833545d18c7e0884c4ab3a80b505be5b91c56af/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "82e2b9cb25d62f709d443e8e9fb5d174eb29eab0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82e2b9cb25d62f709d443e8e9fb5d174eb29eab0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/82e2b9cb25d62f709d443e8e9fb5d174eb29eab0"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "bce19cfeb3425f2cc1543967fdb8051491f72de7",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9833545d18c7e0884c4ab3a80b505be5b91c56af/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9833545d18c7e0884c4ab3a80b505be5b91c56af/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=9833545d18c7e0884c4ab3a80b505be5b91c56af",
        "patch": "@@ -4714,7 +4714,8 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n         UniValue::VARR,\n         UniValueType(), // ARR or OBJ, checked later\n         UniValue::VNUM,\n-        UniValue::VOBJ\n+        UniValue::VOBJ,\n+        UniValue::VBOOL\n         }, true\n     );\n "
      }
    ]
  },
  {
    "sha": "3e4829af097b12f4255e9b04fa27c408850a783f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZTQ4MjlhZjA5N2IxMmY0MjU1ZTliMDRmYTI3YzQwODg1MGE3ODNm",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2018-08-21T06:55:24Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-08-22T13:29:22Z"
      },
      "message": "Bugfix: NSIS: Exclude Makefile* from docs\n\nOtherwise, the generated Makefile is included in the NSIS-installed documentation, which can lead to non-determinism (eg, if gawk is installed on some build VMs, but others only have mawk)\n\nGithub-Pull: #14018\nRebased-From: 8563341714a1ec452dd3304a39dd880face49c84\nTree-SHA512: 2d219a4a2027bcd7359b7320bafc6b7cd3bde3dcf9309ddd6198ff67407470025baa71e6d0ed3d6cec081834ddc9a0247043865eb26737e6fd0d2f09574f5932",
      "tree": {
        "sha": "37547bdbee137813186ffe573a1ebf9a9d445a57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/37547bdbee137813186ffe573a1ebf9a9d445a57"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3e4829af097b12f4255e9b04fa27c408850a783f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJbfWUyAAoJEB5K7WKYbNJdG1QIAIEyho8i24kMP57E4SDqiAlk\nP60vvVrfMXqUg5Yiu3ym+HwCJuCY3NyIjzDTGQr6+FaZWmjhIrvOW8PHu6kc2ug1\nYrMYZGPyevO9xs0gvJ7Uijemz1+XTXgqjKkc5ll4yJHX1HxwR0Vm6C3Obc14RpZs\nEu5bRkDqOUJrIyLIxeVJA3yOfpS3C4EamNGsBnuvD5x/eRgvLDr5e8OS0SrS2fNM\n1H01QxPJAXth6xaEs+2HypqAm+c/E9I9+nrjLDjJXsvMDb4F+LwheyEAuxmxendz\nPzLbxZLt/423nRAaoSyJ5ImafxCA5GIVDrH03A5ZpcmadTFN34FiaV+cOE/i0u8=\n=sIKd\n-----END PGP SIGNATURE-----",
        "payload": "tree 37547bdbee137813186ffe573a1ebf9a9d445a57\nparent 9833545d18c7e0884c4ab3a80b505be5b91c56af\nauthor Luke Dashjr <luke-jr+git@utopios.org> 1534834524 +0000\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1534944562 +0200\n\nBugfix: NSIS: Exclude Makefile* from docs\n\nOtherwise, the generated Makefile is included in the NSIS-installed documentation, which can lead to non-determinism (eg, if gawk is installed on some build VMs, but others only have mawk)\n\nGithub-Pull: #14018\nRebased-From: 8563341714a1ec452dd3304a39dd880face49c84\nTree-SHA512: 2d219a4a2027bcd7359b7320bafc6b7cd3bde3dcf9309ddd6198ff67407470025baa71e6d0ed3d6cec081834ddc9a0247043865eb26737e6fd0d2f09574f5932\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e4829af097b12f4255e9b04fa27c408850a783f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3e4829af097b12f4255e9b04fa27c408850a783f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e4829af097b12f4255e9b04fa27c408850a783f/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9833545d18c7e0884c4ab3a80b505be5b91c56af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9833545d18c7e0884c4ab3a80b505be5b91c56af",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9833545d18c7e0884c4ab3a80b505be5b91c56af"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b58a84e02d42f354dd6b965c51b0c47d8b738434",
        "filename": "share/setup.nsi.in",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e4829af097b12f4255e9b04fa27c408850a783f/share/setup.nsi.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e4829af097b12f4255e9b04fa27c408850a783f/share/setup.nsi.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/setup.nsi.in?ref=3e4829af097b12f4255e9b04fa27c408850a783f",
        "patch": "@@ -81,7 +81,7 @@ Section -Main SEC0000\n     File @abs_top_srcdir@/release/@BITCOIN_DAEMON_NAME@@EXEEXT@\n     File @abs_top_srcdir@/release/@BITCOIN_CLI_NAME@@EXEEXT@\n     SetOutPath $INSTDIR\\doc\n-    File /r @abs_top_srcdir@/doc\\*.*\n+    File /r /x Makefile* @abs_top_srcdir@/doc\\*.*\n     SetOutPath $INSTDIR\n     WriteRegStr HKCU \"${REGKEY}\\Components\" Main 1\n SectionEnd"
      }
    ]
  },
  {
    "sha": "b5ec6d4bf8a8ca18ca520e2f484e3ddd2d1138a3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNWVjNmQ0YmY4YThjYTE4Y2E1MjBlMmY0ODRlM2RkZDJkMTEzOGEz",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-08-24T22:01:27Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-08-27T17:43:55Z"
      },
      "message": "Docs: Fix help message typo optiona -> optional\n\nGithub-Pull: #14056\nRebased-From: 7d0a8ad3103200145ab2e73368c3b8345a66c15d",
      "tree": {
        "sha": "c506c068610e27798263734e8ed4a34c4c176777",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c506c068610e27798263734e8ed4a34c4c176777"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b5ec6d4bf8a8ca18ca520e2f484e3ddd2d1138a3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5ec6d4bf8a8ca18ca520e2f484e3ddd2d1138a3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b5ec6d4bf8a8ca18ca520e2f484e3ddd2d1138a3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5ec6d4bf8a8ca18ca520e2f484e3ddd2d1138a3/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3e4829af097b12f4255e9b04fa27c408850a783f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e4829af097b12f4255e9b04fa27c408850a783f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3e4829af097b12f4255e9b04fa27c408850a783f"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "cc6716d80d76f6742bd4eb858d3a7a38c18c7732",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5ec6d4bf8a8ca18ca520e2f484e3ddd2d1138a3/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5ec6d4bf8a8ca18ca520e2f484e3ddd2d1138a3/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=b5ec6d4bf8a8ca18ca520e2f484e3ddd2d1138a3",
        "patch": "@@ -4596,7 +4596,7 @@ UniValue walletprocesspsbt(const JSONRPCRequest& request)\n             \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n             \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n             \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n-            \"4. bip32derivs                    (boolean, optiona, default=false) If true, includes the BIP 32 derivation paths for public keys if we know them\\n\"\n+            \"4. bip32derivs                    (boolean, optional, default=false) If true, includes the BIP 32 derivation paths for public keys if we know them\\n\"\n \n             \"\\nResult:\\n\"\n             \"{\\n\"\n@@ -4698,7 +4698,7 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n                             \"         \\\"ECONOMICAL\\\"\\n\"\n                             \"         \\\"CONSERVATIVE\\\"\\n\"\n                             \"   }\\n\"\n-                            \"5. bip32derivs                    (boolean, optiona, default=false) If true, includes the BIP 32 derivation paths for public keys if we know them\\n\"\n+                            \"5. bip32derivs                    (boolean, optional, default=false) If true, includes the BIP 32 derivation paths for public keys if we know them\\n\"\n                             \"\\nResult:\\n\"\n                             \"{\\n\"\n                             \"  \\\"psbt\\\": \\\"value\\\",        (string)  The resulting raw transaction (base64-encoded string)\\n\""
      }
    ]
  },
  {
    "sha": "fab0fbefcf51f38aa858423017b545df6d098311",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWIwZmJlZmNmNTFmMzhhYTg1ODQyMzAxN2I1NDVkZjZkMDk4MzEx",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-08-26T14:18:39Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-08-27T17:44:14Z"
      },
      "message": "qa: Stop txindex thread before calling destructor\n\nGithub-Pull: #14071\nRebased-From: faf4a9b674186923f8c837e3621d147f504c1944",
      "tree": {
        "sha": "eb276341a3e8e18dbf05b467ed6ec518ab587afa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eb276341a3e8e18dbf05b467ed6ec518ab587afa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fab0fbefcf51f38aa858423017b545df6d098311",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab0fbefcf51f38aa858423017b545df6d098311",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fab0fbefcf51f38aa858423017b545df6d098311",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab0fbefcf51f38aa858423017b545df6d098311/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b5ec6d4bf8a8ca18ca520e2f484e3ddd2d1138a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5ec6d4bf8a8ca18ca520e2f484e3ddd2d1138a3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b5ec6d4bf8a8ca18ca520e2f484e3ddd2d1138a3"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2a160b9988c7562de5a57f50f4c5886d15070fb7",
        "filename": "src/test/txindex_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab0fbefcf51f38aa858423017b545df6d098311/src/test/txindex_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab0fbefcf51f38aa858423017b545df6d098311/src/test/txindex_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txindex_tests.cpp?ref=fab0fbefcf51f38aa858423017b545df6d098311",
        "patch": "@@ -61,6 +61,8 @@ BOOST_FIXTURE_TEST_CASE(txindex_initial_sync, TestChain100Setup)\n             BOOST_ERROR(\"Read incorrect tx\");\n         }\n     }\n+\n+    txindex.Stop(); // Stop thread before calling destructor\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "cf3d7f94c2efd15a9cb910ccee31505934d55641",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZjNkN2Y5NGMyZWZkMTVhOWNiOTEwY2NlZTMxNTA1OTM0ZDU1NjQx",
    "commit": {
      "author": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-08-26T13:41:57Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-08-27T17:44:41Z"
      },
      "message": "Use assert when running from multithreaded code as BOOST_CHECK_* are not thread safe\n\nGithub-Pull: #14069\nRebased-From: 737670c036e802e0fd8b51efffb41131d08f0204",
      "tree": {
        "sha": "142a976f1ff1e11805aa70a3857ffa53c20cbdad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/142a976f1ff1e11805aa70a3857ffa53c20cbdad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cf3d7f94c2efd15a9cb910ccee31505934d55641",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf3d7f94c2efd15a9cb910ccee31505934d55641",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cf3d7f94c2efd15a9cb910ccee31505934d55641",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf3d7f94c2efd15a9cb910ccee31505934d55641/comments",
    "author": {
      "login": "skeees",
      "id": 195769,
      "node_id": "MDQ6VXNlcjE5NTc2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skeees",
      "html_url": "https://github.com/skeees",
      "followers_url": "https://api.github.com/users/skeees/followers",
      "following_url": "https://api.github.com/users/skeees/following{/other_user}",
      "gists_url": "https://api.github.com/users/skeees/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skeees/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
      "organizations_url": "https://api.github.com/users/skeees/orgs",
      "repos_url": "https://api.github.com/users/skeees/repos",
      "events_url": "https://api.github.com/users/skeees/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skeees/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fab0fbefcf51f38aa858423017b545df6d098311",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab0fbefcf51f38aa858423017b545df6d098311",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fab0fbefcf51f38aa858423017b545df6d098311"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "2af0ab22da81f85df5ae981a55139a54a3bd451c",
        "filename": "src/test/scheduler_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf3d7f94c2efd15a9cb910ccee31505934d55641/src/test/scheduler_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf3d7f94c2efd15a9cb910ccee31505934d55641/src/test/scheduler_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/scheduler_tests.cpp?ref=cf3d7f94c2efd15a9cb910ccee31505934d55641",
        "patch": "@@ -138,11 +138,11 @@ BOOST_AUTO_TEST_CASE(singlethreadedscheduler_ordered)\n     // the callbacks should run in exactly the order in which they were enqueued\n     for (int i = 0; i < 100; ++i) {\n         queue1.AddToProcessQueue([i, &counter1]() {\n-            BOOST_CHECK_EQUAL(i, counter1++);\n+            assert(i == counter1++);\n         });\n \n         queue2.AddToProcessQueue([i, &counter2]() {\n-            BOOST_CHECK_EQUAL(i, counter2++);\n+            assert(i == counter2++);\n         });\n     }\n "
      }
    ]
  },
  {
    "sha": "5f71eac6345c716b4e0b7506fd77ca0d119341d2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZjcxZWFjNjM0NWM3MTZiNGUwYjc1MDZmZDc3Y2EwZDExOTM0MWQy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-08-28T09:57:38Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-08-28T09:58:19Z"
      },
      "message": "Merge #14084: [0.17] qa: Backports\n\ncf3d7f94c2efd15a9cb910ccee31505934d55641 Use assert when running from multithreaded code as BOOST_CHECK_* are not thread safe (Jesse Cohen)\nfab0fbefcf51f38aa858423017b545df6d098311 qa: Stop txindex thread before calling destructor (MarcoFalke)\nb5ec6d4bf8a8ca18ca520e2f484e3ddd2d1138a3 Docs: Fix help message typo optiona -> optional (Ben Woosley)\n\nPull request description:\n\n  Fixes to make the unit tests and bench pass with the thread sanitizer (beside the issue with fChecked https://github.com/bitcoin/bitcoin/issues/14058#issuecomment-416042917).\n\n  For testing: `./configure --with-sanitizers=undefined,thread && make -j 16 && ./src/test/test_bitcoin`\n\nTree-SHA512: 5cb85ecc278b719dba03240265e93424ed1a28671834da7590adab88c2d43c6e6cbf3269bbe2fd79e5ed3a85ec77a268e05301e7a7421cf6a97d413dddac6327",
      "tree": {
        "sha": "142a976f1ff1e11805aa70a3857ffa53c20cbdad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/142a976f1ff1e11805aa70a3857ffa53c20cbdad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f71eac6345c716b4e0b7506fd77ca0d119341d2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAluFHLsACgkQHkrtYphs\n0l26lQf/bkMVT/O6GzaqdktBLEAx4KrC62P+cZPh1RtAjB9cz6dNJMSdVlXLj7z9\nOgphlCZaLd6G/vJBaadcqF19xshVnKgmjkteQETULVVSgbCkUj+JffxtN6GOJY+p\nzx4NueTzC4xsutyYBKOsFJ9T9r3ViMfm0pjn0L7efHaJTZfdMm0ZXR+u+p9aYu8i\nVAkdW7KE+cj4B0Y+xhvj2wweix33xFMexrvtI8P4TXFnrHkWMeIhm7ZsDyyLVseJ\nMaTcX2A6yEwrys/w5ChInGYvUeSZHHbpDwT8EmdRUk2hVChQwLtkvNmNgfFkE948\nc3pE38bIk3KfE1Aa0+6iijMlb92MFw==\n=EjC2\n-----END PGP SIGNATURE-----",
        "payload": "tree 142a976f1ff1e11805aa70a3857ffa53c20cbdad\nparent 3e4829af097b12f4255e9b04fa27c408850a783f\nparent cf3d7f94c2efd15a9cb910ccee31505934d55641\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1535450258 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1535450299 +0200\n\nMerge #14084: [0.17] qa: Backports\n\ncf3d7f94c2efd15a9cb910ccee31505934d55641 Use assert when running from multithreaded code as BOOST_CHECK_* are not thread safe (Jesse Cohen)\nfab0fbefcf51f38aa858423017b545df6d098311 qa: Stop txindex thread before calling destructor (MarcoFalke)\nb5ec6d4bf8a8ca18ca520e2f484e3ddd2d1138a3 Docs: Fix help message typo optiona -> optional (Ben Woosley)\n\nPull request description:\n\n  Fixes to make the unit tests and bench pass with the thread sanitizer (beside the issue with fChecked https://github.com/bitcoin/bitcoin/issues/14058#issuecomment-416042917).\n\n  For testing: `./configure --with-sanitizers=undefined,thread && make -j 16 && ./src/test/test_bitcoin`\n\nTree-SHA512: 5cb85ecc278b719dba03240265e93424ed1a28671834da7590adab88c2d43c6e6cbf3269bbe2fd79e5ed3a85ec77a268e05301e7a7421cf6a97d413dddac6327\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f71eac6345c716b4e0b7506fd77ca0d119341d2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5f71eac6345c716b4e0b7506fd77ca0d119341d2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f71eac6345c716b4e0b7506fd77ca0d119341d2/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3e4829af097b12f4255e9b04fa27c408850a783f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e4829af097b12f4255e9b04fa27c408850a783f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3e4829af097b12f4255e9b04fa27c408850a783f"
      },
      {
        "sha": "cf3d7f94c2efd15a9cb910ccee31505934d55641",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf3d7f94c2efd15a9cb910ccee31505934d55641",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cf3d7f94c2efd15a9cb910ccee31505934d55641"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 6,
      "deletions": 4
    },
    "files": [
      {
        "sha": "2af0ab22da81f85df5ae981a55139a54a3bd451c",
        "filename": "src/test/scheduler_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f71eac6345c716b4e0b7506fd77ca0d119341d2/src/test/scheduler_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f71eac6345c716b4e0b7506fd77ca0d119341d2/src/test/scheduler_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/scheduler_tests.cpp?ref=5f71eac6345c716b4e0b7506fd77ca0d119341d2",
        "patch": "@@ -138,11 +138,11 @@ BOOST_AUTO_TEST_CASE(singlethreadedscheduler_ordered)\n     // the callbacks should run in exactly the order in which they were enqueued\n     for (int i = 0; i < 100; ++i) {\n         queue1.AddToProcessQueue([i, &counter1]() {\n-            BOOST_CHECK_EQUAL(i, counter1++);\n+            assert(i == counter1++);\n         });\n \n         queue2.AddToProcessQueue([i, &counter2]() {\n-            BOOST_CHECK_EQUAL(i, counter2++);\n+            assert(i == counter2++);\n         });\n     }\n "
      },
      {
        "sha": "2a160b9988c7562de5a57f50f4c5886d15070fb7",
        "filename": "src/test/txindex_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f71eac6345c716b4e0b7506fd77ca0d119341d2/src/test/txindex_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f71eac6345c716b4e0b7506fd77ca0d119341d2/src/test/txindex_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txindex_tests.cpp?ref=5f71eac6345c716b4e0b7506fd77ca0d119341d2",
        "patch": "@@ -61,6 +61,8 @@ BOOST_FIXTURE_TEST_CASE(txindex_initial_sync, TestChain100Setup)\n             BOOST_ERROR(\"Read incorrect tx\");\n         }\n     }\n+\n+    txindex.Stop(); // Stop thread before calling destructor\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "cc6716d80d76f6742bd4eb858d3a7a38c18c7732",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f71eac6345c716b4e0b7506fd77ca0d119341d2/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f71eac6345c716b4e0b7506fd77ca0d119341d2/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=5f71eac6345c716b4e0b7506fd77ca0d119341d2",
        "patch": "@@ -4596,7 +4596,7 @@ UniValue walletprocesspsbt(const JSONRPCRequest& request)\n             \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n             \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n             \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n-            \"4. bip32derivs                    (boolean, optiona, default=false) If true, includes the BIP 32 derivation paths for public keys if we know them\\n\"\n+            \"4. bip32derivs                    (boolean, optional, default=false) If true, includes the BIP 32 derivation paths for public keys if we know them\\n\"\n \n             \"\\nResult:\\n\"\n             \"{\\n\"\n@@ -4698,7 +4698,7 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n                             \"         \\\"ECONOMICAL\\\"\\n\"\n                             \"         \\\"CONSERVATIVE\\\"\\n\"\n                             \"   }\\n\"\n-                            \"5. bip32derivs                    (boolean, optiona, default=false) If true, includes the BIP 32 derivation paths for public keys if we know them\\n\"\n+                            \"5. bip32derivs                    (boolean, optional, default=false) If true, includes the BIP 32 derivation paths for public keys if we know them\\n\"\n                             \"\\nResult:\\n\"\n                             \"{\\n\"\n                             \"  \\\"psbt\\\": \\\"value\\\",        (string)  The resulting raw transaction (base64-encoded string)\\n\""
      }
    ]
  },
  {
    "sha": "2307a6eb2b9dbc4fd4c50f5463db5d79d32f6caf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMzA3YTZlYjJiOWRiYzRmZDRjNTBmNTQ2M2RiNWQ3OWQzMmY2Y2Fm",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-08-24T21:03:55Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-08-28T21:11:41Z"
      },
      "message": "fix walletcreatefundedpsbt deriv paths, add test\n\nGithub-Pull: #14055\nRebased-From: 61fe653bd919cb0533b2b9d6259bc86a4b2975c0\nTree-SHA512: 2f3edf62318fab4b405b47788096005f59cbe6ba4723fe51ce3b386539a58b7ea7369c31c3840c6baa76cdf6ba8f8440f977c36e2ee2916e711d7872bd1eadad",
      "tree": {
        "sha": "3bab849dface330706ffb8d5ac211a65ef0a755e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3bab849dface330706ffb8d5ac211a65ef0a755e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2307a6eb2b9dbc4fd4c50f5463db5d79d32f6caf",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAluFuo0ACgkQHkrtYphs\n0l2xdwf+PhXbpsM/YK653uelhAWkgLoEyfgmRADEcE0xXN8MeR7jZi97Nlcilc9c\ngakY+bbRrX2NMPJ50f1boBl36LBzNYc8kpjp36Dn/ubGH2/jYr3zX3qeX6657+2e\npJmTbEBsEdEsG/YufqC4fMkMRt4s2VN/22AzovVMUYxYfiCZIcx322yyTKoyicK2\nFbfACoLla+nq+o0FP2y/XeZuqgSYxTKwgPx+UgQf6K33mwnW96kXVGndNf7jH8DI\nYLVI4RpXAhf5KSGXuoHLdFP9sFW0VeDz2dpCnzhN0cH9mNku2LnCNJKnzitkra4K\noI4/0nYYxtd9zTOfG0LrVJYYdSffsw==\n=PEWY\n-----END PGP SIGNATURE-----",
        "payload": "tree 3bab849dface330706ffb8d5ac211a65ef0a755e\nparent 5f71eac6345c716b4e0b7506fd77ca0d119341d2\nauthor Gregory Sanders <gsanders87@gmail.com> 1535144635 -0400\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1535490701 +0200\n\nfix walletcreatefundedpsbt deriv paths, add test\n\nGithub-Pull: #14055\nRebased-From: 61fe653bd919cb0533b2b9d6259bc86a4b2975c0\nTree-SHA512: 2f3edf62318fab4b405b47788096005f59cbe6ba4723fe51ce3b386539a58b7ea7369c31c3840c6baa76cdf6ba8f8440f977c36e2ee2916e711d7872bd1eadad\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2307a6eb2b9dbc4fd4c50f5463db5d79d32f6caf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2307a6eb2b9dbc4fd4c50f5463db5d79d32f6caf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2307a6eb2b9dbc4fd4c50f5463db5d79d32f6caf/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5f71eac6345c716b4e0b7506fd77ca0d119341d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f71eac6345c716b4e0b7506fd77ca0d119341d2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f71eac6345c716b4e0b7506fd77ca0d119341d2"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 7,
      "deletions": 5
    },
    "files": [
      {
        "sha": "bb7ceb424c11fc3a4b1d81c74ae3decf479ca287",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2307a6eb2b9dbc4fd4c50f5463db5d79d32f6caf/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2307a6eb2b9dbc4fd4c50f5463db5d79d32f6caf/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=2307a6eb2b9dbc4fd4c50f5463db5d79d32f6caf",
        "patch": "@@ -4739,7 +4739,7 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n     const CTransaction txConst(*psbtx.tx);\n \n     // Fill transaction with out data but don't sign\n-    bool bip32derivs = request.params[4].isNull() ? false : request.params[5].get_bool();\n+    bool bip32derivs = request.params[4].isNull() ? false : request.params[4].get_bool();\n     FillPSBT(pwallet, psbtx, &txConst, 1, false, bip32derivs);\n \n     // Serialize the PSBT"
      },
      {
        "sha": "d558de5fe12addc9f8fce4a8aede98f5cb488f21",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2307a6eb2b9dbc4fd4c50f5463db5d79d32f6caf/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2307a6eb2b9dbc4fd4c50f5463db5d79d32f6caf/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=2307a6eb2b9dbc4fd4c50f5463db5d79d32f6caf",
        "patch": "@@ -143,17 +143,19 @@ def run_test(self):\n         # replaceable arg\n         block_height = self.nodes[0].getblockcount()\n         unspent = self.nodes[0].listunspent()[0]\n-        psbtx_info = self.nodes[0].walletcreatefundedpsbt([{\"txid\":unspent[\"txid\"], \"vout\":unspent[\"vout\"]}], [{self.nodes[2].getnewaddress():unspent[\"amount\"]+1}], block_height+2, {\"replaceable\":True})\n+        psbtx_info = self.nodes[0].walletcreatefundedpsbt([{\"txid\":unspent[\"txid\"], \"vout\":unspent[\"vout\"]}], [{self.nodes[2].getnewaddress():unspent[\"amount\"]+1}], block_height+2, {\"replaceable\":True}, False)\n         decoded_psbt = self.nodes[0].decodepsbt(psbtx_info[\"psbt\"])\n-        for tx_in in decoded_psbt[\"tx\"][\"vin\"]:\n+        for tx_in, psbt_in in zip(decoded_psbt[\"tx\"][\"vin\"], decoded_psbt[\"inputs\"]):\n            assert_equal(tx_in[\"sequence\"], MAX_BIP125_RBF_SEQUENCE)\n+           assert \"bip32_derivs\" not in psbt_in\n         assert_equal(decoded_psbt[\"tx\"][\"locktime\"], block_height+2)\n \n         # Same construction with only locktime set\n-        psbtx_info = self.nodes[0].walletcreatefundedpsbt([{\"txid\":unspent[\"txid\"], \"vout\":unspent[\"vout\"]}], [{self.nodes[2].getnewaddress():unspent[\"amount\"]+1}], block_height)\n+        psbtx_info = self.nodes[0].walletcreatefundedpsbt([{\"txid\":unspent[\"txid\"], \"vout\":unspent[\"vout\"]}], [{self.nodes[2].getnewaddress():unspent[\"amount\"]+1}], block_height, {}, True)\n         decoded_psbt = self.nodes[0].decodepsbt(psbtx_info[\"psbt\"])\n-        for tx_in in decoded_psbt[\"tx\"][\"vin\"]:\n+        for tx_in, psbt_in in zip(decoded_psbt[\"tx\"][\"vin\"], decoded_psbt[\"inputs\"]):\n             assert tx_in[\"sequence\"] > MAX_BIP125_RBF_SEQUENCE\n+            assert \"bip32_derivs\" in psbt_in\n         assert_equal(decoded_psbt[\"tx\"][\"locktime\"], block_height)\n \n         # Same construction without optional arguments"
      }
    ]
  },
  {
    "sha": "2936dbc557084be1b0cc16d73250a9f220871062",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOTM2ZGJjNTU3MDg0YmUxYjBjYzE2ZDczMjUwYTlmMjIwODcxMDYy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-08-29T09:02:14Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-09-05T18:39:36Z"
      },
      "message": "doc: Change documentation for =0 for non-boolean options\n\nPR #12713 changed the interpretation for negation of non-boolean options\n(e.g. -noconnect) to no longer set the option to 0, but to remove it\nfrom the options.\n\nI think this is better because it gets rid of the special meaning of\n'0'.\n\nHowever it needs to be documented. I attempt to do so in this PR.\nAddreses #14064.\n\nGithub-Pull: #14100\nRebased-From: e9a78e9b3b17e09f923f09c5aae0eda9dfd58e66",
      "tree": {
        "sha": "4582b21178ae45ca6ceab9c5e64f99d97da04fb9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4582b21178ae45ca6ceab9c5e64f99d97da04fb9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2936dbc557084be1b0cc16d73250a9f220871062",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2936dbc557084be1b0cc16d73250a9f220871062",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2936dbc557084be1b0cc16d73250a9f220871062",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2936dbc557084be1b0cc16d73250a9f220871062/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2307a6eb2b9dbc4fd4c50f5463db5d79d32f6caf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2307a6eb2b9dbc4fd4c50f5463db5d79d32f6caf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2307a6eb2b9dbc4fd4c50f5463db5d79d32f6caf"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "c16009a0baf4070bfd9b1773262d1753d37799fb",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2936dbc557084be1b0cc16d73250a9f220871062/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2936dbc557084be1b0cc16d73250a9f220871062/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2936dbc557084be1b0cc16d73250a9f220871062",
        "patch": "@@ -366,7 +366,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-datadir=<dir>\", \"Specify data directory\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-dbbatchsize\", strprintf(\"Maximum database write batch size in bytes (default: %u)\", nDefaultDbBatchSize), true, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-dbcache=<n>\", strprintf(\"Set database cache size in megabytes (%d to %d, default: %d)\", nMinDbCache, nMaxDbCache, nDefaultDbCache), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-debuglogfile=<file>\", strprintf(\"Specify location of debug log file. Relative paths will be prefixed by a net-specific datadir location. (0 to disable; default: %s)\", DEFAULT_DEBUGLOGFILE), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-debuglogfile=<file>\", strprintf(\"Specify location of debug log file. Relative paths will be prefixed by a net-specific datadir location. (-nodebuglogfile to disable; default: %s)\", DEFAULT_DEBUGLOGFILE), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-feefilter\", strprintf(\"Tell other nodes to filter invs to us by our mempool min fee (default: %u)\", DEFAULT_FEEFILTER), true, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-includeconf=<file>\", \"Specify additional configuration file, relative to the -datadir path (only useable from configuration file, not command line)\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-loadblock=<file>\", \"Imports blocks from external blk000??.dat file on startup\", false, OptionsCategory::OPTIONS);\n@@ -398,7 +398,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-banscore=<n>\", strprintf(\"Threshold for disconnecting misbehaving peers (default: %u)\", DEFAULT_BANSCORE_THRESHOLD), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-bantime=<n>\", strprintf(\"Number of seconds to keep misbehaving peers from reconnecting (default: %u)\", DEFAULT_MISBEHAVING_BANTIME), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-bind=<addr>\", \"Bind to given address and always listen on it. Use [host]:port notation for IPv6\", false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-connect=<ip>\", \"Connect only to the specified node; -connect=0 disables automatic connections (the rules for this peer are the same as for -addnode). This option can be specified multiple times to connect to multiple nodes.\", false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-connect=<ip>\", \"Connect only to the specified node; -noconnect disables automatic connections (the rules for this peer are the same as for -addnode). This option can be specified multiple times to connect to multiple nodes.\", false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-discover\", \"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\", false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-dns\", strprintf(\"Allow DNS lookups for -addnode, -seednode and -connect (default: %u)\", DEFAULT_NAME_LOOKUP), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-dnsseed\", \"Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect used)\", false, OptionsCategory::CONNECTION);\n@@ -412,12 +412,12 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-maxsendbuffer=<n>\", strprintf(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\", DEFAULT_MAXSENDBUFFER), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-maxtimeadjustment\", strprintf(\"Maximum allowed median peer time offset adjustment. Local perspective of time may be influenced by peers forward or backward by this amount. (default: %u seconds)\", DEFAULT_MAX_TIME_ADJUSTMENT), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-maxuploadtarget=<n>\", strprintf(\"Tries to keep outbound traffic under the given target (in MiB per 24h), 0 = no limit (default: %d)\", DEFAULT_MAX_UPLOAD_TARGET), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-onion=<ip:port>\", \"Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: -proxy)\", false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-onion=<ip:port>\", \"Use separate SOCKS5 proxy to reach peers via Tor hidden services, set -noonion to disable (default: -proxy)\", false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-onlynet=<net>\", \"Make outgoing connections only through network <net> (ipv4, ipv6 or onion). Incoming connections are not affected by this option. This option can be specified multiple times to allow multiple networks.\", false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-peerbloomfilters\", strprintf(\"Support filtering of blocks and transaction with bloom filters (default: %u)\", DEFAULT_PEERBLOOMFILTERS), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-permitbaremultisig\", strprintf(\"Relay non-P2SH multisig (default: %u)\", DEFAULT_PERMIT_BAREMULTISIG), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-port=<port>\", strprintf(\"Listen for connections on <port> (default: %u or testnet: %u)\", defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort()), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-proxy=<ip:port>\", \"Connect through SOCKS5 proxy\", false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-proxy=<ip:port>\", \"Connect through SOCKS5 proxy, set -noproxy to disable (default: disabled)\", false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-proxyrandomize\", strprintf(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\", DEFAULT_PROXYRANDOMIZE), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-seednode=<ip>\", \"Connect to a node to retrieve peer addresses, and disconnect. This option can be specified multiple times to connect to multiple nodes.\", false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-timeout=<n>\", strprintf(\"Specify connection timeout in milliseconds (minimum: 1, default: %d)\", DEFAULT_CONNECT_TIMEOUT), false, OptionsCategory::CONNECTION);\n@@ -465,7 +465,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT), true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-vbparams=deployment:start:end\", \"Use given start/end times for specified version bits deployment (regtest-only)\", true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-addrmantest\", \"Allows to test address relay on localhost\", true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-debug=<category>\", strprintf(\"Output debugging information (default: %u, supplying <category> is optional)\", 0) + \". \" +\n+    gArgs.AddArg(\"-debug=<category>\", \"Output debugging information (default: -nodebug, supplying <category> is optional). \"\n         \"If <category> is not supplied or if <category> = 1, output all debugging information. <category> can be: \" + ListLogCategories() + \".\", false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-debugexclude=<category>\", strprintf(\"Exclude debugging information for a category. Can be used in conjunction with -debug=1 to output debug logs for all categories except one or more specified categories.\"), false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-help-debug\", \"Show all debugging options (usage: --help -help-debug)\", false, OptionsCategory::DEBUG_TEST);\n@@ -478,7 +478,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-maxtxfee=<amt>\", strprintf(\"Maximum total fees (in %s) to use in a single wallet transaction or raw transaction; setting this too low may abort large transactions (default: %s)\",\n         CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MAXFEE)), false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-printpriority\", strprintf(\"Log transaction fee per kB when mining blocks (default: %u)\", DEFAULT_PRINTPRIORITY), true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -daemon. To disable logging to file, set debuglogfile=0)\", false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -daemon. To disable logging to file, set -nodebuglogfile)\", false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-shrinkdebugfile\", \"Shrink debug.log file on client startup (default: 1 when no -debug)\", false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-uacomment=<cmt>\", \"Append comment to the user agent string\", false, OptionsCategory::DEBUG_TEST);\n "
      }
    ]
  },
  {
    "sha": "6bfee8a8c2ad0c77d47bedc282a7838aab137508",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YmZlZThhOGMyYWQwYzc3ZDQ3YmVkYzI4MmE3ODM4YWFiMTM3NTA4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-09-05T18:47:27Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-09-05T18:50:53Z"
      },
      "message": "doc: Update v0.17.0.0 manpages",
      "tree": {
        "sha": "5584e3f1b9e06c57d29361bdda546faa90c34bd9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5584e3f1b9e06c57d29361bdda546faa90c34bd9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6bfee8a8c2ad0c77d47bedc282a7838aab137508",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bfee8a8c2ad0c77d47bedc282a7838aab137508",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6bfee8a8c2ad0c77d47bedc282a7838aab137508",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bfee8a8c2ad0c77d47bedc282a7838aab137508/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2936dbc557084be1b0cc16d73250a9f220871062",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2936dbc557084be1b0cc16d73250a9f220871062",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2936dbc557084be1b0cc16d73250a9f220871062"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 22,
      "deletions": 18
    },
    "files": [
      {
        "sha": "708e07c00ceeed0722d878060561accf1aadd8f2",
        "filename": "doc/man/bitcoin-cli.1",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bfee8a8c2ad0c77d47bedc282a7838aab137508/doc/man/bitcoin-cli.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bfee8a8c2ad0c77d47bedc282a7838aab137508/doc/man/bitcoin-cli.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-cli.1?ref=6bfee8a8c2ad0c77d47bedc282a7838aab137508",
        "patch": "@@ -1,5 +1,5 @@\n .\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIN-CLI \"1\" \"August 2018\" \"bitcoin-cli v0.17.0.0\" \"User Commands\"\n+.TH BITCOIN-CLI \"1\" \"September 2018\" \"bitcoin-cli v0.17.0.0\" \"User Commands\"\n .SH NAME\n bitcoin-cli \\- manual page for bitcoin-cli v0.17.0.0\n .SH SYNOPSIS"
      },
      {
        "sha": "ed347a817773c534f002848588adcd89397026ba",
        "filename": "doc/man/bitcoin-qt.1",
        "status": "modified",
        "additions": 10,
        "deletions": 8,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bfee8a8c2ad0c77d47bedc282a7838aab137508/doc/man/bitcoin-qt.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bfee8a8c2ad0c77d47bedc282a7838aab137508/doc/man/bitcoin-qt.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-qt.1?ref=6bfee8a8c2ad0c77d47bedc282a7838aab137508",
        "patch": "@@ -1,5 +1,5 @@\n .\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIN-QT \"1\" \"August 2018\" \"bitcoin-qt v0.17.0.0\" \"User Commands\"\n+.TH BITCOIN-QT \"1\" \"September 2018\" \"bitcoin-qt v0.17.0.0\" \"User Commands\"\n .SH NAME\n bitcoin-qt \\- manual page for bitcoin-qt v0.17.0.0\n .SH SYNOPSIS\n@@ -61,7 +61,8 @@ Set database cache size in megabytes (4 to 16384, default: 450)\n \\fB\\-debuglogfile=\\fR<file>\n .IP\n Specify location of debug log file. Relative paths will be prefixed by a\n-net\\-specific datadir location. (0 to disable; default: debug.log)\n+net\\-specific datadir location. (\\fB\\-nodebuglogfile\\fR to disable;\n+default: debug.log)\n .HP\n \\fB\\-includeconf=\\fR<file>\n .IP\n@@ -157,7 +158,7 @@ for IPv6\n .HP\n \\fB\\-connect=\\fR<ip>\n .IP\n-Connect only to the specified node; \\fB\\-connect\\fR=\\fI\\,0\\/\\fR disables automatic\n+Connect only to the specified node; \\fB\\-noconnect\\fR disables automatic\n connections (the rules for this peer are the same as for\n \\fB\\-addnode\\fR). This option can be specified multiple times to connect\n to multiple nodes.\n@@ -221,8 +222,8 @@ Tries to keep outbound traffic under the given target (in MiB per 24h),\n .HP\n \\fB\\-onion=\\fR<ip:port>\n .IP\n-Use separate SOCKS5 proxy to reach peers via Tor hidden services\n-(default: \\fB\\-proxy\\fR)\n+Use separate SOCKS5 proxy to reach peers via Tor hidden services, set\n+\\fB\\-noonion\\fR to disable (default: \\fB\\-proxy\\fR)\n .HP\n \\fB\\-onlynet=\\fR<net>\n .IP\n@@ -246,7 +247,8 @@ Listen for connections on <port> (default: 8333 or testnet: 18333)\n .HP\n \\fB\\-proxy=\\fR<ip:port>\n .IP\n-Connect through SOCKS5 proxy\n+Connect through SOCKS5 proxy, set \\fB\\-noproxy\\fR to disable (default:\n+disabled)\n .HP\n \\fB\\-proxyrandomize\\fR\n .IP\n@@ -418,7 +420,7 @@ Debugging/Testing options:\n .HP\n \\fB\\-debug=\\fR<category>\n .IP\n-Output debugging information (default: 0, supplying <category> is\n+Output debugging information (default: \\fB\\-nodebug\\fR, supplying <category> is\n optional). If <category> is not supplied or if <category> = 1,\n output all debugging information. <category> can be: net, tor,\n mempool, http, bench, zmq, db, rpc, estimatefee, addrman,\n@@ -452,7 +454,7 @@ transaction; setting this too low may abort large transactions\n \\fB\\-printtoconsole\\fR\n .IP\n Send trace/debug info to console (default: 1 when no \\fB\\-daemon\\fR. To disable\n-logging to file, set debuglogfile=0)\n+logging to file, set \\fB\\-nodebuglogfile\\fR)\n .HP\n \\fB\\-shrinkdebugfile\\fR\n .IP"
      },
      {
        "sha": "d97bc20d4386abdabda517ac5d9217bef9524dfe",
        "filename": "doc/man/bitcoin-tx.1",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bfee8a8c2ad0c77d47bedc282a7838aab137508/doc/man/bitcoin-tx.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bfee8a8c2ad0c77d47bedc282a7838aab137508/doc/man/bitcoin-tx.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-tx.1?ref=6bfee8a8c2ad0c77d47bedc282a7838aab137508",
        "patch": "@@ -1,5 +1,5 @@\n .\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIN-TX \"1\" \"August 2018\" \"bitcoin-tx v0.17.0.0\" \"User Commands\"\n+.TH BITCOIN-TX \"1\" \"September 2018\" \"bitcoin-tx v0.17.0.0\" \"User Commands\"\n .SH NAME\n bitcoin-tx \\- manual page for bitcoin-tx v0.17.0.0\n .SH SYNOPSIS"
      },
      {
        "sha": "2f4313bfadf48043c8c67965309acb345e9d4e3a",
        "filename": "doc/man/bitcoind.1",
        "status": "modified",
        "additions": 10,
        "deletions": 8,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bfee8a8c2ad0c77d47bedc282a7838aab137508/doc/man/bitcoind.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bfee8a8c2ad0c77d47bedc282a7838aab137508/doc/man/bitcoind.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoind.1?ref=6bfee8a8c2ad0c77d47bedc282a7838aab137508",
        "patch": "@@ -1,5 +1,5 @@\n .\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIND \"1\" \"August 2018\" \"bitcoind v0.17.0.0\" \"User Commands\"\n+.TH BITCOIND \"1\" \"September 2018\" \"bitcoind v0.17.0.0\" \"User Commands\"\n .SH NAME\n bitcoind \\- manual page for bitcoind v0.17.0.0\n .SH SYNOPSIS\n@@ -61,7 +61,8 @@ Set database cache size in megabytes (4 to 16384, default: 450)\n \\fB\\-debuglogfile=\\fR<file>\n .IP\n Specify location of debug log file. Relative paths will be prefixed by a\n-net\\-specific datadir location. (0 to disable; default: debug.log)\n+net\\-specific datadir location. (\\fB\\-nodebuglogfile\\fR to disable;\n+default: debug.log)\n .HP\n \\fB\\-includeconf=\\fR<file>\n .IP\n@@ -157,7 +158,7 @@ for IPv6\n .HP\n \\fB\\-connect=\\fR<ip>\n .IP\n-Connect only to the specified node; \\fB\\-connect\\fR=\\fI\\,0\\/\\fR disables automatic\n+Connect only to the specified node; \\fB\\-noconnect\\fR disables automatic\n connections (the rules for this peer are the same as for\n \\fB\\-addnode\\fR). This option can be specified multiple times to connect\n to multiple nodes.\n@@ -221,8 +222,8 @@ Tries to keep outbound traffic under the given target (in MiB per 24h),\n .HP\n \\fB\\-onion=\\fR<ip:port>\n .IP\n-Use separate SOCKS5 proxy to reach peers via Tor hidden services\n-(default: \\fB\\-proxy\\fR)\n+Use separate SOCKS5 proxy to reach peers via Tor hidden services, set\n+\\fB\\-noonion\\fR to disable (default: \\fB\\-proxy\\fR)\n .HP\n \\fB\\-onlynet=\\fR<net>\n .IP\n@@ -246,7 +247,8 @@ Listen for connections on <port> (default: 8333 or testnet: 18333)\n .HP\n \\fB\\-proxy=\\fR<ip:port>\n .IP\n-Connect through SOCKS5 proxy\n+Connect through SOCKS5 proxy, set \\fB\\-noproxy\\fR to disable (default:\n+disabled)\n .HP\n \\fB\\-proxyrandomize\\fR\n .IP\n@@ -418,7 +420,7 @@ Debugging/Testing options:\n .HP\n \\fB\\-debug=\\fR<category>\n .IP\n-Output debugging information (default: 0, supplying <category> is\n+Output debugging information (default: \\fB\\-nodebug\\fR, supplying <category> is\n optional). If <category> is not supplied or if <category> = 1,\n output all debugging information. <category> can be: net, tor,\n mempool, http, bench, zmq, db, rpc, estimatefee, addrman,\n@@ -452,7 +454,7 @@ transaction; setting this too low may abort large transactions\n \\fB\\-printtoconsole\\fR\n .IP\n Send trace/debug info to console (default: 1 when no \\fB\\-daemon\\fR. To disable\n-logging to file, set debuglogfile=0)\n+logging to file, set \\fB\\-nodebuglogfile\\fR)\n .HP\n \\fB\\-shrinkdebugfile\\fR\n .IP"
      }
    ]
  },
  {
    "sha": "6ba1f15432962f5f8092dd5e6b23cde823d4ddac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YmExZjE1NDMyOTYyZjVmODA5MmRkNWU2YjIzY2RlODIzZDRkZGFj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-09-06T09:21:31Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-09-06T09:22:00Z"
      },
      "message": "Merge #14152: [0.17] doc: Change documentation for =0 for non-boolean options\n\n6bfee8a8c2ad0c77d47bedc282a7838aab137508 doc: Update v0.17.0.0 manpages (MarcoFalke)\n2936dbc557084be1b0cc16d73250a9f220871062 doc: Change documentation for =0 for non-boolean options (Wladimir J. van der Laan)\n\nPull request description:\n\n  Github-Pull: #14100\n  Rebased-From: e9a78e9b3b17e09f923f09c5aae0eda9dfd58e66\n\n  Includes the bumped manpages.\n\nTree-SHA512: 73d2dadb45418882122313975c0ab0e9f58310697d996dd2edeb400ebe73b3a45f1157c8a7fe65ae1f53d9ce68a88aae7c701f3e82e0b4db4c9417b36ddfecc0",
      "tree": {
        "sha": "5584e3f1b9e06c57d29361bdda546faa90c34bd9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5584e3f1b9e06c57d29361bdda546faa90c34bd9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6ba1f15432962f5f8092dd5e6b23cde823d4ddac",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAluQ8bgACgkQHkrtYphs\n0l2lNQf9HwpDDJiBmWbZY8piWbyuzTsIbiKI1aOgyyDhoCaIj68iAwN6qm7M2nEo\nAowipzPcfTXNNxqKA/N0LYOAmU5okPD3/mBS3oMHBpz0YaKEufxBbbR/ijtS0yFF\n6cqqQz0HiOimsiV0vkIChIuKN+Hcgu5MQH/ATMQWmakYxfYliSBIPbd+yC49KcCj\nDyL68aOhCuVQpavytfoiVIH6zOQUUDCTHHIc8xZ11MR5DT6Ua0UNx5R5r4T4aDoU\noe1Dnp6zcQaT5VSdKvZQiy2YkHAVgzBPQg5AhREuicG3E8fM+i2oev93kX9pYrJG\n4GiVltAESUo63BelT03ajqUYKdGu5Q==\n=KMzL\n-----END PGP SIGNATURE-----",
        "payload": "tree 5584e3f1b9e06c57d29361bdda546faa90c34bd9\nparent 2307a6eb2b9dbc4fd4c50f5463db5d79d32f6caf\nparent 6bfee8a8c2ad0c77d47bedc282a7838aab137508\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1536225691 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1536225720 +0200\n\nMerge #14152: [0.17] doc: Change documentation for =0 for non-boolean options\n\n6bfee8a8c2ad0c77d47bedc282a7838aab137508 doc: Update v0.17.0.0 manpages (MarcoFalke)\n2936dbc557084be1b0cc16d73250a9f220871062 doc: Change documentation for =0 for non-boolean options (Wladimir J. van der Laan)\n\nPull request description:\n\n  Github-Pull: #14100\n  Rebased-From: e9a78e9b3b17e09f923f09c5aae0eda9dfd58e66\n\n  Includes the bumped manpages.\n\nTree-SHA512: 73d2dadb45418882122313975c0ab0e9f58310697d996dd2edeb400ebe73b3a45f1157c8a7fe65ae1f53d9ce68a88aae7c701f3e82e0b4db4c9417b36ddfecc0\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ba1f15432962f5f8092dd5e6b23cde823d4ddac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6ba1f15432962f5f8092dd5e6b23cde823d4ddac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ba1f15432962f5f8092dd5e6b23cde823d4ddac/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2307a6eb2b9dbc4fd4c50f5463db5d79d32f6caf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2307a6eb2b9dbc4fd4c50f5463db5d79d32f6caf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2307a6eb2b9dbc4fd4c50f5463db5d79d32f6caf"
      },
      {
        "sha": "6bfee8a8c2ad0c77d47bedc282a7838aab137508",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bfee8a8c2ad0c77d47bedc282a7838aab137508",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6bfee8a8c2ad0c77d47bedc282a7838aab137508"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 28,
      "deletions": 24
    },
    "files": [
      {
        "sha": "708e07c00ceeed0722d878060561accf1aadd8f2",
        "filename": "doc/man/bitcoin-cli.1",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ba1f15432962f5f8092dd5e6b23cde823d4ddac/doc/man/bitcoin-cli.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ba1f15432962f5f8092dd5e6b23cde823d4ddac/doc/man/bitcoin-cli.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-cli.1?ref=6ba1f15432962f5f8092dd5e6b23cde823d4ddac",
        "patch": "@@ -1,5 +1,5 @@\n .\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIN-CLI \"1\" \"August 2018\" \"bitcoin-cli v0.17.0.0\" \"User Commands\"\n+.TH BITCOIN-CLI \"1\" \"September 2018\" \"bitcoin-cli v0.17.0.0\" \"User Commands\"\n .SH NAME\n bitcoin-cli \\- manual page for bitcoin-cli v0.17.0.0\n .SH SYNOPSIS"
      },
      {
        "sha": "ed347a817773c534f002848588adcd89397026ba",
        "filename": "doc/man/bitcoin-qt.1",
        "status": "modified",
        "additions": 10,
        "deletions": 8,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ba1f15432962f5f8092dd5e6b23cde823d4ddac/doc/man/bitcoin-qt.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ba1f15432962f5f8092dd5e6b23cde823d4ddac/doc/man/bitcoin-qt.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-qt.1?ref=6ba1f15432962f5f8092dd5e6b23cde823d4ddac",
        "patch": "@@ -1,5 +1,5 @@\n .\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIN-QT \"1\" \"August 2018\" \"bitcoin-qt v0.17.0.0\" \"User Commands\"\n+.TH BITCOIN-QT \"1\" \"September 2018\" \"bitcoin-qt v0.17.0.0\" \"User Commands\"\n .SH NAME\n bitcoin-qt \\- manual page for bitcoin-qt v0.17.0.0\n .SH SYNOPSIS\n@@ -61,7 +61,8 @@ Set database cache size in megabytes (4 to 16384, default: 450)\n \\fB\\-debuglogfile=\\fR<file>\n .IP\n Specify location of debug log file. Relative paths will be prefixed by a\n-net\\-specific datadir location. (0 to disable; default: debug.log)\n+net\\-specific datadir location. (\\fB\\-nodebuglogfile\\fR to disable;\n+default: debug.log)\n .HP\n \\fB\\-includeconf=\\fR<file>\n .IP\n@@ -157,7 +158,7 @@ for IPv6\n .HP\n \\fB\\-connect=\\fR<ip>\n .IP\n-Connect only to the specified node; \\fB\\-connect\\fR=\\fI\\,0\\/\\fR disables automatic\n+Connect only to the specified node; \\fB\\-noconnect\\fR disables automatic\n connections (the rules for this peer are the same as for\n \\fB\\-addnode\\fR). This option can be specified multiple times to connect\n to multiple nodes.\n@@ -221,8 +222,8 @@ Tries to keep outbound traffic under the given target (in MiB per 24h),\n .HP\n \\fB\\-onion=\\fR<ip:port>\n .IP\n-Use separate SOCKS5 proxy to reach peers via Tor hidden services\n-(default: \\fB\\-proxy\\fR)\n+Use separate SOCKS5 proxy to reach peers via Tor hidden services, set\n+\\fB\\-noonion\\fR to disable (default: \\fB\\-proxy\\fR)\n .HP\n \\fB\\-onlynet=\\fR<net>\n .IP\n@@ -246,7 +247,8 @@ Listen for connections on <port> (default: 8333 or testnet: 18333)\n .HP\n \\fB\\-proxy=\\fR<ip:port>\n .IP\n-Connect through SOCKS5 proxy\n+Connect through SOCKS5 proxy, set \\fB\\-noproxy\\fR to disable (default:\n+disabled)\n .HP\n \\fB\\-proxyrandomize\\fR\n .IP\n@@ -418,7 +420,7 @@ Debugging/Testing options:\n .HP\n \\fB\\-debug=\\fR<category>\n .IP\n-Output debugging information (default: 0, supplying <category> is\n+Output debugging information (default: \\fB\\-nodebug\\fR, supplying <category> is\n optional). If <category> is not supplied or if <category> = 1,\n output all debugging information. <category> can be: net, tor,\n mempool, http, bench, zmq, db, rpc, estimatefee, addrman,\n@@ -452,7 +454,7 @@ transaction; setting this too low may abort large transactions\n \\fB\\-printtoconsole\\fR\n .IP\n Send trace/debug info to console (default: 1 when no \\fB\\-daemon\\fR. To disable\n-logging to file, set debuglogfile=0)\n+logging to file, set \\fB\\-nodebuglogfile\\fR)\n .HP\n \\fB\\-shrinkdebugfile\\fR\n .IP"
      },
      {
        "sha": "d97bc20d4386abdabda517ac5d9217bef9524dfe",
        "filename": "doc/man/bitcoin-tx.1",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ba1f15432962f5f8092dd5e6b23cde823d4ddac/doc/man/bitcoin-tx.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ba1f15432962f5f8092dd5e6b23cde823d4ddac/doc/man/bitcoin-tx.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-tx.1?ref=6ba1f15432962f5f8092dd5e6b23cde823d4ddac",
        "patch": "@@ -1,5 +1,5 @@\n .\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIN-TX \"1\" \"August 2018\" \"bitcoin-tx v0.17.0.0\" \"User Commands\"\n+.TH BITCOIN-TX \"1\" \"September 2018\" \"bitcoin-tx v0.17.0.0\" \"User Commands\"\n .SH NAME\n bitcoin-tx \\- manual page for bitcoin-tx v0.17.0.0\n .SH SYNOPSIS"
      },
      {
        "sha": "2f4313bfadf48043c8c67965309acb345e9d4e3a",
        "filename": "doc/man/bitcoind.1",
        "status": "modified",
        "additions": 10,
        "deletions": 8,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ba1f15432962f5f8092dd5e6b23cde823d4ddac/doc/man/bitcoind.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ba1f15432962f5f8092dd5e6b23cde823d4ddac/doc/man/bitcoind.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoind.1?ref=6ba1f15432962f5f8092dd5e6b23cde823d4ddac",
        "patch": "@@ -1,5 +1,5 @@\n .\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.6.\n-.TH BITCOIND \"1\" \"August 2018\" \"bitcoind v0.17.0.0\" \"User Commands\"\n+.TH BITCOIND \"1\" \"September 2018\" \"bitcoind v0.17.0.0\" \"User Commands\"\n .SH NAME\n bitcoind \\- manual page for bitcoind v0.17.0.0\n .SH SYNOPSIS\n@@ -61,7 +61,8 @@ Set database cache size in megabytes (4 to 16384, default: 450)\n \\fB\\-debuglogfile=\\fR<file>\n .IP\n Specify location of debug log file. Relative paths will be prefixed by a\n-net\\-specific datadir location. (0 to disable; default: debug.log)\n+net\\-specific datadir location. (\\fB\\-nodebuglogfile\\fR to disable;\n+default: debug.log)\n .HP\n \\fB\\-includeconf=\\fR<file>\n .IP\n@@ -157,7 +158,7 @@ for IPv6\n .HP\n \\fB\\-connect=\\fR<ip>\n .IP\n-Connect only to the specified node; \\fB\\-connect\\fR=\\fI\\,0\\/\\fR disables automatic\n+Connect only to the specified node; \\fB\\-noconnect\\fR disables automatic\n connections (the rules for this peer are the same as for\n \\fB\\-addnode\\fR). This option can be specified multiple times to connect\n to multiple nodes.\n@@ -221,8 +222,8 @@ Tries to keep outbound traffic under the given target (in MiB per 24h),\n .HP\n \\fB\\-onion=\\fR<ip:port>\n .IP\n-Use separate SOCKS5 proxy to reach peers via Tor hidden services\n-(default: \\fB\\-proxy\\fR)\n+Use separate SOCKS5 proxy to reach peers via Tor hidden services, set\n+\\fB\\-noonion\\fR to disable (default: \\fB\\-proxy\\fR)\n .HP\n \\fB\\-onlynet=\\fR<net>\n .IP\n@@ -246,7 +247,8 @@ Listen for connections on <port> (default: 8333 or testnet: 18333)\n .HP\n \\fB\\-proxy=\\fR<ip:port>\n .IP\n-Connect through SOCKS5 proxy\n+Connect through SOCKS5 proxy, set \\fB\\-noproxy\\fR to disable (default:\n+disabled)\n .HP\n \\fB\\-proxyrandomize\\fR\n .IP\n@@ -418,7 +420,7 @@ Debugging/Testing options:\n .HP\n \\fB\\-debug=\\fR<category>\n .IP\n-Output debugging information (default: 0, supplying <category> is\n+Output debugging information (default: \\fB\\-nodebug\\fR, supplying <category> is\n optional). If <category> is not supplied or if <category> = 1,\n output all debugging information. <category> can be: net, tor,\n mempool, http, bench, zmq, db, rpc, estimatefee, addrman,\n@@ -452,7 +454,7 @@ transaction; setting this too low may abort large transactions\n \\fB\\-printtoconsole\\fR\n .IP\n Send trace/debug info to console (default: 1 when no \\fB\\-daemon\\fR. To disable\n-logging to file, set debuglogfile=0)\n+logging to file, set \\fB\\-nodebuglogfile\\fR)\n .HP\n \\fB\\-shrinkdebugfile\\fR\n .IP"
      },
      {
        "sha": "c16009a0baf4070bfd9b1773262d1753d37799fb",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ba1f15432962f5f8092dd5e6b23cde823d4ddac/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ba1f15432962f5f8092dd5e6b23cde823d4ddac/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=6ba1f15432962f5f8092dd5e6b23cde823d4ddac",
        "patch": "@@ -366,7 +366,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-datadir=<dir>\", \"Specify data directory\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-dbbatchsize\", strprintf(\"Maximum database write batch size in bytes (default: %u)\", nDefaultDbBatchSize), true, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-dbcache=<n>\", strprintf(\"Set database cache size in megabytes (%d to %d, default: %d)\", nMinDbCache, nMaxDbCache, nDefaultDbCache), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-debuglogfile=<file>\", strprintf(\"Specify location of debug log file. Relative paths will be prefixed by a net-specific datadir location. (0 to disable; default: %s)\", DEFAULT_DEBUGLOGFILE), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-debuglogfile=<file>\", strprintf(\"Specify location of debug log file. Relative paths will be prefixed by a net-specific datadir location. (-nodebuglogfile to disable; default: %s)\", DEFAULT_DEBUGLOGFILE), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-feefilter\", strprintf(\"Tell other nodes to filter invs to us by our mempool min fee (default: %u)\", DEFAULT_FEEFILTER), true, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-includeconf=<file>\", \"Specify additional configuration file, relative to the -datadir path (only useable from configuration file, not command line)\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-loadblock=<file>\", \"Imports blocks from external blk000??.dat file on startup\", false, OptionsCategory::OPTIONS);\n@@ -398,7 +398,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-banscore=<n>\", strprintf(\"Threshold for disconnecting misbehaving peers (default: %u)\", DEFAULT_BANSCORE_THRESHOLD), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-bantime=<n>\", strprintf(\"Number of seconds to keep misbehaving peers from reconnecting (default: %u)\", DEFAULT_MISBEHAVING_BANTIME), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-bind=<addr>\", \"Bind to given address and always listen on it. Use [host]:port notation for IPv6\", false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-connect=<ip>\", \"Connect only to the specified node; -connect=0 disables automatic connections (the rules for this peer are the same as for -addnode). This option can be specified multiple times to connect to multiple nodes.\", false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-connect=<ip>\", \"Connect only to the specified node; -noconnect disables automatic connections (the rules for this peer are the same as for -addnode). This option can be specified multiple times to connect to multiple nodes.\", false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-discover\", \"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\", false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-dns\", strprintf(\"Allow DNS lookups for -addnode, -seednode and -connect (default: %u)\", DEFAULT_NAME_LOOKUP), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-dnsseed\", \"Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect used)\", false, OptionsCategory::CONNECTION);\n@@ -412,12 +412,12 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-maxsendbuffer=<n>\", strprintf(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\", DEFAULT_MAXSENDBUFFER), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-maxtimeadjustment\", strprintf(\"Maximum allowed median peer time offset adjustment. Local perspective of time may be influenced by peers forward or backward by this amount. (default: %u seconds)\", DEFAULT_MAX_TIME_ADJUSTMENT), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-maxuploadtarget=<n>\", strprintf(\"Tries to keep outbound traffic under the given target (in MiB per 24h), 0 = no limit (default: %d)\", DEFAULT_MAX_UPLOAD_TARGET), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-onion=<ip:port>\", \"Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: -proxy)\", false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-onion=<ip:port>\", \"Use separate SOCKS5 proxy to reach peers via Tor hidden services, set -noonion to disable (default: -proxy)\", false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-onlynet=<net>\", \"Make outgoing connections only through network <net> (ipv4, ipv6 or onion). Incoming connections are not affected by this option. This option can be specified multiple times to allow multiple networks.\", false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-peerbloomfilters\", strprintf(\"Support filtering of blocks and transaction with bloom filters (default: %u)\", DEFAULT_PEERBLOOMFILTERS), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-permitbaremultisig\", strprintf(\"Relay non-P2SH multisig (default: %u)\", DEFAULT_PERMIT_BAREMULTISIG), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-port=<port>\", strprintf(\"Listen for connections on <port> (default: %u or testnet: %u)\", defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort()), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-proxy=<ip:port>\", \"Connect through SOCKS5 proxy\", false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-proxy=<ip:port>\", \"Connect through SOCKS5 proxy, set -noproxy to disable (default: disabled)\", false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-proxyrandomize\", strprintf(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\", DEFAULT_PROXYRANDOMIZE), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-seednode=<ip>\", \"Connect to a node to retrieve peer addresses, and disconnect. This option can be specified multiple times to connect to multiple nodes.\", false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-timeout=<n>\", strprintf(\"Specify connection timeout in milliseconds (minimum: 1, default: %d)\", DEFAULT_CONNECT_TIMEOUT), false, OptionsCategory::CONNECTION);\n@@ -465,7 +465,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT), true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-vbparams=deployment:start:end\", \"Use given start/end times for specified version bits deployment (regtest-only)\", true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-addrmantest\", \"Allows to test address relay on localhost\", true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-debug=<category>\", strprintf(\"Output debugging information (default: %u, supplying <category> is optional)\", 0) + \". \" +\n+    gArgs.AddArg(\"-debug=<category>\", \"Output debugging information (default: -nodebug, supplying <category> is optional). \"\n         \"If <category> is not supplied or if <category> = 1, output all debugging information. <category> can be: \" + ListLogCategories() + \".\", false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-debugexclude=<category>\", strprintf(\"Exclude debugging information for a category. Can be used in conjunction with -debug=1 to output debug logs for all categories except one or more specified categories.\"), false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-help-debug\", \"Show all debugging options (usage: --help -help-debug)\", false, OptionsCategory::DEBUG_TEST);\n@@ -478,7 +478,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-maxtxfee=<amt>\", strprintf(\"Maximum total fees (in %s) to use in a single wallet transaction or raw transaction; setting this too low may abort large transactions (default: %s)\",\n         CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MAXFEE)), false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-printpriority\", strprintf(\"Log transaction fee per kB when mining blocks (default: %u)\", DEFAULT_PRINTPRIORITY), true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -daemon. To disable logging to file, set debuglogfile=0)\", false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -daemon. To disable logging to file, set -nodebuglogfile)\", false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-shrinkdebugfile\", \"Shrink debug.log file on client startup (default: 1 when no -debug)\", false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-uacomment=<cmt>\", \"Append comment to the user agent string\", false, OptionsCategory::DEBUG_TEST);\n "
      }
    ]
  },
  {
    "sha": "83aafd5b3266ea2f6b7ff33d956548085dc63c32",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4M2FhZmQ1YjMyNjZlYTJmNmI3ZmYzM2Q5NTY1NDgwODVkYzYzYzMy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-08-30T11:04:19Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-09-06T11:54:01Z"
      },
      "message": "util: Report parse errors in configuration file\n\nReport errors while parsing the configuration file, instead of silently\nignoring them.\n\n    $ src/bitcoind -regtest\n    Error reading configuration file: parse error on line 22: nodebuglogfile, if you intended to specify a negated option, use nodebuglogfile=1 instead\n    $ src/bitcoind -regtest\n    Error reading configuration file: parse error on line 22: sdafsdfafs\n    $ src/bitcoind -regtest\n    Error reading configuration file: parse error on line 24: -nodebuglogfile=1, options in the configuration file must be specified without leading -\n\nGithub-Pull: #14105\nRebased-From: a66c0f78a941968340f030911765a84219908c4d\nTree-SHA512: 2b6be1ab643623e6ef9b53354820147a6c5d2baae3795ffe428fc60d8563ec00a68a379aee4029380f80f892abe23763afb1c75c32b60a13bffe7b82496bf2bb",
      "tree": {
        "sha": "2b2d93127b5c150d4ffb931d573e6f068f365c3e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2b2d93127b5c150d4ffb931d573e6f068f365c3e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/83aafd5b3266ea2f6b7ff33d956548085dc63c32",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAluRFVkACgkQHkrtYphs\n0l325Af+KvwIHkCxCPtGqL6aFrWwxjCMnWg9uUIPLzZW2RhtmKNiqQvYwoE4TY88\nYjJdYDLR7ovF/NDbGUgStrfI+lkzpA0RwLi2vmMU3tXmYbeNq3WMFz40ty/bZzzg\n42rYikI+lAy4Y6zZ61L+9OTcVaJ2Nfm/yQW5oYj64VuDUX4cz8nAeQ/kOl1CYJKL\n2PjpumWaBq2OeAeLfmOFfg2TSjeaJRWXnms7Wdc8ZxdBsonhYRuvf1sq4sbxn2P4\nqhRG3suGG25h+7IyJj3HHe+0HYTBiYgbd28tSWk7v2PbnEO/RMzYZlcWmFE5sgW9\nhw5S0nff//xON6LBxMJI19uw3zgcdw==\n=3/Pt\n-----END PGP SIGNATURE-----",
        "payload": "tree 2b2d93127b5c150d4ffb931d573e6f068f365c3e\nparent 6ba1f15432962f5f8092dd5e6b23cde823d4ddac\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1535627059 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1536234841 +0200\n\nutil: Report parse errors in configuration file\n\nReport errors while parsing the configuration file, instead of silently\nignoring them.\n\n    $ src/bitcoind -regtest\n    Error reading configuration file: parse error on line 22: nodebuglogfile, if you intended to specify a negated option, use nodebuglogfile=1 instead\n    $ src/bitcoind -regtest\n    Error reading configuration file: parse error on line 22: sdafsdfafs\n    $ src/bitcoind -regtest\n    Error reading configuration file: parse error on line 24: -nodebuglogfile=1, options in the configuration file must be specified without leading -\n\nGithub-Pull: #14105\nRebased-From: a66c0f78a941968340f030911765a84219908c4d\nTree-SHA512: 2b6be1ab643623e6ef9b53354820147a6c5d2baae3795ffe428fc60d8563ec00a68a379aee4029380f80f892abe23763afb1c75c32b60a13bffe7b82496bf2bb\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83aafd5b3266ea2f6b7ff33d956548085dc63c32",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/83aafd5b3266ea2f6b7ff33d956548085dc63c32",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83aafd5b3266ea2f6b7ff33d956548085dc63c32/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6ba1f15432962f5f8092dd5e6b23cde823d4ddac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ba1f15432962f5f8092dd5e6b23cde823d4ddac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6ba1f15432962f5f8092dd5e6b23cde823d4ddac"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 18,
      "deletions": 5
    },
    "files": [
      {
        "sha": "a391c5e857bf09ed09b8980734309204de9a60b1",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 5,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83aafd5b3266ea2f6b7ff33d956548085dc63c32/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83aafd5b3266ea2f6b7ff33d956548085dc63c32/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=83aafd5b3266ea2f6b7ff33d956548085dc63c32",
        "patch": "@@ -820,11 +820,11 @@ static std::string TrimString(const std::string& str, const std::string& pattern\n     return str.substr(front, end - front + 1);\n }\n \n-static std::vector<std::pair<std::string, std::string>> GetConfigOptions(std::istream& stream)\n+static bool GetConfigOptions(std::istream& stream, std::string& error, std::vector<std::pair<std::string, std::string>> &options)\n {\n-    std::vector<std::pair<std::string, std::string>> options;\n     std::string str, prefix;\n     std::string::size_type pos;\n+    int linenr = 1;\n     while (std::getline(stream, str)) {\n         if ((pos = str.find('#')) != std::string::npos) {\n             str = str.substr(0, pos);\n@@ -834,21 +834,34 @@ static std::vector<std::pair<std::string, std::string>> GetConfigOptions(std::is\n         if (!str.empty()) {\n             if (*str.begin() == '[' && *str.rbegin() == ']') {\n                 prefix = str.substr(1, str.size() - 2) + '.';\n+            } else if (*str.begin() == '-') {\n+                error = strprintf(\"parse error on line %i: %s, options in configuration file must be specified without leading -\", linenr, str);\n+                return false;\n             } else if ((pos = str.find('=')) != std::string::npos) {\n                 std::string name = prefix + TrimString(str.substr(0, pos), pattern);\n                 std::string value = TrimString(str.substr(pos + 1), pattern);\n                 options.emplace_back(name, value);\n+            } else {\n+                error = strprintf(\"parse error on line %i: %s\", linenr, str);\n+                if (str.size() >= 2 && str.substr(0, 2) == \"no\") {\n+                    error += strprintf(\", if you intended to specify a negated option, use %s=1 instead\", str);\n+                }\n+                return false;\n             }\n         }\n+        ++linenr;\n     }\n-    return options;\n+    return true;\n }\n \n bool ArgsManager::ReadConfigStream(std::istream& stream, std::string& error, bool ignore_invalid_keys)\n {\n     LOCK(cs_args);\n-\n-    for (const std::pair<std::string, std::string>& option : GetConfigOptions(stream)) {\n+    std::vector<std::pair<std::string, std::string>> options;\n+    if (!GetConfigOptions(stream, error, options)) {\n+        return false;\n+    }\n+    for (const std::pair<std::string, std::string>& option : options) {\n         std::string strKey = std::string(\"-\") + option.first;\n         std::string strValue = option.second;\n "
      }
    ]
  },
  {
    "sha": "eb202ea21de1fbcc32fb3db63fcce4135b7a2849",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYjIwMmVhMjFkZTFmYmNjMzJmYjNkYjYzZmNjZTQxMzViN2EyODQ5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-09-06T09:29:40Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-09-06T11:54:05Z"
      },
      "message": "test: Add test for config file parsing errors\n\nGithub-Pull: #14105\nRebased-From: ed2332aeffb071a3404be9cff8f9fb8a81a9fbfb\nTree-SHA512: 17fa88a2848f1c9c9c8a127b5ea4c45761ce8e06a609dd40f8e90bb9117d88c9d2c81e752c9c0f1a44ecadbb5bedd2973bc4548da2a6d463c789797191e85ab1",
      "tree": {
        "sha": "8a1f7e378287fc522c99b6a4b800bcb412943220",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8a1f7e378287fc522c99b6a4b800bcb412943220"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eb202ea21de1fbcc32fb3db63fcce4135b7a2849",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAluRFV0ACgkQHkrtYphs\n0l0b0gf9FIWuFw734Kk7b1InGDDXKXEY7dr+ksPDadPwA4kpQfq6iAw/fxFc6dkL\nNwm3BOmWdds2MAL7AEVCGRkNy4Tjfy3b0DB/MFghyCq4S30XLuupSLXtz4KKLnHu\nDCGbUhEhVCp7Bw/48RD9V5/sAeIsqjOyvjZBl8focp7Bv7bd0WKzhyKSTIH+qQni\nKqJtwiX8JS73s3mq2vCCzxJTkvOPDpv6Z61yRLQasRWJPURcwA28a5KAl+5dW4lf\n8MxvofqLLcKQRod8BnLbZtFBnfKobhndazQX6+wGBnAJMhtDh3pU1pNWZFh4QPsP\ni4bquVAUlg720iT88SNYv22rJOyKQw==\n=SGFC\n-----END PGP SIGNATURE-----",
        "payload": "tree 8a1f7e378287fc522c99b6a4b800bcb412943220\nparent 83aafd5b3266ea2f6b7ff33d956548085dc63c32\nauthor MarcoFalke <falke.marco@gmail.com> 1536226180 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1536234845 +0200\n\ntest: Add test for config file parsing errors\n\nGithub-Pull: #14105\nRebased-From: ed2332aeffb071a3404be9cff8f9fb8a81a9fbfb\nTree-SHA512: 17fa88a2848f1c9c9c8a127b5ea4c45761ce8e06a609dd40f8e90bb9117d88c9d2c81e752c9c0f1a44ecadbb5bedd2973bc4548da2a6d463c789797191e85ab1\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb202ea21de1fbcc32fb3db63fcce4135b7a2849",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eb202ea21de1fbcc32fb3db63fcce4135b7a2849",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb202ea21de1fbcc32fb3db63fcce4135b7a2849/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "83aafd5b3266ea2f6b7ff33d956548085dc63c32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83aafd5b3266ea2f6b7ff33d956548085dc63c32",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/83aafd5b3266ea2f6b7ff33d956548085dc63c32"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 21,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9be59b32b42ecf777c1f8be1922db3ea2b36e3c6",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb202ea21de1fbcc32fb3db63fcce4135b7a2849/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb202ea21de1fbcc32fb3db63fcce4135b7a2849/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=eb202ea21de1fbcc32fb3db63fcce4135b7a2849",
        "patch": "@@ -14,8 +14,29 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n+    def test_config_file_parser(self):\n+        # Assume node is stopped\n+\n+        inc_conf_file_path = os.path.join(self.nodes[0].datadir, 'include.conf')\n+        with open(os.path.join(self.nodes[0].datadir, 'bitcoin.conf'), 'a', encoding='utf-8') as conf:\n+            conf.write('includeconf={}\\n'.format(inc_conf_file_path))\n+\n+        with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n+            conf.write('-dash=1\\n')\n+        self.nodes[0].assert_start_raises_init_error(expected_msg='Error reading configuration file: parse error on line 1: -dash=1, options in configuration file must be specified without leading -')\n+\n+        with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n+            conf.write('nono\\n')\n+        self.nodes[0].assert_start_raises_init_error(expected_msg='Error reading configuration file: parse error on line 1: nono, if you intended to specify a negated option, use nono=1 instead')\n+\n+        with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n+            conf.write('')  # clear\n+\n     def run_test(self):\n         self.stop_node(0)\n+\n+        self.test_config_file_parser()\n+\n         # Remove the -datadir argument so it doesn't override the config file\n         self.nodes[0].args = [arg for arg in self.nodes[0].args if not arg.startswith(\"-datadir\")]\n "
      }
    ]
  },
  {
    "sha": "0f681cecadb9472b3d3ae2c1dd23d8173dc2e316",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZjY4MWNlY2FkYjk0NzJiM2QzYWUyYzFkZDIzZDgxNzNkYzJlMzE2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-08-28T21:09:36Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-09-06T12:51:54Z"
      },
      "message": "Add descriptor reference documentation\n\nGithub-Pull: #14096\nRebased-From: 9254ffcf2d910ecb0f9ecbeef6d40a2008a44870\nTree-SHA512: 1fc466177dbe3b57b0025c102b1e75e4b05544440819885da7a85b70d20329fc3f6f4cbf89d7d6a48881e6ad176d81f7396f02925586140e19468a2f28f3414e",
      "tree": {
        "sha": "0aceb983a21b0c244804f6a4a5609e1e7fe046cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0aceb983a21b0c244804f6a4a5609e1e7fe046cf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0f681cecadb9472b3d3ae2c1dd23d8173dc2e316",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAluRIuoACgkQHkrtYphs\n0l07NAgAxXvOT/A1XDvcXnejQdeTxA4fKw0wMe4SGXLdCaHRTlAECOQHekMLq92c\nequX10EqqPgflB4X+hym1Utu5fXWWPKMPYX7Iu8WYPe+areJNJv7WeO+M0yXrMsq\nhln2BMKrkopbMOQLw+J8BMRHfS63zR9y5DVggLB6Vgl/wNX8/phq6StRhfTEnrX1\nXLWS6dWqK2Z1UA83zh822/Q72DM2wmPO7KLPtSWw/4OQ/Hd+Ci1rUoENz/2lysp/\nhnlXySIx5+bA/UGNZhIbVkWr4NdO1GDyCMfxXLQX1SfA28OR8vYhTY1dxu4HcSkb\nuB30Sxf00ASU2IhGT/ZCBSJIBlyIgQ==\n=Udly\n-----END PGP SIGNATURE-----",
        "payload": "tree 0aceb983a21b0c244804f6a4a5609e1e7fe046cf\nparent eb202ea21de1fbcc32fb3db63fcce4135b7a2849\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1535490576 -0700\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1536238314 +0200\n\nAdd descriptor reference documentation\n\nGithub-Pull: #14096\nRebased-From: 9254ffcf2d910ecb0f9ecbeef6d40a2008a44870\nTree-SHA512: 1fc466177dbe3b57b0025c102b1e75e4b05544440819885da7a85b70d20329fc3f6f4cbf89d7d6a48881e6ad176d81f7396f02925586140e19468a2f28f3414e\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f681cecadb9472b3d3ae2c1dd23d8173dc2e316",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0f681cecadb9472b3d3ae2c1dd23d8173dc2e316",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f681cecadb9472b3d3ae2c1dd23d8173dc2e316/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eb202ea21de1fbcc32fb3db63fcce4135b7a2849",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb202ea21de1fbcc32fb3db63fcce4135b7a2849",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eb202ea21de1fbcc32fb3db63fcce4135b7a2849"
      }
    ],
    "stats": {
      "total": 124,
      "additions": 124,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c23ac06e8ff80b48043d5854f005c0f91f56d769",
        "filename": "doc/descriptors.md",
        "status": "added",
        "additions": 124,
        "deletions": 0,
        "changes": 124,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f681cecadb9472b3d3ae2c1dd23d8173dc2e316/doc/descriptors.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f681cecadb9472b3d3ae2c1dd23d8173dc2e316/doc/descriptors.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/descriptors.md?ref=0f681cecadb9472b3d3ae2c1dd23d8173dc2e316",
        "patch": "@@ -0,0 +1,124 @@\n+# Support for Output Descriptors in Bitcoin Core\n+\n+Since Bitcoin Core v0.17, there is support for Output Descriptors in the\n+`scantxoutset` RPC call. This is a simple language which can be used to\n+describe collections of output scripts.\n+\n+This document describes the language. For the specifics on usage for scanning\n+the UTXO set, see the `scantxoutset` RPC help.\n+\n+## Features\n+\n+Output descriptors currently support:\n+- Pay-to-pubkey scripts (P2PK), through the `pk` function.\n+- Pay-to-pubkey-hash scripts (P2PKH), through the `pkh` function.\n+- Pay-to-witness-pubkey-hash scripts (P2WPKH), through the `wpkh` function.\n+- Pay-to-script-hash scripts (P2SH), through the `sh` function.\n+- Pay-to-witness-script-hash scripts (P2WSH), through the `wsh` function.\n+- Multisig scripts, through the `multi` function.\n+- Any type of supported address through the `addr` function.\n+- Raw hex scripts through the `raw` function.\n+- Public keys (compressed and uncompressed) in hex notation, or BIP32 extended pubkeys with derivation paths.\n+\n+## Examples\n+\n+- `pk(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)` represents a P2PK output.\n+- `pkh(02c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5)` represents a P2PKH output.\n+- `wpkh(02f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9)` represents a P2WPKH output.\n+- `sh(wpkh(03fff97bd5755eeea420453a14355235d382f6472f8568a18b2f057a1460297556))` represents a P2SH-P2WPKH output.\n+- `combo(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)` represents a P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH output.\n+- `sh(wsh(pkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13)))` represents a (overly complicated) P2SH-P2WSH-P2PKH output.\n+- `multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc)` represents a bare *1-of-2* multisig.\n+- `sh(multi(2,022f01e5e15cca351daff3843fb70f3c2f0a1bdd05e5af888a67784ef3e10a2a01,03acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe))` represents a P2SH *2-of-2* multisig.\n+- `wsh(multi(2,03a0434d9e47f3c86235477c7b1ae6ae5d3442d49b1943c2b752a68e2a47e247c7,03774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb,03d01115d548e7561b15c38f004d734633687cf4419620095bc5b0f47070afe85a))` represents a P2WSH *2-of-3* multisig.\n+- `sh(wsh(multi(1,03f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8,03499fdf9e895e719cfd64e67f07d38e3226aa7b63678949e6e49b241a60e823e4,02d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e)))` represents a P2SH-P2WSH *1-of-3* multisig.\n+- `pk(xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8)` refers to a single P2PK output, using the public key part from the specified xpub.\n+- `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1'/2)` refers to a single P2PKH output, using child key *1'/2* of the specified xpub.\n+- `wsh(multi(1,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/1/0/*,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/0/*))` refers to a chain of *1-of-2* P2WSH multisig outputs, using public keys taken from two HD chains with corresponding derivation paths.\n+\n+## Reference\n+\n+Descriptors consist of several types of expressions. The top level expression is always a `SCRIPT`.\n+\n+`SCRIPT` expressions:\n+- `sh(SCRIPT)` (top level only): P2SH embed the argument.\n+- `wsh(SCRIPT)` (not inside another 'wsh'): P2WSH embed the argument.\n+- `pk(KEY)` (anywhere): P2PK output for the given public key.\n+- `pkh(KEY)` (anywhere): P2PKH output for the given public key (use `addr` if you only know the pubkey hash).\n+- `wpkh(KEY)` (not inside `wsh`): P2WPKH output for the given compressed pubkey.\n+- `combo(KEY)` (top level only): an alias for the collection of `pk(KEY)` and `pkh(KEY)`. If the key is compressed, it also includes `wpkh(KEY)` and `sh(wpkh(KEY))`.\n+- `multi(k,KEY_1,KEY_2,...,KEY_n)` (anywhere): k-of-n multisig script.\n+- `addr(ADDR)` (top level only): the script which ADDR expands to.\n+- `raw(HEX)` (top level only): the script whose hex encoding is HEX.\n+\n+`KEY` expressions:\n+- Hex encoded public keys (66 characters starting with `02` or `03`, or 130 characters starting with `04`).\n+  - Inside `wpkh` and `wsh`, only compressed public keys are permitted.\n+- [WIF](https://en.bitcoin.it/wiki/Wallet_import_format) encoded private keys may be specified instead of the corresponding public key, with the same meaning.\n+-`xpub` encoded extended public key or `xprv` encoded private key (as defined in [BIP 32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)).\n+  - Followed by zero or more `/NUM` unhardened and `/NUM'` hardened BIP32 derivation steps.\n+  - Optionally followed by a single `/*` or `/*'` final step to denote all (direct) unhardened or hardened children.\n+  - The usage of hardened derivation steps requires providing the private key.\n+  - Instead of a `'`, the suffix `h` can be used to denote hardened derivation.\n+\n+`ADDR` expressions are any type of supported address:\n+- P2PKH addresses (base58, of the form `1...`). Note that P2PKH addresses in descriptors cannot be used for P2PK outputs (use the `pk` function instead).\n+- P2SH addresses (base58, of the form `3...`, defined in [BIP 13](https://github.com/bitcoin/bips/blob/master/bip-0013.mediawiki)).\n+- Segwit addresses (bech32, of the form `bc1...`, defined in [BIP 173](https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki)).\n+\n+## Explanation\n+\n+### Single-key scripts\n+\n+Many single-key constructions are used in practice, generally including\n+P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH. Many more combinations are\n+imaginable, though they may not be optimal: P2SH-P2PK, P2SH-P2PKH,\n+P2WSH-P2PK, P2WSH-P2PKH, P2SH-P2WSH-P2PK, P2SH-P2WSH-P2PKH.\n+\n+To describe these, we model these as functions. The functions `pk`\n+(P2PK), `pkh` (P2PKH) and `wpkh` (P2WPKH) take as input a public key in\n+hexadecimal notation (which will be extended later), and return the\n+corresponding *scriptPubKey*. The functions `sh` (P2SH) and `wsh` (P2WSH)\n+take as input a script, and return the script describing P2SH and P2WSH\n+outputs with the input as embedded script. The names of the functions do\n+not contain \"p2\" for brevity.\n+\n+### Multisig\n+\n+Several pieces of software use multi-signature (multisig) scripts based\n+on Bitcoin's OP_CHECKMULTISIG opcode. To support these, we introduce the\n+`multi(k,key_1,key_2,...,key_n)` function. It represents a *k-of-n*\n+multisig policy, where any *k* out of the *n* provided public keys must\n+sign.\n+\n+### BIP32 derived keys and chains\n+\n+Most modern wallet software and hardware uses keys that are derived using\n+BIP32 (\"HD keys\"). We support these directly by permitting strings\n+consisting of an extended public key (commonly referred to as an *xpub*)\n+plus derivation path anywhere a public key is expected. The derivation\n+path consists of a sequence of 0 or more integers (in the range\n+*0..2<sup>31</sup>-1*) each optionally followed by `'` or `h`, and\n+separated by `/` characters. The string may optionally end with the\n+literal `/*` or `/*'` (or `/*h`) to refer to all unhardened or hardened\n+child keys instead.\n+\n+Whenever a public key is described using a hardened derivation step, the\n+script cannot be computed without access to the corresponding private\n+key.\n+\n+### Including private keys\n+\n+Often it is useful to communicate a description of scripts along with the\n+necessary private keys. For this reason, anywhere a public key or xpub is\n+supported, a private key in WIF format or xprv may be provided instead.\n+This is useful when private keys are necessary for hardened derivation\n+steps, or for dumping wallet descriptors including private key material.\n+\n+### Compatibility with old wallets\n+\n+In order to easily represent the sets of scripts currently supported by\n+existing Bitcoin Core wallets, a convenience function `combo` is\n+provided, which takes as input a public key, and constructs the P2PK,\n+P2PKH, P2WPKH, and P2SH-P2WPH scripts for that key. In case the key is\n+uncompressed, it only constructs P2PK and P2PKH."
      }
    ]
  },
  {
    "sha": "eece974d0a3b8049e73cc29a4d14efddc00101a3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZWNlOTc0ZDBhM2I4MDQ5ZTczY2MyOWE0ZDE0ZWZkZGMwMDEwMWEz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-08-28T21:11:11Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-09-06T12:51:59Z"
      },
      "message": "Adjust TODO link\n\nGithub-Pull: #14096\nRebased-From: 89709db7a2710456011eac9dcd6a60d5e87b97ae\nTree-SHA512: 0bf74e1179bee6e616d8fd2c125411ef30611d9aa3b32412025615a793abbc629a7b6d89a89ef05b11ac3541cc869c0caebba2d00942fdd6ab8d2e98d9b9caca",
      "tree": {
        "sha": "f7c8f73f6964b750aa4d0b541b61792f0d27831f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f7c8f73f6964b750aa4d0b541b61792f0d27831f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eece974d0a3b8049e73cc29a4d14efddc00101a3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAluRIu8ACgkQHkrtYphs\n0l2tvQf9EU2j7zXaxeWdatOKR70BrPCobH/G1SEDKB6DhI1yPWorqG0myC10f9OJ\nAvPPoUEkoMo26sV8acabgOBkyZxsch1W6SEe5RB3QAutYjg6WsZJDDAXEOcXXtXE\nMVBrN+YTstahEolWRN7Txsur24m0uKPzQnljb6qCvIN+J7TVfTLRVQfPKktVHUVt\ncjtjiA1s+RBBEWv9sUEjcyad31Zbc7s3K2NZArROs84QVMjB940n+HPRhhwfGfjL\n9yjDXo8uCcRONzLKDccgiPlgGWrA+pQmwqoS6WMCp/nvS3A0H5YhfbfV0pplyUrE\nom0sFkRchZRsis4Sp+EZxfnreYrhwA==\n=Th5t\n-----END PGP SIGNATURE-----",
        "payload": "tree f7c8f73f6964b750aa4d0b541b61792f0d27831f\nparent 0f681cecadb9472b3d3ae2c1dd23d8173dc2e316\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1535490671 -0700\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1536238319 +0200\n\nAdjust TODO link\n\nGithub-Pull: #14096\nRebased-From: 89709db7a2710456011eac9dcd6a60d5e87b97ae\nTree-SHA512: 0bf74e1179bee6e616d8fd2c125411ef30611d9aa3b32412025615a793abbc629a7b6d89a89ef05b11ac3541cc869c0caebba2d00942fdd6ab8d2e98d9b9caca\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eece974d0a3b8049e73cc29a4d14efddc00101a3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eece974d0a3b8049e73cc29a4d14efddc00101a3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eece974d0a3b8049e73cc29a4d14efddc00101a3/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0f681cecadb9472b3d3ae2c1dd23d8173dc2e316",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f681cecadb9472b3d3ae2c1dd23d8173dc2e316",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0f681cecadb9472b3d3ae2c1dd23d8173dc2e316"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "948553d9ab48dfa6887a4906de79d35fddc3768f",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eece974d0a3b8049e73cc29a4d14efddc00101a3/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eece974d0a3b8049e73cc29a4d14efddc00101a3/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=eece974d0a3b8049e73cc29a4d14efddc00101a3",
        "patch": "@@ -2045,7 +2045,7 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n             \"or more path elements separated by \\\"/\\\", and optionally ending in \\\"/*\\\" (unhardened), or \\\"/*'\\\" or \\\"/*h\\\" (hardened) to specify all\\n\"\n             \"unhardened or hardened child keys.\\n\"\n             \"In the latter case, a range needs to be specified by below if different from 1000.\\n\"\n-            \"For more information on output descriptors, see the documentation at TODO\\n\"\n+            \"For more information on output descriptors, see the documentation in the doc/descriptors.md file.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"action\\\"                       (string, required) The action to execute\\n\"\n             \"                                      \\\"start\\\" for starting a scan\\n\""
      }
    ]
  },
  {
    "sha": "465a583f9dcc2383eb20bbb98bffa66fe82f2cde",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NjVhNTgzZjlkY2MyMzgzZWIyMGJiYjk4YmZmYTY2ZmU4MmYyY2Rl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-09-05T17:59:02Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-09-06T12:52:00Z"
      },
      "message": "Replace duplcate reference with reference to reference doc\n\nGithub-Pull: #14096\nRebased-From: 2b5d6f8df24b381d35b75187c97ae0cc9f7c3ed0\nTree-SHA512: 79af808c581ebb17d60aab8322b1debcc4182480b84eaedcbfac1e67c8b543c61df22789095742d67d732dba35e7e5fad77912385b695f89fb0f44f75db11560",
      "tree": {
        "sha": "436cd09429fd9975b047e05e3b1551d38ab1dfba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/436cd09429fd9975b047e05e3b1551d38ab1dfba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/465a583f9dcc2383eb20bbb98bffa66fe82f2cde",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAluRIvAACgkQHkrtYphs\n0l03bggAtly99p1pB6bXCh3py6HWzJhInfo7AqrRVen8/v9XNp11vrmcupysIz6P\nibKuZT0N7UIdq6Ft4a804RfMAc5lWyyptiX6cpMK2VCbCmlc90/bbkMoEvBV52Wm\nqwpoyASu3vqSULbq0QP7blvXbfq6xwsRluwOXq+qaahxn8VbI0hxGupoIAsYZH27\n/SbEbRiT4vUTwJ4LTwsChuGujvSHje/2vvqQuWRTBLgHGo06kcxs/vvTviHbtkA4\nHYHrYx2Qo1I49s1690Nt4LGbYDNbl549mFZHHGbJ9cL8QQ6yHRsdpZSdLt9GpSF+\nkHcUZaGatZvfLBjgumtjdVOg7G3nnQ==\n=yn4b\n-----END PGP SIGNATURE-----",
        "payload": "tree 436cd09429fd9975b047e05e3b1551d38ab1dfba\nparent eece974d0a3b8049e73cc29a4d14efddc00101a3\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1536170342 -0700\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1536238320 +0200\n\nReplace duplcate reference with reference to reference doc\n\nGithub-Pull: #14096\nRebased-From: 2b5d6f8df24b381d35b75187c97ae0cc9f7c3ed0\nTree-SHA512: 79af808c581ebb17d60aab8322b1debcc4182480b84eaedcbfac1e67c8b543c61df22789095742d67d732dba35e7e5fad77912385b695f89fb0f44f75db11560\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/465a583f9dcc2383eb20bbb98bffa66fe82f2cde",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/465a583f9dcc2383eb20bbb98bffa66fe82f2cde",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/465a583f9dcc2383eb20bbb98bffa66fe82f2cde/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eece974d0a3b8049e73cc29a4d14efddc00101a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eece974d0a3b8049e73cc29a4d14efddc00101a3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eece974d0a3b8049e73cc29a4d14efddc00101a3"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 2,
      "deletions": 49
    },
    "files": [
      {
        "sha": "87e07369c7fe0c872c23c33ed64a175af79b9449",
        "filename": "src/script/descriptor.h",
        "status": "modified",
        "additions": 2,
        "deletions": 49,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/465a583f9dcc2383eb20bbb98bffa66fe82f2cde/src/script/descriptor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/465a583f9dcc2383eb20bbb98bffa66fe82f2cde/src/script/descriptor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.h?ref=465a583f9dcc2383eb20bbb98bffa66fe82f2cde",
        "patch": "@@ -22,55 +22,8 @@\n // they can be included inside by changing public keys to private keys (WIF\n // format), and changing xpubs by xprvs.\n //\n-// 1. Examples\n-//\n-// A P2PK descriptor with a fixed public key:\n-// - pk(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)\n-//\n-// A P2SH-P2WSH-P2PKH descriptor with a fixed public key:\n-// - sh(wsh(pkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13)))\n-//\n-// A bare 1-of-2 multisig descriptor:\n-// - multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc)\n-//\n-// A chain of P2PKH outputs (this needs the corresponding private key to derive):\n-// - pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1'/2/*)\n-//\n-// 2. Grammar description:\n-//\n-// X: xpub or xprv encoded extended key\n-// I: decimal encoded integer\n-// H: Hex encoded byte array\n-// A: Address in P2PKH, P2SH, or Bech32 encoding\n-//\n-// S (Scripts):\n-// * pk(P): Pay-to-pubkey (P2PK) output for public key P.\n-// * pkh(P): Pay-to-pubkey-hash (P2PKH) output for public key P.\n-// * wpkh(P): Pay-to-witness-pubkey-hash (P2WPKH) output for public key P.\n-// * sh(S): Pay-to-script-hash (P2SH) output for script S\n-// * wsh(S): Pay-to-witness-script-hash (P2WSH) output for script S\n-// * combo(P): combination of P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH for public key P.\n-// * multi(I,L): k-of-n multisig for given public keys\n-// * addr(A): Output to address\n-// * raw(H): scriptPubKey with raw bytes\n-//\n-// P (Public keys):\n-// * H: fixed public key (or WIF-encoded private key)\n-// * E: extended public key\n-// * E/*: (ranged) all unhardened direct children of an extended public key\n-// * E/*': (ranged) all hardened direct children of an extended public key\n-//\n-// L (Comma-separated lists of public keys):\n-// * P\n-// * L,P\n-//\n-// E (Extended public keys):\n-// * X\n-// * E/I: unhardened child\n-// * E/I': hardened child\n-// * E/Ih: hardened child (alternative notation)\n-//\n-// The top level is S.\n+// Reference documentation about the descriptor language can be found in\n+// doc/descriptors.md.\n \n /** Interface for parsed descriptor objects. */\n struct Descriptor {"
      }
    ]
  },
  {
    "sha": "833180f538c7fa16b097022c7c0d4b4d2f09688b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MzMxODBmNTM4YzdmYTE2YjA5NzAyMmM3YzBkNGI0ZDJmMDk2ODhi",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2018-09-17T20:13:37Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-09-17T20:14:31Z"
      },
      "message": "Fix crash bug with duplicate inputs within a transaction\n\nIntroduced by #9049",
      "tree": {
        "sha": "16d769295bd202615ccb84f94d62e18944b8f402",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/16d769295bd202615ccb84f94d62e18944b8f402"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/833180f538c7fa16b097022c7c0d4b4d2f09688b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/833180f538c7fa16b097022c7c0d4b4d2f09688b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/833180f538c7fa16b097022c7c0d4b4d2f09688b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/833180f538c7fa16b097022c7c0d4b4d2f09688b/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "465a583f9dcc2383eb20bbb98bffa66fe82f2cde",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/465a583f9dcc2383eb20bbb98bffa66fe82f2cde",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/465a583f9dcc2383eb20bbb98bffa66fe82f2cde"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d3908fc1d8e66500b319bfc23025c2c7ac7c7fb5",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/833180f538c7fa16b097022c7c0d4b4d2f09688b/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/833180f538c7fa16b097022c7c0d4b4d2f09688b/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=833180f538c7fa16b097022c7c0d4b4d2f09688b",
        "patch": "@@ -3130,7 +3130,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n \n     // Check transactions\n     for (const auto& tx : block.vtx)\n-        if (!CheckTransaction(*tx, state, false))\n+        if (!CheckTransaction(*tx, state, true))\n             return state.Invalid(false, state.GetRejectCode(), state.GetRejectReason(),\n                                  strprintf(\"Transaction check failed (tx hash %s) %s\", tx->GetHash().ToString(), state.GetDebugMessage()));\n "
      }
    ]
  },
  {
    "sha": "0d49c82edd4c2c92f8ebe215c057b0173a258d77",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZDQ5YzgyZWRkNGMyYzkyZjhlYmUyMTVjMDU3YjAxNzNhMjU4ZDc3",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2018-09-17T20:15:02Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-09-17T20:15:18Z"
      },
      "message": "[qa] backport: Test for duplicate inputs within a transaction",
      "tree": {
        "sha": "0d362c45d95f5cfe40116dac54c30472559cfddb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0d362c45d95f5cfe40116dac54c30472559cfddb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0d49c82edd4c2c92f8ebe215c057b0173a258d77",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d49c82edd4c2c92f8ebe215c057b0173a258d77",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0d49c82edd4c2c92f8ebe215c057b0173a258d77",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d49c82edd4c2c92f8ebe215c057b0173a258d77/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "833180f538c7fa16b097022c7c0d4b4d2f09688b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/833180f538c7fa16b097022c7c0d4b4d2f09688b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/833180f538c7fa16b097022c7c0d4b4d2f09688b"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 10,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1534f362e34252951d0ccb961682b3779149841d",
        "filename": "test/functional/p2p_invalid_block.py",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d49c82edd4c2c92f8ebe215c057b0173a258d77/test/functional/p2p_invalid_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d49c82edd4c2c92f8ebe215c057b0173a258d77/test/functional/p2p_invalid_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_block.py?ref=0d49c82edd4c2c92f8ebe215c057b0173a258d77",
        "patch": "@@ -81,6 +81,16 @@ def run_test(self):\n \n         node.p2p.send_blocks_and_test([block2], node, False, False, 16, b'bad-txns-duplicate')\n \n+        # Check transactions for duplicate inputs\n+        self.log.info(\"Test duplicate input block.\")\n+\n+        block2_orig.vtx[2].vin.append(block2_orig.vtx[2].vin[0])\n+        block2_orig.vtx[2].rehash()\n+        block2_orig.hashMerkleRoot = block2_orig.calc_merkle_root()\n+        block2_orig.rehash()\n+        block2_orig.solve()\n+        node.p2p.send_blocks_and_test([block2_orig], node, success=False, request_block=False, reject_reason=b'bad-txns-inputs-duplicate')\n+\n         self.log.info(\"Test very broken block.\")\n \n         block3 = create_block(tip, create_coinbase(height), block_time)"
      }
    ]
  },
  {
    "sha": "c64128df5882e8dc1f76ae7c1e998ed57b8645fe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNjQxMjhkZjU4ODJlOGRjMWY3NmFlN2MxZTk5OGVkNTdiODY0NWZl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-09-17T23:20:49Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-09-17T23:20:52Z"
      },
      "message": "Merge #14248: [0.17] Fix crash bug with duplicate inputs within a transaction\n\n0d49c82edd4c2c92f8ebe215c057b0173a258d77 [qa] backport: Test for duplicate inputs within a transaction (Suhas Daftuar)\n833180f538c7fa16b097022c7c0d4b4d2f09688b Fix crash bug with duplicate inputs within a transaction (Suhas Daftuar)\n\nPull request description:\n\n  This is a backport of #14247.\n\nTree-SHA512: 4d3b6244d501a48f56a728c571dac9a346019a671434edac943f4f535ef8f94ec6bfd569a0585ad5e23a6e488ecd7e0079510cbb10a2a22f576eb36d73accb0c",
      "tree": {
        "sha": "0d362c45d95f5cfe40116dac54c30472559cfddb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0d362c45d95f5cfe40116dac54c30472559cfddb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c64128df5882e8dc1f76ae7c1e998ed57b8645fe",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlugNtQACgkQHkrtYphs\n0l0tkwf/Q1Nm8eJTxsi5l2mArihfS6OSNDUWBAfghTmPrdNyZY+kZHG09I+xw/Zf\n5/cGxlmGOpXWOjLo+fglliVaGFT4toKlO2EJNRxGQdXgclxNCJ/CA8jD1cUoDEnb\nIhejIFBTfvX2/KUyQe/y1KzqJQWpz0AlohkYdpwfebPJI3pKEN3sXjr8+xIibVrN\nnDSZQOinhNzblVlMwipwo8iGGKdFT4SQDgWUpwqVQXE4zRGIGPecpP7PRybqjfSC\nqo8aFFejb5VnOTEutsMjGSLKEaaF8DrISOeyE7yRZ5dbypWYC/6++8vR4NzrtGgo\nrvnrthEA/DCLsSPR8FptRydCc3ENsQ==\n=8Ot4\n-----END PGP SIGNATURE-----",
        "payload": "tree 0d362c45d95f5cfe40116dac54c30472559cfddb\nparent 465a583f9dcc2383eb20bbb98bffa66fe82f2cde\nparent 0d49c82edd4c2c92f8ebe215c057b0173a258d77\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1537226449 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1537226452 +0200\n\nMerge #14248: [0.17] Fix crash bug with duplicate inputs within a transaction\n\n0d49c82edd4c2c92f8ebe215c057b0173a258d77 [qa] backport: Test for duplicate inputs within a transaction (Suhas Daftuar)\n833180f538c7fa16b097022c7c0d4b4d2f09688b Fix crash bug with duplicate inputs within a transaction (Suhas Daftuar)\n\nPull request description:\n\n  This is a backport of #14247.\n\nTree-SHA512: 4d3b6244d501a48f56a728c571dac9a346019a671434edac943f4f535ef8f94ec6bfd569a0585ad5e23a6e488ecd7e0079510cbb10a2a22f576eb36d73accb0c\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c64128df5882e8dc1f76ae7c1e998ed57b8645fe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c64128df5882e8dc1f76ae7c1e998ed57b8645fe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c64128df5882e8dc1f76ae7c1e998ed57b8645fe/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "465a583f9dcc2383eb20bbb98bffa66fe82f2cde",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/465a583f9dcc2383eb20bbb98bffa66fe82f2cde",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/465a583f9dcc2383eb20bbb98bffa66fe82f2cde"
      },
      {
        "sha": "0d49c82edd4c2c92f8ebe215c057b0173a258d77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d49c82edd4c2c92f8ebe215c057b0173a258d77",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0d49c82edd4c2c92f8ebe215c057b0173a258d77"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 11,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d3908fc1d8e66500b319bfc23025c2c7ac7c7fb5",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c64128df5882e8dc1f76ae7c1e998ed57b8645fe/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c64128df5882e8dc1f76ae7c1e998ed57b8645fe/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=c64128df5882e8dc1f76ae7c1e998ed57b8645fe",
        "patch": "@@ -3130,7 +3130,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n \n     // Check transactions\n     for (const auto& tx : block.vtx)\n-        if (!CheckTransaction(*tx, state, false))\n+        if (!CheckTransaction(*tx, state, true))\n             return state.Invalid(false, state.GetRejectCode(), state.GetRejectReason(),\n                                  strprintf(\"Transaction check failed (tx hash %s) %s\", tx->GetHash().ToString(), state.GetDebugMessage()));\n "
      },
      {
        "sha": "1534f362e34252951d0ccb961682b3779149841d",
        "filename": "test/functional/p2p_invalid_block.py",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c64128df5882e8dc1f76ae7c1e998ed57b8645fe/test/functional/p2p_invalid_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c64128df5882e8dc1f76ae7c1e998ed57b8645fe/test/functional/p2p_invalid_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_block.py?ref=c64128df5882e8dc1f76ae7c1e998ed57b8645fe",
        "patch": "@@ -81,6 +81,16 @@ def run_test(self):\n \n         node.p2p.send_blocks_and_test([block2], node, False, False, 16, b'bad-txns-duplicate')\n \n+        # Check transactions for duplicate inputs\n+        self.log.info(\"Test duplicate input block.\")\n+\n+        block2_orig.vtx[2].vin.append(block2_orig.vtx[2].vin[0])\n+        block2_orig.vtx[2].rehash()\n+        block2_orig.hashMerkleRoot = block2_orig.calc_merkle_root()\n+        block2_orig.rehash()\n+        block2_orig.solve()\n+        node.p2p.send_blocks_and_test([block2_orig], node, success=False, request_block=False, reject_reason=b'bad-txns-inputs-duplicate')\n+\n         self.log.info(\"Test very broken block.\")\n \n         block3 = create_block(tip, create_coinbase(height), block_time)"
      }
    ]
  },
  {
    "sha": "480d6bb07832576c7e861ef8d65405938605c5f8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ODBkNmJiMDc4MzI1NzZjN2U4NjFlZjhkNjU0MDU5Mzg2MDVjNWY4",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2018-09-28T12:58:39Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-09-29T12:24:02Z"
      },
      "message": "depends: fix bitcoin-qt back-compat with older freetype versions at runtime\n\nA few years ago, libfreetype introduced FT_Get_Font_Format() as an alias for\nFT_Get_X11_Font_Format(), but FT_Get_X11_Font_Format() was kept for abi\nbackwards-compatibility.\n\nOur qt bump to 5.9 introduced a call to FT_Get_Font_Format(). Replace it with\nFT_Get_X11_Font_Format() in order to remain compatibile with older freetype,\nwhich is still used by e.g. Ubuntu Trusty.\n\nGithub-Pull: #14348\nRebased-From: 430bf6c7a1a24a59050e7c9dac56b64b820edb43\nTree-SHA512: fd22b824e7251a7975d9e9222eff06d2b04ebf30e13aeccab580596c042b3abe2f62da1f0ef75106b0b171368ee1062ef2f459cfa435aa54826766a9005b80df",
      "tree": {
        "sha": "87b9d07bb69c9c51498aabe2257f0c44dc016eac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/87b9d07bb69c9c51498aabe2257f0c44dc016eac"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/480d6bb07832576c7e861ef8d65405938605c5f8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAluvbuIACgkQHkrtYphs\n0l32xQgAhwrgTmjYAZT8y2DhdJR8LFRbzHggfKThRBvPL7pDV3IF9u/GZPNwgtRp\nSyDXhDQl78k7f2YcENu91VJjMs1RMzjmVfCSsAjsp6PH7cpFangGIYlWY5l+MuM2\ntX+KuY3IZRrqNYZ2ReM3Xw3Xt5qg0rLKP/M9DhfSQrWWXcnvgXuZE0RCenQUMN24\n1TZ+86uaP+C4Jqf2Sc1oWVHv0ekFq9rFxxSA/hgFNQVLwYoMqthrh/MeIGJwj2fw\nfe4T5NyoA4P7MhRscEgsueNbLSV3g9dJhaF85lrbQKKKebhifL0f8VGgUYFv9M3Z\niRGBmFCwCfLMVbcjnGoDKFdkPMY5XA==\n=3gJo\n-----END PGP SIGNATURE-----",
        "payload": "tree 87b9d07bb69c9c51498aabe2257f0c44dc016eac\nparent c64128df5882e8dc1f76ae7c1e998ed57b8645fe\nauthor Cory Fields <cory-nospam-@coryfields.com> 1538139519 -0400\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1538223842 +0200\n\ndepends: fix bitcoin-qt back-compat with older freetype versions at runtime\n\nA few years ago, libfreetype introduced FT_Get_Font_Format() as an alias for\nFT_Get_X11_Font_Format(), but FT_Get_X11_Font_Format() was kept for abi\nbackwards-compatibility.\n\nOur qt bump to 5.9 introduced a call to FT_Get_Font_Format(). Replace it with\nFT_Get_X11_Font_Format() in order to remain compatibile with older freetype,\nwhich is still used by e.g. Ubuntu Trusty.\n\nGithub-Pull: #14348\nRebased-From: 430bf6c7a1a24a59050e7c9dac56b64b820edb43\nTree-SHA512: fd22b824e7251a7975d9e9222eff06d2b04ebf30e13aeccab580596c042b3abe2f62da1f0ef75106b0b171368ee1062ef2f459cfa435aa54826766a9005b80df\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/480d6bb07832576c7e861ef8d65405938605c5f8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/480d6bb07832576c7e861ef8d65405938605c5f8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/480d6bb07832576c7e861ef8d65405938605c5f8/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c64128df5882e8dc1f76ae7c1e998ed57b8645fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c64128df5882e8dc1f76ae7c1e998ed57b8645fe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c64128df5882e8dc1f76ae7c1e998ed57b8645fe"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "113b8dbc3b4b4f4a0b05ac2fd970522608f30dcd",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/480d6bb07832576c7e861ef8d65405938605c5f8/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/480d6bb07832576c7e861ef8d65405938605c5f8/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=480d6bb07832576c7e861ef8d65405938605c5f8",
        "patch": "@@ -119,6 +119,7 @@ define $(package)_extract_cmds\n endef\n \n define $(package)_preprocess_cmds\n+  sed -i.old \"s|FT_Get_Font_Format|FT_Get_X11_Font_Format|\" qtbase/src/platformsupport/fontdatabases/freetype/qfontengine_ft.cpp && \\\n   sed -i.old \"s|updateqm.commands = \\$$$$\\$$$$LRELEASE|updateqm.commands = $($(package)_extract_dir)/qttools/bin/lrelease|\" qttranslations/translations/translations.pro && \\\n   sed -i.old \"/updateqm.depends =/d\" qttranslations/translations/translations.pro && \\\n   sed -i.old \"s/src_plugins.depends = src_sql src_network/src_plugins.depends = src_network/\" qtbase/src/src.pro && \\"
      }
    ]
  },
  {
    "sha": "786825c719e40f8c73643fae4ea9e9dca454715f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ODY4MjVjNzE5ZTQwZjhjNzM2NDNmYWU0ZWE5ZTlkY2E0NTQ3MTVm",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-09-06T01:34:50Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-09-30T01:44:19Z"
      },
      "message": "doc: Update release-notes.md from upstream devwiki",
      "tree": {
        "sha": "996611d37ad7d9b26b09747cf20c4667a880721c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/996611d37ad7d9b26b09747cf20c4667a880721c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/786825c719e40f8c73643fae4ea9e9dca454715f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAluwKnMACgkQLuufXMCV\nJsGrXg/9GB7FbVp9KMVP4tLU5LZLq+YG40yUfBi8TCVdUMJHSnl4INA6clysJKJJ\n/fqCEa3ZgTymKp+rGxx50LjCq7HLFLM6DFfycXIZytz0lr/iXEgVAmnh6Y0ZRtra\nsrIMXkVUlV1B1At+UbvwGu7BTsL13e8G6kJR305FPqtBVXOq4LMC8rpzyDmoVOVa\nOsHFsnSf/IPhK6G5dKp8AJIpv1Lcm8gMIHqDksxjomBuDZCQ/Ya1R6ZrIfY+vczc\nD4Hbp1HIaw7zcbGBpD7BEzNi6TQP37VeJS9UK88eOvc6HyQKB//+R8snUNTUAgip\n7wc6FvRSrjwufRURxo3jpXGGEVYxfxNYzr6R8uYGT8MgNLnM/0z6GNMKlSyHcWW2\nVAYkedas94DldTJ0zNXE8j/uK5CYZW22Pkzn5Wgo5nnMnCj9xM6ZzQ/BYsN/uJfg\nTdTzpLTecP8KreoIBG6+ezh2yR39mrfatbC/wCyK/NEbgMYNpgXyn0UIG8CCY1Uq\nbWVMfylTSCYdEc25i+kxp8kTi0JNorR8B0rI9PwiLrRNnwrUp782aVm78vzptXJR\nN7y1XlylPKEq6G6rJVcZBi/9znuQtm95iegrJ44yq6ituZ4NoBwn4iz0rZRIxr8U\nrN8/MtuTX1ivlckk1ALmFbOx9vOJL/yjTHNM7rMgoL7oFODaNVk=\n=k9sQ\n-----END PGP SIGNATURE-----",
        "payload": "tree 996611d37ad7d9b26b09747cf20c4667a880721c\nparent c64128df5882e8dc1f76ae7c1e998ed57b8645fe\nauthor fanquake <fanquake@gmail.com> 1536197690 +0800\ncommitter fanquake <fanquake@gmail.com> 1538271859 +0800\n\ndoc: Update release-notes.md from upstream devwiki\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/786825c719e40f8c73643fae4ea9e9dca454715f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/786825c719e40f8c73643fae4ea9e9dca454715f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/786825c719e40f8c73643fae4ea9e9dca454715f/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c64128df5882e8dc1f76ae7c1e998ed57b8645fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c64128df5882e8dc1f76ae7c1e998ed57b8645fe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c64128df5882e8dc1f76ae7c1e998ed57b8645fe"
      }
    ],
    "stats": {
      "total": 916,
      "additions": 876,
      "deletions": 40
    },
    "files": [
      {
        "sha": "1b6e2f8e6cbeb56c69d7465755244df89f1b8961",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 876,
        "deletions": 40,
        "changes": 916,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/786825c719e40f8c73643fae4ea9e9dca454715f/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/786825c719e40f8c73643fae4ea9e9dca454715f/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=786825c719e40f8c73643fae4ea9e9dca454715f",
        "patch": "@@ -1,9 +1,9 @@\n (note: this is a temporary file, to be added-to by anybody, and moved to\n release-notes at release time)\n \n-Bitcoin Core version *version* is now available from:\n+Bitcoin Core version 0.17.0 is now available from:\n \n-  <https://bitcoincore.org/bin/bitcoin-core-*version*/>\n+  <https://bitcoincore.org/bin/bitcoin-core-0.17.0/>\n \n This is a new major version release, including new features, various bugfixes\n and performance improvements, as well as updated translations.\n@@ -24,7 +24,9 @@ shut down (which might take a few minutes for older versions), then run the\n installer (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on Mac)\n or `bitcoind`/`bitcoin-qt` (on Linux).\n \n-The first time you run version 0.15.0, your chainstate database will be converted to a\n+If your node has a txindex, the txindex db will be migrated the first time you run 0.17.0 or newer, which may take up to a few hours. Your node will not be functional until this migration completes.\n+\n+The first time you run version 0.15.0 or newer, your chainstate database will be converted to a\n new format, which will take anywhere from a few minutes to half an hour,\n depending on the speed of your machine.\n \n@@ -56,20 +58,28 @@ frequently tested on them.\n From 0.17.0 onwards macOS <10.10 is no longer supported. 0.17.0 is built using Qt 5.9.x, which doesn't\n support versions of macOS older than 10.10.\n \n+Known issues\n+============\n+\n+- Upgrading from 0.13.0 or older currently results in memory blow-up during the roll-back of blocks to the SegWit activation point. In these cases, a full `-reindex` is necessary.\n+\n+- The GUI suffers from visual glitches in the new MacOS dark mode. This has to do with our Qt theme handling and is not a new problem in 0.17.0, but is expected to be resolved in 0.17.1.\n+\n Notable changes\n ===============\n \n-Changed command-line options\n-----------------------------\n+Changed configuration options\n+-----------------------------\n \n - `-includeconf=<file>` can be used to include additional configuration files.\n   Only works inside the `bitcoin.conf` file, not inside included files or from\n   command-line. Multiple files may be included. Can be disabled from command-\n   line via `-noincludeconf`. Note that multi-argument commands like\n   `-includeconf` will override preceding `-noincludeconf`, i.e.\n-\n-    noincludeconf=1\n-    includeconf=relative.conf\n+  ```\n+  noincludeconf=1\n+  includeconf=relative.conf\n+  ```\n \n   as bitcoin.conf will still include `relative.conf`.\n \n@@ -78,27 +88,6 @@ GUI changes\n \n - Block storage can be limited under Preferences, in the Main tab. Undoing this setting requires downloading the full blockchain again. This mode is incompatible with -txindex and -rescan.\n \n-RPC changes\n-------------\n-\n-### Low-level changes\n-\n-- The `createrawtransaction` RPC will now accept an array or dictionary (kept for compatibility) for the `outputs` parameter. This means the order of transaction outputs can be specified by the client.\n-- The `fundrawtransaction` RPC will reject the previously deprecated `reserveChangeKey` option.\n-- `sendmany` now shuffles outputs to improve privacy, so any previously expected behavior with regards to output ordering can no longer be relied upon.\n-- The new RPC `testmempoolaccept` can be used to test acceptance of a transaction to the mempool without adding it.\n-- JSON transaction decomposition now includes a `weight` field which provides\n-  the transaction's exact weight. This is included in REST /rest/tx/ and\n-  /rest/block/ endpoints when in json mode. This is also included in `getblock`\n-  (with verbosity=2), `listsinceblock`, `listtransactions`, and\n-  `getrawtransaction` RPC commands.\n-- New `fees` field introduced in `getrawmempool`, `getmempoolancestors`, `getmempooldescendants` and\n-   `getmempoolentry` when verbosity is set to `true` with sub-fields `ancestor`, `base`, `modified`\n-   and `descendant` denominated in BTC. This new field deprecates previous fee fields, such as\n-   `fee`, `modifiedfee`, `ancestorfee` and `descendantfee`.\n-- The new RPC `getzmqnotifications` returns information about active ZMQ\n-  notifications.\n-\n External wallet files\n ---------------------\n \n@@ -133,10 +122,10 @@ This feature is currently only available through the RPC interface.\n \n Coin selection\n --------------\n-- A new `-avoidpartialspends` flag has been added (default=false). If enabled, the wallet will try to spend UTXO's that point at the same destination\n-  together. This is a privacy increase, as there will no longer be cases where a wallet will inadvertently spend only parts of the coins sent to\n-  the same address (note that if someone were to send coins to that address after it was used, those coins will still be included in future\n-  coin selections).\n+\n+### Partial spend avoidance\n+\n+When an address is paid multiple times the coins from those separate payments can be spent separately which hurts privacy due to linking otherwise separate addresses. A new `-avoidpartialspends` flag has been added (default=false). If enabled, the wallet will always spend existing UTXO to the same address together even if it results in higher fees. If someone were to send coins to an address after it was used, those coins will still be included in future coin selections.\n \n Configuration sections for testnet and regtest\n ----------------------------------------------\n@@ -155,9 +144,10 @@ prefixing the option with the network, such as:\n     [regtest]\n     mempoolsize=20\n \n-The `addnode=`, `connect=`, `port=`, `bind=`, `rpcport=`, `rpcbind=`\n-and `wallet=` options will only apply to mainnet when specified in the\n-configuration file, unless a network is specified.\n+If the following options are not in a section, they will only apply to mainnet:\n+`addnode=`, `connect=`, `port=`, `bind=`, `rpcport=`, `rpcbind=` and `wallet=`.\n+The options to choose a network (`regtest=` and `testnet=`) must be specified\n+outside of sections.\n \n 'label' and 'account' APIs for wallet\n -------------------------------------\n@@ -197,9 +187,112 @@ Here are the changes to RPC methods:\n | `listtransactions`     | The `account` named parameter has been renamed to `dummy`. If provided, the `dummy` parameter must be set to the string `*`, unless running with the `-deprecatedrpc=accounts` argument (in which case functionality is unchanged). |\n | `getbalance`           | `account`, `minconf` and `include_watchonly` parameters are deprecated, and can only be used if running with '-deprecatedrpc=accounts' |\n \n+BIP 174 Partially Signed Bitcoin Transactions support\n+-----------------------------------------------------\n+\n+[BIP 174 PSBT](https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki) is an interchange format for Bitcoin transactions that are not fully signed\n+yet, together with relevant metadata to help entities work towards signing it.\n+It is intended to simplify workflows where multiple parties need to cooperate to\n+produce a transaction. Examples include hardware wallets, multisig setups, and\n+[CoinJoin](https://bitcointalk.org/?topic=279249) transactions.\n+\n+### Overall workflow\n+\n+Overall, the construction of a fully signed Bitcoin transaction goes through the\n+following steps:\n+\n+- A **Creator** proposes a particular transaction to be created. He constructs\n+  a PSBT that contains certain inputs and outputs, but no additional metadata.\n+- For each input, an **Updater** adds information about the UTXOs being spent by\n+  the transaction to the PSBT.\n+- A potentially other Updater adds information about the scripts and public keys\n+  involved in each of the inputs (and possibly outputs) of the PSBT.\n+- **Signers** inspect the transaction and its metadata to decide whether they\n+  agree with the transaction. They can use amount information from the UTXOs\n+  to assess the values and fees involved. If they agree, they produce a\n+  partial signature for the inputs for which they have relevant key(s).\n+- A **Finalizer** is run for each input to convert the partial signatures and\n+  possibly script information into a final `scriptSig` and/or `scriptWitness`.\n+- An **Extractor** produces a valid Bitcoin transaction (in network format)\n+  from a PSBT for which all inputs are finalized.\n+\n+Generally, each of the above (excluding Creator and Extractor) will simply\n+add more and more data to a particular PSBT. In a naive workflow, they all have\n+to operate sequentially, passing the PSBT from one to the next, until the\n+Extractor can convert it to a real transaction. In order to permit parallel\n+operation, **Combiners** can be employed which merge metadata from different\n+PSBTs for the same unsigned transaction.\n+\n+The names above in bold are the names of the roles defined in BIP174. They're\n+useful in understanding the underlying steps, but in practice, software and\n+hardware implementations will typically implement multiple roles simultaneously.\n+\n+### RPCs\n+\n+- **`converttopsbt` (Creator)** is a utility RPC that converts an\n+  unsigned raw transaction to PSBT format. It ignores existing signatures.\n+- **`createpsbt` (Creator)** is a utility RPC that takes a list of inputs and\n+  outputs and converts them to a PSBT with no additional information. It is\n+  equivalent to calling `createrawtransaction` followed by `converttopsbt`.\n+- **`walletcreatefundedpsbt` (Creator, Updater)** is a wallet RPC that creates a\n+  PSBT with the specified inputs and outputs, adds additional inputs and change\n+  to it to balance it out, and adds relevant metadata. In particular, for inputs\n+  that the wallet knows about (counting towards its normal or watch-only\n+  balance), UTXO information will be added. For outputs and inputs with UTXO\n+  information present, key and script information will be added which the wallet\n+  knows about. It is equivalent to running `createrawtransaction`, followed by\n+  `fundrawtransaction`, and `converttopsbt`.\n+- **`walletprocesspsbt` (Updater, Signer, Finalizer)** is a wallet RPC that takes as\n+  input a PSBT, adds UTXO, key, and script data to inputs and outputs that miss\n+  it, and optionally signs inputs. Where possible it also finalizes the partial\n+  signatures.\n+- **`finalizepsbt` (Finalizer, Extractor)** is a utility RPC that finalizes any\n+  partial signatures, and if all inputs are finalized, converts the result to a\n+  fully signed transaction which can be broadcast with `sendrawtransaction`.\n+- **`combinepsbt` (Combiner)** is a utility RPC that implements a Combiner. It\n+  can be used at any point in the workflow to merge information added to\n+  different versions of the same PSBT. In particular it is useful to combine the\n+  output of multiple Updaters or Signers.\n+- **`decodepsbt`** is a diagnostic utility RPC which will show all information in\n+  a PSBT in human-readable form, as well as compute its eventual fee if known.\n+\n+Upgrading non-HD wallets to HD wallets\n+--------------------------------------\n+\n+Since Bitcoin Core 0.13.0, creating new BIP 32 Hierarchical Deterministic wallets has been supported by Bitcoin Core but old non-HD wallets could not be upgraded to HD. Now non-HD wallets can be upgraded to HD using the `-upgradewallet` command line option. This upgrade will result in the all keys in the keypool being marked as used and a new keypool generated. **A new backup must be made when this upgrade is performed.**\n+\n+Additionally, `-upgradewallet` can be used to upgraded from a non-split HD chain (all keys generated with `m/0'/0'/i'`) to a split HD chain (receiving keys generated with `'m/0'/0'/i'` and change keys generated with `m'/0'/1'/i'`). When this upgrade occurs, all keys already in the keypool will remain in the keypool to be used until all keys from before the upgrade are exhausted. This is to avoid issues with backups and downgrades when some keys may come from the change key keypool. Users can begin using the new split HD chain keypools by using the `newkeypool` RPC to mark all keys in the keypool as used and begin using a new keypool generated from the split HD chain.\n+\n+HD Master key rotation\n+----------------------\n+\n+A new RPC, `sethdseed`, has been introduced which allows users to set a new HD seed or set their own HD seed. This allows for a new HD seed to be used. **A new backup must be made when a new HD seed is set.**\n+\n Low-level RPC changes\n ---------------------\n \n+- The new RPC `scantxoutset` can be used to scan the UTXO set for entries\n+  that match certain output descriptors. Refer to the [output descriptors\n+  reference documentation](doc/descriptors.md) for more details. This call\n+  is similar to `listunspent` but does not use a wallet, meaning that the\n+  wallet can be disabled at compile or run time. This call is experimental,\n+  as such, is subject to changes or removal in future releases.\n+\n+- The `createrawtransaction` RPC will now accept an array or dictionary (kept for compatibility) for the `outputs` parameter. This means the order of transaction outputs can be specified by the client.\n+- The `fundrawtransaction` RPC will reject the previously deprecated `reserveChangeKey` option.\n+- `sendmany` now shuffles outputs to improve privacy, so any previously expected behavior with regards to output ordering can no longer be relied upon.\n+- The new RPC `testmempoolaccept` can be used to test acceptance of a transaction to the mempool without adding it.\n+- JSON transaction decomposition now includes a `weight` field which provides\n+  the transaction's exact weight. This is included in REST /rest/tx/ and\n+  /rest/block/ endpoints when in json mode. This is also included in `getblock`\n+  (with verbosity=2), `listsinceblock`, `listtransactions`, and\n+  `getrawtransaction` RPC commands.\n+- New `fees` field introduced in `getrawmempool`, `getmempoolancestors`, `getmempooldescendants` and\n+   `getmempoolentry` when verbosity is set to `true` with sub-fields `ancestor`, `base`, `modified`\n+   and `descendant` denominated in BTC. This new field deprecates previous fee fields, such as\n+   `fee`, `modifiedfee`, `ancestorfee` and `descendantfee`.\n+- The new RPC `getzmqnotifications` returns information about active ZMQ\n+  notifications.\n - When bitcoin is not started with any `-wallet=<path>` options, the name of\n   the default wallet returned by `getwalletinfo` and `listwallets` RPCs is\n   now the empty string `\"\"` instead of `\"wallet.dat\"`. If bitcoin is started\n@@ -224,6 +317,19 @@ Low-level RPC changes\n - The `getwalletinfo` RPC method now returns an `hdseedid` value, which is always the same as the incorrectly-named `hdmasterkeyid` value. `hdmasterkeyid` will be removed in V0.18.\n - The `getaddressinfo` RPC method now returns an `hdseedid` value, which is always the same as the incorrectly-named `hdmasterkeyid` value. `hdmasterkeyid` will be removed in V0.18.\n \n+- Parts of the `validateaddress` RPC method have been deprecated and moved to\n+  `getaddressinfo`. Clients must transition to using `getaddressinfo` to access\n+  this information before upgrading to v0.18. The following deprecated fields\n+  have moved to `getaddressinfo` and will only be shown with\n+  `-deprecatedrpc=validateaddress`: `ismine`, `iswatchonly`, `script`, `hex`,\n+  `pubkeys`, `sigsrequired`, `pubkey`, `addresses`, `embedded`, `iscompressed`,\n+  `account`, `timestamp`, `hdkeypath`, `hdmasterkeyid`.\n+- `signrawtransaction` is deprecated and will be fully removed in v0.18. To use\n+  `signrawtransaction` in v0.17, restart bitcoind with\n+  `-deprecatedrpc=signrawtransaction`. Projects should transition to using\n+  `signrawtransactionwithkey` and `signrawtransactionwithwallet` before\n+  upgrading to v0.18.\n+\n Other API changes\n -----------------\n \n@@ -255,18 +361,748 @@ Miner block size removed\n \n The `-blockmaxsize` option for miners to limit their blocks' sizes was\n deprecated in V0.15.1, and has now been removed. Miners should use the\n-`-blockmaxweight` option if they want to limit the weight of their blocks'\n-weights.\n+`-blockmaxweight` option if they want to limit the weight of their blocks.\n \n Python Support\n --------------\n \n Support for Python 2 has been discontinued for all test files and tools.\n \n+0.17.0 change log\n+=================\n+\n+### Consensus\n+- #12204 `3fa24bb` Fix overly eager BIP30 bypass (morcos)\n+\n+### Policy\n+- #12568 `ed6ae80` Allow dustrelayfee to be set to zero (luke-jr)\n+- #13120 `ca2a233` Treat segwit as always active (MarcoFalke)\n+- #13096 `062738c` Fix `MAX_STANDARD_TX_WEIGHT` check (jl2012)\n+\n+### Mining\n+- #12693 `df529dc` Remove unused variable in SortForBlock (drewx2)\n+- #12448 `84efa9a` Interrupt block generation on shutdown request (promag)\n+\n+### Block and transaction handling\n+- #12225 `67447ba` Mempool cleanups (sdaftuar)\n+- #12356 `fd65937` Fix 'mempool min fee not met' debug output (Empact)\n+- #12287 `bf3353d` Optimise lock behaviour for GuessVerificationProgress() (jonasschnelli)\n+- #11889 `47a7666` Drop extra script variable in ProduceSignature (ryanofsky)\n+- #11880 `d59b8d6` Stop special-casing phashBlock handling in validation for TBV (TheBlueMatt)\n+- #12431 `947c25e` Only call NotifyBlockTip when chainActive changes (jamesob)\n+- #12653 `534b8fa` Allow to optional specify the directory for the blocks storage (jonasschnelli)\n+- #12172 `3b62a91` Bugfix: RPC: savemempool: Don't save until LoadMempool() is finished (jtimon)\n+- #12167 `88430cb` Make segwit failure due to `CLEANSTACK` violation return a `SCRIPT_ERR_CLEANSTACK` error code (maaku)\n+- #12561 `24133b1` Check for block corruption in ConnectBlock() (sdaftuar)\n+- #11617 `1b5723e` Avoid lock: Call FlushStateToDisk(\u2026) regardless of fCheckForPruning (practicalswift)\n+- #11739 `0a8b7b4` Enforce `SCRIPT_VERIFY_P2SH` and `SCRIPT_VERIFY_WITNESS` from genesis (sdaftuar)\n+- #12885 `a49381d` Reduce implementation code inside CScript (sipa)\n+- #13032 `34dd1a6` Output values for \"min relay fee not met\" error (kristapsk)\n+- #13033 `a07e8ca` Build txindex in parallel with validation (jimpo)\n+- #13080 `66cc47b` Add compile time checking for ::mempool.cs runtime locking assertions (practicalswift)\n+- #13185 `08c1caf` Bugfix: the end of a reorged chain is invalid when connect fails (sipa)\n+- #11689 `0264836` Fix missing locking in CTxMemPool::check(\u2026) and CTxMemPool::setSanityCheck(\u2026) (practicalswift)\n+- #13011 `3c2a41a` Cache witness hash in CTransaction (MarcoFalke)\n+- #13191 `0de7cc8` Specialized double-SHA256 with 64 byte inputs with SSE4.1 and AVX2 (sipa)\n+- #13243 `ea263e1` Make reusable base class for auxiliary indices (jimpo)\n+- #13393 `a607d23` Enable double-SHA256-for-64-byte code on 32-bit x86 (sipa)\n+- #13428 `caabdea` validation: check the specified number of blocks (off-by-one) (kallewoof)\n+- #13438 `450055b` Improve coverage of SHA256 SelfTest code (sipa)\n+- #13431 `954f4a9` validation: count blocks correctly for check level < 3 (kallewoof)\n+- #13386 `3a3eabe` SHA256 implementations based on Intel SHA Extensions (sipa)\n+- #11658 `9a1ad2c` During IBD, when doing pruning, prune 10% extra to avoid pruning again soon after (luke-jr)\n+- #13794 `8ce55df` chainparams: Update with data from assumed valid chain (MarcoFalke)\n+- #13527 `e7ea858` Remove promiscuousmempoolflags (MarcoFalke)\n+\n+### P2P protocol and network code\n+- #12342 `eaeaa2d` Extend #11583 (\"Do not make it trivial for inbound peers to generate log entries\") to include \"version handshake timeout\" message (clemtaylor)\n+- #12218 `9a32114` Move misbehaving logging to net logging category (laanwj)\n+- #10387 `5c2aff8` Eventually connect to `NODE_NETWORK_LIMITED` peers (jonasschnelli)\n+- #9037 `a36834f` Add test-before-evict discipline to addrman (EthanHeilman)\n+- #12622 `e1d6e2a` Correct addrman logging (laanwj)\n+- #11962 `0a01843` add seed.bitcoin.sprovoost.nl to DNS seeds (Sjors)\n+- #12569 `23e7fe8` Increase signal-to-noise ratio in debug.log by adjusting log level when logging failed non-manual connect():s (practicalswift)\n+- #12855 `c199869` Minor accumulated cleanups (tjps)\n+- #13153 `ef46c99` Add missing newlines to debug logging (laanwj)\n+- #13162 `a174702` Don't incorrectly log that REJECT messages are unknown (jnewbery)\n+- #13151 `7f4db9a` Serve blocks directly from disk when possible (laanwj)\n+- #13134 `70d3541` Add option `-enablebip61` to configure sending of BIP61 notifications (laanwj)\n+- #13532 `7209fec` Log warning when deprecated network name 'tor' is used (wodry)\n+- #13615 `172f984` Remove unused interrupt from SendMessages (fanquake)\n+- #13417 `1e90862` Tighten scope in `net_processing` (skeees)\n+- #13298 `f8d470e` Bucketing INV delays (1 bucket) for incoming connections to hide tx time (naumenkogs)\n+- #13672 `0d8d6be` Modified `in_addr6` cast in CConman class to work with msvc (sipsorcery)\n+- #11637 `c575260` Remove dead service bits code (MarcoFalke)\n+- #13212 `a6f00ce` Fixed a race condition when disabling the network (lmanners)\n+- #13656 `1211b15` Remove the boost/algorithm/string/predicate.hpp dependency (251Labs)\n+- #13423 `f58674a` Thread safety annotations in `net_processing` (skeees)\n+- #13776 `7d36237` Add missing verification of IPv6 address in CNetAddr::GetIn6Addr(\u2026) (practicalswift)\n+- #13907 `48bf8ff` Introduce a maximum size for locators (gmaxwell)\n+- #13951 `8a9ffec` Hardcoded seeds update pre-0.17 branch (laanwj)\n+\n+### Wallet\n+- #12330 `2a30e67` Reduce scope of `cs_main` and `cs_wallet` locks in listtransactions (promag)\n+- #12298 `a1ffddb` Refactor HaveKeys to early return on false result (promag)\n+- #12282 `663911e` Disallow abandon of conflicted txes (MarcoFalke)\n+- #12333 `d405bee` Make CWallet::ListCoins atomic (promag)\n+- #12296 `8e6f9f4` Only fee-bump non-conflicted/non-confirmed txes (MarcoFalke)\n+- #11866 `6bb9c13` Do not un-mark fInMempool on wallet txn if ATMP fails (TheBlueMatt)\n+- #11882 `987a809` Disable default fallbackfee on mainnet (jonasschnelli)\n+- #9991 `4ca7c1e` listreceivedbyaddress Filter Address (NicolasDorier)\n+- #11687 `98bc27f` External wallet files (ryanofsky)\n+- #12658 `af88094` Sanitize some wallet serialization (sipa)\n+- #9680 `6acd870` Unify CWalletTx construction (ryanofsky)\n+- #10637 `e057589` Coin Selection with Murch's algorithm (achow101, Xekyo)\n+- #12408 `c39dd2e` Change output type globals to members (MarcoFalke)\n+- #12694 `9552dfb` Actually disable BnB when there are preset inputs (achow101)\n+- #11536 `cead84b` Rename account to label where appropriate (ryanofsky)\n+- #12709 `02b7e83` shuffle sendmany recipients ordering (instagibbs)\n+- #12699 `c948dc8` Shuffle transaction inputs before signing (instagibbs)\n+- #10762 `6d53663` Remove Wallet dependencies from init.cpp (jnewbery)\n+- #12857 `821980c` Avoid travis lint-include-guards error (ken2812221)\n+- #12702 `dab0d68` importprivkey: hint about importmulti (kallewoof)\n+- #12836 `9abdb7c` Make WalletInitInterface and DummyWalletInit private, fix nullptr deref (promag)\n+- #12785 `215158a` Initialize `m_last_block_processed` to nullptr (practicalswift)\n+- #12932 `8d651ae` Remove redundant lambda function arg in handleTransactionChanged (laanwj)\n+- #12749 `a84b056` feebumper: discard change outputs below discard rate (instagibbs)\n+- #12892 `9b3370d` introduce 'label' API for wallet (jnewbery)\n+- #12925 `6d3de17` Logprint the start of a rescan (jonasschnelli)\n+- #12888 `39439e5` debug log number of unknown wallet records on load (instagibbs)\n+- #12977 `434150a` Refactor `g_wallet_init_interface` to const reference (promag)\n+- #13017 `65d7083` Add wallets management functions (promag)\n+- #12953 `d1d54ae` Deprecate accounts (jnewbery)\n+- #12909 `476cb35` Make fee settings to be non-static members (MarcoFalke)\n+- #13002 `487dcbe` Do not treat bare multisig outputs as IsMine unless watched (sipa)\n+- #13028 `783bb64` Make vpwallets usage thread safe (promag)\n+- #12507 `2afdc29` Interrupt rescan on shutdown request (promag)\n+- #12729 `979150b` Get rid of ambiguous OutputType::NONE value (ryanofsky)\n+- #13079 `5778d44` Fix rescanblockchain rpc to properly report progress (Empact)\n+- #12560 `e03c0db` Upgrade path for non-HD wallets to HD (achow101)\n+- #13161 `7cc1bd3` Reset BerkeleyDB handle after connection fails (real-or-random)\n+- #13081 `0dec5b5` Add compile time checking for `cs_wallet` runtime locking assertions (practicalswift)\n+- #13127 `19a3a9e` Add Clang thread safety annotations for variables guarded by `cs_db` (practicalswift)\n+- #10740 `4cfe17c` `loadwallet` RPC - load wallet at runtime (jnewbery)\n+- #12924 `6738813` Fix hdmaster-key / seed-key confusion (scripted diff) (jnewbery)\n+- #13297 `d82c5d1` Fix incorrect comment for DeriveNewSeed (jnewbery)\n+- #13063 `6378eef` Use shared pointer to retain wallet instance (promag)\n+- #13142 `56fe3dc` Separate IsMine from solvability (sipa)\n+- #13194 `fd96d54` Remove template matching and pseudo opcodes (sipa)\n+- #13252 `c4cc8d9` Refactor ReserveKeyFromKeyPool for safety (Empact)\n+- #13058 `343d4e4` `createwallet` RPC - create new wallet at runtime (jnewbery)\n+- #13351 `2140f6c` Prevent segfault when sending to unspendable witness (MarcoFalke)\n+- #13060 `3f0f394` Remove getlabeladdress RPC (jnewbery)\n+- #13111 `000abbb` Add unloadwallet RPC (promag)\n+- #13160 `868cf43` Unlock spent outputs (promag)\n+- #13498 `f54f373` Fixups from account API deprecation (jnewbery)\n+- #13491 `61a044a` Improve handling of INVALID in IsMine (sipa)\n+- #13425 `028b0d9` Moving final scriptSig construction from CombineSignatures to ProduceSignature (PSBT signer logic) (achow101)\n+- #13564 `88a15eb` loadwallet shouldn't create new wallets (jnewbery)\n+- #12944 `619cd29` ScanforWalletTransactions should mark input txns as dirty (instagibbs)\n+- #13630 `d6b2235` Drop unused pindexRet arg to CMerkleTx::GetDepthInMainChain (Empact)\n+- #13566 `ad552a5` Fix get balance (jnewbery)\n+- #13500 `4a3e8c5` Decouple wallet version from client version (achow101)\n+- #13712 `aba2e66` Fix non-determinism in ParseHDKeypath(\u2026). Avoid using an uninitialized variable in path calculation (practicalswift)\n+- #9662 `6b6e854` Add createwallet \"disableprivatekeys\" option: a sane mode for watchonly-wallets (jonasschnelli)\n+- #13683 `e8c7434` Introduce assertion to document the assumption that cache and cache_used are always set in tandem (practicalswift)\n+- #12257 `5f7575e` Use destination groups instead of coins in coin select (kallewoof)\n+- #13773 `89a116d` Fix accidental use of the comma operator (practicalswift)\n+- #13805 `c88529a` Correctly limit output group size (sdaftuar)\n+- #12992 `26f59f5` Add wallet name to log messages (PierreRochard)\n+- #13667 `b81a8a5` Fix backupwallet for multiwallets (domob1812)\n+- #13657 `51c693d` assert to ensure accuracy of CMerkleTx::GetBlocksToMaturity (Empact)\n+- #13812 `9d86aad` sum ancestors rather than taking max in output groups (kallewoof)\n+- #13876 `8eb9870` Catch `filesystem_error` and raise `InitError` (MarcoFalke)\n+- #13808 `13d51a2` shuffle coins before grouping, where warranted (kallewoof)\n+- #13666 `2115cba` Always create signatures with Low R values (achow101)\n+- #13917 `0333914` Additional safety checks in PSBT signer (sipa)\n+- #13968 `65e7a8b` couple of walletcreatefundedpsbt fixes (instagibbs)\n+- #14055 `2307a6e` fix walletcreatefundedpsbt deriv paths, add test (instagibbs)\n+\n+### RPC and other APIs\n+- #12336 `3843780` Remove deprecated rpc options (jnewbery)\n+- #12193 `5dc00f6` Consistently use UniValue.pushKV instead of push_back(Pair()) (karel-3d) (MarcoFalke)\n+- #12409 `0cc45ed` Reject deprecated reserveChangeKey in fundrawtransaction (MarcoFalke)\n+- #10583 `8a98dfe` Split part of validateaddress into getaddressinfo (achow101)\n+- #10579 `ffc6e48` Split signrawtransaction into wallet and non-wallet RPC command (achow101)\n+- #12494 `e4ffcac` Declare CMutableTransaction a struct in rawtransaction.h (Empact)\n+- #12503 `0e26591` createmultisig no longer takes addresses (instagibbs)\n+- #12083 `228b086` Improve getchaintxstats test coverage (promag)\n+- #12479 `cd5e438` Add child transactions to getrawmempool verbose output (conscott)\n+- #11872 `702e8b7` createrawtransaction: Accept sorted outputs (MarcoFalke)\n+- #12700 `ebdf84c` Document RPC method aliasing (ryanofsky)\n+- #12727 `8ee5c7b` Remove unreachable help conditions in rpcwallet.cpp (lutangar)\n+- #12778 `b648974` Add username and ip logging for RPC method requests (GabrielDav)\n+- #12717 `ac898b6` rest: Handle utxo retrieval when ignoring the mempool (romanz)\n+- #12787 `cd99e5b` Adjust ifdef to avoid unreachable code (practicalswift)\n+- #11742 `18815b4` Add testmempoolaccept (MarcoFalke)\n+- #12942 `fefb817` Drop redundant testing of signrawtransaction prevtxs args (Empact)\n+- #11200 `5f2a399` Allow for aborting rescans in the GUI (achow101)\n+- #12791 `3a8a4dc` Expose a transaction's weight via RPC (TheBlueMatt)\n+- #12436 `6e67754` Adds a functional test to validate the transaction version number in the RPC output (251Labs)\n+- #12240 `6f8b345` Introduced a new `fees` structure that aggregates all sub-field fee types denominated in BTC (mryandao)\n+- #12321 `eac067a` p2wsh and p2sh-p2wsh address in decodescript (fivepiece)\n+- #13090 `17266a1` Remove Safe mode (achow101, laanwj)\n+- #12639 `7eb7076` Reduce `cs_main` lock in listunspent (promag)\n+- #10267 `7b966d9` New -includeconf argument for including external configuration files (kallewoof)\n+- #10757 `b9551d3` Introduce getblockstats to plot things (jtimon)\n+- #13288 `a589f53` Remove the need to include rpc/blockchain.cpp in order to put `GetDifficulty` under test (Empact)\n+- #13394 `e1f8dce` cli: Ignore libevent warnings (theuni)\n+- #13439 `3f398d7` Avoid \"duplicate\" return value for invalid submitblock (TheBlueMatt)\n+- #13570 `a247594` Add new \"getzmqnotifications\" method (domob1812)\n+- #13072 `b25a4c2` Update createmultisig RPC to support segwit (ajtowns)\n+- #12196 `8fceae0` Add scantxoutset RPC method (jonasschnelli)\n+- #13557 `b654723` BIP 174 PSBT Serializations and RPCs (achow101)\n+- #13697 `f030410` Support output descriptors in scantxoutset (sipa)\n+- #13927 `bced8ea` Use pushKV in some new PSBT RPCs (domob1812)\n+- #13918 `a9c56b6` Replace median fee rate with feerate percentiles in getblockstats (marcinja)\n+- #13721 `9f23c16` Bugfixes for BIP 174 combining and deserialization (achow101)\n+- #13960 `517010e` Fix PSBT deserialization of 0-input transactions (achow101)\n+\n+### GUI\n+- #12416 `c997f88` Fix Windows build errors introduced in #10498 (practicalswift)\n+- #11733 `e782099` Remove redundant locks (practicalswift)\n+- #12426 `bfa3911` Initialize members in WalletModel (MarcoFalke)\n+- #12489 `e117cfe` Bugfix: respect user defined configuration file (-conf) in QT settings (jonasschnelli)\n+- #12421 `be263fa` navigate to  transaction history page after send (Sjors)\n+- #12580 `ce56fdd` Show a transaction's virtual size in its details dialog (dooglus)\n+- #12501 `c8ea91a` Improved \"custom fee\" explanation in tooltip (randolf)\n+- #12616 `cff95a6` Set modal overlay hide button as default (promag)\n+- #12620 `8a43bdc` Remove TransactionTableModel::TxIDRole (promag)\n+- #12080 `56cc022` Add support to search the address book (promag)\n+- #12621 `2bac3e4` Avoid querying unnecessary model data when filtering transactions (promag)\n+- #12721 `e476826` remove \"new\" button during receive-mode in addressbook (jonasschnelli)\n+- #12723 `310dc61` Qt5: Warning users about invalid-BIP21 URI bitcoin:// (krab)\n+- #12610 `25cf18f` Multiwallet for the GUI (jonasschnelli)\n+- #12779 `f4353da` Remove unused method setupAmountWidget(\u2026) (practicalswift)\n+- #12795 `68484d6` do not truncate .dat extension for wallets in gui (instagibbs)\n+- #12870 `1d54004` make clean removes `src/qt/moc_` files (Sjors)\n+- #13055 `bdda14d` Don't log to console by default (laanwj)\n+- #13141 `57c57df` fixes broken link on readme (marcoagner)\n+- #12928 `ef006d9` Initialize non-static class members that were previously neither initialized where defined nor in constructor (practicalswift)\n+- #13158 `81c533c` Improve sendcoinsdialog readability (marcoagner)\n+- #11491 `40c34a0` Add proxy icon in statusbar (mess110)\n+- #13264 `2a7c53b` Satoshi unit (GreatSock)\n+- #13097 `e545503` Support wallets loaded dynamically (promag)\n+- #13284 `f8be434` fix visual \"overflow\" of amount input (brandonrninefive)\n+- #13275 `a315b79` use `[default wallet]` as name for wallet with no name (jonasschnelli)\n+- #13273 `3fd0c23` Qt/Bugfix: fix handling default wallet with no name (jonasschnelli)\n+- #13341 `25d2df2` Stop translating command line options (laanwj)\n+- #13043 `6e249e4` OptionsDialog: add prune setting (Sjors)\n+- #13506 `6579d80` load wallet in UI after possible init aborts (jonasschnelli)\n+- #13458 `dc53f7f` Drop qt4 support (laanwj)\n+- #13528 `b877c39` Move BitcoinGUI initializers to class, fix initializer order warning (laanwj)\n+- #13536 `baf3a3a` coincontrol: Remove unused qt4 workaround (MarcoFalke)\n+- #13537 `10ffca7` Peer table: Visualize inbound/outbound state for every row (wodry)\n+- #13791 `2c14c1f` Reject dialogs if key escape is pressed (promag)\n+\n+### Build system\n+- #12371 `c9ca4f6` Add gitian PGP key: akx20000 (ghost)\n+- #11966 `f4f4f51` clientversion: Use full commit hash for commit-based version descriptions (luke-jr)\n+- #12417 `ae0fbf0` Upgrade `mac_alias` to 2.0.7 (droark)\n+- #12444 `1f055ef` gitian: Bump descriptors for (0.)17 (theuni)\n+- #12402 `59e032b` expat 2.2.5, ccache 3.4.1, miniupnpc 2.0.20180203 (fanquake)\n+- #12029 `daa84b3` Add a makefile target for Doxygen documentation (Ov3rlo4d)\n+- #12466 `6645eaf` Only use `D_DARWIN_C_SOURCE` when building miniupnpc on darwin (fanquake)\n+- #11986 `765a3eb` zeromq 4.2.3 (fanquake)\n+- #12373 `f13d756` Add build support for profiling (murrayn)\n+- #12631 `a312e20` gitian: Alphabetize signing keys & add kallewoof key (kallewoof)\n+- #12607 `29fad97` Remove ccache (fanquake)\n+- #12625 `c4219ff` biplist 1.0.3 (fanquake)\n+- #12666 `05042d3` configure: UniValue 1.0.4 is required for pushKV(, bool) (luke-jr)\n+- #12678 `6324c68` Fix a few compilation issues with Clang 7 and -Werror (vasild)\n+- #12692 `de6bdfd` Add configure options for various -fsanitize flags (eklitzke)\n+- #12901 `7e23972` Show enabled sanitizers in configure output (practicalswift)\n+- #12899 `3076993` macOS: Prevent Xcode 9.3 build warnings (AkioNak)\n+- #12715 `8fd6243` Add 'make clean' rule (hkjn)\n+- #13133 `a024a18` Remove python2 from configure.ac (ken2812221)\n+- #13005 `cb088b1` Make --enable-debug to pick better options (practicalswift)\n+- #13254 `092b366` Remove improper `qt/moc_*` cleaning glob from the general Makefile (Empact)\n+- #13306 `f5a7733` split warnings out of CXXFLAGS (theuni)\n+- #13385 `7c7508c` Guard against accidental introduction of new Boost dependencies (practicalswift)\n+- #13041 `5779dc4` Add linter checking for accidental introduction of locale dependence (practicalswift)\n+- #13408 `70a03c6` crypto: cleanup sha256 build (theuni)\n+- #13435 `cf7ca60` When build fails due to lib missing, indicate which one (Empact)\n+- #13445 `8eb76f3` Reset default -g -O2 flags when enable debug (ken2812221)\n+- #13465 `81069a7` Avoid concurrency issue when make multiple target (ken2812221)\n+- #13454 `45c00f8` Make sure `LC_ALL=C` is set in all shell scripts (practicalswift)\n+- #13480 `31145a3` Avoid copies in range-for loops and add a warning to detect them (theuni)\n+- #13486 `66e1a08` Move rpc/util.cpp from libbitcoin-util to libbitcoin-server (ken2812221)\n+- #13580 `40334c7` Detect if char equals `int8_t` (ken2812221)\n+- #12788 `287e4ed` Tune wildcards for LIBSECP256K1 target (kallewoof)\n+- #13611 `b55f0c3` bugfix: Use `__cpuid_count` for gnu C to avoid gitian build fail (ken2812221)\n+- #12971 `a6d14b1` Upgrade Qt to 5.9.6 (TheCharlatan)\n+- #13543 `6c6a300` Add RISC-V support (laanwj)\n+- #13177 `dcb154e` GCC-7 and glibc-2.27 back compat code (ken2812221)\n+- #13659 `90b1c7e` add missing leveldb defines (theuni)\n+- #13368 `c0f1569` Update gitian-build.sh for docker (achow101)\n+- #13171 `19d8ca5` Change gitian-descriptors to use bionic instead (ken2812221)\n+- #13604 `75bea05` Add depends 32-bit arm support for bitcoin-qt (TheCharlatan)\n+- #13623 `9cdb19f` Migrate gitian-build.sh to python (ken2812221)\n+- #13689 `8c36432` disable Werror when building zmq (greenaddress)\n+- #13617 `cf7f9ae` release: Require macos 10.10+ (fanquake)\n+- #13750 `c883653` use MacOS friendly sed syntax in qt.mk (Sjors)\n+- #13095 `415f2bf` update `ax_boost_chrono`/`unit_test_framework` (fanquake)\n+- #13732 `e8ffec6` Fix Qt's rcc determinism (Fuzzbawls)\n+- #13782 `8284f1d` Fix osslsigncode compile issue in gitian-build (ken2812221)\n+- #13696 `2ab7208` Add aarch64 qt depends support for cross compiling bitcoin-qt (TheCharlatan)\n+- #13705 `b413ba0` Add format string linter (practicalswift)\n+- #14000 `48c8459` fix qt determinism (theuni)\n+- #14018 `3e4829a` Bugfix: NSIS: Exclude `Makefile*` from docs (luke-jr)\n+- #12906 `048ac83` Avoid `interface` keyword to fix windows gitian build (ryanofsky)\n+- #13314 `a9b6957` Fix FreeBSD build by including utilstrencodings.h (laanwj)\n+\n+### Tests and QA\n+- #12252 `8d57319` Require all tests to follow naming convention (ajtowns)\n+- #12295 `935eb8d` Enable flake8 warnings for all currently non-violated rules (practicalswift)\n+- #11858 `b4d8549` Prepare tests for Windows (MarcoFalke)\n+- #11771 `2dbc4a4` Change invalidtxrequest to use BitcoinTestFramework (jnewbery)\n+- #12200 `d09968f` Bind functional test nodes to 127.0.0.1 (Sjors)\n+- #12425 `26dc2da` Add some script tests (richardkiss)\n+- #12455 `23481fa` Fix bip68 sequence test to reflect updated rpc error message (Empact)\n+- #12477 `acd1e61` Plug memory leaks and stack-use-after-scope (MarcoFalke)\n+- #12443 `07090c5` Move common args to bitcoin.conf (MarcoFalke)\n+- #12570 `39dcac2` Add test cases for HexStr (`std::reverse_iterator` and corner cases) (kostaz)\n+- #12582 `6012f1c` Fix ListCoins test failure due to unset `g_wallet_allow_fallback_fee` (ryanofsky)\n+- #12516 `7f99964` Avoid unintentional unsigned integer wraparounds in tests (practicalswift)\n+- #12512 `955fd23` Don't test against the mempool min fee information in mempool_limit.py (Empact)\n+- #12600 `29088b1` Add a test for large tx output scripts with segwit input (richardkiss)\n+- #12627 `791c3ea` Fix some tests to work on native windows (MarcoFalke)\n+- #12405 `0f58d7f` travis: Full clone for git subtree check (MarcoFalke)\n+- #11772 `0630974` Change invalidblockrequest to use BitcoinTestFramework (jnewbery)\n+- #12681 `1846296` Fix ComputeTimeSmart test failure with `-DDEBUG_LOCKORDER` (ryanofsky)\n+- #12682 `9f04c8e` travis: Clone depth 1 unless `$check_doc` (MarcoFalke)\n+- #12710 `00d1680` Append scripts to new `test_list` array to fix bad assignment (jeffrade)\n+- #12720 `872c921` Avoiding 'file' function name from python2 (jeffrade)\n+- #12728 `4ba3d4f` rename TestNode to TestP2PConn in tests (jnewbery)\n+- #12746 `2405ce1` Remove unused argument `max_invalid` from `check_estimates(\u2026)` (practicalswift)\n+- #12718 `185d484` Require exact match in `assert_start_raises_init_eror` (jnewbery, MarcoFalke)\n+- #12076 `6d36f59` Use node.datadir instead of tmpdir in test framework (MarcoFalke)\n+- #12772 `b43aba8` ci: Bump travis timeout for make check to 50m (jnewbery)\n+- #12806 `18606eb` Fix function names in `feature_blocksdir` (MarcoFalke)\n+- #12811 `0d8fc8d` Make summary row bold-red if any test failed and show failed tests at end of table (laanwj)\n+- #12790 `490644d` Use blockmaxweight where tests previously had blockmaxsize (conscott)\n+- #11773 `f0f9732` Change `feature_block.py` to use BitcoinTestFramework (jnewbery)\n+- #12839 `40f4baf` Remove travis checkout depth (laanwj)\n+- #11817 `2a09a78` Change `feature_csv_activation.py` to use BitcoinTestFramework (jnewbery)\n+- #12284 `fa5825d` Remove assigned but never used local variables. Enable Travis checking for unused local variables (practicalswift)\n+- #12719 `9beded5` Add note about test suite naming convention in developer-notes.md (practicalswift)\n+- #12861 `c564424` Stop `feature_block.py` from blowing up memory (jnewbery)\n+- #12851 `648252e` travis: Run verify-commits only on cron jobs (MarcoFalke)\n+- #12853 `2106c4c` Match full plain text by default (MarcoFalke)\n+- #11818 `9a2db3b` I accidentally (deliberately) killed it (the ComparisonTestFramework) (jnewbery)\n+- #12766 `69310a3` Tidy up REST interface functional tests (romanz)\n+- #12849 `83c7533` Add logging in loops in `p2p_sendhears.py` (ccdle12)\n+- #12895 `d6f10b2` Add note about test suite name uniqueness requirement to developer notes (practicalswift)\n+- #12856 `27278df` Add Metaclass for BitcoinTestFramework (WillAyd)\n+- #12918 `6fc5a05` Assert on correct variable (kallewoof)\n+- #11878 `a04440f` Add Travis check for duplicate includes (practicalswift)\n+- #12917 `cf8073f` Windows fixups for functional tests (MarcoFalke)\n+- #12926 `dd1ca9e` Run unit tests in parallel (sipa)\n+- #12920 `b1fdfc1` Fix sign for expected values (kallewoof)\n+- #12947 `979f598` Wallet hd functional test speedup and clarification (instagibbs)\n+- #12993 `0d69921` Remove compatibility code not needed now when we're on Python 3 (practicalswift)\n+- #12996 `6a278e0` Remove redundant bytes(\u2026) calls (practicalswift)\n+- #12949 `6b46288` Avoid copies of CTransaction (MarcoFalke)\n+- #13007 `0d12570` Fix dangling wallet pointer in vpwallets (promag)\n+- #13048 `cac6d11` Fix `feature_block` flakiness (jnewbery)\n+- #12510 `d5b2e98` Add `rpc_bind` test to default-run tests (laanwj)\n+- #13022 `896a9d0` Attach node index to `test_node` AssertionError and print messages (jamesob)\n+- #13024 `018c7e5` Add rpcauth pair that generated by rpcauth.py (ken2812221)\n+- #13013 `a0079d4` bench: Amend `mempool_eviction` test for witness txs (MarcoFalke)\n+- #13051 `e074097` Normalize executable location (MarcoFalke)\n+- #13056 `106d929` Make rpcauth.py testable and add unit tests (nixbox)\n+- #13073 `a785bc3` add rpcauth-test to `AC_CONFIG_LINKS` to fix out-of-tree make check (laanwj)\n+- #12830 `25ad2f7` Clarify address book error messages, add tests (jamesob)\n+- #13082 `24106a8` don't test against min relay fee information in `mining_prioritisetransaction.py` (kristapsk)\n+- #13003 `8d045a0` Add test for orphan handling (MarcoFalke)\n+- #13105 `9e9b48d` Add --failfast option to functional test runner (jamesob)\n+- #13130 `3186ad4` Fix race in `rpc_deprecated.py` (jnewbery)\n+- #13136 `baf6b4e` Fix flake8 warnings in several wallet functional tests (jnewbery)\n+- #13094 `bf9b03d` Add test for 64-bit Windows PE, modify 32-bit test results (ken2812221)\n+- #13183 `9458b05` travis: New travis job for `check_docs` steps (glaksmono)\n+- #12265 `1834d4d` fundrawtransaction: lock watch-only shared address (kallewoof)\n+- #13188 `4a50ec0` Remove unused option --srcdir (MarcoFalke)\n+- #12755 `612ba35` Better stderr testing (jnewbery)\n+- #13198 `196c5a9` Avoid printing to console during cache creation (sdaftuar)\n+- #13075 `cb9bbf7` Remove 'account' API from wallet functional tests (jnewbery)\n+- #13221 `ffa86af` travis: Rename the build stage `check_doc` to `lint` (practicalswift)\n+- #13205 `3cbd25f` Remove spurious error log in `p2p_segwit.py` (jnewbery)\n+- #13291 `536120e` Don't include torcontrol.cpp into the test file (Empact)\n+- #13281 `2ac6315` Move linters to test/lint, add readme (MarcoFalke)\n+- #13215 `f8a29ca` travis: Build tests on ubuntu 18.04 with docker (ken2812221)\n+- #13349 `24f7011` bench: Don't return a bool from main (laanwj)\n+- #13347 `87a9d03` travis: Skip cache for lint stage (MarcoFalke)\n+- #13355 `0b1c0c4` Fix \"gmake check\" under OpenBSD 6.3 (probably `*BSD`): Avoid using GNU grep specific regexp handling (practicalswift)\n+- #13353 `d4f6dac` Fixup setting of PATH env var (MarcoFalke)\n+- #13352 `e24bf1c` Avoid checking reject code for now (MarcoFalke)\n+- #13383 `2722a1f` bench: Use non-throwing parsedouble(\u2026) instead of throwing boost::lexical_cast<double>(\u2026) (practicalswift)\n+- #13367 `264efdc` Increase includeconf test coverage (MarcoFalke)\n+- #13404 `3d3d8ae` speed up of `tx_validationcache_tests` by reusing of CTransaction (lucash-dev)\n+- #13421 `531a033` Remove `portseed_offset` from test runner (MarcoFalke)\n+- #13440 `5315660` Log as utf-8 (MarcoFalke)\n+- #13066 `fa4b906` Migrate verify-commits script to python, run in travis (ken2812221)\n+- #13447 `4b1edd3` travis: Increase `travis_wait` time while verifying commits (ken2812221)\n+- #13350 `f532d52` Add logging to provide anchor points when debugging p2p_sendheaders (lmanners)\n+- #13406 `4382f19` travis: Change mac goal to all deploy (ken2812221)\n+- #13457 `b222138` Drop variadic macro (MarcoFalke)\n+- #13512 `3a45493` mininode: Expose connection state through `is_connected` (MarcoFalke)\n+- #13496 `9ab4c2a` Harden lint-filenames.sh (wodry)\n+- #13219 `08516e0` bench: Add block assemble benchmark (MarcoFalke)\n+- #13530 `b1dc39d` bench: Add missing pow.h header (laanwj)\n+- #12686 `2643fa5` Add -ftrapv to CFLAGS and CXXFLAGS when --enable-debug is used. Enable -ftrapv in Travis (practicalswift)\n+- #12882 `d96bdd7` Make `test_bitcoin` pass under ThreadSanitzer (clang). Fix lock-order-inversion (potential deadlock) (practicalswift)\n+- #13535 `2328039` `wallet_basic`: Specify minimum required amount for listunspent (MarcoFalke)\n+- #13551 `c93c360` Fix incorrect documentation for test case `cuckoocache_hit_rate_ok` (practicalswift)\n+- #13563 `b330f3f` bench: Simplify coinselection (promag)\n+- #13517 `a6ed99a` Remove need to handle the network thread in tests (MarcoFalke)\n+- #13522 `686e97a` Fix `p2p_sendheaders` race (jnewbery)\n+- #13467 `3dc2dcf` Make `p2p_segwit` easier to debug (jnewbery)\n+- #13598 `0212187` bench: Fix incorrect behaviour in prevector.cpp (AkioNak)\n+- #13565 `b05ded1` Fix AreInputsStandard test to reference the proper scriptPubKey (Empact)\n+- #13145 `d3dae3d` Use common getPath method to create temp directory in tests (winder)\n+- #13645 `2ea7eb6` skip `rpc_zmq` functional test as necessary (jamesob)\n+- #13626 `8f1106d` Fix some TODOs in `p2p_segwit` (MarcoFalke)\n+- #13138 `8803c91` Remove accounts from `wallet_importprunedfunds.py` (jnewbery)\n+- #13663 `cbc9b50` Avoid read/write to default datadir (MarcoFalke)\n+- #13682 `f8a32a3` bench: Remove unused variable (practicalswift)\n+- #13638 `6fcdb5e` Use `MAX_SCRIPT_ELEMENT_SIZE` from script.py (domob1812)\n+- #13687 `9d26b69` travis: Check that ~/.bitcoin is never created (MarcoFalke)\n+- #13715 `e1260a7` fixes mininode's P2PConnection sending messages on closing transport (marcoagner)\n+- #13729 `aa9429a` travis: Avoid unnecessarily setting env variables on the lint build (Empact)\n+- #13747 `ab28b5b` Skip P2PConnection's `is_closing()` check when not available (domob1812)\n+- #13650 `7a9bca6` travis: Don't store debug info if --enable-debug is set (ken2812221)\n+- #13711 `f98d1e0` bench: Add benchmark for unserialize prevector (AkioNak)\n+- #13771 `365384f` travis: Retry to fetch docker image (MarcoFalke)\n+- #13806 `4d550ff` Fix `bench/block_assemble` assert failure (jamesob)\n+- #13779 `d25079a` travis: Improve readability of travis.yml and log outputs (scravy)\n+- #13822 `0fb9c87` bench: Make coinselection output groups pass eligibility filter (achow101)\n+- #13247 `e83d82a` Add tests to SingleThreadedSchedulerClient() and document the memory model (skeees)\n+- #13811 `660abc1` travis: Run `bench_bitcoin` once (MarcoFalke)\n+- #13837 `990e182` Extract `rpc_timewait` as test param (MarcoFalke)\n+- #13851 `9c4324d` fix locale for lint-shell (scravy)\n+- #13823 `489b51b` quote path in authproxy for external multiwallets (MarcoFalke)\n+- #13849 `2b67354` travis: Use only travis jobs: instead of mix of jobs+matrix (scravy)\n+- #13859 `2384323` Add emojis to `test_runner` path and wallet filename (MarcoFalke)\n+- #13916 `8ac7125` `wait_for_verack` by default (MarcoFalke)\n+- #13669 `f66e1c7` Cleanup `create_transaction` implementations (conscott)\n+- #13924 `09ada21` Simplify comparison in `rpc_blockchain.py` (domob1812)\n+- #13913 `a08533c` Remove redundant checkmempool/checkblockindex `extra_args` (MarcoFalke)\n+- #13915 `a04888a` Add test for max number of entries in locator (MarcoFalke)\n+- #13867 `1b04b55` Make extended tests pass on native Windows (MarcoFalke)\n+- #13944 `0df7a6c` Port usage of deprecated optparse module to argparse module (Kvaciral)\n+- #13928 `b8eb0df` blocktools enforce named args for amount (MarcoFalke)\n+- #13054 `bffb35f` Enable automatic detection of undefined names in Python tests scripts. Remove wildcard imports (practicalswift)\n+- #14069 `cf3d7f9` Use assert not `BOOST_CHECK_*` from multithreaded tests (skeees)\n+- #14071 `fab0fbe` Stop txindex thread before calling destructor (MarcoFalke)\n+\n+### Miscellaneous\n+- #11909 `8897135` contrib: Replace developer keys with list of pgp fingerprints (MarcoFalke)\n+- #12394 `fe53d5f` gitian-builder.sh: fix --setup doc, since lxc is default (Sjors)\n+- #12468 `294a766` Add missing newline in init.cpp log message (Aesti)\n+- #12308 `dcfe218` contrib: Add support for out-of-tree builds in gen-manpages.sh (laanwj)\n+- #12451 `aae64a2` Bump leveldb subtree (MarcoFalke)\n+- #12527 `d77b4a7` gitian-build.sh: fix signProg being recognized as two parameters (ken2812221)\n+- #12588 `d74b01d` utils: Remove deprecated pyzmq call from python zmq example (kosciej)\n+- #10271 `bc67982` Use `std::thread::hardware_concurrency`, instead of Boost, to determine available cores (fanquake)\n+- #12097 `14475e2` scripts: Lint-whitespace: use perl instead of grep -p (Sjors)\n+- #12098 `17c44b2` scripts: Lint-whitespace: add param to check last n commits (Sjors)\n+- #11900 `842f61a` script: Simplify checkminimalpush checks, add safety assert (instagibbs)\n+- #12567 `bb98aec` util: Print timestamp strings in logs using iso 8601 formatting (practicalswift)\n+- #12572 `d8d9162` script: Lint-whitespace: find errors more easily (AkioNak)\n+- #10694 `ae5bcc7` Remove redundant code in MutateTxSign(CMutableTransaction&, const std::string&) (practicalswift)\n+- #12659 `3d16f58` Improve Fatal LevelDB Log Messages (eklitzke)\n+- #12643 `0f0229d` util: Remove unused `sync_chain` (MarcoFalke)\n+- #12102 `7fb8fb4` Apply hardening measures in bitcoind systemd service file (Flowdalic)\n+- #12652 `55f490a` bitcoin-cli: Provide a better error message when bitcoind is not running (practicalswift)\n+- #12630 `c290508` Provide useful error message if datadir is not writable (murrayn)\n+- #11881 `624bee9` Remove Python2 support (jnewbery)\n+- #12821 `082e26c` contrib: Remove unused import string (MarcoFalke)\n+- #12829 `252c1b0` Python3 fixup (jnewbery)\n+- #12822 `ff48f62` Revert 7deba93bdc76616011a9f493cbc203d60084416f and fix expired-key-sigs properly (TheBlueMatt)\n+- #12820 `5e53b80` contrib: Fix check-doc script regexes (MarcoFalke)\n+- #12713 `4490871` Track negated options in the option parser (eklitzke)\n+- #12708 `b2e5fe8` Make verify-commits.sh test that merges are clean (sipa)\n+- #12891 `3190785` logging: Add lint-logs.sh to check for newline termination (jnewbery)\n+- #12923 `a7cbe38` util: Pass `pthread_self()` to `pthread_setschedparam` instead of 0 (laanwj)\n+- #12871 `fb17fae` Add shell script linting: Check for shellcheck warnings in shell scripts (practicalswift)\n+- #12970 `5df84de` logging: Bypass timestamp formatting when not logging (theuni)\n+- #12987 `fe8fa22` tests/tools: Enable additional Python flake8 rules for automatic linting via Travis (practicalswift)\n+- #12972 `0782508` Add python3 script shebang lint (ken2812221)\n+- #13004 `58bbc55` Print to console by default when not run with -daemon (practicalswift)\n+- #13039 `8b4081a` Add logging and error handling for file syncing (laanwj)\n+- #13020 `4741ca5` Consistently log CValidationState on call failure (Empact)\n+- #13031 `826acc9` Fix for utiltime to compile with msvc (sipsorcery)\n+- #13119 `81743b5` Remove script to clean up datadirs (MarcoFalke)\n+- #12954 `5a66642` util: Refactor logging code into a global object (jimpo)\n+- #12769 `35eb9d6` Add systemd service to bitcoind in debian package (ghost)\n+- #13146 `0bc980b` rpcauth: Make it possible to provide a custom password (laanwj)\n+- #13148 `b62b437` logging: Fix potential use-after-free in logprintstr(\u2026) (practicalswift)\n+- #13214 `0612d96` Enable Travis checking for two Python linting rules we are currently not violating (practicalswift)\n+- #13197 `6826989` util: Warn about ignored recursive -includeconf calls (kallewoof)\n+- #13176 `d9ebb63` Improve CRollingBloomFilter performance: replace modulus with FastMod (martinus)\n+- #13228 `d792e47` Add script to detect circular dependencies between source modules (sipa)\n+- #13320 `e08c130` Ensure gitian-build.sh uses bash (jhfrontz)\n+- #13301 `e4082d5` lint: Add linter to error on `#include <*.cpp>` (Empact)\n+- #13374 `56f6936` utils and libraries: checking for bitcoin address in translations (kaplanmaxe)\n+- #13230 `7c32b41` Simplify include analysis by enforcing the developer guide's include syntax (practicalswift)\n+- #13450 `32bf4c6` Add linter: Enforce the source code file naming convention described in the developer notes (practicalswift)\n+- #13479 `fa2ea37` contrib: Fix cve-2018-12356 by hardening the regex (loganaden)\n+- #13448 `a90ca40` Add linter: Make sure we explicitly open all text files using UTF-8 encoding in Python (practicalswift)\n+- #13494 `d67eff8` Follow-up to #13454: Fix broken build by exporting `LC_ALL=C` (practicalswift)\n+- #13510 `03f3925` Scripts and tools: Obsolete #!/bin/bash shebang (DesWurstes)\n+- #13577 `c9eb8d1` logging: Avoid nstart may be used uninitialized in appinitmain warning (mruddy)\n+- #13603 `453ae5e` bitcoin-tx: Stricter check for valid integers (domob1812)\n+- #13118 `c05c93c` RPCAuth Detection in Logs (Linrono)\n+- #13647 `4027ec1` Scripts and tools: Fix `BIND_NOW` check in security-check.py (conradoplg)\n+- #13692 `f5d166a` contrib: Clone core repo in gitian-build (MarcoFalke)\n+- #13699 `4c6d1b9` contrib: Correct version check (kallewoof)\n+- #13695 `dcc0cff` lint: Add linter for circular dependencies (Empact)\n+- #13733 `0d1ebf4` utils: Refactor argsmanager a little (AtsukiTak)\n+- #13714 `29b4ee6` contrib: Add lxc network setup for bionic host (ken2812221)\n+- #13764 `f8685f4` contrib: Fix test-security-check fail in ubuntu 18.04 (ken2812221)\n+- #13809 `77168f7` contrib: Remove debian and rpm subfolder (MarcoFalke)\n+- #13799 `230652c` Ignore unknown config file options; warn instead of error (sipa)\n+- #13894 `df9f712` shutdown: Stop threads before resetting ptrs (MarcoFalke)\n+- #13925 `71dec5c` Merge leveldb subtree (MarcoFalke)\n+- #13939 `ef86f26` lint: Make format string linter understand basic template parameter syntax (practicalswift)\n+- #14105 `eb202ea` util: Report parse errors in configuration file (laanwj)\n+- #12604 `9903537` Add DynamicMemoryUsage() to CDBWrapper to estimate LevelDB memory use (eklitzke)\n+- #12495 `047865e` Increase LevelDB `max_open_files` (eklitzke)\n+- #12784 `e80716d` Fix bug in memory usage calculation (unintended integer division) (practicalswift)\n+- #12618 `becd8dd` Set `SCHED_BATCH` priority on the loadblk thread (eklitzke)\n+- #12854 `5ca1509` Add P2P, Network, and Qt categories to the desktop icon (luke-jr)\n+- #11862 `4366f61` Network specific conf sections (ajtowns)\n+- #13441 `4a7e64f` Prevent shared conf files from failing with different available options in different binaries (achow101)\n+- #13471 `5eca4e8` For AVX2 code, also check for AVX, XSAVE, and OS support (sipa)\n+- #13503 `c655b2c` Document FreeBSD quirk. Fix FreeBSD build: Use std::min<int>(\u2026) to allow for compilation under certain FreeBSD versions (practicalswift)\n+- #13725 `07ce278` Fix bitcoin-cli --version (Empact)\n+\n+### Documentation\n+- #12306 `216f9a4` Improvements to UNIX documentation (axvr)\n+- #12309 `895fbd7` Explain how to update chainTxData in release process (laanwj)\n+- #12317 `85123be` Document method for reviewers to verify chainTxData (jnewbery)\n+- #12331 `d32528e` Properly alphabetize output of CLI --help option (murrayn)\n+- #12322 `c345148` Remove step making cloned repository world-writable for Windows build (murrayn)\n+- #12354 `b264528` add gpg key for fivepiece (fivepiece)\n+- #11761 `89005dd` initial QT documentation (Sjors)\n+- #12232 `fdc2188` Improve \"Turn Windows Features On or Off\" step (MCFX2)\n+- #12487 `4528f74` init: Remove translation for `-blockmaxsize` option help (laanwj)\n+- #12546 `a4a5fc7` Minor improvements to Compatibility Notes (randolf)\n+- #12434 `21e2670` dev-notes: Members should be initialized (MarcoFalke)\n+- #12452 `71f56da` clarified systemd installation instructions in init.md for Ubuntu users (DaveFromBinary)\n+- #12615 `1f93491` allow for SIGNER containing spaces (ken2812221)\n+- #12603 `85424d7` PeerLogicValidation interface (jamesob)\n+- #12581 `12ac2f0` Mention configure without wallet in FreeBSD instructions (dbolser)\n+- #12619 `8a709fb` Give hint about gitian not able to download (kallewoof)\n+- #12668 `de2fcaa` do update before fetching packages in WSL build guide (nvercamm)\n+- #12586 `e7721e6` Update osx brew install instruction (fanquake)\n+- #12760 `7466a26` Improve documentation on standard communication channels (jimpo)\n+- #12797 `0415b1e` init: Fix help message for checkblockindex (MarcoFalke)\n+- #12800 `2d97611` Add note about our preference for scoped enumerations (\"enum class\") (practicalswift)\n+- #12798 `174d016` Refer to witness reserved value as spec. in the BIP (MarcoFalke)\n+- #12759 `d3908e2` Improve formatting of developer notes (eklitzke)\n+- #12877 `2b54155` Use bitcoind in Tor documentation (knoxcard)\n+- #12896 `b15485e` Fix conflicting statements about initialization in developer notes (practicalswift)\n+- #12850 `319991d` add qrencode to brew install instructions (buddilla)\n+- #12007 `cd8e45b` Clarify the meaning of fee delta not being a fee rate in prioritisetransaction RPC (honzik666)\n+- #12927 `06ead15` fixed link, replaced QT with Qt (trulex)\n+- #12852 `ebd786b` devtools: Setup ots git integration (MarcoFalke)\n+- #12933 `3cf76c2` Refine header include policy (MarcoFalke)\n+- #12951 `6df0c6c` Fix comment in FindForkInGlobalIndex (jamesob)\n+- #12982 `a63b4e3` Fix inconsistent namespace formatting guidelines (ryanofsky)\n+- #13026 `9b3a67e` Fix include comment in src/interfaces/wallet.h (promag)\n+- #13012 `d1e3c5e` Add comments for chainparams.h, validation.cpp (jamesob)\n+- #13064 `569e381` List support for BIP173 in bips.md (sipa)\n+- #12997 `646b7f6` build-windows: Switch to Artful, since Zesty is EOL (MarcoFalke)\n+- #12384 `c5f7efe` Add version footnote to tor.md (Willtech)\n+- #13165 `627c376` Mention good first issue list in CONTRIBUTING.md (fanquake)\n+- #13295 `fb77310` Update OpenBSD build instructions for OpenBSD 6.3 (practicalswift)\n+- #13340 `3a8e3f4` remove leftover check-doc documentation (fanquake)\n+- #13346 `60f0358` update bitcoin-dot-org links in release-process.md (fanquake)\n+- #13372 `f014933` split FreeBSD build instructions out of build-unix.md (steverusso)\n+- #13366 `861de3b` Rename \u201cOS X\u201d to the newer \u201cmacOS\u201d convention (giulio92)\n+- #13369 `f8bcef3` update transifex doc link (mess110)\n+- #13312 `b22115d` Add a note about the source code filename naming convention (practicalswift)\n+- #13460 `1939536` Remove note to install all boost dev packages (MarcoFalke)\n+- #13476 `9501938` Fix incorrect shell quoting in FreeBSD build instructions (murrayn)\n+- #13402 `43fa355` Document validationinterace callback blocking deadlock potential (TheBlueMatt)\n+- #13488 `d6cf4bd` Improve readability of \"Squashing commits\" (wodry)\n+- #13531 `ee02deb` Clarify that mempool txiter is `const_iterator` (MarcoFalke)\n+- #13418 `01f9098` More precise explanation of parameter onlynet (wodry)\n+- #13592 `1756cb4` Modify policy to not translate command-line help (ken2812221)\n+- #13588 `b77c38e` Improve doc of options addnode, connect, seednode (wodry)\n+- #13614 `17e9106` Update command line help for -printtoconsole and -debuglogfile (satwo, fanquake)\n+- #13605 `8cc048e` corrected text to reflect new(er) process of specifying fingerprints (jhfrontz)\n+- #13481 `b641f60` Rewrite some validation docs as lock annotations (MarcoFalke)\n+- #13680 `30640f8` Remove outdated comment about miner ignoring CPFP (jamesob)\n+- #13625 `7146672` Add release notes for -printtoconsole and -debuglogfile changes (satwo)\n+- #13718 `f7f574d` Specify preferred Python string formatting technique (masonicboom)\n+- #12764 `10b9a81` Remove field in getblocktemplate help that has never been used (conscott)\n+- #13742 `d2186b3` Adjust bitcoincore.org links (MarcoFalke)\n+- #13706 `94dd89e` Minor improvements to release-process.md (MitchellCash)\n+- #13775 `ef4fac0` Remove newlines from error message (practicalswift)\n+- #13803 `feb7dd9` add note to contributor docs about warranted PR's (kallewoof)\n+- #13814 `67af7ef` Add BIP174 to list of implemented BIPs (sipa)\n+- #13835 `c1cba35` Fix memory consistency model in comment (skeees)\n+- #13824 `aa30e4b` Remove outdated net comment (MarcoFalke)\n+- #13853 `317477a` correct versions in dependencies.md (fanquake)\n+- #13872 `37ab117` Reformat -help output for help2man (real-or-random)\n+- #13717 `8c3c402` Link to python style guidelines from developer notes (masonicboom)\n+- #13895 `1cd5f2c` fix GetWarnings docs to reflect behavior (Empact)\n+- #13911 `3e3a50a` Revert translated string change, clarify wallet log messages (PierreRochard)\n+- #13908 `d6faea4` upgrade rescan time warning from minutes to >1 hour (masonicboom)\n+- #13905 `73a09b4` fixed bitcoin-cli -help output for help2man (hebasto)\n+- #14100 `2936dbc` Change documentation for =0 for non-boolean options (laanwj)\n+- #14096 `465a583` Add reference documentation for descriptors language (sipa)\n+- #12757 `0c5f67b` Clarify include guard naming convention (practicalswift)\n+- #13844 `d3325b0` Correct the help output for `-prune` (hebasto)\n+\n Credits\n =======\n \n Thanks to everyone who directly contributed to this release:\n \n-\n-As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/).\n+- 251\n+- 532479301\n+- Aaron Clauson\n+- Akio Nakamura\n+- Akira Takizawa\n+- Alex Morcos\n+- Alex Vear\n+- Alexey Ivanov\n+- Alin Rus\n+- Andrea Comand\n+- Andrew Chow\n+- Anthony Towns\n+- AtsukiTak\n+- Ben Woosley\n+- Bernhard M. Wiedemann\n+- Brandon Ruggles\n+- buddilla\n+- ccdle12\n+- Chris Moore\n+- Chun Kuan Lee\n+- Clem Taylor\n+- Conor Scott\n+- Conrado Gouvea\n+- Cory Fields\n+- Cristian Mircea Messel\n+- ctp-tsteenholdt\n+- Damian Williamson\n+- Dan Bolser\n+- Daniel Kraft\n+- Darko Jankovi\u0107\n+- DaveFromBinary\n+- David A. Harding\n+- DesWurstes\n+- Dimitris Apostolou\n+- donaloconnor\n+- Douglas Roark\n+- DrahtBot\n+- Drew Rasmussen\n+- e0\n+- Ernest Hemingway\n+- Ethan Heilman\n+- Evan Klitzke\n+- fanquake\n+- Felix Wolfsteller\n+- fivepiece\n+- Florian Schmaus\n+- Fuzzbawls\n+- Gabriel Davidian\n+- Giulio Lombardo\n+- Gleb\n+- Grady Laksmono\n+- GreatSock\n+- Gregory Maxwell\n+- Gregory Sanders\n+- Hennadii Stepanov\n+- Henrik Jonsson\n+- Indospace.io\n+- James O'Beirne\n+- Jan \u010capek\n+- Jeff Frontz\n+- Jeff Rade\n+- Jeremy Rubin\n+- JeremyRand\n+- Jesse Cohen\n+- Jim Posen\n+- joemphilips\n+- John Bampton\n+- John Newbery\n+- johnlow95\n+- Johnson Lau\n+- Jonas Nick\n+- Jonas Schnelli\n+- Jo\u00e3o Barbosa\n+- Jorge Tim\u00f3n\n+- Josh Hartshorn\n+- Julian Fleischer\n+- kallewoof\n+- Karel Bilek\n+- Karl-Johan Alm\n+- Ken Lee\n+- Kevin Pan\n+- Kosta Zertsekel\n+- Kristaps Kaupe\n+- Kvaciral\n+- Lawrence Nahum\n+- Linrono\n+- lmanners\n+- Loganaden Velvindron\n+- Lowell Manners\n+- lucash.dev@gmail.com\n+- Luke Dashjr\n+- lutangar\n+- Marcin Jachymiak\n+- marcoagner\n+- MarcoFalke\n+- Mark Erhardt\n+- Mark Friedenbach\n+- Martin Ankerl\n+- Mason Simon\n+- Matt Corallo\n+- Matteo Sumberaz\n+- Max Kaplan\n+- MeshCollider\n+- Micha\u0142 Zabielski\n+- Mitchell Cash\n+- mruddy\n+- mryandao\n+- murrayn\n+- Nick Vercammen\n+- Nicolas Dorier\n+- Nikolay Mitev\n+- okayplanet\n+- Pierre Rochard\n+- Pieter Wuille\n+- practicalswift\n+- Qasim Javed\n+- Randolf Richardson\n+- Richard Kiss\n+- Roman Zeyde\n+- Russell Yanofsky\n+- Samuel B. Atwood\n+- Sebastian Kung\n+- Sjors Provoost\n+- Steve Lee\n+- steverusso\n+- Suhas Daftuar\n+- Tamas Blummer\n+- TheCharlatan\n+- Thomas Kerin\n+- Thomas Snider\n+- Tim Ruffing\n+- Varunram\n+- Vasil Dimov\n+- Will Ayd\n+- William Robinson\n+- winder\n+- Wladimir J. van der Laan\n+- wodry\n+\n+And to those that reported security issues:\n+\n+- awemany (for CVE-2018-17144, previously credited as \"anonymous reporter\")\n+\n+As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/).\n\\ No newline at end of file"
      }
    ]
  },
  {
    "sha": "e1ed37edaedc85b8c3468bd9a726046344036243",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMWVkMzdlZGFlZGM4NWI4YzM0NjhiZDlhNzI2MDQ2MzQ0MDM2MjQz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-10-01T10:02:21Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-10-01T10:04:33Z"
      },
      "message": "Merge #14157: [0.17] doc: merge upstream release-notes from bitcoin-core/bitcoin-devwiki\n\n786825c719e40f8c73643fae4ea9e9dca454715f doc: Update release-notes.md from upstream devwiki (fanquake)\n\nPull request description:\n\n  sipa [suggested in IRC](https://botbot.me/freenode/bitcoin-core-dev/2018-09-06/?msg=104094793&page=1) that now would be a good time to merge the release notes from the [bitcoin-devwiki](https://github.com/bitcoin-core/bitcoin-devwiki).\n\nTree-SHA512: 6d9631e12147b4e64f5382a64cceb71b84ca21bdb3fc516248de79968f7f26e74ab5d569e3767018581bcda4d5b8c8ec103b1795929e98f7e9c4d6e95379f7de",
      "tree": {
        "sha": "ed973027ee9b576a5764b8b711a5a8f1c4107694",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ed973027ee9b576a5764b8b711a5a8f1c4107694"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e1ed37edaedc85b8c3468bd9a726046344036243",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlux8TEACgkQHkrtYphs\n0l0cLggAmUHlLgyqmq0kapVS+P8bcYH2exgmy5UPKGbsRHNPEXAZhtTASwa6c9I8\nImL9biwKJVkxb515eW72KO2J8FZ1N7dQT46ue3WzuBuLdXQejRbONGqi/2Bp9Akp\nD5XFN1s1eNjYFH1GBqUtEaP9OUaJHeIkH2tgUFIKrnOqi2+SYlckxK5jFUsyjHvF\niovCwqUzsHqgvHZY3WWMLn7timVMucV9lkQoRuvpSrCbywWsX3cLas6p8Vn56vMg\nd5kL0kKJIEywAkU7yMXvqRtqVIyu9h4X8CwSZN0DaJHrdFyx40tHBqS2RDX1icOw\n9fMEw5k6NfROUMCVjkshqE93eVyghA==\n=pEcE\n-----END PGP SIGNATURE-----",
        "payload": "tree ed973027ee9b576a5764b8b711a5a8f1c4107694\nparent 480d6bb07832576c7e861ef8d65405938605c5f8\nparent 786825c719e40f8c73643fae4ea9e9dca454715f\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1538388141 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1538388273 +0200\n\nMerge #14157: [0.17] doc: merge upstream release-notes from bitcoin-core/bitcoin-devwiki\n\n786825c719e40f8c73643fae4ea9e9dca454715f doc: Update release-notes.md from upstream devwiki (fanquake)\n\nPull request description:\n\n  sipa [suggested in IRC](https://botbot.me/freenode/bitcoin-core-dev/2018-09-06/?msg=104094793&page=1) that now would be a good time to merge the release notes from the [bitcoin-devwiki](https://github.com/bitcoin-core/bitcoin-devwiki).\n\nTree-SHA512: 6d9631e12147b4e64f5382a64cceb71b84ca21bdb3fc516248de79968f7f26e74ab5d569e3767018581bcda4d5b8c8ec103b1795929e98f7e9c4d6e95379f7de\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1ed37edaedc85b8c3468bd9a726046344036243",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e1ed37edaedc85b8c3468bd9a726046344036243",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1ed37edaedc85b8c3468bd9a726046344036243/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "480d6bb07832576c7e861ef8d65405938605c5f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/480d6bb07832576c7e861ef8d65405938605c5f8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/480d6bb07832576c7e861ef8d65405938605c5f8"
      },
      {
        "sha": "786825c719e40f8c73643fae4ea9e9dca454715f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/786825c719e40f8c73643fae4ea9e9dca454715f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/786825c719e40f8c73643fae4ea9e9dca454715f"
      }
    ],
    "stats": {
      "total": 916,
      "additions": 876,
      "deletions": 40
    },
    "files": [
      {
        "sha": "1b6e2f8e6cbeb56c69d7465755244df89f1b8961",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 876,
        "deletions": 40,
        "changes": 916,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1ed37edaedc85b8c3468bd9a726046344036243/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1ed37edaedc85b8c3468bd9a726046344036243/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=e1ed37edaedc85b8c3468bd9a726046344036243",
        "patch": "@@ -1,9 +1,9 @@\n (note: this is a temporary file, to be added-to by anybody, and moved to\n release-notes at release time)\n \n-Bitcoin Core version *version* is now available from:\n+Bitcoin Core version 0.17.0 is now available from:\n \n-  <https://bitcoincore.org/bin/bitcoin-core-*version*/>\n+  <https://bitcoincore.org/bin/bitcoin-core-0.17.0/>\n \n This is a new major version release, including new features, various bugfixes\n and performance improvements, as well as updated translations.\n@@ -24,7 +24,9 @@ shut down (which might take a few minutes for older versions), then run the\n installer (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on Mac)\n or `bitcoind`/`bitcoin-qt` (on Linux).\n \n-The first time you run version 0.15.0, your chainstate database will be converted to a\n+If your node has a txindex, the txindex db will be migrated the first time you run 0.17.0 or newer, which may take up to a few hours. Your node will not be functional until this migration completes.\n+\n+The first time you run version 0.15.0 or newer, your chainstate database will be converted to a\n new format, which will take anywhere from a few minutes to half an hour,\n depending on the speed of your machine.\n \n@@ -56,20 +58,28 @@ frequently tested on them.\n From 0.17.0 onwards macOS <10.10 is no longer supported. 0.17.0 is built using Qt 5.9.x, which doesn't\n support versions of macOS older than 10.10.\n \n+Known issues\n+============\n+\n+- Upgrading from 0.13.0 or older currently results in memory blow-up during the roll-back of blocks to the SegWit activation point. In these cases, a full `-reindex` is necessary.\n+\n+- The GUI suffers from visual glitches in the new MacOS dark mode. This has to do with our Qt theme handling and is not a new problem in 0.17.0, but is expected to be resolved in 0.17.1.\n+\n Notable changes\n ===============\n \n-Changed command-line options\n-----------------------------\n+Changed configuration options\n+-----------------------------\n \n - `-includeconf=<file>` can be used to include additional configuration files.\n   Only works inside the `bitcoin.conf` file, not inside included files or from\n   command-line. Multiple files may be included. Can be disabled from command-\n   line via `-noincludeconf`. Note that multi-argument commands like\n   `-includeconf` will override preceding `-noincludeconf`, i.e.\n-\n-    noincludeconf=1\n-    includeconf=relative.conf\n+  ```\n+  noincludeconf=1\n+  includeconf=relative.conf\n+  ```\n \n   as bitcoin.conf will still include `relative.conf`.\n \n@@ -78,27 +88,6 @@ GUI changes\n \n - Block storage can be limited under Preferences, in the Main tab. Undoing this setting requires downloading the full blockchain again. This mode is incompatible with -txindex and -rescan.\n \n-RPC changes\n-------------\n-\n-### Low-level changes\n-\n-- The `createrawtransaction` RPC will now accept an array or dictionary (kept for compatibility) for the `outputs` parameter. This means the order of transaction outputs can be specified by the client.\n-- The `fundrawtransaction` RPC will reject the previously deprecated `reserveChangeKey` option.\n-- `sendmany` now shuffles outputs to improve privacy, so any previously expected behavior with regards to output ordering can no longer be relied upon.\n-- The new RPC `testmempoolaccept` can be used to test acceptance of a transaction to the mempool without adding it.\n-- JSON transaction decomposition now includes a `weight` field which provides\n-  the transaction's exact weight. This is included in REST /rest/tx/ and\n-  /rest/block/ endpoints when in json mode. This is also included in `getblock`\n-  (with verbosity=2), `listsinceblock`, `listtransactions`, and\n-  `getrawtransaction` RPC commands.\n-- New `fees` field introduced in `getrawmempool`, `getmempoolancestors`, `getmempooldescendants` and\n-   `getmempoolentry` when verbosity is set to `true` with sub-fields `ancestor`, `base`, `modified`\n-   and `descendant` denominated in BTC. This new field deprecates previous fee fields, such as\n-   `fee`, `modifiedfee`, `ancestorfee` and `descendantfee`.\n-- The new RPC `getzmqnotifications` returns information about active ZMQ\n-  notifications.\n-\n External wallet files\n ---------------------\n \n@@ -133,10 +122,10 @@ This feature is currently only available through the RPC interface.\n \n Coin selection\n --------------\n-- A new `-avoidpartialspends` flag has been added (default=false). If enabled, the wallet will try to spend UTXO's that point at the same destination\n-  together. This is a privacy increase, as there will no longer be cases where a wallet will inadvertently spend only parts of the coins sent to\n-  the same address (note that if someone were to send coins to that address after it was used, those coins will still be included in future\n-  coin selections).\n+\n+### Partial spend avoidance\n+\n+When an address is paid multiple times the coins from those separate payments can be spent separately which hurts privacy due to linking otherwise separate addresses. A new `-avoidpartialspends` flag has been added (default=false). If enabled, the wallet will always spend existing UTXO to the same address together even if it results in higher fees. If someone were to send coins to an address after it was used, those coins will still be included in future coin selections.\n \n Configuration sections for testnet and regtest\n ----------------------------------------------\n@@ -155,9 +144,10 @@ prefixing the option with the network, such as:\n     [regtest]\n     mempoolsize=20\n \n-The `addnode=`, `connect=`, `port=`, `bind=`, `rpcport=`, `rpcbind=`\n-and `wallet=` options will only apply to mainnet when specified in the\n-configuration file, unless a network is specified.\n+If the following options are not in a section, they will only apply to mainnet:\n+`addnode=`, `connect=`, `port=`, `bind=`, `rpcport=`, `rpcbind=` and `wallet=`.\n+The options to choose a network (`regtest=` and `testnet=`) must be specified\n+outside of sections.\n \n 'label' and 'account' APIs for wallet\n -------------------------------------\n@@ -197,9 +187,112 @@ Here are the changes to RPC methods:\n | `listtransactions`     | The `account` named parameter has been renamed to `dummy`. If provided, the `dummy` parameter must be set to the string `*`, unless running with the `-deprecatedrpc=accounts` argument (in which case functionality is unchanged). |\n | `getbalance`           | `account`, `minconf` and `include_watchonly` parameters are deprecated, and can only be used if running with '-deprecatedrpc=accounts' |\n \n+BIP 174 Partially Signed Bitcoin Transactions support\n+-----------------------------------------------------\n+\n+[BIP 174 PSBT](https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki) is an interchange format for Bitcoin transactions that are not fully signed\n+yet, together with relevant metadata to help entities work towards signing it.\n+It is intended to simplify workflows where multiple parties need to cooperate to\n+produce a transaction. Examples include hardware wallets, multisig setups, and\n+[CoinJoin](https://bitcointalk.org/?topic=279249) transactions.\n+\n+### Overall workflow\n+\n+Overall, the construction of a fully signed Bitcoin transaction goes through the\n+following steps:\n+\n+- A **Creator** proposes a particular transaction to be created. He constructs\n+  a PSBT that contains certain inputs and outputs, but no additional metadata.\n+- For each input, an **Updater** adds information about the UTXOs being spent by\n+  the transaction to the PSBT.\n+- A potentially other Updater adds information about the scripts and public keys\n+  involved in each of the inputs (and possibly outputs) of the PSBT.\n+- **Signers** inspect the transaction and its metadata to decide whether they\n+  agree with the transaction. They can use amount information from the UTXOs\n+  to assess the values and fees involved. If they agree, they produce a\n+  partial signature for the inputs for which they have relevant key(s).\n+- A **Finalizer** is run for each input to convert the partial signatures and\n+  possibly script information into a final `scriptSig` and/or `scriptWitness`.\n+- An **Extractor** produces a valid Bitcoin transaction (in network format)\n+  from a PSBT for which all inputs are finalized.\n+\n+Generally, each of the above (excluding Creator and Extractor) will simply\n+add more and more data to a particular PSBT. In a naive workflow, they all have\n+to operate sequentially, passing the PSBT from one to the next, until the\n+Extractor can convert it to a real transaction. In order to permit parallel\n+operation, **Combiners** can be employed which merge metadata from different\n+PSBTs for the same unsigned transaction.\n+\n+The names above in bold are the names of the roles defined in BIP174. They're\n+useful in understanding the underlying steps, but in practice, software and\n+hardware implementations will typically implement multiple roles simultaneously.\n+\n+### RPCs\n+\n+- **`converttopsbt` (Creator)** is a utility RPC that converts an\n+  unsigned raw transaction to PSBT format. It ignores existing signatures.\n+- **`createpsbt` (Creator)** is a utility RPC that takes a list of inputs and\n+  outputs and converts them to a PSBT with no additional information. It is\n+  equivalent to calling `createrawtransaction` followed by `converttopsbt`.\n+- **`walletcreatefundedpsbt` (Creator, Updater)** is a wallet RPC that creates a\n+  PSBT with the specified inputs and outputs, adds additional inputs and change\n+  to it to balance it out, and adds relevant metadata. In particular, for inputs\n+  that the wallet knows about (counting towards its normal or watch-only\n+  balance), UTXO information will be added. For outputs and inputs with UTXO\n+  information present, key and script information will be added which the wallet\n+  knows about. It is equivalent to running `createrawtransaction`, followed by\n+  `fundrawtransaction`, and `converttopsbt`.\n+- **`walletprocesspsbt` (Updater, Signer, Finalizer)** is a wallet RPC that takes as\n+  input a PSBT, adds UTXO, key, and script data to inputs and outputs that miss\n+  it, and optionally signs inputs. Where possible it also finalizes the partial\n+  signatures.\n+- **`finalizepsbt` (Finalizer, Extractor)** is a utility RPC that finalizes any\n+  partial signatures, and if all inputs are finalized, converts the result to a\n+  fully signed transaction which can be broadcast with `sendrawtransaction`.\n+- **`combinepsbt` (Combiner)** is a utility RPC that implements a Combiner. It\n+  can be used at any point in the workflow to merge information added to\n+  different versions of the same PSBT. In particular it is useful to combine the\n+  output of multiple Updaters or Signers.\n+- **`decodepsbt`** is a diagnostic utility RPC which will show all information in\n+  a PSBT in human-readable form, as well as compute its eventual fee if known.\n+\n+Upgrading non-HD wallets to HD wallets\n+--------------------------------------\n+\n+Since Bitcoin Core 0.13.0, creating new BIP 32 Hierarchical Deterministic wallets has been supported by Bitcoin Core but old non-HD wallets could not be upgraded to HD. Now non-HD wallets can be upgraded to HD using the `-upgradewallet` command line option. This upgrade will result in the all keys in the keypool being marked as used and a new keypool generated. **A new backup must be made when this upgrade is performed.**\n+\n+Additionally, `-upgradewallet` can be used to upgraded from a non-split HD chain (all keys generated with `m/0'/0'/i'`) to a split HD chain (receiving keys generated with `'m/0'/0'/i'` and change keys generated with `m'/0'/1'/i'`). When this upgrade occurs, all keys already in the keypool will remain in the keypool to be used until all keys from before the upgrade are exhausted. This is to avoid issues with backups and downgrades when some keys may come from the change key keypool. Users can begin using the new split HD chain keypools by using the `newkeypool` RPC to mark all keys in the keypool as used and begin using a new keypool generated from the split HD chain.\n+\n+HD Master key rotation\n+----------------------\n+\n+A new RPC, `sethdseed`, has been introduced which allows users to set a new HD seed or set their own HD seed. This allows for a new HD seed to be used. **A new backup must be made when a new HD seed is set.**\n+\n Low-level RPC changes\n ---------------------\n \n+- The new RPC `scantxoutset` can be used to scan the UTXO set for entries\n+  that match certain output descriptors. Refer to the [output descriptors\n+  reference documentation](doc/descriptors.md) for more details. This call\n+  is similar to `listunspent` but does not use a wallet, meaning that the\n+  wallet can be disabled at compile or run time. This call is experimental,\n+  as such, is subject to changes or removal in future releases.\n+\n+- The `createrawtransaction` RPC will now accept an array or dictionary (kept for compatibility) for the `outputs` parameter. This means the order of transaction outputs can be specified by the client.\n+- The `fundrawtransaction` RPC will reject the previously deprecated `reserveChangeKey` option.\n+- `sendmany` now shuffles outputs to improve privacy, so any previously expected behavior with regards to output ordering can no longer be relied upon.\n+- The new RPC `testmempoolaccept` can be used to test acceptance of a transaction to the mempool without adding it.\n+- JSON transaction decomposition now includes a `weight` field which provides\n+  the transaction's exact weight. This is included in REST /rest/tx/ and\n+  /rest/block/ endpoints when in json mode. This is also included in `getblock`\n+  (with verbosity=2), `listsinceblock`, `listtransactions`, and\n+  `getrawtransaction` RPC commands.\n+- New `fees` field introduced in `getrawmempool`, `getmempoolancestors`, `getmempooldescendants` and\n+   `getmempoolentry` when verbosity is set to `true` with sub-fields `ancestor`, `base`, `modified`\n+   and `descendant` denominated in BTC. This new field deprecates previous fee fields, such as\n+   `fee`, `modifiedfee`, `ancestorfee` and `descendantfee`.\n+- The new RPC `getzmqnotifications` returns information about active ZMQ\n+  notifications.\n - When bitcoin is not started with any `-wallet=<path>` options, the name of\n   the default wallet returned by `getwalletinfo` and `listwallets` RPCs is\n   now the empty string `\"\"` instead of `\"wallet.dat\"`. If bitcoin is started\n@@ -224,6 +317,19 @@ Low-level RPC changes\n - The `getwalletinfo` RPC method now returns an `hdseedid` value, which is always the same as the incorrectly-named `hdmasterkeyid` value. `hdmasterkeyid` will be removed in V0.18.\n - The `getaddressinfo` RPC method now returns an `hdseedid` value, which is always the same as the incorrectly-named `hdmasterkeyid` value. `hdmasterkeyid` will be removed in V0.18.\n \n+- Parts of the `validateaddress` RPC method have been deprecated and moved to\n+  `getaddressinfo`. Clients must transition to using `getaddressinfo` to access\n+  this information before upgrading to v0.18. The following deprecated fields\n+  have moved to `getaddressinfo` and will only be shown with\n+  `-deprecatedrpc=validateaddress`: `ismine`, `iswatchonly`, `script`, `hex`,\n+  `pubkeys`, `sigsrequired`, `pubkey`, `addresses`, `embedded`, `iscompressed`,\n+  `account`, `timestamp`, `hdkeypath`, `hdmasterkeyid`.\n+- `signrawtransaction` is deprecated and will be fully removed in v0.18. To use\n+  `signrawtransaction` in v0.17, restart bitcoind with\n+  `-deprecatedrpc=signrawtransaction`. Projects should transition to using\n+  `signrawtransactionwithkey` and `signrawtransactionwithwallet` before\n+  upgrading to v0.18.\n+\n Other API changes\n -----------------\n \n@@ -255,18 +361,748 @@ Miner block size removed\n \n The `-blockmaxsize` option for miners to limit their blocks' sizes was\n deprecated in V0.15.1, and has now been removed. Miners should use the\n-`-blockmaxweight` option if they want to limit the weight of their blocks'\n-weights.\n+`-blockmaxweight` option if they want to limit the weight of their blocks.\n \n Python Support\n --------------\n \n Support for Python 2 has been discontinued for all test files and tools.\n \n+0.17.0 change log\n+=================\n+\n+### Consensus\n+- #12204 `3fa24bb` Fix overly eager BIP30 bypass (morcos)\n+\n+### Policy\n+- #12568 `ed6ae80` Allow dustrelayfee to be set to zero (luke-jr)\n+- #13120 `ca2a233` Treat segwit as always active (MarcoFalke)\n+- #13096 `062738c` Fix `MAX_STANDARD_TX_WEIGHT` check (jl2012)\n+\n+### Mining\n+- #12693 `df529dc` Remove unused variable in SortForBlock (drewx2)\n+- #12448 `84efa9a` Interrupt block generation on shutdown request (promag)\n+\n+### Block and transaction handling\n+- #12225 `67447ba` Mempool cleanups (sdaftuar)\n+- #12356 `fd65937` Fix 'mempool min fee not met' debug output (Empact)\n+- #12287 `bf3353d` Optimise lock behaviour for GuessVerificationProgress() (jonasschnelli)\n+- #11889 `47a7666` Drop extra script variable in ProduceSignature (ryanofsky)\n+- #11880 `d59b8d6` Stop special-casing phashBlock handling in validation for TBV (TheBlueMatt)\n+- #12431 `947c25e` Only call NotifyBlockTip when chainActive changes (jamesob)\n+- #12653 `534b8fa` Allow to optional specify the directory for the blocks storage (jonasschnelli)\n+- #12172 `3b62a91` Bugfix: RPC: savemempool: Don't save until LoadMempool() is finished (jtimon)\n+- #12167 `88430cb` Make segwit failure due to `CLEANSTACK` violation return a `SCRIPT_ERR_CLEANSTACK` error code (maaku)\n+- #12561 `24133b1` Check for block corruption in ConnectBlock() (sdaftuar)\n+- #11617 `1b5723e` Avoid lock: Call FlushStateToDisk(\u2026) regardless of fCheckForPruning (practicalswift)\n+- #11739 `0a8b7b4` Enforce `SCRIPT_VERIFY_P2SH` and `SCRIPT_VERIFY_WITNESS` from genesis (sdaftuar)\n+- #12885 `a49381d` Reduce implementation code inside CScript (sipa)\n+- #13032 `34dd1a6` Output values for \"min relay fee not met\" error (kristapsk)\n+- #13033 `a07e8ca` Build txindex in parallel with validation (jimpo)\n+- #13080 `66cc47b` Add compile time checking for ::mempool.cs runtime locking assertions (practicalswift)\n+- #13185 `08c1caf` Bugfix: the end of a reorged chain is invalid when connect fails (sipa)\n+- #11689 `0264836` Fix missing locking in CTxMemPool::check(\u2026) and CTxMemPool::setSanityCheck(\u2026) (practicalswift)\n+- #13011 `3c2a41a` Cache witness hash in CTransaction (MarcoFalke)\n+- #13191 `0de7cc8` Specialized double-SHA256 with 64 byte inputs with SSE4.1 and AVX2 (sipa)\n+- #13243 `ea263e1` Make reusable base class for auxiliary indices (jimpo)\n+- #13393 `a607d23` Enable double-SHA256-for-64-byte code on 32-bit x86 (sipa)\n+- #13428 `caabdea` validation: check the specified number of blocks (off-by-one) (kallewoof)\n+- #13438 `450055b` Improve coverage of SHA256 SelfTest code (sipa)\n+- #13431 `954f4a9` validation: count blocks correctly for check level < 3 (kallewoof)\n+- #13386 `3a3eabe` SHA256 implementations based on Intel SHA Extensions (sipa)\n+- #11658 `9a1ad2c` During IBD, when doing pruning, prune 10% extra to avoid pruning again soon after (luke-jr)\n+- #13794 `8ce55df` chainparams: Update with data from assumed valid chain (MarcoFalke)\n+- #13527 `e7ea858` Remove promiscuousmempoolflags (MarcoFalke)\n+\n+### P2P protocol and network code\n+- #12342 `eaeaa2d` Extend #11583 (\"Do not make it trivial for inbound peers to generate log entries\") to include \"version handshake timeout\" message (clemtaylor)\n+- #12218 `9a32114` Move misbehaving logging to net logging category (laanwj)\n+- #10387 `5c2aff8` Eventually connect to `NODE_NETWORK_LIMITED` peers (jonasschnelli)\n+- #9037 `a36834f` Add test-before-evict discipline to addrman (EthanHeilman)\n+- #12622 `e1d6e2a` Correct addrman logging (laanwj)\n+- #11962 `0a01843` add seed.bitcoin.sprovoost.nl to DNS seeds (Sjors)\n+- #12569 `23e7fe8` Increase signal-to-noise ratio in debug.log by adjusting log level when logging failed non-manual connect():s (practicalswift)\n+- #12855 `c199869` Minor accumulated cleanups (tjps)\n+- #13153 `ef46c99` Add missing newlines to debug logging (laanwj)\n+- #13162 `a174702` Don't incorrectly log that REJECT messages are unknown (jnewbery)\n+- #13151 `7f4db9a` Serve blocks directly from disk when possible (laanwj)\n+- #13134 `70d3541` Add option `-enablebip61` to configure sending of BIP61 notifications (laanwj)\n+- #13532 `7209fec` Log warning when deprecated network name 'tor' is used (wodry)\n+- #13615 `172f984` Remove unused interrupt from SendMessages (fanquake)\n+- #13417 `1e90862` Tighten scope in `net_processing` (skeees)\n+- #13298 `f8d470e` Bucketing INV delays (1 bucket) for incoming connections to hide tx time (naumenkogs)\n+- #13672 `0d8d6be` Modified `in_addr6` cast in CConman class to work with msvc (sipsorcery)\n+- #11637 `c575260` Remove dead service bits code (MarcoFalke)\n+- #13212 `a6f00ce` Fixed a race condition when disabling the network (lmanners)\n+- #13656 `1211b15` Remove the boost/algorithm/string/predicate.hpp dependency (251Labs)\n+- #13423 `f58674a` Thread safety annotations in `net_processing` (skeees)\n+- #13776 `7d36237` Add missing verification of IPv6 address in CNetAddr::GetIn6Addr(\u2026) (practicalswift)\n+- #13907 `48bf8ff` Introduce a maximum size for locators (gmaxwell)\n+- #13951 `8a9ffec` Hardcoded seeds update pre-0.17 branch (laanwj)\n+\n+### Wallet\n+- #12330 `2a30e67` Reduce scope of `cs_main` and `cs_wallet` locks in listtransactions (promag)\n+- #12298 `a1ffddb` Refactor HaveKeys to early return on false result (promag)\n+- #12282 `663911e` Disallow abandon of conflicted txes (MarcoFalke)\n+- #12333 `d405bee` Make CWallet::ListCoins atomic (promag)\n+- #12296 `8e6f9f4` Only fee-bump non-conflicted/non-confirmed txes (MarcoFalke)\n+- #11866 `6bb9c13` Do not un-mark fInMempool on wallet txn if ATMP fails (TheBlueMatt)\n+- #11882 `987a809` Disable default fallbackfee on mainnet (jonasschnelli)\n+- #9991 `4ca7c1e` listreceivedbyaddress Filter Address (NicolasDorier)\n+- #11687 `98bc27f` External wallet files (ryanofsky)\n+- #12658 `af88094` Sanitize some wallet serialization (sipa)\n+- #9680 `6acd870` Unify CWalletTx construction (ryanofsky)\n+- #10637 `e057589` Coin Selection with Murch's algorithm (achow101, Xekyo)\n+- #12408 `c39dd2e` Change output type globals to members (MarcoFalke)\n+- #12694 `9552dfb` Actually disable BnB when there are preset inputs (achow101)\n+- #11536 `cead84b` Rename account to label where appropriate (ryanofsky)\n+- #12709 `02b7e83` shuffle sendmany recipients ordering (instagibbs)\n+- #12699 `c948dc8` Shuffle transaction inputs before signing (instagibbs)\n+- #10762 `6d53663` Remove Wallet dependencies from init.cpp (jnewbery)\n+- #12857 `821980c` Avoid travis lint-include-guards error (ken2812221)\n+- #12702 `dab0d68` importprivkey: hint about importmulti (kallewoof)\n+- #12836 `9abdb7c` Make WalletInitInterface and DummyWalletInit private, fix nullptr deref (promag)\n+- #12785 `215158a` Initialize `m_last_block_processed` to nullptr (practicalswift)\n+- #12932 `8d651ae` Remove redundant lambda function arg in handleTransactionChanged (laanwj)\n+- #12749 `a84b056` feebumper: discard change outputs below discard rate (instagibbs)\n+- #12892 `9b3370d` introduce 'label' API for wallet (jnewbery)\n+- #12925 `6d3de17` Logprint the start of a rescan (jonasschnelli)\n+- #12888 `39439e5` debug log number of unknown wallet records on load (instagibbs)\n+- #12977 `434150a` Refactor `g_wallet_init_interface` to const reference (promag)\n+- #13017 `65d7083` Add wallets management functions (promag)\n+- #12953 `d1d54ae` Deprecate accounts (jnewbery)\n+- #12909 `476cb35` Make fee settings to be non-static members (MarcoFalke)\n+- #13002 `487dcbe` Do not treat bare multisig outputs as IsMine unless watched (sipa)\n+- #13028 `783bb64` Make vpwallets usage thread safe (promag)\n+- #12507 `2afdc29` Interrupt rescan on shutdown request (promag)\n+- #12729 `979150b` Get rid of ambiguous OutputType::NONE value (ryanofsky)\n+- #13079 `5778d44` Fix rescanblockchain rpc to properly report progress (Empact)\n+- #12560 `e03c0db` Upgrade path for non-HD wallets to HD (achow101)\n+- #13161 `7cc1bd3` Reset BerkeleyDB handle after connection fails (real-or-random)\n+- #13081 `0dec5b5` Add compile time checking for `cs_wallet` runtime locking assertions (practicalswift)\n+- #13127 `19a3a9e` Add Clang thread safety annotations for variables guarded by `cs_db` (practicalswift)\n+- #10740 `4cfe17c` `loadwallet` RPC - load wallet at runtime (jnewbery)\n+- #12924 `6738813` Fix hdmaster-key / seed-key confusion (scripted diff) (jnewbery)\n+- #13297 `d82c5d1` Fix incorrect comment for DeriveNewSeed (jnewbery)\n+- #13063 `6378eef` Use shared pointer to retain wallet instance (promag)\n+- #13142 `56fe3dc` Separate IsMine from solvability (sipa)\n+- #13194 `fd96d54` Remove template matching and pseudo opcodes (sipa)\n+- #13252 `c4cc8d9` Refactor ReserveKeyFromKeyPool for safety (Empact)\n+- #13058 `343d4e4` `createwallet` RPC - create new wallet at runtime (jnewbery)\n+- #13351 `2140f6c` Prevent segfault when sending to unspendable witness (MarcoFalke)\n+- #13060 `3f0f394` Remove getlabeladdress RPC (jnewbery)\n+- #13111 `000abbb` Add unloadwallet RPC (promag)\n+- #13160 `868cf43` Unlock spent outputs (promag)\n+- #13498 `f54f373` Fixups from account API deprecation (jnewbery)\n+- #13491 `61a044a` Improve handling of INVALID in IsMine (sipa)\n+- #13425 `028b0d9` Moving final scriptSig construction from CombineSignatures to ProduceSignature (PSBT signer logic) (achow101)\n+- #13564 `88a15eb` loadwallet shouldn't create new wallets (jnewbery)\n+- #12944 `619cd29` ScanforWalletTransactions should mark input txns as dirty (instagibbs)\n+- #13630 `d6b2235` Drop unused pindexRet arg to CMerkleTx::GetDepthInMainChain (Empact)\n+- #13566 `ad552a5` Fix get balance (jnewbery)\n+- #13500 `4a3e8c5` Decouple wallet version from client version (achow101)\n+- #13712 `aba2e66` Fix non-determinism in ParseHDKeypath(\u2026). Avoid using an uninitialized variable in path calculation (practicalswift)\n+- #9662 `6b6e854` Add createwallet \"disableprivatekeys\" option: a sane mode for watchonly-wallets (jonasschnelli)\n+- #13683 `e8c7434` Introduce assertion to document the assumption that cache and cache_used are always set in tandem (practicalswift)\n+- #12257 `5f7575e` Use destination groups instead of coins in coin select (kallewoof)\n+- #13773 `89a116d` Fix accidental use of the comma operator (practicalswift)\n+- #13805 `c88529a` Correctly limit output group size (sdaftuar)\n+- #12992 `26f59f5` Add wallet name to log messages (PierreRochard)\n+- #13667 `b81a8a5` Fix backupwallet for multiwallets (domob1812)\n+- #13657 `51c693d` assert to ensure accuracy of CMerkleTx::GetBlocksToMaturity (Empact)\n+- #13812 `9d86aad` sum ancestors rather than taking max in output groups (kallewoof)\n+- #13876 `8eb9870` Catch `filesystem_error` and raise `InitError` (MarcoFalke)\n+- #13808 `13d51a2` shuffle coins before grouping, where warranted (kallewoof)\n+- #13666 `2115cba` Always create signatures with Low R values (achow101)\n+- #13917 `0333914` Additional safety checks in PSBT signer (sipa)\n+- #13968 `65e7a8b` couple of walletcreatefundedpsbt fixes (instagibbs)\n+- #14055 `2307a6e` fix walletcreatefundedpsbt deriv paths, add test (instagibbs)\n+\n+### RPC and other APIs\n+- #12336 `3843780` Remove deprecated rpc options (jnewbery)\n+- #12193 `5dc00f6` Consistently use UniValue.pushKV instead of push_back(Pair()) (karel-3d) (MarcoFalke)\n+- #12409 `0cc45ed` Reject deprecated reserveChangeKey in fundrawtransaction (MarcoFalke)\n+- #10583 `8a98dfe` Split part of validateaddress into getaddressinfo (achow101)\n+- #10579 `ffc6e48` Split signrawtransaction into wallet and non-wallet RPC command (achow101)\n+- #12494 `e4ffcac` Declare CMutableTransaction a struct in rawtransaction.h (Empact)\n+- #12503 `0e26591` createmultisig no longer takes addresses (instagibbs)\n+- #12083 `228b086` Improve getchaintxstats test coverage (promag)\n+- #12479 `cd5e438` Add child transactions to getrawmempool verbose output (conscott)\n+- #11872 `702e8b7` createrawtransaction: Accept sorted outputs (MarcoFalke)\n+- #12700 `ebdf84c` Document RPC method aliasing (ryanofsky)\n+- #12727 `8ee5c7b` Remove unreachable help conditions in rpcwallet.cpp (lutangar)\n+- #12778 `b648974` Add username and ip logging for RPC method requests (GabrielDav)\n+- #12717 `ac898b6` rest: Handle utxo retrieval when ignoring the mempool (romanz)\n+- #12787 `cd99e5b` Adjust ifdef to avoid unreachable code (practicalswift)\n+- #11742 `18815b4` Add testmempoolaccept (MarcoFalke)\n+- #12942 `fefb817` Drop redundant testing of signrawtransaction prevtxs args (Empact)\n+- #11200 `5f2a399` Allow for aborting rescans in the GUI (achow101)\n+- #12791 `3a8a4dc` Expose a transaction's weight via RPC (TheBlueMatt)\n+- #12436 `6e67754` Adds a functional test to validate the transaction version number in the RPC output (251Labs)\n+- #12240 `6f8b345` Introduced a new `fees` structure that aggregates all sub-field fee types denominated in BTC (mryandao)\n+- #12321 `eac067a` p2wsh and p2sh-p2wsh address in decodescript (fivepiece)\n+- #13090 `17266a1` Remove Safe mode (achow101, laanwj)\n+- #12639 `7eb7076` Reduce `cs_main` lock in listunspent (promag)\n+- #10267 `7b966d9` New -includeconf argument for including external configuration files (kallewoof)\n+- #10757 `b9551d3` Introduce getblockstats to plot things (jtimon)\n+- #13288 `a589f53` Remove the need to include rpc/blockchain.cpp in order to put `GetDifficulty` under test (Empact)\n+- #13394 `e1f8dce` cli: Ignore libevent warnings (theuni)\n+- #13439 `3f398d7` Avoid \"duplicate\" return value for invalid submitblock (TheBlueMatt)\n+- #13570 `a247594` Add new \"getzmqnotifications\" method (domob1812)\n+- #13072 `b25a4c2` Update createmultisig RPC to support segwit (ajtowns)\n+- #12196 `8fceae0` Add scantxoutset RPC method (jonasschnelli)\n+- #13557 `b654723` BIP 174 PSBT Serializations and RPCs (achow101)\n+- #13697 `f030410` Support output descriptors in scantxoutset (sipa)\n+- #13927 `bced8ea` Use pushKV in some new PSBT RPCs (domob1812)\n+- #13918 `a9c56b6` Replace median fee rate with feerate percentiles in getblockstats (marcinja)\n+- #13721 `9f23c16` Bugfixes for BIP 174 combining and deserialization (achow101)\n+- #13960 `517010e` Fix PSBT deserialization of 0-input transactions (achow101)\n+\n+### GUI\n+- #12416 `c997f88` Fix Windows build errors introduced in #10498 (practicalswift)\n+- #11733 `e782099` Remove redundant locks (practicalswift)\n+- #12426 `bfa3911` Initialize members in WalletModel (MarcoFalke)\n+- #12489 `e117cfe` Bugfix: respect user defined configuration file (-conf) in QT settings (jonasschnelli)\n+- #12421 `be263fa` navigate to  transaction history page after send (Sjors)\n+- #12580 `ce56fdd` Show a transaction's virtual size in its details dialog (dooglus)\n+- #12501 `c8ea91a` Improved \"custom fee\" explanation in tooltip (randolf)\n+- #12616 `cff95a6` Set modal overlay hide button as default (promag)\n+- #12620 `8a43bdc` Remove TransactionTableModel::TxIDRole (promag)\n+- #12080 `56cc022` Add support to search the address book (promag)\n+- #12621 `2bac3e4` Avoid querying unnecessary model data when filtering transactions (promag)\n+- #12721 `e476826` remove \"new\" button during receive-mode in addressbook (jonasschnelli)\n+- #12723 `310dc61` Qt5: Warning users about invalid-BIP21 URI bitcoin:// (krab)\n+- #12610 `25cf18f` Multiwallet for the GUI (jonasschnelli)\n+- #12779 `f4353da` Remove unused method setupAmountWidget(\u2026) (practicalswift)\n+- #12795 `68484d6` do not truncate .dat extension for wallets in gui (instagibbs)\n+- #12870 `1d54004` make clean removes `src/qt/moc_` files (Sjors)\n+- #13055 `bdda14d` Don't log to console by default (laanwj)\n+- #13141 `57c57df` fixes broken link on readme (marcoagner)\n+- #12928 `ef006d9` Initialize non-static class members that were previously neither initialized where defined nor in constructor (practicalswift)\n+- #13158 `81c533c` Improve sendcoinsdialog readability (marcoagner)\n+- #11491 `40c34a0` Add proxy icon in statusbar (mess110)\n+- #13264 `2a7c53b` Satoshi unit (GreatSock)\n+- #13097 `e545503` Support wallets loaded dynamically (promag)\n+- #13284 `f8be434` fix visual \"overflow\" of amount input (brandonrninefive)\n+- #13275 `a315b79` use `[default wallet]` as name for wallet with no name (jonasschnelli)\n+- #13273 `3fd0c23` Qt/Bugfix: fix handling default wallet with no name (jonasschnelli)\n+- #13341 `25d2df2` Stop translating command line options (laanwj)\n+- #13043 `6e249e4` OptionsDialog: add prune setting (Sjors)\n+- #13506 `6579d80` load wallet in UI after possible init aborts (jonasschnelli)\n+- #13458 `dc53f7f` Drop qt4 support (laanwj)\n+- #13528 `b877c39` Move BitcoinGUI initializers to class, fix initializer order warning (laanwj)\n+- #13536 `baf3a3a` coincontrol: Remove unused qt4 workaround (MarcoFalke)\n+- #13537 `10ffca7` Peer table: Visualize inbound/outbound state for every row (wodry)\n+- #13791 `2c14c1f` Reject dialogs if key escape is pressed (promag)\n+\n+### Build system\n+- #12371 `c9ca4f6` Add gitian PGP key: akx20000 (ghost)\n+- #11966 `f4f4f51` clientversion: Use full commit hash for commit-based version descriptions (luke-jr)\n+- #12417 `ae0fbf0` Upgrade `mac_alias` to 2.0.7 (droark)\n+- #12444 `1f055ef` gitian: Bump descriptors for (0.)17 (theuni)\n+- #12402 `59e032b` expat 2.2.5, ccache 3.4.1, miniupnpc 2.0.20180203 (fanquake)\n+- #12029 `daa84b3` Add a makefile target for Doxygen documentation (Ov3rlo4d)\n+- #12466 `6645eaf` Only use `D_DARWIN_C_SOURCE` when building miniupnpc on darwin (fanquake)\n+- #11986 `765a3eb` zeromq 4.2.3 (fanquake)\n+- #12373 `f13d756` Add build support for profiling (murrayn)\n+- #12631 `a312e20` gitian: Alphabetize signing keys & add kallewoof key (kallewoof)\n+- #12607 `29fad97` Remove ccache (fanquake)\n+- #12625 `c4219ff` biplist 1.0.3 (fanquake)\n+- #12666 `05042d3` configure: UniValue 1.0.4 is required for pushKV(, bool) (luke-jr)\n+- #12678 `6324c68` Fix a few compilation issues with Clang 7 and -Werror (vasild)\n+- #12692 `de6bdfd` Add configure options for various -fsanitize flags (eklitzke)\n+- #12901 `7e23972` Show enabled sanitizers in configure output (practicalswift)\n+- #12899 `3076993` macOS: Prevent Xcode 9.3 build warnings (AkioNak)\n+- #12715 `8fd6243` Add 'make clean' rule (hkjn)\n+- #13133 `a024a18` Remove python2 from configure.ac (ken2812221)\n+- #13005 `cb088b1` Make --enable-debug to pick better options (practicalswift)\n+- #13254 `092b366` Remove improper `qt/moc_*` cleaning glob from the general Makefile (Empact)\n+- #13306 `f5a7733` split warnings out of CXXFLAGS (theuni)\n+- #13385 `7c7508c` Guard against accidental introduction of new Boost dependencies (practicalswift)\n+- #13041 `5779dc4` Add linter checking for accidental introduction of locale dependence (practicalswift)\n+- #13408 `70a03c6` crypto: cleanup sha256 build (theuni)\n+- #13435 `cf7ca60` When build fails due to lib missing, indicate which one (Empact)\n+- #13445 `8eb76f3` Reset default -g -O2 flags when enable debug (ken2812221)\n+- #13465 `81069a7` Avoid concurrency issue when make multiple target (ken2812221)\n+- #13454 `45c00f8` Make sure `LC_ALL=C` is set in all shell scripts (practicalswift)\n+- #13480 `31145a3` Avoid copies in range-for loops and add a warning to detect them (theuni)\n+- #13486 `66e1a08` Move rpc/util.cpp from libbitcoin-util to libbitcoin-server (ken2812221)\n+- #13580 `40334c7` Detect if char equals `int8_t` (ken2812221)\n+- #12788 `287e4ed` Tune wildcards for LIBSECP256K1 target (kallewoof)\n+- #13611 `b55f0c3` bugfix: Use `__cpuid_count` for gnu C to avoid gitian build fail (ken2812221)\n+- #12971 `a6d14b1` Upgrade Qt to 5.9.6 (TheCharlatan)\n+- #13543 `6c6a300` Add RISC-V support (laanwj)\n+- #13177 `dcb154e` GCC-7 and glibc-2.27 back compat code (ken2812221)\n+- #13659 `90b1c7e` add missing leveldb defines (theuni)\n+- #13368 `c0f1569` Update gitian-build.sh for docker (achow101)\n+- #13171 `19d8ca5` Change gitian-descriptors to use bionic instead (ken2812221)\n+- #13604 `75bea05` Add depends 32-bit arm support for bitcoin-qt (TheCharlatan)\n+- #13623 `9cdb19f` Migrate gitian-build.sh to python (ken2812221)\n+- #13689 `8c36432` disable Werror when building zmq (greenaddress)\n+- #13617 `cf7f9ae` release: Require macos 10.10+ (fanquake)\n+- #13750 `c883653` use MacOS friendly sed syntax in qt.mk (Sjors)\n+- #13095 `415f2bf` update `ax_boost_chrono`/`unit_test_framework` (fanquake)\n+- #13732 `e8ffec6` Fix Qt's rcc determinism (Fuzzbawls)\n+- #13782 `8284f1d` Fix osslsigncode compile issue in gitian-build (ken2812221)\n+- #13696 `2ab7208` Add aarch64 qt depends support for cross compiling bitcoin-qt (TheCharlatan)\n+- #13705 `b413ba0` Add format string linter (practicalswift)\n+- #14000 `48c8459` fix qt determinism (theuni)\n+- #14018 `3e4829a` Bugfix: NSIS: Exclude `Makefile*` from docs (luke-jr)\n+- #12906 `048ac83` Avoid `interface` keyword to fix windows gitian build (ryanofsky)\n+- #13314 `a9b6957` Fix FreeBSD build by including utilstrencodings.h (laanwj)\n+\n+### Tests and QA\n+- #12252 `8d57319` Require all tests to follow naming convention (ajtowns)\n+- #12295 `935eb8d` Enable flake8 warnings for all currently non-violated rules (practicalswift)\n+- #11858 `b4d8549` Prepare tests for Windows (MarcoFalke)\n+- #11771 `2dbc4a4` Change invalidtxrequest to use BitcoinTestFramework (jnewbery)\n+- #12200 `d09968f` Bind functional test nodes to 127.0.0.1 (Sjors)\n+- #12425 `26dc2da` Add some script tests (richardkiss)\n+- #12455 `23481fa` Fix bip68 sequence test to reflect updated rpc error message (Empact)\n+- #12477 `acd1e61` Plug memory leaks and stack-use-after-scope (MarcoFalke)\n+- #12443 `07090c5` Move common args to bitcoin.conf (MarcoFalke)\n+- #12570 `39dcac2` Add test cases for HexStr (`std::reverse_iterator` and corner cases) (kostaz)\n+- #12582 `6012f1c` Fix ListCoins test failure due to unset `g_wallet_allow_fallback_fee` (ryanofsky)\n+- #12516 `7f99964` Avoid unintentional unsigned integer wraparounds in tests (practicalswift)\n+- #12512 `955fd23` Don't test against the mempool min fee information in mempool_limit.py (Empact)\n+- #12600 `29088b1` Add a test for large tx output scripts with segwit input (richardkiss)\n+- #12627 `791c3ea` Fix some tests to work on native windows (MarcoFalke)\n+- #12405 `0f58d7f` travis: Full clone for git subtree check (MarcoFalke)\n+- #11772 `0630974` Change invalidblockrequest to use BitcoinTestFramework (jnewbery)\n+- #12681 `1846296` Fix ComputeTimeSmart test failure with `-DDEBUG_LOCKORDER` (ryanofsky)\n+- #12682 `9f04c8e` travis: Clone depth 1 unless `$check_doc` (MarcoFalke)\n+- #12710 `00d1680` Append scripts to new `test_list` array to fix bad assignment (jeffrade)\n+- #12720 `872c921` Avoiding 'file' function name from python2 (jeffrade)\n+- #12728 `4ba3d4f` rename TestNode to TestP2PConn in tests (jnewbery)\n+- #12746 `2405ce1` Remove unused argument `max_invalid` from `check_estimates(\u2026)` (practicalswift)\n+- #12718 `185d484` Require exact match in `assert_start_raises_init_eror` (jnewbery, MarcoFalke)\n+- #12076 `6d36f59` Use node.datadir instead of tmpdir in test framework (MarcoFalke)\n+- #12772 `b43aba8` ci: Bump travis timeout for make check to 50m (jnewbery)\n+- #12806 `18606eb` Fix function names in `feature_blocksdir` (MarcoFalke)\n+- #12811 `0d8fc8d` Make summary row bold-red if any test failed and show failed tests at end of table (laanwj)\n+- #12790 `490644d` Use blockmaxweight where tests previously had blockmaxsize (conscott)\n+- #11773 `f0f9732` Change `feature_block.py` to use BitcoinTestFramework (jnewbery)\n+- #12839 `40f4baf` Remove travis checkout depth (laanwj)\n+- #11817 `2a09a78` Change `feature_csv_activation.py` to use BitcoinTestFramework (jnewbery)\n+- #12284 `fa5825d` Remove assigned but never used local variables. Enable Travis checking for unused local variables (practicalswift)\n+- #12719 `9beded5` Add note about test suite naming convention in developer-notes.md (practicalswift)\n+- #12861 `c564424` Stop `feature_block.py` from blowing up memory (jnewbery)\n+- #12851 `648252e` travis: Run verify-commits only on cron jobs (MarcoFalke)\n+- #12853 `2106c4c` Match full plain text by default (MarcoFalke)\n+- #11818 `9a2db3b` I accidentally (deliberately) killed it (the ComparisonTestFramework) (jnewbery)\n+- #12766 `69310a3` Tidy up REST interface functional tests (romanz)\n+- #12849 `83c7533` Add logging in loops in `p2p_sendhears.py` (ccdle12)\n+- #12895 `d6f10b2` Add note about test suite name uniqueness requirement to developer notes (practicalswift)\n+- #12856 `27278df` Add Metaclass for BitcoinTestFramework (WillAyd)\n+- #12918 `6fc5a05` Assert on correct variable (kallewoof)\n+- #11878 `a04440f` Add Travis check for duplicate includes (practicalswift)\n+- #12917 `cf8073f` Windows fixups for functional tests (MarcoFalke)\n+- #12926 `dd1ca9e` Run unit tests in parallel (sipa)\n+- #12920 `b1fdfc1` Fix sign for expected values (kallewoof)\n+- #12947 `979f598` Wallet hd functional test speedup and clarification (instagibbs)\n+- #12993 `0d69921` Remove compatibility code not needed now when we're on Python 3 (practicalswift)\n+- #12996 `6a278e0` Remove redundant bytes(\u2026) calls (practicalswift)\n+- #12949 `6b46288` Avoid copies of CTransaction (MarcoFalke)\n+- #13007 `0d12570` Fix dangling wallet pointer in vpwallets (promag)\n+- #13048 `cac6d11` Fix `feature_block` flakiness (jnewbery)\n+- #12510 `d5b2e98` Add `rpc_bind` test to default-run tests (laanwj)\n+- #13022 `896a9d0` Attach node index to `test_node` AssertionError and print messages (jamesob)\n+- #13024 `018c7e5` Add rpcauth pair that generated by rpcauth.py (ken2812221)\n+- #13013 `a0079d4` bench: Amend `mempool_eviction` test for witness txs (MarcoFalke)\n+- #13051 `e074097` Normalize executable location (MarcoFalke)\n+- #13056 `106d929` Make rpcauth.py testable and add unit tests (nixbox)\n+- #13073 `a785bc3` add rpcauth-test to `AC_CONFIG_LINKS` to fix out-of-tree make check (laanwj)\n+- #12830 `25ad2f7` Clarify address book error messages, add tests (jamesob)\n+- #13082 `24106a8` don't test against min relay fee information in `mining_prioritisetransaction.py` (kristapsk)\n+- #13003 `8d045a0` Add test for orphan handling (MarcoFalke)\n+- #13105 `9e9b48d` Add --failfast option to functional test runner (jamesob)\n+- #13130 `3186ad4` Fix race in `rpc_deprecated.py` (jnewbery)\n+- #13136 `baf6b4e` Fix flake8 warnings in several wallet functional tests (jnewbery)\n+- #13094 `bf9b03d` Add test for 64-bit Windows PE, modify 32-bit test results (ken2812221)\n+- #13183 `9458b05` travis: New travis job for `check_docs` steps (glaksmono)\n+- #12265 `1834d4d` fundrawtransaction: lock watch-only shared address (kallewoof)\n+- #13188 `4a50ec0` Remove unused option --srcdir (MarcoFalke)\n+- #12755 `612ba35` Better stderr testing (jnewbery)\n+- #13198 `196c5a9` Avoid printing to console during cache creation (sdaftuar)\n+- #13075 `cb9bbf7` Remove 'account' API from wallet functional tests (jnewbery)\n+- #13221 `ffa86af` travis: Rename the build stage `check_doc` to `lint` (practicalswift)\n+- #13205 `3cbd25f` Remove spurious error log in `p2p_segwit.py` (jnewbery)\n+- #13291 `536120e` Don't include torcontrol.cpp into the test file (Empact)\n+- #13281 `2ac6315` Move linters to test/lint, add readme (MarcoFalke)\n+- #13215 `f8a29ca` travis: Build tests on ubuntu 18.04 with docker (ken2812221)\n+- #13349 `24f7011` bench: Don't return a bool from main (laanwj)\n+- #13347 `87a9d03` travis: Skip cache for lint stage (MarcoFalke)\n+- #13355 `0b1c0c4` Fix \"gmake check\" under OpenBSD 6.3 (probably `*BSD`): Avoid using GNU grep specific regexp handling (practicalswift)\n+- #13353 `d4f6dac` Fixup setting of PATH env var (MarcoFalke)\n+- #13352 `e24bf1c` Avoid checking reject code for now (MarcoFalke)\n+- #13383 `2722a1f` bench: Use non-throwing parsedouble(\u2026) instead of throwing boost::lexical_cast<double>(\u2026) (practicalswift)\n+- #13367 `264efdc` Increase includeconf test coverage (MarcoFalke)\n+- #13404 `3d3d8ae` speed up of `tx_validationcache_tests` by reusing of CTransaction (lucash-dev)\n+- #13421 `531a033` Remove `portseed_offset` from test runner (MarcoFalke)\n+- #13440 `5315660` Log as utf-8 (MarcoFalke)\n+- #13066 `fa4b906` Migrate verify-commits script to python, run in travis (ken2812221)\n+- #13447 `4b1edd3` travis: Increase `travis_wait` time while verifying commits (ken2812221)\n+- #13350 `f532d52` Add logging to provide anchor points when debugging p2p_sendheaders (lmanners)\n+- #13406 `4382f19` travis: Change mac goal to all deploy (ken2812221)\n+- #13457 `b222138` Drop variadic macro (MarcoFalke)\n+- #13512 `3a45493` mininode: Expose connection state through `is_connected` (MarcoFalke)\n+- #13496 `9ab4c2a` Harden lint-filenames.sh (wodry)\n+- #13219 `08516e0` bench: Add block assemble benchmark (MarcoFalke)\n+- #13530 `b1dc39d` bench: Add missing pow.h header (laanwj)\n+- #12686 `2643fa5` Add -ftrapv to CFLAGS and CXXFLAGS when --enable-debug is used. Enable -ftrapv in Travis (practicalswift)\n+- #12882 `d96bdd7` Make `test_bitcoin` pass under ThreadSanitzer (clang). Fix lock-order-inversion (potential deadlock) (practicalswift)\n+- #13535 `2328039` `wallet_basic`: Specify minimum required amount for listunspent (MarcoFalke)\n+- #13551 `c93c360` Fix incorrect documentation for test case `cuckoocache_hit_rate_ok` (practicalswift)\n+- #13563 `b330f3f` bench: Simplify coinselection (promag)\n+- #13517 `a6ed99a` Remove need to handle the network thread in tests (MarcoFalke)\n+- #13522 `686e97a` Fix `p2p_sendheaders` race (jnewbery)\n+- #13467 `3dc2dcf` Make `p2p_segwit` easier to debug (jnewbery)\n+- #13598 `0212187` bench: Fix incorrect behaviour in prevector.cpp (AkioNak)\n+- #13565 `b05ded1` Fix AreInputsStandard test to reference the proper scriptPubKey (Empact)\n+- #13145 `d3dae3d` Use common getPath method to create temp directory in tests (winder)\n+- #13645 `2ea7eb6` skip `rpc_zmq` functional test as necessary (jamesob)\n+- #13626 `8f1106d` Fix some TODOs in `p2p_segwit` (MarcoFalke)\n+- #13138 `8803c91` Remove accounts from `wallet_importprunedfunds.py` (jnewbery)\n+- #13663 `cbc9b50` Avoid read/write to default datadir (MarcoFalke)\n+- #13682 `f8a32a3` bench: Remove unused variable (practicalswift)\n+- #13638 `6fcdb5e` Use `MAX_SCRIPT_ELEMENT_SIZE` from script.py (domob1812)\n+- #13687 `9d26b69` travis: Check that ~/.bitcoin is never created (MarcoFalke)\n+- #13715 `e1260a7` fixes mininode's P2PConnection sending messages on closing transport (marcoagner)\n+- #13729 `aa9429a` travis: Avoid unnecessarily setting env variables on the lint build (Empact)\n+- #13747 `ab28b5b` Skip P2PConnection's `is_closing()` check when not available (domob1812)\n+- #13650 `7a9bca6` travis: Don't store debug info if --enable-debug is set (ken2812221)\n+- #13711 `f98d1e0` bench: Add benchmark for unserialize prevector (AkioNak)\n+- #13771 `365384f` travis: Retry to fetch docker image (MarcoFalke)\n+- #13806 `4d550ff` Fix `bench/block_assemble` assert failure (jamesob)\n+- #13779 `d25079a` travis: Improve readability of travis.yml and log outputs (scravy)\n+- #13822 `0fb9c87` bench: Make coinselection output groups pass eligibility filter (achow101)\n+- #13247 `e83d82a` Add tests to SingleThreadedSchedulerClient() and document the memory model (skeees)\n+- #13811 `660abc1` travis: Run `bench_bitcoin` once (MarcoFalke)\n+- #13837 `990e182` Extract `rpc_timewait` as test param (MarcoFalke)\n+- #13851 `9c4324d` fix locale for lint-shell (scravy)\n+- #13823 `489b51b` quote path in authproxy for external multiwallets (MarcoFalke)\n+- #13849 `2b67354` travis: Use only travis jobs: instead of mix of jobs+matrix (scravy)\n+- #13859 `2384323` Add emojis to `test_runner` path and wallet filename (MarcoFalke)\n+- #13916 `8ac7125` `wait_for_verack` by default (MarcoFalke)\n+- #13669 `f66e1c7` Cleanup `create_transaction` implementations (conscott)\n+- #13924 `09ada21` Simplify comparison in `rpc_blockchain.py` (domob1812)\n+- #13913 `a08533c` Remove redundant checkmempool/checkblockindex `extra_args` (MarcoFalke)\n+- #13915 `a04888a` Add test for max number of entries in locator (MarcoFalke)\n+- #13867 `1b04b55` Make extended tests pass on native Windows (MarcoFalke)\n+- #13944 `0df7a6c` Port usage of deprecated optparse module to argparse module (Kvaciral)\n+- #13928 `b8eb0df` blocktools enforce named args for amount (MarcoFalke)\n+- #13054 `bffb35f` Enable automatic detection of undefined names in Python tests scripts. Remove wildcard imports (practicalswift)\n+- #14069 `cf3d7f9` Use assert not `BOOST_CHECK_*` from multithreaded tests (skeees)\n+- #14071 `fab0fbe` Stop txindex thread before calling destructor (MarcoFalke)\n+\n+### Miscellaneous\n+- #11909 `8897135` contrib: Replace developer keys with list of pgp fingerprints (MarcoFalke)\n+- #12394 `fe53d5f` gitian-builder.sh: fix --setup doc, since lxc is default (Sjors)\n+- #12468 `294a766` Add missing newline in init.cpp log message (Aesti)\n+- #12308 `dcfe218` contrib: Add support for out-of-tree builds in gen-manpages.sh (laanwj)\n+- #12451 `aae64a2` Bump leveldb subtree (MarcoFalke)\n+- #12527 `d77b4a7` gitian-build.sh: fix signProg being recognized as two parameters (ken2812221)\n+- #12588 `d74b01d` utils: Remove deprecated pyzmq call from python zmq example (kosciej)\n+- #10271 `bc67982` Use `std::thread::hardware_concurrency`, instead of Boost, to determine available cores (fanquake)\n+- #12097 `14475e2` scripts: Lint-whitespace: use perl instead of grep -p (Sjors)\n+- #12098 `17c44b2` scripts: Lint-whitespace: add param to check last n commits (Sjors)\n+- #11900 `842f61a` script: Simplify checkminimalpush checks, add safety assert (instagibbs)\n+- #12567 `bb98aec` util: Print timestamp strings in logs using iso 8601 formatting (practicalswift)\n+- #12572 `d8d9162` script: Lint-whitespace: find errors more easily (AkioNak)\n+- #10694 `ae5bcc7` Remove redundant code in MutateTxSign(CMutableTransaction&, const std::string&) (practicalswift)\n+- #12659 `3d16f58` Improve Fatal LevelDB Log Messages (eklitzke)\n+- #12643 `0f0229d` util: Remove unused `sync_chain` (MarcoFalke)\n+- #12102 `7fb8fb4` Apply hardening measures in bitcoind systemd service file (Flowdalic)\n+- #12652 `55f490a` bitcoin-cli: Provide a better error message when bitcoind is not running (practicalswift)\n+- #12630 `c290508` Provide useful error message if datadir is not writable (murrayn)\n+- #11881 `624bee9` Remove Python2 support (jnewbery)\n+- #12821 `082e26c` contrib: Remove unused import string (MarcoFalke)\n+- #12829 `252c1b0` Python3 fixup (jnewbery)\n+- #12822 `ff48f62` Revert 7deba93bdc76616011a9f493cbc203d60084416f and fix expired-key-sigs properly (TheBlueMatt)\n+- #12820 `5e53b80` contrib: Fix check-doc script regexes (MarcoFalke)\n+- #12713 `4490871` Track negated options in the option parser (eklitzke)\n+- #12708 `b2e5fe8` Make verify-commits.sh test that merges are clean (sipa)\n+- #12891 `3190785` logging: Add lint-logs.sh to check for newline termination (jnewbery)\n+- #12923 `a7cbe38` util: Pass `pthread_self()` to `pthread_setschedparam` instead of 0 (laanwj)\n+- #12871 `fb17fae` Add shell script linting: Check for shellcheck warnings in shell scripts (practicalswift)\n+- #12970 `5df84de` logging: Bypass timestamp formatting when not logging (theuni)\n+- #12987 `fe8fa22` tests/tools: Enable additional Python flake8 rules for automatic linting via Travis (practicalswift)\n+- #12972 `0782508` Add python3 script shebang lint (ken2812221)\n+- #13004 `58bbc55` Print to console by default when not run with -daemon (practicalswift)\n+- #13039 `8b4081a` Add logging and error handling for file syncing (laanwj)\n+- #13020 `4741ca5` Consistently log CValidationState on call failure (Empact)\n+- #13031 `826acc9` Fix for utiltime to compile with msvc (sipsorcery)\n+- #13119 `81743b5` Remove script to clean up datadirs (MarcoFalke)\n+- #12954 `5a66642` util: Refactor logging code into a global object (jimpo)\n+- #12769 `35eb9d6` Add systemd service to bitcoind in debian package (ghost)\n+- #13146 `0bc980b` rpcauth: Make it possible to provide a custom password (laanwj)\n+- #13148 `b62b437` logging: Fix potential use-after-free in logprintstr(\u2026) (practicalswift)\n+- #13214 `0612d96` Enable Travis checking for two Python linting rules we are currently not violating (practicalswift)\n+- #13197 `6826989` util: Warn about ignored recursive -includeconf calls (kallewoof)\n+- #13176 `d9ebb63` Improve CRollingBloomFilter performance: replace modulus with FastMod (martinus)\n+- #13228 `d792e47` Add script to detect circular dependencies between source modules (sipa)\n+- #13320 `e08c130` Ensure gitian-build.sh uses bash (jhfrontz)\n+- #13301 `e4082d5` lint: Add linter to error on `#include <*.cpp>` (Empact)\n+- #13374 `56f6936` utils and libraries: checking for bitcoin address in translations (kaplanmaxe)\n+- #13230 `7c32b41` Simplify include analysis by enforcing the developer guide's include syntax (practicalswift)\n+- #13450 `32bf4c6` Add linter: Enforce the source code file naming convention described in the developer notes (practicalswift)\n+- #13479 `fa2ea37` contrib: Fix cve-2018-12356 by hardening the regex (loganaden)\n+- #13448 `a90ca40` Add linter: Make sure we explicitly open all text files using UTF-8 encoding in Python (practicalswift)\n+- #13494 `d67eff8` Follow-up to #13454: Fix broken build by exporting `LC_ALL=C` (practicalswift)\n+- #13510 `03f3925` Scripts and tools: Obsolete #!/bin/bash shebang (DesWurstes)\n+- #13577 `c9eb8d1` logging: Avoid nstart may be used uninitialized in appinitmain warning (mruddy)\n+- #13603 `453ae5e` bitcoin-tx: Stricter check for valid integers (domob1812)\n+- #13118 `c05c93c` RPCAuth Detection in Logs (Linrono)\n+- #13647 `4027ec1` Scripts and tools: Fix `BIND_NOW` check in security-check.py (conradoplg)\n+- #13692 `f5d166a` contrib: Clone core repo in gitian-build (MarcoFalke)\n+- #13699 `4c6d1b9` contrib: Correct version check (kallewoof)\n+- #13695 `dcc0cff` lint: Add linter for circular dependencies (Empact)\n+- #13733 `0d1ebf4` utils: Refactor argsmanager a little (AtsukiTak)\n+- #13714 `29b4ee6` contrib: Add lxc network setup for bionic host (ken2812221)\n+- #13764 `f8685f4` contrib: Fix test-security-check fail in ubuntu 18.04 (ken2812221)\n+- #13809 `77168f7` contrib: Remove debian and rpm subfolder (MarcoFalke)\n+- #13799 `230652c` Ignore unknown config file options; warn instead of error (sipa)\n+- #13894 `df9f712` shutdown: Stop threads before resetting ptrs (MarcoFalke)\n+- #13925 `71dec5c` Merge leveldb subtree (MarcoFalke)\n+- #13939 `ef86f26` lint: Make format string linter understand basic template parameter syntax (practicalswift)\n+- #14105 `eb202ea` util: Report parse errors in configuration file (laanwj)\n+- #12604 `9903537` Add DynamicMemoryUsage() to CDBWrapper to estimate LevelDB memory use (eklitzke)\n+- #12495 `047865e` Increase LevelDB `max_open_files` (eklitzke)\n+- #12784 `e80716d` Fix bug in memory usage calculation (unintended integer division) (practicalswift)\n+- #12618 `becd8dd` Set `SCHED_BATCH` priority on the loadblk thread (eklitzke)\n+- #12854 `5ca1509` Add P2P, Network, and Qt categories to the desktop icon (luke-jr)\n+- #11862 `4366f61` Network specific conf sections (ajtowns)\n+- #13441 `4a7e64f` Prevent shared conf files from failing with different available options in different binaries (achow101)\n+- #13471 `5eca4e8` For AVX2 code, also check for AVX, XSAVE, and OS support (sipa)\n+- #13503 `c655b2c` Document FreeBSD quirk. Fix FreeBSD build: Use std::min<int>(\u2026) to allow for compilation under certain FreeBSD versions (practicalswift)\n+- #13725 `07ce278` Fix bitcoin-cli --version (Empact)\n+\n+### Documentation\n+- #12306 `216f9a4` Improvements to UNIX documentation (axvr)\n+- #12309 `895fbd7` Explain how to update chainTxData in release process (laanwj)\n+- #12317 `85123be` Document method for reviewers to verify chainTxData (jnewbery)\n+- #12331 `d32528e` Properly alphabetize output of CLI --help option (murrayn)\n+- #12322 `c345148` Remove step making cloned repository world-writable for Windows build (murrayn)\n+- #12354 `b264528` add gpg key for fivepiece (fivepiece)\n+- #11761 `89005dd` initial QT documentation (Sjors)\n+- #12232 `fdc2188` Improve \"Turn Windows Features On or Off\" step (MCFX2)\n+- #12487 `4528f74` init: Remove translation for `-blockmaxsize` option help (laanwj)\n+- #12546 `a4a5fc7` Minor improvements to Compatibility Notes (randolf)\n+- #12434 `21e2670` dev-notes: Members should be initialized (MarcoFalke)\n+- #12452 `71f56da` clarified systemd installation instructions in init.md for Ubuntu users (DaveFromBinary)\n+- #12615 `1f93491` allow for SIGNER containing spaces (ken2812221)\n+- #12603 `85424d7` PeerLogicValidation interface (jamesob)\n+- #12581 `12ac2f0` Mention configure without wallet in FreeBSD instructions (dbolser)\n+- #12619 `8a709fb` Give hint about gitian not able to download (kallewoof)\n+- #12668 `de2fcaa` do update before fetching packages in WSL build guide (nvercamm)\n+- #12586 `e7721e6` Update osx brew install instruction (fanquake)\n+- #12760 `7466a26` Improve documentation on standard communication channels (jimpo)\n+- #12797 `0415b1e` init: Fix help message for checkblockindex (MarcoFalke)\n+- #12800 `2d97611` Add note about our preference for scoped enumerations (\"enum class\") (practicalswift)\n+- #12798 `174d016` Refer to witness reserved value as spec. in the BIP (MarcoFalke)\n+- #12759 `d3908e2` Improve formatting of developer notes (eklitzke)\n+- #12877 `2b54155` Use bitcoind in Tor documentation (knoxcard)\n+- #12896 `b15485e` Fix conflicting statements about initialization in developer notes (practicalswift)\n+- #12850 `319991d` add qrencode to brew install instructions (buddilla)\n+- #12007 `cd8e45b` Clarify the meaning of fee delta not being a fee rate in prioritisetransaction RPC (honzik666)\n+- #12927 `06ead15` fixed link, replaced QT with Qt (trulex)\n+- #12852 `ebd786b` devtools: Setup ots git integration (MarcoFalke)\n+- #12933 `3cf76c2` Refine header include policy (MarcoFalke)\n+- #12951 `6df0c6c` Fix comment in FindForkInGlobalIndex (jamesob)\n+- #12982 `a63b4e3` Fix inconsistent namespace formatting guidelines (ryanofsky)\n+- #13026 `9b3a67e` Fix include comment in src/interfaces/wallet.h (promag)\n+- #13012 `d1e3c5e` Add comments for chainparams.h, validation.cpp (jamesob)\n+- #13064 `569e381` List support for BIP173 in bips.md (sipa)\n+- #12997 `646b7f6` build-windows: Switch to Artful, since Zesty is EOL (MarcoFalke)\n+- #12384 `c5f7efe` Add version footnote to tor.md (Willtech)\n+- #13165 `627c376` Mention good first issue list in CONTRIBUTING.md (fanquake)\n+- #13295 `fb77310` Update OpenBSD build instructions for OpenBSD 6.3 (practicalswift)\n+- #13340 `3a8e3f4` remove leftover check-doc documentation (fanquake)\n+- #13346 `60f0358` update bitcoin-dot-org links in release-process.md (fanquake)\n+- #13372 `f014933` split FreeBSD build instructions out of build-unix.md (steverusso)\n+- #13366 `861de3b` Rename \u201cOS X\u201d to the newer \u201cmacOS\u201d convention (giulio92)\n+- #13369 `f8bcef3` update transifex doc link (mess110)\n+- #13312 `b22115d` Add a note about the source code filename naming convention (practicalswift)\n+- #13460 `1939536` Remove note to install all boost dev packages (MarcoFalke)\n+- #13476 `9501938` Fix incorrect shell quoting in FreeBSD build instructions (murrayn)\n+- #13402 `43fa355` Document validationinterace callback blocking deadlock potential (TheBlueMatt)\n+- #13488 `d6cf4bd` Improve readability of \"Squashing commits\" (wodry)\n+- #13531 `ee02deb` Clarify that mempool txiter is `const_iterator` (MarcoFalke)\n+- #13418 `01f9098` More precise explanation of parameter onlynet (wodry)\n+- #13592 `1756cb4` Modify policy to not translate command-line help (ken2812221)\n+- #13588 `b77c38e` Improve doc of options addnode, connect, seednode (wodry)\n+- #13614 `17e9106` Update command line help for -printtoconsole and -debuglogfile (satwo, fanquake)\n+- #13605 `8cc048e` corrected text to reflect new(er) process of specifying fingerprints (jhfrontz)\n+- #13481 `b641f60` Rewrite some validation docs as lock annotations (MarcoFalke)\n+- #13680 `30640f8` Remove outdated comment about miner ignoring CPFP (jamesob)\n+- #13625 `7146672` Add release notes for -printtoconsole and -debuglogfile changes (satwo)\n+- #13718 `f7f574d` Specify preferred Python string formatting technique (masonicboom)\n+- #12764 `10b9a81` Remove field in getblocktemplate help that has never been used (conscott)\n+- #13742 `d2186b3` Adjust bitcoincore.org links (MarcoFalke)\n+- #13706 `94dd89e` Minor improvements to release-process.md (MitchellCash)\n+- #13775 `ef4fac0` Remove newlines from error message (practicalswift)\n+- #13803 `feb7dd9` add note to contributor docs about warranted PR's (kallewoof)\n+- #13814 `67af7ef` Add BIP174 to list of implemented BIPs (sipa)\n+- #13835 `c1cba35` Fix memory consistency model in comment (skeees)\n+- #13824 `aa30e4b` Remove outdated net comment (MarcoFalke)\n+- #13853 `317477a` correct versions in dependencies.md (fanquake)\n+- #13872 `37ab117` Reformat -help output for help2man (real-or-random)\n+- #13717 `8c3c402` Link to python style guidelines from developer notes (masonicboom)\n+- #13895 `1cd5f2c` fix GetWarnings docs to reflect behavior (Empact)\n+- #13911 `3e3a50a` Revert translated string change, clarify wallet log messages (PierreRochard)\n+- #13908 `d6faea4` upgrade rescan time warning from minutes to >1 hour (masonicboom)\n+- #13905 `73a09b4` fixed bitcoin-cli -help output for help2man (hebasto)\n+- #14100 `2936dbc` Change documentation for =0 for non-boolean options (laanwj)\n+- #14096 `465a583` Add reference documentation for descriptors language (sipa)\n+- #12757 `0c5f67b` Clarify include guard naming convention (practicalswift)\n+- #13844 `d3325b0` Correct the help output for `-prune` (hebasto)\n+\n Credits\n =======\n \n Thanks to everyone who directly contributed to this release:\n \n-\n-As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/).\n+- 251\n+- 532479301\n+- Aaron Clauson\n+- Akio Nakamura\n+- Akira Takizawa\n+- Alex Morcos\n+- Alex Vear\n+- Alexey Ivanov\n+- Alin Rus\n+- Andrea Comand\n+- Andrew Chow\n+- Anthony Towns\n+- AtsukiTak\n+- Ben Woosley\n+- Bernhard M. Wiedemann\n+- Brandon Ruggles\n+- buddilla\n+- ccdle12\n+- Chris Moore\n+- Chun Kuan Lee\n+- Clem Taylor\n+- Conor Scott\n+- Conrado Gouvea\n+- Cory Fields\n+- Cristian Mircea Messel\n+- ctp-tsteenholdt\n+- Damian Williamson\n+- Dan Bolser\n+- Daniel Kraft\n+- Darko Jankovi\u0107\n+- DaveFromBinary\n+- David A. Harding\n+- DesWurstes\n+- Dimitris Apostolou\n+- donaloconnor\n+- Douglas Roark\n+- DrahtBot\n+- Drew Rasmussen\n+- e0\n+- Ernest Hemingway\n+- Ethan Heilman\n+- Evan Klitzke\n+- fanquake\n+- Felix Wolfsteller\n+- fivepiece\n+- Florian Schmaus\n+- Fuzzbawls\n+- Gabriel Davidian\n+- Giulio Lombardo\n+- Gleb\n+- Grady Laksmono\n+- GreatSock\n+- Gregory Maxwell\n+- Gregory Sanders\n+- Hennadii Stepanov\n+- Henrik Jonsson\n+- Indospace.io\n+- James O'Beirne\n+- Jan \u010capek\n+- Jeff Frontz\n+- Jeff Rade\n+- Jeremy Rubin\n+- JeremyRand\n+- Jesse Cohen\n+- Jim Posen\n+- joemphilips\n+- John Bampton\n+- John Newbery\n+- johnlow95\n+- Johnson Lau\n+- Jonas Nick\n+- Jonas Schnelli\n+- Jo\u00e3o Barbosa\n+- Jorge Tim\u00f3n\n+- Josh Hartshorn\n+- Julian Fleischer\n+- kallewoof\n+- Karel Bilek\n+- Karl-Johan Alm\n+- Ken Lee\n+- Kevin Pan\n+- Kosta Zertsekel\n+- Kristaps Kaupe\n+- Kvaciral\n+- Lawrence Nahum\n+- Linrono\n+- lmanners\n+- Loganaden Velvindron\n+- Lowell Manners\n+- lucash.dev@gmail.com\n+- Luke Dashjr\n+- lutangar\n+- Marcin Jachymiak\n+- marcoagner\n+- MarcoFalke\n+- Mark Erhardt\n+- Mark Friedenbach\n+- Martin Ankerl\n+- Mason Simon\n+- Matt Corallo\n+- Matteo Sumberaz\n+- Max Kaplan\n+- MeshCollider\n+- Micha\u0142 Zabielski\n+- Mitchell Cash\n+- mruddy\n+- mryandao\n+- murrayn\n+- Nick Vercammen\n+- Nicolas Dorier\n+- Nikolay Mitev\n+- okayplanet\n+- Pierre Rochard\n+- Pieter Wuille\n+- practicalswift\n+- Qasim Javed\n+- Randolf Richardson\n+- Richard Kiss\n+- Roman Zeyde\n+- Russell Yanofsky\n+- Samuel B. Atwood\n+- Sebastian Kung\n+- Sjors Provoost\n+- Steve Lee\n+- steverusso\n+- Suhas Daftuar\n+- Tamas Blummer\n+- TheCharlatan\n+- Thomas Kerin\n+- Thomas Snider\n+- Tim Ruffing\n+- Varunram\n+- Vasil Dimov\n+- Will Ayd\n+- William Robinson\n+- winder\n+- Wladimir J. van der Laan\n+- wodry\n+\n+And to those that reported security issues:\n+\n+- awemany (for CVE-2018-17144, previously credited as \"anonymous reporter\")\n+\n+As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/).\n\\ No newline at end of file"
      }
    ]
  },
  {
    "sha": "5b47b8efd48d233a5f7c12d1d7713dcd2f616255",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YjQ3YjhlZmQ0OGQyMzNhNWY3YzEyZDFkNzcxM2RjZDJmNjE2MjU1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-10-03T11:02:26Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-10-03T11:02:51Z"
      },
      "message": "doc: Clean out release notes after release 0.17.0\n\nTree-SHA512: 0b641fdf4cf4ac6a6f9f5c1b45d65c4449b0d7bb777ba57498e389840ba7a37bfc0569ce5e70f0ac998785fc4eea600ecf6f7c7d83d86513997f4033bcc14a5d",
      "tree": {
        "sha": "420a5548fdbc6dcea529341f03fd04e1e0e1529d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/420a5548fdbc6dcea529341f03fd04e1e0e1529d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5b47b8efd48d233a5f7c12d1d7713dcd2f616255",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlu0odsACgkQHkrtYphs\n0l2Gwgf+OUiRTqAskg4tUeA0cuhF+A8Ja6TjmVwKg2MY+c01FafI1oOYy5bGIm1C\nnfh6fY/ku8oFS8N2zwBku4gYebJs0m4KoWh5M250RWITFJPuF34x4eJqFMnaUF1Y\nTezTjZ9w774Wovy87CYGl8Q9X0XbGANwyv9vSuaRMp36Wc7SHM3XoXIvmKIzBxXJ\nMKpwWuRgJPraoxyBfQnqkd/I3Z8T/KEznrhbONS/wKONmApEsb21a/QcYUOY73gA\nLxzmhgM7PPNTAj7PqESun14QkBmcUIq9rsblsZ8XEVaDWCslDbeJUiEd4f1vXd22\nDX51Vzu8VSn0p6/SjVJ5zM08+P3KtA==\n=Queq\n-----END PGP SIGNATURE-----",
        "payload": "tree 420a5548fdbc6dcea529341f03fd04e1e0e1529d\nparent e1ed37edaedc85b8c3468bd9a726046344036243\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1538564546 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1538564571 +0200\n\ndoc: Clean out release notes after release 0.17.0\n\nTree-SHA512: 0b641fdf4cf4ac6a6f9f5c1b45d65c4449b0d7bb777ba57498e389840ba7a37bfc0569ce5e70f0ac998785fc4eea600ecf6f7c7d83d86513997f4033bcc14a5d\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b47b8efd48d233a5f7c12d1d7713dcd2f616255",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5b47b8efd48d233a5f7c12d1d7713dcd2f616255",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b47b8efd48d233a5f7c12d1d7713dcd2f616255/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e1ed37edaedc85b8c3468bd9a726046344036243",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1ed37edaedc85b8c3468bd9a726046344036243",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e1ed37edaedc85b8c3468bd9a726046344036243"
      }
    ],
    "stats": {
      "total": 1039,
      "additions": 9,
      "deletions": 1030
    },
    "files": [
      {
        "sha": "7f4ece80ade5eb548364150df72c810ee959e251",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 9,
        "deletions": 1030,
        "changes": 1039,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b47b8efd48d233a5f7c12d1d7713dcd2f616255/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b47b8efd48d233a5f7c12d1d7713dcd2f616255/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=5b47b8efd48d233a5f7c12d1d7713dcd2f616255",
        "patch": "@@ -1,9 +1,9 @@\n (note: this is a temporary file, to be added-to by anybody, and moved to\n release-notes at release time)\n \n-Bitcoin Core version 0.17.0 is now available from:\n+Bitcoin Core version 0.17.x is now available from:\n \n-  <https://bitcoincore.org/bin/bitcoin-core-0.17.0/>\n+  <https://bitcoincore.org/bin/bitcoin-core-0.17.x/>\n \n This is a new major version release, including new features, various bugfixes\n and performance improvements, as well as updated translations.\n@@ -61,1048 +61,27 @@ support versions of macOS older than 10.10.\n Known issues\n ============\n \n-- Upgrading from 0.13.0 or older currently results in memory blow-up during the roll-back of blocks to the SegWit activation point. In these cases, a full `-reindex` is necessary.\n-\n-- The GUI suffers from visual glitches in the new MacOS dark mode. This has to do with our Qt theme handling and is not a new problem in 0.17.0, but is expected to be resolved in 0.17.1.\n+...\n \n Notable changes\n ===============\n \n-Changed configuration options\n------------------------------\n-\n-- `-includeconf=<file>` can be used to include additional configuration files.\n-  Only works inside the `bitcoin.conf` file, not inside included files or from\n-  command-line. Multiple files may be included. Can be disabled from command-\n-  line via `-noincludeconf`. Note that multi-argument commands like\n-  `-includeconf` will override preceding `-noincludeconf`, i.e.\n-  ```\n-  noincludeconf=1\n-  includeconf=relative.conf\n-  ```\n-\n-  as bitcoin.conf will still include `relative.conf`.\n-\n-GUI changes\n------------\n-\n-- Block storage can be limited under Preferences, in the Main tab. Undoing this setting requires downloading the full blockchain again. This mode is incompatible with -txindex and -rescan.\n-\n-External wallet files\n----------------------\n-\n-The `-wallet=<path>` option now accepts full paths instead of requiring wallets\n-to be located in the -walletdir directory.\n-\n-Newly created wallet format\n----------------------------\n-\n-If `-wallet=<path>` is specified with a path that does not exist, it will now\n-create a wallet directory at the specified location (containing a wallet.dat\n-data file, a db.log file, and database/log.?????????? files) instead of just\n-creating a data file at the path and storing log files in the parent\n-directory. This should make backing up wallets more straightforward than\n-before because the specified wallet path can just be directly archived without\n-having to look in the parent directory for transaction log files.\n-\n-For backwards compatibility, wallet paths that are names of existing data files\n-in the `-walletdir` directory will continue to be accepted and interpreted the\n-same as before.\n-\n-Dynamic loading and creation of wallets\n----------------------------------------\n-\n-Previously, wallets could only be loaded or created at startup, by specifying `-wallet` parameters on the command line or in the bitcoin.conf file. It is now possible to load, create and unload wallets dynamically at runtime:\n-\n-- Existing wallets can be loaded by calling the `loadwallet` RPC. The wallet can be specified as file/directory basename (which must be located in the `walletdir` directory), or as an absolute path to a file/directory.\n-- New wallets can be created (and loaded) by calling the `createwallet` RPC. The provided name must not match a wallet file in the `walletdir` directory or the name of a wallet that is currently loaded.\n-- Loaded wallets can be unloaded by calling the `unloadwallet` RPC.\n-\n-This feature is currently only available through the RPC interface.\n-\n-Coin selection\n---------------\n-\n-### Partial spend avoidance\n-\n-When an address is paid multiple times the coins from those separate payments can be spent separately which hurts privacy due to linking otherwise separate addresses. A new `-avoidpartialspends` flag has been added (default=false). If enabled, the wallet will always spend existing UTXO to the same address together even if it results in higher fees. If someone were to send coins to an address after it was used, those coins will still be included in future coin selections.\n-\n-Configuration sections for testnet and regtest\n-----------------------------------------------\n-\n-It is now possible for a single configuration file to set different\n-options for different networks. This is done by using sections or by\n-prefixing the option with the network, such as:\n-\n-    main.uacomment=bitcoin\n-    test.uacomment=bitcoin-testnet\n-    regtest.uacomment=regtest\n-    [main]\n-    mempoolsize=300\n-    [test]\n-    mempoolsize=100\n-    [regtest]\n-    mempoolsize=20\n-\n-If the following options are not in a section, they will only apply to mainnet:\n-`addnode=`, `connect=`, `port=`, `bind=`, `rpcport=`, `rpcbind=` and `wallet=`.\n-The options to choose a network (`regtest=` and `testnet=`) must be specified\n-outside of sections.\n-\n-'label' and 'account' APIs for wallet\n--------------------------------------\n-\n-A new 'label' API has been introduced for the wallet. This is intended as a\n-replacement for the deprecated 'account' API. The 'account' can continue to\n-be used in V0.17 by starting bitcoind with the '-deprecatedrpc=accounts'\n-argument, and will be fully removed in V0.18.\n-\n-The label RPC methods mirror the account functionality, with the following functional differences:\n-\n-- Labels can be set on any address, not just receiving addresses. This functionality was previously only available through the GUI.\n-- Labels can be deleted by reassigning all addresses using the `setlabel` RPC method.\n-- There isn't support for sending transactions _from_ a label, or for determining which label a transaction was sent from.\n-- Labels do not have a balance.\n-\n-Here are the changes to RPC methods:\n-\n-| Deprecated Method       | New Method            | Notes       |\n-| :---------------------- | :-------------------- | :-----------|\n-| `getaccount`            | `getaddressinfo`      | `getaddressinfo` returns a json object with address information instead of just the name of the account as a string. |\n-| `getaccountaddress`     | n/a                   | There is no replacement for `getaccountaddress` since labels do not have an associated receive address. |\n-| `getaddressesbyaccount` | `getaddressesbylabel` | `getaddressesbylabel` returns a json object with the addresses as keys, instead of a list of strings. |\n-| `getreceivedbyaccount`  | `getreceivedbylabel`  | _no change in behavior_ |\n-| `listaccounts`          | `listlabels`          | `listlabels` does not return a balance or accept `minconf` and `watchonly` arguments. |\n-| `listreceivedbyaccount` | `listreceivedbylabel` | Both methods return new `label` fields, along with `account` fields for backward compatibility. |\n-| `move`                  | n/a                   | _no replacement_ |\n-| `sendfrom`              | n/a                   | _no replacement_ |\n-| `setaccount`            | `setlabel`            | Both methods now: <ul><li>allow assigning labels to any address, instead of raising an error if the address is not receiving address.<li>delete the previous label associated with an address when the final address using that label is reassigned to a different label, instead of making an implicit `getaccountaddress` call to ensure the previous label still has a receiving address. |\n-\n-| Changed Method         | Notes   |\n-| :--------------------- | :------ |\n-| `addmultisigaddress`   | Renamed `account` named parameter to `label`. Still accepts `account` for backward compatibility if running with '-deprecatedrpc=accounts'. |\n-| `getnewaddress`        | Renamed `account` named parameter to `label`. Still accepts `account` for backward compatibility. if running with '-deprecatedrpc=accounts' |\n-| `listunspent`          | Returns new `label` fields. `account` field will be returned for backward compatibility if running with '-deprecatedrpc=accounts' |\n-| `sendmany`             | The `account` named parameter has been renamed to `dummy`. If provided, the `dummy` parameter must be set to the empty string, unless running with the `-deprecatedrpc=accounts` argument (in which case functionality is unchanged). |\n-| `listtransactions`     | The `account` named parameter has been renamed to `dummy`. If provided, the `dummy` parameter must be set to the string `*`, unless running with the `-deprecatedrpc=accounts` argument (in which case functionality is unchanged). |\n-| `getbalance`           | `account`, `minconf` and `include_watchonly` parameters are deprecated, and can only be used if running with '-deprecatedrpc=accounts' |\n-\n-BIP 174 Partially Signed Bitcoin Transactions support\n------------------------------------------------------\n-\n-[BIP 174 PSBT](https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki) is an interchange format for Bitcoin transactions that are not fully signed\n-yet, together with relevant metadata to help entities work towards signing it.\n-It is intended to simplify workflows where multiple parties need to cooperate to\n-produce a transaction. Examples include hardware wallets, multisig setups, and\n-[CoinJoin](https://bitcointalk.org/?topic=279249) transactions.\n-\n-### Overall workflow\n-\n-Overall, the construction of a fully signed Bitcoin transaction goes through the\n-following steps:\n-\n-- A **Creator** proposes a particular transaction to be created. He constructs\n-  a PSBT that contains certain inputs and outputs, but no additional metadata.\n-- For each input, an **Updater** adds information about the UTXOs being spent by\n-  the transaction to the PSBT.\n-- A potentially other Updater adds information about the scripts and public keys\n-  involved in each of the inputs (and possibly outputs) of the PSBT.\n-- **Signers** inspect the transaction and its metadata to decide whether they\n-  agree with the transaction. They can use amount information from the UTXOs\n-  to assess the values and fees involved. If they agree, they produce a\n-  partial signature for the inputs for which they have relevant key(s).\n-- A **Finalizer** is run for each input to convert the partial signatures and\n-  possibly script information into a final `scriptSig` and/or `scriptWitness`.\n-- An **Extractor** produces a valid Bitcoin transaction (in network format)\n-  from a PSBT for which all inputs are finalized.\n-\n-Generally, each of the above (excluding Creator and Extractor) will simply\n-add more and more data to a particular PSBT. In a naive workflow, they all have\n-to operate sequentially, passing the PSBT from one to the next, until the\n-Extractor can convert it to a real transaction. In order to permit parallel\n-operation, **Combiners** can be employed which merge metadata from different\n-PSBTs for the same unsigned transaction.\n-\n-The names above in bold are the names of the roles defined in BIP174. They're\n-useful in understanding the underlying steps, but in practice, software and\n-hardware implementations will typically implement multiple roles simultaneously.\n+...\n \n-### RPCs\n-\n-- **`converttopsbt` (Creator)** is a utility RPC that converts an\n-  unsigned raw transaction to PSBT format. It ignores existing signatures.\n-- **`createpsbt` (Creator)** is a utility RPC that takes a list of inputs and\n-  outputs and converts them to a PSBT with no additional information. It is\n-  equivalent to calling `createrawtransaction` followed by `converttopsbt`.\n-- **`walletcreatefundedpsbt` (Creator, Updater)** is a wallet RPC that creates a\n-  PSBT with the specified inputs and outputs, adds additional inputs and change\n-  to it to balance it out, and adds relevant metadata. In particular, for inputs\n-  that the wallet knows about (counting towards its normal or watch-only\n-  balance), UTXO information will be added. For outputs and inputs with UTXO\n-  information present, key and script information will be added which the wallet\n-  knows about. It is equivalent to running `createrawtransaction`, followed by\n-  `fundrawtransaction`, and `converttopsbt`.\n-- **`walletprocesspsbt` (Updater, Signer, Finalizer)** is a wallet RPC that takes as\n-  input a PSBT, adds UTXO, key, and script data to inputs and outputs that miss\n-  it, and optionally signs inputs. Where possible it also finalizes the partial\n-  signatures.\n-- **`finalizepsbt` (Finalizer, Extractor)** is a utility RPC that finalizes any\n-  partial signatures, and if all inputs are finalized, converts the result to a\n-  fully signed transaction which can be broadcast with `sendrawtransaction`.\n-- **`combinepsbt` (Combiner)** is a utility RPC that implements a Combiner. It\n-  can be used at any point in the workflow to merge information added to\n-  different versions of the same PSBT. In particular it is useful to combine the\n-  output of multiple Updaters or Signers.\n-- **`decodepsbt`** is a diagnostic utility RPC which will show all information in\n-  a PSBT in human-readable form, as well as compute its eventual fee if known.\n-\n-Upgrading non-HD wallets to HD wallets\n---------------------------------------\n-\n-Since Bitcoin Core 0.13.0, creating new BIP 32 Hierarchical Deterministic wallets has been supported by Bitcoin Core but old non-HD wallets could not be upgraded to HD. Now non-HD wallets can be upgraded to HD using the `-upgradewallet` command line option. This upgrade will result in the all keys in the keypool being marked as used and a new keypool generated. **A new backup must be made when this upgrade is performed.**\n-\n-Additionally, `-upgradewallet` can be used to upgraded from a non-split HD chain (all keys generated with `m/0'/0'/i'`) to a split HD chain (receiving keys generated with `'m/0'/0'/i'` and change keys generated with `m'/0'/1'/i'`). When this upgrade occurs, all keys already in the keypool will remain in the keypool to be used until all keys from before the upgrade are exhausted. This is to avoid issues with backups and downgrades when some keys may come from the change key keypool. Users can begin using the new split HD chain keypools by using the `newkeypool` RPC to mark all keys in the keypool as used and begin using a new keypool generated from the split HD chain.\n-\n-HD Master key rotation\n-----------------------\n-\n-A new RPC, `sethdseed`, has been introduced which allows users to set a new HD seed or set their own HD seed. This allows for a new HD seed to be used. **A new backup must be made when a new HD seed is set.**\n-\n-Low-level RPC changes\n----------------------\n-\n-- The new RPC `scantxoutset` can be used to scan the UTXO set for entries\n-  that match certain output descriptors. Refer to the [output descriptors\n-  reference documentation](doc/descriptors.md) for more details. This call\n-  is similar to `listunspent` but does not use a wallet, meaning that the\n-  wallet can be disabled at compile or run time. This call is experimental,\n-  as such, is subject to changes or removal in future releases.\n-\n-- The `createrawtransaction` RPC will now accept an array or dictionary (kept for compatibility) for the `outputs` parameter. This means the order of transaction outputs can be specified by the client.\n-- The `fundrawtransaction` RPC will reject the previously deprecated `reserveChangeKey` option.\n-- `sendmany` now shuffles outputs to improve privacy, so any previously expected behavior with regards to output ordering can no longer be relied upon.\n-- The new RPC `testmempoolaccept` can be used to test acceptance of a transaction to the mempool without adding it.\n-- JSON transaction decomposition now includes a `weight` field which provides\n-  the transaction's exact weight. This is included in REST /rest/tx/ and\n-  /rest/block/ endpoints when in json mode. This is also included in `getblock`\n-  (with verbosity=2), `listsinceblock`, `listtransactions`, and\n-  `getrawtransaction` RPC commands.\n-- New `fees` field introduced in `getrawmempool`, `getmempoolancestors`, `getmempooldescendants` and\n-   `getmempoolentry` when verbosity is set to `true` with sub-fields `ancestor`, `base`, `modified`\n-   and `descendant` denominated in BTC. This new field deprecates previous fee fields, such as\n-   `fee`, `modifiedfee`, `ancestorfee` and `descendantfee`.\n-- The new RPC `getzmqnotifications` returns information about active ZMQ\n-  notifications.\n-- When bitcoin is not started with any `-wallet=<path>` options, the name of\n-  the default wallet returned by `getwalletinfo` and `listwallets` RPCs is\n-  now the empty string `\"\"` instead of `\"wallet.dat\"`. If bitcoin is started\n-  with any `-wallet=<path>` options, there is no change in behavior, and the\n-  name of any wallet is just its `<path>` string.\n-- Passing an empty string (`\"\"`) as the `address_type` parameter to\n-  `getnewaddress`, `getrawchangeaddress`, `addmultisigaddress`,\n-  `fundrawtransaction` RPCs is now an error. Previously, this would fall back\n-  to using the default address type. It is still possible to pass null or leave\n-  the parameter unset to use the default address type.\n-\n-- Bare multisig outputs to our keys are no longer automatically treated as\n-  incoming payments. As this feature was only available for multisig outputs for\n-  which you had all private keys in your wallet, there was generally no use for\n-  them compared to single-key schemes. Furthermore, no address format for such\n-  outputs is defined, and wallet software can't easily send to it. These outputs\n-  will no longer show up in `listtransactions`, `listunspent`, or contribute to\n-  your balance, unless they are explicitly watched (using `importaddress` or\n-  `importmulti` with hex script argument). `signrawtransaction*` also still\n-  works for them.\n-\n-- The `getwalletinfo` RPC method now returns an `hdseedid` value, which is always the same as the incorrectly-named `hdmasterkeyid` value. `hdmasterkeyid` will be removed in V0.18.\n-- The `getaddressinfo` RPC method now returns an `hdseedid` value, which is always the same as the incorrectly-named `hdmasterkeyid` value. `hdmasterkeyid` will be removed in V0.18.\n-\n-- Parts of the `validateaddress` RPC method have been deprecated and moved to\n-  `getaddressinfo`. Clients must transition to using `getaddressinfo` to access\n-  this information before upgrading to v0.18. The following deprecated fields\n-  have moved to `getaddressinfo` and will only be shown with\n-  `-deprecatedrpc=validateaddress`: `ismine`, `iswatchonly`, `script`, `hex`,\n-  `pubkeys`, `sigsrequired`, `pubkey`, `addresses`, `embedded`, `iscompressed`,\n-  `account`, `timestamp`, `hdkeypath`, `hdmasterkeyid`.\n-- `signrawtransaction` is deprecated and will be fully removed in v0.18. To use\n-  `signrawtransaction` in v0.17, restart bitcoind with\n-  `-deprecatedrpc=signrawtransaction`. Projects should transition to using\n-  `signrawtransactionwithkey` and `signrawtransactionwithwallet` before\n-  upgrading to v0.18.\n-\n-Other API changes\n------------------\n-\n-- The `inactivehdmaster` property in the `dumpwallet` output has been corrected to `inactivehdseed`\n-\n-### Logging\n-\n-- The log timestamp format is now ISO 8601 (e.g. \"2018-02-28T12:34:56Z\").\n-\n-- When running bitcoind with `-debug` but without `-daemon`, logging to stdout\n-  is now the default behavior. Setting `-printtoconsole=1` no longer implicitly\n-  disables logging to debug.log. Instead, logging to file can be explicitly disabled\n-  by setting `-debuglogfile=0`.\n-\n-Transaction index changes\n--------------------------\n-\n-The transaction index is now built separately from the main node procedure,\n-meaning the `-txindex` flag can be toggled without a full reindex. If bitcoind\n-is run with `-txindex` on a node that is already partially or fully synced\n-without one, the transaction index will be built in the background and become\n-available once caught up. When switching from running `-txindex` to running\n-without the flag, the transaction index database will *not* be deleted\n-automatically, meaning it could be turned back on at a later time without a full\n-resync.\n-\n-Miner block size removed\n-------------------------\n-\n-The `-blockmaxsize` option for miners to limit their blocks' sizes was\n-deprecated in V0.15.1, and has now been removed. Miners should use the\n-`-blockmaxweight` option if they want to limit the weight of their blocks.\n-\n-Python Support\n---------------\n-\n-Support for Python 2 has been discontinued for all test files and tools.\n-\n-0.17.0 change log\n+0.17.x change log\n =================\n \n-### Consensus\n-- #12204 `3fa24bb` Fix overly eager BIP30 bypass (morcos)\n-\n-### Policy\n-- #12568 `ed6ae80` Allow dustrelayfee to be set to zero (luke-jr)\n-- #13120 `ca2a233` Treat segwit as always active (MarcoFalke)\n-- #13096 `062738c` Fix `MAX_STANDARD_TX_WEIGHT` check (jl2012)\n-\n-### Mining\n-- #12693 `df529dc` Remove unused variable in SortForBlock (drewx2)\n-- #12448 `84efa9a` Interrupt block generation on shutdown request (promag)\n-\n-### Block and transaction handling\n-- #12225 `67447ba` Mempool cleanups (sdaftuar)\n-- #12356 `fd65937` Fix 'mempool min fee not met' debug output (Empact)\n-- #12287 `bf3353d` Optimise lock behaviour for GuessVerificationProgress() (jonasschnelli)\n-- #11889 `47a7666` Drop extra script variable in ProduceSignature (ryanofsky)\n-- #11880 `d59b8d6` Stop special-casing phashBlock handling in validation for TBV (TheBlueMatt)\n-- #12431 `947c25e` Only call NotifyBlockTip when chainActive changes (jamesob)\n-- #12653 `534b8fa` Allow to optional specify the directory for the blocks storage (jonasschnelli)\n-- #12172 `3b62a91` Bugfix: RPC: savemempool: Don't save until LoadMempool() is finished (jtimon)\n-- #12167 `88430cb` Make segwit failure due to `CLEANSTACK` violation return a `SCRIPT_ERR_CLEANSTACK` error code (maaku)\n-- #12561 `24133b1` Check for block corruption in ConnectBlock() (sdaftuar)\n-- #11617 `1b5723e` Avoid lock: Call FlushStateToDisk(\u2026) regardless of fCheckForPruning (practicalswift)\n-- #11739 `0a8b7b4` Enforce `SCRIPT_VERIFY_P2SH` and `SCRIPT_VERIFY_WITNESS` from genesis (sdaftuar)\n-- #12885 `a49381d` Reduce implementation code inside CScript (sipa)\n-- #13032 `34dd1a6` Output values for \"min relay fee not met\" error (kristapsk)\n-- #13033 `a07e8ca` Build txindex in parallel with validation (jimpo)\n-- #13080 `66cc47b` Add compile time checking for ::mempool.cs runtime locking assertions (practicalswift)\n-- #13185 `08c1caf` Bugfix: the end of a reorged chain is invalid when connect fails (sipa)\n-- #11689 `0264836` Fix missing locking in CTxMemPool::check(\u2026) and CTxMemPool::setSanityCheck(\u2026) (practicalswift)\n-- #13011 `3c2a41a` Cache witness hash in CTransaction (MarcoFalke)\n-- #13191 `0de7cc8` Specialized double-SHA256 with 64 byte inputs with SSE4.1 and AVX2 (sipa)\n-- #13243 `ea263e1` Make reusable base class for auxiliary indices (jimpo)\n-- #13393 `a607d23` Enable double-SHA256-for-64-byte code on 32-bit x86 (sipa)\n-- #13428 `caabdea` validation: check the specified number of blocks (off-by-one) (kallewoof)\n-- #13438 `450055b` Improve coverage of SHA256 SelfTest code (sipa)\n-- #13431 `954f4a9` validation: count blocks correctly for check level < 3 (kallewoof)\n-- #13386 `3a3eabe` SHA256 implementations based on Intel SHA Extensions (sipa)\n-- #11658 `9a1ad2c` During IBD, when doing pruning, prune 10% extra to avoid pruning again soon after (luke-jr)\n-- #13794 `8ce55df` chainparams: Update with data from assumed valid chain (MarcoFalke)\n-- #13527 `e7ea858` Remove promiscuousmempoolflags (MarcoFalke)\n-\n-### P2P protocol and network code\n-- #12342 `eaeaa2d` Extend #11583 (\"Do not make it trivial for inbound peers to generate log entries\") to include \"version handshake timeout\" message (clemtaylor)\n-- #12218 `9a32114` Move misbehaving logging to net logging category (laanwj)\n-- #10387 `5c2aff8` Eventually connect to `NODE_NETWORK_LIMITED` peers (jonasschnelli)\n-- #9037 `a36834f` Add test-before-evict discipline to addrman (EthanHeilman)\n-- #12622 `e1d6e2a` Correct addrman logging (laanwj)\n-- #11962 `0a01843` add seed.bitcoin.sprovoost.nl to DNS seeds (Sjors)\n-- #12569 `23e7fe8` Increase signal-to-noise ratio in debug.log by adjusting log level when logging failed non-manual connect():s (practicalswift)\n-- #12855 `c199869` Minor accumulated cleanups (tjps)\n-- #13153 `ef46c99` Add missing newlines to debug logging (laanwj)\n-- #13162 `a174702` Don't incorrectly log that REJECT messages are unknown (jnewbery)\n-- #13151 `7f4db9a` Serve blocks directly from disk when possible (laanwj)\n-- #13134 `70d3541` Add option `-enablebip61` to configure sending of BIP61 notifications (laanwj)\n-- #13532 `7209fec` Log warning when deprecated network name 'tor' is used (wodry)\n-- #13615 `172f984` Remove unused interrupt from SendMessages (fanquake)\n-- #13417 `1e90862` Tighten scope in `net_processing` (skeees)\n-- #13298 `f8d470e` Bucketing INV delays (1 bucket) for incoming connections to hide tx time (naumenkogs)\n-- #13672 `0d8d6be` Modified `in_addr6` cast in CConman class to work with msvc (sipsorcery)\n-- #11637 `c575260` Remove dead service bits code (MarcoFalke)\n-- #13212 `a6f00ce` Fixed a race condition when disabling the network (lmanners)\n-- #13656 `1211b15` Remove the boost/algorithm/string/predicate.hpp dependency (251Labs)\n-- #13423 `f58674a` Thread safety annotations in `net_processing` (skeees)\n-- #13776 `7d36237` Add missing verification of IPv6 address in CNetAddr::GetIn6Addr(\u2026) (practicalswift)\n-- #13907 `48bf8ff` Introduce a maximum size for locators (gmaxwell)\n-- #13951 `8a9ffec` Hardcoded seeds update pre-0.17 branch (laanwj)\n-\n-### Wallet\n-- #12330 `2a30e67` Reduce scope of `cs_main` and `cs_wallet` locks in listtransactions (promag)\n-- #12298 `a1ffddb` Refactor HaveKeys to early return on false result (promag)\n-- #12282 `663911e` Disallow abandon of conflicted txes (MarcoFalke)\n-- #12333 `d405bee` Make CWallet::ListCoins atomic (promag)\n-- #12296 `8e6f9f4` Only fee-bump non-conflicted/non-confirmed txes (MarcoFalke)\n-- #11866 `6bb9c13` Do not un-mark fInMempool on wallet txn if ATMP fails (TheBlueMatt)\n-- #11882 `987a809` Disable default fallbackfee on mainnet (jonasschnelli)\n-- #9991 `4ca7c1e` listreceivedbyaddress Filter Address (NicolasDorier)\n-- #11687 `98bc27f` External wallet files (ryanofsky)\n-- #12658 `af88094` Sanitize some wallet serialization (sipa)\n-- #9680 `6acd870` Unify CWalletTx construction (ryanofsky)\n-- #10637 `e057589` Coin Selection with Murch's algorithm (achow101, Xekyo)\n-- #12408 `c39dd2e` Change output type globals to members (MarcoFalke)\n-- #12694 `9552dfb` Actually disable BnB when there are preset inputs (achow101)\n-- #11536 `cead84b` Rename account to label where appropriate (ryanofsky)\n-- #12709 `02b7e83` shuffle sendmany recipients ordering (instagibbs)\n-- #12699 `c948dc8` Shuffle transaction inputs before signing (instagibbs)\n-- #10762 `6d53663` Remove Wallet dependencies from init.cpp (jnewbery)\n-- #12857 `821980c` Avoid travis lint-include-guards error (ken2812221)\n-- #12702 `dab0d68` importprivkey: hint about importmulti (kallewoof)\n-- #12836 `9abdb7c` Make WalletInitInterface and DummyWalletInit private, fix nullptr deref (promag)\n-- #12785 `215158a` Initialize `m_last_block_processed` to nullptr (practicalswift)\n-- #12932 `8d651ae` Remove redundant lambda function arg in handleTransactionChanged (laanwj)\n-- #12749 `a84b056` feebumper: discard change outputs below discard rate (instagibbs)\n-- #12892 `9b3370d` introduce 'label' API for wallet (jnewbery)\n-- #12925 `6d3de17` Logprint the start of a rescan (jonasschnelli)\n-- #12888 `39439e5` debug log number of unknown wallet records on load (instagibbs)\n-- #12977 `434150a` Refactor `g_wallet_init_interface` to const reference (promag)\n-- #13017 `65d7083` Add wallets management functions (promag)\n-- #12953 `d1d54ae` Deprecate accounts (jnewbery)\n-- #12909 `476cb35` Make fee settings to be non-static members (MarcoFalke)\n-- #13002 `487dcbe` Do not treat bare multisig outputs as IsMine unless watched (sipa)\n-- #13028 `783bb64` Make vpwallets usage thread safe (promag)\n-- #12507 `2afdc29` Interrupt rescan on shutdown request (promag)\n-- #12729 `979150b` Get rid of ambiguous OutputType::NONE value (ryanofsky)\n-- #13079 `5778d44` Fix rescanblockchain rpc to properly report progress (Empact)\n-- #12560 `e03c0db` Upgrade path for non-HD wallets to HD (achow101)\n-- #13161 `7cc1bd3` Reset BerkeleyDB handle after connection fails (real-or-random)\n-- #13081 `0dec5b5` Add compile time checking for `cs_wallet` runtime locking assertions (practicalswift)\n-- #13127 `19a3a9e` Add Clang thread safety annotations for variables guarded by `cs_db` (practicalswift)\n-- #10740 `4cfe17c` `loadwallet` RPC - load wallet at runtime (jnewbery)\n-- #12924 `6738813` Fix hdmaster-key / seed-key confusion (scripted diff) (jnewbery)\n-- #13297 `d82c5d1` Fix incorrect comment for DeriveNewSeed (jnewbery)\n-- #13063 `6378eef` Use shared pointer to retain wallet instance (promag)\n-- #13142 `56fe3dc` Separate IsMine from solvability (sipa)\n-- #13194 `fd96d54` Remove template matching and pseudo opcodes (sipa)\n-- #13252 `c4cc8d9` Refactor ReserveKeyFromKeyPool for safety (Empact)\n-- #13058 `343d4e4` `createwallet` RPC - create new wallet at runtime (jnewbery)\n-- #13351 `2140f6c` Prevent segfault when sending to unspendable witness (MarcoFalke)\n-- #13060 `3f0f394` Remove getlabeladdress RPC (jnewbery)\n-- #13111 `000abbb` Add unloadwallet RPC (promag)\n-- #13160 `868cf43` Unlock spent outputs (promag)\n-- #13498 `f54f373` Fixups from account API deprecation (jnewbery)\n-- #13491 `61a044a` Improve handling of INVALID in IsMine (sipa)\n-- #13425 `028b0d9` Moving final scriptSig construction from CombineSignatures to ProduceSignature (PSBT signer logic) (achow101)\n-- #13564 `88a15eb` loadwallet shouldn't create new wallets (jnewbery)\n-- #12944 `619cd29` ScanforWalletTransactions should mark input txns as dirty (instagibbs)\n-- #13630 `d6b2235` Drop unused pindexRet arg to CMerkleTx::GetDepthInMainChain (Empact)\n-- #13566 `ad552a5` Fix get balance (jnewbery)\n-- #13500 `4a3e8c5` Decouple wallet version from client version (achow101)\n-- #13712 `aba2e66` Fix non-determinism in ParseHDKeypath(\u2026). Avoid using an uninitialized variable in path calculation (practicalswift)\n-- #9662 `6b6e854` Add createwallet \"disableprivatekeys\" option: a sane mode for watchonly-wallets (jonasschnelli)\n-- #13683 `e8c7434` Introduce assertion to document the assumption that cache and cache_used are always set in tandem (practicalswift)\n-- #12257 `5f7575e` Use destination groups instead of coins in coin select (kallewoof)\n-- #13773 `89a116d` Fix accidental use of the comma operator (practicalswift)\n-- #13805 `c88529a` Correctly limit output group size (sdaftuar)\n-- #12992 `26f59f5` Add wallet name to log messages (PierreRochard)\n-- #13667 `b81a8a5` Fix backupwallet for multiwallets (domob1812)\n-- #13657 `51c693d` assert to ensure accuracy of CMerkleTx::GetBlocksToMaturity (Empact)\n-- #13812 `9d86aad` sum ancestors rather than taking max in output groups (kallewoof)\n-- #13876 `8eb9870` Catch `filesystem_error` and raise `InitError` (MarcoFalke)\n-- #13808 `13d51a2` shuffle coins before grouping, where warranted (kallewoof)\n-- #13666 `2115cba` Always create signatures with Low R values (achow101)\n-- #13917 `0333914` Additional safety checks in PSBT signer (sipa)\n-- #13968 `65e7a8b` couple of walletcreatefundedpsbt fixes (instagibbs)\n-- #14055 `2307a6e` fix walletcreatefundedpsbt deriv paths, add test (instagibbs)\n-\n-### RPC and other APIs\n-- #12336 `3843780` Remove deprecated rpc options (jnewbery)\n-- #12193 `5dc00f6` Consistently use UniValue.pushKV instead of push_back(Pair()) (karel-3d) (MarcoFalke)\n-- #12409 `0cc45ed` Reject deprecated reserveChangeKey in fundrawtransaction (MarcoFalke)\n-- #10583 `8a98dfe` Split part of validateaddress into getaddressinfo (achow101)\n-- #10579 `ffc6e48` Split signrawtransaction into wallet and non-wallet RPC command (achow101)\n-- #12494 `e4ffcac` Declare CMutableTransaction a struct in rawtransaction.h (Empact)\n-- #12503 `0e26591` createmultisig no longer takes addresses (instagibbs)\n-- #12083 `228b086` Improve getchaintxstats test coverage (promag)\n-- #12479 `cd5e438` Add child transactions to getrawmempool verbose output (conscott)\n-- #11872 `702e8b7` createrawtransaction: Accept sorted outputs (MarcoFalke)\n-- #12700 `ebdf84c` Document RPC method aliasing (ryanofsky)\n-- #12727 `8ee5c7b` Remove unreachable help conditions in rpcwallet.cpp (lutangar)\n-- #12778 `b648974` Add username and ip logging for RPC method requests (GabrielDav)\n-- #12717 `ac898b6` rest: Handle utxo retrieval when ignoring the mempool (romanz)\n-- #12787 `cd99e5b` Adjust ifdef to avoid unreachable code (practicalswift)\n-- #11742 `18815b4` Add testmempoolaccept (MarcoFalke)\n-- #12942 `fefb817` Drop redundant testing of signrawtransaction prevtxs args (Empact)\n-- #11200 `5f2a399` Allow for aborting rescans in the GUI (achow101)\n-- #12791 `3a8a4dc` Expose a transaction's weight via RPC (TheBlueMatt)\n-- #12436 `6e67754` Adds a functional test to validate the transaction version number in the RPC output (251Labs)\n-- #12240 `6f8b345` Introduced a new `fees` structure that aggregates all sub-field fee types denominated in BTC (mryandao)\n-- #12321 `eac067a` p2wsh and p2sh-p2wsh address in decodescript (fivepiece)\n-- #13090 `17266a1` Remove Safe mode (achow101, laanwj)\n-- #12639 `7eb7076` Reduce `cs_main` lock in listunspent (promag)\n-- #10267 `7b966d9` New -includeconf argument for including external configuration files (kallewoof)\n-- #10757 `b9551d3` Introduce getblockstats to plot things (jtimon)\n-- #13288 `a589f53` Remove the need to include rpc/blockchain.cpp in order to put `GetDifficulty` under test (Empact)\n-- #13394 `e1f8dce` cli: Ignore libevent warnings (theuni)\n-- #13439 `3f398d7` Avoid \"duplicate\" return value for invalid submitblock (TheBlueMatt)\n-- #13570 `a247594` Add new \"getzmqnotifications\" method (domob1812)\n-- #13072 `b25a4c2` Update createmultisig RPC to support segwit (ajtowns)\n-- #12196 `8fceae0` Add scantxoutset RPC method (jonasschnelli)\n-- #13557 `b654723` BIP 174 PSBT Serializations and RPCs (achow101)\n-- #13697 `f030410` Support output descriptors in scantxoutset (sipa)\n-- #13927 `bced8ea` Use pushKV in some new PSBT RPCs (domob1812)\n-- #13918 `a9c56b6` Replace median fee rate with feerate percentiles in getblockstats (marcinja)\n-- #13721 `9f23c16` Bugfixes for BIP 174 combining and deserialization (achow101)\n-- #13960 `517010e` Fix PSBT deserialization of 0-input transactions (achow101)\n-\n-### GUI\n-- #12416 `c997f88` Fix Windows build errors introduced in #10498 (practicalswift)\n-- #11733 `e782099` Remove redundant locks (practicalswift)\n-- #12426 `bfa3911` Initialize members in WalletModel (MarcoFalke)\n-- #12489 `e117cfe` Bugfix: respect user defined configuration file (-conf) in QT settings (jonasschnelli)\n-- #12421 `be263fa` navigate to  transaction history page after send (Sjors)\n-- #12580 `ce56fdd` Show a transaction's virtual size in its details dialog (dooglus)\n-- #12501 `c8ea91a` Improved \"custom fee\" explanation in tooltip (randolf)\n-- #12616 `cff95a6` Set modal overlay hide button as default (promag)\n-- #12620 `8a43bdc` Remove TransactionTableModel::TxIDRole (promag)\n-- #12080 `56cc022` Add support to search the address book (promag)\n-- #12621 `2bac3e4` Avoid querying unnecessary model data when filtering transactions (promag)\n-- #12721 `e476826` remove \"new\" button during receive-mode in addressbook (jonasschnelli)\n-- #12723 `310dc61` Qt5: Warning users about invalid-BIP21 URI bitcoin:// (krab)\n-- #12610 `25cf18f` Multiwallet for the GUI (jonasschnelli)\n-- #12779 `f4353da` Remove unused method setupAmountWidget(\u2026) (practicalswift)\n-- #12795 `68484d6` do not truncate .dat extension for wallets in gui (instagibbs)\n-- #12870 `1d54004` make clean removes `src/qt/moc_` files (Sjors)\n-- #13055 `bdda14d` Don't log to console by default (laanwj)\n-- #13141 `57c57df` fixes broken link on readme (marcoagner)\n-- #12928 `ef006d9` Initialize non-static class members that were previously neither initialized where defined nor in constructor (practicalswift)\n-- #13158 `81c533c` Improve sendcoinsdialog readability (marcoagner)\n-- #11491 `40c34a0` Add proxy icon in statusbar (mess110)\n-- #13264 `2a7c53b` Satoshi unit (GreatSock)\n-- #13097 `e545503` Support wallets loaded dynamically (promag)\n-- #13284 `f8be434` fix visual \"overflow\" of amount input (brandonrninefive)\n-- #13275 `a315b79` use `[default wallet]` as name for wallet with no name (jonasschnelli)\n-- #13273 `3fd0c23` Qt/Bugfix: fix handling default wallet with no name (jonasschnelli)\n-- #13341 `25d2df2` Stop translating command line options (laanwj)\n-- #13043 `6e249e4` OptionsDialog: add prune setting (Sjors)\n-- #13506 `6579d80` load wallet in UI after possible init aborts (jonasschnelli)\n-- #13458 `dc53f7f` Drop qt4 support (laanwj)\n-- #13528 `b877c39` Move BitcoinGUI initializers to class, fix initializer order warning (laanwj)\n-- #13536 `baf3a3a` coincontrol: Remove unused qt4 workaround (MarcoFalke)\n-- #13537 `10ffca7` Peer table: Visualize inbound/outbound state for every row (wodry)\n-- #13791 `2c14c1f` Reject dialogs if key escape is pressed (promag)\n-\n-### Build system\n-- #12371 `c9ca4f6` Add gitian PGP key: akx20000 (ghost)\n-- #11966 `f4f4f51` clientversion: Use full commit hash for commit-based version descriptions (luke-jr)\n-- #12417 `ae0fbf0` Upgrade `mac_alias` to 2.0.7 (droark)\n-- #12444 `1f055ef` gitian: Bump descriptors for (0.)17 (theuni)\n-- #12402 `59e032b` expat 2.2.5, ccache 3.4.1, miniupnpc 2.0.20180203 (fanquake)\n-- #12029 `daa84b3` Add a makefile target for Doxygen documentation (Ov3rlo4d)\n-- #12466 `6645eaf` Only use `D_DARWIN_C_SOURCE` when building miniupnpc on darwin (fanquake)\n-- #11986 `765a3eb` zeromq 4.2.3 (fanquake)\n-- #12373 `f13d756` Add build support for profiling (murrayn)\n-- #12631 `a312e20` gitian: Alphabetize signing keys & add kallewoof key (kallewoof)\n-- #12607 `29fad97` Remove ccache (fanquake)\n-- #12625 `c4219ff` biplist 1.0.3 (fanquake)\n-- #12666 `05042d3` configure: UniValue 1.0.4 is required for pushKV(, bool) (luke-jr)\n-- #12678 `6324c68` Fix a few compilation issues with Clang 7 and -Werror (vasild)\n-- #12692 `de6bdfd` Add configure options for various -fsanitize flags (eklitzke)\n-- #12901 `7e23972` Show enabled sanitizers in configure output (practicalswift)\n-- #12899 `3076993` macOS: Prevent Xcode 9.3 build warnings (AkioNak)\n-- #12715 `8fd6243` Add 'make clean' rule (hkjn)\n-- #13133 `a024a18` Remove python2 from configure.ac (ken2812221)\n-- #13005 `cb088b1` Make --enable-debug to pick better options (practicalswift)\n-- #13254 `092b366` Remove improper `qt/moc_*` cleaning glob from the general Makefile (Empact)\n-- #13306 `f5a7733` split warnings out of CXXFLAGS (theuni)\n-- #13385 `7c7508c` Guard against accidental introduction of new Boost dependencies (practicalswift)\n-- #13041 `5779dc4` Add linter checking for accidental introduction of locale dependence (practicalswift)\n-- #13408 `70a03c6` crypto: cleanup sha256 build (theuni)\n-- #13435 `cf7ca60` When build fails due to lib missing, indicate which one (Empact)\n-- #13445 `8eb76f3` Reset default -g -O2 flags when enable debug (ken2812221)\n-- #13465 `81069a7` Avoid concurrency issue when make multiple target (ken2812221)\n-- #13454 `45c00f8` Make sure `LC_ALL=C` is set in all shell scripts (practicalswift)\n-- #13480 `31145a3` Avoid copies in range-for loops and add a warning to detect them (theuni)\n-- #13486 `66e1a08` Move rpc/util.cpp from libbitcoin-util to libbitcoin-server (ken2812221)\n-- #13580 `40334c7` Detect if char equals `int8_t` (ken2812221)\n-- #12788 `287e4ed` Tune wildcards for LIBSECP256K1 target (kallewoof)\n-- #13611 `b55f0c3` bugfix: Use `__cpuid_count` for gnu C to avoid gitian build fail (ken2812221)\n-- #12971 `a6d14b1` Upgrade Qt to 5.9.6 (TheCharlatan)\n-- #13543 `6c6a300` Add RISC-V support (laanwj)\n-- #13177 `dcb154e` GCC-7 and glibc-2.27 back compat code (ken2812221)\n-- #13659 `90b1c7e` add missing leveldb defines (theuni)\n-- #13368 `c0f1569` Update gitian-build.sh for docker (achow101)\n-- #13171 `19d8ca5` Change gitian-descriptors to use bionic instead (ken2812221)\n-- #13604 `75bea05` Add depends 32-bit arm support for bitcoin-qt (TheCharlatan)\n-- #13623 `9cdb19f` Migrate gitian-build.sh to python (ken2812221)\n-- #13689 `8c36432` disable Werror when building zmq (greenaddress)\n-- #13617 `cf7f9ae` release: Require macos 10.10+ (fanquake)\n-- #13750 `c883653` use MacOS friendly sed syntax in qt.mk (Sjors)\n-- #13095 `415f2bf` update `ax_boost_chrono`/`unit_test_framework` (fanquake)\n-- #13732 `e8ffec6` Fix Qt's rcc determinism (Fuzzbawls)\n-- #13782 `8284f1d` Fix osslsigncode compile issue in gitian-build (ken2812221)\n-- #13696 `2ab7208` Add aarch64 qt depends support for cross compiling bitcoin-qt (TheCharlatan)\n-- #13705 `b413ba0` Add format string linter (practicalswift)\n-- #14000 `48c8459` fix qt determinism (theuni)\n-- #14018 `3e4829a` Bugfix: NSIS: Exclude `Makefile*` from docs (luke-jr)\n-- #12906 `048ac83` Avoid `interface` keyword to fix windows gitian build (ryanofsky)\n-- #13314 `a9b6957` Fix FreeBSD build by including utilstrencodings.h (laanwj)\n-\n-### Tests and QA\n-- #12252 `8d57319` Require all tests to follow naming convention (ajtowns)\n-- #12295 `935eb8d` Enable flake8 warnings for all currently non-violated rules (practicalswift)\n-- #11858 `b4d8549` Prepare tests for Windows (MarcoFalke)\n-- #11771 `2dbc4a4` Change invalidtxrequest to use BitcoinTestFramework (jnewbery)\n-- #12200 `d09968f` Bind functional test nodes to 127.0.0.1 (Sjors)\n-- #12425 `26dc2da` Add some script tests (richardkiss)\n-- #12455 `23481fa` Fix bip68 sequence test to reflect updated rpc error message (Empact)\n-- #12477 `acd1e61` Plug memory leaks and stack-use-after-scope (MarcoFalke)\n-- #12443 `07090c5` Move common args to bitcoin.conf (MarcoFalke)\n-- #12570 `39dcac2` Add test cases for HexStr (`std::reverse_iterator` and corner cases) (kostaz)\n-- #12582 `6012f1c` Fix ListCoins test failure due to unset `g_wallet_allow_fallback_fee` (ryanofsky)\n-- #12516 `7f99964` Avoid unintentional unsigned integer wraparounds in tests (practicalswift)\n-- #12512 `955fd23` Don't test against the mempool min fee information in mempool_limit.py (Empact)\n-- #12600 `29088b1` Add a test for large tx output scripts with segwit input (richardkiss)\n-- #12627 `791c3ea` Fix some tests to work on native windows (MarcoFalke)\n-- #12405 `0f58d7f` travis: Full clone for git subtree check (MarcoFalke)\n-- #11772 `0630974` Change invalidblockrequest to use BitcoinTestFramework (jnewbery)\n-- #12681 `1846296` Fix ComputeTimeSmart test failure with `-DDEBUG_LOCKORDER` (ryanofsky)\n-- #12682 `9f04c8e` travis: Clone depth 1 unless `$check_doc` (MarcoFalke)\n-- #12710 `00d1680` Append scripts to new `test_list` array to fix bad assignment (jeffrade)\n-- #12720 `872c921` Avoiding 'file' function name from python2 (jeffrade)\n-- #12728 `4ba3d4f` rename TestNode to TestP2PConn in tests (jnewbery)\n-- #12746 `2405ce1` Remove unused argument `max_invalid` from `check_estimates(\u2026)` (practicalswift)\n-- #12718 `185d484` Require exact match in `assert_start_raises_init_eror` (jnewbery, MarcoFalke)\n-- #12076 `6d36f59` Use node.datadir instead of tmpdir in test framework (MarcoFalke)\n-- #12772 `b43aba8` ci: Bump travis timeout for make check to 50m (jnewbery)\n-- #12806 `18606eb` Fix function names in `feature_blocksdir` (MarcoFalke)\n-- #12811 `0d8fc8d` Make summary row bold-red if any test failed and show failed tests at end of table (laanwj)\n-- #12790 `490644d` Use blockmaxweight where tests previously had blockmaxsize (conscott)\n-- #11773 `f0f9732` Change `feature_block.py` to use BitcoinTestFramework (jnewbery)\n-- #12839 `40f4baf` Remove travis checkout depth (laanwj)\n-- #11817 `2a09a78` Change `feature_csv_activation.py` to use BitcoinTestFramework (jnewbery)\n-- #12284 `fa5825d` Remove assigned but never used local variables. Enable Travis checking for unused local variables (practicalswift)\n-- #12719 `9beded5` Add note about test suite naming convention in developer-notes.md (practicalswift)\n-- #12861 `c564424` Stop `feature_block.py` from blowing up memory (jnewbery)\n-- #12851 `648252e` travis: Run verify-commits only on cron jobs (MarcoFalke)\n-- #12853 `2106c4c` Match full plain text by default (MarcoFalke)\n-- #11818 `9a2db3b` I accidentally (deliberately) killed it (the ComparisonTestFramework) (jnewbery)\n-- #12766 `69310a3` Tidy up REST interface functional tests (romanz)\n-- #12849 `83c7533` Add logging in loops in `p2p_sendhears.py` (ccdle12)\n-- #12895 `d6f10b2` Add note about test suite name uniqueness requirement to developer notes (practicalswift)\n-- #12856 `27278df` Add Metaclass for BitcoinTestFramework (WillAyd)\n-- #12918 `6fc5a05` Assert on correct variable (kallewoof)\n-- #11878 `a04440f` Add Travis check for duplicate includes (practicalswift)\n-- #12917 `cf8073f` Windows fixups for functional tests (MarcoFalke)\n-- #12926 `dd1ca9e` Run unit tests in parallel (sipa)\n-- #12920 `b1fdfc1` Fix sign for expected values (kallewoof)\n-- #12947 `979f598` Wallet hd functional test speedup and clarification (instagibbs)\n-- #12993 `0d69921` Remove compatibility code not needed now when we're on Python 3 (practicalswift)\n-- #12996 `6a278e0` Remove redundant bytes(\u2026) calls (practicalswift)\n-- #12949 `6b46288` Avoid copies of CTransaction (MarcoFalke)\n-- #13007 `0d12570` Fix dangling wallet pointer in vpwallets (promag)\n-- #13048 `cac6d11` Fix `feature_block` flakiness (jnewbery)\n-- #12510 `d5b2e98` Add `rpc_bind` test to default-run tests (laanwj)\n-- #13022 `896a9d0` Attach node index to `test_node` AssertionError and print messages (jamesob)\n-- #13024 `018c7e5` Add rpcauth pair that generated by rpcauth.py (ken2812221)\n-- #13013 `a0079d4` bench: Amend `mempool_eviction` test for witness txs (MarcoFalke)\n-- #13051 `e074097` Normalize executable location (MarcoFalke)\n-- #13056 `106d929` Make rpcauth.py testable and add unit tests (nixbox)\n-- #13073 `a785bc3` add rpcauth-test to `AC_CONFIG_LINKS` to fix out-of-tree make check (laanwj)\n-- #12830 `25ad2f7` Clarify address book error messages, add tests (jamesob)\n-- #13082 `24106a8` don't test against min relay fee information in `mining_prioritisetransaction.py` (kristapsk)\n-- #13003 `8d045a0` Add test for orphan handling (MarcoFalke)\n-- #13105 `9e9b48d` Add --failfast option to functional test runner (jamesob)\n-- #13130 `3186ad4` Fix race in `rpc_deprecated.py` (jnewbery)\n-- #13136 `baf6b4e` Fix flake8 warnings in several wallet functional tests (jnewbery)\n-- #13094 `bf9b03d` Add test for 64-bit Windows PE, modify 32-bit test results (ken2812221)\n-- #13183 `9458b05` travis: New travis job for `check_docs` steps (glaksmono)\n-- #12265 `1834d4d` fundrawtransaction: lock watch-only shared address (kallewoof)\n-- #13188 `4a50ec0` Remove unused option --srcdir (MarcoFalke)\n-- #12755 `612ba35` Better stderr testing (jnewbery)\n-- #13198 `196c5a9` Avoid printing to console during cache creation (sdaftuar)\n-- #13075 `cb9bbf7` Remove 'account' API from wallet functional tests (jnewbery)\n-- #13221 `ffa86af` travis: Rename the build stage `check_doc` to `lint` (practicalswift)\n-- #13205 `3cbd25f` Remove spurious error log in `p2p_segwit.py` (jnewbery)\n-- #13291 `536120e` Don't include torcontrol.cpp into the test file (Empact)\n-- #13281 `2ac6315` Move linters to test/lint, add readme (MarcoFalke)\n-- #13215 `f8a29ca` travis: Build tests on ubuntu 18.04 with docker (ken2812221)\n-- #13349 `24f7011` bench: Don't return a bool from main (laanwj)\n-- #13347 `87a9d03` travis: Skip cache for lint stage (MarcoFalke)\n-- #13355 `0b1c0c4` Fix \"gmake check\" under OpenBSD 6.3 (probably `*BSD`): Avoid using GNU grep specific regexp handling (practicalswift)\n-- #13353 `d4f6dac` Fixup setting of PATH env var (MarcoFalke)\n-- #13352 `e24bf1c` Avoid checking reject code for now (MarcoFalke)\n-- #13383 `2722a1f` bench: Use non-throwing parsedouble(\u2026) instead of throwing boost::lexical_cast<double>(\u2026) (practicalswift)\n-- #13367 `264efdc` Increase includeconf test coverage (MarcoFalke)\n-- #13404 `3d3d8ae` speed up of `tx_validationcache_tests` by reusing of CTransaction (lucash-dev)\n-- #13421 `531a033` Remove `portseed_offset` from test runner (MarcoFalke)\n-- #13440 `5315660` Log as utf-8 (MarcoFalke)\n-- #13066 `fa4b906` Migrate verify-commits script to python, run in travis (ken2812221)\n-- #13447 `4b1edd3` travis: Increase `travis_wait` time while verifying commits (ken2812221)\n-- #13350 `f532d52` Add logging to provide anchor points when debugging p2p_sendheaders (lmanners)\n-- #13406 `4382f19` travis: Change mac goal to all deploy (ken2812221)\n-- #13457 `b222138` Drop variadic macro (MarcoFalke)\n-- #13512 `3a45493` mininode: Expose connection state through `is_connected` (MarcoFalke)\n-- #13496 `9ab4c2a` Harden lint-filenames.sh (wodry)\n-- #13219 `08516e0` bench: Add block assemble benchmark (MarcoFalke)\n-- #13530 `b1dc39d` bench: Add missing pow.h header (laanwj)\n-- #12686 `2643fa5` Add -ftrapv to CFLAGS and CXXFLAGS when --enable-debug is used. Enable -ftrapv in Travis (practicalswift)\n-- #12882 `d96bdd7` Make `test_bitcoin` pass under ThreadSanitzer (clang). Fix lock-order-inversion (potential deadlock) (practicalswift)\n-- #13535 `2328039` `wallet_basic`: Specify minimum required amount for listunspent (MarcoFalke)\n-- #13551 `c93c360` Fix incorrect documentation for test case `cuckoocache_hit_rate_ok` (practicalswift)\n-- #13563 `b330f3f` bench: Simplify coinselection (promag)\n-- #13517 `a6ed99a` Remove need to handle the network thread in tests (MarcoFalke)\n-- #13522 `686e97a` Fix `p2p_sendheaders` race (jnewbery)\n-- #13467 `3dc2dcf` Make `p2p_segwit` easier to debug (jnewbery)\n-- #13598 `0212187` bench: Fix incorrect behaviour in prevector.cpp (AkioNak)\n-- #13565 `b05ded1` Fix AreInputsStandard test to reference the proper scriptPubKey (Empact)\n-- #13145 `d3dae3d` Use common getPath method to create temp directory in tests (winder)\n-- #13645 `2ea7eb6` skip `rpc_zmq` functional test as necessary (jamesob)\n-- #13626 `8f1106d` Fix some TODOs in `p2p_segwit` (MarcoFalke)\n-- #13138 `8803c91` Remove accounts from `wallet_importprunedfunds.py` (jnewbery)\n-- #13663 `cbc9b50` Avoid read/write to default datadir (MarcoFalke)\n-- #13682 `f8a32a3` bench: Remove unused variable (practicalswift)\n-- #13638 `6fcdb5e` Use `MAX_SCRIPT_ELEMENT_SIZE` from script.py (domob1812)\n-- #13687 `9d26b69` travis: Check that ~/.bitcoin is never created (MarcoFalke)\n-- #13715 `e1260a7` fixes mininode's P2PConnection sending messages on closing transport (marcoagner)\n-- #13729 `aa9429a` travis: Avoid unnecessarily setting env variables on the lint build (Empact)\n-- #13747 `ab28b5b` Skip P2PConnection's `is_closing()` check when not available (domob1812)\n-- #13650 `7a9bca6` travis: Don't store debug info if --enable-debug is set (ken2812221)\n-- #13711 `f98d1e0` bench: Add benchmark for unserialize prevector (AkioNak)\n-- #13771 `365384f` travis: Retry to fetch docker image (MarcoFalke)\n-- #13806 `4d550ff` Fix `bench/block_assemble` assert failure (jamesob)\n-- #13779 `d25079a` travis: Improve readability of travis.yml and log outputs (scravy)\n-- #13822 `0fb9c87` bench: Make coinselection output groups pass eligibility filter (achow101)\n-- #13247 `e83d82a` Add tests to SingleThreadedSchedulerClient() and document the memory model (skeees)\n-- #13811 `660abc1` travis: Run `bench_bitcoin` once (MarcoFalke)\n-- #13837 `990e182` Extract `rpc_timewait` as test param (MarcoFalke)\n-- #13851 `9c4324d` fix locale for lint-shell (scravy)\n-- #13823 `489b51b` quote path in authproxy for external multiwallets (MarcoFalke)\n-- #13849 `2b67354` travis: Use only travis jobs: instead of mix of jobs+matrix (scravy)\n-- #13859 `2384323` Add emojis to `test_runner` path and wallet filename (MarcoFalke)\n-- #13916 `8ac7125` `wait_for_verack` by default (MarcoFalke)\n-- #13669 `f66e1c7` Cleanup `create_transaction` implementations (conscott)\n-- #13924 `09ada21` Simplify comparison in `rpc_blockchain.py` (domob1812)\n-- #13913 `a08533c` Remove redundant checkmempool/checkblockindex `extra_args` (MarcoFalke)\n-- #13915 `a04888a` Add test for max number of entries in locator (MarcoFalke)\n-- #13867 `1b04b55` Make extended tests pass on native Windows (MarcoFalke)\n-- #13944 `0df7a6c` Port usage of deprecated optparse module to argparse module (Kvaciral)\n-- #13928 `b8eb0df` blocktools enforce named args for amount (MarcoFalke)\n-- #13054 `bffb35f` Enable automatic detection of undefined names in Python tests scripts. Remove wildcard imports (practicalswift)\n-- #14069 `cf3d7f9` Use assert not `BOOST_CHECK_*` from multithreaded tests (skeees)\n-- #14071 `fab0fbe` Stop txindex thread before calling destructor (MarcoFalke)\n-\n-### Miscellaneous\n-- #11909 `8897135` contrib: Replace developer keys with list of pgp fingerprints (MarcoFalke)\n-- #12394 `fe53d5f` gitian-builder.sh: fix --setup doc, since lxc is default (Sjors)\n-- #12468 `294a766` Add missing newline in init.cpp log message (Aesti)\n-- #12308 `dcfe218` contrib: Add support for out-of-tree builds in gen-manpages.sh (laanwj)\n-- #12451 `aae64a2` Bump leveldb subtree (MarcoFalke)\n-- #12527 `d77b4a7` gitian-build.sh: fix signProg being recognized as two parameters (ken2812221)\n-- #12588 `d74b01d` utils: Remove deprecated pyzmq call from python zmq example (kosciej)\n-- #10271 `bc67982` Use `std::thread::hardware_concurrency`, instead of Boost, to determine available cores (fanquake)\n-- #12097 `14475e2` scripts: Lint-whitespace: use perl instead of grep -p (Sjors)\n-- #12098 `17c44b2` scripts: Lint-whitespace: add param to check last n commits (Sjors)\n-- #11900 `842f61a` script: Simplify checkminimalpush checks, add safety assert (instagibbs)\n-- #12567 `bb98aec` util: Print timestamp strings in logs using iso 8601 formatting (practicalswift)\n-- #12572 `d8d9162` script: Lint-whitespace: find errors more easily (AkioNak)\n-- #10694 `ae5bcc7` Remove redundant code in MutateTxSign(CMutableTransaction&, const std::string&) (practicalswift)\n-- #12659 `3d16f58` Improve Fatal LevelDB Log Messages (eklitzke)\n-- #12643 `0f0229d` util: Remove unused `sync_chain` (MarcoFalke)\n-- #12102 `7fb8fb4` Apply hardening measures in bitcoind systemd service file (Flowdalic)\n-- #12652 `55f490a` bitcoin-cli: Provide a better error message when bitcoind is not running (practicalswift)\n-- #12630 `c290508` Provide useful error message if datadir is not writable (murrayn)\n-- #11881 `624bee9` Remove Python2 support (jnewbery)\n-- #12821 `082e26c` contrib: Remove unused import string (MarcoFalke)\n-- #12829 `252c1b0` Python3 fixup (jnewbery)\n-- #12822 `ff48f62` Revert 7deba93bdc76616011a9f493cbc203d60084416f and fix expired-key-sigs properly (TheBlueMatt)\n-- #12820 `5e53b80` contrib: Fix check-doc script regexes (MarcoFalke)\n-- #12713 `4490871` Track negated options in the option parser (eklitzke)\n-- #12708 `b2e5fe8` Make verify-commits.sh test that merges are clean (sipa)\n-- #12891 `3190785` logging: Add lint-logs.sh to check for newline termination (jnewbery)\n-- #12923 `a7cbe38` util: Pass `pthread_self()` to `pthread_setschedparam` instead of 0 (laanwj)\n-- #12871 `fb17fae` Add shell script linting: Check for shellcheck warnings in shell scripts (practicalswift)\n-- #12970 `5df84de` logging: Bypass timestamp formatting when not logging (theuni)\n-- #12987 `fe8fa22` tests/tools: Enable additional Python flake8 rules for automatic linting via Travis (practicalswift)\n-- #12972 `0782508` Add python3 script shebang lint (ken2812221)\n-- #13004 `58bbc55` Print to console by default when not run with -daemon (practicalswift)\n-- #13039 `8b4081a` Add logging and error handling for file syncing (laanwj)\n-- #13020 `4741ca5` Consistently log CValidationState on call failure (Empact)\n-- #13031 `826acc9` Fix for utiltime to compile with msvc (sipsorcery)\n-- #13119 `81743b5` Remove script to clean up datadirs (MarcoFalke)\n-- #12954 `5a66642` util: Refactor logging code into a global object (jimpo)\n-- #12769 `35eb9d6` Add systemd service to bitcoind in debian package (ghost)\n-- #13146 `0bc980b` rpcauth: Make it possible to provide a custom password (laanwj)\n-- #13148 `b62b437` logging: Fix potential use-after-free in logprintstr(\u2026) (practicalswift)\n-- #13214 `0612d96` Enable Travis checking for two Python linting rules we are currently not violating (practicalswift)\n-- #13197 `6826989` util: Warn about ignored recursive -includeconf calls (kallewoof)\n-- #13176 `d9ebb63` Improve CRollingBloomFilter performance: replace modulus with FastMod (martinus)\n-- #13228 `d792e47` Add script to detect circular dependencies between source modules (sipa)\n-- #13320 `e08c130` Ensure gitian-build.sh uses bash (jhfrontz)\n-- #13301 `e4082d5` lint: Add linter to error on `#include <*.cpp>` (Empact)\n-- #13374 `56f6936` utils and libraries: checking for bitcoin address in translations (kaplanmaxe)\n-- #13230 `7c32b41` Simplify include analysis by enforcing the developer guide's include syntax (practicalswift)\n-- #13450 `32bf4c6` Add linter: Enforce the source code file naming convention described in the developer notes (practicalswift)\n-- #13479 `fa2ea37` contrib: Fix cve-2018-12356 by hardening the regex (loganaden)\n-- #13448 `a90ca40` Add linter: Make sure we explicitly open all text files using UTF-8 encoding in Python (practicalswift)\n-- #13494 `d67eff8` Follow-up to #13454: Fix broken build by exporting `LC_ALL=C` (practicalswift)\n-- #13510 `03f3925` Scripts and tools: Obsolete #!/bin/bash shebang (DesWurstes)\n-- #13577 `c9eb8d1` logging: Avoid nstart may be used uninitialized in appinitmain warning (mruddy)\n-- #13603 `453ae5e` bitcoin-tx: Stricter check for valid integers (domob1812)\n-- #13118 `c05c93c` RPCAuth Detection in Logs (Linrono)\n-- #13647 `4027ec1` Scripts and tools: Fix `BIND_NOW` check in security-check.py (conradoplg)\n-- #13692 `f5d166a` contrib: Clone core repo in gitian-build (MarcoFalke)\n-- #13699 `4c6d1b9` contrib: Correct version check (kallewoof)\n-- #13695 `dcc0cff` lint: Add linter for circular dependencies (Empact)\n-- #13733 `0d1ebf4` utils: Refactor argsmanager a little (AtsukiTak)\n-- #13714 `29b4ee6` contrib: Add lxc network setup for bionic host (ken2812221)\n-- #13764 `f8685f4` contrib: Fix test-security-check fail in ubuntu 18.04 (ken2812221)\n-- #13809 `77168f7` contrib: Remove debian and rpm subfolder (MarcoFalke)\n-- #13799 `230652c` Ignore unknown config file options; warn instead of error (sipa)\n-- #13894 `df9f712` shutdown: Stop threads before resetting ptrs (MarcoFalke)\n-- #13925 `71dec5c` Merge leveldb subtree (MarcoFalke)\n-- #13939 `ef86f26` lint: Make format string linter understand basic template parameter syntax (practicalswift)\n-- #14105 `eb202ea` util: Report parse errors in configuration file (laanwj)\n-- #12604 `9903537` Add DynamicMemoryUsage() to CDBWrapper to estimate LevelDB memory use (eklitzke)\n-- #12495 `047865e` Increase LevelDB `max_open_files` (eklitzke)\n-- #12784 `e80716d` Fix bug in memory usage calculation (unintended integer division) (practicalswift)\n-- #12618 `becd8dd` Set `SCHED_BATCH` priority on the loadblk thread (eklitzke)\n-- #12854 `5ca1509` Add P2P, Network, and Qt categories to the desktop icon (luke-jr)\n-- #11862 `4366f61` Network specific conf sections (ajtowns)\n-- #13441 `4a7e64f` Prevent shared conf files from failing with different available options in different binaries (achow101)\n-- #13471 `5eca4e8` For AVX2 code, also check for AVX, XSAVE, and OS support (sipa)\n-- #13503 `c655b2c` Document FreeBSD quirk. Fix FreeBSD build: Use std::min<int>(\u2026) to allow for compilation under certain FreeBSD versions (practicalswift)\n-- #13725 `07ce278` Fix bitcoin-cli --version (Empact)\n-\n-### Documentation\n-- #12306 `216f9a4` Improvements to UNIX documentation (axvr)\n-- #12309 `895fbd7` Explain how to update chainTxData in release process (laanwj)\n-- #12317 `85123be` Document method for reviewers to verify chainTxData (jnewbery)\n-- #12331 `d32528e` Properly alphabetize output of CLI --help option (murrayn)\n-- #12322 `c345148` Remove step making cloned repository world-writable for Windows build (murrayn)\n-- #12354 `b264528` add gpg key for fivepiece (fivepiece)\n-- #11761 `89005dd` initial QT documentation (Sjors)\n-- #12232 `fdc2188` Improve \"Turn Windows Features On or Off\" step (MCFX2)\n-- #12487 `4528f74` init: Remove translation for `-blockmaxsize` option help (laanwj)\n-- #12546 `a4a5fc7` Minor improvements to Compatibility Notes (randolf)\n-- #12434 `21e2670` dev-notes: Members should be initialized (MarcoFalke)\n-- #12452 `71f56da` clarified systemd installation instructions in init.md for Ubuntu users (DaveFromBinary)\n-- #12615 `1f93491` allow for SIGNER containing spaces (ken2812221)\n-- #12603 `85424d7` PeerLogicValidation interface (jamesob)\n-- #12581 `12ac2f0` Mention configure without wallet in FreeBSD instructions (dbolser)\n-- #12619 `8a709fb` Give hint about gitian not able to download (kallewoof)\n-- #12668 `de2fcaa` do update before fetching packages in WSL build guide (nvercamm)\n-- #12586 `e7721e6` Update osx brew install instruction (fanquake)\n-- #12760 `7466a26` Improve documentation on standard communication channels (jimpo)\n-- #12797 `0415b1e` init: Fix help message for checkblockindex (MarcoFalke)\n-- #12800 `2d97611` Add note about our preference for scoped enumerations (\"enum class\") (practicalswift)\n-- #12798 `174d016` Refer to witness reserved value as spec. in the BIP (MarcoFalke)\n-- #12759 `d3908e2` Improve formatting of developer notes (eklitzke)\n-- #12877 `2b54155` Use bitcoind in Tor documentation (knoxcard)\n-- #12896 `b15485e` Fix conflicting statements about initialization in developer notes (practicalswift)\n-- #12850 `319991d` add qrencode to brew install instructions (buddilla)\n-- #12007 `cd8e45b` Clarify the meaning of fee delta not being a fee rate in prioritisetransaction RPC (honzik666)\n-- #12927 `06ead15` fixed link, replaced QT with Qt (trulex)\n-- #12852 `ebd786b` devtools: Setup ots git integration (MarcoFalke)\n-- #12933 `3cf76c2` Refine header include policy (MarcoFalke)\n-- #12951 `6df0c6c` Fix comment in FindForkInGlobalIndex (jamesob)\n-- #12982 `a63b4e3` Fix inconsistent namespace formatting guidelines (ryanofsky)\n-- #13026 `9b3a67e` Fix include comment in src/interfaces/wallet.h (promag)\n-- #13012 `d1e3c5e` Add comments for chainparams.h, validation.cpp (jamesob)\n-- #13064 `569e381` List support for BIP173 in bips.md (sipa)\n-- #12997 `646b7f6` build-windows: Switch to Artful, since Zesty is EOL (MarcoFalke)\n-- #12384 `c5f7efe` Add version footnote to tor.md (Willtech)\n-- #13165 `627c376` Mention good first issue list in CONTRIBUTING.md (fanquake)\n-- #13295 `fb77310` Update OpenBSD build instructions for OpenBSD 6.3 (practicalswift)\n-- #13340 `3a8e3f4` remove leftover check-doc documentation (fanquake)\n-- #13346 `60f0358` update bitcoin-dot-org links in release-process.md (fanquake)\n-- #13372 `f014933` split FreeBSD build instructions out of build-unix.md (steverusso)\n-- #13366 `861de3b` Rename \u201cOS X\u201d to the newer \u201cmacOS\u201d convention (giulio92)\n-- #13369 `f8bcef3` update transifex doc link (mess110)\n-- #13312 `b22115d` Add a note about the source code filename naming convention (practicalswift)\n-- #13460 `1939536` Remove note to install all boost dev packages (MarcoFalke)\n-- #13476 `9501938` Fix incorrect shell quoting in FreeBSD build instructions (murrayn)\n-- #13402 `43fa355` Document validationinterace callback blocking deadlock potential (TheBlueMatt)\n-- #13488 `d6cf4bd` Improve readability of \"Squashing commits\" (wodry)\n-- #13531 `ee02deb` Clarify that mempool txiter is `const_iterator` (MarcoFalke)\n-- #13418 `01f9098` More precise explanation of parameter onlynet (wodry)\n-- #13592 `1756cb4` Modify policy to not translate command-line help (ken2812221)\n-- #13588 `b77c38e` Improve doc of options addnode, connect, seednode (wodry)\n-- #13614 `17e9106` Update command line help for -printtoconsole and -debuglogfile (satwo, fanquake)\n-- #13605 `8cc048e` corrected text to reflect new(er) process of specifying fingerprints (jhfrontz)\n-- #13481 `b641f60` Rewrite some validation docs as lock annotations (MarcoFalke)\n-- #13680 `30640f8` Remove outdated comment about miner ignoring CPFP (jamesob)\n-- #13625 `7146672` Add release notes for -printtoconsole and -debuglogfile changes (satwo)\n-- #13718 `f7f574d` Specify preferred Python string formatting technique (masonicboom)\n-- #12764 `10b9a81` Remove field in getblocktemplate help that has never been used (conscott)\n-- #13742 `d2186b3` Adjust bitcoincore.org links (MarcoFalke)\n-- #13706 `94dd89e` Minor improvements to release-process.md (MitchellCash)\n-- #13775 `ef4fac0` Remove newlines from error message (practicalswift)\n-- #13803 `feb7dd9` add note to contributor docs about warranted PR's (kallewoof)\n-- #13814 `67af7ef` Add BIP174 to list of implemented BIPs (sipa)\n-- #13835 `c1cba35` Fix memory consistency model in comment (skeees)\n-- #13824 `aa30e4b` Remove outdated net comment (MarcoFalke)\n-- #13853 `317477a` correct versions in dependencies.md (fanquake)\n-- #13872 `37ab117` Reformat -help output for help2man (real-or-random)\n-- #13717 `8c3c402` Link to python style guidelines from developer notes (masonicboom)\n-- #13895 `1cd5f2c` fix GetWarnings docs to reflect behavior (Empact)\n-- #13911 `3e3a50a` Revert translated string change, clarify wallet log messages (PierreRochard)\n-- #13908 `d6faea4` upgrade rescan time warning from minutes to >1 hour (masonicboom)\n-- #13905 `73a09b4` fixed bitcoin-cli -help output for help2man (hebasto)\n-- #14100 `2936dbc` Change documentation for =0 for non-boolean options (laanwj)\n-- #14096 `465a583` Add reference documentation for descriptors language (sipa)\n-- #12757 `0c5f67b` Clarify include guard naming convention (practicalswift)\n-- #13844 `d3325b0` Correct the help output for `-prune` (hebasto)\n+...\n \n Credits\n =======\n \n Thanks to everyone who directly contributed to this release:\n \n-- 251\n-- 532479301\n-- Aaron Clauson\n-- Akio Nakamura\n-- Akira Takizawa\n-- Alex Morcos\n-- Alex Vear\n-- Alexey Ivanov\n-- Alin Rus\n-- Andrea Comand\n-- Andrew Chow\n-- Anthony Towns\n-- AtsukiTak\n-- Ben Woosley\n-- Bernhard M. Wiedemann\n-- Brandon Ruggles\n-- buddilla\n-- ccdle12\n-- Chris Moore\n-- Chun Kuan Lee\n-- Clem Taylor\n-- Conor Scott\n-- Conrado Gouvea\n-- Cory Fields\n-- Cristian Mircea Messel\n-- ctp-tsteenholdt\n-- Damian Williamson\n-- Dan Bolser\n-- Daniel Kraft\n-- Darko Jankovi\u0107\n-- DaveFromBinary\n-- David A. Harding\n-- DesWurstes\n-- Dimitris Apostolou\n-- donaloconnor\n-- Douglas Roark\n-- DrahtBot\n-- Drew Rasmussen\n-- e0\n-- Ernest Hemingway\n-- Ethan Heilman\n-- Evan Klitzke\n-- fanquake\n-- Felix Wolfsteller\n-- fivepiece\n-- Florian Schmaus\n-- Fuzzbawls\n-- Gabriel Davidian\n-- Giulio Lombardo\n-- Gleb\n-- Grady Laksmono\n-- GreatSock\n-- Gregory Maxwell\n-- Gregory Sanders\n-- Hennadii Stepanov\n-- Henrik Jonsson\n-- Indospace.io\n-- James O'Beirne\n-- Jan \u010capek\n-- Jeff Frontz\n-- Jeff Rade\n-- Jeremy Rubin\n-- JeremyRand\n-- Jesse Cohen\n-- Jim Posen\n-- joemphilips\n-- John Bampton\n-- John Newbery\n-- johnlow95\n-- Johnson Lau\n-- Jonas Nick\n-- Jonas Schnelli\n-- Jo\u00e3o Barbosa\n-- Jorge Tim\u00f3n\n-- Josh Hartshorn\n-- Julian Fleischer\n-- kallewoof\n-- Karel Bilek\n-- Karl-Johan Alm\n-- Ken Lee\n-- Kevin Pan\n-- Kosta Zertsekel\n-- Kristaps Kaupe\n-- Kvaciral\n-- Lawrence Nahum\n-- Linrono\n-- lmanners\n-- Loganaden Velvindron\n-- Lowell Manners\n-- lucash.dev@gmail.com\n-- Luke Dashjr\n-- lutangar\n-- Marcin Jachymiak\n-- marcoagner\n-- MarcoFalke\n-- Mark Erhardt\n-- Mark Friedenbach\n-- Martin Ankerl\n-- Mason Simon\n-- Matt Corallo\n-- Matteo Sumberaz\n-- Max Kaplan\n-- MeshCollider\n-- Micha\u0142 Zabielski\n-- Mitchell Cash\n-- mruddy\n-- mryandao\n-- murrayn\n-- Nick Vercammen\n-- Nicolas Dorier\n-- Nikolay Mitev\n-- okayplanet\n-- Pierre Rochard\n-- Pieter Wuille\n-- practicalswift\n-- Qasim Javed\n-- Randolf Richardson\n-- Richard Kiss\n-- Roman Zeyde\n-- Russell Yanofsky\n-- Samuel B. Atwood\n-- Sebastian Kung\n-- Sjors Provoost\n-- Steve Lee\n-- steverusso\n-- Suhas Daftuar\n-- Tamas Blummer\n-- TheCharlatan\n-- Thomas Kerin\n-- Thomas Snider\n-- Tim Ruffing\n-- Varunram\n-- Vasil Dimov\n-- Will Ayd\n-- William Robinson\n-- winder\n-- Wladimir J. van der Laan\n-- wodry\n+...\n \n And to those that reported security issues:\n \n-- awemany (for CVE-2018-17144, previously credited as \"anonymous reporter\")\n+...\n \n-As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/).\n\\ No newline at end of file\n+As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/)."
      }
    ]
  },
  {
    "sha": "f7dbcaa72f184aabdac2fa1435a504ed001acd09",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmN2RiY2FhNzJmMTg0YWFiZGFjMmZhMTQzNWE1MDRlZDAwMWFjZDA5",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-10-13T08:15:08Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-10-18T08:06:31Z"
      },
      "message": "[doc] getblocktemplate: use SegWit in example",
      "tree": {
        "sha": "f276a8c979c3560f73f6a52b98a1c135725b2cca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f276a8c979c3560f73f6a52b98a1c135725b2cca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f7dbcaa72f184aabdac2fa1435a504ed001acd09",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAlvIPwcACgkQV/+b28ww\nEAk8jxAAgUWzW4TgXFzJCaTx8n+ztVcnFlXweYmXiqg2RiQoMRuqulFCC+iNGAqL\nPvQ9CG7vomlzBV155cevuMC/H7qE1/eE8ckCWbbj15IYXr1UYaOOk2trzoUs4uJ7\nAkTBaQ8U1lUtWqW2vVRa+WSS3AqtakmLWiihOgrrTl84oymafYk8EnkHinoQDXkb\nMN+5MRFf3lHr+APDniOg8KtPgzxzZtAfGINJVYQLFUMSZu6mkmw7cUU0EvqkTMPU\nnICwZ7mIYSN8I2KIZ4IH+s7m8Jw5U6xECb1TrPHiy+B2cnqu1a473m1rTVT3h+r2\nk8IeZvRosBVOIFw6MW2rA+W8GtOQ7BQoUbt9EHcZ0f8cNQRV+snQsiee5JZBoppA\na3dJxwwnTC0A70e1/D9Xxj5K/yBVCAI4BUxn075G+4oFP86jY8FcJDVrdgqO3j08\nw3C3EdOH7AjcXaaAlih73onY5BiqPtccifjRT+5Liv3gZcTPy9+noEffHjSbMld9\nz1pEEFAbdJRulN7/+iueJYhW8GYG3cBbFqBgEq4lWhWYpnT4aMmOp0/I1oqaM3nH\ne/0BvuICh/KPB7Lq0oDAD89NJfSlgwrdYZt/DOBFM2o7DYYMzuKJRyyDUAqYOgi1\nLXnp2H8wxN7KF3qad5gHzIFwQ5zrksDuW7lNjiUsoYVlaXZlsnY=\n=6oeN\n-----END PGP SIGNATURE-----",
        "payload": "tree f276a8c979c3560f73f6a52b98a1c135725b2cca\nparent 5b47b8efd48d233a5f7c12d1d7713dcd2f616255\nauthor Sjors Provoost <sjors@sprovoost.nl> 1539418508 +0900\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1539849991 +0700\n\n[doc] getblocktemplate: use SegWit in example\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7dbcaa72f184aabdac2fa1435a504ed001acd09",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f7dbcaa72f184aabdac2fa1435a504ed001acd09",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7dbcaa72f184aabdac2fa1435a504ed001acd09/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5b47b8efd48d233a5f7c12d1d7713dcd2f616255",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b47b8efd48d233a5f7c12d1d7713dcd2f616255",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5b47b8efd48d233a5f7c12d1d7713dcd2f616255"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "9da3c1493b1e65c8e05d3ed3511be19f19ea4ad7",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7dbcaa72f184aabdac2fa1435a504ed001acd09/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7dbcaa72f184aabdac2fa1435a504ed001acd09/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=f7dbcaa72f184aabdac2fa1435a504ed001acd09",
        "patch": "@@ -361,8 +361,8 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n             \"}\\n\"\n \n             \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getblocktemplate\", \"\")\n-            + HelpExampleRpc(\"getblocktemplate\", \"\")\n+            + HelpExampleCli(\"getblocktemplate\", \"{\\\"rules\\\": [\\\"segwit\\\"]}\")\n+            + HelpExampleRpc(\"getblocktemplate\", \"{\\\"rules\\\": [\\\"segwit\\\"]}\")\n          );\n \n     LOCK(cs_main);"
      }
    ]
  },
  {
    "sha": "1b5af2c177ee31109fdd710bc1f1f4f922cedaef",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYjVhZjJjMTc3ZWUzMTEwOWZkZDcxMGJjMWYxZjRmOTIyY2VkYWVm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-10-20T02:03:51Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-10-20T02:04:39Z"
      },
      "message": "Merge #14509: [0.17] doc: use SegWit in getblocktemplate example\n\nf7dbcaa72f [doc] getblocktemplate: use SegWit in example (Sjors Provoost)\n\nPull request description:\n\n  Backport of #14472\n\nTree-SHA512: ac0863b5f04abe2cbdbb44f376094aa6c224aecd6d3a87689a2bb5a939cb18503eab6e33bfb9814dd2129ddf1dae0118054afc8eb4c438bd390c172defab343b",
      "tree": {
        "sha": "f276a8c979c3560f73f6a52b98a1c135725b2cca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f276a8c979c3560f73f6a52b98a1c135725b2cca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1b5af2c177ee31109fdd710bc1f1f4f922cedaef",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEErGYmFy4AqCz/rolypjbpdjH3Z+AFAlvKjTcACgkQpjbpdjH3\nZ+CdxA//XEI7PSgnp2Duc+on2/APIi4i2VCM6kUs8rPk8/c68Nrg//lLTWtXWJja\n/84VVbjAsW459X7mrs14FxIaDrOnT3hf2MdrgCll2BXaSijH3YdOFTidGLEZCNUN\n7FC1z7JgBgfACTXgr+doOcQOhi6MCqoiDJfnAoI72IHEd0xPUpPD1hT5Elagv9/H\nA1LXwqlS629DmPh6X0wrtp/waHC0dSfzW6KR9+f+h15iXXmaHmRsaXTGNcYfZCqI\n2HrmHi5I8qGcFJp4zR9G7azWq34w5AO0WaV/SJXRFxLEPIuepvA8BJdhVXf2nKAX\nNZnwtK7zTN5L6AcMQ+K5iq8pGjK+VOYV10gOSWqd30yydU7M+/FAHwSAb2YMqyWY\nrr2eTQrwKMXwYwEJtzgzQAZojAJC/odIXHSV/mYcUrLGPcl0EqGdB3A+VjfCpzzH\nUkgHYP7orxtNEtebZGG5MEzhn6sIaeT0fo8z9LYkt974lON9OtBcHMeDHBzlZJVj\nMKjRy/m1NHoyokroq7uzoayAEQOZgcj3hx7AMH3foL25jKxKHT5MgZ0UQKMjd9Vm\nKPVTUbb9mTnrQYqWFDz9+7e7dpsSQ9fPuYWWF5khyClHPEV9OB1UvzqscsW8h8/4\nOIxj3EtWL71un+ekjYpdwPN2eToCGkwuiKwJCwkzZyojkaEE9HE=\n=vRUM\n-----END PGP SIGNATURE-----",
        "payload": "tree f276a8c979c3560f73f6a52b98a1c135725b2cca\nparent 5b47b8efd48d233a5f7c12d1d7713dcd2f616255\nparent f7dbcaa72f184aabdac2fa1435a504ed001acd09\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1540001031 -0700\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1540001079 -0700\n\nMerge #14509: [0.17] doc: use SegWit in getblocktemplate example\n\nf7dbcaa72f [doc] getblocktemplate: use SegWit in example (Sjors Provoost)\n\nPull request description:\n\n  Backport of #14472\n\nTree-SHA512: ac0863b5f04abe2cbdbb44f376094aa6c224aecd6d3a87689a2bb5a939cb18503eab6e33bfb9814dd2129ddf1dae0118054afc8eb4c438bd390c172defab343b\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b5af2c177ee31109fdd710bc1f1f4f922cedaef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1b5af2c177ee31109fdd710bc1f1f4f922cedaef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b5af2c177ee31109fdd710bc1f1f4f922cedaef/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5b47b8efd48d233a5f7c12d1d7713dcd2f616255",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b47b8efd48d233a5f7c12d1d7713dcd2f616255",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5b47b8efd48d233a5f7c12d1d7713dcd2f616255"
      },
      {
        "sha": "f7dbcaa72f184aabdac2fa1435a504ed001acd09",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7dbcaa72f184aabdac2fa1435a504ed001acd09",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f7dbcaa72f184aabdac2fa1435a504ed001acd09"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "9da3c1493b1e65c8e05d3ed3511be19f19ea4ad7",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b5af2c177ee31109fdd710bc1f1f4f922cedaef/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b5af2c177ee31109fdd710bc1f1f4f922cedaef/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=1b5af2c177ee31109fdd710bc1f1f4f922cedaef",
        "patch": "@@ -361,8 +361,8 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n             \"}\\n\"\n \n             \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getblocktemplate\", \"\")\n-            + HelpExampleRpc(\"getblocktemplate\", \"\")\n+            + HelpExampleCli(\"getblocktemplate\", \"{\\\"rules\\\": [\\\"segwit\\\"]}\")\n+            + HelpExampleRpc(\"getblocktemplate\", \"{\\\"rules\\\": [\\\"segwit\\\"]}\")\n          );\n \n     LOCK(cs_main);"
      }
    ]
  },
  {
    "sha": "06544faff0164051d2654d6aabb86f555fd2e86b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNjU0NGZhZmYwMTY0MDUxZDI2NTRkNmFhYmI4NmY1NTVmZDJlODZi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-08-21T23:23:21Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-25T02:01:31Z"
      },
      "message": "qa: Add TestNode::assert_debug_log\n\nGithub-Pull: #14024\nRebased-From: fa3e9f7627784ee00980590e5bf044a0e1249999",
      "tree": {
        "sha": "432e97ff9e6e406c376eb634acae18eb5041d67e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/432e97ff9e6e406c376eb634acae18eb5041d67e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/06544faff0164051d2654d6aabb86f555fd2e86b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06544faff0164051d2654d6aabb86f555fd2e86b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/06544faff0164051d2654d6aabb86f555fd2e86b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06544faff0164051d2654d6aabb86f555fd2e86b/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5b47b8efd48d233a5f7c12d1d7713dcd2f616255",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b47b8efd48d233a5f7c12d1d7713dcd2f616255",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5b47b8efd48d233a5f7c12d1d7713dcd2f616255"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 25,
      "deletions": 2
    },
    "files": [
      {
        "sha": "12bc62131f6579c83f3054acf55917200d50f93e",
        "filename": "test/functional/p2p_invalid_tx.py",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06544faff0164051d2654d6aabb86f555fd2e86b/test/functional/p2p_invalid_tx.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06544faff0164051d2654d6aabb86f555fd2e86b/test/functional/p2p_invalid_tx.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_tx.py?ref=06544faff0164051d2654d6aabb86f555fd2e86b",
        "patch": "@@ -136,11 +136,16 @@ def run_test(self):\n \n         # restart node with sending BIP61 messages disabled, check that it disconnects without sending the reject message\n         self.log.info('Test a transaction that is rejected, with BIP61 disabled')\n-        self.restart_node(0, ['-enablebip61=0','-persistmempool=0'])\n+        self.restart_node(0, ['-enablebip61=0', '-persistmempool=0'])\n         self.reconnect_p2p(num_connections=1)\n-        node.p2p.send_txs_and_test([tx1], node, success=False, expect_disconnect=True)\n+        with node.assert_debug_log(expected_msgs=[\n+                \"{} from peer=0 was not accepted: mandatory-script-verify-flag-failed (Invalid OP_IF construction) (code 16)\".format(tx1.hash),\n+                \"disconnecting peer=0\",\n+        ]):\n+            node.p2p.send_txs_and_test([tx1], node, success=False, expect_disconnect=True)\n         # send_txs_and_test will have waited for disconnect, so we can safely check that no reject has been received\n         assert_equal(node.p2p.reject_code_received, None)\n \n+\n if __name__ == '__main__':\n     InvalidTxRequestTest().main()"
      },
      {
        "sha": "a831fdcd5d2b606f6fbb8396d31f66aaed4a90e6",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06544faff0164051d2654d6aabb86f555fd2e86b/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06544faff0164051d2654d6aabb86f555fd2e86b/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=06544faff0164051d2654d6aabb86f555fd2e86b",
        "patch": "@@ -4,6 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Class for bitcoind node under test\"\"\"\n \n+import contextlib\n import decimal\n import errno\n from enum import Enum\n@@ -229,6 +230,23 @@ def is_node_stopped(self):\n     def wait_until_stopped(self, timeout=BITCOIND_PROC_WAIT_TIMEOUT):\n         wait_until(self.is_node_stopped, timeout=timeout)\n \n+    @contextlib.contextmanager\n+    def assert_debug_log(self, expected_msgs):\n+        debug_log = os.path.join(self.datadir, 'regtest', 'debug.log')\n+        with open(debug_log, encoding='utf-8') as dl:\n+            dl.seek(0, 2)\n+            prev_size = dl.tell()\n+        try:\n+            yield\n+        finally:\n+            with open(debug_log, encoding='utf-8') as dl:\n+                dl.seek(prev_size)\n+                log = dl.read()\n+            print_log = \" - \" + \"\\n - \".join(log.splitlines())\n+            for expected_msg in expected_msgs:\n+                if re.search(re.escape(expected_msg), log, flags=re.MULTILINE) is None:\n+                    self._raise_assertion_error('Expected message \"{}\" does not partially match log:\\n\\n{}\\n\\n'.format(expected_msg, print_log))\n+\n     def assert_start_raises_init_error(self, extra_args=None, expected_msg=None, match=ErrorMatch.FULL_TEXT, *args, **kwargs):\n         \"\"\"Attempt to start the node and expect it to raise an error.\n "
      }
    ]
  },
  {
    "sha": "b72fbabe17a8639ffab2ef02ff84d0ee66c30fae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNzJmYmFiZTE3YTg2MzlmZmFiMmVmMDJmZjg0ZDBlZTY2YzMwZmFl",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2018-09-13T20:59:31Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-25T02:01:40Z"
      },
      "message": "[qa] Use correct python index slices in example test\n\nGithub-Pull: #14215\nRebased-From: 9dcb6763fb6851df6572e75278a41029fbfe8809",
      "tree": {
        "sha": "6b50d1bd8ac5071364343d80fbe3236e056dffd1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6b50d1bd8ac5071364343d80fbe3236e056dffd1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b72fbabe17a8639ffab2ef02ff84d0ee66c30fae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b72fbabe17a8639ffab2ef02ff84d0ee66c30fae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b72fbabe17a8639ffab2ef02ff84d0ee66c30fae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b72fbabe17a8639ffab2ef02ff84d0ee66c30fae/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "06544faff0164051d2654d6aabb86f555fd2e86b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06544faff0164051d2654d6aabb86f555fd2e86b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/06544faff0164051d2654d6aabb86f555fd2e86b"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "3bdb3b4f1ca2ca83cd961b187ae46e7fbb446a6b",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b72fbabe17a8639ffab2ef02ff84d0ee66c30fae/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b72fbabe17a8639ffab2ef02ff84d0ee66c30fae/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=b72fbabe17a8639ffab2ef02ff84d0ee66c30fae",
        "patch": "@@ -111,7 +111,7 @@ def setup_network(self):\n         # sync_all() should not include node2, since we're not expecting it to\n         # sync.\n         connect_nodes(self.nodes[0], 1)\n-        self.sync_all([self.nodes[0:1]])\n+        self.sync_all([self.nodes[0:2]])\n \n     # Use setup_nodes() to customize the node start behaviour (for example if\n     # you don't want to start all nodes at the start of the test).\n@@ -135,7 +135,7 @@ def run_test(self):\n \n         # Generating a block on one of the nodes will get us out of IBD\n         blocks = [int(self.nodes[0].generate(nblocks=1)[0], 16)]\n-        self.sync_all([self.nodes[0:1]])\n+        self.sync_all([self.nodes[0:2]])\n \n         # Notice above how we called an RPC by calling a method with the same\n         # name on the node object. Notice also how we used a keyword argument"
      }
    ]
  },
  {
    "sha": "7ff32a6b985054558851fc451879309a56753bdd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZmYzMmE2Yjk4NTA1NDU1ODg1MWZjNDUxODc5MzA5YTU2NzUzYmRk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-08-24T18:02:43Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-25T02:01:47Z"
      },
      "message": "qa: Add some actual witness in rpc_rawtransaction\n\nGithub-Pull: #14052\nRebased-From: fae040010deda9404b15b214cec2a099fb831253",
      "tree": {
        "sha": "0657c6a563d9359550fe2124b24376c030e062a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0657c6a563d9359550fe2124b24376c030e062a0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7ff32a6b985054558851fc451879309a56753bdd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ff32a6b985054558851fc451879309a56753bdd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7ff32a6b985054558851fc451879309a56753bdd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ff32a6b985054558851fc451879309a56753bdd/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b72fbabe17a8639ffab2ef02ff84d0ee66c30fae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b72fbabe17a8639ffab2ef02ff84d0ee66c30fae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b72fbabe17a8639ffab2ef02ff84d0ee66c30fae"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8169f2b9814411e128811883aee86315ffbf08ed",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ff32a6b985054558851fc451879309a56753bdd/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ff32a6b985054558851fc451879309a56753bdd/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=7ff32a6b985054558851fc451879309a56753bdd",
        "patch": "@@ -358,7 +358,7 @@ def run_test(self):\n \n         # decoderawtransaction tests\n         # witness transaction\n-        encrawtx = \"010000000001010000000000000072c1a6a246ae63f74f931e8365e15a089c68d61900000000000000000000ffffffff0100e1f50500000000000000000000\"\n+        encrawtx = \"010000000001010000000000000072c1a6a246ae63f74f931e8365e15a089c68d61900000000000000000000ffffffff0100e1f50500000000000102616100000000\"\n         decrawtx = self.nodes[0].decoderawtransaction(encrawtx, True) # decode as witness transaction\n         assert_equal(decrawtx['vout'][0]['value'], Decimal('1.00000000'))\n         assert_raises_rpc_error(-22, 'TX decode failed', self.nodes[0].decoderawtransaction, encrawtx, False) # force decode as non-witness transaction"
      }
    ]
  },
  {
    "sha": "96dc93686237facede4b53e4962295ffd709c85e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NmRjOTM2ODYyMzdmYWNlZGU0YjUzZTQ5NjIyOTVmZmQ3MDljODVl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-08-29T15:50:04Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-25T02:01:54Z"
      },
      "message": "scripted-diff: Pass node into p2p_segwit acceptance tests\n\n-BEGIN VERIFY SCRIPT-\nsed -i --regexp-extended -e 's/(test_witness_block|test_transaction_acceptance)\\((self\\.nodes\\[.\\])\\.rpc/\\1(\\2/g' test/functional/p2p_segwit.py\n-END VERIFY SCRIPT-\n\nGithub-Pull: #14101\nRebased-From: 749ba35e7c9fbc21dbea27fd1be102b91313d132",
      "tree": {
        "sha": "769e47f25e95afd8f57b644e2a68b254200c1519",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/769e47f25e95afd8f57b644e2a68b254200c1519"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/96dc93686237facede4b53e4962295ffd709c85e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96dc93686237facede4b53e4962295ffd709c85e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/96dc93686237facede4b53e4962295ffd709c85e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96dc93686237facede4b53e4962295ffd709c85e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7ff32a6b985054558851fc451879309a56753bdd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ff32a6b985054558851fc451879309a56753bdd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7ff32a6b985054558851fc451879309a56753bdd"
      }
    ],
    "stats": {
      "total": 214,
      "additions": 107,
      "deletions": 107
    },
    "files": [
      {
        "sha": "82eacc84f4b02726e32616a81666410c86ff4537",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 107,
        "deletions": 107,
        "changes": 214,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96dc93686237facede4b53e4962295ffd709c85e/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96dc93686237facede4b53e4962295ffd709c85e/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=96dc93686237facede4b53e4962295ffd709c85e",
        "patch": "@@ -349,7 +349,7 @@ def test_unnecessary_witness_before_segwit_activation(self):\n         self.update_witness_block_with_transactions(block, [tx])\n         # Sending witness data before activation is not allowed (anti-spam\n         # rule).\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n         wait_until(lambda: 'reject' in self.test_node.last_message and self.test_node.last_message[\"reject\"].reason ==  b\"unexpected-witness\")\n \n         # But it should not be permanently marked bad...\n@@ -380,20 +380,20 @@ def test_block_relay(self):\n \n         self.test_node.announce_block_and_wait_for_getdata(block1, use_header=False)\n         assert(self.test_node.last_message[\"getdata\"].inv[0].type == blocktype)\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block1, True)\n+        test_witness_block(self.nodes[0], self.test_node, block1, True)\n \n         block2 = self.build_next_block(version=4)\n         block2.solve()\n \n         self.test_node.announce_block_and_wait_for_getdata(block2, use_header=True)\n         assert(self.test_node.last_message[\"getdata\"].inv[0].type == blocktype)\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block2, True)\n+        test_witness_block(self.nodes[0], self.test_node, block2, True)\n \n         block3 = self.build_next_block(version=(VB_TOP_BITS | (1 << 15)))\n         block3.solve()\n         self.test_node.announce_block_and_wait_for_getdata(block3, use_header=True)\n         assert(self.test_node.last_message[\"getdata\"].inv[0].type == blocktype)\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block3, True)\n+        test_witness_block(self.nodes[0], self.test_node, block3, True)\n \n         # Check that we can getdata for witness blocks or regular blocks,\n         # and the right thing happens.\n@@ -423,7 +423,7 @@ def test_block_relay(self):\n             # This gives us a witness commitment.\n             assert(len(block.vtx[0].wit.vtxinwit) == 1)\n             assert(len(block.vtx[0].wit.vtxinwit[0].scriptWitness.stack) == 1)\n-            test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+            test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n             # Now try to retrieve it...\n             rpc_block = self.nodes[0].getblock(block.hash, False)\n             non_wit_block = self.test_node.request_block(block.sha256, 2)\n@@ -640,11 +640,11 @@ def test_witness_tx_relay_before_segwit_activation(self):\n         # its from)\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n         assert_equal(len(self.nodes[1].getrawmempool()), 0)\n-        test_transaction_acceptance(self.nodes[0].rpc, self.old_node, tx, with_witness=True, accepted=False)\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=True, accepted=False)\n+        test_transaction_acceptance(self.nodes[0], self.old_node, tx, with_witness=True, accepted=False)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=True, accepted=False)\n \n         # But eliminating the witness should fix it\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=False, accepted=True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=False, accepted=True)\n \n         # Cleanup: mine the first transaction and update utxo\n         self.nodes[0].generate(1)\n@@ -674,7 +674,7 @@ def test_standardness_v0(self):\n         p2sh_tx.rehash()\n \n         # Mine it on test_node to create the confirmed output.\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2sh_tx, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, p2sh_tx, with_witness=True, accepted=True)\n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n \n@@ -689,7 +689,7 @@ def test_standardness_v0(self):\n \n         # This is always accepted, since the mempool policy is to consider segwit as always active\n         # and thus allow segwit outputs\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, tx, with_witness=True, accepted=True)\n \n         # Now create something that looks like a P2PKH output. This won't be spendable.\n         script_pubkey = CScript([OP_0, hash160(witness_hash)])\n@@ -701,7 +701,7 @@ def test_standardness_v0(self):\n         tx2.wit.vtxinwit[0].scriptWitness.stack = [witness_program]\n         tx2.rehash()\n \n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx2, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, tx2, with_witness=True, accepted=True)\n \n         # Now update self.utxo for later tests.\n         tx3 = CTransaction()\n@@ -723,7 +723,7 @@ def test_standardness_v0(self):\n             tx3.vout = [tx3_out]\n             tx3.rehash()\n             assert_equal(self.nodes[0].testmempoolaccept([bytes_to_hex_str(tx3.serialize_with_witness())]), [{'txid': tx3.hash, 'allowed': True}])\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx3, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx3, with_witness=True, accepted=True)\n \n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n@@ -760,10 +760,10 @@ def test_p2sh_witness(self):\n         tx.rehash()\n \n         # Verify mempool acceptance and block validity\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=False, accepted=True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=False, accepted=True)\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True, with_witness=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True, with_witness=True)\n         sync_blocks(self.nodes)\n \n         # Now test attempts to spend the output.\n@@ -777,12 +777,12 @@ def test_p2sh_witness(self):\n         # will require a witness to spend a witness program regardless of\n         # segwit activation.  Note that older bitcoind's that are not\n         # segwit-aware would also reject this for failing CLEANSTACK.\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, spend_tx, with_witness=False, accepted=False)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, spend_tx, with_witness=False, accepted=False)\n \n         # Try to put the witness script in the script_sig, should also fail.\n         spend_tx.vin[0].script_sig = CScript([p2wsh_pubkey, b'a'])\n         spend_tx.rehash()\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, spend_tx, with_witness=False, accepted=False)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, spend_tx, with_witness=False, accepted=False)\n \n         # Now put the witness script in the witness, should succeed after\n         # segwit activates.\n@@ -792,15 +792,15 @@ def test_p2sh_witness(self):\n         spend_tx.wit.vtxinwit[0].scriptWitness.stack = [b'a', witness_program]\n \n         # Verify mempool acceptance\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, spend_tx, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, spend_tx, with_witness=True, accepted=True)\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [spend_tx])\n \n         # If we're after activation, then sending this with witnesses should be valid.\n         # This no longer works before activation, because SCRIPT_VERIFY_WITNESS\n         # is always set.\n         # TODO: rewrite this test to make clear that it only works after activation.\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Update self.utxo\n         self.utxo.pop(0)\n@@ -821,7 +821,7 @@ def test_witness_commitments(self):\n         assert(msg_witness_block(block).serialize() != msg_block(block).serialize())\n \n         # This empty block should be valid.\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Try to tweak the nonce\n         block_2 = self.build_next_block()\n@@ -832,7 +832,7 @@ def test_witness_commitments(self):\n         assert(block_2.vtx[0].vout[-1] != block.vtx[0].vout[-1])\n \n         # This should also be valid.\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block_2, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block_2, accepted=True)\n \n         # Now test commitments with actual transactions\n         tx = CTransaction()\n@@ -864,7 +864,7 @@ def test_witness_commitments(self):\n         block_3.rehash()\n         block_3.solve()\n \n-        test_witness_block(self.nodes[0].rpc, self.test_node, block_3, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block_3, accepted=False)\n \n         # Add a different commitment with different nonce, but in the\n         # right location, and with some funds burned(!).\n@@ -878,7 +878,7 @@ def test_witness_commitments(self):\n         block_3.rehash()\n         assert(len(block_3.vtx[0].vout) == 4)  # 3 OP_returns\n         block_3.solve()\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block_3, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block_3, accepted=True)\n \n         # Finally test that a block with no witness transactions can\n         # omit the commitment.\n@@ -890,7 +890,7 @@ def test_witness_commitments(self):\n         block_4.vtx.append(tx3)\n         block_4.hashMerkleRoot = block_4.calc_merkle_root()\n         block_4.solve()\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block_4, with_witness=False, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block_4, with_witness=False, accepted=True)\n \n         # Update available utxo's for use in later test.\n         self.utxo.pop(0)\n@@ -930,11 +930,11 @@ def test_block_malleability(self):\n         # Change the nonce -- should not cause the block to be permanently\n         # failed\n         block.vtx[0].wit.vtxinwit[0].scriptWitness.stack = [ser_uint256(1)]\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Changing the witness reserved value doesn't change the block hash\n         block.vtx[0].wit.vtxinwit[0].scriptWitness.stack = [ser_uint256(0)]\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n     @subtest\n     def test_witness_block_size(self):\n@@ -998,7 +998,7 @@ def test_witness_block_size(self):\n         # limit\n         assert(len(block.serialize(True)) > 2 * 1024 * 1024)\n \n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Now resize the second transaction to make the block fit.\n         cur_length = len(block.vtx[-1].wit.vtxinwit[0].scriptWitness.stack[0])\n@@ -1008,7 +1008,7 @@ def test_witness_block_size(self):\n         block.solve()\n         assert(get_virtual_size(block) == MAX_BLOCK_BASE_SIZE)\n \n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Update available utxo's\n         self.utxo.pop(0)\n@@ -1071,7 +1071,7 @@ def test_extra_witness_data(self):\n         self.update_witness_block_with_transactions(block, [tx])\n \n         # Extra witness data should not be allowed.\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Try extra signature data.  Ok if we're not spending a witness output.\n         block.vtx[1].wit.vtxinwit = []\n@@ -1080,7 +1080,7 @@ def test_extra_witness_data(self):\n         add_witness_commitment(block)\n         block.solve()\n \n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Now try extra witness/signature data on an input that DOES require a\n         # witness\n@@ -1096,7 +1096,7 @@ def test_extra_witness_data(self):\n         self.update_witness_block_with_transactions(block, [tx2])\n \n         # This has extra witness data, so it should fail.\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Now get rid of the extra witness, but add extra scriptSig data\n         tx2.vin[0].scriptSig = CScript([OP_TRUE])\n@@ -1108,7 +1108,7 @@ def test_extra_witness_data(self):\n         block.solve()\n \n         # This has extra signature data for a witness input, so it should fail.\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Now get rid of the extra scriptsig on the witness input, and verify\n         # success (even with extra scriptsig data in the non-witness input)\n@@ -1117,7 +1117,7 @@ def test_extra_witness_data(self):\n         add_witness_commitment(block)\n         block.solve()\n \n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Update utxo for later tests\n         self.utxo.pop(0)\n@@ -1147,14 +1147,14 @@ def test_max_witness_push_length(self):\n         tx2.rehash()\n \n         self.update_witness_block_with_transactions(block, [tx, tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Now reduce the length of the stack element\n         tx2.wit.vtxinwit[0].scriptWitness.stack[0] = b'a' * (MAX_SCRIPT_ELEMENT_SIZE)\n \n         add_witness_commitment(block)\n         block.solve()\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Update the utxo for later tests\n         self.utxo.pop()\n@@ -1188,7 +1188,7 @@ def test_max_witness_program_length(self):\n \n         self.update_witness_block_with_transactions(block, [tx, tx2])\n \n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Try again with one less byte in the witness program\n         witness_program = CScript([b'a' * 520] * 19 + [OP_DROP] * 62 + [OP_TRUE])\n@@ -1203,7 +1203,7 @@ def test_max_witness_program_length(self):\n         tx2.rehash()\n         block.vtx = [block.vtx[0]]\n         self.update_witness_block_with_transactions(block, [tx, tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         self.utxo.pop()\n         self.utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n@@ -1227,7 +1227,7 @@ def test_witness_input_length(self):\n \n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Try various ways to spend tx that should all break.\n         # This \"broken\" transaction serializer will not normalize\n@@ -1262,15 +1262,15 @@ def serialize_with_witness(self):\n \n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Now try using a too short vtxinwit\n         tx2.wit.vtxinwit.pop()\n         tx2.wit.vtxinwit.pop()\n \n         block.vtx = [block.vtx[0]]\n         self.update_witness_block_with_transactions(block, [tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Now make one of the intermediate witnesses be incorrect\n         tx2.wit.vtxinwit.append(CTxInWitness())\n@@ -1279,13 +1279,13 @@ def serialize_with_witness(self):\n \n         block.vtx = [block.vtx[0]]\n         self.update_witness_block_with_transactions(block, [tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Fix the broken witness and the block should be accepted.\n         tx2.wit.vtxinwit[5].scriptWitness.stack = [b'a', witness_program]\n         block.vtx = [block.vtx[0]]\n         self.update_witness_block_with_transactions(block, [tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         self.utxo.pop()\n         self.utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n@@ -1314,11 +1314,11 @@ def test_tx_relay_after_segwit_activation(self):\n         # Verify that unnecessary witnesses are rejected.\n         self.test_node.announce_tx_and_wait_for_getdata(tx)\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=True, accepted=False)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=True, accepted=False)\n \n         # Verify that removing the witness succeeds.\n         self.test_node.announce_tx_and_wait_for_getdata(tx)\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=False, accepted=True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=False, accepted=True)\n \n         # Now try to add extra witness data to a valid witness tx.\n         witness_program = CScript([OP_TRUE])\n@@ -1343,24 +1343,24 @@ def test_tx_relay_after_segwit_activation(self):\n \n         # Node will not be blinded to the transaction\n         self.std_node.announce_tx_and_wait_for_getdata(tx3)\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx3, True, False, b'tx-size')\n+        test_transaction_acceptance(self.nodes[1], self.std_node, tx3, True, False, b'tx-size')\n         self.std_node.announce_tx_and_wait_for_getdata(tx3)\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx3, True, False, b'tx-size')\n+        test_transaction_acceptance(self.nodes[1], self.std_node, tx3, True, False, b'tx-size')\n \n         # Remove witness stuffing, instead add extra witness push on stack\n         tx3.vout[0] = CTxOut(tx2.vout[0].nValue - 1000, CScript([OP_TRUE, OP_DROP] * 15 + [OP_TRUE]))\n         tx3.wit.vtxinwit[0].scriptWitness.stack = [CScript([CScriptNum(1)]), witness_program]\n         tx3.rehash()\n \n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx2, with_witness=True, accepted=True)\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx3, with_witness=True, accepted=False)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx2, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx3, with_witness=True, accepted=False)\n \n         # Get rid of the extra witness, and verify acceptance.\n         tx3.wit.vtxinwit[0].scriptWitness.stack = [witness_program]\n         # Also check that old_node gets a tx announcement, even though this is\n         # a witness transaction.\n         self.old_node.wait_for_inv([CInv(1, tx2.sha256)])  # wait until tx2 was inv'ed\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx3, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx3, with_witness=True, accepted=True)\n         self.old_node.wait_for_inv([CInv(1, tx3.sha256)])\n \n         # Test that getrawtransaction returns correct witness information\n@@ -1400,7 +1400,7 @@ def test_segwit_versions(self):\n             tx.rehash()\n             block = self.build_next_block()\n             self.update_witness_block_with_transactions(block, [tx])\n-            test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+            test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n             self.utxo.pop(0)\n             for i in range(NUM_SEGWIT_VERSIONS):\n                 self.utxo.append(UTXO(tx.sha256, i, split_value))\n@@ -1417,8 +1417,8 @@ def test_segwit_versions(self):\n             tx.vin = [CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\")]\n             tx.vout = [CTxOut(self.utxo[0].nValue - 1000, script_pubkey)]\n             tx.rehash()\n-            test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx, with_witness=True, accepted=False)\n-            test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=True, accepted=True)\n+            test_transaction_acceptance(self.nodes[1], self.std_node, tx, with_witness=True, accepted=False)\n+            test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=True, accepted=True)\n             self.utxo.pop(0)\n             temp_utxo.append(UTXO(tx.sha256, 0, tx.vout[0].nValue))\n \n@@ -1437,8 +1437,8 @@ def test_segwit_versions(self):\n         tx2.rehash()\n         # Gets accepted to test_node, because standardness of outputs isn't\n         # checked with fRequireStandard\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx2, with_witness=True, accepted=True)\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx2, with_witness=True, accepted=False)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx2, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, tx2, with_witness=True, accepted=False)\n         temp_utxo.pop()  # last entry in temp_utxo was the output we just spent\n         temp_utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n \n@@ -1454,15 +1454,15 @@ def test_segwit_versions(self):\n         tx3.rehash()\n         # Spending a higher version witness output is not allowed by policy,\n         # even with fRequireStandard=false.\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx3, with_witness=True, accepted=False)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx3, with_witness=True, accepted=False)\n         self.test_node.sync_with_ping()\n         with mininode_lock:\n             assert(b\"reserved for soft-fork upgrades\" in self.test_node.last_message[\"reject\"].reason)\n \n         # Building a block with the transaction must be valid, however.\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx2, tx3])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n         sync_blocks(self.nodes)\n \n         # Add utxo to our list\n@@ -1480,7 +1480,7 @@ def test_premature_coinbase_witness_spend(self):\n         # This next line will rehash the coinbase and update the merkle\n         # root, and solve.\n         self.update_witness_block_with_transactions(block, [])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         spend_tx = CTransaction()\n         spend_tx.vin = [CTxIn(COutPoint(block.vtx[0].sha256, 0), b\"\")]\n@@ -1494,13 +1494,13 @@ def test_premature_coinbase_witness_spend(self):\n         sync_blocks(self.nodes)\n         block2 = self.build_next_block()\n         self.update_witness_block_with_transactions(block2, [spend_tx])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block2, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block2, accepted=False)\n \n         # Advancing one more block should allow the spend.\n         self.nodes[0].generate(1)\n         block2 = self.build_next_block()\n         self.update_witness_block_with_transactions(block2, [spend_tx])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block2, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block2, accepted=True)\n         sync_blocks(self.nodes)\n \n     @subtest\n@@ -1532,7 +1532,7 @@ def test_uncompressed_pubkey(self):\n         # Confirm it in a block.\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Now try to spend it. Send it to a P2WSH output, which we'll\n         # use in the next test.\n@@ -1551,11 +1551,11 @@ def test_uncompressed_pubkey(self):\n         tx2.rehash()\n \n         # Should fail policy test.\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx2, True, False, b'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx2, True, False, b'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n         # But passes consensus.\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Test 2: P2WSH\n         # Try to spend the P2WSH output created in last test.\n@@ -1571,11 +1571,11 @@ def test_uncompressed_pubkey(self):\n         sign_p2pk_witness_input(witness_program, tx3, 0, SIGHASH_ALL, tx2.vout[0].nValue, key)\n \n         # Should fail policy test.\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx3, True, False, b'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx3, True, False, b'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n         # But passes consensus.\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx3])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Test 3: P2SH(P2WSH)\n         # Try to spend the P2SH output created in the last test.\n@@ -1588,10 +1588,10 @@ def test_uncompressed_pubkey(self):\n         sign_p2pk_witness_input(witness_program, tx4, 0, SIGHASH_ALL, tx3.vout[0].nValue, key)\n \n         # Should fail policy test.\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx4, True, False, b'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx4, True, False, b'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx4])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Test 4: Uncompressed pubkeys should still be valid in non-segwit\n         # transactions.\n@@ -1603,10 +1603,10 @@ def test_uncompressed_pubkey(self):\n         tx5.vin[0].scriptSig = CScript([signature, pubkey])\n         tx5.rehash()\n         # Should pass policy and consensus.\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx5, True, True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx5, True, True)\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx5])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n         self.utxo.append(UTXO(tx5.sha256, 0, tx5.vout[0].nValue))\n \n     @subtest\n@@ -1626,11 +1626,11 @@ def test_signature_version_1(self):\n         tx.vout.append(CTxOut(self.utxo[0].nValue - 1000, script_pubkey))\n         tx.rehash()\n \n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=True, accepted=True)\n         # Mine this transaction in preparation for following tests.\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n         sync_blocks(self.nodes)\n         self.utxo.pop(0)\n \n@@ -1647,19 +1647,19 @@ def test_signature_version_1(self):\n                 # Too-large input value\n                 sign_p2pk_witness_input(witness_program, tx, 0, hashtype, prev_utxo.nValue + 1, key)\n                 self.update_witness_block_with_transactions(block, [tx])\n-                test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+                test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n                 # Too-small input value\n                 sign_p2pk_witness_input(witness_program, tx, 0, hashtype, prev_utxo.nValue - 1, key)\n                 block.vtx.pop()  # remove last tx\n                 self.update_witness_block_with_transactions(block, [tx])\n-                test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+                test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n                 # Now try correct value\n                 sign_p2pk_witness_input(witness_program, tx, 0, hashtype, prev_utxo.nValue, key)\n                 block.vtx.pop()\n                 self.update_witness_block_with_transactions(block, [tx])\n-                test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+                test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n                 prev_utxo = UTXO(tx.sha256, 0, tx.vout[0].nValue)\n \n@@ -1683,7 +1683,7 @@ def test_signature_version_1(self):\n \n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         block = self.build_next_block()\n         used_sighash_single_out_of_bounds = False\n@@ -1725,15 +1725,15 @@ def test_signature_version_1(self):\n             # Test the block periodically, if we're close to maxblocksize\n             if (get_virtual_size(block) > MAX_BLOCK_BASE_SIZE - 1000):\n                 self.update_witness_block_with_transactions(block, [])\n-                test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+                test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n                 block = self.build_next_block()\n \n         if (not used_sighash_single_out_of_bounds):\n             self.log.info(\"WARNING: this test run didn't attempt SIGHASH_SINGLE with out-of-bounds index value\")\n         # Test the transactions we've added to the block\n         if (len(block.vtx) > 1):\n             self.update_witness_block_with_transactions(block, [])\n-            test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+            test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Now test witness version 0 P2PKH transactions\n         pubkeyhash = hash160(pubkey)\n@@ -1755,7 +1755,7 @@ def test_signature_version_1(self):\n         tx2.vin[0].scriptSig = CScript([signature, pubkey])\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx, tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Move the signature to the witness.\n         block.vtx.pop()\n@@ -1765,7 +1765,7 @@ def test_signature_version_1(self):\n         tx2.rehash()\n \n         self.update_witness_block_with_transactions(block, [tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         temp_utxos.pop(0)\n \n@@ -1786,7 +1786,7 @@ def test_signature_version_1(self):\n             index += 1\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         for i in range(len(tx.vout)):\n             self.utxo.append(UTXO(tx.sha256, i, tx.vout[i].nValue))\n@@ -1808,7 +1808,7 @@ def test_non_standard_witness_blinding(self):\n         tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n         tx.vout.append(CTxOut(self.utxo[0].nValue - 1000, script_pubkey))\n         tx.rehash()\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, False, True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx, False, True)\n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n \n@@ -1825,18 +1825,18 @@ def test_non_standard_witness_blinding(self):\n         tx2.rehash()\n         # This will be rejected due to a policy check:\n         # No witness is allowed, since it is not a witness program but a p2sh program\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx2, True, False, b'bad-witness-nonstandard')\n+        test_transaction_acceptance(self.nodes[1], self.std_node, tx2, True, False, b'bad-witness-nonstandard')\n \n         # If we send without witness, it should be accepted.\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx2, False, True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, tx2, False, True)\n \n         # Now create a new anyone-can-spend utxo for the next test.\n         tx3 = CTransaction()\n         tx3.vin.append(CTxIn(COutPoint(tx2.sha256, 0), CScript([p2sh_program])))\n         tx3.vout.append(CTxOut(tx2.vout[0].nValue - 1000, CScript([OP_TRUE, OP_DROP] * 15 + [OP_TRUE])))\n         tx3.rehash()\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx2, False, True)\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx3, False, True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx2, False, True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx3, False, True)\n \n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n@@ -1872,7 +1872,7 @@ def test_non_standard_witness(self):\n             tx.vout.append(CTxOut(outputvalue, CScript([OP_HASH160, p2sh, OP_EQUAL])))\n         tx.rehash()\n         txid = tx.sha256\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=False, accepted=True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=False, accepted=True)\n \n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n@@ -1897,45 +1897,45 @@ def test_non_standard_witness(self):\n         # Testing native P2WSH\n         # Witness stack size, excluding witnessScript, over 100 is non-standard\n         p2wsh_txs[0].wit.vtxinwit[0].scriptWitness.stack = [pad] * 101 + [scripts[0]]\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2wsh_txs[0], True, False, b'bad-witness-nonstandard')\n+        test_transaction_acceptance(self.nodes[1], self.std_node, p2wsh_txs[0], True, False, b'bad-witness-nonstandard')\n         # Non-standard nodes should accept\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2wsh_txs[0], True, True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, p2wsh_txs[0], True, True)\n \n         # Stack element size over 80 bytes is non-standard\n         p2wsh_txs[1].wit.vtxinwit[0].scriptWitness.stack = [pad * 81] * 100 + [scripts[1]]\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2wsh_txs[1], True, False, b'bad-witness-nonstandard')\n+        test_transaction_acceptance(self.nodes[1], self.std_node, p2wsh_txs[1], True, False, b'bad-witness-nonstandard')\n         # Non-standard nodes should accept\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2wsh_txs[1], True, True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, p2wsh_txs[1], True, True)\n         # Standard nodes should accept if element size is not over 80 bytes\n         p2wsh_txs[1].wit.vtxinwit[0].scriptWitness.stack = [pad * 80] * 100 + [scripts[1]]\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2wsh_txs[1], True, True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, p2wsh_txs[1], True, True)\n \n         # witnessScript size at 3600 bytes is standard\n         p2wsh_txs[2].wit.vtxinwit[0].scriptWitness.stack = [pad, pad, scripts[2]]\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2wsh_txs[2], True, True)\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2wsh_txs[2], True, True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, p2wsh_txs[2], True, True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, p2wsh_txs[2], True, True)\n \n         # witnessScript size at 3601 bytes is non-standard\n         p2wsh_txs[3].wit.vtxinwit[0].scriptWitness.stack = [pad, pad, pad, scripts[3]]\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2wsh_txs[3], True, False, b'bad-witness-nonstandard')\n+        test_transaction_acceptance(self.nodes[1], self.std_node, p2wsh_txs[3], True, False, b'bad-witness-nonstandard')\n         # Non-standard nodes should accept\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2wsh_txs[3], True, True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, p2wsh_txs[3], True, True)\n \n         # Repeating the same tests with P2SH-P2WSH\n         p2sh_txs[0].wit.vtxinwit[0].scriptWitness.stack = [pad] * 101 + [scripts[0]]\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2sh_txs[0], True, False, b'bad-witness-nonstandard')\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2sh_txs[0], True, True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, p2sh_txs[0], True, False, b'bad-witness-nonstandard')\n+        test_transaction_acceptance(self.nodes[0], self.test_node, p2sh_txs[0], True, True)\n         p2sh_txs[1].wit.vtxinwit[0].scriptWitness.stack = [pad * 81] * 100 + [scripts[1]]\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2sh_txs[1], True, False, b'bad-witness-nonstandard')\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2sh_txs[1], True, True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, p2sh_txs[1], True, False, b'bad-witness-nonstandard')\n+        test_transaction_acceptance(self.nodes[0], self.test_node, p2sh_txs[1], True, True)\n         p2sh_txs[1].wit.vtxinwit[0].scriptWitness.stack = [pad * 80] * 100 + [scripts[1]]\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2sh_txs[1], True, True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, p2sh_txs[1], True, True)\n         p2sh_txs[2].wit.vtxinwit[0].scriptWitness.stack = [pad, pad, scripts[2]]\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2sh_txs[2], True, True)\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2sh_txs[2], True, True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, p2sh_txs[2], True, True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, p2sh_txs[2], True, True)\n         p2sh_txs[3].wit.vtxinwit[0].scriptWitness.stack = [pad, pad, pad, scripts[3]]\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2sh_txs[3], True, False, b'bad-witness-nonstandard')\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2sh_txs[3], True, True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, p2sh_txs[3], True, False, b'bad-witness-nonstandard')\n+        test_transaction_acceptance(self.nodes[0], self.test_node, p2sh_txs[3], True, True)\n \n         self.nodes[0].generate(1)  # Mine and clean up the mempool of non-standard node\n         # Valid but non-standard transactions in a block should be accepted by standard node\n@@ -2011,7 +2011,7 @@ def test_witness_sigops(self):\n \n         block_1 = self.build_next_block()\n         self.update_witness_block_with_transactions(block_1, [tx])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block_1, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block_1, accepted=True)\n \n         tx2 = CTransaction()\n         # If we try to spend the first n-1 outputs from tx, that should be\n@@ -2028,7 +2028,7 @@ def test_witness_sigops(self):\n \n         block_2 = self.build_next_block()\n         self.update_witness_block_with_transactions(block_2, [tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block_2, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block_2, accepted=False)\n \n         # Try dropping the last input in tx2, and add an output that has\n         # too many sigops (contributing to legacy sigop count).\n@@ -2041,14 +2041,14 @@ def test_witness_sigops(self):\n         tx2.rehash()\n         block_3 = self.build_next_block()\n         self.update_witness_block_with_transactions(block_3, [tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block_3, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block_3, accepted=False)\n \n         # If we drop the last checksig in this output, the tx should succeed.\n         block_4 = self.build_next_block()\n         tx2.vout[-1].scriptPubKey = CScript([OP_CHECKSIG] * (checksig_count - 1))\n         tx2.rehash()\n         self.update_witness_block_with_transactions(block_4, [tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block_4, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block_4, accepted=True)\n \n         # Reset the tip back down for the next test\n         sync_blocks(self.nodes)\n@@ -2064,7 +2064,7 @@ def test_witness_sigops(self):\n         tx2.wit.vtxinwit[-1].scriptWitness.stack = [witness_program_justright]\n         tx2.rehash()\n         self.update_witness_block_with_transactions(block_5, [tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block_5, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block_5, accepted=True)\n \n         # TODO: test p2sh sigop counting\n "
      }
    ]
  },
  {
    "sha": "73e538cf6a9df9a5ef57363e53fbeb01d1ade510",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3M2U1MzhjZjZhOWRmOWE1ZWY1NzM2M2U1M2ZiZWIwMWQxYWRlNTEw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-08-29T16:21:15Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-25T02:02:01Z"
      },
      "message": "scripted-diff: Use named arguments in feature_block\n\n-BEGIN VERIFY SCRIPT-\nsed -i --regexp-extended -e \"s/sync_blocks\\((.*?), (True|False), (1.?), /sync_blocks(\\1, success=\\2, reject_code=\\3, reject_reason=/g\" ./test/functional/feature_block.py\n-END VERIFY SCRIPT-\n\nGithub-Pull: #14101\nRebased-From: b4d33096734d787b0e1d754064039cbb64ce8d61",
      "tree": {
        "sha": "4f3f4fd76bc9c81d74fd74cbea64b4632390a8de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f3f4fd76bc9c81d74fd74cbea64b4632390a8de"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/73e538cf6a9df9a5ef57363e53fbeb01d1ade510",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73e538cf6a9df9a5ef57363e53fbeb01d1ade510",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/73e538cf6a9df9a5ef57363e53fbeb01d1ade510",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73e538cf6a9df9a5ef57363e53fbeb01d1ade510/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "96dc93686237facede4b53e4962295ffd709c85e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96dc93686237facede4b53e4962295ffd709c85e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/96dc93686237facede4b53e4962295ffd709c85e"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 38,
      "deletions": 38
    },
    "files": [
      {
        "sha": "e81ea12d0f835caba1cac39485f9afc78b8e1a93",
        "filename": "test/functional/feature_block.py",
        "status": "modified",
        "additions": 38,
        "deletions": 38,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73e538cf6a9df9a5ef57363e53fbeb01d1ade510/test/functional/feature_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73e538cf6a9df9a5ef57363e53fbeb01d1ade510/test/functional/feature_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_block.py?ref=73e538cf6a9df9a5ef57363e53fbeb01d1ade510",
        "patch": "@@ -169,7 +169,7 @@ def run_test(self):\n         self.log.info(\"Reject a block where the miner creates too much coinbase reward\")\n         self.move_tip(6)\n         b9 = self.next_block(9, spend=out[4], additional_coinbase_value=1)\n-        self.sync_blocks([b9], False, 16, b'bad-cb-amount', reconnect=True)\n+        self.sync_blocks([b9], success=False, reject_code=16, reject_reason=b'bad-cb-amount', reconnect=True)\n \n         # Create a fork that ends in a block with too much fee (the one that causes the reorg)\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n@@ -181,7 +181,7 @@ def run_test(self):\n         self.sync_blocks([b10], False)\n \n         b11 = self.next_block(11, spend=out[4], additional_coinbase_value=1)\n-        self.sync_blocks([b11], False, 16, b'bad-cb-amount', reconnect=True)\n+        self.sync_blocks([b11], success=False, reject_code=16, reject_reason=b'bad-cb-amount', reconnect=True)\n \n         # Try again, but with a valid fork first\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n@@ -194,7 +194,7 @@ def run_test(self):\n         b13 = self.next_block(13, spend=out[4])\n         self.save_spendable_output()\n         b14 = self.next_block(14, spend=out[5], additional_coinbase_value=1)\n-        self.sync_blocks([b12, b13, b14], False, 16, b'bad-cb-amount', reconnect=True)\n+        self.sync_blocks([b12, b13, b14], success=False, reject_code=16, reject_reason=b'bad-cb-amount', reconnect=True)\n \n         # New tip should be b13.\n         assert_equal(node.getbestblockhash(), b13.hash)\n@@ -213,7 +213,7 @@ def run_test(self):\n         self.log.info(\"Reject a block with too many checksigs\")\n         too_many_checksigs = CScript([OP_CHECKSIG] * (MAX_BLOCK_SIGOPS))\n         b16 = self.next_block(16, spend=out[6], script=too_many_checksigs)\n-        self.sync_blocks([b16], False, 16, b'bad-blk-sigops', reconnect=True)\n+        self.sync_blocks([b16], success=False, reject_code=16, reject_reason=b'bad-blk-sigops', reconnect=True)\n \n         # Attempt to spend a transaction created on a different fork\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n@@ -222,7 +222,7 @@ def run_test(self):\n         self.log.info(\"Reject a block with a spend from a re-org'ed out tx\")\n         self.move_tip(15)\n         b17 = self.next_block(17, spend=txout_b3)\n-        self.sync_blocks([b17], False, 16, b'bad-txns-inputs-missingorspent', reconnect=True)\n+        self.sync_blocks([b17], success=False, reject_code=16, reject_reason=b'bad-txns-inputs-missingorspent', reconnect=True)\n \n         # Attempt to spend a transaction created on a different fork (on a fork this time)\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n@@ -235,7 +235,7 @@ def run_test(self):\n         self.sync_blocks([b18], False)\n \n         b19 = self.next_block(19, spend=out[6])\n-        self.sync_blocks([b19], False, 16, b'bad-txns-inputs-missingorspent', reconnect=True)\n+        self.sync_blocks([b19], success=False, reject_code=16, reject_reason=b'bad-txns-inputs-missingorspent', reconnect=True)\n \n         # Attempt to spend a coinbase at depth too low\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n@@ -244,7 +244,7 @@ def run_test(self):\n         self.log.info(\"Reject a block spending an immature coinbase.\")\n         self.move_tip(15)\n         b20 = self.next_block(20, spend=out[7])\n-        self.sync_blocks([b20], False, 16, b'bad-txns-premature-spend-of-coinbase')\n+        self.sync_blocks([b20], success=False, reject_code=16, reject_reason=b'bad-txns-premature-spend-of-coinbase')\n \n         # Attempt to spend a coinbase at depth too low (on a fork this time)\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n@@ -257,7 +257,7 @@ def run_test(self):\n         self.sync_blocks([b21], False)\n \n         b22 = self.next_block(22, spend=out[5])\n-        self.sync_blocks([b22], False, 16, b'bad-txns-premature-spend-of-coinbase')\n+        self.sync_blocks([b22], success=False, reject_code=16, reject_reason=b'bad-txns-premature-spend-of-coinbase')\n \n         # Create a block on either side of MAX_BLOCK_BASE_SIZE and make sure its accepted/rejected\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n@@ -286,7 +286,7 @@ def run_test(self):\n         tx.vout = [CTxOut(0, script_output)]\n         b24 = self.update_block(24, [tx])\n         assert_equal(len(b24.serialize()), MAX_BLOCK_BASE_SIZE + 1)\n-        self.sync_blocks([b24], False, 16, b'bad-blk-length', reconnect=True)\n+        self.sync_blocks([b24], success=False, reject_code=16, reject_reason=b'bad-blk-length', reconnect=True)\n \n         b25 = self.next_block(25, spend=out[7])\n         self.sync_blocks([b25], False)\n@@ -304,7 +304,7 @@ def run_test(self):\n         # update_block causes the merkle root to get updated, even with no new\n         # transactions, and updates the required state.\n         b26 = self.update_block(26, [])\n-        self.sync_blocks([b26], False, 16, b'bad-cb-length', reconnect=True)\n+        self.sync_blocks([b26], success=False, reject_code=16, reject_reason=b'bad-cb-length', reconnect=True)\n \n         # Extend the b26 chain to make sure bitcoind isn't accepting b26\n         b27 = self.next_block(27, spend=out[7])\n@@ -316,7 +316,7 @@ def run_test(self):\n         b28.vtx[0].vin[0].scriptSig = b'\\x00' * 101\n         b28.vtx[0].rehash()\n         b28 = self.update_block(28, [])\n-        self.sync_blocks([b28], False, 16, b'bad-cb-length', reconnect=True)\n+        self.sync_blocks([b28], success=False, reject_code=16, reject_reason=b'bad-cb-length', reconnect=True)\n \n         # Extend the b28 chain to make sure bitcoind isn't accepting b28\n         b29 = self.next_block(29, spend=out[7])\n@@ -352,7 +352,7 @@ def run_test(self):\n         too_many_multisigs = CScript([OP_CHECKMULTISIG] * (MAX_BLOCK_SIGOPS // 20))\n         b32 = self.next_block(32, spend=out[9], script=too_many_multisigs)\n         assert_equal(get_legacy_sigopcount_block(b32), MAX_BLOCK_SIGOPS + 1)\n-        self.sync_blocks([b32], False, 16, b'bad-blk-sigops', reconnect=True)\n+        self.sync_blocks([b32], success=False, reject_code=16, reject_reason=b'bad-blk-sigops', reconnect=True)\n \n         # CHECKMULTISIGVERIFY\n         self.log.info(\"Accept a block with the max number of OP_CHECKMULTISIGVERIFY sigops\")\n@@ -365,7 +365,7 @@ def run_test(self):\n         self.log.info(\"Reject a block with too many OP_CHECKMULTISIGVERIFY sigops\")\n         too_many_multisigs = CScript([OP_CHECKMULTISIGVERIFY] * (MAX_BLOCK_SIGOPS // 20))\n         b34 = self.next_block(34, spend=out[10], script=too_many_multisigs)\n-        self.sync_blocks([b34], False, 16, b'bad-blk-sigops', reconnect=True)\n+        self.sync_blocks([b34], success=False, reject_code=16, reject_reason=b'bad-blk-sigops', reconnect=True)\n \n         # CHECKSIGVERIFY\n         self.log.info(\"Accept a block with the max number of OP_CHECKSIGVERIFY sigops\")\n@@ -378,7 +378,7 @@ def run_test(self):\n         self.log.info(\"Reject a block with too many OP_CHECKSIGVERIFY sigops\")\n         too_many_checksigs = CScript([OP_CHECKSIGVERIFY] * (MAX_BLOCK_SIGOPS))\n         b36 = self.next_block(36, spend=out[11], script=too_many_checksigs)\n-        self.sync_blocks([b36], False, 16, b'bad-blk-sigops', reconnect=True)\n+        self.sync_blocks([b36], success=False, reject_code=16, reject_reason=b'bad-blk-sigops', reconnect=True)\n \n         # Check spending of a transaction in a block which failed to connect\n         #\n@@ -395,12 +395,12 @@ def run_test(self):\n         txout_b37 = b37.vtx[1]\n         tx = self.create_and_sign_transaction(out[11], 0)\n         b37 = self.update_block(37, [tx])\n-        self.sync_blocks([b37], False, 16, b'bad-txns-inputs-missingorspent', reconnect=True)\n+        self.sync_blocks([b37], success=False, reject_code=16, reject_reason=b'bad-txns-inputs-missingorspent', reconnect=True)\n \n         # attempt to spend b37's first non-coinbase tx, at which point b37 was still considered valid\n         self.move_tip(35)\n         b38 = self.next_block(38, spend=txout_b37)\n-        self.sync_blocks([b38], False, 16, b'bad-txns-inputs-missingorspent', reconnect=True)\n+        self.sync_blocks([b38], success=False, reject_code=16, reject_reason=b'bad-txns-inputs-missingorspent', reconnect=True)\n \n         # Check P2SH SigOp counting\n         #\n@@ -492,7 +492,7 @@ def run_test(self):\n         tx.rehash()\n         new_txs.append(tx)\n         self.update_block(40, new_txs)\n-        self.sync_blocks([b40], False, 16, b'bad-blk-sigops', reconnect=True)\n+        self.sync_blocks([b40], success=False, reject_code=16, reject_reason=b'bad-blk-sigops', reconnect=True)\n \n         # same as b40, but one less sigop\n         self.log.info(\"Accept a block with the max number of P2SH sigops\")\n@@ -555,7 +555,7 @@ def run_test(self):\n         self.block_heights[b45.sha256] = self.block_heights[self.tip.sha256] + 1\n         self.tip = b45\n         self.blocks[45] = b45\n-        self.sync_blocks([b45], False, 16, b'bad-cb-missing', reconnect=True)\n+        self.sync_blocks([b45], success=False, reject_code=16, reject_reason=b'bad-cb-missing', reconnect=True)\n \n         self.log.info(\"Reject a block with no transactions\")\n         self.move_tip(44)\n@@ -570,7 +570,7 @@ def run_test(self):\n         self.tip = b46\n         assert 46 not in self.blocks\n         self.blocks[46] = b46\n-        self.sync_blocks([b46], False, 16, b'bad-blk-length', reconnect=True)\n+        self.sync_blocks([b46], success=False, reject_code=16, reject_reason=b'bad-blk-length', reconnect=True)\n \n         self.log.info(\"Reject a block with invalid work\")\n         self.move_tip(44)\n@@ -593,7 +593,7 @@ def run_test(self):\n         b49 = self.next_block(49)\n         b49.hashMerkleRoot += 1\n         b49.solve()\n-        self.sync_blocks([b49], False, 16, b'bad-txnmrklroot', reconnect=True)\n+        self.sync_blocks([b49], success=False, reject_code=16, reject_reason=b'bad-txnmrklroot', reconnect=True)\n \n         self.log.info(\"Reject a block with incorrect POW limit\")\n         self.move_tip(44)\n@@ -607,15 +607,15 @@ def run_test(self):\n         b51 = self.next_block(51)\n         cb2 = create_coinbase(51, self.coinbase_pubkey)\n         b51 = self.update_block(51, [cb2])\n-        self.sync_blocks([b51], False, 16, b'bad-cb-multiple', reconnect=True)\n+        self.sync_blocks([b51], success=False, reject_code=16, reject_reason=b'bad-cb-multiple', reconnect=True)\n \n         self.log.info(\"Reject a block with duplicate transactions\")\n         # Note: txns have to be in the right position in the merkle tree to trigger this error\n         self.move_tip(44)\n         b52 = self.next_block(52, spend=out[15])\n         tx = self.create_tx(b52.vtx[1], 0, 1)\n         b52 = self.update_block(52, [tx, tx])\n-        self.sync_blocks([b52], False, 16, b'bad-txns-duplicate', reconnect=True)\n+        self.sync_blocks([b52], success=False, reject_code=16, reject_reason=b'bad-txns-duplicate', reconnect=True)\n \n         # Test block timestamps\n         #  -> b31 (8) -> b33 (9) -> b35 (10) -> b39 (11) -> b42 (12) -> b43 (13) -> b53 (14) -> b55 (15)\n@@ -682,7 +682,7 @@ def run_test(self):\n         assert_equal(len(b56.vtx), 3)\n         b56 = self.update_block(56, [tx1])\n         assert_equal(b56.hash, b57.hash)\n-        self.sync_blocks([b56], False, 16, b'bad-txns-duplicate', reconnect=True)\n+        self.sync_blocks([b56], success=False, reject_code=16, reject_reason=b'bad-txns-duplicate', reconnect=True)\n \n         # b57p2 - a good block with 6 tx'es, don't submit until end\n         self.move_tip(55)\n@@ -702,7 +702,7 @@ def run_test(self):\n         assert_equal(b56p2.hash, b57p2.hash)\n         assert_equal(len(b56p2.vtx), 6)\n         b56p2 = self.update_block(\"b56p2\", [tx3, tx4])\n-        self.sync_blocks([b56p2], False, 16, b'bad-txns-duplicate', reconnect=True)\n+        self.sync_blocks([b56p2], success=False, reject_code=16, reject_reason=b'bad-txns-duplicate', reconnect=True)\n \n         self.move_tip(\"57p2\")\n         self.sync_blocks([b57p2], True)\n@@ -727,15 +727,15 @@ def run_test(self):\n         tx.vout.append(CTxOut(0, b\"\"))\n         tx.calc_sha256()\n         b58 = self.update_block(58, [tx])\n-        self.sync_blocks([b58], False, 16, b'bad-txns-inputs-missingorspent', reconnect=True)\n+        self.sync_blocks([b58], success=False, reject_code=16, reject_reason=b'bad-txns-inputs-missingorspent', reconnect=True)\n \n         # tx with output value > input value\n         self.log.info(\"Reject a block with a transaction with outputs > inputs\")\n         self.move_tip(57)\n         b59 = self.next_block(59)\n         tx = self.create_and_sign_transaction(out[17], 51 * COIN)\n         b59 = self.update_block(59, [tx])\n-        self.sync_blocks([b59], False, 16, b'bad-txns-in-belowout', reconnect=True)\n+        self.sync_blocks([b59], success=False, reject_code=16, reject_reason=b'bad-txns-in-belowout', reconnect=True)\n \n         # reset to good chain\n         self.move_tip(57)\n@@ -759,7 +759,7 @@ def run_test(self):\n         b61.vtx[0].rehash()\n         b61 = self.update_block(61, [])\n         assert_equal(b60.vtx[0].serialize(), b61.vtx[0].serialize())\n-        self.sync_blocks([b61], False, 16, b'bad-txns-BIP30', reconnect=True)\n+        self.sync_blocks([b61], success=False, reject_code=16, reject_reason=b'bad-txns-BIP30', reconnect=True)\n \n         # Test tx.isFinal is properly rejected (not an exhaustive tx.isFinal test, that should be in data-driven transaction tests)\n         #\n@@ -776,7 +776,7 @@ def run_test(self):\n         assert(tx.vin[0].nSequence < 0xffffffff)\n         tx.calc_sha256()\n         b62 = self.update_block(62, [tx])\n-        self.sync_blocks([b62], False, 16, b'bad-txns-nonfinal')\n+        self.sync_blocks([b62], success=False, reject_code=16, reject_reason=b'bad-txns-nonfinal')\n \n         # Test a non-final coinbase is also rejected\n         #\n@@ -790,7 +790,7 @@ def run_test(self):\n         b63.vtx[0].vin[0].nSequence = 0xDEADBEEF\n         b63.vtx[0].rehash()\n         b63 = self.update_block(63, [])\n-        self.sync_blocks([b63], False, 16, b'bad-txns-nonfinal')\n+        self.sync_blocks([b63], success=False, reject_code=16, reject_reason=b'bad-txns-nonfinal')\n \n         #  This checks that a block with a bloated VARINT between the block_header and the array of tx such that\n         #  the block is > MAX_BLOCK_BASE_SIZE with the bloated varint, but <= MAX_BLOCK_BASE_SIZE without the bloated varint,\n@@ -824,7 +824,7 @@ def run_test(self):\n         tx.vin.append(CTxIn(COutPoint(b64a.vtx[1].sha256, 0)))\n         b64a = self.update_block(\"64a\", [tx])\n         assert_equal(len(b64a.serialize()), MAX_BLOCK_BASE_SIZE + 8)\n-        self.sync_blocks([b64a], False, 1, b'error parsing message')\n+        self.sync_blocks([b64a], success=False, reject_code=1, reject_reason=b'error parsing message')\n \n         # bitcoind doesn't disconnect us for sending a bloated block, but if we subsequently\n         # resend the header message, it won't send us the getdata message again. Just\n@@ -866,7 +866,7 @@ def run_test(self):\n         tx1 = self.create_and_sign_transaction(out[20], out[20].vout[0].nValue)\n         tx2 = self.create_and_sign_transaction(tx1, 1)\n         b66 = self.update_block(66, [tx2, tx1])\n-        self.sync_blocks([b66], False, 16, b'bad-txns-inputs-missingorspent', reconnect=True)\n+        self.sync_blocks([b66], success=False, reject_code=16, reject_reason=b'bad-txns-inputs-missingorspent', reconnect=True)\n \n         # Attempt to double-spend a transaction created in a block\n         #\n@@ -881,7 +881,7 @@ def run_test(self):\n         tx2 = self.create_and_sign_transaction(tx1, 1)\n         tx3 = self.create_and_sign_transaction(tx1, 2)\n         b67 = self.update_block(67, [tx1, tx2, tx3])\n-        self.sync_blocks([b67], False, 16, b'bad-txns-inputs-missingorspent', reconnect=True)\n+        self.sync_blocks([b67], success=False, reject_code=16, reject_reason=b'bad-txns-inputs-missingorspent', reconnect=True)\n \n         # More tests of block subsidy\n         #\n@@ -900,7 +900,7 @@ def run_test(self):\n         b68 = self.next_block(68, additional_coinbase_value=10)\n         tx = self.create_and_sign_transaction(out[20], out[20].vout[0].nValue - 9)\n         b68 = self.update_block(68, [tx])\n-        self.sync_blocks([b68], False, 16, b'bad-cb-amount', reconnect=True)\n+        self.sync_blocks([b68], success=False, reject_code=16, reject_reason=b'bad-cb-amount', reconnect=True)\n \n         self.log.info(\"Accept a block claiming the correct subsidy in the coinbase transaction\")\n         self.move_tip(65)\n@@ -924,7 +924,7 @@ def run_test(self):\n         tx.vin.append(CTxIn(COutPoint(bogus_tx.sha256, 0), b\"\", 0xffffffff))\n         tx.vout.append(CTxOut(1, b\"\"))\n         b70 = self.update_block(70, [tx])\n-        self.sync_blocks([b70], False, 16, b'bad-txns-inputs-missingorspent', reconnect=True)\n+        self.sync_blocks([b70], success=False, reject_code=16, reject_reason=b'bad-txns-inputs-missingorspent', reconnect=True)\n \n         # Test accepting an invalid block which has the same hash as a valid one (via merkle tree tricks)\n         #\n@@ -949,7 +949,7 @@ def run_test(self):\n         assert_equal(b72.sha256, b71.sha256)\n \n         self.move_tip(71)\n-        self.sync_blocks([b71], False, 16, b'bad-txns-duplicate', reconnect=True)\n+        self.sync_blocks([b71], success=False, reject_code=16, reject_reason=b'bad-txns-duplicate', reconnect=True)\n \n         self.move_tip(72)\n         self.sync_blocks([b72], True)\n@@ -987,7 +987,7 @@ def run_test(self):\n         tx = self.create_and_sign_transaction(out[22], 1, CScript(a))\n         b73 = self.update_block(73, [tx])\n         assert_equal(get_legacy_sigopcount_block(b73), MAX_BLOCK_SIGOPS + 1)\n-        self.sync_blocks([b73], False, 16, b'bad-blk-sigops', reconnect=True)\n+        self.sync_blocks([b73], success=False, reject_code=16, reject_reason=b'bad-blk-sigops', reconnect=True)\n \n         # b74/75 - if we push an invalid script element, all prevous sigops are counted,\n         #          but sigops after the element are not counted.\n@@ -1011,7 +1011,7 @@ def run_test(self):\n         a[MAX_BLOCK_SIGOPS + 4] = 0xff\n         tx = self.create_and_sign_transaction(out[22], 1, CScript(a))\n         b74 = self.update_block(74, [tx])\n-        self.sync_blocks([b74], False, 16, b'bad-blk-sigops', reconnect=True)\n+        self.sync_blocks([b74], success=False, reject_code=16, reject_reason=b'bad-blk-sigops', reconnect=True)\n \n         self.move_tip(72)\n         b75 = self.next_block(75)\n@@ -1160,7 +1160,7 @@ def run_test(self):\n         b89a = self.next_block(\"89a\", spend=out[32])\n         tx = self.create_tx(tx1, 0, 0, CScript([OP_TRUE]))\n         b89a = self.update_block(\"89a\", [tx])\n-        self.sync_blocks([b89a], False, 16, b'bad-txns-inputs-missingorspent', reconnect=True)\n+        self.sync_blocks([b89a], success=False, reject_code=16, reject_reason=b'bad-txns-inputs-missingorspent', reconnect=True)\n \n         self.log.info(\"Test a re-org of one week's worth of blocks (1088 blocks)\")\n "
      }
    ]
  },
  {
    "sha": "168efeaca6bbb9158f7731f5d72ae75b2320ca2c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNjhlZmVhY2E2YmJiOTE1OGY3NzMxZjVkNzJhZTc1YjIzMjBjYTJj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-08-29T16:42:46Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-25T02:02:08Z"
      },
      "message": "qa: Use named args in some tests\n\nGithub-Pull: #14101\nRebased-From: fa782a308dbe7bc579c122f63c1c65666fc85e91",
      "tree": {
        "sha": "1171a3c47ed131dd2a672810762db878e36982ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1171a3c47ed131dd2a672810762db878e36982ee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/168efeaca6bbb9158f7731f5d72ae75b2320ca2c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/168efeaca6bbb9158f7731f5d72ae75b2320ca2c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/168efeaca6bbb9158f7731f5d72ae75b2320ca2c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/168efeaca6bbb9158f7731f5d72ae75b2320ca2c/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "73e538cf6a9df9a5ef57363e53fbeb01d1ade510",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73e538cf6a9df9a5ef57363e53fbeb01d1ade510",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/73e538cf6a9df9a5ef57363e53fbeb01d1ade510"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "a5d1ec3e8727dc4c315e4a927948d0f360b484d2",
        "filename": "test/functional/p2p_invalid_block.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/168efeaca6bbb9158f7731f5d72ae75b2320ca2c/test/functional/p2p_invalid_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/168efeaca6bbb9158f7731f5d72ae75b2320ca2c/test/functional/p2p_invalid_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_block.py?ref=168efeaca6bbb9158f7731f5d72ae75b2320ca2c",
        "patch": "@@ -42,7 +42,7 @@ def run_test(self):\n         # Save the coinbase for later\n         block1 = block\n         tip = block.sha256\n-        node.p2p.send_blocks_and_test([block1], node, True)\n+        node.p2p.send_blocks_and_test([block1], node, success=True)\n \n         self.log.info(\"Mature the block.\")\n         node.generate(100)\n@@ -79,7 +79,7 @@ def run_test(self):\n         assert_equal(orig_hash, block2.rehash())\n         assert(block2_orig.vtx != block2.vtx)\n \n-        node.p2p.send_blocks_and_test([block2], node, False, False, 16, b'bad-txns-duplicate')\n+        node.p2p.send_blocks_and_test([block2], node, success=False, request_block=False, reject_code=16, reject_reason=b'bad-txns-duplicate')\n \n         # Check transactions for duplicate inputs\n         self.log.info(\"Test duplicate input block.\")\n@@ -102,7 +102,7 @@ def run_test(self):\n         block3.rehash()\n         block3.solve()\n \n-        node.p2p.send_blocks_and_test([block3], node, False, False, 16, b'bad-cb-amount')\n+        node.p2p.send_blocks_and_test([block3], node, success=False, request_block=False, reject_code=16, reject_reason=b'bad-cb-amount')\n \n if __name__ == '__main__':\n     InvalidBlockRequestTest().main()"
      },
      {
        "sha": "45dc2928d335ea449fb8faee3299897bff10fd6c",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/168efeaca6bbb9158f7731f5d72ae75b2320ca2c/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/168efeaca6bbb9158f7731f5d72ae75b2320ca2c/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=168efeaca6bbb9158f7731f5d72ae75b2320ca2c",
        "patch": "@@ -119,7 +119,7 @@ def get_virtual_size(witness_block):\n     vsize = int((3 * base_size + total_size + 3) / 4)\n     return vsize\n \n-def test_transaction_acceptance(rpc, p2p, tx, with_witness, accepted, reason=None):\n+def test_transaction_acceptance(node, p2p, tx, with_witness, accepted, reason=None):\n     \"\"\"Send a transaction to the node and check that it's accepted to the mempool\n \n     - Submit the transaction over the p2p interface\n@@ -129,13 +129,13 @@ def test_transaction_acceptance(rpc, p2p, tx, with_witness, accepted, reason=Non\n         tx_message = msg_witness_tx(tx)\n     p2p.send_message(tx_message)\n     p2p.sync_with_ping()\n-    assert_equal(tx.hash in rpc.getrawmempool(), accepted)\n+    assert_equal(tx.hash in node.getrawmempool(), accepted)\n     if (reason is not None and not accepted):\n         # Check the rejection reason as well.\n         with mininode_lock:\n             assert_equal(p2p.last_message[\"reject\"].reason, reason)\n \n-def test_witness_block(rpc, p2p, block, accepted, with_witness=True, reason=None):\n+def test_witness_block(node, p2p, block, accepted, with_witness=True, reason=None):\n     \"\"\"Send a block to the node and check that it's accepted\n \n     - Submit the block over the p2p interface\n@@ -145,7 +145,7 @@ def test_witness_block(rpc, p2p, block, accepted, with_witness=True, reason=None\n     else:\n         p2p.send_message(msg_block(block))\n     p2p.sync_with_ping()\n-    assert_equal(rpc.getbestblockhash() == block.hash, accepted)\n+    assert_equal(node.getbestblockhash() == block.hash, accepted)\n     if (reason is not None and not accepted):\n         # Check the rejection reason as well.\n         with mininode_lock:"
      },
      {
        "sha": "034e83aaae643ead1fb91a84531fd41265844ec1",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/168efeaca6bbb9158f7731f5d72ae75b2320ca2c/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/168efeaca6bbb9158f7731f5d72ae75b2320ca2c/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=168efeaca6bbb9158f7731f5d72ae75b2320ca2c",
        "patch": "@@ -482,7 +482,7 @@ def on_reject(self, message):\n         self.reject_code_received = message.code\n         self.reject_reason_received = message.reason\n \n-    def send_blocks_and_test(self, blocks, rpc, success=True, request_block=True, reject_code=None, reject_reason=None, timeout=60):\n+    def send_blocks_and_test(self, blocks, node, *, success=True, request_block=True, reject_code=None, reject_reason=None, timeout=60):\n         \"\"\"Send blocks to test node and test whether the tip advances.\n \n          - add all blocks to our block_store\n@@ -508,16 +508,16 @@ def send_blocks_and_test(self, blocks, rpc, success=True, request_block=True, re\n             wait_until(lambda: blocks[-1].sha256 in self.getdata_requests, timeout=timeout, lock=mininode_lock)\n \n         if success:\n-            wait_until(lambda: rpc.getbestblockhash() == blocks[-1].hash, timeout=timeout)\n+            wait_until(lambda: node.getbestblockhash() == blocks[-1].hash, timeout=timeout)\n         else:\n-            assert rpc.getbestblockhash() != blocks[-1].hash\n+            assert node.getbestblockhash() != blocks[-1].hash\n \n         if reject_code is not None:\n             wait_until(lambda: self.reject_code_received == reject_code, lock=mininode_lock)\n         if reject_reason is not None:\n             wait_until(lambda: self.reject_reason_received == reject_reason, lock=mininode_lock)\n \n-    def send_txs_and_test(self, txs, rpc, success=True, expect_disconnect=False, reject_code=None, reject_reason=None):\n+    def send_txs_and_test(self, txs, node, *, success=True, expect_disconnect=False, reject_code=None, reject_reason=None):\n         \"\"\"Send txs to test node and test whether they're accepted to the mempool.\n \n          - add all txs to our tx_store\n@@ -541,7 +541,7 @@ def send_txs_and_test(self, txs, rpc, success=True, expect_disconnect=False, rej\n         else:\n             self.sync_with_ping()\n \n-        raw_mempool = rpc.getrawmempool()\n+        raw_mempool = node.getrawmempool()\n         if success:\n             # Check that all txs are now in the mempool\n             for tx in txs:"
      }
    ]
  },
  {
    "sha": "24d796a6cc96ac351377355000bdb248b718bc7b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNGQ3OTZhNmNjOTZhYzM1MTM3NzM1NTAwMGJkYjI0OGI3MThiYzdi",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-08-22T00:33:34Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-25T02:02:15Z"
      },
      "message": "test: Add tests for RPC help\n\nGithub-Pull: #14020\nRebased-From: 6af6d9b23dae4edd20c3dad49c835caabf3909b5",
      "tree": {
        "sha": "52000297812bd47216628d1e6790cced6beffb0c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/52000297812bd47216628d1e6790cced6beffb0c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/24d796a6cc96ac351377355000bdb248b718bc7b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24d796a6cc96ac351377355000bdb248b718bc7b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/24d796a6cc96ac351377355000bdb248b718bc7b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24d796a6cc96ac351377355000bdb248b718bc7b/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "168efeaca6bbb9158f7731f5d72ae75b2320ca2c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/168efeaca6bbb9158f7731f5d72ae75b2320ca2c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/168efeaca6bbb9158f7731f5d72ae75b2320ca2c"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 32,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e878ded2580a18a247c3be3899e3241825835629",
        "filename": "test/functional/rpc_help.py",
        "status": "added",
        "additions": 31,
        "deletions": 0,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24d796a6cc96ac351377355000bdb248b718bc7b/test/functional/rpc_help.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24d796a6cc96ac351377355000bdb248b718bc7b/test/functional/rpc_help.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_help.py?ref=24d796a6cc96ac351377355000bdb248b718bc7b",
        "patch": "@@ -0,0 +1,31 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test RPC help output.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+\n+class HelpRpcTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+\n+        # wrong argument count\n+        assert_raises_rpc_error(-1, 'help', node.help, 'foo', 'bar')\n+\n+        # invalid argument\n+        assert_raises_rpc_error(-1, 'JSON value is not a string as expected', node.help, 0)\n+\n+        # help of unknown command\n+        assert_equal(node.help('foo'), 'help: unknown command: foo')\n+\n+        # command titles\n+        titles = [line[3:-3] for line in node.help().splitlines() if line.startswith('==')]\n+        assert_equal(titles, ['Blockchain', 'Control', 'Generating', 'Mining', 'Network', 'Rawtransactions', 'Util', 'Wallet', 'Zmq'])\n+\n+if __name__ == '__main__':\n+    HelpRpcTest().main()"
      },
      {
        "sha": "13c687fd927518641ce17ac64db8c0aea5353d5d",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24d796a6cc96ac351377355000bdb248b718bc7b/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24d796a6cc96ac351377355000bdb248b718bc7b/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=24d796a6cc96ac351377355000bdb248b718bc7b",
        "patch": "@@ -152,6 +152,7 @@\n     'p2p_node_network_limited.py',\n     'feature_blocksdir.py',\n     'feature_config_args.py',\n+    'rpc_help.py',\n     'feature_help.py',\n     # Don't append tests at the end to avoid merge conflicts\n     # Put them in a random line within the section that fits their approximate run-time"
      }
    ]
  },
  {
    "sha": "8bc1badadae684e218600fe1e9a05f726120aacb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YmMxYmFkYWRhZTY4NGUyMTg2MDBmZTFlOWEwNWY3MjYxMjBhYWNi",
    "commit": {
      "author": {
        "name": "Kvaciral",
        "email": "kvaciral@protonmail.com",
        "date": "2018-08-31T20:30:26Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-25T02:02:21Z"
      },
      "message": "Test rpc_help.py failed: Check whether ZMQ is enabled or not.\n\nGithub-Pull: #14122\nRebased-From: 8dfc2f30dea6bde0f74d23691377f248966011ab",
      "tree": {
        "sha": "32bf67cf2545a63c7735ffd7c0ad04b8e5c8afb2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/32bf67cf2545a63c7735ffd7c0ad04b8e5c8afb2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8bc1badadae684e218600fe1e9a05f726120aacb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8bc1badadae684e218600fe1e9a05f726120aacb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8bc1badadae684e218600fe1e9a05f726120aacb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8bc1badadae684e218600fe1e9a05f726120aacb/comments",
    "author": {
      "login": "Kvaciral",
      "id": 864811,
      "node_id": "MDQ6VXNlcjg2NDgxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/864811?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Kvaciral",
      "html_url": "https://github.com/Kvaciral",
      "followers_url": "https://api.github.com/users/Kvaciral/followers",
      "following_url": "https://api.github.com/users/Kvaciral/following{/other_user}",
      "gists_url": "https://api.github.com/users/Kvaciral/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Kvaciral/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Kvaciral/subscriptions",
      "organizations_url": "https://api.github.com/users/Kvaciral/orgs",
      "repos_url": "https://api.github.com/users/Kvaciral/repos",
      "events_url": "https://api.github.com/users/Kvaciral/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Kvaciral/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "24d796a6cc96ac351377355000bdb248b718bc7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24d796a6cc96ac351377355000bdb248b718bc7b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/24d796a6cc96ac351377355000bdb248b718bc7b"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 15,
      "deletions": 4
    },
    "files": [
      {
        "sha": "ceca40527f04a5b3af18b21eb396c126ab2ab1a3",
        "filename": "test/functional/rpc_help.py",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8bc1badadae684e218600fe1e9a05f726120aacb/test/functional/rpc_help.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8bc1badadae684e218600fe1e9a05f726120aacb/test/functional/rpc_help.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_help.py?ref=8bc1badadae684e218600fe1e9a05f726120aacb",
        "patch": "@@ -4,7 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test RPC help output.\"\"\"\n \n-from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.test_framework import BitcoinTestFramework, is_zmq_enabled\n from test_framework.util import assert_equal, assert_raises_rpc_error\n \n class HelpRpcTest(BitcoinTestFramework):\n@@ -25,7 +25,13 @@ def run_test(self):\n \n         # command titles\n         titles = [line[3:-3] for line in node.help().splitlines() if line.startswith('==')]\n-        assert_equal(titles, ['Blockchain', 'Control', 'Generating', 'Mining', 'Network', 'Rawtransactions', 'Util', 'Wallet', 'Zmq'])\n+\n+        components = ['Blockchain', 'Control', 'Generating', 'Mining', 'Network', 'Rawtransactions', 'Util', 'Wallet']\n+\n+        if is_zmq_enabled(self):\n+            components.append('Zmq')\n+\n+        assert_equal(titles, components)\n \n if __name__ == '__main__':\n     HelpRpcTest().main()"
      },
      {
        "sha": "0e76b525707c0fa2441fa328c8806f39dcfaeb8c",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8bc1badadae684e218600fe1e9a05f726120aacb/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8bc1badadae684e218600fe1e9a05f726120aacb/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=8bc1badadae684e218600fe1e9a05f726120aacb",
        "patch": "@@ -488,8 +488,13 @@ def skip_if_no_py3_zmq():\n \n def skip_if_no_bitcoind_zmq(test_instance):\n     \"\"\"Skip the running test if bitcoind has not been compiled with zmq support.\"\"\"\n+    if not is_zmq_enabled(test_instance):\n+        raise SkipTest(\"bitcoind has not been built with zmq enabled.\")\n+\n+\n+def is_zmq_enabled(test_instance):\n+    \"\"\"Checks whether zmq is enabled or not.\"\"\"\n     config = configparser.ConfigParser()\n     config.read_file(open(test_instance.options.configfile))\n \n-    if not config[\"components\"].getboolean(\"ENABLE_ZMQ\"):\n-        raise SkipTest(\"bitcoind has not been built with zmq enabled.\")\n+    return config[\"components\"].getboolean(\"ENABLE_ZMQ\")"
      }
    ]
  },
  {
    "sha": "86fadee9904198ca706d706a8545ee908e830dfa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NmZhZGVlOTkwNDE5OGNhNzA2ZDcwNmE4NTQ1ZWU5MDhlODMwZGZh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-09-10T20:58:15Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-25T02:02:28Z"
      },
      "message": "qa: Premine to deterministic address with -disablewallet\n\nGithub-Pull: #14180\nRebased-From: faa669cbcd1fc799517b523b0f850e01b11bf40a",
      "tree": {
        "sha": "22fd53b4aae057c4308ad0cd5e4398046cbf79ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/22fd53b4aae057c4308ad0cd5e4398046cbf79ec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/86fadee9904198ca706d706a8545ee908e830dfa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86fadee9904198ca706d706a8545ee908e830dfa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/86fadee9904198ca706d706a8545ee908e830dfa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86fadee9904198ca706d706a8545ee908e830dfa/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8bc1badadae684e218600fe1e9a05f726120aacb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8bc1badadae684e218600fe1e9a05f726120aacb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8bc1badadae684e218600fe1e9a05f726120aacb"
      }
    ],
    "stats": {
      "total": 181,
      "additions": 122,
      "deletions": 59
    },
    "files": [
      {
        "sha": "bc6cd4bdcf0e3224541c667c6b138f3f093e0603",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=86fadee9904198ca706d706a8545ee908e830dfa",
        "patch": "@@ -168,6 +168,11 @@ def transact_and_mine(self, numblocks, mining_node):\n                     newmem.append(utx)\n             self.memutxo = newmem\n \n+    def import_deterministic_coinbase_privkeys(self):\n+        self.start_nodes()\n+        super().import_deterministic_coinbase_privkeys()\n+        self.stop_nodes()\n+\n     def run_test(self):\n         self.log.info(\"This test is time consuming, please be patient\")\n         self.log.info(\"Splitting inputs so we can generate tx's\")"
      },
      {
        "sha": "745cc9e4fcdd2acbdf8aad2d7e7df39d3a8f9a54",
        "filename": "test/functional/interface_zmq.py",
        "status": "modified",
        "additions": 11,
        "deletions": 2,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/interface_zmq.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/interface_zmq.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_zmq.py?ref=86fadee9904198ca706d706a8545ee908e830dfa",
        "patch": "@@ -40,6 +40,13 @@ def set_test_params(self):\n     def setup_nodes(self):\n         skip_if_no_py3_zmq()\n         skip_if_no_bitcoind_zmq(self)\n+\n+        # Import keys\n+        self.add_nodes(self.num_nodes)\n+        self.start_nodes()\n+        super().import_deterministic_coinbase_privkeys()\n+        self.stop_nodes()\n+\n         import zmq\n \n         # Initialize ZMQ context and socket.\n@@ -59,10 +66,12 @@ def setup_nodes(self):\n         self.rawblock = ZMQSubscriber(socket, b\"rawblock\")\n         self.rawtx = ZMQSubscriber(socket, b\"rawtx\")\n \n-        self.extra_args = [[\"-zmqpub%s=%s\" % (sub.topic.decode(), address) for sub in [self.hashblock, self.hashtx, self.rawblock, self.rawtx]], []]\n-        self.add_nodes(self.num_nodes, self.extra_args)\n+        self.nodes[0].extra_args = [\"-zmqpub%s=%s\" % (sub.topic.decode(), address) for sub in [self.hashblock, self.hashtx, self.rawblock, self.rawtx]]\n         self.start_nodes()\n \n+    def import_deterministic_coinbase_privkeys(self):\n+        pass\n+\n     def run_test(self):\n         try:\n             self._zmq_test()"
      },
      {
        "sha": "e2ac76aac4f7de8ac4cf1bbfcb5e58f68fb5841a",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=86fadee9904198ca706d706a8545ee908e830dfa",
        "patch": "@@ -34,7 +34,7 @@ def chain_transaction(self, node, parent_txid, vout, value, fee, num_outputs):\n         return (txid, send_value)\n \n     def run_test(self):\n-        ''' Mine some blocks and have them mature. '''\n+        # Mine some blocks and have them mature.\n         self.nodes[0].generate(101)\n         utxo = self.nodes[0].listunspent(10)\n         txid = utxo[0]['txid']"
      },
      {
        "sha": "fced5ac29d11c9d9f1e0db4973d0670a86ea2c56",
        "filename": "test/functional/mining_getblocktemplate_longpoll.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/mining_getblocktemplate_longpoll.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/mining_getblocktemplate_longpoll.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_getblocktemplate_longpoll.py?ref=86fadee9904198ca706d706a8545ee908e830dfa",
        "patch": "@@ -70,4 +70,3 @@ def run_test(self):\n \n if __name__ == '__main__':\n     GetBlockTemplateLPTest().main()\n-"
      },
      {
        "sha": "c8144bba71fe8f456aa5929200eff1b07fcf13b1",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=86fadee9904198ca706d706a8545ee908e830dfa",
        "patch": "@@ -47,9 +47,10 @@\n class BlockchainTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n-        self.extra_args = [['-stopatheight=207', '-prune=1']]\n \n     def run_test(self):\n+        self.restart_node(0, extra_args=['-stopatheight=207', '-prune=1'])  # Set extra args with pruning after rescan is complete\n+\n         self._test_getblockchaininfo()\n         self._test_getchaintxstats()\n         self._test_gettxoutsetinfo()\n@@ -169,7 +170,7 @@ def _test_gettxoutsetinfo(self):\n         assert_equal(res['transactions'], 200)\n         assert_equal(res['height'], 200)\n         assert_equal(res['txouts'], 200)\n-        assert_equal(res['bogosize'], 17000),\n+        assert_equal(res['bogosize'], 15000),\n         assert_equal(res['bestblock'], node.getblockhash(200))\n         size = res['disk_size']\n         assert size > 6400"
      },
      {
        "sha": "afb098395320f3f172013d71c68e7ce19601c0c4",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 18,
        "deletions": 3,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=86fadee9904198ca706d706a8545ee908e830dfa",
        "patch": "@@ -158,6 +158,7 @@ def main(self):\n                 raise SkipTest(\"--usecli specified but test does not support using CLI\")\n             self.setup_chain()\n             self.setup_network()\n+            self.import_deterministic_coinbase_privkeys()\n             self.run_test()\n             success = TestStatus.PASSED\n         except JSONRPCException as e:\n@@ -247,6 +248,19 @@ def setup_nodes(self):\n         self.add_nodes(self.num_nodes, extra_args)\n         self.start_nodes()\n \n+    def import_deterministic_coinbase_privkeys(self):\n+        if self.setup_clean_chain:\n+            return\n+\n+        for n in self.nodes:\n+            try:\n+                n.getwalletinfo()\n+            except JSONRPCException as e:\n+                assert str(e).startswith('Method not found')\n+                continue\n+\n+            n.importprivkey(n.get_deterministic_priv_key()[1])\n+\n     def run_test(self):\n         \"\"\"Tests must override this method to define test logic\"\"\"\n         raise NotImplementedError\n@@ -415,7 +429,7 @@ def _initialize_chain(self):\n             # Create cache directories, run bitcoinds:\n             for i in range(MAX_NODES):\n                 datadir = initialize_datadir(self.options.cachedir, i)\n-                args = [self.options.bitcoind, \"-datadir=\" + datadir]\n+                args = [self.options.bitcoind, \"-datadir=\" + datadir, '-disablewallet']\n                 if i > 0:\n                     args.append(\"-connect=127.0.0.1:\" + str(p2p_port(0)))\n                 self.nodes.append(TestNode(i, get_datadir_path(self.options.cachedir, i), extra_conf=[\"bind=127.0.0.1\"], extra_args=[], rpchost=None, timewait=self.rpc_timewait, bitcoind=self.options.bitcoind, bitcoin_cli=self.options.bitcoincli, mocktime=self.mocktime, coverage_dir=None))\n@@ -439,7 +453,7 @@ def _initialize_chain(self):\n                 for peer in range(4):\n                     for j in range(25):\n                         set_node_times(self.nodes, block_time)\n-                        self.nodes[peer].generate(1)\n+                        self.nodes[peer].generatetoaddress(1, self.nodes[peer].get_deterministic_priv_key()[0])\n                         block_time += 10 * 60\n                     # Must sync before next peer starts generating blocks\n                     sync_blocks(self.nodes)\n@@ -453,8 +467,9 @@ def cache_path(n, *paths):\n                 return os.path.join(get_datadir_path(self.options.cachedir, n), \"regtest\", *paths)\n \n             for i in range(MAX_NODES):\n+                os.rmdir(cache_path(i, 'wallets'))  # Remove empty wallets dir\n                 for entry in os.listdir(cache_path(i)):\n-                    if entry not in ['wallets', 'chainstate', 'blocks']:\n+                    if entry not in ['chainstate', 'blocks']:\n                         os.remove(cache_path(i, entry))\n \n         for i in range(self.num_nodes):"
      },
      {
        "sha": "908dda94c579076cfffa2759e5669cc7f730c63c",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=86fadee9904198ca706d706a8545ee908e830dfa",
        "patch": "@@ -97,6 +97,22 @@ def __init__(self, i, datadir, *, rpchost, timewait, bitcoind, bitcoin_cli, mock\n \n         self.p2ps = []\n \n+    def get_deterministic_priv_key(self):\n+        \"\"\"Return a deterministic priv key in base58, that only depends on the node's index\"\"\"\n+        PRIV_KEYS = [\n+            # adress , privkey\n+            ('mjTkW3DjgyZck4KbiRusZsqTgaYTxdSz6z', 'cVpF924EspNh8KjYsfhgY96mmxvT6DgdWiTYMtMjuM74hJaU5psW'),\n+            ('msX6jQXvxiNhx3Q62PKeLPrhrqZQdSimTg', 'cUxsWyKyZ9MAQTaAhUQWJmBbSvHMwSmuv59KgxQV7oZQU3PXN3KE'),\n+            ('mnonCMyH9TmAsSj3M59DsbH8H63U3RKoFP', 'cTrh7dkEAeJd6b3MRX9bZK8eRmNqVCMH3LSUkE3dSFDyzjU38QxK'),\n+            ('mqJupas8Dt2uestQDvV2NH3RU8uZh2dqQR', 'cVuKKa7gbehEQvVq717hYcbE9Dqmq7KEBKqWgWrYBa2CKKrhtRim'),\n+            ('msYac7Rvd5ywm6pEmkjyxhbCDKqWsVeYws', 'cQDCBuKcjanpXDpCqacNSjYfxeQj8G6CAtH1Dsk3cXyqLNC4RPuh'),\n+            ('n2rnuUnwLgXqf9kk2kjvVm8R5BZK1yxQBi', 'cQakmfPSLSqKHyMFGwAqKHgWUiofJCagVGhiB4KCainaeCSxeyYq'),\n+            ('myzuPxRwsf3vvGzEuzPfK9Nf2RfwauwYe6', 'cQMpDLJwA8DBe9NcQbdoSb1BhmFxVjWD5gRyrLZCtpuF9Zi3a9RK'),\n+            ('mumwTaMtbxEPUswmLBBN3vM9oGRtGBrys8', 'cSXmRKXVcoouhNNVpcNKFfxsTsToY5pvB9DVsFksF1ENunTzRKsy'),\n+            ('mpV7aGShMkJCZgbW7F6iZgrvuPHjZjH9qg', 'cSoXt6tm3pqy43UMabY6eUTmR3eSUYFtB2iNQDGgb3VUnRsQys2k'),\n+        ]\n+        return PRIV_KEYS[self.index]\n+\n     def _node_msg(self, msg: str) -> str:\n         \"\"\"Return a modified msg that identifies this node by its index as a debugging aid.\"\"\"\n         return \"[node %d] %s\" % (self.index, msg)"
      },
      {
        "sha": "bebaea79566e229946577cef45309a2b3f20fd2e",
        "filename": "test/functional/wallet_dump.py",
        "status": "modified",
        "additions": 52,
        "deletions": 48,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/wallet_dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/wallet_dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_dump.py?ref=86fadee9904198ca706d706a8545ee908e830dfa",
        "patch": "@@ -29,50 +29,54 @@ def read_dump(file_name, addrs, script_addrs, hd_master_addr_old):\n             # only read non comment lines\n             if line[0] != \"#\" and len(line) > 10:\n                 # split out some data\n-                key_label, comment = line.split(\"#\")\n-                # key = key_label.split(\" \")[0]\n-                keytype = key_label.split(\" \")[2]\n-                if len(comment) > 1:\n-                    addr_keypath = comment.split(\" addr=\")[1]\n-                    addr = addr_keypath.split(\" \")[0]\n+                key_date_label, comment = line.split(\"#\")\n+                key_date_label = key_date_label.split(\" \")\n+                # key = key_date_label[0]\n+                date = key_date_label[1]\n+                keytype = key_date_label[2]\n+                if not len(comment) or date.startswith('1970'):\n+                    continue\n+\n+                addr_keypath = comment.split(\" addr=\")[1]\n+                addr = addr_keypath.split(\" \")[0]\n+                keypath = None\n+                if keytype == \"inactivehdseed=1\":\n+                    # ensure the old master is still available\n+                    assert (hd_master_addr_old == addr)\n+                elif keytype == \"hdseed=1\":\n+                    # ensure we have generated a new hd master key\n+                    assert (hd_master_addr_old != addr)\n+                    hd_master_addr_ret = addr\n+                elif keytype == \"script=1\":\n+                    # scripts don't have keypaths\n                     keypath = None\n-                    if keytype == \"inactivehdseed=1\":\n-                        # ensure the old master is still available\n-                        assert(hd_master_addr_old == addr)\n-                    elif keytype == \"hdseed=1\":\n-                        # ensure we have generated a new hd master key\n-                        assert(hd_master_addr_old != addr)\n-                        hd_master_addr_ret = addr\n-                    elif keytype == \"script=1\":\n-                        # scripts don't have keypaths\n-                        keypath = None\n-                    else:\n-                        keypath = addr_keypath.rstrip().split(\"hdkeypath=\")[1]\n-\n-                    # count key types\n-                    for addrObj in addrs:\n-                        if addrObj['address'] == addr.split(\",\")[0] and addrObj['hdkeypath'] == keypath and keytype == \"label=\":\n-                            # a labeled entry in the wallet should contain both a native address\n-                            # and the p2sh-p2wpkh address that was added at wallet setup\n-                            if len(addr.split(\",\")) == 2:\n-                                addr_list = addr.split(\",\")\n-                                # the entry should be of the first key in the wallet\n-                                assert_equal(addrs[0]['address'], addr_list[0])\n-                                witness_addr_ret = addr_list[1]\n-                            found_addr += 1\n-                            break\n-                        elif keytype == \"change=1\":\n-                            found_addr_chg += 1\n-                            break\n-                        elif keytype == \"reserve=1\":\n-                            found_addr_rsv += 1\n-                            break\n-\n-                    # count scripts\n-                    for script_addr in script_addrs:\n-                        if script_addr == addr.rstrip() and keytype == \"script=1\":\n-                            found_script_addr += 1\n-                            break\n+                else:\n+                    keypath = addr_keypath.rstrip().split(\"hdkeypath=\")[1]\n+\n+                # count key types\n+                for addrObj in addrs:\n+                    if addrObj['address'] == addr.split(\",\")[0] and addrObj['hdkeypath'] == keypath and keytype == \"label=\":\n+                        # a labeled entry in the wallet should contain both a native address\n+                        # and the p2sh-p2wpkh address that was added at wallet setup\n+                        if len(addr.split(\",\")) == 2:\n+                            addr_list = addr.split(\",\")\n+                            # the entry should be of the first key in the wallet\n+                            assert_equal(addrs[0]['address'], addr_list[0])\n+                            witness_addr_ret = addr_list[1]\n+                        found_addr += 1\n+                        break\n+                    elif keytype == \"change=1\":\n+                        found_addr_chg += 1\n+                        break\n+                    elif keytype == \"reserve=1\":\n+                        found_addr_rsv += 1\n+                        break\n+\n+                # count scripts\n+                for script_addr in script_addrs:\n+                    if script_addr == addr.rstrip() and keytype == \"script=1\":\n+                        found_script_addr += 1\n+                        break\n \n         return found_addr, found_script_addr, found_addr_chg, found_addr_rsv, hd_master_addr_ret, witness_addr_ret\n \n@@ -116,9 +120,9 @@ def run_test(self):\n             read_dump(wallet_unenc_dump, addrs, script_addrs, None)\n         assert_equal(found_addr, test_addr_count)  # all keys must be in the dump\n         assert_equal(found_script_addr, 2)  # all scripts must be in the dump\n-        assert_equal(found_addr_chg, 50)  # 50 blocks where mined\n-        assert_equal(found_addr_rsv, 90*2) # 90 keys plus 100% internal keys\n-        assert_equal(witness_addr_ret, witness_addr) # p2sh-p2wsh address added to the first key\n+        assert_equal(found_addr_chg, 0)  # 0 blocks where mined\n+        assert_equal(found_addr_rsv, 90 * 2)  # 90 keys plus 100% internal keys\n+        assert_equal(witness_addr_ret, witness_addr)  # p2sh-p2wsh address added to the first key\n \n         #encrypt wallet, restart, unlock and dump\n         self.nodes[0].node_encrypt_wallet('test')\n@@ -132,8 +136,8 @@ def run_test(self):\n             read_dump(wallet_enc_dump, addrs, script_addrs, hd_master_addr_unenc)\n         assert_equal(found_addr, test_addr_count)\n         assert_equal(found_script_addr, 2)\n-        assert_equal(found_addr_chg, 90*2 + 50)  # old reserve keys are marked as change now\n-        assert_equal(found_addr_rsv, 90*2)\n+        assert_equal(found_addr_chg, 90 * 2)  # old reserve keys are marked as change now\n+        assert_equal(found_addr_rsv, 90 * 2)\n         assert_equal(witness_addr_ret, witness_addr)\n \n         # Overwriting should fail"
      },
      {
        "sha": "bb8dee0022a32165e67be28c089069bbf990d8eb",
        "filename": "test/functional/wallet_import_rescan.py",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/wallet_import_rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/wallet_import_rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_import_rescan.py?ref=86fadee9904198ca706d706a8545ee908e830dfa",
        "patch": "@@ -116,10 +116,19 @@ def setup_network(self):\n                 extra_args[i] += [\"-prune=1\"]\n \n         self.add_nodes(self.num_nodes, extra_args=extra_args)\n+\n+        # Import keys\n+        self.start_nodes(extra_args=[[]] * self.num_nodes)\n+        super().import_deterministic_coinbase_privkeys()\n+        self.stop_nodes()\n+\n         self.start_nodes()\n         for i in range(1, self.num_nodes):\n             connect_nodes(self.nodes[i], 0)\n \n+    def import_deterministic_coinbase_privkeys(self):\n+        pass\n+\n     def run_test(self):\n         # Create one transaction on node 0 with a unique amount for\n         # each possible type of wallet import RPC."
      },
      {
        "sha": "554cd61daa2de6b14b2afa6b86fa13f31441f247",
        "filename": "test/functional/wallet_listreceivedby.py",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/wallet_listreceivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86fadee9904198ca706d706a8545ee908e830dfa/test/functional/wallet_listreceivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listreceivedby.py?ref=86fadee9904198ca706d706a8545ee908e830dfa",
        "patch": "@@ -18,6 +18,11 @@ class ReceivedByTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n \n+    def import_deterministic_coinbase_privkeys(self):\n+        assert_equal(0, len(self.nodes[1].listreceivedbyaddress(minconf=0, include_empty=True, include_watchonly=True)))\n+        super().import_deterministic_coinbase_privkeys()\n+        self.num_cb_reward_addresses = len(self.nodes[1].listreceivedbyaddress(minconf=0, include_empty=True, include_watchonly=True))\n+\n     def run_test(self):\n         # Generate block to get out of IBD\n         self.nodes[0].generate(1)\n@@ -64,7 +69,7 @@ def run_test(self):\n         assert_raises_rpc_error(-4, \"address_filter parameter was invalid\", self.nodes[1].listreceivedbyaddress, minconf=0, include_empty=True, include_watchonly=True, address_filter=\"bamboozling\")\n         # Another address receive money\n         res = self.nodes[1].listreceivedbyaddress(0, True, True)\n-        assert_equal(len(res), 2)  # Right now 2 entries\n+        assert_equal(len(res), 2 + self.num_cb_reward_addresses)  # Right now 2 entries\n         other_addr = self.nodes[1].getnewaddress()\n         txid2 = self.nodes[0].sendtoaddress(other_addr, 0.1)\n         self.nodes[0].generate(1)\n@@ -81,7 +86,7 @@ def run_test(self):\n         assert_equal(len(res), 1)\n         # Should be two entries though without filter\n         res = self.nodes[1].listreceivedbyaddress(0, True, True)\n-        assert_equal(len(res), 3)  # Became 3 entries\n+        assert_equal(len(res), 3 + self.num_cb_reward_addresses)  # Became 3 entries\n \n         # Not on random addr\n         other_addr = self.nodes[0].getnewaddress()  # note on node[0]! just a random addr"
      }
    ]
  },
  {
    "sha": "f7adb32e383bbbdb473eb470e4a6872b582cac80",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmN2FkYjMyZTM4M2JiYmRiNDczZWI0NzBlNGE2ODcyYjU4MmNhYzgw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-09-09T17:32:37Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-25T02:02:36Z"
      },
      "message": "qa: Run all tests even if wallet is not compiled\n\nGithub-Pull: #14180\nRebased-From: fac95398366f644911b58f1605e6bc37fb76782d",
      "tree": {
        "sha": "4d59469a75a5e7b2fd91412c356a7c1501222a77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d59469a75a5e7b2fd91412c356a7c1501222a77"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f7adb32e383bbbdb473eb470e4a6872b582cac80",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7adb32e383bbbdb473eb470e4a6872b582cac80",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f7adb32e383bbbdb473eb470e4a6872b582cac80",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7adb32e383bbbdb473eb470e4a6872b582cac80/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "86fadee9904198ca706d706a8545ee908e830dfa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86fadee9904198ca706d706a8545ee908e830dfa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/86fadee9904198ca706d706a8545ee908e830dfa"
      }
    ],
    "stats": {
      "total": 458,
      "additions": 383,
      "deletions": 75
    },
    "files": [
      {
        "sha": "8f78a9d7bf393499774ff8ed4af4ae43029105d2",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -67,10 +67,11 @@ def custom_function():\n     # self.log.info(\"running custom_function\")  # Oops! Can't run self.log outside the BitcoinTestFramework\n     pass\n \n+\n class ExampleTest(BitcoinTestFramework):\n     # Each functional test is a subclass of the BitcoinTestFramework class.\n \n-    # Override the set_test_params(), add_options(), setup_chain(), setup_network()\n+    # Override the set_test_params(), skip_test_if_missing_module(), add_options(), setup_chain(), setup_network()\n     # and setup_nodes() methods to customize the test setup as required.\n \n     def set_test_params(self):\n@@ -84,6 +85,9 @@ def set_test_params(self):\n \n         # self.log.info(\"I've finished set_test_params\")  # Oops! Can't run self.log before run_test()\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     # Use add_options() to add specific command-line options for your test.\n     # In practice this is not used very much, since the tests are mostly written\n     # to be run in automated environments without command-line options."
      },
      {
        "sha": "8466f851caed1b496994ccd3027732d46c90092c",
        "filename": "test/functional/feature_bip68_sequence.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_bip68_sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_bip68_sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bip68_sequence.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -25,6 +25,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[], [\"-acceptnonstdtxn=0\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.relayfee = self.nodes[0].getnetworkinfo()[\"relayfee\"]\n "
      },
      {
        "sha": "a1ded5200c3ab2e49194b24245565fe1034da2f4",
        "filename": "test/functional/feature_block.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_block.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -75,6 +75,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.extra_args = [[]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         node = self.nodes[0]  # convenience reference to the node\n "
      },
      {
        "sha": "1296cdb497eb39143ed4fdb788d7de66b13aafd0",
        "filename": "test/functional/feature_blocksdir.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_blocksdir.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_blocksdir.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_blocksdir.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -16,6 +16,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.stop_node(0)\n         shutil.rmtree(self.nodes[0].datadir)"
      },
      {
        "sha": "9a53b62abdb5d81b013c8134ca026bd8d50b6935",
        "filename": "test/functional/feature_cltv.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_cltv.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -57,6 +57,9 @@ def set_test_params(self):\n         self.extra_args = [['-whitelist=127.0.0.1']]\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.nodes[0].add_p2p_connection(P2PInterface())\n "
      },
      {
        "sha": "1124119e2bc971e91c7afcf986a37da9069fc483",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -14,6 +14,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def test_config_file_parser(self):\n         # Assume node is stopped\n "
      },
      {
        "sha": "a2796efa2a396bfd3f58a7366963cb3d551fc941",
        "filename": "test/functional/feature_csv_activation.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_csv_activation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_csv_activation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_csv_activation.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -145,6 +145,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.extra_args = [['-whitelist=127.0.0.1', '-blockversion=4', '-addresstype=legacy']]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def generate_blocks(self, number, version, test_blocks=None):\n         if test_blocks is None:\n             test_blocks = []"
      },
      {
        "sha": "ae1eacf2d7bdd8c989ff25d75d2e29443dc861b6",
        "filename": "test/functional/feature_dbcrash.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_dbcrash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_dbcrash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dbcrash.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -63,6 +63,9 @@ def set_test_params(self):\n         self.node3_args = [\"-blockmaxweight=4000000\"]\n         self.extra_args = [self.node0_args, self.node1_args, self.node2_args, self.node3_args]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.add_nodes(self.num_nodes, extra_args=self.extra_args)\n         self.start_nodes()"
      },
      {
        "sha": "f9e1ef0231bfe40a10f8fc758dc296d2cfb3f71c",
        "filename": "test/functional/feature_dersig.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_dersig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_dersig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dersig.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -45,6 +45,9 @@ def set_test_params(self):\n         self.extra_args = [['-whitelist=127.0.0.1']]\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.nodes[0].add_p2p_connection(P2PInterface())\n "
      },
      {
        "sha": "aaab4279b5f0467cfb2705894bd2aad53d0f6251",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -126,6 +126,9 @@ class EstimateFeeTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 3\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         \"\"\"\n         We'll setup the network to have 3 nodes that all mine with different parameters."
      },
      {
        "sha": "a74c413440fd6a7c01b0c0a170cf00ca54d2d8d7",
        "filename": "test/functional/feature_logging.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_logging.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_logging.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_logging.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -15,6 +15,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def relative_log_path(self, name):\n         return os.path.join(self.nodes[0].datadir, \"regtest\", name)\n "
      },
      {
        "sha": "87c318de9a06a25603282ff88dd12f57e2296fd0",
        "filename": "test/functional/feature_maxuploadtarget.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_maxuploadtarget.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -40,6 +40,9 @@ def set_test_params(self):\n         # Cache for utxos, as the listunspent may take a long time later in the test\n         self.utxo_cache = []\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # Before we connect anything, we first set the time on the node\n         # to be in the past, otherwise things break because the CNode"
      },
      {
        "sha": "5d180c2244d0405d8a3bf82852bbee1a334f6e6b",
        "filename": "test/functional/feature_minchainwork.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_minchainwork.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_minchainwork.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_minchainwork.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -31,6 +31,9 @@ def set_test_params(self):\n         self.extra_args = [[], [\"-minimumchainwork=0x65\"], [\"-minimumchainwork=0x65\"]]\n         self.node_min_work = [0, 101, 101]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         # This test relies on the chain setup being:\n         # node0 <- node1 <- node2"
      },
      {
        "sha": "25a7329a0d1f516c3a70f025ae7ef39ac0994330",
        "filename": "test/functional/feature_notifications.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_notifications.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_notifications.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_notifications.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -13,6 +13,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.alert_filename = os.path.join(self.options.tmpdir, \"alert.txt\")\n         self.block_filename = os.path.join(self.options.tmpdir, \"blocks.txt\")"
      },
      {
        "sha": "a79cc3d34bf48b6bb48e12ef950b9e14bd2068a6",
        "filename": "test/functional/feature_nulldummy.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_nulldummy.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -44,9 +44,12 @@ def set_test_params(self):\n         # normal segwit activation here (and don't use the default always-on behaviour).\n         self.extra_args = [['-whitelist=127.0.0.1', '-vbparams=segwit:0:999999999999', '-addresstype=legacy', \"-deprecatedrpc=addwitnessaddress\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.address = self.nodes[0].getnewaddress()\n-        self.ms_address = self.nodes[0].addmultisigaddress(1,[self.address])['address']\n+        self.ms_address = self.nodes[0].addmultisigaddress(1, [self.address])['address']\n         self.wit_address = self.nodes[0].addwitnessaddress(self.address)\n         self.wit_ms_address = self.nodes[0].addmultisigaddress(1, [self.address], '', 'p2sh-segwit')['address']\n "
      },
      {
        "sha": "772151dc4ba1f5649c3ecf5ac35b18278b9de878",
        "filename": "test/functional/feature_pruning.py",
        "status": "modified",
        "additions": 12,
        "deletions": 7,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_pruning.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -33,15 +33,20 @@ def set_test_params(self):\n \n         # Create nodes 0 and 1 to mine.\n         # Create node 2 to test pruning.\n-        self.full_node_default_args = [\"-maxreceivebuffer=20000\", \"-checkblocks=5\", \"-limitdescendantcount=100\", \"-limitdescendantsize=5000\", \"-limitancestorcount=100\", \"-limitancestorsize=5000\" ]\n+        self.full_node_default_args = [\"-maxreceivebuffer=20000\", \"-checkblocks=5\", \"-limitdescendantcount=100\", \"-limitdescendantsize=5000\", \"-limitancestorcount=100\", \"-limitancestorsize=5000\"]\n         # Create nodes 3 and 4 to test manual pruning (they will be re-started with manual pruning later)\n         # Create nodes 5 to test wallet in prune mode, but do not connect\n-        self.extra_args = [self.full_node_default_args,\n-                           self.full_node_default_args,\n-                           [\"-maxreceivebuffer=20000\", \"-prune=550\"],\n-                           [\"-maxreceivebuffer=20000\"],\n-                           [\"-maxreceivebuffer=20000\"],\n-                           [\"-prune=550\"]]\n+        self.extra_args = [\n+            self.full_node_default_args,\n+            self.full_node_default_args,\n+            [\"-maxreceivebuffer=20000\", \"-prune=550\"],\n+            [\"-maxreceivebuffer=20000\"],\n+            [\"-maxreceivebuffer=20000\"],\n+            [\"-prune=550\"],\n+        ]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n \n     def setup_network(self):\n         self.setup_nodes()"
      },
      {
        "sha": "d78d75dbade14f4c014e7663e7a922319b560abd",
        "filename": "test/functional/feature_rbf.py",
        "status": "modified",
        "additions": 17,
        "deletions": 8,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_rbf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_rbf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_rbf.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -61,17 +61,26 @@ def make_utxo(node, amount, confirmed=True, scriptPubKey=CScript([1])):\n \n     return COutPoint(int(txid, 16), 0)\n \n-class ReplaceByFeeTest(BitcoinTestFramework):\n \n+class ReplaceByFeeTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n-        self.extra_args= [[\"-maxorphantx=1000\",\n-                           \"-whitelist=127.0.0.1\",\n-                           \"-limitancestorcount=50\",\n-                           \"-limitancestorsize=101\",\n-                           \"-limitdescendantcount=200\",\n-                           \"-limitdescendantsize=101\"],\n-                           [\"-mempoolreplacement=0\"]]\n+        self.extra_args = [\n+            [\n+                \"-maxorphantx=1000\",\n+                \"-whitelist=127.0.0.1\",\n+                \"-limitancestorcount=50\",\n+                \"-limitancestorsize=101\",\n+                \"-limitdescendantcount=200\",\n+                \"-limitdescendantsize=101\",\n+            ],\n+            [\n+                \"-mempoolreplacement=0\",\n+            ],\n+        ]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n \n     def run_test(self):\n         # Leave IBD"
      },
      {
        "sha": "3727eeaeae9dde18e13f9727233fc772aa3e23ed",
        "filename": "test/functional/feature_reindex.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_reindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_reindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_reindex.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -18,6 +18,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def reindex(self, justchainstate=False):\n         self.nodes[0].generate(3)\n         blockcount = self.nodes[0].getblockcount()"
      },
      {
        "sha": "2cbfc26e899f4fd83a8dc08a533b00beead62616",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 24,
        "deletions": 3,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -46,9 +46,30 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n         # This test tests SegWit both pre and post-activation, so use the normal BIP9 activation.\n-        self.extra_args = [[\"-rpcserialversion=0\", \"-vbparams=segwit:0:999999999999\", \"-addresstype=legacy\", \"-deprecatedrpc=addwitnessaddress\"],\n-                           [\"-blockversion=4\", \"-rpcserialversion=1\", \"-vbparams=segwit:0:999999999999\", \"-addresstype=legacy\", \"-deprecatedrpc=addwitnessaddress\"],\n-                           [\"-blockversion=536870915\", \"-vbparams=segwit:0:999999999999\", \"-addresstype=legacy\", \"-deprecatedrpc=addwitnessaddress\"]]\n+        self.extra_args = [\n+            [\n+                \"-rpcserialversion=0\",\n+                \"-vbparams=segwit:0:999999999999\",\n+                \"-addresstype=legacy\",\n+                \"-deprecatedrpc=addwitnessaddress\",\n+            ],\n+            [\n+                \"-blockversion=4\",\n+                \"-rpcserialversion=1\",\n+                \"-vbparams=segwit:0:999999999999\",\n+                \"-addresstype=legacy\",\n+                \"-deprecatedrpc=addwitnessaddress\",\n+            ],\n+            [\n+                \"-blockversion=536870915\",\n+                \"-vbparams=segwit:0:999999999999\",\n+                \"-addresstype=legacy\",\n+                \"-deprecatedrpc=addwitnessaddress\",\n+            ],\n+        ]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n \n     def setup_network(self):\n         super().setup_network()"
      },
      {
        "sha": "cf77720437e4c714fb26960f71f73999c2d68253",
        "filename": "test/functional/feature_versionbits_warning.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_versionbits_warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/feature_versionbits_warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_versionbits_warning.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -31,6 +31,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.alert_filename = os.path.join(self.options.tmpdir, \"alert.txt\")\n         # Open and close to create zero-length file"
      },
      {
        "sha": "f311858beeb017b137a739beed9a5bb5636b7e4d",
        "filename": "test/functional/interface_bitcoin_cli.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/interface_bitcoin_cli.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/interface_bitcoin_cli.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_bitcoin_cli.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -12,6 +12,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         \"\"\"Main test logic\"\"\"\n "
      },
      {
        "sha": "afa9de580f0309922fb7e720b0dacf654b3090f5",
        "filename": "test/functional/interface_rest.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/interface_rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/interface_rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_rest.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -43,6 +43,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[\"-rest\"], []]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def test_rest_request(self, uri, http_method='GET', req_type=ReqType.JSON, body='', status=200, ret_type=RetType.JSON):\n         rest_uri = '/rest' + uri\n         if req_type == ReqType.JSON:"
      },
      {
        "sha": "c853ba7e3f8d14c4b47c27ed7a5fea78a242d50e",
        "filename": "test/functional/interface_zmq.py",
        "status": "modified",
        "additions": 12,
        "deletions": 9,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/interface_zmq.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/interface_zmq.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_zmq.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -5,15 +5,16 @@\n \"\"\"Test the ZMQ notification interface.\"\"\"\n import struct\n \n-from test_framework.test_framework import (\n-    BitcoinTestFramework, skip_if_no_bitcoind_zmq, skip_if_no_py3_zmq)\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.messages import CTransaction\n-from test_framework.util import (assert_equal,\n-                                 bytes_to_hex_str,\n-                                 hash256,\n-                                )\n+from test_framework.util import (\n+    assert_equal,\n+    bytes_to_hex_str,\n+    hash256,\n+)\n from io import BytesIO\n \n+\n class ZMQSubscriber:\n     def __init__(self, socket, topic):\n         self.sequence = 0\n@@ -37,10 +38,12 @@ class ZMQTest (BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n \n-    def setup_nodes(self):\n-        skip_if_no_py3_zmq()\n-        skip_if_no_bitcoind_zmq(self)\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_py3_zmq()\n+        self.skip_if_no_bitcoind_zmq()\n+        self.skip_if_no_wallet()\n \n+    def setup_nodes(self):\n         # Import keys\n         self.add_nodes(self.num_nodes)\n         self.start_nodes()"
      },
      {
        "sha": "8847777ba7b308e97c0f5c86cae7d925571d278b",
        "filename": "test/functional/mempool_accept.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mempool_accept.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mempool_accept.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_accept.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -40,6 +40,9 @@ def set_test_params(self):\n             '-acceptnonstdtxn=0',  # Try to mimic main-net\n         ]] * self.num_nodes\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def check_mempool_result(self, result_expected, *args, **kwargs):\n         \"\"\"Wrapper to check result of testmempoolaccept on node_0's mempool\"\"\"\n         result_test = self.nodes[0].testmempoolaccept(*args, **kwargs)"
      },
      {
        "sha": "c0918893cdc9a11d3cdd19634f94fdb4494bcf14",
        "filename": "test/functional/mempool_limit.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_limit.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -15,6 +15,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [[\"-maxmempool=5\", \"-spendzeroconfchange=0\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         txouts = gen_return_txouts()\n         relayfee = self.nodes[0].getnetworkinfo()['relayfee']"
      },
      {
        "sha": "9336547a6b42ba94ea030f986ac72499f8abf9e8",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -18,6 +18,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[\"-maxorphantx=1000\"], [\"-maxorphantx=1000\", \"-limitancestorcount=5\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     # Build a transaction that spends parent_txid:vout\n     # Return amount sent\n     def chain_transaction(self, node, parent_txid, vout, value, fee, num_outputs):"
      },
      {
        "sha": "b4e9d967fd6ccf696a01d2c5be06806143fad1b9",
        "filename": "test/functional/mempool_persist.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mempool_persist.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mempool_persist.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_persist.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -47,6 +47,9 @@ def set_test_params(self):\n         self.num_nodes = 3\n         self.extra_args = [[], [\"-persistmempool=0\"], []]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         chain_height = self.nodes[0].getblockcount()\n         assert_equal(chain_height, 200)"
      },
      {
        "sha": "123f0b4c28b7507ede041d8cfd1f99635c256761",
        "filename": "test/functional/mempool_reorg.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mempool_reorg.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mempool_reorg.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_reorg.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -17,6 +17,9 @@ class MempoolCoinbaseTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     alert_filename = None  # Set by setup_network\n \n     def run_test(self):"
      },
      {
        "sha": "d035ca907a5d778619c0c696993d0e61f9c9ccd0",
        "filename": "test/functional/mempool_resurrect.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mempool_resurrect.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mempool_resurrect.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_resurrect.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -13,6 +13,9 @@ class MempoolCoinbaseTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         node0_address = self.nodes[0].getnewaddress()\n         # Spend block 1/2/3's coinbase transactions"
      },
      {
        "sha": "854d506f0dd712d4cfaf8f6371e1fa6d6684d22f",
        "filename": "test/functional/mempool_spend_coinbase.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mempool_spend_coinbase.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mempool_spend_coinbase.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_spend_coinbase.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -21,6 +21,9 @@ class MempoolSpendCoinbaseTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         chain_height = self.nodes[0].getblockcount()\n         assert_equal(chain_height, 200)"
      },
      {
        "sha": "5b53df832ae62584bce6c4c7cf99a126beaf880a",
        "filename": "test/functional/mining_basic.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mining_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mining_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_basic.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -31,6 +31,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = False\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         node = self.nodes[0]\n "
      },
      {
        "sha": "7d27a2a83a98b3d2fe689e1a155029f38cf473aa",
        "filename": "test/functional/mining_getblocktemplate_longpoll.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mining_getblocktemplate_longpoll.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mining_getblocktemplate_longpoll.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_getblocktemplate_longpoll.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -28,6 +28,9 @@ class GetBlockTemplateLPTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.log.info(\"Warning: this test will take about 70 seconds in the best case. Be patient.\")\n         self.nodes[0].generate(10)"
      },
      {
        "sha": "92590717f3c4dac5f4a3fb8c9a7a97bd3cb9403f",
        "filename": "test/functional/mining_prioritisetransaction.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mining_prioritisetransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/mining_prioritisetransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_prioritisetransaction.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -16,6 +16,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[\"-printpriority=1\"], [\"-printpriority=1\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # Test `prioritisetransaction` required parameters\n         assert_raises_rpc_error(-1, \"prioritisetransaction\", self.nodes[0].prioritisetransaction)"
      },
      {
        "sha": "3a5bdf806b29174152181baa74e463f61eaffb2d",
        "filename": "test/functional/p2p_compactblocks.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_compactblocks.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -102,6 +102,9 @@ def set_test_params(self):\n         self.extra_args = [[\"-vbparams=segwit:0:0\"], [\"-vbparams=segwit:0:999999999999\", \"-txindex\", \"-deprecatedrpc=addwitnessaddress\"]]\n         self.utxos = []\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def build_block_on_tip(self, node, segwit=False):\n         height = node.getblockcount()\n         tip = node.getbestblockhash()"
      },
      {
        "sha": "d589519e450048fba34f6e610d52d2aeb4a145fe",
        "filename": "test/functional/p2p_feefilter.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_feefilter.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -42,6 +42,9 @@ class FeeFilterTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         node1 = self.nodes[1]\n         node0 = self.nodes[0]"
      },
      {
        "sha": "884fb4b063335024baa779dddc871b065bf1967e",
        "filename": "test/functional/p2p_fingerprint.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_fingerprint.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_fingerprint.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_fingerprint.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -30,6 +30,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     # Build a chain of blocks on top of given one\n     def build_chain(self, nblocks, prev_hash, prev_height, prev_median_time):\n         blocks = []"
      },
      {
        "sha": "0a7b83ed73bcad4e72b51b34cce8715d50964872",
        "filename": "test/functional/p2p_invalid_block.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_invalid_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_invalid_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_block.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -24,6 +24,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.extra_args = [[\"-whitelist=127.0.0.1\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # Add p2p connection to node0\n         node = self.nodes[0]  # convenience reference to the node"
      },
      {
        "sha": "4cc43a4fa4eee7631f376d0451faaf02140fcd3c",
        "filename": "test/functional/p2p_invalid_locator.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_invalid_locator.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_invalid_locator.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_locator.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -15,6 +15,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = False\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         node = self.nodes[0]  # convenience reference to the node\n         node.generate(1)  # Get node out of IBD"
      },
      {
        "sha": "5cf0a75ab239cd6f731ea9bdd497c3e7081b8437",
        "filename": "test/functional/p2p_invalid_tx.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_invalid_tx.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_invalid_tx.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_tx.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -26,6 +26,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def bootstrap_p2p(self, *, num_connections=1):\n         \"\"\"Add a P2P connection to the node.\n "
      },
      {
        "sha": "05354d17e1c62788ea2386f61a06b9759aeb232f",
        "filename": "test/functional/p2p_leak.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_leak.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_leak.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_leak.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -93,6 +93,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [['-banscore=' + str(banscore)]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         no_version_bannode = self.nodes[0].add_p2p_connection(CNodeNoVersionBan(), send_version=False, wait_for_verack=False)\n         no_version_idlenode = self.nodes[0].add_p2p_connection(CNodeNoVersionIdle(), send_version=False, wait_for_verack=False)"
      },
      {
        "sha": "ef9c71dc02d105d8ec71c6c19662d55cee29a9db",
        "filename": "test/functional/p2p_node_network_limited.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_node_network_limited.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_node_network_limited.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_node_network_limited.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -34,6 +34,9 @@ def set_test_params(self):\n         self.num_nodes = 3\n         self.extra_args = [['-prune=550', '-addrmantest'], [], []]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def disconnect_all(self):\n         disconnect_nodes(self.nodes[0], 1)\n         disconnect_nodes(self.nodes[1], 0)"
      },
      {
        "sha": "f5ff646978a96dd01a24e52a8ebfb5f91529a459",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -198,6 +198,9 @@ def set_test_params(self):\n         # This test tests SegWit both pre and post-activation, so use the normal BIP9 activation.\n         self.extra_args = [[\"-whitelist=127.0.0.1\", \"-vbparams=segwit:0:999999999999\"], [\"-whitelist=127.0.0.1\", \"-acceptnonstdtxn=0\", \"-vbparams=segwit:0:999999999999\"], [\"-whitelist=127.0.0.1\", \"-vbparams=segwit:0:0\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.setup_nodes()\n         connect_nodes(self.nodes[0], 1)"
      },
      {
        "sha": "9a782c0bb9938cbf1d9c35d5ae7dea1e47d312c8",
        "filename": "test/functional/p2p_sendheaders.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_sendheaders.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -208,6 +208,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def mine_blocks(self, count):\n         \"\"\"Mine count blocks and return the new tip.\"\"\"\n "
      },
      {
        "sha": "232274f59eaecc792f06ba096c8e5d12df253c1d",
        "filename": "test/functional/p2p_unrequested_blocks.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_unrequested_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/p2p_unrequested_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_unrequested_blocks.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -66,6 +66,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[], [\"-minimumchainwork=0x10\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         # Node0 will be used to test behavior of processing unrequested blocks\n         # from peers which are not whitelisted, while Node1 will be used for"
      },
      {
        "sha": "00317a2c08823276bfa8824e8725e2cece40cd08",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -48,6 +48,9 @@ class BlockchainTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.restart_node(0, extra_args=['-stopatheight=207', '-prune=1'])  # Set extra args with pruning after rescan is complete\n "
      },
      {
        "sha": "3cc35a7b9a4e01978d00681ec20d707cfcb4e4a6",
        "filename": "test/functional/rpc_createmultisig.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_createmultisig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_createmultisig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_createmultisig.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -12,8 +12,11 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def get_keys(self):\n-        node0,node1,node2 = self.nodes\n+        node0, node1, node2 = self.nodes\n         self.add = [node1.getnewaddress() for _ in range(self.nkeys)]\n         self.pub = [node1.getaddressinfo(a)[\"pubkey\"] for a in self.add]\n         self.priv = [node1.dumpprivkey(a) for a in self.add]"
      },
      {
        "sha": "cd6e5511c4a596fd0efed495eb182d16dc4f66fc",
        "filename": "test/functional/rpc_deprecated.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_deprecated.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_deprecated.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_deprecated.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -12,6 +12,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.extra_args = [[], [\"-deprecatedrpc=validateaddress\", \"-deprecatedrpc=accounts\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # This test should be used to verify correct behaviour of deprecated\n         # RPC methods with and without the -deprecatedrpc flags. For example:"
      },
      {
        "sha": "daa890ab15620eadecd95369bad549a31b31aa82",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -29,6 +29,9 @@ def set_test_params(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self, split=False):\n         self.setup_nodes()\n "
      },
      {
        "sha": "bc19c60dde0834ad7ade58015e7cf5ae28fd7a21",
        "filename": "test/functional/rpc_getchaintips.py",
        "status": "modified",
        "additions": 10,
        "deletions": 7,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_getchaintips.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_getchaintips.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_getchaintips.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -17,15 +17,18 @@ class GetChainTipsTest (BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n \n-    def run_test (self):\n-        tips = self.nodes[0].getchaintips ()\n-        assert_equal (len (tips), 1)\n-        assert_equal (tips[0]['branchlen'], 0)\n-        assert_equal (tips[0]['height'], 200)\n-        assert_equal (tips[0]['status'], 'active')\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        tips = self.nodes[0].getchaintips()\n+        assert_equal(len(tips), 1)\n+        assert_equal(tips[0]['branchlen'], 0)\n+        assert_equal(tips[0]['height'], 200)\n+        assert_equal(tips[0]['status'], 'active')\n \n         # Split the network and build two chains of different lengths.\n-        self.split_network ()\n+        self.split_network()\n         self.nodes[0].generate(10)\n         self.nodes[2].generate(20)\n         self.sync_all([self.nodes[:2], self.nodes[2:]])"
      },
      {
        "sha": "be096af892c3375b6fbc3765409b00adbf62ca72",
        "filename": "test/functional/rpc_help.py",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_help.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_help.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_help.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -4,9 +4,10 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test RPC help output.\"\"\"\n \n-from test_framework.test_framework import BitcoinTestFramework, is_zmq_enabled\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, assert_raises_rpc_error\n \n+\n class HelpRpcTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n@@ -26,12 +27,16 @@ def run_test(self):\n         # command titles\n         titles = [line[3:-3] for line in node.help().splitlines() if line.startswith('==')]\n \n-        components = ['Blockchain', 'Control', 'Generating', 'Mining', 'Network', 'Rawtransactions', 'Util', 'Wallet']\n+        components = ['Blockchain', 'Control', 'Generating', 'Mining', 'Network', 'Rawtransactions', 'Util']\n+\n+        if self.is_wallet_compiled():\n+            components.append('Wallet')\n \n-        if is_zmq_enabled(self):\n+        if self.is_zmq_compiled():\n             components.append('Zmq')\n \n         assert_equal(titles, components)\n \n+\n if __name__ == '__main__':\n     HelpRpcTest().main()"
      },
      {
        "sha": "84f7cd05fb403f8887f8164f89280b6267332385",
        "filename": "test/functional/rpc_invalidateblock.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_invalidateblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_invalidateblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_invalidateblock.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -14,6 +14,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.setup_nodes()\n "
      },
      {
        "sha": "f383b82bb5e67c00a4fbae556f01efe9be875a56",
        "filename": "test/functional/rpc_preciousblock.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_preciousblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_preciousblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_preciousblock.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -38,6 +38,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.setup_nodes()\n "
      },
      {
        "sha": "7f2c0c1bd4d04db4aaf0d056d6588dd73eb1fdc4",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -20,6 +20,9 @@ def set_test_params(self):\n         self.setup_clean_chain = False\n         self.num_nodes = 3\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # Create and fund a raw tx for sending 10 BTC\n         psbtx1 = self.nodes[0].walletcreatefundedpsbt([], {self.nodes[2].getnewaddress():10})['psbt']"
      },
      {
        "sha": "d86b546c7d14c5f3806ae07e7c5eee5e91c89b25",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -44,6 +44,9 @@ def set_test_params(self):\n         self.num_nodes = 3\n         self.extra_args = [[\"-addresstype=legacy\"], [\"-addresstype=legacy\"], [\"-addresstype=legacy\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self, split=False):\n         super().setup_network()\n         connect_nodes_bi(self.nodes, 0, 2)"
      },
      {
        "sha": "96f9ccdbdbce1c7278033b2793b5838398f08156",
        "filename": "test/functional/rpc_scantxoutset.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_scantxoutset.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_scantxoutset.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_scantxoutset.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -14,6 +14,10 @@ class ScantxoutsetTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.log.info(\"Mining blocks...\")\n         self.nodes[0].generate(110)"
      },
      {
        "sha": "ad0e29b4515633c660745d8e00eb37ac062a48a0",
        "filename": "test/functional/rpc_signmessage.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_signmessage.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_signmessage.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signmessage.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -13,6 +13,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [[\"-addresstype=legacy\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         message = 'This is just a test message'\n "
      },
      {
        "sha": "035f10e6bcdcf9d5e360a94895177ce9e32dfa26",
        "filename": "test/functional/rpc_signrawtransaction.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_signrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_signrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signrawtransaction.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -14,6 +14,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [[\"-deprecatedrpc=signrawtransaction\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def successful_signing_test(self):\n         \"\"\"Create and sign a valid raw transaction with one input.\n "
      },
      {
        "sha": "867ba25022a6766b2ed6606c8426f40780a7941b",
        "filename": "test/functional/rpc_txoutproof.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_txoutproof.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_txoutproof.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_txoutproof.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -15,6 +15,9 @@ def set_test_params(self):\n         # Nodes 0/1 are \"wallet\" nodes, Nodes 2/3 are used for testing\n         self.extra_args = [[], [], [], [\"-txindex\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.setup_nodes()\n         connect_nodes(self.nodes[0], 1)"
      },
      {
        "sha": "bfa6b06f67f2e264fa9dad7eca8f57114f308795",
        "filename": "test/functional/rpc_zmq.py",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_zmq.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/rpc_zmq.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_zmq.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -4,8 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test for the ZMQ RPC methods.\"\"\"\n \n-from test_framework.test_framework import (\n-    BitcoinTestFramework, skip_if_no_py3_zmq, skip_if_no_bitcoind_zmq)\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n \n \n@@ -17,9 +16,11 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_py3_zmq()\n+        self.skip_if_no_bitcoind_zmq()\n+\n     def run_test(self):\n-        skip_if_no_py3_zmq()\n-        skip_if_no_bitcoind_zmq(self)\n         self._test_getzmqnotifications()\n \n     def _test_getzmqnotifications(self):"
      },
      {
        "sha": "57c985b2a2f1972236bf89f122c1fb5772fd5051",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 49,
        "deletions": 22,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -44,6 +44,13 @@ class TestStatus(Enum):\n TEST_EXIT_SKIPPED = 77\n \n \n+class SkipTest(Exception):\n+    \"\"\"This exception is raised to skip a test\"\"\"\n+\n+    def __init__(self, message):\n+        self.message = message\n+\n+\n class BitcoinTestMetaClass(type):\n     \"\"\"Metaclass for BitcoinTestFramework.\n \n@@ -156,6 +163,7 @@ def main(self):\n         try:\n             if self.options.usecli and not self.supports_cli:\n                 raise SkipTest(\"--usecli specified but test does not support using CLI\")\n+            self.skip_test_if_missing_module()\n             self.setup_chain()\n             self.setup_network()\n             self.import_deterministic_coinbase_privkeys()\n@@ -221,6 +229,10 @@ def add_options(self, parser):\n         \"\"\"Override this method to add command-line options to the test\"\"\"\n         pass\n \n+    def skip_test_if_missing_module(self):\n+        \"\"\"Override this method to skip a test if a module is not compiled\"\"\"\n+        pass\n+\n     def setup_chain(self):\n         \"\"\"Override this method to customize blockchain setup\"\"\"\n         self.log.info(\"Initializing test directory \" + self.options.tmpdir)\n@@ -486,30 +498,45 @@ def _initialize_chain_clean(self):\n         for i in range(self.num_nodes):\n             initialize_datadir(self.options.tmpdir, i)\n \n+    def skip_if_no_py3_zmq(self):\n+        \"\"\"Attempt to import the zmq package and skip the test if the import fails.\"\"\"\n+        try:\n+            import zmq  # noqa\n+        except ImportError:\n+            raise SkipTest(\"python3-zmq module not available.\")\n+\n+    def skip_if_no_bitcoind_zmq(self):\n+        \"\"\"Skip the running test if bitcoind has not been compiled with zmq support.\"\"\"\n+        if not self.is_zmq_compiled():\n+            raise SkipTest(\"bitcoind has not been built with zmq enabled.\")\n+\n+    def skip_if_no_wallet(self):\n+        \"\"\"Skip the running test if wallet has not been compiled.\"\"\"\n+        if not self.is_wallet_compiled():\n+            raise SkipTest(\"wallet has not been compiled.\")\n+\n+    def skip_if_no_cli(self):\n+        \"\"\"Skip the running test if bitcoin-cli has not been compiled.\"\"\"\n+        if not self.is_cli_compiled():\n+            raise SkipTest(\"bitcoin-cli has not been compiled.\")\n+\n+    def is_cli_compiled(self):\n+        \"\"\"Checks whether bitcoin-cli was compiled.\"\"\"\n+        config = configparser.ConfigParser()\n+        config.read_file(open(self.options.configfile))\n \n-class SkipTest(Exception):\n-    \"\"\"This exception is raised to skip a test\"\"\"\n-    def __init__(self, message):\n-        self.message = message\n-\n-\n-def skip_if_no_py3_zmq():\n-    \"\"\"Attempt to import the zmq package and skip the test if the import fails.\"\"\"\n-    try:\n-        import zmq  # noqa\n-    except ImportError:\n-        raise SkipTest(\"python3-zmq module not available.\")\n-\n+        return config[\"components\"].getboolean(\"ENABLE_UTILS\")\n \n-def skip_if_no_bitcoind_zmq(test_instance):\n-    \"\"\"Skip the running test if bitcoind has not been compiled with zmq support.\"\"\"\n-    if not is_zmq_enabled(test_instance):\n-        raise SkipTest(\"bitcoind has not been built with zmq enabled.\")\n+    def is_wallet_compiled(self):\n+        \"\"\"Checks whether the wallet module was compiled.\"\"\"\n+        config = configparser.ConfigParser()\n+        config.read_file(open(self.options.configfile))\n \n+        return config[\"components\"].getboolean(\"ENABLE_WALLET\")\n \n-def is_zmq_enabled(test_instance):\n-    \"\"\"Checks whether zmq is enabled or not.\"\"\"\n-    config = configparser.ConfigParser()\n-    config.read_file(open(test_instance.options.configfile))\n+    def is_zmq_compiled(self):\n+        \"\"\"Checks whether the zmq module was compiled.\"\"\"\n+        config = configparser.ConfigParser()\n+        config.read_file(open(self.options.configfile))\n \n-    return config[\"components\"].getboolean(\"ENABLE_ZMQ\")\n+        return config[\"components\"].getboolean(\"ENABLE_ZMQ\")"
      },
      {
        "sha": "37b378e9ca87477a0a120f9031b5998569be4437",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -236,8 +236,6 @@ def main():\n \n     logging.debug(\"Temporary test directory at %s\" % tmpdir)\n \n-    enable_wallet = config[\"components\"].getboolean(\"ENABLE_WALLET\")\n-    enable_utils = config[\"components\"].getboolean(\"ENABLE_UTILS\")\n     enable_bitcoind = config[\"components\"].getboolean(\"ENABLE_BITCOIND\")\n \n     if config[\"environment\"][\"EXEEXT\"] == \".exe\" and not args.force:\n@@ -246,9 +244,9 @@ def main():\n         print(\"Tests currently disabled on Windows by default. Use --force option to enable\")\n         sys.exit(0)\n \n-    if not (enable_wallet and enable_utils and enable_bitcoind):\n-        print(\"No functional tests to run. Wallet, utils, and bitcoind must all be enabled\")\n-        print(\"Rerun `configure` with -enable-wallet, -with-utils and -with-daemon and rerun make\")\n+    if not enable_bitcoind:\n+        print(\"No functional tests to run.\")\n+        print(\"Rerun ./configure with --with-daemon and then make\")\n         sys.exit(0)\n \n     # Build list of tests"
      },
      {
        "sha": "e5ac2c8bd45971c5673d765f84dd5620e03666fc",
        "filename": "test/functional/wallet_abandonconflict.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_abandonconflict.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -20,6 +20,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[\"-minrelaytxfee=0.00001\"], []]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.nodes[1].generate(100)\n         sync_blocks(self.nodes)"
      },
      {
        "sha": "9b398ef346c510a87e842e4687d79a1eed9a4fb6",
        "filename": "test/functional/wallet_address_types.py",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_address_types.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_address_types.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_address_types.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -63,6 +63,7 @@\n     sync_mempools,\n )\n \n+\n class AddressTypeTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 6\n@@ -72,9 +73,12 @@ def set_test_params(self):\n             [\"-addresstype=p2sh-segwit\", \"-changetype=bech32\"],\n             [\"-addresstype=bech32\"],\n             [\"-changetype=p2sh-segwit\"],\n-            []\n+            [],\n         ]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.setup_nodes()\n "
      },
      {
        "sha": "32ec385fa1264c0df62fb64d0d274048acacaf0a",
        "filename": "test/functional/wallet_backup.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_backup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_backup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_backup.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -45,6 +45,9 @@ def set_test_params(self):\n         # nodes 1, 2,3 are spenders, let's give them a keypool=100\n         self.extra_args = [[\"-keypool=100\"], [\"-keypool=100\"], [\"-keypool=100\"], []]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self, split=False):\n         self.setup_nodes()\n         connect_nodes(self.nodes[0], 3)"
      },
      {
        "sha": "4079d054914b637d998a076d33d7e84e53242f99",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -23,6 +23,9 @@ def set_test_params(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.add_nodes(4)\n         self.start_node(0)"
      },
      {
        "sha": "b9fe6c66c5096fcdda378999ca95ab67ec223818",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -31,8 +31,13 @@ class BumpFeeTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n-        self.extra_args = [[\"-deprecatedrpc=addwitnessaddress\", \"-walletrbf={}\".format(i)]\n-                           for i in range(self.num_nodes)]\n+        self.extra_args = [[\n+            \"-deprecatedrpc=addwitnessaddress\",\n+            \"-walletrbf={}\".format(i),\n+        ] for i in range(self.num_nodes)]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n \n     def run_test(self):\n         # Encrypt wallet for test_locked_wallet_fails test"
      },
      {
        "sha": "34ff52525579b55710370dfe49df6e011ddce928",
        "filename": "test/functional/wallet_disableprivatekeys.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_disableprivatekeys.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_disableprivatekeys.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_disableprivatekeys.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -17,6 +17,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.supports_cli = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         node = self.nodes[0]\n         self.log.info(\"Test disableprivatekeys creation.\")"
      },
      {
        "sha": "db731b2a346227a22b77d70ca7435ccc6403dc24",
        "filename": "test/functional/wallet_dump.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_dump.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -87,6 +87,9 @@ def set_test_params(self):\n         self.extra_args = [[\"-keypool=90\", \"-addresstype=legacy\", \"-deprecatedrpc=addwitnessaddress\"]]\n         self.rpc_timeout = 120\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self, split=False):\n         self.add_nodes(self.num_nodes, extra_args=self.extra_args)\n         self.start_nodes()"
      },
      {
        "sha": "d8c27b09d96e643624b948b386e1d157c9a75d41",
        "filename": "test/functional/wallet_encryption.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_encryption.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_encryption.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_encryption.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -19,6 +19,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         passphrase = \"WalletPassphrase\"\n         passphrase2 = \"SecondWalletPassphrase\""
      },
      {
        "sha": "0c67982bbeb2930bdd0b3afd1796deb269baae63",
        "filename": "test/functional/wallet_fallbackfee.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_fallbackfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_fallbackfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_fallbackfee.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -11,6 +11,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.nodes[0].generate(101)\n "
      },
      {
        "sha": "9d61483868819137a0e8091e0c0ca298e6cad0b4",
        "filename": "test/functional/wallet_groups.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_groups.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_groups.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_groups.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -23,7 +23,10 @@ def set_test_params(self):\n         self.extra_args = [[], [], ['-avoidpartialspends']]\n         self.rpc_timewait = 120\n \n-    def run_test (self):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n         # Mine some coins\n         self.nodes[0].generate(110)\n "
      },
      {
        "sha": "48e71f6c40baf22d8062b16c9c471b3c08136981",
        "filename": "test/functional/wallet_hd.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_hd.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -21,6 +21,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[], ['-keypool=0']]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # Make sure can't switch off usehd after wallet creation\n         self.stop_node(1)"
      },
      {
        "sha": "aa4e37ed602ca659ed04a92ab15af3440d3885b3",
        "filename": "test/functional/wallet_import_rescan.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_import_rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_import_rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_import_rescan.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -109,6 +109,9 @@ class ImportRescanTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2 + len(IMPORT_NODES)\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         extra_args = [[\"-addresstype=legacy\"] for _ in range(self.num_nodes)]\n         for i, import_node in enumerate(IMPORT_NODES, 2):"
      },
      {
        "sha": "3dd296d603fcaacb732fdc6fc0b59751425e2cb9",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -12,6 +12,9 @@ def set_test_params(self):\n         self.extra_args = [[\"-addresstype=legacy\"], [\"-addresstype=legacy\"]]\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.setup_nodes()\n "
      },
      {
        "sha": "26b181db339b5a5daec285510d96929aba9a08e9",
        "filename": "test/functional/wallet_importprunedfunds.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_importprunedfunds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_importprunedfunds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importprunedfunds.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -16,6 +16,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.log.info(\"Mining blocks...\")\n         self.nodes[0].generate(101)"
      },
      {
        "sha": "acc336e4d5f78080121f8d544b120b476191848a",
        "filename": "test/functional/wallet_keypool.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -13,6 +13,9 @@ class KeyPoolTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         nodes = self.nodes\n         addr_before_encrypting = nodes[0].getnewaddress()"
      },
      {
        "sha": "f1a441c399733bb3f3f0da0d5f4f4109785722ff",
        "filename": "test/functional/wallet_keypool_topup.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_keypool_topup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_keypool_topup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool_topup.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -27,6 +27,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[], ['-keypool=100']]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         wallet_path = os.path.join(self.nodes[1].datadir, \"regtest\", \"wallets\", \"wallet.dat\")\n         wallet_backup_path = os.path.join(self.nodes[1].datadir, \"wallet.bak\")"
      },
      {
        "sha": "6f9123a0892acebdbcec0f221e36d07aecd76365",
        "filename": "test/functional/wallet_labels.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_labels.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_labels.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_labels.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -30,6 +30,9 @@ def setup_network(self):\n         \"\"\"Don't connect nodes.\"\"\"\n         self.setup_nodes()\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         \"\"\"Run the test twice - once using the accounts API and once using the labels API.\"\"\"\n         self.log.info(\"Test accounts API\")"
      },
      {
        "sha": "3485c4470f6b2a42de323785d5c4ff5b5c956568",
        "filename": "test/functional/wallet_listreceivedby.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_listreceivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_listreceivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listreceivedby.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -23,6 +23,9 @@ def import_deterministic_coinbase_privkeys(self):\n         super().import_deterministic_coinbase_privkeys()\n         self.num_cb_reward_addresses = len(self.nodes[1].listreceivedbyaddress(minconf=0, include_empty=True, include_watchonly=True))\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # Generate block to get out of IBD\n         self.nodes[0].generate(1)"
      },
      {
        "sha": "53e671cd3b0ac1172a3b5eaba8511ba04e4606d8",
        "filename": "test/functional/wallet_listsinceblock.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_listsinceblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_listsinceblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listsinceblock.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -12,6 +12,9 @@ def set_test_params(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.nodes[2].generate(101)\n         self.sync_all()"
      },
      {
        "sha": "5a17395abdb82dde8f3d9c3d35c5aadea26db49b",
        "filename": "test/functional/wallet_listtransactions.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listtransactions.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -27,6 +27,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.enable_mocktime()\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # Simple send, 0 to 1:\n         txid = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.1)"
      },
      {
        "sha": "435821ec4804d9e4c05e4d2cb4e98c126bf2784f",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -23,6 +23,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.supports_cli = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         node = self.nodes[0]\n "
      },
      {
        "sha": "00bf58d7096597d47aa78405871923b131b65cad",
        "filename": "test/functional/wallet_resendwallettransactions.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_resendwallettransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_resendwallettransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_resendwallettransactions.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -12,6 +12,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [['--walletbroadcast=false']]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # Should raise RPC_WALLET_ERROR (-4) if walletbroadcast is disabled.\n         assert_raises_rpc_error(-4, \"Error: Wallet transaction broadcasting is disabled with -walletbroadcast\", self.nodes[0].resendwallettransactions)"
      },
      {
        "sha": "d78c105c174903e2a290fc5ca94a559047cffd03",
        "filename": "test/functional/wallet_txn_clone.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_clone.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -16,6 +16,9 @@ class TxnMallTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def add_options(self, parser):\n         parser.add_argument(\"--mineblock\", dest=\"mine_block\", default=False, action=\"store_true\",\n                             help=\"Test double-spend of 1-confirmed transaction\")"
      },
      {
        "sha": "f114d5ab688890f352ac14be07086f4e70268eeb",
        "filename": "test/functional/wallet_txn_doublespend.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_doublespend.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -18,6 +18,9 @@ class TxnMallTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def add_options(self, parser):\n         parser.add_argument(\"--mineblock\", dest=\"mine_block\", default=False, action=\"store_true\",\n                             help=\"Test double-spend of 1-confirmed transaction\")"
      },
      {
        "sha": "adebff360a5ae7f6d77801091007f6868fd54829",
        "filename": "test/functional/wallet_zapwallettxes.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7adb32e383bbbdb473eb470e4a6872b582cac80/test/functional/wallet_zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_zapwallettxes.py?ref=f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "patch": "@@ -26,6 +26,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.log.info(\"Mining blocks...\")\n         self.nodes[0].generate(1)"
      }
    ]
  },
  {
    "sha": "29899ecd366748c541be15a330f64ce68c948432",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOTg5OWVjZDM2Njc0OGM1NDFiZTE1YTMzMGY2NGNlNjhjOTQ4NDMy",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-08-14T09:26:30Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-25T02:02:42Z"
      },
      "message": "Import CInv from correct module\n\nGithub-Pull: #13965\nRebased-From: a9cf5c9623ad547d9aeebea2b51c2afcfc0f3f4f",
      "tree": {
        "sha": "42fd88d2d03b145e0c7ad40ec71632be404a9829",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/42fd88d2d03b145e0c7ad40ec71632be404a9829"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/29899ecd366748c541be15a330f64ce68c948432",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29899ecd366748c541be15a330f64ce68c948432",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/29899ecd366748c541be15a330f64ce68c948432",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29899ecd366748c541be15a330f64ce68c948432/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7adb32e383bbbdb473eb470e4a6872b582cac80",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f7adb32e383bbbdb473eb470e4a6872b582cac80"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8d954b70f6cf7f36b19d0ce8c8c28a39f66eda63",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29899ecd366748c541be15a330f64ce68c948432/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29899ecd366748c541be15a330f64ce68c948432/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=29899ecd366748c541be15a330f64ce68c948432",
        "patch": "@@ -15,8 +15,8 @@\n \n # Avoid wildcard * imports if possible\n from test_framework.blocktools import (create_block, create_coinbase)\n+from test_framework.messages import CInv\n from test_framework.mininode import (\n-    CInv,\n     P2PInterface,\n     mininode_lock,\n     msg_block,"
      }
    ]
  },
  {
    "sha": "5f51fd6d5966a052addd7e91f74ec66cd5777b37",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZjUxZmQ2ZDU5NjZhMDUyYWRkZDdlOTFmNzRlYzY2Y2Q1Nzc3YjM3",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-09-06T13:59:42Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-25T02:03:04Z"
      },
      "message": "doc/descriptors.md tweaks\n\nAdd some implementation details, and tweak phrasing in examples section to be\nmore explicit about how script expressions are used for matching.\n\nGithub-Pull: #14161\nRebased-From: eb494125624eb3d311c6b2e45ce403c61faddd62",
      "tree": {
        "sha": "52afd9db908f3cbf1b75ac494adea6dbe144f205",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/52afd9db908f3cbf1b75ac494adea6dbe144f205"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f51fd6d5966a052addd7e91f74ec66cd5777b37",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f51fd6d5966a052addd7e91f74ec66cd5777b37",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5f51fd6d5966a052addd7e91f74ec66cd5777b37",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f51fd6d5966a052addd7e91f74ec66cd5777b37/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29899ecd366748c541be15a330f64ce68c948432",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29899ecd366748c541be15a330f64ce68c948432",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29899ecd366748c541be15a330f64ce68c948432"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 25,
      "deletions": 17
    },
    "files": [
      {
        "sha": "d97e838d7ed5d79d0d27696c868c2806d2898c75",
        "filename": "doc/descriptors.md",
        "status": "modified",
        "additions": 25,
        "deletions": 17,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f51fd6d5966a052addd7e91f74ec66cd5777b37/doc/descriptors.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f51fd6d5966a052addd7e91f74ec66cd5777b37/doc/descriptors.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/descriptors.md?ref=5f51fd6d5966a052addd7e91f74ec66cd5777b37",
        "patch": "@@ -22,19 +22,19 @@ Output descriptors currently support:\n \n ## Examples\n \n-- `pk(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)` represents a P2PK output.\n-- `pkh(02c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5)` represents a P2PKH output.\n-- `wpkh(02f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9)` represents a P2WPKH output.\n-- `sh(wpkh(03fff97bd5755eeea420453a14355235d382f6472f8568a18b2f057a1460297556))` represents a P2SH-P2WPKH output.\n-- `combo(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)` represents a P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH output.\n-- `sh(wsh(pkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13)))` represents a (overly complicated) P2SH-P2WSH-P2PKH output.\n-- `multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc)` represents a bare *1-of-2* multisig.\n-- `sh(multi(2,022f01e5e15cca351daff3843fb70f3c2f0a1bdd05e5af888a67784ef3e10a2a01,03acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe))` represents a P2SH *2-of-2* multisig.\n-- `wsh(multi(2,03a0434d9e47f3c86235477c7b1ae6ae5d3442d49b1943c2b752a68e2a47e247c7,03774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb,03d01115d548e7561b15c38f004d734633687cf4419620095bc5b0f47070afe85a))` represents a P2WSH *2-of-3* multisig.\n-- `sh(wsh(multi(1,03f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8,03499fdf9e895e719cfd64e67f07d38e3226aa7b63678949e6e49b241a60e823e4,02d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e)))` represents a P2SH-P2WSH *1-of-3* multisig.\n-- `pk(xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8)` refers to a single P2PK output, using the public key part from the specified xpub.\n-- `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1'/2)` refers to a single P2PKH output, using child key *1'/2* of the specified xpub.\n-- `wsh(multi(1,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/1/0/*,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/0/*))` refers to a chain of *1-of-2* P2WSH multisig outputs, using public keys taken from two HD chains with corresponding derivation paths.\n+- `pk(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)` matches a P2PK output with the specified public key.\n+- `pkh(02c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5)` matches a P2PKH output with the specified public key.\n+- `wpkh(02f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9)` matches a P2WPKH output with the specified public key.\n+- `sh(wpkh(03fff97bd5755eeea420453a14355235d382f6472f8568a18b2f057a1460297556))` matches a P2SH-P2WPKH output with the specified public key.\n+- `combo(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)` matches any P2PK, P2PKH, P2WPKH, or P2SH-P2WPKH output with the specified public key.\n+- `sh(wsh(pkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13)))` matches an (overly complicated) P2SH-P2WSH-P2PKH output with the specified public key.\n+- `multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc)` matches a bare *1-of-2* multisig output with keys in the specified order.\n+- `sh(multi(2,022f01e5e15cca351daff3843fb70f3c2f0a1bdd05e5af888a67784ef3e10a2a01,03acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe))` matches a P2SH *2-of-2* multisig output with keys in the specified order.\n+- `wsh(multi(2,03a0434d9e47f3c86235477c7b1ae6ae5d3442d49b1943c2b752a68e2a47e247c7,03774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb,03d01115d548e7561b15c38f004d734633687cf4419620095bc5b0f47070afe85a))` matches a P2WSH *2-of-3* multisig output with keys in the specified order.\n+- `sh(wsh(multi(1,03f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8,03499fdf9e895e719cfd64e67f07d38e3226aa7b63678949e6e49b241a60e823e4,02d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e)))` matches a P2SH-P2WSH *1-of-3* multisig output with keys in the specified order.\n+- `pk(xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8)` matches a P2PK output with the public key of the specified xpub.\n+- `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1'/2)` matches a P2PKH output with child key *1'/2* of the specified xpub.\n+- `wsh(multi(1,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/1/0/*,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/0/0/*))` matches any *1-of-2* P2WSH multisig output where the first multisig key is the *1/0/`i`* child of the first specified xpub and the second multisig key is the *0/0/`i`* child of the second specified xpub, and `i` is any number in a configurable range (`0-1000` by default).\n \n ## Reference\n \n@@ -91,6 +91,14 @@ on Bitcoin's OP_CHECKMULTISIG opcode. To support these, we introduce the\n multisig policy, where any *k* out of the *n* provided public keys must\n sign.\n \n+Key order is significant. A `multi()` expression will only match multisig\n+scripts with keys in the specified order. Also, to prevent a combinatorial\n+explosion of the search space, if more than one `multi()` key arguments is a\n+BIP32 wildcard path ending in `/*` or `*'`, the `multi()` expression only\n+matches multisig scripts with the `i`th child key from each wildcard path in\n+lockstep, rather than scripts with any combination of child keys from each\n+wildcard path.\n+\n ### BIP32 derived keys and chains\n \n Most modern wallet software and hardware uses keys that are derived using\n@@ -101,7 +109,7 @@ path consists of a sequence of 0 or more integers (in the range\n *0..2<sup>31</sup>-1*) each optionally followed by `'` or `h`, and\n separated by `/` characters. The string may optionally end with the\n literal `/*` or `/*'` (or `/*h`) to refer to all unhardened or hardened\n-child keys instead.\n+child keys in a configurable range (by default `0-1000`, inclusive).\n \n Whenever a public key is described using a hardened derivation step, the\n script cannot be computed without access to the corresponding private\n@@ -119,6 +127,6 @@ steps, or for dumping wallet descriptors including private key material.\n \n In order to easily represent the sets of scripts currently supported by\n existing Bitcoin Core wallets, a convenience function `combo` is\n-provided, which takes as input a public key, and constructs the P2PK,\n-P2PKH, P2WPKH, and P2SH-P2WPH scripts for that key. In case the key is\n-uncompressed, it only constructs P2PK and P2PKH.\n+provided, which takes as input a public key, and matches P2PK,\n+P2PKH, P2WPKH, or P2SH-P2WPH scripts for that key. In case the key is\n+uncompressed, it only matches the P2PK or P2PKH scripts.\n\\ No newline at end of file"
      }
    ]
  },
  {
    "sha": "703a24418ccecd9e78d629808a1f8d6a8b410c77",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MDNhMjQ0MThjY2VjZDllNzhkNjI5ODA4YTFmOGQ2YThiNDEwYzc3",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-10-17T15:41:22Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-25T02:03:08Z"
      },
      "message": "descriptors.md: Refer to descriptors as describing instead of matching\n\nGithub-Pull: #14161\nRebased-From: eeeaa29214ab99e7f491b21d21bf362a86a48305",
      "tree": {
        "sha": "9a5fa324b7d2af4ef7360c89bd9af55243160d7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a5fa324b7d2af4ef7360c89bd9af55243160d7f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/703a24418ccecd9e78d629808a1f8d6a8b410c77",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/703a24418ccecd9e78d629808a1f8d6a8b410c77",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/703a24418ccecd9e78d629808a1f8d6a8b410c77",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/703a24418ccecd9e78d629808a1f8d6a8b410c77/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5f51fd6d5966a052addd7e91f74ec66cd5777b37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f51fd6d5966a052addd7e91f74ec66cd5777b37",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f51fd6d5966a052addd7e91f74ec66cd5777b37"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 24,
      "deletions": 23
    },
    "files": [
      {
        "sha": "47e15e0502d1fbd5788b8c9c32ab54601abff2e4",
        "filename": "doc/descriptors.md",
        "status": "modified",
        "additions": 24,
        "deletions": 23,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/703a24418ccecd9e78d629808a1f8d6a8b410c77/doc/descriptors.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/703a24418ccecd9e78d629808a1f8d6a8b410c77/doc/descriptors.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/descriptors.md?ref=703a24418ccecd9e78d629808a1f8d6a8b410c77",
        "patch": "@@ -22,19 +22,19 @@ Output descriptors currently support:\n \n ## Examples\n \n-- `pk(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)` matches a P2PK output with the specified public key.\n-- `pkh(02c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5)` matches a P2PKH output with the specified public key.\n-- `wpkh(02f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9)` matches a P2WPKH output with the specified public key.\n-- `sh(wpkh(03fff97bd5755eeea420453a14355235d382f6472f8568a18b2f057a1460297556))` matches a P2SH-P2WPKH output with the specified public key.\n-- `combo(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)` matches any P2PK, P2PKH, P2WPKH, or P2SH-P2WPKH output with the specified public key.\n-- `sh(wsh(pkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13)))` matches an (overly complicated) P2SH-P2WSH-P2PKH output with the specified public key.\n-- `multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc)` matches a bare *1-of-2* multisig output with keys in the specified order.\n-- `sh(multi(2,022f01e5e15cca351daff3843fb70f3c2f0a1bdd05e5af888a67784ef3e10a2a01,03acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe))` matches a P2SH *2-of-2* multisig output with keys in the specified order.\n-- `wsh(multi(2,03a0434d9e47f3c86235477c7b1ae6ae5d3442d49b1943c2b752a68e2a47e247c7,03774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb,03d01115d548e7561b15c38f004d734633687cf4419620095bc5b0f47070afe85a))` matches a P2WSH *2-of-3* multisig output with keys in the specified order.\n-- `sh(wsh(multi(1,03f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8,03499fdf9e895e719cfd64e67f07d38e3226aa7b63678949e6e49b241a60e823e4,02d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e)))` matches a P2SH-P2WSH *1-of-3* multisig output with keys in the specified order.\n-- `pk(xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8)` matches a P2PK output with the public key of the specified xpub.\n-- `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1'/2)` matches a P2PKH output with child key *1'/2* of the specified xpub.\n-- `wsh(multi(1,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/1/0/*,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/0/0/*))` matches any *1-of-2* P2WSH multisig output where the first multisig key is the *1/0/`i`* child of the first specified xpub and the second multisig key is the *0/0/`i`* child of the second specified xpub, and `i` is any number in a configurable range (`0-1000` by default).\n+- `pk(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)` describes a P2PK output with the specified public key.\n+- `pkh(02c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5)` describes a P2PKH output with the specified public key.\n+- `wpkh(02f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9)` describes a P2WPKH output with the specified public key.\n+- `sh(wpkh(03fff97bd5755eeea420453a14355235d382f6472f8568a18b2f057a1460297556))` describes a P2SH-P2WPKH output with the specified public key.\n+- `combo(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)` describes any P2PK, P2PKH, P2WPKH, or P2SH-P2WPKH output with the specified public key.\n+- `sh(wsh(pkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13)))` describes an (overly complicated) P2SH-P2WSH-P2PKH output with the specified public key.\n+- `multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc)` describes a bare *1-of-2* multisig output with keys in the specified order.\n+- `sh(multi(2,022f01e5e15cca351daff3843fb70f3c2f0a1bdd05e5af888a67784ef3e10a2a01,03acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe))` describes a P2SH *2-of-2* multisig output with keys in the specified order.\n+- `wsh(multi(2,03a0434d9e47f3c86235477c7b1ae6ae5d3442d49b1943c2b752a68e2a47e247c7,03774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb,03d01115d548e7561b15c38f004d734633687cf4419620095bc5b0f47070afe85a))` describes a P2WSH *2-of-3* multisig output with keys in the specified order.\n+- `sh(wsh(multi(1,03f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8,03499fdf9e895e719cfd64e67f07d38e3226aa7b63678949e6e49b241a60e823e4,02d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e)))` describes a P2SH-P2WSH *1-of-3* multisig output with keys in the specified order.\n+- `pk(xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8)` describes a P2PK output with the public key of the specified xpub.\n+- `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1'/2)` describes a P2PKH output with child key *1'/2* of the specified xpub.\n+- `wsh(multi(1,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/1/0/*,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/0/0/*))` describes a set of *1-of-2* P2WSH multisig outputs where the first multisig key is the *1/0/`i`* child of the first specified xpub and the second multisig key is the *0/0/`i`* child of the second specified xpub, and `i` is any number in a configurable range (`0-1000` by default).\n \n ## Reference\n \n@@ -91,13 +91,14 @@ on Bitcoin's OP_CHECKMULTISIG opcode. To support these, we introduce the\n multisig policy, where any *k* out of the *n* provided public keys must\n sign.\n \n-Key order is significant. A `multi()` expression will only match multisig\n-scripts with keys in the specified order. Also, to prevent a combinatorial\n-explosion of the search space, if more than one `multi()` key arguments is a\n-BIP32 wildcard path ending in `/*` or `*'`, the `multi()` expression only\n-matches multisig scripts with the `i`th child key from each wildcard path in\n-lockstep, rather than scripts with any combination of child keys from each\n-wildcard path.\n+Key order is significant. A `multi()` expression describes a multisig script\n+with keys in the specified order, and in a search for TXOs, it will not match\n+outputs with multisig scriptPubKeys that have the same keys in a different\n+order. Also, to prevent a combinatorial explosion of the search space, if more\n+than one of the `multi()` key arguments is a BIP32 wildcard path ending in `/*`\n+or `*'`, the `multi()` expression only matches multisig scripts with the `i`th\n+child key from each wildcard path in lockstep, rather than scripts with any\n+combination of child keys from each wildcard path.\n \n ### BIP32 derived keys and chains\n \n@@ -127,6 +128,6 @@ steps, or for dumping wallet descriptors including private key material.\n \n In order to easily represent the sets of scripts currently supported by\n existing Bitcoin Core wallets, a convenience function `combo` is\n-provided, which takes as input a public key, and matches P2PK,\n-P2PKH, P2WPKH, or P2SH-P2WPH scripts for that key. In case the key is\n-uncompressed, it only matches the P2PK or P2PKH scripts.\n\\ No newline at end of file\n+provided, which takes as input a public key, and describes a set of P2PK,\n+P2PKH, P2WPKH, and P2SH-P2WPH scripts for that key. In case the key is\n+uncompressed, the set only includes P2PK and P2PKH scripts.\n\\ No newline at end of file"
      }
    ]
  },
  {
    "sha": "9461f98c534ab64ae404085ffb309ec276e3c902",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NDYxZjk4YzUzNGFiNjRhZTQwNDA4NWZmYjMwOWVjMjc2ZTNjOTAy",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-08-20T19:24:55Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-25T02:03:20Z"
      },
      "message": "Disable wallet and address book Qt tests on macOS minimal platform\n\nmacOS Qt minimal platform is frequently broken, and these are currently failing\nwith Qt 5.11.1.\n\nThe tests do pass when run on the full cocoa platform\n(with `test_bitcoin-qt -platform cocoa`).\n\nGithub-Pull: #14011\nRebased-From: a3197c5294df4711bab0ff6dcdd061ceab115c7d",
      "tree": {
        "sha": "4d3b654cc5d8f7d5cd0bbf99625347cfbac87816",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d3b654cc5d8f7d5cd0bbf99625347cfbac87816"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9461f98c534ab64ae404085ffb309ec276e3c902",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9461f98c534ab64ae404085ffb309ec276e3c902",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9461f98c534ab64ae404085ffb309ec276e3c902",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9461f98c534ab64ae404085ffb309ec276e3c902/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "703a24418ccecd9e78d629808a1f8d6a8b410c77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/703a24418ccecd9e78d629808a1f8d6a8b410c77",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/703a24418ccecd9e78d629808a1f8d6a8b410c77"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 23,
      "deletions": 0
    },
    "files": [
      {
        "sha": "35258460441f428803d52f795017694baf95800f",
        "filename": "src/qt/test/addressbooktests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9461f98c534ab64ae404085ffb309ec276e3c902/src/qt/test/addressbooktests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9461f98c534ab64ae404085ffb309ec276e3c902/src/qt/test/addressbooktests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/addressbooktests.cpp?ref=9461f98c534ab64ae404085ffb309ec276e3c902",
        "patch": "@@ -17,6 +17,7 @@\n #include <key_io.h>\n #include <wallet/wallet.h>\n \n+#include <QApplication>\n #include <QTimer>\n #include <QMessageBox>\n \n@@ -139,5 +140,16 @@ void TestAddAddressesToSendBook()\n \n void AddressBookTests::addressBookTests()\n {\n+#ifdef Q_OS_MAC\n+    if (QApplication::platformName() == \"minimal\") {\n+        // Disable for mac on \"minimal\" platform to avoid crashes inside the Qt\n+        // framework when it tries to look up unimplemented cocoa functions,\n+        // and fails to handle returned nulls\n+        // (https://bugreports.qt.io/browse/QTBUG-49686).\n+        QWARN(\"Skipping AddressBookTests on mac build with 'minimal' platform set due to Qt bugs. To run AppTests, invoke \"\n+              \"with 'test_bitcoin-qt -platform cocoa' on mac, or else use a linux or windows build.\");\n+        return;\n+    }\n+#endif\n     TestAddAddressesToSendBook();\n }"
      },
      {
        "sha": "9598d64845c30f0e505b257a1310961d0afb8a1c",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9461f98c534ab64ae404085ffb309ec276e3c902/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9461f98c534ab64ae404085ffb309ec276e3c902/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=9461f98c534ab64ae404085ffb309ec276e3c902",
        "patch": "@@ -243,5 +243,16 @@ void TestGUI()\n \n void WalletTests::walletTests()\n {\n+#ifdef Q_OS_MAC\n+    if (QApplication::platformName() == \"minimal\") {\n+        // Disable for mac on \"minimal\" platform to avoid crashes inside the Qt\n+        // framework when it tries to look up unimplemented cocoa functions,\n+        // and fails to handle returned nulls\n+        // (https://bugreports.qt.io/browse/QTBUG-49686).\n+        QWARN(\"Skipping WalletTests on mac build with 'minimal' platform set due to Qt bugs. To run AppTests, invoke \"\n+              \"with 'test_bitcoin-qt -platform cocoa' on mac, or else use a linux or windows build.\");\n+        return;\n+    }\n+#endif\n     TestGUI();\n }"
      }
    ]
  },
  {
    "sha": "eb2cc84a31fb923b2b25b979682904cb81edec7e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYjJjYzg0YTMxZmI5MjNiMmIyNWI5Nzk2ODI5MDRjYjgxZWRlYzdl",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-10-18T18:44:22Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-10-25T13:49:36Z"
      },
      "message": "[macOS] Remove DS_Store WindowBounds bytes object\n\nGithub-Pull: #14416\nRebased-From: 43719e0a3411e6a08e04908332cb44adfa00c6a2\nTree-SHA512: 0b5987abf34a8c62c3f704c4ca3c9837a23fbce11954740461833099157db94418886001993f9f1a0b3252c923bd049bc1e1d0f99d04205c889270755a8cd245",
      "tree": {
        "sha": "ba60ade2d11754d338b8800a718603d10f621c4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba60ade2d11754d338b8800a718603d10f621c4f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eb2cc84a31fb923b2b25b979682904cb81edec7e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlvRyfAACgkQHkrtYphs\n0l0Eowf/cFRX9+ztZmHevxww2HRG3RxgeDQ0ilgSBHTRZBBSbfSOEa6UOPenw51I\nxwRdZFoHEXi1sSOsgPaaappoeU0MJY1oeBzPdp2RPgrH/NBni0drsBuOqG64r1a0\niylMEnzQGA39HT4ozqiQoA/IgmslXt97/K8c6nHY5Ns92ScZpRWSnB95GWGA6Bpy\np34JtkmFi2cNFUbMzgJvENWe8jQXAx5CZ4Q7h4S3KW38oRQ9bR+gpg2UwoIhj7LR\nJHY/i47fSKaVzMh5a9ucw1ajXzeUNeVM9jJFR7wkz6eL0tMkhOKQAuN470N7f6Ly\nBvi46hWhndsItVzjS+56A7211oO1SA==\n=74Vn\n-----END PGP SIGNATURE-----",
        "payload": "tree ba60ade2d11754d338b8800a718603d10f621c4f\nparent 1b5af2c177ee31109fdd710bc1f1f4f922cedaef\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1539888262 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1540475376 +0200\n\n[macOS] Remove DS_Store WindowBounds bytes object\n\nGithub-Pull: #14416\nRebased-From: 43719e0a3411e6a08e04908332cb44adfa00c6a2\nTree-SHA512: 0b5987abf34a8c62c3f704c4ca3c9837a23fbce11954740461833099157db94418886001993f9f1a0b3252c923bd049bc1e1d0f99d04205c889270755a8cd245\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb2cc84a31fb923b2b25b979682904cb81edec7e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eb2cc84a31fb923b2b25b979682904cb81edec7e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb2cc84a31fb923b2b25b979682904cb81edec7e/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1b5af2c177ee31109fdd710bc1f1f4f922cedaef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b5af2c177ee31109fdd710bc1f1f4f922cedaef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1b5af2c177ee31109fdd710bc1f1f4f922cedaef"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "c29f83a91e52b90f0a0eb726f247d308ce2b2dc3",
        "filename": "contrib/macdeploy/custom_dsstore.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb2cc84a31fb923b2b25b979682904cb81edec7e/contrib/macdeploy/custom_dsstore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb2cc84a31fb923b2b25b979682904cb81edec7e/contrib/macdeploy/custom_dsstore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/custom_dsstore.py?ref=eb2cc84a31fb923b2b25b979682904cb81edec7e",
        "patch": "@@ -13,7 +13,7 @@\n ds = DSStore.open(output_file, 'w+')\n ds['.']['bwsp'] = {\n     'ShowStatusBar': False,\n-    'WindowBounds': b'{{300, 280}, {500, 343}}',\n+    'WindowBounds': '{{300, 280}, {500, 343}}',\n     'ContainerShowSidebar': False,\n     'SidebarWidth': 0,\n     'ShowTabView': False,"
      }
    ]
  },
  {
    "sha": "248e5ec348979c2d299b04adf93deaafd2b3b2b7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNDhlNWVjMzQ4OTc5YzJkMjk5YjA0YWRmOTNkZWFhZmQyYjNiMmI3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-10-25T20:54:20Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-10-25T20:55:23Z"
      },
      "message": "doc: Update release notes for 0.17.0.1",
      "tree": {
        "sha": "70c92f27f380a0b238ea02a34f25536194887235",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/70c92f27f380a0b238ea02a34f25536194887235"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/248e5ec348979c2d299b04adf93deaafd2b3b2b7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/248e5ec348979c2d299b04adf93deaafd2b3b2b7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/248e5ec348979c2d299b04adf93deaafd2b3b2b7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/248e5ec348979c2d299b04adf93deaafd2b3b2b7/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eb2cc84a31fb923b2b25b979682904cb81edec7e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb2cc84a31fb923b2b25b979682904cb81edec7e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eb2cc84a31fb923b2b25b979682904cb81edec7e"
      }
    ],
    "stats": {
      "total": 79,
      "additions": 17,
      "deletions": 62
    },
    "files": [
      {
        "sha": "6fac959e6088aa8405b8aee6b478c710fb7824d5",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 17,
        "deletions": 62,
        "changes": 79,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/248e5ec348979c2d299b04adf93deaafd2b3b2b7/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/248e5ec348979c2d299b04adf93deaafd2b3b2b7/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=248e5ec348979c2d299b04adf93deaafd2b3b2b7",
        "patch": "@@ -1,9 +1,6 @@\n-(note: this is a temporary file, to be added-to by anybody, and moved to\n-release-notes at release time)\n+Bitcoin Core version 0.17.0.1 is now available from:\n \n-Bitcoin Core version 0.17.x is now available from:\n-\n-  <https://bitcoincore.org/bin/bitcoin-core-0.17.x/>\n+  <https://bitcoincore.org/bin/bitcoin-core-0.17.0.1/>\n \n This is a new major version release, including new features, various bugfixes\n and performance improvements, as well as updated translations.\n@@ -16,72 +13,30 @@ To receive security and update notifications, please subscribe to:\n \n   <https://bitcoincore.org/en/list/announcements/join/>\n \n-How to Upgrade\n-==============\n-\n-If you are running an older version, shut it down. Wait until it has completely\n-shut down (which might take a few minutes for older versions), then run the\n-installer (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on Mac)\n-or `bitcoind`/`bitcoin-qt` (on Linux).\n-\n-If your node has a txindex, the txindex db will be migrated the first time you run 0.17.0 or newer, which may take up to a few hours. Your node will not be functional until this migration completes.\n-\n-The first time you run version 0.15.0 or newer, your chainstate database will be converted to a\n-new format, which will take anywhere from a few minutes to half an hour,\n-depending on the speed of your machine.\n-\n-Note that the block database format also changed in version 0.8.0 and there is no\n-automatic upgrade code from before version 0.8 to version 0.15.0. Upgrading\n-directly from 0.7.x and earlier without redownloading the blockchain is not supported.\n-However, as usual, old wallet versions are still supported.\n-\n-Downgrading warning\n--------------------\n-\n-The chainstate database for this release is not compatible with previous\n-releases, so if you run 0.15 and then decide to switch back to any\n-older version, you will need to run the old release with the `-reindex-chainstate`\n-option to rebuild the chainstate data structures in the old format.\n-\n-If your node has pruning enabled, this will entail re-downloading and\n-processing the entire blockchain.\n-\n-Compatibility\n-==============\n-\n-Bitcoin Core is extensively tested on multiple operating systems using\n-the Linux kernel, macOS 10.10+, and Windows 7 and newer (Windows XP is not supported).\n-\n-Bitcoin Core should also work on most other Unix-like systems but is not\n-frequently tested on them.\n-\n-From 0.17.0 onwards macOS <10.10 is no longer supported. 0.17.0 is built using Qt 5.9.x, which doesn't\n-support versions of macOS older than 10.10.\n-\n-Known issues\n-============\n-\n-...\n-\n Notable changes\n ===============\n \n-...\n+An issue was solved with OSX dmg generation, affecting OSX 10.12 to 10.14,\n+which could cause Finder to crash on install.\n \n-0.17.x change log\n-=================\n+There are no significant changes for other operating systems.\n \n-...\n+0.17.0.1 change log\n+===================\n+\n+### Build system\n+- #14416 `eb2cc84` Fix OSX dmg issue (10.12 to 10.14) (jonasschnelli)\n+\n+### Documentation\n+- #14509 `1b5af2c` [0.17] doc: use SegWit in getblocktemplate example (Sjors)\n \n Credits\n =======\n \n Thanks to everyone who directly contributed to this release:\n \n-...\n-\n-And to those that reported security issues:\n-\n-...\n+- Jonas Schnelli\n+- Pieter Wuille\n+- Sjors Provoost\n+- Wladimir J. van der Laan\n \n-As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/)."
      }
    ]
  },
  {
    "sha": "dc4923a71bf64bd48708c7e4bd33765cdae68fdf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYzQ5MjNhNzFiZjY0YmQ0ODcwOGM3ZTRiZDMzNzY1Y2RhZTY4ZmRm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-10-25T20:54:58Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-10-25T23:24:38Z"
      },
      "message": "build: Bump version for 0.17.0.1",
      "tree": {
        "sha": "ac1e8de6524695a6bfc16eb4f1d0f4abc9b30db2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ac1e8de6524695a6bfc16eb4f1d0f4abc9b30db2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dc4923a71bf64bd48708c7e4bd33765cdae68fdf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc4923a71bf64bd48708c7e4bd33765cdae68fdf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dc4923a71bf64bd48708c7e4bd33765cdae68fdf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc4923a71bf64bd48708c7e4bd33765cdae68fdf/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "248e5ec348979c2d299b04adf93deaafd2b3b2b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/248e5ec348979c2d299b04adf93deaafd2b3b2b7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/248e5ec348979c2d299b04adf93deaafd2b3b2b7"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "812e0a82696e172e6b5ec39f87529e3c04b8d1f2",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc4923a71bf64bd48708c7e4bd33765cdae68fdf/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc4923a71bf64bd48708c7e4bd33765cdae68fdf/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=dc4923a71bf64bd48708c7e4bd33765cdae68fdf",
        "patch": "@@ -3,7 +3,7 @@ AC_PREREQ([2.60])\n define(_CLIENT_VERSION_MAJOR, 0)\n define(_CLIENT_VERSION_MINOR, 17)\n define(_CLIENT_VERSION_REVISION, 0)\n-define(_CLIENT_VERSION_BUILD, 0)\n+define(_CLIENT_VERSION_BUILD, 1)\n define(_CLIENT_VERSION_IS_RELEASE, true)\n define(_COPYRIGHT_YEAR, 2018)\n define(_COPYRIGHT_HOLDERS,[The %s developers])"
      },
      {
        "sha": "b8ca0300044c649cb6c06ea9c187eae03973915f",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc4923a71bf64bd48708c7e4bd33765cdae68fdf/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc4923a71bf64bd48708c7e4bd33765cdae68fdf/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=dc4923a71bf64bd48708c7e4bd33765cdae68fdf",
        "patch": "@@ -16,7 +16,7 @@ To receive security and update notifications, please subscribe to:\n Notable changes\n ===============\n \n-An issue was solved with OSX dmg generation, affecting OSX 10.12 to 10.14,\n+An issue was solved with OSX dmg generation, affecting macOS 10.12 to 10.14,\n which could cause Finder to crash on install.\n \n There are no significant changes for other operating systems."
      }
    ]
  },
  {
    "sha": "f9fc08c5f86fc3c1cfb922d347eec01b695c677a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOWZjMDhjNWY4NmZjM2MxY2ZiOTIyZDM0N2VlYzAxYjY5NWM2Nzdh",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-10-26T01:47:51Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-10-26T01:47:51Z"
      },
      "message": "travis: Pin flake8 version to 3.5.0",
      "tree": {
        "sha": "0b2c10616778f5fe1d724bb5ceb971088909afb9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b2c10616778f5fe1d724bb5ceb971088909afb9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f9fc08c5f86fc3c1cfb922d347eec01b695c677a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAlvSckcACgkQLuufXMCV\nJsFEPQ//SXBI/LQ79jrW3So5ai8Gr4gNTR9CS2KKpu+kFmDSo6cnGj0ZUcybPah2\n8v4u/mI1gWyG1Sx+bnlZ/xpzgOY0yZXqE806i3rvVK5yrRnrabm0PzlMwC+hFefH\nTQBUUxRVLIv6Sd936vKCnHsjIyaUjlnTkashaQefT1vJ0vVgvo+pG5EQww+ESRHI\nWTTOxfAW2PQpij3HEPLLdbJgy8BaKgvyxeHkdDSu34qWlp8R7HLJ6kah6jWJS/2P\nTX9w6VrPKxiTB1/5IvvfK7nqaFdjea79j0Sdq8+D6g+lsndfRBUUyDoMGR8eZ1zs\nKIaxWSYTQDJufJAoOOD0rKKBgPdr+6Y/qftzs4wVd9YXGhUcT5S1XqJcdDZO9/oD\nGQUlfEEGlomiYGP+LxU4fzy7esoay8v8JPz/+PxLIr7Roh9qruZBDhLhX/l+p/wI\n0wtw86URrtmLrDA7Jb+ZrrB2aWqEqwb6IlGcqAM1T7I1MKH2+4RXJFi4dwAg43iY\nV4NFqrVu/mM+uPSZ2Oo7ChNQs1861Sf1V6C/RxJup9JzZU4dO50peeZQ5OREABUn\nU6mFFHWWp4zKKjRRkC8vMo872U/MXo08d05N0VWhn9KRWou+js6XxQMVA/w/z7+5\n8NIitveveaj4DTSMapsfy5kUQSK2pl3XWbRi/HKOlHIrf7dmClo=\n=70mb\n-----END PGP SIGNATURE-----",
        "payload": "tree 0b2c10616778f5fe1d724bb5ceb971088909afb9\nparent eb2cc84a31fb923b2b25b979682904cb81edec7e\nauthor fanquake <fanquake@gmail.com> 1540518471 +0800\ncommitter fanquake <fanquake@gmail.com> 1540518471 +0800\n\ntravis: Pin flake8 version to 3.5.0\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9fc08c5f86fc3c1cfb922d347eec01b695c677a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f9fc08c5f86fc3c1cfb922d347eec01b695c677a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9fc08c5f86fc3c1cfb922d347eec01b695c677a/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eb2cc84a31fb923b2b25b979682904cb81edec7e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb2cc84a31fb923b2b25b979682904cb81edec7e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eb2cc84a31fb923b2b25b979682904cb81edec7e"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d1772e43e57298b1f9f7e23e7408c0a85fa3684a",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9fc08c5f86fc3c1cfb922d347eec01b695c677a/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9fc08c5f86fc3c1cfb922d347eec01b695c677a/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=f9fc08c5f86fc3c1cfb922d347eec01b695c677a",
        "patch": "@@ -148,7 +148,7 @@ jobs:\n       language: python\n       python: '3.6'\n       install:\n-        - travis_retry pip install flake8\n+        - travis_retry pip install flake8==3.5.0\n       before_script:\n         - git fetch --unshallow\n       script:"
      }
    ]
  },
  {
    "sha": "f13041f17b08d95365ae5f14f1be1962b965ff45",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMTMwNDFmMTdiMDhkOTUzNjVhZTVmMTRmMWJlMTk2MmI5NjVmZjQ1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-26T02:09:46Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-26T02:09:50Z"
      },
      "message": "Merge #14579: [0.17] travis: Pin flake8 version to 3.5.0\n\nf9fc08c5f8 travis: Pin flake8 version to 3.5.0 (fanquake)\n\nPull request description:\n\n  Pin flake8 version to 3.5.0 to fix the linters.\n\nTree-SHA512: 4f06d0aacbdfbbc6d090790aeea5185f2a61259381e586f4015bc0f8c0d0c8fec6156343a9587b8605bc776b39c080bd6584e6e9b685eaba3d90a58c726ac469",
      "tree": {
        "sha": "0b2c10616778f5fe1d724bb5ceb971088909afb9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b2c10616778f5fe1d724bb5ceb971088909afb9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f13041f17b08d95365ae5f14f1be1962b965ff45",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJb0nduAAoJENLqSFDnUoslclsQAI6UVN2rfS6H9Ess1MO934nu\nR9m4gCX76xjAFZrKsmBXh6+dOPBbg+ScFVXusYdXPEXSqduFhBJS61iwwDnBhlST\ndUfNqbqzKugIgePzymGdXZ4IGkwc4JCKy8FT90Xupl+TGfO/bWVN6zC8fGD3w5nA\nNZ/EdhtUBHWyseVsUhMrxrya//4sTOy3SCbg1diGAGmjhBJvAWQwjoDCklVpLaQh\nX+qvImBq77FJgTyLxFY8+Lv5q7mm7Ki0H/aDZq85RW+e1f+byMli2knQ9bQM58Oj\nYeOZzrRcGakgiXzpn1m24yUwlEWIY4ANUXkux6rIaRfmHLdonCLwDifvoaRtmRYz\nYPaDYMF3XOgs7i8dc1Hk5G937hCgNNaBHbtiKAuwBkH/Z5EVmiAOkVqILymPZdSL\nygz0f05rFX3km+0ncGQFrJgbquiDOud51mq3UU5sHJc+dkmDSQ51l5FTJkAOPeRZ\nrQvpeyr+TydEwT49tHSImJN9fD3h7A/n2VkQ4jpOeW0jr9E0aDOpCAKOLI4YoVRJ\nOwclSq02WEmBW4I7B45Ich+8jjPDWSYl7S2vQvb+46E/HR3fJ16s/Bc4AMHrs3Jt\n9+NzgtGkNB6X/lZlanE8G2d4XbIoXuO7av2f3z+PfrPSmk8uzX3VlTE1pNMZ3Jz/\nSlR++9u39XY/bBByOovQ\n=1/jr\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIPKqNLNQdzb1AdsZJfnj1EuExcO8iyGDm1jPhetzzqv1CP/wEBwzcMmP+lGf\nn8RKzt3W6nkI8QRb0ndw8AgfO1zPuupgswCD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wED+ZwTTkY8sUEFZLwCD6\n/zMI8BD3bZENRNe14yvgUlG9c7LICPEEW9J3cPAIkbbv9y0MKxcAg9/jDS75DI4p\nKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5jb23/8BBE3aYJ\npUc82iokJq3eb6UkCPEEW9J3cPAIZMVlHVoQd5oAg9/jDS75DI4uLWh0dHBzOi8v\nYWxpY2UuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ/AQlz5irQCk54U8\nzUIdYAbCRQjxBFvSd2/wCDNigfQNnxnYAIPf4w0u+QyOIyJodHRwczovL2J0Yy5j\nYWxlbmRhci5jYXRhbGxheHkuY29t\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 0b2c10616778f5fe1d724bb5ceb971088909afb9\nparent eb2cc84a31fb923b2b25b979682904cb81edec7e\nparent f9fc08c5f86fc3c1cfb922d347eec01b695c677a\nauthor MarcoFalke <falke.marco@gmail.com> 1540519786 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1540519790 -0400\n\nMerge #14579: [0.17] travis: Pin flake8 version to 3.5.0\n\nf9fc08c5f8 travis: Pin flake8 version to 3.5.0 (fanquake)\n\nPull request description:\n\n  Pin flake8 version to 3.5.0 to fix the linters.\n\nTree-SHA512: 4f06d0aacbdfbbc6d090790aeea5185f2a61259381e586f4015bc0f8c0d0c8fec6156343a9587b8605bc776b39c080bd6584e6e9b685eaba3d90a58c726ac469\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f13041f17b08d95365ae5f14f1be1962b965ff45",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f13041f17b08d95365ae5f14f1be1962b965ff45",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f13041f17b08d95365ae5f14f1be1962b965ff45/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eb2cc84a31fb923b2b25b979682904cb81edec7e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb2cc84a31fb923b2b25b979682904cb81edec7e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eb2cc84a31fb923b2b25b979682904cb81edec7e"
      },
      {
        "sha": "f9fc08c5f86fc3c1cfb922d347eec01b695c677a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9fc08c5f86fc3c1cfb922d347eec01b695c677a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f9fc08c5f86fc3c1cfb922d347eec01b695c677a"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d1772e43e57298b1f9f7e23e7408c0a85fa3684a",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f13041f17b08d95365ae5f14f1be1962b965ff45/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f13041f17b08d95365ae5f14f1be1962b965ff45/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=f13041f17b08d95365ae5f14f1be1962b965ff45",
        "patch": "@@ -148,7 +148,7 @@ jobs:\n       language: python\n       python: '3.6'\n       install:\n-        - travis_retry pip install flake8\n+        - travis_retry pip install flake8==3.5.0\n       before_script:\n         - git fetch --unshallow\n       script:"
      }
    ]
  },
  {
    "sha": "1476554d3b1db5352c0de1de7524864d4bce3aac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNDc2NTU0ZDNiMWRiNTM1MmMwZGUxZGU3NTI0ODY0ZDRiY2UzYWFj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-10-26T09:53:27Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-10-26T10:01:33Z"
      },
      "message": "Merge #14576: Release 0.17.0.1\n\ndc4923a71bf64bd48708c7e4bd33765cdae68fdf build: Bump version for 0.17.0.1 (Wladimir J. van der Laan)\n248e5ec348979c2d299b04adf93deaafd2b3b2b7 doc: Update release notes for 0.17.0.1 (Wladimir J. van der Laan)\n\nPull request description:\n\n  Update release notes and bump version\n\nTree-SHA512: b1c3f77150d89450735c2a82cb5d859b11e7463cc3370c46f847a6f7b22318114cf4d3254eb3f6b15dc7204bc43d052781f97d02ef5a76d102d5d42a762be964",
      "tree": {
        "sha": "ad1355529099682b8a509af7f18c594d2c2587e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ad1355529099682b8a509af7f18c594d2c2587e0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1476554d3b1db5352c0de1de7524864d4bce3aac",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlvS5f0ACgkQHkrtYphs\n0l0cEAf+JjReJGG9FkvyMfz9HbAdtv8kR4sSDZmn8o2c4Ve7flHbsbjklMGy0jPX\nrdKbDU+nhqplLdnLMwvPxFHVCWt5vUbxVFN2zKTqmbO1dr2WxwlrAMUXL0GMyVNs\nUdOaVBFgnnr1KlIHHmOZmthaqFpQy9sQEBXikcpusbgMeCTX82Vm4Y3rSnG1weHH\nqrwHXY+RdUJSoX9q1OhULQwEH3dIhAoiW2qbhNyTmGhBAI3/8WNF5a1cBJJzMigO\nV7K+Yzh2V4xhV0m1VKOFyjc6tIQGUBOEctZfV13DyCyeEL1bXPSi6SDQ7pJ9SZ+A\nmt7uV394nahyiwyMiMo4tzCndc2Mlg==\n=g81D\n-----END PGP SIGNATURE-----",
        "payload": "tree ad1355529099682b8a509af7f18c594d2c2587e0\nparent f13041f17b08d95365ae5f14f1be1962b965ff45\nparent dc4923a71bf64bd48708c7e4bd33765cdae68fdf\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1540547607 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1540548093 +0200\n\nMerge #14576: Release 0.17.0.1\n\ndc4923a71bf64bd48708c7e4bd33765cdae68fdf build: Bump version for 0.17.0.1 (Wladimir J. van der Laan)\n248e5ec348979c2d299b04adf93deaafd2b3b2b7 doc: Update release notes for 0.17.0.1 (Wladimir J. van der Laan)\n\nPull request description:\n\n  Update release notes and bump version\n\nTree-SHA512: b1c3f77150d89450735c2a82cb5d859b11e7463cc3370c46f847a6f7b22318114cf4d3254eb3f6b15dc7204bc43d052781f97d02ef5a76d102d5d42a762be964\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1476554d3b1db5352c0de1de7524864d4bce3aac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1476554d3b1db5352c0de1de7524864d4bce3aac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1476554d3b1db5352c0de1de7524864d4bce3aac/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f13041f17b08d95365ae5f14f1be1962b965ff45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f13041f17b08d95365ae5f14f1be1962b965ff45",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f13041f17b08d95365ae5f14f1be1962b965ff45"
      },
      {
        "sha": "dc4923a71bf64bd48708c7e4bd33765cdae68fdf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc4923a71bf64bd48708c7e4bd33765cdae68fdf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dc4923a71bf64bd48708c7e4bd33765cdae68fdf"
      }
    ],
    "stats": {
      "total": 81,
      "additions": 18,
      "deletions": 63
    },
    "files": [
      {
        "sha": "812e0a82696e172e6b5ec39f87529e3c04b8d1f2",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1476554d3b1db5352c0de1de7524864d4bce3aac/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1476554d3b1db5352c0de1de7524864d4bce3aac/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=1476554d3b1db5352c0de1de7524864d4bce3aac",
        "patch": "@@ -3,7 +3,7 @@ AC_PREREQ([2.60])\n define(_CLIENT_VERSION_MAJOR, 0)\n define(_CLIENT_VERSION_MINOR, 17)\n define(_CLIENT_VERSION_REVISION, 0)\n-define(_CLIENT_VERSION_BUILD, 0)\n+define(_CLIENT_VERSION_BUILD, 1)\n define(_CLIENT_VERSION_IS_RELEASE, true)\n define(_COPYRIGHT_YEAR, 2018)\n define(_COPYRIGHT_HOLDERS,[The %s developers])"
      },
      {
        "sha": "b8ca0300044c649cb6c06ea9c187eae03973915f",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 17,
        "deletions": 62,
        "changes": 79,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1476554d3b1db5352c0de1de7524864d4bce3aac/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1476554d3b1db5352c0de1de7524864d4bce3aac/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=1476554d3b1db5352c0de1de7524864d4bce3aac",
        "patch": "@@ -1,9 +1,6 @@\n-(note: this is a temporary file, to be added-to by anybody, and moved to\n-release-notes at release time)\n+Bitcoin Core version 0.17.0.1 is now available from:\n \n-Bitcoin Core version 0.17.x is now available from:\n-\n-  <https://bitcoincore.org/bin/bitcoin-core-0.17.x/>\n+  <https://bitcoincore.org/bin/bitcoin-core-0.17.0.1/>\n \n This is a new major version release, including new features, various bugfixes\n and performance improvements, as well as updated translations.\n@@ -16,72 +13,30 @@ To receive security and update notifications, please subscribe to:\n \n   <https://bitcoincore.org/en/list/announcements/join/>\n \n-How to Upgrade\n-==============\n-\n-If you are running an older version, shut it down. Wait until it has completely\n-shut down (which might take a few minutes for older versions), then run the\n-installer (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on Mac)\n-or `bitcoind`/`bitcoin-qt` (on Linux).\n-\n-If your node has a txindex, the txindex db will be migrated the first time you run 0.17.0 or newer, which may take up to a few hours. Your node will not be functional until this migration completes.\n-\n-The first time you run version 0.15.0 or newer, your chainstate database will be converted to a\n-new format, which will take anywhere from a few minutes to half an hour,\n-depending on the speed of your machine.\n-\n-Note that the block database format also changed in version 0.8.0 and there is no\n-automatic upgrade code from before version 0.8 to version 0.15.0. Upgrading\n-directly from 0.7.x and earlier without redownloading the blockchain is not supported.\n-However, as usual, old wallet versions are still supported.\n-\n-Downgrading warning\n--------------------\n-\n-The chainstate database for this release is not compatible with previous\n-releases, so if you run 0.15 and then decide to switch back to any\n-older version, you will need to run the old release with the `-reindex-chainstate`\n-option to rebuild the chainstate data structures in the old format.\n-\n-If your node has pruning enabled, this will entail re-downloading and\n-processing the entire blockchain.\n-\n-Compatibility\n-==============\n-\n-Bitcoin Core is extensively tested on multiple operating systems using\n-the Linux kernel, macOS 10.10+, and Windows 7 and newer (Windows XP is not supported).\n-\n-Bitcoin Core should also work on most other Unix-like systems but is not\n-frequently tested on them.\n-\n-From 0.17.0 onwards macOS <10.10 is no longer supported. 0.17.0 is built using Qt 5.9.x, which doesn't\n-support versions of macOS older than 10.10.\n-\n-Known issues\n-============\n-\n-...\n-\n Notable changes\n ===============\n \n-...\n+An issue was solved with OSX dmg generation, affecting macOS 10.12 to 10.14,\n+which could cause Finder to crash on install.\n \n-0.17.x change log\n-=================\n+There are no significant changes for other operating systems.\n \n-...\n+0.17.0.1 change log\n+===================\n+\n+### Build system\n+- #14416 `eb2cc84` Fix OSX dmg issue (10.12 to 10.14) (jonasschnelli)\n+\n+### Documentation\n+- #14509 `1b5af2c` [0.17] doc: use SegWit in getblocktemplate example (Sjors)\n \n Credits\n =======\n \n Thanks to everyone who directly contributed to this release:\n \n-...\n-\n-And to those that reported security issues:\n-\n-...\n+- Jonas Schnelli\n+- Pieter Wuille\n+- Sjors Provoost\n+- Wladimir J. van der Laan\n \n-As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/)."
      }
    ]
  },
  {
    "sha": "f046d846aecacd79a83d82903e0b71577529d75c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMDQ2ZDg0NmFlY2FjZDc5YTgzZDgyOTAzZTBiNzE1Nzc1MjlkNzVj",
    "commit": {
      "author": {
        "name": "David A. Harding",
        "email": "dave@dtrt.org",
        "date": "2018-10-27T16:20:43Z"
      },
      "committer": {
        "name": "David A. Harding",
        "email": "dave@dtrt.org",
        "date": "2018-10-27T16:20:43Z"
      },
      "message": "Docs/Release notes: 0.17.0.1 is a minor release",
      "tree": {
        "sha": "790eaaeedf4f8276dfa0df8171642800ff0257e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/790eaaeedf4f8276dfa0df8171642800ff0257e8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f046d846aecacd79a83d82903e0b71577529d75c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEgxUkqkMp0LnoXjCr2dtBqWwiadMFAlvUkHsACgkQ2dtBqWwi\nadPyxw//UWIzO7v0Wuaa8JxIjWT2hWrJlvW6iaG+4fMsUgwLyny3Z06LhOn3Bn0a\ny7xx14andtkCqg+PfyyX6ntgd/bcx/PikaegzpP9hktyFFyEwtAc3ZduZZwyOCaw\n1AFOspv/aP48HGyUn3eyDeefZL92QG9lY81rGky7QZx7QokXfx1ppImR+LIjZ/Ff\nXW5uWYNl2MdBBTr/VCd1TeEKykL3KVA1oDOBnj0nLTYecT0icKWo4lXkRjqF312U\nJHARnJ1SHO8ATRudE4prH+MzpxDgmzFHSlZbDdv/UipkP+eb8V1iAtrmx6HMCIQh\n8wrXnSu5LQdZ+NYVn4P5AbI3lcAQ5GljgrZxK6ZdmvUla6BB4M5bzXR9RUCYTZ4W\n3X1QbrbNLEoTcvx2zspM8+9NZ9KNw3ijvk0n9rPQhDD2yqCz/sEzu/0epjfbrlG6\nyyd2hQcydrFWYe62yEXk/qG5ZvnN4ZzvX48J3J3dN9zcPbGCP6EBmRqKAW7E96jm\nEdjk6TGXY3Ep5yohVEDTUr4rVVZp+ynxwCtLIr9uWVIcAUeC4QmOIFWFZfyvIWh7\nNxhceLlXKGBTcH+UGbJJdzRtZ5vjtDs429C5Epk/yPCO0+hV1BELOiSDrO6OhPQa\nvw+QilcalI89OYK7nK8UMPkjOvknQm0IepqUF8uvDczKPg/7pKY=\n=E9ZP\n-----END PGP SIGNATURE-----",
        "payload": "tree 790eaaeedf4f8276dfa0df8171642800ff0257e8\nparent 1476554d3b1db5352c0de1de7524864d4bce3aac\nauthor David A. Harding <dave@dtrt.org> 1540657243 -0400\ncommitter David A. Harding <dave@dtrt.org> 1540657243 -0400\n\nDocs/Release notes: 0.17.0.1 is a minor release\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f046d846aecacd79a83d82903e0b71577529d75c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f046d846aecacd79a83d82903e0b71577529d75c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f046d846aecacd79a83d82903e0b71577529d75c/comments",
    "author": {
      "login": "harding",
      "id": 61096,
      "node_id": "MDQ6VXNlcjYxMDk2",
      "avatar_url": "https://avatars.githubusercontent.com/u/61096?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/harding",
      "html_url": "https://github.com/harding",
      "followers_url": "https://api.github.com/users/harding/followers",
      "following_url": "https://api.github.com/users/harding/following{/other_user}",
      "gists_url": "https://api.github.com/users/harding/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/harding/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/harding/subscriptions",
      "organizations_url": "https://api.github.com/users/harding/orgs",
      "repos_url": "https://api.github.com/users/harding/repos",
      "events_url": "https://api.github.com/users/harding/events{/privacy}",
      "received_events_url": "https://api.github.com/users/harding/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "harding",
      "id": 61096,
      "node_id": "MDQ6VXNlcjYxMDk2",
      "avatar_url": "https://avatars.githubusercontent.com/u/61096?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/harding",
      "html_url": "https://github.com/harding",
      "followers_url": "https://api.github.com/users/harding/followers",
      "following_url": "https://api.github.com/users/harding/following{/other_user}",
      "gists_url": "https://api.github.com/users/harding/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/harding/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/harding/subscriptions",
      "organizations_url": "https://api.github.com/users/harding/orgs",
      "repos_url": "https://api.github.com/users/harding/repos",
      "events_url": "https://api.github.com/users/harding/events{/privacy}",
      "received_events_url": "https://api.github.com/users/harding/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1476554d3b1db5352c0de1de7524864d4bce3aac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1476554d3b1db5352c0de1de7524864d4bce3aac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1476554d3b1db5352c0de1de7524864d4bce3aac"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "92db7dac7d7e55ada749f50c2c5737b3ee50ff0e",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f046d846aecacd79a83d82903e0b71577529d75c/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f046d846aecacd79a83d82903e0b71577529d75c/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=f046d846aecacd79a83d82903e0b71577529d75c",
        "patch": "@@ -2,8 +2,7 @@ Bitcoin Core version 0.17.0.1 is now available from:\n \n   <https://bitcoincore.org/bin/bitcoin-core-0.17.0.1/>\n \n-This is a new major version release, including new features, various bugfixes\n-and performance improvements, as well as updated translations.\n+This release provides a minor bug fix for 0.17.0.\n \n Please report bugs using the issue tracker at GitHub:\n "
      }
    ]
  },
  {
    "sha": "76dd5257f9b5705734481569c39bf115d4cb973d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NmRkNTI1N2Y5YjU3MDU3MzQ0ODE1NjljMzliZjExNWQ0Y2I5NzNk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-28T10:43:52Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-28T10:44:08Z"
      },
      "message": "Merge #14566: 0.17: qa backports\n\n9461f98c53 Disable wallet and address book Qt tests on macOS minimal platform (Russell Yanofsky)\n703a24418c descriptors.md: Refer to descriptors as describing instead of matching (Russell Yanofsky)\n5f51fd6d59 doc/descriptors.md tweaks (Russell Yanofsky)\n29899ecd36 Import CInv from correct module (Chun Kuan Lee)\nf7adb32e38 qa: Run all tests even if wallet is not compiled (MarcoFalke)\n86fadee990 qa: Premine to deterministic address with -disablewallet (MarcoFalke)\n8bc1badada Test rpc_help.py failed: Check whether ZMQ is enabled or not. (Kvaciral)\n24d796a6cc test: Add tests for RPC help (Jo\u00e3o Barbosa)\n168efeaca6 qa: Use named args in some tests (MarcoFalke)\n73e538cf6a scripted-diff: Use named arguments in feature_block (MarcoFalke)\n96dc936862 scripted-diff: Pass node into p2p_segwit acceptance tests (MarcoFalke)\n7ff32a6b98 qa: Add some actual witness in rpc_rawtransaction (MarcoFalke)\nb72fbabe17 [qa] Use correct python index slices in example test (Suhas Daftuar)\n06544faff0 qa: Add TestNode::assert_debug_log (MarcoFalke)\n\nPull request description:\n\n  Just the test and doc changes from #14328 to prevent that one from piling up.\n\nTree-SHA512: 51c1e66d346cbf51bc67b2f365448620dd9992ba4ef70592c5eb489cd50a047dab8179c86db2cafe161d8b2aa04498cc760fb5deb7eef49b39272911c74227a9",
      "tree": {
        "sha": "f39e9f1b9df4435483cc25684a28fba7b98c8016",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f39e9f1b9df4435483cc25684a28fba7b98c8016"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/76dd5257f9b5705734481569c39bf115d4cb973d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJb1ZL5AAoJENLqSFDnUoslIg4P/Al07kNyb0qaMxWKlyZDLlMv\nX1GigELKnxD7v7givRFptQI2F/BUJELIdUZcPX9x2u8wqO6WqxKCLezXJxLWJ239\nvRcBfg2L3ZMj0MzLSFj+Fgs9qokPxyNjGvDLpOyMuY9lAKaW5TbocNrZuqw+CTKY\n00iZAfjKC6W/wZ/MNGW5c81/m4/cToHq+R6F8FIqC8JHxtpow2L+K9Ot7LnPhcpk\nTPySvhl9o6MY6au+LKCDfTRRmDzaxDItRe/MxU2LNrmHPMEQQrGpGfvyym/jdthX\niOgwAlC8+6drSA0DWQtHUMnXiV6nUlobVS7VReMk6HDiYfXxiD3OhXRd8UGGc+Rg\nl8JQhHI2l+imnS9Nm5zWtbxrFLLdLJ+CGOKBoS5h5WUYGzix0gEUxJZaQcis7MBz\nVLiPv2IJiduPxnyI2nWKwSE1jvAwTFcLt9xUloPt+yNfEmZFUxMtiozIj7cuv86Z\n8EfEUVRFofuOQqdieDKNsbYtToTAPWCDATUut+GdddWrBjCLEhUIfbVqC4dnYU59\n8RPPPHabvFlmmvEvVU/OosZg2XIld8ncTqaiBpO7EhK4m6aOSVRF11lB+F/3aOgj\nJqhJIx7Q4K3iRwQvEDz1go3Q+VBGbS9/jVG47jmWFCmReHonMrfAzU4Gy7jlbVoq\nO9PKOzO8fCeZkjKwJxQz\n=6Wlp\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIIqRjAVS4pH+W8Pw+EEk7LnEll4pry8ntDucD7bP7itlCP/wECQCBhxAWFpq\n5e+7h69k5gwI8QRb1ZL88AgPEDIcDrH7tACD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wELPgj4kRQhp/Vw1vgV9hFasI8QRb1ZL7\n8AiJhnLl6jSpgQCD3+MNLvkMjiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVuZGFyLm9w\nZW50aW1lc3RhbXBzLm9yZ//wENUDoVVwttcwAaXsagmfAqcI8QRb1ZL78AhVrKiE\nnp7BdACD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIub3BlbnRp\nbWVzdGFtcHMub3Jn8BD6Ufa4R0VP3APm6PpfA1UkCPAQ7Je8x4PyKrAQNDwaMdOv\nCAjxBFvVkvzwCDn+WDAnC8DCAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxl\nbmRhci5ldGVybml0eXdhbGwuY29t\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree f39e9f1b9df4435483cc25684a28fba7b98c8016\nparent 1476554d3b1db5352c0de1de7524864d4bce3aac\nparent 9461f98c534ab64ae404085ffb309ec276e3c902\nauthor MarcoFalke <falke.marco@gmail.com> 1540723432 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1540723448 -0400\n\nMerge #14566: 0.17: qa backports\n\n9461f98c53 Disable wallet and address book Qt tests on macOS minimal platform (Russell Yanofsky)\n703a24418c descriptors.md: Refer to descriptors as describing instead of matching (Russell Yanofsky)\n5f51fd6d59 doc/descriptors.md tweaks (Russell Yanofsky)\n29899ecd36 Import CInv from correct module (Chun Kuan Lee)\nf7adb32e38 qa: Run all tests even if wallet is not compiled (MarcoFalke)\n86fadee990 qa: Premine to deterministic address with -disablewallet (MarcoFalke)\n8bc1badada Test rpc_help.py failed: Check whether ZMQ is enabled or not. (Kvaciral)\n24d796a6cc test: Add tests for RPC help (Jo\u00e3o Barbosa)\n168efeaca6 qa: Use named args in some tests (MarcoFalke)\n73e538cf6a scripted-diff: Use named arguments in feature_block (MarcoFalke)\n96dc936862 scripted-diff: Pass node into p2p_segwit acceptance tests (MarcoFalke)\n7ff32a6b98 qa: Add some actual witness in rpc_rawtransaction (MarcoFalke)\nb72fbabe17 [qa] Use correct python index slices in example test (Suhas Daftuar)\n06544faff0 qa: Add TestNode::assert_debug_log (MarcoFalke)\n\nPull request description:\n\n  Just the test and doc changes from #14328 to prevent that one from piling up.\n\nTree-SHA512: 51c1e66d346cbf51bc67b2f365448620dd9992ba4ef70592c5eb489cd50a047dab8179c86db2cafe161d8b2aa04498cc760fb5deb7eef49b39272911c74227a9\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76dd5257f9b5705734481569c39bf115d4cb973d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/76dd5257f9b5705734481569c39bf115d4cb973d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76dd5257f9b5705734481569c39bf115d4cb973d/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1476554d3b1db5352c0de1de7524864d4bce3aac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1476554d3b1db5352c0de1de7524864d4bce3aac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1476554d3b1db5352c0de1de7524864d4bce3aac"
      },
      {
        "sha": "9461f98c534ab64ae404085ffb309ec276e3c902",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9461f98c534ab64ae404085ffb309ec276e3c902",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9461f98c534ab64ae404085ffb309ec276e3c902"
      }
    ],
    "stats": {
      "total": 1077,
      "additions": 773,
      "deletions": 304
    },
    "files": [
      {
        "sha": "47e15e0502d1fbd5788b8c9c32ab54601abff2e4",
        "filename": "doc/descriptors.md",
        "status": "modified",
        "additions": 25,
        "deletions": 16,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/doc/descriptors.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/doc/descriptors.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/descriptors.md?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -22,19 +22,19 @@ Output descriptors currently support:\n \n ## Examples\n \n-- `pk(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)` represents a P2PK output.\n-- `pkh(02c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5)` represents a P2PKH output.\n-- `wpkh(02f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9)` represents a P2WPKH output.\n-- `sh(wpkh(03fff97bd5755eeea420453a14355235d382f6472f8568a18b2f057a1460297556))` represents a P2SH-P2WPKH output.\n-- `combo(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)` represents a P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH output.\n-- `sh(wsh(pkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13)))` represents a (overly complicated) P2SH-P2WSH-P2PKH output.\n-- `multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc)` represents a bare *1-of-2* multisig.\n-- `sh(multi(2,022f01e5e15cca351daff3843fb70f3c2f0a1bdd05e5af888a67784ef3e10a2a01,03acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe))` represents a P2SH *2-of-2* multisig.\n-- `wsh(multi(2,03a0434d9e47f3c86235477c7b1ae6ae5d3442d49b1943c2b752a68e2a47e247c7,03774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb,03d01115d548e7561b15c38f004d734633687cf4419620095bc5b0f47070afe85a))` represents a P2WSH *2-of-3* multisig.\n-- `sh(wsh(multi(1,03f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8,03499fdf9e895e719cfd64e67f07d38e3226aa7b63678949e6e49b241a60e823e4,02d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e)))` represents a P2SH-P2WSH *1-of-3* multisig.\n-- `pk(xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8)` refers to a single P2PK output, using the public key part from the specified xpub.\n-- `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1'/2)` refers to a single P2PKH output, using child key *1'/2* of the specified xpub.\n-- `wsh(multi(1,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/1/0/*,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/0/*))` refers to a chain of *1-of-2* P2WSH multisig outputs, using public keys taken from two HD chains with corresponding derivation paths.\n+- `pk(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)` describes a P2PK output with the specified public key.\n+- `pkh(02c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5)` describes a P2PKH output with the specified public key.\n+- `wpkh(02f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9)` describes a P2WPKH output with the specified public key.\n+- `sh(wpkh(03fff97bd5755eeea420453a14355235d382f6472f8568a18b2f057a1460297556))` describes a P2SH-P2WPKH output with the specified public key.\n+- `combo(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)` describes any P2PK, P2PKH, P2WPKH, or P2SH-P2WPKH output with the specified public key.\n+- `sh(wsh(pkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13)))` describes an (overly complicated) P2SH-P2WSH-P2PKH output with the specified public key.\n+- `multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc)` describes a bare *1-of-2* multisig output with keys in the specified order.\n+- `sh(multi(2,022f01e5e15cca351daff3843fb70f3c2f0a1bdd05e5af888a67784ef3e10a2a01,03acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe))` describes a P2SH *2-of-2* multisig output with keys in the specified order.\n+- `wsh(multi(2,03a0434d9e47f3c86235477c7b1ae6ae5d3442d49b1943c2b752a68e2a47e247c7,03774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb,03d01115d548e7561b15c38f004d734633687cf4419620095bc5b0f47070afe85a))` describes a P2WSH *2-of-3* multisig output with keys in the specified order.\n+- `sh(wsh(multi(1,03f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8,03499fdf9e895e719cfd64e67f07d38e3226aa7b63678949e6e49b241a60e823e4,02d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e)))` describes a P2SH-P2WSH *1-of-3* multisig output with keys in the specified order.\n+- `pk(xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8)` describes a P2PK output with the public key of the specified xpub.\n+- `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1'/2)` describes a P2PKH output with child key *1'/2* of the specified xpub.\n+- `wsh(multi(1,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/1/0/*,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/0/0/*))` describes a set of *1-of-2* P2WSH multisig outputs where the first multisig key is the *1/0/`i`* child of the first specified xpub and the second multisig key is the *0/0/`i`* child of the second specified xpub, and `i` is any number in a configurable range (`0-1000` by default).\n \n ## Reference\n \n@@ -91,6 +91,15 @@ on Bitcoin's OP_CHECKMULTISIG opcode. To support these, we introduce the\n multisig policy, where any *k* out of the *n* provided public keys must\n sign.\n \n+Key order is significant. A `multi()` expression describes a multisig script\n+with keys in the specified order, and in a search for TXOs, it will not match\n+outputs with multisig scriptPubKeys that have the same keys in a different\n+order. Also, to prevent a combinatorial explosion of the search space, if more\n+than one of the `multi()` key arguments is a BIP32 wildcard path ending in `/*`\n+or `*'`, the `multi()` expression only matches multisig scripts with the `i`th\n+child key from each wildcard path in lockstep, rather than scripts with any\n+combination of child keys from each wildcard path.\n+\n ### BIP32 derived keys and chains\n \n Most modern wallet software and hardware uses keys that are derived using\n@@ -101,7 +110,7 @@ path consists of a sequence of 0 or more integers (in the range\n *0..2<sup>31</sup>-1*) each optionally followed by `'` or `h`, and\n separated by `/` characters. The string may optionally end with the\n literal `/*` or `/*'` (or `/*h`) to refer to all unhardened or hardened\n-child keys instead.\n+child keys in a configurable range (by default `0-1000`, inclusive).\n \n Whenever a public key is described using a hardened derivation step, the\n script cannot be computed without access to the corresponding private\n@@ -119,6 +128,6 @@ steps, or for dumping wallet descriptors including private key material.\n \n In order to easily represent the sets of scripts currently supported by\n existing Bitcoin Core wallets, a convenience function `combo` is\n-provided, which takes as input a public key, and constructs the P2PK,\n+provided, which takes as input a public key, and describes a set of P2PK,\n P2PKH, P2WPKH, and P2SH-P2WPH scripts for that key. In case the key is\n-uncompressed, it only constructs P2PK and P2PKH.\n+uncompressed, the set only includes P2PK and P2PKH scripts.\n\\ No newline at end of file"
      },
      {
        "sha": "35258460441f428803d52f795017694baf95800f",
        "filename": "src/qt/test/addressbooktests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/src/qt/test/addressbooktests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/src/qt/test/addressbooktests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/addressbooktests.cpp?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -17,6 +17,7 @@\n #include <key_io.h>\n #include <wallet/wallet.h>\n \n+#include <QApplication>\n #include <QTimer>\n #include <QMessageBox>\n \n@@ -139,5 +140,16 @@ void TestAddAddressesToSendBook()\n \n void AddressBookTests::addressBookTests()\n {\n+#ifdef Q_OS_MAC\n+    if (QApplication::platformName() == \"minimal\") {\n+        // Disable for mac on \"minimal\" platform to avoid crashes inside the Qt\n+        // framework when it tries to look up unimplemented cocoa functions,\n+        // and fails to handle returned nulls\n+        // (https://bugreports.qt.io/browse/QTBUG-49686).\n+        QWARN(\"Skipping AddressBookTests on mac build with 'minimal' platform set due to Qt bugs. To run AppTests, invoke \"\n+              \"with 'test_bitcoin-qt -platform cocoa' on mac, or else use a linux or windows build.\");\n+        return;\n+    }\n+#endif\n     TestAddAddressesToSendBook();\n }"
      },
      {
        "sha": "9598d64845c30f0e505b257a1310961d0afb8a1c",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -243,5 +243,16 @@ void TestGUI()\n \n void WalletTests::walletTests()\n {\n+#ifdef Q_OS_MAC\n+    if (QApplication::platformName() == \"minimal\") {\n+        // Disable for mac on \"minimal\" platform to avoid crashes inside the Qt\n+        // framework when it tries to look up unimplemented cocoa functions,\n+        // and fails to handle returned nulls\n+        // (https://bugreports.qt.io/browse/QTBUG-49686).\n+        QWARN(\"Skipping WalletTests on mac build with 'minimal' platform set due to Qt bugs. To run AppTests, invoke \"\n+              \"with 'test_bitcoin-qt -platform cocoa' on mac, or else use a linux or windows build.\");\n+        return;\n+    }\n+#endif\n     TestGUI();\n }"
      },
      {
        "sha": "8d954b70f6cf7f36b19d0ce8c8c28a39f66eda63",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -15,8 +15,8 @@\n \n # Avoid wildcard * imports if possible\n from test_framework.blocktools import (create_block, create_coinbase)\n+from test_framework.messages import CInv\n from test_framework.mininode import (\n-    CInv,\n     P2PInterface,\n     mininode_lock,\n     msg_block,\n@@ -67,10 +67,11 @@ def custom_function():\n     # self.log.info(\"running custom_function\")  # Oops! Can't run self.log outside the BitcoinTestFramework\n     pass\n \n+\n class ExampleTest(BitcoinTestFramework):\n     # Each functional test is a subclass of the BitcoinTestFramework class.\n \n-    # Override the set_test_params(), add_options(), setup_chain(), setup_network()\n+    # Override the set_test_params(), skip_test_if_missing_module(), add_options(), setup_chain(), setup_network()\n     # and setup_nodes() methods to customize the test setup as required.\n \n     def set_test_params(self):\n@@ -84,6 +85,9 @@ def set_test_params(self):\n \n         # self.log.info(\"I've finished set_test_params\")  # Oops! Can't run self.log before run_test()\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     # Use add_options() to add specific command-line options for your test.\n     # In practice this is not used very much, since the tests are mostly written\n     # to be run in automated environments without command-line options.\n@@ -111,7 +115,7 @@ def setup_network(self):\n         # sync_all() should not include node2, since we're not expecting it to\n         # sync.\n         connect_nodes(self.nodes[0], 1)\n-        self.sync_all([self.nodes[0:1]])\n+        self.sync_all([self.nodes[0:2]])\n \n     # Use setup_nodes() to customize the node start behaviour (for example if\n     # you don't want to start all nodes at the start of the test).\n@@ -135,7 +139,7 @@ def run_test(self):\n \n         # Generating a block on one of the nodes will get us out of IBD\n         blocks = [int(self.nodes[0].generate(nblocks=1)[0], 16)]\n-        self.sync_all([self.nodes[0:1]])\n+        self.sync_all([self.nodes[0:2]])\n \n         # Notice above how we called an RPC by calling a method with the same\n         # name on the node object. Notice also how we used a keyword argument"
      },
      {
        "sha": "8466f851caed1b496994ccd3027732d46c90092c",
        "filename": "test/functional/feature_bip68_sequence.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_bip68_sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_bip68_sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bip68_sequence.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -25,6 +25,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[], [\"-acceptnonstdtxn=0\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.relayfee = self.nodes[0].getnetworkinfo()[\"relayfee\"]\n "
      },
      {
        "sha": "a1ded5200c3ab2e49194b24245565fe1034da2f4",
        "filename": "test/functional/feature_block.py",
        "status": "modified",
        "additions": 41,
        "deletions": 38,
        "changes": 79,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_block.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -75,6 +75,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.extra_args = [[]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         node = self.nodes[0]  # convenience reference to the node\n \n@@ -169,7 +172,7 @@ def run_test(self):\n         self.log.info(\"Reject a block where the miner creates too much coinbase reward\")\n         self.move_tip(6)\n         b9 = self.next_block(9, spend=out[4], additional_coinbase_value=1)\n-        self.sync_blocks([b9], False, 16, b'bad-cb-amount', reconnect=True)\n+        self.sync_blocks([b9], success=False, reject_code=16, reject_reason=b'bad-cb-amount', reconnect=True)\n \n         # Create a fork that ends in a block with too much fee (the one that causes the reorg)\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n@@ -181,7 +184,7 @@ def run_test(self):\n         self.sync_blocks([b10], False)\n \n         b11 = self.next_block(11, spend=out[4], additional_coinbase_value=1)\n-        self.sync_blocks([b11], False, 16, b'bad-cb-amount', reconnect=True)\n+        self.sync_blocks([b11], success=False, reject_code=16, reject_reason=b'bad-cb-amount', reconnect=True)\n \n         # Try again, but with a valid fork first\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n@@ -194,7 +197,7 @@ def run_test(self):\n         b13 = self.next_block(13, spend=out[4])\n         self.save_spendable_output()\n         b14 = self.next_block(14, spend=out[5], additional_coinbase_value=1)\n-        self.sync_blocks([b12, b13, b14], False, 16, b'bad-cb-amount', reconnect=True)\n+        self.sync_blocks([b12, b13, b14], success=False, reject_code=16, reject_reason=b'bad-cb-amount', reconnect=True)\n \n         # New tip should be b13.\n         assert_equal(node.getbestblockhash(), b13.hash)\n@@ -213,7 +216,7 @@ def run_test(self):\n         self.log.info(\"Reject a block with too many checksigs\")\n         too_many_checksigs = CScript([OP_CHECKSIG] * (MAX_BLOCK_SIGOPS))\n         b16 = self.next_block(16, spend=out[6], script=too_many_checksigs)\n-        self.sync_blocks([b16], False, 16, b'bad-blk-sigops', reconnect=True)\n+        self.sync_blocks([b16], success=False, reject_code=16, reject_reason=b'bad-blk-sigops', reconnect=True)\n \n         # Attempt to spend a transaction created on a different fork\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n@@ -222,7 +225,7 @@ def run_test(self):\n         self.log.info(\"Reject a block with a spend from a re-org'ed out tx\")\n         self.move_tip(15)\n         b17 = self.next_block(17, spend=txout_b3)\n-        self.sync_blocks([b17], False, 16, b'bad-txns-inputs-missingorspent', reconnect=True)\n+        self.sync_blocks([b17], success=False, reject_code=16, reject_reason=b'bad-txns-inputs-missingorspent', reconnect=True)\n \n         # Attempt to spend a transaction created on a different fork (on a fork this time)\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n@@ -235,7 +238,7 @@ def run_test(self):\n         self.sync_blocks([b18], False)\n \n         b19 = self.next_block(19, spend=out[6])\n-        self.sync_blocks([b19], False, 16, b'bad-txns-inputs-missingorspent', reconnect=True)\n+        self.sync_blocks([b19], success=False, reject_code=16, reject_reason=b'bad-txns-inputs-missingorspent', reconnect=True)\n \n         # Attempt to spend a coinbase at depth too low\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n@@ -244,7 +247,7 @@ def run_test(self):\n         self.log.info(\"Reject a block spending an immature coinbase.\")\n         self.move_tip(15)\n         b20 = self.next_block(20, spend=out[7])\n-        self.sync_blocks([b20], False, 16, b'bad-txns-premature-spend-of-coinbase')\n+        self.sync_blocks([b20], success=False, reject_code=16, reject_reason=b'bad-txns-premature-spend-of-coinbase')\n \n         # Attempt to spend a coinbase at depth too low (on a fork this time)\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n@@ -257,7 +260,7 @@ def run_test(self):\n         self.sync_blocks([b21], False)\n \n         b22 = self.next_block(22, spend=out[5])\n-        self.sync_blocks([b22], False, 16, b'bad-txns-premature-spend-of-coinbase')\n+        self.sync_blocks([b22], success=False, reject_code=16, reject_reason=b'bad-txns-premature-spend-of-coinbase')\n \n         # Create a block on either side of MAX_BLOCK_BASE_SIZE and make sure its accepted/rejected\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n@@ -286,7 +289,7 @@ def run_test(self):\n         tx.vout = [CTxOut(0, script_output)]\n         b24 = self.update_block(24, [tx])\n         assert_equal(len(b24.serialize()), MAX_BLOCK_BASE_SIZE + 1)\n-        self.sync_blocks([b24], False, 16, b'bad-blk-length', reconnect=True)\n+        self.sync_blocks([b24], success=False, reject_code=16, reject_reason=b'bad-blk-length', reconnect=True)\n \n         b25 = self.next_block(25, spend=out[7])\n         self.sync_blocks([b25], False)\n@@ -304,7 +307,7 @@ def run_test(self):\n         # update_block causes the merkle root to get updated, even with no new\n         # transactions, and updates the required state.\n         b26 = self.update_block(26, [])\n-        self.sync_blocks([b26], False, 16, b'bad-cb-length', reconnect=True)\n+        self.sync_blocks([b26], success=False, reject_code=16, reject_reason=b'bad-cb-length', reconnect=True)\n \n         # Extend the b26 chain to make sure bitcoind isn't accepting b26\n         b27 = self.next_block(27, spend=out[7])\n@@ -316,7 +319,7 @@ def run_test(self):\n         b28.vtx[0].vin[0].scriptSig = b'\\x00' * 101\n         b28.vtx[0].rehash()\n         b28 = self.update_block(28, [])\n-        self.sync_blocks([b28], False, 16, b'bad-cb-length', reconnect=True)\n+        self.sync_blocks([b28], success=False, reject_code=16, reject_reason=b'bad-cb-length', reconnect=True)\n \n         # Extend the b28 chain to make sure bitcoind isn't accepting b28\n         b29 = self.next_block(29, spend=out[7])\n@@ -352,7 +355,7 @@ def run_test(self):\n         too_many_multisigs = CScript([OP_CHECKMULTISIG] * (MAX_BLOCK_SIGOPS // 20))\n         b32 = self.next_block(32, spend=out[9], script=too_many_multisigs)\n         assert_equal(get_legacy_sigopcount_block(b32), MAX_BLOCK_SIGOPS + 1)\n-        self.sync_blocks([b32], False, 16, b'bad-blk-sigops', reconnect=True)\n+        self.sync_blocks([b32], success=False, reject_code=16, reject_reason=b'bad-blk-sigops', reconnect=True)\n \n         # CHECKMULTISIGVERIFY\n         self.log.info(\"Accept a block with the max number of OP_CHECKMULTISIGVERIFY sigops\")\n@@ -365,7 +368,7 @@ def run_test(self):\n         self.log.info(\"Reject a block with too many OP_CHECKMULTISIGVERIFY sigops\")\n         too_many_multisigs = CScript([OP_CHECKMULTISIGVERIFY] * (MAX_BLOCK_SIGOPS // 20))\n         b34 = self.next_block(34, spend=out[10], script=too_many_multisigs)\n-        self.sync_blocks([b34], False, 16, b'bad-blk-sigops', reconnect=True)\n+        self.sync_blocks([b34], success=False, reject_code=16, reject_reason=b'bad-blk-sigops', reconnect=True)\n \n         # CHECKSIGVERIFY\n         self.log.info(\"Accept a block with the max number of OP_CHECKSIGVERIFY sigops\")\n@@ -378,7 +381,7 @@ def run_test(self):\n         self.log.info(\"Reject a block with too many OP_CHECKSIGVERIFY sigops\")\n         too_many_checksigs = CScript([OP_CHECKSIGVERIFY] * (MAX_BLOCK_SIGOPS))\n         b36 = self.next_block(36, spend=out[11], script=too_many_checksigs)\n-        self.sync_blocks([b36], False, 16, b'bad-blk-sigops', reconnect=True)\n+        self.sync_blocks([b36], success=False, reject_code=16, reject_reason=b'bad-blk-sigops', reconnect=True)\n \n         # Check spending of a transaction in a block which failed to connect\n         #\n@@ -395,12 +398,12 @@ def run_test(self):\n         txout_b37 = b37.vtx[1]\n         tx = self.create_and_sign_transaction(out[11], 0)\n         b37 = self.update_block(37, [tx])\n-        self.sync_blocks([b37], False, 16, b'bad-txns-inputs-missingorspent', reconnect=True)\n+        self.sync_blocks([b37], success=False, reject_code=16, reject_reason=b'bad-txns-inputs-missingorspent', reconnect=True)\n \n         # attempt to spend b37's first non-coinbase tx, at which point b37 was still considered valid\n         self.move_tip(35)\n         b38 = self.next_block(38, spend=txout_b37)\n-        self.sync_blocks([b38], False, 16, b'bad-txns-inputs-missingorspent', reconnect=True)\n+        self.sync_blocks([b38], success=False, reject_code=16, reject_reason=b'bad-txns-inputs-missingorspent', reconnect=True)\n \n         # Check P2SH SigOp counting\n         #\n@@ -492,7 +495,7 @@ def run_test(self):\n         tx.rehash()\n         new_txs.append(tx)\n         self.update_block(40, new_txs)\n-        self.sync_blocks([b40], False, 16, b'bad-blk-sigops', reconnect=True)\n+        self.sync_blocks([b40], success=False, reject_code=16, reject_reason=b'bad-blk-sigops', reconnect=True)\n \n         # same as b40, but one less sigop\n         self.log.info(\"Accept a block with the max number of P2SH sigops\")\n@@ -555,7 +558,7 @@ def run_test(self):\n         self.block_heights[b45.sha256] = self.block_heights[self.tip.sha256] + 1\n         self.tip = b45\n         self.blocks[45] = b45\n-        self.sync_blocks([b45], False, 16, b'bad-cb-missing', reconnect=True)\n+        self.sync_blocks([b45], success=False, reject_code=16, reject_reason=b'bad-cb-missing', reconnect=True)\n \n         self.log.info(\"Reject a block with no transactions\")\n         self.move_tip(44)\n@@ -570,7 +573,7 @@ def run_test(self):\n         self.tip = b46\n         assert 46 not in self.blocks\n         self.blocks[46] = b46\n-        self.sync_blocks([b46], False, 16, b'bad-blk-length', reconnect=True)\n+        self.sync_blocks([b46], success=False, reject_code=16, reject_reason=b'bad-blk-length', reconnect=True)\n \n         self.log.info(\"Reject a block with invalid work\")\n         self.move_tip(44)\n@@ -593,7 +596,7 @@ def run_test(self):\n         b49 = self.next_block(49)\n         b49.hashMerkleRoot += 1\n         b49.solve()\n-        self.sync_blocks([b49], False, 16, b'bad-txnmrklroot', reconnect=True)\n+        self.sync_blocks([b49], success=False, reject_code=16, reject_reason=b'bad-txnmrklroot', reconnect=True)\n \n         self.log.info(\"Reject a block with incorrect POW limit\")\n         self.move_tip(44)\n@@ -607,15 +610,15 @@ def run_test(self):\n         b51 = self.next_block(51)\n         cb2 = create_coinbase(51, self.coinbase_pubkey)\n         b51 = self.update_block(51, [cb2])\n-        self.sync_blocks([b51], False, 16, b'bad-cb-multiple', reconnect=True)\n+        self.sync_blocks([b51], success=False, reject_code=16, reject_reason=b'bad-cb-multiple', reconnect=True)\n \n         self.log.info(\"Reject a block with duplicate transactions\")\n         # Note: txns have to be in the right position in the merkle tree to trigger this error\n         self.move_tip(44)\n         b52 = self.next_block(52, spend=out[15])\n         tx = self.create_tx(b52.vtx[1], 0, 1)\n         b52 = self.update_block(52, [tx, tx])\n-        self.sync_blocks([b52], False, 16, b'bad-txns-duplicate', reconnect=True)\n+        self.sync_blocks([b52], success=False, reject_code=16, reject_reason=b'bad-txns-duplicate', reconnect=True)\n \n         # Test block timestamps\n         #  -> b31 (8) -> b33 (9) -> b35 (10) -> b39 (11) -> b42 (12) -> b43 (13) -> b53 (14) -> b55 (15)\n@@ -682,7 +685,7 @@ def run_test(self):\n         assert_equal(len(b56.vtx), 3)\n         b56 = self.update_block(56, [tx1])\n         assert_equal(b56.hash, b57.hash)\n-        self.sync_blocks([b56], False, 16, b'bad-txns-duplicate', reconnect=True)\n+        self.sync_blocks([b56], success=False, reject_code=16, reject_reason=b'bad-txns-duplicate', reconnect=True)\n \n         # b57p2 - a good block with 6 tx'es, don't submit until end\n         self.move_tip(55)\n@@ -702,7 +705,7 @@ def run_test(self):\n         assert_equal(b56p2.hash, b57p2.hash)\n         assert_equal(len(b56p2.vtx), 6)\n         b56p2 = self.update_block(\"b56p2\", [tx3, tx4])\n-        self.sync_blocks([b56p2], False, 16, b'bad-txns-duplicate', reconnect=True)\n+        self.sync_blocks([b56p2], success=False, reject_code=16, reject_reason=b'bad-txns-duplicate', reconnect=True)\n \n         self.move_tip(\"57p2\")\n         self.sync_blocks([b57p2], True)\n@@ -727,15 +730,15 @@ def run_test(self):\n         tx.vout.append(CTxOut(0, b\"\"))\n         tx.calc_sha256()\n         b58 = self.update_block(58, [tx])\n-        self.sync_blocks([b58], False, 16, b'bad-txns-inputs-missingorspent', reconnect=True)\n+        self.sync_blocks([b58], success=False, reject_code=16, reject_reason=b'bad-txns-inputs-missingorspent', reconnect=True)\n \n         # tx with output value > input value\n         self.log.info(\"Reject a block with a transaction with outputs > inputs\")\n         self.move_tip(57)\n         b59 = self.next_block(59)\n         tx = self.create_and_sign_transaction(out[17], 51 * COIN)\n         b59 = self.update_block(59, [tx])\n-        self.sync_blocks([b59], False, 16, b'bad-txns-in-belowout', reconnect=True)\n+        self.sync_blocks([b59], success=False, reject_code=16, reject_reason=b'bad-txns-in-belowout', reconnect=True)\n \n         # reset to good chain\n         self.move_tip(57)\n@@ -759,7 +762,7 @@ def run_test(self):\n         b61.vtx[0].rehash()\n         b61 = self.update_block(61, [])\n         assert_equal(b60.vtx[0].serialize(), b61.vtx[0].serialize())\n-        self.sync_blocks([b61], False, 16, b'bad-txns-BIP30', reconnect=True)\n+        self.sync_blocks([b61], success=False, reject_code=16, reject_reason=b'bad-txns-BIP30', reconnect=True)\n \n         # Test tx.isFinal is properly rejected (not an exhaustive tx.isFinal test, that should be in data-driven transaction tests)\n         #\n@@ -776,7 +779,7 @@ def run_test(self):\n         assert(tx.vin[0].nSequence < 0xffffffff)\n         tx.calc_sha256()\n         b62 = self.update_block(62, [tx])\n-        self.sync_blocks([b62], False, 16, b'bad-txns-nonfinal')\n+        self.sync_blocks([b62], success=False, reject_code=16, reject_reason=b'bad-txns-nonfinal')\n \n         # Test a non-final coinbase is also rejected\n         #\n@@ -790,7 +793,7 @@ def run_test(self):\n         b63.vtx[0].vin[0].nSequence = 0xDEADBEEF\n         b63.vtx[0].rehash()\n         b63 = self.update_block(63, [])\n-        self.sync_blocks([b63], False, 16, b'bad-txns-nonfinal')\n+        self.sync_blocks([b63], success=False, reject_code=16, reject_reason=b'bad-txns-nonfinal')\n \n         #  This checks that a block with a bloated VARINT between the block_header and the array of tx such that\n         #  the block is > MAX_BLOCK_BASE_SIZE with the bloated varint, but <= MAX_BLOCK_BASE_SIZE without the bloated varint,\n@@ -824,7 +827,7 @@ def run_test(self):\n         tx.vin.append(CTxIn(COutPoint(b64a.vtx[1].sha256, 0)))\n         b64a = self.update_block(\"64a\", [tx])\n         assert_equal(len(b64a.serialize()), MAX_BLOCK_BASE_SIZE + 8)\n-        self.sync_blocks([b64a], False, 1, b'error parsing message')\n+        self.sync_blocks([b64a], success=False, reject_code=1, reject_reason=b'error parsing message')\n \n         # bitcoind doesn't disconnect us for sending a bloated block, but if we subsequently\n         # resend the header message, it won't send us the getdata message again. Just\n@@ -866,7 +869,7 @@ def run_test(self):\n         tx1 = self.create_and_sign_transaction(out[20], out[20].vout[0].nValue)\n         tx2 = self.create_and_sign_transaction(tx1, 1)\n         b66 = self.update_block(66, [tx2, tx1])\n-        self.sync_blocks([b66], False, 16, b'bad-txns-inputs-missingorspent', reconnect=True)\n+        self.sync_blocks([b66], success=False, reject_code=16, reject_reason=b'bad-txns-inputs-missingorspent', reconnect=True)\n \n         # Attempt to double-spend a transaction created in a block\n         #\n@@ -881,7 +884,7 @@ def run_test(self):\n         tx2 = self.create_and_sign_transaction(tx1, 1)\n         tx3 = self.create_and_sign_transaction(tx1, 2)\n         b67 = self.update_block(67, [tx1, tx2, tx3])\n-        self.sync_blocks([b67], False, 16, b'bad-txns-inputs-missingorspent', reconnect=True)\n+        self.sync_blocks([b67], success=False, reject_code=16, reject_reason=b'bad-txns-inputs-missingorspent', reconnect=True)\n \n         # More tests of block subsidy\n         #\n@@ -900,7 +903,7 @@ def run_test(self):\n         b68 = self.next_block(68, additional_coinbase_value=10)\n         tx = self.create_and_sign_transaction(out[20], out[20].vout[0].nValue - 9)\n         b68 = self.update_block(68, [tx])\n-        self.sync_blocks([b68], False, 16, b'bad-cb-amount', reconnect=True)\n+        self.sync_blocks([b68], success=False, reject_code=16, reject_reason=b'bad-cb-amount', reconnect=True)\n \n         self.log.info(\"Accept a block claiming the correct subsidy in the coinbase transaction\")\n         self.move_tip(65)\n@@ -924,7 +927,7 @@ def run_test(self):\n         tx.vin.append(CTxIn(COutPoint(bogus_tx.sha256, 0), b\"\", 0xffffffff))\n         tx.vout.append(CTxOut(1, b\"\"))\n         b70 = self.update_block(70, [tx])\n-        self.sync_blocks([b70], False, 16, b'bad-txns-inputs-missingorspent', reconnect=True)\n+        self.sync_blocks([b70], success=False, reject_code=16, reject_reason=b'bad-txns-inputs-missingorspent', reconnect=True)\n \n         # Test accepting an invalid block which has the same hash as a valid one (via merkle tree tricks)\n         #\n@@ -949,7 +952,7 @@ def run_test(self):\n         assert_equal(b72.sha256, b71.sha256)\n \n         self.move_tip(71)\n-        self.sync_blocks([b71], False, 16, b'bad-txns-duplicate', reconnect=True)\n+        self.sync_blocks([b71], success=False, reject_code=16, reject_reason=b'bad-txns-duplicate', reconnect=True)\n \n         self.move_tip(72)\n         self.sync_blocks([b72], True)\n@@ -987,7 +990,7 @@ def run_test(self):\n         tx = self.create_and_sign_transaction(out[22], 1, CScript(a))\n         b73 = self.update_block(73, [tx])\n         assert_equal(get_legacy_sigopcount_block(b73), MAX_BLOCK_SIGOPS + 1)\n-        self.sync_blocks([b73], False, 16, b'bad-blk-sigops', reconnect=True)\n+        self.sync_blocks([b73], success=False, reject_code=16, reject_reason=b'bad-blk-sigops', reconnect=True)\n \n         # b74/75 - if we push an invalid script element, all prevous sigops are counted,\n         #          but sigops after the element are not counted.\n@@ -1011,7 +1014,7 @@ def run_test(self):\n         a[MAX_BLOCK_SIGOPS + 4] = 0xff\n         tx = self.create_and_sign_transaction(out[22], 1, CScript(a))\n         b74 = self.update_block(74, [tx])\n-        self.sync_blocks([b74], False, 16, b'bad-blk-sigops', reconnect=True)\n+        self.sync_blocks([b74], success=False, reject_code=16, reject_reason=b'bad-blk-sigops', reconnect=True)\n \n         self.move_tip(72)\n         b75 = self.next_block(75)\n@@ -1160,7 +1163,7 @@ def run_test(self):\n         b89a = self.next_block(\"89a\", spend=out[32])\n         tx = self.create_tx(tx1, 0, 0, CScript([OP_TRUE]))\n         b89a = self.update_block(\"89a\", [tx])\n-        self.sync_blocks([b89a], False, 16, b'bad-txns-inputs-missingorspent', reconnect=True)\n+        self.sync_blocks([b89a], success=False, reject_code=16, reject_reason=b'bad-txns-inputs-missingorspent', reconnect=True)\n \n         self.log.info(\"Test a re-org of one week's worth of blocks (1088 blocks)\")\n "
      },
      {
        "sha": "1296cdb497eb39143ed4fdb788d7de66b13aafd0",
        "filename": "test/functional/feature_blocksdir.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_blocksdir.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_blocksdir.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_blocksdir.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -16,6 +16,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.stop_node(0)\n         shutil.rmtree(self.nodes[0].datadir)"
      },
      {
        "sha": "9a53b62abdb5d81b013c8134ca026bd8d50b6935",
        "filename": "test/functional/feature_cltv.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_cltv.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -57,6 +57,9 @@ def set_test_params(self):\n         self.extra_args = [['-whitelist=127.0.0.1']]\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.nodes[0].add_p2p_connection(P2PInterface())\n "
      },
      {
        "sha": "1124119e2bc971e91c7afcf986a37da9069fc483",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -14,6 +14,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def test_config_file_parser(self):\n         # Assume node is stopped\n "
      },
      {
        "sha": "a2796efa2a396bfd3f58a7366963cb3d551fc941",
        "filename": "test/functional/feature_csv_activation.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_csv_activation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_csv_activation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_csv_activation.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -145,6 +145,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.extra_args = [['-whitelist=127.0.0.1', '-blockversion=4', '-addresstype=legacy']]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def generate_blocks(self, number, version, test_blocks=None):\n         if test_blocks is None:\n             test_blocks = []"
      },
      {
        "sha": "ae1eacf2d7bdd8c989ff25d75d2e29443dc861b6",
        "filename": "test/functional/feature_dbcrash.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_dbcrash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_dbcrash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dbcrash.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -63,6 +63,9 @@ def set_test_params(self):\n         self.node3_args = [\"-blockmaxweight=4000000\"]\n         self.extra_args = [self.node0_args, self.node1_args, self.node2_args, self.node3_args]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.add_nodes(self.num_nodes, extra_args=self.extra_args)\n         self.start_nodes()"
      },
      {
        "sha": "f9e1ef0231bfe40a10f8fc758dc296d2cfb3f71c",
        "filename": "test/functional/feature_dersig.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_dersig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_dersig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dersig.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -45,6 +45,9 @@ def set_test_params(self):\n         self.extra_args = [['-whitelist=127.0.0.1']]\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.nodes[0].add_p2p_connection(P2PInterface())\n "
      },
      {
        "sha": "aaab4279b5f0467cfb2705894bd2aad53d0f6251",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -126,6 +126,9 @@ class EstimateFeeTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 3\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         \"\"\"\n         We'll setup the network to have 3 nodes that all mine with different parameters.\n@@ -168,6 +171,11 @@ def transact_and_mine(self, numblocks, mining_node):\n                     newmem.append(utx)\n             self.memutxo = newmem\n \n+    def import_deterministic_coinbase_privkeys(self):\n+        self.start_nodes()\n+        super().import_deterministic_coinbase_privkeys()\n+        self.stop_nodes()\n+\n     def run_test(self):\n         self.log.info(\"This test is time consuming, please be patient\")\n         self.log.info(\"Splitting inputs so we can generate tx's\")"
      },
      {
        "sha": "a74c413440fd6a7c01b0c0a170cf00ca54d2d8d7",
        "filename": "test/functional/feature_logging.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_logging.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_logging.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_logging.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -15,6 +15,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def relative_log_path(self, name):\n         return os.path.join(self.nodes[0].datadir, \"regtest\", name)\n "
      },
      {
        "sha": "87c318de9a06a25603282ff88dd12f57e2296fd0",
        "filename": "test/functional/feature_maxuploadtarget.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_maxuploadtarget.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -40,6 +40,9 @@ def set_test_params(self):\n         # Cache for utxos, as the listunspent may take a long time later in the test\n         self.utxo_cache = []\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # Before we connect anything, we first set the time on the node\n         # to be in the past, otherwise things break because the CNode"
      },
      {
        "sha": "5d180c2244d0405d8a3bf82852bbee1a334f6e6b",
        "filename": "test/functional/feature_minchainwork.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_minchainwork.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_minchainwork.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_minchainwork.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -31,6 +31,9 @@ def set_test_params(self):\n         self.extra_args = [[], [\"-minimumchainwork=0x65\"], [\"-minimumchainwork=0x65\"]]\n         self.node_min_work = [0, 101, 101]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         # This test relies on the chain setup being:\n         # node0 <- node1 <- node2"
      },
      {
        "sha": "25a7329a0d1f516c3a70f025ae7ef39ac0994330",
        "filename": "test/functional/feature_notifications.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_notifications.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_notifications.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_notifications.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -13,6 +13,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.alert_filename = os.path.join(self.options.tmpdir, \"alert.txt\")\n         self.block_filename = os.path.join(self.options.tmpdir, \"blocks.txt\")"
      },
      {
        "sha": "a79cc3d34bf48b6bb48e12ef950b9e14bd2068a6",
        "filename": "test/functional/feature_nulldummy.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_nulldummy.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -44,9 +44,12 @@ def set_test_params(self):\n         # normal segwit activation here (and don't use the default always-on behaviour).\n         self.extra_args = [['-whitelist=127.0.0.1', '-vbparams=segwit:0:999999999999', '-addresstype=legacy', \"-deprecatedrpc=addwitnessaddress\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.address = self.nodes[0].getnewaddress()\n-        self.ms_address = self.nodes[0].addmultisigaddress(1,[self.address])['address']\n+        self.ms_address = self.nodes[0].addmultisigaddress(1, [self.address])['address']\n         self.wit_address = self.nodes[0].addwitnessaddress(self.address)\n         self.wit_ms_address = self.nodes[0].addmultisigaddress(1, [self.address], '', 'p2sh-segwit')['address']\n "
      },
      {
        "sha": "772151dc4ba1f5649c3ecf5ac35b18278b9de878",
        "filename": "test/functional/feature_pruning.py",
        "status": "modified",
        "additions": 12,
        "deletions": 7,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_pruning.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -33,15 +33,20 @@ def set_test_params(self):\n \n         # Create nodes 0 and 1 to mine.\n         # Create node 2 to test pruning.\n-        self.full_node_default_args = [\"-maxreceivebuffer=20000\", \"-checkblocks=5\", \"-limitdescendantcount=100\", \"-limitdescendantsize=5000\", \"-limitancestorcount=100\", \"-limitancestorsize=5000\" ]\n+        self.full_node_default_args = [\"-maxreceivebuffer=20000\", \"-checkblocks=5\", \"-limitdescendantcount=100\", \"-limitdescendantsize=5000\", \"-limitancestorcount=100\", \"-limitancestorsize=5000\"]\n         # Create nodes 3 and 4 to test manual pruning (they will be re-started with manual pruning later)\n         # Create nodes 5 to test wallet in prune mode, but do not connect\n-        self.extra_args = [self.full_node_default_args,\n-                           self.full_node_default_args,\n-                           [\"-maxreceivebuffer=20000\", \"-prune=550\"],\n-                           [\"-maxreceivebuffer=20000\"],\n-                           [\"-maxreceivebuffer=20000\"],\n-                           [\"-prune=550\"]]\n+        self.extra_args = [\n+            self.full_node_default_args,\n+            self.full_node_default_args,\n+            [\"-maxreceivebuffer=20000\", \"-prune=550\"],\n+            [\"-maxreceivebuffer=20000\"],\n+            [\"-maxreceivebuffer=20000\"],\n+            [\"-prune=550\"],\n+        ]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n \n     def setup_network(self):\n         self.setup_nodes()"
      },
      {
        "sha": "d78d75dbade14f4c014e7663e7a922319b560abd",
        "filename": "test/functional/feature_rbf.py",
        "status": "modified",
        "additions": 17,
        "deletions": 8,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_rbf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_rbf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_rbf.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -61,17 +61,26 @@ def make_utxo(node, amount, confirmed=True, scriptPubKey=CScript([1])):\n \n     return COutPoint(int(txid, 16), 0)\n \n-class ReplaceByFeeTest(BitcoinTestFramework):\n \n+class ReplaceByFeeTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n-        self.extra_args= [[\"-maxorphantx=1000\",\n-                           \"-whitelist=127.0.0.1\",\n-                           \"-limitancestorcount=50\",\n-                           \"-limitancestorsize=101\",\n-                           \"-limitdescendantcount=200\",\n-                           \"-limitdescendantsize=101\"],\n-                           [\"-mempoolreplacement=0\"]]\n+        self.extra_args = [\n+            [\n+                \"-maxorphantx=1000\",\n+                \"-whitelist=127.0.0.1\",\n+                \"-limitancestorcount=50\",\n+                \"-limitancestorsize=101\",\n+                \"-limitdescendantcount=200\",\n+                \"-limitdescendantsize=101\",\n+            ],\n+            [\n+                \"-mempoolreplacement=0\",\n+            ],\n+        ]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n \n     def run_test(self):\n         # Leave IBD"
      },
      {
        "sha": "3727eeaeae9dde18e13f9727233fc772aa3e23ed",
        "filename": "test/functional/feature_reindex.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_reindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_reindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_reindex.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -18,6 +18,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def reindex(self, justchainstate=False):\n         self.nodes[0].generate(3)\n         blockcount = self.nodes[0].getblockcount()"
      },
      {
        "sha": "2cbfc26e899f4fd83a8dc08a533b00beead62616",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 24,
        "deletions": 3,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -46,9 +46,30 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n         # This test tests SegWit both pre and post-activation, so use the normal BIP9 activation.\n-        self.extra_args = [[\"-rpcserialversion=0\", \"-vbparams=segwit:0:999999999999\", \"-addresstype=legacy\", \"-deprecatedrpc=addwitnessaddress\"],\n-                           [\"-blockversion=4\", \"-rpcserialversion=1\", \"-vbparams=segwit:0:999999999999\", \"-addresstype=legacy\", \"-deprecatedrpc=addwitnessaddress\"],\n-                           [\"-blockversion=536870915\", \"-vbparams=segwit:0:999999999999\", \"-addresstype=legacy\", \"-deprecatedrpc=addwitnessaddress\"]]\n+        self.extra_args = [\n+            [\n+                \"-rpcserialversion=0\",\n+                \"-vbparams=segwit:0:999999999999\",\n+                \"-addresstype=legacy\",\n+                \"-deprecatedrpc=addwitnessaddress\",\n+            ],\n+            [\n+                \"-blockversion=4\",\n+                \"-rpcserialversion=1\",\n+                \"-vbparams=segwit:0:999999999999\",\n+                \"-addresstype=legacy\",\n+                \"-deprecatedrpc=addwitnessaddress\",\n+            ],\n+            [\n+                \"-blockversion=536870915\",\n+                \"-vbparams=segwit:0:999999999999\",\n+                \"-addresstype=legacy\",\n+                \"-deprecatedrpc=addwitnessaddress\",\n+            ],\n+        ]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n \n     def setup_network(self):\n         super().setup_network()"
      },
      {
        "sha": "cf77720437e4c714fb26960f71f73999c2d68253",
        "filename": "test/functional/feature_versionbits_warning.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_versionbits_warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/feature_versionbits_warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_versionbits_warning.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -31,6 +31,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.alert_filename = os.path.join(self.options.tmpdir, \"alert.txt\")\n         # Open and close to create zero-length file"
      },
      {
        "sha": "f311858beeb017b137a739beed9a5bb5636b7e4d",
        "filename": "test/functional/interface_bitcoin_cli.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/interface_bitcoin_cli.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/interface_bitcoin_cli.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_bitcoin_cli.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -12,6 +12,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         \"\"\"Main test logic\"\"\"\n "
      },
      {
        "sha": "afa9de580f0309922fb7e720b0dacf654b3090f5",
        "filename": "test/functional/interface_rest.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/interface_rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/interface_rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_rest.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -43,6 +43,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[\"-rest\"], []]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def test_rest_request(self, uri, http_method='GET', req_type=ReqType.JSON, body='', status=200, ret_type=RetType.JSON):\n         rest_uri = '/rest' + uri\n         if req_type == ReqType.JSON:"
      },
      {
        "sha": "c853ba7e3f8d14c4b47c27ed7a5fea78a242d50e",
        "filename": "test/functional/interface_zmq.py",
        "status": "modified",
        "additions": 22,
        "deletions": 10,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/interface_zmq.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/interface_zmq.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_zmq.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -5,15 +5,16 @@\n \"\"\"Test the ZMQ notification interface.\"\"\"\n import struct\n \n-from test_framework.test_framework import (\n-    BitcoinTestFramework, skip_if_no_bitcoind_zmq, skip_if_no_py3_zmq)\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.messages import CTransaction\n-from test_framework.util import (assert_equal,\n-                                 bytes_to_hex_str,\n-                                 hash256,\n-                                )\n+from test_framework.util import (\n+    assert_equal,\n+    bytes_to_hex_str,\n+    hash256,\n+)\n from io import BytesIO\n \n+\n class ZMQSubscriber:\n     def __init__(self, socket, topic):\n         self.sequence = 0\n@@ -37,9 +38,18 @@ class ZMQTest (BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_py3_zmq()\n+        self.skip_if_no_bitcoind_zmq()\n+        self.skip_if_no_wallet()\n+\n     def setup_nodes(self):\n-        skip_if_no_py3_zmq()\n-        skip_if_no_bitcoind_zmq(self)\n+        # Import keys\n+        self.add_nodes(self.num_nodes)\n+        self.start_nodes()\n+        super().import_deterministic_coinbase_privkeys()\n+        self.stop_nodes()\n+\n         import zmq\n \n         # Initialize ZMQ context and socket.\n@@ -59,10 +69,12 @@ def setup_nodes(self):\n         self.rawblock = ZMQSubscriber(socket, b\"rawblock\")\n         self.rawtx = ZMQSubscriber(socket, b\"rawtx\")\n \n-        self.extra_args = [[\"-zmqpub%s=%s\" % (sub.topic.decode(), address) for sub in [self.hashblock, self.hashtx, self.rawblock, self.rawtx]], []]\n-        self.add_nodes(self.num_nodes, self.extra_args)\n+        self.nodes[0].extra_args = [\"-zmqpub%s=%s\" % (sub.topic.decode(), address) for sub in [self.hashblock, self.hashtx, self.rawblock, self.rawtx]]\n         self.start_nodes()\n \n+    def import_deterministic_coinbase_privkeys(self):\n+        pass\n+\n     def run_test(self):\n         try:\n             self._zmq_test()"
      },
      {
        "sha": "8847777ba7b308e97c0f5c86cae7d925571d278b",
        "filename": "test/functional/mempool_accept.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/mempool_accept.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/mempool_accept.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_accept.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -40,6 +40,9 @@ def set_test_params(self):\n             '-acceptnonstdtxn=0',  # Try to mimic main-net\n         ]] * self.num_nodes\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def check_mempool_result(self, result_expected, *args, **kwargs):\n         \"\"\"Wrapper to check result of testmempoolaccept on node_0's mempool\"\"\"\n         result_test = self.nodes[0].testmempoolaccept(*args, **kwargs)"
      },
      {
        "sha": "c0918893cdc9a11d3cdd19634f94fdb4494bcf14",
        "filename": "test/functional/mempool_limit.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_limit.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -15,6 +15,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [[\"-maxmempool=5\", \"-spendzeroconfchange=0\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         txouts = gen_return_txouts()\n         relayfee = self.nodes[0].getnetworkinfo()['relayfee']"
      },
      {
        "sha": "9336547a6b42ba94ea030f986ac72499f8abf9e8",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -18,6 +18,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[\"-maxorphantx=1000\"], [\"-maxorphantx=1000\", \"-limitancestorcount=5\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     # Build a transaction that spends parent_txid:vout\n     # Return amount sent\n     def chain_transaction(self, node, parent_txid, vout, value, fee, num_outputs):\n@@ -34,7 +37,7 @@ def chain_transaction(self, node, parent_txid, vout, value, fee, num_outputs):\n         return (txid, send_value)\n \n     def run_test(self):\n-        ''' Mine some blocks and have them mature. '''\n+        # Mine some blocks and have them mature.\n         self.nodes[0].generate(101)\n         utxo = self.nodes[0].listunspent(10)\n         txid = utxo[0]['txid']"
      },
      {
        "sha": "b4e9d967fd6ccf696a01d2c5be06806143fad1b9",
        "filename": "test/functional/mempool_persist.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/mempool_persist.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/mempool_persist.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_persist.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -47,6 +47,9 @@ def set_test_params(self):\n         self.num_nodes = 3\n         self.extra_args = [[], [\"-persistmempool=0\"], []]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         chain_height = self.nodes[0].getblockcount()\n         assert_equal(chain_height, 200)"
      },
      {
        "sha": "123f0b4c28b7507ede041d8cfd1f99635c256761",
        "filename": "test/functional/mempool_reorg.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/mempool_reorg.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/mempool_reorg.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_reorg.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -17,6 +17,9 @@ class MempoolCoinbaseTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     alert_filename = None  # Set by setup_network\n \n     def run_test(self):"
      },
      {
        "sha": "d035ca907a5d778619c0c696993d0e61f9c9ccd0",
        "filename": "test/functional/mempool_resurrect.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/mempool_resurrect.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/mempool_resurrect.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_resurrect.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -13,6 +13,9 @@ class MempoolCoinbaseTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         node0_address = self.nodes[0].getnewaddress()\n         # Spend block 1/2/3's coinbase transactions"
      },
      {
        "sha": "854d506f0dd712d4cfaf8f6371e1fa6d6684d22f",
        "filename": "test/functional/mempool_spend_coinbase.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/mempool_spend_coinbase.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/mempool_spend_coinbase.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_spend_coinbase.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -21,6 +21,9 @@ class MempoolSpendCoinbaseTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         chain_height = self.nodes[0].getblockcount()\n         assert_equal(chain_height, 200)"
      },
      {
        "sha": "5b53df832ae62584bce6c4c7cf99a126beaf880a",
        "filename": "test/functional/mining_basic.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/mining_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/mining_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_basic.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -31,6 +31,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = False\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         node = self.nodes[0]\n "
      },
      {
        "sha": "7d27a2a83a98b3d2fe689e1a155029f38cf473aa",
        "filename": "test/functional/mining_getblocktemplate_longpoll.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/mining_getblocktemplate_longpoll.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/mining_getblocktemplate_longpoll.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_getblocktemplate_longpoll.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -28,6 +28,9 @@ class GetBlockTemplateLPTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.log.info(\"Warning: this test will take about 70 seconds in the best case. Be patient.\")\n         self.nodes[0].generate(10)\n@@ -70,4 +73,3 @@ def run_test(self):\n \n if __name__ == '__main__':\n     GetBlockTemplateLPTest().main()\n-"
      },
      {
        "sha": "92590717f3c4dac5f4a3fb8c9a7a97bd3cb9403f",
        "filename": "test/functional/mining_prioritisetransaction.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/mining_prioritisetransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/mining_prioritisetransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_prioritisetransaction.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -16,6 +16,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[\"-printpriority=1\"], [\"-printpriority=1\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # Test `prioritisetransaction` required parameters\n         assert_raises_rpc_error(-1, \"prioritisetransaction\", self.nodes[0].prioritisetransaction)"
      },
      {
        "sha": "3a5bdf806b29174152181baa74e463f61eaffb2d",
        "filename": "test/functional/p2p_compactblocks.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/p2p_compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/p2p_compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_compactblocks.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -102,6 +102,9 @@ def set_test_params(self):\n         self.extra_args = [[\"-vbparams=segwit:0:0\"], [\"-vbparams=segwit:0:999999999999\", \"-txindex\", \"-deprecatedrpc=addwitnessaddress\"]]\n         self.utxos = []\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def build_block_on_tip(self, node, segwit=False):\n         height = node.getblockcount()\n         tip = node.getbestblockhash()"
      },
      {
        "sha": "d589519e450048fba34f6e610d52d2aeb4a145fe",
        "filename": "test/functional/p2p_feefilter.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/p2p_feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/p2p_feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_feefilter.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -42,6 +42,9 @@ class FeeFilterTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         node1 = self.nodes[1]\n         node0 = self.nodes[0]"
      },
      {
        "sha": "884fb4b063335024baa779dddc871b065bf1967e",
        "filename": "test/functional/p2p_fingerprint.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/p2p_fingerprint.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/p2p_fingerprint.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_fingerprint.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -30,6 +30,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     # Build a chain of blocks on top of given one\n     def build_chain(self, nblocks, prev_hash, prev_height, prev_median_time):\n         blocks = []"
      },
      {
        "sha": "0a7b83ed73bcad4e72b51b34cce8715d50964872",
        "filename": "test/functional/p2p_invalid_block.py",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/p2p_invalid_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/p2p_invalid_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_block.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -24,6 +24,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.extra_args = [[\"-whitelist=127.0.0.1\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # Add p2p connection to node0\n         node = self.nodes[0]  # convenience reference to the node\n@@ -42,7 +45,7 @@ def run_test(self):\n         # Save the coinbase for later\n         block1 = block\n         tip = block.sha256\n-        node.p2p.send_blocks_and_test([block1], node, True)\n+        node.p2p.send_blocks_and_test([block1], node, success=True)\n \n         self.log.info(\"Mature the block.\")\n         node.generate(100)\n@@ -79,7 +82,7 @@ def run_test(self):\n         assert_equal(orig_hash, block2.rehash())\n         assert(block2_orig.vtx != block2.vtx)\n \n-        node.p2p.send_blocks_and_test([block2], node, False, False, 16, b'bad-txns-duplicate')\n+        node.p2p.send_blocks_and_test([block2], node, success=False, request_block=False, reject_code=16, reject_reason=b'bad-txns-duplicate')\n \n         # Check transactions for duplicate inputs\n         self.log.info(\"Test duplicate input block.\")\n@@ -102,7 +105,7 @@ def run_test(self):\n         block3.rehash()\n         block3.solve()\n \n-        node.p2p.send_blocks_and_test([block3], node, False, False, 16, b'bad-cb-amount')\n+        node.p2p.send_blocks_and_test([block3], node, success=False, request_block=False, reject_code=16, reject_reason=b'bad-cb-amount')\n \n if __name__ == '__main__':\n     InvalidBlockRequestTest().main()"
      },
      {
        "sha": "4cc43a4fa4eee7631f376d0451faaf02140fcd3c",
        "filename": "test/functional/p2p_invalid_locator.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/p2p_invalid_locator.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/p2p_invalid_locator.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_locator.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -15,6 +15,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = False\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         node = self.nodes[0]  # convenience reference to the node\n         node.generate(1)  # Get node out of IBD"
      },
      {
        "sha": "5cf0a75ab239cd6f731ea9bdd497c3e7081b8437",
        "filename": "test/functional/p2p_invalid_tx.py",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/p2p_invalid_tx.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/p2p_invalid_tx.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_tx.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -26,6 +26,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def bootstrap_p2p(self, *, num_connections=1):\n         \"\"\"Add a P2P connection to the node.\n \n@@ -136,11 +139,16 @@ def run_test(self):\n \n         # restart node with sending BIP61 messages disabled, check that it disconnects without sending the reject message\n         self.log.info('Test a transaction that is rejected, with BIP61 disabled')\n-        self.restart_node(0, ['-enablebip61=0','-persistmempool=0'])\n+        self.restart_node(0, ['-enablebip61=0', '-persistmempool=0'])\n         self.reconnect_p2p(num_connections=1)\n-        node.p2p.send_txs_and_test([tx1], node, success=False, expect_disconnect=True)\n+        with node.assert_debug_log(expected_msgs=[\n+                \"{} from peer=0 was not accepted: mandatory-script-verify-flag-failed (Invalid OP_IF construction) (code 16)\".format(tx1.hash),\n+                \"disconnecting peer=0\",\n+        ]):\n+            node.p2p.send_txs_and_test([tx1], node, success=False, expect_disconnect=True)\n         # send_txs_and_test will have waited for disconnect, so we can safely check that no reject has been received\n         assert_equal(node.p2p.reject_code_received, None)\n \n+\n if __name__ == '__main__':\n     InvalidTxRequestTest().main()"
      },
      {
        "sha": "05354d17e1c62788ea2386f61a06b9759aeb232f",
        "filename": "test/functional/p2p_leak.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/p2p_leak.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/p2p_leak.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_leak.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -93,6 +93,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [['-banscore=' + str(banscore)]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         no_version_bannode = self.nodes[0].add_p2p_connection(CNodeNoVersionBan(), send_version=False, wait_for_verack=False)\n         no_version_idlenode = self.nodes[0].add_p2p_connection(CNodeNoVersionIdle(), send_version=False, wait_for_verack=False)"
      },
      {
        "sha": "ef9c71dc02d105d8ec71c6c19662d55cee29a9db",
        "filename": "test/functional/p2p_node_network_limited.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/p2p_node_network_limited.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/p2p_node_network_limited.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_node_network_limited.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -34,6 +34,9 @@ def set_test_params(self):\n         self.num_nodes = 3\n         self.extra_args = [['-prune=550', '-addrmantest'], [], []]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def disconnect_all(self):\n         disconnect_nodes(self.nodes[0], 1)\n         disconnect_nodes(self.nodes[1], 0)"
      },
      {
        "sha": "f5ff646978a96dd01a24e52a8ebfb5f91529a459",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 114,
        "deletions": 111,
        "changes": 225,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -119,7 +119,7 @@ def get_virtual_size(witness_block):\n     vsize = int((3 * base_size + total_size + 3) / 4)\n     return vsize\n \n-def test_transaction_acceptance(rpc, p2p, tx, with_witness, accepted, reason=None):\n+def test_transaction_acceptance(node, p2p, tx, with_witness, accepted, reason=None):\n     \"\"\"Send a transaction to the node and check that it's accepted to the mempool\n \n     - Submit the transaction over the p2p interface\n@@ -129,13 +129,13 @@ def test_transaction_acceptance(rpc, p2p, tx, with_witness, accepted, reason=Non\n         tx_message = msg_witness_tx(tx)\n     p2p.send_message(tx_message)\n     p2p.sync_with_ping()\n-    assert_equal(tx.hash in rpc.getrawmempool(), accepted)\n+    assert_equal(tx.hash in node.getrawmempool(), accepted)\n     if (reason is not None and not accepted):\n         # Check the rejection reason as well.\n         with mininode_lock:\n             assert_equal(p2p.last_message[\"reject\"].reason, reason)\n \n-def test_witness_block(rpc, p2p, block, accepted, with_witness=True, reason=None):\n+def test_witness_block(node, p2p, block, accepted, with_witness=True, reason=None):\n     \"\"\"Send a block to the node and check that it's accepted\n \n     - Submit the block over the p2p interface\n@@ -145,7 +145,7 @@ def test_witness_block(rpc, p2p, block, accepted, with_witness=True, reason=None\n     else:\n         p2p.send_message(msg_block(block))\n     p2p.sync_with_ping()\n-    assert_equal(rpc.getbestblockhash() == block.hash, accepted)\n+    assert_equal(node.getbestblockhash() == block.hash, accepted)\n     if (reason is not None and not accepted):\n         # Check the rejection reason as well.\n         with mininode_lock:\n@@ -198,6 +198,9 @@ def set_test_params(self):\n         # This test tests SegWit both pre and post-activation, so use the normal BIP9 activation.\n         self.extra_args = [[\"-whitelist=127.0.0.1\", \"-vbparams=segwit:0:999999999999\"], [\"-whitelist=127.0.0.1\", \"-acceptnonstdtxn=0\", \"-vbparams=segwit:0:999999999999\"], [\"-whitelist=127.0.0.1\", \"-vbparams=segwit:0:0\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.setup_nodes()\n         connect_nodes(self.nodes[0], 1)\n@@ -349,7 +352,7 @@ def test_unnecessary_witness_before_segwit_activation(self):\n         self.update_witness_block_with_transactions(block, [tx])\n         # Sending witness data before activation is not allowed (anti-spam\n         # rule).\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n         wait_until(lambda: 'reject' in self.test_node.last_message and self.test_node.last_message[\"reject\"].reason ==  b\"unexpected-witness\")\n \n         # But it should not be permanently marked bad...\n@@ -380,20 +383,20 @@ def test_block_relay(self):\n \n         self.test_node.announce_block_and_wait_for_getdata(block1, use_header=False)\n         assert(self.test_node.last_message[\"getdata\"].inv[0].type == blocktype)\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block1, True)\n+        test_witness_block(self.nodes[0], self.test_node, block1, True)\n \n         block2 = self.build_next_block(version=4)\n         block2.solve()\n \n         self.test_node.announce_block_and_wait_for_getdata(block2, use_header=True)\n         assert(self.test_node.last_message[\"getdata\"].inv[0].type == blocktype)\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block2, True)\n+        test_witness_block(self.nodes[0], self.test_node, block2, True)\n \n         block3 = self.build_next_block(version=(VB_TOP_BITS | (1 << 15)))\n         block3.solve()\n         self.test_node.announce_block_and_wait_for_getdata(block3, use_header=True)\n         assert(self.test_node.last_message[\"getdata\"].inv[0].type == blocktype)\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block3, True)\n+        test_witness_block(self.nodes[0], self.test_node, block3, True)\n \n         # Check that we can getdata for witness blocks or regular blocks,\n         # and the right thing happens.\n@@ -423,7 +426,7 @@ def test_block_relay(self):\n             # This gives us a witness commitment.\n             assert(len(block.vtx[0].wit.vtxinwit) == 1)\n             assert(len(block.vtx[0].wit.vtxinwit[0].scriptWitness.stack) == 1)\n-            test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+            test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n             # Now try to retrieve it...\n             rpc_block = self.nodes[0].getblock(block.hash, False)\n             non_wit_block = self.test_node.request_block(block.sha256, 2)\n@@ -640,11 +643,11 @@ def test_witness_tx_relay_before_segwit_activation(self):\n         # its from)\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n         assert_equal(len(self.nodes[1].getrawmempool()), 0)\n-        test_transaction_acceptance(self.nodes[0].rpc, self.old_node, tx, with_witness=True, accepted=False)\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=True, accepted=False)\n+        test_transaction_acceptance(self.nodes[0], self.old_node, tx, with_witness=True, accepted=False)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=True, accepted=False)\n \n         # But eliminating the witness should fix it\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=False, accepted=True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=False, accepted=True)\n \n         # Cleanup: mine the first transaction and update utxo\n         self.nodes[0].generate(1)\n@@ -674,7 +677,7 @@ def test_standardness_v0(self):\n         p2sh_tx.rehash()\n \n         # Mine it on test_node to create the confirmed output.\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2sh_tx, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, p2sh_tx, with_witness=True, accepted=True)\n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n \n@@ -689,7 +692,7 @@ def test_standardness_v0(self):\n \n         # This is always accepted, since the mempool policy is to consider segwit as always active\n         # and thus allow segwit outputs\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, tx, with_witness=True, accepted=True)\n \n         # Now create something that looks like a P2PKH output. This won't be spendable.\n         script_pubkey = CScript([OP_0, hash160(witness_hash)])\n@@ -701,7 +704,7 @@ def test_standardness_v0(self):\n         tx2.wit.vtxinwit[0].scriptWitness.stack = [witness_program]\n         tx2.rehash()\n \n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx2, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, tx2, with_witness=True, accepted=True)\n \n         # Now update self.utxo for later tests.\n         tx3 = CTransaction()\n@@ -723,7 +726,7 @@ def test_standardness_v0(self):\n             tx3.vout = [tx3_out]\n             tx3.rehash()\n             assert_equal(self.nodes[0].testmempoolaccept([bytes_to_hex_str(tx3.serialize_with_witness())]), [{'txid': tx3.hash, 'allowed': True}])\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx3, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx3, with_witness=True, accepted=True)\n \n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n@@ -760,10 +763,10 @@ def test_p2sh_witness(self):\n         tx.rehash()\n \n         # Verify mempool acceptance and block validity\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=False, accepted=True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=False, accepted=True)\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True, with_witness=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True, with_witness=True)\n         sync_blocks(self.nodes)\n \n         # Now test attempts to spend the output.\n@@ -777,12 +780,12 @@ def test_p2sh_witness(self):\n         # will require a witness to spend a witness program regardless of\n         # segwit activation.  Note that older bitcoind's that are not\n         # segwit-aware would also reject this for failing CLEANSTACK.\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, spend_tx, with_witness=False, accepted=False)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, spend_tx, with_witness=False, accepted=False)\n \n         # Try to put the witness script in the script_sig, should also fail.\n         spend_tx.vin[0].script_sig = CScript([p2wsh_pubkey, b'a'])\n         spend_tx.rehash()\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, spend_tx, with_witness=False, accepted=False)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, spend_tx, with_witness=False, accepted=False)\n \n         # Now put the witness script in the witness, should succeed after\n         # segwit activates.\n@@ -792,15 +795,15 @@ def test_p2sh_witness(self):\n         spend_tx.wit.vtxinwit[0].scriptWitness.stack = [b'a', witness_program]\n \n         # Verify mempool acceptance\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, spend_tx, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, spend_tx, with_witness=True, accepted=True)\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [spend_tx])\n \n         # If we're after activation, then sending this with witnesses should be valid.\n         # This no longer works before activation, because SCRIPT_VERIFY_WITNESS\n         # is always set.\n         # TODO: rewrite this test to make clear that it only works after activation.\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Update self.utxo\n         self.utxo.pop(0)\n@@ -821,7 +824,7 @@ def test_witness_commitments(self):\n         assert(msg_witness_block(block).serialize() != msg_block(block).serialize())\n \n         # This empty block should be valid.\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Try to tweak the nonce\n         block_2 = self.build_next_block()\n@@ -832,7 +835,7 @@ def test_witness_commitments(self):\n         assert(block_2.vtx[0].vout[-1] != block.vtx[0].vout[-1])\n \n         # This should also be valid.\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block_2, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block_2, accepted=True)\n \n         # Now test commitments with actual transactions\n         tx = CTransaction()\n@@ -864,7 +867,7 @@ def test_witness_commitments(self):\n         block_3.rehash()\n         block_3.solve()\n \n-        test_witness_block(self.nodes[0].rpc, self.test_node, block_3, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block_3, accepted=False)\n \n         # Add a different commitment with different nonce, but in the\n         # right location, and with some funds burned(!).\n@@ -878,7 +881,7 @@ def test_witness_commitments(self):\n         block_3.rehash()\n         assert(len(block_3.vtx[0].vout) == 4)  # 3 OP_returns\n         block_3.solve()\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block_3, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block_3, accepted=True)\n \n         # Finally test that a block with no witness transactions can\n         # omit the commitment.\n@@ -890,7 +893,7 @@ def test_witness_commitments(self):\n         block_4.vtx.append(tx3)\n         block_4.hashMerkleRoot = block_4.calc_merkle_root()\n         block_4.solve()\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block_4, with_witness=False, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block_4, with_witness=False, accepted=True)\n \n         # Update available utxo's for use in later test.\n         self.utxo.pop(0)\n@@ -930,11 +933,11 @@ def test_block_malleability(self):\n         # Change the nonce -- should not cause the block to be permanently\n         # failed\n         block.vtx[0].wit.vtxinwit[0].scriptWitness.stack = [ser_uint256(1)]\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Changing the witness reserved value doesn't change the block hash\n         block.vtx[0].wit.vtxinwit[0].scriptWitness.stack = [ser_uint256(0)]\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n     @subtest\n     def test_witness_block_size(self):\n@@ -998,7 +1001,7 @@ def test_witness_block_size(self):\n         # limit\n         assert(len(block.serialize(True)) > 2 * 1024 * 1024)\n \n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Now resize the second transaction to make the block fit.\n         cur_length = len(block.vtx[-1].wit.vtxinwit[0].scriptWitness.stack[0])\n@@ -1008,7 +1011,7 @@ def test_witness_block_size(self):\n         block.solve()\n         assert(get_virtual_size(block) == MAX_BLOCK_BASE_SIZE)\n \n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Update available utxo's\n         self.utxo.pop(0)\n@@ -1071,7 +1074,7 @@ def test_extra_witness_data(self):\n         self.update_witness_block_with_transactions(block, [tx])\n \n         # Extra witness data should not be allowed.\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Try extra signature data.  Ok if we're not spending a witness output.\n         block.vtx[1].wit.vtxinwit = []\n@@ -1080,7 +1083,7 @@ def test_extra_witness_data(self):\n         add_witness_commitment(block)\n         block.solve()\n \n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Now try extra witness/signature data on an input that DOES require a\n         # witness\n@@ -1096,7 +1099,7 @@ def test_extra_witness_data(self):\n         self.update_witness_block_with_transactions(block, [tx2])\n \n         # This has extra witness data, so it should fail.\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Now get rid of the extra witness, but add extra scriptSig data\n         tx2.vin[0].scriptSig = CScript([OP_TRUE])\n@@ -1108,7 +1111,7 @@ def test_extra_witness_data(self):\n         block.solve()\n \n         # This has extra signature data for a witness input, so it should fail.\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Now get rid of the extra scriptsig on the witness input, and verify\n         # success (even with extra scriptsig data in the non-witness input)\n@@ -1117,7 +1120,7 @@ def test_extra_witness_data(self):\n         add_witness_commitment(block)\n         block.solve()\n \n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Update utxo for later tests\n         self.utxo.pop(0)\n@@ -1147,14 +1150,14 @@ def test_max_witness_push_length(self):\n         tx2.rehash()\n \n         self.update_witness_block_with_transactions(block, [tx, tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Now reduce the length of the stack element\n         tx2.wit.vtxinwit[0].scriptWitness.stack[0] = b'a' * (MAX_SCRIPT_ELEMENT_SIZE)\n \n         add_witness_commitment(block)\n         block.solve()\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Update the utxo for later tests\n         self.utxo.pop()\n@@ -1188,7 +1191,7 @@ def test_max_witness_program_length(self):\n \n         self.update_witness_block_with_transactions(block, [tx, tx2])\n \n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Try again with one less byte in the witness program\n         witness_program = CScript([b'a' * 520] * 19 + [OP_DROP] * 62 + [OP_TRUE])\n@@ -1203,7 +1206,7 @@ def test_max_witness_program_length(self):\n         tx2.rehash()\n         block.vtx = [block.vtx[0]]\n         self.update_witness_block_with_transactions(block, [tx, tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         self.utxo.pop()\n         self.utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n@@ -1227,7 +1230,7 @@ def test_witness_input_length(self):\n \n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Try various ways to spend tx that should all break.\n         # This \"broken\" transaction serializer will not normalize\n@@ -1262,15 +1265,15 @@ def serialize_with_witness(self):\n \n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Now try using a too short vtxinwit\n         tx2.wit.vtxinwit.pop()\n         tx2.wit.vtxinwit.pop()\n \n         block.vtx = [block.vtx[0]]\n         self.update_witness_block_with_transactions(block, [tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Now make one of the intermediate witnesses be incorrect\n         tx2.wit.vtxinwit.append(CTxInWitness())\n@@ -1279,13 +1282,13 @@ def serialize_with_witness(self):\n \n         block.vtx = [block.vtx[0]]\n         self.update_witness_block_with_transactions(block, [tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Fix the broken witness and the block should be accepted.\n         tx2.wit.vtxinwit[5].scriptWitness.stack = [b'a', witness_program]\n         block.vtx = [block.vtx[0]]\n         self.update_witness_block_with_transactions(block, [tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         self.utxo.pop()\n         self.utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n@@ -1314,11 +1317,11 @@ def test_tx_relay_after_segwit_activation(self):\n         # Verify that unnecessary witnesses are rejected.\n         self.test_node.announce_tx_and_wait_for_getdata(tx)\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=True, accepted=False)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=True, accepted=False)\n \n         # Verify that removing the witness succeeds.\n         self.test_node.announce_tx_and_wait_for_getdata(tx)\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=False, accepted=True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=False, accepted=True)\n \n         # Now try to add extra witness data to a valid witness tx.\n         witness_program = CScript([OP_TRUE])\n@@ -1343,24 +1346,24 @@ def test_tx_relay_after_segwit_activation(self):\n \n         # Node will not be blinded to the transaction\n         self.std_node.announce_tx_and_wait_for_getdata(tx3)\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx3, True, False, b'tx-size')\n+        test_transaction_acceptance(self.nodes[1], self.std_node, tx3, True, False, b'tx-size')\n         self.std_node.announce_tx_and_wait_for_getdata(tx3)\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx3, True, False, b'tx-size')\n+        test_transaction_acceptance(self.nodes[1], self.std_node, tx3, True, False, b'tx-size')\n \n         # Remove witness stuffing, instead add extra witness push on stack\n         tx3.vout[0] = CTxOut(tx2.vout[0].nValue - 1000, CScript([OP_TRUE, OP_DROP] * 15 + [OP_TRUE]))\n         tx3.wit.vtxinwit[0].scriptWitness.stack = [CScript([CScriptNum(1)]), witness_program]\n         tx3.rehash()\n \n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx2, with_witness=True, accepted=True)\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx3, with_witness=True, accepted=False)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx2, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx3, with_witness=True, accepted=False)\n \n         # Get rid of the extra witness, and verify acceptance.\n         tx3.wit.vtxinwit[0].scriptWitness.stack = [witness_program]\n         # Also check that old_node gets a tx announcement, even though this is\n         # a witness transaction.\n         self.old_node.wait_for_inv([CInv(1, tx2.sha256)])  # wait until tx2 was inv'ed\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx3, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx3, with_witness=True, accepted=True)\n         self.old_node.wait_for_inv([CInv(1, tx3.sha256)])\n \n         # Test that getrawtransaction returns correct witness information\n@@ -1400,7 +1403,7 @@ def test_segwit_versions(self):\n             tx.rehash()\n             block = self.build_next_block()\n             self.update_witness_block_with_transactions(block, [tx])\n-            test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+            test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n             self.utxo.pop(0)\n             for i in range(NUM_SEGWIT_VERSIONS):\n                 self.utxo.append(UTXO(tx.sha256, i, split_value))\n@@ -1417,8 +1420,8 @@ def test_segwit_versions(self):\n             tx.vin = [CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\")]\n             tx.vout = [CTxOut(self.utxo[0].nValue - 1000, script_pubkey)]\n             tx.rehash()\n-            test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx, with_witness=True, accepted=False)\n-            test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=True, accepted=True)\n+            test_transaction_acceptance(self.nodes[1], self.std_node, tx, with_witness=True, accepted=False)\n+            test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=True, accepted=True)\n             self.utxo.pop(0)\n             temp_utxo.append(UTXO(tx.sha256, 0, tx.vout[0].nValue))\n \n@@ -1437,8 +1440,8 @@ def test_segwit_versions(self):\n         tx2.rehash()\n         # Gets accepted to test_node, because standardness of outputs isn't\n         # checked with fRequireStandard\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx2, with_witness=True, accepted=True)\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx2, with_witness=True, accepted=False)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx2, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, tx2, with_witness=True, accepted=False)\n         temp_utxo.pop()  # last entry in temp_utxo was the output we just spent\n         temp_utxo.append(UTXO(tx2.sha256, 0, tx2.vout[0].nValue))\n \n@@ -1454,15 +1457,15 @@ def test_segwit_versions(self):\n         tx3.rehash()\n         # Spending a higher version witness output is not allowed by policy,\n         # even with fRequireStandard=false.\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx3, with_witness=True, accepted=False)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx3, with_witness=True, accepted=False)\n         self.test_node.sync_with_ping()\n         with mininode_lock:\n             assert(b\"reserved for soft-fork upgrades\" in self.test_node.last_message[\"reject\"].reason)\n \n         # Building a block with the transaction must be valid, however.\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx2, tx3])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n         sync_blocks(self.nodes)\n \n         # Add utxo to our list\n@@ -1480,7 +1483,7 @@ def test_premature_coinbase_witness_spend(self):\n         # This next line will rehash the coinbase and update the merkle\n         # root, and solve.\n         self.update_witness_block_with_transactions(block, [])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         spend_tx = CTransaction()\n         spend_tx.vin = [CTxIn(COutPoint(block.vtx[0].sha256, 0), b\"\")]\n@@ -1494,13 +1497,13 @@ def test_premature_coinbase_witness_spend(self):\n         sync_blocks(self.nodes)\n         block2 = self.build_next_block()\n         self.update_witness_block_with_transactions(block2, [spend_tx])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block2, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block2, accepted=False)\n \n         # Advancing one more block should allow the spend.\n         self.nodes[0].generate(1)\n         block2 = self.build_next_block()\n         self.update_witness_block_with_transactions(block2, [spend_tx])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block2, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block2, accepted=True)\n         sync_blocks(self.nodes)\n \n     @subtest\n@@ -1532,7 +1535,7 @@ def test_uncompressed_pubkey(self):\n         # Confirm it in a block.\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Now try to spend it. Send it to a P2WSH output, which we'll\n         # use in the next test.\n@@ -1551,11 +1554,11 @@ def test_uncompressed_pubkey(self):\n         tx2.rehash()\n \n         # Should fail policy test.\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx2, True, False, b'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx2, True, False, b'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n         # But passes consensus.\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Test 2: P2WSH\n         # Try to spend the P2WSH output created in last test.\n@@ -1571,11 +1574,11 @@ def test_uncompressed_pubkey(self):\n         sign_p2pk_witness_input(witness_program, tx3, 0, SIGHASH_ALL, tx2.vout[0].nValue, key)\n \n         # Should fail policy test.\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx3, True, False, b'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx3, True, False, b'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n         # But passes consensus.\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx3])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Test 3: P2SH(P2WSH)\n         # Try to spend the P2SH output created in the last test.\n@@ -1588,10 +1591,10 @@ def test_uncompressed_pubkey(self):\n         sign_p2pk_witness_input(witness_program, tx4, 0, SIGHASH_ALL, tx3.vout[0].nValue, key)\n \n         # Should fail policy test.\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx4, True, False, b'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx4, True, False, b'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx4])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Test 4: Uncompressed pubkeys should still be valid in non-segwit\n         # transactions.\n@@ -1603,10 +1606,10 @@ def test_uncompressed_pubkey(self):\n         tx5.vin[0].scriptSig = CScript([signature, pubkey])\n         tx5.rehash()\n         # Should pass policy and consensus.\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx5, True, True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx5, True, True)\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx5])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n         self.utxo.append(UTXO(tx5.sha256, 0, tx5.vout[0].nValue))\n \n     @subtest\n@@ -1626,11 +1629,11 @@ def test_signature_version_1(self):\n         tx.vout.append(CTxOut(self.utxo[0].nValue - 1000, script_pubkey))\n         tx.rehash()\n \n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=True, accepted=True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=True, accepted=True)\n         # Mine this transaction in preparation for following tests.\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n         sync_blocks(self.nodes)\n         self.utxo.pop(0)\n \n@@ -1647,19 +1650,19 @@ def test_signature_version_1(self):\n                 # Too-large input value\n                 sign_p2pk_witness_input(witness_program, tx, 0, hashtype, prev_utxo.nValue + 1, key)\n                 self.update_witness_block_with_transactions(block, [tx])\n-                test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+                test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n                 # Too-small input value\n                 sign_p2pk_witness_input(witness_program, tx, 0, hashtype, prev_utxo.nValue - 1, key)\n                 block.vtx.pop()  # remove last tx\n                 self.update_witness_block_with_transactions(block, [tx])\n-                test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+                test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n                 # Now try correct value\n                 sign_p2pk_witness_input(witness_program, tx, 0, hashtype, prev_utxo.nValue, key)\n                 block.vtx.pop()\n                 self.update_witness_block_with_transactions(block, [tx])\n-                test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+                test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n                 prev_utxo = UTXO(tx.sha256, 0, tx.vout[0].nValue)\n \n@@ -1683,7 +1686,7 @@ def test_signature_version_1(self):\n \n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         block = self.build_next_block()\n         used_sighash_single_out_of_bounds = False\n@@ -1725,15 +1728,15 @@ def test_signature_version_1(self):\n             # Test the block periodically, if we're close to maxblocksize\n             if (get_virtual_size(block) > MAX_BLOCK_BASE_SIZE - 1000):\n                 self.update_witness_block_with_transactions(block, [])\n-                test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+                test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n                 block = self.build_next_block()\n \n         if (not used_sighash_single_out_of_bounds):\n             self.log.info(\"WARNING: this test run didn't attempt SIGHASH_SINGLE with out-of-bounds index value\")\n         # Test the transactions we've added to the block\n         if (len(block.vtx) > 1):\n             self.update_witness_block_with_transactions(block, [])\n-            test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+            test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         # Now test witness version 0 P2PKH transactions\n         pubkeyhash = hash160(pubkey)\n@@ -1755,7 +1758,7 @@ def test_signature_version_1(self):\n         tx2.vin[0].scriptSig = CScript([signature, pubkey])\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx, tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Move the signature to the witness.\n         block.vtx.pop()\n@@ -1765,7 +1768,7 @@ def test_signature_version_1(self):\n         tx2.rehash()\n \n         self.update_witness_block_with_transactions(block, [tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         temp_utxos.pop(0)\n \n@@ -1786,7 +1789,7 @@ def test_signature_version_1(self):\n             index += 1\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n         for i in range(len(tx.vout)):\n             self.utxo.append(UTXO(tx.sha256, i, tx.vout[i].nValue))\n@@ -1808,7 +1811,7 @@ def test_non_standard_witness_blinding(self):\n         tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n         tx.vout.append(CTxOut(self.utxo[0].nValue - 1000, script_pubkey))\n         tx.rehash()\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, False, True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx, False, True)\n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n \n@@ -1825,18 +1828,18 @@ def test_non_standard_witness_blinding(self):\n         tx2.rehash()\n         # This will be rejected due to a policy check:\n         # No witness is allowed, since it is not a witness program but a p2sh program\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx2, True, False, b'bad-witness-nonstandard')\n+        test_transaction_acceptance(self.nodes[1], self.std_node, tx2, True, False, b'bad-witness-nonstandard')\n \n         # If we send without witness, it should be accepted.\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx2, False, True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, tx2, False, True)\n \n         # Now create a new anyone-can-spend utxo for the next test.\n         tx3 = CTransaction()\n         tx3.vin.append(CTxIn(COutPoint(tx2.sha256, 0), CScript([p2sh_program])))\n         tx3.vout.append(CTxOut(tx2.vout[0].nValue - 1000, CScript([OP_TRUE, OP_DROP] * 15 + [OP_TRUE])))\n         tx3.rehash()\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx2, False, True)\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx3, False, True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx2, False, True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx3, False, True)\n \n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n@@ -1872,7 +1875,7 @@ def test_non_standard_witness(self):\n             tx.vout.append(CTxOut(outputvalue, CScript([OP_HASH160, p2sh, OP_EQUAL])))\n         tx.rehash()\n         txid = tx.sha256\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx, with_witness=False, accepted=True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx, with_witness=False, accepted=True)\n \n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n@@ -1897,45 +1900,45 @@ def test_non_standard_witness(self):\n         # Testing native P2WSH\n         # Witness stack size, excluding witnessScript, over 100 is non-standard\n         p2wsh_txs[0].wit.vtxinwit[0].scriptWitness.stack = [pad] * 101 + [scripts[0]]\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2wsh_txs[0], True, False, b'bad-witness-nonstandard')\n+        test_transaction_acceptance(self.nodes[1], self.std_node, p2wsh_txs[0], True, False, b'bad-witness-nonstandard')\n         # Non-standard nodes should accept\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2wsh_txs[0], True, True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, p2wsh_txs[0], True, True)\n \n         # Stack element size over 80 bytes is non-standard\n         p2wsh_txs[1].wit.vtxinwit[0].scriptWitness.stack = [pad * 81] * 100 + [scripts[1]]\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2wsh_txs[1], True, False, b'bad-witness-nonstandard')\n+        test_transaction_acceptance(self.nodes[1], self.std_node, p2wsh_txs[1], True, False, b'bad-witness-nonstandard')\n         # Non-standard nodes should accept\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2wsh_txs[1], True, True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, p2wsh_txs[1], True, True)\n         # Standard nodes should accept if element size is not over 80 bytes\n         p2wsh_txs[1].wit.vtxinwit[0].scriptWitness.stack = [pad * 80] * 100 + [scripts[1]]\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2wsh_txs[1], True, True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, p2wsh_txs[1], True, True)\n \n         # witnessScript size at 3600 bytes is standard\n         p2wsh_txs[2].wit.vtxinwit[0].scriptWitness.stack = [pad, pad, scripts[2]]\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2wsh_txs[2], True, True)\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2wsh_txs[2], True, True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, p2wsh_txs[2], True, True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, p2wsh_txs[2], True, True)\n \n         # witnessScript size at 3601 bytes is non-standard\n         p2wsh_txs[3].wit.vtxinwit[0].scriptWitness.stack = [pad, pad, pad, scripts[3]]\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2wsh_txs[3], True, False, b'bad-witness-nonstandard')\n+        test_transaction_acceptance(self.nodes[1], self.std_node, p2wsh_txs[3], True, False, b'bad-witness-nonstandard')\n         # Non-standard nodes should accept\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2wsh_txs[3], True, True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, p2wsh_txs[3], True, True)\n \n         # Repeating the same tests with P2SH-P2WSH\n         p2sh_txs[0].wit.vtxinwit[0].scriptWitness.stack = [pad] * 101 + [scripts[0]]\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2sh_txs[0], True, False, b'bad-witness-nonstandard')\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2sh_txs[0], True, True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, p2sh_txs[0], True, False, b'bad-witness-nonstandard')\n+        test_transaction_acceptance(self.nodes[0], self.test_node, p2sh_txs[0], True, True)\n         p2sh_txs[1].wit.vtxinwit[0].scriptWitness.stack = [pad * 81] * 100 + [scripts[1]]\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2sh_txs[1], True, False, b'bad-witness-nonstandard')\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2sh_txs[1], True, True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, p2sh_txs[1], True, False, b'bad-witness-nonstandard')\n+        test_transaction_acceptance(self.nodes[0], self.test_node, p2sh_txs[1], True, True)\n         p2sh_txs[1].wit.vtxinwit[0].scriptWitness.stack = [pad * 80] * 100 + [scripts[1]]\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2sh_txs[1], True, True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, p2sh_txs[1], True, True)\n         p2sh_txs[2].wit.vtxinwit[0].scriptWitness.stack = [pad, pad, scripts[2]]\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2sh_txs[2], True, True)\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2sh_txs[2], True, True)\n+        test_transaction_acceptance(self.nodes[0], self.test_node, p2sh_txs[2], True, True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, p2sh_txs[2], True, True)\n         p2sh_txs[3].wit.vtxinwit[0].scriptWitness.stack = [pad, pad, pad, scripts[3]]\n-        test_transaction_acceptance(self.nodes[1].rpc, self.std_node, p2sh_txs[3], True, False, b'bad-witness-nonstandard')\n-        test_transaction_acceptance(self.nodes[0].rpc, self.test_node, p2sh_txs[3], True, True)\n+        test_transaction_acceptance(self.nodes[1], self.std_node, p2sh_txs[3], True, False, b'bad-witness-nonstandard')\n+        test_transaction_acceptance(self.nodes[0], self.test_node, p2sh_txs[3], True, True)\n \n         self.nodes[0].generate(1)  # Mine and clean up the mempool of non-standard node\n         # Valid but non-standard transactions in a block should be accepted by standard node\n@@ -2011,7 +2014,7 @@ def test_witness_sigops(self):\n \n         block_1 = self.build_next_block()\n         self.update_witness_block_with_transactions(block_1, [tx])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block_1, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block_1, accepted=True)\n \n         tx2 = CTransaction()\n         # If we try to spend the first n-1 outputs from tx, that should be\n@@ -2028,7 +2031,7 @@ def test_witness_sigops(self):\n \n         block_2 = self.build_next_block()\n         self.update_witness_block_with_transactions(block_2, [tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block_2, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block_2, accepted=False)\n \n         # Try dropping the last input in tx2, and add an output that has\n         # too many sigops (contributing to legacy sigop count).\n@@ -2041,14 +2044,14 @@ def test_witness_sigops(self):\n         tx2.rehash()\n         block_3 = self.build_next_block()\n         self.update_witness_block_with_transactions(block_3, [tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block_3, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block_3, accepted=False)\n \n         # If we drop the last checksig in this output, the tx should succeed.\n         block_4 = self.build_next_block()\n         tx2.vout[-1].scriptPubKey = CScript([OP_CHECKSIG] * (checksig_count - 1))\n         tx2.rehash()\n         self.update_witness_block_with_transactions(block_4, [tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block_4, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block_4, accepted=True)\n \n         # Reset the tip back down for the next test\n         sync_blocks(self.nodes)\n@@ -2064,7 +2067,7 @@ def test_witness_sigops(self):\n         tx2.wit.vtxinwit[-1].scriptWitness.stack = [witness_program_justright]\n         tx2.rehash()\n         self.update_witness_block_with_transactions(block_5, [tx2])\n-        test_witness_block(self.nodes[0].rpc, self.test_node, block_5, accepted=True)\n+        test_witness_block(self.nodes[0], self.test_node, block_5, accepted=True)\n \n         # TODO: test p2sh sigop counting\n "
      },
      {
        "sha": "9a782c0bb9938cbf1d9c35d5ae7dea1e47d312c8",
        "filename": "test/functional/p2p_sendheaders.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/p2p_sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/p2p_sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_sendheaders.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -208,6 +208,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def mine_blocks(self, count):\n         \"\"\"Mine count blocks and return the new tip.\"\"\"\n "
      },
      {
        "sha": "232274f59eaecc792f06ba096c8e5d12df253c1d",
        "filename": "test/functional/p2p_unrequested_blocks.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/p2p_unrequested_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/p2p_unrequested_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_unrequested_blocks.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -66,6 +66,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[], [\"-minimumchainwork=0x10\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         # Node0 will be used to test behavior of processing unrequested blocks\n         # from peers which are not whitelisted, while Node1 will be used for"
      },
      {
        "sha": "00317a2c08823276bfa8824e8725e2cece40cd08",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -47,9 +47,13 @@\n class BlockchainTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n-        self.extra_args = [['-stopatheight=207', '-prune=1']]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n \n     def run_test(self):\n+        self.restart_node(0, extra_args=['-stopatheight=207', '-prune=1'])  # Set extra args with pruning after rescan is complete\n+\n         self._test_getblockchaininfo()\n         self._test_getchaintxstats()\n         self._test_gettxoutsetinfo()\n@@ -169,7 +173,7 @@ def _test_gettxoutsetinfo(self):\n         assert_equal(res['transactions'], 200)\n         assert_equal(res['height'], 200)\n         assert_equal(res['txouts'], 200)\n-        assert_equal(res['bogosize'], 17000),\n+        assert_equal(res['bogosize'], 15000),\n         assert_equal(res['bestblock'], node.getblockhash(200))\n         size = res['disk_size']\n         assert size > 6400"
      },
      {
        "sha": "3cc35a7b9a4e01978d00681ec20d707cfcb4e4a6",
        "filename": "test/functional/rpc_createmultisig.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_createmultisig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_createmultisig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_createmultisig.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -12,8 +12,11 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def get_keys(self):\n-        node0,node1,node2 = self.nodes\n+        node0, node1, node2 = self.nodes\n         self.add = [node1.getnewaddress() for _ in range(self.nkeys)]\n         self.pub = [node1.getaddressinfo(a)[\"pubkey\"] for a in self.add]\n         self.priv = [node1.dumpprivkey(a) for a in self.add]"
      },
      {
        "sha": "cd6e5511c4a596fd0efed495eb182d16dc4f66fc",
        "filename": "test/functional/rpc_deprecated.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_deprecated.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_deprecated.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_deprecated.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -12,6 +12,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.extra_args = [[], [\"-deprecatedrpc=validateaddress\", \"-deprecatedrpc=accounts\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # This test should be used to verify correct behaviour of deprecated\n         # RPC methods with and without the -deprecatedrpc flags. For example:"
      },
      {
        "sha": "daa890ab15620eadecd95369bad549a31b31aa82",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -29,6 +29,9 @@ def set_test_params(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self, split=False):\n         self.setup_nodes()\n "
      },
      {
        "sha": "bc19c60dde0834ad7ade58015e7cf5ae28fd7a21",
        "filename": "test/functional/rpc_getchaintips.py",
        "status": "modified",
        "additions": 10,
        "deletions": 7,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_getchaintips.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_getchaintips.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_getchaintips.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -17,15 +17,18 @@ class GetChainTipsTest (BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n \n-    def run_test (self):\n-        tips = self.nodes[0].getchaintips ()\n-        assert_equal (len (tips), 1)\n-        assert_equal (tips[0]['branchlen'], 0)\n-        assert_equal (tips[0]['height'], 200)\n-        assert_equal (tips[0]['status'], 'active')\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        tips = self.nodes[0].getchaintips()\n+        assert_equal(len(tips), 1)\n+        assert_equal(tips[0]['branchlen'], 0)\n+        assert_equal(tips[0]['height'], 200)\n+        assert_equal(tips[0]['status'], 'active')\n \n         # Split the network and build two chains of different lengths.\n-        self.split_network ()\n+        self.split_network()\n         self.nodes[0].generate(10)\n         self.nodes[2].generate(20)\n         self.sync_all([self.nodes[:2], self.nodes[2:]])"
      },
      {
        "sha": "be096af892c3375b6fbc3765409b00adbf62ca72",
        "filename": "test/functional/rpc_help.py",
        "status": "added",
        "additions": 42,
        "deletions": 0,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_help.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_help.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_help.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -0,0 +1,42 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test RPC help output.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+\n+\n+class HelpRpcTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+\n+        # wrong argument count\n+        assert_raises_rpc_error(-1, 'help', node.help, 'foo', 'bar')\n+\n+        # invalid argument\n+        assert_raises_rpc_error(-1, 'JSON value is not a string as expected', node.help, 0)\n+\n+        # help of unknown command\n+        assert_equal(node.help('foo'), 'help: unknown command: foo')\n+\n+        # command titles\n+        titles = [line[3:-3] for line in node.help().splitlines() if line.startswith('==')]\n+\n+        components = ['Blockchain', 'Control', 'Generating', 'Mining', 'Network', 'Rawtransactions', 'Util']\n+\n+        if self.is_wallet_compiled():\n+            components.append('Wallet')\n+\n+        if self.is_zmq_compiled():\n+            components.append('Zmq')\n+\n+        assert_equal(titles, components)\n+\n+\n+if __name__ == '__main__':\n+    HelpRpcTest().main()"
      },
      {
        "sha": "84f7cd05fb403f8887f8164f89280b6267332385",
        "filename": "test/functional/rpc_invalidateblock.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_invalidateblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_invalidateblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_invalidateblock.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -14,6 +14,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.setup_nodes()\n "
      },
      {
        "sha": "f383b82bb5e67c00a4fbae556f01efe9be875a56",
        "filename": "test/functional/rpc_preciousblock.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_preciousblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_preciousblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_preciousblock.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -38,6 +38,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.setup_nodes()\n "
      },
      {
        "sha": "7f2c0c1bd4d04db4aaf0d056d6588dd73eb1fdc4",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -20,6 +20,9 @@ def set_test_params(self):\n         self.setup_clean_chain = False\n         self.num_nodes = 3\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # Create and fund a raw tx for sending 10 BTC\n         psbtx1 = self.nodes[0].walletcreatefundedpsbt([], {self.nodes[2].getnewaddress():10})['psbt']"
      },
      {
        "sha": "d86b546c7d14c5f3806ae07e7c5eee5e91c89b25",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -44,6 +44,9 @@ def set_test_params(self):\n         self.num_nodes = 3\n         self.extra_args = [[\"-addresstype=legacy\"], [\"-addresstype=legacy\"], [\"-addresstype=legacy\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self, split=False):\n         super().setup_network()\n         connect_nodes_bi(self.nodes, 0, 2)\n@@ -358,7 +361,7 @@ def run_test(self):\n \n         # decoderawtransaction tests\n         # witness transaction\n-        encrawtx = \"010000000001010000000000000072c1a6a246ae63f74f931e8365e15a089c68d61900000000000000000000ffffffff0100e1f50500000000000000000000\"\n+        encrawtx = \"010000000001010000000000000072c1a6a246ae63f74f931e8365e15a089c68d61900000000000000000000ffffffff0100e1f50500000000000102616100000000\"\n         decrawtx = self.nodes[0].decoderawtransaction(encrawtx, True) # decode as witness transaction\n         assert_equal(decrawtx['vout'][0]['value'], Decimal('1.00000000'))\n         assert_raises_rpc_error(-22, 'TX decode failed', self.nodes[0].decoderawtransaction, encrawtx, False) # force decode as non-witness transaction"
      },
      {
        "sha": "96f9ccdbdbce1c7278033b2793b5838398f08156",
        "filename": "test/functional/rpc_scantxoutset.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_scantxoutset.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_scantxoutset.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_scantxoutset.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -14,6 +14,10 @@ class ScantxoutsetTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.log.info(\"Mining blocks...\")\n         self.nodes[0].generate(110)"
      },
      {
        "sha": "ad0e29b4515633c660745d8e00eb37ac062a48a0",
        "filename": "test/functional/rpc_signmessage.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_signmessage.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_signmessage.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signmessage.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -13,6 +13,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [[\"-addresstype=legacy\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         message = 'This is just a test message'\n "
      },
      {
        "sha": "035f10e6bcdcf9d5e360a94895177ce9e32dfa26",
        "filename": "test/functional/rpc_signrawtransaction.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_signrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_signrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signrawtransaction.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -14,6 +14,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [[\"-deprecatedrpc=signrawtransaction\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def successful_signing_test(self):\n         \"\"\"Create and sign a valid raw transaction with one input.\n "
      },
      {
        "sha": "867ba25022a6766b2ed6606c8426f40780a7941b",
        "filename": "test/functional/rpc_txoutproof.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_txoutproof.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_txoutproof.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_txoutproof.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -15,6 +15,9 @@ def set_test_params(self):\n         # Nodes 0/1 are \"wallet\" nodes, Nodes 2/3 are used for testing\n         self.extra_args = [[], [], [], [\"-txindex\"]]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.setup_nodes()\n         connect_nodes(self.nodes[0], 1)"
      },
      {
        "sha": "bfa6b06f67f2e264fa9dad7eca8f57114f308795",
        "filename": "test/functional/rpc_zmq.py",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_zmq.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/rpc_zmq.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_zmq.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -4,8 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test for the ZMQ RPC methods.\"\"\"\n \n-from test_framework.test_framework import (\n-    BitcoinTestFramework, skip_if_no_py3_zmq, skip_if_no_bitcoind_zmq)\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n \n \n@@ -17,9 +16,11 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_py3_zmq()\n+        self.skip_if_no_bitcoind_zmq()\n+\n     def run_test(self):\n-        skip_if_no_py3_zmq()\n-        skip_if_no_bitcoind_zmq(self)\n         self._test_getzmqnotifications()\n \n     def _test_getzmqnotifications(self):"
      },
      {
        "sha": "034e83aaae643ead1fb91a84531fd41265844ec1",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -482,7 +482,7 @@ def on_reject(self, message):\n         self.reject_code_received = message.code\n         self.reject_reason_received = message.reason\n \n-    def send_blocks_and_test(self, blocks, rpc, success=True, request_block=True, reject_code=None, reject_reason=None, timeout=60):\n+    def send_blocks_and_test(self, blocks, node, *, success=True, request_block=True, reject_code=None, reject_reason=None, timeout=60):\n         \"\"\"Send blocks to test node and test whether the tip advances.\n \n          - add all blocks to our block_store\n@@ -508,16 +508,16 @@ def send_blocks_and_test(self, blocks, rpc, success=True, request_block=True, re\n             wait_until(lambda: blocks[-1].sha256 in self.getdata_requests, timeout=timeout, lock=mininode_lock)\n \n         if success:\n-            wait_until(lambda: rpc.getbestblockhash() == blocks[-1].hash, timeout=timeout)\n+            wait_until(lambda: node.getbestblockhash() == blocks[-1].hash, timeout=timeout)\n         else:\n-            assert rpc.getbestblockhash() != blocks[-1].hash\n+            assert node.getbestblockhash() != blocks[-1].hash\n \n         if reject_code is not None:\n             wait_until(lambda: self.reject_code_received == reject_code, lock=mininode_lock)\n         if reject_reason is not None:\n             wait_until(lambda: self.reject_reason_received == reject_reason, lock=mininode_lock)\n \n-    def send_txs_and_test(self, txs, rpc, success=True, expect_disconnect=False, reject_code=None, reject_reason=None):\n+    def send_txs_and_test(self, txs, node, *, success=True, expect_disconnect=False, reject_code=None, reject_reason=None):\n         \"\"\"Send txs to test node and test whether they're accepted to the mempool.\n \n          - add all txs to our tx_store\n@@ -541,7 +541,7 @@ def send_txs_and_test(self, txs, rpc, success=True, expect_disconnect=False, rej\n         else:\n             self.sync_with_ping()\n \n-        raw_mempool = rpc.getrawmempool()\n+        raw_mempool = node.getrawmempool()\n         if success:\n             # Check that all txs are now in the mempool\n             for tx in txs:"
      },
      {
        "sha": "57c985b2a2f1972236bf89f122c1fb5772fd5051",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 67,
        "deletions": 20,
        "changes": 87,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -44,6 +44,13 @@ class TestStatus(Enum):\n TEST_EXIT_SKIPPED = 77\n \n \n+class SkipTest(Exception):\n+    \"\"\"This exception is raised to skip a test\"\"\"\n+\n+    def __init__(self, message):\n+        self.message = message\n+\n+\n class BitcoinTestMetaClass(type):\n     \"\"\"Metaclass for BitcoinTestFramework.\n \n@@ -156,8 +163,10 @@ def main(self):\n         try:\n             if self.options.usecli and not self.supports_cli:\n                 raise SkipTest(\"--usecli specified but test does not support using CLI\")\n+            self.skip_test_if_missing_module()\n             self.setup_chain()\n             self.setup_network()\n+            self.import_deterministic_coinbase_privkeys()\n             self.run_test()\n             success = TestStatus.PASSED\n         except JSONRPCException as e:\n@@ -220,6 +229,10 @@ def add_options(self, parser):\n         \"\"\"Override this method to add command-line options to the test\"\"\"\n         pass\n \n+    def skip_test_if_missing_module(self):\n+        \"\"\"Override this method to skip a test if a module is not compiled\"\"\"\n+        pass\n+\n     def setup_chain(self):\n         \"\"\"Override this method to customize blockchain setup\"\"\"\n         self.log.info(\"Initializing test directory \" + self.options.tmpdir)\n@@ -247,6 +260,19 @@ def setup_nodes(self):\n         self.add_nodes(self.num_nodes, extra_args)\n         self.start_nodes()\n \n+    def import_deterministic_coinbase_privkeys(self):\n+        if self.setup_clean_chain:\n+            return\n+\n+        for n in self.nodes:\n+            try:\n+                n.getwalletinfo()\n+            except JSONRPCException as e:\n+                assert str(e).startswith('Method not found')\n+                continue\n+\n+            n.importprivkey(n.get_deterministic_priv_key()[1])\n+\n     def run_test(self):\n         \"\"\"Tests must override this method to define test logic\"\"\"\n         raise NotImplementedError\n@@ -415,7 +441,7 @@ def _initialize_chain(self):\n             # Create cache directories, run bitcoinds:\n             for i in range(MAX_NODES):\n                 datadir = initialize_datadir(self.options.cachedir, i)\n-                args = [self.options.bitcoind, \"-datadir=\" + datadir]\n+                args = [self.options.bitcoind, \"-datadir=\" + datadir, '-disablewallet']\n                 if i > 0:\n                     args.append(\"-connect=127.0.0.1:\" + str(p2p_port(0)))\n                 self.nodes.append(TestNode(i, get_datadir_path(self.options.cachedir, i), extra_conf=[\"bind=127.0.0.1\"], extra_args=[], rpchost=None, timewait=self.rpc_timewait, bitcoind=self.options.bitcoind, bitcoin_cli=self.options.bitcoincli, mocktime=self.mocktime, coverage_dir=None))\n@@ -439,7 +465,7 @@ def _initialize_chain(self):\n                 for peer in range(4):\n                     for j in range(25):\n                         set_node_times(self.nodes, block_time)\n-                        self.nodes[peer].generate(1)\n+                        self.nodes[peer].generatetoaddress(1, self.nodes[peer].get_deterministic_priv_key()[0])\n                         block_time += 10 * 60\n                     # Must sync before next peer starts generating blocks\n                     sync_blocks(self.nodes)\n@@ -453,8 +479,9 @@ def cache_path(n, *paths):\n                 return os.path.join(get_datadir_path(self.options.cachedir, n), \"regtest\", *paths)\n \n             for i in range(MAX_NODES):\n+                os.rmdir(cache_path(i, 'wallets'))  # Remove empty wallets dir\n                 for entry in os.listdir(cache_path(i)):\n-                    if entry not in ['wallets', 'chainstate', 'blocks']:\n+                    if entry not in ['chainstate', 'blocks']:\n                         os.remove(cache_path(i, entry))\n \n         for i in range(self.num_nodes):\n@@ -471,25 +498,45 @@ def _initialize_chain_clean(self):\n         for i in range(self.num_nodes):\n             initialize_datadir(self.options.tmpdir, i)\n \n+    def skip_if_no_py3_zmq(self):\n+        \"\"\"Attempt to import the zmq package and skip the test if the import fails.\"\"\"\n+        try:\n+            import zmq  # noqa\n+        except ImportError:\n+            raise SkipTest(\"python3-zmq module not available.\")\n+\n+    def skip_if_no_bitcoind_zmq(self):\n+        \"\"\"Skip the running test if bitcoind has not been compiled with zmq support.\"\"\"\n+        if not self.is_zmq_compiled():\n+            raise SkipTest(\"bitcoind has not been built with zmq enabled.\")\n+\n+    def skip_if_no_wallet(self):\n+        \"\"\"Skip the running test if wallet has not been compiled.\"\"\"\n+        if not self.is_wallet_compiled():\n+            raise SkipTest(\"wallet has not been compiled.\")\n+\n+    def skip_if_no_cli(self):\n+        \"\"\"Skip the running test if bitcoin-cli has not been compiled.\"\"\"\n+        if not self.is_cli_compiled():\n+            raise SkipTest(\"bitcoin-cli has not been compiled.\")\n+\n+    def is_cli_compiled(self):\n+        \"\"\"Checks whether bitcoin-cli was compiled.\"\"\"\n+        config = configparser.ConfigParser()\n+        config.read_file(open(self.options.configfile))\n \n-class SkipTest(Exception):\n-    \"\"\"This exception is raised to skip a test\"\"\"\n-    def __init__(self, message):\n-        self.message = message\n-\n+        return config[\"components\"].getboolean(\"ENABLE_UTILS\")\n \n-def skip_if_no_py3_zmq():\n-    \"\"\"Attempt to import the zmq package and skip the test if the import fails.\"\"\"\n-    try:\n-        import zmq  # noqa\n-    except ImportError:\n-        raise SkipTest(\"python3-zmq module not available.\")\n+    def is_wallet_compiled(self):\n+        \"\"\"Checks whether the wallet module was compiled.\"\"\"\n+        config = configparser.ConfigParser()\n+        config.read_file(open(self.options.configfile))\n \n+        return config[\"components\"].getboolean(\"ENABLE_WALLET\")\n \n-def skip_if_no_bitcoind_zmq(test_instance):\n-    \"\"\"Skip the running test if bitcoind has not been compiled with zmq support.\"\"\"\n-    config = configparser.ConfigParser()\n-    config.read_file(open(test_instance.options.configfile))\n+    def is_zmq_compiled(self):\n+        \"\"\"Checks whether the zmq module was compiled.\"\"\"\n+        config = configparser.ConfigParser()\n+        config.read_file(open(self.options.configfile))\n \n-    if not config[\"components\"].getboolean(\"ENABLE_ZMQ\"):\n-        raise SkipTest(\"bitcoind has not been built with zmq enabled.\")\n+        return config[\"components\"].getboolean(\"ENABLE_ZMQ\")"
      },
      {
        "sha": "908dda94c579076cfffa2759e5669cc7f730c63c",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -4,6 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Class for bitcoind node under test\"\"\"\n \n+import contextlib\n import decimal\n import errno\n from enum import Enum\n@@ -96,6 +97,22 @@ def __init__(self, i, datadir, *, rpchost, timewait, bitcoind, bitcoin_cli, mock\n \n         self.p2ps = []\n \n+    def get_deterministic_priv_key(self):\n+        \"\"\"Return a deterministic priv key in base58, that only depends on the node's index\"\"\"\n+        PRIV_KEYS = [\n+            # adress , privkey\n+            ('mjTkW3DjgyZck4KbiRusZsqTgaYTxdSz6z', 'cVpF924EspNh8KjYsfhgY96mmxvT6DgdWiTYMtMjuM74hJaU5psW'),\n+            ('msX6jQXvxiNhx3Q62PKeLPrhrqZQdSimTg', 'cUxsWyKyZ9MAQTaAhUQWJmBbSvHMwSmuv59KgxQV7oZQU3PXN3KE'),\n+            ('mnonCMyH9TmAsSj3M59DsbH8H63U3RKoFP', 'cTrh7dkEAeJd6b3MRX9bZK8eRmNqVCMH3LSUkE3dSFDyzjU38QxK'),\n+            ('mqJupas8Dt2uestQDvV2NH3RU8uZh2dqQR', 'cVuKKa7gbehEQvVq717hYcbE9Dqmq7KEBKqWgWrYBa2CKKrhtRim'),\n+            ('msYac7Rvd5ywm6pEmkjyxhbCDKqWsVeYws', 'cQDCBuKcjanpXDpCqacNSjYfxeQj8G6CAtH1Dsk3cXyqLNC4RPuh'),\n+            ('n2rnuUnwLgXqf9kk2kjvVm8R5BZK1yxQBi', 'cQakmfPSLSqKHyMFGwAqKHgWUiofJCagVGhiB4KCainaeCSxeyYq'),\n+            ('myzuPxRwsf3vvGzEuzPfK9Nf2RfwauwYe6', 'cQMpDLJwA8DBe9NcQbdoSb1BhmFxVjWD5gRyrLZCtpuF9Zi3a9RK'),\n+            ('mumwTaMtbxEPUswmLBBN3vM9oGRtGBrys8', 'cSXmRKXVcoouhNNVpcNKFfxsTsToY5pvB9DVsFksF1ENunTzRKsy'),\n+            ('mpV7aGShMkJCZgbW7F6iZgrvuPHjZjH9qg', 'cSoXt6tm3pqy43UMabY6eUTmR3eSUYFtB2iNQDGgb3VUnRsQys2k'),\n+        ]\n+        return PRIV_KEYS[self.index]\n+\n     def _node_msg(self, msg: str) -> str:\n         \"\"\"Return a modified msg that identifies this node by its index as a debugging aid.\"\"\"\n         return \"[node %d] %s\" % (self.index, msg)\n@@ -229,6 +246,23 @@ def is_node_stopped(self):\n     def wait_until_stopped(self, timeout=BITCOIND_PROC_WAIT_TIMEOUT):\n         wait_until(self.is_node_stopped, timeout=timeout)\n \n+    @contextlib.contextmanager\n+    def assert_debug_log(self, expected_msgs):\n+        debug_log = os.path.join(self.datadir, 'regtest', 'debug.log')\n+        with open(debug_log, encoding='utf-8') as dl:\n+            dl.seek(0, 2)\n+            prev_size = dl.tell()\n+        try:\n+            yield\n+        finally:\n+            with open(debug_log, encoding='utf-8') as dl:\n+                dl.seek(prev_size)\n+                log = dl.read()\n+            print_log = \" - \" + \"\\n - \".join(log.splitlines())\n+            for expected_msg in expected_msgs:\n+                if re.search(re.escape(expected_msg), log, flags=re.MULTILINE) is None:\n+                    self._raise_assertion_error('Expected message \"{}\" does not partially match log:\\n\\n{}\\n\\n'.format(expected_msg, print_log))\n+\n     def assert_start_raises_init_error(self, extra_args=None, expected_msg=None, match=ErrorMatch.FULL_TEXT, *args, **kwargs):\n         \"\"\"Attempt to start the node and expect it to raise an error.\n "
      },
      {
        "sha": "37b378e9ca87477a0a120f9031b5998569be4437",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -152,6 +152,7 @@\n     'p2p_node_network_limited.py',\n     'feature_blocksdir.py',\n     'feature_config_args.py',\n+    'rpc_help.py',\n     'feature_help.py',\n     # Don't append tests at the end to avoid merge conflicts\n     # Put them in a random line within the section that fits their approximate run-time\n@@ -235,8 +236,6 @@ def main():\n \n     logging.debug(\"Temporary test directory at %s\" % tmpdir)\n \n-    enable_wallet = config[\"components\"].getboolean(\"ENABLE_WALLET\")\n-    enable_utils = config[\"components\"].getboolean(\"ENABLE_UTILS\")\n     enable_bitcoind = config[\"components\"].getboolean(\"ENABLE_BITCOIND\")\n \n     if config[\"environment\"][\"EXEEXT\"] == \".exe\" and not args.force:\n@@ -245,9 +244,9 @@ def main():\n         print(\"Tests currently disabled on Windows by default. Use --force option to enable\")\n         sys.exit(0)\n \n-    if not (enable_wallet and enable_utils and enable_bitcoind):\n-        print(\"No functional tests to run. Wallet, utils, and bitcoind must all be enabled\")\n-        print(\"Rerun `configure` with -enable-wallet, -with-utils and -with-daemon and rerun make\")\n+    if not enable_bitcoind:\n+        print(\"No functional tests to run.\")\n+        print(\"Rerun ./configure with --with-daemon and then make\")\n         sys.exit(0)\n \n     # Build list of tests"
      },
      {
        "sha": "e5ac2c8bd45971c5673d765f84dd5620e03666fc",
        "filename": "test/functional/wallet_abandonconflict.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_abandonconflict.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -20,6 +20,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[\"-minrelaytxfee=0.00001\"], []]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.nodes[1].generate(100)\n         sync_blocks(self.nodes)"
      },
      {
        "sha": "9b398ef346c510a87e842e4687d79a1eed9a4fb6",
        "filename": "test/functional/wallet_address_types.py",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_address_types.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_address_types.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_address_types.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -63,6 +63,7 @@\n     sync_mempools,\n )\n \n+\n class AddressTypeTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 6\n@@ -72,9 +73,12 @@ def set_test_params(self):\n             [\"-addresstype=p2sh-segwit\", \"-changetype=bech32\"],\n             [\"-addresstype=bech32\"],\n             [\"-changetype=p2sh-segwit\"],\n-            []\n+            [],\n         ]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.setup_nodes()\n "
      },
      {
        "sha": "32ec385fa1264c0df62fb64d0d274048acacaf0a",
        "filename": "test/functional/wallet_backup.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_backup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_backup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_backup.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -45,6 +45,9 @@ def set_test_params(self):\n         # nodes 1, 2,3 are spenders, let's give them a keypool=100\n         self.extra_args = [[\"-keypool=100\"], [\"-keypool=100\"], [\"-keypool=100\"], []]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self, split=False):\n         self.setup_nodes()\n         connect_nodes(self.nodes[0], 3)"
      },
      {
        "sha": "4079d054914b637d998a076d33d7e84e53242f99",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -23,6 +23,9 @@ def set_test_params(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.add_nodes(4)\n         self.start_node(0)"
      },
      {
        "sha": "b9fe6c66c5096fcdda378999ca95ab67ec223818",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -31,8 +31,13 @@ class BumpFeeTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n-        self.extra_args = [[\"-deprecatedrpc=addwitnessaddress\", \"-walletrbf={}\".format(i)]\n-                           for i in range(self.num_nodes)]\n+        self.extra_args = [[\n+            \"-deprecatedrpc=addwitnessaddress\",\n+            \"-walletrbf={}\".format(i),\n+        ] for i in range(self.num_nodes)]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n \n     def run_test(self):\n         # Encrypt wallet for test_locked_wallet_fails test"
      },
      {
        "sha": "34ff52525579b55710370dfe49df6e011ddce928",
        "filename": "test/functional/wallet_disableprivatekeys.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_disableprivatekeys.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_disableprivatekeys.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_disableprivatekeys.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -17,6 +17,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.supports_cli = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         node = self.nodes[0]\n         self.log.info(\"Test disableprivatekeys creation.\")"
      },
      {
        "sha": "db731b2a346227a22b77d70ca7435ccc6403dc24",
        "filename": "test/functional/wallet_dump.py",
        "status": "modified",
        "additions": 55,
        "deletions": 48,
        "changes": 103,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_dump.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -29,50 +29,54 @@ def read_dump(file_name, addrs, script_addrs, hd_master_addr_old):\n             # only read non comment lines\n             if line[0] != \"#\" and len(line) > 10:\n                 # split out some data\n-                key_label, comment = line.split(\"#\")\n-                # key = key_label.split(\" \")[0]\n-                keytype = key_label.split(\" \")[2]\n-                if len(comment) > 1:\n-                    addr_keypath = comment.split(\" addr=\")[1]\n-                    addr = addr_keypath.split(\" \")[0]\n+                key_date_label, comment = line.split(\"#\")\n+                key_date_label = key_date_label.split(\" \")\n+                # key = key_date_label[0]\n+                date = key_date_label[1]\n+                keytype = key_date_label[2]\n+                if not len(comment) or date.startswith('1970'):\n+                    continue\n+\n+                addr_keypath = comment.split(\" addr=\")[1]\n+                addr = addr_keypath.split(\" \")[0]\n+                keypath = None\n+                if keytype == \"inactivehdseed=1\":\n+                    # ensure the old master is still available\n+                    assert (hd_master_addr_old == addr)\n+                elif keytype == \"hdseed=1\":\n+                    # ensure we have generated a new hd master key\n+                    assert (hd_master_addr_old != addr)\n+                    hd_master_addr_ret = addr\n+                elif keytype == \"script=1\":\n+                    # scripts don't have keypaths\n                     keypath = None\n-                    if keytype == \"inactivehdseed=1\":\n-                        # ensure the old master is still available\n-                        assert(hd_master_addr_old == addr)\n-                    elif keytype == \"hdseed=1\":\n-                        # ensure we have generated a new hd master key\n-                        assert(hd_master_addr_old != addr)\n-                        hd_master_addr_ret = addr\n-                    elif keytype == \"script=1\":\n-                        # scripts don't have keypaths\n-                        keypath = None\n-                    else:\n-                        keypath = addr_keypath.rstrip().split(\"hdkeypath=\")[1]\n-\n-                    # count key types\n-                    for addrObj in addrs:\n-                        if addrObj['address'] == addr.split(\",\")[0] and addrObj['hdkeypath'] == keypath and keytype == \"label=\":\n-                            # a labeled entry in the wallet should contain both a native address\n-                            # and the p2sh-p2wpkh address that was added at wallet setup\n-                            if len(addr.split(\",\")) == 2:\n-                                addr_list = addr.split(\",\")\n-                                # the entry should be of the first key in the wallet\n-                                assert_equal(addrs[0]['address'], addr_list[0])\n-                                witness_addr_ret = addr_list[1]\n-                            found_addr += 1\n-                            break\n-                        elif keytype == \"change=1\":\n-                            found_addr_chg += 1\n-                            break\n-                        elif keytype == \"reserve=1\":\n-                            found_addr_rsv += 1\n-                            break\n-\n-                    # count scripts\n-                    for script_addr in script_addrs:\n-                        if script_addr == addr.rstrip() and keytype == \"script=1\":\n-                            found_script_addr += 1\n-                            break\n+                else:\n+                    keypath = addr_keypath.rstrip().split(\"hdkeypath=\")[1]\n+\n+                # count key types\n+                for addrObj in addrs:\n+                    if addrObj['address'] == addr.split(\",\")[0] and addrObj['hdkeypath'] == keypath and keytype == \"label=\":\n+                        # a labeled entry in the wallet should contain both a native address\n+                        # and the p2sh-p2wpkh address that was added at wallet setup\n+                        if len(addr.split(\",\")) == 2:\n+                            addr_list = addr.split(\",\")\n+                            # the entry should be of the first key in the wallet\n+                            assert_equal(addrs[0]['address'], addr_list[0])\n+                            witness_addr_ret = addr_list[1]\n+                        found_addr += 1\n+                        break\n+                    elif keytype == \"change=1\":\n+                        found_addr_chg += 1\n+                        break\n+                    elif keytype == \"reserve=1\":\n+                        found_addr_rsv += 1\n+                        break\n+\n+                # count scripts\n+                for script_addr in script_addrs:\n+                    if script_addr == addr.rstrip() and keytype == \"script=1\":\n+                        found_script_addr += 1\n+                        break\n \n         return found_addr, found_script_addr, found_addr_chg, found_addr_rsv, hd_master_addr_ret, witness_addr_ret\n \n@@ -83,6 +87,9 @@ def set_test_params(self):\n         self.extra_args = [[\"-keypool=90\", \"-addresstype=legacy\", \"-deprecatedrpc=addwitnessaddress\"]]\n         self.rpc_timeout = 120\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self, split=False):\n         self.add_nodes(self.num_nodes, extra_args=self.extra_args)\n         self.start_nodes()\n@@ -116,9 +123,9 @@ def run_test(self):\n             read_dump(wallet_unenc_dump, addrs, script_addrs, None)\n         assert_equal(found_addr, test_addr_count)  # all keys must be in the dump\n         assert_equal(found_script_addr, 2)  # all scripts must be in the dump\n-        assert_equal(found_addr_chg, 50)  # 50 blocks where mined\n-        assert_equal(found_addr_rsv, 90*2) # 90 keys plus 100% internal keys\n-        assert_equal(witness_addr_ret, witness_addr) # p2sh-p2wsh address added to the first key\n+        assert_equal(found_addr_chg, 0)  # 0 blocks where mined\n+        assert_equal(found_addr_rsv, 90 * 2)  # 90 keys plus 100% internal keys\n+        assert_equal(witness_addr_ret, witness_addr)  # p2sh-p2wsh address added to the first key\n \n         #encrypt wallet, restart, unlock and dump\n         self.nodes[0].node_encrypt_wallet('test')\n@@ -132,8 +139,8 @@ def run_test(self):\n             read_dump(wallet_enc_dump, addrs, script_addrs, hd_master_addr_unenc)\n         assert_equal(found_addr, test_addr_count)\n         assert_equal(found_script_addr, 2)\n-        assert_equal(found_addr_chg, 90*2 + 50)  # old reserve keys are marked as change now\n-        assert_equal(found_addr_rsv, 90*2)\n+        assert_equal(found_addr_chg, 90 * 2)  # old reserve keys are marked as change now\n+        assert_equal(found_addr_rsv, 90 * 2)\n         assert_equal(witness_addr_ret, witness_addr)\n \n         # Overwriting should fail"
      },
      {
        "sha": "d8c27b09d96e643624b948b386e1d157c9a75d41",
        "filename": "test/functional/wallet_encryption.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_encryption.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_encryption.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_encryption.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -19,6 +19,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         passphrase = \"WalletPassphrase\"\n         passphrase2 = \"SecondWalletPassphrase\""
      },
      {
        "sha": "0c67982bbeb2930bdd0b3afd1796deb269baae63",
        "filename": "test/functional/wallet_fallbackfee.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_fallbackfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_fallbackfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_fallbackfee.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -11,6 +11,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.nodes[0].generate(101)\n "
      },
      {
        "sha": "9d61483868819137a0e8091e0c0ca298e6cad0b4",
        "filename": "test/functional/wallet_groups.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_groups.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_groups.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_groups.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -23,7 +23,10 @@ def set_test_params(self):\n         self.extra_args = [[], [], ['-avoidpartialspends']]\n         self.rpc_timewait = 120\n \n-    def run_test (self):\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n         # Mine some coins\n         self.nodes[0].generate(110)\n "
      },
      {
        "sha": "48e71f6c40baf22d8062b16c9c471b3c08136981",
        "filename": "test/functional/wallet_hd.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_hd.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -21,6 +21,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[], ['-keypool=0']]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # Make sure can't switch off usehd after wallet creation\n         self.stop_node(1)"
      },
      {
        "sha": "aa4e37ed602ca659ed04a92ab15af3440d3885b3",
        "filename": "test/functional/wallet_import_rescan.py",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_import_rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_import_rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_import_rescan.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -109,17 +109,29 @@ class ImportRescanTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2 + len(IMPORT_NODES)\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         extra_args = [[\"-addresstype=legacy\"] for _ in range(self.num_nodes)]\n         for i, import_node in enumerate(IMPORT_NODES, 2):\n             if import_node.prune:\n                 extra_args[i] += [\"-prune=1\"]\n \n         self.add_nodes(self.num_nodes, extra_args=extra_args)\n+\n+        # Import keys\n+        self.start_nodes(extra_args=[[]] * self.num_nodes)\n+        super().import_deterministic_coinbase_privkeys()\n+        self.stop_nodes()\n+\n         self.start_nodes()\n         for i in range(1, self.num_nodes):\n             connect_nodes(self.nodes[i], 0)\n \n+    def import_deterministic_coinbase_privkeys(self):\n+        pass\n+\n     def run_test(self):\n         # Create one transaction on node 0 with a unique amount for\n         # each possible type of wallet import RPC."
      },
      {
        "sha": "3dd296d603fcaacb732fdc6fc0b59751425e2cb9",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -12,6 +12,9 @@ def set_test_params(self):\n         self.extra_args = [[\"-addresstype=legacy\"], [\"-addresstype=legacy\"]]\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def setup_network(self):\n         self.setup_nodes()\n "
      },
      {
        "sha": "26b181db339b5a5daec285510d96929aba9a08e9",
        "filename": "test/functional/wallet_importprunedfunds.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_importprunedfunds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_importprunedfunds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importprunedfunds.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -16,6 +16,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.log.info(\"Mining blocks...\")\n         self.nodes[0].generate(101)"
      },
      {
        "sha": "acc336e4d5f78080121f8d544b120b476191848a",
        "filename": "test/functional/wallet_keypool.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -13,6 +13,9 @@ class KeyPoolTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         nodes = self.nodes\n         addr_before_encrypting = nodes[0].getnewaddress()"
      },
      {
        "sha": "f1a441c399733bb3f3f0da0d5f4f4109785722ff",
        "filename": "test/functional/wallet_keypool_topup.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_keypool_topup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_keypool_topup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool_topup.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -27,6 +27,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.extra_args = [[], ['-keypool=100']]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         wallet_path = os.path.join(self.nodes[1].datadir, \"regtest\", \"wallets\", \"wallet.dat\")\n         wallet_backup_path = os.path.join(self.nodes[1].datadir, \"wallet.bak\")"
      },
      {
        "sha": "6f9123a0892acebdbcec0f221e36d07aecd76365",
        "filename": "test/functional/wallet_labels.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_labels.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_labels.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_labels.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -30,6 +30,9 @@ def setup_network(self):\n         \"\"\"Don't connect nodes.\"\"\"\n         self.setup_nodes()\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         \"\"\"Run the test twice - once using the accounts API and once using the labels API.\"\"\"\n         self.log.info(\"Test accounts API\")"
      },
      {
        "sha": "3485c4470f6b2a42de323785d5c4ff5b5c956568",
        "filename": "test/functional/wallet_listreceivedby.py",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_listreceivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_listreceivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listreceivedby.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -18,6 +18,14 @@ class ReceivedByTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n \n+    def import_deterministic_coinbase_privkeys(self):\n+        assert_equal(0, len(self.nodes[1].listreceivedbyaddress(minconf=0, include_empty=True, include_watchonly=True)))\n+        super().import_deterministic_coinbase_privkeys()\n+        self.num_cb_reward_addresses = len(self.nodes[1].listreceivedbyaddress(minconf=0, include_empty=True, include_watchonly=True))\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # Generate block to get out of IBD\n         self.nodes[0].generate(1)\n@@ -64,7 +72,7 @@ def run_test(self):\n         assert_raises_rpc_error(-4, \"address_filter parameter was invalid\", self.nodes[1].listreceivedbyaddress, minconf=0, include_empty=True, include_watchonly=True, address_filter=\"bamboozling\")\n         # Another address receive money\n         res = self.nodes[1].listreceivedbyaddress(0, True, True)\n-        assert_equal(len(res), 2)  # Right now 2 entries\n+        assert_equal(len(res), 2 + self.num_cb_reward_addresses)  # Right now 2 entries\n         other_addr = self.nodes[1].getnewaddress()\n         txid2 = self.nodes[0].sendtoaddress(other_addr, 0.1)\n         self.nodes[0].generate(1)\n@@ -81,7 +89,7 @@ def run_test(self):\n         assert_equal(len(res), 1)\n         # Should be two entries though without filter\n         res = self.nodes[1].listreceivedbyaddress(0, True, True)\n-        assert_equal(len(res), 3)  # Became 3 entries\n+        assert_equal(len(res), 3 + self.num_cb_reward_addresses)  # Became 3 entries\n \n         # Not on random addr\n         other_addr = self.nodes[0].getnewaddress()  # note on node[0]! just a random addr"
      },
      {
        "sha": "53e671cd3b0ac1172a3b5eaba8511ba04e4606d8",
        "filename": "test/functional/wallet_listsinceblock.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_listsinceblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_listsinceblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listsinceblock.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -12,6 +12,9 @@ def set_test_params(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.nodes[2].generate(101)\n         self.sync_all()"
      },
      {
        "sha": "5a17395abdb82dde8f3d9c3d35c5aadea26db49b",
        "filename": "test/functional/wallet_listtransactions.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listtransactions.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -27,6 +27,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.enable_mocktime()\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # Simple send, 0 to 1:\n         txid = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.1)"
      },
      {
        "sha": "435821ec4804d9e4c05e4d2cb4e98c126bf2784f",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -23,6 +23,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.supports_cli = True\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         node = self.nodes[0]\n "
      },
      {
        "sha": "00bf58d7096597d47aa78405871923b131b65cad",
        "filename": "test/functional/wallet_resendwallettransactions.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_resendwallettransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_resendwallettransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_resendwallettransactions.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -12,6 +12,9 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [['--walletbroadcast=false']]\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         # Should raise RPC_WALLET_ERROR (-4) if walletbroadcast is disabled.\n         assert_raises_rpc_error(-4, \"Error: Wallet transaction broadcasting is disabled with -walletbroadcast\", self.nodes[0].resendwallettransactions)"
      },
      {
        "sha": "d78c105c174903e2a290fc5ca94a559047cffd03",
        "filename": "test/functional/wallet_txn_clone.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_clone.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -16,6 +16,9 @@ class TxnMallTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def add_options(self, parser):\n         parser.add_argument(\"--mineblock\", dest=\"mine_block\", default=False, action=\"store_true\",\n                             help=\"Test double-spend of 1-confirmed transaction\")"
      },
      {
        "sha": "f114d5ab688890f352ac14be07086f4e70268eeb",
        "filename": "test/functional/wallet_txn_doublespend.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_doublespend.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -18,6 +18,9 @@ class TxnMallTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def add_options(self, parser):\n         parser.add_argument(\"--mineblock\", dest=\"mine_block\", default=False, action=\"store_true\",\n                             help=\"Test double-spend of 1-confirmed transaction\")"
      },
      {
        "sha": "adebff360a5ae7f6d77801091007f6868fd54829",
        "filename": "test/functional/wallet_zapwallettxes.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76dd5257f9b5705734481569c39bf115d4cb973d/test/functional/wallet_zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_zapwallettxes.py?ref=76dd5257f9b5705734481569c39bf115d4cb973d",
        "patch": "@@ -26,6 +26,9 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n \n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n     def run_test(self):\n         self.log.info(\"Mining blocks...\")\n         self.nodes[0].generate(1)"
      }
    ]
  },
  {
    "sha": "9e87d82e7f0696a40d08c6e4cff3f040a447ece5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZTg3ZDgyZTdmMDY5NmE0MGQwOGM2ZTRjZmYzZjA0MGE0NDdlY2U1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-28T10:48:13Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-10-28T10:48:16Z"
      },
      "message": "Merge #14589: Docs/Release notes: 0.17.0.1 is a minor release\n\nf046d846ae Docs/Release notes: 0.17.0.1 is a minor release (David A. Harding)\n\nPull request description:\n\n  Suggested by @jnewbery in https://github.com/bitcoin-core/bitcoincore.org/pull/624#pullrequestreview-169055865\n\nTree-SHA512: 7e3068febaaf13cc31ef48e56ac7c36450fb1fb115e9940af603bb7cb740e93702e69be0eaaf06ff19866837bf29b4f08c1d9e3e55d98a65746a89a0dcab2b69",
      "tree": {
        "sha": "dba0ebc3e8d9e712de6778af0c9c59e3fac55dca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dba0ebc3e8d9e712de6778af0c9c59e3fac55dca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9e87d82e7f0696a40d08c6e4cff3f040a447ece5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJb1ZPwAAoJENLqSFDnUoslVS0P/iEs3+56M7GE2aXXeoXkqAfA\nzuaYuXny3omlFBY7d5SyL0Epc5p9huINzK7jPzD59/Ykv1LwhC5xIYRrGh+moDhx\nOVzUl7NHY5l5c84wkVHN+MUFTkJyqECxCq0ZC4q+CdYstHYU8tc6DpHK9H0au03u\neYGnEuIrs9lpSu29O8ccVNSC/ygs9qC9/UgNf4bHWeELTkmOvqR+0osDwG1yOeaX\n7sISZWqbDyNFdJ0Vc/FFrvqyFmBgggVhZpu6ICjvmtbXwnVNprKirl/Q1nxKrP58\nyKCygOj9Rke4RPWQhSj7bdwzibFElkPC0hEgWEBk5spMSEc4MHJbU2gSj2XGQLV/\n5sss6gBrsMAT3pd2fThPO8GULNgddbDydiA/l+ELlCJjvwPUyV6l5gx1dPWjdukX\nuZtUhO0arW+pFdrUYjXPbY45tvCmKInBpDGdsIPdMkWAgzQC2TvSQPl5HnVOWw4V\n7Ud1zMyRf05Bnd53a2eo+tGCEW+N1mqHQNAoB9hnkmQ6NS+KCc2Dz8VEUucRspwz\nmsrG+hEy/GLMxiDlGNksmLo1HcPdQ1hUG4FBfme1UnCyGQGxB1YmHkpKGBl3zw8M\ndo76FifxkH6mEUlNW0148ERMdhreW6m/5SZUozt/plgWz3/1h5g/8PQ71hUkrGIR\nkzLU1fi7XSUveqizmw8Y\n=BNEd\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIKGcbxYL9IHdIURdaDIOXhkoIWxbAS00bl8WrVcpZboyCP/wEChha2baMJh+\n1QX1voVDkTII8QRb1ZPy8AhCWXrwgQEFEACD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEE//Nz5HRmc7lmcOpBOL\np6sI8QRb1ZPy8Ahf6DpebGlDvgCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMu\nY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQXchXGKNE9ElRF70eFw0vhAjx\nBFvVk/PwCHKU9/nFXvNlAIPf4w0u+QyOIyJodHRwczovL2J0Yy5jYWxlbmRhci5j\nYXRhbGxheHkuY29t8BCaStVn1XB2BeAx72GJYbp3CPAQbP/RPpA6VXEOLo/iL9xf\nbQjxBFvVk/PwCDe1ngwEB8Q3AIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxl\nbmRhci5ldGVybml0eXdhbGwuY29t\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree dba0ebc3e8d9e712de6778af0c9c59e3fac55dca\nparent 76dd5257f9b5705734481569c39bf115d4cb973d\nparent f046d846aecacd79a83d82903e0b71577529d75c\nauthor MarcoFalke <falke.marco@gmail.com> 1540723693 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1540723696 -0400\n\nMerge #14589: Docs/Release notes: 0.17.0.1 is a minor release\n\nf046d846ae Docs/Release notes: 0.17.0.1 is a minor release (David A. Harding)\n\nPull request description:\n\n  Suggested by @jnewbery in https://github.com/bitcoin-core/bitcoincore.org/pull/624#pullrequestreview-169055865\n\nTree-SHA512: 7e3068febaaf13cc31ef48e56ac7c36450fb1fb115e9940af603bb7cb740e93702e69be0eaaf06ff19866837bf29b4f08c1d9e3e55d98a65746a89a0dcab2b69\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e87d82e7f0696a40d08c6e4cff3f040a447ece5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9e87d82e7f0696a40d08c6e4cff3f040a447ece5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e87d82e7f0696a40d08c6e4cff3f040a447ece5/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "76dd5257f9b5705734481569c39bf115d4cb973d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76dd5257f9b5705734481569c39bf115d4cb973d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/76dd5257f9b5705734481569c39bf115d4cb973d"
      },
      {
        "sha": "f046d846aecacd79a83d82903e0b71577529d75c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f046d846aecacd79a83d82903e0b71577529d75c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f046d846aecacd79a83d82903e0b71577529d75c"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "92db7dac7d7e55ada749f50c2c5737b3ee50ff0e",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e87d82e7f0696a40d08c6e4cff3f040a447ece5/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e87d82e7f0696a40d08c6e4cff3f040a447ece5/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=9e87d82e7f0696a40d08c6e4cff3f040a447ece5",
        "patch": "@@ -2,8 +2,7 @@ Bitcoin Core version 0.17.0.1 is now available from:\n \n   <https://bitcoincore.org/bin/bitcoin-core-0.17.0.1/>\n \n-This is a new major version release, including new features, various bugfixes\n-and performance improvements, as well as updated translations.\n+This release provides a minor bug fix for 0.17.0.\n \n Please report bugs using the issue tracker at GitHub:\n "
      }
    ]
  }
]