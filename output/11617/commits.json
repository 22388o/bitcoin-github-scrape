[
  {
    "sha": "2311c7cc86b7d3ab4912601ea0c21cc81a9f5eec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMzExYzdjYzg2YjdkM2FiNDkxMjYwMWVhMGMyMWNjODFhOWY1ZWVj",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-06T10:21:15Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-04-11T10:40:08Z"
      },
      "message": "Call FlushStateToDisk(...) regardless of fCheckForPruning\n\nFlushStateToDisk(...) won't do anything besides check if we need to prune if\nFLUSH_STATE_NONE is given. We avoid reading the variable fCheckForPruning\nwhich is guarded by the mutex cs_LastBlockFile.",
      "tree": {
        "sha": "7ac3824f6a5ef06c84f5e75af8d6c41f2f6bade0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7ac3824f6a5ef06c84f5e75af8d6c41f2f6bade0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2311c7cc86b7d3ab4912601ea0c21cc81a9f5eec",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2311c7cc86b7d3ab4912601ea0c21cc81a9f5eec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2311c7cc86b7d3ab4912601ea0c21cc81a9f5eec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2311c7cc86b7d3ab4912601ea0c21cc81a9f5eec/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0a8054e7cd5c76d01e4ac7234e3883d05f6f5fdd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a8054e7cd5c76d01e4ac7234e3883d05f6f5fdd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0a8054e7cd5c76d01e4ac7234e3883d05f6f5fdd"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "1ef57f878b354edd0a8d45c85e4c67aece919a2f",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2311c7cc86b7d3ab4912601ea0c21cc81a9f5eec/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2311c7cc86b7d3ab4912601ea0c21cc81a9f5eec/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=2311c7cc86b7d3ab4912601ea0c21cc81a9f5eec",
        "patch": "@@ -3454,8 +3454,7 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CVali\n         return AbortNode(state, std::string(\"System error: \") + e.what());\n     }\n \n-    if (fCheckForPruning)\n-        FlushStateToDisk(chainparams, state, FlushStateMode::NONE); // we just allocated more disk space for block files\n+    FlushStateToDisk(chainparams, state, FlushStateMode::NONE);\n \n     CheckBlockIndex(chainparams.GetConsensus());\n "
      }
    ]
  },
  {
    "sha": "0000d8f727be937baa1499a6d15efa5a48b0ffdd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMDAwZDhmNzI3YmU5MzdiYWExNDk5YTZkMTVlZmE1YTQ4YjBmZmRk",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-04-11T10:45:59Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-04-11T10:45:59Z"
      },
      "message": "Document how FlushStateMode::NONE is handled",
      "tree": {
        "sha": "953ca19625d368d791a70b37867bf20c7eb60102",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/953ca19625d368d791a70b37867bf20c7eb60102"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0000d8f727be937baa1499a6d15efa5a48b0ffdd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0000d8f727be937baa1499a6d15efa5a48b0ffdd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0000d8f727be937baa1499a6d15efa5a48b0ffdd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0000d8f727be937baa1499a6d15efa5a48b0ffdd/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2311c7cc86b7d3ab4912601ea0c21cc81a9f5eec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2311c7cc86b7d3ab4912601ea0c21cc81a9f5eec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2311c7cc86b7d3ab4912601ea0c21cc81a9f5eec"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8066e6c7a8541cab478945704b6e8bedddaf165d",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0000d8f727be937baa1499a6d15efa5a48b0ffdd/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0000d8f727be937baa1499a6d15efa5a48b0ffdd/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=0000d8f727be937baa1499a6d15efa5a48b0ffdd",
        "patch": "@@ -2064,6 +2064,9 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n  * The caches and indexes are flushed depending on the mode we're called with\n  * if they're too large, if it's been a while since the last write,\n  * or always and in all cases if we're in prune mode and are deleting files.\n+ *\n+ * If FlushStateMode::NONE is used, then FlushStateToDisk(...) won't do anything\n+ * besides checking if we need to prune.\n  */\n bool static FlushStateToDisk(const CChainParams& chainparams, CValidationState &state, FlushStateMode mode, int nManualPruneHeight) {\n     int64_t nMempoolUsage = mempool.DynamicMemoryUsage();"
      }
    ]
  }
]