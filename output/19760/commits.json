[
  {
    "sha": "9e2897d020b114a10c860f90c5405be029afddba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZTI4OTdkMDIwYjExNGExMGM4NjBmOTBjNTQwNWJlMDI5YWZkZGJh",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-07-19T07:47:05Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-08-21T14:52:13Z"
      },
      "message": "scripted-diff: Rename mininode_lock to p2p_lock\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/mininode_lock/p2p_lock/g' $(git grep -l \"mininode_lock\")\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "5ecf24ff3ff76560b935ff8def3b7b3d89a8ce31",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5ecf24ff3ff76560b935ff8def3b7b3d89a8ce31"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9e2897d020b114a10c860f90c5405be029afddba",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e2897d020b114a10c860f90c5405be029afddba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9e2897d020b114a10c860f90c5405be029afddba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e2897d020b114a10c860f90c5405be029afddba/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d254e6e7951fa81fad06bc82516770a0c186a2fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d254e6e7951fa81fad06bc82516770a0c186a2fd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d254e6e7951fa81fad06bc82516770a0c186a2fd"
      }
    ],
    "stats": {
      "total": 194,
      "additions": 97,
      "deletions": 97
    },
    "files": [
      {
        "sha": "c997e47c5ee247d53dac68ee7d692b0f23046a69",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e2897d020b114a10c860f90c5405be029afddba/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e2897d020b114a10c860f90c5405be029afddba/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=9e2897d020b114a10c860f90c5405be029afddba",
        "patch": "@@ -18,7 +18,7 @@\n from test_framework.messages import CInv, MSG_BLOCK\n from test_framework.mininode import (\n     P2PInterface,\n-    mininode_lock,\n+    p2p_lock,\n     msg_block,\n     msg_getdata,\n )\n@@ -203,13 +203,13 @@ def run_test(self):\n \n         # wait_until() will loop until a predicate condition is met. Use it to test properties of the\n         # P2PInterface objects.\n-        wait_until(lambda: sorted(blocks) == sorted(list(self.nodes[2].p2p.block_receive_map.keys())), timeout=5, lock=mininode_lock)\n+        wait_until(lambda: sorted(blocks) == sorted(list(self.nodes[2].p2p.block_receive_map.keys())), timeout=5, lock=p2p_lock)\n \n         self.log.info(\"Check that each block was received only once\")\n         # The network thread uses a global lock on data access to the P2PConnection objects when sending and receiving\n         # messages. The test thread should acquire the global lock before accessing any P2PConnection data to avoid locking\n         # and synchronization issues. Note wait_until() acquires this global lock when testing the predicate.\n-        with mininode_lock:\n+        with p2p_lock:\n             for block in self.nodes[2].p2p.block_receive_map.values():\n                 assert_equal(block, 1)\n "
      },
      {
        "sha": "b99a6220fe56b23a09af0d141dfb5c9442bcb781",
        "filename": "test/functional/feature_versionbits_warning.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e2897d020b114a10c860f90c5405be029afddba/test/functional/feature_versionbits_warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e2897d020b114a10c860f90c5405be029afddba/test/functional/feature_versionbits_warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_versionbits_warning.py?ref=9e2897d020b114a10c860f90c5405be029afddba",
        "patch": "@@ -12,7 +12,7 @@\n \n from test_framework.blocktools import create_block, create_coinbase\n from test_framework.messages import msg_block\n-from test_framework.mininode import P2PInterface, mininode_lock\n+from test_framework.mininode import P2PInterface, p2p_lock\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import wait_until\n \n@@ -91,7 +91,7 @@ def run_test(self):\n \n         # Generating one block guarantees that we'll get out of IBD\n         node.generatetoaddress(1, node_deterministic_address)\n-        wait_until(lambda: not node.getblockchaininfo()['initialblockdownload'], timeout=10, lock=mininode_lock)\n+        wait_until(lambda: not node.getblockchaininfo()['initialblockdownload'], timeout=10, lock=p2p_lock)\n         # Generating one more block will be enough to generate an error.\n         node.generatetoaddress(1, node_deterministic_address)\n         # Check that get*info() shows the versionbits unknown rules warning"
      },
      {
        "sha": "9a85632513a924695af9be442bf76f070693c3a8",
        "filename": "test/functional/p2p_compactblocks.py",
        "status": "modified",
        "additions": 34,
        "deletions": 34,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e2897d020b114a10c860f90c5405be029afddba/test/functional/p2p_compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e2897d020b114a10c860f90c5405be029afddba/test/functional/p2p_compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_compactblocks.py?ref=9e2897d020b114a10c860f90c5405be029afddba",
        "patch": "@@ -11,7 +11,7 @@\n \n from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment\n from test_framework.messages import BlockTransactions, BlockTransactionsRequest, calculate_shortid, CBlock, CBlockHeader, CInv, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, HeaderAndShortIDs, msg_no_witness_block, msg_no_witness_blocktxn, msg_cmpctblock, msg_getblocktxn, msg_getdata, msg_getheaders, msg_headers, msg_inv, msg_sendcmpct, msg_sendheaders, msg_tx, msg_block, msg_blocktxn, MSG_BLOCK, MSG_CMPCT_BLOCK, MSG_WITNESS_FLAG, NODE_NETWORK, P2PHeaderAndShortIDs, PrefilledTransaction, ser_uint256, ToHex\n-from test_framework.mininode import mininode_lock, P2PInterface\n+from test_framework.mininode import p2p_lock, P2PInterface\n from test_framework.script import CScript, OP_TRUE, OP_DROP\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, wait_until, softfork_active\n@@ -48,12 +48,12 @@ def on_inv(self, message):\n                 self.block_announced = True\n                 self.announced_blockhashes.add(x.hash)\n \n-    # Requires caller to hold mininode_lock\n+    # Requires caller to hold p2p_lock\n     def received_block_announcement(self):\n         return self.block_announced\n \n     def clear_block_announcement(self):\n-        with mininode_lock:\n+        with p2p_lock:\n             self.block_announced = False\n             self.last_message.pop(\"inv\", None)\n             self.last_message.pop(\"headers\", None)\n@@ -73,23 +73,23 @@ def send_header_for_blocks(self, new_blocks):\n     def request_headers_and_sync(self, locator, hashstop=0):\n         self.clear_block_announcement()\n         self.get_headers(locator, hashstop)\n-        wait_until(self.received_block_announcement, timeout=30, lock=mininode_lock)\n+        wait_until(self.received_block_announcement, timeout=30, lock=p2p_lock)\n         self.clear_block_announcement()\n \n     # Block until a block announcement for a particular block hash is\n     # received.\n     def wait_for_block_announcement(self, block_hash, timeout=30):\n         def received_hash():\n             return (block_hash in self.announced_blockhashes)\n-        wait_until(received_hash, timeout=timeout, lock=mininode_lock)\n+        wait_until(received_hash, timeout=timeout, lock=p2p_lock)\n \n     def send_await_disconnect(self, message, timeout=30):\n         \"\"\"Sends a message to the node and wait for disconnect.\n \n         This is used when we want to send a message into the node that we expect\n         will get us disconnected, eg an invalid block.\"\"\"\n         self.send_message(message)\n-        wait_until(lambda: not self.is_connected, timeout=timeout, lock=mininode_lock)\n+        wait_until(lambda: not self.is_connected, timeout=timeout, lock=p2p_lock)\n \n class CompactBlocksTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -154,8 +154,8 @@ def test_sendcmpct(self, test_node, old_node=None):\n         # Make sure we get a SENDCMPCT message from our peer\n         def received_sendcmpct():\n             return (len(test_node.last_sendcmpct) > 0)\n-        wait_until(received_sendcmpct, timeout=30, lock=mininode_lock)\n-        with mininode_lock:\n+        wait_until(received_sendcmpct, timeout=30, lock=p2p_lock)\n+        with p2p_lock:\n             # Check that the first version received is the preferred one\n             assert_equal(test_node.last_sendcmpct[0].version, preferred_version)\n             # And that we receive versions down to 1.\n@@ -170,7 +170,7 @@ def check_announcement_of_new_block(node, peer, predicate):\n             peer.wait_for_block_announcement(block_hash, timeout=30)\n             assert peer.block_announced\n \n-            with mininode_lock:\n+            with p2p_lock:\n                 assert predicate(peer), (\n                     \"block_hash={!r}, cmpctblock={!r}, inv={!r}\".format(\n                         block_hash, peer.last_message.get(\"cmpctblock\", None), peer.last_message.get(\"inv\", None)))\n@@ -294,11 +294,11 @@ def test_compactblock_construction(self, test_node, use_witness_address=True):\n         block.rehash()\n \n         # Wait until the block was announced (via compact blocks)\n-        wait_until(lambda: \"cmpctblock\" in test_node.last_message, timeout=30, lock=mininode_lock)\n+        wait_until(lambda: \"cmpctblock\" in test_node.last_message, timeout=30, lock=p2p_lock)\n \n         # Now fetch and check the compact block\n         header_and_shortids = None\n-        with mininode_lock:\n+        with p2p_lock:\n             # Convert the on-the-wire representation to absolute indexes\n             header_and_shortids = HeaderAndShortIDs(test_node.last_message[\"cmpctblock\"].header_and_shortids)\n         self.check_compactblock_construction_from_block(version, header_and_shortids, block_hash, block)\n@@ -308,11 +308,11 @@ def test_compactblock_construction(self, test_node, use_witness_address=True):\n         inv = CInv(MSG_CMPCT_BLOCK, block_hash)\n         test_node.send_message(msg_getdata([inv]))\n \n-        wait_until(lambda: \"cmpctblock\" in test_node.last_message, timeout=30, lock=mininode_lock)\n+        wait_until(lambda: \"cmpctblock\" in test_node.last_message, timeout=30, lock=p2p_lock)\n \n         # Now fetch and check the compact block\n         header_and_shortids = None\n-        with mininode_lock:\n+        with p2p_lock:\n             # Convert the on-the-wire representation to absolute indexes\n             header_and_shortids = HeaderAndShortIDs(test_node.last_message[\"cmpctblock\"].header_and_shortids)\n         self.check_compactblock_construction_from_block(version, header_and_shortids, block_hash, block)\n@@ -378,7 +378,7 @@ def test_compactblock_requests(self, test_node, segwit=True):\n \n             if announce == \"inv\":\n                 test_node.send_message(msg_inv([CInv(MSG_BLOCK, block.sha256)]))\n-                wait_until(lambda: \"getheaders\" in test_node.last_message, timeout=30, lock=mininode_lock)\n+                wait_until(lambda: \"getheaders\" in test_node.last_message, timeout=30, lock=p2p_lock)\n                 test_node.send_header_for_blocks([block])\n             else:\n                 test_node.send_header_for_blocks([block])\n@@ -397,7 +397,7 @@ def test_compactblock_requests(self, test_node, segwit=True):\n             test_node.send_and_ping(msg_cmpctblock(comp_block.to_p2p()))\n             assert_equal(int(node.getbestblockhash(), 16), block.hashPrevBlock)\n             # Expect a getblocktxn message.\n-            with mininode_lock:\n+            with p2p_lock:\n                 assert \"getblocktxn\" in test_node.last_message\n                 absolute_indexes = test_node.last_message[\"getblocktxn\"].block_txn_request.to_absolute()\n             assert_equal(absolute_indexes, [0])  # should be a coinbase request\n@@ -439,7 +439,7 @@ def test_getblocktxn_requests(self, test_node):\n         def test_getblocktxn_response(compact_block, peer, expected_result):\n             msg = msg_cmpctblock(compact_block.to_p2p())\n             peer.send_and_ping(msg)\n-            with mininode_lock:\n+            with p2p_lock:\n                 assert \"getblocktxn\" in peer.last_message\n                 absolute_indexes = peer.last_message[\"getblocktxn\"].block_txn_request.to_absolute()\n             assert_equal(absolute_indexes, expected_result)\n@@ -504,13 +504,13 @@ def test_tip_after_message(node, peer, msg, tip):\n             assert tx.hash in mempool\n \n         # Clear out last request.\n-        with mininode_lock:\n+        with p2p_lock:\n             test_node.last_message.pop(\"getblocktxn\", None)\n \n         # Send compact block\n         comp_block.initialize_from_block(block, prefill_list=[0], use_witness=with_witness)\n         test_tip_after_message(node, test_node, msg_cmpctblock(comp_block.to_p2p()), block.sha256)\n-        with mininode_lock:\n+        with p2p_lock:\n             # Shouldn't have gotten a request for any transaction\n             assert \"getblocktxn\" not in test_node.last_message\n \n@@ -537,7 +537,7 @@ def test_incorrect_blocktxn_response(self, test_node):\n         comp_block.initialize_from_block(block, prefill_list=[0], use_witness=(version == 2))\n         test_node.send_and_ping(msg_cmpctblock(comp_block.to_p2p()))\n         absolute_indexes = []\n-        with mininode_lock:\n+        with p2p_lock:\n             assert \"getblocktxn\" in test_node.last_message\n             absolute_indexes = test_node.last_message[\"getblocktxn\"].block_txn_request.to_absolute()\n         assert_equal(absolute_indexes, [6, 7, 8, 9, 10])\n@@ -588,10 +588,10 @@ def test_getblocktxn_handler(self, test_node):\n             num_to_request = random.randint(1, len(block.vtx))\n             msg.block_txn_request.from_absolute(sorted(random.sample(range(len(block.vtx)), num_to_request)))\n             test_node.send_message(msg)\n-            wait_until(lambda: \"blocktxn\" in test_node.last_message, timeout=10, lock=mininode_lock)\n+            wait_until(lambda: \"blocktxn\" in test_node.last_message, timeout=10, lock=p2p_lock)\n \n             [tx.calc_sha256() for tx in block.vtx]\n-            with mininode_lock:\n+            with p2p_lock:\n                 assert_equal(test_node.last_message[\"blocktxn\"].block_transactions.blockhash, int(block_hash, 16))\n                 all_indices = msg.block_txn_request.to_absolute()\n                 for index in all_indices:\n@@ -611,11 +611,11 @@ def test_getblocktxn_handler(self, test_node):\n         # allowed depth for a blocktxn response.\n         block_hash = node.getblockhash(current_height)\n         msg.block_txn_request = BlockTransactionsRequest(int(block_hash, 16), [0])\n-        with mininode_lock:\n+        with p2p_lock:\n             test_node.last_message.pop(\"block\", None)\n             test_node.last_message.pop(\"blocktxn\", None)\n         test_node.send_and_ping(msg)\n-        with mininode_lock:\n+        with p2p_lock:\n             test_node.last_message[\"block\"].block.calc_sha256()\n             assert_equal(test_node.last_message[\"block\"].block.sha256, int(block_hash, 16))\n             assert \"blocktxn\" not in test_node.last_message\n@@ -628,21 +628,21 @@ def test_compactblocks_not_at_tip(self, test_node):\n         for _ in range(MAX_CMPCTBLOCK_DEPTH + 1):\n             test_node.clear_block_announcement()\n             new_blocks.append(node.generate(1)[0])\n-            wait_until(test_node.received_block_announcement, timeout=30, lock=mininode_lock)\n+            wait_until(test_node.received_block_announcement, timeout=30, lock=p2p_lock)\n \n         test_node.clear_block_announcement()\n         test_node.send_message(msg_getdata([CInv(MSG_CMPCT_BLOCK, int(new_blocks[0], 16))]))\n-        wait_until(lambda: \"cmpctblock\" in test_node.last_message, timeout=30, lock=mininode_lock)\n+        wait_until(lambda: \"cmpctblock\" in test_node.last_message, timeout=30, lock=p2p_lock)\n \n         test_node.clear_block_announcement()\n         node.generate(1)\n-        wait_until(test_node.received_block_announcement, timeout=30, lock=mininode_lock)\n+        wait_until(test_node.received_block_announcement, timeout=30, lock=p2p_lock)\n         test_node.clear_block_announcement()\n-        with mininode_lock:\n+        with p2p_lock:\n             test_node.last_message.pop(\"block\", None)\n         test_node.send_message(msg_getdata([CInv(MSG_CMPCT_BLOCK, int(new_blocks[0], 16))]))\n-        wait_until(lambda: \"block\" in test_node.last_message, timeout=30, lock=mininode_lock)\n-        with mininode_lock:\n+        wait_until(lambda: \"block\" in test_node.last_message, timeout=30, lock=p2p_lock)\n+        with p2p_lock:\n             test_node.last_message[\"block\"].block.calc_sha256()\n             assert_equal(test_node.last_message[\"block\"].block.sha256, int(new_blocks[0], 16))\n \n@@ -670,10 +670,10 @@ def test_compactblocks_not_at_tip(self, test_node):\n         # (to avoid fingerprinting attacks).\n         msg = msg_getblocktxn()\n         msg.block_txn_request = BlockTransactionsRequest(block.sha256, [0])\n-        with mininode_lock:\n+        with p2p_lock:\n             test_node.last_message.pop(\"blocktxn\", None)\n         test_node.send_and_ping(msg)\n-        with mininode_lock:\n+        with p2p_lock:\n             assert \"blocktxn\" not in test_node.last_message\n \n     def test_end_to_end_block_relay(self, listeners):\n@@ -689,8 +689,8 @@ def test_end_to_end_block_relay(self, listeners):\n         node.submitblock(ToHex(block))\n \n         for l in listeners:\n-            wait_until(lambda: \"cmpctblock\" in l.last_message, timeout=30, lock=mininode_lock)\n-        with mininode_lock:\n+            wait_until(lambda: \"cmpctblock\" in l.last_message, timeout=30, lock=p2p_lock)\n+        with p2p_lock:\n             for l in listeners:\n                 l.last_message[\"cmpctblock\"].header_and_shortids.header.calc_sha256()\n                 assert_equal(l.last_message[\"cmpctblock\"].header_and_shortids.header.sha256, block.sha256)\n@@ -747,7 +747,7 @@ def announce_cmpct_block(node, peer):\n             cmpct_block.initialize_from_block(block)\n             msg = msg_cmpctblock(cmpct_block.to_p2p())\n             peer.send_and_ping(msg)\n-            with mininode_lock:\n+            with p2p_lock:\n                 assert \"getblocktxn\" in peer.last_message\n             return block, cmpct_block\n "
      },
      {
        "sha": "97880b68485c8d8f9c5a04360528e6dfa0e16ef3",
        "filename": "test/functional/p2p_feefilter.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e2897d020b114a10c860f90c5405be029afddba/test/functional/p2p_feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e2897d020b114a10c860f90c5405be029afddba/test/functional/p2p_feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_feefilter.py?ref=9e2897d020b114a10c860f90c5405be029afddba",
        "patch": "@@ -7,7 +7,7 @@\n from decimal import Decimal\n \n from test_framework.messages import MSG_TX, MSG_WTX, msg_feefilter\n-from test_framework.mininode import mininode_lock, P2PInterface\n+from test_framework.mininode import p2p_lock, P2PInterface\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n \n@@ -23,7 +23,7 @@ def on_feefilter(self, message):\n         self.feefilter_received = True\n \n     def assert_feefilter_received(self, recv: bool):\n-        with mininode_lock:\n+        with p2p_lock:\n             assert_equal(self.feefilter_received, recv)\n \n \n@@ -42,7 +42,7 @@ def wait_for_invs_to_match(self, invs_expected):\n         self.wait_until(lambda: invs_expected == sorted(self.txinvs), timeout=60)\n \n     def clear_invs(self):\n-        with mininode_lock:\n+        with p2p_lock:\n             self.txinvs = []\n \n "
      },
      {
        "sha": "608f0186d3f3cf8a86e3b9df1a11aac3f1ce6e61",
        "filename": "test/functional/p2p_filter.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e2897d020b114a10c860f90c5405be029afddba/test/functional/p2p_filter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e2897d020b114a10c860f90c5405be029afddba/test/functional/p2p_filter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_filter.py?ref=9e2897d020b114a10c860f90c5405be029afddba",
        "patch": "@@ -19,7 +19,7 @@\n     msg_mempool,\n     msg_version,\n )\n-from test_framework.mininode import P2PInterface, mininode_lock\n+from test_framework.mininode import P2PInterface, p2p_lock\n from test_framework.script import MAX_SCRIPT_ELEMENT_SIZE\n from test_framework.test_framework import BitcoinTestFramework\n \n@@ -60,22 +60,22 @@ def on_tx(self, message):\n \n     @property\n     def tx_received(self):\n-        with mininode_lock:\n+        with p2p_lock:\n             return self._tx_received\n \n     @tx_received.setter\n     def tx_received(self, value):\n-        with mininode_lock:\n+        with p2p_lock:\n             self._tx_received = value\n \n     @property\n     def merkleblock_received(self):\n-        with mininode_lock:\n+        with p2p_lock:\n             return self._merkleblock_received\n \n     @merkleblock_received.setter\n     def merkleblock_received(self, value):\n-        with mininode_lock:\n+        with p2p_lock:\n             self._merkleblock_received = value\n \n "
      },
      {
        "sha": "aeeff2e4de691cf8c24abe3d3831fe751846f514",
        "filename": "test/functional/p2p_getaddr_caching.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e2897d020b114a10c860f90c5405be029afddba/test/functional/p2p_getaddr_caching.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e2897d020b114a10c860f90c5405be029afddba/test/functional/p2p_getaddr_caching.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_getaddr_caching.py?ref=9e2897d020b114a10c860f90c5405be029afddba",
        "patch": "@@ -14,7 +14,7 @@\n )\n from test_framework.mininode import (\n     P2PInterface,\n-    mininode_lock\n+    p2p_lock\n )\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n@@ -44,7 +44,7 @@ def __init__(self):\n         self.received_addrs = None\n \n     def get_received_addrs(self):\n-        with mininode_lock:\n+        with p2p_lock:\n             return self.received_addrs\n \n     def on_addr(self, message):"
      },
      {
        "sha": "0dbf6b395781bef1a6b9124a4ab8314d066ac861",
        "filename": "test/functional/p2p_leak.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e2897d020b114a10c860f90c5405be029afddba/test/functional/p2p_leak.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e2897d020b114a10c860f90c5405be029afddba/test/functional/p2p_leak.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_leak.py?ref=9e2897d020b114a10c860f90c5405be029afddba",
        "patch": "@@ -17,7 +17,7 @@\n     msg_ping,\n     msg_version,\n )\n-from test_framework.mininode import mininode_lock, P2PInterface\n+from test_framework.mininode import p2p_lock, P2PInterface\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n@@ -114,9 +114,9 @@ def run_test(self):\n         # verack, since we never sent one\n         no_verack_idle_peer.wait_for_verack()\n \n-        wait_until(lambda: no_version_disconnect_peer.ever_connected, timeout=10, lock=mininode_lock)\n-        wait_until(lambda: no_version_idle_peer.ever_connected, timeout=10, lock=mininode_lock)\n-        wait_until(lambda: no_verack_idle_peer.version_received, timeout=10, lock=mininode_lock)\n+        wait_until(lambda: no_version_disconnect_peer.ever_connected, timeout=10, lock=p2p_lock)\n+        wait_until(lambda: no_version_idle_peer.ever_connected, timeout=10, lock=p2p_lock)\n+        wait_until(lambda: no_verack_idle_peer.version_received, timeout=10, lock=p2p_lock)\n \n         # Mine a block and make sure that it's not sent to the connected peers\n         self.nodes[0].generate(nblocks=1)"
      },
      {
        "sha": "5574cf643f18535aa8b97f1f0f066100ce3e5c74",
        "filename": "test/functional/p2p_node_network_limited.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e2897d020b114a10c860f90c5405be029afddba/test/functional/p2p_node_network_limited.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e2897d020b114a10c860f90c5405be029afddba/test/functional/p2p_node_network_limited.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_node_network_limited.py?ref=9e2897d020b114a10c860f90c5405be029afddba",
        "patch": "@@ -9,7 +9,7 @@\n     - send a block within 288 + 2 of the tip\n     - disconnect peers who request blocks older than that.\"\"\"\n from test_framework.messages import CInv, MSG_BLOCK, msg_getdata, msg_verack, NODE_NETWORK_LIMITED, NODE_WITNESS\n-from test_framework.mininode import P2PInterface, mininode_lock\n+from test_framework.mininode import P2PInterface, p2p_lock\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n@@ -28,7 +28,7 @@ def on_addr(self, message):\n         self.firstAddrnServices = message.addrs[0].nServices\n     def wait_for_addr(self, timeout=5):\n         test_function = lambda: self.last_message.get(\"addr\")\n-        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n+        wait_until(test_function, timeout=timeout, lock=p2p_lock)\n     def send_getdata_for_block(self, blockhash):\n         getdata_request = msg_getdata()\n         getdata_request.inv.append(CInv(MSG_BLOCK, int(blockhash, 16)))"
      },
      {
        "sha": "ffb4e6d94b6715f4fd038138206a98c1c22ba9b5",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e2897d020b114a10c860f90c5405be029afddba/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e2897d020b114a10c860f90c5405be029afddba/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=9e2897d020b114a10c860f90c5405be029afddba",
        "patch": "@@ -44,7 +44,7 @@\n )\n from test_framework.mininode import (\n     P2PInterface,\n-    mininode_lock,\n+    p2p_lock,\n )\n from test_framework.script import (\n     CScript,\n@@ -177,7 +177,7 @@ def announce_tx_and_wait_for_getdata(self, tx, timeout=60, success=True, use_wtx\n         if success:\n             # sanity check\n             assert (self.wtxidrelay and use_wtxid) or (not self.wtxidrelay and not use_wtxid)\n-        with mininode_lock:\n+        with p2p_lock:\n             self.last_message.pop(\"getdata\", None)\n         if use_wtxid:\n             wtxid = tx.calc_sha256(True)\n@@ -195,7 +195,7 @@ def announce_tx_and_wait_for_getdata(self, tx, timeout=60, success=True, use_wtx\n             assert not self.last_message.get(\"getdata\")\n \n     def announce_block_and_wait_for_getdata(self, block, use_header, timeout=60):\n-        with mininode_lock:\n+        with p2p_lock:\n             self.last_message.pop(\"getdata\", None)\n             self.last_message.pop(\"getheaders\", None)\n         msg = msg_headers()\n@@ -209,7 +209,7 @@ def announce_block_and_wait_for_getdata(self, block, use_header, timeout=60):\n         self.wait_for_getdata([block.sha256])\n \n     def request_block(self, blockhash, inv_type, timeout=60):\n-        with mininode_lock:\n+        with p2p_lock:\n             self.last_message.pop(\"block\", None)\n         self.send_message(msg_getdata(inv=[CInv(inv_type, blockhash)]))\n         self.wait_for_block(blockhash, timeout)\n@@ -2114,7 +2114,7 @@ def test_wtxid_relay(self):\n         # Check wtxidrelay feature negotiation message through connecting a new peer\n         def received_wtxidrelay():\n             return (len(self.wtx_node.last_wtxidrelay) > 0)\n-        wait_until(received_wtxidrelay, timeout=60, lock=mininode_lock)\n+        wait_until(received_wtxidrelay, timeout=60, lock=p2p_lock)\n \n         # Create a Segwit output from the latest UTXO\n         # and announce it to the network\n@@ -2138,25 +2138,25 @@ def received_wtxidrelay():\n         # Announce Segwit transaction with wtxid\n         # and wait for getdata\n         self.wtx_node.announce_tx_and_wait_for_getdata(tx2, use_wtxid=True)\n-        with mininode_lock:\n+        with p2p_lock:\n             lgd = self.wtx_node.lastgetdata[:]\n         assert_equal(lgd, [CInv(MSG_WTX, tx2.calc_sha256(True))])\n \n         # Announce Segwit transaction from non wtxidrelay peer\n         # and wait for getdata\n         self.tx_node.announce_tx_and_wait_for_getdata(tx2, use_wtxid=False)\n-        with mininode_lock:\n+        with p2p_lock:\n             lgd = self.tx_node.lastgetdata[:]\n         assert_equal(lgd, [CInv(MSG_TX|MSG_WITNESS_FLAG, tx2.sha256)])\n \n         # Send tx2 through; it's an orphan so won't be accepted\n-        with mininode_lock:\n+        with p2p_lock:\n             self.wtx_node.last_message.pop(\"getdata\", None)\n         test_transaction_acceptance(self.nodes[0], self.wtx_node, tx2, with_witness=True, accepted=False)\n \n         # Expect a request for parent (tx) by txid despite use of WTX peer\n         self.wtx_node.wait_for_getdata([tx.sha256], 60)\n-        with mininode_lock:\n+        with p2p_lock:\n             lgd = self.wtx_node.lastgetdata[:]\n         assert_equal(lgd, [CInv(MSG_TX|MSG_WITNESS_FLAG, tx.sha256)])\n "
      },
      {
        "sha": "cef57de2b80a4c9c4e744188cff1399aae77924c",
        "filename": "test/functional/p2p_sendheaders.py",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e2897d020b114a10c860f90c5405be029afddba/test/functional/p2p_sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e2897d020b114a10c860f90c5405be029afddba/test/functional/p2p_sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_sendheaders.py?ref=9e2897d020b114a10c860f90c5405be029afddba",
        "patch": "@@ -91,7 +91,7 @@\n     CBlockHeader,\n     NODE_WITNESS,\n     P2PInterface,\n-    mininode_lock,\n+    p2p_lock,\n     MSG_BLOCK,\n     msg_block,\n     msg_getblocks,\n@@ -147,7 +147,7 @@ def send_getblocks(self, locator):\n \n     def wait_for_block_announcement(self, block_hash, timeout=60):\n         test_function = lambda: self.last_blockhash_announced == block_hash\n-        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n+        wait_until(test_function, timeout=timeout, lock=p2p_lock)\n \n     def on_inv(self, message):\n         self.block_announced = True\n@@ -163,7 +163,7 @@ def on_headers(self, message):\n             self.last_blockhash_announced = message.headers[-1].sha256\n \n     def clear_block_announcements(self):\n-        with mininode_lock:\n+        with p2p_lock:\n             self.block_announced = False\n             self.last_message.pop(\"inv\", None)\n             self.last_message.pop(\"headers\", None)\n@@ -174,8 +174,8 @@ def check_last_headers_announcement(self, headers):\n         \"\"\"Test whether the last headers announcements received are right.\n            Headers may be announced across more than one message.\"\"\"\n         test_function = lambda: (len(self.recent_headers_announced) >= len(headers))\n-        wait_until(test_function, timeout=60, lock=mininode_lock)\n-        with mininode_lock:\n+        wait_until(test_function, timeout=60, lock=p2p_lock)\n+        with p2p_lock:\n             assert_equal(self.recent_headers_announced, headers)\n             self.block_announced = False\n             self.last_message.pop(\"headers\", None)\n@@ -186,9 +186,9 @@ def check_last_inv_announcement(self, inv):\n         inv should be a list of block hashes.\"\"\"\n \n         test_function = lambda: self.block_announced\n-        wait_until(test_function, timeout=60, lock=mininode_lock)\n+        wait_until(test_function, timeout=60, lock=p2p_lock)\n \n-        with mininode_lock:\n+        with p2p_lock:\n             compare_inv = []\n             if \"inv\" in self.last_message:\n                 compare_inv = [x.hash for x in self.last_message[\"inv\"].inv]\n@@ -298,7 +298,7 @@ def test_nonnull_locators(self, test_node, inv_node):\n                 test_node.send_header_for_blocks([new_block])\n                 test_node.wait_for_getdata([new_block.sha256])\n                 test_node.send_and_ping(msg_block(new_block))  # make sure this block is processed\n-                wait_until(lambda: inv_node.block_announced, timeout=60, lock=mininode_lock)\n+                wait_until(lambda: inv_node.block_announced, timeout=60, lock=p2p_lock)\n                 inv_node.clear_block_announcements()\n                 test_node.clear_block_announcements()\n \n@@ -456,7 +456,7 @@ def test_nonnull_locators(self, test_node, inv_node):\n         test_node.send_header_for_blocks(blocks)\n         test_node.sync_with_ping()\n         # should not have received any getdata messages\n-        with mininode_lock:\n+        with p2p_lock:\n             assert \"getdata\" not in test_node.last_message\n \n         # This time, direct fetch should work\n@@ -494,7 +494,7 @@ def test_nonnull_locators(self, test_node, inv_node):\n         test_node.last_message.pop(\"getdata\", None)\n         test_node.send_header_for_blocks(blocks[0:1])\n         test_node.sync_with_ping()\n-        with mininode_lock:\n+        with p2p_lock:\n             assert \"getdata\" not in test_node.last_message\n \n         # Announcing one more block on fork should trigger direct fetch for\n@@ -513,7 +513,7 @@ def test_nonnull_locators(self, test_node, inv_node):\n         test_node.last_message.pop(\"getdata\", None)\n         test_node.send_header_for_blocks(blocks[18:19])\n         test_node.sync_with_ping()\n-        with mininode_lock:\n+        with p2p_lock:\n             assert \"getdata\" not in test_node.last_message\n \n         self.log.info(\"Part 4: success!\")\n@@ -536,7 +536,7 @@ def test_nonnull_locators(self, test_node, inv_node):\n                 block_time += 1\n                 height += 1\n             # Send the header of the second block -> this won't connect.\n-            with mininode_lock:\n+            with p2p_lock:\n                 test_node.last_message.pop(\"getheaders\", None)\n             test_node.send_header_for_blocks([blocks[1]])\n             test_node.wait_for_getheaders()\n@@ -559,7 +559,7 @@ def test_nonnull_locators(self, test_node, inv_node):\n \n         for i in range(1, MAX_UNCONNECTING_HEADERS):\n             # Send a header that doesn't connect, check that we get a getheaders.\n-            with mininode_lock:\n+            with p2p_lock:\n                 test_node.last_message.pop(\"getheaders\", None)\n             test_node.send_header_for_blocks([blocks[i]])\n             test_node.wait_for_getheaders()\n@@ -574,7 +574,7 @@ def test_nonnull_locators(self, test_node, inv_node):\n         # before we get disconnected.  Should be 5*MAX_UNCONNECTING_HEADERS\n         for i in range(5 * MAX_UNCONNECTING_HEADERS - 1):\n             # Send a header that doesn't connect, check that we get a getheaders.\n-            with mininode_lock:\n+            with p2p_lock:\n                 test_node.last_message.pop(\"getheaders\", None)\n             test_node.send_header_for_blocks([blocks[i % len(blocks)]])\n             test_node.wait_for_getheaders()"
      },
      {
        "sha": "06dab6072968a9f79b5b9cc1857f55efc40b1f0c",
        "filename": "test/functional/p2p_tx_download.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e2897d020b114a10c860f90c5405be029afddba/test/functional/p2p_tx_download.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e2897d020b114a10c860f90c5405be029afddba/test/functional/p2p_tx_download.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_tx_download.py?ref=9e2897d020b114a10c860f90c5405be029afddba",
        "patch": "@@ -18,7 +18,7 @@\n )\n from test_framework.mininode import (\n     P2PInterface,\n-    mininode_lock,\n+    p2p_lock,\n )\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n@@ -73,7 +73,7 @@ def test_tx_requests(self):\n \n         def getdata_found(peer_index):\n             p = self.nodes[0].p2ps[peer_index]\n-            with mininode_lock:\n+            with p2p_lock:\n                 return p.last_message.get(\"getdata\") and p.last_message[\"getdata\"].inv[-1].hash == txid\n \n         node_0_mocktime = int(time.time())\n@@ -134,18 +134,18 @@ def test_in_flight_max(self):\n \n         p = self.nodes[0].p2ps[0]\n \n-        with mininode_lock:\n+        with p2p_lock:\n             p.tx_getdata_count = 0\n \n         p.send_message(msg_inv([CInv(t=MSG_WTX, h=i) for i in txids]))\n-        wait_until(lambda: p.tx_getdata_count >= MAX_GETDATA_IN_FLIGHT, lock=mininode_lock)\n-        with mininode_lock:\n+        wait_until(lambda: p.tx_getdata_count >= MAX_GETDATA_IN_FLIGHT, lock=p2p_lock)\n+        with p2p_lock:\n             assert_equal(p.tx_getdata_count, MAX_GETDATA_IN_FLIGHT)\n \n         self.log.info(\"Now check that if we send a NOTFOUND for a transaction, we'll get one more request\")\n         p.send_message(msg_notfound(vec=[CInv(t=MSG_WTX, h=txids[0])]))\n-        wait_until(lambda: p.tx_getdata_count >= MAX_GETDATA_IN_FLIGHT + 1, timeout=10, lock=mininode_lock)\n-        with mininode_lock:\n+        wait_until(lambda: p.tx_getdata_count >= MAX_GETDATA_IN_FLIGHT + 1, timeout=10, lock=p2p_lock)\n+        with p2p_lock:\n             assert_equal(p.tx_getdata_count, MAX_GETDATA_IN_FLIGHT + 1)\n \n         WAIT_TIME = TX_EXPIRY_INTERVAL // 2 + TX_EXPIRY_INTERVAL"
      },
      {
        "sha": "6888e90323dbf264122d5c548583eb09001cb3b2",
        "filename": "test/functional/p2p_unrequested_blocks.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e2897d020b114a10c860f90c5405be029afddba/test/functional/p2p_unrequested_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e2897d020b114a10c860f90c5405be029afddba/test/functional/p2p_unrequested_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_unrequested_blocks.py?ref=9e2897d020b114a10c860f90c5405be029afddba",
        "patch": "@@ -55,7 +55,7 @@\n \n from test_framework.blocktools import create_block, create_coinbase, create_tx_with_script\n from test_framework.messages import CBlockHeader, CInv, MSG_BLOCK, msg_block, msg_headers, msg_inv\n-from test_framework.mininode import mininode_lock, P2PInterface\n+from test_framework.mininode import p2p_lock, P2PInterface\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n@@ -199,13 +199,13 @@ def run_test(self):\n         # 6. Try to get node to request the missing block.\n         # Poke the node with an inv for block at height 3 and see if that\n         # triggers a getdata on block 2 (it should if block 2 is missing).\n-        with mininode_lock:\n+        with p2p_lock:\n             # Clear state so we can check the getdata request\n             test_node.last_message.pop(\"getdata\", None)\n             test_node.send_message(msg_inv([CInv(MSG_BLOCK, block_h3.sha256)]))\n \n         test_node.sync_with_ping()\n-        with mininode_lock:\n+        with p2p_lock:\n             getdata = test_node.last_message[\"getdata\"]\n \n         # Check that the getdata includes the right block"
      },
      {
        "sha": "5a5a94f0d6b5744f4b69e44fdd8378889771a428",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e2897d020b114a10c860f90c5405be029afddba/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e2897d020b114a10c860f90c5405be029afddba/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=9e2897d020b114a10c860f90c5405be029afddba",
        "patch": "@@ -320,7 +320,7 @@ def on_message(self, message):\n \n         We keep a count of how many of each message type has been received\n         and the most recent message of each type.\"\"\"\n-        with mininode_lock:\n+        with p2p_lock:\n             try:\n                 msgtype = message.msgtype.decode('ascii')\n                 self.message_count[msgtype] += 1\n@@ -394,7 +394,7 @@ def test_function():\n                 assert self.is_connected\n             return test_function_in()\n \n-        wait_until(test_function, timeout=timeout, lock=mininode_lock, timeout_factor=self.timeout_factor)\n+        wait_until(test_function, timeout=timeout, lock=p2p_lock, timeout_factor=self.timeout_factor)\n \n     def wait_for_disconnect(self, timeout=60):\n         test_function = lambda: not self.is_connected\n@@ -498,7 +498,7 @@ def test_function():\n # P2PConnection acquires this lock whenever delivering a message to a P2PInterface.\n # This lock should be acquired in the thread running the test logic to synchronize\n # access to any data shared with the P2PInterface or P2PConnection.\n-mininode_lock = threading.Lock()\n+p2p_lock = threading.Lock()\n \n \n class NetworkThread(threading.Thread):\n@@ -592,7 +592,7 @@ def send_blocks_and_test(self, blocks, node, *, success=True, force_send=False,\n          - if success is False: assert that the node's tip doesn't advance\n          - if reject_reason is set: assert that the correct reject message is logged\"\"\"\n \n-        with mininode_lock:\n+        with p2p_lock:\n             for block in blocks:\n                 self.block_store[block.sha256] = block\n                 self.last_block_hash = block.sha256\n@@ -629,7 +629,7 @@ def send_txs_and_test(self, txs, node, *, success=True, expect_disconnect=False,\n          - if expect_disconnect is True: Skip the sync with ping\n          - if reject_reason is set: assert that the correct reject message is logged.\"\"\"\n \n-        with mininode_lock:\n+        with p2p_lock:\n             for tx in txs:\n                 self.tx_store[tx.sha256] = tx\n \n@@ -668,7 +668,7 @@ def on_inv(self, message):\n                 self.tx_invs_received[i.hash] += 1\n \n     def get_invs(self):\n-        with mininode_lock:\n+        with p2p_lock:\n             return list(self.tx_invs_received.keys())\n \n     def wait_for_broadcast(self, txns, timeout=60):"
      },
      {
        "sha": "36c4748a0952898876d9293ee5f2645e03764cbc",
        "filename": "test/functional/wallet_resendwallettransactions.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e2897d020b114a10c860f90c5405be029afddba/test/functional/wallet_resendwallettransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e2897d020b114a10c860f90c5405be029afddba/test/functional/wallet_resendwallettransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_resendwallettransactions.py?ref=9e2897d020b114a10c860f90c5405be029afddba",
        "patch": "@@ -7,7 +7,7 @@\n \n from test_framework.blocktools import create_block, create_coinbase\n from test_framework.messages import ToHex\n-from test_framework.mininode import P2PTxInvStore, mininode_lock\n+from test_framework.mininode import P2PTxInvStore, p2p_lock\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, wait_until\n \n@@ -33,7 +33,7 @@ def run_test(self):\n         time.sleep(1.1)\n \n         # Can take a few seconds due to transaction trickling\n-        wait_until(lambda: node.p2p.tx_invs_received[txid] >= 1, lock=mininode_lock)\n+        wait_until(lambda: node.p2p.tx_invs_received[txid] >= 1, lock=p2p_lock)\n \n         # Add a second peer since txs aren't rebroadcast to the same peer (see filterInventoryKnown)\n         node.add_p2p_connection(P2PTxInvStore())\n@@ -64,7 +64,7 @@ def run_test(self):\n         # Transaction should be rebroadcast approximately 24 hours in the future,\n         # but can range from 12-36. So bump 36 hours to be sure.\n         node.setmocktime(now + 36 * 60 * 60)\n-        wait_until(lambda: node.p2ps[1].tx_invs_received[txid] >= 1, lock=mininode_lock)\n+        wait_until(lambda: node.p2ps[1].tx_invs_received[txid] >= 1, lock=p2p_lock)\n \n \n if __name__ == '__main__':"
      }
    ]
  },
  {
    "sha": "85165d4332b0f72d30e0c584b476249b542338e6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NTE2NWQ0MzMyYjBmNzJkMzBlMGM1ODRiNDc2MjQ5YjU0MjMzOGU2",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-07-19T07:47:05Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-08-21T14:52:20Z"
      },
      "message": "scripted-diff: Rename mininode to p2p\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/\\.mininode/\\.p2p/g' $(git grep -l \"mininode\")\ngit mv test/functional/test_framework/mininode.py test/functional/test_framework/p2p.py\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "89db57adaf7f505d03bc0390ab63946361650e41",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/89db57adaf7f505d03bc0390ab63946361650e41"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/85165d4332b0f72d30e0c584b476249b542338e6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85165d4332b0f72d30e0c584b476249b542338e6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/85165d4332b0f72d30e0c584b476249b542338e6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85165d4332b0f72d30e0c584b476249b542338e6/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9e2897d020b114a10c860f90c5405be029afddba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e2897d020b114a10c860f90c5405be029afddba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9e2897d020b114a10c860f90c5405be029afddba"
      }
    ],
    "stats": {
      "total": 86,
      "additions": 43,
      "deletions": 43
    },
    "files": [
      {
        "sha": "c69b078c6ed82305ea4068c753eeb1ed3f229881",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=85165d4332b0f72d30e0c584b476249b542338e6",
        "patch": "@@ -16,7 +16,7 @@\n # Avoid wildcard * imports\n from test_framework.blocktools import (create_block, create_coinbase)\n from test_framework.messages import CInv, MSG_BLOCK\n-from test_framework.mininode import (\n+from test_framework.p2p import (\n     P2PInterface,\n     p2p_lock,\n     msg_block,"
      },
      {
        "sha": "603d7f5d3bf1fd5675d3a89939b8827d9600a540",
        "filename": "test/functional/feature_assumevalid.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/feature_assumevalid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/feature_assumevalid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_assumevalid.py?ref=85165d4332b0f72d30e0c584b476249b542338e6",
        "patch": "@@ -42,7 +42,7 @@\n     msg_block,\n     msg_headers,\n )\n-from test_framework.mininode import P2PInterface\n+from test_framework.p2p import P2PInterface\n from test_framework.script import (CScript, OP_TRUE)\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal"
      },
      {
        "sha": "81483b5a87e8c5728fe0046f941cdf7666444a41",
        "filename": "test/functional/feature_block.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/feature_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/feature_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_block.py?ref=85165d4332b0f72d30e0c584b476249b542338e6",
        "patch": "@@ -26,7 +26,7 @@\n     uint256_from_compact,\n     uint256_from_str,\n )\n-from test_framework.mininode import P2PDataStore\n+from test_framework.p2p import P2PDataStore\n from test_framework.script import (\n     CScript,\n     MAX_SCRIPT_ELEMENT_SIZE,"
      },
      {
        "sha": "2919b0ea0b7ff6f3f0dc2c239bdc382196fa46b2",
        "filename": "test/functional/feature_cltv.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/feature_cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/feature_cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_cltv.py?ref=85165d4332b0f72d30e0c584b476249b542338e6",
        "patch": "@@ -10,7 +10,7 @@\n \n from test_framework.blocktools import create_coinbase, create_block, create_transaction\n from test_framework.messages import CTransaction, msg_block, ToHex\n-from test_framework.mininode import P2PInterface\n+from test_framework.p2p import P2PInterface\n from test_framework.script import CScript, OP_1NEGATE, OP_CHECKLOCKTIMEVERIFY, OP_DROP, CScriptNum\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import ("
      },
      {
        "sha": "38e95f00e9b983b9115ee8407f191833b52847cd",
        "filename": "test/functional/feature_csv_activation.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/feature_csv_activation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/feature_csv_activation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_csv_activation.py?ref=85165d4332b0f72d30e0c584b476249b542338e6",
        "patch": "@@ -44,7 +44,7 @@\n \n from test_framework.blocktools import create_coinbase, create_block, create_transaction\n from test_framework.messages import ToHex, CTransaction\n-from test_framework.mininode import P2PDataStore\n+from test_framework.p2p import P2PDataStore\n from test_framework.script import (\n     CScript,\n     OP_CHECKSEQUENCEVERIFY,"
      },
      {
        "sha": "f263c93c8a36925ead7ad8fef8d97fd12482be33",
        "filename": "test/functional/feature_dersig.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/feature_dersig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/feature_dersig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dersig.py?ref=85165d4332b0f72d30e0c584b476249b542338e6",
        "patch": "@@ -9,7 +9,7 @@\n \n from test_framework.blocktools import create_coinbase, create_block, create_transaction\n from test_framework.messages import msg_block\n-from test_framework.mininode import P2PInterface\n+from test_framework.p2p import P2PInterface\n from test_framework.script import CScript\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import ("
      },
      {
        "sha": "e5c62d1ea77fbcaf4b7a1556988fb29d9f9149d8",
        "filename": "test/functional/feature_maxuploadtarget.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/feature_maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/feature_maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_maxuploadtarget.py?ref=85165d4332b0f72d30e0c584b476249b542338e6",
        "patch": "@@ -14,7 +14,7 @@\n import time\n \n from test_framework.messages import CInv, MSG_BLOCK, msg_getdata\n-from test_framework.mininode import P2PInterface\n+from test_framework.p2p import P2PInterface\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, mine_large_block\n "
      },
      {
        "sha": "376a27e5f5526913bcd210489c9aa691c474807b",
        "filename": "test/functional/feature_versionbits_warning.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/feature_versionbits_warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/feature_versionbits_warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_versionbits_warning.py?ref=85165d4332b0f72d30e0c584b476249b542338e6",
        "patch": "@@ -12,7 +12,7 @@\n \n from test_framework.blocktools import create_block, create_coinbase\n from test_framework.messages import msg_block\n-from test_framework.mininode import P2PInterface, p2p_lock\n+from test_framework.p2p import P2PInterface, p2p_lock\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import wait_until\n "
      },
      {
        "sha": "c68bda6579cab86eb9944ca5723d0eae445f267e",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=85165d4332b0f72d30e0c584b476249b542338e6",
        "patch": "@@ -7,7 +7,7 @@\n from decimal import Decimal\n \n from test_framework.messages import COIN\n-from test_framework.mininode import P2PTxInvStore\n+from test_framework.p2p import P2PTxInvStore\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,"
      },
      {
        "sha": "cf2cd611bdaad6d52a66dd26999ec43af7015596",
        "filename": "test/functional/mempool_persist.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/mempool_persist.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/mempool_persist.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_persist.py?ref=85165d4332b0f72d30e0c584b476249b542338e6",
        "patch": "@@ -40,7 +40,7 @@\n import time\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.mininode import P2PTxInvStore\n+from test_framework.p2p import P2PTxInvStore\n from test_framework.util import (\n     assert_equal,\n     assert_greater_than_or_equal,"
      },
      {
        "sha": "abd5a03d95ff3badd4109995dc94cb471dd50e83",
        "filename": "test/functional/mempool_unbroadcast.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/mempool_unbroadcast.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/mempool_unbroadcast.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_unbroadcast.py?ref=85165d4332b0f72d30e0c584b476249b542338e6",
        "patch": "@@ -7,7 +7,7 @@\n \n import time\n \n-from test_framework.mininode import P2PTxInvStore\n+from test_framework.p2p import P2PTxInvStore\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,"
      },
      {
        "sha": "b13740750f80a1da5191c555684e329f57dcc4ca",
        "filename": "test/functional/mining_basic.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/mining_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/mining_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_basic.py?ref=85165d4332b0f72d30e0c584b476249b542338e6",
        "patch": "@@ -20,7 +20,7 @@\n     CBlockHeader,\n     BLOCK_HEADER_SIZE,\n )\n-from test_framework.mininode import P2PDataStore\n+from test_framework.p2p import P2PDataStore\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,"
      },
      {
        "sha": "caefe86a676b44ed4b519bb8eff256b560f46ea3",
        "filename": "test/functional/p2p_addr_relay.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/p2p_addr_relay.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/p2p_addr_relay.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_addr_relay.py?ref=85165d4332b0f72d30e0c584b476249b542338e6",
        "patch": "@@ -12,7 +12,7 @@\n     NODE_WITNESS,\n     msg_addr,\n )\n-from test_framework.mininode import (\n+from test_framework.p2p import (\n     P2PInterface,\n )\n from test_framework.test_framework import BitcoinTestFramework"
      },
      {
        "sha": "6475466d790afe0b090f57857ffa930a8c574dee",
        "filename": "test/functional/p2p_blockfilters.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/p2p_blockfilters.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/p2p_blockfilters.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_blockfilters.py?ref=85165d4332b0f72d30e0c584b476249b542338e6",
        "patch": "@@ -18,7 +18,7 @@\n     ser_uint256,\n     uint256_from_str,\n )\n-from test_framework.mininode import P2PInterface\n+from test_framework.p2p import P2PInterface\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,"
      },
      {
        "sha": "65259f18694c82d1661899deea18883ef4b9ea82",
        "filename": "test/functional/p2p_blocksonly.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/p2p_blocksonly.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/p2p_blocksonly.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_blocksonly.py?ref=85165d4332b0f72d30e0c584b476249b542338e6",
        "patch": "@@ -5,7 +5,7 @@\n \"\"\"Test p2p blocksonly\"\"\"\n \n from test_framework.messages import msg_tx, CTransaction, FromHex\n-from test_framework.mininode import P2PInterface\n+from test_framework.p2p import P2PInterface\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n "
      },
      {
        "sha": "725390bdd8fd4fba247181e9eced95ea746ac1c6",
        "filename": "test/functional/p2p_compactblocks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/p2p_compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/p2p_compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_compactblocks.py?ref=85165d4332b0f72d30e0c584b476249b542338e6",
        "patch": "@@ -11,7 +11,7 @@\n \n from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment\n from test_framework.messages import BlockTransactions, BlockTransactionsRequest, calculate_shortid, CBlock, CBlockHeader, CInv, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, HeaderAndShortIDs, msg_no_witness_block, msg_no_witness_blocktxn, msg_cmpctblock, msg_getblocktxn, msg_getdata, msg_getheaders, msg_headers, msg_inv, msg_sendcmpct, msg_sendheaders, msg_tx, msg_block, msg_blocktxn, MSG_BLOCK, MSG_CMPCT_BLOCK, MSG_WITNESS_FLAG, NODE_NETWORK, P2PHeaderAndShortIDs, PrefilledTransaction, ser_uint256, ToHex\n-from test_framework.mininode import p2p_lock, P2PInterface\n+from test_framework.p2p import p2p_lock, P2PInterface\n from test_framework.script import CScript, OP_TRUE, OP_DROP\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, wait_until, softfork_active"
      },
      {
        "sha": "7dd8c3146b6a6efe9319d260d1813fecc1411b38",
        "filename": "test/functional/p2p_dos_header_tree.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/p2p_dos_header_tree.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/p2p_dos_header_tree.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_dos_header_tree.py?ref=85165d4332b0f72d30e0c584b476249b542338e6",
        "patch": "@@ -8,7 +8,7 @@\n     CBlockHeader,\n     FromHex,\n )\n-from test_framework.mininode import (\n+from test_framework.p2p import (\n     P2PInterface,\n     msg_headers,\n )"
      },
      {
        "sha": "e076f8d8dfab7ee000940a6504371608cb0bd632",
        "filename": "test/functional/p2p_eviction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/p2p_eviction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/p2p_eviction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_eviction.py?ref=85165d4332b0f72d30e0c584b476249b542338e6",
        "patch": "@@ -16,7 +16,7 @@\n import time\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.mininode import P2PInterface, P2PDataStore\n+from test_framework.p2p import P2PInterface, P2PDataStore\n from test_framework.util import assert_equal, wait_until\n from test_framework.blocktools import create_block, create_coinbase\n from test_framework.messages import CTransaction, FromHex, msg_pong, msg_tx"
      },
      {
        "sha": "238502951f1a887dc53e6a301e18ad17b1035b6e",
        "filename": "test/functional/p2p_feefilter.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/p2p_feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/p2p_feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_feefilter.py?ref=85165d4332b0f72d30e0c584b476249b542338e6",
        "patch": "@@ -7,7 +7,7 @@\n from decimal import Decimal\n \n from test_framework.messages import MSG_TX, MSG_WTX, msg_feefilter\n-from test_framework.mininode import p2p_lock, P2PInterface\n+from test_framework.p2p import p2p_lock, P2PInterface\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n "
      },
      {
        "sha": "613d96eaad2fd5eb9e424067c8c82ba40a90e93b",
        "filename": "test/functional/p2p_filter.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/p2p_filter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/p2p_filter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_filter.py?ref=85165d4332b0f72d30e0c584b476249b542338e6",
        "patch": "@@ -19,7 +19,7 @@\n     msg_mempool,\n     msg_version,\n )\n-from test_framework.mininode import P2PInterface, p2p_lock\n+from test_framework.p2p import P2PInterface, p2p_lock\n from test_framework.script import MAX_SCRIPT_ELEMENT_SIZE\n from test_framework.test_framework import BitcoinTestFramework\n "
      },
      {
        "sha": "32a9445e0dac8565eb4ab671ce524072df506c5b",
        "filename": "test/functional/p2p_fingerprint.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/p2p_fingerprint.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/p2p_fingerprint.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_fingerprint.py?ref=85165d4332b0f72d30e0c584b476249b542338e6",
        "patch": "@@ -12,7 +12,7 @@\n \n from test_framework.blocktools import (create_block, create_coinbase)\n from test_framework.messages import CInv, MSG_BLOCK\n-from test_framework.mininode import (\n+from test_framework.p2p import (\n     P2PInterface,\n     msg_headers,\n     msg_block,"
      },
      {
        "sha": "6622ea9ec2038b76954ecd2be461b919b70a598d",
        "filename": "test/functional/p2p_getaddr_caching.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/p2p_getaddr_caching.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/p2p_getaddr_caching.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_getaddr_caching.py?ref=85165d4332b0f72d30e0c584b476249b542338e6",
        "patch": "@@ -12,7 +12,7 @@\n     msg_addr,\n     msg_getaddr,\n )\n-from test_framework.mininode import (\n+from test_framework.p2p import (\n     P2PInterface,\n     p2p_lock\n )"
      },
      {
        "sha": "51921a8ab51dc5dbd6f2ba5670d538900d2fec5b",
        "filename": "test/functional/p2p_getdata.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/p2p_getdata.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/p2p_getdata.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_getdata.py?ref=85165d4332b0f72d30e0c584b476249b542338e6",
        "patch": "@@ -9,7 +9,7 @@\n     CInv,\n     msg_getdata,\n )\n-from test_framework.mininode import P2PInterface\n+from test_framework.p2p import P2PInterface\n from test_framework.test_framework import BitcoinTestFramework\n \n "
      },
      {
        "sha": "b2c3c5d45f25cc29ee7c260ebfbebb2f95c0b887",
        "filename": "test/functional/p2p_invalid_block.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/p2p_invalid_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/p2p_invalid_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_block.py?ref=85165d4332b0f72d30e0c584b476249b542338e6",
        "patch": "@@ -14,7 +14,7 @@\n \n from test_framework.blocktools import create_block, create_coinbase, create_tx_with_script\n from test_framework.messages import COIN\n-from test_framework.mininode import P2PDataStore\n+from test_framework.p2p import P2PDataStore\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n "
      },
      {
        "sha": "24328c29193f9537dda7311afb395e7294a53377",
        "filename": "test/functional/p2p_invalid_locator.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/p2p_invalid_locator.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/p2p_invalid_locator.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_locator.py?ref=85165d4332b0f72d30e0c584b476249b542338e6",
        "patch": "@@ -6,7 +6,7 @@\n \"\"\"\n \n from test_framework.messages import msg_getheaders, msg_getblocks, MAX_LOCATOR_SZ\n-from test_framework.mininode import P2PInterface\n+from test_framework.p2p import P2PInterface\n from test_framework.test_framework import BitcoinTestFramework\n \n "
      },
      {
        "sha": "23e573c19a7deb301e8ebaa1cad28d0208bc3a83",
        "filename": "test/functional/p2p_invalid_messages.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/p2p_invalid_messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/p2p_invalid_messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_messages.py?ref=85165d4332b0f72d30e0c584b476249b542338e6",
        "patch": "@@ -17,7 +17,7 @@\n     MSG_TX,\n     ser_string,\n )\n-from test_framework.mininode import (\n+from test_framework.p2p import (\n     P2PDataStore,\n     P2PInterface,\n )"
      },
      {
        "sha": "3cd85bc4a3868cde65d462e1a71e683cb8c1d1e2",
        "filename": "test/functional/p2p_invalid_tx.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/p2p_invalid_tx.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/p2p_invalid_tx.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_tx.py?ref=85165d4332b0f72d30e0c584b476249b542338e6",
        "patch": "@@ -13,7 +13,7 @@\n     CTxIn,\n     CTxOut,\n )\n-from test_framework.mininode import P2PDataStore\n+from test_framework.p2p import P2PDataStore\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,"
      },
      {
        "sha": "f4f883a36d1e02baf75e3cc8427f72543df3f69e",
        "filename": "test/functional/p2p_leak.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/p2p_leak.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/p2p_leak.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_leak.py?ref=85165d4332b0f72d30e0c584b476249b542338e6",
        "patch": "@@ -17,7 +17,7 @@\n     msg_ping,\n     msg_version,\n )\n-from test_framework.mininode import p2p_lock, P2PInterface\n+from test_framework.p2p import p2p_lock, P2PInterface\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,"
      },
      {
        "sha": "9e761db03f5af9677aa4cc4c19ba3ec954407dfd",
        "filename": "test/functional/p2p_leak_tx.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/p2p_leak_tx.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/p2p_leak_tx.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_leak_tx.py?ref=85165d4332b0f72d30e0c584b476249b542338e6",
        "patch": "@@ -5,7 +5,7 @@\n \"\"\"Test that we don't leak txs to inbound peers that we haven't yet announced to\"\"\"\n \n from test_framework.messages import msg_getdata, CInv, MSG_TX\n-from test_framework.mininode import P2PDataStore\n+from test_framework.p2p import P2PDataStore\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,"
      },
      {
        "sha": "c2311cb19729fc55b896df9a6c4b091d542659a1",
        "filename": "test/functional/p2p_nobloomfilter_messages.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/p2p_nobloomfilter_messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/p2p_nobloomfilter_messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_nobloomfilter_messages.py?ref=85165d4332b0f72d30e0c584b476249b542338e6",
        "patch": "@@ -12,7 +12,7 @@\n \"\"\"\n \n from test_framework.messages import msg_mempool, msg_filteradd, msg_filterload, msg_filterclear\n-from test_framework.mininode import P2PInterface\n+from test_framework.p2p import P2PInterface\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n "
      },
      {
        "sha": "5d06481d8c2a61ddedba33da7e8e604912400e4b",
        "filename": "test/functional/p2p_node_network_limited.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/p2p_node_network_limited.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/p2p_node_network_limited.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_node_network_limited.py?ref=85165d4332b0f72d30e0c584b476249b542338e6",
        "patch": "@@ -9,7 +9,7 @@\n     - send a block within 288 + 2 of the tip\n     - disconnect peers who request blocks older than that.\"\"\"\n from test_framework.messages import CInv, MSG_BLOCK, msg_getdata, msg_verack, NODE_NETWORK_LIMITED, NODE_WITNESS\n-from test_framework.mininode import P2PInterface, p2p_lock\n+from test_framework.p2p import P2PInterface, p2p_lock\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,"
      },
      {
        "sha": "85ebc0e5a47e97d4bb65c697f300b68977bc707c",
        "filename": "test/functional/p2p_permissions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/p2p_permissions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/p2p_permissions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_permissions.py?ref=85165d4332b0f72d30e0c584b476249b542338e6",
        "patch": "@@ -13,7 +13,7 @@\n     CTxInWitness,\n     FromHex,\n )\n-from test_framework.mininode import P2PDataStore\n+from test_framework.p2p import P2PDataStore\n from test_framework.script import (\n     CScript,\n     OP_TRUE,"
      },
      {
        "sha": "888e986fba5ce8e6968425f1a2dabf6453c2707d",
        "filename": "test/functional/p2p_ping.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/p2p_ping.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/p2p_ping.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_ping.py?ref=85165d4332b0f72d30e0c584b476249b542338e6",
        "patch": "@@ -8,7 +8,7 @@\n import time\n \n from test_framework.messages import msg_pong\n-from test_framework.mininode import P2PInterface\n+from test_framework.p2p import P2PInterface\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n "
      },
      {
        "sha": "2a559e69fc0a14edf5358bbd69232c6721064d80",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=85165d4332b0f72d30e0c584b476249b542338e6",
        "patch": "@@ -42,7 +42,7 @@\n     uint256_from_str,\n     FromHex,\n )\n-from test_framework.mininode import (\n+from test_framework.p2p import (\n     P2PInterface,\n     p2p_lock,\n )"
      },
      {
        "sha": "bc1c1829665d9cd82d52e69d384ae5443f7aa0be",
        "filename": "test/functional/p2p_sendheaders.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/p2p_sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/p2p_sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_sendheaders.py?ref=85165d4332b0f72d30e0c584b476249b542338e6",
        "patch": "@@ -87,7 +87,7 @@\n \"\"\"\n from test_framework.blocktools import create_block, create_coinbase\n from test_framework.messages import CInv\n-from test_framework.mininode import (\n+from test_framework.p2p import (\n     CBlockHeader,\n     NODE_WITNESS,\n     P2PInterface,"
      },
      {
        "sha": "ce12ce26ced9f3ff8a0962d9977638f211c255bc",
        "filename": "test/functional/p2p_timeouts.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/p2p_timeouts.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/p2p_timeouts.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_timeouts.py?ref=85165d4332b0f72d30e0c584b476249b542338e6",
        "patch": "@@ -24,7 +24,7 @@\n from time import sleep\n \n from test_framework.messages import msg_ping\n-from test_framework.mininode import P2PInterface\n+from test_framework.p2p import P2PInterface\n from test_framework.test_framework import BitcoinTestFramework\n \n "
      },
      {
        "sha": "59fab9de0cd7d19c6828d52f08f44cef1b40d639",
        "filename": "test/functional/p2p_tx_download.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/p2p_tx_download.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/p2p_tx_download.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_tx_download.py?ref=85165d4332b0f72d30e0c584b476249b542338e6",
        "patch": "@@ -16,7 +16,7 @@\n     msg_inv,\n     msg_notfound,\n )\n-from test_framework.mininode import (\n+from test_framework.p2p import (\n     P2PInterface,\n     p2p_lock,\n )"
      },
      {
        "sha": "36b434bce3d4cff2b5d9a4f8a71f236cc734ba51",
        "filename": "test/functional/p2p_unrequested_blocks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/p2p_unrequested_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/p2p_unrequested_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_unrequested_blocks.py?ref=85165d4332b0f72d30e0c584b476249b542338e6",
        "patch": "@@ -55,7 +55,7 @@\n \n from test_framework.blocktools import create_block, create_coinbase, create_tx_with_script\n from test_framework.messages import CBlockHeader, CInv, MSG_BLOCK, msg_block, msg_headers, msg_inv\n-from test_framework.mininode import p2p_lock, P2PInterface\n+from test_framework.p2p import p2p_lock, P2PInterface\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,"
      },
      {
        "sha": "687222dfef4f2ef1a96bc2fbff0fdf3e0e5ebdfa",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=85165d4332b0f72d30e0c584b476249b542338e6",
        "patch": "@@ -42,7 +42,7 @@\n     FromHex,\n     msg_block,\n )\n-from test_framework.mininode import (\n+from test_framework.p2p import (\n     P2PInterface,\n )\n "
      },
      {
        "sha": "f952f91c74fec272041fa2f0b09b68a6cec2bdf5",
        "filename": "test/functional/rpc_net.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/rpc_net.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/rpc_net.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_net.py?ref=85165d4332b0f72d30e0c584b476249b542338e6",
        "patch": "@@ -19,7 +19,7 @@\n     p2p_port,\n     wait_until,\n )\n-from test_framework.mininode import P2PInterface\n+from test_framework.p2p import P2PInterface\n import test_framework.messages\n from test_framework.messages import (\n     NODE_NETWORK,"
      },
      {
        "sha": "38c3c5551acfbdedd3bec802c5e88ac3aab01c61",
        "filename": "test/functional/test_framework/p2p.py",
        "status": "renamed",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/test_framework/p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/test_framework/p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/p2p.py?ref=85165d4332b0f72d30e0c584b476249b542338e6",
        "patch": "@@ -67,7 +67,7 @@\n )\n from test_framework.util import wait_until\n \n-logger = logging.getLogger(\"TestFramework.mininode\")\n+logger = logging.getLogger(\"TestFramework.p2p\")\n \n MESSAGEMAP = {\n     b\"addr\": msg_addr,",
        "previous_filename": "test/functional/test_framework/mininode.py"
      },
      {
        "sha": "35553430958f6829e86ac0dcb2dfeadaadf863a4",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=85165d4332b0f72d30e0c584b476249b542338e6",
        "patch": "@@ -21,7 +21,7 @@\n from .authproxy import JSONRPCException\n from . import coverage\n from .test_node import TestNode\n-from .mininode import NetworkThread\n+from .p2p import NetworkThread\n from .util import (\n     MAX_NODES,\n     PortSeed,"
      },
      {
        "sha": "ab266dd883ae46adb31434ea6934be569b27fc45",
        "filename": "test/functional/wallet_resendwallettransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/wallet_resendwallettransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85165d4332b0f72d30e0c584b476249b542338e6/test/functional/wallet_resendwallettransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_resendwallettransactions.py?ref=85165d4332b0f72d30e0c584b476249b542338e6",
        "patch": "@@ -7,7 +7,7 @@\n \n from test_framework.blocktools import create_block, create_coinbase\n from test_framework.messages import ToHex\n-from test_framework.mininode import P2PTxInvStore, p2p_lock\n+from test_framework.p2p import P2PTxInvStore, p2p_lock\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, wait_until\n "
      }
    ]
  },
  {
    "sha": "5e8df3312e47a73e747ee892face55ed9ababeea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZThkZjMzMTJlNDdhNzNlNzQ3ZWU4OTJmYWNlNTVlZDlhYmFiZWVh",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-08-17T09:45:44Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-08-21T14:53:59Z"
      },
      "message": "test: resort imports",
      "tree": {
        "sha": "39019aac686a764cce2f4e52a7a62206740e9870",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/39019aac686a764cce2f4e52a7a62206740e9870"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5e8df3312e47a73e747ee892face55ed9ababeea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e8df3312e47a73e747ee892face55ed9ababeea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5e8df3312e47a73e747ee892face55ed9ababeea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e8df3312e47a73e747ee892face55ed9ababeea/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "85165d4332b0f72d30e0c584b476249b542338e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85165d4332b0f72d30e0c584b476249b542338e6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/85165d4332b0f72d30e0c584b476249b542338e6"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 25,
      "deletions": 29
    },
    "files": [
      {
        "sha": "32a167bcd580375589c3db5bd1613a4bb91815fb",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e8df3312e47a73e747ee892face55ed9ababeea/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e8df3312e47a73e747ee892face55ed9ababeea/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=5e8df3312e47a73e747ee892face55ed9ababeea",
        "patch": "@@ -18,9 +18,9 @@\n from test_framework.messages import CInv, MSG_BLOCK\n from test_framework.p2p import (\n     P2PInterface,\n-    p2p_lock,\n     msg_block,\n     msg_getdata,\n+    p2p_lock,\n )\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import ("
      },
      {
        "sha": "78c295b6e8a1caf53c0ef5efb6ed7d71d2b272b4",
        "filename": "test/functional/feature_versionbits_warning.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e8df3312e47a73e747ee892face55ed9ababeea/test/functional/feature_versionbits_warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e8df3312e47a73e747ee892face55ed9ababeea/test/functional/feature_versionbits_warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_versionbits_warning.py?ref=5e8df3312e47a73e747ee892face55ed9ababeea",
        "patch": "@@ -12,7 +12,7 @@\n \n from test_framework.blocktools import create_block, create_coinbase\n from test_framework.messages import msg_block\n-from test_framework.p2p import P2PInterface, p2p_lock\n+from test_framework.p2p import p2p_lock, P2PInterface\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import wait_until\n "
      },
      {
        "sha": "00854656f8efff1d9237d29faf24e7e847ee9fca",
        "filename": "test/functional/mempool_persist.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e8df3312e47a73e747ee892face55ed9ababeea/test/functional/mempool_persist.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e8df3312e47a73e747ee892face55ed9ababeea/test/functional/mempool_persist.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_persist.py?ref=5e8df3312e47a73e747ee892face55ed9ababeea",
        "patch": "@@ -39,8 +39,8 @@\n import os\n import time\n \n-from test_framework.test_framework import BitcoinTestFramework\n from test_framework.p2p import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n     assert_greater_than_or_equal,"
      },
      {
        "sha": "80f262d0d33f115368a243b9f28b765b16b5be67",
        "filename": "test/functional/p2p_addr_relay.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e8df3312e47a73e747ee892face55ed9ababeea/test/functional/p2p_addr_relay.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e8df3312e47a73e747ee892face55ed9ababeea/test/functional/p2p_addr_relay.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_addr_relay.py?ref=5e8df3312e47a73e747ee892face55ed9ababeea",
        "patch": "@@ -12,9 +12,7 @@\n     NODE_WITNESS,\n     msg_addr,\n )\n-from test_framework.p2p import (\n-    P2PInterface,\n-)\n+from test_framework.p2p import P2PInterface\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,"
      },
      {
        "sha": "848df4a58542d4d6345b4a0664264f75da991519",
        "filename": "test/functional/p2p_eviction.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e8df3312e47a73e747ee892face55ed9ababeea/test/functional/p2p_eviction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e8df3312e47a73e747ee892face55ed9ababeea/test/functional/p2p_eviction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_eviction.py?ref=5e8df3312e47a73e747ee892face55ed9ababeea",
        "patch": "@@ -15,11 +15,11 @@\n \n import time\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.p2p import P2PInterface, P2PDataStore\n-from test_framework.util import assert_equal, wait_until\n from test_framework.blocktools import create_block, create_coinbase\n from test_framework.messages import CTransaction, FromHex, msg_pong, msg_tx\n+from test_framework.p2p import P2PDataStore, P2PInterface\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, wait_until\n \n \n class SlowP2PDataStore(P2PDataStore):"
      },
      {
        "sha": "63b6107df625fecb6602584bda01f29c7baf543e",
        "filename": "test/functional/p2p_feefilter.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e8df3312e47a73e747ee892face55ed9ababeea/test/functional/p2p_feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e8df3312e47a73e747ee892face55ed9ababeea/test/functional/p2p_feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_feefilter.py?ref=5e8df3312e47a73e747ee892face55ed9ababeea",
        "patch": "@@ -7,7 +7,7 @@\n from decimal import Decimal\n \n from test_framework.messages import MSG_TX, MSG_WTX, msg_feefilter\n-from test_framework.p2p import p2p_lock, P2PInterface\n+from test_framework.p2p import P2PInterface, p2p_lock\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n "
      },
      {
        "sha": "c005584485f7069cefdeaa8219260d51e37352f8",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 10,
        "deletions": 12,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e8df3312e47a73e747ee892face55ed9ababeea/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e8df3312e47a73e747ee892face55ed9ababeea/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=5e8df3312e47a73e747ee892face55ed9ababeea",
        "patch": "@@ -22,16 +22,6 @@\n import http.client\n import subprocess\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (\n-    assert_equal,\n-    assert_greater_than,\n-    assert_greater_than_or_equal,\n-    assert_raises,\n-    assert_raises_rpc_error,\n-    assert_is_hex_string,\n-    assert_is_hash_string,\n-)\n from test_framework.blocktools import (\n     create_block,\n     create_coinbase,\n@@ -42,8 +32,16 @@\n     FromHex,\n     msg_block,\n )\n-from test_framework.p2p import (\n-    P2PInterface,\n+from test_framework.p2p import P2PInterface\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    assert_raises,\n+    assert_raises_rpc_error,\n+    assert_is_hex_string,\n+    assert_is_hash_string,\n )\n \n "
      },
      {
        "sha": "068a76f36bd085b5946f6d52fc4d67880941ce91",
        "filename": "test/functional/rpc_net.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e8df3312e47a73e747ee892face55ed9ababeea/test/functional/rpc_net.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e8df3312e47a73e747ee892face55ed9ababeea/test/functional/rpc_net.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_net.py?ref=5e8df3312e47a73e747ee892face55ed9ababeea",
        "patch": "@@ -9,6 +9,12 @@\n \n from decimal import Decimal\n \n+from test_framework.p2p import P2PInterface\n+import test_framework.messages\n+from test_framework.messages import (\n+    NODE_NETWORK,\n+    NODE_WITNESS,\n+)\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n@@ -19,12 +25,6 @@\n     p2p_port,\n     wait_until,\n )\n-from test_framework.p2p import P2PInterface\n-import test_framework.messages\n-from test_framework.messages import (\n-    NODE_NETWORK,\n-    NODE_WITNESS,\n-)\n \n \n def assert_net_servicesnames(servicesflag, servicenames):"
      },
      {
        "sha": "2a60f8e0c166ef0832aa33a8f77acf56574d59d3",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e8df3312e47a73e747ee892face55ed9ababeea/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e8df3312e47a73e747ee892face55ed9ababeea/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=5e8df3312e47a73e747ee892face55ed9ababeea",
        "patch": "@@ -20,8 +20,8 @@\n \n from .authproxy import JSONRPCException\n from . import coverage\n-from .test_node import TestNode\n from .p2p import NetworkThread\n+from .test_node import TestNode\n from .util import (\n     MAX_NODES,\n     PortSeed,"
      }
    ]
  },
  {
    "sha": "d5800da5199527a366024bc80cad7fcca17d5c4a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNTgwMGRhNTE5OTUyN2EzNjYwMjRiYzgwY2FkN2ZjY2ExN2Q1YzRh",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-08-17T09:10:44Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-08-25T09:04:25Z"
      },
      "message": "[test] Remove final references to mininode",
      "tree": {
        "sha": "b74bc29618771f17ef0f67c1e54aae38186056c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b74bc29618771f17ef0f67c1e54aae38186056c1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d5800da5199527a366024bc80cad7fcca17d5c4a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5800da5199527a366024bc80cad7fcca17d5c4a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d5800da5199527a366024bc80cad7fcca17d5c4a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5800da5199527a366024bc80cad7fcca17d5c4a/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5e8df3312e47a73e747ee892face55ed9ababeea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e8df3312e47a73e747ee892face55ed9ababeea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5e8df3312e47a73e747ee892face55ed9ababeea"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 18,
      "deletions": 14
    },
    "files": [
      {
        "sha": "0d85a7407400ad8bc32e6d45552cb9036634a836",
        "filename": "test/functional/README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5800da5199527a366024bc80cad7fcca17d5c4a/test/functional/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5800da5199527a366024bc80cad7fcca17d5c4a/test/functional/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/README.md?ref=d5800da5199527a366024bc80cad7fcca17d5c4a",
        "patch": "@@ -127,8 +127,8 @@ Base class for functional tests.\n #### [util.py](test_framework/util.py)\n Generally useful functions.\n \n-#### [mininode.py](test_framework/mininode.py)\n-Basic code to support P2P connectivity to a bitcoind.\n+#### [p2p.py](test_framework/p2p.py)\n+Test objects for interacting with a bitcoind node over the p2p interface.\n \n #### [script.py](test_framework/script.py)\n Utilities for manipulating transaction scripts (originally from python-bitcoinlib)"
      },
      {
        "sha": "ae69371984e0caf7292bf2552e306d084998cea4",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5800da5199527a366024bc80cad7fcca17d5c4a/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5800da5199527a366024bc80cad7fcca17d5c4a/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=d5800da5199527a366024bc80cad7fcca17d5c4a",
        "patch": "@@ -167,7 +167,7 @@ def run_test(self):\n         height = self.nodes[0].getblockcount()\n \n         for _ in range(10):\n-            # Use the mininode and blocktools functionality to manually build a block\n+            # Use the blocktools functionality to manually build a block.\n             # Calling the generate() rpc is easier, but this allows us to exactly\n             # control the blocks and transactions.\n             block = create_block(self.tip, create_coinbase(height+1), self.block_time)"
      },
      {
        "sha": "efafcfaec39254607bbdb831834f4f49b1a92dc0",
        "filename": "test/functional/feature_block.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5800da5199527a366024bc80cad7fcca17d5c4a/test/functional/feature_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5800da5199527a366024bc80cad7fcca17d5c4a/test/functional/feature_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_block.py?ref=d5800da5199527a366024bc80cad7fcca17d5c4a",
        "patch": "@@ -53,7 +53,7 @@\n from test_framework.util import assert_equal\n from data import invalid_txs\n \n-#  Use this class for tests that require behavior other than normal \"mininode\" behavior.\n+#  Use this class for tests that require behavior other than normal p2p behavior.\n #  For now, it is used to serialize a bloated varint (b64).\n class CBrokenBlock(CBlock):\n     def initialize(self, base_block):"
      },
      {
        "sha": "b467ee174e7967ed8975098849610274b46955cd",
        "filename": "test/functional/p2p_permissions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5800da5199527a366024bc80cad7fcca17d5c4a/test/functional/p2p_permissions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5800da5199527a366024bc80cad7fcca17d5c4a/test/functional/p2p_permissions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_permissions.py?ref=d5800da5199527a366024bc80cad7fcca17d5c4a",
        "patch": "@@ -109,7 +109,7 @@ def check_tx_relay(self):\n         self.sync_all()\n \n         self.log.debug(\"Create a connection from a forcerelay peer that rebroadcasts raw txs\")\n-        # A python mininode is needed to send the raw transaction directly. If a full node was used, it could only\n+        # A test framework p2p connection is needed to send the raw transaction directly. If a full node was used, it could only\n         # rebroadcast via the inv-getdata mechanism. However, even for forcerelay connections, a full node would\n         # currently not request a txid that is already in the mempool.\n         self.restart_node(1, extra_args=[\"-whitelist=forcerelay@127.0.0.1\"])"
      },
      {
        "sha": "49b083b9985338794a1033de6f3a8f1fea2f9917",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5800da5199527a366024bc80cad7fcca17d5c4a/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5800da5199527a366024bc80cad7fcca17d5c4a/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=d5800da5199527a366024bc80cad7fcca17d5c4a",
        "patch": "@@ -153,8 +153,8 @@ def __init__(self, wtxidrelay=False):\n         self.lastgetdata = []\n         self.wtxidrelay = wtxidrelay\n \n-    # Avoid sending out msg_getdata in the mininode thread as a reply to invs.\n-    # They are not needed and would only lead to races because we send msg_getdata out in the test thread\n+    # Don't send getdata message replies to invs automatically.\n+    # We'll send the getdata messages explicitly in the test logic.\n     def on_inv(self, message):\n         pass\n "
      },
      {
        "sha": "bd4a53876e7883d47bb08923f92d91374e3535ba",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5800da5199527a366024bc80cad7fcca17d5c4a/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5800da5199527a366024bc80cad7fcca17d5c4a/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=d5800da5199527a366024bc80cad7fcca17d5c4a",
        "patch": "@@ -32,7 +32,7 @@\n \n MIN_VERSION_SUPPORTED = 60001\n MY_VERSION = 70016  # past wtxid relay\n-MY_SUBVERSION = b\"/python-mininode-tester:0.0.3/\"\n+MY_SUBVERSION = b\"/python-p2p-tester:0.0.3/\"\n MY_RELAY = 1 # from version 70001 onwards, fRelay should be appended to version messages (BIP37)\n \n MAX_LOCATOR_SZ = 101"
      },
      {
        "sha": "57c77e60b5385d14188f18c2f42edfea32c5daf1",
        "filename": "test/functional/test_framework/p2p.py",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5800da5199527a366024bc80cad7fcca17d5c4a/test/functional/test_framework/p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5800da5199527a366024bc80cad7fcca17d5c4a/test/functional/test_framework/p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/p2p.py?ref=d5800da5199527a366024bc80cad7fcca17d5c4a",
        "patch": "@@ -4,10 +4,14 @@\n # Copyright (c) 2010-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Bitcoin P2P network half-a-node.\n-\n-This python code was modified from ArtForz' public domain half-a-node, as\n-found in the mini-node branch of http://github.com/jgarzik/pynode.\n+\"\"\"Test objects for interacting with a bitcoind node over the p2p protocol.\n+\n+The P2PInterface objects interact with the bitcoind nodes under test using the\n+node's p2p interface. They can be used to send messages to the node, and\n+callbacks can be registered that execute when messages are received from the\n+node. Messages are sent to/received from the node on an asyncio event loop.\n+State held inside the objects must be guarded by the p2p_lock to avoid data\n+races between the main testing thread and the event loop.\n \n P2PConnection: A low-level connection object to a node's P2P interface\n P2PInterface: A high-level interface object for communicating to a node over P2P"
      },
      {
        "sha": "5c7a883c43da900943dd2e4d293ff623c1d163e8",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5800da5199527a366024bc80cad7fcca17d5c4a/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5800da5199527a366024bc80cad7fcca17d5c4a/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=d5800da5199527a366024bc80cad7fcca17d5c4a",
        "patch": "@@ -551,7 +551,7 @@ def p2p(self):\n         assert self.p2ps, self._node_msg(\"No p2p connection\")\n         return self.p2ps[0]\n \n-    def num_connected_mininodes(self):\n+    def num_test_p2p_connections(self):\n         \"\"\"Return number of test framework p2p connections to the node.\"\"\"\n         return len([peer for peer in self.getpeerinfo() if peer['subver'] == MY_SUBVERSION])\n \n@@ -560,7 +560,7 @@ def disconnect_p2ps(self):\n         for p in self.p2ps:\n             p.peer_disconnect()\n         del self.p2ps[:]\n-        wait_until(lambda: self.num_connected_mininodes() == 0)\n+        wait_until(lambda: self.num_test_p2p_connections() == 0)\n \n \n class TestNodeCLIAttr:"
      }
    ]
  }
]