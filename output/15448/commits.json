[
  {
    "sha": "45c7439fed93dc31c7bc79906ae6c2e9bf062f8c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NWM3NDM5ZmVkOTNkYzMxYzdiYzc5OTA2YWU2YzJlOWJmMDYyZjhj",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-02-20T15:03:07Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-02-20T15:03:07Z"
      },
      "message": "bitcoin-cli: Eliminate \"Error parsing JSON\" errors\n\nJust pass arguments that can't be parsed as JSON as string arguments. If the\nRPC method isn't expecting a string argument, this will result in more specific\nerrors from the RPC. And if it allows an argument to be a string as one\npossible type (for example the `hash_or_height` argument to `getblockstats`),\nthis avoids the need for bitcoin-cli users to use double JSON quoting+shell\nquoting to pass the string.",
      "tree": {
        "sha": "731e6eaa44f038e94bee0c90a31bf795d5f9eaa2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/731e6eaa44f038e94bee0c90a31bf795d5f9eaa2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/45c7439fed93dc31c7bc79906ae6c2e9bf062f8c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45c7439fed93dc31c7bc79906ae6c2e9bf062f8c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/45c7439fed93dc31c7bc79906ae6c2e9bf062f8c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45c7439fed93dc31c7bc79906ae6c2e9bf062f8c/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f9775a865597b3cc926ba3375fa692516c7415be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9775a865597b3cc926ba3375fa692516c7415be",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f9775a865597b3cc926ba3375fa692516c7415be"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 6,
      "deletions": 4
    },
    "files": [
      {
        "sha": "12a66ff38d95a77f959a8c3886b5f5f4cd3c5c15",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45c7439fed93dc31c7bc79906ae6c2e9bf062f8c/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45c7439fed93dc31c7bc79906ae6c2e9bf062f8c/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=45c7439fed93dc31c7bc79906ae6c2e9bf062f8c",
        "patch": "@@ -219,12 +219,13 @@ UniValue RPCConvertValues(const std::string &strMethod, const std::vector<std::s\n     for (unsigned int idx = 0; idx < strParams.size(); idx++) {\n         const std::string& strVal = strParams[idx];\n \n-        if (!rpcCvtTable.convert(strMethod, idx)) {\n+        UniValue json_value;\n+        if (!rpcCvtTable.convert(strMethod, idx) || !json_value.read(strVal)) {\n             // insert string value directly\n             params.push_back(strVal);\n         } else {\n             // parse string as JSON, insert bool/number/object/etc. value\n-            params.push_back(ParseNonRFCJSONValue(strVal));\n+            params.push_back(json_value);\n         }\n     }\n \n@@ -244,12 +245,13 @@ UniValue RPCConvertNamedValues(const std::string &strMethod, const std::vector<s\n         std::string name = s.substr(0, pos);\n         std::string value = s.substr(pos+1);\n \n-        if (!rpcCvtTable.convert(strMethod, name)) {\n+        UniValue json_value;\n+        if (!rpcCvtTable.convert(strMethod, name) || !json_value.read(value)) {\n             // insert string value directly\n             params.pushKV(name, value);\n         } else {\n             // parse string as JSON, insert bool/number/object/etc. value\n-            params.pushKV(name, ParseNonRFCJSONValue(value));\n+            params.pushKV(name, json_value);\n         }\n     }\n "
      }
    ]
  }
]