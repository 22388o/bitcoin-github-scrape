[
  {
    "sha": "d8304fd6cdce30a2b02dfeb23e3e742505c9f5a8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkODMwNGZkNmNkY2UzMGEyYjAyZGZlYjIzZTNlNzQyNTA1YzlmNWE4",
    "commit": {
      "author": {
        "name": "JITHIKA SAGAR",
        "email": "44131656+JITHIKASAGAR123@users.noreply.github.com",
        "date": "2019-10-18T19:58:33Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2019-10-18T19:58:33Z"
      },
      "message": "Data directory upgradation",
      "tree": {
        "sha": "f018ea4860bc1388cbaa60177ab8aeb774326cb2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f018ea4860bc1388cbaa60177ab8aeb774326cb2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d8304fd6cdce30a2b02dfeb23e3e742505c9f5a8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdqhlpCRBK7hj4Ov3rIwAAdHIIAAuFVSwW2981oIXC0WyFfp83\ne9Xht4RGoam7qntNgj/4O4IN/y12eUGAgKTmGDp5R3nBeTJOcozX3ttTE4+2iJ+n\ntF9k0Y1dmGgWYI6lRqT/uEmhtjfPzSOq7EIoF3ZU5duidjVIA1WRbXUqprKy5CFf\nM07PbCLQPoRbuIlKSDp00MFPr1RfFK4QYhg0RjOQ3DbU6UJc2SZebihCmSvIRfzM\nZnWGDlr7LoDyDZi87cRqxv6hIXHnyo/ZDh/IXK/ifmP0yFGG2xyTCmXZTSHvpMfX\nZ4EoiQR1al43Ebr9DR9jo08bsvyuDrIGmDsBYnReArQF/SmLmcqnBohJfCXpYiA=\n=6IUc\n-----END PGP SIGNATURE-----\n",
        "payload": "tree f018ea4860bc1388cbaa60177ab8aeb774326cb2\nparent ddc3cf26ff1272e905f31406d1f365a3c3c6bd9e\nauthor JITHIKA SAGAR <44131656+JITHIKASAGAR123@users.noreply.github.com> 1571428713 +0530\ncommitter GitHub <noreply@github.com> 1571428713 +0530\n\nData directory upgradation"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8304fd6cdce30a2b02dfeb23e3e742505c9f5a8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d8304fd6cdce30a2b02dfeb23e3e742505c9f5a8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8304fd6cdce30a2b02dfeb23e3e742505c9f5a8/comments",
    "author": {
      "login": "JITHIKASAGAR123",
      "id": 44131656,
      "node_id": "MDQ6VXNlcjQ0MTMxNjU2",
      "avatar_url": "https://avatars.githubusercontent.com/u/44131656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JITHIKASAGAR123",
      "html_url": "https://github.com/JITHIKASAGAR123",
      "followers_url": "https://api.github.com/users/JITHIKASAGAR123/followers",
      "following_url": "https://api.github.com/users/JITHIKASAGAR123/following{/other_user}",
      "gists_url": "https://api.github.com/users/JITHIKASAGAR123/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JITHIKASAGAR123/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JITHIKASAGAR123/subscriptions",
      "organizations_url": "https://api.github.com/users/JITHIKASAGAR123/orgs",
      "repos_url": "https://api.github.com/users/JITHIKASAGAR123/repos",
      "events_url": "https://api.github.com/users/JITHIKASAGAR123/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JITHIKASAGAR123/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ddc3cf26ff1272e905f31406d1f365a3c3c6bd9e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddc3cf26ff1272e905f31406d1f365a3c3c6bd9e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ddc3cf26ff1272e905f31406d1f365a3c3c6bd9e"
      }
    ],
    "stats": {
      "total": 132,
      "additions": 132,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b997c760257d8d30884aee313ab054caed8f4191",
        "filename": "feature_config_args.py",
        "status": "added",
        "additions": 132,
        "deletions": 0,
        "changes": 132,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8304fd6cdce30a2b02dfeb23e3e742505c9f5a8/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8304fd6cdce30a2b02dfeb23e3e742505c9f5a8/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/feature_config_args.py?ref=d8304fd6cdce30a2b02dfeb23e3e742505c9f5a8",
        "patch": "@@ -0,0 +1,132 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test various command line arguments and configuration file parameters.\"\"\"\n+\n+import os\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+\n+class ConfArgsTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def test_config_file_parser(self):\n+        # Assume node is stopped\n+\n+        inc_conf_file_path = os.path.join(self.nodes[0].datadir, 'include.conf')\n+        with open(os.path.join(self.nodes[0].datadir, 'bitcoin.conf'), 'a', encoding='utf-8') as conf:\n+            conf.write('includeconf={}\\n'.format(inc_conf_file_path))\n+\n+        self.nodes[0].assert_start_raises_init_error(\n+            expected_msg='Error: Error parsing command line arguments: Invalid parameter -dash_cli',\n+            extra_args=['-dash_cli=1'],\n+        )\n+        with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n+            conf.write('dash_conf=1\\n')\n+        with self.nodes[0].assert_debug_log(expected_msgs=['Ignoring unknown configuration value dash_conf']):\n+            self.start_node(0)\n+        self.stop_node(0)\n+\n+        with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n+            conf.write('-dash=1\\n')\n+        self.nodes[0].assert_start_raises_init_error(expected_msg='Error: Error reading configuration file: parse error on line 1: -dash=1, options in configuration file must be specified without leading -')\n+\n+        if self.is_wallet_compiled():\n+            with open(inc_conf_file_path, 'w', encoding='utf8') as conf:\n+                conf.write(\"wallet=foo\\n\")\n+            self.nodes[0].assert_start_raises_init_error(expected_msg='Error: Config setting for -wallet only applied on regtest network when in [regtest] section.')\n+\n+        with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n+            conf.write('regtest=0\\n') # mainnet\n+            conf.write('acceptnonstdtxn=1\\n')\n+        self.nodes[0].assert_start_raises_init_error(expected_msg='Error: acceptnonstdtxn is not currently supported for main chain')\n+\n+        with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n+            conf.write('nono\\n')\n+        self.nodes[0].assert_start_raises_init_error(expected_msg='Error: Error reading configuration file: parse error on line 1: nono, if you intended to specify a negated option, use nono=1 instead')\n+\n+        with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n+            conf.write('server=1\\nrpcuser=someuser\\nrpcpassword=some#pass')\n+        self.nodes[0].assert_start_raises_init_error(expected_msg='Error: Error reading configuration file: parse error on line 3, using # in rpcpassword can be ambiguous and should be avoided')\n+\n+        with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n+            conf.write('server=1\\nrpcuser=someuser\\nmain.rpcpassword=some#pass')\n+        self.nodes[0].assert_start_raises_init_error(expected_msg='Error: Error reading configuration file: parse error on line 3, using # in rpcpassword can be ambiguous and should be avoided')\n+\n+        with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n+            conf.write('server=1\\nrpcuser=someuser\\n[main]\\nrpcpassword=some#pass')\n+        self.nodes[0].assert_start_raises_init_error(expected_msg='Error: Error reading configuration file: parse error on line 4, using # in rpcpassword can be ambiguous and should be avoided')\n+\n+        inc_conf_file2_path = os.path.join(self.nodes[0].datadir, 'include2.conf')\n+        with open(os.path.join(self.nodes[0].datadir, 'bitcoin.conf'), 'a', encoding='utf-8') as conf:\n+            conf.write('includeconf={}\\n'.format(inc_conf_file2_path))\n+\n+        with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n+            conf.write('testnot.datadir=1\\n')\n+        with open(inc_conf_file2_path, 'w', encoding='utf-8') as conf:\n+            conf.write('[testnet]\\n')\n+        self.restart_node(0)\n+        self.nodes[0].stop_node(expected_stderr='Warning: ' + inc_conf_file_path + ':1 Section [testnot] is not recognized.' + os.linesep + 'Warning: ' + inc_conf_file2_path + ':1 Section [testnet] is not recognized.')\n+\n+        with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n+            conf.write('')  # clear\n+        with open(inc_conf_file2_path, 'w', encoding='utf-8') as conf:\n+            conf.write('')  # clear\n+\n+    def test_log_buffer(self):\n+        with self.nodes[0].assert_debug_log(expected_msgs=['Warning: parsed potentially confusing double-negative -connect=0']):\n+            self.start_node(0, extra_args=['-noconnect=0'])\n+        self.stop_node(0)\n+\n+    def run_test(self):\n+        self.stop_node(0)\n+\n+        self.test_log_buffer()\n+\n+        self.test_config_file_parser()\n+\n+        # Remove the -datadir argument so it doesn't override the config file\n+        self.nodes[0].args = [arg for arg in self.nodes[0].args if not arg.startswith(\"-datadir\")]\n+\n+        default_data_dir = self.nodes[0].datadir\n+        new_data_dir = os.path.join(default_data_dir, 'newdatadir')\n+        new_data_dir_2 = os.path.join(default_data_dir, 'newdatadir2')\n+\n+        # Check that using -datadir argument on non-existent directory fails\n+        self.nodes[0].datadir = new_data_dir\n+        self.nodes[0].assert_start_raises_init_error(['-datadir=' + new_data_dir], 'Error: Specified data directory \"' + new_data_dir + '\" does not exist.')\n+\n+        # Check that using non-existent datadir in conf file fails\n+        conf_file = os.path.join(default_data_dir, \"bitcoin.conf\")\n+\n+        # datadir needs to be set before [regtest] section\n+        conf_file_contents = open(conf_file, encoding='utf8').read()\n+        with open(conf_file, 'w', encoding='utf8') as f:\n+            f.write(\"datadir=\" + new_data_dir + \"\\n\")\n+            f.write(conf_file_contents)\n+\n+        self.nodes[0].assert_start_raises_init_error(['-conf=' + conf_file], 'Error: Error reading configuration file: specified data directory \"' + new_data_dir + '\" does not exist.')\n+\n+        # Create the directory and ensure the config file now works\n+        os.mkdir(new_data_dir)\n+        self.start_node(0, ['-conf='+conf_file, '-wallet=w1'])\n+        self.stop_node(0)\n+        assert os.path.exists(os.path.join(new_data_dir, 'regtest', 'blocks'))\n+        if self.is_wallet_compiled():\n+            assert os.path.exists(os.path.join(new_data_dir, 'regtest', 'wallets', 'w1'))\n+\n+        # Ensure command line argument overrides datadir in conf\n+        os.mkdir(new_data_dir_2)\n+        self.nodes[0].datadir = new_data_dir_2\n+        self.start_node(0, ['-datadir='+new_data_dir_2, '-conf='+conf_file, '-wallet=w2'])\n+        assert os.path.exists(os.path.join(new_data_dir_2, 'regtest', 'blocks'))\n+        if self.is_wallet_compiled():\n+            assert os.path.exists(os.path.join(new_data_dir_2, 'regtest', 'wallets', 'w2'))\n+\n+\n+if __name__ == '__main__':\n+    ConfArgsTest().main()"
      }
    ]
  }
]