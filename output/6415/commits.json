[
  {
    "sha": "cfc3dd34284357262bcc7eef2714a210891276c0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZmMzZGQzNDI4NDM1NzI2MmJjYzdlZWYyNzE0YTIxMDg5MTI3NmMw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-06-10T07:03:08Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-07-20T23:01:37Z"
      },
      "message": "Also remove pay-2-pubkey from watch when adding a priv key",
      "tree": {
        "sha": "5f1ccca3a6dc5a01e1a25d161903586d8b5112ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5f1ccca3a6dc5a01e1a25d161903586d8b5112ea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cfc3dd34284357262bcc7eef2714a210891276c0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfc3dd34284357262bcc7eef2714a210891276c0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cfc3dd34284357262bcc7eef2714a210891276c0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfc3dd34284357262bcc7eef2714a210891276c0/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6d6b11e793a2d1a106238a2838f5df1d3124217b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d6b11e793a2d1a106238a2838f5df1d3124217b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6d6b11e793a2d1a106238a2838f5df1d3124217b"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1d5aac7b3484f625ca166adfa0cc7ceb2b23169d",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfc3dd34284357262bcc7eef2714a210891276c0/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfc3dd34284357262bcc7eef2714a210891276c0/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=cfc3dd34284357262bcc7eef2714a210891276c0",
        "patch": "@@ -286,6 +286,11 @@ CScript GetScriptForDestination(const CTxDestination& dest)\n     return script;\n }\n \n+CScript GetScriptForRawPubKey(const CPubKey& pubKey)\n+{\n+    return CScript() << std::vector<unsigned char>(pubKey.begin(), pubKey.end()) << OP_CHECKSIG;\n+}\n+\n CScript GetScriptForMultisig(int nRequired, const std::vector<CPubKey>& keys)\n {\n     CScript script;"
      },
      {
        "sha": "9e17dac700b10a9f1b4a5b75b2e750c68ad4cbbb",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfc3dd34284357262bcc7eef2714a210891276c0/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfc3dd34284357262bcc7eef2714a210891276c0/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=cfc3dd34284357262bcc7eef2714a210891276c0",
        "patch": "@@ -73,6 +73,7 @@ bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)\n bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<CTxDestination>& addressRet, int& nRequiredRet);\n \n CScript GetScriptForDestination(const CTxDestination& dest);\n+CScript GetScriptForRawPubKey(const CPubKey& pubkey);\n CScript GetScriptForMultisig(int nRequired, const std::vector<CPubKey>& keys);\n \n #endif // BITCOIN_SCRIPT_STANDARD_H"
      },
      {
        "sha": "c118008633c366039c2b16f2ef086ee7e158d905",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfc3dd34284357262bcc7eef2714a210891276c0/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfc3dd34284357262bcc7eef2714a210891276c0/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=cfc3dd34284357262bcc7eef2714a210891276c0",
        "patch": "@@ -106,6 +106,9 @@ bool CWallet::AddKeyPubKey(const CKey& secret, const CPubKey &pubkey)\n     // check if we need to remove from watch-only\n     CScript script;\n     script = GetScriptForDestination(pubkey.GetID());\n+    if (HaveWatchOnly(script))\n+        RemoveWatchOnly(script);\n+    script = GetScriptForRawPubKey(pubkey);\n     if (HaveWatchOnly(script))\n         RemoveWatchOnly(script);\n "
      }
    ]
  },
  {
    "sha": "983d2d90af1b517bee51170d2ea059e68d09be35",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ODNkMmQ5MGFmMWI1MTdiZWU1MTE3MGQyZWEwNTllNjhkMDliZTM1",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-06-11T07:57:26Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-07-20T23:01:37Z"
      },
      "message": "Split up importaddress into helper functions",
      "tree": {
        "sha": "b841edc61897ad53d9cd5b83cc6e2ed08fddf100",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b841edc61897ad53d9cd5b83cc6e2ed08fddf100"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/983d2d90af1b517bee51170d2ea059e68d09be35",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/983d2d90af1b517bee51170d2ea059e68d09be35",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/983d2d90af1b517bee51170d2ea059e68d09be35",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/983d2d90af1b517bee51170d2ea059e68d09be35/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cfc3dd34284357262bcc7eef2714a210891276c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfc3dd34284357262bcc7eef2714a210891276c0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cfc3dd34284357262bcc7eef2714a210891276c0"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 34,
      "deletions": 33
    },
    "files": [
      {
        "sha": "f56ff65f83c138b58fae1046748c7e7e897d6005",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 33,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/983d2d90af1b517bee51170d2ea059e68d09be35/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/983d2d90af1b517bee51170d2ea059e68d09be35/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=983d2d90af1b517bee51170d2ea059e68d09be35",
        "patch": "@@ -146,6 +146,26 @@ UniValue importprivkey(const UniValue& params, bool fHelp)\n     return NullUniValue;\n }\n \n+void ImportScript(const CScript& script)\n+{\n+    if (::IsMine(*pwalletMain, script) == ISMINE_SPENDABLE)\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n+\n+    pwalletMain->MarkDirty();\n+\n+    if (!pwalletMain->HaveWatchOnly(script) && !pwalletMain->AddWatchOnly(script))\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+}\n+\n+void ImportAddress(const CBitcoinAddress& address, const string& strLabel)\n+{\n+    CScript script = GetScriptForDestination(address.Get());\n+    ImportScript(script, false);\n+    // add to address book or update label\n+    if (address.IsValid())\n+        pwalletMain->SetAddressBook(address.Get(), strLabel, \"receive\");\n+}\n+\n UniValue importaddress(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n@@ -172,20 +192,6 @@ UniValue importaddress(const UniValue& params, bool fHelp)\n     if (fPruneMode)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Importing addresses is disabled in pruned mode\");\n \n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n-\n-    CScript script;\n-\n-    CBitcoinAddress address(params[0].get_str());\n-    if (address.IsValid()) {\n-        script = GetScriptForDestination(address.Get());\n-    } else if (IsHex(params[0].get_str())) {\n-        std::vector<unsigned char> data(ParseHex(params[0].get_str()));\n-        script = CScript(data.begin(), data.end());\n-    } else {\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address or script\");\n-    }\n-\n     string strLabel = \"\";\n     if (params.size() > 1)\n         strLabel = params[1].get_str();\n@@ -195,28 +201,23 @@ UniValue importaddress(const UniValue& params, bool fHelp)\n     if (params.size() > 2)\n         fRescan = params[2].get_bool();\n \n-    {\n-        if (::IsMine(*pwalletMain, script) == ISMINE_SPENDABLE)\n-            throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n \n-        // add to address book or update label\n-        if (address.IsValid())\n-            pwalletMain->SetAddressBook(address.Get(), strLabel, \"receive\");\n-\n-        // Don't throw error in case an address is already there\n-        if (pwalletMain->HaveWatchOnly(script))\n-            return NullUniValue;\n-\n-        pwalletMain->MarkDirty();\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-        if (!pwalletMain->AddWatchOnly(script))\n-            throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+    CBitcoinAddress address(params[0].get_str());\n+    if (address.IsValid()) {\n+        ImportAddress(address, strLabel);\n+    } else if (IsHex(params[0].get_str())) {\n+        std::vector<unsigned char> data(ParseHex(params[0].get_str()));\n+        ImportScript(CScript(data.begin(), data.end()));\n+    } else {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address or script\");\n+    }\n \n-        if (fRescan)\n-        {\n-            pwalletMain->ScanForWalletTransactions(chainActive.Genesis(), true);\n-            pwalletMain->ReacceptWalletTransactions();\n-        }\n+    if (fRescan)\n+    {\n+        pwalletMain->ScanForWalletTransactions(chainActive.Genesis(), true);\n+        pwalletMain->ReacceptWalletTransactions();\n     }\n \n     return NullUniValue;"
      }
    ]
  },
  {
    "sha": "907a425aa5b8fd90cf1d28215712a309e934b364",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MDdhNDI1YWE1YjhmZDkwY2YxZDI4MjE1NzEyYTMwOWU5MzRiMzY0",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-06-11T07:57:50Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-07-20T23:01:37Z"
      },
      "message": "Add p2sh option to importaddress to import redeemScripts",
      "tree": {
        "sha": "f58579e333f979eaf3e44f710228260fde9f8439",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f58579e333f979eaf3e44f710228260fde9f8439"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/907a425aa5b8fd90cf1d28215712a309e934b364",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/907a425aa5b8fd90cf1d28215712a309e934b364",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/907a425aa5b8fd90cf1d28215712a309e934b364",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/907a425aa5b8fd90cf1d28215712a309e934b364/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "983d2d90af1b517bee51170d2ea059e68d09be35",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/983d2d90af1b517bee51170d2ea059e68d09be35",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/983d2d90af1b517bee51170d2ea059e68d09be35"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 31,
      "deletions": 6
    },
    "files": [
      {
        "sha": "b30a6bc9d1c6debfb92c8bf8ed65b76a05538ecc",
        "filename": "qa/rpc-tests/listtransactions.py",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/907a425aa5b8fd90cf1d28215712a309e934b364/qa/rpc-tests/listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/907a425aa5b8fd90cf1d28215712a309e934b364/qa/rpc-tests/listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/listtransactions.py?ref=907a425aa5b8fd90cf1d28215712a309e934b364",
        "patch": "@@ -93,6 +93,16 @@ def run_test(self):\n                            {\"category\":\"receive\",\"amount\":Decimal(\"0.44\")},\n                            {\"txid\":txid, \"account\" : \"toself\"} )\n \n+        multisig = self.nodes[1].createmultisig(1, [self.nodes[1].getnewaddress()])\n+        self.nodes[0].importaddress(multisig[\"redeemScript\"], \"watchonly\", False, True)\n+        txid = self.nodes[1].sendtoaddress(multisig[\"address\"], 0.1)\n+        self.nodes[1].generate(1)\n+        self.sync_all()\n+        assert(len(self.nodes[0].listtransactions(\"watchonly\", 100, 0, False)) == 0)\n+        check_array_result(self.nodes[0].listtransactions(\"watchonly\", 100, 0, True),\n+                           {\"category\":\"receive\",\"amount\":Decimal(\"0.1\")},\n+                           {\"txid\":txid, \"account\" : \"watchonly\"} )\n+\n if __name__ == '__main__':\n     ListTransactionsTest().main()\n "
      },
      {
        "sha": "450f33b3eecd4e5c3a1324b9a92e675a49c7049c",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/907a425aa5b8fd90cf1d28215712a309e934b364/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/907a425aa5b8fd90cf1d28215712a309e934b364/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=907a425aa5b8fd90cf1d28215712a309e934b364",
        "patch": "@@ -87,6 +87,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"lockunspent\", 1 },\n     { \"importprivkey\", 2 },\n     { \"importaddress\", 2 },\n+    { \"importaddress\", 3 },\n     { \"verifychain\", 0 },\n     { \"verifychain\", 1 },\n     { \"keypoolrefill\", 0 },"
      },
      {
        "sha": "3493efc8fec941d73f2450e3b31971abf0f1581a",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 6,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/907a425aa5b8fd90cf1d28215712a309e934b364/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/907a425aa5b8fd90cf1d28215712a309e934b364/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=907a425aa5b8fd90cf1d28215712a309e934b364",
        "patch": "@@ -146,21 +146,28 @@ UniValue importprivkey(const UniValue& params, bool fHelp)\n     return NullUniValue;\n }\n \n-void ImportScript(const CScript& script)\n+void ImportAddress(const CBitcoinAddress& address, const string& strLabel);\n+void ImportScript(const CScript& script, const string& strLabel, bool isRedeemScript)\n {\n-    if (::IsMine(*pwalletMain, script) == ISMINE_SPENDABLE)\n+    if (!isRedeemScript && ::IsMine(*pwalletMain, script) == ISMINE_SPENDABLE)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n \n     pwalletMain->MarkDirty();\n \n     if (!pwalletMain->HaveWatchOnly(script) && !pwalletMain->AddWatchOnly(script))\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+\n+    if (isRedeemScript) {\n+        if (!pwalletMain->HaveCScript(script) && !pwalletMain->AddCScript(script))\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh redeemScript to wallet\");\n+        ImportAddress(CBitcoinAddress(CScriptID(script)), strLabel);\n+    }\n }\n \n void ImportAddress(const CBitcoinAddress& address, const string& strLabel)\n {\n     CScript script = GetScriptForDestination(address.Get());\n-    ImportScript(script, false);\n+    ImportScript(script, strLabel, false);\n     // add to address book or update label\n     if (address.IsValid())\n         pwalletMain->SetAddressBook(address.Get(), strLabel, \"receive\");\n@@ -171,14 +178,15 @@ UniValue importaddress(const UniValue& params, bool fHelp)\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n     \n-    if (fHelp || params.size() < 1 || params.size() > 3)\n+    if (fHelp || params.size() < 1 || params.size() > 4)\n         throw runtime_error(\n-            \"importaddress \\\"address\\\" ( \\\"label\\\" rescan )\\n\"\n+            \"importaddress \\\"address\\\" ( \\\"label\\\" rescan p2sh )\\n\"\n             \"\\nAdds an address or script (in hex) that can be watched as if it were in your wallet but cannot be used to spend.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"address\\\"          (string, required) The address\\n\"\n             \"2. \\\"label\\\"            (string, optional, default=\\\"\\\") An optional label\\n\"\n             \"3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions\\n\"\n+            \"4. p2sh                 (boolean, optional, default=false) Add the P2SH version of the script as well\\n\"\n             \"\\nNote: This call can take minutes to complete if rescan is true.\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nImport an address with rescan\\n\"\n@@ -201,15 +209,21 @@ UniValue importaddress(const UniValue& params, bool fHelp)\n     if (params.size() > 2)\n         fRescan = params[2].get_bool();\n \n+    // Whether to import a p2sh version, too\n+    bool fP2SH = false;\n+    if (params.size() > 3)\n+        fP2SH = params[3].get_bool();\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     CBitcoinAddress address(params[0].get_str());\n     if (address.IsValid()) {\n+        if (fP2SH)\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Cannot use the p2sh flag with an address - use a script instead\");\n         ImportAddress(address, strLabel);\n     } else if (IsHex(params[0].get_str())) {\n         std::vector<unsigned char> data(ParseHex(params[0].get_str()));\n-        ImportScript(CScript(data.begin(), data.end()));\n+        ImportScript(CScript(data.begin(), data.end()), strLabel, fP2SH);\n     } else {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address or script\");\n     }"
      }
    ]
  },
  {
    "sha": "a1d7df32360605724d8f0ea4b7aebfa7aea24c97",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMWQ3ZGYzMjM2MDYwNTcyNGQ4ZjBlYTRiN2FlYmZhN2FlYTI0Yzk3",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-07-10T05:47:36Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-07-20T23:01:37Z"
      },
      "message": "Add importpubkey method to import a watch-only pubkey",
      "tree": {
        "sha": "e14b0b053ea51dc07324671cc5c1d20b5abb9866",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e14b0b053ea51dc07324671cc5c1d20b5abb9866"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a1d7df32360605724d8f0ea4b7aebfa7aea24c97",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1d7df32360605724d8f0ea4b7aebfa7aea24c97",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a1d7df32360605724d8f0ea4b7aebfa7aea24c97",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1d7df32360605724d8f0ea4b7aebfa7aea24c97/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "907a425aa5b8fd90cf1d28215712a309e934b364",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/907a425aa5b8fd90cf1d28215712a309e934b364",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/907a425aa5b8fd90cf1d28215712a309e934b364"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 60,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0c8e6d6d669a4993b73355ee0cfda27694275ae0",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1d7df32360605724d8f0ea4b7aebfa7aea24c97/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1d7df32360605724d8f0ea4b7aebfa7aea24c97/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=a1d7df32360605724d8f0ea4b7aebfa7aea24c97",
        "patch": "@@ -88,6 +88,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"importprivkey\", 2 },\n     { \"importaddress\", 2 },\n     { \"importaddress\", 3 },\n+    { \"importpubkey\", 2 },\n     { \"verifychain\", 0 },\n     { \"verifychain\", 1 },\n     { \"keypoolrefill\", 0 },"
      },
      {
        "sha": "158603b14056795ba8f8e985bbbb57f486fb1db8",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1d7df32360605724d8f0ea4b7aebfa7aea24c97/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1d7df32360605724d8f0ea4b7aebfa7aea24c97/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=a1d7df32360605724d8f0ea4b7aebfa7aea24c97",
        "patch": "@@ -359,6 +359,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"wallet\",             \"importprivkey\",          &importprivkey,          true  },\n     { \"wallet\",             \"importwallet\",           &importwallet,           true  },\n     { \"wallet\",             \"importaddress\",          &importaddress,          true  },\n+    { \"wallet\",             \"importpubkey\",           &importpubkey,           true  },\n     { \"wallet\",             \"keypoolrefill\",          &keypoolrefill,          true  },\n     { \"wallet\",             \"listaccounts\",           &listaccounts,           false },\n     { \"wallet\",             \"listaddressgroupings\",   &listaddressgroupings,   false },"
      },
      {
        "sha": "3a71fd510f0690aac97d3dabefe9da3393e439c5",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1d7df32360605724d8f0ea4b7aebfa7aea24c97/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1d7df32360605724d8f0ea4b7aebfa7aea24c97/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=a1d7df32360605724d8f0ea4b7aebfa7aea24c97",
        "patch": "@@ -161,6 +161,7 @@ extern UniValue clearbanned(const UniValue& params, bool fHelp);\n extern UniValue dumpprivkey(const UniValue& params, bool fHelp); // in rpcdump.cpp\n extern UniValue importprivkey(const UniValue& params, bool fHelp);\n extern UniValue importaddress(const UniValue& params, bool fHelp);\n+extern UniValue importpubkey(const UniValue& params, bool fHelp);\n extern UniValue dumpwallet(const UniValue& params, bool fHelp);\n extern UniValue importwallet(const UniValue& params, bool fHelp);\n "
      },
      {
        "sha": "7efabbfeb6b5f2bb29c3c8be5ec31aa5e788529f",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 57,
        "deletions": 0,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1d7df32360605724d8f0ea4b7aebfa7aea24c97/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1d7df32360605724d8f0ea4b7aebfa7aea24c97/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=a1d7df32360605724d8f0ea4b7aebfa7aea24c97",
        "patch": "@@ -237,6 +237,63 @@ UniValue importaddress(const UniValue& params, bool fHelp)\n     return NullUniValue;\n }\n \n+UniValue importpubkey(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() < 1 || params.size() > 4)\n+        throw runtime_error(\n+            \"importpubkey \\\"pubkey\\\" ( \\\"label\\\" rescan )\\n\"\n+            \"\\nAdds a public key (in hex) that can be watched as if it were in your wallet but cannot be used to spend.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"pubkey\\\"           (string, required) The hex-encoded public key\\n\"\n+            \"2. \\\"label\\\"            (string, optional, default=\\\"\\\") An optional label\\n\"\n+            \"3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions\\n\"\n+            \"\\nNote: This call can take minutes to complete if rescan is true.\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nImport a public key with rescan\\n\"\n+            + HelpExampleCli(\"importpubkey\", \"\\\"mypubkey\\\"\") +\n+            \"\\nImport using a label without rescan\\n\"\n+            + HelpExampleCli(\"importpubkey\", \"\\\"mypubkey\\\" \\\"testing\\\" false\") +\n+            \"\\nAs a JSON-RPC call\\n\"\n+            + HelpExampleRpc(\"importpubkey\", \"\\\"mypubkey\\\", \\\"testing\\\", false\")\n+        );\n+\n+    if (fPruneMode)\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Importing public keys is disabled in pruned mode\");\n+\n+    string strLabel = \"\";\n+    if (params.size() > 1)\n+        strLabel = params[1].get_str();\n+\n+    // Whether to perform rescan after import\n+    bool fRescan = true;\n+    if (params.size() > 2)\n+        fRescan = params[2].get_bool();\n+\n+    if (!IsHex(params[0].get_str()))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey must be a hex string\");\n+    std::vector<unsigned char> data(ParseHex(params[0].get_str()));\n+    CPubKey pubKey(data.begin(), data.end());\n+    if (!pubKey.IsFullyValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey is not a valid public key\");\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    ImportAddress(CBitcoinAddress(pubKey.GetID()), strLabel);\n+    ImportScript(GetScriptForRawPubKey(pubKey), strLabel, false);\n+\n+    if (fRescan)\n+    {\n+        pwalletMain->ScanForWalletTransactions(chainActive.Genesis(), true);\n+        pwalletMain->ReacceptWalletTransactions();\n+    }\n+\n+    return NullUniValue;\n+}\n+\n+\n UniValue importwallet(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))"
      }
    ]
  },
  {
    "sha": "5c17059872c9b63a1e05c7aa8aea32a03c3ec73a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YzE3MDU5ODcyYzliNjNhMWUwNWM3YWE4YWVhMzJhMDNjM2VjNzNh",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-07-10T05:47:47Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-07-20T23:01:37Z"
      },
      "message": "Update importaddress help to push its use to script-only",
      "tree": {
        "sha": "e6556648ade1bc087e6639d83590b9bf6ec5da00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e6556648ade1bc087e6639d83590b9bf6ec5da00"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5c17059872c9b63a1e05c7aa8aea32a03c3ec73a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c17059872c9b63a1e05c7aa8aea32a03c3ec73a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5c17059872c9b63a1e05c7aa8aea32a03c3ec73a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c17059872c9b63a1e05c7aa8aea32a03c3ec73a/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a1d7df32360605724d8f0ea4b7aebfa7aea24c97",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1d7df32360605724d8f0ea4b7aebfa7aea24c97",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a1d7df32360605724d8f0ea4b7aebfa7aea24c97"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 7,
      "deletions": 6
    },
    "files": [
      {
        "sha": "2c4f1f24350253ed0c495382409154a9d813954b",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c17059872c9b63a1e05c7aa8aea32a03c3ec73a/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c17059872c9b63a1e05c7aa8aea32a03c3ec73a/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=5c17059872c9b63a1e05c7aa8aea32a03c3ec73a",
        "patch": "@@ -181,20 +181,21 @@ UniValue importaddress(const UniValue& params, bool fHelp)\n     if (fHelp || params.size() < 1 || params.size() > 4)\n         throw runtime_error(\n             \"importaddress \\\"address\\\" ( \\\"label\\\" rescan p2sh )\\n\"\n-            \"\\nAdds an address or script (in hex) that can be watched as if it were in your wallet but cannot be used to spend.\\n\"\n+            \"\\nAdds a script (in hex) or address that can be watched as if it were in your wallet but cannot be used to spend.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"address\\\"          (string, required) The address\\n\"\n+            \"1. \\\"script\\\"           (string, required) The hex-encoded script (or address)\\n\"\n             \"2. \\\"label\\\"            (string, optional, default=\\\"\\\") An optional label\\n\"\n             \"3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions\\n\"\n             \"4. p2sh                 (boolean, optional, default=false) Add the P2SH version of the script as well\\n\"\n             \"\\nNote: This call can take minutes to complete if rescan is true.\\n\"\n+            \"If you have the full public key, you should call importpublickey instead of this.\\n\"\n             \"\\nExamples:\\n\"\n-            \"\\nImport an address with rescan\\n\"\n-            + HelpExampleCli(\"importaddress\", \"\\\"myaddress\\\"\") +\n+            \"\\nImport a script with rescan\\n\"\n+            + HelpExampleCli(\"importaddress\", \"\\\"myscript\\\"\") +\n             \"\\nImport using a label without rescan\\n\"\n-            + HelpExampleCli(\"importaddress\", \"\\\"myaddress\\\" \\\"testing\\\" false\") +\n+            + HelpExampleCli(\"importaddress\", \"\\\"myscript\\\" \\\"testing\\\" false\") +\n             \"\\nAs a JSON-RPC call\\n\"\n-            + HelpExampleRpc(\"importaddress\", \"\\\"myaddress\\\", \\\"testing\\\", false\")\n+            + HelpExampleRpc(\"importaddress\", \"\\\"myscript\\\", \\\"testing\\\", false\")\n         );\n \n     if (fPruneMode)"
      }
    ]
  },
  {
    "sha": "d3354c52d7c0c6446cad4074c1d0e04bb1b3d84e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMzM1NGM1MmQ3YzBjNjQ0NmNhZDQwNzRjMWQwZTA0YmIxYjNkODRl",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-06-10T06:36:36Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-07-20T23:01:37Z"
      },
      "message": "Add have-pubkey distinction to ISMINE flags\n\nThis indicates that, eg, we have a public key for a key which may\nbe used as a pay-to-pubkey-hash. It generally means that we can\ncreate a valid scriptSig except for missing private key(s) with\nwhich to create signatures.",
      "tree": {
        "sha": "610f23431c46b756b040b40feb40bb68385115a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/610f23431c46b756b040b40feb40bb68385115a4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d3354c52d7c0c6446cad4074c1d0e04bb1b3d84e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3354c52d7c0c6446cad4074c1d0e04bb1b3d84e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d3354c52d7c0c6446cad4074c1d0e04bb1b3d84e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3354c52d7c0c6446cad4074c1d0e04bb1b3d84e/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5c17059872c9b63a1e05c7aa8aea32a03c3ec73a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c17059872c9b63a1e05c7aa8aea32a03c3ec73a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5c17059872c9b63a1e05c7aa8aea32a03c3ec73a"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 18,
      "deletions": 10
    },
    "files": [
      {
        "sha": "801c6c62d2b609e2be86fb28f85ae271685893a4",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3354c52d7c0c6446cad4074c1d0e04bb1b3d84e/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3354c52d7c0c6446cad4074c1d0e04bb1b3d84e/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=d3354c52d7c0c6446cad4074c1d0e04bb1b3d84e",
        "patch": "@@ -165,7 +165,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n \n         if (fAllFromMe)\n         {\n-            if(fAllFromMe == ISMINE_WATCH_ONLY)\n+            if(fAllFromMe & ISMINE_WATCH_ONLY)\n                 strHTML += \"<b>\" + tr(\"From\") + \":</b> \" + tr(\"watch-only\") + \"<br>\";\n \n             //\n@@ -190,7 +190,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n                         strHTML += GUIUtil::HtmlEscape(CBitcoinAddress(address).ToString());\n                         if(toSelf == ISMINE_SPENDABLE)\n                             strHTML += \" (own address)\";\n-                        else if(toSelf == ISMINE_WATCH_ONLY)\n+                        else if(toSelf & ISMINE_WATCH_ONLY)\n                             strHTML += \" (watch-only)\";\n                         strHTML += \"<br>\";\n                     }"
      },
      {
        "sha": "d8623daf5dba05171a2ec5f32f3aba705d4847ec",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3354c52d7c0c6446cad4074c1d0e04bb1b3d84e/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3354c52d7c0c6446cad4074c1d0e04bb1b3d84e/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=d3354c52d7c0c6446cad4074c1d0e04bb1b3d84e",
        "patch": "@@ -56,7 +56,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n                 CTxDestination address;\n                 sub.idx = parts.size(); // sequence number\n                 sub.credit = txout.nValue;\n-                sub.involvesWatchAddress = mine == ISMINE_WATCH_ONLY;\n+                sub.involvesWatchAddress = mine & ISMINE_WATCH_ONLY;\n                 if (ExtractDestination(txout.scriptPubKey, address) && IsMine(*wallet, address))\n                 {\n                     // Received by Bitcoin Address\n@@ -86,15 +86,15 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n         BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n         {\n             isminetype mine = wallet->IsMine(txin);\n-            if(mine == ISMINE_WATCH_ONLY) involvesWatchAddress = true;\n+            if(mine & ISMINE_WATCH_ONLY) involvesWatchAddress = true;\n             if(fAllFromMe > mine) fAllFromMe = mine;\n         }\n \n         isminetype fAllToMe = ISMINE_SPENDABLE;\n         BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n         {\n             isminetype mine = wallet->IsMine(txout);\n-            if(mine == ISMINE_WATCH_ONLY) involvesWatchAddress = true;\n+            if(mine & ISMINE_WATCH_ONLY) involvesWatchAddress = true;\n             if(fAllToMe > mine) fAllToMe = mine;\n         }\n "
      },
      {
        "sha": "0303cbb2fb5d86ecd27065e15ed03871370f8591",
        "filename": "src/wallet/wallet_ismine.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3354c52d7c0c6446cad4074c1d0e04bb1b3d84e/src/wallet/wallet_ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3354c52d7c0c6446cad4074c1d0e04bb1b3d84e/src/wallet/wallet_ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet_ismine.cpp?ref=d3354c52d7c0c6446cad4074c1d0e04bb1b3d84e",
        "patch": "@@ -9,6 +9,7 @@\n #include \"keystore.h\"\n #include \"script/script.h\"\n #include \"script/standard.h\"\n+#include \"script/sign.h\"\n \n #include <boost/foreach.hpp>\n \n@@ -40,7 +41,7 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n     txnouttype whichType;\n     if (!Solver(scriptPubKey, whichType, vSolutions)) {\n         if (keystore.HaveWatchOnly(scriptPubKey))\n-            return ISMINE_WATCH_ONLY;\n+            return ISMINE_WATCH_NOPUBKEY;\n         return ISMINE_NO;\n     }\n \n@@ -85,7 +86,10 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n     }\n     }\n \n-    if (keystore.HaveWatchOnly(scriptPubKey))\n-        return ISMINE_WATCH_ONLY;\n+    if (keystore.HaveWatchOnly(scriptPubKey)) {\n+        // TODO: This could be optimized some by doing some work after the above solver\n+        CScript scriptSig;\n+        return ProduceSignature(DummySignatureCreator(&keystore), scriptPubKey, scriptSig) ? ISMINE_WATCH_PUBKEY : ISMINE_WATCH_NOPUBKEY;\n+    }\n     return ISMINE_NO;\n }"
      },
      {
        "sha": "12afad1751b1b8866bdecdd8e48775b04e31c18b",
        "filename": "src/wallet/wallet_ismine.h",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3354c52d7c0c6446cad4074c1d0e04bb1b3d84e/src/wallet/wallet_ismine.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3354c52d7c0c6446cad4074c1d0e04bb1b3d84e/src/wallet/wallet_ismine.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet_ismine.h?ref=d3354c52d7c0c6446cad4074c1d0e04bb1b3d84e",
        "patch": "@@ -16,8 +16,12 @@ class CScript;\n enum isminetype\n {\n     ISMINE_NO = 0,\n-    ISMINE_WATCH_ONLY = 1,\n-    ISMINE_SPENDABLE = 2,\n+    //! Indicates that we dont know how to create a scriptSig that would solve this if we were given the appropriate private keys\n+    ISMINE_WATCH_NOPUBKEY = 1,\n+    //! Indicates that we know how to create a scriptSig that would solve this if we were given the appropriate private keys\n+    ISMINE_WATCH_PUBKEY = 2,\n+    ISMINE_WATCH_ONLY = ISMINE_WATCH_NOPUBKEY | ISMINE_WATCH_PUBKEY,\n+    ISMINE_SPENDABLE = 4,\n     ISMINE_ALL = ISMINE_WATCH_ONLY | ISMINE_SPENDABLE\n };\n /** used for bitflags of isminetype */"
      }
    ]
  },
  {
    "sha": "f5813bdd3eb93a2a8d7ba01989eef5b299fcbca4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNTgxM2JkZDNlYjkzYTJhOGQ3YmEwMTk4OWVlZjViMjk5ZmNiY2E0",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-06-10T08:04:08Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-07-20T23:01:37Z"
      },
      "message": "Add logic to track pubkeys as watch-only, not just scripts",
      "tree": {
        "sha": "7830024c8e7ab4a638ee534b5bab1b190010c2ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7830024c8e7ab4a638ee534b5bab1b190010c2ee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f5813bdd3eb93a2a8d7ba01989eef5b299fcbca4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5813bdd3eb93a2a8d7ba01989eef5b299fcbca4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f5813bdd3eb93a2a8d7ba01989eef5b299fcbca4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5813bdd3eb93a2a8d7ba01989eef5b299fcbca4/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d3354c52d7c0c6446cad4074c1d0e04bb1b3d84e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3354c52d7c0c6446cad4074c1d0e04bb1b3d84e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d3354c52d7c0c6446cad4074c1d0e04bb1b3d84e"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 49,
      "deletions": 10
    },
    "files": [
      {
        "sha": "cf49ba83ade40e9c77e454dff13aa2ee39afb167",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 6,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5813bdd3eb93a2a8d7ba01989eef5b299fcbca4/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5813bdd3eb93a2a8d7ba01989eef5b299fcbca4/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=f5813bdd3eb93a2a8d7ba01989eef5b299fcbca4",
        "patch": "@@ -6,23 +6,30 @@\n #include \"keystore.h\"\n \n #include \"key.h\"\n+#include \"pubkey.h\"\n #include \"util.h\"\n \n #include <boost/foreach.hpp>\n \n-bool CKeyStore::GetPubKey(const CKeyID &address, CPubKey &vchPubKeyOut) const\n+bool CKeyStore::AddKey(const CKey &key) {\n+    return AddKeyPubKey(key, key.GetPubKey());\n+}\n+\n+bool CBasicKeyStore::GetPubKey(const CKeyID &address, CPubKey &vchPubKeyOut) const\n {\n     CKey key;\n-    if (!GetKey(address, key))\n+    if (!GetKey(address, key)) {\n+        WatchKeyMap::const_iterator it = mapWatchKeys.find(address);\n+        if (it != mapWatchKeys.end()) {\n+            vchPubKeyOut = it->second;\n+            return true;\n+        }\n         return false;\n+    }\n     vchPubKeyOut = key.GetPubKey();\n     return true;\n }\n \n-bool CKeyStore::AddKey(const CKey &key) {\n-    return AddKeyPubKey(key, key.GetPubKey());\n-}\n-\n bool CBasicKeyStore::AddKeyPubKey(const CKey& key, const CPubKey &pubkey)\n {\n     LOCK(cs_KeyStore);\n@@ -58,17 +65,39 @@ bool CBasicKeyStore::GetCScript(const CScriptID &hash, CScript& redeemScriptOut)\n     return false;\n }\n \n+static bool ExtractPubKey(const CScript &dest, CPubKey& pubKeyOut)\n+{\n+    //TODO: Use Solver to extract this?\n+    CScript::const_iterator pc = dest.begin();\n+    opcodetype opcode;\n+    std::vector<unsigned char> vch;\n+    if (!dest.GetOp(pc, opcode, vch) || vch.size() < 33 || vch.size() > 65)\n+        return false;\n+    pubKeyOut = CPubKey(vch);\n+    if (!pubKeyOut.IsFullyValid())\n+        return false;\n+    if (!dest.GetOp(pc, opcode, vch) || opcode != OP_CHECKSIG || dest.GetOp(pc, opcode, vch))\n+        return false;\n+    return true;\n+}\n+\n bool CBasicKeyStore::AddWatchOnly(const CScript &dest)\n {\n     LOCK(cs_KeyStore);\n     setWatchOnly.insert(dest);\n+    CPubKey pubKey;\n+    if (ExtractPubKey(dest, pubKey))\n+        mapWatchKeys[pubKey.GetID()] = pubKey;\n     return true;\n }\n \n bool CBasicKeyStore::RemoveWatchOnly(const CScript &dest)\n {\n     LOCK(cs_KeyStore);\n     setWatchOnly.erase(dest);\n+    CPubKey pubKey;\n+    if (ExtractPubKey(dest, pubKey))\n+        mapWatchKeys.erase(pubKey.GetID());\n     return true;\n }\n "
      },
      {
        "sha": "b917bf20b4c1d4bce2e8ca9cab2afa729ae4ff2e",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5813bdd3eb93a2a8d7ba01989eef5b299fcbca4/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5813bdd3eb93a2a8d7ba01989eef5b299fcbca4/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=f5813bdd3eb93a2a8d7ba01989eef5b299fcbca4",
        "patch": "@@ -32,7 +32,7 @@ class CKeyStore\n     virtual bool HaveKey(const CKeyID &address) const =0;\n     virtual bool GetKey(const CKeyID &address, CKey& keyOut) const =0;\n     virtual void GetKeys(std::set<CKeyID> &setAddress) const =0;\n-    virtual bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const;\n+    virtual bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const =0;\n \n     //! Support for BIP 0013 : see https://github.com/bitcoin/bips/blob/master/bip-0013.mediawiki\n     virtual bool AddCScript(const CScript& redeemScript) =0;\n@@ -47,6 +47,7 @@ class CKeyStore\n };\n \n typedef std::map<CKeyID, CKey> KeyMap;\n+typedef std::map<CKeyID, CPubKey> WatchKeyMap;\n typedef std::map<CScriptID, CScript > ScriptMap;\n typedef std::set<CScript> WatchOnlySet;\n \n@@ -55,11 +56,13 @@ class CBasicKeyStore : public CKeyStore\n {\n protected:\n     KeyMap mapKeys;\n+    WatchKeyMap mapWatchKeys;\n     ScriptMap mapScripts;\n     WatchOnlySet setWatchOnly;\n \n public:\n     bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey);\n+    bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const;\n     bool HaveKey(const CKeyID &address) const\n     {\n         bool result;"
      },
      {
        "sha": "34da38285f21008975df31fad80414f4cca28332",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5813bdd3eb93a2a8d7ba01989eef5b299fcbca4/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5813bdd3eb93a2a8d7ba01989eef5b299fcbca4/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=f5813bdd3eb93a2a8d7ba01989eef5b299fcbca4",
        "patch": "@@ -752,10 +752,9 @@ void SendCoinsDialog::coinControlChangeEdited(const QString& text)\n         }\n         else // Valid address\n         {\n-            CPubKey pubkey;\n             CKeyID keyid;\n             addr.GetKeyID(keyid);\n-            if (!model->getPubKey(keyid, pubkey)) // Unknown change address\n+            if (!model->havePrivKey(keyid)) // Unknown change address\n             {\n                 ui->labelCoinControlChangeLabel->setText(tr(\"Warning: Unknown change address\"));\n             }"
      },
      {
        "sha": "4e3d97fc426d212efe12d8e6d699e7ff38f38878",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5813bdd3eb93a2a8d7ba01989eef5b299fcbca4/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5813bdd3eb93a2a8d7ba01989eef5b299fcbca4/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=f5813bdd3eb93a2a8d7ba01989eef5b299fcbca4",
        "patch": "@@ -554,6 +554,11 @@ bool WalletModel::getPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const\n     return wallet->GetPubKey(address, vchPubKeyOut);\n }\n \n+bool WalletModel::havePrivKey(const CKeyID &address) const\n+{\n+    return wallet->HaveKey(address);\n+}\n+\n // returns a list of COutputs from COutPoints\n void WalletModel::getOutputs(const std::vector<COutPoint>& vOutpoints, std::vector<COutput>& vOutputs)\n {"
      },
      {
        "sha": "1c1684b278dae5e76117d04593d75209e9bb0004",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5813bdd3eb93a2a8d7ba01989eef5b299fcbca4/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5813bdd3eb93a2a8d7ba01989eef5b299fcbca4/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=f5813bdd3eb93a2a8d7ba01989eef5b299fcbca4",
        "patch": "@@ -186,6 +186,7 @@ class WalletModel : public QObject\n     UnlockContext requestUnlock();\n \n     bool getPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const;\n+    bool havePrivKey(const CKeyID &address) const;\n     void getOutputs(const std::vector<COutPoint>& vOutpoints, std::vector<COutput>& vOutputs);\n     bool isSpent(const COutPoint& outpoint) const;\n     void listCoins(std::map<QString, std::vector<COutput> >& mapCoins) const;"
      },
      {
        "sha": "a3e28f6acf79df6ec78ff521a0abc86f8f64d00b",
        "filename": "src/wallet/crypter.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5813bdd3eb93a2a8d7ba01989eef5b299fcbca4/src/wallet/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5813bdd3eb93a2a8d7ba01989eef5b299fcbca4/src/wallet/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.cpp?ref=f5813bdd3eb93a2a8d7ba01989eef5b299fcbca4",
        "patch": "@@ -255,14 +255,16 @@ bool CCryptoKeyStore::GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) co\n     {\n         LOCK(cs_KeyStore);\n         if (!IsCrypted())\n-            return CKeyStore::GetPubKey(address, vchPubKeyOut);\n+            return CBasicKeyStore::GetPubKey(address, vchPubKeyOut);\n \n         CryptedKeyMap::const_iterator mi = mapCryptedKeys.find(address);\n         if (mi != mapCryptedKeys.end())\n         {\n             vchPubKeyOut = (*mi).second.first;\n             return true;\n         }\n+        // Check for watch-only pubkeys\n+        return CBasicKeyStore::GetPubKey(address, vchPubKeyOut);\n     }\n     return false;\n }"
      }
    ]
  },
  {
    "sha": "6bdb474dc9dd34e1a5b13ce9494a936cba77e027",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YmRiNDc0ZGM5ZGQzNGUxYTViMTNjZTk0OTRhOTM2Y2JhNzdlMDI3",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-04-24T04:42:49Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-07-20T23:01:38Z"
      },
      "message": "Implement watchonly support in fundrawtransaction\n\nSome code and test cases stolen from\nBryan Bishop <bryan@ledgerx.com> (pull #5524).",
      "tree": {
        "sha": "9f48399117d4b22be76ac33b046437da77045615",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9f48399117d4b22be76ac33b046437da77045615"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6bdb474dc9dd34e1a5b13ce9494a936cba77e027",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bdb474dc9dd34e1a5b13ce9494a936cba77e027",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6bdb474dc9dd34e1a5b13ce9494a936cba77e027",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bdb474dc9dd34e1a5b13ce9494a936cba77e027/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f5813bdd3eb93a2a8d7ba01989eef5b299fcbca4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5813bdd3eb93a2a8d7ba01989eef5b299fcbca4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f5813bdd3eb93a2a8d7ba01989eef5b299fcbca4"
      }
    ],
    "stats": {
      "total": 90,
      "additions": 78,
      "deletions": 12
    },
    "files": [
      {
        "sha": "deaf8b68fdbb23d7fcbe352f53e3a3ac17a5d0f0",
        "filename": "qa/rpc-tests/fundrawtransaction.py",
        "status": "modified",
        "additions": 55,
        "deletions": 4,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bdb474dc9dd34e1a5b13ce9494a936cba77e027/qa/rpc-tests/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bdb474dc9dd34e1a5b13ce9494a936cba77e027/qa/rpc-tests/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fundrawtransaction.py?ref=6bdb474dc9dd34e1a5b13ce9494a936cba77e027",
        "patch": "@@ -13,14 +13,15 @@ class RawTransactionsTest(BitcoinTestFramework):\n \n     def setup_chain(self):\n         print(\"Initializing test directory \"+self.options.tmpdir)\n-        initialize_chain_clean(self.options.tmpdir, 3)\n+        initialize_chain_clean(self.options.tmpdir, 4)\n \n     def setup_network(self, split=False):\n-        self.nodes = start_nodes(3, self.options.tmpdir)\n+        self.nodes = start_nodes(4, self.options.tmpdir)\n \n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n+        connect_nodes_bi(self.nodes,0,3)\n \n         self.is_network_split=False\n         self.sync_all()\n@@ -31,11 +32,20 @@ def run_test(self):\n \n         self.nodes[2].generate(1)\n         self.sync_all()\n-        self.nodes[0].generate(101)\n+        self.nodes[0].generate(121)\n         self.sync_all()\n+\n+        watchonly_address = self.nodes[0].getnewaddress()\n+        watchonly_pubkey = self.nodes[0].validateaddress(watchonly_address)[\"pubkey\"]\n+        watchonly_amount = 200\n+        self.nodes[3].importpubkey(watchonly_pubkey, \"\", True)\n+        watchonly_txid = self.nodes[0].sendtoaddress(watchonly_address, watchonly_amount)\n+        self.nodes[0].sendtoaddress(self.nodes[3].getnewaddress(), watchonly_amount / 10);\n+\n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5);\n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0);\n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0);\n+\n         self.sync_all()\n         self.nodes[0].generate(1)\n         self.sync_all()\n@@ -428,11 +438,12 @@ def run_test(self):\n         stop_nodes(self.nodes)\n         wait_bitcoinds()\n \n-        self.nodes = start_nodes(3, self.options.tmpdir)\n+        self.nodes = start_nodes(4, self.options.tmpdir)\n \n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n+        connect_nodes_bi(self.nodes,0,3)\n         self.is_network_split=False\n         self.sync_all()\n \n@@ -525,5 +536,45 @@ def run_test(self):\n         assert_equal(oldBalance+Decimal('50.19000000'), self.nodes[0].getbalance()) #0.19+block reward\n \n \n+        ##################################################\n+        # test a fundrawtransaction using only watchonly #\n+        ##################################################\n+\n+        inputs = []\n+        outputs = {self.nodes[2].getnewaddress() : watchonly_amount / 2}\n+        rawtx = self.nodes[3].createrawtransaction(inputs, outputs)\n+\n+        result = self.nodes[3].fundrawtransaction(rawtx, True)\n+        res_dec = self.nodes[0].decoderawtransaction(result[\"hex\"])\n+        assert_equal(len(res_dec[\"vin\"]), 1)\n+        assert_equal(res_dec[\"vin\"][0][\"txid\"], watchonly_txid)\n+\n+        assert_equal(\"fee\" in result.keys(), True)\n+        assert_greater_than(result[\"changepos\"], -1)\n+\n+        ###############################################################\n+        # test fundrawtransaction using the entirety of watched funds #\n+        ###############################################################\n+\n+        inputs = []\n+        outputs = {self.nodes[2].getnewaddress() : watchonly_amount}\n+        rawtx = self.nodes[3].createrawtransaction(inputs, outputs)\n+\n+        result = self.nodes[3].fundrawtransaction(rawtx, True)\n+        res_dec = self.nodes[0].decoderawtransaction(result[\"hex\"])\n+        assert_equal(len(res_dec[\"vin\"]), 2)\n+        assert(res_dec[\"vin\"][0][\"txid\"] == watchonly_txid or res_dec[\"vin\"][1][\"txid\"] == watchonly_txid)\n+\n+        assert_greater_than(result[\"fee\"], 0)\n+        assert_greater_than(result[\"changepos\"], -1)\n+        assert_equal(result[\"fee\"] + res_dec[\"vout\"][result[\"changepos\"]][\"value\"], watchonly_amount / 10)\n+\n+        signedtx = self.nodes[3].signrawtransaction(result[\"hex\"])\n+        assert(not signedtx[\"complete\"])\n+        signedtx = self.nodes[0].signrawtransaction(signedtx[\"hex\"])\n+        assert(signedtx[\"complete\"])\n+        self.nodes[0].sendrawtransaction(signedtx[\"hex\"])\n+\n+\n if __name__ == '__main__':\n     RawTransactionsTest().main()"
      },
      {
        "sha": "74d524c0a2589190b238f45cfecdaaa1a7c85823",
        "filename": "src/coincontrol.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bdb474dc9dd34e1a5b13ce9494a936cba77e027/src/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bdb474dc9dd34e1a5b13ce9494a936cba77e027/src/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coincontrol.h?ref=6bdb474dc9dd34e1a5b13ce9494a936cba77e027",
        "patch": "@@ -14,6 +14,8 @@ class CCoinControl\n     CTxDestination destChange;\n     //! If false, allows unselected inputs, but requires all selected inputs be used\n     bool fAllowOtherInputs;\n+    //! Includes watch only addresses which match the ISMINE_WATCH_PUBKEY criteria\n+    bool fAllowWatchOnly;\n \n     CCoinControl()\n     {\n@@ -24,6 +26,7 @@ class CCoinControl\n     {\n         destChange = CNoDestination();\n         fAllowOtherInputs = false;\n+        fAllowWatchOnly = false;\n         setSelected.clear();\n     }\n "
      },
      {
        "sha": "199a93456c8d6ad41328c25ca606c8da535c5aa9",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 5,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bdb474dc9dd34e1a5b13ce9494a936cba77e027/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bdb474dc9dd34e1a5b13ce9494a936cba77e027/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=6bdb474dc9dd34e1a5b13ce9494a936cba77e027",
        "patch": "@@ -2367,15 +2367,20 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() != 1)\n+    if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n-                            \"fundrawtransaction \\\"hexstring\\\"\\n\"\n+                            \"fundrawtransaction \\\"hexstring\\\" includeWatching\\n\"\n                             \"\\nAdd inputs to a transaction until it has enough in value to meet its out value.\\n\"\n                             \"This will not modify existing inputs, and will add one change output to the outputs.\\n\"\n                             \"Note that inputs which were signed may need to be resigned after completion since in/outputs have been added.\\n\"\n                             \"The inputs added will not be signed, use signrawtransaction for that.\\n\"\n+                            \"Note that all existing inputs must have their previous output transaction be in the wallet.\\n\"\n+                            \"Note that all inputs selected must be of standard form and P2SH scripts must be\"\n+                            \"in the wallet using importaddress or addmultisigaddress (to calculate fees).\\n\"\n+                            \"Only pay-to-pubkey, multisig, and P2SH versions thereof are currently supported for watch-only\\n\"\n                             \"\\nArguments:\\n\"\n-                            \"1. \\\"hexstring\\\"    (string, required) The hex string of the raw transaction\\n\"\n+                            \"1. \\\"hexstring\\\"     (string, required) The hex string of the raw transaction\\n\"\n+                            \"2. includeWatching (boolean, optional, default false) Also select inputs which are watch only\\n\"\n                             \"\\nResult:\\n\"\n                             \"{\\n\"\n                             \"  \\\"hex\\\":       \\\"value\\\", (string)  The resulting raw transaction (hex-encoded string)\\n\"\n@@ -2394,18 +2399,22 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n                             + HelpExampleCli(\"sendrawtransaction\", \"\\\"signedtransactionhex\\\"\")\n                             );\n \n-    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR));\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VBOOL));\n \n     // parse hex string from parameter\n     CTransaction origTx;\n     if (!DecodeHexTx(origTx, params[0].get_str()))\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n \n+    bool includeWatching = false;\n+    if (params.size() > 1)\n+        includeWatching = true;\n+\n     CMutableTransaction tx(origTx);\n     CAmount nFee;\n     string strFailReason;\n     int nChangePos = -1;\n-    if(!pwalletMain->FundTransaction(tx, nFee, nChangePos, strFailReason))\n+    if(!pwalletMain->FundTransaction(tx, nFee, nChangePos, strFailReason, includeWatching))\n         throw JSONRPCError(RPC_INTERNAL_ERROR, strFailReason);\n \n     UniValue result(UniValue::VOBJ);"
      },
      {
        "sha": "5bc34f9ede5e85ea2a298a40331cceaca5ebb645",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bdb474dc9dd34e1a5b13ce9494a936cba77e027/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bdb474dc9dd34e1a5b13ce9494a936cba77e027/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=6bdb474dc9dd34e1a5b13ce9494a936cba77e027",
        "patch": "@@ -1524,7 +1524,9 @@ void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed, const\n                 if (!(IsSpent(wtxid, i)) && mine != ISMINE_NO &&\n                     !IsLockedCoin((*it).first, i) && (pcoin->vout[i].nValue > 0 || fIncludeZeroValue) &&\n                     (!coinControl || !coinControl->HasSelected() || coinControl->fAllowOtherInputs || coinControl->IsSelected((*it).first, i)))\n-                        vCoins.push_back(COutput(pcoin, i, nDepth, (mine & ISMINE_SPENDABLE) != ISMINE_NO));\n+                        vCoins.push_back(COutput(pcoin, i, nDepth,\n+                                                 ((mine & ISMINE_SPENDABLE) != ISMINE_NO) ||\n+                                                  (coinControl && coinControl->fAllowWatchOnly && (mine & ISMINE_WATCH_PUBKEY) != ISMINE_NO)));\n             }\n         }\n     }\n@@ -1740,7 +1742,7 @@ bool CWallet::SelectCoins(const CAmount& nTargetValue, set<pair<const CWalletTx*\n     return res;\n }\n \n-bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount &nFeeRet, int& nChangePosRet, std::string& strFailReason)\n+bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount &nFeeRet, int& nChangePosRet, std::string& strFailReason, bool includeWatching)\n {\n     vector<CRecipient> vecSend;\n \n@@ -1753,6 +1755,7 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount &nFeeRet, int& nC\n \n     CCoinControl coinControl;\n     coinControl.fAllowOtherInputs = true;\n+    coinControl.fAllowWatchOnly = includeWatching;\n     BOOST_FOREACH(const CTxIn& txin, tx.vin)\n         coinControl.Select(txin.prevout);\n "
      },
      {
        "sha": "faa509fc1d5246ebfb0900aa18c7b531e100da4a",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bdb474dc9dd34e1a5b13ce9494a936cba77e027/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bdb474dc9dd34e1a5b13ce9494a936cba77e027/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=6bdb474dc9dd34e1a5b13ce9494a936cba77e027",
        "patch": "@@ -630,7 +630,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     CAmount GetWatchOnlyBalance() const;\n     CAmount GetUnconfirmedWatchOnlyBalance() const;\n     CAmount GetImmatureWatchOnlyBalance() const;\n-    bool FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosRet, std::string& strFailReason);\n+    bool FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosRet, std::string& strFailReason, bool includeWatching);\n     bool CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosRet,\n                            std::string& strFailReason, const CCoinControl *coinControl = NULL, bool sign = true);\n     bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey);"
      }
    ]
  },
  {
    "sha": "428a898acd37e1c0afa21623a8fe5728859067be",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MjhhODk4YWNkMzdlMWMwYWZhMjE2MjNhOGZlNTcyODg1OTA2N2Jl",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-08-08T16:26:07Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-08-08T16:30:53Z"
      },
      "message": "SQUASH \"Add have-pubkey distinction to ISMINE flags\"",
      "tree": {
        "sha": "fb4ab1a072da52a0b557fa765e0f671b1b845955",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fb4ab1a072da52a0b557fa765e0f671b1b845955"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/428a898acd37e1c0afa21623a8fe5728859067be",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/428a898acd37e1c0afa21623a8fe5728859067be",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/428a898acd37e1c0afa21623a8fe5728859067be",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/428a898acd37e1c0afa21623a8fe5728859067be/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6bdb474dc9dd34e1a5b13ce9494a936cba77e027",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bdb474dc9dd34e1a5b13ce9494a936cba77e027",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6bdb474dc9dd34e1a5b13ce9494a936cba77e027"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "d27b1531e3e620090e658433beba90cbb7b0656c",
        "filename": "src/wallet/wallet_ismine.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/428a898acd37e1c0afa21623a8fe5728859067be/src/wallet/wallet_ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/428a898acd37e1c0afa21623a8fe5728859067be/src/wallet/wallet_ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet_ismine.cpp?ref=428a898acd37e1c0afa21623a8fe5728859067be",
        "patch": "@@ -41,7 +41,7 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n     txnouttype whichType;\n     if (!Solver(scriptPubKey, whichType, vSolutions)) {\n         if (keystore.HaveWatchOnly(scriptPubKey))\n-            return ISMINE_WATCH_NOPUBKEY;\n+            return ISMINE_WATCH_UNSOLVABLE;\n         return ISMINE_NO;\n     }\n \n@@ -89,7 +89,7 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n     if (keystore.HaveWatchOnly(scriptPubKey)) {\n         // TODO: This could be optimized some by doing some work after the above solver\n         CScript scriptSig;\n-        return ProduceSignature(DummySignatureCreator(&keystore), scriptPubKey, scriptSig) ? ISMINE_WATCH_PUBKEY : ISMINE_WATCH_NOPUBKEY;\n+        return ProduceSignature(DummySignatureCreator(&keystore), scriptPubKey, scriptSig) ? ISMINE_WATCH_SOLVABLE : ISMINE_WATCH_UNSOLVABLE;\n     }\n     return ISMINE_NO;\n }"
      },
      {
        "sha": "ec9dcddd5a07c213861140e21d19a60324324985",
        "filename": "src/wallet/wallet_ismine.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/428a898acd37e1c0afa21623a8fe5728859067be/src/wallet/wallet_ismine.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/428a898acd37e1c0afa21623a8fe5728859067be/src/wallet/wallet_ismine.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet_ismine.h?ref=428a898acd37e1c0afa21623a8fe5728859067be",
        "patch": "@@ -17,10 +17,10 @@ enum isminetype\n {\n     ISMINE_NO = 0,\n     //! Indicates that we dont know how to create a scriptSig that would solve this if we were given the appropriate private keys\n-    ISMINE_WATCH_NOPUBKEY = 1,\n+    ISMINE_WATCH_UNSOLVABLE = 1,\n     //! Indicates that we know how to create a scriptSig that would solve this if we were given the appropriate private keys\n-    ISMINE_WATCH_PUBKEY = 2,\n-    ISMINE_WATCH_ONLY = ISMINE_WATCH_NOPUBKEY | ISMINE_WATCH_PUBKEY,\n+    ISMINE_WATCH_SOLVABLE = 2,\n+    ISMINE_WATCH_ONLY = ISMINE_WATCH_SOLVABLE | ISMINE_WATCH_UNSOLVABLE,\n     ISMINE_SPENDABLE = 4,\n     ISMINE_ALL = ISMINE_WATCH_ONLY | ISMINE_SPENDABLE\n };"
      }
    ]
  },
  {
    "sha": "d04285430d1b54b3ce3d50ffa67b6098157e7c14",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMDQyODU0MzBkMWI1NGIzY2UzZDUwZmZhNjdiNjA5ODE1N2U3YzE0",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-08-08T16:27:19Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-08-08T16:30:53Z"
      },
      "message": "SQUASH \"Implement watchonly support in fundrawtransaction\"",
      "tree": {
        "sha": "8d162c741dfe8222a293a7eb77d5056804f2bbd3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8d162c741dfe8222a293a7eb77d5056804f2bbd3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d04285430d1b54b3ce3d50ffa67b6098157e7c14",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d04285430d1b54b3ce3d50ffa67b6098157e7c14",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d04285430d1b54b3ce3d50ffa67b6098157e7c14",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d04285430d1b54b3ce3d50ffa67b6098157e7c14/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "428a898acd37e1c0afa21623a8fe5728859067be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/428a898acd37e1c0afa21623a8fe5728859067be",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/428a898acd37e1c0afa21623a8fe5728859067be"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "bc965f9e19dfa0a509801bab11bf632a210809b6",
        "filename": "src/coincontrol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d04285430d1b54b3ce3d50ffa67b6098157e7c14/src/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d04285430d1b54b3ce3d50ffa67b6098157e7c14/src/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coincontrol.h?ref=d04285430d1b54b3ce3d50ffa67b6098157e7c14",
        "patch": "@@ -14,7 +14,7 @@ class CCoinControl\n     CTxDestination destChange;\n     //! If false, allows unselected inputs, but requires all selected inputs be used\n     bool fAllowOtherInputs;\n-    //! Includes watch only addresses which match the ISMINE_WATCH_PUBKEY criteria\n+    //! Includes watch only addresses which match the ISMINE_WATCH_SOLVABLE criteria\n     bool fAllowWatchOnly;\n \n     CCoinControl()"
      },
      {
        "sha": "8b7231b6eb066d8d38055b00e416735055af365f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d04285430d1b54b3ce3d50ffa67b6098157e7c14/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d04285430d1b54b3ce3d50ffa67b6098157e7c14/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d04285430d1b54b3ce3d50ffa67b6098157e7c14",
        "patch": "@@ -1526,7 +1526,7 @@ void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed, const\n                     (!coinControl || !coinControl->HasSelected() || coinControl->fAllowOtherInputs || coinControl->IsSelected((*it).first, i)))\n                         vCoins.push_back(COutput(pcoin, i, nDepth,\n                                                  ((mine & ISMINE_SPENDABLE) != ISMINE_NO) ||\n-                                                  (coinControl && coinControl->fAllowWatchOnly && (mine & ISMINE_WATCH_PUBKEY) != ISMINE_NO)));\n+                                                  (coinControl && coinControl->fAllowWatchOnly && (mine & ISMINE_WATCH_SOLVABLE) != ISMINE_NO)));\n             }\n         }\n     }"
      }
    ]
  }
]