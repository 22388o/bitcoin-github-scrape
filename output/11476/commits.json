[
  {
    "sha": "478a89c1ef79a75275d1b508122c06eee9386b2d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NzhhODljMWVmNzlhNzUyNzVkMWI1MDgxMjJjMDZlZWU5Mzg2YjJk",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-10-10T19:27:26Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-10-19T13:01:43Z"
      },
      "message": "Avoid opening copied wallet databases simultaneously\n\nMake sure wallet databases have unique fileids. If they don't, throw an error.\nBDB caches do not work properly when more than one open database has the same\nfileid, because values written to one database may show up in reads to other\ndatabases.\n\nBitcoin will never create different databases with the same fileid, but users\ncan create them by manually copying database files.\n\nBDB caching bug was reported by Chris Moore <dooglus@gmail.com>\nhttps://github.com/bitcoin/bitcoin/issues/11429\n\nFixes #11429",
      "tree": {
        "sha": "9537bcd85ca45299d363560f1a6dbb6847907919",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9537bcd85ca45299d363560f1a6dbb6847907919"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/478a89c1ef79a75275d1b508122c06eee9386b2d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/478a89c1ef79a75275d1b508122c06eee9386b2d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/478a89c1ef79a75275d1b508122c06eee9386b2d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/478a89c1ef79a75275d1b508122c06eee9386b2d/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "13f53b750dc09cb59192b2aa4ac8e499ee36e1ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13f53b750dc09cb59192b2aa4ac8e499ee36e1ca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/13f53b750dc09cb59192b2aa4ac8e499ee36e1ca"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 41,
      "deletions": 0
    },
    "files": [
      {
        "sha": "459d289a4278f136c9455be111879981abdeb8ed",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/478a89c1ef79a75275d1b508122c06eee9386b2d/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/478a89c1ef79a75275d1b508122c06eee9386b2d/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=478a89c1ef79a75275d1b508122c06eee9386b2d",
        "patch": "@@ -20,6 +20,40 @@\n \n #include <boost/thread.hpp>\n \n+namespace {\n+//! Make sure database has a unique fileid within the environment. If it\n+//! doesn't, throw an error. BDB caches do not work properly when more than one\n+//! open database has the same fileid (values written to one database may show\n+//! up in reads to other databases).\n+//!\n+//! BerkeleyDB generates unique fileids by default\n+//! (https://docs.oracle.com/cd/E17275_01/html/programmer_reference/program_copy.html),\n+//! so bitcoin should never create different databases with the same fileid, but\n+//! this error can be triggered if users manually copy database files.\n+void CheckUniqueFileid(const CDBEnv& env, const std::string& filename, Db& db)\n+{\n+    if (env.IsMock()) return;\n+\n+    u_int8_t fileid[DB_FILE_ID_LEN];\n+    int ret = db.get_mpf()->get_fileid(fileid);\n+    if (ret != 0) {\n+        throw std::runtime_error(strprintf(\"CDB: Can't open database %s (get_fileid failed with %d)\", filename, ret));\n+    }\n+\n+    for (const auto& item : env.mapDb) {\n+        u_int8_t item_fileid[DB_FILE_ID_LEN];\n+        if (item.second && item.second->get_mpf()->get_fileid(item_fileid) == 0 &&\n+            memcmp(fileid, item_fileid, sizeof(fileid)) == 0) {\n+            const char* item_filename = nullptr;\n+            item.second->get_dbname(&item_filename, nullptr);\n+            throw std::runtime_error(strprintf(\"CDB: Can't open database %s (duplicates fileid %s from %s)\", filename,\n+                HexStr(std::begin(item_fileid), std::end(item_fileid)),\n+                item_filename ? item_filename : \"(unknown database)\"));\n+        }\n+    }\n+}\n+} // namespace\n+\n //\n // CDB\n //\n@@ -403,6 +437,7 @@ CDB::CDB(CWalletDBWrapper& dbw, const char* pszMode, bool fFlushOnCloseIn) : pdb\n             if (ret != 0) {\n                 throw std::runtime_error(strprintf(\"CDB: Error %d, can't open database %s\", ret, strFilename));\n             }\n+            CheckUniqueFileid(*env, strFilename, *pdb_temp);\n \n             pdb = pdb_temp.release();\n             env->mapDb[strFilename] = pdb;"
      },
      {
        "sha": "7a0fbce477aaed214d492498e75ada114956ea8a",
        "filename": "test/functional/multiwallet.py",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/478a89c1ef79a75275d1b508122c06eee9386b2d/test/functional/multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/478a89c1ef79a75275d1b508122c06eee9386b2d/test/functional/multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/multiwallet.py?ref=478a89c1ef79a75275d1b508122c06eee9386b2d",
        "patch": "@@ -7,6 +7,7 @@\n Verify that a bitcoind node can load multiple wallet files\n \"\"\"\n import os\n+import shutil\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, assert_raises_rpc_error\n@@ -29,6 +30,11 @@ def run_test(self):\n         os.mkdir(os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w11'))\n         self.assert_start_raises_init_error(0, ['-wallet=w11'], 'Error loading wallet w11. -wallet filename must be a regular file.')\n \n+        # should not initialize if one wallet is a copy of another\n+        shutil.copyfile(os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w2'),\n+                        os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w22'))\n+        self.assert_start_raises_init_error(0, ['-wallet=w2', '-wallet=w22'], 'duplicates fileid')\n+\n         # should not initialize if wallet file is a symlink\n         os.symlink(os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w1'), os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w12'))\n         self.assert_start_raises_init_error(0, ['-wallet=w12'], 'Error loading wallet w12. -wallet filename must be a regular file.')"
      }
    ]
  }
]