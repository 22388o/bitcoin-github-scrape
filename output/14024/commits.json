[
  {
    "sha": "fa3e9f7627784ee00980590e5bf044a0e1249999",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTNlOWY3NjI3Nzg0ZWUwMDk4MDU5MGU1YmYwNDRhMGUxMjQ5OTk5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-08-21T23:23:21Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-08-24T16:30:13Z"
      },
      "message": "qa: Add TestNode::assert_debug_log",
      "tree": {
        "sha": "f9786839d58f047b30468c50c635a808a1426d8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f9786839d58f047b30468c50c635a808a1426d8c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa3e9f7627784ee00980590e5bf044a0e1249999",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJbgDKVAAoJEM4rdWl+aaVILYsMAM9fmoRhYyhCjZBbSxfSgM9U\nBjsdyfbJY5ebdh1bHQe61JSAA90DSLCUhhHGHpYJLbi7J8QoGu6Wu2nKwSCBTMND\nXBtpWMZDkfjTLmSqSIE5WfMnHvfsWVT1LPb+3P39BHJUp/HyTvL2EHSSAEz8XHv5\nB1uQApKRHSfmBnUFjps9KOZ08sVTk9DkuD9U2whdvodLnlD8IEJojicAoRc71gcR\nf7pRoYPhPj4apM+qeZyd/i6S5IM2cK9QXLZikfR9hzmWINDSRhjZuCPGRTjXdXbN\nWS9+x9AceHP7/Yh+5psXrS9o+hfLiJlRK80zhG7HFGJKBfkzjaqRA3aLFE9n3p8s\nggOgAQ9xeeyCsCbbTTVgmo94XphCOmnG/7iDVj4Py50oAWZdcvo2lTH9wxLrKwpE\nSPsA9EwH6JjJw6fuzZpa7ysXFqwL/LozGX4LjE9TEuQV+g9eQILEpFoXMAlMYi99\nlO+UeRR8K8cLW1W6idVIa7UU8Rb0fxugKlPQYXAz6A==\n=M+9a\n-----END PGP SIGNATURE-----",
        "payload": "tree f9786839d58f047b30468c50c635a808a1426d8c\nparent 17d644901bbd770578619545bbd8bc930fe6f2d9\nauthor MarcoFalke <falke.marco@gmail.com> 1534893801 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1535128213 -0400\n\nqa: Add TestNode::assert_debug_log\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa3e9f7627784ee00980590e5bf044a0e1249999",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa3e9f7627784ee00980590e5bf044a0e1249999",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa3e9f7627784ee00980590e5bf044a0e1249999/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "17d644901bbd770578619545bbd8bc930fe6f2d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17d644901bbd770578619545bbd8bc930fe6f2d9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/17d644901bbd770578619545bbd8bc930fe6f2d9"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 25,
      "deletions": 2
    },
    "files": [
      {
        "sha": "12bc62131f6579c83f3054acf55917200d50f93e",
        "filename": "test/functional/p2p_invalid_tx.py",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3e9f7627784ee00980590e5bf044a0e1249999/test/functional/p2p_invalid_tx.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3e9f7627784ee00980590e5bf044a0e1249999/test/functional/p2p_invalid_tx.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_tx.py?ref=fa3e9f7627784ee00980590e5bf044a0e1249999",
        "patch": "@@ -136,11 +136,16 @@ def run_test(self):\n \n         # restart node with sending BIP61 messages disabled, check that it disconnects without sending the reject message\n         self.log.info('Test a transaction that is rejected, with BIP61 disabled')\n-        self.restart_node(0, ['-enablebip61=0','-persistmempool=0'])\n+        self.restart_node(0, ['-enablebip61=0', '-persistmempool=0'])\n         self.reconnect_p2p(num_connections=1)\n-        node.p2p.send_txs_and_test([tx1], node, success=False, expect_disconnect=True)\n+        with node.assert_debug_log(expected_msgs=[\n+                \"{} from peer=0 was not accepted: mandatory-script-verify-flag-failed (Invalid OP_IF construction) (code 16)\".format(tx1.hash),\n+                \"disconnecting peer=0\",\n+        ]):\n+            node.p2p.send_txs_and_test([tx1], node, success=False, expect_disconnect=True)\n         # send_txs_and_test will have waited for disconnect, so we can safely check that no reject has been received\n         assert_equal(node.p2p.reject_code_received, None)\n \n+\n if __name__ == '__main__':\n     InvalidTxRequestTest().main()"
      },
      {
        "sha": "a831fdcd5d2b606f6fbb8396d31f66aaed4a90e6",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3e9f7627784ee00980590e5bf044a0e1249999/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3e9f7627784ee00980590e5bf044a0e1249999/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=fa3e9f7627784ee00980590e5bf044a0e1249999",
        "patch": "@@ -4,6 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Class for bitcoind node under test\"\"\"\n \n+import contextlib\n import decimal\n import errno\n from enum import Enum\n@@ -229,6 +230,23 @@ def is_node_stopped(self):\n     def wait_until_stopped(self, timeout=BITCOIND_PROC_WAIT_TIMEOUT):\n         wait_until(self.is_node_stopped, timeout=timeout)\n \n+    @contextlib.contextmanager\n+    def assert_debug_log(self, expected_msgs):\n+        debug_log = os.path.join(self.datadir, 'regtest', 'debug.log')\n+        with open(debug_log, encoding='utf-8') as dl:\n+            dl.seek(0, 2)\n+            prev_size = dl.tell()\n+        try:\n+            yield\n+        finally:\n+            with open(debug_log, encoding='utf-8') as dl:\n+                dl.seek(prev_size)\n+                log = dl.read()\n+            print_log = \" - \" + \"\\n - \".join(log.splitlines())\n+            for expected_msg in expected_msgs:\n+                if re.search(re.escape(expected_msg), log, flags=re.MULTILINE) is None:\n+                    self._raise_assertion_error('Expected message \"{}\" does not partially match log:\\n\\n{}\\n\\n'.format(expected_msg, print_log))\n+\n     def assert_start_raises_init_error(self, extra_args=None, expected_msg=None, match=ErrorMatch.FULL_TEXT, *args, **kwargs):\n         \"\"\"Attempt to start the node and expect it to raise an error.\n "
      }
    ]
  }
]