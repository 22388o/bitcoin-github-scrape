[
  {
    "sha": "23f9586f42c847b9312c523d29d25294787d256a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyM2Y5NTg2ZjQyYzg0N2I5MzEyYzUyM2QyOWQyNTI5NDc4N2QyNTZh",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-17T12:18:21Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-17T13:48:35Z"
      },
      "message": "Chainparams: Consensus: Explicit Consensus::Params arg for:\n\nmain:\n-CheckBlock\n-CheckBlockHeader\n-ContextualCheckBlock\n-ContextualCheckBlockHeader",
      "tree": {
        "sha": "22c5b1c6f16e8f3c9f15bd3dd3654e79bb700227",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/22c5b1c6f16e8f3c9f15bd3dd3654e79bb700227"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/23f9586f42c847b9312c523d29d25294787d256a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23f9586f42c847b9312c523d29d25294787d256a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/23f9586f42c847b9312c523d29d25294787d256a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23f9586f42c847b9312c523d29d25294787d256a/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8f955b9661224adc950e302b42d2f7bcb5e90bef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f955b9661224adc950e302b42d2f7bcb5e90bef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8f955b9661224adc950e302b42d2f7bcb5e90bef"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 27,
      "deletions": 22
    },
    "files": [
      {
        "sha": "5e2537cc6b440e21abdec090850338454b4c46ca",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 17,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23f9586f42c847b9312c523d29d25294787d256a/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23f9586f42c847b9312c523d29d25294787d256a/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=23f9586f42c847b9312c523d29d25294787d256a",
        "patch": "@@ -1683,7 +1683,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     const CChainParams& chainparams = Params();\n     AssertLockHeld(cs_main);\n     // Check it again in case a previous version let a bad block in\n-    if (!CheckBlock(block, state, !fJustCheck, !fJustCheck))\n+    if (!CheckBlock(block, state, chainparams.GetConsensus(), !fJustCheck, !fJustCheck))\n         return false;\n \n     // verify that the view's current state corresponds to the previous block\n@@ -2465,10 +2465,10 @@ bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigne\n     return true;\n }\n \n-bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, bool fCheckPOW)\n+bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW)\n {\n     // Check proof of work matches claimed amount\n-    if (fCheckPOW && !CheckProofOfWork(block.GetHash(), block.nBits, Params().GetConsensus()))\n+    if (fCheckPOW && !CheckProofOfWork(block.GetHash(), block.nBits, consensusParams))\n         return state.DoS(50, error(\"CheckBlockHeader(): proof of work failed\"),\n                          REJECT_INVALID, \"high-hash\");\n \n@@ -2480,13 +2480,13 @@ bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, bool f\n     return true;\n }\n \n-bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bool fCheckMerkleRoot)\n+bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW, bool fCheckMerkleRoot)\n {\n     // These are checks that are independent of context.\n \n     // Check that the header is valid (particularly PoW).  This is mostly\n     // redundant with the call in AcceptBlockHeader.\n-    if (!CheckBlockHeader(block, state, fCheckPOW))\n+    if (!CheckBlockHeader(block, state, consensusParams, fCheckPOW))\n         return false;\n \n     // Check the merkle root.\n@@ -2540,9 +2540,8 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n     return true;\n }\n \n-bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex * const pindexPrev)\n+bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev)\n {\n-    const Consensus::Params& consensusParams = Params().GetConsensus();\n     uint256 hash = block.GetHash();\n     if (hash == consensusParams.hashGenesisBlock)\n         return true;\n@@ -2552,7 +2551,7 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n     int nHeight = pindexPrev->nHeight+1;\n \n     // Check proof of work\n-    if (block.nBits != GetNextWorkRequired(pindexPrev, &block, Params().GetConsensus()))\n+    if (block.nBits != GetNextWorkRequired(pindexPrev, &block, consensusParams))\n         return state.DoS(100, error(\"%s: incorrect proof of work\", __func__),\n                          REJECT_INVALID, \"bad-diffbits\");\n \n@@ -2588,7 +2587,7 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n     return true;\n }\n \n-bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex * const pindexPrev)\n+bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, CBlockIndex * const pindexPrev)\n {\n     const int nHeight = pindexPrev == NULL ? 0 : pindexPrev->nHeight + 1;\n \n@@ -2630,7 +2629,7 @@ bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBloc\n         return true;\n     }\n \n-    if (!CheckBlockHeader(block, state))\n+    if (!CheckBlockHeader(block, state, chainparams.GetConsensus()))\n         return false;\n \n     // Get prev block index\n@@ -2644,7 +2643,7 @@ bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBloc\n             return state.DoS(100, error(\"%s: prev block invalid\", __func__), REJECT_INVALID, \"bad-prevblk\");\n     }\n \n-    if (!ContextualCheckBlockHeader(block, state, pindexPrev))\n+    if (!ContextualCheckBlockHeader(block, state, chainparams.GetConsensus(), pindexPrev))\n         return false;\n \n     if (pindex == NULL)\n@@ -2658,6 +2657,7 @@ bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBloc\n \n bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex, CDiskBlockPos* dbp)\n {\n+    const CChainParams& chainparams = Params();\n     AssertLockHeld(cs_main);\n \n     CBlockIndex *&pindex = *ppindex;\n@@ -2671,7 +2671,8 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex,\n         return true;\n     }\n \n-    if ((!CheckBlock(block, state)) || !ContextualCheckBlock(block, state, pindex->pprev)) {\n+    if (!CheckBlock(block, state, chainparams.GetConsensus()) || \n+        !ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindex->pprev)) {\n         if (state.IsInvalid() && !state.CorruptionPossible()) {\n             pindex->nStatus |= BLOCK_FAILED_VALID;\n             setDirtyBlockIndex.insert(pindex);\n@@ -2717,8 +2718,9 @@ static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned\n \n bool ProcessNewBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDiskBlockPos *dbp)\n {\n+    const CChainParams& chainparams = Params();\n     // Preliminary checks\n-    bool checked = CheckBlock(*pblock, state);\n+    bool checked = CheckBlock(*pblock, state, chainparams.GetConsensus());\n \n     {\n         LOCK(cs_main);\n@@ -2746,6 +2748,7 @@ bool ProcessNewBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDis\n \n bool TestBlockValidity(CValidationState &state, const CBlock& block, CBlockIndex * const pindexPrev, bool fCheckPOW, bool fCheckMerkleRoot)\n {\n+    const CChainParams& chainparams = Params();\n     AssertLockHeld(cs_main);\n     assert(pindexPrev == chainActive.Tip());\n \n@@ -2755,11 +2758,11 @@ bool TestBlockValidity(CValidationState &state, const CBlock& block, CBlockIndex\n     indexDummy.nHeight = pindexPrev->nHeight + 1;\n \n     // NOTE: CheckBlockHeader is called by CheckBlock\n-    if (!ContextualCheckBlockHeader(block, state, pindexPrev))\n+    if (!ContextualCheckBlockHeader(block, state, chainparams.GetConsensus(), pindexPrev))\n         return false;\n-    if (!CheckBlock(block, state, fCheckPOW, fCheckMerkleRoot))\n+    if (!CheckBlock(block, state, chainparams.GetConsensus(), fCheckPOW, fCheckMerkleRoot))\n         return false;\n-    if (!ContextualCheckBlock(block, state, pindexPrev))\n+    if (!ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindexPrev))\n         return false;\n     if (!ConnectBlock(block, state, &indexDummy, viewNew, true))\n         return false;\n@@ -2966,6 +2969,7 @@ CVerifyDB::~CVerifyDB()\n \n bool CVerifyDB::VerifyDB(CCoinsView *coinsview, int nCheckLevel, int nCheckDepth)\n {\n+    const CChainParams& chainparams = Params();\n     LOCK(cs_main);\n     if (chainActive.Tip() == NULL || chainActive.Tip()->pprev == NULL)\n         return true;\n@@ -2993,7 +2997,7 @@ bool CVerifyDB::VerifyDB(CCoinsView *coinsview, int nCheckLevel, int nCheckDepth\n         if (!ReadBlockFromDisk(block, pindex))\n             return error(\"VerifyDB(): *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n         // check level 1: verify block validity\n-        if (nCheckLevel >= 1 && !CheckBlock(block, state))\n+        if (nCheckLevel >= 1 && !CheckBlock(block, state, chainparams.GetConsensus()))\n             return error(\"VerifyDB(): *** found bad block at %d, hash=%s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n         // check level 2: verify undo validity\n         if (nCheckLevel >= 2 && pindex) {"
      },
      {
        "sha": "da5ac5a321b240b7a04f6feb0dee574c4ef15b63",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23f9586f42c847b9312c523d29d25294787d256a/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23f9586f42c847b9312c523d29d25294787d256a/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=23f9586f42c847b9312c523d29d25294787d256a",
        "patch": "@@ -348,12 +348,12 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& coins, bool fJustCheck = false);\n \n /** Context-independent validity checks */\n-bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, bool fCheckPOW = true);\n-bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n+bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW = true);\n+bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n /** Context-dependent validity checks */\n-bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, CBlockIndex *pindexPrev);\n-bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex *pindexPrev);\n+bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev);\n+bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, CBlockIndex *pindexPrev);\n \n /** Check a block is completely valid from start to finish (only works on top of our current best block, with cs_main held) */\n bool TestBlockValidity(CValidationState &state, const CBlock& block, CBlockIndex *pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true);"
      },
      {
        "sha": "3e93e083813c562906b4ae8b7d48d52560dc2414",
        "filename": "src/test/checkblock_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23f9586f42c847b9312c523d29d25294787d256a/src/test/checkblock_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23f9586f42c847b9312c523d29d25294787d256a/src/test/checkblock_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkblock_tests.cpp?ref=23f9586f42c847b9312c523d29d25294787d256a",
        "patch": "@@ -47,6 +47,7 @@ bool read_block(const std::string& filename, CBlock& block)\n \n BOOST_AUTO_TEST_CASE(May15)\n {\n+    const Consensus::Params& consensusParams = Params(CBaseChainParams::MAIN).GetConsensus();\n     // Putting a 1MB binary file in the git repository is not a great\n     // idea, so this test is only run if you manually download\n     // test/data/Mar12Fork.dat from\n@@ -61,7 +62,7 @@ BOOST_AUTO_TEST_CASE(May15)\n \n         // After May 15'th, big blocks are OK:\n         forkingBlock.nTime = tMay15; // Invalidates PoW\n-        BOOST_CHECK(CheckBlock(forkingBlock, state, false, false));\n+        BOOST_CHECK(CheckBlock(forkingBlock, state, consensusParams, false, false));\n     }\n \n     SetMockTime(0);"
      }
    ]
  }
]