jonasschnelli,2017-07-14T18:31:14Z,I think such policy changes should first be discussed on the bitcoin-dev mailing list and eventually deserve a BIP.,https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-315433537,315433537,
TheBlueMatt,2017-07-14T19:53:28Z,"Yea, agreed that this should get a BIP (sadly probably means endlessly trolled), but does seem awesome to me. Does this need a new option? We dont currently have an option for opt-in-rbf, why not just leave this as hardcoded policy?",https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-315452140,315452140,
greenaddress,2017-07-14T20:05:40Z,"@TheBlueMatt replacement can be disabled (as a node policy afaik rather than wallet) and the new option i added  allows for easier testing and for people to run values that they like different from the default (either to be same as previous behavior or to get the other end without running some fork/patched core).\n\n@TheBlueMatt @jonasschnelli  I am happy to do a BIP and discuss in the dev maili",https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-315454683,315454683,
petertodd,2017-07-14T23:06:49Z,"I disagree that this needs a BIP.\n\nOpt-in RBF added a new way to interpret a transaction, which just barely qualified as something you might want to do a BIP for.\n\nThis however makes an existing behavior - transactions being replaceable in spite of them not signalling opt-in RBF - happen a little sooner in some circumstances, just like adding expiration did in the first place. We didn't cr",https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-315488050,315488050,
luke-jr,2017-07-15T00:31:49Z,"Indeed, mere policies are not BIP material...",https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-315496443,315496443,
gmaxwell,2017-07-15T01:27:24Z,"People might want to know about it... and a BIP might be a good way to communicate it...  but we certainly didn't write a BIP about the expiration time changes over time, and this is strictly a narrower change.\n\nDunno how ideal 6 hours is though.",https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-315500284,315500284,
EagleTM,2017-07-16T04:18:16Z,I'd suggest to put the timeout at 72h - at least when introducing the functionality. This way the behviour is similar to pre 0.14.x code. It's less likely to create havoc / confusion for operators who are still used to regularly see 0-conf transactions being re-spent after that time-frame (but not earlier).,https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-315584435,315584435,
petertodd,2017-07-16T05:20:06Z,"@gmaxwell I suggested six hours because it's more than long enough (36 blocks) that if you wanted that tx mined relatively quickly, you're probably getting annoyed that it isn't.\n\n@EagleTM Try actually doublespending some time - it's a lot easier than you think it is.",https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-315586610,315586610,
rubensayshi,2017-07-31T21:05:06Z,"I think 6hrs is very short, I've seen many TXs confirmed after 24hrs+, there's plenty of people who, during bigger mempool periods, even try to aim for that...\n\nthough it might feel a bit insignificant for a BIP, this PR impacts a lot of assumptions people have about 0conf txs, it would get more significant exposure and discussion if proposed as a BIP. ",https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-319196177,319196177,
petertodd,2017-08-01T04:26:21Z,"@rubensayshi You seem to be arguing that the time interval should be longer for security reasons. For that argument to be valid, you'd have to substantiate the claim that a transaction with a fee so low that it fails to confirm after 36 blocks - 10 blocks more than the fee estimator even supports - is still difficult to double spend.",https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-319264207,319264207,
greenaddress,2017-08-01T22:05:18Z,@rubensayshi this doesn't stop those transactions from being confirmed if that's what the user wanted anyway it just allows people to replace transactions after a 6 hours long period - replacing them is already very easy to do ad-hoc even without the replacement flag but that full replacement it is currently painful to do for wallet developers without having to use different peering policies/full ,https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-319510720,319510720,
greenaddress,2017-08-01T22:06:29Z,conflicts; should I rebase and squash while at it?,https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-319510929,319510929,
petertodd,2017-08-03T15:35:40Z,@greenaddress +1,https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-320005975,320005975,
greenaddress,2017-09-04T23:31:57Z,"@luke-jr not sure i understand your first point\n\nI rebased as there was a conflict (new gArgs) and made sure feebumper.cpp handles the timeout too and added a test.",https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-327039039,327039039,
greenaddress,2017-12-09T12:13:04Z,"@MarcoFalke rebased\n\n@promag moved to setmocktime, factored out the function, removed the white space and updated to new style - thanks!\n\nMore feedback welcome. I think it would be good to have more tests (ideas?) and I tried to be the least intrusive here but perhaps people have some refactoring suggestions.\n\nedit: there's a bit more work needed as something broke with the rebase arou",https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-350456809,350456809,
petertodd,2017-12-09T19:58:56Z,utACK 927666539bd61da5038b752ee60d106b9577ca42,https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-350501619,350501619,
promag,2017-12-10T01:41:17Z,This test is failing https://github.com/bitcoin/bitcoin/blob/59d3dc85b698430f71f6e242a01a25a70c9ef397/test/functional/listtransactions.py#L180,https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-350518849,350518849,
greenaddress,2017-12-13T12:48:49Z,@promag added a test for parameter validation. I also think the value should be below or equal to mempool expiry/eviction (two weeks) but very open to suggestions and thanks for catching the other issues,https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-351381583,351381583,
greenaddress,2018-07-21T22:41:45Z,"@TheBlueMatt I rebased and added the 20 minutes buffer. I also made the wallet part and rpc part off by default such that it can be turned on once the network upgrades in a second release (and perhaps remove entirely the config option as I configured it as debug_only, won't show up w/ -help)\n\nThis means that unless a user sets -enablewalletreplacementtimeout=1 (0 by default) they won't see tra",https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-406827982,406827982,
greenaddress,2018-07-21T22:47:55Z,@promag if you have time I'd be keen on your feedback/re-review,https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-406828223,406828223,
practicalswift,2018-09-15T07:56:29Z,This PR doesn't compile when rebased on `master` :-),https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-421539460,421539460,
DrahtBot,2018-09-21T13:33:05Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#15639](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15639.html) (bitcoin-wallet tool: Drop libbitcoin_server",https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-423532289,423532289,
jnewbery,2018-11-21T23:22:51Z,"Definite concept ACK. I'd love to see some progress on this.\n\nOn the BIP question: I don't think this needs a BIP. My preference would be for documentation on design or node policy to live in https://github.com/bitcoin-core/docs.",https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-440847652,440847652,
ziggamon,2019-02-22T17:50:49Z,"Adding 2 cents:\n\nThe 6h limit seems arbitrary. For transactions that come in the hours after 9AM ET when Bitmex does their dump the network is vastly different than at other times.\n\nCurrent state of things is that the mempool clears out overnight almost every night. Hasn't been for _very_ long that it hasn't cleared out after two nights. \n\nWe accept 0-conf at Bitrefill (with certain ch",https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-466485121,466485121,
greenaddress,2019-02-22T18:07:20Z,"I'm in the process of rebasing and addressing nits/making sure the test pass.\n\n@ziggamon I prefer 6h but if it there's consensus for 72h I am open to make the change.",https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-466490569,466490569,
ziggamon,2019-02-22T18:33:07Z,"> This PR' aim is to improve user experience around stuck transactions without\n> affecting users of zero conf transactions.\n\nReminding about this stated goal :) \n\n72h would def break things much less than 6h, but still makes me wonder how many considerations one would need to be keeping in mind for what the rules are. \n\nI know this is just setting default behavior and it's all miner ",https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-466499377,466499377,
abitfan,2019-02-22T20:48:11Z,"NACK for 6h, \nthis pr benefits mostly newcomers and user experience is the last on the priorities list.",https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-466542106,466542106,
Sjors,2019-02-23T08:26:58Z,"Another argument in favor of 6 hours is that if even 3% of miners support full RBF then 6 hours is plenty of time for even a fairly lazy attacker to double spend. Although this pull request could impact that likeliness, because it's easier to reach those miners.\n\nIt may be that, as @ziggamon's points out, it's a bit contrived to build a feature that's essentially for wallets that support RBF, ",https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-466628871,466628871,
MarcoFalke,2019-03-04T18:46:57Z,"Adding 0.19.0 milestone. If the 6h is too controversial even though it probably represents a sane default per @Sjors, it could be bumped higher to avoid the controversy.",https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-469372511,469372511,
greenaddress,2019-03-08T13:53:33Z,@MarcoFalke rebased and addressed some formatting improvement suggestions on the test,https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-470935694,470935694,
gmaxwell,2019-03-11T23:16:31Z,"Subsequently to my earlier comments I now think this is kinda pointless: Testing without RBF set gave me 100%  confirmation or replacement rate for very low fee transactions within 20 blocks without the low fee txn rising to being minable by feerate presumably due to restarting nodes, and miners that replace anyways. Is this just motivated by either speculation on actual behaviour without measurin",https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-471778430,471778430,
petertodd,2019-03-13T01:21:17Z,"Gotta agree with @gmaxwell here.\n\nAlso, the myth that zeroconf transactions have any security recently lead to $195,000 CAD of publicly reported losses: https://globalnews.ca/news/5047918/calgary-police-nationwide-bitcoin-fraud/\n\nFull-RBF-by-default will help mitigate this misunderstanding. I also have personal interest in stopping this misunderstanding as other reporting on the subject ha",https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-472242603,472242603,
MarcoFalke,2019-04-05T22:45:18Z,"I disagree.\n\nIt is highly unlikely that regular users will use bumpfee (or other use cases of tx replacements) merely because observations suggest that miners are accepting full-rbf. This pull request would make it also mempool policy, which is useful when a wallet is not directly connected to miners, but maybe needs to do a few hops through network nodes.",https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-480444930,480444930,
DrahtBot,2019-04-10T14:22:46Z,<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase,https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-481712066,481712066,
Sjors,2019-04-23T17:33:52Z,"I did an n=1 experiment today where, trying to replace a single-input non-RBF transaction that pays 15 sat /  vbyte with one that pays 50 sat / vbyte.\n\nThe new transaction doesn't show up on any explorer, suggesting none of my peers is relaying it despite the huge fee bump. It's not like there's a list of known full-RBF peers to manually connect to either.\n\nThis is potentially different fr",https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-485900901,485900901,
ziggamon,2019-05-08T19:42:53Z,"Before going through the code, Is there any consensus on whether this is a good idea at all? Reminding of the debate around opt-in RBF. The opponents' argument was that it would lead to a slippery slope and removing 0-conf entirely. This seems like a step in this direction. Like it or not it is successfully used to a large extent, not just by our users.\n\nLet's evaluate some situations:\na) In",https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-490623405,490623405,
jnewbery,2019-05-08T21:31:25Z,"> Is there any consensus on whether this is a good idea at all?\n\nNo, I don't think consensus has been reached. The fact that you have legitimate concerns about it shows that we don't have consensus!\n\n> In status quo (i.e. mempool clears out almost every night) there is no need for this.\n\nCorrect - if the mempool clears out almost every night then there is no need for this.\n\n> Would",https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-490658422,490658422,
SomberNight,2019-05-08T23:11:48Z,"> Can somebody describe a specific scenario where a user would benefit from this change in network policy?\n\nNear the end of 2017, ""how much time do I need to wait until my transaction gets cancelled"" was a frequent question on IRC. The usual scenario was that the user had used either old software, or just a shitty wallet, that did not set RBF, and had set a low fee. This tx would then never ge",https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-490684636,490684636,
ziggamon,2019-05-09T13:21:48Z,"@jnewbery \n> Currently, there are wallets that can create replacement transactions but don't signal RBF by default (I believe this is the case with Bitcoin Core and Electrum wallet). If a user of one of those wallets sends a transaction using the defaults, finds that it's stuck and later wishes to bump the fee, they are unable to. \n\nRight. So we could estimate the usage of these two wallets ",https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-490901861,490901861,
jnewbery,2019-05-09T14:32:29Z,"> So, Signalpolitik. If that'st he goal then that should be discussed not in a github ticket or IRC but in more broad social angles.\n\nThat's not really what I meant. After 6/72/whatever hours, if my node receives a transaction that replaces a tx in my mempool, but with a larger fee, then I can be reasonably sure that the creator of that transaction could get it confirmed ahead of the original ",https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-490929792,490929792,
Sjors,2019-05-12T12:45:29Z,"Bitcoin Core GUI has been using RBF by default for a while. Bitcoin Core RPC doesn't, but I think we should assume RPC users know what they're doing (modulo bugs like #15878). I don't think this change is useful for Bitcoin Core _wallet_ users.\n\nThe wallet change does make sense conditional on the node policy change, but because the node only knows it's own policy, it could be source of confus",https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-491592578,491592578,
laanwj,2019-09-30T12:03:22Z,This PR seems to have gone inactive. Let me know if there's still interest in it and I'll reopen.,https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-536530677,536530677,
MarcoFalke,2019-09-30T20:11:22Z,An easy first step would be to make the RPC interface more flexible by reporting a string reason: #16490,https://github.com/bitcoin/bitcoin/pull/10823#issuecomment-536731053,536731053,
jonasschnelli,2017-07-14T19:06:30Z,Maybe use `SignalsOptInRBF()`,https://github.com/bitcoin/bitcoin/pull/10823#discussion_r127528160,127528160,src/validation.cpp
greenaddress,2017-07-14T19:50:08Z,I only moved the code but indeed that's a good idea (addressed in 38f4c85b47351d40700e088122317aa385c5ee65) - thanks!,https://github.com/bitcoin/bitcoin/pull/10823#discussion_r127535455,127535455,src/validation.cpp
promag,2017-09-05T00:07:02Z,Remove empty comment (not found in master).,https://github.com/bitcoin/bitcoin/pull/10823#discussion_r136877687,136877687,src/validation.cpp
promag,2017-09-05T00:22:46Z,Factor out duplicate implementation to a new function?,https://github.com/bitcoin/bitcoin/pull/10823#discussion_r136878332,136878332,src/wallet/feebumper.cpp
promag,2017-09-05T00:25:02Z,Use `setmocktime` instead?,https://github.com/bitcoin/bitcoin/pull/10823#discussion_r136878449,136878449,test/functional/bumpfee.py
promag,2017-09-05T00:25:39Z,Update to new style.,https://github.com/bitcoin/bitcoin/pull/10823#discussion_r136878471,136878471,src/validation.cpp
promag,2017-12-10T01:13:44Z,"Why stop `node[1]`?\n\nIf not, remove`stop_nodes` above and here can be:\n```py\ntest.restart_node(0, [""-prematurewitness"", ""-walletprematurewitness"", ""-mempoolreplacementtimeout=30""])\n```\nUse `restart_node` below.",https://github.com/bitcoin/bitcoin/pull/10823#discussion_r155936037,155936037,test/functional/bumpfee.py
promag,2017-12-10T01:22:05Z,Avoid 2nd call to `getrawmempool`.,https://github.com/bitcoin/bitcoin/pull/10823#discussion_r155936115,155936115,test/functional/bumpfee.py
promag,2017-12-10T01:26:45Z,IMO there should be better parameter validation. Validate (must be number and positive integer) and add tests? See https://github.com/bitcoin/bitcoin/blob/59d3dc85b698430f71f6e242a01a25a70c9ef397/test/functional/feature_logging.py#L33-L34,https://github.com/bitcoin/bitcoin/pull/10823#discussion_r155936178,155936178,src/init.cpp
promag,2017-12-10T01:32:26Z,Looks like this should be `BumpFeeTest` member (test = self)?,https://github.com/bitcoin/bitcoin/pull/10823#discussion_r155936238,155936238,test/functional/bumpfee.py
promag,2017-12-10T01:34:59Z,int64_t?,https://github.com/bitcoin/bitcoin/pull/10823#discussion_r155936255,155936255,src/validation.h
MarcoFalke,2017-12-13T16:00:33Z,nit: Comment needs update.,https://github.com/bitcoin/bitcoin/pull/10823#discussion_r156701106,156701106,src/policy/rbf.h
MarcoFalke,2017-12-13T16:03:39Z,Not sure if you might also want to check if it is accidentally(?) set above 6hours and print a warning?,https://github.com/bitcoin/bitcoin/pull/10823#discussion_r156702059,156702059,src/init.cpp
greenaddress,2017-12-13T16:35:29Z,"It's a good question. Would there be a good reason to set it above 6 hours if 6 hours is the default, especially long term?",https://github.com/bitcoin/bitcoin/pull/10823#discussion_r156712186,156712186,src/init.cpp
MarcoFalke,2017-12-13T18:04:35Z,"Probably not, since you'd be potentially censoring yourself from valid and about-to-be-mined txes.",https://github.com/bitcoin/bitcoin/pull/10823#discussion_r156736968,156736968,src/init.cpp
greenaddress,2017-12-13T18:12:54Z,"Maybe it can be useful in testing or to have old behavior, hence adding a log warning entry seems to me a good idea but i'll maybe wait for others to agree as we don't want to spam the logs either",https://github.com/bitcoin/bitcoin/pull/10823#discussion_r156738960,156738960,src/init.cpp
TheBlueMatt,2017-12-13T19:09:04Z,"Dunno that we want to support replacing a transaction in wallet based on this. If nothing else it needs a buffer in excess of the replacement timeout to ensure propagation works well, and probably shouldn't let the user override the replacement timeout in wallet. May also be good to wait some time for network upgrade, ie amybe this should be a separate PR in a separate release.",https://github.com/bitcoin/bitcoin/pull/10823#discussion_r156753076,156753076,src/wallet/feebumper.cpp
greenaddress,2017-12-13T19:27:43Z,"Fair enough, I'll move the wallet part to a new PR. What sort of buffer you had in mind?  a percentage of the replacement timeout, say 10%? or perhaps better to have fixed buffer of a few minutes?",https://github.com/bitcoin/bitcoin/pull/10823#discussion_r156757995,156757995,src/wallet/feebumper.cpp
TheBlueMatt,2017-12-13T19:38:20Z,"Just need something to capture the time for the original transaction to propagate. A few minutes is probably fine, but no reason not to be conservative...say, 20 minutes?",https://github.com/bitcoin/bitcoin/pull/10823#discussion_r156760920,156760920,src/wallet/feebumper.cpp
greenaddress,2017-12-13T19:50:42Z,Seems reasonable to me,https://github.com/bitcoin/bitcoin/pull/10823#discussion_r156764330,156764330,src/wallet/feebumper.cpp
greenaddress,2018-07-21T22:42:40Z,I think this is now all addressed,https://github.com/bitcoin/bitcoin/pull/10823#discussion_r204223462,204223462,src/wallet/feebumper.cpp
petertodd,2018-07-23T01:18:05Z,"20 minutes seems a bit long to me.\n\nHow long do transactions take to propagate to miners these days? Surely more like a minute or two? In the replacement case it's ok if not every last miner actually gets the replacement; having the occasional one missing isn't a big deal.\n\nHow about five minutes?",https://github.com/bitcoin/bitcoin/pull/10823#discussion_r204263936,204263936,src/validation.h
greenaddress,2018-07-23T08:18:59Z,I think 5 minutes would be fine. @TheBlueMatt ?,https://github.com/bitcoin/bitcoin/pull/10823#discussion_r204316325,204316325,src/validation.h
practicalswift,2018-09-15T07:57:24Z,~~Should be `const` reference instead?~~,https://github.com/bitcoin/bitcoin/pull/10823#discussion_r217878960,217878960,src/policy/rbf.cpp
MarcoFalke,2018-09-15T13:31:09Z,"txiter is already const_txiter, no need to change anything here",https://github.com/bitcoin/bitcoin/pull/10823#discussion_r217885077,217885077,src/policy/rbf.cpp
practicalswift,2018-09-21T08:34:06Z,"Replace with:\n\n```\nbool fReplacementOptOut = conflicting_pretimeout && !SignalsOptInRBF(*ptxConflicting);\n```\n\n`fReplacementOptOut` is not needed above :-)",https://github.com/bitcoin/bitcoin/pull/10823#discussion_r219421460,219421460,src/validation.cpp
Sjors,2019-02-08T22:04:25Z,Could also use a code comment to explain why this additional timeout is needed.,https://github.com/bitcoin/bitcoin/pull/10823#discussion_r255250320,255250320,src/validation.h
greenaddress,2019-02-22T18:48:47Z,@Sjors added a comment,https://github.com/bitcoin/bitcoin/pull/10823#discussion_r259466948,259466948,src/validation.h
practicalswift,2019-02-25T23:40:35Z,Indentation seems a bit off here. Consider using `black` :-),https://github.com/bitcoin/bitcoin/pull/10823#discussion_r260067600,260067600,test/functional/wallet_bumpfee.py
greenaddress,2019-02-26T19:13:32Z,"Yes looks off, you are right.\n\nWhat is black?",https://github.com/bitcoin/bitcoin/pull/10823#discussion_r260443220,260443220,test/functional/wallet_bumpfee.py
practicalswift,2019-02-26T20:04:26Z,"`black` is the new hot Python equivalent of `go fmt`. It is currently taking the open source Python world by storm! :-)\n\nTry: `pip3 install black && black file_to_format.py`",https://github.com/bitcoin/bitcoin/pull/10823#discussion_r260463692,260463692,test/functional/wallet_bumpfee.py
MarcoFalke,2019-02-26T20:13:33Z,"@practicalswift black will reformat the whole file, I don't think this is something we desire right now or should ask contributors to do",https://github.com/bitcoin/bitcoin/pull/10823#discussion_r260467298,260467298,test/functional/wallet_bumpfee.py
MarcoFalke,2019-02-26T20:15:50Z,"Also, leaving feedback about whitespace in a review without leaving any other non-style comments about the code is distracting to the author and other reviewers",https://github.com/bitcoin/bitcoin/pull/10823#discussion_r260468181,260468181,test/functional/wallet_bumpfee.py
practicalswift,2019-02-26T20:23:01Z,`black` was suggested as a way to easily obtain a sane formatting suggestion for the block in question. Reformatting the whole file as part of this PR is obviously a very bad idea :-),https://github.com/bitcoin/bitcoin/pull/10823#discussion_r260470965,260470965,test/functional/wallet_bumpfee.py
greenaddress,2019-03-08T13:52:52Z,fixed in 03fa5a1b421be6c07bc5fc33118961d6da93fb65,https://github.com/bitcoin/bitcoin/pull/10823#discussion_r263782723,263782723,test/functional/wallet_bumpfee.py
jnewbery,2019-05-08T15:18:20Z,"I'm not a fan of changing the semantics of this function. Previously it meant ""does this transaction (or one of its unconfirmed parents) signal opt-in RBF?"". Now it means ""does my mempool configuration allow this tx to be replaced?""\n\nThat means that the `bip125-replaceable` field in `getmempoolentry` would now show true for transactions that aren't replaceable under bip125 rules for example.",https://github.com/bitcoin/bitcoin/pull/10823#discussion_r282115707,282115707,src/policy/rbf.cpp
jnewbery,2019-05-08T15:25:10Z,"Can remove the local `fReplacementOptOut` variable and test directly on the condition here:\n\n```\nif (!ExpiredOptInRBFPolicy(nAcceptTime, conflicting_time, replacement_timeout) &&\n    !SignalsOptInRBF(*ptxConflicting)) {\n    return state.Invalid(false, REJECT_DUPLICATE, ""txn-mempool-conflict"");\n}",https://github.com/bitcoin/bitcoin/pull/10823#discussion_r282118808,282118808,src/validation.cpp
jnewbery,2019-05-08T15:28:50Z,Move this constant to `feebumper.cpp` since it's only used there.,https://github.com/bitcoin/bitcoin/pull/10823#discussion_r282120553,282120553,src/validation.h
jnewbery,2019-05-08T19:06:56Z,I think we can remove this option entirely and replace it with an argument to `bumpfee`,https://github.com/bitcoin/bitcoin/pull/10823#discussion_r282206811,282206811,src/init.cpp
jnewbery,2019-05-08T21:32:26Z,"oops, ignore this. I missed that `fReplacementOptOut` was initialized to true.",https://github.com/bitcoin/bitcoin/pull/10823#discussion_r282257933,282257933,src/validation.cpp
PastaPastaPasta,2019-06-06T02:52:00Z,could you fix these brackets while here? ie same line?,https://github.com/bitcoin/bitcoin/pull/10823#discussion_r291004266,291004266,src/validation.cpp
jnewbery,2019-06-06T04:53:32Z,@PastaPastaPasta - PRs shouldn't 'fix' style for code they're not otherwise touching.,https://github.com/bitcoin/bitcoin/pull/10823#discussion_r291020012,291020012,src/validation.cpp
MarcoFalke,2019-07-18T20:06:51Z,I think we can remove this option entirely and add wallet and rpc support after the p2p change is merged,https://github.com/bitcoin/bitcoin/pull/10823#discussion_r305093287,305093287,src/init.cpp
