[
  {
    "sha": "03fa5a1b421be6c07bc5fc33118961d6da93fb65",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowM2ZhNWExYjQyMWJlNmMwN2JjNWZjMzMxMTg5NjFkNmRhOTNmYjY1",
    "commit": {
      "author": {
        "name": "Lawrence Nahum",
        "email": "lawrence@greenaddress.it",
        "date": "2017-07-12T22:00:57Z"
      },
      "committer": {
        "name": "Lawrence Nahum",
        "email": "lawrence@greenaddress.it",
        "date": "2019-03-08T13:51:09Z"
      },
      "message": "Allow all mempool transactions to be replaced after a configurable timeout (default 6h)",
      "tree": {
        "sha": "3b7ee4f09b7e8d7e8ecbbf655d964e1abeca3937",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b7ee4f09b7e8d7e8ecbbf655d964e1abeca3937"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/03fa5a1b421be6c07bc5fc33118961d6da93fb65",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEs3VJeyGdexbujr8sF6uLwyCxUdgFAlyCc00ACgkQF6uLwyCx\nUdgYxwgAhrKyv+xImuGD4szJXp7d/J/wOLuwFnrwehNbHxwBEc3GyNQqH/NEgWIJ\n3cvajZodwJLWM/3uEflfa4Q9ur4VAwltrup2q2QydGr5VXrQ7ZPNwR04b7rXKN/4\noPpzo3V+mwfqnHxnYPsYWy5zUwvID0+86lnFSJYM6D8UdCFgc6q4+ifdwffA5Xci\nlFNMT8vqcHUuASIFihyx2SpgrOzw3hCXe3h6TD8seY4nbrJAhisNfw27u5CJUyXb\nskzEq3bSYYwKwUeMwHsnhGRGAFe2scjnqQhV/2y9nFKW9SjZ/may50ompn+aeJI6\nxBvl7MJyDiYDMwWnQMljQpqS9G42YQ==\n=D5h/\n-----END PGP SIGNATURE-----",
        "payload": "tree 3b7ee4f09b7e8d7e8ecbbf655d964e1abeca3937\nparent d211edb34982aedbcd514ba3723396f2369ff286\nauthor Lawrence Nahum <lawrence@greenaddress.it> 1499896857 +0200\ncommitter Lawrence Nahum <lawrence@greenaddress.it> 1552053069 +0100\n\nAllow all mempool transactions to be replaced after a configurable timeout (default 6h)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03fa5a1b421be6c07bc5fc33118961d6da93fb65",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/03fa5a1b421be6c07bc5fc33118961d6da93fb65",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03fa5a1b421be6c07bc5fc33118961d6da93fb65/comments",
    "author": {
      "login": "greenaddress",
      "id": 5269298,
      "node_id": "MDQ6VXNlcjUyNjkyOTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5269298?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/greenaddress",
      "html_url": "https://github.com/greenaddress",
      "followers_url": "https://api.github.com/users/greenaddress/followers",
      "following_url": "https://api.github.com/users/greenaddress/following{/other_user}",
      "gists_url": "https://api.github.com/users/greenaddress/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/greenaddress/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/greenaddress/subscriptions",
      "organizations_url": "https://api.github.com/users/greenaddress/orgs",
      "repos_url": "https://api.github.com/users/greenaddress/repos",
      "events_url": "https://api.github.com/users/greenaddress/events{/privacy}",
      "received_events_url": "https://api.github.com/users/greenaddress/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "greenaddress",
      "id": 5269298,
      "node_id": "MDQ6VXNlcjUyNjkyOTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5269298?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/greenaddress",
      "html_url": "https://github.com/greenaddress",
      "followers_url": "https://api.github.com/users/greenaddress/followers",
      "following_url": "https://api.github.com/users/greenaddress/following{/other_user}",
      "gists_url": "https://api.github.com/users/greenaddress/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/greenaddress/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/greenaddress/subscriptions",
      "organizations_url": "https://api.github.com/users/greenaddress/orgs",
      "repos_url": "https://api.github.com/users/greenaddress/repos",
      "events_url": "https://api.github.com/users/greenaddress/events{/privacy}",
      "received_events_url": "https://api.github.com/users/greenaddress/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d211edb34982aedbcd514ba3723396f2369ff286",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d211edb34982aedbcd514ba3723396f2369ff286",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d211edb34982aedbcd514ba3723396f2369ff286"
      }
    ],
    "stats": {
      "total": 99,
      "additions": 78,
      "deletions": 21
    },
    "files": [
      {
        "sha": "2624d0920320507ccb3a8773f3ce4fd66184dc54",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03fa5a1b421be6c07bc5fc33118961d6da93fb65/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03fa5a1b421be6c07bc5fc33118961d6da93fb65/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=03fa5a1b421be6c07bc5fc33118961d6da93fb65",
        "patch": "@@ -516,6 +516,8 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-datacarrier\", strprintf(\"Relay and mine data carrier transactions (default: %u)\", DEFAULT_ACCEPT_DATACARRIER), false, OptionsCategory::NODE_RELAY);\n     gArgs.AddArg(\"-datacarriersize\", strprintf(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\", MAX_OP_RETURN_RELAY), false, OptionsCategory::NODE_RELAY);\n     gArgs.AddArg(\"-mempoolreplacement\", strprintf(\"Enable transaction replacement in the memory pool (default: %u)\", DEFAULT_ENABLE_REPLACEMENT), false, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-mempoolreplacementtimeout=<n>\", strprintf(\"Number of seconds after which transactions in mempool can be replaced (default: %u)\", DEFAULT_REPLACEMENT_TIMEOUT), false, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-enablewalletreplacementtimeout\", strprintf(\"Whether to enable wallet replacement timeout (default: %u)\", DEFAULT_WALLET_REPLACEMENT_TIMEOUT), true, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-minrelaytxfee=<amt>\", strprintf(\"Fees (in %s/kB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)\",\n         CURRENCY_UNIT, FormatMoney(DEFAULT_MIN_RELAY_TX_FEE)), false, OptionsCategory::NODE_RELAY);\n     gArgs.AddArg(\"-whitelistforcerelay\", strprintf(\"Force relay of transactions from whitelisted peers even if they violate local relay policy (default: %d)\", DEFAULT_WHITELISTFORCERELAY), false, OptionsCategory::NODE_RELAY);\n@@ -1171,6 +1173,12 @@ bool AppInitParameterInteraction()\n         fEnableReplacement = (std::find(vstrReplacementModes.begin(), vstrReplacementModes.end(), \"fee\") != vstrReplacementModes.end());\n     }\n \n+    const int64_t replacement_timeout = gArgs.GetArg(\"-mempoolreplacementtimeout\", DEFAULT_REPLACEMENT_TIMEOUT);\n+    const int64_t expiry = gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60;\n+    if (replacement_timeout < 0 || replacement_timeout > expiry) {\n+        return InitError(\"mempoolreplacementtimeout has to be a non negative number below or equal to mempoolexpiry (in seconds)\");\n+    }\n+\n     return true;\n }\n "
      },
      {
        "sha": "dda9f00936590e5e35a0b2492bee8d97a9e57a76",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03fa5a1b421be6c07bc5fc33118961d6da93fb65/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03fa5a1b421be6c07bc5fc33118961d6da93fb65/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=03fa5a1b421be6c07bc5fc33118961d6da93fb65",
        "patch": "@@ -201,8 +201,11 @@ class ChainImpl : public Chain\n     }\n     RBFTransactionState isRBFOptIn(const CTransaction& tx) override\n     {\n+        const int64_t replacement_timeout = gArgs.GetArg(\"-mempoolreplacementtimeout\", DEFAULT_REPLACEMENT_TIMEOUT);\n+        const bool enabled_replacement_timeout = gArgs.GetArg(\"-enablewalletreplacementtimeout\", DEFAULT_WALLET_REPLACEMENT_TIMEOUT);\n+\n         LOCK(::mempool.cs);\n-        return IsRBFOptIn(tx, ::mempool);\n+        return IsRBFOptIn(tx, ::mempool, GetTime(), replacement_timeout, enabled_replacement_timeout);\n     }\n     bool hasDescendantsInMempool(const uint256& txid) override\n     {"
      },
      {
        "sha": "b89cbeb60c7748b620dd4472d4ffd18fd177ebc4",
        "filename": "src/policy/rbf.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 6,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03fa5a1b421be6c07bc5fc33118961d6da93fb65/src/policy/rbf.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03fa5a1b421be6c07bc5fc33118961d6da93fb65/src/policy/rbf.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.cpp?ref=03fa5a1b421be6c07bc5fc33118961d6da93fb65",
        "patch": "@@ -14,14 +14,20 @@ bool SignalsOptInRBF(const CTransaction &tx)\n     return false;\n }\n \n-RBFTransactionState IsRBFOptIn(const CTransaction& tx, const CTxMemPool& pool)\n+bool ExpiredOptInRBFPolicy(const int64_t now, const int64_t accepted, const int64_t timeout)\n+{\n+    return now - accepted >= timeout;\n+}\n+\n+RBFTransactionState IsRBFOptIn(const CTransaction& tx, const CTxMemPool& pool, const int64_t now, const int64_t timeout, const bool enabled_replacement_timeout)\n {\n     AssertLockHeld(pool.cs);\n \n     CTxMemPool::setEntries setAncestors;\n \n     // First check the transaction itself.\n-    if (SignalsOptInRBF(tx)) {\n+    const int64_t conflicting_time = pool.info(tx.GetHash()).nTime;\n+    if ((enabled_replacement_timeout && ExpiredOptInRBFPolicy(now, conflicting_time, timeout)) || SignalsOptInRBF(tx)) {\n         return RBFTransactionState::REPLACEABLE_BIP125;\n     }\n \n@@ -33,13 +39,14 @@ RBFTransactionState IsRBFOptIn(const CTransaction& tx, const CTxMemPool& pool)\n \n     // If all the inputs have nSequence >= maxint-1, it still might be\n     // signaled for RBF if any unconfirmed parents have signaled.\n-    uint64_t noLimit = std::numeric_limits<uint64_t>::max();\n+    const uint64_t noLimit = std::numeric_limits<uint64_t>::max();\n     std::string dummy;\n-    CTxMemPoolEntry entry = *pool.mapTx.find(tx.GetHash());\n+    const CTxMemPoolEntry entry = *pool.mapTx.find(tx.GetHash());\n     pool.CalculateMemPoolAncestors(entry, setAncestors, noLimit, noLimit, noLimit, noLimit, dummy, false);\n \n-    for (CTxMemPool::txiter it : setAncestors) {\n-        if (SignalsOptInRBF(it->GetTx())) {\n+    for (const CTxMemPool::txiter it : setAncestors) {\n+        const int64_t ancestor_time = pool.info(it->GetTx().GetHash()).nTime;\n+        if ((enabled_replacement_timeout && ExpiredOptInRBFPolicy(now, ancestor_time, timeout)) || SignalsOptInRBF(it->GetTx())) {\n             return RBFTransactionState::REPLACEABLE_BIP125;\n         }\n     }"
      },
      {
        "sha": "23e60f066f7cc7d414fc3b86227653e6bfe46dc4",
        "filename": "src/policy/rbf.h",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03fa5a1b421be6c07bc5fc33118961d6da93fb65/src/policy/rbf.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03fa5a1b421be6c07bc5fc33118961d6da93fb65/src/policy/rbf.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.h?ref=03fa5a1b421be6c07bc5fc33118961d6da93fb65",
        "patch": "@@ -19,10 +19,13 @@ enum class RBFTransactionState {\n // opt-in to replace-by-fee, according to BIP 125\n bool SignalsOptInRBF(const CTransaction &tx);\n \n-// Determine whether an in-mempool transaction is signaling opt-in to RBF\n-// according to BIP 125\n+// Check whether the replacement policy has expired\n+bool ExpiredOptInRBFPolicy(const int64_t now, const int64_t accepted, const int64_t timeout);\n+\n+// Determine whether an in-mempool transaction has hit the expired replacement policy or\n+// is signaling opt-in to RBF according to BIP 125\n // This involves checking sequence numbers of the transaction, as well\n // as the sequence numbers of all in-mempool ancestors.\n-RBFTransactionState IsRBFOptIn(const CTransaction& tx, const CTxMemPool& pool) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n+RBFTransactionState IsRBFOptIn(const CTransaction& tx, const CTxMemPool& pool, const int64_t now, const int64_t timeout, const bool enabled_replacement_timeout) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n \n #endif // BITCOIN_POLICY_RBF_H"
      },
      {
        "sha": "21c7b3fcdeff146a5174abf7d7f110887bc9117e",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03fa5a1b421be6c07bc5fc33118961d6da93fb65/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03fa5a1b421be6c07bc5fc33118961d6da93fb65/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=03fa5a1b421be6c07bc5fc33118961d6da93fb65",
        "patch": "@@ -455,7 +455,10 @@ static void entryToJSON(const CTxMemPool& pool, UniValue& info, const CTxMemPool\n \n     // Add opt-in RBF status\n     bool rbfStatus = false;\n-    RBFTransactionState rbfState = IsRBFOptIn(tx, pool);\n+    const int64_t replacement_timeout = gArgs.GetArg(\"-mempoolreplacementtimeout\", DEFAULT_REPLACEMENT_TIMEOUT);\n+    const bool enabled_replacement_timeout = gArgs.GetArg(\"-enablewalletreplacementtimeout\", DEFAULT_WALLET_REPLACEMENT_TIMEOUT);\n+\n+    RBFTransactionState rbfState = IsRBFOptIn(tx, pool, GetTime(), replacement_timeout, enabled_replacement_timeout);\n     if (rbfState == RBFTransactionState::UNKNOWN) {\n         throw JSONRPCError(RPC_MISC_ERROR, \"Transaction is not in mempool\");\n     } else if (rbfState == RBFTransactionState::REPLACEABLE_BIP125) {"
      },
      {
        "sha": "38097bd8ed7d8bc9ff901e4fdaccd3ae096516b3",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03fa5a1b421be6c07bc5fc33118961d6da93fb65/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03fa5a1b421be6c07bc5fc33118961d6da93fb65/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=03fa5a1b421be6c07bc5fc33118961d6da93fb65",
        "patch": "@@ -377,7 +377,8 @@ class SaltedTxidHasher\n  * - a transaction which doesn't meet the minimum fee requirements.\n  * - a new transaction that double-spends an input of a transaction already in\n  * the pool where the new transaction does not meet the Replace-By-Fee\n- * requirements as defined in BIP 125.\n+ * requirements as defined in BIP 125 and the transaction(s) being replaced\n+ * has not been in mempool for over a timeout defaulting to 6 hours.\n  * - a non-standard transaction.\n  *\n  * CTxMemPool::mapTx, and CTxMemPoolEntry bookkeeping:"
      },
      {
        "sha": "67116d52503ffdb864b9a71663ded64053827f4c",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 8,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03fa5a1b421be6c07bc5fc33118961d6da93fb65/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03fa5a1b421be6c07bc5fc33118961d6da93fb65/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=03fa5a1b421be6c07bc5fc33118961d6da93fb65",
        "patch": "@@ -613,6 +613,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n \n     // Check for conflicts with in-memory transactions\n     std::set<uint256> setConflicts;\n+    const int64_t replacement_timeout = gArgs.GetArg(\"-mempoolreplacementtimeout\", DEFAULT_REPLACEMENT_TIMEOUT);\n     for (const CTxIn &txin : tx.vin)\n     {\n         const CTransaction* ptxConflicting = pool.GetConflictTx(txin.prevout);\n@@ -631,17 +632,13 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n                 // first-seen mempool behavior should be checking all\n                 // unconfirmed ancestors anyway; doing otherwise is hopelessly\n                 // insecure.\n+                // All transactions in mempool become replaceable after the timeout.\n                 bool fReplacementOptOut = true;\n                 if (fEnableReplacement)\n                 {\n-                    for (const CTxIn &_txin : ptxConflicting->vin)\n-                    {\n-                        if (_txin.nSequence <= MAX_BIP125_RBF_SEQUENCE)\n-                        {\n-                            fReplacementOptOut = false;\n-                            break;\n-                        }\n-                    }\n+                    const int64_t conflicting_time = pool.info(ptxConflicting->GetHash()).nTime;\n+                    const bool conflicting_pretimeout = !ExpiredOptInRBFPolicy(nAcceptTime, conflicting_time, replacement_timeout);\n+                    fReplacementOptOut = conflicting_pretimeout && !SignalsOptInRBF(*ptxConflicting);\n                 }\n                 if (fReplacementOptOut) {\n                     return state.Invalid(false, REJECT_DUPLICATE, \"txn-mempool-conflict\");"
      },
      {
        "sha": "d17d139ee7bad29318c0e9031c29cdf6e95b3cba",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03fa5a1b421be6c07bc5fc33118961d6da93fb65/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03fa5a1b421be6c07bc5fc33118961d6da93fb65/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=03fa5a1b421be6c07bc5fc33118961d6da93fb65",
        "patch": "@@ -123,6 +123,13 @@ static const unsigned int DEFAULT_BANSCORE_THRESHOLD = 100;\n static const bool DEFAULT_PERSIST_MEMPOOL = true;\n /** Default for -mempoolreplacement */\n static const bool DEFAULT_ENABLE_REPLACEMENT = true;\n+/** Default for -mempoolreplacementtimeout in seconds after which transactions in mempool are replaceable (i.e. 6 hours) */\n+static const int64_t DEFAULT_REPLACEMENT_TIMEOUT = 6 * 60 * 60;\n+/** Default for buffer in seconds on top of the timeout after which transactions in mempool are replaceable (i.e. 6 hours) in the GUI\n+ * This buffer is needed because otherwise is more likely ours peers will reject the transaction in case they received it substantial time after us */\n+static const int64_t REPLACEMENT_TIMEOUT_BUFFER = 5 * 60;\n+/** Default to enable/disable wallet/rpc ability to replace timeout transactions */\n+static const bool DEFAULT_WALLET_REPLACEMENT_TIMEOUT = false;\n /** Default for using fee filter */\n static const bool DEFAULT_FEEFILTER = true;\n "
      },
      {
        "sha": "583f7c613bc7b35913562cf1ec5230e53914c8f5",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03fa5a1b421be6c07bc5fc33118961d6da93fb65/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03fa5a1b421be6c07bc5fc33118961d6da93fb65/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=03fa5a1b421be6c07bc5fc33118961d6da93fb65",
        "patch": "@@ -38,7 +38,9 @@ static feebumper::Result PreconditionChecks(interfaces::Chain::Lock& locked_chai\n         return feebumper::Result::WALLET_ERROR;\n     }\n \n-    if (!SignalsOptInRBF(*wtx.tx)) {\n+    const int64_t replacement_timeout = gArgs.GetArg(\"-mempoolreplacementtimeout\", DEFAULT_REPLACEMENT_TIMEOUT);\n+    const bool replacement_timeout_enabled = gArgs.GetArg(\"-enablewalletreplacementtimeout\", DEFAULT_WALLET_REPLACEMENT_TIMEOUT);\n+    if (!(replacement_timeout_enabled && ExpiredOptInRBFPolicy(GetTime(), wtx.nTimeReceived, replacement_timeout + REPLACEMENT_TIMEOUT_BUFFER)) && !SignalsOptInRBF(*wtx.tx)) {\n         errors.push_back(\"Transaction is not BIP 125 replaceable\");\n         return feebumper::Result::WALLET_ERROR;\n     }"
      },
      {
        "sha": "8e277cde0d2ed82d9ab4c5000d3994f10fa9c912",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03fa5a1b421be6c07bc5fc33118961d6da93fb65/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03fa5a1b421be6c07bc5fc33118961d6da93fb65/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=03fa5a1b421be6c07bc5fc33118961d6da93fb65",
        "patch": "@@ -15,6 +15,7 @@\n \"\"\"\n from decimal import Decimal\n import io\n+import time\n \n from test_framework.blocktools import add_witness_commitment, create_block, create_coinbase, send_to_witness\n from test_framework.messages import BIP125_SEQUENCE_NUMBER, CTransaction\n@@ -63,6 +64,8 @@ def run_test(self):\n         test_simple_bumpfee_succeeds(rbf_node, peer_node, dest_address)\n         test_segwit_bumpfee_succeeds(rbf_node, dest_address)\n         test_nonrbf_bumpfee_fails(peer_node, dest_address)\n+        test_nonrbf_bumpfee_fails_then_succeeds(self, dest_address)\n+        test_mempool_replacement_timeout(self)\n         test_notmine_bumpfee_fails(rbf_node, peer_node, dest_address)\n         test_bumpfee_with_descendant_fails(rbf_node, rbf_node_address, dest_address)\n         test_small_output_fails(rbf_node, dest_address)\n@@ -134,6 +137,29 @@ def test_nonrbf_bumpfee_fails(peer_node, dest_address):\n     assert_raises_rpc_error(-4, \"not BIP 125 replaceable\", peer_node.bumpfee, not_rbfid)\n \n \n+def test_mempool_replacement_timeout(self):\n+    self.stop_node(0)\n+    err_msg = \"Error: mempoolreplacementtimeout has to be a non negative number below or equal to mempoolexpiry (in seconds)\"\n+    self.nodes[0].assert_start_raises_init_error([\"-mempoolreplacementtimeout=-1\"], err_msg)\n+    beyond_expiry = 60 * 60 + 1\n+    self.nodes[0].assert_start_raises_init_error([\"-mempoolexpiry=1\",\n+                                                 \"-mempoolreplacementtimeout=%d\" % (beyond_expiry)], err_msg)\n+    self.start_node(0)\n+\n+\n+def test_nonrbf_bumpfee_fails_then_succeeds(self, dest_address):\n+    self.restart_node(0, extra_args=[\"-mempoolreplacementtimeout=30\", \"-enablewalletreplacementtimeout=1\"])\n+    not_rbfid = self.nodes[0].sendtoaddress(dest_address, Decimal(\"0.00090000\"))\n+    assert_raises_rpc_error(-4, \"not BIP 125 replaceable\", self.nodes[0].bumpfee, not_rbfid)\n+    self.nodes[0].setmocktime(int(time.time()) + 30 + 5 * 60)\n+    bumped_tx = self.nodes[0].bumpfee(not_rbfid)\n+    rawmempool = self.nodes[0].getrawmempool()\n+    assert bumped_tx[\"txid\"] in rawmempool\n+    assert not_rbfid not in rawmempool\n+    self.nodes[0].setmocktime(0)\n+    self.restart_node(0)\n+\n+\n def test_notmine_bumpfee_fails(rbf_node, peer_node, dest_address):\n     # cannot bump fee unless the tx has only inputs that we own.\n     # here, the rbftx has a peer_node coin and then adds a rbf_node input"
      }
    ]
  }
]