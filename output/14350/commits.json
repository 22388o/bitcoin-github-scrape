[
  {
    "sha": "01a4c095c87500650663341533f000c6b613e9da",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMWE0YzA5NWM4NzUwMDY1MDY2MzM0MTUzM2YwMDBjNmI2MTNlOWRh",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-09-28T11:50:04Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-10-25T10:53:17Z"
      },
      "message": "wallet: Add WalletLocation utility class",
      "tree": {
        "sha": "b559b0826ae96da3b93c12b5940e14cb6ea2d4b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b559b0826ae96da3b93c12b5940e14cb6ea2d4b0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/01a4c095c87500650663341533f000c6b613e9da",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01a4c095c87500650663341533f000c6b613e9da",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/01a4c095c87500650663341533f000c6b613e9da",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01a4c095c87500650663341533f000c6b613e9da/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "613fc95ee4ead5962e960137e694aec5888e2680",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/613fc95ee4ead5962e960137e694aec5888e2680",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/613fc95ee4ead5962e960137e694aec5888e2680"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 31,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5d236d73e16ac02bb7a3591ff9fad8116f3fdd7b",
        "filename": "src/wallet/walletutil.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01a4c095c87500650663341533f000c6b613e9da/src/wallet/walletutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01a4c095c87500650663341533f000c6b613e9da/src/wallet/walletutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletutil.cpp?ref=01a4c095c87500650663341533f000c6b613e9da",
        "patch": "@@ -75,3 +75,14 @@ std::vector<fs::path> ListWalletDir()\n \n     return paths;\n }\n+\n+WalletLocation::WalletLocation(const std::string& name)\n+    : m_name(name)\n+    , m_path(fs::absolute(name, GetWalletDir()))\n+{\n+}\n+\n+bool WalletLocation::Exists() const\n+{\n+    return fs::symlink_status(m_path).type() != fs::file_not_found;\n+}"
      },
      {
        "sha": "ba2f9138419934d999b55b1bcf6357de5da12202",
        "filename": "src/wallet/walletutil.h",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01a4c095c87500650663341533f000c6b613e9da/src/wallet/walletutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01a4c095c87500650663341533f000c6b613e9da/src/wallet/walletutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletutil.h?ref=01a4c095c87500650663341533f000c6b613e9da",
        "patch": "@@ -15,4 +15,24 @@ fs::path GetWalletDir();\n //! Get wallets in wallet directory.\n std::vector<fs::path> ListWalletDir();\n \n+//! The WalletLocation class provides wallet information.\n+class WalletLocation final\n+{\n+    std::string m_name;\n+    fs::path m_path;\n+\n+public:\n+    explicit WalletLocation() {}\n+    explicit WalletLocation(const std::string& name);\n+\n+    //! Get wallet name.\n+    const std::string& GetName() const { return m_name; }\n+\n+    //! Get wallet absolute path.\n+    const fs::path& GetPath() const { return m_path; }\n+\n+    //! Return whether the wallet exists.\n+    bool Exists() const;\n+};\n+\n #endif // BITCOIN_WALLET_WALLETUTIL_H"
      }
    ]
  },
  {
    "sha": "65f3672f3b82a6fa30e5171f85bc8d8a29e0797e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NWYzNjcyZjNiODJhNmZhMzBlNTE3MWY4NWJjOGQ4YTI5ZTA3OTdl",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-09-28T15:50:18Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-10-25T11:33:26Z"
      },
      "message": "wallet: Refactor to use WalletLocation",
      "tree": {
        "sha": "5720ff98218142d22cd4ac3073da74e5927e3729",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5720ff98218142d22cd4ac3073da74e5927e3729"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65f3672f3b82a6fa30e5171f85bc8d8a29e0797e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65f3672f3b82a6fa30e5171f85bc8d8a29e0797e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/65f3672f3b82a6fa30e5171f85bc8d8a29e0797e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65f3672f3b82a6fa30e5171f85bc8d8a29e0797e/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "01a4c095c87500650663341533f000c6b613e9da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01a4c095c87500650663341533f000c6b613e9da",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/01a4c095c87500650663341533f000c6b613e9da"
      }
    ],
    "stats": {
      "total": 112,
      "additions": 54,
      "deletions": 58
    },
    "files": [
      {
        "sha": "decdadfb26e3489e5c0f26c16534c4e9360e9f04",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65f3672f3b82a6fa30e5171f85bc8d8a29e0797e/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65f3672f3b82a6fa30e5171f85bc8d8a29e0797e/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=65f3672f3b82a6fa30e5171f85bc8d8a29e0797e",
        "patch": "@@ -33,7 +33,7 @@ static void addCoin(const CAmount& nValue, const CWallet& wallet, std::vector<Ou\n // (https://github.com/bitcoin/bitcoin/issues/7883#issuecomment-224807484)\n static void CoinSelection(benchmark::State& state)\n {\n-    const CWallet wallet(\"dummy\", WalletDatabase::CreateDummy());\n+    const CWallet wallet(WalletLocation(), WalletDatabase::CreateDummy());\n     LOCK(wallet.cs_wallet);\n \n     // Add coins.\n@@ -57,7 +57,7 @@ static void CoinSelection(benchmark::State& state)\n }\n \n typedef std::set<CInputCoin> CoinSet;\n-static const CWallet testWallet(\"dummy\", WalletDatabase::CreateDummy());\n+static const CWallet testWallet(WalletLocation(), WalletDatabase::CreateDummy());\n std::vector<std::unique_ptr<CWalletTx>> wtxn;\n \n // Copied from src/wallet/test/coinselector_tests.cpp"
      },
      {
        "sha": "0cabb5f0beb1c6df246168481863993732e960f5",
        "filename": "src/qt/test/addressbooktests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65f3672f3b82a6fa30e5171f85bc8d8a29e0797e/src/qt/test/addressbooktests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65f3672f3b82a6fa30e5171f85bc8d8a29e0797e/src/qt/test/addressbooktests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/addressbooktests.cpp?ref=65f3672f3b82a6fa30e5171f85bc8d8a29e0797e",
        "patch": "@@ -56,7 +56,7 @@ void EditAddressAndSubmit(\n void TestAddAddressesToSendBook()\n {\n     TestChain100Setup test;\n-    std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(\"mock\", WalletDatabase::CreateMock());\n+    std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(WalletLocation(), WalletDatabase::CreateMock());\n     bool firstRun;\n     wallet->LoadWallet(firstRun);\n "
      },
      {
        "sha": "12dbf922f19160fcd820006d0cdaef8d051f97a3",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65f3672f3b82a6fa30e5171f85bc8d8a29e0797e/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65f3672f3b82a6fa30e5171f85bc8d8a29e0797e/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=65f3672f3b82a6fa30e5171f85bc8d8a29e0797e",
        "patch": "@@ -132,7 +132,7 @@ void TestGUI()\n     for (int i = 0; i < 5; ++i) {\n         test.CreateAndProcessBlock({}, GetScriptForRawPubKey(test.coinbaseKey.GetPubKey()));\n     }\n-    std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(\"mock\", WalletDatabase::CreateMock());\n+    std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(WalletLocation(), WalletDatabase::CreateMock());\n     bool firstRun;\n     wallet->LoadWallet(firstRun);\n     {"
      },
      {
        "sha": "ad22fe4a58b06d519fcd598bbd7601efdfc5005f",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65f3672f3b82a6fa30e5171f85bc8d8a29e0797e/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65f3672f3b82a6fa30e5171f85bc8d8a29e0797e/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=65f3672f3b82a6fa30e5171f85bc8d8a29e0797e",
        "patch": "@@ -211,15 +211,15 @@ bool WalletInit::Verify() const\n     std::set<fs::path> wallet_paths;\n \n     for (const auto& wallet_file : wallet_files) {\n-        fs::path wallet_path = fs::absolute(wallet_file, GetWalletDir());\n+        WalletLocation location(wallet_file);\n \n-        if (!wallet_paths.insert(wallet_path).second) {\n+        if (!wallet_paths.insert(location.GetPath()).second) {\n             return InitError(strprintf(_(\"Error loading wallet %s. Duplicate -wallet filename specified.\"), wallet_file));\n         }\n \n         std::string error_string;\n         std::string warning_string;\n-        bool verify_success = CWallet::Verify(wallet_file, salvage_wallet, error_string, warning_string);\n+        bool verify_success = CWallet::Verify(location, salvage_wallet, error_string, warning_string);\n         if (!error_string.empty()) InitError(error_string);\n         if (!warning_string.empty()) InitWarning(warning_string);\n         if (!verify_success) return false;\n@@ -236,7 +236,7 @@ bool WalletInit::Open() const\n     }\n \n     for (const std::string& walletFile : gArgs.GetArgs(\"-wallet\")) {\n-        std::shared_ptr<CWallet> pwallet = CWallet::CreateWalletFromFile(walletFile, fs::absolute(walletFile, GetWalletDir()));\n+        std::shared_ptr<CWallet> pwallet = CWallet::CreateWalletFromFile(WalletLocation(walletFile));\n         if (!pwallet) {\n             return false;\n         }"
      },
      {
        "sha": "8226bb85cbbdc801456b51c42dc908c952ec9535",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 15,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65f3672f3b82a6fa30e5171f85bc8d8a29e0797e/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65f3672f3b82a6fa30e5171f85bc8d8a29e0797e/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=65f3672f3b82a6fa30e5171f85bc8d8a29e0797e",
        "patch": "@@ -2405,26 +2405,26 @@ static UniValue loadwallet(const JSONRPCRequest& request)\n             + HelpExampleCli(\"loadwallet\", \"\\\"test.dat\\\"\")\n             + HelpExampleRpc(\"loadwallet\", \"\\\"test.dat\\\"\")\n         );\n-    std::string wallet_file = request.params[0].get_str();\n+\n+    WalletLocation location(request.params[0].get_str());\n     std::string error;\n \n-    fs::path wallet_path = fs::absolute(wallet_file, GetWalletDir());\n-    if (fs::symlink_status(wallet_path).type() == fs::file_not_found) {\n-        throw JSONRPCError(RPC_WALLET_NOT_FOUND, \"Wallet \" + wallet_file + \" not found.\");\n-    } else if (fs::is_directory(wallet_path)) {\n+    if (!location.Exists()) {\n+        throw JSONRPCError(RPC_WALLET_NOT_FOUND, \"Wallet \" + location.GetName() + \" not found.\");\n+    } else if (fs::is_directory(location.GetPath())) {\n         // The given filename is a directory. Check that there's a wallet.dat file.\n-        fs::path wallet_dat_file = wallet_path / \"wallet.dat\";\n+        fs::path wallet_dat_file = location.GetPath() / \"wallet.dat\";\n         if (fs::symlink_status(wallet_dat_file).type() == fs::file_not_found) {\n-            throw JSONRPCError(RPC_WALLET_NOT_FOUND, \"Directory \" + wallet_file + \" does not contain a wallet.dat file.\");\n+            throw JSONRPCError(RPC_WALLET_NOT_FOUND, \"Directory \" + location.GetName() + \" does not contain a wallet.dat file.\");\n         }\n     }\n \n     std::string warning;\n-    if (!CWallet::Verify(wallet_file, false, error, warning)) {\n+    if (!CWallet::Verify(location, false, error, warning)) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet file verification failed: \" + error);\n     }\n \n-    std::shared_ptr<CWallet> const wallet = CWallet::CreateWalletFromFile(wallet_file, fs::absolute(wallet_file, GetWalletDir()));\n+    std::shared_ptr<CWallet> const wallet = CWallet::CreateWalletFromFile(location);\n     if (!wallet) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet loading failed.\");\n     }\n@@ -2458,7 +2458,6 @@ static UniValue createwallet(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"createwallet\", \"\\\"testwallet\\\"\")\n         );\n     }\n-    std::string wallet_name = request.params[0].get_str();\n     std::string error;\n     std::string warning;\n \n@@ -2467,17 +2466,17 @@ static UniValue createwallet(const JSONRPCRequest& request)\n         disable_privatekeys = request.params[1].get_bool();\n     }\n \n-    fs::path wallet_path = fs::absolute(wallet_name, GetWalletDir());\n-    if (fs::symlink_status(wallet_path).type() != fs::file_not_found) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet \" + wallet_name + \" already exists.\");\n+    WalletLocation location(request.params[0].get_str());\n+    if (location.Exists()) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet \" + location.GetName() + \" already exists.\");\n     }\n \n     // Wallet::Verify will check if we're trying to create a wallet with a duplication name.\n-    if (!CWallet::Verify(wallet_name, false, error, warning)) {\n+    if (!CWallet::Verify(location, false, error, warning)) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet file verification failed: \" + error);\n     }\n \n-    std::shared_ptr<CWallet> const wallet = CWallet::CreateWalletFromFile(wallet_name, fs::absolute(wallet_name, GetWalletDir()), (disable_privatekeys ? (uint64_t)WALLET_FLAG_DISABLE_PRIVATE_KEYS : 0));\n+    std::shared_ptr<CWallet> const wallet = CWallet::CreateWalletFromFile(location, (disable_privatekeys ? (uint64_t)WALLET_FLAG_DISABLE_PRIVATE_KEYS : 0));\n     if (!wallet) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet creation failed.\");\n     }"
      },
      {
        "sha": "a9464870ea0ff7d955fd8d96870b04c0fa75a018",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65f3672f3b82a6fa30e5171f85bc8d8a29e0797e/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65f3672f3b82a6fa30e5171f85bc8d8a29e0797e/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=65f3672f3b82a6fa30e5171f85bc8d8a29e0797e",
        "patch": "@@ -28,7 +28,7 @@ std::vector<std::unique_ptr<CWalletTx>> wtxn;\n typedef std::set<CInputCoin> CoinSet;\n \n static std::vector<COutput> vCoins;\n-static CWallet testWallet(\"dummy\", WalletDatabase::CreateDummy());\n+static CWallet testWallet(WalletLocation(), WalletDatabase::CreateDummy());\n static CAmount balance = 0;\n \n CoinEligibilityFilter filter_standard(1, 6, 0);"
      },
      {
        "sha": "d42209ab1514a8c54d0e608cf010216d7500feb1",
        "filename": "src/wallet/test/wallet_test_fixture.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65f3672f3b82a6fa30e5171f85bc8d8a29e0797e/src/wallet/test/wallet_test_fixture.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65f3672f3b82a6fa30e5171f85bc8d8a29e0797e/src/wallet/test/wallet_test_fixture.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_test_fixture.cpp?ref=65f3672f3b82a6fa30e5171f85bc8d8a29e0797e",
        "patch": "@@ -6,9 +6,10 @@\n \n #include <rpc/server.h>\n #include <wallet/db.h>\n+#include <wallet/rpcwallet.h>\n \n WalletTestingSetup::WalletTestingSetup(const std::string& chainName):\n-    TestingSetup(chainName), m_wallet(\"mock\", WalletDatabase::CreateMock())\n+    TestingSetup(chainName), m_wallet(WalletLocation(), WalletDatabase::CreateMock())\n {\n     bool fFirstRun;\n     m_wallet.LoadWallet(fFirstRun);"
      },
      {
        "sha": "269a916829094779ed50dc09b0dfcbf1c3dfc6ad",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65f3672f3b82a6fa30e5171f85bc8d8a29e0797e/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65f3672f3b82a6fa30e5171f85bc8d8a29e0797e/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=65f3672f3b82a6fa30e5171f85bc8d8a29e0797e",
        "patch": "@@ -46,7 +46,7 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n     // Verify ScanForWalletTransactions picks up transactions in both the old\n     // and new block files.\n     {\n-        CWallet wallet(\"dummy\", WalletDatabase::CreateDummy());\n+        CWallet wallet(WalletLocation(), WalletDatabase::CreateDummy());\n         AddKey(wallet, coinbaseKey);\n         WalletRescanReserver reserver(&wallet);\n         reserver.reserve();\n@@ -61,7 +61,7 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n     // Verify ScanForWalletTransactions only picks transactions in the new block\n     // file.\n     {\n-        CWallet wallet(\"dummy\", WalletDatabase::CreateDummy());\n+        CWallet wallet(WalletLocation(), WalletDatabase::CreateDummy());\n         AddKey(wallet, coinbaseKey);\n         WalletRescanReserver reserver(&wallet);\n         reserver.reserve();\n@@ -73,7 +73,7 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n     // before the missing block, and success for a key whose creation time is\n     // after.\n     {\n-        std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(\"dummy\", WalletDatabase::CreateDummy());\n+        std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(WalletLocation(), WalletDatabase::CreateDummy());\n         AddWallet(wallet);\n         UniValue keys;\n         keys.setArray();\n@@ -134,7 +134,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n \n     // Import key into wallet and call dumpwallet to create backup file.\n     {\n-        std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(\"dummy\", WalletDatabase::CreateDummy());\n+        std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(WalletLocation(), WalletDatabase::CreateDummy());\n         LOCK(wallet->cs_wallet);\n         wallet->mapKeyMetadata[coinbaseKey.GetPubKey().GetID()].nCreateTime = KEY_TIME;\n         wallet->AddKeyPubKey(coinbaseKey, coinbaseKey.GetPubKey());\n@@ -150,7 +150,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n     // Call importwallet RPC and verify all blocks with timestamps >= BLOCK_TIME\n     // were scanned, and no prior blocks were scanned.\n     {\n-        std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(\"dummy\", WalletDatabase::CreateDummy());\n+        std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(WalletLocation(), WalletDatabase::CreateDummy());\n \n         JSONRPCRequest request;\n         request.params.setArray();\n@@ -180,7 +180,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n // debit functions.\n BOOST_FIXTURE_TEST_CASE(coin_mark_dirty_immature_credit, TestChain100Setup)\n {\n-    CWallet wallet(\"dummy\", WalletDatabase::CreateDummy());\n+    CWallet wallet(WalletLocation(), WalletDatabase::CreateDummy());\n     CWalletTx wtx(&wallet, m_coinbase_txns.back());\n     LOCK2(cs_main, wallet.cs_wallet);\n     wtx.hashBlock = chainActive.Tip()->GetBlockHash();\n@@ -273,7 +273,7 @@ class ListCoinsTestingSetup : public TestChain100Setup\n     ListCoinsTestingSetup()\n     {\n         CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n-        wallet = MakeUnique<CWallet>(\"mock\", WalletDatabase::CreateMock());\n+        wallet = MakeUnique<CWallet>(WalletLocation(), WalletDatabase::CreateMock());\n         bool firstRun;\n         wallet->LoadWallet(firstRun);\n         AddKey(*wallet, coinbaseKey);\n@@ -377,7 +377,7 @@ BOOST_FIXTURE_TEST_CASE(ListCoins, ListCoinsTestingSetup)\n \n BOOST_FIXTURE_TEST_CASE(wallet_disableprivkeys, TestChain100Setup)\n {\n-    std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(\"dummy\", WalletDatabase::CreateDummy());\n+    std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(WalletLocation(), WalletDatabase::CreateDummy());\n     wallet->SetWalletFlag(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n     BOOST_CHECK(!wallet->TopUpKeyPool(1000));\n     CPubKey pubkey;"
      },
      {
        "sha": "dc7369df80026d8593da3b6fd1e35c257f3e0826",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 13,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65f3672f3b82a6fa30e5171f85bc8d8a29e0797e/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65f3672f3b82a6fa30e5171f85bc8d8a29e0797e/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=65f3672f3b82a6fa30e5171f85bc8d8a29e0797e",
        "patch": "@@ -27,7 +27,6 @@\n #include <txmempool.h>\n #include <utilmoneystr.h>\n #include <wallet/fees.h>\n-#include <wallet/walletutil.h>\n \n #include <algorithm>\n #include <assert.h>\n@@ -3821,7 +3820,7 @@ void CWallet::MarkPreSplitKeys()\n     }\n }\n \n-bool CWallet::Verify(std::string wallet_file, bool salvage_wallet, std::string& error_string, std::string& warning_string)\n+bool CWallet::Verify(const WalletLocation& location, bool salvage_wallet, std::string& error_string, std::string& warning_string)\n {\n     // Do some checking on wallet path. It should be either a:\n     //\n@@ -3830,23 +3829,23 @@ bool CWallet::Verify(std::string wallet_file, bool salvage_wallet, std::string&\n     // 3. Path to a symlink to a directory.\n     // 4. For backwards compatibility, the name of a data file in -walletdir.\n     LOCK(cs_wallets);\n-    fs::path wallet_path = fs::absolute(wallet_file, GetWalletDir());\n+    const fs::path& wallet_path = location.GetPath();\n     fs::file_type path_type = fs::symlink_status(wallet_path).type();\n     if (!(path_type == fs::file_not_found || path_type == fs::directory_file ||\n           (path_type == fs::symlink_file && fs::is_directory(wallet_path)) ||\n-          (path_type == fs::regular_file && fs::path(wallet_file).filename() == wallet_file))) {\n+          (path_type == fs::regular_file && fs::path(location.GetName()).filename() == location.GetName()))) {\n         error_string = strprintf(\n               \"Invalid -wallet path '%s'. -wallet path should point to a directory where wallet.dat and \"\n               \"database/log.?????????? files can be stored, a location where such a directory could be created, \"\n               \"or (for backwards compatibility) the name of an existing data file in -walletdir (%s)\",\n-              wallet_file, GetWalletDir());\n+              location.GetName(), GetWalletDir());\n         return false;\n     }\n \n     // Make sure that the wallet path doesn't clash with an existing wallet path\n     for (auto wallet : GetWallets()) {\n-        if (fs::absolute(wallet->GetName(), GetWalletDir()) == wallet_path) {\n-            error_string = strprintf(\"Error loading wallet %s. Duplicate -wallet filename specified.\", wallet_file);\n+        if (wallet->GetLocation().GetPath() == wallet_path) {\n+            error_string = strprintf(\"Error loading wallet %s. Duplicate -wallet filename specified.\", location.GetName());\n             return false;\n         }\n     }\n@@ -3856,13 +3855,13 @@ bool CWallet::Verify(std::string wallet_file, bool salvage_wallet, std::string&\n             return false;\n         }\n     } catch (const fs::filesystem_error& e) {\n-        error_string = strprintf(\"Error loading wallet %s. %s\", wallet_file, fsbridge::get_filesystem_error_message(e));\n+        error_string = strprintf(\"Error loading wallet %s. %s\", location.GetName(), fsbridge::get_filesystem_error_message(e));\n         return false;\n     }\n \n     if (salvage_wallet) {\n         // Recover readable keypairs:\n-        CWallet dummyWallet(\"dummy\", WalletDatabase::CreateDummy());\n+        CWallet dummyWallet(WalletLocation(), WalletDatabase::CreateDummy());\n         std::string backup_filename;\n         if (!WalletBatch::Recover(wallet_path, (void *)&dummyWallet, WalletBatch::RecoverKeysOnlyFilter, backup_filename)) {\n             return false;\n@@ -3872,17 +3871,17 @@ bool CWallet::Verify(std::string wallet_file, bool salvage_wallet, std::string&\n     return WalletBatch::VerifyDatabaseFile(wallet_path, warning_string, error_string);\n }\n \n-std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(const std::string& name, const fs::path& path, uint64_t wallet_creation_flags)\n+std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(const WalletLocation& location, uint64_t wallet_creation_flags)\n {\n-    const std::string& walletFile = name;\n+    const std::string& walletFile = location.GetName();\n \n     // needed to restore wallet transaction meta data after -zapwallettxes\n     std::vector<CWalletTx> vWtx;\n \n     if (gArgs.GetBoolArg(\"-zapwallettxes\", false)) {\n         uiInterface.InitMessage(_(\"Zapping all transactions from wallet...\"));\n \n-        std::unique_ptr<CWallet> tempWallet = MakeUnique<CWallet>(name, WalletDatabase::Create(path));\n+        std::unique_ptr<CWallet> tempWallet = MakeUnique<CWallet>(location, WalletDatabase::Create(location.GetPath()));\n         DBErrors nZapWalletRet = tempWallet->ZapWalletTx(vWtx);\n         if (nZapWalletRet != DBErrors::LOAD_OK) {\n             InitError(strprintf(_(\"Error loading %s: Wallet corrupted\"), walletFile));\n@@ -3896,7 +3895,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(const std::string& name,\n     bool fFirstRun = true;\n     // TODO: Can't use std::make_shared because we need a custom deleter but\n     // should be possible to use std::allocate_shared.\n-    std::shared_ptr<CWallet> walletInstance(new CWallet(name, WalletDatabase::Create(path)), ReleaseWallet);\n+    std::shared_ptr<CWallet> walletInstance(new CWallet(location, WalletDatabase::Create(location.GetPath())), ReleaseWallet);\n     DBErrors nLoadWalletRet = walletInstance->LoadWallet(fFirstRun);\n     if (nLoadWalletRet != DBErrors::LOAD_OK)\n     {"
      },
      {
        "sha": "f365a2bb3c20aeebaf43a4f9a8271b5d7b31673b",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 9,
        "deletions": 11,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65f3672f3b82a6fa30e5171f85bc8d8a29e0797e/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65f3672f3b82a6fa30e5171f85bc8d8a29e0797e/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=65f3672f3b82a6fa30e5171f85bc8d8a29e0797e",
        "patch": "@@ -20,7 +20,7 @@\n #include <wallet/crypter.h>\n #include <wallet/coinselection.h>\n #include <wallet/walletdb.h>\n-#include <wallet/rpcwallet.h>\n+#include <wallet/walletutil.h>\n \n #include <algorithm>\n #include <atomic>\n@@ -676,12 +676,8 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n      */\n     bool AddWatchOnly(const CScript& dest) override EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n-    /**\n-     * Wallet filename from wallet=<path> command line or config option.\n-     * Used in debug logs and to send RPCs to the right wallet instance when\n-     * more than one wallet is loaded.\n-     */\n-    std::string m_name;\n+    /** Wallet location which includes wallet name (see WalletLocation). */\n+    WalletLocation m_location;\n \n     /** Internal database handle. */\n     std::unique_ptr<WalletDatabase> database;\n@@ -721,9 +717,11 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     bool SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet,\n                     const CCoinControl& coin_control, CoinSelectionParams& coin_selection_params, bool& bnb_used) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n+    const WalletLocation& GetLocation() const { return m_location; }\n+\n     /** Get a name for this wallet for logging/debugging purposes.\n      */\n-    const std::string& GetName() const { return m_name; }\n+    const std::string& GetName() const { return m_location.GetName(); }\n \n     void LoadKeyPool(int64_t nIndex, const CKeyPool &keypool) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     void MarkPreSplitKeys() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n@@ -739,7 +737,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     unsigned int nMasterKeyMaxID = 0;\n \n     /** Construct wallet with specified name and database implementation. */\n-    CWallet(std::string name, std::unique_ptr<WalletDatabase> database) : m_name(std::move(name)), database(std::move(database))\n+    CWallet(const WalletLocation& location, std::unique_ptr<WalletDatabase> database) : m_location(location), database(std::move(database))\n     {\n     }\n \n@@ -1058,10 +1056,10 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     bool MarkReplaced(const uint256& originalHash, const uint256& newHash);\n \n     //! Verify wallet naming and perform salvage on the wallet if required\n-    static bool Verify(std::string wallet_file, bool salvage_wallet, std::string& error_string, std::string& warning_string);\n+    static bool Verify(const WalletLocation& location, bool salvage_wallet, std::string& error_string, std::string& warning_string);\n \n     /* Initializes the wallet, returns a new CWallet instance or a null pointer in case of an error */\n-    static std::shared_ptr<CWallet> CreateWalletFromFile(const std::string& name, const fs::path& path, uint64_t wallet_creation_flags = 0);\n+    static std::shared_ptr<CWallet> CreateWalletFromFile(const WalletLocation& location, uint64_t wallet_creation_flags = 0);\n \n     /**\n      * Wallet post-init setup"
      },
      {
        "sha": "adb7a0c57792201c395bc2dc0b7a64e4e8e5502d",
        "filename": "test/lint/lint-circular-dependencies.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65f3672f3b82a6fa30e5171f85bc8d8a29e0797e/test/lint/lint-circular-dependencies.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65f3672f3b82a6fa30e5171f85bc8d8a29e0797e/test/lint/lint-circular-dependencies.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-circular-dependencies.sh?ref=65f3672f3b82a6fa30e5171f85bc8d8a29e0797e",
        "patch": "@@ -29,7 +29,6 @@ EXPECTED_CIRCULAR_DEPENDENCIES=(\n     \"validation -> validationinterface -> validation\"\n     \"wallet/coincontrol -> wallet/wallet -> wallet/coincontrol\"\n     \"wallet/fees -> wallet/wallet -> wallet/fees\"\n-    \"wallet/rpcwallet -> wallet/wallet -> wallet/rpcwallet\"\n     \"wallet/wallet -> wallet/walletdb -> wallet/wallet\"\n     \"policy/fees -> policy/policy -> validation -> policy/fees\"\n     \"policy/rbf -> txmempool -> validation -> policy/rbf\""
      }
    ]
  }
]