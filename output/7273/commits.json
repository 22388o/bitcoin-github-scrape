[
  {
    "sha": "6a65143731c9d95b9b55dc0c42435648276684b7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YTY1MTQzNzMxYzlkOTViOWI1NWRjMGM0MjQzNTY0ODI3NjY4NGI3",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-12-23T20:56:17Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-03-14T08:42:59Z"
      },
      "message": "[Wallet] Add hdkeystore\n- master seeds are kept seperated and can be encrypted",
      "tree": {
        "sha": "0204769cb71bb38a3ce55d0c5417d083cd040746",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0204769cb71bb38a3ce55d0c5417d083cd040746"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6a65143731c9d95b9b55dc0c42435648276684b7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJW5nmTAAoJECnUvLZBb1Ps8BwP/R8bgwevPGitKToVakfU0Reh\n+BV8moMlavGL8juazVKlNfH0eJShy88fNiVLZoaHCNlvY7AWVsSjm1Uw+z8c4jQM\nO0jbNDf7H+uiLHoTlBbR8s27FfmrMYpSgQzB3xYvOvdT3PxgDnhGn2FIuJtrMaoH\n00jqwzGkfPiDJQWWwzrAQW2zR5m1FcPuzaBvN06x1LML44YP8xM7HGXik6TnzzB3\neYU2vcCpQ3cK1OvTlXV+NRkiYLLvvkLZIL8mm3InwafArrX/1E3fsEfWKBWbyI2n\nQVBaNdsN0wpVMYnItJCJHiuMSEv1bJKg98VAudjTs38M5VHO05qLjtknQtxHLX5W\nith8gvNQf25VihTcYR3rrGJEEc4ZboZA2AFKv7u7P4DbogtkGYRkrxpnbNTS1tF3\ncyWJNSQUVn4qTJfXWDS4OB7lOopUdttdPlte/UIKEQae2mxgKk1JcCGh2hsTIlGZ\n1AqVFCdO8YZRd8z9vNDTtbE07cgyXWkzw3xXaNPPYIuppzHVmNrCd+JQCFxxGTDc\nZDqdEg5o0F7NqyiFqqh5EPB+mHZxyvRh9wMYnFUal3acG6ohb2WEEae9n/iwQPaf\nj+3JSLiqorvN+U1mw7F2efZsSjBx6a4Gxu3PgabaYNwqu63YY8Rdb2A/NvrXsH3r\nUXRupJDxifsbdcG8Cpk1\n=7pMr\n-----END PGP SIGNATURE-----",
        "payload": "tree 0204769cb71bb38a3ce55d0c5417d083cd040746\nparent b24266c20748b871dd39243bc1488ce1070ad331\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1450904177 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1457944979 +0100\n\n[Wallet] Add hdkeystore\n- master seeds are kept seperated and can be encrypted\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a65143731c9d95b9b55dc0c42435648276684b7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6a65143731c9d95b9b55dc0c42435648276684b7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a65143731c9d95b9b55dc0c42435648276684b7/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b24266c20748b871dd39243bc1488ce1070ad331",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b24266c20748b871dd39243bc1488ce1070ad331",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b24266c20748b871dd39243bc1488ce1070ad331"
      }
    ],
    "stats": {
      "total": 565,
      "additions": 530,
      "deletions": 35
    },
    "files": [
      {
        "sha": "92f1520e7d29c5be1cda3f0ae375c4a6efa6500d",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a65143731c9d95b9b55dc0c42435648276684b7/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a65143731c9d95b9b55dc0c42435648276684b7/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=6a65143731c9d95b9b55dc0c42435648276684b7",
        "patch": "@@ -155,6 +155,7 @@ BITCOIN_CORE_H = \\\n   wallet/crypter.h \\\n   wallet/db.h \\\n   wallet/rpcwallet.h \\\n+  wallet/hdkeystore.h \\\n   wallet/wallet.h \\\n   wallet/wallet_ismine.h \\\n   wallet/walletdb.h \\\n@@ -225,6 +226,7 @@ libbitcoin_wallet_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libbitcoin_wallet_a_SOURCES = \\\n   wallet/crypter.cpp \\\n   wallet/db.cpp \\\n+  wallet/hdkeystore.cpp \\\n   wallet/rpcdump.cpp \\\n   wallet/rpcwallet.cpp \\\n   wallet/wallet.cpp \\"
      },
      {
        "sha": "5a634f466f6ecfaaf87213e8566d16763822f04d",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a65143731c9d95b9b55dc0c42435648276684b7/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a65143731c9d95b9b55dc0c42435648276684b7/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=6a65143731c9d95b9b55dc0c42435648276684b7",
        "patch": "@@ -89,6 +89,7 @@ if ENABLE_WALLET\n BITCOIN_TESTS += \\\n   test/accounting_tests.cpp \\\n   wallet/test/wallet_tests.cpp \\\n+  wallet/test/hdkeystore_tests.cpp \\\n   test/rpc_wallet_tests.cpp\n endif\n "
      },
      {
        "sha": "cea64c00901cd8aa248416fbd72f34c06412fc44",
        "filename": "src/wallet/crypter.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a65143731c9d95b9b55dc0c42435648276684b7/src/wallet/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a65143731c9d95b9b55dc0c42435648276684b7/src/wallet/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.cpp?ref=6a65143731c9d95b9b55dc0c42435648276684b7",
        "patch": "@@ -292,3 +292,22 @@ bool CCryptoKeyStore::EncryptKeys(CKeyingMaterial& vMasterKeyIn)\n     }\n     return true;\n }\n+\n+bool CCryptoKeyStore::EncryptSeed(const CKeyingMaterial& seedIn, const uint256& seedPubHash, std::vector<unsigned char> &vchCiphertext) const\n+{\n+    LOCK(cs_KeyStore);\n+    if (!EncryptSecret(vMasterKey, seedIn, seedPubHash, vchCiphertext))\n+        return false;\n+\n+    return true;\n+}\n+\n+bool CCryptoKeyStore::DecryptSeed(const std::vector<unsigned char>& vchCiphertextIn, const uint256& seedPubHash, CKeyingMaterial& seedOut) const\n+{\n+    LOCK(cs_KeyStore);\n+\n+    if (!DecryptSecret(vMasterKey, vchCiphertextIn, seedPubHash, seedOut))\n+        return false;\n+\n+    return true;\n+}"
      },
      {
        "sha": "69a27ee0c8c840143f72654681f29bb4e31c896d",
        "filename": "src/wallet/crypter.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a65143731c9d95b9b55dc0c42435648276684b7/src/wallet/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a65143731c9d95b9b55dc0c42435648276684b7/src/wallet/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.h?ref=6a65143731c9d95b9b55dc0c42435648276684b7",
        "patch": "@@ -191,6 +191,9 @@ class CCryptoKeyStore : public CBasicKeyStore\n      * Note: Called without locks held.\n      */\n     boost::signals2::signal<void (CCryptoKeyStore* wallet)> NotifyStatusChanged;\n+\n+    bool EncryptSeed(const CKeyingMaterial& seedIn, const uint256& seedPubHash, std::vector<unsigned char> &vchCiphertext) const;\n+    bool DecryptSeed(const std::vector<unsigned char>& vchCiphertextIn, const uint256& seedPubHash, CKeyingMaterial& seedOut) const;\n };\n \n #endif // BITCOIN_WALLET_CRYPTER_H"
      },
      {
        "sha": "b9173a46d47dc8066cd90ac3ecf2450c119ae9b7",
        "filename": "src/wallet/hdkeystore.cpp",
        "status": "added",
        "additions": 247,
        "deletions": 0,
        "changes": 247,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a65143731c9d95b9b55dc0c42435648276684b7/src/wallet/hdkeystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a65143731c9d95b9b55dc0c42435648276684b7/src/wallet/hdkeystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/hdkeystore.cpp?ref=6a65143731c9d95b9b55dc0c42435648276684b7",
        "patch": "@@ -0,0 +1,247 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/hdkeystore.h\"\n+\n+#include \"base58.h\"\n+#include \"util.h\"\n+#include \"utilstrencodings.h\"\n+\n+#include <boost/algorithm/string.hpp>\n+#include <boost/foreach.hpp>\n+\n+bool CHDKeyStore::AddMasterSeed(const HDChainID& chainID, const CKeyingMaterial& masterSeed)\n+{\n+    LOCK(cs_KeyStore);\n+    if (IsCrypted())\n+    {\n+        std::vector<unsigned char> vchCryptedSecret;\n+        if (!EncryptSeed(masterSeed, chainID, vchCryptedSecret))\n+            return false;\n+\n+        mapHDCryptedMasterSeeds[chainID] = vchCryptedSecret;\n+        return true;\n+    }\n+    mapHDMasterSeeds[chainID] = masterSeed;\n+    return true;\n+}\n+\n+bool CHDKeyStore::AddCryptedMasterSeed(const HDChainID& chainID, const std::vector<unsigned char>& vchCryptedSecret)\n+{\n+    LOCK(cs_KeyStore);\n+    mapHDCryptedMasterSeeds[chainID] = vchCryptedSecret;\n+    return true;\n+}\n+\n+bool CHDKeyStore::GetMasterSeed(const HDChainID& chainID, CKeyingMaterial& seedOut) const\n+{\n+    LOCK(cs_KeyStore);\n+    if (!IsCrypted())\n+    {\n+        std::map<HDChainID, CKeyingMaterial >::const_iterator it=mapHDMasterSeeds.find(chainID);\n+        if (it == mapHDMasterSeeds.end())\n+            return false;\n+\n+        seedOut = it->second;\n+        return true;\n+    }\n+    else\n+    {\n+        std::map<HDChainID, std::vector<unsigned char> >::const_iterator it=mapHDCryptedMasterSeeds.find(chainID);\n+        if (it == mapHDCryptedMasterSeeds.end())\n+            return false;\n+\n+        std::vector<unsigned char> vchCryptedSecret = it->second;\n+        if (!DecryptSeed(vchCryptedSecret, chainID, seedOut))\n+            return false;\n+\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool CHDKeyStore::EncryptSeeds()\n+{\n+    LOCK(cs_KeyStore);\n+    for (std::map<HDChainID, CKeyingMaterial >::iterator it = mapHDMasterSeeds.begin(); it != mapHDMasterSeeds.end(); ++it)\n+    {\n+        std::vector<unsigned char> vchCryptedSecret;\n+        if (!EncryptSeed(it->second, it->first, vchCryptedSecret))\n+            return false;\n+        AddCryptedMasterSeed(it->first, vchCryptedSecret);\n+    }\n+    mapHDMasterSeeds.clear();\n+    return true;\n+}\n+\n+bool CHDKeyStore::GetCryptedMasterSeed(const HDChainID& chainID, std::vector<unsigned char>& vchCryptedSecret) const\n+{\n+    LOCK(cs_KeyStore);\n+    if (!IsCrypted())\n+        return false;\n+\n+    std::map<HDChainID, std::vector<unsigned char> >::const_iterator it=mapHDCryptedMasterSeeds.find(chainID);\n+    if (it == mapHDCryptedMasterSeeds.end())\n+        return false;\n+\n+    vchCryptedSecret = it->second;\n+    return true;\n+}\n+\n+bool CHDKeyStore::GetAvailableChainIDs(std::vector<HDChainID>& chainIDs)\n+{\n+    LOCK(cs_KeyStore);\n+    chainIDs.clear();\n+\n+    if (IsCrypted())\n+    {\n+        for (std::map<HDChainID, std::vector<unsigned char> >::iterator it = mapHDCryptedMasterSeeds.begin(); it != mapHDCryptedMasterSeeds.end(); ++it) {\n+            chainIDs.push_back(it->first);\n+        }\n+    }\n+    else\n+    {\n+        for (std::map<HDChainID, CKeyingMaterial >::iterator it = mapHDMasterSeeds.begin(); it != mapHDMasterSeeds.end(); ++it) {\n+            chainIDs.push_back(it->first);\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+bool CHDKeyStore::PrivateKeyDerivation(const std::string keypath, const HDChainID& chainID, CExtKey& extKeyOut) const\n+{\n+    std::vector<std::string> pathFragments;\n+    boost::split(pathFragments, keypath, boost::is_any_of(\"/\"));\n+\n+    CExtKey extKey;\n+    CExtKey parentKey;\n+    BOOST_FOREACH(std::string fragment, pathFragments)\n+    {\n+        bool harden = false;\n+        if (*fragment.rbegin() == '\\'' || *fragment.rbegin() == 'h')\n+        {\n+            harden = true;\n+            fragment = fragment.substr(0,fragment.size()-1);\n+        }\n+\n+        if (fragment == \"m\")\n+        {\n+            CExtKey bip32MasterKey;\n+            CKeyingMaterial masterSeed;\n+\n+            // get master seed\n+            if (!GetMasterSeed(chainID, masterSeed))\n+                return false;\n+\n+            bip32MasterKey.SetMaster(&masterSeed[0], masterSeed.size());\n+            parentKey = bip32MasterKey;\n+        }\n+        else if (fragment == \"c\")\n+            return false;\n+        else\n+        {\n+            CExtKey childKey;\n+            int32_t nIndex;\n+            if (!ParseInt32(fragment,&nIndex))\n+                return false;\n+            parentKey.Derive(childKey, (harden ? 0x80000000 : 0)+nIndex);\n+            parentKey = childKey;\n+        }\n+    }\n+    extKeyOut = parentKey;\n+    return true;\n+}\n+\n+bool CHDKeyStore::DeriveKey(const HDChainID chainID, const std::string keypath, CKey& keyOut) const\n+{\n+    //this methode required no locking\n+    CExtKey extKeyOut;\n+    if (!PrivateKeyDerivation(keypath, chainID, extKeyOut))\n+        return false;\n+\n+    keyOut = extKeyOut.key;\n+    return true;\n+}\n+\n+bool CHDKeyStore::DeriveKeyAtIndex(const HDChainID chainID, CKey& keyOut, std::string& keypathOut, unsigned int nIndex, bool internal) const\n+{\n+    CHDChain hdChain;\n+    if (!GetChain(chainID, hdChain))\n+        return false;\n+\n+    if (nIndex >= 0x80000000)\n+        throw std::runtime_error(\"CHDKeyStore::DerivePubKeyAtIndex(): No more available keys!\");\n+\n+    keypathOut = hdChain.keypathTemplate;\n+    boost::replace_all(keypathOut, \"c\", itostr(internal)); //replace the chain switch index\n+\n+    keypathOut += \"/\"+itostr(nIndex)+\"'\"; //add hardened flag\n+\n+    CExtKey extKeyOut;\n+    if (!PrivateKeyDerivation(keypathOut, chainID, extKeyOut))\n+        throw std::runtime_error(\"CHDKeyStore::DerivePubKeyAtIndex(): Private Key Derivation failed!\");\n+    keyOut = extKeyOut.key;\n+\n+    return true;\n+}\n+\n+unsigned int CHDKeyStore::GetNextChildIndex(const HDChainID& chainID, bool internal)\n+{\n+    std::vector<unsigned int> vIndices;\n+\n+    {\n+        LOCK(cs_KeyStore);\n+\n+        CHDChain hdChain;\n+        if (!GetChain(chainID, hdChain))\n+            return false;\n+\n+        std::string keypathBase = hdChain.keypathTemplate;\n+        boost::replace_all(keypathBase, \"c\", itostr(internal)); //replace the chain switch index\n+\n+        //get next unused child index\n+        for (std::map<CKeyID, CKeyMetadata>::iterator it = mapKeyMetadata.begin(); it != mapKeyMetadata.end(); ++it)\n+        {\n+            //skip non hd keys\n+            if (it->second.keypath.size() == 0)\n+                continue;\n+\n+            std::string keysBaseKeypath = it->second.keypath.substr(0, it->second.keypath.find_last_of(\"/\"));\n+            std::string childStr = it->second.keypath.substr(it->second.keypath.find_last_of(\"/\") + 1);\n+            boost::erase_all(childStr, \"'\");\n+            int32_t nChild;\n+            if(it->second.chainID == chainID &&\n+               it->second.keypath.substr(0, it->second.keypath.find_last_of(\"/\")) == keypathBase &&\n+               ParseInt32(childStr, &nChild))\n+            {\n+                vIndices.push_back(nChild);\n+            }\n+        }\n+    }\n+\n+    for (unsigned int i=0;i<0x80000000;i++)\n+        if (std::find(vIndices.begin(), vIndices.end(), i) == vIndices.end())\n+            return i;\n+\n+    return 0;\n+}\n+\n+bool CHDKeyStore::AddHDChain(const CHDChain& chain)\n+{\n+    LOCK(cs_KeyStore);\n+    mapChains[chain.chainID] = chain;\n+    return true;\n+}\n+\n+bool CHDKeyStore::GetChain(const HDChainID chainID, CHDChain& chainOut) const\n+{\n+    LOCK(cs_KeyStore);\n+    std::map<HDChainID, CHDChain>::const_iterator it=mapChains.find(chainID);\n+    if (it == mapChains.end())\n+        return false;\n+\n+    chainOut = it->second;\n+    return true;\n+}"
      },
      {
        "sha": "c8f07c02451750f6f7c02cc03fa9ca6d5a88bdd4",
        "filename": "src/wallet/hdkeystore.h",
        "status": "added",
        "additions": 156,
        "deletions": 0,
        "changes": 156,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a65143731c9d95b9b55dc0c42435648276684b7/src/wallet/hdkeystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a65143731c9d95b9b55dc0c42435648276684b7/src/wallet/hdkeystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/hdkeystore.h?ref=6a65143731c9d95b9b55dc0c42435648276684b7",
        "patch": "@@ -0,0 +1,156 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_HDKEYSTORE_H\n+#define BITCOIN_WALLET_HDKEYSTORE_H\n+\n+#include \"keystore.h\"\n+#include \"wallet/crypter.h\"\n+#include \"serialize.h\"\n+#include \"pubkey.h\"\n+\n+typedef uint256 HDChainID;\n+\n+class CKeyMetadata\n+{\n+public:\n+    static const int CURRENT_VERSION=2;\n+    int nVersion;\n+    int64_t nCreateTime; // 0 means unknown\n+    HDChainID chainID;\n+    std::string keypath;\n+\n+    CKeyMetadata()\n+    {\n+        SetNull();\n+    }\n+    CKeyMetadata(int64_t nCreateTime_)\n+    {\n+        nVersion = CKeyMetadata::CURRENT_VERSION;\n+        nCreateTime = nCreateTime_;\n+    }\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(this->nVersion);\n+        nVersion = this->nVersion;\n+        READWRITE(nCreateTime);\n+        if (nVersion >= 2)\n+        {\n+            READWRITE(keypath);\n+            if (keypath.size() > 0)\n+                READWRITE(chainID);\n+        }\n+    }\n+\n+    void SetNull()\n+    {\n+        nVersion = CKeyMetadata::CURRENT_VERSION;\n+        nCreateTime = 0;\n+        keypath.clear();\n+        chainID.SetNull();\n+    }\n+};\n+\n+/** class for representing a hd chain of keys. */\n+class CHDChain\n+{\n+public:\n+    static const int CURRENT_VERSION=1;\n+    int nVersion;\n+    bool usePubCKD;\n+    int64_t nCreateTime; // 0 means unknown\n+\n+    HDChainID chainID; //hash of the masterpubkey\n+    std::string keypathTemplate; //example \"m'/44'/0'/0'/c\"\n+\n+    CHDChain()\n+    {\n+        SetNull();\n+    }\n+\n+    CHDChain(int64_t nCreateTime_)\n+    {\n+        SetNull();\n+        nCreateTime = nCreateTime_;\n+    }\n+\n+    bool IsValid()\n+    {\n+        return (keypathTemplate.size() > 0);\n+    }\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(this->nVersion);\n+        nVersion = this->nVersion;\n+\n+        READWRITE(nCreateTime);\n+        READWRITE(chainID);\n+        READWRITE(keypathTemplate);\n+    }\n+\n+    void SetNull()\n+    {\n+        nVersion = CHDChain::CURRENT_VERSION;\n+        nCreateTime = 0;\n+        chainID.SetNull();\n+        keypathTemplate.clear();\n+    }\n+};\n+\n+class CHDKeyStore : public CCryptoKeyStore\n+{\n+protected:\n+    std::map<HDChainID, CKeyingMaterial > mapHDMasterSeeds; //master seeds are stored outside of CHDChain (mind crypting)\n+    std::map<HDChainID, std::vector<unsigned char> > mapHDCryptedMasterSeeds;\n+    std::map<HDChainID, CHDChain> mapChains; //all available chains\n+\n+    //!private key derivition of a ext priv key\n+    bool PrivateKeyDerivation(const std::string chainPath, const HDChainID& chainID, CExtKey& extKeyOut) const;\n+\n+    //!derive key from a CHDPubKey object\n+    bool DeriveKey(const HDChainID chainID, const std::string keypath, CKey& keyOut) const;\n+\n+public:\n+    std::map<CKeyID, CKeyMetadata> mapKeyMetadata;\n+\n+    //!add a master seed with a given pubkeyhash (memory only)\n+    virtual bool AddMasterSeed(const HDChainID& chainID, const CKeyingMaterial& masterSeed);\n+\n+    //!add a crypted master seed with a given pubkeyhash (memory only)\n+    virtual bool AddCryptedMasterSeed(const HDChainID& chainID, const std::vector<unsigned char>& vchCryptedSecret);\n+\n+    //!encrypt existing uncrypted seeds and remove unencrypted data\n+    virtual bool EncryptSeeds();\n+\n+    //!export the master seed from a given chain id (hash of the master pub key)\n+    virtual bool GetMasterSeed(const HDChainID& chainID, CKeyingMaterial& seedOut) const;\n+\n+    //!get the encrypted master seed of a giveb chain id\n+    virtual bool GetCryptedMasterSeed(const HDChainID& chainID, std::vector<unsigned char>& vchCryptedSecret) const;\n+\n+    //!writes all available chain ids to a vector\n+    virtual bool GetAvailableChainIDs(std::vector<HDChainID>& chainIDs);\n+\n+    //!add a new chain to the keystore (memory only)\n+    bool AddHDChain(const CHDChain& chain);\n+\n+    //!writes a chain defined by given chainId to chainOut, returns false if not found\n+    bool GetChain(const HDChainID chainID, CHDChain& chainOut) const;\n+\n+    //!Derives a key at index in the given hd chain (defined by chainId) \n+    bool DeriveKeyAtIndex(const HDChainID chainID, CKey& keyOut, std::string& keypathOut, unsigned int nIndex, bool internal) const;\n+    /**\n+     * Get next available index for a child key in chain defined by given chain id\n+     * @return next available index\n+     * @warning This will \"fill gaps\". If you have m/0/0, m/0/1, m/0/2, m/0/100 it will return 3 (m/0/3)\n+     */\n+    unsigned int GetNextChildIndex(const HDChainID& chainID, bool internal);\n+};\n+#endif // BITCOIN_WALLET_HDKEYSTORE_H"
      },
      {
        "sha": "6f907073d9700c721d0206681a4dc63db22bfd3e",
        "filename": "src/wallet/test/hdkeystore_tests.cpp",
        "status": "added",
        "additions": 99,
        "deletions": 0,
        "changes": 99,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a65143731c9d95b9b55dc0c42435648276684b7/src/wallet/test/hdkeystore_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a65143731c9d95b9b55dc0c42435648276684b7/src/wallet/test/hdkeystore_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/hdkeystore_tests.cpp?ref=6a65143731c9d95b9b55dc0c42435648276684b7",
        "patch": "@@ -0,0 +1,99 @@\n+// Copyright (c) 2012-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/wallet.h\"\n+#include \"base58.h\"\n+\n+#include <set>\n+#include <stdint.h>\n+#include <utility>\n+#include <vector>\n+\n+#include \"test/test_bitcoin.h\"\n+\n+#include <boost/foreach.hpp>\n+#include <boost/test/unit_test.hpp>\n+\n+extern CWallet* pwalletMain;\n+\n+BOOST_FIXTURE_TEST_SUITE(hdkeystore_tests, TestingSetup)\n+\n+\n+BOOST_AUTO_TEST_CASE(hdkeystore_tests)\n+{\n+    LOCK(pwalletMain->cs_wallet);\n+\n+    // create a master key\n+    CHDChain chain;\n+    chain.keypathTemplate = \"m/c'\";\n+    std::vector<unsigned char> vSeed = ParseHex(\"9886e45b8435b488a4cb753121db41a07f66a6a73e0a705ce24cee3a3bce87db\");\n+    CKeyingMaterial seed = CKeyingMaterial(32);\n+    seed.assign(vSeed.front(), vSeed.back());\n+\n+    CExtKey masterKey;\n+    masterKey.SetMaster(&seed[0], seed.size());\n+    CBitcoinExtKey masterXPriv;\n+    masterXPriv.SetKey(masterKey);\n+    BOOST_CHECK(masterXPriv.ToString() == \"xprv9s21ZrQH143K3p7CoBzQ9XPGDfaK8YHfuy11V3tGCG715SX1FYhZRP4rqCDKryZDiFtcvfr9A9aQCSioUTScA6reJktbLqEW6soRZfyZqU9\");\n+\n+    // set the chain hash\n+    CExtPubKey masterPubKey = masterKey.Neuter();\n+    chain.chainID = masterPubKey.pubkey.GetHash();\n+\n+    // store the chain\n+    pwalletMain->AddHDChain(chain);\n+    pwalletMain->AddMasterSeed(chain.chainID, seed);\n+\n+    // create some keys\n+    CKey newKey;\n+    std::string keypath;\n+    pwalletMain->DeriveKeyAtIndex(chain.chainID, newKey, keypath, 0, false);\n+    // we should still be at index0 (key was not added to the wallet)\n+    BOOST_CHECK(pwalletMain->GetNextChildIndex(chain.chainID, false) == 0);\n+\n+    CKeyMetadata metaData(GetTime());\n+    metaData.keypath = keypath;\n+    metaData.chainID = chain.chainID;\n+    pwalletMain->mapKeyMetadata[newKey.GetPubKey().GetID()] = metaData;\n+    pwalletMain->AddKeyPubKey(newKey, newKey.GetPubKey());\n+    // now the key was added, next index should be 1\n+    BOOST_CHECK(pwalletMain->GetNextChildIndex(chain.chainID, false) == 1);\n+    BOOST_CHECK(CBitcoinAddress(newKey.GetPubKey().GetID()).ToString() == \"1AFW8Aq7jXmtqLHjicMtov56FRBeYqSHj7\");\n+\n+    pwalletMain->DeriveKeyAtIndex(chain.chainID, newKey, keypath, pwalletMain->GetNextChildIndex(chain.chainID, false), false);\n+    metaData = CKeyMetadata(GetTime());\n+    metaData.keypath = keypath;\n+    metaData.chainID = chain.chainID;\n+    pwalletMain->mapKeyMetadata[newKey.GetPubKey().GetID()] = metaData;\n+    pwalletMain->AddKeyPubKey(newKey, newKey.GetPubKey());\n+    BOOST_CHECK(pwalletMain->GetNextChildIndex(chain.chainID, false) == 2);\n+    BOOST_CHECK(CBitcoinAddress(newKey.GetPubKey().GetID()).ToString() == \"1JCWakvgoCcKHLydjrbFqeAM1vyF36sRe8\");\n+\n+    // derive internal/change key\n+    BOOST_CHECK(pwalletMain->GetNextChildIndex(chain.chainID, true) == 0); //no internal key should be there\n+    pwalletMain->DeriveKeyAtIndex(chain.chainID, newKey, keypath, pwalletMain->GetNextChildIndex(chain.chainID, true), true);\n+    metaData = CKeyMetadata(GetTime());\n+    metaData.keypath = keypath;\n+    metaData.chainID = chain.chainID;\n+    pwalletMain->mapKeyMetadata[newKey.GetPubKey().GetID()] = metaData;\n+    pwalletMain->AddKeyPubKey(newKey, newKey.GetPubKey());\n+    BOOST_CHECK(pwalletMain->GetNextChildIndex(chain.chainID, true) == 1);\n+    BOOST_CHECK(CBitcoinAddress(newKey.GetPubKey().GetID()).ToString() == \"1HbQusfqAYSUEBqVfHzhasVqGatn6Jjqwq\");\n+\n+    pwalletMain->EncryptSeeds();\n+    BOOST_CHECK(pwalletMain->HaveKey(newKey.GetPubKey().GetID()) == true);\n+\n+    CKey keyTest;\n+    pwalletMain->GetKey(newKey.GetPubKey().GetID(), keyTest);\n+    BOOST_CHECK(CBitcoinSecret(keyTest).ToString() == \"L1igds57v39YDHZ1LirRZQkRiikPkPCECiDarFaiYxJ6JSyhXLn6\"); //m/1'/0'\n+\n+//\n+//    CPubKey pkey = pwalletMain->GenerateNewKey();\n+//    std::string test23 = CBitcoinAddress(pkey.GetID()).ToString();\n+//\n+//    BOOST_CHECK(CBitcoinAddress(pkey.GetID()).ToString() == \"1PEzTQaYAqcnLR6Ug23pzFqTEakBttFrgo\");\n+//    BOOST_CHECK(pwalletMain->GetNextChildIndex(chain.chainID, false) == 3);\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "ee328b797c3bb3a4fa5a4769ef7cbb7597cbb536",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a65143731c9d95b9b55dc0c42435648276684b7/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a65143731c9d95b9b55dc0c42435648276684b7/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=6a65143731c9d95b9b55dc0c42435648276684b7",
        "patch": "@@ -13,6 +13,7 @@\n #include \"utilstrencodings.h\"\n #include \"validationinterface.h\"\n #include \"wallet/crypter.h\"\n+#include \"wallet/hdkeystore.h\"\n #include \"wallet/wallet_ismine.h\"\n #include \"wallet/walletdb.h\"\n #include \"wallet/rpcwallet.h\"\n@@ -536,7 +537,7 @@ class CAccountingEntry\n  * A CWallet is an extension of a keystore, which also maintains a set of transactions and balances,\n  * and provides the ability to create new transactions.\n  */\n-class CWallet : public CCryptoKeyStore, public CValidationInterface\n+class CWallet : public CHDKeyStore, public CValidationInterface\n {\n private:\n     /**\n@@ -587,7 +588,6 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     std::string strWalletFile;\n \n     std::set<int64_t> setKeyPool;\n-    std::map<CKeyID, CKeyMetadata> mapKeyMetadata;\n \n     typedef std::map<unsigned int, CMasterKey> MasterKeyMap;\n     MasterKeyMap mapMasterKeys;"
      },
      {
        "sha": "0ebeeac6bc483aec4a24826e0f2b565644176d8c",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 33,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a65143731c9d95b9b55dc0c42435648276684b7/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a65143731c9d95b9b55dc0c42435648276684b7/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=6a65143731c9d95b9b55dc0c42435648276684b7",
        "patch": "@@ -8,6 +8,7 @@\n \n #include \"amount.h\"\n #include \"wallet/db.h\"\n+#include \"wallet/hdkeystore.h\"\n #include \"key.h\"\n \n #include <list>\n@@ -40,39 +41,6 @@ enum DBErrors\n     DB_NEED_REWRITE\n };\n \n-class CKeyMetadata\n-{\n-public:\n-    static const int CURRENT_VERSION=1;\n-    int nVersion;\n-    int64_t nCreateTime; // 0 means unknown\n-\n-    CKeyMetadata()\n-    {\n-        SetNull();\n-    }\n-    CKeyMetadata(int64_t nCreateTime_)\n-    {\n-        nVersion = CKeyMetadata::CURRENT_VERSION;\n-        nCreateTime = nCreateTime_;\n-    }\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        READWRITE(this->nVersion);\n-        nVersion = this->nVersion;\n-        READWRITE(nCreateTime);\n-    }\n-\n-    void SetNull()\n-    {\n-        nVersion = CKeyMetadata::CURRENT_VERSION;\n-        nCreateTime = 0;\n-    }\n-};\n-\n /** Access to the wallet database (wallet.dat) */\n class CWalletDB : public CDB\n {"
      }
    ]
  },
  {
    "sha": "b717b4258b8e369ad9caa562a4aaf65704f8ead2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNzE3YjQyNThiOGUzNjlhZDljYWE1NjJhNGFhZjY1NzA0ZjhlYWQy",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-01-02T11:34:08Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-03-14T08:43:00Z"
      },
      "message": "[Wallet] Extend walletdb with some hd related records",
      "tree": {
        "sha": "02222b67b06c1a327d2bdbc181d3fa457a879f03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/02222b67b06c1a327d2bdbc181d3fa457a879f03"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b717b4258b8e369ad9caa562a4aaf65704f8ead2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJW5nmUAAoJECnUvLZBb1PszPkQAIavwpvtJ68qjJ1Un+bMgUV9\nD1oJ6re4mq4S5kh1fRXHGecklN3KRwbtMOEG2UHyiolO1EMUW7v4rt4KjjwI+dCM\nOKPEIx+i0aEuw7M+rBcfLO2NBtxaUijgl9epBE0n/0CaewOcTj4BJ3H5mhm3ktLL\nj+tMabGgUjrrx1J6hoPcah4nKjimjCcVaimsVmzGLmNi6Fav1cZjupJbW/RGe1Mk\nzVDRiOl8JhN0jEYJT+dWj7ho866J1+xLoFBNWoZ9o//fv2dJhq4wKoiFeDYU5wEm\nYCghdQvjWEkorxa7QnuLhYFTmq02lq5ioCvM7wsZch6c6UvTl1NlV3bqBkSicORM\ndeNAK97b3MXdtsLen6DsfYCme8xML/lNIe+s/zgIh8s1BM+1+MJrQBMxxNWifmu9\nTYSiGvlYBew0BIJLYn4hOZU6cu9A8JnH9Qi32OJoD33LM0o4IlY9KJCXiEgtADWR\nGZPSTu0apmF3vje2OfDq3GVjT4eSDqfrOTmZjQM+KnFvpQ0MhwY2uXMfMnFv3OgO\nBLZ6yQYBaM/jIacDUz4VDopXzONfu7yNnaGwSxtYrh6NhwJ0uXpk99xumojKoBqF\nkIKlK3ILEtj0qYviOBRvskYlfH7N+RdcV6SQBadkFwm/SE8nDGnxZswkzZd9Lk1P\nM2SwKCQ2k3e1+4kOtWr4\n=cPSN\n-----END PGP SIGNATURE-----",
        "payload": "tree 02222b67b06c1a327d2bdbc181d3fa457a879f03\nparent 6a65143731c9d95b9b55dc0c42435648276684b7\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1451734448 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1457944980 +0100\n\n[Wallet] Extend walletdb with some hd related records\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b717b4258b8e369ad9caa562a4aaf65704f8ead2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b717b4258b8e369ad9caa562a4aaf65704f8ead2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b717b4258b8e369ad9caa562a4aaf65704f8ead2/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6a65143731c9d95b9b55dc0c42435648276684b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a65143731c9d95b9b55dc0c42435648276684b7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6a65143731c9d95b9b55dc0c42435648276684b7"
      }
    ],
    "stats": {
      "total": 75,
      "additions": 75,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fad2b5f293fa754ddc2181764aa8c51fa11feb40",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 68,
        "deletions": 0,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b717b4258b8e369ad9caa562a4aaf65704f8ead2/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b717b4258b8e369ad9caa562a4aaf65704f8ead2/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=b717b4258b8e369ad9caa562a4aaf65704f8ead2",
        "patch": "@@ -599,6 +599,38 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n                 return false;\n             }\n         }\n+        else if (strType == \"hdmasterseed\")\n+        {\n+            uint256 masterPubKeyHash;\n+            CKeyingMaterial masterSeed;\n+            ssKey >> masterPubKeyHash;\n+            ssValue >> masterSeed;\n+            pwallet->AddMasterSeed(masterPubKeyHash, masterSeed);\n+        }\n+        else if (strType == \"hdcryptedmasterseed\")\n+        {\n+            uint256 masterPubKeyHash;\n+            std::vector<unsigned char> vchCryptedSecret;\n+            ssKey >> masterPubKeyHash;\n+            ssValue >> vchCryptedSecret;\n+            pwallet->AddCryptedMasterSeed(masterPubKeyHash, vchCryptedSecret);\n+        }\n+        else if (strType == \"hdactivechain\")\n+        {\n+            HDChainID chainID;\n+            ssValue >> chainID;\n+            pwallet->SetActiveHDChainID(chainID, false, true); //don't check if the chain exists because this record could come in before the CHDChain object itself\n+        }\n+        else if (strType == \"hdchain\")\n+        {\n+            CHDChain chain;\n+            ssValue >> chain;\n+            if (!pwallet->AddHDChain(chain, true))\n+            {\n+                strErr = \"Error reading wallet database: AddChain failed\";\n+                return false;\n+            }\n+        }\n     } catch (...)\n     {\n         return false;\n@@ -1004,3 +1036,39 @@ bool CWalletDB::EraseDestData(const std::string &address, const std::string &key\n     nWalletDBUpdated++;\n     return Erase(std::make_pair(std::string(\"destdata\"), std::make_pair(address, key)));\n }\n+\n+bool CWalletDB::WriteHDMasterSeed(const uint256& hash, const CKeyingMaterial& masterSeed)\n+{\n+    nWalletDBUpdated++;\n+    return Write(std::make_pair(std::string(\"hdmasterseed\"), hash), masterSeed);\n+}\n+\n+bool CWalletDB::WriteHDCryptedMasterSeed(const uint256& hash, const std::vector<unsigned char>& vchCryptedSecret)\n+{\n+    nWalletDBUpdated++;\n+    if (!Write(std::make_pair(std::string(\"hdcryptedmasterseed\"), hash), vchCryptedSecret))\n+        return false;\n+\n+    Erase(std::make_pair(std::string(\"hdmasterseed\"), hash));\n+    Erase(std::make_pair(std::string(\"hdmasterseed\"), hash));\n+\n+    return true;\n+}\n+\n+bool CWalletDB::EraseHDMasterSeed(const uint256& hash)\n+{\n+    nWalletDBUpdated++;\n+    return Erase(std::make_pair(std::string(\"hdmasterseed\"), hash));\n+}\n+\n+bool CWalletDB::WriteHDChain(const CHDChain &chain)\n+{\n+    nWalletDBUpdated++;\n+    return Write(std::make_pair(std::string(\"hdchain\"), chain.chainID), chain);\n+}\n+\n+bool CWalletDB::WriteHDAchiveChain(const uint256& hash)\n+{\n+    nWalletDBUpdated++;\n+    return Write(std::string(\"hdactivechain\"), hash);\n+}"
      },
      {
        "sha": "bc6583750c79f3ad25a1e4a2148ac656ea8ecef2",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b717b4258b8e369ad9caa562a4aaf65704f8ead2/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b717b4258b8e369ad9caa562a4aaf65704f8ead2/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=b717b4258b8e369ad9caa562a4aaf65704f8ead2",
        "patch": "@@ -101,6 +101,13 @@ class CWalletDB : public CDB\n     static bool Recover(CDBEnv& dbenv, const std::string& filename, bool fOnlyKeys);\n     static bool Recover(CDBEnv& dbenv, const std::string& filename);\n \n+    /* HD functions */\n+    bool WriteHDMasterSeed(const uint256& hash, const CKeyingMaterial& masterSeed);\n+    bool WriteHDCryptedMasterSeed(const uint256& hash, const std::vector<unsigned char>& vchCryptedSecret);\n+    bool EraseHDMasterSeed(const uint256& hash);\n+    bool WriteHDChain(const CHDChain& chain);\n+    bool WriteHDAchiveChain(const uint256& hash);\n+\n private:\n     CWalletDB(const CWalletDB&);\n     void operator=(const CWalletDB&);"
      }
    ]
  },
  {
    "sha": "3494217323059c13faa561d37563c48c144448ad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDk0MjE3MzIzMDU5YzEzZmFhNTYxZDM3NTYzYzQ4YzE0NDQ0OGFk",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-01-02T11:34:56Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-03-14T08:54:58Z"
      },
      "message": "[Wallet] use HD by default for all new wallets",
      "tree": {
        "sha": "e07066a2efc8554f031eb28420fd35f45a5a1d25",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e07066a2efc8554f031eb28420fd35f45a5a1d25"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3494217323059c13faa561d37563c48c144448ad",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJW5nxkAAoJECnUvLZBb1PsW1kQAIqeUpdm8jjbzNZ3Qi6pPL5x\nP3Z1pgM973sUvSVXUUH6vIqDa3UjHlevqlnLAJqk/ipQmCr95fs7DvCP3LzA7+oa\n8wovQ6JXlVIdWtlH5YqqTiRRWj1YWhP4J8Ln7Rh0nva7C/behm+id/Dbj24faMy6\n2hNuPRjmB36ynHqsFtjPaaWEQqE5mQpZbF9xE7imgmJqT54MOILrph+J1LiEn41b\nt1AH/aR1Mg+avOKp86H4yYOO9Q79U5bJ2+NzkPg+rB5uhqgLvGqJVFBjbi7dMUzC\n00xdGVeGxq2kJpk4HMwMum7Ew24sEx9tP/QafxbSMwZfX4r2aV7ZNFRdALevh38i\n2tCZNgGQAlwqbDWCJYFp7nPnnSPixlgCglc/BAkY8QzqCZEhOLmdfIu2I6VO5MsY\npqeOzIJP970mDgB9kVB9EZWaYOtkWr+UPI90wIrNAF4I1keY1vnR2Vmur8YTFNp0\n8VhGODyRRoe5O2wzz6qVXULLXccqVf2MxByGKisiig8e1iE4UUNjfYVolCpwWfrd\n8ei9l5Yhe+0yHu4V9RW5n6r+lHU4PQyyhSTbCt39rdqrfQcL6TMucaQZ54XIoJsR\nGCVcU9Q9sI8j4cvSu/7eFXYSLLRuHnlooasbvPuN+RM7N86TaMHBPGsX9ZpybN1y\n3nsra7sFhb8WV+i8sOwC\n=qnBX\n-----END PGP SIGNATURE-----",
        "payload": "tree e07066a2efc8554f031eb28420fd35f45a5a1d25\nparent b717b4258b8e369ad9caa562a4aaf65704f8ead2\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1451734496 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1457945698 +0100\n\n[Wallet] use HD by default for all new wallets\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3494217323059c13faa561d37563c48c144448ad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3494217323059c13faa561d37563c48c144448ad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3494217323059c13faa561d37563c48c144448ad/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b717b4258b8e369ad9caa562a4aaf65704f8ead2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b717b4258b8e369ad9caa562a4aaf65704f8ead2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b717b4258b8e369ad9caa562a4aaf65704f8ead2"
      }
    ],
    "stats": {
      "total": 384,
      "additions": 332,
      "deletions": 52
    },
    "files": [
      {
        "sha": "0459c664a24221a8d33a483ee60ca5b66c81de20",
        "filename": "qa/rpc-tests/hdwallet.py",
        "status": "added",
        "additions": 78,
        "deletions": 0,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3494217323059c13faa561d37563c48c144448ad/qa/rpc-tests/hdwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3494217323059c13faa561d37563c48c144448ad/qa/rpc-tests/hdwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/hdwallet.py?ref=3494217323059c13faa561d37563c48c144448ad",
        "patch": "@@ -0,0 +1,78 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+class HDWalletTest (BitcoinTestFramework):\n+\n+    def setup_chain(self):\n+        print(\"Initializing test directory \"+self.options.tmpdir)\n+        initialize_chain_clean(self.options.tmpdir, 4)\n+\n+    def setup_network(self, split=False):\n+        self.nodes = start_nodes(2, self.options.tmpdir, extra_args=[\n+            ['-hdseed=f81a7a4efdc29e54dcc739df87315a756038d0b68fbc4880ffbbbef222152e6a'],\n+            []\n+            ])\n+        connect_nodes_bi(self.nodes,0,1)\n+        self.is_network_split=False\n+        self.sync_all()\n+\n+    def run_test (self):\n+        print \"Mining blocks...\"\n+\n+        encrypt = True\n+        self.nodes[0].generate(1)\n+\n+        walletinfo = self.nodes[0].getwalletinfo()\n+        assert_equal(walletinfo['immature_balance'], 50)\n+        assert_equal(walletinfo['balance'], 0)\n+        self.nodes[0].generate(100)\n+        self.sync_all()\n+\n+        adr = self.nodes[0].getnewaddress(\"\", True)\n+        assert_equal(adr['address'], \"mtGrK6eX8uhW6FhoUzyQmxFBLxjZRhcfQJ\");\n+        assert_equal(adr['keypath'], \"m/0'/3'\");\n+        \n+        adr = self.nodes[0].getnewaddress(\"\", True)\n+        assert_equal(adr['address'], \"muWGGSSma5s7TjHbT5fCKunkoyBaF1uy8D\");\n+        assert_equal(adr['keypath'], \"m/0'/4'\");\n+        \n+        stop_node(self.nodes[0], 0)\n+        stop_node(self.nodes[1], 1)\n+        \n+        #try to recover over master seed\n+        os.remove(self.options.tmpdir + \"/node0/regtest/wallet.dat\")\n+        self.nodes = start_nodes(2, self.options.tmpdir, extra_args=[\n+            ['-hdseed=f81a7a4efdc29e54dcc739df87315a756038d0b68fbc4880ffbbbef222152e6a'],\n+            []\n+            ])\n+        adr = self.nodes[0].getnewaddress(\"\", True)\n+        assert_equal(adr['address'], \"mqfCLB8d4vP1BTyMo88WzjT9VJG4NWEbni\");\n+        assert_equal(adr['keypath'], \"m/0'/1'\");\n+        \n+        adr = self.nodes[0].getnewaddress(\"\", True)\n+        assert_equal(adr['address'], \"n4mEdLhWJgDHvsChPcttAkqQSMrndhzdAv\");\n+        assert_equal(adr['keypath'], \"m/0'/2'\");\n+\n+        adr = self.nodes[0].getnewaddress(\"\", True)\n+        assert_equal(adr['address'], \"mtGrK6eX8uhW6FhoUzyQmxFBLxjZRhcfQJ\");\n+        assert_equal(adr['keypath'], \"m/0'/3'\");\n+        \n+        print \"encrypt wallet\"\n+        self.nodes[0].encryptwallet(\"test\")\n+        bitcoind_processes[0].wait()\n+        del bitcoind_processes[0]\n+\n+        self.nodes[0] = start_node(0, self.options.tmpdir, extra_args=['-hdseed=f81a7a4efdc29e54dcc739df87315a756038d0b68fbc4880ffbbbef222152e6a'])\n+        self.nodes[0].walletpassphrase(\"test\", 100)\n+        adr = self.nodes[0].getnewaddress(\"\", True)\n+        assert_equal(adr['address'], \"n32WRiXX6P6KFkdGV37CAbsTjLcxt4VhRY\");\n+        assert_equal(adr['keypath'], \"m/0'/5'\");\n+\n+if __name__ == '__main__':\n+    HDWalletTest ().main ()"
      },
      {
        "sha": "d8f7e52986699f414636472e2a60ac3edcfd25b6",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 0,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3494217323059c13faa561d37563c48c144448ad/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3494217323059c13faa561d37563c48c144448ad/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=3494217323059c13faa561d37563c48c144448ad",
        "patch": "@@ -1490,6 +1490,46 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n             // Create new keyUser and set as default key\n             RandAddSeedPerfmon();\n \n+            if (GetBoolArg(\"-usehd\", DEFAULT_USE_HD_WALLET))\n+            {\n+                // create a new seed / chain\n+                // default keypath is m/c'/k'\n+                // results in m/0'/0' for the first external key\n+                // results in m/1'/0' for the first internal key\n+                // results in m/0'/1' for the second external key\n+\n+                CHDChain chain;\n+                chain.keypathTemplate = \"m/c'\";\n+                \n+                CKey key;\n+                key.MakeNewKey(true); //generate a seed\n+                CKeyingMaterial seed = CKeyingMaterial(32);\n+                seed.assign(key.begin(), key.end());\n+\n+                if (GetArg(\"-hdseed\", \"\").size() == 64)\n+                {\n+                    std::vector<unsigned char> hdseed = ParseHex(GetArg(\"-hdseed\", \"\"));\n+                    seed.assign(hdseed.begin(), hdseed.end());\n+                }\n+                else if(GetArg(\"-hdseed\", \"\").size() != 0)\n+                {\n+                    strErrors << _(\"-hdseed needs to be 256bit (64 hex chars)\") << \"\\n\";\n+                    LogPrintf(\"%s\", strErrors.str());\n+                    return InitError(strErrors.str());\n+                }\n+\n+                CExtKey masterKey;\n+                masterKey.SetMaster(&seed[0], seed.size());\n+\n+                CExtPubKey masterPubKey = masterKey.Neuter();\n+                chain.chainID = masterPubKey.pubkey.GetHash();\n+\n+                //persist the chain and the master seed\n+                pwalletMain->AddMasterSeed(chain.chainID, seed);\n+                pwalletMain->AddHDChain(chain);\n+                pwalletMain->SetActiveHDChainID(chain.chainID);\n+            }\n+\n             CPubKey newDefaultKey;\n             if (pwalletMain->GetKeyFromPool(newDefaultKey)) {\n                 pwalletMain->SetDefaultKey(newDefaultKey);"
      },
      {
        "sha": "6aa20c41c15a19c98537d188975ad82bed49cde1",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3494217323059c13faa561d37563c48c144448ad/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3494217323059c13faa561d37563c48c144448ad/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=3494217323059c13faa561d37563c48c144448ad",
        "patch": "@@ -101,6 +101,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"prioritisetransaction\", 2 },\n     { \"setban\", 2 },\n     { \"setban\", 3 },\n+    { \"getnewaddress\", 1 },\n };\n \n class CRPCConvertTable"
      },
      {
        "sha": "4377d38957e1af8142c09a974df2c4934f2321a3",
        "filename": "src/wallet/crypter.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3494217323059c13faa561d37563c48c144448ad/src/wallet/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3494217323059c13faa561d37563c48c144448ad/src/wallet/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.cpp?ref=3494217323059c13faa561d37563c48c144448ad",
        "patch": "@@ -293,19 +293,23 @@ bool CCryptoKeyStore::EncryptKeys(CKeyingMaterial& vMasterKeyIn)\n     return true;\n }\n \n-bool CCryptoKeyStore::EncryptSeed(const CKeyingMaterial& seedIn, const uint256& seedPubHash, std::vector<unsigned char> &vchCiphertext) const\n+bool CCryptoKeyStore::EncryptSeed(CKeyingMaterial& vMasterKeyIn, const CKeyingMaterial& seedIn, const uint256& seedPubHash, std::vector<unsigned char> &vchCiphertext) const\n {\n     LOCK(cs_KeyStore);\n-    if (!EncryptSecret(vMasterKey, seedIn, seedPubHash, vchCiphertext))\n+    CKeyingMaterial *masterKey = &vMasterKeyIn;\n+\n+    if (!vMasterKeyIn.size() && vMasterKey.size() > 0)\n+        *masterKey = vMasterKey;\n+\n+    if (!EncryptSecret(*masterKey, seedIn, seedPubHash, vchCiphertext))\n         return false;\n \n     return true;\n }\n \n-bool CCryptoKeyStore::DecryptSeed(const std::vector<unsigned char>& vchCiphertextIn, const uint256& seedPubHash, CKeyingMaterial& seedOut) const\n+bool CCryptoKeyStore::DecryptSeed(CKeyingMaterial& vMasterKeyIn, const std::vector<unsigned char>& vchCiphertextIn, const uint256& seedPubHash, CKeyingMaterial& seedOut) const\n {\n     LOCK(cs_KeyStore);\n-\n     if (!DecryptSecret(vMasterKey, vchCiphertextIn, seedPubHash, seedOut))\n         return false;\n "
      },
      {
        "sha": "7a8a4570e1f523aac975c26f0308af3d676f3ad2",
        "filename": "src/wallet/crypter.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3494217323059c13faa561d37563c48c144448ad/src/wallet/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3494217323059c13faa561d37563c48c144448ad/src/wallet/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.h?ref=3494217323059c13faa561d37563c48c144448ad",
        "patch": "@@ -192,8 +192,8 @@ class CCryptoKeyStore : public CBasicKeyStore\n      */\n     boost::signals2::signal<void (CCryptoKeyStore* wallet)> NotifyStatusChanged;\n \n-    bool EncryptSeed(const CKeyingMaterial& seedIn, const uint256& seedPubHash, std::vector<unsigned char> &vchCiphertext) const;\n-    bool DecryptSeed(const std::vector<unsigned char>& vchCiphertextIn, const uint256& seedPubHash, CKeyingMaterial& seedOut) const;\n+    bool EncryptSeed(CKeyingMaterial& vMasterKeyIn, const CKeyingMaterial& seedIn, const uint256& seedPubHash, std::vector<unsigned char> &vchCiphertext) const;\n+    bool DecryptSeed(CKeyingMaterial& vMasterKeyIn, const std::vector<unsigned char>& vchCiphertextIn, const uint256& seedPubHash, CKeyingMaterial& seedOut) const;\n };\n \n #endif // BITCOIN_WALLET_CRYPTER_H"
      },
      {
        "sha": "3d4bb2737d7e6d9dfd2e52ae1dd2f10b55fd6f2b",
        "filename": "src/wallet/hdkeystore.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 10,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3494217323059c13faa561d37563c48c144448ad/src/wallet/hdkeystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3494217323059c13faa561d37563c48c144448ad/src/wallet/hdkeystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/hdkeystore.cpp?ref=3494217323059c13faa561d37563c48c144448ad",
        "patch": "@@ -16,8 +16,12 @@ bool CHDKeyStore::AddMasterSeed(const HDChainID& chainID, const CKeyingMaterial&\n     LOCK(cs_KeyStore);\n     if (IsCrypted())\n     {\n+        if (IsLocked())\n+            return false;\n+\n         std::vector<unsigned char> vchCryptedSecret;\n-        if (!EncryptSeed(masterSeed, chainID, vchCryptedSecret))\n+        CKeyingMaterial emptyKey; //an empty key will tell EncryptSeed() to use the internal vMasterKey\n+        if (!EncryptSeed(emptyKey, masterSeed, chainID, vchCryptedSecret))\n             return false;\n \n         mapHDCryptedMasterSeeds[chainID] = vchCryptedSecret;\n@@ -48,30 +52,37 @@ bool CHDKeyStore::GetMasterSeed(const HDChainID& chainID, CKeyingMaterial& seedO\n     }\n     else\n     {\n+        if (IsLocked())\n+            return false;\n+\n         std::map<HDChainID, std::vector<unsigned char> >::const_iterator it=mapHDCryptedMasterSeeds.find(chainID);\n         if (it == mapHDCryptedMasterSeeds.end())\n             return false;\n \n         std::vector<unsigned char> vchCryptedSecret = it->second;\n-        if (!DecryptSeed(vchCryptedSecret, chainID, seedOut))\n+        CKeyingMaterial emptyKey; //an empty key will tell DecryptSeed() to use the internal vMasterKey\n+        if (!DecryptSeed(emptyKey, vchCryptedSecret, chainID, seedOut))\n             return false;\n \n         return true;\n     }\n     return false;\n }\n \n-bool CHDKeyStore::EncryptSeeds()\n+bool CHDKeyStore::EncryptSeeds(CKeyingMaterial& vMasterKeyIn)\n {\n     LOCK(cs_KeyStore);\n     for (std::map<HDChainID, CKeyingMaterial >::iterator it = mapHDMasterSeeds.begin(); it != mapHDMasterSeeds.end(); ++it)\n     {\n         std::vector<unsigned char> vchCryptedSecret;\n-        if (!EncryptSeed(it->second, it->first, vchCryptedSecret))\n+        if (!EncryptSeed(vMasterKeyIn, it->second, it->first, vchCryptedSecret))\n             return false;\n         AddCryptedMasterSeed(it->first, vchCryptedSecret);\n     }\n     mapHDMasterSeeds.clear();\n+    if (!SetCrypted())\n+        return false;\n+\n     return true;\n }\n \n@@ -89,7 +100,7 @@ bool CHDKeyStore::GetCryptedMasterSeed(const HDChainID& chainID, std::vector<uns\n     return true;\n }\n \n-bool CHDKeyStore::GetAvailableChainIDs(std::vector<HDChainID>& chainIDs)\n+void CHDKeyStore::GetAvailableChainIDs(std::vector<HDChainID>& chainIDs)\n {\n     LOCK(cs_KeyStore);\n     chainIDs.clear();\n@@ -106,8 +117,6 @@ bool CHDKeyStore::GetAvailableChainIDs(std::vector<HDChainID>& chainIDs)\n             chainIDs.push_back(it->first);\n         }\n     }\n-\n-    return true;\n }\n \n bool CHDKeyStore::PrivateKeyDerivation(const std::string keypath, const HDChainID& chainID, CExtKey& extKeyOut) const\n@@ -156,7 +165,7 @@ bool CHDKeyStore::PrivateKeyDerivation(const std::string keypath, const HDChainI\n \n bool CHDKeyStore::DeriveKey(const HDChainID chainID, const std::string keypath, CKey& keyOut) const\n {\n-    //this methode required no locking\n+    //this methode requires no locking\n     CExtKey extKeyOut;\n     if (!PrivateKeyDerivation(keypath, chainID, extKeyOut))\n         return false;\n@@ -172,7 +181,7 @@ bool CHDKeyStore::DeriveKeyAtIndex(const HDChainID chainID, CKey& keyOut, std::s\n         return false;\n \n     if (nIndex >= 0x80000000)\n-        throw std::runtime_error(\"CHDKeyStore::DerivePubKeyAtIndex(): No more available keys!\");\n+        throw std::runtime_error(\"CHDKeyStore::DeriveKeyAtIndex(): No more available keys!\");\n \n     keypathOut = hdChain.keypathTemplate;\n     boost::replace_all(keypathOut, \"c\", itostr(internal)); //replace the chain switch index\n@@ -181,7 +190,7 @@ bool CHDKeyStore::DeriveKeyAtIndex(const HDChainID chainID, CKey& keyOut, std::s\n \n     CExtKey extKeyOut;\n     if (!PrivateKeyDerivation(keypathOut, chainID, extKeyOut))\n-        throw std::runtime_error(\"CHDKeyStore::DerivePubKeyAtIndex(): Private Key Derivation failed!\");\n+        throw std::runtime_error(\"CHDKeyStore::DeriveKeyAtIndex(): Private Key Derivation failed!\");\n     keyOut = extKeyOut.key;\n \n     return true;"
      },
      {
        "sha": "a3b17e39be99d3cb307b51ac554d833634161830",
        "filename": "src/wallet/hdkeystore.h",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3494217323059c13faa561d37563c48c144448ad/src/wallet/hdkeystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3494217323059c13faa561d37563c48c144448ad/src/wallet/hdkeystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/hdkeystore.h?ref=3494217323059c13faa561d37563c48c144448ad",
        "patch": "@@ -15,7 +15,9 @@ typedef uint256 HDChainID;\n class CKeyMetadata\n {\n public:\n-    static const int CURRENT_VERSION=2;\n+    static const int CURRENT_VERSION=3;\n+    static const int VERSION_SUPPORT_FLAGS=2;\n+    static const int VERSION_SUPPORT_HD=3;\n     int nVersion;\n     int64_t nCreateTime; // 0 means unknown\n     HDChainID chainID;\n@@ -27,7 +29,7 @@ class CKeyMetadata\n     }\n     CKeyMetadata(int64_t nCreateTime_)\n     {\n-        nVersion = CKeyMetadata::CURRENT_VERSION;\n+        nVersion = CKeyMetadata::VERSION_SUPPORT_HD;\n         nCreateTime = nCreateTime_;\n     }\n \n@@ -38,7 +40,7 @@ class CKeyMetadata\n         READWRITE(this->nVersion);\n         nVersion = this->nVersion;\n         READWRITE(nCreateTime);\n-        if (nVersion >= 2)\n+        if (nVersion >= VERSION_SUPPORT_HD)\n         {\n             READWRITE(keypath);\n             if (keypath.size() > 0)\n@@ -107,7 +109,7 @@ class CHDChain\n class CHDKeyStore : public CCryptoKeyStore\n {\n protected:\n-    std::map<HDChainID, CKeyingMaterial > mapHDMasterSeeds; //master seeds are stored outside of CHDChain (mind crypting)\n+    std::map<HDChainID, CKeyingMaterial > mapHDMasterSeeds; //master seeds are stored outside of the CHDChain object (for independent encryption)\n     std::map<HDChainID, std::vector<unsigned char> > mapHDCryptedMasterSeeds;\n     std::map<HDChainID, CHDChain> mapChains; //all available chains\n \n@@ -121,13 +123,13 @@ class CHDKeyStore : public CCryptoKeyStore\n     std::map<CKeyID, CKeyMetadata> mapKeyMetadata;\n \n     //!add a master seed with a given pubkeyhash (memory only)\n-    virtual bool AddMasterSeed(const HDChainID& chainID, const CKeyingMaterial& masterSeed);\n+    bool AddMasterSeed(const HDChainID& chainID, const CKeyingMaterial& masterSeed);\n \n     //!add a crypted master seed with a given pubkeyhash (memory only)\n     virtual bool AddCryptedMasterSeed(const HDChainID& chainID, const std::vector<unsigned char>& vchCryptedSecret);\n \n     //!encrypt existing uncrypted seeds and remove unencrypted data\n-    virtual bool EncryptSeeds();\n+    virtual bool EncryptSeeds(CKeyingMaterial& vMasterKeyIn);\n \n     //!export the master seed from a given chain id (hash of the master pub key)\n     virtual bool GetMasterSeed(const HDChainID& chainID, CKeyingMaterial& seedOut) const;\n@@ -136,7 +138,7 @@ class CHDKeyStore : public CCryptoKeyStore\n     virtual bool GetCryptedMasterSeed(const HDChainID& chainID, std::vector<unsigned char>& vchCryptedSecret) const;\n \n     //!writes all available chain ids to a vector\n-    virtual bool GetAvailableChainIDs(std::vector<HDChainID>& chainIDs);\n+    virtual void GetAvailableChainIDs(std::vector<HDChainID>& chainIDs);\n \n     //!add a new chain to the keystore (memory only)\n     bool AddHDChain(const CHDChain& chain);"
      },
      {
        "sha": "9cbedb86e5bab1dd19a49575c1dda480d545b4c6",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 8,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3494217323059c13faa561d37563c48c144448ad/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3494217323059c13faa561d37563c48c144448ad/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=3494217323059c13faa561d37563c48c144448ad",
        "patch": "@@ -110,15 +110,15 @@ UniValue getnewaddress(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n-\n-    if (fHelp || params.size() > 1)\n+    if (fHelp || params.size() > 2)\n         throw runtime_error(\n-            \"getnewaddress ( \\\"account\\\" )\\n\"\n+            \"getnewaddress ( \\\"account\\\" ) ( \\\"details\\\" )\\n\"\n             \"\\nReturns a new Bitcoin address for receiving payments.\\n\"\n             \"If 'account' is specified (DEPRECATED), it is added to the address book \\n\"\n             \"so payments received with the address will be credited to 'account'.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"account\\\"        (string, optional) DEPRECATED. The account name for the address to be linked to. If not provided, the default account \\\"\\\" is used. It can also be set to the empty string \\\"\\\" to represent the default account. The account does not need to exist, it will be created if there is no account by the given name.\\n\"\n+            \"2. \\\"details\\\"        (boolean, optional) If set, the response will be populated with related HD details\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"bitcoinaddress\\\"    (string) The new bitcoin address\\n\"\n             \"\\nExamples:\\n\"\n@@ -130,8 +130,11 @@ UniValue getnewaddress(const UniValue& params, bool fHelp)\n \n     // Parse the account first so we don't generate a key if there's an error\n     string strAccount;\n+    bool showDetails = false;\n     if (params.size() > 0)\n         strAccount = AccountFromValue(params[0]);\n+    if (params.size() > 1)\n+        showDetails = params[1].isTrue();\n \n     if (!pwalletMain->IsLocked())\n         pwalletMain->TopUpKeyPool();\n@@ -144,6 +147,13 @@ UniValue getnewaddress(const UniValue& params, bool fHelp)\n \n     pwalletMain->SetAddressBook(keyID, strAccount, \"receive\");\n \n+    if (GetBoolArg(\"-usehd\", DEFAULT_USE_HD_WALLET) && showDetails && pwalletMain->mapKeyMetadata[keyID].keypath.size() > 0)\n+    {\n+        UniValue result(UniValue::VOBJ);\n+        result.pushKV(\"address\", CBitcoinAddress(keyID).ToString());\n+        result.pushKV(\"keypath\", pwalletMain->mapKeyMetadata[keyID].keypath);\n+        return result;\n+    }\n     return CBitcoinAddress(keyID).ToString();\n }\n \n@@ -333,13 +343,13 @@ UniValue getaddressesbyaccount(const UniValue& params, bool fHelp)\n {\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n-\n-    if (fHelp || params.size() != 1)\n+    if (fHelp || params.size() > 2)\n         throw runtime_error(\n-            \"getaddressesbyaccount \\\"account\\\"\\n\"\n+            \"getaddressesbyaccount \\\"account\\\" ( \\\"details\\\" )\\n\"\n             \"\\nDEPRECATED. Returns the list of addresses for the given account.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"account\\\"  (string, required) The account name.\\n\"\n+            \"2. \\\"details\\\"  (boolean, optional) If set, the response will be populated with related HD details\\n\"\n             \"\\nResult:\\n\"\n             \"[                     (json array of string)\\n\"\n             \"  \\\"bitcoinaddress\\\"  (string) a bitcoin address associated with the given account\\n\"\n@@ -353,15 +363,37 @@ UniValue getaddressesbyaccount(const UniValue& params, bool fHelp)\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     string strAccount = AccountFromValue(params[0]);\n-\n+    bool showDetails = false;\n+    if (params.size() > 1)\n+        showDetails = params[1].isTrue();\n     // Find all addresses that have the given account\n     UniValue ret(UniValue::VARR);\n     BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, CAddressBookData)& item, pwalletMain->mapAddressBook)\n     {\n         const CBitcoinAddress& address = item.first;\n         const string& strName = item.second.name;\n         if (strName == strAccount)\n-            ret.push_back(address.ToString());\n+        {\n+            if (GetBoolArg(\"-usehd\", DEFAULT_USE_HD_WALLET) && showDetails)\n+            {\n+                UniValue addressObj(UniValue::VOBJ);\n+                CKeyID keyID;\n+                if (!address.GetKeyID(keyID))\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Could not get KeyID\");\n+\n+                if (pwalletMain->mapKeyMetadata[keyID].keypath.size() > 0)\n+                {\n+                    addressObj.pushKV(\"address\", address.ToString());\n+                    addressObj.pushKV(\"keypath\", pwalletMain->mapKeyMetadata[keyID].keypath);\n+                    addressObj.pushKV(\"hd_chain_id\", pwalletMain->mapKeyMetadata[keyID].chainID.GetHex());\n+                    ret.push_back(addressObj);\n+                }\n+                else\n+                    ret.push_back(address.ToString());\n+            }\n+            else\n+                ret.push_back(address.ToString());\n+        }\n     }\n     return ret;\n }"
      },
      {
        "sha": "0c32a5fb63a7b7c6e3cbc07172a58d399f5041c2",
        "filename": "src/wallet/test/hdkeystore_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3494217323059c13faa561d37563c48c144448ad/src/wallet/test/hdkeystore_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3494217323059c13faa561d37563c48c144448ad/src/wallet/test/hdkeystore_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/hdkeystore_tests.cpp?ref=3494217323059c13faa561d37563c48c144448ad",
        "patch": "@@ -4,6 +4,7 @@\n \n #include \"wallet/wallet.h\"\n #include \"base58.h\"\n+#include \"random.h\"\n \n #include <set>\n #include <stdint.h>\n@@ -44,6 +45,7 @@ BOOST_AUTO_TEST_CASE(hdkeystore_tests)\n     // store the chain\n     pwalletMain->AddHDChain(chain);\n     pwalletMain->AddMasterSeed(chain.chainID, seed);\n+    pwalletMain->SetActiveHDChainID(chain.chainID);\n \n     // create some keys\n     CKey newKey;\n@@ -81,19 +83,18 @@ BOOST_AUTO_TEST_CASE(hdkeystore_tests)\n     BOOST_CHECK(pwalletMain->GetNextChildIndex(chain.chainID, true) == 1);\n     BOOST_CHECK(CBitcoinAddress(newKey.GetPubKey().GetID()).ToString() == \"1HbQusfqAYSUEBqVfHzhasVqGatn6Jjqwq\");\n \n-    pwalletMain->EncryptSeeds();\n     BOOST_CHECK(pwalletMain->HaveKey(newKey.GetPubKey().GetID()) == true);\n \n     CKey keyTest;\n-    pwalletMain->GetKey(newKey.GetPubKey().GetID(), keyTest);\n+    BOOST_CHECK(pwalletMain->GetKey(newKey.GetPubKey().GetID(), keyTest));\n     BOOST_CHECK(CBitcoinSecret(keyTest).ToString() == \"L1igds57v39YDHZ1LirRZQkRiikPkPCECiDarFaiYxJ6JSyhXLn6\"); //m/1'/0'\n \n-//\n-//    CPubKey pkey = pwalletMain->GenerateNewKey();\n-//    std::string test23 = CBitcoinAddress(pkey.GetID()).ToString();\n-//\n-//    BOOST_CHECK(CBitcoinAddress(pkey.GetID()).ToString() == \"1PEzTQaYAqcnLR6Ug23pzFqTEakBttFrgo\");\n-//    BOOST_CHECK(pwalletMain->GetNextChildIndex(chain.chainID, false) == 3);\n+\n+    CPubKey pkey = pwalletMain->GenerateNewKey();\n+    std::string test23 = CBitcoinAddress(pkey.GetID()).ToString();\n+\n+    BOOST_CHECK(CBitcoinAddress(pkey.GetID()).ToString() == \"1PEzTQaYAqcnLR6Ug23pzFqTEakBttFrgo\");\n+    BOOST_CHECK(pwalletMain->GetNextChildIndex(chain.chainID, false) == 3);\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "dd66c2f150f6e83c33ca7f97ea042e73dad8dacb",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 107,
        "deletions": 7,
        "changes": 114,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3494217323059c13faa561d37563c48c144448ad/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3494217323059c13faa561d37563c48c144448ad/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=3494217323059c13faa561d37563c48c144448ad",
        "patch": "@@ -87,9 +87,26 @@ CPubKey CWallet::GenerateNewKey()\n {\n     AssertLockHeld(cs_wallet); // mapKeyMetadata\n     bool fCompressed = CanSupportFeature(FEATURE_COMPRPUBKEY); // default to compressed public keys if we want 0.6.0 wallets\n-\n     CKey secret;\n-    secret.MakeNewKey(fCompressed);\n+\n+    // Create new metadata\n+    int64_t nCreationTime = GetTime();\n+    CKeyMetadata metadata(nCreationTime);\n+\n+    // check if there is an active HD chain\n+    HDChainID activeHDChainID;\n+    bool validHDChain = GetActiveHDChainID(activeHDChainID);\n+    if (validHDChain)\n+    {\n+        // hd derive key\n+        std::string keypath;\n+        if (!DeriveKeyAtIndex(activeHDChainID, secret, keypath, GetNextChildIndex(activeHDChainID, false), false))\n+            throw std::runtime_error(\"CWallet::GenerateNewKey(): HD key derivation failed\");\n+        metadata.keypath = keypath;\n+        metadata.chainID = activeHDChainID;\n+    }\n+    else\n+        secret.MakeNewKey(fCompressed);\n \n     // Compressed public keys were introduced in version 0.6.0\n     if (fCompressed)\n@@ -98,12 +115,10 @@ CPubKey CWallet::GenerateNewKey()\n     CPubKey pubkey = secret.GetPubKey();\n     assert(secret.VerifyPubKey(pubkey));\n \n-    // Create new metadata\n-    int64_t nCreationTime = GetTime();\n-    mapKeyMetadata[pubkey.GetID()] = CKeyMetadata(nCreationTime);\n+    //mem store metadata, time of first key (wallet birthday)\n+    mapKeyMetadata[pubkey.GetID()] = metadata;\n     if (!nTimeFirstKey || nCreationTime < nTimeFirstKey)\n         nTimeFirstKey = nCreationTime;\n-\n     if (!AddKeyPubKey(secret, pubkey))\n         throw std::runtime_error(\"CWallet::GenerateNewKey(): AddKey failed\");\n     return pubkey;\n@@ -543,7 +558,7 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n             pwalletdbEncryption->WriteMasterKey(nMasterKeyMaxID, kMasterKey);\n         }\n \n-        if (!EncryptKeys(vMasterKey))\n+        if (!EncryptKeys(vMasterKey) || !EncryptHDSeeds(vMasterKey))\n         {\n             if (fFileBacked) {\n                 pwalletdbEncryption->TxnAbort();\n@@ -1040,6 +1055,89 @@ CAmount CWallet::GetChange(const CTransaction& tx) const\n     return nChange;\n }\n \n+bool CWallet::AddMasterSeed(const HDChainID& chainID, const CKeyingMaterial& masterSeed, bool memonly)\n+{\n+    LOCK(cs_wallet);\n+    if (!IsCrypted())\n+    {\n+        CHDKeyStore::AddMasterSeed(chainID, masterSeed);\n+\n+        if (!memonly && !CWalletDB(strWalletFile).WriteHDMasterSeed(chainID, masterSeed))\n+            throw runtime_error(\"AddMasterSeed(): writing master seed failed\");\n+    }\n+    else\n+    {\n+        if (IsLocked())\n+            return false;\n+\n+        std::vector<unsigned char> vchCryptedSecret;\n+        CKeyingMaterial emptyKey;\n+        if (!EncryptSeed(emptyKey, masterSeed, chainID, vchCryptedSecret))\n+            return false;\n+        AddCryptedMasterSeed(chainID, vchCryptedSecret);\n+\n+        if (!memonly && !CWalletDB(strWalletFile).WriteHDCryptedMasterSeed(chainID, vchCryptedSecret))\n+            throw runtime_error(\"AddMasterSeed(): writing master seed failed\");\n+    }\n+\n+    return true;\n+}\n+\n+bool CWallet::AddHDChain(const CHDChain& chain, bool memonly)\n+{\n+    LOCK(cs_wallet);\n+    CHDKeyStore::AddHDChain(chain);\n+    if (!memonly && !CWalletDB(strWalletFile).WriteHDChain(chain))\n+        throw runtime_error(\"AddHDChain(): writing chain failed\");\n+    return true;\n+}\n+\n+bool CWallet::EncryptHDSeeds(CKeyingMaterial& vMasterKeyIn)\n+{\n+    EncryptSeeds(vMasterKeyIn);\n+\n+    std::vector<HDChainID> chainIds;\n+    GetAvailableChainIDs(chainIds);\n+\n+    BOOST_FOREACH(HDChainID& chainId, chainIds)\n+    {\n+        std::vector<unsigned char> vchCryptedSecret;\n+        if (!GetCryptedMasterSeed(chainId, vchCryptedSecret))\n+            throw std::runtime_error(\"CWallet::EncryptHDSeeds(): Encrypting seeds failed!\");\n+\n+        if (pwalletdbEncryption)\n+            return pwalletdbEncryption->WriteHDCryptedMasterSeed(chainId, vchCryptedSecret);\n+        else\n+            return CWalletDB(strWalletFile).WriteHDCryptedMasterSeed(chainId, vchCryptedSecret);\n+    }\n+\n+    return true;\n+}\n+\n+bool CWallet::SetActiveHDChainID(const HDChainID& chainID, bool check, bool memonly)\n+{\n+    LOCK(cs_wallet);\n+\n+    CHDChain chainOut;\n+    if (check && !GetChain(chainID, chainOut))\n+        return false;\n+\n+    activeHDChain = chainID;\n+    if (!memonly && !CWalletDB(strWalletFile).WriteHDActiveChain(chainID))\n+        throw runtime_error(\"SetActiveHDChainID(): writing active chainid failed\");\n+\n+    return true;\n+}\n+\n+bool CWallet::GetActiveHDChainID(HDChainID& chainID)\n+{\n+    LOCK(cs_wallet);\n+    if (activeHDChain.IsNull())\n+        return false;\n+    chainID = activeHDChain;\n+    return true;\n+}\n+\n int64_t CWalletTx::GetTxTime() const\n {\n     int64_t n = nTimeSmart;\n@@ -2963,6 +3061,7 @@ std::string CWallet::GetWalletHelpString(bool showDebug)\n     strUsage += HelpMessageOpt(\"-keypool=<n>\", strprintf(_(\"Set key pool size to <n> (default: %u)\"), DEFAULT_KEYPOOL_SIZE));\n     strUsage += HelpMessageOpt(\"-fallbackfee=<amt>\", strprintf(_(\"A fee rate (in %s/kB) that will be used when fee estimation has insufficient data (default: %s)\"),\n                                                                CURRENCY_UNIT, FormatMoney(DEFAULT_FALLBACK_FEE)));\n+    strUsage += HelpMessageOpt(\"-hdseed\", _(\"Use the given 256bit (64 char hex) as HD master seed (default: <generate random seed>)\"));\n     strUsage += HelpMessageOpt(\"-mintxfee=<amt>\", strprintf(_(\"Fees (in %s/kB) smaller than this are considered zero fee for transaction creation (default: %s)\"),\n                                                             CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MINFEE)));\n     strUsage += HelpMessageOpt(\"-paytxfee=<amt>\", strprintf(_(\"Fee (in %s/kB) to add to transactions you send (default: %s)\"),\n@@ -2973,6 +3072,7 @@ std::string CWallet::GetWalletHelpString(bool showDebug)\n     strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), DEFAULT_SPEND_ZEROCONF_CHANGE));\n     strUsage += HelpMessageOpt(\"-txconfirmtarget=<n>\", strprintf(_(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\"), DEFAULT_TX_CONFIRM_TARGET));\n     strUsage += HelpMessageOpt(\"-upgradewallet\", _(\"Upgrade wallet to latest format on startup\"));\n+    strUsage += HelpMessageOpt(\"-usehd\", strprintf(_(\"Use hierarchical deterministic key derivation (HD wallets) (default: %d)\"), DEFAULT_USE_HD_WALLET));\n     strUsage += HelpMessageOpt(\"-wallet=<file>\", _(\"Specify wallet file (within data directory)\") + \" \" + strprintf(_(\"(default: %s)\"), DEFAULT_WALLET_DAT));\n     strUsage += HelpMessageOpt(\"-walletbroadcast\", _(\"Make the wallet broadcast transactions\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_WALLETBROADCAST));\n     strUsage += HelpMessageOpt(\"-walletnotify=<cmd>\", _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\"));"
      },
      {
        "sha": "9a37c852b43c3c45ae06f1bc2841acae49fd0717",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 16,
        "deletions": 1,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3494217323059c13faa561d37563c48c144448ad/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3494217323059c13faa561d37563c48c144448ad/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=3494217323059c13faa561d37563c48c144448ad",
        "patch": "@@ -55,6 +55,7 @@ static const unsigned int DEFAULT_TX_CONFIRM_TARGET = 2;\n //! Largest (in bytes) free transaction we're willing to create\n static const unsigned int MAX_FREE_TRANSACTION_CREATE_SIZE = 1000;\n static const bool DEFAULT_WALLETBROADCAST = true;\n+static const bool DEFAULT_USE_HD_WALLET = true;\n \n extern const char * DEFAULT_WALLET_DAT;\n \n@@ -73,8 +74,9 @@ enum WalletFeature\n \n     FEATURE_WALLETCRYPT = 40000, // wallet encryption\n     FEATURE_COMPRPUBKEY = 60000, // compressed public keys\n+    FEATURE_HD          = 70000, // hd keys\n \n-    FEATURE_LATEST = 60000\n+    FEATURE_LATEST = 70000\n };\n \n \n@@ -593,6 +595,9 @@ class CWallet : public CHDKeyStore, public CValidationInterface\n     MasterKeyMap mapMasterKeys;\n     unsigned int nMasterKeyMaxID;\n \n+    //! current active hd chain\n+    HDChainID activeHDChain;\n+\n     CWallet()\n     {\n         SetNull();\n@@ -874,6 +879,16 @@ class CWallet : public CHDKeyStore, public CValidationInterface\n \n     /* Returns the wallets help message */\n     static std::string GetWalletHelpString(bool showDebug);\n+\n+    /** HD functions */\n+    //! Adds a master seed the the in-mem map (store it in the db if memonly == false)\n+    bool AddMasterSeed(const HDChainID& chainID, const CKeyingMaterial& masterSeed, bool memonly = false);\n+    //! Adds a new HD keychain\n+    bool AddHDChain(const CHDChain& chain, bool memonly = false);\n+    //! Encrypt the HD seeds\n+    bool EncryptHDSeeds(CKeyingMaterial& vMasterKeyIn);\n+    bool SetActiveHDChainID(const HDChainID& chainID, bool check = true, bool memonly = false);\n+    bool GetActiveHDChainID(HDChainID& chainID);\n };\n \n /** A key allocated from the key pool. */"
      },
      {
        "sha": "435f3d89a92eebd9fa4270b16a9a26dac63abc37",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3494217323059c13faa561d37563c48c144448ad/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3494217323059c13faa561d37563c48c144448ad/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=3494217323059c13faa561d37563c48c144448ad",
        "patch": "@@ -605,7 +605,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             CKeyingMaterial masterSeed;\n             ssKey >> masterPubKeyHash;\n             ssValue >> masterSeed;\n-            pwallet->AddMasterSeed(masterPubKeyHash, masterSeed);\n+            pwallet->AddMasterSeed(masterPubKeyHash, masterSeed, true);\n         }\n         else if (strType == \"hdcryptedmasterseed\")\n         {\n@@ -1050,8 +1050,6 @@ bool CWalletDB::WriteHDCryptedMasterSeed(const uint256& hash, const std::vector<\n         return false;\n \n     Erase(std::make_pair(std::string(\"hdmasterseed\"), hash));\n-    Erase(std::make_pair(std::string(\"hdmasterseed\"), hash));\n-\n     return true;\n }\n \n@@ -1067,7 +1065,7 @@ bool CWalletDB::WriteHDChain(const CHDChain &chain)\n     return Write(std::make_pair(std::string(\"hdchain\"), chain.chainID), chain);\n }\n \n-bool CWalletDB::WriteHDAchiveChain(const uint256& hash)\n+bool CWalletDB::WriteHDActiveChain(const uint256& hash)\n {\n     nWalletDBUpdated++;\n     return Write(std::string(\"hdactivechain\"), hash);"
      },
      {
        "sha": "060ac55b17096cf04216557510df525d0d9d0889",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3494217323059c13faa561d37563c48c144448ad/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3494217323059c13faa561d37563c48c144448ad/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=3494217323059c13faa561d37563c48c144448ad",
        "patch": "@@ -106,7 +106,7 @@ class CWalletDB : public CDB\n     bool WriteHDCryptedMasterSeed(const uint256& hash, const std::vector<unsigned char>& vchCryptedSecret);\n     bool EraseHDMasterSeed(const uint256& hash);\n     bool WriteHDChain(const CHDChain& chain);\n-    bool WriteHDAchiveChain(const uint256& hash);\n+    bool WriteHDActiveChain(const uint256& hash);\n \n private:\n     CWalletDB(const CWalletDB&);"
      }
    ]
  }
]