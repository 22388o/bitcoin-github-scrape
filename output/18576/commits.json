[
  {
    "sha": "de8905adf204c42bba810802f82b98f7b3dd26dc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZTg5MDVhZGYyMDRjNDJiYmE4MTA4MDJmODJiOThmN2IzZGQyNmRj",
    "commit": {
      "author": {
        "name": "Gloria Zhao",
        "email": "gzhao408@berkeley.edu",
        "date": "2020-03-26T20:57:53Z"
      },
      "committer": {
        "name": "gzhao408",
        "email": "gzhao408@berkeley.edu",
        "date": "2020-04-26T20:31:39Z"
      },
      "message": "test: use unittest and test_runner for test framework unit testing\n\nTest the test_framework, but don't use test_framework objects or functions to test itself\n\nUse python unittest library and put test_framework's unit tests inside their respective files\nAdd the filename to TEST_FRAMEWORK_MODULES in test_runner\nAggregate all test_framework tests into one TestSuite to run before the functional tests in test_runner\nDelete framework_test_script, move test_bn2vch to script.py and add to TEST_FRAMEWORK_MODULES in test_runner",
      "tree": {
        "sha": "0f72c3ae5050682b622209d778748bcf06099865",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0f72c3ae5050682b622209d778748bcf06099865"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/de8905adf204c42bba810802f82b98f7b3dd26dc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de8905adf204c42bba810802f82b98f7b3dd26dc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/de8905adf204c42bba810802f82b98f7b3dd26dc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de8905adf204c42bba810802f82b98f7b3dd26dc/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3e50fdbe4e5bb98194e88023468bd77dee78b26e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e50fdbe4e5bb98194e88023468bd77dee78b26e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3e50fdbe4e5bb98194e88023468bd77dee78b26e"
      }
    ],
    "stats": {
      "total": 85,
      "additions": 39,
      "deletions": 46
    },
    "files": [
      {
        "sha": "9d916c00226e6648992993c81baf8e1738d9caa6",
        "filename": "test/functional/framework_test_script.py",
        "status": "removed",
        "additions": 0,
        "deletions": 44,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e50fdbe4e5bb98194e88023468bd77dee78b26e/test/functional/framework_test_script.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e50fdbe4e5bb98194e88023468bd77dee78b26e/test/functional/framework_test_script.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/framework_test_script.py?ref=3e50fdbe4e5bb98194e88023468bd77dee78b26e",
        "patch": "@@ -1,44 +0,0 @@\n-#!/usr/bin/env python3\n-# Copyright (c) 2020 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Tests for test_framework.script.\"\"\"\n-\n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.script import bn2vch\n-from test_framework.util import assert_equal\n-\n-def test_bn2vch():\n-    assert_equal(bn2vch(0), bytes([]))\n-    assert_equal(bn2vch(1), bytes([0x01]))\n-    assert_equal(bn2vch(-1), bytes([0x81]))\n-    assert_equal(bn2vch(0x7F), bytes([0x7F]))\n-    assert_equal(bn2vch(-0x7F), bytes([0xFF]))\n-    assert_equal(bn2vch(0x80), bytes([0x80, 0x00]))\n-    assert_equal(bn2vch(-0x80), bytes([0x80, 0x80]))\n-    assert_equal(bn2vch(0xFF), bytes([0xFF, 0x00]))\n-    assert_equal(bn2vch(-0xFF), bytes([0xFF, 0x80]))\n-    assert_equal(bn2vch(0x100), bytes([0x00, 0x01]))\n-    assert_equal(bn2vch(-0x100), bytes([0x00, 0x81]))\n-    assert_equal(bn2vch(0x7FFF), bytes([0xFF, 0x7F]))\n-    assert_equal(bn2vch(-0x8000), bytes([0x00, 0x80, 0x80]))\n-    assert_equal(bn2vch(-0x7FFFFF), bytes([0xFF, 0xFF, 0xFF]))\n-    assert_equal(bn2vch(0x80000000), bytes([0x00, 0x00, 0x00, 0x80, 0x00]))\n-    assert_equal(bn2vch(-0x80000000), bytes([0x00, 0x00, 0x00, 0x80, 0x80]))\n-    assert_equal(bn2vch(0xFFFFFFFF), bytes([0xFF, 0xFF, 0xFF, 0xFF, 0x00]))\n-\n-    assert_equal(bn2vch(123456789), bytes([0x15, 0xCD, 0x5B, 0x07]))\n-    assert_equal(bn2vch(-54321), bytes([0x31, 0xD4, 0x80]))\n-\n-class FrameworkTestScript(BitcoinTestFramework):\n-    def setup_network(self):\n-        pass\n-\n-    def set_test_params(self):\n-        self.num_nodes = 0\n-\n-    def run_test(self):\n-        test_bn2vch()\n-\n-if __name__ == '__main__':\n-    FrameworkTestScript().main()"
      },
      {
        "sha": "f490804bd93f1d47b92ed863ccf663643ce5e8ff",
        "filename": "test/functional/test_framework/script.py",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de8905adf204c42bba810802f82b98f7b3dd26dc/test/functional/test_framework/script.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de8905adf204c42bba810802f82b98f7b3dd26dc/test/functional/test_framework/script.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/script.py?ref=de8905adf204c42bba810802f82b98f7b3dd26dc",
        "patch": "@@ -8,6 +8,7 @@\n \"\"\"\n import hashlib\n import struct\n+import unittest\n \n from .messages import (\n     CTransaction,\n@@ -715,3 +716,25 @@ def SegwitV0SignatureHash(script, txTo, inIdx, hashtype, amount):\n     ss += struct.pack(\"<I\", hashtype)\n \n     return hash256(ss)\n+\n+class TestFrameworkScript(unittest.TestCase):\n+    def test_bn2vch(self):\n+        self.assertEqual(bn2vch(0), bytes([]))\n+        self.assertEqual(bn2vch(1), bytes([0x01]))\n+        self.assertEqual(bn2vch(-1), bytes([0x81]))\n+        self.assertEqual(bn2vch(0x7F), bytes([0x7F]))\n+        self.assertEqual(bn2vch(-0x7F), bytes([0xFF]))\n+        self.assertEqual(bn2vch(0x80), bytes([0x80, 0x00]))\n+        self.assertEqual(bn2vch(-0x80), bytes([0x80, 0x80]))\n+        self.assertEqual(bn2vch(0xFF), bytes([0xFF, 0x00]))\n+        self.assertEqual(bn2vch(-0xFF), bytes([0xFF, 0x80]))\n+        self.assertEqual(bn2vch(0x100), bytes([0x00, 0x01]))\n+        self.assertEqual(bn2vch(-0x100), bytes([0x00, 0x81]))\n+        self.assertEqual(bn2vch(0x7FFF), bytes([0xFF, 0x7F]))\n+        self.assertEqual(bn2vch(-0x8000), bytes([0x00, 0x80, 0x80]))\n+        self.assertEqual(bn2vch(-0x7FFFFF), bytes([0xFF, 0xFF, 0xFF]))\n+        self.assertEqual(bn2vch(0x80000000), bytes([0x00, 0x00, 0x00, 0x80, 0x00]))\n+        self.assertEqual(bn2vch(-0x80000000), bytes([0x00, 0x00, 0x00, 0x80, 0x80]))\n+        self.assertEqual(bn2vch(0xFFFFFFFF), bytes([0xFF, 0xFF, 0xFF, 0xFF, 0x00]))\n+        self.assertEqual(bn2vch(123456789), bytes([0x15, 0xCD, 0x5B, 0x07]))\n+        self.assertEqual(bn2vch(-54321), bytes([0x31, 0xD4, 0x80]))"
      },
      {
        "sha": "fbd93a497b71a9f49563dba0a200f45034c5a4c3",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 16,
        "deletions": 2,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de8905adf204c42bba810802f82b98f7b3dd26dc/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de8905adf204c42bba810802f82b98f7b3dd26dc/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=de8905adf204c42bba810802f82b98f7b3dd26dc",
        "patch": "@@ -24,6 +24,7 @@\n import tempfile\n import re\n import logging\n+import unittest\n \n # Formatting. Default colors to empty strings.\n BOLD, GREEN, RED, GREY = (\"\", \"\"), (\"\", \"\"), (\"\", \"\"), (\"\", \"\")\n@@ -65,6 +66,10 @@\n TEST_EXIT_PASSED = 0\n TEST_EXIT_SKIPPED = 77\n \n+TEST_FRAMEWORK_MODULES = [\n+    \"script\",\n+]\n+\n EXTENDED_SCRIPTS = [\n     # These tests are not run by default.\n     # Longest test should go first, to favor running tests in parallel\n@@ -221,7 +226,6 @@\n     'rpc_help.py',\n     'feature_help.py',\n     'feature_shutdown.py',\n-    'framework_test_script.py',\n     # Don't append tests at the end to avoid merge conflicts\n     # Put them in a random line within the section that fits their approximate run-time\n ]\n@@ -384,6 +388,16 @@ def run_tests(*, test_list, src_dir, build_dir, tmpdir, jobs=1, enable_coverage=\n     if os.path.isdir(cache_dir):\n         print(\"%sWARNING!%s There is a cache directory here: %s. If tests fail unexpectedly, try deleting the cache directory.\" % (BOLD[1], BOLD[0], cache_dir))\n \n+    # Test Framework Tests\n+    print(\"Running Unit Tests for Test Framework Modules\")\n+    test_framework_tests = unittest.TestSuite()\n+    for module in TEST_FRAMEWORK_MODULES:\n+        test_framework_tests.addTest(unittest.TestLoader().loadTestsFromName(\"test_framework.{}\".format(module)))\n+    result = unittest.TextTestRunner(verbosity=1, failfast=True).run(test_framework_tests)\n+    if not result.wasSuccessful():\n+        logging.debug(\"Early exiting after failure in TestFramework unit tests\")\n+        sys.exit(False)\n+\n     tests_dir = src_dir + '/test/functional/'\n \n     flags = ['--cachedir={}'.format(cache_dir)] + args\n@@ -607,7 +621,7 @@ def was_successful(self):\n def check_script_prefixes():\n     \"\"\"Check that test scripts start with one of the allowed name prefixes.\"\"\"\n \n-    good_prefixes_re = re.compile(\"^(example|feature|interface|mempool|mining|p2p|rpc|wallet|tool|framework_test)_\")\n+    good_prefixes_re = re.compile(\"^(example|feature|interface|mempool|mining|p2p|rpc|wallet|tool)_\")\n     bad_script_names = [script for script in ALL_SCRIPTS if good_prefixes_re.match(script) is None]\n \n     if bad_script_names:"
      }
    ]
  }
]