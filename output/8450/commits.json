[
  {
    "sha": "25400c4de18fe63a0b1051cc158b62f6c8c7ba90",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNTQwMGM0ZGUxOGZlNjNhMGIxMDUxY2MxNThiNjJmNmM4YzdiYTkw",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2016-08-04T02:28:39Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2016-08-08T02:30:16Z"
      },
      "message": "Account wallet feature RPC tests.",
      "tree": {
        "sha": "fbd9ba2bb58aeb2e3e0bfe71329ad16069387897",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fbd9ba2bb58aeb2e3e0bfe71329ad16069387897"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/25400c4de18fe63a0b1051cc158b62f6c8c7ba90",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25400c4de18fe63a0b1051cc158b62f6c8c7ba90",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/25400c4de18fe63a0b1051cc158b62f6c8c7ba90",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25400c4de18fe63a0b1051cc158b62f6c8c7ba90/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5c7a5e1f66d8611d84d66c7e0295bd41c71f85bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c7a5e1f66d8611d84d66c7e0295bd41c71f85bf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5c7a5e1f66d8611d84d66c7e0295bd41c71f85bf"
      }
    ],
    "stats": {
      "total": 95,
      "additions": 95,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ed509463435c1f4db6d6d08dccf08aafc3ed9633",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25400c4de18fe63a0b1051cc158b62f6c8c7ba90/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25400c4de18fe63a0b1051cc158b62f6c8c7ba90/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=25400c4de18fe63a0b1051cc158b62f6c8c7ba90",
        "patch": "@@ -106,6 +106,7 @@\n     'walletbackup.py',\n     'bip68-112-113-p2p.py',\n     'wallet.py',\n+    'wallet-accounts.py',\n     'wallet-hd.py',\n     'wallet-dump.py',\n     'listtransactions.py',"
      },
      {
        "sha": "c51181e4f8e9bf700208d91aacf191900985c789",
        "filename": "qa/rpc-tests/wallet-accounts.py",
        "status": "added",
        "additions": 94,
        "deletions": 0,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25400c4de18fe63a0b1051cc158b62f6c8c7ba90/qa/rpc-tests/wallet-accounts.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25400c4de18fe63a0b1051cc158b62f6c8c7ba90/qa/rpc-tests/wallet-accounts.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet-accounts.py?ref=25400c4de18fe63a0b1051cc158b62f6c8c7ba90",
        "patch": "@@ -0,0 +1,94 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    start_nodes,\n+    start_node,\n+    assert_equal,\n+    connect_nodes_bi,\n+)\n+\n+\n+class WalletAccountsTest(BitcoinTestFramework):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.node_args = [[]]\n+\n+    def setup_network(self):\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, self.node_args)\n+        self.is_network_split = False\n+\n+    def run_test (self):\n+        node = self.nodes[0]\n+        # Check that there's no UTXO on any of the nodes\n+        assert_equal(len(node.listunspent()), 0)\n+        \n+        node.generate(101)\n+        \n+        assert_equal(node.getbalance(), 50)\n+        \n+        accounts = [\"a\",\"b\",\"c\",\"d\",\"e\"]\n+        amount_to_send = 1.0\n+        account_addresses = dict()\n+        for account in accounts:\n+            address = node.getaccountaddress(account)\n+            account_addresses[account] = address\n+            \n+            node.getnewaddress(account)\n+            assert_equal(node.getaccount(address), account)\n+            assert(address in node.getaddressesbyaccount(account))\n+            \n+            node.sendfrom(\"\", address, amount_to_send)\n+        \n+        node.generate(1)\n+        \n+        for i in range(len(accounts)):\n+            from_account = accounts[i]\n+            to_account = accounts[(i+1)%len(accounts)]\n+            to_address = account_addresses[to_account]\n+            node.sendfrom(from_account, to_address, amount_to_send)\n+        \n+        node.generate(1)\n+        \n+        for account in accounts:\n+            address = node.getaccountaddress(account)\n+            assert(address != account_addresses[account])\n+            assert_equal(node.getreceivedbyaccount(account), 2)\n+            node.move(account, \"\", node.getbalance(account))\n+        \n+        node.generate(101)\n+        \n+        expected_account_balances = {\"\": 5200}\n+        for account in accounts:\n+            expected_account_balances[account] = 0\n+        \n+        assert_equal(node.listaccounts(), expected_account_balances)\n+        \n+        assert_equal(node.getbalance(\"\"), 5200)\n+        \n+        for account in accounts:\n+            address = node.getaccountaddress(\"\")\n+            node.setaccount(address, account)\n+            assert(address in node.getaddressesbyaccount(account))\n+            assert(address not in node.getaddressesbyaccount(\"\"))\n+        \n+        for account in accounts:\n+            addresses = []\n+            for x in range(10):\n+                addresses.append(node.getnewaddress())\n+            multisig_address = node.addmultisigaddress(5, addresses, account)\n+            node.sendfrom(\"\", multisig_address, 50)\n+        \n+        node.generate(101)\n+        \n+        for account in accounts:\n+            assert_equal(node.getbalance(account), 50)\n+\n+if __name__ == '__main__':\n+    WalletAccountsTest().main ()"
      }
    ]
  },
  {
    "sha": "9578333ec456bbfaccfecf9ea561c421f3a5d547",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NTc4MzMzZWM0NTZiYmZhY2NmZWNmOWVhNTYxYzQyMWYzYTVkNTQ3",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2016-08-03T23:37:02Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2016-08-08T02:30:20Z"
      },
      "message": "Remove rpc_wallet_tests.cpp",
      "tree": {
        "sha": "f1a5e5ed1b5cfea9bbbae2221d2a0290f0951936",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f1a5e5ed1b5cfea9bbbae2221d2a0290f0951936"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9578333ec456bbfaccfecf9ea561c421f3a5d547",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9578333ec456bbfaccfecf9ea561c421f3a5d547",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9578333ec456bbfaccfecf9ea561c421f3a5d547",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9578333ec456bbfaccfecf9ea561c421f3a5d547/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "25400c4de18fe63a0b1051cc158b62f6c8c7ba90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25400c4de18fe63a0b1051cc158b62f6c8c7ba90",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/25400c4de18fe63a0b1051cc158b62f6c8c7ba90"
      }
    ],
    "stats": {
      "total": 232,
      "additions": 1,
      "deletions": 231
    },
    "files": [
      {
        "sha": "0748d1a39d2321f26e891a857b476c770704c51b",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9578333ec456bbfaccfecf9ea561c421f3a5d547/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9578333ec456bbfaccfecf9ea561c421f3a5d547/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=9578333ec456bbfaccfecf9ea561c421f3a5d547",
        "patch": "@@ -97,8 +97,7 @@ BITCOIN_TESTS += \\\n   wallet/test/wallet_test_fixture.h \\\n   wallet/test/accounting_tests.cpp \\\n   wallet/test/wallet_tests.cpp \\\n-  wallet/test/crypto_tests.cpp \\\n-  wallet/test/rpc_wallet_tests.cpp\n+  wallet/test/crypto_tests.cpp\n endif\n \n test_test_bitcoin_SOURCES = $(BITCOIN_TESTS) $(JSON_TEST_FILES) $(RAW_TEST_FILES)"
      },
      {
        "sha": "4e7d177f518550240a3d36c40c06af2b8a58af29",
        "filename": "src/wallet/test/rpc_wallet_tests.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 229,
        "changes": 229,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25400c4de18fe63a0b1051cc158b62f6c8c7ba90/src/wallet/test/rpc_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25400c4de18fe63a0b1051cc158b62f6c8c7ba90/src/wallet/test/rpc_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/rpc_wallet_tests.cpp?ref=25400c4de18fe63a0b1051cc158b62f6c8c7ba90",
        "patch": "@@ -1,229 +0,0 @@\n-// Copyright (c) 2013-2015 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include \"rpc/server.h\"\n-#include \"rpc/client.h\"\n-\n-#include \"base58.h\"\n-#include \"main.h\"\n-#include \"wallet/wallet.h\"\n-\n-#include \"wallet/test/wallet_test_fixture.h\"\n-\n-#include <boost/algorithm/string.hpp>\n-#include <boost/test/unit_test.hpp>\n-\n-#include <univalue.h>\n-\n-using namespace std;\n-\n-extern UniValue createArgs(int nRequired, const char* address1 = NULL, const char* address2 = NULL);\n-extern UniValue CallRPC(string args);\n-\n-extern CWallet* pwalletMain;\n-\n-BOOST_FIXTURE_TEST_SUITE(rpc_wallet_tests, WalletTestingSetup)\n-\n-BOOST_AUTO_TEST_CASE(rpc_addmultisig)\n-{\n-    rpcfn_type addmultisig = tableRPC[\"addmultisigaddress\"]->actor;\n-\n-    // old, 65-byte-long:\n-    const char address1Hex[] = \"0434e3e09f49ea168c5bbf53f877ff4206923858aab7c7e1df25bc263978107c95e35065a27ef6f1b27222db0ec97e0e895eaca603d3ee0d4c060ce3d8a00286c8\";\n-    // new, compressed:\n-    const char address2Hex[] = \"0388c2037017c62240b6b72ac1a2a5f94da790596ebd06177c8572752922165cb4\";\n-\n-    UniValue v;\n-    CBitcoinAddress address;\n-    BOOST_CHECK_NO_THROW(v = addmultisig(createArgs(1, address1Hex), false));\n-    address.SetString(v.get_str());\n-    BOOST_CHECK(address.IsValid() && address.IsScript());\n-\n-    BOOST_CHECK_NO_THROW(v = addmultisig(createArgs(1, address1Hex, address2Hex), false));\n-    address.SetString(v.get_str());\n-    BOOST_CHECK(address.IsValid() && address.IsScript());\n-\n-    BOOST_CHECK_NO_THROW(v = addmultisig(createArgs(2, address1Hex, address2Hex), false));\n-    address.SetString(v.get_str());\n-    BOOST_CHECK(address.IsValid() && address.IsScript());\n-\n-    BOOST_CHECK_THROW(addmultisig(createArgs(0), false), runtime_error);\n-    BOOST_CHECK_THROW(addmultisig(createArgs(1), false), runtime_error);\n-    BOOST_CHECK_THROW(addmultisig(createArgs(2, address1Hex), false), runtime_error);\n-\n-    BOOST_CHECK_THROW(addmultisig(createArgs(1, \"\"), false), runtime_error);\n-    BOOST_CHECK_THROW(addmultisig(createArgs(1, \"NotAValidPubkey\"), false), runtime_error);\n-\n-    string short1(address1Hex, address1Hex + sizeof(address1Hex) - 2); // last byte missing\n-    BOOST_CHECK_THROW(addmultisig(createArgs(2, short1.c_str()), false), runtime_error);\n-\n-    string short2(address1Hex + 1, address1Hex + sizeof(address1Hex)); // first byte missing\n-    BOOST_CHECK_THROW(addmultisig(createArgs(2, short2.c_str()), false), runtime_error);\n-}\n-\n-BOOST_AUTO_TEST_CASE(rpc_wallet)\n-{\n-    // Test RPC calls for various wallet statistics\n-    UniValue r;\n-    CPubKey demoPubkey;\n-    CBitcoinAddress demoAddress;\n-    UniValue retValue;\n-    string strAccount = \"walletDemoAccount\";\n-    CBitcoinAddress setaccountDemoAddress;\n-    {\n-        LOCK(pwalletMain->cs_wallet);\n-\n-        demoPubkey = pwalletMain->GenerateNewKey();\n-        demoAddress = CBitcoinAddress(CTxDestination(demoPubkey.GetID()));\n-        string strPurpose = \"receive\";\n-        BOOST_CHECK_NO_THROW({ /*Initialize Wallet with an account */\n-            CWalletDB walletdb(pwalletMain->strWalletFile);\n-            CAccount account;\n-            account.vchPubKey = demoPubkey;\n-            pwalletMain->SetAddressBook(account.vchPubKey.GetID(), strAccount, strPurpose);\n-            walletdb.WriteAccount(strAccount, account);\n-        });\n-\n-        CPubKey setaccountDemoPubkey = pwalletMain->GenerateNewKey();\n-        setaccountDemoAddress = CBitcoinAddress(CTxDestination(setaccountDemoPubkey.GetID()));\n-    }\n-    /*********************************\n-     * \t\t\tsetaccount\n-     *********************************/\n-    BOOST_CHECK_NO_THROW(CallRPC(\"setaccount \" + setaccountDemoAddress.ToString() + \" nullaccount\"));\n-    /* 1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ is not owned by the test wallet. */\n-    BOOST_CHECK_THROW(CallRPC(\"setaccount 1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ nullaccount\"), runtime_error);\n-    BOOST_CHECK_THROW(CallRPC(\"setaccount\"), runtime_error);\n-    /* 1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4X (33 chars) is an illegal address (should be 34 chars) */\n-    BOOST_CHECK_THROW(CallRPC(\"setaccount 1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4X nullaccount\"), runtime_error);\n-\n-\n-    /*********************************\n-     *                  getbalance\n-     *********************************/\n-    BOOST_CHECK_NO_THROW(CallRPC(\"getbalance\"));\n-    BOOST_CHECK_NO_THROW(CallRPC(\"getbalance \" + demoAddress.ToString()));\n-\n-    /*********************************\n-     * \t\t\tlistunspent\n-     *********************************/\n-    BOOST_CHECK_NO_THROW(CallRPC(\"listunspent\"));\n-    BOOST_CHECK_THROW(CallRPC(\"listunspent string\"), runtime_error);\n-    BOOST_CHECK_THROW(CallRPC(\"listunspent 0 string\"), runtime_error);\n-    BOOST_CHECK_THROW(CallRPC(\"listunspent 0 1 not_array\"), runtime_error);\n-    BOOST_CHECK_THROW(CallRPC(\"listunspent 0 1 [] extra\"), runtime_error);\n-    BOOST_CHECK_NO_THROW(r = CallRPC(\"listunspent 0 1 []\"));\n-    BOOST_CHECK(r.get_array().empty());\n-\n-    /*********************************\n-     * \t\tlistreceivedbyaddress\n-     *********************************/\n-    BOOST_CHECK_NO_THROW(CallRPC(\"listreceivedbyaddress\"));\n-    BOOST_CHECK_NO_THROW(CallRPC(\"listreceivedbyaddress 0\"));\n-    BOOST_CHECK_THROW(CallRPC(\"listreceivedbyaddress not_int\"), runtime_error);\n-    BOOST_CHECK_THROW(CallRPC(\"listreceivedbyaddress 0 not_bool\"), runtime_error);\n-    BOOST_CHECK_NO_THROW(CallRPC(\"listreceivedbyaddress 0 true\"));\n-    BOOST_CHECK_THROW(CallRPC(\"listreceivedbyaddress 0 true extra\"), runtime_error);\n-\n-    /*********************************\n-     * \t\tlistreceivedbyaccount\n-     *********************************/\n-    BOOST_CHECK_NO_THROW(CallRPC(\"listreceivedbyaccount\"));\n-    BOOST_CHECK_NO_THROW(CallRPC(\"listreceivedbyaccount 0\"));\n-    BOOST_CHECK_THROW(CallRPC(\"listreceivedbyaccount not_int\"), runtime_error);\n-    BOOST_CHECK_THROW(CallRPC(\"listreceivedbyaccount 0 not_bool\"), runtime_error);\n-    BOOST_CHECK_NO_THROW(CallRPC(\"listreceivedbyaccount 0 true\"));\n-    BOOST_CHECK_THROW(CallRPC(\"listreceivedbyaccount 0 true extra\"), runtime_error);\n-\n-    /*********************************\n-     *          listsinceblock\n-     *********************************/\n-    BOOST_CHECK_NO_THROW(CallRPC(\"listsinceblock\"));\n-\n-    /*********************************\n-     *          listtransactions\n-     *********************************/\n-    BOOST_CHECK_NO_THROW(CallRPC(\"listtransactions\"));\n-    BOOST_CHECK_NO_THROW(CallRPC(\"listtransactions \" + demoAddress.ToString()));\n-    BOOST_CHECK_NO_THROW(CallRPC(\"listtransactions \" + demoAddress.ToString() + \" 20\"));\n-    BOOST_CHECK_NO_THROW(CallRPC(\"listtransactions \" + demoAddress.ToString() + \" 20 0\"));\n-    BOOST_CHECK_THROW(CallRPC(\"listtransactions \" + demoAddress.ToString() + \" not_int\"), runtime_error);\n-\n-    /*********************************\n-     *          listlockunspent\n-     *********************************/\n-    BOOST_CHECK_NO_THROW(CallRPC(\"listlockunspent\"));\n-\n-    /*********************************\n-     *          listaccounts\n-     *********************************/\n-    BOOST_CHECK_NO_THROW(CallRPC(\"listaccounts\"));\n-\n-    /*********************************\n-     *          listaddressgroupings\n-     *********************************/\n-    BOOST_CHECK_NO_THROW(CallRPC(\"listaddressgroupings\"));\n-\n-    /*********************************\n-     * \t\tgetrawchangeaddress\n-     *********************************/\n-    BOOST_CHECK_NO_THROW(CallRPC(\"getrawchangeaddress\"));\n-\n-    /*********************************\n-     * \t\tgetnewaddress\n-     *********************************/\n-    BOOST_CHECK_NO_THROW(CallRPC(\"getnewaddress\"));\n-    BOOST_CHECK_NO_THROW(CallRPC(\"getnewaddress getnewaddress_demoaccount\"));\n-\n-    /*********************************\n-     * \t\tgetaccountaddress\n-     *********************************/\n-    BOOST_CHECK_NO_THROW(CallRPC(\"getaccountaddress \\\"\\\"\"));\n-    BOOST_CHECK_NO_THROW(CallRPC(\"getaccountaddress accountThatDoesntExists\")); // Should generate a new account\n-    BOOST_CHECK_NO_THROW(retValue = CallRPC(\"getaccountaddress \" + strAccount));\n-    BOOST_CHECK(CBitcoinAddress(retValue.get_str()).Get() == demoAddress.Get());\n-\n-    /*********************************\n-     * \t\t\tgetaccount\n-     *********************************/\n-    BOOST_CHECK_THROW(CallRPC(\"getaccount\"), runtime_error);\n-    BOOST_CHECK_NO_THROW(CallRPC(\"getaccount \" + demoAddress.ToString()));\n-\n-    /*********************************\n-     * \tsignmessage + verifymessage\n-     *********************************/\n-    BOOST_CHECK_NO_THROW(retValue = CallRPC(\"signmessage \" + demoAddress.ToString() + \" mymessage\"));\n-    BOOST_CHECK_THROW(CallRPC(\"signmessage\"), runtime_error);\n-    /* Should throw error because this address is not loaded in the wallet */\n-    BOOST_CHECK_THROW(CallRPC(\"signmessage 1QFqqMUD55ZV3PJEJZtaKCsQmjLT6JkjvJ mymessage\"), runtime_error);\n-\n-    /* missing arguments */\n-    BOOST_CHECK_THROW(CallRPC(\"verifymessage \" + demoAddress.ToString()), runtime_error);\n-    BOOST_CHECK_THROW(CallRPC(\"verifymessage \" + demoAddress.ToString() + \" \" + retValue.get_str()), runtime_error);\n-    /* Illegal address */\n-    BOOST_CHECK_THROW(CallRPC(\"verifymessage 1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4X \" + retValue.get_str() + \" mymessage\"), runtime_error);\n-    /* wrong address */\n-    BOOST_CHECK(CallRPC(\"verifymessage 1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ \" + retValue.get_str() + \" mymessage\").get_bool() == false);\n-    /* Correct address and signature but wrong message */\n-    BOOST_CHECK(CallRPC(\"verifymessage \" + demoAddress.ToString() + \" \" + retValue.get_str() + \" wrongmessage\").get_bool() == false);\n-    /* Correct address, message and signature*/\n-    BOOST_CHECK(CallRPC(\"verifymessage \" + demoAddress.ToString() + \" \" + retValue.get_str() + \" mymessage\").get_bool() == true);\n-\n-    /*********************************\n-     * \t\tgetaddressesbyaccount\n-     *********************************/\n-    BOOST_CHECK_THROW(CallRPC(\"getaddressesbyaccount\"), runtime_error);\n-    BOOST_CHECK_NO_THROW(retValue = CallRPC(\"getaddressesbyaccount \" + strAccount));\n-    UniValue arr = retValue.get_array();\n-    BOOST_CHECK(arr.size() > 0);\n-    BOOST_CHECK(CBitcoinAddress(arr[0].get_str()).Get() == demoAddress.Get());\n-\n-    /*********************************\n-     * \t     fundrawtransaction\n-     *********************************/\n-    BOOST_CHECK_THROW(CallRPC(\"fundrawtransaction 28z\"), runtime_error);\n-    BOOST_CHECK_THROW(CallRPC(\"fundrawtransaction 01000000000180969800000000001976a91450ce0a4b0ee0ddeb633da85199728b940ac3fe9488ac00000000\"), runtime_error);\n-}\n-\n-BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]