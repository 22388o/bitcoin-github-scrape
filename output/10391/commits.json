[
  {
    "sha": "b779f5a12a1fd7b2bfc8d194d635dec7d2514209",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNzc5ZjVhMTJhMWZkN2IyYmZjOGQxOTRkNjM1ZGVjN2QyNTE0MjA5",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-05-12T02:38:01Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-05-12T02:38:01Z"
      },
      "message": "script: Allow interpreter to fail with SCRIPT_ERR_NOT_FINAL to indicate a context-dependent/non-final status",
      "tree": {
        "sha": "537bc2cc2edbe47a0af3c54aa32b3c4eff8f3eb6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/537bc2cc2edbe47a0af3c54aa32b3c4eff8f3eb6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b779f5a12a1fd7b2bfc8d194d635dec7d2514209",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b779f5a12a1fd7b2bfc8d194d635dec7d2514209",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b779f5a12a1fd7b2bfc8d194d635dec7d2514209",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b779f5a12a1fd7b2bfc8d194d635dec7d2514209/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "94e52273f30fc9f3f1a7b58778ed21781bb2a744",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94e52273f30fc9f3f1a7b58778ed21781bb2a744",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/94e52273f30fc9f3f1a7b58778ed21781bb2a744"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0d57bbeb22b57f43fccec62d68a4046be6e8b1dc",
        "filename": "src/script/script_error.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b779f5a12a1fd7b2bfc8d194d635dec7d2514209/src/script/script_error.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b779f5a12a1fd7b2bfc8d194d635dec7d2514209/src/script/script_error.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script_error.h?ref=b779f5a12a1fd7b2bfc8d194d635dec7d2514209",
        "patch": "@@ -64,6 +64,8 @@ typedef enum ScriptError_t\n     SCRIPT_ERR_WITNESS_UNEXPECTED,\n     SCRIPT_ERR_WITNESS_PUBKEYTYPE,\n \n+    SCRIPT_ERR_NOT_FINAL,\n+\n     SCRIPT_ERR_ERROR_COUNT\n } ScriptError;\n "
      },
      {
        "sha": "9cdc7eaec9f70bec308bc5c2287db71374869ff1",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b779f5a12a1fd7b2bfc8d194d635dec7d2514209/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b779f5a12a1fd7b2bfc8d194d635dec7d2514209/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=b779f5a12a1fd7b2bfc8d194d635dec7d2514209",
        "patch": "@@ -1386,6 +1386,9 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n                     pvChecks->push_back(CScriptCheck());\n                     check.swap(pvChecks->back());\n                 } else if (!check()) {\n+                    if (check.GetScriptError() == SCRIPT_ERR_NOT_FINAL) {\n+                        return state.DoS(0, false, REJECT_NONSTANDARD, \"non-final\");\n+                    }\n                     if (flags & STANDARD_NOT_MANDATORY_VERIFY_FLAGS) {\n                         // Check whether the failure was caused by a\n                         // non-mandatory script verification check, such as"
      }
    ]
  },
  {
    "sha": "7aabfd8111ae5a26f6c19c7323b66e3141a36883",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YWFiZmQ4MTExYWU1YTI2ZjZjMTljNzMyM2I2NmUzMTQxYTM2ODgz",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-05-12T02:54:33Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-05-12T02:54:33Z"
      },
      "message": "policy: Split STANDARD_SCRIPT_VERIFY_FLAGS between contextual and non-contextual",
      "tree": {
        "sha": "805baebe3001c523a3bfbbe8d9b59e4668f21f69",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/805baebe3001c523a3bfbbe8d9b59e4668f21f69"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7aabfd8111ae5a26f6c19c7323b66e3141a36883",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7aabfd8111ae5a26f6c19c7323b66e3141a36883",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7aabfd8111ae5a26f6c19c7323b66e3141a36883",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7aabfd8111ae5a26f6c19c7323b66e3141a36883/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b779f5a12a1fd7b2bfc8d194d635dec7d2514209",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b779f5a12a1fd7b2bfc8d194d635dec7d2514209",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b779f5a12a1fd7b2bfc8d194d635dec7d2514209"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 30,
      "deletions": 25
    },
    "files": [
      {
        "sha": "01052e765815f288f564edcdc2792089df85b97d",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7aabfd8111ae5a26f6c19c7323b66e3141a36883/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7aabfd8111ae5a26f6c19c7323b66e3141a36883/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=7aabfd8111ae5a26f6c19c7323b66e3141a36883",
        "patch": "@@ -613,7 +613,7 @@ static void MutateTxSign(CMutableTransaction& tx, const std::string& flagStr)\n             sigdata = CombineSignatures(prevPubKey, MutableTransactionSignatureChecker(&mergedTx, i, amount), sigdata, DataFromTransaction(txv, i));\n         UpdateTransaction(mergedTx, i, sigdata);\n \n-        if (!VerifyScript(txin.scriptSig, prevPubKey, &txin.scriptWitness, STANDARD_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i, amount)))\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, &txin.scriptWitness, STANDARD_NONCONTEXTUAL_SCRIPT_VERIFY_FLAGS, MutableTransactionSignatureChecker(&mergedTx, i, amount)))\n             fComplete = false;\n     }\n "
      },
      {
        "sha": "e42c115f330f759b7c355abbedb807e70247da36",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7aabfd8111ae5a26f6c19c7323b66e3141a36883/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7aabfd8111ae5a26f6c19c7323b66e3141a36883/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=7aabfd8111ae5a26f6c19c7323b66e3141a36883",
        "patch": "@@ -51,7 +51,7 @@ static const unsigned int DUST_RELAY_TX_FEE = 1000;\n  * with. However scripts violating these flags may still be present in valid\n  * blocks and we must accept those blocks.\n  */\n-static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY_FLAGS |\n+static const unsigned int STANDARD_CONTEXTUAL_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY_FLAGS |\n                                                          SCRIPT_VERIFY_DERSIG |\n                                                          SCRIPT_VERIFY_STRICTENC |\n                                                          SCRIPT_VERIFY_MINIMALDATA |\n@@ -67,8 +67,11 @@ static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY\n                                                          SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM |\n                                                          SCRIPT_VERIFY_WITNESS_PUBKEYTYPE;\n \n+/** For convenience, standard but not contextual verify flags. */\n+static const unsigned int STANDARD_NONCONTEXTUAL_SCRIPT_VERIFY_FLAGS = STANDARD_CONTEXTUAL_SCRIPT_VERIFY_FLAGS & ~CONTEXTUAL_SCRIPT_VERIFY_FLAGS;\n+\n /** For convenience, standard but not mandatory verify flags. */\n-static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;\n+static const unsigned int STANDARD_CONTEXTUAL_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_CONTEXTUAL_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;\n \n /** Used as the flags parameter to sequence and nLocktime checks in non-consensus code. */\n static const unsigned int STANDARD_LOCKTIME_VERIFY_FLAGS = LOCKTIME_VERIFY_SEQUENCE |"
      },
      {
        "sha": "a625af8093bd6279ccac8d0dd918c5047f606dd3",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7aabfd8111ae5a26f6c19c7323b66e3141a36883/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7aabfd8111ae5a26f6c19c7323b66e3141a36883/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=7aabfd8111ae5a26f6c19c7323b66e3141a36883",
        "patch": "@@ -784,7 +784,7 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n         UpdateTransaction(mergedTx, i, sigdata);\n \n         ScriptError serror = SCRIPT_ERR_OK;\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, &txin.scriptWitness, STANDARD_SCRIPT_VERIFY_FLAGS, TransactionSignatureChecker(&txConst, i, amount), &serror)) {\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, &txin.scriptWitness, STANDARD_NONCONTEXTUAL_SCRIPT_VERIFY_FLAGS, TransactionSignatureChecker(&txConst, i, amount), &serror)) {\n             TxInErrorToJSON(txin, vErrors, ScriptErrorString(serror));\n         }\n     }"
      },
      {
        "sha": "f38716584b95779e36159a7815d062c417c9f36d",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7aabfd8111ae5a26f6c19c7323b66e3141a36883/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7aabfd8111ae5a26f6c19c7323b66e3141a36883/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=7aabfd8111ae5a26f6c19c7323b66e3141a36883",
        "patch": "@@ -108,6 +108,8 @@ enum\n     SCRIPT_VERIFY_WITNESS_PUBKEYTYPE = (1U << 15),\n };\n \n+static const unsigned int CONTEXTUAL_SCRIPT_VERIFY_FLAGS = 0;\n+\n bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror);\n \n struct PrecomputedTransactionData"
      },
      {
        "sha": "3c6eb37b91231c6fb6c297a6b340d2a1dee7ef5a",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7aabfd8111ae5a26f6c19c7323b66e3141a36883/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7aabfd8111ae5a26f6c19c7323b66e3141a36883/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=7aabfd8111ae5a26f6c19c7323b66e3141a36883",
        "patch": "@@ -184,7 +184,7 @@ bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& fromPu\n     sigdata.scriptSig = PushAll(result);\n \n     // Test solution\n-    return solved && VerifyScript(sigdata.scriptSig, fromPubKey, &sigdata.scriptWitness, STANDARD_SCRIPT_VERIFY_FLAGS, creator.Checker());\n+    return solved && VerifyScript(sigdata.scriptSig, fromPubKey, &sigdata.scriptWitness, STANDARD_NONCONTEXTUAL_SCRIPT_VERIFY_FLAGS, creator.Checker());\n }\n \n SignatureData DataFromTransaction(const CMutableTransaction& tx, unsigned int nIn)"
      },
      {
        "sha": "684785af420e1ca50e2caeebcf21d183952e8c0d",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7aabfd8111ae5a26f6c19c7323b66e3141a36883/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7aabfd8111ae5a26f6c19c7323b66e3141a36883/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=7aabfd8111ae5a26f6c19c7323b66e3141a36883",
        "patch": "@@ -546,11 +546,11 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     CheckWithFlag(output1, input1, 0, true);\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true);\n-    CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n+    CheckWithFlag(output1, input1, STANDARD_NONCONTEXTUAL_SCRIPT_VERIFY_FLAGS, true);\n     CheckWithFlag(output1, input2, 0, false);\n     CheckWithFlag(output1, input2, SCRIPT_VERIFY_P2SH, false);\n     CheckWithFlag(output1, input2, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false);\n-    CheckWithFlag(output1, input2, STANDARD_SCRIPT_VERIFY_FLAGS, false);\n+    CheckWithFlag(output1, input2, STANDARD_NONCONTEXTUAL_SCRIPT_VERIFY_FLAGS, false);\n \n     // P2SH pay-to-compressed-pubkey.\n     CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(scriptPubkey1)), output1, input1);\n@@ -559,23 +559,23 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     CheckWithFlag(output1, input1, 0, true);\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true);\n-    CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n+    CheckWithFlag(output1, input1, STANDARD_NONCONTEXTUAL_SCRIPT_VERIFY_FLAGS, true);\n     CheckWithFlag(output1, input2, 0, true);\n     CheckWithFlag(output1, input2, SCRIPT_VERIFY_P2SH, false);\n     CheckWithFlag(output1, input2, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false);\n-    CheckWithFlag(output1, input2, STANDARD_SCRIPT_VERIFY_FLAGS, false);\n+    CheckWithFlag(output1, input2, STANDARD_NONCONTEXTUAL_SCRIPT_VERIFY_FLAGS, false);\n \n     // Witness pay-to-compressed-pubkey (v0).\n     CreateCreditAndSpend(keystore, GetScriptForWitness(scriptPubkey1), output1, input1);\n     CreateCreditAndSpend(keystore, GetScriptForWitness(scriptPubkey2), output2, input2);\n     CheckWithFlag(output1, input1, 0, true);\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true);\n-    CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n+    CheckWithFlag(output1, input1, STANDARD_NONCONTEXTUAL_SCRIPT_VERIFY_FLAGS, true);\n     CheckWithFlag(output1, input2, 0, true);\n     CheckWithFlag(output1, input2, SCRIPT_VERIFY_P2SH, true);\n     CheckWithFlag(output1, input2, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false);\n-    CheckWithFlag(output1, input2, STANDARD_SCRIPT_VERIFY_FLAGS, false);\n+    CheckWithFlag(output1, input2, STANDARD_NONCONTEXTUAL_SCRIPT_VERIFY_FLAGS, false);\n \n     // P2SH witness pay-to-compressed-pubkey (v0).\n     CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(GetScriptForWitness(scriptPubkey1))), output1, input1);\n@@ -584,23 +584,23 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     CheckWithFlag(output1, input1, 0, true);\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true);\n-    CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n+    CheckWithFlag(output1, input1, STANDARD_NONCONTEXTUAL_SCRIPT_VERIFY_FLAGS, true);\n     CheckWithFlag(output1, input2, 0, true);\n     CheckWithFlag(output1, input2, SCRIPT_VERIFY_P2SH, true);\n     CheckWithFlag(output1, input2, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false);\n-    CheckWithFlag(output1, input2, STANDARD_SCRIPT_VERIFY_FLAGS, false);\n+    CheckWithFlag(output1, input2, STANDARD_NONCONTEXTUAL_SCRIPT_VERIFY_FLAGS, false);\n \n     // Normal pay-to-uncompressed-pubkey.\n     CreateCreditAndSpend(keystore, scriptPubkey1L, output1, input1);\n     CreateCreditAndSpend(keystore, scriptPubkey2L, output2, input2);\n     CheckWithFlag(output1, input1, 0, true);\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true);\n-    CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n+    CheckWithFlag(output1, input1, STANDARD_NONCONTEXTUAL_SCRIPT_VERIFY_FLAGS, true);\n     CheckWithFlag(output1, input2, 0, false);\n     CheckWithFlag(output1, input2, SCRIPT_VERIFY_P2SH, false);\n     CheckWithFlag(output1, input2, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false);\n-    CheckWithFlag(output1, input2, STANDARD_SCRIPT_VERIFY_FLAGS, false);\n+    CheckWithFlag(output1, input2, STANDARD_NONCONTEXTUAL_SCRIPT_VERIFY_FLAGS, false);\n \n     // P2SH pay-to-uncompressed-pubkey.\n     CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(scriptPubkey1L)), output1, input1);\n@@ -609,11 +609,11 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     CheckWithFlag(output1, input1, 0, true);\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true);\n-    CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n+    CheckWithFlag(output1, input1, STANDARD_NONCONTEXTUAL_SCRIPT_VERIFY_FLAGS, true);\n     CheckWithFlag(output1, input2, 0, true);\n     CheckWithFlag(output1, input2, SCRIPT_VERIFY_P2SH, false);\n     CheckWithFlag(output1, input2, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false);\n-    CheckWithFlag(output1, input2, STANDARD_SCRIPT_VERIFY_FLAGS, false);\n+    CheckWithFlag(output1, input2, STANDARD_NONCONTEXTUAL_SCRIPT_VERIFY_FLAGS, false);\n \n     // Signing disabled for witness pay-to-uncompressed-pubkey (v1).\n     CreateCreditAndSpend(keystore, GetScriptForWitness(scriptPubkey1L), output1, input1, false);\n@@ -630,7 +630,7 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     CheckWithFlag(output2, input2, 0, false);\n     BOOST_CHECK(*output1 == *output2);\n     UpdateTransaction(input1, 0, CombineSignatures(output1->vout[0].scriptPubKey, MutableTransactionSignatureChecker(&input1, 0, output1->vout[0].nValue), DataFromTransaction(input1, 0), DataFromTransaction(input2, 0)));\n-    CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n+    CheckWithFlag(output1, input1, STANDARD_NONCONTEXTUAL_SCRIPT_VERIFY_FLAGS, true);\n \n     // P2SH 2-of-2 multisig\n     CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(scriptMulti)), output1, input1, false);\n@@ -642,7 +642,7 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     BOOST_CHECK(*output1 == *output2);\n     UpdateTransaction(input1, 0, CombineSignatures(output1->vout[0].scriptPubKey, MutableTransactionSignatureChecker(&input1, 0, output1->vout[0].nValue), DataFromTransaction(input1, 0), DataFromTransaction(input2, 0)));\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n-    CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n+    CheckWithFlag(output1, input1, STANDARD_NONCONTEXTUAL_SCRIPT_VERIFY_FLAGS, true);\n \n     // Witness 2-of-2 multisig\n     CreateCreditAndSpend(keystore, GetScriptForWitness(scriptMulti), output1, input1, false);\n@@ -654,7 +654,7 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     BOOST_CHECK(*output1 == *output2);\n     UpdateTransaction(input1, 0, CombineSignatures(output1->vout[0].scriptPubKey, MutableTransactionSignatureChecker(&input1, 0, output1->vout[0].nValue), DataFromTransaction(input1, 0), DataFromTransaction(input2, 0)));\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, true);\n-    CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n+    CheckWithFlag(output1, input1, STANDARD_NONCONTEXTUAL_SCRIPT_VERIFY_FLAGS, true);\n \n     // P2SH witness 2-of-2 multisig\n     CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(GetScriptForWitness(scriptMulti))), output1, input1, false);\n@@ -666,7 +666,7 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     BOOST_CHECK(*output1 == *output2);\n     UpdateTransaction(input1, 0, CombineSignatures(output1->vout[0].scriptPubKey, MutableTransactionSignatureChecker(&input1, 0, output1->vout[0].nValue), DataFromTransaction(input1, 0), DataFromTransaction(input2, 0)));\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, true);\n-    CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n+    CheckWithFlag(output1, input1, STANDARD_NONCONTEXTUAL_SCRIPT_VERIFY_FLAGS, true);\n }\n \n BOOST_AUTO_TEST_CASE(test_IsStandard)"
      },
      {
        "sha": "01eb343b7629ef63ce6ac91f20cd9d6c9683f71f",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7aabfd8111ae5a26f6c19c7323b66e3141a36883/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7aabfd8111ae5a26f6c19c7323b66e3141a36883/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=7aabfd8111ae5a26f6c19c7323b66e3141a36883",
        "patch": "@@ -683,7 +683,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         if (tx.HasWitness() && fRequireStandard && !IsWitnessStandard(tx, view))\n             return state.DoS(0, false, REJECT_NONSTANDARD, \"bad-witness-nonstandard\", true);\n \n-        int64_t nSigOpsCost = GetTransactionSigOpCost(tx, view, STANDARD_SCRIPT_VERIFY_FLAGS);\n+        int64_t nSigOpsCost = GetTransactionSigOpCost(tx, view, STANDARD_NONCONTEXTUAL_SCRIPT_VERIFY_FLAGS);\n \n         CAmount nValueOut = tx.GetValueOut();\n         CAmount nFees = nValueIn-nValueOut;\n@@ -885,7 +885,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n             }\n         }\n \n-        unsigned int scriptVerifyFlags = STANDARD_SCRIPT_VERIFY_FLAGS;\n+        unsigned int scriptVerifyFlags = STANDARD_CONTEXTUAL_SCRIPT_VERIFY_FLAGS;\n         if (!Params().RequireStandard()) {\n             scriptVerifyFlags = GetArg(\"-promiscuousmempoolflags\", scriptVerifyFlags);\n         }\n@@ -1389,15 +1389,15 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n                     if (check.GetScriptError() == SCRIPT_ERR_NOT_FINAL) {\n                         return state.DoS(0, false, REJECT_NONSTANDARD, \"non-final\");\n                     }\n-                    if (flags & STANDARD_NOT_MANDATORY_VERIFY_FLAGS) {\n+                    if (flags & STANDARD_CONTEXTUAL_NOT_MANDATORY_VERIFY_FLAGS) {\n                         // Check whether the failure was caused by a\n                         // non-mandatory script verification check, such as\n                         // non-standard DER encodings or non-null dummy\n                         // arguments; if so, don't trigger DoS protection to\n                         // avoid splitting the network between upgraded and\n                         // non-upgraded nodes.\n                         CScriptCheck check2(*coins, tx, i,\n-                                flags & ~STANDARD_NOT_MANDATORY_VERIFY_FLAGS, cacheStore, &txdata);\n+                                flags & ~STANDARD_CONTEXTUAL_NOT_MANDATORY_VERIFY_FLAGS, cacheStore, &txdata);\n                         if (check2())\n                             return state.Invalid(false, REJECT_NONSTANDARD, strprintf(\"non-mandatory-script-verify-flag (%s)\", ScriptErrorString(check.GetScriptError())));\n                     }"
      }
    ]
  },
  {
    "sha": "04b0a00c72ceff7c0437d2f3d636df4697be6004",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNGIwYTAwYzcyY2VmZjdjMDQzN2QyZjNkNjM2ZGY0Njk3YmU2MDA0",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-05-12T03:14:36Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-05-12T03:14:36Z"
      },
      "message": "Pass CChain through to signature checker in contextual verifications",
      "tree": {
        "sha": "771d862fc3a9076490c343852a536ac7cd9046da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/771d862fc3a9076490c343852a536ac7cd9046da"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/04b0a00c72ceff7c0437d2f3d636df4697be6004",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04b0a00c72ceff7c0437d2f3d636df4697be6004",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/04b0a00c72ceff7c0437d2f3d636df4697be6004",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04b0a00c72ceff7c0437d2f3d636df4697be6004/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7aabfd8111ae5a26f6c19c7323b66e3141a36883",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7aabfd8111ae5a26f6c19c7323b66e3141a36883",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7aabfd8111ae5a26f6c19c7323b66e3141a36883"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 36,
      "deletions": 31
    },
    "files": [
      {
        "sha": "299185c658a2ca9ecc812d150fe5d5ed069c3995",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04b0a00c72ceff7c0437d2f3d636df4697be6004/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04b0a00c72ceff7c0437d2f3d636df4697be6004/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=04b0a00c72ceff7c0437d2f3d636df4697be6004",
        "patch": "@@ -777,14 +777,14 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n         // ... and merge in other signatures:\n         BOOST_FOREACH(const CMutableTransaction& txv, txVariants) {\n             if (txv.vin.size() > i) {\n-                sigdata = CombineSignatures(prevPubKey, TransactionSignatureChecker(&txConst, i, amount), sigdata, DataFromTransaction(txv, i));\n+                sigdata = CombineSignatures(prevPubKey, TransactionSignatureChecker(&txConst, i, amount, nullptr), sigdata, DataFromTransaction(txv, i));\n             }\n         }\n \n         UpdateTransaction(mergedTx, i, sigdata);\n \n         ScriptError serror = SCRIPT_ERR_OK;\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, &txin.scriptWitness, STANDARD_NONCONTEXTUAL_SCRIPT_VERIFY_FLAGS, TransactionSignatureChecker(&txConst, i, amount), &serror)) {\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, &txin.scriptWitness, STANDARD_NONCONTEXTUAL_SCRIPT_VERIFY_FLAGS, TransactionSignatureChecker(&txConst, i, amount, nullptr), &serror)) {\n             TxInErrorToJSON(txin, vErrors, ScriptErrorString(serror));\n         }\n     }"
      },
      {
        "sha": "a0bba9612bc1a195028110721174e2a3c9d1b44f",
        "filename": "src/script/bitcoinconsensus.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04b0a00c72ceff7c0437d2f3d636df4697be6004/src/script/bitcoinconsensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04b0a00c72ceff7c0437d2f3d636df4697be6004/src/script/bitcoinconsensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.cpp?ref=04b0a00c72ceff7c0437d2f3d636df4697be6004",
        "patch": "@@ -95,7 +95,7 @@ static int verify_script(const unsigned char *scriptPubKey, unsigned int scriptP\n         set_error(err, bitcoinconsensus_ERR_OK);\n \n         PrecomputedTransactionData txdata(tx);\n-        return VerifyScript(tx.vin[nIn].scriptSig, CScript(scriptPubKey, scriptPubKey + scriptPubKeyLen), &tx.vin[nIn].scriptWitness, flags, TransactionSignatureChecker(&tx, nIn, amount, txdata), NULL);\n+        return VerifyScript(tx.vin[nIn].scriptSig, CScript(scriptPubKey, scriptPubKey + scriptPubKeyLen), &tx.vin[nIn].scriptWitness, flags, TransactionSignatureChecker(&tx, nIn, amount, nullptr, txdata), NULL);\n     } catch (const std::exception&) {\n         return set_error(err, bitcoinconsensus_ERR_TX_DESERIALIZE); // Error deserializing\n     }"
      },
      {
        "sha": "6ec509fdedfd95b331d74c76657a4c6611a91827",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04b0a00c72ceff7c0437d2f3d636df4697be6004/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04b0a00c72ceff7c0437d2f3d636df4697be6004/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=04b0a00c72ceff7c0437d2f3d636df4697be6004",
        "patch": "@@ -13,6 +13,7 @@\n #include <stdint.h>\n #include <string>\n \n+class CChain;\n class CPubKey;\n class CScript;\n class CTransaction;\n@@ -154,14 +155,15 @@ class TransactionSignatureChecker : public BaseSignatureChecker\n     const CTransaction* txTo;\n     unsigned int nIn;\n     const CAmount amount;\n+    const CChain* chain;\n     const PrecomputedTransactionData* txdata;\n \n protected:\n     virtual bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const;\n \n public:\n-    TransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn) : txTo(txToIn), nIn(nInIn), amount(amountIn), txdata(NULL) {}\n-    TransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, const PrecomputedTransactionData& txdataIn) : txTo(txToIn), nIn(nInIn), amount(amountIn), txdata(&txdataIn) {}\n+    TransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, const CChain* chainIn) : txTo(txToIn), nIn(nInIn), amount(amountIn), chain(chainIn), txdata(NULL) {}\n+    TransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, const CChain* chainIn, const PrecomputedTransactionData& txdataIn) : txTo(txToIn), nIn(nInIn), amount(amountIn), chain(chainIn), txdata(&txdataIn) {}\n     bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const;\n     bool CheckLockTime(const CScriptNum& nLockTime) const;\n     bool CheckSequence(const CScriptNum& nSequence) const;\n@@ -173,7 +175,7 @@ class MutableTransactionSignatureChecker : public TransactionSignatureChecker\n     const CTransaction txTo;\n \n public:\n-    MutableTransactionSignatureChecker(const CMutableTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn) : TransactionSignatureChecker(&txTo, nInIn, amountIn), txTo(*txToIn) {}\n+    MutableTransactionSignatureChecker(const CMutableTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn) : TransactionSignatureChecker(&txTo, nInIn, amountIn, nullptr), txTo(*txToIn) {}\n };\n \n bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptError* error = NULL);"
      },
      {
        "sha": "3a7eccc0882d2bed837cf6c57bedc99fc4ae422a",
        "filename": "src/script/sigcache.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04b0a00c72ceff7c0437d2f3d636df4697be6004/src/script/sigcache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04b0a00c72ceff7c0437d2f3d636df4697be6004/src/script/sigcache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.h?ref=04b0a00c72ceff7c0437d2f3d636df4697be6004",
        "patch": "@@ -46,7 +46,7 @@ class CachingTransactionSignatureChecker : public TransactionSignatureChecker\n     bool store;\n \n public:\n-    CachingTransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, bool storeIn, PrecomputedTransactionData& txdataIn) : TransactionSignatureChecker(txToIn, nInIn, amountIn, txdataIn), store(storeIn) {}\n+    CachingTransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, const CChain* chainIn, bool storeIn, PrecomputedTransactionData& txdataIn) : TransactionSignatureChecker(txToIn, nInIn, amountIn, chainIn, txdataIn), store(storeIn) {}\n \n     bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const;\n };"
      },
      {
        "sha": "e60c0b24dcf5eed3777f6c2d08e4a8ca133d7caa",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04b0a00c72ceff7c0437d2f3d636df4697be6004/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04b0a00c72ceff7c0437d2f3d636df4697be6004/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=04b0a00c72ceff7c0437d2f3d636df4697be6004",
        "patch": "@@ -16,7 +16,7 @@\n \n typedef std::vector<unsigned char> valtype;\n \n-TransactionSignatureCreator::TransactionSignatureCreator(const CKeyStore* keystoreIn, const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn) : BaseSignatureCreator(keystoreIn), txTo(txToIn), nIn(nInIn), nHashType(nHashTypeIn), amount(amountIn), checker(txTo, nIn, amountIn) {}\n+TransactionSignatureCreator::TransactionSignatureCreator(const CKeyStore* keystoreIn, const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn) : BaseSignatureCreator(keystoreIn), txTo(txToIn), nIn(nInIn), nHashType(nHashTypeIn), amount(amountIn), checker(txTo, nIn, amountIn, nullptr) {}\n \n bool TransactionSignatureCreator::CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& address, const CScript& scriptCode, SigVersion sigversion) const\n {"
      },
      {
        "sha": "c8ef6249b638305c07fc008634342785d2326da0",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04b0a00c72ceff7c0437d2f3d636df4697be6004/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04b0a00c72ceff7c0437d2f3d636df4697be6004/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=04b0a00c72ceff7c0437d2f3d636df4697be6004",
        "patch": "@@ -111,7 +111,7 @@ BOOST_AUTO_TEST_CASE(sign)\n         {\n             CScript sigSave = txTo[i].vin[0].scriptSig;\n             txTo[i].vin[0].scriptSig = txTo[j].vin[0].scriptSig;\n-            bool sigOK = CScriptCheck(CCoins(txFrom, 0), txTo[i], 0, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC, false, &txdata)();\n+            bool sigOK = CScriptCheck(CCoins(txFrom, 0), txTo[i], 0, nullptr, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC, false, &txdata)();\n             if (i == j)\n                 BOOST_CHECK_MESSAGE(sigOK, strprintf(\"VerifySignature %d %d\", i, j));\n             else"
      },
      {
        "sha": "108c01b5ec9d52729cb45b846c3fe35eba9f0155",
        "filename": "src/test/sigopcount_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04b0a00c72ceff7c0437d2f3d636df4697be6004/src/test/sigopcount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04b0a00c72ceff7c0437d2f3d636df4697be6004/src/test/sigopcount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sigopcount_tests.cpp?ref=04b0a00c72ceff7c0437d2f3d636df4697be6004",
        "patch": "@@ -71,7 +71,7 @@ ScriptError VerifyWithFlag(const CTransaction& output, const CMutableTransaction\n {\n     ScriptError error;\n     CTransaction inputi(input);\n-    bool ret = VerifyScript(inputi.vin[0].scriptSig, output.vout[0].scriptPubKey, &inputi.vin[0].scriptWitness, flags, TransactionSignatureChecker(&inputi, 0, output.vout[0].nValue), &error);\n+    bool ret = VerifyScript(inputi.vin[0].scriptSig, output.vout[0].scriptPubKey, &inputi.vin[0].scriptWitness, flags, TransactionSignatureChecker(&inputi, 0, output.vout[0].nValue, nullptr), &error);\n     BOOST_CHECK((ret == true) == (error == SCRIPT_ERR_OK));\n \n     return error;"
      },
      {
        "sha": "e172efeca393c52f4186e205bdd7c2df3d32f29b",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04b0a00c72ceff7c0437d2f3d636df4697be6004/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04b0a00c72ceff7c0437d2f3d636df4697be6004/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=04b0a00c72ceff7c0437d2f3d636df4697be6004",
        "patch": "@@ -170,7 +170,7 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n                 unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n                 const CScriptWitness *witness = &tx.vin[i].scriptWitness;\n                 BOOST_CHECK_MESSAGE(VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                                 witness, verify_flags, TransactionSignatureChecker(&tx, i, amount, txdata), &err),\n+                                                 witness, verify_flags, TransactionSignatureChecker(&tx, i, amount, nullptr, txdata), &err),\n                                     strTest);\n                 BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n             }\n@@ -256,7 +256,7 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n                 }\n                 const CScriptWitness *witness = &tx.vin[i].scriptWitness;\n                 fValid = VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                      witness, verify_flags, TransactionSignatureChecker(&tx, i, amount, txdata), &err);\n+                                      witness, verify_flags, TransactionSignatureChecker(&tx, i, amount, nullptr, txdata), &err);\n             }\n             BOOST_CHECK_MESSAGE(!fValid, strTest);\n             BOOST_CHECK_MESSAGE(err != SCRIPT_ERR_OK, ScriptErrorString(err));\n@@ -386,7 +386,7 @@ void CheckWithFlag(const CTransactionRef& output, const CMutableTransaction& inp\n {\n     ScriptError error;\n     CTransaction inputi(input);\n-    bool ret = VerifyScript(inputi.vin[0].scriptSig, output->vout[0].scriptPubKey, &inputi.vin[0].scriptWitness, flags, TransactionSignatureChecker(&inputi, 0, output->vout[0].nValue), &error);\n+    bool ret = VerifyScript(inputi.vin[0].scriptSig, output->vout[0].scriptPubKey, &inputi.vin[0].scriptWitness, flags, TransactionSignatureChecker(&inputi, 0, output->vout[0].nValue, nullptr), &error);\n     assert(ret == success);\n }\n \n@@ -481,7 +481,7 @@ BOOST_AUTO_TEST_CASE(test_big_witness_transaction) {\n \n     for(uint32_t i = 0; i < mtx.vin.size(); i++) {\n         std::vector<CScriptCheck> vChecks;\n-        CScriptCheck check(coins, tx, i, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, false, &txdata);\n+        CScriptCheck check(coins, tx, i, nullptr, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, false, &txdata);\n         vChecks.push_back(CScriptCheck());\n         check.swap(vChecks.back());\n         control.Add(vChecks);"
      },
      {
        "sha": "c606e82e2831bfa4e0ae3d2538d0d9a89e7fa005",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 13,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04b0a00c72ceff7c0437d2f3d636df4697be6004/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04b0a00c72ceff7c0437d2f3d636df4697be6004/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=04b0a00c72ceff7c0437d2f3d636df4697be6004",
        "patch": "@@ -893,13 +893,13 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         // Check against previous transactions\n         // This is done last to help prevent CPU exhaustion denial-of-service attacks.\n         PrecomputedTransactionData txdata(tx);\n-        if (!CheckInputs(tx, state, view, true, scriptVerifyFlags, true, txdata)) {\n+        if (!CheckInputs(tx, state, view, true, chainActive, scriptVerifyFlags, true, txdata)) {\n             // SCRIPT_VERIFY_CLEANSTACK requires SCRIPT_VERIFY_WITNESS, so we\n             // need to turn both off, and compare against just turning off CLEANSTACK\n             // to see if the failure is specifically due to witness validation.\n             CValidationState stateDummy; // Want reported failures to be from first CheckInputs\n-            if (!tx.HasWitness() && CheckInputs(tx, stateDummy, view, true, scriptVerifyFlags & ~(SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_CLEANSTACK), true, txdata) &&\n-                !CheckInputs(tx, stateDummy, view, true, scriptVerifyFlags & ~SCRIPT_VERIFY_CLEANSTACK, true, txdata)) {\n+            if (!tx.HasWitness() && CheckInputs(tx, stateDummy, view, true, chainActive, scriptVerifyFlags & ~(SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_CLEANSTACK), true, txdata) &&\n+                !CheckInputs(tx, stateDummy, view, true, chainActive, scriptVerifyFlags & ~SCRIPT_VERIFY_CLEANSTACK, true, txdata)) {\n                 // Only the witness is missing, so the transaction itself may be fine.\n                 state.SetCorruptionPossible();\n             }\n@@ -915,7 +915,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         // There is a similar check in CreateNewBlock() to prevent creating\n         // invalid blocks, however allowing such transactions into the mempool\n         // can be exploited as a DoS attack.\n-        if (!CheckInputs(tx, state, view, true, MANDATORY_SCRIPT_VERIFY_FLAGS, true, txdata))\n+        if (!CheckInputs(tx, state, view, true, chainActive, MANDATORY_SCRIPT_VERIFY_FLAGS, true, txdata))\n         {\n             return error(\"%s: BUG! PLEASE REPORT THIS! ConnectInputs failed against MANDATORY but not STANDARD flags %s, %s\",\n                 __func__, hash.ToString(), FormatStateMessage(state));\n@@ -1299,7 +1299,7 @@ void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, int nHeight)\n bool CScriptCheck::operator()() {\n     const CScript &scriptSig = ptxTo->vin[nIn].scriptSig;\n     const CScriptWitness *witness = &ptxTo->vin[nIn].scriptWitness;\n-    return VerifyScript(scriptSig, scriptPubKey, witness, nFlags, CachingTransactionSignatureChecker(ptxTo, nIn, amount, cacheStore, *txdata), &error);\n+    return VerifyScript(scriptSig, scriptPubKey, witness, nFlags, CachingTransactionSignatureChecker(ptxTo, nIn, amount, chain, cacheStore, *txdata), &error);\n }\n \n int GetSpendHeight(const CCoinsViewCache& inputs)\n@@ -1355,7 +1355,7 @@ bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoins\n }\n }// namespace Consensus\n \n-bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheStore, PrecomputedTransactionData& txdata, std::vector<CScriptCheck> *pvChecks)\n+bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, const CChain& chain, unsigned int flags, bool cacheStore, PrecomputedTransactionData& txdata, std::vector<CScriptCheck> *pvChecks)\n {\n     if (!tx.IsCoinBase())\n     {\n@@ -1381,7 +1381,7 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n                 assert(coins);\n \n                 // Verify signature\n-                CScriptCheck check(*coins, tx, i, flags, cacheStore, &txdata);\n+                CScriptCheck check(*coins, tx, i, &chain, flags, cacheStore, &txdata);\n                 if (pvChecks) {\n                     pvChecks->push_back(CScriptCheck());\n                     check.swap(pvChecks->back());\n@@ -1396,7 +1396,7 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n                         // arguments; if so, don't trigger DoS protection to\n                         // avoid splitting the network between upgraded and\n                         // non-upgraded nodes.\n-                        CScriptCheck check2(*coins, tx, i,\n+                        CScriptCheck check2(*coins, tx, i, &chain,\n                                 flags & ~STANDARD_CONTEXTUAL_NOT_MANDATORY_VERIFY_FLAGS, cacheStore, &txdata);\n                         if (check2())\n                             return state.Invalid(false, REJECT_NONSTANDARD, strprintf(\"non-mandatory-script-verify-flag (%s)\", ScriptErrorString(check.GetScriptError())));\n@@ -1692,7 +1692,7 @@ static int64_t nTimeTotal = 0;\n  *  Validity checks that depend on the UTXO set are also done; ConnectBlock()\n  *  can fail if those validity checks fail (among other reasons). */\n static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex,\n-                  CCoinsViewCache& view, const CChainParams& chainparams, bool fJustCheck = false)\n+                  CCoinsViewCache& view, const CChain& chain, const CChainParams& chainparams, bool fJustCheck = false)\n {\n     AssertLockHeld(cs_main);\n     assert(pindex);\n@@ -1869,7 +1869,7 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n \n             std::vector<CScriptCheck> vChecks;\n             bool fCacheResults = fJustCheck; /* Don't cache results if we're actually connecting blocks (still consult the cache, though) */\n-            if (!CheckInputs(tx, state, view, fScriptChecks, flags, fCacheResults, txdata[i], nScriptCheckThreads ? &vChecks : NULL))\n+            if (!CheckInputs(tx, state, view, fScriptChecks, chain, flags, fCacheResults, txdata[i], nScriptCheckThreads ? &vChecks : NULL))\n                 return error(\"ConnectBlock(): CheckInputs on %s failed with %s\",\n                     tx.GetHash().ToString(), FormatStateMessage(state));\n             control.Add(vChecks);\n@@ -2273,7 +2273,7 @@ bool static ConnectTip(CValidationState& state, const CChainParams& chainparams,\n     LogPrint(BCLog::BENCH, \"  - Load block from disk: %.2fms [%.2fs]\\n\", (nTime2 - nTime1) * 0.001, nTimeReadFromDisk * 0.000001);\n     {\n         CCoinsViewCache view(pcoinsTip);\n-        bool rv = ConnectBlock(blockConnecting, state, pindexNew, view, chainparams);\n+        bool rv = ConnectBlock(blockConnecting, state, pindexNew, view, chainActive, chainparams);\n         GetMainSignals().BlockChecked(blockConnecting, state);\n         if (!rv) {\n             if (state.IsInvalid())\n@@ -3280,7 +3280,7 @@ bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams,\n         return error(\"%s: Consensus::CheckBlock: %s\", __func__, FormatStateMessage(state));\n     if (!ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindexPrev))\n         return error(\"%s: Consensus::ContextualCheckBlock: %s\", __func__, FormatStateMessage(state));\n-    if (!ConnectBlock(block, state, &indexDummy, viewNew, chainparams, true))\n+    if (!ConnectBlock(block, state, &indexDummy, viewNew, chainActive, chainparams, true))\n         return false;\n     assert(state.IsValid());\n \n@@ -3692,7 +3692,8 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n             CBlock block;\n             if (!ReadBlockFromDisk(block, pindex, chainparams.GetConsensus()))\n                 return error(\"VerifyDB(): *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n-            if (!ConnectBlock(block, state, pindex, coins, chainparams))\n+            // FIXME: Need to shadow chainActive with the older height!\n+            if (!ConnectBlock(block, state, pindex, coins, chainActive, chainparams))\n                 return error(\"VerifyDB(): *** found unconnectable block at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n         }\n     }"
      },
      {
        "sha": "c9a194c47975e019c8774303f264ebde6474a7b8",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04b0a00c72ceff7c0437d2f3d636df4697be6004/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04b0a00c72ceff7c0437d2f3d636df4697be6004/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=04b0a00c72ceff7c0437d2f3d636df4697be6004",
        "patch": "@@ -373,7 +373,7 @@ int64_t GetTransactionSigOpCost(const CTransaction& tx, const CCoinsViewCache& i\n  * instead of being performed inline.\n  */\n bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &view, bool fScriptChecks,\n-                 unsigned int flags, bool cacheStore, PrecomputedTransactionData& txdata, std::vector<CScriptCheck> *pvChecks = NULL);\n+                 const CChain& chain, unsigned int flags, bool cacheStore, PrecomputedTransactionData& txdata, std::vector<CScriptCheck> *pvChecks = NULL);\n \n /** Apply the effects of this transaction on the UTXO set represented by view */\n void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, int nHeight);\n@@ -444,16 +444,17 @@ class CScriptCheck\n     CAmount amount;\n     const CTransaction *ptxTo;\n     unsigned int nIn;\n+    const CChain *chain;\n     unsigned int nFlags;\n     bool cacheStore;\n     ScriptError error;\n     PrecomputedTransactionData *txdata;\n \n public:\n-    CScriptCheck(): amount(0), ptxTo(0), nIn(0), nFlags(0), cacheStore(false), error(SCRIPT_ERR_UNKNOWN_ERROR) {}\n-    CScriptCheck(const CCoins& txFromIn, const CTransaction& txToIn, unsigned int nInIn, unsigned int nFlagsIn, bool cacheIn, PrecomputedTransactionData* txdataIn) :\n+    CScriptCheck(): amount(0), ptxTo(0), nIn(0), chain(nullptr), nFlags(0), cacheStore(false), error(SCRIPT_ERR_UNKNOWN_ERROR) {}\n+    CScriptCheck(const CCoins& txFromIn, const CTransaction& txToIn, unsigned int nInIn, const CChain* chainIn, unsigned int nFlagsIn, bool cacheIn, PrecomputedTransactionData* txdataIn) :\n         scriptPubKey(txFromIn.vout[txToIn.vin[nInIn].prevout.n].scriptPubKey), amount(txFromIn.vout[txToIn.vin[nInIn].prevout.n].nValue),\n-        ptxTo(&txToIn), nIn(nInIn), nFlags(nFlagsIn), cacheStore(cacheIn), error(SCRIPT_ERR_UNKNOWN_ERROR), txdata(txdataIn) { }\n+        ptxTo(&txToIn), nIn(nInIn), chain(chainIn), nFlags(nFlagsIn), cacheStore(cacheIn), error(SCRIPT_ERR_UNKNOWN_ERROR), txdata(txdataIn) { }\n \n     bool operator()();\n \n@@ -462,6 +463,7 @@ class CScriptCheck\n         std::swap(ptxTo, check.ptxTo);\n         std::swap(amount, check.amount);\n         std::swap(nIn, check.nIn);\n+        std::swap(chain, check.chain);\n         std::swap(nFlags, check.nFlags);\n         std::swap(cacheStore, check.cacheStore);\n         std::swap(error, check.error);"
      }
    ]
  },
  {
    "sha": "c1bf3d75ede6d98678301f90534a889fd03228a6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMWJmM2Q3NWVkZTZkOTg2NzgzMDFmOTA1MzRhODg5ZmQwMzIyOGE2",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-05-12T03:30:35Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-05-12T03:30:35Z"
      },
      "message": "script: Implement OP_CHECKBLOCKATHEIGHT",
      "tree": {
        "sha": "4299be0ff0c7a616804a3510c9a4e19c5abdd0cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4299be0ff0c7a616804a3510c9a4e19c5abdd0cf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c1bf3d75ede6d98678301f90534a889fd03228a6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1bf3d75ede6d98678301f90534a889fd03228a6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c1bf3d75ede6d98678301f90534a889fd03228a6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1bf3d75ede6d98678301f90534a889fd03228a6/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "04b0a00c72ceff7c0437d2f3d636df4697be6004",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04b0a00c72ceff7c0437d2f3d636df4697be6004",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/04b0a00c72ceff7c0437d2f3d636df4697be6004"
      }
    ],
    "stats": {
      "total": 94,
      "additions": 79,
      "deletions": 15
    },
    "files": [
      {
        "sha": "6d52f875d49f43a3bc77406a7cbb7e02ef6f7c97",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1bf3d75ede6d98678301f90534a889fd03228a6/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1bf3d75ede6d98678301f90534a889fd03228a6/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=c1bf3d75ede6d98678301f90534a889fd03228a6",
        "patch": "@@ -65,7 +65,8 @@ static const unsigned int STANDARD_CONTEXTUAL_SCRIPT_VERIFY_FLAGS = MANDATORY_SC\n                                                          SCRIPT_VERIFY_LOW_S |\n                                                          SCRIPT_VERIFY_WITNESS |\n                                                          SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM |\n-                                                         SCRIPT_VERIFY_WITNESS_PUBKEYTYPE;\n+                                                         SCRIPT_VERIFY_WITNESS_PUBKEYTYPE |\n+                                                         SCRIPT_VERIFY_CHECKBLOCKATHEIGHT;\n \n /** For convenience, standard but not contextual verify flags. */\n static const unsigned int STANDARD_NONCONTEXTUAL_SCRIPT_VERIFY_FLAGS = STANDARD_CONTEXTUAL_SCRIPT_VERIFY_FLAGS & ~CONTEXTUAL_SCRIPT_VERIFY_FLAGS;"
      },
      {
        "sha": "f37ca8965a414e9922d95bab74949ed3b406749a",
        "filename": "src/script/bitcoinconsensus.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1bf3d75ede6d98678301f90534a889fd03228a6/src/script/bitcoinconsensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1bf3d75ede6d98678301f90534a889fd03228a6/src/script/bitcoinconsensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.h?ref=c1bf3d75ede6d98678301f90534a889fd03228a6",
        "patch": "@@ -55,6 +55,7 @@ enum\n     bitcoinconsensus_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9), // enable CHECKLOCKTIMEVERIFY (BIP65)\n     bitcoinconsensus_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10), // enable CHECKSEQUENCEVERIFY (BIP112)\n     bitcoinconsensus_SCRIPT_FLAGS_VERIFY_WITNESS             = (1U << 11), // enable WITNESS (BIP141)\n+    // NOTE: Do NOT add CHECKBLOCKATHEIGHT here without updating verify_script to pass context!\n     bitcoinconsensus_SCRIPT_FLAGS_VERIFY_ALL                 = bitcoinconsensus_SCRIPT_FLAGS_VERIFY_P2SH | bitcoinconsensus_SCRIPT_FLAGS_VERIFY_DERSIG |\n                                                                bitcoinconsensus_SCRIPT_FLAGS_VERIFY_NULLDUMMY | bitcoinconsensus_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY |\n                                                                bitcoinconsensus_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY | bitcoinconsensus_SCRIPT_FLAGS_VERIFY_WITNESS"
      },
      {
        "sha": "c29508296d3d6eaa826b837ad0d2e2581b032ca3",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 53,
        "deletions": 1,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1bf3d75ede6d98678301f90534a889fd03228a6/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1bf3d75ede6d98678301f90534a889fd03228a6/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=c1bf3d75ede6d98678301f90534a889fd03228a6",
        "patch": "@@ -5,6 +5,7 @@\n \n #include \"interpreter.h\"\n \n+#include \"chain.h\"\n #include \"primitives/transaction.h\"\n #include \"crypto/ripemd160.h\"\n #include \"crypto/sha1.h\"\n@@ -424,7 +425,36 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                     break;\n                 }\n \n-                case OP_NOP1: case OP_NOP4: case OP_NOP5:\n+                case OP_CHECKBLOCKATHEIGHT:\n+                {\n+                    if (!(flags & SCRIPT_VERIFY_CHECKBLOCKATHEIGHT)) {\n+                        // not enabled; treat as a NOP5\n+                        if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) {\n+                            return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS);\n+                        }\n+                        break;\n+                    }\n+\n+                    if (stack.size() < 2) {\n+                        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+                    }\n+\n+                    // nHeight is a 32-bit signed integer field.\n+                    const int32_t nHeight = CScriptNum(stacktop(-1), true, 4).getint();\n+\n+                    valtype vchHashCheck = stacktop(-2);\n+\n+                    // Compare the specified block hash with the input.\n+                    if (!checker.CheckBlockHash(nHeight, vchHashCheck)) {\n+                        // Not final rather than a hard reject to avoid caching across different blockchains\n+                        // Also because it will *eventually* become final when the height gets old enough\n+                        return set_error(serror, SCRIPT_ERR_NOT_FINAL);\n+                    }\n+\n+                    break;\n+                }\n+\n+                case OP_NOP1: case OP_NOP4:\n                 case OP_NOP6: case OP_NOP7: case OP_NOP8: case OP_NOP9: case OP_NOP10:\n                 {\n                     if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS)\n@@ -1351,6 +1381,28 @@ bool TransactionSignatureChecker::CheckSequence(const CScriptNum& nSequence) con\n     return true;\n }\n \n+bool TransactionSignatureChecker::CheckBlockHash(const int32_t nHeight, const std::vector<unsigned char>& vchCompareTo) const\n+{\n+    if (!chain) {\n+        return false;\n+    }\n+\n+    // If the chain doesn't reach the desired height yet, the transaction is non-final\n+    if (nHeight > chain->Height()) {\n+        return false;\n+    }\n+\n+    // Sufficiently old blocks are always valid\n+    if (nHeight <= chain->Height() - 52596) {\n+        return true;\n+    }\n+\n+    CBlockIndex* pblockindex = (*chain)[nHeight];\n+    std::vector<unsigned char> vchBlockHash(pblockindex->GetBlockHash().begin(), pblockindex->GetBlockHash().end());\n+    vchBlockHash.erase(vchBlockHash.begin(), vchBlockHash.end() - vchCompareTo.size());\n+    return (vchCompareTo == vchBlockHash);\n+}\n+\n static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion, const std::vector<unsigned char>& program, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)\n {\n     std::vector<std::vector<unsigned char> > stack;"
      },
      {
        "sha": "95b473947ded8bedc4b1170057a9dfa9afa65fd9",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1bf3d75ede6d98678301f90534a889fd03228a6/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1bf3d75ede6d98678301f90534a889fd03228a6/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=c1bf3d75ede6d98678301f90534a889fd03228a6",
        "patch": "@@ -107,9 +107,12 @@ enum\n     // Public keys in segregated witness scripts must be compressed\n     //\n     SCRIPT_VERIFY_WITNESS_PUBKEYTYPE = (1U << 15),\n+\n+    // Enforce CHECKBLOCKATHEIGHT opcode\n+    SCRIPT_VERIFY_CHECKBLOCKATHEIGHT = (1U << 16),\n };\n \n-static const unsigned int CONTEXTUAL_SCRIPT_VERIFY_FLAGS = 0;\n+static const unsigned int CONTEXTUAL_SCRIPT_VERIFY_FLAGS = SCRIPT_VERIFY_CHECKBLOCKATHEIGHT;\n \n bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror);\n \n@@ -146,6 +149,11 @@ class BaseSignatureChecker\n          return false;\n     }\n \n+    virtual bool CheckBlockHash(const int32_t nHeight, const std::vector<unsigned char>& nBlockHash) const\n+    {\n+         return false;\n+    }\n+\n     virtual ~BaseSignatureChecker() {}\n };\n \n@@ -167,6 +175,7 @@ class TransactionSignatureChecker : public BaseSignatureChecker\n     bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const;\n     bool CheckLockTime(const CScriptNum& nLockTime) const;\n     bool CheckSequence(const CScriptNum& nSequence) const;\n+    bool CheckBlockHash(const int32_t nHeight, const std::vector<unsigned char>& nBlockHash) const;\n };\n \n class MutableTransactionSignatureChecker : public TransactionSignatureChecker"
      },
      {
        "sha": "43db5f7d2205948b03a1c5a71acb4ad41033a474",
        "filename": "src/script/script.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1bf3d75ede6d98678301f90534a889fd03228a6/src/script/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1bf3d75ede6d98678301f90534a889fd03228a6/src/script/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.cpp?ref=c1bf3d75ede6d98678301f90534a889fd03228a6",
        "patch": "@@ -132,7 +132,7 @@ const char* GetOpName(opcodetype opcode)\n     case OP_CHECKLOCKTIMEVERIFY    : return \"OP_CHECKLOCKTIMEVERIFY\";\n     case OP_CHECKSEQUENCEVERIFY    : return \"OP_CHECKSEQUENCEVERIFY\";\n     case OP_NOP4                   : return \"OP_NOP4\";\n-    case OP_NOP5                   : return \"OP_NOP5\";\n+    case OP_CHECKBLOCKATHEIGHT     : return \"OP_CHECKBLOCKATHEIGHT\";\n     case OP_NOP6                   : return \"OP_NOP6\";\n     case OP_NOP7                   : return \"OP_NOP7\";\n     case OP_NOP8                   : return \"OP_NOP8\";"
      },
      {
        "sha": "7f81a5d51f9f484001338cb0519a713f995ffd5d",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1bf3d75ede6d98678301f90534a889fd03228a6/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1bf3d75ede6d98678301f90534a889fd03228a6/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=c1bf3d75ede6d98678301f90534a889fd03228a6",
        "patch": "@@ -170,7 +170,8 @@ enum opcodetype\n     OP_CHECKSEQUENCEVERIFY = 0xb2,\n     OP_NOP3 = OP_CHECKSEQUENCEVERIFY,\n     OP_NOP4 = 0xb3,\n-    OP_NOP5 = 0xb4,\n+    OP_CHECKBLOCKATHEIGHT = 0xb4,\n+    OP_NOP5 = OP_CHECKBLOCKATHEIGHT,\n     OP_NOP6 = 0xb5,\n     OP_NOP7 = 0xb6,\n     OP_NOP8 = 0xb7,"
      },
      {
        "sha": "f0b0f6a77e2a2085e2edf65b9ae3bcc1e9082fc8",
        "filename": "src/test/data/script_tests.json",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1bf3d75ede6d98678301f90534a889fd03228a6/src/test/data/script_tests.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1bf3d75ede6d98678301f90534a889fd03228a6/src/test/data/script_tests.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_tests.json?ref=c1bf3d75ede6d98678301f90534a889fd03228a6",
        "patch": "@@ -232,8 +232,8 @@\n [\"'abcdefghijklmnopqrstuvwxyz'\", \"HASH256 0x4c 0x20 0xca139bc10c2f660da42666f72e89a225936fc60f193c161124a672050c434671 EQUAL\", \"P2SH,STRICTENC\", \"OK\"],\n \n \n-[\"1\",\"NOP1 CHECKLOCKTIMEVERIFY CHECKSEQUENCEVERIFY NOP4 NOP5 NOP6 NOP7 NOP8 NOP9 NOP10 1 EQUAL\", \"P2SH,STRICTENC\", \"OK\"],\n-[\"'NOP_1_to_10' NOP1 CHECKLOCKTIMEVERIFY CHECKSEQUENCEVERIFY NOP4 NOP5 NOP6 NOP7 NOP8 NOP9 NOP10\",\"'NOP_1_to_10' EQUAL\", \"P2SH,STRICTENC\", \"OK\"],\n+[\"1\",\"NOP1 CHECKLOCKTIMEVERIFY CHECKSEQUENCEVERIFY NOP4 CHECKBLOCKATHEIGHT NOP6 NOP7 NOP8 NOP9 NOP10 1 EQUAL\", \"P2SH,STRICTENC\", \"OK\"],\n+[\"'NOP_1_to_10' NOP1 CHECKLOCKTIMEVERIFY CHECKSEQUENCEVERIFY NOP4 CHECKBLOCKATHEIGHT NOP6 NOP7 NOP8 NOP9 NOP10\",\"'NOP_1_to_10' EQUAL\", \"P2SH,STRICTENC\", \"OK\"],\n \n [\"1\", \"NOP\", \"P2SH,STRICTENC,DISCOURAGE_UPGRADABLE_NOPS\", \"OK\", \"Discourage NOPx flag allows OP_NOP\"],\n \n@@ -445,7 +445,7 @@\n [\"NOP\", \"CHECKLOCKTIMEVERIFY 1\", \"P2SH,STRICTENC\", \"OK\"],\n [\"NOP\", \"CHECKSEQUENCEVERIFY 1\", \"P2SH,STRICTENC\", \"OK\"],\n [\"NOP\", \"NOP4 1\", \"P2SH,STRICTENC\", \"OK\"],\n-[\"NOP\", \"NOP5 1\", \"P2SH,STRICTENC\", \"OK\"],\n+[\"NOP\", \"CHECKBLOCKATHEIGHT 1\", \"P2SH,STRICTENC\", \"OK\"],\n [\"NOP\", \"NOP6 1\", \"P2SH,STRICTENC\", \"OK\"],\n [\"NOP\", \"NOP7 1\", \"P2SH,STRICTENC\", \"OK\"],\n [\"NOP\", \"NOP8 1\", \"P2SH,STRICTENC\", \"OK\"],\n@@ -857,15 +857,15 @@\n [\"2 2 LSHIFT\", \"8 EQUAL\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"disabled\"],\n [\"2 1 RSHIFT\", \"1 EQUAL\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"disabled\"],\n \n-[\"1\", \"NOP1 CHECKLOCKTIMEVERIFY CHECKSEQUENCEVERIFY NOP4 NOP5 NOP6 NOP7 NOP8 NOP9 NOP10 2 EQUAL\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-[\"'NOP_1_to_10' NOP1 CHECKLOCKTIMEVERIFY CHECKSEQUENCEVERIFY NOP4 NOP5 NOP6 NOP7 NOP8 NOP9 NOP10\",\"'NOP_1_to_11' EQUAL\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+[\"1\", \"NOP1 CHECKLOCKTIMEVERIFY CHECKSEQUENCEVERIFY NOP4 CHECKBLOCKATHEIGHT NOP6 NOP7 NOP8 NOP9 NOP10 2 EQUAL\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+[\"'NOP_1_to_10' NOP1 CHECKLOCKTIMEVERIFY CHECKSEQUENCEVERIFY NOP4 CHECKBLOCKATHEIGHT NOP6 NOP7 NOP8 NOP9 NOP10\",\"'NOP_1_to_11' EQUAL\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n \n [\"Ensure 100% coverage of discouraged NOPS\"],\n [\"1\", \"NOP1\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n [\"1\", \"CHECKLOCKTIMEVERIFY\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n [\"1\", \"CHECKSEQUENCEVERIFY\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n [\"1\", \"NOP4\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n-[\"1\", \"NOP5\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n+[\"1\", \"CHECKBLOCKATHEIGHT\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n [\"1\", \"NOP6\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n [\"1\", \"NOP7\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n [\"1\", \"NOP8\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],"
      },
      {
        "sha": "8a91693eb25a9a04341f2a124ce116ff751c9f3d",
        "filename": "test/functional/test_framework/script.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1bf3d75ede6d98678301f90534a889fd03228a6/test/functional/test_framework/script.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1bf3d75ede6d98678301f90534a889fd03228a6/test/functional/test_framework/script.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/script.py?ref=c1bf3d75ede6d98678301f90534a889fd03228a6",
        "patch": "@@ -227,7 +227,7 @@ def __new__(cls, n):\n OP_CHECKLOCKTIMEVERIFY = CScriptOp(0xb1)\n OP_CHECKSEQUENCEVERIFY = CScriptOp(0xb2)\n OP_NOP4 = CScriptOp(0xb3)\n-OP_NOP5 = CScriptOp(0xb4)\n+OP_CHECKBLOCKATHEIGHT = CScriptOp(0xb4)\n OP_NOP6 = CScriptOp(0xb5)\n OP_NOP7 = CScriptOp(0xb6)\n OP_NOP8 = CScriptOp(0xb7)\n@@ -354,7 +354,7 @@ def __new__(cls, n):\n     OP_CHECKLOCKTIMEVERIFY,\n     OP_CHECKSEQUENCEVERIFY,\n     OP_NOP4,\n-    OP_NOP5,\n+    OP_CHECKBLOCKATHEIGHT,\n     OP_NOP6,\n     OP_NOP7,\n     OP_NOP8,\n@@ -473,7 +473,7 @@ def __new__(cls, n):\n     OP_CHECKLOCKTIMEVERIFY : 'OP_CHECKLOCKTIMEVERIFY',\n     OP_CHECKSEQUENCEVERIFY : 'OP_CHECKSEQUENCEVERIFY',\n     OP_NOP4 : 'OP_NOP4',\n-    OP_NOP5 : 'OP_NOP5',\n+    OP_CHECKBLOCKATHEIGHT : 'OP_CHECKBLOCKATHEIGHT',\n     OP_NOP6 : 'OP_NOP6',\n     OP_NOP7 : 'OP_NOP7',\n     OP_NOP8 : 'OP_NOP8',\n@@ -592,7 +592,7 @@ def __new__(cls, n):\n     'OP_CHECKLOCKTIMEVERIFY' : OP_CHECKLOCKTIMEVERIFY,\n     'OP_CHECKSEQUENCEVERIFY' : OP_CHECKSEQUENCEVERIFY,\n     'OP_NOP4' : OP_NOP4,\n-    'OP_NOP5' : OP_NOP5,\n+    'OP_CHECKBLOCKATHEIGHT' : OP_CHECKBLOCKATHEIGHT,\n     'OP_NOP6' : OP_NOP6,\n     'OP_NOP7' : OP_NOP7,\n     'OP_NOP8' : OP_NOP8,"
      }
    ]
  },
  {
    "sha": "316d727dda71984403475b055ff9e60f0c30795b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMTZkNzI3ZGRhNzE5ODQ0MDM0NzViMDU1ZmY5ZTYwZjBjMzA3OTVi",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-05-12T03:57:53Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-05-12T03:57:53Z"
      },
      "message": "CHistoricalChain to fix context in CVerifyDB",
      "tree": {
        "sha": "ca75d19fcefcbfbede20aa53336c813ff19d2239",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ca75d19fcefcbfbede20aa53336c813ff19d2239"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/316d727dda71984403475b055ff9e60f0c30795b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/316d727dda71984403475b055ff9e60f0c30795b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/316d727dda71984403475b055ff9e60f0c30795b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/316d727dda71984403475b055ff9e60f0c30795b/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c1bf3d75ede6d98678301f90534a889fd03228a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1bf3d75ede6d98678301f90534a889fd03228a6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c1bf3d75ede6d98678301f90534a889fd03228a6"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 64,
      "deletions": 10
    },
    "files": [
      {
        "sha": "947149701d624bdc56306783a3f94fea82e05a84",
        "filename": "src/chain.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/316d727dda71984403475b055ff9e60f0c30795b/src/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/316d727dda71984403475b055ff9e60f0c30795b/src/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.cpp?ref=316d727dda71984403475b055ff9e60f0c30795b",
        "patch": "@@ -5,6 +5,10 @@\n \n #include \"chain.h\"\n \n+#include \"tinyformat.h\"\n+\n+#include <stdexcept>\n+\n /**\n  * CChain implementation\n  */\n@@ -66,6 +70,28 @@ CBlockIndex* CChain::FindEarliestAtLeast(int64_t nTime) const\n     return (lower == vChain.end() ? NULL : *lower);\n }\n \n+void CHistoricalChain::SetHeight(const int nHeight)\n+{\n+    if (nHeight > chain.Height()) {\n+        throw std::runtime_error(strprintf(\"%s: Cannot set a height beyond parent!\", __func__));\n+    }\n+    my_height = nHeight;\n+}\n+\n+void CHistoricalChain::SetTip(CBlockIndex *pindex)\n+{\n+    throw std::runtime_error(\"Cannot SetTip of a CHistoricalChain!\");\n+}\n+\n+CBlockIndex* CHistoricalChain::FindEarliestAtLeast(int64_t nTime) const\n+{\n+    CBlockIndex * const pblockindex = chain.FindEarliestAtLeast(nTime);\n+    if (pblockindex->nHeight > Height()) {\n+        return NULL;\n+    }\n+    return pblockindex;\n+}\n+\n /** Turn the lowest '1' bit in the binary representation of a number into a '0'. */\n int static inline InvertLowestOne(int n) { return n & (n - 1); }\n "
      },
      {
        "sha": "6ae53df7e0c350e3d9c3e49e6e2ca0fc8fdcf0a9",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 35,
        "deletions": 8,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/316d727dda71984403475b055ff9e60f0c30795b/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/316d727dda71984403475b055ff9e60f0c30795b/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=316d727dda71984403475b055ff9e60f0c30795b",
        "patch": "@@ -436,25 +436,26 @@ class CChain {\n public:\n     /** Returns the index entry for the genesis block of this chain, or NULL if none. */\n     CBlockIndex *Genesis() const {\n-        return vChain.size() > 0 ? vChain[0] : NULL;\n+        return (*this)[0];\n     }\n \n     /** Returns the index entry for the tip of this chain, or NULL if none. */\n     CBlockIndex *Tip() const {\n-        return vChain.size() > 0 ? vChain[vChain.size() - 1] : NULL;\n+        const int nHeight = Height();\n+        return nHeight >= 0 ? (*this)[nHeight] : NULL;\n     }\n \n     /** Returns the index entry at a particular height in this chain, or NULL if no such height exists. */\n-    CBlockIndex *operator[](int nHeight) const {\n-        if (nHeight < 0 || nHeight >= (int)vChain.size())\n+    virtual CBlockIndex *operator[](int nHeight) const {\n+        if (nHeight < 0 || nHeight > Height()) {\n             return NULL;\n+        }\n         return vChain[nHeight];\n     }\n \n     /** Compare two chains efficiently. */\n     friend bool operator==(const CChain &a, const CChain &b) {\n-        return a.vChain.size() == b.vChain.size() &&\n-               a.vChain[a.vChain.size() - 1] == b.vChain[b.vChain.size() - 1];\n+        return a.Tip() == b.Tip();\n     }\n \n     /** Efficiently check whether a block is present in this chain. */\n@@ -471,12 +472,12 @@ class CChain {\n     }\n \n     /** Return the maximal height in the chain. Is equal to chain.Tip() ? chain.Tip()->nHeight : -1. */\n-    int Height() const {\n+    virtual int Height() const {\n         return vChain.size() - 1;\n     }\n \n     /** Set/initialize a chain with a given tip. */\n-    void SetTip(CBlockIndex *pindex);\n+    virtual void SetTip(CBlockIndex *pindex);\n \n     /** Return a CBlockLocator that refers to a block in this chain (by default the tip). */\n     CBlockLocator GetLocator(const CBlockIndex *pindex = NULL) const;\n@@ -485,6 +486,32 @@ class CChain {\n     const CBlockIndex *FindFork(const CBlockIndex *pindex) const;\n \n     /** Find the earliest block with timestamp equal or greater than the given. */\n+    virtual CBlockIndex* FindEarliestAtLeast(int64_t nTime) const;\n+};\n+\n+class CHistoricalChain : public CChain {\n+private:\n+    const CChain& chain;\n+    int my_height;\n+\n+public:\n+    CHistoricalChain() = delete;\n+    CHistoricalChain(const CChain& chainIn, const int heightIn) : chain(chainIn), my_height(heightIn) { }\n+\n+    void SetHeight(int nHeight);\n+\n+    CBlockIndex *operator[](int nHeight) const {\n+        if (nHeight > Height()) {\n+            return NULL;\n+        }\n+        return chain[nHeight];\n+    }\n+\n+    int Height() const {\n+        return my_height;\n+    }\n+\n+    void SetTip(CBlockIndex *pindex);\n     CBlockIndex* FindEarliestAtLeast(int64_t nTime) const;\n };\n "
      },
      {
        "sha": "5993309660e550f0584fdab7d97120e219a59347",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/316d727dda71984403475b055ff9e60f0c30795b/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/316d727dda71984403475b055ff9e60f0c30795b/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=316d727dda71984403475b055ff9e60f0c30795b",
        "patch": "@@ -3685,15 +3685,16 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n     // check level 4: try reconnecting blocks\n     if (nCheckLevel >= 4) {\n         CBlockIndex *pindex = pindexState;\n+        CHistoricalChain chainHistorical(chainActive, pindex->nHeight - 1);\n         while (pindex != chainActive.Tip()) {\n             boost::this_thread::interruption_point();\n             uiInterface.ShowProgress(_(\"Verifying blocks...\"), std::max(1, std::min(99, 100 - (int)(((double)(chainActive.Height() - pindex->nHeight)) / (double)nCheckDepth * 50))));\n             pindex = chainActive.Next(pindex);\n             CBlock block;\n             if (!ReadBlockFromDisk(block, pindex, chainparams.GetConsensus()))\n                 return error(\"VerifyDB(): *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n-            // FIXME: Need to shadow chainActive with the older height!\n-            if (!ConnectBlock(block, state, pindex, coins, chainActive, chainparams))\n+            chainHistorical.SetHeight(pindex->nHeight - 1);\n+            if (!ConnectBlock(block, state, pindex, coins, chainHistorical, chainparams))\n                 return error(\"VerifyDB(): *** found unconnectable block at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n         }\n     }"
      }
    ]
  }
]