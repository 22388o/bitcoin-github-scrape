[
  {
    "sha": "cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYzE2ZDk5ZjFkYzgzMDViMWIyNTVmMWNjMGYyYjE1MTZhYTc3ZWQw",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-01-18T15:15:37Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-01-27T20:22:35Z"
      },
      "message": "[trivial] Fix typos in comments",
      "tree": {
        "sha": "e07bb46576b327b22a3b2d0c8d51b7be29a13280",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e07bb46576b327b22a3b2d0c8d51b7be29a13280"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 24,
      "deletions": 24
    },
    "files": [
      {
        "sha": "69f0e9247af978552d4640d97fe8fed0cbe8192f",
        "filename": "contrib/linearize/example-linearize.cfg",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/contrib/linearize/example-linearize.cfg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/contrib/linearize/example-linearize.cfg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/example-linearize.cfg?ref=cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
        "patch": "@@ -24,7 +24,7 @@ input=/home/example/.bitcoin/blocks\n output_file=/home/example/Downloads/bootstrap.dat\n hashlist=hashlist.txt\n \n-# Maxmimum size in bytes of out-of-order blocks cache in memory\n+# Maximum size in bytes of out-of-order blocks cache in memory\n out_of_order_cache_sz = 100000000\n \n # Do we want the reverse the hash bytes coming from getblockhash?"
      },
      {
        "sha": "ab84bf8e35605d88df241568d0e1ac52c644e625",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
        "patch": "@@ -255,7 +255,7 @@ bool CAddrMan::Add_(const CAddress& addr, const CNetAddr& source, int64_t nTimeP\n     int nId;\n     CAddrInfo* pinfo = Find(addr, &nId);\n \n-    // Do not set a penality for a source's self-announcement\n+    // Do not set a penalty for a source's self-announcement\n     if (addr == source) {\n         nTimePenalty = 0;\n     }"
      },
      {
        "sha": "3998283bb13ebc015056ab4080b998ea57d56719",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
        "patch": "@@ -147,7 +147,7 @@ template<typename K, int Size, CChainParams::Base58Type Type> class CBitcoinExtK\n     K GetKey() {\n         K ret;\n         if (vchData.size() == Size) {\n-            //if base58 encouded data not holds a ext key, return a !IsValid() key\n+            // If base58 encoded data does not hold an ext key, return a !IsValid() key\n             ret.Decode(&vchData[0]);\n         }\n         return ret;"
      },
      {
        "sha": "a549ec29eaafdf97eac290251c3f7f8d33519a6f",
        "filename": "src/bench/perf.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/bench/perf.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/bench/perf.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/perf.cpp?ref=cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
        "patch": "@@ -6,7 +6,7 @@\n \n #if defined(__i386__) || defined(__x86_64__)\n \n-/* These architectures support quering the cycle counter\n+/* These architectures support querying the cycle counter\n  * from user space, no need for any syscall overhead.\n  */\n void perf_init(void) { }"
      },
      {
        "sha": "5a1d80d421210907ce3bedb3bcd32f5a738d3467",
        "filename": "src/blockencodings.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/blockencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/blockencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.h?ref=cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
        "patch": "@@ -99,7 +99,7 @@ class BlockTransactions {\n     }\n };\n \n-// Dumb serialization/storage-helper for CBlockHeaderAndShortTxIDs and PartiallyDownlaodedBlock\n+// Dumb serialization/storage-helper for CBlockHeaderAndShortTxIDs and PartiallyDownloadedBlock\n struct PrefilledTransaction {\n     // Used as an offset since last prefilled tx in CBlockHeaderAndShortTxIDs,\n     // as a proper transaction-in-block-index in PartiallyDownloadedBlock"
      },
      {
        "sha": "6240e82857eb99c6fe2f371a058211b4a77469ff",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
        "patch": "@@ -47,7 +47,7 @@ struct Params {\n     /** Block height at which BIP66 becomes active */\n     int BIP66Height;\n     /**\n-     * Minimum blocks including miner confirmation of the total of 2016 blocks in a retargetting period,\n+     * Minimum blocks including miner confirmation of the total of 2016 blocks in a retargeting period,\n      * (nPowTargetTimespan / nPowTargetSpacing) which is also used for BIP9 deployments.\n      * Examples: 1916 for 95%, 1512 for testchains.\n      */"
      },
      {
        "sha": "ff47e9776b643db85d72405385ee339da5ad33b8",
        "filename": "src/cuckoocache.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/cuckoocache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/cuckoocache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/cuckoocache.h?ref=cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
        "patch": "@@ -257,7 +257,7 @@ class cache\n      *\n      * First, epoch_check decrements and checks the cheap heuristic, and then does\n      * a more expensive scan if the cheap heuristic runs out. If the expensive\n-     * scan suceeds, the epochs are aged and old elements are allow_erased. The\n+     * scan succeeds, the epochs are aged and old elements are allow_erased. The\n      * cheap heuristic is reset to retrigger after the worst case growth of the\n      * current epoch's elements would exceed the epoch_size.\n      */\n@@ -395,7 +395,7 @@ class cache\n             * 1) On first iteration, last_loc == invalid(), find returns last, so\n             *    last_loc defaults to locs[0].\n             * 2) On further iterations, where last_loc == locs[k], last_loc will\n-            *    go to locs[k+1 % 8], i.e., next of the 8 indicies wrapping around\n+            *    go to locs[k+1 % 8], i.e., next of the 8 indices wrapping around\n             *    to 0 if needed.\n             *\n             * This prevents moving the element we just put in."
      },
      {
        "sha": "daac7a0f1a7034b97c131203d6ef83d9142d45ef",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
        "patch": "@@ -25,7 +25,7 @@\n static const char* WWW_AUTH_HEADER_DATA = \"Basic realm=\\\"jsonrpc\\\"\";\n \n /** Simple one-shot callback timer to be used by the RPC mechanism to e.g.\n- * re-lock the wellet.\n+ * re-lock the wallet.\n  */\n class HTTPRPCTimer : public RPCTimerBase\n {"
      },
      {
        "sha": "e936e068f44ae657dd4f82649c26140fe61fbf44",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
        "patch": "@@ -1553,7 +1553,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     }\n \n     if (chainparams.GetConsensus().vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout != 0) {\n-        // Only advertize witness capabilities if they have a reasonable start time.\n+        // Only advertise witness capabilities if they have a reasonable start time.\n         // This allows us to have the code merged without a defined softfork, by setting its\n         // end time to 0.\n         // Note that setting NODE_WITNESS is never required: the only downside from not"
      },
      {
        "sha": "a85c2b7452e356fdc028bb1604a0f45caa2c5d88",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
        "patch": "@@ -49,7 +49,7 @@ class CNetAddr\n         bool IsIPv4() const;    // IPv4 mapped address (::FFFF:0:0/96, 0.0.0.0/0)\n         bool IsIPv6() const;    // IPv6 address (not mapped IPv4, not Tor)\n         bool IsRFC1918() const; // IPv4 private networks (10.0.0.0/8, 192.168.0.0/16, 172.16.0.0/12)\n-        bool IsRFC2544() const; // IPv4 inter-network communcations (192.18.0.0/15)\n+        bool IsRFC2544() const; // IPv4 inter-network communications (192.18.0.0/15)\n         bool IsRFC6598() const; // IPv4 ISP-level NAT (100.64.0.0/10)\n         bool IsRFC5737() const; // IPv4 documentation addresses (192.0.2.0/24, 198.51.100.0/24, 203.0.113.0/24)\n         bool IsRFC3849() const; // IPv6 documentation address (2001:0DB8::/32)"
      },
      {
        "sha": "4b34e73eb7a454aa8b7a579dd618c5b5052aef24",
        "filename": "src/qt/bantablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/qt/bantablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/qt/bantablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bantablemodel.cpp?ref=cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
        "patch": "@@ -64,7 +64,7 @@ class BanTablePriv\n         }\n \n         if (sortColumn >= 0)\n-            // sort cachedBanlist (use stable sort to prevent rows jumping around unneceesarily)\n+            // sort cachedBanlist (use stable sort to prevent rows jumping around unnecessarily)\n             qStableSort(cachedBanlist.begin(), cachedBanlist.end(), BannedNodeLessThan(sortColumn, sortOrder));\n     }\n "
      },
      {
        "sha": "9d46280a37b4099234502d89c8569c8c43d540c6",
        "filename": "src/qt/paymentserver.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/qt/paymentserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/qt/paymentserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.h?ref=cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
        "patch": "@@ -21,10 +21,10 @@\n //\n // When startup is finished and the main window is\n // shown, a signal is sent to slot uiReady(), which\n-// emits a receivedURL() signal for any payment\n+// emits a receivedURI() signal for any payment\n // requests that happened during startup.\n //\n-// After startup, receivedURL() happens as usual.\n+// After startup, receivedURI() happens as usual.\n //\n // This class has one more feature: a static\n // method that finds URIs passed in the command line"
      },
      {
        "sha": "1c0ed663c1fdfb596eaf88e2ba561998812d7b67",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
        "patch": "@@ -608,7 +608,7 @@ void SendCoinsDialog::updateGlobalFeeVariables()\n         // set nMinimumTotalFee to 0 to not accidentally pay a custom fee\n         CoinControlDialog::coinControl->nMinimumTotalFee = 0;\n \n-        // show the estimated reuquired time for confirmation\n+        // show the estimated required time for confirmation\n         ui->confirmationTargetLabel->setText(GUIUtil::formatDurationStr(nConfirmTarget * Params().GetConsensus().nPowTargetSpacing) + \" / \" + tr(\"%n block(s)\", \"\", nConfirmTarget));\n     }\n     else"
      },
      {
        "sha": "7ab4125284666b293f62309ae62c2099a3b1de25",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
        "patch": "@@ -39,7 +39,7 @@ HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :\n \n     QString version = tr(PACKAGE_NAME) + \" \" + tr(\"version\") + \" \" + QString::fromStdString(FormatFullVersion());\n     /* On x86 add a bit specifier to the version so that users can distinguish between\n-     * 32 and 64 bit builds. On other architectures, 32/64 bit may be more ambigious.\n+     * 32 and 64 bit builds. On other architectures, 32/64 bit may be more ambiguous.\n      */\n #if defined(__x86_64__)\n     version += \" \" + tr(\"(%1-bit)\").arg(64);"
      },
      {
        "sha": "35747552feaf0587f907c2bb593b986c041865be",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
        "patch": "@@ -150,7 +150,7 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n             obj.push_back(Pair(\"pingwait\", stats.dPingWait));\n         obj.push_back(Pair(\"version\", stats.nVersion));\n         // Use the sanitized form of subver here, to avoid tricksy remote peers from\n-        // corrupting or modifiying the JSON output by putting special characters in\n+        // corrupting or modifying the JSON output by putting special characters in\n         // their ver message.\n         obj.push_back(Pair(\"subver\", stats.cleanSubVer));\n         obj.push_back(Pair(\"inbound\", stats.fInbound));"
      },
      {
        "sha": "9f4741b1cd95d17bd0117de1dc64db920d3a24c2",
        "filename": "src/script/script.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/script/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/script/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.cpp?ref=cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
        "patch": "@@ -129,7 +129,7 @@ const char* GetOpName(opcodetype opcode)\n     case OP_CHECKMULTISIG          : return \"OP_CHECKMULTISIG\";\n     case OP_CHECKMULTISIGVERIFY    : return \"OP_CHECKMULTISIGVERIFY\";\n \n-    // expanson\n+    // expansion\n     case OP_NOP1                   : return \"OP_NOP1\";\n     case OP_CHECKLOCKTIMEVERIFY    : return \"OP_CHECKLOCKTIMEVERIFY\";\n     case OP_CHECKSEQUENCEVERIFY    : return \"OP_CHECKSEQUENCEVERIFY\";"
      },
      {
        "sha": "9661a665140499148dc2cf8e803f2aea160a4845",
        "filename": "src/test/serialize_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/test/serialize_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/test/serialize_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/serialize_tests.cpp?ref=cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
        "patch": "@@ -90,7 +90,7 @@ BOOST_AUTO_TEST_CASE(sizes)\n \n BOOST_AUTO_TEST_CASE(floats_conversion)\n {\n-    // Choose values that map unambigiously to binary floating point to avoid\n+    // Choose values that map unambiguously to binary floating point to avoid\n     // rounding issues at the compiler side.\n     BOOST_CHECK_EQUAL(ser_uint32_to_float(0x00000000), 0.0F);\n     BOOST_CHECK_EQUAL(ser_uint32_to_float(0x3f000000), 0.5F);\n@@ -109,7 +109,7 @@ BOOST_AUTO_TEST_CASE(floats_conversion)\n \n BOOST_AUTO_TEST_CASE(doubles_conversion)\n {\n-    // Choose values that map unambigiously to binary floating point to avoid\n+    // Choose values that map unambiguously to binary floating point to avoid\n     // rounding issues at the compiler side.\n     BOOST_CHECK_EQUAL(ser_uint64_to_double(0x0000000000000000ULL), 0.0);\n     BOOST_CHECK_EQUAL(ser_uint64_to_double(0x3fe0000000000000ULL), 0.5);"
      },
      {
        "sha": "c49c5d9eb2a83f39838a8d0e0a9e763a9b4508b3",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
        "patch": "@@ -372,7 +372,7 @@ class TorController\n     struct event *reconnect_ev;\n     float reconnect_timeout;\n     CService service;\n-    /** Cooie for SAFECOOKIE auth */\n+    /** Cookie for SAFECOOKIE auth */\n     std::vector<uint8_t> cookie;\n     /** ClientNonce for SAFECOOKIE auth */\n     std::vector<uint8_t> clientNonce;"
      },
      {
        "sha": "db1a02455f862fa1ac1b8bee2e316e123de1471c",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
        "patch": "@@ -355,7 +355,7 @@ enum class MemPoolRemovalReason {\n  * Transactions are added when they are seen on the network (or created by the\n  * local node), but not all transactions seen are added to the pool. For\n  * example, the following new transactions will not be added to the mempool:\n- * - a transaction which doesn't make the mimimum fee requirements.\n+ * - a transaction which doesn't meet the minimum fee requirements.\n  * - a new transaction that double-spends an input of a transaction already in\n  * the pool where the new transaction does not meet the Replace-By-Fee\n  * requirements as defined in BIP 125."
      },
      {
        "sha": "c7b3e4f168655260f38c381b050706d18d23ce5a",
        "filename": "src/utiltime.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/utiltime.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/utiltime.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utiltime.cpp?ref=cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
        "patch": "@@ -63,7 +63,7 @@ void MilliSleep(int64_t n)\n {\n \n /**\n- * Boost's sleep_for was uninterruptable when backed by nanosleep from 1.50\n+ * Boost's sleep_for was uninterruptible when backed by nanosleep from 1.50\n  * until fixed in 1.52. Use the deprecated sleep method for the broken case.\n  * See: https://svn.boost.org/trac/boost/ticket/7238\n  */"
      },
      {
        "sha": "517202a9bb84a6441e011f00b9f2ae21d060628a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
        "patch": "@@ -2576,7 +2576,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                 // BIP125 defines opt-in RBF as any nSequence < maxint-1, so\n                 // we use the highest possible value in that range (maxint-2)\n                 // to avoid conflicting with other possible uses of nSequence,\n-                // and in the spirit of \"smallest posible change from prior\n+                // and in the spirit of \"smallest possible change from prior\n                 // behavior.\"\n                 for (const auto& coin : setCoins)\n                     txNew.vin.push_back(CTxIn(coin.first->GetHash(),coin.second,CScript(),"
      }
    ]
  }
]