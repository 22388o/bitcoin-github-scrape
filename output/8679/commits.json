[
  {
    "sha": "75f20652932361a176e72e2ba3477f4604810bb6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NWYyMDY1MjkzMjM2MWExNzZlNzJlMmJhMzQ3N2Y0NjA0ODEwYmI2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-08-16T09:16:21Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-09-07T14:16:00Z"
      },
      "message": "build: Remove check for `openssl/ec.h`\n\nWe don't use any elliptic curves from OpenSSL anymore, nor include this\nheader anywhere but optionally in the tests of secp256k1 (which has\nits own autoconf setup).\n\nReported by sinetek on IRC.",
      "tree": {
        "sha": "d386d19469416490898bca2361aa5a2efe28375c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d386d19469416490898bca2361aa5a2efe28375c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/75f20652932361a176e72e2ba3477f4604810bb6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75f20652932361a176e72e2ba3477f4604810bb6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/75f20652932361a176e72e2ba3477f4604810bb6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75f20652932361a176e72e2ba3477f4604810bb6/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "122fdfdae91542152e40359f99245ed589010b3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/122fdfdae91542152e40359f99245ed589010b3b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/122fdfdae91542152e40359f99245ed589010b3b"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 0,
      "deletions": 8
    },
    "files": [
      {
        "sha": "01d20baeff238d5f786935f679a38e8f0d35eb10",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75f20652932361a176e72e2ba3477f4604810bb6/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75f20652932361a176e72e2ba3477f4604810bb6/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=75f20652932361a176e72e2ba3477f4604810bb6",
        "patch": "@@ -861,14 +861,6 @@ AM_CONDITIONAL([EMBEDDED_UNIVALUE],[test x$system_univalue = xno])\n AC_SUBST(UNIVALUE_CFLAGS)\n AC_SUBST(UNIVALUE_LIBS)\n \n-CXXFLAGS_TEMP=\"$CXXFLAGS\"\n-LIBS_TEMP=\"$LIBS\"\n-CXXFLAGS=\"$CXXFLAGS $SSL_CFLAGS $CRYPTO_CFLAGS\"\n-LIBS=\"$LIBS $SSL_LIBS $CRYPTO_LIBS\"\n-AC_CHECK_HEADER([openssl/ec.h],, AC_MSG_ERROR(OpenSSL ec header missing),)\n-CXXFLAGS=\"$CXXFLAGS_TEMP\"\n-LIBS=\"$LIBS_TEMP\"\n-\n BITCOIN_QT_PATH_PROGS([PROTOC], [protoc],$protoc_bin_path)\n \n AC_MSG_CHECKING([whether to build bitcoind])"
      }
    ]
  },
  {
    "sha": "1db3352cc663f6a25a39813c763a2f6263f55e6d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZGIzMzUyY2M2NjNmNmEyNWEzOTgxM2M3NjNhMmY2MjYzZjU1ZTZk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-08-18T14:58:04Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-09-07T14:17:09Z"
      },
      "message": "qt: Fix random segfault when closing \"Choose data directory\" dialog\n\nThe `pickDataDirectory()` function was calling `exit(0)` to quit\nthe application when the user closes the dialog without choosing\na data directory.\n\nThis is a bad idea because a background thread is created (to\ncheck free space on the drive of the currently selected datadir).\nThe thread is not stopped and unwound properly, resulting in a potential\nrace condition somewhere deep in Qt.\n\nSo replace the `exit()` by a boolean return value, and let the\nstack unwind normally.",
      "tree": {
        "sha": "07b488e23edec9725205de01d2f8527fde67336d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/07b488e23edec9725205de01d2f8527fde67336d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1db3352cc663f6a25a39813c763a2f6263f55e6d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1db3352cc663f6a25a39813c763a2f6263f55e6d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1db3352cc663f6a25a39813c763a2f6263f55e6d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1db3352cc663f6a25a39813c763a2f6263f55e6d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "75f20652932361a176e72e2ba3477f4604810bb6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75f20652932361a176e72e2ba3477f4604810bb6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/75f20652932361a176e72e2ba3477f4604810bb6"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 10,
      "deletions": 5
    },
    "files": [
      {
        "sha": "430e6dd0e8df85928a998583f843042e3e1f814f",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1db3352cc663f6a25a39813c763a2f6263f55e6d/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1db3352cc663f6a25a39813c763a2f6263f55e6d/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=1db3352cc663f6a25a39813c763a2f6263f55e6d",
        "patch": "@@ -578,7 +578,8 @@ int main(int argc, char *argv[])\n \n     /// 5. Now that settings and translations are available, ask user for data directory\n     // User language is set up: pick a data directory\n-    Intro::pickDataDirectory();\n+    if (!Intro::pickDataDirectory())\n+        return 0;\n \n     /// 6. Determine availability of data directory and parse bitcoin.conf\n     /// - Do not call GetDataDir(true) before this step finishes"
      },
      {
        "sha": "6a5740e21d3cbca28748bf5ec07f84e88df6fe95",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1db3352cc663f6a25a39813c763a2f6263f55e6d/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1db3352cc663f6a25a39813c763a2f6263f55e6d/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=1db3352cc663f6a25a39813c763a2f6263f55e6d",
        "patch": "@@ -165,14 +165,14 @@ QString Intro::getDefaultDataDirectory()\n     return GUIUtil::boostPathToQString(GetDefaultDataDir());\n }\n \n-void Intro::pickDataDirectory()\n+bool Intro::pickDataDirectory()\n {\n     namespace fs = boost::filesystem;\n     QSettings settings;\n     /* If data directory provided on command line, no need to look at settings\n        or show a picking dialog */\n     if(!GetArg(\"-datadir\", \"\").empty())\n-        return;\n+        return true;\n     /* 1) Default data directory for operating system */\n     QString dataDir = getDefaultDataDirectory();\n     /* 2) Allow QSettings to override default dir */\n@@ -190,7 +190,7 @@ void Intro::pickDataDirectory()\n             if(!intro.exec())\n             {\n                 /* Cancel clicked */\n-                exit(0);\n+                return false;\n             }\n             dataDir = intro.getDataDirectory();\n             try {\n@@ -211,6 +211,7 @@ void Intro::pickDataDirectory()\n      */\n     if(dataDir != getDefaultDataDirectory())\n         SoftSetArg(\"-datadir\", GUIUtil::qstringToBoostPath(dataDir).string()); // use OS locale for path setting\n+    return true;\n }\n \n void Intro::setStatus(int status, const QString &message, quint64 bytesAvailable)"
      },
      {
        "sha": "ee768a7ad8d1df3049839e2673d9b2583854780f",
        "filename": "src/qt/intro.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1db3352cc663f6a25a39813c763a2f6263f55e6d/src/qt/intro.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1db3352cc663f6a25a39813c763a2f6263f55e6d/src/qt/intro.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.h?ref=1db3352cc663f6a25a39813c763a2f6263f55e6d",
        "patch": "@@ -35,10 +35,13 @@ class Intro : public QDialog\n     /**\n      * Determine data directory. Let the user choose if the current one doesn't exist.\n      *\n+     * @returns true if a data directory was selected, false if the user cancelled the selection\n+     * dialog.\n+     *\n      * @note do NOT call global GetDataDir() before calling this function, this\n      * will cause the wrong path to be cached.\n      */\n-    static void pickDataDirectory();\n+    static bool pickDataDirectory();\n \n     /**\n      * Determine default data directory for operating system."
      }
    ]
  },
  {
    "sha": "2611ad79a5d53e2ce1535b342a9b72c2888a6c3f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNjExYWQ3OWE1ZDUzZTJjZTE1MzViMzQyYTliNzJjMjg4OGE2YzNm",
    "commit": {
      "author": {
        "name": "Ethan Heilman",
        "email": "Ethan.R.Heilman@gmail.com",
        "date": "2016-06-17T04:10:07Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-09-07T14:17:40Z"
      },
      "message": "Added feeler connections increasing good addrs in the tried table.\n\nTests if addresses are online or offline by briefly connecting to them. These short lived connections are referred to as feeler connections. Feeler connections are designed to increase the number of fresh online addresses in tried by selecting and connecting to addresses in new. One feeler connection is attempted on average once every two minutes.\n\nThis change was suggested as Countermeasure 4 in\nEclipse Attacks on Bitcoin\u2019s Peer-to-Peer Network, Ethan Heilman,\nAlison Kendler, Aviv Zohar, Sharon Goldberg. ePrint Archive Report\n2015/263. March 2015.",
      "tree": {
        "sha": "a96504ebeeba38b23c87c99c803a9310858070d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a96504ebeeba38b23c87c99c803a9310858070d0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2611ad79a5d53e2ce1535b342a9b72c2888a6c3f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2611ad79a5d53e2ce1535b342a9b72c2888a6c3f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2611ad79a5d53e2ce1535b342a9b72c2888a6c3f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2611ad79a5d53e2ce1535b342a9b72c2888a6c3f/comments",
    "author": {
      "login": "EthanHeilman",
      "id": 274814,
      "node_id": "MDQ6VXNlcjI3NDgxNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/EthanHeilman",
      "html_url": "https://github.com/EthanHeilman",
      "followers_url": "https://api.github.com/users/EthanHeilman/followers",
      "following_url": "https://api.github.com/users/EthanHeilman/following{/other_user}",
      "gists_url": "https://api.github.com/users/EthanHeilman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/EthanHeilman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
      "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
      "repos_url": "https://api.github.com/users/EthanHeilman/repos",
      "events_url": "https://api.github.com/users/EthanHeilman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1db3352cc663f6a25a39813c763a2f6263f55e6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1db3352cc663f6a25a39813c763a2f6263f55e6d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1db3352cc663f6a25a39813c763a2f6263f55e6d"
      }
    ],
    "stats": {
      "total": 92,
      "additions": 83,
      "deletions": 9
    },
    "files": [
      {
        "sha": "e3be69ad24cf24e79ee64c8a2bcb7e1a2a7e6bc3",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2611ad79a5d53e2ce1535b342a9b72c2888a6c3f/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2611ad79a5d53e2ce1535b342a9b72c2888a6c3f/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=2611ad79a5d53e2ce1535b342a9b72c2888a6c3f",
        "patch": "@@ -4917,6 +4917,12 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n     if (strCommand == NetMsgType::VERSION)\n     {\n+        // Feeler connections exist only to verify if address is online.\n+        if (pfrom->fFeeler) {\n+            assert(pfrom->fInbound == false);\n+            pfrom->fDisconnect = true;\n+        }\n+\n         // Each connection can only send one version message\n         if (pfrom->nVersion != 0)\n         {"
      },
      {
        "sha": "eb2c38dd1026af3793efe11301fb14197835b9b3",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 8,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2611ad79a5d53e2ce1535b342a9b72c2888a6c3f/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2611ad79a5d53e2ce1535b342a9b72c2888a6c3f/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=2611ad79a5d53e2ce1535b342a9b72c2888a6c3f",
        "patch": "@@ -42,6 +42,9 @@\n // Dump addresses to peers.dat and banlist.dat every 15 minutes (900s)\n #define DUMP_ADDRESSES_INTERVAL 900\n \n+// We add a random period time (0 to 1 seconds) to feeler connections to prevent synchronization.\n+#define FEELER_SLEEP_WINDOW 1\n+\n #if !defined(HAVE_MSG_NOSIGNAL) && !defined(MSG_NOSIGNAL)\n #define MSG_NOSIGNAL 0\n #endif\n@@ -60,6 +63,7 @@\n \n namespace {\n     const int MAX_OUTBOUND_CONNECTIONS = 8;\n+    const int MAX_FEELER_CONNECTIONS = 1;\n \n     struct ListenSocket {\n         SOCKET socket;\n@@ -1016,7 +1020,8 @@ static void AcceptConnection(const ListenSocket& hListenSocket) {\n     SOCKET hSocket = accept(hListenSocket.socket, (struct sockaddr*)&sockaddr, &len);\n     CAddress addr;\n     int nInbound = 0;\n-    int nMaxInbound = nMaxConnections - MAX_OUTBOUND_CONNECTIONS;\n+    int nMaxInbound = nMaxConnections - (MAX_OUTBOUND_CONNECTIONS + MAX_FEELER_CONNECTIONS);\n+    assert(nMaxInbound > 0);\n \n     if (hSocket != INVALID_SOCKET)\n         if (!addr.SetSockAddr((const struct sockaddr*)&sockaddr))\n@@ -1609,6 +1614,9 @@ void ThreadOpenConnections()\n \n     // Initiate network connections\n     int64_t nStart = GetTime();\n+\n+    // Minimum time before next feeler connection (in microseconds).\n+    int64_t nNextFeeler = PoissonNextSend(nStart*1000*1000, FEELER_INTERVAL);\n     while (true)\n     {\n         ProcessOneShot();\n@@ -1646,13 +1654,36 @@ void ThreadOpenConnections()\n                 }\n             }\n         }\n+        assert(nOutbound <= (MAX_OUTBOUND_CONNECTIONS + MAX_FEELER_CONNECTIONS));\n \n-        int64_t nANow = GetAdjustedTime();\n+        // Feeler Connections\n+        //\n+        // Design goals:\n+        //  * Increase the number of connectable addresses in the tried table.\n+        //\n+        // Method:\n+        //  * Choose a random address from new and attempt to connect to it if we can connect \n+        //    successfully it is added to tried.\n+        //  * Start attempting feeler connections only after node finishes making outbound \n+        //    connections.\n+        //  * Only make a feeler connection once every few minutes.\n+        //\n+        bool fFeeler = false;\n+        if (nOutbound >= MAX_OUTBOUND_CONNECTIONS) {\n+            int64_t nTime = GetTimeMicros(); // The current time right now (in microseconds).\n+            if (nTime > nNextFeeler) {\n+                nNextFeeler = PoissonNextSend(nTime, FEELER_INTERVAL);\n+                fFeeler = true;\n+            } else {\n+                continue;\n+            }\n+        }\n \n+        int64_t nANow = GetAdjustedTime();\n         int nTries = 0;\n         while (true)\n         {\n-            CAddrInfo addr = addrman.Select();\n+            CAddrInfo addr = addrman.Select(fFeeler);\n \n             // if we selected an invalid address, restart\n             if (!addr.IsValid() || setConnected.count(addr.GetGroup()) || IsLocal(addr))\n@@ -1688,8 +1719,17 @@ void ThreadOpenConnections()\n             break;\n         }\n \n-        if (addrConnect.IsValid())\n-            OpenNetworkConnection(addrConnect, (int)setConnected.size() >= std::min(nMaxConnections - 1, 2), &grant);\n+        if (addrConnect.IsValid()) {\n+\n+            if (fFeeler) {\n+                // Add small amount of random noise before connection to avoid synchronization.\n+                int randsleep = GetRandInt(FEELER_SLEEP_WINDOW * 1000);\n+                MilliSleep(randsleep);\n+                LogPrint(\"net\", \"Making feeler connection to %s\\n\", addrConnect.ToString());\n+            }\n+\n+            OpenNetworkConnection(addrConnect, (int)setConnected.size() >= std::min(nMaxConnections - 1, 2), &grant, NULL, false, fFeeler);\n+        }\n     }\n }\n \n@@ -1771,7 +1811,7 @@ void ThreadOpenAddedConnections()\n }\n \n // if successful, this moves the passed grant to the constructed node\n-bool OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound, const char *pszDest, bool fOneShot)\n+bool OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound, const char *pszDest, bool fOneShot, bool fFeeler)\n {\n     //\n     // Initiate outbound network connection\n@@ -1795,6 +1835,8 @@ bool OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSem\n     pnode->fNetworkNode = true;\n     if (fOneShot)\n         pnode->fOneShot = true;\n+    if (fFeeler)\n+        pnode->fFeeler = true;\n \n     return true;\n }\n@@ -2054,7 +2096,7 @@ void StartNode(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     if (semOutbound == NULL) {\n         // initialize semaphore\n-        int nMaxOutbound = std::min(MAX_OUTBOUND_CONNECTIONS, nMaxConnections);\n+        int nMaxOutbound = std::min((MAX_OUTBOUND_CONNECTIONS + MAX_FEELER_CONNECTIONS), nMaxConnections);\n         semOutbound = new CSemaphore(nMaxOutbound);\n     }\n \n@@ -2096,7 +2138,7 @@ bool StopNode()\n     LogPrintf(\"StopNode()\\n\");\n     MapPort(false);\n     if (semOutbound)\n-        for (int i=0; i<MAX_OUTBOUND_CONNECTIONS; i++)\n+        for (int i=0; i<(MAX_OUTBOUND_CONNECTIONS + MAX_FEELER_CONNECTIONS); i++)\n             semOutbound->post();\n \n     if (fAddressesInitialized)\n@@ -2437,6 +2479,7 @@ CNode::CNode(SOCKET hSocketIn, const CAddress& addrIn, const std::string& addrNa\n     fWhitelisted = false;\n     fOneShot = false;\n     fClient = false; // set by version message\n+    fFeeler = false;\n     fInbound = fInboundIn;\n     fNetworkNode = false;\n     fSuccessfullyConnected = false;"
      },
      {
        "sha": "63bb2c2ecfbab2d2227cbdd474ec6535bd04ea31",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2611ad79a5d53e2ce1535b342a9b72c2888a6c3f/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2611ad79a5d53e2ce1535b342a9b72c2888a6c3f/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=2611ad79a5d53e2ce1535b342a9b72c2888a6c3f",
        "patch": "@@ -41,6 +41,8 @@ namespace boost {\n static const int PING_INTERVAL = 2 * 60;\n /** Time after which to disconnect, after waiting for a ping response (or inactivity). */\n static const int TIMEOUT_INTERVAL = 20 * 60;\n+/** Run the feeler connection loop once every 2 minutes or 120 seconds. **/\n+static const int FEELER_INTERVAL = 120;\n /** The maximum number of entries in an 'inv' protocol message */\n static const unsigned int MAX_INV_SZ = 50000;\n /** The maximum number of new addresses to accumulate before announcing. */\n@@ -89,7 +91,7 @@ CNode* FindNode(const CSubNet& subNet);\n CNode* FindNode(const std::string& addrName);\n CNode* FindNode(const CService& ip);\n CNode* FindNode(const NodeId id); //TODO: Remove this\n-bool OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = NULL, const char *strDest = NULL, bool fOneShot = false);\n+bool OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = NULL, const char *strDest = NULL, bool fOneShot = false, bool fFeeler = false);\n void MapPort(bool fUseUPnP);\n unsigned short GetListenPort();\n bool BindListenPort(const CService &bindAddr, std::string& strError, bool fWhitelisted = false);\n@@ -350,6 +352,7 @@ class CNode\n     // the network or wire types and the cleaned string used when displayed or logged.\n     std::string strSubVer, cleanSubVer;\n     bool fWhitelisted; // This peer can bypass DoS banning.\n+    bool fFeeler; // If true this node is being used as a short lived feeler.\n     bool fOneShot;\n     bool fClient;\n     bool fInbound;"
      },
      {
        "sha": "72bca9bbb8f98011e2a14093bab2de2aa3ef19b1",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2611ad79a5d53e2ce1535b342a9b72c2888a6c3f/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2611ad79a5d53e2ce1535b342a9b72c2888a6c3f/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=2611ad79a5d53e2ce1535b342a9b72c2888a6c3f",
        "patch": "@@ -142,4 +142,26 @@ BOOST_AUTO_TEST_CASE(caddrdb_read_corrupted)\n     BOOST_CHECK(addrman2.size() == 0);\n }\n \n+BOOST_AUTO_TEST_CASE(cnode_simple_test)\n+{\n+    SOCKET hSocket = INVALID_SOCKET;\n+\n+    in_addr ipv4Addr;\n+    ipv4Addr.s_addr = 0xa0b0c001;\n+    \n+    CAddress addr = CAddress(CService(ipv4Addr, 7777), NODE_NETWORK);\n+    std::string pszDest = \"\";\n+    bool fInboundIn = false;\n+\n+    // Test that fFeeler is false by default.\n+    CNode* pnode1 = new CNode(hSocket, addr, pszDest, fInboundIn);\n+    BOOST_CHECK(pnode1->fInbound == false);\n+    BOOST_CHECK(pnode1->fFeeler == false);\n+\n+    fInboundIn = true;\n+    CNode* pnode2 = new CNode(hSocket, addr, pszDest, fInboundIn);\n+    BOOST_CHECK(pnode2->fInbound == true);\n+    BOOST_CHECK(pnode2->fFeeler == false);\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "f1c0d78b2d9cbd671413af98e7b081a3b71113ad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMWMwZDc4YjJkOWNiZDY3MTQxM2FmOThlN2IwODFhM2I3MTExM2Fk",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-02-22T15:21:27Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-09-07T14:18:12Z"
      },
      "message": "[Qt] show network/chain errors in the GUI",
      "tree": {
        "sha": "f9b1f76ff13c01a48355468c37a3fbc2f1b04fd4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f9b1f76ff13c01a48355468c37a3fbc2f1b04fd4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f1c0d78b2d9cbd671413af98e7b081a3b71113ad",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1c0d78b2d9cbd671413af98e7b081a3b71113ad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f1c0d78b2d9cbd671413af98e7b081a3b71113ad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1c0d78b2d9cbd671413af98e7b081a3b71113ad/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2611ad79a5d53e2ce1535b342a9b72c2888a6c3f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2611ad79a5d53e2ce1535b342a9b72c2888a6c3f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2611ad79a5d53e2ce1535b342a9b72c2888a6c3f"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 5,
      "deletions": 3
    },
    "files": [
      {
        "sha": "6e784c508d7ded8ccc1db3ff534215296ae7481f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1c0d78b2d9cbd671413af98e7b081a3b71113ad/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1c0d78b2d9cbd671413af98e7b081a3b71113ad/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=f1c0d78b2d9cbd671413af98e7b081a3b71113ad",
        "patch": "@@ -4647,6 +4647,7 @@ std::string GetWarnings(const std::string& strFor)\n     string strStatusBar;\n     string strRPC;\n     string strGUI;\n+    const string uiAlertSeperator = \"<hr />\";\n \n     if (!CLIENT_VERSION_IS_RELEASE) {\n         strStatusBar = \"This is a pre-release test build - use at your own risk - do not use for mining or merchant applications\";\n@@ -4659,18 +4660,19 @@ std::string GetWarnings(const std::string& strFor)\n     // Misc warnings like out of disk space and clock is wrong\n     if (strMiscWarning != \"\")\n     {\n-        strStatusBar = strGUI = strMiscWarning;\n+        strStatusBar = strMiscWarning;\n+        strGUI += (strGUI.empty() ? \"\" : uiAlertSeperator) + strMiscWarning;\n     }\n \n     if (fLargeWorkForkFound)\n     {\n         strStatusBar = strRPC = \"Warning: The network does not appear to fully agree! Some miners appear to be experiencing issues.\";\n-        strGUI = _(\"Warning: The network does not appear to fully agree! Some miners appear to be experiencing issues.\");\n+        strGUI += strGUI.empty() ? \"\" : uiAlertSeperator + _(\"Warning: The network does not appear to fully agree! Some miners appear to be experiencing issues.\");\n     }\n     else if (fLargeWorkInvalidChainFound)\n     {\n         strStatusBar = strRPC = \"Warning: We do not appear to fully agree with our peers! You may need to upgrade, or other nodes may need to upgrade.\";\n-        strGUI = _(\"Warning: We do not appear to fully agree with our peers! You may need to upgrade, or other nodes may need to upgrade.\");\n+        strGUI += strGUI.empty() ? \"\" : uiAlertSeperator + _(\"Warning: We do not appear to fully agree with our peers! You may need to upgrade, or other nodes may need to upgrade.\");\n     }\n \n     if (strFor == \"gui\")"
      }
    ]
  },
  {
    "sha": "0e6d7535845f98a080078525c4e3f4f9dce0ec22",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZTZkNzUzNTg0NWY5OGEwODAwNzg1MjVjNGUzZjRmOWRjZTBlYzIy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-08-29T08:33:36Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-09-07T14:18:53Z"
      },
      "message": "[doc] build: Mention curl",
      "tree": {
        "sha": "e571b026652ecc5d07b89b2a1e929c43e364c9a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e571b026652ecc5d07b89b2a1e929c43e364c9a9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0e6d7535845f98a080078525c4e3f4f9dce0ec22",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e6d7535845f98a080078525c4e3f4f9dce0ec22",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0e6d7535845f98a080078525c4e3f4f9dce0ec22",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e6d7535845f98a080078525c4e3f4f9dce0ec22/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f1c0d78b2d9cbd671413af98e7b081a3b71113ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1c0d78b2d9cbd671413af98e7b081a3b71113ad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f1c0d78b2d9cbd671413af98e7b081a3b71113ad"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 7,
      "deletions": 4
    },
    "files": [
      {
        "sha": "62e3e793e97f300fbc9935619e7024b7254bdfaf",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e6d7535845f98a080078525c4e3f4f9dce0ec22/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e6d7535845f98a080078525c4e3f4f9dce0ec22/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=0e6d7535845f98a080078525c4e3f4f9dce0ec22",
        "patch": "@@ -293,9 +293,10 @@ These steps can be performed on, for example, an Ubuntu VM. The depends system\n will also work on other Linux distributions, however the commands for\n installing the toolchain will be different.\n \n-First install the toolchain:\n+Make sure you install the build requirements mentioned above.\n+Then, install the toolchain and curl:\n \n-    sudo apt-get install g++-arm-linux-gnueabihf\n+    sudo apt-get install g++-arm-linux-gnueabihf curl\n \n To build executables for ARM:\n "
      },
      {
        "sha": "129774491b2ffacb9f94ace3e20c4906e858b238",
        "filename": "doc/build-windows.md",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e6d7535845f98a080078525c4e3f4f9dce0ec22/doc/build-windows.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e6d7535845f98a080078525c4e3f4f9dce0ec22/doc/build-windows.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-windows.md?ref=0e6d7535845f98a080078525c4e3f4f9dce0ec22",
        "patch": "@@ -16,9 +16,11 @@ These steps can be performed on, for example, an Ubuntu VM. The depends system\n will also work on other Linux distributions, however the commands for\n installing the toolchain will be different.\n \n-First install the toolchains:\n+Make sure you install the build requirements mentioned in\n+[build-unix.md](/doc/build-unix.md).\n+Then, install the toolchains and curl:\n \n-    sudo apt-get install g++-mingw-w64-i686 mingw-w64-i686-dev g++-mingw-w64-x86-64 mingw-w64-x86-64-dev\n+    sudo apt-get install g++-mingw-w64-i686 mingw-w64-i686-dev g++-mingw-w64-x86-64 mingw-w64-x86-64-dev curl\n \n To build executables for Windows 32-bit:\n "
      }
    ]
  },
  {
    "sha": "b09e13cb6f3ca3b478afc6dea161463247ac5146",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMDllMTNjYjZmM2NhM2I0NzhhZmM2ZGVhMTYxNDYzMjQ3YWM1MTQ2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-08-26T14:26:02Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-09-07T14:19:56Z"
      },
      "message": "build: Updates for OpenBSD\n\n- LevelDB platform was not guessed correctly (it ended up defining\n  `-DOS_OPENBSD59` instead of `-DOS_OPENBSD`)\n\n- On OpenBSD there is no convenience link from `python3.5` to `python3`:\n  add detection for other python interpreter names.\n\n- If it has to guess the LevelDB OS, print a autoconf warning so that\n  the user can check.",
      "tree": {
        "sha": "d66f031f018ad1fad05b1ffde0f268161a4ed961",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d66f031f018ad1fad05b1ffde0f268161a4ed961"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b09e13cb6f3ca3b478afc6dea161463247ac5146",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b09e13cb6f3ca3b478afc6dea161463247ac5146",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b09e13cb6f3ca3b478afc6dea161463247ac5146",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b09e13cb6f3ca3b478afc6dea161463247ac5146/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0e6d7535845f98a080078525c4e3f4f9dce0ec22",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e6d7535845f98a080078525c4e3f4f9dce0ec22",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0e6d7535845f98a080078525c4e3f4f9dce0ec22"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 9,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7b66b61eb170ee14706f38019bdd6074eb246427",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b09e13cb6f3ca3b478afc6dea161463247ac5146/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b09e13cb6f3ca3b478afc6dea161463247ac5146/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=b09e13cb6f3ca3b478afc6dea161463247ac5146",
        "patch": "@@ -67,7 +67,8 @@ AC_PATH_TOOL(STRIP, strip)\n AC_PATH_TOOL(GCOV, gcov)\n AC_PATH_PROG(LCOV, lcov)\n AC_PATH_PROG(JAVA, java)\n-AC_PATH_PROGS([PYTHON], [python3 python2.7 python2 python])\n+dnl Python 3.x is supported from 3.4 on (see https://github.com/bitcoin/bitcoin/issues/7893)\n+AC_PATH_PROGS([PYTHON], [python3.6 python3.5 python3.4 python3 python2.7 python2 python])\n AC_PATH_PROG(GENHTML, genhtml)\n AC_PATH_PROG([GIT], [git])\n AC_PATH_PROG(CCACHE,ccache)\n@@ -366,8 +367,15 @@ case $host in\n      TARGET_OS=linux\n      LEVELDB_TARGET_FLAGS=\"-DOS_LINUX\"\n      ;;\n+   *freebsd*)\n+     LEVELDB_TARGET_FLAGS=\"-DOS_FREEBSD\"\n+     ;;\n+   *openbsd*)\n+     LEVELDB_TARGET_FLAGS=\"-DOS_OPENBSD\"\n+     ;;\n    *)\n      OTHER_OS=`echo ${host_os} | awk '{print toupper($0)}'`\n+     AC_MSG_WARN([Guessing LevelDB OS as OS_${OTHER_OS}, please check whether this is correct, if not add an entry to configure.ac.])\n      LEVELDB_TARGET_FLAGS=\"-DOS_${OTHER_OS}\"\n      ;;\n esac"
      }
    ]
  },
  {
    "sha": "32d75a7ffc718eff291978bc8c9406037e327c7e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMmQ3NWE3ZmZjNzE4ZWZmMjkxOTc4YmM4Yzk0MDYwMzdlMzI3Yzdl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-08-26T14:26:09Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-09-07T14:20:09Z"
      },
      "message": "doc: Update build-openbsd for 0.13.0+ and OpenBSD 5.9\n\n- Python 3 now supported.\n\n- Bump boost version to 1.61 - one boost patch no longer needed.\n\n- All checked with OpenBSD 5.9, except for the clang part, I left this\n  as-is for someone adventurous.\n\n- Mention overriding resource limits, OpenBSD's default ulimit does not\n  suffice for building Bitcoin Core with gcc 4.9.3.",
      "tree": {
        "sha": "e98ed8ec7c9164c72db0bfd87044aecc8fc7577e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e98ed8ec7c9164c72db0bfd87044aecc8fc7577e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/32d75a7ffc718eff291978bc8c9406037e327c7e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32d75a7ffc718eff291978bc8c9406037e327c7e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/32d75a7ffc718eff291978bc8c9406037e327c7e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32d75a7ffc718eff291978bc8c9406037e327c7e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b09e13cb6f3ca3b478afc6dea161463247ac5146",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b09e13cb6f3ca3b478afc6dea161463247ac5146",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b09e13cb6f3ca3b478afc6dea161463247ac5146"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 29,
      "deletions": 17
    },
    "files": [
      {
        "sha": "55283d6dcea93c44f2a0b09a232a7a4be133d956",
        "filename": "doc/build-openbsd.md",
        "status": "modified",
        "additions": 29,
        "deletions": 17,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32d75a7ffc718eff291978bc8c9406037e327c7e/doc/build-openbsd.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32d75a7ffc718eff291978bc8c9406037e327c7e/doc/build-openbsd.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-openbsd.md?ref=32d75a7ffc718eff291978bc8c9406037e327c7e",
        "patch": "@@ -1,6 +1,6 @@\n OpenBSD build guide\n ======================\n-(updated for OpenBSD 5.7)\n+(updated for OpenBSD 5.9)\n \n This guide describes how to build bitcoind and command-line utilities on OpenBSD.\n \n@@ -15,19 +15,18 @@ Run the following as root to install the base dependencies for building:\n pkg_add gmake libtool libevent\n pkg_add autoconf # (select highest version, e.g. 2.69)\n pkg_add automake # (select highest version, e.g. 1.15)\n-pkg_add python # (select version 2.7.x, not 3.x)\n-ln -sf /usr/local/bin/python2.7 /usr/local/bin/python2\n+pkg_add python # (select highest version, e.g. 3.5)\n ```\n \n-The default C++ compiler that comes with OpenBSD 5.7 is g++ 4.2. This version is old (from 2007), and is not able to compile the current version of Bitcoin Core. It is possible to patch it up to compile, but with the planned transition to C++11 this is a losing battle. So here we will be installing a newer compiler.\n+The default C++ compiler that comes with OpenBSD 5.9 is g++ 4.2. This version is old (from 2007), and is not able to compile the current version of Bitcoin Core, primarily as it has no C++11 support, but even before there were issues. So here we will be installing a newer compiler.\n \n GCC\n -------\n \n You can install a newer version of gcc with:\n \n ```bash\n-pkg_add g++ # (select newest 4.x version, e.g. 4.9.2)\n+pkg_add g++ # (select newest 4.x version, e.g. 4.9.3)\n ```\n \n This compiler will not overwrite the system compiler, it will be installed as `egcc` and `eg++` in `/usr/local/bin`.\n@@ -49,18 +48,15 @@ BOOST_PREFIX=\"${BITCOIN_ROOT}/boost\"\n mkdir -p $BOOST_PREFIX\n \n # Fetch the source and verify that it is not tampered with\n-wget http://heanet.dl.sourceforge.net/project/boost/boost/1.59.0/boost_1_59_0.tar.bz2\n-echo '727a932322d94287b62abb1bd2d41723eec4356a7728909e38adb65ca25241ca  boost_1_59_0.tar.bz2' | sha256 -c\n-# MUST output: (SHA256) boost_1_59_0.tar.bz2: OK\n-tar -xjf boost_1_59_0.tar.bz2\n+curl -o boost_1_61_0.tar.bz2 http://heanet.dl.sourceforge.net/project/boost/boost/1.61.0/boost_1_61_0.tar.bz2\n+echo 'a547bd06c2fd9a71ba1d169d9cf0339da7ebf4753849a8f7d6fdb8feee99b640  boost_1_61_0.tar.bz2' | sha256 -c\n+# MUST output: (SHA256) boost_1_61_0.tar.bz2: OK\n+tar -xjf boost_1_61_0.tar.bz2\n \n-# Boost 1.59 needs two small patches for OpenBSD\n-cd boost_1_59_0\n+# Boost 1.61 needs one small patch for OpenBSD\n+cd boost_1_61_0\n # Also here: https://gist.githubusercontent.com/laanwj/bf359281dc319b8ff2e1/raw/92250de8404b97bb99d72ab898f4a8cb35ae1ea3/patch-boost_test_impl_execution_monitor_ipp.patch\n patch -p0 < /usr/ports/devel/boost/patches/patch-boost_test_impl_execution_monitor_ipp\n-# https://github.com/boostorg/filesystem/commit/90517e459681790a091566dce27ca3acabf9a70c\n-sed 's/__OPEN_BSD__/__OpenBSD__/g' < libs/filesystem/src/path.cpp > libs/filesystem/src/path.cpp.tmp\n-mv libs/filesystem/src/path.cpp.tmp libs/filesystem/src/path.cpp\n \n # Build w/ minimum configuration necessary for bitcoin\n echo 'using gcc : : eg++ : <cxxflags>\"-fvisibility=hidden -fPIC\" <linkflags>\"\" <archiver>\"ar\" <striper>\"strip\"  <ranlib>\"ranlib\" <rc>\"\" : ;' > user-config.jam\n@@ -84,7 +80,7 @@ BDB_PREFIX=\"${BITCOIN_ROOT}/db4\"\n mkdir -p $BDB_PREFIX\n \n # Fetch the source and verify that it is not tampered with\n-wget 'http://download.oracle.com/berkeley-db/db-4.8.30.NC.tar.gz'\n+curl -o db-4.8.30.NC.tar.gz 'http://download.oracle.com/berkeley-db/db-4.8.30.NC.tar.gz'\n echo '12edc0df75bf9abd7f82f821795bcee50f42cb2e5f76a6a281b85732798364ef  db-4.8.30.NC.tar.gz' | sha256 -c\n # MUST output: (SHA256) db-4.8.30.NC.tar.gz: OK\n tar -xzf db-4.8.30.NC.tar.gz\n@@ -93,9 +89,25 @@ tar -xzf db-4.8.30.NC.tar.gz\n cd db-4.8.30.NC/build_unix/\n #  Note: Do a static build so that it can be embedded into the executable, instead of having to find a .so at runtime\n ../dist/configure --enable-cxx --disable-shared --with-pic --prefix=$BDB_PREFIX CC=egcc CXX=eg++ CPP=ecpp\n-make install\n+make install # do NOT use -jX, this is broken\n ```\n \n+### Resource limits\n+\n+The standard ulimit restrictions in OpenBSD are very strict:\n+\n+    data(kbytes)         1572864\n+\n+This is, unfortunately, no longer enough to compile some `.cpp` files in the project,\n+at least with gcc 4.9.3 (see issue https://github.com/bitcoin/bitcoin/issues/6658).\n+If your user is in the `staff` group the limit can be raised with:\n+\n+    ulimit -d 3000000\n+\n+The change will only affect the current shell and processes spawned by it. To\n+make the change system-wide, change `datasize-cur` and `datasize-max` in\n+`/etc/login.conf`, and reboot.\n+\n ### Building Bitcoin Core\n \n **Important**: use `gmake`, not `make`. The non-GNU `make` will exit with a horrible error.\n@@ -123,7 +135,7 @@ To configure without wallet:\n \n Build and run the tests:\n ```bash\n-gmake\n+gmake # can use -jX here for parallelism\n gmake check\n ```\n "
      }
    ]
  },
  {
    "sha": "a9874310c0f67c80a1f04854c5c9ed154e1bbf97",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOTg3NDMxMGMwZjY3YzgwYTFmMDQ4NTRjNWM5ZWQxNTRlMWJiZjk3",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-06-29T21:38:33Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-09-07T14:20:36Z"
      },
      "message": "[util] CopyrightHolders: Check for untranslated substitution\n\nAlso, remove check which is always true",
      "tree": {
        "sha": "934b8eda67e8e36b9219eae5a56b96258690284c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/934b8eda67e8e36b9219eae5a56b96258690284c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a9874310c0f67c80a1f04854c5c9ed154e1bbf97",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9874310c0f67c80a1f04854c5c9ed154e1bbf97",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a9874310c0f67c80a1f04854c5c9ed154e1bbf97",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9874310c0f67c80a1f04854c5c9ed154e1bbf97/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "32d75a7ffc718eff291978bc8c9406037e327c7e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32d75a7ffc718eff291978bc8c9406037e327c7e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/32d75a7ffc718eff291978bc8c9406037e327c7e"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 4,
      "deletions": 5
    },
    "files": [
      {
        "sha": "ee12f2b4434273d9846671e0942c17b511703a9c",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9874310c0f67c80a1f04854c5c9ed154e1bbf97/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9874310c0f67c80a1f04854c5c9ed154e1bbf97/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=a9874310c0f67c80a1f04854c5c9ed154e1bbf97",
        "patch": "@@ -801,11 +801,10 @@ int GetNumCores()\n \n std::string CopyrightHolders(const std::string& strPrefix)\n {\n-    std::string strCopyrightHolders = strPrefix + _(COPYRIGHT_HOLDERS);\n-    if (strCopyrightHolders.find(\"%s\") != strCopyrightHolders.npos) {\n-        strCopyrightHolders = strprintf(strCopyrightHolders, _(COPYRIGHT_HOLDERS_SUBSTITUTION));\n-    }\n-    if (strCopyrightHolders.find(\"Bitcoin Core developers\") == strCopyrightHolders.npos) {\n+    std::string strCopyrightHolders = strPrefix + strprintf(_(COPYRIGHT_HOLDERS), _(COPYRIGHT_HOLDERS_SUBSTITUTION));\n+\n+    // Check for untranslated substitution to make sure Bitcoin Core copyright is not removed by accident\n+    if (strprintf(COPYRIGHT_HOLDERS, COPYRIGHT_HOLDERS_SUBSTITUTION).find(\"Bitcoin Core\") == std::string::npos) {\n         strCopyrightHolders += \"\\n\" + strPrefix + \"The Bitcoin Core developers\";\n     }\n     return strCopyrightHolders;"
      }
    ]
  },
  {
    "sha": "b8c79a057c48c871a5e48bdcdf600fbfe68f656b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOGM3OWEwNTdjNDhjODcxYTVlNDhiZGNkZjYwMGZiZmU2OGY2NTZi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-08-16T13:35:45Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-09-07T14:42:41Z"
      },
      "message": "Precompute sighashes\n\nOriginal version by Nicolas Dorier. Precomputing version by Pieter Wuille.",
      "tree": {
        "sha": "952520d17bc5e231361bab33489175497ecd4a52",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/952520d17bc5e231361bab33489175497ecd4a52"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b8c79a057c48c871a5e48bdcdf600fbfe68f656b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8c79a057c48c871a5e48bdcdf600fbfe68f656b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b8c79a057c48c871a5e48bdcdf600fbfe68f656b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8c79a057c48c871a5e48bdcdf600fbfe68f656b/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a9874310c0f67c80a1f04854c5c9ed154e1bbf97",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9874310c0f67c80a1f04854c5c9ed154e1bbf97",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a9874310c0f67c80a1f04854c5c9ed154e1bbf97"
      }
    ],
    "stats": {
      "total": 203,
      "additions": 163,
      "deletions": 40
    },
    "files": [
      {
        "sha": "5a9691474f9fa25dd0dd253e455173522ebd027d",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 9,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8c79a057c48c871a5e48bdcdf600fbfe68f656b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8c79a057c48c871a5e48bdcdf600fbfe68f656b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=b8c79a057c48c871a5e48bdcdf600fbfe68f656b",
        "patch": "@@ -1497,12 +1497,13 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n \n         // Check against previous transactions\n         // This is done last to help prevent CPU exhaustion denial-of-service attacks.\n-        if (!CheckInputs(tx, state, view, true, scriptVerifyFlags, true)) {\n+        PrecomputedTransactionData txdata(tx);\n+        if (!CheckInputs(tx, state, view, true, scriptVerifyFlags, true, txdata)) {\n             // SCRIPT_VERIFY_CLEANSTACK requires SCRIPT_VERIFY_WITNESS, so we\n             // need to turn both off, and compare against just turning off CLEANSTACK\n             // to see if the failure is specifically due to witness validation.\n-            if (CheckInputs(tx, state, view, true, scriptVerifyFlags & ~(SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_CLEANSTACK), true) &&\n-                !CheckInputs(tx, state, view, true, scriptVerifyFlags & ~SCRIPT_VERIFY_CLEANSTACK, true)) {\n+            if (CheckInputs(tx, state, view, true, scriptVerifyFlags & ~(SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_CLEANSTACK), true, txdata) &&\n+                !CheckInputs(tx, state, view, true, scriptVerifyFlags & ~SCRIPT_VERIFY_CLEANSTACK, true, txdata)) {\n                 // Only the witness is wrong, so the transaction itself may be fine.\n                 state.SetCorruptionPossible();\n             }\n@@ -1518,7 +1519,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         // There is a similar check in CreateNewBlock() to prevent creating\n         // invalid blocks, however allowing such transactions into the mempool\n         // can be exploited as a DoS attack.\n-        if (!CheckInputs(tx, state, view, true, MANDATORY_SCRIPT_VERIFY_FLAGS, true))\n+        if (!CheckInputs(tx, state, view, true, MANDATORY_SCRIPT_VERIFY_FLAGS, true, txdata))\n         {\n             return error(\"%s: BUG! PLEASE REPORT THIS! ConnectInputs failed against MANDATORY but not STANDARD flags %s, %s\",\n                 __func__, hash.ToString(), FormatStateMessage(state));\n@@ -1915,7 +1916,7 @@ void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, int nHeight)\n bool CScriptCheck::operator()() {\n     const CScript &scriptSig = ptxTo->vin[nIn].scriptSig;\n     const CScriptWitness *witness = (nIn < ptxTo->wit.vtxinwit.size()) ? &ptxTo->wit.vtxinwit[nIn].scriptWitness : NULL;\n-    if (!VerifyScript(scriptSig, scriptPubKey, witness, nFlags, CachingTransactionSignatureChecker(ptxTo, nIn, amount, cacheStore), &error)) {\n+    if (!VerifyScript(scriptSig, scriptPubKey, witness, nFlags, CachingTransactionSignatureChecker(ptxTo, nIn, amount, cacheStore, *txdata), &error)) {\n         return false;\n     }\n     return true;\n@@ -1974,7 +1975,7 @@ bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoins\n }\n }// namespace Consensus\n \n-bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheStore, std::vector<CScriptCheck> *pvChecks)\n+bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheStore, PrecomputedTransactionData& txdata, std::vector<CScriptCheck> *pvChecks)\n {\n     if (!tx.IsCoinBase())\n     {\n@@ -2001,7 +2002,7 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n                 assert(coins);\n \n                 // Verify signature\n-                CScriptCheck check(*coins, tx, i, flags, cacheStore);\n+                CScriptCheck check(*coins, tx, i, flags, cacheStore, &txdata);\n                 if (pvChecks) {\n                     pvChecks->push_back(CScriptCheck());\n                     check.swap(pvChecks->back());\n@@ -2014,7 +2015,7 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n                         // avoid splitting the network between upgraded and\n                         // non-upgraded nodes.\n                         CScriptCheck check2(*coins, tx, i,\n-                                flags & ~STANDARD_NOT_MANDATORY_VERIFY_FLAGS, cacheStore);\n+                                flags & ~STANDARD_NOT_MANDATORY_VERIFY_FLAGS, cacheStore, &txdata);\n                         if (check2())\n                             return state.Invalid(false, REJECT_NONSTANDARD, strprintf(\"non-mandatory-script-verify-flag (%s)\", ScriptErrorString(check.GetScriptError())));\n                     }\n@@ -2412,6 +2413,8 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     std::vector<std::pair<uint256, CDiskTxPos> > vPos;\n     vPos.reserve(block.vtx.size());\n     blockundo.vtxundo.reserve(block.vtx.size() - 1);\n+    std::vector<PrecomputedTransactionData> txdata;\n+    txdata.reserve(block.vtx.size()); // Required so that pointers to individual PrecomputedTransactionData don't get invalidated\n     for (unsigned int i = 0; i < block.vtx.size(); i++)\n     {\n         const CTransaction &tx = block.vtx[i];\n@@ -2458,13 +2461,14 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n             return state.DoS(100, error(\"ConnectBlock(): too many sigops\"),\n                              REJECT_INVALID, \"bad-blk-sigops\");\n \n+        txdata.emplace_back(tx);\n         if (!tx.IsCoinBase())\n         {\n             nFees += view.GetValueIn(tx)-tx.GetValueOut();\n \n             std::vector<CScriptCheck> vChecks;\n             bool fCacheResults = fJustCheck; /* Don't cache results if we're actually connecting blocks (still consult the cache, though) */\n-            if (!CheckInputs(tx, state, view, fScriptChecks, flags, fCacheResults, nScriptCheckThreads ? &vChecks : NULL))\n+            if (!CheckInputs(tx, state, view, fScriptChecks, flags, fCacheResults, txdata[i], nScriptCheckThreads ? &vChecks : NULL))\n                 return error(\"ConnectBlock(): CheckInputs on %s failed with %s\",\n                     tx.GetHash().ToString(), FormatStateMessage(state));\n             control.Add(vChecks);"
      },
      {
        "sha": "cbce34290a257235033931d05fe51f9874aa46c7",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8c79a057c48c871a5e48bdcdf600fbfe68f656b/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8c79a057c48c871a5e48bdcdf600fbfe68f656b/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=b8c79a057c48c871a5e48bdcdf600fbfe68f656b",
        "patch": "@@ -39,6 +39,7 @@ class CTxMemPool;\n class CValidationInterface;\n class CValidationState;\n \n+struct PrecomputedTransactionData;\n struct CNodeStateStats;\n struct LockPoints;\n \n@@ -347,7 +348,7 @@ int64_t GetTransactionSigOpCost(const CTransaction& tx, const CCoinsViewCache& i\n  * instead of being performed inline.\n  */\n bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &view, bool fScriptChecks,\n-                 unsigned int flags, bool cacheStore, std::vector<CScriptCheck> *pvChecks = NULL);\n+                 unsigned int flags, bool cacheStore, PrecomputedTransactionData& txdata, std::vector<CScriptCheck> *pvChecks = NULL);\n \n /** Apply the effects of this transaction on the UTXO set represented by view */\n void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, int nHeight);\n@@ -408,12 +409,13 @@ class CScriptCheck\n     unsigned int nFlags;\n     bool cacheStore;\n     ScriptError error;\n+    PrecomputedTransactionData *txdata;\n \n public:\n     CScriptCheck(): amount(0), ptxTo(0), nIn(0), nFlags(0), cacheStore(false), error(SCRIPT_ERR_UNKNOWN_ERROR) {}\n-    CScriptCheck(const CCoins& txFromIn, const CTransaction& txToIn, unsigned int nInIn, unsigned int nFlagsIn, bool cacheIn) :\n+    CScriptCheck(const CCoins& txFromIn, const CTransaction& txToIn, unsigned int nInIn, unsigned int nFlagsIn, bool cacheIn, PrecomputedTransactionData* txdataIn) :\n         scriptPubKey(txFromIn.vout[txToIn.vin[nInIn].prevout.n].scriptPubKey), amount(txFromIn.vout[txToIn.vin[nInIn].prevout.n].nValue),\n-        ptxTo(&txToIn), nIn(nInIn), nFlags(nFlagsIn), cacheStore(cacheIn), error(SCRIPT_ERR_UNKNOWN_ERROR) { }\n+        ptxTo(&txToIn), nIn(nInIn), nFlags(nFlagsIn), cacheStore(cacheIn), error(SCRIPT_ERR_UNKNOWN_ERROR), txdata(txdataIn) { }\n \n     bool operator()();\n \n@@ -425,6 +427,7 @@ class CScriptCheck\n         std::swap(nFlags, check.nFlags);\n         std::swap(cacheStore, check.cacheStore);\n         std::swap(error, check.error);\n+        std::swap(txdata, check.txdata);\n     }\n \n     ScriptError GetScriptError() const { return error; }"
      },
      {
        "sha": "b629f4278ba203df893280de5dff6be51c4718ba",
        "filename": "src/script/bitcoinconsensus.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8c79a057c48c871a5e48bdcdf600fbfe68f656b/src/script/bitcoinconsensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8c79a057c48c871a5e48bdcdf600fbfe68f656b/src/script/bitcoinconsensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.cpp?ref=b8c79a057c48c871a5e48bdcdf600fbfe68f656b",
        "patch": "@@ -84,8 +84,8 @@ static int verify_script(const unsigned char *scriptPubKey, unsigned int scriptP\n \n         // Regardless of the verification result, the tx did not error.\n         set_error(err, bitcoinconsensus_ERR_OK);\n-\n-        return VerifyScript(tx.vin[nIn].scriptSig, CScript(scriptPubKey, scriptPubKey + scriptPubKeyLen), nIn < tx.wit.vtxinwit.size() ? &tx.wit.vtxinwit[nIn].scriptWitness : NULL, flags, TransactionSignatureChecker(&tx, nIn, amount), NULL);\n+        PrecomputedTransactionData txdata(tx);\n+        return VerifyScript(tx.vin[nIn].scriptSig, CScript(scriptPubKey, scriptPubKey + scriptPubKeyLen), nIn < tx.wit.vtxinwit.size() ? &tx.wit.vtxinwit[nIn].scriptWitness : NULL, flags, TransactionSignatureChecker(&tx, nIn, amount, txdata), NULL);\n     } catch (const std::exception&) {\n         return set_error(err, bitcoinconsensus_ERR_TX_DESERIALIZE); // Error deserializing\n     }"
      },
      {
        "sha": "47ea261e31040b70fc0d5ade24ced48d67bd1773",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 17,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8c79a057c48c871a5e48bdcdf600fbfe68f656b/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8c79a057c48c871a5e48bdcdf600fbfe68f656b/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=b8c79a057c48c871a5e48bdcdf600fbfe68f656b",
        "patch": "@@ -1108,37 +1108,57 @@ class CTransactionSignatureSerializer {\n     }\n };\n \n+uint256 GetPrevoutHash(const CTransaction& txTo) {\n+    CHashWriter ss(SER_GETHASH, 0);\n+    for (unsigned int n = 0; n < txTo.vin.size(); n++) {\n+        ss << txTo.vin[n].prevout;\n+    }\n+    return ss.GetHash();\n+}\n+\n+uint256 GetSequenceHash(const CTransaction& txTo) {\n+    CHashWriter ss(SER_GETHASH, 0);\n+    for (unsigned int n = 0; n < txTo.vin.size(); n++) {\n+        ss << txTo.vin[n].nSequence;\n+    }\n+    return ss.GetHash();\n+}\n+\n+uint256 GetOutputsHash(const CTransaction& txTo) {\n+    CHashWriter ss(SER_GETHASH, 0);\n+    for (unsigned int n = 0; n < txTo.vout.size(); n++) {\n+        ss << txTo.vout[n];\n+    }\n+    return ss.GetHash();\n+}\n+\n } // anon namespace\n \n-uint256 SignatureHash(const CScript& scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType, const CAmount& amount, SigVersion sigversion)\n+PrecomputedTransactionData::PrecomputedTransactionData(const CTransaction& txTo)\n+{\n+    hashPrevouts = GetPrevoutHash(txTo);\n+    hashSequence = GetSequenceHash(txTo);\n+    hashOutputs = GetOutputsHash(txTo);\n+}\n+\n+uint256 SignatureHash(const CScript& scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType, const CAmount& amount, SigVersion sigversion, const PrecomputedTransactionData* cache)\n {\n     if (sigversion == SIGVERSION_WITNESS_V0) {\n         uint256 hashPrevouts;\n         uint256 hashSequence;\n         uint256 hashOutputs;\n \n         if (!(nHashType & SIGHASH_ANYONECANPAY)) {\n-            CHashWriter ss(SER_GETHASH, 0);\n-            for (unsigned int n = 0; n < txTo.vin.size(); n++) {\n-                ss << txTo.vin[n].prevout;\n-            }\n-            hashPrevouts = ss.GetHash(); // TODO: cache this value for all signatures in a transaction\n+            hashPrevouts = cache ? cache->hashPrevouts : GetPrevoutHash(txTo);\n         }\n \n         if (!(nHashType & SIGHASH_ANYONECANPAY) && (nHashType & 0x1f) != SIGHASH_SINGLE && (nHashType & 0x1f) != SIGHASH_NONE) {\n-            CHashWriter ss(SER_GETHASH, 0);\n-            for (unsigned int n = 0; n < txTo.vin.size(); n++) {\n-                ss << txTo.vin[n].nSequence;\n-            }\n-            hashSequence = ss.GetHash(); // TODO: cache this value for all signatures in a transaction\n+            hashSequence = cache ? cache->hashSequence : GetSequenceHash(txTo);\n         }\n \n+\n         if ((nHashType & 0x1f) != SIGHASH_SINGLE && (nHashType & 0x1f) != SIGHASH_NONE) {\n-            CHashWriter ss(SER_GETHASH, 0);\n-            for (unsigned int n = 0; n < txTo.vout.size(); n++) {\n-                ss << txTo.vout[n];\n-            }\n-            hashOutputs = ss.GetHash(); // TODO: cache this value for all signatures in a transaction\n+            hashOutputs = cache ? cache->hashOutputs : GetOutputsHash(txTo);\n         } else if ((nHashType & 0x1f) == SIGHASH_SINGLE && nIn < txTo.vout.size()) {\n             CHashWriter ss(SER_GETHASH, 0);\n             ss << txTo.vout[nIn];\n@@ -1209,7 +1229,7 @@ bool TransactionSignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn\n     int nHashType = vchSig.back();\n     vchSig.pop_back();\n \n-    uint256 sighash = SignatureHash(scriptCode, *txTo, nIn, nHashType, amount, sigversion);\n+    uint256 sighash = SignatureHash(scriptCode, *txTo, nIn, nHashType, amount, sigversion, this->txdata);\n \n     if (!VerifySignature(vchSig, pubkey, sighash))\n         return false;"
      },
      {
        "sha": "e5d7865cd3de62d495ba382fc5485b488262260d",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 11,
        "deletions": 2,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8c79a057c48c871a5e48bdcdf600fbfe68f656b/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8c79a057c48c871a5e48bdcdf600fbfe68f656b/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=b8c79a057c48c871a5e48bdcdf600fbfe68f656b",
        "patch": "@@ -98,13 +98,20 @@ enum\n \n bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror);\n \n+struct PrecomputedTransactionData\n+{\n+    uint256 hashPrevouts, hashSequence, hashOutputs;\n+\n+    PrecomputedTransactionData(const CTransaction& tx);\n+};\n+\n enum SigVersion\n {\n     SIGVERSION_BASE = 0,\n     SIGVERSION_WITNESS_V0 = 1,\n };\n \n-uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType, const CAmount& amount, SigVersion sigversion);\n+uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType, const CAmount& amount, SigVersion sigversion, const PrecomputedTransactionData* cache = NULL);\n \n class BaseSignatureChecker\n {\n@@ -133,12 +140,14 @@ class TransactionSignatureChecker : public BaseSignatureChecker\n     const CTransaction* txTo;\n     unsigned int nIn;\n     const CAmount amount;\n+    const PrecomputedTransactionData* txdata;\n \n protected:\n     virtual bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const;\n \n public:\n-    TransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn) : txTo(txToIn), nIn(nInIn), amount(amountIn) {}\n+    TransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn) : txTo(txToIn), nIn(nInIn), amount(amountIn), txdata(NULL) {}\n+    TransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, const PrecomputedTransactionData& txdataIn) : txTo(txToIn), nIn(nInIn), amount(amountIn), txdata(&txdataIn) {}\n     bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const;\n     bool CheckLockTime(const CScriptNum& nLockTime) const;\n     bool CheckSequence(const CScriptNum& nSequence) const;"
      },
      {
        "sha": "44551ec2bc435b7ca746e8d63c1eb1073a2cbc77",
        "filename": "src/script/sigcache.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8c79a057c48c871a5e48bdcdf600fbfe68f656b/src/script/sigcache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8c79a057c48c871a5e48bdcdf600fbfe68f656b/src/script/sigcache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.h?ref=b8c79a057c48c871a5e48bdcdf600fbfe68f656b",
        "patch": "@@ -22,7 +22,7 @@ class CachingTransactionSignatureChecker : public TransactionSignatureChecker\n     bool store;\n \n public:\n-    CachingTransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, const CAmount& amount, bool storeIn) : TransactionSignatureChecker(txToIn, nInIn, amount), store(storeIn) {}\n+    CachingTransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, const CAmount& amount, bool storeIn, PrecomputedTransactionData& txdataIn) : TransactionSignatureChecker(txToIn, nInIn, amount, txdataIn), store(storeIn) {}\n \n     bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const;\n };"
      },
      {
        "sha": "1a01593a8e16339c759d39cfe2882088e22f1f95",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8c79a057c48c871a5e48bdcdf600fbfe68f656b/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8c79a057c48c871a5e48bdcdf600fbfe68f656b/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=b8c79a057c48c871a5e48bdcdf600fbfe68f656b",
        "patch": "@@ -107,18 +107,20 @@ BOOST_AUTO_TEST_CASE(sign)\n     }\n     // All of the above should be OK, and the txTos have valid signatures\n     // Check to make sure signature verification fails if we use the wrong ScriptSig:\n-    for (int i = 0; i < 8; i++)\n+    for (int i = 0; i < 8; i++) {\n+        PrecomputedTransactionData txdata(txTo[i]);\n         for (int j = 0; j < 8; j++)\n         {\n             CScript sigSave = txTo[i].vin[0].scriptSig;\n             txTo[i].vin[0].scriptSig = txTo[j].vin[0].scriptSig;\n-            bool sigOK = CScriptCheck(CCoins(txFrom, 0), txTo[i], 0, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC, false)();\n+            bool sigOK = CScriptCheck(CCoins(txFrom, 0), txTo[i], 0, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC, false, &txdata)();\n             if (i == j)\n                 BOOST_CHECK_MESSAGE(sigOK, strprintf(\"VerifySignature %d %d\", i, j));\n             else\n                 BOOST_CHECK_MESSAGE(!sigOK, strprintf(\"VerifySignature %d %d\", i, j));\n             txTo[i].vin[0].scriptSig = sigSave;\n         }\n+    }\n }\n \n BOOST_AUTO_TEST_CASE(norecurse)"
      },
      {
        "sha": "b5af400bc54b5544320efaed33b6a667a5b01e49",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 85,
        "deletions": 2,
        "changes": 87,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8c79a057c48c871a5e48bdcdf600fbfe68f656b/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8c79a057c48c871a5e48bdcdf600fbfe68f656b/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=b8c79a057c48c871a5e48bdcdf600fbfe68f656b",
        "patch": "@@ -7,6 +7,7 @@\n #include \"test/test_bitcoin.h\"\n \n #include \"clientversion.h\"\n+#include \"checkqueue.h\"\n #include \"consensus/validation.h\"\n #include \"core_io.h\"\n #include \"key.h\"\n@@ -153,6 +154,7 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n             BOOST_CHECK_MESSAGE(CheckTransaction(tx, state), strTest);\n             BOOST_CHECK(state.IsValid());\n \n+            PrecomputedTransactionData txdata(tx);\n             for (unsigned int i = 0; i < tx.vin.size(); i++)\n             {\n                 if (!mapprevOutScriptPubKeys.count(tx.vin[i].prevout))\n@@ -168,7 +170,7 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n                 unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n                 const CScriptWitness *witness = (i < tx.wit.vtxinwit.size()) ? &tx.wit.vtxinwit[i].scriptWitness : NULL;\n                 BOOST_CHECK_MESSAGE(VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                                 witness, verify_flags, TransactionSignatureChecker(&tx, i, amount), &err),\n+                                                 witness, verify_flags, TransactionSignatureChecker(&tx, i, amount, txdata), &err),\n                                     strTest);\n                 BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n             }\n@@ -237,6 +239,7 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n             CValidationState state;\n             fValid = CheckTransaction(tx, state) && state.IsValid();\n \n+            PrecomputedTransactionData txdata(tx);\n             for (unsigned int i = 0; i < tx.vin.size() && fValid; i++)\n             {\n                 if (!mapprevOutScriptPubKeys.count(tx.vin[i].prevout))\n@@ -252,7 +255,7 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n                 }\n                 const CScriptWitness *witness = (i < tx.wit.vtxinwit.size()) ? &tx.wit.vtxinwit[i].scriptWitness : NULL;\n                 fValid = VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                      witness, verify_flags, TransactionSignatureChecker(&tx, i, amount), &err);\n+                                      witness, verify_flags, TransactionSignatureChecker(&tx, i, amount, txdata), &err);\n             }\n             BOOST_CHECK_MESSAGE(!fValid, strTest);\n             BOOST_CHECK_MESSAGE(err != SCRIPT_ERR_OK, ScriptErrorString(err));\n@@ -419,6 +422,86 @@ void ReplaceRedeemScript(CScript& script, const CScript& redeemScript)\n     script = PushAll(stack);\n }\n \n+BOOST_AUTO_TEST_CASE(test_big_witness_transaction) {\n+    CMutableTransaction mtx;\n+    mtx.nVersion = 1;\n+\n+    CKey key;\n+    key.MakeNewKey(false);\n+    CBasicKeyStore keystore;\n+    keystore.AddKeyPubKey(key, key.GetPubKey());\n+    CKeyID hash = key.GetPubKey().GetID();\n+    CScript scriptPubKey = CScript() << OP_0 << std::vector<unsigned char>(hash.begin(), hash.end());\n+\n+    vector<int> sigHashes;\n+    sigHashes.push_back(SIGHASH_NONE | SIGHASH_ANYONECANPAY);\n+    sigHashes.push_back(SIGHASH_SINGLE | SIGHASH_ANYONECANPAY);\n+    sigHashes.push_back(SIGHASH_ALL | SIGHASH_ANYONECANPAY);\n+    sigHashes.push_back(SIGHASH_NONE);\n+    sigHashes.push_back(SIGHASH_SINGLE);\n+    sigHashes.push_back(SIGHASH_ALL);\n+\n+    // create a big transaction of 4500 inputs signed by the same key\n+    for(uint32_t ij = 0; ij < 4500; ij++) {\n+        uint32_t i = mtx.vin.size();\n+        uint256 prevId;\n+        prevId.SetHex(\"0000000000000000000000000000000000000000000000000000000000000100\");\n+        COutPoint outpoint(prevId, i);\n+\n+        mtx.vin.resize(mtx.vin.size() + 1);\n+        mtx.vin[i].prevout = outpoint;\n+        mtx.vin[i].scriptSig = CScript();\n+\n+        mtx.vout.resize(mtx.vout.size() + 1);\n+        mtx.vout[i].nValue = 1000;\n+        mtx.vout[i].scriptPubKey = CScript() << OP_1;\n+    }\n+\n+    // sign all inputs\n+    for(uint32_t i = 0; i < mtx.vin.size(); i++) {\n+        bool hashSigned = SignSignature(keystore, scriptPubKey, mtx, i, 1000, sigHashes.at(i % sigHashes.size()));\n+        assert(hashSigned);\n+    }\n+\n+    CTransaction tx;\n+    CDataStream ssout(SER_NETWORK, PROTOCOL_VERSION);\n+    WithOrVersion(&ssout, 0) << mtx;\n+    WithOrVersion(&ssout, 0) >> tx;\n+\n+    // check all inputs concurrently, with the cache\n+    PrecomputedTransactionData txdata(tx);\n+    boost::thread_group threadGroup;\n+    CCheckQueue<CScriptCheck> scriptcheckqueue(128);\n+    CCheckQueueControl<CScriptCheck> control(&scriptcheckqueue);\n+\n+    for (int i=0; i<20; i++)\n+        threadGroup.create_thread(boost::bind(&CCheckQueue<CScriptCheck>::Thread, boost::ref(scriptcheckqueue)));\n+\n+    CCoins coins;\n+    coins.nVersion = 1;\n+    coins.fCoinBase = false;\n+    for(uint32_t i = 0; i < mtx.vin.size(); i++) {\n+        CTxOut txout;\n+        txout.nValue = 1000;\n+        txout.scriptPubKey = scriptPubKey;\n+        coins.vout.push_back(txout);\n+    }\n+\n+    for(uint32_t i = 0; i < mtx.vin.size(); i++) {\n+        std::vector<CScriptCheck> vChecks;\n+        CScriptCheck check(coins, tx, i, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, false, &txdata);\n+        vChecks.push_back(CScriptCheck());\n+        check.swap(vChecks.back());\n+        control.Add(vChecks);\n+    }\n+\n+    bool controlCheck = control.Wait();\n+    assert(controlCheck);\n+\n+    threadGroup.interrupt_all();\n+    threadGroup.join_all();\n+}\n+\n BOOST_AUTO_TEST_CASE(test_witness)\n {\n     CBasicKeyStore keystore, keystore2;"
      },
      {
        "sha": "8b974d7312491dcd36139979681ca2dc82976db3",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8c79a057c48c871a5e48bdcdf600fbfe68f656b/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8c79a057c48c871a5e48bdcdf600fbfe68f656b/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=b8c79a057c48c871a5e48bdcdf600fbfe68f656b",
        "patch": "@@ -737,7 +737,8 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n             waitingOnDependants.push_back(&(*it));\n         else {\n             CValidationState state;\n-            assert(CheckInputs(tx, state, mempoolDuplicate, false, 0, false, NULL));\n+            PrecomputedTransactionData txdata(tx);\n+            assert(CheckInputs(tx, state, mempoolDuplicate, false, 0, false, txdata, NULL));\n             UpdateCoins(tx, mempoolDuplicate, 1000000);\n         }\n     }\n@@ -751,7 +752,8 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n             stepsSinceLastRemove++;\n             assert(stepsSinceLastRemove < waitingOnDependants.size());\n         } else {\n-            assert(CheckInputs(entry->GetTx(), state, mempoolDuplicate, false, 0, false, NULL));\n+            PrecomputedTransactionData txdata(entry->GetTx());\n+            assert(CheckInputs(entry->GetTx(), state, mempoolDuplicate, false, 0, false, txdata, NULL));\n             UpdateCoins(entry->GetTx(), mempoolDuplicate, 1000000);\n             stepsSinceLastRemove = 0;\n         }"
      }
    ]
  },
  {
    "sha": "2215c22a00116d210dcfd95d3369035a8d2fd6c2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMjE1YzIyYTAwMTE2ZDIxMGRjZmQ5NWQzMzY5MDM1YThkMmZkNmMy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-08-26T19:44:44Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-09-07T14:42:42Z"
      },
      "message": "Check for compatibility with download in FindNextBlocksToDownload",
      "tree": {
        "sha": "b5938a0c32c5c894f2457a95d0364f3d2cc44e72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b5938a0c32c5c894f2457a95d0364f3d2cc44e72"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2215c22a00116d210dcfd95d3369035a8d2fd6c2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2215c22a00116d210dcfd95d3369035a8d2fd6c2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2215c22a00116d210dcfd95d3369035a8d2fd6c2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2215c22a00116d210dcfd95d3369035a8d2fd6c2/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b8c79a057c48c871a5e48bdcdf600fbfe68f656b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8c79a057c48c871a5e48bdcdf600fbfe68f656b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b8c79a057c48c871a5e48bdcdf600fbfe68f656b"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 11,
      "deletions": 9
    },
    "files": [
      {
        "sha": "6a82f3d190a6a7333498e20f18f33abff5d30daa",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 9,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2215c22a00116d210dcfd95d3369035a8d2fd6c2/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2215c22a00116d210dcfd95d3369035a8d2fd6c2/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=2215c22a00116d210dcfd95d3369035a8d2fd6c2",
        "patch": "@@ -537,7 +537,7 @@ CBlockIndex* LastCommonAncestor(CBlockIndex* pa, CBlockIndex* pb) {\n \n /** Update pindexLastCommonBlock and add not-in-flight missing successors to vBlocks, until it has\n  *  at most count entries. */\n-void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<CBlockIndex*>& vBlocks, NodeId& nodeStaller) {\n+void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<CBlockIndex*>& vBlocks, NodeId& nodeStaller, const Consensus::Params& consensusParams) {\n     if (count == 0)\n         return;\n \n@@ -594,6 +594,10 @@ void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<CBl\n                 // We consider the chain that this peer is on invalid.\n                 return;\n             }\n+            if (!State(nodeid)->fHaveWitness && IsWitnessEnabled(pindex->pprev, consensusParams)) {\n+                // We wouldn't download this block or its descendants from this peer.\n+                return;\n+            }\n             if (pindex->nStatus & BLOCK_HAVE_DATA || chainActive.Contains(pindex)) {\n                 if (pindex->nChainTx)\n                     state->pindexLastCommonBlock = pindex;\n@@ -6726,15 +6730,13 @@ bool SendMessages(CNode* pto)\n         if (!pto->fDisconnect && !pto->fClient && (fFetch || !IsInitialBlockDownload()) && state.nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n             vector<CBlockIndex*> vToDownload;\n             NodeId staller = -1;\n-            FindNextBlocksToDownload(pto->GetId(), MAX_BLOCKS_IN_TRANSIT_PER_PEER - state.nBlocksInFlight, vToDownload, staller);\n+            FindNextBlocksToDownload(pto->GetId(), MAX_BLOCKS_IN_TRANSIT_PER_PEER - state.nBlocksInFlight, vToDownload, staller, consensusParams);\n             BOOST_FOREACH(CBlockIndex *pindex, vToDownload) {\n-                if (State(pto->GetId())->fHaveWitness || !IsWitnessEnabled(pindex->pprev, consensusParams)) {\n-                    uint32_t nFetchFlags = GetFetchFlags(pto, pindex->pprev, consensusParams);\n-                    vGetData.push_back(CInv(MSG_BLOCK | nFetchFlags, pindex->GetBlockHash()));\n-                    MarkBlockAsInFlight(pto->GetId(), pindex->GetBlockHash(), consensusParams, pindex);\n-                    LogPrint(\"net\", \"Requesting block %s (%d) peer=%d\\n\", pindex->GetBlockHash().ToString(),\n-                        pindex->nHeight, pto->id);\n-                }\n+                uint32_t nFetchFlags = GetFetchFlags(pto, pindex->pprev, consensusParams);\n+                vGetData.push_back(CInv(MSG_BLOCK | nFetchFlags, pindex->GetBlockHash()));\n+                MarkBlockAsInFlight(pto->GetId(), pindex->GetBlockHash(), consensusParams, pindex);\n+                LogPrint(\"net\", \"Requesting block %s (%d) peer=%d\\n\", pindex->GetBlockHash().ToString(),\n+                    pindex->nHeight, pto->id);\n             }\n             if (state.nBlocksInFlight == 0 && staller != -1) {\n                 if (State(staller)->nStallingSince == 0) {"
      }
    ]
  },
  {
    "sha": "bbf379b0552c357088e349dd6608730489696b80",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYmYzNzliMDU1MmMzNTcwODhlMzQ5ZGQ2NjA4NzMwNDg5Njk2Yjgw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-08-26T19:07:05Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-09-07T14:42:42Z"
      },
      "message": "Fix some locks\n\nThis makes sure that cs_filter is never held while taking cs_main\nor CNode::cs_vSend.",
      "tree": {
        "sha": "390cf3eacbc0b81b6deeea2c9bbcc72dfbc54be8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/390cf3eacbc0b81b6deeea2c9bbcc72dfbc54be8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bbf379b0552c357088e349dd6608730489696b80",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbf379b0552c357088e349dd6608730489696b80",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bbf379b0552c357088e349dd6608730489696b80",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbf379b0552c357088e349dd6608730489696b80/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2215c22a00116d210dcfd95d3369035a8d2fd6c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2215c22a00116d210dcfd95d3369035a8d2fd6c2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2215c22a00116d210dcfd95d3369035a8d2fd6c2"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 21,
      "deletions": 15
    },
    "files": [
      {
        "sha": "0b8588efa7f7af3f5f2eb982cc108b9580225381",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 15,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbf379b0552c357088e349dd6608730489696b80/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbf379b0552c357088e349dd6608730489696b80/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=bbf379b0552c357088e349dd6608730489696b80",
        "patch": "@@ -4803,10 +4803,16 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                         pfrom->PushMessage(NetMsgType::BLOCK, block);\n                     else if (inv.type == MSG_FILTERED_BLOCK)\n                     {\n-                        LOCK(pfrom->cs_filter);\n-                        if (pfrom->pfilter)\n+                        bool send = false;\n+                        CMerkleBlock merkleBlock;\n                         {\n-                            CMerkleBlock merkleBlock(block, *pfrom->pfilter);\n+                            LOCK(pfrom->cs_filter);\n+                            if (pfrom->pfilter) {\n+                                send = true;\n+                                merkleBlock = CMerkleBlock(block, *pfrom->pfilter);\n+                            }\n+                        }\n+                        if (send) {\n                             pfrom->PushMessage(NetMsgType::MERKLEBLOCK, merkleBlock);\n                             // CMerkleBlock just contains hashes, so also push any transactions in the block the client did not see\n                             // This avoids hurting performance by pointlessly requiring a round-trip\n@@ -6074,8 +6080,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         CBloomFilter filter;\n         vRecv >> filter;\n \n-        LOCK(pfrom->cs_filter);\n-\n         if (!filter.IsWithinSizeConstraints())\n         {\n             // There is no excuse for sending a too-large filter\n@@ -6084,11 +6088,12 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         }\n         else\n         {\n+            LOCK(pfrom->cs_filter);\n             delete pfrom->pfilter;\n             pfrom->pfilter = new CBloomFilter(filter);\n             pfrom->pfilter->UpdateEmptyFull();\n+            pfrom->fRelayTxes = true;\n         }\n-        pfrom->fRelayTxes = true;\n     }\n \n \n@@ -6099,20 +6104,21 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n         // Nodes must NEVER send a data item > 520 bytes (the max size for a script data object,\n         // and thus, the maximum size any matched object can have) in a filteradd message\n-        if (vData.size() > MAX_SCRIPT_ELEMENT_SIZE)\n-        {\n-            LOCK(cs_main);\n-            Misbehaving(pfrom->GetId(), 100);\n+        bool bad = false;\n+        if (vData.size() > MAX_SCRIPT_ELEMENT_SIZE) {\n+            bad = true;\n         } else {\n             LOCK(pfrom->cs_filter);\n-            if (pfrom->pfilter)\n+            if (pfrom->pfilter) {\n                 pfrom->pfilter->insert(vData);\n-            else\n-            {\n-                LOCK(cs_main);\n-                Misbehaving(pfrom->GetId(), 100);\n+            } else {\n+                bad = true;\n             }\n         }\n+        if (bad) {\n+            LOCK(cs_main);\n+            Misbehaving(pfrom->GetId(), 100);\n+        }\n     }\n \n "
      }
    ]
  },
  {
    "sha": "ab295bb4be26939e4853b9d95a9938c5ed8afa57",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYjI5NWJiNGJlMjY5MzllNDg1M2I5ZDk1YTk5MzhjNWVkOGFmYTU3",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2016-08-25T23:42:40Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-09-07T14:43:15Z"
      },
      "message": "Do not add random inbound peers to addrman.\n\nWe should learn about new peers via address messages.\n\nAn inbound peer connecting to us tells us nothing about\n its ability to accept incoming connections from us, so\n we shouldn't assume that we can connect to it based on\n this.\n\nThe vast majority of nodes on the network do not accept\n incoming connections, adding them will only slow down\n the process of making a successful connection in the\n future.\n\nNodes which have configured themselves to not announce would prefer we\n not violate their privacy by announcing them in GETADDR responses.",
      "tree": {
        "sha": "861f93ead65ebe327b08cade32222496a7d1664a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/861f93ead65ebe327b08cade32222496a7d1664a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ab295bb4be26939e4853b9d95a9938c5ed8afa57",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab295bb4be26939e4853b9d95a9938c5ed8afa57",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ab295bb4be26939e4853b9d95a9938c5ed8afa57",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab295bb4be26939e4853b9d95a9938c5ed8afa57/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bbf379b0552c357088e349dd6608730489696b80",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbf379b0552c357088e349dd6608730489696b80",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bbf379b0552c357088e349dd6608730489696b80"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 0,
      "deletions": 6
    },
    "files": [
      {
        "sha": "40f2fffe7300c2084d13adfc81ce57d53e763295",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab295bb4be26939e4853b9d95a9938c5ed8afa57/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab295bb4be26939e4853b9d95a9938c5ed8afa57/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ab295bb4be26939e4853b9d95a9938c5ed8afa57",
        "patch": "@@ -5057,12 +5057,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 pfrom->fGetAddr = true;\n             }\n             addrman.Good(pfrom->addr);\n-        } else {\n-            if (((CNetAddr)pfrom->addr) == (CNetAddr)addrFrom)\n-            {\n-                addrman.Add(addrFrom, addrFrom);\n-                addrman.Good(addrFrom);\n-            }\n         }\n \n         pfrom->fSuccessfullyConnected = true;"
      }
    ]
  }
]