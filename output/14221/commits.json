[
  {
    "sha": "2d5c345507208d215c0621180305a9f1d363012a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZDVjMzQ1NTA3MjA4ZDIxNWMwNjIxMTgwMzA1YTlmMWQzNjMwMTJh",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2018-09-04T15:07:15Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2018-09-10T22:22:55Z"
      },
      "message": "Move DisconnectNodes logic to private method.",
      "tree": {
        "sha": "2458c2ac8dc07b61653915b5933e3993346c95b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2458c2ac8dc07b61653915b5933e3993346c95b7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2d5c345507208d215c0621180305a9f1d363012a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d5c345507208d215c0621180305a9f1d363012a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2d5c345507208d215c0621180305a9f1d363012a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d5c345507208d215c0621180305a9f1d363012a/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2f7ae35ce8cf5d681de8e41a2f7c0f623fa71fc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f7ae35ce8cf5d681de8e41a2f7c0f623fa71fc5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2f7ae35ce8cf5d681de8e41a2f7c0f623fa71fc5"
      }
    ],
    "stats": {
      "total": 120,
      "additions": 62,
      "deletions": 58
    },
    "files": [
      {
        "sha": "44386ceaa281fbd93ef87b0f41b2170085fd356a",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 61,
        "deletions": 58,
        "changes": 119,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d5c345507208d215c0621180305a9f1d363012a/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d5c345507208d215c0621180305a9f1d363012a/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=2d5c345507208d215c0621180305a9f1d363012a",
        "patch": "@@ -1153,82 +1153,74 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     }\n }\n \n-void CConnman::ThreadSocketHandler()\n+void CConnman::DisconnectNodes()\n {\n-    unsigned int nPrevNodeCount = 0;\n-    while (!interruptNet)\n     {\n-        //\n-        // Disconnect nodes\n-        //\n-        {\n-            LOCK(cs_vNodes);\n+        LOCK(cs_vNodes);\n \n-            if (!fNetworkActive) {\n-                // Disconnect any connected nodes\n-                for (CNode* pnode : vNodes) {\n-                    if (!pnode->fDisconnect) {\n-                        LogPrint(BCLog::NET, \"Network not active, dropping peer=%d\\n\", pnode->GetId());\n-                        pnode->fDisconnect = true;\n-                    }\n+        if (!fNetworkActive) {\n+            // Disconnect any connected nodes\n+            for (CNode* pnode : vNodes) {\n+                if (!pnode->fDisconnect) {\n+                    LogPrint(BCLog::NET, \"Network not active, dropping peer=%d\\n\", pnode->GetId());\n+                    pnode->fDisconnect = true;\n                 }\n             }\n+        }\n \n-            // Disconnect unused nodes\n-            std::vector<CNode*> vNodesCopy = vNodes;\n-            for (CNode* pnode : vNodesCopy)\n+        // Disconnect unused nodes\n+        std::vector<CNode*> vNodesCopy = vNodes;\n+        for (CNode* pnode : vNodesCopy)\n+        {\n+            if (pnode->fDisconnect)\n             {\n-                if (pnode->fDisconnect)\n-                {\n-                    // remove from vNodes\n-                    vNodes.erase(remove(vNodes.begin(), vNodes.end(), pnode), vNodes.end());\n+                // remove from vNodes\n+                vNodes.erase(remove(vNodes.begin(), vNodes.end(), pnode), vNodes.end());\n \n-                    // release outbound grant (if any)\n-                    pnode->grantOutbound.Release();\n+                // release outbound grant (if any)\n+                pnode->grantOutbound.Release();\n \n-                    // close socket and cleanup\n-                    pnode->CloseSocketDisconnect();\n+                // close socket and cleanup\n+                pnode->CloseSocketDisconnect();\n \n-                    // hold in disconnected pool until all refs are released\n-                    pnode->Release();\n-                    vNodesDisconnected.push_back(pnode);\n-                }\n+                // hold in disconnected pool until all refs are released\n+                pnode->Release();\n+                vNodesDisconnected.push_back(pnode);\n             }\n         }\n+    }\n+    {\n+        // Delete disconnected nodes\n+        std::list<CNode*> vNodesDisconnectedCopy = vNodesDisconnected;\n+        for (CNode* pnode : vNodesDisconnectedCopy)\n         {\n-            // Delete disconnected nodes\n-            std::list<CNode*> vNodesDisconnectedCopy = vNodesDisconnected;\n-            for (CNode* pnode : vNodesDisconnectedCopy)\n-            {\n-                // wait until threads are done using it\n-                if (pnode->GetRefCount() <= 0) {\n-                    bool fDelete = false;\n-                    {\n-                        TRY_LOCK(pnode->cs_inventory, lockInv);\n-                        if (lockInv) {\n-                            TRY_LOCK(pnode->cs_vSend, lockSend);\n-                            if (lockSend) {\n-                                fDelete = true;\n-                            }\n+            // wait until threads are done using it\n+            if (pnode->GetRefCount() <= 0) {\n+                bool fDelete = false;\n+                {\n+                    TRY_LOCK(pnode->cs_inventory, lockInv);\n+                    if (lockInv) {\n+                        TRY_LOCK(pnode->cs_vSend, lockSend);\n+                        if (lockSend) {\n+                            fDelete = true;\n                         }\n                     }\n-                    if (fDelete) {\n-                        vNodesDisconnected.remove(pnode);\n-                        DeleteNode(pnode);\n-                    }\n+                }\n+                if (fDelete) {\n+                    vNodesDisconnected.remove(pnode);\n+                    DeleteNode(pnode);\n                 }\n             }\n         }\n-        size_t vNodesSize;\n-        {\n-            LOCK(cs_vNodes);\n-            vNodesSize = vNodes.size();\n-        }\n-        if(vNodesSize != nPrevNodeCount) {\n-            nPrevNodeCount = vNodesSize;\n-            if(clientInterface)\n-                clientInterface->NotifyNumConnectionsChanged(vNodesSize);\n-        }\n+    }\n+}\n+\n+void CConnman::ThreadSocketHandler()\n+{\n+    unsigned int nPrevNodeCount = 0;\n+    while (!interruptNet)\n+    {\n+        DisconnectNodes();\n \n         //\n         // Find which sockets have data to receive\n@@ -1457,6 +1449,17 @@ void CConnman::ThreadSocketHandler()\n             for (CNode* pnode : vNodesCopy)\n                 pnode->Release();\n         }\n+\n+        size_t vNodesSize;\n+        {\n+            LOCK(cs_vNodes);\n+            vNodesSize = vNodes.size();\n+        }\n+        if(vNodesSize != nPrevNodeCount) {\n+            nPrevNodeCount = vNodesSize;\n+            if(clientInterface)\n+                clientInterface->NotifyNumConnectionsChanged(vNodesSize);\n+        }\n     }\n }\n "
      },
      {
        "sha": "4d66f777807e2cbfb8c4d4f288561dffe7157455",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d5c345507208d215c0621180305a9f1d363012a/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d5c345507208d215c0621180305a9f1d363012a/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=2d5c345507208d215c0621180305a9f1d363012a",
        "patch": "@@ -336,6 +336,7 @@ class CConnman\n     void ThreadOpenConnections(std::vector<std::string> connect);\n     void ThreadMessageHandler();\n     void AcceptConnection(const ListenSocket& hListenSocket);\n+    void DisconnectNodes();\n     void ThreadSocketHandler();\n     void ThreadDNSAddressSeed();\n "
      }
    ]
  },
  {
    "sha": "71c63419443fff53f7ab65d691e0afc169de7087",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MWM2MzQxOTQ0M2ZmZjUzZjdhYjY1ZDY5MWUwYWZjMTY5ZGU3MDg3",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2018-09-04T17:42:49Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2018-09-10T22:22:59Z"
      },
      "message": "Move InactivityCheck to private method.",
      "tree": {
        "sha": "57c7b1ea1fa3aa942e168e7696b300dbb0008470",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/57c7b1ea1fa3aa942e168e7696b300dbb0008470"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/71c63419443fff53f7ab65d691e0afc169de7087",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71c63419443fff53f7ab65d691e0afc169de7087",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/71c63419443fff53f7ab65d691e0afc169de7087",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71c63419443fff53f7ab65d691e0afc169de7087/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2d5c345507208d215c0621180305a9f1d363012a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d5c345507208d215c0621180305a9f1d363012a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2d5c345507208d215c0621180305a9f1d363012a"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 35,
      "deletions": 29
    },
    "files": [
      {
        "sha": "a86e931944d43fc9629962b1eb834721ef6821f4",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 29,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71c63419443fff53f7ab65d691e0afc169de7087/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71c63419443fff53f7ab65d691e0afc169de7087/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=71c63419443fff53f7ab65d691e0afc169de7087",
        "patch": "@@ -1215,6 +1215,38 @@ void CConnman::DisconnectNodes()\n     }\n }\n \n+void CConnman::InactivityCheck(CNode *pnode) {\n+    int64_t nTime = GetSystemTimeInSeconds();\n+    if (nTime - pnode->nTimeConnected > 60)\n+    {\n+        if (pnode->nLastRecv == 0 || pnode->nLastSend == 0)\n+        {\n+            LogPrint(BCLog::NET, \"socket no message in first 60 seconds, %d %d from %d\\n\", pnode->nLastRecv != 0, pnode->nLastSend != 0, pnode->GetId());\n+            pnode->fDisconnect = true;\n+        }\n+        else if (nTime - pnode->nLastSend > TIMEOUT_INTERVAL)\n+        {\n+            LogPrintf(\"socket sending timeout: %is\\n\", nTime - pnode->nLastSend);\n+            pnode->fDisconnect = true;\n+        }\n+        else if (nTime - pnode->nLastRecv > (pnode->nVersion > BIP0031_VERSION ? TIMEOUT_INTERVAL : 90*60))\n+        {\n+            LogPrintf(\"socket receive timeout: %is\\n\", nTime - pnode->nLastRecv);\n+            pnode->fDisconnect = true;\n+        }\n+        else if (pnode->nPingNonceSent && pnode->nPingUsecStart + TIMEOUT_INTERVAL * 1000000 < GetTimeMicros())\n+        {\n+            LogPrintf(\"ping timeout: %fs\\n\", 0.000001 * (GetTimeMicros() - pnode->nPingUsecStart));\n+            pnode->fDisconnect = true;\n+        }\n+        else if (!pnode->fSuccessfullyConnected)\n+        {\n+            LogPrint(BCLog::NET, \"version handshake timeout from %d\\n\", pnode->GetId());\n+            pnode->fDisconnect = true;\n+        }\n+    }\n+}\n+\n void CConnman::ThreadSocketHandler()\n {\n     unsigned int nPrevNodeCount = 0;\n@@ -1414,35 +1446,8 @@ void CConnman::ThreadSocketHandler()\n             //\n             // Inactivity checking\n             //\n-            int64_t nTime = GetSystemTimeInSeconds();\n-            if (nTime - pnode->nTimeConnected > 60)\n-            {\n-                if (pnode->nLastRecv == 0 || pnode->nLastSend == 0)\n-                {\n-                    LogPrint(BCLog::NET, \"socket no message in first 60 seconds, %d %d from %d\\n\", pnode->nLastRecv != 0, pnode->nLastSend != 0, pnode->GetId());\n-                    pnode->fDisconnect = true;\n-                }\n-                else if (nTime - pnode->nLastSend > TIMEOUT_INTERVAL)\n-                {\n-                    LogPrintf(\"socket sending timeout: %is\\n\", nTime - pnode->nLastSend);\n-                    pnode->fDisconnect = true;\n-                }\n-                else if (nTime - pnode->nLastRecv > (pnode->nVersion > BIP0031_VERSION ? TIMEOUT_INTERVAL : 90*60))\n-                {\n-                    LogPrintf(\"socket receive timeout: %is\\n\", nTime - pnode->nLastRecv);\n-                    pnode->fDisconnect = true;\n-                }\n-                else if (pnode->nPingNonceSent && pnode->nPingUsecStart + TIMEOUT_INTERVAL * 1000000 < GetTimeMicros())\n-                {\n-                    LogPrintf(\"ping timeout: %fs\\n\", 0.000001 * (GetTimeMicros() - pnode->nPingUsecStart));\n-                    pnode->fDisconnect = true;\n-                }\n-                else if (!pnode->fSuccessfullyConnected)\n-                {\n-                    LogPrint(BCLog::NET, \"version handshake timeout from %d\\n\", pnode->GetId());\n-                    pnode->fDisconnect = true;\n-                }\n-            }\n+            InactivityCheck(pnode);\n+\n         }\n         {\n             LOCK(cs_vNodes);"
      },
      {
        "sha": "38fa113029bc7f47b13f934785cff9ddb000464a",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71c63419443fff53f7ab65d691e0afc169de7087/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71c63419443fff53f7ab65d691e0afc169de7087/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=71c63419443fff53f7ab65d691e0afc169de7087",
        "patch": "@@ -337,6 +337,7 @@ class CConnman\n     void ThreadMessageHandler();\n     void AcceptConnection(const ListenSocket& hListenSocket);\n     void DisconnectNodes();\n+    void InactivityCheck(CNode *pnode);\n     void ThreadSocketHandler();\n     void ThreadDNSAddressSeed();\n "
      }
    ]
  },
  {
    "sha": "8c621097926ef9edeeaeb534a0b3fe629874a53c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YzYyMTA5NzkyNmVmOWVkZWVhZWI1MzRhMGIzZmU2Mjk4NzRhNTNj",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2018-09-04T18:20:16Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2018-09-10T22:22:59Z"
      },
      "message": "Reduce calls to GetMicroTime in InactivityCheck.",
      "tree": {
        "sha": "77908b56e327f196acef3c234731d5a7f730a3da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/77908b56e327f196acef3c234731d5a7f730a3da"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8c621097926ef9edeeaeb534a0b3fe629874a53c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c621097926ef9edeeaeb534a0b3fe629874a53c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8c621097926ef9edeeaeb534a0b3fe629874a53c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c621097926ef9edeeaeb534a0b3fe629874a53c/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "71c63419443fff53f7ab65d691e0afc169de7087",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71c63419443fff53f7ab65d691e0afc169de7087",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/71c63419443fff53f7ab65d691e0afc169de7087"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "00740ec082b3f008a5fc5f0c8102d1e975f494a1",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c621097926ef9edeeaeb534a0b3fe629874a53c/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c621097926ef9edeeaeb534a0b3fe629874a53c/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=8c621097926ef9edeeaeb534a0b3fe629874a53c",
        "patch": "@@ -1216,7 +1216,8 @@ void CConnman::DisconnectNodes()\n }\n \n void CConnman::InactivityCheck(CNode *pnode) {\n-    int64_t nTime = GetSystemTimeInSeconds();\n+    int64_t micro_time = GetTimeMicros();\n+    int64_t nTime = micro_time / 1000000;\n     if (nTime - pnode->nTimeConnected > 60)\n     {\n         if (pnode->nLastRecv == 0 || pnode->nLastSend == 0)\n@@ -1234,9 +1235,9 @@ void CConnman::InactivityCheck(CNode *pnode) {\n             LogPrintf(\"socket receive timeout: %is\\n\", nTime - pnode->nLastRecv);\n             pnode->fDisconnect = true;\n         }\n-        else if (pnode->nPingNonceSent && pnode->nPingUsecStart + TIMEOUT_INTERVAL * 1000000 < GetTimeMicros())\n+        else if (pnode->nPingNonceSent && pnode->nPingUsecStart + TIMEOUT_INTERVAL * 1000000 < micro_time)\n         {\n-            LogPrintf(\"ping timeout: %fs\\n\", 0.000001 * (GetTimeMicros() - pnode->nPingUsecStart));\n+            LogPrintf(\"ping timeout: %fs\\n\", 0.000001 * (micro_time - pnode->nPingUsecStart));\n             pnode->fDisconnect = true;\n         }\n         else if (!pnode->fSuccessfullyConnected)"
      }
    ]
  },
  {
    "sha": "8c2069c4f58aa6b37f9f31bfb3d8360d571e45d9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YzIwNjljNGY1OGFhNmIzN2Y5ZjMxYmZiM2Q4MzYwZDU3MWU0NWQ5",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2018-09-04T18:43:06Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2018-09-10T22:22:59Z"
      },
      "message": "Move InactivityChecks logic to private method.",
      "tree": {
        "sha": "433e85def22210684dce38dae4914362adda9269",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/433e85def22210684dce38dae4914362adda9269"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8c2069c4f58aa6b37f9f31bfb3d8360d571e45d9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c2069c4f58aa6b37f9f31bfb3d8360d571e45d9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8c2069c4f58aa6b37f9f31bfb3d8360d571e45d9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c2069c4f58aa6b37f9f31bfb3d8360d571e45d9/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8c621097926ef9edeeaeb534a0b3fe629874a53c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c621097926ef9edeeaeb534a0b3fe629874a53c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8c621097926ef9edeeaeb534a0b3fe629874a53c"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 10,
      "deletions": 6
    },
    "files": [
      {
        "sha": "48844827d7596a58ee853f6637506925876a1725",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c2069c4f58aa6b37f9f31bfb3d8360d571e45d9/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c2069c4f58aa6b37f9f31bfb3d8360d571e45d9/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=8c2069c4f58aa6b37f9f31bfb3d8360d571e45d9",
        "patch": "@@ -1215,6 +1215,13 @@ void CConnman::DisconnectNodes()\n     }\n }\n \n+void CConnman::InactivityChecks() {\n+    LOCK(cs_vNodes);\n+    for (CNode* pnode : vNodes) {\n+        InactivityCheck(pnode);\n+    }\n+}\n+\n void CConnman::InactivityCheck(CNode *pnode) {\n     int64_t micro_time = GetTimeMicros();\n     int64_t nTime = micro_time / 1000000;\n@@ -1443,12 +1450,6 @@ void CConnman::ThreadSocketHandler()\n                     RecordBytesSent(nBytes);\n                 }\n             }\n-\n-            //\n-            // Inactivity checking\n-            //\n-            InactivityCheck(pnode);\n-\n         }\n         {\n             LOCK(cs_vNodes);\n@@ -1466,6 +1467,8 @@ void CConnman::ThreadSocketHandler()\n             if(clientInterface)\n                 clientInterface->NotifyNumConnectionsChanged(vNodesSize);\n         }\n+\n+        InactivityChecks();\n     }\n }\n "
      },
      {
        "sha": "5cffd6f0a3a4a173d7f6d7dc1935a43f179e4223",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c2069c4f58aa6b37f9f31bfb3d8360d571e45d9/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c2069c4f58aa6b37f9f31bfb3d8360d571e45d9/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=8c2069c4f58aa6b37f9f31bfb3d8360d571e45d9",
        "patch": "@@ -337,6 +337,7 @@ class CConnman\n     void ThreadMessageHandler();\n     void AcceptConnection(const ListenSocket& hListenSocket);\n     void DisconnectNodes();\n+    void InactivityChecks();\n     void InactivityCheck(CNode *pnode);\n     void ThreadSocketHandler();\n     void ThreadDNSAddressSeed();"
      }
    ]
  },
  {
    "sha": "c27e21b6d434a4518256f2d7013dbcd9e823dea0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMjdlMjFiNmQ0MzRhNDUxODI1NmYyZDcwMTNkYmNkOWU4MjNkZWEw",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2018-09-04T18:49:56Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2018-09-10T22:22:59Z"
      },
      "message": "Merge InactivityCheck into InactivityChecks.",
      "tree": {
        "sha": "3aab30173dc7c1dad66afc0a3c50d004831b3e0e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3aab30173dc7c1dad66afc0a3c50d004831b3e0e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c27e21b6d434a4518256f2d7013dbcd9e823dea0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c27e21b6d434a4518256f2d7013dbcd9e823dea0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c27e21b6d434a4518256f2d7013dbcd9e823dea0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c27e21b6d434a4518256f2d7013dbcd9e823dea0/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8c2069c4f58aa6b37f9f31bfb3d8360d571e45d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c2069c4f58aa6b37f9f31bfb3d8360d571e45d9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8c2069c4f58aa6b37f9f31bfb3d8360d571e45d9"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 35,
      "deletions": 36
    },
    "files": [
      {
        "sha": "a53c28cde235af1a737e788b8041a97456313ead",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 35,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c27e21b6d434a4518256f2d7013dbcd9e823dea0/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c27e21b6d434a4518256f2d7013dbcd9e823dea0/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=c27e21b6d434a4518256f2d7013dbcd9e823dea0",
        "patch": "@@ -1215,42 +1215,42 @@ void CConnman::DisconnectNodes()\n     }\n }\n \n-void CConnman::InactivityChecks() {\n-    LOCK(cs_vNodes);\n-    for (CNode* pnode : vNodes) {\n-        InactivityCheck(pnode);\n-    }\n-}\n-\n-void CConnman::InactivityCheck(CNode *pnode) {\n-    int64_t micro_time = GetTimeMicros();\n-    int64_t nTime = micro_time / 1000000;\n-    if (nTime - pnode->nTimeConnected > 60)\n+void CConnman::InactivityChecks()\n+{\n+    int64_t micro_time, nTime;\n     {\n-        if (pnode->nLastRecv == 0 || pnode->nLastSend == 0)\n-        {\n-            LogPrint(BCLog::NET, \"socket no message in first 60 seconds, %d %d from %d\\n\", pnode->nLastRecv != 0, pnode->nLastSend != 0, pnode->GetId());\n-            pnode->fDisconnect = true;\n-        }\n-        else if (nTime - pnode->nLastSend > TIMEOUT_INTERVAL)\n-        {\n-            LogPrintf(\"socket sending timeout: %is\\n\", nTime - pnode->nLastSend);\n-            pnode->fDisconnect = true;\n-        }\n-        else if (nTime - pnode->nLastRecv > (pnode->nVersion > BIP0031_VERSION ? TIMEOUT_INTERVAL : 90*60))\n-        {\n-            LogPrintf(\"socket receive timeout: %is\\n\", nTime - pnode->nLastRecv);\n-            pnode->fDisconnect = true;\n-        }\n-        else if (pnode->nPingNonceSent && pnode->nPingUsecStart + TIMEOUT_INTERVAL * 1000000 < micro_time)\n-        {\n-            LogPrintf(\"ping timeout: %fs\\n\", 0.000001 * (micro_time - pnode->nPingUsecStart));\n-            pnode->fDisconnect = true;\n-        }\n-        else if (!pnode->fSuccessfullyConnected)\n-        {\n-            LogPrint(BCLog::NET, \"version handshake timeout from %d\\n\", pnode->GetId());\n-            pnode->fDisconnect = true;\n+        LOCK(cs_vNodes);\n+        micro_time = GetTimeMicros();\n+        nTime = micro_time / 1000000;\n+        for (CNode* pnode : vNodes) {\n+            if (nTime - pnode->nTimeConnected > 60)\n+            {\n+                if (pnode->nLastRecv == 0 || pnode->nLastSend == 0)\n+                {\n+                    LogPrint(BCLog::NET, \"socket no message in first 60 seconds, %d %d from %d\\n\", pnode->nLastRecv != 0, pnode->nLastSend != 0, pnode->GetId());\n+                    pnode->fDisconnect = true;\n+                }\n+                else if (nTime - pnode->nLastSend > TIMEOUT_INTERVAL)\n+                {\n+                    LogPrintf(\"socket sending timeout: %is\\n\", nTime - pnode->nLastSend);\n+                    pnode->fDisconnect = true;\n+                }\n+                else if (nTime - pnode->nLastRecv > (pnode->nVersion > BIP0031_VERSION ? TIMEOUT_INTERVAL : 90*60))\n+                {\n+                    LogPrintf(\"socket receive timeout: %is\\n\", nTime - pnode->nLastRecv);\n+                    pnode->fDisconnect = true;\n+                }\n+                else if (pnode->nPingNonceSent && pnode->nPingUsecStart + TIMEOUT_INTERVAL * 1000000 < micro_time)\n+                {\n+                    LogPrintf(\"ping timeout: %fs\\n\", 0.000001 * (micro_time - pnode->nPingUsecStart));\n+                    pnode->fDisconnect = true;\n+                }\n+                else if (!pnode->fSuccessfullyConnected)\n+                {\n+                    LogPrint(BCLog::NET, \"version handshake timeout from %d\\n\", pnode->GetId());\n+                    pnode->fDisconnect = true;\n+                }\n+            }\n         }\n     }\n }"
      },
      {
        "sha": "02aed9eeb98e7b47a1e4a2b837969d13fd2929a7",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c27e21b6d434a4518256f2d7013dbcd9e823dea0/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c27e21b6d434a4518256f2d7013dbcd9e823dea0/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=c27e21b6d434a4518256f2d7013dbcd9e823dea0",
        "patch": "@@ -338,7 +338,6 @@ class CConnman\n     void AcceptConnection(const ListenSocket& hListenSocket);\n     void DisconnectNodes();\n     void InactivityChecks();\n-    void InactivityCheck(CNode *pnode);\n     void ThreadSocketHandler();\n     void ThreadDNSAddressSeed();\n "
      }
    ]
  },
  {
    "sha": "8491dfbadceb8052f852ebf0020a622194db525f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NDkxZGZiYWRjZWI4MDUyZjg1MmViZjAwMjBhNjIyMTk0ZGI1MjVm",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2018-09-10T22:36:18Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2018-09-10T22:36:18Z"
      },
      "message": "Run InactivityChecks before other socket handling logic.",
      "tree": {
        "sha": "250c4d8a0e86efef47b28a496474db9a41f40a74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/250c4d8a0e86efef47b28a496474db9a41f40a74"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8491dfbadceb8052f852ebf0020a622194db525f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8491dfbadceb8052f852ebf0020a622194db525f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8491dfbadceb8052f852ebf0020a622194db525f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8491dfbadceb8052f852ebf0020a622194db525f/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c27e21b6d434a4518256f2d7013dbcd9e823dea0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c27e21b6d434a4518256f2d7013dbcd9e823dea0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c27e21b6d434a4518256f2d7013dbcd9e823dea0"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "073beb14e749d0df5f978d24bef95ecc8faf1983",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8491dfbadceb8052f852ebf0020a622194db525f/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8491dfbadceb8052f852ebf0020a622194db525f/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=8491dfbadceb8052f852ebf0020a622194db525f",
        "patch": "@@ -1260,6 +1260,7 @@ void CConnman::ThreadSocketHandler()\n     unsigned int nPrevNodeCount = 0;\n     while (!interruptNet)\n     {\n+        InactivityChecks();\n         DisconnectNodes();\n \n         //\n@@ -1467,8 +1468,6 @@ void CConnman::ThreadSocketHandler()\n             if(clientInterface)\n                 clientInterface->NotifyNumConnectionsChanged(vNodesSize);\n         }\n-\n-        InactivityChecks();\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "e817ce3090fa71c61170216090685ee142d0f1d5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplODE3Y2UzMDkwZmE3MWM2MTE3MDIxNjA5MDY4NWVlMTQyZDBmMWQ1",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2018-09-12T20:19:09Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2018-09-12T20:19:09Z"
      },
      "message": "Move NotifyNumConnectionsChanged logic to private method.",
      "tree": {
        "sha": "e90aa3297a7462d6c46d6a029b5fc7e462ff6063",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e90aa3297a7462d6c46d6a029b5fc7e462ff6063"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e817ce3090fa71c61170216090685ee142d0f1d5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e817ce3090fa71c61170216090685ee142d0f1d5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e817ce3090fa71c61170216090685ee142d0f1d5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e817ce3090fa71c61170216090685ee142d0f1d5/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8491dfbadceb8052f852ebf0020a622194db525f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8491dfbadceb8052f852ebf0020a622194db525f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8491dfbadceb8052f852ebf0020a622194db525f"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 18,
      "deletions": 12
    },
    "files": [
      {
        "sha": "012022acd4b8be93dc4ab5d89de9c576de4a6609",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 12,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e817ce3090fa71c61170216090685ee142d0f1d5/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e817ce3090fa71c61170216090685ee142d0f1d5/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=e817ce3090fa71c61170216090685ee142d0f1d5",
        "patch": "@@ -1255,9 +1255,22 @@ void CConnman::InactivityChecks()\n     }\n }\n \n+void CConnman::NotifyNumConnectionsChanged()\n+{\n+    size_t vNodesSize;\n+    {\n+        LOCK(cs_vNodes);\n+        vNodesSize = vNodes.size();\n+    }\n+    if(vNodesSize != nPrevNodeCount) {\n+        nPrevNodeCount = vNodesSize;\n+        if(clientInterface)\n+            clientInterface->NotifyNumConnectionsChanged(vNodesSize);\n+    }\n+}\n+\n void CConnman::ThreadSocketHandler()\n {\n-    unsigned int nPrevNodeCount = 0;\n     while (!interruptNet)\n     {\n         InactivityChecks();\n@@ -1457,17 +1470,7 @@ void CConnman::ThreadSocketHandler()\n             for (CNode* pnode : vNodesCopy)\n                 pnode->Release();\n         }\n-\n-        size_t vNodesSize;\n-        {\n-            LOCK(cs_vNodes);\n-            vNodesSize = vNodes.size();\n-        }\n-        if(vNodesSize != nPrevNodeCount) {\n-            nPrevNodeCount = vNodesSize;\n-            if(clientInterface)\n-                clientInterface->NotifyNumConnectionsChanged(vNodesSize);\n-        }\n+        NotifyNumConnectionsChanged();\n     }\n }\n \n@@ -2228,6 +2231,7 @@ CConnman::CConnman(uint64_t nSeed0In, uint64_t nSeed1In) : nSeed0(nSeed0In), nSe\n     setBannedIsDirty = false;\n     fAddressesInitialized = false;\n     nLastNodeId = 0;\n+    nPrevNodeCount = 0;\n     nSendBufferMaxSize = 0;\n     nReceiveFloodSize = 0;\n     flagInterruptMsgProc = false;"
      },
      {
        "sha": "cffdf0801d7b3dff4b83414eedc331e92fa1f978",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e817ce3090fa71c61170216090685ee142d0f1d5/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e817ce3090fa71c61170216090685ee142d0f1d5/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=e817ce3090fa71c61170216090685ee142d0f1d5",
        "patch": "@@ -338,6 +338,7 @@ class CConnman\n     void AcceptConnection(const ListenSocket& hListenSocket);\n     void DisconnectNodes();\n     void InactivityChecks();\n+    void NotifyNumConnectionsChanged();\n     void ThreadSocketHandler();\n     void ThreadDNSAddressSeed();\n \n@@ -408,6 +409,7 @@ class CConnman\n     std::list<CNode*> vNodesDisconnected;\n     mutable CCriticalSection cs_vNodes;\n     std::atomic<NodeId> nLastNodeId;\n+    size_t nPrevNodeCount;\n \n     /** Services this instance offers */\n     ServiceFlags nLocalServices;"
      }
    ]
  },
  {
    "sha": "5d3232d2dea8481a15b9f21ccb14d8ec4834e6f1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZDMyMzJkMmRlYTg0ODFhMTViOWYyMWNjYjE0ZDhlYzQ4MzRlNmYx",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2018-09-12T20:29:49Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2018-09-12T20:29:49Z"
      },
      "message": "Move SocketHandler logic to private method.",
      "tree": {
        "sha": "463289e863de19f72a373416027d49fe70a9a5f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/463289e863de19f72a373416027d49fe70a9a5f9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5d3232d2dea8481a15b9f21ccb14d8ec4834e6f1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d3232d2dea8481a15b9f21ccb14d8ec4834e6f1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5d3232d2dea8481a15b9f21ccb14d8ec4834e6f1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d3232d2dea8481a15b9f21ccb14d8ec4834e6f1/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e817ce3090fa71c61170216090685ee142d0f1d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e817ce3090fa71c61170216090685ee142d0f1d5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e817ce3090fa71c61170216090685ee142d0f1d5"
      }
    ],
    "stats": {
      "total": 325,
      "additions": 165,
      "deletions": 160
    },
    "files": [
      {
        "sha": "b58b4ce3e1a510608d366ae02ed3c27d0f312086",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 164,
        "deletions": 160,
        "changes": 324,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d3232d2dea8481a15b9f21ccb14d8ec4834e6f1/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d3232d2dea8481a15b9f21ccb14d8ec4834e6f1/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=5d3232d2dea8481a15b9f21ccb14d8ec4834e6f1",
        "patch": "@@ -1269,207 +1269,211 @@ void CConnman::NotifyNumConnectionsChanged()\n     }\n }\n \n-void CConnman::ThreadSocketHandler()\n+void CConnman::SocketHandler()\n {\n-    while (!interruptNet)\n-    {\n-        InactivityChecks();\n-        DisconnectNodes();\n+    //\n+    // Find which sockets have data to receive\n+    //\n+    struct timeval timeout;\n+    timeout.tv_sec  = 0;\n+    timeout.tv_usec = 50000; // frequency to poll pnode->vSend\n \n-        //\n-        // Find which sockets have data to receive\n-        //\n-        struct timeval timeout;\n-        timeout.tv_sec  = 0;\n-        timeout.tv_usec = 50000; // frequency to poll pnode->vSend\n-\n-        fd_set fdsetRecv;\n-        fd_set fdsetSend;\n-        fd_set fdsetError;\n-        FD_ZERO(&fdsetRecv);\n-        FD_ZERO(&fdsetSend);\n-        FD_ZERO(&fdsetError);\n-        SOCKET hSocketMax = 0;\n-        bool have_fds = false;\n+    fd_set fdsetRecv;\n+    fd_set fdsetSend;\n+    fd_set fdsetError;\n+    FD_ZERO(&fdsetRecv);\n+    FD_ZERO(&fdsetSend);\n+    FD_ZERO(&fdsetError);\n+    SOCKET hSocketMax = 0;\n+    bool have_fds = false;\n \n-        for (const ListenSocket& hListenSocket : vhListenSocket) {\n-            FD_SET(hListenSocket.socket, &fdsetRecv);\n-            hSocketMax = std::max(hSocketMax, hListenSocket.socket);\n-            have_fds = true;\n-        }\n+    for (const ListenSocket& hListenSocket : vhListenSocket) {\n+        FD_SET(hListenSocket.socket, &fdsetRecv);\n+        hSocketMax = std::max(hSocketMax, hListenSocket.socket);\n+        have_fds = true;\n+    }\n \n+    {\n+        LOCK(cs_vNodes);\n+        for (CNode* pnode : vNodes)\n         {\n-            LOCK(cs_vNodes);\n-            for (CNode* pnode : vNodes)\n+            // Implement the following logic:\n+            // * If there is data to send, select() for sending data. As this only\n+            //   happens when optimistic write failed, we choose to first drain the\n+            //   write buffer in this case before receiving more. This avoids\n+            //   needlessly queueing received data, if the remote peer is not themselves\n+            //   receiving data. This means properly utilizing TCP flow control signalling.\n+            // * Otherwise, if there is space left in the receive buffer, select() for\n+            //   receiving data.\n+            // * Hand off all complete messages to the processor, to be handled without\n+            //   blocking here.\n+\n+            bool select_recv = !pnode->fPauseRecv;\n+            bool select_send;\n             {\n-                // Implement the following logic:\n-                // * If there is data to send, select() for sending data. As this only\n-                //   happens when optimistic write failed, we choose to first drain the\n-                //   write buffer in this case before receiving more. This avoids\n-                //   needlessly queueing received data, if the remote peer is not themselves\n-                //   receiving data. This means properly utilizing TCP flow control signalling.\n-                // * Otherwise, if there is space left in the receive buffer, select() for\n-                //   receiving data.\n-                // * Hand off all complete messages to the processor, to be handled without\n-                //   blocking here.\n-\n-                bool select_recv = !pnode->fPauseRecv;\n-                bool select_send;\n-                {\n-                    LOCK(pnode->cs_vSend);\n-                    select_send = !pnode->vSendMsg.empty();\n-                }\n+                LOCK(pnode->cs_vSend);\n+                select_send = !pnode->vSendMsg.empty();\n+            }\n \n-                LOCK(pnode->cs_hSocket);\n-                if (pnode->hSocket == INVALID_SOCKET)\n-                    continue;\n+            LOCK(pnode->cs_hSocket);\n+            if (pnode->hSocket == INVALID_SOCKET)\n+                continue;\n \n-                FD_SET(pnode->hSocket, &fdsetError);\n-                hSocketMax = std::max(hSocketMax, pnode->hSocket);\n-                have_fds = true;\n+            FD_SET(pnode->hSocket, &fdsetError);\n+            hSocketMax = std::max(hSocketMax, pnode->hSocket);\n+            have_fds = true;\n \n-                if (select_send) {\n-                    FD_SET(pnode->hSocket, &fdsetSend);\n-                    continue;\n-                }\n-                if (select_recv) {\n-                    FD_SET(pnode->hSocket, &fdsetRecv);\n-                }\n+            if (select_send) {\n+                FD_SET(pnode->hSocket, &fdsetSend);\n+                continue;\n+            }\n+            if (select_recv) {\n+                FD_SET(pnode->hSocket, &fdsetRecv);\n             }\n         }\n+    }\n \n-        int nSelect = select(have_fds ? hSocketMax + 1 : 0,\n-                             &fdsetRecv, &fdsetSend, &fdsetError, &timeout);\n-        if (interruptNet)\n-            return;\n+    int nSelect = select(have_fds ? hSocketMax + 1 : 0,\n+                         &fdsetRecv, &fdsetSend, &fdsetError, &timeout);\n+    if (interruptNet)\n+        return;\n \n-        if (nSelect == SOCKET_ERROR)\n+    if (nSelect == SOCKET_ERROR)\n+    {\n+        if (have_fds)\n         {\n-            if (have_fds)\n-            {\n-                int nErr = WSAGetLastError();\n-                LogPrintf(\"socket select error %s\\n\", NetworkErrorString(nErr));\n-                for (unsigned int i = 0; i <= hSocketMax; i++)\n-                    FD_SET(i, &fdsetRecv);\n-            }\n-            FD_ZERO(&fdsetSend);\n-            FD_ZERO(&fdsetError);\n-            if (!interruptNet.sleep_for(std::chrono::milliseconds(timeout.tv_usec/1000)))\n-                return;\n+            int nErr = WSAGetLastError();\n+            LogPrintf(\"socket select error %s\\n\", NetworkErrorString(nErr));\n+            for (unsigned int i = 0; i <= hSocketMax; i++)\n+                FD_SET(i, &fdsetRecv);\n         }\n+        FD_ZERO(&fdsetSend);\n+        FD_ZERO(&fdsetError);\n+        if (!interruptNet.sleep_for(std::chrono::milliseconds(timeout.tv_usec/1000)))\n+            return;\n+    }\n \n-        //\n-        // Accept new connections\n-        //\n-        for (const ListenSocket& hListenSocket : vhListenSocket)\n+    //\n+    // Accept new connections\n+    //\n+    for (const ListenSocket& hListenSocket : vhListenSocket)\n+    {\n+        if (hListenSocket.socket != INVALID_SOCKET && FD_ISSET(hListenSocket.socket, &fdsetRecv))\n         {\n-            if (hListenSocket.socket != INVALID_SOCKET && FD_ISSET(hListenSocket.socket, &fdsetRecv))\n-            {\n-                AcceptConnection(hListenSocket);\n-            }\n+            AcceptConnection(hListenSocket);\n         }\n+    }\n+\n+    //\n+    // Service each socket\n+    //\n+    std::vector<CNode*> vNodesCopy;\n+    {\n+        LOCK(cs_vNodes);\n+        vNodesCopy = vNodes;\n+        for (CNode* pnode : vNodesCopy)\n+            pnode->AddRef();\n+    }\n+    for (CNode* pnode : vNodesCopy)\n+    {\n+        if (interruptNet)\n+            return;\n \n         //\n-        // Service each socket\n+        // Receive\n         //\n-        std::vector<CNode*> vNodesCopy;\n+        bool recvSet = false;\n+        bool sendSet = false;\n+        bool errorSet = false;\n         {\n-            LOCK(cs_vNodes);\n-            vNodesCopy = vNodes;\n-            for (CNode* pnode : vNodesCopy)\n-                pnode->AddRef();\n+            LOCK(pnode->cs_hSocket);\n+            if (pnode->hSocket == INVALID_SOCKET)\n+                continue;\n+            recvSet = FD_ISSET(pnode->hSocket, &fdsetRecv);\n+            sendSet = FD_ISSET(pnode->hSocket, &fdsetSend);\n+            errorSet = FD_ISSET(pnode->hSocket, &fdsetError);\n         }\n-        for (CNode* pnode : vNodesCopy)\n+        if (recvSet || errorSet)\n         {\n-            if (interruptNet)\n-                return;\n-\n-            //\n-            // Receive\n-            //\n-            bool recvSet = false;\n-            bool sendSet = false;\n-            bool errorSet = false;\n+            // typical socket buffer is 8K-64K\n+            char pchBuf[0x10000];\n+            int nBytes = 0;\n             {\n                 LOCK(pnode->cs_hSocket);\n                 if (pnode->hSocket == INVALID_SOCKET)\n                     continue;\n-                recvSet = FD_ISSET(pnode->hSocket, &fdsetRecv);\n-                sendSet = FD_ISSET(pnode->hSocket, &fdsetSend);\n-                errorSet = FD_ISSET(pnode->hSocket, &fdsetError);\n+                nBytes = recv(pnode->hSocket, pchBuf, sizeof(pchBuf), MSG_DONTWAIT);\n             }\n-            if (recvSet || errorSet)\n+            if (nBytes > 0)\n             {\n-                // typical socket buffer is 8K-64K\n-                char pchBuf[0x10000];\n-                int nBytes = 0;\n-                {\n-                    LOCK(pnode->cs_hSocket);\n-                    if (pnode->hSocket == INVALID_SOCKET)\n-                        continue;\n-                    nBytes = recv(pnode->hSocket, pchBuf, sizeof(pchBuf), MSG_DONTWAIT);\n-                }\n-                if (nBytes > 0)\n-                {\n-                    bool notify = false;\n-                    if (!pnode->ReceiveMsgBytes(pchBuf, nBytes, notify))\n-                        pnode->CloseSocketDisconnect();\n-                    RecordBytesRecv(nBytes);\n-                    if (notify) {\n-                        size_t nSizeAdded = 0;\n-                        auto it(pnode->vRecvMsg.begin());\n-                        for (; it != pnode->vRecvMsg.end(); ++it) {\n-                            if (!it->complete())\n-                                break;\n-                            nSizeAdded += it->vRecv.size() + CMessageHeader::HEADER_SIZE;\n-                        }\n-                        {\n-                            LOCK(pnode->cs_vProcessMsg);\n-                            pnode->vProcessMsg.splice(pnode->vProcessMsg.end(), pnode->vRecvMsg, pnode->vRecvMsg.begin(), it);\n-                            pnode->nProcessQueueSize += nSizeAdded;\n-                            pnode->fPauseRecv = pnode->nProcessQueueSize > nReceiveFloodSize;\n-                        }\n-                        WakeMessageHandler();\n-                    }\n-                }\n-                else if (nBytes == 0)\n-                {\n-                    // socket closed gracefully\n-                    if (!pnode->fDisconnect) {\n-                        LogPrint(BCLog::NET, \"socket closed\\n\");\n-                    }\n+                bool notify = false;\n+                if (!pnode->ReceiveMsgBytes(pchBuf, nBytes, notify))\n                     pnode->CloseSocketDisconnect();\n-                }\n-                else if (nBytes < 0)\n-                {\n-                    // error\n-                    int nErr = WSAGetLastError();\n-                    if (nErr != WSAEWOULDBLOCK && nErr != WSAEMSGSIZE && nErr != WSAEINTR && nErr != WSAEINPROGRESS)\n+                RecordBytesRecv(nBytes);\n+                if (notify) {\n+                    size_t nSizeAdded = 0;\n+                    auto it(pnode->vRecvMsg.begin());\n+                    for (; it != pnode->vRecvMsg.end(); ++it) {\n+                        if (!it->complete())\n+                            break;\n+                        nSizeAdded += it->vRecv.size() + CMessageHeader::HEADER_SIZE;\n+                    }\n                     {\n-                        if (!pnode->fDisconnect)\n-                            LogPrintf(\"socket recv error %s\\n\", NetworkErrorString(nErr));\n-                        pnode->CloseSocketDisconnect();\n+                        LOCK(pnode->cs_vProcessMsg);\n+                        pnode->vProcessMsg.splice(pnode->vProcessMsg.end(), pnode->vRecvMsg, pnode->vRecvMsg.begin(), it);\n+                        pnode->nProcessQueueSize += nSizeAdded;\n+                        pnode->fPauseRecv = pnode->nProcessQueueSize > nReceiveFloodSize;\n                     }\n+                    WakeMessageHandler();\n                 }\n             }\n-\n-            //\n-            // Send\n-            //\n-            if (sendSet)\n+            else if (nBytes == 0)\n             {\n-                LOCK(pnode->cs_vSend);\n-                size_t nBytes = SocketSendData(pnode);\n-                if (nBytes) {\n-                    RecordBytesSent(nBytes);\n+                // socket closed gracefully\n+                if (!pnode->fDisconnect) {\n+                    LogPrint(BCLog::NET, \"socket closed\\n\");\n+                }\n+                pnode->CloseSocketDisconnect();\n+            }\n+            else if (nBytes < 0)\n+            {\n+                // error\n+                int nErr = WSAGetLastError();\n+                if (nErr != WSAEWOULDBLOCK && nErr != WSAEMSGSIZE && nErr != WSAEINTR && nErr != WSAEINPROGRESS)\n+                {\n+                    if (!pnode->fDisconnect)\n+                        LogPrintf(\"socket recv error %s\\n\", NetworkErrorString(nErr));\n+                    pnode->CloseSocketDisconnect();\n                 }\n             }\n         }\n+\n+        //\n+        // Send\n+        //\n+        if (sendSet)\n         {\n-            LOCK(cs_vNodes);\n-            for (CNode* pnode : vNodesCopy)\n-                pnode->Release();\n+            LOCK(pnode->cs_vSend);\n+            size_t nBytes = SocketSendData(pnode);\n+            if (nBytes) {\n+                RecordBytesSent(nBytes);\n+            }\n         }\n+    }\n+    {\n+        LOCK(cs_vNodes);\n+        for (CNode* pnode : vNodesCopy)\n+            pnode->Release();\n+    }\n+}\n+\n+void CConnman::ThreadSocketHandler()\n+{\n+    while (!interruptNet)\n+    {\n+        InactivityChecks();\n+        DisconnectNodes();\n+        SocketHandler();\n         NotifyNumConnectionsChanged();\n     }\n }"
      },
      {
        "sha": "2c2f7717e77544a4428f890637de3acc156c799c",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d3232d2dea8481a15b9f21ccb14d8ec4834e6f1/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d3232d2dea8481a15b9f21ccb14d8ec4834e6f1/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=5d3232d2dea8481a15b9f21ccb14d8ec4834e6f1",
        "patch": "@@ -339,6 +339,7 @@ class CConnman\n     void DisconnectNodes();\n     void InactivityChecks();\n     void NotifyNumConnectionsChanged();\n+    void SocketHandler();\n     void ThreadSocketHandler();\n     void ThreadDNSAddressSeed();\n "
      }
    ]
  },
  {
    "sha": "54cf6ae777d294dab4024e0e3091559407742037",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NGNmNmFlNzc3ZDI5NGRhYjQwMjRlMGUzMDkxNTU5NDA3NzQyMDM3",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2018-09-13T18:59:17Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2018-09-13T22:11:59Z"
      },
      "message": "Move SocketEvents logic to private method.",
      "tree": {
        "sha": "d667a3cefa784da64758e34b6c5300deac740625",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d667a3cefa784da64758e34b6c5300deac740625"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/54cf6ae777d294dab4024e0e3091559407742037",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54cf6ae777d294dab4024e0e3091559407742037",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/54cf6ae777d294dab4024e0e3091559407742037",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54cf6ae777d294dab4024e0e3091559407742037/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5d3232d2dea8481a15b9f21ccb14d8ec4834e6f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d3232d2dea8481a15b9f21ccb14d8ec4834e6f1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5d3232d2dea8481a15b9f21ccb14d8ec4834e6f1"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 32,
      "deletions": 8
    },
    "files": [
      {
        "sha": "823194bae0dc20ef0648458724e5215df02df27e",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 8,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54cf6ae777d294dab4024e0e3091559407742037/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54cf6ae777d294dab4024e0e3091559407742037/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=54cf6ae777d294dab4024e0e3091559407742037",
        "patch": "@@ -1269,11 +1269,8 @@ void CConnman::NotifyNumConnectionsChanged()\n     }\n }\n \n-void CConnman::SocketHandler()\n+void CConnman::SocketEvents(std::set<SOCKET> &recv_set, std::set<SOCKET> &send_set, std::set<SOCKET> &error_set)\n {\n-    //\n-    // Find which sockets have data to receive\n-    //\n     struct timeval timeout;\n     timeout.tv_sec  = 0;\n     timeout.tv_usec = 50000; // frequency to poll pnode->vSend\n@@ -1353,12 +1350,38 @@ void CConnman::SocketHandler()\n             return;\n     }\n \n+\n+    for (const ListenSocket& hListenSocket : vhListenSocket)\n+    {\n+        if (hListenSocket.socket == INVALID_SOCKET) continue;\n+        if (FD_ISSET(hListenSocket.socket, &fdsetRecv)) recv_set.insert(hListenSocket.socket);\n+    }\n+\n+    {\n+        LOCK(cs_vNodes);\n+        for (CNode* pnode : vNodes)\n+        {\n+            if (pnode->hSocket == INVALID_SOCKET) continue;\n+            if (FD_ISSET(pnode->hSocket, &fdsetRecv)) recv_set.insert(pnode->hSocket);\n+            if (FD_ISSET(pnode->hSocket, &fdsetSend)) send_set.insert(pnode->hSocket);\n+            if (FD_ISSET(pnode->hSocket, &fdsetError)) error_set.insert(pnode->hSocket);\n+        }\n+    }\n+}\n+\n+void CConnman::SocketHandler()\n+{\n+    std::set<SOCKET> recv_set, send_set, error_set;\n+    SocketEvents(recv_set, send_set, error_set);\n+\n+    if (interruptNet) return;\n+\n     //\n     // Accept new connections\n     //\n     for (const ListenSocket& hListenSocket : vhListenSocket)\n     {\n-        if (hListenSocket.socket != INVALID_SOCKET && FD_ISSET(hListenSocket.socket, &fdsetRecv))\n+        if (hListenSocket.socket != INVALID_SOCKET && recv_set.count(hListenSocket.socket))\n         {\n             AcceptConnection(hListenSocket);\n         }\n@@ -1389,9 +1412,9 @@ void CConnman::SocketHandler()\n             LOCK(pnode->cs_hSocket);\n             if (pnode->hSocket == INVALID_SOCKET)\n                 continue;\n-            recvSet = FD_ISSET(pnode->hSocket, &fdsetRecv);\n-            sendSet = FD_ISSET(pnode->hSocket, &fdsetSend);\n-            errorSet = FD_ISSET(pnode->hSocket, &fdsetError);\n+            recvSet = recv_set.count(pnode->hSocket);\n+            sendSet = send_set.count(pnode->hSocket);\n+            errorSet = error_set.count(pnode->hSocket);\n         }\n         if (recvSet || errorSet)\n         {"
      },
      {
        "sha": "0389f7ff15917cca5b4357e79c51950462f5f543",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54cf6ae777d294dab4024e0e3091559407742037/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54cf6ae777d294dab4024e0e3091559407742037/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=54cf6ae777d294dab4024e0e3091559407742037",
        "patch": "@@ -339,6 +339,7 @@ class CConnman\n     void DisconnectNodes();\n     void InactivityChecks();\n     void NotifyNumConnectionsChanged();\n+    void SocketEvents(std::set<SOCKET> &recv_set, std::set<SOCKET> &send_set, std::set<SOCKET> &error_set);\n     void SocketHandler();\n     void ThreadSocketHandler();\n     void ThreadDNSAddressSeed();"
      }
    ]
  },
  {
    "sha": "9d5eef951345e309d4e2d55e254c193cc59d88f1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZDVlZWY5NTEzNDVlMzA5ZDRlMmQ1NWUyNTRjMTkzY2M1OWQ4OGYx",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2018-09-14T02:04:09Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2018-09-14T23:09:53Z"
      },
      "message": "Implement poll() on systems which support it properly.",
      "tree": {
        "sha": "0ece2877149de1ed00ab6e5e0ea1e3e618157412",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0ece2877149de1ed00ab6e5e0ea1e3e618157412"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9d5eef951345e309d4e2d55e254c193cc59d88f1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d5eef951345e309d4e2d55e254c193cc59d88f1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9d5eef951345e309d4e2d55e254c193cc59d88f1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d5eef951345e309d4e2d55e254c193cc59d88f1/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "54cf6ae777d294dab4024e0e3091559407742037",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54cf6ae777d294dab4024e0e3091559407742037",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/54cf6ae777d294dab4024e0e3091559407742037"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 74,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8a9c1cbb7a3b7520cf36716cd91f4da28ba6e32e",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 73,
        "deletions": 0,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d5eef951345e309d4e2d55e254c193cc59d88f1/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d5eef951345e309d4e2d55e254c193cc59d88f1/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=9d5eef951345e309d4e2d55e254c193cc59d88f1",
        "patch": "@@ -1269,6 +1269,7 @@ void CConnman::NotifyNumConnectionsChanged()\n     }\n }\n \n+#ifdef WIN32\n void CConnman::SocketEvents(std::set<SOCKET> &recv_set, std::set<SOCKET> &send_set, std::set<SOCKET> &error_set)\n {\n     struct timeval timeout;\n@@ -1368,6 +1369,78 @@ void CConnman::SocketEvents(std::set<SOCKET> &recv_set, std::set<SOCKET> &send_s\n         }\n     }\n }\n+#else\n+void CConnman::SocketEvents(std::set<SOCKET> &recv_set, std::set<SOCKET> &send_set, std::set<SOCKET> &error_set)\n+{\n+    std::vector<struct pollfd> pollfds;\n+\n+    for (const ListenSocket& hListenSocket : vhListenSocket) {\n+        if (hListenSocket.socket == INVALID_SOCKET) continue;\n+\n+        struct pollfd pollfd;\n+        memset(&pollfd, 0, sizeof(struct pollfd));\n+        pollfd.fd = hListenSocket.socket;\n+        pollfd.events = POLLIN;\n+        pollfds.push_back(pollfd);\n+    }\n+\n+    {\n+        LOCK(cs_vNodes);\n+        for (CNode* pnode : vNodes)\n+        {\n+            // Implement the following logic:\n+            // * If there is data to send, select() for sending data. As this only\n+            //   happens when optimistic write failed, we choose to first drain the\n+            //   write buffer in this case before receiving more. This avoids\n+            //   needlessly queueing received data, if the remote peer is not themselves\n+            //   receiving data. This means properly utilizing TCP flow control signalling.\n+            // * Otherwise, if there is space left in the receive buffer, select() for\n+            //   receiving data.\n+            // * Hand off all complete messages to the processor, to be handled without\n+            //   blocking here.\n+\n+            bool select_recv = !pnode->fPauseRecv;\n+            bool select_send;\n+            {\n+                LOCK(pnode->cs_vSend);\n+                select_send = !pnode->vSendMsg.empty();\n+            }\n+\n+            LOCK(pnode->cs_hSocket);\n+            if (pnode->hSocket == INVALID_SOCKET)\n+                continue;\n+\n+            struct pollfd pollfd;\n+            memset(&pollfd, 0, sizeof(struct pollfd));\n+            pollfd.fd = pnode->hSocket;\n+\n+            if (select_send) {\n+                pollfd.events = POLLOUT;\n+                continue;\n+            }\n+            if (select_recv) {\n+                pollfd.events = POLLIN;\n+            }\n+            pollfds.push_back(pollfd);\n+        }\n+    }\n+\n+    int nPoll = poll(&pollfds[0], pollfds.size(), 50);\n+\n+    if (nPoll < 0) {\n+        if (errno == EINTR) return;\n+        LogPrint(BCLog::NET, \"poll errno %s\\n\", strerror(errno));\n+    }\n+\n+    if (interruptNet) return;\n+\n+    for (struct pollfd pollfd : pollfds) {\n+        if (pollfd.revents & POLLIN) recv_set.insert(pollfd.fd);\n+        if (pollfd.revents & POLLOUT) send_set.insert(pollfd.fd);\n+        if (pollfd.revents & (POLLERR|POLLHUP)) error_set.insert(pollfd.fd);\n+    }\n+}\n+#endif\n \n void CConnman::SocketHandler()\n {"
      },
      {
        "sha": "0993748fa5dc68cba4e83ad6b59d5585a85f79e2",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d5eef951345e309d4e2d55e254c193cc59d88f1/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d5eef951345e309d4e2d55e254c193cc59d88f1/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=9d5eef951345e309d4e2d55e254c193cc59d88f1",
        "patch": "@@ -31,6 +31,7 @@\n \n #ifndef WIN32\n #include <arpa/inet.h>\n+#include <poll.h>\n #endif\n \n "
      }
    ]
  }
]