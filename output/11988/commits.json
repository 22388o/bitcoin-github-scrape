[
  {
    "sha": "b4a23a91ef4fa565ee6f60a045302feceac6289a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNGEyM2E5MWVmNGZhNTY1ZWU2ZjYwYTA0NTMwMmZlY2VhYzYyODlh",
    "commit": {
      "author": {
        "name": "Akio Nakamura",
        "email": "nakamura@dgtechnologies.co.jp",
        "date": "2017-12-22T10:04:30Z"
      },
      "committer": {
        "name": "Akio Nakamura",
        "email": "nakamura@dgtechnologies.co.jp",
        "date": "2018-01-17T02:12:44Z"
      },
      "message": "Reduce redundant code of prevector and speed it up\n\nIn prevector.h, the code which like item_ptr(size()) apears in the loop.\nBoth item_ptr() and size() judge whether values are held directly or\nindirectly, but in most cases it is sufficient to make that judgement\nonce outside the loop.\n\nThis PR adds 2 private function fill() which has the loop to initialize\nby specified value (or iterator of the other prevector's element),\nbut don't call item_ptr() in their loop.\nOther functions(assign(), constructor, operator=(), insert())\nthat has similar loop, call fill() instead of original loop.\n\nAlso, resize() was changed like fill(), but it calls the default\nconstructor for that element each time.",
      "tree": {
        "sha": "b7e653d3d5f7807211c7547cde4c53f80b521d6b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b7e653d3d5f7807211c7547cde4c53f80b521d6b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b4a23a91ef4fa565ee6f60a045302feceac6289a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4a23a91ef4fa565ee6f60a045302feceac6289a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b4a23a91ef4fa565ee6f60a045302feceac6289a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4a23a91ef4fa565ee6f60a045302feceac6289a/comments",
    "author": {
      "login": "AkioNak",
      "id": 24285095,
      "node_id": "MDQ6VXNlcjI0Mjg1MDk1",
      "avatar_url": "https://avatars.githubusercontent.com/u/24285095?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AkioNak",
      "html_url": "https://github.com/AkioNak",
      "followers_url": "https://api.github.com/users/AkioNak/followers",
      "following_url": "https://api.github.com/users/AkioNak/following{/other_user}",
      "gists_url": "https://api.github.com/users/AkioNak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AkioNak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AkioNak/subscriptions",
      "organizations_url": "https://api.github.com/users/AkioNak/orgs",
      "repos_url": "https://api.github.com/users/AkioNak/repos",
      "events_url": "https://api.github.com/users/AkioNak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AkioNak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "AkioNak",
      "id": 24285095,
      "node_id": "MDQ6VXNlcjI0Mjg1MDk1",
      "avatar_url": "https://avatars.githubusercontent.com/u/24285095?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AkioNak",
      "html_url": "https://github.com/AkioNak",
      "followers_url": "https://api.github.com/users/AkioNak/followers",
      "following_url": "https://api.github.com/users/AkioNak/following{/other_user}",
      "gists_url": "https://api.github.com/users/AkioNak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AkioNak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AkioNak/subscriptions",
      "organizations_url": "https://api.github.com/users/AkioNak/orgs",
      "repos_url": "https://api.github.com/users/AkioNak/repos",
      "events_url": "https://api.github.com/users/AkioNak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AkioNak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a6365c5c3d277af355c51d7aee969f261dc5a751",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6365c5c3d277af355c51d7aee969f261dc5a751",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a6365c5c3d277af355c51d7aee969f261dc5a751"
      }
    ],
    "stats": {
      "total": 91,
      "additions": 42,
      "deletions": 49
    },
    "files": [
      {
        "sha": "951cb85c5f723849ece82351f17e6167c39db762",
        "filename": "src/prevector.h",
        "status": "modified",
        "additions": 42,
        "deletions": 49,
        "changes": 91,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4a23a91ef4fa565ee6f60a045302feceac6289a/src/prevector.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4a23a91ef4fa565ee6f60a045302feceac6289a/src/prevector.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/prevector.h?ref=b4a23a91ef4fa565ee6f60a045302feceac6289a",
        "patch": "@@ -194,16 +194,29 @@ class prevector {\n     T* item_ptr(difference_type pos) { return is_direct() ? direct_ptr(pos) : indirect_ptr(pos); }\n     const T* item_ptr(difference_type pos) const { return is_direct() ? direct_ptr(pos) : indirect_ptr(pos); }\n \n+    void fill(T* dst, size_type count, const T& value) {\n+        for (size_type i = 0; i < count; ++i) {\n+            new(static_cast<void*>(dst + i)) T(value);\n+        }\n+    }\n+\n+    template<typename InputIterator>\n+    void fill(T* dst, InputIterator first, InputIterator last) {\n+        while (first != last) {\n+            new(static_cast<void*>(dst)) T(*first);\n+            ++dst;\n+            ++first;\n+        }\n+    }\n+\n public:\n     void assign(size_type n, const T& val) {\n         clear();\n         if (capacity() < n) {\n             change_capacity(n);\n         }\n-        while (size() < n) {\n-            _size++;\n-            new(static_cast<void*>(item_ptr(size() - 1))) T(val);\n-        }\n+        _size += n;\n+        fill(item_ptr(0), n, val);\n     }\n \n     template<typename InputIterator>\n@@ -213,11 +226,8 @@ class prevector {\n         if (capacity() < n) {\n             change_capacity(n);\n         }\n-        while (first != last) {\n-            _size++;\n-            new(static_cast<void*>(item_ptr(size() - 1))) T(*first);\n-            ++first;\n-        }\n+        _size += n;\n+        fill(item_ptr(0), first, last);\n     }\n \n     prevector() : _size(0), _union{{}} {}\n@@ -228,31 +238,23 @@ class prevector {\n \n     explicit prevector(size_type n, const T& val = T()) : _size(0) {\n         change_capacity(n);\n-        while (size() < n) {\n-            _size++;\n-            new(static_cast<void*>(item_ptr(size() - 1))) T(val);\n-        }\n+        _size += n;\n+        fill(item_ptr(0), n, val);\n     }\n \n     template<typename InputIterator>\n     prevector(InputIterator first, InputIterator last) : _size(0) {\n         size_type n = last - first;\n         change_capacity(n);\n-        while (first != last) {\n-            _size++;\n-            new(static_cast<void*>(item_ptr(size() - 1))) T(*first);\n-            ++first;\n-        }\n+        _size += n;\n+        fill(item_ptr(0), first, last);\n     }\n \n     prevector(const prevector<N, T, Size, Diff>& other) : _size(0) {\n-        change_capacity(other.size());\n-        const_iterator it = other.begin();\n-        while (it != other.end()) {\n-            _size++;\n-            new(static_cast<void*>(item_ptr(size() - 1))) T(*it);\n-            ++it;\n-        }\n+        size_type n = other.size();\n+        change_capacity(n);\n+        _size += n;\n+        fill(item_ptr(0), other.begin(),  other.end());\n     }\n \n     prevector(prevector<N, T, Size, Diff>&& other) : _size(0) {\n@@ -263,14 +265,7 @@ class prevector {\n         if (&other == this) {\n             return *this;\n         }\n-        resize(0);\n-        change_capacity(other.size());\n-        const_iterator it = other.begin();\n-        while (it != other.end()) {\n-            _size++;\n-            new(static_cast<void*>(item_ptr(size() - 1))) T(*it);\n-            ++it;\n-        }\n+        assign(other.begin(), other.end());\n         return *this;\n     }\n \n@@ -314,15 +309,16 @@ class prevector {\n     }\n \n     void resize(size_type new_size) {\n-        if (size() > new_size) {\n+        size_type cur_size = size();\n+        if (cur_size > new_size) {\n             erase(item_ptr(new_size), end());\n         }\n         if (new_size > capacity()) {\n             change_capacity(new_size);\n         }\n-        while (size() < new_size) {\n+        for (T* p = item_ptr(0); cur_size < new_size; cur_size++) {\n             _size++;\n-            new(static_cast<void*>(item_ptr(size() - 1))) T();\n+            new(static_cast<void*>(p + cur_size)) T();\n         }\n     }\n \n@@ -346,10 +342,11 @@ class prevector {\n         if (capacity() < new_size) {\n             change_capacity(new_size + (new_size >> 1));\n         }\n-        memmove(item_ptr(p + 1), item_ptr(p), (size() - p) * sizeof(T));\n+        T* ptr = item_ptr(p);\n+        memmove(ptr + 1, ptr, (size() - p) * sizeof(T));\n         _size++;\n-        new(static_cast<void*>(item_ptr(p))) T(value);\n-        return iterator(item_ptr(p));\n+        new(static_cast<void*>(ptr)) T(value);\n+        return iterator(ptr);\n     }\n \n     void insert(iterator pos, size_type count, const T& value) {\n@@ -358,11 +355,10 @@ class prevector {\n         if (capacity() < new_size) {\n             change_capacity(new_size + (new_size >> 1));\n         }\n-        memmove(item_ptr(p + count), item_ptr(p), (size() - p) * sizeof(T));\n+        T* ptr = item_ptr(p);\n+        memmove(ptr + count, ptr, (size() - p) * sizeof(T));\n         _size += count;\n-        for (size_type i = 0; i < count; i++) {\n-            new(static_cast<void*>(item_ptr(p + i))) T(value);\n-        }\n+        fill(item_ptr(p), count, value);\n     }\n \n     template<typename InputIterator>\n@@ -373,13 +369,10 @@ class prevector {\n         if (capacity() < new_size) {\n             change_capacity(new_size + (new_size >> 1));\n         }\n-        memmove(item_ptr(p + count), item_ptr(p), (size() - p) * sizeof(T));\n+        T* ptr = item_ptr(p);\n+        memmove(ptr + count, ptr, (size() - p) * sizeof(T));\n         _size += count;\n-        while (first != last) {\n-            new(static_cast<void*>(item_ptr(p))) T(*first);\n-            ++p;\n-            ++first;\n-        }\n+        fill(ptr, first, last);\n     }\n \n     iterator erase(iterator pos) {"
      }
    ]
  }
]