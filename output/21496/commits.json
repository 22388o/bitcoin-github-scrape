[
  {
    "sha": "c8ee766ed75fbf0481729d7302cdf115a8bc6877",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOGVlNzY2ZWQ3NWZiZjA0ODE3MjlkNzMwMmNkZjExNWE4YmM2ODc3",
    "commit": {
      "author": {
        "name": "Anthony Ronning",
        "email": "anthonyronning@gmail.com",
        "date": "2021-03-21T20:22:25Z"
      },
      "committer": {
        "name": "Anthony Ronning",
        "email": "anthonyronning@gmail.com",
        "date": "2021-03-21T22:56:58Z"
      },
      "message": "fuzz: execute each file in dir without fuzz engine",
      "tree": {
        "sha": "779d174ed05e6f63ecf76bae57a27d83a208f86d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/779d174ed05e6f63ecf76bae57a27d83a208f86d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c8ee766ed75fbf0481729d7302cdf115a8bc6877",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEy3SPLqaG+moj8tw5poQhvYeMPuwFAmBXzzwACgkQpoQhvYeM\nPuxXThAAhkLDi+xpziiqiNihwAnDB6DG/AnLiEgw2vbUVb3qzeux1kyQge89/y9I\n/t/WyNCHkQSPGjOvMBUzWrUUQOJLzCQc5mzdFJgn1txjc46lYFHJsQNKG1qr+ZkD\n6VnftwlaaLSuaY06aeLIpmIL9aa7WZUQeFf5gZLePN7Soh/OG4o0CL4vFP9YLJzl\nSapZHG90CoKxxi5IG80GcxG1iNUvgMSoE8UqZL/SpSURVIB/WNz3WN9mBJUqPJyj\ntLnpA0gK7ookDH8EaR6LHZ8zmQcGT9lfnNn4DC5NbishTlv0Fjhu62R88wgb2PxR\nDcJe6RULe2UVnDnLn8SqsltI+toVYZrfW2MgsrH4v3m6KkR85njB+ZHT2q1jjS4c\n+yWpf7v8c7vVMMdt5dzaIWnQNdrMOoaBoT/DAbk7ItEEAnEG2/g2wJa3uYojTW7g\nJioXJzrPG4gBQjvwP+M84/u+se4kY+P0MaEft3HZmvJECFZhN51JSdgpueOSruOB\nEvmPG73zTsyQjRXrIjDZBC5gUV8n0hjP1fHxrSsa6/sGs0B1Xf1aQf9l1/gwX7Rt\ntrxa7OfyUhPZQQSO/+alkTBOS+v1kiLLYr2Pwei6fSqtN5p3WXZiq7yEydWg7Xmf\nXJ7xulR6wrn5BsR+WRkMC7FBlut5c+3FMgjnm9X6UmpkEAhf/lo=\n=mZGC\n-----END PGP SIGNATURE-----",
        "payload": "tree 779d174ed05e6f63ecf76bae57a27d83a208f86d\nparent d2a78ee9288e4d3bace9125bcfae6b7747f85982\nauthor Anthony Ronning <anthonyronning@gmail.com> 1616358145 +0000\ncommitter Anthony Ronning <anthonyronning@gmail.com> 1616367418 +0000\n\nfuzz: execute each file in dir without fuzz engine\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8ee766ed75fbf0481729d7302cdf115a8bc6877",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c8ee766ed75fbf0481729d7302cdf115a8bc6877",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8ee766ed75fbf0481729d7302cdf115a8bc6877/comments",
    "author": {
      "login": "AnthonyRonning",
      "id": 10763569,
      "node_id": "MDQ6VXNlcjEwNzYzNTY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10763569?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AnthonyRonning",
      "html_url": "https://github.com/AnthonyRonning",
      "followers_url": "https://api.github.com/users/AnthonyRonning/followers",
      "following_url": "https://api.github.com/users/AnthonyRonning/following{/other_user}",
      "gists_url": "https://api.github.com/users/AnthonyRonning/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AnthonyRonning/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AnthonyRonning/subscriptions",
      "organizations_url": "https://api.github.com/users/AnthonyRonning/orgs",
      "repos_url": "https://api.github.com/users/AnthonyRonning/repos",
      "events_url": "https://api.github.com/users/AnthonyRonning/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AnthonyRonning/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "AnthonyRonning",
      "id": 10763569,
      "node_id": "MDQ6VXNlcjEwNzYzNTY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10763569?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AnthonyRonning",
      "html_url": "https://github.com/AnthonyRonning",
      "followers_url": "https://api.github.com/users/AnthonyRonning/followers",
      "following_url": "https://api.github.com/users/AnthonyRonning/following{/other_user}",
      "gists_url": "https://api.github.com/users/AnthonyRonning/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AnthonyRonning/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AnthonyRonning/subscriptions",
      "organizations_url": "https://api.github.com/users/AnthonyRonning/orgs",
      "repos_url": "https://api.github.com/users/AnthonyRonning/repos",
      "events_url": "https://api.github.com/users/AnthonyRonning/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AnthonyRonning/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d2a78ee9288e4d3bace9125bcfae6b7747f85982",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2a78ee9288e4d3bace9125bcfae6b7747f85982",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d2a78ee9288e4d3bace9125bcfae6b7747f85982"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 43,
      "deletions": 3
    },
    "files": [
      {
        "sha": "06ac178a22422a31a0b853cb979ddda0a9fa62f9",
        "filename": "src/test/fuzz/fuzz.cpp",
        "status": "modified",
        "additions": 43,
        "deletions": 3,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8ee766ed75fbf0481729d7302cdf115a8bc6877/src/test/fuzz/fuzz.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8ee766ed75fbf0481729d7302cdf115a8bc6877/src/test/fuzz/fuzz.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/fuzz.cpp?ref=c8ee766ed75fbf0481729d7302cdf115a8bc6877",
        "patch": "@@ -8,6 +8,7 @@\n #include <util/check.h>\n \n #include <cstdint>\n+#include <filesystem>\n #include <unistd.h>\n #include <vector>\n \n@@ -56,6 +57,23 @@ static bool read_stdin(std::vector<uint8_t>& data)\n }\n #endif\n \n+#if defined(PROVIDE_FUZZ_MAIN_FUNCTION)\n+static bool read_file(std::filesystem::path p, std::vector<uint8_t>& data)\n+{\n+    uint8_t buffer[1024];\n+    FILE *f = fsbridge::fopen(p.string(), \"rb\");\n+    if (f == nullptr)\n+        return false;\n+    do {\n+        const size_t length = fread(buffer, sizeof(uint8_t), sizeof(buffer), f);\n+        Assert(!ferror(f));\n+        data.insert(data.end(), buffer, buffer + length);\n+    } while (!feof(f));\n+    fclose(f);\n+    return true;\n+}\n+#endif\n+\n // This function is used by libFuzzer\n extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size)\n {\n@@ -93,11 +111,33 @@ int main(int argc, char** argv)\n         test_one_input(buffer);\n     }\n #else\n+    char* seed_path{nullptr};\n+    if (argc > 1) {\n+        seed_path = *(argv+1);\n+    }\n+\n     std::vector<uint8_t> buffer;\n-    if (!read_stdin(buffer)) {\n-        return 0;\n+    if (seed_path == nullptr) {\n+        if (!read_stdin(buffer)) {\n+            return 0;\n+        }\n+        test_one_input(buffer);\n+    } else {\n+        if(std::filesystem::is_directory(seed_path)) {\n+            for (auto& file : std::filesystem::directory_iterator{seed_path}) {\n+                if (!read_file(file, buffer)) {\n+                    return 0;\n+                }\n+                test_one_input(buffer);\n+                buffer.clear();\n+            }\n+        } else {\n+            if (!read_file(seed_path, buffer)) {\n+                return 0;\n+            }\n+            test_one_input(buffer);\n+        }\n     }\n-    test_one_input(buffer);\n #endif\n     return 0;\n }"
      }
    ]
  },
  {
    "sha": "3e3bf7ac6f3114e7a57597fc309066998cf65068",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZTNiZjdhYzZmMzExNGU3YTU3NTk3ZmMzMDkwNjY5OThjZjY1MDY4",
    "commit": {
      "author": {
        "name": "Anthony Ronning",
        "email": "anthonyronning@gmail.com",
        "date": "2021-04-05T15:45:04Z"
      },
      "committer": {
        "name": "Anthony Ronning",
        "email": "anthonyronning@gmail.com",
        "date": "2021-04-22T22:01:04Z"
      },
      "message": "fuzz: execute each file in dir without fuzz engine",
      "tree": {
        "sha": "d28c1a53e9e0185c995759e4d85f18598461ec9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d28c1a53e9e0185c995759e4d85f18598461ec9b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3e3bf7ac6f3114e7a57597fc309066998cf65068",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEy3SPLqaG+moj8tw5poQhvYeMPuwFAmCB8iwACgkQpoQhvYeM\nPuyzNxAAnIxduP7HTEPEJ0D2hpAgaQHQKVGF5CEgEkiuwt/8C/LdnD3oSj22dqNZ\n1OR+rNwBVYnsO0DZ9Pp9kygKrxq2yuHAugI25F3PDo6XpC8CU7Tze4ccPhUMvWnL\nJxm5vTzubT+sCYjYP23R0rTDwOG4NMQPIxGMEZTgbFQUlNmnK5xxMdWQpKDehQ85\nspXG2r0WZPhCc3n61hT+eWGv/yq6zgMV7sbILXSD3OzQYDqvYHGxBfzxvN+1Iw8A\nz3g99v2RSXp6NJeEj5N/sJmf6e2/8BrYSAuZcXCPOWIOfAYQgS5YC/R3EWdrseQv\nFhhbYt09o/essXQjmA5eTRsXL97J3GATdUMOv/8Vj4urUrIedt5EkriJYyGZSc4G\nT8v8wqysxup+CMXYREhKYdSWf+XMpPczm0aynO3gVrG8D+q3IAZ9hD3TZEMEjq+M\nU/J1TZF6gDvlqGFxG7mGKrOzQSDq6zF6LouqKUF0H01wAL1hr4MJ8pYESfhqWkt6\nNlHLBfTFuyGVwnPHIhL5eS/QCtgpdlS+ZZjTULPOmHrCKs28CMVEeB7Kfd+ZFGoc\nfLUtR41r8yopyo8HffTwujD+JuFkRoNpy7fUzfoL7dsTufbd8LqlayAuReyl4E6j\nWRCz4ALmKrh7fImFa13IBIjCvBbVYH6Jgsv+QZV92zzUIKdP3Mc=\n=Mx/b\n-----END PGP SIGNATURE-----",
        "payload": "tree d28c1a53e9e0185c995759e4d85f18598461ec9b\nparent c8ee766ed75fbf0481729d7302cdf115a8bc6877\nauthor Anthony Ronning <anthonyronning@gmail.com> 1617637504 +0000\ncommitter Anthony Ronning <anthonyronning@gmail.com> 1619128864 +0000\n\nfuzz: execute each file in dir without fuzz engine\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e3bf7ac6f3114e7a57597fc309066998cf65068",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3e3bf7ac6f3114e7a57597fc309066998cf65068",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e3bf7ac6f3114e7a57597fc309066998cf65068/comments",
    "author": {
      "login": "AnthonyRonning",
      "id": 10763569,
      "node_id": "MDQ6VXNlcjEwNzYzNTY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10763569?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AnthonyRonning",
      "html_url": "https://github.com/AnthonyRonning",
      "followers_url": "https://api.github.com/users/AnthonyRonning/followers",
      "following_url": "https://api.github.com/users/AnthonyRonning/following{/other_user}",
      "gists_url": "https://api.github.com/users/AnthonyRonning/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AnthonyRonning/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AnthonyRonning/subscriptions",
      "organizations_url": "https://api.github.com/users/AnthonyRonning/orgs",
      "repos_url": "https://api.github.com/users/AnthonyRonning/repos",
      "events_url": "https://api.github.com/users/AnthonyRonning/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AnthonyRonning/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "AnthonyRonning",
      "id": 10763569,
      "node_id": "MDQ6VXNlcjEwNzYzNTY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10763569?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AnthonyRonning",
      "html_url": "https://github.com/AnthonyRonning",
      "followers_url": "https://api.github.com/users/AnthonyRonning/followers",
      "following_url": "https://api.github.com/users/AnthonyRonning/following{/other_user}",
      "gists_url": "https://api.github.com/users/AnthonyRonning/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AnthonyRonning/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AnthonyRonning/subscriptions",
      "organizations_url": "https://api.github.com/users/AnthonyRonning/orgs",
      "repos_url": "https://api.github.com/users/AnthonyRonning/repos",
      "events_url": "https://api.github.com/users/AnthonyRonning/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AnthonyRonning/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c8ee766ed75fbf0481729d7302cdf115a8bc6877",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8ee766ed75fbf0481729d7302cdf115a8bc6877",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c8ee766ed75fbf0481729d7302cdf115a8bc6877"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 37,
      "deletions": 22
    },
    "files": [
      {
        "sha": "688f909db12d29012d36ee586529807f75994499",
        "filename": "src/test/fuzz/fuzz.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 22,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e3bf7ac6f3114e7a57597fc309066998cf65068/src/test/fuzz/fuzz.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e3bf7ac6f3114e7a57597fc309066998cf65068/src/test/fuzz/fuzz.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/fuzz.cpp?ref=3e3bf7ac6f3114e7a57597fc309066998cf65068",
        "patch": "@@ -8,7 +8,7 @@\n #include <util/check.h>\n \n #include <cstdint>\n-#include <filesystem>\n+#include <signal.h>\n #include <unistd.h>\n #include <vector>\n \n@@ -57,23 +57,35 @@ static bool read_stdin(std::vector<uint8_t>& data)\n }\n #endif\n \n-#if defined(PROVIDE_FUZZ_MAIN_FUNCTION)\n-static bool read_file(std::filesystem::path p, std::vector<uint8_t>& data)\n+#if defined(PROVIDE_FUZZ_MAIN_FUNCTION) && !defined(__AFL_LOOP)\n+static bool read_file(fs::path p, std::vector<uint8_t>& data)\n {\n     uint8_t buffer[1024];\n-    FILE *f = fsbridge::fopen(p.string(), \"rb\");\n-    if (f == nullptr)\n-        return false;\n+    FILE* f = fsbridge::fopen(p.string(), \"rb\");\n+    if (f == nullptr) return false;\n     do {\n         const size_t length = fread(buffer, sizeof(uint8_t), sizeof(buffer), f);\n-        Assert(!ferror(f));\n+        if (ferror(f)) return false;\n         data.insert(data.end(), buffer, buffer + length);\n     } while (!feof(f));\n     fclose(f);\n     return true;\n }\n #endif\n \n+#if defined(PROVIDE_FUZZ_MAIN_FUNCTION) && !defined(__AFL_LOOP)\n+fs::path g_seed_path;\n+void signal_handler(int signal)\n+{\n+    if (signal == SIGABRT) {\n+        std::cerr << \"Error processing seed \" << g_seed_path << std::endl;\n+    } else {\n+        std::cerr << \"Unexpected signal \" << signal << \" received\\n\";\n+    }\n+    std::_Exit(EXIT_FAILURE);\n+}\n+#endif\n+\n // This function is used by libFuzzer\n extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size)\n {\n@@ -111,33 +123,36 @@ int main(int argc, char** argv)\n         test_one_input(buffer);\n     }\n #else\n-    char* seed_path{nullptr};\n-    if (argc > 1) {\n-        seed_path = *(argv+1);\n-    }\n-\n     std::vector<uint8_t> buffer;\n-    if (seed_path == nullptr) {\n+    if (argc <= 1) {\n         if (!read_stdin(buffer)) {\n             return 0;\n         }\n         test_one_input(buffer);\n-    } else {\n-        if(std::filesystem::is_directory(seed_path)) {\n-            for (auto& file : std::filesystem::directory_iterator{seed_path}) {\n-                if (!read_file(file, buffer)) {\n-                    return 0;\n-                }\n+        return 0;\n+    }\n+    signal(SIGABRT, signal_handler);\n+    int tested = 0;\n+    for (int i = 1; i < argc; ++i) {\n+        fs::path seed_path(*(argv + i));\n+        if (fs::is_directory(seed_path)) {\n+            for (fs::directory_iterator it(seed_path); it != fs::directory_iterator(); ++it) {\n+                if (!fs::is_regular_file(it->path())) continue;\n+                g_seed_path = it->path();\n+                Assert(read_file(it->path(), buffer));\n                 test_one_input(buffer);\n+                ++tested;\n                 buffer.clear();\n             }\n         } else {\n-            if (!read_file(seed_path, buffer)) {\n-                return 0;\n-            }\n+            g_seed_path = seed_path;\n+            Assert(read_file(seed_path, buffer));\n             test_one_input(buffer);\n+            ++tested;\n+            buffer.clear();\n         }\n     }\n+    std::cout << \"tested \" << tested << \" files\\n\";\n #endif\n     return 0;\n }"
      }
    ]
  }
]