AnthonyRonning,2021-03-22 01:40:04,"Oh, didn't realize that `filesystem` isn't available right now, was just going by the issue suggestion when I implemented it here. Saw this issue: https://github.com/bitcoin/bitcoin/pull/20744\n\n I guess the alternative is to either wait for the switch or to go with the boost approach for iterating through files in a directory? ",https://github.com/bitcoin/bitcoin/pull/21496#issuecomment-803707192,803707192,
ajtowns,2021-03-22 01:48:41,"Concept ACK. Not sure if there's much point to passing in a single file (as opposed to `< single_file`). If a file can't be read, maybe `continue` to try the rest of them, or `assert(false)` to indicate an error rather than `return 0` though?",https://github.com/bitcoin/bitcoin/pull/21496#issuecomment-803709610,803709610,
ajtowns,2021-03-22 01:55:36,"Might be good to update `test/fuzz/test_runner.py` to work with these changes -- it's got a couple of hardcoded things that expect libFuzzer/ENABLE_FUZZ and a few things that won't work without fuzzing (`m_dir`/`merge_inputs`), and adds a `-runs=1` arg that's not needed without fuzzing, but aside from that works fine with phuzzing (phony fuzzing (tm)). ",https://github.com/bitcoin/bitcoin/pull/21496#issuecomment-803711328,803711328,
fanquake,2021-03-22 05:05:19,"> Oh, didn't realize that filesystem isn't available right now,\n\nIt wont be available for general use in any bitcoind code for a while yet. @MarcoFalke is your intention to start using `<filesystem>` just in the fuzzing related code? We might have to cherry-pick a change out of #20744.",https://github.com/bitcoin/bitcoin/pull/21496#issuecomment-803762737,803762737,
MarcoFalke,2021-03-22 05:25:30,"This will be build in the regular ""non-fuzz-engine"" target, so it can't yet use std::fs (my bad).",https://github.com/bitcoin/bitcoin/pull/21496#issuecomment-803770581,803770581,
practicalswift,2021-03-22 16:14:46,"Concept ACK\n\nIt would be nice if multiple files or directories could be specified in order to mimic the libFuzzer command-line interface.\n\nI'm thinking something like this:\n\n```\n$ FUZZ=harness src/test/fuzz/fuzz\n# Would use test case provided via stdin.\n\n$ FUZZ=harness src/test/fuzz/fuzz dir1\n# Would use test cases from `dir1/` assuming `dir1` is a directory.\n\n$ FUZZ=harn",https://github.com/bitcoin/bitcoin/pull/21496#issuecomment-804196991,804196991,
AnthonyRonning,2021-03-22 16:44:41,"Great feedback so far, thanks all! \n\nI'll swap out filesystem for boost, handle consecutive dir/file args, look into whats going on with `test/fuzz/test_runner.py`, and some of the other points brought up. ",https://github.com/bitcoin/bitcoin/pull/21496#issuecomment-804219678,804219678,
MarcoFalke,2021-03-28 11:19:16,"I think the `test_runner` changes can be done in a follow-up, since they are not required to add the feature. Also, they will raise the question how `test_runner` should deal with different fuzz engines in general.",https://github.com/bitcoin/bitcoin/pull/21496#issuecomment-808882500,808882500,
DrahtBot,2021-03-28 11:25:11,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21936 (fuzz: Terminate immediately if a fuzzing harness tries to create a TCP socket (belt and suspenders) by practicalsw",https://github.com/bitcoin/bitcoin/pull/21496#issuecomment-808883169,808883169,
AnthonyRonning,2021-04-05 17:05:36,"Sorry about the delay on this. Updated the code and the PR description to include boost, multiple arguments that can be either files or directories (including wildcard support), as well as some asserts in the file readings. Ignored `test_runner` for now but can look into it on a follow up.",https://github.com/bitcoin/bitcoin/pull/21496#issuecomment-813507656,813507656,
DrahtBot,2021-05-21 08:53:47,"<!--cf906140f33d8803c4a75a2196329ecb-->\nüêô This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/21496#issuecomment-845796678,845796678,
adamjonas,2021-08-05 23:19:16,@AnthonyRonning friendly ping to rebase.,https://github.com/bitcoin/bitcoin/pull/21496#issuecomment-893885633,893885633,
MarcoFalke,2021-08-18 17:12:05,"Marked ""up for grabs"" for now.",https://github.com/bitcoin/bitcoin/pull/21496#issuecomment-901285122,901285122,
MarcoFalke,2021-03-22 05:30:54,"```suggestion\nstatic bool read_file(fs::path p, std::vector<uint8_t>& data)\n```\n\nThe wrapper should work fine here?",https://github.com/bitcoin/bitcoin/pull/21496#discussion_r598434096,598434096,src/test/fuzz/fuzz.cpp
practicalswift,2021-04-06 09:38:43,Nit: Could `clang-format -i src/test/fuzz/fuzz.cpp` to get expected formatting? :),https://github.com/bitcoin/bitcoin/pull/21496#discussion_r607698096,607698096,src/test/fuzz/fuzz.cpp
AnthonyRonning,2021-04-19 21:23:10,Thanks! Wasn't aware of `clang-format` yet!,https://github.com/bitcoin/bitcoin/pull/21496#discussion_r616187180,616187180,src/test/fuzz/fuzz.cpp
ajtowns,2021-04-19 21:23:21,`if (ferror(f)) return false;` ? (Same behaviour as fopen failure),https://github.com/bitcoin/bitcoin/pull/21496#discussion_r616187274,616187274,src/test/fuzz/fuzz.cpp
AnthonyRonning,2021-04-19 21:23:37,"Yup, that worked, thanks!",https://github.com/bitcoin/bitcoin/pull/21496#discussion_r616187386,616187386,src/test/fuzz/fuzz.cpp
ajtowns,2021-04-19 21:26:52,"`if (!is_regular_file(..)) { std::cerr << ""Not a file: "" << it->path() << endl; abort(); }` ?\n`if (!read_file(..)) { std::cerr << ""Error reading file: "" << it->path() << endl; abort(); }` ?\n\nSeems like it would be helpful to know what file is causing a problem. Not sure that skipping non-regular files rather than erroring on them makes sense?",https://github.com/bitcoin/bitcoin/pull/21496#discussion_r616189111,616189111,src/test/fuzz/fuzz.cpp
ajtowns,2021-04-19 22:00:38,Is it worth reporting the number of tests run when all the inputs succeed? It's a bit unclear that anything happened otherwise.,https://github.com/bitcoin/bitcoin/pull/21496#discussion_r616206408,616206408,src/test/fuzz/fuzz.cpp
ajtowns,2021-04-20 14:04:03,"Actually, would be helpful to know what file is causing a problem if the fuzz testing fails too. One way to do that would be to use a signal handler to catch SIGABRT, and pass the filename via a global, something like:\n\n```c++\n#if defined(PROVIDE_FUZZ_MAIN_FUNCTION) && !defined(__AFL_LOOP)\nfs::path g_seed_path;\nvoid signal_handler(int signal) \n{\n    if (signal == SIGABRT) {\n       ",https://github.com/bitcoin/bitcoin/pull/21496#discussion_r616715114,616715114,src/test/fuzz/fuzz.cpp
MarcoFalke,2021-04-20 18:57:49,"```suggestion\n    if (f == nullptr) {\n```\n\nAccording to style-guide",https://github.com/bitcoin/bitcoin/pull/21496#discussion_r616957010,616957010,src/test/fuzz/fuzz.cpp
AnthonyRonning,2021-04-22 22:04:38,"Good point, the assert is done in the parent method. Changed.",https://github.com/bitcoin/bitcoin/pull/21496#discussion_r618767380,618767380,src/test/fuzz/fuzz.cpp
AnthonyRonning,2021-04-22 22:05:19,"Great suggestion, otherwise how is one to know if there's an issue. Added the suggested code!",https://github.com/bitcoin/bitcoin/pull/21496#discussion_r618767661,618767661,src/test/fuzz/fuzz.cpp
AnthonyRonning,2021-04-22 22:05:54,Added a counter,https://github.com/bitcoin/bitcoin/pull/21496#discussion_r618767919,618767919,src/test/fuzz/fuzz.cpp
AnthonyRonning,2021-04-22 22:06:34,"Good catch, I actually went with \n\n```\nif (f == nullptr) return false;\n```\n\nif that's alright instead, to be consistent with one liners. ",https://github.com/bitcoin/bitcoin/pull/21496#discussion_r618768215,618768215,src/test/fuzz/fuzz.cpp
