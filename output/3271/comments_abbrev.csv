jgarzik,2013-11-17T04:36:49Z,"While the motivation is appreciated...  meh, a bit disinclined to stir every printf line, and break tons of other patches, for this.\n",https://github.com/bitcoin/bitcoin/pull/3271#issuecomment-28642450,28642450,
laanwj,2013-11-17T07:41:25Z,"@jgarzik That's also why I have discouraged doing this.\n\nOn the other hand, it appears pretty trivial to rebase patches to this and it mostly (only) affects debug printing.\n",https://github.com/bitcoin/bitcoin/pull/3271#issuecomment-28644305,28644305,
laanwj,2013-11-17T09:02:23Z,"Apart from the above nits I think this is overall a good idea (printf is ugly and un-typesafe after all, so getting rid of it in favor of a safer method reduces risks. Also depending on C99 as well as C++ was a bit weird), but we may want to merge other pull requests first to prevent conflicts.\n",https://github.com/bitcoin/bitcoin/pull/3271#issuecomment-28645089,28645089,
sipa,2013-11-17T14:27:44Z,"I'd prefer a `CLogStream(""class"") << ...`, with ""class"" optional as well.\n\nSince this is something that is often written during debugging, maybe just call it `Log()`?\n",https://github.com/bitcoin/bitcoin/pull/3271#issuecomment-28649395,28649395,
sipa,2013-11-17T14:29:26Z,Why remove error's return type?\n,https://github.com/bitcoin/bitcoin/pull/3271#issuecomment-28649428,28649428,
brandondahler,2013-11-17T14:54:11Z,"Because error always returned false, which made the fact that it returns anything confusing (until you looked up the definition).  Error was a subroutine acting like a function. \n\n> On Nov 17, 2013, at 8:29 AM, Pieter Wuille notifications@github.com wrote:\n> \n> Why remove error's return value?\n> \n> â€”\n> Reply to this email directly or view it on GitHub.\n",https://github.com/bitcoin/bitcoin/pull/3271#issuecomment-28649828,28649828,
brandondahler,2013-11-18T06:07:16Z,"@sipa and @laanwj:  following your suggestions, I have created the Log class (log.h and log.cpp).  At its core it works by multiplexing an input to multiple outputs.  \n\nSince generally flags won't change after instantiation of the class (except for changes from other threads), the constructor of the instantiation reads the different flags and decides what streams to send the data to.\n\nFor all ",https://github.com/bitcoin/bitcoin/pull/3271#issuecomment-28677269,28677269,
brandondahler,2013-11-19T01:32:37Z,"Fixed problems hopefully, rebased.\n",https://github.com/bitcoin/bitcoin/pull/3271#issuecomment-28757904,28757904,
gavinandresen,2013-11-20T01:43:26Z,"I prefer printf-style syntax over << "" "" << etc, so I don't like this pull.  It is 700 extra lines of code for approximately zero practical benefit that I can see.\n",https://github.com/bitcoin/bitcoin/pull/3271#issuecomment-28857110,28857110,
brandondahler,2013-11-20T04:10:50Z,"@gavinandresen:  I understand feeling that there is a lot of one-time risk involved in moving from printf to stream style conversion; however, I completely disagree that there is no practical benefit.\n\n1)  This makes maintenance easier\n\nThe code is much less complex overall.  This removes some ugly compatibility #defines, attribute markings, and even hacks.\n\n2)  Platform independence\n\nWe a",https://github.com/bitcoin/bitcoin/pull/3271#issuecomment-28862460,28862460,
brandondahler,2013-11-20T04:18:07Z,"On another note, does anyone have any idea why pull tester is failing?  The only lines that look bad are:\n\n```\n=============\n1 test passed\n=============\nmake[4]: Leaving directory `/mnt/bitcoin/linux-build/src/test'\nmake[3]: Leaving directory `/mnt/bitcoin/linux-build/src/test'\nmake[2]: Leaving directory `/mnt/bitcoin/linux-build/src/test'\nmake[1]: Leaving directory `/mnt/bitcoin/linux-bu",https://github.com/bitcoin/bitcoin/pull/3271#issuecomment-28862686,28862686,
laanwj,2013-11-20T07:07:09Z,"@gavinandresen Agreed, the problem isn't with printf-style _syntax_, it's with the printf function  - which (in our usage) isn't part of the C++ standard, so we had a dependency on C99-like formats that broke down on Windows without special mingw defines. Also it's not type safe, easy to mess up the stack with some wrong % char, and uses a variable-number-of-parameters hack which breaks down for s",https://github.com/bitcoin/bitcoin/pull/3271#issuecomment-28867775,28867775,
laanwj,2013-11-20T07:09:49Z,"Also -- do we really need our own class for handling time? (bitcointime.cpp/h) How is this related to the subject of this pull?\nReducing depenency on boost is not a goal! If boost offers some functionality, please use that instead of rolling our own.\n\nThis changes way too many things, please keep it focused.\n",https://github.com/bitcoin/bitcoin/pull/3271#issuecomment-28867859,28867859,
brandondahler,2013-11-20T13:04:55Z,"@laanwj I would not consider the use of ostringstream as ""rolling my own"", namely because that is the only way provided by the C++ standard library to convert random types to strings and vice versa.\n\nIf you are talking about the Log class, the first commit started off without it, but it was added because it simplifies the actual logging process (the business logic that goes in to putting type T ",https://github.com/bitcoin/bitcoin/pull/3271#issuecomment-28887312,28887312,
gavinandresen,2013-11-29T20:59:33Z,Closing; no consensus this is a good idea.  Maybe bring back as a boost::format version that doesn't break so many other pull requests.\n,https://github.com/bitcoin/bitcoin/pull/3271#issuecomment-29537313,29537313,
brandondahler,2013-11-30T02:46:45Z,"@gavinandresen   Can I request a temporary re-opening--I made changes but did not request comments on them (was busy and didn't write them up).\n\nUpdated summary of changes that are in this pull request:\n1.  Replaced LogPrintf with new Log class that is functionally the same, but instead works by multiplexing log data into a set of streams, determined at the time of the construction of the class",https://github.com/bitcoin/bitcoin/pull/3271#issuecomment-29544482,29544482,
sipa,2013-12-01T17:18:37Z,I'm personally fine with the general direction this is going in. In particular:\n- Splitting off log and time functionality to their own source files is good - util is a mess.\n- No problem with using a more ideomatic C++ way for formatting output - especially if it provides better type-safety.\n- The Log(class) << some << messages looks ok to me.\n\nI'm less sure about things like `_<std::string>,https://github.com/bitcoin/bitcoin/pull/3271#issuecomment-29577905,29577905,
brandondahler,2013-12-05T06:24:52Z,"Updated to address items above and rebased, they will not propagate to this pull request unless the request is re-opened.\n",https://github.com/bitcoin/bitcoin/pull/3271#issuecomment-29874436,29874436,
laanwj,2013-12-05T10:31:06Z,"Reopening this -- I don't expect that it gets merged for 0.9, as we don't want to break all other pulls, and it needs a lot of work, but overall it's going the right way IMO (boost::format instead of ugly over-verbose stdio stream syntax).\n",https://github.com/bitcoin/bitcoin/pull/3271#issuecomment-29887094,29887094,
BitcoinPullTester,2013-12-06T03:43:23Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/e39b26c0e839dc5b2e8436da2b25816ccb1938d9 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/cu",https://github.com/bitcoin/bitcoin/pull/3271#issuecomment-29961514,29961514,
p12tic,2013-12-28T23:05:37Z,"https://github.com/c42f/tinyformat might be a good replacement. As opposed to boost::format, the format is exactly the same as the one that `printf` uses.\n",https://github.com/bitcoin/bitcoin/pull/3271#issuecomment-31306906,31306906,
laanwj,2013-12-29T09:46:40Z,"@p12tic that actually looks very good, it is a type-safe strprintf() implementation in one header file and is not dependent on the platform's printf functions. According to the description it supports C99 format characters, which is a requirement.\nCould be a drop-in replacement.\n",https://github.com/bitcoin/bitcoin/pull/3271#issuecomment-31314239,31314239,
laanwj,2014-01-16T16:00:22Z,See #3549\n,https://github.com/bitcoin/bitcoin/pull/3271#issuecomment-32481972,32481972,
laanwj,2013-11-17T07:40:44Z,"Why is the outer LogPrint() needed? It looks like a combination of old and new style\nWhy not just \n\n```\nCLogStream([optional category]) << ""init message: "" << message << ""\n"";\n```\n\n(similar to std::cout/cin)\n",https://github.com/bitcoin/bitcoin/pull/3271#discussion_r7711892,7711892,src/noui.cpp
laanwj,2013-11-17T07:48:52Z,Why add .str() here? There should be no reason to thouch these lines as they don't use *printf.\n,https://github.com/bitcoin/bitcoin/pull/3271#discussion_r7711897,7711897,src/main.cpp
brandondahler,2013-11-18T05:51:59Z,"Had to convert translation (aka _(""..."") function) to something that still provides printf funcationality, without having printf avaliable.  _(""..."") now has a return type of boost::format, which allows passing of parameters into the format via the % operator.  The down side to this is that the boost::format class then has to be converted to a std::string, meaning calling .str() on the boost::form",https://github.com/bitcoin/bitcoin/pull/3271#discussion_r7716980,7716980,src/main.cpp
brandondahler,2013-11-18T05:56:52Z,This has been rectified with the new Log class.\n,https://github.com/bitcoin/bitcoin/pull/3271#discussion_r7717014,7717014,src/noui.cpp
laanwj,2013-11-18T08:15:03Z,When a function has only one output using a return value is clearer than output parameter syntax. Any specific reason to switch to &pointer here? (maybe parse error reporting?)\n,https://github.com/bitcoin/bitcoin/pull/3271#discussion_r7718300,7718300,src/bitcoinrpc.cpp
laanwj,2013-11-18T08:16:07Z,@brandondahler thanks; much better this way\n,https://github.com/bitcoin/bitcoin/pull/3271#discussion_r7718311,7718311,src/noui.cpp
brandondahler,2013-11-19T01:29:47Z,"The reason for the switch is because fromstr is now a templated function.  In order to have it detect what type the function should return, the function needs an input of that type.\n\nIn some other places, I've used the alternate usage of this function:\n\n```\nproto = fromstr(ver+7, (int64_t*) NULL);\n```\n\nIf desired, we can easily add back int64fromstr like so:\n\n```\ninline int64_t int64fro",https://github.com/bitcoin/bitcoin/pull/3271#discussion_r7746343,7746343,src/bitcoinrpc.cpp
HapeMask,2013-11-19T05:57:11Z,"Was bored and reading PRs when I saw this. There is no need to take a pointer argument solely for type deduction. You can be explicit when you call the function:\n\n```\nproto = fromstr<int64_t>(ver+7);\n```\n\nAt least in the (type*)NULL case, this is cleaner. It would require that fromstr default the ""pn"" parameter to NULL.\n",https://github.com/bitcoin/bitcoin/pull/3271#discussion_r7749318,7749318,src/bitcoinrpc.cpp
laanwj,2013-11-19T07:15:11Z,I was about to suggest what @HapeMask says\n,https://github.com/bitcoin/bitcoin/pull/3271#discussion_r7749976,7749976,src/bitcoinrpc.cpp
laanwj,2013-11-19T14:06:55Z,"I'm still not really convinced that this is better than ""%04x"", it is much much more verbose. Wouldn't it be possible to keep mostly the same short syntax, but gain typesafeness, using boost::format?\n(I mean specifically in these cases where the output will end up in a string anyway, not the debug logging, of course you need to use std::stream syntax there)\n",https://github.com/bitcoin/bitcoin/pull/3271#discussion_r7757586,7757586,src/db.cpp
laanwj,2013-11-19T14:58:58Z,"Agreed, makes perfect sense, though it's a little bit ugly, as _() is used for non-format messages in many places. Not much to do about it I guess, no way to overload functions on return type.\n",https://github.com/bitcoin/bitcoin/pull/3271#discussion_r7759211,7759211,src/main.cpp
brandondahler,2013-11-20T01:19:38Z,"That is something that I never have run into in C++, thanks for syntax lesson!  Fixing to take template argument this way instead.\n",https://github.com/bitcoin/bitcoin/pull/3271#discussion_r7779956,7779956,src/bitcoinrpc.cpp
brandondahler,2013-11-20T12:47:01Z,"@laanwj bitcointime.h/cpp had to be added to remove the circular dependency that was caused by adding log.h into its own file, since util.h uses Log in various places.\n\nMoving it into its own files also allows us to namespace the functions, making it clear where they are coming from when seeing them dispersed across several files.\n",https://github.com/bitcoin/bitcoin/pull/3271#discussion_r7789463,7789463,src/log.h
Diapolo,2013-11-22T07:41:09Z,"This is really too verbose, so that I don't think it's a benefit to merge this (yet)...\n",https://github.com/bitcoin/bitcoin/pull/3271#discussion_r7849903,7849903,src/db.cpp
sipa,2013-12-01T17:20:28Z,"Though time-related, this is really just for initialized the PRNG. I think it belongs more in util.\n",https://github.com/bitcoin/bitcoin/pull/3271#discussion_r8014307,8014307,src/bitcointime.cpp
sipa,2013-12-01T17:21:37Z,"It's really quite ugly that this depends on netbase data structures. I don't have a better proposal for now, though.\n",https://github.com/bitcoin/bitcoin/pull/3271#discussion_r8014309,8014309,src/bitcointime.h
sipa,2013-12-01T17:23:09Z,"I don't think these belong in core at all (or should be part of CTransaction). They are validation/relaying related constants that belong in main. Given that the mempool code refactorings that are going on probably rely on it, we can keep it like this for now, but I'd prefer to not have these in core.\n",https://github.com/bitcoin/bitcoin/pull/3271#discussion_r8014316,8014316,src/core.cpp
sipa,2013-12-01T17:26:17Z,Is this comment up to date?\n,https://github.com/bitcoin/bitcoin/pull/3271#discussion_r8014326,8014326,src/log.h
laanwj,2013-12-02T06:27:03Z,"Agreed @sipa, it's not part of the block verification/consensus so should likely be somewhere else.\n(then again, this pull is not the place to fix that)\n",https://github.com/bitcoin/bitcoin/pull/3271#discussion_r8018306,8018306,src/core.cpp
brandondahler,2013-12-05T03:19:05Z,Not sure what flawed logic I was following -- reverted.\n,https://github.com/bitcoin/bitcoin/pull/3271#discussion_r8119599,8119599,src/core.cpp
brandondahler,2013-12-05T04:25:26Z,"Wasn't following the advice either, after reviewing it.\n\nSolved problem in more complex, but more understandable way, including new comments that explains problem and reason why the solution works.\n",https://github.com/bitcoin/bitcoin/pull/3271#discussion_r8120234,8120234,src/log.h
brandondahler,2013-12-05T04:27:40Z,"It is just a forward declare here, are you referring to the #include in the cpp?\n",https://github.com/bitcoin/bitcoin/pull/3271#discussion_r8120251,8120251,src/bitcointime.h
brandondahler,2013-12-05T04:27:48Z,Moving back.\n,https://github.com/bitcoin/bitcoin/pull/3271#discussion_r8120253,8120253,src/bitcointime.cpp
sipa,2013-12-05T11:35:57Z,By 'depends' I don't mean a code dependency. Just the fact that this module is not usable without the other.\n,https://github.com/bitcoin/bitcoin/pull/3271#discussion_r8126486,8126486,src/bitcointime.h
