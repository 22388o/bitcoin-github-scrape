[
  {
    "sha": "7475e1f365f0ccbcf4585c0b61e796a361f89e7a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NDc1ZTFmMzY1ZjBjY2JjZjQ1ODVjMGI2MWU3OTZhMzYxZjg5ZTdh",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2021-05-16T11:31:01Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2021-05-16T11:38:47Z"
      },
      "message": "Reduce code complexity of GenMinFee()",
      "tree": {
        "sha": "b7d322594ca8cf425e897d20eeb5e1b7bb34d2ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b7d322594ca8cf425e897d20eeb5e1b7bb34d2ff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7475e1f365f0ccbcf4585c0b61e796a361f89e7a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7475e1f365f0ccbcf4585c0b61e796a361f89e7a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7475e1f365f0ccbcf4585c0b61e796a361f89e7a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7475e1f365f0ccbcf4585c0b61e796a361f89e7a/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c8571486364d6e9ca8c86bd1c81e230ca64f8904",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8571486364d6e9ca8c86bd1c81e230ca64f8904",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c8571486364d6e9ca8c86bd1c81e230ca64f8904"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 2,
      "deletions": 10
    },
    "files": [
      {
        "sha": "e4e850a770b2e36d64f708304807973de1de6225",
        "filename": "src/test/fuzz/tx_pool.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7475e1f365f0ccbcf4585c0b61e796a361f89e7a/src/test/fuzz/tx_pool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7475e1f365f0ccbcf4585c0b61e796a361f89e7a/src/test/fuzz/tx_pool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/tx_pool.cpp?ref=7475e1f365f0ccbcf4585c0b61e796a361f89e7a",
        "patch": "@@ -24,7 +24,6 @@ struct MockedTxPool : public CTxMemPool {\n     void RollingFeeUpdate()\n     {\n         lastRollingFeeUpdate = GetTime();\n-        blockSinceLastRollingFeeBump = true;\n     }\n };\n "
      },
      {
        "sha": "905d80a955c746b870a807aacfb66476c44d4bfa",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 8,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7475e1f365f0ccbcf4585c0b61e796a361f89e7a/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7475e1f365f0ccbcf4585c0b61e796a361f89e7a/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=7475e1f365f0ccbcf4585c0b61e796a361f89e7a",
        "patch": "@@ -590,7 +590,6 @@ void CTxMemPool::removeForBlock(const std::vector<CTransactionRef>& vtx, unsigne\n         ClearPrioritisation(tx->GetHash());\n     }\n     lastRollingFeeUpdate = GetTime();\n-    blockSinceLastRollingFeeBump = true;\n }\n \n void CTxMemPool::_clear()\n@@ -601,7 +600,6 @@ void CTxMemPool::_clear()\n     m_total_fee = 0;\n     cachedInnerUsage = 0;\n     lastRollingFeeUpdate = GetTime();\n-    blockSinceLastRollingFeeBump = false;\n     rollingMinimumFeeRate = 0;\n     ++nTransactionsUpdated;\n }\n@@ -1008,8 +1006,6 @@ void CTxMemPool::UpdateParent(txiter entry, txiter parent, bool add)\n \n CFeeRate CTxMemPool::GetMinFee(size_t sizelimit) const {\n     LOCK(cs);\n-    if (!blockSinceLastRollingFeeBump || rollingMinimumFeeRate == 0)\n-        return CFeeRate(llround(rollingMinimumFeeRate));\n \n     int64_t time = GetTime();\n     if (time > lastRollingFeeUpdate + 10) {\n@@ -1027,15 +1023,13 @@ CFeeRate CTxMemPool::GetMinFee(size_t sizelimit) const {\n             return CFeeRate(0);\n         }\n     }\n-    return std::max(CFeeRate(llround(rollingMinimumFeeRate)), incrementalRelayFee);\n+    return CFeeRate(llround(rollingMinimumFeeRate));\n }\n \n void CTxMemPool::trackPackageRemoved(const CFeeRate& rate) {\n     AssertLockHeld(cs);\n-    if (rate.GetFeePerK() > rollingMinimumFeeRate) {\n+    if (rate.GetFeePerK() > rollingMinimumFeeRate)\n         rollingMinimumFeeRate = rate.GetFeePerK();\n-        blockSinceLastRollingFeeBump = false;\n-    }\n }\n \n void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<COutPoint>* pvNoSpendsRemaining) {"
      },
      {
        "sha": "48056829107c68803db701ad6cea0e77c93dedbc",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7475e1f365f0ccbcf4585c0b61e796a361f89e7a/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7475e1f365f0ccbcf4585c0b61e796a361f89e7a/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=7475e1f365f0ccbcf4585c0b61e796a361f89e7a",
        "patch": "@@ -486,7 +486,6 @@ class CTxMemPool\n     uint64_t cachedInnerUsage GUARDED_BY(cs); //!< sum of dynamic memory usage of all the map elements (NOT the maps themselves)\n \n     mutable int64_t lastRollingFeeUpdate;\n-    mutable bool blockSinceLastRollingFeeBump;\n     mutable double rollingMinimumFeeRate; //!< minimum fee to get into the pool, decreases exponentially\n     mutable Epoch m_epoch GUARDED_BY(cs);\n "
      }
    ]
  },
  {
    "sha": "31c08975aa7faccb3f0d838f46022499d664d229",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMWMwODk3NWFhN2ZhY2NiM2YwZDgzOGY0NjAyMjQ5OWQ2NjRkMjI5",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2021-04-06T14:56:46Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2021-05-16T11:38:47Z"
      },
      "message": "Reduce MinRelayFee slower when Mempool utilised and faster when not.",
      "tree": {
        "sha": "7d670599cd30e44e7df868c347828c85efb8e80b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7d670599cd30e44e7df868c347828c85efb8e80b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/31c08975aa7faccb3f0d838f46022499d664d229",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31c08975aa7faccb3f0d838f46022499d664d229",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/31c08975aa7faccb3f0d838f46022499d664d229",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31c08975aa7faccb3f0d838f46022499d664d229/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7475e1f365f0ccbcf4585c0b61e796a361f89e7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7475e1f365f0ccbcf4585c0b61e796a361f89e7a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7475e1f365f0ccbcf4585c0b61e796a361f89e7a"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 13,
      "deletions": 37
    },
    "files": [
      {
        "sha": "98abb72222cc4152cf366f78f9b0b800360f46b2",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 20,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31c08975aa7faccb3f0d838f46022499d664d229/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31c08975aa7faccb3f0d838f46022499d664d229/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=31c08975aa7faccb3f0d838f46022499d664d229",
        "patch": "@@ -548,29 +548,9 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n \n     std::vector<CTransactionRef> vtx;\n     SetMockTime(42);\n-    SetMockTime(42 + CTxMemPool::ROLLING_FEE_HALFLIFE);\n     BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), maxFeeRateRemoved.GetFeePerK() + 1000);\n     // ... we should keep the same min fee until we get a block\n     pool.removeForBlock(vtx, 1);\n-    SetMockTime(42 + 2*CTxMemPool::ROLLING_FEE_HALFLIFE);\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), llround((maxFeeRateRemoved.GetFeePerK() + 1000)/2.0));\n-    // ... then feerate should drop 1/2 each halflife\n-\n-    SetMockTime(42 + 2*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2);\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(pool.DynamicMemoryUsage() * 5 / 2).GetFeePerK(), llround((maxFeeRateRemoved.GetFeePerK() + 1000)/4.0));\n-    // ... with a 1/2 halflife when mempool is < 1/2 its target size\n-\n-    SetMockTime(42 + 2*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2 + CTxMemPool::ROLLING_FEE_HALFLIFE/4);\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(pool.DynamicMemoryUsage() * 9 / 2).GetFeePerK(), llround((maxFeeRateRemoved.GetFeePerK() + 1000)/8.0));\n-    // ... with a 1/4 halflife when mempool is < 1/4 its target size\n-\n-    SetMockTime(42 + 7*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2 + CTxMemPool::ROLLING_FEE_HALFLIFE/4);\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), 1000);\n-    // ... but feerate should never drop below 1000\n-\n-    SetMockTime(42 + 8*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2 + CTxMemPool::ROLLING_FEE_HALFLIFE/4);\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), 0);\n-    // ... unless it has gone all the way to 0 (after getting past 1000/2)\n }\n \n inline CTransactionRef make_tx(std::vector<CAmount>&& output_values, std::vector<CTransactionRef>&& inputs=std::vector<CTransactionRef>(), std::vector<uint32_t>&& input_indices=std::vector<uint32_t>())"
      },
      {
        "sha": "78c625746abff1a461549ab3ca7753590267c729",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 14,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31c08975aa7faccb3f0d838f46022499d664d229/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31c08975aa7faccb3f0d838f46022499d664d229/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=31c08975aa7faccb3f0d838f46022499d664d229",
        "patch": "@@ -601,6 +601,7 @@ void CTxMemPool::_clear()\n     cachedInnerUsage = 0;\n     lastRollingFeeUpdate = GetTime();\n     rollingMinimumFeeRate = 0;\n+    bumpedMinimumFeeRate = 0;\n     ++nTransactionsUpdated;\n }\n \n@@ -1008,28 +1009,25 @@ CFeeRate CTxMemPool::GetMinFee(size_t sizelimit) const {\n     LOCK(cs);\n \n     int64_t time = GetTime();\n-    if (time > lastRollingFeeUpdate + 10) {\n-        double halflife = ROLLING_FEE_HALFLIFE;\n-        if (DynamicMemoryUsage() < sizelimit / 4)\n-            halflife /= 4;\n-        else if (DynamicMemoryUsage() < sizelimit / 2)\n-            halflife /= 2;\n-\n-        rollingMinimumFeeRate = rollingMinimumFeeRate / pow(2.0, (time - lastRollingFeeUpdate) / halflife);\n-        lastRollingFeeUpdate = time;\n-\n-        if (rollingMinimumFeeRate < (double)incrementalRelayFee.GetFeePerK() / 2) {\n-            rollingMinimumFeeRate = 0;\n-            return CFeeRate(0);\n+    if (time >= lastRollingFeeUpdate + 10) {\n+        double newrolling = bumpedMinimumFeeRate * ((1.0 * DynamicMemoryUsage() / sizelimit) - 0.5) * 2.2;\n+        if (newrolling < rollingMinimumFeeRate) {\n+            double fraction = pow(2.0, (time - lastRollingFeeUpdate) / 300.0);\n+            rollingMinimumFeeRate = rollingMinimumFeeRate / fraction + newrolling * ((fraction - 1) / fraction);\n+            if (rollingMinimumFeeRate < 0)\n+                rollingMinimumFeeRate = 0;\n         }\n+        lastRollingFeeUpdate = time;\n     }\n     return CFeeRate(llround(rollingMinimumFeeRate));\n }\n \n void CTxMemPool::trackPackageRemoved(const CFeeRate& rate) {\n     AssertLockHeld(cs);\n-    if (rate.GetFeePerK() > rollingMinimumFeeRate)\n+    if (rate.GetFeePerK() > rollingMinimumFeeRate) {\n         rollingMinimumFeeRate = rate.GetFeePerK();\n+        bumpedMinimumFeeRate = rollingMinimumFeeRate;\n+    }\n }\n \n void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<COutPoint>* pvNoSpendsRemaining) {"
      },
      {
        "sha": "1ffa2b5c27a9f5ad5729b903d6060e604d13ed5d",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31c08975aa7faccb3f0d838f46022499d664d229/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31c08975aa7faccb3f0d838f46022499d664d229/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=31c08975aa7faccb3f0d838f46022499d664d229",
        "patch": "@@ -487,6 +487,7 @@ class CTxMemPool\n \n     mutable int64_t lastRollingFeeUpdate;\n     mutable double rollingMinimumFeeRate; //!< minimum fee to get into the pool, decreases exponentially\n+    mutable double bumpedMinimumFeeRate; //!< The highest the fee rate got to last time mempool was full\n     mutable Epoch m_epoch GUARDED_BY(cs);\n \n     // In-memory counter for external mempool tracking purposes.\n@@ -499,9 +500,6 @@ class CTxMemPool\n     bool m_is_loaded GUARDED_BY(cs){false};\n \n public:\n-\n-    static const int ROLLING_FEE_HALFLIFE = 60 * 60 * 12; // public only for testing\n-\n     typedef boost::multi_index_container<\n         CTxMemPoolEntry,\n         boost::multi_index::indexed_by<"
      }
    ]
  }
]