[
  {
    "sha": "d7fad1690c27bf270774da6eebc4ef8b550caf09",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkN2ZhZDE2OTBjMjdiZjI3MDc3NGRhNmVlYmM0ZWY4YjU1MGNhZjA5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-09-27T21:43:27Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-10-07T23:02:14Z"
      },
      "message": "Use mockable time everywhere in net_processing",
      "tree": {
        "sha": "625071e9d9b7566a021b9bb6f3f85d50a257d7d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/625071e9d9b7566a021b9bb6f3f85d50a257d7d3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d7fad1690c27bf270774da6eebc4ef8b550caf09",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7fad1690c27bf270774da6eebc4ef8b550caf09",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d7fad1690c27bf270774da6eebc4ef8b550caf09",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7fad1690c27bf270774da6eebc4ef8b550caf09/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "283a73d7eaea2907a6f7f800f529a0d6db53d7a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/283a73d7eaea2907a6f7f800f529a0d6db53d7a6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/283a73d7eaea2907a6f7f800f529a0d6db53d7a6"
      }
    ],
    "stats": {
      "total": 72,
      "additions": 33,
      "deletions": 39
    },
    "files": [
      {
        "sha": "490ae8db825c0147104aed42ff8a9c4ff436b681",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 22,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7fad1690c27bf270774da6eebc4ef8b550caf09/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7fad1690c27bf270774da6eebc4ef8b550caf09/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=d7fad1690c27bf270774da6eebc4ef8b550caf09",
        "patch": "@@ -582,7 +582,7 @@ static bool MarkBlockAsReceived(const uint256& hash) EXCLUSIVE_LOCKS_REQUIRED(cs\n         }\n         if (state->vBlocksInFlight.begin() == itInFlight->second.second) {\n             // First block on the queue was received, update the start download time for the next one\n-            state->nDownloadingSince = std::max(state->nDownloadingSince, GetTimeMicros());\n+            state->nDownloadingSince = std::max(state->nDownloadingSince, count_microseconds(GetTime<std::chrono::microseconds>()));\n         }\n         state->vBlocksInFlight.erase(itInFlight->second.second);\n         state->nBlocksInFlight--;\n@@ -617,7 +617,7 @@ static bool MarkBlockAsInFlight(CTxMemPool& mempool, NodeId nodeid, const uint25\n     state->nBlocksInFlightValidHeaders += it->fValidatedHeaders;\n     if (state->nBlocksInFlight == 1) {\n         // We're starting a block download (batch) from this peer.\n-        state->nDownloadingSince = GetTimeMicros();\n+        state->nDownloadingSince = GetTime<std::chrono::microseconds>().count();\n     }\n     if (state->nBlocksInFlightValidHeaders == 1 && pindex != nullptr) {\n         nPeersWithValidatedDownloads++;\n@@ -3637,7 +3637,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n                     // Matching pong received, this ping is no longer outstanding\n                     bPingFinished = true;\n                     const auto ping_time = ping_end - pfrom.m_ping_start.load();\n-                    if (ping_time.count() > 0) {\n+                    if (ping_time.count() >= 0) {\n                         // Successful ping time measurement, replace previous\n                         pfrom.nPingUsecTime = count_microseconds(ping_time);\n                         pfrom.nMinPingUsecTime = std::min(pfrom.nMinPingUsecTime.load(), count_microseconds(ping_time));\n@@ -4102,7 +4102,6 @@ bool PeerManager::SendMessages(CNode* pto)\n         CNodeState &state = *State(pto->GetId());\n \n         // Address refresh broadcast\n-        int64_t nNow = GetTimeMicros();\n         auto current_time = GetTime<std::chrono::microseconds>();\n \n         if (pto->RelayAddrsWithConn() && !::ChainstateActive().IsInitialBlockDownload() && pto->m_next_local_addr_send < current_time) {\n@@ -4148,7 +4147,7 @@ bool PeerManager::SendMessages(CNode* pto)\n             // Only actively request headers from a single peer, unless we're close to today.\n             if ((nSyncStarted == 0 && fFetch) || pindexBestHeader->GetBlockTime() > GetAdjustedTime() - 24 * 60 * 60) {\n                 state.fSyncStarted = true;\n-                state.nHeadersSyncTimeout = GetTimeMicros() + HEADERS_DOWNLOAD_TIMEOUT_BASE + HEADERS_DOWNLOAD_TIMEOUT_PER_HEADER * (GetAdjustedTime() - pindexBestHeader->GetBlockTime())/(consensusParams.nPowTargetSpacing);\n+                state.nHeadersSyncTimeout = count_microseconds(current_time) + HEADERS_DOWNLOAD_TIMEOUT_BASE + HEADERS_DOWNLOAD_TIMEOUT_PER_HEADER * (GetAdjustedTime() - pindexBestHeader->GetBlockTime())/(consensusParams.nPowTargetSpacing);\n                 nSyncStarted++;\n                 const CBlockIndex *pindexStart = pindexBestHeader;\n                 /* If possible, start at the block preceding the currently\n@@ -4329,7 +4328,7 @@ bool PeerManager::SendMessages(CNode* pto)\n                 if (pto->m_tx_relay->nNextInvSend < current_time) {\n                     fSendTrickle = true;\n                     if (pto->IsInboundConn()) {\n-                        pto->m_tx_relay->nNextInvSend = std::chrono::microseconds{m_connman.PoissonNextSendInbound(nNow, INVENTORY_BROADCAST_INTERVAL)};\n+                        pto->m_tx_relay->nNextInvSend = std::chrono::microseconds{m_connman.PoissonNextSendInbound(count_microseconds(current_time), INVENTORY_BROADCAST_INTERVAL)};\n                     } else {\n                         // Use half the delay for outbound peers, as there is less privacy concern for them.\n                         pto->m_tx_relay->nNextInvSend = PoissonNextSend(current_time, std::chrono::seconds{INVENTORY_BROADCAST_INTERVAL >> 1});\n@@ -4428,20 +4427,20 @@ bool PeerManager::SendMessages(CNode* pto)\n                         nRelayedTransactions++;\n                         {\n                             // Expire old relay messages\n-                            while (!vRelayExpiration.empty() && vRelayExpiration.front().first < nNow)\n+                            while (!vRelayExpiration.empty() && vRelayExpiration.front().first < count_microseconds(current_time))\n                             {\n                                 mapRelay.erase(vRelayExpiration.front().second);\n                                 vRelayExpiration.pop_front();\n                             }\n \n                             auto ret = mapRelay.emplace(txid, std::move(txinfo.tx));\n                             if (ret.second) {\n-                                vRelayExpiration.emplace_back(nNow + std::chrono::microseconds{RELAY_TX_CACHE_TIME}.count(), ret.first);\n+                                vRelayExpiration.emplace_back(count_microseconds(current_time + std::chrono::microseconds{RELAY_TX_CACHE_TIME}), ret.first);\n                             }\n                             // Add wtxid-based lookup into mapRelay as well, so that peers can request by wtxid\n                             auto ret2 = mapRelay.emplace(wtxid, ret.first->second);\n                             if (ret2.second) {\n-                                vRelayExpiration.emplace_back(nNow + std::chrono::microseconds{RELAY_TX_CACHE_TIME}.count(), ret2.first);\n+                                vRelayExpiration.emplace_back(count_microseconds(current_time + std::chrono::microseconds{RELAY_TX_CACHE_TIME}), ret2.first);\n                             }\n                         }\n                         if (vInv.size() == MAX_INV_SZ) {\n@@ -4466,10 +4465,7 @@ bool PeerManager::SendMessages(CNode* pto)\n \n         // Detect whether we're stalling\n         current_time = GetTime<std::chrono::microseconds>();\n-        // nNow is the current system time (GetTimeMicros is not mockable) and\n-        // should be replaced by the mockable current_time eventually\n-        nNow = GetTimeMicros();\n-        if (state.nStallingSince && state.nStallingSince < nNow - 1000000 * BLOCK_STALLING_TIMEOUT) {\n+        if (state.nStallingSince && state.nStallingSince < count_microseconds(current_time) - 1000000 * BLOCK_STALLING_TIMEOUT) {\n             // Stalling only triggers when the block download window cannot move. During normal steady state,\n             // the download window should be much larger than the to-be-downloaded set of blocks, so disconnection\n             // should only happen during initial block download.\n@@ -4485,7 +4481,7 @@ bool PeerManager::SendMessages(CNode* pto)\n         if (state.vBlocksInFlight.size() > 0) {\n             QueuedBlock &queuedBlock = state.vBlocksInFlight.front();\n             int nOtherPeersWithValidatedDownloads = nPeersWithValidatedDownloads - (state.nBlocksInFlightValidHeaders > 0);\n-            if (nNow > state.nDownloadingSince + consensusParams.nPowTargetSpacing * (BLOCK_DOWNLOAD_TIMEOUT_BASE + BLOCK_DOWNLOAD_TIMEOUT_PER_PEER * nOtherPeersWithValidatedDownloads)) {\n+            if (count_microseconds(current_time) > state.nDownloadingSince + consensusParams.nPowTargetSpacing * (BLOCK_DOWNLOAD_TIMEOUT_BASE + BLOCK_DOWNLOAD_TIMEOUT_PER_PEER * nOtherPeersWithValidatedDownloads)) {\n                 LogPrintf(\"Timeout downloading block %s from peer=%d, disconnecting\\n\", queuedBlock.hash.ToString(), pto->GetId());\n                 pto->fDisconnect = true;\n                 return true;\n@@ -4495,7 +4491,7 @@ bool PeerManager::SendMessages(CNode* pto)\n         if (state.fSyncStarted && state.nHeadersSyncTimeout < std::numeric_limits<int64_t>::max()) {\n             // Detect whether this is a stalling initial-headers-sync peer\n             if (pindexBestHeader->GetBlockTime() <= GetAdjustedTime() - 24 * 60 * 60) {\n-                if (nNow > state.nHeadersSyncTimeout && nSyncStarted == 1 && (nPreferredDownload - state.fPreferredDownload >= 1)) {\n+                if (count_microseconds(current_time) > state.nHeadersSyncTimeout && nSyncStarted == 1 && (nPreferredDownload - state.fPreferredDownload >= 1)) {\n                     // Disconnect a peer (without the noban permission) if it is our only sync peer,\n                     // and we have others we could be using instead.\n                     // Note: If all our peers are inbound, then we won't\n@@ -4545,7 +4541,7 @@ bool PeerManager::SendMessages(CNode* pto)\n             }\n             if (state.nBlocksInFlight == 0 && staller != -1) {\n                 if (State(staller)->nStallingSince == 0) {\n-                    State(staller)->nStallingSince = nNow;\n+                    State(staller)->nStallingSince = count_microseconds(current_time);\n                     LogPrint(BCLog::NET, \"Stall started peer=%d\\n\", staller);\n                 }\n             }\n@@ -4629,7 +4625,6 @@ bool PeerManager::SendMessages(CNode* pto)\n             !pto->HasPermission(PF_FORCERELAY) // peers with the forcerelay permission should not filter txs to us\n         ) {\n             CAmount currentFilter = m_mempool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n-            int64_t timeNow = GetTimeMicros();\n             static FeeFilterRounder g_filter_rounder{CFeeRate{DEFAULT_MIN_RELAY_TX_FEE}};\n             if (m_chainman.ActiveChainstate().IsInitialBlockDownload()) {\n                 // Received tx-inv messages are discarded when the active\n@@ -4640,24 +4635,24 @@ bool PeerManager::SendMessages(CNode* pto)\n                 if (pto->m_tx_relay->lastSentFeeFilter == MAX_FILTER) {\n                     // Send the current filter if we sent MAX_FILTER previously\n                     // and made it out of IBD.\n-                    pto->m_tx_relay->nextSendTimeFeeFilter = timeNow - 1;\n+                    pto->m_tx_relay->nextSendTimeFeeFilter = count_microseconds(current_time) - 1;\n                 }\n             }\n-            if (timeNow > pto->m_tx_relay->nextSendTimeFeeFilter) {\n+            if (count_microseconds(current_time) > pto->m_tx_relay->nextSendTimeFeeFilter) {\n                 CAmount filterToSend = g_filter_rounder.round(currentFilter);\n                 // We always have a fee filter of at least minRelayTxFee\n                 filterToSend = std::max(filterToSend, ::minRelayTxFee.GetFeePerK());\n                 if (filterToSend != pto->m_tx_relay->lastSentFeeFilter) {\n                     m_connman.PushMessage(pto, msgMaker.Make(NetMsgType::FEEFILTER, filterToSend));\n                     pto->m_tx_relay->lastSentFeeFilter = filterToSend;\n                 }\n-                pto->m_tx_relay->nextSendTimeFeeFilter = PoissonNextSend(timeNow, AVG_FEEFILTER_BROADCAST_INTERVAL);\n+                pto->m_tx_relay->nextSendTimeFeeFilter = PoissonNextSend(count_microseconds(current_time), AVG_FEEFILTER_BROADCAST_INTERVAL);\n             }\n             // If the fee filter has changed substantially and it's still more than MAX_FEEFILTER_CHANGE_DELAY\n             // until scheduled broadcast, then move the broadcast to within MAX_FEEFILTER_CHANGE_DELAY.\n-            else if (timeNow + MAX_FEEFILTER_CHANGE_DELAY * 1000000 < pto->m_tx_relay->nextSendTimeFeeFilter &&\n+            else if (count_microseconds(current_time) + MAX_FEEFILTER_CHANGE_DELAY * 1000000 < pto->m_tx_relay->nextSendTimeFeeFilter &&\n                      (currentFilter < 3 * pto->m_tx_relay->lastSentFeeFilter / 4 || currentFilter > 4 * pto->m_tx_relay->lastSentFeeFilter / 3)) {\n-                pto->m_tx_relay->nextSendTimeFeeFilter = timeNow + GetRandInt(MAX_FEEFILTER_CHANGE_DELAY) * 1000000;\n+                pto->m_tx_relay->nextSendTimeFeeFilter = count_microseconds(current_time) + GetRandInt(MAX_FEEFILTER_CHANGE_DELAY) * 1000000;\n             }\n         }\n     } // release cs_main"
      },
      {
        "sha": "5c3f021b3fde1d509c26e194ec3b477c4cbce3cd",
        "filename": "test/functional/p2p_tx_download.py",
        "status": "modified",
        "additions": 13,
        "deletions": 17,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7fad1690c27bf270774da6eebc4ef8b550caf09/test/functional/p2p_tx_download.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7fad1690c27bf270774da6eebc4ef8b550caf09/test/functional/p2p_tx_download.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_tx_download.py?ref=d7fad1690c27bf270774da6eebc4ef8b550caf09",
        "patch": "@@ -158,23 +158,19 @@ def test_spurious_notfound(self):\n         self.nodes[0].p2ps[0].send_message(msg_notfound(vec=[CInv(MSG_TX, 1)]))\n \n     def run_test(self):\n-        # Setup the p2p connections\n-        self.peers = []\n-        for node in self.nodes:\n-            for _ in range(NUM_INBOUND):\n-                self.peers.append(node.add_p2p_connection(TestP2PConn()))\n-\n-        self.log.info(\"Nodes are setup with {} incoming connections each\".format(NUM_INBOUND))\n-\n-        self.test_spurious_notfound()\n-\n-        # Test the in-flight max first, because we want no transactions in\n-        # flight ahead of this test.\n-        self.test_in_flight_max()\n-\n-        self.test_inv_block()\n-\n-        self.test_tx_requests()\n+        # Run each test against new bitcoind instances, as setting mocktimes has long-term effects on when\n+        # the next trickle relay event happens.\n+        for test in [self.test_spurious_notfound, self.test_in_flight_max, self.test_inv_block, self.test_tx_requests]:\n+            self.stop_nodes()\n+            self.start_nodes()\n+            self.connect_nodes(1, 0)\n+            # Setup the p2p connections\n+            self.peers = []\n+            for node in self.nodes:\n+                for _ in range(NUM_INBOUND):\n+                    self.peers.append(node.add_p2p_connection(TestP2PConn()))\n+            self.log.info(\"Nodes are setup with {} incoming connections each\".format(NUM_INBOUND))\n+            test()\n \n \n if __name__ == '__main__':"
      },
      {
        "sha": "9336f94ee3136dd68e1490ba476e2581bf3cb791",
        "filename": "test/functional/wallet_resendwallettransactions.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7fad1690c27bf270774da6eebc4ef8b550caf09/test/functional/wallet_resendwallettransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7fad1690c27bf270774da6eebc4ef8b550caf09/test/functional/wallet_resendwallettransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_resendwallettransactions.py?ref=d7fad1690c27bf270774da6eebc4ef8b550caf09",
        "patch": "@@ -64,6 +64,9 @@ def run_test(self):\n         # Transaction should be rebroadcast approximately 24 hours in the future,\n         # but can range from 12-36. So bump 36 hours to be sure.\n         node.setmocktime(now + 36 * 60 * 60)\n+        # Give some time for trickle to occur\n+        time.sleep(1)\n+        node.setmocktime(now + 36 * 60 * 60 + 600)\n         peer_second.wait_for_broadcast([txid])\n \n "
      }
    ]
  },
  {
    "sha": "d9a994a7940bedd6679c93c7fb74fd0db4ce16f8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOWE5OTRhNzk0MGJlZGQ2Njc5YzkzYzdmYjc0ZmQwZGI0Y2UxNmY4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-09-30T02:11:53Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-10-07T23:31:39Z"
      },
      "message": "Change all ping times to std::chrono types",
      "tree": {
        "sha": "d4f8042a172683291791f3339fcaa11e07ae9562",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d4f8042a172683291791f3339fcaa11e07ae9562"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d9a994a7940bedd6679c93c7fb74fd0db4ce16f8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9a994a7940bedd6679c93c7fb74fd0db4ce16f8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d9a994a7940bedd6679c93c7fb74fd0db4ce16f8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9a994a7940bedd6679c93c7fb74fd0db4ce16f8/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d7fad1690c27bf270774da6eebc4ef8b550caf09",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7fad1690c27bf270774da6eebc4ef8b550caf09",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d7fad1690c27bf270774da6eebc4ef8b550caf09"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 34,
      "deletions": 28
    },
    "files": [
      {
        "sha": "510322ae5c16d26440ce0c55d32c072ea3362daf",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9a994a7940bedd6679c93c7fb74fd0db4ce16f8/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9a994a7940bedd6679c93c7fb74fd0db4ce16f8/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=d9a994a7940bedd6679c93c7fb74fd0db4ce16f8",
        "patch": "@@ -599,9 +599,9 @@ void CNode::copyStats(CNodeStats &stats, const std::vector<bool> &m_asmap)\n     }\n \n     // Raw ping time is in microseconds, but show it to user as whole seconds (Bitcoin users should be well used to small numbers with many decimal places by now :)\n-    stats.m_ping_usec = nPingUsecTime;\n-    stats.m_min_ping_usec  = nMinPingUsecTime;\n-    stats.m_ping_wait_usec = count_microseconds(ping_wait);\n+    stats.m_ping_time = m_ping_time;\n+    stats.m_min_ping_time  = m_min_ping_time;\n+    stats.m_ping_wait = ping_wait;\n \n     // Leave string empty if addrLocal invalid (not filled in yet)\n     CService addrLocalUnlocked = GetAddrLocal();\n@@ -839,7 +839,7 @@ struct NodeEvictionCandidate\n {\n     NodeId id;\n     int64_t nTimeConnected;\n-    int64_t nMinPingUsecTime;\n+    std::chrono::microseconds m_min_ping_time;\n     int64_t nLastBlockTime;\n     int64_t nLastTXTime;\n     bool fRelevantServices;\n@@ -853,7 +853,7 @@ struct NodeEvictionCandidate\n \n static bool ReverseCompareNodeMinPingTime(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b)\n {\n-    return a.nMinPingUsecTime > b.nMinPingUsecTime;\n+    return a.m_min_ping_time > b.m_min_ping_time;\n }\n \n static bool ReverseCompareNodeTimeConnected(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b)\n@@ -934,7 +934,7 @@ bool CConnman::AttemptToEvictConnection()\n                 peer_relay_txes = node->m_tx_relay->fRelayTxes;\n                 peer_filter_not_null = node->m_tx_relay->pfilter != nullptr;\n             }\n-            NodeEvictionCandidate candidate = {node->GetId(), node->nTimeConnected, node->nMinPingUsecTime,\n+            NodeEvictionCandidate candidate = {node->GetId(), node->nTimeConnected, node->m_min_ping_time,\n                                                node->nLastBlockTime, node->nLastTXTime,\n                                                HasAllDesirableServiceFlags(node->nServices),\n                                                peer_relay_txes, peer_filter_not_null, node->addr, node->nKeyedNetGroup,"
      },
      {
        "sha": "11c44875c6c2a189fd1a45a0b98211727879de0a",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9a994a7940bedd6679c93c7fb74fd0db4ce16f8/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9a994a7940bedd6679c93c7fb74fd0db4ce16f8/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=d9a994a7940bedd6679c93c7fb74fd0db4ce16f8",
        "patch": "@@ -704,9 +704,9 @@ class CNodeStats\n     mapMsgCmdSize mapRecvBytesPerMsgCmd;\n     NetPermissionFlags m_permissionFlags;\n     bool m_legacyWhitelisted;\n-    int64_t m_ping_usec;\n-    int64_t m_ping_wait_usec;\n-    int64_t m_min_ping_usec;\n+    std::chrono::microseconds m_ping_time;\n+    std::chrono::microseconds m_ping_wait;\n+    std::chrono::microseconds m_min_ping_time;\n     CAmount minFeeFilter;\n     // Our address, as reported by the peer\n     std::string addrLocal;\n@@ -1027,9 +1027,9 @@ class CNode\n     /** When the last ping was sent, or 0 if no ping was ever sent */\n     std::atomic<std::chrono::microseconds> m_ping_start{std::chrono::microseconds{0}};\n     // Last measured round-trip time.\n-    std::atomic<int64_t> nPingUsecTime{0};\n+    std::atomic<std::chrono::microseconds> m_ping_time{std::chrono::microseconds{0}};\n     // Best measured round-trip time.\n-    std::atomic<int64_t> nMinPingUsecTime{std::numeric_limits<int64_t>::max()};\n+    std::atomic<std::chrono::microseconds> m_min_ping_time{std::chrono::microseconds::max()};\n     // Whether a ping is requested.\n     std::atomic<bool> fPingQueued{false};\n "
      },
      {
        "sha": "1e6b61fbde486e1168e84224ffb6df979d0fbab1",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9a994a7940bedd6679c93c7fb74fd0db4ce16f8/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9a994a7940bedd6679c93c7fb74fd0db4ce16f8/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=d9a994a7940bedd6679c93c7fb74fd0db4ce16f8",
        "patch": "@@ -3639,8 +3639,8 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n                     const auto ping_time = ping_end - pfrom.m_ping_start.load();\n                     if (ping_time.count() >= 0) {\n                         // Successful ping time measurement, replace previous\n-                        pfrom.nPingUsecTime = count_microseconds(ping_time);\n-                        pfrom.nMinPingUsecTime = std::min(pfrom.nMinPingUsecTime.load(), count_microseconds(ping_time));\n+                        pfrom.m_ping_time = ping_time;\n+                        pfrom.m_min_ping_time = std::min(pfrom.m_min_ping_time.load(), ping_time);\n                     } else {\n                         // This should never happen\n                         sProblem = \"Timing mishap\";"
      },
      {
        "sha": "5da201e9a1d047d615a742dc7b85cc64fed6ce11",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9a994a7940bedd6679c93c7fb74fd0db4ce16f8/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9a994a7940bedd6679c93c7fb74fd0db4ce16f8/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=d9a994a7940bedd6679c93c7fb74fd0db4ce16f8",
        "patch": "@@ -56,6 +56,8 @@\n #include <QUrlQuery>\n #include <QtGlobal>\n \n+#include <chrono>\n+\n #if defined(Q_OS_MAC)\n \n #include <QProcess>\n@@ -782,9 +784,11 @@ QString formatServicesStr(quint64 mask)\n         return QObject::tr(\"None\");\n }\n \n-QString formatPingTime(int64_t ping_usec)\n+QString formatPingTime(std::chrono::microseconds ping_time)\n {\n-    return (ping_usec == std::numeric_limits<int64_t>::max() || ping_usec == 0) ? QObject::tr(\"N/A\") : QString(QObject::tr(\"%1 ms\")).arg(QString::number((int)(ping_usec / 1000), 10));\n+    return (ping_time == std::chrono::microseconds::max() || ping_time.count() == 0) ?\n+        QObject::tr(\"N/A\") :\n+        QString(QObject::tr(\"%1 ms\")).arg(QString::number((int)(count_microseconds(ping_time) / 1000), 10));\n }\n \n QString formatTimeOffset(int64_t nTimeOffset)"
      },
      {
        "sha": "a6f4de09ad4923e26be7fa0d4d08f830cd16b105",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9a994a7940bedd6679c93c7fb74fd0db4ce16f8/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9a994a7940bedd6679c93c7fb74fd0db4ce16f8/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=d9a994a7940bedd6679c93c7fb74fd0db4ce16f8",
        "patch": "@@ -18,6 +18,8 @@\n #include <QTableView>\n #include <QLabel>\n \n+#include <chrono>\n+\n class QValidatedLineEdit;\n class SendCoinsRecipient;\n \n@@ -230,8 +232,8 @@ namespace GUIUtil\n     /* Format CNodeStats.nServices bitmask into a user-readable string */\n     QString formatServicesStr(quint64 mask);\n \n-    /* Format a CNodeStats.m_ping_usec into a user-readable string or display N/A, if 0*/\n-    QString formatPingTime(int64_t ping_usec);\n+    /* Format a CNodeStats.m_ping_time into a user-readable string or display N/A, if 0*/\n+    QString formatPingTime(std::chrono::microseconds ping_time);\n \n     /* Format a CNodeCombinedStats.nTimeOffset into a user-readable string. */\n     QString formatTimeOffset(int64_t nTimeOffset);"
      },
      {
        "sha": "8179ee06905ce288b35d94a83236549742c28e22",
        "filename": "src/qt/peertablemodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9a994a7940bedd6679c93c7fb74fd0db4ce16f8/src/qt/peertablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9a994a7940bedd6679c93c7fb74fd0db4ce16f8/src/qt/peertablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.cpp?ref=d9a994a7940bedd6679c93c7fb74fd0db4ce16f8",
        "patch": "@@ -32,7 +32,7 @@ bool NodeLessThan::operator()(const CNodeCombinedStats &left, const CNodeCombine\n     case PeerTableModel::Subversion:\n         return pLeft->cleanSubVer.compare(pRight->cleanSubVer) < 0;\n     case PeerTableModel::Ping:\n-        return pLeft->m_min_ping_usec < pRight->m_min_ping_usec;\n+        return pLeft->m_min_ping_time < pRight->m_min_ping_time;\n     case PeerTableModel::Sent:\n         return pLeft->nSendBytes < pRight->nSendBytes;\n     case PeerTableModel::Received:\n@@ -161,7 +161,7 @@ QVariant PeerTableModel::data(const QModelIndex &index, int role) const\n         case Subversion:\n             return QString::fromStdString(rec->nodeStats.cleanSubVer);\n         case Ping:\n-            return GUIUtil::formatPingTime(rec->nodeStats.m_min_ping_usec);\n+            return GUIUtil::formatPingTime(rec->nodeStats.m_min_ping_time);\n         case Sent:\n             return GUIUtil::formatBytes(rec->nodeStats.nSendBytes);\n         case Received:"
      },
      {
        "sha": "bb1d70e5db0f459bd802d832f1631be0d8be5857",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9a994a7940bedd6679c93c7fb74fd0db4ce16f8/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9a994a7940bedd6679c93c7fb74fd0db4ce16f8/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=d9a994a7940bedd6679c93c7fb74fd0db4ce16f8",
        "patch": "@@ -1115,9 +1115,9 @@ void RPCConsole::updateNodeDetail(const CNodeCombinedStats *stats)\n     ui->peerBytesSent->setText(GUIUtil::formatBytes(stats->nodeStats.nSendBytes));\n     ui->peerBytesRecv->setText(GUIUtil::formatBytes(stats->nodeStats.nRecvBytes));\n     ui->peerConnTime->setText(GUIUtil::formatDurationStr(GetSystemTimeInSeconds() - stats->nodeStats.nTimeConnected));\n-    ui->peerPingTime->setText(GUIUtil::formatPingTime(stats->nodeStats.m_ping_usec));\n-    ui->peerPingWait->setText(GUIUtil::formatPingTime(stats->nodeStats.m_ping_wait_usec));\n-    ui->peerMinPing->setText(GUIUtil::formatPingTime(stats->nodeStats.m_min_ping_usec));\n+    ui->peerPingTime->setText(GUIUtil::formatPingTime(stats->nodeStats.m_ping_time));\n+    ui->peerPingWait->setText(GUIUtil::formatPingTime(stats->nodeStats.m_ping_wait));\n+    ui->peerMinPing->setText(GUIUtil::formatPingTime(stats->nodeStats.m_min_ping_time));\n     ui->timeoffset->setText(GUIUtil::formatTimeOffset(stats->nodeStats.nTimeOffset));\n     ui->peerVersion->setText(QString::number(stats->nodeStats.nVersion));\n     ui->peerSubversion->setText(QString::fromStdString(stats->nodeStats.cleanSubVer));"
      },
      {
        "sha": "c15aebfe03688908911f7d6a9156e0f88b702fc6",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9a994a7940bedd6679c93c7fb74fd0db4ce16f8/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9a994a7940bedd6679c93c7fb74fd0db4ce16f8/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=d9a994a7940bedd6679c93c7fb74fd0db4ce16f8",
        "patch": "@@ -183,14 +183,14 @@ static RPCHelpMan getpeerinfo()\n         obj.pushKV(\"bytesrecv\", stats.nRecvBytes);\n         obj.pushKV(\"conntime\", stats.nTimeConnected);\n         obj.pushKV(\"timeoffset\", stats.nTimeOffset);\n-        if (stats.m_ping_usec > 0) {\n-            obj.pushKV(\"pingtime\", ((double)stats.m_ping_usec) / 1e6);\n+        if (stats.m_ping_time.count() > 0) {\n+            obj.pushKV(\"pingtime\", count_microseconds(stats.m_ping_time) * 0.000001);\n         }\n-        if (stats.m_min_ping_usec < std::numeric_limits<int64_t>::max()) {\n-            obj.pushKV(\"minping\", ((double)stats.m_min_ping_usec) / 1e6);\n+        if (stats.m_min_ping_time < std::chrono::microseconds::max()) {\n+            obj.pushKV(\"minping\", count_microseconds(stats.m_min_ping_time) * 0.000001);\n         }\n-        if (stats.m_ping_wait_usec > 0) {\n-            obj.pushKV(\"pingwait\", ((double)stats.m_ping_wait_usec) / 1e6);\n+        if (stats.m_ping_wait.count() > 0) {\n+            obj.pushKV(\"pingwait\", count_microseconds(stats.m_ping_wait) * 0.000001);\n         }\n         obj.pushKV(\"version\", stats.nVersion);\n         // Use the sanitized form of subver here, to avoid tricksy remote peers from"
      }
    ]
  },
  {
    "sha": "614341485801717a575ba3bfdaf4c5245b6d29d0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MTQzNDE0ODU4MDE3MTdhNTc1YmEzYmZkYWY0YzUyNDViNmQyOWQw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-09-30T02:43:54Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-10-07T23:32:00Z"
      },
      "message": "Convert block/header sync timeouts to std::chrono types",
      "tree": {
        "sha": "f42d4c79605f3b6137c3c6c97e2e176deda76ebb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f42d4c79605f3b6137c3c6c97e2e176deda76ebb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/614341485801717a575ba3bfdaf4c5245b6d29d0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/614341485801717a575ba3bfdaf4c5245b6d29d0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/614341485801717a575ba3bfdaf4c5245b6d29d0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/614341485801717a575ba3bfdaf4c5245b6d29d0/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d9a994a7940bedd6679c93c7fb74fd0db4ce16f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9a994a7940bedd6679c93c7fb74fd0db4ce16f8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d9a994a7940bedd6679c93c7fb74fd0db4ce16f8"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 26,
      "deletions": 26
    },
    "files": [
      {
        "sha": "b693f7cbf37ab14ffd4a402d056e9d7ff56a4f16",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 26,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/614341485801717a575ba3bfdaf4c5245b6d29d0/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/614341485801717a575ba3bfdaf4c5245b6d29d0/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=614341485801717a575ba3bfdaf4c5245b6d29d0",
        "patch": "@@ -43,8 +43,8 @@ static constexpr std::chrono::seconds RELAY_TX_CACHE_TIME = std::chrono::minutes\n static constexpr std::chrono::seconds UNCONDITIONAL_RELAY_DELAY = std::chrono::minutes{2};\n /** Headers download timeout expressed in microseconds\n  *  Timeout = base + per_header * (expected number of headers) */\n-static constexpr int64_t HEADERS_DOWNLOAD_TIMEOUT_BASE = 15 * 60 * 1000000; // 15 minutes\n-static constexpr int64_t HEADERS_DOWNLOAD_TIMEOUT_PER_HEADER = 1000; // 1ms/header\n+static constexpr auto HEADERS_DOWNLOAD_TIMEOUT_BASE = std::chrono::minutes{15};\n+static constexpr auto HEADERS_DOWNLOAD_TIMEOUT_PER_HEADER = std::chrono::milliseconds{1};\n /** Protect at least this many outbound peers from disconnection due to slow/\n  * behind headers chain.\n  */\n@@ -91,8 +91,8 @@ static_assert(INBOUND_PEER_TX_DELAY >= MAX_GETDATA_RANDOM_DELAY,\n static const unsigned int MAX_GETDATA_SZ = 1000;\n /** Number of blocks that can be requested at any given time from a single peer. */\n static const int MAX_BLOCKS_IN_TRANSIT_PER_PEER = 16;\n-/** Timeout in seconds during which a peer must stall block download progress before being disconnected. */\n-static const unsigned int BLOCK_STALLING_TIMEOUT = 2;\n+/** Time during which a peer must stall block download progress before being disconnected. */\n+static constexpr auto BLOCK_STALLING_TIMEOUT = std::chrono::seconds{2};\n /** Number of headers sent in one getheaders result. We rely on the assumption that if a peer sends\n  *  less than this number, we reached its tip. Changing this value is a protocol upgrade. */\n static const unsigned int MAX_HEADERS_RESULTS = 2000;\n@@ -106,10 +106,10 @@ static const int MAX_BLOCKTXN_DEPTH = 10;\n  *  degree of disordering of blocks on disk (which make reindexing and pruning harder). We'll probably\n  *  want to make this a per-peer adaptive value at some point. */\n static const unsigned int BLOCK_DOWNLOAD_WINDOW = 1024;\n-/** Block download timeout base, expressed in millionths of the block interval (i.e. 10 min) */\n-static const int64_t BLOCK_DOWNLOAD_TIMEOUT_BASE = 1000000;\n+/** Block download timeout base, expressed in multiples of the block interval (i.e. 10 min) */\n+static constexpr double BLOCK_DOWNLOAD_TIMEOUT_BASE = 1;\n /** Additional block download timeout per parallel downloading peer (i.e. 5 min) */\n-static const int64_t BLOCK_DOWNLOAD_TIMEOUT_PER_PEER = 500000;\n+static constexpr double BLOCK_DOWNLOAD_TIMEOUT_PER_PEER = 0.5;\n /** Maximum number of headers to announce when relaying blocks with headers message.*/\n static const unsigned int MAX_BLOCKS_TO_ANNOUNCE = 8;\n /** Maximum number of unconnecting headers announcements before DoS score */\n@@ -304,12 +304,12 @@ struct CNodeState {\n     //! Whether we've started headers synchronization with this peer.\n     bool fSyncStarted;\n     //! When to potentially disconnect peer for stalling headers download\n-    int64_t nHeadersSyncTimeout;\n+    std::chrono::microseconds m_headers_sync_timeout;\n     //! Since when we're stalling block download progress (in microseconds), or 0.\n-    int64_t nStallingSince;\n+    std::chrono::microseconds m_stalling_since;\n     std::list<QueuedBlock> vBlocksInFlight;\n     //! When the first entry in vBlocksInFlight started downloading. Don't care when vBlocksInFlight is empty.\n-    int64_t nDownloadingSince;\n+    std::chrono::microseconds m_downloading_since;\n     int nBlocksInFlight;\n     int nBlocksInFlightValidHeaders;\n     //! Whether we consider this a preferred download peer.\n@@ -459,9 +459,9 @@ struct CNodeState {\n         pindexBestHeaderSent = nullptr;\n         nUnconnectingHeaders = 0;\n         fSyncStarted = false;\n-        nHeadersSyncTimeout = 0;\n-        nStallingSince = 0;\n-        nDownloadingSince = 0;\n+        m_headers_sync_timeout = std::chrono::microseconds{0};\n+        m_stalling_since = std::chrono::microseconds{0};\n+        m_downloading_since = std::chrono::microseconds{0};\n         nBlocksInFlight = 0;\n         nBlocksInFlightValidHeaders = 0;\n         fPreferredDownload = false;\n@@ -582,11 +582,11 @@ static bool MarkBlockAsReceived(const uint256& hash) EXCLUSIVE_LOCKS_REQUIRED(cs\n         }\n         if (state->vBlocksInFlight.begin() == itInFlight->second.second) {\n             // First block on the queue was received, update the start download time for the next one\n-            state->nDownloadingSince = std::max(state->nDownloadingSince, count_microseconds(GetTime<std::chrono::microseconds>()));\n+            state->m_downloading_since = std::max(state->m_downloading_since, GetTime<std::chrono::microseconds>());\n         }\n         state->vBlocksInFlight.erase(itInFlight->second.second);\n         state->nBlocksInFlight--;\n-        state->nStallingSince = 0;\n+        state->m_stalling_since = std::chrono::microseconds{0};\n         mapBlocksInFlight.erase(itInFlight);\n         return true;\n     }\n@@ -617,7 +617,7 @@ static bool MarkBlockAsInFlight(CTxMemPool& mempool, NodeId nodeid, const uint25\n     state->nBlocksInFlightValidHeaders += it->fValidatedHeaders;\n     if (state->nBlocksInFlight == 1) {\n         // We're starting a block download (batch) from this peer.\n-        state->nDownloadingSince = GetTime<std::chrono::microseconds>().count();\n+        state->m_downloading_since = GetTime<std::chrono::microseconds>();\n     }\n     if (state->nBlocksInFlightValidHeaders == 1 && pindex != nullptr) {\n         nPeersWithValidatedDownloads++;\n@@ -4147,7 +4147,7 @@ bool PeerManager::SendMessages(CNode* pto)\n             // Only actively request headers from a single peer, unless we're close to today.\n             if ((nSyncStarted == 0 && fFetch) || pindexBestHeader->GetBlockTime() > GetAdjustedTime() - 24 * 60 * 60) {\n                 state.fSyncStarted = true;\n-                state.nHeadersSyncTimeout = count_microseconds(current_time) + HEADERS_DOWNLOAD_TIMEOUT_BASE + HEADERS_DOWNLOAD_TIMEOUT_PER_HEADER * (GetAdjustedTime() - pindexBestHeader->GetBlockTime())/(consensusParams.nPowTargetSpacing);\n+                state.m_headers_sync_timeout = current_time + HEADERS_DOWNLOAD_TIMEOUT_BASE + HEADERS_DOWNLOAD_TIMEOUT_PER_HEADER * ((GetAdjustedTime() - pindexBestHeader->GetBlockTime())/(consensusParams.nPowTargetSpacing));\n                 nSyncStarted++;\n                 const CBlockIndex *pindexStart = pindexBestHeader;\n                 /* If possible, start at the block preceding the currently\n@@ -4465,33 +4465,33 @@ bool PeerManager::SendMessages(CNode* pto)\n \n         // Detect whether we're stalling\n         current_time = GetTime<std::chrono::microseconds>();\n-        if (state.nStallingSince && state.nStallingSince < count_microseconds(current_time) - 1000000 * BLOCK_STALLING_TIMEOUT) {\n+        if (state.m_stalling_since.count() && state.m_stalling_since < current_time - BLOCK_STALLING_TIMEOUT) {\n             // Stalling only triggers when the block download window cannot move. During normal steady state,\n             // the download window should be much larger than the to-be-downloaded set of blocks, so disconnection\n             // should only happen during initial block download.\n             LogPrintf(\"Peer=%d is stalling block download, disconnecting\\n\", pto->GetId());\n             pto->fDisconnect = true;\n             return true;\n         }\n-        // In case there is a block that has been in flight from this peer for 2 + 0.5 * N times the block interval\n+        // In case there is a block that has been in flight from this peer for 1 + 0.5 * N times the block interval\n         // (with N the number of peers from which we're downloading validated blocks), disconnect due to timeout.\n         // We compensate for other peers to prevent killing off peers due to our own downstream link\n         // being saturated. We only count validated in-flight blocks so peers can't advertise non-existing block hashes\n         // to unreasonably increase our timeout.\n         if (state.vBlocksInFlight.size() > 0) {\n             QueuedBlock &queuedBlock = state.vBlocksInFlight.front();\n             int nOtherPeersWithValidatedDownloads = nPeersWithValidatedDownloads - (state.nBlocksInFlightValidHeaders > 0);\n-            if (count_microseconds(current_time) > state.nDownloadingSince + consensusParams.nPowTargetSpacing * (BLOCK_DOWNLOAD_TIMEOUT_BASE + BLOCK_DOWNLOAD_TIMEOUT_PER_PEER * nOtherPeersWithValidatedDownloads)) {\n+            if (current_time > state.m_downloading_since + std::chrono::seconds{consensusParams.nPowTargetSpacing} * (BLOCK_DOWNLOAD_TIMEOUT_BASE + BLOCK_DOWNLOAD_TIMEOUT_PER_PEER * nOtherPeersWithValidatedDownloads)) {\n                 LogPrintf(\"Timeout downloading block %s from peer=%d, disconnecting\\n\", queuedBlock.hash.ToString(), pto->GetId());\n                 pto->fDisconnect = true;\n                 return true;\n             }\n         }\n         // Check for headers sync timeouts\n-        if (state.fSyncStarted && state.nHeadersSyncTimeout < std::numeric_limits<int64_t>::max()) {\n+        if (state.fSyncStarted && state.m_headers_sync_timeout < std::chrono::microseconds::max()) {\n             // Detect whether this is a stalling initial-headers-sync peer\n             if (pindexBestHeader->GetBlockTime() <= GetAdjustedTime() - 24 * 60 * 60) {\n-                if (count_microseconds(current_time) > state.nHeadersSyncTimeout && nSyncStarted == 1 && (nPreferredDownload - state.fPreferredDownload >= 1)) {\n+                if (current_time > state.m_headers_sync_timeout && nSyncStarted == 1 && (nPreferredDownload - state.fPreferredDownload >= 1)) {\n                     // Disconnect a peer (without the noban permission) if it is our only sync peer,\n                     // and we have others we could be using instead.\n                     // Note: If all our peers are inbound, then we won't\n@@ -4510,13 +4510,13 @@ bool PeerManager::SendMessages(CNode* pto)\n                         // this peer (eventually).\n                         state.fSyncStarted = false;\n                         nSyncStarted--;\n-                        state.nHeadersSyncTimeout = 0;\n+                        state.m_headers_sync_timeout = std::chrono::microseconds{0};\n                     }\n                 }\n             } else {\n                 // After we've caught up once, reset the timeout so we can't trigger\n                 // disconnect later.\n-                state.nHeadersSyncTimeout = std::numeric_limits<int64_t>::max();\n+                state.m_headers_sync_timeout = std::chrono::microseconds::max();\n             }\n         }\n \n@@ -4540,8 +4540,8 @@ bool PeerManager::SendMessages(CNode* pto)\n                     pindex->nHeight, pto->GetId());\n             }\n             if (state.nBlocksInFlight == 0 && staller != -1) {\n-                if (State(staller)->nStallingSince == 0) {\n-                    State(staller)->nStallingSince = count_microseconds(current_time);\n+                if (State(staller)->m_stalling_since.count() == 0) {\n+                    State(staller)->m_stalling_since = current_time;\n                     LogPrint(BCLog::NET, \"Stall started peer=%d\\n\", staller);\n                 }\n             }"
      }
    ]
  },
  {
    "sha": "b38ff67f24285c6df483dbb38aecbd3e7946c6cd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMzhmZjY3ZjI0Mjg1YzZkZjQ4M2RiYjM4YWVjYmQzZTc5NDZjNmNk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-09-30T03:19:57Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-10-07T23:32:01Z"
      },
      "message": "Make all Poisson delays use std::chrono types",
      "tree": {
        "sha": "7ca4b006200cea39a7e56dd0d9a0ad7e8da89260",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7ca4b006200cea39a7e56dd0d9a0ad7e8da89260"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b38ff67f24285c6df483dbb38aecbd3e7946c6cd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b38ff67f24285c6df483dbb38aecbd3e7946c6cd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b38ff67f24285c6df483dbb38aecbd3e7946c6cd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b38ff67f24285c6df483dbb38aecbd3e7946c6cd/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "614341485801717a575ba3bfdaf4c5245b6d29d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/614341485801717a575ba3bfdaf4c5245b6d29d0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/614341485801717a575ba3bfdaf4c5245b6d29d0"
      }
    ],
    "stats": {
      "total": 87,
      "additions": 34,
      "deletions": 53
    },
    "files": [
      {
        "sha": "aa90a0dc7095c244e220228bc6f6d09e77ae581d",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 11,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b38ff67f24285c6df483dbb38aecbd3e7946c6cd/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b38ff67f24285c6df483dbb38aecbd3e7946c6cd/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=b38ff67f24285c6df483dbb38aecbd3e7946c6cd",
        "patch": "@@ -1858,10 +1858,10 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n     }\n \n     // Initiate network connections\n-    int64_t nStart = GetTime();\n+    auto start = GetTime<std::chrono::microseconds>();\n \n     // Minimum time before next feeler connection (in microseconds).\n-    int64_t nNextFeeler = PoissonNextSend(nStart*1000*1000, FEELER_INTERVAL);\n+    auto next_feeler = PoissonNextSend(start, FEELER_INTERVAL);\n     while (!interruptNet)\n     {\n         ProcessAddrFetch();\n@@ -1877,7 +1877,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n         // Note that we only do this if we started with an empty peers.dat,\n         // (in which case we will query DNS seeds immediately) *and* the DNS\n         // seeds have not returned any results.\n-        if (addrman.size() == 0 && (GetTime() - nStart > 60)) {\n+        if (addrman.size() == 0 && (GetTime<std::chrono::microseconds>() - start > std::chrono::minutes{1})) {\n             static bool done = false;\n             if (!done) {\n                 LogPrintf(\"Adding fixed seed nodes as DNS doesn't seem to be available.\\n\");\n@@ -1923,7 +1923,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n         }\n \n         ConnectionType conn_type = ConnectionType::OUTBOUND_FULL_RELAY;\n-        int64_t nTime = GetTimeMicros();\n+        auto now = GetTime<std::chrono::microseconds>();\n         bool fFeeler = false;\n \n         // Determine what type of connection to open. Opening\n@@ -1941,8 +1941,8 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n             conn_type = ConnectionType::BLOCK_RELAY;\n         } else if (GetTryNewOutboundPeer()) {\n             // OUTBOUND_FULL_RELAY\n-        } else if (nTime > nNextFeeler) {\n-            nNextFeeler = PoissonNextSend(nTime, FEELER_INTERVAL);\n+        } else if (now > next_feeler) {\n+            next_feeler = PoissonNextSend(now, FEELER_INTERVAL);\n             conn_type = ConnectionType::FEELER;\n             fFeeler = true;\n         } else {\n@@ -2954,20 +2954,22 @@ bool CConnman::ForNode(NodeId id, std::function<bool(CNode* pnode)> func)\n     return found != nullptr && NodeFullyConnected(found) && func(found);\n }\n \n-int64_t CConnman::PoissonNextSendInbound(int64_t now, int average_interval_seconds)\n+std::chrono::microseconds CConnman::PoissonNextSendInbound(std::chrono::microseconds now, std::chrono::microseconds average_interval)\n {\n-    if (m_next_send_inv_to_incoming < now) {\n+    if (m_next_send_inv_to_incoming.load() < now) {\n         // If this function were called from multiple threads simultaneously\n         // it would possible that both update the next send variable, and return a different result to their caller.\n         // This is not possible in practice as only the net processing thread invokes this function.\n-        m_next_send_inv_to_incoming = PoissonNextSend(now, average_interval_seconds);\n+        m_next_send_inv_to_incoming = PoissonNextSend(now, average_interval);\n     }\n     return m_next_send_inv_to_incoming;\n }\n \n-int64_t PoissonNextSend(int64_t now, int average_interval_seconds)\n+std::chrono::microseconds PoissonNextSend(std::chrono::microseconds now, std::chrono::microseconds average_interval)\n {\n-    return now + (int64_t)(log1p(GetRand(1ULL << 48) * -0.0000000000000035527136788 /* -1/2^48 */) * average_interval_seconds * -1000000.0 + 0.5);\n+    double unscaled = log1p(GetRand(1ULL << 48) * -0.0000000000000035527136788 /* -1/2^48 */);\n+    double scaled = unscaled * count_microseconds(average_interval);\n+    return now + std::chrono::microseconds{int64_t(scaled + 0.5)};\n }\n \n CSipHasher CConnman::GetDeterministicRandomizer(uint64_t id) const"
      },
      {
        "sha": "969bbdd133480cccb4005ffeda1d8bad3bd1bddf",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 6,
        "deletions": 12,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b38ff67f24285c6df483dbb38aecbd3e7946c6cd/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b38ff67f24285c6df483dbb38aecbd3e7946c6cd/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=b38ff67f24285c6df483dbb38aecbd3e7946c6cd",
        "patch": "@@ -51,8 +51,8 @@ static const bool DEFAULT_WHITELISTFORCERELAY = false;\n \n /** Time after which to disconnect, after waiting for a ping response (or inactivity). */\n static const int TIMEOUT_INTERVAL = 20 * 60;\n-/** Run the feeler connection loop once every 2 minutes or 120 seconds. **/\n-static const int FEELER_INTERVAL = 120;\n+/** Run the feeler connection loop once every 2 minutes. **/\n+static constexpr auto FEELER_INTERVAL = std::chrono::minutes{2};\n /** The maximum number of addresses from our addrman to return in response to a getaddr message. */\n static constexpr size_t MAX_ADDR_TO_SEND = 1000;\n /** Maximum length of incoming protocol messages (no message over 4 MB is currently acceptable). */\n@@ -402,7 +402,7 @@ class CConnman\n         Works assuming that a single interval is used.\n         Variable intervals will result in privacy decrease.\n     */\n-    int64_t PoissonNextSendInbound(int64_t now, int average_interval_seconds);\n+    std::chrono::microseconds PoissonNextSendInbound(std::chrono::microseconds now, std::chrono::microseconds average_interval);\n \n     void SetAsmap(std::vector<bool> asmap) { addrman.m_asmap = std::move(asmap); }\n \n@@ -584,7 +584,7 @@ class CConnman\n      *  This takes the place of a feeler connection */\n     std::atomic_bool m_try_another_outbound_peer;\n \n-    std::atomic<int64_t> m_next_send_inv_to_incoming{0};\n+    std::atomic<std::chrono::microseconds> m_next_send_inv_to_incoming{std::chrono::microseconds{0}};\n \n     friend struct CConnmanTest;\n     friend struct ConnmanTestMsg;\n@@ -999,7 +999,7 @@ class CNode\n         // Minimum fee rate with which to filter inv's to this node\n         CAmount minFeeFilter GUARDED_BY(cs_feeFilter){0};\n         CAmount lastSentFeeFilter{0};\n-        int64_t nextSendTimeFeeFilter{0};\n+        std::chrono::microseconds m_next_send_feefilter{0};\n     };\n \n     // m_tx_relay == nullptr if we're not relaying transactions with this peer\n@@ -1177,12 +1177,6 @@ class CNode\n };\n \n /** Return a timestamp in the future (in microseconds) for exponentially distributed events. */\n-int64_t PoissonNextSend(int64_t now, int average_interval_seconds);\n-\n-/** Wrapper to return mockable type */\n-inline std::chrono::microseconds PoissonNextSend(std::chrono::microseconds now, std::chrono::seconds average_interval)\n-{\n-    return std::chrono::microseconds{PoissonNextSend(now.count(), average_interval.count())};\n-}\n+std::chrono::microseconds PoissonNextSend(std::chrono::microseconds now, std::chrono::microseconds average_interval);\n \n #endif // BITCOIN_NET_H"
      },
      {
        "sha": "6358c106901dd969ef505acc44ba927c261b50b5",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b38ff67f24285c6df483dbb38aecbd3e7946c6cd/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b38ff67f24285c6df483dbb38aecbd3e7946c6cd/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=b38ff67f24285c6df483dbb38aecbd3e7946c6cd",
        "patch": "@@ -117,17 +117,17 @@ static const int MAX_UNCONNECTING_HEADERS = 10;\n /** Minimum blocks required to signal NODE_NETWORK_LIMITED */\n static const unsigned int NODE_NETWORK_LIMITED_MIN_BLOCKS = 288;\n /** Average delay between local address broadcasts */\n-static constexpr std::chrono::hours AVG_LOCAL_ADDRESS_BROADCAST_INTERVAL{24};\n+static constexpr auto AVG_LOCAL_ADDRESS_BROADCAST_INTERVAL = std::chrono::hours{24};\n /** Average delay between peer address broadcasts */\n-static constexpr std::chrono::seconds AVG_ADDRESS_BROADCAST_INTERVAL{30};\n+static constexpr auto AVG_ADDRESS_BROADCAST_INTERVAL = std::chrono::seconds{30};\n /** Average delay between trickled inventory transmissions in seconds.\n  *  Blocks and peers with noban permission bypass this, outbound peers get half this delay. */\n-static const unsigned int INVENTORY_BROADCAST_INTERVAL = 5;\n+static constexpr auto INVENTORY_BROADCAST_INTERVAL = std::chrono::seconds{5};\n /** Maximum rate of inventory items to send per second.\n  *  Limits the impact of low-fee transaction floods. */\n static constexpr unsigned int INVENTORY_BROADCAST_PER_SECOND = 7;\n /** Maximum number of inventory items to send per transmission. */\n-static constexpr unsigned int INVENTORY_BROADCAST_MAX = INVENTORY_BROADCAST_PER_SECOND * INVENTORY_BROADCAST_INTERVAL;\n+static constexpr unsigned int INVENTORY_BROADCAST_MAX = INVENTORY_BROADCAST_PER_SECOND * count_seconds(INVENTORY_BROADCAST_INTERVAL);\n /** The number of most recently announced transactions a peer can request. */\n static constexpr unsigned int INVENTORY_MAX_RECENT_RELAY = 3500;\n /** Verify that INVENTORY_MAX_RECENT_RELAY is enough to cache everything typically\n@@ -136,9 +136,9 @@ static constexpr unsigned int INVENTORY_MAX_RECENT_RELAY = 3500;\n  *  peers, and random variations in the broadcast mechanism. */\n static_assert(INVENTORY_MAX_RECENT_RELAY >= INVENTORY_BROADCAST_PER_SECOND * UNCONDITIONAL_RELAY_DELAY / std::chrono::seconds{1}, \"INVENTORY_RELAY_MAX too low\");\n /** Average delay between feefilter broadcasts in seconds. */\n-static constexpr unsigned int AVG_FEEFILTER_BROADCAST_INTERVAL = 10 * 60;\n+static constexpr auto AVG_FEEFILTER_BROADCAST_INTERVAL = std::chrono::minutes{10};\n /** Maximum feefilter broadcast delay after significant change. */\n-static constexpr unsigned int MAX_FEEFILTER_CHANGE_DELAY = 5 * 60;\n+static constexpr auto MAX_FEEFILTER_CHANGE_DELAY = std::chrono::minutes{5};\n /** Maximum number of compact filters that may be requested with one getcfilters. See BIP 157. */\n static constexpr uint32_t MAX_GETCFILTERS_SIZE = 1000;\n /** Maximum number of cf hashes that may be requested with one getcfheaders. See BIP 157. */\n@@ -4328,10 +4328,10 @@ bool PeerManager::SendMessages(CNode* pto)\n                 if (pto->m_tx_relay->nNextInvSend < current_time) {\n                     fSendTrickle = true;\n                     if (pto->IsInboundConn()) {\n-                        pto->m_tx_relay->nNextInvSend = std::chrono::microseconds{m_connman.PoissonNextSendInbound(count_microseconds(current_time), INVENTORY_BROADCAST_INTERVAL)};\n+                        pto->m_tx_relay->nNextInvSend = m_connman.PoissonNextSendInbound(current_time, INVENTORY_BROADCAST_INTERVAL);\n                     } else {\n                         // Use half the delay for outbound peers, as there is less privacy concern for them.\n-                        pto->m_tx_relay->nNextInvSend = PoissonNextSend(current_time, std::chrono::seconds{INVENTORY_BROADCAST_INTERVAL >> 1});\n+                        pto->m_tx_relay->nNextInvSend = PoissonNextSend(current_time, INVENTORY_BROADCAST_INTERVAL / 2);\n                     }\n                 }\n \n@@ -4635,24 +4635,24 @@ bool PeerManager::SendMessages(CNode* pto)\n                 if (pto->m_tx_relay->lastSentFeeFilter == MAX_FILTER) {\n                     // Send the current filter if we sent MAX_FILTER previously\n                     // and made it out of IBD.\n-                    pto->m_tx_relay->nextSendTimeFeeFilter = count_microseconds(current_time) - 1;\n+                    pto->m_tx_relay->m_next_send_feefilter = current_time - std::chrono::microseconds{1};\n                 }\n             }\n-            if (count_microseconds(current_time) > pto->m_tx_relay->nextSendTimeFeeFilter) {\n+            if (current_time > pto->m_tx_relay->m_next_send_feefilter) {\n                 CAmount filterToSend = g_filter_rounder.round(currentFilter);\n                 // We always have a fee filter of at least minRelayTxFee\n                 filterToSend = std::max(filterToSend, ::minRelayTxFee.GetFeePerK());\n                 if (filterToSend != pto->m_tx_relay->lastSentFeeFilter) {\n                     m_connman.PushMessage(pto, msgMaker.Make(NetMsgType::FEEFILTER, filterToSend));\n                     pto->m_tx_relay->lastSentFeeFilter = filterToSend;\n                 }\n-                pto->m_tx_relay->nextSendTimeFeeFilter = PoissonNextSend(count_microseconds(current_time), AVG_FEEFILTER_BROADCAST_INTERVAL);\n+                pto->m_tx_relay->m_next_send_feefilter = PoissonNextSend(current_time, AVG_FEEFILTER_BROADCAST_INTERVAL);\n             }\n             // If the fee filter has changed substantially and it's still more than MAX_FEEFILTER_CHANGE_DELAY\n             // until scheduled broadcast, then move the broadcast to within MAX_FEEFILTER_CHANGE_DELAY.\n-            else if (count_microseconds(current_time) + MAX_FEEFILTER_CHANGE_DELAY * 1000000 < pto->m_tx_relay->nextSendTimeFeeFilter &&\n+            else if (current_time + MAX_FEEFILTER_CHANGE_DELAY < pto->m_tx_relay->m_next_send_feefilter &&\n                      (currentFilter < 3 * pto->m_tx_relay->lastSentFeeFilter / 4 || currentFilter > 4 * pto->m_tx_relay->lastSentFeeFilter / 3)) {\n-                pto->m_tx_relay->nextSendTimeFeeFilter = count_microseconds(current_time) + GetRandInt(MAX_FEEFILTER_CHANGE_DELAY) * 1000000;\n+                pto->m_tx_relay->m_next_send_feefilter = current_time + GetRandomDuration<std::chrono::microseconds>(MAX_FEEFILTER_CHANGE_DELAY);\n             }\n         }\n     } // release cs_main"
      },
      {
        "sha": "92e8809a0487210bfe582c5ac9251872329d0877",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 15,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b38ff67f24285c6df483dbb38aecbd3e7946c6cd/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b38ff67f24285c6df483dbb38aecbd3e7946c6cd/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=b38ff67f24285c6df483dbb38aecbd3e7946c6cd",
        "patch": "@@ -698,19 +698,4 @@ BOOST_AUTO_TEST_CASE(LocalAddress_BasicLifecycle)\n     BOOST_CHECK_EQUAL(IsLocal(addr), false);\n }\n \n-BOOST_AUTO_TEST_CASE(PoissonNextSend)\n-{\n-    g_mock_deterministic_tests = true;\n-\n-    int64_t now = 5000;\n-    int average_interval_seconds = 600;\n-\n-    auto poisson = ::PoissonNextSend(now, average_interval_seconds);\n-    std::chrono::microseconds poisson_chrono = ::PoissonNextSend(std::chrono::microseconds{now}, std::chrono::seconds{average_interval_seconds});\n-\n-    BOOST_CHECK_EQUAL(poisson, poisson_chrono.count());\n-\n-    g_mock_deterministic_tests = false;\n-}\n-\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "be603829cbfee6ae389b5ade06a88f05d92e2efe",
        "filename": "src/util/time.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b38ff67f24285c6df483dbb38aecbd3e7946c6cd/src/util/time.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b38ff67f24285c6df483dbb38aecbd3e7946c6cd/src/util/time.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/time.h?ref=b38ff67f24285c6df483dbb38aecbd3e7946c6cd",
        "patch": "@@ -22,8 +22,8 @@ void UninterruptibleSleep(const std::chrono::microseconds& n);\n  * This helper is used to convert durations before passing them over an\n  * interface that doesn't support std::chrono (e.g. RPC, debug log, or the GUI)\n  */\n-inline int64_t count_seconds(std::chrono::seconds t) { return t.count(); }\n-inline int64_t count_microseconds(std::chrono::microseconds t) { return t.count(); }\n+constexpr inline int64_t count_seconds(std::chrono::seconds t) { return t.count(); }\n+constexpr inline int64_t count_microseconds(std::chrono::microseconds t) { return t.count(); }\n \n /**\n  * DEPRECATED"
      }
    ]
  },
  {
    "sha": "e1fc6418f32644827947df911dfa271c151f3ce9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMWZjNjQxOGYzMjY0NDgyNzk0N2RmOTExZGZhMjcxYzE1MWYzY2U5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-09-30T03:30:07Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-10-07T23:32:01Z"
      },
      "message": "Make tx relay data structure use std::chrono types",
      "tree": {
        "sha": "ae2f6b5b408f59f7ec60b641adabb65e8de58267",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ae2f6b5b408f59f7ec60b641adabb65e8de58267"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e1fc6418f32644827947df911dfa271c151f3ce9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1fc6418f32644827947df911dfa271c151f3ce9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e1fc6418f32644827947df911dfa271c151f3ce9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1fc6418f32644827947df911dfa271c151f3ce9/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b38ff67f24285c6df483dbb38aecbd3e7946c6cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b38ff67f24285c6df483dbb38aecbd3e7946c6cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b38ff67f24285c6df483dbb38aecbd3e7946c6cd"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "5000e94d25157887de95125033e8d8f570a1cd94",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1fc6418f32644827947df911dfa271c151f3ce9/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1fc6418f32644827947df911dfa271c151f3ce9/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=e1fc6418f32644827947df911dfa271c151f3ce9",
        "patch": "@@ -38,9 +38,9 @@ static constexpr int64_t ORPHAN_TX_EXPIRE_TIME = 20 * 60;\n /** Minimum time between orphan transactions expire time checks in seconds */\n static constexpr int64_t ORPHAN_TX_EXPIRE_INTERVAL = 5 * 60;\n /** How long to cache transactions in mapRelay for normal relay */\n-static constexpr std::chrono::seconds RELAY_TX_CACHE_TIME = std::chrono::minutes{15};\n+static constexpr auto RELAY_TX_CACHE_TIME = std::chrono::minutes{15};\n /** How long a transaction has to be in the mempool before it can unconditionally be relayed (even when not in mapRelay). */\n-static constexpr std::chrono::seconds UNCONDITIONAL_RELAY_DELAY = std::chrono::minutes{2};\n+static constexpr auto UNCONDITIONAL_RELAY_DELAY = std::chrono::minutes{2};\n /** Headers download timeout expressed in microseconds\n  *  Timeout = base + per_header * (expected number of headers) */\n static constexpr auto HEADERS_DOWNLOAD_TIMEOUT_BASE = std::chrono::minutes{15};\n@@ -254,7 +254,7 @@ namespace {\n     typedef std::map<uint256, CTransactionRef> MapRelay;\n     MapRelay mapRelay GUARDED_BY(cs_main);\n     /** Expiration-time ordered list of (expire time, relay map entry) pairs. */\n-    std::deque<std::pair<int64_t, MapRelay::iterator>> vRelayExpiration GUARDED_BY(cs_main);\n+    std::deque<std::pair<std::chrono::microseconds, MapRelay::iterator>> g_relay_expiration GUARDED_BY(cs_main);\n \n     struct IteratorComparator\n     {\n@@ -4427,20 +4427,20 @@ bool PeerManager::SendMessages(CNode* pto)\n                         nRelayedTransactions++;\n                         {\n                             // Expire old relay messages\n-                            while (!vRelayExpiration.empty() && vRelayExpiration.front().first < count_microseconds(current_time))\n+                            while (!g_relay_expiration.empty() && g_relay_expiration.front().first < current_time)\n                             {\n-                                mapRelay.erase(vRelayExpiration.front().second);\n-                                vRelayExpiration.pop_front();\n+                                mapRelay.erase(g_relay_expiration.front().second);\n+                                g_relay_expiration.pop_front();\n                             }\n \n                             auto ret = mapRelay.emplace(txid, std::move(txinfo.tx));\n                             if (ret.second) {\n-                                vRelayExpiration.emplace_back(count_microseconds(current_time + std::chrono::microseconds{RELAY_TX_CACHE_TIME}), ret.first);\n+                                g_relay_expiration.emplace_back(current_time + RELAY_TX_CACHE_TIME, ret.first);\n                             }\n                             // Add wtxid-based lookup into mapRelay as well, so that peers can request by wtxid\n                             auto ret2 = mapRelay.emplace(wtxid, ret.first->second);\n                             if (ret2.second) {\n-                                vRelayExpiration.emplace_back(count_microseconds(current_time + std::chrono::microseconds{RELAY_TX_CACHE_TIME}), ret2.first);\n+                                g_relay_expiration.emplace_back(current_time + RELAY_TX_CACHE_TIME, ret2.first);\n                             }\n                         }\n                         if (vInv.size() == MAX_INV_SZ) {"
      }
    ]
  }
]