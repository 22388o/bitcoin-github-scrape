[
  {
    "sha": "73636bc230806fadf892398ff2bd73ea5ec310a2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MzYzNmJjMjMwODA2ZmFkZjg5MjM5OGZmMmJkNzNlYTVlYzMxMGEy",
    "commit": {
      "author": {
        "name": "David Joel Schwartz",
        "email": "davidjoelschwartz@gmail.com",
        "date": "2011-07-04T20:55:22Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-04-10T14:25:01Z"
      },
      "message": "Support multi-threaded JSON-RPC",
      "tree": {
        "sha": "4b1430ee58261a45032fbdc09786e7f78516467e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4b1430ee58261a45032fbdc09786e7f78516467e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/73636bc230806fadf892398ff2bd73ea5ec310a2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73636bc230806fadf892398ff2bd73ea5ec310a2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/73636bc230806fadf892398ff2bd73ea5ec310a2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73636bc230806fadf892398ff2bd73ea5ec310a2/comments",
    "author": {
      "login": "JoelKatz",
      "id": 877549,
      "node_id": "MDQ6VXNlcjg3NzU0OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/877549?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JoelKatz",
      "html_url": "https://github.com/JoelKatz",
      "followers_url": "https://api.github.com/users/JoelKatz/followers",
      "following_url": "https://api.github.com/users/JoelKatz/following{/other_user}",
      "gists_url": "https://api.github.com/users/JoelKatz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JoelKatz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JoelKatz/subscriptions",
      "organizations_url": "https://api.github.com/users/JoelKatz/orgs",
      "repos_url": "https://api.github.com/users/JoelKatz/repos",
      "events_url": "https://api.github.com/users/JoelKatz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JoelKatz/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1a275bac2b5454ae9d6744f28c29cbf40e2fbf13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a275bac2b5454ae9d6744f28c29cbf40e2fbf13",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1a275bac2b5454ae9d6744f28c29cbf40e2fbf13"
      }
    ],
    "stats": {
      "total": 116,
      "additions": 88,
      "deletions": 28
    },
    "files": [
      {
        "sha": "42774e35c3a20d6f9cfae604f0fadd01e377abc3",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 82,
        "deletions": 25,
        "changes": 107,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73636bc230806fadf892398ff2bd73ea5ec310a2/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73636bc230806fadf892398ff2bd73ea5ec310a2/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=73636bc230806fadf892398ff2bd73ea5ec310a2",
        "patch": "@@ -3,6 +3,16 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n \n+// CAUTION: This is not the offical rpc.cpp from the official\n+// bitcoin distribution. It has been modified by me\n+// <davidjoelschwartz@gmail.com> to support multi-threaded RPC.\n+// This is quick and dirty code, it may not work for you. No warranties\n+// are expressed or implied. I made a best effort to improve the RPC\n+// performance. This notification is for blame, not for credit and\n+// may be removed if this change, or one similar, is accepted into the\n+// main distribution. If this has helped you, please donate to:\n+// 1H3STBxuzEHZQQD4hkjVE22TWTazcZzeBw\n+\n #include \"headers.h\"\n #include \"db.h\"\n #include \"net.h\"\n@@ -18,6 +28,7 @@\n #include <boost/filesystem/fstream.hpp>\n typedef boost::asio::ssl::stream<boost::asio::ip::tcp::socket> SSLStream;\n \n+#define BOOST_SPIRIT_THREADSAFE\n #include \"json/json_spirit_reader_template.h\"\n #include \"json/json_spirit_writer_template.h\"\n #include \"json/json_spirit_utils.h\"\n@@ -44,6 +55,9 @@ static CCriticalSection cs_nWalletUnlockTime;\n extern Value dumpprivkey(const Array& params, bool fHelp);\n extern Value importprivkey(const Array& params, bool fHelp);\n \n+void ThreadRPCServer3(void* parg);\n+boost::mutex mRPCHandler; // for some reason, 'getwork' is not reentrant\n+\n Object JSONRPCError(int code, const string& message)\n {\n     Object error;\n@@ -1762,6 +1776,7 @@ Value getwork(const Array& params, bool fHelp)\n     if (IsInitialBlockDownload())\n         throw JSONRPCError(-10, \"Bitcoin is downloading blocks...\");\n \n+    // Umm, why is this static and not protected by a mutex?\n     typedef map<uint256, pair<CBlock*, CScript> > mapNewBlock_t;\n     static mapNewBlock_t mapNewBlock;\n     static vector<CBlock*> vNewBlock;\n@@ -2323,20 +2338,34 @@ class SSLIOStreamDevice : public iostreams::device<iostreams::bidirectional> {\n     SSLStream& stream;\n };\n \n+class AcceptedConnection\n+{\n+    public:\n+    SSLStream sslStream;\n+    SSLIOStreamDevice d;\n+    iostreams::stream<SSLIOStreamDevice> stream;\n+\n+    ip::tcp::endpoint peer;\n+\n+    AcceptedConnection(asio::io_service &io_service, ssl::context &context,\n+     bool fUseSSL) : sslStream(io_service, context), d(sslStream, fUseSSL),\n+     stream(d) { ; }\n+};\n+\n void ThreadRPCServer(void* parg)\n {\n     IMPLEMENT_RANDOMIZE_STACK(ThreadRPCServer(parg));\n     try\n     {\n-        vnThreadsRunning[THREAD_RPCSERVER]++;\n+        ++vnThreadsRunning[THREAD_RPCLISTENER];\n         ThreadRPCServer2(parg);\n-        vnThreadsRunning[THREAD_RPCSERVER]--;\n+        --vnThreadsRunning[THREAD_RPCLISTENER];\n     }\n     catch (std::exception& e) {\n-        vnThreadsRunning[THREAD_RPCSERVER]--;\n+        --vnThreadsRunning[THREAD_RPCLISTENER];\n         PrintException(&e, \"ThreadRPCServer()\");\n     } catch (...) {\n-        vnThreadsRunning[THREAD_RPCSERVER]--;\n+        --vnThreadsRunning[THREAD_RPCLISTENER];\n         PrintException(NULL, \"ThreadRPCServer()\");\n     }\n     printf(\"ThreadRPCServer exiting\\n\");\n@@ -2404,54 +2433,72 @@ void ThreadRPCServer2(void* parg)\n     loop\n     {\n         // Accept connection\n-        SSLStream sslStream(io_service, context);\n-        SSLIOStreamDevice d(sslStream, fUseSSL);\n-        iostreams::stream<SSLIOStreamDevice> stream(d);\n+        AcceptedConnection *conn=new AcceptedConnection(io_service, context, fUseSSL);\n \n-        ip::tcp::endpoint peer;\n-        vnThreadsRunning[THREAD_RPCSERVER]--;\n-        acceptor.accept(sslStream.lowest_layer(), peer);\n+        --vnThreadsRunning[THREAD_RPCLISTENER];\n+        acceptor.accept(conn->sslStream.lowest_layer(), conn->peer);\n         vnThreadsRunning[4]++;\n+\n         if (fShutdown)\n+        {\n+            delete conn;\n             return;\n+        }\n \n         // Restrict callers by IP\n-        if (!ClientAllowed(peer.address().to_string()))\n+        if (!ClientAllowed(conn->peer.address().to_string()))\n         {\n             // Only send a 403 if we're not using SSL to prevent a DoS during the SSL handshake.\n             if (!fUseSSL)\n-                stream << HTTPReply(403, \"\") << std::flush;\n-            continue;\n+                conn->stream << HTTPReply(403, \"\") << std::flush;\n+            delete conn;\n         }\n+        else\n+            CreateThread(ThreadRPCServer3, (void *) conn);\n+    }\n+}\n \n+void ThreadRPCServer3(void* parg)\n+{\n+    IMPLEMENT_RANDOMIZE_STACK(ThreadRPCServer3(parg));\n+    ++vnThreadsRunning[THREAD_RPCHANDLER];\n+    AcceptedConnection *conn=(AcceptedConnection *) parg;\n+\n+    do {\n         map<string, string> mapHeaders;\n         string strRequest;\n \n-        boost::thread api_caller(ReadHTTP, boost::ref(stream), boost::ref(mapHeaders), boost::ref(strRequest));\n+#if 0\n+        boost::thread api_caller(ReadHTTP, boost::ref(conn->stream), boost::ref(mapHeaders), boost::ref(strRequest));\n         if (!api_caller.timed_join(boost::posix_time::seconds(GetArg(\"-rpctimeout\", 30))))\n         {   // Timed out:\n-            acceptor.cancel();\n             printf(\"ThreadRPCServer ReadHTTP timeout\\n\");\n-            continue;\n+            conn->stream.close(); // This doesn't work\n+            api_caller.join();\n+            delete conn;\n+            --vnThreadsRunning[THREAD_RPCHANDLER];\n+            return;\n         }\n+#endif\n+        ReadHTTP(conn->stream, mapHeaders, strRequest);\n \n         // Check authorization\n         if (mapHeaders.count(\"authorization\") == 0)\n         {\n-            stream << HTTPReply(401, \"\") << std::flush;\n-            continue;\n+            conn->stream << HTTPReply(401, \"\") << std::flush;\n+            break;\n         }\n         if (!HTTPAuthorized(mapHeaders))\n         {\n-            printf(\"ThreadRPCServer incorrect password attempt from %s\\n\",peer.address().to_string().c_str());\n+            printf(\"ThreadRPCServer incorrect password attempt from %s\\n\", conn->peer.address().to_string().c_str());\n             /* Deter brute-forcing short passwords.\n                If this results in a DOS the user really\n                shouldn't have their RPC port exposed.*/\n             if (mapArgs[\"-rpcpassword\"].size() < 20)\n                 Sleep(250);\n \n-            stream << HTTPReply(401, \"\") << std::flush;\n-            continue;\n+            conn->stream << HTTPReply(401, \"\") << std::flush;\n+            break;\n         }\n \n         Value id = Value::null;\n@@ -2498,6 +2545,7 @@ void ThreadRPCServer2(void* parg)\n \n             try\n             {\n+                boost::unique_lock<boost::mutex> lock(mRPCHandler);\n                 // Execute\n                 Value result;\n                 {\n@@ -2507,22 +2555,31 @@ void ThreadRPCServer2(void* parg)\n \n                 // Send reply\n                 string strReply = JSONRPCReply(result, Value::null, id);\n-                stream << HTTPReply(200, strReply) << std::flush;\n+                conn->stream << HTTPReply(200, strReply) << std::flush;\n             }\n             catch (std::exception& e)\n             {\n-                ErrorReply(stream, JSONRPCError(-1, e.what()), id);\n+                ErrorReply(conn->stream, JSONRPCError(-1, e.what()), id);\n+            }\n+            catch (Object& e)\n+            {\n+                ErrorReply(conn->stream, e, id);\n             }\n         }\n         catch (Object& objError)\n         {\n-            ErrorReply(stream, objError, id);\n+            ErrorReply(conn->stream, objError, id);\n+            break;\n         }\n         catch (std::exception& e)\n         {\n-            ErrorReply(stream, JSONRPCError(-32700, e.what()), id);\n+            ErrorReply(conn->stream, JSONRPCError(-32700, e.what()), id);\n+            break;\n         }\n     }\n+    while (0);\n+    delete conn;\n+    --vnThreadsRunning[THREAD_RPCHANDLER];\n }\n \n "
      },
      {
        "sha": "610ccbeec0d82891ad1b812103dbf3ef86ca1dc5",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73636bc230806fadf892398ff2bd73ea5ec310a2/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73636bc230806fadf892398ff2bd73ea5ec310a2/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=73636bc230806fadf892398ff2bd73ea5ec310a2",
        "patch": "@@ -1708,12 +1708,13 @@ bool StopNode()\n     if (vnThreadsRunning[THREAD_OPENCONNECTIONS] > 0) printf(\"ThreadOpenConnections still running\\n\");\n     if (vnThreadsRunning[THREAD_MESSAGEHANDLER] > 0) printf(\"ThreadMessageHandler still running\\n\");\n     if (vnThreadsRunning[THREAD_MINER] > 0) printf(\"ThreadBitcoinMiner still running\\n\");\n-    if (vnThreadsRunning[THREAD_RPCSERVER] > 0) printf(\"ThreadRPCServer still running\\n\");\n+    if (vnThreadsRunning[THREAD_RPCLISTENER] > 0) printf(\"ThreadRPCListener still running\\n\");\n+    if (vnThreadsRunning[THREAD_RPCHANDLER] > 0) printf(\"ThreadsRPCServer still running\\n\");\n     if (fHaveUPnP && vnThreadsRunning[THREAD_UPNP] > 0) printf(\"ThreadMapPort still running\\n\");\n     if (vnThreadsRunning[THREAD_DNSSEED] > 0) printf(\"ThreadDNSAddressSeed still running\\n\");\n     if (vnThreadsRunning[THREAD_ADDEDCONNECTIONS] > 0) printf(\"ThreadOpenAddedConnections still running\\n\");\n     if (vnThreadsRunning[THREAD_DUMPADDRESS] > 0) printf(\"ThreadDumpAddresses still running\\n\");\n-    while (vnThreadsRunning[THREAD_MESSAGEHANDLER] > 0 || vnThreadsRunning[THREAD_RPCSERVER] > 0)\n+    while (vnThreadsRunning[THREAD_MESSAGEHANDLER] > 0 || vnThreadsRunning[THREAD_RPCHANDLER] > 0)\n         Sleep(20);\n     Sleep(50);\n     DumpAddresses();"
      },
      {
        "sha": "65316b0f810fba2df973baab962f5d860244ec3a",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73636bc230806fadf892398ff2bd73ea5ec310a2/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73636bc230806fadf892398ff2bd73ea5ec310a2/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=73636bc230806fadf892398ff2bd73ea5ec310a2",
        "patch": "@@ -7,6 +7,7 @@\n \n #include <deque>\n #include <boost/array.hpp>\n+#include <boost/detail/atomic_count.hpp>\n #include <boost/foreach.hpp>\n #include <openssl/rand.h>\n \n@@ -73,11 +74,12 @@ enum threadId\n     THREAD_OPENCONNECTIONS,\n     THREAD_MESSAGEHANDLER,\n     THREAD_MINER,\n-    THREAD_RPCSERVER,\n+    THREAD_RPCLISTENER,\n     THREAD_UPNP,\n     THREAD_DNSSEED,\n     THREAD_ADDEDCONNECTIONS,\n     THREAD_DUMPADDRESS,\n+    THREAD_RPCHANDLER,\n \n     THREAD_MAX\n };"
      }
    ]
  },
  {
    "sha": "8349ef0558d5273c4570061c98d120276ce4c060",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MzQ5ZWYwNTU4ZDUyNzNjNDU3MDA2MWM5OGQxMjAyNzZjZTRjMDYw",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2011-07-04T21:09:12Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-04-10T14:25:07Z"
      },
      "message": "Implement ThreadSafeRPC and ThreadUnsafeRPC system to allow specific parts to be made thread-safe",
      "tree": {
        "sha": "44cbbe60ee8164ba73a7dc4256e4d27856b82e09",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/44cbbe60ee8164ba73a7dc4256e4d27856b82e09"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8349ef0558d5273c4570061c98d120276ce4c060",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8349ef0558d5273c4570061c98d120276ce4c060",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8349ef0558d5273c4570061c98d120276ce4c060",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8349ef0558d5273c4570061c98d120276ce4c060/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "73636bc230806fadf892398ff2bd73ea5ec310a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73636bc230806fadf892398ff2bd73ea5ec310a2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/73636bc230806fadf892398ff2bd73ea5ec310a2"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 31,
      "deletions": 2
    },
    "files": [
      {
        "sha": "67b6bceb7cd9364e3ee2b570c766324ab954c9aa",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 2,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8349ef0558d5273c4570061c98d120276ce4c060/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8349ef0558d5273c4570061c98d120276ce4c060/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=8349ef0558d5273c4570061c98d120276ce4c060",
        "patch": "@@ -56,7 +56,25 @@ extern Value dumpprivkey(const Array& params, bool fHelp);\n extern Value importprivkey(const Array& params, bool fHelp);\n \n void ThreadRPCServer3(void* parg);\n-boost::mutex mRPCHandler; // for some reason, 'getwork' is not reentrant\n+\n+static boost::mutex mUnsafeRPC;\n+boost::thread_specific_ptr<bool> fUnsafe;\n+\n+inline void ThreadSafeRPC()\n+{\n+    if (!*fUnsafe)\n+        return;\n+    mUnsafeRPC.unlock();\n+    *fUnsafe = false;\n+}\n+\n+inline void ThreadUnsafeRPC()\n+{\n+    if (*fUnsafe)\n+        return;\n+    mUnsafeRPC.lock();\n+    *fUnsafe = true;\n+}\n \n Object JSONRPCError(int code, const string& message)\n {\n@@ -2463,6 +2481,7 @@ void ThreadRPCServer3(void* parg)\n     IMPLEMENT_RANDOMIZE_STACK(ThreadRPCServer3(parg));\n     ++vnThreadsRunning[THREAD_RPCHANDLER];\n     AcceptedConnection *conn=(AcceptedConnection *) parg;\n+    fUnsafe.reset(new bool(false));\n \n     do {\n         map<string, string> mapHeaders;\n@@ -2501,6 +2520,8 @@ void ThreadRPCServer3(void* parg)\n             break;\n         }\n \n+        ThreadUnsafeRPC();\n+\n         Value id = Value::null;\n         try\n         {\n@@ -2545,40 +2566,48 @@ void ThreadRPCServer3(void* parg)\n \n             try\n             {\n-                boost::unique_lock<boost::mutex> lock(mRPCHandler);\n                 // Execute\n                 Value result;\n                 {\n                     LOCK2(cs_main, pwalletMain->cs_wallet);\n                     result = (*(*mi).second)(params, false);\n                 }\n \n+                ThreadSafeRPC();\n+\n                 // Send reply\n                 string strReply = JSONRPCReply(result, Value::null, id);\n                 conn->stream << HTTPReply(200, strReply) << std::flush;\n             }\n             catch (std::exception& e)\n             {\n+                ThreadSafeRPC();\n                 ErrorReply(conn->stream, JSONRPCError(-1, e.what()), id);\n             }\n             catch (Object& e)\n             {\n+                ThreadSafeRPC();\n                 ErrorReply(conn->stream, e, id);\n             }\n         }\n         catch (Object& objError)\n         {\n+            ThreadSafeRPC();\n             ErrorReply(conn->stream, objError, id);\n             break;\n         }\n         catch (std::exception& e)\n         {\n+            ThreadSafeRPC();\n             ErrorReply(conn->stream, JSONRPCError(-32700, e.what()), id);\n             break;\n         }\n+\n+        ThreadSafeRPC();\n     }\n     while (0);\n     delete conn;\n+    delete fUnsafe.release();\n     --vnThreadsRunning[THREAD_RPCHANDLER];\n }\n "
      }
    ]
  },
  {
    "sha": "7ee8f04aa18052b269c74fc1488ac65b8ce2359b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZWU4ZjA0YWExODA1MmIyNjljNzRmYzE0ODhhYzY1YjhjZTIzNTli",
    "commit": {
      "author": {
        "name": "David Joel Schwartz",
        "email": "davidjoelschwartz@gmail.com",
        "date": "2011-07-05T03:28:22Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-04-10T14:25:11Z"
      },
      "message": "Support for HTTP/1.0 and HTTP/1.1, including the proper use of keep-alives",
      "tree": {
        "sha": "39f49e8585ad3437a18a1c38fff5f678c22cf159",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/39f49e8585ad3437a18a1c38fff5f678c22cf159"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7ee8f04aa18052b269c74fc1488ac65b8ce2359b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ee8f04aa18052b269c74fc1488ac65b8ce2359b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7ee8f04aa18052b269c74fc1488ac65b8ce2359b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ee8f04aa18052b269c74fc1488ac65b8ce2359b/comments",
    "author": {
      "login": "JoelKatz",
      "id": 877549,
      "node_id": "MDQ6VXNlcjg3NzU0OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/877549?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JoelKatz",
      "html_url": "https://github.com/JoelKatz",
      "followers_url": "https://api.github.com/users/JoelKatz/followers",
      "following_url": "https://api.github.com/users/JoelKatz/following{/other_user}",
      "gists_url": "https://api.github.com/users/JoelKatz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JoelKatz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JoelKatz/subscriptions",
      "organizations_url": "https://api.github.com/users/JoelKatz/orgs",
      "repos_url": "https://api.github.com/users/JoelKatz/repos",
      "events_url": "https://api.github.com/users/JoelKatz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JoelKatz/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8349ef0558d5273c4570061c98d120276ce4c060",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8349ef0558d5273c4570061c98d120276ce4c060",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8349ef0558d5273c4570061c98d120276ce4c060"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 38,
      "deletions": 10
    },
    "files": [
      {
        "sha": "d64648394c7d7a6fe54b7867dcb9509daeadfc85",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 10,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ee8f04aa18052b269c74fc1488ac65b8ce2359b/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ee8f04aa18052b269c74fc1488ac65b8ce2359b/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=7ee8f04aa18052b269c74fc1488ac65b8ce2359b",
        "patch": "@@ -2138,7 +2138,7 @@ string rfc1123Time()\n     return string(buffer);\n }\n \n-static string HTTPReply(int nStatus, const string& strMsg)\n+static string HTTPReply(int nStatus, const string& strMsg, bool keepalive)\n {\n     if (nStatus == 401)\n         return strprintf(\"HTTP/1.0 401 Authorization Required\\r\\n\"\n@@ -2167,7 +2167,7 @@ static string HTTPReply(int nStatus, const string& strMsg)\n     return strprintf(\n             \"HTTP/1.1 %d %s\\r\\n\"\n             \"Date: %s\\r\\n\"\n-            \"Connection: close\\r\\n\"\n+            \"Connection: %s\\r\\n\"\n             \"Content-Length: %d\\r\\n\"\n             \"Content-Type: application/json\\r\\n\"\n             \"Server: bitcoin-json-rpc/%s\\r\\n\"\n@@ -2176,19 +2176,24 @@ static string HTTPReply(int nStatus, const string& strMsg)\n         nStatus,\n         cStatus,\n         rfc1123Time().c_str(),\n+        keepalive ? \"keep-alive\" : \"close\",\n         strMsg.size(),\n         FormatFullVersion().c_str(),\n         strMsg.c_str());\n }\n \n-int ReadHTTPStatus(std::basic_istream<char>& stream)\n+int ReadHTTPStatus(std::basic_istream<char>& stream, int &proto)\n {\n     string str;\n     getline(stream, str);\n     vector<string> vWords;\n     boost::split(vWords, str, boost::is_any_of(\" \"));\n     if (vWords.size() < 2)\n         return 500;\n+    proto = 0;\n+    const char *ver = strstr(str.c_str(), \"HTTP/1.\");\n+    if (ver != NULL)\n+        proto = atoi(ver+7);\n     return atoi(vWords[1].c_str());\n }\n \n@@ -2223,7 +2228,8 @@ int ReadHTTP(std::basic_istream<char>& stream, map<string, string>& mapHeadersRe\n     strMessageRet = \"\";\n \n     // Read status\n-    int nStatus = ReadHTTPStatus(stream);\n+    int nProto;\n+    int nStatus = ReadHTTPStatus(stream, nProto);\n \n     // Read header\n     int nLen = ReadHTTPHeader(stream, mapHeadersRet);\n@@ -2238,6 +2244,16 @@ int ReadHTTP(std::basic_istream<char>& stream, map<string, string>& mapHeadersRe\n         strMessageRet = string(vch.begin(), vch.end());\n     }\n \n+    string sConHdr=mapHeadersRet[\"connection\"];\n+\n+    if ( (sConHdr != \"close\") && (sConHdr != \"keep-alive\") )\n+    {\n+        if(nProto >= 1)\n+            mapHeadersRet[\"connection\"]=\"keep-alive\";\n+        else\n+            mapHeadersRet[\"connection\"]=\"close\";\n+    }\n+\n     return nStatus;\n }\n \n@@ -2290,7 +2306,7 @@ void ErrorReply(std::ostream& stream, const Object& objError, const Value& id)\n     if (code == -32600) nStatus = 400;\n     else if (code == -32601) nStatus = 404;\n     string strReply = JSONRPCReply(Value::null, objError, id);\n-    stream << HTTPReply(nStatus, strReply) << std::flush;\n+    stream << HTTPReply(nStatus, strReply, false) << std::flush;\n }\n \n bool ClientAllowed(const string& strAddress)\n@@ -2468,7 +2484,7 @@ void ThreadRPCServer2(void* parg)\n         {\n             // Only send a 403 if we're not using SSL to prevent a DoS during the SSL handshake.\n             if (!fUseSSL)\n-                conn->stream << HTTPReply(403, \"\") << std::flush;\n+                conn->stream << HTTPReply(403, \"\", false) << std::flush;\n             delete conn;\n         }\n         else\n@@ -2483,7 +2499,15 @@ void ThreadRPCServer3(void* parg)\n     AcceptedConnection *conn=(AcceptedConnection *) parg;\n     fUnsafe.reset(new bool(false));\n \n-    do {\n+    bool fRun = true;\n+    loop {\n+        if (fShutdown || !fRun)\n+        {\n+            conn->stream.close();\n+            delete conn;\n+            --vnThreadsRunning[THREAD_RPCHANDLER];\n+            return;\n+        }\n         map<string, string> mapHeaders;\n         string strRequest;\n \n@@ -2504,7 +2528,7 @@ void ThreadRPCServer3(void* parg)\n         // Check authorization\n         if (mapHeaders.count(\"authorization\") == 0)\n         {\n-            conn->stream << HTTPReply(401, \"\") << std::flush;\n+            conn->stream << HTTPReply(401, \"\", false) << std::flush;\n             break;\n         }\n         if (!HTTPAuthorized(mapHeaders))\n@@ -2516,9 +2540,11 @@ void ThreadRPCServer3(void* parg)\n             if (mapArgs[\"-rpcpassword\"].size() < 20)\n                 Sleep(250);\n \n-            conn->stream << HTTPReply(401, \"\") << std::flush;\n+            conn->stream << HTTPReply(401, \"\", false) << std::flush;\n             break;\n         }\n+        if (mapHeaders[\"connection\"] == \"close\")\n+            fRun = false;\n \n         ThreadUnsafeRPC();\n \n@@ -2577,17 +2603,19 @@ void ThreadRPCServer3(void* parg)\n \n                 // Send reply\n                 string strReply = JSONRPCReply(result, Value::null, id);\n-                conn->stream << HTTPReply(200, strReply) << std::flush;\n+                conn->stream << HTTPReply(200, strReply, fRun) << std::flush;\n             }\n             catch (std::exception& e)\n             {\n                 ThreadSafeRPC();\n                 ErrorReply(conn->stream, JSONRPCError(-1, e.what()), id);\n+                fRun = false;\n             }\n             catch (Object& e)\n             {\n                 ThreadSafeRPC();\n                 ErrorReply(conn->stream, e, id);\n+                fRun = false;\n             }\n         }\n         catch (Object& objError)"
      }
    ]
  },
  {
    "sha": "1fbd8edfc157624e51b7b43086b4048e1f470f24",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZmJkOGVkZmMxNTc2MjRlNTFiN2I0MzA4NmI0MDQ4ZTFmNDcwZjI0",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2011-07-04T21:15:23Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-04-10T14:26:33Z"
      },
      "message": "Allow at least CreateNewBlock (in getwork) to run in parallel with other JSON-RPC requests",
      "tree": {
        "sha": "0e83ae668e3bd26a15fe657b1dff2e4391036846",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0e83ae668e3bd26a15fe657b1dff2e4391036846"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1fbd8edfc157624e51b7b43086b4048e1f470f24",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fbd8edfc157624e51b7b43086b4048e1f470f24",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1fbd8edfc157624e51b7b43086b4048e1f470f24",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fbd8edfc157624e51b7b43086b4048e1f470f24/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7ee8f04aa18052b269c74fc1488ac65b8ce2359b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ee8f04aa18052b269c74fc1488ac65b8ce2359b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7ee8f04aa18052b269c74fc1488ac65b8ce2359b"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 11,
      "deletions": 6
    },
    "files": [
      {
        "sha": "224ae9d9f7fb07440bb82213f354dc73c7a6d38e",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 6,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1fbd8edfc157624e51b7b43086b4048e1f470f24/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1fbd8edfc157624e51b7b43086b4048e1f470f24/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=1fbd8edfc157624e51b7b43086b4048e1f470f24",
        "patch": "@@ -1818,15 +1818,20 @@ Value getwork(const Array& params, bool fHelp)\n                     delete pblock;\n                 vNewBlock.clear();\n             }\n-            nTransactionsUpdatedLast = nTransactionsUpdated;\n-            pindexPrev = pindexBest;\n-            nStart = GetTime();\n \n             // Create new block\n-            pblock = CreateNewBlock(reservekey);\n-            if (!pblock)\n+            CBlock* pNewBlock;\n+            ThreadSafeRPC();\n+            pNewBlock = CreateNewBlock(reservekey);\n+            ThreadUnsafeRPC();\n+            if (!pNewBlock)\n                 throw JSONRPCError(-7, \"Out of memory\");\n-            vNewBlock.push_back(pblock);\n+            vNewBlock.push_back(pNewBlock);\n+            pblock = pNewBlock;\n+\n+            nTransactionsUpdatedLast = nTransactionsUpdated;\n+            pindexPrev = pindexBest;\n+            nStart = GetTime();\n         }\n \n         // Update nTime"
      }
    ]
  }
]