DrahtBot,2020-01-21 23:47:28,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19792 (rpc: Add dumpcoinstats by fjahr)\n* #19695 ([do not merge] Test impact of secp256k1 endianness detection change by",https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-576940388,576940388,
sipa,2020-01-22 17:25:32,"@MaxHillebrand A few overall comments:\n* I don't think all references to (bip-)taproot/tapscript/schnorr should be changed to the BIP numbers; in some cases maybe we should just drop the ""bip-"" prefix (e.g. I think talking about a ""taproot spend"" is more clear than ""bip341 spend"").\n* All changes in the src/secp256k1 directory should go to https://github.com/bitcoin-core/secp256k1/pull/558 inst",https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-577295396,577295396,
MaxHillebrand,2020-01-22 17:34:12,"Thanks @sipa, I agree with your comments. \nI have deleted my suggestions to change the tagged hashes, the others are still open. Please ACK/NACK and commit what you think is correct.",https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-577299155,577299155,
jnewbery,2020-03-17 21:18:03,"I've rebased this on master, and taken the most recent version of https://github.com/bitcoin-core/secp256k1/pull/558 (which I've saved at https://github.com/jnewbery/secp256k1/tree/819c3a6c1 since the PR will have commits squashed and further small changes made). The rebased branch is at https://github.com/jnewbery/bitcoin/tree/pr17977.1. Changes:\n\n- _O(1) OP_IF/NOTIF/ELSE/ENDIF script impleme",https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-600306118,600306118,
sipa,2020-03-18 05:43:12,"Rebased, and included @jnewbery's changes from above.\n\nHere is what I did:\n* I created a rebase myself (with the old libsecp256k1, and old square pubkey rule).\n* Compared the final tree with John's version, allowing me to review the even-pubkey changes; everything looked correct, but I saw a few minor improvements.\n* I switched to John's version, apart from this patch:\n```diff\ndiff -",https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-600435965,600435965,
sipa,2020-03-26 20:31:48,"Rebased on top of #18388, #18422, and #18401, and addressed a number of comments.",https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-604669232,604669232,
sipa,2020-03-27 20:48:01,Rebased now that #18388 (Span stack) is merged.,https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-605308348,605308348,
sipa,2020-03-28 22:27:29,Made another change: the policy-checking code now also uses Span stacks.,https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-605527885,605527885,
jnewbery,2020-04-10 20:30:27,Don't rebase yet. I hope to get #18401 merged soon.,https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-612203848,612203848,
jnewbery,2020-04-16 19:19:55,"I've rebased this branch on master here: https://github.com/jnewbery/bitcoin/tree/pr17977.2 (using the same libsecp commit).\n\nThis did require one additional commit https://github.com/jnewbery/bitcoin/commit/df38ebef99229a29c16cda571ded4a3613ead743 due to the new assert added in `PrecomputedTransactionData::Init()`. I'll PR that separately.",https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-614846939,614846939,
jnewbery,2020-04-19 15:21:50,I've rebased on master again now that https://github.com/jnewbery/bitcoin/commit/df38ebef99229a29c16cda571ded4a3613ead743 is merged. Here: https://github.com/jnewbery/bitcoin/tree/pr17977.3,https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-616160883,616160883,
sipa,2020-04-19 21:34:35,"@jnewbery Did the rebase myself, and ended up with an almost identical tree as yours. Yours was slightly cleaner, so I used that one, rebased it on a new secp256k1 subtree merge, and pushed it.",https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-616228768,616228768,
JeremyRubin,2020-04-21 19:14:32,BTW if willing https://github.com/bitcoin/bitcoin/pull/18071 plucks out some of the changes from taproot & should be a relatively easy rebase. A couple symbol names are changed for clarity as the crypto return value has changed from the double hash to the single. ,https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-617359858,617359858,
sipa,2020-05-02 21:19:27,"Rebased, updated libsecp256k1 branch, and converted the Schnorr framework test to a Python unittest (see #18576).",https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-623014565,623014565,
fanquake,2020-05-22 08:40:19,"@sipa IIUC, the secp256k1 changes here are currently updating our subtree to upstream @ https://github.com/bitcoin-core/secp256k1/commit/e9fccd4de1f2b382545dfbadeae54868447e2cdf; with https://github.com/bitcoin-core/secp256k1/pull/558 on top. \n\nGiven there's been another push to https://github.com/bitcoin-core/secp256k1/pull/558, as well as additional merges to secp256k1 master, and, it's now ",https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-632574049,632574049,
sipa,2020-05-22 20:17:29,"Rebased to include the new bitcoin-core/secp256k1#558.\n\n@fanquake Will do, as soon as a few recent improvements are merged in the secp256k1 repository.",https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-632894808,632894808,
sipa,2020-05-23 00:14:00,Updated now to include the changes in https://github.com/bitcoin/bips/pull/920.,https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-632952016,632952016,
sipa,2020-06-10 00:49:52,Rebased on top of #19228 ,https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-641655191,641655191,
sipa,2020-06-18 16:27:39,Rebased after merge of #19228 and #18468.,https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-646144752,646144752,
instagibbs,2020-07-17 14:13:40,"I reviewed the tests(way more comprehensive than I thought), and made some commits which I believe increase readability quite a bit and test case(s): https://github.com/instagibbs/bitcoin/commits/taproot_tests\n\nTests cases I'd like covered:\n- [x] Invalid CScriptNum( too large) as input to `CHECKSIGADD`\n- [ ] Tests prior to activation of taproot (ideally you could run all the tests again, m",https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-660129903,660129903,
sipa,2020-07-19 21:22:01,"Rebased, updated to latest version of https://github.com/bitcoin-core/secp256k1/pull/558, and addressed a number of comments above.\n\n@Sjors The revert commits are a side-effect of using `git subtree` to switch to https://github.com/bitcoin-core/secp256k1/pull/558 (which itself is not based on secp256k1 master, so things in master but not there get reverted). Yes, the plan is to merge the Schno",https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-660711810,660711810,
instagibbs,2020-07-20 01:09:57,"@sipa take the tests in any form you'd like, I just thought it would be easier for you to review the changes. \n\nI'm done for now, so feel free to check off any un-ticked boxes yourself.",https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-660744498,660744498,
sipa,2020-07-20 01:57:27,@instagibbs All your test improvements squashed into the relevant commits here.,https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-660756608,660756608,
sipa,2020-07-21 20:55:37,Squashed in some more functional test improvements by @instagibbs. The failed spenders no check for expected error messages in block validation.,https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-662101568,662101568,
real-or-random,2020-07-24 20:25:55,"> Also reviewed [8594b77](https://github.com/bitcoin/bitcoin/commit/8594b77415c290089d2e88fd2c09dbfecef995ba) (BIP 340) until [988d7a7](https://github.com/bitcoin/bitcoin/commit/988d7a795cfc29b37c3ea3359fb69412ab04de53) (BIP 342)\n> \n> There's two future anticipated features the BIPs: batch-verification and annexes. Is there any proof of concept code that can be used to sanity check this PR (an",https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-663719592,663719592,
sipa,2020-07-28 05:02:14,"Rebased, updated to latest libsecp256k1 Schnorr PR, addressed a number of comments (though there are a few left). The biggest change is that the sighash precomputation now takes into account whether a transaction contains/needs taproot precomputation or not.\n\nI also improved the functional tests. It now includes P2PKH/P2WPKH/P2SH-P2WPKH spends as well, just to make sure transactions with mixes",https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-664777875,664777875,
gmaxwell,2020-07-29 02:25:11,"im in ur codebase _0pt1miz1ng_ ur lines.\n\nu can tell diz code waz unoptimal cuz feature_taproot.py still passes with this _optimization_\n\n```diff\ndiff --git a/src/secp256k1/src/modules/schnorrsig/main_impl.h b/src/secp256k1/src/modules/schnorrsig/main_impl.h\nindex 2ec1cea5b..5efdee4b4 100644\n--- a/src/secp256k1/src/modules/schnorrsig/main_impl.h\n+++ b/src/secp256k1/src/modules/schn",https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-665392921,665392921,
gmaxwell,2020-07-29 02:45:38,"all numb3erz r equally blessed in eyes of ur tests\n\n```diff\ndiff --git a/src/secp256k1/src/modules/extrakeys/main_impl.h b/src/secp256k1/src/modules/extrakeys/main_impl.h\nindex a2abc6afa..04c84bde5 100644\n--- a/src/secp256k1/src/modules/extrakeys/main_impl.h\n+++ b/src/secp256k1/src/modules/extrakeys/main_impl.h\n@@ -30,9 +30,8 @@ int secp256k1_xonly_pubkey_parse(const secp256k1_contex",https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-665398429,665398429,
gmaxwell,2020-07-29 03:20:03,"shrinking ur transactshuns.\n\ny send sign if ne1 no care?\n\n```diff\ndiff --git a/src/script/interpreter.cpp b/src/script/interpreter.cpp\nindex e095f0a42..1f6d4ca14 100644\n--- a/src/script/interpreter.cpp\n+++ b/src/script/interpreter.cpp\n@@ -1823,7 +1823,7 @@ static bool VerifyTaprootCommitment(const std::vector<unsigned char>& control, c\n         k = ss_branch.GetSHA256();\n    ",https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-665407450,665407450,
gmaxwell,2020-07-29 03:56:25,"2 many byte 4 so little bark\n\n```diff\ndiff --git a/src/script/interpreter.cpp b/src/script/interpreter.cpp\nindex e095f0a42..88093caa0 100644\n--- a/src/script/interpreter.cpp\n+++ b/src/script/interpreter.cpp\n@@ -1815,7 +1815,7 @@ static bool VerifyTaprootCommitment(const std::vector<unsigned char>& control, c\n     for (int i = 0; i < path_len; ++i) {\n         CHashWriter ss_branch",https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-665415974,665415974,
gmaxwell,2020-07-29 04:03:39,"big iz bootyfull\n\n```diff\ndiff --git a/src/script/interpreter.cpp b/src/script/interpreter.cpp\nindex e095f0a42..b12cd25ad 100644\n--- a/src/script/interpreter.cpp\n+++ b/src/script/interpreter.cpp\n@@ -1856,7 +1856,7 @@ static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion,\n         } else {\n             return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_WR",https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-665417632,665417632,
gmaxwell,2020-07-29 04:25:30,"deez statemints r doin nuthing\n\n```diff\ndiff --git a/src/script/interpreter.cpp b/src/script/interpreter.cpp\nindex e095f0a42..e115a6a99 100644\n--- a/src/script/interpreter.cpp\n+++ b/src/script/interpreter.cpp\n@@ -1858,8 +1858,6 @@ static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion,\n         }\n     } else if (witversion == 1 && program.size() == WITNESS",https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-665422851,665422851,
gmaxwell,2020-07-29 04:38:39,"ur gold star no offset being phat\n\n```diff\ndiff --git a/src/script/interpreter.cpp b/src/script/interpreter.cpp\nindex e095f0a42..c2823a565 100644\n--- a/src/script/interpreter.cpp\n+++ b/src/script/interpreter.cpp\n@@ -1770,6 +1770,10 @@ static bool ExecuteWitnessScript(const Span<const valtype>& stack_span, const CS\n     if (sigversion == SigVersion::TAPSCRIPT) {\n         // OP_SUC",https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-665426041,665426041,
gmaxwell,2020-07-29 05:18:02,"just cuz im empty inside doesnt mean i cant count\n\n```diff\ndiff --git a/src/script/interpreter.cpp b/src/script/interpreter.cpp\nindex e095f0a42..a4113be95 100644\n--- a/src/script/interpreter.cpp\n+++ b/src/script/interpreter.cpp\n@@ -379,7 +379,7 @@ static bool EvalChecksigTapscript(const valtype& sig, const valtype& pubkey, Scr\n      *    the script execution fails when using non-em",https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-665436594,665436594,
gmaxwell,2020-07-29 05:25:48,"dont ignore big boyz\n\n```diff\ndiff --git a/src/script/interpreter.cpp b/src/script/interpreter.cpp\nindex e095f0a42..a1f46d960 100644\n--- a/src/script/interpreter.cpp\n+++ b/src/script/interpreter.cpp\n@@ -390,7 +390,7 @@ static bool EvalChecksigTapscript(const valtype& sig, const valtype& pubkey, Scr\n     }\n     if (pubkey.size() == 0) {\n         return set_error(serror, SCRIPT_E",https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-665439046,665439046,
gmaxwell,2020-07-29 06:09:36,"tapscript iz not 4 minimalists\n\n```diff\ndiff --git a/src/script/interpreter.cpp b/src/script/interpreter.cpp\nindex e095f0a42..26dd6c036 100644\n--- a/src/script/interpreter.cpp\n+++ b/src/script/interpreter.cpp\n@@ -634,8 +634,6 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                             return set_error(serror, SCRIPT_ERR_UNBALANCED",https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-665453395,665453395,
gmaxwell,2020-07-29 06:28:08,"why u no share with witness v0??\n\n```diff\ndiff --git a/src/script/interpreter.cpp b/src/script/interpreter.cpp\nindex e095f0a42..2697bc482 100644\n--- a/src/script/interpreter.cpp\n+++ b/src/script/interpreter.cpp\n@@ -1097,8 +1097,7 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n \n                 case OP_CHECKSIGADD:\n                 {\n-     ",https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-665460423,665460423,
gmaxwell,2020-07-29 09:02:55,"DONT TRUST VER\n\n```diff\ndiff --git a/src/script/script.cpp b/src/script/script.cpp\nindex 8bd10f8ba..2604d5dae 100644\n--- a/src/script/script.cpp\n+++ b/src/script/script.cpp\n@@ -334,7 +334,7 @@ bool GetScriptOp(CScriptBase::const_iterator& pc, CScriptBase::const_iterator en\n \n bool IsOpSuccess(const opcodetype& opcode)\n {\n-    return (opcode == 0x50 || opcode == 0x62 || opcode",https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-665537097,665537097,
gmaxwell,2020-07-29 09:59:30,"u haz boundary but i shifted it\n\n```\n-static constexpr uint64_t VALIDATION_WEIGHT_OFFSET = 50;\n+static constexpr uint64_t VALIDATION_WEIGHT_OFFSET = 53;\n```\n\n```\n-static constexpr uint64_t VALIDATION_WEIGHT_OFFSET = 50;\n+static constexpr uint64_t VALIDATION_WEIGHT_OFFSET = 47;\n```\n",https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-665567544,665567544,
gmaxwell,2020-07-29 15:20:33,"Okay, those are all the locations I found where breaking the code still results in the taproot tests passing (and weren't obviously due to an unreachable condition on account of a redundant consensus rule).  In some cases I could have given more examples (e.g. more success opcodes that are untested), though I hope if the tests are improved they're written more generally than is required to reject ",https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-665729074,665729074,
instagibbs,2020-07-30 14:15:43,"test changes through https://github.com/bitcoin/bitcoin/pull/17977/commits/d4260e830a0a3614f05b1bfa855f08edc1a7b39c look good.\n\n@gmaxwell : cool stuff. I suspect some of those cases are covered *sometimes* due to the random nature of some of the tests, for example the `OP_VER` one. IIRC the test randomly picks an op_success code per run. Maybe it's worth running all those cases N times when N ",https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-666391806,666391806,
sipa,2020-07-30 17:19:04,"@instagibbs Indeed; the ""y send sign if ne1 no care?"" I believe is also covered by random mutations of the control block already - but it's rare to hit that exact bit.\n\nI'm reworking the tests to make sure more edge cases are always hit (or at least, making it easier to add them).\n\nUnfortunately, it will mean making the randomized Python test take significantly longer. One idea is that we ",https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-666539765,666539765,
sipa,2020-07-30 17:34:34,"As far as the idea of having a separate EvalScript goes - indeed, I think that's a useful idea in general, and I think @theuni has also argued in favour of it.\n\nI chose not to here, because the majority of the changes isn't actually inside script execution as such. The best argument in favour would be if separation would let us get rid of the OP_SUCCESSx preprocessing step, and have a single p",https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-666549387,666549387,
JeremyRubin,2020-07-30 18:09:45,"I think it's a good investment to completely split the interpreters, especially given the myriad of different upgrade mechanisms the current approach can lead to confusing code paths of what is actually getting called (imagine a future with 5 different leaf versions all passing different interpreter flags in -- better to normalize that v1 witness leaf versions have their own interpreter separate f",https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-666573009,666573009,
gmaxwell,2020-08-01 02:39:18,"> That said, I'm not opposed to splitting if off if it aids review.\n\nWell I, and presumably other reviewers, already undertook the additional cost. So I don't think doing it would aid me now.\n\nIt's a change that could be made at any time in the future too.\n\n> EDIT: I guess it's possible to keep track of a bool ""failed"" during execution, which is set to false whenever a ""return false"" o",https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-667455901,667455901,
JeremyRubin,2020-08-01 05:43:02,"I don't think branch coverage fully helps because it's conceivable we have multiple tests that cover things and coverage might not help that much...\n\n\n\nI think there might be a kinda silly way to split the interpreters for the taproot implementation without causing anyone to have to re-review much taproot related.\n\n1) take current tip of taproot\n2) Move the interpreter guts into a ne",https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-667475959,667475959,
sipa,2020-08-01 06:10:10,"@JeremyRubin There are plenty of ways to minimize the difference with both the existing branch here, and between the new legacy interpreter and the current interpreter in master.\n\nThe question whether we want it. It at least means additional review, and code duplication. Given there has already been a decent amount of review here, I'd rather not do it unless there's wide agreement about the chan",https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-667479801,667479801,
theuni,2020-08-04 01:20:27,"> As far as the idea of having a separate EvalScript goes - indeed, I think that's a useful idea in general, and I think @theuni has also argued in favour of it.\n> \n> I chose not to here, because the majority of the changes isn't actually inside script execution as such. The best argument in favour would be if separation would let us get rid of the OP_SUCCESSx preprocessing step, and have a si",https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-668321512,668321512,
sipa,2020-08-06 23:48:50,"Rebased, and big update to the functional tests.\n\nDuring test improving I discovered a discrepancy between the implemented consensus rules and the BIP: undefined hashtypes were not rejected as they should be. This is now fixed (and tested).\n\nI've addressed most of the discoveries by @gmaxwell's lolcat above:\n* *u haz boundary but i shifted it*: I've reworked the sigops ratio test to have",https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-670245628,670245628,
sipa,2020-08-07 23:28:26,"Rebased on top of #19620 (taproot outputs are now no longer WITNESS_UNKNOWN, as taproot spends would otherwise end up in the reject filter).\n\nAlso added some tests to verify pre-taproot activation behavior (rules enforced for standardness, but not for consensus).",https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-670782944,670782944,
instagibbs,2020-08-14 13:37:36,"utACK https://github.com/bitcoin/bitcoin/pull/17977/commits/b0d2a3a788222fa6770ffe9eee132f829199275f the non-sighash changes, I think there still might be issues on that front since tests are failing\n\n```\nAssertionError: Missing error message 'Signature must be zero for failed CHECK(MULTI)SIG operation' from block response '(None)': applic/scriptpath,sighash/keypath_unk_hashtype_90,sighash/s",https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-674078920,674078920,
sipa,2020-08-14 17:32:45,"@instagibbs ... and that was an actual bug in the sighash code. It wasn't rejecting 0x80 as hashtype.\n\nFixed:\n\n```diff\n--- a/src/script/interpreter.cpp\n+++ b/src/script/interpreter.cpp\n@@ -1497,7 +1497,7 @@ bool SignatureHashSchnorr(uint256& hash_out, const ScriptExecutionData& execdata\n     // Hash type\n     const uint8_t output_type = (hash_type == SIGHASH_DEFAULT) ? SIGHASH_AL",https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-674183128,674183128,
sipa,2020-08-28 02:15:32,"Rebased, updated to latest https://github.com/bitcoin-core/secp256k1/pull/558 (including the even-R BIP change), and addressed a number of @luke-jr's comments above.\n\nI made one additional somewhat significant change on top, the signature/pubkey is now passed into validation routines using a Span (which means one less vector copy per script). A change like this would also make sense for ECDSA,",https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-682285983,682285983,
jnewbery,2020-08-28 07:20:41,"> My idea is that at some point (perhaps as soon as the libsecp256k1 changes are merged), I'll close this PR, and open 2 different new ones - one with just fixups, and one with the final squashed state (like #7910 and #8149 for segwit). Thoughts?\n\nSounds good to me!\n\n[aside: I often get unicorns when loading this PR on mobile, so starting afresh would be useful if only to make interacting ",https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-682371471,682371471,
gmaxwell,2020-09-04 04:48:30,"> The biggest mistake IMO is using BIP9 instead of BIP8.\n\nThis PR doesn't even have activation *at all*: it is set to always active in regtest and not at all otherwise.  The only connection to bip9 is that the code that handles BIP9 is the codebases' generic code for handling consensus rules which are active in some places and not others.\n\nThe way this works (and the way it has generally w",https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-686903679,686903679,
sipa,2020-09-04 05:51:22,"Rebased, updated libsecp256k1 to latest https://github.com/bitcoin-core/secp256k1/pull/558, and addressed a number of comments by @fjahr, @Kixunil, and @ariard. Thanks!",https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-686925487,686925487,
Kixunil,2020-09-07 16:50:43,"@gmaxwell thanks for clarifying, will check activation discussion at whatever is the appropriate place.",https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-688434311,688434311,
sipa,2020-09-11 21:36:31,Rebased on top of #19944.,https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-691322646,691322646,
sipa,2020-09-14 04:34:49,"Closing in favor of new PR(s), as discussed [here](https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-682285983).",https://github.com/bitcoin/bitcoin/pull/17977#issuecomment-691804687,691804687,
junderw,2020-01-22 06:35:06,"Slightly confusing name... `HashAgainSHA256`?\n\nI understand why it exists, and I can't think of a much better name... but having something in the name to denote we're hashing with SHA256 might make it a tiny bit more readable.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369389626,369389626,src/script/interpreter.cpp
kallewoof,2020-01-22 11:45:32,`s/TESTDUMMY/TAPROOT/` here and in testnet (regtest is fine). Also think you want to set timeout to something less expired.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369513725,369513725,src/chainparams.cpp
MaxHillebrand,2020-01-22 14:31:49,"```suggestion\n    DEPLOYMENT_TAPROOT, // Deployment of BIP-340/BIP-341/BIP-342\n```",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369593203,369593203,src/consensus/params.h
MaxHillebrand,2020-01-22 14:32:25,"```suggestion\n/** Return a CHashWriter primed for computing BIP-340 compatible tagged hashes.\n```",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369593612,369593612,src/hash.h
MaxHillebrand,2020-01-22 14:38:17,"```suggestion\n * BIP-340\n```",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369597072,369597072,src/secp256k1/include/secp256k1_schnorrsig.h
MaxHillebrand,2020-01-22 14:45:12,"```suggestion\n        """"""Construct a BIP-340 compatible Schnorr signature with this key.""""""\n```",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369601055,369601055,test/functional/test_framework/key.py
MaxHillebrand,2020-01-22 14:58:35,"```suggestion\n * (https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki).\n```\n\nThis link is broken until the [BIP PR](https://github.com/bitcoin/bips/pull/876/) is merged.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369609545,369609545,src/secp256k1/include/secp256k1_schnorrsig.h
MaxHillebrand,2020-01-22 14:59:12,"```suggestion\n *       noncefp: pointer to a nonce generation function. If NULL, secp256k1_nonce_function_bip340 is used\n```\n\nNot sure if this breaks anything? :confused: ",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369609932,369609932,src/secp256k1/include/secp256k1_schnorrsig.h
MaxHillebrand,2020-01-22 15:00:13,"```suggestion\n        noncefp = secp256k1_nonce_function_bip-340;\n```\n\nNot sure if this breaks anything :confused: ",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369610577,369610577,src/secp256k1/src/modules/schnorrsig/main_impl.h
MaxHillebrand,2020-01-22 15:00:44,"```suggestion\n    if (!noncefp(buf, msg32, seckey_tmp, (unsigned char *) ""BIP340Derive"", (void*)ndata, 0)) {\n```\nNot sure if this breaks anything :confused:",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369610885,369610885,src/secp256k1/src/modules/schnorrsig/main_impl.h
skwp,2020-01-22 15:32:38,Is there a name for this condition that can be explained with a function name or at least a comment?,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369630927,369630927,src/policy/policy.cpp
skwp,2020-01-22 15:35:39,"why nested conditional here, but not nested above (line 240)?  both branches have ""stack_size >= 2"" as well. without understanding what any of this means, would it be clearer to write like this, removing the duplication and nesting?\n\n```\n// precondition for taproot (?)\nif (stack_size < 2) { return }\n\nif (!stack[stack_size - 1].empty() && stack[stack_size - 1][0] == ANNEX_TAG) {\n// wh",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369632680,369632680,src/policy/policy.cpp
kallewoof,2020-01-22 16:13:54,"I don't see the problem, personally.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369656551,369656551,src/policy/policy.cpp
sipa,2020-01-22 17:26:15,"@skwp I'll add some comments to clarify, but what you're suggesting would be incorrect.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369698012,369698012,src/policy/policy.cpp
skwp,2020-01-22 17:39:38,"Thanks @sipa. I'm not trying to nitpick, rather looking at ways to lower the barrier for reviewers and thus help get more eyes on things. I find that complex conditionals with lots of low level details can make bugs hard to spot and make it daunting for people new to the source to contribute. There might be good reason for the style employed throughout the code and we probably can't change everyth",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369704810,369704810,src/policy/policy.cpp
skwp,2020-01-22 17:47:18,"hey kalle, please see my comment below to pieter. I'm seeing if people are open to using a more consistent single level of abstraction to make the source easier to read.\n\ne.g. this can be evaluated by a newb (ignore if I got the concepts wrong, I'm trying to illustrate a more literate / single level of abstraction style as per http://principles-wiki.net/principles:single_level_of_abstraction)",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369708533,369708533,src/policy/policy.cpp
skwp,2020-01-22 17:52:38,"\nIn fact I see that these magic numbers are already given names elsewhere. Can we use them here? This is way more readable and expresses intent\n\n```\n(stack[stack_size - 1][0] & TAPROOT_LEAF_MASK) == TAPROOT_LEAF_TAPSCRIPT\n```",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369711202,369711202,src/policy/policy.cpp
constcast-glitch,2020-01-22 19:42:07,taghash is written twice. Is this intentional?,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369764799,369764799,src/hash.cpp
sipa,2020-01-22 19:45:02,"Yes, please read the spec.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369766227,369766227,src/hash.cpp
Empact,2020-01-22 19:49:33,"nit: `reinterpret_cast<unsigned char*>(const_cast<char*>(`?\n\nThe `const_cast` could be removed with C++17 and a switch to rvalue references.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369768378,369768378,src/hash.cpp
sipa,2020-01-22 20:11:10,"This should just be `(const char*)tag.data`. We don't usually use C++ style casts for primitive types (they're all equivalent anyway, and the C++ style ones are very verbose).",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369778313,369778313,src/hash.cpp
sipa,2020-01-22 20:12:57,"Changed into `SHA256Uint256`, and moved to hash.{h,cpp}.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369779079,369779079,src/script/interpreter.cpp
sipa,2020-01-22 20:13:32,"Nice catch, fixed. I don't know what ""less expired"" means; all dates in the past are equally expired.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369779340,369779340,src/chainparams.cpp
sipa,2020-01-22 20:13:41,Fixed.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369779414,369779414,src/consensus/params.h
sipa,2020-01-22 20:13:50,Fixed.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369779485,369779485,src/hash.h
sipa,2020-01-22 20:14:18,This belongs in https://github.com/bitcoin-core/secp256k1/pull/558.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369779689,369779689,src/secp256k1/include/secp256k1_schnorrsig.h
sipa,2020-01-22 20:14:28,Fixed.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369779758,369779758,test/functional/test_framework/key.py
sipa,2020-01-22 20:14:45,This belongs in https://github.com/bitcoin-core/secp256k1/pull/558.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369779870,369779870,src/secp256k1/include/secp256k1_schnorrsig.h
sipa,2020-01-22 20:15:08,This belongs in https://github.com/bitcoin-core/secp256k1/pull/558.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369780016,369780016,src/secp256k1/include/secp256k1_schnorrsig.h
sipa,2020-01-22 20:15:30,"This belongs in https://github.com/bitcoin-core/secp256k1/pull/558. Also, that would be invalid C code.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369780198,369780198,src/secp256k1/src/modules/schnorrsig/main_impl.h
nopara73,2020-01-22 20:15:52,"Unify Taproot capitalization in comments.\n```suggestion\n    DEPLOYMENT_TAPROOT, // Deployment of Taproot (BIPs 340-342)\n```",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369780376,369780376,src/consensus/params.h
sipa,2020-01-22 20:15:54,Changing that would violate the spec.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369780392,369780392,src/secp256k1/src/modules/schnorrsig/main_impl.h
sipa,2020-01-22 20:16:09,I've added some comments. Better now?,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369780523,369780523,src/policy/policy.cpp
nopara73,2020-01-22 20:16:37,"Unify Taproot capitalization in comments.\n```suggestion\n    // Making unknown Taproot leaf versions non-standard\n```",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369780765,369780765,src/script/interpreter.h
nopara73,2020-01-22 20:17:15,"Unify Taproot capitalization in comments.\n\n```suggestion\n    // Taproot\n```",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369781034,369781034,src/script/script.cpp
nopara73,2020-01-22 20:17:39,"Unify Taproot capitalization in comments.\n```suggestion\n    // Taproot\n```",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369781217,369781217,src/script/script.h
sipa,2020-01-22 20:18:04,"Changed it to use the constants, that's obviously the better way.\n\nThe reason why the annex does not use a nested conditional is because it's a single `if` statement that tests the presence of the annex (as in: both conditions are needed to have an annex). The tapscript conditional is split up into the logical ""this is a script path spending"" condition and the ""this is a leaf version 0xc0 scri",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369781409,369781409,src/policy/policy.cpp
nopara73,2020-01-22 20:18:59,"Unify Taproot capitalization in comments.\n```suggestion\n                # Don't use 32-byte v1 witness (used by Taproot)\n```",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369781835,369781835,test/functional/p2p_segwit.py
nopara73,2020-01-22 20:24:19,"Unify Taproot capitalization in comments.\n```suggestion\n# Test Taproot softfork.\n```",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369784302,369784302,test/functional/feature_taproot.py
Empact,2020-01-22 20:29:59,"nit: Perhaps more readable if we avoid magic numbers with something like:\n```c++\nstatic_assert(SIGHASH_TAPOUTPUTMASK < SIGHASH_TAPINPUTMASK);\nif ((hash_type > SIGHASH_TAPOUTPUTMASK) && (hash_type <= SIGHASH_TAPINPUTMASK || hash_type > (SIGHASH_TAPINPUTMASK | SIGHASH_TAPOUTPUTMASK))) return false;\n```\n\nAlternatively, a comment could be helpful.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369786605,369786605,src/script/interpreter.cpp
Empact,2020-01-22 20:30:32,"nit: is it clearer to use or comment e.g. `WITNESS_V0`, and `TAPROOT` below?",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369786833,369786833,src/script/interpreter.cpp
MaxHillebrand,2020-01-22 20:40:39,I have suggested the changes [there](https://github.com/bitcoin-core/secp256k1/pull/558#pullrequestreview-346886721),https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369791114,369791114,src/secp256k1/include/secp256k1_schnorrsig.h
MaxHillebrand,2020-01-22 20:41:54,"```suggestion\n                    // Leaf version 0xc0 (aka Tapscript, see BIP 342)\n```",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369791691,369791691,src/policy/policy.cpp
MaxHillebrand,2020-01-22 20:42:10,"```suggestion\n/** The maximum size of each witness stack item in a standard Tapscript */\n```",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369791787,369791787,src/policy/policy.h
MaxHillebrand,2020-01-22 20:42:23,"```suggestion\n    // Making unknown public key versions in Tapscript non-standard\n```",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369791871,369791871,src/script/interpreter.h
MaxHillebrand,2020-01-22 20:42:46,"```suggestion\n// Validation weight per passing signature (Tapscript only).\n```",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369792013,369792013,src/script/script.h
MaxHillebrand,2020-01-22 20:42:58,"```suggestion\n// How much weight budget is added to the witness size (Tapscript only).\n```",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369792104,369792104,src/script/script.h
MaxHillebrand,2020-01-22 20:43:20,"```suggestion\n# Tapscript\n```",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369792258,369792258,test/functional/test_framework/script.py
Empact,2020-01-22 20:56:18,"~~nit: `stack.back()`~~\n\nNeglected to examine the full context.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369798203,369798203,src/policy/policy.cpp
sipa,2020-01-22 20:56:38,"No, that would be incorrect.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369798364,369798364,src/policy/policy.cpp
Empact,2020-01-22 21:08:52,"nit: how about `!= sizeof(((secp256k1_schnorrsig){0}).data)`, a `static_assert`, or similar?",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369804204,369804204,src/pubkey.cpp
skwp,2020-01-22 21:12:15,"Thanks definitely helps, though I would still love to see some vars extracted to named for readability and deduplication. I'm not gonna nitpick your code for style, I'm just a humble bitcoin pleb. But I do know what it's like to scale codebases to be friendly to onboarding new devs. I do think readability should be a concern if we want more devs in bitcoin. e.g. `stack[stack_size - 1]` is repeated",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369805872,369805872,src/policy/policy.cpp
sipa,2020-01-22 21:22:27,"Well the reason is that the `stack_size` variable changes, so a ""top_of_stack"" one would need to be updated, kinda defeating its meaning.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369810334,369810334,src/policy/policy.cpp
Empact,2020-01-22 22:15:55,nit: a `NONE_EXECUTED` constant would be expressive,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369834460,369834460,src/script/interpreter.cpp
real-or-random,2020-01-22 22:50:55,"In the end, all of this is probably personal taste but I think there is a reason why a lot of those magic numbers are just literals. This number will never need to change.\n `sizeof(((secp256k1_schnorrsig){0}).data)` just makes the code harder to read and review (because you need to look up the definition of `secp256k1_schnorrsig`, and it would be a little bit like having a constant `BITS_IN_UINT",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369849023,369849023,src/pubkey.cpp
jnewbery,2020-01-22 22:59:23,"This seems weird to me. How can we verify a signature for a point which does not have a square Y? Such public keys are not defined in bip-schnorr.\n\nI think it'd be clearer to assert that the pubkey has a square Y before verifying. I'd also suggest adding a `get_xonly_pubkey()` method to `ECKey` so we can directly get the valid bip-schnorr pubkey.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369852128,369852128,test/functional/test_framework/key.py
real-or-random,2020-01-22 23:39:29,"> This seems weird to me. How can we verify a signature for a point which does not have a square Y? Such public keys are not defined in bip-schnorr.\n\nHm in fact it's different in yet another way. \n - The very pedantic version: bip-schnorr defines public keys to be byte arrays of length 32. ""square y"" does not make sense for byte arrays. \n - The less pedantic version: Even if you interpret ",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369865203,369865203,test/functional/test_framework/key.py
Empact,2020-01-22 23:44:46,"The notion is that by tying one constant to a formal description, we can make explicit and enforced a connection that would otherwise be implicit and unenforced. IMO, that such a thing can't be violated is always better than that it won't be violated.\n\nThere are ways to do that without making the code markedly more complex, such as offloading it to a constant + `static_assert`.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369866607,369866607,src/pubkey.cpp
sipa,2020-01-23 01:42:47,I've changed this code quite a bit. What do you think?,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369896427,369896427,src/policy/policy.cpp
sipa,2020-01-23 01:43:31,Updated.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369896642,369896642,src/consensus/params.h
sipa,2020-01-23 01:43:39,Updated.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369896679,369896679,src/script/interpreter.h
sipa,2020-01-23 01:43:46,Updated.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369896713,369896713,src/script/script.cpp
sipa,2020-01-23 01:44:15,Updated.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369896841,369896841,src/script/script.h
sipa,2020-01-23 01:44:25,Updated.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369896888,369896888,test/functional/p2p_segwit.py
sipa,2020-01-23 01:44:56,Updated.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369897072,369897072,test/functional/feature_taproot.py
kallewoof,2020-01-23 01:47:16,"Sorry, I meant it should expire in the future or the taproot deployment will fail to activate.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369897737,369897737,src/chainparams.cpp
sipa,2020-01-23 01:49:06,"This PR intentionally doesn't include mainnet activation; the values here are just a dummy. Apart from the fact that no activation time (or mechanism) has been established yet, that activation logic will likely be included in a different release than the validation logic (thus needing a separate PR anyway).",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369898283,369898283,src/chainparams.cpp
sipa,2020-01-23 02:47:47,Updated.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369910526,369910526,src/script/interpreter.h
sipa,2020-01-23 02:47:57,Updated.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369910547,369910547,src/policy/policy.h
sipa,2020-01-23 02:48:06,Updated.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369910572,369910572,src/policy/policy.cpp
sipa,2020-01-23 02:48:15,Updated.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369910604,369910604,src/script/script.h
sipa,2020-01-23 02:48:23,Updated.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369910632,369910632,src/script/script.h
sipa,2020-01-23 02:48:32,Updated.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369910663,369910663,test/functional/test_framework/script.py
nopara73,2020-01-23 03:13:58,"Btw, I wasn't planning to waste your time on this by suggesting to manually fix it up. You can just click apply suggestion on GitHub and it'll create a shared commit.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r369915231,369915231,src/consensus/params.h
v1048576,2020-01-23 09:51:59,"Use taproot instead of tap?\nSIGHASH_TAPROOT_DEFAULT\nTAPROOT like other instances, e.g. TAPROOT_PROGRAM_SIZE.\n\nAlso, SignatureHashTap() renamed to SignatureHashTaproot()?\nSimilar to VerifyTaprootCommitment.\n",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370020828,370020828,src/script/interpreter.h
v1048576,2020-01-23 09:59:10,Why not check against opcode defines? ,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370024599,370024599,src/script/script.cpp
jnewbery,2020-01-23 14:18:32,`verify_schnorr` has been updated to be a function that takes a pubkey (32-byte array) instead of being a method on `ECPubKey`.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370142806,370142806,test/functional/test_framework/key.py
jnewbery,2020-01-23 14:27:05,Should these be updated to be BIP schnorr pubkeys (32-byte arrays)?,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370147930,370147930,test/functional/feature_taproot.py
gmaxwell,2020-01-23 16:16:34,"It's never reused. Renaming it just makes you look up a definition.   Adding a comment like ""// Fall-through value if none are executed."" would be both more informative and not create a reason to bounce around the code.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370215597,370215597,src/script/interpreter.cpp
gmaxwell,2020-01-23 16:30:33,"I agree with real-or-random.\n\nsecp256k1_schnorrsig should be ""functionally opaque""-- like the other secp256k1_ types it isn't actually an opaque struct *only* so it can be allocated on the stack. Library users should not be messing around with the internals of these types, and the library API makes *no* promise that the internal representation won't change (and for some of them it's even curre",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370223920,370223920,src/pubkey.cpp
gmaxwell,2020-01-23 16:32:37,"Because they're all ""OP_SUCCESS""?  They aren't other opcodes right now. Some of them share values with non-tapscript opcodes, but the usage is different.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370225174,370225174,src/script/script.cpp
gmaxwell,2020-01-23 16:36:30,"I find that much less readable, particularly since the symbolic values you define wouldn't be used anywhere else. More comments, however, would be fine.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370227533,370227533,src/script/interpreter.cpp
constcast-glitch,2020-01-23 16:49:25,nit: This function (VerifyECDSASignature) is formatted different than VerifySchnorrSignature which have the single line if-statements on one line. Maybe use same formatting for consistency since the functions are very similar in layout. I guess it's because this function already existed and don't want to make unrelated formatting changes. New here so not sure if this is a valid remark. Please excu,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370234826,370234826,src/script/sigcache.cpp
Empact,2020-01-23 16:52:07,"Fair enough, it's a matter of opinion as to which is more legible - though I see a few uses, e.g.:\nhttps://github.com/bitcoin/bitcoin/pull/17977/files#diff-b81dfdd8a5bd80fe9f82b5a40c4c991eR180\n",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370236330,370236330,src/script/interpreter.cpp
v1048576,2020-01-23 17:28:35,"I was expecting something along the lines of OP_SUCCESS80, ..., OP_SUCCESS254.\nOP_SUCCESSx mapping explicitly shows the shared opcodes?\n\n",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370255036,370255036,src/script/script.cpp
sipa,2020-01-25 01:48:33,"I agree as well. The size of serialized signatures is not inherently related to the in-memory representation of secp256k1_schnorrsig.\n\nThe BIP says something about sizes 64 and 65. The code does the exact same thing. You could introduce a constant, but I think that's just distracting. You'd need to go look up the constant to verify the code is correct, while now you can just directly compare i",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370905531,370905531,src/pubkey.cpp
sipa,2020-01-25 02:08:38,"I considered that, but I don't think the amount of code needed is worth it, or would be more readable (if there isn't a normative IsOpSuccess function, you'd be adding 87 constants to the enum, and instead writing ""opcode == OP_SUCCESS80 || opcode == OP_SUCCESS98 || opcode == OP_SUCCESS126 || ..."" in `ExecuteWitnessProgram` directly).",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370906951,370906951,src/script/script.cpp
sipa,2020-01-25 02:11:37,"This is intentional, see https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#coding-style-general:\n\n> When writing patches, favor the new style over attempting to mimic the surrounding style, except for move-only commits.\n>\n> Do not submit patches solely to modify the style of existing code.\n\nSo the new Schnorr code follows the preferred style, even though the ECDSA o",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370907161,370907161,src/script/sigcache.cpp
sipa,2020-01-25 02:32:35,"I've rewritten this code in an overall more readable way, I think.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370908359,370908359,src/script/interpreter.cpp
sipa,2020-01-25 02:33:03,I've rewritten this code to match the BIP specification more closely.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370908392,370908392,src/script/interpreter.cpp
sipa,2020-01-25 02:33:38,"That initialization wasn't needed actually, I've removed it. The constant in just in one place now.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370908425,370908425,src/script/interpreter.cpp
sipa,2020-01-25 02:34:12,"I've completely rewritten the Python Schnorr code now, not using ECKey/ECPubKey at all.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370908463,370908463,test/functional/test_framework/key.py
kallewoof,2020-01-25 02:35:04,"```suggestion\nfrom test_framework.script import (\n    ANNEX_TAG,\n    CScript,\n    CScriptOp,\n    LEAF_VERSION_TAPSCRIPT,\n    LOCKTIME_THRESHOLD,\n    MAX_SCRIPT_ELEMENT_SIZE,\n    OP_0,\n    OP_1,\n    OP_1SUB,\n    OP_1NEGATE,\n    OP_2DROP,\n    OP_2DUP,\n    OP_CHECKMULTISIG,\n    OP_CHECKMULTISIGVERIFY,\n    OP_CHECKSIG,\n    OP_CHECKSIGADD,\n    OP_CHECKSIGVERIFY,\n  ",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370908509,370908509,test/functional/feature_taproot.py
sipa,2020-01-25 02:37:57,"Agree, those enum values were weird. Changed to SIGHASH_INPUT_MASK, SIGHASH_OUTPUT_MASK, and SIGHASH_DEFAULT; even though they're Taproot specific for now, that's not inherently the case.\n\n`SignatureHashTap` wasn't actually necessary, it was a leftover from older code. I've removed it.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370908697,370908697,src/script/interpreter.h
sipa,2020-01-25 02:38:26,Done by completely rewriting the Schnorr Python code.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370908724,370908724,test/functional/feature_taproot.py
sipa,2020-01-25 02:39:14,What a waste of lines. Is this more readable?,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370908763,370908763,test/functional/feature_taproot.py
kallewoof,2020-01-25 02:52:25,"Lines don't really cost anything. This is definitely *readable*, compared to the big blob it replaces.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370909411,370909411,test/functional/feature_taproot.py
sipa,2020-01-25 02:55:52,"They cost screen space, and this isn't something that really requires reading.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370909591,370909591,test/functional/feature_taproot.py
kallewoof,2020-01-25 03:00:08,"It feels like people can just scroll down if they aren't interested, or not if they are. I prefer to let the reader decide whether they desire to read or not. Anyway, it's not big enough to waste time over. Do ignore.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370909779,370909779,test/functional/feature_taproot.py
kallewoof,2020-01-25 06:10:32,Nit: indentation (here and L1781).,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370916701,370916701,src/script/interpreter.cpp
v1048576,2020-01-25 15:42:05,"Ah yes, good point about 87 constants, thanks for the clarification.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370939945,370939945,src/script/script.cpp
JeremyRubin,2020-01-25 18:30:36,documentation nit: preference to not use -1 to indicate a sentinel for a unsigned type.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370948291,370948291,src/script/interpreter.h
JeremyRubin,2020-01-25 18:32:40,"UB nit: while this is safe, I believe, as it is used, it would be better to initialize this to either true or false should there be a bug, it would at least not invoke UB.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370948398,370948398,src/script/interpreter.h
sipa,2020-01-25 18:35:52,Not initializing it means giving valgrind a chance to detect incorrect use. I prefer to keep values uninitialized if they're actually intended to not be used.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370948552,370948552,src/script/interpreter.h
JeremyRubin,2020-01-25 18:43:18,"I'm generally not a fan of these Data interfaces which have all the bool x_init fields.\n\nAs an alternative, we could use an optional type wrapper.\n\nHowever, optional types depend on boost until c++17, which we shouldn't introduce consensus dependencies on.\n\nMy proposal would be to copy the definition of c++17 optional into https://github.com/bitcoin/bitcoin/blob/99813a9745fe10a58bedd7a",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370948973,370948973,src/script/interpreter.h
JeremyRubin,2020-01-25 18:49:10,"That's an interesting point I hadn't considered! Could be an interesting separate project idea to have a macro of something like\n\n`DEFINED_CONSENSUS(param) ---> if not VALGRIND_BUILD param endig`\n\nto make sure that we define these things when we build for consensus, but to leave them undefined for valigrind.\n\nThis could be expanded to, for class members which you want to have this chec",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370949281,370949281,src/script/interpreter.h
sipa,2020-01-25 18:59:08,"Does that really add anything? Yes, it technically removes UB in this case, but replaces it with incorrect consensus code. Furthermore, there already is a runtime check to avoid it (the _init) flag, and the ability to detect it during tests through Valgrind/ubsan/... (in the even less likely case the _init flag is set incorrectly).\n\nI feel this is all overkill, and we should just stick to the ",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370949751,370949751,src/script/interpreter.h
JeremyRubin,2020-01-25 19:12:51,"My point was more that we don't get the valgrind checkability for non primitive types, which seems like a good property if we want it for primitive types. A 0'd hash should be treated as undefined so that valgrind could pick it up.\n\nBut I'm resolving this convo here as it's a sidetrack, as noted above, ""Could be an interesting separate project idea"".",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370950458,370950458,src/script/interpreter.h
sipa,2020-01-25 19:13:13,"I agree to an extent that all the _init variables are ugly, but I don't think that they're that bad if you see them as just runtime checks for invalid code. The same can be accomplished without them using ubsan/valgrind, in many cases.\n\nAbout using Option... It's arguably the right tool for the job, but there is no singular ""definition of c++17 optional""; there is the libstdc++ implementation,",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r370950492,370950492,src/script/interpreter.h
constcast-glitch,2020-01-26 21:14:54,"I believe ""If the this nonce function ..."" should be ""If this nonce function ..."".",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371029813,371029813,src/secp256k1/src/secp256k1.c
gmaxwell,2020-01-26 21:30:38,Can you repeat this comment here: https://github.com/bitcoin-core/secp256k1/pull/558  ?,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371030754,371030754,src/secp256k1/src/secp256k1.c
constcast-glitch,2020-01-26 21:37:06,Done,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371031177,371031177,src/secp256k1/src/secp256k1.c
kallewoof,2020-01-27 06:07:23,"It would be nice if there was an `IsValid()` function to check if the pubkey is actually valid, as opposed to the signature being invalid.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371073789,371073789,src/pubkey.h
sipa,2020-01-27 06:27:03,"There should be no need.\n\nPublic keys as specified by BIP340 are 32-byte arrays, not points or X coordinates or whatever. The signature validation algorithm takes as input a 32-byte public key, and 64-byte signature, and a 32-byte message.\n\nThis is intentionally different from how ECDSA works, where differences between encoding errors and invalid signatures are significant, and arguably the ca",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371077447,371077447,src/pubkey.h
StEvUgnIn,2020-01-27 06:44:51,"> It would be nice if there was an `IsValid()` function to check if the pubkey is actually valid, as opposed to the signature being invalid.\n\n```\nclass XOnlyPubKey {\nprivate:\n    uint256 m_keydata;\n\npublic:\n    XOnlyPubKey(const uint256& in) : m_keydata(in) {}\n\n    /** Verify a 64-byte Schnorr signature.\n     *\n     * If the signature is not 64 bytes, or the public key is n",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371081681,371081681,src/pubkey.h
StEvUgnIn,2020-01-27 07:07:29,"I examined libstdc++ implementation for RISC-V architechture and it seems portable and independent from any physical architecture\nhttps://github.com/riscv/riscv-gcc/commits/riscv-gcc-8.3.0/libstdc%2B%2B-v3",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371085911,371085911,src/script/interpreter.h
kallewoof,2020-01-27 07:25:50,"@sipa It is not useful to be able to distinguish between an invalid pubkey and an invalid signature? I don't understand the reasoning there. Indeed it should be helpful to be able to tell a user which part they fat fingered, if any.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371090589,371090589,src/pubkey.h
kallewoof,2020-01-27 07:27:13,"@StEvUgnIn No, I am talking about the call to secp256k1_xonly_pubkey_parse failing.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371090902,371090902,src/pubkey.h
sipa,2020-01-27 07:29:40,"Sure, for users it may be useful to have a sanity check. But consensus code should never distinguish between invalid public key and invalid signature.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371091495,371091495,src/pubkey.h
sipa,2020-01-27 18:37:19,"@StEvUgnIn We can't just copy GPL code, unfortunately. Using libc++'s version may be an option, but it still seems overkill to me (it also contains lots of libc++ specific macros, that may require additional files to be included).",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371411509,371411509,src/script/interpreter.h
kallewoof,2020-01-28 07:40:38,"This assertion will be hit, because `cache` is null when using the below constructor:\n\nhttps://github.com/bitcoin/bitcoin/blob/b8048b814821913b1f4c1c2070ec68b0c9001ec8/src/script/interpreter.h#L258\n\nMaybe checking if txdata is non-null and complain if it isn't, at\n\nhttps://github.com/bitcoin/bitcoin/blob/b8048b814821913b1f4c1c2070ec68b0c9001ec8/src/script/interpreter.cpp#L1638\n",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371645313,371645313,src/script/interpreter.cpp
kallewoof,2020-01-28 08:07:12,"If someone does `txdata = PrecomputedTransactionData(tx);` and then later tries to do `txdata.Init(tx, spent_outputs);` this line will terminate, despite `m_amounts_spent_ready` not being updated based on the new spent_outputs. Perhaps\n\n```C++\nif (ready && spent_outputs.empty()) return;\n```\n\nEdit: maybe even split into `if !ready, make hashes` and `if !m_amounts_spend_ready`, do spent ",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371653934,371653934,src/script/interpreter.cpp
sipa,2020-01-28 08:12:15,Well yes it would assert because that would be invalid. It seems it's just doing its job?,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371655553,371655553,src/script/interpreter.cpp
kallewoof,2020-01-28 08:21:08,"I'm not arguing against the assert, I'm saying that we should catch 'cache is null' before this point.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371658686,371658686,src/script/interpreter.cpp
kallewoof,2020-01-28 08:33:20,"Because it's misleading and confusing. The assert is not triggering for the right reasons (I don't even think it's triggering at all, though tbh I'm not sure how C++ deals with being passed a null value for a referenced non-reference like this).\n\nIt's checking whether the cache is ready, but in reality the cache is null. This method does not even take a ref to begin with. The one place it's ca",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371663250,371663250,src/script/interpreter.cpp
sipa,2020-01-28 08:33:48,"I don't think that helps. If you reach this point without the cache initialized, you're using the code incorrectly.\n\nWhat is perhaps not clear is that this is not just a cache - we can't recompute data in it if it missing based on other sources. We rely on it to pass in essential information about the spending that cannot be retrieved otherwise.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371663431,371663431,src/script/interpreter.cpp
sipa,2020-01-28 08:36:41,"Oh, you're talking about null vs uninitialized. I'll investigate tomorrow. Dereferencing or invoking a member function of a null pointer is UB; if that can happen we should indeed catch it earlier. I can't check the code right now.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371664502,371664502,src/script/interpreter.cpp
kallewoof,2020-01-28 08:44:49,"Hm.. for v0 this is actually accomodated for\n```C++\n        const bool cacheready = cache && cache->ready;\n```\nwhereas for v1 this is mandatory. I still think it's unnecessarily unhelpful, and a bit scary to have non-ref null values in code paths (even if as you say this is a hint of a bigger problem).",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371667917,371667917,src/script/interpreter.cpp
sipa,2020-01-28 08:47:20,"What do ""non-ref null values"" mean?\n\nA reference to nullptr is illegal, always. Only pointers can be nullptr.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371669023,371669023,src/script/interpreter.cpp
kallewoof,2020-01-28 08:58:59,"In `SignatureHashSchnorr`, the last parameter, defined as `const PrecomputedTransactionData& cache`, is `0x0000000000000000` for the case where `*this->txdata == nullptr` above. This may be using the code incorrectly, but it seems worth catching before that call above.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r371674659,371674659,src/script/interpreter.cpp
kallewoof,2020-01-30 05:57:55,I believe this should be called `SignatureHashSchnorr` and be `<typename T>` to match `interpreter.cpp` v.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r372771079,372771079,src/script/interpreter.h
elichai,2020-01-30 17:01:35,"@JeremyRubin Don't forget that the `std` namespace get special treatment from the compiler.\nso copying code from `libstd` without checking it might actually contain implementation defined behavior that won't necessarily work correctly with a different compiler(or even just by being outside of the std namespace).",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r373074045,373074045,src/script/interpreter.h
StEvUgnIn,2020-01-31 07:51:32,@kallewoof OK,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r373351801,373351801,src/pubkey.h
pinheadmz,2020-02-26 13:19:30,"Is the P2SH check necessary here? There is a test for `prevScript.IsWitnessProgram()` a few lines up, is there anyway the script could still be P2SH at this point?\nOr should this actually test `prev.scriptPubKey.IsPayToScriptHash()` which is the actual previous TX output script, defined before `prevScript` is updated to the redeem script.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r384485907,384485907,src/policy/policy.cpp
jnewbery,2020-03-09 21:44:03,"Adding the `!is_p2sh` here means that any transaction input spending a P2SH-wrapped segwit v1 output will be valid, but will fail standardness with`SCRIPT_ERR_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM` (""Witness version reserved for soft-fork upgrades"") which seems like the wrong error message. We're not expecting P2SH-wrapped segwit v1 outputs to reinterpreted by a future soft-fork, we're simply leav",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r389978895,389978895,src/script/interpreter.cpp
sipa,2020-03-21 17:39:59,This seems to be more of a potential improvement for later.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r396012415,396012415,src/script/interpreter.h
sipa,2020-03-21 17:43:44,"@kallewoof So, I suggest that maybe we add a way to test if a pubkey is valid later when wallet support is added. But as the current PR is solely consensus/validation code, I think it's simpler and safer to not expose that distinction for now.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r396012754,396012754,src/pubkey.h
sipa,2020-03-21 18:56:16,Done.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r396018821,396018821,test/functional/feature_taproot.py
sipa,2020-03-21 18:57:26,"Nice catch, I finally looked into this, and I agree this is too fragile. I've changed `SignatureHashSchnorr` to take a pointer to a `PrecomputedTramsactionData` instead, and assert fail when it's null.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r396018978,396018978,src/script/interpreter.cpp
sipa,2020-03-21 18:57:56,"It's not called anywhere externally, so I've just dropped it from the header file.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r396019071,396019071,src/script/interpreter.h
sipa,2020-03-21 18:58:34,Done. I've rewritten this to effectively treat `ready` as referring to the pre-taproot stuff and `m_amounts_spend_ready` for the rest.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r396019184,396019184,src/script/interpreter.cpp
sipa,2020-03-21 18:58:46,Done.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r396019212,396019212,src/script/interpreter.h
sipa,2020-03-21 18:58:54,Done.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r396019225,396019225,src/script/interpreter.cpp
sipa,2020-03-21 19:00:11,"@pinheadmz Good point, this is wrong; it's supposed to test `prev.scriptPubKey` instead of `prevScript`. I've changed it to keep track of `p2sh`-ness above, and then test that instead.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r396019344,396019344,src/policy/policy.cpp
sipa,2020-03-21 19:01:26,"Maybe we can just change the error message to also encompass things that we don't expect will ever be used? (for example, we don't expect witness programs with size below 32 - and certainly not ones with size below 20 - to be used, but they're still available for future extensions)",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r396019473,396019473,src/script/interpreter.cpp
Empact,2020-03-21 21:55:09,"nit: I'm not 100% clear on our`include` guidelines - `string` is included via `hash.h`, so if that's sufficient this line is unnecessary, if that's not sufficient, then we should also include `uint256.h`, etc here.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r396032513,396032513,src/hash.cpp
kallewoof,2020-03-21 23:36:00,"Guidelines say to include what you use, so including seems correct to me.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r396039037,396039037,src/hash.cpp
jnewbery,2020-03-24 19:12:53,should `stack.front()` be preferred over `stack[0]`?,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r397398915,397398915,src/script/interpreter.cpp
sipa,2020-03-26 20:30:30,Done.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r398871493,398871493,src/script/interpreter.cpp
jnewbery,2020-03-28 16:24:13,nit: could these two bools be replaced with an `Optional<bool>`? Optional is std from c++17 but currently implemented using boost::optional. Do we prefer to keep that out of consensus code?,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r399680669,399680669,src/script/interpreter.h
jnewbery,2020-03-28 16:46:23,Is this just a duplicate of `WITNESS_V1_TAPROOT_SIZE`? It's only used once in `VerifyWitnessProgram()`. Can we replace that usage with `WITNESS_V1_TAPROOT_SIZE`?,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r399683139,399683139,src/script/interpreter.h
sipa,2020-03-28 18:37:35,"We can't use boost in libconsensus (well we could if we add a dependency mess to it, but I suspect we rather not). There was an earlier discussion in this PR about this, including the option of including a simple native Optional type definition. I think this is overkill, and this approach is fine for now - we can switch to std::optional once it's available.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r399694732,399694732,src/script/interpreter.h
sipa,2020-03-28 18:38:36,"~~The constants happen to be identical, but there is no a-priori reason why they would be (if you wouldn't know the BIP, say). They're separate concepts, so merging the constants would IMO defeat the purpose of having a named constant in the first place.~~",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r399694847,399694847,src/script/interpreter.h
jnewbery,2020-03-28 20:54:51,"I'm confused by what the difference is.\n\nIn policy.cpp:\n\n```\n        if (witnessversion == 1 && witnessprogram.size() == WITNESS_V1_TAPROOT_SIZE && !p2sh) {\n```\n\nIn interpreter.cpp:\n\n```\n    } else if (witversion == 1 && program.size() == TAPROOT_PROGRAM_SIZE && !is_p2sh) {\n```\n\nAre those not comparing the same data to the same constant, just with different constant nam",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r399708460,399708460,src/script/interpreter.h
sipa,2020-03-28 21:12:57,"Oh, of course! Sorry, I misread; thinking that one was the constant for (v0) P2WSH. Will merge them into one.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r399710184,399710184,src/script/interpreter.h
sipa,2020-03-28 22:26:34,Done.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r399716976,399716976,src/script/interpreter.h
michaelfolkson,2020-04-11 11:23:46,Optional nit (feel free to ignore): Refer to the BIP (341) explaining why single hashes are added. https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki#cite_note-15,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r407052056,407052056,src/script/interpreter.h
MarcoFalke,2020-05-02 22:58:24,"```\ntest/functional/test_framework/address.py:10:1: F401 '.script.hash256' imported but unused",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r419018428,419018428,test/functional/test_framework/address.py
sipa,2020-05-06 07:34:10,Fixed.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r420596666,420596666,test/functional/test_framework/address.py
theuni,2020-07-01 16:45:21,Any reason not to put the cheap policy check before VerifyTaprootCommitment() ? ,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r448490009,448490009,src/script/interpreter.cpp
instagibbs,2020-07-14 19:57:40,`s/32/hash.size()/` if you don't mind,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r454607993,454607993,src/hash.cpp
instagibbs,2020-07-14 20:02:59,Is this ever expected to not hit?,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r454610820,454610820,src/script/interpreter.cpp
instagibbs,2020-07-14 20:03:16,Is this for simply catching assertion condition?,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r454610931,454610931,src/script/interpreter.cpp
instagibbs,2020-07-14 20:08:37,`s/32/m_keydata.size()/`,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r454613765,454613765,src/pubkey.h
instagibbs,2020-07-14 20:28:26,please annotate `/* is_p2sh */`,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r454624482,454624482,src/script/interpreter.cpp
instagibbs,2020-07-14 20:28:32,please annotate `/* is_p2sh */`,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r454624548,454624548,src/script/interpreter.cpp
instagibbs,2020-07-14 20:33:49,Could mention the key could be busted too.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r454627469,454627469,src/script/script_error.cpp
instagibbs,2020-07-14 20:45:46,did I miss why the const is dropped here?,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r454634063,454634063,src/script/interpreter.cpp
instagibbs,2020-07-14 20:48:52,Would be nice when time comes.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r454635726,454635726,src/script/interpreter.h
instagibbs,2020-07-14 20:52:05,"> The following validation sequence is consensus critical.\n\nYou don't say",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r454637523,454637523,src/script/interpreter.cpp
instagibbs,2020-07-14 21:16:49,N.B.: Let's make sure there's a test that catches the >4 bytes rule for addition,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r454650575,454650575,src/script/interpreter.cpp
instagibbs,2020-07-14 21:28:11,The various peppering of `sigversion == SigVersion::BASE || sigversion == SigVersion::WITNESS_V0` and `sigversion != SigVersion::TAPSCRIPT` makes me a little uneasy. Synchronize these checks?,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r454656075,454656075,src/script/interpreter.cpp
instagibbs,2020-07-15 13:16:56,this would be easy/nice to split out for unit tests,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r455042663,455042663,src/script/interpreter.cpp
instagibbs,2020-07-15 13:25:16,"I think it'd be cleaner to just make the `Span` here, then use it for next 4 lines?",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r455048734,455048734,src/script/interpreter.cpp
instagibbs,2020-07-15 13:37:34,"Currently this only enforces `MAX_STANDARD_TAPSCRIPT_STACK_ITEM_SIZE` on top of consensus checks, yes?",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r455057389,455057389,src/policy/policy.cpp
instagibbs,2020-07-15 13:40:22,"Should mention/rename it to show it's ""add"" not ""mult""",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r455059396,455059396,test/functional/test_framework/key.py
instagibbs,2020-07-15 13:40:26,"Should mention/rename it to show it's ""add"" not ""mult""",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r455059451,455059451,test/functional/test_framework/key.py
Sjors,2020-07-16 16:06:56,"Afaik no, because `CheckInputScripts` returns early for coinbase transactions. An assert here would make more sense",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r455901409,455901409,src/script/interpreter.cpp
JeremyRubin,2020-07-16 19:19:31,"Also perhaps this is checked elsewhere by the logic that sets this SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_TAPROOT_VERSION flag, but don't we need to check the flag version is not currently defined here?",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456016445,456016445,src/script/interpreter.cpp
JeremyRubin,2020-07-16 19:22:05,"Ah I think @theuni commented from an earlier commit, so it wasn't showing that a version is defined.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456018116,456018116,src/script/interpreter.cpp
instagibbs,2020-07-17 18:29:35,FYI nonstandard txns are rejected by default in regtest now ( I don't mind explicit args in tests so meh),https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456607326,456607326,test/functional/feature_taproot.py
sipa,2020-07-19 20:16:44,"@theuni I think it's preferable to do checks for consensus-invalidity first, so that the error code you get is more consistent. As it isn't inherently more expensive for an attacker to create a policy-invalid spend instead of one that just has an invalid signature say, I don't think it matters for DoS resistance either.\n\n@JeremyRubin I have no idea what you're trying to say.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456950774,456950774,src/script/interpreter.cpp
sipa,2020-07-19 20:23:13,"I believe this is fine right now, but if this code ends up being reused in signing logic, it will actually be empty in cases where not all spent outputs are known (e.g. legacy signing through some RPCs).",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456951409,456951409,src/script/interpreter.cpp
sipa,2020-07-19 20:24:01,"Yes. It's an alternative to using optional here (which would otherwise pull in boost stuff into libconsensus, unless we wait for c++17).",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456951479,456951479,src/script/interpreter.cpp
sipa,2020-07-19 20:30:34,Do you have a suggested string?,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456952147,456952147,src/script/script_error.cpp
JeremyRubin,2020-07-19 20:41:54,"![image](https://user-images.githubusercontent.com/886523/87884608-482e7a80-c9c4-11ea-9e15-4fc36b01c974.png)\n@theuni comment shows up on this line, which is later amended to \n\n![image](https://user-images.githubusercontent.com/886523/87884712-2d103a80-c9c5-11ea-9da4-0fdc12fdd3cb.png)\n\n\nSo I was simply confused from the tagged snippet as to why it did not check the taproot leaf version.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456953262,456953262,src/script/interpreter.cpp
sipa,2020-07-19 20:48:51,"This is a bit annoying, as this loop has multiple distinct return branches, and it returning success can mean either continue execution or not.\n\nHappy to take some code if you have a suggestion, though.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456953921,456953921,src/script/interpreter.cpp
sipa,2020-07-19 20:53:34,"Ah, I see. That also explains why it may look like these two could easily be swapped @theuni - it's only in a later commit that something is added in between them (and the order matters).",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456954404,456954404,src/script/interpreter.cpp
JeremyRubin,2020-07-19 21:09:35,"I think in theory @theuni's point stands, we could add a cheap check ahead of verifytaprootcommitment that checks and aborts if it's an unknown leaf version, but yes the final state makes more sense as is.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456955941,456955941,src/script/interpreter.cpp
sipa,2020-07-19 21:15:12,Done.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456956498,456956498,src/hash.cpp
sipa,2020-07-19 21:15:23,Done.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456956510,456956510,src/pubkey.h
sipa,2020-07-19 21:15:30,Done.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456956524,456956524,src/script/interpreter.cpp
sipa,2020-07-19 21:15:43,Done.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456956547,456956547,src/script/interpreter.cpp
sipa,2020-07-19 21:15:53,"Nope, fixed.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456956571,456956571,src/script/interpreter.cpp
sipa,2020-07-19 21:16:04,"I know, right?",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456956599,456956599,src/script/interpreter.cpp
sipa,2020-07-19 21:16:11,Good idea.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456956607,456956607,src/script/interpreter.cpp
sipa,2020-07-19 21:16:35,There was only one `sigversion != SigVersion::TAPSCRIPT` so I've changed that to the other one.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456956634,456956634,src/script/interpreter.cpp
sipa,2020-07-19 21:16:58,"Indeed, updated comment.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456956659,456956659,src/policy/policy.cpp
sipa,2020-07-19 21:17:07,"Good idea, done.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456956678,456956678,src/script/interpreter.cpp
sipa,2020-07-19 21:17:17,Done.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456956697,456956697,test/functional/test_framework/key.py
sipa,2020-07-19 21:17:23,Done.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456956705,456956705,test/functional/test_framework/key.py
sipa,2020-07-19 21:17:44,Done.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456956776,456956776,test/functional/feature_taproot.py
instagibbs,2020-07-20 01:08:34,Yeah found out the hard way after trying a few times.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456981308,456981308,src/script/interpreter.cpp
instagibbs,2020-07-20 01:24:24,"I ended up writing that test, in the branch I posted.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456983701,456983701,src/script/interpreter.cpp
instagibbs,2020-07-20 02:11:05,"Wondering if you could un-magic this constant a bit. I was going to attempt to write another case for unknown pubkey using this template, but ran out of motivation to reverse engineer it.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r456992780,456992780,test/functional/feature_taproot.py
Sjors,2020-07-23 14:43:20,"41d08f5d77f52bec0e31bb081d85fff2d67d0467: let's document that `uint256 GetPrevoutHash` and `GetSequenceHash` (now) return a single SHA256 hash.\n\nPerhaps we should rename them to GetPrevout**s**Hash and GetSequence**s**Hash, consistent with `GetSpentAmountsHash` and `GetSpentScriptsHash`.\n\nIn BIP-341 the phrasing is slightly ambiguous: ""sha_prevouts (32): the SHA256 of the serialization of ",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459503234,459503234,src/script/interpreter.cpp
Sjors,2020-07-23 15:16:08,"41d08f5d77f52bec0e31bb081d85fff2d67d0467: maybe rename to `m_prevouts_hash_v0` or `m_prevouts_double_hash`?\n\nIn addition, shouldn't we skip calculating hashes we don't need depending on the witness version? Or is that negligible for validation performance (sorry, too lazy to bench this myself)?",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459527853,459527853,src/script/interpreter.cpp
Sjors,2020-07-23 15:21:08,41d08f5d77f52bec0e31bb081d85fff2d67d0467 : `TapSighash` is written in camel case (`TapSigHash`) most of the time in BIP 341 (which would be my preference too).,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459531548,459531548,src/script/interpreter.cpp
Sjors,2020-07-23 18:42:46,"41d08f5d77f52bec0e31bb081d85fff2d67d0467: `EPOCH` is explained in BIP-341, but missing from ""the message is the concatenation of the following data, in order""",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459653999,459653999,src/script/interpreter.cpp
Sjors,2020-07-23 19:00:01,"41d08f5: this could lead to confusion if a later upgrade adds and permits a new SIGHASH type, given that the BIP specifies this as a negative: ""If `hash_type & 3` does not equal `SIGHASH_NONE` or `SIGHASH_SINGLE`"".",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459663568,459663568,src/script/interpreter.cpp
Sjors,2020-07-23 19:02:48,"41d08f5: The BIP (still?) says `0x50` (I see this completely changes in a later commit, so will revisit then)",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459665027,459665027,src/script/interpreter.cpp
Sjors,2020-07-23 19:12:16,41d08f5d77f52bec0e31bb081d85fff2d67d0467 : isn't this missing a `compact_size(size of annex)` prefix?,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459669929,459669929,src/script/interpreter.cpp
instagibbs,2020-07-23 19:26:43,I thought that was implicit with vector serializations like this.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459677698,459677698,src/script/interpreter.cpp
Sjors,2020-07-23 19:44:59,"Having bumped my head against (missing) size bytes in serialisations, e.g with libwally, let's at least add a comment to that effect.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459686936,459686936,src/script/interpreter.cpp
sipa,2020-07-23 19:50:45,"Vectors are serialized everywhere this way. Do we need to add comments also to block, transaction inputs, transaction outputs, ADDR messages, all lists in the protocol, ...?",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459689700,459689700,src/script/interpreter.cpp
JeremyRubin,2020-07-23 21:38:43,"@Sjors please review \nhttps://github.com/bitcoin/bitcoin/pull/18071/files which proposes something similar.\n\n",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459742867,459742867,src/script/interpreter.cpp
JeremyRubin,2020-07-23 21:42:54,"these are computed at the txn level, so you'd need to add some code which detects if there is no input of that type. Maybe worthwhile?\n\nBut keep in mind that taproot isn't calculating anything new, just caching the intermediate results...",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459744786,459744786,src/script/interpreter.cpp
brmdbr,2020-07-23 22:47:51,Hate to do this: capitalisation. Tagged hash,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459769788,459769788,src/secp256k1/src/modules/schnorrsig/main_impl.h
Sjors,2020-07-24 09:25:16,Don't `m_spent_amounts_hash` and `m_spent_scripts_hash` (below) add two extra hash operations when verifying SegWit transactions?,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459946237,459946237,src/script/interpreter.cpp
jnewbery,2020-07-24 09:25:48,`hash` is the wrong name for this param. It should be `input` to match the header declaration (although I think `preimage` would be better still).,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459946492,459946492,src/hash.cpp
Sjors,2020-07-24 09:26:45,"No, you're right, it's actually the BIP that explicitly mentions it only here.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459946917,459946917,src/script/interpreter.cpp
jnewbery,2020-07-24 09:44:01,"I agree with @Sjors (https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459527853) that these should be renamed. `m_prevouts_hash` and `hashPrevouts` doesn't communicate that one of these members is the SHA256 digest and the other is the dSHA256 digest. I'd propose `m_prevouts_sha256` and `m_prevouts_double_sha256`, but anything that communicates what these are would be an improvement.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459954502,459954502,src/script/interpreter.h
jnewbery,2020-07-24 09:52:15,nit: sort :),https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459958265,459958265,test/functional/test_framework/key.py
jnewbery,2020-07-24 09:55:32,should this be `tweak_add_pubkey`?,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459959814,459959814,test/functional/test_framework/key.py
instagibbs,2020-07-24 13:01:44,yeah looks like this didn't change,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460037618,460037618,test/functional/test_framework/key.py
fjahr,2020-07-24 14:15:28,nit: I would prefer the `execdata` before `serror`. Would also be more consistent with `ExecuteWitnessScript`.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460079736,460079736,src/script/interpreter.cpp
Sjors,2020-07-24 14:33:58,b7a7f6ab2ccc30e323a5396c27cb82ffd613550b nit: these comments could be introduced in 41d08f5d77f52bec0e31bb081d85fff2d67d0467 (which adds `TAPROOT = 2`),https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460091608,460091608,src/script/interpreter.h
Sjors,2020-07-24 16:35:39,"cbcaab9a66f82fa5bcc2711a5fee2adc47004cc8 nit: `m_annex_hash` is only initialized if `m_annex_present` is `true`, though I doubt it will confuse anyone. Alternate wordings:\n```cpp\n//! Whether m_annex_present is initialized\n```\n\nOr:\n```cpp\n //! Whether m_annex_present and (when needed) m_annex_hash are initialized.\n```",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460163407,460163407,src/script/interpreter.h
fjahr,2020-07-24 16:54:49,"I think these runtime constants tend to be formatted like normal variables in the rest of the code base, i.e. snake case. But there does not seem to be a particular rule on these in the style guide.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460173936,460173936,src/script/interpreter.cpp
fjahr,2020-07-24 16:56:08,"styleguide nit:\n```suggestion\n        for (unsigned int i = 0; i < tx.vin.size(); ++i) {\n```",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460174647,460174647,src/validation.cpp
Sjors,2020-07-24 17:22:43,"Perhaps the comment can be expanded to clarify how `success` is used by the caller:\n\n```\nIf script execution doesn't trigger an error, success is added to the stack.\nOP_CHECKSIGVERIFY immediately fails if success is false, whereas with\nOP_CHECKSIG(_ADD) it's up to the rest of the script to\ndecide what to do with the signature result, typically based on the number\nof non-empty signatu",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460187918,460187918,src/script/interpreter.cpp
Sjors,2020-07-24 18:14:20,I would find it marginally more readable to use `!sig.empty()` in the `if` statements below and move `success = !sig.empty();` all the way to the bottom. ,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460213001,460213001,src/script/interpreter.cpp
Sjors,2020-07-24 18:22:02,"```\n/** Helper for OP_CHECKSIG, OP_CHECKSIGVERIFY and OP_CHECKSIGADD\n```",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460216726,460216726,src/script/interpreter.cpp
Sjors,2020-07-24 19:03:07,But only if `OP_SUCCESSx` occurred earlier?  Is it worth the effort to check the whole script for `OP_SUCCESSx` before and then do second pass for other conditions?,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460235730,460235730,src/script/interpreter.cpp
JeremyRubin,2020-07-24 19:32:16,"ah yes those are extra, but only when haswitness. I suppose we could add a function hasv1witness? ",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460248927,460248927,src/script/interpreter.cpp
JeremyRubin,2020-07-24 19:40:23,"Nope, the spec is defined as first parsing the script into opcodes to check for OP_SUCCESSx, and then executing.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460252562,460252562,src/script/interpreter.cpp
JeremyRubin,2020-07-24 19:40:45,so you should check for e.g. unexecuted branches as well.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460252714,460252714,src/script/interpreter.cpp
JeremyRubin,2020-07-24 21:02:56,https://github.com/bitcoin/bitcoin/pull/17977#pullrequestreview-348338789,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460286926,460286926,src/script/interpreter.h
Sjors,2020-07-25 07:23:57,"Afaik this code fails if it finds an unknown OPCODE _before_ OP_SUCCESSx, so then it doesn't match the spec?",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460376582,460376582,src/script/interpreter.cpp
Sjors,2020-07-25 07:30:09,"Assuming this is in reply to https://github.com/bitcoin/bitcoin/pull/17977#discussion_r459531548\nThe string ""TapSighash"" itself, not the variable name, is consensus critical, because it gets hashed into transactions. So the code style guidelines aren't relevant.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460377065,460377065,src/script/interpreter.cpp
sipa,2020-07-25 07:30:38,"If by unknown opcode you mean undecodable, no - because if an opcode can't be decoded, there are also no other opcodes decodable after it.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460377134,460377134,src/script/interpreter.cpp
Sjors,2020-07-25 10:59:58,"It wasn't entirely clear to me what `GetScriptOp` does, in particular what happens if an `opcode` does not occur in the `opcodetype` enum, but [apparently this is fine](https://stackoverflow.com/a/18195408).",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r460393487,460393487,src/script/interpreter.cpp
sipa,2020-07-28 04:49:48,I still have to do this.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461316019,461316019,test/functional/feature_taproot.py
sipa,2020-07-28 04:50:02,Added some extra comments.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461316101,461316101,src/script/interpreter.cpp
sipa,2020-07-28 04:50:53,"I've made some significant changes here; the code will now detect if a transaction needs BIP341 and/or BIP143 sighashing, and then only precompute what is needed for the existing ones.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461316301,461316301,src/script/interpreter.cpp
sipa,2020-07-28 04:51:56,"The constant itself is consensus-critical.\n\nThe name of the variable was a style violation; it's a constant, it should be ALL_CAPS. Did that.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461316594,461316594,src/script/interpreter.cpp
sipa,2020-07-28 04:52:43,The epoch is explained in footnote 19 of BIP341. Not sure what is missing.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461316813,461316813,src/script/interpreter.cpp
sipa,2020-07-28 04:53:08,"If this code is reused for a new sighash algorithm, this will be the least of our problems.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461316943,461316943,src/script/interpreter.cpp
sipa,2020-07-28 04:53:17,"Good catch, fixed.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461316995,461316995,src/script/interpreter.cpp
sipa,2020-07-28 04:54:03,Comments for the libsecp256k1 changes should go to the PR there: https://github.com/bitcoin-core/secp256k1/pull/558,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461317204,461317204,src/secp256k1/src/modules/schnorrsig/main_impl.h
sipa,2020-07-28 04:54:48,I've changed it to `data`. I think `preimage` is more useful when you're talking about a hash input that generates a specified output.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461317427,461317427,src/hash.cpp
sipa,2020-07-28 04:55:44,"Renamed the BIP341 ones with just a `_bip341_` in the name, which is as specific as it can be, I think. I'm trying not to touch too much other stuff, so the others keep their name.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461317688,461317688,src/script/interpreter.h
sipa,2020-07-28 04:55:57,"Indeed, done.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461317743,461317743,src/script/interpreter.h
sipa,2020-07-28 04:57:14,Done.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461318080,461318080,src/script/interpreter.h
sipa,2020-07-28 04:57:53,"I'm not sure. The result is always _exactly_ equal to `!sig.empty()` if no failure occurs, so I think this makes sense.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461318243,461318243,src/script/interpreter.cpp
sipa,2020-07-28 04:58:17,Done.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461318327,461318327,src/script/interpreter.cpp
sipa,2020-07-28 04:58:28,Meh.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461318367,461318367,src/script/interpreter.cpp
sipa,2020-07-28 04:58:42,Changed the variable name.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461318419,461318419,src/script/interpreter.cpp
sipa,2020-07-28 04:58:49,Done.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461318457,461318457,src/validation.cpp
instagibbs,2020-07-28 14:01:11,Last sentence here is outdated.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461603352,461603352,test/functional/feature_taproot.py
instagibbs,2020-07-28 14:04:34,"nice, you may get 1 to 3 sigops weight left over by chance, but tests will blow that out regularly.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461605876,461605876,test/functional/feature_taproot.py
sipa,2020-07-28 20:21:04,"Yeah, I know, but it's a lot harder to test that accurately (it needs creating outputs and spending them using witness spends, ...).\n\nIdeally, we'd also test that if you have one sigop too many, things also fail. Otherwise it could be the case that some of the  sigops estimates in the test are overestimates.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461854603,461854603,test/functional/feature_taproot.py
sipa,2020-07-28 20:54:21,See https://github.com/bitcoin/bips/pull/954 for fixing the consensus-critical inconsistency.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461872479,461872479,src/script/interpreter.cpp
sipa,2020-07-28 23:40:40,"Better now? I've extended the test further too, and moved it to its own section.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461954582,461954582,test/functional/feature_taproot.py
sipa,2020-07-28 23:41:16,"Oops, done now.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461954762,461954762,test/functional/test_framework/key.py
gmaxwell,2020-07-29 10:38:19,      //! Entries are SHA256(nonce || 'E' or 'S' || 0x00 * 32 || signature hash || public key || signature),https://github.com/bitcoin/bitcoin/pull/17977#discussion_r462204524,462204524,src/script/sigcache.cpp
JeremyRubin,2020-08-04 01:03:38,don't we use these caches for any non taproot signature? Not just segwit?,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r464740054,464740054,src/script/interpreter.cpp
sipa,2020-08-04 01:05:01,"No, there is nothing to be cached for pre-segwit sighashes (they're just hashing a serialized modified transaction).",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r464740393,464740393,src/script/interpreter.cpp
instagibbs,2020-08-04 15:00:33,"I'd kind of prefer to just use `IsWitnessProgram` to grab the values for here since I know that works already.\n\nWhat about erring on the side of bip341 precomputing instead? Could just say:\n\n```\nif (m_spent_outputs_ready && m_spent_outputs[inpos].scriptPubKey.IsWitnessProgram(version, witness_program) && version > 0) {\n```\nthen we can delete the ""unknown witness verison"" comment belo",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r465117136,465117136,src/script/interpreter.cpp
sipa,2020-08-06 21:17:13,How so?,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r466691211,466691211,test/functional/feature_taproot.py
sipa,2020-08-06 23:24:57,"We also need to make sure that BIP143 caching is enabled for P2SH-wrapped segwit spends (where we can't just look at the scriptPubKey, and going as far as doing P2SH decoding seems excessive here).\n\nI was trying to avoid IsWitnessProgram since it'd create an unnecessary copy of witness_program.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r466737776,466737776,src/script/interpreter.cpp
sipa,2020-08-06 23:27:25,Done.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r466738464,466738464,src/script/sigcache.cpp
instagibbs,2020-08-07 00:53:59,I was taking `p2pk` literally but I guess it could be read more generally.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r466761829,466761829,test/functional/feature_taproot.py
jnewbery,2020-08-07 12:08:02,"Any reason not to do a range-based for loop here?\n\n```suggestion\n        for (const CTxIn& txin : tx.vin) {\n            const COutPoint &prevout = txin.prevout;\n```",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r466999327,466999327,src/validation.cpp
jnewbery,2020-08-07 14:41:47,"There's a naming inconsistency here. `VerifySignature` changed to `VerifyECDSASignature`/`VerifySchnorrSignature`, but `CheckSig` has changed to `CheckSigSchnorr`/`CheckSig`. Would it be better to name them `CheckSchnorrSig`/`CheckECDSASig`?",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r467084462,467084462,src/script/interpreter.h
jnewbery,2020-08-07 15:45:55,"Is there any disadvantage to combining these two lines and eliminating the temporary return value:\n\n```suggestion\n    if !(SignatureHashSchnorr(sighash, execdata, *txTo, nIn, hashtype, sigversion, this->txdata) return false;\n```",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r467121438,467121438,src/script/interpreter.cpp
sipa,2020-08-07 18:13:04,Marking as resolved.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r467195675,467195675,src/script/interpreter.cpp
sipa,2020-08-07 18:13:58,Done.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r467196125,467196125,test/functional/test_framework/key.py
sipa,2020-08-07 18:16:51,"Not going to do this, as it would mean changing more call sites (which currently pass serror, but wouldn't have an execdata to pass).",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r467197477,467197477,src/script/interpreter.cpp
sipa,2020-08-07 18:18:14,"You can take it literally. P2PK (and other bare-public-key-in-output types, but there aren't any of those in this test) are the only ones that cost sigops.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r467198115,467198115,test/functional/feature_taproot.py
instagibbs,2020-08-07 18:22:33,"ok I misunderstood your comment, will just review instead.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r467200141,467200141,test/functional/feature_taproot.py
instagibbs,2020-08-07 20:23:38,expression,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r467252062,467252062,test/functional/feature_taproot.py
sipa,2020-08-07 23:25:01,Done.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r467325769,467325769,src/script/interpreter.h
sipa,2020-08-07 23:25:08,None. Done.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r467325797,467325797,src/script/interpreter.cpp
sipa,2020-08-07 23:25:22,Done.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r467325860,467325860,src/validation.cpp
instagibbs,2020-08-10 14:47:24,"for `leafversion` anything other than `0xc0` should fail it, maybe just flip a bit of this too",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r467956184,467956184,test/functional/feature_taproot.py
instagibbs,2020-08-10 14:48:24,"I'm getting some strange mutation results:\n\n```\n--- a/src/script/interpreter.cpp\n+++ b/src/script/interpreter.cpp\n@@ -1497,7 +1497,7 @@ bool SignatureHashSchnorr(uint256& hash_out, const ScriptExecutionData& execdata\n     // Hash type\n     const uint8_t output_type = (hash_type == SIGHASH_DEFAULT) ? SIGHASH_ALL : (hash_type & SIGHASH_OUTPUT_MASK); // Default (no sighash byte) is equi",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r467956844,467956844,test/functional/feature_taproot.py
instagibbs,2020-08-10 14:50:50,"`s/followed by a dummy/followed by a dummy push of bytes that are to be dropped/`\n",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r467958678,467958678,test/functional/feature_taproot.py
instagibbs,2020-08-10 14:52:16,"suggestion:\n\n`""sighash/keypath_{}"".format(hashtype)`",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r467959794,467959794,test/functional/feature_taproot.py
instagibbs,2020-08-10 14:52:43,"suggestion:\n\n`""sighash/scriptpath_{}"".format(hashtype)`",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r467960153,467960153,test/functional/feature_taproot.py
instagibbs,2020-08-10 14:53:24,"suggestion:\n\n`""sighash/keypath_unk_hashtype_{}"".format(invalid_hashtype)`",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r467960608,467960608,test/functional/feature_taproot.py
instagibbs,2020-08-10 14:53:47,"suggestion:\n\n`""sighash/scriptpath_unk_hashtype_{}"".format(invalid_hashtype)`",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r467960891,467960891,test/functional/feature_taproot.py
instagibbs,2020-08-10 15:04:33,take-or-leave-nit: just do `[b''] * 1001`,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r467968687,467968687,test/functional/feature_taproot.py
instagibbs,2020-08-10 15:06:50,take-or-leave-nit: just do `[b''] * 1001`,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r467970307,467970307,test/functional/feature_taproot.py
instagibbs,2020-08-10 15:09:54,nice script for this check,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r467972427,467972427,test/functional/feature_taproot.py
sipa,2020-08-14 04:36:49,Done.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r470405454,470405454,test/functional/feature_taproot.py
sipa,2020-08-14 04:37:10,Randomenized it.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r470405540,470405540,test/functional/feature_taproot.py
sipa,2020-08-14 04:40:36,"Very nice catch.\n\nIt took me a while: what happened is that the sighash code on the Python code (intentionally) supported invalid hashtypes, but implemented them slightly differently than what the C++ code did (after applying your mutation). Thus the signature for 0x04 and 0x84 (which map to output_type == 0, an invalid value) was constructed, but still rejected.\n\nI've changed the Python s",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r470406363,470406363,test/functional/feature_taproot.py
sipa,2020-08-14 04:40:46,Done.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r470406385,470406385,test/functional/feature_taproot.py
sipa,2020-08-14 04:41:00,Done (with %x).,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r470406434,470406434,test/functional/feature_taproot.py
sipa,2020-08-14 04:41:08,Done (with %x).,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r470406470,470406470,test/functional/feature_taproot.py
sipa,2020-08-14 04:41:19,Done (with %x).,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r470406507,470406507,test/functional/feature_taproot.py
sipa,2020-08-14 04:41:28,"Done, with %x.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r470406543,470406543,test/functional/feature_taproot.py
sipa,2020-08-14 04:41:40,"Ah yes, I forgot you could do that.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r470406595,470406595,test/functional/feature_taproot.py
sipa,2020-08-14 04:41:49,Done.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r470406642,470406642,test/functional/feature_taproot.py
sipa,2020-08-14 04:42:15,thanks I wrote it myself,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r470406730,470406730,test/functional/feature_taproot.py
kallewoof,2020-08-20 02:39:59,"If I want to taproot-sign a transaction, it will not have any ScriptWitness data when I try to obtain the signature hash, which means `m_bip341_ready` will not be set after the `PrecomputedTransactionData::Init()` call has been made.\n\nThis means I have to put in junk data in the vin's scriptwitness in order to obtain the sighash, which seems off.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r473553826,473553826,src/script/interpreter.cpp
instagibbs,2020-08-20 19:11:00,Will you be using a cache when signing a tx? I figured no.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r474210335,474210335,src/script/interpreter.cpp
kallewoof,2020-08-21 03:17:46,"I need the sighash to sign the transaction, and I need the cache to get the sighash.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r474385753,474385753,src/script/interpreter.cpp
sipa,2020-08-21 03:39:36,"There is no signing code yet, so this may go in a number of different ways, but I was imagining that the cache would indeed be used for signing as well, as it becomes increasingly inconvenient to pass all arguments (including all spent UTXOs now!) along down into the signing function.\n\nIn fact, I think after the change to use the cache to pass that information along, we can stop passing script",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r474390723,474390723,src/script/interpreter.cpp
kallewoof,2020-08-21 03:46:35,"@sipa I worked around it on my end, so feel free to leave it as is until a decision is made on how signing should work!",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r474392228,474392228,src/script/interpreter.cpp
instagibbs,2020-08-22 17:31:38,oh I was having a special brain moment thinking it was a conditional check on if the cache existed.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r475112530,475112530,src/script/interpreter.cpp
luke-jr,2020-08-24 20:06:56,"I think we should probably require `spent_outputs` in the constructor. That gets us a compile-time error rather than a runtime surprise, if any code is missing an update.\n\nAside from tests (which have a mere 4 uses), it's only used in libbitcoinconsensus, where the omission is arguably a bug (impossible to use existing APIs for Taproot verification).",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r475863712,475863712,src/script/interpreter.cpp
luke-jr,2020-08-24 23:13:32,"Please rename things that change meaning. eg, `GetPrevoutSHA256`",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r475947567,475947567,src/script/interpreter.cpp
luke-jr,2020-08-24 23:19:41,"(Review TODO: Check that this is actually true, even when no signature checking occurs.)",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r475951884,475951884,src/script/interpreter.cpp
luke-jr,2020-08-24 23:56:52,"Technically, Tapscript itself is a form of P2SH, just not BIP16 P2SH.\n\nThe comment here confused me. Perhaps ""non-BIP16-wrapped""?",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r475978120,475978120,src/script/interpreter.h
luke-jr,2020-08-25 00:15:09,Should this be non-experimental before merging?,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r475990462,475990462,configure.ac
luke-jr,2020-08-25 00:18:27,Suggest moving `CheckSig` -> `CheckECDSASignature` rename to a dedicated commit,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r475992610,475992610,src/script/interpreter.h
luke-jr,2020-08-25 00:19:34,"nit: ""is not *exactly* 64 bytes""",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r475993339,475993339,src/pubkey.h
luke-jr,2020-08-25 00:26:13,"Suggest moving the size check and uint256 cast into `XOnlyPubKey` construction & `IsValid`, like `CheckECDSASignature` does",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r475997847,475997847,src/script/interpreter.cpp
luke-jr,2020-08-25 00:34:02,"Inaccuracy in previous comment aside, seems like it would be best to correct the new one (with 31 null bytes after E/S)",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r476002693,476002693,src/script/sigcache.cpp
luke-jr,2020-08-25 00:35:17,Probable premature optimisation: Copy `m_salted_hasher_ecdsa` before adding the padding?,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r476003576,476003576,src/script/sigcache.cpp
luke-jr,2020-08-25 04:08:19,Prefer `assert(false);` for unreachable conditions,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r476142106,476142106,src/script/interpreter.cpp
luke-jr,2020-08-25 04:25:43,"If we ever had a `continue`, this would get skipped. Seems like a code footgun.\n\nWe could replace `while (pc < pend)` with `for ( ; pc < pend; ++opcode_pos)` perhaps?",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r476154468,476154468,src/script/interpreter.cpp
luke-jr,2020-08-25 04:30:06,"All existing disabled opcodes trigger `SCRIPT_ERR_DISABLED_OPCODE` unconditionally, even if their branch isn't taken. Do we want to preserve that for CHECKMULTISIG? If not, do we still want to use the same error code?",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r476157648,476157648,src/script/interpreter.cpp
luke-jr,2020-08-25 04:42:21,We should probably policy-reject annex here for now?,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r476166522,476166522,src/policy/policy.cpp
JeremyRubin,2020-08-25 08:18:08,#19601 ,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r476264893,476264893,src/script/interpreter.cpp
JeremyRubin,2020-08-25 08:23:44,"it only happens on startup right now, so :man_shrugging: ",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r476268491,476268491,src/script/sigcache.cpp
JeremyRubin,2020-08-25 08:26:26,"the previous one is not incorrect AFIACT, because the nonce is just required to be 64 bytes long with at least 256 bits of entropy, which it has (nonce, signature hash, and public key are not variable names).",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r476270164,476270164,src/script/sigcache.cpp
sipa,2020-08-27 21:13:27,"They are policy-invalid, though it's implemented as a script verification flag (`SCRIPT_VERIFY_DISCOURAGE_UNKNOWN_ANNEX`). Any particular reason why you prefer it here?",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r478699201,478699201,src/policy/policy.cpp
sipa,2020-08-27 21:38:05,This case will cause the `assert(false)` below to be triggered. Is that sufficient?,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r478710190,478710190,src/script/interpreter.cpp
sipa,2020-08-27 21:39:01,"@luke-jr SHA256's blocksize is 64 bytes; if you've written less than that, there isn't anything to gain from duplicating the state (also, as @JeremyRubin says, it only runs once on startup).",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r478710629,478710629,src/script/sigcache.cpp
luke-jr,2020-08-27 22:57:28,Less expensive/faster to reject?,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r478740119,478740119,src/policy/policy.cpp
sipa,2020-08-27 22:58:52,"I'm not sure about this. BIP340 public keys are just 32-byte arrays, not abstract objects that require serialization. So there shouldn't be a concept of an ""invalid public key"" that's distinct from signature validation failure, and I'd prefer not to introduce such a concept to XOnlyPubKey.\n\nArguably, this could be an `assert(pubkey_in.size() == 32);` even. If a different length is used, it's a",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r478740581,478740581,src/script/interpreter.cpp
gmaxwell,2020-08-28 00:14:58,I don't think so: It probably shouldn't be marked non-experimental until after it deployed for activation in Bitcoin because it wouldn't be good to encourage third party users of it while it is still easy to make incompatible changes in Bitcoin (e.g. as was just done. :) ),https://github.com/bitcoin/bitcoin/pull/17977#discussion_r478762492,478762492,configure.ac
sipa,2020-08-28 00:19:08,"Or, maybe more likely: the API in libsecp256k1 may change still significantly in the near future (e.g. support for variable-length messages, batch validation, ...) even after we treat the scheme itself final.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r478763561,478763561,configure.ac
sipa,2020-08-28 00:31:49,"I tend to think of P2SH as referring to BIP16 based script hashing specifically, not the abstract concept.\n\nAnd arguably, it's not exactly true that taproot script path spending is paying to a script hash - it's paying to a tweaked public key (where the tweak happens to be indirectly a hash of a script). ",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r478766683,478766683,src/script/interpreter.h
sipa,2020-08-28 01:30:10,"I would very much like that, but I think we inevitably need a few states in it at least.\n\nThe `PrecomputedTransactionData` objects used for block validation are constructed once up front, and then initialized simultaneously with other checks in `CheckInputScripts`. This means they need some sort of ""uninitialized"" state which can detect incorrect use before initialization. A cleaner solution w",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r478781629,478781629,src/script/interpreter.cpp
sipa,2020-08-28 01:31:22,If no signature checking occurs none of the code in interpreter.cpp matters.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r478781929,478781929,src/script/interpreter.cpp
sipa,2020-08-28 01:48:03,"Done, by virtue of rebasing on master which includes #19601 now.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r478786156,478786156,src/script/interpreter.cpp
sipa,2020-08-28 01:48:47,"Addressed by changing the comments to ""Witness v1 with 32-byte program, not BIP16 P2SH-wrapped, ...""",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r478786347,478786347,src/script/interpreter.h
sipa,2020-08-28 01:48:58,"Good idea, done.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r478786391,478786391,src/script/interpreter.h
sipa,2020-08-28 01:49:05,Done.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r478786414,478786414,src/pubkey.h
sipa,2020-08-28 01:50:35,"Made a few changes here, including passing pubkey/signature as a Span (which means one less useless vector copy during signature validation). The size is now asserted to be 32 bytes (both in XOnlyPubKey (where it's required), and in CheckSchnorrSignature (which makes decisions based on the length).",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r478786843,478786843,src/script/interpreter.cpp
sipa,2020-08-28 01:50:53,"Fixed by adding ""31 zero bytes"" explicitly in the comment.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r478786925,478786925,src/script/sigcache.cpp
sipa,2020-08-28 01:51:55,"I think there are bigger footguns already if there ever was a continue (like the stack size check just above), but regardless: good idea, done.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r478787176,478787176,src/script/interpreter.cpp
sipa,2020-08-28 01:54:32,"Nice catch, I didn't realize there was a discrepancy here. As BIP342 explicitly states that CMS/CMSV behave as OP_RETURN, namely failing the script if executed, I'm not going to change semantics, but I've changed it to have a separate dedicated error code.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r478787773,478787773,src/script/interpreter.cpp
sipa,2020-08-28 01:57:07,"My thinking was initially that there wouldn't be a performance benefit, as taproot execution to the point where the annex is reached is very cheap - but then again, there may be a valid, expensive input, and another one with an annex.\n\nI've moved the annex policy rule to policy/policy.cpp (which also removes a validation flag).\n\nThis makes me wonder if we'd want the same with unknown leaf ",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r478788457,478788457,src/policy/policy.cpp
JeremyRubin,2020-08-28 03:09:16,"I think it's after this comment that the hash names began containing bip341?\n\nI don't think it's worth changing at this point, but I don't love that naming convention because it's more clear to name them based on what they are (e.g., m_prevouts_sha256 or m_prevouts_d_sha256) than to name based on a BIP, especially since 143 and 341 are digit wise reversed it tripped me up a bit when re-reviewi",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r478805764,478805764,src/script/interpreter.cpp
instagibbs,2020-08-29 01:39:51,`r = random.randrange(len(pubs))` ?,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r479591694,479591694,test/functional/feature_taproot.py
instagibbs,2020-08-29 01:40:20,`for k in range(len(pubs)):` ?,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r479591776,479591776,test/functional/feature_taproot.py
sipa,2020-08-29 02:16:55,Done.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r479595186,479595186,test/functional/feature_taproot.py
sipa,2020-08-29 02:17:04,Done.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r479595199,479595199,test/functional/feature_taproot.py
Kixunil,2020-09-02 14:59:33,"Since these names look so similar (made me confused), maybe use names without numbers to distinguish them better? Or something like `uses_bip341_taproot`?",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r482137828,482137828,src/script/interpreter.cpp
fjahr,2020-09-02 15:36:20,"nit if you retouch\n\n```suggestion\n    const int path_len = (control.size() - TAPROOT_CONTROL_BASE_SIZE) / TAPROOT_CONTROL_NODE_SIZE;\n    const XOnlyPubKey p{uint256(std::vector<unsigned char>(control.begin() + 1, control.begin() + TAPROOT_CONTROL_BASE_SIZE))};\n    const XOnlyPubKey q{uint256(program)};\n    uint256 k = (CHashWriter(HASHER_TAPLEAF) << uint8_t(control[0] & TAPROOT_LEAF_MA",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r482168422,482168422,src/script/interpreter.cpp
fjahr,2020-09-02 15:38:04,"```suggestion\nbool XOnlyPubKey::CheckPayToContract(const XOnlyPubKey& base, const uint256& hash, const bool negated) const\n```",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r482169713,482169713,src/pubkey.cpp
fjahr,2020-09-02 15:39:20,"(renaming suggested to be consistent with the name in the implementation)\n```suggestion\n    bool CheckPayToContract(const XOnlyPubKey& base, const uint256& hash, const bool negated) const;\n```",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r482170606,482170606,src/pubkey.h
Kixunil,2020-09-02 16:27:29,Would moving the `control.size()` check here be less of a footgun?,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r482202942,482202942,src/script/interpreter.cpp
Kixunil,2020-09-02 17:56:29,"This is different from BIP114 which says the max size of path must be below 1024, however `32 * 128 == 4096`\n\nIs this correct?\n\nI suppose BIP114 limit is superseded by BIP341 (which I find reasonable) but asking to be sure. (Perhaps BIP114 should be updated?)",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r482259993,482259993,src/script/interpreter.h
Kixunil,2020-09-02 19:58:16,Why not BIP8?,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r482378845,482378845,test/functional/rpc_blockchain.py
ariard,2020-09-02 23:25:07,Should be referenced in `CTxDestination` typedef.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r482596393,482596393,src/script/standard.h
ariard,2020-09-02 23:28:51,"I don't get a `feature_taproot.py` failure for this ?\n\n```\ndiff --git a/src/script/interpreter.cpp b/src/script/interpreter.cpp\nindex 053df47a2..02de07bc5 100644\n--- a/src/script/interpreter.cpp\n+++ b/src/script/interpreter.cpp\n@@ -1652,7 +1652,7 @@ bool GenericTransactionSignatureChecker<T>::CheckECDSASignature(const std::vecto\n template <class T>\n bool GenericTransactionSignatu",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r482598143,482598143,src/script/interpreter.cpp
ariard,2020-09-02 23:32:15,"Idem, is this part of the code tested non-deterministically ?\n\n```\ndiff --git a/src/script/interpreter.cpp b/src/script/interpreter.cpp\nindex 053df47a2..fcaacc152 100644\n--- a/src/script/interpreter.cpp\n+++ b/src/script/interpreter.cpp\n@@ -1653,7 +1653,7 @@ template <class T>\n bool GenericTransactionSignatureChecker<T>::CheckSchnorrSignature(Span<const unsigned char> sig, Span<cons",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r482599178,482599178,src/script/interpreter.cpp
ariard,2020-09-02 23:41:35,"Again don't get failure in `feature_taproot.py` ? What should be the prefix something like `sighash/keypath_*` ?\n\n\n```\ndiff --git a/src/script/interpreter.cpp b/src/script/interpreter.cpp\nindex 053df47a2..24ba2ac41 100644\n--- a/src/script/interpreter.cpp\n+++ b/src/script/interpreter.cpp\n@@ -1662,7 +1662,7 @@ bool GenericTransactionSignatureChecker<T>::CheckSchnorrSignature(Span<con",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r482601984,482601984,src/script/interpreter.cpp
ariard,2020-09-02 23:46:17,Technically this should be called `witnessScript` (BIP141) or just `script` (BIP341) ? `scriptPubKey` is a bit confusing as this is fed from the witness?,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r482603435,482603435,src/script/interpreter.cpp
ariard,2020-09-03 00:03:06,"I tried to tweak serializers to test that `compact_size(size of s)` is well-committed in tapleaf hash. Of course I got failure far earlier, so I was wondering if there is a way to test this in isolation ? I guess that's useless as our script ser is already used at anytime, so any error would be more than obvious.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r482608452,482608452,src/script/interpreter.cpp
ariard,2020-09-03 00:28:31,"Computation of tweaked_pubkey `Q` is guarantee to be non-malleable by a third-party such that any intentional flip of the parity bit of the control block would fail here ? Is this test somewhere, when I try to test it I got some `opsuccess/return` error ?",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r482615760,482615760,src/script/interpreter.cpp
ariard,2020-09-03 00:46:19,"Why can't we outlaw witness-with-annex from our policy ?\n\nEDIT: This is part of it as 7548827. Maybe add a reference that's is outlawed in `IsWitnessStandard`. A side-question, why OP_SUCESSx and unknown public key types aren't rejected there too to gather all witness sanitization check in one place ?",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r482623999,482623999,src/script/interpreter.cpp
ariard,2020-09-03 00:59:32,Assert altstack empty ?,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r482631236,482631236,src/script/interpreter.cpp
instagibbs,2020-09-03 01:49:34,Seems like `tapscript/emptysigs/checksig` aka script `t12` should cover this case? Confirmed it somehow doesn't.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r482644663,482644663,src/script/interpreter.cpp
ariard,2020-09-03 13:47:08,Should we assert  exclusion of scriptless (?) script versions at a higher-level like `EvalScript` or `ExecuteWitnessScript` to catch witness parsing bug where such a script wouldn't call a sig operation ?,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r482990495,482990495,src/script/interpreter.cpp
ariard,2020-09-03 14:35:48,"I think this comment is ambiguous with regards to `EvalChecksigTapscript` and BIP342 requirement. Successful could be interpreted as :\n* if signature verification is successful\n* if signature is non-empty\n\nAFAICT, the second alternative is actually what is referred by `signature check`.  Maybe add `successful non-empty signature check`",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r483027964,483027964,src/script/interpreter.h
ariard,2020-09-03 15:01:40,"I think melting a consensus check with a policy one in the same conditional is likely source to confusion for future reviewers. I'm quite sure that's already something done elsewhere but maybe we could do better by adding a `GetScriptVersionFlags(SigVersion)` called at the top of `EvalScript`. \n\nThis new function should set each consensus-compliant interpreter flags per-type of script evaluate",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r483047134,483047134,src/script/interpreter.cpp
ariard,2020-09-03 15:17:55,"Is MINIMALDATA  consensus-mandatory for `OP_CHECKSIGADD` or only part of our relay-policy like for other `CScriptNum` operators ? The spec only mentions `All CScriptNum-related behaviours of `OP_ADD` are also applicable to `OP_CHECKSIGADD"", it's a bit unclear.\n\nIn either case flipping it to `true/false` doesn't give me back any test failure.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r483058642,483058642,src/script/interpreter.cpp
ariard,2020-09-03 16:05:10,I think BIP341 footnote mentions that TAPSCRIPT's `ext_flag=1` but I don't find where it mandates that TAPROOT's one is actually `ext_flag=0`,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r483092066,483092066,src/script/interpreter.cpp
ariard,2020-09-03 16:20:29,"I don't get `feature_taproot.py` failure for this :\n\n```\ndiff --git a/src/script/interpreter.cpp b/src/script/interpreter.cpp\nindex 053df47a2..eb3847250 100644\n--- a/src/script/interpreter.cpp\n+++ b/src/script/interpreter.cpp\n@@ -1528,7 +1528,7 @@ bool SignatureHashSchnorr(uint256& hash_out, const ScriptExecutionData& execdata\n\n     // Data about the output(s)\n     if (output_t",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r483102106,483102106,src/script/interpreter.cpp
ariard,2020-09-03 16:28:56,"Does this key version is actually the one of defined 32-byte public key or it is an independent versioning ? \n\nIf it is the first option I think we should add a `m_key_version` to `ScriptExecutionData` and ensure we set it at key type detection in `ExecuteWitnessScript` to avoid hashing and public key validation going out of sync ?",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r483107386,483107386,src/script/interpreter.cpp
ariard,2020-09-03 16:53:51,"I don't get `feature_taproot.py` failure for :\n\n```\ndiff --git a/src/pubkey.cpp b/src/pubkey.cpp\nindex 111f9c10e..0163f61a2 100644\n--- a/src/pubkey.cpp\n+++ b/src/pubkey.cpp\n@@ -174,7 +174,7 @@ XOnlyPubKey::XOnlyPubKey(Span<const unsigned char> in)\n }\n \n bool XOnlyPubKey::VerifySchnorr(const uint256& msg, Span<const unsigned char> sigbytes) const {\n-    if (sigbytes.size() != ",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r483122518,483122518,src/pubkey.cpp
ariard,2020-09-03 16:57:58,Maybe precise that's invalid with regards to consensus. Or at least we enforce this as a policy rule without any tightening with regards to consensus rule.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r483125017,483125017,src/policy/policy.cpp
sipa,2020-09-04 00:31:54,I kept it out so that invalid control size can be its own error code. It's sanity checked before this function is invoked.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r483322220,483322220,src/script/interpreter.cpp
sipa,2020-09-04 00:34:13,"This is an implementation of BIP340/341/342, not BIP114. BIP341 specifies a max depth of 128 nodes, and gives a rationale why.\n\nBIP114 is a completely independent proposal, which BIP341 took some inspiration from, but it isn't compatible with in any way. You could suggest to BIP114's author that it may be retracted, but in theory, they're free to pursue activation of that as an alternative to,",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r483322759,483322759,src/script/interpreter.h
sipa,2020-09-04 00:37:53,"I think there is a bit of a misconception here: this doesn't, and doesn't intended to, implement mainchain activation. That's still up for discussion, and BIP341 states that activation is TBD.\n\nBIP9 is chosen here for regtest activation as it's easiest in the current codebase, so that the consensus changes can be tested. Mainchain activation will probably follow in a separate PR, possibly in a",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r483323690,483323690,test/functional/rpc_blockchain.py
sipa,2020-09-04 01:03:55,"Given that this is covered by a hash, this is sort of implicitly tested. The functional tests reimplement the (hopefully correctly, but please review) serialization/leaf hashing scheme, and there are tests that if the wrong leaf is used, spending fails.\n\nThe fact that there is a hash around this whole computation means that it's either right or wrong, and there is little avenue for testing sma",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r483330051,483330051,src/script/interpreter.cpp
sipa,2020-09-04 01:04:44,`spendpath/negflag` should explicitly test this already.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r483330260,483330260,src/script/interpreter.cpp
sipa,2020-09-04 01:26:27,"There was some earlier discussion about this (github's webinterface is starting to suffer from the obesity of the discussion here, so I can't find the link).\n\nI'm not sure what the best strategy is here:\n* Keeping things solely in the interpreter avoids duplicate work/complexity of detecting what type of spending is used, but means extra script validation flags.\n* Putting things in `IsWitn",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r483335562,483335562,src/script/interpreter.cpp
sipa,2020-09-04 01:33:11,"The variable to hold the altstack doesn't even exist at this point (it's local to `EvalScript`, which is invoked a bit further in this function).",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r483337198,483337198,src/script/interpreter.cpp
sipa,2020-09-04 02:23:46,"BIP341 says to use `0x00 || SigMsg(0x00, 0)` as message. The `0` there is the `ext_flag` argument.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r483349601,483349601,src/script/interpreter.cpp
sipa,2020-09-04 03:52:09,"Good idea, done.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r483370057,483370057,src/script/interpreter.cpp
sipa,2020-09-04 03:52:37,Done.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r483370162,483370162,src/script/standard.h
sipa,2020-09-04 03:52:52,Done.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r483370218,483370218,src/script/interpreter.cpp
sipa,2020-09-04 03:53:14,"Changed to `parity` in both .h and .cpp, as that's the name of the libsecp256k1 function.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r483370332,483370332,src/pubkey.h
sipa,2020-09-04 05:26:23,"Great catch. There were no tests at all with signatures with unusual lengths, so I've added a number of them. `tapscript/emptysigs/checksig` didn't exercise this, as empty signatures are dealt with specially in script path spending. I've added comments to explain this.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r483394286,483394286,src/script/interpreter.cpp
sipa,2020-09-04 05:28:37,"I've changed this to an assert. You can't do BIP340 signature verification with keys of length different than 32, and as both call sites already enforce this, it seems better to leave the responsibility for key length checking there.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r483394932,483394932,src/script/interpreter.cpp
sipa,2020-09-04 05:29:02,I've restructed this a bit. It should be covered by new tests.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r483395019,483395019,src/script/interpreter.cpp
sipa,2020-09-04 05:29:37,I've added an extra commit that renames the variable. It was just wrong to call it `scriptPubKey`.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r483395178,483395178,src/script/interpreter.cpp
sipa,2020-09-04 05:30:53,"I've added a few more asserts (I'm using the terminology ""key path spending"", fwiw).",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r483395546,483395546,src/script/interpreter.cpp
sipa,2020-09-04 05:31:15,"Good point, done. That also matches the BIP.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r483395636,483395636,src/script/interpreter.h
sipa,2020-09-04 05:32:27,"I don't like the idea of changing script validation flags based on context. It might be ok here, but in general that gets complex very quickly - things could even start interacting.\n\nI've just added a comment to explain this. What do you think?",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r483395943,483395943,src/script/interpreter.cpp
sipa,2020-09-04 05:34:21,"MINIMALDATA is purely a policy rule, and those are out of scope for BIP341/BIP342. It's not consensus, but apart from that, this behavior isn't specified by the BIPs.\n\nI've added a test that should exercise non-minimal inputs to `OP_CHECKSIGADD`.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r483396437,483396437,src/script/interpreter.cpp
sipa,2020-09-04 05:35:51,"Nice catch, this one was harder to address. I've added support in the test framework for specifying that a particular spending test requires a mismatching output (so the number of outputs <= input position), shuffling inputs around to accomplish that.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r483396890,483396890,src/script/interpreter.cpp
sipa,2020-09-04 05:39:16,"It's intended to be used for future key versions. That means it can't be in `ScriptExecutionData` which is shared for an entire script execution (and one script could contain multiple key versions).\n\nI've tried to clarify this by making `key_version` an explicit argument to `SignatureHashSchnorr` (but with an assert that it's zero). This allows passing it down from `CheckSchnorrSignature`, whi",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r483397855,483397855,src/script/interpreter.cpp
sipa,2020-09-04 05:40:14,"I've changed the `sigbytes` length check to an assert. The `msg` length check was just stupid; it's a `uint256`, its length is always 32.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r483398114,483398114,src/pubkey.cpp
sipa,2020-09-04 05:40:23,Done.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r483398175,483398175,src/policy/policy.cpp
ariard,2020-09-04 19:16:21,"Okay, bookmarked to look on functional tests serializer correctness during next round of review.\n\n> I'm happy to try adding a test that explicitly tests spending with an incorrectly hashed leaf, but I don't think it adds much.\n\nI think we agree here. I expect serialization correctness to be already covered on its own but not that we test any new invocation of them in consensus code.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r483804762,483804762,src/script/interpreter.cpp
ariard,2020-09-04 19:39:26,"It depends on how you define context, does it include `sigversion` parameter ? BIP342 introduction presents well the script rules hierarchy and that would be better if we could encode it in clean code paths, a ""flat"" flag matrix is obviously harder to reason on.\n\nI think added comment is good enough for now, I guess this conversation belong to the previous, wider one on refactoring/duplicating",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r483813708,483813708,src/script/interpreter.cpp
ariard,2020-09-04 20:05:19,"I personally lean towards a clean separation between policy and consensus. You need to duplicate detection anyway both at relay and validation, what we may avoid I hope is having twice the same parsing logic. Parsing can be unique and interpretation according to consensus or policy ?\n\nAnyway, it sounds costly in refactoring, I think that's a wider discussion to have so opened https://github.co",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r483823251,483823251,src/script/interpreter.cpp
sipa,2020-09-04 20:20:03,"@ariard Yes, I agree conceptually with better separation between consensus and policy implementation of script (I myself suggested splitting CScript in a minimal consensus implementation, and a more featureful separate one for everything else - policy and more), but I don't think that's relevant to the discussion here.\n\nEven if we have a separate script interpreter for consensus and one for po",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r483828455,483828455,src/script/interpreter.cpp
Kixunil,2020-09-07 16:46:53,Good point.,https://github.com/bitcoin/bitcoin/pull/17977#discussion_r484520040,484520040,src/script/interpreter.cpp
sipa,2020-09-14 04:26:48,"> nit: SCRIPT_VERIFY_MINIMALIF you forgot the IF in new comment.\n\nFixed.",https://github.com/bitcoin/bitcoin/pull/17977#discussion_r487644680,487644680,src/script/interpreter.cpp
