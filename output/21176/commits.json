[
  {
    "sha": "0d96470bcabc4d90d095bd08a2c3abb38fef1fc2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZDk2NDcwYmNhYmM0ZDkwZDA5NWJkMDhhMmMzYWJiMzhmZWYxZmMy",
    "commit": {
      "author": {
        "name": "Martin Ankerl",
        "email": "martin.ankerl@gmail.com",
        "date": "2021-02-14T21:44:42Z"
      },
      "committer": {
        "name": "Martin Ankerl",
        "email": "martin.ankerl@gmail.com",
        "date": "2021-02-14T22:06:48Z"
      },
      "message": "Improve speed of Base58 Encoding\n\nThis modifies `DecodeBase58` and `EncodeBase58` by processing multiple input bytes at once. For `DecodeBase58` we can take 9 bytes at once,\nand for `EncodeBase58` 7. This reduces the number of calls of the inner conversion loop.\n\nBenchmark results:\n\n* 37.78 -> 13.73 ns/byte for `Base58Decode`, ~2.8 times faster.\n* 28.81 -> 7.02 ns/byte for `EncodeBase58`, ~4.1 times faster.\n\nNote that I tried to improve `blockToJSON` with this change, but the difference there is not really significant. This optimization might still be\nrelevant though for e.g. `listunspents`, see #7656",
      "tree": {
        "sha": "820269e58d5950b0a229880a52a998a5c559db4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/820269e58d5950b0a229880a52a998a5c559db4f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0d96470bcabc4d90d095bd08a2c3abb38fef1fc2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d96470bcabc4d90d095bd08a2c3abb38fef1fc2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0d96470bcabc4d90d095bd08a2c3abb38fef1fc2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d96470bcabc4d90d095bd08a2c3abb38fef1fc2/comments",
    "author": {
      "login": "martinus",
      "id": 14386,
      "node_id": "MDQ6VXNlcjE0Mzg2",
      "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/martinus",
      "html_url": "https://github.com/martinus",
      "followers_url": "https://api.github.com/users/martinus/followers",
      "following_url": "https://api.github.com/users/martinus/following{/other_user}",
      "gists_url": "https://api.github.com/users/martinus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/martinus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
      "organizations_url": "https://api.github.com/users/martinus/orgs",
      "repos_url": "https://api.github.com/users/martinus/repos",
      "events_url": "https://api.github.com/users/martinus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/martinus/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "martinus",
      "id": 14386,
      "node_id": "MDQ6VXNlcjE0Mzg2",
      "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/martinus",
      "html_url": "https://github.com/martinus",
      "followers_url": "https://api.github.com/users/martinus/followers",
      "following_url": "https://api.github.com/users/martinus/following{/other_user}",
      "gists_url": "https://api.github.com/users/martinus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/martinus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
      "organizations_url": "https://api.github.com/users/martinus/orgs",
      "repos_url": "https://api.github.com/users/martinus/repos",
      "events_url": "https://api.github.com/users/martinus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/martinus/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "df8892dc9f05dbc3589457ed8ce080ca9cb4a594",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df8892dc9f05dbc3589457ed8ce080ca9cb4a594",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/df8892dc9f05dbc3589457ed8ce080ca9cb4a594"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 30,
      "deletions": 10
    },
    "files": [
      {
        "sha": "29a7865613a90b1c5791be78cbaa2ae7a113aa93",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 10,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d96470bcabc4d90d095bd08a2c3abb38fef1fc2/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d96470bcabc4d90d095bd08a2c3abb38fef1fc2/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=0d96470bcabc4d90d095bd08a2c3abb38fef1fc2",
        "patch": "@@ -54,20 +54,30 @@ static const int8_t mapBase58[256] = {\n     // Process the characters.\n     static_assert(sizeof(mapBase58)/sizeof(mapBase58[0]) == 256, \"mapBase58.size() should be 256\"); // guarantee not out of range\n     while (*psz && !IsSpace(*psz)) {\n-        // Decode base58 character\n-        int carry = mapBase58[(uint8_t)*psz];\n-        if (carry == -1)  // Invalid b58 character\n-            return false;\n+        // Decode at most 9 base58 characters at once without risking an overflow. The largest value carry\n+        // can possibly have is 58^9-1 + 58^9 * 0xFF = 0x1A63'6A90'B079'FFFF, which fits into a 64bit number.\n+        uint64_t carry = 0;\n+        int numBytes = 0;\n+        uint64_t multiplier = 1;\n+        while (*psz && !IsSpace(*psz) && numBytes < 9) {\n+            auto ch = mapBase58[(uint8_t)*psz];\n+            if (ch == -1)  // Invalid b58 character\n+                return false;\n+            carry = carry * 58 + ch;\n+            multiplier *= 58;\n+            ++numBytes;\n+            psz++;\n+        }\n+\n         int i = 0;\n         for (std::vector<unsigned char>::reverse_iterator it = b256.rbegin(); (carry != 0 || i < length) && (it != b256.rend()); ++it, ++i) {\n-            carry += 58 * (*it);\n+            carry += multiplier * (*it);\n             *it = carry % 256;\n             carry /= 256;\n         }\n         assert(carry == 0);\n         length = i;\n         if (length + zeroes > max_ret_len) return false;\n-        psz++;\n     }\n     // Skip trailing spaces.\n     while (IsSpace(*psz))\n@@ -98,18 +108,28 @@ std::string EncodeBase58(Span<const unsigned char> input)\n     std::vector<unsigned char> b58(size);\n     // Process the bytes.\n     while (input.size() > 0) {\n-        int carry = input[0];\n+        // Encode at most 7 input bytes at once without risking an overflow. The largest value carry\n+        // can possibly have is by having only 0xFF as input bytes, and 0x39 in b58:\n+        // 256^7-1 + 256^7 * 0x39 = 0x39FF'FFFF'FFFF'FFFF, which still fits into the 64bit.\n+        uint64_t carry = 0;\n+        int numBytes = 0;\n+        uint64_t multiplier = 1;\n+        while (input.size() > 0 && numBytes < 7) {\n+            carry = carry * 256 + input[0];\n+            multiplier *= 256;\n+            ++numBytes;\n+            input = input.subspan(1);\n+        }\n         int i = 0;\n-        // Apply \"b58 = b58 * 256 + ch\".\n+        // Apply \"b58 = b58 * 256^numBytes + carry\".\n         for (std::vector<unsigned char>::reverse_iterator it = b58.rbegin(); (carry != 0 || i < length) && (it != b58.rend()); it++, i++) {\n-            carry += 256 * (*it);\n+            carry += multiplier * (*it);\n             *it = carry % 58;\n             carry /= 58;\n         }\n \n         assert(carry == 0);\n         length = i;\n-        input = input.subspan(1);\n     }\n     // Skip leading zeroes in base58 result.\n     std::vector<unsigned char>::iterator it = b58.begin() + (size - length);"
      }
    ]
  }
]