[
  {
    "sha": "df765a484d84702f066e127813fa45a7d440a957",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZjc2NWE0ODRkODQ3MDJmMDY2ZTEyNzgxM2ZhNDVhN2Q0NDBhOTU3",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-08-26T23:21:25Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-09-09T19:07:42Z"
      },
      "message": "tests: rpc_fundrawtx lock to UTXO types\n\nFor some of the tests within rpc_fundrawtx, there is the expectation\nthat two independent calls to coin selection RPCs will use the same type\nof UTXO. This is not necessarily guaranteed, so to make sure it is, use\nlockunspent prior to those tests.",
      "tree": {
        "sha": "57622a170e903f2b1b3f87aa4e0565bf4c0a847e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/57622a170e903f2b1b3f87aa4e0565bf4c0a847e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df765a484d84702f066e127813fa45a7d440a957",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df765a484d84702f066e127813fa45a7d440a957",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/df765a484d84702f066e127813fa45a7d440a957",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df765a484d84702f066e127813fa45a7d440a957/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d2dd1697cee9d6d0f13f9cb351bce84eaa4a72b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2dd1697cee9d6d0f13f9cb351bce84eaa4a72b4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d2dd1697cee9d6d0f13f9cb351bce84eaa4a72b4"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 45,
      "deletions": 0
    },
    "files": [
      {
        "sha": "17102f84d4a668bc3a39ac568ec42cd2a23b9030",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 45,
        "deletions": 0,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df765a484d84702f066e127813fa45a7d440a957/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df765a484d84702f066e127813fa45a7d440a957/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=df765a484d84702f066e127813fa45a7d440a957",
        "patch": "@@ -47,7 +47,40 @@ def setup_network(self):\n         self.connect_nodes(0, 2)\n         self.connect_nodes(0, 3)\n \n+    def lock_outputs_type(self, wallet, outputtype):\n+        \"\"\"\n+        Only allow UTXOs of the given type\n+        \"\"\"\n+        if outputtype in [\"legacy\", \"p2pkh\", \"pkh\"]:\n+            prefixes = [\"pkh(\", \"sh(multi(\"]\n+        elif outputtype in [\"p2sh-segwit\", \"sh_wpkh\"]:\n+            prefixes = [\"sh(wpkh(\", \"sh(wsh(\"]\n+        elif outputtype in [\"bech32\", \"wpkh\"]:\n+            prefixes = [\"wpkh(\", \"wsh(\"]\n+        else:\n+            assert False, f\"Unknown output type {outputtype}\"\n+\n+        to_lock = []\n+        for utxo in wallet.listunspent():\n+            if \"desc\" in utxo:\n+                for prefix in prefixes:\n+                    if utxo[\"desc\"].startswith(prefix):\n+                        to_lock.append({\"txid\": utxo[\"txid\"], \"vout\": utxo[\"vout\"]})\n+        wallet.lockunspent(False, to_lock)\n+\n+    def unlock_utxos(self, wallet):\n+        \"\"\"\n+        Unlock all UTXOs except the watchonly one\n+        \"\"\"\n+        to_keep = []\n+        if self.watchonly_txid is not None and self.watchonly_vout is not None:\n+            to_keep.append({\"txid\": self.watchonly_txid, \"vout\": self.watchonly_vout})\n+        wallet.lockunspent(True)\n+        wallet.lockunspent(False, to_keep)\n+\n     def run_test(self):\n+        self.watchonly_txid = None\n+        self.watchonly_vout = None\n         self.log.info(\"Connect nodes, set fees, generate blocks, and sync\")\n         self.min_relay_tx_fee = self.nodes[0].getnetworkinfo()['relayfee']\n         # This test is not meant to test fee estimation and we'd like\n@@ -373,6 +406,7 @@ def test_invalid_input(self):\n     def test_fee_p2pkh(self):\n         \"\"\"Compare fee of a standard pubkeyhash transaction.\"\"\"\n         self.log.info(\"Test fundrawtxn p2pkh fee\")\n+        self.lock_outputs_type(self.nodes[0], \"p2pkh\")\n         inputs = []\n         outputs = {self.nodes[1].getnewaddress():1.1}\n         rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n@@ -386,9 +420,12 @@ def test_fee_p2pkh(self):\n         feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee)\n         assert feeDelta >= 0 and feeDelta <= self.fee_tolerance\n \n+        self.unlock_utxos(self.nodes[0])\n+\n     def test_fee_p2pkh_multi_out(self):\n         \"\"\"Compare fee of a standard pubkeyhash transaction with multiple outputs.\"\"\"\n         self.log.info(\"Test fundrawtxn p2pkh fee with multiple outputs\")\n+        self.lock_outputs_type(self.nodes[0], \"p2pkh\")\n         inputs = []\n         outputs = {\n             self.nodes[1].getnewaddress():1.1,\n@@ -409,8 +446,11 @@ def test_fee_p2pkh_multi_out(self):\n         feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee)\n         assert feeDelta >= 0 and feeDelta <= self.fee_tolerance\n \n+        self.unlock_utxos(self.nodes[0])\n+\n     def test_fee_p2sh(self):\n         \"\"\"Compare fee of a 2-of-2 multisig p2sh transaction.\"\"\"\n+        self.lock_outputs_type(self.nodes[0], \"p2pkh\")\n         # Create 2-of-2 addr.\n         addr1 = self.nodes[1].getnewaddress()\n         addr2 = self.nodes[1].getnewaddress()\n@@ -433,9 +473,12 @@ def test_fee_p2sh(self):\n         feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee)\n         assert feeDelta >= 0 and feeDelta <= self.fee_tolerance\n \n+        self.unlock_utxos(self.nodes[0])\n+\n     def test_fee_4of5(self):\n         \"\"\"Compare fee of a standard pubkeyhash transaction.\"\"\"\n         self.log.info(\"Test fundrawtxn fee with 4-of-5 addresses\")\n+        self.lock_outputs_type(self.nodes[0], \"p2pkh\")\n \n         # Create 4-of-5 addr.\n         addr1 = self.nodes[1].getnewaddress()\n@@ -474,6 +517,8 @@ def test_fee_4of5(self):\n         feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee)\n         assert feeDelta >= 0 and feeDelta <= self.fee_tolerance\n \n+        self.unlock_utxos(self.nodes[0])\n+\n     def test_spend_2of2(self):\n         \"\"\"Spend a 2-of-2 multisig transaction over fundraw.\"\"\"\n         self.log.info(\"Test fundpsbt spending 2-of-2 multisig\")"
      }
    ]
  },
  {
    "sha": "a165bfbe44b4db3a40b8d1ba8095035367c932a7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMTY1YmZiZTQ0YjRkYjNhNDBiOGQxYmE4MDk1MDM1MzY3YzkzMmE3",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-08-27T00:32:18Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-09-09T19:07:43Z"
      },
      "message": "tests: rpc_fundrawtx use specific inputs for unavailable change test\n\nFor the test that checks that there is no error when change is\nunavailable but change is also not needed, use specific UTXOs so that\nSRD does not cause this to fail when it chooses random inputs.",
      "tree": {
        "sha": "b29373f9af14395427b879e87c5084d3147560fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b29373f9af14395427b879e87c5084d3147560fc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a165bfbe44b4db3a40b8d1ba8095035367c932a7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a165bfbe44b4db3a40b8d1ba8095035367c932a7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a165bfbe44b4db3a40b8d1ba8095035367c932a7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a165bfbe44b4db3a40b8d1ba8095035367c932a7/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "df765a484d84702f066e127813fa45a7d440a957",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df765a484d84702f066e127813fa45a7d440a957",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/df765a484d84702f066e127813fa45a7d440a957"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 6,
      "deletions": 3
    },
    "files": [
      {
        "sha": "5264e501e0402462c45148dcba1c93567edcd4e8",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a165bfbe44b4db3a40b8d1ba8095035367c932a7/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a165bfbe44b4db3a40b8d1ba8095035367c932a7/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=a165bfbe44b4db3a40b8d1ba8095035367c932a7",
        "patch": "@@ -587,15 +587,18 @@ def test_locked_wallet(self):\n         # Drain the keypool.\n         self.nodes[1].getnewaddress()\n         self.nodes[1].getrawchangeaddress()\n-        inputs = []\n-        outputs = {self.nodes[0].getnewaddress():1.19999500}\n+\n+        # Choose 2 inputs\n+        inputs = self.nodes[1].listunspent()[0:2]\n+        value = sum(inp[\"amount\"] for inp in inputs) - Decimal(\"0.00000500\") # Pay a 500 sat fee\n+        outputs = {self.nodes[0].getnewaddress():value}\n         rawtx = self.nodes[1].createrawtransaction(inputs, outputs)\n         # fund a transaction that does not require a new key for the change output\n         self.nodes[1].fundrawtransaction(rawtx)\n \n         # fund a transaction that requires a new key for the change output\n         # creating the key must be impossible because the wallet is locked\n-        outputs = {self.nodes[0].getnewaddress():1.1}\n+        outputs = {self.nodes[0].getnewaddress():value - Decimal(\"0.1\")}\n         rawtx = self.nodes[1].createrawtransaction(inputs, outputs)\n         assert_raises_rpc_error(-4, \"Transaction needs a change address, but we can't generate it.\", self.nodes[1].fundrawtransaction, rawtx)\n "
      }
    ]
  },
  {
    "sha": "59ba7d2861359f19fa740da9daad1a199409583f",
    "node_id": "C_kwDOABII59oAKDU5YmE3ZDI4NjEzNTlmMTlmYTc0MGRhOWRhYWQxYTE5OTQwOTU4M2Y",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-08-27T00:33:22Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-09-23T17:32:41Z"
      },
      "message": "tests: rpc_fundrawtx better test for UTXO inclusion with include_unsafe\n\nDon't assume that specific inputs are going to be used when they aren't\nspecified explicitly.\n\nAlso fixes a bug in the include_unsafe test where after the inputs\nconfirm, include_unsafe should be set to False rather than True.",
      "tree": {
        "sha": "367df1b6e1d58066239fd990314855a011f29722",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/367df1b6e1d58066239fd990314855a011f29722"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/59ba7d2861359f19fa740da9daad1a199409583f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59ba7d2861359f19fa740da9daad1a199409583f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/59ba7d2861359f19fa740da9daad1a199409583f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59ba7d2861359f19fa740da9daad1a199409583f/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a165bfbe44b4db3a40b8d1ba8095035367c932a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a165bfbe44b4db3a40b8d1ba8095035367c932a7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a165bfbe44b4db3a40b8d1ba8095035367c932a7"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "cda0ae0eeb6a88c29e3f9eebbfcb22288da73951",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59ba7d2861359f19fa740da9daad1a199409583f/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59ba7d2861359f19fa740da9daad1a199409583f/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=59ba7d2861359f19fa740da9daad1a199409583f",
        "patch": "@@ -992,31 +992,31 @@ def test_include_unsafe(self):\n \n         # We receive unconfirmed funds from external keys (unsafe outputs).\n         addr = wallet.getnewaddress()\n-        txid1 = self.nodes[2].sendtoaddress(addr, 6)\n-        txid2 = self.nodes[2].sendtoaddress(addr, 4)\n-        self.sync_all()\n-        vout1 = find_vout_for_address(wallet, txid1, addr)\n-        vout2 = find_vout_for_address(wallet, txid2, addr)\n+        inputs = []\n+        for i in range(0, 2):\n+            txid = self.nodes[2].sendtoaddress(addr, 5)\n+            self.sync_mempools()\n+            vout = find_vout_for_address(wallet, txid, addr)\n+            inputs.append((txid, vout))\n \n         # Unsafe inputs are ignored by default.\n-        rawtx = wallet.createrawtransaction([], [{self.nodes[2].getnewaddress(): 5}])\n+        rawtx = wallet.createrawtransaction([], [{self.nodes[2].getnewaddress(): 7.5}])\n         assert_raises_rpc_error(-4, \"Insufficient funds\", wallet.fundrawtransaction, rawtx)\n \n         # But we can opt-in to use them for funding.\n         fundedtx = wallet.fundrawtransaction(rawtx, {\"include_unsafe\": True})\n         tx_dec = wallet.decoderawtransaction(fundedtx['hex'])\n-        assert any([txin['txid'] == txid1 and txin['vout'] == vout1 for txin in tx_dec['vin']])\n+        assert all((txin[\"txid\"], txin[\"vout\"]) in inputs for txin in tx_dec[\"vin\"])\n         signedtx = wallet.signrawtransactionwithwallet(fundedtx['hex'])\n-        wallet.sendrawtransaction(signedtx['hex'])\n+        assert wallet.testmempoolaccept([signedtx['hex']])[0][\"allowed\"]\n \n         # And we can also use them once they're confirmed.\n         self.generate(self.nodes[0], 1)\n-        rawtx = wallet.createrawtransaction([], [{self.nodes[2].getnewaddress(): 3}])\n-        fundedtx = wallet.fundrawtransaction(rawtx, {\"include_unsafe\": True})\n+        fundedtx = wallet.fundrawtransaction(rawtx, {\"include_unsafe\": False})\n         tx_dec = wallet.decoderawtransaction(fundedtx['hex'])\n-        assert any([txin['txid'] == txid2 and txin['vout'] == vout2 for txin in tx_dec['vin']])\n+        assert all((txin[\"txid\"], txin[\"vout\"]) in inputs for txin in tx_dec[\"vin\"])\n         signedtx = wallet.signrawtransactionwithwallet(fundedtx['hex'])\n-        wallet.sendrawtransaction(signedtx['hex'])\n+        assert wallet.testmempoolaccept([signedtx['hex']])[0][\"allowed\"]\n \n     def test_22670(self):\n         # In issue #22670, it was observed that ApproximateBestSubset may"
      }
    ]
  },
  {
    "sha": "b77885f13e480304085c654f1b948b20bba63452",
    "node_id": "C_kwDOABII59oAKGI3Nzg4NWYxM2U0ODAzMDQwODVjNjU0ZjFiOTQ4YjIwYmJhNjM0NTI",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-11-06T21:09:36Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-09-23T17:33:25Z"
      },
      "message": "tests: wallet_txn explicilty specify inputs\n\nInstead of relying on coin selection to deterministically choose\nthe correct inputs to use, just specify them explicitly and use\nthe raw transaction RPCs.",
      "tree": {
        "sha": "c3163ce174b34ec23d7cc05af91b4578465d8395",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c3163ce174b34ec23d7cc05af91b4578465d8395"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b77885f13e480304085c654f1b948b20bba63452",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b77885f13e480304085c654f1b948b20bba63452",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b77885f13e480304085c654f1b948b20bba63452",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b77885f13e480304085c654f1b948b20bba63452/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "59ba7d2861359f19fa740da9daad1a199409583f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59ba7d2861359f19fa740da9daad1a199409583f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/59ba7d2861359f19fa740da9daad1a199409583f"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 22,
      "deletions": 4
    },
    "files": [
      {
        "sha": "7f178d7d46049938a5c4d966b58515e12753927e",
        "filename": "test/functional/wallet_txn_clone.py",
        "status": "modified",
        "additions": 11,
        "deletions": 2,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b77885f13e480304085c654f1b948b20bba63452/test/functional/wallet_txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b77885f13e480304085c654f1b948b20bba63452/test/functional/wallet_txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_clone.py?ref=b77885f13e480304085c654f1b948b20bba63452",
        "patch": "@@ -7,6 +7,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n+    find_vout_for_address\n )\n from test_framework.messages import (\n     COIN,\n@@ -33,6 +34,13 @@ def setup_network(self):\n         super().setup_network()\n         self.disconnect_nodes(1, 2)\n \n+    def spend_txid(self, txid, vout, outputs):\n+        inputs = [{\"txid\": txid, \"vout\": vout}]\n+        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n+        tx = self.nodes[0].fundrawtransaction(tx)\n+        tx = self.nodes[0].signrawtransactionwithwallet(tx['hex'])\n+        return self.nodes[0].sendrawtransaction(tx['hex'])\n+\n     def run_test(self):\n         if self.options.segwit:\n             output_type = \"p2sh-segwit\"\n@@ -49,6 +57,7 @@ def run_test(self):\n         node0_address1 = self.nodes[0].getnewaddress(address_type=output_type)\n         node0_txid1 = self.nodes[0].sendtoaddress(node0_address1, 1219)\n         node0_tx1 = self.nodes[0].gettransaction(node0_txid1)\n+        self.nodes[0].lockunspent(False, [{\"txid\":node0_txid1, \"vout\": find_vout_for_address(self.nodes[0], node0_txid1, node0_address1)}])\n \n         node0_address2 = self.nodes[0].getnewaddress(address_type=output_type)\n         node0_txid2 = self.nodes[0].sendtoaddress(node0_address2, 29)\n@@ -61,8 +70,8 @@ def run_test(self):\n         node1_address = self.nodes[1].getnewaddress()\n \n         # Send tx1, and another transaction tx2 that won't be cloned\n-        txid1 = self.nodes[0].sendtoaddress(node1_address, 40)\n-        txid2 = self.nodes[0].sendtoaddress(node1_address, 20)\n+        txid1 = self.spend_txid(node0_txid1, find_vout_for_address(self.nodes[0], node0_txid1, node0_address1), {node1_address: 40})\n+        txid2 = self.spend_txid(node0_txid2, find_vout_for_address(self.nodes[0], node0_txid2, node0_address2), {node1_address: 20})\n \n         # Construct a clone of tx1, to be malleated\n         rawtx1 = self.nodes[0].getrawtransaction(txid1, 1)"
      },
      {
        "sha": "150e4083b9e9100e25e40e1eb4dacf051f431635",
        "filename": "test/functional/wallet_txn_doublespend.py",
        "status": "modified",
        "additions": 11,
        "deletions": 2,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b77885f13e480304085c654f1b948b20bba63452/test/functional/wallet_txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b77885f13e480304085c654f1b948b20bba63452/test/functional/wallet_txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_doublespend.py?ref=b77885f13e480304085c654f1b948b20bba63452",
        "patch": "@@ -9,6 +9,7 @@\n from test_framework.util import (\n     assert_equal,\n     find_output,\n+    find_vout_for_address\n )\n \n \n@@ -29,6 +30,13 @@ def setup_network(self):\n         super().setup_network()\n         self.disconnect_nodes(1, 2)\n \n+    def spend_txid(self, txid, vout, outputs):\n+        inputs = [{\"txid\": txid, \"vout\": vout}]\n+        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n+        tx = self.nodes[0].fundrawtransaction(tx)\n+        tx = self.nodes[0].signrawtransactionwithwallet(tx['hex'])\n+        return self.nodes[0].sendrawtransaction(tx['hex'])\n+\n     def run_test(self):\n         # All nodes should start with 1,250 BTC:\n         starting_balance = 1250\n@@ -47,6 +55,7 @@ def run_test(self):\n         node0_address_foo = self.nodes[0].getnewaddress()\n         fund_foo_txid = self.nodes[0].sendtoaddress(node0_address_foo, 1219)\n         fund_foo_tx = self.nodes[0].gettransaction(fund_foo_txid)\n+        self.nodes[0].lockunspent(False, [{\"txid\":fund_foo_txid, \"vout\": find_vout_for_address(self.nodes[0], fund_foo_txid, node0_address_foo)}])\n \n         node0_address_bar = self.nodes[0].getnewaddress()\n         fund_bar_txid = self.nodes[0].sendtoaddress(node0_address_bar, 29)\n@@ -77,8 +86,8 @@ def run_test(self):\n         assert_equal(doublespend[\"complete\"], True)\n \n         # Create two spends using 1 50 BTC coin each\n-        txid1 = self.nodes[0].sendtoaddress(node1_address, 40)\n-        txid2 = self.nodes[0].sendtoaddress(node1_address, 20)\n+        txid1 = self.spend_txid(fund_foo_txid, find_vout_for_address(self.nodes[0], fund_foo_txid, node0_address_foo), {node1_address: 40})\n+        txid2 = self.spend_txid(fund_bar_txid, find_vout_for_address(self.nodes[0], fund_bar_txid, node0_address_bar), {node1_address: 20})\n \n         # Have node0 mine a block:\n         if (self.options.mine_block):"
      }
    ]
  },
  {
    "sha": "2ad3b5d2ad03f781f564ee697ef11e18b2edcea3",
    "node_id": "C_kwDOABII59oAKDJhZDNiNWQyYWQwM2Y3ODFmNTY0ZWU2OTdlZjExZTE4YjJlZGNlYTM",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-09-02T19:25:13Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-09-23T17:33:25Z"
      },
      "message": "tests: wallet_basic lock needed unspents\n\nTo avoid accidentally spending UTXOs that are needed later in the test,\nlock those UTXOs after they're creation.",
      "tree": {
        "sha": "250e46d1a212df832b47e71edd021506022c39e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/250e46d1a212df832b47e71edd021506022c39e9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ad3b5d2ad03f781f564ee697ef11e18b2edcea3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ad3b5d2ad03f781f564ee697ef11e18b2edcea3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2ad3b5d2ad03f781f564ee697ef11e18b2edcea3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ad3b5d2ad03f781f564ee697ef11e18b2edcea3/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b77885f13e480304085c654f1b948b20bba63452",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b77885f13e480304085c654f1b948b20bba63452",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b77885f13e480304085c654f1b948b20bba63452"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "950dd8269911d710463e263abed57e8bcea005b4",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ad3b5d2ad03f781f564ee697ef11e18b2edcea3/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ad3b5d2ad03f781f564ee697ef11e18b2edcea3/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=2ad3b5d2ad03f781f564ee697ef11e18b2edcea3",
        "patch": "@@ -13,6 +13,7 @@\n     assert_equal,\n     assert_fee_amount,\n     assert_raises_rpc_error,\n+    find_vout_for_address,\n )\n from test_framework.wallet_util import test_address\n \n@@ -427,6 +428,9 @@ def run_test(self):\n             # 1. Send some coins to generate new UTXO\n             address_to_import = self.nodes[2].getnewaddress()\n             txid = self.nodes[0].sendtoaddress(address_to_import, 1)\n+            self.sync_mempools(self.nodes[0:3])\n+            vout = find_vout_for_address(self.nodes[2], txid, address_to_import)\n+            self.nodes[2].lockunspent(False, [{\"txid\": txid, \"vout\": vout}])\n             self.generate(self.nodes[0], 1)\n             self.sync_all(self.nodes[0:3])\n "
      }
    ]
  },
  {
    "sha": "8bf789b4b4b26082aea1d91c4d7aa8b01aedfdcf",
    "node_id": "C_kwDOABII59oAKDhiZjc4OWI0YjRiMjYwODJhZWExZDkxYzRkN2FhOGIwMWFlZGZkY2Y",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-11-06T19:35:11Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-09-23T17:33:25Z"
      },
      "message": "Add SelectCoinsSRD function",
      "tree": {
        "sha": "5b7e6d05db8d18d78a1dd02c420ac23b3454d5e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5b7e6d05db8d18d78a1dd02c420ac23b3454d5e9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8bf789b4b4b26082aea1d91c4d7aa8b01aedfdcf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8bf789b4b4b26082aea1d91c4d7aa8b01aedfdcf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8bf789b4b4b26082aea1d91c4d7aa8b01aedfdcf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8bf789b4b4b26082aea1d91c4d7aa8b01aedfdcf/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2ad3b5d2ad03f781f564ee697ef11e18b2edcea3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ad3b5d2ad03f781f564ee697ef11e18b2edcea3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2ad3b5d2ad03f781f564ee697ef11e18b2edcea3"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 37,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d2f30abf23ab9bb785c64d9cba199d934210dd1d",
        "filename": "src/wallet/coinselection.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8bf789b4b4b26082aea1d91c4d7aa8b01aedfdcf/src/wallet/coinselection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8bf789b4b4b26082aea1d91c4d7aa8b01aedfdcf/src/wallet/coinselection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.cpp?ref=8bf789b4b4b26082aea1d91c4d7aa8b01aedfdcf",
        "patch": "@@ -5,9 +5,11 @@\n #include <wallet/coinselection.h>\n \n #include <policy/feerate.h>\n+#include <util/check.h>\n #include <util/system.h>\n #include <util/moneystr.h>\n \n+#include <numeric>\n #include <optional>\n \n // Descending order comparator\n@@ -168,6 +170,30 @@ bool SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool, const CAmount& selectio\n     return true;\n }\n \n+std::optional<std::pair<std::set<CInputCoin>, CAmount>> SelectCoinsSRD(const std::vector<OutputGroup>& utxo_pool, CAmount target_value)\n+{\n+    std::set<CInputCoin> out_set;\n+    CAmount value_ret = 0;\n+\n+    std::vector<size_t> indexes;\n+    indexes.resize(utxo_pool.size());\n+    std::iota(indexes.begin(), indexes.end(), 0);\n+    Shuffle(indexes.begin(), indexes.end(), FastRandomContext());\n+\n+    CAmount selected_eff_value = 0;\n+    for (const size_t i : indexes) {\n+        const OutputGroup& group = utxo_pool.at(i);\n+        Assume(group.GetSelectionAmount() > 0);\n+        selected_eff_value += group.GetSelectionAmount();\n+        value_ret += group.m_value;\n+        util::insert(out_set, group.m_outputs);\n+        if (selected_eff_value >= target_value) {\n+            return std::make_pair(out_set, value_ret);\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n static void ApproximateBestSubset(const std::vector<OutputGroup>& groups, const CAmount& nTotalLower, const CAmount& nTargetValue,\n                                   std::vector<char>& vfBest, CAmount& nBest, int iterations = 1000)\n {"
      },
      {
        "sha": "0f07017ef297a8b6ea1441a1614dc69388ae42dd",
        "filename": "src/wallet/coinselection.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8bf789b4b4b26082aea1d91c4d7aa8b01aedfdcf/src/wallet/coinselection.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8bf789b4b4b26082aea1d91c4d7aa8b01aedfdcf/src/wallet/coinselection.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.h?ref=8bf789b4b4b26082aea1d91c4d7aa8b01aedfdcf",
        "patch": "@@ -10,6 +10,8 @@\n #include <primitives/transaction.h>\n #include <random.h>\n \n+#include <optional>\n+\n //! target minimum change amount\n static constexpr CAmount MIN_CHANGE{COIN / 100};\n //! final minimum change amount after paying for fees\n@@ -183,6 +185,15 @@ struct OutputGroup\n \n bool SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret);\n \n+/** Select coins by Single Random Draw. OutputGroups are selected randomly from the eligible\n+ * outputs until the target is satisfied\n+ *\n+ * @param[in]  utxo_pool    The positive effective value OutputGroups eligible for selection\n+ * @param[in]  target_value The target value to select for\n+ * @returns If successful, a pair of set of outputs and total selected value, otherwise, std::nullopt\n+ */\n+std::optional<std::pair<std::set<CInputCoin>, CAmount>> SelectCoinsSRD(const std::vector<OutputGroup>& utxo_pool, CAmount target_value);\n+\n // Original coin selection algorithm as a fallback\n bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& groups, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet);\n "
      }
    ]
  },
  {
    "sha": "3633b667ffca5a715d9fb27e977515c1e24f600a",
    "node_id": "C_kwDOABII59oAKDM2MzNiNjY3ZmZjYTVhNzE1ZDlmYjI3ZTk3NzUxNWMxZTI0ZjYwMGE",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-05-21T00:20:49Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-09-23T17:33:25Z"
      },
      "message": "Use SelectCoinsSRD if it has less waste\n\nTry to find a solution with SelectCoinsSRD. If we do have one, add it to\nthe list of solutions from which we choose the one with the least waste\nas the solution to use.",
      "tree": {
        "sha": "3726a303ec5bed9bcd998ed1d04877aae1558e91",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3726a303ec5bed9bcd998ed1d04877aae1558e91"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3633b667ffca5a715d9fb27e977515c1e24f600a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3633b667ffca5a715d9fb27e977515c1e24f600a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3633b667ffca5a715d9fb27e977515c1e24f600a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3633b667ffca5a715d9fb27e977515c1e24f600a/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8bf789b4b4b26082aea1d91c4d7aa8b01aedfdcf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8bf789b4b4b26082aea1d91c4d7aa8b01aedfdcf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8bf789b4b4b26082aea1d91c4d7aa8b01aedfdcf"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1724375f4cf19855c2c109b41b3529160b4f8ff9",
        "filename": "src/wallet/spend.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3633b667ffca5a715d9fb27e977515c1e24f600a/src/wallet/spend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3633b667ffca5a715d9fb27e977515c1e24f600a/src/wallet/spend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/spend.cpp?ref=3633b667ffca5a715d9fb27e977515c1e24f600a",
        "patch": "@@ -387,6 +387,15 @@ bool AttemptSelection(const CWallet& wallet, const CAmount& nTargetValue, const\n         results.emplace_back(std::make_tuple(waste, std::move(knapsack_coins), knapsack_value));\n     }\n \n+    // We include the minimum final change for SRD as we do want to avoid making really small change.\n+    // KnapsackSolver does not need this because it includes MIN_CHANGE internally.\n+    const CAmount srd_target = nTargetValue + coin_selection_params.m_change_fee + MIN_FINAL_CHANGE;\n+    auto srd_result = SelectCoinsSRD(positive_groups, srd_target);\n+    if (srd_result != std::nullopt) {\n+        const auto waste = GetSelectionWaste(srd_result->first, coin_selection_params.m_cost_of_change, srd_target, !coin_selection_params.m_subtract_fee_outputs);\n+        results.emplace_back(std::make_tuple(waste, std::move(srd_result->first), srd_result->second));\n+    }\n+\n     if (results.size() == 0) {\n         // No solution found\n         return false;"
      }
    ]
  }
]